public class Amazon.KeyManagementService.AlgorithmSpec : ConstantClass {
    public static AlgorithmSpec RSA_AES_KEY_WRAP_SHA_1;
    public static AlgorithmSpec RSA_AES_KEY_WRAP_SHA_256;
    public static AlgorithmSpec RSAES_OAEP_SHA_1;
    public static AlgorithmSpec RSAES_OAEP_SHA_256;
    public static AlgorithmSpec RSAES_PKCS1_V1_5;
    public static AlgorithmSpec SM2PKE;
    public AlgorithmSpec(string value);
    private static AlgorithmSpec();
    public static AlgorithmSpec FindValue(string value);
    public static AlgorithmSpec op_Implicit(string value);
}
public class Amazon.KeyManagementService.AmazonKeyManagementServiceClient : AmazonServiceClient {
    private static IServiceMetadata serviceMetadata;
    private IKeyManagementServicePaginatorFactory _paginators;
    public IKeyManagementServicePaginatorFactory Paginators { get; }
    protected IServiceMetadata ServiceMetadata { get; }
    public AmazonKeyManagementServiceClient(RegionEndpoint region);
    public AmazonKeyManagementServiceClient(AmazonKeyManagementServiceConfig config);
    public AmazonKeyManagementServiceClient(AWSCredentials credentials);
    public AmazonKeyManagementServiceClient(AWSCredentials credentials, RegionEndpoint region);
    public AmazonKeyManagementServiceClient(AWSCredentials credentials, AmazonKeyManagementServiceConfig clientConfig);
    public AmazonKeyManagementServiceClient(string awsAccessKeyId, string awsSecretAccessKey);
    public AmazonKeyManagementServiceClient(string awsAccessKeyId, string awsSecretAccessKey, RegionEndpoint region);
    public AmazonKeyManagementServiceClient(string awsAccessKeyId, string awsSecretAccessKey, AmazonKeyManagementServiceConfig clientConfig);
    public AmazonKeyManagementServiceClient(string awsAccessKeyId, string awsSecretAccessKey, string awsSessionToken);
    public AmazonKeyManagementServiceClient(string awsAccessKeyId, string awsSecretAccessKey, string awsSessionToken, RegionEndpoint region);
    public AmazonKeyManagementServiceClient(string awsAccessKeyId, string awsSecretAccessKey, string awsSessionToken, AmazonKeyManagementServiceConfig clientConfig);
    private static AmazonKeyManagementServiceClient();
    public sealed virtual IKeyManagementServicePaginatorFactory get_Paginators();
    protected virtual AbstractAWSSigner CreateSigner();
    protected virtual void CustomizeRuntimePipeline(RuntimePipeline pipeline);
    protected virtual IServiceMetadata get_ServiceMetadata();
    protected virtual void Dispose(bool disposing);
    internal virtual CancelKeyDeletionResponse CancelKeyDeletion(CancelKeyDeletionRequest request);
    public virtual Task`1<CancelKeyDeletionResponse> CancelKeyDeletionAsync(string keyId, CancellationToken cancellationToken);
    public virtual Task`1<CancelKeyDeletionResponse> CancelKeyDeletionAsync(CancelKeyDeletionRequest request, CancellationToken cancellationToken);
    internal virtual ConnectCustomKeyStoreResponse ConnectCustomKeyStore(ConnectCustomKeyStoreRequest request);
    public virtual Task`1<ConnectCustomKeyStoreResponse> ConnectCustomKeyStoreAsync(ConnectCustomKeyStoreRequest request, CancellationToken cancellationToken);
    internal virtual CreateAliasResponse CreateAlias(CreateAliasRequest request);
    public virtual Task`1<CreateAliasResponse> CreateAliasAsync(string aliasName, string targetKeyId, CancellationToken cancellationToken);
    public virtual Task`1<CreateAliasResponse> CreateAliasAsync(CreateAliasRequest request, CancellationToken cancellationToken);
    internal virtual CreateCustomKeyStoreResponse CreateCustomKeyStore(CreateCustomKeyStoreRequest request);
    public virtual Task`1<CreateCustomKeyStoreResponse> CreateCustomKeyStoreAsync(CreateCustomKeyStoreRequest request, CancellationToken cancellationToken);
    internal virtual CreateGrantResponse CreateGrant(CreateGrantRequest request);
    public virtual Task`1<CreateGrantResponse> CreateGrantAsync(CreateGrantRequest request, CancellationToken cancellationToken);
    internal virtual CreateKeyResponse CreateKey(CreateKeyRequest request);
    public virtual Task`1<CreateKeyResponse> CreateKeyAsync(CreateKeyRequest request, CancellationToken cancellationToken);
    internal virtual DecryptResponse Decrypt(DecryptRequest request);
    public virtual Task`1<DecryptResponse> DecryptAsync(DecryptRequest request, CancellationToken cancellationToken);
    internal virtual DeleteAliasResponse DeleteAlias(DeleteAliasRequest request);
    public virtual Task`1<DeleteAliasResponse> DeleteAliasAsync(string aliasName, CancellationToken cancellationToken);
    public virtual Task`1<DeleteAliasResponse> DeleteAliasAsync(DeleteAliasRequest request, CancellationToken cancellationToken);
    internal virtual DeleteCustomKeyStoreResponse DeleteCustomKeyStore(DeleteCustomKeyStoreRequest request);
    public virtual Task`1<DeleteCustomKeyStoreResponse> DeleteCustomKeyStoreAsync(DeleteCustomKeyStoreRequest request, CancellationToken cancellationToken);
    internal virtual DeleteImportedKeyMaterialResponse DeleteImportedKeyMaterial(DeleteImportedKeyMaterialRequest request);
    public virtual Task`1<DeleteImportedKeyMaterialResponse> DeleteImportedKeyMaterialAsync(DeleteImportedKeyMaterialRequest request, CancellationToken cancellationToken);
    internal virtual DeriveSharedSecretResponse DeriveSharedSecret(DeriveSharedSecretRequest request);
    public virtual Task`1<DeriveSharedSecretResponse> DeriveSharedSecretAsync(DeriveSharedSecretRequest request, CancellationToken cancellationToken);
    internal virtual DescribeCustomKeyStoresResponse DescribeCustomKeyStores(DescribeCustomKeyStoresRequest request);
    public virtual Task`1<DescribeCustomKeyStoresResponse> DescribeCustomKeyStoresAsync(DescribeCustomKeyStoresRequest request, CancellationToken cancellationToken);
    internal virtual DescribeKeyResponse DescribeKey(DescribeKeyRequest request);
    public virtual Task`1<DescribeKeyResponse> DescribeKeyAsync(string keyId, CancellationToken cancellationToken);
    public virtual Task`1<DescribeKeyResponse> DescribeKeyAsync(DescribeKeyRequest request, CancellationToken cancellationToken);
    internal virtual DisableKeyResponse DisableKey(DisableKeyRequest request);
    public virtual Task`1<DisableKeyResponse> DisableKeyAsync(string keyId, CancellationToken cancellationToken);
    public virtual Task`1<DisableKeyResponse> DisableKeyAsync(DisableKeyRequest request, CancellationToken cancellationToken);
    internal virtual DisableKeyRotationResponse DisableKeyRotation(DisableKeyRotationRequest request);
    public virtual Task`1<DisableKeyRotationResponse> DisableKeyRotationAsync(string keyId, CancellationToken cancellationToken);
    public virtual Task`1<DisableKeyRotationResponse> DisableKeyRotationAsync(DisableKeyRotationRequest request, CancellationToken cancellationToken);
    internal virtual DisconnectCustomKeyStoreResponse DisconnectCustomKeyStore(DisconnectCustomKeyStoreRequest request);
    public virtual Task`1<DisconnectCustomKeyStoreResponse> DisconnectCustomKeyStoreAsync(DisconnectCustomKeyStoreRequest request, CancellationToken cancellationToken);
    internal virtual EnableKeyResponse EnableKey(EnableKeyRequest request);
    public virtual Task`1<EnableKeyResponse> EnableKeyAsync(string keyId, CancellationToken cancellationToken);
    public virtual Task`1<EnableKeyResponse> EnableKeyAsync(EnableKeyRequest request, CancellationToken cancellationToken);
    internal virtual EnableKeyRotationResponse EnableKeyRotation(EnableKeyRotationRequest request);
    public virtual Task`1<EnableKeyRotationResponse> EnableKeyRotationAsync(string keyId, CancellationToken cancellationToken);
    public virtual Task`1<EnableKeyRotationResponse> EnableKeyRotationAsync(EnableKeyRotationRequest request, CancellationToken cancellationToken);
    internal virtual EncryptResponse Encrypt(EncryptRequest request);
    public virtual Task`1<EncryptResponse> EncryptAsync(EncryptRequest request, CancellationToken cancellationToken);
    internal virtual GenerateDataKeyResponse GenerateDataKey(GenerateDataKeyRequest request);
    public virtual Task`1<GenerateDataKeyResponse> GenerateDataKeyAsync(GenerateDataKeyRequest request, CancellationToken cancellationToken);
    internal virtual GenerateDataKeyPairResponse GenerateDataKeyPair(GenerateDataKeyPairRequest request);
    public virtual Task`1<GenerateDataKeyPairResponse> GenerateDataKeyPairAsync(GenerateDataKeyPairRequest request, CancellationToken cancellationToken);
    internal virtual GenerateDataKeyPairWithoutPlaintextResponse GenerateDataKeyPairWithoutPlaintext(GenerateDataKeyPairWithoutPlaintextRequest request);
    public virtual Task`1<GenerateDataKeyPairWithoutPlaintextResponse> GenerateDataKeyPairWithoutPlaintextAsync(GenerateDataKeyPairWithoutPlaintextRequest request, CancellationToken cancellationToken);
    internal virtual GenerateDataKeyWithoutPlaintextResponse GenerateDataKeyWithoutPlaintext(GenerateDataKeyWithoutPlaintextRequest request);
    public virtual Task`1<GenerateDataKeyWithoutPlaintextResponse> GenerateDataKeyWithoutPlaintextAsync(GenerateDataKeyWithoutPlaintextRequest request, CancellationToken cancellationToken);
    internal virtual GenerateMacResponse GenerateMac(GenerateMacRequest request);
    public virtual Task`1<GenerateMacResponse> GenerateMacAsync(GenerateMacRequest request, CancellationToken cancellationToken);
    internal virtual GenerateRandomResponse GenerateRandom(GenerateRandomRequest request);
    public virtual Task`1<GenerateRandomResponse> GenerateRandomAsync(Nullable`1<int> numberOfBytes, CancellationToken cancellationToken);
    public virtual Task`1<GenerateRandomResponse> GenerateRandomAsync(GenerateRandomRequest request, CancellationToken cancellationToken);
    internal virtual GetKeyPolicyResponse GetKeyPolicy(GetKeyPolicyRequest request);
    public virtual Task`1<GetKeyPolicyResponse> GetKeyPolicyAsync(string keyId, string policyName, CancellationToken cancellationToken);
    public virtual Task`1<GetKeyPolicyResponse> GetKeyPolicyAsync(GetKeyPolicyRequest request, CancellationToken cancellationToken);
    internal virtual GetKeyRotationStatusResponse GetKeyRotationStatus(GetKeyRotationStatusRequest request);
    public virtual Task`1<GetKeyRotationStatusResponse> GetKeyRotationStatusAsync(string keyId, CancellationToken cancellationToken);
    public virtual Task`1<GetKeyRotationStatusResponse> GetKeyRotationStatusAsync(GetKeyRotationStatusRequest request, CancellationToken cancellationToken);
    internal virtual GetParametersForImportResponse GetParametersForImport(GetParametersForImportRequest request);
    public virtual Task`1<GetParametersForImportResponse> GetParametersForImportAsync(GetParametersForImportRequest request, CancellationToken cancellationToken);
    internal virtual GetPublicKeyResponse GetPublicKey(GetPublicKeyRequest request);
    public virtual Task`1<GetPublicKeyResponse> GetPublicKeyAsync(GetPublicKeyRequest request, CancellationToken cancellationToken);
    internal virtual ImportKeyMaterialResponse ImportKeyMaterial(ImportKeyMaterialRequest request);
    public virtual Task`1<ImportKeyMaterialResponse> ImportKeyMaterialAsync(ImportKeyMaterialRequest request, CancellationToken cancellationToken);
    internal virtual ListAliasesResponse ListAliases(ListAliasesRequest request);
    public virtual Task`1<ListAliasesResponse> ListAliasesAsync(ListAliasesRequest request, CancellationToken cancellationToken);
    internal virtual ListGrantsResponse ListGrants(ListGrantsRequest request);
    public virtual Task`1<ListGrantsResponse> ListGrantsAsync(ListGrantsRequest request, CancellationToken cancellationToken);
    internal virtual ListKeyPoliciesResponse ListKeyPolicies(ListKeyPoliciesRequest request);
    public virtual Task`1<ListKeyPoliciesResponse> ListKeyPoliciesAsync(ListKeyPoliciesRequest request, CancellationToken cancellationToken);
    internal virtual ListKeyRotationsResponse ListKeyRotations(ListKeyRotationsRequest request);
    public virtual Task`1<ListKeyRotationsResponse> ListKeyRotationsAsync(ListKeyRotationsRequest request, CancellationToken cancellationToken);
    internal virtual ListKeysResponse ListKeys(ListKeysRequest request);
    public virtual Task`1<ListKeysResponse> ListKeysAsync(ListKeysRequest request, CancellationToken cancellationToken);
    internal virtual ListResourceTagsResponse ListResourceTags(ListResourceTagsRequest request);
    public virtual Task`1<ListResourceTagsResponse> ListResourceTagsAsync(ListResourceTagsRequest request, CancellationToken cancellationToken);
    internal virtual ListRetirableGrantsResponse ListRetirableGrants(ListRetirableGrantsRequest request);
    public virtual Task`1<ListRetirableGrantsResponse> ListRetirableGrantsAsync(string retiringPrincipal, CancellationToken cancellationToken);
    public virtual Task`1<ListRetirableGrantsResponse> ListRetirableGrantsAsync(CancellationToken cancellationToken);
    public virtual Task`1<ListRetirableGrantsResponse> ListRetirableGrantsAsync(ListRetirableGrantsRequest request, CancellationToken cancellationToken);
    internal virtual PutKeyPolicyResponse PutKeyPolicy(PutKeyPolicyRequest request);
    public virtual Task`1<PutKeyPolicyResponse> PutKeyPolicyAsync(string keyId, string policy, string policyName, CancellationToken cancellationToken);
    public virtual Task`1<PutKeyPolicyResponse> PutKeyPolicyAsync(PutKeyPolicyRequest request, CancellationToken cancellationToken);
    internal virtual ReEncryptResponse ReEncrypt(ReEncryptRequest request);
    public virtual Task`1<ReEncryptResponse> ReEncryptAsync(ReEncryptRequest request, CancellationToken cancellationToken);
    internal virtual ReplicateKeyResponse ReplicateKey(ReplicateKeyRequest request);
    public virtual Task`1<ReplicateKeyResponse> ReplicateKeyAsync(ReplicateKeyRequest request, CancellationToken cancellationToken);
    internal virtual RetireGrantResponse RetireGrant(RetireGrantRequest request);
    public virtual Task`1<RetireGrantResponse> RetireGrantAsync(string grantToken, CancellationToken cancellationToken);
    public virtual Task`1<RetireGrantResponse> RetireGrantAsync(RetireGrantRequest request, CancellationToken cancellationToken);
    internal virtual RevokeGrantResponse RevokeGrant(RevokeGrantRequest request);
    public virtual Task`1<RevokeGrantResponse> RevokeGrantAsync(string grantId, string keyId, CancellationToken cancellationToken);
    public virtual Task`1<RevokeGrantResponse> RevokeGrantAsync(RevokeGrantRequest request, CancellationToken cancellationToken);
    internal virtual RotateKeyOnDemandResponse RotateKeyOnDemand(RotateKeyOnDemandRequest request);
    public virtual Task`1<RotateKeyOnDemandResponse> RotateKeyOnDemandAsync(RotateKeyOnDemandRequest request, CancellationToken cancellationToken);
    internal virtual ScheduleKeyDeletionResponse ScheduleKeyDeletion(ScheduleKeyDeletionRequest request);
    public virtual Task`1<ScheduleKeyDeletionResponse> ScheduleKeyDeletionAsync(string keyId, CancellationToken cancellationToken);
    public virtual Task`1<ScheduleKeyDeletionResponse> ScheduleKeyDeletionAsync(string keyId, Nullable`1<int> pendingWindowInDays, CancellationToken cancellationToken);
    public virtual Task`1<ScheduleKeyDeletionResponse> ScheduleKeyDeletionAsync(ScheduleKeyDeletionRequest request, CancellationToken cancellationToken);
    internal virtual SignResponse Sign(SignRequest request);
    public virtual Task`1<SignResponse> SignAsync(SignRequest request, CancellationToken cancellationToken);
    internal virtual TagResourceResponse TagResource(TagResourceRequest request);
    public virtual Task`1<TagResourceResponse> TagResourceAsync(TagResourceRequest request, CancellationToken cancellationToken);
    internal virtual UntagResourceResponse UntagResource(UntagResourceRequest request);
    public virtual Task`1<UntagResourceResponse> UntagResourceAsync(UntagResourceRequest request, CancellationToken cancellationToken);
    internal virtual UpdateAliasResponse UpdateAlias(UpdateAliasRequest request);
    public virtual Task`1<UpdateAliasResponse> UpdateAliasAsync(string aliasName, string targetKeyId, CancellationToken cancellationToken);
    public virtual Task`1<UpdateAliasResponse> UpdateAliasAsync(UpdateAliasRequest request, CancellationToken cancellationToken);
    internal virtual UpdateCustomKeyStoreResponse UpdateCustomKeyStore(UpdateCustomKeyStoreRequest request);
    public virtual Task`1<UpdateCustomKeyStoreResponse> UpdateCustomKeyStoreAsync(UpdateCustomKeyStoreRequest request, CancellationToken cancellationToken);
    internal virtual UpdateKeyDescriptionResponse UpdateKeyDescription(UpdateKeyDescriptionRequest request);
    public virtual Task`1<UpdateKeyDescriptionResponse> UpdateKeyDescriptionAsync(string keyId, string description, CancellationToken cancellationToken);
    public virtual Task`1<UpdateKeyDescriptionResponse> UpdateKeyDescriptionAsync(UpdateKeyDescriptionRequest request, CancellationToken cancellationToken);
    internal virtual UpdatePrimaryRegionResponse UpdatePrimaryRegion(UpdatePrimaryRegionRequest request);
    public virtual Task`1<UpdatePrimaryRegionResponse> UpdatePrimaryRegionAsync(UpdatePrimaryRegionRequest request, CancellationToken cancellationToken);
    internal virtual VerifyResponse Verify(VerifyRequest request);
    public virtual Task`1<VerifyResponse> VerifyAsync(VerifyRequest request, CancellationToken cancellationToken);
    internal virtual VerifyMacResponse VerifyMac(VerifyMacRequest request);
    public virtual Task`1<VerifyMacResponse> VerifyMacAsync(VerifyMacRequest request, CancellationToken cancellationToken);
    public sealed virtual Endpoint DetermineServiceOperationEndpoint(AmazonWebServiceRequest request);
    private sealed virtual override IClientConfig Amazon.Runtime.IAmazonService.get_Config();
}
[AWSSignerTypeAttribute("v4")]
public class Amazon.KeyManagementService.AmazonKeyManagementServiceConfig : ClientConfig {
    private static string UserAgentString;
    private static AmazonKeyManagementServiceEndpointResolver EndpointResolver;
    private string _userAgent;
    public static string ServiceId { get; }
    public string RegionEndpointServiceName { get; }
    public string ServiceVersion { get; }
    public string UserAgent { get; }
    private static AmazonKeyManagementServiceConfig();
    public static string get_ServiceId();
    public virtual string get_RegionEndpointServiceName();
    public virtual string get_ServiceVersion();
    public virtual string get_UserAgent();
    public virtual Endpoint DetermineServiceOperationEndpoint(ServiceOperationEndpointParameters parameters);
}
public static class Amazon.KeyManagementService.AmazonKeyManagementServiceDefaultConfiguration : object {
    [CompilerGeneratedAttribute]
private static IDefaultConfiguration <Standard>k__BackingField;
    [CompilerGeneratedAttribute]
private static IDefaultConfiguration <InRegion>k__BackingField;
    [CompilerGeneratedAttribute]
private static IDefaultConfiguration <CrossRegion>k__BackingField;
    [CompilerGeneratedAttribute]
private static IDefaultConfiguration <Mobile>k__BackingField;
    [CompilerGeneratedAttribute]
private static IDefaultConfiguration <Auto>k__BackingField;
    public static IDefaultConfiguration Standard { get; }
    public static IDefaultConfiguration InRegion { get; }
    public static IDefaultConfiguration CrossRegion { get; }
    public static IDefaultConfiguration Mobile { get; }
    public static IDefaultConfiguration Auto { get; }
    private static AmazonKeyManagementServiceDefaultConfiguration();
    public static ReadOnlyCollection`1<IDefaultConfiguration> GetAllConfigurations();
    [CompilerGeneratedAttribute]
public static IDefaultConfiguration get_Standard();
    [CompilerGeneratedAttribute]
public static IDefaultConfiguration get_InRegion();
    [CompilerGeneratedAttribute]
public static IDefaultConfiguration get_CrossRegion();
    [CompilerGeneratedAttribute]
public static IDefaultConfiguration get_Mobile();
    [CompilerGeneratedAttribute]
public static IDefaultConfiguration get_Auto();
}
public class Amazon.KeyManagementService.AmazonKeyManagementServiceException : AmazonServiceException {
    public AmazonKeyManagementServiceException(string message);
    public AmazonKeyManagementServiceException(string message, Exception innerException);
    public AmazonKeyManagementServiceException(Exception innerException);
    public AmazonKeyManagementServiceException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public AmazonKeyManagementServiceException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.KeyManagementService.AmazonKeyManagementServiceRequest : AmazonWebServiceRequest {
}
public class Amazon.KeyManagementService.ConnectionErrorCodeType : ConstantClass {
    public static ConnectionErrorCodeType CLUSTER_NOT_FOUND;
    public static ConnectionErrorCodeType INSUFFICIENT_CLOUDHSM_HSMS;
    public static ConnectionErrorCodeType INSUFFICIENT_FREE_ADDRESSES_IN_SUBNET;
    public static ConnectionErrorCodeType INTERNAL_ERROR;
    public static ConnectionErrorCodeType INVALID_CREDENTIALS;
    public static ConnectionErrorCodeType NETWORK_ERRORS;
    public static ConnectionErrorCodeType SUBNET_NOT_FOUND;
    public static ConnectionErrorCodeType USER_LOCKED_OUT;
    public static ConnectionErrorCodeType USER_LOGGED_IN;
    public static ConnectionErrorCodeType USER_NOT_FOUND;
    public static ConnectionErrorCodeType XKS_PROXY_ACCESS_DENIED;
    public static ConnectionErrorCodeType XKS_PROXY_INVALID_CONFIGURATION;
    public static ConnectionErrorCodeType XKS_PROXY_INVALID_RESPONSE;
    public static ConnectionErrorCodeType XKS_PROXY_INVALID_TLS_CONFIGURATION;
    public static ConnectionErrorCodeType XKS_PROXY_NOT_REACHABLE;
    public static ConnectionErrorCodeType XKS_PROXY_TIMED_OUT;
    public static ConnectionErrorCodeType XKS_VPC_ENDPOINT_SERVICE_INVALID_CONFIGURATION;
    public static ConnectionErrorCodeType XKS_VPC_ENDPOINT_SERVICE_NOT_FOUND;
    public ConnectionErrorCodeType(string value);
    private static ConnectionErrorCodeType();
    public static ConnectionErrorCodeType FindValue(string value);
    public static ConnectionErrorCodeType op_Implicit(string value);
}
public class Amazon.KeyManagementService.ConnectionStateType : ConstantClass {
    public static ConnectionStateType CONNECTED;
    public static ConnectionStateType CONNECTING;
    public static ConnectionStateType DISCONNECTED;
    public static ConnectionStateType DISCONNECTING;
    public static ConnectionStateType FAILED;
    public ConnectionStateType(string value);
    private static ConnectionStateType();
    public static ConnectionStateType FindValue(string value);
    public static ConnectionStateType op_Implicit(string value);
}
public class Amazon.KeyManagementService.CustomerMasterKeySpec : ConstantClass {
    public static CustomerMasterKeySpec ECC_NIST_P256;
    public static CustomerMasterKeySpec ECC_NIST_P384;
    public static CustomerMasterKeySpec ECC_NIST_P521;
    public static CustomerMasterKeySpec ECC_SECG_P256K1;
    public static CustomerMasterKeySpec HMAC_224;
    public static CustomerMasterKeySpec HMAC_256;
    public static CustomerMasterKeySpec HMAC_384;
    public static CustomerMasterKeySpec HMAC_512;
    public static CustomerMasterKeySpec RSA_2048;
    public static CustomerMasterKeySpec RSA_3072;
    public static CustomerMasterKeySpec RSA_4096;
    public static CustomerMasterKeySpec SM2;
    public static CustomerMasterKeySpec SYMMETRIC_DEFAULT;
    public CustomerMasterKeySpec(string value);
    private static CustomerMasterKeySpec();
    public static CustomerMasterKeySpec FindValue(string value);
    public static CustomerMasterKeySpec op_Implicit(string value);
}
public class Amazon.KeyManagementService.CustomKeyStoreType : ConstantClass {
    public static CustomKeyStoreType AWS_CLOUDHSM;
    public static CustomKeyStoreType EXTERNAL_KEY_STORE;
    public CustomKeyStoreType(string value);
    private static CustomKeyStoreType();
    public static CustomKeyStoreType FindValue(string value);
    public static CustomKeyStoreType op_Implicit(string value);
}
public class Amazon.KeyManagementService.DataKeyPairSpec : ConstantClass {
    public static DataKeyPairSpec ECC_NIST_P256;
    public static DataKeyPairSpec ECC_NIST_P384;
    public static DataKeyPairSpec ECC_NIST_P521;
    public static DataKeyPairSpec ECC_SECG_P256K1;
    public static DataKeyPairSpec RSA_2048;
    public static DataKeyPairSpec RSA_3072;
    public static DataKeyPairSpec RSA_4096;
    public static DataKeyPairSpec SM2;
    public DataKeyPairSpec(string value);
    private static DataKeyPairSpec();
    public static DataKeyPairSpec FindValue(string value);
    public static DataKeyPairSpec op_Implicit(string value);
}
public class Amazon.KeyManagementService.DataKeySpec : ConstantClass {
    public static DataKeySpec AES_128;
    public static DataKeySpec AES_256;
    public DataKeySpec(string value);
    private static DataKeySpec();
    public static DataKeySpec FindValue(string value);
    public static DataKeySpec op_Implicit(string value);
}
public class Amazon.KeyManagementService.EncryptionAlgorithmSpec : ConstantClass {
    public static EncryptionAlgorithmSpec RSAES_OAEP_SHA_1;
    public static EncryptionAlgorithmSpec RSAES_OAEP_SHA_256;
    public static EncryptionAlgorithmSpec SM2PKE;
    public static EncryptionAlgorithmSpec SYMMETRIC_DEFAULT;
    public EncryptionAlgorithmSpec(string value);
    private static EncryptionAlgorithmSpec();
    public static EncryptionAlgorithmSpec FindValue(string value);
    public static EncryptionAlgorithmSpec op_Implicit(string value);
}
public class Amazon.KeyManagementService.Endpoints.KeyManagementServiceEndpointParameters : EndpointParameters {
    public string Region { get; public set; }
    public Nullable`1<bool> UseDualStack { get; public set; }
    public Nullable`1<bool> UseFIPS { get; public set; }
    public string Endpoint { get; public set; }
    public string get_Region();
    public void set_Region(string value);
    public Nullable`1<bool> get_UseDualStack();
    public void set_UseDualStack(Nullable`1<bool> value);
    public Nullable`1<bool> get_UseFIPS();
    public void set_UseFIPS(Nullable`1<bool> value);
    public string get_Endpoint();
    public void set_Endpoint(string value);
}
public class Amazon.KeyManagementService.ExpirationModelType : ConstantClass {
    public static ExpirationModelType KEY_MATERIAL_DOES_NOT_EXPIRE;
    public static ExpirationModelType KEY_MATERIAL_EXPIRES;
    public ExpirationModelType(string value);
    private static ExpirationModelType();
    public static ExpirationModelType FindValue(string value);
    public static ExpirationModelType op_Implicit(string value);
}
public class Amazon.KeyManagementService.GrantOperation : ConstantClass {
    public static GrantOperation CreateGrant;
    public static GrantOperation Decrypt;
    public static GrantOperation DeriveSharedSecret;
    public static GrantOperation DescribeKey;
    public static GrantOperation Encrypt;
    public static GrantOperation GenerateDataKey;
    public static GrantOperation GenerateDataKeyPair;
    public static GrantOperation GenerateDataKeyPairWithoutPlaintext;
    public static GrantOperation GenerateDataKeyWithoutPlaintext;
    public static GrantOperation GenerateMac;
    public static GrantOperation GetPublicKey;
    public static GrantOperation ReEncryptFrom;
    public static GrantOperation ReEncryptTo;
    public static GrantOperation RetireGrant;
    public static GrantOperation Sign;
    public static GrantOperation Verify;
    public static GrantOperation VerifyMac;
    public GrantOperation(string value);
    private static GrantOperation();
    public static GrantOperation FindValue(string value);
    public static GrantOperation op_Implicit(string value);
}
public interface Amazon.KeyManagementService.IAmazonKeyManagementService {
    public IKeyManagementServicePaginatorFactory Paginators { get; }
    public abstract virtual IKeyManagementServicePaginatorFactory get_Paginators();
    public abstract virtual Task`1<CancelKeyDeletionResponse> CancelKeyDeletionAsync(string keyId, CancellationToken cancellationToken);
    public abstract virtual Task`1<CancelKeyDeletionResponse> CancelKeyDeletionAsync(CancelKeyDeletionRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ConnectCustomKeyStoreResponse> ConnectCustomKeyStoreAsync(ConnectCustomKeyStoreRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<CreateAliasResponse> CreateAliasAsync(string aliasName, string targetKeyId, CancellationToken cancellationToken);
    public abstract virtual Task`1<CreateAliasResponse> CreateAliasAsync(CreateAliasRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<CreateCustomKeyStoreResponse> CreateCustomKeyStoreAsync(CreateCustomKeyStoreRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<CreateGrantResponse> CreateGrantAsync(CreateGrantRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<CreateKeyResponse> CreateKeyAsync(CreateKeyRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DecryptResponse> DecryptAsync(DecryptRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeleteAliasResponse> DeleteAliasAsync(string aliasName, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeleteAliasResponse> DeleteAliasAsync(DeleteAliasRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeleteCustomKeyStoreResponse> DeleteCustomKeyStoreAsync(DeleteCustomKeyStoreRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeleteImportedKeyMaterialResponse> DeleteImportedKeyMaterialAsync(DeleteImportedKeyMaterialRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeriveSharedSecretResponse> DeriveSharedSecretAsync(DeriveSharedSecretRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DescribeCustomKeyStoresResponse> DescribeCustomKeyStoresAsync(DescribeCustomKeyStoresRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DescribeKeyResponse> DescribeKeyAsync(string keyId, CancellationToken cancellationToken);
    public abstract virtual Task`1<DescribeKeyResponse> DescribeKeyAsync(DescribeKeyRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DisableKeyResponse> DisableKeyAsync(string keyId, CancellationToken cancellationToken);
    public abstract virtual Task`1<DisableKeyResponse> DisableKeyAsync(DisableKeyRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DisableKeyRotationResponse> DisableKeyRotationAsync(string keyId, CancellationToken cancellationToken);
    public abstract virtual Task`1<DisableKeyRotationResponse> DisableKeyRotationAsync(DisableKeyRotationRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DisconnectCustomKeyStoreResponse> DisconnectCustomKeyStoreAsync(DisconnectCustomKeyStoreRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<EnableKeyResponse> EnableKeyAsync(string keyId, CancellationToken cancellationToken);
    public abstract virtual Task`1<EnableKeyResponse> EnableKeyAsync(EnableKeyRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<EnableKeyRotationResponse> EnableKeyRotationAsync(string keyId, CancellationToken cancellationToken);
    public abstract virtual Task`1<EnableKeyRotationResponse> EnableKeyRotationAsync(EnableKeyRotationRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<EncryptResponse> EncryptAsync(EncryptRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<GenerateDataKeyResponse> GenerateDataKeyAsync(GenerateDataKeyRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<GenerateDataKeyPairResponse> GenerateDataKeyPairAsync(GenerateDataKeyPairRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<GenerateDataKeyPairWithoutPlaintextResponse> GenerateDataKeyPairWithoutPlaintextAsync(GenerateDataKeyPairWithoutPlaintextRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<GenerateDataKeyWithoutPlaintextResponse> GenerateDataKeyWithoutPlaintextAsync(GenerateDataKeyWithoutPlaintextRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<GenerateMacResponse> GenerateMacAsync(GenerateMacRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<GenerateRandomResponse> GenerateRandomAsync(Nullable`1<int> numberOfBytes, CancellationToken cancellationToken);
    public abstract virtual Task`1<GenerateRandomResponse> GenerateRandomAsync(GenerateRandomRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<GetKeyPolicyResponse> GetKeyPolicyAsync(string keyId, string policyName, CancellationToken cancellationToken);
    public abstract virtual Task`1<GetKeyPolicyResponse> GetKeyPolicyAsync(GetKeyPolicyRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<GetKeyRotationStatusResponse> GetKeyRotationStatusAsync(string keyId, CancellationToken cancellationToken);
    public abstract virtual Task`1<GetKeyRotationStatusResponse> GetKeyRotationStatusAsync(GetKeyRotationStatusRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<GetParametersForImportResponse> GetParametersForImportAsync(GetParametersForImportRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<GetPublicKeyResponse> GetPublicKeyAsync(GetPublicKeyRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ImportKeyMaterialResponse> ImportKeyMaterialAsync(ImportKeyMaterialRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ListAliasesResponse> ListAliasesAsync(ListAliasesRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ListGrantsResponse> ListGrantsAsync(ListGrantsRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ListKeyPoliciesResponse> ListKeyPoliciesAsync(ListKeyPoliciesRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ListKeyRotationsResponse> ListKeyRotationsAsync(ListKeyRotationsRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ListKeysResponse> ListKeysAsync(ListKeysRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ListResourceTagsResponse> ListResourceTagsAsync(ListResourceTagsRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ListRetirableGrantsResponse> ListRetirableGrantsAsync(string retiringPrincipal, CancellationToken cancellationToken);
    public abstract virtual Task`1<ListRetirableGrantsResponse> ListRetirableGrantsAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<ListRetirableGrantsResponse> ListRetirableGrantsAsync(ListRetirableGrantsRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<PutKeyPolicyResponse> PutKeyPolicyAsync(string keyId, string policy, string policyName, CancellationToken cancellationToken);
    public abstract virtual Task`1<PutKeyPolicyResponse> PutKeyPolicyAsync(PutKeyPolicyRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ReEncryptResponse> ReEncryptAsync(ReEncryptRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ReplicateKeyResponse> ReplicateKeyAsync(ReplicateKeyRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<RetireGrantResponse> RetireGrantAsync(string grantToken, CancellationToken cancellationToken);
    public abstract virtual Task`1<RetireGrantResponse> RetireGrantAsync(RetireGrantRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<RevokeGrantResponse> RevokeGrantAsync(string grantId, string keyId, CancellationToken cancellationToken);
    public abstract virtual Task`1<RevokeGrantResponse> RevokeGrantAsync(RevokeGrantRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<RotateKeyOnDemandResponse> RotateKeyOnDemandAsync(RotateKeyOnDemandRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ScheduleKeyDeletionResponse> ScheduleKeyDeletionAsync(string keyId, CancellationToken cancellationToken);
    public abstract virtual Task`1<ScheduleKeyDeletionResponse> ScheduleKeyDeletionAsync(string keyId, Nullable`1<int> pendingWindowInDays, CancellationToken cancellationToken);
    public abstract virtual Task`1<ScheduleKeyDeletionResponse> ScheduleKeyDeletionAsync(ScheduleKeyDeletionRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<SignResponse> SignAsync(SignRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<TagResourceResponse> TagResourceAsync(TagResourceRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<UntagResourceResponse> UntagResourceAsync(UntagResourceRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<UpdateAliasResponse> UpdateAliasAsync(string aliasName, string targetKeyId, CancellationToken cancellationToken);
    public abstract virtual Task`1<UpdateAliasResponse> UpdateAliasAsync(UpdateAliasRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<UpdateCustomKeyStoreResponse> UpdateCustomKeyStoreAsync(UpdateCustomKeyStoreRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<UpdateKeyDescriptionResponse> UpdateKeyDescriptionAsync(string keyId, string description, CancellationToken cancellationToken);
    public abstract virtual Task`1<UpdateKeyDescriptionResponse> UpdateKeyDescriptionAsync(UpdateKeyDescriptionRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<UpdatePrimaryRegionResponse> UpdatePrimaryRegionAsync(UpdatePrimaryRegionRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<VerifyResponse> VerifyAsync(VerifyRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<VerifyMacResponse> VerifyMacAsync(VerifyMacRequest request, CancellationToken cancellationToken);
    public abstract virtual Endpoint DetermineServiceOperationEndpoint(AmazonWebServiceRequest request);
    [DynamicDependencyAttribute("512", "Amazon.KeyManagementService.AmazonKeyManagementServiceConfig")]
private static override ClientConfig Amazon.Runtime.IAmazonService.CreateDefaultClientConfig();
    [UnconditionalSuppressMessageAttribute("AssemblyLoadTrimming", "IL2026:RequiresUnreferencedCode")]
private static override IAmazonService Amazon.Runtime.IAmazonService.CreateDefaultServiceClient(AWSCredentials awsCredentials, ClientConfig clientConfig);
}
public class Amazon.KeyManagementService.Internal.AmazonKeyManagementServiceEndpointProvider : object {
    public sealed virtual Endpoint ResolveEndpoint(EndpointParameters parameters);
}
public class Amazon.KeyManagementService.Internal.AmazonKeyManagementServiceEndpointResolver : BaseEndpointResolver {
    protected virtual void ServiceSpecificHandler(IExecutionContext executionContext, EndpointParameters parameters);
    protected virtual EndpointParameters MapEndpointsParameters(IRequestContext requestContext);
}
public class Amazon.KeyManagementService.Internal.AmazonKeyManagementServiceMetadata : object {
    public string ServiceId { get; }
    public IDictionary`2<string, string> OperationNameMapping { get; }
    public sealed virtual string get_ServiceId();
    public sealed virtual IDictionary`2<string, string> get_OperationNameMapping();
}
public class Amazon.KeyManagementService.KeyAgreementAlgorithmSpec : ConstantClass {
    public static KeyAgreementAlgorithmSpec ECDH;
    public KeyAgreementAlgorithmSpec(string value);
    private static KeyAgreementAlgorithmSpec();
    public static KeyAgreementAlgorithmSpec FindValue(string value);
    public static KeyAgreementAlgorithmSpec op_Implicit(string value);
}
public class Amazon.KeyManagementService.KeyEncryptionMechanism : ConstantClass {
    public static KeyEncryptionMechanism RSAES_OAEP_SHA_256;
    public KeyEncryptionMechanism(string value);
    private static KeyEncryptionMechanism();
    public static KeyEncryptionMechanism FindValue(string value);
    public static KeyEncryptionMechanism op_Implicit(string value);
}
public class Amazon.KeyManagementService.KeyManagerType : ConstantClass {
    public static KeyManagerType AWS;
    public static KeyManagerType CUSTOMER;
    public KeyManagerType(string value);
    private static KeyManagerType();
    public static KeyManagerType FindValue(string value);
    public static KeyManagerType op_Implicit(string value);
}
public class Amazon.KeyManagementService.KeySpec : ConstantClass {
    public static KeySpec ECC_NIST_P256;
    public static KeySpec ECC_NIST_P384;
    public static KeySpec ECC_NIST_P521;
    public static KeySpec ECC_SECG_P256K1;
    public static KeySpec HMAC_224;
    public static KeySpec HMAC_256;
    public static KeySpec HMAC_384;
    public static KeySpec HMAC_512;
    public static KeySpec RSA_2048;
    public static KeySpec RSA_3072;
    public static KeySpec RSA_4096;
    public static KeySpec SM2;
    public static KeySpec SYMMETRIC_DEFAULT;
    public KeySpec(string value);
    private static KeySpec();
    public static KeySpec FindValue(string value);
    public static KeySpec op_Implicit(string value);
}
public class Amazon.KeyManagementService.KeyState : ConstantClass {
    public static KeyState Creating;
    public static KeyState Disabled;
    public static KeyState Enabled;
    public static KeyState PendingDeletion;
    public static KeyState PendingImport;
    public static KeyState PendingReplicaDeletion;
    public static KeyState Unavailable;
    public static KeyState Updating;
    public KeyState(string value);
    private static KeyState();
    public static KeyState FindValue(string value);
    public static KeyState op_Implicit(string value);
}
public class Amazon.KeyManagementService.KeyUsageType : ConstantClass {
    public static KeyUsageType ENCRYPT_DECRYPT;
    public static KeyUsageType GENERATE_VERIFY_MAC;
    public static KeyUsageType KEY_AGREEMENT;
    public static KeyUsageType SIGN_VERIFY;
    public KeyUsageType(string value);
    private static KeyUsageType();
    public static KeyUsageType FindValue(string value);
    public static KeyUsageType op_Implicit(string value);
}
public class Amazon.KeyManagementService.MacAlgorithmSpec : ConstantClass {
    public static MacAlgorithmSpec HMAC_SHA_224;
    public static MacAlgorithmSpec HMAC_SHA_256;
    public static MacAlgorithmSpec HMAC_SHA_384;
    public static MacAlgorithmSpec HMAC_SHA_512;
    public MacAlgorithmSpec(string value);
    private static MacAlgorithmSpec();
    public static MacAlgorithmSpec FindValue(string value);
    public static MacAlgorithmSpec op_Implicit(string value);
}
public class Amazon.KeyManagementService.MessageType : ConstantClass {
    public static MessageType DIGEST;
    public static MessageType RAW;
    public MessageType(string value);
    private static MessageType();
    public static MessageType FindValue(string value);
    public static MessageType op_Implicit(string value);
}
public class Amazon.KeyManagementService.Model.AliasListEntry : object {
    private string _aliasArn;
    private string _aliasName;
    private Nullable`1<DateTime> _creationDate;
    private Nullable`1<DateTime> _lastUpdatedDate;
    private string _targetKeyId;
    [AWSPropertyAttribute]
public string AliasArn { get; public set; }
    [AWSPropertyAttribute]
public string AliasName { get; public set; }
    public Nullable`1<DateTime> CreationDate { get; public set; }
    public Nullable`1<DateTime> LastUpdatedDate { get; public set; }
    [AWSPropertyAttribute]
public string TargetKeyId { get; public set; }
    public string get_AliasArn();
    public void set_AliasArn(string value);
    internal bool IsSetAliasArn();
    public string get_AliasName();
    public void set_AliasName(string value);
    internal bool IsSetAliasName();
    public Nullable`1<DateTime> get_CreationDate();
    public void set_CreationDate(Nullable`1<DateTime> value);
    internal bool IsSetCreationDate();
    public Nullable`1<DateTime> get_LastUpdatedDate();
    public void set_LastUpdatedDate(Nullable`1<DateTime> value);
    internal bool IsSetLastUpdatedDate();
    public string get_TargetKeyId();
    public void set_TargetKeyId(string value);
    internal bool IsSetTargetKeyId();
}
public class Amazon.KeyManagementService.Model.AlreadyExistsException : AmazonKeyManagementServiceException {
    public AlreadyExistsException(string message);
    public AlreadyExistsException(string message, Exception innerException);
    public AlreadyExistsException(Exception innerException);
    public AlreadyExistsException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public AlreadyExistsException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.KeyManagementService.Model.CancelKeyDeletionRequest : AmazonKeyManagementServiceRequest {
    private string _keyId;
    [AWSPropertyAttribute]
public string KeyId { get; public set; }
    public string get_KeyId();
    public void set_KeyId(string value);
    internal bool IsSetKeyId();
}
public class Amazon.KeyManagementService.Model.CancelKeyDeletionResponse : AmazonWebServiceResponse {
    private string _keyId;
    [AWSPropertyAttribute]
public string KeyId { get; public set; }
    public string get_KeyId();
    public void set_KeyId(string value);
    internal bool IsSetKeyId();
}
public class Amazon.KeyManagementService.Model.CloudHsmClusterInUseException : AmazonKeyManagementServiceException {
    public CloudHsmClusterInUseException(string message);
    public CloudHsmClusterInUseException(string message, Exception innerException);
    public CloudHsmClusterInUseException(Exception innerException);
    public CloudHsmClusterInUseException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public CloudHsmClusterInUseException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.KeyManagementService.Model.CloudHsmClusterInvalidConfigurationException : AmazonKeyManagementServiceException {
    public CloudHsmClusterInvalidConfigurationException(string message);
    public CloudHsmClusterInvalidConfigurationException(string message, Exception innerException);
    public CloudHsmClusterInvalidConfigurationException(Exception innerException);
    public CloudHsmClusterInvalidConfigurationException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public CloudHsmClusterInvalidConfigurationException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.KeyManagementService.Model.CloudHsmClusterNotActiveException : AmazonKeyManagementServiceException {
    public CloudHsmClusterNotActiveException(string message);
    public CloudHsmClusterNotActiveException(string message, Exception innerException);
    public CloudHsmClusterNotActiveException(Exception innerException);
    public CloudHsmClusterNotActiveException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public CloudHsmClusterNotActiveException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.KeyManagementService.Model.CloudHsmClusterNotFoundException : AmazonKeyManagementServiceException {
    public CloudHsmClusterNotFoundException(string message);
    public CloudHsmClusterNotFoundException(string message, Exception innerException);
    public CloudHsmClusterNotFoundException(Exception innerException);
    public CloudHsmClusterNotFoundException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public CloudHsmClusterNotFoundException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.KeyManagementService.Model.CloudHsmClusterNotRelatedException : AmazonKeyManagementServiceException {
    public CloudHsmClusterNotRelatedException(string message);
    public CloudHsmClusterNotRelatedException(string message, Exception innerException);
    public CloudHsmClusterNotRelatedException(Exception innerException);
    public CloudHsmClusterNotRelatedException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public CloudHsmClusterNotRelatedException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.KeyManagementService.Model.ConflictException : AmazonKeyManagementServiceException {
    public ConflictException(string message);
    public ConflictException(string message, Exception innerException);
    public ConflictException(Exception innerException);
    public ConflictException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public ConflictException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.KeyManagementService.Model.ConnectCustomKeyStoreRequest : AmazonKeyManagementServiceRequest {
    private string _customKeyStoreId;
    [AWSPropertyAttribute]
public string CustomKeyStoreId { get; public set; }
    public string get_CustomKeyStoreId();
    public void set_CustomKeyStoreId(string value);
    internal bool IsSetCustomKeyStoreId();
}
public class Amazon.KeyManagementService.Model.ConnectCustomKeyStoreResponse : AmazonWebServiceResponse {
}
public class Amazon.KeyManagementService.Model.CreateAliasRequest : AmazonKeyManagementServiceRequest {
    private string _aliasName;
    private string _targetKeyId;
    [AWSPropertyAttribute]
public string AliasName { get; public set; }
    [AWSPropertyAttribute]
public string TargetKeyId { get; public set; }
    public string get_AliasName();
    public void set_AliasName(string value);
    internal bool IsSetAliasName();
    public string get_TargetKeyId();
    public void set_TargetKeyId(string value);
    internal bool IsSetTargetKeyId();
}
public class Amazon.KeyManagementService.Model.CreateAliasResponse : AmazonWebServiceResponse {
}
public class Amazon.KeyManagementService.Model.CreateCustomKeyStoreRequest : AmazonKeyManagementServiceRequest {
    private string _cloudHsmClusterId;
    private string _customKeyStoreName;
    private CustomKeyStoreType _customKeyStoreType;
    private string _keyStorePassword;
    private string _trustAnchorCertificate;
    private XksProxyAuthenticationCredentialType _xksProxyAuthenticationCredential;
    private XksProxyConnectivityType _xksProxyConnectivity;
    private string _xksProxyUriEndpoint;
    private string _xksProxyUriPath;
    private string _xksProxyVpcEndpointServiceName;
    [AWSPropertyAttribute]
public string CloudHsmClusterId { get; public set; }
    [AWSPropertyAttribute]
public string CustomKeyStoreName { get; public set; }
    public CustomKeyStoreType CustomKeyStoreType { get; public set; }
    [AWSPropertyAttribute]
public string KeyStorePassword { get; public set; }
    [AWSPropertyAttribute]
public string TrustAnchorCertificate { get; public set; }
    public XksProxyAuthenticationCredentialType XksProxyAuthenticationCredential { get; public set; }
    public XksProxyConnectivityType XksProxyConnectivity { get; public set; }
    [AWSPropertyAttribute]
public string XksProxyUriEndpoint { get; public set; }
    [AWSPropertyAttribute]
public string XksProxyUriPath { get; public set; }
    [AWSPropertyAttribute]
public string XksProxyVpcEndpointServiceName { get; public set; }
    public string get_CloudHsmClusterId();
    public void set_CloudHsmClusterId(string value);
    internal bool IsSetCloudHsmClusterId();
    public string get_CustomKeyStoreName();
    public void set_CustomKeyStoreName(string value);
    internal bool IsSetCustomKeyStoreName();
    public CustomKeyStoreType get_CustomKeyStoreType();
    public void set_CustomKeyStoreType(CustomKeyStoreType value);
    internal bool IsSetCustomKeyStoreType();
    public string get_KeyStorePassword();
    public void set_KeyStorePassword(string value);
    internal bool IsSetKeyStorePassword();
    public string get_TrustAnchorCertificate();
    public void set_TrustAnchorCertificate(string value);
    internal bool IsSetTrustAnchorCertificate();
    public XksProxyAuthenticationCredentialType get_XksProxyAuthenticationCredential();
    public void set_XksProxyAuthenticationCredential(XksProxyAuthenticationCredentialType value);
    internal bool IsSetXksProxyAuthenticationCredential();
    public XksProxyConnectivityType get_XksProxyConnectivity();
    public void set_XksProxyConnectivity(XksProxyConnectivityType value);
    internal bool IsSetXksProxyConnectivity();
    public string get_XksProxyUriEndpoint();
    public void set_XksProxyUriEndpoint(string value);
    internal bool IsSetXksProxyUriEndpoint();
    public string get_XksProxyUriPath();
    public void set_XksProxyUriPath(string value);
    internal bool IsSetXksProxyUriPath();
    public string get_XksProxyVpcEndpointServiceName();
    public void set_XksProxyVpcEndpointServiceName(string value);
    internal bool IsSetXksProxyVpcEndpointServiceName();
}
public class Amazon.KeyManagementService.Model.CreateCustomKeyStoreResponse : AmazonWebServiceResponse {
    private string _customKeyStoreId;
    [AWSPropertyAttribute]
public string CustomKeyStoreId { get; public set; }
    public string get_CustomKeyStoreId();
    public void set_CustomKeyStoreId(string value);
    internal bool IsSetCustomKeyStoreId();
}
public class Amazon.KeyManagementService.Model.CreateGrantRequest : AmazonKeyManagementServiceRequest {
    private GrantConstraints _constraints;
    private Nullable`1<bool> _dryRun;
    private string _granteePrincipal;
    private List`1<string> _grantTokens;
    private string _keyId;
    private string _name;
    private List`1<string> _operations;
    private string _retiringPrincipal;
    public GrantConstraints Constraints { get; public set; }
    public Nullable`1<bool> DryRun { get; public set; }
    [AWSPropertyAttribute]
public string GranteePrincipal { get; public set; }
    [AWSPropertyAttribute]
public List`1<string> GrantTokens { get; public set; }
    [AWSPropertyAttribute]
public string KeyId { get; public set; }
    [AWSPropertyAttribute]
public string Name { get; public set; }
    [AWSPropertyAttribute]
public List`1<string> Operations { get; public set; }
    [AWSPropertyAttribute]
public string RetiringPrincipal { get; public set; }
    public GrantConstraints get_Constraints();
    public void set_Constraints(GrantConstraints value);
    internal bool IsSetConstraints();
    public Nullable`1<bool> get_DryRun();
    public void set_DryRun(Nullable`1<bool> value);
    internal bool IsSetDryRun();
    public string get_GranteePrincipal();
    public void set_GranteePrincipal(string value);
    internal bool IsSetGranteePrincipal();
    public List`1<string> get_GrantTokens();
    public void set_GrantTokens(List`1<string> value);
    internal bool IsSetGrantTokens();
    public string get_KeyId();
    public void set_KeyId(string value);
    internal bool IsSetKeyId();
    public string get_Name();
    public void set_Name(string value);
    internal bool IsSetName();
    public List`1<string> get_Operations();
    public void set_Operations(List`1<string> value);
    internal bool IsSetOperations();
    public string get_RetiringPrincipal();
    public void set_RetiringPrincipal(string value);
    internal bool IsSetRetiringPrincipal();
}
public class Amazon.KeyManagementService.Model.CreateGrantResponse : AmazonWebServiceResponse {
    private string _grantId;
    private string _grantToken;
    [AWSPropertyAttribute]
public string GrantId { get; public set; }
    [AWSPropertyAttribute]
public string GrantToken { get; public set; }
    public string get_GrantId();
    public void set_GrantId(string value);
    internal bool IsSetGrantId();
    public string get_GrantToken();
    public void set_GrantToken(string value);
    internal bool IsSetGrantToken();
}
public class Amazon.KeyManagementService.Model.CreateKeyRequest : AmazonKeyManagementServiceRequest {
    private Nullable`1<bool> _bypassPolicyLockoutSafetyCheck;
    private CustomerMasterKeySpec _customerMasterKeySpec;
    private string _customKeyStoreId;
    private string _description;
    private KeySpec _keySpec;
    private KeyUsageType _keyUsage;
    private Nullable`1<bool> _multiRegion;
    private OriginType _origin;
    private string _policy;
    private List`1<Tag> _tags;
    private string _xksKeyId;
    public Nullable`1<bool> BypassPolicyLockoutSafetyCheck { get; public set; }
    [ObsoleteAttribute("This parameter has been deprecated. Instead, use the KeySpec parameter.")]
public CustomerMasterKeySpec CustomerMasterKeySpec { get; public set; }
    [AWSPropertyAttribute]
public string CustomKeyStoreId { get; public set; }
    [AWSPropertyAttribute]
public string Description { get; public set; }
    public KeySpec KeySpec { get; public set; }
    public KeyUsageType KeyUsage { get; public set; }
    public Nullable`1<bool> MultiRegion { get; public set; }
    public OriginType Origin { get; public set; }
    [AWSPropertyAttribute]
public string Policy { get; public set; }
    public List`1<Tag> Tags { get; public set; }
    [AWSPropertyAttribute]
public string XksKeyId { get; public set; }
    public Nullable`1<bool> get_BypassPolicyLockoutSafetyCheck();
    public void set_BypassPolicyLockoutSafetyCheck(Nullable`1<bool> value);
    internal bool IsSetBypassPolicyLockoutSafetyCheck();
    public CustomerMasterKeySpec get_CustomerMasterKeySpec();
    public void set_CustomerMasterKeySpec(CustomerMasterKeySpec value);
    internal bool IsSetCustomerMasterKeySpec();
    public string get_CustomKeyStoreId();
    public void set_CustomKeyStoreId(string value);
    internal bool IsSetCustomKeyStoreId();
    public string get_Description();
    public void set_Description(string value);
    internal bool IsSetDescription();
    public KeySpec get_KeySpec();
    public void set_KeySpec(KeySpec value);
    internal bool IsSetKeySpec();
    public KeyUsageType get_KeyUsage();
    public void set_KeyUsage(KeyUsageType value);
    internal bool IsSetKeyUsage();
    public Nullable`1<bool> get_MultiRegion();
    public void set_MultiRegion(Nullable`1<bool> value);
    internal bool IsSetMultiRegion();
    public OriginType get_Origin();
    public void set_Origin(OriginType value);
    internal bool IsSetOrigin();
    public string get_Policy();
    public void set_Policy(string value);
    internal bool IsSetPolicy();
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
    public string get_XksKeyId();
    public void set_XksKeyId(string value);
    internal bool IsSetXksKeyId();
}
public class Amazon.KeyManagementService.Model.CreateKeyResponse : AmazonWebServiceResponse {
    private KeyMetadata _keyMetadata;
    public KeyMetadata KeyMetadata { get; public set; }
    public KeyMetadata get_KeyMetadata();
    public void set_KeyMetadata(KeyMetadata value);
    internal bool IsSetKeyMetadata();
}
public class Amazon.KeyManagementService.Model.CustomKeyStoreHasCMKsException : AmazonKeyManagementServiceException {
    public CustomKeyStoreHasCMKsException(string message);
    public CustomKeyStoreHasCMKsException(string message, Exception innerException);
    public CustomKeyStoreHasCMKsException(Exception innerException);
    public CustomKeyStoreHasCMKsException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public CustomKeyStoreHasCMKsException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.KeyManagementService.Model.CustomKeyStoreInvalidStateException : AmazonKeyManagementServiceException {
    public CustomKeyStoreInvalidStateException(string message);
    public CustomKeyStoreInvalidStateException(string message, Exception innerException);
    public CustomKeyStoreInvalidStateException(Exception innerException);
    public CustomKeyStoreInvalidStateException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public CustomKeyStoreInvalidStateException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.KeyManagementService.Model.CustomKeyStoreNameInUseException : AmazonKeyManagementServiceException {
    public CustomKeyStoreNameInUseException(string message);
    public CustomKeyStoreNameInUseException(string message, Exception innerException);
    public CustomKeyStoreNameInUseException(Exception innerException);
    public CustomKeyStoreNameInUseException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public CustomKeyStoreNameInUseException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.KeyManagementService.Model.CustomKeyStoreNotFoundException : AmazonKeyManagementServiceException {
    public CustomKeyStoreNotFoundException(string message);
    public CustomKeyStoreNotFoundException(string message, Exception innerException);
    public CustomKeyStoreNotFoundException(Exception innerException);
    public CustomKeyStoreNotFoundException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public CustomKeyStoreNotFoundException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.KeyManagementService.Model.CustomKeyStoresListEntry : object {
    private string _cloudHsmClusterId;
    private ConnectionErrorCodeType _connectionErrorCode;
    private ConnectionStateType _connectionState;
    private Nullable`1<DateTime> _creationDate;
    private string _customKeyStoreId;
    private string _customKeyStoreName;
    private CustomKeyStoreType _customKeyStoreType;
    private string _trustAnchorCertificate;
    private XksProxyConfigurationType _xksProxyConfiguration;
    [AWSPropertyAttribute]
public string CloudHsmClusterId { get; public set; }
    public ConnectionErrorCodeType ConnectionErrorCode { get; public set; }
    public ConnectionStateType ConnectionState { get; public set; }
    public Nullable`1<DateTime> CreationDate { get; public set; }
    [AWSPropertyAttribute]
public string CustomKeyStoreId { get; public set; }
    [AWSPropertyAttribute]
public string CustomKeyStoreName { get; public set; }
    public CustomKeyStoreType CustomKeyStoreType { get; public set; }
    [AWSPropertyAttribute]
public string TrustAnchorCertificate { get; public set; }
    public XksProxyConfigurationType XksProxyConfiguration { get; public set; }
    public string get_CloudHsmClusterId();
    public void set_CloudHsmClusterId(string value);
    internal bool IsSetCloudHsmClusterId();
    public ConnectionErrorCodeType get_ConnectionErrorCode();
    public void set_ConnectionErrorCode(ConnectionErrorCodeType value);
    internal bool IsSetConnectionErrorCode();
    public ConnectionStateType get_ConnectionState();
    public void set_ConnectionState(ConnectionStateType value);
    internal bool IsSetConnectionState();
    public Nullable`1<DateTime> get_CreationDate();
    public void set_CreationDate(Nullable`1<DateTime> value);
    internal bool IsSetCreationDate();
    public string get_CustomKeyStoreId();
    public void set_CustomKeyStoreId(string value);
    internal bool IsSetCustomKeyStoreId();
    public string get_CustomKeyStoreName();
    public void set_CustomKeyStoreName(string value);
    internal bool IsSetCustomKeyStoreName();
    public CustomKeyStoreType get_CustomKeyStoreType();
    public void set_CustomKeyStoreType(CustomKeyStoreType value);
    internal bool IsSetCustomKeyStoreType();
    public string get_TrustAnchorCertificate();
    public void set_TrustAnchorCertificate(string value);
    internal bool IsSetTrustAnchorCertificate();
    public XksProxyConfigurationType get_XksProxyConfiguration();
    public void set_XksProxyConfiguration(XksProxyConfigurationType value);
    internal bool IsSetXksProxyConfiguration();
}
public class Amazon.KeyManagementService.Model.DecryptRequest : AmazonKeyManagementServiceRequest {
    private MemoryStream _ciphertextBlob;
    private Nullable`1<bool> _dryRun;
    private EncryptionAlgorithmSpec _encryptionAlgorithm;
    private Dictionary`2<string, string> _encryptionContext;
    private List`1<string> _grantTokens;
    private string _keyId;
    private RecipientInfo _recipient;
    [AWSPropertyAttribute]
public MemoryStream CiphertextBlob { get; public set; }
    public Nullable`1<bool> DryRun { get; public set; }
    public EncryptionAlgorithmSpec EncryptionAlgorithm { get; public set; }
    public Dictionary`2<string, string> EncryptionContext { get; public set; }
    [AWSPropertyAttribute]
public List`1<string> GrantTokens { get; public set; }
    [AWSPropertyAttribute]
public string KeyId { get; public set; }
    public RecipientInfo Recipient { get; public set; }
    public MemoryStream get_CiphertextBlob();
    public void set_CiphertextBlob(MemoryStream value);
    internal bool IsSetCiphertextBlob();
    public Nullable`1<bool> get_DryRun();
    public void set_DryRun(Nullable`1<bool> value);
    internal bool IsSetDryRun();
    public EncryptionAlgorithmSpec get_EncryptionAlgorithm();
    public void set_EncryptionAlgorithm(EncryptionAlgorithmSpec value);
    internal bool IsSetEncryptionAlgorithm();
    public Dictionary`2<string, string> get_EncryptionContext();
    public void set_EncryptionContext(Dictionary`2<string, string> value);
    internal bool IsSetEncryptionContext();
    public List`1<string> get_GrantTokens();
    public void set_GrantTokens(List`1<string> value);
    internal bool IsSetGrantTokens();
    public string get_KeyId();
    public void set_KeyId(string value);
    internal bool IsSetKeyId();
    public RecipientInfo get_Recipient();
    public void set_Recipient(RecipientInfo value);
    internal bool IsSetRecipient();
}
public class Amazon.KeyManagementService.Model.DecryptResponse : AmazonWebServiceResponse {
    private MemoryStream _ciphertextForRecipient;
    private EncryptionAlgorithmSpec _encryptionAlgorithm;
    private string _keyId;
    private MemoryStream _plaintext;
    [AWSPropertyAttribute]
public MemoryStream CiphertextForRecipient { get; public set; }
    public EncryptionAlgorithmSpec EncryptionAlgorithm { get; public set; }
    [AWSPropertyAttribute]
public string KeyId { get; public set; }
    [AWSPropertyAttribute]
public MemoryStream Plaintext { get; public set; }
    public MemoryStream get_CiphertextForRecipient();
    public void set_CiphertextForRecipient(MemoryStream value);
    internal bool IsSetCiphertextForRecipient();
    public EncryptionAlgorithmSpec get_EncryptionAlgorithm();
    public void set_EncryptionAlgorithm(EncryptionAlgorithmSpec value);
    internal bool IsSetEncryptionAlgorithm();
    public string get_KeyId();
    public void set_KeyId(string value);
    internal bool IsSetKeyId();
    public MemoryStream get_Plaintext();
    public void set_Plaintext(MemoryStream value);
    internal bool IsSetPlaintext();
}
public class Amazon.KeyManagementService.Model.DeleteAliasRequest : AmazonKeyManagementServiceRequest {
    private string _aliasName;
    [AWSPropertyAttribute]
public string AliasName { get; public set; }
    public string get_AliasName();
    public void set_AliasName(string value);
    internal bool IsSetAliasName();
}
public class Amazon.KeyManagementService.Model.DeleteAliasResponse : AmazonWebServiceResponse {
}
public class Amazon.KeyManagementService.Model.DeleteCustomKeyStoreRequest : AmazonKeyManagementServiceRequest {
    private string _customKeyStoreId;
    [AWSPropertyAttribute]
public string CustomKeyStoreId { get; public set; }
    public string get_CustomKeyStoreId();
    public void set_CustomKeyStoreId(string value);
    internal bool IsSetCustomKeyStoreId();
}
public class Amazon.KeyManagementService.Model.DeleteCustomKeyStoreResponse : AmazonWebServiceResponse {
}
public class Amazon.KeyManagementService.Model.DeleteImportedKeyMaterialRequest : AmazonKeyManagementServiceRequest {
    private string _keyId;
    [AWSPropertyAttribute]
public string KeyId { get; public set; }
    public string get_KeyId();
    public void set_KeyId(string value);
    internal bool IsSetKeyId();
}
public class Amazon.KeyManagementService.Model.DeleteImportedKeyMaterialResponse : AmazonWebServiceResponse {
}
public class Amazon.KeyManagementService.Model.DependencyTimeoutException : AmazonKeyManagementServiceException {
    public DependencyTimeoutException(string message);
    public DependencyTimeoutException(string message, Exception innerException);
    public DependencyTimeoutException(Exception innerException);
    public DependencyTimeoutException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public DependencyTimeoutException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.KeyManagementService.Model.DeriveSharedSecretRequest : AmazonKeyManagementServiceRequest {
    private Nullable`1<bool> _dryRun;
    private List`1<string> _grantTokens;
    private KeyAgreementAlgorithmSpec _keyAgreementAlgorithm;
    private string _keyId;
    private MemoryStream _publicKey;
    private RecipientInfo _recipient;
    public Nullable`1<bool> DryRun { get; public set; }
    [AWSPropertyAttribute]
public List`1<string> GrantTokens { get; public set; }
    [AWSPropertyAttribute]
public KeyAgreementAlgorithmSpec KeyAgreementAlgorithm { get; public set; }
    [AWSPropertyAttribute]
public string KeyId { get; public set; }
    [AWSPropertyAttribute]
public MemoryStream PublicKey { get; public set; }
    public RecipientInfo Recipient { get; public set; }
    public Nullable`1<bool> get_DryRun();
    public void set_DryRun(Nullable`1<bool> value);
    internal bool IsSetDryRun();
    public List`1<string> get_GrantTokens();
    public void set_GrantTokens(List`1<string> value);
    internal bool IsSetGrantTokens();
    public KeyAgreementAlgorithmSpec get_KeyAgreementAlgorithm();
    public void set_KeyAgreementAlgorithm(KeyAgreementAlgorithmSpec value);
    internal bool IsSetKeyAgreementAlgorithm();
    public string get_KeyId();
    public void set_KeyId(string value);
    internal bool IsSetKeyId();
    public MemoryStream get_PublicKey();
    public void set_PublicKey(MemoryStream value);
    internal bool IsSetPublicKey();
    public RecipientInfo get_Recipient();
    public void set_Recipient(RecipientInfo value);
    internal bool IsSetRecipient();
}
public class Amazon.KeyManagementService.Model.DeriveSharedSecretResponse : AmazonWebServiceResponse {
    private MemoryStream _ciphertextForRecipient;
    private KeyAgreementAlgorithmSpec _keyAgreementAlgorithm;
    private string _keyId;
    private OriginType _keyOrigin;
    private MemoryStream _sharedSecret;
    [AWSPropertyAttribute]
public MemoryStream CiphertextForRecipient { get; public set; }
    public KeyAgreementAlgorithmSpec KeyAgreementAlgorithm { get; public set; }
    [AWSPropertyAttribute]
public string KeyId { get; public set; }
    public OriginType KeyOrigin { get; public set; }
    [AWSPropertyAttribute]
public MemoryStream SharedSecret { get; public set; }
    public MemoryStream get_CiphertextForRecipient();
    public void set_CiphertextForRecipient(MemoryStream value);
    internal bool IsSetCiphertextForRecipient();
    public KeyAgreementAlgorithmSpec get_KeyAgreementAlgorithm();
    public void set_KeyAgreementAlgorithm(KeyAgreementAlgorithmSpec value);
    internal bool IsSetKeyAgreementAlgorithm();
    public string get_KeyId();
    public void set_KeyId(string value);
    internal bool IsSetKeyId();
    public OriginType get_KeyOrigin();
    public void set_KeyOrigin(OriginType value);
    internal bool IsSetKeyOrigin();
    public MemoryStream get_SharedSecret();
    public void set_SharedSecret(MemoryStream value);
    internal bool IsSetSharedSecret();
}
internal class Amazon.KeyManagementService.Model.DescribeCustomKeyStoresPaginator : object {
    private IAmazonKeyManagementService _client;
    private DescribeCustomKeyStoresRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<DescribeCustomKeyStoresResponse> Responses { get; }
    public IPaginatedEnumerable`1<CustomKeyStoresListEntry> CustomKeyStores { get; }
    internal DescribeCustomKeyStoresPaginator(IAmazonKeyManagementService client, DescribeCustomKeyStoresRequest request);
    public sealed virtual IPaginatedEnumerable`1<DescribeCustomKeyStoresResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<CustomKeyStoresListEntry> get_CustomKeyStores();
    [AsyncIteratorStateMachineAttribute("Amazon.KeyManagementService.Model.DescribeCustomKeyStoresPaginator/<Amazon-Runtime-IPaginator<Amazon-KeyManagementService-Model-DescribeCustomKeyStoresResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<DescribeCustomKeyStoresResponse> Amazon.Runtime.IPaginator<Amazon.KeyManagementService.Model.DescribeCustomKeyStoresResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.KeyManagementService.Model.DescribeCustomKeyStoresRequest : AmazonKeyManagementServiceRequest {
    private string _customKeyStoreId;
    private string _customKeyStoreName;
    private Nullable`1<int> _limit;
    private string _marker;
    [AWSPropertyAttribute]
public string CustomKeyStoreId { get; public set; }
    [AWSPropertyAttribute]
public string CustomKeyStoreName { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> Limit { get; public set; }
    [AWSPropertyAttribute]
public string Marker { get; public set; }
    public string get_CustomKeyStoreId();
    public void set_CustomKeyStoreId(string value);
    internal bool IsSetCustomKeyStoreId();
    public string get_CustomKeyStoreName();
    public void set_CustomKeyStoreName(string value);
    internal bool IsSetCustomKeyStoreName();
    public Nullable`1<int> get_Limit();
    public void set_Limit(Nullable`1<int> value);
    internal bool IsSetLimit();
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
}
public class Amazon.KeyManagementService.Model.DescribeCustomKeyStoresResponse : AmazonWebServiceResponse {
    private List`1<CustomKeyStoresListEntry> _customKeyStores;
    private string _nextMarker;
    private Nullable`1<bool> _truncated;
    public List`1<CustomKeyStoresListEntry> CustomKeyStores { get; public set; }
    [AWSPropertyAttribute]
public string NextMarker { get; public set; }
    public Nullable`1<bool> Truncated { get; public set; }
    public List`1<CustomKeyStoresListEntry> get_CustomKeyStores();
    public void set_CustomKeyStores(List`1<CustomKeyStoresListEntry> value);
    internal bool IsSetCustomKeyStores();
    public string get_NextMarker();
    public void set_NextMarker(string value);
    internal bool IsSetNextMarker();
    public Nullable`1<bool> get_Truncated();
    public void set_Truncated(Nullable`1<bool> value);
    internal bool IsSetTruncated();
}
public class Amazon.KeyManagementService.Model.DescribeKeyRequest : AmazonKeyManagementServiceRequest {
    private List`1<string> _grantTokens;
    private string _keyId;
    [AWSPropertyAttribute]
public List`1<string> GrantTokens { get; public set; }
    [AWSPropertyAttribute]
public string KeyId { get; public set; }
    public List`1<string> get_GrantTokens();
    public void set_GrantTokens(List`1<string> value);
    internal bool IsSetGrantTokens();
    public string get_KeyId();
    public void set_KeyId(string value);
    internal bool IsSetKeyId();
}
public class Amazon.KeyManagementService.Model.DescribeKeyResponse : AmazonWebServiceResponse {
    private KeyMetadata _keyMetadata;
    public KeyMetadata KeyMetadata { get; public set; }
    public KeyMetadata get_KeyMetadata();
    public void set_KeyMetadata(KeyMetadata value);
    internal bool IsSetKeyMetadata();
}
public class Amazon.KeyManagementService.Model.DisabledException : AmazonKeyManagementServiceException {
    public DisabledException(string message);
    public DisabledException(string message, Exception innerException);
    public DisabledException(Exception innerException);
    public DisabledException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public DisabledException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.KeyManagementService.Model.DisableKeyRequest : AmazonKeyManagementServiceRequest {
    private string _keyId;
    [AWSPropertyAttribute]
public string KeyId { get; public set; }
    public string get_KeyId();
    public void set_KeyId(string value);
    internal bool IsSetKeyId();
}
public class Amazon.KeyManagementService.Model.DisableKeyResponse : AmazonWebServiceResponse {
}
public class Amazon.KeyManagementService.Model.DisableKeyRotationRequest : AmazonKeyManagementServiceRequest {
    private string _keyId;
    [AWSPropertyAttribute]
public string KeyId { get; public set; }
    public string get_KeyId();
    public void set_KeyId(string value);
    internal bool IsSetKeyId();
}
public class Amazon.KeyManagementService.Model.DisableKeyRotationResponse : AmazonWebServiceResponse {
}
public class Amazon.KeyManagementService.Model.DisconnectCustomKeyStoreRequest : AmazonKeyManagementServiceRequest {
    private string _customKeyStoreId;
    [AWSPropertyAttribute]
public string CustomKeyStoreId { get; public set; }
    public string get_CustomKeyStoreId();
    public void set_CustomKeyStoreId(string value);
    internal bool IsSetCustomKeyStoreId();
}
public class Amazon.KeyManagementService.Model.DisconnectCustomKeyStoreResponse : AmazonWebServiceResponse {
}
public class Amazon.KeyManagementService.Model.DryRunOperationException : AmazonKeyManagementServiceException {
    public DryRunOperationException(string message);
    public DryRunOperationException(string message, Exception innerException);
    public DryRunOperationException(Exception innerException);
    public DryRunOperationException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public DryRunOperationException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.KeyManagementService.Model.EnableKeyRequest : AmazonKeyManagementServiceRequest {
    private string _keyId;
    [AWSPropertyAttribute]
public string KeyId { get; public set; }
    public string get_KeyId();
    public void set_KeyId(string value);
    internal bool IsSetKeyId();
}
public class Amazon.KeyManagementService.Model.EnableKeyResponse : AmazonWebServiceResponse {
}
public class Amazon.KeyManagementService.Model.EnableKeyRotationRequest : AmazonKeyManagementServiceRequest {
    private string _keyId;
    private Nullable`1<int> _rotationPeriodInDays;
    [AWSPropertyAttribute]
public string KeyId { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> RotationPeriodInDays { get; public set; }
    public string get_KeyId();
    public void set_KeyId(string value);
    internal bool IsSetKeyId();
    public Nullable`1<int> get_RotationPeriodInDays();
    public void set_RotationPeriodInDays(Nullable`1<int> value);
    internal bool IsSetRotationPeriodInDays();
}
public class Amazon.KeyManagementService.Model.EnableKeyRotationResponse : AmazonWebServiceResponse {
}
public class Amazon.KeyManagementService.Model.EncryptRequest : AmazonKeyManagementServiceRequest {
    private Nullable`1<bool> _dryRun;
    private EncryptionAlgorithmSpec _encryptionAlgorithm;
    private Dictionary`2<string, string> _encryptionContext;
    private List`1<string> _grantTokens;
    private string _keyId;
    private MemoryStream _plaintext;
    public Nullable`1<bool> DryRun { get; public set; }
    public EncryptionAlgorithmSpec EncryptionAlgorithm { get; public set; }
    public Dictionary`2<string, string> EncryptionContext { get; public set; }
    [AWSPropertyAttribute]
public List`1<string> GrantTokens { get; public set; }
    [AWSPropertyAttribute]
public string KeyId { get; public set; }
    [AWSPropertyAttribute]
public MemoryStream Plaintext { get; public set; }
    public Nullable`1<bool> get_DryRun();
    public void set_DryRun(Nullable`1<bool> value);
    internal bool IsSetDryRun();
    public EncryptionAlgorithmSpec get_EncryptionAlgorithm();
    public void set_EncryptionAlgorithm(EncryptionAlgorithmSpec value);
    internal bool IsSetEncryptionAlgorithm();
    public Dictionary`2<string, string> get_EncryptionContext();
    public void set_EncryptionContext(Dictionary`2<string, string> value);
    internal bool IsSetEncryptionContext();
    public List`1<string> get_GrantTokens();
    public void set_GrantTokens(List`1<string> value);
    internal bool IsSetGrantTokens();
    public string get_KeyId();
    public void set_KeyId(string value);
    internal bool IsSetKeyId();
    public MemoryStream get_Plaintext();
    public void set_Plaintext(MemoryStream value);
    internal bool IsSetPlaintext();
}
public class Amazon.KeyManagementService.Model.EncryptResponse : AmazonWebServiceResponse {
    private MemoryStream _ciphertextBlob;
    private EncryptionAlgorithmSpec _encryptionAlgorithm;
    private string _keyId;
    [AWSPropertyAttribute]
public MemoryStream CiphertextBlob { get; public set; }
    public EncryptionAlgorithmSpec EncryptionAlgorithm { get; public set; }
    [AWSPropertyAttribute]
public string KeyId { get; public set; }
    public MemoryStream get_CiphertextBlob();
    public void set_CiphertextBlob(MemoryStream value);
    internal bool IsSetCiphertextBlob();
    public EncryptionAlgorithmSpec get_EncryptionAlgorithm();
    public void set_EncryptionAlgorithm(EncryptionAlgorithmSpec value);
    internal bool IsSetEncryptionAlgorithm();
    public string get_KeyId();
    public void set_KeyId(string value);
    internal bool IsSetKeyId();
}
public class Amazon.KeyManagementService.Model.ExpiredImportTokenException : AmazonKeyManagementServiceException {
    public ExpiredImportTokenException(string message);
    public ExpiredImportTokenException(string message, Exception innerException);
    public ExpiredImportTokenException(Exception innerException);
    public ExpiredImportTokenException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public ExpiredImportTokenException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.KeyManagementService.Model.GenerateDataKeyPairRequest : AmazonKeyManagementServiceRequest {
    private Nullable`1<bool> _dryRun;
    private Dictionary`2<string, string> _encryptionContext;
    private List`1<string> _grantTokens;
    private string _keyId;
    private DataKeyPairSpec _keyPairSpec;
    private RecipientInfo _recipient;
    public Nullable`1<bool> DryRun { get; public set; }
    public Dictionary`2<string, string> EncryptionContext { get; public set; }
    [AWSPropertyAttribute]
public List`1<string> GrantTokens { get; public set; }
    [AWSPropertyAttribute]
public string KeyId { get; public set; }
    [AWSPropertyAttribute]
public DataKeyPairSpec KeyPairSpec { get; public set; }
    public RecipientInfo Recipient { get; public set; }
    public Nullable`1<bool> get_DryRun();
    public void set_DryRun(Nullable`1<bool> value);
    internal bool IsSetDryRun();
    public Dictionary`2<string, string> get_EncryptionContext();
    public void set_EncryptionContext(Dictionary`2<string, string> value);
    internal bool IsSetEncryptionContext();
    public List`1<string> get_GrantTokens();
    public void set_GrantTokens(List`1<string> value);
    internal bool IsSetGrantTokens();
    public string get_KeyId();
    public void set_KeyId(string value);
    internal bool IsSetKeyId();
    public DataKeyPairSpec get_KeyPairSpec();
    public void set_KeyPairSpec(DataKeyPairSpec value);
    internal bool IsSetKeyPairSpec();
    public RecipientInfo get_Recipient();
    public void set_Recipient(RecipientInfo value);
    internal bool IsSetRecipient();
}
public class Amazon.KeyManagementService.Model.GenerateDataKeyPairResponse : AmazonWebServiceResponse {
    private MemoryStream _ciphertextForRecipient;
    private string _keyId;
    private DataKeyPairSpec _keyPairSpec;
    private MemoryStream _privateKeyCiphertextBlob;
    private MemoryStream _privateKeyPlaintext;
    private MemoryStream _publicKey;
    [AWSPropertyAttribute]
public MemoryStream CiphertextForRecipient { get; public set; }
    [AWSPropertyAttribute]
public string KeyId { get; public set; }
    public DataKeyPairSpec KeyPairSpec { get; public set; }
    [AWSPropertyAttribute]
public MemoryStream PrivateKeyCiphertextBlob { get; public set; }
    [AWSPropertyAttribute]
public MemoryStream PrivateKeyPlaintext { get; public set; }
    [AWSPropertyAttribute]
public MemoryStream PublicKey { get; public set; }
    public MemoryStream get_CiphertextForRecipient();
    public void set_CiphertextForRecipient(MemoryStream value);
    internal bool IsSetCiphertextForRecipient();
    public string get_KeyId();
    public void set_KeyId(string value);
    internal bool IsSetKeyId();
    public DataKeyPairSpec get_KeyPairSpec();
    public void set_KeyPairSpec(DataKeyPairSpec value);
    internal bool IsSetKeyPairSpec();
    public MemoryStream get_PrivateKeyCiphertextBlob();
    public void set_PrivateKeyCiphertextBlob(MemoryStream value);
    internal bool IsSetPrivateKeyCiphertextBlob();
    public MemoryStream get_PrivateKeyPlaintext();
    public void set_PrivateKeyPlaintext(MemoryStream value);
    internal bool IsSetPrivateKeyPlaintext();
    public MemoryStream get_PublicKey();
    public void set_PublicKey(MemoryStream value);
    internal bool IsSetPublicKey();
}
public class Amazon.KeyManagementService.Model.GenerateDataKeyPairWithoutPlaintextRequest : AmazonKeyManagementServiceRequest {
    private Nullable`1<bool> _dryRun;
    private Dictionary`2<string, string> _encryptionContext;
    private List`1<string> _grantTokens;
    private string _keyId;
    private DataKeyPairSpec _keyPairSpec;
    public Nullable`1<bool> DryRun { get; public set; }
    public Dictionary`2<string, string> EncryptionContext { get; public set; }
    [AWSPropertyAttribute]
public List`1<string> GrantTokens { get; public set; }
    [AWSPropertyAttribute]
public string KeyId { get; public set; }
    [AWSPropertyAttribute]
public DataKeyPairSpec KeyPairSpec { get; public set; }
    public Nullable`1<bool> get_DryRun();
    public void set_DryRun(Nullable`1<bool> value);
    internal bool IsSetDryRun();
    public Dictionary`2<string, string> get_EncryptionContext();
    public void set_EncryptionContext(Dictionary`2<string, string> value);
    internal bool IsSetEncryptionContext();
    public List`1<string> get_GrantTokens();
    public void set_GrantTokens(List`1<string> value);
    internal bool IsSetGrantTokens();
    public string get_KeyId();
    public void set_KeyId(string value);
    internal bool IsSetKeyId();
    public DataKeyPairSpec get_KeyPairSpec();
    public void set_KeyPairSpec(DataKeyPairSpec value);
    internal bool IsSetKeyPairSpec();
}
public class Amazon.KeyManagementService.Model.GenerateDataKeyPairWithoutPlaintextResponse : AmazonWebServiceResponse {
    private string _keyId;
    private DataKeyPairSpec _keyPairSpec;
    private MemoryStream _privateKeyCiphertextBlob;
    private MemoryStream _publicKey;
    [AWSPropertyAttribute]
public string KeyId { get; public set; }
    public DataKeyPairSpec KeyPairSpec { get; public set; }
    [AWSPropertyAttribute]
public MemoryStream PrivateKeyCiphertextBlob { get; public set; }
    [AWSPropertyAttribute]
public MemoryStream PublicKey { get; public set; }
    public string get_KeyId();
    public void set_KeyId(string value);
    internal bool IsSetKeyId();
    public DataKeyPairSpec get_KeyPairSpec();
    public void set_KeyPairSpec(DataKeyPairSpec value);
    internal bool IsSetKeyPairSpec();
    public MemoryStream get_PrivateKeyCiphertextBlob();
    public void set_PrivateKeyCiphertextBlob(MemoryStream value);
    internal bool IsSetPrivateKeyCiphertextBlob();
    public MemoryStream get_PublicKey();
    public void set_PublicKey(MemoryStream value);
    internal bool IsSetPublicKey();
}
public class Amazon.KeyManagementService.Model.GenerateDataKeyRequest : AmazonKeyManagementServiceRequest {
    private Nullable`1<bool> _dryRun;
    private Dictionary`2<string, string> _encryptionContext;
    private List`1<string> _grantTokens;
    private string _keyId;
    private DataKeySpec _keySpec;
    private Nullable`1<int> _numberOfBytes;
    private RecipientInfo _recipient;
    public Nullable`1<bool> DryRun { get; public set; }
    public Dictionary`2<string, string> EncryptionContext { get; public set; }
    [AWSPropertyAttribute]
public List`1<string> GrantTokens { get; public set; }
    [AWSPropertyAttribute]
public string KeyId { get; public set; }
    public DataKeySpec KeySpec { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> NumberOfBytes { get; public set; }
    public RecipientInfo Recipient { get; public set; }
    public Nullable`1<bool> get_DryRun();
    public void set_DryRun(Nullable`1<bool> value);
    internal bool IsSetDryRun();
    public Dictionary`2<string, string> get_EncryptionContext();
    public void set_EncryptionContext(Dictionary`2<string, string> value);
    internal bool IsSetEncryptionContext();
    public List`1<string> get_GrantTokens();
    public void set_GrantTokens(List`1<string> value);
    internal bool IsSetGrantTokens();
    public string get_KeyId();
    public void set_KeyId(string value);
    internal bool IsSetKeyId();
    public DataKeySpec get_KeySpec();
    public void set_KeySpec(DataKeySpec value);
    internal bool IsSetKeySpec();
    public Nullable`1<int> get_NumberOfBytes();
    public void set_NumberOfBytes(Nullable`1<int> value);
    internal bool IsSetNumberOfBytes();
    public RecipientInfo get_Recipient();
    public void set_Recipient(RecipientInfo value);
    internal bool IsSetRecipient();
}
public class Amazon.KeyManagementService.Model.GenerateDataKeyResponse : AmazonWebServiceResponse {
    private MemoryStream _ciphertextBlob;
    private MemoryStream _ciphertextForRecipient;
    private string _keyId;
    private MemoryStream _plaintext;
    [AWSPropertyAttribute]
public MemoryStream CiphertextBlob { get; public set; }
    [AWSPropertyAttribute]
public MemoryStream CiphertextForRecipient { get; public set; }
    [AWSPropertyAttribute]
public string KeyId { get; public set; }
    [AWSPropertyAttribute]
public MemoryStream Plaintext { get; public set; }
    public MemoryStream get_CiphertextBlob();
    public void set_CiphertextBlob(MemoryStream value);
    internal bool IsSetCiphertextBlob();
    public MemoryStream get_CiphertextForRecipient();
    public void set_CiphertextForRecipient(MemoryStream value);
    internal bool IsSetCiphertextForRecipient();
    public string get_KeyId();
    public void set_KeyId(string value);
    internal bool IsSetKeyId();
    public MemoryStream get_Plaintext();
    public void set_Plaintext(MemoryStream value);
    internal bool IsSetPlaintext();
}
public class Amazon.KeyManagementService.Model.GenerateDataKeyWithoutPlaintextRequest : AmazonKeyManagementServiceRequest {
    private Nullable`1<bool> _dryRun;
    private Dictionary`2<string, string> _encryptionContext;
    private List`1<string> _grantTokens;
    private string _keyId;
    private DataKeySpec _keySpec;
    private Nullable`1<int> _numberOfBytes;
    public Nullable`1<bool> DryRun { get; public set; }
    public Dictionary`2<string, string> EncryptionContext { get; public set; }
    [AWSPropertyAttribute]
public List`1<string> GrantTokens { get; public set; }
    [AWSPropertyAttribute]
public string KeyId { get; public set; }
    public DataKeySpec KeySpec { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> NumberOfBytes { get; public set; }
    public Nullable`1<bool> get_DryRun();
    public void set_DryRun(Nullable`1<bool> value);
    internal bool IsSetDryRun();
    public Dictionary`2<string, string> get_EncryptionContext();
    public void set_EncryptionContext(Dictionary`2<string, string> value);
    internal bool IsSetEncryptionContext();
    public List`1<string> get_GrantTokens();
    public void set_GrantTokens(List`1<string> value);
    internal bool IsSetGrantTokens();
    public string get_KeyId();
    public void set_KeyId(string value);
    internal bool IsSetKeyId();
    public DataKeySpec get_KeySpec();
    public void set_KeySpec(DataKeySpec value);
    internal bool IsSetKeySpec();
    public Nullable`1<int> get_NumberOfBytes();
    public void set_NumberOfBytes(Nullable`1<int> value);
    internal bool IsSetNumberOfBytes();
}
public class Amazon.KeyManagementService.Model.GenerateDataKeyWithoutPlaintextResponse : AmazonWebServiceResponse {
    private MemoryStream _ciphertextBlob;
    private string _keyId;
    [AWSPropertyAttribute]
public MemoryStream CiphertextBlob { get; public set; }
    [AWSPropertyAttribute]
public string KeyId { get; public set; }
    public MemoryStream get_CiphertextBlob();
    public void set_CiphertextBlob(MemoryStream value);
    internal bool IsSetCiphertextBlob();
    public string get_KeyId();
    public void set_KeyId(string value);
    internal bool IsSetKeyId();
}
public class Amazon.KeyManagementService.Model.GenerateMacRequest : AmazonKeyManagementServiceRequest {
    private Nullable`1<bool> _dryRun;
    private List`1<string> _grantTokens;
    private string _keyId;
    private MacAlgorithmSpec _macAlgorithm;
    private MemoryStream _message;
    public Nullable`1<bool> DryRun { get; public set; }
    [AWSPropertyAttribute]
public List`1<string> GrantTokens { get; public set; }
    [AWSPropertyAttribute]
public string KeyId { get; public set; }
    [AWSPropertyAttribute]
public MacAlgorithmSpec MacAlgorithm { get; public set; }
    [AWSPropertyAttribute]
public MemoryStream Message { get; public set; }
    public Nullable`1<bool> get_DryRun();
    public void set_DryRun(Nullable`1<bool> value);
    internal bool IsSetDryRun();
    public List`1<string> get_GrantTokens();
    public void set_GrantTokens(List`1<string> value);
    internal bool IsSetGrantTokens();
    public string get_KeyId();
    public void set_KeyId(string value);
    internal bool IsSetKeyId();
    public MacAlgorithmSpec get_MacAlgorithm();
    public void set_MacAlgorithm(MacAlgorithmSpec value);
    internal bool IsSetMacAlgorithm();
    public MemoryStream get_Message();
    public void set_Message(MemoryStream value);
    internal bool IsSetMessage();
}
public class Amazon.KeyManagementService.Model.GenerateMacResponse : AmazonWebServiceResponse {
    private string _keyId;
    private MemoryStream _mac;
    private MacAlgorithmSpec _macAlgorithm;
    [AWSPropertyAttribute]
public string KeyId { get; public set; }
    [AWSPropertyAttribute]
public MemoryStream Mac { get; public set; }
    public MacAlgorithmSpec MacAlgorithm { get; public set; }
    public string get_KeyId();
    public void set_KeyId(string value);
    internal bool IsSetKeyId();
    public MemoryStream get_Mac();
    public void set_Mac(MemoryStream value);
    internal bool IsSetMac();
    public MacAlgorithmSpec get_MacAlgorithm();
    public void set_MacAlgorithm(MacAlgorithmSpec value);
    internal bool IsSetMacAlgorithm();
}
public class Amazon.KeyManagementService.Model.GenerateRandomRequest : AmazonKeyManagementServiceRequest {
    private string _customKeyStoreId;
    private Nullable`1<int> _numberOfBytes;
    private RecipientInfo _recipient;
    [AWSPropertyAttribute]
public string CustomKeyStoreId { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> NumberOfBytes { get; public set; }
    public RecipientInfo Recipient { get; public set; }
    public string get_CustomKeyStoreId();
    public void set_CustomKeyStoreId(string value);
    internal bool IsSetCustomKeyStoreId();
    public Nullable`1<int> get_NumberOfBytes();
    public void set_NumberOfBytes(Nullable`1<int> value);
    internal bool IsSetNumberOfBytes();
    public RecipientInfo get_Recipient();
    public void set_Recipient(RecipientInfo value);
    internal bool IsSetRecipient();
}
public class Amazon.KeyManagementService.Model.GenerateRandomResponse : AmazonWebServiceResponse {
    private MemoryStream _ciphertextForRecipient;
    private MemoryStream _plaintext;
    [AWSPropertyAttribute]
public MemoryStream CiphertextForRecipient { get; public set; }
    [AWSPropertyAttribute]
public MemoryStream Plaintext { get; public set; }
    public MemoryStream get_CiphertextForRecipient();
    public void set_CiphertextForRecipient(MemoryStream value);
    internal bool IsSetCiphertextForRecipient();
    public MemoryStream get_Plaintext();
    public void set_Plaintext(MemoryStream value);
    internal bool IsSetPlaintext();
}
public class Amazon.KeyManagementService.Model.GetKeyPolicyRequest : AmazonKeyManagementServiceRequest {
    private string _keyId;
    private string _policyName;
    [AWSPropertyAttribute]
public string KeyId { get; public set; }
    [AWSPropertyAttribute]
public string PolicyName { get; public set; }
    public string get_KeyId();
    public void set_KeyId(string value);
    internal bool IsSetKeyId();
    public string get_PolicyName();
    public void set_PolicyName(string value);
    internal bool IsSetPolicyName();
}
public class Amazon.KeyManagementService.Model.GetKeyPolicyResponse : AmazonWebServiceResponse {
    private string _policy;
    private string _policyName;
    [AWSPropertyAttribute]
public string Policy { get; public set; }
    [AWSPropertyAttribute]
public string PolicyName { get; public set; }
    public string get_Policy();
    public void set_Policy(string value);
    internal bool IsSetPolicy();
    public string get_PolicyName();
    public void set_PolicyName(string value);
    internal bool IsSetPolicyName();
}
public class Amazon.KeyManagementService.Model.GetKeyRotationStatusRequest : AmazonKeyManagementServiceRequest {
    private string _keyId;
    [AWSPropertyAttribute]
public string KeyId { get; public set; }
    public string get_KeyId();
    public void set_KeyId(string value);
    internal bool IsSetKeyId();
}
public class Amazon.KeyManagementService.Model.GetKeyRotationStatusResponse : AmazonWebServiceResponse {
    private string _keyId;
    private Nullable`1<bool> _keyRotationEnabled;
    private Nullable`1<DateTime> _nextRotationDate;
    private Nullable`1<DateTime> _onDemandRotationStartDate;
    private Nullable`1<int> _rotationPeriodInDays;
    [AWSPropertyAttribute]
public string KeyId { get; public set; }
    public Nullable`1<bool> KeyRotationEnabled { get; public set; }
    public Nullable`1<DateTime> NextRotationDate { get; public set; }
    public Nullable`1<DateTime> OnDemandRotationStartDate { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> RotationPeriodInDays { get; public set; }
    public string get_KeyId();
    public void set_KeyId(string value);
    internal bool IsSetKeyId();
    public Nullable`1<bool> get_KeyRotationEnabled();
    public void set_KeyRotationEnabled(Nullable`1<bool> value);
    internal bool IsSetKeyRotationEnabled();
    public Nullable`1<DateTime> get_NextRotationDate();
    public void set_NextRotationDate(Nullable`1<DateTime> value);
    internal bool IsSetNextRotationDate();
    public Nullable`1<DateTime> get_OnDemandRotationStartDate();
    public void set_OnDemandRotationStartDate(Nullable`1<DateTime> value);
    internal bool IsSetOnDemandRotationStartDate();
    public Nullable`1<int> get_RotationPeriodInDays();
    public void set_RotationPeriodInDays(Nullable`1<int> value);
    internal bool IsSetRotationPeriodInDays();
}
public class Amazon.KeyManagementService.Model.GetParametersForImportRequest : AmazonKeyManagementServiceRequest {
    private string _keyId;
    private AlgorithmSpec _wrappingAlgorithm;
    private WrappingKeySpec _wrappingKeySpec;
    [AWSPropertyAttribute]
public string KeyId { get; public set; }
    [AWSPropertyAttribute]
public AlgorithmSpec WrappingAlgorithm { get; public set; }
    [AWSPropertyAttribute]
public WrappingKeySpec WrappingKeySpec { get; public set; }
    public string get_KeyId();
    public void set_KeyId(string value);
    internal bool IsSetKeyId();
    public AlgorithmSpec get_WrappingAlgorithm();
    public void set_WrappingAlgorithm(AlgorithmSpec value);
    internal bool IsSetWrappingAlgorithm();
    public WrappingKeySpec get_WrappingKeySpec();
    public void set_WrappingKeySpec(WrappingKeySpec value);
    internal bool IsSetWrappingKeySpec();
}
public class Amazon.KeyManagementService.Model.GetParametersForImportResponse : AmazonWebServiceResponse {
    private MemoryStream _importToken;
    private string _keyId;
    private Nullable`1<DateTime> _parametersValidTo;
    private MemoryStream _publicKey;
    [AWSPropertyAttribute]
public MemoryStream ImportToken { get; public set; }
    [AWSPropertyAttribute]
public string KeyId { get; public set; }
    public Nullable`1<DateTime> ParametersValidTo { get; public set; }
    [AWSPropertyAttribute]
public MemoryStream PublicKey { get; public set; }
    public MemoryStream get_ImportToken();
    public void set_ImportToken(MemoryStream value);
    internal bool IsSetImportToken();
    public string get_KeyId();
    public void set_KeyId(string value);
    internal bool IsSetKeyId();
    public Nullable`1<DateTime> get_ParametersValidTo();
    public void set_ParametersValidTo(Nullable`1<DateTime> value);
    internal bool IsSetParametersValidTo();
    public MemoryStream get_PublicKey();
    public void set_PublicKey(MemoryStream value);
    internal bool IsSetPublicKey();
}
public class Amazon.KeyManagementService.Model.GetPublicKeyRequest : AmazonKeyManagementServiceRequest {
    private List`1<string> _grantTokens;
    private string _keyId;
    [AWSPropertyAttribute]
public List`1<string> GrantTokens { get; public set; }
    [AWSPropertyAttribute]
public string KeyId { get; public set; }
    public List`1<string> get_GrantTokens();
    public void set_GrantTokens(List`1<string> value);
    internal bool IsSetGrantTokens();
    public string get_KeyId();
    public void set_KeyId(string value);
    internal bool IsSetKeyId();
}
public class Amazon.KeyManagementService.Model.GetPublicKeyResponse : AmazonWebServiceResponse {
    private CustomerMasterKeySpec _customerMasterKeySpec;
    private List`1<string> _encryptionAlgorithms;
    private List`1<string> _keyAgreementAlgorithms;
    private string _keyId;
    private KeySpec _keySpec;
    private KeyUsageType _keyUsage;
    private MemoryStream _publicKey;
    private List`1<string> _signingAlgorithms;
    [ObsoleteAttribute("This field has been deprecated. Instead, use the KeySpec field.")]
public CustomerMasterKeySpec CustomerMasterKeySpec { get; public set; }
    public List`1<string> EncryptionAlgorithms { get; public set; }
    public List`1<string> KeyAgreementAlgorithms { get; public set; }
    [AWSPropertyAttribute]
public string KeyId { get; public set; }
    public KeySpec KeySpec { get; public set; }
    public KeyUsageType KeyUsage { get; public set; }
    [AWSPropertyAttribute]
public MemoryStream PublicKey { get; public set; }
    public List`1<string> SigningAlgorithms { get; public set; }
    public CustomerMasterKeySpec get_CustomerMasterKeySpec();
    public void set_CustomerMasterKeySpec(CustomerMasterKeySpec value);
    internal bool IsSetCustomerMasterKeySpec();
    public List`1<string> get_EncryptionAlgorithms();
    public void set_EncryptionAlgorithms(List`1<string> value);
    internal bool IsSetEncryptionAlgorithms();
    public List`1<string> get_KeyAgreementAlgorithms();
    public void set_KeyAgreementAlgorithms(List`1<string> value);
    internal bool IsSetKeyAgreementAlgorithms();
    public string get_KeyId();
    public void set_KeyId(string value);
    internal bool IsSetKeyId();
    public KeySpec get_KeySpec();
    public void set_KeySpec(KeySpec value);
    internal bool IsSetKeySpec();
    public KeyUsageType get_KeyUsage();
    public void set_KeyUsage(KeyUsageType value);
    internal bool IsSetKeyUsage();
    public MemoryStream get_PublicKey();
    public void set_PublicKey(MemoryStream value);
    internal bool IsSetPublicKey();
    public List`1<string> get_SigningAlgorithms();
    public void set_SigningAlgorithms(List`1<string> value);
    internal bool IsSetSigningAlgorithms();
}
public class Amazon.KeyManagementService.Model.GrantConstraints : object {
    private Dictionary`2<string, string> _encryptionContextEquals;
    private Dictionary`2<string, string> _encryptionContextSubset;
    public Dictionary`2<string, string> EncryptionContextEquals { get; public set; }
    public Dictionary`2<string, string> EncryptionContextSubset { get; public set; }
    public Dictionary`2<string, string> get_EncryptionContextEquals();
    public void set_EncryptionContextEquals(Dictionary`2<string, string> value);
    internal bool IsSetEncryptionContextEquals();
    public Dictionary`2<string, string> get_EncryptionContextSubset();
    public void set_EncryptionContextSubset(Dictionary`2<string, string> value);
    internal bool IsSetEncryptionContextSubset();
}
public class Amazon.KeyManagementService.Model.GrantListEntry : object {
    private GrantConstraints _constraints;
    private Nullable`1<DateTime> _creationDate;
    private string _granteePrincipal;
    private string _grantId;
    private string _issuingAccount;
    private string _keyId;
    private string _name;
    private List`1<string> _operations;
    private string _retiringPrincipal;
    public GrantConstraints Constraints { get; public set; }
    public Nullable`1<DateTime> CreationDate { get; public set; }
    [AWSPropertyAttribute]
public string GranteePrincipal { get; public set; }
    [AWSPropertyAttribute]
public string GrantId { get; public set; }
    [AWSPropertyAttribute]
public string IssuingAccount { get; public set; }
    [AWSPropertyAttribute]
public string KeyId { get; public set; }
    [AWSPropertyAttribute]
public string Name { get; public set; }
    public List`1<string> Operations { get; public set; }
    [AWSPropertyAttribute]
public string RetiringPrincipal { get; public set; }
    public GrantConstraints get_Constraints();
    public void set_Constraints(GrantConstraints value);
    internal bool IsSetConstraints();
    public Nullable`1<DateTime> get_CreationDate();
    public void set_CreationDate(Nullable`1<DateTime> value);
    internal bool IsSetCreationDate();
    public string get_GranteePrincipal();
    public void set_GranteePrincipal(string value);
    internal bool IsSetGranteePrincipal();
    public string get_GrantId();
    public void set_GrantId(string value);
    internal bool IsSetGrantId();
    public string get_IssuingAccount();
    public void set_IssuingAccount(string value);
    internal bool IsSetIssuingAccount();
    public string get_KeyId();
    public void set_KeyId(string value);
    internal bool IsSetKeyId();
    public string get_Name();
    public void set_Name(string value);
    internal bool IsSetName();
    public List`1<string> get_Operations();
    public void set_Operations(List`1<string> value);
    internal bool IsSetOperations();
    public string get_RetiringPrincipal();
    public void set_RetiringPrincipal(string value);
    internal bool IsSetRetiringPrincipal();
}
public interface Amazon.KeyManagementService.Model.IDescribeCustomKeyStoresPaginator {
    public IPaginatedEnumerable`1<DescribeCustomKeyStoresResponse> Responses { get; }
    public IPaginatedEnumerable`1<CustomKeyStoresListEntry> CustomKeyStores { get; }
    public abstract virtual IPaginatedEnumerable`1<DescribeCustomKeyStoresResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<CustomKeyStoresListEntry> get_CustomKeyStores();
}
public interface Amazon.KeyManagementService.Model.IKeyManagementServicePaginatorFactory {
    public abstract virtual IDescribeCustomKeyStoresPaginator DescribeCustomKeyStores(DescribeCustomKeyStoresRequest request);
    public abstract virtual IListAliasesPaginator ListAliases(ListAliasesRequest request);
    public abstract virtual IListGrantsPaginator ListGrants(ListGrantsRequest request);
    public abstract virtual IListKeyPoliciesPaginator ListKeyPolicies(ListKeyPoliciesRequest request);
    public abstract virtual IListKeyRotationsPaginator ListKeyRotations(ListKeyRotationsRequest request);
    public abstract virtual IListKeysPaginator ListKeys(ListKeysRequest request);
    public abstract virtual IListResourceTagsPaginator ListResourceTags(ListResourceTagsRequest request);
    public abstract virtual IListRetirableGrantsPaginator ListRetirableGrants(ListRetirableGrantsRequest request);
}
public interface Amazon.KeyManagementService.Model.IListAliasesPaginator {
    public IPaginatedEnumerable`1<ListAliasesResponse> Responses { get; }
    public IPaginatedEnumerable`1<AliasListEntry> Aliases { get; }
    public abstract virtual IPaginatedEnumerable`1<ListAliasesResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<AliasListEntry> get_Aliases();
}
public interface Amazon.KeyManagementService.Model.IListGrantsPaginator {
    public IPaginatedEnumerable`1<ListGrantsResponse> Responses { get; }
    public IPaginatedEnumerable`1<GrantListEntry> Grants { get; }
    public abstract virtual IPaginatedEnumerable`1<ListGrantsResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<GrantListEntry> get_Grants();
}
public interface Amazon.KeyManagementService.Model.IListKeyPoliciesPaginator {
    public IPaginatedEnumerable`1<ListKeyPoliciesResponse> Responses { get; }
    public IPaginatedEnumerable`1<string> PolicyNames { get; }
    public abstract virtual IPaginatedEnumerable`1<ListKeyPoliciesResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<string> get_PolicyNames();
}
public interface Amazon.KeyManagementService.Model.IListKeyRotationsPaginator {
    public IPaginatedEnumerable`1<ListKeyRotationsResponse> Responses { get; }
    public IPaginatedEnumerable`1<RotationsListEntry> Rotations { get; }
    public abstract virtual IPaginatedEnumerable`1<ListKeyRotationsResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<RotationsListEntry> get_Rotations();
}
public interface Amazon.KeyManagementService.Model.IListKeysPaginator {
    public IPaginatedEnumerable`1<ListKeysResponse> Responses { get; }
    public IPaginatedEnumerable`1<KeyListEntry> Keys { get; }
    public abstract virtual IPaginatedEnumerable`1<ListKeysResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<KeyListEntry> get_Keys();
}
public interface Amazon.KeyManagementService.Model.IListResourceTagsPaginator {
    public IPaginatedEnumerable`1<ListResourceTagsResponse> Responses { get; }
    public IPaginatedEnumerable`1<Tag> Tags { get; }
    public abstract virtual IPaginatedEnumerable`1<ListResourceTagsResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<Tag> get_Tags();
}
public interface Amazon.KeyManagementService.Model.IListRetirableGrantsPaginator {
    public IPaginatedEnumerable`1<ListRetirableGrantsResponse> Responses { get; }
    public IPaginatedEnumerable`1<GrantListEntry> Grants { get; }
    public abstract virtual IPaginatedEnumerable`1<ListRetirableGrantsResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<GrantListEntry> get_Grants();
}
public class Amazon.KeyManagementService.Model.ImportKeyMaterialRequest : AmazonKeyManagementServiceRequest {
    private MemoryStream _encryptedKeyMaterial;
    private ExpirationModelType _expirationModel;
    private MemoryStream _importToken;
    private string _keyId;
    private Nullable`1<DateTime> _validTo;
    [AWSPropertyAttribute]
public MemoryStream EncryptedKeyMaterial { get; public set; }
    public ExpirationModelType ExpirationModel { get; public set; }
    [AWSPropertyAttribute]
public MemoryStream ImportToken { get; public set; }
    [AWSPropertyAttribute]
public string KeyId { get; public set; }
    public Nullable`1<DateTime> ValidTo { get; public set; }
    public MemoryStream get_EncryptedKeyMaterial();
    public void set_EncryptedKeyMaterial(MemoryStream value);
    internal bool IsSetEncryptedKeyMaterial();
    public ExpirationModelType get_ExpirationModel();
    public void set_ExpirationModel(ExpirationModelType value);
    internal bool IsSetExpirationModel();
    public MemoryStream get_ImportToken();
    public void set_ImportToken(MemoryStream value);
    internal bool IsSetImportToken();
    public string get_KeyId();
    public void set_KeyId(string value);
    internal bool IsSetKeyId();
    public Nullable`1<DateTime> get_ValidTo();
    public void set_ValidTo(Nullable`1<DateTime> value);
    internal bool IsSetValidTo();
}
public class Amazon.KeyManagementService.Model.ImportKeyMaterialResponse : AmazonWebServiceResponse {
}
public class Amazon.KeyManagementService.Model.IncorrectKeyException : AmazonKeyManagementServiceException {
    public IncorrectKeyException(string message);
    public IncorrectKeyException(string message, Exception innerException);
    public IncorrectKeyException(Exception innerException);
    public IncorrectKeyException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public IncorrectKeyException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.KeyManagementService.Model.IncorrectKeyMaterialException : AmazonKeyManagementServiceException {
    public IncorrectKeyMaterialException(string message);
    public IncorrectKeyMaterialException(string message, Exception innerException);
    public IncorrectKeyMaterialException(Exception innerException);
    public IncorrectKeyMaterialException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public IncorrectKeyMaterialException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.KeyManagementService.Model.IncorrectTrustAnchorException : AmazonKeyManagementServiceException {
    public IncorrectTrustAnchorException(string message);
    public IncorrectTrustAnchorException(string message, Exception innerException);
    public IncorrectTrustAnchorException(Exception innerException);
    public IncorrectTrustAnchorException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public IncorrectTrustAnchorException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.AliasListEntryUnmarshaller : object {
    private static AliasListEntryUnmarshaller _instance;
    public static AliasListEntryUnmarshaller Instance { get; }
    private static AliasListEntryUnmarshaller();
    private sealed virtual override AliasListEntry Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.KeyManagementService.Model.AliasListEntry,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual AliasListEntry Unmarshall(JsonUnmarshallerContext context);
    public static AliasListEntryUnmarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.AlreadyExistsExceptionUnmarshaller : object {
    private static AlreadyExistsExceptionUnmarshaller _instance;
    public static AlreadyExistsExceptionUnmarshaller Instance { get; }
    private static AlreadyExistsExceptionUnmarshaller();
    public sealed virtual AlreadyExistsException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual AlreadyExistsException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static AlreadyExistsExceptionUnmarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.CancelKeyDeletionRequestMarshaller : object {
    private static CancelKeyDeletionRequestMarshaller _instance;
    public static CancelKeyDeletionRequestMarshaller Instance { get; }
    private static CancelKeyDeletionRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(CancelKeyDeletionRequest publicRequest);
    internal static CancelKeyDeletionRequestMarshaller GetInstance();
    public static CancelKeyDeletionRequestMarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.CancelKeyDeletionResponseUnmarshaller : JsonResponseUnmarshaller {
    private static CancelKeyDeletionResponseUnmarshaller _instance;
    public static CancelKeyDeletionResponseUnmarshaller Instance { get; }
    private static CancelKeyDeletionResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static CancelKeyDeletionResponseUnmarshaller GetInstance();
    public static CancelKeyDeletionResponseUnmarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.CloudHsmClusterInUseExceptionUnmarshaller : object {
    private static CloudHsmClusterInUseExceptionUnmarshaller _instance;
    public static CloudHsmClusterInUseExceptionUnmarshaller Instance { get; }
    private static CloudHsmClusterInUseExceptionUnmarshaller();
    public sealed virtual CloudHsmClusterInUseException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual CloudHsmClusterInUseException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static CloudHsmClusterInUseExceptionUnmarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.CloudHsmClusterInvalidConfigurationExceptionUnmarshaller : object {
    private static CloudHsmClusterInvalidConfigurationExceptionUnmarshaller _instance;
    public static CloudHsmClusterInvalidConfigurationExceptionUnmarshaller Instance { get; }
    private static CloudHsmClusterInvalidConfigurationExceptionUnmarshaller();
    public sealed virtual CloudHsmClusterInvalidConfigurationException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual CloudHsmClusterInvalidConfigurationException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static CloudHsmClusterInvalidConfigurationExceptionUnmarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.CloudHsmClusterNotActiveExceptionUnmarshaller : object {
    private static CloudHsmClusterNotActiveExceptionUnmarshaller _instance;
    public static CloudHsmClusterNotActiveExceptionUnmarshaller Instance { get; }
    private static CloudHsmClusterNotActiveExceptionUnmarshaller();
    public sealed virtual CloudHsmClusterNotActiveException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual CloudHsmClusterNotActiveException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static CloudHsmClusterNotActiveExceptionUnmarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.CloudHsmClusterNotFoundExceptionUnmarshaller : object {
    private static CloudHsmClusterNotFoundExceptionUnmarshaller _instance;
    public static CloudHsmClusterNotFoundExceptionUnmarshaller Instance { get; }
    private static CloudHsmClusterNotFoundExceptionUnmarshaller();
    public sealed virtual CloudHsmClusterNotFoundException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual CloudHsmClusterNotFoundException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static CloudHsmClusterNotFoundExceptionUnmarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.CloudHsmClusterNotRelatedExceptionUnmarshaller : object {
    private static CloudHsmClusterNotRelatedExceptionUnmarshaller _instance;
    public static CloudHsmClusterNotRelatedExceptionUnmarshaller Instance { get; }
    private static CloudHsmClusterNotRelatedExceptionUnmarshaller();
    public sealed virtual CloudHsmClusterNotRelatedException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual CloudHsmClusterNotRelatedException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static CloudHsmClusterNotRelatedExceptionUnmarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.ConflictExceptionUnmarshaller : object {
    private static ConflictExceptionUnmarshaller _instance;
    public static ConflictExceptionUnmarshaller Instance { get; }
    private static ConflictExceptionUnmarshaller();
    public sealed virtual ConflictException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual ConflictException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static ConflictExceptionUnmarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.ConnectCustomKeyStoreRequestMarshaller : object {
    private static ConnectCustomKeyStoreRequestMarshaller _instance;
    public static ConnectCustomKeyStoreRequestMarshaller Instance { get; }
    private static ConnectCustomKeyStoreRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ConnectCustomKeyStoreRequest publicRequest);
    internal static ConnectCustomKeyStoreRequestMarshaller GetInstance();
    public static ConnectCustomKeyStoreRequestMarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.ConnectCustomKeyStoreResponseUnmarshaller : JsonResponseUnmarshaller {
    private static ConnectCustomKeyStoreResponseUnmarshaller _instance;
    public static ConnectCustomKeyStoreResponseUnmarshaller Instance { get; }
    private static ConnectCustomKeyStoreResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ConnectCustomKeyStoreResponseUnmarshaller GetInstance();
    public static ConnectCustomKeyStoreResponseUnmarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.CreateAliasRequestMarshaller : object {
    private static CreateAliasRequestMarshaller _instance;
    public static CreateAliasRequestMarshaller Instance { get; }
    private static CreateAliasRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(CreateAliasRequest publicRequest);
    internal static CreateAliasRequestMarshaller GetInstance();
    public static CreateAliasRequestMarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.CreateAliasResponseUnmarshaller : JsonResponseUnmarshaller {
    private static CreateAliasResponseUnmarshaller _instance;
    public static CreateAliasResponseUnmarshaller Instance { get; }
    private static CreateAliasResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static CreateAliasResponseUnmarshaller GetInstance();
    public static CreateAliasResponseUnmarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.CreateCustomKeyStoreRequestMarshaller : object {
    private static CreateCustomKeyStoreRequestMarshaller _instance;
    public static CreateCustomKeyStoreRequestMarshaller Instance { get; }
    private static CreateCustomKeyStoreRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(CreateCustomKeyStoreRequest publicRequest);
    internal static CreateCustomKeyStoreRequestMarshaller GetInstance();
    public static CreateCustomKeyStoreRequestMarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.CreateCustomKeyStoreResponseUnmarshaller : JsonResponseUnmarshaller {
    private static CreateCustomKeyStoreResponseUnmarshaller _instance;
    public static CreateCustomKeyStoreResponseUnmarshaller Instance { get; }
    private static CreateCustomKeyStoreResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static CreateCustomKeyStoreResponseUnmarshaller GetInstance();
    public static CreateCustomKeyStoreResponseUnmarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.CreateGrantRequestMarshaller : object {
    private static CreateGrantRequestMarshaller _instance;
    public static CreateGrantRequestMarshaller Instance { get; }
    private static CreateGrantRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(CreateGrantRequest publicRequest);
    internal static CreateGrantRequestMarshaller GetInstance();
    public static CreateGrantRequestMarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.CreateGrantResponseUnmarshaller : JsonResponseUnmarshaller {
    private static CreateGrantResponseUnmarshaller _instance;
    public static CreateGrantResponseUnmarshaller Instance { get; }
    private static CreateGrantResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static CreateGrantResponseUnmarshaller GetInstance();
    public static CreateGrantResponseUnmarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.CreateKeyRequestMarshaller : object {
    private static CreateKeyRequestMarshaller _instance;
    public static CreateKeyRequestMarshaller Instance { get; }
    private static CreateKeyRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(CreateKeyRequest publicRequest);
    internal static CreateKeyRequestMarshaller GetInstance();
    public static CreateKeyRequestMarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.CreateKeyResponseUnmarshaller : JsonResponseUnmarshaller {
    private static CreateKeyResponseUnmarshaller _instance;
    public static CreateKeyResponseUnmarshaller Instance { get; }
    private static CreateKeyResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static CreateKeyResponseUnmarshaller GetInstance();
    public static CreateKeyResponseUnmarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.CustomKeyStoreHasCMKsExceptionUnmarshaller : object {
    private static CustomKeyStoreHasCMKsExceptionUnmarshaller _instance;
    public static CustomKeyStoreHasCMKsExceptionUnmarshaller Instance { get; }
    private static CustomKeyStoreHasCMKsExceptionUnmarshaller();
    public sealed virtual CustomKeyStoreHasCMKsException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual CustomKeyStoreHasCMKsException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static CustomKeyStoreHasCMKsExceptionUnmarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.CustomKeyStoreInvalidStateExceptionUnmarshaller : object {
    private static CustomKeyStoreInvalidStateExceptionUnmarshaller _instance;
    public static CustomKeyStoreInvalidStateExceptionUnmarshaller Instance { get; }
    private static CustomKeyStoreInvalidStateExceptionUnmarshaller();
    public sealed virtual CustomKeyStoreInvalidStateException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual CustomKeyStoreInvalidStateException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static CustomKeyStoreInvalidStateExceptionUnmarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.CustomKeyStoreNameInUseExceptionUnmarshaller : object {
    private static CustomKeyStoreNameInUseExceptionUnmarshaller _instance;
    public static CustomKeyStoreNameInUseExceptionUnmarshaller Instance { get; }
    private static CustomKeyStoreNameInUseExceptionUnmarshaller();
    public sealed virtual CustomKeyStoreNameInUseException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual CustomKeyStoreNameInUseException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static CustomKeyStoreNameInUseExceptionUnmarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.CustomKeyStoreNotFoundExceptionUnmarshaller : object {
    private static CustomKeyStoreNotFoundExceptionUnmarshaller _instance;
    public static CustomKeyStoreNotFoundExceptionUnmarshaller Instance { get; }
    private static CustomKeyStoreNotFoundExceptionUnmarshaller();
    public sealed virtual CustomKeyStoreNotFoundException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual CustomKeyStoreNotFoundException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static CustomKeyStoreNotFoundExceptionUnmarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.CustomKeyStoresListEntryUnmarshaller : object {
    private static CustomKeyStoresListEntryUnmarshaller _instance;
    public static CustomKeyStoresListEntryUnmarshaller Instance { get; }
    private static CustomKeyStoresListEntryUnmarshaller();
    private sealed virtual override CustomKeyStoresListEntry Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.KeyManagementService.Model.CustomKeyStoresListEntry,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual CustomKeyStoresListEntry Unmarshall(JsonUnmarshallerContext context);
    public static CustomKeyStoresListEntryUnmarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.DecryptRequestMarshaller : object {
    private static DecryptRequestMarshaller _instance;
    public static DecryptRequestMarshaller Instance { get; }
    private static DecryptRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DecryptRequest publicRequest);
    internal static DecryptRequestMarshaller GetInstance();
    public static DecryptRequestMarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.DecryptResponseUnmarshaller : JsonResponseUnmarshaller {
    private static DecryptResponseUnmarshaller _instance;
    public static DecryptResponseUnmarshaller Instance { get; }
    private static DecryptResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DecryptResponseUnmarshaller GetInstance();
    public static DecryptResponseUnmarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.DeleteAliasRequestMarshaller : object {
    private static DeleteAliasRequestMarshaller _instance;
    public static DeleteAliasRequestMarshaller Instance { get; }
    private static DeleteAliasRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeleteAliasRequest publicRequest);
    internal static DeleteAliasRequestMarshaller GetInstance();
    public static DeleteAliasRequestMarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.DeleteAliasResponseUnmarshaller : JsonResponseUnmarshaller {
    private static DeleteAliasResponseUnmarshaller _instance;
    public static DeleteAliasResponseUnmarshaller Instance { get; }
    private static DeleteAliasResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DeleteAliasResponseUnmarshaller GetInstance();
    public static DeleteAliasResponseUnmarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.DeleteCustomKeyStoreRequestMarshaller : object {
    private static DeleteCustomKeyStoreRequestMarshaller _instance;
    public static DeleteCustomKeyStoreRequestMarshaller Instance { get; }
    private static DeleteCustomKeyStoreRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeleteCustomKeyStoreRequest publicRequest);
    internal static DeleteCustomKeyStoreRequestMarshaller GetInstance();
    public static DeleteCustomKeyStoreRequestMarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.DeleteCustomKeyStoreResponseUnmarshaller : JsonResponseUnmarshaller {
    private static DeleteCustomKeyStoreResponseUnmarshaller _instance;
    public static DeleteCustomKeyStoreResponseUnmarshaller Instance { get; }
    private static DeleteCustomKeyStoreResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DeleteCustomKeyStoreResponseUnmarshaller GetInstance();
    public static DeleteCustomKeyStoreResponseUnmarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.DeleteImportedKeyMaterialRequestMarshaller : object {
    private static DeleteImportedKeyMaterialRequestMarshaller _instance;
    public static DeleteImportedKeyMaterialRequestMarshaller Instance { get; }
    private static DeleteImportedKeyMaterialRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeleteImportedKeyMaterialRequest publicRequest);
    internal static DeleteImportedKeyMaterialRequestMarshaller GetInstance();
    public static DeleteImportedKeyMaterialRequestMarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.DeleteImportedKeyMaterialResponseUnmarshaller : JsonResponseUnmarshaller {
    private static DeleteImportedKeyMaterialResponseUnmarshaller _instance;
    public static DeleteImportedKeyMaterialResponseUnmarshaller Instance { get; }
    private static DeleteImportedKeyMaterialResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DeleteImportedKeyMaterialResponseUnmarshaller GetInstance();
    public static DeleteImportedKeyMaterialResponseUnmarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.DependencyTimeoutExceptionUnmarshaller : object {
    private static DependencyTimeoutExceptionUnmarshaller _instance;
    public static DependencyTimeoutExceptionUnmarshaller Instance { get; }
    private static DependencyTimeoutExceptionUnmarshaller();
    public sealed virtual DependencyTimeoutException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual DependencyTimeoutException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static DependencyTimeoutExceptionUnmarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.DeriveSharedSecretRequestMarshaller : object {
    private static DeriveSharedSecretRequestMarshaller _instance;
    public static DeriveSharedSecretRequestMarshaller Instance { get; }
    private static DeriveSharedSecretRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeriveSharedSecretRequest publicRequest);
    internal static DeriveSharedSecretRequestMarshaller GetInstance();
    public static DeriveSharedSecretRequestMarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.DeriveSharedSecretResponseUnmarshaller : JsonResponseUnmarshaller {
    private static DeriveSharedSecretResponseUnmarshaller _instance;
    public static DeriveSharedSecretResponseUnmarshaller Instance { get; }
    private static DeriveSharedSecretResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DeriveSharedSecretResponseUnmarshaller GetInstance();
    public static DeriveSharedSecretResponseUnmarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.DescribeCustomKeyStoresRequestMarshaller : object {
    private static DescribeCustomKeyStoresRequestMarshaller _instance;
    public static DescribeCustomKeyStoresRequestMarshaller Instance { get; }
    private static DescribeCustomKeyStoresRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DescribeCustomKeyStoresRequest publicRequest);
    internal static DescribeCustomKeyStoresRequestMarshaller GetInstance();
    public static DescribeCustomKeyStoresRequestMarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.DescribeCustomKeyStoresResponseUnmarshaller : JsonResponseUnmarshaller {
    private static DescribeCustomKeyStoresResponseUnmarshaller _instance;
    public static DescribeCustomKeyStoresResponseUnmarshaller Instance { get; }
    private static DescribeCustomKeyStoresResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DescribeCustomKeyStoresResponseUnmarshaller GetInstance();
    public static DescribeCustomKeyStoresResponseUnmarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.DescribeKeyRequestMarshaller : object {
    private static DescribeKeyRequestMarshaller _instance;
    public static DescribeKeyRequestMarshaller Instance { get; }
    private static DescribeKeyRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DescribeKeyRequest publicRequest);
    internal static DescribeKeyRequestMarshaller GetInstance();
    public static DescribeKeyRequestMarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.DescribeKeyResponseUnmarshaller : JsonResponseUnmarshaller {
    private static DescribeKeyResponseUnmarshaller _instance;
    public static DescribeKeyResponseUnmarshaller Instance { get; }
    private static DescribeKeyResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DescribeKeyResponseUnmarshaller GetInstance();
    public static DescribeKeyResponseUnmarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.DisabledExceptionUnmarshaller : object {
    private static DisabledExceptionUnmarshaller _instance;
    public static DisabledExceptionUnmarshaller Instance { get; }
    private static DisabledExceptionUnmarshaller();
    public sealed virtual DisabledException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual DisabledException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static DisabledExceptionUnmarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.DisableKeyRequestMarshaller : object {
    private static DisableKeyRequestMarshaller _instance;
    public static DisableKeyRequestMarshaller Instance { get; }
    private static DisableKeyRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DisableKeyRequest publicRequest);
    internal static DisableKeyRequestMarshaller GetInstance();
    public static DisableKeyRequestMarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.DisableKeyResponseUnmarshaller : JsonResponseUnmarshaller {
    private static DisableKeyResponseUnmarshaller _instance;
    public static DisableKeyResponseUnmarshaller Instance { get; }
    private static DisableKeyResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DisableKeyResponseUnmarshaller GetInstance();
    public static DisableKeyResponseUnmarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.DisableKeyRotationRequestMarshaller : object {
    private static DisableKeyRotationRequestMarshaller _instance;
    public static DisableKeyRotationRequestMarshaller Instance { get; }
    private static DisableKeyRotationRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DisableKeyRotationRequest publicRequest);
    internal static DisableKeyRotationRequestMarshaller GetInstance();
    public static DisableKeyRotationRequestMarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.DisableKeyRotationResponseUnmarshaller : JsonResponseUnmarshaller {
    private static DisableKeyRotationResponseUnmarshaller _instance;
    public static DisableKeyRotationResponseUnmarshaller Instance { get; }
    private static DisableKeyRotationResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DisableKeyRotationResponseUnmarshaller GetInstance();
    public static DisableKeyRotationResponseUnmarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.DisconnectCustomKeyStoreRequestMarshaller : object {
    private static DisconnectCustomKeyStoreRequestMarshaller _instance;
    public static DisconnectCustomKeyStoreRequestMarshaller Instance { get; }
    private static DisconnectCustomKeyStoreRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DisconnectCustomKeyStoreRequest publicRequest);
    internal static DisconnectCustomKeyStoreRequestMarshaller GetInstance();
    public static DisconnectCustomKeyStoreRequestMarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.DisconnectCustomKeyStoreResponseUnmarshaller : JsonResponseUnmarshaller {
    private static DisconnectCustomKeyStoreResponseUnmarshaller _instance;
    public static DisconnectCustomKeyStoreResponseUnmarshaller Instance { get; }
    private static DisconnectCustomKeyStoreResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DisconnectCustomKeyStoreResponseUnmarshaller GetInstance();
    public static DisconnectCustomKeyStoreResponseUnmarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.DryRunOperationExceptionUnmarshaller : object {
    private static DryRunOperationExceptionUnmarshaller _instance;
    public static DryRunOperationExceptionUnmarshaller Instance { get; }
    private static DryRunOperationExceptionUnmarshaller();
    public sealed virtual DryRunOperationException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual DryRunOperationException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static DryRunOperationExceptionUnmarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.EnableKeyRequestMarshaller : object {
    private static EnableKeyRequestMarshaller _instance;
    public static EnableKeyRequestMarshaller Instance { get; }
    private static EnableKeyRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(EnableKeyRequest publicRequest);
    internal static EnableKeyRequestMarshaller GetInstance();
    public static EnableKeyRequestMarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.EnableKeyResponseUnmarshaller : JsonResponseUnmarshaller {
    private static EnableKeyResponseUnmarshaller _instance;
    public static EnableKeyResponseUnmarshaller Instance { get; }
    private static EnableKeyResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static EnableKeyResponseUnmarshaller GetInstance();
    public static EnableKeyResponseUnmarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.EnableKeyRotationRequestMarshaller : object {
    private static EnableKeyRotationRequestMarshaller _instance;
    public static EnableKeyRotationRequestMarshaller Instance { get; }
    private static EnableKeyRotationRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(EnableKeyRotationRequest publicRequest);
    internal static EnableKeyRotationRequestMarshaller GetInstance();
    public static EnableKeyRotationRequestMarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.EnableKeyRotationResponseUnmarshaller : JsonResponseUnmarshaller {
    private static EnableKeyRotationResponseUnmarshaller _instance;
    public static EnableKeyRotationResponseUnmarshaller Instance { get; }
    private static EnableKeyRotationResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static EnableKeyRotationResponseUnmarshaller GetInstance();
    public static EnableKeyRotationResponseUnmarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.EncryptRequestMarshaller : object {
    private static EncryptRequestMarshaller _instance;
    public static EncryptRequestMarshaller Instance { get; }
    private static EncryptRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(EncryptRequest publicRequest);
    internal static EncryptRequestMarshaller GetInstance();
    public static EncryptRequestMarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.EncryptResponseUnmarshaller : JsonResponseUnmarshaller {
    private static EncryptResponseUnmarshaller _instance;
    public static EncryptResponseUnmarshaller Instance { get; }
    private static EncryptResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static EncryptResponseUnmarshaller GetInstance();
    public static EncryptResponseUnmarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.ExpiredImportTokenExceptionUnmarshaller : object {
    private static ExpiredImportTokenExceptionUnmarshaller _instance;
    public static ExpiredImportTokenExceptionUnmarshaller Instance { get; }
    private static ExpiredImportTokenExceptionUnmarshaller();
    public sealed virtual ExpiredImportTokenException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual ExpiredImportTokenException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static ExpiredImportTokenExceptionUnmarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.GenerateDataKeyPairRequestMarshaller : object {
    private static GenerateDataKeyPairRequestMarshaller _instance;
    public static GenerateDataKeyPairRequestMarshaller Instance { get; }
    private static GenerateDataKeyPairRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(GenerateDataKeyPairRequest publicRequest);
    internal static GenerateDataKeyPairRequestMarshaller GetInstance();
    public static GenerateDataKeyPairRequestMarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.GenerateDataKeyPairResponseUnmarshaller : JsonResponseUnmarshaller {
    private static GenerateDataKeyPairResponseUnmarshaller _instance;
    public static GenerateDataKeyPairResponseUnmarshaller Instance { get; }
    private static GenerateDataKeyPairResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static GenerateDataKeyPairResponseUnmarshaller GetInstance();
    public static GenerateDataKeyPairResponseUnmarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.GenerateDataKeyPairWithoutPlaintextRequestMarshaller : object {
    private static GenerateDataKeyPairWithoutPlaintextRequestMarshaller _instance;
    public static GenerateDataKeyPairWithoutPlaintextRequestMarshaller Instance { get; }
    private static GenerateDataKeyPairWithoutPlaintextRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(GenerateDataKeyPairWithoutPlaintextRequest publicRequest);
    internal static GenerateDataKeyPairWithoutPlaintextRequestMarshaller GetInstance();
    public static GenerateDataKeyPairWithoutPlaintextRequestMarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.GenerateDataKeyPairWithoutPlaintextResponseUnmarshaller : JsonResponseUnmarshaller {
    private static GenerateDataKeyPairWithoutPlaintextResponseUnmarshaller _instance;
    public static GenerateDataKeyPairWithoutPlaintextResponseUnmarshaller Instance { get; }
    private static GenerateDataKeyPairWithoutPlaintextResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static GenerateDataKeyPairWithoutPlaintextResponseUnmarshaller GetInstance();
    public static GenerateDataKeyPairWithoutPlaintextResponseUnmarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.GenerateDataKeyRequestMarshaller : object {
    private static GenerateDataKeyRequestMarshaller _instance;
    public static GenerateDataKeyRequestMarshaller Instance { get; }
    private static GenerateDataKeyRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(GenerateDataKeyRequest publicRequest);
    internal static GenerateDataKeyRequestMarshaller GetInstance();
    public static GenerateDataKeyRequestMarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.GenerateDataKeyResponseUnmarshaller : JsonResponseUnmarshaller {
    private static GenerateDataKeyResponseUnmarshaller _instance;
    public static GenerateDataKeyResponseUnmarshaller Instance { get; }
    private static GenerateDataKeyResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static GenerateDataKeyResponseUnmarshaller GetInstance();
    public static GenerateDataKeyResponseUnmarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.GenerateDataKeyWithoutPlaintextRequestMarshaller : object {
    private static GenerateDataKeyWithoutPlaintextRequestMarshaller _instance;
    public static GenerateDataKeyWithoutPlaintextRequestMarshaller Instance { get; }
    private static GenerateDataKeyWithoutPlaintextRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(GenerateDataKeyWithoutPlaintextRequest publicRequest);
    internal static GenerateDataKeyWithoutPlaintextRequestMarshaller GetInstance();
    public static GenerateDataKeyWithoutPlaintextRequestMarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.GenerateDataKeyWithoutPlaintextResponseUnmarshaller : JsonResponseUnmarshaller {
    private static GenerateDataKeyWithoutPlaintextResponseUnmarshaller _instance;
    public static GenerateDataKeyWithoutPlaintextResponseUnmarshaller Instance { get; }
    private static GenerateDataKeyWithoutPlaintextResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static GenerateDataKeyWithoutPlaintextResponseUnmarshaller GetInstance();
    public static GenerateDataKeyWithoutPlaintextResponseUnmarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.GenerateMacRequestMarshaller : object {
    private static GenerateMacRequestMarshaller _instance;
    public static GenerateMacRequestMarshaller Instance { get; }
    private static GenerateMacRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(GenerateMacRequest publicRequest);
    internal static GenerateMacRequestMarshaller GetInstance();
    public static GenerateMacRequestMarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.GenerateMacResponseUnmarshaller : JsonResponseUnmarshaller {
    private static GenerateMacResponseUnmarshaller _instance;
    public static GenerateMacResponseUnmarshaller Instance { get; }
    private static GenerateMacResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static GenerateMacResponseUnmarshaller GetInstance();
    public static GenerateMacResponseUnmarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.GenerateRandomRequestMarshaller : object {
    private static GenerateRandomRequestMarshaller _instance;
    public static GenerateRandomRequestMarshaller Instance { get; }
    private static GenerateRandomRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(GenerateRandomRequest publicRequest);
    internal static GenerateRandomRequestMarshaller GetInstance();
    public static GenerateRandomRequestMarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.GenerateRandomResponseUnmarshaller : JsonResponseUnmarshaller {
    private static GenerateRandomResponseUnmarshaller _instance;
    public static GenerateRandomResponseUnmarshaller Instance { get; }
    private static GenerateRandomResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static GenerateRandomResponseUnmarshaller GetInstance();
    public static GenerateRandomResponseUnmarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.GetKeyPolicyRequestMarshaller : object {
    private static GetKeyPolicyRequestMarshaller _instance;
    public static GetKeyPolicyRequestMarshaller Instance { get; }
    private static GetKeyPolicyRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(GetKeyPolicyRequest publicRequest);
    internal static GetKeyPolicyRequestMarshaller GetInstance();
    public static GetKeyPolicyRequestMarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.GetKeyPolicyResponseUnmarshaller : JsonResponseUnmarshaller {
    private static GetKeyPolicyResponseUnmarshaller _instance;
    public static GetKeyPolicyResponseUnmarshaller Instance { get; }
    private static GetKeyPolicyResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static GetKeyPolicyResponseUnmarshaller GetInstance();
    public static GetKeyPolicyResponseUnmarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.GetKeyRotationStatusRequestMarshaller : object {
    private static GetKeyRotationStatusRequestMarshaller _instance;
    public static GetKeyRotationStatusRequestMarshaller Instance { get; }
    private static GetKeyRotationStatusRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(GetKeyRotationStatusRequest publicRequest);
    internal static GetKeyRotationStatusRequestMarshaller GetInstance();
    public static GetKeyRotationStatusRequestMarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.GetKeyRotationStatusResponseUnmarshaller : JsonResponseUnmarshaller {
    private static GetKeyRotationStatusResponseUnmarshaller _instance;
    public static GetKeyRotationStatusResponseUnmarshaller Instance { get; }
    private static GetKeyRotationStatusResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static GetKeyRotationStatusResponseUnmarshaller GetInstance();
    public static GetKeyRotationStatusResponseUnmarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.GetParametersForImportRequestMarshaller : object {
    private static GetParametersForImportRequestMarshaller _instance;
    public static GetParametersForImportRequestMarshaller Instance { get; }
    private static GetParametersForImportRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(GetParametersForImportRequest publicRequest);
    internal static GetParametersForImportRequestMarshaller GetInstance();
    public static GetParametersForImportRequestMarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.GetParametersForImportResponseUnmarshaller : JsonResponseUnmarshaller {
    private static GetParametersForImportResponseUnmarshaller _instance;
    public static GetParametersForImportResponseUnmarshaller Instance { get; }
    private static GetParametersForImportResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static GetParametersForImportResponseUnmarshaller GetInstance();
    public static GetParametersForImportResponseUnmarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.GetPublicKeyRequestMarshaller : object {
    private static GetPublicKeyRequestMarshaller _instance;
    public static GetPublicKeyRequestMarshaller Instance { get; }
    private static GetPublicKeyRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(GetPublicKeyRequest publicRequest);
    internal static GetPublicKeyRequestMarshaller GetInstance();
    public static GetPublicKeyRequestMarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.GetPublicKeyResponseUnmarshaller : JsonResponseUnmarshaller {
    private static GetPublicKeyResponseUnmarshaller _instance;
    public static GetPublicKeyResponseUnmarshaller Instance { get; }
    private static GetPublicKeyResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static GetPublicKeyResponseUnmarshaller GetInstance();
    public static GetPublicKeyResponseUnmarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.GrantConstraintsMarshaller : object {
    public static GrantConstraintsMarshaller Instance;
    private static GrantConstraintsMarshaller();
    public sealed virtual void Marshall(GrantConstraints requestObject, JsonMarshallerContext context);
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.GrantConstraintsUnmarshaller : object {
    private static GrantConstraintsUnmarshaller _instance;
    public static GrantConstraintsUnmarshaller Instance { get; }
    private static GrantConstraintsUnmarshaller();
    private sealed virtual override GrantConstraints Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.KeyManagementService.Model.GrantConstraints,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual GrantConstraints Unmarshall(JsonUnmarshallerContext context);
    public static GrantConstraintsUnmarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.GrantListEntryUnmarshaller : object {
    private static GrantListEntryUnmarshaller _instance;
    public static GrantListEntryUnmarshaller Instance { get; }
    private static GrantListEntryUnmarshaller();
    private sealed virtual override GrantListEntry Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.KeyManagementService.Model.GrantListEntry,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual GrantListEntry Unmarshall(JsonUnmarshallerContext context);
    public static GrantListEntryUnmarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.ImportKeyMaterialRequestMarshaller : object {
    private static ImportKeyMaterialRequestMarshaller _instance;
    public static ImportKeyMaterialRequestMarshaller Instance { get; }
    private static ImportKeyMaterialRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ImportKeyMaterialRequest publicRequest);
    internal static ImportKeyMaterialRequestMarshaller GetInstance();
    public static ImportKeyMaterialRequestMarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.ImportKeyMaterialResponseUnmarshaller : JsonResponseUnmarshaller {
    private static ImportKeyMaterialResponseUnmarshaller _instance;
    public static ImportKeyMaterialResponseUnmarshaller Instance { get; }
    private static ImportKeyMaterialResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ImportKeyMaterialResponseUnmarshaller GetInstance();
    public static ImportKeyMaterialResponseUnmarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.IncorrectKeyExceptionUnmarshaller : object {
    private static IncorrectKeyExceptionUnmarshaller _instance;
    public static IncorrectKeyExceptionUnmarshaller Instance { get; }
    private static IncorrectKeyExceptionUnmarshaller();
    public sealed virtual IncorrectKeyException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual IncorrectKeyException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static IncorrectKeyExceptionUnmarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.IncorrectKeyMaterialExceptionUnmarshaller : object {
    private static IncorrectKeyMaterialExceptionUnmarshaller _instance;
    public static IncorrectKeyMaterialExceptionUnmarshaller Instance { get; }
    private static IncorrectKeyMaterialExceptionUnmarshaller();
    public sealed virtual IncorrectKeyMaterialException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual IncorrectKeyMaterialException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static IncorrectKeyMaterialExceptionUnmarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.IncorrectTrustAnchorExceptionUnmarshaller : object {
    private static IncorrectTrustAnchorExceptionUnmarshaller _instance;
    public static IncorrectTrustAnchorExceptionUnmarshaller Instance { get; }
    private static IncorrectTrustAnchorExceptionUnmarshaller();
    public sealed virtual IncorrectTrustAnchorException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual IncorrectTrustAnchorException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static IncorrectTrustAnchorExceptionUnmarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.InvalidAliasNameExceptionUnmarshaller : object {
    private static InvalidAliasNameExceptionUnmarshaller _instance;
    public static InvalidAliasNameExceptionUnmarshaller Instance { get; }
    private static InvalidAliasNameExceptionUnmarshaller();
    public sealed virtual InvalidAliasNameException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual InvalidAliasNameException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static InvalidAliasNameExceptionUnmarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.InvalidArnExceptionUnmarshaller : object {
    private static InvalidArnExceptionUnmarshaller _instance;
    public static InvalidArnExceptionUnmarshaller Instance { get; }
    private static InvalidArnExceptionUnmarshaller();
    public sealed virtual InvalidArnException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual InvalidArnException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static InvalidArnExceptionUnmarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.InvalidCiphertextExceptionUnmarshaller : object {
    private static InvalidCiphertextExceptionUnmarshaller _instance;
    public static InvalidCiphertextExceptionUnmarshaller Instance { get; }
    private static InvalidCiphertextExceptionUnmarshaller();
    public sealed virtual InvalidCiphertextException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual InvalidCiphertextException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static InvalidCiphertextExceptionUnmarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.InvalidGrantIdExceptionUnmarshaller : object {
    private static InvalidGrantIdExceptionUnmarshaller _instance;
    public static InvalidGrantIdExceptionUnmarshaller Instance { get; }
    private static InvalidGrantIdExceptionUnmarshaller();
    public sealed virtual InvalidGrantIdException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual InvalidGrantIdException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static InvalidGrantIdExceptionUnmarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.InvalidGrantTokenExceptionUnmarshaller : object {
    private static InvalidGrantTokenExceptionUnmarshaller _instance;
    public static InvalidGrantTokenExceptionUnmarshaller Instance { get; }
    private static InvalidGrantTokenExceptionUnmarshaller();
    public sealed virtual InvalidGrantTokenException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual InvalidGrantTokenException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static InvalidGrantTokenExceptionUnmarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.InvalidImportTokenExceptionUnmarshaller : object {
    private static InvalidImportTokenExceptionUnmarshaller _instance;
    public static InvalidImportTokenExceptionUnmarshaller Instance { get; }
    private static InvalidImportTokenExceptionUnmarshaller();
    public sealed virtual InvalidImportTokenException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual InvalidImportTokenException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static InvalidImportTokenExceptionUnmarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.InvalidKeyUsageExceptionUnmarshaller : object {
    private static InvalidKeyUsageExceptionUnmarshaller _instance;
    public static InvalidKeyUsageExceptionUnmarshaller Instance { get; }
    private static InvalidKeyUsageExceptionUnmarshaller();
    public sealed virtual InvalidKeyUsageException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual InvalidKeyUsageException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static InvalidKeyUsageExceptionUnmarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.InvalidMarkerExceptionUnmarshaller : object {
    private static InvalidMarkerExceptionUnmarshaller _instance;
    public static InvalidMarkerExceptionUnmarshaller Instance { get; }
    private static InvalidMarkerExceptionUnmarshaller();
    public sealed virtual InvalidMarkerException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual InvalidMarkerException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static InvalidMarkerExceptionUnmarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.KeyListEntryUnmarshaller : object {
    private static KeyListEntryUnmarshaller _instance;
    public static KeyListEntryUnmarshaller Instance { get; }
    private static KeyListEntryUnmarshaller();
    private sealed virtual override KeyListEntry Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.KeyManagementService.Model.KeyListEntry,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual KeyListEntry Unmarshall(JsonUnmarshallerContext context);
    public static KeyListEntryUnmarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.KeyMetadataUnmarshaller : object {
    private static KeyMetadataUnmarshaller _instance;
    public static KeyMetadataUnmarshaller Instance { get; }
    private static KeyMetadataUnmarshaller();
    private sealed virtual override KeyMetadata Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.KeyManagementService.Model.KeyMetadata,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual KeyMetadata Unmarshall(JsonUnmarshallerContext context);
    public static KeyMetadataUnmarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.KeyUnavailableExceptionUnmarshaller : object {
    private static KeyUnavailableExceptionUnmarshaller _instance;
    public static KeyUnavailableExceptionUnmarshaller Instance { get; }
    private static KeyUnavailableExceptionUnmarshaller();
    public sealed virtual KeyUnavailableException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual KeyUnavailableException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static KeyUnavailableExceptionUnmarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.KMSInternalExceptionUnmarshaller : object {
    private static KMSInternalExceptionUnmarshaller _instance;
    public static KMSInternalExceptionUnmarshaller Instance { get; }
    private static KMSInternalExceptionUnmarshaller();
    public sealed virtual KMSInternalException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual KMSInternalException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static KMSInternalExceptionUnmarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.KMSInvalidMacExceptionUnmarshaller : object {
    private static KMSInvalidMacExceptionUnmarshaller _instance;
    public static KMSInvalidMacExceptionUnmarshaller Instance { get; }
    private static KMSInvalidMacExceptionUnmarshaller();
    public sealed virtual KMSInvalidMacException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual KMSInvalidMacException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static KMSInvalidMacExceptionUnmarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.KMSInvalidSignatureExceptionUnmarshaller : object {
    private static KMSInvalidSignatureExceptionUnmarshaller _instance;
    public static KMSInvalidSignatureExceptionUnmarshaller Instance { get; }
    private static KMSInvalidSignatureExceptionUnmarshaller();
    public sealed virtual KMSInvalidSignatureException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual KMSInvalidSignatureException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static KMSInvalidSignatureExceptionUnmarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.KMSInvalidStateExceptionUnmarshaller : object {
    private static KMSInvalidStateExceptionUnmarshaller _instance;
    public static KMSInvalidStateExceptionUnmarshaller Instance { get; }
    private static KMSInvalidStateExceptionUnmarshaller();
    public sealed virtual KMSInvalidStateException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual KMSInvalidStateException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static KMSInvalidStateExceptionUnmarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.LimitExceededExceptionUnmarshaller : object {
    private static LimitExceededExceptionUnmarshaller _instance;
    public static LimitExceededExceptionUnmarshaller Instance { get; }
    private static LimitExceededExceptionUnmarshaller();
    public sealed virtual LimitExceededException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual LimitExceededException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static LimitExceededExceptionUnmarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.ListAliasesRequestMarshaller : object {
    private static ListAliasesRequestMarshaller _instance;
    public static ListAliasesRequestMarshaller Instance { get; }
    private static ListAliasesRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListAliasesRequest publicRequest);
    internal static ListAliasesRequestMarshaller GetInstance();
    public static ListAliasesRequestMarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.ListAliasesResponseUnmarshaller : JsonResponseUnmarshaller {
    private static ListAliasesResponseUnmarshaller _instance;
    public static ListAliasesResponseUnmarshaller Instance { get; }
    private static ListAliasesResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ListAliasesResponseUnmarshaller GetInstance();
    public static ListAliasesResponseUnmarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.ListGrantsRequestMarshaller : object {
    private static ListGrantsRequestMarshaller _instance;
    public static ListGrantsRequestMarshaller Instance { get; }
    private static ListGrantsRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListGrantsRequest publicRequest);
    internal static ListGrantsRequestMarshaller GetInstance();
    public static ListGrantsRequestMarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.ListGrantsResponseUnmarshaller : JsonResponseUnmarshaller {
    private static ListGrantsResponseUnmarshaller _instance;
    public static ListGrantsResponseUnmarshaller Instance { get; }
    private static ListGrantsResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ListGrantsResponseUnmarshaller GetInstance();
    public static ListGrantsResponseUnmarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.ListKeyPoliciesRequestMarshaller : object {
    private static ListKeyPoliciesRequestMarshaller _instance;
    public static ListKeyPoliciesRequestMarshaller Instance { get; }
    private static ListKeyPoliciesRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListKeyPoliciesRequest publicRequest);
    internal static ListKeyPoliciesRequestMarshaller GetInstance();
    public static ListKeyPoliciesRequestMarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.ListKeyPoliciesResponseUnmarshaller : JsonResponseUnmarshaller {
    private static ListKeyPoliciesResponseUnmarshaller _instance;
    public static ListKeyPoliciesResponseUnmarshaller Instance { get; }
    private static ListKeyPoliciesResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ListKeyPoliciesResponseUnmarshaller GetInstance();
    public static ListKeyPoliciesResponseUnmarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.ListKeyRotationsRequestMarshaller : object {
    private static ListKeyRotationsRequestMarshaller _instance;
    public static ListKeyRotationsRequestMarshaller Instance { get; }
    private static ListKeyRotationsRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListKeyRotationsRequest publicRequest);
    internal static ListKeyRotationsRequestMarshaller GetInstance();
    public static ListKeyRotationsRequestMarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.ListKeyRotationsResponseUnmarshaller : JsonResponseUnmarshaller {
    private static ListKeyRotationsResponseUnmarshaller _instance;
    public static ListKeyRotationsResponseUnmarshaller Instance { get; }
    private static ListKeyRotationsResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ListKeyRotationsResponseUnmarshaller GetInstance();
    public static ListKeyRotationsResponseUnmarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.ListKeysRequestMarshaller : object {
    private static ListKeysRequestMarshaller _instance;
    public static ListKeysRequestMarshaller Instance { get; }
    private static ListKeysRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListKeysRequest publicRequest);
    internal static ListKeysRequestMarshaller GetInstance();
    public static ListKeysRequestMarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.ListKeysResponseUnmarshaller : JsonResponseUnmarshaller {
    private static ListKeysResponseUnmarshaller _instance;
    public static ListKeysResponseUnmarshaller Instance { get; }
    private static ListKeysResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ListKeysResponseUnmarshaller GetInstance();
    public static ListKeysResponseUnmarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.ListResourceTagsRequestMarshaller : object {
    private static ListResourceTagsRequestMarshaller _instance;
    public static ListResourceTagsRequestMarshaller Instance { get; }
    private static ListResourceTagsRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListResourceTagsRequest publicRequest);
    internal static ListResourceTagsRequestMarshaller GetInstance();
    public static ListResourceTagsRequestMarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.ListResourceTagsResponseUnmarshaller : JsonResponseUnmarshaller {
    private static ListResourceTagsResponseUnmarshaller _instance;
    public static ListResourceTagsResponseUnmarshaller Instance { get; }
    private static ListResourceTagsResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ListResourceTagsResponseUnmarshaller GetInstance();
    public static ListResourceTagsResponseUnmarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.ListRetirableGrantsRequestMarshaller : object {
    private static ListRetirableGrantsRequestMarshaller _instance;
    public static ListRetirableGrantsRequestMarshaller Instance { get; }
    private static ListRetirableGrantsRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListRetirableGrantsRequest publicRequest);
    internal static ListRetirableGrantsRequestMarshaller GetInstance();
    public static ListRetirableGrantsRequestMarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.ListRetirableGrantsResponseUnmarshaller : JsonResponseUnmarshaller {
    private static ListRetirableGrantsResponseUnmarshaller _instance;
    public static ListRetirableGrantsResponseUnmarshaller Instance { get; }
    private static ListRetirableGrantsResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ListRetirableGrantsResponseUnmarshaller GetInstance();
    public static ListRetirableGrantsResponseUnmarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.MalformedPolicyDocumentExceptionUnmarshaller : object {
    private static MalformedPolicyDocumentExceptionUnmarshaller _instance;
    public static MalformedPolicyDocumentExceptionUnmarshaller Instance { get; }
    private static MalformedPolicyDocumentExceptionUnmarshaller();
    public sealed virtual MalformedPolicyDocumentException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual MalformedPolicyDocumentException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static MalformedPolicyDocumentExceptionUnmarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.MultiRegionConfigurationUnmarshaller : object {
    private static MultiRegionConfigurationUnmarshaller _instance;
    public static MultiRegionConfigurationUnmarshaller Instance { get; }
    private static MultiRegionConfigurationUnmarshaller();
    private sealed virtual override MultiRegionConfiguration Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.KeyManagementService.Model.MultiRegionConfiguration,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual MultiRegionConfiguration Unmarshall(JsonUnmarshallerContext context);
    public static MultiRegionConfigurationUnmarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.MultiRegionKeyUnmarshaller : object {
    private static MultiRegionKeyUnmarshaller _instance;
    public static MultiRegionKeyUnmarshaller Instance { get; }
    private static MultiRegionKeyUnmarshaller();
    private sealed virtual override MultiRegionKey Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.KeyManagementService.Model.MultiRegionKey,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual MultiRegionKey Unmarshall(JsonUnmarshallerContext context);
    public static MultiRegionKeyUnmarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.NotFoundExceptionUnmarshaller : object {
    private static NotFoundExceptionUnmarshaller _instance;
    public static NotFoundExceptionUnmarshaller Instance { get; }
    private static NotFoundExceptionUnmarshaller();
    public sealed virtual NotFoundException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual NotFoundException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static NotFoundExceptionUnmarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.PutKeyPolicyRequestMarshaller : object {
    private static PutKeyPolicyRequestMarshaller _instance;
    public static PutKeyPolicyRequestMarshaller Instance { get; }
    private static PutKeyPolicyRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(PutKeyPolicyRequest publicRequest);
    internal static PutKeyPolicyRequestMarshaller GetInstance();
    public static PutKeyPolicyRequestMarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.PutKeyPolicyResponseUnmarshaller : JsonResponseUnmarshaller {
    private static PutKeyPolicyResponseUnmarshaller _instance;
    public static PutKeyPolicyResponseUnmarshaller Instance { get; }
    private static PutKeyPolicyResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static PutKeyPolicyResponseUnmarshaller GetInstance();
    public static PutKeyPolicyResponseUnmarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.RecipientInfoMarshaller : object {
    public static RecipientInfoMarshaller Instance;
    private static RecipientInfoMarshaller();
    public sealed virtual void Marshall(RecipientInfo requestObject, JsonMarshallerContext context);
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.ReEncryptRequestMarshaller : object {
    private static ReEncryptRequestMarshaller _instance;
    public static ReEncryptRequestMarshaller Instance { get; }
    private static ReEncryptRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ReEncryptRequest publicRequest);
    internal static ReEncryptRequestMarshaller GetInstance();
    public static ReEncryptRequestMarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.ReEncryptResponseUnmarshaller : JsonResponseUnmarshaller {
    private static ReEncryptResponseUnmarshaller _instance;
    public static ReEncryptResponseUnmarshaller Instance { get; }
    private static ReEncryptResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ReEncryptResponseUnmarshaller GetInstance();
    public static ReEncryptResponseUnmarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.ReplicateKeyRequestMarshaller : object {
    private static ReplicateKeyRequestMarshaller _instance;
    public static ReplicateKeyRequestMarshaller Instance { get; }
    private static ReplicateKeyRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ReplicateKeyRequest publicRequest);
    internal static ReplicateKeyRequestMarshaller GetInstance();
    public static ReplicateKeyRequestMarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.ReplicateKeyResponseUnmarshaller : JsonResponseUnmarshaller {
    private static ReplicateKeyResponseUnmarshaller _instance;
    public static ReplicateKeyResponseUnmarshaller Instance { get; }
    private static ReplicateKeyResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ReplicateKeyResponseUnmarshaller GetInstance();
    public static ReplicateKeyResponseUnmarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.RetireGrantRequestMarshaller : object {
    private static RetireGrantRequestMarshaller _instance;
    public static RetireGrantRequestMarshaller Instance { get; }
    private static RetireGrantRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(RetireGrantRequest publicRequest);
    internal static RetireGrantRequestMarshaller GetInstance();
    public static RetireGrantRequestMarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.RetireGrantResponseUnmarshaller : JsonResponseUnmarshaller {
    private static RetireGrantResponseUnmarshaller _instance;
    public static RetireGrantResponseUnmarshaller Instance { get; }
    private static RetireGrantResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static RetireGrantResponseUnmarshaller GetInstance();
    public static RetireGrantResponseUnmarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.RevokeGrantRequestMarshaller : object {
    private static RevokeGrantRequestMarshaller _instance;
    public static RevokeGrantRequestMarshaller Instance { get; }
    private static RevokeGrantRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(RevokeGrantRequest publicRequest);
    internal static RevokeGrantRequestMarshaller GetInstance();
    public static RevokeGrantRequestMarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.RevokeGrantResponseUnmarshaller : JsonResponseUnmarshaller {
    private static RevokeGrantResponseUnmarshaller _instance;
    public static RevokeGrantResponseUnmarshaller Instance { get; }
    private static RevokeGrantResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static RevokeGrantResponseUnmarshaller GetInstance();
    public static RevokeGrantResponseUnmarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.RotateKeyOnDemandRequestMarshaller : object {
    private static RotateKeyOnDemandRequestMarshaller _instance;
    public static RotateKeyOnDemandRequestMarshaller Instance { get; }
    private static RotateKeyOnDemandRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(RotateKeyOnDemandRequest publicRequest);
    internal static RotateKeyOnDemandRequestMarshaller GetInstance();
    public static RotateKeyOnDemandRequestMarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.RotateKeyOnDemandResponseUnmarshaller : JsonResponseUnmarshaller {
    private static RotateKeyOnDemandResponseUnmarshaller _instance;
    public static RotateKeyOnDemandResponseUnmarshaller Instance { get; }
    private static RotateKeyOnDemandResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static RotateKeyOnDemandResponseUnmarshaller GetInstance();
    public static RotateKeyOnDemandResponseUnmarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.RotationsListEntryUnmarshaller : object {
    private static RotationsListEntryUnmarshaller _instance;
    public static RotationsListEntryUnmarshaller Instance { get; }
    private static RotationsListEntryUnmarshaller();
    private sealed virtual override RotationsListEntry Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.KeyManagementService.Model.RotationsListEntry,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual RotationsListEntry Unmarshall(JsonUnmarshallerContext context);
    public static RotationsListEntryUnmarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.ScheduleKeyDeletionRequestMarshaller : object {
    private static ScheduleKeyDeletionRequestMarshaller _instance;
    public static ScheduleKeyDeletionRequestMarshaller Instance { get; }
    private static ScheduleKeyDeletionRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ScheduleKeyDeletionRequest publicRequest);
    internal static ScheduleKeyDeletionRequestMarshaller GetInstance();
    public static ScheduleKeyDeletionRequestMarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.ScheduleKeyDeletionResponseUnmarshaller : JsonResponseUnmarshaller {
    private static ScheduleKeyDeletionResponseUnmarshaller _instance;
    public static ScheduleKeyDeletionResponseUnmarshaller Instance { get; }
    private static ScheduleKeyDeletionResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ScheduleKeyDeletionResponseUnmarshaller GetInstance();
    public static ScheduleKeyDeletionResponseUnmarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.SignRequestMarshaller : object {
    private static SignRequestMarshaller _instance;
    public static SignRequestMarshaller Instance { get; }
    private static SignRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(SignRequest publicRequest);
    internal static SignRequestMarshaller GetInstance();
    public static SignRequestMarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.SignResponseUnmarshaller : JsonResponseUnmarshaller {
    private static SignResponseUnmarshaller _instance;
    public static SignResponseUnmarshaller Instance { get; }
    private static SignResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static SignResponseUnmarshaller GetInstance();
    public static SignResponseUnmarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.TagExceptionUnmarshaller : object {
    private static TagExceptionUnmarshaller _instance;
    public static TagExceptionUnmarshaller Instance { get; }
    private static TagExceptionUnmarshaller();
    public sealed virtual TagException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual TagException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static TagExceptionUnmarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.TagMarshaller : object {
    public static TagMarshaller Instance;
    private static TagMarshaller();
    public sealed virtual void Marshall(Tag requestObject, JsonMarshallerContext context);
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.TagResourceRequestMarshaller : object {
    private static TagResourceRequestMarshaller _instance;
    public static TagResourceRequestMarshaller Instance { get; }
    private static TagResourceRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(TagResourceRequest publicRequest);
    internal static TagResourceRequestMarshaller GetInstance();
    public static TagResourceRequestMarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.TagResourceResponseUnmarshaller : JsonResponseUnmarshaller {
    private static TagResourceResponseUnmarshaller _instance;
    public static TagResourceResponseUnmarshaller Instance { get; }
    private static TagResourceResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static TagResourceResponseUnmarshaller GetInstance();
    public static TagResourceResponseUnmarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.TagUnmarshaller : object {
    private static TagUnmarshaller _instance;
    public static TagUnmarshaller Instance { get; }
    private static TagUnmarshaller();
    private sealed virtual override Tag Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.KeyManagementService.Model.Tag,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual Tag Unmarshall(JsonUnmarshallerContext context);
    public static TagUnmarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.UnsupportedOperationExceptionUnmarshaller : object {
    private static UnsupportedOperationExceptionUnmarshaller _instance;
    public static UnsupportedOperationExceptionUnmarshaller Instance { get; }
    private static UnsupportedOperationExceptionUnmarshaller();
    public sealed virtual UnsupportedOperationException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual UnsupportedOperationException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static UnsupportedOperationExceptionUnmarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.UntagResourceRequestMarshaller : object {
    private static UntagResourceRequestMarshaller _instance;
    public static UntagResourceRequestMarshaller Instance { get; }
    private static UntagResourceRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(UntagResourceRequest publicRequest);
    internal static UntagResourceRequestMarshaller GetInstance();
    public static UntagResourceRequestMarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.UntagResourceResponseUnmarshaller : JsonResponseUnmarshaller {
    private static UntagResourceResponseUnmarshaller _instance;
    public static UntagResourceResponseUnmarshaller Instance { get; }
    private static UntagResourceResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static UntagResourceResponseUnmarshaller GetInstance();
    public static UntagResourceResponseUnmarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.UpdateAliasRequestMarshaller : object {
    private static UpdateAliasRequestMarshaller _instance;
    public static UpdateAliasRequestMarshaller Instance { get; }
    private static UpdateAliasRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(UpdateAliasRequest publicRequest);
    internal static UpdateAliasRequestMarshaller GetInstance();
    public static UpdateAliasRequestMarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.UpdateAliasResponseUnmarshaller : JsonResponseUnmarshaller {
    private static UpdateAliasResponseUnmarshaller _instance;
    public static UpdateAliasResponseUnmarshaller Instance { get; }
    private static UpdateAliasResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static UpdateAliasResponseUnmarshaller GetInstance();
    public static UpdateAliasResponseUnmarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.UpdateCustomKeyStoreRequestMarshaller : object {
    private static UpdateCustomKeyStoreRequestMarshaller _instance;
    public static UpdateCustomKeyStoreRequestMarshaller Instance { get; }
    private static UpdateCustomKeyStoreRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(UpdateCustomKeyStoreRequest publicRequest);
    internal static UpdateCustomKeyStoreRequestMarshaller GetInstance();
    public static UpdateCustomKeyStoreRequestMarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.UpdateCustomKeyStoreResponseUnmarshaller : JsonResponseUnmarshaller {
    private static UpdateCustomKeyStoreResponseUnmarshaller _instance;
    public static UpdateCustomKeyStoreResponseUnmarshaller Instance { get; }
    private static UpdateCustomKeyStoreResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static UpdateCustomKeyStoreResponseUnmarshaller GetInstance();
    public static UpdateCustomKeyStoreResponseUnmarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.UpdateKeyDescriptionRequestMarshaller : object {
    private static UpdateKeyDescriptionRequestMarshaller _instance;
    public static UpdateKeyDescriptionRequestMarshaller Instance { get; }
    private static UpdateKeyDescriptionRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(UpdateKeyDescriptionRequest publicRequest);
    internal static UpdateKeyDescriptionRequestMarshaller GetInstance();
    public static UpdateKeyDescriptionRequestMarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.UpdateKeyDescriptionResponseUnmarshaller : JsonResponseUnmarshaller {
    private static UpdateKeyDescriptionResponseUnmarshaller _instance;
    public static UpdateKeyDescriptionResponseUnmarshaller Instance { get; }
    private static UpdateKeyDescriptionResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static UpdateKeyDescriptionResponseUnmarshaller GetInstance();
    public static UpdateKeyDescriptionResponseUnmarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.UpdatePrimaryRegionRequestMarshaller : object {
    private static UpdatePrimaryRegionRequestMarshaller _instance;
    public static UpdatePrimaryRegionRequestMarshaller Instance { get; }
    private static UpdatePrimaryRegionRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(UpdatePrimaryRegionRequest publicRequest);
    internal static UpdatePrimaryRegionRequestMarshaller GetInstance();
    public static UpdatePrimaryRegionRequestMarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.UpdatePrimaryRegionResponseUnmarshaller : JsonResponseUnmarshaller {
    private static UpdatePrimaryRegionResponseUnmarshaller _instance;
    public static UpdatePrimaryRegionResponseUnmarshaller Instance { get; }
    private static UpdatePrimaryRegionResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static UpdatePrimaryRegionResponseUnmarshaller GetInstance();
    public static UpdatePrimaryRegionResponseUnmarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.VerifyMacRequestMarshaller : object {
    private static VerifyMacRequestMarshaller _instance;
    public static VerifyMacRequestMarshaller Instance { get; }
    private static VerifyMacRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(VerifyMacRequest publicRequest);
    internal static VerifyMacRequestMarshaller GetInstance();
    public static VerifyMacRequestMarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.VerifyMacResponseUnmarshaller : JsonResponseUnmarshaller {
    private static VerifyMacResponseUnmarshaller _instance;
    public static VerifyMacResponseUnmarshaller Instance { get; }
    private static VerifyMacResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static VerifyMacResponseUnmarshaller GetInstance();
    public static VerifyMacResponseUnmarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.VerifyRequestMarshaller : object {
    private static VerifyRequestMarshaller _instance;
    public static VerifyRequestMarshaller Instance { get; }
    private static VerifyRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(VerifyRequest publicRequest);
    internal static VerifyRequestMarshaller GetInstance();
    public static VerifyRequestMarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.VerifyResponseUnmarshaller : JsonResponseUnmarshaller {
    private static VerifyResponseUnmarshaller _instance;
    public static VerifyResponseUnmarshaller Instance { get; }
    private static VerifyResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static VerifyResponseUnmarshaller GetInstance();
    public static VerifyResponseUnmarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.XksKeyAlreadyInUseExceptionUnmarshaller : object {
    private static XksKeyAlreadyInUseExceptionUnmarshaller _instance;
    public static XksKeyAlreadyInUseExceptionUnmarshaller Instance { get; }
    private static XksKeyAlreadyInUseExceptionUnmarshaller();
    public sealed virtual XksKeyAlreadyInUseException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual XksKeyAlreadyInUseException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static XksKeyAlreadyInUseExceptionUnmarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.XksKeyConfigurationTypeUnmarshaller : object {
    private static XksKeyConfigurationTypeUnmarshaller _instance;
    public static XksKeyConfigurationTypeUnmarshaller Instance { get; }
    private static XksKeyConfigurationTypeUnmarshaller();
    private sealed virtual override XksKeyConfigurationType Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.KeyManagementService.Model.XksKeyConfigurationType,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual XksKeyConfigurationType Unmarshall(JsonUnmarshallerContext context);
    public static XksKeyConfigurationTypeUnmarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.XksKeyInvalidConfigurationExceptionUnmarshaller : object {
    private static XksKeyInvalidConfigurationExceptionUnmarshaller _instance;
    public static XksKeyInvalidConfigurationExceptionUnmarshaller Instance { get; }
    private static XksKeyInvalidConfigurationExceptionUnmarshaller();
    public sealed virtual XksKeyInvalidConfigurationException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual XksKeyInvalidConfigurationException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static XksKeyInvalidConfigurationExceptionUnmarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.XksKeyNotFoundExceptionUnmarshaller : object {
    private static XksKeyNotFoundExceptionUnmarshaller _instance;
    public static XksKeyNotFoundExceptionUnmarshaller Instance { get; }
    private static XksKeyNotFoundExceptionUnmarshaller();
    public sealed virtual XksKeyNotFoundException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual XksKeyNotFoundException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static XksKeyNotFoundExceptionUnmarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.XksProxyAuthenticationCredentialTypeMarshaller : object {
    public static XksProxyAuthenticationCredentialTypeMarshaller Instance;
    private static XksProxyAuthenticationCredentialTypeMarshaller();
    public sealed virtual void Marshall(XksProxyAuthenticationCredentialType requestObject, JsonMarshallerContext context);
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.XksProxyConfigurationTypeUnmarshaller : object {
    private static XksProxyConfigurationTypeUnmarshaller _instance;
    public static XksProxyConfigurationTypeUnmarshaller Instance { get; }
    private static XksProxyConfigurationTypeUnmarshaller();
    private sealed virtual override XksProxyConfigurationType Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.KeyManagementService.Model.XksProxyConfigurationType,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual XksProxyConfigurationType Unmarshall(JsonUnmarshallerContext context);
    public static XksProxyConfigurationTypeUnmarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.XksProxyIncorrectAuthenticationCredentialExceptionUnmarshaller : object {
    private static XksProxyIncorrectAuthenticationCredentialExceptionUnmarshaller _instance;
    public static XksProxyIncorrectAuthenticationCredentialExceptionUnmarshaller Instance { get; }
    private static XksProxyIncorrectAuthenticationCredentialExceptionUnmarshaller();
    public sealed virtual XksProxyIncorrectAuthenticationCredentialException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual XksProxyIncorrectAuthenticationCredentialException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static XksProxyIncorrectAuthenticationCredentialExceptionUnmarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.XksProxyInvalidConfigurationExceptionUnmarshaller : object {
    private static XksProxyInvalidConfigurationExceptionUnmarshaller _instance;
    public static XksProxyInvalidConfigurationExceptionUnmarshaller Instance { get; }
    private static XksProxyInvalidConfigurationExceptionUnmarshaller();
    public sealed virtual XksProxyInvalidConfigurationException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual XksProxyInvalidConfigurationException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static XksProxyInvalidConfigurationExceptionUnmarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.XksProxyInvalidResponseExceptionUnmarshaller : object {
    private static XksProxyInvalidResponseExceptionUnmarshaller _instance;
    public static XksProxyInvalidResponseExceptionUnmarshaller Instance { get; }
    private static XksProxyInvalidResponseExceptionUnmarshaller();
    public sealed virtual XksProxyInvalidResponseException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual XksProxyInvalidResponseException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static XksProxyInvalidResponseExceptionUnmarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.XksProxyUriEndpointInUseExceptionUnmarshaller : object {
    private static XksProxyUriEndpointInUseExceptionUnmarshaller _instance;
    public static XksProxyUriEndpointInUseExceptionUnmarshaller Instance { get; }
    private static XksProxyUriEndpointInUseExceptionUnmarshaller();
    public sealed virtual XksProxyUriEndpointInUseException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual XksProxyUriEndpointInUseException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static XksProxyUriEndpointInUseExceptionUnmarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.XksProxyUriInUseExceptionUnmarshaller : object {
    private static XksProxyUriInUseExceptionUnmarshaller _instance;
    public static XksProxyUriInUseExceptionUnmarshaller Instance { get; }
    private static XksProxyUriInUseExceptionUnmarshaller();
    public sealed virtual XksProxyUriInUseException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual XksProxyUriInUseException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static XksProxyUriInUseExceptionUnmarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.XksProxyUriUnreachableExceptionUnmarshaller : object {
    private static XksProxyUriUnreachableExceptionUnmarshaller _instance;
    public static XksProxyUriUnreachableExceptionUnmarshaller Instance { get; }
    private static XksProxyUriUnreachableExceptionUnmarshaller();
    public sealed virtual XksProxyUriUnreachableException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual XksProxyUriUnreachableException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static XksProxyUriUnreachableExceptionUnmarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.XksProxyVpcEndpointServiceInUseExceptionUnmarshaller : object {
    private static XksProxyVpcEndpointServiceInUseExceptionUnmarshaller _instance;
    public static XksProxyVpcEndpointServiceInUseExceptionUnmarshaller Instance { get; }
    private static XksProxyVpcEndpointServiceInUseExceptionUnmarshaller();
    public sealed virtual XksProxyVpcEndpointServiceInUseException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual XksProxyVpcEndpointServiceInUseException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static XksProxyVpcEndpointServiceInUseExceptionUnmarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.XksProxyVpcEndpointServiceInvalidConfigurationExceptionUnmarshaller : object {
    private static XksProxyVpcEndpointServiceInvalidConfigurationExceptionUnmarshaller _instance;
    public static XksProxyVpcEndpointServiceInvalidConfigurationExceptionUnmarshaller Instance { get; }
    private static XksProxyVpcEndpointServiceInvalidConfigurationExceptionUnmarshaller();
    public sealed virtual XksProxyVpcEndpointServiceInvalidConfigurationException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual XksProxyVpcEndpointServiceInvalidConfigurationException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static XksProxyVpcEndpointServiceInvalidConfigurationExceptionUnmarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.Internal.MarshallTransformations.XksProxyVpcEndpointServiceNotFoundExceptionUnmarshaller : object {
    private static XksProxyVpcEndpointServiceNotFoundExceptionUnmarshaller _instance;
    public static XksProxyVpcEndpointServiceNotFoundExceptionUnmarshaller Instance { get; }
    private static XksProxyVpcEndpointServiceNotFoundExceptionUnmarshaller();
    public sealed virtual XksProxyVpcEndpointServiceNotFoundException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual XksProxyVpcEndpointServiceNotFoundException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static XksProxyVpcEndpointServiceNotFoundExceptionUnmarshaller get_Instance();
}
public class Amazon.KeyManagementService.Model.InvalidAliasNameException : AmazonKeyManagementServiceException {
    public InvalidAliasNameException(string message);
    public InvalidAliasNameException(string message, Exception innerException);
    public InvalidAliasNameException(Exception innerException);
    public InvalidAliasNameException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public InvalidAliasNameException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.KeyManagementService.Model.InvalidArnException : AmazonKeyManagementServiceException {
    public InvalidArnException(string message);
    public InvalidArnException(string message, Exception innerException);
    public InvalidArnException(Exception innerException);
    public InvalidArnException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public InvalidArnException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.KeyManagementService.Model.InvalidCiphertextException : AmazonKeyManagementServiceException {
    public InvalidCiphertextException(string message);
    public InvalidCiphertextException(string message, Exception innerException);
    public InvalidCiphertextException(Exception innerException);
    public InvalidCiphertextException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public InvalidCiphertextException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.KeyManagementService.Model.InvalidGrantIdException : AmazonKeyManagementServiceException {
    public InvalidGrantIdException(string message);
    public InvalidGrantIdException(string message, Exception innerException);
    public InvalidGrantIdException(Exception innerException);
    public InvalidGrantIdException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public InvalidGrantIdException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.KeyManagementService.Model.InvalidGrantTokenException : AmazonKeyManagementServiceException {
    public InvalidGrantTokenException(string message);
    public InvalidGrantTokenException(string message, Exception innerException);
    public InvalidGrantTokenException(Exception innerException);
    public InvalidGrantTokenException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public InvalidGrantTokenException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.KeyManagementService.Model.InvalidImportTokenException : AmazonKeyManagementServiceException {
    public InvalidImportTokenException(string message);
    public InvalidImportTokenException(string message, Exception innerException);
    public InvalidImportTokenException(Exception innerException);
    public InvalidImportTokenException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public InvalidImportTokenException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.KeyManagementService.Model.InvalidKeyUsageException : AmazonKeyManagementServiceException {
    public InvalidKeyUsageException(string message);
    public InvalidKeyUsageException(string message, Exception innerException);
    public InvalidKeyUsageException(Exception innerException);
    public InvalidKeyUsageException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public InvalidKeyUsageException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.KeyManagementService.Model.InvalidMarkerException : AmazonKeyManagementServiceException {
    public InvalidMarkerException(string message);
    public InvalidMarkerException(string message, Exception innerException);
    public InvalidMarkerException(Exception innerException);
    public InvalidMarkerException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public InvalidMarkerException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.KeyManagementService.Model.KeyListEntry : object {
    private string _keyArn;
    private string _keyId;
    [AWSPropertyAttribute]
public string KeyArn { get; public set; }
    [AWSPropertyAttribute]
public string KeyId { get; public set; }
    public string get_KeyArn();
    public void set_KeyArn(string value);
    internal bool IsSetKeyArn();
    public string get_KeyId();
    public void set_KeyId(string value);
    internal bool IsSetKeyId();
}
public class Amazon.KeyManagementService.Model.KeyManagementServicePaginatorFactory : object {
    private IAmazonKeyManagementService client;
    internal KeyManagementServicePaginatorFactory(IAmazonKeyManagementService client);
    public sealed virtual IDescribeCustomKeyStoresPaginator DescribeCustomKeyStores(DescribeCustomKeyStoresRequest request);
    public sealed virtual IListAliasesPaginator ListAliases(ListAliasesRequest request);
    public sealed virtual IListGrantsPaginator ListGrants(ListGrantsRequest request);
    public sealed virtual IListKeyPoliciesPaginator ListKeyPolicies(ListKeyPoliciesRequest request);
    public sealed virtual IListKeyRotationsPaginator ListKeyRotations(ListKeyRotationsRequest request);
    public sealed virtual IListKeysPaginator ListKeys(ListKeysRequest request);
    public sealed virtual IListResourceTagsPaginator ListResourceTags(ListResourceTagsRequest request);
    public sealed virtual IListRetirableGrantsPaginator ListRetirableGrants(ListRetirableGrantsRequest request);
}
public class Amazon.KeyManagementService.Model.KeyMetadata : object {
    private string _arn;
    private string _awsAccountId;
    private string _cloudHsmClusterId;
    private Nullable`1<DateTime> _creationDate;
    private CustomerMasterKeySpec _customerMasterKeySpec;
    private string _customKeyStoreId;
    private Nullable`1<DateTime> _deletionDate;
    private string _description;
    private Nullable`1<bool> _enabled;
    private List`1<string> _encryptionAlgorithms;
    private ExpirationModelType _expirationModel;
    private List`1<string> _keyAgreementAlgorithms;
    private string _keyId;
    private KeyManagerType _keyManager;
    private KeySpec _keySpec;
    private KeyState _keyState;
    private KeyUsageType _keyUsage;
    private List`1<string> _macAlgorithms;
    private Nullable`1<bool> _multiRegion;
    private MultiRegionConfiguration _multiRegionConfiguration;
    private OriginType _origin;
    private Nullable`1<int> _pendingDeletionWindowInDays;
    private List`1<string> _signingAlgorithms;
    private Nullable`1<DateTime> _validTo;
    private XksKeyConfigurationType _xksKeyConfiguration;
    [AWSPropertyAttribute]
public string Arn { get; public set; }
    public string AWSAccountId { get; public set; }
    [AWSPropertyAttribute]
public string CloudHsmClusterId { get; public set; }
    public Nullable`1<DateTime> CreationDate { get; public set; }
    [ObsoleteAttribute("This field has been deprecated. Instead, use the KeySpec field.")]
public CustomerMasterKeySpec CustomerMasterKeySpec { get; public set; }
    [AWSPropertyAttribute]
public string CustomKeyStoreId { get; public set; }
    public Nullable`1<DateTime> DeletionDate { get; public set; }
    [AWSPropertyAttribute]
public string Description { get; public set; }
    public Nullable`1<bool> Enabled { get; public set; }
    public List`1<string> EncryptionAlgorithms { get; public set; }
    public ExpirationModelType ExpirationModel { get; public set; }
    public List`1<string> KeyAgreementAlgorithms { get; public set; }
    [AWSPropertyAttribute]
public string KeyId { get; public set; }
    public KeyManagerType KeyManager { get; public set; }
    public KeySpec KeySpec { get; public set; }
    public KeyState KeyState { get; public set; }
    public KeyUsageType KeyUsage { get; public set; }
    public List`1<string> MacAlgorithms { get; public set; }
    public Nullable`1<bool> MultiRegion { get; public set; }
    public MultiRegionConfiguration MultiRegionConfiguration { get; public set; }
    public OriginType Origin { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> PendingDeletionWindowInDays { get; public set; }
    public List`1<string> SigningAlgorithms { get; public set; }
    public Nullable`1<DateTime> ValidTo { get; public set; }
    public XksKeyConfigurationType XksKeyConfiguration { get; public set; }
    public string get_Arn();
    public void set_Arn(string value);
    internal bool IsSetArn();
    public string get_AWSAccountId();
    public void set_AWSAccountId(string value);
    internal bool IsSetAWSAccountId();
    public string get_CloudHsmClusterId();
    public void set_CloudHsmClusterId(string value);
    internal bool IsSetCloudHsmClusterId();
    public Nullable`1<DateTime> get_CreationDate();
    public void set_CreationDate(Nullable`1<DateTime> value);
    internal bool IsSetCreationDate();
    public CustomerMasterKeySpec get_CustomerMasterKeySpec();
    public void set_CustomerMasterKeySpec(CustomerMasterKeySpec value);
    internal bool IsSetCustomerMasterKeySpec();
    public string get_CustomKeyStoreId();
    public void set_CustomKeyStoreId(string value);
    internal bool IsSetCustomKeyStoreId();
    public Nullable`1<DateTime> get_DeletionDate();
    public void set_DeletionDate(Nullable`1<DateTime> value);
    internal bool IsSetDeletionDate();
    public string get_Description();
    public void set_Description(string value);
    internal bool IsSetDescription();
    public Nullable`1<bool> get_Enabled();
    public void set_Enabled(Nullable`1<bool> value);
    internal bool IsSetEnabled();
    public List`1<string> get_EncryptionAlgorithms();
    public void set_EncryptionAlgorithms(List`1<string> value);
    internal bool IsSetEncryptionAlgorithms();
    public ExpirationModelType get_ExpirationModel();
    public void set_ExpirationModel(ExpirationModelType value);
    internal bool IsSetExpirationModel();
    public List`1<string> get_KeyAgreementAlgorithms();
    public void set_KeyAgreementAlgorithms(List`1<string> value);
    internal bool IsSetKeyAgreementAlgorithms();
    public string get_KeyId();
    public void set_KeyId(string value);
    internal bool IsSetKeyId();
    public KeyManagerType get_KeyManager();
    public void set_KeyManager(KeyManagerType value);
    internal bool IsSetKeyManager();
    public KeySpec get_KeySpec();
    public void set_KeySpec(KeySpec value);
    internal bool IsSetKeySpec();
    public KeyState get_KeyState();
    public void set_KeyState(KeyState value);
    internal bool IsSetKeyState();
    public KeyUsageType get_KeyUsage();
    public void set_KeyUsage(KeyUsageType value);
    internal bool IsSetKeyUsage();
    public List`1<string> get_MacAlgorithms();
    public void set_MacAlgorithms(List`1<string> value);
    internal bool IsSetMacAlgorithms();
    public Nullable`1<bool> get_MultiRegion();
    public void set_MultiRegion(Nullable`1<bool> value);
    internal bool IsSetMultiRegion();
    public MultiRegionConfiguration get_MultiRegionConfiguration();
    public void set_MultiRegionConfiguration(MultiRegionConfiguration value);
    internal bool IsSetMultiRegionConfiguration();
    public OriginType get_Origin();
    public void set_Origin(OriginType value);
    internal bool IsSetOrigin();
    public Nullable`1<int> get_PendingDeletionWindowInDays();
    public void set_PendingDeletionWindowInDays(Nullable`1<int> value);
    internal bool IsSetPendingDeletionWindowInDays();
    public List`1<string> get_SigningAlgorithms();
    public void set_SigningAlgorithms(List`1<string> value);
    internal bool IsSetSigningAlgorithms();
    public Nullable`1<DateTime> get_ValidTo();
    public void set_ValidTo(Nullable`1<DateTime> value);
    internal bool IsSetValidTo();
    public XksKeyConfigurationType get_XksKeyConfiguration();
    public void set_XksKeyConfiguration(XksKeyConfigurationType value);
    internal bool IsSetXksKeyConfiguration();
}
public class Amazon.KeyManagementService.Model.KeyUnavailableException : AmazonKeyManagementServiceException {
    public KeyUnavailableException(string message);
    public KeyUnavailableException(string message, Exception innerException);
    public KeyUnavailableException(Exception innerException);
    public KeyUnavailableException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public KeyUnavailableException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.KeyManagementService.Model.KMSInternalException : AmazonKeyManagementServiceException {
    public KMSInternalException(string message);
    public KMSInternalException(string message, Exception innerException);
    public KMSInternalException(Exception innerException);
    public KMSInternalException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public KMSInternalException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.KeyManagementService.Model.KMSInvalidMacException : AmazonKeyManagementServiceException {
    public KMSInvalidMacException(string message);
    public KMSInvalidMacException(string message, Exception innerException);
    public KMSInvalidMacException(Exception innerException);
    public KMSInvalidMacException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public KMSInvalidMacException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.KeyManagementService.Model.KMSInvalidSignatureException : AmazonKeyManagementServiceException {
    public KMSInvalidSignatureException(string message);
    public KMSInvalidSignatureException(string message, Exception innerException);
    public KMSInvalidSignatureException(Exception innerException);
    public KMSInvalidSignatureException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public KMSInvalidSignatureException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.KeyManagementService.Model.KMSInvalidStateException : AmazonKeyManagementServiceException {
    public KMSInvalidStateException(string message);
    public KMSInvalidStateException(string message, Exception innerException);
    public KMSInvalidStateException(Exception innerException);
    public KMSInvalidStateException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public KMSInvalidStateException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.KeyManagementService.Model.LimitExceededException : AmazonKeyManagementServiceException {
    public LimitExceededException(string message);
    public LimitExceededException(string message, Exception innerException);
    public LimitExceededException(Exception innerException);
    public LimitExceededException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public LimitExceededException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
internal class Amazon.KeyManagementService.Model.ListAliasesPaginator : object {
    private IAmazonKeyManagementService _client;
    private ListAliasesRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<ListAliasesResponse> Responses { get; }
    public IPaginatedEnumerable`1<AliasListEntry> Aliases { get; }
    internal ListAliasesPaginator(IAmazonKeyManagementService client, ListAliasesRequest request);
    public sealed virtual IPaginatedEnumerable`1<ListAliasesResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<AliasListEntry> get_Aliases();
    [AsyncIteratorStateMachineAttribute("Amazon.KeyManagementService.Model.ListAliasesPaginator/<Amazon-Runtime-IPaginator<Amazon-KeyManagementService-Model-ListAliasesResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<ListAliasesResponse> Amazon.Runtime.IPaginator<Amazon.KeyManagementService.Model.ListAliasesResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.KeyManagementService.Model.ListAliasesRequest : AmazonKeyManagementServiceRequest {
    private string _keyId;
    private Nullable`1<int> _limit;
    private string _marker;
    [AWSPropertyAttribute]
public string KeyId { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> Limit { get; public set; }
    [AWSPropertyAttribute]
public string Marker { get; public set; }
    public string get_KeyId();
    public void set_KeyId(string value);
    internal bool IsSetKeyId();
    public Nullable`1<int> get_Limit();
    public void set_Limit(Nullable`1<int> value);
    internal bool IsSetLimit();
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
}
public class Amazon.KeyManagementService.Model.ListAliasesResponse : AmazonWebServiceResponse {
    private List`1<AliasListEntry> _aliases;
    private string _nextMarker;
    private Nullable`1<bool> _truncated;
    public List`1<AliasListEntry> Aliases { get; public set; }
    [AWSPropertyAttribute]
public string NextMarker { get; public set; }
    public Nullable`1<bool> Truncated { get; public set; }
    public List`1<AliasListEntry> get_Aliases();
    public void set_Aliases(List`1<AliasListEntry> value);
    internal bool IsSetAliases();
    public string get_NextMarker();
    public void set_NextMarker(string value);
    internal bool IsSetNextMarker();
    public Nullable`1<bool> get_Truncated();
    public void set_Truncated(Nullable`1<bool> value);
    internal bool IsSetTruncated();
}
internal class Amazon.KeyManagementService.Model.ListGrantsPaginator : object {
    private IAmazonKeyManagementService _client;
    private ListGrantsRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<ListGrantsResponse> Responses { get; }
    public IPaginatedEnumerable`1<GrantListEntry> Grants { get; }
    internal ListGrantsPaginator(IAmazonKeyManagementService client, ListGrantsRequest request);
    public sealed virtual IPaginatedEnumerable`1<ListGrantsResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<GrantListEntry> get_Grants();
    [AsyncIteratorStateMachineAttribute("Amazon.KeyManagementService.Model.ListGrantsPaginator/<Amazon-Runtime-IPaginator<Amazon-KeyManagementService-Model-ListGrantsResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<ListGrantsResponse> Amazon.Runtime.IPaginator<Amazon.KeyManagementService.Model.ListGrantsResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.KeyManagementService.Model.ListGrantsRequest : AmazonKeyManagementServiceRequest {
    private string _granteePrincipal;
    private string _grantId;
    private string _keyId;
    private Nullable`1<int> _limit;
    private string _marker;
    [AWSPropertyAttribute]
public string GranteePrincipal { get; public set; }
    [AWSPropertyAttribute]
public string GrantId { get; public set; }
    [AWSPropertyAttribute]
public string KeyId { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> Limit { get; public set; }
    [AWSPropertyAttribute]
public string Marker { get; public set; }
    public string get_GranteePrincipal();
    public void set_GranteePrincipal(string value);
    internal bool IsSetGranteePrincipal();
    public string get_GrantId();
    public void set_GrantId(string value);
    internal bool IsSetGrantId();
    public string get_KeyId();
    public void set_KeyId(string value);
    internal bool IsSetKeyId();
    public Nullable`1<int> get_Limit();
    public void set_Limit(Nullable`1<int> value);
    internal bool IsSetLimit();
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
}
public class Amazon.KeyManagementService.Model.ListGrantsResponse : AmazonWebServiceResponse {
    private List`1<GrantListEntry> _grants;
    private string _nextMarker;
    private Nullable`1<bool> _truncated;
    public List`1<GrantListEntry> Grants { get; public set; }
    [AWSPropertyAttribute]
public string NextMarker { get; public set; }
    public Nullable`1<bool> Truncated { get; public set; }
    public List`1<GrantListEntry> get_Grants();
    public void set_Grants(List`1<GrantListEntry> value);
    internal bool IsSetGrants();
    public string get_NextMarker();
    public void set_NextMarker(string value);
    internal bool IsSetNextMarker();
    public Nullable`1<bool> get_Truncated();
    public void set_Truncated(Nullable`1<bool> value);
    internal bool IsSetTruncated();
}
internal class Amazon.KeyManagementService.Model.ListKeyPoliciesPaginator : object {
    private IAmazonKeyManagementService _client;
    private ListKeyPoliciesRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<ListKeyPoliciesResponse> Responses { get; }
    public IPaginatedEnumerable`1<string> PolicyNames { get; }
    internal ListKeyPoliciesPaginator(IAmazonKeyManagementService client, ListKeyPoliciesRequest request);
    public sealed virtual IPaginatedEnumerable`1<ListKeyPoliciesResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<string> get_PolicyNames();
    [AsyncIteratorStateMachineAttribute("Amazon.KeyManagementService.Model.ListKeyPoliciesPaginator/<Amazon-Runtime-IPaginator<Amazon-KeyManagementService-Model-ListKeyPoliciesResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<ListKeyPoliciesResponse> Amazon.Runtime.IPaginator<Amazon.KeyManagementService.Model.ListKeyPoliciesResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.KeyManagementService.Model.ListKeyPoliciesRequest : AmazonKeyManagementServiceRequest {
    private string _keyId;
    private Nullable`1<int> _limit;
    private string _marker;
    [AWSPropertyAttribute]
public string KeyId { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> Limit { get; public set; }
    [AWSPropertyAttribute]
public string Marker { get; public set; }
    public string get_KeyId();
    public void set_KeyId(string value);
    internal bool IsSetKeyId();
    public Nullable`1<int> get_Limit();
    public void set_Limit(Nullable`1<int> value);
    internal bool IsSetLimit();
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
}
public class Amazon.KeyManagementService.Model.ListKeyPoliciesResponse : AmazonWebServiceResponse {
    private string _nextMarker;
    private List`1<string> _policyNames;
    private Nullable`1<bool> _truncated;
    [AWSPropertyAttribute]
public string NextMarker { get; public set; }
    public List`1<string> PolicyNames { get; public set; }
    public Nullable`1<bool> Truncated { get; public set; }
    public string get_NextMarker();
    public void set_NextMarker(string value);
    internal bool IsSetNextMarker();
    public List`1<string> get_PolicyNames();
    public void set_PolicyNames(List`1<string> value);
    internal bool IsSetPolicyNames();
    public Nullable`1<bool> get_Truncated();
    public void set_Truncated(Nullable`1<bool> value);
    internal bool IsSetTruncated();
}
internal class Amazon.KeyManagementService.Model.ListKeyRotationsPaginator : object {
    private IAmazonKeyManagementService _client;
    private ListKeyRotationsRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<ListKeyRotationsResponse> Responses { get; }
    public IPaginatedEnumerable`1<RotationsListEntry> Rotations { get; }
    internal ListKeyRotationsPaginator(IAmazonKeyManagementService client, ListKeyRotationsRequest request);
    public sealed virtual IPaginatedEnumerable`1<ListKeyRotationsResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<RotationsListEntry> get_Rotations();
    [AsyncIteratorStateMachineAttribute("Amazon.KeyManagementService.Model.ListKeyRotationsPaginator/<Amazon-Runtime-IPaginator<Amazon-KeyManagementService-Model-ListKeyRotationsResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<ListKeyRotationsResponse> Amazon.Runtime.IPaginator<Amazon.KeyManagementService.Model.ListKeyRotationsResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.KeyManagementService.Model.ListKeyRotationsRequest : AmazonKeyManagementServiceRequest {
    private string _keyId;
    private Nullable`1<int> _limit;
    private string _marker;
    [AWSPropertyAttribute]
public string KeyId { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> Limit { get; public set; }
    [AWSPropertyAttribute]
public string Marker { get; public set; }
    public string get_KeyId();
    public void set_KeyId(string value);
    internal bool IsSetKeyId();
    public Nullable`1<int> get_Limit();
    public void set_Limit(Nullable`1<int> value);
    internal bool IsSetLimit();
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
}
public class Amazon.KeyManagementService.Model.ListKeyRotationsResponse : AmazonWebServiceResponse {
    private string _nextMarker;
    private List`1<RotationsListEntry> _rotations;
    private Nullable`1<bool> _truncated;
    [AWSPropertyAttribute]
public string NextMarker { get; public set; }
    public List`1<RotationsListEntry> Rotations { get; public set; }
    public Nullable`1<bool> Truncated { get; public set; }
    public string get_NextMarker();
    public void set_NextMarker(string value);
    internal bool IsSetNextMarker();
    public List`1<RotationsListEntry> get_Rotations();
    public void set_Rotations(List`1<RotationsListEntry> value);
    internal bool IsSetRotations();
    public Nullable`1<bool> get_Truncated();
    public void set_Truncated(Nullable`1<bool> value);
    internal bool IsSetTruncated();
}
internal class Amazon.KeyManagementService.Model.ListKeysPaginator : object {
    private IAmazonKeyManagementService _client;
    private ListKeysRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<ListKeysResponse> Responses { get; }
    public IPaginatedEnumerable`1<KeyListEntry> Keys { get; }
    internal ListKeysPaginator(IAmazonKeyManagementService client, ListKeysRequest request);
    public sealed virtual IPaginatedEnumerable`1<ListKeysResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<KeyListEntry> get_Keys();
    [AsyncIteratorStateMachineAttribute("Amazon.KeyManagementService.Model.ListKeysPaginator/<Amazon-Runtime-IPaginator<Amazon-KeyManagementService-Model-ListKeysResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<ListKeysResponse> Amazon.Runtime.IPaginator<Amazon.KeyManagementService.Model.ListKeysResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.KeyManagementService.Model.ListKeysRequest : AmazonKeyManagementServiceRequest {
    private Nullable`1<int> _limit;
    private string _marker;
    [AWSPropertyAttribute]
public Nullable`1<int> Limit { get; public set; }
    [AWSPropertyAttribute]
public string Marker { get; public set; }
    public Nullable`1<int> get_Limit();
    public void set_Limit(Nullable`1<int> value);
    internal bool IsSetLimit();
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
}
public class Amazon.KeyManagementService.Model.ListKeysResponse : AmazonWebServiceResponse {
    private List`1<KeyListEntry> _keys;
    private string _nextMarker;
    private Nullable`1<bool> _truncated;
    public List`1<KeyListEntry> Keys { get; public set; }
    [AWSPropertyAttribute]
public string NextMarker { get; public set; }
    public Nullable`1<bool> Truncated { get; public set; }
    public List`1<KeyListEntry> get_Keys();
    public void set_Keys(List`1<KeyListEntry> value);
    internal bool IsSetKeys();
    public string get_NextMarker();
    public void set_NextMarker(string value);
    internal bool IsSetNextMarker();
    public Nullable`1<bool> get_Truncated();
    public void set_Truncated(Nullable`1<bool> value);
    internal bool IsSetTruncated();
}
internal class Amazon.KeyManagementService.Model.ListResourceTagsPaginator : object {
    private IAmazonKeyManagementService _client;
    private ListResourceTagsRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<ListResourceTagsResponse> Responses { get; }
    public IPaginatedEnumerable`1<Tag> Tags { get; }
    internal ListResourceTagsPaginator(IAmazonKeyManagementService client, ListResourceTagsRequest request);
    public sealed virtual IPaginatedEnumerable`1<ListResourceTagsResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<Tag> get_Tags();
    [AsyncIteratorStateMachineAttribute("Amazon.KeyManagementService.Model.ListResourceTagsPaginator/<Amazon-Runtime-IPaginator<Amazon-KeyManagementService-Model-ListResourceTagsResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<ListResourceTagsResponse> Amazon.Runtime.IPaginator<Amazon.KeyManagementService.Model.ListResourceTagsResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.KeyManagementService.Model.ListResourceTagsRequest : AmazonKeyManagementServiceRequest {
    private string _keyId;
    private Nullable`1<int> _limit;
    private string _marker;
    [AWSPropertyAttribute]
public string KeyId { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> Limit { get; public set; }
    [AWSPropertyAttribute]
public string Marker { get; public set; }
    public string get_KeyId();
    public void set_KeyId(string value);
    internal bool IsSetKeyId();
    public Nullable`1<int> get_Limit();
    public void set_Limit(Nullable`1<int> value);
    internal bool IsSetLimit();
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
}
public class Amazon.KeyManagementService.Model.ListResourceTagsResponse : AmazonWebServiceResponse {
    private string _nextMarker;
    private List`1<Tag> _tags;
    private Nullable`1<bool> _truncated;
    [AWSPropertyAttribute]
public string NextMarker { get; public set; }
    public List`1<Tag> Tags { get; public set; }
    public Nullable`1<bool> Truncated { get; public set; }
    public string get_NextMarker();
    public void set_NextMarker(string value);
    internal bool IsSetNextMarker();
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
    public Nullable`1<bool> get_Truncated();
    public void set_Truncated(Nullable`1<bool> value);
    internal bool IsSetTruncated();
}
internal class Amazon.KeyManagementService.Model.ListRetirableGrantsPaginator : object {
    private IAmazonKeyManagementService _client;
    private ListRetirableGrantsRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<ListRetirableGrantsResponse> Responses { get; }
    public IPaginatedEnumerable`1<GrantListEntry> Grants { get; }
    internal ListRetirableGrantsPaginator(IAmazonKeyManagementService client, ListRetirableGrantsRequest request);
    public sealed virtual IPaginatedEnumerable`1<ListRetirableGrantsResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<GrantListEntry> get_Grants();
    [AsyncIteratorStateMachineAttribute("Amazon.KeyManagementService.Model.ListRetirableGrantsPaginator/<Amazon-Runtime-IPaginator<Amazon-KeyManagementService-Model-ListRetirableGrantsResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<ListRetirableGrantsResponse> Amazon.Runtime.IPaginator<Amazon.KeyManagementService.Model.ListRetirableGrantsResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.KeyManagementService.Model.ListRetirableGrantsRequest : AmazonKeyManagementServiceRequest {
    private Nullable`1<int> _limit;
    private string _marker;
    private string _retiringPrincipal;
    [AWSPropertyAttribute]
public Nullable`1<int> Limit { get; public set; }
    [AWSPropertyAttribute]
public string Marker { get; public set; }
    [AWSPropertyAttribute]
public string RetiringPrincipal { get; public set; }
    public Nullable`1<int> get_Limit();
    public void set_Limit(Nullable`1<int> value);
    internal bool IsSetLimit();
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public string get_RetiringPrincipal();
    public void set_RetiringPrincipal(string value);
    internal bool IsSetRetiringPrincipal();
}
public class Amazon.KeyManagementService.Model.ListRetirableGrantsResponse : AmazonWebServiceResponse {
    private List`1<GrantListEntry> _grants;
    private string _nextMarker;
    private Nullable`1<bool> _truncated;
    public List`1<GrantListEntry> Grants { get; public set; }
    [AWSPropertyAttribute]
public string NextMarker { get; public set; }
    public Nullable`1<bool> Truncated { get; public set; }
    public List`1<GrantListEntry> get_Grants();
    public void set_Grants(List`1<GrantListEntry> value);
    internal bool IsSetGrants();
    public string get_NextMarker();
    public void set_NextMarker(string value);
    internal bool IsSetNextMarker();
    public Nullable`1<bool> get_Truncated();
    public void set_Truncated(Nullable`1<bool> value);
    internal bool IsSetTruncated();
}
public class Amazon.KeyManagementService.Model.MalformedPolicyDocumentException : AmazonKeyManagementServiceException {
    public MalformedPolicyDocumentException(string message);
    public MalformedPolicyDocumentException(string message, Exception innerException);
    public MalformedPolicyDocumentException(Exception innerException);
    public MalformedPolicyDocumentException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public MalformedPolicyDocumentException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.KeyManagementService.Model.MultiRegionConfiguration : object {
    private MultiRegionKeyType _multiRegionKeyType;
    private MultiRegionKey _primaryKey;
    private List`1<MultiRegionKey> _replicaKeys;
    public MultiRegionKeyType MultiRegionKeyType { get; public set; }
    public MultiRegionKey PrimaryKey { get; public set; }
    public List`1<MultiRegionKey> ReplicaKeys { get; public set; }
    public MultiRegionKeyType get_MultiRegionKeyType();
    public void set_MultiRegionKeyType(MultiRegionKeyType value);
    internal bool IsSetMultiRegionKeyType();
    public MultiRegionKey get_PrimaryKey();
    public void set_PrimaryKey(MultiRegionKey value);
    internal bool IsSetPrimaryKey();
    public List`1<MultiRegionKey> get_ReplicaKeys();
    public void set_ReplicaKeys(List`1<MultiRegionKey> value);
    internal bool IsSetReplicaKeys();
}
public class Amazon.KeyManagementService.Model.MultiRegionKey : object {
    private string _arn;
    private string _region;
    [AWSPropertyAttribute]
public string Arn { get; public set; }
    [AWSPropertyAttribute]
public string Region { get; public set; }
    public string get_Arn();
    public void set_Arn(string value);
    internal bool IsSetArn();
    public string get_Region();
    public void set_Region(string value);
    internal bool IsSetRegion();
}
public class Amazon.KeyManagementService.Model.NotFoundException : AmazonKeyManagementServiceException {
    public NotFoundException(string message);
    public NotFoundException(string message, Exception innerException);
    public NotFoundException(Exception innerException);
    public NotFoundException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public NotFoundException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.KeyManagementService.Model.PutKeyPolicyRequest : AmazonKeyManagementServiceRequest {
    private Nullable`1<bool> _bypassPolicyLockoutSafetyCheck;
    private string _keyId;
    private string _policy;
    private string _policyName;
    public Nullable`1<bool> BypassPolicyLockoutSafetyCheck { get; public set; }
    [AWSPropertyAttribute]
public string KeyId { get; public set; }
    [AWSPropertyAttribute]
public string Policy { get; public set; }
    [AWSPropertyAttribute]
public string PolicyName { get; public set; }
    public Nullable`1<bool> get_BypassPolicyLockoutSafetyCheck();
    public void set_BypassPolicyLockoutSafetyCheck(Nullable`1<bool> value);
    internal bool IsSetBypassPolicyLockoutSafetyCheck();
    public string get_KeyId();
    public void set_KeyId(string value);
    internal bool IsSetKeyId();
    public string get_Policy();
    public void set_Policy(string value);
    internal bool IsSetPolicy();
    public string get_PolicyName();
    public void set_PolicyName(string value);
    internal bool IsSetPolicyName();
}
public class Amazon.KeyManagementService.Model.PutKeyPolicyResponse : AmazonWebServiceResponse {
}
public class Amazon.KeyManagementService.Model.RecipientInfo : object {
    private MemoryStream _attestationDocument;
    private KeyEncryptionMechanism _keyEncryptionAlgorithm;
    [AWSPropertyAttribute]
public MemoryStream AttestationDocument { get; public set; }
    public KeyEncryptionMechanism KeyEncryptionAlgorithm { get; public set; }
    public MemoryStream get_AttestationDocument();
    public void set_AttestationDocument(MemoryStream value);
    internal bool IsSetAttestationDocument();
    public KeyEncryptionMechanism get_KeyEncryptionAlgorithm();
    public void set_KeyEncryptionAlgorithm(KeyEncryptionMechanism value);
    internal bool IsSetKeyEncryptionAlgorithm();
}
public class Amazon.KeyManagementService.Model.ReEncryptRequest : AmazonKeyManagementServiceRequest {
    private MemoryStream _ciphertextBlob;
    private EncryptionAlgorithmSpec _destinationEncryptionAlgorithm;
    private Dictionary`2<string, string> _destinationEncryptionContext;
    private string _destinationKeyId;
    private Nullable`1<bool> _dryRun;
    private List`1<string> _grantTokens;
    private EncryptionAlgorithmSpec _sourceEncryptionAlgorithm;
    private Dictionary`2<string, string> _sourceEncryptionContext;
    private string _sourceKeyId;
    [AWSPropertyAttribute]
public MemoryStream CiphertextBlob { get; public set; }
    public EncryptionAlgorithmSpec DestinationEncryptionAlgorithm { get; public set; }
    public Dictionary`2<string, string> DestinationEncryptionContext { get; public set; }
    [AWSPropertyAttribute]
public string DestinationKeyId { get; public set; }
    public Nullable`1<bool> DryRun { get; public set; }
    [AWSPropertyAttribute]
public List`1<string> GrantTokens { get; public set; }
    public EncryptionAlgorithmSpec SourceEncryptionAlgorithm { get; public set; }
    public Dictionary`2<string, string> SourceEncryptionContext { get; public set; }
    [AWSPropertyAttribute]
public string SourceKeyId { get; public set; }
    public MemoryStream get_CiphertextBlob();
    public void set_CiphertextBlob(MemoryStream value);
    internal bool IsSetCiphertextBlob();
    public EncryptionAlgorithmSpec get_DestinationEncryptionAlgorithm();
    public void set_DestinationEncryptionAlgorithm(EncryptionAlgorithmSpec value);
    internal bool IsSetDestinationEncryptionAlgorithm();
    public Dictionary`2<string, string> get_DestinationEncryptionContext();
    public void set_DestinationEncryptionContext(Dictionary`2<string, string> value);
    internal bool IsSetDestinationEncryptionContext();
    public string get_DestinationKeyId();
    public void set_DestinationKeyId(string value);
    internal bool IsSetDestinationKeyId();
    public Nullable`1<bool> get_DryRun();
    public void set_DryRun(Nullable`1<bool> value);
    internal bool IsSetDryRun();
    public List`1<string> get_GrantTokens();
    public void set_GrantTokens(List`1<string> value);
    internal bool IsSetGrantTokens();
    public EncryptionAlgorithmSpec get_SourceEncryptionAlgorithm();
    public void set_SourceEncryptionAlgorithm(EncryptionAlgorithmSpec value);
    internal bool IsSetSourceEncryptionAlgorithm();
    public Dictionary`2<string, string> get_SourceEncryptionContext();
    public void set_SourceEncryptionContext(Dictionary`2<string, string> value);
    internal bool IsSetSourceEncryptionContext();
    public string get_SourceKeyId();
    public void set_SourceKeyId(string value);
    internal bool IsSetSourceKeyId();
}
public class Amazon.KeyManagementService.Model.ReEncryptResponse : AmazonWebServiceResponse {
    private MemoryStream _ciphertextBlob;
    private EncryptionAlgorithmSpec _destinationEncryptionAlgorithm;
    private string _keyId;
    private EncryptionAlgorithmSpec _sourceEncryptionAlgorithm;
    private string _sourceKeyId;
    [AWSPropertyAttribute]
public MemoryStream CiphertextBlob { get; public set; }
    public EncryptionAlgorithmSpec DestinationEncryptionAlgorithm { get; public set; }
    [AWSPropertyAttribute]
public string KeyId { get; public set; }
    public EncryptionAlgorithmSpec SourceEncryptionAlgorithm { get; public set; }
    [AWSPropertyAttribute]
public string SourceKeyId { get; public set; }
    public MemoryStream get_CiphertextBlob();
    public void set_CiphertextBlob(MemoryStream value);
    internal bool IsSetCiphertextBlob();
    public EncryptionAlgorithmSpec get_DestinationEncryptionAlgorithm();
    public void set_DestinationEncryptionAlgorithm(EncryptionAlgorithmSpec value);
    internal bool IsSetDestinationEncryptionAlgorithm();
    public string get_KeyId();
    public void set_KeyId(string value);
    internal bool IsSetKeyId();
    public EncryptionAlgorithmSpec get_SourceEncryptionAlgorithm();
    public void set_SourceEncryptionAlgorithm(EncryptionAlgorithmSpec value);
    internal bool IsSetSourceEncryptionAlgorithm();
    public string get_SourceKeyId();
    public void set_SourceKeyId(string value);
    internal bool IsSetSourceKeyId();
}
public class Amazon.KeyManagementService.Model.ReplicateKeyRequest : AmazonKeyManagementServiceRequest {
    private Nullable`1<bool> _bypassPolicyLockoutSafetyCheck;
    private string _description;
    private string _keyId;
    private string _policy;
    private string _replicaRegion;
    private List`1<Tag> _tags;
    public Nullable`1<bool> BypassPolicyLockoutSafetyCheck { get; public set; }
    [AWSPropertyAttribute]
public string Description { get; public set; }
    [AWSPropertyAttribute]
public string KeyId { get; public set; }
    [AWSPropertyAttribute]
public string Policy { get; public set; }
    [AWSPropertyAttribute]
public string ReplicaRegion { get; public set; }
    public List`1<Tag> Tags { get; public set; }
    public Nullable`1<bool> get_BypassPolicyLockoutSafetyCheck();
    public void set_BypassPolicyLockoutSafetyCheck(Nullable`1<bool> value);
    internal bool IsSetBypassPolicyLockoutSafetyCheck();
    public string get_Description();
    public void set_Description(string value);
    internal bool IsSetDescription();
    public string get_KeyId();
    public void set_KeyId(string value);
    internal bool IsSetKeyId();
    public string get_Policy();
    public void set_Policy(string value);
    internal bool IsSetPolicy();
    public string get_ReplicaRegion();
    public void set_ReplicaRegion(string value);
    internal bool IsSetReplicaRegion();
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
}
public class Amazon.KeyManagementService.Model.ReplicateKeyResponse : AmazonWebServiceResponse {
    private KeyMetadata _replicaKeyMetadata;
    private string _replicaPolicy;
    private List`1<Tag> _replicaTags;
    public KeyMetadata ReplicaKeyMetadata { get; public set; }
    [AWSPropertyAttribute]
public string ReplicaPolicy { get; public set; }
    public List`1<Tag> ReplicaTags { get; public set; }
    public KeyMetadata get_ReplicaKeyMetadata();
    public void set_ReplicaKeyMetadata(KeyMetadata value);
    internal bool IsSetReplicaKeyMetadata();
    public string get_ReplicaPolicy();
    public void set_ReplicaPolicy(string value);
    internal bool IsSetReplicaPolicy();
    public List`1<Tag> get_ReplicaTags();
    public void set_ReplicaTags(List`1<Tag> value);
    internal bool IsSetReplicaTags();
}
public class Amazon.KeyManagementService.Model.RetireGrantRequest : AmazonKeyManagementServiceRequest {
    private Nullable`1<bool> _dryRun;
    private string _grantId;
    private string _grantToken;
    private string _keyId;
    public Nullable`1<bool> DryRun { get; public set; }
    [AWSPropertyAttribute]
public string GrantId { get; public set; }
    [AWSPropertyAttribute]
public string GrantToken { get; public set; }
    [AWSPropertyAttribute]
public string KeyId { get; public set; }
    public Nullable`1<bool> get_DryRun();
    public void set_DryRun(Nullable`1<bool> value);
    internal bool IsSetDryRun();
    public string get_GrantId();
    public void set_GrantId(string value);
    internal bool IsSetGrantId();
    public string get_GrantToken();
    public void set_GrantToken(string value);
    internal bool IsSetGrantToken();
    public string get_KeyId();
    public void set_KeyId(string value);
    internal bool IsSetKeyId();
}
public class Amazon.KeyManagementService.Model.RetireGrantResponse : AmazonWebServiceResponse {
}
public class Amazon.KeyManagementService.Model.RevokeGrantRequest : AmazonKeyManagementServiceRequest {
    private Nullable`1<bool> _dryRun;
    private string _grantId;
    private string _keyId;
    public Nullable`1<bool> DryRun { get; public set; }
    [AWSPropertyAttribute]
public string GrantId { get; public set; }
    [AWSPropertyAttribute]
public string KeyId { get; public set; }
    public Nullable`1<bool> get_DryRun();
    public void set_DryRun(Nullable`1<bool> value);
    internal bool IsSetDryRun();
    public string get_GrantId();
    public void set_GrantId(string value);
    internal bool IsSetGrantId();
    public string get_KeyId();
    public void set_KeyId(string value);
    internal bool IsSetKeyId();
}
public class Amazon.KeyManagementService.Model.RevokeGrantResponse : AmazonWebServiceResponse {
}
public class Amazon.KeyManagementService.Model.RotateKeyOnDemandRequest : AmazonKeyManagementServiceRequest {
    private string _keyId;
    [AWSPropertyAttribute]
public string KeyId { get; public set; }
    public string get_KeyId();
    public void set_KeyId(string value);
    internal bool IsSetKeyId();
}
public class Amazon.KeyManagementService.Model.RotateKeyOnDemandResponse : AmazonWebServiceResponse {
    private string _keyId;
    [AWSPropertyAttribute]
public string KeyId { get; public set; }
    public string get_KeyId();
    public void set_KeyId(string value);
    internal bool IsSetKeyId();
}
public class Amazon.KeyManagementService.Model.RotationsListEntry : object {
    private string _keyId;
    private Nullable`1<DateTime> _rotationDate;
    private RotationType _rotationType;
    [AWSPropertyAttribute]
public string KeyId { get; public set; }
    public Nullable`1<DateTime> RotationDate { get; public set; }
    public RotationType RotationType { get; public set; }
    public string get_KeyId();
    public void set_KeyId(string value);
    internal bool IsSetKeyId();
    public Nullable`1<DateTime> get_RotationDate();
    public void set_RotationDate(Nullable`1<DateTime> value);
    internal bool IsSetRotationDate();
    public RotationType get_RotationType();
    public void set_RotationType(RotationType value);
    internal bool IsSetRotationType();
}
public class Amazon.KeyManagementService.Model.ScheduleKeyDeletionRequest : AmazonKeyManagementServiceRequest {
    private string _keyId;
    private Nullable`1<int> _pendingWindowInDays;
    [AWSPropertyAttribute]
public string KeyId { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> PendingWindowInDays { get; public set; }
    public string get_KeyId();
    public void set_KeyId(string value);
    internal bool IsSetKeyId();
    public Nullable`1<int> get_PendingWindowInDays();
    public void set_PendingWindowInDays(Nullable`1<int> value);
    internal bool IsSetPendingWindowInDays();
}
public class Amazon.KeyManagementService.Model.ScheduleKeyDeletionResponse : AmazonWebServiceResponse {
    private Nullable`1<DateTime> _deletionDate;
    private string _keyId;
    private KeyState _keyState;
    private Nullable`1<int> _pendingWindowInDays;
    public Nullable`1<DateTime> DeletionDate { get; public set; }
    [AWSPropertyAttribute]
public string KeyId { get; public set; }
    public KeyState KeyState { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> PendingWindowInDays { get; public set; }
    public Nullable`1<DateTime> get_DeletionDate();
    public void set_DeletionDate(Nullable`1<DateTime> value);
    internal bool IsSetDeletionDate();
    public string get_KeyId();
    public void set_KeyId(string value);
    internal bool IsSetKeyId();
    public KeyState get_KeyState();
    public void set_KeyState(KeyState value);
    internal bool IsSetKeyState();
    public Nullable`1<int> get_PendingWindowInDays();
    public void set_PendingWindowInDays(Nullable`1<int> value);
    internal bool IsSetPendingWindowInDays();
}
public class Amazon.KeyManagementService.Model.SignRequest : AmazonKeyManagementServiceRequest {
    private Nullable`1<bool> _dryRun;
    private List`1<string> _grantTokens;
    private string _keyId;
    private MemoryStream _message;
    private MessageType _messageType;
    private SigningAlgorithmSpec _signingAlgorithm;
    public Nullable`1<bool> DryRun { get; public set; }
    [AWSPropertyAttribute]
public List`1<string> GrantTokens { get; public set; }
    [AWSPropertyAttribute]
public string KeyId { get; public set; }
    [AWSPropertyAttribute]
public MemoryStream Message { get; public set; }
    public MessageType MessageType { get; public set; }
    [AWSPropertyAttribute]
public SigningAlgorithmSpec SigningAlgorithm { get; public set; }
    public Nullable`1<bool> get_DryRun();
    public void set_DryRun(Nullable`1<bool> value);
    internal bool IsSetDryRun();
    public List`1<string> get_GrantTokens();
    public void set_GrantTokens(List`1<string> value);
    internal bool IsSetGrantTokens();
    public string get_KeyId();
    public void set_KeyId(string value);
    internal bool IsSetKeyId();
    public MemoryStream get_Message();
    public void set_Message(MemoryStream value);
    internal bool IsSetMessage();
    public MessageType get_MessageType();
    public void set_MessageType(MessageType value);
    internal bool IsSetMessageType();
    public SigningAlgorithmSpec get_SigningAlgorithm();
    public void set_SigningAlgorithm(SigningAlgorithmSpec value);
    internal bool IsSetSigningAlgorithm();
}
public class Amazon.KeyManagementService.Model.SignResponse : AmazonWebServiceResponse {
    private string _keyId;
    private MemoryStream _signature;
    private SigningAlgorithmSpec _signingAlgorithm;
    [AWSPropertyAttribute]
public string KeyId { get; public set; }
    [AWSPropertyAttribute]
public MemoryStream Signature { get; public set; }
    public SigningAlgorithmSpec SigningAlgorithm { get; public set; }
    public string get_KeyId();
    public void set_KeyId(string value);
    internal bool IsSetKeyId();
    public MemoryStream get_Signature();
    public void set_Signature(MemoryStream value);
    internal bool IsSetSignature();
    public SigningAlgorithmSpec get_SigningAlgorithm();
    public void set_SigningAlgorithm(SigningAlgorithmSpec value);
    internal bool IsSetSigningAlgorithm();
}
public class Amazon.KeyManagementService.Model.Tag : object {
    private string _tagKey;
    private string _tagValue;
    [AWSPropertyAttribute]
public string TagKey { get; public set; }
    [AWSPropertyAttribute]
public string TagValue { get; public set; }
    public string get_TagKey();
    public void set_TagKey(string value);
    internal bool IsSetTagKey();
    public string get_TagValue();
    public void set_TagValue(string value);
    internal bool IsSetTagValue();
}
public class Amazon.KeyManagementService.Model.TagException : AmazonKeyManagementServiceException {
    public TagException(string message);
    public TagException(string message, Exception innerException);
    public TagException(Exception innerException);
    public TagException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public TagException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.KeyManagementService.Model.TagResourceRequest : AmazonKeyManagementServiceRequest {
    private string _keyId;
    private List`1<Tag> _tags;
    [AWSPropertyAttribute]
public string KeyId { get; public set; }
    [AWSPropertyAttribute]
public List`1<Tag> Tags { get; public set; }
    public string get_KeyId();
    public void set_KeyId(string value);
    internal bool IsSetKeyId();
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
}
public class Amazon.KeyManagementService.Model.TagResourceResponse : AmazonWebServiceResponse {
}
public class Amazon.KeyManagementService.Model.UnsupportedOperationException : AmazonKeyManagementServiceException {
    public UnsupportedOperationException(string message);
    public UnsupportedOperationException(string message, Exception innerException);
    public UnsupportedOperationException(Exception innerException);
    public UnsupportedOperationException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public UnsupportedOperationException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.KeyManagementService.Model.UntagResourceRequest : AmazonKeyManagementServiceRequest {
    private string _keyId;
    private List`1<string> _tagKeys;
    [AWSPropertyAttribute]
public string KeyId { get; public set; }
    [AWSPropertyAttribute]
public List`1<string> TagKeys { get; public set; }
    public string get_KeyId();
    public void set_KeyId(string value);
    internal bool IsSetKeyId();
    public List`1<string> get_TagKeys();
    public void set_TagKeys(List`1<string> value);
    internal bool IsSetTagKeys();
}
public class Amazon.KeyManagementService.Model.UntagResourceResponse : AmazonWebServiceResponse {
}
public class Amazon.KeyManagementService.Model.UpdateAliasRequest : AmazonKeyManagementServiceRequest {
    private string _aliasName;
    private string _targetKeyId;
    [AWSPropertyAttribute]
public string AliasName { get; public set; }
    [AWSPropertyAttribute]
public string TargetKeyId { get; public set; }
    public string get_AliasName();
    public void set_AliasName(string value);
    internal bool IsSetAliasName();
    public string get_TargetKeyId();
    public void set_TargetKeyId(string value);
    internal bool IsSetTargetKeyId();
}
public class Amazon.KeyManagementService.Model.UpdateAliasResponse : AmazonWebServiceResponse {
}
public class Amazon.KeyManagementService.Model.UpdateCustomKeyStoreRequest : AmazonKeyManagementServiceRequest {
    private string _cloudHsmClusterId;
    private string _customKeyStoreId;
    private string _keyStorePassword;
    private string _newCustomKeyStoreName;
    private XksProxyAuthenticationCredentialType _xksProxyAuthenticationCredential;
    private XksProxyConnectivityType _xksProxyConnectivity;
    private string _xksProxyUriEndpoint;
    private string _xksProxyUriPath;
    private string _xksProxyVpcEndpointServiceName;
    [AWSPropertyAttribute]
public string CloudHsmClusterId { get; public set; }
    [AWSPropertyAttribute]
public string CustomKeyStoreId { get; public set; }
    [AWSPropertyAttribute]
public string KeyStorePassword { get; public set; }
    [AWSPropertyAttribute]
public string NewCustomKeyStoreName { get; public set; }
    public XksProxyAuthenticationCredentialType XksProxyAuthenticationCredential { get; public set; }
    public XksProxyConnectivityType XksProxyConnectivity { get; public set; }
    [AWSPropertyAttribute]
public string XksProxyUriEndpoint { get; public set; }
    [AWSPropertyAttribute]
public string XksProxyUriPath { get; public set; }
    [AWSPropertyAttribute]
public string XksProxyVpcEndpointServiceName { get; public set; }
    public string get_CloudHsmClusterId();
    public void set_CloudHsmClusterId(string value);
    internal bool IsSetCloudHsmClusterId();
    public string get_CustomKeyStoreId();
    public void set_CustomKeyStoreId(string value);
    internal bool IsSetCustomKeyStoreId();
    public string get_KeyStorePassword();
    public void set_KeyStorePassword(string value);
    internal bool IsSetKeyStorePassword();
    public string get_NewCustomKeyStoreName();
    public void set_NewCustomKeyStoreName(string value);
    internal bool IsSetNewCustomKeyStoreName();
    public XksProxyAuthenticationCredentialType get_XksProxyAuthenticationCredential();
    public void set_XksProxyAuthenticationCredential(XksProxyAuthenticationCredentialType value);
    internal bool IsSetXksProxyAuthenticationCredential();
    public XksProxyConnectivityType get_XksProxyConnectivity();
    public void set_XksProxyConnectivity(XksProxyConnectivityType value);
    internal bool IsSetXksProxyConnectivity();
    public string get_XksProxyUriEndpoint();
    public void set_XksProxyUriEndpoint(string value);
    internal bool IsSetXksProxyUriEndpoint();
    public string get_XksProxyUriPath();
    public void set_XksProxyUriPath(string value);
    internal bool IsSetXksProxyUriPath();
    public string get_XksProxyVpcEndpointServiceName();
    public void set_XksProxyVpcEndpointServiceName(string value);
    internal bool IsSetXksProxyVpcEndpointServiceName();
}
public class Amazon.KeyManagementService.Model.UpdateCustomKeyStoreResponse : AmazonWebServiceResponse {
}
public class Amazon.KeyManagementService.Model.UpdateKeyDescriptionRequest : AmazonKeyManagementServiceRequest {
    private string _description;
    private string _keyId;
    [AWSPropertyAttribute]
public string Description { get; public set; }
    [AWSPropertyAttribute]
public string KeyId { get; public set; }
    public string get_Description();
    public void set_Description(string value);
    internal bool IsSetDescription();
    public string get_KeyId();
    public void set_KeyId(string value);
    internal bool IsSetKeyId();
}
public class Amazon.KeyManagementService.Model.UpdateKeyDescriptionResponse : AmazonWebServiceResponse {
}
public class Amazon.KeyManagementService.Model.UpdatePrimaryRegionRequest : AmazonKeyManagementServiceRequest {
    private string _keyId;
    private string _primaryRegion;
    [AWSPropertyAttribute]
public string KeyId { get; public set; }
    [AWSPropertyAttribute]
public string PrimaryRegion { get; public set; }
    public string get_KeyId();
    public void set_KeyId(string value);
    internal bool IsSetKeyId();
    public string get_PrimaryRegion();
    public void set_PrimaryRegion(string value);
    internal bool IsSetPrimaryRegion();
}
public class Amazon.KeyManagementService.Model.UpdatePrimaryRegionResponse : AmazonWebServiceResponse {
}
public class Amazon.KeyManagementService.Model.VerifyMacRequest : AmazonKeyManagementServiceRequest {
    private Nullable`1<bool> _dryRun;
    private List`1<string> _grantTokens;
    private string _keyId;
    private MemoryStream _mac;
    private MacAlgorithmSpec _macAlgorithm;
    private MemoryStream _message;
    public Nullable`1<bool> DryRun { get; public set; }
    [AWSPropertyAttribute]
public List`1<string> GrantTokens { get; public set; }
    [AWSPropertyAttribute]
public string KeyId { get; public set; }
    [AWSPropertyAttribute]
public MemoryStream Mac { get; public set; }
    [AWSPropertyAttribute]
public MacAlgorithmSpec MacAlgorithm { get; public set; }
    [AWSPropertyAttribute]
public MemoryStream Message { get; public set; }
    public Nullable`1<bool> get_DryRun();
    public void set_DryRun(Nullable`1<bool> value);
    internal bool IsSetDryRun();
    public List`1<string> get_GrantTokens();
    public void set_GrantTokens(List`1<string> value);
    internal bool IsSetGrantTokens();
    public string get_KeyId();
    public void set_KeyId(string value);
    internal bool IsSetKeyId();
    public MemoryStream get_Mac();
    public void set_Mac(MemoryStream value);
    internal bool IsSetMac();
    public MacAlgorithmSpec get_MacAlgorithm();
    public void set_MacAlgorithm(MacAlgorithmSpec value);
    internal bool IsSetMacAlgorithm();
    public MemoryStream get_Message();
    public void set_Message(MemoryStream value);
    internal bool IsSetMessage();
}
public class Amazon.KeyManagementService.Model.VerifyMacResponse : AmazonWebServiceResponse {
    private string _keyId;
    private MacAlgorithmSpec _macAlgorithm;
    private Nullable`1<bool> _macValid;
    [AWSPropertyAttribute]
public string KeyId { get; public set; }
    public MacAlgorithmSpec MacAlgorithm { get; public set; }
    public Nullable`1<bool> MacValid { get; public set; }
    public string get_KeyId();
    public void set_KeyId(string value);
    internal bool IsSetKeyId();
    public MacAlgorithmSpec get_MacAlgorithm();
    public void set_MacAlgorithm(MacAlgorithmSpec value);
    internal bool IsSetMacAlgorithm();
    public Nullable`1<bool> get_MacValid();
    public void set_MacValid(Nullable`1<bool> value);
    internal bool IsSetMacValid();
}
public class Amazon.KeyManagementService.Model.VerifyRequest : AmazonKeyManagementServiceRequest {
    private Nullable`1<bool> _dryRun;
    private List`1<string> _grantTokens;
    private string _keyId;
    private MemoryStream _message;
    private MessageType _messageType;
    private MemoryStream _signature;
    private SigningAlgorithmSpec _signingAlgorithm;
    public Nullable`1<bool> DryRun { get; public set; }
    [AWSPropertyAttribute]
public List`1<string> GrantTokens { get; public set; }
    [AWSPropertyAttribute]
public string KeyId { get; public set; }
    [AWSPropertyAttribute]
public MemoryStream Message { get; public set; }
    public MessageType MessageType { get; public set; }
    [AWSPropertyAttribute]
public MemoryStream Signature { get; public set; }
    [AWSPropertyAttribute]
public SigningAlgorithmSpec SigningAlgorithm { get; public set; }
    public Nullable`1<bool> get_DryRun();
    public void set_DryRun(Nullable`1<bool> value);
    internal bool IsSetDryRun();
    public List`1<string> get_GrantTokens();
    public void set_GrantTokens(List`1<string> value);
    internal bool IsSetGrantTokens();
    public string get_KeyId();
    public void set_KeyId(string value);
    internal bool IsSetKeyId();
    public MemoryStream get_Message();
    public void set_Message(MemoryStream value);
    internal bool IsSetMessage();
    public MessageType get_MessageType();
    public void set_MessageType(MessageType value);
    internal bool IsSetMessageType();
    public MemoryStream get_Signature();
    public void set_Signature(MemoryStream value);
    internal bool IsSetSignature();
    public SigningAlgorithmSpec get_SigningAlgorithm();
    public void set_SigningAlgorithm(SigningAlgorithmSpec value);
    internal bool IsSetSigningAlgorithm();
}
public class Amazon.KeyManagementService.Model.VerifyResponse : AmazonWebServiceResponse {
    private string _keyId;
    private Nullable`1<bool> _signatureValid;
    private SigningAlgorithmSpec _signingAlgorithm;
    [AWSPropertyAttribute]
public string KeyId { get; public set; }
    public Nullable`1<bool> SignatureValid { get; public set; }
    public SigningAlgorithmSpec SigningAlgorithm { get; public set; }
    public string get_KeyId();
    public void set_KeyId(string value);
    internal bool IsSetKeyId();
    public Nullable`1<bool> get_SignatureValid();
    public void set_SignatureValid(Nullable`1<bool> value);
    internal bool IsSetSignatureValid();
    public SigningAlgorithmSpec get_SigningAlgorithm();
    public void set_SigningAlgorithm(SigningAlgorithmSpec value);
    internal bool IsSetSigningAlgorithm();
}
public class Amazon.KeyManagementService.Model.XksKeyAlreadyInUseException : AmazonKeyManagementServiceException {
    public XksKeyAlreadyInUseException(string message);
    public XksKeyAlreadyInUseException(string message, Exception innerException);
    public XksKeyAlreadyInUseException(Exception innerException);
    public XksKeyAlreadyInUseException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public XksKeyAlreadyInUseException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.KeyManagementService.Model.XksKeyConfigurationType : object {
    private string _id;
    [AWSPropertyAttribute]
public string Id { get; public set; }
    public string get_Id();
    public void set_Id(string value);
    internal bool IsSetId();
}
public class Amazon.KeyManagementService.Model.XksKeyInvalidConfigurationException : AmazonKeyManagementServiceException {
    public XksKeyInvalidConfigurationException(string message);
    public XksKeyInvalidConfigurationException(string message, Exception innerException);
    public XksKeyInvalidConfigurationException(Exception innerException);
    public XksKeyInvalidConfigurationException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public XksKeyInvalidConfigurationException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.KeyManagementService.Model.XksKeyNotFoundException : AmazonKeyManagementServiceException {
    public XksKeyNotFoundException(string message);
    public XksKeyNotFoundException(string message, Exception innerException);
    public XksKeyNotFoundException(Exception innerException);
    public XksKeyNotFoundException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public XksKeyNotFoundException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.KeyManagementService.Model.XksProxyAuthenticationCredentialType : object {
    private string _accessKeyId;
    private string _rawSecretAccessKey;
    [AWSPropertyAttribute]
public string AccessKeyId { get; public set; }
    [AWSPropertyAttribute]
public string RawSecretAccessKey { get; public set; }
    public string get_AccessKeyId();
    public void set_AccessKeyId(string value);
    internal bool IsSetAccessKeyId();
    public string get_RawSecretAccessKey();
    public void set_RawSecretAccessKey(string value);
    internal bool IsSetRawSecretAccessKey();
}
public class Amazon.KeyManagementService.Model.XksProxyConfigurationType : object {
    private string _accessKeyId;
    private XksProxyConnectivityType _connectivity;
    private string _uriEndpoint;
    private string _uriPath;
    private string _vpcEndpointServiceName;
    [AWSPropertyAttribute]
public string AccessKeyId { get; public set; }
    public XksProxyConnectivityType Connectivity { get; public set; }
    [AWSPropertyAttribute]
public string UriEndpoint { get; public set; }
    [AWSPropertyAttribute]
public string UriPath { get; public set; }
    [AWSPropertyAttribute]
public string VpcEndpointServiceName { get; public set; }
    public string get_AccessKeyId();
    public void set_AccessKeyId(string value);
    internal bool IsSetAccessKeyId();
    public XksProxyConnectivityType get_Connectivity();
    public void set_Connectivity(XksProxyConnectivityType value);
    internal bool IsSetConnectivity();
    public string get_UriEndpoint();
    public void set_UriEndpoint(string value);
    internal bool IsSetUriEndpoint();
    public string get_UriPath();
    public void set_UriPath(string value);
    internal bool IsSetUriPath();
    public string get_VpcEndpointServiceName();
    public void set_VpcEndpointServiceName(string value);
    internal bool IsSetVpcEndpointServiceName();
}
public class Amazon.KeyManagementService.Model.XksProxyIncorrectAuthenticationCredentialException : AmazonKeyManagementServiceException {
    public XksProxyIncorrectAuthenticationCredentialException(string message);
    public XksProxyIncorrectAuthenticationCredentialException(string message, Exception innerException);
    public XksProxyIncorrectAuthenticationCredentialException(Exception innerException);
    public XksProxyIncorrectAuthenticationCredentialException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public XksProxyIncorrectAuthenticationCredentialException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.KeyManagementService.Model.XksProxyInvalidConfigurationException : AmazonKeyManagementServiceException {
    public XksProxyInvalidConfigurationException(string message);
    public XksProxyInvalidConfigurationException(string message, Exception innerException);
    public XksProxyInvalidConfigurationException(Exception innerException);
    public XksProxyInvalidConfigurationException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public XksProxyInvalidConfigurationException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.KeyManagementService.Model.XksProxyInvalidResponseException : AmazonKeyManagementServiceException {
    public XksProxyInvalidResponseException(string message);
    public XksProxyInvalidResponseException(string message, Exception innerException);
    public XksProxyInvalidResponseException(Exception innerException);
    public XksProxyInvalidResponseException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public XksProxyInvalidResponseException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.KeyManagementService.Model.XksProxyUriEndpointInUseException : AmazonKeyManagementServiceException {
    public XksProxyUriEndpointInUseException(string message);
    public XksProxyUriEndpointInUseException(string message, Exception innerException);
    public XksProxyUriEndpointInUseException(Exception innerException);
    public XksProxyUriEndpointInUseException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public XksProxyUriEndpointInUseException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.KeyManagementService.Model.XksProxyUriInUseException : AmazonKeyManagementServiceException {
    public XksProxyUriInUseException(string message);
    public XksProxyUriInUseException(string message, Exception innerException);
    public XksProxyUriInUseException(Exception innerException);
    public XksProxyUriInUseException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public XksProxyUriInUseException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.KeyManagementService.Model.XksProxyUriUnreachableException : AmazonKeyManagementServiceException {
    public XksProxyUriUnreachableException(string message);
    public XksProxyUriUnreachableException(string message, Exception innerException);
    public XksProxyUriUnreachableException(Exception innerException);
    public XksProxyUriUnreachableException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public XksProxyUriUnreachableException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.KeyManagementService.Model.XksProxyVpcEndpointServiceInUseException : AmazonKeyManagementServiceException {
    public XksProxyVpcEndpointServiceInUseException(string message);
    public XksProxyVpcEndpointServiceInUseException(string message, Exception innerException);
    public XksProxyVpcEndpointServiceInUseException(Exception innerException);
    public XksProxyVpcEndpointServiceInUseException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public XksProxyVpcEndpointServiceInUseException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.KeyManagementService.Model.XksProxyVpcEndpointServiceInvalidConfigurationException : AmazonKeyManagementServiceException {
    public XksProxyVpcEndpointServiceInvalidConfigurationException(string message);
    public XksProxyVpcEndpointServiceInvalidConfigurationException(string message, Exception innerException);
    public XksProxyVpcEndpointServiceInvalidConfigurationException(Exception innerException);
    public XksProxyVpcEndpointServiceInvalidConfigurationException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public XksProxyVpcEndpointServiceInvalidConfigurationException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.KeyManagementService.Model.XksProxyVpcEndpointServiceNotFoundException : AmazonKeyManagementServiceException {
    public XksProxyVpcEndpointServiceNotFoundException(string message);
    public XksProxyVpcEndpointServiceNotFoundException(string message, Exception innerException);
    public XksProxyVpcEndpointServiceNotFoundException(Exception innerException);
    public XksProxyVpcEndpointServiceNotFoundException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public XksProxyVpcEndpointServiceNotFoundException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.KeyManagementService.MultiRegionKeyType : ConstantClass {
    public static MultiRegionKeyType PRIMARY;
    public static MultiRegionKeyType REPLICA;
    public MultiRegionKeyType(string value);
    private static MultiRegionKeyType();
    public static MultiRegionKeyType FindValue(string value);
    public static MultiRegionKeyType op_Implicit(string value);
}
public class Amazon.KeyManagementService.OriginType : ConstantClass {
    public static OriginType AWS_CLOUDHSM;
    public static OriginType AWS_KMS;
    public static OriginType EXTERNAL;
    public static OriginType EXTERNAL_KEY_STORE;
    public OriginType(string value);
    private static OriginType();
    public static OriginType FindValue(string value);
    public static OriginType op_Implicit(string value);
}
public class Amazon.KeyManagementService.RotationType : ConstantClass {
    public static RotationType AUTOMATIC;
    public static RotationType ON_DEMAND;
    public RotationType(string value);
    private static RotationType();
    public static RotationType FindValue(string value);
    public static RotationType op_Implicit(string value);
}
public class Amazon.KeyManagementService.SigningAlgorithmSpec : ConstantClass {
    public static SigningAlgorithmSpec ECDSA_SHA_256;
    public static SigningAlgorithmSpec ECDSA_SHA_384;
    public static SigningAlgorithmSpec ECDSA_SHA_512;
    public static SigningAlgorithmSpec RSASSA_PKCS1_V1_5_SHA_256;
    public static SigningAlgorithmSpec RSASSA_PKCS1_V1_5_SHA_384;
    public static SigningAlgorithmSpec RSASSA_PKCS1_V1_5_SHA_512;
    public static SigningAlgorithmSpec RSASSA_PSS_SHA_256;
    public static SigningAlgorithmSpec RSASSA_PSS_SHA_384;
    public static SigningAlgorithmSpec RSASSA_PSS_SHA_512;
    public static SigningAlgorithmSpec SM2DSA;
    public SigningAlgorithmSpec(string value);
    private static SigningAlgorithmSpec();
    public static SigningAlgorithmSpec FindValue(string value);
    public static SigningAlgorithmSpec op_Implicit(string value);
}
public class Amazon.KeyManagementService.WrappingKeySpec : ConstantClass {
    public static WrappingKeySpec RSA_2048;
    public static WrappingKeySpec RSA_3072;
    public static WrappingKeySpec RSA_4096;
    public static WrappingKeySpec SM2;
    public WrappingKeySpec(string value);
    private static WrappingKeySpec();
    public static WrappingKeySpec FindValue(string value);
    public static WrappingKeySpec op_Implicit(string value);
}
public class Amazon.KeyManagementService.XksProxyConnectivityType : ConstantClass {
    public static XksProxyConnectivityType PUBLIC_ENDPOINT;
    public static XksProxyConnectivityType VPC_ENDPOINT_SERVICE;
    public XksProxyConnectivityType(string value);
    private static XksProxyConnectivityType();
    public static XksProxyConnectivityType FindValue(string value);
    public static XksProxyConnectivityType op_Implicit(string value);
}
