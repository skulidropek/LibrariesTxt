public class Amazon.Redshift.ActionType : ConstantClass {
    public static ActionType RecommendNodeConfig;
    public static ActionType ResizeCluster;
    public static ActionType RestoreCluster;
    public ActionType(string value);
    private static ActionType();
    public static ActionType FindValue(string value);
    public static ActionType op_Implicit(string value);
}
public class Amazon.Redshift.AmazonRedshiftClient : AmazonServiceClient {
    private static IServiceMetadata serviceMetadata;
    private IRedshiftPaginatorFactory _paginators;
    public IRedshiftPaginatorFactory Paginators { get; }
    protected IServiceMetadata ServiceMetadata { get; }
    public AmazonRedshiftClient(RegionEndpoint region);
    public AmazonRedshiftClient(AmazonRedshiftConfig config);
    public AmazonRedshiftClient(AWSCredentials credentials);
    public AmazonRedshiftClient(AWSCredentials credentials, RegionEndpoint region);
    public AmazonRedshiftClient(AWSCredentials credentials, AmazonRedshiftConfig clientConfig);
    public AmazonRedshiftClient(string awsAccessKeyId, string awsSecretAccessKey);
    public AmazonRedshiftClient(string awsAccessKeyId, string awsSecretAccessKey, RegionEndpoint region);
    public AmazonRedshiftClient(string awsAccessKeyId, string awsSecretAccessKey, AmazonRedshiftConfig clientConfig);
    public AmazonRedshiftClient(string awsAccessKeyId, string awsSecretAccessKey, string awsSessionToken);
    public AmazonRedshiftClient(string awsAccessKeyId, string awsSecretAccessKey, string awsSessionToken, RegionEndpoint region);
    public AmazonRedshiftClient(string awsAccessKeyId, string awsSecretAccessKey, string awsSessionToken, AmazonRedshiftConfig clientConfig);
    private static AmazonRedshiftClient();
    public sealed virtual IRedshiftPaginatorFactory get_Paginators();
    protected virtual AbstractAWSSigner CreateSigner();
    protected virtual void CustomizeRuntimePipeline(RuntimePipeline pipeline);
    protected virtual IServiceMetadata get_ServiceMetadata();
    protected virtual void Dispose(bool disposing);
    internal virtual AcceptReservedNodeExchangeResponse AcceptReservedNodeExchange(AcceptReservedNodeExchangeRequest request);
    public virtual Task`1<AcceptReservedNodeExchangeResponse> AcceptReservedNodeExchangeAsync(AcceptReservedNodeExchangeRequest request, CancellationToken cancellationToken);
    internal virtual AddPartnerResponse AddPartner(AddPartnerRequest request);
    public virtual Task`1<AddPartnerResponse> AddPartnerAsync(AddPartnerRequest request, CancellationToken cancellationToken);
    internal virtual AssociateDataShareConsumerResponse AssociateDataShareConsumer(AssociateDataShareConsumerRequest request);
    public virtual Task`1<AssociateDataShareConsumerResponse> AssociateDataShareConsumerAsync(AssociateDataShareConsumerRequest request, CancellationToken cancellationToken);
    internal virtual AuthorizeClusterSecurityGroupIngressResponse AuthorizeClusterSecurityGroupIngress(AuthorizeClusterSecurityGroupIngressRequest request);
    public virtual Task`1<AuthorizeClusterSecurityGroupIngressResponse> AuthorizeClusterSecurityGroupIngressAsync(AuthorizeClusterSecurityGroupIngressRequest request, CancellationToken cancellationToken);
    internal virtual AuthorizeDataShareResponse AuthorizeDataShare(AuthorizeDataShareRequest request);
    public virtual Task`1<AuthorizeDataShareResponse> AuthorizeDataShareAsync(AuthorizeDataShareRequest request, CancellationToken cancellationToken);
    internal virtual AuthorizeEndpointAccessResponse AuthorizeEndpointAccess(AuthorizeEndpointAccessRequest request);
    public virtual Task`1<AuthorizeEndpointAccessResponse> AuthorizeEndpointAccessAsync(AuthorizeEndpointAccessRequest request, CancellationToken cancellationToken);
    internal virtual AuthorizeSnapshotAccessResponse AuthorizeSnapshotAccess(AuthorizeSnapshotAccessRequest request);
    public virtual Task`1<AuthorizeSnapshotAccessResponse> AuthorizeSnapshotAccessAsync(AuthorizeSnapshotAccessRequest request, CancellationToken cancellationToken);
    internal virtual BatchDeleteClusterSnapshotsResponse BatchDeleteClusterSnapshots(BatchDeleteClusterSnapshotsRequest request);
    public virtual Task`1<BatchDeleteClusterSnapshotsResponse> BatchDeleteClusterSnapshotsAsync(BatchDeleteClusterSnapshotsRequest request, CancellationToken cancellationToken);
    internal virtual BatchModifyClusterSnapshotsResponse BatchModifyClusterSnapshots(BatchModifyClusterSnapshotsRequest request);
    public virtual Task`1<BatchModifyClusterSnapshotsResponse> BatchModifyClusterSnapshotsAsync(BatchModifyClusterSnapshotsRequest request, CancellationToken cancellationToken);
    internal virtual CancelResizeResponse CancelResize(CancelResizeRequest request);
    public virtual Task`1<CancelResizeResponse> CancelResizeAsync(CancelResizeRequest request, CancellationToken cancellationToken);
    internal virtual CopyClusterSnapshotResponse CopyClusterSnapshot(CopyClusterSnapshotRequest request);
    public virtual Task`1<CopyClusterSnapshotResponse> CopyClusterSnapshotAsync(CopyClusterSnapshotRequest request, CancellationToken cancellationToken);
    internal virtual CreateAuthenticationProfileResponse CreateAuthenticationProfile(CreateAuthenticationProfileRequest request);
    public virtual Task`1<CreateAuthenticationProfileResponse> CreateAuthenticationProfileAsync(CreateAuthenticationProfileRequest request, CancellationToken cancellationToken);
    internal virtual CreateClusterResponse CreateCluster(CreateClusterRequest request);
    public virtual Task`1<CreateClusterResponse> CreateClusterAsync(CreateClusterRequest request, CancellationToken cancellationToken);
    internal virtual CreateClusterParameterGroupResponse CreateClusterParameterGroup(CreateClusterParameterGroupRequest request);
    public virtual Task`1<CreateClusterParameterGroupResponse> CreateClusterParameterGroupAsync(CreateClusterParameterGroupRequest request, CancellationToken cancellationToken);
    internal virtual CreateClusterSecurityGroupResponse CreateClusterSecurityGroup(CreateClusterSecurityGroupRequest request);
    public virtual Task`1<CreateClusterSecurityGroupResponse> CreateClusterSecurityGroupAsync(CreateClusterSecurityGroupRequest request, CancellationToken cancellationToken);
    internal virtual CreateClusterSnapshotResponse CreateClusterSnapshot(CreateClusterSnapshotRequest request);
    public virtual Task`1<CreateClusterSnapshotResponse> CreateClusterSnapshotAsync(CreateClusterSnapshotRequest request, CancellationToken cancellationToken);
    internal virtual CreateClusterSubnetGroupResponse CreateClusterSubnetGroup(CreateClusterSubnetGroupRequest request);
    public virtual Task`1<CreateClusterSubnetGroupResponse> CreateClusterSubnetGroupAsync(CreateClusterSubnetGroupRequest request, CancellationToken cancellationToken);
    internal virtual CreateCustomDomainAssociationResponse CreateCustomDomainAssociation(CreateCustomDomainAssociationRequest request);
    public virtual Task`1<CreateCustomDomainAssociationResponse> CreateCustomDomainAssociationAsync(CreateCustomDomainAssociationRequest request, CancellationToken cancellationToken);
    internal virtual CreateEndpointAccessResponse CreateEndpointAccess(CreateEndpointAccessRequest request);
    public virtual Task`1<CreateEndpointAccessResponse> CreateEndpointAccessAsync(CreateEndpointAccessRequest request, CancellationToken cancellationToken);
    internal virtual CreateEventSubscriptionResponse CreateEventSubscription(CreateEventSubscriptionRequest request);
    public virtual Task`1<CreateEventSubscriptionResponse> CreateEventSubscriptionAsync(CreateEventSubscriptionRequest request, CancellationToken cancellationToken);
    internal virtual CreateHsmClientCertificateResponse CreateHsmClientCertificate(CreateHsmClientCertificateRequest request);
    public virtual Task`1<CreateHsmClientCertificateResponse> CreateHsmClientCertificateAsync(CreateHsmClientCertificateRequest request, CancellationToken cancellationToken);
    internal virtual CreateHsmConfigurationResponse CreateHsmConfiguration(CreateHsmConfigurationRequest request);
    public virtual Task`1<CreateHsmConfigurationResponse> CreateHsmConfigurationAsync(CreateHsmConfigurationRequest request, CancellationToken cancellationToken);
    internal virtual CreateRedshiftIdcApplicationResponse CreateRedshiftIdcApplication(CreateRedshiftIdcApplicationRequest request);
    public virtual Task`1<CreateRedshiftIdcApplicationResponse> CreateRedshiftIdcApplicationAsync(CreateRedshiftIdcApplicationRequest request, CancellationToken cancellationToken);
    internal virtual CreateScheduledActionResponse CreateScheduledAction(CreateScheduledActionRequest request);
    public virtual Task`1<CreateScheduledActionResponse> CreateScheduledActionAsync(CreateScheduledActionRequest request, CancellationToken cancellationToken);
    internal virtual CreateSnapshotCopyGrantResponse CreateSnapshotCopyGrant(CreateSnapshotCopyGrantRequest request);
    public virtual Task`1<CreateSnapshotCopyGrantResponse> CreateSnapshotCopyGrantAsync(CreateSnapshotCopyGrantRequest request, CancellationToken cancellationToken);
    internal virtual CreateSnapshotScheduleResponse CreateSnapshotSchedule(CreateSnapshotScheduleRequest request);
    public virtual Task`1<CreateSnapshotScheduleResponse> CreateSnapshotScheduleAsync(CreateSnapshotScheduleRequest request, CancellationToken cancellationToken);
    internal virtual CreateTagsResponse CreateTags(CreateTagsRequest request);
    public virtual Task`1<CreateTagsResponse> CreateTagsAsync(CreateTagsRequest request, CancellationToken cancellationToken);
    internal virtual CreateUsageLimitResponse CreateUsageLimit(CreateUsageLimitRequest request);
    public virtual Task`1<CreateUsageLimitResponse> CreateUsageLimitAsync(CreateUsageLimitRequest request, CancellationToken cancellationToken);
    internal virtual DeauthorizeDataShareResponse DeauthorizeDataShare(DeauthorizeDataShareRequest request);
    public virtual Task`1<DeauthorizeDataShareResponse> DeauthorizeDataShareAsync(DeauthorizeDataShareRequest request, CancellationToken cancellationToken);
    internal virtual DeleteAuthenticationProfileResponse DeleteAuthenticationProfile(DeleteAuthenticationProfileRequest request);
    public virtual Task`1<DeleteAuthenticationProfileResponse> DeleteAuthenticationProfileAsync(DeleteAuthenticationProfileRequest request, CancellationToken cancellationToken);
    internal virtual DeleteClusterResponse DeleteCluster(DeleteClusterRequest request);
    public virtual Task`1<DeleteClusterResponse> DeleteClusterAsync(DeleteClusterRequest request, CancellationToken cancellationToken);
    internal virtual DeleteClusterParameterGroupResponse DeleteClusterParameterGroup(DeleteClusterParameterGroupRequest request);
    public virtual Task`1<DeleteClusterParameterGroupResponse> DeleteClusterParameterGroupAsync(DeleteClusterParameterGroupRequest request, CancellationToken cancellationToken);
    internal virtual DeleteClusterSecurityGroupResponse DeleteClusterSecurityGroup(DeleteClusterSecurityGroupRequest request);
    public virtual Task`1<DeleteClusterSecurityGroupResponse> DeleteClusterSecurityGroupAsync(DeleteClusterSecurityGroupRequest request, CancellationToken cancellationToken);
    internal virtual DeleteClusterSnapshotResponse DeleteClusterSnapshot(DeleteClusterSnapshotRequest request);
    public virtual Task`1<DeleteClusterSnapshotResponse> DeleteClusterSnapshotAsync(DeleteClusterSnapshotRequest request, CancellationToken cancellationToken);
    internal virtual DeleteClusterSubnetGroupResponse DeleteClusterSubnetGroup(DeleteClusterSubnetGroupRequest request);
    public virtual Task`1<DeleteClusterSubnetGroupResponse> DeleteClusterSubnetGroupAsync(DeleteClusterSubnetGroupRequest request, CancellationToken cancellationToken);
    internal virtual DeleteCustomDomainAssociationResponse DeleteCustomDomainAssociation(DeleteCustomDomainAssociationRequest request);
    public virtual Task`1<DeleteCustomDomainAssociationResponse> DeleteCustomDomainAssociationAsync(DeleteCustomDomainAssociationRequest request, CancellationToken cancellationToken);
    internal virtual DeleteEndpointAccessResponse DeleteEndpointAccess(DeleteEndpointAccessRequest request);
    public virtual Task`1<DeleteEndpointAccessResponse> DeleteEndpointAccessAsync(DeleteEndpointAccessRequest request, CancellationToken cancellationToken);
    internal virtual DeleteEventSubscriptionResponse DeleteEventSubscription(DeleteEventSubscriptionRequest request);
    public virtual Task`1<DeleteEventSubscriptionResponse> DeleteEventSubscriptionAsync(DeleteEventSubscriptionRequest request, CancellationToken cancellationToken);
    internal virtual DeleteHsmClientCertificateResponse DeleteHsmClientCertificate(DeleteHsmClientCertificateRequest request);
    public virtual Task`1<DeleteHsmClientCertificateResponse> DeleteHsmClientCertificateAsync(DeleteHsmClientCertificateRequest request, CancellationToken cancellationToken);
    internal virtual DeleteHsmConfigurationResponse DeleteHsmConfiguration(DeleteHsmConfigurationRequest request);
    public virtual Task`1<DeleteHsmConfigurationResponse> DeleteHsmConfigurationAsync(DeleteHsmConfigurationRequest request, CancellationToken cancellationToken);
    internal virtual DeletePartnerResponse DeletePartner(DeletePartnerRequest request);
    public virtual Task`1<DeletePartnerResponse> DeletePartnerAsync(DeletePartnerRequest request, CancellationToken cancellationToken);
    internal virtual DeleteRedshiftIdcApplicationResponse DeleteRedshiftIdcApplication(DeleteRedshiftIdcApplicationRequest request);
    public virtual Task`1<DeleteRedshiftIdcApplicationResponse> DeleteRedshiftIdcApplicationAsync(DeleteRedshiftIdcApplicationRequest request, CancellationToken cancellationToken);
    internal virtual DeleteResourcePolicyResponse DeleteResourcePolicy(DeleteResourcePolicyRequest request);
    public virtual Task`1<DeleteResourcePolicyResponse> DeleteResourcePolicyAsync(DeleteResourcePolicyRequest request, CancellationToken cancellationToken);
    internal virtual DeleteScheduledActionResponse DeleteScheduledAction(DeleteScheduledActionRequest request);
    public virtual Task`1<DeleteScheduledActionResponse> DeleteScheduledActionAsync(DeleteScheduledActionRequest request, CancellationToken cancellationToken);
    internal virtual DeleteSnapshotCopyGrantResponse DeleteSnapshotCopyGrant(DeleteSnapshotCopyGrantRequest request);
    public virtual Task`1<DeleteSnapshotCopyGrantResponse> DeleteSnapshotCopyGrantAsync(DeleteSnapshotCopyGrantRequest request, CancellationToken cancellationToken);
    internal virtual DeleteSnapshotScheduleResponse DeleteSnapshotSchedule(DeleteSnapshotScheduleRequest request);
    public virtual Task`1<DeleteSnapshotScheduleResponse> DeleteSnapshotScheduleAsync(DeleteSnapshotScheduleRequest request, CancellationToken cancellationToken);
    internal virtual DeleteTagsResponse DeleteTags(DeleteTagsRequest request);
    public virtual Task`1<DeleteTagsResponse> DeleteTagsAsync(DeleteTagsRequest request, CancellationToken cancellationToken);
    internal virtual DeleteUsageLimitResponse DeleteUsageLimit(DeleteUsageLimitRequest request);
    public virtual Task`1<DeleteUsageLimitResponse> DeleteUsageLimitAsync(DeleteUsageLimitRequest request, CancellationToken cancellationToken);
    internal virtual DescribeAccountAttributesResponse DescribeAccountAttributes(DescribeAccountAttributesRequest request);
    public virtual Task`1<DescribeAccountAttributesResponse> DescribeAccountAttributesAsync(DescribeAccountAttributesRequest request, CancellationToken cancellationToken);
    internal virtual DescribeAuthenticationProfilesResponse DescribeAuthenticationProfiles(DescribeAuthenticationProfilesRequest request);
    public virtual Task`1<DescribeAuthenticationProfilesResponse> DescribeAuthenticationProfilesAsync(DescribeAuthenticationProfilesRequest request, CancellationToken cancellationToken);
    internal virtual DescribeClusterDbRevisionsResponse DescribeClusterDbRevisions(DescribeClusterDbRevisionsRequest request);
    public virtual Task`1<DescribeClusterDbRevisionsResponse> DescribeClusterDbRevisionsAsync(DescribeClusterDbRevisionsRequest request, CancellationToken cancellationToken);
    internal virtual DescribeClusterParameterGroupsResponse DescribeClusterParameterGroups();
    internal virtual DescribeClusterParameterGroupsResponse DescribeClusterParameterGroups(DescribeClusterParameterGroupsRequest request);
    public virtual Task`1<DescribeClusterParameterGroupsResponse> DescribeClusterParameterGroupsAsync(CancellationToken cancellationToken);
    public virtual Task`1<DescribeClusterParameterGroupsResponse> DescribeClusterParameterGroupsAsync(DescribeClusterParameterGroupsRequest request, CancellationToken cancellationToken);
    internal virtual DescribeClusterParametersResponse DescribeClusterParameters(DescribeClusterParametersRequest request);
    public virtual Task`1<DescribeClusterParametersResponse> DescribeClusterParametersAsync(DescribeClusterParametersRequest request, CancellationToken cancellationToken);
    internal virtual DescribeClustersResponse DescribeClusters();
    internal virtual DescribeClustersResponse DescribeClusters(DescribeClustersRequest request);
    public virtual Task`1<DescribeClustersResponse> DescribeClustersAsync(CancellationToken cancellationToken);
    public virtual Task`1<DescribeClustersResponse> DescribeClustersAsync(DescribeClustersRequest request, CancellationToken cancellationToken);
    internal virtual DescribeClusterSecurityGroupsResponse DescribeClusterSecurityGroups();
    internal virtual DescribeClusterSecurityGroupsResponse DescribeClusterSecurityGroups(DescribeClusterSecurityGroupsRequest request);
    public virtual Task`1<DescribeClusterSecurityGroupsResponse> DescribeClusterSecurityGroupsAsync(CancellationToken cancellationToken);
    public virtual Task`1<DescribeClusterSecurityGroupsResponse> DescribeClusterSecurityGroupsAsync(DescribeClusterSecurityGroupsRequest request, CancellationToken cancellationToken);
    internal virtual DescribeClusterSnapshotsResponse DescribeClusterSnapshots();
    internal virtual DescribeClusterSnapshotsResponse DescribeClusterSnapshots(DescribeClusterSnapshotsRequest request);
    public virtual Task`1<DescribeClusterSnapshotsResponse> DescribeClusterSnapshotsAsync(CancellationToken cancellationToken);
    public virtual Task`1<DescribeClusterSnapshotsResponse> DescribeClusterSnapshotsAsync(DescribeClusterSnapshotsRequest request, CancellationToken cancellationToken);
    internal virtual DescribeClusterSubnetGroupsResponse DescribeClusterSubnetGroups();
    internal virtual DescribeClusterSubnetGroupsResponse DescribeClusterSubnetGroups(DescribeClusterSubnetGroupsRequest request);
    public virtual Task`1<DescribeClusterSubnetGroupsResponse> DescribeClusterSubnetGroupsAsync(CancellationToken cancellationToken);
    public virtual Task`1<DescribeClusterSubnetGroupsResponse> DescribeClusterSubnetGroupsAsync(DescribeClusterSubnetGroupsRequest request, CancellationToken cancellationToken);
    internal virtual DescribeClusterTracksResponse DescribeClusterTracks(DescribeClusterTracksRequest request);
    public virtual Task`1<DescribeClusterTracksResponse> DescribeClusterTracksAsync(DescribeClusterTracksRequest request, CancellationToken cancellationToken);
    internal virtual DescribeClusterVersionsResponse DescribeClusterVersions();
    internal virtual DescribeClusterVersionsResponse DescribeClusterVersions(DescribeClusterVersionsRequest request);
    public virtual Task`1<DescribeClusterVersionsResponse> DescribeClusterVersionsAsync(CancellationToken cancellationToken);
    public virtual Task`1<DescribeClusterVersionsResponse> DescribeClusterVersionsAsync(DescribeClusterVersionsRequest request, CancellationToken cancellationToken);
    internal virtual DescribeCustomDomainAssociationsResponse DescribeCustomDomainAssociations(DescribeCustomDomainAssociationsRequest request);
    public virtual Task`1<DescribeCustomDomainAssociationsResponse> DescribeCustomDomainAssociationsAsync(DescribeCustomDomainAssociationsRequest request, CancellationToken cancellationToken);
    internal virtual DescribeDataSharesResponse DescribeDataShares(DescribeDataSharesRequest request);
    public virtual Task`1<DescribeDataSharesResponse> DescribeDataSharesAsync(DescribeDataSharesRequest request, CancellationToken cancellationToken);
    internal virtual DescribeDataSharesForConsumerResponse DescribeDataSharesForConsumer(DescribeDataSharesForConsumerRequest request);
    public virtual Task`1<DescribeDataSharesForConsumerResponse> DescribeDataSharesForConsumerAsync(DescribeDataSharesForConsumerRequest request, CancellationToken cancellationToken);
    internal virtual DescribeDataSharesForProducerResponse DescribeDataSharesForProducer(DescribeDataSharesForProducerRequest request);
    public virtual Task`1<DescribeDataSharesForProducerResponse> DescribeDataSharesForProducerAsync(DescribeDataSharesForProducerRequest request, CancellationToken cancellationToken);
    internal virtual DescribeDefaultClusterParametersResponse DescribeDefaultClusterParameters(DescribeDefaultClusterParametersRequest request);
    public virtual Task`1<DescribeDefaultClusterParametersResponse> DescribeDefaultClusterParametersAsync(DescribeDefaultClusterParametersRequest request, CancellationToken cancellationToken);
    internal virtual DescribeEndpointAccessResponse DescribeEndpointAccess(DescribeEndpointAccessRequest request);
    public virtual Task`1<DescribeEndpointAccessResponse> DescribeEndpointAccessAsync(DescribeEndpointAccessRequest request, CancellationToken cancellationToken);
    internal virtual DescribeEndpointAuthorizationResponse DescribeEndpointAuthorization(DescribeEndpointAuthorizationRequest request);
    public virtual Task`1<DescribeEndpointAuthorizationResponse> DescribeEndpointAuthorizationAsync(DescribeEndpointAuthorizationRequest request, CancellationToken cancellationToken);
    internal virtual DescribeEventCategoriesResponse DescribeEventCategories();
    internal virtual DescribeEventCategoriesResponse DescribeEventCategories(DescribeEventCategoriesRequest request);
    public virtual Task`1<DescribeEventCategoriesResponse> DescribeEventCategoriesAsync(CancellationToken cancellationToken);
    public virtual Task`1<DescribeEventCategoriesResponse> DescribeEventCategoriesAsync(DescribeEventCategoriesRequest request, CancellationToken cancellationToken);
    internal virtual DescribeEventsResponse DescribeEvents();
    internal virtual DescribeEventsResponse DescribeEvents(DescribeEventsRequest request);
    public virtual Task`1<DescribeEventsResponse> DescribeEventsAsync(CancellationToken cancellationToken);
    public virtual Task`1<DescribeEventsResponse> DescribeEventsAsync(DescribeEventsRequest request, CancellationToken cancellationToken);
    internal virtual DescribeEventSubscriptionsResponse DescribeEventSubscriptions();
    internal virtual DescribeEventSubscriptionsResponse DescribeEventSubscriptions(DescribeEventSubscriptionsRequest request);
    public virtual Task`1<DescribeEventSubscriptionsResponse> DescribeEventSubscriptionsAsync(CancellationToken cancellationToken);
    public virtual Task`1<DescribeEventSubscriptionsResponse> DescribeEventSubscriptionsAsync(DescribeEventSubscriptionsRequest request, CancellationToken cancellationToken);
    internal virtual DescribeHsmClientCertificatesResponse DescribeHsmClientCertificates();
    internal virtual DescribeHsmClientCertificatesResponse DescribeHsmClientCertificates(DescribeHsmClientCertificatesRequest request);
    public virtual Task`1<DescribeHsmClientCertificatesResponse> DescribeHsmClientCertificatesAsync(CancellationToken cancellationToken);
    public virtual Task`1<DescribeHsmClientCertificatesResponse> DescribeHsmClientCertificatesAsync(DescribeHsmClientCertificatesRequest request, CancellationToken cancellationToken);
    internal virtual DescribeHsmConfigurationsResponse DescribeHsmConfigurations();
    internal virtual DescribeHsmConfigurationsResponse DescribeHsmConfigurations(DescribeHsmConfigurationsRequest request);
    public virtual Task`1<DescribeHsmConfigurationsResponse> DescribeHsmConfigurationsAsync(CancellationToken cancellationToken);
    public virtual Task`1<DescribeHsmConfigurationsResponse> DescribeHsmConfigurationsAsync(DescribeHsmConfigurationsRequest request, CancellationToken cancellationToken);
    internal virtual DescribeInboundIntegrationsResponse DescribeInboundIntegrations(DescribeInboundIntegrationsRequest request);
    public virtual Task`1<DescribeInboundIntegrationsResponse> DescribeInboundIntegrationsAsync(DescribeInboundIntegrationsRequest request, CancellationToken cancellationToken);
    internal virtual DescribeLoggingStatusResponse DescribeLoggingStatus(DescribeLoggingStatusRequest request);
    public virtual Task`1<DescribeLoggingStatusResponse> DescribeLoggingStatusAsync(DescribeLoggingStatusRequest request, CancellationToken cancellationToken);
    internal virtual DescribeNodeConfigurationOptionsResponse DescribeNodeConfigurationOptions(DescribeNodeConfigurationOptionsRequest request);
    public virtual Task`1<DescribeNodeConfigurationOptionsResponse> DescribeNodeConfigurationOptionsAsync(DescribeNodeConfigurationOptionsRequest request, CancellationToken cancellationToken);
    internal virtual DescribeOrderableClusterOptionsResponse DescribeOrderableClusterOptions();
    internal virtual DescribeOrderableClusterOptionsResponse DescribeOrderableClusterOptions(DescribeOrderableClusterOptionsRequest request);
    public virtual Task`1<DescribeOrderableClusterOptionsResponse> DescribeOrderableClusterOptionsAsync(CancellationToken cancellationToken);
    public virtual Task`1<DescribeOrderableClusterOptionsResponse> DescribeOrderableClusterOptionsAsync(DescribeOrderableClusterOptionsRequest request, CancellationToken cancellationToken);
    internal virtual DescribePartnersResponse DescribePartners(DescribePartnersRequest request);
    public virtual Task`1<DescribePartnersResponse> DescribePartnersAsync(DescribePartnersRequest request, CancellationToken cancellationToken);
    internal virtual DescribeRedshiftIdcApplicationsResponse DescribeRedshiftIdcApplications(DescribeRedshiftIdcApplicationsRequest request);
    public virtual Task`1<DescribeRedshiftIdcApplicationsResponse> DescribeRedshiftIdcApplicationsAsync(DescribeRedshiftIdcApplicationsRequest request, CancellationToken cancellationToken);
    internal virtual DescribeReservedNodeExchangeStatusResponse DescribeReservedNodeExchangeStatus(DescribeReservedNodeExchangeStatusRequest request);
    public virtual Task`1<DescribeReservedNodeExchangeStatusResponse> DescribeReservedNodeExchangeStatusAsync(DescribeReservedNodeExchangeStatusRequest request, CancellationToken cancellationToken);
    internal virtual DescribeReservedNodeOfferingsResponse DescribeReservedNodeOfferings();
    internal virtual DescribeReservedNodeOfferingsResponse DescribeReservedNodeOfferings(DescribeReservedNodeOfferingsRequest request);
    public virtual Task`1<DescribeReservedNodeOfferingsResponse> DescribeReservedNodeOfferingsAsync(CancellationToken cancellationToken);
    public virtual Task`1<DescribeReservedNodeOfferingsResponse> DescribeReservedNodeOfferingsAsync(DescribeReservedNodeOfferingsRequest request, CancellationToken cancellationToken);
    internal virtual DescribeReservedNodesResponse DescribeReservedNodes();
    internal virtual DescribeReservedNodesResponse DescribeReservedNodes(DescribeReservedNodesRequest request);
    public virtual Task`1<DescribeReservedNodesResponse> DescribeReservedNodesAsync(CancellationToken cancellationToken);
    public virtual Task`1<DescribeReservedNodesResponse> DescribeReservedNodesAsync(DescribeReservedNodesRequest request, CancellationToken cancellationToken);
    internal virtual DescribeResizeResponse DescribeResize(DescribeResizeRequest request);
    public virtual Task`1<DescribeResizeResponse> DescribeResizeAsync(DescribeResizeRequest request, CancellationToken cancellationToken);
    internal virtual DescribeScheduledActionsResponse DescribeScheduledActions(DescribeScheduledActionsRequest request);
    public virtual Task`1<DescribeScheduledActionsResponse> DescribeScheduledActionsAsync(DescribeScheduledActionsRequest request, CancellationToken cancellationToken);
    internal virtual DescribeSnapshotCopyGrantsResponse DescribeSnapshotCopyGrants(DescribeSnapshotCopyGrantsRequest request);
    public virtual Task`1<DescribeSnapshotCopyGrantsResponse> DescribeSnapshotCopyGrantsAsync(DescribeSnapshotCopyGrantsRequest request, CancellationToken cancellationToken);
    internal virtual DescribeSnapshotSchedulesResponse DescribeSnapshotSchedules(DescribeSnapshotSchedulesRequest request);
    public virtual Task`1<DescribeSnapshotSchedulesResponse> DescribeSnapshotSchedulesAsync(DescribeSnapshotSchedulesRequest request, CancellationToken cancellationToken);
    internal virtual DescribeStorageResponse DescribeStorage(DescribeStorageRequest request);
    public virtual Task`1<DescribeStorageResponse> DescribeStorageAsync(DescribeStorageRequest request, CancellationToken cancellationToken);
    internal virtual DescribeTableRestoreStatusResponse DescribeTableRestoreStatus(DescribeTableRestoreStatusRequest request);
    public virtual Task`1<DescribeTableRestoreStatusResponse> DescribeTableRestoreStatusAsync(DescribeTableRestoreStatusRequest request, CancellationToken cancellationToken);
    internal virtual DescribeTagsResponse DescribeTags(DescribeTagsRequest request);
    public virtual Task`1<DescribeTagsResponse> DescribeTagsAsync(DescribeTagsRequest request, CancellationToken cancellationToken);
    internal virtual DescribeUsageLimitsResponse DescribeUsageLimits(DescribeUsageLimitsRequest request);
    public virtual Task`1<DescribeUsageLimitsResponse> DescribeUsageLimitsAsync(DescribeUsageLimitsRequest request, CancellationToken cancellationToken);
    internal virtual DisableLoggingResponse DisableLogging(DisableLoggingRequest request);
    public virtual Task`1<DisableLoggingResponse> DisableLoggingAsync(DisableLoggingRequest request, CancellationToken cancellationToken);
    internal virtual DisableSnapshotCopyResponse DisableSnapshotCopy(DisableSnapshotCopyRequest request);
    public virtual Task`1<DisableSnapshotCopyResponse> DisableSnapshotCopyAsync(DisableSnapshotCopyRequest request, CancellationToken cancellationToken);
    internal virtual DisassociateDataShareConsumerResponse DisassociateDataShareConsumer(DisassociateDataShareConsumerRequest request);
    public virtual Task`1<DisassociateDataShareConsumerResponse> DisassociateDataShareConsumerAsync(DisassociateDataShareConsumerRequest request, CancellationToken cancellationToken);
    internal virtual EnableLoggingResponse EnableLogging(EnableLoggingRequest request);
    public virtual Task`1<EnableLoggingResponse> EnableLoggingAsync(EnableLoggingRequest request, CancellationToken cancellationToken);
    internal virtual EnableSnapshotCopyResponse EnableSnapshotCopy(EnableSnapshotCopyRequest request);
    public virtual Task`1<EnableSnapshotCopyResponse> EnableSnapshotCopyAsync(EnableSnapshotCopyRequest request, CancellationToken cancellationToken);
    internal virtual FailoverPrimaryComputeResponse FailoverPrimaryCompute(FailoverPrimaryComputeRequest request);
    public virtual Task`1<FailoverPrimaryComputeResponse> FailoverPrimaryComputeAsync(FailoverPrimaryComputeRequest request, CancellationToken cancellationToken);
    internal virtual GetClusterCredentialsResponse GetClusterCredentials(GetClusterCredentialsRequest request);
    public virtual Task`1<GetClusterCredentialsResponse> GetClusterCredentialsAsync(GetClusterCredentialsRequest request, CancellationToken cancellationToken);
    internal virtual GetClusterCredentialsWithIAMResponse GetClusterCredentialsWithIAM(GetClusterCredentialsWithIAMRequest request);
    public virtual Task`1<GetClusterCredentialsWithIAMResponse> GetClusterCredentialsWithIAMAsync(GetClusterCredentialsWithIAMRequest request, CancellationToken cancellationToken);
    internal virtual GetReservedNodeExchangeConfigurationOptionsResponse GetReservedNodeExchangeConfigurationOptions(GetReservedNodeExchangeConfigurationOptionsRequest request);
    public virtual Task`1<GetReservedNodeExchangeConfigurationOptionsResponse> GetReservedNodeExchangeConfigurationOptionsAsync(GetReservedNodeExchangeConfigurationOptionsRequest request, CancellationToken cancellationToken);
    internal virtual GetReservedNodeExchangeOfferingsResponse GetReservedNodeExchangeOfferings(GetReservedNodeExchangeOfferingsRequest request);
    public virtual Task`1<GetReservedNodeExchangeOfferingsResponse> GetReservedNodeExchangeOfferingsAsync(GetReservedNodeExchangeOfferingsRequest request, CancellationToken cancellationToken);
    internal virtual GetResourcePolicyResponse GetResourcePolicy(GetResourcePolicyRequest request);
    public virtual Task`1<GetResourcePolicyResponse> GetResourcePolicyAsync(GetResourcePolicyRequest request, CancellationToken cancellationToken);
    internal virtual ListRecommendationsResponse ListRecommendations(ListRecommendationsRequest request);
    public virtual Task`1<ListRecommendationsResponse> ListRecommendationsAsync(ListRecommendationsRequest request, CancellationToken cancellationToken);
    internal virtual ModifyAquaConfigurationResponse ModifyAquaConfiguration(ModifyAquaConfigurationRequest request);
    public virtual Task`1<ModifyAquaConfigurationResponse> ModifyAquaConfigurationAsync(ModifyAquaConfigurationRequest request, CancellationToken cancellationToken);
    internal virtual ModifyAuthenticationProfileResponse ModifyAuthenticationProfile(ModifyAuthenticationProfileRequest request);
    public virtual Task`1<ModifyAuthenticationProfileResponse> ModifyAuthenticationProfileAsync(ModifyAuthenticationProfileRequest request, CancellationToken cancellationToken);
    internal virtual ModifyClusterResponse ModifyCluster(ModifyClusterRequest request);
    public virtual Task`1<ModifyClusterResponse> ModifyClusterAsync(ModifyClusterRequest request, CancellationToken cancellationToken);
    internal virtual ModifyClusterDbRevisionResponse ModifyClusterDbRevision(ModifyClusterDbRevisionRequest request);
    public virtual Task`1<ModifyClusterDbRevisionResponse> ModifyClusterDbRevisionAsync(ModifyClusterDbRevisionRequest request, CancellationToken cancellationToken);
    internal virtual ModifyClusterIamRolesResponse ModifyClusterIamRoles(ModifyClusterIamRolesRequest request);
    public virtual Task`1<ModifyClusterIamRolesResponse> ModifyClusterIamRolesAsync(ModifyClusterIamRolesRequest request, CancellationToken cancellationToken);
    internal virtual ModifyClusterMaintenanceResponse ModifyClusterMaintenance(ModifyClusterMaintenanceRequest request);
    public virtual Task`1<ModifyClusterMaintenanceResponse> ModifyClusterMaintenanceAsync(ModifyClusterMaintenanceRequest request, CancellationToken cancellationToken);
    internal virtual ModifyClusterParameterGroupResponse ModifyClusterParameterGroup(ModifyClusterParameterGroupRequest request);
    public virtual Task`1<ModifyClusterParameterGroupResponse> ModifyClusterParameterGroupAsync(ModifyClusterParameterGroupRequest request, CancellationToken cancellationToken);
    internal virtual ModifyClusterSnapshotResponse ModifyClusterSnapshot(ModifyClusterSnapshotRequest request);
    public virtual Task`1<ModifyClusterSnapshotResponse> ModifyClusterSnapshotAsync(ModifyClusterSnapshotRequest request, CancellationToken cancellationToken);
    internal virtual ModifyClusterSnapshotScheduleResponse ModifyClusterSnapshotSchedule(ModifyClusterSnapshotScheduleRequest request);
    public virtual Task`1<ModifyClusterSnapshotScheduleResponse> ModifyClusterSnapshotScheduleAsync(ModifyClusterSnapshotScheduleRequest request, CancellationToken cancellationToken);
    internal virtual ModifyClusterSubnetGroupResponse ModifyClusterSubnetGroup(ModifyClusterSubnetGroupRequest request);
    public virtual Task`1<ModifyClusterSubnetGroupResponse> ModifyClusterSubnetGroupAsync(ModifyClusterSubnetGroupRequest request, CancellationToken cancellationToken);
    internal virtual ModifyCustomDomainAssociationResponse ModifyCustomDomainAssociation(ModifyCustomDomainAssociationRequest request);
    public virtual Task`1<ModifyCustomDomainAssociationResponse> ModifyCustomDomainAssociationAsync(ModifyCustomDomainAssociationRequest request, CancellationToken cancellationToken);
    internal virtual ModifyEndpointAccessResponse ModifyEndpointAccess(ModifyEndpointAccessRequest request);
    public virtual Task`1<ModifyEndpointAccessResponse> ModifyEndpointAccessAsync(ModifyEndpointAccessRequest request, CancellationToken cancellationToken);
    internal virtual ModifyEventSubscriptionResponse ModifyEventSubscription(ModifyEventSubscriptionRequest request);
    public virtual Task`1<ModifyEventSubscriptionResponse> ModifyEventSubscriptionAsync(ModifyEventSubscriptionRequest request, CancellationToken cancellationToken);
    internal virtual ModifyRedshiftIdcApplicationResponse ModifyRedshiftIdcApplication(ModifyRedshiftIdcApplicationRequest request);
    public virtual Task`1<ModifyRedshiftIdcApplicationResponse> ModifyRedshiftIdcApplicationAsync(ModifyRedshiftIdcApplicationRequest request, CancellationToken cancellationToken);
    internal virtual ModifyScheduledActionResponse ModifyScheduledAction(ModifyScheduledActionRequest request);
    public virtual Task`1<ModifyScheduledActionResponse> ModifyScheduledActionAsync(ModifyScheduledActionRequest request, CancellationToken cancellationToken);
    internal virtual ModifySnapshotCopyRetentionPeriodResponse ModifySnapshotCopyRetentionPeriod(ModifySnapshotCopyRetentionPeriodRequest request);
    public virtual Task`1<ModifySnapshotCopyRetentionPeriodResponse> ModifySnapshotCopyRetentionPeriodAsync(ModifySnapshotCopyRetentionPeriodRequest request, CancellationToken cancellationToken);
    internal virtual ModifySnapshotScheduleResponse ModifySnapshotSchedule(ModifySnapshotScheduleRequest request);
    public virtual Task`1<ModifySnapshotScheduleResponse> ModifySnapshotScheduleAsync(ModifySnapshotScheduleRequest request, CancellationToken cancellationToken);
    internal virtual ModifyUsageLimitResponse ModifyUsageLimit(ModifyUsageLimitRequest request);
    public virtual Task`1<ModifyUsageLimitResponse> ModifyUsageLimitAsync(ModifyUsageLimitRequest request, CancellationToken cancellationToken);
    internal virtual PauseClusterResponse PauseCluster(PauseClusterRequest request);
    public virtual Task`1<PauseClusterResponse> PauseClusterAsync(PauseClusterRequest request, CancellationToken cancellationToken);
    internal virtual PurchaseReservedNodeOfferingResponse PurchaseReservedNodeOffering(PurchaseReservedNodeOfferingRequest request);
    public virtual Task`1<PurchaseReservedNodeOfferingResponse> PurchaseReservedNodeOfferingAsync(PurchaseReservedNodeOfferingRequest request, CancellationToken cancellationToken);
    internal virtual PutResourcePolicyResponse PutResourcePolicy(PutResourcePolicyRequest request);
    public virtual Task`1<PutResourcePolicyResponse> PutResourcePolicyAsync(PutResourcePolicyRequest request, CancellationToken cancellationToken);
    internal virtual RebootClusterResponse RebootCluster(RebootClusterRequest request);
    public virtual Task`1<RebootClusterResponse> RebootClusterAsync(RebootClusterRequest request, CancellationToken cancellationToken);
    internal virtual RejectDataShareResponse RejectDataShare(RejectDataShareRequest request);
    public virtual Task`1<RejectDataShareResponse> RejectDataShareAsync(RejectDataShareRequest request, CancellationToken cancellationToken);
    internal virtual ResetClusterParameterGroupResponse ResetClusterParameterGroup(ResetClusterParameterGroupRequest request);
    public virtual Task`1<ResetClusterParameterGroupResponse> ResetClusterParameterGroupAsync(ResetClusterParameterGroupRequest request, CancellationToken cancellationToken);
    internal virtual ResizeClusterResponse ResizeCluster(ResizeClusterRequest request);
    public virtual Task`1<ResizeClusterResponse> ResizeClusterAsync(ResizeClusterRequest request, CancellationToken cancellationToken);
    internal virtual RestoreFromClusterSnapshotResponse RestoreFromClusterSnapshot(RestoreFromClusterSnapshotRequest request);
    public virtual Task`1<RestoreFromClusterSnapshotResponse> RestoreFromClusterSnapshotAsync(RestoreFromClusterSnapshotRequest request, CancellationToken cancellationToken);
    internal virtual RestoreTableFromClusterSnapshotResponse RestoreTableFromClusterSnapshot(RestoreTableFromClusterSnapshotRequest request);
    public virtual Task`1<RestoreTableFromClusterSnapshotResponse> RestoreTableFromClusterSnapshotAsync(RestoreTableFromClusterSnapshotRequest request, CancellationToken cancellationToken);
    internal virtual ResumeClusterResponse ResumeCluster(ResumeClusterRequest request);
    public virtual Task`1<ResumeClusterResponse> ResumeClusterAsync(ResumeClusterRequest request, CancellationToken cancellationToken);
    internal virtual RevokeClusterSecurityGroupIngressResponse RevokeClusterSecurityGroupIngress(RevokeClusterSecurityGroupIngressRequest request);
    public virtual Task`1<RevokeClusterSecurityGroupIngressResponse> RevokeClusterSecurityGroupIngressAsync(RevokeClusterSecurityGroupIngressRequest request, CancellationToken cancellationToken);
    internal virtual RevokeEndpointAccessResponse RevokeEndpointAccess(RevokeEndpointAccessRequest request);
    public virtual Task`1<RevokeEndpointAccessResponse> RevokeEndpointAccessAsync(RevokeEndpointAccessRequest request, CancellationToken cancellationToken);
    internal virtual RevokeSnapshotAccessResponse RevokeSnapshotAccess(RevokeSnapshotAccessRequest request);
    public virtual Task`1<RevokeSnapshotAccessResponse> RevokeSnapshotAccessAsync(RevokeSnapshotAccessRequest request, CancellationToken cancellationToken);
    internal virtual RotateEncryptionKeyResponse RotateEncryptionKey(RotateEncryptionKeyRequest request);
    public virtual Task`1<RotateEncryptionKeyResponse> RotateEncryptionKeyAsync(RotateEncryptionKeyRequest request, CancellationToken cancellationToken);
    internal virtual UpdatePartnerStatusResponse UpdatePartnerStatus(UpdatePartnerStatusRequest request);
    public virtual Task`1<UpdatePartnerStatusResponse> UpdatePartnerStatusAsync(UpdatePartnerStatusRequest request, CancellationToken cancellationToken);
    public sealed virtual Endpoint DetermineServiceOperationEndpoint(AmazonWebServiceRequest request);
    private sealed virtual override IClientConfig Amazon.Runtime.IAmazonService.get_Config();
}
[AWSSignerTypeAttribute("v4")]
public class Amazon.Redshift.AmazonRedshiftConfig : ClientConfig {
    private static string UserAgentString;
    private static AmazonRedshiftEndpointResolver EndpointResolver;
    private string _userAgent;
    public static string ServiceId { get; }
    public string RegionEndpointServiceName { get; }
    public string ServiceVersion { get; }
    public string UserAgent { get; }
    private static AmazonRedshiftConfig();
    public static string get_ServiceId();
    public virtual string get_RegionEndpointServiceName();
    public virtual string get_ServiceVersion();
    public virtual string get_UserAgent();
    public virtual Endpoint DetermineServiceOperationEndpoint(ServiceOperationEndpointParameters parameters);
}
public static class Amazon.Redshift.AmazonRedshiftDefaultConfiguration : object {
    [CompilerGeneratedAttribute]
private static IDefaultConfiguration <Standard>k__BackingField;
    [CompilerGeneratedAttribute]
private static IDefaultConfiguration <InRegion>k__BackingField;
    [CompilerGeneratedAttribute]
private static IDefaultConfiguration <CrossRegion>k__BackingField;
    [CompilerGeneratedAttribute]
private static IDefaultConfiguration <Mobile>k__BackingField;
    [CompilerGeneratedAttribute]
private static IDefaultConfiguration <Auto>k__BackingField;
    public static IDefaultConfiguration Standard { get; }
    public static IDefaultConfiguration InRegion { get; }
    public static IDefaultConfiguration CrossRegion { get; }
    public static IDefaultConfiguration Mobile { get; }
    public static IDefaultConfiguration Auto { get; }
    private static AmazonRedshiftDefaultConfiguration();
    public static ReadOnlyCollection`1<IDefaultConfiguration> GetAllConfigurations();
    [CompilerGeneratedAttribute]
public static IDefaultConfiguration get_Standard();
    [CompilerGeneratedAttribute]
public static IDefaultConfiguration get_InRegion();
    [CompilerGeneratedAttribute]
public static IDefaultConfiguration get_CrossRegion();
    [CompilerGeneratedAttribute]
public static IDefaultConfiguration get_Mobile();
    [CompilerGeneratedAttribute]
public static IDefaultConfiguration get_Auto();
}
public class Amazon.Redshift.AmazonRedshiftException : AmazonServiceException {
    public AmazonRedshiftException(string message);
    public AmazonRedshiftException(string message, Exception innerException);
    public AmazonRedshiftException(Exception innerException);
    public AmazonRedshiftException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public AmazonRedshiftException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Redshift.AmazonRedshiftRequest : AmazonWebServiceRequest {
}
public class Amazon.Redshift.AquaConfigurationStatus : ConstantClass {
    public static AquaConfigurationStatus Auto;
    public static AquaConfigurationStatus Disabled;
    public static AquaConfigurationStatus Enabled;
    public AquaConfigurationStatus(string value);
    private static AquaConfigurationStatus();
    public static AquaConfigurationStatus FindValue(string value);
    public static AquaConfigurationStatus op_Implicit(string value);
}
public class Amazon.Redshift.AquaStatus : ConstantClass {
    public static AquaStatus Applying;
    public static AquaStatus Disabled;
    public static AquaStatus Enabled;
    public AquaStatus(string value);
    private static AquaStatus();
    public static AquaStatus FindValue(string value);
    public static AquaStatus op_Implicit(string value);
}
public class Amazon.Redshift.AuthorizationStatus : ConstantClass {
    public static AuthorizationStatus Authorized;
    public static AuthorizationStatus Revoking;
    public AuthorizationStatus(string value);
    private static AuthorizationStatus();
    public static AuthorizationStatus FindValue(string value);
    public static AuthorizationStatus op_Implicit(string value);
}
public class Amazon.Redshift.DataShareStatus : ConstantClass {
    public static DataShareStatus ACTIVE;
    public static DataShareStatus AUTHORIZED;
    public static DataShareStatus AVAILABLE;
    public static DataShareStatus DEAUTHORIZED;
    public static DataShareStatus PENDING_AUTHORIZATION;
    public static DataShareStatus REJECTED;
    public DataShareStatus(string value);
    private static DataShareStatus();
    public static DataShareStatus FindValue(string value);
    public static DataShareStatus op_Implicit(string value);
}
public class Amazon.Redshift.DataShareStatusForConsumer : ConstantClass {
    public static DataShareStatusForConsumer ACTIVE;
    public static DataShareStatusForConsumer AVAILABLE;
    public DataShareStatusForConsumer(string value);
    private static DataShareStatusForConsumer();
    public static DataShareStatusForConsumer FindValue(string value);
    public static DataShareStatusForConsumer op_Implicit(string value);
}
public class Amazon.Redshift.DataShareStatusForProducer : ConstantClass {
    public static DataShareStatusForProducer ACTIVE;
    public static DataShareStatusForProducer AUTHORIZED;
    public static DataShareStatusForProducer DEAUTHORIZED;
    public static DataShareStatusForProducer PENDING_AUTHORIZATION;
    public static DataShareStatusForProducer REJECTED;
    public DataShareStatusForProducer(string value);
    private static DataShareStatusForProducer();
    public static DataShareStatusForProducer FindValue(string value);
    public static DataShareStatusForProducer op_Implicit(string value);
}
public class Amazon.Redshift.Endpoints.RedshiftEndpointParameters : EndpointParameters {
    public string Region { get; public set; }
    public Nullable`1<bool> UseDualStack { get; public set; }
    public Nullable`1<bool> UseFIPS { get; public set; }
    public string Endpoint { get; public set; }
    public string get_Region();
    public void set_Region(string value);
    public Nullable`1<bool> get_UseDualStack();
    public void set_UseDualStack(Nullable`1<bool> value);
    public Nullable`1<bool> get_UseFIPS();
    public void set_UseFIPS(Nullable`1<bool> value);
    public string get_Endpoint();
    public void set_Endpoint(string value);
}
public interface Amazon.Redshift.IAmazonRedshift {
    public IRedshiftPaginatorFactory Paginators { get; }
    public abstract virtual IRedshiftPaginatorFactory get_Paginators();
    public abstract virtual Task`1<AcceptReservedNodeExchangeResponse> AcceptReservedNodeExchangeAsync(AcceptReservedNodeExchangeRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<AddPartnerResponse> AddPartnerAsync(AddPartnerRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<AssociateDataShareConsumerResponse> AssociateDataShareConsumerAsync(AssociateDataShareConsumerRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<AuthorizeClusterSecurityGroupIngressResponse> AuthorizeClusterSecurityGroupIngressAsync(AuthorizeClusterSecurityGroupIngressRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<AuthorizeDataShareResponse> AuthorizeDataShareAsync(AuthorizeDataShareRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<AuthorizeEndpointAccessResponse> AuthorizeEndpointAccessAsync(AuthorizeEndpointAccessRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<AuthorizeSnapshotAccessResponse> AuthorizeSnapshotAccessAsync(AuthorizeSnapshotAccessRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<BatchDeleteClusterSnapshotsResponse> BatchDeleteClusterSnapshotsAsync(BatchDeleteClusterSnapshotsRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<BatchModifyClusterSnapshotsResponse> BatchModifyClusterSnapshotsAsync(BatchModifyClusterSnapshotsRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<CancelResizeResponse> CancelResizeAsync(CancelResizeRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<CopyClusterSnapshotResponse> CopyClusterSnapshotAsync(CopyClusterSnapshotRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<CreateAuthenticationProfileResponse> CreateAuthenticationProfileAsync(CreateAuthenticationProfileRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<CreateClusterResponse> CreateClusterAsync(CreateClusterRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<CreateClusterParameterGroupResponse> CreateClusterParameterGroupAsync(CreateClusterParameterGroupRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<CreateClusterSecurityGroupResponse> CreateClusterSecurityGroupAsync(CreateClusterSecurityGroupRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<CreateClusterSnapshotResponse> CreateClusterSnapshotAsync(CreateClusterSnapshotRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<CreateClusterSubnetGroupResponse> CreateClusterSubnetGroupAsync(CreateClusterSubnetGroupRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<CreateCustomDomainAssociationResponse> CreateCustomDomainAssociationAsync(CreateCustomDomainAssociationRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<CreateEndpointAccessResponse> CreateEndpointAccessAsync(CreateEndpointAccessRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<CreateEventSubscriptionResponse> CreateEventSubscriptionAsync(CreateEventSubscriptionRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<CreateHsmClientCertificateResponse> CreateHsmClientCertificateAsync(CreateHsmClientCertificateRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<CreateHsmConfigurationResponse> CreateHsmConfigurationAsync(CreateHsmConfigurationRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<CreateRedshiftIdcApplicationResponse> CreateRedshiftIdcApplicationAsync(CreateRedshiftIdcApplicationRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<CreateScheduledActionResponse> CreateScheduledActionAsync(CreateScheduledActionRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<CreateSnapshotCopyGrantResponse> CreateSnapshotCopyGrantAsync(CreateSnapshotCopyGrantRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<CreateSnapshotScheduleResponse> CreateSnapshotScheduleAsync(CreateSnapshotScheduleRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<CreateTagsResponse> CreateTagsAsync(CreateTagsRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<CreateUsageLimitResponse> CreateUsageLimitAsync(CreateUsageLimitRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeauthorizeDataShareResponse> DeauthorizeDataShareAsync(DeauthorizeDataShareRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeleteAuthenticationProfileResponse> DeleteAuthenticationProfileAsync(DeleteAuthenticationProfileRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeleteClusterResponse> DeleteClusterAsync(DeleteClusterRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeleteClusterParameterGroupResponse> DeleteClusterParameterGroupAsync(DeleteClusterParameterGroupRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeleteClusterSecurityGroupResponse> DeleteClusterSecurityGroupAsync(DeleteClusterSecurityGroupRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeleteClusterSnapshotResponse> DeleteClusterSnapshotAsync(DeleteClusterSnapshotRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeleteClusterSubnetGroupResponse> DeleteClusterSubnetGroupAsync(DeleteClusterSubnetGroupRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeleteCustomDomainAssociationResponse> DeleteCustomDomainAssociationAsync(DeleteCustomDomainAssociationRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeleteEndpointAccessResponse> DeleteEndpointAccessAsync(DeleteEndpointAccessRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeleteEventSubscriptionResponse> DeleteEventSubscriptionAsync(DeleteEventSubscriptionRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeleteHsmClientCertificateResponse> DeleteHsmClientCertificateAsync(DeleteHsmClientCertificateRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeleteHsmConfigurationResponse> DeleteHsmConfigurationAsync(DeleteHsmConfigurationRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeletePartnerResponse> DeletePartnerAsync(DeletePartnerRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeleteRedshiftIdcApplicationResponse> DeleteRedshiftIdcApplicationAsync(DeleteRedshiftIdcApplicationRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeleteResourcePolicyResponse> DeleteResourcePolicyAsync(DeleteResourcePolicyRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeleteScheduledActionResponse> DeleteScheduledActionAsync(DeleteScheduledActionRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeleteSnapshotCopyGrantResponse> DeleteSnapshotCopyGrantAsync(DeleteSnapshotCopyGrantRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeleteSnapshotScheduleResponse> DeleteSnapshotScheduleAsync(DeleteSnapshotScheduleRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeleteTagsResponse> DeleteTagsAsync(DeleteTagsRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeleteUsageLimitResponse> DeleteUsageLimitAsync(DeleteUsageLimitRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DescribeAccountAttributesResponse> DescribeAccountAttributesAsync(DescribeAccountAttributesRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DescribeAuthenticationProfilesResponse> DescribeAuthenticationProfilesAsync(DescribeAuthenticationProfilesRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DescribeClusterDbRevisionsResponse> DescribeClusterDbRevisionsAsync(DescribeClusterDbRevisionsRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DescribeClusterParameterGroupsResponse> DescribeClusterParameterGroupsAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<DescribeClusterParameterGroupsResponse> DescribeClusterParameterGroupsAsync(DescribeClusterParameterGroupsRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DescribeClusterParametersResponse> DescribeClusterParametersAsync(DescribeClusterParametersRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DescribeClustersResponse> DescribeClustersAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<DescribeClustersResponse> DescribeClustersAsync(DescribeClustersRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DescribeClusterSecurityGroupsResponse> DescribeClusterSecurityGroupsAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<DescribeClusterSecurityGroupsResponse> DescribeClusterSecurityGroupsAsync(DescribeClusterSecurityGroupsRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DescribeClusterSnapshotsResponse> DescribeClusterSnapshotsAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<DescribeClusterSnapshotsResponse> DescribeClusterSnapshotsAsync(DescribeClusterSnapshotsRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DescribeClusterSubnetGroupsResponse> DescribeClusterSubnetGroupsAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<DescribeClusterSubnetGroupsResponse> DescribeClusterSubnetGroupsAsync(DescribeClusterSubnetGroupsRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DescribeClusterTracksResponse> DescribeClusterTracksAsync(DescribeClusterTracksRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DescribeClusterVersionsResponse> DescribeClusterVersionsAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<DescribeClusterVersionsResponse> DescribeClusterVersionsAsync(DescribeClusterVersionsRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DescribeCustomDomainAssociationsResponse> DescribeCustomDomainAssociationsAsync(DescribeCustomDomainAssociationsRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DescribeDataSharesResponse> DescribeDataSharesAsync(DescribeDataSharesRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DescribeDataSharesForConsumerResponse> DescribeDataSharesForConsumerAsync(DescribeDataSharesForConsumerRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DescribeDataSharesForProducerResponse> DescribeDataSharesForProducerAsync(DescribeDataSharesForProducerRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DescribeDefaultClusterParametersResponse> DescribeDefaultClusterParametersAsync(DescribeDefaultClusterParametersRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DescribeEndpointAccessResponse> DescribeEndpointAccessAsync(DescribeEndpointAccessRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DescribeEndpointAuthorizationResponse> DescribeEndpointAuthorizationAsync(DescribeEndpointAuthorizationRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DescribeEventCategoriesResponse> DescribeEventCategoriesAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<DescribeEventCategoriesResponse> DescribeEventCategoriesAsync(DescribeEventCategoriesRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DescribeEventsResponse> DescribeEventsAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<DescribeEventsResponse> DescribeEventsAsync(DescribeEventsRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DescribeEventSubscriptionsResponse> DescribeEventSubscriptionsAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<DescribeEventSubscriptionsResponse> DescribeEventSubscriptionsAsync(DescribeEventSubscriptionsRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DescribeHsmClientCertificatesResponse> DescribeHsmClientCertificatesAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<DescribeHsmClientCertificatesResponse> DescribeHsmClientCertificatesAsync(DescribeHsmClientCertificatesRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DescribeHsmConfigurationsResponse> DescribeHsmConfigurationsAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<DescribeHsmConfigurationsResponse> DescribeHsmConfigurationsAsync(DescribeHsmConfigurationsRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DescribeInboundIntegrationsResponse> DescribeInboundIntegrationsAsync(DescribeInboundIntegrationsRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DescribeLoggingStatusResponse> DescribeLoggingStatusAsync(DescribeLoggingStatusRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DescribeNodeConfigurationOptionsResponse> DescribeNodeConfigurationOptionsAsync(DescribeNodeConfigurationOptionsRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DescribeOrderableClusterOptionsResponse> DescribeOrderableClusterOptionsAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<DescribeOrderableClusterOptionsResponse> DescribeOrderableClusterOptionsAsync(DescribeOrderableClusterOptionsRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DescribePartnersResponse> DescribePartnersAsync(DescribePartnersRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DescribeRedshiftIdcApplicationsResponse> DescribeRedshiftIdcApplicationsAsync(DescribeRedshiftIdcApplicationsRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DescribeReservedNodeExchangeStatusResponse> DescribeReservedNodeExchangeStatusAsync(DescribeReservedNodeExchangeStatusRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DescribeReservedNodeOfferingsResponse> DescribeReservedNodeOfferingsAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<DescribeReservedNodeOfferingsResponse> DescribeReservedNodeOfferingsAsync(DescribeReservedNodeOfferingsRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DescribeReservedNodesResponse> DescribeReservedNodesAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<DescribeReservedNodesResponse> DescribeReservedNodesAsync(DescribeReservedNodesRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DescribeResizeResponse> DescribeResizeAsync(DescribeResizeRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DescribeScheduledActionsResponse> DescribeScheduledActionsAsync(DescribeScheduledActionsRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DescribeSnapshotCopyGrantsResponse> DescribeSnapshotCopyGrantsAsync(DescribeSnapshotCopyGrantsRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DescribeSnapshotSchedulesResponse> DescribeSnapshotSchedulesAsync(DescribeSnapshotSchedulesRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DescribeStorageResponse> DescribeStorageAsync(DescribeStorageRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DescribeTableRestoreStatusResponse> DescribeTableRestoreStatusAsync(DescribeTableRestoreStatusRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DescribeTagsResponse> DescribeTagsAsync(DescribeTagsRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DescribeUsageLimitsResponse> DescribeUsageLimitsAsync(DescribeUsageLimitsRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DisableLoggingResponse> DisableLoggingAsync(DisableLoggingRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DisableSnapshotCopyResponse> DisableSnapshotCopyAsync(DisableSnapshotCopyRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DisassociateDataShareConsumerResponse> DisassociateDataShareConsumerAsync(DisassociateDataShareConsumerRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<EnableLoggingResponse> EnableLoggingAsync(EnableLoggingRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<EnableSnapshotCopyResponse> EnableSnapshotCopyAsync(EnableSnapshotCopyRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<FailoverPrimaryComputeResponse> FailoverPrimaryComputeAsync(FailoverPrimaryComputeRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<GetClusterCredentialsResponse> GetClusterCredentialsAsync(GetClusterCredentialsRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<GetClusterCredentialsWithIAMResponse> GetClusterCredentialsWithIAMAsync(GetClusterCredentialsWithIAMRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<GetReservedNodeExchangeConfigurationOptionsResponse> GetReservedNodeExchangeConfigurationOptionsAsync(GetReservedNodeExchangeConfigurationOptionsRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<GetReservedNodeExchangeOfferingsResponse> GetReservedNodeExchangeOfferingsAsync(GetReservedNodeExchangeOfferingsRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<GetResourcePolicyResponse> GetResourcePolicyAsync(GetResourcePolicyRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ListRecommendationsResponse> ListRecommendationsAsync(ListRecommendationsRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ModifyAquaConfigurationResponse> ModifyAquaConfigurationAsync(ModifyAquaConfigurationRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ModifyAuthenticationProfileResponse> ModifyAuthenticationProfileAsync(ModifyAuthenticationProfileRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ModifyClusterResponse> ModifyClusterAsync(ModifyClusterRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ModifyClusterDbRevisionResponse> ModifyClusterDbRevisionAsync(ModifyClusterDbRevisionRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ModifyClusterIamRolesResponse> ModifyClusterIamRolesAsync(ModifyClusterIamRolesRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ModifyClusterMaintenanceResponse> ModifyClusterMaintenanceAsync(ModifyClusterMaintenanceRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ModifyClusterParameterGroupResponse> ModifyClusterParameterGroupAsync(ModifyClusterParameterGroupRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ModifyClusterSnapshotResponse> ModifyClusterSnapshotAsync(ModifyClusterSnapshotRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ModifyClusterSnapshotScheduleResponse> ModifyClusterSnapshotScheduleAsync(ModifyClusterSnapshotScheduleRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ModifyClusterSubnetGroupResponse> ModifyClusterSubnetGroupAsync(ModifyClusterSubnetGroupRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ModifyCustomDomainAssociationResponse> ModifyCustomDomainAssociationAsync(ModifyCustomDomainAssociationRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ModifyEndpointAccessResponse> ModifyEndpointAccessAsync(ModifyEndpointAccessRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ModifyEventSubscriptionResponse> ModifyEventSubscriptionAsync(ModifyEventSubscriptionRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ModifyRedshiftIdcApplicationResponse> ModifyRedshiftIdcApplicationAsync(ModifyRedshiftIdcApplicationRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ModifyScheduledActionResponse> ModifyScheduledActionAsync(ModifyScheduledActionRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ModifySnapshotCopyRetentionPeriodResponse> ModifySnapshotCopyRetentionPeriodAsync(ModifySnapshotCopyRetentionPeriodRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ModifySnapshotScheduleResponse> ModifySnapshotScheduleAsync(ModifySnapshotScheduleRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ModifyUsageLimitResponse> ModifyUsageLimitAsync(ModifyUsageLimitRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<PauseClusterResponse> PauseClusterAsync(PauseClusterRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<PurchaseReservedNodeOfferingResponse> PurchaseReservedNodeOfferingAsync(PurchaseReservedNodeOfferingRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<PutResourcePolicyResponse> PutResourcePolicyAsync(PutResourcePolicyRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<RebootClusterResponse> RebootClusterAsync(RebootClusterRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<RejectDataShareResponse> RejectDataShareAsync(RejectDataShareRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ResetClusterParameterGroupResponse> ResetClusterParameterGroupAsync(ResetClusterParameterGroupRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ResizeClusterResponse> ResizeClusterAsync(ResizeClusterRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<RestoreFromClusterSnapshotResponse> RestoreFromClusterSnapshotAsync(RestoreFromClusterSnapshotRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<RestoreTableFromClusterSnapshotResponse> RestoreTableFromClusterSnapshotAsync(RestoreTableFromClusterSnapshotRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ResumeClusterResponse> ResumeClusterAsync(ResumeClusterRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<RevokeClusterSecurityGroupIngressResponse> RevokeClusterSecurityGroupIngressAsync(RevokeClusterSecurityGroupIngressRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<RevokeEndpointAccessResponse> RevokeEndpointAccessAsync(RevokeEndpointAccessRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<RevokeSnapshotAccessResponse> RevokeSnapshotAccessAsync(RevokeSnapshotAccessRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<RotateEncryptionKeyResponse> RotateEncryptionKeyAsync(RotateEncryptionKeyRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<UpdatePartnerStatusResponse> UpdatePartnerStatusAsync(UpdatePartnerStatusRequest request, CancellationToken cancellationToken);
    public abstract virtual Endpoint DetermineServiceOperationEndpoint(AmazonWebServiceRequest request);
    [DynamicDependencyAttribute("512", "Amazon.Redshift.AmazonRedshiftConfig")]
private static override ClientConfig Amazon.Runtime.IAmazonService.CreateDefaultClientConfig();
    [UnconditionalSuppressMessageAttribute("AssemblyLoadTrimming", "IL2026:RequiresUnreferencedCode")]
private static override IAmazonService Amazon.Runtime.IAmazonService.CreateDefaultServiceClient(AWSCredentials awsCredentials, ClientConfig clientConfig);
}
public class Amazon.Redshift.ImpactRankingType : ConstantClass {
    public static ImpactRankingType HIGH;
    public static ImpactRankingType LOW;
    public static ImpactRankingType MEDIUM;
    public ImpactRankingType(string value);
    private static ImpactRankingType();
    public static ImpactRankingType FindValue(string value);
    public static ImpactRankingType op_Implicit(string value);
}
public class Amazon.Redshift.Internal.AmazonRedshiftEndpointProvider : object {
    public sealed virtual Endpoint ResolveEndpoint(EndpointParameters parameters);
}
public class Amazon.Redshift.Internal.AmazonRedshiftEndpointResolver : BaseEndpointResolver {
    protected virtual void ServiceSpecificHandler(IExecutionContext executionContext, EndpointParameters parameters);
    protected virtual EndpointParameters MapEndpointsParameters(IRequestContext requestContext);
}
public class Amazon.Redshift.Internal.AmazonRedshiftMetadata : object {
    public string ServiceId { get; }
    public IDictionary`2<string, string> OperationNameMapping { get; }
    public sealed virtual string get_ServiceId();
    public sealed virtual IDictionary`2<string, string> get_OperationNameMapping();
}
public class Amazon.Redshift.LogDestinationType : ConstantClass {
    public static LogDestinationType Cloudwatch;
    public static LogDestinationType S3;
    public LogDestinationType(string value);
    private static LogDestinationType();
    public static LogDestinationType FindValue(string value);
    public static LogDestinationType op_Implicit(string value);
}
public class Amazon.Redshift.Mode : ConstantClass {
    public static Mode HighPerformance;
    public static Mode Standard;
    public Mode(string value);
    private static Mode();
    public static Mode FindValue(string value);
    public static Mode op_Implicit(string value);
}
public class Amazon.Redshift.Model.AcceptReservedNodeExchangeRequest : AmazonRedshiftRequest {
    private string _reservedNodeId;
    private string _targetReservedNodeOfferingId;
    [AWSPropertyAttribute]
public string ReservedNodeId { get; public set; }
    [AWSPropertyAttribute]
public string TargetReservedNodeOfferingId { get; public set; }
    public string get_ReservedNodeId();
    public void set_ReservedNodeId(string value);
    internal bool IsSetReservedNodeId();
    public string get_TargetReservedNodeOfferingId();
    public void set_TargetReservedNodeOfferingId(string value);
    internal bool IsSetTargetReservedNodeOfferingId();
}
public class Amazon.Redshift.Model.AcceptReservedNodeExchangeResponse : AmazonWebServiceResponse {
    private ReservedNode _exchangedReservedNode;
    public ReservedNode ExchangedReservedNode { get; public set; }
    public ReservedNode get_ExchangedReservedNode();
    public void set_ExchangedReservedNode(ReservedNode value);
    internal bool IsSetExchangedReservedNode();
}
public class Amazon.Redshift.Model.AccessToClusterDeniedException : AmazonRedshiftException {
    public AccessToClusterDeniedException(string message);
    public AccessToClusterDeniedException(string message, Exception innerException);
    public AccessToClusterDeniedException(Exception innerException);
    public AccessToClusterDeniedException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public AccessToClusterDeniedException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Redshift.Model.AccessToSnapshotDeniedException : AmazonRedshiftException {
    public AccessToSnapshotDeniedException(string message);
    public AccessToSnapshotDeniedException(string message, Exception innerException);
    public AccessToSnapshotDeniedException(Exception innerException);
    public AccessToSnapshotDeniedException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public AccessToSnapshotDeniedException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Redshift.Model.AccountAttribute : object {
    private string _attributeName;
    private List`1<AttributeValueTarget> _attributeValues;
    [AWSPropertyAttribute]
public string AttributeName { get; public set; }
    public List`1<AttributeValueTarget> AttributeValues { get; public set; }
    public string get_AttributeName();
    public void set_AttributeName(string value);
    internal bool IsSetAttributeName();
    public List`1<AttributeValueTarget> get_AttributeValues();
    public void set_AttributeValues(List`1<AttributeValueTarget> value);
    internal bool IsSetAttributeValues();
}
public class Amazon.Redshift.Model.AccountWithRestoreAccess : object {
    private string _accountAlias;
    private string _accountId;
    [AWSPropertyAttribute]
public string AccountAlias { get; public set; }
    [AWSPropertyAttribute]
public string AccountId { get; public set; }
    public string get_AccountAlias();
    public void set_AccountAlias(string value);
    internal bool IsSetAccountAlias();
    public string get_AccountId();
    public void set_AccountId(string value);
    internal bool IsSetAccountId();
}
public class Amazon.Redshift.Model.AddPartnerRequest : AmazonRedshiftRequest {
    private string _accountId;
    private string _clusterIdentifier;
    private string _databaseName;
    private string _partnerName;
    [AWSPropertyAttribute]
public string AccountId { get; public set; }
    [AWSPropertyAttribute]
public string ClusterIdentifier { get; public set; }
    [AWSPropertyAttribute]
public string DatabaseName { get; public set; }
    [AWSPropertyAttribute]
public string PartnerName { get; public set; }
    public string get_AccountId();
    public void set_AccountId(string value);
    internal bool IsSetAccountId();
    public string get_ClusterIdentifier();
    public void set_ClusterIdentifier(string value);
    internal bool IsSetClusterIdentifier();
    public string get_DatabaseName();
    public void set_DatabaseName(string value);
    internal bool IsSetDatabaseName();
    public string get_PartnerName();
    public void set_PartnerName(string value);
    internal bool IsSetPartnerName();
}
public class Amazon.Redshift.Model.AddPartnerResponse : AmazonWebServiceResponse {
    private string _databaseName;
    private string _partnerName;
    [AWSPropertyAttribute]
public string DatabaseName { get; public set; }
    [AWSPropertyAttribute]
public string PartnerName { get; public set; }
    public string get_DatabaseName();
    public void set_DatabaseName(string value);
    internal bool IsSetDatabaseName();
    public string get_PartnerName();
    public void set_PartnerName(string value);
    internal bool IsSetPartnerName();
}
public class Amazon.Redshift.Model.AquaConfiguration : object {
    private AquaConfigurationStatus _aquaConfigurationStatus;
    private AquaStatus _aquaStatus;
    public AquaConfigurationStatus AquaConfigurationStatus { get; public set; }
    public AquaStatus AquaStatus { get; public set; }
    public AquaConfigurationStatus get_AquaConfigurationStatus();
    public void set_AquaConfigurationStatus(AquaConfigurationStatus value);
    internal bool IsSetAquaConfigurationStatus();
    public AquaStatus get_AquaStatus();
    public void set_AquaStatus(AquaStatus value);
    internal bool IsSetAquaStatus();
}
public class Amazon.Redshift.Model.AssociateDataShareConsumerRequest : AmazonRedshiftRequest {
    private Nullable`1<bool> _allowWrites;
    private Nullable`1<bool> _associateEntireAccount;
    private string _consumerArn;
    private string _consumerRegion;
    private string _dataShareArn;
    public Nullable`1<bool> AllowWrites { get; public set; }
    public Nullable`1<bool> AssociateEntireAccount { get; public set; }
    [AWSPropertyAttribute]
public string ConsumerArn { get; public set; }
    [AWSPropertyAttribute]
public string ConsumerRegion { get; public set; }
    [AWSPropertyAttribute]
public string DataShareArn { get; public set; }
    public Nullable`1<bool> get_AllowWrites();
    public void set_AllowWrites(Nullable`1<bool> value);
    internal bool IsSetAllowWrites();
    public Nullable`1<bool> get_AssociateEntireAccount();
    public void set_AssociateEntireAccount(Nullable`1<bool> value);
    internal bool IsSetAssociateEntireAccount();
    public string get_ConsumerArn();
    public void set_ConsumerArn(string value);
    internal bool IsSetConsumerArn();
    public string get_ConsumerRegion();
    public void set_ConsumerRegion(string value);
    internal bool IsSetConsumerRegion();
    public string get_DataShareArn();
    public void set_DataShareArn(string value);
    internal bool IsSetDataShareArn();
}
public class Amazon.Redshift.Model.AssociateDataShareConsumerResponse : AmazonWebServiceResponse {
    private Nullable`1<bool> _allowPubliclyAccessibleConsumers;
    private string _dataShareArn;
    private List`1<DataShareAssociation> _dataShareAssociations;
    private string _managedBy;
    private string _producerArn;
    public Nullable`1<bool> AllowPubliclyAccessibleConsumers { get; public set; }
    [AWSPropertyAttribute]
public string DataShareArn { get; public set; }
    public List`1<DataShareAssociation> DataShareAssociations { get; public set; }
    [AWSPropertyAttribute]
public string ManagedBy { get; public set; }
    [AWSPropertyAttribute]
public string ProducerArn { get; public set; }
    public Nullable`1<bool> get_AllowPubliclyAccessibleConsumers();
    public void set_AllowPubliclyAccessibleConsumers(Nullable`1<bool> value);
    internal bool IsSetAllowPubliclyAccessibleConsumers();
    public string get_DataShareArn();
    public void set_DataShareArn(string value);
    internal bool IsSetDataShareArn();
    public List`1<DataShareAssociation> get_DataShareAssociations();
    public void set_DataShareAssociations(List`1<DataShareAssociation> value);
    internal bool IsSetDataShareAssociations();
    public string get_ManagedBy();
    public void set_ManagedBy(string value);
    internal bool IsSetManagedBy();
    public string get_ProducerArn();
    public void set_ProducerArn(string value);
    internal bool IsSetProducerArn();
}
public class Amazon.Redshift.Model.Association : object {
    private List`1<CertificateAssociation> _certificateAssociations;
    private string _customDomainCertificateArn;
    private Nullable`1<DateTime> _customDomainCertificateExpiryDate;
    public List`1<CertificateAssociation> CertificateAssociations { get; public set; }
    [AWSPropertyAttribute]
public string CustomDomainCertificateArn { get; public set; }
    public Nullable`1<DateTime> CustomDomainCertificateExpiryDate { get; public set; }
    public List`1<CertificateAssociation> get_CertificateAssociations();
    public void set_CertificateAssociations(List`1<CertificateAssociation> value);
    internal bool IsSetCertificateAssociations();
    public string get_CustomDomainCertificateArn();
    public void set_CustomDomainCertificateArn(string value);
    internal bool IsSetCustomDomainCertificateArn();
    public Nullable`1<DateTime> get_CustomDomainCertificateExpiryDate();
    public void set_CustomDomainCertificateExpiryDate(Nullable`1<DateTime> value);
    internal bool IsSetCustomDomainCertificateExpiryDate();
}
public class Amazon.Redshift.Model.AttributeValueTarget : object {
    private string _attributeValue;
    [AWSPropertyAttribute]
public string AttributeValue { get; public set; }
    public string get_AttributeValue();
    public void set_AttributeValue(string value);
    internal bool IsSetAttributeValue();
}
public class Amazon.Redshift.Model.AuthenticationProfile : object {
    private string _authenticationProfileContent;
    private string _authenticationProfileName;
    [AWSPropertyAttribute]
public string AuthenticationProfileContent { get; public set; }
    [AWSPropertyAttribute]
public string AuthenticationProfileName { get; public set; }
    public string get_AuthenticationProfileContent();
    public void set_AuthenticationProfileContent(string value);
    internal bool IsSetAuthenticationProfileContent();
    public string get_AuthenticationProfileName();
    public void set_AuthenticationProfileName(string value);
    internal bool IsSetAuthenticationProfileName();
}
public class Amazon.Redshift.Model.AuthenticationProfileAlreadyExistsException : AmazonRedshiftException {
    public AuthenticationProfileAlreadyExistsException(string message);
    public AuthenticationProfileAlreadyExistsException(string message, Exception innerException);
    public AuthenticationProfileAlreadyExistsException(Exception innerException);
    public AuthenticationProfileAlreadyExistsException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public AuthenticationProfileAlreadyExistsException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Redshift.Model.AuthenticationProfileNotFoundException : AmazonRedshiftException {
    public AuthenticationProfileNotFoundException(string message);
    public AuthenticationProfileNotFoundException(string message, Exception innerException);
    public AuthenticationProfileNotFoundException(Exception innerException);
    public AuthenticationProfileNotFoundException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public AuthenticationProfileNotFoundException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Redshift.Model.AuthenticationProfileQuotaExceededException : AmazonRedshiftException {
    public AuthenticationProfileQuotaExceededException(string message);
    public AuthenticationProfileQuotaExceededException(string message, Exception innerException);
    public AuthenticationProfileQuotaExceededException(Exception innerException);
    public AuthenticationProfileQuotaExceededException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public AuthenticationProfileQuotaExceededException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Redshift.Model.AuthorizationAlreadyExistsException : AmazonRedshiftException {
    public AuthorizationAlreadyExistsException(string message);
    public AuthorizationAlreadyExistsException(string message, Exception innerException);
    public AuthorizationAlreadyExistsException(Exception innerException);
    public AuthorizationAlreadyExistsException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public AuthorizationAlreadyExistsException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Redshift.Model.AuthorizationNotFoundException : AmazonRedshiftException {
    public AuthorizationNotFoundException(string message);
    public AuthorizationNotFoundException(string message, Exception innerException);
    public AuthorizationNotFoundException(Exception innerException);
    public AuthorizationNotFoundException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public AuthorizationNotFoundException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Redshift.Model.AuthorizationQuotaExceededException : AmazonRedshiftException {
    public AuthorizationQuotaExceededException(string message);
    public AuthorizationQuotaExceededException(string message, Exception innerException);
    public AuthorizationQuotaExceededException(Exception innerException);
    public AuthorizationQuotaExceededException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public AuthorizationQuotaExceededException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Redshift.Model.AuthorizeClusterSecurityGroupIngressRequest : AmazonRedshiftRequest {
    private string _cidrip;
    private string _clusterSecurityGroupName;
    private string _ec2SecurityGroupName;
    private string _ec2SecurityGroupOwnerId;
    [AWSPropertyAttribute]
public string CIDRIP { get; public set; }
    [AWSPropertyAttribute]
public string ClusterSecurityGroupName { get; public set; }
    [AWSPropertyAttribute]
public string EC2SecurityGroupName { get; public set; }
    [AWSPropertyAttribute]
public string EC2SecurityGroupOwnerId { get; public set; }
    public string get_CIDRIP();
    public void set_CIDRIP(string value);
    internal bool IsSetCIDRIP();
    public string get_ClusterSecurityGroupName();
    public void set_ClusterSecurityGroupName(string value);
    internal bool IsSetClusterSecurityGroupName();
    public string get_EC2SecurityGroupName();
    public void set_EC2SecurityGroupName(string value);
    internal bool IsSetEC2SecurityGroupName();
    public string get_EC2SecurityGroupOwnerId();
    public void set_EC2SecurityGroupOwnerId(string value);
    internal bool IsSetEC2SecurityGroupOwnerId();
}
public class Amazon.Redshift.Model.AuthorizeClusterSecurityGroupIngressResponse : AmazonWebServiceResponse {
    private ClusterSecurityGroup _clusterSecurityGroup;
    public ClusterSecurityGroup ClusterSecurityGroup { get; public set; }
    public ClusterSecurityGroup get_ClusterSecurityGroup();
    public void set_ClusterSecurityGroup(ClusterSecurityGroup value);
    internal bool IsSetClusterSecurityGroup();
}
public class Amazon.Redshift.Model.AuthorizeDataShareRequest : AmazonRedshiftRequest {
    private Nullable`1<bool> _allowWrites;
    private string _consumerIdentifier;
    private string _dataShareArn;
    public Nullable`1<bool> AllowWrites { get; public set; }
    [AWSPropertyAttribute]
public string ConsumerIdentifier { get; public set; }
    [AWSPropertyAttribute]
public string DataShareArn { get; public set; }
    public Nullable`1<bool> get_AllowWrites();
    public void set_AllowWrites(Nullable`1<bool> value);
    internal bool IsSetAllowWrites();
    public string get_ConsumerIdentifier();
    public void set_ConsumerIdentifier(string value);
    internal bool IsSetConsumerIdentifier();
    public string get_DataShareArn();
    public void set_DataShareArn(string value);
    internal bool IsSetDataShareArn();
}
public class Amazon.Redshift.Model.AuthorizeDataShareResponse : AmazonWebServiceResponse {
    private Nullable`1<bool> _allowPubliclyAccessibleConsumers;
    private string _dataShareArn;
    private List`1<DataShareAssociation> _dataShareAssociations;
    private string _managedBy;
    private string _producerArn;
    public Nullable`1<bool> AllowPubliclyAccessibleConsumers { get; public set; }
    [AWSPropertyAttribute]
public string DataShareArn { get; public set; }
    public List`1<DataShareAssociation> DataShareAssociations { get; public set; }
    [AWSPropertyAttribute]
public string ManagedBy { get; public set; }
    [AWSPropertyAttribute]
public string ProducerArn { get; public set; }
    public Nullable`1<bool> get_AllowPubliclyAccessibleConsumers();
    public void set_AllowPubliclyAccessibleConsumers(Nullable`1<bool> value);
    internal bool IsSetAllowPubliclyAccessibleConsumers();
    public string get_DataShareArn();
    public void set_DataShareArn(string value);
    internal bool IsSetDataShareArn();
    public List`1<DataShareAssociation> get_DataShareAssociations();
    public void set_DataShareAssociations(List`1<DataShareAssociation> value);
    internal bool IsSetDataShareAssociations();
    public string get_ManagedBy();
    public void set_ManagedBy(string value);
    internal bool IsSetManagedBy();
    public string get_ProducerArn();
    public void set_ProducerArn(string value);
    internal bool IsSetProducerArn();
}
public class Amazon.Redshift.Model.AuthorizedTokenIssuer : object {
    private List`1<string> _authorizedAudiencesList;
    private string _trustedTokenIssuerArn;
    public List`1<string> AuthorizedAudiencesList { get; public set; }
    [AWSPropertyAttribute]
public string TrustedTokenIssuerArn { get; public set; }
    public List`1<string> get_AuthorizedAudiencesList();
    public void set_AuthorizedAudiencesList(List`1<string> value);
    internal bool IsSetAuthorizedAudiencesList();
    public string get_TrustedTokenIssuerArn();
    public void set_TrustedTokenIssuerArn(string value);
    internal bool IsSetTrustedTokenIssuerArn();
}
public class Amazon.Redshift.Model.AuthorizeEndpointAccessRequest : AmazonRedshiftRequest {
    private string _account;
    private string _clusterIdentifier;
    private List`1<string> _vpcIds;
    [AWSPropertyAttribute]
public string Account { get; public set; }
    [AWSPropertyAttribute]
public string ClusterIdentifier { get; public set; }
    public List`1<string> VpcIds { get; public set; }
    public string get_Account();
    public void set_Account(string value);
    internal bool IsSetAccount();
    public string get_ClusterIdentifier();
    public void set_ClusterIdentifier(string value);
    internal bool IsSetClusterIdentifier();
    public List`1<string> get_VpcIds();
    public void set_VpcIds(List`1<string> value);
    internal bool IsSetVpcIds();
}
public class Amazon.Redshift.Model.AuthorizeEndpointAccessResponse : AmazonWebServiceResponse {
    private Nullable`1<bool> _allowedAllVPCs;
    private List`1<string> _allowedVPCs;
    private Nullable`1<DateTime> _authorizeTime;
    private string _clusterIdentifier;
    private string _clusterStatus;
    private Nullable`1<int> _endpointCount;
    private string _grantee;
    private string _grantor;
    private AuthorizationStatus _status;
    public Nullable`1<bool> AllowedAllVPCs { get; public set; }
    public List`1<string> AllowedVPCs { get; public set; }
    public Nullable`1<DateTime> AuthorizeTime { get; public set; }
    [AWSPropertyAttribute]
public string ClusterIdentifier { get; public set; }
    [AWSPropertyAttribute]
public string ClusterStatus { get; public set; }
    public Nullable`1<int> EndpointCount { get; public set; }
    [AWSPropertyAttribute]
public string Grantee { get; public set; }
    [AWSPropertyAttribute]
public string Grantor { get; public set; }
    public AuthorizationStatus Status { get; public set; }
    public Nullable`1<bool> get_AllowedAllVPCs();
    public void set_AllowedAllVPCs(Nullable`1<bool> value);
    internal bool IsSetAllowedAllVPCs();
    public List`1<string> get_AllowedVPCs();
    public void set_AllowedVPCs(List`1<string> value);
    internal bool IsSetAllowedVPCs();
    public Nullable`1<DateTime> get_AuthorizeTime();
    public void set_AuthorizeTime(Nullable`1<DateTime> value);
    internal bool IsSetAuthorizeTime();
    public string get_ClusterIdentifier();
    public void set_ClusterIdentifier(string value);
    internal bool IsSetClusterIdentifier();
    public string get_ClusterStatus();
    public void set_ClusterStatus(string value);
    internal bool IsSetClusterStatus();
    public Nullable`1<int> get_EndpointCount();
    public void set_EndpointCount(Nullable`1<int> value);
    internal bool IsSetEndpointCount();
    public string get_Grantee();
    public void set_Grantee(string value);
    internal bool IsSetGrantee();
    public string get_Grantor();
    public void set_Grantor(string value);
    internal bool IsSetGrantor();
    public AuthorizationStatus get_Status();
    public void set_Status(AuthorizationStatus value);
    internal bool IsSetStatus();
}
public class Amazon.Redshift.Model.AuthorizeSnapshotAccessRequest : AmazonRedshiftRequest {
    private string _accountWithRestoreAccess;
    private string _snapshotArn;
    private string _snapshotClusterIdentifier;
    private string _snapshotIdentifier;
    [AWSPropertyAttribute]
public string AccountWithRestoreAccess { get; public set; }
    [AWSPropertyAttribute]
public string SnapshotArn { get; public set; }
    [AWSPropertyAttribute]
public string SnapshotClusterIdentifier { get; public set; }
    [AWSPropertyAttribute]
public string SnapshotIdentifier { get; public set; }
    public string get_AccountWithRestoreAccess();
    public void set_AccountWithRestoreAccess(string value);
    internal bool IsSetAccountWithRestoreAccess();
    public string get_SnapshotArn();
    public void set_SnapshotArn(string value);
    internal bool IsSetSnapshotArn();
    public string get_SnapshotClusterIdentifier();
    public void set_SnapshotClusterIdentifier(string value);
    internal bool IsSetSnapshotClusterIdentifier();
    public string get_SnapshotIdentifier();
    public void set_SnapshotIdentifier(string value);
    internal bool IsSetSnapshotIdentifier();
}
public class Amazon.Redshift.Model.AuthorizeSnapshotAccessResponse : AmazonWebServiceResponse {
    private Snapshot _snapshot;
    public Snapshot Snapshot { get; public set; }
    public Snapshot get_Snapshot();
    public void set_Snapshot(Snapshot value);
    internal bool IsSetSnapshot();
}
public class Amazon.Redshift.Model.AvailabilityZone : object {
    private string _name;
    private List`1<SupportedPlatform> _supportedPlatforms;
    [AWSPropertyAttribute]
public string Name { get; public set; }
    public List`1<SupportedPlatform> SupportedPlatforms { get; public set; }
    public string get_Name();
    public void set_Name(string value);
    internal bool IsSetName();
    public List`1<SupportedPlatform> get_SupportedPlatforms();
    public void set_SupportedPlatforms(List`1<SupportedPlatform> value);
    internal bool IsSetSupportedPlatforms();
}
public class Amazon.Redshift.Model.BatchDeleteClusterSnapshotsRequest : AmazonRedshiftRequest {
    private List`1<DeleteClusterSnapshotMessage> _identifiers;
    [AWSPropertyAttribute]
public List`1<DeleteClusterSnapshotMessage> Identifiers { get; public set; }
    public List`1<DeleteClusterSnapshotMessage> get_Identifiers();
    public void set_Identifiers(List`1<DeleteClusterSnapshotMessage> value);
    internal bool IsSetIdentifiers();
}
public class Amazon.Redshift.Model.BatchDeleteClusterSnapshotsResponse : AmazonWebServiceResponse {
    private List`1<SnapshotErrorMessage> _errors;
    private List`1<string> _resources;
    public List`1<SnapshotErrorMessage> Errors { get; public set; }
    public List`1<string> Resources { get; public set; }
    public List`1<SnapshotErrorMessage> get_Errors();
    public void set_Errors(List`1<SnapshotErrorMessage> value);
    internal bool IsSetErrors();
    public List`1<string> get_Resources();
    public void set_Resources(List`1<string> value);
    internal bool IsSetResources();
}
public class Amazon.Redshift.Model.BatchDeleteRequestSizeExceededException : AmazonRedshiftException {
    public BatchDeleteRequestSizeExceededException(string message);
    public BatchDeleteRequestSizeExceededException(string message, Exception innerException);
    public BatchDeleteRequestSizeExceededException(Exception innerException);
    public BatchDeleteRequestSizeExceededException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public BatchDeleteRequestSizeExceededException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Redshift.Model.BatchModifyClusterSnapshotsLimitExceededException : AmazonRedshiftException {
    public BatchModifyClusterSnapshotsLimitExceededException(string message);
    public BatchModifyClusterSnapshotsLimitExceededException(string message, Exception innerException);
    public BatchModifyClusterSnapshotsLimitExceededException(Exception innerException);
    public BatchModifyClusterSnapshotsLimitExceededException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public BatchModifyClusterSnapshotsLimitExceededException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Redshift.Model.BatchModifyClusterSnapshotsRequest : AmazonRedshiftRequest {
    private Nullable`1<bool> _force;
    private Nullable`1<int> _manualSnapshotRetentionPeriod;
    private List`1<string> _snapshotIdentifierList;
    public Nullable`1<bool> Force { get; public set; }
    public Nullable`1<int> ManualSnapshotRetentionPeriod { get; public set; }
    [AWSPropertyAttribute]
public List`1<string> SnapshotIdentifierList { get; public set; }
    public Nullable`1<bool> get_Force();
    public void set_Force(Nullable`1<bool> value);
    internal bool IsSetForce();
    public Nullable`1<int> get_ManualSnapshotRetentionPeriod();
    public void set_ManualSnapshotRetentionPeriod(Nullable`1<int> value);
    internal bool IsSetManualSnapshotRetentionPeriod();
    public List`1<string> get_SnapshotIdentifierList();
    public void set_SnapshotIdentifierList(List`1<string> value);
    internal bool IsSetSnapshotIdentifierList();
}
public class Amazon.Redshift.Model.BatchModifyClusterSnapshotsResponse : AmazonWebServiceResponse {
    private List`1<SnapshotErrorMessage> _errors;
    private List`1<string> _resources;
    public List`1<SnapshotErrorMessage> Errors { get; public set; }
    public List`1<string> Resources { get; public set; }
    public List`1<SnapshotErrorMessage> get_Errors();
    public void set_Errors(List`1<SnapshotErrorMessage> value);
    internal bool IsSetErrors();
    public List`1<string> get_Resources();
    public void set_Resources(List`1<string> value);
    internal bool IsSetResources();
}
public class Amazon.Redshift.Model.BucketNotFoundException : AmazonRedshiftException {
    public BucketNotFoundException(string message);
    public BucketNotFoundException(string message, Exception innerException);
    public BucketNotFoundException(Exception innerException);
    public BucketNotFoundException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public BucketNotFoundException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Redshift.Model.CancelResizeRequest : AmazonRedshiftRequest {
    private string _clusterIdentifier;
    [AWSPropertyAttribute]
public string ClusterIdentifier { get; public set; }
    public string get_ClusterIdentifier();
    public void set_ClusterIdentifier(string value);
    internal bool IsSetClusterIdentifier();
}
public class Amazon.Redshift.Model.CancelResizeResponse : AmazonWebServiceResponse {
    private Nullable`1<double> _avgResizeRateInMegaBytesPerSecond;
    private Nullable`1<double> _dataTransferProgressPercent;
    private Nullable`1<long> _elapsedTimeInSeconds;
    private Nullable`1<long> _estimatedTimeToCompletionInSeconds;
    private List`1<string> _importTablesCompleted;
    private List`1<string> _importTablesInProgress;
    private List`1<string> _importTablesNotStarted;
    private string _message;
    private Nullable`1<long> _progressInMegaBytes;
    private string _resizeType;
    private string _status;
    private string _targetClusterType;
    private string _targetEncryptionType;
    private string _targetNodeType;
    private Nullable`1<int> _targetNumberOfNodes;
    private Nullable`1<long> _totalResizeDataInMegaBytes;
    public Nullable`1<double> AvgResizeRateInMegaBytesPerSecond { get; public set; }
    public Nullable`1<double> DataTransferProgressPercent { get; public set; }
    public Nullable`1<long> ElapsedTimeInSeconds { get; public set; }
    public Nullable`1<long> EstimatedTimeToCompletionInSeconds { get; public set; }
    public List`1<string> ImportTablesCompleted { get; public set; }
    public List`1<string> ImportTablesInProgress { get; public set; }
    public List`1<string> ImportTablesNotStarted { get; public set; }
    [AWSPropertyAttribute]
public string Message { get; public set; }
    public Nullable`1<long> ProgressInMegaBytes { get; public set; }
    [AWSPropertyAttribute]
public string ResizeType { get; public set; }
    [AWSPropertyAttribute]
public string Status { get; public set; }
    [AWSPropertyAttribute]
public string TargetClusterType { get; public set; }
    [AWSPropertyAttribute]
public string TargetEncryptionType { get; public set; }
    [AWSPropertyAttribute]
public string TargetNodeType { get; public set; }
    public Nullable`1<int> TargetNumberOfNodes { get; public set; }
    public Nullable`1<long> TotalResizeDataInMegaBytes { get; public set; }
    public Nullable`1<double> get_AvgResizeRateInMegaBytesPerSecond();
    public void set_AvgResizeRateInMegaBytesPerSecond(Nullable`1<double> value);
    internal bool IsSetAvgResizeRateInMegaBytesPerSecond();
    public Nullable`1<double> get_DataTransferProgressPercent();
    public void set_DataTransferProgressPercent(Nullable`1<double> value);
    internal bool IsSetDataTransferProgressPercent();
    public Nullable`1<long> get_ElapsedTimeInSeconds();
    public void set_ElapsedTimeInSeconds(Nullable`1<long> value);
    internal bool IsSetElapsedTimeInSeconds();
    public Nullable`1<long> get_EstimatedTimeToCompletionInSeconds();
    public void set_EstimatedTimeToCompletionInSeconds(Nullable`1<long> value);
    internal bool IsSetEstimatedTimeToCompletionInSeconds();
    public List`1<string> get_ImportTablesCompleted();
    public void set_ImportTablesCompleted(List`1<string> value);
    internal bool IsSetImportTablesCompleted();
    public List`1<string> get_ImportTablesInProgress();
    public void set_ImportTablesInProgress(List`1<string> value);
    internal bool IsSetImportTablesInProgress();
    public List`1<string> get_ImportTablesNotStarted();
    public void set_ImportTablesNotStarted(List`1<string> value);
    internal bool IsSetImportTablesNotStarted();
    public string get_Message();
    public void set_Message(string value);
    internal bool IsSetMessage();
    public Nullable`1<long> get_ProgressInMegaBytes();
    public void set_ProgressInMegaBytes(Nullable`1<long> value);
    internal bool IsSetProgressInMegaBytes();
    public string get_ResizeType();
    public void set_ResizeType(string value);
    internal bool IsSetResizeType();
    public string get_Status();
    public void set_Status(string value);
    internal bool IsSetStatus();
    public string get_TargetClusterType();
    public void set_TargetClusterType(string value);
    internal bool IsSetTargetClusterType();
    public string get_TargetEncryptionType();
    public void set_TargetEncryptionType(string value);
    internal bool IsSetTargetEncryptionType();
    public string get_TargetNodeType();
    public void set_TargetNodeType(string value);
    internal bool IsSetTargetNodeType();
    public Nullable`1<int> get_TargetNumberOfNodes();
    public void set_TargetNumberOfNodes(Nullable`1<int> value);
    internal bool IsSetTargetNumberOfNodes();
    public Nullable`1<long> get_TotalResizeDataInMegaBytes();
    public void set_TotalResizeDataInMegaBytes(Nullable`1<long> value);
    internal bool IsSetTotalResizeDataInMegaBytes();
}
public class Amazon.Redshift.Model.CertificateAssociation : object {
    private string _clusterIdentifier;
    private string _customDomainName;
    [AWSPropertyAttribute]
public string ClusterIdentifier { get; public set; }
    [AWSPropertyAttribute]
public string CustomDomainName { get; public set; }
    public string get_ClusterIdentifier();
    public void set_ClusterIdentifier(string value);
    internal bool IsSetClusterIdentifier();
    public string get_CustomDomainName();
    public void set_CustomDomainName(string value);
    internal bool IsSetCustomDomainName();
}
public class Amazon.Redshift.Model.Cluster : object {
    private Nullable`1<bool> _allowVersionUpgrade;
    private AquaConfiguration _aquaConfiguration;
    private Nullable`1<int> _automatedSnapshotRetentionPeriod;
    private string _availabilityZone;
    private string _availabilityZoneRelocationStatus;
    private string _clusterAvailabilityStatus;
    private Nullable`1<DateTime> _clusterCreateTime;
    private string _clusterIdentifier;
    private string _clusterNamespaceArn;
    private List`1<ClusterNode> _clusterNodes;
    private List`1<ClusterParameterGroupStatus> _clusterParameterGroups;
    private string _clusterPublicKey;
    private string _clusterRevisionNumber;
    private List`1<ClusterSecurityGroupMembership> _clusterSecurityGroups;
    private ClusterSnapshotCopyStatus _clusterSnapshotCopyStatus;
    private string _clusterStatus;
    private string _clusterSubnetGroupName;
    private string _clusterVersion;
    private string _customDomainCertificateArn;
    private Nullable`1<DateTime> _customDomainCertificateExpiryDate;
    private string _customDomainName;
    private DataTransferProgress _dataTransferProgress;
    private string _dbName;
    private string _defaultIamRoleArn;
    private List`1<DeferredMaintenanceWindow> _deferredMaintenanceWindows;
    private ElasticIpStatus _elasticIpStatus;
    private string _elasticResizeNumberOfNodeOptions;
    private Nullable`1<bool> _encrypted;
    private Endpoint _endpoint;
    private Nullable`1<bool> _enhancedVpcRouting;
    private Nullable`1<DateTime> _expectedNextSnapshotScheduleTime;
    private string _expectedNextSnapshotScheduleTimeStatus;
    private HsmStatus _hsmStatus;
    private List`1<ClusterIamRole> _iamRoles;
    private string _ipAddressType;
    private string _kmsKeyId;
    private string _maintenanceTrackName;
    private Nullable`1<int> _manualSnapshotRetentionPeriod;
    private string _masterPasswordSecretArn;
    private string _masterPasswordSecretKmsKeyId;
    private string _masterUsername;
    private string _modifyStatus;
    private string _multiAZ;
    private SecondaryClusterInfo _multiAZSecondary;
    private Nullable`1<DateTime> _nextMaintenanceWindowStartTime;
    private string _nodeType;
    private Nullable`1<int> _numberOfNodes;
    private List`1<string> _pendingActions;
    private PendingModifiedValues _pendingModifiedValues;
    private string _preferredMaintenanceWindow;
    private Nullable`1<bool> _publiclyAccessible;
    private ReservedNodeExchangeStatus _reservedNodeExchangeStatus;
    private ResizeInfo _resizeInfo;
    private RestoreStatus _restoreStatus;
    private string _snapshotScheduleIdentifier;
    private ScheduleState _snapshotScheduleState;
    private List`1<Tag> _tags;
    private Nullable`1<long> _totalStorageCapacityInMegaBytes;
    private string _vpcId;
    private List`1<VpcSecurityGroupMembership> _vpcSecurityGroups;
    public Nullable`1<bool> AllowVersionUpgrade { get; public set; }
    public AquaConfiguration AquaConfiguration { get; public set; }
    public Nullable`1<int> AutomatedSnapshotRetentionPeriod { get; public set; }
    [AWSPropertyAttribute]
public string AvailabilityZone { get; public set; }
    [AWSPropertyAttribute]
public string AvailabilityZoneRelocationStatus { get; public set; }
    [AWSPropertyAttribute]
public string ClusterAvailabilityStatus { get; public set; }
    public Nullable`1<DateTime> ClusterCreateTime { get; public set; }
    [AWSPropertyAttribute]
public string ClusterIdentifier { get; public set; }
    [AWSPropertyAttribute]
public string ClusterNamespaceArn { get; public set; }
    public List`1<ClusterNode> ClusterNodes { get; public set; }
    public List`1<ClusterParameterGroupStatus> ClusterParameterGroups { get; public set; }
    [AWSPropertyAttribute]
public string ClusterPublicKey { get; public set; }
    [AWSPropertyAttribute]
public string ClusterRevisionNumber { get; public set; }
    public List`1<ClusterSecurityGroupMembership> ClusterSecurityGroups { get; public set; }
    public ClusterSnapshotCopyStatus ClusterSnapshotCopyStatus { get; public set; }
    [AWSPropertyAttribute]
public string ClusterStatus { get; public set; }
    [AWSPropertyAttribute]
public string ClusterSubnetGroupName { get; public set; }
    [AWSPropertyAttribute]
public string ClusterVersion { get; public set; }
    [AWSPropertyAttribute]
public string CustomDomainCertificateArn { get; public set; }
    public Nullable`1<DateTime> CustomDomainCertificateExpiryDate { get; public set; }
    [AWSPropertyAttribute]
public string CustomDomainName { get; public set; }
    public DataTransferProgress DataTransferProgress { get; public set; }
    [AWSPropertyAttribute]
public string DBName { get; public set; }
    [AWSPropertyAttribute]
public string DefaultIamRoleArn { get; public set; }
    public List`1<DeferredMaintenanceWindow> DeferredMaintenanceWindows { get; public set; }
    public ElasticIpStatus ElasticIpStatus { get; public set; }
    [AWSPropertyAttribute]
public string ElasticResizeNumberOfNodeOptions { get; public set; }
    public Nullable`1<bool> Encrypted { get; public set; }
    public Endpoint Endpoint { get; public set; }
    public Nullable`1<bool> EnhancedVpcRouting { get; public set; }
    public Nullable`1<DateTime> ExpectedNextSnapshotScheduleTime { get; public set; }
    [AWSPropertyAttribute]
public string ExpectedNextSnapshotScheduleTimeStatus { get; public set; }
    public HsmStatus HsmStatus { get; public set; }
    public List`1<ClusterIamRole> IamRoles { get; public set; }
    [AWSPropertyAttribute]
public string IpAddressType { get; public set; }
    [AWSPropertyAttribute]
public string KmsKeyId { get; public set; }
    [AWSPropertyAttribute]
public string MaintenanceTrackName { get; public set; }
    public Nullable`1<int> ManualSnapshotRetentionPeriod { get; public set; }
    [AWSPropertyAttribute]
public string MasterPasswordSecretArn { get; public set; }
    [AWSPropertyAttribute]
public string MasterPasswordSecretKmsKeyId { get; public set; }
    [AWSPropertyAttribute]
public string MasterUsername { get; public set; }
    [AWSPropertyAttribute]
public string ModifyStatus { get; public set; }
    [AWSPropertyAttribute]
public string MultiAZ { get; public set; }
    public SecondaryClusterInfo MultiAZSecondary { get; public set; }
    public Nullable`1<DateTime> NextMaintenanceWindowStartTime { get; public set; }
    [AWSPropertyAttribute]
public string NodeType { get; public set; }
    public Nullable`1<int> NumberOfNodes { get; public set; }
    public List`1<string> PendingActions { get; public set; }
    public PendingModifiedValues PendingModifiedValues { get; public set; }
    [AWSPropertyAttribute]
public string PreferredMaintenanceWindow { get; public set; }
    public Nullable`1<bool> PubliclyAccessible { get; public set; }
    public ReservedNodeExchangeStatus ReservedNodeExchangeStatus { get; public set; }
    public ResizeInfo ResizeInfo { get; public set; }
    public RestoreStatus RestoreStatus { get; public set; }
    [AWSPropertyAttribute]
public string SnapshotScheduleIdentifier { get; public set; }
    public ScheduleState SnapshotScheduleState { get; public set; }
    public List`1<Tag> Tags { get; public set; }
    public Nullable`1<long> TotalStorageCapacityInMegaBytes { get; public set; }
    [AWSPropertyAttribute]
public string VpcId { get; public set; }
    public List`1<VpcSecurityGroupMembership> VpcSecurityGroups { get; public set; }
    public Nullable`1<bool> get_AllowVersionUpgrade();
    public void set_AllowVersionUpgrade(Nullable`1<bool> value);
    internal bool IsSetAllowVersionUpgrade();
    public AquaConfiguration get_AquaConfiguration();
    public void set_AquaConfiguration(AquaConfiguration value);
    internal bool IsSetAquaConfiguration();
    public Nullable`1<int> get_AutomatedSnapshotRetentionPeriod();
    public void set_AutomatedSnapshotRetentionPeriod(Nullable`1<int> value);
    internal bool IsSetAutomatedSnapshotRetentionPeriod();
    public string get_AvailabilityZone();
    public void set_AvailabilityZone(string value);
    internal bool IsSetAvailabilityZone();
    public string get_AvailabilityZoneRelocationStatus();
    public void set_AvailabilityZoneRelocationStatus(string value);
    internal bool IsSetAvailabilityZoneRelocationStatus();
    public string get_ClusterAvailabilityStatus();
    public void set_ClusterAvailabilityStatus(string value);
    internal bool IsSetClusterAvailabilityStatus();
    public Nullable`1<DateTime> get_ClusterCreateTime();
    public void set_ClusterCreateTime(Nullable`1<DateTime> value);
    internal bool IsSetClusterCreateTime();
    public string get_ClusterIdentifier();
    public void set_ClusterIdentifier(string value);
    internal bool IsSetClusterIdentifier();
    public string get_ClusterNamespaceArn();
    public void set_ClusterNamespaceArn(string value);
    internal bool IsSetClusterNamespaceArn();
    public List`1<ClusterNode> get_ClusterNodes();
    public void set_ClusterNodes(List`1<ClusterNode> value);
    internal bool IsSetClusterNodes();
    public List`1<ClusterParameterGroupStatus> get_ClusterParameterGroups();
    public void set_ClusterParameterGroups(List`1<ClusterParameterGroupStatus> value);
    internal bool IsSetClusterParameterGroups();
    public string get_ClusterPublicKey();
    public void set_ClusterPublicKey(string value);
    internal bool IsSetClusterPublicKey();
    public string get_ClusterRevisionNumber();
    public void set_ClusterRevisionNumber(string value);
    internal bool IsSetClusterRevisionNumber();
    public List`1<ClusterSecurityGroupMembership> get_ClusterSecurityGroups();
    public void set_ClusterSecurityGroups(List`1<ClusterSecurityGroupMembership> value);
    internal bool IsSetClusterSecurityGroups();
    public ClusterSnapshotCopyStatus get_ClusterSnapshotCopyStatus();
    public void set_ClusterSnapshotCopyStatus(ClusterSnapshotCopyStatus value);
    internal bool IsSetClusterSnapshotCopyStatus();
    public string get_ClusterStatus();
    public void set_ClusterStatus(string value);
    internal bool IsSetClusterStatus();
    public string get_ClusterSubnetGroupName();
    public void set_ClusterSubnetGroupName(string value);
    internal bool IsSetClusterSubnetGroupName();
    public string get_ClusterVersion();
    public void set_ClusterVersion(string value);
    internal bool IsSetClusterVersion();
    public string get_CustomDomainCertificateArn();
    public void set_CustomDomainCertificateArn(string value);
    internal bool IsSetCustomDomainCertificateArn();
    public Nullable`1<DateTime> get_CustomDomainCertificateExpiryDate();
    public void set_CustomDomainCertificateExpiryDate(Nullable`1<DateTime> value);
    internal bool IsSetCustomDomainCertificateExpiryDate();
    public string get_CustomDomainName();
    public void set_CustomDomainName(string value);
    internal bool IsSetCustomDomainName();
    public DataTransferProgress get_DataTransferProgress();
    public void set_DataTransferProgress(DataTransferProgress value);
    internal bool IsSetDataTransferProgress();
    public string get_DBName();
    public void set_DBName(string value);
    internal bool IsSetDBName();
    public string get_DefaultIamRoleArn();
    public void set_DefaultIamRoleArn(string value);
    internal bool IsSetDefaultIamRoleArn();
    public List`1<DeferredMaintenanceWindow> get_DeferredMaintenanceWindows();
    public void set_DeferredMaintenanceWindows(List`1<DeferredMaintenanceWindow> value);
    internal bool IsSetDeferredMaintenanceWindows();
    public ElasticIpStatus get_ElasticIpStatus();
    public void set_ElasticIpStatus(ElasticIpStatus value);
    internal bool IsSetElasticIpStatus();
    public string get_ElasticResizeNumberOfNodeOptions();
    public void set_ElasticResizeNumberOfNodeOptions(string value);
    internal bool IsSetElasticResizeNumberOfNodeOptions();
    public Nullable`1<bool> get_Encrypted();
    public void set_Encrypted(Nullable`1<bool> value);
    internal bool IsSetEncrypted();
    public Endpoint get_Endpoint();
    public void set_Endpoint(Endpoint value);
    internal bool IsSetEndpoint();
    public Nullable`1<bool> get_EnhancedVpcRouting();
    public void set_EnhancedVpcRouting(Nullable`1<bool> value);
    internal bool IsSetEnhancedVpcRouting();
    public Nullable`1<DateTime> get_ExpectedNextSnapshotScheduleTime();
    public void set_ExpectedNextSnapshotScheduleTime(Nullable`1<DateTime> value);
    internal bool IsSetExpectedNextSnapshotScheduleTime();
    public string get_ExpectedNextSnapshotScheduleTimeStatus();
    public void set_ExpectedNextSnapshotScheduleTimeStatus(string value);
    internal bool IsSetExpectedNextSnapshotScheduleTimeStatus();
    public HsmStatus get_HsmStatus();
    public void set_HsmStatus(HsmStatus value);
    internal bool IsSetHsmStatus();
    public List`1<ClusterIamRole> get_IamRoles();
    public void set_IamRoles(List`1<ClusterIamRole> value);
    internal bool IsSetIamRoles();
    public string get_IpAddressType();
    public void set_IpAddressType(string value);
    internal bool IsSetIpAddressType();
    public string get_KmsKeyId();
    public void set_KmsKeyId(string value);
    internal bool IsSetKmsKeyId();
    public string get_MaintenanceTrackName();
    public void set_MaintenanceTrackName(string value);
    internal bool IsSetMaintenanceTrackName();
    public Nullable`1<int> get_ManualSnapshotRetentionPeriod();
    public void set_ManualSnapshotRetentionPeriod(Nullable`1<int> value);
    internal bool IsSetManualSnapshotRetentionPeriod();
    public string get_MasterPasswordSecretArn();
    public void set_MasterPasswordSecretArn(string value);
    internal bool IsSetMasterPasswordSecretArn();
    public string get_MasterPasswordSecretKmsKeyId();
    public void set_MasterPasswordSecretKmsKeyId(string value);
    internal bool IsSetMasterPasswordSecretKmsKeyId();
    public string get_MasterUsername();
    public void set_MasterUsername(string value);
    internal bool IsSetMasterUsername();
    public string get_ModifyStatus();
    public void set_ModifyStatus(string value);
    internal bool IsSetModifyStatus();
    public string get_MultiAZ();
    public void set_MultiAZ(string value);
    internal bool IsSetMultiAZ();
    public SecondaryClusterInfo get_MultiAZSecondary();
    public void set_MultiAZSecondary(SecondaryClusterInfo value);
    internal bool IsSetMultiAZSecondary();
    public Nullable`1<DateTime> get_NextMaintenanceWindowStartTime();
    public void set_NextMaintenanceWindowStartTime(Nullable`1<DateTime> value);
    internal bool IsSetNextMaintenanceWindowStartTime();
    public string get_NodeType();
    public void set_NodeType(string value);
    internal bool IsSetNodeType();
    public Nullable`1<int> get_NumberOfNodes();
    public void set_NumberOfNodes(Nullable`1<int> value);
    internal bool IsSetNumberOfNodes();
    public List`1<string> get_PendingActions();
    public void set_PendingActions(List`1<string> value);
    internal bool IsSetPendingActions();
    public PendingModifiedValues get_PendingModifiedValues();
    public void set_PendingModifiedValues(PendingModifiedValues value);
    internal bool IsSetPendingModifiedValues();
    public string get_PreferredMaintenanceWindow();
    public void set_PreferredMaintenanceWindow(string value);
    internal bool IsSetPreferredMaintenanceWindow();
    public Nullable`1<bool> get_PubliclyAccessible();
    public void set_PubliclyAccessible(Nullable`1<bool> value);
    internal bool IsSetPubliclyAccessible();
    public ReservedNodeExchangeStatus get_ReservedNodeExchangeStatus();
    public void set_ReservedNodeExchangeStatus(ReservedNodeExchangeStatus value);
    internal bool IsSetReservedNodeExchangeStatus();
    public ResizeInfo get_ResizeInfo();
    public void set_ResizeInfo(ResizeInfo value);
    internal bool IsSetResizeInfo();
    public RestoreStatus get_RestoreStatus();
    public void set_RestoreStatus(RestoreStatus value);
    internal bool IsSetRestoreStatus();
    public string get_SnapshotScheduleIdentifier();
    public void set_SnapshotScheduleIdentifier(string value);
    internal bool IsSetSnapshotScheduleIdentifier();
    public ScheduleState get_SnapshotScheduleState();
    public void set_SnapshotScheduleState(ScheduleState value);
    internal bool IsSetSnapshotScheduleState();
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
    public Nullable`1<long> get_TotalStorageCapacityInMegaBytes();
    public void set_TotalStorageCapacityInMegaBytes(Nullable`1<long> value);
    internal bool IsSetTotalStorageCapacityInMegaBytes();
    public string get_VpcId();
    public void set_VpcId(string value);
    internal bool IsSetVpcId();
    public List`1<VpcSecurityGroupMembership> get_VpcSecurityGroups();
    public void set_VpcSecurityGroups(List`1<VpcSecurityGroupMembership> value);
    internal bool IsSetVpcSecurityGroups();
}
public class Amazon.Redshift.Model.ClusterAlreadyExistsException : AmazonRedshiftException {
    public ClusterAlreadyExistsException(string message);
    public ClusterAlreadyExistsException(string message, Exception innerException);
    public ClusterAlreadyExistsException(Exception innerException);
    public ClusterAlreadyExistsException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public ClusterAlreadyExistsException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Redshift.Model.ClusterAssociatedToSchedule : object {
    private string _clusterIdentifier;
    private ScheduleState _scheduleAssociationState;
    [AWSPropertyAttribute]
public string ClusterIdentifier { get; public set; }
    public ScheduleState ScheduleAssociationState { get; public set; }
    public string get_ClusterIdentifier();
    public void set_ClusterIdentifier(string value);
    internal bool IsSetClusterIdentifier();
    public ScheduleState get_ScheduleAssociationState();
    public void set_ScheduleAssociationState(ScheduleState value);
    internal bool IsSetScheduleAssociationState();
}
public class Amazon.Redshift.Model.ClusterDbRevision : object {
    private string _clusterIdentifier;
    private string _currentDatabaseRevision;
    private Nullable`1<DateTime> _databaseRevisionReleaseDate;
    private List`1<RevisionTarget> _revisionTargets;
    [AWSPropertyAttribute]
public string ClusterIdentifier { get; public set; }
    [AWSPropertyAttribute]
public string CurrentDatabaseRevision { get; public set; }
    public Nullable`1<DateTime> DatabaseRevisionReleaseDate { get; public set; }
    public List`1<RevisionTarget> RevisionTargets { get; public set; }
    public string get_ClusterIdentifier();
    public void set_ClusterIdentifier(string value);
    internal bool IsSetClusterIdentifier();
    public string get_CurrentDatabaseRevision();
    public void set_CurrentDatabaseRevision(string value);
    internal bool IsSetCurrentDatabaseRevision();
    public Nullable`1<DateTime> get_DatabaseRevisionReleaseDate();
    public void set_DatabaseRevisionReleaseDate(Nullable`1<DateTime> value);
    internal bool IsSetDatabaseRevisionReleaseDate();
    public List`1<RevisionTarget> get_RevisionTargets();
    public void set_RevisionTargets(List`1<RevisionTarget> value);
    internal bool IsSetRevisionTargets();
}
public class Amazon.Redshift.Model.ClusterIamRole : object {
    private string _applyStatus;
    private string _iamRoleArn;
    [AWSPropertyAttribute]
public string ApplyStatus { get; public set; }
    [AWSPropertyAttribute]
public string IamRoleArn { get; public set; }
    public string get_ApplyStatus();
    public void set_ApplyStatus(string value);
    internal bool IsSetApplyStatus();
    public string get_IamRoleArn();
    public void set_IamRoleArn(string value);
    internal bool IsSetIamRoleArn();
}
public class Amazon.Redshift.Model.ClusterNode : object {
    private string _nodeRole;
    private string _privateIPAddress;
    private string _publicIPAddress;
    [AWSPropertyAttribute]
public string NodeRole { get; public set; }
    [AWSPropertyAttribute]
public string PrivateIPAddress { get; public set; }
    [AWSPropertyAttribute]
public string PublicIPAddress { get; public set; }
    public string get_NodeRole();
    public void set_NodeRole(string value);
    internal bool IsSetNodeRole();
    public string get_PrivateIPAddress();
    public void set_PrivateIPAddress(string value);
    internal bool IsSetPrivateIPAddress();
    public string get_PublicIPAddress();
    public void set_PublicIPAddress(string value);
    internal bool IsSetPublicIPAddress();
}
public class Amazon.Redshift.Model.ClusterNotFoundException : AmazonRedshiftException {
    public ClusterNotFoundException(string message);
    public ClusterNotFoundException(string message, Exception innerException);
    public ClusterNotFoundException(Exception innerException);
    public ClusterNotFoundException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public ClusterNotFoundException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Redshift.Model.ClusterOnLatestRevisionException : AmazonRedshiftException {
    public ClusterOnLatestRevisionException(string message);
    public ClusterOnLatestRevisionException(string message, Exception innerException);
    public ClusterOnLatestRevisionException(Exception innerException);
    public ClusterOnLatestRevisionException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public ClusterOnLatestRevisionException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Redshift.Model.ClusterParameterGroup : object {
    private string _description;
    private string _parameterGroupFamily;
    private string _parameterGroupName;
    private List`1<Tag> _tags;
    [AWSPropertyAttribute]
public string Description { get; public set; }
    [AWSPropertyAttribute]
public string ParameterGroupFamily { get; public set; }
    [AWSPropertyAttribute]
public string ParameterGroupName { get; public set; }
    public List`1<Tag> Tags { get; public set; }
    public string get_Description();
    public void set_Description(string value);
    internal bool IsSetDescription();
    public string get_ParameterGroupFamily();
    public void set_ParameterGroupFamily(string value);
    internal bool IsSetParameterGroupFamily();
    public string get_ParameterGroupName();
    public void set_ParameterGroupName(string value);
    internal bool IsSetParameterGroupName();
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
}
public class Amazon.Redshift.Model.ClusterParameterGroupAlreadyExistsException : AmazonRedshiftException {
    public ClusterParameterGroupAlreadyExistsException(string message);
    public ClusterParameterGroupAlreadyExistsException(string message, Exception innerException);
    public ClusterParameterGroupAlreadyExistsException(Exception innerException);
    public ClusterParameterGroupAlreadyExistsException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public ClusterParameterGroupAlreadyExistsException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Redshift.Model.ClusterParameterGroupNotFoundException : AmazonRedshiftException {
    public ClusterParameterGroupNotFoundException(string message);
    public ClusterParameterGroupNotFoundException(string message, Exception innerException);
    public ClusterParameterGroupNotFoundException(Exception innerException);
    public ClusterParameterGroupNotFoundException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public ClusterParameterGroupNotFoundException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Redshift.Model.ClusterParameterGroupQuotaExceededException : AmazonRedshiftException {
    public ClusterParameterGroupQuotaExceededException(string message);
    public ClusterParameterGroupQuotaExceededException(string message, Exception innerException);
    public ClusterParameterGroupQuotaExceededException(Exception innerException);
    public ClusterParameterGroupQuotaExceededException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public ClusterParameterGroupQuotaExceededException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Redshift.Model.ClusterParameterGroupStatus : object {
    private List`1<ClusterParameterStatus> _clusterParameterStatusList;
    private string _parameterApplyStatus;
    private string _parameterGroupName;
    public List`1<ClusterParameterStatus> ClusterParameterStatusList { get; public set; }
    [AWSPropertyAttribute]
public string ParameterApplyStatus { get; public set; }
    [AWSPropertyAttribute]
public string ParameterGroupName { get; public set; }
    public List`1<ClusterParameterStatus> get_ClusterParameterStatusList();
    public void set_ClusterParameterStatusList(List`1<ClusterParameterStatus> value);
    internal bool IsSetClusterParameterStatusList();
    public string get_ParameterApplyStatus();
    public void set_ParameterApplyStatus(string value);
    internal bool IsSetParameterApplyStatus();
    public string get_ParameterGroupName();
    public void set_ParameterGroupName(string value);
    internal bool IsSetParameterGroupName();
}
public class Amazon.Redshift.Model.ClusterParameterStatus : object {
    private string _parameterApplyErrorDescription;
    private string _parameterApplyStatus;
    private string _parameterName;
    [AWSPropertyAttribute]
public string ParameterApplyErrorDescription { get; public set; }
    [AWSPropertyAttribute]
public string ParameterApplyStatus { get; public set; }
    [AWSPropertyAttribute]
public string ParameterName { get; public set; }
    public string get_ParameterApplyErrorDescription();
    public void set_ParameterApplyErrorDescription(string value);
    internal bool IsSetParameterApplyErrorDescription();
    public string get_ParameterApplyStatus();
    public void set_ParameterApplyStatus(string value);
    internal bool IsSetParameterApplyStatus();
    public string get_ParameterName();
    public void set_ParameterName(string value);
    internal bool IsSetParameterName();
}
public class Amazon.Redshift.Model.ClusterQuotaExceededException : AmazonRedshiftException {
    public ClusterQuotaExceededException(string message);
    public ClusterQuotaExceededException(string message, Exception innerException);
    public ClusterQuotaExceededException(Exception innerException);
    public ClusterQuotaExceededException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public ClusterQuotaExceededException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Redshift.Model.ClusterSecurityGroup : object {
    private string _clusterSecurityGroupName;
    private string _description;
    private List`1<EC2SecurityGroup> _ec2SecurityGroups;
    private List`1<IPRange> _ipRanges;
    private List`1<Tag> _tags;
    [AWSPropertyAttribute]
public string ClusterSecurityGroupName { get; public set; }
    [AWSPropertyAttribute]
public string Description { get; public set; }
    public List`1<EC2SecurityGroup> EC2SecurityGroups { get; public set; }
    public List`1<IPRange> IPRanges { get; public set; }
    public List`1<Tag> Tags { get; public set; }
    public string get_ClusterSecurityGroupName();
    public void set_ClusterSecurityGroupName(string value);
    internal bool IsSetClusterSecurityGroupName();
    public string get_Description();
    public void set_Description(string value);
    internal bool IsSetDescription();
    public List`1<EC2SecurityGroup> get_EC2SecurityGroups();
    public void set_EC2SecurityGroups(List`1<EC2SecurityGroup> value);
    internal bool IsSetEC2SecurityGroups();
    public List`1<IPRange> get_IPRanges();
    public void set_IPRanges(List`1<IPRange> value);
    internal bool IsSetIPRanges();
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
}
public class Amazon.Redshift.Model.ClusterSecurityGroupAlreadyExistsException : AmazonRedshiftException {
    public ClusterSecurityGroupAlreadyExistsException(string message);
    public ClusterSecurityGroupAlreadyExistsException(string message, Exception innerException);
    public ClusterSecurityGroupAlreadyExistsException(Exception innerException);
    public ClusterSecurityGroupAlreadyExistsException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public ClusterSecurityGroupAlreadyExistsException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Redshift.Model.ClusterSecurityGroupMembership : object {
    private string _clusterSecurityGroupName;
    private string _status;
    [AWSPropertyAttribute]
public string ClusterSecurityGroupName { get; public set; }
    [AWSPropertyAttribute]
public string Status { get; public set; }
    public string get_ClusterSecurityGroupName();
    public void set_ClusterSecurityGroupName(string value);
    internal bool IsSetClusterSecurityGroupName();
    public string get_Status();
    public void set_Status(string value);
    internal bool IsSetStatus();
}
public class Amazon.Redshift.Model.ClusterSecurityGroupNotFoundException : AmazonRedshiftException {
    public ClusterSecurityGroupNotFoundException(string message);
    public ClusterSecurityGroupNotFoundException(string message, Exception innerException);
    public ClusterSecurityGroupNotFoundException(Exception innerException);
    public ClusterSecurityGroupNotFoundException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public ClusterSecurityGroupNotFoundException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Redshift.Model.ClusterSecurityGroupQuotaExceededException : AmazonRedshiftException {
    public ClusterSecurityGroupQuotaExceededException(string message);
    public ClusterSecurityGroupQuotaExceededException(string message, Exception innerException);
    public ClusterSecurityGroupQuotaExceededException(Exception innerException);
    public ClusterSecurityGroupQuotaExceededException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public ClusterSecurityGroupQuotaExceededException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Redshift.Model.ClusterSnapshotAlreadyExistsException : AmazonRedshiftException {
    public ClusterSnapshotAlreadyExistsException(string message);
    public ClusterSnapshotAlreadyExistsException(string message, Exception innerException);
    public ClusterSnapshotAlreadyExistsException(Exception innerException);
    public ClusterSnapshotAlreadyExistsException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public ClusterSnapshotAlreadyExistsException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Redshift.Model.ClusterSnapshotCopyStatus : object {
    private string _destinationRegion;
    private Nullable`1<int> _manualSnapshotRetentionPeriod;
    private Nullable`1<long> _retentionPeriod;
    private string _snapshotCopyGrantName;
    [AWSPropertyAttribute]
public string DestinationRegion { get; public set; }
    public Nullable`1<int> ManualSnapshotRetentionPeriod { get; public set; }
    public Nullable`1<long> RetentionPeriod { get; public set; }
    [AWSPropertyAttribute]
public string SnapshotCopyGrantName { get; public set; }
    public string get_DestinationRegion();
    public void set_DestinationRegion(string value);
    internal bool IsSetDestinationRegion();
    public Nullable`1<int> get_ManualSnapshotRetentionPeriod();
    public void set_ManualSnapshotRetentionPeriod(Nullable`1<int> value);
    internal bool IsSetManualSnapshotRetentionPeriod();
    public Nullable`1<long> get_RetentionPeriod();
    public void set_RetentionPeriod(Nullable`1<long> value);
    internal bool IsSetRetentionPeriod();
    public string get_SnapshotCopyGrantName();
    public void set_SnapshotCopyGrantName(string value);
    internal bool IsSetSnapshotCopyGrantName();
}
public class Amazon.Redshift.Model.ClusterSnapshotNotFoundException : AmazonRedshiftException {
    public ClusterSnapshotNotFoundException(string message);
    public ClusterSnapshotNotFoundException(string message, Exception innerException);
    public ClusterSnapshotNotFoundException(Exception innerException);
    public ClusterSnapshotNotFoundException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public ClusterSnapshotNotFoundException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Redshift.Model.ClusterSnapshotQuotaExceededException : AmazonRedshiftException {
    public ClusterSnapshotQuotaExceededException(string message);
    public ClusterSnapshotQuotaExceededException(string message, Exception innerException);
    public ClusterSnapshotQuotaExceededException(Exception innerException);
    public ClusterSnapshotQuotaExceededException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public ClusterSnapshotQuotaExceededException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Redshift.Model.ClusterSubnetGroup : object {
    private string _clusterSubnetGroupName;
    private string _description;
    private string _subnetGroupStatus;
    private List`1<Subnet> _subnets;
    private List`1<string> _supportedClusterIpAddressTypes;
    private List`1<Tag> _tags;
    private string _vpcId;
    [AWSPropertyAttribute]
public string ClusterSubnetGroupName { get; public set; }
    [AWSPropertyAttribute]
public string Description { get; public set; }
    [AWSPropertyAttribute]
public string SubnetGroupStatus { get; public set; }
    public List`1<Subnet> Subnets { get; public set; }
    public List`1<string> SupportedClusterIpAddressTypes { get; public set; }
    public List`1<Tag> Tags { get; public set; }
    [AWSPropertyAttribute]
public string VpcId { get; public set; }
    public string get_ClusterSubnetGroupName();
    public void set_ClusterSubnetGroupName(string value);
    internal bool IsSetClusterSubnetGroupName();
    public string get_Description();
    public void set_Description(string value);
    internal bool IsSetDescription();
    public string get_SubnetGroupStatus();
    public void set_SubnetGroupStatus(string value);
    internal bool IsSetSubnetGroupStatus();
    public List`1<Subnet> get_Subnets();
    public void set_Subnets(List`1<Subnet> value);
    internal bool IsSetSubnets();
    public List`1<string> get_SupportedClusterIpAddressTypes();
    public void set_SupportedClusterIpAddressTypes(List`1<string> value);
    internal bool IsSetSupportedClusterIpAddressTypes();
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
    public string get_VpcId();
    public void set_VpcId(string value);
    internal bool IsSetVpcId();
}
public class Amazon.Redshift.Model.ClusterSubnetGroupAlreadyExistsException : AmazonRedshiftException {
    public ClusterSubnetGroupAlreadyExistsException(string message);
    public ClusterSubnetGroupAlreadyExistsException(string message, Exception innerException);
    public ClusterSubnetGroupAlreadyExistsException(Exception innerException);
    public ClusterSubnetGroupAlreadyExistsException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public ClusterSubnetGroupAlreadyExistsException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Redshift.Model.ClusterSubnetGroupNotFoundException : AmazonRedshiftException {
    public ClusterSubnetGroupNotFoundException(string message);
    public ClusterSubnetGroupNotFoundException(string message, Exception innerException);
    public ClusterSubnetGroupNotFoundException(Exception innerException);
    public ClusterSubnetGroupNotFoundException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public ClusterSubnetGroupNotFoundException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Redshift.Model.ClusterSubnetGroupQuotaExceededException : AmazonRedshiftException {
    public ClusterSubnetGroupQuotaExceededException(string message);
    public ClusterSubnetGroupQuotaExceededException(string message, Exception innerException);
    public ClusterSubnetGroupQuotaExceededException(Exception innerException);
    public ClusterSubnetGroupQuotaExceededException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public ClusterSubnetGroupQuotaExceededException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Redshift.Model.ClusterSubnetQuotaExceededException : AmazonRedshiftException {
    public ClusterSubnetQuotaExceededException(string message);
    public ClusterSubnetQuotaExceededException(string message, Exception innerException);
    public ClusterSubnetQuotaExceededException(Exception innerException);
    public ClusterSubnetQuotaExceededException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public ClusterSubnetQuotaExceededException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Redshift.Model.ClusterVersion : object {
    private string _clusterParameterGroupFamily;
    private string _description;
    private string _version;
    [AWSPropertyAttribute]
public string ClusterParameterGroupFamily { get; public set; }
    [AWSPropertyAttribute]
public string Description { get; public set; }
    [AWSPropertyAttribute]
public string Version { get; public set; }
    public string get_ClusterParameterGroupFamily();
    public void set_ClusterParameterGroupFamily(string value);
    internal bool IsSetClusterParameterGroupFamily();
    public string get_Description();
    public void set_Description(string value);
    internal bool IsSetDescription();
    public string get_Version();
    public void set_Version(string value);
    internal bool IsSetVersion();
}
public class Amazon.Redshift.Model.ConflictPolicyUpdateException : AmazonRedshiftException {
    public ConflictPolicyUpdateException(string message);
    public ConflictPolicyUpdateException(string message, Exception innerException);
    public ConflictPolicyUpdateException(Exception innerException);
    public ConflictPolicyUpdateException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public ConflictPolicyUpdateException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Redshift.Model.CopyClusterSnapshotRequest : AmazonRedshiftRequest {
    private Nullable`1<int> _manualSnapshotRetentionPeriod;
    private string _sourceSnapshotClusterIdentifier;
    private string _sourceSnapshotIdentifier;
    private string _targetSnapshotIdentifier;
    public Nullable`1<int> ManualSnapshotRetentionPeriod { get; public set; }
    [AWSPropertyAttribute]
public string SourceSnapshotClusterIdentifier { get; public set; }
    [AWSPropertyAttribute]
public string SourceSnapshotIdentifier { get; public set; }
    [AWSPropertyAttribute]
public string TargetSnapshotIdentifier { get; public set; }
    public Nullable`1<int> get_ManualSnapshotRetentionPeriod();
    public void set_ManualSnapshotRetentionPeriod(Nullable`1<int> value);
    internal bool IsSetManualSnapshotRetentionPeriod();
    public string get_SourceSnapshotClusterIdentifier();
    public void set_SourceSnapshotClusterIdentifier(string value);
    internal bool IsSetSourceSnapshotClusterIdentifier();
    public string get_SourceSnapshotIdentifier();
    public void set_SourceSnapshotIdentifier(string value);
    internal bool IsSetSourceSnapshotIdentifier();
    public string get_TargetSnapshotIdentifier();
    public void set_TargetSnapshotIdentifier(string value);
    internal bool IsSetTargetSnapshotIdentifier();
}
public class Amazon.Redshift.Model.CopyClusterSnapshotResponse : AmazonWebServiceResponse {
    private Snapshot _snapshot;
    public Snapshot Snapshot { get; public set; }
    public Snapshot get_Snapshot();
    public void set_Snapshot(Snapshot value);
    internal bool IsSetSnapshot();
}
public class Amazon.Redshift.Model.CopyToRegionDisabledException : AmazonRedshiftException {
    public CopyToRegionDisabledException(string message);
    public CopyToRegionDisabledException(string message, Exception innerException);
    public CopyToRegionDisabledException(Exception innerException);
    public CopyToRegionDisabledException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public CopyToRegionDisabledException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Redshift.Model.CreateAuthenticationProfileRequest : AmazonRedshiftRequest {
    private string _authenticationProfileContent;
    private string _authenticationProfileName;
    [AWSPropertyAttribute]
public string AuthenticationProfileContent { get; public set; }
    [AWSPropertyAttribute]
public string AuthenticationProfileName { get; public set; }
    public string get_AuthenticationProfileContent();
    public void set_AuthenticationProfileContent(string value);
    internal bool IsSetAuthenticationProfileContent();
    public string get_AuthenticationProfileName();
    public void set_AuthenticationProfileName(string value);
    internal bool IsSetAuthenticationProfileName();
}
public class Amazon.Redshift.Model.CreateAuthenticationProfileResponse : AmazonWebServiceResponse {
    private string _authenticationProfileContent;
    private string _authenticationProfileName;
    [AWSPropertyAttribute]
public string AuthenticationProfileContent { get; public set; }
    [AWSPropertyAttribute]
public string AuthenticationProfileName { get; public set; }
    public string get_AuthenticationProfileContent();
    public void set_AuthenticationProfileContent(string value);
    internal bool IsSetAuthenticationProfileContent();
    public string get_AuthenticationProfileName();
    public void set_AuthenticationProfileName(string value);
    internal bool IsSetAuthenticationProfileName();
}
public class Amazon.Redshift.Model.CreateClusterParameterGroupRequest : AmazonRedshiftRequest {
    private string _description;
    private string _parameterGroupFamily;
    private string _parameterGroupName;
    private List`1<Tag> _tags;
    [AWSPropertyAttribute]
public string Description { get; public set; }
    [AWSPropertyAttribute]
public string ParameterGroupFamily { get; public set; }
    [AWSPropertyAttribute]
public string ParameterGroupName { get; public set; }
    public List`1<Tag> Tags { get; public set; }
    public string get_Description();
    public void set_Description(string value);
    internal bool IsSetDescription();
    public string get_ParameterGroupFamily();
    public void set_ParameterGroupFamily(string value);
    internal bool IsSetParameterGroupFamily();
    public string get_ParameterGroupName();
    public void set_ParameterGroupName(string value);
    internal bool IsSetParameterGroupName();
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
}
public class Amazon.Redshift.Model.CreateClusterParameterGroupResponse : AmazonWebServiceResponse {
    private ClusterParameterGroup _clusterParameterGroup;
    public ClusterParameterGroup ClusterParameterGroup { get; public set; }
    public ClusterParameterGroup get_ClusterParameterGroup();
    public void set_ClusterParameterGroup(ClusterParameterGroup value);
    internal bool IsSetClusterParameterGroup();
}
public class Amazon.Redshift.Model.CreateClusterRequest : AmazonRedshiftRequest {
    private string _additionalInfo;
    private Nullable`1<bool> _allowVersionUpgrade;
    private AquaConfigurationStatus _aquaConfigurationStatus;
    private Nullable`1<int> _automatedSnapshotRetentionPeriod;
    private string _availabilityZone;
    private Nullable`1<bool> _availabilityZoneRelocation;
    private string _clusterIdentifier;
    private string _clusterParameterGroupName;
    private List`1<string> _clusterSecurityGroups;
    private string _clusterSubnetGroupName;
    private string _clusterType;
    private string _clusterVersion;
    private string _dbName;
    private string _defaultIamRoleArn;
    private string _elasticIp;
    private Nullable`1<bool> _encrypted;
    private Nullable`1<bool> _enhancedVpcRouting;
    private string _hsmClientCertificateIdentifier;
    private string _hsmConfigurationIdentifier;
    private List`1<string> _iamRoles;
    private string _ipAddressType;
    private string _kmsKeyId;
    private string _loadSampleData;
    private string _maintenanceTrackName;
    private Nullable`1<bool> _manageMasterPassword;
    private Nullable`1<int> _manualSnapshotRetentionPeriod;
    private string _masterPasswordSecretKmsKeyId;
    private string _masterUsername;
    private string _masterUserPassword;
    private Nullable`1<bool> _multiAZ;
    private string _nodeType;
    private Nullable`1<int> _numberOfNodes;
    private Nullable`1<int> _port;
    private string _preferredMaintenanceWindow;
    private Nullable`1<bool> _publiclyAccessible;
    private string _redshiftIdcApplicationArn;
    private string _snapshotScheduleIdentifier;
    private List`1<Tag> _tags;
    private List`1<string> _vpcSecurityGroupIds;
    [AWSPropertyAttribute]
public string AdditionalInfo { get; public set; }
    public Nullable`1<bool> AllowVersionUpgrade { get; public set; }
    public AquaConfigurationStatus AquaConfigurationStatus { get; public set; }
    public Nullable`1<int> AutomatedSnapshotRetentionPeriod { get; public set; }
    [AWSPropertyAttribute]
public string AvailabilityZone { get; public set; }
    public Nullable`1<bool> AvailabilityZoneRelocation { get; public set; }
    [AWSPropertyAttribute]
public string ClusterIdentifier { get; public set; }
    [AWSPropertyAttribute]
public string ClusterParameterGroupName { get; public set; }
    public List`1<string> ClusterSecurityGroups { get; public set; }
    [AWSPropertyAttribute]
public string ClusterSubnetGroupName { get; public set; }
    [AWSPropertyAttribute]
public string ClusterType { get; public set; }
    [AWSPropertyAttribute]
public string ClusterVersion { get; public set; }
    [AWSPropertyAttribute]
public string DBName { get; public set; }
    [AWSPropertyAttribute]
public string DefaultIamRoleArn { get; public set; }
    [AWSPropertyAttribute]
public string ElasticIp { get; public set; }
    public Nullable`1<bool> Encrypted { get; public set; }
    public Nullable`1<bool> EnhancedVpcRouting { get; public set; }
    [AWSPropertyAttribute]
public string HsmClientCertificateIdentifier { get; public set; }
    [AWSPropertyAttribute]
public string HsmConfigurationIdentifier { get; public set; }
    public List`1<string> IamRoles { get; public set; }
    [AWSPropertyAttribute]
public string IpAddressType { get; public set; }
    [AWSPropertyAttribute]
public string KmsKeyId { get; public set; }
    [AWSPropertyAttribute]
public string LoadSampleData { get; public set; }
    [AWSPropertyAttribute]
public string MaintenanceTrackName { get; public set; }
    public Nullable`1<bool> ManageMasterPassword { get; public set; }
    public Nullable`1<int> ManualSnapshotRetentionPeriod { get; public set; }
    [AWSPropertyAttribute]
public string MasterPasswordSecretKmsKeyId { get; public set; }
    [AWSPropertyAttribute]
public string MasterUsername { get; public set; }
    [AWSPropertyAttribute]
public string MasterUserPassword { get; public set; }
    public Nullable`1<bool> MultiAZ { get; public set; }
    [AWSPropertyAttribute]
public string NodeType { get; public set; }
    public Nullable`1<int> NumberOfNodes { get; public set; }
    public Nullable`1<int> Port { get; public set; }
    [AWSPropertyAttribute]
public string PreferredMaintenanceWindow { get; public set; }
    public Nullable`1<bool> PubliclyAccessible { get; public set; }
    [AWSPropertyAttribute]
public string RedshiftIdcApplicationArn { get; public set; }
    [AWSPropertyAttribute]
public string SnapshotScheduleIdentifier { get; public set; }
    public List`1<Tag> Tags { get; public set; }
    public List`1<string> VpcSecurityGroupIds { get; public set; }
    public string get_AdditionalInfo();
    public void set_AdditionalInfo(string value);
    internal bool IsSetAdditionalInfo();
    public Nullable`1<bool> get_AllowVersionUpgrade();
    public void set_AllowVersionUpgrade(Nullable`1<bool> value);
    internal bool IsSetAllowVersionUpgrade();
    public AquaConfigurationStatus get_AquaConfigurationStatus();
    public void set_AquaConfigurationStatus(AquaConfigurationStatus value);
    internal bool IsSetAquaConfigurationStatus();
    public Nullable`1<int> get_AutomatedSnapshotRetentionPeriod();
    public void set_AutomatedSnapshotRetentionPeriod(Nullable`1<int> value);
    internal bool IsSetAutomatedSnapshotRetentionPeriod();
    public string get_AvailabilityZone();
    public void set_AvailabilityZone(string value);
    internal bool IsSetAvailabilityZone();
    public Nullable`1<bool> get_AvailabilityZoneRelocation();
    public void set_AvailabilityZoneRelocation(Nullable`1<bool> value);
    internal bool IsSetAvailabilityZoneRelocation();
    public string get_ClusterIdentifier();
    public void set_ClusterIdentifier(string value);
    internal bool IsSetClusterIdentifier();
    public string get_ClusterParameterGroupName();
    public void set_ClusterParameterGroupName(string value);
    internal bool IsSetClusterParameterGroupName();
    public List`1<string> get_ClusterSecurityGroups();
    public void set_ClusterSecurityGroups(List`1<string> value);
    internal bool IsSetClusterSecurityGroups();
    public string get_ClusterSubnetGroupName();
    public void set_ClusterSubnetGroupName(string value);
    internal bool IsSetClusterSubnetGroupName();
    public string get_ClusterType();
    public void set_ClusterType(string value);
    internal bool IsSetClusterType();
    public string get_ClusterVersion();
    public void set_ClusterVersion(string value);
    internal bool IsSetClusterVersion();
    public string get_DBName();
    public void set_DBName(string value);
    internal bool IsSetDBName();
    public string get_DefaultIamRoleArn();
    public void set_DefaultIamRoleArn(string value);
    internal bool IsSetDefaultIamRoleArn();
    public string get_ElasticIp();
    public void set_ElasticIp(string value);
    internal bool IsSetElasticIp();
    public Nullable`1<bool> get_Encrypted();
    public void set_Encrypted(Nullable`1<bool> value);
    internal bool IsSetEncrypted();
    public Nullable`1<bool> get_EnhancedVpcRouting();
    public void set_EnhancedVpcRouting(Nullable`1<bool> value);
    internal bool IsSetEnhancedVpcRouting();
    public string get_HsmClientCertificateIdentifier();
    public void set_HsmClientCertificateIdentifier(string value);
    internal bool IsSetHsmClientCertificateIdentifier();
    public string get_HsmConfigurationIdentifier();
    public void set_HsmConfigurationIdentifier(string value);
    internal bool IsSetHsmConfigurationIdentifier();
    public List`1<string> get_IamRoles();
    public void set_IamRoles(List`1<string> value);
    internal bool IsSetIamRoles();
    public string get_IpAddressType();
    public void set_IpAddressType(string value);
    internal bool IsSetIpAddressType();
    public string get_KmsKeyId();
    public void set_KmsKeyId(string value);
    internal bool IsSetKmsKeyId();
    public string get_LoadSampleData();
    public void set_LoadSampleData(string value);
    internal bool IsSetLoadSampleData();
    public string get_MaintenanceTrackName();
    public void set_MaintenanceTrackName(string value);
    internal bool IsSetMaintenanceTrackName();
    public Nullable`1<bool> get_ManageMasterPassword();
    public void set_ManageMasterPassword(Nullable`1<bool> value);
    internal bool IsSetManageMasterPassword();
    public Nullable`1<int> get_ManualSnapshotRetentionPeriod();
    public void set_ManualSnapshotRetentionPeriod(Nullable`1<int> value);
    internal bool IsSetManualSnapshotRetentionPeriod();
    public string get_MasterPasswordSecretKmsKeyId();
    public void set_MasterPasswordSecretKmsKeyId(string value);
    internal bool IsSetMasterPasswordSecretKmsKeyId();
    public string get_MasterUsername();
    public void set_MasterUsername(string value);
    internal bool IsSetMasterUsername();
    public string get_MasterUserPassword();
    public void set_MasterUserPassword(string value);
    internal bool IsSetMasterUserPassword();
    public Nullable`1<bool> get_MultiAZ();
    public void set_MultiAZ(Nullable`1<bool> value);
    internal bool IsSetMultiAZ();
    public string get_NodeType();
    public void set_NodeType(string value);
    internal bool IsSetNodeType();
    public Nullable`1<int> get_NumberOfNodes();
    public void set_NumberOfNodes(Nullable`1<int> value);
    internal bool IsSetNumberOfNodes();
    public Nullable`1<int> get_Port();
    public void set_Port(Nullable`1<int> value);
    internal bool IsSetPort();
    public string get_PreferredMaintenanceWindow();
    public void set_PreferredMaintenanceWindow(string value);
    internal bool IsSetPreferredMaintenanceWindow();
    public Nullable`1<bool> get_PubliclyAccessible();
    public void set_PubliclyAccessible(Nullable`1<bool> value);
    internal bool IsSetPubliclyAccessible();
    public string get_RedshiftIdcApplicationArn();
    public void set_RedshiftIdcApplicationArn(string value);
    internal bool IsSetRedshiftIdcApplicationArn();
    public string get_SnapshotScheduleIdentifier();
    public void set_SnapshotScheduleIdentifier(string value);
    internal bool IsSetSnapshotScheduleIdentifier();
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
    public List`1<string> get_VpcSecurityGroupIds();
    public void set_VpcSecurityGroupIds(List`1<string> value);
    internal bool IsSetVpcSecurityGroupIds();
}
public class Amazon.Redshift.Model.CreateClusterResponse : AmazonWebServiceResponse {
    private Cluster _cluster;
    public Cluster Cluster { get; public set; }
    public Cluster get_Cluster();
    public void set_Cluster(Cluster value);
    internal bool IsSetCluster();
}
public class Amazon.Redshift.Model.CreateClusterSecurityGroupRequest : AmazonRedshiftRequest {
    private string _clusterSecurityGroupName;
    private string _description;
    private List`1<Tag> _tags;
    [AWSPropertyAttribute]
public string ClusterSecurityGroupName { get; public set; }
    [AWSPropertyAttribute]
public string Description { get; public set; }
    public List`1<Tag> Tags { get; public set; }
    public string get_ClusterSecurityGroupName();
    public void set_ClusterSecurityGroupName(string value);
    internal bool IsSetClusterSecurityGroupName();
    public string get_Description();
    public void set_Description(string value);
    internal bool IsSetDescription();
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
}
public class Amazon.Redshift.Model.CreateClusterSecurityGroupResponse : AmazonWebServiceResponse {
    private ClusterSecurityGroup _clusterSecurityGroup;
    public ClusterSecurityGroup ClusterSecurityGroup { get; public set; }
    public ClusterSecurityGroup get_ClusterSecurityGroup();
    public void set_ClusterSecurityGroup(ClusterSecurityGroup value);
    internal bool IsSetClusterSecurityGroup();
}
public class Amazon.Redshift.Model.CreateClusterSnapshotRequest : AmazonRedshiftRequest {
    private string _clusterIdentifier;
    private Nullable`1<int> _manualSnapshotRetentionPeriod;
    private string _snapshotIdentifier;
    private List`1<Tag> _tags;
    [AWSPropertyAttribute]
public string ClusterIdentifier { get; public set; }
    public Nullable`1<int> ManualSnapshotRetentionPeriod { get; public set; }
    [AWSPropertyAttribute]
public string SnapshotIdentifier { get; public set; }
    public List`1<Tag> Tags { get; public set; }
    public string get_ClusterIdentifier();
    public void set_ClusterIdentifier(string value);
    internal bool IsSetClusterIdentifier();
    public Nullable`1<int> get_ManualSnapshotRetentionPeriod();
    public void set_ManualSnapshotRetentionPeriod(Nullable`1<int> value);
    internal bool IsSetManualSnapshotRetentionPeriod();
    public string get_SnapshotIdentifier();
    public void set_SnapshotIdentifier(string value);
    internal bool IsSetSnapshotIdentifier();
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
}
public class Amazon.Redshift.Model.CreateClusterSnapshotResponse : AmazonWebServiceResponse {
    private Snapshot _snapshot;
    public Snapshot Snapshot { get; public set; }
    public Snapshot get_Snapshot();
    public void set_Snapshot(Snapshot value);
    internal bool IsSetSnapshot();
}
public class Amazon.Redshift.Model.CreateClusterSubnetGroupRequest : AmazonRedshiftRequest {
    private string _clusterSubnetGroupName;
    private string _description;
    private List`1<string> _subnetIds;
    private List`1<Tag> _tags;
    [AWSPropertyAttribute]
public string ClusterSubnetGroupName { get; public set; }
    [AWSPropertyAttribute]
public string Description { get; public set; }
    [AWSPropertyAttribute]
public List`1<string> SubnetIds { get; public set; }
    public List`1<Tag> Tags { get; public set; }
    public string get_ClusterSubnetGroupName();
    public void set_ClusterSubnetGroupName(string value);
    internal bool IsSetClusterSubnetGroupName();
    public string get_Description();
    public void set_Description(string value);
    internal bool IsSetDescription();
    public List`1<string> get_SubnetIds();
    public void set_SubnetIds(List`1<string> value);
    internal bool IsSetSubnetIds();
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
}
public class Amazon.Redshift.Model.CreateClusterSubnetGroupResponse : AmazonWebServiceResponse {
    private ClusterSubnetGroup _clusterSubnetGroup;
    public ClusterSubnetGroup ClusterSubnetGroup { get; public set; }
    public ClusterSubnetGroup get_ClusterSubnetGroup();
    public void set_ClusterSubnetGroup(ClusterSubnetGroup value);
    internal bool IsSetClusterSubnetGroup();
}
public class Amazon.Redshift.Model.CreateCustomDomainAssociationRequest : AmazonRedshiftRequest {
    private string _clusterIdentifier;
    private string _customDomainCertificateArn;
    private string _customDomainName;
    [AWSPropertyAttribute]
public string ClusterIdentifier { get; public set; }
    [AWSPropertyAttribute]
public string CustomDomainCertificateArn { get; public set; }
    [AWSPropertyAttribute]
public string CustomDomainName { get; public set; }
    public string get_ClusterIdentifier();
    public void set_ClusterIdentifier(string value);
    internal bool IsSetClusterIdentifier();
    public string get_CustomDomainCertificateArn();
    public void set_CustomDomainCertificateArn(string value);
    internal bool IsSetCustomDomainCertificateArn();
    public string get_CustomDomainName();
    public void set_CustomDomainName(string value);
    internal bool IsSetCustomDomainName();
}
public class Amazon.Redshift.Model.CreateCustomDomainAssociationResponse : AmazonWebServiceResponse {
    private string _clusterIdentifier;
    private string _customDomainCertExpiryTime;
    private string _customDomainCertificateArn;
    private string _customDomainName;
    [AWSPropertyAttribute]
public string ClusterIdentifier { get; public set; }
    [AWSPropertyAttribute]
public string CustomDomainCertExpiryTime { get; public set; }
    [AWSPropertyAttribute]
public string CustomDomainCertificateArn { get; public set; }
    [AWSPropertyAttribute]
public string CustomDomainName { get; public set; }
    public string get_ClusterIdentifier();
    public void set_ClusterIdentifier(string value);
    internal bool IsSetClusterIdentifier();
    public string get_CustomDomainCertExpiryTime();
    public void set_CustomDomainCertExpiryTime(string value);
    internal bool IsSetCustomDomainCertExpiryTime();
    public string get_CustomDomainCertificateArn();
    public void set_CustomDomainCertificateArn(string value);
    internal bool IsSetCustomDomainCertificateArn();
    public string get_CustomDomainName();
    public void set_CustomDomainName(string value);
    internal bool IsSetCustomDomainName();
}
public class Amazon.Redshift.Model.CreateEndpointAccessRequest : AmazonRedshiftRequest {
    private string _clusterIdentifier;
    private string _endpointName;
    private string _resourceOwner;
    private string _subnetGroupName;
    private List`1<string> _vpcSecurityGroupIds;
    [AWSPropertyAttribute]
public string ClusterIdentifier { get; public set; }
    [AWSPropertyAttribute]
public string EndpointName { get; public set; }
    [AWSPropertyAttribute]
public string ResourceOwner { get; public set; }
    [AWSPropertyAttribute]
public string SubnetGroupName { get; public set; }
    public List`1<string> VpcSecurityGroupIds { get; public set; }
    public string get_ClusterIdentifier();
    public void set_ClusterIdentifier(string value);
    internal bool IsSetClusterIdentifier();
    public string get_EndpointName();
    public void set_EndpointName(string value);
    internal bool IsSetEndpointName();
    public string get_ResourceOwner();
    public void set_ResourceOwner(string value);
    internal bool IsSetResourceOwner();
    public string get_SubnetGroupName();
    public void set_SubnetGroupName(string value);
    internal bool IsSetSubnetGroupName();
    public List`1<string> get_VpcSecurityGroupIds();
    public void set_VpcSecurityGroupIds(List`1<string> value);
    internal bool IsSetVpcSecurityGroupIds();
}
public class Amazon.Redshift.Model.CreateEndpointAccessResponse : AmazonWebServiceResponse {
    private string _address;
    private string _clusterIdentifier;
    private Nullable`1<DateTime> _endpointCreateTime;
    private string _endpointName;
    private string _endpointStatus;
    private Nullable`1<int> _port;
    private string _resourceOwner;
    private string _subnetGroupName;
    private VpcEndpoint _vpcEndpoint;
    private List`1<VpcSecurityGroupMembership> _vpcSecurityGroups;
    [AWSPropertyAttribute]
public string Address { get; public set; }
    [AWSPropertyAttribute]
public string ClusterIdentifier { get; public set; }
    public Nullable`1<DateTime> EndpointCreateTime { get; public set; }
    [AWSPropertyAttribute]
public string EndpointName { get; public set; }
    [AWSPropertyAttribute]
public string EndpointStatus { get; public set; }
    public Nullable`1<int> Port { get; public set; }
    [AWSPropertyAttribute]
public string ResourceOwner { get; public set; }
    [AWSPropertyAttribute]
public string SubnetGroupName { get; public set; }
    public VpcEndpoint VpcEndpoint { get; public set; }
    public List`1<VpcSecurityGroupMembership> VpcSecurityGroups { get; public set; }
    public string get_Address();
    public void set_Address(string value);
    internal bool IsSetAddress();
    public string get_ClusterIdentifier();
    public void set_ClusterIdentifier(string value);
    internal bool IsSetClusterIdentifier();
    public Nullable`1<DateTime> get_EndpointCreateTime();
    public void set_EndpointCreateTime(Nullable`1<DateTime> value);
    internal bool IsSetEndpointCreateTime();
    public string get_EndpointName();
    public void set_EndpointName(string value);
    internal bool IsSetEndpointName();
    public string get_EndpointStatus();
    public void set_EndpointStatus(string value);
    internal bool IsSetEndpointStatus();
    public Nullable`1<int> get_Port();
    public void set_Port(Nullable`1<int> value);
    internal bool IsSetPort();
    public string get_ResourceOwner();
    public void set_ResourceOwner(string value);
    internal bool IsSetResourceOwner();
    public string get_SubnetGroupName();
    public void set_SubnetGroupName(string value);
    internal bool IsSetSubnetGroupName();
    public VpcEndpoint get_VpcEndpoint();
    public void set_VpcEndpoint(VpcEndpoint value);
    internal bool IsSetVpcEndpoint();
    public List`1<VpcSecurityGroupMembership> get_VpcSecurityGroups();
    public void set_VpcSecurityGroups(List`1<VpcSecurityGroupMembership> value);
    internal bool IsSetVpcSecurityGroups();
}
public class Amazon.Redshift.Model.CreateEventSubscriptionRequest : AmazonRedshiftRequest {
    private Nullable`1<bool> _enabled;
    private List`1<string> _eventCategories;
    private string _severity;
    private string _snsTopicArn;
    private List`1<string> _sourceIds;
    private string _sourceType;
    private string _subscriptionName;
    private List`1<Tag> _tags;
    public Nullable`1<bool> Enabled { get; public set; }
    public List`1<string> EventCategories { get; public set; }
    [AWSPropertyAttribute]
public string Severity { get; public set; }
    [AWSPropertyAttribute]
public string SnsTopicArn { get; public set; }
    public List`1<string> SourceIds { get; public set; }
    [AWSPropertyAttribute]
public string SourceType { get; public set; }
    [AWSPropertyAttribute]
public string SubscriptionName { get; public set; }
    public List`1<Tag> Tags { get; public set; }
    public Nullable`1<bool> get_Enabled();
    public void set_Enabled(Nullable`1<bool> value);
    internal bool IsSetEnabled();
    public List`1<string> get_EventCategories();
    public void set_EventCategories(List`1<string> value);
    internal bool IsSetEventCategories();
    public string get_Severity();
    public void set_Severity(string value);
    internal bool IsSetSeverity();
    public string get_SnsTopicArn();
    public void set_SnsTopicArn(string value);
    internal bool IsSetSnsTopicArn();
    public List`1<string> get_SourceIds();
    public void set_SourceIds(List`1<string> value);
    internal bool IsSetSourceIds();
    public string get_SourceType();
    public void set_SourceType(string value);
    internal bool IsSetSourceType();
    public string get_SubscriptionName();
    public void set_SubscriptionName(string value);
    internal bool IsSetSubscriptionName();
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
}
public class Amazon.Redshift.Model.CreateEventSubscriptionResponse : AmazonWebServiceResponse {
    private EventSubscription _eventSubscription;
    public EventSubscription EventSubscription { get; public set; }
    public EventSubscription get_EventSubscription();
    public void set_EventSubscription(EventSubscription value);
    internal bool IsSetEventSubscription();
}
public class Amazon.Redshift.Model.CreateHsmClientCertificateRequest : AmazonRedshiftRequest {
    private string _hsmClientCertificateIdentifier;
    private List`1<Tag> _tags;
    [AWSPropertyAttribute]
public string HsmClientCertificateIdentifier { get; public set; }
    public List`1<Tag> Tags { get; public set; }
    public string get_HsmClientCertificateIdentifier();
    public void set_HsmClientCertificateIdentifier(string value);
    internal bool IsSetHsmClientCertificateIdentifier();
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
}
public class Amazon.Redshift.Model.CreateHsmClientCertificateResponse : AmazonWebServiceResponse {
    private HsmClientCertificate _hsmClientCertificate;
    public HsmClientCertificate HsmClientCertificate { get; public set; }
    public HsmClientCertificate get_HsmClientCertificate();
    public void set_HsmClientCertificate(HsmClientCertificate value);
    internal bool IsSetHsmClientCertificate();
}
public class Amazon.Redshift.Model.CreateHsmConfigurationRequest : AmazonRedshiftRequest {
    private string _description;
    private string _hsmConfigurationIdentifier;
    private string _hsmIpAddress;
    private string _hsmPartitionName;
    private string _hsmPartitionPassword;
    private string _hsmServerPublicCertificate;
    private List`1<Tag> _tags;
    [AWSPropertyAttribute]
public string Description { get; public set; }
    [AWSPropertyAttribute]
public string HsmConfigurationIdentifier { get; public set; }
    [AWSPropertyAttribute]
public string HsmIpAddress { get; public set; }
    [AWSPropertyAttribute]
public string HsmPartitionName { get; public set; }
    [AWSPropertyAttribute]
public string HsmPartitionPassword { get; public set; }
    [AWSPropertyAttribute]
public string HsmServerPublicCertificate { get; public set; }
    public List`1<Tag> Tags { get; public set; }
    public string get_Description();
    public void set_Description(string value);
    internal bool IsSetDescription();
    public string get_HsmConfigurationIdentifier();
    public void set_HsmConfigurationIdentifier(string value);
    internal bool IsSetHsmConfigurationIdentifier();
    public string get_HsmIpAddress();
    public void set_HsmIpAddress(string value);
    internal bool IsSetHsmIpAddress();
    public string get_HsmPartitionName();
    public void set_HsmPartitionName(string value);
    internal bool IsSetHsmPartitionName();
    public string get_HsmPartitionPassword();
    public void set_HsmPartitionPassword(string value);
    internal bool IsSetHsmPartitionPassword();
    public string get_HsmServerPublicCertificate();
    public void set_HsmServerPublicCertificate(string value);
    internal bool IsSetHsmServerPublicCertificate();
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
}
public class Amazon.Redshift.Model.CreateHsmConfigurationResponse : AmazonWebServiceResponse {
    private HsmConfiguration _hsmConfiguration;
    public HsmConfiguration HsmConfiguration { get; public set; }
    public HsmConfiguration get_HsmConfiguration();
    public void set_HsmConfiguration(HsmConfiguration value);
    internal bool IsSetHsmConfiguration();
}
public class Amazon.Redshift.Model.CreateRedshiftIdcApplicationRequest : AmazonRedshiftRequest {
    private List`1<AuthorizedTokenIssuer> _authorizedTokenIssuerList;
    private string _iamRoleArn;
    private string _idcDisplayName;
    private string _idcInstanceArn;
    private string _identityNamespace;
    private string _redshiftIdcApplicationName;
    private List`1<ServiceIntegrationsUnion> _serviceIntegrations;
    public List`1<AuthorizedTokenIssuer> AuthorizedTokenIssuerList { get; public set; }
    [AWSPropertyAttribute]
public string IamRoleArn { get; public set; }
    [AWSPropertyAttribute]
public string IdcDisplayName { get; public set; }
    [AWSPropertyAttribute]
public string IdcInstanceArn { get; public set; }
    [AWSPropertyAttribute]
public string IdentityNamespace { get; public set; }
    [AWSPropertyAttribute]
public string RedshiftIdcApplicationName { get; public set; }
    public List`1<ServiceIntegrationsUnion> ServiceIntegrations { get; public set; }
    public List`1<AuthorizedTokenIssuer> get_AuthorizedTokenIssuerList();
    public void set_AuthorizedTokenIssuerList(List`1<AuthorizedTokenIssuer> value);
    internal bool IsSetAuthorizedTokenIssuerList();
    public string get_IamRoleArn();
    public void set_IamRoleArn(string value);
    internal bool IsSetIamRoleArn();
    public string get_IdcDisplayName();
    public void set_IdcDisplayName(string value);
    internal bool IsSetIdcDisplayName();
    public string get_IdcInstanceArn();
    public void set_IdcInstanceArn(string value);
    internal bool IsSetIdcInstanceArn();
    public string get_IdentityNamespace();
    public void set_IdentityNamespace(string value);
    internal bool IsSetIdentityNamespace();
    public string get_RedshiftIdcApplicationName();
    public void set_RedshiftIdcApplicationName(string value);
    internal bool IsSetRedshiftIdcApplicationName();
    public List`1<ServiceIntegrationsUnion> get_ServiceIntegrations();
    public void set_ServiceIntegrations(List`1<ServiceIntegrationsUnion> value);
    internal bool IsSetServiceIntegrations();
}
public class Amazon.Redshift.Model.CreateRedshiftIdcApplicationResponse : AmazonWebServiceResponse {
    private RedshiftIdcApplication _redshiftIdcApplication;
    public RedshiftIdcApplication RedshiftIdcApplication { get; public set; }
    public RedshiftIdcApplication get_RedshiftIdcApplication();
    public void set_RedshiftIdcApplication(RedshiftIdcApplication value);
    internal bool IsSetRedshiftIdcApplication();
}
public class Amazon.Redshift.Model.CreateScheduledActionRequest : AmazonRedshiftRequest {
    private Nullable`1<bool> _enable;
    private Nullable`1<DateTime> _endTime;
    private string _iamRole;
    private string _schedule;
    private string _scheduledActionDescription;
    private string _scheduledActionName;
    private Nullable`1<DateTime> _startTime;
    private ScheduledActionType _targetAction;
    public Nullable`1<bool> Enable { get; public set; }
    public Nullable`1<DateTime> EndTime { get; public set; }
    [AWSPropertyAttribute]
public string IamRole { get; public set; }
    [AWSPropertyAttribute]
public string Schedule { get; public set; }
    [AWSPropertyAttribute]
public string ScheduledActionDescription { get; public set; }
    [AWSPropertyAttribute]
public string ScheduledActionName { get; public set; }
    public Nullable`1<DateTime> StartTime { get; public set; }
    [AWSPropertyAttribute]
public ScheduledActionType TargetAction { get; public set; }
    public Nullable`1<bool> get_Enable();
    public void set_Enable(Nullable`1<bool> value);
    internal bool IsSetEnable();
    public Nullable`1<DateTime> get_EndTime();
    public void set_EndTime(Nullable`1<DateTime> value);
    internal bool IsSetEndTime();
    public string get_IamRole();
    public void set_IamRole(string value);
    internal bool IsSetIamRole();
    public string get_Schedule();
    public void set_Schedule(string value);
    internal bool IsSetSchedule();
    public string get_ScheduledActionDescription();
    public void set_ScheduledActionDescription(string value);
    internal bool IsSetScheduledActionDescription();
    public string get_ScheduledActionName();
    public void set_ScheduledActionName(string value);
    internal bool IsSetScheduledActionName();
    public Nullable`1<DateTime> get_StartTime();
    public void set_StartTime(Nullable`1<DateTime> value);
    internal bool IsSetStartTime();
    public ScheduledActionType get_TargetAction();
    public void set_TargetAction(ScheduledActionType value);
    internal bool IsSetTargetAction();
}
public class Amazon.Redshift.Model.CreateScheduledActionResponse : AmazonWebServiceResponse {
    private Nullable`1<DateTime> _endTime;
    private string _iamRole;
    private List`1<DateTime> _nextInvocations;
    private string _schedule;
    private string _scheduledActionDescription;
    private string _scheduledActionName;
    private Nullable`1<DateTime> _startTime;
    private ScheduledActionState _state;
    private ScheduledActionType _targetAction;
    public Nullable`1<DateTime> EndTime { get; public set; }
    [AWSPropertyAttribute]
public string IamRole { get; public set; }
    public List`1<DateTime> NextInvocations { get; public set; }
    [AWSPropertyAttribute]
public string Schedule { get; public set; }
    [AWSPropertyAttribute]
public string ScheduledActionDescription { get; public set; }
    [AWSPropertyAttribute]
public string ScheduledActionName { get; public set; }
    public Nullable`1<DateTime> StartTime { get; public set; }
    public ScheduledActionState State { get; public set; }
    public ScheduledActionType TargetAction { get; public set; }
    public Nullable`1<DateTime> get_EndTime();
    public void set_EndTime(Nullable`1<DateTime> value);
    internal bool IsSetEndTime();
    public string get_IamRole();
    public void set_IamRole(string value);
    internal bool IsSetIamRole();
    public List`1<DateTime> get_NextInvocations();
    public void set_NextInvocations(List`1<DateTime> value);
    internal bool IsSetNextInvocations();
    public string get_Schedule();
    public void set_Schedule(string value);
    internal bool IsSetSchedule();
    public string get_ScheduledActionDescription();
    public void set_ScheduledActionDescription(string value);
    internal bool IsSetScheduledActionDescription();
    public string get_ScheduledActionName();
    public void set_ScheduledActionName(string value);
    internal bool IsSetScheduledActionName();
    public Nullable`1<DateTime> get_StartTime();
    public void set_StartTime(Nullable`1<DateTime> value);
    internal bool IsSetStartTime();
    public ScheduledActionState get_State();
    public void set_State(ScheduledActionState value);
    internal bool IsSetState();
    public ScheduledActionType get_TargetAction();
    public void set_TargetAction(ScheduledActionType value);
    internal bool IsSetTargetAction();
}
public class Amazon.Redshift.Model.CreateSnapshotCopyGrantRequest : AmazonRedshiftRequest {
    private string _kmsKeyId;
    private string _snapshotCopyGrantName;
    private List`1<Tag> _tags;
    [AWSPropertyAttribute]
public string KmsKeyId { get; public set; }
    [AWSPropertyAttribute]
public string SnapshotCopyGrantName { get; public set; }
    public List`1<Tag> Tags { get; public set; }
    public string get_KmsKeyId();
    public void set_KmsKeyId(string value);
    internal bool IsSetKmsKeyId();
    public string get_SnapshotCopyGrantName();
    public void set_SnapshotCopyGrantName(string value);
    internal bool IsSetSnapshotCopyGrantName();
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
}
public class Amazon.Redshift.Model.CreateSnapshotCopyGrantResponse : AmazonWebServiceResponse {
    private SnapshotCopyGrant _snapshotCopyGrant;
    public SnapshotCopyGrant SnapshotCopyGrant { get; public set; }
    public SnapshotCopyGrant get_SnapshotCopyGrant();
    public void set_SnapshotCopyGrant(SnapshotCopyGrant value);
    internal bool IsSetSnapshotCopyGrant();
}
public class Amazon.Redshift.Model.CreateSnapshotScheduleRequest : AmazonRedshiftRequest {
    private Nullable`1<bool> _dryRun;
    private Nullable`1<int> _nextInvocations;
    private List`1<string> _scheduleDefinitions;
    private string _scheduleDescription;
    private string _scheduleIdentifier;
    private List`1<Tag> _tags;
    public Nullable`1<bool> DryRun { get; public set; }
    public Nullable`1<int> NextInvocations { get; public set; }
    public List`1<string> ScheduleDefinitions { get; public set; }
    [AWSPropertyAttribute]
public string ScheduleDescription { get; public set; }
    [AWSPropertyAttribute]
public string ScheduleIdentifier { get; public set; }
    public List`1<Tag> Tags { get; public set; }
    public Nullable`1<bool> get_DryRun();
    public void set_DryRun(Nullable`1<bool> value);
    internal bool IsSetDryRun();
    public Nullable`1<int> get_NextInvocations();
    public void set_NextInvocations(Nullable`1<int> value);
    internal bool IsSetNextInvocations();
    public List`1<string> get_ScheduleDefinitions();
    public void set_ScheduleDefinitions(List`1<string> value);
    internal bool IsSetScheduleDefinitions();
    public string get_ScheduleDescription();
    public void set_ScheduleDescription(string value);
    internal bool IsSetScheduleDescription();
    public string get_ScheduleIdentifier();
    public void set_ScheduleIdentifier(string value);
    internal bool IsSetScheduleIdentifier();
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
}
public class Amazon.Redshift.Model.CreateSnapshotScheduleResponse : AmazonWebServiceResponse {
    private Nullable`1<int> _associatedClusterCount;
    private List`1<ClusterAssociatedToSchedule> _associatedClusters;
    private List`1<DateTime> _nextInvocations;
    private List`1<string> _scheduleDefinitions;
    private string _scheduleDescription;
    private string _scheduleIdentifier;
    private List`1<Tag> _tags;
    public Nullable`1<int> AssociatedClusterCount { get; public set; }
    public List`1<ClusterAssociatedToSchedule> AssociatedClusters { get; public set; }
    public List`1<DateTime> NextInvocations { get; public set; }
    public List`1<string> ScheduleDefinitions { get; public set; }
    [AWSPropertyAttribute]
public string ScheduleDescription { get; public set; }
    [AWSPropertyAttribute]
public string ScheduleIdentifier { get; public set; }
    public List`1<Tag> Tags { get; public set; }
    public Nullable`1<int> get_AssociatedClusterCount();
    public void set_AssociatedClusterCount(Nullable`1<int> value);
    internal bool IsSetAssociatedClusterCount();
    public List`1<ClusterAssociatedToSchedule> get_AssociatedClusters();
    public void set_AssociatedClusters(List`1<ClusterAssociatedToSchedule> value);
    internal bool IsSetAssociatedClusters();
    public List`1<DateTime> get_NextInvocations();
    public void set_NextInvocations(List`1<DateTime> value);
    internal bool IsSetNextInvocations();
    public List`1<string> get_ScheduleDefinitions();
    public void set_ScheduleDefinitions(List`1<string> value);
    internal bool IsSetScheduleDefinitions();
    public string get_ScheduleDescription();
    public void set_ScheduleDescription(string value);
    internal bool IsSetScheduleDescription();
    public string get_ScheduleIdentifier();
    public void set_ScheduleIdentifier(string value);
    internal bool IsSetScheduleIdentifier();
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
}
public class Amazon.Redshift.Model.CreateTagsRequest : AmazonRedshiftRequest {
    private string _resourceName;
    private List`1<Tag> _tags;
    [AWSPropertyAttribute]
public string ResourceName { get; public set; }
    [AWSPropertyAttribute]
public List`1<Tag> Tags { get; public set; }
    public string get_ResourceName();
    public void set_ResourceName(string value);
    internal bool IsSetResourceName();
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
}
public class Amazon.Redshift.Model.CreateTagsResponse : AmazonWebServiceResponse {
}
public class Amazon.Redshift.Model.CreateUsageLimitRequest : AmazonRedshiftRequest {
    private Nullable`1<long> _amount;
    private UsageLimitBreachAction _breachAction;
    private string _clusterIdentifier;
    private UsageLimitFeatureType _featureType;
    private UsageLimitLimitType _limitType;
    private UsageLimitPeriod _period;
    private List`1<Tag> _tags;
    [AWSPropertyAttribute]
public Nullable`1<long> Amount { get; public set; }
    public UsageLimitBreachAction BreachAction { get; public set; }
    [AWSPropertyAttribute]
public string ClusterIdentifier { get; public set; }
    [AWSPropertyAttribute]
public UsageLimitFeatureType FeatureType { get; public set; }
    [AWSPropertyAttribute]
public UsageLimitLimitType LimitType { get; public set; }
    public UsageLimitPeriod Period { get; public set; }
    public List`1<Tag> Tags { get; public set; }
    public Nullable`1<long> get_Amount();
    public void set_Amount(Nullable`1<long> value);
    internal bool IsSetAmount();
    public UsageLimitBreachAction get_BreachAction();
    public void set_BreachAction(UsageLimitBreachAction value);
    internal bool IsSetBreachAction();
    public string get_ClusterIdentifier();
    public void set_ClusterIdentifier(string value);
    internal bool IsSetClusterIdentifier();
    public UsageLimitFeatureType get_FeatureType();
    public void set_FeatureType(UsageLimitFeatureType value);
    internal bool IsSetFeatureType();
    public UsageLimitLimitType get_LimitType();
    public void set_LimitType(UsageLimitLimitType value);
    internal bool IsSetLimitType();
    public UsageLimitPeriod get_Period();
    public void set_Period(UsageLimitPeriod value);
    internal bool IsSetPeriod();
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
}
public class Amazon.Redshift.Model.CreateUsageLimitResponse : AmazonWebServiceResponse {
    private Nullable`1<long> _amount;
    private UsageLimitBreachAction _breachAction;
    private string _clusterIdentifier;
    private UsageLimitFeatureType _featureType;
    private UsageLimitLimitType _limitType;
    private UsageLimitPeriod _period;
    private List`1<Tag> _tags;
    private string _usageLimitId;
    public Nullable`1<long> Amount { get; public set; }
    public UsageLimitBreachAction BreachAction { get; public set; }
    [AWSPropertyAttribute]
public string ClusterIdentifier { get; public set; }
    public UsageLimitFeatureType FeatureType { get; public set; }
    public UsageLimitLimitType LimitType { get; public set; }
    public UsageLimitPeriod Period { get; public set; }
    public List`1<Tag> Tags { get; public set; }
    [AWSPropertyAttribute]
public string UsageLimitId { get; public set; }
    public Nullable`1<long> get_Amount();
    public void set_Amount(Nullable`1<long> value);
    internal bool IsSetAmount();
    public UsageLimitBreachAction get_BreachAction();
    public void set_BreachAction(UsageLimitBreachAction value);
    internal bool IsSetBreachAction();
    public string get_ClusterIdentifier();
    public void set_ClusterIdentifier(string value);
    internal bool IsSetClusterIdentifier();
    public UsageLimitFeatureType get_FeatureType();
    public void set_FeatureType(UsageLimitFeatureType value);
    internal bool IsSetFeatureType();
    public UsageLimitLimitType get_LimitType();
    public void set_LimitType(UsageLimitLimitType value);
    internal bool IsSetLimitType();
    public UsageLimitPeriod get_Period();
    public void set_Period(UsageLimitPeriod value);
    internal bool IsSetPeriod();
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
    public string get_UsageLimitId();
    public void set_UsageLimitId(string value);
    internal bool IsSetUsageLimitId();
}
public class Amazon.Redshift.Model.CustomCnameAssociationException : AmazonRedshiftException {
    public CustomCnameAssociationException(string message);
    public CustomCnameAssociationException(string message, Exception innerException);
    public CustomCnameAssociationException(Exception innerException);
    public CustomCnameAssociationException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public CustomCnameAssociationException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Redshift.Model.CustomDomainAssociationNotFoundException : AmazonRedshiftException {
    public CustomDomainAssociationNotFoundException(string message);
    public CustomDomainAssociationNotFoundException(string message, Exception innerException);
    public CustomDomainAssociationNotFoundException(Exception innerException);
    public CustomDomainAssociationNotFoundException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public CustomDomainAssociationNotFoundException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Redshift.Model.DataShare : object {
    private Nullable`1<bool> _allowPubliclyAccessibleConsumers;
    private string _dataShareArn;
    private List`1<DataShareAssociation> _dataShareAssociations;
    private string _managedBy;
    private string _producerArn;
    public Nullable`1<bool> AllowPubliclyAccessibleConsumers { get; public set; }
    [AWSPropertyAttribute]
public string DataShareArn { get; public set; }
    public List`1<DataShareAssociation> DataShareAssociations { get; public set; }
    [AWSPropertyAttribute]
public string ManagedBy { get; public set; }
    [AWSPropertyAttribute]
public string ProducerArn { get; public set; }
    public Nullable`1<bool> get_AllowPubliclyAccessibleConsumers();
    public void set_AllowPubliclyAccessibleConsumers(Nullable`1<bool> value);
    internal bool IsSetAllowPubliclyAccessibleConsumers();
    public string get_DataShareArn();
    public void set_DataShareArn(string value);
    internal bool IsSetDataShareArn();
    public List`1<DataShareAssociation> get_DataShareAssociations();
    public void set_DataShareAssociations(List`1<DataShareAssociation> value);
    internal bool IsSetDataShareAssociations();
    public string get_ManagedBy();
    public void set_ManagedBy(string value);
    internal bool IsSetManagedBy();
    public string get_ProducerArn();
    public void set_ProducerArn(string value);
    internal bool IsSetProducerArn();
}
public class Amazon.Redshift.Model.DataShareAssociation : object {
    private Nullable`1<bool> _consumerAcceptedWrites;
    private string _consumerIdentifier;
    private string _consumerRegion;
    private Nullable`1<DateTime> _createdDate;
    private Nullable`1<bool> _producerAllowedWrites;
    private DataShareStatus _status;
    private Nullable`1<DateTime> _statusChangeDate;
    public Nullable`1<bool> ConsumerAcceptedWrites { get; public set; }
    [AWSPropertyAttribute]
public string ConsumerIdentifier { get; public set; }
    [AWSPropertyAttribute]
public string ConsumerRegion { get; public set; }
    public Nullable`1<DateTime> CreatedDate { get; public set; }
    public Nullable`1<bool> ProducerAllowedWrites { get; public set; }
    public DataShareStatus Status { get; public set; }
    public Nullable`1<DateTime> StatusChangeDate { get; public set; }
    public Nullable`1<bool> get_ConsumerAcceptedWrites();
    public void set_ConsumerAcceptedWrites(Nullable`1<bool> value);
    internal bool IsSetConsumerAcceptedWrites();
    public string get_ConsumerIdentifier();
    public void set_ConsumerIdentifier(string value);
    internal bool IsSetConsumerIdentifier();
    public string get_ConsumerRegion();
    public void set_ConsumerRegion(string value);
    internal bool IsSetConsumerRegion();
    public Nullable`1<DateTime> get_CreatedDate();
    public void set_CreatedDate(Nullable`1<DateTime> value);
    internal bool IsSetCreatedDate();
    public Nullable`1<bool> get_ProducerAllowedWrites();
    public void set_ProducerAllowedWrites(Nullable`1<bool> value);
    internal bool IsSetProducerAllowedWrites();
    public DataShareStatus get_Status();
    public void set_Status(DataShareStatus value);
    internal bool IsSetStatus();
    public Nullable`1<DateTime> get_StatusChangeDate();
    public void set_StatusChangeDate(Nullable`1<DateTime> value);
    internal bool IsSetStatusChangeDate();
}
public class Amazon.Redshift.Model.DataTransferProgress : object {
    private Nullable`1<double> _currentRateInMegaBytesPerSecond;
    private Nullable`1<long> _dataTransferredInMegaBytes;
    private Nullable`1<long> _elapsedTimeInSeconds;
    private Nullable`1<long> _estimatedTimeToCompletionInSeconds;
    private string _status;
    private Nullable`1<long> _totalDataInMegaBytes;
    public Nullable`1<double> CurrentRateInMegaBytesPerSecond { get; public set; }
    public Nullable`1<long> DataTransferredInMegaBytes { get; public set; }
    public Nullable`1<long> ElapsedTimeInSeconds { get; public set; }
    public Nullable`1<long> EstimatedTimeToCompletionInSeconds { get; public set; }
    [AWSPropertyAttribute]
public string Status { get; public set; }
    public Nullable`1<long> TotalDataInMegaBytes { get; public set; }
    public Nullable`1<double> get_CurrentRateInMegaBytesPerSecond();
    public void set_CurrentRateInMegaBytesPerSecond(Nullable`1<double> value);
    internal bool IsSetCurrentRateInMegaBytesPerSecond();
    public Nullable`1<long> get_DataTransferredInMegaBytes();
    public void set_DataTransferredInMegaBytes(Nullable`1<long> value);
    internal bool IsSetDataTransferredInMegaBytes();
    public Nullable`1<long> get_ElapsedTimeInSeconds();
    public void set_ElapsedTimeInSeconds(Nullable`1<long> value);
    internal bool IsSetElapsedTimeInSeconds();
    public Nullable`1<long> get_EstimatedTimeToCompletionInSeconds();
    public void set_EstimatedTimeToCompletionInSeconds(Nullable`1<long> value);
    internal bool IsSetEstimatedTimeToCompletionInSeconds();
    public string get_Status();
    public void set_Status(string value);
    internal bool IsSetStatus();
    public Nullable`1<long> get_TotalDataInMegaBytes();
    public void set_TotalDataInMegaBytes(Nullable`1<long> value);
    internal bool IsSetTotalDataInMegaBytes();
}
public class Amazon.Redshift.Model.DeauthorizeDataShareRequest : AmazonRedshiftRequest {
    private string _consumerIdentifier;
    private string _dataShareArn;
    [AWSPropertyAttribute]
public string ConsumerIdentifier { get; public set; }
    [AWSPropertyAttribute]
public string DataShareArn { get; public set; }
    public string get_ConsumerIdentifier();
    public void set_ConsumerIdentifier(string value);
    internal bool IsSetConsumerIdentifier();
    public string get_DataShareArn();
    public void set_DataShareArn(string value);
    internal bool IsSetDataShareArn();
}
public class Amazon.Redshift.Model.DeauthorizeDataShareResponse : AmazonWebServiceResponse {
    private Nullable`1<bool> _allowPubliclyAccessibleConsumers;
    private string _dataShareArn;
    private List`1<DataShareAssociation> _dataShareAssociations;
    private string _managedBy;
    private string _producerArn;
    public Nullable`1<bool> AllowPubliclyAccessibleConsumers { get; public set; }
    [AWSPropertyAttribute]
public string DataShareArn { get; public set; }
    public List`1<DataShareAssociation> DataShareAssociations { get; public set; }
    [AWSPropertyAttribute]
public string ManagedBy { get; public set; }
    [AWSPropertyAttribute]
public string ProducerArn { get; public set; }
    public Nullable`1<bool> get_AllowPubliclyAccessibleConsumers();
    public void set_AllowPubliclyAccessibleConsumers(Nullable`1<bool> value);
    internal bool IsSetAllowPubliclyAccessibleConsumers();
    public string get_DataShareArn();
    public void set_DataShareArn(string value);
    internal bool IsSetDataShareArn();
    public List`1<DataShareAssociation> get_DataShareAssociations();
    public void set_DataShareAssociations(List`1<DataShareAssociation> value);
    internal bool IsSetDataShareAssociations();
    public string get_ManagedBy();
    public void set_ManagedBy(string value);
    internal bool IsSetManagedBy();
    public string get_ProducerArn();
    public void set_ProducerArn(string value);
    internal bool IsSetProducerArn();
}
public class Amazon.Redshift.Model.DefaultClusterParameters : object {
    private string _marker;
    private string _parameterGroupFamily;
    private List`1<Parameter> _parameters;
    [AWSPropertyAttribute]
public string Marker { get; public set; }
    [AWSPropertyAttribute]
public string ParameterGroupFamily { get; public set; }
    public List`1<Parameter> Parameters { get; public set; }
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public string get_ParameterGroupFamily();
    public void set_ParameterGroupFamily(string value);
    internal bool IsSetParameterGroupFamily();
    public List`1<Parameter> get_Parameters();
    public void set_Parameters(List`1<Parameter> value);
    internal bool IsSetParameters();
}
public class Amazon.Redshift.Model.DeferredMaintenanceWindow : object {
    private Nullable`1<DateTime> _deferMaintenanceEndTime;
    private string _deferMaintenanceIdentifier;
    private Nullable`1<DateTime> _deferMaintenanceStartTime;
    public Nullable`1<DateTime> DeferMaintenanceEndTime { get; public set; }
    [AWSPropertyAttribute]
public string DeferMaintenanceIdentifier { get; public set; }
    public Nullable`1<DateTime> DeferMaintenanceStartTime { get; public set; }
    public Nullable`1<DateTime> get_DeferMaintenanceEndTime();
    public void set_DeferMaintenanceEndTime(Nullable`1<DateTime> value);
    internal bool IsSetDeferMaintenanceEndTime();
    public string get_DeferMaintenanceIdentifier();
    public void set_DeferMaintenanceIdentifier(string value);
    internal bool IsSetDeferMaintenanceIdentifier();
    public Nullable`1<DateTime> get_DeferMaintenanceStartTime();
    public void set_DeferMaintenanceStartTime(Nullable`1<DateTime> value);
    internal bool IsSetDeferMaintenanceStartTime();
}
public class Amazon.Redshift.Model.DeleteAuthenticationProfileRequest : AmazonRedshiftRequest {
    private string _authenticationProfileName;
    [AWSPropertyAttribute]
public string AuthenticationProfileName { get; public set; }
    public string get_AuthenticationProfileName();
    public void set_AuthenticationProfileName(string value);
    internal bool IsSetAuthenticationProfileName();
}
public class Amazon.Redshift.Model.DeleteAuthenticationProfileResponse : AmazonWebServiceResponse {
    private string _authenticationProfileName;
    [AWSPropertyAttribute]
public string AuthenticationProfileName { get; public set; }
    public string get_AuthenticationProfileName();
    public void set_AuthenticationProfileName(string value);
    internal bool IsSetAuthenticationProfileName();
}
public class Amazon.Redshift.Model.DeleteClusterParameterGroupRequest : AmazonRedshiftRequest {
    private string _parameterGroupName;
    [AWSPropertyAttribute]
public string ParameterGroupName { get; public set; }
    public string get_ParameterGroupName();
    public void set_ParameterGroupName(string value);
    internal bool IsSetParameterGroupName();
}
public class Amazon.Redshift.Model.DeleteClusterParameterGroupResponse : AmazonWebServiceResponse {
}
public class Amazon.Redshift.Model.DeleteClusterRequest : AmazonRedshiftRequest {
    private string _clusterIdentifier;
    private string _finalClusterSnapshotIdentifier;
    private Nullable`1<int> _finalClusterSnapshotRetentionPeriod;
    private Nullable`1<bool> _skipFinalClusterSnapshot;
    [AWSPropertyAttribute]
public string ClusterIdentifier { get; public set; }
    [AWSPropertyAttribute]
public string FinalClusterSnapshotIdentifier { get; public set; }
    public Nullable`1<int> FinalClusterSnapshotRetentionPeriod { get; public set; }
    public Nullable`1<bool> SkipFinalClusterSnapshot { get; public set; }
    public string get_ClusterIdentifier();
    public void set_ClusterIdentifier(string value);
    internal bool IsSetClusterIdentifier();
    public string get_FinalClusterSnapshotIdentifier();
    public void set_FinalClusterSnapshotIdentifier(string value);
    internal bool IsSetFinalClusterSnapshotIdentifier();
    public Nullable`1<int> get_FinalClusterSnapshotRetentionPeriod();
    public void set_FinalClusterSnapshotRetentionPeriod(Nullable`1<int> value);
    internal bool IsSetFinalClusterSnapshotRetentionPeriod();
    public Nullable`1<bool> get_SkipFinalClusterSnapshot();
    public void set_SkipFinalClusterSnapshot(Nullable`1<bool> value);
    internal bool IsSetSkipFinalClusterSnapshot();
}
public class Amazon.Redshift.Model.DeleteClusterResponse : AmazonWebServiceResponse {
    private Cluster _cluster;
    public Cluster Cluster { get; public set; }
    public Cluster get_Cluster();
    public void set_Cluster(Cluster value);
    internal bool IsSetCluster();
}
public class Amazon.Redshift.Model.DeleteClusterSecurityGroupRequest : AmazonRedshiftRequest {
    private string _clusterSecurityGroupName;
    [AWSPropertyAttribute]
public string ClusterSecurityGroupName { get; public set; }
    public string get_ClusterSecurityGroupName();
    public void set_ClusterSecurityGroupName(string value);
    internal bool IsSetClusterSecurityGroupName();
}
public class Amazon.Redshift.Model.DeleteClusterSecurityGroupResponse : AmazonWebServiceResponse {
}
public class Amazon.Redshift.Model.DeleteClusterSnapshotMessage : object {
    private string _snapshotClusterIdentifier;
    private string _snapshotIdentifier;
    [AWSPropertyAttribute]
public string SnapshotClusterIdentifier { get; public set; }
    [AWSPropertyAttribute]
public string SnapshotIdentifier { get; public set; }
    public string get_SnapshotClusterIdentifier();
    public void set_SnapshotClusterIdentifier(string value);
    internal bool IsSetSnapshotClusterIdentifier();
    public string get_SnapshotIdentifier();
    public void set_SnapshotIdentifier(string value);
    internal bool IsSetSnapshotIdentifier();
}
public class Amazon.Redshift.Model.DeleteClusterSnapshotRequest : AmazonRedshiftRequest {
    private string _snapshotClusterIdentifier;
    private string _snapshotIdentifier;
    [AWSPropertyAttribute]
public string SnapshotClusterIdentifier { get; public set; }
    [AWSPropertyAttribute]
public string SnapshotIdentifier { get; public set; }
    public string get_SnapshotClusterIdentifier();
    public void set_SnapshotClusterIdentifier(string value);
    internal bool IsSetSnapshotClusterIdentifier();
    public string get_SnapshotIdentifier();
    public void set_SnapshotIdentifier(string value);
    internal bool IsSetSnapshotIdentifier();
}
public class Amazon.Redshift.Model.DeleteClusterSnapshotResponse : AmazonWebServiceResponse {
    private Snapshot _snapshot;
    public Snapshot Snapshot { get; public set; }
    public Snapshot get_Snapshot();
    public void set_Snapshot(Snapshot value);
    internal bool IsSetSnapshot();
}
public class Amazon.Redshift.Model.DeleteClusterSubnetGroupRequest : AmazonRedshiftRequest {
    private string _clusterSubnetGroupName;
    [AWSPropertyAttribute]
public string ClusterSubnetGroupName { get; public set; }
    public string get_ClusterSubnetGroupName();
    public void set_ClusterSubnetGroupName(string value);
    internal bool IsSetClusterSubnetGroupName();
}
public class Amazon.Redshift.Model.DeleteClusterSubnetGroupResponse : AmazonWebServiceResponse {
}
public class Amazon.Redshift.Model.DeleteCustomDomainAssociationRequest : AmazonRedshiftRequest {
    private string _clusterIdentifier;
    private string _customDomainName;
    [AWSPropertyAttribute]
public string ClusterIdentifier { get; public set; }
    [AWSPropertyAttribute]
public string CustomDomainName { get; public set; }
    public string get_ClusterIdentifier();
    public void set_ClusterIdentifier(string value);
    internal bool IsSetClusterIdentifier();
    public string get_CustomDomainName();
    public void set_CustomDomainName(string value);
    internal bool IsSetCustomDomainName();
}
public class Amazon.Redshift.Model.DeleteCustomDomainAssociationResponse : AmazonWebServiceResponse {
}
public class Amazon.Redshift.Model.DeleteEndpointAccessRequest : AmazonRedshiftRequest {
    private string _endpointName;
    [AWSPropertyAttribute]
public string EndpointName { get; public set; }
    public string get_EndpointName();
    public void set_EndpointName(string value);
    internal bool IsSetEndpointName();
}
public class Amazon.Redshift.Model.DeleteEndpointAccessResponse : AmazonWebServiceResponse {
    private string _address;
    private string _clusterIdentifier;
    private Nullable`1<DateTime> _endpointCreateTime;
    private string _endpointName;
    private string _endpointStatus;
    private Nullable`1<int> _port;
    private string _resourceOwner;
    private string _subnetGroupName;
    private VpcEndpoint _vpcEndpoint;
    private List`1<VpcSecurityGroupMembership> _vpcSecurityGroups;
    [AWSPropertyAttribute]
public string Address { get; public set; }
    [AWSPropertyAttribute]
public string ClusterIdentifier { get; public set; }
    public Nullable`1<DateTime> EndpointCreateTime { get; public set; }
    [AWSPropertyAttribute]
public string EndpointName { get; public set; }
    [AWSPropertyAttribute]
public string EndpointStatus { get; public set; }
    public Nullable`1<int> Port { get; public set; }
    [AWSPropertyAttribute]
public string ResourceOwner { get; public set; }
    [AWSPropertyAttribute]
public string SubnetGroupName { get; public set; }
    public VpcEndpoint VpcEndpoint { get; public set; }
    public List`1<VpcSecurityGroupMembership> VpcSecurityGroups { get; public set; }
    public string get_Address();
    public void set_Address(string value);
    internal bool IsSetAddress();
    public string get_ClusterIdentifier();
    public void set_ClusterIdentifier(string value);
    internal bool IsSetClusterIdentifier();
    public Nullable`1<DateTime> get_EndpointCreateTime();
    public void set_EndpointCreateTime(Nullable`1<DateTime> value);
    internal bool IsSetEndpointCreateTime();
    public string get_EndpointName();
    public void set_EndpointName(string value);
    internal bool IsSetEndpointName();
    public string get_EndpointStatus();
    public void set_EndpointStatus(string value);
    internal bool IsSetEndpointStatus();
    public Nullable`1<int> get_Port();
    public void set_Port(Nullable`1<int> value);
    internal bool IsSetPort();
    public string get_ResourceOwner();
    public void set_ResourceOwner(string value);
    internal bool IsSetResourceOwner();
    public string get_SubnetGroupName();
    public void set_SubnetGroupName(string value);
    internal bool IsSetSubnetGroupName();
    public VpcEndpoint get_VpcEndpoint();
    public void set_VpcEndpoint(VpcEndpoint value);
    internal bool IsSetVpcEndpoint();
    public List`1<VpcSecurityGroupMembership> get_VpcSecurityGroups();
    public void set_VpcSecurityGroups(List`1<VpcSecurityGroupMembership> value);
    internal bool IsSetVpcSecurityGroups();
}
public class Amazon.Redshift.Model.DeleteEventSubscriptionRequest : AmazonRedshiftRequest {
    private string _subscriptionName;
    [AWSPropertyAttribute]
public string SubscriptionName { get; public set; }
    public string get_SubscriptionName();
    public void set_SubscriptionName(string value);
    internal bool IsSetSubscriptionName();
}
public class Amazon.Redshift.Model.DeleteEventSubscriptionResponse : AmazonWebServiceResponse {
}
public class Amazon.Redshift.Model.DeleteHsmClientCertificateRequest : AmazonRedshiftRequest {
    private string _hsmClientCertificateIdentifier;
    [AWSPropertyAttribute]
public string HsmClientCertificateIdentifier { get; public set; }
    public string get_HsmClientCertificateIdentifier();
    public void set_HsmClientCertificateIdentifier(string value);
    internal bool IsSetHsmClientCertificateIdentifier();
}
public class Amazon.Redshift.Model.DeleteHsmClientCertificateResponse : AmazonWebServiceResponse {
}
public class Amazon.Redshift.Model.DeleteHsmConfigurationRequest : AmazonRedshiftRequest {
    private string _hsmConfigurationIdentifier;
    [AWSPropertyAttribute]
public string HsmConfigurationIdentifier { get; public set; }
    public string get_HsmConfigurationIdentifier();
    public void set_HsmConfigurationIdentifier(string value);
    internal bool IsSetHsmConfigurationIdentifier();
}
public class Amazon.Redshift.Model.DeleteHsmConfigurationResponse : AmazonWebServiceResponse {
}
public class Amazon.Redshift.Model.DeletePartnerRequest : AmazonRedshiftRequest {
    private string _accountId;
    private string _clusterIdentifier;
    private string _databaseName;
    private string _partnerName;
    [AWSPropertyAttribute]
public string AccountId { get; public set; }
    [AWSPropertyAttribute]
public string ClusterIdentifier { get; public set; }
    [AWSPropertyAttribute]
public string DatabaseName { get; public set; }
    [AWSPropertyAttribute]
public string PartnerName { get; public set; }
    public string get_AccountId();
    public void set_AccountId(string value);
    internal bool IsSetAccountId();
    public string get_ClusterIdentifier();
    public void set_ClusterIdentifier(string value);
    internal bool IsSetClusterIdentifier();
    public string get_DatabaseName();
    public void set_DatabaseName(string value);
    internal bool IsSetDatabaseName();
    public string get_PartnerName();
    public void set_PartnerName(string value);
    internal bool IsSetPartnerName();
}
public class Amazon.Redshift.Model.DeletePartnerResponse : AmazonWebServiceResponse {
    private string _databaseName;
    private string _partnerName;
    [AWSPropertyAttribute]
public string DatabaseName { get; public set; }
    [AWSPropertyAttribute]
public string PartnerName { get; public set; }
    public string get_DatabaseName();
    public void set_DatabaseName(string value);
    internal bool IsSetDatabaseName();
    public string get_PartnerName();
    public void set_PartnerName(string value);
    internal bool IsSetPartnerName();
}
public class Amazon.Redshift.Model.DeleteRedshiftIdcApplicationRequest : AmazonRedshiftRequest {
    private string _redshiftIdcApplicationArn;
    [AWSPropertyAttribute]
public string RedshiftIdcApplicationArn { get; public set; }
    public string get_RedshiftIdcApplicationArn();
    public void set_RedshiftIdcApplicationArn(string value);
    internal bool IsSetRedshiftIdcApplicationArn();
}
public class Amazon.Redshift.Model.DeleteRedshiftIdcApplicationResponse : AmazonWebServiceResponse {
}
public class Amazon.Redshift.Model.DeleteResourcePolicyRequest : AmazonRedshiftRequest {
    private string _resourceArn;
    [AWSPropertyAttribute]
public string ResourceArn { get; public set; }
    public string get_ResourceArn();
    public void set_ResourceArn(string value);
    internal bool IsSetResourceArn();
}
public class Amazon.Redshift.Model.DeleteResourcePolicyResponse : AmazonWebServiceResponse {
}
public class Amazon.Redshift.Model.DeleteScheduledActionRequest : AmazonRedshiftRequest {
    private string _scheduledActionName;
    [AWSPropertyAttribute]
public string ScheduledActionName { get; public set; }
    public string get_ScheduledActionName();
    public void set_ScheduledActionName(string value);
    internal bool IsSetScheduledActionName();
}
public class Amazon.Redshift.Model.DeleteScheduledActionResponse : AmazonWebServiceResponse {
}
public class Amazon.Redshift.Model.DeleteSnapshotCopyGrantRequest : AmazonRedshiftRequest {
    private string _snapshotCopyGrantName;
    [AWSPropertyAttribute]
public string SnapshotCopyGrantName { get; public set; }
    public string get_SnapshotCopyGrantName();
    public void set_SnapshotCopyGrantName(string value);
    internal bool IsSetSnapshotCopyGrantName();
}
public class Amazon.Redshift.Model.DeleteSnapshotCopyGrantResponse : AmazonWebServiceResponse {
}
public class Amazon.Redshift.Model.DeleteSnapshotScheduleRequest : AmazonRedshiftRequest {
    private string _scheduleIdentifier;
    [AWSPropertyAttribute]
public string ScheduleIdentifier { get; public set; }
    public string get_ScheduleIdentifier();
    public void set_ScheduleIdentifier(string value);
    internal bool IsSetScheduleIdentifier();
}
public class Amazon.Redshift.Model.DeleteSnapshotScheduleResponse : AmazonWebServiceResponse {
}
public class Amazon.Redshift.Model.DeleteTagsRequest : AmazonRedshiftRequest {
    private string _resourceName;
    private List`1<string> _tagKeys;
    [AWSPropertyAttribute]
public string ResourceName { get; public set; }
    [AWSPropertyAttribute]
public List`1<string> TagKeys { get; public set; }
    public string get_ResourceName();
    public void set_ResourceName(string value);
    internal bool IsSetResourceName();
    public List`1<string> get_TagKeys();
    public void set_TagKeys(List`1<string> value);
    internal bool IsSetTagKeys();
}
public class Amazon.Redshift.Model.DeleteTagsResponse : AmazonWebServiceResponse {
}
public class Amazon.Redshift.Model.DeleteUsageLimitRequest : AmazonRedshiftRequest {
    private string _usageLimitId;
    [AWSPropertyAttribute]
public string UsageLimitId { get; public set; }
    public string get_UsageLimitId();
    public void set_UsageLimitId(string value);
    internal bool IsSetUsageLimitId();
}
public class Amazon.Redshift.Model.DeleteUsageLimitResponse : AmazonWebServiceResponse {
}
public class Amazon.Redshift.Model.DependentServiceAccessDeniedException : AmazonRedshiftException {
    public DependentServiceAccessDeniedException(string message);
    public DependentServiceAccessDeniedException(string message, Exception innerException);
    public DependentServiceAccessDeniedException(Exception innerException);
    public DependentServiceAccessDeniedException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public DependentServiceAccessDeniedException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Redshift.Model.DependentServiceRequestThrottlingException : AmazonRedshiftException {
    public DependentServiceRequestThrottlingException(string message);
    public DependentServiceRequestThrottlingException(string message, Exception innerException);
    public DependentServiceRequestThrottlingException(Exception innerException);
    public DependentServiceRequestThrottlingException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public DependentServiceRequestThrottlingException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Redshift.Model.DependentServiceUnavailableException : AmazonRedshiftException {
    public DependentServiceUnavailableException(string message);
    public DependentServiceUnavailableException(string message, Exception innerException);
    public DependentServiceUnavailableException(Exception innerException);
    public DependentServiceUnavailableException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public DependentServiceUnavailableException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Redshift.Model.DescribeAccountAttributesRequest : AmazonRedshiftRequest {
    private List`1<string> _attributeNames;
    public List`1<string> AttributeNames { get; public set; }
    public List`1<string> get_AttributeNames();
    public void set_AttributeNames(List`1<string> value);
    internal bool IsSetAttributeNames();
}
public class Amazon.Redshift.Model.DescribeAccountAttributesResponse : AmazonWebServiceResponse {
    private List`1<AccountAttribute> _accountAttributes;
    public List`1<AccountAttribute> AccountAttributes { get; public set; }
    public List`1<AccountAttribute> get_AccountAttributes();
    public void set_AccountAttributes(List`1<AccountAttribute> value);
    internal bool IsSetAccountAttributes();
}
public class Amazon.Redshift.Model.DescribeAuthenticationProfilesRequest : AmazonRedshiftRequest {
    private string _authenticationProfileName;
    [AWSPropertyAttribute]
public string AuthenticationProfileName { get; public set; }
    public string get_AuthenticationProfileName();
    public void set_AuthenticationProfileName(string value);
    internal bool IsSetAuthenticationProfileName();
}
public class Amazon.Redshift.Model.DescribeAuthenticationProfilesResponse : AmazonWebServiceResponse {
    private List`1<AuthenticationProfile> _authenticationProfiles;
    public List`1<AuthenticationProfile> AuthenticationProfiles { get; public set; }
    public List`1<AuthenticationProfile> get_AuthenticationProfiles();
    public void set_AuthenticationProfiles(List`1<AuthenticationProfile> value);
    internal bool IsSetAuthenticationProfiles();
}
internal class Amazon.Redshift.Model.DescribeClusterDbRevisionsPaginator : object {
    private IAmazonRedshift _client;
    private DescribeClusterDbRevisionsRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<DescribeClusterDbRevisionsResponse> Responses { get; }
    public IPaginatedEnumerable`1<ClusterDbRevision> ClusterDbRevisions { get; }
    internal DescribeClusterDbRevisionsPaginator(IAmazonRedshift client, DescribeClusterDbRevisionsRequest request);
    public sealed virtual IPaginatedEnumerable`1<DescribeClusterDbRevisionsResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<ClusterDbRevision> get_ClusterDbRevisions();
    [AsyncIteratorStateMachineAttribute("Amazon.Redshift.Model.DescribeClusterDbRevisionsPaginator/<Amazon-Runtime-IPaginator<Amazon-Redshift-Model-DescribeClusterDbRevisionsResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<DescribeClusterDbRevisionsResponse> Amazon.Runtime.IPaginator<Amazon.Redshift.Model.DescribeClusterDbRevisionsResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.Redshift.Model.DescribeClusterDbRevisionsRequest : AmazonRedshiftRequest {
    private string _clusterIdentifier;
    private string _marker;
    private Nullable`1<int> _maxRecords;
    [AWSPropertyAttribute]
public string ClusterIdentifier { get; public set; }
    [AWSPropertyAttribute]
public string Marker { get; public set; }
    public Nullable`1<int> MaxRecords { get; public set; }
    public string get_ClusterIdentifier();
    public void set_ClusterIdentifier(string value);
    internal bool IsSetClusterIdentifier();
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public Nullable`1<int> get_MaxRecords();
    public void set_MaxRecords(Nullable`1<int> value);
    internal bool IsSetMaxRecords();
}
public class Amazon.Redshift.Model.DescribeClusterDbRevisionsResponse : AmazonWebServiceResponse {
    private List`1<ClusterDbRevision> _clusterDbRevisions;
    private string _marker;
    public List`1<ClusterDbRevision> ClusterDbRevisions { get; public set; }
    [AWSPropertyAttribute]
public string Marker { get; public set; }
    public List`1<ClusterDbRevision> get_ClusterDbRevisions();
    public void set_ClusterDbRevisions(List`1<ClusterDbRevision> value);
    internal bool IsSetClusterDbRevisions();
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
}
internal class Amazon.Redshift.Model.DescribeClusterParameterGroupsPaginator : object {
    private IAmazonRedshift _client;
    private DescribeClusterParameterGroupsRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<DescribeClusterParameterGroupsResponse> Responses { get; }
    public IPaginatedEnumerable`1<ClusterParameterGroup> ParameterGroups { get; }
    internal DescribeClusterParameterGroupsPaginator(IAmazonRedshift client, DescribeClusterParameterGroupsRequest request);
    public sealed virtual IPaginatedEnumerable`1<DescribeClusterParameterGroupsResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<ClusterParameterGroup> get_ParameterGroups();
    [AsyncIteratorStateMachineAttribute("Amazon.Redshift.Model.DescribeClusterParameterGroupsPaginator/<Amazon-Runtime-IPaginator<Amazon-Redshift-Model-DescribeClusterParameterGroupsResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<DescribeClusterParameterGroupsResponse> Amazon.Runtime.IPaginator<Amazon.Redshift.Model.DescribeClusterParameterGroupsResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.Redshift.Model.DescribeClusterParameterGroupsRequest : AmazonRedshiftRequest {
    private string _marker;
    private Nullable`1<int> _maxRecords;
    private string _parameterGroupName;
    private List`1<string> _tagKeys;
    private List`1<string> _tagValues;
    [AWSPropertyAttribute]
public string Marker { get; public set; }
    public Nullable`1<int> MaxRecords { get; public set; }
    [AWSPropertyAttribute]
public string ParameterGroupName { get; public set; }
    public List`1<string> TagKeys { get; public set; }
    public List`1<string> TagValues { get; public set; }
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public Nullable`1<int> get_MaxRecords();
    public void set_MaxRecords(Nullable`1<int> value);
    internal bool IsSetMaxRecords();
    public string get_ParameterGroupName();
    public void set_ParameterGroupName(string value);
    internal bool IsSetParameterGroupName();
    public List`1<string> get_TagKeys();
    public void set_TagKeys(List`1<string> value);
    internal bool IsSetTagKeys();
    public List`1<string> get_TagValues();
    public void set_TagValues(List`1<string> value);
    internal bool IsSetTagValues();
}
public class Amazon.Redshift.Model.DescribeClusterParameterGroupsResponse : AmazonWebServiceResponse {
    private string _marker;
    private List`1<ClusterParameterGroup> _parameterGroups;
    [AWSPropertyAttribute]
public string Marker { get; public set; }
    public List`1<ClusterParameterGroup> ParameterGroups { get; public set; }
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public List`1<ClusterParameterGroup> get_ParameterGroups();
    public void set_ParameterGroups(List`1<ClusterParameterGroup> value);
    internal bool IsSetParameterGroups();
}
internal class Amazon.Redshift.Model.DescribeClusterParametersPaginator : object {
    private IAmazonRedshift _client;
    private DescribeClusterParametersRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<DescribeClusterParametersResponse> Responses { get; }
    public IPaginatedEnumerable`1<Parameter> Parameters { get; }
    internal DescribeClusterParametersPaginator(IAmazonRedshift client, DescribeClusterParametersRequest request);
    public sealed virtual IPaginatedEnumerable`1<DescribeClusterParametersResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<Parameter> get_Parameters();
    [AsyncIteratorStateMachineAttribute("Amazon.Redshift.Model.DescribeClusterParametersPaginator/<Amazon-Runtime-IPaginator<Amazon-Redshift-Model-DescribeClusterParametersResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<DescribeClusterParametersResponse> Amazon.Runtime.IPaginator<Amazon.Redshift.Model.DescribeClusterParametersResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.Redshift.Model.DescribeClusterParametersRequest : AmazonRedshiftRequest {
    private string _marker;
    private Nullable`1<int> _maxRecords;
    private string _parameterGroupName;
    private string _source;
    [AWSPropertyAttribute]
public string Marker { get; public set; }
    public Nullable`1<int> MaxRecords { get; public set; }
    [AWSPropertyAttribute]
public string ParameterGroupName { get; public set; }
    [AWSPropertyAttribute]
public string Source { get; public set; }
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public Nullable`1<int> get_MaxRecords();
    public void set_MaxRecords(Nullable`1<int> value);
    internal bool IsSetMaxRecords();
    public string get_ParameterGroupName();
    public void set_ParameterGroupName(string value);
    internal bool IsSetParameterGroupName();
    public string get_Source();
    public void set_Source(string value);
    internal bool IsSetSource();
}
public class Amazon.Redshift.Model.DescribeClusterParametersResponse : AmazonWebServiceResponse {
    private string _marker;
    private List`1<Parameter> _parameters;
    [AWSPropertyAttribute]
public string Marker { get; public set; }
    public List`1<Parameter> Parameters { get; public set; }
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public List`1<Parameter> get_Parameters();
    public void set_Parameters(List`1<Parameter> value);
    internal bool IsSetParameters();
}
internal class Amazon.Redshift.Model.DescribeClusterSecurityGroupsPaginator : object {
    private IAmazonRedshift _client;
    private DescribeClusterSecurityGroupsRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<DescribeClusterSecurityGroupsResponse> Responses { get; }
    public IPaginatedEnumerable`1<ClusterSecurityGroup> ClusterSecurityGroups { get; }
    internal DescribeClusterSecurityGroupsPaginator(IAmazonRedshift client, DescribeClusterSecurityGroupsRequest request);
    public sealed virtual IPaginatedEnumerable`1<DescribeClusterSecurityGroupsResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<ClusterSecurityGroup> get_ClusterSecurityGroups();
    [AsyncIteratorStateMachineAttribute("Amazon.Redshift.Model.DescribeClusterSecurityGroupsPaginator/<Amazon-Runtime-IPaginator<Amazon-Redshift-Model-DescribeClusterSecurityGroupsResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<DescribeClusterSecurityGroupsResponse> Amazon.Runtime.IPaginator<Amazon.Redshift.Model.DescribeClusterSecurityGroupsResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.Redshift.Model.DescribeClusterSecurityGroupsRequest : AmazonRedshiftRequest {
    private string _clusterSecurityGroupName;
    private string _marker;
    private Nullable`1<int> _maxRecords;
    private List`1<string> _tagKeys;
    private List`1<string> _tagValues;
    [AWSPropertyAttribute]
public string ClusterSecurityGroupName { get; public set; }
    [AWSPropertyAttribute]
public string Marker { get; public set; }
    public Nullable`1<int> MaxRecords { get; public set; }
    public List`1<string> TagKeys { get; public set; }
    public List`1<string> TagValues { get; public set; }
    public string get_ClusterSecurityGroupName();
    public void set_ClusterSecurityGroupName(string value);
    internal bool IsSetClusterSecurityGroupName();
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public Nullable`1<int> get_MaxRecords();
    public void set_MaxRecords(Nullable`1<int> value);
    internal bool IsSetMaxRecords();
    public List`1<string> get_TagKeys();
    public void set_TagKeys(List`1<string> value);
    internal bool IsSetTagKeys();
    public List`1<string> get_TagValues();
    public void set_TagValues(List`1<string> value);
    internal bool IsSetTagValues();
}
public class Amazon.Redshift.Model.DescribeClusterSecurityGroupsResponse : AmazonWebServiceResponse {
    private List`1<ClusterSecurityGroup> _clusterSecurityGroups;
    private string _marker;
    public List`1<ClusterSecurityGroup> ClusterSecurityGroups { get; public set; }
    [AWSPropertyAttribute]
public string Marker { get; public set; }
    public List`1<ClusterSecurityGroup> get_ClusterSecurityGroups();
    public void set_ClusterSecurityGroups(List`1<ClusterSecurityGroup> value);
    internal bool IsSetClusterSecurityGroups();
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
}
internal class Amazon.Redshift.Model.DescribeClusterSnapshotsPaginator : object {
    private IAmazonRedshift _client;
    private DescribeClusterSnapshotsRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<DescribeClusterSnapshotsResponse> Responses { get; }
    public IPaginatedEnumerable`1<Snapshot> Snapshots { get; }
    internal DescribeClusterSnapshotsPaginator(IAmazonRedshift client, DescribeClusterSnapshotsRequest request);
    public sealed virtual IPaginatedEnumerable`1<DescribeClusterSnapshotsResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<Snapshot> get_Snapshots();
    [AsyncIteratorStateMachineAttribute("Amazon.Redshift.Model.DescribeClusterSnapshotsPaginator/<Amazon-Runtime-IPaginator<Amazon-Redshift-Model-DescribeClusterSnapshotsResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<DescribeClusterSnapshotsResponse> Amazon.Runtime.IPaginator<Amazon.Redshift.Model.DescribeClusterSnapshotsResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.Redshift.Model.DescribeClusterSnapshotsRequest : AmazonRedshiftRequest {
    private Nullable`1<bool> _clusterExists;
    private string _clusterIdentifier;
    private Nullable`1<DateTime> _endTimeUtc;
    private string _marker;
    private Nullable`1<int> _maxRecords;
    private string _ownerAccount;
    private string _snapshotArn;
    private string _snapshotIdentifier;
    private string _snapshotType;
    private List`1<SnapshotSortingEntity> _sortingEntities;
    private Nullable`1<DateTime> _startTimeUtc;
    private List`1<string> _tagKeys;
    private List`1<string> _tagValues;
    private Nullable`1<DateTime> _endTime;
    private Nullable`1<DateTime> _startTime;
    public Nullable`1<bool> ClusterExists { get; public set; }
    [AWSPropertyAttribute]
public string ClusterIdentifier { get; public set; }
    public Nullable`1<DateTime> EndTimeUtc { get; public set; }
    [AWSPropertyAttribute]
public string Marker { get; public set; }
    public Nullable`1<int> MaxRecords { get; public set; }
    [AWSPropertyAttribute]
public string OwnerAccount { get; public set; }
    [AWSPropertyAttribute]
public string SnapshotArn { get; public set; }
    [AWSPropertyAttribute]
public string SnapshotIdentifier { get; public set; }
    [AWSPropertyAttribute]
public string SnapshotType { get; public set; }
    public List`1<SnapshotSortingEntity> SortingEntities { get; public set; }
    public Nullable`1<DateTime> StartTimeUtc { get; public set; }
    public List`1<string> TagKeys { get; public set; }
    public List`1<string> TagValues { get; public set; }
    [ObsoleteAttribute("Setting this property results in non-UTC DateTimes not being marshalled correctly. Use EndTimeUtc instead. Setting either EndTime or EndTimeUtc results in both EndTime and EndTimeUtc being assigned, the latest assignment to either one of the two property is reflected in the value of both. EndTime is provided for backwards compatibility only and assigning a non-Utc DateTime to it results in the wrong timestamp being passed to the service.", "False")]
public Nullable`1<DateTime> EndTime { get; public set; }
    [ObsoleteAttribute("Setting this property results in non-UTC DateTimes not being marshalled correctly. Use StartTimeUtc instead. Setting either StartTime or StartTimeUtc results in both StartTime and StartTimeUtc being assigned, the latest assignment to either one of the two property is reflected in the value of both. StartTime is provided for backwards compatibility only and assigning a non-Utc DateTime to it results in the wrong timestamp being passed to the service.", "False")]
public Nullable`1<DateTime> StartTime { get; public set; }
    public Nullable`1<bool> get_ClusterExists();
    public void set_ClusterExists(Nullable`1<bool> value);
    internal bool IsSetClusterExists();
    public string get_ClusterIdentifier();
    public void set_ClusterIdentifier(string value);
    internal bool IsSetClusterIdentifier();
    public Nullable`1<DateTime> get_EndTimeUtc();
    public void set_EndTimeUtc(Nullable`1<DateTime> value);
    internal bool IsSetEndTimeUtc();
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public Nullable`1<int> get_MaxRecords();
    public void set_MaxRecords(Nullable`1<int> value);
    internal bool IsSetMaxRecords();
    public string get_OwnerAccount();
    public void set_OwnerAccount(string value);
    internal bool IsSetOwnerAccount();
    public string get_SnapshotArn();
    public void set_SnapshotArn(string value);
    internal bool IsSetSnapshotArn();
    public string get_SnapshotIdentifier();
    public void set_SnapshotIdentifier(string value);
    internal bool IsSetSnapshotIdentifier();
    public string get_SnapshotType();
    public void set_SnapshotType(string value);
    internal bool IsSetSnapshotType();
    public List`1<SnapshotSortingEntity> get_SortingEntities();
    public void set_SortingEntities(List`1<SnapshotSortingEntity> value);
    internal bool IsSetSortingEntities();
    public Nullable`1<DateTime> get_StartTimeUtc();
    public void set_StartTimeUtc(Nullable`1<DateTime> value);
    internal bool IsSetStartTimeUtc();
    public List`1<string> get_TagKeys();
    public void set_TagKeys(List`1<string> value);
    internal bool IsSetTagKeys();
    public List`1<string> get_TagValues();
    public void set_TagValues(List`1<string> value);
    internal bool IsSetTagValues();
    public Nullable`1<DateTime> get_EndTime();
    public void set_EndTime(Nullable`1<DateTime> value);
    public Nullable`1<DateTime> get_StartTime();
    public void set_StartTime(Nullable`1<DateTime> value);
}
public class Amazon.Redshift.Model.DescribeClusterSnapshotsResponse : AmazonWebServiceResponse {
    private string _marker;
    private List`1<Snapshot> _snapshots;
    [AWSPropertyAttribute]
public string Marker { get; public set; }
    public List`1<Snapshot> Snapshots { get; public set; }
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public List`1<Snapshot> get_Snapshots();
    public void set_Snapshots(List`1<Snapshot> value);
    internal bool IsSetSnapshots();
}
internal class Amazon.Redshift.Model.DescribeClustersPaginator : object {
    private IAmazonRedshift _client;
    private DescribeClustersRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<DescribeClustersResponse> Responses { get; }
    public IPaginatedEnumerable`1<Cluster> Clusters { get; }
    internal DescribeClustersPaginator(IAmazonRedshift client, DescribeClustersRequest request);
    public sealed virtual IPaginatedEnumerable`1<DescribeClustersResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<Cluster> get_Clusters();
    [AsyncIteratorStateMachineAttribute("Amazon.Redshift.Model.DescribeClustersPaginator/<Amazon-Runtime-IPaginator<Amazon-Redshift-Model-DescribeClustersResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<DescribeClustersResponse> Amazon.Runtime.IPaginator<Amazon.Redshift.Model.DescribeClustersResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.Redshift.Model.DescribeClustersRequest : AmazonRedshiftRequest {
    private string _clusterIdentifier;
    private string _marker;
    private Nullable`1<int> _maxRecords;
    private List`1<string> _tagKeys;
    private List`1<string> _tagValues;
    [AWSPropertyAttribute]
public string ClusterIdentifier { get; public set; }
    [AWSPropertyAttribute]
public string Marker { get; public set; }
    public Nullable`1<int> MaxRecords { get; public set; }
    public List`1<string> TagKeys { get; public set; }
    public List`1<string> TagValues { get; public set; }
    public string get_ClusterIdentifier();
    public void set_ClusterIdentifier(string value);
    internal bool IsSetClusterIdentifier();
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public Nullable`1<int> get_MaxRecords();
    public void set_MaxRecords(Nullable`1<int> value);
    internal bool IsSetMaxRecords();
    public List`1<string> get_TagKeys();
    public void set_TagKeys(List`1<string> value);
    internal bool IsSetTagKeys();
    public List`1<string> get_TagValues();
    public void set_TagValues(List`1<string> value);
    internal bool IsSetTagValues();
}
public class Amazon.Redshift.Model.DescribeClustersResponse : AmazonWebServiceResponse {
    private List`1<Cluster> _clusters;
    private string _marker;
    public List`1<Cluster> Clusters { get; public set; }
    [AWSPropertyAttribute]
public string Marker { get; public set; }
    public List`1<Cluster> get_Clusters();
    public void set_Clusters(List`1<Cluster> value);
    internal bool IsSetClusters();
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
}
internal class Amazon.Redshift.Model.DescribeClusterSubnetGroupsPaginator : object {
    private IAmazonRedshift _client;
    private DescribeClusterSubnetGroupsRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<DescribeClusterSubnetGroupsResponse> Responses { get; }
    public IPaginatedEnumerable`1<ClusterSubnetGroup> ClusterSubnetGroups { get; }
    internal DescribeClusterSubnetGroupsPaginator(IAmazonRedshift client, DescribeClusterSubnetGroupsRequest request);
    public sealed virtual IPaginatedEnumerable`1<DescribeClusterSubnetGroupsResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<ClusterSubnetGroup> get_ClusterSubnetGroups();
    [AsyncIteratorStateMachineAttribute("Amazon.Redshift.Model.DescribeClusterSubnetGroupsPaginator/<Amazon-Runtime-IPaginator<Amazon-Redshift-Model-DescribeClusterSubnetGroupsResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<DescribeClusterSubnetGroupsResponse> Amazon.Runtime.IPaginator<Amazon.Redshift.Model.DescribeClusterSubnetGroupsResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.Redshift.Model.DescribeClusterSubnetGroupsRequest : AmazonRedshiftRequest {
    private string _clusterSubnetGroupName;
    private string _marker;
    private Nullable`1<int> _maxRecords;
    private List`1<string> _tagKeys;
    private List`1<string> _tagValues;
    [AWSPropertyAttribute]
public string ClusterSubnetGroupName { get; public set; }
    [AWSPropertyAttribute]
public string Marker { get; public set; }
    public Nullable`1<int> MaxRecords { get; public set; }
    public List`1<string> TagKeys { get; public set; }
    public List`1<string> TagValues { get; public set; }
    public string get_ClusterSubnetGroupName();
    public void set_ClusterSubnetGroupName(string value);
    internal bool IsSetClusterSubnetGroupName();
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public Nullable`1<int> get_MaxRecords();
    public void set_MaxRecords(Nullable`1<int> value);
    internal bool IsSetMaxRecords();
    public List`1<string> get_TagKeys();
    public void set_TagKeys(List`1<string> value);
    internal bool IsSetTagKeys();
    public List`1<string> get_TagValues();
    public void set_TagValues(List`1<string> value);
    internal bool IsSetTagValues();
}
public class Amazon.Redshift.Model.DescribeClusterSubnetGroupsResponse : AmazonWebServiceResponse {
    private List`1<ClusterSubnetGroup> _clusterSubnetGroups;
    private string _marker;
    public List`1<ClusterSubnetGroup> ClusterSubnetGroups { get; public set; }
    [AWSPropertyAttribute]
public string Marker { get; public set; }
    public List`1<ClusterSubnetGroup> get_ClusterSubnetGroups();
    public void set_ClusterSubnetGroups(List`1<ClusterSubnetGroup> value);
    internal bool IsSetClusterSubnetGroups();
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
}
internal class Amazon.Redshift.Model.DescribeClusterTracksPaginator : object {
    private IAmazonRedshift _client;
    private DescribeClusterTracksRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<DescribeClusterTracksResponse> Responses { get; }
    public IPaginatedEnumerable`1<MaintenanceTrack> MaintenanceTracks { get; }
    internal DescribeClusterTracksPaginator(IAmazonRedshift client, DescribeClusterTracksRequest request);
    public sealed virtual IPaginatedEnumerable`1<DescribeClusterTracksResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<MaintenanceTrack> get_MaintenanceTracks();
    [AsyncIteratorStateMachineAttribute("Amazon.Redshift.Model.DescribeClusterTracksPaginator/<Amazon-Runtime-IPaginator<Amazon-Redshift-Model-DescribeClusterTracksResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<DescribeClusterTracksResponse> Amazon.Runtime.IPaginator<Amazon.Redshift.Model.DescribeClusterTracksResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.Redshift.Model.DescribeClusterTracksRequest : AmazonRedshiftRequest {
    private string _maintenanceTrackName;
    private string _marker;
    private Nullable`1<int> _maxRecords;
    [AWSPropertyAttribute]
public string MaintenanceTrackName { get; public set; }
    [AWSPropertyAttribute]
public string Marker { get; public set; }
    public Nullable`1<int> MaxRecords { get; public set; }
    public string get_MaintenanceTrackName();
    public void set_MaintenanceTrackName(string value);
    internal bool IsSetMaintenanceTrackName();
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public Nullable`1<int> get_MaxRecords();
    public void set_MaxRecords(Nullable`1<int> value);
    internal bool IsSetMaxRecords();
}
public class Amazon.Redshift.Model.DescribeClusterTracksResponse : AmazonWebServiceResponse {
    private List`1<MaintenanceTrack> _maintenanceTracks;
    private string _marker;
    public List`1<MaintenanceTrack> MaintenanceTracks { get; public set; }
    [AWSPropertyAttribute]
public string Marker { get; public set; }
    public List`1<MaintenanceTrack> get_MaintenanceTracks();
    public void set_MaintenanceTracks(List`1<MaintenanceTrack> value);
    internal bool IsSetMaintenanceTracks();
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
}
internal class Amazon.Redshift.Model.DescribeClusterVersionsPaginator : object {
    private IAmazonRedshift _client;
    private DescribeClusterVersionsRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<DescribeClusterVersionsResponse> Responses { get; }
    public IPaginatedEnumerable`1<ClusterVersion> ClusterVersions { get; }
    internal DescribeClusterVersionsPaginator(IAmazonRedshift client, DescribeClusterVersionsRequest request);
    public sealed virtual IPaginatedEnumerable`1<DescribeClusterVersionsResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<ClusterVersion> get_ClusterVersions();
    [AsyncIteratorStateMachineAttribute("Amazon.Redshift.Model.DescribeClusterVersionsPaginator/<Amazon-Runtime-IPaginator<Amazon-Redshift-Model-DescribeClusterVersionsResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<DescribeClusterVersionsResponse> Amazon.Runtime.IPaginator<Amazon.Redshift.Model.DescribeClusterVersionsResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.Redshift.Model.DescribeClusterVersionsRequest : AmazonRedshiftRequest {
    private string _clusterParameterGroupFamily;
    private string _clusterVersion;
    private string _marker;
    private Nullable`1<int> _maxRecords;
    [AWSPropertyAttribute]
public string ClusterParameterGroupFamily { get; public set; }
    [AWSPropertyAttribute]
public string ClusterVersion { get; public set; }
    [AWSPropertyAttribute]
public string Marker { get; public set; }
    public Nullable`1<int> MaxRecords { get; public set; }
    public string get_ClusterParameterGroupFamily();
    public void set_ClusterParameterGroupFamily(string value);
    internal bool IsSetClusterParameterGroupFamily();
    public string get_ClusterVersion();
    public void set_ClusterVersion(string value);
    internal bool IsSetClusterVersion();
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public Nullable`1<int> get_MaxRecords();
    public void set_MaxRecords(Nullable`1<int> value);
    internal bool IsSetMaxRecords();
}
public class Amazon.Redshift.Model.DescribeClusterVersionsResponse : AmazonWebServiceResponse {
    private List`1<ClusterVersion> _clusterVersions;
    private string _marker;
    public List`1<ClusterVersion> ClusterVersions { get; public set; }
    [AWSPropertyAttribute]
public string Marker { get; public set; }
    public List`1<ClusterVersion> get_ClusterVersions();
    public void set_ClusterVersions(List`1<ClusterVersion> value);
    internal bool IsSetClusterVersions();
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
}
internal class Amazon.Redshift.Model.DescribeCustomDomainAssociationsPaginator : object {
    private IAmazonRedshift _client;
    private DescribeCustomDomainAssociationsRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<DescribeCustomDomainAssociationsResponse> Responses { get; }
    public IPaginatedEnumerable`1<Association> Associations { get; }
    internal DescribeCustomDomainAssociationsPaginator(IAmazonRedshift client, DescribeCustomDomainAssociationsRequest request);
    public sealed virtual IPaginatedEnumerable`1<DescribeCustomDomainAssociationsResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<Association> get_Associations();
    [AsyncIteratorStateMachineAttribute("Amazon.Redshift.Model.DescribeCustomDomainAssociationsPaginator/<Amazon-Runtime-IPaginator<Amazon-Redshift-Model-DescribeCustomDomainAssociationsResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<DescribeCustomDomainAssociationsResponse> Amazon.Runtime.IPaginator<Amazon.Redshift.Model.DescribeCustomDomainAssociationsResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.Redshift.Model.DescribeCustomDomainAssociationsRequest : AmazonRedshiftRequest {
    private string _customDomainCertificateArn;
    private string _customDomainName;
    private string _marker;
    private Nullable`1<int> _maxRecords;
    [AWSPropertyAttribute]
public string CustomDomainCertificateArn { get; public set; }
    [AWSPropertyAttribute]
public string CustomDomainName { get; public set; }
    [AWSPropertyAttribute]
public string Marker { get; public set; }
    public Nullable`1<int> MaxRecords { get; public set; }
    public string get_CustomDomainCertificateArn();
    public void set_CustomDomainCertificateArn(string value);
    internal bool IsSetCustomDomainCertificateArn();
    public string get_CustomDomainName();
    public void set_CustomDomainName(string value);
    internal bool IsSetCustomDomainName();
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public Nullable`1<int> get_MaxRecords();
    public void set_MaxRecords(Nullable`1<int> value);
    internal bool IsSetMaxRecords();
}
public class Amazon.Redshift.Model.DescribeCustomDomainAssociationsResponse : AmazonWebServiceResponse {
    private List`1<Association> _associations;
    private string _marker;
    public List`1<Association> Associations { get; public set; }
    [AWSPropertyAttribute]
public string Marker { get; public set; }
    public List`1<Association> get_Associations();
    public void set_Associations(List`1<Association> value);
    internal bool IsSetAssociations();
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
}
internal class Amazon.Redshift.Model.DescribeDataSharesForConsumerPaginator : object {
    private IAmazonRedshift _client;
    private DescribeDataSharesForConsumerRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<DescribeDataSharesForConsumerResponse> Responses { get; }
    public IPaginatedEnumerable`1<DataShare> DataShares { get; }
    internal DescribeDataSharesForConsumerPaginator(IAmazonRedshift client, DescribeDataSharesForConsumerRequest request);
    public sealed virtual IPaginatedEnumerable`1<DescribeDataSharesForConsumerResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<DataShare> get_DataShares();
    [AsyncIteratorStateMachineAttribute("Amazon.Redshift.Model.DescribeDataSharesForConsumerPaginator/<Amazon-Runtime-IPaginator<Amazon-Redshift-Model-DescribeDataSharesForConsumerResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<DescribeDataSharesForConsumerResponse> Amazon.Runtime.IPaginator<Amazon.Redshift.Model.DescribeDataSharesForConsumerResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.Redshift.Model.DescribeDataSharesForConsumerRequest : AmazonRedshiftRequest {
    private string _consumerArn;
    private string _marker;
    private Nullable`1<int> _maxRecords;
    private DataShareStatusForConsumer _status;
    [AWSPropertyAttribute]
public string ConsumerArn { get; public set; }
    [AWSPropertyAttribute]
public string Marker { get; public set; }
    public Nullable`1<int> MaxRecords { get; public set; }
    public DataShareStatusForConsumer Status { get; public set; }
    public string get_ConsumerArn();
    public void set_ConsumerArn(string value);
    internal bool IsSetConsumerArn();
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public Nullable`1<int> get_MaxRecords();
    public void set_MaxRecords(Nullable`1<int> value);
    internal bool IsSetMaxRecords();
    public DataShareStatusForConsumer get_Status();
    public void set_Status(DataShareStatusForConsumer value);
    internal bool IsSetStatus();
}
public class Amazon.Redshift.Model.DescribeDataSharesForConsumerResponse : AmazonWebServiceResponse {
    private List`1<DataShare> _dataShares;
    private string _marker;
    public List`1<DataShare> DataShares { get; public set; }
    [AWSPropertyAttribute]
public string Marker { get; public set; }
    public List`1<DataShare> get_DataShares();
    public void set_DataShares(List`1<DataShare> value);
    internal bool IsSetDataShares();
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
}
internal class Amazon.Redshift.Model.DescribeDataSharesForProducerPaginator : object {
    private IAmazonRedshift _client;
    private DescribeDataSharesForProducerRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<DescribeDataSharesForProducerResponse> Responses { get; }
    public IPaginatedEnumerable`1<DataShare> DataShares { get; }
    internal DescribeDataSharesForProducerPaginator(IAmazonRedshift client, DescribeDataSharesForProducerRequest request);
    public sealed virtual IPaginatedEnumerable`1<DescribeDataSharesForProducerResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<DataShare> get_DataShares();
    [AsyncIteratorStateMachineAttribute("Amazon.Redshift.Model.DescribeDataSharesForProducerPaginator/<Amazon-Runtime-IPaginator<Amazon-Redshift-Model-DescribeDataSharesForProducerResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<DescribeDataSharesForProducerResponse> Amazon.Runtime.IPaginator<Amazon.Redshift.Model.DescribeDataSharesForProducerResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.Redshift.Model.DescribeDataSharesForProducerRequest : AmazonRedshiftRequest {
    private string _marker;
    private Nullable`1<int> _maxRecords;
    private string _producerArn;
    private DataShareStatusForProducer _status;
    [AWSPropertyAttribute]
public string Marker { get; public set; }
    public Nullable`1<int> MaxRecords { get; public set; }
    [AWSPropertyAttribute]
public string ProducerArn { get; public set; }
    public DataShareStatusForProducer Status { get; public set; }
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public Nullable`1<int> get_MaxRecords();
    public void set_MaxRecords(Nullable`1<int> value);
    internal bool IsSetMaxRecords();
    public string get_ProducerArn();
    public void set_ProducerArn(string value);
    internal bool IsSetProducerArn();
    public DataShareStatusForProducer get_Status();
    public void set_Status(DataShareStatusForProducer value);
    internal bool IsSetStatus();
}
public class Amazon.Redshift.Model.DescribeDataSharesForProducerResponse : AmazonWebServiceResponse {
    private List`1<DataShare> _dataShares;
    private string _marker;
    public List`1<DataShare> DataShares { get; public set; }
    [AWSPropertyAttribute]
public string Marker { get; public set; }
    public List`1<DataShare> get_DataShares();
    public void set_DataShares(List`1<DataShare> value);
    internal bool IsSetDataShares();
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
}
internal class Amazon.Redshift.Model.DescribeDataSharesPaginator : object {
    private IAmazonRedshift _client;
    private DescribeDataSharesRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<DescribeDataSharesResponse> Responses { get; }
    public IPaginatedEnumerable`1<DataShare> DataShares { get; }
    internal DescribeDataSharesPaginator(IAmazonRedshift client, DescribeDataSharesRequest request);
    public sealed virtual IPaginatedEnumerable`1<DescribeDataSharesResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<DataShare> get_DataShares();
    [AsyncIteratorStateMachineAttribute("Amazon.Redshift.Model.DescribeDataSharesPaginator/<Amazon-Runtime-IPaginator<Amazon-Redshift-Model-DescribeDataSharesResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<DescribeDataSharesResponse> Amazon.Runtime.IPaginator<Amazon.Redshift.Model.DescribeDataSharesResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.Redshift.Model.DescribeDataSharesRequest : AmazonRedshiftRequest {
    private string _dataShareArn;
    private string _marker;
    private Nullable`1<int> _maxRecords;
    [AWSPropertyAttribute]
public string DataShareArn { get; public set; }
    [AWSPropertyAttribute]
public string Marker { get; public set; }
    public Nullable`1<int> MaxRecords { get; public set; }
    public string get_DataShareArn();
    public void set_DataShareArn(string value);
    internal bool IsSetDataShareArn();
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public Nullable`1<int> get_MaxRecords();
    public void set_MaxRecords(Nullable`1<int> value);
    internal bool IsSetMaxRecords();
}
public class Amazon.Redshift.Model.DescribeDataSharesResponse : AmazonWebServiceResponse {
    private List`1<DataShare> _dataShares;
    private string _marker;
    public List`1<DataShare> DataShares { get; public set; }
    [AWSPropertyAttribute]
public string Marker { get; public set; }
    public List`1<DataShare> get_DataShares();
    public void set_DataShares(List`1<DataShare> value);
    internal bool IsSetDataShares();
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
}
internal class Amazon.Redshift.Model.DescribeDefaultClusterParametersPaginator : object {
    private IAmazonRedshift _client;
    private DescribeDefaultClusterParametersRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<DescribeDefaultClusterParametersResponse> Responses { get; }
    public IPaginatedEnumerable`1<Parameter> Parameters { get; }
    internal DescribeDefaultClusterParametersPaginator(IAmazonRedshift client, DescribeDefaultClusterParametersRequest request);
    public sealed virtual IPaginatedEnumerable`1<DescribeDefaultClusterParametersResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<Parameter> get_Parameters();
    [AsyncIteratorStateMachineAttribute("Amazon.Redshift.Model.DescribeDefaultClusterParametersPaginator/<Amazon-Runtime-IPaginator<Amazon-Redshift-Model-DescribeDefaultClusterParametersResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<DescribeDefaultClusterParametersResponse> Amazon.Runtime.IPaginator<Amazon.Redshift.Model.DescribeDefaultClusterParametersResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.Redshift.Model.DescribeDefaultClusterParametersRequest : AmazonRedshiftRequest {
    private string _marker;
    private Nullable`1<int> _maxRecords;
    private string _parameterGroupFamily;
    [AWSPropertyAttribute]
public string Marker { get; public set; }
    public Nullable`1<int> MaxRecords { get; public set; }
    [AWSPropertyAttribute]
public string ParameterGroupFamily { get; public set; }
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public Nullable`1<int> get_MaxRecords();
    public void set_MaxRecords(Nullable`1<int> value);
    internal bool IsSetMaxRecords();
    public string get_ParameterGroupFamily();
    public void set_ParameterGroupFamily(string value);
    internal bool IsSetParameterGroupFamily();
}
public class Amazon.Redshift.Model.DescribeDefaultClusterParametersResponse : AmazonWebServiceResponse {
    private DefaultClusterParameters _defaultClusterParameters;
    public DefaultClusterParameters DefaultClusterParameters { get; public set; }
    public DefaultClusterParameters get_DefaultClusterParameters();
    public void set_DefaultClusterParameters(DefaultClusterParameters value);
    internal bool IsSetDefaultClusterParameters();
}
internal class Amazon.Redshift.Model.DescribeEndpointAccessPaginator : object {
    private IAmazonRedshift _client;
    private DescribeEndpointAccessRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<DescribeEndpointAccessResponse> Responses { get; }
    public IPaginatedEnumerable`1<EndpointAccess> EndpointAccessList { get; }
    internal DescribeEndpointAccessPaginator(IAmazonRedshift client, DescribeEndpointAccessRequest request);
    public sealed virtual IPaginatedEnumerable`1<DescribeEndpointAccessResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<EndpointAccess> get_EndpointAccessList();
    [AsyncIteratorStateMachineAttribute("Amazon.Redshift.Model.DescribeEndpointAccessPaginator/<Amazon-Runtime-IPaginator<Amazon-Redshift-Model-DescribeEndpointAccessResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<DescribeEndpointAccessResponse> Amazon.Runtime.IPaginator<Amazon.Redshift.Model.DescribeEndpointAccessResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.Redshift.Model.DescribeEndpointAccessRequest : AmazonRedshiftRequest {
    private string _clusterIdentifier;
    private string _endpointName;
    private string _marker;
    private Nullable`1<int> _maxRecords;
    private string _resourceOwner;
    private string _vpcId;
    [AWSPropertyAttribute]
public string ClusterIdentifier { get; public set; }
    [AWSPropertyAttribute]
public string EndpointName { get; public set; }
    [AWSPropertyAttribute]
public string Marker { get; public set; }
    public Nullable`1<int> MaxRecords { get; public set; }
    [AWSPropertyAttribute]
public string ResourceOwner { get; public set; }
    [AWSPropertyAttribute]
public string VpcId { get; public set; }
    public string get_ClusterIdentifier();
    public void set_ClusterIdentifier(string value);
    internal bool IsSetClusterIdentifier();
    public string get_EndpointName();
    public void set_EndpointName(string value);
    internal bool IsSetEndpointName();
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public Nullable`1<int> get_MaxRecords();
    public void set_MaxRecords(Nullable`1<int> value);
    internal bool IsSetMaxRecords();
    public string get_ResourceOwner();
    public void set_ResourceOwner(string value);
    internal bool IsSetResourceOwner();
    public string get_VpcId();
    public void set_VpcId(string value);
    internal bool IsSetVpcId();
}
public class Amazon.Redshift.Model.DescribeEndpointAccessResponse : AmazonWebServiceResponse {
    private List`1<EndpointAccess> _endpointAccessList;
    private string _marker;
    public List`1<EndpointAccess> EndpointAccessList { get; public set; }
    [AWSPropertyAttribute]
public string Marker { get; public set; }
    public List`1<EndpointAccess> get_EndpointAccessList();
    public void set_EndpointAccessList(List`1<EndpointAccess> value);
    internal bool IsSetEndpointAccessList();
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
}
internal class Amazon.Redshift.Model.DescribeEndpointAuthorizationPaginator : object {
    private IAmazonRedshift _client;
    private DescribeEndpointAuthorizationRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<DescribeEndpointAuthorizationResponse> Responses { get; }
    public IPaginatedEnumerable`1<EndpointAuthorization> EndpointAuthorizationList { get; }
    internal DescribeEndpointAuthorizationPaginator(IAmazonRedshift client, DescribeEndpointAuthorizationRequest request);
    public sealed virtual IPaginatedEnumerable`1<DescribeEndpointAuthorizationResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<EndpointAuthorization> get_EndpointAuthorizationList();
    [AsyncIteratorStateMachineAttribute("Amazon.Redshift.Model.DescribeEndpointAuthorizationPaginator/<Amazon-Runtime-IPaginator<Amazon-Redshift-Model-DescribeEndpointAuthorizationResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<DescribeEndpointAuthorizationResponse> Amazon.Runtime.IPaginator<Amazon.Redshift.Model.DescribeEndpointAuthorizationResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.Redshift.Model.DescribeEndpointAuthorizationRequest : AmazonRedshiftRequest {
    private string _account;
    private string _clusterIdentifier;
    private Nullable`1<bool> _grantee;
    private string _marker;
    private Nullable`1<int> _maxRecords;
    [AWSPropertyAttribute]
public string Account { get; public set; }
    [AWSPropertyAttribute]
public string ClusterIdentifier { get; public set; }
    public Nullable`1<bool> Grantee { get; public set; }
    [AWSPropertyAttribute]
public string Marker { get; public set; }
    public Nullable`1<int> MaxRecords { get; public set; }
    public string get_Account();
    public void set_Account(string value);
    internal bool IsSetAccount();
    public string get_ClusterIdentifier();
    public void set_ClusterIdentifier(string value);
    internal bool IsSetClusterIdentifier();
    public Nullable`1<bool> get_Grantee();
    public void set_Grantee(Nullable`1<bool> value);
    internal bool IsSetGrantee();
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public Nullable`1<int> get_MaxRecords();
    public void set_MaxRecords(Nullable`1<int> value);
    internal bool IsSetMaxRecords();
}
public class Amazon.Redshift.Model.DescribeEndpointAuthorizationResponse : AmazonWebServiceResponse {
    private List`1<EndpointAuthorization> _endpointAuthorizationList;
    private string _marker;
    public List`1<EndpointAuthorization> EndpointAuthorizationList { get; public set; }
    [AWSPropertyAttribute]
public string Marker { get; public set; }
    public List`1<EndpointAuthorization> get_EndpointAuthorizationList();
    public void set_EndpointAuthorizationList(List`1<EndpointAuthorization> value);
    internal bool IsSetEndpointAuthorizationList();
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
}
public class Amazon.Redshift.Model.DescribeEventCategoriesRequest : AmazonRedshiftRequest {
    private string _sourceType;
    [AWSPropertyAttribute]
public string SourceType { get; public set; }
    public string get_SourceType();
    public void set_SourceType(string value);
    internal bool IsSetSourceType();
}
public class Amazon.Redshift.Model.DescribeEventCategoriesResponse : AmazonWebServiceResponse {
    private List`1<EventCategoriesMap> _eventCategoriesMapList;
    public List`1<EventCategoriesMap> EventCategoriesMapList { get; public set; }
    public List`1<EventCategoriesMap> get_EventCategoriesMapList();
    public void set_EventCategoriesMapList(List`1<EventCategoriesMap> value);
    internal bool IsSetEventCategoriesMapList();
}
internal class Amazon.Redshift.Model.DescribeEventsPaginator : object {
    private IAmazonRedshift _client;
    private DescribeEventsRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<DescribeEventsResponse> Responses { get; }
    public IPaginatedEnumerable`1<Event> Events { get; }
    internal DescribeEventsPaginator(IAmazonRedshift client, DescribeEventsRequest request);
    public sealed virtual IPaginatedEnumerable`1<DescribeEventsResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<Event> get_Events();
    [AsyncIteratorStateMachineAttribute("Amazon.Redshift.Model.DescribeEventsPaginator/<Amazon-Runtime-IPaginator<Amazon-Redshift-Model-DescribeEventsResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<DescribeEventsResponse> Amazon.Runtime.IPaginator<Amazon.Redshift.Model.DescribeEventsResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.Redshift.Model.DescribeEventsRequest : AmazonRedshiftRequest {
    private Nullable`1<int> _duration;
    private Nullable`1<DateTime> _endTimeUtc;
    private string _marker;
    private Nullable`1<int> _maxRecords;
    private string _sourceIdentifier;
    private SourceType _sourceType;
    private Nullable`1<DateTime> _startTimeUtc;
    private Nullable`1<DateTime> _endTime;
    private Nullable`1<DateTime> _startTime;
    public Nullable`1<int> Duration { get; public set; }
    public Nullable`1<DateTime> EndTimeUtc { get; public set; }
    [AWSPropertyAttribute]
public string Marker { get; public set; }
    public Nullable`1<int> MaxRecords { get; public set; }
    [AWSPropertyAttribute]
public string SourceIdentifier { get; public set; }
    public SourceType SourceType { get; public set; }
    public Nullable`1<DateTime> StartTimeUtc { get; public set; }
    [ObsoleteAttribute("Setting this property results in non-UTC DateTimes not being marshalled correctly. Use EndTimeUtc instead. Setting either EndTime or EndTimeUtc results in both EndTime and EndTimeUtc being assigned, the latest assignment to either one of the two property is reflected in the value of both. EndTime is provided for backwards compatibility only and assigning a non-Utc DateTime to it results in the wrong timestamp being passed to the service.", "False")]
public Nullable`1<DateTime> EndTime { get; public set; }
    [ObsoleteAttribute("Setting this property results in non-UTC DateTimes not being marshalled correctly. Use StartTimeUtc instead. Setting either StartTime or StartTimeUtc results in both StartTime and StartTimeUtc being assigned, the latest assignment to either one of the two property is reflected in the value of both. StartTime is provided for backwards compatibility only and assigning a non-Utc DateTime to it results in the wrong timestamp being passed to the service.", "False")]
public Nullable`1<DateTime> StartTime { get; public set; }
    public Nullable`1<int> get_Duration();
    public void set_Duration(Nullable`1<int> value);
    internal bool IsSetDuration();
    public Nullable`1<DateTime> get_EndTimeUtc();
    public void set_EndTimeUtc(Nullable`1<DateTime> value);
    internal bool IsSetEndTimeUtc();
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public Nullable`1<int> get_MaxRecords();
    public void set_MaxRecords(Nullable`1<int> value);
    internal bool IsSetMaxRecords();
    public string get_SourceIdentifier();
    public void set_SourceIdentifier(string value);
    internal bool IsSetSourceIdentifier();
    public SourceType get_SourceType();
    public void set_SourceType(SourceType value);
    internal bool IsSetSourceType();
    public Nullable`1<DateTime> get_StartTimeUtc();
    public void set_StartTimeUtc(Nullable`1<DateTime> value);
    internal bool IsSetStartTimeUtc();
    public Nullable`1<DateTime> get_EndTime();
    public void set_EndTime(Nullable`1<DateTime> value);
    public Nullable`1<DateTime> get_StartTime();
    public void set_StartTime(Nullable`1<DateTime> value);
}
public class Amazon.Redshift.Model.DescribeEventsResponse : AmazonWebServiceResponse {
    private List`1<Event> _events;
    private string _marker;
    public List`1<Event> Events { get; public set; }
    [AWSPropertyAttribute]
public string Marker { get; public set; }
    public List`1<Event> get_Events();
    public void set_Events(List`1<Event> value);
    internal bool IsSetEvents();
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
}
internal class Amazon.Redshift.Model.DescribeEventSubscriptionsPaginator : object {
    private IAmazonRedshift _client;
    private DescribeEventSubscriptionsRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<DescribeEventSubscriptionsResponse> Responses { get; }
    public IPaginatedEnumerable`1<EventSubscription> EventSubscriptionsList { get; }
    internal DescribeEventSubscriptionsPaginator(IAmazonRedshift client, DescribeEventSubscriptionsRequest request);
    public sealed virtual IPaginatedEnumerable`1<DescribeEventSubscriptionsResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<EventSubscription> get_EventSubscriptionsList();
    [AsyncIteratorStateMachineAttribute("Amazon.Redshift.Model.DescribeEventSubscriptionsPaginator/<Amazon-Runtime-IPaginator<Amazon-Redshift-Model-DescribeEventSubscriptionsResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<DescribeEventSubscriptionsResponse> Amazon.Runtime.IPaginator<Amazon.Redshift.Model.DescribeEventSubscriptionsResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.Redshift.Model.DescribeEventSubscriptionsRequest : AmazonRedshiftRequest {
    private string _marker;
    private Nullable`1<int> _maxRecords;
    private string _subscriptionName;
    private List`1<string> _tagKeys;
    private List`1<string> _tagValues;
    [AWSPropertyAttribute]
public string Marker { get; public set; }
    public Nullable`1<int> MaxRecords { get; public set; }
    [AWSPropertyAttribute]
public string SubscriptionName { get; public set; }
    public List`1<string> TagKeys { get; public set; }
    public List`1<string> TagValues { get; public set; }
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public Nullable`1<int> get_MaxRecords();
    public void set_MaxRecords(Nullable`1<int> value);
    internal bool IsSetMaxRecords();
    public string get_SubscriptionName();
    public void set_SubscriptionName(string value);
    internal bool IsSetSubscriptionName();
    public List`1<string> get_TagKeys();
    public void set_TagKeys(List`1<string> value);
    internal bool IsSetTagKeys();
    public List`1<string> get_TagValues();
    public void set_TagValues(List`1<string> value);
    internal bool IsSetTagValues();
}
public class Amazon.Redshift.Model.DescribeEventSubscriptionsResponse : AmazonWebServiceResponse {
    private List`1<EventSubscription> _eventSubscriptionsList;
    private string _marker;
    public List`1<EventSubscription> EventSubscriptionsList { get; public set; }
    [AWSPropertyAttribute]
public string Marker { get; public set; }
    public List`1<EventSubscription> get_EventSubscriptionsList();
    public void set_EventSubscriptionsList(List`1<EventSubscription> value);
    internal bool IsSetEventSubscriptionsList();
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
}
internal class Amazon.Redshift.Model.DescribeHsmClientCertificatesPaginator : object {
    private IAmazonRedshift _client;
    private DescribeHsmClientCertificatesRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<DescribeHsmClientCertificatesResponse> Responses { get; }
    public IPaginatedEnumerable`1<HsmClientCertificate> HsmClientCertificates { get; }
    internal DescribeHsmClientCertificatesPaginator(IAmazonRedshift client, DescribeHsmClientCertificatesRequest request);
    public sealed virtual IPaginatedEnumerable`1<DescribeHsmClientCertificatesResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<HsmClientCertificate> get_HsmClientCertificates();
    [AsyncIteratorStateMachineAttribute("Amazon.Redshift.Model.DescribeHsmClientCertificatesPaginator/<Amazon-Runtime-IPaginator<Amazon-Redshift-Model-DescribeHsmClientCertificatesResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<DescribeHsmClientCertificatesResponse> Amazon.Runtime.IPaginator<Amazon.Redshift.Model.DescribeHsmClientCertificatesResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.Redshift.Model.DescribeHsmClientCertificatesRequest : AmazonRedshiftRequest {
    private string _hsmClientCertificateIdentifier;
    private string _marker;
    private Nullable`1<int> _maxRecords;
    private List`1<string> _tagKeys;
    private List`1<string> _tagValues;
    [AWSPropertyAttribute]
public string HsmClientCertificateIdentifier { get; public set; }
    [AWSPropertyAttribute]
public string Marker { get; public set; }
    public Nullable`1<int> MaxRecords { get; public set; }
    public List`1<string> TagKeys { get; public set; }
    public List`1<string> TagValues { get; public set; }
    public string get_HsmClientCertificateIdentifier();
    public void set_HsmClientCertificateIdentifier(string value);
    internal bool IsSetHsmClientCertificateIdentifier();
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public Nullable`1<int> get_MaxRecords();
    public void set_MaxRecords(Nullable`1<int> value);
    internal bool IsSetMaxRecords();
    public List`1<string> get_TagKeys();
    public void set_TagKeys(List`1<string> value);
    internal bool IsSetTagKeys();
    public List`1<string> get_TagValues();
    public void set_TagValues(List`1<string> value);
    internal bool IsSetTagValues();
}
public class Amazon.Redshift.Model.DescribeHsmClientCertificatesResponse : AmazonWebServiceResponse {
    private List`1<HsmClientCertificate> _hsmClientCertificates;
    private string _marker;
    public List`1<HsmClientCertificate> HsmClientCertificates { get; public set; }
    [AWSPropertyAttribute]
public string Marker { get; public set; }
    public List`1<HsmClientCertificate> get_HsmClientCertificates();
    public void set_HsmClientCertificates(List`1<HsmClientCertificate> value);
    internal bool IsSetHsmClientCertificates();
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
}
internal class Amazon.Redshift.Model.DescribeHsmConfigurationsPaginator : object {
    private IAmazonRedshift _client;
    private DescribeHsmConfigurationsRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<DescribeHsmConfigurationsResponse> Responses { get; }
    public IPaginatedEnumerable`1<HsmConfiguration> HsmConfigurations { get; }
    internal DescribeHsmConfigurationsPaginator(IAmazonRedshift client, DescribeHsmConfigurationsRequest request);
    public sealed virtual IPaginatedEnumerable`1<DescribeHsmConfigurationsResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<HsmConfiguration> get_HsmConfigurations();
    [AsyncIteratorStateMachineAttribute("Amazon.Redshift.Model.DescribeHsmConfigurationsPaginator/<Amazon-Runtime-IPaginator<Amazon-Redshift-Model-DescribeHsmConfigurationsResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<DescribeHsmConfigurationsResponse> Amazon.Runtime.IPaginator<Amazon.Redshift.Model.DescribeHsmConfigurationsResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.Redshift.Model.DescribeHsmConfigurationsRequest : AmazonRedshiftRequest {
    private string _hsmConfigurationIdentifier;
    private string _marker;
    private Nullable`1<int> _maxRecords;
    private List`1<string> _tagKeys;
    private List`1<string> _tagValues;
    [AWSPropertyAttribute]
public string HsmConfigurationIdentifier { get; public set; }
    [AWSPropertyAttribute]
public string Marker { get; public set; }
    public Nullable`1<int> MaxRecords { get; public set; }
    public List`1<string> TagKeys { get; public set; }
    public List`1<string> TagValues { get; public set; }
    public string get_HsmConfigurationIdentifier();
    public void set_HsmConfigurationIdentifier(string value);
    internal bool IsSetHsmConfigurationIdentifier();
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public Nullable`1<int> get_MaxRecords();
    public void set_MaxRecords(Nullable`1<int> value);
    internal bool IsSetMaxRecords();
    public List`1<string> get_TagKeys();
    public void set_TagKeys(List`1<string> value);
    internal bool IsSetTagKeys();
    public List`1<string> get_TagValues();
    public void set_TagValues(List`1<string> value);
    internal bool IsSetTagValues();
}
public class Amazon.Redshift.Model.DescribeHsmConfigurationsResponse : AmazonWebServiceResponse {
    private List`1<HsmConfiguration> _hsmConfigurations;
    private string _marker;
    public List`1<HsmConfiguration> HsmConfigurations { get; public set; }
    [AWSPropertyAttribute]
public string Marker { get; public set; }
    public List`1<HsmConfiguration> get_HsmConfigurations();
    public void set_HsmConfigurations(List`1<HsmConfiguration> value);
    internal bool IsSetHsmConfigurations();
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
}
internal class Amazon.Redshift.Model.DescribeInboundIntegrationsPaginator : object {
    private IAmazonRedshift _client;
    private DescribeInboundIntegrationsRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<DescribeInboundIntegrationsResponse> Responses { get; }
    public IPaginatedEnumerable`1<InboundIntegration> InboundIntegrations { get; }
    internal DescribeInboundIntegrationsPaginator(IAmazonRedshift client, DescribeInboundIntegrationsRequest request);
    public sealed virtual IPaginatedEnumerable`1<DescribeInboundIntegrationsResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<InboundIntegration> get_InboundIntegrations();
    [AsyncIteratorStateMachineAttribute("Amazon.Redshift.Model.DescribeInboundIntegrationsPaginator/<Amazon-Runtime-IPaginator<Amazon-Redshift-Model-DescribeInboundIntegrationsResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<DescribeInboundIntegrationsResponse> Amazon.Runtime.IPaginator<Amazon.Redshift.Model.DescribeInboundIntegrationsResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.Redshift.Model.DescribeInboundIntegrationsRequest : AmazonRedshiftRequest {
    private string _integrationArn;
    private string _marker;
    private Nullable`1<int> _maxRecords;
    private string _targetArn;
    [AWSPropertyAttribute]
public string IntegrationArn { get; public set; }
    [AWSPropertyAttribute]
public string Marker { get; public set; }
    public Nullable`1<int> MaxRecords { get; public set; }
    [AWSPropertyAttribute]
public string TargetArn { get; public set; }
    public string get_IntegrationArn();
    public void set_IntegrationArn(string value);
    internal bool IsSetIntegrationArn();
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public Nullable`1<int> get_MaxRecords();
    public void set_MaxRecords(Nullable`1<int> value);
    internal bool IsSetMaxRecords();
    public string get_TargetArn();
    public void set_TargetArn(string value);
    internal bool IsSetTargetArn();
}
public class Amazon.Redshift.Model.DescribeInboundIntegrationsResponse : AmazonWebServiceResponse {
    private List`1<InboundIntegration> _inboundIntegrations;
    private string _marker;
    public List`1<InboundIntegration> InboundIntegrations { get; public set; }
    [AWSPropertyAttribute]
public string Marker { get; public set; }
    public List`1<InboundIntegration> get_InboundIntegrations();
    public void set_InboundIntegrations(List`1<InboundIntegration> value);
    internal bool IsSetInboundIntegrations();
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
}
public class Amazon.Redshift.Model.DescribeLoggingStatusRequest : AmazonRedshiftRequest {
    private string _clusterIdentifier;
    [AWSPropertyAttribute]
public string ClusterIdentifier { get; public set; }
    public string get_ClusterIdentifier();
    public void set_ClusterIdentifier(string value);
    internal bool IsSetClusterIdentifier();
}
public class Amazon.Redshift.Model.DescribeLoggingStatusResponse : AmazonWebServiceResponse {
    private string _bucketName;
    private string _lastFailureMessage;
    private Nullable`1<DateTime> _lastFailureTime;
    private Nullable`1<DateTime> _lastSuccessfulDeliveryTime;
    private LogDestinationType _logDestinationType;
    private List`1<string> _logExports;
    private Nullable`1<bool> _loggingEnabled;
    private string _s3KeyPrefix;
    [AWSPropertyAttribute]
public string BucketName { get; public set; }
    [AWSPropertyAttribute]
public string LastFailureMessage { get; public set; }
    public Nullable`1<DateTime> LastFailureTime { get; public set; }
    public Nullable`1<DateTime> LastSuccessfulDeliveryTime { get; public set; }
    public LogDestinationType LogDestinationType { get; public set; }
    public List`1<string> LogExports { get; public set; }
    public Nullable`1<bool> LoggingEnabled { get; public set; }
    [AWSPropertyAttribute]
public string S3KeyPrefix { get; public set; }
    public string get_BucketName();
    public void set_BucketName(string value);
    internal bool IsSetBucketName();
    public string get_LastFailureMessage();
    public void set_LastFailureMessage(string value);
    internal bool IsSetLastFailureMessage();
    public Nullable`1<DateTime> get_LastFailureTime();
    public void set_LastFailureTime(Nullable`1<DateTime> value);
    internal bool IsSetLastFailureTime();
    public Nullable`1<DateTime> get_LastSuccessfulDeliveryTime();
    public void set_LastSuccessfulDeliveryTime(Nullable`1<DateTime> value);
    internal bool IsSetLastSuccessfulDeliveryTime();
    public LogDestinationType get_LogDestinationType();
    public void set_LogDestinationType(LogDestinationType value);
    internal bool IsSetLogDestinationType();
    public List`1<string> get_LogExports();
    public void set_LogExports(List`1<string> value);
    internal bool IsSetLogExports();
    public Nullable`1<bool> get_LoggingEnabled();
    public void set_LoggingEnabled(Nullable`1<bool> value);
    internal bool IsSetLoggingEnabled();
    public string get_S3KeyPrefix();
    public void set_S3KeyPrefix(string value);
    internal bool IsSetS3KeyPrefix();
}
internal class Amazon.Redshift.Model.DescribeNodeConfigurationOptionsPaginator : object {
    private IAmazonRedshift _client;
    private DescribeNodeConfigurationOptionsRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<DescribeNodeConfigurationOptionsResponse> Responses { get; }
    public IPaginatedEnumerable`1<NodeConfigurationOption> NodeConfigurationOptionList { get; }
    internal DescribeNodeConfigurationOptionsPaginator(IAmazonRedshift client, DescribeNodeConfigurationOptionsRequest request);
    public sealed virtual IPaginatedEnumerable`1<DescribeNodeConfigurationOptionsResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<NodeConfigurationOption> get_NodeConfigurationOptionList();
    [AsyncIteratorStateMachineAttribute("Amazon.Redshift.Model.DescribeNodeConfigurationOptionsPaginator/<Amazon-Runtime-IPaginator<Amazon-Redshift-Model-DescribeNodeConfigurationOptionsResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<DescribeNodeConfigurationOptionsResponse> Amazon.Runtime.IPaginator<Amazon.Redshift.Model.DescribeNodeConfigurationOptionsResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.Redshift.Model.DescribeNodeConfigurationOptionsRequest : AmazonRedshiftRequest {
    private ActionType _actionType;
    private string _clusterIdentifier;
    private List`1<NodeConfigurationOptionsFilter> _filters;
    private string _marker;
    private Nullable`1<int> _maxRecords;
    private string _ownerAccount;
    private string _snapshotArn;
    private string _snapshotIdentifier;
    [AWSPropertyAttribute]
public ActionType ActionType { get; public set; }
    [AWSPropertyAttribute]
public string ClusterIdentifier { get; public set; }
    public List`1<NodeConfigurationOptionsFilter> Filters { get; public set; }
    [AWSPropertyAttribute]
public string Marker { get; public set; }
    public Nullable`1<int> MaxRecords { get; public set; }
    [AWSPropertyAttribute]
public string OwnerAccount { get; public set; }
    [AWSPropertyAttribute]
public string SnapshotArn { get; public set; }
    [AWSPropertyAttribute]
public string SnapshotIdentifier { get; public set; }
    public ActionType get_ActionType();
    public void set_ActionType(ActionType value);
    internal bool IsSetActionType();
    public string get_ClusterIdentifier();
    public void set_ClusterIdentifier(string value);
    internal bool IsSetClusterIdentifier();
    public List`1<NodeConfigurationOptionsFilter> get_Filters();
    public void set_Filters(List`1<NodeConfigurationOptionsFilter> value);
    internal bool IsSetFilters();
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public Nullable`1<int> get_MaxRecords();
    public void set_MaxRecords(Nullable`1<int> value);
    internal bool IsSetMaxRecords();
    public string get_OwnerAccount();
    public void set_OwnerAccount(string value);
    internal bool IsSetOwnerAccount();
    public string get_SnapshotArn();
    public void set_SnapshotArn(string value);
    internal bool IsSetSnapshotArn();
    public string get_SnapshotIdentifier();
    public void set_SnapshotIdentifier(string value);
    internal bool IsSetSnapshotIdentifier();
}
public class Amazon.Redshift.Model.DescribeNodeConfigurationOptionsResponse : AmazonWebServiceResponse {
    private string _marker;
    private List`1<NodeConfigurationOption> _nodeConfigurationOptionList;
    [AWSPropertyAttribute]
public string Marker { get; public set; }
    public List`1<NodeConfigurationOption> NodeConfigurationOptionList { get; public set; }
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public List`1<NodeConfigurationOption> get_NodeConfigurationOptionList();
    public void set_NodeConfigurationOptionList(List`1<NodeConfigurationOption> value);
    internal bool IsSetNodeConfigurationOptionList();
}
internal class Amazon.Redshift.Model.DescribeOrderableClusterOptionsPaginator : object {
    private IAmazonRedshift _client;
    private DescribeOrderableClusterOptionsRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<DescribeOrderableClusterOptionsResponse> Responses { get; }
    public IPaginatedEnumerable`1<OrderableClusterOption> OrderableClusterOptions { get; }
    internal DescribeOrderableClusterOptionsPaginator(IAmazonRedshift client, DescribeOrderableClusterOptionsRequest request);
    public sealed virtual IPaginatedEnumerable`1<DescribeOrderableClusterOptionsResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<OrderableClusterOption> get_OrderableClusterOptions();
    [AsyncIteratorStateMachineAttribute("Amazon.Redshift.Model.DescribeOrderableClusterOptionsPaginator/<Amazon-Runtime-IPaginator<Amazon-Redshift-Model-DescribeOrderableClusterOptionsResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<DescribeOrderableClusterOptionsResponse> Amazon.Runtime.IPaginator<Amazon.Redshift.Model.DescribeOrderableClusterOptionsResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.Redshift.Model.DescribeOrderableClusterOptionsRequest : AmazonRedshiftRequest {
    private string _clusterVersion;
    private string _marker;
    private Nullable`1<int> _maxRecords;
    private string _nodeType;
    [AWSPropertyAttribute]
public string ClusterVersion { get; public set; }
    [AWSPropertyAttribute]
public string Marker { get; public set; }
    public Nullable`1<int> MaxRecords { get; public set; }
    [AWSPropertyAttribute]
public string NodeType { get; public set; }
    public string get_ClusterVersion();
    public void set_ClusterVersion(string value);
    internal bool IsSetClusterVersion();
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public Nullable`1<int> get_MaxRecords();
    public void set_MaxRecords(Nullable`1<int> value);
    internal bool IsSetMaxRecords();
    public string get_NodeType();
    public void set_NodeType(string value);
    internal bool IsSetNodeType();
}
public class Amazon.Redshift.Model.DescribeOrderableClusterOptionsResponse : AmazonWebServiceResponse {
    private string _marker;
    private List`1<OrderableClusterOption> _orderableClusterOptions;
    [AWSPropertyAttribute]
public string Marker { get; public set; }
    public List`1<OrderableClusterOption> OrderableClusterOptions { get; public set; }
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public List`1<OrderableClusterOption> get_OrderableClusterOptions();
    public void set_OrderableClusterOptions(List`1<OrderableClusterOption> value);
    internal bool IsSetOrderableClusterOptions();
}
public class Amazon.Redshift.Model.DescribePartnersRequest : AmazonRedshiftRequest {
    private string _accountId;
    private string _clusterIdentifier;
    private string _databaseName;
    private string _partnerName;
    [AWSPropertyAttribute]
public string AccountId { get; public set; }
    [AWSPropertyAttribute]
public string ClusterIdentifier { get; public set; }
    [AWSPropertyAttribute]
public string DatabaseName { get; public set; }
    [AWSPropertyAttribute]
public string PartnerName { get; public set; }
    public string get_AccountId();
    public void set_AccountId(string value);
    internal bool IsSetAccountId();
    public string get_ClusterIdentifier();
    public void set_ClusterIdentifier(string value);
    internal bool IsSetClusterIdentifier();
    public string get_DatabaseName();
    public void set_DatabaseName(string value);
    internal bool IsSetDatabaseName();
    public string get_PartnerName();
    public void set_PartnerName(string value);
    internal bool IsSetPartnerName();
}
public class Amazon.Redshift.Model.DescribePartnersResponse : AmazonWebServiceResponse {
    private List`1<PartnerIntegrationInfo> _partnerIntegrationInfoList;
    public List`1<PartnerIntegrationInfo> PartnerIntegrationInfoList { get; public set; }
    public List`1<PartnerIntegrationInfo> get_PartnerIntegrationInfoList();
    public void set_PartnerIntegrationInfoList(List`1<PartnerIntegrationInfo> value);
    internal bool IsSetPartnerIntegrationInfoList();
}
internal class Amazon.Redshift.Model.DescribeRedshiftIdcApplicationsPaginator : object {
    private IAmazonRedshift _client;
    private DescribeRedshiftIdcApplicationsRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<DescribeRedshiftIdcApplicationsResponse> Responses { get; }
    public IPaginatedEnumerable`1<RedshiftIdcApplication> RedshiftIdcApplications { get; }
    internal DescribeRedshiftIdcApplicationsPaginator(IAmazonRedshift client, DescribeRedshiftIdcApplicationsRequest request);
    public sealed virtual IPaginatedEnumerable`1<DescribeRedshiftIdcApplicationsResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<RedshiftIdcApplication> get_RedshiftIdcApplications();
    [AsyncIteratorStateMachineAttribute("Amazon.Redshift.Model.DescribeRedshiftIdcApplicationsPaginator/<Amazon-Runtime-IPaginator<Amazon-Redshift-Model-DescribeRedshiftIdcApplicationsResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<DescribeRedshiftIdcApplicationsResponse> Amazon.Runtime.IPaginator<Amazon.Redshift.Model.DescribeRedshiftIdcApplicationsResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.Redshift.Model.DescribeRedshiftIdcApplicationsRequest : AmazonRedshiftRequest {
    private string _marker;
    private Nullable`1<int> _maxRecords;
    private string _redshiftIdcApplicationArn;
    [AWSPropertyAttribute]
public string Marker { get; public set; }
    public Nullable`1<int> MaxRecords { get; public set; }
    [AWSPropertyAttribute]
public string RedshiftIdcApplicationArn { get; public set; }
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public Nullable`1<int> get_MaxRecords();
    public void set_MaxRecords(Nullable`1<int> value);
    internal bool IsSetMaxRecords();
    public string get_RedshiftIdcApplicationArn();
    public void set_RedshiftIdcApplicationArn(string value);
    internal bool IsSetRedshiftIdcApplicationArn();
}
public class Amazon.Redshift.Model.DescribeRedshiftIdcApplicationsResponse : AmazonWebServiceResponse {
    private string _marker;
    private List`1<RedshiftIdcApplication> _redshiftIdcApplications;
    [AWSPropertyAttribute]
public string Marker { get; public set; }
    public List`1<RedshiftIdcApplication> RedshiftIdcApplications { get; public set; }
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public List`1<RedshiftIdcApplication> get_RedshiftIdcApplications();
    public void set_RedshiftIdcApplications(List`1<RedshiftIdcApplication> value);
    internal bool IsSetRedshiftIdcApplications();
}
internal class Amazon.Redshift.Model.DescribeReservedNodeExchangeStatusPaginator : object {
    private IAmazonRedshift _client;
    private DescribeReservedNodeExchangeStatusRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<DescribeReservedNodeExchangeStatusResponse> Responses { get; }
    public IPaginatedEnumerable`1<ReservedNodeExchangeStatus> ReservedNodeExchangeStatusDetails { get; }
    internal DescribeReservedNodeExchangeStatusPaginator(IAmazonRedshift client, DescribeReservedNodeExchangeStatusRequest request);
    public sealed virtual IPaginatedEnumerable`1<DescribeReservedNodeExchangeStatusResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<ReservedNodeExchangeStatus> get_ReservedNodeExchangeStatusDetails();
    [AsyncIteratorStateMachineAttribute("Amazon.Redshift.Model.DescribeReservedNodeExchangeStatusPaginator/<Amazon-Runtime-IPaginator<Amazon-Redshift-Model-DescribeReservedNodeExchangeStatusResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<DescribeReservedNodeExchangeStatusResponse> Amazon.Runtime.IPaginator<Amazon.Redshift.Model.DescribeReservedNodeExchangeStatusResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.Redshift.Model.DescribeReservedNodeExchangeStatusRequest : AmazonRedshiftRequest {
    private string _marker;
    private Nullable`1<int> _maxRecords;
    private string _reservedNodeExchangeRequestId;
    private string _reservedNodeId;
    [AWSPropertyAttribute]
public string Marker { get; public set; }
    public Nullable`1<int> MaxRecords { get; public set; }
    [AWSPropertyAttribute]
public string ReservedNodeExchangeRequestId { get; public set; }
    [AWSPropertyAttribute]
public string ReservedNodeId { get; public set; }
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public Nullable`1<int> get_MaxRecords();
    public void set_MaxRecords(Nullable`1<int> value);
    internal bool IsSetMaxRecords();
    public string get_ReservedNodeExchangeRequestId();
    public void set_ReservedNodeExchangeRequestId(string value);
    internal bool IsSetReservedNodeExchangeRequestId();
    public string get_ReservedNodeId();
    public void set_ReservedNodeId(string value);
    internal bool IsSetReservedNodeId();
}
public class Amazon.Redshift.Model.DescribeReservedNodeExchangeStatusResponse : AmazonWebServiceResponse {
    private string _marker;
    private List`1<ReservedNodeExchangeStatus> _reservedNodeExchangeStatusDetails;
    [AWSPropertyAttribute]
public string Marker { get; public set; }
    public List`1<ReservedNodeExchangeStatus> ReservedNodeExchangeStatusDetails { get; public set; }
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public List`1<ReservedNodeExchangeStatus> get_ReservedNodeExchangeStatusDetails();
    public void set_ReservedNodeExchangeStatusDetails(List`1<ReservedNodeExchangeStatus> value);
    internal bool IsSetReservedNodeExchangeStatusDetails();
}
internal class Amazon.Redshift.Model.DescribeReservedNodeOfferingsPaginator : object {
    private IAmazonRedshift _client;
    private DescribeReservedNodeOfferingsRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<DescribeReservedNodeOfferingsResponse> Responses { get; }
    public IPaginatedEnumerable`1<ReservedNodeOffering> ReservedNodeOfferings { get; }
    internal DescribeReservedNodeOfferingsPaginator(IAmazonRedshift client, DescribeReservedNodeOfferingsRequest request);
    public sealed virtual IPaginatedEnumerable`1<DescribeReservedNodeOfferingsResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<ReservedNodeOffering> get_ReservedNodeOfferings();
    [AsyncIteratorStateMachineAttribute("Amazon.Redshift.Model.DescribeReservedNodeOfferingsPaginator/<Amazon-Runtime-IPaginator<Amazon-Redshift-Model-DescribeReservedNodeOfferingsResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<DescribeReservedNodeOfferingsResponse> Amazon.Runtime.IPaginator<Amazon.Redshift.Model.DescribeReservedNodeOfferingsResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.Redshift.Model.DescribeReservedNodeOfferingsRequest : AmazonRedshiftRequest {
    private string _marker;
    private Nullable`1<int> _maxRecords;
    private string _reservedNodeOfferingId;
    [AWSPropertyAttribute]
public string Marker { get; public set; }
    public Nullable`1<int> MaxRecords { get; public set; }
    [AWSPropertyAttribute]
public string ReservedNodeOfferingId { get; public set; }
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public Nullable`1<int> get_MaxRecords();
    public void set_MaxRecords(Nullable`1<int> value);
    internal bool IsSetMaxRecords();
    public string get_ReservedNodeOfferingId();
    public void set_ReservedNodeOfferingId(string value);
    internal bool IsSetReservedNodeOfferingId();
}
public class Amazon.Redshift.Model.DescribeReservedNodeOfferingsResponse : AmazonWebServiceResponse {
    private string _marker;
    private List`1<ReservedNodeOffering> _reservedNodeOfferings;
    [AWSPropertyAttribute]
public string Marker { get; public set; }
    public List`1<ReservedNodeOffering> ReservedNodeOfferings { get; public set; }
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public List`1<ReservedNodeOffering> get_ReservedNodeOfferings();
    public void set_ReservedNodeOfferings(List`1<ReservedNodeOffering> value);
    internal bool IsSetReservedNodeOfferings();
}
internal class Amazon.Redshift.Model.DescribeReservedNodesPaginator : object {
    private IAmazonRedshift _client;
    private DescribeReservedNodesRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<DescribeReservedNodesResponse> Responses { get; }
    public IPaginatedEnumerable`1<ReservedNode> ReservedNodes { get; }
    internal DescribeReservedNodesPaginator(IAmazonRedshift client, DescribeReservedNodesRequest request);
    public sealed virtual IPaginatedEnumerable`1<DescribeReservedNodesResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<ReservedNode> get_ReservedNodes();
    [AsyncIteratorStateMachineAttribute("Amazon.Redshift.Model.DescribeReservedNodesPaginator/<Amazon-Runtime-IPaginator<Amazon-Redshift-Model-DescribeReservedNodesResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<DescribeReservedNodesResponse> Amazon.Runtime.IPaginator<Amazon.Redshift.Model.DescribeReservedNodesResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.Redshift.Model.DescribeReservedNodesRequest : AmazonRedshiftRequest {
    private string _marker;
    private Nullable`1<int> _maxRecords;
    private string _reservedNodeId;
    [AWSPropertyAttribute]
public string Marker { get; public set; }
    public Nullable`1<int> MaxRecords { get; public set; }
    [AWSPropertyAttribute]
public string ReservedNodeId { get; public set; }
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public Nullable`1<int> get_MaxRecords();
    public void set_MaxRecords(Nullable`1<int> value);
    internal bool IsSetMaxRecords();
    public string get_ReservedNodeId();
    public void set_ReservedNodeId(string value);
    internal bool IsSetReservedNodeId();
}
public class Amazon.Redshift.Model.DescribeReservedNodesResponse : AmazonWebServiceResponse {
    private string _marker;
    private List`1<ReservedNode> _reservedNodes;
    [AWSPropertyAttribute]
public string Marker { get; public set; }
    public List`1<ReservedNode> ReservedNodes { get; public set; }
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public List`1<ReservedNode> get_ReservedNodes();
    public void set_ReservedNodes(List`1<ReservedNode> value);
    internal bool IsSetReservedNodes();
}
public class Amazon.Redshift.Model.DescribeResizeRequest : AmazonRedshiftRequest {
    private string _clusterIdentifier;
    [AWSPropertyAttribute]
public string ClusterIdentifier { get; public set; }
    public string get_ClusterIdentifier();
    public void set_ClusterIdentifier(string value);
    internal bool IsSetClusterIdentifier();
}
public class Amazon.Redshift.Model.DescribeResizeResponse : AmazonWebServiceResponse {
    private Nullable`1<double> _avgResizeRateInMegaBytesPerSecond;
    private Nullable`1<double> _dataTransferProgressPercent;
    private Nullable`1<long> _elapsedTimeInSeconds;
    private Nullable`1<long> _estimatedTimeToCompletionInSeconds;
    private List`1<string> _importTablesCompleted;
    private List`1<string> _importTablesInProgress;
    private List`1<string> _importTablesNotStarted;
    private string _message;
    private Nullable`1<long> _progressInMegaBytes;
    private string _resizeType;
    private string _status;
    private string _targetClusterType;
    private string _targetEncryptionType;
    private string _targetNodeType;
    private Nullable`1<int> _targetNumberOfNodes;
    private Nullable`1<long> _totalResizeDataInMegaBytes;
    public Nullable`1<double> AvgResizeRateInMegaBytesPerSecond { get; public set; }
    public Nullable`1<double> DataTransferProgressPercent { get; public set; }
    public Nullable`1<long> ElapsedTimeInSeconds { get; public set; }
    public Nullable`1<long> EstimatedTimeToCompletionInSeconds { get; public set; }
    public List`1<string> ImportTablesCompleted { get; public set; }
    public List`1<string> ImportTablesInProgress { get; public set; }
    public List`1<string> ImportTablesNotStarted { get; public set; }
    [AWSPropertyAttribute]
public string Message { get; public set; }
    public Nullable`1<long> ProgressInMegaBytes { get; public set; }
    [AWSPropertyAttribute]
public string ResizeType { get; public set; }
    [AWSPropertyAttribute]
public string Status { get; public set; }
    [AWSPropertyAttribute]
public string TargetClusterType { get; public set; }
    [AWSPropertyAttribute]
public string TargetEncryptionType { get; public set; }
    [AWSPropertyAttribute]
public string TargetNodeType { get; public set; }
    public Nullable`1<int> TargetNumberOfNodes { get; public set; }
    public Nullable`1<long> TotalResizeDataInMegaBytes { get; public set; }
    public Nullable`1<double> get_AvgResizeRateInMegaBytesPerSecond();
    public void set_AvgResizeRateInMegaBytesPerSecond(Nullable`1<double> value);
    internal bool IsSetAvgResizeRateInMegaBytesPerSecond();
    public Nullable`1<double> get_DataTransferProgressPercent();
    public void set_DataTransferProgressPercent(Nullable`1<double> value);
    internal bool IsSetDataTransferProgressPercent();
    public Nullable`1<long> get_ElapsedTimeInSeconds();
    public void set_ElapsedTimeInSeconds(Nullable`1<long> value);
    internal bool IsSetElapsedTimeInSeconds();
    public Nullable`1<long> get_EstimatedTimeToCompletionInSeconds();
    public void set_EstimatedTimeToCompletionInSeconds(Nullable`1<long> value);
    internal bool IsSetEstimatedTimeToCompletionInSeconds();
    public List`1<string> get_ImportTablesCompleted();
    public void set_ImportTablesCompleted(List`1<string> value);
    internal bool IsSetImportTablesCompleted();
    public List`1<string> get_ImportTablesInProgress();
    public void set_ImportTablesInProgress(List`1<string> value);
    internal bool IsSetImportTablesInProgress();
    public List`1<string> get_ImportTablesNotStarted();
    public void set_ImportTablesNotStarted(List`1<string> value);
    internal bool IsSetImportTablesNotStarted();
    public string get_Message();
    public void set_Message(string value);
    internal bool IsSetMessage();
    public Nullable`1<long> get_ProgressInMegaBytes();
    public void set_ProgressInMegaBytes(Nullable`1<long> value);
    internal bool IsSetProgressInMegaBytes();
    public string get_ResizeType();
    public void set_ResizeType(string value);
    internal bool IsSetResizeType();
    public string get_Status();
    public void set_Status(string value);
    internal bool IsSetStatus();
    public string get_TargetClusterType();
    public void set_TargetClusterType(string value);
    internal bool IsSetTargetClusterType();
    public string get_TargetEncryptionType();
    public void set_TargetEncryptionType(string value);
    internal bool IsSetTargetEncryptionType();
    public string get_TargetNodeType();
    public void set_TargetNodeType(string value);
    internal bool IsSetTargetNodeType();
    public Nullable`1<int> get_TargetNumberOfNodes();
    public void set_TargetNumberOfNodes(Nullable`1<int> value);
    internal bool IsSetTargetNumberOfNodes();
    public Nullable`1<long> get_TotalResizeDataInMegaBytes();
    public void set_TotalResizeDataInMegaBytes(Nullable`1<long> value);
    internal bool IsSetTotalResizeDataInMegaBytes();
}
internal class Amazon.Redshift.Model.DescribeScheduledActionsPaginator : object {
    private IAmazonRedshift _client;
    private DescribeScheduledActionsRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<DescribeScheduledActionsResponse> Responses { get; }
    public IPaginatedEnumerable`1<ScheduledAction> ScheduledActions { get; }
    internal DescribeScheduledActionsPaginator(IAmazonRedshift client, DescribeScheduledActionsRequest request);
    public sealed virtual IPaginatedEnumerable`1<DescribeScheduledActionsResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<ScheduledAction> get_ScheduledActions();
    [AsyncIteratorStateMachineAttribute("Amazon.Redshift.Model.DescribeScheduledActionsPaginator/<Amazon-Runtime-IPaginator<Amazon-Redshift-Model-DescribeScheduledActionsResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<DescribeScheduledActionsResponse> Amazon.Runtime.IPaginator<Amazon.Redshift.Model.DescribeScheduledActionsResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.Redshift.Model.DescribeScheduledActionsRequest : AmazonRedshiftRequest {
    private Nullable`1<bool> _active;
    private Nullable`1<DateTime> _endTime;
    private List`1<ScheduledActionFilter> _filters;
    private string _marker;
    private Nullable`1<int> _maxRecords;
    private string _scheduledActionName;
    private Nullable`1<DateTime> _startTime;
    private ScheduledActionTypeValues _targetActionType;
    public Nullable`1<bool> Active { get; public set; }
    public Nullable`1<DateTime> EndTime { get; public set; }
    public List`1<ScheduledActionFilter> Filters { get; public set; }
    [AWSPropertyAttribute]
public string Marker { get; public set; }
    public Nullable`1<int> MaxRecords { get; public set; }
    [AWSPropertyAttribute]
public string ScheduledActionName { get; public set; }
    public Nullable`1<DateTime> StartTime { get; public set; }
    public ScheduledActionTypeValues TargetActionType { get; public set; }
    public Nullable`1<bool> get_Active();
    public void set_Active(Nullable`1<bool> value);
    internal bool IsSetActive();
    public Nullable`1<DateTime> get_EndTime();
    public void set_EndTime(Nullable`1<DateTime> value);
    internal bool IsSetEndTime();
    public List`1<ScheduledActionFilter> get_Filters();
    public void set_Filters(List`1<ScheduledActionFilter> value);
    internal bool IsSetFilters();
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public Nullable`1<int> get_MaxRecords();
    public void set_MaxRecords(Nullable`1<int> value);
    internal bool IsSetMaxRecords();
    public string get_ScheduledActionName();
    public void set_ScheduledActionName(string value);
    internal bool IsSetScheduledActionName();
    public Nullable`1<DateTime> get_StartTime();
    public void set_StartTime(Nullable`1<DateTime> value);
    internal bool IsSetStartTime();
    public ScheduledActionTypeValues get_TargetActionType();
    public void set_TargetActionType(ScheduledActionTypeValues value);
    internal bool IsSetTargetActionType();
}
public class Amazon.Redshift.Model.DescribeScheduledActionsResponse : AmazonWebServiceResponse {
    private string _marker;
    private List`1<ScheduledAction> _scheduledActions;
    [AWSPropertyAttribute]
public string Marker { get; public set; }
    public List`1<ScheduledAction> ScheduledActions { get; public set; }
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public List`1<ScheduledAction> get_ScheduledActions();
    public void set_ScheduledActions(List`1<ScheduledAction> value);
    internal bool IsSetScheduledActions();
}
internal class Amazon.Redshift.Model.DescribeSnapshotCopyGrantsPaginator : object {
    private IAmazonRedshift _client;
    private DescribeSnapshotCopyGrantsRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<DescribeSnapshotCopyGrantsResponse> Responses { get; }
    public IPaginatedEnumerable`1<SnapshotCopyGrant> SnapshotCopyGrants { get; }
    internal DescribeSnapshotCopyGrantsPaginator(IAmazonRedshift client, DescribeSnapshotCopyGrantsRequest request);
    public sealed virtual IPaginatedEnumerable`1<DescribeSnapshotCopyGrantsResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<SnapshotCopyGrant> get_SnapshotCopyGrants();
    [AsyncIteratorStateMachineAttribute("Amazon.Redshift.Model.DescribeSnapshotCopyGrantsPaginator/<Amazon-Runtime-IPaginator<Amazon-Redshift-Model-DescribeSnapshotCopyGrantsResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<DescribeSnapshotCopyGrantsResponse> Amazon.Runtime.IPaginator<Amazon.Redshift.Model.DescribeSnapshotCopyGrantsResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.Redshift.Model.DescribeSnapshotCopyGrantsRequest : AmazonRedshiftRequest {
    private string _marker;
    private Nullable`1<int> _maxRecords;
    private string _snapshotCopyGrantName;
    private List`1<string> _tagKeys;
    private List`1<string> _tagValues;
    [AWSPropertyAttribute]
public string Marker { get; public set; }
    public Nullable`1<int> MaxRecords { get; public set; }
    [AWSPropertyAttribute]
public string SnapshotCopyGrantName { get; public set; }
    public List`1<string> TagKeys { get; public set; }
    public List`1<string> TagValues { get; public set; }
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public Nullable`1<int> get_MaxRecords();
    public void set_MaxRecords(Nullable`1<int> value);
    internal bool IsSetMaxRecords();
    public string get_SnapshotCopyGrantName();
    public void set_SnapshotCopyGrantName(string value);
    internal bool IsSetSnapshotCopyGrantName();
    public List`1<string> get_TagKeys();
    public void set_TagKeys(List`1<string> value);
    internal bool IsSetTagKeys();
    public List`1<string> get_TagValues();
    public void set_TagValues(List`1<string> value);
    internal bool IsSetTagValues();
}
public class Amazon.Redshift.Model.DescribeSnapshotCopyGrantsResponse : AmazonWebServiceResponse {
    private string _marker;
    private List`1<SnapshotCopyGrant> _snapshotCopyGrants;
    [AWSPropertyAttribute]
public string Marker { get; public set; }
    public List`1<SnapshotCopyGrant> SnapshotCopyGrants { get; public set; }
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public List`1<SnapshotCopyGrant> get_SnapshotCopyGrants();
    public void set_SnapshotCopyGrants(List`1<SnapshotCopyGrant> value);
    internal bool IsSetSnapshotCopyGrants();
}
internal class Amazon.Redshift.Model.DescribeSnapshotSchedulesPaginator : object {
    private IAmazonRedshift _client;
    private DescribeSnapshotSchedulesRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<DescribeSnapshotSchedulesResponse> Responses { get; }
    public IPaginatedEnumerable`1<SnapshotSchedule> SnapshotSchedules { get; }
    internal DescribeSnapshotSchedulesPaginator(IAmazonRedshift client, DescribeSnapshotSchedulesRequest request);
    public sealed virtual IPaginatedEnumerable`1<DescribeSnapshotSchedulesResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<SnapshotSchedule> get_SnapshotSchedules();
    [AsyncIteratorStateMachineAttribute("Amazon.Redshift.Model.DescribeSnapshotSchedulesPaginator/<Amazon-Runtime-IPaginator<Amazon-Redshift-Model-DescribeSnapshotSchedulesResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<DescribeSnapshotSchedulesResponse> Amazon.Runtime.IPaginator<Amazon.Redshift.Model.DescribeSnapshotSchedulesResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.Redshift.Model.DescribeSnapshotSchedulesRequest : AmazonRedshiftRequest {
    private string _clusterIdentifier;
    private string _marker;
    private Nullable`1<int> _maxRecords;
    private string _scheduleIdentifier;
    private List`1<string> _tagKeys;
    private List`1<string> _tagValues;
    [AWSPropertyAttribute]
public string ClusterIdentifier { get; public set; }
    [AWSPropertyAttribute]
public string Marker { get; public set; }
    public Nullable`1<int> MaxRecords { get; public set; }
    [AWSPropertyAttribute]
public string ScheduleIdentifier { get; public set; }
    public List`1<string> TagKeys { get; public set; }
    public List`1<string> TagValues { get; public set; }
    public string get_ClusterIdentifier();
    public void set_ClusterIdentifier(string value);
    internal bool IsSetClusterIdentifier();
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public Nullable`1<int> get_MaxRecords();
    public void set_MaxRecords(Nullable`1<int> value);
    internal bool IsSetMaxRecords();
    public string get_ScheduleIdentifier();
    public void set_ScheduleIdentifier(string value);
    internal bool IsSetScheduleIdentifier();
    public List`1<string> get_TagKeys();
    public void set_TagKeys(List`1<string> value);
    internal bool IsSetTagKeys();
    public List`1<string> get_TagValues();
    public void set_TagValues(List`1<string> value);
    internal bool IsSetTagValues();
}
public class Amazon.Redshift.Model.DescribeSnapshotSchedulesResponse : AmazonWebServiceResponse {
    private string _marker;
    private List`1<SnapshotSchedule> _snapshotSchedules;
    [AWSPropertyAttribute]
public string Marker { get; public set; }
    public List`1<SnapshotSchedule> SnapshotSchedules { get; public set; }
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public List`1<SnapshotSchedule> get_SnapshotSchedules();
    public void set_SnapshotSchedules(List`1<SnapshotSchedule> value);
    internal bool IsSetSnapshotSchedules();
}
public class Amazon.Redshift.Model.DescribeStorageRequest : AmazonRedshiftRequest {
}
public class Amazon.Redshift.Model.DescribeStorageResponse : AmazonWebServiceResponse {
    private Nullable`1<double> _totalBackupSizeInMegaBytes;
    private Nullable`1<double> _totalProvisionedStorageInMegaBytes;
    public Nullable`1<double> TotalBackupSizeInMegaBytes { get; public set; }
    public Nullable`1<double> TotalProvisionedStorageInMegaBytes { get; public set; }
    public Nullable`1<double> get_TotalBackupSizeInMegaBytes();
    public void set_TotalBackupSizeInMegaBytes(Nullable`1<double> value);
    internal bool IsSetTotalBackupSizeInMegaBytes();
    public Nullable`1<double> get_TotalProvisionedStorageInMegaBytes();
    public void set_TotalProvisionedStorageInMegaBytes(Nullable`1<double> value);
    internal bool IsSetTotalProvisionedStorageInMegaBytes();
}
internal class Amazon.Redshift.Model.DescribeTableRestoreStatusPaginator : object {
    private IAmazonRedshift _client;
    private DescribeTableRestoreStatusRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<DescribeTableRestoreStatusResponse> Responses { get; }
    public IPaginatedEnumerable`1<TableRestoreStatus> TableRestoreStatusDetails { get; }
    internal DescribeTableRestoreStatusPaginator(IAmazonRedshift client, DescribeTableRestoreStatusRequest request);
    public sealed virtual IPaginatedEnumerable`1<DescribeTableRestoreStatusResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<TableRestoreStatus> get_TableRestoreStatusDetails();
    [AsyncIteratorStateMachineAttribute("Amazon.Redshift.Model.DescribeTableRestoreStatusPaginator/<Amazon-Runtime-IPaginator<Amazon-Redshift-Model-DescribeTableRestoreStatusResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<DescribeTableRestoreStatusResponse> Amazon.Runtime.IPaginator<Amazon.Redshift.Model.DescribeTableRestoreStatusResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.Redshift.Model.DescribeTableRestoreStatusRequest : AmazonRedshiftRequest {
    private string _clusterIdentifier;
    private string _marker;
    private Nullable`1<int> _maxRecords;
    private string _tableRestoreRequestId;
    [AWSPropertyAttribute]
public string ClusterIdentifier { get; public set; }
    [AWSPropertyAttribute]
public string Marker { get; public set; }
    public Nullable`1<int> MaxRecords { get; public set; }
    [AWSPropertyAttribute]
public string TableRestoreRequestId { get; public set; }
    public string get_ClusterIdentifier();
    public void set_ClusterIdentifier(string value);
    internal bool IsSetClusterIdentifier();
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public Nullable`1<int> get_MaxRecords();
    public void set_MaxRecords(Nullable`1<int> value);
    internal bool IsSetMaxRecords();
    public string get_TableRestoreRequestId();
    public void set_TableRestoreRequestId(string value);
    internal bool IsSetTableRestoreRequestId();
}
public class Amazon.Redshift.Model.DescribeTableRestoreStatusResponse : AmazonWebServiceResponse {
    private string _marker;
    private List`1<TableRestoreStatus> _tableRestoreStatusDetails;
    [AWSPropertyAttribute]
public string Marker { get; public set; }
    public List`1<TableRestoreStatus> TableRestoreStatusDetails { get; public set; }
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public List`1<TableRestoreStatus> get_TableRestoreStatusDetails();
    public void set_TableRestoreStatusDetails(List`1<TableRestoreStatus> value);
    internal bool IsSetTableRestoreStatusDetails();
}
internal class Amazon.Redshift.Model.DescribeTagsPaginator : object {
    private IAmazonRedshift _client;
    private DescribeTagsRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<DescribeTagsResponse> Responses { get; }
    public IPaginatedEnumerable`1<TaggedResource> TaggedResources { get; }
    internal DescribeTagsPaginator(IAmazonRedshift client, DescribeTagsRequest request);
    public sealed virtual IPaginatedEnumerable`1<DescribeTagsResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<TaggedResource> get_TaggedResources();
    [AsyncIteratorStateMachineAttribute("Amazon.Redshift.Model.DescribeTagsPaginator/<Amazon-Runtime-IPaginator<Amazon-Redshift-Model-DescribeTagsResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<DescribeTagsResponse> Amazon.Runtime.IPaginator<Amazon.Redshift.Model.DescribeTagsResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.Redshift.Model.DescribeTagsRequest : AmazonRedshiftRequest {
    private string _marker;
    private Nullable`1<int> _maxRecords;
    private string _resourceName;
    private string _resourceType;
    private List`1<string> _tagKeys;
    private List`1<string> _tagValues;
    [AWSPropertyAttribute]
public string Marker { get; public set; }
    public Nullable`1<int> MaxRecords { get; public set; }
    [AWSPropertyAttribute]
public string ResourceName { get; public set; }
    [AWSPropertyAttribute]
public string ResourceType { get; public set; }
    public List`1<string> TagKeys { get; public set; }
    public List`1<string> TagValues { get; public set; }
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public Nullable`1<int> get_MaxRecords();
    public void set_MaxRecords(Nullable`1<int> value);
    internal bool IsSetMaxRecords();
    public string get_ResourceName();
    public void set_ResourceName(string value);
    internal bool IsSetResourceName();
    public string get_ResourceType();
    public void set_ResourceType(string value);
    internal bool IsSetResourceType();
    public List`1<string> get_TagKeys();
    public void set_TagKeys(List`1<string> value);
    internal bool IsSetTagKeys();
    public List`1<string> get_TagValues();
    public void set_TagValues(List`1<string> value);
    internal bool IsSetTagValues();
}
public class Amazon.Redshift.Model.DescribeTagsResponse : AmazonWebServiceResponse {
    private string _marker;
    private List`1<TaggedResource> _taggedResources;
    [AWSPropertyAttribute]
public string Marker { get; public set; }
    public List`1<TaggedResource> TaggedResources { get; public set; }
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public List`1<TaggedResource> get_TaggedResources();
    public void set_TaggedResources(List`1<TaggedResource> value);
    internal bool IsSetTaggedResources();
}
internal class Amazon.Redshift.Model.DescribeUsageLimitsPaginator : object {
    private IAmazonRedshift _client;
    private DescribeUsageLimitsRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<DescribeUsageLimitsResponse> Responses { get; }
    public IPaginatedEnumerable`1<UsageLimit> UsageLimits { get; }
    internal DescribeUsageLimitsPaginator(IAmazonRedshift client, DescribeUsageLimitsRequest request);
    public sealed virtual IPaginatedEnumerable`1<DescribeUsageLimitsResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<UsageLimit> get_UsageLimits();
    [AsyncIteratorStateMachineAttribute("Amazon.Redshift.Model.DescribeUsageLimitsPaginator/<Amazon-Runtime-IPaginator<Amazon-Redshift-Model-DescribeUsageLimitsResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<DescribeUsageLimitsResponse> Amazon.Runtime.IPaginator<Amazon.Redshift.Model.DescribeUsageLimitsResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.Redshift.Model.DescribeUsageLimitsRequest : AmazonRedshiftRequest {
    private string _clusterIdentifier;
    private UsageLimitFeatureType _featureType;
    private string _marker;
    private Nullable`1<int> _maxRecords;
    private List`1<string> _tagKeys;
    private List`1<string> _tagValues;
    private string _usageLimitId;
    [AWSPropertyAttribute]
public string ClusterIdentifier { get; public set; }
    public UsageLimitFeatureType FeatureType { get; public set; }
    [AWSPropertyAttribute]
public string Marker { get; public set; }
    public Nullable`1<int> MaxRecords { get; public set; }
    public List`1<string> TagKeys { get; public set; }
    public List`1<string> TagValues { get; public set; }
    [AWSPropertyAttribute]
public string UsageLimitId { get; public set; }
    public string get_ClusterIdentifier();
    public void set_ClusterIdentifier(string value);
    internal bool IsSetClusterIdentifier();
    public UsageLimitFeatureType get_FeatureType();
    public void set_FeatureType(UsageLimitFeatureType value);
    internal bool IsSetFeatureType();
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public Nullable`1<int> get_MaxRecords();
    public void set_MaxRecords(Nullable`1<int> value);
    internal bool IsSetMaxRecords();
    public List`1<string> get_TagKeys();
    public void set_TagKeys(List`1<string> value);
    internal bool IsSetTagKeys();
    public List`1<string> get_TagValues();
    public void set_TagValues(List`1<string> value);
    internal bool IsSetTagValues();
    public string get_UsageLimitId();
    public void set_UsageLimitId(string value);
    internal bool IsSetUsageLimitId();
}
public class Amazon.Redshift.Model.DescribeUsageLimitsResponse : AmazonWebServiceResponse {
    private string _marker;
    private List`1<UsageLimit> _usageLimits;
    [AWSPropertyAttribute]
public string Marker { get; public set; }
    public List`1<UsageLimit> UsageLimits { get; public set; }
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public List`1<UsageLimit> get_UsageLimits();
    public void set_UsageLimits(List`1<UsageLimit> value);
    internal bool IsSetUsageLimits();
}
public class Amazon.Redshift.Model.DisableLoggingRequest : AmazonRedshiftRequest {
    private string _clusterIdentifier;
    [AWSPropertyAttribute]
public string ClusterIdentifier { get; public set; }
    public string get_ClusterIdentifier();
    public void set_ClusterIdentifier(string value);
    internal bool IsSetClusterIdentifier();
}
public class Amazon.Redshift.Model.DisableLoggingResponse : AmazonWebServiceResponse {
    private string _bucketName;
    private string _lastFailureMessage;
    private Nullable`1<DateTime> _lastFailureTime;
    private Nullable`1<DateTime> _lastSuccessfulDeliveryTime;
    private LogDestinationType _logDestinationType;
    private List`1<string> _logExports;
    private Nullable`1<bool> _loggingEnabled;
    private string _s3KeyPrefix;
    [AWSPropertyAttribute]
public string BucketName { get; public set; }
    [AWSPropertyAttribute]
public string LastFailureMessage { get; public set; }
    public Nullable`1<DateTime> LastFailureTime { get; public set; }
    public Nullable`1<DateTime> LastSuccessfulDeliveryTime { get; public set; }
    public LogDestinationType LogDestinationType { get; public set; }
    public List`1<string> LogExports { get; public set; }
    public Nullable`1<bool> LoggingEnabled { get; public set; }
    [AWSPropertyAttribute]
public string S3KeyPrefix { get; public set; }
    public string get_BucketName();
    public void set_BucketName(string value);
    internal bool IsSetBucketName();
    public string get_LastFailureMessage();
    public void set_LastFailureMessage(string value);
    internal bool IsSetLastFailureMessage();
    public Nullable`1<DateTime> get_LastFailureTime();
    public void set_LastFailureTime(Nullable`1<DateTime> value);
    internal bool IsSetLastFailureTime();
    public Nullable`1<DateTime> get_LastSuccessfulDeliveryTime();
    public void set_LastSuccessfulDeliveryTime(Nullable`1<DateTime> value);
    internal bool IsSetLastSuccessfulDeliveryTime();
    public LogDestinationType get_LogDestinationType();
    public void set_LogDestinationType(LogDestinationType value);
    internal bool IsSetLogDestinationType();
    public List`1<string> get_LogExports();
    public void set_LogExports(List`1<string> value);
    internal bool IsSetLogExports();
    public Nullable`1<bool> get_LoggingEnabled();
    public void set_LoggingEnabled(Nullable`1<bool> value);
    internal bool IsSetLoggingEnabled();
    public string get_S3KeyPrefix();
    public void set_S3KeyPrefix(string value);
    internal bool IsSetS3KeyPrefix();
}
public class Amazon.Redshift.Model.DisableSnapshotCopyRequest : AmazonRedshiftRequest {
    private string _clusterIdentifier;
    [AWSPropertyAttribute]
public string ClusterIdentifier { get; public set; }
    public string get_ClusterIdentifier();
    public void set_ClusterIdentifier(string value);
    internal bool IsSetClusterIdentifier();
}
public class Amazon.Redshift.Model.DisableSnapshotCopyResponse : AmazonWebServiceResponse {
    private Cluster _cluster;
    public Cluster Cluster { get; public set; }
    public Cluster get_Cluster();
    public void set_Cluster(Cluster value);
    internal bool IsSetCluster();
}
public class Amazon.Redshift.Model.DisassociateDataShareConsumerRequest : AmazonRedshiftRequest {
    private string _consumerArn;
    private string _consumerRegion;
    private string _dataShareArn;
    private Nullable`1<bool> _disassociateEntireAccount;
    [AWSPropertyAttribute]
public string ConsumerArn { get; public set; }
    [AWSPropertyAttribute]
public string ConsumerRegion { get; public set; }
    [AWSPropertyAttribute]
public string DataShareArn { get; public set; }
    public Nullable`1<bool> DisassociateEntireAccount { get; public set; }
    public string get_ConsumerArn();
    public void set_ConsumerArn(string value);
    internal bool IsSetConsumerArn();
    public string get_ConsumerRegion();
    public void set_ConsumerRegion(string value);
    internal bool IsSetConsumerRegion();
    public string get_DataShareArn();
    public void set_DataShareArn(string value);
    internal bool IsSetDataShareArn();
    public Nullable`1<bool> get_DisassociateEntireAccount();
    public void set_DisassociateEntireAccount(Nullable`1<bool> value);
    internal bool IsSetDisassociateEntireAccount();
}
public class Amazon.Redshift.Model.DisassociateDataShareConsumerResponse : AmazonWebServiceResponse {
    private Nullable`1<bool> _allowPubliclyAccessibleConsumers;
    private string _dataShareArn;
    private List`1<DataShareAssociation> _dataShareAssociations;
    private string _managedBy;
    private string _producerArn;
    public Nullable`1<bool> AllowPubliclyAccessibleConsumers { get; public set; }
    [AWSPropertyAttribute]
public string DataShareArn { get; public set; }
    public List`1<DataShareAssociation> DataShareAssociations { get; public set; }
    [AWSPropertyAttribute]
public string ManagedBy { get; public set; }
    [AWSPropertyAttribute]
public string ProducerArn { get; public set; }
    public Nullable`1<bool> get_AllowPubliclyAccessibleConsumers();
    public void set_AllowPubliclyAccessibleConsumers(Nullable`1<bool> value);
    internal bool IsSetAllowPubliclyAccessibleConsumers();
    public string get_DataShareArn();
    public void set_DataShareArn(string value);
    internal bool IsSetDataShareArn();
    public List`1<DataShareAssociation> get_DataShareAssociations();
    public void set_DataShareAssociations(List`1<DataShareAssociation> value);
    internal bool IsSetDataShareAssociations();
    public string get_ManagedBy();
    public void set_ManagedBy(string value);
    internal bool IsSetManagedBy();
    public string get_ProducerArn();
    public void set_ProducerArn(string value);
    internal bool IsSetProducerArn();
}
public class Amazon.Redshift.Model.EC2SecurityGroup : object {
    private string _ec2SecurityGroupName;
    private string _ec2SecurityGroupOwnerId;
    private string _status;
    private List`1<Tag> _tags;
    [AWSPropertyAttribute]
public string EC2SecurityGroupName { get; public set; }
    [AWSPropertyAttribute]
public string EC2SecurityGroupOwnerId { get; public set; }
    [AWSPropertyAttribute]
public string Status { get; public set; }
    public List`1<Tag> Tags { get; public set; }
    public string get_EC2SecurityGroupName();
    public void set_EC2SecurityGroupName(string value);
    internal bool IsSetEC2SecurityGroupName();
    public string get_EC2SecurityGroupOwnerId();
    public void set_EC2SecurityGroupOwnerId(string value);
    internal bool IsSetEC2SecurityGroupOwnerId();
    public string get_Status();
    public void set_Status(string value);
    internal bool IsSetStatus();
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
}
public class Amazon.Redshift.Model.ElasticIpStatus : object {
    private string _elasticIp;
    private string _status;
    [AWSPropertyAttribute]
public string ElasticIp { get; public set; }
    [AWSPropertyAttribute]
public string Status { get; public set; }
    public string get_ElasticIp();
    public void set_ElasticIp(string value);
    internal bool IsSetElasticIp();
    public string get_Status();
    public void set_Status(string value);
    internal bool IsSetStatus();
}
public class Amazon.Redshift.Model.EnableLoggingRequest : AmazonRedshiftRequest {
    private string _bucketName;
    private string _clusterIdentifier;
    private LogDestinationType _logDestinationType;
    private List`1<string> _logExports;
    private string _s3KeyPrefix;
    [AWSPropertyAttribute]
public string BucketName { get; public set; }
    [AWSPropertyAttribute]
public string ClusterIdentifier { get; public set; }
    public LogDestinationType LogDestinationType { get; public set; }
    public List`1<string> LogExports { get; public set; }
    [AWSPropertyAttribute]
public string S3KeyPrefix { get; public set; }
    public string get_BucketName();
    public void set_BucketName(string value);
    internal bool IsSetBucketName();
    public string get_ClusterIdentifier();
    public void set_ClusterIdentifier(string value);
    internal bool IsSetClusterIdentifier();
    public LogDestinationType get_LogDestinationType();
    public void set_LogDestinationType(LogDestinationType value);
    internal bool IsSetLogDestinationType();
    public List`1<string> get_LogExports();
    public void set_LogExports(List`1<string> value);
    internal bool IsSetLogExports();
    public string get_S3KeyPrefix();
    public void set_S3KeyPrefix(string value);
    internal bool IsSetS3KeyPrefix();
}
public class Amazon.Redshift.Model.EnableLoggingResponse : AmazonWebServiceResponse {
    private string _bucketName;
    private string _lastFailureMessage;
    private Nullable`1<DateTime> _lastFailureTime;
    private Nullable`1<DateTime> _lastSuccessfulDeliveryTime;
    private LogDestinationType _logDestinationType;
    private List`1<string> _logExports;
    private Nullable`1<bool> _loggingEnabled;
    private string _s3KeyPrefix;
    [AWSPropertyAttribute]
public string BucketName { get; public set; }
    [AWSPropertyAttribute]
public string LastFailureMessage { get; public set; }
    public Nullable`1<DateTime> LastFailureTime { get; public set; }
    public Nullable`1<DateTime> LastSuccessfulDeliveryTime { get; public set; }
    public LogDestinationType LogDestinationType { get; public set; }
    public List`1<string> LogExports { get; public set; }
    public Nullable`1<bool> LoggingEnabled { get; public set; }
    [AWSPropertyAttribute]
public string S3KeyPrefix { get; public set; }
    public string get_BucketName();
    public void set_BucketName(string value);
    internal bool IsSetBucketName();
    public string get_LastFailureMessage();
    public void set_LastFailureMessage(string value);
    internal bool IsSetLastFailureMessage();
    public Nullable`1<DateTime> get_LastFailureTime();
    public void set_LastFailureTime(Nullable`1<DateTime> value);
    internal bool IsSetLastFailureTime();
    public Nullable`1<DateTime> get_LastSuccessfulDeliveryTime();
    public void set_LastSuccessfulDeliveryTime(Nullable`1<DateTime> value);
    internal bool IsSetLastSuccessfulDeliveryTime();
    public LogDestinationType get_LogDestinationType();
    public void set_LogDestinationType(LogDestinationType value);
    internal bool IsSetLogDestinationType();
    public List`1<string> get_LogExports();
    public void set_LogExports(List`1<string> value);
    internal bool IsSetLogExports();
    public Nullable`1<bool> get_LoggingEnabled();
    public void set_LoggingEnabled(Nullable`1<bool> value);
    internal bool IsSetLoggingEnabled();
    public string get_S3KeyPrefix();
    public void set_S3KeyPrefix(string value);
    internal bool IsSetS3KeyPrefix();
}
public class Amazon.Redshift.Model.EnableSnapshotCopyRequest : AmazonRedshiftRequest {
    private string _clusterIdentifier;
    private string _destinationRegion;
    private Nullable`1<int> _manualSnapshotRetentionPeriod;
    private Nullable`1<int> _retentionPeriod;
    private string _snapshotCopyGrantName;
    [AWSPropertyAttribute]
public string ClusterIdentifier { get; public set; }
    [AWSPropertyAttribute]
public string DestinationRegion { get; public set; }
    public Nullable`1<int> ManualSnapshotRetentionPeriod { get; public set; }
    public Nullable`1<int> RetentionPeriod { get; public set; }
    [AWSPropertyAttribute]
public string SnapshotCopyGrantName { get; public set; }
    public string get_ClusterIdentifier();
    public void set_ClusterIdentifier(string value);
    internal bool IsSetClusterIdentifier();
    public string get_DestinationRegion();
    public void set_DestinationRegion(string value);
    internal bool IsSetDestinationRegion();
    public Nullable`1<int> get_ManualSnapshotRetentionPeriod();
    public void set_ManualSnapshotRetentionPeriod(Nullable`1<int> value);
    internal bool IsSetManualSnapshotRetentionPeriod();
    public Nullable`1<int> get_RetentionPeriod();
    public void set_RetentionPeriod(Nullable`1<int> value);
    internal bool IsSetRetentionPeriod();
    public string get_SnapshotCopyGrantName();
    public void set_SnapshotCopyGrantName(string value);
    internal bool IsSetSnapshotCopyGrantName();
}
public class Amazon.Redshift.Model.EnableSnapshotCopyResponse : AmazonWebServiceResponse {
    private Cluster _cluster;
    public Cluster Cluster { get; public set; }
    public Cluster get_Cluster();
    public void set_Cluster(Cluster value);
    internal bool IsSetCluster();
}
public class Amazon.Redshift.Model.Endpoint : object {
    private string _address;
    private Nullable`1<int> _port;
    private List`1<VpcEndpoint> _vpcEndpoints;
    [AWSPropertyAttribute]
public string Address { get; public set; }
    public Nullable`1<int> Port { get; public set; }
    public List`1<VpcEndpoint> VpcEndpoints { get; public set; }
    public string get_Address();
    public void set_Address(string value);
    internal bool IsSetAddress();
    public Nullable`1<int> get_Port();
    public void set_Port(Nullable`1<int> value);
    internal bool IsSetPort();
    public List`1<VpcEndpoint> get_VpcEndpoints();
    public void set_VpcEndpoints(List`1<VpcEndpoint> value);
    internal bool IsSetVpcEndpoints();
}
public class Amazon.Redshift.Model.EndpointAccess : object {
    private string _address;
    private string _clusterIdentifier;
    private Nullable`1<DateTime> _endpointCreateTime;
    private string _endpointName;
    private string _endpointStatus;
    private Nullable`1<int> _port;
    private string _resourceOwner;
    private string _subnetGroupName;
    private VpcEndpoint _vpcEndpoint;
    private List`1<VpcSecurityGroupMembership> _vpcSecurityGroups;
    [AWSPropertyAttribute]
public string Address { get; public set; }
    [AWSPropertyAttribute]
public string ClusterIdentifier { get; public set; }
    public Nullable`1<DateTime> EndpointCreateTime { get; public set; }
    [AWSPropertyAttribute]
public string EndpointName { get; public set; }
    [AWSPropertyAttribute]
public string EndpointStatus { get; public set; }
    public Nullable`1<int> Port { get; public set; }
    [AWSPropertyAttribute]
public string ResourceOwner { get; public set; }
    [AWSPropertyAttribute]
public string SubnetGroupName { get; public set; }
    public VpcEndpoint VpcEndpoint { get; public set; }
    public List`1<VpcSecurityGroupMembership> VpcSecurityGroups { get; public set; }
    public string get_Address();
    public void set_Address(string value);
    internal bool IsSetAddress();
    public string get_ClusterIdentifier();
    public void set_ClusterIdentifier(string value);
    internal bool IsSetClusterIdentifier();
    public Nullable`1<DateTime> get_EndpointCreateTime();
    public void set_EndpointCreateTime(Nullable`1<DateTime> value);
    internal bool IsSetEndpointCreateTime();
    public string get_EndpointName();
    public void set_EndpointName(string value);
    internal bool IsSetEndpointName();
    public string get_EndpointStatus();
    public void set_EndpointStatus(string value);
    internal bool IsSetEndpointStatus();
    public Nullable`1<int> get_Port();
    public void set_Port(Nullable`1<int> value);
    internal bool IsSetPort();
    public string get_ResourceOwner();
    public void set_ResourceOwner(string value);
    internal bool IsSetResourceOwner();
    public string get_SubnetGroupName();
    public void set_SubnetGroupName(string value);
    internal bool IsSetSubnetGroupName();
    public VpcEndpoint get_VpcEndpoint();
    public void set_VpcEndpoint(VpcEndpoint value);
    internal bool IsSetVpcEndpoint();
    public List`1<VpcSecurityGroupMembership> get_VpcSecurityGroups();
    public void set_VpcSecurityGroups(List`1<VpcSecurityGroupMembership> value);
    internal bool IsSetVpcSecurityGroups();
}
public class Amazon.Redshift.Model.EndpointAlreadyExistsException : AmazonRedshiftException {
    public EndpointAlreadyExistsException(string message);
    public EndpointAlreadyExistsException(string message, Exception innerException);
    public EndpointAlreadyExistsException(Exception innerException);
    public EndpointAlreadyExistsException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public EndpointAlreadyExistsException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Redshift.Model.EndpointAuthorization : object {
    private Nullable`1<bool> _allowedAllVPCs;
    private List`1<string> _allowedVPCs;
    private Nullable`1<DateTime> _authorizeTime;
    private string _clusterIdentifier;
    private string _clusterStatus;
    private Nullable`1<int> _endpointCount;
    private string _grantee;
    private string _grantor;
    private AuthorizationStatus _status;
    public Nullable`1<bool> AllowedAllVPCs { get; public set; }
    public List`1<string> AllowedVPCs { get; public set; }
    public Nullable`1<DateTime> AuthorizeTime { get; public set; }
    [AWSPropertyAttribute]
public string ClusterIdentifier { get; public set; }
    [AWSPropertyAttribute]
public string ClusterStatus { get; public set; }
    public Nullable`1<int> EndpointCount { get; public set; }
    [AWSPropertyAttribute]
public string Grantee { get; public set; }
    [AWSPropertyAttribute]
public string Grantor { get; public set; }
    public AuthorizationStatus Status { get; public set; }
    public Nullable`1<bool> get_AllowedAllVPCs();
    public void set_AllowedAllVPCs(Nullable`1<bool> value);
    internal bool IsSetAllowedAllVPCs();
    public List`1<string> get_AllowedVPCs();
    public void set_AllowedVPCs(List`1<string> value);
    internal bool IsSetAllowedVPCs();
    public Nullable`1<DateTime> get_AuthorizeTime();
    public void set_AuthorizeTime(Nullable`1<DateTime> value);
    internal bool IsSetAuthorizeTime();
    public string get_ClusterIdentifier();
    public void set_ClusterIdentifier(string value);
    internal bool IsSetClusterIdentifier();
    public string get_ClusterStatus();
    public void set_ClusterStatus(string value);
    internal bool IsSetClusterStatus();
    public Nullable`1<int> get_EndpointCount();
    public void set_EndpointCount(Nullable`1<int> value);
    internal bool IsSetEndpointCount();
    public string get_Grantee();
    public void set_Grantee(string value);
    internal bool IsSetGrantee();
    public string get_Grantor();
    public void set_Grantor(string value);
    internal bool IsSetGrantor();
    public AuthorizationStatus get_Status();
    public void set_Status(AuthorizationStatus value);
    internal bool IsSetStatus();
}
public class Amazon.Redshift.Model.EndpointAuthorizationAlreadyExistsException : AmazonRedshiftException {
    public EndpointAuthorizationAlreadyExistsException(string message);
    public EndpointAuthorizationAlreadyExistsException(string message, Exception innerException);
    public EndpointAuthorizationAlreadyExistsException(Exception innerException);
    public EndpointAuthorizationAlreadyExistsException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public EndpointAuthorizationAlreadyExistsException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Redshift.Model.EndpointAuthorizationNotFoundException : AmazonRedshiftException {
    public EndpointAuthorizationNotFoundException(string message);
    public EndpointAuthorizationNotFoundException(string message, Exception innerException);
    public EndpointAuthorizationNotFoundException(Exception innerException);
    public EndpointAuthorizationNotFoundException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public EndpointAuthorizationNotFoundException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Redshift.Model.EndpointAuthorizationsPerClusterLimitExceededException : AmazonRedshiftException {
    public EndpointAuthorizationsPerClusterLimitExceededException(string message);
    public EndpointAuthorizationsPerClusterLimitExceededException(string message, Exception innerException);
    public EndpointAuthorizationsPerClusterLimitExceededException(Exception innerException);
    public EndpointAuthorizationsPerClusterLimitExceededException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public EndpointAuthorizationsPerClusterLimitExceededException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Redshift.Model.EndpointNotFoundException : AmazonRedshiftException {
    public EndpointNotFoundException(string message);
    public EndpointNotFoundException(string message, Exception innerException);
    public EndpointNotFoundException(Exception innerException);
    public EndpointNotFoundException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public EndpointNotFoundException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Redshift.Model.EndpointsPerAuthorizationLimitExceededException : AmazonRedshiftException {
    public EndpointsPerAuthorizationLimitExceededException(string message);
    public EndpointsPerAuthorizationLimitExceededException(string message, Exception innerException);
    public EndpointsPerAuthorizationLimitExceededException(Exception innerException);
    public EndpointsPerAuthorizationLimitExceededException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public EndpointsPerAuthorizationLimitExceededException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Redshift.Model.EndpointsPerClusterLimitExceededException : AmazonRedshiftException {
    public EndpointsPerClusterLimitExceededException(string message);
    public EndpointsPerClusterLimitExceededException(string message, Exception innerException);
    public EndpointsPerClusterLimitExceededException(Exception innerException);
    public EndpointsPerClusterLimitExceededException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public EndpointsPerClusterLimitExceededException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Redshift.Model.Event : object {
    private Nullable`1<DateTime> _date;
    private List`1<string> _eventCategories;
    private string _eventId;
    private string _message;
    private string _severity;
    private string _sourceIdentifier;
    private SourceType _sourceType;
    public Nullable`1<DateTime> Date { get; public set; }
    public List`1<string> EventCategories { get; public set; }
    [AWSPropertyAttribute]
public string EventId { get; public set; }
    [AWSPropertyAttribute]
public string Message { get; public set; }
    [AWSPropertyAttribute]
public string Severity { get; public set; }
    [AWSPropertyAttribute]
public string SourceIdentifier { get; public set; }
    public SourceType SourceType { get; public set; }
    public Nullable`1<DateTime> get_Date();
    public void set_Date(Nullable`1<DateTime> value);
    internal bool IsSetDate();
    public List`1<string> get_EventCategories();
    public void set_EventCategories(List`1<string> value);
    internal bool IsSetEventCategories();
    public string get_EventId();
    public void set_EventId(string value);
    internal bool IsSetEventId();
    public string get_Message();
    public void set_Message(string value);
    internal bool IsSetMessage();
    public string get_Severity();
    public void set_Severity(string value);
    internal bool IsSetSeverity();
    public string get_SourceIdentifier();
    public void set_SourceIdentifier(string value);
    internal bool IsSetSourceIdentifier();
    public SourceType get_SourceType();
    public void set_SourceType(SourceType value);
    internal bool IsSetSourceType();
}
public class Amazon.Redshift.Model.EventCategoriesMap : object {
    private List`1<EventInfoMap> _events;
    private string _sourceType;
    public List`1<EventInfoMap> Events { get; public set; }
    [AWSPropertyAttribute]
public string SourceType { get; public set; }
    public List`1<EventInfoMap> get_Events();
    public void set_Events(List`1<EventInfoMap> value);
    internal bool IsSetEvents();
    public string get_SourceType();
    public void set_SourceType(string value);
    internal bool IsSetSourceType();
}
public class Amazon.Redshift.Model.EventInfoMap : object {
    private List`1<string> _eventCategories;
    private string _eventDescription;
    private string _eventId;
    private string _severity;
    public List`1<string> EventCategories { get; public set; }
    [AWSPropertyAttribute]
public string EventDescription { get; public set; }
    [AWSPropertyAttribute]
public string EventId { get; public set; }
    [AWSPropertyAttribute]
public string Severity { get; public set; }
    public List`1<string> get_EventCategories();
    public void set_EventCategories(List`1<string> value);
    internal bool IsSetEventCategories();
    public string get_EventDescription();
    public void set_EventDescription(string value);
    internal bool IsSetEventDescription();
    public string get_EventId();
    public void set_EventId(string value);
    internal bool IsSetEventId();
    public string get_Severity();
    public void set_Severity(string value);
    internal bool IsSetSeverity();
}
public class Amazon.Redshift.Model.EventSubscription : object {
    private string _customerAwsId;
    private string _custSubscriptionId;
    private Nullable`1<bool> _enabled;
    private List`1<string> _eventCategoriesList;
    private string _severity;
    private string _snsTopicArn;
    private List`1<string> _sourceIdsList;
    private string _sourceType;
    private string _status;
    private Nullable`1<DateTime> _subscriptionCreationTime;
    private List`1<Tag> _tags;
    [AWSPropertyAttribute]
public string CustomerAwsId { get; public set; }
    [AWSPropertyAttribute]
public string CustSubscriptionId { get; public set; }
    public Nullable`1<bool> Enabled { get; public set; }
    public List`1<string> EventCategoriesList { get; public set; }
    [AWSPropertyAttribute]
public string Severity { get; public set; }
    [AWSPropertyAttribute]
public string SnsTopicArn { get; public set; }
    public List`1<string> SourceIdsList { get; public set; }
    [AWSPropertyAttribute]
public string SourceType { get; public set; }
    [AWSPropertyAttribute]
public string Status { get; public set; }
    public Nullable`1<DateTime> SubscriptionCreationTime { get; public set; }
    public List`1<Tag> Tags { get; public set; }
    public string get_CustomerAwsId();
    public void set_CustomerAwsId(string value);
    internal bool IsSetCustomerAwsId();
    public string get_CustSubscriptionId();
    public void set_CustSubscriptionId(string value);
    internal bool IsSetCustSubscriptionId();
    public Nullable`1<bool> get_Enabled();
    public void set_Enabled(Nullable`1<bool> value);
    internal bool IsSetEnabled();
    public List`1<string> get_EventCategoriesList();
    public void set_EventCategoriesList(List`1<string> value);
    internal bool IsSetEventCategoriesList();
    public string get_Severity();
    public void set_Severity(string value);
    internal bool IsSetSeverity();
    public string get_SnsTopicArn();
    public void set_SnsTopicArn(string value);
    internal bool IsSetSnsTopicArn();
    public List`1<string> get_SourceIdsList();
    public void set_SourceIdsList(List`1<string> value);
    internal bool IsSetSourceIdsList();
    public string get_SourceType();
    public void set_SourceType(string value);
    internal bool IsSetSourceType();
    public string get_Status();
    public void set_Status(string value);
    internal bool IsSetStatus();
    public Nullable`1<DateTime> get_SubscriptionCreationTime();
    public void set_SubscriptionCreationTime(Nullable`1<DateTime> value);
    internal bool IsSetSubscriptionCreationTime();
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
}
public class Amazon.Redshift.Model.EventSubscriptionQuotaExceededException : AmazonRedshiftException {
    public EventSubscriptionQuotaExceededException(string message);
    public EventSubscriptionQuotaExceededException(string message, Exception innerException);
    public EventSubscriptionQuotaExceededException(Exception innerException);
    public EventSubscriptionQuotaExceededException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public EventSubscriptionQuotaExceededException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Redshift.Model.FailoverPrimaryComputeRequest : AmazonRedshiftRequest {
    private string _clusterIdentifier;
    [AWSPropertyAttribute]
public string ClusterIdentifier { get; public set; }
    public string get_ClusterIdentifier();
    public void set_ClusterIdentifier(string value);
    internal bool IsSetClusterIdentifier();
}
public class Amazon.Redshift.Model.FailoverPrimaryComputeResponse : AmazonWebServiceResponse {
    private Cluster _cluster;
    public Cluster Cluster { get; public set; }
    public Cluster get_Cluster();
    public void set_Cluster(Cluster value);
    internal bool IsSetCluster();
}
public class Amazon.Redshift.Model.GetClusterCredentialsRequest : AmazonRedshiftRequest {
    private Nullable`1<bool> _autoCreate;
    private string _clusterIdentifier;
    private string _customDomainName;
    private List`1<string> _dbGroups;
    private string _dbName;
    private string _dbUser;
    private Nullable`1<int> _durationSeconds;
    public Nullable`1<bool> AutoCreate { get; public set; }
    [AWSPropertyAttribute]
public string ClusterIdentifier { get; public set; }
    [AWSPropertyAttribute]
public string CustomDomainName { get; public set; }
    public List`1<string> DbGroups { get; public set; }
    [AWSPropertyAttribute]
public string DbName { get; public set; }
    [AWSPropertyAttribute]
public string DbUser { get; public set; }
    public Nullable`1<int> DurationSeconds { get; public set; }
    public Nullable`1<bool> get_AutoCreate();
    public void set_AutoCreate(Nullable`1<bool> value);
    internal bool IsSetAutoCreate();
    public string get_ClusterIdentifier();
    public void set_ClusterIdentifier(string value);
    internal bool IsSetClusterIdentifier();
    public string get_CustomDomainName();
    public void set_CustomDomainName(string value);
    internal bool IsSetCustomDomainName();
    public List`1<string> get_DbGroups();
    public void set_DbGroups(List`1<string> value);
    internal bool IsSetDbGroups();
    public string get_DbName();
    public void set_DbName(string value);
    internal bool IsSetDbName();
    public string get_DbUser();
    public void set_DbUser(string value);
    internal bool IsSetDbUser();
    public Nullable`1<int> get_DurationSeconds();
    public void set_DurationSeconds(Nullable`1<int> value);
    internal bool IsSetDurationSeconds();
}
public class Amazon.Redshift.Model.GetClusterCredentialsResponse : AmazonWebServiceResponse {
    private string _dbPassword;
    private string _dbUser;
    private Nullable`1<DateTime> _expiration;
    [AWSPropertyAttribute]
public string DbPassword { get; public set; }
    [AWSPropertyAttribute]
public string DbUser { get; public set; }
    public Nullable`1<DateTime> Expiration { get; public set; }
    public string get_DbPassword();
    public void set_DbPassword(string value);
    internal bool IsSetDbPassword();
    public string get_DbUser();
    public void set_DbUser(string value);
    internal bool IsSetDbUser();
    public Nullable`1<DateTime> get_Expiration();
    public void set_Expiration(Nullable`1<DateTime> value);
    internal bool IsSetExpiration();
}
public class Amazon.Redshift.Model.GetClusterCredentialsWithIAMRequest : AmazonRedshiftRequest {
    private string _clusterIdentifier;
    private string _customDomainName;
    private string _dbName;
    private Nullable`1<int> _durationSeconds;
    [AWSPropertyAttribute]
public string ClusterIdentifier { get; public set; }
    [AWSPropertyAttribute]
public string CustomDomainName { get; public set; }
    [AWSPropertyAttribute]
public string DbName { get; public set; }
    public Nullable`1<int> DurationSeconds { get; public set; }
    public string get_ClusterIdentifier();
    public void set_ClusterIdentifier(string value);
    internal bool IsSetClusterIdentifier();
    public string get_CustomDomainName();
    public void set_CustomDomainName(string value);
    internal bool IsSetCustomDomainName();
    public string get_DbName();
    public void set_DbName(string value);
    internal bool IsSetDbName();
    public Nullable`1<int> get_DurationSeconds();
    public void set_DurationSeconds(Nullable`1<int> value);
    internal bool IsSetDurationSeconds();
}
public class Amazon.Redshift.Model.GetClusterCredentialsWithIAMResponse : AmazonWebServiceResponse {
    private string _dbPassword;
    private string _dbUser;
    private Nullable`1<DateTime> _expiration;
    private Nullable`1<DateTime> _nextRefreshTime;
    [AWSPropertyAttribute]
public string DbPassword { get; public set; }
    [AWSPropertyAttribute]
public string DbUser { get; public set; }
    public Nullable`1<DateTime> Expiration { get; public set; }
    public Nullable`1<DateTime> NextRefreshTime { get; public set; }
    public string get_DbPassword();
    public void set_DbPassword(string value);
    internal bool IsSetDbPassword();
    public string get_DbUser();
    public void set_DbUser(string value);
    internal bool IsSetDbUser();
    public Nullable`1<DateTime> get_Expiration();
    public void set_Expiration(Nullable`1<DateTime> value);
    internal bool IsSetExpiration();
    public Nullable`1<DateTime> get_NextRefreshTime();
    public void set_NextRefreshTime(Nullable`1<DateTime> value);
    internal bool IsSetNextRefreshTime();
}
internal class Amazon.Redshift.Model.GetReservedNodeExchangeConfigurationOptionsPaginator : object {
    private IAmazonRedshift _client;
    private GetReservedNodeExchangeConfigurationOptionsRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<GetReservedNodeExchangeConfigurationOptionsResponse> Responses { get; }
    public IPaginatedEnumerable`1<ReservedNodeConfigurationOption> ReservedNodeConfigurationOptionList { get; }
    internal GetReservedNodeExchangeConfigurationOptionsPaginator(IAmazonRedshift client, GetReservedNodeExchangeConfigurationOptionsRequest request);
    public sealed virtual IPaginatedEnumerable`1<GetReservedNodeExchangeConfigurationOptionsResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<ReservedNodeConfigurationOption> get_ReservedNodeConfigurationOptionList();
    [AsyncIteratorStateMachineAttribute("Amazon.Redshift.Model.GetReservedNodeExchangeConfigurationOptionsPaginator/<Amazon-Runtime-IPaginator<Amazon-Redshift-Model-GetReservedNodeExchangeConfigurationOptionsResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<GetReservedNodeExchangeConfigurationOptionsResponse> Amazon.Runtime.IPaginator<Amazon.Redshift.Model.GetReservedNodeExchangeConfigurationOptionsResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.Redshift.Model.GetReservedNodeExchangeConfigurationOptionsRequest : AmazonRedshiftRequest {
    private ReservedNodeExchangeActionType _actionType;
    private string _clusterIdentifier;
    private string _marker;
    private Nullable`1<int> _maxRecords;
    private string _snapshotIdentifier;
    [AWSPropertyAttribute]
public ReservedNodeExchangeActionType ActionType { get; public set; }
    [AWSPropertyAttribute]
public string ClusterIdentifier { get; public set; }
    [AWSPropertyAttribute]
public string Marker { get; public set; }
    public Nullable`1<int> MaxRecords { get; public set; }
    [AWSPropertyAttribute]
public string SnapshotIdentifier { get; public set; }
    public ReservedNodeExchangeActionType get_ActionType();
    public void set_ActionType(ReservedNodeExchangeActionType value);
    internal bool IsSetActionType();
    public string get_ClusterIdentifier();
    public void set_ClusterIdentifier(string value);
    internal bool IsSetClusterIdentifier();
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public Nullable`1<int> get_MaxRecords();
    public void set_MaxRecords(Nullable`1<int> value);
    internal bool IsSetMaxRecords();
    public string get_SnapshotIdentifier();
    public void set_SnapshotIdentifier(string value);
    internal bool IsSetSnapshotIdentifier();
}
public class Amazon.Redshift.Model.GetReservedNodeExchangeConfigurationOptionsResponse : AmazonWebServiceResponse {
    private string _marker;
    private List`1<ReservedNodeConfigurationOption> _reservedNodeConfigurationOptionList;
    [AWSPropertyAttribute]
public string Marker { get; public set; }
    public List`1<ReservedNodeConfigurationOption> ReservedNodeConfigurationOptionList { get; public set; }
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public List`1<ReservedNodeConfigurationOption> get_ReservedNodeConfigurationOptionList();
    public void set_ReservedNodeConfigurationOptionList(List`1<ReservedNodeConfigurationOption> value);
    internal bool IsSetReservedNodeConfigurationOptionList();
}
internal class Amazon.Redshift.Model.GetReservedNodeExchangeOfferingsPaginator : object {
    private IAmazonRedshift _client;
    private GetReservedNodeExchangeOfferingsRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<GetReservedNodeExchangeOfferingsResponse> Responses { get; }
    public IPaginatedEnumerable`1<ReservedNodeOffering> ReservedNodeOfferings { get; }
    internal GetReservedNodeExchangeOfferingsPaginator(IAmazonRedshift client, GetReservedNodeExchangeOfferingsRequest request);
    public sealed virtual IPaginatedEnumerable`1<GetReservedNodeExchangeOfferingsResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<ReservedNodeOffering> get_ReservedNodeOfferings();
    [AsyncIteratorStateMachineAttribute("Amazon.Redshift.Model.GetReservedNodeExchangeOfferingsPaginator/<Amazon-Runtime-IPaginator<Amazon-Redshift-Model-GetReservedNodeExchangeOfferingsResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<GetReservedNodeExchangeOfferingsResponse> Amazon.Runtime.IPaginator<Amazon.Redshift.Model.GetReservedNodeExchangeOfferingsResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.Redshift.Model.GetReservedNodeExchangeOfferingsRequest : AmazonRedshiftRequest {
    private string _marker;
    private Nullable`1<int> _maxRecords;
    private string _reservedNodeId;
    [AWSPropertyAttribute]
public string Marker { get; public set; }
    public Nullable`1<int> MaxRecords { get; public set; }
    [AWSPropertyAttribute]
public string ReservedNodeId { get; public set; }
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public Nullable`1<int> get_MaxRecords();
    public void set_MaxRecords(Nullable`1<int> value);
    internal bool IsSetMaxRecords();
    public string get_ReservedNodeId();
    public void set_ReservedNodeId(string value);
    internal bool IsSetReservedNodeId();
}
public class Amazon.Redshift.Model.GetReservedNodeExchangeOfferingsResponse : AmazonWebServiceResponse {
    private string _marker;
    private List`1<ReservedNodeOffering> _reservedNodeOfferings;
    [AWSPropertyAttribute]
public string Marker { get; public set; }
    public List`1<ReservedNodeOffering> ReservedNodeOfferings { get; public set; }
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public List`1<ReservedNodeOffering> get_ReservedNodeOfferings();
    public void set_ReservedNodeOfferings(List`1<ReservedNodeOffering> value);
    internal bool IsSetReservedNodeOfferings();
}
public class Amazon.Redshift.Model.GetResourcePolicyRequest : AmazonRedshiftRequest {
    private string _resourceArn;
    [AWSPropertyAttribute]
public string ResourceArn { get; public set; }
    public string get_ResourceArn();
    public void set_ResourceArn(string value);
    internal bool IsSetResourceArn();
}
public class Amazon.Redshift.Model.GetResourcePolicyResponse : AmazonWebServiceResponse {
    private ResourcePolicy _resourcePolicy;
    public ResourcePolicy ResourcePolicy { get; public set; }
    public ResourcePolicy get_ResourcePolicy();
    public void set_ResourcePolicy(ResourcePolicy value);
    internal bool IsSetResourcePolicy();
}
public class Amazon.Redshift.Model.HsmClientCertificate : object {
    private string _hsmClientCertificateIdentifier;
    private string _hsmClientCertificatePublicKey;
    private List`1<Tag> _tags;
    [AWSPropertyAttribute]
public string HsmClientCertificateIdentifier { get; public set; }
    [AWSPropertyAttribute]
public string HsmClientCertificatePublicKey { get; public set; }
    public List`1<Tag> Tags { get; public set; }
    public string get_HsmClientCertificateIdentifier();
    public void set_HsmClientCertificateIdentifier(string value);
    internal bool IsSetHsmClientCertificateIdentifier();
    public string get_HsmClientCertificatePublicKey();
    public void set_HsmClientCertificatePublicKey(string value);
    internal bool IsSetHsmClientCertificatePublicKey();
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
}
public class Amazon.Redshift.Model.HsmClientCertificateAlreadyExistsException : AmazonRedshiftException {
    public HsmClientCertificateAlreadyExistsException(string message);
    public HsmClientCertificateAlreadyExistsException(string message, Exception innerException);
    public HsmClientCertificateAlreadyExistsException(Exception innerException);
    public HsmClientCertificateAlreadyExistsException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public HsmClientCertificateAlreadyExistsException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Redshift.Model.HsmClientCertificateNotFoundException : AmazonRedshiftException {
    public HsmClientCertificateNotFoundException(string message);
    public HsmClientCertificateNotFoundException(string message, Exception innerException);
    public HsmClientCertificateNotFoundException(Exception innerException);
    public HsmClientCertificateNotFoundException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public HsmClientCertificateNotFoundException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Redshift.Model.HsmClientCertificateQuotaExceededException : AmazonRedshiftException {
    public HsmClientCertificateQuotaExceededException(string message);
    public HsmClientCertificateQuotaExceededException(string message, Exception innerException);
    public HsmClientCertificateQuotaExceededException(Exception innerException);
    public HsmClientCertificateQuotaExceededException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public HsmClientCertificateQuotaExceededException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Redshift.Model.HsmConfiguration : object {
    private string _description;
    private string _hsmConfigurationIdentifier;
    private string _hsmIpAddress;
    private string _hsmPartitionName;
    private List`1<Tag> _tags;
    [AWSPropertyAttribute]
public string Description { get; public set; }
    [AWSPropertyAttribute]
public string HsmConfigurationIdentifier { get; public set; }
    [AWSPropertyAttribute]
public string HsmIpAddress { get; public set; }
    [AWSPropertyAttribute]
public string HsmPartitionName { get; public set; }
    public List`1<Tag> Tags { get; public set; }
    public string get_Description();
    public void set_Description(string value);
    internal bool IsSetDescription();
    public string get_HsmConfigurationIdentifier();
    public void set_HsmConfigurationIdentifier(string value);
    internal bool IsSetHsmConfigurationIdentifier();
    public string get_HsmIpAddress();
    public void set_HsmIpAddress(string value);
    internal bool IsSetHsmIpAddress();
    public string get_HsmPartitionName();
    public void set_HsmPartitionName(string value);
    internal bool IsSetHsmPartitionName();
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
}
public class Amazon.Redshift.Model.HsmConfigurationAlreadyExistsException : AmazonRedshiftException {
    public HsmConfigurationAlreadyExistsException(string message);
    public HsmConfigurationAlreadyExistsException(string message, Exception innerException);
    public HsmConfigurationAlreadyExistsException(Exception innerException);
    public HsmConfigurationAlreadyExistsException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public HsmConfigurationAlreadyExistsException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Redshift.Model.HsmConfigurationNotFoundException : AmazonRedshiftException {
    public HsmConfigurationNotFoundException(string message);
    public HsmConfigurationNotFoundException(string message, Exception innerException);
    public HsmConfigurationNotFoundException(Exception innerException);
    public HsmConfigurationNotFoundException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public HsmConfigurationNotFoundException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Redshift.Model.HsmConfigurationQuotaExceededException : AmazonRedshiftException {
    public HsmConfigurationQuotaExceededException(string message);
    public HsmConfigurationQuotaExceededException(string message, Exception innerException);
    public HsmConfigurationQuotaExceededException(Exception innerException);
    public HsmConfigurationQuotaExceededException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public HsmConfigurationQuotaExceededException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Redshift.Model.HsmStatus : object {
    private string _hsmClientCertificateIdentifier;
    private string _hsmConfigurationIdentifier;
    private string _status;
    [AWSPropertyAttribute]
public string HsmClientCertificateIdentifier { get; public set; }
    [AWSPropertyAttribute]
public string HsmConfigurationIdentifier { get; public set; }
    [AWSPropertyAttribute]
public string Status { get; public set; }
    public string get_HsmClientCertificateIdentifier();
    public void set_HsmClientCertificateIdentifier(string value);
    internal bool IsSetHsmClientCertificateIdentifier();
    public string get_HsmConfigurationIdentifier();
    public void set_HsmConfigurationIdentifier(string value);
    internal bool IsSetHsmConfigurationIdentifier();
    public string get_Status();
    public void set_Status(string value);
    internal bool IsSetStatus();
}
public interface Amazon.Redshift.Model.IDescribeClusterDbRevisionsPaginator {
    public IPaginatedEnumerable`1<DescribeClusterDbRevisionsResponse> Responses { get; }
    public IPaginatedEnumerable`1<ClusterDbRevision> ClusterDbRevisions { get; }
    public abstract virtual IPaginatedEnumerable`1<DescribeClusterDbRevisionsResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<ClusterDbRevision> get_ClusterDbRevisions();
}
public interface Amazon.Redshift.Model.IDescribeClusterParameterGroupsPaginator {
    public IPaginatedEnumerable`1<DescribeClusterParameterGroupsResponse> Responses { get; }
    public IPaginatedEnumerable`1<ClusterParameterGroup> ParameterGroups { get; }
    public abstract virtual IPaginatedEnumerable`1<DescribeClusterParameterGroupsResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<ClusterParameterGroup> get_ParameterGroups();
}
public interface Amazon.Redshift.Model.IDescribeClusterParametersPaginator {
    public IPaginatedEnumerable`1<DescribeClusterParametersResponse> Responses { get; }
    public IPaginatedEnumerable`1<Parameter> Parameters { get; }
    public abstract virtual IPaginatedEnumerable`1<DescribeClusterParametersResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<Parameter> get_Parameters();
}
public interface Amazon.Redshift.Model.IDescribeClusterSecurityGroupsPaginator {
    public IPaginatedEnumerable`1<DescribeClusterSecurityGroupsResponse> Responses { get; }
    public IPaginatedEnumerable`1<ClusterSecurityGroup> ClusterSecurityGroups { get; }
    public abstract virtual IPaginatedEnumerable`1<DescribeClusterSecurityGroupsResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<ClusterSecurityGroup> get_ClusterSecurityGroups();
}
public interface Amazon.Redshift.Model.IDescribeClusterSnapshotsPaginator {
    public IPaginatedEnumerable`1<DescribeClusterSnapshotsResponse> Responses { get; }
    public IPaginatedEnumerable`1<Snapshot> Snapshots { get; }
    public abstract virtual IPaginatedEnumerable`1<DescribeClusterSnapshotsResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<Snapshot> get_Snapshots();
}
public interface Amazon.Redshift.Model.IDescribeClustersPaginator {
    public IPaginatedEnumerable`1<DescribeClustersResponse> Responses { get; }
    public IPaginatedEnumerable`1<Cluster> Clusters { get; }
    public abstract virtual IPaginatedEnumerable`1<DescribeClustersResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<Cluster> get_Clusters();
}
public interface Amazon.Redshift.Model.IDescribeClusterSubnetGroupsPaginator {
    public IPaginatedEnumerable`1<DescribeClusterSubnetGroupsResponse> Responses { get; }
    public IPaginatedEnumerable`1<ClusterSubnetGroup> ClusterSubnetGroups { get; }
    public abstract virtual IPaginatedEnumerable`1<DescribeClusterSubnetGroupsResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<ClusterSubnetGroup> get_ClusterSubnetGroups();
}
public interface Amazon.Redshift.Model.IDescribeClusterTracksPaginator {
    public IPaginatedEnumerable`1<DescribeClusterTracksResponse> Responses { get; }
    public IPaginatedEnumerable`1<MaintenanceTrack> MaintenanceTracks { get; }
    public abstract virtual IPaginatedEnumerable`1<DescribeClusterTracksResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<MaintenanceTrack> get_MaintenanceTracks();
}
public interface Amazon.Redshift.Model.IDescribeClusterVersionsPaginator {
    public IPaginatedEnumerable`1<DescribeClusterVersionsResponse> Responses { get; }
    public IPaginatedEnumerable`1<ClusterVersion> ClusterVersions { get; }
    public abstract virtual IPaginatedEnumerable`1<DescribeClusterVersionsResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<ClusterVersion> get_ClusterVersions();
}
public interface Amazon.Redshift.Model.IDescribeCustomDomainAssociationsPaginator {
    public IPaginatedEnumerable`1<DescribeCustomDomainAssociationsResponse> Responses { get; }
    public IPaginatedEnumerable`1<Association> Associations { get; }
    public abstract virtual IPaginatedEnumerable`1<DescribeCustomDomainAssociationsResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<Association> get_Associations();
}
public interface Amazon.Redshift.Model.IDescribeDataSharesForConsumerPaginator {
    public IPaginatedEnumerable`1<DescribeDataSharesForConsumerResponse> Responses { get; }
    public IPaginatedEnumerable`1<DataShare> DataShares { get; }
    public abstract virtual IPaginatedEnumerable`1<DescribeDataSharesForConsumerResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<DataShare> get_DataShares();
}
public interface Amazon.Redshift.Model.IDescribeDataSharesForProducerPaginator {
    public IPaginatedEnumerable`1<DescribeDataSharesForProducerResponse> Responses { get; }
    public IPaginatedEnumerable`1<DataShare> DataShares { get; }
    public abstract virtual IPaginatedEnumerable`1<DescribeDataSharesForProducerResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<DataShare> get_DataShares();
}
public interface Amazon.Redshift.Model.IDescribeDataSharesPaginator {
    public IPaginatedEnumerable`1<DescribeDataSharesResponse> Responses { get; }
    public IPaginatedEnumerable`1<DataShare> DataShares { get; }
    public abstract virtual IPaginatedEnumerable`1<DescribeDataSharesResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<DataShare> get_DataShares();
}
public interface Amazon.Redshift.Model.IDescribeDefaultClusterParametersPaginator {
    public IPaginatedEnumerable`1<DescribeDefaultClusterParametersResponse> Responses { get; }
    public IPaginatedEnumerable`1<Parameter> Parameters { get; }
    public abstract virtual IPaginatedEnumerable`1<DescribeDefaultClusterParametersResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<Parameter> get_Parameters();
}
public interface Amazon.Redshift.Model.IDescribeEndpointAccessPaginator {
    public IPaginatedEnumerable`1<DescribeEndpointAccessResponse> Responses { get; }
    public IPaginatedEnumerable`1<EndpointAccess> EndpointAccessList { get; }
    public abstract virtual IPaginatedEnumerable`1<DescribeEndpointAccessResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<EndpointAccess> get_EndpointAccessList();
}
public interface Amazon.Redshift.Model.IDescribeEndpointAuthorizationPaginator {
    public IPaginatedEnumerable`1<DescribeEndpointAuthorizationResponse> Responses { get; }
    public IPaginatedEnumerable`1<EndpointAuthorization> EndpointAuthorizationList { get; }
    public abstract virtual IPaginatedEnumerable`1<DescribeEndpointAuthorizationResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<EndpointAuthorization> get_EndpointAuthorizationList();
}
public interface Amazon.Redshift.Model.IDescribeEventsPaginator {
    public IPaginatedEnumerable`1<DescribeEventsResponse> Responses { get; }
    public IPaginatedEnumerable`1<Event> Events { get; }
    public abstract virtual IPaginatedEnumerable`1<DescribeEventsResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<Event> get_Events();
}
public interface Amazon.Redshift.Model.IDescribeEventSubscriptionsPaginator {
    public IPaginatedEnumerable`1<DescribeEventSubscriptionsResponse> Responses { get; }
    public IPaginatedEnumerable`1<EventSubscription> EventSubscriptionsList { get; }
    public abstract virtual IPaginatedEnumerable`1<DescribeEventSubscriptionsResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<EventSubscription> get_EventSubscriptionsList();
}
public interface Amazon.Redshift.Model.IDescribeHsmClientCertificatesPaginator {
    public IPaginatedEnumerable`1<DescribeHsmClientCertificatesResponse> Responses { get; }
    public IPaginatedEnumerable`1<HsmClientCertificate> HsmClientCertificates { get; }
    public abstract virtual IPaginatedEnumerable`1<DescribeHsmClientCertificatesResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<HsmClientCertificate> get_HsmClientCertificates();
}
public interface Amazon.Redshift.Model.IDescribeHsmConfigurationsPaginator {
    public IPaginatedEnumerable`1<DescribeHsmConfigurationsResponse> Responses { get; }
    public IPaginatedEnumerable`1<HsmConfiguration> HsmConfigurations { get; }
    public abstract virtual IPaginatedEnumerable`1<DescribeHsmConfigurationsResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<HsmConfiguration> get_HsmConfigurations();
}
public interface Amazon.Redshift.Model.IDescribeInboundIntegrationsPaginator {
    public IPaginatedEnumerable`1<DescribeInboundIntegrationsResponse> Responses { get; }
    public IPaginatedEnumerable`1<InboundIntegration> InboundIntegrations { get; }
    public abstract virtual IPaginatedEnumerable`1<DescribeInboundIntegrationsResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<InboundIntegration> get_InboundIntegrations();
}
public interface Amazon.Redshift.Model.IDescribeNodeConfigurationOptionsPaginator {
    public IPaginatedEnumerable`1<DescribeNodeConfigurationOptionsResponse> Responses { get; }
    public IPaginatedEnumerable`1<NodeConfigurationOption> NodeConfigurationOptionList { get; }
    public abstract virtual IPaginatedEnumerable`1<DescribeNodeConfigurationOptionsResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<NodeConfigurationOption> get_NodeConfigurationOptionList();
}
public interface Amazon.Redshift.Model.IDescribeOrderableClusterOptionsPaginator {
    public IPaginatedEnumerable`1<DescribeOrderableClusterOptionsResponse> Responses { get; }
    public IPaginatedEnumerable`1<OrderableClusterOption> OrderableClusterOptions { get; }
    public abstract virtual IPaginatedEnumerable`1<DescribeOrderableClusterOptionsResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<OrderableClusterOption> get_OrderableClusterOptions();
}
public interface Amazon.Redshift.Model.IDescribeRedshiftIdcApplicationsPaginator {
    public IPaginatedEnumerable`1<DescribeRedshiftIdcApplicationsResponse> Responses { get; }
    public IPaginatedEnumerable`1<RedshiftIdcApplication> RedshiftIdcApplications { get; }
    public abstract virtual IPaginatedEnumerable`1<DescribeRedshiftIdcApplicationsResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<RedshiftIdcApplication> get_RedshiftIdcApplications();
}
public interface Amazon.Redshift.Model.IDescribeReservedNodeExchangeStatusPaginator {
    public IPaginatedEnumerable`1<DescribeReservedNodeExchangeStatusResponse> Responses { get; }
    public IPaginatedEnumerable`1<ReservedNodeExchangeStatus> ReservedNodeExchangeStatusDetails { get; }
    public abstract virtual IPaginatedEnumerable`1<DescribeReservedNodeExchangeStatusResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<ReservedNodeExchangeStatus> get_ReservedNodeExchangeStatusDetails();
}
public interface Amazon.Redshift.Model.IDescribeReservedNodeOfferingsPaginator {
    public IPaginatedEnumerable`1<DescribeReservedNodeOfferingsResponse> Responses { get; }
    public IPaginatedEnumerable`1<ReservedNodeOffering> ReservedNodeOfferings { get; }
    public abstract virtual IPaginatedEnumerable`1<DescribeReservedNodeOfferingsResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<ReservedNodeOffering> get_ReservedNodeOfferings();
}
public interface Amazon.Redshift.Model.IDescribeReservedNodesPaginator {
    public IPaginatedEnumerable`1<DescribeReservedNodesResponse> Responses { get; }
    public IPaginatedEnumerable`1<ReservedNode> ReservedNodes { get; }
    public abstract virtual IPaginatedEnumerable`1<DescribeReservedNodesResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<ReservedNode> get_ReservedNodes();
}
public interface Amazon.Redshift.Model.IDescribeScheduledActionsPaginator {
    public IPaginatedEnumerable`1<DescribeScheduledActionsResponse> Responses { get; }
    public IPaginatedEnumerable`1<ScheduledAction> ScheduledActions { get; }
    public abstract virtual IPaginatedEnumerable`1<DescribeScheduledActionsResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<ScheduledAction> get_ScheduledActions();
}
public interface Amazon.Redshift.Model.IDescribeSnapshotCopyGrantsPaginator {
    public IPaginatedEnumerable`1<DescribeSnapshotCopyGrantsResponse> Responses { get; }
    public IPaginatedEnumerable`1<SnapshotCopyGrant> SnapshotCopyGrants { get; }
    public abstract virtual IPaginatedEnumerable`1<DescribeSnapshotCopyGrantsResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<SnapshotCopyGrant> get_SnapshotCopyGrants();
}
public interface Amazon.Redshift.Model.IDescribeSnapshotSchedulesPaginator {
    public IPaginatedEnumerable`1<DescribeSnapshotSchedulesResponse> Responses { get; }
    public IPaginatedEnumerable`1<SnapshotSchedule> SnapshotSchedules { get; }
    public abstract virtual IPaginatedEnumerable`1<DescribeSnapshotSchedulesResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<SnapshotSchedule> get_SnapshotSchedules();
}
public interface Amazon.Redshift.Model.IDescribeTableRestoreStatusPaginator {
    public IPaginatedEnumerable`1<DescribeTableRestoreStatusResponse> Responses { get; }
    public IPaginatedEnumerable`1<TableRestoreStatus> TableRestoreStatusDetails { get; }
    public abstract virtual IPaginatedEnumerable`1<DescribeTableRestoreStatusResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<TableRestoreStatus> get_TableRestoreStatusDetails();
}
public interface Amazon.Redshift.Model.IDescribeTagsPaginator {
    public IPaginatedEnumerable`1<DescribeTagsResponse> Responses { get; }
    public IPaginatedEnumerable`1<TaggedResource> TaggedResources { get; }
    public abstract virtual IPaginatedEnumerable`1<DescribeTagsResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<TaggedResource> get_TaggedResources();
}
public interface Amazon.Redshift.Model.IDescribeUsageLimitsPaginator {
    public IPaginatedEnumerable`1<DescribeUsageLimitsResponse> Responses { get; }
    public IPaginatedEnumerable`1<UsageLimit> UsageLimits { get; }
    public abstract virtual IPaginatedEnumerable`1<DescribeUsageLimitsResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<UsageLimit> get_UsageLimits();
}
public interface Amazon.Redshift.Model.IGetReservedNodeExchangeConfigurationOptionsPaginator {
    public IPaginatedEnumerable`1<GetReservedNodeExchangeConfigurationOptionsResponse> Responses { get; }
    public IPaginatedEnumerable`1<ReservedNodeConfigurationOption> ReservedNodeConfigurationOptionList { get; }
    public abstract virtual IPaginatedEnumerable`1<GetReservedNodeExchangeConfigurationOptionsResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<ReservedNodeConfigurationOption> get_ReservedNodeConfigurationOptionList();
}
public interface Amazon.Redshift.Model.IGetReservedNodeExchangeOfferingsPaginator {
    public IPaginatedEnumerable`1<GetReservedNodeExchangeOfferingsResponse> Responses { get; }
    public IPaginatedEnumerable`1<ReservedNodeOffering> ReservedNodeOfferings { get; }
    public abstract virtual IPaginatedEnumerable`1<GetReservedNodeExchangeOfferingsResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<ReservedNodeOffering> get_ReservedNodeOfferings();
}
public interface Amazon.Redshift.Model.IListRecommendationsPaginator {
    public IPaginatedEnumerable`1<ListRecommendationsResponse> Responses { get; }
    public IPaginatedEnumerable`1<Recommendation> Recommendations { get; }
    public abstract virtual IPaginatedEnumerable`1<ListRecommendationsResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<Recommendation> get_Recommendations();
}
public class Amazon.Redshift.Model.InboundIntegration : object {
    private Nullable`1<DateTime> _createTime;
    private List`1<IntegrationError> _errors;
    private string _integrationArn;
    private string _sourceArn;
    private ZeroETLIntegrationStatus _status;
    private string _targetArn;
    public Nullable`1<DateTime> CreateTime { get; public set; }
    public List`1<IntegrationError> Errors { get; public set; }
    [AWSPropertyAttribute]
public string IntegrationArn { get; public set; }
    [AWSPropertyAttribute]
public string SourceArn { get; public set; }
    public ZeroETLIntegrationStatus Status { get; public set; }
    [AWSPropertyAttribute]
public string TargetArn { get; public set; }
    public Nullable`1<DateTime> get_CreateTime();
    public void set_CreateTime(Nullable`1<DateTime> value);
    internal bool IsSetCreateTime();
    public List`1<IntegrationError> get_Errors();
    public void set_Errors(List`1<IntegrationError> value);
    internal bool IsSetErrors();
    public string get_IntegrationArn();
    public void set_IntegrationArn(string value);
    internal bool IsSetIntegrationArn();
    public string get_SourceArn();
    public void set_SourceArn(string value);
    internal bool IsSetSourceArn();
    public ZeroETLIntegrationStatus get_Status();
    public void set_Status(ZeroETLIntegrationStatus value);
    internal bool IsSetStatus();
    public string get_TargetArn();
    public void set_TargetArn(string value);
    internal bool IsSetTargetArn();
}
public class Amazon.Redshift.Model.IncompatibleOrderableOptionsException : AmazonRedshiftException {
    public IncompatibleOrderableOptionsException(string message);
    public IncompatibleOrderableOptionsException(string message, Exception innerException);
    public IncompatibleOrderableOptionsException(Exception innerException);
    public IncompatibleOrderableOptionsException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public IncompatibleOrderableOptionsException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Redshift.Model.InProgressTableRestoreQuotaExceededException : AmazonRedshiftException {
    public InProgressTableRestoreQuotaExceededException(string message);
    public InProgressTableRestoreQuotaExceededException(string message, Exception innerException);
    public InProgressTableRestoreQuotaExceededException(Exception innerException);
    public InProgressTableRestoreQuotaExceededException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public InProgressTableRestoreQuotaExceededException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Redshift.Model.InsufficientClusterCapacityException : AmazonRedshiftException {
    public InsufficientClusterCapacityException(string message);
    public InsufficientClusterCapacityException(string message, Exception innerException);
    public InsufficientClusterCapacityException(Exception innerException);
    public InsufficientClusterCapacityException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public InsufficientClusterCapacityException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Redshift.Model.InsufficientS3BucketPolicyException : AmazonRedshiftException {
    public InsufficientS3BucketPolicyException(string message);
    public InsufficientS3BucketPolicyException(string message, Exception innerException);
    public InsufficientS3BucketPolicyException(Exception innerException);
    public InsufficientS3BucketPolicyException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public InsufficientS3BucketPolicyException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Redshift.Model.IntegrationError : object {
    private string _errorCode;
    private string _errorMessage;
    [AWSPropertyAttribute]
public string ErrorCode { get; public set; }
    [AWSPropertyAttribute]
public string ErrorMessage { get; public set; }
    public string get_ErrorCode();
    public void set_ErrorCode(string value);
    internal bool IsSetErrorCode();
    public string get_ErrorMessage();
    public void set_ErrorMessage(string value);
    internal bool IsSetErrorMessage();
}
public class Amazon.Redshift.Model.IntegrationNotFoundException : AmazonRedshiftException {
    public IntegrationNotFoundException(string message);
    public IntegrationNotFoundException(string message, Exception innerException);
    public IntegrationNotFoundException(Exception innerException);
    public IntegrationNotFoundException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public IntegrationNotFoundException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.AcceptReservedNodeExchangeRequestMarshaller : object {
    private static AcceptReservedNodeExchangeRequestMarshaller _instance;
    public static AcceptReservedNodeExchangeRequestMarshaller Instance { get; }
    private static AcceptReservedNodeExchangeRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(AcceptReservedNodeExchangeRequest publicRequest);
    internal static AcceptReservedNodeExchangeRequestMarshaller GetInstance();
    public static AcceptReservedNodeExchangeRequestMarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.AcceptReservedNodeExchangeResponseUnmarshaller : XmlResponseUnmarshaller {
    private static AcceptReservedNodeExchangeResponseUnmarshaller _instance;
    public static AcceptReservedNodeExchangeResponseUnmarshaller Instance { get; }
    private static AcceptReservedNodeExchangeResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, AcceptReservedNodeExchangeResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static AcceptReservedNodeExchangeResponseUnmarshaller GetInstance();
    public static AcceptReservedNodeExchangeResponseUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.AccessToClusterDeniedExceptionUnmarshaller : object {
    private static AccessToClusterDeniedExceptionUnmarshaller _instance;
    public static AccessToClusterDeniedExceptionUnmarshaller Instance { get; }
    private static AccessToClusterDeniedExceptionUnmarshaller();
    public sealed virtual AccessToClusterDeniedException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual AccessToClusterDeniedException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static AccessToClusterDeniedExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.AccessToSnapshotDeniedExceptionUnmarshaller : object {
    private static AccessToSnapshotDeniedExceptionUnmarshaller _instance;
    public static AccessToSnapshotDeniedExceptionUnmarshaller Instance { get; }
    private static AccessToSnapshotDeniedExceptionUnmarshaller();
    public sealed virtual AccessToSnapshotDeniedException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual AccessToSnapshotDeniedException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static AccessToSnapshotDeniedExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.AccountAttributeUnmarshaller : object {
    private static AccountAttributeUnmarshaller _instance;
    public static AccountAttributeUnmarshaller Instance { get; }
    private static AccountAttributeUnmarshaller();
    public sealed virtual AccountAttribute Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual AccountAttribute Unmarshall(JsonUnmarshallerContext context);
    public static AccountAttributeUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.AccountWithRestoreAccessUnmarshaller : object {
    private static AccountWithRestoreAccessUnmarshaller _instance;
    public static AccountWithRestoreAccessUnmarshaller Instance { get; }
    private static AccountWithRestoreAccessUnmarshaller();
    public sealed virtual AccountWithRestoreAccess Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual AccountWithRestoreAccess Unmarshall(JsonUnmarshallerContext context);
    public static AccountWithRestoreAccessUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.AddPartnerRequestMarshaller : object {
    private static AddPartnerRequestMarshaller _instance;
    public static AddPartnerRequestMarshaller Instance { get; }
    private static AddPartnerRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(AddPartnerRequest publicRequest);
    internal static AddPartnerRequestMarshaller GetInstance();
    public static AddPartnerRequestMarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.AddPartnerResponseUnmarshaller : XmlResponseUnmarshaller {
    private static AddPartnerResponseUnmarshaller _instance;
    public static AddPartnerResponseUnmarshaller Instance { get; }
    private static AddPartnerResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, AddPartnerResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static AddPartnerResponseUnmarshaller GetInstance();
    public static AddPartnerResponseUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.AquaConfigurationUnmarshaller : object {
    private static AquaConfigurationUnmarshaller _instance;
    public static AquaConfigurationUnmarshaller Instance { get; }
    private static AquaConfigurationUnmarshaller();
    public sealed virtual AquaConfiguration Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual AquaConfiguration Unmarshall(JsonUnmarshallerContext context);
    public static AquaConfigurationUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.AssociateDataShareConsumerRequestMarshaller : object {
    private static AssociateDataShareConsumerRequestMarshaller _instance;
    public static AssociateDataShareConsumerRequestMarshaller Instance { get; }
    private static AssociateDataShareConsumerRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(AssociateDataShareConsumerRequest publicRequest);
    internal static AssociateDataShareConsumerRequestMarshaller GetInstance();
    public static AssociateDataShareConsumerRequestMarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.AssociateDataShareConsumerResponseUnmarshaller : XmlResponseUnmarshaller {
    private static AssociateDataShareConsumerResponseUnmarshaller _instance;
    public static AssociateDataShareConsumerResponseUnmarshaller Instance { get; }
    private static AssociateDataShareConsumerResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, AssociateDataShareConsumerResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static AssociateDataShareConsumerResponseUnmarshaller GetInstance();
    public static AssociateDataShareConsumerResponseUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.AssociationUnmarshaller : object {
    private static AssociationUnmarshaller _instance;
    public static AssociationUnmarshaller Instance { get; }
    private static AssociationUnmarshaller();
    public sealed virtual Association Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual Association Unmarshall(JsonUnmarshallerContext context);
    public static AssociationUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.AttributeValueTargetUnmarshaller : object {
    private static AttributeValueTargetUnmarshaller _instance;
    public static AttributeValueTargetUnmarshaller Instance { get; }
    private static AttributeValueTargetUnmarshaller();
    public sealed virtual AttributeValueTarget Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual AttributeValueTarget Unmarshall(JsonUnmarshallerContext context);
    public static AttributeValueTargetUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.AuthenticationProfileAlreadyExistsExceptionUnmarshaller : object {
    private static AuthenticationProfileAlreadyExistsExceptionUnmarshaller _instance;
    public static AuthenticationProfileAlreadyExistsExceptionUnmarshaller Instance { get; }
    private static AuthenticationProfileAlreadyExistsExceptionUnmarshaller();
    public sealed virtual AuthenticationProfileAlreadyExistsException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual AuthenticationProfileAlreadyExistsException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static AuthenticationProfileAlreadyExistsExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.AuthenticationProfileNotFoundExceptionUnmarshaller : object {
    private static AuthenticationProfileNotFoundExceptionUnmarshaller _instance;
    public static AuthenticationProfileNotFoundExceptionUnmarshaller Instance { get; }
    private static AuthenticationProfileNotFoundExceptionUnmarshaller();
    public sealed virtual AuthenticationProfileNotFoundException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual AuthenticationProfileNotFoundException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static AuthenticationProfileNotFoundExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.AuthenticationProfileQuotaExceededExceptionUnmarshaller : object {
    private static AuthenticationProfileQuotaExceededExceptionUnmarshaller _instance;
    public static AuthenticationProfileQuotaExceededExceptionUnmarshaller Instance { get; }
    private static AuthenticationProfileQuotaExceededExceptionUnmarshaller();
    public sealed virtual AuthenticationProfileQuotaExceededException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual AuthenticationProfileQuotaExceededException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static AuthenticationProfileQuotaExceededExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.AuthenticationProfileUnmarshaller : object {
    private static AuthenticationProfileUnmarshaller _instance;
    public static AuthenticationProfileUnmarshaller Instance { get; }
    private static AuthenticationProfileUnmarshaller();
    public sealed virtual AuthenticationProfile Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual AuthenticationProfile Unmarshall(JsonUnmarshallerContext context);
    public static AuthenticationProfileUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.AuthorizationAlreadyExistsExceptionUnmarshaller : object {
    private static AuthorizationAlreadyExistsExceptionUnmarshaller _instance;
    public static AuthorizationAlreadyExistsExceptionUnmarshaller Instance { get; }
    private static AuthorizationAlreadyExistsExceptionUnmarshaller();
    public sealed virtual AuthorizationAlreadyExistsException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual AuthorizationAlreadyExistsException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static AuthorizationAlreadyExistsExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.AuthorizationNotFoundExceptionUnmarshaller : object {
    private static AuthorizationNotFoundExceptionUnmarshaller _instance;
    public static AuthorizationNotFoundExceptionUnmarshaller Instance { get; }
    private static AuthorizationNotFoundExceptionUnmarshaller();
    public sealed virtual AuthorizationNotFoundException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual AuthorizationNotFoundException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static AuthorizationNotFoundExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.AuthorizationQuotaExceededExceptionUnmarshaller : object {
    private static AuthorizationQuotaExceededExceptionUnmarshaller _instance;
    public static AuthorizationQuotaExceededExceptionUnmarshaller Instance { get; }
    private static AuthorizationQuotaExceededExceptionUnmarshaller();
    public sealed virtual AuthorizationQuotaExceededException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual AuthorizationQuotaExceededException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static AuthorizationQuotaExceededExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.AuthorizeClusterSecurityGroupIngressRequestMarshaller : object {
    private static AuthorizeClusterSecurityGroupIngressRequestMarshaller _instance;
    public static AuthorizeClusterSecurityGroupIngressRequestMarshaller Instance { get; }
    private static AuthorizeClusterSecurityGroupIngressRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(AuthorizeClusterSecurityGroupIngressRequest publicRequest);
    internal static AuthorizeClusterSecurityGroupIngressRequestMarshaller GetInstance();
    public static AuthorizeClusterSecurityGroupIngressRequestMarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.AuthorizeClusterSecurityGroupIngressResponseUnmarshaller : XmlResponseUnmarshaller {
    private static AuthorizeClusterSecurityGroupIngressResponseUnmarshaller _instance;
    public static AuthorizeClusterSecurityGroupIngressResponseUnmarshaller Instance { get; }
    private static AuthorizeClusterSecurityGroupIngressResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, AuthorizeClusterSecurityGroupIngressResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static AuthorizeClusterSecurityGroupIngressResponseUnmarshaller GetInstance();
    public static AuthorizeClusterSecurityGroupIngressResponseUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.AuthorizeDataShareRequestMarshaller : object {
    private static AuthorizeDataShareRequestMarshaller _instance;
    public static AuthorizeDataShareRequestMarshaller Instance { get; }
    private static AuthorizeDataShareRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(AuthorizeDataShareRequest publicRequest);
    internal static AuthorizeDataShareRequestMarshaller GetInstance();
    public static AuthorizeDataShareRequestMarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.AuthorizeDataShareResponseUnmarshaller : XmlResponseUnmarshaller {
    private static AuthorizeDataShareResponseUnmarshaller _instance;
    public static AuthorizeDataShareResponseUnmarshaller Instance { get; }
    private static AuthorizeDataShareResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, AuthorizeDataShareResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static AuthorizeDataShareResponseUnmarshaller GetInstance();
    public static AuthorizeDataShareResponseUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.AuthorizedTokenIssuerUnmarshaller : object {
    private static AuthorizedTokenIssuerUnmarshaller _instance;
    public static AuthorizedTokenIssuerUnmarshaller Instance { get; }
    private static AuthorizedTokenIssuerUnmarshaller();
    public sealed virtual AuthorizedTokenIssuer Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual AuthorizedTokenIssuer Unmarshall(JsonUnmarshallerContext context);
    public static AuthorizedTokenIssuerUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.AuthorizeEndpointAccessRequestMarshaller : object {
    private static AuthorizeEndpointAccessRequestMarshaller _instance;
    public static AuthorizeEndpointAccessRequestMarshaller Instance { get; }
    private static AuthorizeEndpointAccessRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(AuthorizeEndpointAccessRequest publicRequest);
    internal static AuthorizeEndpointAccessRequestMarshaller GetInstance();
    public static AuthorizeEndpointAccessRequestMarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.AuthorizeEndpointAccessResponseUnmarshaller : XmlResponseUnmarshaller {
    private static AuthorizeEndpointAccessResponseUnmarshaller _instance;
    public static AuthorizeEndpointAccessResponseUnmarshaller Instance { get; }
    private static AuthorizeEndpointAccessResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, AuthorizeEndpointAccessResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static AuthorizeEndpointAccessResponseUnmarshaller GetInstance();
    public static AuthorizeEndpointAccessResponseUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.AuthorizeSnapshotAccessRequestMarshaller : object {
    private static AuthorizeSnapshotAccessRequestMarshaller _instance;
    public static AuthorizeSnapshotAccessRequestMarshaller Instance { get; }
    private static AuthorizeSnapshotAccessRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(AuthorizeSnapshotAccessRequest publicRequest);
    internal static AuthorizeSnapshotAccessRequestMarshaller GetInstance();
    public static AuthorizeSnapshotAccessRequestMarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.AuthorizeSnapshotAccessResponseUnmarshaller : XmlResponseUnmarshaller {
    private static AuthorizeSnapshotAccessResponseUnmarshaller _instance;
    public static AuthorizeSnapshotAccessResponseUnmarshaller Instance { get; }
    private static AuthorizeSnapshotAccessResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, AuthorizeSnapshotAccessResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static AuthorizeSnapshotAccessResponseUnmarshaller GetInstance();
    public static AuthorizeSnapshotAccessResponseUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.AvailabilityZoneUnmarshaller : object {
    private static AvailabilityZoneUnmarshaller _instance;
    public static AvailabilityZoneUnmarshaller Instance { get; }
    private static AvailabilityZoneUnmarshaller();
    public sealed virtual AvailabilityZone Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual AvailabilityZone Unmarshall(JsonUnmarshallerContext context);
    public static AvailabilityZoneUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.BatchDeleteClusterSnapshotsRequestMarshaller : object {
    private static BatchDeleteClusterSnapshotsRequestMarshaller _instance;
    public static BatchDeleteClusterSnapshotsRequestMarshaller Instance { get; }
    private static BatchDeleteClusterSnapshotsRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(BatchDeleteClusterSnapshotsRequest publicRequest);
    internal static BatchDeleteClusterSnapshotsRequestMarshaller GetInstance();
    public static BatchDeleteClusterSnapshotsRequestMarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.BatchDeleteClusterSnapshotsResponseUnmarshaller : XmlResponseUnmarshaller {
    private static BatchDeleteClusterSnapshotsResponseUnmarshaller _instance;
    public static BatchDeleteClusterSnapshotsResponseUnmarshaller Instance { get; }
    private static BatchDeleteClusterSnapshotsResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, BatchDeleteClusterSnapshotsResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static BatchDeleteClusterSnapshotsResponseUnmarshaller GetInstance();
    public static BatchDeleteClusterSnapshotsResponseUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.BatchDeleteRequestSizeExceededExceptionUnmarshaller : object {
    private static BatchDeleteRequestSizeExceededExceptionUnmarshaller _instance;
    public static BatchDeleteRequestSizeExceededExceptionUnmarshaller Instance { get; }
    private static BatchDeleteRequestSizeExceededExceptionUnmarshaller();
    public sealed virtual BatchDeleteRequestSizeExceededException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual BatchDeleteRequestSizeExceededException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static BatchDeleteRequestSizeExceededExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.BatchModifyClusterSnapshotsLimitExceededExceptionUnmarshaller : object {
    private static BatchModifyClusterSnapshotsLimitExceededExceptionUnmarshaller _instance;
    public static BatchModifyClusterSnapshotsLimitExceededExceptionUnmarshaller Instance { get; }
    private static BatchModifyClusterSnapshotsLimitExceededExceptionUnmarshaller();
    public sealed virtual BatchModifyClusterSnapshotsLimitExceededException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual BatchModifyClusterSnapshotsLimitExceededException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static BatchModifyClusterSnapshotsLimitExceededExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.BatchModifyClusterSnapshotsRequestMarshaller : object {
    private static BatchModifyClusterSnapshotsRequestMarshaller _instance;
    public static BatchModifyClusterSnapshotsRequestMarshaller Instance { get; }
    private static BatchModifyClusterSnapshotsRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(BatchModifyClusterSnapshotsRequest publicRequest);
    internal static BatchModifyClusterSnapshotsRequestMarshaller GetInstance();
    public static BatchModifyClusterSnapshotsRequestMarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.BatchModifyClusterSnapshotsResponseUnmarshaller : XmlResponseUnmarshaller {
    private static BatchModifyClusterSnapshotsResponseUnmarshaller _instance;
    public static BatchModifyClusterSnapshotsResponseUnmarshaller Instance { get; }
    private static BatchModifyClusterSnapshotsResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, BatchModifyClusterSnapshotsResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static BatchModifyClusterSnapshotsResponseUnmarshaller GetInstance();
    public static BatchModifyClusterSnapshotsResponseUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.BucketNotFoundExceptionUnmarshaller : object {
    private static BucketNotFoundExceptionUnmarshaller _instance;
    public static BucketNotFoundExceptionUnmarshaller Instance { get; }
    private static BucketNotFoundExceptionUnmarshaller();
    public sealed virtual BucketNotFoundException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual BucketNotFoundException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static BucketNotFoundExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.CancelResizeRequestMarshaller : object {
    private static CancelResizeRequestMarshaller _instance;
    public static CancelResizeRequestMarshaller Instance { get; }
    private static CancelResizeRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(CancelResizeRequest publicRequest);
    internal static CancelResizeRequestMarshaller GetInstance();
    public static CancelResizeRequestMarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.CancelResizeResponseUnmarshaller : XmlResponseUnmarshaller {
    private static CancelResizeResponseUnmarshaller _instance;
    public static CancelResizeResponseUnmarshaller Instance { get; }
    private static CancelResizeResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, CancelResizeResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static CancelResizeResponseUnmarshaller GetInstance();
    public static CancelResizeResponseUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.CertificateAssociationUnmarshaller : object {
    private static CertificateAssociationUnmarshaller _instance;
    public static CertificateAssociationUnmarshaller Instance { get; }
    private static CertificateAssociationUnmarshaller();
    public sealed virtual CertificateAssociation Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual CertificateAssociation Unmarshall(JsonUnmarshallerContext context);
    public static CertificateAssociationUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.ClusterAlreadyExistsExceptionUnmarshaller : object {
    private static ClusterAlreadyExistsExceptionUnmarshaller _instance;
    public static ClusterAlreadyExistsExceptionUnmarshaller Instance { get; }
    private static ClusterAlreadyExistsExceptionUnmarshaller();
    public sealed virtual ClusterAlreadyExistsException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ClusterAlreadyExistsException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static ClusterAlreadyExistsExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.ClusterAssociatedToScheduleUnmarshaller : object {
    private static ClusterAssociatedToScheduleUnmarshaller _instance;
    public static ClusterAssociatedToScheduleUnmarshaller Instance { get; }
    private static ClusterAssociatedToScheduleUnmarshaller();
    public sealed virtual ClusterAssociatedToSchedule Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ClusterAssociatedToSchedule Unmarshall(JsonUnmarshallerContext context);
    public static ClusterAssociatedToScheduleUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.ClusterDbRevisionUnmarshaller : object {
    private static ClusterDbRevisionUnmarshaller _instance;
    public static ClusterDbRevisionUnmarshaller Instance { get; }
    private static ClusterDbRevisionUnmarshaller();
    public sealed virtual ClusterDbRevision Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ClusterDbRevision Unmarshall(JsonUnmarshallerContext context);
    public static ClusterDbRevisionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.ClusterIamRoleUnmarshaller : object {
    private static ClusterIamRoleUnmarshaller _instance;
    public static ClusterIamRoleUnmarshaller Instance { get; }
    private static ClusterIamRoleUnmarshaller();
    public sealed virtual ClusterIamRole Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ClusterIamRole Unmarshall(JsonUnmarshallerContext context);
    public static ClusterIamRoleUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.ClusterNodeUnmarshaller : object {
    private static ClusterNodeUnmarshaller _instance;
    public static ClusterNodeUnmarshaller Instance { get; }
    private static ClusterNodeUnmarshaller();
    public sealed virtual ClusterNode Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ClusterNode Unmarshall(JsonUnmarshallerContext context);
    public static ClusterNodeUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.ClusterNotFoundExceptionUnmarshaller : object {
    private static ClusterNotFoundExceptionUnmarshaller _instance;
    public static ClusterNotFoundExceptionUnmarshaller Instance { get; }
    private static ClusterNotFoundExceptionUnmarshaller();
    public sealed virtual ClusterNotFoundException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ClusterNotFoundException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static ClusterNotFoundExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.ClusterOnLatestRevisionExceptionUnmarshaller : object {
    private static ClusterOnLatestRevisionExceptionUnmarshaller _instance;
    public static ClusterOnLatestRevisionExceptionUnmarshaller Instance { get; }
    private static ClusterOnLatestRevisionExceptionUnmarshaller();
    public sealed virtual ClusterOnLatestRevisionException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ClusterOnLatestRevisionException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static ClusterOnLatestRevisionExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.ClusterParameterGroupAlreadyExistsExceptionUnmarshaller : object {
    private static ClusterParameterGroupAlreadyExistsExceptionUnmarshaller _instance;
    public static ClusterParameterGroupAlreadyExistsExceptionUnmarshaller Instance { get; }
    private static ClusterParameterGroupAlreadyExistsExceptionUnmarshaller();
    public sealed virtual ClusterParameterGroupAlreadyExistsException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ClusterParameterGroupAlreadyExistsException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static ClusterParameterGroupAlreadyExistsExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.ClusterParameterGroupNotFoundExceptionUnmarshaller : object {
    private static ClusterParameterGroupNotFoundExceptionUnmarshaller _instance;
    public static ClusterParameterGroupNotFoundExceptionUnmarshaller Instance { get; }
    private static ClusterParameterGroupNotFoundExceptionUnmarshaller();
    public sealed virtual ClusterParameterGroupNotFoundException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ClusterParameterGroupNotFoundException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static ClusterParameterGroupNotFoundExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.ClusterParameterGroupQuotaExceededExceptionUnmarshaller : object {
    private static ClusterParameterGroupQuotaExceededExceptionUnmarshaller _instance;
    public static ClusterParameterGroupQuotaExceededExceptionUnmarshaller Instance { get; }
    private static ClusterParameterGroupQuotaExceededExceptionUnmarshaller();
    public sealed virtual ClusterParameterGroupQuotaExceededException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ClusterParameterGroupQuotaExceededException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static ClusterParameterGroupQuotaExceededExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.ClusterParameterGroupStatusUnmarshaller : object {
    private static ClusterParameterGroupStatusUnmarshaller _instance;
    public static ClusterParameterGroupStatusUnmarshaller Instance { get; }
    private static ClusterParameterGroupStatusUnmarshaller();
    public sealed virtual ClusterParameterGroupStatus Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ClusterParameterGroupStatus Unmarshall(JsonUnmarshallerContext context);
    public static ClusterParameterGroupStatusUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.ClusterParameterGroupUnmarshaller : object {
    private static ClusterParameterGroupUnmarshaller _instance;
    public static ClusterParameterGroupUnmarshaller Instance { get; }
    private static ClusterParameterGroupUnmarshaller();
    public sealed virtual ClusterParameterGroup Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ClusterParameterGroup Unmarshall(JsonUnmarshallerContext context);
    public static ClusterParameterGroupUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.ClusterParameterStatusUnmarshaller : object {
    private static ClusterParameterStatusUnmarshaller _instance;
    public static ClusterParameterStatusUnmarshaller Instance { get; }
    private static ClusterParameterStatusUnmarshaller();
    public sealed virtual ClusterParameterStatus Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ClusterParameterStatus Unmarshall(JsonUnmarshallerContext context);
    public static ClusterParameterStatusUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.ClusterQuotaExceededExceptionUnmarshaller : object {
    private static ClusterQuotaExceededExceptionUnmarshaller _instance;
    public static ClusterQuotaExceededExceptionUnmarshaller Instance { get; }
    private static ClusterQuotaExceededExceptionUnmarshaller();
    public sealed virtual ClusterQuotaExceededException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ClusterQuotaExceededException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static ClusterQuotaExceededExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.ClusterSecurityGroupAlreadyExistsExceptionUnmarshaller : object {
    private static ClusterSecurityGroupAlreadyExistsExceptionUnmarshaller _instance;
    public static ClusterSecurityGroupAlreadyExistsExceptionUnmarshaller Instance { get; }
    private static ClusterSecurityGroupAlreadyExistsExceptionUnmarshaller();
    public sealed virtual ClusterSecurityGroupAlreadyExistsException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ClusterSecurityGroupAlreadyExistsException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static ClusterSecurityGroupAlreadyExistsExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.ClusterSecurityGroupMembershipUnmarshaller : object {
    private static ClusterSecurityGroupMembershipUnmarshaller _instance;
    public static ClusterSecurityGroupMembershipUnmarshaller Instance { get; }
    private static ClusterSecurityGroupMembershipUnmarshaller();
    public sealed virtual ClusterSecurityGroupMembership Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ClusterSecurityGroupMembership Unmarshall(JsonUnmarshallerContext context);
    public static ClusterSecurityGroupMembershipUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.ClusterSecurityGroupNotFoundExceptionUnmarshaller : object {
    private static ClusterSecurityGroupNotFoundExceptionUnmarshaller _instance;
    public static ClusterSecurityGroupNotFoundExceptionUnmarshaller Instance { get; }
    private static ClusterSecurityGroupNotFoundExceptionUnmarshaller();
    public sealed virtual ClusterSecurityGroupNotFoundException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ClusterSecurityGroupNotFoundException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static ClusterSecurityGroupNotFoundExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.ClusterSecurityGroupQuotaExceededExceptionUnmarshaller : object {
    private static ClusterSecurityGroupQuotaExceededExceptionUnmarshaller _instance;
    public static ClusterSecurityGroupQuotaExceededExceptionUnmarshaller Instance { get; }
    private static ClusterSecurityGroupQuotaExceededExceptionUnmarshaller();
    public sealed virtual ClusterSecurityGroupQuotaExceededException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ClusterSecurityGroupQuotaExceededException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static ClusterSecurityGroupQuotaExceededExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.ClusterSecurityGroupUnmarshaller : object {
    private static ClusterSecurityGroupUnmarshaller _instance;
    public static ClusterSecurityGroupUnmarshaller Instance { get; }
    private static ClusterSecurityGroupUnmarshaller();
    public sealed virtual ClusterSecurityGroup Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ClusterSecurityGroup Unmarshall(JsonUnmarshallerContext context);
    public static ClusterSecurityGroupUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.ClusterSnapshotAlreadyExistsExceptionUnmarshaller : object {
    private static ClusterSnapshotAlreadyExistsExceptionUnmarshaller _instance;
    public static ClusterSnapshotAlreadyExistsExceptionUnmarshaller Instance { get; }
    private static ClusterSnapshotAlreadyExistsExceptionUnmarshaller();
    public sealed virtual ClusterSnapshotAlreadyExistsException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ClusterSnapshotAlreadyExistsException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static ClusterSnapshotAlreadyExistsExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.ClusterSnapshotCopyStatusUnmarshaller : object {
    private static ClusterSnapshotCopyStatusUnmarshaller _instance;
    public static ClusterSnapshotCopyStatusUnmarshaller Instance { get; }
    private static ClusterSnapshotCopyStatusUnmarshaller();
    public sealed virtual ClusterSnapshotCopyStatus Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ClusterSnapshotCopyStatus Unmarshall(JsonUnmarshallerContext context);
    public static ClusterSnapshotCopyStatusUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.ClusterSnapshotNotFoundExceptionUnmarshaller : object {
    private static ClusterSnapshotNotFoundExceptionUnmarshaller _instance;
    public static ClusterSnapshotNotFoundExceptionUnmarshaller Instance { get; }
    private static ClusterSnapshotNotFoundExceptionUnmarshaller();
    public sealed virtual ClusterSnapshotNotFoundException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ClusterSnapshotNotFoundException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static ClusterSnapshotNotFoundExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.ClusterSnapshotQuotaExceededExceptionUnmarshaller : object {
    private static ClusterSnapshotQuotaExceededExceptionUnmarshaller _instance;
    public static ClusterSnapshotQuotaExceededExceptionUnmarshaller Instance { get; }
    private static ClusterSnapshotQuotaExceededExceptionUnmarshaller();
    public sealed virtual ClusterSnapshotQuotaExceededException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ClusterSnapshotQuotaExceededException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static ClusterSnapshotQuotaExceededExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.ClusterSubnetGroupAlreadyExistsExceptionUnmarshaller : object {
    private static ClusterSubnetGroupAlreadyExistsExceptionUnmarshaller _instance;
    public static ClusterSubnetGroupAlreadyExistsExceptionUnmarshaller Instance { get; }
    private static ClusterSubnetGroupAlreadyExistsExceptionUnmarshaller();
    public sealed virtual ClusterSubnetGroupAlreadyExistsException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ClusterSubnetGroupAlreadyExistsException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static ClusterSubnetGroupAlreadyExistsExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.ClusterSubnetGroupNotFoundExceptionUnmarshaller : object {
    private static ClusterSubnetGroupNotFoundExceptionUnmarshaller _instance;
    public static ClusterSubnetGroupNotFoundExceptionUnmarshaller Instance { get; }
    private static ClusterSubnetGroupNotFoundExceptionUnmarshaller();
    public sealed virtual ClusterSubnetGroupNotFoundException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ClusterSubnetGroupNotFoundException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static ClusterSubnetGroupNotFoundExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.ClusterSubnetGroupQuotaExceededExceptionUnmarshaller : object {
    private static ClusterSubnetGroupQuotaExceededExceptionUnmarshaller _instance;
    public static ClusterSubnetGroupQuotaExceededExceptionUnmarshaller Instance { get; }
    private static ClusterSubnetGroupQuotaExceededExceptionUnmarshaller();
    public sealed virtual ClusterSubnetGroupQuotaExceededException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ClusterSubnetGroupQuotaExceededException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static ClusterSubnetGroupQuotaExceededExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.ClusterSubnetGroupUnmarshaller : object {
    private static ClusterSubnetGroupUnmarshaller _instance;
    public static ClusterSubnetGroupUnmarshaller Instance { get; }
    private static ClusterSubnetGroupUnmarshaller();
    public sealed virtual ClusterSubnetGroup Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ClusterSubnetGroup Unmarshall(JsonUnmarshallerContext context);
    public static ClusterSubnetGroupUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.ClusterSubnetQuotaExceededExceptionUnmarshaller : object {
    private static ClusterSubnetQuotaExceededExceptionUnmarshaller _instance;
    public static ClusterSubnetQuotaExceededExceptionUnmarshaller Instance { get; }
    private static ClusterSubnetQuotaExceededExceptionUnmarshaller();
    public sealed virtual ClusterSubnetQuotaExceededException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ClusterSubnetQuotaExceededException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static ClusterSubnetQuotaExceededExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.ClusterUnmarshaller : object {
    private static ClusterUnmarshaller _instance;
    public static ClusterUnmarshaller Instance { get; }
    private static ClusterUnmarshaller();
    public sealed virtual Cluster Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual Cluster Unmarshall(JsonUnmarshallerContext context);
    public static ClusterUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.ClusterVersionUnmarshaller : object {
    private static ClusterVersionUnmarshaller _instance;
    public static ClusterVersionUnmarshaller Instance { get; }
    private static ClusterVersionUnmarshaller();
    public sealed virtual ClusterVersion Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ClusterVersion Unmarshall(JsonUnmarshallerContext context);
    public static ClusterVersionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.ConflictPolicyUpdateExceptionUnmarshaller : object {
    private static ConflictPolicyUpdateExceptionUnmarshaller _instance;
    public static ConflictPolicyUpdateExceptionUnmarshaller Instance { get; }
    private static ConflictPolicyUpdateExceptionUnmarshaller();
    public sealed virtual ConflictPolicyUpdateException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ConflictPolicyUpdateException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static ConflictPolicyUpdateExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.CopyClusterSnapshotRequestMarshaller : object {
    private static CopyClusterSnapshotRequestMarshaller _instance;
    public static CopyClusterSnapshotRequestMarshaller Instance { get; }
    private static CopyClusterSnapshotRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(CopyClusterSnapshotRequest publicRequest);
    internal static CopyClusterSnapshotRequestMarshaller GetInstance();
    public static CopyClusterSnapshotRequestMarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.CopyClusterSnapshotResponseUnmarshaller : XmlResponseUnmarshaller {
    private static CopyClusterSnapshotResponseUnmarshaller _instance;
    public static CopyClusterSnapshotResponseUnmarshaller Instance { get; }
    private static CopyClusterSnapshotResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, CopyClusterSnapshotResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static CopyClusterSnapshotResponseUnmarshaller GetInstance();
    public static CopyClusterSnapshotResponseUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.CopyToRegionDisabledExceptionUnmarshaller : object {
    private static CopyToRegionDisabledExceptionUnmarshaller _instance;
    public static CopyToRegionDisabledExceptionUnmarshaller Instance { get; }
    private static CopyToRegionDisabledExceptionUnmarshaller();
    public sealed virtual CopyToRegionDisabledException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual CopyToRegionDisabledException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static CopyToRegionDisabledExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.CreateAuthenticationProfileRequestMarshaller : object {
    private static CreateAuthenticationProfileRequestMarshaller _instance;
    public static CreateAuthenticationProfileRequestMarshaller Instance { get; }
    private static CreateAuthenticationProfileRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(CreateAuthenticationProfileRequest publicRequest);
    internal static CreateAuthenticationProfileRequestMarshaller GetInstance();
    public static CreateAuthenticationProfileRequestMarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.CreateAuthenticationProfileResponseUnmarshaller : XmlResponseUnmarshaller {
    private static CreateAuthenticationProfileResponseUnmarshaller _instance;
    public static CreateAuthenticationProfileResponseUnmarshaller Instance { get; }
    private static CreateAuthenticationProfileResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, CreateAuthenticationProfileResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static CreateAuthenticationProfileResponseUnmarshaller GetInstance();
    public static CreateAuthenticationProfileResponseUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.CreateClusterParameterGroupRequestMarshaller : object {
    private static CreateClusterParameterGroupRequestMarshaller _instance;
    public static CreateClusterParameterGroupRequestMarshaller Instance { get; }
    private static CreateClusterParameterGroupRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(CreateClusterParameterGroupRequest publicRequest);
    internal static CreateClusterParameterGroupRequestMarshaller GetInstance();
    public static CreateClusterParameterGroupRequestMarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.CreateClusterParameterGroupResponseUnmarshaller : XmlResponseUnmarshaller {
    private static CreateClusterParameterGroupResponseUnmarshaller _instance;
    public static CreateClusterParameterGroupResponseUnmarshaller Instance { get; }
    private static CreateClusterParameterGroupResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, CreateClusterParameterGroupResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static CreateClusterParameterGroupResponseUnmarshaller GetInstance();
    public static CreateClusterParameterGroupResponseUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.CreateClusterRequestMarshaller : object {
    private static CreateClusterRequestMarshaller _instance;
    public static CreateClusterRequestMarshaller Instance { get; }
    private static CreateClusterRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(CreateClusterRequest publicRequest);
    internal static CreateClusterRequestMarshaller GetInstance();
    public static CreateClusterRequestMarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.CreateClusterResponseUnmarshaller : XmlResponseUnmarshaller {
    private static CreateClusterResponseUnmarshaller _instance;
    public static CreateClusterResponseUnmarshaller Instance { get; }
    private static CreateClusterResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, CreateClusterResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static CreateClusterResponseUnmarshaller GetInstance();
    public static CreateClusterResponseUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.CreateClusterSecurityGroupRequestMarshaller : object {
    private static CreateClusterSecurityGroupRequestMarshaller _instance;
    public static CreateClusterSecurityGroupRequestMarshaller Instance { get; }
    private static CreateClusterSecurityGroupRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(CreateClusterSecurityGroupRequest publicRequest);
    internal static CreateClusterSecurityGroupRequestMarshaller GetInstance();
    public static CreateClusterSecurityGroupRequestMarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.CreateClusterSecurityGroupResponseUnmarshaller : XmlResponseUnmarshaller {
    private static CreateClusterSecurityGroupResponseUnmarshaller _instance;
    public static CreateClusterSecurityGroupResponseUnmarshaller Instance { get; }
    private static CreateClusterSecurityGroupResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, CreateClusterSecurityGroupResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static CreateClusterSecurityGroupResponseUnmarshaller GetInstance();
    public static CreateClusterSecurityGroupResponseUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.CreateClusterSnapshotRequestMarshaller : object {
    private static CreateClusterSnapshotRequestMarshaller _instance;
    public static CreateClusterSnapshotRequestMarshaller Instance { get; }
    private static CreateClusterSnapshotRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(CreateClusterSnapshotRequest publicRequest);
    internal static CreateClusterSnapshotRequestMarshaller GetInstance();
    public static CreateClusterSnapshotRequestMarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.CreateClusterSnapshotResponseUnmarshaller : XmlResponseUnmarshaller {
    private static CreateClusterSnapshotResponseUnmarshaller _instance;
    public static CreateClusterSnapshotResponseUnmarshaller Instance { get; }
    private static CreateClusterSnapshotResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, CreateClusterSnapshotResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static CreateClusterSnapshotResponseUnmarshaller GetInstance();
    public static CreateClusterSnapshotResponseUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.CreateClusterSubnetGroupRequestMarshaller : object {
    private static CreateClusterSubnetGroupRequestMarshaller _instance;
    public static CreateClusterSubnetGroupRequestMarshaller Instance { get; }
    private static CreateClusterSubnetGroupRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(CreateClusterSubnetGroupRequest publicRequest);
    internal static CreateClusterSubnetGroupRequestMarshaller GetInstance();
    public static CreateClusterSubnetGroupRequestMarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.CreateClusterSubnetGroupResponseUnmarshaller : XmlResponseUnmarshaller {
    private static CreateClusterSubnetGroupResponseUnmarshaller _instance;
    public static CreateClusterSubnetGroupResponseUnmarshaller Instance { get; }
    private static CreateClusterSubnetGroupResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, CreateClusterSubnetGroupResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static CreateClusterSubnetGroupResponseUnmarshaller GetInstance();
    public static CreateClusterSubnetGroupResponseUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.CreateCustomDomainAssociationRequestMarshaller : object {
    private static CreateCustomDomainAssociationRequestMarshaller _instance;
    public static CreateCustomDomainAssociationRequestMarshaller Instance { get; }
    private static CreateCustomDomainAssociationRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(CreateCustomDomainAssociationRequest publicRequest);
    internal static CreateCustomDomainAssociationRequestMarshaller GetInstance();
    public static CreateCustomDomainAssociationRequestMarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.CreateCustomDomainAssociationResponseUnmarshaller : XmlResponseUnmarshaller {
    private static CreateCustomDomainAssociationResponseUnmarshaller _instance;
    public static CreateCustomDomainAssociationResponseUnmarshaller Instance { get; }
    private static CreateCustomDomainAssociationResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, CreateCustomDomainAssociationResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static CreateCustomDomainAssociationResponseUnmarshaller GetInstance();
    public static CreateCustomDomainAssociationResponseUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.CreateEndpointAccessRequestMarshaller : object {
    private static CreateEndpointAccessRequestMarshaller _instance;
    public static CreateEndpointAccessRequestMarshaller Instance { get; }
    private static CreateEndpointAccessRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(CreateEndpointAccessRequest publicRequest);
    internal static CreateEndpointAccessRequestMarshaller GetInstance();
    public static CreateEndpointAccessRequestMarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.CreateEndpointAccessResponseUnmarshaller : XmlResponseUnmarshaller {
    private static CreateEndpointAccessResponseUnmarshaller _instance;
    public static CreateEndpointAccessResponseUnmarshaller Instance { get; }
    private static CreateEndpointAccessResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, CreateEndpointAccessResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static CreateEndpointAccessResponseUnmarshaller GetInstance();
    public static CreateEndpointAccessResponseUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.CreateEventSubscriptionRequestMarshaller : object {
    private static CreateEventSubscriptionRequestMarshaller _instance;
    public static CreateEventSubscriptionRequestMarshaller Instance { get; }
    private static CreateEventSubscriptionRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(CreateEventSubscriptionRequest publicRequest);
    internal static CreateEventSubscriptionRequestMarshaller GetInstance();
    public static CreateEventSubscriptionRequestMarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.CreateEventSubscriptionResponseUnmarshaller : XmlResponseUnmarshaller {
    private static CreateEventSubscriptionResponseUnmarshaller _instance;
    public static CreateEventSubscriptionResponseUnmarshaller Instance { get; }
    private static CreateEventSubscriptionResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, CreateEventSubscriptionResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static CreateEventSubscriptionResponseUnmarshaller GetInstance();
    public static CreateEventSubscriptionResponseUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.CreateHsmClientCertificateRequestMarshaller : object {
    private static CreateHsmClientCertificateRequestMarshaller _instance;
    public static CreateHsmClientCertificateRequestMarshaller Instance { get; }
    private static CreateHsmClientCertificateRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(CreateHsmClientCertificateRequest publicRequest);
    internal static CreateHsmClientCertificateRequestMarshaller GetInstance();
    public static CreateHsmClientCertificateRequestMarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.CreateHsmClientCertificateResponseUnmarshaller : XmlResponseUnmarshaller {
    private static CreateHsmClientCertificateResponseUnmarshaller _instance;
    public static CreateHsmClientCertificateResponseUnmarshaller Instance { get; }
    private static CreateHsmClientCertificateResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, CreateHsmClientCertificateResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static CreateHsmClientCertificateResponseUnmarshaller GetInstance();
    public static CreateHsmClientCertificateResponseUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.CreateHsmConfigurationRequestMarshaller : object {
    private static CreateHsmConfigurationRequestMarshaller _instance;
    public static CreateHsmConfigurationRequestMarshaller Instance { get; }
    private static CreateHsmConfigurationRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(CreateHsmConfigurationRequest publicRequest);
    internal static CreateHsmConfigurationRequestMarshaller GetInstance();
    public static CreateHsmConfigurationRequestMarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.CreateHsmConfigurationResponseUnmarshaller : XmlResponseUnmarshaller {
    private static CreateHsmConfigurationResponseUnmarshaller _instance;
    public static CreateHsmConfigurationResponseUnmarshaller Instance { get; }
    private static CreateHsmConfigurationResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, CreateHsmConfigurationResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static CreateHsmConfigurationResponseUnmarshaller GetInstance();
    public static CreateHsmConfigurationResponseUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.CreateRedshiftIdcApplicationRequestMarshaller : object {
    private static CreateRedshiftIdcApplicationRequestMarshaller _instance;
    public static CreateRedshiftIdcApplicationRequestMarshaller Instance { get; }
    private static CreateRedshiftIdcApplicationRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(CreateRedshiftIdcApplicationRequest publicRequest);
    internal static CreateRedshiftIdcApplicationRequestMarshaller GetInstance();
    public static CreateRedshiftIdcApplicationRequestMarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.CreateRedshiftIdcApplicationResponseUnmarshaller : XmlResponseUnmarshaller {
    private static CreateRedshiftIdcApplicationResponseUnmarshaller _instance;
    public static CreateRedshiftIdcApplicationResponseUnmarshaller Instance { get; }
    private static CreateRedshiftIdcApplicationResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, CreateRedshiftIdcApplicationResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static CreateRedshiftIdcApplicationResponseUnmarshaller GetInstance();
    public static CreateRedshiftIdcApplicationResponseUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.CreateScheduledActionRequestMarshaller : object {
    private static CreateScheduledActionRequestMarshaller _instance;
    public static CreateScheduledActionRequestMarshaller Instance { get; }
    private static CreateScheduledActionRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(CreateScheduledActionRequest publicRequest);
    internal static CreateScheduledActionRequestMarshaller GetInstance();
    public static CreateScheduledActionRequestMarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.CreateScheduledActionResponseUnmarshaller : XmlResponseUnmarshaller {
    private static CreateScheduledActionResponseUnmarshaller _instance;
    public static CreateScheduledActionResponseUnmarshaller Instance { get; }
    private static CreateScheduledActionResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, CreateScheduledActionResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static CreateScheduledActionResponseUnmarshaller GetInstance();
    public static CreateScheduledActionResponseUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.CreateSnapshotCopyGrantRequestMarshaller : object {
    private static CreateSnapshotCopyGrantRequestMarshaller _instance;
    public static CreateSnapshotCopyGrantRequestMarshaller Instance { get; }
    private static CreateSnapshotCopyGrantRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(CreateSnapshotCopyGrantRequest publicRequest);
    internal static CreateSnapshotCopyGrantRequestMarshaller GetInstance();
    public static CreateSnapshotCopyGrantRequestMarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.CreateSnapshotCopyGrantResponseUnmarshaller : XmlResponseUnmarshaller {
    private static CreateSnapshotCopyGrantResponseUnmarshaller _instance;
    public static CreateSnapshotCopyGrantResponseUnmarshaller Instance { get; }
    private static CreateSnapshotCopyGrantResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, CreateSnapshotCopyGrantResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static CreateSnapshotCopyGrantResponseUnmarshaller GetInstance();
    public static CreateSnapshotCopyGrantResponseUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.CreateSnapshotScheduleRequestMarshaller : object {
    private static CreateSnapshotScheduleRequestMarshaller _instance;
    public static CreateSnapshotScheduleRequestMarshaller Instance { get; }
    private static CreateSnapshotScheduleRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(CreateSnapshotScheduleRequest publicRequest);
    internal static CreateSnapshotScheduleRequestMarshaller GetInstance();
    public static CreateSnapshotScheduleRequestMarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.CreateSnapshotScheduleResponseUnmarshaller : XmlResponseUnmarshaller {
    private static CreateSnapshotScheduleResponseUnmarshaller _instance;
    public static CreateSnapshotScheduleResponseUnmarshaller Instance { get; }
    private static CreateSnapshotScheduleResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, CreateSnapshotScheduleResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static CreateSnapshotScheduleResponseUnmarshaller GetInstance();
    public static CreateSnapshotScheduleResponseUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.CreateTagsRequestMarshaller : object {
    private static CreateTagsRequestMarshaller _instance;
    public static CreateTagsRequestMarshaller Instance { get; }
    private static CreateTagsRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(CreateTagsRequest publicRequest);
    internal static CreateTagsRequestMarshaller GetInstance();
    public static CreateTagsRequestMarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.CreateTagsResponseUnmarshaller : XmlResponseUnmarshaller {
    private static CreateTagsResponseUnmarshaller _instance;
    public static CreateTagsResponseUnmarshaller Instance { get; }
    private static CreateTagsResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, CreateTagsResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static CreateTagsResponseUnmarshaller GetInstance();
    public static CreateTagsResponseUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.CreateUsageLimitRequestMarshaller : object {
    private static CreateUsageLimitRequestMarshaller _instance;
    public static CreateUsageLimitRequestMarshaller Instance { get; }
    private static CreateUsageLimitRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(CreateUsageLimitRequest publicRequest);
    internal static CreateUsageLimitRequestMarshaller GetInstance();
    public static CreateUsageLimitRequestMarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.CreateUsageLimitResponseUnmarshaller : XmlResponseUnmarshaller {
    private static CreateUsageLimitResponseUnmarshaller _instance;
    public static CreateUsageLimitResponseUnmarshaller Instance { get; }
    private static CreateUsageLimitResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, CreateUsageLimitResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static CreateUsageLimitResponseUnmarshaller GetInstance();
    public static CreateUsageLimitResponseUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.CustomCnameAssociationExceptionUnmarshaller : object {
    private static CustomCnameAssociationExceptionUnmarshaller _instance;
    public static CustomCnameAssociationExceptionUnmarshaller Instance { get; }
    private static CustomCnameAssociationExceptionUnmarshaller();
    public sealed virtual CustomCnameAssociationException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual CustomCnameAssociationException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static CustomCnameAssociationExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.CustomDomainAssociationNotFoundExceptionUnmarshaller : object {
    private static CustomDomainAssociationNotFoundExceptionUnmarshaller _instance;
    public static CustomDomainAssociationNotFoundExceptionUnmarshaller Instance { get; }
    private static CustomDomainAssociationNotFoundExceptionUnmarshaller();
    public sealed virtual CustomDomainAssociationNotFoundException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual CustomDomainAssociationNotFoundException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static CustomDomainAssociationNotFoundExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.DataShareAssociationUnmarshaller : object {
    private static DataShareAssociationUnmarshaller _instance;
    public static DataShareAssociationUnmarshaller Instance { get; }
    private static DataShareAssociationUnmarshaller();
    public sealed virtual DataShareAssociation Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual DataShareAssociation Unmarshall(JsonUnmarshallerContext context);
    public static DataShareAssociationUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.DataShareUnmarshaller : object {
    private static DataShareUnmarshaller _instance;
    public static DataShareUnmarshaller Instance { get; }
    private static DataShareUnmarshaller();
    public sealed virtual DataShare Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual DataShare Unmarshall(JsonUnmarshallerContext context);
    public static DataShareUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.DataTransferProgressUnmarshaller : object {
    private static DataTransferProgressUnmarshaller _instance;
    public static DataTransferProgressUnmarshaller Instance { get; }
    private static DataTransferProgressUnmarshaller();
    public sealed virtual DataTransferProgress Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual DataTransferProgress Unmarshall(JsonUnmarshallerContext context);
    public static DataTransferProgressUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.DeauthorizeDataShareRequestMarshaller : object {
    private static DeauthorizeDataShareRequestMarshaller _instance;
    public static DeauthorizeDataShareRequestMarshaller Instance { get; }
    private static DeauthorizeDataShareRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeauthorizeDataShareRequest publicRequest);
    internal static DeauthorizeDataShareRequestMarshaller GetInstance();
    public static DeauthorizeDataShareRequestMarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.DeauthorizeDataShareResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DeauthorizeDataShareResponseUnmarshaller _instance;
    public static DeauthorizeDataShareResponseUnmarshaller Instance { get; }
    private static DeauthorizeDataShareResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DeauthorizeDataShareResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DeauthorizeDataShareResponseUnmarshaller GetInstance();
    public static DeauthorizeDataShareResponseUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.DefaultClusterParametersUnmarshaller : object {
    private static DefaultClusterParametersUnmarshaller _instance;
    public static DefaultClusterParametersUnmarshaller Instance { get; }
    private static DefaultClusterParametersUnmarshaller();
    public sealed virtual DefaultClusterParameters Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual DefaultClusterParameters Unmarshall(JsonUnmarshallerContext context);
    public static DefaultClusterParametersUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.DeferredMaintenanceWindowUnmarshaller : object {
    private static DeferredMaintenanceWindowUnmarshaller _instance;
    public static DeferredMaintenanceWindowUnmarshaller Instance { get; }
    private static DeferredMaintenanceWindowUnmarshaller();
    public sealed virtual DeferredMaintenanceWindow Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual DeferredMaintenanceWindow Unmarshall(JsonUnmarshallerContext context);
    public static DeferredMaintenanceWindowUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.DeleteAuthenticationProfileRequestMarshaller : object {
    private static DeleteAuthenticationProfileRequestMarshaller _instance;
    public static DeleteAuthenticationProfileRequestMarshaller Instance { get; }
    private static DeleteAuthenticationProfileRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeleteAuthenticationProfileRequest publicRequest);
    internal static DeleteAuthenticationProfileRequestMarshaller GetInstance();
    public static DeleteAuthenticationProfileRequestMarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.DeleteAuthenticationProfileResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DeleteAuthenticationProfileResponseUnmarshaller _instance;
    public static DeleteAuthenticationProfileResponseUnmarshaller Instance { get; }
    private static DeleteAuthenticationProfileResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DeleteAuthenticationProfileResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DeleteAuthenticationProfileResponseUnmarshaller GetInstance();
    public static DeleteAuthenticationProfileResponseUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.DeleteClusterParameterGroupRequestMarshaller : object {
    private static DeleteClusterParameterGroupRequestMarshaller _instance;
    public static DeleteClusterParameterGroupRequestMarshaller Instance { get; }
    private static DeleteClusterParameterGroupRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeleteClusterParameterGroupRequest publicRequest);
    internal static DeleteClusterParameterGroupRequestMarshaller GetInstance();
    public static DeleteClusterParameterGroupRequestMarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.DeleteClusterParameterGroupResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DeleteClusterParameterGroupResponseUnmarshaller _instance;
    public static DeleteClusterParameterGroupResponseUnmarshaller Instance { get; }
    private static DeleteClusterParameterGroupResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DeleteClusterParameterGroupResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DeleteClusterParameterGroupResponseUnmarshaller GetInstance();
    public static DeleteClusterParameterGroupResponseUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.DeleteClusterRequestMarshaller : object {
    private static DeleteClusterRequestMarshaller _instance;
    public static DeleteClusterRequestMarshaller Instance { get; }
    private static DeleteClusterRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeleteClusterRequest publicRequest);
    internal static DeleteClusterRequestMarshaller GetInstance();
    public static DeleteClusterRequestMarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.DeleteClusterResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DeleteClusterResponseUnmarshaller _instance;
    public static DeleteClusterResponseUnmarshaller Instance { get; }
    private static DeleteClusterResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DeleteClusterResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DeleteClusterResponseUnmarshaller GetInstance();
    public static DeleteClusterResponseUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.DeleteClusterSecurityGroupRequestMarshaller : object {
    private static DeleteClusterSecurityGroupRequestMarshaller _instance;
    public static DeleteClusterSecurityGroupRequestMarshaller Instance { get; }
    private static DeleteClusterSecurityGroupRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeleteClusterSecurityGroupRequest publicRequest);
    internal static DeleteClusterSecurityGroupRequestMarshaller GetInstance();
    public static DeleteClusterSecurityGroupRequestMarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.DeleteClusterSecurityGroupResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DeleteClusterSecurityGroupResponseUnmarshaller _instance;
    public static DeleteClusterSecurityGroupResponseUnmarshaller Instance { get; }
    private static DeleteClusterSecurityGroupResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DeleteClusterSecurityGroupResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DeleteClusterSecurityGroupResponseUnmarshaller GetInstance();
    public static DeleteClusterSecurityGroupResponseUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.DeleteClusterSnapshotRequestMarshaller : object {
    private static DeleteClusterSnapshotRequestMarshaller _instance;
    public static DeleteClusterSnapshotRequestMarshaller Instance { get; }
    private static DeleteClusterSnapshotRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeleteClusterSnapshotRequest publicRequest);
    internal static DeleteClusterSnapshotRequestMarshaller GetInstance();
    public static DeleteClusterSnapshotRequestMarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.DeleteClusterSnapshotResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DeleteClusterSnapshotResponseUnmarshaller _instance;
    public static DeleteClusterSnapshotResponseUnmarshaller Instance { get; }
    private static DeleteClusterSnapshotResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DeleteClusterSnapshotResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DeleteClusterSnapshotResponseUnmarshaller GetInstance();
    public static DeleteClusterSnapshotResponseUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.DeleteClusterSubnetGroupRequestMarshaller : object {
    private static DeleteClusterSubnetGroupRequestMarshaller _instance;
    public static DeleteClusterSubnetGroupRequestMarshaller Instance { get; }
    private static DeleteClusterSubnetGroupRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeleteClusterSubnetGroupRequest publicRequest);
    internal static DeleteClusterSubnetGroupRequestMarshaller GetInstance();
    public static DeleteClusterSubnetGroupRequestMarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.DeleteClusterSubnetGroupResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DeleteClusterSubnetGroupResponseUnmarshaller _instance;
    public static DeleteClusterSubnetGroupResponseUnmarshaller Instance { get; }
    private static DeleteClusterSubnetGroupResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DeleteClusterSubnetGroupResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DeleteClusterSubnetGroupResponseUnmarshaller GetInstance();
    public static DeleteClusterSubnetGroupResponseUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.DeleteCustomDomainAssociationRequestMarshaller : object {
    private static DeleteCustomDomainAssociationRequestMarshaller _instance;
    public static DeleteCustomDomainAssociationRequestMarshaller Instance { get; }
    private static DeleteCustomDomainAssociationRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeleteCustomDomainAssociationRequest publicRequest);
    internal static DeleteCustomDomainAssociationRequestMarshaller GetInstance();
    public static DeleteCustomDomainAssociationRequestMarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.DeleteCustomDomainAssociationResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DeleteCustomDomainAssociationResponseUnmarshaller _instance;
    public static DeleteCustomDomainAssociationResponseUnmarshaller Instance { get; }
    private static DeleteCustomDomainAssociationResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DeleteCustomDomainAssociationResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DeleteCustomDomainAssociationResponseUnmarshaller GetInstance();
    public static DeleteCustomDomainAssociationResponseUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.DeleteEndpointAccessRequestMarshaller : object {
    private static DeleteEndpointAccessRequestMarshaller _instance;
    public static DeleteEndpointAccessRequestMarshaller Instance { get; }
    private static DeleteEndpointAccessRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeleteEndpointAccessRequest publicRequest);
    internal static DeleteEndpointAccessRequestMarshaller GetInstance();
    public static DeleteEndpointAccessRequestMarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.DeleteEndpointAccessResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DeleteEndpointAccessResponseUnmarshaller _instance;
    public static DeleteEndpointAccessResponseUnmarshaller Instance { get; }
    private static DeleteEndpointAccessResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DeleteEndpointAccessResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DeleteEndpointAccessResponseUnmarshaller GetInstance();
    public static DeleteEndpointAccessResponseUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.DeleteEventSubscriptionRequestMarshaller : object {
    private static DeleteEventSubscriptionRequestMarshaller _instance;
    public static DeleteEventSubscriptionRequestMarshaller Instance { get; }
    private static DeleteEventSubscriptionRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeleteEventSubscriptionRequest publicRequest);
    internal static DeleteEventSubscriptionRequestMarshaller GetInstance();
    public static DeleteEventSubscriptionRequestMarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.DeleteEventSubscriptionResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DeleteEventSubscriptionResponseUnmarshaller _instance;
    public static DeleteEventSubscriptionResponseUnmarshaller Instance { get; }
    private static DeleteEventSubscriptionResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DeleteEventSubscriptionResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DeleteEventSubscriptionResponseUnmarshaller GetInstance();
    public static DeleteEventSubscriptionResponseUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.DeleteHsmClientCertificateRequestMarshaller : object {
    private static DeleteHsmClientCertificateRequestMarshaller _instance;
    public static DeleteHsmClientCertificateRequestMarshaller Instance { get; }
    private static DeleteHsmClientCertificateRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeleteHsmClientCertificateRequest publicRequest);
    internal static DeleteHsmClientCertificateRequestMarshaller GetInstance();
    public static DeleteHsmClientCertificateRequestMarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.DeleteHsmClientCertificateResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DeleteHsmClientCertificateResponseUnmarshaller _instance;
    public static DeleteHsmClientCertificateResponseUnmarshaller Instance { get; }
    private static DeleteHsmClientCertificateResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DeleteHsmClientCertificateResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DeleteHsmClientCertificateResponseUnmarshaller GetInstance();
    public static DeleteHsmClientCertificateResponseUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.DeleteHsmConfigurationRequestMarshaller : object {
    private static DeleteHsmConfigurationRequestMarshaller _instance;
    public static DeleteHsmConfigurationRequestMarshaller Instance { get; }
    private static DeleteHsmConfigurationRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeleteHsmConfigurationRequest publicRequest);
    internal static DeleteHsmConfigurationRequestMarshaller GetInstance();
    public static DeleteHsmConfigurationRequestMarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.DeleteHsmConfigurationResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DeleteHsmConfigurationResponseUnmarshaller _instance;
    public static DeleteHsmConfigurationResponseUnmarshaller Instance { get; }
    private static DeleteHsmConfigurationResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DeleteHsmConfigurationResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DeleteHsmConfigurationResponseUnmarshaller GetInstance();
    public static DeleteHsmConfigurationResponseUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.DeletePartnerRequestMarshaller : object {
    private static DeletePartnerRequestMarshaller _instance;
    public static DeletePartnerRequestMarshaller Instance { get; }
    private static DeletePartnerRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeletePartnerRequest publicRequest);
    internal static DeletePartnerRequestMarshaller GetInstance();
    public static DeletePartnerRequestMarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.DeletePartnerResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DeletePartnerResponseUnmarshaller _instance;
    public static DeletePartnerResponseUnmarshaller Instance { get; }
    private static DeletePartnerResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DeletePartnerResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DeletePartnerResponseUnmarshaller GetInstance();
    public static DeletePartnerResponseUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.DeleteRedshiftIdcApplicationRequestMarshaller : object {
    private static DeleteRedshiftIdcApplicationRequestMarshaller _instance;
    public static DeleteRedshiftIdcApplicationRequestMarshaller Instance { get; }
    private static DeleteRedshiftIdcApplicationRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeleteRedshiftIdcApplicationRequest publicRequest);
    internal static DeleteRedshiftIdcApplicationRequestMarshaller GetInstance();
    public static DeleteRedshiftIdcApplicationRequestMarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.DeleteRedshiftIdcApplicationResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DeleteRedshiftIdcApplicationResponseUnmarshaller _instance;
    public static DeleteRedshiftIdcApplicationResponseUnmarshaller Instance { get; }
    private static DeleteRedshiftIdcApplicationResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DeleteRedshiftIdcApplicationResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DeleteRedshiftIdcApplicationResponseUnmarshaller GetInstance();
    public static DeleteRedshiftIdcApplicationResponseUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.DeleteResourcePolicyRequestMarshaller : object {
    private static DeleteResourcePolicyRequestMarshaller _instance;
    public static DeleteResourcePolicyRequestMarshaller Instance { get; }
    private static DeleteResourcePolicyRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeleteResourcePolicyRequest publicRequest);
    internal static DeleteResourcePolicyRequestMarshaller GetInstance();
    public static DeleteResourcePolicyRequestMarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.DeleteResourcePolicyResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DeleteResourcePolicyResponseUnmarshaller _instance;
    public static DeleteResourcePolicyResponseUnmarshaller Instance { get; }
    private static DeleteResourcePolicyResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DeleteResourcePolicyResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DeleteResourcePolicyResponseUnmarshaller GetInstance();
    public static DeleteResourcePolicyResponseUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.DeleteScheduledActionRequestMarshaller : object {
    private static DeleteScheduledActionRequestMarshaller _instance;
    public static DeleteScheduledActionRequestMarshaller Instance { get; }
    private static DeleteScheduledActionRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeleteScheduledActionRequest publicRequest);
    internal static DeleteScheduledActionRequestMarshaller GetInstance();
    public static DeleteScheduledActionRequestMarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.DeleteScheduledActionResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DeleteScheduledActionResponseUnmarshaller _instance;
    public static DeleteScheduledActionResponseUnmarshaller Instance { get; }
    private static DeleteScheduledActionResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DeleteScheduledActionResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DeleteScheduledActionResponseUnmarshaller GetInstance();
    public static DeleteScheduledActionResponseUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.DeleteSnapshotCopyGrantRequestMarshaller : object {
    private static DeleteSnapshotCopyGrantRequestMarshaller _instance;
    public static DeleteSnapshotCopyGrantRequestMarshaller Instance { get; }
    private static DeleteSnapshotCopyGrantRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeleteSnapshotCopyGrantRequest publicRequest);
    internal static DeleteSnapshotCopyGrantRequestMarshaller GetInstance();
    public static DeleteSnapshotCopyGrantRequestMarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.DeleteSnapshotCopyGrantResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DeleteSnapshotCopyGrantResponseUnmarshaller _instance;
    public static DeleteSnapshotCopyGrantResponseUnmarshaller Instance { get; }
    private static DeleteSnapshotCopyGrantResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DeleteSnapshotCopyGrantResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DeleteSnapshotCopyGrantResponseUnmarshaller GetInstance();
    public static DeleteSnapshotCopyGrantResponseUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.DeleteSnapshotScheduleRequestMarshaller : object {
    private static DeleteSnapshotScheduleRequestMarshaller _instance;
    public static DeleteSnapshotScheduleRequestMarshaller Instance { get; }
    private static DeleteSnapshotScheduleRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeleteSnapshotScheduleRequest publicRequest);
    internal static DeleteSnapshotScheduleRequestMarshaller GetInstance();
    public static DeleteSnapshotScheduleRequestMarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.DeleteSnapshotScheduleResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DeleteSnapshotScheduleResponseUnmarshaller _instance;
    public static DeleteSnapshotScheduleResponseUnmarshaller Instance { get; }
    private static DeleteSnapshotScheduleResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DeleteSnapshotScheduleResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DeleteSnapshotScheduleResponseUnmarshaller GetInstance();
    public static DeleteSnapshotScheduleResponseUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.DeleteTagsRequestMarshaller : object {
    private static DeleteTagsRequestMarshaller _instance;
    public static DeleteTagsRequestMarshaller Instance { get; }
    private static DeleteTagsRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeleteTagsRequest publicRequest);
    internal static DeleteTagsRequestMarshaller GetInstance();
    public static DeleteTagsRequestMarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.DeleteTagsResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DeleteTagsResponseUnmarshaller _instance;
    public static DeleteTagsResponseUnmarshaller Instance { get; }
    private static DeleteTagsResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DeleteTagsResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DeleteTagsResponseUnmarshaller GetInstance();
    public static DeleteTagsResponseUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.DeleteUsageLimitRequestMarshaller : object {
    private static DeleteUsageLimitRequestMarshaller _instance;
    public static DeleteUsageLimitRequestMarshaller Instance { get; }
    private static DeleteUsageLimitRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeleteUsageLimitRequest publicRequest);
    internal static DeleteUsageLimitRequestMarshaller GetInstance();
    public static DeleteUsageLimitRequestMarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.DeleteUsageLimitResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DeleteUsageLimitResponseUnmarshaller _instance;
    public static DeleteUsageLimitResponseUnmarshaller Instance { get; }
    private static DeleteUsageLimitResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DeleteUsageLimitResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DeleteUsageLimitResponseUnmarshaller GetInstance();
    public static DeleteUsageLimitResponseUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.DependentServiceAccessDeniedExceptionUnmarshaller : object {
    private static DependentServiceAccessDeniedExceptionUnmarshaller _instance;
    public static DependentServiceAccessDeniedExceptionUnmarshaller Instance { get; }
    private static DependentServiceAccessDeniedExceptionUnmarshaller();
    public sealed virtual DependentServiceAccessDeniedException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual DependentServiceAccessDeniedException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static DependentServiceAccessDeniedExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.DependentServiceRequestThrottlingExceptionUnmarshaller : object {
    private static DependentServiceRequestThrottlingExceptionUnmarshaller _instance;
    public static DependentServiceRequestThrottlingExceptionUnmarshaller Instance { get; }
    private static DependentServiceRequestThrottlingExceptionUnmarshaller();
    public sealed virtual DependentServiceRequestThrottlingException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual DependentServiceRequestThrottlingException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static DependentServiceRequestThrottlingExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.DependentServiceUnavailableExceptionUnmarshaller : object {
    private static DependentServiceUnavailableExceptionUnmarshaller _instance;
    public static DependentServiceUnavailableExceptionUnmarshaller Instance { get; }
    private static DependentServiceUnavailableExceptionUnmarshaller();
    public sealed virtual DependentServiceUnavailableException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual DependentServiceUnavailableException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static DependentServiceUnavailableExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.DescribeAccountAttributesRequestMarshaller : object {
    private static DescribeAccountAttributesRequestMarshaller _instance;
    public static DescribeAccountAttributesRequestMarshaller Instance { get; }
    private static DescribeAccountAttributesRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DescribeAccountAttributesRequest publicRequest);
    internal static DescribeAccountAttributesRequestMarshaller GetInstance();
    public static DescribeAccountAttributesRequestMarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.DescribeAccountAttributesResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DescribeAccountAttributesResponseUnmarshaller _instance;
    public static DescribeAccountAttributesResponseUnmarshaller Instance { get; }
    private static DescribeAccountAttributesResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DescribeAccountAttributesResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DescribeAccountAttributesResponseUnmarshaller GetInstance();
    public static DescribeAccountAttributesResponseUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.DescribeAuthenticationProfilesRequestMarshaller : object {
    private static DescribeAuthenticationProfilesRequestMarshaller _instance;
    public static DescribeAuthenticationProfilesRequestMarshaller Instance { get; }
    private static DescribeAuthenticationProfilesRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DescribeAuthenticationProfilesRequest publicRequest);
    internal static DescribeAuthenticationProfilesRequestMarshaller GetInstance();
    public static DescribeAuthenticationProfilesRequestMarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.DescribeAuthenticationProfilesResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DescribeAuthenticationProfilesResponseUnmarshaller _instance;
    public static DescribeAuthenticationProfilesResponseUnmarshaller Instance { get; }
    private static DescribeAuthenticationProfilesResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DescribeAuthenticationProfilesResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DescribeAuthenticationProfilesResponseUnmarshaller GetInstance();
    public static DescribeAuthenticationProfilesResponseUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.DescribeClusterDbRevisionsRequestMarshaller : object {
    private static DescribeClusterDbRevisionsRequestMarshaller _instance;
    public static DescribeClusterDbRevisionsRequestMarshaller Instance { get; }
    private static DescribeClusterDbRevisionsRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DescribeClusterDbRevisionsRequest publicRequest);
    internal static DescribeClusterDbRevisionsRequestMarshaller GetInstance();
    public static DescribeClusterDbRevisionsRequestMarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.DescribeClusterDbRevisionsResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DescribeClusterDbRevisionsResponseUnmarshaller _instance;
    public static DescribeClusterDbRevisionsResponseUnmarshaller Instance { get; }
    private static DescribeClusterDbRevisionsResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DescribeClusterDbRevisionsResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DescribeClusterDbRevisionsResponseUnmarshaller GetInstance();
    public static DescribeClusterDbRevisionsResponseUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.DescribeClusterParameterGroupsRequestMarshaller : object {
    private static DescribeClusterParameterGroupsRequestMarshaller _instance;
    public static DescribeClusterParameterGroupsRequestMarshaller Instance { get; }
    private static DescribeClusterParameterGroupsRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DescribeClusterParameterGroupsRequest publicRequest);
    internal static DescribeClusterParameterGroupsRequestMarshaller GetInstance();
    public static DescribeClusterParameterGroupsRequestMarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.DescribeClusterParameterGroupsResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DescribeClusterParameterGroupsResponseUnmarshaller _instance;
    public static DescribeClusterParameterGroupsResponseUnmarshaller Instance { get; }
    private static DescribeClusterParameterGroupsResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DescribeClusterParameterGroupsResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DescribeClusterParameterGroupsResponseUnmarshaller GetInstance();
    public static DescribeClusterParameterGroupsResponseUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.DescribeClusterParametersRequestMarshaller : object {
    private static DescribeClusterParametersRequestMarshaller _instance;
    public static DescribeClusterParametersRequestMarshaller Instance { get; }
    private static DescribeClusterParametersRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DescribeClusterParametersRequest publicRequest);
    internal static DescribeClusterParametersRequestMarshaller GetInstance();
    public static DescribeClusterParametersRequestMarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.DescribeClusterParametersResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DescribeClusterParametersResponseUnmarshaller _instance;
    public static DescribeClusterParametersResponseUnmarshaller Instance { get; }
    private static DescribeClusterParametersResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DescribeClusterParametersResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DescribeClusterParametersResponseUnmarshaller GetInstance();
    public static DescribeClusterParametersResponseUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.DescribeClusterSecurityGroupsRequestMarshaller : object {
    private static DescribeClusterSecurityGroupsRequestMarshaller _instance;
    public static DescribeClusterSecurityGroupsRequestMarshaller Instance { get; }
    private static DescribeClusterSecurityGroupsRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DescribeClusterSecurityGroupsRequest publicRequest);
    internal static DescribeClusterSecurityGroupsRequestMarshaller GetInstance();
    public static DescribeClusterSecurityGroupsRequestMarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.DescribeClusterSecurityGroupsResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DescribeClusterSecurityGroupsResponseUnmarshaller _instance;
    public static DescribeClusterSecurityGroupsResponseUnmarshaller Instance { get; }
    private static DescribeClusterSecurityGroupsResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DescribeClusterSecurityGroupsResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DescribeClusterSecurityGroupsResponseUnmarshaller GetInstance();
    public static DescribeClusterSecurityGroupsResponseUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.DescribeClusterSnapshotsRequestMarshaller : object {
    private static DescribeClusterSnapshotsRequestMarshaller _instance;
    public static DescribeClusterSnapshotsRequestMarshaller Instance { get; }
    private static DescribeClusterSnapshotsRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DescribeClusterSnapshotsRequest publicRequest);
    internal static DescribeClusterSnapshotsRequestMarshaller GetInstance();
    public static DescribeClusterSnapshotsRequestMarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.DescribeClusterSnapshotsResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DescribeClusterSnapshotsResponseUnmarshaller _instance;
    public static DescribeClusterSnapshotsResponseUnmarshaller Instance { get; }
    private static DescribeClusterSnapshotsResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DescribeClusterSnapshotsResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DescribeClusterSnapshotsResponseUnmarshaller GetInstance();
    public static DescribeClusterSnapshotsResponseUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.DescribeClustersRequestMarshaller : object {
    private static DescribeClustersRequestMarshaller _instance;
    public static DescribeClustersRequestMarshaller Instance { get; }
    private static DescribeClustersRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DescribeClustersRequest publicRequest);
    internal static DescribeClustersRequestMarshaller GetInstance();
    public static DescribeClustersRequestMarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.DescribeClustersResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DescribeClustersResponseUnmarshaller _instance;
    public static DescribeClustersResponseUnmarshaller Instance { get; }
    private static DescribeClustersResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DescribeClustersResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DescribeClustersResponseUnmarshaller GetInstance();
    public static DescribeClustersResponseUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.DescribeClusterSubnetGroupsRequestMarshaller : object {
    private static DescribeClusterSubnetGroupsRequestMarshaller _instance;
    public static DescribeClusterSubnetGroupsRequestMarshaller Instance { get; }
    private static DescribeClusterSubnetGroupsRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DescribeClusterSubnetGroupsRequest publicRequest);
    internal static DescribeClusterSubnetGroupsRequestMarshaller GetInstance();
    public static DescribeClusterSubnetGroupsRequestMarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.DescribeClusterSubnetGroupsResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DescribeClusterSubnetGroupsResponseUnmarshaller _instance;
    public static DescribeClusterSubnetGroupsResponseUnmarshaller Instance { get; }
    private static DescribeClusterSubnetGroupsResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DescribeClusterSubnetGroupsResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DescribeClusterSubnetGroupsResponseUnmarshaller GetInstance();
    public static DescribeClusterSubnetGroupsResponseUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.DescribeClusterTracksRequestMarshaller : object {
    private static DescribeClusterTracksRequestMarshaller _instance;
    public static DescribeClusterTracksRequestMarshaller Instance { get; }
    private static DescribeClusterTracksRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DescribeClusterTracksRequest publicRequest);
    internal static DescribeClusterTracksRequestMarshaller GetInstance();
    public static DescribeClusterTracksRequestMarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.DescribeClusterTracksResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DescribeClusterTracksResponseUnmarshaller _instance;
    public static DescribeClusterTracksResponseUnmarshaller Instance { get; }
    private static DescribeClusterTracksResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DescribeClusterTracksResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DescribeClusterTracksResponseUnmarshaller GetInstance();
    public static DescribeClusterTracksResponseUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.DescribeClusterVersionsRequestMarshaller : object {
    private static DescribeClusterVersionsRequestMarshaller _instance;
    public static DescribeClusterVersionsRequestMarshaller Instance { get; }
    private static DescribeClusterVersionsRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DescribeClusterVersionsRequest publicRequest);
    internal static DescribeClusterVersionsRequestMarshaller GetInstance();
    public static DescribeClusterVersionsRequestMarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.DescribeClusterVersionsResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DescribeClusterVersionsResponseUnmarshaller _instance;
    public static DescribeClusterVersionsResponseUnmarshaller Instance { get; }
    private static DescribeClusterVersionsResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DescribeClusterVersionsResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DescribeClusterVersionsResponseUnmarshaller GetInstance();
    public static DescribeClusterVersionsResponseUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.DescribeCustomDomainAssociationsRequestMarshaller : object {
    private static DescribeCustomDomainAssociationsRequestMarshaller _instance;
    public static DescribeCustomDomainAssociationsRequestMarshaller Instance { get; }
    private static DescribeCustomDomainAssociationsRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DescribeCustomDomainAssociationsRequest publicRequest);
    internal static DescribeCustomDomainAssociationsRequestMarshaller GetInstance();
    public static DescribeCustomDomainAssociationsRequestMarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.DescribeCustomDomainAssociationsResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DescribeCustomDomainAssociationsResponseUnmarshaller _instance;
    public static DescribeCustomDomainAssociationsResponseUnmarshaller Instance { get; }
    private static DescribeCustomDomainAssociationsResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DescribeCustomDomainAssociationsResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DescribeCustomDomainAssociationsResponseUnmarshaller GetInstance();
    public static DescribeCustomDomainAssociationsResponseUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.DescribeDataSharesForConsumerRequestMarshaller : object {
    private static DescribeDataSharesForConsumerRequestMarshaller _instance;
    public static DescribeDataSharesForConsumerRequestMarshaller Instance { get; }
    private static DescribeDataSharesForConsumerRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DescribeDataSharesForConsumerRequest publicRequest);
    internal static DescribeDataSharesForConsumerRequestMarshaller GetInstance();
    public static DescribeDataSharesForConsumerRequestMarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.DescribeDataSharesForConsumerResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DescribeDataSharesForConsumerResponseUnmarshaller _instance;
    public static DescribeDataSharesForConsumerResponseUnmarshaller Instance { get; }
    private static DescribeDataSharesForConsumerResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DescribeDataSharesForConsumerResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DescribeDataSharesForConsumerResponseUnmarshaller GetInstance();
    public static DescribeDataSharesForConsumerResponseUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.DescribeDataSharesForProducerRequestMarshaller : object {
    private static DescribeDataSharesForProducerRequestMarshaller _instance;
    public static DescribeDataSharesForProducerRequestMarshaller Instance { get; }
    private static DescribeDataSharesForProducerRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DescribeDataSharesForProducerRequest publicRequest);
    internal static DescribeDataSharesForProducerRequestMarshaller GetInstance();
    public static DescribeDataSharesForProducerRequestMarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.DescribeDataSharesForProducerResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DescribeDataSharesForProducerResponseUnmarshaller _instance;
    public static DescribeDataSharesForProducerResponseUnmarshaller Instance { get; }
    private static DescribeDataSharesForProducerResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DescribeDataSharesForProducerResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DescribeDataSharesForProducerResponseUnmarshaller GetInstance();
    public static DescribeDataSharesForProducerResponseUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.DescribeDataSharesRequestMarshaller : object {
    private static DescribeDataSharesRequestMarshaller _instance;
    public static DescribeDataSharesRequestMarshaller Instance { get; }
    private static DescribeDataSharesRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DescribeDataSharesRequest publicRequest);
    internal static DescribeDataSharesRequestMarshaller GetInstance();
    public static DescribeDataSharesRequestMarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.DescribeDataSharesResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DescribeDataSharesResponseUnmarshaller _instance;
    public static DescribeDataSharesResponseUnmarshaller Instance { get; }
    private static DescribeDataSharesResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DescribeDataSharesResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DescribeDataSharesResponseUnmarshaller GetInstance();
    public static DescribeDataSharesResponseUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.DescribeDefaultClusterParametersRequestMarshaller : object {
    private static DescribeDefaultClusterParametersRequestMarshaller _instance;
    public static DescribeDefaultClusterParametersRequestMarshaller Instance { get; }
    private static DescribeDefaultClusterParametersRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DescribeDefaultClusterParametersRequest publicRequest);
    internal static DescribeDefaultClusterParametersRequestMarshaller GetInstance();
    public static DescribeDefaultClusterParametersRequestMarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.DescribeDefaultClusterParametersResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DescribeDefaultClusterParametersResponseUnmarshaller _instance;
    public static DescribeDefaultClusterParametersResponseUnmarshaller Instance { get; }
    private static DescribeDefaultClusterParametersResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DescribeDefaultClusterParametersResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DescribeDefaultClusterParametersResponseUnmarshaller GetInstance();
    public static DescribeDefaultClusterParametersResponseUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.DescribeEndpointAccessRequestMarshaller : object {
    private static DescribeEndpointAccessRequestMarshaller _instance;
    public static DescribeEndpointAccessRequestMarshaller Instance { get; }
    private static DescribeEndpointAccessRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DescribeEndpointAccessRequest publicRequest);
    internal static DescribeEndpointAccessRequestMarshaller GetInstance();
    public static DescribeEndpointAccessRequestMarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.DescribeEndpointAccessResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DescribeEndpointAccessResponseUnmarshaller _instance;
    public static DescribeEndpointAccessResponseUnmarshaller Instance { get; }
    private static DescribeEndpointAccessResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DescribeEndpointAccessResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DescribeEndpointAccessResponseUnmarshaller GetInstance();
    public static DescribeEndpointAccessResponseUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.DescribeEndpointAuthorizationRequestMarshaller : object {
    private static DescribeEndpointAuthorizationRequestMarshaller _instance;
    public static DescribeEndpointAuthorizationRequestMarshaller Instance { get; }
    private static DescribeEndpointAuthorizationRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DescribeEndpointAuthorizationRequest publicRequest);
    internal static DescribeEndpointAuthorizationRequestMarshaller GetInstance();
    public static DescribeEndpointAuthorizationRequestMarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.DescribeEndpointAuthorizationResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DescribeEndpointAuthorizationResponseUnmarshaller _instance;
    public static DescribeEndpointAuthorizationResponseUnmarshaller Instance { get; }
    private static DescribeEndpointAuthorizationResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DescribeEndpointAuthorizationResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DescribeEndpointAuthorizationResponseUnmarshaller GetInstance();
    public static DescribeEndpointAuthorizationResponseUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.DescribeEventCategoriesRequestMarshaller : object {
    private static DescribeEventCategoriesRequestMarshaller _instance;
    public static DescribeEventCategoriesRequestMarshaller Instance { get; }
    private static DescribeEventCategoriesRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DescribeEventCategoriesRequest publicRequest);
    internal static DescribeEventCategoriesRequestMarshaller GetInstance();
    public static DescribeEventCategoriesRequestMarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.DescribeEventCategoriesResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DescribeEventCategoriesResponseUnmarshaller _instance;
    public static DescribeEventCategoriesResponseUnmarshaller Instance { get; }
    private static DescribeEventCategoriesResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DescribeEventCategoriesResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DescribeEventCategoriesResponseUnmarshaller GetInstance();
    public static DescribeEventCategoriesResponseUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.DescribeEventsRequestMarshaller : object {
    private static DescribeEventsRequestMarshaller _instance;
    public static DescribeEventsRequestMarshaller Instance { get; }
    private static DescribeEventsRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DescribeEventsRequest publicRequest);
    internal static DescribeEventsRequestMarshaller GetInstance();
    public static DescribeEventsRequestMarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.DescribeEventsResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DescribeEventsResponseUnmarshaller _instance;
    public static DescribeEventsResponseUnmarshaller Instance { get; }
    private static DescribeEventsResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DescribeEventsResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DescribeEventsResponseUnmarshaller GetInstance();
    public static DescribeEventsResponseUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.DescribeEventSubscriptionsRequestMarshaller : object {
    private static DescribeEventSubscriptionsRequestMarshaller _instance;
    public static DescribeEventSubscriptionsRequestMarshaller Instance { get; }
    private static DescribeEventSubscriptionsRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DescribeEventSubscriptionsRequest publicRequest);
    internal static DescribeEventSubscriptionsRequestMarshaller GetInstance();
    public static DescribeEventSubscriptionsRequestMarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.DescribeEventSubscriptionsResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DescribeEventSubscriptionsResponseUnmarshaller _instance;
    public static DescribeEventSubscriptionsResponseUnmarshaller Instance { get; }
    private static DescribeEventSubscriptionsResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DescribeEventSubscriptionsResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DescribeEventSubscriptionsResponseUnmarshaller GetInstance();
    public static DescribeEventSubscriptionsResponseUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.DescribeHsmClientCertificatesRequestMarshaller : object {
    private static DescribeHsmClientCertificatesRequestMarshaller _instance;
    public static DescribeHsmClientCertificatesRequestMarshaller Instance { get; }
    private static DescribeHsmClientCertificatesRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DescribeHsmClientCertificatesRequest publicRequest);
    internal static DescribeHsmClientCertificatesRequestMarshaller GetInstance();
    public static DescribeHsmClientCertificatesRequestMarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.DescribeHsmClientCertificatesResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DescribeHsmClientCertificatesResponseUnmarshaller _instance;
    public static DescribeHsmClientCertificatesResponseUnmarshaller Instance { get; }
    private static DescribeHsmClientCertificatesResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DescribeHsmClientCertificatesResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DescribeHsmClientCertificatesResponseUnmarshaller GetInstance();
    public static DescribeHsmClientCertificatesResponseUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.DescribeHsmConfigurationsRequestMarshaller : object {
    private static DescribeHsmConfigurationsRequestMarshaller _instance;
    public static DescribeHsmConfigurationsRequestMarshaller Instance { get; }
    private static DescribeHsmConfigurationsRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DescribeHsmConfigurationsRequest publicRequest);
    internal static DescribeHsmConfigurationsRequestMarshaller GetInstance();
    public static DescribeHsmConfigurationsRequestMarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.DescribeHsmConfigurationsResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DescribeHsmConfigurationsResponseUnmarshaller _instance;
    public static DescribeHsmConfigurationsResponseUnmarshaller Instance { get; }
    private static DescribeHsmConfigurationsResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DescribeHsmConfigurationsResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DescribeHsmConfigurationsResponseUnmarshaller GetInstance();
    public static DescribeHsmConfigurationsResponseUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.DescribeInboundIntegrationsRequestMarshaller : object {
    private static DescribeInboundIntegrationsRequestMarshaller _instance;
    public static DescribeInboundIntegrationsRequestMarshaller Instance { get; }
    private static DescribeInboundIntegrationsRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DescribeInboundIntegrationsRequest publicRequest);
    internal static DescribeInboundIntegrationsRequestMarshaller GetInstance();
    public static DescribeInboundIntegrationsRequestMarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.DescribeInboundIntegrationsResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DescribeInboundIntegrationsResponseUnmarshaller _instance;
    public static DescribeInboundIntegrationsResponseUnmarshaller Instance { get; }
    private static DescribeInboundIntegrationsResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DescribeInboundIntegrationsResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DescribeInboundIntegrationsResponseUnmarshaller GetInstance();
    public static DescribeInboundIntegrationsResponseUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.DescribeLoggingStatusRequestMarshaller : object {
    private static DescribeLoggingStatusRequestMarshaller _instance;
    public static DescribeLoggingStatusRequestMarshaller Instance { get; }
    private static DescribeLoggingStatusRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DescribeLoggingStatusRequest publicRequest);
    internal static DescribeLoggingStatusRequestMarshaller GetInstance();
    public static DescribeLoggingStatusRequestMarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.DescribeLoggingStatusResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DescribeLoggingStatusResponseUnmarshaller _instance;
    public static DescribeLoggingStatusResponseUnmarshaller Instance { get; }
    private static DescribeLoggingStatusResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DescribeLoggingStatusResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DescribeLoggingStatusResponseUnmarshaller GetInstance();
    public static DescribeLoggingStatusResponseUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.DescribeNodeConfigurationOptionsRequestMarshaller : object {
    private static DescribeNodeConfigurationOptionsRequestMarshaller _instance;
    public static DescribeNodeConfigurationOptionsRequestMarshaller Instance { get; }
    private static DescribeNodeConfigurationOptionsRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DescribeNodeConfigurationOptionsRequest publicRequest);
    internal static DescribeNodeConfigurationOptionsRequestMarshaller GetInstance();
    public static DescribeNodeConfigurationOptionsRequestMarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.DescribeNodeConfigurationOptionsResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DescribeNodeConfigurationOptionsResponseUnmarshaller _instance;
    public static DescribeNodeConfigurationOptionsResponseUnmarshaller Instance { get; }
    private static DescribeNodeConfigurationOptionsResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DescribeNodeConfigurationOptionsResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DescribeNodeConfigurationOptionsResponseUnmarshaller GetInstance();
    public static DescribeNodeConfigurationOptionsResponseUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.DescribeOrderableClusterOptionsRequestMarshaller : object {
    private static DescribeOrderableClusterOptionsRequestMarshaller _instance;
    public static DescribeOrderableClusterOptionsRequestMarshaller Instance { get; }
    private static DescribeOrderableClusterOptionsRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DescribeOrderableClusterOptionsRequest publicRequest);
    internal static DescribeOrderableClusterOptionsRequestMarshaller GetInstance();
    public static DescribeOrderableClusterOptionsRequestMarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.DescribeOrderableClusterOptionsResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DescribeOrderableClusterOptionsResponseUnmarshaller _instance;
    public static DescribeOrderableClusterOptionsResponseUnmarshaller Instance { get; }
    private static DescribeOrderableClusterOptionsResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DescribeOrderableClusterOptionsResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DescribeOrderableClusterOptionsResponseUnmarshaller GetInstance();
    public static DescribeOrderableClusterOptionsResponseUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.DescribePartnersRequestMarshaller : object {
    private static DescribePartnersRequestMarshaller _instance;
    public static DescribePartnersRequestMarshaller Instance { get; }
    private static DescribePartnersRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DescribePartnersRequest publicRequest);
    internal static DescribePartnersRequestMarshaller GetInstance();
    public static DescribePartnersRequestMarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.DescribePartnersResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DescribePartnersResponseUnmarshaller _instance;
    public static DescribePartnersResponseUnmarshaller Instance { get; }
    private static DescribePartnersResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DescribePartnersResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DescribePartnersResponseUnmarshaller GetInstance();
    public static DescribePartnersResponseUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.DescribeRedshiftIdcApplicationsRequestMarshaller : object {
    private static DescribeRedshiftIdcApplicationsRequestMarshaller _instance;
    public static DescribeRedshiftIdcApplicationsRequestMarshaller Instance { get; }
    private static DescribeRedshiftIdcApplicationsRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DescribeRedshiftIdcApplicationsRequest publicRequest);
    internal static DescribeRedshiftIdcApplicationsRequestMarshaller GetInstance();
    public static DescribeRedshiftIdcApplicationsRequestMarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.DescribeRedshiftIdcApplicationsResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DescribeRedshiftIdcApplicationsResponseUnmarshaller _instance;
    public static DescribeRedshiftIdcApplicationsResponseUnmarshaller Instance { get; }
    private static DescribeRedshiftIdcApplicationsResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DescribeRedshiftIdcApplicationsResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DescribeRedshiftIdcApplicationsResponseUnmarshaller GetInstance();
    public static DescribeRedshiftIdcApplicationsResponseUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.DescribeReservedNodeExchangeStatusRequestMarshaller : object {
    private static DescribeReservedNodeExchangeStatusRequestMarshaller _instance;
    public static DescribeReservedNodeExchangeStatusRequestMarshaller Instance { get; }
    private static DescribeReservedNodeExchangeStatusRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DescribeReservedNodeExchangeStatusRequest publicRequest);
    internal static DescribeReservedNodeExchangeStatusRequestMarshaller GetInstance();
    public static DescribeReservedNodeExchangeStatusRequestMarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.DescribeReservedNodeExchangeStatusResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DescribeReservedNodeExchangeStatusResponseUnmarshaller _instance;
    public static DescribeReservedNodeExchangeStatusResponseUnmarshaller Instance { get; }
    private static DescribeReservedNodeExchangeStatusResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DescribeReservedNodeExchangeStatusResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DescribeReservedNodeExchangeStatusResponseUnmarshaller GetInstance();
    public static DescribeReservedNodeExchangeStatusResponseUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.DescribeReservedNodeOfferingsRequestMarshaller : object {
    private static DescribeReservedNodeOfferingsRequestMarshaller _instance;
    public static DescribeReservedNodeOfferingsRequestMarshaller Instance { get; }
    private static DescribeReservedNodeOfferingsRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DescribeReservedNodeOfferingsRequest publicRequest);
    internal static DescribeReservedNodeOfferingsRequestMarshaller GetInstance();
    public static DescribeReservedNodeOfferingsRequestMarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.DescribeReservedNodeOfferingsResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DescribeReservedNodeOfferingsResponseUnmarshaller _instance;
    public static DescribeReservedNodeOfferingsResponseUnmarshaller Instance { get; }
    private static DescribeReservedNodeOfferingsResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DescribeReservedNodeOfferingsResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DescribeReservedNodeOfferingsResponseUnmarshaller GetInstance();
    public static DescribeReservedNodeOfferingsResponseUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.DescribeReservedNodesRequestMarshaller : object {
    private static DescribeReservedNodesRequestMarshaller _instance;
    public static DescribeReservedNodesRequestMarshaller Instance { get; }
    private static DescribeReservedNodesRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DescribeReservedNodesRequest publicRequest);
    internal static DescribeReservedNodesRequestMarshaller GetInstance();
    public static DescribeReservedNodesRequestMarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.DescribeReservedNodesResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DescribeReservedNodesResponseUnmarshaller _instance;
    public static DescribeReservedNodesResponseUnmarshaller Instance { get; }
    private static DescribeReservedNodesResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DescribeReservedNodesResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DescribeReservedNodesResponseUnmarshaller GetInstance();
    public static DescribeReservedNodesResponseUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.DescribeResizeRequestMarshaller : object {
    private static DescribeResizeRequestMarshaller _instance;
    public static DescribeResizeRequestMarshaller Instance { get; }
    private static DescribeResizeRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DescribeResizeRequest publicRequest);
    internal static DescribeResizeRequestMarshaller GetInstance();
    public static DescribeResizeRequestMarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.DescribeResizeResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DescribeResizeResponseUnmarshaller _instance;
    public static DescribeResizeResponseUnmarshaller Instance { get; }
    private static DescribeResizeResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DescribeResizeResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DescribeResizeResponseUnmarshaller GetInstance();
    public static DescribeResizeResponseUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.DescribeScheduledActionsRequestMarshaller : object {
    private static DescribeScheduledActionsRequestMarshaller _instance;
    public static DescribeScheduledActionsRequestMarshaller Instance { get; }
    private static DescribeScheduledActionsRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DescribeScheduledActionsRequest publicRequest);
    internal static DescribeScheduledActionsRequestMarshaller GetInstance();
    public static DescribeScheduledActionsRequestMarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.DescribeScheduledActionsResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DescribeScheduledActionsResponseUnmarshaller _instance;
    public static DescribeScheduledActionsResponseUnmarshaller Instance { get; }
    private static DescribeScheduledActionsResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DescribeScheduledActionsResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DescribeScheduledActionsResponseUnmarshaller GetInstance();
    public static DescribeScheduledActionsResponseUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.DescribeSnapshotCopyGrantsRequestMarshaller : object {
    private static DescribeSnapshotCopyGrantsRequestMarshaller _instance;
    public static DescribeSnapshotCopyGrantsRequestMarshaller Instance { get; }
    private static DescribeSnapshotCopyGrantsRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DescribeSnapshotCopyGrantsRequest publicRequest);
    internal static DescribeSnapshotCopyGrantsRequestMarshaller GetInstance();
    public static DescribeSnapshotCopyGrantsRequestMarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.DescribeSnapshotCopyGrantsResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DescribeSnapshotCopyGrantsResponseUnmarshaller _instance;
    public static DescribeSnapshotCopyGrantsResponseUnmarshaller Instance { get; }
    private static DescribeSnapshotCopyGrantsResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DescribeSnapshotCopyGrantsResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DescribeSnapshotCopyGrantsResponseUnmarshaller GetInstance();
    public static DescribeSnapshotCopyGrantsResponseUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.DescribeSnapshotSchedulesRequestMarshaller : object {
    private static DescribeSnapshotSchedulesRequestMarshaller _instance;
    public static DescribeSnapshotSchedulesRequestMarshaller Instance { get; }
    private static DescribeSnapshotSchedulesRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DescribeSnapshotSchedulesRequest publicRequest);
    internal static DescribeSnapshotSchedulesRequestMarshaller GetInstance();
    public static DescribeSnapshotSchedulesRequestMarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.DescribeSnapshotSchedulesResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DescribeSnapshotSchedulesResponseUnmarshaller _instance;
    public static DescribeSnapshotSchedulesResponseUnmarshaller Instance { get; }
    private static DescribeSnapshotSchedulesResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DescribeSnapshotSchedulesResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DescribeSnapshotSchedulesResponseUnmarshaller GetInstance();
    public static DescribeSnapshotSchedulesResponseUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.DescribeStorageRequestMarshaller : object {
    private static DescribeStorageRequestMarshaller _instance;
    public static DescribeStorageRequestMarshaller Instance { get; }
    private static DescribeStorageRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DescribeStorageRequest publicRequest);
    internal static DescribeStorageRequestMarshaller GetInstance();
    public static DescribeStorageRequestMarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.DescribeStorageResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DescribeStorageResponseUnmarshaller _instance;
    public static DescribeStorageResponseUnmarshaller Instance { get; }
    private static DescribeStorageResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DescribeStorageResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DescribeStorageResponseUnmarshaller GetInstance();
    public static DescribeStorageResponseUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.DescribeTableRestoreStatusRequestMarshaller : object {
    private static DescribeTableRestoreStatusRequestMarshaller _instance;
    public static DescribeTableRestoreStatusRequestMarshaller Instance { get; }
    private static DescribeTableRestoreStatusRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DescribeTableRestoreStatusRequest publicRequest);
    internal static DescribeTableRestoreStatusRequestMarshaller GetInstance();
    public static DescribeTableRestoreStatusRequestMarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.DescribeTableRestoreStatusResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DescribeTableRestoreStatusResponseUnmarshaller _instance;
    public static DescribeTableRestoreStatusResponseUnmarshaller Instance { get; }
    private static DescribeTableRestoreStatusResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DescribeTableRestoreStatusResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DescribeTableRestoreStatusResponseUnmarshaller GetInstance();
    public static DescribeTableRestoreStatusResponseUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.DescribeTagsRequestMarshaller : object {
    private static DescribeTagsRequestMarshaller _instance;
    public static DescribeTagsRequestMarshaller Instance { get; }
    private static DescribeTagsRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DescribeTagsRequest publicRequest);
    internal static DescribeTagsRequestMarshaller GetInstance();
    public static DescribeTagsRequestMarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.DescribeTagsResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DescribeTagsResponseUnmarshaller _instance;
    public static DescribeTagsResponseUnmarshaller Instance { get; }
    private static DescribeTagsResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DescribeTagsResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DescribeTagsResponseUnmarshaller GetInstance();
    public static DescribeTagsResponseUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.DescribeUsageLimitsRequestMarshaller : object {
    private static DescribeUsageLimitsRequestMarshaller _instance;
    public static DescribeUsageLimitsRequestMarshaller Instance { get; }
    private static DescribeUsageLimitsRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DescribeUsageLimitsRequest publicRequest);
    internal static DescribeUsageLimitsRequestMarshaller GetInstance();
    public static DescribeUsageLimitsRequestMarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.DescribeUsageLimitsResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DescribeUsageLimitsResponseUnmarshaller _instance;
    public static DescribeUsageLimitsResponseUnmarshaller Instance { get; }
    private static DescribeUsageLimitsResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DescribeUsageLimitsResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DescribeUsageLimitsResponseUnmarshaller GetInstance();
    public static DescribeUsageLimitsResponseUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.DisableLoggingRequestMarshaller : object {
    private static DisableLoggingRequestMarshaller _instance;
    public static DisableLoggingRequestMarshaller Instance { get; }
    private static DisableLoggingRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DisableLoggingRequest publicRequest);
    internal static DisableLoggingRequestMarshaller GetInstance();
    public static DisableLoggingRequestMarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.DisableLoggingResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DisableLoggingResponseUnmarshaller _instance;
    public static DisableLoggingResponseUnmarshaller Instance { get; }
    private static DisableLoggingResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DisableLoggingResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DisableLoggingResponseUnmarshaller GetInstance();
    public static DisableLoggingResponseUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.DisableSnapshotCopyRequestMarshaller : object {
    private static DisableSnapshotCopyRequestMarshaller _instance;
    public static DisableSnapshotCopyRequestMarshaller Instance { get; }
    private static DisableSnapshotCopyRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DisableSnapshotCopyRequest publicRequest);
    internal static DisableSnapshotCopyRequestMarshaller GetInstance();
    public static DisableSnapshotCopyRequestMarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.DisableSnapshotCopyResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DisableSnapshotCopyResponseUnmarshaller _instance;
    public static DisableSnapshotCopyResponseUnmarshaller Instance { get; }
    private static DisableSnapshotCopyResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DisableSnapshotCopyResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DisableSnapshotCopyResponseUnmarshaller GetInstance();
    public static DisableSnapshotCopyResponseUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.DisassociateDataShareConsumerRequestMarshaller : object {
    private static DisassociateDataShareConsumerRequestMarshaller _instance;
    public static DisassociateDataShareConsumerRequestMarshaller Instance { get; }
    private static DisassociateDataShareConsumerRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DisassociateDataShareConsumerRequest publicRequest);
    internal static DisassociateDataShareConsumerRequestMarshaller GetInstance();
    public static DisassociateDataShareConsumerRequestMarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.DisassociateDataShareConsumerResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DisassociateDataShareConsumerResponseUnmarshaller _instance;
    public static DisassociateDataShareConsumerResponseUnmarshaller Instance { get; }
    private static DisassociateDataShareConsumerResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DisassociateDataShareConsumerResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DisassociateDataShareConsumerResponseUnmarshaller GetInstance();
    public static DisassociateDataShareConsumerResponseUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.EC2SecurityGroupUnmarshaller : object {
    private static EC2SecurityGroupUnmarshaller _instance;
    public static EC2SecurityGroupUnmarshaller Instance { get; }
    private static EC2SecurityGroupUnmarshaller();
    public sealed virtual EC2SecurityGroup Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual EC2SecurityGroup Unmarshall(JsonUnmarshallerContext context);
    public static EC2SecurityGroupUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.ElasticIpStatusUnmarshaller : object {
    private static ElasticIpStatusUnmarshaller _instance;
    public static ElasticIpStatusUnmarshaller Instance { get; }
    private static ElasticIpStatusUnmarshaller();
    public sealed virtual ElasticIpStatus Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ElasticIpStatus Unmarshall(JsonUnmarshallerContext context);
    public static ElasticIpStatusUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.EnableLoggingRequestMarshaller : object {
    private static EnableLoggingRequestMarshaller _instance;
    public static EnableLoggingRequestMarshaller Instance { get; }
    private static EnableLoggingRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(EnableLoggingRequest publicRequest);
    internal static EnableLoggingRequestMarshaller GetInstance();
    public static EnableLoggingRequestMarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.EnableLoggingResponseUnmarshaller : XmlResponseUnmarshaller {
    private static EnableLoggingResponseUnmarshaller _instance;
    public static EnableLoggingResponseUnmarshaller Instance { get; }
    private static EnableLoggingResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, EnableLoggingResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static EnableLoggingResponseUnmarshaller GetInstance();
    public static EnableLoggingResponseUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.EnableSnapshotCopyRequestMarshaller : object {
    private static EnableSnapshotCopyRequestMarshaller _instance;
    public static EnableSnapshotCopyRequestMarshaller Instance { get; }
    private static EnableSnapshotCopyRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(EnableSnapshotCopyRequest publicRequest);
    internal static EnableSnapshotCopyRequestMarshaller GetInstance();
    public static EnableSnapshotCopyRequestMarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.EnableSnapshotCopyResponseUnmarshaller : XmlResponseUnmarshaller {
    private static EnableSnapshotCopyResponseUnmarshaller _instance;
    public static EnableSnapshotCopyResponseUnmarshaller Instance { get; }
    private static EnableSnapshotCopyResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, EnableSnapshotCopyResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static EnableSnapshotCopyResponseUnmarshaller GetInstance();
    public static EnableSnapshotCopyResponseUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.EndpointAccessUnmarshaller : object {
    private static EndpointAccessUnmarshaller _instance;
    public static EndpointAccessUnmarshaller Instance { get; }
    private static EndpointAccessUnmarshaller();
    public sealed virtual EndpointAccess Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual EndpointAccess Unmarshall(JsonUnmarshallerContext context);
    public static EndpointAccessUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.EndpointAlreadyExistsExceptionUnmarshaller : object {
    private static EndpointAlreadyExistsExceptionUnmarshaller _instance;
    public static EndpointAlreadyExistsExceptionUnmarshaller Instance { get; }
    private static EndpointAlreadyExistsExceptionUnmarshaller();
    public sealed virtual EndpointAlreadyExistsException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual EndpointAlreadyExistsException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static EndpointAlreadyExistsExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.EndpointAuthorizationAlreadyExistsExceptionUnmarshaller : object {
    private static EndpointAuthorizationAlreadyExistsExceptionUnmarshaller _instance;
    public static EndpointAuthorizationAlreadyExistsExceptionUnmarshaller Instance { get; }
    private static EndpointAuthorizationAlreadyExistsExceptionUnmarshaller();
    public sealed virtual EndpointAuthorizationAlreadyExistsException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual EndpointAuthorizationAlreadyExistsException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static EndpointAuthorizationAlreadyExistsExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.EndpointAuthorizationNotFoundExceptionUnmarshaller : object {
    private static EndpointAuthorizationNotFoundExceptionUnmarshaller _instance;
    public static EndpointAuthorizationNotFoundExceptionUnmarshaller Instance { get; }
    private static EndpointAuthorizationNotFoundExceptionUnmarshaller();
    public sealed virtual EndpointAuthorizationNotFoundException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual EndpointAuthorizationNotFoundException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static EndpointAuthorizationNotFoundExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.EndpointAuthorizationsPerClusterLimitExceededExceptionUnmarshaller : object {
    private static EndpointAuthorizationsPerClusterLimitExceededExceptionUnmarshaller _instance;
    public static EndpointAuthorizationsPerClusterLimitExceededExceptionUnmarshaller Instance { get; }
    private static EndpointAuthorizationsPerClusterLimitExceededExceptionUnmarshaller();
    public sealed virtual EndpointAuthorizationsPerClusterLimitExceededException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual EndpointAuthorizationsPerClusterLimitExceededException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static EndpointAuthorizationsPerClusterLimitExceededExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.EndpointAuthorizationUnmarshaller : object {
    private static EndpointAuthorizationUnmarshaller _instance;
    public static EndpointAuthorizationUnmarshaller Instance { get; }
    private static EndpointAuthorizationUnmarshaller();
    public sealed virtual EndpointAuthorization Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual EndpointAuthorization Unmarshall(JsonUnmarshallerContext context);
    public static EndpointAuthorizationUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.EndpointNotFoundExceptionUnmarshaller : object {
    private static EndpointNotFoundExceptionUnmarshaller _instance;
    public static EndpointNotFoundExceptionUnmarshaller Instance { get; }
    private static EndpointNotFoundExceptionUnmarshaller();
    public sealed virtual EndpointNotFoundException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual EndpointNotFoundException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static EndpointNotFoundExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.EndpointsPerAuthorizationLimitExceededExceptionUnmarshaller : object {
    private static EndpointsPerAuthorizationLimitExceededExceptionUnmarshaller _instance;
    public static EndpointsPerAuthorizationLimitExceededExceptionUnmarshaller Instance { get; }
    private static EndpointsPerAuthorizationLimitExceededExceptionUnmarshaller();
    public sealed virtual EndpointsPerAuthorizationLimitExceededException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual EndpointsPerAuthorizationLimitExceededException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static EndpointsPerAuthorizationLimitExceededExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.EndpointsPerClusterLimitExceededExceptionUnmarshaller : object {
    private static EndpointsPerClusterLimitExceededExceptionUnmarshaller _instance;
    public static EndpointsPerClusterLimitExceededExceptionUnmarshaller Instance { get; }
    private static EndpointsPerClusterLimitExceededExceptionUnmarshaller();
    public sealed virtual EndpointsPerClusterLimitExceededException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual EndpointsPerClusterLimitExceededException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static EndpointsPerClusterLimitExceededExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.EndpointUnmarshaller : object {
    private static EndpointUnmarshaller _instance;
    public static EndpointUnmarshaller Instance { get; }
    private static EndpointUnmarshaller();
    public sealed virtual Endpoint Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual Endpoint Unmarshall(JsonUnmarshallerContext context);
    public static EndpointUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.EventCategoriesMapUnmarshaller : object {
    private static EventCategoriesMapUnmarshaller _instance;
    public static EventCategoriesMapUnmarshaller Instance { get; }
    private static EventCategoriesMapUnmarshaller();
    public sealed virtual EventCategoriesMap Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual EventCategoriesMap Unmarshall(JsonUnmarshallerContext context);
    public static EventCategoriesMapUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.EventInfoMapUnmarshaller : object {
    private static EventInfoMapUnmarshaller _instance;
    public static EventInfoMapUnmarshaller Instance { get; }
    private static EventInfoMapUnmarshaller();
    public sealed virtual EventInfoMap Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual EventInfoMap Unmarshall(JsonUnmarshallerContext context);
    public static EventInfoMapUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.EventSubscriptionQuotaExceededExceptionUnmarshaller : object {
    private static EventSubscriptionQuotaExceededExceptionUnmarshaller _instance;
    public static EventSubscriptionQuotaExceededExceptionUnmarshaller Instance { get; }
    private static EventSubscriptionQuotaExceededExceptionUnmarshaller();
    public sealed virtual EventSubscriptionQuotaExceededException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual EventSubscriptionQuotaExceededException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static EventSubscriptionQuotaExceededExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.EventSubscriptionUnmarshaller : object {
    private static EventSubscriptionUnmarshaller _instance;
    public static EventSubscriptionUnmarshaller Instance { get; }
    private static EventSubscriptionUnmarshaller();
    public sealed virtual EventSubscription Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual EventSubscription Unmarshall(JsonUnmarshallerContext context);
    public static EventSubscriptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.EventUnmarshaller : object {
    private static EventUnmarshaller _instance;
    public static EventUnmarshaller Instance { get; }
    private static EventUnmarshaller();
    public sealed virtual Event Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual Event Unmarshall(JsonUnmarshallerContext context);
    public static EventUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.FailoverPrimaryComputeRequestMarshaller : object {
    private static FailoverPrimaryComputeRequestMarshaller _instance;
    public static FailoverPrimaryComputeRequestMarshaller Instance { get; }
    private static FailoverPrimaryComputeRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(FailoverPrimaryComputeRequest publicRequest);
    internal static FailoverPrimaryComputeRequestMarshaller GetInstance();
    public static FailoverPrimaryComputeRequestMarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.FailoverPrimaryComputeResponseUnmarshaller : XmlResponseUnmarshaller {
    private static FailoverPrimaryComputeResponseUnmarshaller _instance;
    public static FailoverPrimaryComputeResponseUnmarshaller Instance { get; }
    private static FailoverPrimaryComputeResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, FailoverPrimaryComputeResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static FailoverPrimaryComputeResponseUnmarshaller GetInstance();
    public static FailoverPrimaryComputeResponseUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.GetClusterCredentialsRequestMarshaller : object {
    private static GetClusterCredentialsRequestMarshaller _instance;
    public static GetClusterCredentialsRequestMarshaller Instance { get; }
    private static GetClusterCredentialsRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(GetClusterCredentialsRequest publicRequest);
    internal static GetClusterCredentialsRequestMarshaller GetInstance();
    public static GetClusterCredentialsRequestMarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.GetClusterCredentialsResponseUnmarshaller : XmlResponseUnmarshaller {
    private static GetClusterCredentialsResponseUnmarshaller _instance;
    public static GetClusterCredentialsResponseUnmarshaller Instance { get; }
    private static GetClusterCredentialsResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, GetClusterCredentialsResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static GetClusterCredentialsResponseUnmarshaller GetInstance();
    public static GetClusterCredentialsResponseUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.GetClusterCredentialsWithIAMRequestMarshaller : object {
    private static GetClusterCredentialsWithIAMRequestMarshaller _instance;
    public static GetClusterCredentialsWithIAMRequestMarshaller Instance { get; }
    private static GetClusterCredentialsWithIAMRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(GetClusterCredentialsWithIAMRequest publicRequest);
    internal static GetClusterCredentialsWithIAMRequestMarshaller GetInstance();
    public static GetClusterCredentialsWithIAMRequestMarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.GetClusterCredentialsWithIAMResponseUnmarshaller : XmlResponseUnmarshaller {
    private static GetClusterCredentialsWithIAMResponseUnmarshaller _instance;
    public static GetClusterCredentialsWithIAMResponseUnmarshaller Instance { get; }
    private static GetClusterCredentialsWithIAMResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, GetClusterCredentialsWithIAMResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static GetClusterCredentialsWithIAMResponseUnmarshaller GetInstance();
    public static GetClusterCredentialsWithIAMResponseUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.GetReservedNodeExchangeConfigurationOptionsRequestMarshaller : object {
    private static GetReservedNodeExchangeConfigurationOptionsRequestMarshaller _instance;
    public static GetReservedNodeExchangeConfigurationOptionsRequestMarshaller Instance { get; }
    private static GetReservedNodeExchangeConfigurationOptionsRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(GetReservedNodeExchangeConfigurationOptionsRequest publicRequest);
    internal static GetReservedNodeExchangeConfigurationOptionsRequestMarshaller GetInstance();
    public static GetReservedNodeExchangeConfigurationOptionsRequestMarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.GetReservedNodeExchangeConfigurationOptionsResponseUnmarshaller : XmlResponseUnmarshaller {
    private static GetReservedNodeExchangeConfigurationOptionsResponseUnmarshaller _instance;
    public static GetReservedNodeExchangeConfigurationOptionsResponseUnmarshaller Instance { get; }
    private static GetReservedNodeExchangeConfigurationOptionsResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, GetReservedNodeExchangeConfigurationOptionsResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static GetReservedNodeExchangeConfigurationOptionsResponseUnmarshaller GetInstance();
    public static GetReservedNodeExchangeConfigurationOptionsResponseUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.GetReservedNodeExchangeOfferingsRequestMarshaller : object {
    private static GetReservedNodeExchangeOfferingsRequestMarshaller _instance;
    public static GetReservedNodeExchangeOfferingsRequestMarshaller Instance { get; }
    private static GetReservedNodeExchangeOfferingsRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(GetReservedNodeExchangeOfferingsRequest publicRequest);
    internal static GetReservedNodeExchangeOfferingsRequestMarshaller GetInstance();
    public static GetReservedNodeExchangeOfferingsRequestMarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.GetReservedNodeExchangeOfferingsResponseUnmarshaller : XmlResponseUnmarshaller {
    private static GetReservedNodeExchangeOfferingsResponseUnmarshaller _instance;
    public static GetReservedNodeExchangeOfferingsResponseUnmarshaller Instance { get; }
    private static GetReservedNodeExchangeOfferingsResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, GetReservedNodeExchangeOfferingsResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static GetReservedNodeExchangeOfferingsResponseUnmarshaller GetInstance();
    public static GetReservedNodeExchangeOfferingsResponseUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.GetResourcePolicyRequestMarshaller : object {
    private static GetResourcePolicyRequestMarshaller _instance;
    public static GetResourcePolicyRequestMarshaller Instance { get; }
    private static GetResourcePolicyRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(GetResourcePolicyRequest publicRequest);
    internal static GetResourcePolicyRequestMarshaller GetInstance();
    public static GetResourcePolicyRequestMarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.GetResourcePolicyResponseUnmarshaller : XmlResponseUnmarshaller {
    private static GetResourcePolicyResponseUnmarshaller _instance;
    public static GetResourcePolicyResponseUnmarshaller Instance { get; }
    private static GetResourcePolicyResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, GetResourcePolicyResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static GetResourcePolicyResponseUnmarshaller GetInstance();
    public static GetResourcePolicyResponseUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.HsmClientCertificateAlreadyExistsExceptionUnmarshaller : object {
    private static HsmClientCertificateAlreadyExistsExceptionUnmarshaller _instance;
    public static HsmClientCertificateAlreadyExistsExceptionUnmarshaller Instance { get; }
    private static HsmClientCertificateAlreadyExistsExceptionUnmarshaller();
    public sealed virtual HsmClientCertificateAlreadyExistsException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual HsmClientCertificateAlreadyExistsException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static HsmClientCertificateAlreadyExistsExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.HsmClientCertificateNotFoundExceptionUnmarshaller : object {
    private static HsmClientCertificateNotFoundExceptionUnmarshaller _instance;
    public static HsmClientCertificateNotFoundExceptionUnmarshaller Instance { get; }
    private static HsmClientCertificateNotFoundExceptionUnmarshaller();
    public sealed virtual HsmClientCertificateNotFoundException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual HsmClientCertificateNotFoundException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static HsmClientCertificateNotFoundExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.HsmClientCertificateQuotaExceededExceptionUnmarshaller : object {
    private static HsmClientCertificateQuotaExceededExceptionUnmarshaller _instance;
    public static HsmClientCertificateQuotaExceededExceptionUnmarshaller Instance { get; }
    private static HsmClientCertificateQuotaExceededExceptionUnmarshaller();
    public sealed virtual HsmClientCertificateQuotaExceededException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual HsmClientCertificateQuotaExceededException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static HsmClientCertificateQuotaExceededExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.HsmClientCertificateUnmarshaller : object {
    private static HsmClientCertificateUnmarshaller _instance;
    public static HsmClientCertificateUnmarshaller Instance { get; }
    private static HsmClientCertificateUnmarshaller();
    public sealed virtual HsmClientCertificate Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual HsmClientCertificate Unmarshall(JsonUnmarshallerContext context);
    public static HsmClientCertificateUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.HsmConfigurationAlreadyExistsExceptionUnmarshaller : object {
    private static HsmConfigurationAlreadyExistsExceptionUnmarshaller _instance;
    public static HsmConfigurationAlreadyExistsExceptionUnmarshaller Instance { get; }
    private static HsmConfigurationAlreadyExistsExceptionUnmarshaller();
    public sealed virtual HsmConfigurationAlreadyExistsException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual HsmConfigurationAlreadyExistsException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static HsmConfigurationAlreadyExistsExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.HsmConfigurationNotFoundExceptionUnmarshaller : object {
    private static HsmConfigurationNotFoundExceptionUnmarshaller _instance;
    public static HsmConfigurationNotFoundExceptionUnmarshaller Instance { get; }
    private static HsmConfigurationNotFoundExceptionUnmarshaller();
    public sealed virtual HsmConfigurationNotFoundException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual HsmConfigurationNotFoundException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static HsmConfigurationNotFoundExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.HsmConfigurationQuotaExceededExceptionUnmarshaller : object {
    private static HsmConfigurationQuotaExceededExceptionUnmarshaller _instance;
    public static HsmConfigurationQuotaExceededExceptionUnmarshaller Instance { get; }
    private static HsmConfigurationQuotaExceededExceptionUnmarshaller();
    public sealed virtual HsmConfigurationQuotaExceededException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual HsmConfigurationQuotaExceededException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static HsmConfigurationQuotaExceededExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.HsmConfigurationUnmarshaller : object {
    private static HsmConfigurationUnmarshaller _instance;
    public static HsmConfigurationUnmarshaller Instance { get; }
    private static HsmConfigurationUnmarshaller();
    public sealed virtual HsmConfiguration Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual HsmConfiguration Unmarshall(JsonUnmarshallerContext context);
    public static HsmConfigurationUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.HsmStatusUnmarshaller : object {
    private static HsmStatusUnmarshaller _instance;
    public static HsmStatusUnmarshaller Instance { get; }
    private static HsmStatusUnmarshaller();
    public sealed virtual HsmStatus Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual HsmStatus Unmarshall(JsonUnmarshallerContext context);
    public static HsmStatusUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.InboundIntegrationUnmarshaller : object {
    private static InboundIntegrationUnmarshaller _instance;
    public static InboundIntegrationUnmarshaller Instance { get; }
    private static InboundIntegrationUnmarshaller();
    public sealed virtual InboundIntegration Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual InboundIntegration Unmarshall(JsonUnmarshallerContext context);
    public static InboundIntegrationUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.IncompatibleOrderableOptionsExceptionUnmarshaller : object {
    private static IncompatibleOrderableOptionsExceptionUnmarshaller _instance;
    public static IncompatibleOrderableOptionsExceptionUnmarshaller Instance { get; }
    private static IncompatibleOrderableOptionsExceptionUnmarshaller();
    public sealed virtual IncompatibleOrderableOptionsException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual IncompatibleOrderableOptionsException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static IncompatibleOrderableOptionsExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.InProgressTableRestoreQuotaExceededExceptionUnmarshaller : object {
    private static InProgressTableRestoreQuotaExceededExceptionUnmarshaller _instance;
    public static InProgressTableRestoreQuotaExceededExceptionUnmarshaller Instance { get; }
    private static InProgressTableRestoreQuotaExceededExceptionUnmarshaller();
    public sealed virtual InProgressTableRestoreQuotaExceededException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual InProgressTableRestoreQuotaExceededException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static InProgressTableRestoreQuotaExceededExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.InsufficientClusterCapacityExceptionUnmarshaller : object {
    private static InsufficientClusterCapacityExceptionUnmarshaller _instance;
    public static InsufficientClusterCapacityExceptionUnmarshaller Instance { get; }
    private static InsufficientClusterCapacityExceptionUnmarshaller();
    public sealed virtual InsufficientClusterCapacityException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual InsufficientClusterCapacityException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static InsufficientClusterCapacityExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.InsufficientS3BucketPolicyExceptionUnmarshaller : object {
    private static InsufficientS3BucketPolicyExceptionUnmarshaller _instance;
    public static InsufficientS3BucketPolicyExceptionUnmarshaller Instance { get; }
    private static InsufficientS3BucketPolicyExceptionUnmarshaller();
    public sealed virtual InsufficientS3BucketPolicyException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual InsufficientS3BucketPolicyException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static InsufficientS3BucketPolicyExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.IntegrationErrorUnmarshaller : object {
    private static IntegrationErrorUnmarshaller _instance;
    public static IntegrationErrorUnmarshaller Instance { get; }
    private static IntegrationErrorUnmarshaller();
    public sealed virtual IntegrationError Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual IntegrationError Unmarshall(JsonUnmarshallerContext context);
    public static IntegrationErrorUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.IntegrationNotFoundExceptionUnmarshaller : object {
    private static IntegrationNotFoundExceptionUnmarshaller _instance;
    public static IntegrationNotFoundExceptionUnmarshaller Instance { get; }
    private static IntegrationNotFoundExceptionUnmarshaller();
    public sealed virtual IntegrationNotFoundException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual IntegrationNotFoundException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static IntegrationNotFoundExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.InvalidAuthenticationProfileRequestExceptionUnmarshaller : object {
    private static InvalidAuthenticationProfileRequestExceptionUnmarshaller _instance;
    public static InvalidAuthenticationProfileRequestExceptionUnmarshaller Instance { get; }
    private static InvalidAuthenticationProfileRequestExceptionUnmarshaller();
    public sealed virtual InvalidAuthenticationProfileRequestException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual InvalidAuthenticationProfileRequestException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static InvalidAuthenticationProfileRequestExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.InvalidAuthorizationStateExceptionUnmarshaller : object {
    private static InvalidAuthorizationStateExceptionUnmarshaller _instance;
    public static InvalidAuthorizationStateExceptionUnmarshaller Instance { get; }
    private static InvalidAuthorizationStateExceptionUnmarshaller();
    public sealed virtual InvalidAuthorizationStateException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual InvalidAuthorizationStateException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static InvalidAuthorizationStateExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.InvalidClusterParameterGroupStateExceptionUnmarshaller : object {
    private static InvalidClusterParameterGroupStateExceptionUnmarshaller _instance;
    public static InvalidClusterParameterGroupStateExceptionUnmarshaller Instance { get; }
    private static InvalidClusterParameterGroupStateExceptionUnmarshaller();
    public sealed virtual InvalidClusterParameterGroupStateException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual InvalidClusterParameterGroupStateException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static InvalidClusterParameterGroupStateExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.InvalidClusterSecurityGroupStateExceptionUnmarshaller : object {
    private static InvalidClusterSecurityGroupStateExceptionUnmarshaller _instance;
    public static InvalidClusterSecurityGroupStateExceptionUnmarshaller Instance { get; }
    private static InvalidClusterSecurityGroupStateExceptionUnmarshaller();
    public sealed virtual InvalidClusterSecurityGroupStateException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual InvalidClusterSecurityGroupStateException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static InvalidClusterSecurityGroupStateExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.InvalidClusterSnapshotScheduleStateExceptionUnmarshaller : object {
    private static InvalidClusterSnapshotScheduleStateExceptionUnmarshaller _instance;
    public static InvalidClusterSnapshotScheduleStateExceptionUnmarshaller Instance { get; }
    private static InvalidClusterSnapshotScheduleStateExceptionUnmarshaller();
    public sealed virtual InvalidClusterSnapshotScheduleStateException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual InvalidClusterSnapshotScheduleStateException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static InvalidClusterSnapshotScheduleStateExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.InvalidClusterSnapshotStateExceptionUnmarshaller : object {
    private static InvalidClusterSnapshotStateExceptionUnmarshaller _instance;
    public static InvalidClusterSnapshotStateExceptionUnmarshaller Instance { get; }
    private static InvalidClusterSnapshotStateExceptionUnmarshaller();
    public sealed virtual InvalidClusterSnapshotStateException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual InvalidClusterSnapshotStateException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static InvalidClusterSnapshotStateExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.InvalidClusterStateExceptionUnmarshaller : object {
    private static InvalidClusterStateExceptionUnmarshaller _instance;
    public static InvalidClusterStateExceptionUnmarshaller Instance { get; }
    private static InvalidClusterStateExceptionUnmarshaller();
    public sealed virtual InvalidClusterStateException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual InvalidClusterStateException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static InvalidClusterStateExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.InvalidClusterSubnetGroupStateExceptionUnmarshaller : object {
    private static InvalidClusterSubnetGroupStateExceptionUnmarshaller _instance;
    public static InvalidClusterSubnetGroupStateExceptionUnmarshaller Instance { get; }
    private static InvalidClusterSubnetGroupStateExceptionUnmarshaller();
    public sealed virtual InvalidClusterSubnetGroupStateException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual InvalidClusterSubnetGroupStateException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static InvalidClusterSubnetGroupStateExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.InvalidClusterSubnetStateExceptionUnmarshaller : object {
    private static InvalidClusterSubnetStateExceptionUnmarshaller _instance;
    public static InvalidClusterSubnetStateExceptionUnmarshaller Instance { get; }
    private static InvalidClusterSubnetStateExceptionUnmarshaller();
    public sealed virtual InvalidClusterSubnetStateException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual InvalidClusterSubnetStateException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static InvalidClusterSubnetStateExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.InvalidClusterTrackExceptionUnmarshaller : object {
    private static InvalidClusterTrackExceptionUnmarshaller _instance;
    public static InvalidClusterTrackExceptionUnmarshaller Instance { get; }
    private static InvalidClusterTrackExceptionUnmarshaller();
    public sealed virtual InvalidClusterTrackException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual InvalidClusterTrackException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static InvalidClusterTrackExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.InvalidDataShareExceptionUnmarshaller : object {
    private static InvalidDataShareExceptionUnmarshaller _instance;
    public static InvalidDataShareExceptionUnmarshaller Instance { get; }
    private static InvalidDataShareExceptionUnmarshaller();
    public sealed virtual InvalidDataShareException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual InvalidDataShareException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static InvalidDataShareExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.InvalidElasticIpExceptionUnmarshaller : object {
    private static InvalidElasticIpExceptionUnmarshaller _instance;
    public static InvalidElasticIpExceptionUnmarshaller Instance { get; }
    private static InvalidElasticIpExceptionUnmarshaller();
    public sealed virtual InvalidElasticIpException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual InvalidElasticIpException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static InvalidElasticIpExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.InvalidEndpointStateExceptionUnmarshaller : object {
    private static InvalidEndpointStateExceptionUnmarshaller _instance;
    public static InvalidEndpointStateExceptionUnmarshaller Instance { get; }
    private static InvalidEndpointStateExceptionUnmarshaller();
    public sealed virtual InvalidEndpointStateException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual InvalidEndpointStateException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static InvalidEndpointStateExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.InvalidHsmClientCertificateStateExceptionUnmarshaller : object {
    private static InvalidHsmClientCertificateStateExceptionUnmarshaller _instance;
    public static InvalidHsmClientCertificateStateExceptionUnmarshaller Instance { get; }
    private static InvalidHsmClientCertificateStateExceptionUnmarshaller();
    public sealed virtual InvalidHsmClientCertificateStateException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual InvalidHsmClientCertificateStateException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static InvalidHsmClientCertificateStateExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.InvalidHsmConfigurationStateExceptionUnmarshaller : object {
    private static InvalidHsmConfigurationStateExceptionUnmarshaller _instance;
    public static InvalidHsmConfigurationStateExceptionUnmarshaller Instance { get; }
    private static InvalidHsmConfigurationStateExceptionUnmarshaller();
    public sealed virtual InvalidHsmConfigurationStateException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual InvalidHsmConfigurationStateException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static InvalidHsmConfigurationStateExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.InvalidNamespaceExceptionUnmarshaller : object {
    private static InvalidNamespaceExceptionUnmarshaller _instance;
    public static InvalidNamespaceExceptionUnmarshaller Instance { get; }
    private static InvalidNamespaceExceptionUnmarshaller();
    public sealed virtual InvalidNamespaceException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual InvalidNamespaceException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static InvalidNamespaceExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.InvalidPolicyExceptionUnmarshaller : object {
    private static InvalidPolicyExceptionUnmarshaller _instance;
    public static InvalidPolicyExceptionUnmarshaller Instance { get; }
    private static InvalidPolicyExceptionUnmarshaller();
    public sealed virtual InvalidPolicyException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual InvalidPolicyException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static InvalidPolicyExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.InvalidReservedNodeStateExceptionUnmarshaller : object {
    private static InvalidReservedNodeStateExceptionUnmarshaller _instance;
    public static InvalidReservedNodeStateExceptionUnmarshaller Instance { get; }
    private static InvalidReservedNodeStateExceptionUnmarshaller();
    public sealed virtual InvalidReservedNodeStateException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual InvalidReservedNodeStateException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static InvalidReservedNodeStateExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.InvalidRestoreExceptionUnmarshaller : object {
    private static InvalidRestoreExceptionUnmarshaller _instance;
    public static InvalidRestoreExceptionUnmarshaller Instance { get; }
    private static InvalidRestoreExceptionUnmarshaller();
    public sealed virtual InvalidRestoreException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual InvalidRestoreException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static InvalidRestoreExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.InvalidRetentionPeriodExceptionUnmarshaller : object {
    private static InvalidRetentionPeriodExceptionUnmarshaller _instance;
    public static InvalidRetentionPeriodExceptionUnmarshaller Instance { get; }
    private static InvalidRetentionPeriodExceptionUnmarshaller();
    public sealed virtual InvalidRetentionPeriodException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual InvalidRetentionPeriodException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static InvalidRetentionPeriodExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.InvalidS3BucketNameExceptionUnmarshaller : object {
    private static InvalidS3BucketNameExceptionUnmarshaller _instance;
    public static InvalidS3BucketNameExceptionUnmarshaller Instance { get; }
    private static InvalidS3BucketNameExceptionUnmarshaller();
    public sealed virtual InvalidS3BucketNameException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual InvalidS3BucketNameException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static InvalidS3BucketNameExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.InvalidS3KeyPrefixExceptionUnmarshaller : object {
    private static InvalidS3KeyPrefixExceptionUnmarshaller _instance;
    public static InvalidS3KeyPrefixExceptionUnmarshaller Instance { get; }
    private static InvalidS3KeyPrefixExceptionUnmarshaller();
    public sealed virtual InvalidS3KeyPrefixException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual InvalidS3KeyPrefixException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static InvalidS3KeyPrefixExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.InvalidScheduledActionExceptionUnmarshaller : object {
    private static InvalidScheduledActionExceptionUnmarshaller _instance;
    public static InvalidScheduledActionExceptionUnmarshaller Instance { get; }
    private static InvalidScheduledActionExceptionUnmarshaller();
    public sealed virtual InvalidScheduledActionException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual InvalidScheduledActionException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static InvalidScheduledActionExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.InvalidScheduleExceptionUnmarshaller : object {
    private static InvalidScheduleExceptionUnmarshaller _instance;
    public static InvalidScheduleExceptionUnmarshaller Instance { get; }
    private static InvalidScheduleExceptionUnmarshaller();
    public sealed virtual InvalidScheduleException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual InvalidScheduleException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static InvalidScheduleExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.InvalidSnapshotCopyGrantStateExceptionUnmarshaller : object {
    private static InvalidSnapshotCopyGrantStateExceptionUnmarshaller _instance;
    public static InvalidSnapshotCopyGrantStateExceptionUnmarshaller Instance { get; }
    private static InvalidSnapshotCopyGrantStateExceptionUnmarshaller();
    public sealed virtual InvalidSnapshotCopyGrantStateException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual InvalidSnapshotCopyGrantStateException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static InvalidSnapshotCopyGrantStateExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.InvalidSubnetExceptionUnmarshaller : object {
    private static InvalidSubnetExceptionUnmarshaller _instance;
    public static InvalidSubnetExceptionUnmarshaller Instance { get; }
    private static InvalidSubnetExceptionUnmarshaller();
    public sealed virtual InvalidSubnetException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual InvalidSubnetException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static InvalidSubnetExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.InvalidSubscriptionStateExceptionUnmarshaller : object {
    private static InvalidSubscriptionStateExceptionUnmarshaller _instance;
    public static InvalidSubscriptionStateExceptionUnmarshaller Instance { get; }
    private static InvalidSubscriptionStateExceptionUnmarshaller();
    public sealed virtual InvalidSubscriptionStateException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual InvalidSubscriptionStateException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static InvalidSubscriptionStateExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.InvalidTableRestoreArgumentExceptionUnmarshaller : object {
    private static InvalidTableRestoreArgumentExceptionUnmarshaller _instance;
    public static InvalidTableRestoreArgumentExceptionUnmarshaller Instance { get; }
    private static InvalidTableRestoreArgumentExceptionUnmarshaller();
    public sealed virtual InvalidTableRestoreArgumentException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual InvalidTableRestoreArgumentException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static InvalidTableRestoreArgumentExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.InvalidTagExceptionUnmarshaller : object {
    private static InvalidTagExceptionUnmarshaller _instance;
    public static InvalidTagExceptionUnmarshaller Instance { get; }
    private static InvalidTagExceptionUnmarshaller();
    public sealed virtual InvalidTagException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual InvalidTagException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static InvalidTagExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.InvalidUsageLimitExceptionUnmarshaller : object {
    private static InvalidUsageLimitExceptionUnmarshaller _instance;
    public static InvalidUsageLimitExceptionUnmarshaller Instance { get; }
    private static InvalidUsageLimitExceptionUnmarshaller();
    public sealed virtual InvalidUsageLimitException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual InvalidUsageLimitException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static InvalidUsageLimitExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.InvalidVPCNetworkStateExceptionUnmarshaller : object {
    private static InvalidVPCNetworkStateExceptionUnmarshaller _instance;
    public static InvalidVPCNetworkStateExceptionUnmarshaller Instance { get; }
    private static InvalidVPCNetworkStateExceptionUnmarshaller();
    public sealed virtual InvalidVPCNetworkStateException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual InvalidVPCNetworkStateException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static InvalidVPCNetworkStateExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.IPRangeUnmarshaller : object {
    private static IPRangeUnmarshaller _instance;
    public static IPRangeUnmarshaller Instance { get; }
    private static IPRangeUnmarshaller();
    public sealed virtual IPRange Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual IPRange Unmarshall(JsonUnmarshallerContext context);
    public static IPRangeUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.Ipv6CidrBlockNotFoundExceptionUnmarshaller : object {
    private static Ipv6CidrBlockNotFoundExceptionUnmarshaller _instance;
    public static Ipv6CidrBlockNotFoundExceptionUnmarshaller Instance { get; }
    private static Ipv6CidrBlockNotFoundExceptionUnmarshaller();
    public sealed virtual Ipv6CidrBlockNotFoundException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual Ipv6CidrBlockNotFoundException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static Ipv6CidrBlockNotFoundExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.LakeFormationQueryUnmarshaller : object {
    private static LakeFormationQueryUnmarshaller _instance;
    public static LakeFormationQueryUnmarshaller Instance { get; }
    private static LakeFormationQueryUnmarshaller();
    public sealed virtual LakeFormationQuery Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual LakeFormationQuery Unmarshall(JsonUnmarshallerContext context);
    public static LakeFormationQueryUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.LakeFormationScopeUnionUnmarshaller : object {
    private static LakeFormationScopeUnionUnmarshaller _instance;
    public static LakeFormationScopeUnionUnmarshaller Instance { get; }
    private static LakeFormationScopeUnionUnmarshaller();
    public sealed virtual LakeFormationScopeUnion Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual LakeFormationScopeUnion Unmarshall(JsonUnmarshallerContext context);
    public static LakeFormationScopeUnionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.LimitExceededExceptionUnmarshaller : object {
    private static LimitExceededExceptionUnmarshaller _instance;
    public static LimitExceededExceptionUnmarshaller Instance { get; }
    private static LimitExceededExceptionUnmarshaller();
    public sealed virtual LimitExceededException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual LimitExceededException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static LimitExceededExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.ListRecommendationsRequestMarshaller : object {
    private static ListRecommendationsRequestMarshaller _instance;
    public static ListRecommendationsRequestMarshaller Instance { get; }
    private static ListRecommendationsRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListRecommendationsRequest publicRequest);
    internal static ListRecommendationsRequestMarshaller GetInstance();
    public static ListRecommendationsRequestMarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.ListRecommendationsResponseUnmarshaller : XmlResponseUnmarshaller {
    private static ListRecommendationsResponseUnmarshaller _instance;
    public static ListRecommendationsResponseUnmarshaller Instance { get; }
    private static ListRecommendationsResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, ListRecommendationsResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ListRecommendationsResponseUnmarshaller GetInstance();
    public static ListRecommendationsResponseUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.MaintenanceTrackUnmarshaller : object {
    private static MaintenanceTrackUnmarshaller _instance;
    public static MaintenanceTrackUnmarshaller Instance { get; }
    private static MaintenanceTrackUnmarshaller();
    public sealed virtual MaintenanceTrack Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual MaintenanceTrack Unmarshall(JsonUnmarshallerContext context);
    public static MaintenanceTrackUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.ModifyAquaConfigurationRequestMarshaller : object {
    private static ModifyAquaConfigurationRequestMarshaller _instance;
    public static ModifyAquaConfigurationRequestMarshaller Instance { get; }
    private static ModifyAquaConfigurationRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ModifyAquaConfigurationRequest publicRequest);
    internal static ModifyAquaConfigurationRequestMarshaller GetInstance();
    public static ModifyAquaConfigurationRequestMarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.ModifyAquaConfigurationResponseUnmarshaller : XmlResponseUnmarshaller {
    private static ModifyAquaConfigurationResponseUnmarshaller _instance;
    public static ModifyAquaConfigurationResponseUnmarshaller Instance { get; }
    private static ModifyAquaConfigurationResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, ModifyAquaConfigurationResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ModifyAquaConfigurationResponseUnmarshaller GetInstance();
    public static ModifyAquaConfigurationResponseUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.ModifyAuthenticationProfileRequestMarshaller : object {
    private static ModifyAuthenticationProfileRequestMarshaller _instance;
    public static ModifyAuthenticationProfileRequestMarshaller Instance { get; }
    private static ModifyAuthenticationProfileRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ModifyAuthenticationProfileRequest publicRequest);
    internal static ModifyAuthenticationProfileRequestMarshaller GetInstance();
    public static ModifyAuthenticationProfileRequestMarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.ModifyAuthenticationProfileResponseUnmarshaller : XmlResponseUnmarshaller {
    private static ModifyAuthenticationProfileResponseUnmarshaller _instance;
    public static ModifyAuthenticationProfileResponseUnmarshaller Instance { get; }
    private static ModifyAuthenticationProfileResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, ModifyAuthenticationProfileResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ModifyAuthenticationProfileResponseUnmarshaller GetInstance();
    public static ModifyAuthenticationProfileResponseUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.ModifyClusterDbRevisionRequestMarshaller : object {
    private static ModifyClusterDbRevisionRequestMarshaller _instance;
    public static ModifyClusterDbRevisionRequestMarshaller Instance { get; }
    private static ModifyClusterDbRevisionRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ModifyClusterDbRevisionRequest publicRequest);
    internal static ModifyClusterDbRevisionRequestMarshaller GetInstance();
    public static ModifyClusterDbRevisionRequestMarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.ModifyClusterDbRevisionResponseUnmarshaller : XmlResponseUnmarshaller {
    private static ModifyClusterDbRevisionResponseUnmarshaller _instance;
    public static ModifyClusterDbRevisionResponseUnmarshaller Instance { get; }
    private static ModifyClusterDbRevisionResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, ModifyClusterDbRevisionResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ModifyClusterDbRevisionResponseUnmarshaller GetInstance();
    public static ModifyClusterDbRevisionResponseUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.ModifyClusterIamRolesRequestMarshaller : object {
    private static ModifyClusterIamRolesRequestMarshaller _instance;
    public static ModifyClusterIamRolesRequestMarshaller Instance { get; }
    private static ModifyClusterIamRolesRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ModifyClusterIamRolesRequest publicRequest);
    internal static ModifyClusterIamRolesRequestMarshaller GetInstance();
    public static ModifyClusterIamRolesRequestMarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.ModifyClusterIamRolesResponseUnmarshaller : XmlResponseUnmarshaller {
    private static ModifyClusterIamRolesResponseUnmarshaller _instance;
    public static ModifyClusterIamRolesResponseUnmarshaller Instance { get; }
    private static ModifyClusterIamRolesResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, ModifyClusterIamRolesResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ModifyClusterIamRolesResponseUnmarshaller GetInstance();
    public static ModifyClusterIamRolesResponseUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.ModifyClusterMaintenanceRequestMarshaller : object {
    private static ModifyClusterMaintenanceRequestMarshaller _instance;
    public static ModifyClusterMaintenanceRequestMarshaller Instance { get; }
    private static ModifyClusterMaintenanceRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ModifyClusterMaintenanceRequest publicRequest);
    internal static ModifyClusterMaintenanceRequestMarshaller GetInstance();
    public static ModifyClusterMaintenanceRequestMarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.ModifyClusterMaintenanceResponseUnmarshaller : XmlResponseUnmarshaller {
    private static ModifyClusterMaintenanceResponseUnmarshaller _instance;
    public static ModifyClusterMaintenanceResponseUnmarshaller Instance { get; }
    private static ModifyClusterMaintenanceResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, ModifyClusterMaintenanceResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ModifyClusterMaintenanceResponseUnmarshaller GetInstance();
    public static ModifyClusterMaintenanceResponseUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.ModifyClusterParameterGroupRequestMarshaller : object {
    private static ModifyClusterParameterGroupRequestMarshaller _instance;
    public static ModifyClusterParameterGroupRequestMarshaller Instance { get; }
    private static ModifyClusterParameterGroupRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ModifyClusterParameterGroupRequest publicRequest);
    internal static ModifyClusterParameterGroupRequestMarshaller GetInstance();
    public static ModifyClusterParameterGroupRequestMarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.ModifyClusterParameterGroupResponseUnmarshaller : XmlResponseUnmarshaller {
    private static ModifyClusterParameterGroupResponseUnmarshaller _instance;
    public static ModifyClusterParameterGroupResponseUnmarshaller Instance { get; }
    private static ModifyClusterParameterGroupResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, ModifyClusterParameterGroupResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ModifyClusterParameterGroupResponseUnmarshaller GetInstance();
    public static ModifyClusterParameterGroupResponseUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.ModifyClusterRequestMarshaller : object {
    private static ModifyClusterRequestMarshaller _instance;
    public static ModifyClusterRequestMarshaller Instance { get; }
    private static ModifyClusterRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ModifyClusterRequest publicRequest);
    internal static ModifyClusterRequestMarshaller GetInstance();
    public static ModifyClusterRequestMarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.ModifyClusterResponseUnmarshaller : XmlResponseUnmarshaller {
    private static ModifyClusterResponseUnmarshaller _instance;
    public static ModifyClusterResponseUnmarshaller Instance { get; }
    private static ModifyClusterResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, ModifyClusterResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ModifyClusterResponseUnmarshaller GetInstance();
    public static ModifyClusterResponseUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.ModifyClusterSnapshotRequestMarshaller : object {
    private static ModifyClusterSnapshotRequestMarshaller _instance;
    public static ModifyClusterSnapshotRequestMarshaller Instance { get; }
    private static ModifyClusterSnapshotRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ModifyClusterSnapshotRequest publicRequest);
    internal static ModifyClusterSnapshotRequestMarshaller GetInstance();
    public static ModifyClusterSnapshotRequestMarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.ModifyClusterSnapshotResponseUnmarshaller : XmlResponseUnmarshaller {
    private static ModifyClusterSnapshotResponseUnmarshaller _instance;
    public static ModifyClusterSnapshotResponseUnmarshaller Instance { get; }
    private static ModifyClusterSnapshotResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, ModifyClusterSnapshotResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ModifyClusterSnapshotResponseUnmarshaller GetInstance();
    public static ModifyClusterSnapshotResponseUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.ModifyClusterSnapshotScheduleRequestMarshaller : object {
    private static ModifyClusterSnapshotScheduleRequestMarshaller _instance;
    public static ModifyClusterSnapshotScheduleRequestMarshaller Instance { get; }
    private static ModifyClusterSnapshotScheduleRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ModifyClusterSnapshotScheduleRequest publicRequest);
    internal static ModifyClusterSnapshotScheduleRequestMarshaller GetInstance();
    public static ModifyClusterSnapshotScheduleRequestMarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.ModifyClusterSnapshotScheduleResponseUnmarshaller : XmlResponseUnmarshaller {
    private static ModifyClusterSnapshotScheduleResponseUnmarshaller _instance;
    public static ModifyClusterSnapshotScheduleResponseUnmarshaller Instance { get; }
    private static ModifyClusterSnapshotScheduleResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, ModifyClusterSnapshotScheduleResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ModifyClusterSnapshotScheduleResponseUnmarshaller GetInstance();
    public static ModifyClusterSnapshotScheduleResponseUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.ModifyClusterSubnetGroupRequestMarshaller : object {
    private static ModifyClusterSubnetGroupRequestMarshaller _instance;
    public static ModifyClusterSubnetGroupRequestMarshaller Instance { get; }
    private static ModifyClusterSubnetGroupRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ModifyClusterSubnetGroupRequest publicRequest);
    internal static ModifyClusterSubnetGroupRequestMarshaller GetInstance();
    public static ModifyClusterSubnetGroupRequestMarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.ModifyClusterSubnetGroupResponseUnmarshaller : XmlResponseUnmarshaller {
    private static ModifyClusterSubnetGroupResponseUnmarshaller _instance;
    public static ModifyClusterSubnetGroupResponseUnmarshaller Instance { get; }
    private static ModifyClusterSubnetGroupResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, ModifyClusterSubnetGroupResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ModifyClusterSubnetGroupResponseUnmarshaller GetInstance();
    public static ModifyClusterSubnetGroupResponseUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.ModifyCustomDomainAssociationRequestMarshaller : object {
    private static ModifyCustomDomainAssociationRequestMarshaller _instance;
    public static ModifyCustomDomainAssociationRequestMarshaller Instance { get; }
    private static ModifyCustomDomainAssociationRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ModifyCustomDomainAssociationRequest publicRequest);
    internal static ModifyCustomDomainAssociationRequestMarshaller GetInstance();
    public static ModifyCustomDomainAssociationRequestMarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.ModifyCustomDomainAssociationResponseUnmarshaller : XmlResponseUnmarshaller {
    private static ModifyCustomDomainAssociationResponseUnmarshaller _instance;
    public static ModifyCustomDomainAssociationResponseUnmarshaller Instance { get; }
    private static ModifyCustomDomainAssociationResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, ModifyCustomDomainAssociationResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ModifyCustomDomainAssociationResponseUnmarshaller GetInstance();
    public static ModifyCustomDomainAssociationResponseUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.ModifyEndpointAccessRequestMarshaller : object {
    private static ModifyEndpointAccessRequestMarshaller _instance;
    public static ModifyEndpointAccessRequestMarshaller Instance { get; }
    private static ModifyEndpointAccessRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ModifyEndpointAccessRequest publicRequest);
    internal static ModifyEndpointAccessRequestMarshaller GetInstance();
    public static ModifyEndpointAccessRequestMarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.ModifyEndpointAccessResponseUnmarshaller : XmlResponseUnmarshaller {
    private static ModifyEndpointAccessResponseUnmarshaller _instance;
    public static ModifyEndpointAccessResponseUnmarshaller Instance { get; }
    private static ModifyEndpointAccessResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, ModifyEndpointAccessResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ModifyEndpointAccessResponseUnmarshaller GetInstance();
    public static ModifyEndpointAccessResponseUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.ModifyEventSubscriptionRequestMarshaller : object {
    private static ModifyEventSubscriptionRequestMarshaller _instance;
    public static ModifyEventSubscriptionRequestMarshaller Instance { get; }
    private static ModifyEventSubscriptionRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ModifyEventSubscriptionRequest publicRequest);
    internal static ModifyEventSubscriptionRequestMarshaller GetInstance();
    public static ModifyEventSubscriptionRequestMarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.ModifyEventSubscriptionResponseUnmarshaller : XmlResponseUnmarshaller {
    private static ModifyEventSubscriptionResponseUnmarshaller _instance;
    public static ModifyEventSubscriptionResponseUnmarshaller Instance { get; }
    private static ModifyEventSubscriptionResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, ModifyEventSubscriptionResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ModifyEventSubscriptionResponseUnmarshaller GetInstance();
    public static ModifyEventSubscriptionResponseUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.ModifyRedshiftIdcApplicationRequestMarshaller : object {
    private static ModifyRedshiftIdcApplicationRequestMarshaller _instance;
    public static ModifyRedshiftIdcApplicationRequestMarshaller Instance { get; }
    private static ModifyRedshiftIdcApplicationRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ModifyRedshiftIdcApplicationRequest publicRequest);
    internal static ModifyRedshiftIdcApplicationRequestMarshaller GetInstance();
    public static ModifyRedshiftIdcApplicationRequestMarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.ModifyRedshiftIdcApplicationResponseUnmarshaller : XmlResponseUnmarshaller {
    private static ModifyRedshiftIdcApplicationResponseUnmarshaller _instance;
    public static ModifyRedshiftIdcApplicationResponseUnmarshaller Instance { get; }
    private static ModifyRedshiftIdcApplicationResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, ModifyRedshiftIdcApplicationResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ModifyRedshiftIdcApplicationResponseUnmarshaller GetInstance();
    public static ModifyRedshiftIdcApplicationResponseUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.ModifyScheduledActionRequestMarshaller : object {
    private static ModifyScheduledActionRequestMarshaller _instance;
    public static ModifyScheduledActionRequestMarshaller Instance { get; }
    private static ModifyScheduledActionRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ModifyScheduledActionRequest publicRequest);
    internal static ModifyScheduledActionRequestMarshaller GetInstance();
    public static ModifyScheduledActionRequestMarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.ModifyScheduledActionResponseUnmarshaller : XmlResponseUnmarshaller {
    private static ModifyScheduledActionResponseUnmarshaller _instance;
    public static ModifyScheduledActionResponseUnmarshaller Instance { get; }
    private static ModifyScheduledActionResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, ModifyScheduledActionResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ModifyScheduledActionResponseUnmarshaller GetInstance();
    public static ModifyScheduledActionResponseUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.ModifySnapshotCopyRetentionPeriodRequestMarshaller : object {
    private static ModifySnapshotCopyRetentionPeriodRequestMarshaller _instance;
    public static ModifySnapshotCopyRetentionPeriodRequestMarshaller Instance { get; }
    private static ModifySnapshotCopyRetentionPeriodRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ModifySnapshotCopyRetentionPeriodRequest publicRequest);
    internal static ModifySnapshotCopyRetentionPeriodRequestMarshaller GetInstance();
    public static ModifySnapshotCopyRetentionPeriodRequestMarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.ModifySnapshotCopyRetentionPeriodResponseUnmarshaller : XmlResponseUnmarshaller {
    private static ModifySnapshotCopyRetentionPeriodResponseUnmarshaller _instance;
    public static ModifySnapshotCopyRetentionPeriodResponseUnmarshaller Instance { get; }
    private static ModifySnapshotCopyRetentionPeriodResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, ModifySnapshotCopyRetentionPeriodResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ModifySnapshotCopyRetentionPeriodResponseUnmarshaller GetInstance();
    public static ModifySnapshotCopyRetentionPeriodResponseUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.ModifySnapshotScheduleRequestMarshaller : object {
    private static ModifySnapshotScheduleRequestMarshaller _instance;
    public static ModifySnapshotScheduleRequestMarshaller Instance { get; }
    private static ModifySnapshotScheduleRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ModifySnapshotScheduleRequest publicRequest);
    internal static ModifySnapshotScheduleRequestMarshaller GetInstance();
    public static ModifySnapshotScheduleRequestMarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.ModifySnapshotScheduleResponseUnmarshaller : XmlResponseUnmarshaller {
    private static ModifySnapshotScheduleResponseUnmarshaller _instance;
    public static ModifySnapshotScheduleResponseUnmarshaller Instance { get; }
    private static ModifySnapshotScheduleResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, ModifySnapshotScheduleResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ModifySnapshotScheduleResponseUnmarshaller GetInstance();
    public static ModifySnapshotScheduleResponseUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.ModifyUsageLimitRequestMarshaller : object {
    private static ModifyUsageLimitRequestMarshaller _instance;
    public static ModifyUsageLimitRequestMarshaller Instance { get; }
    private static ModifyUsageLimitRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ModifyUsageLimitRequest publicRequest);
    internal static ModifyUsageLimitRequestMarshaller GetInstance();
    public static ModifyUsageLimitRequestMarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.ModifyUsageLimitResponseUnmarshaller : XmlResponseUnmarshaller {
    private static ModifyUsageLimitResponseUnmarshaller _instance;
    public static ModifyUsageLimitResponseUnmarshaller Instance { get; }
    private static ModifyUsageLimitResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, ModifyUsageLimitResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ModifyUsageLimitResponseUnmarshaller GetInstance();
    public static ModifyUsageLimitResponseUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.NetworkInterfaceUnmarshaller : object {
    private static NetworkInterfaceUnmarshaller _instance;
    public static NetworkInterfaceUnmarshaller Instance { get; }
    private static NetworkInterfaceUnmarshaller();
    public sealed virtual NetworkInterface Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual NetworkInterface Unmarshall(JsonUnmarshallerContext context);
    public static NetworkInterfaceUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.NodeConfigurationOptionUnmarshaller : object {
    private static NodeConfigurationOptionUnmarshaller _instance;
    public static NodeConfigurationOptionUnmarshaller Instance { get; }
    private static NodeConfigurationOptionUnmarshaller();
    public sealed virtual NodeConfigurationOption Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual NodeConfigurationOption Unmarshall(JsonUnmarshallerContext context);
    public static NodeConfigurationOptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.NumberOfNodesPerClusterLimitExceededExceptionUnmarshaller : object {
    private static NumberOfNodesPerClusterLimitExceededExceptionUnmarshaller _instance;
    public static NumberOfNodesPerClusterLimitExceededExceptionUnmarshaller Instance { get; }
    private static NumberOfNodesPerClusterLimitExceededExceptionUnmarshaller();
    public sealed virtual NumberOfNodesPerClusterLimitExceededException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual NumberOfNodesPerClusterLimitExceededException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static NumberOfNodesPerClusterLimitExceededExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.NumberOfNodesQuotaExceededExceptionUnmarshaller : object {
    private static NumberOfNodesQuotaExceededExceptionUnmarshaller _instance;
    public static NumberOfNodesQuotaExceededExceptionUnmarshaller Instance { get; }
    private static NumberOfNodesQuotaExceededExceptionUnmarshaller();
    public sealed virtual NumberOfNodesQuotaExceededException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual NumberOfNodesQuotaExceededException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static NumberOfNodesQuotaExceededExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.OrderableClusterOptionUnmarshaller : object {
    private static OrderableClusterOptionUnmarshaller _instance;
    public static OrderableClusterOptionUnmarshaller Instance { get; }
    private static OrderableClusterOptionUnmarshaller();
    public sealed virtual OrderableClusterOption Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual OrderableClusterOption Unmarshall(JsonUnmarshallerContext context);
    public static OrderableClusterOptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.ParameterUnmarshaller : object {
    private static ParameterUnmarshaller _instance;
    public static ParameterUnmarshaller Instance { get; }
    private static ParameterUnmarshaller();
    public sealed virtual Parameter Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual Parameter Unmarshall(JsonUnmarshallerContext context);
    public static ParameterUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.PartnerIntegrationInfoUnmarshaller : object {
    private static PartnerIntegrationInfoUnmarshaller _instance;
    public static PartnerIntegrationInfoUnmarshaller Instance { get; }
    private static PartnerIntegrationInfoUnmarshaller();
    public sealed virtual PartnerIntegrationInfo Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual PartnerIntegrationInfo Unmarshall(JsonUnmarshallerContext context);
    public static PartnerIntegrationInfoUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.PartnerNotFoundExceptionUnmarshaller : object {
    private static PartnerNotFoundExceptionUnmarshaller _instance;
    public static PartnerNotFoundExceptionUnmarshaller Instance { get; }
    private static PartnerNotFoundExceptionUnmarshaller();
    public sealed virtual PartnerNotFoundException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual PartnerNotFoundException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static PartnerNotFoundExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.PauseClusterMessageUnmarshaller : object {
    private static PauseClusterMessageUnmarshaller _instance;
    public static PauseClusterMessageUnmarshaller Instance { get; }
    private static PauseClusterMessageUnmarshaller();
    public sealed virtual PauseClusterMessage Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual PauseClusterMessage Unmarshall(JsonUnmarshallerContext context);
    public static PauseClusterMessageUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.PauseClusterRequestMarshaller : object {
    private static PauseClusterRequestMarshaller _instance;
    public static PauseClusterRequestMarshaller Instance { get; }
    private static PauseClusterRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(PauseClusterRequest publicRequest);
    internal static PauseClusterRequestMarshaller GetInstance();
    public static PauseClusterRequestMarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.PauseClusterResponseUnmarshaller : XmlResponseUnmarshaller {
    private static PauseClusterResponseUnmarshaller _instance;
    public static PauseClusterResponseUnmarshaller Instance { get; }
    private static PauseClusterResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, PauseClusterResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static PauseClusterResponseUnmarshaller GetInstance();
    public static PauseClusterResponseUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.PendingModifiedValuesUnmarshaller : object {
    private static PendingModifiedValuesUnmarshaller _instance;
    public static PendingModifiedValuesUnmarshaller Instance { get; }
    private static PendingModifiedValuesUnmarshaller();
    public sealed virtual PendingModifiedValues Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual PendingModifiedValues Unmarshall(JsonUnmarshallerContext context);
    public static PendingModifiedValuesUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.PurchaseReservedNodeOfferingRequestMarshaller : object {
    private static PurchaseReservedNodeOfferingRequestMarshaller _instance;
    public static PurchaseReservedNodeOfferingRequestMarshaller Instance { get; }
    private static PurchaseReservedNodeOfferingRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(PurchaseReservedNodeOfferingRequest publicRequest);
    internal static PurchaseReservedNodeOfferingRequestMarshaller GetInstance();
    public static PurchaseReservedNodeOfferingRequestMarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.PurchaseReservedNodeOfferingResponseUnmarshaller : XmlResponseUnmarshaller {
    private static PurchaseReservedNodeOfferingResponseUnmarshaller _instance;
    public static PurchaseReservedNodeOfferingResponseUnmarshaller Instance { get; }
    private static PurchaseReservedNodeOfferingResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, PurchaseReservedNodeOfferingResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static PurchaseReservedNodeOfferingResponseUnmarshaller GetInstance();
    public static PurchaseReservedNodeOfferingResponseUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.PutResourcePolicyRequestMarshaller : object {
    private static PutResourcePolicyRequestMarshaller _instance;
    public static PutResourcePolicyRequestMarshaller Instance { get; }
    private static PutResourcePolicyRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(PutResourcePolicyRequest publicRequest);
    internal static PutResourcePolicyRequestMarshaller GetInstance();
    public static PutResourcePolicyRequestMarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.PutResourcePolicyResponseUnmarshaller : XmlResponseUnmarshaller {
    private static PutResourcePolicyResponseUnmarshaller _instance;
    public static PutResourcePolicyResponseUnmarshaller Instance { get; }
    private static PutResourcePolicyResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, PutResourcePolicyResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static PutResourcePolicyResponseUnmarshaller GetInstance();
    public static PutResourcePolicyResponseUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.RebootClusterRequestMarshaller : object {
    private static RebootClusterRequestMarshaller _instance;
    public static RebootClusterRequestMarshaller Instance { get; }
    private static RebootClusterRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(RebootClusterRequest publicRequest);
    internal static RebootClusterRequestMarshaller GetInstance();
    public static RebootClusterRequestMarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.RebootClusterResponseUnmarshaller : XmlResponseUnmarshaller {
    private static RebootClusterResponseUnmarshaller _instance;
    public static RebootClusterResponseUnmarshaller Instance { get; }
    private static RebootClusterResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, RebootClusterResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static RebootClusterResponseUnmarshaller GetInstance();
    public static RebootClusterResponseUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.RecommendationUnmarshaller : object {
    private static RecommendationUnmarshaller _instance;
    public static RecommendationUnmarshaller Instance { get; }
    private static RecommendationUnmarshaller();
    public sealed virtual Recommendation Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual Recommendation Unmarshall(JsonUnmarshallerContext context);
    public static RecommendationUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.RecommendedActionUnmarshaller : object {
    private static RecommendedActionUnmarshaller _instance;
    public static RecommendedActionUnmarshaller Instance { get; }
    private static RecommendedActionUnmarshaller();
    public sealed virtual RecommendedAction Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual RecommendedAction Unmarshall(JsonUnmarshallerContext context);
    public static RecommendedActionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.RecurringChargeUnmarshaller : object {
    private static RecurringChargeUnmarshaller _instance;
    public static RecurringChargeUnmarshaller Instance { get; }
    private static RecurringChargeUnmarshaller();
    public sealed virtual RecurringCharge Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual RecurringCharge Unmarshall(JsonUnmarshallerContext context);
    public static RecurringChargeUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.RedshiftIdcApplicationAlreadyExistsExceptionUnmarshaller : object {
    private static RedshiftIdcApplicationAlreadyExistsExceptionUnmarshaller _instance;
    public static RedshiftIdcApplicationAlreadyExistsExceptionUnmarshaller Instance { get; }
    private static RedshiftIdcApplicationAlreadyExistsExceptionUnmarshaller();
    public sealed virtual RedshiftIdcApplicationAlreadyExistsException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual RedshiftIdcApplicationAlreadyExistsException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static RedshiftIdcApplicationAlreadyExistsExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.RedshiftIdcApplicationNotExistsExceptionUnmarshaller : object {
    private static RedshiftIdcApplicationNotExistsExceptionUnmarshaller _instance;
    public static RedshiftIdcApplicationNotExistsExceptionUnmarshaller Instance { get; }
    private static RedshiftIdcApplicationNotExistsExceptionUnmarshaller();
    public sealed virtual RedshiftIdcApplicationNotExistsException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual RedshiftIdcApplicationNotExistsException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static RedshiftIdcApplicationNotExistsExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.RedshiftIdcApplicationQuotaExceededExceptionUnmarshaller : object {
    private static RedshiftIdcApplicationQuotaExceededExceptionUnmarshaller _instance;
    public static RedshiftIdcApplicationQuotaExceededExceptionUnmarshaller Instance { get; }
    private static RedshiftIdcApplicationQuotaExceededExceptionUnmarshaller();
    public sealed virtual RedshiftIdcApplicationQuotaExceededException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual RedshiftIdcApplicationQuotaExceededException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static RedshiftIdcApplicationQuotaExceededExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.RedshiftIdcApplicationUnmarshaller : object {
    private static RedshiftIdcApplicationUnmarshaller _instance;
    public static RedshiftIdcApplicationUnmarshaller Instance { get; }
    private static RedshiftIdcApplicationUnmarshaller();
    public sealed virtual RedshiftIdcApplication Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual RedshiftIdcApplication Unmarshall(JsonUnmarshallerContext context);
    public static RedshiftIdcApplicationUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.ReferenceLinkUnmarshaller : object {
    private static ReferenceLinkUnmarshaller _instance;
    public static ReferenceLinkUnmarshaller Instance { get; }
    private static ReferenceLinkUnmarshaller();
    public sealed virtual ReferenceLink Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ReferenceLink Unmarshall(JsonUnmarshallerContext context);
    public static ReferenceLinkUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.RejectDataShareRequestMarshaller : object {
    private static RejectDataShareRequestMarshaller _instance;
    public static RejectDataShareRequestMarshaller Instance { get; }
    private static RejectDataShareRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(RejectDataShareRequest publicRequest);
    internal static RejectDataShareRequestMarshaller GetInstance();
    public static RejectDataShareRequestMarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.RejectDataShareResponseUnmarshaller : XmlResponseUnmarshaller {
    private static RejectDataShareResponseUnmarshaller _instance;
    public static RejectDataShareResponseUnmarshaller Instance { get; }
    private static RejectDataShareResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, RejectDataShareResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static RejectDataShareResponseUnmarshaller GetInstance();
    public static RejectDataShareResponseUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.ReservedNodeAlreadyExistsExceptionUnmarshaller : object {
    private static ReservedNodeAlreadyExistsExceptionUnmarshaller _instance;
    public static ReservedNodeAlreadyExistsExceptionUnmarshaller Instance { get; }
    private static ReservedNodeAlreadyExistsExceptionUnmarshaller();
    public sealed virtual ReservedNodeAlreadyExistsException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ReservedNodeAlreadyExistsException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static ReservedNodeAlreadyExistsExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.ReservedNodeAlreadyMigratedExceptionUnmarshaller : object {
    private static ReservedNodeAlreadyMigratedExceptionUnmarshaller _instance;
    public static ReservedNodeAlreadyMigratedExceptionUnmarshaller Instance { get; }
    private static ReservedNodeAlreadyMigratedExceptionUnmarshaller();
    public sealed virtual ReservedNodeAlreadyMigratedException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ReservedNodeAlreadyMigratedException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static ReservedNodeAlreadyMigratedExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.ReservedNodeConfigurationOptionUnmarshaller : object {
    private static ReservedNodeConfigurationOptionUnmarshaller _instance;
    public static ReservedNodeConfigurationOptionUnmarshaller Instance { get; }
    private static ReservedNodeConfigurationOptionUnmarshaller();
    public sealed virtual ReservedNodeConfigurationOption Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ReservedNodeConfigurationOption Unmarshall(JsonUnmarshallerContext context);
    public static ReservedNodeConfigurationOptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.ReservedNodeExchangeNotFoundExceptionUnmarshaller : object {
    private static ReservedNodeExchangeNotFoundExceptionUnmarshaller _instance;
    public static ReservedNodeExchangeNotFoundExceptionUnmarshaller Instance { get; }
    private static ReservedNodeExchangeNotFoundExceptionUnmarshaller();
    public sealed virtual ReservedNodeExchangeNotFoundException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ReservedNodeExchangeNotFoundException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static ReservedNodeExchangeNotFoundExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.ReservedNodeExchangeStatusUnmarshaller : object {
    private static ReservedNodeExchangeStatusUnmarshaller _instance;
    public static ReservedNodeExchangeStatusUnmarshaller Instance { get; }
    private static ReservedNodeExchangeStatusUnmarshaller();
    public sealed virtual ReservedNodeExchangeStatus Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ReservedNodeExchangeStatus Unmarshall(JsonUnmarshallerContext context);
    public static ReservedNodeExchangeStatusUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.ReservedNodeNotFoundExceptionUnmarshaller : object {
    private static ReservedNodeNotFoundExceptionUnmarshaller _instance;
    public static ReservedNodeNotFoundExceptionUnmarshaller Instance { get; }
    private static ReservedNodeNotFoundExceptionUnmarshaller();
    public sealed virtual ReservedNodeNotFoundException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ReservedNodeNotFoundException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static ReservedNodeNotFoundExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.ReservedNodeOfferingNotFoundExceptionUnmarshaller : object {
    private static ReservedNodeOfferingNotFoundExceptionUnmarshaller _instance;
    public static ReservedNodeOfferingNotFoundExceptionUnmarshaller Instance { get; }
    private static ReservedNodeOfferingNotFoundExceptionUnmarshaller();
    public sealed virtual ReservedNodeOfferingNotFoundException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ReservedNodeOfferingNotFoundException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static ReservedNodeOfferingNotFoundExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.ReservedNodeOfferingUnmarshaller : object {
    private static ReservedNodeOfferingUnmarshaller _instance;
    public static ReservedNodeOfferingUnmarshaller Instance { get; }
    private static ReservedNodeOfferingUnmarshaller();
    public sealed virtual ReservedNodeOffering Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ReservedNodeOffering Unmarshall(JsonUnmarshallerContext context);
    public static ReservedNodeOfferingUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.ReservedNodeQuotaExceededExceptionUnmarshaller : object {
    private static ReservedNodeQuotaExceededExceptionUnmarshaller _instance;
    public static ReservedNodeQuotaExceededExceptionUnmarshaller Instance { get; }
    private static ReservedNodeQuotaExceededExceptionUnmarshaller();
    public sealed virtual ReservedNodeQuotaExceededException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ReservedNodeQuotaExceededException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static ReservedNodeQuotaExceededExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.ReservedNodeUnmarshaller : object {
    private static ReservedNodeUnmarshaller _instance;
    public static ReservedNodeUnmarshaller Instance { get; }
    private static ReservedNodeUnmarshaller();
    public sealed virtual ReservedNode Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ReservedNode Unmarshall(JsonUnmarshallerContext context);
    public static ReservedNodeUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.ResetClusterParameterGroupRequestMarshaller : object {
    private static ResetClusterParameterGroupRequestMarshaller _instance;
    public static ResetClusterParameterGroupRequestMarshaller Instance { get; }
    private static ResetClusterParameterGroupRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ResetClusterParameterGroupRequest publicRequest);
    internal static ResetClusterParameterGroupRequestMarshaller GetInstance();
    public static ResetClusterParameterGroupRequestMarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.ResetClusterParameterGroupResponseUnmarshaller : XmlResponseUnmarshaller {
    private static ResetClusterParameterGroupResponseUnmarshaller _instance;
    public static ResetClusterParameterGroupResponseUnmarshaller Instance { get; }
    private static ResetClusterParameterGroupResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, ResetClusterParameterGroupResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ResetClusterParameterGroupResponseUnmarshaller GetInstance();
    public static ResetClusterParameterGroupResponseUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.ResizeClusterMessageUnmarshaller : object {
    private static ResizeClusterMessageUnmarshaller _instance;
    public static ResizeClusterMessageUnmarshaller Instance { get; }
    private static ResizeClusterMessageUnmarshaller();
    public sealed virtual ResizeClusterMessage Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ResizeClusterMessage Unmarshall(JsonUnmarshallerContext context);
    public static ResizeClusterMessageUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.ResizeClusterRequestMarshaller : object {
    private static ResizeClusterRequestMarshaller _instance;
    public static ResizeClusterRequestMarshaller Instance { get; }
    private static ResizeClusterRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ResizeClusterRequest publicRequest);
    internal static ResizeClusterRequestMarshaller GetInstance();
    public static ResizeClusterRequestMarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.ResizeClusterResponseUnmarshaller : XmlResponseUnmarshaller {
    private static ResizeClusterResponseUnmarshaller _instance;
    public static ResizeClusterResponseUnmarshaller Instance { get; }
    private static ResizeClusterResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, ResizeClusterResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ResizeClusterResponseUnmarshaller GetInstance();
    public static ResizeClusterResponseUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.ResizeInfoUnmarshaller : object {
    private static ResizeInfoUnmarshaller _instance;
    public static ResizeInfoUnmarshaller Instance { get; }
    private static ResizeInfoUnmarshaller();
    public sealed virtual ResizeInfo Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ResizeInfo Unmarshall(JsonUnmarshallerContext context);
    public static ResizeInfoUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.ResizeNotFoundExceptionUnmarshaller : object {
    private static ResizeNotFoundExceptionUnmarshaller _instance;
    public static ResizeNotFoundExceptionUnmarshaller Instance { get; }
    private static ResizeNotFoundExceptionUnmarshaller();
    public sealed virtual ResizeNotFoundException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ResizeNotFoundException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static ResizeNotFoundExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.ResourceNotFoundExceptionUnmarshaller : object {
    private static ResourceNotFoundExceptionUnmarshaller _instance;
    public static ResourceNotFoundExceptionUnmarshaller Instance { get; }
    private static ResourceNotFoundExceptionUnmarshaller();
    public sealed virtual ResourceNotFoundException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ResourceNotFoundException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static ResourceNotFoundExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.ResourcePolicyUnmarshaller : object {
    private static ResourcePolicyUnmarshaller _instance;
    public static ResourcePolicyUnmarshaller Instance { get; }
    private static ResourcePolicyUnmarshaller();
    public sealed virtual ResourcePolicy Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ResourcePolicy Unmarshall(JsonUnmarshallerContext context);
    public static ResourcePolicyUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.RestoreFromClusterSnapshotRequestMarshaller : object {
    private static RestoreFromClusterSnapshotRequestMarshaller _instance;
    public static RestoreFromClusterSnapshotRequestMarshaller Instance { get; }
    private static RestoreFromClusterSnapshotRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(RestoreFromClusterSnapshotRequest publicRequest);
    internal static RestoreFromClusterSnapshotRequestMarshaller GetInstance();
    public static RestoreFromClusterSnapshotRequestMarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.RestoreFromClusterSnapshotResponseUnmarshaller : XmlResponseUnmarshaller {
    private static RestoreFromClusterSnapshotResponseUnmarshaller _instance;
    public static RestoreFromClusterSnapshotResponseUnmarshaller Instance { get; }
    private static RestoreFromClusterSnapshotResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, RestoreFromClusterSnapshotResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static RestoreFromClusterSnapshotResponseUnmarshaller GetInstance();
    public static RestoreFromClusterSnapshotResponseUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.RestoreStatusUnmarshaller : object {
    private static RestoreStatusUnmarshaller _instance;
    public static RestoreStatusUnmarshaller Instance { get; }
    private static RestoreStatusUnmarshaller();
    public sealed virtual RestoreStatus Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual RestoreStatus Unmarshall(JsonUnmarshallerContext context);
    public static RestoreStatusUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.RestoreTableFromClusterSnapshotRequestMarshaller : object {
    private static RestoreTableFromClusterSnapshotRequestMarshaller _instance;
    public static RestoreTableFromClusterSnapshotRequestMarshaller Instance { get; }
    private static RestoreTableFromClusterSnapshotRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(RestoreTableFromClusterSnapshotRequest publicRequest);
    internal static RestoreTableFromClusterSnapshotRequestMarshaller GetInstance();
    public static RestoreTableFromClusterSnapshotRequestMarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.RestoreTableFromClusterSnapshotResponseUnmarshaller : XmlResponseUnmarshaller {
    private static RestoreTableFromClusterSnapshotResponseUnmarshaller _instance;
    public static RestoreTableFromClusterSnapshotResponseUnmarshaller Instance { get; }
    private static RestoreTableFromClusterSnapshotResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, RestoreTableFromClusterSnapshotResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static RestoreTableFromClusterSnapshotResponseUnmarshaller GetInstance();
    public static RestoreTableFromClusterSnapshotResponseUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.ResumeClusterMessageUnmarshaller : object {
    private static ResumeClusterMessageUnmarshaller _instance;
    public static ResumeClusterMessageUnmarshaller Instance { get; }
    private static ResumeClusterMessageUnmarshaller();
    public sealed virtual ResumeClusterMessage Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ResumeClusterMessage Unmarshall(JsonUnmarshallerContext context);
    public static ResumeClusterMessageUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.ResumeClusterRequestMarshaller : object {
    private static ResumeClusterRequestMarshaller _instance;
    public static ResumeClusterRequestMarshaller Instance { get; }
    private static ResumeClusterRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ResumeClusterRequest publicRequest);
    internal static ResumeClusterRequestMarshaller GetInstance();
    public static ResumeClusterRequestMarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.ResumeClusterResponseUnmarshaller : XmlResponseUnmarshaller {
    private static ResumeClusterResponseUnmarshaller _instance;
    public static ResumeClusterResponseUnmarshaller Instance { get; }
    private static ResumeClusterResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, ResumeClusterResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ResumeClusterResponseUnmarshaller GetInstance();
    public static ResumeClusterResponseUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.RevisionTargetUnmarshaller : object {
    private static RevisionTargetUnmarshaller _instance;
    public static RevisionTargetUnmarshaller Instance { get; }
    private static RevisionTargetUnmarshaller();
    public sealed virtual RevisionTarget Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual RevisionTarget Unmarshall(JsonUnmarshallerContext context);
    public static RevisionTargetUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.RevokeClusterSecurityGroupIngressRequestMarshaller : object {
    private static RevokeClusterSecurityGroupIngressRequestMarshaller _instance;
    public static RevokeClusterSecurityGroupIngressRequestMarshaller Instance { get; }
    private static RevokeClusterSecurityGroupIngressRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(RevokeClusterSecurityGroupIngressRequest publicRequest);
    internal static RevokeClusterSecurityGroupIngressRequestMarshaller GetInstance();
    public static RevokeClusterSecurityGroupIngressRequestMarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.RevokeClusterSecurityGroupIngressResponseUnmarshaller : XmlResponseUnmarshaller {
    private static RevokeClusterSecurityGroupIngressResponseUnmarshaller _instance;
    public static RevokeClusterSecurityGroupIngressResponseUnmarshaller Instance { get; }
    private static RevokeClusterSecurityGroupIngressResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, RevokeClusterSecurityGroupIngressResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static RevokeClusterSecurityGroupIngressResponseUnmarshaller GetInstance();
    public static RevokeClusterSecurityGroupIngressResponseUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.RevokeEndpointAccessRequestMarshaller : object {
    private static RevokeEndpointAccessRequestMarshaller _instance;
    public static RevokeEndpointAccessRequestMarshaller Instance { get; }
    private static RevokeEndpointAccessRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(RevokeEndpointAccessRequest publicRequest);
    internal static RevokeEndpointAccessRequestMarshaller GetInstance();
    public static RevokeEndpointAccessRequestMarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.RevokeEndpointAccessResponseUnmarshaller : XmlResponseUnmarshaller {
    private static RevokeEndpointAccessResponseUnmarshaller _instance;
    public static RevokeEndpointAccessResponseUnmarshaller Instance { get; }
    private static RevokeEndpointAccessResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, RevokeEndpointAccessResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static RevokeEndpointAccessResponseUnmarshaller GetInstance();
    public static RevokeEndpointAccessResponseUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.RevokeSnapshotAccessRequestMarshaller : object {
    private static RevokeSnapshotAccessRequestMarshaller _instance;
    public static RevokeSnapshotAccessRequestMarshaller Instance { get; }
    private static RevokeSnapshotAccessRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(RevokeSnapshotAccessRequest publicRequest);
    internal static RevokeSnapshotAccessRequestMarshaller GetInstance();
    public static RevokeSnapshotAccessRequestMarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.RevokeSnapshotAccessResponseUnmarshaller : XmlResponseUnmarshaller {
    private static RevokeSnapshotAccessResponseUnmarshaller _instance;
    public static RevokeSnapshotAccessResponseUnmarshaller Instance { get; }
    private static RevokeSnapshotAccessResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, RevokeSnapshotAccessResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static RevokeSnapshotAccessResponseUnmarshaller GetInstance();
    public static RevokeSnapshotAccessResponseUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.RotateEncryptionKeyRequestMarshaller : object {
    private static RotateEncryptionKeyRequestMarshaller _instance;
    public static RotateEncryptionKeyRequestMarshaller Instance { get; }
    private static RotateEncryptionKeyRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(RotateEncryptionKeyRequest publicRequest);
    internal static RotateEncryptionKeyRequestMarshaller GetInstance();
    public static RotateEncryptionKeyRequestMarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.RotateEncryptionKeyResponseUnmarshaller : XmlResponseUnmarshaller {
    private static RotateEncryptionKeyResponseUnmarshaller _instance;
    public static RotateEncryptionKeyResponseUnmarshaller Instance { get; }
    private static RotateEncryptionKeyResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, RotateEncryptionKeyResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static RotateEncryptionKeyResponseUnmarshaller GetInstance();
    public static RotateEncryptionKeyResponseUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.ScheduledActionAlreadyExistsExceptionUnmarshaller : object {
    private static ScheduledActionAlreadyExistsExceptionUnmarshaller _instance;
    public static ScheduledActionAlreadyExistsExceptionUnmarshaller Instance { get; }
    private static ScheduledActionAlreadyExistsExceptionUnmarshaller();
    public sealed virtual ScheduledActionAlreadyExistsException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ScheduledActionAlreadyExistsException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static ScheduledActionAlreadyExistsExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.ScheduledActionNotFoundExceptionUnmarshaller : object {
    private static ScheduledActionNotFoundExceptionUnmarshaller _instance;
    public static ScheduledActionNotFoundExceptionUnmarshaller Instance { get; }
    private static ScheduledActionNotFoundExceptionUnmarshaller();
    public sealed virtual ScheduledActionNotFoundException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ScheduledActionNotFoundException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static ScheduledActionNotFoundExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.ScheduledActionQuotaExceededExceptionUnmarshaller : object {
    private static ScheduledActionQuotaExceededExceptionUnmarshaller _instance;
    public static ScheduledActionQuotaExceededExceptionUnmarshaller Instance { get; }
    private static ScheduledActionQuotaExceededExceptionUnmarshaller();
    public sealed virtual ScheduledActionQuotaExceededException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ScheduledActionQuotaExceededException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static ScheduledActionQuotaExceededExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.ScheduledActionTypeUnmarshaller : object {
    private static ScheduledActionTypeUnmarshaller _instance;
    public static ScheduledActionTypeUnmarshaller Instance { get; }
    private static ScheduledActionTypeUnmarshaller();
    public sealed virtual ScheduledActionType Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ScheduledActionType Unmarshall(JsonUnmarshallerContext context);
    public static ScheduledActionTypeUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.ScheduledActionTypeUnsupportedExceptionUnmarshaller : object {
    private static ScheduledActionTypeUnsupportedExceptionUnmarshaller _instance;
    public static ScheduledActionTypeUnsupportedExceptionUnmarshaller Instance { get; }
    private static ScheduledActionTypeUnsupportedExceptionUnmarshaller();
    public sealed virtual ScheduledActionTypeUnsupportedException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ScheduledActionTypeUnsupportedException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static ScheduledActionTypeUnsupportedExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.ScheduledActionUnmarshaller : object {
    private static ScheduledActionUnmarshaller _instance;
    public static ScheduledActionUnmarshaller Instance { get; }
    private static ScheduledActionUnmarshaller();
    public sealed virtual ScheduledAction Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ScheduledAction Unmarshall(JsonUnmarshallerContext context);
    public static ScheduledActionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.ScheduleDefinitionTypeUnsupportedExceptionUnmarshaller : object {
    private static ScheduleDefinitionTypeUnsupportedExceptionUnmarshaller _instance;
    public static ScheduleDefinitionTypeUnsupportedExceptionUnmarshaller Instance { get; }
    private static ScheduleDefinitionTypeUnsupportedExceptionUnmarshaller();
    public sealed virtual ScheduleDefinitionTypeUnsupportedException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ScheduleDefinitionTypeUnsupportedException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static ScheduleDefinitionTypeUnsupportedExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.SecondaryClusterInfoUnmarshaller : object {
    private static SecondaryClusterInfoUnmarshaller _instance;
    public static SecondaryClusterInfoUnmarshaller Instance { get; }
    private static SecondaryClusterInfoUnmarshaller();
    public sealed virtual SecondaryClusterInfo Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual SecondaryClusterInfo Unmarshall(JsonUnmarshallerContext context);
    public static SecondaryClusterInfoUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.ServiceIntegrationsUnionUnmarshaller : object {
    private static ServiceIntegrationsUnionUnmarshaller _instance;
    public static ServiceIntegrationsUnionUnmarshaller Instance { get; }
    private static ServiceIntegrationsUnionUnmarshaller();
    public sealed virtual ServiceIntegrationsUnion Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ServiceIntegrationsUnion Unmarshall(JsonUnmarshallerContext context);
    public static ServiceIntegrationsUnionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.SnapshotCopyAlreadyDisabledExceptionUnmarshaller : object {
    private static SnapshotCopyAlreadyDisabledExceptionUnmarshaller _instance;
    public static SnapshotCopyAlreadyDisabledExceptionUnmarshaller Instance { get; }
    private static SnapshotCopyAlreadyDisabledExceptionUnmarshaller();
    public sealed virtual SnapshotCopyAlreadyDisabledException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual SnapshotCopyAlreadyDisabledException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static SnapshotCopyAlreadyDisabledExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.SnapshotCopyAlreadyEnabledExceptionUnmarshaller : object {
    private static SnapshotCopyAlreadyEnabledExceptionUnmarshaller _instance;
    public static SnapshotCopyAlreadyEnabledExceptionUnmarshaller Instance { get; }
    private static SnapshotCopyAlreadyEnabledExceptionUnmarshaller();
    public sealed virtual SnapshotCopyAlreadyEnabledException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual SnapshotCopyAlreadyEnabledException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static SnapshotCopyAlreadyEnabledExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.SnapshotCopyDisabledExceptionUnmarshaller : object {
    private static SnapshotCopyDisabledExceptionUnmarshaller _instance;
    public static SnapshotCopyDisabledExceptionUnmarshaller Instance { get; }
    private static SnapshotCopyDisabledExceptionUnmarshaller();
    public sealed virtual SnapshotCopyDisabledException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual SnapshotCopyDisabledException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static SnapshotCopyDisabledExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.SnapshotCopyGrantAlreadyExistsExceptionUnmarshaller : object {
    private static SnapshotCopyGrantAlreadyExistsExceptionUnmarshaller _instance;
    public static SnapshotCopyGrantAlreadyExistsExceptionUnmarshaller Instance { get; }
    private static SnapshotCopyGrantAlreadyExistsExceptionUnmarshaller();
    public sealed virtual SnapshotCopyGrantAlreadyExistsException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual SnapshotCopyGrantAlreadyExistsException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static SnapshotCopyGrantAlreadyExistsExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.SnapshotCopyGrantNotFoundExceptionUnmarshaller : object {
    private static SnapshotCopyGrantNotFoundExceptionUnmarshaller _instance;
    public static SnapshotCopyGrantNotFoundExceptionUnmarshaller Instance { get; }
    private static SnapshotCopyGrantNotFoundExceptionUnmarshaller();
    public sealed virtual SnapshotCopyGrantNotFoundException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual SnapshotCopyGrantNotFoundException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static SnapshotCopyGrantNotFoundExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.SnapshotCopyGrantQuotaExceededExceptionUnmarshaller : object {
    private static SnapshotCopyGrantQuotaExceededExceptionUnmarshaller _instance;
    public static SnapshotCopyGrantQuotaExceededExceptionUnmarshaller Instance { get; }
    private static SnapshotCopyGrantQuotaExceededExceptionUnmarshaller();
    public sealed virtual SnapshotCopyGrantQuotaExceededException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual SnapshotCopyGrantQuotaExceededException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static SnapshotCopyGrantQuotaExceededExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.SnapshotCopyGrantUnmarshaller : object {
    private static SnapshotCopyGrantUnmarshaller _instance;
    public static SnapshotCopyGrantUnmarshaller Instance { get; }
    private static SnapshotCopyGrantUnmarshaller();
    public sealed virtual SnapshotCopyGrant Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual SnapshotCopyGrant Unmarshall(JsonUnmarshallerContext context);
    public static SnapshotCopyGrantUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.SnapshotErrorMessageUnmarshaller : object {
    private static SnapshotErrorMessageUnmarshaller _instance;
    public static SnapshotErrorMessageUnmarshaller Instance { get; }
    private static SnapshotErrorMessageUnmarshaller();
    public sealed virtual SnapshotErrorMessage Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual SnapshotErrorMessage Unmarshall(JsonUnmarshallerContext context);
    public static SnapshotErrorMessageUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.SnapshotScheduleAlreadyExistsExceptionUnmarshaller : object {
    private static SnapshotScheduleAlreadyExistsExceptionUnmarshaller _instance;
    public static SnapshotScheduleAlreadyExistsExceptionUnmarshaller Instance { get; }
    private static SnapshotScheduleAlreadyExistsExceptionUnmarshaller();
    public sealed virtual SnapshotScheduleAlreadyExistsException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual SnapshotScheduleAlreadyExistsException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static SnapshotScheduleAlreadyExistsExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.SnapshotScheduleNotFoundExceptionUnmarshaller : object {
    private static SnapshotScheduleNotFoundExceptionUnmarshaller _instance;
    public static SnapshotScheduleNotFoundExceptionUnmarshaller Instance { get; }
    private static SnapshotScheduleNotFoundExceptionUnmarshaller();
    public sealed virtual SnapshotScheduleNotFoundException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual SnapshotScheduleNotFoundException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static SnapshotScheduleNotFoundExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.SnapshotScheduleQuotaExceededExceptionUnmarshaller : object {
    private static SnapshotScheduleQuotaExceededExceptionUnmarshaller _instance;
    public static SnapshotScheduleQuotaExceededExceptionUnmarshaller Instance { get; }
    private static SnapshotScheduleQuotaExceededExceptionUnmarshaller();
    public sealed virtual SnapshotScheduleQuotaExceededException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual SnapshotScheduleQuotaExceededException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static SnapshotScheduleQuotaExceededExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.SnapshotScheduleUnmarshaller : object {
    private static SnapshotScheduleUnmarshaller _instance;
    public static SnapshotScheduleUnmarshaller Instance { get; }
    private static SnapshotScheduleUnmarshaller();
    public sealed virtual SnapshotSchedule Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual SnapshotSchedule Unmarshall(JsonUnmarshallerContext context);
    public static SnapshotScheduleUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.SnapshotScheduleUpdateInProgressExceptionUnmarshaller : object {
    private static SnapshotScheduleUpdateInProgressExceptionUnmarshaller _instance;
    public static SnapshotScheduleUpdateInProgressExceptionUnmarshaller Instance { get; }
    private static SnapshotScheduleUpdateInProgressExceptionUnmarshaller();
    public sealed virtual SnapshotScheduleUpdateInProgressException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual SnapshotScheduleUpdateInProgressException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static SnapshotScheduleUpdateInProgressExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.SnapshotUnmarshaller : object {
    private static SnapshotUnmarshaller _instance;
    public static SnapshotUnmarshaller Instance { get; }
    private static SnapshotUnmarshaller();
    public sealed virtual Snapshot Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual Snapshot Unmarshall(JsonUnmarshallerContext context);
    public static SnapshotUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.SNSInvalidTopicExceptionUnmarshaller : object {
    private static SNSInvalidTopicExceptionUnmarshaller _instance;
    public static SNSInvalidTopicExceptionUnmarshaller Instance { get; }
    private static SNSInvalidTopicExceptionUnmarshaller();
    public sealed virtual SNSInvalidTopicException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual SNSInvalidTopicException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static SNSInvalidTopicExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.SNSNoAuthorizationExceptionUnmarshaller : object {
    private static SNSNoAuthorizationExceptionUnmarshaller _instance;
    public static SNSNoAuthorizationExceptionUnmarshaller Instance { get; }
    private static SNSNoAuthorizationExceptionUnmarshaller();
    public sealed virtual SNSNoAuthorizationException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual SNSNoAuthorizationException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static SNSNoAuthorizationExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.SNSTopicArnNotFoundExceptionUnmarshaller : object {
    private static SNSTopicArnNotFoundExceptionUnmarshaller _instance;
    public static SNSTopicArnNotFoundExceptionUnmarshaller Instance { get; }
    private static SNSTopicArnNotFoundExceptionUnmarshaller();
    public sealed virtual SNSTopicArnNotFoundException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual SNSTopicArnNotFoundException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static SNSTopicArnNotFoundExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.SourceNotFoundExceptionUnmarshaller : object {
    private static SourceNotFoundExceptionUnmarshaller _instance;
    public static SourceNotFoundExceptionUnmarshaller Instance { get; }
    private static SourceNotFoundExceptionUnmarshaller();
    public sealed virtual SourceNotFoundException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual SourceNotFoundException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static SourceNotFoundExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.SubnetAlreadyInUseExceptionUnmarshaller : object {
    private static SubnetAlreadyInUseExceptionUnmarshaller _instance;
    public static SubnetAlreadyInUseExceptionUnmarshaller Instance { get; }
    private static SubnetAlreadyInUseExceptionUnmarshaller();
    public sealed virtual SubnetAlreadyInUseException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual SubnetAlreadyInUseException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static SubnetAlreadyInUseExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.SubnetUnmarshaller : object {
    private static SubnetUnmarshaller _instance;
    public static SubnetUnmarshaller Instance { get; }
    private static SubnetUnmarshaller();
    public sealed virtual Subnet Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual Subnet Unmarshall(JsonUnmarshallerContext context);
    public static SubnetUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.SubscriptionAlreadyExistExceptionUnmarshaller : object {
    private static SubscriptionAlreadyExistExceptionUnmarshaller _instance;
    public static SubscriptionAlreadyExistExceptionUnmarshaller Instance { get; }
    private static SubscriptionAlreadyExistExceptionUnmarshaller();
    public sealed virtual SubscriptionAlreadyExistException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual SubscriptionAlreadyExistException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static SubscriptionAlreadyExistExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.SubscriptionCategoryNotFoundExceptionUnmarshaller : object {
    private static SubscriptionCategoryNotFoundExceptionUnmarshaller _instance;
    public static SubscriptionCategoryNotFoundExceptionUnmarshaller Instance { get; }
    private static SubscriptionCategoryNotFoundExceptionUnmarshaller();
    public sealed virtual SubscriptionCategoryNotFoundException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual SubscriptionCategoryNotFoundException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static SubscriptionCategoryNotFoundExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.SubscriptionEventIdNotFoundExceptionUnmarshaller : object {
    private static SubscriptionEventIdNotFoundExceptionUnmarshaller _instance;
    public static SubscriptionEventIdNotFoundExceptionUnmarshaller Instance { get; }
    private static SubscriptionEventIdNotFoundExceptionUnmarshaller();
    public sealed virtual SubscriptionEventIdNotFoundException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual SubscriptionEventIdNotFoundException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static SubscriptionEventIdNotFoundExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.SubscriptionNotFoundExceptionUnmarshaller : object {
    private static SubscriptionNotFoundExceptionUnmarshaller _instance;
    public static SubscriptionNotFoundExceptionUnmarshaller Instance { get; }
    private static SubscriptionNotFoundExceptionUnmarshaller();
    public sealed virtual SubscriptionNotFoundException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual SubscriptionNotFoundException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static SubscriptionNotFoundExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.SubscriptionSeverityNotFoundExceptionUnmarshaller : object {
    private static SubscriptionSeverityNotFoundExceptionUnmarshaller _instance;
    public static SubscriptionSeverityNotFoundExceptionUnmarshaller Instance { get; }
    private static SubscriptionSeverityNotFoundExceptionUnmarshaller();
    public sealed virtual SubscriptionSeverityNotFoundException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual SubscriptionSeverityNotFoundException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static SubscriptionSeverityNotFoundExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.SupportedOperationUnmarshaller : object {
    private static SupportedOperationUnmarshaller _instance;
    public static SupportedOperationUnmarshaller Instance { get; }
    private static SupportedOperationUnmarshaller();
    public sealed virtual SupportedOperation Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual SupportedOperation Unmarshall(JsonUnmarshallerContext context);
    public static SupportedOperationUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.SupportedPlatformUnmarshaller : object {
    private static SupportedPlatformUnmarshaller _instance;
    public static SupportedPlatformUnmarshaller Instance { get; }
    private static SupportedPlatformUnmarshaller();
    public sealed virtual SupportedPlatform Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual SupportedPlatform Unmarshall(JsonUnmarshallerContext context);
    public static SupportedPlatformUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.TableLimitExceededExceptionUnmarshaller : object {
    private static TableLimitExceededExceptionUnmarshaller _instance;
    public static TableLimitExceededExceptionUnmarshaller Instance { get; }
    private static TableLimitExceededExceptionUnmarshaller();
    public sealed virtual TableLimitExceededException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual TableLimitExceededException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static TableLimitExceededExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.TableRestoreNotFoundExceptionUnmarshaller : object {
    private static TableRestoreNotFoundExceptionUnmarshaller _instance;
    public static TableRestoreNotFoundExceptionUnmarshaller Instance { get; }
    private static TableRestoreNotFoundExceptionUnmarshaller();
    public sealed virtual TableRestoreNotFoundException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual TableRestoreNotFoundException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static TableRestoreNotFoundExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.TableRestoreStatusUnmarshaller : object {
    private static TableRestoreStatusUnmarshaller _instance;
    public static TableRestoreStatusUnmarshaller Instance { get; }
    private static TableRestoreStatusUnmarshaller();
    public sealed virtual TableRestoreStatus Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual TableRestoreStatus Unmarshall(JsonUnmarshallerContext context);
    public static TableRestoreStatusUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.TaggedResourceUnmarshaller : object {
    private static TaggedResourceUnmarshaller _instance;
    public static TaggedResourceUnmarshaller Instance { get; }
    private static TaggedResourceUnmarshaller();
    public sealed virtual TaggedResource Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual TaggedResource Unmarshall(JsonUnmarshallerContext context);
    public static TaggedResourceUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.TagLimitExceededExceptionUnmarshaller : object {
    private static TagLimitExceededExceptionUnmarshaller _instance;
    public static TagLimitExceededExceptionUnmarshaller Instance { get; }
    private static TagLimitExceededExceptionUnmarshaller();
    public sealed virtual TagLimitExceededException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual TagLimitExceededException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static TagLimitExceededExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.TagUnmarshaller : object {
    private static TagUnmarshaller _instance;
    public static TagUnmarshaller Instance { get; }
    private static TagUnmarshaller();
    public sealed virtual Tag Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual Tag Unmarshall(JsonUnmarshallerContext context);
    public static TagUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.UnauthorizedOperationExceptionUnmarshaller : object {
    private static UnauthorizedOperationExceptionUnmarshaller _instance;
    public static UnauthorizedOperationExceptionUnmarshaller Instance { get; }
    private static UnauthorizedOperationExceptionUnmarshaller();
    public sealed virtual UnauthorizedOperationException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual UnauthorizedOperationException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static UnauthorizedOperationExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.UnauthorizedPartnerIntegrationExceptionUnmarshaller : object {
    private static UnauthorizedPartnerIntegrationExceptionUnmarshaller _instance;
    public static UnauthorizedPartnerIntegrationExceptionUnmarshaller Instance { get; }
    private static UnauthorizedPartnerIntegrationExceptionUnmarshaller();
    public sealed virtual UnauthorizedPartnerIntegrationException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual UnauthorizedPartnerIntegrationException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static UnauthorizedPartnerIntegrationExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.UnknownSnapshotCopyRegionExceptionUnmarshaller : object {
    private static UnknownSnapshotCopyRegionExceptionUnmarshaller _instance;
    public static UnknownSnapshotCopyRegionExceptionUnmarshaller Instance { get; }
    private static UnknownSnapshotCopyRegionExceptionUnmarshaller();
    public sealed virtual UnknownSnapshotCopyRegionException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual UnknownSnapshotCopyRegionException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static UnknownSnapshotCopyRegionExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.UnsupportedOperationExceptionUnmarshaller : object {
    private static UnsupportedOperationExceptionUnmarshaller _instance;
    public static UnsupportedOperationExceptionUnmarshaller Instance { get; }
    private static UnsupportedOperationExceptionUnmarshaller();
    public sealed virtual UnsupportedOperationException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual UnsupportedOperationException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static UnsupportedOperationExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.UnsupportedOptionExceptionUnmarshaller : object {
    private static UnsupportedOptionExceptionUnmarshaller _instance;
    public static UnsupportedOptionExceptionUnmarshaller Instance { get; }
    private static UnsupportedOptionExceptionUnmarshaller();
    public sealed virtual UnsupportedOptionException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual UnsupportedOptionException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static UnsupportedOptionExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.UpdatePartnerStatusRequestMarshaller : object {
    private static UpdatePartnerStatusRequestMarshaller _instance;
    public static UpdatePartnerStatusRequestMarshaller Instance { get; }
    private static UpdatePartnerStatusRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(UpdatePartnerStatusRequest publicRequest);
    internal static UpdatePartnerStatusRequestMarshaller GetInstance();
    public static UpdatePartnerStatusRequestMarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.UpdatePartnerStatusResponseUnmarshaller : XmlResponseUnmarshaller {
    private static UpdatePartnerStatusResponseUnmarshaller _instance;
    public static UpdatePartnerStatusResponseUnmarshaller Instance { get; }
    private static UpdatePartnerStatusResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, UpdatePartnerStatusResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static UpdatePartnerStatusResponseUnmarshaller GetInstance();
    public static UpdatePartnerStatusResponseUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.UpdateTargetUnmarshaller : object {
    private static UpdateTargetUnmarshaller _instance;
    public static UpdateTargetUnmarshaller Instance { get; }
    private static UpdateTargetUnmarshaller();
    public sealed virtual UpdateTarget Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual UpdateTarget Unmarshall(JsonUnmarshallerContext context);
    public static UpdateTargetUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.UsageLimitAlreadyExistsExceptionUnmarshaller : object {
    private static UsageLimitAlreadyExistsExceptionUnmarshaller _instance;
    public static UsageLimitAlreadyExistsExceptionUnmarshaller Instance { get; }
    private static UsageLimitAlreadyExistsExceptionUnmarshaller();
    public sealed virtual UsageLimitAlreadyExistsException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual UsageLimitAlreadyExistsException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static UsageLimitAlreadyExistsExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.UsageLimitNotFoundExceptionUnmarshaller : object {
    private static UsageLimitNotFoundExceptionUnmarshaller _instance;
    public static UsageLimitNotFoundExceptionUnmarshaller Instance { get; }
    private static UsageLimitNotFoundExceptionUnmarshaller();
    public sealed virtual UsageLimitNotFoundException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual UsageLimitNotFoundException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static UsageLimitNotFoundExceptionUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.UsageLimitUnmarshaller : object {
    private static UsageLimitUnmarshaller _instance;
    public static UsageLimitUnmarshaller Instance { get; }
    private static UsageLimitUnmarshaller();
    public sealed virtual UsageLimit Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual UsageLimit Unmarshall(JsonUnmarshallerContext context);
    public static UsageLimitUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.VpcEndpointUnmarshaller : object {
    private static VpcEndpointUnmarshaller _instance;
    public static VpcEndpointUnmarshaller Instance { get; }
    private static VpcEndpointUnmarshaller();
    public sealed virtual VpcEndpoint Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual VpcEndpoint Unmarshall(JsonUnmarshallerContext context);
    public static VpcEndpointUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.Internal.MarshallTransformations.VpcSecurityGroupMembershipUnmarshaller : object {
    private static VpcSecurityGroupMembershipUnmarshaller _instance;
    public static VpcSecurityGroupMembershipUnmarshaller Instance { get; }
    private static VpcSecurityGroupMembershipUnmarshaller();
    public sealed virtual VpcSecurityGroupMembership Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual VpcSecurityGroupMembership Unmarshall(JsonUnmarshallerContext context);
    public static VpcSecurityGroupMembershipUnmarshaller get_Instance();
}
public class Amazon.Redshift.Model.InvalidAuthenticationProfileRequestException : AmazonRedshiftException {
    public InvalidAuthenticationProfileRequestException(string message);
    public InvalidAuthenticationProfileRequestException(string message, Exception innerException);
    public InvalidAuthenticationProfileRequestException(Exception innerException);
    public InvalidAuthenticationProfileRequestException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public InvalidAuthenticationProfileRequestException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Redshift.Model.InvalidAuthorizationStateException : AmazonRedshiftException {
    public InvalidAuthorizationStateException(string message);
    public InvalidAuthorizationStateException(string message, Exception innerException);
    public InvalidAuthorizationStateException(Exception innerException);
    public InvalidAuthorizationStateException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public InvalidAuthorizationStateException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Redshift.Model.InvalidClusterParameterGroupStateException : AmazonRedshiftException {
    public InvalidClusterParameterGroupStateException(string message);
    public InvalidClusterParameterGroupStateException(string message, Exception innerException);
    public InvalidClusterParameterGroupStateException(Exception innerException);
    public InvalidClusterParameterGroupStateException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public InvalidClusterParameterGroupStateException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Redshift.Model.InvalidClusterSecurityGroupStateException : AmazonRedshiftException {
    public InvalidClusterSecurityGroupStateException(string message);
    public InvalidClusterSecurityGroupStateException(string message, Exception innerException);
    public InvalidClusterSecurityGroupStateException(Exception innerException);
    public InvalidClusterSecurityGroupStateException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public InvalidClusterSecurityGroupStateException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Redshift.Model.InvalidClusterSnapshotScheduleStateException : AmazonRedshiftException {
    public InvalidClusterSnapshotScheduleStateException(string message);
    public InvalidClusterSnapshotScheduleStateException(string message, Exception innerException);
    public InvalidClusterSnapshotScheduleStateException(Exception innerException);
    public InvalidClusterSnapshotScheduleStateException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public InvalidClusterSnapshotScheduleStateException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Redshift.Model.InvalidClusterSnapshotStateException : AmazonRedshiftException {
    public InvalidClusterSnapshotStateException(string message);
    public InvalidClusterSnapshotStateException(string message, Exception innerException);
    public InvalidClusterSnapshotStateException(Exception innerException);
    public InvalidClusterSnapshotStateException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public InvalidClusterSnapshotStateException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Redshift.Model.InvalidClusterStateException : AmazonRedshiftException {
    public InvalidClusterStateException(string message);
    public InvalidClusterStateException(string message, Exception innerException);
    public InvalidClusterStateException(Exception innerException);
    public InvalidClusterStateException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public InvalidClusterStateException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Redshift.Model.InvalidClusterSubnetGroupStateException : AmazonRedshiftException {
    public InvalidClusterSubnetGroupStateException(string message);
    public InvalidClusterSubnetGroupStateException(string message, Exception innerException);
    public InvalidClusterSubnetGroupStateException(Exception innerException);
    public InvalidClusterSubnetGroupStateException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public InvalidClusterSubnetGroupStateException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Redshift.Model.InvalidClusterSubnetStateException : AmazonRedshiftException {
    public InvalidClusterSubnetStateException(string message);
    public InvalidClusterSubnetStateException(string message, Exception innerException);
    public InvalidClusterSubnetStateException(Exception innerException);
    public InvalidClusterSubnetStateException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public InvalidClusterSubnetStateException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Redshift.Model.InvalidClusterTrackException : AmazonRedshiftException {
    public InvalidClusterTrackException(string message);
    public InvalidClusterTrackException(string message, Exception innerException);
    public InvalidClusterTrackException(Exception innerException);
    public InvalidClusterTrackException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public InvalidClusterTrackException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Redshift.Model.InvalidDataShareException : AmazonRedshiftException {
    public InvalidDataShareException(string message);
    public InvalidDataShareException(string message, Exception innerException);
    public InvalidDataShareException(Exception innerException);
    public InvalidDataShareException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public InvalidDataShareException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Redshift.Model.InvalidElasticIpException : AmazonRedshiftException {
    public InvalidElasticIpException(string message);
    public InvalidElasticIpException(string message, Exception innerException);
    public InvalidElasticIpException(Exception innerException);
    public InvalidElasticIpException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public InvalidElasticIpException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Redshift.Model.InvalidEndpointStateException : AmazonRedshiftException {
    public InvalidEndpointStateException(string message);
    public InvalidEndpointStateException(string message, Exception innerException);
    public InvalidEndpointStateException(Exception innerException);
    public InvalidEndpointStateException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public InvalidEndpointStateException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Redshift.Model.InvalidHsmClientCertificateStateException : AmazonRedshiftException {
    public InvalidHsmClientCertificateStateException(string message);
    public InvalidHsmClientCertificateStateException(string message, Exception innerException);
    public InvalidHsmClientCertificateStateException(Exception innerException);
    public InvalidHsmClientCertificateStateException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public InvalidHsmClientCertificateStateException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Redshift.Model.InvalidHsmConfigurationStateException : AmazonRedshiftException {
    public InvalidHsmConfigurationStateException(string message);
    public InvalidHsmConfigurationStateException(string message, Exception innerException);
    public InvalidHsmConfigurationStateException(Exception innerException);
    public InvalidHsmConfigurationStateException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public InvalidHsmConfigurationStateException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Redshift.Model.InvalidNamespaceException : AmazonRedshiftException {
    public InvalidNamespaceException(string message);
    public InvalidNamespaceException(string message, Exception innerException);
    public InvalidNamespaceException(Exception innerException);
    public InvalidNamespaceException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public InvalidNamespaceException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Redshift.Model.InvalidPolicyException : AmazonRedshiftException {
    public InvalidPolicyException(string message);
    public InvalidPolicyException(string message, Exception innerException);
    public InvalidPolicyException(Exception innerException);
    public InvalidPolicyException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public InvalidPolicyException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Redshift.Model.InvalidReservedNodeStateException : AmazonRedshiftException {
    public InvalidReservedNodeStateException(string message);
    public InvalidReservedNodeStateException(string message, Exception innerException);
    public InvalidReservedNodeStateException(Exception innerException);
    public InvalidReservedNodeStateException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public InvalidReservedNodeStateException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Redshift.Model.InvalidRestoreException : AmazonRedshiftException {
    public InvalidRestoreException(string message);
    public InvalidRestoreException(string message, Exception innerException);
    public InvalidRestoreException(Exception innerException);
    public InvalidRestoreException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public InvalidRestoreException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Redshift.Model.InvalidRetentionPeriodException : AmazonRedshiftException {
    public InvalidRetentionPeriodException(string message);
    public InvalidRetentionPeriodException(string message, Exception innerException);
    public InvalidRetentionPeriodException(Exception innerException);
    public InvalidRetentionPeriodException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public InvalidRetentionPeriodException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Redshift.Model.InvalidS3BucketNameException : AmazonRedshiftException {
    public InvalidS3BucketNameException(string message);
    public InvalidS3BucketNameException(string message, Exception innerException);
    public InvalidS3BucketNameException(Exception innerException);
    public InvalidS3BucketNameException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public InvalidS3BucketNameException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Redshift.Model.InvalidS3KeyPrefixException : AmazonRedshiftException {
    public InvalidS3KeyPrefixException(string message);
    public InvalidS3KeyPrefixException(string message, Exception innerException);
    public InvalidS3KeyPrefixException(Exception innerException);
    public InvalidS3KeyPrefixException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public InvalidS3KeyPrefixException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Redshift.Model.InvalidScheduledActionException : AmazonRedshiftException {
    public InvalidScheduledActionException(string message);
    public InvalidScheduledActionException(string message, Exception innerException);
    public InvalidScheduledActionException(Exception innerException);
    public InvalidScheduledActionException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public InvalidScheduledActionException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Redshift.Model.InvalidScheduleException : AmazonRedshiftException {
    public InvalidScheduleException(string message);
    public InvalidScheduleException(string message, Exception innerException);
    public InvalidScheduleException(Exception innerException);
    public InvalidScheduleException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public InvalidScheduleException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Redshift.Model.InvalidSnapshotCopyGrantStateException : AmazonRedshiftException {
    public InvalidSnapshotCopyGrantStateException(string message);
    public InvalidSnapshotCopyGrantStateException(string message, Exception innerException);
    public InvalidSnapshotCopyGrantStateException(Exception innerException);
    public InvalidSnapshotCopyGrantStateException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public InvalidSnapshotCopyGrantStateException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Redshift.Model.InvalidSubnetException : AmazonRedshiftException {
    public InvalidSubnetException(string message);
    public InvalidSubnetException(string message, Exception innerException);
    public InvalidSubnetException(Exception innerException);
    public InvalidSubnetException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public InvalidSubnetException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Redshift.Model.InvalidSubscriptionStateException : AmazonRedshiftException {
    public InvalidSubscriptionStateException(string message);
    public InvalidSubscriptionStateException(string message, Exception innerException);
    public InvalidSubscriptionStateException(Exception innerException);
    public InvalidSubscriptionStateException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public InvalidSubscriptionStateException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Redshift.Model.InvalidTableRestoreArgumentException : AmazonRedshiftException {
    public InvalidTableRestoreArgumentException(string message);
    public InvalidTableRestoreArgumentException(string message, Exception innerException);
    public InvalidTableRestoreArgumentException(Exception innerException);
    public InvalidTableRestoreArgumentException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public InvalidTableRestoreArgumentException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Redshift.Model.InvalidTagException : AmazonRedshiftException {
    public InvalidTagException(string message);
    public InvalidTagException(string message, Exception innerException);
    public InvalidTagException(Exception innerException);
    public InvalidTagException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public InvalidTagException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Redshift.Model.InvalidUsageLimitException : AmazonRedshiftException {
    public InvalidUsageLimitException(string message);
    public InvalidUsageLimitException(string message, Exception innerException);
    public InvalidUsageLimitException(Exception innerException);
    public InvalidUsageLimitException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public InvalidUsageLimitException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Redshift.Model.InvalidVPCNetworkStateException : AmazonRedshiftException {
    public InvalidVPCNetworkStateException(string message);
    public InvalidVPCNetworkStateException(string message, Exception innerException);
    public InvalidVPCNetworkStateException(Exception innerException);
    public InvalidVPCNetworkStateException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public InvalidVPCNetworkStateException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Redshift.Model.IPRange : object {
    private string _cidrip;
    private string _status;
    private List`1<Tag> _tags;
    [AWSPropertyAttribute]
public string CIDRIP { get; public set; }
    [AWSPropertyAttribute]
public string Status { get; public set; }
    public List`1<Tag> Tags { get; public set; }
    public string get_CIDRIP();
    public void set_CIDRIP(string value);
    internal bool IsSetCIDRIP();
    public string get_Status();
    public void set_Status(string value);
    internal bool IsSetStatus();
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
}
public class Amazon.Redshift.Model.Ipv6CidrBlockNotFoundException : AmazonRedshiftException {
    public Ipv6CidrBlockNotFoundException(string message);
    public Ipv6CidrBlockNotFoundException(string message, Exception innerException);
    public Ipv6CidrBlockNotFoundException(Exception innerException);
    public Ipv6CidrBlockNotFoundException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public Ipv6CidrBlockNotFoundException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public interface Amazon.Redshift.Model.IRedshiftPaginatorFactory {
    public abstract virtual IDescribeClusterDbRevisionsPaginator DescribeClusterDbRevisions(DescribeClusterDbRevisionsRequest request);
    public abstract virtual IDescribeClusterParameterGroupsPaginator DescribeClusterParameterGroups(DescribeClusterParameterGroupsRequest request);
    public abstract virtual IDescribeClusterParametersPaginator DescribeClusterParameters(DescribeClusterParametersRequest request);
    public abstract virtual IDescribeClustersPaginator DescribeClusters(DescribeClustersRequest request);
    public abstract virtual IDescribeClusterSecurityGroupsPaginator DescribeClusterSecurityGroups(DescribeClusterSecurityGroupsRequest request);
    public abstract virtual IDescribeClusterSnapshotsPaginator DescribeClusterSnapshots(DescribeClusterSnapshotsRequest request);
    public abstract virtual IDescribeClusterSubnetGroupsPaginator DescribeClusterSubnetGroups(DescribeClusterSubnetGroupsRequest request);
    public abstract virtual IDescribeClusterTracksPaginator DescribeClusterTracks(DescribeClusterTracksRequest request);
    public abstract virtual IDescribeClusterVersionsPaginator DescribeClusterVersions(DescribeClusterVersionsRequest request);
    public abstract virtual IDescribeCustomDomainAssociationsPaginator DescribeCustomDomainAssociations(DescribeCustomDomainAssociationsRequest request);
    public abstract virtual IDescribeDataSharesPaginator DescribeDataShares(DescribeDataSharesRequest request);
    public abstract virtual IDescribeDataSharesForConsumerPaginator DescribeDataSharesForConsumer(DescribeDataSharesForConsumerRequest request);
    public abstract virtual IDescribeDataSharesForProducerPaginator DescribeDataSharesForProducer(DescribeDataSharesForProducerRequest request);
    public abstract virtual IDescribeDefaultClusterParametersPaginator DescribeDefaultClusterParameters(DescribeDefaultClusterParametersRequest request);
    public abstract virtual IDescribeEndpointAccessPaginator DescribeEndpointAccess(DescribeEndpointAccessRequest request);
    public abstract virtual IDescribeEndpointAuthorizationPaginator DescribeEndpointAuthorization(DescribeEndpointAuthorizationRequest request);
    public abstract virtual IDescribeEventsPaginator DescribeEvents(DescribeEventsRequest request);
    public abstract virtual IDescribeEventSubscriptionsPaginator DescribeEventSubscriptions(DescribeEventSubscriptionsRequest request);
    public abstract virtual IDescribeHsmClientCertificatesPaginator DescribeHsmClientCertificates(DescribeHsmClientCertificatesRequest request);
    public abstract virtual IDescribeHsmConfigurationsPaginator DescribeHsmConfigurations(DescribeHsmConfigurationsRequest request);
    public abstract virtual IDescribeInboundIntegrationsPaginator DescribeInboundIntegrations(DescribeInboundIntegrationsRequest request);
    public abstract virtual IDescribeNodeConfigurationOptionsPaginator DescribeNodeConfigurationOptions(DescribeNodeConfigurationOptionsRequest request);
    public abstract virtual IDescribeOrderableClusterOptionsPaginator DescribeOrderableClusterOptions(DescribeOrderableClusterOptionsRequest request);
    public abstract virtual IDescribeRedshiftIdcApplicationsPaginator DescribeRedshiftIdcApplications(DescribeRedshiftIdcApplicationsRequest request);
    public abstract virtual IDescribeReservedNodeExchangeStatusPaginator DescribeReservedNodeExchangeStatus(DescribeReservedNodeExchangeStatusRequest request);
    public abstract virtual IDescribeReservedNodeOfferingsPaginator DescribeReservedNodeOfferings(DescribeReservedNodeOfferingsRequest request);
    public abstract virtual IDescribeReservedNodesPaginator DescribeReservedNodes(DescribeReservedNodesRequest request);
    public abstract virtual IDescribeScheduledActionsPaginator DescribeScheduledActions(DescribeScheduledActionsRequest request);
    public abstract virtual IDescribeSnapshotCopyGrantsPaginator DescribeSnapshotCopyGrants(DescribeSnapshotCopyGrantsRequest request);
    public abstract virtual IDescribeSnapshotSchedulesPaginator DescribeSnapshotSchedules(DescribeSnapshotSchedulesRequest request);
    public abstract virtual IDescribeTableRestoreStatusPaginator DescribeTableRestoreStatus(DescribeTableRestoreStatusRequest request);
    public abstract virtual IDescribeTagsPaginator DescribeTags(DescribeTagsRequest request);
    public abstract virtual IDescribeUsageLimitsPaginator DescribeUsageLimits(DescribeUsageLimitsRequest request);
    public abstract virtual IGetReservedNodeExchangeConfigurationOptionsPaginator GetReservedNodeExchangeConfigurationOptions(GetReservedNodeExchangeConfigurationOptionsRequest request);
    public abstract virtual IGetReservedNodeExchangeOfferingsPaginator GetReservedNodeExchangeOfferings(GetReservedNodeExchangeOfferingsRequest request);
    public abstract virtual IListRecommendationsPaginator ListRecommendations(ListRecommendationsRequest request);
}
public class Amazon.Redshift.Model.LakeFormationQuery : object {
    private ServiceAuthorization _authorization;
    [AWSPropertyAttribute]
public ServiceAuthorization Authorization { get; public set; }
    public ServiceAuthorization get_Authorization();
    public void set_Authorization(ServiceAuthorization value);
    internal bool IsSetAuthorization();
}
public class Amazon.Redshift.Model.LakeFormationScopeUnion : object {
    private LakeFormationQuery _lakeFormationQuery;
    public LakeFormationQuery LakeFormationQuery { get; public set; }
    public LakeFormationQuery get_LakeFormationQuery();
    public void set_LakeFormationQuery(LakeFormationQuery value);
    internal bool IsSetLakeFormationQuery();
}
public class Amazon.Redshift.Model.LimitExceededException : AmazonRedshiftException {
    public LimitExceededException(string message);
    public LimitExceededException(string message, Exception innerException);
    public LimitExceededException(Exception innerException);
    public LimitExceededException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public LimitExceededException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
internal class Amazon.Redshift.Model.ListRecommendationsPaginator : object {
    private IAmazonRedshift _client;
    private ListRecommendationsRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<ListRecommendationsResponse> Responses { get; }
    public IPaginatedEnumerable`1<Recommendation> Recommendations { get; }
    internal ListRecommendationsPaginator(IAmazonRedshift client, ListRecommendationsRequest request);
    public sealed virtual IPaginatedEnumerable`1<ListRecommendationsResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<Recommendation> get_Recommendations();
    [AsyncIteratorStateMachineAttribute("Amazon.Redshift.Model.ListRecommendationsPaginator/<Amazon-Runtime-IPaginator<Amazon-Redshift-Model-ListRecommendationsResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<ListRecommendationsResponse> Amazon.Runtime.IPaginator<Amazon.Redshift.Model.ListRecommendationsResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.Redshift.Model.ListRecommendationsRequest : AmazonRedshiftRequest {
    private string _clusterIdentifier;
    private string _marker;
    private Nullable`1<int> _maxRecords;
    private string _namespaceArn;
    [AWSPropertyAttribute]
public string ClusterIdentifier { get; public set; }
    [AWSPropertyAttribute]
public string Marker { get; public set; }
    public Nullable`1<int> MaxRecords { get; public set; }
    [AWSPropertyAttribute]
public string NamespaceArn { get; public set; }
    public string get_ClusterIdentifier();
    public void set_ClusterIdentifier(string value);
    internal bool IsSetClusterIdentifier();
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public Nullable`1<int> get_MaxRecords();
    public void set_MaxRecords(Nullable`1<int> value);
    internal bool IsSetMaxRecords();
    public string get_NamespaceArn();
    public void set_NamespaceArn(string value);
    internal bool IsSetNamespaceArn();
}
public class Amazon.Redshift.Model.ListRecommendationsResponse : AmazonWebServiceResponse {
    private string _marker;
    private List`1<Recommendation> _recommendations;
    [AWSPropertyAttribute]
public string Marker { get; public set; }
    public List`1<Recommendation> Recommendations { get; public set; }
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public List`1<Recommendation> get_Recommendations();
    public void set_Recommendations(List`1<Recommendation> value);
    internal bool IsSetRecommendations();
}
public class Amazon.Redshift.Model.MaintenanceTrack : object {
    private string _databaseVersion;
    private string _maintenanceTrackName;
    private List`1<UpdateTarget> _updateTargets;
    [AWSPropertyAttribute]
public string DatabaseVersion { get; public set; }
    [AWSPropertyAttribute]
public string MaintenanceTrackName { get; public set; }
    public List`1<UpdateTarget> UpdateTargets { get; public set; }
    public string get_DatabaseVersion();
    public void set_DatabaseVersion(string value);
    internal bool IsSetDatabaseVersion();
    public string get_MaintenanceTrackName();
    public void set_MaintenanceTrackName(string value);
    internal bool IsSetMaintenanceTrackName();
    public List`1<UpdateTarget> get_UpdateTargets();
    public void set_UpdateTargets(List`1<UpdateTarget> value);
    internal bool IsSetUpdateTargets();
}
public class Amazon.Redshift.Model.ModifyAquaConfigurationRequest : AmazonRedshiftRequest {
    private AquaConfigurationStatus _aquaConfigurationStatus;
    private string _clusterIdentifier;
    public AquaConfigurationStatus AquaConfigurationStatus { get; public set; }
    [AWSPropertyAttribute]
public string ClusterIdentifier { get; public set; }
    public AquaConfigurationStatus get_AquaConfigurationStatus();
    public void set_AquaConfigurationStatus(AquaConfigurationStatus value);
    internal bool IsSetAquaConfigurationStatus();
    public string get_ClusterIdentifier();
    public void set_ClusterIdentifier(string value);
    internal bool IsSetClusterIdentifier();
}
public class Amazon.Redshift.Model.ModifyAquaConfigurationResponse : AmazonWebServiceResponse {
    private AquaConfiguration _aquaConfiguration;
    public AquaConfiguration AquaConfiguration { get; public set; }
    public AquaConfiguration get_AquaConfiguration();
    public void set_AquaConfiguration(AquaConfiguration value);
    internal bool IsSetAquaConfiguration();
}
public class Amazon.Redshift.Model.ModifyAuthenticationProfileRequest : AmazonRedshiftRequest {
    private string _authenticationProfileContent;
    private string _authenticationProfileName;
    [AWSPropertyAttribute]
public string AuthenticationProfileContent { get; public set; }
    [AWSPropertyAttribute]
public string AuthenticationProfileName { get; public set; }
    public string get_AuthenticationProfileContent();
    public void set_AuthenticationProfileContent(string value);
    internal bool IsSetAuthenticationProfileContent();
    public string get_AuthenticationProfileName();
    public void set_AuthenticationProfileName(string value);
    internal bool IsSetAuthenticationProfileName();
}
public class Amazon.Redshift.Model.ModifyAuthenticationProfileResponse : AmazonWebServiceResponse {
    private string _authenticationProfileContent;
    private string _authenticationProfileName;
    [AWSPropertyAttribute]
public string AuthenticationProfileContent { get; public set; }
    [AWSPropertyAttribute]
public string AuthenticationProfileName { get; public set; }
    public string get_AuthenticationProfileContent();
    public void set_AuthenticationProfileContent(string value);
    internal bool IsSetAuthenticationProfileContent();
    public string get_AuthenticationProfileName();
    public void set_AuthenticationProfileName(string value);
    internal bool IsSetAuthenticationProfileName();
}
public class Amazon.Redshift.Model.ModifyClusterDbRevisionRequest : AmazonRedshiftRequest {
    private string _clusterIdentifier;
    private string _revisionTarget;
    [AWSPropertyAttribute]
public string ClusterIdentifier { get; public set; }
    [AWSPropertyAttribute]
public string RevisionTarget { get; public set; }
    public string get_ClusterIdentifier();
    public void set_ClusterIdentifier(string value);
    internal bool IsSetClusterIdentifier();
    public string get_RevisionTarget();
    public void set_RevisionTarget(string value);
    internal bool IsSetRevisionTarget();
}
public class Amazon.Redshift.Model.ModifyClusterDbRevisionResponse : AmazonWebServiceResponse {
    private Cluster _cluster;
    public Cluster Cluster { get; public set; }
    public Cluster get_Cluster();
    public void set_Cluster(Cluster value);
    internal bool IsSetCluster();
}
public class Amazon.Redshift.Model.ModifyClusterIamRolesRequest : AmazonRedshiftRequest {
    private List`1<string> _addIamRoles;
    private string _clusterIdentifier;
    private string _defaultIamRoleArn;
    private List`1<string> _removeIamRoles;
    public List`1<string> AddIamRoles { get; public set; }
    [AWSPropertyAttribute]
public string ClusterIdentifier { get; public set; }
    [AWSPropertyAttribute]
public string DefaultIamRoleArn { get; public set; }
    public List`1<string> RemoveIamRoles { get; public set; }
    public List`1<string> get_AddIamRoles();
    public void set_AddIamRoles(List`1<string> value);
    internal bool IsSetAddIamRoles();
    public string get_ClusterIdentifier();
    public void set_ClusterIdentifier(string value);
    internal bool IsSetClusterIdentifier();
    public string get_DefaultIamRoleArn();
    public void set_DefaultIamRoleArn(string value);
    internal bool IsSetDefaultIamRoleArn();
    public List`1<string> get_RemoveIamRoles();
    public void set_RemoveIamRoles(List`1<string> value);
    internal bool IsSetRemoveIamRoles();
}
public class Amazon.Redshift.Model.ModifyClusterIamRolesResponse : AmazonWebServiceResponse {
    private Cluster _cluster;
    public Cluster Cluster { get; public set; }
    public Cluster get_Cluster();
    public void set_Cluster(Cluster value);
    internal bool IsSetCluster();
}
public class Amazon.Redshift.Model.ModifyClusterMaintenanceRequest : AmazonRedshiftRequest {
    private string _clusterIdentifier;
    private Nullable`1<bool> _deferMaintenance;
    private Nullable`1<int> _deferMaintenanceDuration;
    private Nullable`1<DateTime> _deferMaintenanceEndTime;
    private string _deferMaintenanceIdentifier;
    private Nullable`1<DateTime> _deferMaintenanceStartTime;
    [AWSPropertyAttribute]
public string ClusterIdentifier { get; public set; }
    public Nullable`1<bool> DeferMaintenance { get; public set; }
    public Nullable`1<int> DeferMaintenanceDuration { get; public set; }
    public Nullable`1<DateTime> DeferMaintenanceEndTime { get; public set; }
    [AWSPropertyAttribute]
public string DeferMaintenanceIdentifier { get; public set; }
    public Nullable`1<DateTime> DeferMaintenanceStartTime { get; public set; }
    public string get_ClusterIdentifier();
    public void set_ClusterIdentifier(string value);
    internal bool IsSetClusterIdentifier();
    public Nullable`1<bool> get_DeferMaintenance();
    public void set_DeferMaintenance(Nullable`1<bool> value);
    internal bool IsSetDeferMaintenance();
    public Nullable`1<int> get_DeferMaintenanceDuration();
    public void set_DeferMaintenanceDuration(Nullable`1<int> value);
    internal bool IsSetDeferMaintenanceDuration();
    public Nullable`1<DateTime> get_DeferMaintenanceEndTime();
    public void set_DeferMaintenanceEndTime(Nullable`1<DateTime> value);
    internal bool IsSetDeferMaintenanceEndTime();
    public string get_DeferMaintenanceIdentifier();
    public void set_DeferMaintenanceIdentifier(string value);
    internal bool IsSetDeferMaintenanceIdentifier();
    public Nullable`1<DateTime> get_DeferMaintenanceStartTime();
    public void set_DeferMaintenanceStartTime(Nullable`1<DateTime> value);
    internal bool IsSetDeferMaintenanceStartTime();
}
public class Amazon.Redshift.Model.ModifyClusterMaintenanceResponse : AmazonWebServiceResponse {
    private Cluster _cluster;
    public Cluster Cluster { get; public set; }
    public Cluster get_Cluster();
    public void set_Cluster(Cluster value);
    internal bool IsSetCluster();
}
public class Amazon.Redshift.Model.ModifyClusterParameterGroupRequest : AmazonRedshiftRequest {
    private string _parameterGroupName;
    private List`1<Parameter> _parameters;
    [AWSPropertyAttribute]
public string ParameterGroupName { get; public set; }
    [AWSPropertyAttribute]
public List`1<Parameter> Parameters { get; public set; }
    public string get_ParameterGroupName();
    public void set_ParameterGroupName(string value);
    internal bool IsSetParameterGroupName();
    public List`1<Parameter> get_Parameters();
    public void set_Parameters(List`1<Parameter> value);
    internal bool IsSetParameters();
}
public class Amazon.Redshift.Model.ModifyClusterParameterGroupResponse : AmazonWebServiceResponse {
    private string _parameterGroupName;
    private string _parameterGroupStatus;
    [AWSPropertyAttribute]
public string ParameterGroupName { get; public set; }
    [AWSPropertyAttribute]
public string ParameterGroupStatus { get; public set; }
    public string get_ParameterGroupName();
    public void set_ParameterGroupName(string value);
    internal bool IsSetParameterGroupName();
    public string get_ParameterGroupStatus();
    public void set_ParameterGroupStatus(string value);
    internal bool IsSetParameterGroupStatus();
}
public class Amazon.Redshift.Model.ModifyClusterRequest : AmazonRedshiftRequest {
    private Nullable`1<bool> _allowVersionUpgrade;
    private Nullable`1<int> _automatedSnapshotRetentionPeriod;
    private string _availabilityZone;
    private Nullable`1<bool> _availabilityZoneRelocation;
    private string _clusterIdentifier;
    private string _clusterParameterGroupName;
    private List`1<string> _clusterSecurityGroups;
    private string _clusterType;
    private string _clusterVersion;
    private string _elasticIp;
    private Nullable`1<bool> _encrypted;
    private Nullable`1<bool> _enhancedVpcRouting;
    private string _hsmClientCertificateIdentifier;
    private string _hsmConfigurationIdentifier;
    private string _ipAddressType;
    private string _kmsKeyId;
    private string _maintenanceTrackName;
    private Nullable`1<bool> _manageMasterPassword;
    private Nullable`1<int> _manualSnapshotRetentionPeriod;
    private string _masterPasswordSecretKmsKeyId;
    private string _masterUserPassword;
    private Nullable`1<bool> _multiAZ;
    private string _newClusterIdentifier;
    private string _nodeType;
    private Nullable`1<int> _numberOfNodes;
    private Nullable`1<int> _port;
    private string _preferredMaintenanceWindow;
    private Nullable`1<bool> _publiclyAccessible;
    private List`1<string> _vpcSecurityGroupIds;
    public Nullable`1<bool> AllowVersionUpgrade { get; public set; }
    public Nullable`1<int> AutomatedSnapshotRetentionPeriod { get; public set; }
    [AWSPropertyAttribute]
public string AvailabilityZone { get; public set; }
    public Nullable`1<bool> AvailabilityZoneRelocation { get; public set; }
    [AWSPropertyAttribute]
public string ClusterIdentifier { get; public set; }
    [AWSPropertyAttribute]
public string ClusterParameterGroupName { get; public set; }
    public List`1<string> ClusterSecurityGroups { get; public set; }
    [AWSPropertyAttribute]
public string ClusterType { get; public set; }
    [AWSPropertyAttribute]
public string ClusterVersion { get; public set; }
    [AWSPropertyAttribute]
public string ElasticIp { get; public set; }
    public Nullable`1<bool> Encrypted { get; public set; }
    public Nullable`1<bool> EnhancedVpcRouting { get; public set; }
    [AWSPropertyAttribute]
public string HsmClientCertificateIdentifier { get; public set; }
    [AWSPropertyAttribute]
public string HsmConfigurationIdentifier { get; public set; }
    [AWSPropertyAttribute]
public string IpAddressType { get; public set; }
    [AWSPropertyAttribute]
public string KmsKeyId { get; public set; }
    [AWSPropertyAttribute]
public string MaintenanceTrackName { get; public set; }
    public Nullable`1<bool> ManageMasterPassword { get; public set; }
    public Nullable`1<int> ManualSnapshotRetentionPeriod { get; public set; }
    [AWSPropertyAttribute]
public string MasterPasswordSecretKmsKeyId { get; public set; }
    [AWSPropertyAttribute]
public string MasterUserPassword { get; public set; }
    public Nullable`1<bool> MultiAZ { get; public set; }
    [AWSPropertyAttribute]
public string NewClusterIdentifier { get; public set; }
    [AWSPropertyAttribute]
public string NodeType { get; public set; }
    public Nullable`1<int> NumberOfNodes { get; public set; }
    public Nullable`1<int> Port { get; public set; }
    [AWSPropertyAttribute]
public string PreferredMaintenanceWindow { get; public set; }
    public Nullable`1<bool> PubliclyAccessible { get; public set; }
    public List`1<string> VpcSecurityGroupIds { get; public set; }
    public Nullable`1<bool> get_AllowVersionUpgrade();
    public void set_AllowVersionUpgrade(Nullable`1<bool> value);
    internal bool IsSetAllowVersionUpgrade();
    public Nullable`1<int> get_AutomatedSnapshotRetentionPeriod();
    public void set_AutomatedSnapshotRetentionPeriod(Nullable`1<int> value);
    internal bool IsSetAutomatedSnapshotRetentionPeriod();
    public string get_AvailabilityZone();
    public void set_AvailabilityZone(string value);
    internal bool IsSetAvailabilityZone();
    public Nullable`1<bool> get_AvailabilityZoneRelocation();
    public void set_AvailabilityZoneRelocation(Nullable`1<bool> value);
    internal bool IsSetAvailabilityZoneRelocation();
    public string get_ClusterIdentifier();
    public void set_ClusterIdentifier(string value);
    internal bool IsSetClusterIdentifier();
    public string get_ClusterParameterGroupName();
    public void set_ClusterParameterGroupName(string value);
    internal bool IsSetClusterParameterGroupName();
    public List`1<string> get_ClusterSecurityGroups();
    public void set_ClusterSecurityGroups(List`1<string> value);
    internal bool IsSetClusterSecurityGroups();
    public string get_ClusterType();
    public void set_ClusterType(string value);
    internal bool IsSetClusterType();
    public string get_ClusterVersion();
    public void set_ClusterVersion(string value);
    internal bool IsSetClusterVersion();
    public string get_ElasticIp();
    public void set_ElasticIp(string value);
    internal bool IsSetElasticIp();
    public Nullable`1<bool> get_Encrypted();
    public void set_Encrypted(Nullable`1<bool> value);
    internal bool IsSetEncrypted();
    public Nullable`1<bool> get_EnhancedVpcRouting();
    public void set_EnhancedVpcRouting(Nullable`1<bool> value);
    internal bool IsSetEnhancedVpcRouting();
    public string get_HsmClientCertificateIdentifier();
    public void set_HsmClientCertificateIdentifier(string value);
    internal bool IsSetHsmClientCertificateIdentifier();
    public string get_HsmConfigurationIdentifier();
    public void set_HsmConfigurationIdentifier(string value);
    internal bool IsSetHsmConfigurationIdentifier();
    public string get_IpAddressType();
    public void set_IpAddressType(string value);
    internal bool IsSetIpAddressType();
    public string get_KmsKeyId();
    public void set_KmsKeyId(string value);
    internal bool IsSetKmsKeyId();
    public string get_MaintenanceTrackName();
    public void set_MaintenanceTrackName(string value);
    internal bool IsSetMaintenanceTrackName();
    public Nullable`1<bool> get_ManageMasterPassword();
    public void set_ManageMasterPassword(Nullable`1<bool> value);
    internal bool IsSetManageMasterPassword();
    public Nullable`1<int> get_ManualSnapshotRetentionPeriod();
    public void set_ManualSnapshotRetentionPeriod(Nullable`1<int> value);
    internal bool IsSetManualSnapshotRetentionPeriod();
    public string get_MasterPasswordSecretKmsKeyId();
    public void set_MasterPasswordSecretKmsKeyId(string value);
    internal bool IsSetMasterPasswordSecretKmsKeyId();
    public string get_MasterUserPassword();
    public void set_MasterUserPassword(string value);
    internal bool IsSetMasterUserPassword();
    public Nullable`1<bool> get_MultiAZ();
    public void set_MultiAZ(Nullable`1<bool> value);
    internal bool IsSetMultiAZ();
    public string get_NewClusterIdentifier();
    public void set_NewClusterIdentifier(string value);
    internal bool IsSetNewClusterIdentifier();
    public string get_NodeType();
    public void set_NodeType(string value);
    internal bool IsSetNodeType();
    public Nullable`1<int> get_NumberOfNodes();
    public void set_NumberOfNodes(Nullable`1<int> value);
    internal bool IsSetNumberOfNodes();
    public Nullable`1<int> get_Port();
    public void set_Port(Nullable`1<int> value);
    internal bool IsSetPort();
    public string get_PreferredMaintenanceWindow();
    public void set_PreferredMaintenanceWindow(string value);
    internal bool IsSetPreferredMaintenanceWindow();
    public Nullable`1<bool> get_PubliclyAccessible();
    public void set_PubliclyAccessible(Nullable`1<bool> value);
    internal bool IsSetPubliclyAccessible();
    public List`1<string> get_VpcSecurityGroupIds();
    public void set_VpcSecurityGroupIds(List`1<string> value);
    internal bool IsSetVpcSecurityGroupIds();
}
public class Amazon.Redshift.Model.ModifyClusterResponse : AmazonWebServiceResponse {
    private Cluster _cluster;
    public Cluster Cluster { get; public set; }
    public Cluster get_Cluster();
    public void set_Cluster(Cluster value);
    internal bool IsSetCluster();
}
public class Amazon.Redshift.Model.ModifyClusterSnapshotRequest : AmazonRedshiftRequest {
    private Nullable`1<bool> _force;
    private Nullable`1<int> _manualSnapshotRetentionPeriod;
    private string _snapshotIdentifier;
    public Nullable`1<bool> Force { get; public set; }
    public Nullable`1<int> ManualSnapshotRetentionPeriod { get; public set; }
    [AWSPropertyAttribute]
public string SnapshotIdentifier { get; public set; }
    public Nullable`1<bool> get_Force();
    public void set_Force(Nullable`1<bool> value);
    internal bool IsSetForce();
    public Nullable`1<int> get_ManualSnapshotRetentionPeriod();
    public void set_ManualSnapshotRetentionPeriod(Nullable`1<int> value);
    internal bool IsSetManualSnapshotRetentionPeriod();
    public string get_SnapshotIdentifier();
    public void set_SnapshotIdentifier(string value);
    internal bool IsSetSnapshotIdentifier();
}
public class Amazon.Redshift.Model.ModifyClusterSnapshotResponse : AmazonWebServiceResponse {
    private Snapshot _snapshot;
    public Snapshot Snapshot { get; public set; }
    public Snapshot get_Snapshot();
    public void set_Snapshot(Snapshot value);
    internal bool IsSetSnapshot();
}
public class Amazon.Redshift.Model.ModifyClusterSnapshotScheduleRequest : AmazonRedshiftRequest {
    private string _clusterIdentifier;
    private Nullable`1<bool> _disassociateSchedule;
    private string _scheduleIdentifier;
    [AWSPropertyAttribute]
public string ClusterIdentifier { get; public set; }
    public Nullable`1<bool> DisassociateSchedule { get; public set; }
    [AWSPropertyAttribute]
public string ScheduleIdentifier { get; public set; }
    public string get_ClusterIdentifier();
    public void set_ClusterIdentifier(string value);
    internal bool IsSetClusterIdentifier();
    public Nullable`1<bool> get_DisassociateSchedule();
    public void set_DisassociateSchedule(Nullable`1<bool> value);
    internal bool IsSetDisassociateSchedule();
    public string get_ScheduleIdentifier();
    public void set_ScheduleIdentifier(string value);
    internal bool IsSetScheduleIdentifier();
}
public class Amazon.Redshift.Model.ModifyClusterSnapshotScheduleResponse : AmazonWebServiceResponse {
}
public class Amazon.Redshift.Model.ModifyClusterSubnetGroupRequest : AmazonRedshiftRequest {
    private string _clusterSubnetGroupName;
    private string _description;
    private List`1<string> _subnetIds;
    [AWSPropertyAttribute]
public string ClusterSubnetGroupName { get; public set; }
    [AWSPropertyAttribute]
public string Description { get; public set; }
    [AWSPropertyAttribute]
public List`1<string> SubnetIds { get; public set; }
    public string get_ClusterSubnetGroupName();
    public void set_ClusterSubnetGroupName(string value);
    internal bool IsSetClusterSubnetGroupName();
    public string get_Description();
    public void set_Description(string value);
    internal bool IsSetDescription();
    public List`1<string> get_SubnetIds();
    public void set_SubnetIds(List`1<string> value);
    internal bool IsSetSubnetIds();
}
public class Amazon.Redshift.Model.ModifyClusterSubnetGroupResponse : AmazonWebServiceResponse {
    private ClusterSubnetGroup _clusterSubnetGroup;
    public ClusterSubnetGroup ClusterSubnetGroup { get; public set; }
    public ClusterSubnetGroup get_ClusterSubnetGroup();
    public void set_ClusterSubnetGroup(ClusterSubnetGroup value);
    internal bool IsSetClusterSubnetGroup();
}
public class Amazon.Redshift.Model.ModifyCustomDomainAssociationRequest : AmazonRedshiftRequest {
    private string _clusterIdentifier;
    private string _customDomainCertificateArn;
    private string _customDomainName;
    [AWSPropertyAttribute]
public string ClusterIdentifier { get; public set; }
    [AWSPropertyAttribute]
public string CustomDomainCertificateArn { get; public set; }
    [AWSPropertyAttribute]
public string CustomDomainName { get; public set; }
    public string get_ClusterIdentifier();
    public void set_ClusterIdentifier(string value);
    internal bool IsSetClusterIdentifier();
    public string get_CustomDomainCertificateArn();
    public void set_CustomDomainCertificateArn(string value);
    internal bool IsSetCustomDomainCertificateArn();
    public string get_CustomDomainName();
    public void set_CustomDomainName(string value);
    internal bool IsSetCustomDomainName();
}
public class Amazon.Redshift.Model.ModifyCustomDomainAssociationResponse : AmazonWebServiceResponse {
    private string _clusterIdentifier;
    private string _customDomainCertExpiryTime;
    private string _customDomainCertificateArn;
    private string _customDomainName;
    [AWSPropertyAttribute]
public string ClusterIdentifier { get; public set; }
    [AWSPropertyAttribute]
public string CustomDomainCertExpiryTime { get; public set; }
    [AWSPropertyAttribute]
public string CustomDomainCertificateArn { get; public set; }
    [AWSPropertyAttribute]
public string CustomDomainName { get; public set; }
    public string get_ClusterIdentifier();
    public void set_ClusterIdentifier(string value);
    internal bool IsSetClusterIdentifier();
    public string get_CustomDomainCertExpiryTime();
    public void set_CustomDomainCertExpiryTime(string value);
    internal bool IsSetCustomDomainCertExpiryTime();
    public string get_CustomDomainCertificateArn();
    public void set_CustomDomainCertificateArn(string value);
    internal bool IsSetCustomDomainCertificateArn();
    public string get_CustomDomainName();
    public void set_CustomDomainName(string value);
    internal bool IsSetCustomDomainName();
}
public class Amazon.Redshift.Model.ModifyEndpointAccessRequest : AmazonRedshiftRequest {
    private string _endpointName;
    private List`1<string> _vpcSecurityGroupIds;
    [AWSPropertyAttribute]
public string EndpointName { get; public set; }
    public List`1<string> VpcSecurityGroupIds { get; public set; }
    public string get_EndpointName();
    public void set_EndpointName(string value);
    internal bool IsSetEndpointName();
    public List`1<string> get_VpcSecurityGroupIds();
    public void set_VpcSecurityGroupIds(List`1<string> value);
    internal bool IsSetVpcSecurityGroupIds();
}
public class Amazon.Redshift.Model.ModifyEndpointAccessResponse : AmazonWebServiceResponse {
    private string _address;
    private string _clusterIdentifier;
    private Nullable`1<DateTime> _endpointCreateTime;
    private string _endpointName;
    private string _endpointStatus;
    private Nullable`1<int> _port;
    private string _resourceOwner;
    private string _subnetGroupName;
    private VpcEndpoint _vpcEndpoint;
    private List`1<VpcSecurityGroupMembership> _vpcSecurityGroups;
    [AWSPropertyAttribute]
public string Address { get; public set; }
    [AWSPropertyAttribute]
public string ClusterIdentifier { get; public set; }
    public Nullable`1<DateTime> EndpointCreateTime { get; public set; }
    [AWSPropertyAttribute]
public string EndpointName { get; public set; }
    [AWSPropertyAttribute]
public string EndpointStatus { get; public set; }
    public Nullable`1<int> Port { get; public set; }
    [AWSPropertyAttribute]
public string ResourceOwner { get; public set; }
    [AWSPropertyAttribute]
public string SubnetGroupName { get; public set; }
    public VpcEndpoint VpcEndpoint { get; public set; }
    public List`1<VpcSecurityGroupMembership> VpcSecurityGroups { get; public set; }
    public string get_Address();
    public void set_Address(string value);
    internal bool IsSetAddress();
    public string get_ClusterIdentifier();
    public void set_ClusterIdentifier(string value);
    internal bool IsSetClusterIdentifier();
    public Nullable`1<DateTime> get_EndpointCreateTime();
    public void set_EndpointCreateTime(Nullable`1<DateTime> value);
    internal bool IsSetEndpointCreateTime();
    public string get_EndpointName();
    public void set_EndpointName(string value);
    internal bool IsSetEndpointName();
    public string get_EndpointStatus();
    public void set_EndpointStatus(string value);
    internal bool IsSetEndpointStatus();
    public Nullable`1<int> get_Port();
    public void set_Port(Nullable`1<int> value);
    internal bool IsSetPort();
    public string get_ResourceOwner();
    public void set_ResourceOwner(string value);
    internal bool IsSetResourceOwner();
    public string get_SubnetGroupName();
    public void set_SubnetGroupName(string value);
    internal bool IsSetSubnetGroupName();
    public VpcEndpoint get_VpcEndpoint();
    public void set_VpcEndpoint(VpcEndpoint value);
    internal bool IsSetVpcEndpoint();
    public List`1<VpcSecurityGroupMembership> get_VpcSecurityGroups();
    public void set_VpcSecurityGroups(List`1<VpcSecurityGroupMembership> value);
    internal bool IsSetVpcSecurityGroups();
}
public class Amazon.Redshift.Model.ModifyEventSubscriptionRequest : AmazonRedshiftRequest {
    private Nullable`1<bool> _enabled;
    private List`1<string> _eventCategories;
    private string _severity;
    private string _snsTopicArn;
    private List`1<string> _sourceIds;
    private string _sourceType;
    private string _subscriptionName;
    public Nullable`1<bool> Enabled { get; public set; }
    public List`1<string> EventCategories { get; public set; }
    [AWSPropertyAttribute]
public string Severity { get; public set; }
    [AWSPropertyAttribute]
public string SnsTopicArn { get; public set; }
    public List`1<string> SourceIds { get; public set; }
    [AWSPropertyAttribute]
public string SourceType { get; public set; }
    [AWSPropertyAttribute]
public string SubscriptionName { get; public set; }
    public Nullable`1<bool> get_Enabled();
    public void set_Enabled(Nullable`1<bool> value);
    internal bool IsSetEnabled();
    public List`1<string> get_EventCategories();
    public void set_EventCategories(List`1<string> value);
    internal bool IsSetEventCategories();
    public string get_Severity();
    public void set_Severity(string value);
    internal bool IsSetSeverity();
    public string get_SnsTopicArn();
    public void set_SnsTopicArn(string value);
    internal bool IsSetSnsTopicArn();
    public List`1<string> get_SourceIds();
    public void set_SourceIds(List`1<string> value);
    internal bool IsSetSourceIds();
    public string get_SourceType();
    public void set_SourceType(string value);
    internal bool IsSetSourceType();
    public string get_SubscriptionName();
    public void set_SubscriptionName(string value);
    internal bool IsSetSubscriptionName();
}
public class Amazon.Redshift.Model.ModifyEventSubscriptionResponse : AmazonWebServiceResponse {
    private EventSubscription _eventSubscription;
    public EventSubscription EventSubscription { get; public set; }
    public EventSubscription get_EventSubscription();
    public void set_EventSubscription(EventSubscription value);
    internal bool IsSetEventSubscription();
}
public class Amazon.Redshift.Model.ModifyRedshiftIdcApplicationRequest : AmazonRedshiftRequest {
    private List`1<AuthorizedTokenIssuer> _authorizedTokenIssuerList;
    private string _iamRoleArn;
    private string _idcDisplayName;
    private string _identityNamespace;
    private string _redshiftIdcApplicationArn;
    private List`1<ServiceIntegrationsUnion> _serviceIntegrations;
    public List`1<AuthorizedTokenIssuer> AuthorizedTokenIssuerList { get; public set; }
    [AWSPropertyAttribute]
public string IamRoleArn { get; public set; }
    [AWSPropertyAttribute]
public string IdcDisplayName { get; public set; }
    [AWSPropertyAttribute]
public string IdentityNamespace { get; public set; }
    [AWSPropertyAttribute]
public string RedshiftIdcApplicationArn { get; public set; }
    public List`1<ServiceIntegrationsUnion> ServiceIntegrations { get; public set; }
    public List`1<AuthorizedTokenIssuer> get_AuthorizedTokenIssuerList();
    public void set_AuthorizedTokenIssuerList(List`1<AuthorizedTokenIssuer> value);
    internal bool IsSetAuthorizedTokenIssuerList();
    public string get_IamRoleArn();
    public void set_IamRoleArn(string value);
    internal bool IsSetIamRoleArn();
    public string get_IdcDisplayName();
    public void set_IdcDisplayName(string value);
    internal bool IsSetIdcDisplayName();
    public string get_IdentityNamespace();
    public void set_IdentityNamespace(string value);
    internal bool IsSetIdentityNamespace();
    public string get_RedshiftIdcApplicationArn();
    public void set_RedshiftIdcApplicationArn(string value);
    internal bool IsSetRedshiftIdcApplicationArn();
    public List`1<ServiceIntegrationsUnion> get_ServiceIntegrations();
    public void set_ServiceIntegrations(List`1<ServiceIntegrationsUnion> value);
    internal bool IsSetServiceIntegrations();
}
public class Amazon.Redshift.Model.ModifyRedshiftIdcApplicationResponse : AmazonWebServiceResponse {
    private RedshiftIdcApplication _redshiftIdcApplication;
    public RedshiftIdcApplication RedshiftIdcApplication { get; public set; }
    public RedshiftIdcApplication get_RedshiftIdcApplication();
    public void set_RedshiftIdcApplication(RedshiftIdcApplication value);
    internal bool IsSetRedshiftIdcApplication();
}
public class Amazon.Redshift.Model.ModifyScheduledActionRequest : AmazonRedshiftRequest {
    private Nullable`1<bool> _enable;
    private Nullable`1<DateTime> _endTime;
    private string _iamRole;
    private string _schedule;
    private string _scheduledActionDescription;
    private string _scheduledActionName;
    private Nullable`1<DateTime> _startTime;
    private ScheduledActionType _targetAction;
    public Nullable`1<bool> Enable { get; public set; }
    public Nullable`1<DateTime> EndTime { get; public set; }
    [AWSPropertyAttribute]
public string IamRole { get; public set; }
    [AWSPropertyAttribute]
public string Schedule { get; public set; }
    [AWSPropertyAttribute]
public string ScheduledActionDescription { get; public set; }
    [AWSPropertyAttribute]
public string ScheduledActionName { get; public set; }
    public Nullable`1<DateTime> StartTime { get; public set; }
    public ScheduledActionType TargetAction { get; public set; }
    public Nullable`1<bool> get_Enable();
    public void set_Enable(Nullable`1<bool> value);
    internal bool IsSetEnable();
    public Nullable`1<DateTime> get_EndTime();
    public void set_EndTime(Nullable`1<DateTime> value);
    internal bool IsSetEndTime();
    public string get_IamRole();
    public void set_IamRole(string value);
    internal bool IsSetIamRole();
    public string get_Schedule();
    public void set_Schedule(string value);
    internal bool IsSetSchedule();
    public string get_ScheduledActionDescription();
    public void set_ScheduledActionDescription(string value);
    internal bool IsSetScheduledActionDescription();
    public string get_ScheduledActionName();
    public void set_ScheduledActionName(string value);
    internal bool IsSetScheduledActionName();
    public Nullable`1<DateTime> get_StartTime();
    public void set_StartTime(Nullable`1<DateTime> value);
    internal bool IsSetStartTime();
    public ScheduledActionType get_TargetAction();
    public void set_TargetAction(ScheduledActionType value);
    internal bool IsSetTargetAction();
}
public class Amazon.Redshift.Model.ModifyScheduledActionResponse : AmazonWebServiceResponse {
    private Nullable`1<DateTime> _endTime;
    private string _iamRole;
    private List`1<DateTime> _nextInvocations;
    private string _schedule;
    private string _scheduledActionDescription;
    private string _scheduledActionName;
    private Nullable`1<DateTime> _startTime;
    private ScheduledActionState _state;
    private ScheduledActionType _targetAction;
    public Nullable`1<DateTime> EndTime { get; public set; }
    [AWSPropertyAttribute]
public string IamRole { get; public set; }
    public List`1<DateTime> NextInvocations { get; public set; }
    [AWSPropertyAttribute]
public string Schedule { get; public set; }
    [AWSPropertyAttribute]
public string ScheduledActionDescription { get; public set; }
    [AWSPropertyAttribute]
public string ScheduledActionName { get; public set; }
    public Nullable`1<DateTime> StartTime { get; public set; }
    public ScheduledActionState State { get; public set; }
    public ScheduledActionType TargetAction { get; public set; }
    public Nullable`1<DateTime> get_EndTime();
    public void set_EndTime(Nullable`1<DateTime> value);
    internal bool IsSetEndTime();
    public string get_IamRole();
    public void set_IamRole(string value);
    internal bool IsSetIamRole();
    public List`1<DateTime> get_NextInvocations();
    public void set_NextInvocations(List`1<DateTime> value);
    internal bool IsSetNextInvocations();
    public string get_Schedule();
    public void set_Schedule(string value);
    internal bool IsSetSchedule();
    public string get_ScheduledActionDescription();
    public void set_ScheduledActionDescription(string value);
    internal bool IsSetScheduledActionDescription();
    public string get_ScheduledActionName();
    public void set_ScheduledActionName(string value);
    internal bool IsSetScheduledActionName();
    public Nullable`1<DateTime> get_StartTime();
    public void set_StartTime(Nullable`1<DateTime> value);
    internal bool IsSetStartTime();
    public ScheduledActionState get_State();
    public void set_State(ScheduledActionState value);
    internal bool IsSetState();
    public ScheduledActionType get_TargetAction();
    public void set_TargetAction(ScheduledActionType value);
    internal bool IsSetTargetAction();
}
public class Amazon.Redshift.Model.ModifySnapshotCopyRetentionPeriodRequest : AmazonRedshiftRequest {
    private string _clusterIdentifier;
    private Nullable`1<bool> _manual;
    private Nullable`1<int> _retentionPeriod;
    [AWSPropertyAttribute]
public string ClusterIdentifier { get; public set; }
    public Nullable`1<bool> Manual { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> RetentionPeriod { get; public set; }
    public string get_ClusterIdentifier();
    public void set_ClusterIdentifier(string value);
    internal bool IsSetClusterIdentifier();
    public Nullable`1<bool> get_Manual();
    public void set_Manual(Nullable`1<bool> value);
    internal bool IsSetManual();
    public Nullable`1<int> get_RetentionPeriod();
    public void set_RetentionPeriod(Nullable`1<int> value);
    internal bool IsSetRetentionPeriod();
}
public class Amazon.Redshift.Model.ModifySnapshotCopyRetentionPeriodResponse : AmazonWebServiceResponse {
    private Cluster _cluster;
    public Cluster Cluster { get; public set; }
    public Cluster get_Cluster();
    public void set_Cluster(Cluster value);
    internal bool IsSetCluster();
}
public class Amazon.Redshift.Model.ModifySnapshotScheduleRequest : AmazonRedshiftRequest {
    private List`1<string> _scheduleDefinitions;
    private string _scheduleIdentifier;
    [AWSPropertyAttribute]
public List`1<string> ScheduleDefinitions { get; public set; }
    [AWSPropertyAttribute]
public string ScheduleIdentifier { get; public set; }
    public List`1<string> get_ScheduleDefinitions();
    public void set_ScheduleDefinitions(List`1<string> value);
    internal bool IsSetScheduleDefinitions();
    public string get_ScheduleIdentifier();
    public void set_ScheduleIdentifier(string value);
    internal bool IsSetScheduleIdentifier();
}
public class Amazon.Redshift.Model.ModifySnapshotScheduleResponse : AmazonWebServiceResponse {
    private Nullable`1<int> _associatedClusterCount;
    private List`1<ClusterAssociatedToSchedule> _associatedClusters;
    private List`1<DateTime> _nextInvocations;
    private List`1<string> _scheduleDefinitions;
    private string _scheduleDescription;
    private string _scheduleIdentifier;
    private List`1<Tag> _tags;
    public Nullable`1<int> AssociatedClusterCount { get; public set; }
    public List`1<ClusterAssociatedToSchedule> AssociatedClusters { get; public set; }
    public List`1<DateTime> NextInvocations { get; public set; }
    public List`1<string> ScheduleDefinitions { get; public set; }
    [AWSPropertyAttribute]
public string ScheduleDescription { get; public set; }
    [AWSPropertyAttribute]
public string ScheduleIdentifier { get; public set; }
    public List`1<Tag> Tags { get; public set; }
    public Nullable`1<int> get_AssociatedClusterCount();
    public void set_AssociatedClusterCount(Nullable`1<int> value);
    internal bool IsSetAssociatedClusterCount();
    public List`1<ClusterAssociatedToSchedule> get_AssociatedClusters();
    public void set_AssociatedClusters(List`1<ClusterAssociatedToSchedule> value);
    internal bool IsSetAssociatedClusters();
    public List`1<DateTime> get_NextInvocations();
    public void set_NextInvocations(List`1<DateTime> value);
    internal bool IsSetNextInvocations();
    public List`1<string> get_ScheduleDefinitions();
    public void set_ScheduleDefinitions(List`1<string> value);
    internal bool IsSetScheduleDefinitions();
    public string get_ScheduleDescription();
    public void set_ScheduleDescription(string value);
    internal bool IsSetScheduleDescription();
    public string get_ScheduleIdentifier();
    public void set_ScheduleIdentifier(string value);
    internal bool IsSetScheduleIdentifier();
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
}
public class Amazon.Redshift.Model.ModifyUsageLimitRequest : AmazonRedshiftRequest {
    private Nullable`1<long> _amount;
    private UsageLimitBreachAction _breachAction;
    private string _usageLimitId;
    public Nullable`1<long> Amount { get; public set; }
    public UsageLimitBreachAction BreachAction { get; public set; }
    [AWSPropertyAttribute]
public string UsageLimitId { get; public set; }
    public Nullable`1<long> get_Amount();
    public void set_Amount(Nullable`1<long> value);
    internal bool IsSetAmount();
    public UsageLimitBreachAction get_BreachAction();
    public void set_BreachAction(UsageLimitBreachAction value);
    internal bool IsSetBreachAction();
    public string get_UsageLimitId();
    public void set_UsageLimitId(string value);
    internal bool IsSetUsageLimitId();
}
public class Amazon.Redshift.Model.ModifyUsageLimitResponse : AmazonWebServiceResponse {
    private Nullable`1<long> _amount;
    private UsageLimitBreachAction _breachAction;
    private string _clusterIdentifier;
    private UsageLimitFeatureType _featureType;
    private UsageLimitLimitType _limitType;
    private UsageLimitPeriod _period;
    private List`1<Tag> _tags;
    private string _usageLimitId;
    public Nullable`1<long> Amount { get; public set; }
    public UsageLimitBreachAction BreachAction { get; public set; }
    [AWSPropertyAttribute]
public string ClusterIdentifier { get; public set; }
    public UsageLimitFeatureType FeatureType { get; public set; }
    public UsageLimitLimitType LimitType { get; public set; }
    public UsageLimitPeriod Period { get; public set; }
    public List`1<Tag> Tags { get; public set; }
    [AWSPropertyAttribute]
public string UsageLimitId { get; public set; }
    public Nullable`1<long> get_Amount();
    public void set_Amount(Nullable`1<long> value);
    internal bool IsSetAmount();
    public UsageLimitBreachAction get_BreachAction();
    public void set_BreachAction(UsageLimitBreachAction value);
    internal bool IsSetBreachAction();
    public string get_ClusterIdentifier();
    public void set_ClusterIdentifier(string value);
    internal bool IsSetClusterIdentifier();
    public UsageLimitFeatureType get_FeatureType();
    public void set_FeatureType(UsageLimitFeatureType value);
    internal bool IsSetFeatureType();
    public UsageLimitLimitType get_LimitType();
    public void set_LimitType(UsageLimitLimitType value);
    internal bool IsSetLimitType();
    public UsageLimitPeriod get_Period();
    public void set_Period(UsageLimitPeriod value);
    internal bool IsSetPeriod();
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
    public string get_UsageLimitId();
    public void set_UsageLimitId(string value);
    internal bool IsSetUsageLimitId();
}
public class Amazon.Redshift.Model.NetworkInterface : object {
    private string _availabilityZone;
    private string _ipv6Address;
    private string _networkInterfaceId;
    private string _privateIpAddress;
    private string _subnetId;
    [AWSPropertyAttribute]
public string AvailabilityZone { get; public set; }
    [AWSPropertyAttribute]
public string Ipv6Address { get; public set; }
    [AWSPropertyAttribute]
public string NetworkInterfaceId { get; public set; }
    [AWSPropertyAttribute]
public string PrivateIpAddress { get; public set; }
    [AWSPropertyAttribute]
public string SubnetId { get; public set; }
    public string get_AvailabilityZone();
    public void set_AvailabilityZone(string value);
    internal bool IsSetAvailabilityZone();
    public string get_Ipv6Address();
    public void set_Ipv6Address(string value);
    internal bool IsSetIpv6Address();
    public string get_NetworkInterfaceId();
    public void set_NetworkInterfaceId(string value);
    internal bool IsSetNetworkInterfaceId();
    public string get_PrivateIpAddress();
    public void set_PrivateIpAddress(string value);
    internal bool IsSetPrivateIpAddress();
    public string get_SubnetId();
    public void set_SubnetId(string value);
    internal bool IsSetSubnetId();
}
public class Amazon.Redshift.Model.NodeConfigurationOption : object {
    private Nullable`1<double> _estimatedDiskUtilizationPercent;
    private Mode _mode;
    private string _nodeType;
    private Nullable`1<int> _numberOfNodes;
    public Nullable`1<double> EstimatedDiskUtilizationPercent { get; public set; }
    public Mode Mode { get; public set; }
    [AWSPropertyAttribute]
public string NodeType { get; public set; }
    public Nullable`1<int> NumberOfNodes { get; public set; }
    public Nullable`1<double> get_EstimatedDiskUtilizationPercent();
    public void set_EstimatedDiskUtilizationPercent(Nullable`1<double> value);
    internal bool IsSetEstimatedDiskUtilizationPercent();
    public Mode get_Mode();
    public void set_Mode(Mode value);
    internal bool IsSetMode();
    public string get_NodeType();
    public void set_NodeType(string value);
    internal bool IsSetNodeType();
    public Nullable`1<int> get_NumberOfNodes();
    public void set_NumberOfNodes(Nullable`1<int> value);
    internal bool IsSetNumberOfNodes();
}
public class Amazon.Redshift.Model.NodeConfigurationOptionsFilter : object {
    private NodeConfigurationOptionsFilterName _name;
    private OperatorType _operator;
    private List`1<string> _values;
    public NodeConfigurationOptionsFilterName Name { get; public set; }
    public OperatorType Operator { get; public set; }
    public List`1<string> Values { get; public set; }
    public NodeConfigurationOptionsFilterName get_Name();
    public void set_Name(NodeConfigurationOptionsFilterName value);
    internal bool IsSetName();
    public OperatorType get_Operator();
    public void set_Operator(OperatorType value);
    internal bool IsSetOperator();
    public List`1<string> get_Values();
    public void set_Values(List`1<string> value);
    internal bool IsSetValues();
}
public class Amazon.Redshift.Model.NumberOfNodesPerClusterLimitExceededException : AmazonRedshiftException {
    public NumberOfNodesPerClusterLimitExceededException(string message);
    public NumberOfNodesPerClusterLimitExceededException(string message, Exception innerException);
    public NumberOfNodesPerClusterLimitExceededException(Exception innerException);
    public NumberOfNodesPerClusterLimitExceededException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public NumberOfNodesPerClusterLimitExceededException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Redshift.Model.NumberOfNodesQuotaExceededException : AmazonRedshiftException {
    public NumberOfNodesQuotaExceededException(string message);
    public NumberOfNodesQuotaExceededException(string message, Exception innerException);
    public NumberOfNodesQuotaExceededException(Exception innerException);
    public NumberOfNodesQuotaExceededException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public NumberOfNodesQuotaExceededException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Redshift.Model.OrderableClusterOption : object {
    private List`1<AvailabilityZone> _availabilityZones;
    private string _clusterType;
    private string _clusterVersion;
    private string _nodeType;
    public List`1<AvailabilityZone> AvailabilityZones { get; public set; }
    [AWSPropertyAttribute]
public string ClusterType { get; public set; }
    [AWSPropertyAttribute]
public string ClusterVersion { get; public set; }
    [AWSPropertyAttribute]
public string NodeType { get; public set; }
    public List`1<AvailabilityZone> get_AvailabilityZones();
    public void set_AvailabilityZones(List`1<AvailabilityZone> value);
    internal bool IsSetAvailabilityZones();
    public string get_ClusterType();
    public void set_ClusterType(string value);
    internal bool IsSetClusterType();
    public string get_ClusterVersion();
    public void set_ClusterVersion(string value);
    internal bool IsSetClusterVersion();
    public string get_NodeType();
    public void set_NodeType(string value);
    internal bool IsSetNodeType();
}
public class Amazon.Redshift.Model.Parameter : object {
    private string _allowedValues;
    private ParameterApplyType _applyType;
    private string _dataType;
    private string _description;
    private Nullable`1<bool> _isModifiable;
    private string _minimumEngineVersion;
    private string _parameterName;
    private string _parameterValue;
    private string _source;
    [AWSPropertyAttribute]
public string AllowedValues { get; public set; }
    public ParameterApplyType ApplyType { get; public set; }
    [AWSPropertyAttribute]
public string DataType { get; public set; }
    [AWSPropertyAttribute]
public string Description { get; public set; }
    public Nullable`1<bool> IsModifiable { get; public set; }
    [AWSPropertyAttribute]
public string MinimumEngineVersion { get; public set; }
    [AWSPropertyAttribute]
public string ParameterName { get; public set; }
    [AWSPropertyAttribute]
public string ParameterValue { get; public set; }
    [AWSPropertyAttribute]
public string Source { get; public set; }
    public string get_AllowedValues();
    public void set_AllowedValues(string value);
    internal bool IsSetAllowedValues();
    public ParameterApplyType get_ApplyType();
    public void set_ApplyType(ParameterApplyType value);
    internal bool IsSetApplyType();
    public string get_DataType();
    public void set_DataType(string value);
    internal bool IsSetDataType();
    public string get_Description();
    public void set_Description(string value);
    internal bool IsSetDescription();
    public Nullable`1<bool> get_IsModifiable();
    public void set_IsModifiable(Nullable`1<bool> value);
    internal bool IsSetIsModifiable();
    public string get_MinimumEngineVersion();
    public void set_MinimumEngineVersion(string value);
    internal bool IsSetMinimumEngineVersion();
    public string get_ParameterName();
    public void set_ParameterName(string value);
    internal bool IsSetParameterName();
    public string get_ParameterValue();
    public void set_ParameterValue(string value);
    internal bool IsSetParameterValue();
    public string get_Source();
    public void set_Source(string value);
    internal bool IsSetSource();
}
public class Amazon.Redshift.Model.PartnerIntegrationInfo : object {
    private Nullable`1<DateTime> _createdAt;
    private string _databaseName;
    private string _partnerName;
    private PartnerIntegrationStatus _status;
    private string _statusMessage;
    private Nullable`1<DateTime> _updatedAt;
    public Nullable`1<DateTime> CreatedAt { get; public set; }
    [AWSPropertyAttribute]
public string DatabaseName { get; public set; }
    [AWSPropertyAttribute]
public string PartnerName { get; public set; }
    public PartnerIntegrationStatus Status { get; public set; }
    [AWSPropertyAttribute]
public string StatusMessage { get; public set; }
    public Nullable`1<DateTime> UpdatedAt { get; public set; }
    public Nullable`1<DateTime> get_CreatedAt();
    public void set_CreatedAt(Nullable`1<DateTime> value);
    internal bool IsSetCreatedAt();
    public string get_DatabaseName();
    public void set_DatabaseName(string value);
    internal bool IsSetDatabaseName();
    public string get_PartnerName();
    public void set_PartnerName(string value);
    internal bool IsSetPartnerName();
    public PartnerIntegrationStatus get_Status();
    public void set_Status(PartnerIntegrationStatus value);
    internal bool IsSetStatus();
    public string get_StatusMessage();
    public void set_StatusMessage(string value);
    internal bool IsSetStatusMessage();
    public Nullable`1<DateTime> get_UpdatedAt();
    public void set_UpdatedAt(Nullable`1<DateTime> value);
    internal bool IsSetUpdatedAt();
}
public class Amazon.Redshift.Model.PartnerNotFoundException : AmazonRedshiftException {
    public PartnerNotFoundException(string message);
    public PartnerNotFoundException(string message, Exception innerException);
    public PartnerNotFoundException(Exception innerException);
    public PartnerNotFoundException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public PartnerNotFoundException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Redshift.Model.PauseClusterMessage : object {
    private string _clusterIdentifier;
    [AWSPropertyAttribute]
public string ClusterIdentifier { get; public set; }
    public string get_ClusterIdentifier();
    public void set_ClusterIdentifier(string value);
    internal bool IsSetClusterIdentifier();
}
public class Amazon.Redshift.Model.PauseClusterRequest : AmazonRedshiftRequest {
    private string _clusterIdentifier;
    [AWSPropertyAttribute]
public string ClusterIdentifier { get; public set; }
    public string get_ClusterIdentifier();
    public void set_ClusterIdentifier(string value);
    internal bool IsSetClusterIdentifier();
}
public class Amazon.Redshift.Model.PauseClusterResponse : AmazonWebServiceResponse {
    private Cluster _cluster;
    public Cluster Cluster { get; public set; }
    public Cluster get_Cluster();
    public void set_Cluster(Cluster value);
    internal bool IsSetCluster();
}
public class Amazon.Redshift.Model.PendingModifiedValues : object {
    private Nullable`1<int> _automatedSnapshotRetentionPeriod;
    private string _clusterIdentifier;
    private string _clusterType;
    private string _clusterVersion;
    private string _encryptionType;
    private Nullable`1<bool> _enhancedVpcRouting;
    private string _maintenanceTrackName;
    private string _masterUserPassword;
    private string _nodeType;
    private Nullable`1<int> _numberOfNodes;
    private Nullable`1<bool> _publiclyAccessible;
    public Nullable`1<int> AutomatedSnapshotRetentionPeriod { get; public set; }
    [AWSPropertyAttribute]
public string ClusterIdentifier { get; public set; }
    [AWSPropertyAttribute]
public string ClusterType { get; public set; }
    [AWSPropertyAttribute]
public string ClusterVersion { get; public set; }
    [AWSPropertyAttribute]
public string EncryptionType { get; public set; }
    public Nullable`1<bool> EnhancedVpcRouting { get; public set; }
    [AWSPropertyAttribute]
public string MaintenanceTrackName { get; public set; }
    [AWSPropertyAttribute]
public string MasterUserPassword { get; public set; }
    [AWSPropertyAttribute]
public string NodeType { get; public set; }
    public Nullable`1<int> NumberOfNodes { get; public set; }
    public Nullable`1<bool> PubliclyAccessible { get; public set; }
    public Nullable`1<int> get_AutomatedSnapshotRetentionPeriod();
    public void set_AutomatedSnapshotRetentionPeriod(Nullable`1<int> value);
    internal bool IsSetAutomatedSnapshotRetentionPeriod();
    public string get_ClusterIdentifier();
    public void set_ClusterIdentifier(string value);
    internal bool IsSetClusterIdentifier();
    public string get_ClusterType();
    public void set_ClusterType(string value);
    internal bool IsSetClusterType();
    public string get_ClusterVersion();
    public void set_ClusterVersion(string value);
    internal bool IsSetClusterVersion();
    public string get_EncryptionType();
    public void set_EncryptionType(string value);
    internal bool IsSetEncryptionType();
    public Nullable`1<bool> get_EnhancedVpcRouting();
    public void set_EnhancedVpcRouting(Nullable`1<bool> value);
    internal bool IsSetEnhancedVpcRouting();
    public string get_MaintenanceTrackName();
    public void set_MaintenanceTrackName(string value);
    internal bool IsSetMaintenanceTrackName();
    public string get_MasterUserPassword();
    public void set_MasterUserPassword(string value);
    internal bool IsSetMasterUserPassword();
    public string get_NodeType();
    public void set_NodeType(string value);
    internal bool IsSetNodeType();
    public Nullable`1<int> get_NumberOfNodes();
    public void set_NumberOfNodes(Nullable`1<int> value);
    internal bool IsSetNumberOfNodes();
    public Nullable`1<bool> get_PubliclyAccessible();
    public void set_PubliclyAccessible(Nullable`1<bool> value);
    internal bool IsSetPubliclyAccessible();
}
public class Amazon.Redshift.Model.PurchaseReservedNodeOfferingRequest : AmazonRedshiftRequest {
    private Nullable`1<int> _nodeCount;
    private string _reservedNodeOfferingId;
    public Nullable`1<int> NodeCount { get; public set; }
    [AWSPropertyAttribute]
public string ReservedNodeOfferingId { get; public set; }
    public Nullable`1<int> get_NodeCount();
    public void set_NodeCount(Nullable`1<int> value);
    internal bool IsSetNodeCount();
    public string get_ReservedNodeOfferingId();
    public void set_ReservedNodeOfferingId(string value);
    internal bool IsSetReservedNodeOfferingId();
}
public class Amazon.Redshift.Model.PurchaseReservedNodeOfferingResponse : AmazonWebServiceResponse {
    private ReservedNode _reservedNode;
    public ReservedNode ReservedNode { get; public set; }
    public ReservedNode get_ReservedNode();
    public void set_ReservedNode(ReservedNode value);
    internal bool IsSetReservedNode();
}
public class Amazon.Redshift.Model.PutResourcePolicyRequest : AmazonRedshiftRequest {
    private string _policy;
    private string _resourceArn;
    [AWSPropertyAttribute]
public string Policy { get; public set; }
    [AWSPropertyAttribute]
public string ResourceArn { get; public set; }
    public string get_Policy();
    public void set_Policy(string value);
    internal bool IsSetPolicy();
    public string get_ResourceArn();
    public void set_ResourceArn(string value);
    internal bool IsSetResourceArn();
}
public class Amazon.Redshift.Model.PutResourcePolicyResponse : AmazonWebServiceResponse {
    private ResourcePolicy _resourcePolicy;
    public ResourcePolicy ResourcePolicy { get; public set; }
    public ResourcePolicy get_ResourcePolicy();
    public void set_ResourcePolicy(ResourcePolicy value);
    internal bool IsSetResourcePolicy();
}
public class Amazon.Redshift.Model.RebootClusterRequest : AmazonRedshiftRequest {
    private string _clusterIdentifier;
    [AWSPropertyAttribute]
public string ClusterIdentifier { get; public set; }
    public string get_ClusterIdentifier();
    public void set_ClusterIdentifier(string value);
    internal bool IsSetClusterIdentifier();
}
public class Amazon.Redshift.Model.RebootClusterResponse : AmazonWebServiceResponse {
    private Cluster _cluster;
    public Cluster Cluster { get; public set; }
    public Cluster get_Cluster();
    public void set_Cluster(Cluster value);
    internal bool IsSetCluster();
}
public class Amazon.Redshift.Model.Recommendation : object {
    private string _clusterIdentifier;
    private Nullable`1<DateTime> _createdAt;
    private string _description;
    private string _id;
    private ImpactRankingType _impactRanking;
    private string _namespaceArn;
    private string _observation;
    private string _recommendationText;
    private string _recommendationType;
    private List`1<RecommendedAction> _recommendedActions;
    private List`1<ReferenceLink> _referenceLinks;
    private string _title;
    [AWSPropertyAttribute]
public string ClusterIdentifier { get; public set; }
    public Nullable`1<DateTime> CreatedAt { get; public set; }
    [AWSPropertyAttribute]
public string Description { get; public set; }
    [AWSPropertyAttribute]
public string Id { get; public set; }
    public ImpactRankingType ImpactRanking { get; public set; }
    [AWSPropertyAttribute]
public string NamespaceArn { get; public set; }
    [AWSPropertyAttribute]
public string Observation { get; public set; }
    [AWSPropertyAttribute]
public string RecommendationText { get; public set; }
    [AWSPropertyAttribute]
public string RecommendationType { get; public set; }
    public List`1<RecommendedAction> RecommendedActions { get; public set; }
    public List`1<ReferenceLink> ReferenceLinks { get; public set; }
    [AWSPropertyAttribute]
public string Title { get; public set; }
    public string get_ClusterIdentifier();
    public void set_ClusterIdentifier(string value);
    internal bool IsSetClusterIdentifier();
    public Nullable`1<DateTime> get_CreatedAt();
    public void set_CreatedAt(Nullable`1<DateTime> value);
    internal bool IsSetCreatedAt();
    public string get_Description();
    public void set_Description(string value);
    internal bool IsSetDescription();
    public string get_Id();
    public void set_Id(string value);
    internal bool IsSetId();
    public ImpactRankingType get_ImpactRanking();
    public void set_ImpactRanking(ImpactRankingType value);
    internal bool IsSetImpactRanking();
    public string get_NamespaceArn();
    public void set_NamespaceArn(string value);
    internal bool IsSetNamespaceArn();
    public string get_Observation();
    public void set_Observation(string value);
    internal bool IsSetObservation();
    public string get_RecommendationText();
    public void set_RecommendationText(string value);
    internal bool IsSetRecommendationText();
    public string get_RecommendationType();
    public void set_RecommendationType(string value);
    internal bool IsSetRecommendationType();
    public List`1<RecommendedAction> get_RecommendedActions();
    public void set_RecommendedActions(List`1<RecommendedAction> value);
    internal bool IsSetRecommendedActions();
    public List`1<ReferenceLink> get_ReferenceLinks();
    public void set_ReferenceLinks(List`1<ReferenceLink> value);
    internal bool IsSetReferenceLinks();
    public string get_Title();
    public void set_Title(string value);
    internal bool IsSetTitle();
}
public class Amazon.Redshift.Model.RecommendedAction : object {
    private string _command;
    private string _database;
    private string _text;
    private RecommendedActionType _type;
    [AWSPropertyAttribute]
public string Command { get; public set; }
    [AWSPropertyAttribute]
public string Database { get; public set; }
    [AWSPropertyAttribute]
public string Text { get; public set; }
    public RecommendedActionType Type { get; public set; }
    public string get_Command();
    public void set_Command(string value);
    internal bool IsSetCommand();
    public string get_Database();
    public void set_Database(string value);
    internal bool IsSetDatabase();
    public string get_Text();
    public void set_Text(string value);
    internal bool IsSetText();
    public RecommendedActionType get_Type();
    public void set_Type(RecommendedActionType value);
    internal bool IsSetType();
}
public class Amazon.Redshift.Model.RecurringCharge : object {
    private Nullable`1<double> _recurringChargeAmount;
    private string _recurringChargeFrequency;
    public Nullable`1<double> RecurringChargeAmount { get; public set; }
    [AWSPropertyAttribute]
public string RecurringChargeFrequency { get; public set; }
    public Nullable`1<double> get_RecurringChargeAmount();
    public void set_RecurringChargeAmount(Nullable`1<double> value);
    internal bool IsSetRecurringChargeAmount();
    public string get_RecurringChargeFrequency();
    public void set_RecurringChargeFrequency(string value);
    internal bool IsSetRecurringChargeFrequency();
}
public class Amazon.Redshift.Model.RedshiftIdcApplication : object {
    private List`1<AuthorizedTokenIssuer> _authorizedTokenIssuerList;
    private string _iamRoleArn;
    private string _idcDisplayName;
    private string _idcInstanceArn;
    private string _idcManagedApplicationArn;
    private string _idcOnboardStatus;
    private string _identityNamespace;
    private string _redshiftIdcApplicationArn;
    private string _redshiftIdcApplicationName;
    private List`1<ServiceIntegrationsUnion> _serviceIntegrations;
    public List`1<AuthorizedTokenIssuer> AuthorizedTokenIssuerList { get; public set; }
    [AWSPropertyAttribute]
public string IamRoleArn { get; public set; }
    [AWSPropertyAttribute]
public string IdcDisplayName { get; public set; }
    [AWSPropertyAttribute]
public string IdcInstanceArn { get; public set; }
    [AWSPropertyAttribute]
public string IdcManagedApplicationArn { get; public set; }
    [AWSPropertyAttribute]
public string IdcOnboardStatus { get; public set; }
    [AWSPropertyAttribute]
public string IdentityNamespace { get; public set; }
    [AWSPropertyAttribute]
public string RedshiftIdcApplicationArn { get; public set; }
    [AWSPropertyAttribute]
public string RedshiftIdcApplicationName { get; public set; }
    public List`1<ServiceIntegrationsUnion> ServiceIntegrations { get; public set; }
    public List`1<AuthorizedTokenIssuer> get_AuthorizedTokenIssuerList();
    public void set_AuthorizedTokenIssuerList(List`1<AuthorizedTokenIssuer> value);
    internal bool IsSetAuthorizedTokenIssuerList();
    public string get_IamRoleArn();
    public void set_IamRoleArn(string value);
    internal bool IsSetIamRoleArn();
    public string get_IdcDisplayName();
    public void set_IdcDisplayName(string value);
    internal bool IsSetIdcDisplayName();
    public string get_IdcInstanceArn();
    public void set_IdcInstanceArn(string value);
    internal bool IsSetIdcInstanceArn();
    public string get_IdcManagedApplicationArn();
    public void set_IdcManagedApplicationArn(string value);
    internal bool IsSetIdcManagedApplicationArn();
    public string get_IdcOnboardStatus();
    public void set_IdcOnboardStatus(string value);
    internal bool IsSetIdcOnboardStatus();
    public string get_IdentityNamespace();
    public void set_IdentityNamespace(string value);
    internal bool IsSetIdentityNamespace();
    public string get_RedshiftIdcApplicationArn();
    public void set_RedshiftIdcApplicationArn(string value);
    internal bool IsSetRedshiftIdcApplicationArn();
    public string get_RedshiftIdcApplicationName();
    public void set_RedshiftIdcApplicationName(string value);
    internal bool IsSetRedshiftIdcApplicationName();
    public List`1<ServiceIntegrationsUnion> get_ServiceIntegrations();
    public void set_ServiceIntegrations(List`1<ServiceIntegrationsUnion> value);
    internal bool IsSetServiceIntegrations();
}
public class Amazon.Redshift.Model.RedshiftIdcApplicationAlreadyExistsException : AmazonRedshiftException {
    public RedshiftIdcApplicationAlreadyExistsException(string message);
    public RedshiftIdcApplicationAlreadyExistsException(string message, Exception innerException);
    public RedshiftIdcApplicationAlreadyExistsException(Exception innerException);
    public RedshiftIdcApplicationAlreadyExistsException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public RedshiftIdcApplicationAlreadyExistsException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Redshift.Model.RedshiftIdcApplicationNotExistsException : AmazonRedshiftException {
    public RedshiftIdcApplicationNotExistsException(string message);
    public RedshiftIdcApplicationNotExistsException(string message, Exception innerException);
    public RedshiftIdcApplicationNotExistsException(Exception innerException);
    public RedshiftIdcApplicationNotExistsException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public RedshiftIdcApplicationNotExistsException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Redshift.Model.RedshiftIdcApplicationQuotaExceededException : AmazonRedshiftException {
    public RedshiftIdcApplicationQuotaExceededException(string message);
    public RedshiftIdcApplicationQuotaExceededException(string message, Exception innerException);
    public RedshiftIdcApplicationQuotaExceededException(Exception innerException);
    public RedshiftIdcApplicationQuotaExceededException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public RedshiftIdcApplicationQuotaExceededException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Redshift.Model.RedshiftPaginatorFactory : object {
    private IAmazonRedshift client;
    internal RedshiftPaginatorFactory(IAmazonRedshift client);
    public sealed virtual IDescribeClusterDbRevisionsPaginator DescribeClusterDbRevisions(DescribeClusterDbRevisionsRequest request);
    public sealed virtual IDescribeClusterParameterGroupsPaginator DescribeClusterParameterGroups(DescribeClusterParameterGroupsRequest request);
    public sealed virtual IDescribeClusterParametersPaginator DescribeClusterParameters(DescribeClusterParametersRequest request);
    public sealed virtual IDescribeClustersPaginator DescribeClusters(DescribeClustersRequest request);
    public sealed virtual IDescribeClusterSecurityGroupsPaginator DescribeClusterSecurityGroups(DescribeClusterSecurityGroupsRequest request);
    public sealed virtual IDescribeClusterSnapshotsPaginator DescribeClusterSnapshots(DescribeClusterSnapshotsRequest request);
    public sealed virtual IDescribeClusterSubnetGroupsPaginator DescribeClusterSubnetGroups(DescribeClusterSubnetGroupsRequest request);
    public sealed virtual IDescribeClusterTracksPaginator DescribeClusterTracks(DescribeClusterTracksRequest request);
    public sealed virtual IDescribeClusterVersionsPaginator DescribeClusterVersions(DescribeClusterVersionsRequest request);
    public sealed virtual IDescribeCustomDomainAssociationsPaginator DescribeCustomDomainAssociations(DescribeCustomDomainAssociationsRequest request);
    public sealed virtual IDescribeDataSharesPaginator DescribeDataShares(DescribeDataSharesRequest request);
    public sealed virtual IDescribeDataSharesForConsumerPaginator DescribeDataSharesForConsumer(DescribeDataSharesForConsumerRequest request);
    public sealed virtual IDescribeDataSharesForProducerPaginator DescribeDataSharesForProducer(DescribeDataSharesForProducerRequest request);
    public sealed virtual IDescribeDefaultClusterParametersPaginator DescribeDefaultClusterParameters(DescribeDefaultClusterParametersRequest request);
    public sealed virtual IDescribeEndpointAccessPaginator DescribeEndpointAccess(DescribeEndpointAccessRequest request);
    public sealed virtual IDescribeEndpointAuthorizationPaginator DescribeEndpointAuthorization(DescribeEndpointAuthorizationRequest request);
    public sealed virtual IDescribeEventsPaginator DescribeEvents(DescribeEventsRequest request);
    public sealed virtual IDescribeEventSubscriptionsPaginator DescribeEventSubscriptions(DescribeEventSubscriptionsRequest request);
    public sealed virtual IDescribeHsmClientCertificatesPaginator DescribeHsmClientCertificates(DescribeHsmClientCertificatesRequest request);
    public sealed virtual IDescribeHsmConfigurationsPaginator DescribeHsmConfigurations(DescribeHsmConfigurationsRequest request);
    public sealed virtual IDescribeInboundIntegrationsPaginator DescribeInboundIntegrations(DescribeInboundIntegrationsRequest request);
    public sealed virtual IDescribeNodeConfigurationOptionsPaginator DescribeNodeConfigurationOptions(DescribeNodeConfigurationOptionsRequest request);
    public sealed virtual IDescribeOrderableClusterOptionsPaginator DescribeOrderableClusterOptions(DescribeOrderableClusterOptionsRequest request);
    public sealed virtual IDescribeRedshiftIdcApplicationsPaginator DescribeRedshiftIdcApplications(DescribeRedshiftIdcApplicationsRequest request);
    public sealed virtual IDescribeReservedNodeExchangeStatusPaginator DescribeReservedNodeExchangeStatus(DescribeReservedNodeExchangeStatusRequest request);
    public sealed virtual IDescribeReservedNodeOfferingsPaginator DescribeReservedNodeOfferings(DescribeReservedNodeOfferingsRequest request);
    public sealed virtual IDescribeReservedNodesPaginator DescribeReservedNodes(DescribeReservedNodesRequest request);
    public sealed virtual IDescribeScheduledActionsPaginator DescribeScheduledActions(DescribeScheduledActionsRequest request);
    public sealed virtual IDescribeSnapshotCopyGrantsPaginator DescribeSnapshotCopyGrants(DescribeSnapshotCopyGrantsRequest request);
    public sealed virtual IDescribeSnapshotSchedulesPaginator DescribeSnapshotSchedules(DescribeSnapshotSchedulesRequest request);
    public sealed virtual IDescribeTableRestoreStatusPaginator DescribeTableRestoreStatus(DescribeTableRestoreStatusRequest request);
    public sealed virtual IDescribeTagsPaginator DescribeTags(DescribeTagsRequest request);
    public sealed virtual IDescribeUsageLimitsPaginator DescribeUsageLimits(DescribeUsageLimitsRequest request);
    public sealed virtual IGetReservedNodeExchangeConfigurationOptionsPaginator GetReservedNodeExchangeConfigurationOptions(GetReservedNodeExchangeConfigurationOptionsRequest request);
    public sealed virtual IGetReservedNodeExchangeOfferingsPaginator GetReservedNodeExchangeOfferings(GetReservedNodeExchangeOfferingsRequest request);
    public sealed virtual IListRecommendationsPaginator ListRecommendations(ListRecommendationsRequest request);
}
public class Amazon.Redshift.Model.ReferenceLink : object {
    private string _link;
    private string _text;
    [AWSPropertyAttribute]
public string Link { get; public set; }
    [AWSPropertyAttribute]
public string Text { get; public set; }
    public string get_Link();
    public void set_Link(string value);
    internal bool IsSetLink();
    public string get_Text();
    public void set_Text(string value);
    internal bool IsSetText();
}
public class Amazon.Redshift.Model.RejectDataShareRequest : AmazonRedshiftRequest {
    private string _dataShareArn;
    [AWSPropertyAttribute]
public string DataShareArn { get; public set; }
    public string get_DataShareArn();
    public void set_DataShareArn(string value);
    internal bool IsSetDataShareArn();
}
public class Amazon.Redshift.Model.RejectDataShareResponse : AmazonWebServiceResponse {
    private Nullable`1<bool> _allowPubliclyAccessibleConsumers;
    private string _dataShareArn;
    private List`1<DataShareAssociation> _dataShareAssociations;
    private string _managedBy;
    private string _producerArn;
    public Nullable`1<bool> AllowPubliclyAccessibleConsumers { get; public set; }
    [AWSPropertyAttribute]
public string DataShareArn { get; public set; }
    public List`1<DataShareAssociation> DataShareAssociations { get; public set; }
    [AWSPropertyAttribute]
public string ManagedBy { get; public set; }
    [AWSPropertyAttribute]
public string ProducerArn { get; public set; }
    public Nullable`1<bool> get_AllowPubliclyAccessibleConsumers();
    public void set_AllowPubliclyAccessibleConsumers(Nullable`1<bool> value);
    internal bool IsSetAllowPubliclyAccessibleConsumers();
    public string get_DataShareArn();
    public void set_DataShareArn(string value);
    internal bool IsSetDataShareArn();
    public List`1<DataShareAssociation> get_DataShareAssociations();
    public void set_DataShareAssociations(List`1<DataShareAssociation> value);
    internal bool IsSetDataShareAssociations();
    public string get_ManagedBy();
    public void set_ManagedBy(string value);
    internal bool IsSetManagedBy();
    public string get_ProducerArn();
    public void set_ProducerArn(string value);
    internal bool IsSetProducerArn();
}
public class Amazon.Redshift.Model.ReservedNode : object {
    private string _currencyCode;
    private Nullable`1<int> _duration;
    private Nullable`1<double> _fixedPrice;
    private Nullable`1<int> _nodeCount;
    private string _nodeType;
    private string _offeringType;
    private List`1<RecurringCharge> _recurringCharges;
    private string _reservedNodeId;
    private string _reservedNodeOfferingId;
    private ReservedNodeOfferingType _reservedNodeOfferingType;
    private Nullable`1<DateTime> _startTime;
    private string _state;
    private Nullable`1<double> _usagePrice;
    [AWSPropertyAttribute]
public string CurrencyCode { get; public set; }
    public Nullable`1<int> Duration { get; public set; }
    public Nullable`1<double> FixedPrice { get; public set; }
    public Nullable`1<int> NodeCount { get; public set; }
    [AWSPropertyAttribute]
public string NodeType { get; public set; }
    [AWSPropertyAttribute]
public string OfferingType { get; public set; }
    public List`1<RecurringCharge> RecurringCharges { get; public set; }
    [AWSPropertyAttribute]
public string ReservedNodeId { get; public set; }
    [AWSPropertyAttribute]
public string ReservedNodeOfferingId { get; public set; }
    public ReservedNodeOfferingType ReservedNodeOfferingType { get; public set; }
    public Nullable`1<DateTime> StartTime { get; public set; }
    [AWSPropertyAttribute]
public string State { get; public set; }
    public Nullable`1<double> UsagePrice { get; public set; }
    public string get_CurrencyCode();
    public void set_CurrencyCode(string value);
    internal bool IsSetCurrencyCode();
    public Nullable`1<int> get_Duration();
    public void set_Duration(Nullable`1<int> value);
    internal bool IsSetDuration();
    public Nullable`1<double> get_FixedPrice();
    public void set_FixedPrice(Nullable`1<double> value);
    internal bool IsSetFixedPrice();
    public Nullable`1<int> get_NodeCount();
    public void set_NodeCount(Nullable`1<int> value);
    internal bool IsSetNodeCount();
    public string get_NodeType();
    public void set_NodeType(string value);
    internal bool IsSetNodeType();
    public string get_OfferingType();
    public void set_OfferingType(string value);
    internal bool IsSetOfferingType();
    public List`1<RecurringCharge> get_RecurringCharges();
    public void set_RecurringCharges(List`1<RecurringCharge> value);
    internal bool IsSetRecurringCharges();
    public string get_ReservedNodeId();
    public void set_ReservedNodeId(string value);
    internal bool IsSetReservedNodeId();
    public string get_ReservedNodeOfferingId();
    public void set_ReservedNodeOfferingId(string value);
    internal bool IsSetReservedNodeOfferingId();
    public ReservedNodeOfferingType get_ReservedNodeOfferingType();
    public void set_ReservedNodeOfferingType(ReservedNodeOfferingType value);
    internal bool IsSetReservedNodeOfferingType();
    public Nullable`1<DateTime> get_StartTime();
    public void set_StartTime(Nullable`1<DateTime> value);
    internal bool IsSetStartTime();
    public string get_State();
    public void set_State(string value);
    internal bool IsSetState();
    public Nullable`1<double> get_UsagePrice();
    public void set_UsagePrice(Nullable`1<double> value);
    internal bool IsSetUsagePrice();
}
public class Amazon.Redshift.Model.ReservedNodeAlreadyExistsException : AmazonRedshiftException {
    public ReservedNodeAlreadyExistsException(string message);
    public ReservedNodeAlreadyExistsException(string message, Exception innerException);
    public ReservedNodeAlreadyExistsException(Exception innerException);
    public ReservedNodeAlreadyExistsException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public ReservedNodeAlreadyExistsException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Redshift.Model.ReservedNodeAlreadyMigratedException : AmazonRedshiftException {
    public ReservedNodeAlreadyMigratedException(string message);
    public ReservedNodeAlreadyMigratedException(string message, Exception innerException);
    public ReservedNodeAlreadyMigratedException(Exception innerException);
    public ReservedNodeAlreadyMigratedException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public ReservedNodeAlreadyMigratedException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Redshift.Model.ReservedNodeConfigurationOption : object {
    private ReservedNode _sourceReservedNode;
    private Nullable`1<int> _targetReservedNodeCount;
    private ReservedNodeOffering _targetReservedNodeOffering;
    public ReservedNode SourceReservedNode { get; public set; }
    public Nullable`1<int> TargetReservedNodeCount { get; public set; }
    public ReservedNodeOffering TargetReservedNodeOffering { get; public set; }
    public ReservedNode get_SourceReservedNode();
    public void set_SourceReservedNode(ReservedNode value);
    internal bool IsSetSourceReservedNode();
    public Nullable`1<int> get_TargetReservedNodeCount();
    public void set_TargetReservedNodeCount(Nullable`1<int> value);
    internal bool IsSetTargetReservedNodeCount();
    public ReservedNodeOffering get_TargetReservedNodeOffering();
    public void set_TargetReservedNodeOffering(ReservedNodeOffering value);
    internal bool IsSetTargetReservedNodeOffering();
}
public class Amazon.Redshift.Model.ReservedNodeExchangeNotFoundException : AmazonRedshiftException {
    public ReservedNodeExchangeNotFoundException(string message);
    public ReservedNodeExchangeNotFoundException(string message, Exception innerException);
    public ReservedNodeExchangeNotFoundException(Exception innerException);
    public ReservedNodeExchangeNotFoundException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public ReservedNodeExchangeNotFoundException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Redshift.Model.ReservedNodeExchangeStatus : object {
    private Nullable`1<DateTime> _requestTime;
    private string _reservedNodeExchangeRequestId;
    private Nullable`1<int> _sourceReservedNodeCount;
    private string _sourceReservedNodeId;
    private string _sourceReservedNodeType;
    private ReservedNodeExchangeStatusType _status;
    private Nullable`1<int> _targetReservedNodeCount;
    private string _targetReservedNodeOfferingId;
    private string _targetReservedNodeType;
    public Nullable`1<DateTime> RequestTime { get; public set; }
    [AWSPropertyAttribute]
public string ReservedNodeExchangeRequestId { get; public set; }
    public Nullable`1<int> SourceReservedNodeCount { get; public set; }
    [AWSPropertyAttribute]
public string SourceReservedNodeId { get; public set; }
    [AWSPropertyAttribute]
public string SourceReservedNodeType { get; public set; }
    public ReservedNodeExchangeStatusType Status { get; public set; }
    public Nullable`1<int> TargetReservedNodeCount { get; public set; }
    [AWSPropertyAttribute]
public string TargetReservedNodeOfferingId { get; public set; }
    [AWSPropertyAttribute]
public string TargetReservedNodeType { get; public set; }
    public Nullable`1<DateTime> get_RequestTime();
    public void set_RequestTime(Nullable`1<DateTime> value);
    internal bool IsSetRequestTime();
    public string get_ReservedNodeExchangeRequestId();
    public void set_ReservedNodeExchangeRequestId(string value);
    internal bool IsSetReservedNodeExchangeRequestId();
    public Nullable`1<int> get_SourceReservedNodeCount();
    public void set_SourceReservedNodeCount(Nullable`1<int> value);
    internal bool IsSetSourceReservedNodeCount();
    public string get_SourceReservedNodeId();
    public void set_SourceReservedNodeId(string value);
    internal bool IsSetSourceReservedNodeId();
    public string get_SourceReservedNodeType();
    public void set_SourceReservedNodeType(string value);
    internal bool IsSetSourceReservedNodeType();
    public ReservedNodeExchangeStatusType get_Status();
    public void set_Status(ReservedNodeExchangeStatusType value);
    internal bool IsSetStatus();
    public Nullable`1<int> get_TargetReservedNodeCount();
    public void set_TargetReservedNodeCount(Nullable`1<int> value);
    internal bool IsSetTargetReservedNodeCount();
    public string get_TargetReservedNodeOfferingId();
    public void set_TargetReservedNodeOfferingId(string value);
    internal bool IsSetTargetReservedNodeOfferingId();
    public string get_TargetReservedNodeType();
    public void set_TargetReservedNodeType(string value);
    internal bool IsSetTargetReservedNodeType();
}
public class Amazon.Redshift.Model.ReservedNodeNotFoundException : AmazonRedshiftException {
    public ReservedNodeNotFoundException(string message);
    public ReservedNodeNotFoundException(string message, Exception innerException);
    public ReservedNodeNotFoundException(Exception innerException);
    public ReservedNodeNotFoundException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public ReservedNodeNotFoundException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Redshift.Model.ReservedNodeOffering : object {
    private string _currencyCode;
    private Nullable`1<int> _duration;
    private Nullable`1<double> _fixedPrice;
    private string _nodeType;
    private string _offeringType;
    private List`1<RecurringCharge> _recurringCharges;
    private string _reservedNodeOfferingId;
    private ReservedNodeOfferingType _reservedNodeOfferingType;
    private Nullable`1<double> _usagePrice;
    [AWSPropertyAttribute]
public string CurrencyCode { get; public set; }
    public Nullable`1<int> Duration { get; public set; }
    public Nullable`1<double> FixedPrice { get; public set; }
    [AWSPropertyAttribute]
public string NodeType { get; public set; }
    [AWSPropertyAttribute]
public string OfferingType { get; public set; }
    public List`1<RecurringCharge> RecurringCharges { get; public set; }
    [AWSPropertyAttribute]
public string ReservedNodeOfferingId { get; public set; }
    public ReservedNodeOfferingType ReservedNodeOfferingType { get; public set; }
    public Nullable`1<double> UsagePrice { get; public set; }
    public string get_CurrencyCode();
    public void set_CurrencyCode(string value);
    internal bool IsSetCurrencyCode();
    public Nullable`1<int> get_Duration();
    public void set_Duration(Nullable`1<int> value);
    internal bool IsSetDuration();
    public Nullable`1<double> get_FixedPrice();
    public void set_FixedPrice(Nullable`1<double> value);
    internal bool IsSetFixedPrice();
    public string get_NodeType();
    public void set_NodeType(string value);
    internal bool IsSetNodeType();
    public string get_OfferingType();
    public void set_OfferingType(string value);
    internal bool IsSetOfferingType();
    public List`1<RecurringCharge> get_RecurringCharges();
    public void set_RecurringCharges(List`1<RecurringCharge> value);
    internal bool IsSetRecurringCharges();
    public string get_ReservedNodeOfferingId();
    public void set_ReservedNodeOfferingId(string value);
    internal bool IsSetReservedNodeOfferingId();
    public ReservedNodeOfferingType get_ReservedNodeOfferingType();
    public void set_ReservedNodeOfferingType(ReservedNodeOfferingType value);
    internal bool IsSetReservedNodeOfferingType();
    public Nullable`1<double> get_UsagePrice();
    public void set_UsagePrice(Nullable`1<double> value);
    internal bool IsSetUsagePrice();
}
public class Amazon.Redshift.Model.ReservedNodeOfferingNotFoundException : AmazonRedshiftException {
    public ReservedNodeOfferingNotFoundException(string message);
    public ReservedNodeOfferingNotFoundException(string message, Exception innerException);
    public ReservedNodeOfferingNotFoundException(Exception innerException);
    public ReservedNodeOfferingNotFoundException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public ReservedNodeOfferingNotFoundException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Redshift.Model.ReservedNodeQuotaExceededException : AmazonRedshiftException {
    public ReservedNodeQuotaExceededException(string message);
    public ReservedNodeQuotaExceededException(string message, Exception innerException);
    public ReservedNodeQuotaExceededException(Exception innerException);
    public ReservedNodeQuotaExceededException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public ReservedNodeQuotaExceededException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Redshift.Model.ResetClusterParameterGroupRequest : AmazonRedshiftRequest {
    private string _parameterGroupName;
    private List`1<Parameter> _parameters;
    private Nullable`1<bool> _resetAllParameters;
    [AWSPropertyAttribute]
public string ParameterGroupName { get; public set; }
    public List`1<Parameter> Parameters { get; public set; }
    public Nullable`1<bool> ResetAllParameters { get; public set; }
    public string get_ParameterGroupName();
    public void set_ParameterGroupName(string value);
    internal bool IsSetParameterGroupName();
    public List`1<Parameter> get_Parameters();
    public void set_Parameters(List`1<Parameter> value);
    internal bool IsSetParameters();
    public Nullable`1<bool> get_ResetAllParameters();
    public void set_ResetAllParameters(Nullable`1<bool> value);
    internal bool IsSetResetAllParameters();
}
public class Amazon.Redshift.Model.ResetClusterParameterGroupResponse : AmazonWebServiceResponse {
    private string _parameterGroupName;
    private string _parameterGroupStatus;
    [AWSPropertyAttribute]
public string ParameterGroupName { get; public set; }
    [AWSPropertyAttribute]
public string ParameterGroupStatus { get; public set; }
    public string get_ParameterGroupName();
    public void set_ParameterGroupName(string value);
    internal bool IsSetParameterGroupName();
    public string get_ParameterGroupStatus();
    public void set_ParameterGroupStatus(string value);
    internal bool IsSetParameterGroupStatus();
}
public class Amazon.Redshift.Model.ResizeClusterMessage : object {
    private Nullable`1<bool> _classic;
    private string _clusterIdentifier;
    private string _clusterType;
    private string _nodeType;
    private Nullable`1<int> _numberOfNodes;
    private string _reservedNodeId;
    private string _targetReservedNodeOfferingId;
    public Nullable`1<bool> Classic { get; public set; }
    [AWSPropertyAttribute]
public string ClusterIdentifier { get; public set; }
    [AWSPropertyAttribute]
public string ClusterType { get; public set; }
    [AWSPropertyAttribute]
public string NodeType { get; public set; }
    public Nullable`1<int> NumberOfNodes { get; public set; }
    [AWSPropertyAttribute]
public string ReservedNodeId { get; public set; }
    [AWSPropertyAttribute]
public string TargetReservedNodeOfferingId { get; public set; }
    public Nullable`1<bool> get_Classic();
    public void set_Classic(Nullable`1<bool> value);
    internal bool IsSetClassic();
    public string get_ClusterIdentifier();
    public void set_ClusterIdentifier(string value);
    internal bool IsSetClusterIdentifier();
    public string get_ClusterType();
    public void set_ClusterType(string value);
    internal bool IsSetClusterType();
    public string get_NodeType();
    public void set_NodeType(string value);
    internal bool IsSetNodeType();
    public Nullable`1<int> get_NumberOfNodes();
    public void set_NumberOfNodes(Nullable`1<int> value);
    internal bool IsSetNumberOfNodes();
    public string get_ReservedNodeId();
    public void set_ReservedNodeId(string value);
    internal bool IsSetReservedNodeId();
    public string get_TargetReservedNodeOfferingId();
    public void set_TargetReservedNodeOfferingId(string value);
    internal bool IsSetTargetReservedNodeOfferingId();
}
public class Amazon.Redshift.Model.ResizeClusterRequest : AmazonRedshiftRequest {
    private Nullable`1<bool> _classic;
    private string _clusterIdentifier;
    private string _clusterType;
    private string _nodeType;
    private Nullable`1<int> _numberOfNodes;
    private string _reservedNodeId;
    private string _targetReservedNodeOfferingId;
    public Nullable`1<bool> Classic { get; public set; }
    [AWSPropertyAttribute]
public string ClusterIdentifier { get; public set; }
    [AWSPropertyAttribute]
public string ClusterType { get; public set; }
    [AWSPropertyAttribute]
public string NodeType { get; public set; }
    public Nullable`1<int> NumberOfNodes { get; public set; }
    [AWSPropertyAttribute]
public string ReservedNodeId { get; public set; }
    [AWSPropertyAttribute]
public string TargetReservedNodeOfferingId { get; public set; }
    public Nullable`1<bool> get_Classic();
    public void set_Classic(Nullable`1<bool> value);
    internal bool IsSetClassic();
    public string get_ClusterIdentifier();
    public void set_ClusterIdentifier(string value);
    internal bool IsSetClusterIdentifier();
    public string get_ClusterType();
    public void set_ClusterType(string value);
    internal bool IsSetClusterType();
    public string get_NodeType();
    public void set_NodeType(string value);
    internal bool IsSetNodeType();
    public Nullable`1<int> get_NumberOfNodes();
    public void set_NumberOfNodes(Nullable`1<int> value);
    internal bool IsSetNumberOfNodes();
    public string get_ReservedNodeId();
    public void set_ReservedNodeId(string value);
    internal bool IsSetReservedNodeId();
    public string get_TargetReservedNodeOfferingId();
    public void set_TargetReservedNodeOfferingId(string value);
    internal bool IsSetTargetReservedNodeOfferingId();
}
public class Amazon.Redshift.Model.ResizeClusterResponse : AmazonWebServiceResponse {
    private Cluster _cluster;
    public Cluster Cluster { get; public set; }
    public Cluster get_Cluster();
    public void set_Cluster(Cluster value);
    internal bool IsSetCluster();
}
public class Amazon.Redshift.Model.ResizeInfo : object {
    private Nullable`1<bool> _allowCancelResize;
    private string _resizeType;
    public Nullable`1<bool> AllowCancelResize { get; public set; }
    [AWSPropertyAttribute]
public string ResizeType { get; public set; }
    public Nullable`1<bool> get_AllowCancelResize();
    public void set_AllowCancelResize(Nullable`1<bool> value);
    internal bool IsSetAllowCancelResize();
    public string get_ResizeType();
    public void set_ResizeType(string value);
    internal bool IsSetResizeType();
}
public class Amazon.Redshift.Model.ResizeNotFoundException : AmazonRedshiftException {
    public ResizeNotFoundException(string message);
    public ResizeNotFoundException(string message, Exception innerException);
    public ResizeNotFoundException(Exception innerException);
    public ResizeNotFoundException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public ResizeNotFoundException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Redshift.Model.ResourceNotFoundException : AmazonRedshiftException {
    public ResourceNotFoundException(string message);
    public ResourceNotFoundException(string message, Exception innerException);
    public ResourceNotFoundException(Exception innerException);
    public ResourceNotFoundException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public ResourceNotFoundException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Redshift.Model.ResourcePolicy : object {
    private string _policy;
    private string _resourceArn;
    [AWSPropertyAttribute]
public string Policy { get; public set; }
    [AWSPropertyAttribute]
public string ResourceArn { get; public set; }
    public string get_Policy();
    public void set_Policy(string value);
    internal bool IsSetPolicy();
    public string get_ResourceArn();
    public void set_ResourceArn(string value);
    internal bool IsSetResourceArn();
}
public class Amazon.Redshift.Model.RestoreFromClusterSnapshotRequest : AmazonRedshiftRequest {
    private string _additionalInfo;
    private Nullable`1<bool> _allowVersionUpgrade;
    private AquaConfigurationStatus _aquaConfigurationStatus;
    private Nullable`1<int> _automatedSnapshotRetentionPeriod;
    private string _availabilityZone;
    private Nullable`1<bool> _availabilityZoneRelocation;
    private string _clusterIdentifier;
    private string _clusterParameterGroupName;
    private List`1<string> _clusterSecurityGroups;
    private string _clusterSubnetGroupName;
    private string _defaultIamRoleArn;
    private string _elasticIp;
    private Nullable`1<bool> _encrypted;
    private Nullable`1<bool> _enhancedVpcRouting;
    private string _hsmClientCertificateIdentifier;
    private string _hsmConfigurationIdentifier;
    private List`1<string> _iamRoles;
    private string _ipAddressType;
    private string _kmsKeyId;
    private string _maintenanceTrackName;
    private Nullable`1<bool> _manageMasterPassword;
    private Nullable`1<int> _manualSnapshotRetentionPeriod;
    private string _masterPasswordSecretKmsKeyId;
    private Nullable`1<bool> _multiAZ;
    private string _nodeType;
    private Nullable`1<int> _numberOfNodes;
    private string _ownerAccount;
    private Nullable`1<int> _port;
    private string _preferredMaintenanceWindow;
    private Nullable`1<bool> _publiclyAccessible;
    private string _reservedNodeId;
    private string _snapshotArn;
    private string _snapshotClusterIdentifier;
    private string _snapshotIdentifier;
    private string _snapshotScheduleIdentifier;
    private string _targetReservedNodeOfferingId;
    private List`1<string> _vpcSecurityGroupIds;
    [AWSPropertyAttribute]
public string AdditionalInfo { get; public set; }
    public Nullable`1<bool> AllowVersionUpgrade { get; public set; }
    public AquaConfigurationStatus AquaConfigurationStatus { get; public set; }
    public Nullable`1<int> AutomatedSnapshotRetentionPeriod { get; public set; }
    [AWSPropertyAttribute]
public string AvailabilityZone { get; public set; }
    public Nullable`1<bool> AvailabilityZoneRelocation { get; public set; }
    [AWSPropertyAttribute]
public string ClusterIdentifier { get; public set; }
    [AWSPropertyAttribute]
public string ClusterParameterGroupName { get; public set; }
    public List`1<string> ClusterSecurityGroups { get; public set; }
    [AWSPropertyAttribute]
public string ClusterSubnetGroupName { get; public set; }
    [AWSPropertyAttribute]
public string DefaultIamRoleArn { get; public set; }
    [AWSPropertyAttribute]
public string ElasticIp { get; public set; }
    public Nullable`1<bool> Encrypted { get; public set; }
    public Nullable`1<bool> EnhancedVpcRouting { get; public set; }
    [AWSPropertyAttribute]
public string HsmClientCertificateIdentifier { get; public set; }
    [AWSPropertyAttribute]
public string HsmConfigurationIdentifier { get; public set; }
    public List`1<string> IamRoles { get; public set; }
    [AWSPropertyAttribute]
public string IpAddressType { get; public set; }
    [AWSPropertyAttribute]
public string KmsKeyId { get; public set; }
    [AWSPropertyAttribute]
public string MaintenanceTrackName { get; public set; }
    public Nullable`1<bool> ManageMasterPassword { get; public set; }
    public Nullable`1<int> ManualSnapshotRetentionPeriod { get; public set; }
    [AWSPropertyAttribute]
public string MasterPasswordSecretKmsKeyId { get; public set; }
    public Nullable`1<bool> MultiAZ { get; public set; }
    [AWSPropertyAttribute]
public string NodeType { get; public set; }
    public Nullable`1<int> NumberOfNodes { get; public set; }
    [AWSPropertyAttribute]
public string OwnerAccount { get; public set; }
    public Nullable`1<int> Port { get; public set; }
    [AWSPropertyAttribute]
public string PreferredMaintenanceWindow { get; public set; }
    public Nullable`1<bool> PubliclyAccessible { get; public set; }
    [AWSPropertyAttribute]
public string ReservedNodeId { get; public set; }
    [AWSPropertyAttribute]
public string SnapshotArn { get; public set; }
    [AWSPropertyAttribute]
public string SnapshotClusterIdentifier { get; public set; }
    [AWSPropertyAttribute]
public string SnapshotIdentifier { get; public set; }
    [AWSPropertyAttribute]
public string SnapshotScheduleIdentifier { get; public set; }
    [AWSPropertyAttribute]
public string TargetReservedNodeOfferingId { get; public set; }
    public List`1<string> VpcSecurityGroupIds { get; public set; }
    public string get_AdditionalInfo();
    public void set_AdditionalInfo(string value);
    internal bool IsSetAdditionalInfo();
    public Nullable`1<bool> get_AllowVersionUpgrade();
    public void set_AllowVersionUpgrade(Nullable`1<bool> value);
    internal bool IsSetAllowVersionUpgrade();
    public AquaConfigurationStatus get_AquaConfigurationStatus();
    public void set_AquaConfigurationStatus(AquaConfigurationStatus value);
    internal bool IsSetAquaConfigurationStatus();
    public Nullable`1<int> get_AutomatedSnapshotRetentionPeriod();
    public void set_AutomatedSnapshotRetentionPeriod(Nullable`1<int> value);
    internal bool IsSetAutomatedSnapshotRetentionPeriod();
    public string get_AvailabilityZone();
    public void set_AvailabilityZone(string value);
    internal bool IsSetAvailabilityZone();
    public Nullable`1<bool> get_AvailabilityZoneRelocation();
    public void set_AvailabilityZoneRelocation(Nullable`1<bool> value);
    internal bool IsSetAvailabilityZoneRelocation();
    public string get_ClusterIdentifier();
    public void set_ClusterIdentifier(string value);
    internal bool IsSetClusterIdentifier();
    public string get_ClusterParameterGroupName();
    public void set_ClusterParameterGroupName(string value);
    internal bool IsSetClusterParameterGroupName();
    public List`1<string> get_ClusterSecurityGroups();
    public void set_ClusterSecurityGroups(List`1<string> value);
    internal bool IsSetClusterSecurityGroups();
    public string get_ClusterSubnetGroupName();
    public void set_ClusterSubnetGroupName(string value);
    internal bool IsSetClusterSubnetGroupName();
    public string get_DefaultIamRoleArn();
    public void set_DefaultIamRoleArn(string value);
    internal bool IsSetDefaultIamRoleArn();
    public string get_ElasticIp();
    public void set_ElasticIp(string value);
    internal bool IsSetElasticIp();
    public Nullable`1<bool> get_Encrypted();
    public void set_Encrypted(Nullable`1<bool> value);
    internal bool IsSetEncrypted();
    public Nullable`1<bool> get_EnhancedVpcRouting();
    public void set_EnhancedVpcRouting(Nullable`1<bool> value);
    internal bool IsSetEnhancedVpcRouting();
    public string get_HsmClientCertificateIdentifier();
    public void set_HsmClientCertificateIdentifier(string value);
    internal bool IsSetHsmClientCertificateIdentifier();
    public string get_HsmConfigurationIdentifier();
    public void set_HsmConfigurationIdentifier(string value);
    internal bool IsSetHsmConfigurationIdentifier();
    public List`1<string> get_IamRoles();
    public void set_IamRoles(List`1<string> value);
    internal bool IsSetIamRoles();
    public string get_IpAddressType();
    public void set_IpAddressType(string value);
    internal bool IsSetIpAddressType();
    public string get_KmsKeyId();
    public void set_KmsKeyId(string value);
    internal bool IsSetKmsKeyId();
    public string get_MaintenanceTrackName();
    public void set_MaintenanceTrackName(string value);
    internal bool IsSetMaintenanceTrackName();
    public Nullable`1<bool> get_ManageMasterPassword();
    public void set_ManageMasterPassword(Nullable`1<bool> value);
    internal bool IsSetManageMasterPassword();
    public Nullable`1<int> get_ManualSnapshotRetentionPeriod();
    public void set_ManualSnapshotRetentionPeriod(Nullable`1<int> value);
    internal bool IsSetManualSnapshotRetentionPeriod();
    public string get_MasterPasswordSecretKmsKeyId();
    public void set_MasterPasswordSecretKmsKeyId(string value);
    internal bool IsSetMasterPasswordSecretKmsKeyId();
    public Nullable`1<bool> get_MultiAZ();
    public void set_MultiAZ(Nullable`1<bool> value);
    internal bool IsSetMultiAZ();
    public string get_NodeType();
    public void set_NodeType(string value);
    internal bool IsSetNodeType();
    public Nullable`1<int> get_NumberOfNodes();
    public void set_NumberOfNodes(Nullable`1<int> value);
    internal bool IsSetNumberOfNodes();
    public string get_OwnerAccount();
    public void set_OwnerAccount(string value);
    internal bool IsSetOwnerAccount();
    public Nullable`1<int> get_Port();
    public void set_Port(Nullable`1<int> value);
    internal bool IsSetPort();
    public string get_PreferredMaintenanceWindow();
    public void set_PreferredMaintenanceWindow(string value);
    internal bool IsSetPreferredMaintenanceWindow();
    public Nullable`1<bool> get_PubliclyAccessible();
    public void set_PubliclyAccessible(Nullable`1<bool> value);
    internal bool IsSetPubliclyAccessible();
    public string get_ReservedNodeId();
    public void set_ReservedNodeId(string value);
    internal bool IsSetReservedNodeId();
    public string get_SnapshotArn();
    public void set_SnapshotArn(string value);
    internal bool IsSetSnapshotArn();
    public string get_SnapshotClusterIdentifier();
    public void set_SnapshotClusterIdentifier(string value);
    internal bool IsSetSnapshotClusterIdentifier();
    public string get_SnapshotIdentifier();
    public void set_SnapshotIdentifier(string value);
    internal bool IsSetSnapshotIdentifier();
    public string get_SnapshotScheduleIdentifier();
    public void set_SnapshotScheduleIdentifier(string value);
    internal bool IsSetSnapshotScheduleIdentifier();
    public string get_TargetReservedNodeOfferingId();
    public void set_TargetReservedNodeOfferingId(string value);
    internal bool IsSetTargetReservedNodeOfferingId();
    public List`1<string> get_VpcSecurityGroupIds();
    public void set_VpcSecurityGroupIds(List`1<string> value);
    internal bool IsSetVpcSecurityGroupIds();
}
public class Amazon.Redshift.Model.RestoreFromClusterSnapshotResponse : AmazonWebServiceResponse {
    private Cluster _cluster;
    public Cluster Cluster { get; public set; }
    public Cluster get_Cluster();
    public void set_Cluster(Cluster value);
    internal bool IsSetCluster();
}
public class Amazon.Redshift.Model.RestoreStatus : object {
    private Nullable`1<double> _currentRestoreRateInMegaBytesPerSecond;
    private Nullable`1<long> _elapsedTimeInSeconds;
    private Nullable`1<long> _estimatedTimeToCompletionInSeconds;
    private Nullable`1<long> _progressInMegaBytes;
    private Nullable`1<long> _snapshotSizeInMegaBytes;
    private string _status;
    public Nullable`1<double> CurrentRestoreRateInMegaBytesPerSecond { get; public set; }
    public Nullable`1<long> ElapsedTimeInSeconds { get; public set; }
    public Nullable`1<long> EstimatedTimeToCompletionInSeconds { get; public set; }
    public Nullable`1<long> ProgressInMegaBytes { get; public set; }
    public Nullable`1<long> SnapshotSizeInMegaBytes { get; public set; }
    [AWSPropertyAttribute]
public string Status { get; public set; }
    public Nullable`1<double> get_CurrentRestoreRateInMegaBytesPerSecond();
    public void set_CurrentRestoreRateInMegaBytesPerSecond(Nullable`1<double> value);
    internal bool IsSetCurrentRestoreRateInMegaBytesPerSecond();
    public Nullable`1<long> get_ElapsedTimeInSeconds();
    public void set_ElapsedTimeInSeconds(Nullable`1<long> value);
    internal bool IsSetElapsedTimeInSeconds();
    public Nullable`1<long> get_EstimatedTimeToCompletionInSeconds();
    public void set_EstimatedTimeToCompletionInSeconds(Nullable`1<long> value);
    internal bool IsSetEstimatedTimeToCompletionInSeconds();
    public Nullable`1<long> get_ProgressInMegaBytes();
    public void set_ProgressInMegaBytes(Nullable`1<long> value);
    internal bool IsSetProgressInMegaBytes();
    public Nullable`1<long> get_SnapshotSizeInMegaBytes();
    public void set_SnapshotSizeInMegaBytes(Nullable`1<long> value);
    internal bool IsSetSnapshotSizeInMegaBytes();
    public string get_Status();
    public void set_Status(string value);
    internal bool IsSetStatus();
}
public class Amazon.Redshift.Model.RestoreTableFromClusterSnapshotRequest : AmazonRedshiftRequest {
    private string _clusterIdentifier;
    private Nullable`1<bool> _enableCaseSensitiveIdentifier;
    private string _newTableName;
    private string _snapshotIdentifier;
    private string _sourceDatabaseName;
    private string _sourceSchemaName;
    private string _sourceTableName;
    private string _targetDatabaseName;
    private string _targetSchemaName;
    [AWSPropertyAttribute]
public string ClusterIdentifier { get; public set; }
    public Nullable`1<bool> EnableCaseSensitiveIdentifier { get; public set; }
    [AWSPropertyAttribute]
public string NewTableName { get; public set; }
    [AWSPropertyAttribute]
public string SnapshotIdentifier { get; public set; }
    [AWSPropertyAttribute]
public string SourceDatabaseName { get; public set; }
    [AWSPropertyAttribute]
public string SourceSchemaName { get; public set; }
    [AWSPropertyAttribute]
public string SourceTableName { get; public set; }
    [AWSPropertyAttribute]
public string TargetDatabaseName { get; public set; }
    [AWSPropertyAttribute]
public string TargetSchemaName { get; public set; }
    public string get_ClusterIdentifier();
    public void set_ClusterIdentifier(string value);
    internal bool IsSetClusterIdentifier();
    public Nullable`1<bool> get_EnableCaseSensitiveIdentifier();
    public void set_EnableCaseSensitiveIdentifier(Nullable`1<bool> value);
    internal bool IsSetEnableCaseSensitiveIdentifier();
    public string get_NewTableName();
    public void set_NewTableName(string value);
    internal bool IsSetNewTableName();
    public string get_SnapshotIdentifier();
    public void set_SnapshotIdentifier(string value);
    internal bool IsSetSnapshotIdentifier();
    public string get_SourceDatabaseName();
    public void set_SourceDatabaseName(string value);
    internal bool IsSetSourceDatabaseName();
    public string get_SourceSchemaName();
    public void set_SourceSchemaName(string value);
    internal bool IsSetSourceSchemaName();
    public string get_SourceTableName();
    public void set_SourceTableName(string value);
    internal bool IsSetSourceTableName();
    public string get_TargetDatabaseName();
    public void set_TargetDatabaseName(string value);
    internal bool IsSetTargetDatabaseName();
    public string get_TargetSchemaName();
    public void set_TargetSchemaName(string value);
    internal bool IsSetTargetSchemaName();
}
public class Amazon.Redshift.Model.RestoreTableFromClusterSnapshotResponse : AmazonWebServiceResponse {
    private TableRestoreStatus _tableRestoreStatus;
    public TableRestoreStatus TableRestoreStatus { get; public set; }
    public TableRestoreStatus get_TableRestoreStatus();
    public void set_TableRestoreStatus(TableRestoreStatus value);
    internal bool IsSetTableRestoreStatus();
}
public class Amazon.Redshift.Model.ResumeClusterMessage : object {
    private string _clusterIdentifier;
    [AWSPropertyAttribute]
public string ClusterIdentifier { get; public set; }
    public string get_ClusterIdentifier();
    public void set_ClusterIdentifier(string value);
    internal bool IsSetClusterIdentifier();
}
public class Amazon.Redshift.Model.ResumeClusterRequest : AmazonRedshiftRequest {
    private string _clusterIdentifier;
    [AWSPropertyAttribute]
public string ClusterIdentifier { get; public set; }
    public string get_ClusterIdentifier();
    public void set_ClusterIdentifier(string value);
    internal bool IsSetClusterIdentifier();
}
public class Amazon.Redshift.Model.ResumeClusterResponse : AmazonWebServiceResponse {
    private Cluster _cluster;
    public Cluster Cluster { get; public set; }
    public Cluster get_Cluster();
    public void set_Cluster(Cluster value);
    internal bool IsSetCluster();
}
public class Amazon.Redshift.Model.RevisionTarget : object {
    private string _databaseRevision;
    private Nullable`1<DateTime> _databaseRevisionReleaseDate;
    private string _description;
    [AWSPropertyAttribute]
public string DatabaseRevision { get; public set; }
    public Nullable`1<DateTime> DatabaseRevisionReleaseDate { get; public set; }
    [AWSPropertyAttribute]
public string Description { get; public set; }
    public string get_DatabaseRevision();
    public void set_DatabaseRevision(string value);
    internal bool IsSetDatabaseRevision();
    public Nullable`1<DateTime> get_DatabaseRevisionReleaseDate();
    public void set_DatabaseRevisionReleaseDate(Nullable`1<DateTime> value);
    internal bool IsSetDatabaseRevisionReleaseDate();
    public string get_Description();
    public void set_Description(string value);
    internal bool IsSetDescription();
}
public class Amazon.Redshift.Model.RevokeClusterSecurityGroupIngressRequest : AmazonRedshiftRequest {
    private string _cidrip;
    private string _clusterSecurityGroupName;
    private string _ec2SecurityGroupName;
    private string _ec2SecurityGroupOwnerId;
    [AWSPropertyAttribute]
public string CIDRIP { get; public set; }
    [AWSPropertyAttribute]
public string ClusterSecurityGroupName { get; public set; }
    [AWSPropertyAttribute]
public string EC2SecurityGroupName { get; public set; }
    [AWSPropertyAttribute]
public string EC2SecurityGroupOwnerId { get; public set; }
    public string get_CIDRIP();
    public void set_CIDRIP(string value);
    internal bool IsSetCIDRIP();
    public string get_ClusterSecurityGroupName();
    public void set_ClusterSecurityGroupName(string value);
    internal bool IsSetClusterSecurityGroupName();
    public string get_EC2SecurityGroupName();
    public void set_EC2SecurityGroupName(string value);
    internal bool IsSetEC2SecurityGroupName();
    public string get_EC2SecurityGroupOwnerId();
    public void set_EC2SecurityGroupOwnerId(string value);
    internal bool IsSetEC2SecurityGroupOwnerId();
}
public class Amazon.Redshift.Model.RevokeClusterSecurityGroupIngressResponse : AmazonWebServiceResponse {
    private ClusterSecurityGroup _clusterSecurityGroup;
    public ClusterSecurityGroup ClusterSecurityGroup { get; public set; }
    public ClusterSecurityGroup get_ClusterSecurityGroup();
    public void set_ClusterSecurityGroup(ClusterSecurityGroup value);
    internal bool IsSetClusterSecurityGroup();
}
public class Amazon.Redshift.Model.RevokeEndpointAccessRequest : AmazonRedshiftRequest {
    private string _account;
    private string _clusterIdentifier;
    private Nullable`1<bool> _force;
    private List`1<string> _vpcIds;
    [AWSPropertyAttribute]
public string Account { get; public set; }
    [AWSPropertyAttribute]
public string ClusterIdentifier { get; public set; }
    public Nullable`1<bool> Force { get; public set; }
    public List`1<string> VpcIds { get; public set; }
    public string get_Account();
    public void set_Account(string value);
    internal bool IsSetAccount();
    public string get_ClusterIdentifier();
    public void set_ClusterIdentifier(string value);
    internal bool IsSetClusterIdentifier();
    public Nullable`1<bool> get_Force();
    public void set_Force(Nullable`1<bool> value);
    internal bool IsSetForce();
    public List`1<string> get_VpcIds();
    public void set_VpcIds(List`1<string> value);
    internal bool IsSetVpcIds();
}
public class Amazon.Redshift.Model.RevokeEndpointAccessResponse : AmazonWebServiceResponse {
    private Nullable`1<bool> _allowedAllVPCs;
    private List`1<string> _allowedVPCs;
    private Nullable`1<DateTime> _authorizeTime;
    private string _clusterIdentifier;
    private string _clusterStatus;
    private Nullable`1<int> _endpointCount;
    private string _grantee;
    private string _grantor;
    private AuthorizationStatus _status;
    public Nullable`1<bool> AllowedAllVPCs { get; public set; }
    public List`1<string> AllowedVPCs { get; public set; }
    public Nullable`1<DateTime> AuthorizeTime { get; public set; }
    [AWSPropertyAttribute]
public string ClusterIdentifier { get; public set; }
    [AWSPropertyAttribute]
public string ClusterStatus { get; public set; }
    public Nullable`1<int> EndpointCount { get; public set; }
    [AWSPropertyAttribute]
public string Grantee { get; public set; }
    [AWSPropertyAttribute]
public string Grantor { get; public set; }
    public AuthorizationStatus Status { get; public set; }
    public Nullable`1<bool> get_AllowedAllVPCs();
    public void set_AllowedAllVPCs(Nullable`1<bool> value);
    internal bool IsSetAllowedAllVPCs();
    public List`1<string> get_AllowedVPCs();
    public void set_AllowedVPCs(List`1<string> value);
    internal bool IsSetAllowedVPCs();
    public Nullable`1<DateTime> get_AuthorizeTime();
    public void set_AuthorizeTime(Nullable`1<DateTime> value);
    internal bool IsSetAuthorizeTime();
    public string get_ClusterIdentifier();
    public void set_ClusterIdentifier(string value);
    internal bool IsSetClusterIdentifier();
    public string get_ClusterStatus();
    public void set_ClusterStatus(string value);
    internal bool IsSetClusterStatus();
    public Nullable`1<int> get_EndpointCount();
    public void set_EndpointCount(Nullable`1<int> value);
    internal bool IsSetEndpointCount();
    public string get_Grantee();
    public void set_Grantee(string value);
    internal bool IsSetGrantee();
    public string get_Grantor();
    public void set_Grantor(string value);
    internal bool IsSetGrantor();
    public AuthorizationStatus get_Status();
    public void set_Status(AuthorizationStatus value);
    internal bool IsSetStatus();
}
public class Amazon.Redshift.Model.RevokeSnapshotAccessRequest : AmazonRedshiftRequest {
    private string _accountWithRestoreAccess;
    private string _snapshotArn;
    private string _snapshotClusterIdentifier;
    private string _snapshotIdentifier;
    [AWSPropertyAttribute]
public string AccountWithRestoreAccess { get; public set; }
    [AWSPropertyAttribute]
public string SnapshotArn { get; public set; }
    [AWSPropertyAttribute]
public string SnapshotClusterIdentifier { get; public set; }
    [AWSPropertyAttribute]
public string SnapshotIdentifier { get; public set; }
    public string get_AccountWithRestoreAccess();
    public void set_AccountWithRestoreAccess(string value);
    internal bool IsSetAccountWithRestoreAccess();
    public string get_SnapshotArn();
    public void set_SnapshotArn(string value);
    internal bool IsSetSnapshotArn();
    public string get_SnapshotClusterIdentifier();
    public void set_SnapshotClusterIdentifier(string value);
    internal bool IsSetSnapshotClusterIdentifier();
    public string get_SnapshotIdentifier();
    public void set_SnapshotIdentifier(string value);
    internal bool IsSetSnapshotIdentifier();
}
public class Amazon.Redshift.Model.RevokeSnapshotAccessResponse : AmazonWebServiceResponse {
    private Snapshot _snapshot;
    public Snapshot Snapshot { get; public set; }
    public Snapshot get_Snapshot();
    public void set_Snapshot(Snapshot value);
    internal bool IsSetSnapshot();
}
public class Amazon.Redshift.Model.RotateEncryptionKeyRequest : AmazonRedshiftRequest {
    private string _clusterIdentifier;
    [AWSPropertyAttribute]
public string ClusterIdentifier { get; public set; }
    public string get_ClusterIdentifier();
    public void set_ClusterIdentifier(string value);
    internal bool IsSetClusterIdentifier();
}
public class Amazon.Redshift.Model.RotateEncryptionKeyResponse : AmazonWebServiceResponse {
    private Cluster _cluster;
    public Cluster Cluster { get; public set; }
    public Cluster get_Cluster();
    public void set_Cluster(Cluster value);
    internal bool IsSetCluster();
}
public class Amazon.Redshift.Model.ScheduledAction : object {
    private Nullable`1<DateTime> _endTime;
    private string _iamRole;
    private List`1<DateTime> _nextInvocations;
    private string _schedule;
    private string _scheduledActionDescription;
    private string _scheduledActionName;
    private Nullable`1<DateTime> _startTime;
    private ScheduledActionState _state;
    private ScheduledActionType _targetAction;
    public Nullable`1<DateTime> EndTime { get; public set; }
    [AWSPropertyAttribute]
public string IamRole { get; public set; }
    public List`1<DateTime> NextInvocations { get; public set; }
    [AWSPropertyAttribute]
public string Schedule { get; public set; }
    [AWSPropertyAttribute]
public string ScheduledActionDescription { get; public set; }
    [AWSPropertyAttribute]
public string ScheduledActionName { get; public set; }
    public Nullable`1<DateTime> StartTime { get; public set; }
    public ScheduledActionState State { get; public set; }
    public ScheduledActionType TargetAction { get; public set; }
    public Nullable`1<DateTime> get_EndTime();
    public void set_EndTime(Nullable`1<DateTime> value);
    internal bool IsSetEndTime();
    public string get_IamRole();
    public void set_IamRole(string value);
    internal bool IsSetIamRole();
    public List`1<DateTime> get_NextInvocations();
    public void set_NextInvocations(List`1<DateTime> value);
    internal bool IsSetNextInvocations();
    public string get_Schedule();
    public void set_Schedule(string value);
    internal bool IsSetSchedule();
    public string get_ScheduledActionDescription();
    public void set_ScheduledActionDescription(string value);
    internal bool IsSetScheduledActionDescription();
    public string get_ScheduledActionName();
    public void set_ScheduledActionName(string value);
    internal bool IsSetScheduledActionName();
    public Nullable`1<DateTime> get_StartTime();
    public void set_StartTime(Nullable`1<DateTime> value);
    internal bool IsSetStartTime();
    public ScheduledActionState get_State();
    public void set_State(ScheduledActionState value);
    internal bool IsSetState();
    public ScheduledActionType get_TargetAction();
    public void set_TargetAction(ScheduledActionType value);
    internal bool IsSetTargetAction();
}
public class Amazon.Redshift.Model.ScheduledActionAlreadyExistsException : AmazonRedshiftException {
    public ScheduledActionAlreadyExistsException(string message);
    public ScheduledActionAlreadyExistsException(string message, Exception innerException);
    public ScheduledActionAlreadyExistsException(Exception innerException);
    public ScheduledActionAlreadyExistsException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public ScheduledActionAlreadyExistsException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Redshift.Model.ScheduledActionFilter : object {
    private ScheduledActionFilterName _name;
    private List`1<string> _values;
    [AWSPropertyAttribute]
public ScheduledActionFilterName Name { get; public set; }
    [AWSPropertyAttribute]
public List`1<string> Values { get; public set; }
    public ScheduledActionFilterName get_Name();
    public void set_Name(ScheduledActionFilterName value);
    internal bool IsSetName();
    public List`1<string> get_Values();
    public void set_Values(List`1<string> value);
    internal bool IsSetValues();
}
public class Amazon.Redshift.Model.ScheduledActionNotFoundException : AmazonRedshiftException {
    public ScheduledActionNotFoundException(string message);
    public ScheduledActionNotFoundException(string message, Exception innerException);
    public ScheduledActionNotFoundException(Exception innerException);
    public ScheduledActionNotFoundException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public ScheduledActionNotFoundException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Redshift.Model.ScheduledActionQuotaExceededException : AmazonRedshiftException {
    public ScheduledActionQuotaExceededException(string message);
    public ScheduledActionQuotaExceededException(string message, Exception innerException);
    public ScheduledActionQuotaExceededException(Exception innerException);
    public ScheduledActionQuotaExceededException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public ScheduledActionQuotaExceededException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Redshift.Model.ScheduledActionType : object {
    private PauseClusterMessage _pauseCluster;
    private ResizeClusterMessage _resizeCluster;
    private ResumeClusterMessage _resumeCluster;
    public PauseClusterMessage PauseCluster { get; public set; }
    public ResizeClusterMessage ResizeCluster { get; public set; }
    public ResumeClusterMessage ResumeCluster { get; public set; }
    public PauseClusterMessage get_PauseCluster();
    public void set_PauseCluster(PauseClusterMessage value);
    internal bool IsSetPauseCluster();
    public ResizeClusterMessage get_ResizeCluster();
    public void set_ResizeCluster(ResizeClusterMessage value);
    internal bool IsSetResizeCluster();
    public ResumeClusterMessage get_ResumeCluster();
    public void set_ResumeCluster(ResumeClusterMessage value);
    internal bool IsSetResumeCluster();
}
public class Amazon.Redshift.Model.ScheduledActionTypeUnsupportedException : AmazonRedshiftException {
    public ScheduledActionTypeUnsupportedException(string message);
    public ScheduledActionTypeUnsupportedException(string message, Exception innerException);
    public ScheduledActionTypeUnsupportedException(Exception innerException);
    public ScheduledActionTypeUnsupportedException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public ScheduledActionTypeUnsupportedException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Redshift.Model.ScheduleDefinitionTypeUnsupportedException : AmazonRedshiftException {
    public ScheduleDefinitionTypeUnsupportedException(string message);
    public ScheduleDefinitionTypeUnsupportedException(string message, Exception innerException);
    public ScheduleDefinitionTypeUnsupportedException(Exception innerException);
    public ScheduleDefinitionTypeUnsupportedException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public ScheduleDefinitionTypeUnsupportedException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Redshift.Model.SecondaryClusterInfo : object {
    private string _availabilityZone;
    private List`1<ClusterNode> _clusterNodes;
    [AWSPropertyAttribute]
public string AvailabilityZone { get; public set; }
    public List`1<ClusterNode> ClusterNodes { get; public set; }
    public string get_AvailabilityZone();
    public void set_AvailabilityZone(string value);
    internal bool IsSetAvailabilityZone();
    public List`1<ClusterNode> get_ClusterNodes();
    public void set_ClusterNodes(List`1<ClusterNode> value);
    internal bool IsSetClusterNodes();
}
public class Amazon.Redshift.Model.ServiceIntegrationsUnion : object {
    private List`1<LakeFormationScopeUnion> _lakeFormation;
    public List`1<LakeFormationScopeUnion> LakeFormation { get; public set; }
    public List`1<LakeFormationScopeUnion> get_LakeFormation();
    public void set_LakeFormation(List`1<LakeFormationScopeUnion> value);
    internal bool IsSetLakeFormation();
}
public class Amazon.Redshift.Model.Snapshot : object {
    private List`1<AccountWithRestoreAccess> _accountsWithRestoreAccess;
    private Nullable`1<double> _actualIncrementalBackupSizeInMegaBytes;
    private string _availabilityZone;
    private Nullable`1<double> _backupProgressInMegaBytes;
    private Nullable`1<DateTime> _clusterCreateTime;
    private string _clusterIdentifier;
    private string _clusterVersion;
    private Nullable`1<double> _currentBackupRateInMegaBytesPerSecond;
    private string _dbName;
    private Nullable`1<long> _elapsedTimeInSeconds;
    private Nullable`1<bool> _encrypted;
    private Nullable`1<bool> _encryptedWithHSM;
    private string _engineFullVersion;
    private Nullable`1<bool> _enhancedVpcRouting;
    private Nullable`1<long> _estimatedSecondsToCompletion;
    private string _kmsKeyId;
    private string _maintenanceTrackName;
    private Nullable`1<int> _manualSnapshotRemainingDays;
    private Nullable`1<int> _manualSnapshotRetentionPeriod;
    private string _masterPasswordSecretArn;
    private string _masterPasswordSecretKmsKeyId;
    private string _masterUsername;
    private string _nodeType;
    private Nullable`1<int> _numberOfNodes;
    private string _ownerAccount;
    private Nullable`1<int> _port;
    private List`1<string> _restorableNodeTypes;
    private string _snapshotArn;
    private Nullable`1<DateTime> _snapshotCreateTime;
    private string _snapshotIdentifier;
    private Nullable`1<DateTime> _snapshotRetentionStartTime;
    private string _snapshotType;
    private string _sourceRegion;
    private string _status;
    private List`1<Tag> _tags;
    private Nullable`1<double> _totalBackupSizeInMegaBytes;
    private string _vpcId;
    public List`1<AccountWithRestoreAccess> AccountsWithRestoreAccess { get; public set; }
    public Nullable`1<double> ActualIncrementalBackupSizeInMegaBytes { get; public set; }
    [AWSPropertyAttribute]
public string AvailabilityZone { get; public set; }
    public Nullable`1<double> BackupProgressInMegaBytes { get; public set; }
    public Nullable`1<DateTime> ClusterCreateTime { get; public set; }
    [AWSPropertyAttribute]
public string ClusterIdentifier { get; public set; }
    [AWSPropertyAttribute]
public string ClusterVersion { get; public set; }
    public Nullable`1<double> CurrentBackupRateInMegaBytesPerSecond { get; public set; }
    [AWSPropertyAttribute]
public string DBName { get; public set; }
    public Nullable`1<long> ElapsedTimeInSeconds { get; public set; }
    public Nullable`1<bool> Encrypted { get; public set; }
    public Nullable`1<bool> EncryptedWithHSM { get; public set; }
    [AWSPropertyAttribute]
public string EngineFullVersion { get; public set; }
    public Nullable`1<bool> EnhancedVpcRouting { get; public set; }
    public Nullable`1<long> EstimatedSecondsToCompletion { get; public set; }
    [AWSPropertyAttribute]
public string KmsKeyId { get; public set; }
    [AWSPropertyAttribute]
public string MaintenanceTrackName { get; public set; }
    public Nullable`1<int> ManualSnapshotRemainingDays { get; public set; }
    public Nullable`1<int> ManualSnapshotRetentionPeriod { get; public set; }
    [AWSPropertyAttribute]
public string MasterPasswordSecretArn { get; public set; }
    [AWSPropertyAttribute]
public string MasterPasswordSecretKmsKeyId { get; public set; }
    [AWSPropertyAttribute]
public string MasterUsername { get; public set; }
    [AWSPropertyAttribute]
public string NodeType { get; public set; }
    public Nullable`1<int> NumberOfNodes { get; public set; }
    [AWSPropertyAttribute]
public string OwnerAccount { get; public set; }
    public Nullable`1<int> Port { get; public set; }
    public List`1<string> RestorableNodeTypes { get; public set; }
    [AWSPropertyAttribute]
public string SnapshotArn { get; public set; }
    public Nullable`1<DateTime> SnapshotCreateTime { get; public set; }
    [AWSPropertyAttribute]
public string SnapshotIdentifier { get; public set; }
    public Nullable`1<DateTime> SnapshotRetentionStartTime { get; public set; }
    [AWSPropertyAttribute]
public string SnapshotType { get; public set; }
    [AWSPropertyAttribute]
public string SourceRegion { get; public set; }
    [AWSPropertyAttribute]
public string Status { get; public set; }
    public List`1<Tag> Tags { get; public set; }
    public Nullable`1<double> TotalBackupSizeInMegaBytes { get; public set; }
    [AWSPropertyAttribute]
public string VpcId { get; public set; }
    public List`1<AccountWithRestoreAccess> get_AccountsWithRestoreAccess();
    public void set_AccountsWithRestoreAccess(List`1<AccountWithRestoreAccess> value);
    internal bool IsSetAccountsWithRestoreAccess();
    public Nullable`1<double> get_ActualIncrementalBackupSizeInMegaBytes();
    public void set_ActualIncrementalBackupSizeInMegaBytes(Nullable`1<double> value);
    internal bool IsSetActualIncrementalBackupSizeInMegaBytes();
    public string get_AvailabilityZone();
    public void set_AvailabilityZone(string value);
    internal bool IsSetAvailabilityZone();
    public Nullable`1<double> get_BackupProgressInMegaBytes();
    public void set_BackupProgressInMegaBytes(Nullable`1<double> value);
    internal bool IsSetBackupProgressInMegaBytes();
    public Nullable`1<DateTime> get_ClusterCreateTime();
    public void set_ClusterCreateTime(Nullable`1<DateTime> value);
    internal bool IsSetClusterCreateTime();
    public string get_ClusterIdentifier();
    public void set_ClusterIdentifier(string value);
    internal bool IsSetClusterIdentifier();
    public string get_ClusterVersion();
    public void set_ClusterVersion(string value);
    internal bool IsSetClusterVersion();
    public Nullable`1<double> get_CurrentBackupRateInMegaBytesPerSecond();
    public void set_CurrentBackupRateInMegaBytesPerSecond(Nullable`1<double> value);
    internal bool IsSetCurrentBackupRateInMegaBytesPerSecond();
    public string get_DBName();
    public void set_DBName(string value);
    internal bool IsSetDBName();
    public Nullable`1<long> get_ElapsedTimeInSeconds();
    public void set_ElapsedTimeInSeconds(Nullable`1<long> value);
    internal bool IsSetElapsedTimeInSeconds();
    public Nullable`1<bool> get_Encrypted();
    public void set_Encrypted(Nullable`1<bool> value);
    internal bool IsSetEncrypted();
    public Nullable`1<bool> get_EncryptedWithHSM();
    public void set_EncryptedWithHSM(Nullable`1<bool> value);
    internal bool IsSetEncryptedWithHSM();
    public string get_EngineFullVersion();
    public void set_EngineFullVersion(string value);
    internal bool IsSetEngineFullVersion();
    public Nullable`1<bool> get_EnhancedVpcRouting();
    public void set_EnhancedVpcRouting(Nullable`1<bool> value);
    internal bool IsSetEnhancedVpcRouting();
    public Nullable`1<long> get_EstimatedSecondsToCompletion();
    public void set_EstimatedSecondsToCompletion(Nullable`1<long> value);
    internal bool IsSetEstimatedSecondsToCompletion();
    public string get_KmsKeyId();
    public void set_KmsKeyId(string value);
    internal bool IsSetKmsKeyId();
    public string get_MaintenanceTrackName();
    public void set_MaintenanceTrackName(string value);
    internal bool IsSetMaintenanceTrackName();
    public Nullable`1<int> get_ManualSnapshotRemainingDays();
    public void set_ManualSnapshotRemainingDays(Nullable`1<int> value);
    internal bool IsSetManualSnapshotRemainingDays();
    public Nullable`1<int> get_ManualSnapshotRetentionPeriod();
    public void set_ManualSnapshotRetentionPeriod(Nullable`1<int> value);
    internal bool IsSetManualSnapshotRetentionPeriod();
    public string get_MasterPasswordSecretArn();
    public void set_MasterPasswordSecretArn(string value);
    internal bool IsSetMasterPasswordSecretArn();
    public string get_MasterPasswordSecretKmsKeyId();
    public void set_MasterPasswordSecretKmsKeyId(string value);
    internal bool IsSetMasterPasswordSecretKmsKeyId();
    public string get_MasterUsername();
    public void set_MasterUsername(string value);
    internal bool IsSetMasterUsername();
    public string get_NodeType();
    public void set_NodeType(string value);
    internal bool IsSetNodeType();
    public Nullable`1<int> get_NumberOfNodes();
    public void set_NumberOfNodes(Nullable`1<int> value);
    internal bool IsSetNumberOfNodes();
    public string get_OwnerAccount();
    public void set_OwnerAccount(string value);
    internal bool IsSetOwnerAccount();
    public Nullable`1<int> get_Port();
    public void set_Port(Nullable`1<int> value);
    internal bool IsSetPort();
    public List`1<string> get_RestorableNodeTypes();
    public void set_RestorableNodeTypes(List`1<string> value);
    internal bool IsSetRestorableNodeTypes();
    public string get_SnapshotArn();
    public void set_SnapshotArn(string value);
    internal bool IsSetSnapshotArn();
    public Nullable`1<DateTime> get_SnapshotCreateTime();
    public void set_SnapshotCreateTime(Nullable`1<DateTime> value);
    internal bool IsSetSnapshotCreateTime();
    public string get_SnapshotIdentifier();
    public void set_SnapshotIdentifier(string value);
    internal bool IsSetSnapshotIdentifier();
    public Nullable`1<DateTime> get_SnapshotRetentionStartTime();
    public void set_SnapshotRetentionStartTime(Nullable`1<DateTime> value);
    internal bool IsSetSnapshotRetentionStartTime();
    public string get_SnapshotType();
    public void set_SnapshotType(string value);
    internal bool IsSetSnapshotType();
    public string get_SourceRegion();
    public void set_SourceRegion(string value);
    internal bool IsSetSourceRegion();
    public string get_Status();
    public void set_Status(string value);
    internal bool IsSetStatus();
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
    public Nullable`1<double> get_TotalBackupSizeInMegaBytes();
    public void set_TotalBackupSizeInMegaBytes(Nullable`1<double> value);
    internal bool IsSetTotalBackupSizeInMegaBytes();
    public string get_VpcId();
    public void set_VpcId(string value);
    internal bool IsSetVpcId();
}
public class Amazon.Redshift.Model.SnapshotCopyAlreadyDisabledException : AmazonRedshiftException {
    public SnapshotCopyAlreadyDisabledException(string message);
    public SnapshotCopyAlreadyDisabledException(string message, Exception innerException);
    public SnapshotCopyAlreadyDisabledException(Exception innerException);
    public SnapshotCopyAlreadyDisabledException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public SnapshotCopyAlreadyDisabledException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Redshift.Model.SnapshotCopyAlreadyEnabledException : AmazonRedshiftException {
    public SnapshotCopyAlreadyEnabledException(string message);
    public SnapshotCopyAlreadyEnabledException(string message, Exception innerException);
    public SnapshotCopyAlreadyEnabledException(Exception innerException);
    public SnapshotCopyAlreadyEnabledException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public SnapshotCopyAlreadyEnabledException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Redshift.Model.SnapshotCopyDisabledException : AmazonRedshiftException {
    public SnapshotCopyDisabledException(string message);
    public SnapshotCopyDisabledException(string message, Exception innerException);
    public SnapshotCopyDisabledException(Exception innerException);
    public SnapshotCopyDisabledException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public SnapshotCopyDisabledException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Redshift.Model.SnapshotCopyGrant : object {
    private string _kmsKeyId;
    private string _snapshotCopyGrantName;
    private List`1<Tag> _tags;
    [AWSPropertyAttribute]
public string KmsKeyId { get; public set; }
    [AWSPropertyAttribute]
public string SnapshotCopyGrantName { get; public set; }
    public List`1<Tag> Tags { get; public set; }
    public string get_KmsKeyId();
    public void set_KmsKeyId(string value);
    internal bool IsSetKmsKeyId();
    public string get_SnapshotCopyGrantName();
    public void set_SnapshotCopyGrantName(string value);
    internal bool IsSetSnapshotCopyGrantName();
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
}
public class Amazon.Redshift.Model.SnapshotCopyGrantAlreadyExistsException : AmazonRedshiftException {
    public SnapshotCopyGrantAlreadyExistsException(string message);
    public SnapshotCopyGrantAlreadyExistsException(string message, Exception innerException);
    public SnapshotCopyGrantAlreadyExistsException(Exception innerException);
    public SnapshotCopyGrantAlreadyExistsException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public SnapshotCopyGrantAlreadyExistsException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Redshift.Model.SnapshotCopyGrantNotFoundException : AmazonRedshiftException {
    public SnapshotCopyGrantNotFoundException(string message);
    public SnapshotCopyGrantNotFoundException(string message, Exception innerException);
    public SnapshotCopyGrantNotFoundException(Exception innerException);
    public SnapshotCopyGrantNotFoundException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public SnapshotCopyGrantNotFoundException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Redshift.Model.SnapshotCopyGrantQuotaExceededException : AmazonRedshiftException {
    public SnapshotCopyGrantQuotaExceededException(string message);
    public SnapshotCopyGrantQuotaExceededException(string message, Exception innerException);
    public SnapshotCopyGrantQuotaExceededException(Exception innerException);
    public SnapshotCopyGrantQuotaExceededException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public SnapshotCopyGrantQuotaExceededException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Redshift.Model.SnapshotErrorMessage : object {
    private string _failureCode;
    private string _failureReason;
    private string _snapshotClusterIdentifier;
    private string _snapshotIdentifier;
    [AWSPropertyAttribute]
public string FailureCode { get; public set; }
    [AWSPropertyAttribute]
public string FailureReason { get; public set; }
    [AWSPropertyAttribute]
public string SnapshotClusterIdentifier { get; public set; }
    [AWSPropertyAttribute]
public string SnapshotIdentifier { get; public set; }
    public string get_FailureCode();
    public void set_FailureCode(string value);
    internal bool IsSetFailureCode();
    public string get_FailureReason();
    public void set_FailureReason(string value);
    internal bool IsSetFailureReason();
    public string get_SnapshotClusterIdentifier();
    public void set_SnapshotClusterIdentifier(string value);
    internal bool IsSetSnapshotClusterIdentifier();
    public string get_SnapshotIdentifier();
    public void set_SnapshotIdentifier(string value);
    internal bool IsSetSnapshotIdentifier();
}
public class Amazon.Redshift.Model.SnapshotSchedule : object {
    private Nullable`1<int> _associatedClusterCount;
    private List`1<ClusterAssociatedToSchedule> _associatedClusters;
    private List`1<DateTime> _nextInvocations;
    private List`1<string> _scheduleDefinitions;
    private string _scheduleDescription;
    private string _scheduleIdentifier;
    private List`1<Tag> _tags;
    public Nullable`1<int> AssociatedClusterCount { get; public set; }
    public List`1<ClusterAssociatedToSchedule> AssociatedClusters { get; public set; }
    public List`1<DateTime> NextInvocations { get; public set; }
    public List`1<string> ScheduleDefinitions { get; public set; }
    [AWSPropertyAttribute]
public string ScheduleDescription { get; public set; }
    [AWSPropertyAttribute]
public string ScheduleIdentifier { get; public set; }
    public List`1<Tag> Tags { get; public set; }
    public Nullable`1<int> get_AssociatedClusterCount();
    public void set_AssociatedClusterCount(Nullable`1<int> value);
    internal bool IsSetAssociatedClusterCount();
    public List`1<ClusterAssociatedToSchedule> get_AssociatedClusters();
    public void set_AssociatedClusters(List`1<ClusterAssociatedToSchedule> value);
    internal bool IsSetAssociatedClusters();
    public List`1<DateTime> get_NextInvocations();
    public void set_NextInvocations(List`1<DateTime> value);
    internal bool IsSetNextInvocations();
    public List`1<string> get_ScheduleDefinitions();
    public void set_ScheduleDefinitions(List`1<string> value);
    internal bool IsSetScheduleDefinitions();
    public string get_ScheduleDescription();
    public void set_ScheduleDescription(string value);
    internal bool IsSetScheduleDescription();
    public string get_ScheduleIdentifier();
    public void set_ScheduleIdentifier(string value);
    internal bool IsSetScheduleIdentifier();
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
}
public class Amazon.Redshift.Model.SnapshotScheduleAlreadyExistsException : AmazonRedshiftException {
    public SnapshotScheduleAlreadyExistsException(string message);
    public SnapshotScheduleAlreadyExistsException(string message, Exception innerException);
    public SnapshotScheduleAlreadyExistsException(Exception innerException);
    public SnapshotScheduleAlreadyExistsException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public SnapshotScheduleAlreadyExistsException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Redshift.Model.SnapshotScheduleNotFoundException : AmazonRedshiftException {
    public SnapshotScheduleNotFoundException(string message);
    public SnapshotScheduleNotFoundException(string message, Exception innerException);
    public SnapshotScheduleNotFoundException(Exception innerException);
    public SnapshotScheduleNotFoundException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public SnapshotScheduleNotFoundException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Redshift.Model.SnapshotScheduleQuotaExceededException : AmazonRedshiftException {
    public SnapshotScheduleQuotaExceededException(string message);
    public SnapshotScheduleQuotaExceededException(string message, Exception innerException);
    public SnapshotScheduleQuotaExceededException(Exception innerException);
    public SnapshotScheduleQuotaExceededException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public SnapshotScheduleQuotaExceededException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Redshift.Model.SnapshotScheduleUpdateInProgressException : AmazonRedshiftException {
    public SnapshotScheduleUpdateInProgressException(string message);
    public SnapshotScheduleUpdateInProgressException(string message, Exception innerException);
    public SnapshotScheduleUpdateInProgressException(Exception innerException);
    public SnapshotScheduleUpdateInProgressException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public SnapshotScheduleUpdateInProgressException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Redshift.Model.SnapshotSortingEntity : object {
    private SnapshotAttributeToSortBy _attribute;
    private SortByOrder _sortOrder;
    [AWSPropertyAttribute]
public SnapshotAttributeToSortBy Attribute { get; public set; }
    public SortByOrder SortOrder { get; public set; }
    public SnapshotAttributeToSortBy get_Attribute();
    public void set_Attribute(SnapshotAttributeToSortBy value);
    internal bool IsSetAttribute();
    public SortByOrder get_SortOrder();
    public void set_SortOrder(SortByOrder value);
    internal bool IsSetSortOrder();
}
public class Amazon.Redshift.Model.SNSInvalidTopicException : AmazonRedshiftException {
    public SNSInvalidTopicException(string message);
    public SNSInvalidTopicException(string message, Exception innerException);
    public SNSInvalidTopicException(Exception innerException);
    public SNSInvalidTopicException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public SNSInvalidTopicException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Redshift.Model.SNSNoAuthorizationException : AmazonRedshiftException {
    public SNSNoAuthorizationException(string message);
    public SNSNoAuthorizationException(string message, Exception innerException);
    public SNSNoAuthorizationException(Exception innerException);
    public SNSNoAuthorizationException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public SNSNoAuthorizationException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Redshift.Model.SNSTopicArnNotFoundException : AmazonRedshiftException {
    public SNSTopicArnNotFoundException(string message);
    public SNSTopicArnNotFoundException(string message, Exception innerException);
    public SNSTopicArnNotFoundException(Exception innerException);
    public SNSTopicArnNotFoundException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public SNSTopicArnNotFoundException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Redshift.Model.SourceNotFoundException : AmazonRedshiftException {
    public SourceNotFoundException(string message);
    public SourceNotFoundException(string message, Exception innerException);
    public SourceNotFoundException(Exception innerException);
    public SourceNotFoundException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public SourceNotFoundException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Redshift.Model.Subnet : object {
    private AvailabilityZone _subnetAvailabilityZone;
    private string _subnetIdentifier;
    private string _subnetStatus;
    public AvailabilityZone SubnetAvailabilityZone { get; public set; }
    [AWSPropertyAttribute]
public string SubnetIdentifier { get; public set; }
    [AWSPropertyAttribute]
public string SubnetStatus { get; public set; }
    public AvailabilityZone get_SubnetAvailabilityZone();
    public void set_SubnetAvailabilityZone(AvailabilityZone value);
    internal bool IsSetSubnetAvailabilityZone();
    public string get_SubnetIdentifier();
    public void set_SubnetIdentifier(string value);
    internal bool IsSetSubnetIdentifier();
    public string get_SubnetStatus();
    public void set_SubnetStatus(string value);
    internal bool IsSetSubnetStatus();
}
public class Amazon.Redshift.Model.SubnetAlreadyInUseException : AmazonRedshiftException {
    public SubnetAlreadyInUseException(string message);
    public SubnetAlreadyInUseException(string message, Exception innerException);
    public SubnetAlreadyInUseException(Exception innerException);
    public SubnetAlreadyInUseException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public SubnetAlreadyInUseException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Redshift.Model.SubscriptionAlreadyExistException : AmazonRedshiftException {
    public SubscriptionAlreadyExistException(string message);
    public SubscriptionAlreadyExistException(string message, Exception innerException);
    public SubscriptionAlreadyExistException(Exception innerException);
    public SubscriptionAlreadyExistException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public SubscriptionAlreadyExistException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Redshift.Model.SubscriptionCategoryNotFoundException : AmazonRedshiftException {
    public SubscriptionCategoryNotFoundException(string message);
    public SubscriptionCategoryNotFoundException(string message, Exception innerException);
    public SubscriptionCategoryNotFoundException(Exception innerException);
    public SubscriptionCategoryNotFoundException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public SubscriptionCategoryNotFoundException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Redshift.Model.SubscriptionEventIdNotFoundException : AmazonRedshiftException {
    public SubscriptionEventIdNotFoundException(string message);
    public SubscriptionEventIdNotFoundException(string message, Exception innerException);
    public SubscriptionEventIdNotFoundException(Exception innerException);
    public SubscriptionEventIdNotFoundException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public SubscriptionEventIdNotFoundException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Redshift.Model.SubscriptionNotFoundException : AmazonRedshiftException {
    public SubscriptionNotFoundException(string message);
    public SubscriptionNotFoundException(string message, Exception innerException);
    public SubscriptionNotFoundException(Exception innerException);
    public SubscriptionNotFoundException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public SubscriptionNotFoundException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Redshift.Model.SubscriptionSeverityNotFoundException : AmazonRedshiftException {
    public SubscriptionSeverityNotFoundException(string message);
    public SubscriptionSeverityNotFoundException(string message, Exception innerException);
    public SubscriptionSeverityNotFoundException(Exception innerException);
    public SubscriptionSeverityNotFoundException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public SubscriptionSeverityNotFoundException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Redshift.Model.SupportedOperation : object {
    private string _operationName;
    [AWSPropertyAttribute]
public string OperationName { get; public set; }
    public string get_OperationName();
    public void set_OperationName(string value);
    internal bool IsSetOperationName();
}
public class Amazon.Redshift.Model.SupportedPlatform : object {
    private string _name;
    [AWSPropertyAttribute]
public string Name { get; public set; }
    public string get_Name();
    public void set_Name(string value);
    internal bool IsSetName();
}
public class Amazon.Redshift.Model.TableLimitExceededException : AmazonRedshiftException {
    public TableLimitExceededException(string message);
    public TableLimitExceededException(string message, Exception innerException);
    public TableLimitExceededException(Exception innerException);
    public TableLimitExceededException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public TableLimitExceededException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Redshift.Model.TableRestoreNotFoundException : AmazonRedshiftException {
    public TableRestoreNotFoundException(string message);
    public TableRestoreNotFoundException(string message, Exception innerException);
    public TableRestoreNotFoundException(Exception innerException);
    public TableRestoreNotFoundException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public TableRestoreNotFoundException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Redshift.Model.TableRestoreStatus : object {
    private string _clusterIdentifier;
    private string _message;
    private string _newTableName;
    private Nullable`1<long> _progressInMegaBytes;
    private Nullable`1<DateTime> _requestTime;
    private string _snapshotIdentifier;
    private string _sourceDatabaseName;
    private string _sourceSchemaName;
    private string _sourceTableName;
    private TableRestoreStatusType _status;
    private string _tableRestoreRequestId;
    private string _targetDatabaseName;
    private string _targetSchemaName;
    private Nullable`1<long> _totalDataInMegaBytes;
    [AWSPropertyAttribute]
public string ClusterIdentifier { get; public set; }
    [AWSPropertyAttribute]
public string Message { get; public set; }
    [AWSPropertyAttribute]
public string NewTableName { get; public set; }
    public Nullable`1<long> ProgressInMegaBytes { get; public set; }
    public Nullable`1<DateTime> RequestTime { get; public set; }
    [AWSPropertyAttribute]
public string SnapshotIdentifier { get; public set; }
    [AWSPropertyAttribute]
public string SourceDatabaseName { get; public set; }
    [AWSPropertyAttribute]
public string SourceSchemaName { get; public set; }
    [AWSPropertyAttribute]
public string SourceTableName { get; public set; }
    public TableRestoreStatusType Status { get; public set; }
    [AWSPropertyAttribute]
public string TableRestoreRequestId { get; public set; }
    [AWSPropertyAttribute]
public string TargetDatabaseName { get; public set; }
    [AWSPropertyAttribute]
public string TargetSchemaName { get; public set; }
    public Nullable`1<long> TotalDataInMegaBytes { get; public set; }
    public string get_ClusterIdentifier();
    public void set_ClusterIdentifier(string value);
    internal bool IsSetClusterIdentifier();
    public string get_Message();
    public void set_Message(string value);
    internal bool IsSetMessage();
    public string get_NewTableName();
    public void set_NewTableName(string value);
    internal bool IsSetNewTableName();
    public Nullable`1<long> get_ProgressInMegaBytes();
    public void set_ProgressInMegaBytes(Nullable`1<long> value);
    internal bool IsSetProgressInMegaBytes();
    public Nullable`1<DateTime> get_RequestTime();
    public void set_RequestTime(Nullable`1<DateTime> value);
    internal bool IsSetRequestTime();
    public string get_SnapshotIdentifier();
    public void set_SnapshotIdentifier(string value);
    internal bool IsSetSnapshotIdentifier();
    public string get_SourceDatabaseName();
    public void set_SourceDatabaseName(string value);
    internal bool IsSetSourceDatabaseName();
    public string get_SourceSchemaName();
    public void set_SourceSchemaName(string value);
    internal bool IsSetSourceSchemaName();
    public string get_SourceTableName();
    public void set_SourceTableName(string value);
    internal bool IsSetSourceTableName();
    public TableRestoreStatusType get_Status();
    public void set_Status(TableRestoreStatusType value);
    internal bool IsSetStatus();
    public string get_TableRestoreRequestId();
    public void set_TableRestoreRequestId(string value);
    internal bool IsSetTableRestoreRequestId();
    public string get_TargetDatabaseName();
    public void set_TargetDatabaseName(string value);
    internal bool IsSetTargetDatabaseName();
    public string get_TargetSchemaName();
    public void set_TargetSchemaName(string value);
    internal bool IsSetTargetSchemaName();
    public Nullable`1<long> get_TotalDataInMegaBytes();
    public void set_TotalDataInMegaBytes(Nullable`1<long> value);
    internal bool IsSetTotalDataInMegaBytes();
}
public class Amazon.Redshift.Model.Tag : object {
    private string _key;
    private string _value;
    [AWSPropertyAttribute]
public string Key { get; public set; }
    [AWSPropertyAttribute]
public string Value { get; public set; }
    public string get_Key();
    public void set_Key(string value);
    internal bool IsSetKey();
    public string get_Value();
    public void set_Value(string value);
    internal bool IsSetValue();
}
public class Amazon.Redshift.Model.TaggedResource : object {
    private string _resourceName;
    private string _resourceType;
    private Tag _tag;
    [AWSPropertyAttribute]
public string ResourceName { get; public set; }
    [AWSPropertyAttribute]
public string ResourceType { get; public set; }
    public Tag Tag { get; public set; }
    public string get_ResourceName();
    public void set_ResourceName(string value);
    internal bool IsSetResourceName();
    public string get_ResourceType();
    public void set_ResourceType(string value);
    internal bool IsSetResourceType();
    public Tag get_Tag();
    public void set_Tag(Tag value);
    internal bool IsSetTag();
}
public class Amazon.Redshift.Model.TagLimitExceededException : AmazonRedshiftException {
    public TagLimitExceededException(string message);
    public TagLimitExceededException(string message, Exception innerException);
    public TagLimitExceededException(Exception innerException);
    public TagLimitExceededException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public TagLimitExceededException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Redshift.Model.UnauthorizedOperationException : AmazonRedshiftException {
    public UnauthorizedOperationException(string message);
    public UnauthorizedOperationException(string message, Exception innerException);
    public UnauthorizedOperationException(Exception innerException);
    public UnauthorizedOperationException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public UnauthorizedOperationException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Redshift.Model.UnauthorizedPartnerIntegrationException : AmazonRedshiftException {
    public UnauthorizedPartnerIntegrationException(string message);
    public UnauthorizedPartnerIntegrationException(string message, Exception innerException);
    public UnauthorizedPartnerIntegrationException(Exception innerException);
    public UnauthorizedPartnerIntegrationException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public UnauthorizedPartnerIntegrationException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Redshift.Model.UnknownSnapshotCopyRegionException : AmazonRedshiftException {
    public UnknownSnapshotCopyRegionException(string message);
    public UnknownSnapshotCopyRegionException(string message, Exception innerException);
    public UnknownSnapshotCopyRegionException(Exception innerException);
    public UnknownSnapshotCopyRegionException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public UnknownSnapshotCopyRegionException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Redshift.Model.UnsupportedOperationException : AmazonRedshiftException {
    public UnsupportedOperationException(string message);
    public UnsupportedOperationException(string message, Exception innerException);
    public UnsupportedOperationException(Exception innerException);
    public UnsupportedOperationException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public UnsupportedOperationException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Redshift.Model.UnsupportedOptionException : AmazonRedshiftException {
    public UnsupportedOptionException(string message);
    public UnsupportedOptionException(string message, Exception innerException);
    public UnsupportedOptionException(Exception innerException);
    public UnsupportedOptionException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public UnsupportedOptionException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Redshift.Model.UpdatePartnerStatusRequest : AmazonRedshiftRequest {
    private string _accountId;
    private string _clusterIdentifier;
    private string _databaseName;
    private string _partnerName;
    private PartnerIntegrationStatus _status;
    private string _statusMessage;
    [AWSPropertyAttribute]
public string AccountId { get; public set; }
    [AWSPropertyAttribute]
public string ClusterIdentifier { get; public set; }
    [AWSPropertyAttribute]
public string DatabaseName { get; public set; }
    [AWSPropertyAttribute]
public string PartnerName { get; public set; }
    [AWSPropertyAttribute]
public PartnerIntegrationStatus Status { get; public set; }
    [AWSPropertyAttribute]
public string StatusMessage { get; public set; }
    public string get_AccountId();
    public void set_AccountId(string value);
    internal bool IsSetAccountId();
    public string get_ClusterIdentifier();
    public void set_ClusterIdentifier(string value);
    internal bool IsSetClusterIdentifier();
    public string get_DatabaseName();
    public void set_DatabaseName(string value);
    internal bool IsSetDatabaseName();
    public string get_PartnerName();
    public void set_PartnerName(string value);
    internal bool IsSetPartnerName();
    public PartnerIntegrationStatus get_Status();
    public void set_Status(PartnerIntegrationStatus value);
    internal bool IsSetStatus();
    public string get_StatusMessage();
    public void set_StatusMessage(string value);
    internal bool IsSetStatusMessage();
}
public class Amazon.Redshift.Model.UpdatePartnerStatusResponse : AmazonWebServiceResponse {
    private string _databaseName;
    private string _partnerName;
    [AWSPropertyAttribute]
public string DatabaseName { get; public set; }
    [AWSPropertyAttribute]
public string PartnerName { get; public set; }
    public string get_DatabaseName();
    public void set_DatabaseName(string value);
    internal bool IsSetDatabaseName();
    public string get_PartnerName();
    public void set_PartnerName(string value);
    internal bool IsSetPartnerName();
}
public class Amazon.Redshift.Model.UpdateTarget : object {
    private string _databaseVersion;
    private string _maintenanceTrackName;
    private List`1<SupportedOperation> _supportedOperations;
    [AWSPropertyAttribute]
public string DatabaseVersion { get; public set; }
    [AWSPropertyAttribute]
public string MaintenanceTrackName { get; public set; }
    public List`1<SupportedOperation> SupportedOperations { get; public set; }
    public string get_DatabaseVersion();
    public void set_DatabaseVersion(string value);
    internal bool IsSetDatabaseVersion();
    public string get_MaintenanceTrackName();
    public void set_MaintenanceTrackName(string value);
    internal bool IsSetMaintenanceTrackName();
    public List`1<SupportedOperation> get_SupportedOperations();
    public void set_SupportedOperations(List`1<SupportedOperation> value);
    internal bool IsSetSupportedOperations();
}
public class Amazon.Redshift.Model.UsageLimit : object {
    private Nullable`1<long> _amount;
    private UsageLimitBreachAction _breachAction;
    private string _clusterIdentifier;
    private UsageLimitFeatureType _featureType;
    private UsageLimitLimitType _limitType;
    private UsageLimitPeriod _period;
    private List`1<Tag> _tags;
    private string _usageLimitId;
    public Nullable`1<long> Amount { get; public set; }
    public UsageLimitBreachAction BreachAction { get; public set; }
    [AWSPropertyAttribute]
public string ClusterIdentifier { get; public set; }
    public UsageLimitFeatureType FeatureType { get; public set; }
    public UsageLimitLimitType LimitType { get; public set; }
    public UsageLimitPeriod Period { get; public set; }
    public List`1<Tag> Tags { get; public set; }
    [AWSPropertyAttribute]
public string UsageLimitId { get; public set; }
    public Nullable`1<long> get_Amount();
    public void set_Amount(Nullable`1<long> value);
    internal bool IsSetAmount();
    public UsageLimitBreachAction get_BreachAction();
    public void set_BreachAction(UsageLimitBreachAction value);
    internal bool IsSetBreachAction();
    public string get_ClusterIdentifier();
    public void set_ClusterIdentifier(string value);
    internal bool IsSetClusterIdentifier();
    public UsageLimitFeatureType get_FeatureType();
    public void set_FeatureType(UsageLimitFeatureType value);
    internal bool IsSetFeatureType();
    public UsageLimitLimitType get_LimitType();
    public void set_LimitType(UsageLimitLimitType value);
    internal bool IsSetLimitType();
    public UsageLimitPeriod get_Period();
    public void set_Period(UsageLimitPeriod value);
    internal bool IsSetPeriod();
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
    public string get_UsageLimitId();
    public void set_UsageLimitId(string value);
    internal bool IsSetUsageLimitId();
}
public class Amazon.Redshift.Model.UsageLimitAlreadyExistsException : AmazonRedshiftException {
    public UsageLimitAlreadyExistsException(string message);
    public UsageLimitAlreadyExistsException(string message, Exception innerException);
    public UsageLimitAlreadyExistsException(Exception innerException);
    public UsageLimitAlreadyExistsException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public UsageLimitAlreadyExistsException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Redshift.Model.UsageLimitNotFoundException : AmazonRedshiftException {
    public UsageLimitNotFoundException(string message);
    public UsageLimitNotFoundException(string message, Exception innerException);
    public UsageLimitNotFoundException(Exception innerException);
    public UsageLimitNotFoundException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public UsageLimitNotFoundException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Redshift.Model.VpcEndpoint : object {
    private List`1<NetworkInterface> _networkInterfaces;
    private string _vpcEndpointId;
    private string _vpcId;
    public List`1<NetworkInterface> NetworkInterfaces { get; public set; }
    [AWSPropertyAttribute]
public string VpcEndpointId { get; public set; }
    [AWSPropertyAttribute]
public string VpcId { get; public set; }
    public List`1<NetworkInterface> get_NetworkInterfaces();
    public void set_NetworkInterfaces(List`1<NetworkInterface> value);
    internal bool IsSetNetworkInterfaces();
    public string get_VpcEndpointId();
    public void set_VpcEndpointId(string value);
    internal bool IsSetVpcEndpointId();
    public string get_VpcId();
    public void set_VpcId(string value);
    internal bool IsSetVpcId();
}
public class Amazon.Redshift.Model.VpcSecurityGroupMembership : object {
    private string _status;
    private string _vpcSecurityGroupId;
    [AWSPropertyAttribute]
public string Status { get; public set; }
    [AWSPropertyAttribute]
public string VpcSecurityGroupId { get; public set; }
    public string get_Status();
    public void set_Status(string value);
    internal bool IsSetStatus();
    public string get_VpcSecurityGroupId();
    public void set_VpcSecurityGroupId(string value);
    internal bool IsSetVpcSecurityGroupId();
}
public class Amazon.Redshift.NodeConfigurationOptionsFilterName : ConstantClass {
    public static NodeConfigurationOptionsFilterName EstimatedDiskUtilizationPercent;
    public static NodeConfigurationOptionsFilterName Mode;
    public static NodeConfigurationOptionsFilterName NodeType;
    public static NodeConfigurationOptionsFilterName NumberOfNodes;
    public NodeConfigurationOptionsFilterName(string value);
    private static NodeConfigurationOptionsFilterName();
    public static NodeConfigurationOptionsFilterName FindValue(string value);
    public static NodeConfigurationOptionsFilterName op_Implicit(string value);
}
public class Amazon.Redshift.OperatorType : ConstantClass {
    public static OperatorType Between;
    public static OperatorType Eq;
    public static OperatorType Ge;
    public static OperatorType Gt;
    public static OperatorType In;
    public static OperatorType Le;
    public static OperatorType Lt;
    public OperatorType(string value);
    private static OperatorType();
    public static OperatorType FindValue(string value);
    public static OperatorType op_Implicit(string value);
}
public class Amazon.Redshift.ParameterApplyType : ConstantClass {
    public static ParameterApplyType Dynamic;
    public static ParameterApplyType Static;
    public ParameterApplyType(string value);
    private static ParameterApplyType();
    public static ParameterApplyType FindValue(string value);
    public static ParameterApplyType op_Implicit(string value);
}
public class Amazon.Redshift.PartnerIntegrationStatus : ConstantClass {
    public static PartnerIntegrationStatus Active;
    public static PartnerIntegrationStatus ConnectionFailure;
    public static PartnerIntegrationStatus Inactive;
    public static PartnerIntegrationStatus RuntimeFailure;
    public PartnerIntegrationStatus(string value);
    private static PartnerIntegrationStatus();
    public static PartnerIntegrationStatus FindValue(string value);
    public static PartnerIntegrationStatus op_Implicit(string value);
}
public class Amazon.Redshift.RecommendedActionType : ConstantClass {
    public static RecommendedActionType CLI;
    public static RecommendedActionType SQL;
    public RecommendedActionType(string value);
    private static RecommendedActionType();
    public static RecommendedActionType FindValue(string value);
    public static RecommendedActionType op_Implicit(string value);
}
public class Amazon.Redshift.ReservedNodeExchangeActionType : ConstantClass {
    public static ReservedNodeExchangeActionType ResizeCluster;
    public static ReservedNodeExchangeActionType RestoreCluster;
    public ReservedNodeExchangeActionType(string value);
    private static ReservedNodeExchangeActionType();
    public static ReservedNodeExchangeActionType FindValue(string value);
    public static ReservedNodeExchangeActionType op_Implicit(string value);
}
public class Amazon.Redshift.ReservedNodeExchangeStatusType : ConstantClass {
    public static ReservedNodeExchangeStatusType FAILED;
    public static ReservedNodeExchangeStatusType IN_PROGRESS;
    public static ReservedNodeExchangeStatusType PENDING;
    public static ReservedNodeExchangeStatusType REQUESTED;
    public static ReservedNodeExchangeStatusType RETRYING;
    public static ReservedNodeExchangeStatusType SUCCEEDED;
    public ReservedNodeExchangeStatusType(string value);
    private static ReservedNodeExchangeStatusType();
    public static ReservedNodeExchangeStatusType FindValue(string value);
    public static ReservedNodeExchangeStatusType op_Implicit(string value);
}
public class Amazon.Redshift.ReservedNodeOfferingType : ConstantClass {
    public static ReservedNodeOfferingType Regular;
    public static ReservedNodeOfferingType Upgradable;
    public ReservedNodeOfferingType(string value);
    private static ReservedNodeOfferingType();
    public static ReservedNodeOfferingType FindValue(string value);
    public static ReservedNodeOfferingType op_Implicit(string value);
}
public class Amazon.Redshift.ScheduledActionFilterName : ConstantClass {
    public static ScheduledActionFilterName ClusterIdentifier;
    public static ScheduledActionFilterName IamRole;
    public ScheduledActionFilterName(string value);
    private static ScheduledActionFilterName();
    public static ScheduledActionFilterName FindValue(string value);
    public static ScheduledActionFilterName op_Implicit(string value);
}
public class Amazon.Redshift.ScheduledActionState : ConstantClass {
    public static ScheduledActionState ACTIVE;
    public static ScheduledActionState DISABLED;
    public ScheduledActionState(string value);
    private static ScheduledActionState();
    public static ScheduledActionState FindValue(string value);
    public static ScheduledActionState op_Implicit(string value);
}
public class Amazon.Redshift.ScheduledActionTypeValues : ConstantClass {
    public static ScheduledActionTypeValues PauseCluster;
    public static ScheduledActionTypeValues ResizeCluster;
    public static ScheduledActionTypeValues ResumeCluster;
    public ScheduledActionTypeValues(string value);
    private static ScheduledActionTypeValues();
    public static ScheduledActionTypeValues FindValue(string value);
    public static ScheduledActionTypeValues op_Implicit(string value);
}
public class Amazon.Redshift.ScheduleState : ConstantClass {
    public static ScheduleState ACTIVE;
    public static ScheduleState FAILED;
    public static ScheduleState MODIFYING;
    public ScheduleState(string value);
    private static ScheduleState();
    public static ScheduleState FindValue(string value);
    public static ScheduleState op_Implicit(string value);
}
public class Amazon.Redshift.ServiceAuthorization : ConstantClass {
    public static ServiceAuthorization Disabled;
    public static ServiceAuthorization Enabled;
    public ServiceAuthorization(string value);
    private static ServiceAuthorization();
    public static ServiceAuthorization FindValue(string value);
    public static ServiceAuthorization op_Implicit(string value);
}
public class Amazon.Redshift.SnapshotAttributeToSortBy : ConstantClass {
    public static SnapshotAttributeToSortBy CREATE_TIME;
    public static SnapshotAttributeToSortBy SOURCE_TYPE;
    public static SnapshotAttributeToSortBy TOTAL_SIZE;
    public SnapshotAttributeToSortBy(string value);
    private static SnapshotAttributeToSortBy();
    public static SnapshotAttributeToSortBy FindValue(string value);
    public static SnapshotAttributeToSortBy op_Implicit(string value);
}
public class Amazon.Redshift.SortByOrder : ConstantClass {
    public static SortByOrder ASC;
    public static SortByOrder DESC;
    public SortByOrder(string value);
    private static SortByOrder();
    public static SortByOrder FindValue(string value);
    public static SortByOrder op_Implicit(string value);
}
public class Amazon.Redshift.SourceType : ConstantClass {
    public static SourceType Cluster;
    public static SourceType ClusterParameterGroup;
    public static SourceType ClusterSecurityGroup;
    public static SourceType ClusterSnapshot;
    public static SourceType ScheduledAction;
    public SourceType(string value);
    private static SourceType();
    public static SourceType FindValue(string value);
    public static SourceType op_Implicit(string value);
}
public class Amazon.Redshift.TableRestoreStatusType : ConstantClass {
    public static TableRestoreStatusType CANCELED;
    public static TableRestoreStatusType FAILED;
    public static TableRestoreStatusType IN_PROGRESS;
    public static TableRestoreStatusType PENDING;
    public static TableRestoreStatusType SUCCEEDED;
    public TableRestoreStatusType(string value);
    private static TableRestoreStatusType();
    public static TableRestoreStatusType FindValue(string value);
    public static TableRestoreStatusType op_Implicit(string value);
}
public class Amazon.Redshift.UsageLimitBreachAction : ConstantClass {
    public static UsageLimitBreachAction Disable;
    public static UsageLimitBreachAction EmitMetric;
    public static UsageLimitBreachAction Log;
    public UsageLimitBreachAction(string value);
    private static UsageLimitBreachAction();
    public static UsageLimitBreachAction FindValue(string value);
    public static UsageLimitBreachAction op_Implicit(string value);
}
public class Amazon.Redshift.UsageLimitFeatureType : ConstantClass {
    public static UsageLimitFeatureType ConcurrencyScaling;
    public static UsageLimitFeatureType CrossRegionDatasharing;
    public static UsageLimitFeatureType Spectrum;
    public UsageLimitFeatureType(string value);
    private static UsageLimitFeatureType();
    public static UsageLimitFeatureType FindValue(string value);
    public static UsageLimitFeatureType op_Implicit(string value);
}
public class Amazon.Redshift.UsageLimitLimitType : ConstantClass {
    public static UsageLimitLimitType DataScanned;
    public static UsageLimitLimitType Time;
    public UsageLimitLimitType(string value);
    private static UsageLimitLimitType();
    public static UsageLimitLimitType FindValue(string value);
    public static UsageLimitLimitType op_Implicit(string value);
}
public class Amazon.Redshift.UsageLimitPeriod : ConstantClass {
    public static UsageLimitPeriod Daily;
    public static UsageLimitPeriod Monthly;
    public static UsageLimitPeriod Weekly;
    public UsageLimitPeriod(string value);
    private static UsageLimitPeriod();
    public static UsageLimitPeriod FindValue(string value);
    public static UsageLimitPeriod op_Implicit(string value);
}
public class Amazon.Redshift.ZeroETLIntegrationStatus : ConstantClass {
    public static ZeroETLIntegrationStatus Active;
    public static ZeroETLIntegrationStatus Creating;
    public static ZeroETLIntegrationStatus Deleting;
    public static ZeroETLIntegrationStatus Failed;
    public static ZeroETLIntegrationStatus Modifying;
    public static ZeroETLIntegrationStatus Needs_attention;
    public static ZeroETLIntegrationStatus Syncing;
    public ZeroETLIntegrationStatus(string value);
    private static ZeroETLIntegrationStatus();
    public static ZeroETLIntegrationStatus FindValue(string value);
    public static ZeroETLIntegrationStatus op_Implicit(string value);
}
