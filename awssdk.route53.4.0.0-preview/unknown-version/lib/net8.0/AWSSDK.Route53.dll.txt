public class Amazon.Route53.AccountLimitType : ConstantClass {
    public static AccountLimitType MAX_HEALTH_CHECKS_BY_OWNER;
    public static AccountLimitType MAX_HOSTED_ZONES_BY_OWNER;
    public static AccountLimitType MAX_REUSABLE_DELEGATION_SETS_BY_OWNER;
    public static AccountLimitType MAX_TRAFFIC_POLICIES_BY_OWNER;
    public static AccountLimitType MAX_TRAFFIC_POLICY_INSTANCES_BY_OWNER;
    public AccountLimitType(string value);
    private static AccountLimitType();
    public static AccountLimitType FindValue(string value);
    public static AccountLimitType op_Implicit(string value);
}
public class Amazon.Route53.AmazonRoute53Client : AmazonServiceClient {
    private static IServiceMetadata serviceMetadata;
    private IRoute53PaginatorFactory _paginators;
    public IRoute53PaginatorFactory Paginators { get; }
    protected IServiceMetadata ServiceMetadata { get; }
    public AmazonRoute53Client(RegionEndpoint region);
    public AmazonRoute53Client(AmazonRoute53Config config);
    public AmazonRoute53Client(AWSCredentials credentials);
    public AmazonRoute53Client(AWSCredentials credentials, RegionEndpoint region);
    public AmazonRoute53Client(AWSCredentials credentials, AmazonRoute53Config clientConfig);
    public AmazonRoute53Client(string awsAccessKeyId, string awsSecretAccessKey);
    public AmazonRoute53Client(string awsAccessKeyId, string awsSecretAccessKey, RegionEndpoint region);
    public AmazonRoute53Client(string awsAccessKeyId, string awsSecretAccessKey, AmazonRoute53Config clientConfig);
    public AmazonRoute53Client(string awsAccessKeyId, string awsSecretAccessKey, string awsSessionToken);
    public AmazonRoute53Client(string awsAccessKeyId, string awsSecretAccessKey, string awsSessionToken, RegionEndpoint region);
    public AmazonRoute53Client(string awsAccessKeyId, string awsSecretAccessKey, string awsSessionToken, AmazonRoute53Config clientConfig);
    private static AmazonRoute53Client();
    public sealed virtual IRoute53PaginatorFactory get_Paginators();
    protected virtual AbstractAWSSigner CreateSigner();
    protected virtual void CustomizeRuntimePipeline(RuntimePipeline pipeline);
    protected virtual IServiceMetadata get_ServiceMetadata();
    protected virtual void Dispose(bool disposing);
    internal virtual ActivateKeySigningKeyResponse ActivateKeySigningKey(ActivateKeySigningKeyRequest request);
    public virtual Task`1<ActivateKeySigningKeyResponse> ActivateKeySigningKeyAsync(ActivateKeySigningKeyRequest request, CancellationToken cancellationToken);
    internal virtual AssociateVPCWithHostedZoneResponse AssociateVPCWithHostedZone(AssociateVPCWithHostedZoneRequest request);
    public virtual Task`1<AssociateVPCWithHostedZoneResponse> AssociateVPCWithHostedZoneAsync(AssociateVPCWithHostedZoneRequest request, CancellationToken cancellationToken);
    internal virtual ChangeCidrCollectionResponse ChangeCidrCollection(ChangeCidrCollectionRequest request);
    public virtual Task`1<ChangeCidrCollectionResponse> ChangeCidrCollectionAsync(ChangeCidrCollectionRequest request, CancellationToken cancellationToken);
    internal virtual ChangeResourceRecordSetsResponse ChangeResourceRecordSets(ChangeResourceRecordSetsRequest request);
    public virtual Task`1<ChangeResourceRecordSetsResponse> ChangeResourceRecordSetsAsync(ChangeResourceRecordSetsRequest request, CancellationToken cancellationToken);
    internal virtual ChangeTagsForResourceResponse ChangeTagsForResource(ChangeTagsForResourceRequest request);
    public virtual Task`1<ChangeTagsForResourceResponse> ChangeTagsForResourceAsync(ChangeTagsForResourceRequest request, CancellationToken cancellationToken);
    internal virtual CreateCidrCollectionResponse CreateCidrCollection(CreateCidrCollectionRequest request);
    public virtual Task`1<CreateCidrCollectionResponse> CreateCidrCollectionAsync(CreateCidrCollectionRequest request, CancellationToken cancellationToken);
    internal virtual CreateHealthCheckResponse CreateHealthCheck(CreateHealthCheckRequest request);
    public virtual Task`1<CreateHealthCheckResponse> CreateHealthCheckAsync(CreateHealthCheckRequest request, CancellationToken cancellationToken);
    internal virtual CreateHostedZoneResponse CreateHostedZone(CreateHostedZoneRequest request);
    public virtual Task`1<CreateHostedZoneResponse> CreateHostedZoneAsync(CreateHostedZoneRequest request, CancellationToken cancellationToken);
    internal virtual CreateKeySigningKeyResponse CreateKeySigningKey(CreateKeySigningKeyRequest request);
    public virtual Task`1<CreateKeySigningKeyResponse> CreateKeySigningKeyAsync(CreateKeySigningKeyRequest request, CancellationToken cancellationToken);
    internal virtual CreateQueryLoggingConfigResponse CreateQueryLoggingConfig(CreateQueryLoggingConfigRequest request);
    public virtual Task`1<CreateQueryLoggingConfigResponse> CreateQueryLoggingConfigAsync(CreateQueryLoggingConfigRequest request, CancellationToken cancellationToken);
    internal virtual CreateReusableDelegationSetResponse CreateReusableDelegationSet(CreateReusableDelegationSetRequest request);
    public virtual Task`1<CreateReusableDelegationSetResponse> CreateReusableDelegationSetAsync(CreateReusableDelegationSetRequest request, CancellationToken cancellationToken);
    internal virtual CreateTrafficPolicyResponse CreateTrafficPolicy(CreateTrafficPolicyRequest request);
    public virtual Task`1<CreateTrafficPolicyResponse> CreateTrafficPolicyAsync(CreateTrafficPolicyRequest request, CancellationToken cancellationToken);
    internal virtual CreateTrafficPolicyInstanceResponse CreateTrafficPolicyInstance(CreateTrafficPolicyInstanceRequest request);
    public virtual Task`1<CreateTrafficPolicyInstanceResponse> CreateTrafficPolicyInstanceAsync(CreateTrafficPolicyInstanceRequest request, CancellationToken cancellationToken);
    internal virtual CreateTrafficPolicyVersionResponse CreateTrafficPolicyVersion(CreateTrafficPolicyVersionRequest request);
    public virtual Task`1<CreateTrafficPolicyVersionResponse> CreateTrafficPolicyVersionAsync(CreateTrafficPolicyVersionRequest request, CancellationToken cancellationToken);
    internal virtual CreateVPCAssociationAuthorizationResponse CreateVPCAssociationAuthorization(CreateVPCAssociationAuthorizationRequest request);
    public virtual Task`1<CreateVPCAssociationAuthorizationResponse> CreateVPCAssociationAuthorizationAsync(CreateVPCAssociationAuthorizationRequest request, CancellationToken cancellationToken);
    internal virtual DeactivateKeySigningKeyResponse DeactivateKeySigningKey(DeactivateKeySigningKeyRequest request);
    public virtual Task`1<DeactivateKeySigningKeyResponse> DeactivateKeySigningKeyAsync(DeactivateKeySigningKeyRequest request, CancellationToken cancellationToken);
    internal virtual DeleteCidrCollectionResponse DeleteCidrCollection(DeleteCidrCollectionRequest request);
    public virtual Task`1<DeleteCidrCollectionResponse> DeleteCidrCollectionAsync(DeleteCidrCollectionRequest request, CancellationToken cancellationToken);
    internal virtual DeleteHealthCheckResponse DeleteHealthCheck(DeleteHealthCheckRequest request);
    public virtual Task`1<DeleteHealthCheckResponse> DeleteHealthCheckAsync(DeleteHealthCheckRequest request, CancellationToken cancellationToken);
    internal virtual DeleteHostedZoneResponse DeleteHostedZone(DeleteHostedZoneRequest request);
    public virtual Task`1<DeleteHostedZoneResponse> DeleteHostedZoneAsync(DeleteHostedZoneRequest request, CancellationToken cancellationToken);
    internal virtual DeleteKeySigningKeyResponse DeleteKeySigningKey(DeleteKeySigningKeyRequest request);
    public virtual Task`1<DeleteKeySigningKeyResponse> DeleteKeySigningKeyAsync(DeleteKeySigningKeyRequest request, CancellationToken cancellationToken);
    internal virtual DeleteQueryLoggingConfigResponse DeleteQueryLoggingConfig(DeleteQueryLoggingConfigRequest request);
    public virtual Task`1<DeleteQueryLoggingConfigResponse> DeleteQueryLoggingConfigAsync(DeleteQueryLoggingConfigRequest request, CancellationToken cancellationToken);
    internal virtual DeleteReusableDelegationSetResponse DeleteReusableDelegationSet(DeleteReusableDelegationSetRequest request);
    public virtual Task`1<DeleteReusableDelegationSetResponse> DeleteReusableDelegationSetAsync(DeleteReusableDelegationSetRequest request, CancellationToken cancellationToken);
    internal virtual DeleteTrafficPolicyResponse DeleteTrafficPolicy(DeleteTrafficPolicyRequest request);
    public virtual Task`1<DeleteTrafficPolicyResponse> DeleteTrafficPolicyAsync(DeleteTrafficPolicyRequest request, CancellationToken cancellationToken);
    internal virtual DeleteTrafficPolicyInstanceResponse DeleteTrafficPolicyInstance(DeleteTrafficPolicyInstanceRequest request);
    public virtual Task`1<DeleteTrafficPolicyInstanceResponse> DeleteTrafficPolicyInstanceAsync(DeleteTrafficPolicyInstanceRequest request, CancellationToken cancellationToken);
    internal virtual DeleteVPCAssociationAuthorizationResponse DeleteVPCAssociationAuthorization(DeleteVPCAssociationAuthorizationRequest request);
    public virtual Task`1<DeleteVPCAssociationAuthorizationResponse> DeleteVPCAssociationAuthorizationAsync(DeleteVPCAssociationAuthorizationRequest request, CancellationToken cancellationToken);
    internal virtual DisableHostedZoneDNSSECResponse DisableHostedZoneDNSSEC(DisableHostedZoneDNSSECRequest request);
    public virtual Task`1<DisableHostedZoneDNSSECResponse> DisableHostedZoneDNSSECAsync(DisableHostedZoneDNSSECRequest request, CancellationToken cancellationToken);
    internal virtual DisassociateVPCFromHostedZoneResponse DisassociateVPCFromHostedZone(DisassociateVPCFromHostedZoneRequest request);
    public virtual Task`1<DisassociateVPCFromHostedZoneResponse> DisassociateVPCFromHostedZoneAsync(DisassociateVPCFromHostedZoneRequest request, CancellationToken cancellationToken);
    internal virtual EnableHostedZoneDNSSECResponse EnableHostedZoneDNSSEC(EnableHostedZoneDNSSECRequest request);
    public virtual Task`1<EnableHostedZoneDNSSECResponse> EnableHostedZoneDNSSECAsync(EnableHostedZoneDNSSECRequest request, CancellationToken cancellationToken);
    internal virtual GetAccountLimitResponse GetAccountLimit(GetAccountLimitRequest request);
    public virtual Task`1<GetAccountLimitResponse> GetAccountLimitAsync(GetAccountLimitRequest request, CancellationToken cancellationToken);
    internal virtual GetChangeResponse GetChange(GetChangeRequest request);
    public virtual Task`1<GetChangeResponse> GetChangeAsync(GetChangeRequest request, CancellationToken cancellationToken);
    internal virtual GetCheckerIpRangesResponse GetCheckerIpRanges(GetCheckerIpRangesRequest request);
    public virtual Task`1<GetCheckerIpRangesResponse> GetCheckerIpRangesAsync(GetCheckerIpRangesRequest request, CancellationToken cancellationToken);
    internal virtual GetDNSSECResponse GetDNSSEC(GetDNSSECRequest request);
    public virtual Task`1<GetDNSSECResponse> GetDNSSECAsync(GetDNSSECRequest request, CancellationToken cancellationToken);
    internal virtual GetGeoLocationResponse GetGeoLocation(GetGeoLocationRequest request);
    public virtual Task`1<GetGeoLocationResponse> GetGeoLocationAsync(GetGeoLocationRequest request, CancellationToken cancellationToken);
    internal virtual GetHealthCheckResponse GetHealthCheck(GetHealthCheckRequest request);
    public virtual Task`1<GetHealthCheckResponse> GetHealthCheckAsync(GetHealthCheckRequest request, CancellationToken cancellationToken);
    internal virtual GetHealthCheckCountResponse GetHealthCheckCount(GetHealthCheckCountRequest request);
    public virtual Task`1<GetHealthCheckCountResponse> GetHealthCheckCountAsync(GetHealthCheckCountRequest request, CancellationToken cancellationToken);
    internal virtual GetHealthCheckLastFailureReasonResponse GetHealthCheckLastFailureReason(GetHealthCheckLastFailureReasonRequest request);
    public virtual Task`1<GetHealthCheckLastFailureReasonResponse> GetHealthCheckLastFailureReasonAsync(GetHealthCheckLastFailureReasonRequest request, CancellationToken cancellationToken);
    internal virtual GetHealthCheckStatusResponse GetHealthCheckStatus(GetHealthCheckStatusRequest request);
    public virtual Task`1<GetHealthCheckStatusResponse> GetHealthCheckStatusAsync(GetHealthCheckStatusRequest request, CancellationToken cancellationToken);
    internal virtual GetHostedZoneResponse GetHostedZone(GetHostedZoneRequest request);
    public virtual Task`1<GetHostedZoneResponse> GetHostedZoneAsync(GetHostedZoneRequest request, CancellationToken cancellationToken);
    internal virtual GetHostedZoneCountResponse GetHostedZoneCount();
    internal virtual GetHostedZoneCountResponse GetHostedZoneCount(GetHostedZoneCountRequest request);
    public virtual Task`1<GetHostedZoneCountResponse> GetHostedZoneCountAsync(CancellationToken cancellationToken);
    public virtual Task`1<GetHostedZoneCountResponse> GetHostedZoneCountAsync(GetHostedZoneCountRequest request, CancellationToken cancellationToken);
    internal virtual GetHostedZoneLimitResponse GetHostedZoneLimit(GetHostedZoneLimitRequest request);
    public virtual Task`1<GetHostedZoneLimitResponse> GetHostedZoneLimitAsync(GetHostedZoneLimitRequest request, CancellationToken cancellationToken);
    internal virtual GetQueryLoggingConfigResponse GetQueryLoggingConfig(GetQueryLoggingConfigRequest request);
    public virtual Task`1<GetQueryLoggingConfigResponse> GetQueryLoggingConfigAsync(GetQueryLoggingConfigRequest request, CancellationToken cancellationToken);
    internal virtual GetReusableDelegationSetResponse GetReusableDelegationSet(GetReusableDelegationSetRequest request);
    public virtual Task`1<GetReusableDelegationSetResponse> GetReusableDelegationSetAsync(GetReusableDelegationSetRequest request, CancellationToken cancellationToken);
    internal virtual GetReusableDelegationSetLimitResponse GetReusableDelegationSetLimit(GetReusableDelegationSetLimitRequest request);
    public virtual Task`1<GetReusableDelegationSetLimitResponse> GetReusableDelegationSetLimitAsync(GetReusableDelegationSetLimitRequest request, CancellationToken cancellationToken);
    internal virtual GetTrafficPolicyResponse GetTrafficPolicy(GetTrafficPolicyRequest request);
    public virtual Task`1<GetTrafficPolicyResponse> GetTrafficPolicyAsync(GetTrafficPolicyRequest request, CancellationToken cancellationToken);
    internal virtual GetTrafficPolicyInstanceResponse GetTrafficPolicyInstance(GetTrafficPolicyInstanceRequest request);
    public virtual Task`1<GetTrafficPolicyInstanceResponse> GetTrafficPolicyInstanceAsync(GetTrafficPolicyInstanceRequest request, CancellationToken cancellationToken);
    internal virtual GetTrafficPolicyInstanceCountResponse GetTrafficPolicyInstanceCount(GetTrafficPolicyInstanceCountRequest request);
    public virtual Task`1<GetTrafficPolicyInstanceCountResponse> GetTrafficPolicyInstanceCountAsync(GetTrafficPolicyInstanceCountRequest request, CancellationToken cancellationToken);
    internal virtual ListCidrBlocksResponse ListCidrBlocks(ListCidrBlocksRequest request);
    public virtual Task`1<ListCidrBlocksResponse> ListCidrBlocksAsync(ListCidrBlocksRequest request, CancellationToken cancellationToken);
    internal virtual ListCidrCollectionsResponse ListCidrCollections(ListCidrCollectionsRequest request);
    public virtual Task`1<ListCidrCollectionsResponse> ListCidrCollectionsAsync(ListCidrCollectionsRequest request, CancellationToken cancellationToken);
    internal virtual ListCidrLocationsResponse ListCidrLocations(ListCidrLocationsRequest request);
    public virtual Task`1<ListCidrLocationsResponse> ListCidrLocationsAsync(ListCidrLocationsRequest request, CancellationToken cancellationToken);
    internal virtual ListGeoLocationsResponse ListGeoLocations();
    internal virtual ListGeoLocationsResponse ListGeoLocations(ListGeoLocationsRequest request);
    public virtual Task`1<ListGeoLocationsResponse> ListGeoLocationsAsync(CancellationToken cancellationToken);
    public virtual Task`1<ListGeoLocationsResponse> ListGeoLocationsAsync(ListGeoLocationsRequest request, CancellationToken cancellationToken);
    internal virtual ListHealthChecksResponse ListHealthChecks();
    internal virtual ListHealthChecksResponse ListHealthChecks(ListHealthChecksRequest request);
    public virtual Task`1<ListHealthChecksResponse> ListHealthChecksAsync(CancellationToken cancellationToken);
    public virtual Task`1<ListHealthChecksResponse> ListHealthChecksAsync(ListHealthChecksRequest request, CancellationToken cancellationToken);
    internal virtual ListHostedZonesResponse ListHostedZones();
    internal virtual ListHostedZonesResponse ListHostedZones(ListHostedZonesRequest request);
    public virtual Task`1<ListHostedZonesResponse> ListHostedZonesAsync(CancellationToken cancellationToken);
    public virtual Task`1<ListHostedZonesResponse> ListHostedZonesAsync(ListHostedZonesRequest request, CancellationToken cancellationToken);
    internal virtual ListHostedZonesByNameResponse ListHostedZonesByName(ListHostedZonesByNameRequest request);
    public virtual Task`1<ListHostedZonesByNameResponse> ListHostedZonesByNameAsync(ListHostedZonesByNameRequest request, CancellationToken cancellationToken);
    internal virtual ListHostedZonesByVPCResponse ListHostedZonesByVPC(ListHostedZonesByVPCRequest request);
    public virtual Task`1<ListHostedZonesByVPCResponse> ListHostedZonesByVPCAsync(ListHostedZonesByVPCRequest request, CancellationToken cancellationToken);
    internal virtual ListQueryLoggingConfigsResponse ListQueryLoggingConfigs(ListQueryLoggingConfigsRequest request);
    public virtual Task`1<ListQueryLoggingConfigsResponse> ListQueryLoggingConfigsAsync(ListQueryLoggingConfigsRequest request, CancellationToken cancellationToken);
    internal virtual ListResourceRecordSetsResponse ListResourceRecordSets(ListResourceRecordSetsRequest request);
    public virtual Task`1<ListResourceRecordSetsResponse> ListResourceRecordSetsAsync(ListResourceRecordSetsRequest request, CancellationToken cancellationToken);
    internal virtual ListReusableDelegationSetsResponse ListReusableDelegationSets();
    internal virtual ListReusableDelegationSetsResponse ListReusableDelegationSets(ListReusableDelegationSetsRequest request);
    public virtual Task`1<ListReusableDelegationSetsResponse> ListReusableDelegationSetsAsync(CancellationToken cancellationToken);
    public virtual Task`1<ListReusableDelegationSetsResponse> ListReusableDelegationSetsAsync(ListReusableDelegationSetsRequest request, CancellationToken cancellationToken);
    internal virtual ListTagsForResourceResponse ListTagsForResource(ListTagsForResourceRequest request);
    public virtual Task`1<ListTagsForResourceResponse> ListTagsForResourceAsync(ListTagsForResourceRequest request, CancellationToken cancellationToken);
    internal virtual ListTagsForResourcesResponse ListTagsForResources(ListTagsForResourcesRequest request);
    public virtual Task`1<ListTagsForResourcesResponse> ListTagsForResourcesAsync(ListTagsForResourcesRequest request, CancellationToken cancellationToken);
    internal virtual ListTrafficPoliciesResponse ListTrafficPolicies(ListTrafficPoliciesRequest request);
    public virtual Task`1<ListTrafficPoliciesResponse> ListTrafficPoliciesAsync(ListTrafficPoliciesRequest request, CancellationToken cancellationToken);
    internal virtual ListTrafficPolicyInstancesResponse ListTrafficPolicyInstances(ListTrafficPolicyInstancesRequest request);
    public virtual Task`1<ListTrafficPolicyInstancesResponse> ListTrafficPolicyInstancesAsync(ListTrafficPolicyInstancesRequest request, CancellationToken cancellationToken);
    internal virtual ListTrafficPolicyInstancesByHostedZoneResponse ListTrafficPolicyInstancesByHostedZone(ListTrafficPolicyInstancesByHostedZoneRequest request);
    public virtual Task`1<ListTrafficPolicyInstancesByHostedZoneResponse> ListTrafficPolicyInstancesByHostedZoneAsync(ListTrafficPolicyInstancesByHostedZoneRequest request, CancellationToken cancellationToken);
    internal virtual ListTrafficPolicyInstancesByPolicyResponse ListTrafficPolicyInstancesByPolicy(ListTrafficPolicyInstancesByPolicyRequest request);
    public virtual Task`1<ListTrafficPolicyInstancesByPolicyResponse> ListTrafficPolicyInstancesByPolicyAsync(ListTrafficPolicyInstancesByPolicyRequest request, CancellationToken cancellationToken);
    internal virtual ListTrafficPolicyVersionsResponse ListTrafficPolicyVersions(ListTrafficPolicyVersionsRequest request);
    public virtual Task`1<ListTrafficPolicyVersionsResponse> ListTrafficPolicyVersionsAsync(ListTrafficPolicyVersionsRequest request, CancellationToken cancellationToken);
    internal virtual ListVPCAssociationAuthorizationsResponse ListVPCAssociationAuthorizations(ListVPCAssociationAuthorizationsRequest request);
    public virtual Task`1<ListVPCAssociationAuthorizationsResponse> ListVPCAssociationAuthorizationsAsync(ListVPCAssociationAuthorizationsRequest request, CancellationToken cancellationToken);
    internal virtual TestDNSAnswerResponse TestDNSAnswer(TestDNSAnswerRequest request);
    public virtual Task`1<TestDNSAnswerResponse> TestDNSAnswerAsync(TestDNSAnswerRequest request, CancellationToken cancellationToken);
    internal virtual UpdateHealthCheckResponse UpdateHealthCheck(UpdateHealthCheckRequest request);
    public virtual Task`1<UpdateHealthCheckResponse> UpdateHealthCheckAsync(UpdateHealthCheckRequest request, CancellationToken cancellationToken);
    internal virtual UpdateHostedZoneCommentResponse UpdateHostedZoneComment(UpdateHostedZoneCommentRequest request);
    public virtual Task`1<UpdateHostedZoneCommentResponse> UpdateHostedZoneCommentAsync(UpdateHostedZoneCommentRequest request, CancellationToken cancellationToken);
    internal virtual UpdateTrafficPolicyCommentResponse UpdateTrafficPolicyComment(UpdateTrafficPolicyCommentRequest request);
    public virtual Task`1<UpdateTrafficPolicyCommentResponse> UpdateTrafficPolicyCommentAsync(UpdateTrafficPolicyCommentRequest request, CancellationToken cancellationToken);
    internal virtual UpdateTrafficPolicyInstanceResponse UpdateTrafficPolicyInstance(UpdateTrafficPolicyInstanceRequest request);
    public virtual Task`1<UpdateTrafficPolicyInstanceResponse> UpdateTrafficPolicyInstanceAsync(UpdateTrafficPolicyInstanceRequest request, CancellationToken cancellationToken);
    public sealed virtual Endpoint DetermineServiceOperationEndpoint(AmazonWebServiceRequest request);
    private sealed virtual override IClientConfig Amazon.Runtime.IAmazonService.get_Config();
}
[AWSSignerTypeAttribute("v4")]
public class Amazon.Route53.AmazonRoute53Config : ClientConfig {
    private static string UserAgentString;
    private static AmazonRoute53EndpointResolver EndpointResolver;
    private string _userAgent;
    public static string ServiceId { get; }
    public string RegionEndpointServiceName { get; }
    public string ServiceVersion { get; }
    public string UserAgent { get; }
    private static AmazonRoute53Config();
    public static string get_ServiceId();
    public virtual string get_RegionEndpointServiceName();
    public virtual string get_ServiceVersion();
    public virtual string get_UserAgent();
    public virtual Endpoint DetermineServiceOperationEndpoint(ServiceOperationEndpointParameters parameters);
}
public static class Amazon.Route53.AmazonRoute53DefaultConfiguration : object {
    [CompilerGeneratedAttribute]
private static IDefaultConfiguration <Standard>k__BackingField;
    [CompilerGeneratedAttribute]
private static IDefaultConfiguration <InRegion>k__BackingField;
    [CompilerGeneratedAttribute]
private static IDefaultConfiguration <CrossRegion>k__BackingField;
    [CompilerGeneratedAttribute]
private static IDefaultConfiguration <Mobile>k__BackingField;
    [CompilerGeneratedAttribute]
private static IDefaultConfiguration <Auto>k__BackingField;
    public static IDefaultConfiguration Standard { get; }
    public static IDefaultConfiguration InRegion { get; }
    public static IDefaultConfiguration CrossRegion { get; }
    public static IDefaultConfiguration Mobile { get; }
    public static IDefaultConfiguration Auto { get; }
    private static AmazonRoute53DefaultConfiguration();
    public static ReadOnlyCollection`1<IDefaultConfiguration> GetAllConfigurations();
    [CompilerGeneratedAttribute]
public static IDefaultConfiguration get_Standard();
    [CompilerGeneratedAttribute]
public static IDefaultConfiguration get_InRegion();
    [CompilerGeneratedAttribute]
public static IDefaultConfiguration get_CrossRegion();
    [CompilerGeneratedAttribute]
public static IDefaultConfiguration get_Mobile();
    [CompilerGeneratedAttribute]
public static IDefaultConfiguration get_Auto();
}
public class Amazon.Route53.AmazonRoute53Exception : AmazonServiceException {
    public AmazonRoute53Exception(string message);
    public AmazonRoute53Exception(string message, Exception innerException);
    public AmazonRoute53Exception(Exception innerException);
    public AmazonRoute53Exception(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public AmazonRoute53Exception(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Route53.AmazonRoute53Request : AmazonWebServiceRequest {
}
public class Amazon.Route53.ChangeAction : ConstantClass {
    public static ChangeAction CREATE;
    public static ChangeAction DELETE;
    public static ChangeAction UPSERT;
    public ChangeAction(string value);
    private static ChangeAction();
    public static ChangeAction FindValue(string value);
    public static ChangeAction op_Implicit(string value);
}
public class Amazon.Route53.ChangeStatus : ConstantClass {
    public static ChangeStatus INSYNC;
    public static ChangeStatus PENDING;
    public ChangeStatus(string value);
    private static ChangeStatus();
    public static ChangeStatus FindValue(string value);
    public static ChangeStatus op_Implicit(string value);
}
public class Amazon.Route53.CidrCollectionChangeAction : ConstantClass {
    public static CidrCollectionChangeAction DELETE_IF_EXISTS;
    public static CidrCollectionChangeAction PUT;
    public CidrCollectionChangeAction(string value);
    private static CidrCollectionChangeAction();
    public static CidrCollectionChangeAction FindValue(string value);
    public static CidrCollectionChangeAction op_Implicit(string value);
}
public class Amazon.Route53.CloudWatchRegion : ConstantClass {
    public static CloudWatchRegion AfSouth1;
    public static CloudWatchRegion ApEast1;
    public static CloudWatchRegion ApNortheast1;
    public static CloudWatchRegion ApNortheast2;
    public static CloudWatchRegion ApNortheast3;
    public static CloudWatchRegion ApSouth1;
    public static CloudWatchRegion ApSouth2;
    public static CloudWatchRegion ApSoutheast1;
    public static CloudWatchRegion ApSoutheast2;
    public static CloudWatchRegion ApSoutheast3;
    public static CloudWatchRegion ApSoutheast4;
    public static CloudWatchRegion CaCentral1;
    public static CloudWatchRegion CaWest1;
    public static CloudWatchRegion CnNorth1;
    public static CloudWatchRegion CnNorthwest1;
    public static CloudWatchRegion EuCentral1;
    public static CloudWatchRegion EuCentral2;
    public static CloudWatchRegion EuNorth1;
    public static CloudWatchRegion EuSouth1;
    public static CloudWatchRegion EuSouth2;
    public static CloudWatchRegion EuWest1;
    public static CloudWatchRegion EuWest2;
    public static CloudWatchRegion EuWest3;
    public static CloudWatchRegion IlCentral1;
    public static CloudWatchRegion MeCentral1;
    public static CloudWatchRegion MeSouth1;
    public static CloudWatchRegion SaEast1;
    public static CloudWatchRegion UsEast1;
    public static CloudWatchRegion UsEast2;
    public static CloudWatchRegion UsGovEast1;
    public static CloudWatchRegion UsGovWest1;
    public static CloudWatchRegion UsIsobEast1;
    public static CloudWatchRegion UsIsoEast1;
    public static CloudWatchRegion UsIsoWest1;
    public static CloudWatchRegion UsWest1;
    public static CloudWatchRegion UsWest2;
    public CloudWatchRegion(string value);
    private static CloudWatchRegion();
    public static CloudWatchRegion FindValue(string value);
    public static CloudWatchRegion op_Implicit(string value);
}
public class Amazon.Route53.ComparisonOperator : ConstantClass {
    public static ComparisonOperator GreaterThanOrEqualToThreshold;
    public static ComparisonOperator GreaterThanThreshold;
    public static ComparisonOperator LessThanOrEqualToThreshold;
    public static ComparisonOperator LessThanThreshold;
    public ComparisonOperator(string value);
    private static ComparisonOperator();
    public static ComparisonOperator FindValue(string value);
    public static ComparisonOperator op_Implicit(string value);
}
public class Amazon.Route53.Endpoints.Route53EndpointParameters : EndpointParameters {
    public string Region { get; public set; }
    public Nullable`1<bool> UseDualStack { get; public set; }
    public Nullable`1<bool> UseFIPS { get; public set; }
    public string Endpoint { get; public set; }
    public string get_Region();
    public void set_Region(string value);
    public Nullable`1<bool> get_UseDualStack();
    public void set_UseDualStack(Nullable`1<bool> value);
    public Nullable`1<bool> get_UseFIPS();
    public void set_UseFIPS(Nullable`1<bool> value);
    public string get_Endpoint();
    public void set_Endpoint(string value);
}
public class Amazon.Route53.HealthCheckRegion : ConstantClass {
    public static HealthCheckRegion ApNortheast1;
    public static HealthCheckRegion ApSoutheast1;
    public static HealthCheckRegion ApSoutheast2;
    public static HealthCheckRegion EuWest1;
    public static HealthCheckRegion SaEast1;
    public static HealthCheckRegion UsEast1;
    public static HealthCheckRegion UsWest1;
    public static HealthCheckRegion UsWest2;
    public HealthCheckRegion(string value);
    private static HealthCheckRegion();
    public static HealthCheckRegion FindValue(string value);
    public static HealthCheckRegion op_Implicit(string value);
}
public class Amazon.Route53.HealthCheckType : ConstantClass {
    public static HealthCheckType CALCULATED;
    public static HealthCheckType CLOUDWATCH_METRIC;
    public static HealthCheckType HTTP;
    public static HealthCheckType HTTP_STR_MATCH;
    public static HealthCheckType HTTPS;
    public static HealthCheckType HTTPS_STR_MATCH;
    public static HealthCheckType RECOVERY_CONTROL;
    public static HealthCheckType TCP;
    public HealthCheckType(string value);
    private static HealthCheckType();
    public static HealthCheckType FindValue(string value);
    public static HealthCheckType op_Implicit(string value);
}
public class Amazon.Route53.HostedZoneLimitType : ConstantClass {
    public static HostedZoneLimitType MAX_RRSETS_BY_ZONE;
    public static HostedZoneLimitType MAX_VPCS_ASSOCIATED_BY_ZONE;
    public HostedZoneLimitType(string value);
    private static HostedZoneLimitType();
    public static HostedZoneLimitType FindValue(string value);
    public static HostedZoneLimitType op_Implicit(string value);
}
public class Amazon.Route53.HostedZoneType : ConstantClass {
    public static HostedZoneType PrivateHostedZone;
    public HostedZoneType(string value);
    private static HostedZoneType();
    public static HostedZoneType FindValue(string value);
    public static HostedZoneType op_Implicit(string value);
}
public interface Amazon.Route53.IAmazonRoute53 {
    public IRoute53PaginatorFactory Paginators { get; }
    public abstract virtual IRoute53PaginatorFactory get_Paginators();
    public abstract virtual Task`1<ActivateKeySigningKeyResponse> ActivateKeySigningKeyAsync(ActivateKeySigningKeyRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<AssociateVPCWithHostedZoneResponse> AssociateVPCWithHostedZoneAsync(AssociateVPCWithHostedZoneRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ChangeCidrCollectionResponse> ChangeCidrCollectionAsync(ChangeCidrCollectionRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ChangeResourceRecordSetsResponse> ChangeResourceRecordSetsAsync(ChangeResourceRecordSetsRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ChangeTagsForResourceResponse> ChangeTagsForResourceAsync(ChangeTagsForResourceRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<CreateCidrCollectionResponse> CreateCidrCollectionAsync(CreateCidrCollectionRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<CreateHealthCheckResponse> CreateHealthCheckAsync(CreateHealthCheckRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<CreateHostedZoneResponse> CreateHostedZoneAsync(CreateHostedZoneRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<CreateKeySigningKeyResponse> CreateKeySigningKeyAsync(CreateKeySigningKeyRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<CreateQueryLoggingConfigResponse> CreateQueryLoggingConfigAsync(CreateQueryLoggingConfigRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<CreateReusableDelegationSetResponse> CreateReusableDelegationSetAsync(CreateReusableDelegationSetRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<CreateTrafficPolicyResponse> CreateTrafficPolicyAsync(CreateTrafficPolicyRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<CreateTrafficPolicyInstanceResponse> CreateTrafficPolicyInstanceAsync(CreateTrafficPolicyInstanceRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<CreateTrafficPolicyVersionResponse> CreateTrafficPolicyVersionAsync(CreateTrafficPolicyVersionRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<CreateVPCAssociationAuthorizationResponse> CreateVPCAssociationAuthorizationAsync(CreateVPCAssociationAuthorizationRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeactivateKeySigningKeyResponse> DeactivateKeySigningKeyAsync(DeactivateKeySigningKeyRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeleteCidrCollectionResponse> DeleteCidrCollectionAsync(DeleteCidrCollectionRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeleteHealthCheckResponse> DeleteHealthCheckAsync(DeleteHealthCheckRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeleteHostedZoneResponse> DeleteHostedZoneAsync(DeleteHostedZoneRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeleteKeySigningKeyResponse> DeleteKeySigningKeyAsync(DeleteKeySigningKeyRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeleteQueryLoggingConfigResponse> DeleteQueryLoggingConfigAsync(DeleteQueryLoggingConfigRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeleteReusableDelegationSetResponse> DeleteReusableDelegationSetAsync(DeleteReusableDelegationSetRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeleteTrafficPolicyResponse> DeleteTrafficPolicyAsync(DeleteTrafficPolicyRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeleteTrafficPolicyInstanceResponse> DeleteTrafficPolicyInstanceAsync(DeleteTrafficPolicyInstanceRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeleteVPCAssociationAuthorizationResponse> DeleteVPCAssociationAuthorizationAsync(DeleteVPCAssociationAuthorizationRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DisableHostedZoneDNSSECResponse> DisableHostedZoneDNSSECAsync(DisableHostedZoneDNSSECRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DisassociateVPCFromHostedZoneResponse> DisassociateVPCFromHostedZoneAsync(DisassociateVPCFromHostedZoneRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<EnableHostedZoneDNSSECResponse> EnableHostedZoneDNSSECAsync(EnableHostedZoneDNSSECRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<GetAccountLimitResponse> GetAccountLimitAsync(GetAccountLimitRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<GetChangeResponse> GetChangeAsync(GetChangeRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<GetCheckerIpRangesResponse> GetCheckerIpRangesAsync(GetCheckerIpRangesRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<GetDNSSECResponse> GetDNSSECAsync(GetDNSSECRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<GetGeoLocationResponse> GetGeoLocationAsync(GetGeoLocationRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<GetHealthCheckResponse> GetHealthCheckAsync(GetHealthCheckRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<GetHealthCheckCountResponse> GetHealthCheckCountAsync(GetHealthCheckCountRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<GetHealthCheckLastFailureReasonResponse> GetHealthCheckLastFailureReasonAsync(GetHealthCheckLastFailureReasonRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<GetHealthCheckStatusResponse> GetHealthCheckStatusAsync(GetHealthCheckStatusRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<GetHostedZoneResponse> GetHostedZoneAsync(GetHostedZoneRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<GetHostedZoneCountResponse> GetHostedZoneCountAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<GetHostedZoneCountResponse> GetHostedZoneCountAsync(GetHostedZoneCountRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<GetHostedZoneLimitResponse> GetHostedZoneLimitAsync(GetHostedZoneLimitRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<GetQueryLoggingConfigResponse> GetQueryLoggingConfigAsync(GetQueryLoggingConfigRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<GetReusableDelegationSetResponse> GetReusableDelegationSetAsync(GetReusableDelegationSetRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<GetReusableDelegationSetLimitResponse> GetReusableDelegationSetLimitAsync(GetReusableDelegationSetLimitRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<GetTrafficPolicyResponse> GetTrafficPolicyAsync(GetTrafficPolicyRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<GetTrafficPolicyInstanceResponse> GetTrafficPolicyInstanceAsync(GetTrafficPolicyInstanceRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<GetTrafficPolicyInstanceCountResponse> GetTrafficPolicyInstanceCountAsync(GetTrafficPolicyInstanceCountRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ListCidrBlocksResponse> ListCidrBlocksAsync(ListCidrBlocksRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ListCidrCollectionsResponse> ListCidrCollectionsAsync(ListCidrCollectionsRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ListCidrLocationsResponse> ListCidrLocationsAsync(ListCidrLocationsRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ListGeoLocationsResponse> ListGeoLocationsAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<ListGeoLocationsResponse> ListGeoLocationsAsync(ListGeoLocationsRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ListHealthChecksResponse> ListHealthChecksAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<ListHealthChecksResponse> ListHealthChecksAsync(ListHealthChecksRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ListHostedZonesResponse> ListHostedZonesAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<ListHostedZonesResponse> ListHostedZonesAsync(ListHostedZonesRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ListHostedZonesByNameResponse> ListHostedZonesByNameAsync(ListHostedZonesByNameRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ListHostedZonesByVPCResponse> ListHostedZonesByVPCAsync(ListHostedZonesByVPCRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ListQueryLoggingConfigsResponse> ListQueryLoggingConfigsAsync(ListQueryLoggingConfigsRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ListResourceRecordSetsResponse> ListResourceRecordSetsAsync(ListResourceRecordSetsRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ListReusableDelegationSetsResponse> ListReusableDelegationSetsAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<ListReusableDelegationSetsResponse> ListReusableDelegationSetsAsync(ListReusableDelegationSetsRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ListTagsForResourceResponse> ListTagsForResourceAsync(ListTagsForResourceRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ListTagsForResourcesResponse> ListTagsForResourcesAsync(ListTagsForResourcesRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ListTrafficPoliciesResponse> ListTrafficPoliciesAsync(ListTrafficPoliciesRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ListTrafficPolicyInstancesResponse> ListTrafficPolicyInstancesAsync(ListTrafficPolicyInstancesRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ListTrafficPolicyInstancesByHostedZoneResponse> ListTrafficPolicyInstancesByHostedZoneAsync(ListTrafficPolicyInstancesByHostedZoneRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ListTrafficPolicyInstancesByPolicyResponse> ListTrafficPolicyInstancesByPolicyAsync(ListTrafficPolicyInstancesByPolicyRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ListTrafficPolicyVersionsResponse> ListTrafficPolicyVersionsAsync(ListTrafficPolicyVersionsRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ListVPCAssociationAuthorizationsResponse> ListVPCAssociationAuthorizationsAsync(ListVPCAssociationAuthorizationsRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<TestDNSAnswerResponse> TestDNSAnswerAsync(TestDNSAnswerRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<UpdateHealthCheckResponse> UpdateHealthCheckAsync(UpdateHealthCheckRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<UpdateHostedZoneCommentResponse> UpdateHostedZoneCommentAsync(UpdateHostedZoneCommentRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<UpdateTrafficPolicyCommentResponse> UpdateTrafficPolicyCommentAsync(UpdateTrafficPolicyCommentRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<UpdateTrafficPolicyInstanceResponse> UpdateTrafficPolicyInstanceAsync(UpdateTrafficPolicyInstanceRequest request, CancellationToken cancellationToken);
    public abstract virtual Endpoint DetermineServiceOperationEndpoint(AmazonWebServiceRequest request);
    [DynamicDependencyAttribute("512", "Amazon.Route53.AmazonRoute53Config")]
private static override ClientConfig Amazon.Runtime.IAmazonService.CreateDefaultClientConfig();
    [UnconditionalSuppressMessageAttribute("AssemblyLoadTrimming", "IL2026:RequiresUnreferencedCode")]
private static override IAmazonService Amazon.Runtime.IAmazonService.CreateDefaultServiceClient(AWSCredentials awsCredentials, ClientConfig clientConfig);
}
public class Amazon.Route53.InsufficientDataHealthStatus : ConstantClass {
    public static InsufficientDataHealthStatus Healthy;
    public static InsufficientDataHealthStatus LastKnownStatus;
    public static InsufficientDataHealthStatus Unhealthy;
    public InsufficientDataHealthStatus(string value);
    private static InsufficientDataHealthStatus();
    public static InsufficientDataHealthStatus FindValue(string value);
    public static InsufficientDataHealthStatus op_Implicit(string value);
}
public class Amazon.Route53.Internal.AmazonRoute53EndpointProvider : object {
    public sealed virtual Endpoint ResolveEndpoint(EndpointParameters parameters);
}
public class Amazon.Route53.Internal.AmazonRoute53EndpointResolver : BaseEndpointResolver {
    protected virtual void ServiceSpecificHandler(IExecutionContext executionContext, EndpointParameters parameters);
    protected virtual EndpointParameters MapEndpointsParameters(IRequestContext requestContext);
}
public class Amazon.Route53.Internal.AmazonRoute53Metadata : object {
    public string ServiceId { get; }
    public IDictionary`2<string, string> OperationNameMapping { get; }
    public sealed virtual string get_ServiceId();
    public sealed virtual IDictionary`2<string, string> get_OperationNameMapping();
}
public class Amazon.Route53.Internal.AmazonRoute53PostMarshallHandler : PipelineHandler {
    private static HashSet`1<string> FixPathLookup;
    private static AmazonRoute53PostMarshallHandler();
    public virtual void InvokeSync(IExecutionContext executionContext);
    public virtual Task`1<T> InvokeAsync(IExecutionContext executionContext);
    protected virtual void PreInvoke(IExecutionContext executionContext);
    private static void ProcessRequestHandlers(IExecutionContext executionContext);
    private static void FixDuplicationInResourcePath(string resourcePath, IDictionary`2<string, string> pathResources);
}
public class Amazon.Route53.Internal.AmazonRoute53PreMarshallHandler : PipelineHandler {
    private static char slash;
    public virtual void InvokeSync(IExecutionContext executionContext);
    public virtual Task`1<T> InvokeAsync(IExecutionContext executionContext);
    protected virtual void PreInvoke(IExecutionContext executionContext);
    private static void ProcessRequestHandlers(IExecutionContext executionContext);
    private static string ModifyId(string id);
}
public class Amazon.Route53.Model.AccountLimit : object {
    private AccountLimitType _type;
    private Nullable`1<long> _value;
    [AWSPropertyAttribute]
public AccountLimitType Type { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<long> Value { get; public set; }
    public AccountLimitType get_Type();
    public void set_Type(AccountLimitType value);
    internal bool IsSetType();
    public Nullable`1<long> get_Value();
    public void set_Value(Nullable`1<long> value);
    internal bool IsSetValue();
}
public class Amazon.Route53.Model.ActivateKeySigningKeyRequest : AmazonRoute53Request {
    private string _hostedZoneId;
    private string _name;
    [AWSPropertyAttribute]
public string HostedZoneId { get; public set; }
    [AWSPropertyAttribute]
public string Name { get; public set; }
    public string get_HostedZoneId();
    public void set_HostedZoneId(string value);
    internal bool IsSetHostedZoneId();
    public string get_Name();
    public void set_Name(string value);
    internal bool IsSetName();
}
public class Amazon.Route53.Model.ActivateKeySigningKeyResponse : AmazonWebServiceResponse {
    private ChangeInfo _changeInfo;
    [AWSPropertyAttribute]
public ChangeInfo ChangeInfo { get; public set; }
    public ChangeInfo get_ChangeInfo();
    public void set_ChangeInfo(ChangeInfo value);
    internal bool IsSetChangeInfo();
}
public class Amazon.Route53.Model.AlarmIdentifier : object {
    private CloudWatchRegion _region;
    private string _name;
    [AWSPropertyAttribute]
public CloudWatchRegion Region { get; public set; }
    [AWSPropertyAttribute]
public string Name { get; public set; }
    public CloudWatchRegion get_Region();
    public void set_Region(CloudWatchRegion value);
    internal bool IsSetRegion();
    public string get_Name();
    public void set_Name(string value);
    internal bool IsSetName();
}
public class Amazon.Route53.Model.AliasTarget : object {
    private string _hostedZoneId;
    private string _dnsName;
    private Nullable`1<bool> _evaluateTargetHealth;
    [AWSPropertyAttribute]
public string HostedZoneId { get; public set; }
    [AWSPropertyAttribute]
public string DNSName { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<bool> EvaluateTargetHealth { get; public set; }
    public AliasTarget(string hostedZoneId, string dnsName);
    public string get_HostedZoneId();
    public void set_HostedZoneId(string value);
    internal bool IsSetHostedZoneId();
    public string get_DNSName();
    public void set_DNSName(string value);
    internal bool IsSetDNSName();
    public Nullable`1<bool> get_EvaluateTargetHealth();
    public void set_EvaluateTargetHealth(Nullable`1<bool> value);
    internal bool IsSetEvaluateTargetHealth();
}
public class Amazon.Route53.Model.AssociateVPCWithHostedZoneRequest : AmazonRoute53Request {
    private string _hostedZoneId;
    private VPC _vpc;
    private string _comment;
    [AWSPropertyAttribute]
public string HostedZoneId { get; public set; }
    [AWSPropertyAttribute]
public VPC VPC { get; public set; }
    public string Comment { get; public set; }
    public string get_HostedZoneId();
    public void set_HostedZoneId(string value);
    internal bool IsSetHostedZoneId();
    public VPC get_VPC();
    public void set_VPC(VPC value);
    internal bool IsSetVPC();
    public string get_Comment();
    public void set_Comment(string value);
    internal bool IsSetComment();
}
public class Amazon.Route53.Model.AssociateVPCWithHostedZoneResponse : AmazonWebServiceResponse {
    private ChangeInfo _changeInfo;
    [AWSPropertyAttribute]
public ChangeInfo ChangeInfo { get; public set; }
    public ChangeInfo get_ChangeInfo();
    public void set_ChangeInfo(ChangeInfo value);
    internal bool IsSetChangeInfo();
}
public class Amazon.Route53.Model.Change : object {
    private ChangeAction _action;
    private ResourceRecordSet _resourceRecordSet;
    [AWSPropertyAttribute]
public ChangeAction Action { get; public set; }
    [AWSPropertyAttribute]
public ResourceRecordSet ResourceRecordSet { get; public set; }
    public Change(ChangeAction action, ResourceRecordSet resourceRecordSet);
    public ChangeAction get_Action();
    public void set_Action(ChangeAction value);
    internal bool IsSetAction();
    public ResourceRecordSet get_ResourceRecordSet();
    public void set_ResourceRecordSet(ResourceRecordSet value);
    internal bool IsSetResourceRecordSet();
}
public class Amazon.Route53.Model.ChangeBatch : object {
    private string _comment;
    private List`1<Change> _changes;
    [AWSPropertyAttribute]
public string Comment { get; public set; }
    [AWSPropertyAttribute]
public List`1<Change> Changes { get; public set; }
    public ChangeBatch(List`1<Change> changes);
    public string get_Comment();
    public void set_Comment(string value);
    internal bool IsSetComment();
    public List`1<Change> get_Changes();
    public void set_Changes(List`1<Change> value);
    internal bool IsSetChanges();
}
public class Amazon.Route53.Model.ChangeCidrCollectionRequest : AmazonRoute53Request {
    private string _id;
    private Nullable`1<long> _collectionVersion;
    private List`1<CidrCollectionChange> _changes;
    [AWSPropertyAttribute]
public string Id { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<long> CollectionVersion { get; public set; }
    [AWSPropertyAttribute]
public List`1<CidrCollectionChange> Changes { get; public set; }
    public string get_Id();
    public void set_Id(string value);
    internal bool IsSetId();
    public Nullable`1<long> get_CollectionVersion();
    public void set_CollectionVersion(Nullable`1<long> value);
    internal bool IsSetCollectionVersion();
    public List`1<CidrCollectionChange> get_Changes();
    public void set_Changes(List`1<CidrCollectionChange> value);
    internal bool IsSetChanges();
}
public class Amazon.Route53.Model.ChangeCidrCollectionResponse : AmazonWebServiceResponse {
    private string _id;
    [AWSPropertyAttribute]
public string Id { get; public set; }
    public string get_Id();
    public void set_Id(string value);
    internal bool IsSetId();
}
public class Amazon.Route53.Model.ChangeInfo : object {
    private string _id;
    private ChangeStatus _status;
    private Nullable`1<DateTime> _submittedAt;
    private string _comment;
    [AWSPropertyAttribute]
public string Id { get; public set; }
    [AWSPropertyAttribute]
public ChangeStatus Status { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<DateTime> SubmittedAt { get; public set; }
    [AWSPropertyAttribute]
public string Comment { get; public set; }
    public ChangeInfo(string id, ChangeStatus status, Nullable`1<DateTime> submittedAt);
    public string get_Id();
    public void set_Id(string value);
    internal bool IsSetId();
    public ChangeStatus get_Status();
    public void set_Status(ChangeStatus value);
    internal bool IsSetStatus();
    public Nullable`1<DateTime> get_SubmittedAt();
    public void set_SubmittedAt(Nullable`1<DateTime> value);
    internal bool IsSetSubmittedAt();
    public string get_Comment();
    public void set_Comment(string value);
    internal bool IsSetComment();
}
public class Amazon.Route53.Model.ChangeResourceRecordSetsRequest : AmazonRoute53Request {
    private string _hostedZoneId;
    private ChangeBatch _changeBatch;
    [AWSPropertyAttribute]
public string HostedZoneId { get; public set; }
    [AWSPropertyAttribute]
public ChangeBatch ChangeBatch { get; public set; }
    public ChangeResourceRecordSetsRequest(string hostedZoneId, ChangeBatch changeBatch);
    public string get_HostedZoneId();
    public void set_HostedZoneId(string value);
    internal bool IsSetHostedZoneId();
    public ChangeBatch get_ChangeBatch();
    public void set_ChangeBatch(ChangeBatch value);
    internal bool IsSetChangeBatch();
}
public class Amazon.Route53.Model.ChangeResourceRecordSetsResponse : AmazonWebServiceResponse {
    private ChangeInfo _changeInfo;
    [AWSPropertyAttribute]
public ChangeInfo ChangeInfo { get; public set; }
    public ChangeInfo get_ChangeInfo();
    public void set_ChangeInfo(ChangeInfo value);
    internal bool IsSetChangeInfo();
}
public class Amazon.Route53.Model.ChangeTagsForResourceRequest : AmazonRoute53Request {
    private TagResourceType _resourceType;
    private string _resourceId;
    private List`1<Tag> _addTags;
    private List`1<string> _removeTagKeys;
    [AWSPropertyAttribute]
public TagResourceType ResourceType { get; public set; }
    [AWSPropertyAttribute]
public string ResourceId { get; public set; }
    [AWSPropertyAttribute]
public List`1<Tag> AddTags { get; public set; }
    [AWSPropertyAttribute]
public List`1<string> RemoveTagKeys { get; public set; }
    public TagResourceType get_ResourceType();
    public void set_ResourceType(TagResourceType value);
    internal bool IsSetResourceType();
    public string get_ResourceId();
    public void set_ResourceId(string value);
    internal bool IsSetResourceId();
    public List`1<Tag> get_AddTags();
    public void set_AddTags(List`1<Tag> value);
    internal bool IsSetAddTags();
    public List`1<string> get_RemoveTagKeys();
    public void set_RemoveTagKeys(List`1<string> value);
    internal bool IsSetRemoveTagKeys();
}
public class Amazon.Route53.Model.ChangeTagsForResourceResponse : AmazonWebServiceResponse {
}
public class Amazon.Route53.Model.CidrBlockInUseException : AmazonRoute53Exception {
    public CidrBlockInUseException(string message);
    public CidrBlockInUseException(string message, Exception innerException);
    public CidrBlockInUseException(Exception innerException);
    public CidrBlockInUseException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public CidrBlockInUseException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Route53.Model.CidrBlockSummary : object {
    private string _cidrBlock;
    private string _locationName;
    [AWSPropertyAttribute]
public string CidrBlock { get; public set; }
    [AWSPropertyAttribute]
public string LocationName { get; public set; }
    public string get_CidrBlock();
    public void set_CidrBlock(string value);
    internal bool IsSetCidrBlock();
    public string get_LocationName();
    public void set_LocationName(string value);
    internal bool IsSetLocationName();
}
public class Amazon.Route53.Model.CidrCollection : object {
    private string _arn;
    private string _id;
    private string _name;
    private Nullable`1<long> _version;
    [AWSPropertyAttribute]
public string Arn { get; public set; }
    public string Id { get; public set; }
    [AWSPropertyAttribute]
public string Name { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<long> Version { get; public set; }
    public string get_Arn();
    public void set_Arn(string value);
    internal bool IsSetArn();
    public string get_Id();
    public void set_Id(string value);
    internal bool IsSetId();
    public string get_Name();
    public void set_Name(string value);
    internal bool IsSetName();
    public Nullable`1<long> get_Version();
    public void set_Version(Nullable`1<long> value);
    internal bool IsSetVersion();
}
public class Amazon.Route53.Model.CidrCollectionAlreadyExistsException : AmazonRoute53Exception {
    public CidrCollectionAlreadyExistsException(string message);
    public CidrCollectionAlreadyExistsException(string message, Exception innerException);
    public CidrCollectionAlreadyExistsException(Exception innerException);
    public CidrCollectionAlreadyExistsException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public CidrCollectionAlreadyExistsException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Route53.Model.CidrCollectionChange : object {
    private string _locationName;
    private CidrCollectionChangeAction _action;
    private List`1<string> _cidrList;
    [AWSPropertyAttribute]
public string LocationName { get; public set; }
    [AWSPropertyAttribute]
public CidrCollectionChangeAction Action { get; public set; }
    [AWSPropertyAttribute]
public List`1<string> CidrList { get; public set; }
    public string get_LocationName();
    public void set_LocationName(string value);
    internal bool IsSetLocationName();
    public CidrCollectionChangeAction get_Action();
    public void set_Action(CidrCollectionChangeAction value);
    internal bool IsSetAction();
    public List`1<string> get_CidrList();
    public void set_CidrList(List`1<string> value);
    internal bool IsSetCidrList();
}
public class Amazon.Route53.Model.CidrCollectionInUseException : AmazonRoute53Exception {
    public CidrCollectionInUseException(string message);
    public CidrCollectionInUseException(string message, Exception innerException);
    public CidrCollectionInUseException(Exception innerException);
    public CidrCollectionInUseException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public CidrCollectionInUseException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Route53.Model.CidrCollectionVersionMismatchException : AmazonRoute53Exception {
    public CidrCollectionVersionMismatchException(string message);
    public CidrCollectionVersionMismatchException(string message, Exception innerException);
    public CidrCollectionVersionMismatchException(Exception innerException);
    public CidrCollectionVersionMismatchException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public CidrCollectionVersionMismatchException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Route53.Model.CidrRoutingConfig : object {
    private string _collectionId;
    private string _locationName;
    [AWSPropertyAttribute]
public string CollectionId { get; public set; }
    [AWSPropertyAttribute]
public string LocationName { get; public set; }
    public string get_CollectionId();
    public void set_CollectionId(string value);
    internal bool IsSetCollectionId();
    public string get_LocationName();
    public void set_LocationName(string value);
    internal bool IsSetLocationName();
}
public class Amazon.Route53.Model.CloudWatchAlarmConfiguration : object {
    private Nullable`1<int> _evaluationPeriods;
    private Nullable`1<double> _threshold;
    private ComparisonOperator _comparisonOperator;
    private Nullable`1<int> _period;
    private string _metricName;
    private string _awsNamespace;
    private Statistic _statistic;
    private List`1<Dimension> _dimensions;
    [AWSPropertyAttribute]
public Nullable`1<int> EvaluationPeriods { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<double> Threshold { get; public set; }
    [AWSPropertyAttribute]
public ComparisonOperator ComparisonOperator { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> Period { get; public set; }
    [AWSPropertyAttribute]
public string MetricName { get; public set; }
    [AWSPropertyAttribute]
public string Namespace { get; public set; }
    [AWSPropertyAttribute]
public Statistic Statistic { get; public set; }
    [AWSPropertyAttribute]
public List`1<Dimension> Dimensions { get; public set; }
    public Nullable`1<int> get_EvaluationPeriods();
    public void set_EvaluationPeriods(Nullable`1<int> value);
    internal bool IsSetEvaluationPeriods();
    public Nullable`1<double> get_Threshold();
    public void set_Threshold(Nullable`1<double> value);
    internal bool IsSetThreshold();
    public ComparisonOperator get_ComparisonOperator();
    public void set_ComparisonOperator(ComparisonOperator value);
    internal bool IsSetComparisonOperator();
    public Nullable`1<int> get_Period();
    public void set_Period(Nullable`1<int> value);
    internal bool IsSetPeriod();
    public string get_MetricName();
    public void set_MetricName(string value);
    internal bool IsSetMetricName();
    public string get_Namespace();
    public void set_Namespace(string value);
    internal bool IsSetNamespace();
    public Statistic get_Statistic();
    public void set_Statistic(Statistic value);
    internal bool IsSetStatistic();
    public List`1<Dimension> get_Dimensions();
    public void set_Dimensions(List`1<Dimension> value);
    internal bool IsSetDimensions();
}
public class Amazon.Route53.Model.CollectionSummary : object {
    private string _arn;
    private string _id;
    private string _name;
    private Nullable`1<long> _version;
    [AWSPropertyAttribute]
public string Arn { get; public set; }
    public string Id { get; public set; }
    [AWSPropertyAttribute]
public string Name { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<long> Version { get; public set; }
    public string get_Arn();
    public void set_Arn(string value);
    internal bool IsSetArn();
    public string get_Id();
    public void set_Id(string value);
    internal bool IsSetId();
    public string get_Name();
    public void set_Name(string value);
    internal bool IsSetName();
    public Nullable`1<long> get_Version();
    public void set_Version(Nullable`1<long> value);
    internal bool IsSetVersion();
}
public class Amazon.Route53.Model.ConcurrentModificationException : AmazonRoute53Exception {
    public ConcurrentModificationException(string message);
    public ConcurrentModificationException(string message, Exception innerException);
    public ConcurrentModificationException(Exception innerException);
    public ConcurrentModificationException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public ConcurrentModificationException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Route53.Model.ConflictingDomainExistsException : AmazonRoute53Exception {
    public ConflictingDomainExistsException(string message);
    public ConflictingDomainExistsException(string message, Exception innerException);
    public ConflictingDomainExistsException(Exception innerException);
    public ConflictingDomainExistsException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public ConflictingDomainExistsException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Route53.Model.ConflictingTypesException : AmazonRoute53Exception {
    public ConflictingTypesException(string message);
    public ConflictingTypesException(string message, Exception innerException);
    public ConflictingTypesException(Exception innerException);
    public ConflictingTypesException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public ConflictingTypesException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Route53.Model.Coordinates : object {
    private string _latitude;
    private string _longitude;
    [AWSPropertyAttribute]
public string Latitude { get; public set; }
    [AWSPropertyAttribute]
public string Longitude { get; public set; }
    public string get_Latitude();
    public void set_Latitude(string value);
    internal bool IsSetLatitude();
    public string get_Longitude();
    public void set_Longitude(string value);
    internal bool IsSetLongitude();
}
public class Amazon.Route53.Model.CreateCidrCollectionRequest : AmazonRoute53Request {
    private string _name;
    private string _callerReference;
    [AWSPropertyAttribute]
public string Name { get; public set; }
    [AWSPropertyAttribute]
public string CallerReference { get; public set; }
    public string get_Name();
    public void set_Name(string value);
    internal bool IsSetName();
    public string get_CallerReference();
    public void set_CallerReference(string value);
    internal bool IsSetCallerReference();
}
public class Amazon.Route53.Model.CreateCidrCollectionResponse : AmazonWebServiceResponse {
    private CidrCollection _collection;
    private string _location;
    public CidrCollection Collection { get; public set; }
    [AWSPropertyAttribute]
public string Location { get; public set; }
    public CidrCollection get_Collection();
    public void set_Collection(CidrCollection value);
    internal bool IsSetCollection();
    public string get_Location();
    public void set_Location(string value);
    internal bool IsSetLocation();
}
public class Amazon.Route53.Model.CreateHealthCheckRequest : AmazonRoute53Request {
    private string _callerReference;
    private HealthCheckConfig _healthCheckConfig;
    [AWSPropertyAttribute]
public string CallerReference { get; public set; }
    [AWSPropertyAttribute]
public HealthCheckConfig HealthCheckConfig { get; public set; }
    public string get_CallerReference();
    public void set_CallerReference(string value);
    internal bool IsSetCallerReference();
    public HealthCheckConfig get_HealthCheckConfig();
    public void set_HealthCheckConfig(HealthCheckConfig value);
    internal bool IsSetHealthCheckConfig();
}
public class Amazon.Route53.Model.CreateHealthCheckResponse : AmazonWebServiceResponse {
    private HealthCheck _healthCheck;
    private string _location;
    [AWSPropertyAttribute]
public HealthCheck HealthCheck { get; public set; }
    [AWSPropertyAttribute]
public string Location { get; public set; }
    public HealthCheck get_HealthCheck();
    public void set_HealthCheck(HealthCheck value);
    internal bool IsSetHealthCheck();
    public string get_Location();
    public void set_Location(string value);
    internal bool IsSetLocation();
}
public class Amazon.Route53.Model.CreateHostedZoneRequest : AmazonRoute53Request {
    private string _name;
    private VPC _vpc;
    private string _callerReference;
    private HostedZoneConfig _hostedZoneConfig;
    private string _delegationSetId;
    [AWSPropertyAttribute]
public string Name { get; public set; }
    public VPC VPC { get; public set; }
    [AWSPropertyAttribute]
public string CallerReference { get; public set; }
    public HostedZoneConfig HostedZoneConfig { get; public set; }
    [AWSPropertyAttribute]
public string DelegationSetId { get; public set; }
    public CreateHostedZoneRequest(string name, string callerReference);
    public string get_Name();
    public void set_Name(string value);
    internal bool IsSetName();
    public VPC get_VPC();
    public void set_VPC(VPC value);
    internal bool IsSetVPC();
    public string get_CallerReference();
    public void set_CallerReference(string value);
    internal bool IsSetCallerReference();
    public HostedZoneConfig get_HostedZoneConfig();
    public void set_HostedZoneConfig(HostedZoneConfig value);
    internal bool IsSetHostedZoneConfig();
    public string get_DelegationSetId();
    public void set_DelegationSetId(string value);
    internal bool IsSetDelegationSetId();
}
public class Amazon.Route53.Model.CreateHostedZoneResponse : AmazonWebServiceResponse {
    private HostedZone _hostedZone;
    private ChangeInfo _changeInfo;
    private DelegationSet _delegationSet;
    private VPC _vpc;
    private string _location;
    [AWSPropertyAttribute]
public HostedZone HostedZone { get; public set; }
    [AWSPropertyAttribute]
public ChangeInfo ChangeInfo { get; public set; }
    [AWSPropertyAttribute]
public DelegationSet DelegationSet { get; public set; }
    public VPC VPC { get; public set; }
    [AWSPropertyAttribute]
public string Location { get; public set; }
    public HostedZone get_HostedZone();
    public void set_HostedZone(HostedZone value);
    internal bool IsSetHostedZone();
    public ChangeInfo get_ChangeInfo();
    public void set_ChangeInfo(ChangeInfo value);
    internal bool IsSetChangeInfo();
    public DelegationSet get_DelegationSet();
    public void set_DelegationSet(DelegationSet value);
    internal bool IsSetDelegationSet();
    public VPC get_VPC();
    public void set_VPC(VPC value);
    internal bool IsSetVPC();
    public string get_Location();
    public void set_Location(string value);
    internal bool IsSetLocation();
}
public class Amazon.Route53.Model.CreateKeySigningKeyRequest : AmazonRoute53Request {
    private string _callerReference;
    private string _hostedZoneId;
    private string _keyManagementServiceArn;
    private string _name;
    private string _status;
    [AWSPropertyAttribute]
public string CallerReference { get; public set; }
    [AWSPropertyAttribute]
public string HostedZoneId { get; public set; }
    [AWSPropertyAttribute]
public string KeyManagementServiceArn { get; public set; }
    [AWSPropertyAttribute]
public string Name { get; public set; }
    [AWSPropertyAttribute]
public string Status { get; public set; }
    public string get_CallerReference();
    public void set_CallerReference(string value);
    internal bool IsSetCallerReference();
    public string get_HostedZoneId();
    public void set_HostedZoneId(string value);
    internal bool IsSetHostedZoneId();
    public string get_KeyManagementServiceArn();
    public void set_KeyManagementServiceArn(string value);
    internal bool IsSetKeyManagementServiceArn();
    public string get_Name();
    public void set_Name(string value);
    internal bool IsSetName();
    public string get_Status();
    public void set_Status(string value);
    internal bool IsSetStatus();
}
public class Amazon.Route53.Model.CreateKeySigningKeyResponse : AmazonWebServiceResponse {
    private ChangeInfo _changeInfo;
    private KeySigningKey _keySigningKey;
    private string _location;
    [AWSPropertyAttribute]
public ChangeInfo ChangeInfo { get; public set; }
    [AWSPropertyAttribute]
public KeySigningKey KeySigningKey { get; public set; }
    [AWSPropertyAttribute]
public string Location { get; public set; }
    public ChangeInfo get_ChangeInfo();
    public void set_ChangeInfo(ChangeInfo value);
    internal bool IsSetChangeInfo();
    public KeySigningKey get_KeySigningKey();
    public void set_KeySigningKey(KeySigningKey value);
    internal bool IsSetKeySigningKey();
    public string get_Location();
    public void set_Location(string value);
    internal bool IsSetLocation();
}
public class Amazon.Route53.Model.CreateQueryLoggingConfigRequest : AmazonRoute53Request {
    private string _hostedZoneId;
    private string _cloudWatchLogsLogGroupArn;
    [AWSPropertyAttribute]
public string HostedZoneId { get; public set; }
    [AWSPropertyAttribute]
public string CloudWatchLogsLogGroupArn { get; public set; }
    public string get_HostedZoneId();
    public void set_HostedZoneId(string value);
    internal bool IsSetHostedZoneId();
    public string get_CloudWatchLogsLogGroupArn();
    public void set_CloudWatchLogsLogGroupArn(string value);
    internal bool IsSetCloudWatchLogsLogGroupArn();
}
public class Amazon.Route53.Model.CreateQueryLoggingConfigResponse : AmazonWebServiceResponse {
    private QueryLoggingConfig _queryLoggingConfig;
    private string _location;
    [AWSPropertyAttribute]
public QueryLoggingConfig QueryLoggingConfig { get; public set; }
    [AWSPropertyAttribute]
public string Location { get; public set; }
    public QueryLoggingConfig get_QueryLoggingConfig();
    public void set_QueryLoggingConfig(QueryLoggingConfig value);
    internal bool IsSetQueryLoggingConfig();
    public string get_Location();
    public void set_Location(string value);
    internal bool IsSetLocation();
}
public class Amazon.Route53.Model.CreateReusableDelegationSetRequest : AmazonRoute53Request {
    private string _callerReference;
    private string _hostedZoneId;
    [AWSPropertyAttribute]
public string CallerReference { get; public set; }
    [AWSPropertyAttribute]
public string HostedZoneId { get; public set; }
    public string get_CallerReference();
    public void set_CallerReference(string value);
    internal bool IsSetCallerReference();
    public string get_HostedZoneId();
    public void set_HostedZoneId(string value);
    internal bool IsSetHostedZoneId();
}
public class Amazon.Route53.Model.CreateReusableDelegationSetResponse : AmazonWebServiceResponse {
    private DelegationSet _delegationSet;
    private string _location;
    [AWSPropertyAttribute]
public DelegationSet DelegationSet { get; public set; }
    [AWSPropertyAttribute]
public string Location { get; public set; }
    public DelegationSet get_DelegationSet();
    public void set_DelegationSet(DelegationSet value);
    internal bool IsSetDelegationSet();
    public string get_Location();
    public void set_Location(string value);
    internal bool IsSetLocation();
}
public class Amazon.Route53.Model.CreateTrafficPolicyInstanceRequest : AmazonRoute53Request {
    private string _hostedZoneId;
    private string _name;
    private Nullable`1<long> _ttl;
    private string _trafficPolicyId;
    private Nullable`1<int> _trafficPolicyVersion;
    [AWSPropertyAttribute]
public string HostedZoneId { get; public set; }
    [AWSPropertyAttribute]
public string Name { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<long> TTL { get; public set; }
    [AWSPropertyAttribute]
public string TrafficPolicyId { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> TrafficPolicyVersion { get; public set; }
    public string get_HostedZoneId();
    public void set_HostedZoneId(string value);
    internal bool IsSetHostedZoneId();
    public string get_Name();
    public void set_Name(string value);
    internal bool IsSetName();
    public Nullable`1<long> get_TTL();
    public void set_TTL(Nullable`1<long> value);
    internal bool IsSetTTL();
    public string get_TrafficPolicyId();
    public void set_TrafficPolicyId(string value);
    internal bool IsSetTrafficPolicyId();
    public Nullable`1<int> get_TrafficPolicyVersion();
    public void set_TrafficPolicyVersion(Nullable`1<int> value);
    internal bool IsSetTrafficPolicyVersion();
}
public class Amazon.Route53.Model.CreateTrafficPolicyInstanceResponse : AmazonWebServiceResponse {
    private TrafficPolicyInstance _trafficPolicyInstance;
    private string _location;
    [AWSPropertyAttribute]
public TrafficPolicyInstance TrafficPolicyInstance { get; public set; }
    [AWSPropertyAttribute]
public string Location { get; public set; }
    public TrafficPolicyInstance get_TrafficPolicyInstance();
    public void set_TrafficPolicyInstance(TrafficPolicyInstance value);
    internal bool IsSetTrafficPolicyInstance();
    public string get_Location();
    public void set_Location(string value);
    internal bool IsSetLocation();
}
public class Amazon.Route53.Model.CreateTrafficPolicyRequest : AmazonRoute53Request {
    private string _name;
    private string _document;
    private string _comment;
    [AWSPropertyAttribute]
public string Name { get; public set; }
    [AWSPropertyAttribute]
public string Document { get; public set; }
    [AWSPropertyAttribute]
public string Comment { get; public set; }
    public string get_Name();
    public void set_Name(string value);
    internal bool IsSetName();
    public string get_Document();
    public void set_Document(string value);
    internal bool IsSetDocument();
    public string get_Comment();
    public void set_Comment(string value);
    internal bool IsSetComment();
}
public class Amazon.Route53.Model.CreateTrafficPolicyResponse : AmazonWebServiceResponse {
    private TrafficPolicy _trafficPolicy;
    private string _location;
    [AWSPropertyAttribute]
public TrafficPolicy TrafficPolicy { get; public set; }
    [AWSPropertyAttribute]
public string Location { get; public set; }
    public TrafficPolicy get_TrafficPolicy();
    public void set_TrafficPolicy(TrafficPolicy value);
    internal bool IsSetTrafficPolicy();
    public string get_Location();
    public void set_Location(string value);
    internal bool IsSetLocation();
}
public class Amazon.Route53.Model.CreateTrafficPolicyVersionRequest : AmazonRoute53Request {
    private string _id;
    private string _document;
    private string _comment;
    [AWSPropertyAttribute]
public string Id { get; public set; }
    [AWSPropertyAttribute]
public string Document { get; public set; }
    [AWSPropertyAttribute]
public string Comment { get; public set; }
    public string get_Id();
    public void set_Id(string value);
    internal bool IsSetId();
    public string get_Document();
    public void set_Document(string value);
    internal bool IsSetDocument();
    public string get_Comment();
    public void set_Comment(string value);
    internal bool IsSetComment();
}
public class Amazon.Route53.Model.CreateTrafficPolicyVersionResponse : AmazonWebServiceResponse {
    private TrafficPolicy _trafficPolicy;
    private string _location;
    [AWSPropertyAttribute]
public TrafficPolicy TrafficPolicy { get; public set; }
    [AWSPropertyAttribute]
public string Location { get; public set; }
    public TrafficPolicy get_TrafficPolicy();
    public void set_TrafficPolicy(TrafficPolicy value);
    internal bool IsSetTrafficPolicy();
    public string get_Location();
    public void set_Location(string value);
    internal bool IsSetLocation();
}
public class Amazon.Route53.Model.CreateVPCAssociationAuthorizationRequest : AmazonRoute53Request {
    private string _hostedZoneId;
    private VPC _vpc;
    [AWSPropertyAttribute]
public string HostedZoneId { get; public set; }
    [AWSPropertyAttribute]
public VPC VPC { get; public set; }
    public string get_HostedZoneId();
    public void set_HostedZoneId(string value);
    internal bool IsSetHostedZoneId();
    public VPC get_VPC();
    public void set_VPC(VPC value);
    internal bool IsSetVPC();
}
public class Amazon.Route53.Model.CreateVPCAssociationAuthorizationResponse : AmazonWebServiceResponse {
    private string _hostedZoneId;
    private VPC _vpc;
    [AWSPropertyAttribute]
public string HostedZoneId { get; public set; }
    [AWSPropertyAttribute]
public VPC VPC { get; public set; }
    public string get_HostedZoneId();
    public void set_HostedZoneId(string value);
    internal bool IsSetHostedZoneId();
    public VPC get_VPC();
    public void set_VPC(VPC value);
    internal bool IsSetVPC();
}
public class Amazon.Route53.Model.DeactivateKeySigningKeyRequest : AmazonRoute53Request {
    private string _hostedZoneId;
    private string _name;
    [AWSPropertyAttribute]
public string HostedZoneId { get; public set; }
    [AWSPropertyAttribute]
public string Name { get; public set; }
    public string get_HostedZoneId();
    public void set_HostedZoneId(string value);
    internal bool IsSetHostedZoneId();
    public string get_Name();
    public void set_Name(string value);
    internal bool IsSetName();
}
public class Amazon.Route53.Model.DeactivateKeySigningKeyResponse : AmazonWebServiceResponse {
    private ChangeInfo _changeInfo;
    [AWSPropertyAttribute]
public ChangeInfo ChangeInfo { get; public set; }
    public ChangeInfo get_ChangeInfo();
    public void set_ChangeInfo(ChangeInfo value);
    internal bool IsSetChangeInfo();
}
public class Amazon.Route53.Model.DelegationSet : object {
    private string _id;
    private string _callerReference;
    private List`1<string> _nameServers;
    [AWSPropertyAttribute]
public string Id { get; public set; }
    [AWSPropertyAttribute]
public string CallerReference { get; public set; }
    [AWSPropertyAttribute]
public List`1<string> NameServers { get; public set; }
    public DelegationSet(List`1<string> nameServers);
    public string get_Id();
    public void set_Id(string value);
    internal bool IsSetId();
    public string get_CallerReference();
    public void set_CallerReference(string value);
    internal bool IsSetCallerReference();
    public List`1<string> get_NameServers();
    public void set_NameServers(List`1<string> value);
    internal bool IsSetNameServers();
}
public class Amazon.Route53.Model.DelegationSetAlreadyCreatedException : AmazonRoute53Exception {
    public DelegationSetAlreadyCreatedException(string message);
    public DelegationSetAlreadyCreatedException(string message, Exception innerException);
    public DelegationSetAlreadyCreatedException(Exception innerException);
    public DelegationSetAlreadyCreatedException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public DelegationSetAlreadyCreatedException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Route53.Model.DelegationSetAlreadyReusableException : AmazonRoute53Exception {
    public DelegationSetAlreadyReusableException(string message);
    public DelegationSetAlreadyReusableException(string message, Exception innerException);
    public DelegationSetAlreadyReusableException(Exception innerException);
    public DelegationSetAlreadyReusableException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public DelegationSetAlreadyReusableException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Route53.Model.DelegationSetInUseException : AmazonRoute53Exception {
    public DelegationSetInUseException(string message);
    public DelegationSetInUseException(string message, Exception innerException);
    public DelegationSetInUseException(Exception innerException);
    public DelegationSetInUseException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public DelegationSetInUseException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Route53.Model.DelegationSetNotAvailableException : AmazonRoute53Exception {
    public DelegationSetNotAvailableException(string message);
    public DelegationSetNotAvailableException(string message, Exception innerException);
    public DelegationSetNotAvailableException(Exception innerException);
    public DelegationSetNotAvailableException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public DelegationSetNotAvailableException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Route53.Model.DelegationSetNotReusableException : AmazonRoute53Exception {
    public DelegationSetNotReusableException(string message);
    public DelegationSetNotReusableException(string message, Exception innerException);
    public DelegationSetNotReusableException(Exception innerException);
    public DelegationSetNotReusableException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public DelegationSetNotReusableException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Route53.Model.DeleteCidrCollectionRequest : AmazonRoute53Request {
    private string _id;
    [AWSPropertyAttribute]
public string Id { get; public set; }
    public string get_Id();
    public void set_Id(string value);
    internal bool IsSetId();
}
public class Amazon.Route53.Model.DeleteCidrCollectionResponse : AmazonWebServiceResponse {
}
public class Amazon.Route53.Model.DeleteHealthCheckRequest : AmazonRoute53Request {
    private string _healthCheckId;
    [AWSPropertyAttribute]
public string HealthCheckId { get; public set; }
    public string get_HealthCheckId();
    public void set_HealthCheckId(string value);
    internal bool IsSetHealthCheckId();
}
public class Amazon.Route53.Model.DeleteHealthCheckResponse : AmazonWebServiceResponse {
}
public class Amazon.Route53.Model.DeleteHostedZoneRequest : AmazonRoute53Request {
    private string _id;
    [AWSPropertyAttribute]
public string Id { get; public set; }
    public DeleteHostedZoneRequest(string id);
    public string get_Id();
    public void set_Id(string value);
    internal bool IsSetId();
}
public class Amazon.Route53.Model.DeleteHostedZoneResponse : AmazonWebServiceResponse {
    private ChangeInfo _changeInfo;
    [AWSPropertyAttribute]
public ChangeInfo ChangeInfo { get; public set; }
    public ChangeInfo get_ChangeInfo();
    public void set_ChangeInfo(ChangeInfo value);
    internal bool IsSetChangeInfo();
}
public class Amazon.Route53.Model.DeleteKeySigningKeyRequest : AmazonRoute53Request {
    private string _hostedZoneId;
    private string _name;
    [AWSPropertyAttribute]
public string HostedZoneId { get; public set; }
    [AWSPropertyAttribute]
public string Name { get; public set; }
    public string get_HostedZoneId();
    public void set_HostedZoneId(string value);
    internal bool IsSetHostedZoneId();
    public string get_Name();
    public void set_Name(string value);
    internal bool IsSetName();
}
public class Amazon.Route53.Model.DeleteKeySigningKeyResponse : AmazonWebServiceResponse {
    private ChangeInfo _changeInfo;
    [AWSPropertyAttribute]
public ChangeInfo ChangeInfo { get; public set; }
    public ChangeInfo get_ChangeInfo();
    public void set_ChangeInfo(ChangeInfo value);
    internal bool IsSetChangeInfo();
}
public class Amazon.Route53.Model.DeleteQueryLoggingConfigRequest : AmazonRoute53Request {
    private string _id;
    [AWSPropertyAttribute]
public string Id { get; public set; }
    public string get_Id();
    public void set_Id(string value);
    internal bool IsSetId();
}
public class Amazon.Route53.Model.DeleteQueryLoggingConfigResponse : AmazonWebServiceResponse {
}
public class Amazon.Route53.Model.DeleteReusableDelegationSetRequest : AmazonRoute53Request {
    private string _id;
    [AWSPropertyAttribute]
public string Id { get; public set; }
    public string get_Id();
    public void set_Id(string value);
    internal bool IsSetId();
}
public class Amazon.Route53.Model.DeleteReusableDelegationSetResponse : AmazonWebServiceResponse {
}
public class Amazon.Route53.Model.DeleteTrafficPolicyInstanceRequest : AmazonRoute53Request {
    private string _id;
    [AWSPropertyAttribute]
public string Id { get; public set; }
    public string get_Id();
    public void set_Id(string value);
    internal bool IsSetId();
}
public class Amazon.Route53.Model.DeleteTrafficPolicyInstanceResponse : AmazonWebServiceResponse {
}
public class Amazon.Route53.Model.DeleteTrafficPolicyRequest : AmazonRoute53Request {
    private string _id;
    private Nullable`1<int> _version;
    [AWSPropertyAttribute]
public string Id { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> Version { get; public set; }
    public string get_Id();
    public void set_Id(string value);
    internal bool IsSetId();
    public Nullable`1<int> get_Version();
    public void set_Version(Nullable`1<int> value);
    internal bool IsSetVersion();
}
public class Amazon.Route53.Model.DeleteTrafficPolicyResponse : AmazonWebServiceResponse {
}
public class Amazon.Route53.Model.DeleteVPCAssociationAuthorizationRequest : AmazonRoute53Request {
    private string _hostedZoneId;
    private VPC _vpc;
    [AWSPropertyAttribute]
public string HostedZoneId { get; public set; }
    [AWSPropertyAttribute]
public VPC VPC { get; public set; }
    public string get_HostedZoneId();
    public void set_HostedZoneId(string value);
    internal bool IsSetHostedZoneId();
    public VPC get_VPC();
    public void set_VPC(VPC value);
    internal bool IsSetVPC();
}
public class Amazon.Route53.Model.DeleteVPCAssociationAuthorizationResponse : AmazonWebServiceResponse {
}
public class Amazon.Route53.Model.Dimension : object {
    private string _name;
    private string _value;
    [AWSPropertyAttribute]
public string Name { get; public set; }
    [AWSPropertyAttribute]
public string Value { get; public set; }
    public string get_Name();
    public void set_Name(string value);
    internal bool IsSetName();
    public string get_Value();
    public void set_Value(string value);
    internal bool IsSetValue();
}
public class Amazon.Route53.Model.DisableHostedZoneDNSSECRequest : AmazonRoute53Request {
    private string _hostedZoneId;
    [AWSPropertyAttribute]
public string HostedZoneId { get; public set; }
    public string get_HostedZoneId();
    public void set_HostedZoneId(string value);
    internal bool IsSetHostedZoneId();
}
public class Amazon.Route53.Model.DisableHostedZoneDNSSECResponse : AmazonWebServiceResponse {
    private ChangeInfo _changeInfo;
    [AWSPropertyAttribute]
public ChangeInfo ChangeInfo { get; public set; }
    public ChangeInfo get_ChangeInfo();
    public void set_ChangeInfo(ChangeInfo value);
    internal bool IsSetChangeInfo();
}
public class Amazon.Route53.Model.DisassociateVPCFromHostedZoneRequest : AmazonRoute53Request {
    private string _hostedZoneId;
    private VPC _vpc;
    private string _comment;
    [AWSPropertyAttribute]
public string HostedZoneId { get; public set; }
    [AWSPropertyAttribute]
public VPC VPC { get; public set; }
    public string Comment { get; public set; }
    public string get_HostedZoneId();
    public void set_HostedZoneId(string value);
    internal bool IsSetHostedZoneId();
    public VPC get_VPC();
    public void set_VPC(VPC value);
    internal bool IsSetVPC();
    public string get_Comment();
    public void set_Comment(string value);
    internal bool IsSetComment();
}
public class Amazon.Route53.Model.DisassociateVPCFromHostedZoneResponse : AmazonWebServiceResponse {
    private ChangeInfo _changeInfo;
    [AWSPropertyAttribute]
public ChangeInfo ChangeInfo { get; public set; }
    public ChangeInfo get_ChangeInfo();
    public void set_ChangeInfo(ChangeInfo value);
    internal bool IsSetChangeInfo();
}
public class Amazon.Route53.Model.DNSSECNotFoundException : AmazonRoute53Exception {
    public DNSSECNotFoundException(string message);
    public DNSSECNotFoundException(string message, Exception innerException);
    public DNSSECNotFoundException(Exception innerException);
    public DNSSECNotFoundException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public DNSSECNotFoundException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Route53.Model.DNSSECStatus : object {
    private string _serveSignature;
    private string _statusMessage;
    [AWSPropertyAttribute]
public string ServeSignature { get; public set; }
    [AWSPropertyAttribute]
public string StatusMessage { get; public set; }
    public string get_ServeSignature();
    public void set_ServeSignature(string value);
    internal bool IsSetServeSignature();
    public string get_StatusMessage();
    public void set_StatusMessage(string value);
    internal bool IsSetStatusMessage();
}
public class Amazon.Route53.Model.EnableHostedZoneDNSSECRequest : AmazonRoute53Request {
    private string _hostedZoneId;
    [AWSPropertyAttribute]
public string HostedZoneId { get; public set; }
    public string get_HostedZoneId();
    public void set_HostedZoneId(string value);
    internal bool IsSetHostedZoneId();
}
public class Amazon.Route53.Model.EnableHostedZoneDNSSECResponse : AmazonWebServiceResponse {
    private ChangeInfo _changeInfo;
    [AWSPropertyAttribute]
public ChangeInfo ChangeInfo { get; public set; }
    public ChangeInfo get_ChangeInfo();
    public void set_ChangeInfo(ChangeInfo value);
    internal bool IsSetChangeInfo();
}
public class Amazon.Route53.Model.GeoLocation : object {
    private string _continentCode;
    private string _countryCode;
    private string _subdivisionCode;
    [AWSPropertyAttribute]
public string ContinentCode { get; public set; }
    [AWSPropertyAttribute]
public string CountryCode { get; public set; }
    [AWSPropertyAttribute]
public string SubdivisionCode { get; public set; }
    public string get_ContinentCode();
    public void set_ContinentCode(string value);
    internal bool IsSetContinentCode();
    public string get_CountryCode();
    public void set_CountryCode(string value);
    internal bool IsSetCountryCode();
    public string get_SubdivisionCode();
    public void set_SubdivisionCode(string value);
    internal bool IsSetSubdivisionCode();
}
public class Amazon.Route53.Model.GeoLocationDetails : object {
    private string _continentCode;
    private string _continentName;
    private string _countryCode;
    private string _countryName;
    private string _subdivisionCode;
    private string _subdivisionName;
    [AWSPropertyAttribute]
public string ContinentCode { get; public set; }
    [AWSPropertyAttribute]
public string ContinentName { get; public set; }
    [AWSPropertyAttribute]
public string CountryCode { get; public set; }
    [AWSPropertyAttribute]
public string CountryName { get; public set; }
    [AWSPropertyAttribute]
public string SubdivisionCode { get; public set; }
    [AWSPropertyAttribute]
public string SubdivisionName { get; public set; }
    public string get_ContinentCode();
    public void set_ContinentCode(string value);
    internal bool IsSetContinentCode();
    public string get_ContinentName();
    public void set_ContinentName(string value);
    internal bool IsSetContinentName();
    public string get_CountryCode();
    public void set_CountryCode(string value);
    internal bool IsSetCountryCode();
    public string get_CountryName();
    public void set_CountryName(string value);
    internal bool IsSetCountryName();
    public string get_SubdivisionCode();
    public void set_SubdivisionCode(string value);
    internal bool IsSetSubdivisionCode();
    public string get_SubdivisionName();
    public void set_SubdivisionName(string value);
    internal bool IsSetSubdivisionName();
}
public class Amazon.Route53.Model.GeoProximityLocation : object {
    private string _awsRegion;
    private string _localZoneGroup;
    private Coordinates _coordinates;
    private Nullable`1<int> _bias;
    [AWSPropertyAttribute]
public string AWSRegion { get; public set; }
    [AWSPropertyAttribute]
public string LocalZoneGroup { get; public set; }
    public Coordinates Coordinates { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> Bias { get; public set; }
    public string get_AWSRegion();
    public void set_AWSRegion(string value);
    internal bool IsSetAWSRegion();
    public string get_LocalZoneGroup();
    public void set_LocalZoneGroup(string value);
    internal bool IsSetLocalZoneGroup();
    public Coordinates get_Coordinates();
    public void set_Coordinates(Coordinates value);
    internal bool IsSetCoordinates();
    public Nullable`1<int> get_Bias();
    public void set_Bias(Nullable`1<int> value);
    internal bool IsSetBias();
}
public class Amazon.Route53.Model.GetAccountLimitRequest : AmazonRoute53Request {
    private AccountLimitType _type;
    [AWSPropertyAttribute]
public AccountLimitType Type { get; public set; }
    public AccountLimitType get_Type();
    public void set_Type(AccountLimitType value);
    internal bool IsSetType();
}
public class Amazon.Route53.Model.GetAccountLimitResponse : AmazonWebServiceResponse {
    private AccountLimit _limit;
    private Nullable`1<long> _count;
    [AWSPropertyAttribute]
public AccountLimit Limit { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<long> Count { get; public set; }
    public AccountLimit get_Limit();
    public void set_Limit(AccountLimit value);
    internal bool IsSetLimit();
    public Nullable`1<long> get_Count();
    public void set_Count(Nullable`1<long> value);
    internal bool IsSetCount();
}
public class Amazon.Route53.Model.GetChangeRequest : AmazonRoute53Request {
    private string _id;
    [AWSPropertyAttribute]
public string Id { get; public set; }
    public GetChangeRequest(string id);
    public string get_Id();
    public void set_Id(string value);
    internal bool IsSetId();
}
public class Amazon.Route53.Model.GetChangeResponse : AmazonWebServiceResponse {
    private ChangeInfo _changeInfo;
    [AWSPropertyAttribute]
public ChangeInfo ChangeInfo { get; public set; }
    public ChangeInfo get_ChangeInfo();
    public void set_ChangeInfo(ChangeInfo value);
    internal bool IsSetChangeInfo();
}
public class Amazon.Route53.Model.GetCheckerIpRangesRequest : AmazonRoute53Request {
}
public class Amazon.Route53.Model.GetCheckerIpRangesResponse : AmazonWebServiceResponse {
    private List`1<string> _checkerIpRanges;
    [AWSPropertyAttribute]
public List`1<string> CheckerIpRanges { get; public set; }
    public List`1<string> get_CheckerIpRanges();
    public void set_CheckerIpRanges(List`1<string> value);
    internal bool IsSetCheckerIpRanges();
}
public class Amazon.Route53.Model.GetDNSSECRequest : AmazonRoute53Request {
    private string _hostedZoneId;
    [AWSPropertyAttribute]
public string HostedZoneId { get; public set; }
    public string get_HostedZoneId();
    public void set_HostedZoneId(string value);
    internal bool IsSetHostedZoneId();
}
public class Amazon.Route53.Model.GetDNSSECResponse : AmazonWebServiceResponse {
    private DNSSECStatus _status;
    private List`1<KeySigningKey> _keySigningKeys;
    [AWSPropertyAttribute]
public DNSSECStatus Status { get; public set; }
    [AWSPropertyAttribute]
public List`1<KeySigningKey> KeySigningKeys { get; public set; }
    public DNSSECStatus get_Status();
    public void set_Status(DNSSECStatus value);
    internal bool IsSetStatus();
    public List`1<KeySigningKey> get_KeySigningKeys();
    public void set_KeySigningKeys(List`1<KeySigningKey> value);
    internal bool IsSetKeySigningKeys();
}
public class Amazon.Route53.Model.GetGeoLocationRequest : AmazonRoute53Request {
    private string _continentCode;
    private string _countryCode;
    private string _subdivisionCode;
    [AWSPropertyAttribute]
public string ContinentCode { get; public set; }
    [AWSPropertyAttribute]
public string CountryCode { get; public set; }
    [AWSPropertyAttribute]
public string SubdivisionCode { get; public set; }
    public string get_ContinentCode();
    public void set_ContinentCode(string value);
    internal bool IsSetContinentCode();
    public string get_CountryCode();
    public void set_CountryCode(string value);
    internal bool IsSetCountryCode();
    public string get_SubdivisionCode();
    public void set_SubdivisionCode(string value);
    internal bool IsSetSubdivisionCode();
}
public class Amazon.Route53.Model.GetGeoLocationResponse : AmazonWebServiceResponse {
    private GeoLocationDetails _geoLocationDetails;
    [AWSPropertyAttribute]
public GeoLocationDetails GeoLocationDetails { get; public set; }
    public GeoLocationDetails get_GeoLocationDetails();
    public void set_GeoLocationDetails(GeoLocationDetails value);
    internal bool IsSetGeoLocationDetails();
}
public class Amazon.Route53.Model.GetHealthCheckCountRequest : AmazonRoute53Request {
}
public class Amazon.Route53.Model.GetHealthCheckCountResponse : AmazonWebServiceResponse {
    private Nullable`1<long> _healthCheckCount;
    [AWSPropertyAttribute]
public Nullable`1<long> HealthCheckCount { get; public set; }
    public Nullable`1<long> get_HealthCheckCount();
    public void set_HealthCheckCount(Nullable`1<long> value);
    internal bool IsSetHealthCheckCount();
}
public class Amazon.Route53.Model.GetHealthCheckLastFailureReasonRequest : AmazonRoute53Request {
    private string _healthCheckId;
    [AWSPropertyAttribute]
public string HealthCheckId { get; public set; }
    public string get_HealthCheckId();
    public void set_HealthCheckId(string value);
    internal bool IsSetHealthCheckId();
}
public class Amazon.Route53.Model.GetHealthCheckLastFailureReasonResponse : AmazonWebServiceResponse {
    private List`1<HealthCheckObservation> _healthCheckObservations;
    [AWSPropertyAttribute]
public List`1<HealthCheckObservation> HealthCheckObservations { get; public set; }
    public List`1<HealthCheckObservation> get_HealthCheckObservations();
    public void set_HealthCheckObservations(List`1<HealthCheckObservation> value);
    internal bool IsSetHealthCheckObservations();
}
public class Amazon.Route53.Model.GetHealthCheckRequest : AmazonRoute53Request {
    private string _healthCheckId;
    [AWSPropertyAttribute]
public string HealthCheckId { get; public set; }
    public string get_HealthCheckId();
    public void set_HealthCheckId(string value);
    internal bool IsSetHealthCheckId();
}
public class Amazon.Route53.Model.GetHealthCheckResponse : AmazonWebServiceResponse {
    private HealthCheck _healthCheck;
    [AWSPropertyAttribute]
public HealthCheck HealthCheck { get; public set; }
    public HealthCheck get_HealthCheck();
    public void set_HealthCheck(HealthCheck value);
    internal bool IsSetHealthCheck();
}
public class Amazon.Route53.Model.GetHealthCheckStatusRequest : AmazonRoute53Request {
    private string _healthCheckId;
    [AWSPropertyAttribute]
public string HealthCheckId { get; public set; }
    public string get_HealthCheckId();
    public void set_HealthCheckId(string value);
    internal bool IsSetHealthCheckId();
}
public class Amazon.Route53.Model.GetHealthCheckStatusResponse : AmazonWebServiceResponse {
    private List`1<HealthCheckObservation> _healthCheckObservations;
    [AWSPropertyAttribute]
public List`1<HealthCheckObservation> HealthCheckObservations { get; public set; }
    public List`1<HealthCheckObservation> get_HealthCheckObservations();
    public void set_HealthCheckObservations(List`1<HealthCheckObservation> value);
    internal bool IsSetHealthCheckObservations();
}
public class Amazon.Route53.Model.GetHostedZoneCountRequest : AmazonRoute53Request {
}
public class Amazon.Route53.Model.GetHostedZoneCountResponse : AmazonWebServiceResponse {
    private Nullable`1<long> _hostedZoneCount;
    [AWSPropertyAttribute]
public Nullable`1<long> HostedZoneCount { get; public set; }
    public Nullable`1<long> get_HostedZoneCount();
    public void set_HostedZoneCount(Nullable`1<long> value);
    internal bool IsSetHostedZoneCount();
}
public class Amazon.Route53.Model.GetHostedZoneLimitRequest : AmazonRoute53Request {
    private HostedZoneLimitType _type;
    private string _hostedZoneId;
    [AWSPropertyAttribute]
public HostedZoneLimitType Type { get; public set; }
    [AWSPropertyAttribute]
public string HostedZoneId { get; public set; }
    public HostedZoneLimitType get_Type();
    public void set_Type(HostedZoneLimitType value);
    internal bool IsSetType();
    public string get_HostedZoneId();
    public void set_HostedZoneId(string value);
    internal bool IsSetHostedZoneId();
}
public class Amazon.Route53.Model.GetHostedZoneLimitResponse : AmazonWebServiceResponse {
    private HostedZoneLimit _limit;
    private Nullable`1<long> _count;
    [AWSPropertyAttribute]
public HostedZoneLimit Limit { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<long> Count { get; public set; }
    public HostedZoneLimit get_Limit();
    public void set_Limit(HostedZoneLimit value);
    internal bool IsSetLimit();
    public Nullable`1<long> get_Count();
    public void set_Count(Nullable`1<long> value);
    internal bool IsSetCount();
}
public class Amazon.Route53.Model.GetHostedZoneRequest : AmazonRoute53Request {
    private string _id;
    [AWSPropertyAttribute]
public string Id { get; public set; }
    public GetHostedZoneRequest(string id);
    public string get_Id();
    public void set_Id(string value);
    internal bool IsSetId();
}
public class Amazon.Route53.Model.GetHostedZoneResponse : AmazonWebServiceResponse {
    private HostedZone _hostedZone;
    private DelegationSet _delegationSet;
    private List`1<VPC> _vpCs;
    [AWSPropertyAttribute]
public HostedZone HostedZone { get; public set; }
    public DelegationSet DelegationSet { get; public set; }
    [AWSPropertyAttribute]
public List`1<VPC> VPCs { get; public set; }
    public HostedZone get_HostedZone();
    public void set_HostedZone(HostedZone value);
    internal bool IsSetHostedZone();
    public DelegationSet get_DelegationSet();
    public void set_DelegationSet(DelegationSet value);
    internal bool IsSetDelegationSet();
    public List`1<VPC> get_VPCs();
    public void set_VPCs(List`1<VPC> value);
    internal bool IsSetVPCs();
}
public class Amazon.Route53.Model.GetQueryLoggingConfigRequest : AmazonRoute53Request {
    private string _id;
    [AWSPropertyAttribute]
public string Id { get; public set; }
    public string get_Id();
    public void set_Id(string value);
    internal bool IsSetId();
}
public class Amazon.Route53.Model.GetQueryLoggingConfigResponse : AmazonWebServiceResponse {
    private QueryLoggingConfig _queryLoggingConfig;
    [AWSPropertyAttribute]
public QueryLoggingConfig QueryLoggingConfig { get; public set; }
    public QueryLoggingConfig get_QueryLoggingConfig();
    public void set_QueryLoggingConfig(QueryLoggingConfig value);
    internal bool IsSetQueryLoggingConfig();
}
public class Amazon.Route53.Model.GetReusableDelegationSetLimitRequest : AmazonRoute53Request {
    private ReusableDelegationSetLimitType _type;
    private string _delegationSetId;
    [AWSPropertyAttribute]
public ReusableDelegationSetLimitType Type { get; public set; }
    [AWSPropertyAttribute]
public string DelegationSetId { get; public set; }
    public ReusableDelegationSetLimitType get_Type();
    public void set_Type(ReusableDelegationSetLimitType value);
    internal bool IsSetType();
    public string get_DelegationSetId();
    public void set_DelegationSetId(string value);
    internal bool IsSetDelegationSetId();
}
public class Amazon.Route53.Model.GetReusableDelegationSetLimitResponse : AmazonWebServiceResponse {
    private ReusableDelegationSetLimit _limit;
    private Nullable`1<long> _count;
    [AWSPropertyAttribute]
public ReusableDelegationSetLimit Limit { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<long> Count { get; public set; }
    public ReusableDelegationSetLimit get_Limit();
    public void set_Limit(ReusableDelegationSetLimit value);
    internal bool IsSetLimit();
    public Nullable`1<long> get_Count();
    public void set_Count(Nullable`1<long> value);
    internal bool IsSetCount();
}
public class Amazon.Route53.Model.GetReusableDelegationSetRequest : AmazonRoute53Request {
    private string _id;
    [AWSPropertyAttribute]
public string Id { get; public set; }
    public string get_Id();
    public void set_Id(string value);
    internal bool IsSetId();
}
public class Amazon.Route53.Model.GetReusableDelegationSetResponse : AmazonWebServiceResponse {
    private DelegationSet _delegationSet;
    [AWSPropertyAttribute]
public DelegationSet DelegationSet { get; public set; }
    public DelegationSet get_DelegationSet();
    public void set_DelegationSet(DelegationSet value);
    internal bool IsSetDelegationSet();
}
public class Amazon.Route53.Model.GetTrafficPolicyInstanceCountRequest : AmazonRoute53Request {
}
public class Amazon.Route53.Model.GetTrafficPolicyInstanceCountResponse : AmazonWebServiceResponse {
    private Nullable`1<int> _trafficPolicyInstanceCount;
    [AWSPropertyAttribute]
public Nullable`1<int> TrafficPolicyInstanceCount { get; public set; }
    public Nullable`1<int> get_TrafficPolicyInstanceCount();
    public void set_TrafficPolicyInstanceCount(Nullable`1<int> value);
    internal bool IsSetTrafficPolicyInstanceCount();
}
public class Amazon.Route53.Model.GetTrafficPolicyInstanceRequest : AmazonRoute53Request {
    private string _id;
    [AWSPropertyAttribute]
public string Id { get; public set; }
    public string get_Id();
    public void set_Id(string value);
    internal bool IsSetId();
}
public class Amazon.Route53.Model.GetTrafficPolicyInstanceResponse : AmazonWebServiceResponse {
    private TrafficPolicyInstance _trafficPolicyInstance;
    [AWSPropertyAttribute]
public TrafficPolicyInstance TrafficPolicyInstance { get; public set; }
    public TrafficPolicyInstance get_TrafficPolicyInstance();
    public void set_TrafficPolicyInstance(TrafficPolicyInstance value);
    internal bool IsSetTrafficPolicyInstance();
}
public class Amazon.Route53.Model.GetTrafficPolicyRequest : AmazonRoute53Request {
    private string _id;
    private Nullable`1<int> _version;
    [AWSPropertyAttribute]
public string Id { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> Version { get; public set; }
    public string get_Id();
    public void set_Id(string value);
    internal bool IsSetId();
    public Nullable`1<int> get_Version();
    public void set_Version(Nullable`1<int> value);
    internal bool IsSetVersion();
}
public class Amazon.Route53.Model.GetTrafficPolicyResponse : AmazonWebServiceResponse {
    private TrafficPolicy _trafficPolicy;
    [AWSPropertyAttribute]
public TrafficPolicy TrafficPolicy { get; public set; }
    public TrafficPolicy get_TrafficPolicy();
    public void set_TrafficPolicy(TrafficPolicy value);
    internal bool IsSetTrafficPolicy();
}
public class Amazon.Route53.Model.HealthCheck : object {
    private string _id;
    private string _callerReference;
    private LinkedService _linkedService;
    private HealthCheckConfig _healthCheckConfig;
    private Nullable`1<long> _healthCheckVersion;
    private CloudWatchAlarmConfiguration _cloudWatchAlarmConfiguration;
    [AWSPropertyAttribute]
public string Id { get; public set; }
    [AWSPropertyAttribute]
public string CallerReference { get; public set; }
    public LinkedService LinkedService { get; public set; }
    [AWSPropertyAttribute]
public HealthCheckConfig HealthCheckConfig { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<long> HealthCheckVersion { get; public set; }
    public CloudWatchAlarmConfiguration CloudWatchAlarmConfiguration { get; public set; }
    public string get_Id();
    public void set_Id(string value);
    internal bool IsSetId();
    public string get_CallerReference();
    public void set_CallerReference(string value);
    internal bool IsSetCallerReference();
    public LinkedService get_LinkedService();
    public void set_LinkedService(LinkedService value);
    internal bool IsSetLinkedService();
    public HealthCheckConfig get_HealthCheckConfig();
    public void set_HealthCheckConfig(HealthCheckConfig value);
    internal bool IsSetHealthCheckConfig();
    public Nullable`1<long> get_HealthCheckVersion();
    public void set_HealthCheckVersion(Nullable`1<long> value);
    internal bool IsSetHealthCheckVersion();
    public CloudWatchAlarmConfiguration get_CloudWatchAlarmConfiguration();
    public void set_CloudWatchAlarmConfiguration(CloudWatchAlarmConfiguration value);
    internal bool IsSetCloudWatchAlarmConfiguration();
}
public class Amazon.Route53.Model.HealthCheckAlreadyExistsException : AmazonRoute53Exception {
    public HealthCheckAlreadyExistsException(string message);
    public HealthCheckAlreadyExistsException(string message, Exception innerException);
    public HealthCheckAlreadyExistsException(Exception innerException);
    public HealthCheckAlreadyExistsException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public HealthCheckAlreadyExistsException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Route53.Model.HealthCheckConfig : object {
    private string _ipAddress;
    private Nullable`1<int> _port;
    private HealthCheckType _type;
    private string _resourcePath;
    private string _fullyQualifiedDomainName;
    private string _searchString;
    private Nullable`1<int> _requestInterval;
    private Nullable`1<int> _failureThreshold;
    private Nullable`1<bool> _measureLatency;
    private Nullable`1<bool> _inverted;
    private Nullable`1<bool> _disabled;
    private Nullable`1<int> _healthThreshold;
    private List`1<string> _childHealthChecks;
    private Nullable`1<bool> _enableSNI;
    private List`1<string> _regions;
    private AlarmIdentifier _alarmIdentifier;
    private InsufficientDataHealthStatus _insufficientDataHealthStatus;
    private string _routingControlArn;
    [AWSPropertyAttribute]
public string IPAddress { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> Port { get; public set; }
    [AWSPropertyAttribute]
public HealthCheckType Type { get; public set; }
    [AWSPropertyAttribute]
public string ResourcePath { get; public set; }
    [AWSPropertyAttribute]
public string FullyQualifiedDomainName { get; public set; }
    [AWSPropertyAttribute]
public string SearchString { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> RequestInterval { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> FailureThreshold { get; public set; }
    public Nullable`1<bool> MeasureLatency { get; public set; }
    public Nullable`1<bool> Inverted { get; public set; }
    public Nullable`1<bool> Disabled { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> HealthThreshold { get; public set; }
    [AWSPropertyAttribute]
public List`1<string> ChildHealthChecks { get; public set; }
    public Nullable`1<bool> EnableSNI { get; public set; }
    [AWSPropertyAttribute]
public List`1<string> Regions { get; public set; }
    public AlarmIdentifier AlarmIdentifier { get; public set; }
    public InsufficientDataHealthStatus InsufficientDataHealthStatus { get; public set; }
    [AWSPropertyAttribute]
public string RoutingControlArn { get; public set; }
    public string get_IPAddress();
    public void set_IPAddress(string value);
    internal bool IsSetIPAddress();
    public Nullable`1<int> get_Port();
    public void set_Port(Nullable`1<int> value);
    internal bool IsSetPort();
    public HealthCheckType get_Type();
    public void set_Type(HealthCheckType value);
    internal bool IsSetType();
    public string get_ResourcePath();
    public void set_ResourcePath(string value);
    internal bool IsSetResourcePath();
    public string get_FullyQualifiedDomainName();
    public void set_FullyQualifiedDomainName(string value);
    internal bool IsSetFullyQualifiedDomainName();
    public string get_SearchString();
    public void set_SearchString(string value);
    internal bool IsSetSearchString();
    public Nullable`1<int> get_RequestInterval();
    public void set_RequestInterval(Nullable`1<int> value);
    internal bool IsSetRequestInterval();
    public Nullable`1<int> get_FailureThreshold();
    public void set_FailureThreshold(Nullable`1<int> value);
    internal bool IsSetFailureThreshold();
    public Nullable`1<bool> get_MeasureLatency();
    public void set_MeasureLatency(Nullable`1<bool> value);
    internal bool IsSetMeasureLatency();
    public Nullable`1<bool> get_Inverted();
    public void set_Inverted(Nullable`1<bool> value);
    internal bool IsSetInverted();
    public Nullable`1<bool> get_Disabled();
    public void set_Disabled(Nullable`1<bool> value);
    internal bool IsSetDisabled();
    public Nullable`1<int> get_HealthThreshold();
    public void set_HealthThreshold(Nullable`1<int> value);
    internal bool IsSetHealthThreshold();
    public List`1<string> get_ChildHealthChecks();
    public void set_ChildHealthChecks(List`1<string> value);
    internal bool IsSetChildHealthChecks();
    public Nullable`1<bool> get_EnableSNI();
    public void set_EnableSNI(Nullable`1<bool> value);
    internal bool IsSetEnableSNI();
    public List`1<string> get_Regions();
    public void set_Regions(List`1<string> value);
    internal bool IsSetRegions();
    public AlarmIdentifier get_AlarmIdentifier();
    public void set_AlarmIdentifier(AlarmIdentifier value);
    internal bool IsSetAlarmIdentifier();
    public InsufficientDataHealthStatus get_InsufficientDataHealthStatus();
    public void set_InsufficientDataHealthStatus(InsufficientDataHealthStatus value);
    internal bool IsSetInsufficientDataHealthStatus();
    public string get_RoutingControlArn();
    public void set_RoutingControlArn(string value);
    internal bool IsSetRoutingControlArn();
}
[ObsoleteAttribute("This error code is not in use")]
public class Amazon.Route53.Model.HealthCheckInUseException : AmazonRoute53Exception {
    public HealthCheckInUseException(string message);
    public HealthCheckInUseException(string message, Exception innerException);
    public HealthCheckInUseException(Exception innerException);
    public HealthCheckInUseException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public HealthCheckInUseException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Route53.Model.HealthCheckObservation : object {
    private HealthCheckRegion _region;
    private string _ipAddress;
    private StatusReport _statusReport;
    [AWSPropertyAttribute]
public HealthCheckRegion Region { get; public set; }
    [AWSPropertyAttribute]
public string IPAddress { get; public set; }
    public StatusReport StatusReport { get; public set; }
    public HealthCheckRegion get_Region();
    public void set_Region(HealthCheckRegion value);
    internal bool IsSetRegion();
    public string get_IPAddress();
    public void set_IPAddress(string value);
    internal bool IsSetIPAddress();
    public StatusReport get_StatusReport();
    public void set_StatusReport(StatusReport value);
    internal bool IsSetStatusReport();
}
public class Amazon.Route53.Model.HealthCheckVersionMismatchException : AmazonRoute53Exception {
    public HealthCheckVersionMismatchException(string message);
    public HealthCheckVersionMismatchException(string message, Exception innerException);
    public HealthCheckVersionMismatchException(Exception innerException);
    public HealthCheckVersionMismatchException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public HealthCheckVersionMismatchException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Route53.Model.HostedZone : object {
    private string _id;
    private string _name;
    private string _callerReference;
    private HostedZoneConfig _config;
    private Nullable`1<long> _resourceRecordSetCount;
    private LinkedService _linkedService;
    [AWSPropertyAttribute]
public string Id { get; public set; }
    [AWSPropertyAttribute]
public string Name { get; public set; }
    [AWSPropertyAttribute]
public string CallerReference { get; public set; }
    public HostedZoneConfig Config { get; public set; }
    public Nullable`1<long> ResourceRecordSetCount { get; public set; }
    public LinkedService LinkedService { get; public set; }
    public HostedZone(string id, string name, string callerReference);
    public string get_Id();
    public void set_Id(string value);
    internal bool IsSetId();
    public string get_Name();
    public void set_Name(string value);
    internal bool IsSetName();
    public string get_CallerReference();
    public void set_CallerReference(string value);
    internal bool IsSetCallerReference();
    public HostedZoneConfig get_Config();
    public void set_Config(HostedZoneConfig value);
    internal bool IsSetConfig();
    public Nullable`1<long> get_ResourceRecordSetCount();
    public void set_ResourceRecordSetCount(Nullable`1<long> value);
    internal bool IsSetResourceRecordSetCount();
    public LinkedService get_LinkedService();
    public void set_LinkedService(LinkedService value);
    internal bool IsSetLinkedService();
}
public class Amazon.Route53.Model.HostedZoneAlreadyExistsException : AmazonRoute53Exception {
    public HostedZoneAlreadyExistsException(string message);
    public HostedZoneAlreadyExistsException(string message, Exception innerException);
    public HostedZoneAlreadyExistsException(Exception innerException);
    public HostedZoneAlreadyExistsException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public HostedZoneAlreadyExistsException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Route53.Model.HostedZoneConfig : object {
    private string _comment;
    private Nullable`1<bool> _privateZone;
    [AWSPropertyAttribute]
public string Comment { get; public set; }
    public Nullable`1<bool> PrivateZone { get; public set; }
    public string get_Comment();
    public void set_Comment(string value);
    internal bool IsSetComment();
    public Nullable`1<bool> get_PrivateZone();
    public void set_PrivateZone(Nullable`1<bool> value);
    internal bool IsSetPrivateZone();
}
public class Amazon.Route53.Model.HostedZoneLimit : object {
    private HostedZoneLimitType _type;
    private Nullable`1<long> _value;
    [AWSPropertyAttribute]
public HostedZoneLimitType Type { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<long> Value { get; public set; }
    public HostedZoneLimitType get_Type();
    public void set_Type(HostedZoneLimitType value);
    internal bool IsSetType();
    public Nullable`1<long> get_Value();
    public void set_Value(Nullable`1<long> value);
    internal bool IsSetValue();
}
public class Amazon.Route53.Model.HostedZoneNotEmptyException : AmazonRoute53Exception {
    public HostedZoneNotEmptyException(string message);
    public HostedZoneNotEmptyException(string message, Exception innerException);
    public HostedZoneNotEmptyException(Exception innerException);
    public HostedZoneNotEmptyException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public HostedZoneNotEmptyException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Route53.Model.HostedZoneNotFoundException : AmazonRoute53Exception {
    public HostedZoneNotFoundException(string message);
    public HostedZoneNotFoundException(string message, Exception innerException);
    public HostedZoneNotFoundException(Exception innerException);
    public HostedZoneNotFoundException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public HostedZoneNotFoundException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Route53.Model.HostedZoneNotPrivateException : AmazonRoute53Exception {
    public HostedZoneNotPrivateException(string message);
    public HostedZoneNotPrivateException(string message, Exception innerException);
    public HostedZoneNotPrivateException(Exception innerException);
    public HostedZoneNotPrivateException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public HostedZoneNotPrivateException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Route53.Model.HostedZoneOwner : object {
    private string _owningAccount;
    private string _owningService;
    public string OwningAccount { get; public set; }
    [AWSPropertyAttribute]
public string OwningService { get; public set; }
    public string get_OwningAccount();
    public void set_OwningAccount(string value);
    internal bool IsSetOwningAccount();
    public string get_OwningService();
    public void set_OwningService(string value);
    internal bool IsSetOwningService();
}
public class Amazon.Route53.Model.HostedZonePartiallyDelegatedException : AmazonRoute53Exception {
    public HostedZonePartiallyDelegatedException(string message);
    public HostedZonePartiallyDelegatedException(string message, Exception innerException);
    public HostedZonePartiallyDelegatedException(Exception innerException);
    public HostedZonePartiallyDelegatedException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public HostedZonePartiallyDelegatedException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Route53.Model.HostedZoneSummary : object {
    private string _hostedZoneId;
    private string _name;
    private HostedZoneOwner _owner;
    [AWSPropertyAttribute]
public string HostedZoneId { get; public set; }
    [AWSPropertyAttribute]
public string Name { get; public set; }
    [AWSPropertyAttribute]
public HostedZoneOwner Owner { get; public set; }
    public string get_HostedZoneId();
    public void set_HostedZoneId(string value);
    internal bool IsSetHostedZoneId();
    public string get_Name();
    public void set_Name(string value);
    internal bool IsSetName();
    public HostedZoneOwner get_Owner();
    public void set_Owner(HostedZoneOwner value);
    internal bool IsSetOwner();
}
public interface Amazon.Route53.Model.IListCidrBlocksPaginator {
    public IPaginatedEnumerable`1<ListCidrBlocksResponse> Responses { get; }
    public IPaginatedEnumerable`1<CidrBlockSummary> CidrBlocks { get; }
    public abstract virtual IPaginatedEnumerable`1<ListCidrBlocksResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<CidrBlockSummary> get_CidrBlocks();
}
public interface Amazon.Route53.Model.IListCidrCollectionsPaginator {
    public IPaginatedEnumerable`1<ListCidrCollectionsResponse> Responses { get; }
    public IPaginatedEnumerable`1<CollectionSummary> CidrCollections { get; }
    public abstract virtual IPaginatedEnumerable`1<ListCidrCollectionsResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<CollectionSummary> get_CidrCollections();
}
public interface Amazon.Route53.Model.IListCidrLocationsPaginator {
    public IPaginatedEnumerable`1<ListCidrLocationsResponse> Responses { get; }
    public IPaginatedEnumerable`1<LocationSummary> CidrLocations { get; }
    public abstract virtual IPaginatedEnumerable`1<ListCidrLocationsResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<LocationSummary> get_CidrLocations();
}
public interface Amazon.Route53.Model.IListHealthChecksPaginator {
    public IPaginatedEnumerable`1<ListHealthChecksResponse> Responses { get; }
    public IPaginatedEnumerable`1<HealthCheck> HealthChecks { get; }
    public abstract virtual IPaginatedEnumerable`1<ListHealthChecksResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<HealthCheck> get_HealthChecks();
}
public interface Amazon.Route53.Model.IListHostedZonesPaginator {
    public IPaginatedEnumerable`1<ListHostedZonesResponse> Responses { get; }
    public IPaginatedEnumerable`1<HostedZone> HostedZones { get; }
    public abstract virtual IPaginatedEnumerable`1<ListHostedZonesResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<HostedZone> get_HostedZones();
}
public interface Amazon.Route53.Model.IListQueryLoggingConfigsPaginator {
    public IPaginatedEnumerable`1<ListQueryLoggingConfigsResponse> Responses { get; }
    public IPaginatedEnumerable`1<QueryLoggingConfig> QueryLoggingConfigs { get; }
    public abstract virtual IPaginatedEnumerable`1<ListQueryLoggingConfigsResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<QueryLoggingConfig> get_QueryLoggingConfigs();
}
public interface Amazon.Route53.Model.IListResourceRecordSetsPaginator {
    public IPaginatedEnumerable`1<ListResourceRecordSetsResponse> Responses { get; }
    public IPaginatedEnumerable`1<ResourceRecordSet> ResourceRecordSets { get; }
    public abstract virtual IPaginatedEnumerable`1<ListResourceRecordSetsResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<ResourceRecordSet> get_ResourceRecordSets();
}
public class Amazon.Route53.Model.IncompatibleVersionException : AmazonRoute53Exception {
    public IncompatibleVersionException(string message);
    public IncompatibleVersionException(string message, Exception innerException);
    public IncompatibleVersionException(Exception innerException);
    public IncompatibleVersionException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public IncompatibleVersionException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Route53.Model.InsufficientCloudWatchLogsResourcePolicyException : AmazonRoute53Exception {
    public InsufficientCloudWatchLogsResourcePolicyException(string message);
    public InsufficientCloudWatchLogsResourcePolicyException(string message, Exception innerException);
    public InsufficientCloudWatchLogsResourcePolicyException(Exception innerException);
    public InsufficientCloudWatchLogsResourcePolicyException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public InsufficientCloudWatchLogsResourcePolicyException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.AccountLimitUnmarshaller : object {
    private static AccountLimitUnmarshaller _instance;
    public static AccountLimitUnmarshaller Instance { get; }
    private static AccountLimitUnmarshaller();
    public sealed virtual AccountLimit Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual AccountLimit Unmarshall(JsonUnmarshallerContext context);
    public static AccountLimitUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.ActivateKeySigningKeyRequestMarshaller : object {
    private static ActivateKeySigningKeyRequestMarshaller _instance;
    public static ActivateKeySigningKeyRequestMarshaller Instance { get; }
    private static ActivateKeySigningKeyRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ActivateKeySigningKeyRequest publicRequest);
    internal static ActivateKeySigningKeyRequestMarshaller GetInstance();
    public static ActivateKeySigningKeyRequestMarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.ActivateKeySigningKeyResponseUnmarshaller : XmlResponseUnmarshaller {
    private static ActivateKeySigningKeyResponseUnmarshaller _instance;
    public static ActivateKeySigningKeyResponseUnmarshaller Instance { get; }
    private static ActivateKeySigningKeyResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, ActivateKeySigningKeyResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ActivateKeySigningKeyResponseUnmarshaller GetInstance();
    public static ActivateKeySigningKeyResponseUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.AlarmIdentifierUnmarshaller : object {
    private static AlarmIdentifierUnmarshaller _instance;
    public static AlarmIdentifierUnmarshaller Instance { get; }
    private static AlarmIdentifierUnmarshaller();
    public sealed virtual AlarmIdentifier Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual AlarmIdentifier Unmarshall(JsonUnmarshallerContext context);
    public static AlarmIdentifierUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.AliasTargetUnmarshaller : object {
    private static AliasTargetUnmarshaller _instance;
    public static AliasTargetUnmarshaller Instance { get; }
    private static AliasTargetUnmarshaller();
    public sealed virtual AliasTarget Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual AliasTarget Unmarshall(JsonUnmarshallerContext context);
    public static AliasTargetUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.AssociateVPCWithHostedZoneRequestMarshaller : object {
    private static AssociateVPCWithHostedZoneRequestMarshaller _instance;
    public static AssociateVPCWithHostedZoneRequestMarshaller Instance { get; }
    private static AssociateVPCWithHostedZoneRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(AssociateVPCWithHostedZoneRequest publicRequest);
    internal static AssociateVPCWithHostedZoneRequestMarshaller GetInstance();
    public static AssociateVPCWithHostedZoneRequestMarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.AssociateVPCWithHostedZoneResponseUnmarshaller : XmlResponseUnmarshaller {
    private static AssociateVPCWithHostedZoneResponseUnmarshaller _instance;
    public static AssociateVPCWithHostedZoneResponseUnmarshaller Instance { get; }
    private static AssociateVPCWithHostedZoneResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, AssociateVPCWithHostedZoneResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static AssociateVPCWithHostedZoneResponseUnmarshaller GetInstance();
    public static AssociateVPCWithHostedZoneResponseUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.ChangeCidrCollectionRequestMarshaller : object {
    private static ChangeCidrCollectionRequestMarshaller _instance;
    public static ChangeCidrCollectionRequestMarshaller Instance { get; }
    private static ChangeCidrCollectionRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ChangeCidrCollectionRequest publicRequest);
    internal static ChangeCidrCollectionRequestMarshaller GetInstance();
    public static ChangeCidrCollectionRequestMarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.ChangeCidrCollectionResponseUnmarshaller : XmlResponseUnmarshaller {
    private static ChangeCidrCollectionResponseUnmarshaller _instance;
    public static ChangeCidrCollectionResponseUnmarshaller Instance { get; }
    private static ChangeCidrCollectionResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, ChangeCidrCollectionResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ChangeCidrCollectionResponseUnmarshaller GetInstance();
    public static ChangeCidrCollectionResponseUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.ChangeInfoUnmarshaller : object {
    private static ChangeInfoUnmarshaller _instance;
    public static ChangeInfoUnmarshaller Instance { get; }
    private static ChangeInfoUnmarshaller();
    public sealed virtual ChangeInfo Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ChangeInfo Unmarshall(JsonUnmarshallerContext context);
    public static ChangeInfoUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.ChangeResourceRecordSetsRequestMarshaller : object {
    private static ChangeResourceRecordSetsRequestMarshaller _instance;
    public static ChangeResourceRecordSetsRequestMarshaller Instance { get; }
    private static ChangeResourceRecordSetsRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ChangeResourceRecordSetsRequest publicRequest);
    internal static ChangeResourceRecordSetsRequestMarshaller GetInstance();
    public static ChangeResourceRecordSetsRequestMarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.ChangeResourceRecordSetsResponseUnmarshaller : XmlResponseUnmarshaller {
    private static ChangeResourceRecordSetsResponseUnmarshaller _instance;
    public static ChangeResourceRecordSetsResponseUnmarshaller Instance { get; }
    private static ChangeResourceRecordSetsResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, ChangeResourceRecordSetsResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ChangeResourceRecordSetsResponseUnmarshaller GetInstance();
    public static ChangeResourceRecordSetsResponseUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.ChangeTagsForResourceRequestMarshaller : object {
    private static ChangeTagsForResourceRequestMarshaller _instance;
    public static ChangeTagsForResourceRequestMarshaller Instance { get; }
    private static ChangeTagsForResourceRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ChangeTagsForResourceRequest publicRequest);
    internal static ChangeTagsForResourceRequestMarshaller GetInstance();
    public static ChangeTagsForResourceRequestMarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.ChangeTagsForResourceResponseUnmarshaller : XmlResponseUnmarshaller {
    private static ChangeTagsForResourceResponseUnmarshaller _instance;
    public static ChangeTagsForResourceResponseUnmarshaller Instance { get; }
    private static ChangeTagsForResourceResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ChangeTagsForResourceResponseUnmarshaller GetInstance();
    public static ChangeTagsForResourceResponseUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.CidrBlockInUseExceptionUnmarshaller : object {
    private static CidrBlockInUseExceptionUnmarshaller _instance;
    public static CidrBlockInUseExceptionUnmarshaller Instance { get; }
    private static CidrBlockInUseExceptionUnmarshaller();
    public sealed virtual CidrBlockInUseException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual CidrBlockInUseException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static CidrBlockInUseExceptionUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.CidrBlockSummaryUnmarshaller : object {
    private static CidrBlockSummaryUnmarshaller _instance;
    public static CidrBlockSummaryUnmarshaller Instance { get; }
    private static CidrBlockSummaryUnmarshaller();
    public sealed virtual CidrBlockSummary Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual CidrBlockSummary Unmarshall(JsonUnmarshallerContext context);
    public static CidrBlockSummaryUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.CidrCollectionAlreadyExistsExceptionUnmarshaller : object {
    private static CidrCollectionAlreadyExistsExceptionUnmarshaller _instance;
    public static CidrCollectionAlreadyExistsExceptionUnmarshaller Instance { get; }
    private static CidrCollectionAlreadyExistsExceptionUnmarshaller();
    public sealed virtual CidrCollectionAlreadyExistsException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual CidrCollectionAlreadyExistsException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static CidrCollectionAlreadyExistsExceptionUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.CidrCollectionInUseExceptionUnmarshaller : object {
    private static CidrCollectionInUseExceptionUnmarshaller _instance;
    public static CidrCollectionInUseExceptionUnmarshaller Instance { get; }
    private static CidrCollectionInUseExceptionUnmarshaller();
    public sealed virtual CidrCollectionInUseException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual CidrCollectionInUseException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static CidrCollectionInUseExceptionUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.CidrCollectionUnmarshaller : object {
    private static CidrCollectionUnmarshaller _instance;
    public static CidrCollectionUnmarshaller Instance { get; }
    private static CidrCollectionUnmarshaller();
    public sealed virtual CidrCollection Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual CidrCollection Unmarshall(JsonUnmarshallerContext context);
    public static CidrCollectionUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.CidrCollectionVersionMismatchExceptionUnmarshaller : object {
    private static CidrCollectionVersionMismatchExceptionUnmarshaller _instance;
    public static CidrCollectionVersionMismatchExceptionUnmarshaller Instance { get; }
    private static CidrCollectionVersionMismatchExceptionUnmarshaller();
    public sealed virtual CidrCollectionVersionMismatchException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual CidrCollectionVersionMismatchException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static CidrCollectionVersionMismatchExceptionUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.CidrRoutingConfigUnmarshaller : object {
    private static CidrRoutingConfigUnmarshaller _instance;
    public static CidrRoutingConfigUnmarshaller Instance { get; }
    private static CidrRoutingConfigUnmarshaller();
    public sealed virtual CidrRoutingConfig Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual CidrRoutingConfig Unmarshall(JsonUnmarshallerContext context);
    public static CidrRoutingConfigUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.CloudWatchAlarmConfigurationUnmarshaller : object {
    private static CloudWatchAlarmConfigurationUnmarshaller _instance;
    public static CloudWatchAlarmConfigurationUnmarshaller Instance { get; }
    private static CloudWatchAlarmConfigurationUnmarshaller();
    public sealed virtual CloudWatchAlarmConfiguration Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual CloudWatchAlarmConfiguration Unmarshall(JsonUnmarshallerContext context);
    public static CloudWatchAlarmConfigurationUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.CollectionSummaryUnmarshaller : object {
    private static CollectionSummaryUnmarshaller _instance;
    public static CollectionSummaryUnmarshaller Instance { get; }
    private static CollectionSummaryUnmarshaller();
    public sealed virtual CollectionSummary Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual CollectionSummary Unmarshall(JsonUnmarshallerContext context);
    public static CollectionSummaryUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.ConcurrentModificationExceptionUnmarshaller : object {
    private static ConcurrentModificationExceptionUnmarshaller _instance;
    public static ConcurrentModificationExceptionUnmarshaller Instance { get; }
    private static ConcurrentModificationExceptionUnmarshaller();
    public sealed virtual ConcurrentModificationException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ConcurrentModificationException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static ConcurrentModificationExceptionUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.ConflictingDomainExistsExceptionUnmarshaller : object {
    private static ConflictingDomainExistsExceptionUnmarshaller _instance;
    public static ConflictingDomainExistsExceptionUnmarshaller Instance { get; }
    private static ConflictingDomainExistsExceptionUnmarshaller();
    public sealed virtual ConflictingDomainExistsException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ConflictingDomainExistsException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static ConflictingDomainExistsExceptionUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.ConflictingTypesExceptionUnmarshaller : object {
    private static ConflictingTypesExceptionUnmarshaller _instance;
    public static ConflictingTypesExceptionUnmarshaller Instance { get; }
    private static ConflictingTypesExceptionUnmarshaller();
    public sealed virtual ConflictingTypesException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ConflictingTypesException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static ConflictingTypesExceptionUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.CoordinatesUnmarshaller : object {
    private static CoordinatesUnmarshaller _instance;
    public static CoordinatesUnmarshaller Instance { get; }
    private static CoordinatesUnmarshaller();
    public sealed virtual Coordinates Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual Coordinates Unmarshall(JsonUnmarshallerContext context);
    public static CoordinatesUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.CreateCidrCollectionRequestMarshaller : object {
    private static CreateCidrCollectionRequestMarshaller _instance;
    public static CreateCidrCollectionRequestMarshaller Instance { get; }
    private static CreateCidrCollectionRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(CreateCidrCollectionRequest publicRequest);
    internal static CreateCidrCollectionRequestMarshaller GetInstance();
    public static CreateCidrCollectionRequestMarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.CreateCidrCollectionResponseUnmarshaller : XmlResponseUnmarshaller {
    private static CreateCidrCollectionResponseUnmarshaller _instance;
    public static CreateCidrCollectionResponseUnmarshaller Instance { get; }
    private static CreateCidrCollectionResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, CreateCidrCollectionResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static CreateCidrCollectionResponseUnmarshaller GetInstance();
    public static CreateCidrCollectionResponseUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.CreateHealthCheckRequestMarshaller : object {
    private static CreateHealthCheckRequestMarshaller _instance;
    public static CreateHealthCheckRequestMarshaller Instance { get; }
    private static CreateHealthCheckRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(CreateHealthCheckRequest publicRequest);
    internal static CreateHealthCheckRequestMarshaller GetInstance();
    public static CreateHealthCheckRequestMarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.CreateHealthCheckResponseUnmarshaller : XmlResponseUnmarshaller {
    private static CreateHealthCheckResponseUnmarshaller _instance;
    public static CreateHealthCheckResponseUnmarshaller Instance { get; }
    private static CreateHealthCheckResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, CreateHealthCheckResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static CreateHealthCheckResponseUnmarshaller GetInstance();
    public static CreateHealthCheckResponseUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.CreateHostedZoneRequestMarshaller : object {
    private static CreateHostedZoneRequestMarshaller _instance;
    public static CreateHostedZoneRequestMarshaller Instance { get; }
    private static CreateHostedZoneRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(CreateHostedZoneRequest publicRequest);
    internal static CreateHostedZoneRequestMarshaller GetInstance();
    public static CreateHostedZoneRequestMarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.CreateHostedZoneResponseUnmarshaller : XmlResponseUnmarshaller {
    private static CreateHostedZoneResponseUnmarshaller _instance;
    public static CreateHostedZoneResponseUnmarshaller Instance { get; }
    private static CreateHostedZoneResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, CreateHostedZoneResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static CreateHostedZoneResponseUnmarshaller GetInstance();
    public static CreateHostedZoneResponseUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.CreateKeySigningKeyRequestMarshaller : object {
    private static CreateKeySigningKeyRequestMarshaller _instance;
    public static CreateKeySigningKeyRequestMarshaller Instance { get; }
    private static CreateKeySigningKeyRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(CreateKeySigningKeyRequest publicRequest);
    internal static CreateKeySigningKeyRequestMarshaller GetInstance();
    public static CreateKeySigningKeyRequestMarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.CreateKeySigningKeyResponseUnmarshaller : XmlResponseUnmarshaller {
    private static CreateKeySigningKeyResponseUnmarshaller _instance;
    public static CreateKeySigningKeyResponseUnmarshaller Instance { get; }
    private static CreateKeySigningKeyResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, CreateKeySigningKeyResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static CreateKeySigningKeyResponseUnmarshaller GetInstance();
    public static CreateKeySigningKeyResponseUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.CreateQueryLoggingConfigRequestMarshaller : object {
    private static CreateQueryLoggingConfigRequestMarshaller _instance;
    public static CreateQueryLoggingConfigRequestMarshaller Instance { get; }
    private static CreateQueryLoggingConfigRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(CreateQueryLoggingConfigRequest publicRequest);
    internal static CreateQueryLoggingConfigRequestMarshaller GetInstance();
    public static CreateQueryLoggingConfigRequestMarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.CreateQueryLoggingConfigResponseUnmarshaller : XmlResponseUnmarshaller {
    private static CreateQueryLoggingConfigResponseUnmarshaller _instance;
    public static CreateQueryLoggingConfigResponseUnmarshaller Instance { get; }
    private static CreateQueryLoggingConfigResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, CreateQueryLoggingConfigResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static CreateQueryLoggingConfigResponseUnmarshaller GetInstance();
    public static CreateQueryLoggingConfigResponseUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.CreateReusableDelegationSetRequestMarshaller : object {
    private static CreateReusableDelegationSetRequestMarshaller _instance;
    public static CreateReusableDelegationSetRequestMarshaller Instance { get; }
    private static CreateReusableDelegationSetRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(CreateReusableDelegationSetRequest publicRequest);
    internal static CreateReusableDelegationSetRequestMarshaller GetInstance();
    public static CreateReusableDelegationSetRequestMarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.CreateReusableDelegationSetResponseUnmarshaller : XmlResponseUnmarshaller {
    private static CreateReusableDelegationSetResponseUnmarshaller _instance;
    public static CreateReusableDelegationSetResponseUnmarshaller Instance { get; }
    private static CreateReusableDelegationSetResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, CreateReusableDelegationSetResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static CreateReusableDelegationSetResponseUnmarshaller GetInstance();
    public static CreateReusableDelegationSetResponseUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.CreateTrafficPolicyInstanceRequestMarshaller : object {
    private static CreateTrafficPolicyInstanceRequestMarshaller _instance;
    public static CreateTrafficPolicyInstanceRequestMarshaller Instance { get; }
    private static CreateTrafficPolicyInstanceRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(CreateTrafficPolicyInstanceRequest publicRequest);
    internal static CreateTrafficPolicyInstanceRequestMarshaller GetInstance();
    public static CreateTrafficPolicyInstanceRequestMarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.CreateTrafficPolicyInstanceResponseUnmarshaller : XmlResponseUnmarshaller {
    private static CreateTrafficPolicyInstanceResponseUnmarshaller _instance;
    public static CreateTrafficPolicyInstanceResponseUnmarshaller Instance { get; }
    private static CreateTrafficPolicyInstanceResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, CreateTrafficPolicyInstanceResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static CreateTrafficPolicyInstanceResponseUnmarshaller GetInstance();
    public static CreateTrafficPolicyInstanceResponseUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.CreateTrafficPolicyRequestMarshaller : object {
    private static CreateTrafficPolicyRequestMarshaller _instance;
    public static CreateTrafficPolicyRequestMarshaller Instance { get; }
    private static CreateTrafficPolicyRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(CreateTrafficPolicyRequest publicRequest);
    internal static CreateTrafficPolicyRequestMarshaller GetInstance();
    public static CreateTrafficPolicyRequestMarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.CreateTrafficPolicyResponseUnmarshaller : XmlResponseUnmarshaller {
    private static CreateTrafficPolicyResponseUnmarshaller _instance;
    public static CreateTrafficPolicyResponseUnmarshaller Instance { get; }
    private static CreateTrafficPolicyResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, CreateTrafficPolicyResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static CreateTrafficPolicyResponseUnmarshaller GetInstance();
    public static CreateTrafficPolicyResponseUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.CreateTrafficPolicyVersionRequestMarshaller : object {
    private static CreateTrafficPolicyVersionRequestMarshaller _instance;
    public static CreateTrafficPolicyVersionRequestMarshaller Instance { get; }
    private static CreateTrafficPolicyVersionRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(CreateTrafficPolicyVersionRequest publicRequest);
    internal static CreateTrafficPolicyVersionRequestMarshaller GetInstance();
    public static CreateTrafficPolicyVersionRequestMarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.CreateTrafficPolicyVersionResponseUnmarshaller : XmlResponseUnmarshaller {
    private static CreateTrafficPolicyVersionResponseUnmarshaller _instance;
    public static CreateTrafficPolicyVersionResponseUnmarshaller Instance { get; }
    private static CreateTrafficPolicyVersionResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, CreateTrafficPolicyVersionResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static CreateTrafficPolicyVersionResponseUnmarshaller GetInstance();
    public static CreateTrafficPolicyVersionResponseUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.CreateVPCAssociationAuthorizationRequestMarshaller : object {
    private static CreateVPCAssociationAuthorizationRequestMarshaller _instance;
    public static CreateVPCAssociationAuthorizationRequestMarshaller Instance { get; }
    private static CreateVPCAssociationAuthorizationRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(CreateVPCAssociationAuthorizationRequest publicRequest);
    internal static CreateVPCAssociationAuthorizationRequestMarshaller GetInstance();
    public static CreateVPCAssociationAuthorizationRequestMarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.CreateVPCAssociationAuthorizationResponseUnmarshaller : XmlResponseUnmarshaller {
    private static CreateVPCAssociationAuthorizationResponseUnmarshaller _instance;
    public static CreateVPCAssociationAuthorizationResponseUnmarshaller Instance { get; }
    private static CreateVPCAssociationAuthorizationResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, CreateVPCAssociationAuthorizationResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static CreateVPCAssociationAuthorizationResponseUnmarshaller GetInstance();
    public static CreateVPCAssociationAuthorizationResponseUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.DeactivateKeySigningKeyRequestMarshaller : object {
    private static DeactivateKeySigningKeyRequestMarshaller _instance;
    public static DeactivateKeySigningKeyRequestMarshaller Instance { get; }
    private static DeactivateKeySigningKeyRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeactivateKeySigningKeyRequest publicRequest);
    internal static DeactivateKeySigningKeyRequestMarshaller GetInstance();
    public static DeactivateKeySigningKeyRequestMarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.DeactivateKeySigningKeyResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DeactivateKeySigningKeyResponseUnmarshaller _instance;
    public static DeactivateKeySigningKeyResponseUnmarshaller Instance { get; }
    private static DeactivateKeySigningKeyResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DeactivateKeySigningKeyResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DeactivateKeySigningKeyResponseUnmarshaller GetInstance();
    public static DeactivateKeySigningKeyResponseUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.DelegationSetAlreadyCreatedExceptionUnmarshaller : object {
    private static DelegationSetAlreadyCreatedExceptionUnmarshaller _instance;
    public static DelegationSetAlreadyCreatedExceptionUnmarshaller Instance { get; }
    private static DelegationSetAlreadyCreatedExceptionUnmarshaller();
    public sealed virtual DelegationSetAlreadyCreatedException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual DelegationSetAlreadyCreatedException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static DelegationSetAlreadyCreatedExceptionUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.DelegationSetAlreadyReusableExceptionUnmarshaller : object {
    private static DelegationSetAlreadyReusableExceptionUnmarshaller _instance;
    public static DelegationSetAlreadyReusableExceptionUnmarshaller Instance { get; }
    private static DelegationSetAlreadyReusableExceptionUnmarshaller();
    public sealed virtual DelegationSetAlreadyReusableException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual DelegationSetAlreadyReusableException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static DelegationSetAlreadyReusableExceptionUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.DelegationSetInUseExceptionUnmarshaller : object {
    private static DelegationSetInUseExceptionUnmarshaller _instance;
    public static DelegationSetInUseExceptionUnmarshaller Instance { get; }
    private static DelegationSetInUseExceptionUnmarshaller();
    public sealed virtual DelegationSetInUseException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual DelegationSetInUseException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static DelegationSetInUseExceptionUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.DelegationSetNotAvailableExceptionUnmarshaller : object {
    private static DelegationSetNotAvailableExceptionUnmarshaller _instance;
    public static DelegationSetNotAvailableExceptionUnmarshaller Instance { get; }
    private static DelegationSetNotAvailableExceptionUnmarshaller();
    public sealed virtual DelegationSetNotAvailableException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual DelegationSetNotAvailableException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static DelegationSetNotAvailableExceptionUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.DelegationSetNotReusableExceptionUnmarshaller : object {
    private static DelegationSetNotReusableExceptionUnmarshaller _instance;
    public static DelegationSetNotReusableExceptionUnmarshaller Instance { get; }
    private static DelegationSetNotReusableExceptionUnmarshaller();
    public sealed virtual DelegationSetNotReusableException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual DelegationSetNotReusableException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static DelegationSetNotReusableExceptionUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.DelegationSetUnmarshaller : object {
    private static DelegationSetUnmarshaller _instance;
    public static DelegationSetUnmarshaller Instance { get; }
    private static DelegationSetUnmarshaller();
    public sealed virtual DelegationSet Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual DelegationSet Unmarshall(JsonUnmarshallerContext context);
    public static DelegationSetUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.DeleteCidrCollectionRequestMarshaller : object {
    private static DeleteCidrCollectionRequestMarshaller _instance;
    public static DeleteCidrCollectionRequestMarshaller Instance { get; }
    private static DeleteCidrCollectionRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeleteCidrCollectionRequest publicRequest);
    internal static DeleteCidrCollectionRequestMarshaller GetInstance();
    public static DeleteCidrCollectionRequestMarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.DeleteCidrCollectionResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DeleteCidrCollectionResponseUnmarshaller _instance;
    public static DeleteCidrCollectionResponseUnmarshaller Instance { get; }
    private static DeleteCidrCollectionResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DeleteCidrCollectionResponseUnmarshaller GetInstance();
    public static DeleteCidrCollectionResponseUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.DeleteHealthCheckRequestMarshaller : object {
    private static DeleteHealthCheckRequestMarshaller _instance;
    public static DeleteHealthCheckRequestMarshaller Instance { get; }
    private static DeleteHealthCheckRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeleteHealthCheckRequest publicRequest);
    internal static DeleteHealthCheckRequestMarshaller GetInstance();
    public static DeleteHealthCheckRequestMarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.DeleteHealthCheckResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DeleteHealthCheckResponseUnmarshaller _instance;
    public static DeleteHealthCheckResponseUnmarshaller Instance { get; }
    private static DeleteHealthCheckResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DeleteHealthCheckResponseUnmarshaller GetInstance();
    public static DeleteHealthCheckResponseUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.DeleteHostedZoneRequestMarshaller : object {
    private static DeleteHostedZoneRequestMarshaller _instance;
    public static DeleteHostedZoneRequestMarshaller Instance { get; }
    private static DeleteHostedZoneRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeleteHostedZoneRequest publicRequest);
    internal static DeleteHostedZoneRequestMarshaller GetInstance();
    public static DeleteHostedZoneRequestMarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.DeleteHostedZoneResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DeleteHostedZoneResponseUnmarshaller _instance;
    public static DeleteHostedZoneResponseUnmarshaller Instance { get; }
    private static DeleteHostedZoneResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DeleteHostedZoneResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DeleteHostedZoneResponseUnmarshaller GetInstance();
    public static DeleteHostedZoneResponseUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.DeleteKeySigningKeyRequestMarshaller : object {
    private static DeleteKeySigningKeyRequestMarshaller _instance;
    public static DeleteKeySigningKeyRequestMarshaller Instance { get; }
    private static DeleteKeySigningKeyRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeleteKeySigningKeyRequest publicRequest);
    internal static DeleteKeySigningKeyRequestMarshaller GetInstance();
    public static DeleteKeySigningKeyRequestMarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.DeleteKeySigningKeyResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DeleteKeySigningKeyResponseUnmarshaller _instance;
    public static DeleteKeySigningKeyResponseUnmarshaller Instance { get; }
    private static DeleteKeySigningKeyResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DeleteKeySigningKeyResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DeleteKeySigningKeyResponseUnmarshaller GetInstance();
    public static DeleteKeySigningKeyResponseUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.DeleteQueryLoggingConfigRequestMarshaller : object {
    private static DeleteQueryLoggingConfigRequestMarshaller _instance;
    public static DeleteQueryLoggingConfigRequestMarshaller Instance { get; }
    private static DeleteQueryLoggingConfigRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeleteQueryLoggingConfigRequest publicRequest);
    internal static DeleteQueryLoggingConfigRequestMarshaller GetInstance();
    public static DeleteQueryLoggingConfigRequestMarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.DeleteQueryLoggingConfigResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DeleteQueryLoggingConfigResponseUnmarshaller _instance;
    public static DeleteQueryLoggingConfigResponseUnmarshaller Instance { get; }
    private static DeleteQueryLoggingConfigResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DeleteQueryLoggingConfigResponseUnmarshaller GetInstance();
    public static DeleteQueryLoggingConfigResponseUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.DeleteReusableDelegationSetRequestMarshaller : object {
    private static DeleteReusableDelegationSetRequestMarshaller _instance;
    public static DeleteReusableDelegationSetRequestMarshaller Instance { get; }
    private static DeleteReusableDelegationSetRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeleteReusableDelegationSetRequest publicRequest);
    internal static DeleteReusableDelegationSetRequestMarshaller GetInstance();
    public static DeleteReusableDelegationSetRequestMarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.DeleteReusableDelegationSetResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DeleteReusableDelegationSetResponseUnmarshaller _instance;
    public static DeleteReusableDelegationSetResponseUnmarshaller Instance { get; }
    private static DeleteReusableDelegationSetResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DeleteReusableDelegationSetResponseUnmarshaller GetInstance();
    public static DeleteReusableDelegationSetResponseUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.DeleteTrafficPolicyInstanceRequestMarshaller : object {
    private static DeleteTrafficPolicyInstanceRequestMarshaller _instance;
    public static DeleteTrafficPolicyInstanceRequestMarshaller Instance { get; }
    private static DeleteTrafficPolicyInstanceRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeleteTrafficPolicyInstanceRequest publicRequest);
    internal static DeleteTrafficPolicyInstanceRequestMarshaller GetInstance();
    public static DeleteTrafficPolicyInstanceRequestMarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.DeleteTrafficPolicyInstanceResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DeleteTrafficPolicyInstanceResponseUnmarshaller _instance;
    public static DeleteTrafficPolicyInstanceResponseUnmarshaller Instance { get; }
    private static DeleteTrafficPolicyInstanceResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DeleteTrafficPolicyInstanceResponseUnmarshaller GetInstance();
    public static DeleteTrafficPolicyInstanceResponseUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.DeleteTrafficPolicyRequestMarshaller : object {
    private static DeleteTrafficPolicyRequestMarshaller _instance;
    public static DeleteTrafficPolicyRequestMarshaller Instance { get; }
    private static DeleteTrafficPolicyRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeleteTrafficPolicyRequest publicRequest);
    internal static DeleteTrafficPolicyRequestMarshaller GetInstance();
    public static DeleteTrafficPolicyRequestMarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.DeleteTrafficPolicyResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DeleteTrafficPolicyResponseUnmarshaller _instance;
    public static DeleteTrafficPolicyResponseUnmarshaller Instance { get; }
    private static DeleteTrafficPolicyResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DeleteTrafficPolicyResponseUnmarshaller GetInstance();
    public static DeleteTrafficPolicyResponseUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.DeleteVPCAssociationAuthorizationRequestMarshaller : object {
    private static DeleteVPCAssociationAuthorizationRequestMarshaller _instance;
    public static DeleteVPCAssociationAuthorizationRequestMarshaller Instance { get; }
    private static DeleteVPCAssociationAuthorizationRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeleteVPCAssociationAuthorizationRequest publicRequest);
    internal static DeleteVPCAssociationAuthorizationRequestMarshaller GetInstance();
    public static DeleteVPCAssociationAuthorizationRequestMarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.DeleteVPCAssociationAuthorizationResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DeleteVPCAssociationAuthorizationResponseUnmarshaller _instance;
    public static DeleteVPCAssociationAuthorizationResponseUnmarshaller Instance { get; }
    private static DeleteVPCAssociationAuthorizationResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DeleteVPCAssociationAuthorizationResponseUnmarshaller GetInstance();
    public static DeleteVPCAssociationAuthorizationResponseUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.DimensionUnmarshaller : object {
    private static DimensionUnmarshaller _instance;
    public static DimensionUnmarshaller Instance { get; }
    private static DimensionUnmarshaller();
    public sealed virtual Dimension Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual Dimension Unmarshall(JsonUnmarshallerContext context);
    public static DimensionUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.DisableHostedZoneDNSSECRequestMarshaller : object {
    private static DisableHostedZoneDNSSECRequestMarshaller _instance;
    public static DisableHostedZoneDNSSECRequestMarshaller Instance { get; }
    private static DisableHostedZoneDNSSECRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DisableHostedZoneDNSSECRequest publicRequest);
    internal static DisableHostedZoneDNSSECRequestMarshaller GetInstance();
    public static DisableHostedZoneDNSSECRequestMarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.DisableHostedZoneDNSSECResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DisableHostedZoneDNSSECResponseUnmarshaller _instance;
    public static DisableHostedZoneDNSSECResponseUnmarshaller Instance { get; }
    private static DisableHostedZoneDNSSECResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DisableHostedZoneDNSSECResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DisableHostedZoneDNSSECResponseUnmarshaller GetInstance();
    public static DisableHostedZoneDNSSECResponseUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.DisassociateVPCFromHostedZoneRequestMarshaller : object {
    private static DisassociateVPCFromHostedZoneRequestMarshaller _instance;
    public static DisassociateVPCFromHostedZoneRequestMarshaller Instance { get; }
    private static DisassociateVPCFromHostedZoneRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DisassociateVPCFromHostedZoneRequest publicRequest);
    internal static DisassociateVPCFromHostedZoneRequestMarshaller GetInstance();
    public static DisassociateVPCFromHostedZoneRequestMarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.DisassociateVPCFromHostedZoneResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DisassociateVPCFromHostedZoneResponseUnmarshaller _instance;
    public static DisassociateVPCFromHostedZoneResponseUnmarshaller Instance { get; }
    private static DisassociateVPCFromHostedZoneResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DisassociateVPCFromHostedZoneResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DisassociateVPCFromHostedZoneResponseUnmarshaller GetInstance();
    public static DisassociateVPCFromHostedZoneResponseUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.DNSSECNotFoundExceptionUnmarshaller : object {
    private static DNSSECNotFoundExceptionUnmarshaller _instance;
    public static DNSSECNotFoundExceptionUnmarshaller Instance { get; }
    private static DNSSECNotFoundExceptionUnmarshaller();
    public sealed virtual DNSSECNotFoundException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual DNSSECNotFoundException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static DNSSECNotFoundExceptionUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.DNSSECStatusUnmarshaller : object {
    private static DNSSECStatusUnmarshaller _instance;
    public static DNSSECStatusUnmarshaller Instance { get; }
    private static DNSSECStatusUnmarshaller();
    public sealed virtual DNSSECStatus Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual DNSSECStatus Unmarshall(JsonUnmarshallerContext context);
    public static DNSSECStatusUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.EnableHostedZoneDNSSECRequestMarshaller : object {
    private static EnableHostedZoneDNSSECRequestMarshaller _instance;
    public static EnableHostedZoneDNSSECRequestMarshaller Instance { get; }
    private static EnableHostedZoneDNSSECRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(EnableHostedZoneDNSSECRequest publicRequest);
    internal static EnableHostedZoneDNSSECRequestMarshaller GetInstance();
    public static EnableHostedZoneDNSSECRequestMarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.EnableHostedZoneDNSSECResponseUnmarshaller : XmlResponseUnmarshaller {
    private static EnableHostedZoneDNSSECResponseUnmarshaller _instance;
    public static EnableHostedZoneDNSSECResponseUnmarshaller Instance { get; }
    private static EnableHostedZoneDNSSECResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, EnableHostedZoneDNSSECResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static EnableHostedZoneDNSSECResponseUnmarshaller GetInstance();
    public static EnableHostedZoneDNSSECResponseUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.GeoLocationDetailsUnmarshaller : object {
    private static GeoLocationDetailsUnmarshaller _instance;
    public static GeoLocationDetailsUnmarshaller Instance { get; }
    private static GeoLocationDetailsUnmarshaller();
    public sealed virtual GeoLocationDetails Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual GeoLocationDetails Unmarshall(JsonUnmarshallerContext context);
    public static GeoLocationDetailsUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.GeoLocationUnmarshaller : object {
    private static GeoLocationUnmarshaller _instance;
    public static GeoLocationUnmarshaller Instance { get; }
    private static GeoLocationUnmarshaller();
    public sealed virtual GeoLocation Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual GeoLocation Unmarshall(JsonUnmarshallerContext context);
    public static GeoLocationUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.GeoProximityLocationUnmarshaller : object {
    private static GeoProximityLocationUnmarshaller _instance;
    public static GeoProximityLocationUnmarshaller Instance { get; }
    private static GeoProximityLocationUnmarshaller();
    public sealed virtual GeoProximityLocation Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual GeoProximityLocation Unmarshall(JsonUnmarshallerContext context);
    public static GeoProximityLocationUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.GetAccountLimitRequestMarshaller : object {
    private static GetAccountLimitRequestMarshaller _instance;
    public static GetAccountLimitRequestMarshaller Instance { get; }
    private static GetAccountLimitRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(GetAccountLimitRequest publicRequest);
    internal static GetAccountLimitRequestMarshaller GetInstance();
    public static GetAccountLimitRequestMarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.GetAccountLimitResponseUnmarshaller : XmlResponseUnmarshaller {
    private static GetAccountLimitResponseUnmarshaller _instance;
    public static GetAccountLimitResponseUnmarshaller Instance { get; }
    private static GetAccountLimitResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, GetAccountLimitResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static GetAccountLimitResponseUnmarshaller GetInstance();
    public static GetAccountLimitResponseUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.GetChangeRequestMarshaller : object {
    private static GetChangeRequestMarshaller _instance;
    public static GetChangeRequestMarshaller Instance { get; }
    private static GetChangeRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(GetChangeRequest publicRequest);
    internal static GetChangeRequestMarshaller GetInstance();
    public static GetChangeRequestMarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.GetChangeResponseUnmarshaller : XmlResponseUnmarshaller {
    private static GetChangeResponseUnmarshaller _instance;
    public static GetChangeResponseUnmarshaller Instance { get; }
    private static GetChangeResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, GetChangeResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static GetChangeResponseUnmarshaller GetInstance();
    public static GetChangeResponseUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.GetCheckerIpRangesRequestMarshaller : object {
    private static GetCheckerIpRangesRequestMarshaller _instance;
    public static GetCheckerIpRangesRequestMarshaller Instance { get; }
    private static GetCheckerIpRangesRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(GetCheckerIpRangesRequest publicRequest);
    internal static GetCheckerIpRangesRequestMarshaller GetInstance();
    public static GetCheckerIpRangesRequestMarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.GetCheckerIpRangesResponseUnmarshaller : XmlResponseUnmarshaller {
    private static GetCheckerIpRangesResponseUnmarshaller _instance;
    public static GetCheckerIpRangesResponseUnmarshaller Instance { get; }
    private static GetCheckerIpRangesResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, GetCheckerIpRangesResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static GetCheckerIpRangesResponseUnmarshaller GetInstance();
    public static GetCheckerIpRangesResponseUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.GetDNSSECRequestMarshaller : object {
    private static GetDNSSECRequestMarshaller _instance;
    public static GetDNSSECRequestMarshaller Instance { get; }
    private static GetDNSSECRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(GetDNSSECRequest publicRequest);
    internal static GetDNSSECRequestMarshaller GetInstance();
    public static GetDNSSECRequestMarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.GetDNSSECResponseUnmarshaller : XmlResponseUnmarshaller {
    private static GetDNSSECResponseUnmarshaller _instance;
    public static GetDNSSECResponseUnmarshaller Instance { get; }
    private static GetDNSSECResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, GetDNSSECResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static GetDNSSECResponseUnmarshaller GetInstance();
    public static GetDNSSECResponseUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.GetGeoLocationRequestMarshaller : object {
    private static GetGeoLocationRequestMarshaller _instance;
    public static GetGeoLocationRequestMarshaller Instance { get; }
    private static GetGeoLocationRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(GetGeoLocationRequest publicRequest);
    internal static GetGeoLocationRequestMarshaller GetInstance();
    public static GetGeoLocationRequestMarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.GetGeoLocationResponseUnmarshaller : XmlResponseUnmarshaller {
    private static GetGeoLocationResponseUnmarshaller _instance;
    public static GetGeoLocationResponseUnmarshaller Instance { get; }
    private static GetGeoLocationResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, GetGeoLocationResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static GetGeoLocationResponseUnmarshaller GetInstance();
    public static GetGeoLocationResponseUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.GetHealthCheckCountRequestMarshaller : object {
    private static GetHealthCheckCountRequestMarshaller _instance;
    public static GetHealthCheckCountRequestMarshaller Instance { get; }
    private static GetHealthCheckCountRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(GetHealthCheckCountRequest publicRequest);
    internal static GetHealthCheckCountRequestMarshaller GetInstance();
    public static GetHealthCheckCountRequestMarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.GetHealthCheckCountResponseUnmarshaller : XmlResponseUnmarshaller {
    private static GetHealthCheckCountResponseUnmarshaller _instance;
    public static GetHealthCheckCountResponseUnmarshaller Instance { get; }
    private static GetHealthCheckCountResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, GetHealthCheckCountResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static GetHealthCheckCountResponseUnmarshaller GetInstance();
    public static GetHealthCheckCountResponseUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.GetHealthCheckLastFailureReasonRequestMarshaller : object {
    private static GetHealthCheckLastFailureReasonRequestMarshaller _instance;
    public static GetHealthCheckLastFailureReasonRequestMarshaller Instance { get; }
    private static GetHealthCheckLastFailureReasonRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(GetHealthCheckLastFailureReasonRequest publicRequest);
    internal static GetHealthCheckLastFailureReasonRequestMarshaller GetInstance();
    public static GetHealthCheckLastFailureReasonRequestMarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.GetHealthCheckLastFailureReasonResponseUnmarshaller : XmlResponseUnmarshaller {
    private static GetHealthCheckLastFailureReasonResponseUnmarshaller _instance;
    public static GetHealthCheckLastFailureReasonResponseUnmarshaller Instance { get; }
    private static GetHealthCheckLastFailureReasonResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, GetHealthCheckLastFailureReasonResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static GetHealthCheckLastFailureReasonResponseUnmarshaller GetInstance();
    public static GetHealthCheckLastFailureReasonResponseUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.GetHealthCheckRequestMarshaller : object {
    private static GetHealthCheckRequestMarshaller _instance;
    public static GetHealthCheckRequestMarshaller Instance { get; }
    private static GetHealthCheckRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(GetHealthCheckRequest publicRequest);
    internal static GetHealthCheckRequestMarshaller GetInstance();
    public static GetHealthCheckRequestMarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.GetHealthCheckResponseUnmarshaller : XmlResponseUnmarshaller {
    private static GetHealthCheckResponseUnmarshaller _instance;
    public static GetHealthCheckResponseUnmarshaller Instance { get; }
    private static GetHealthCheckResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, GetHealthCheckResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static GetHealthCheckResponseUnmarshaller GetInstance();
    public static GetHealthCheckResponseUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.GetHealthCheckStatusRequestMarshaller : object {
    private static GetHealthCheckStatusRequestMarshaller _instance;
    public static GetHealthCheckStatusRequestMarshaller Instance { get; }
    private static GetHealthCheckStatusRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(GetHealthCheckStatusRequest publicRequest);
    internal static GetHealthCheckStatusRequestMarshaller GetInstance();
    public static GetHealthCheckStatusRequestMarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.GetHealthCheckStatusResponseUnmarshaller : XmlResponseUnmarshaller {
    private static GetHealthCheckStatusResponseUnmarshaller _instance;
    public static GetHealthCheckStatusResponseUnmarshaller Instance { get; }
    private static GetHealthCheckStatusResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, GetHealthCheckStatusResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static GetHealthCheckStatusResponseUnmarshaller GetInstance();
    public static GetHealthCheckStatusResponseUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.GetHostedZoneCountRequestMarshaller : object {
    private static GetHostedZoneCountRequestMarshaller _instance;
    public static GetHostedZoneCountRequestMarshaller Instance { get; }
    private static GetHostedZoneCountRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(GetHostedZoneCountRequest publicRequest);
    internal static GetHostedZoneCountRequestMarshaller GetInstance();
    public static GetHostedZoneCountRequestMarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.GetHostedZoneCountResponseUnmarshaller : XmlResponseUnmarshaller {
    private static GetHostedZoneCountResponseUnmarshaller _instance;
    public static GetHostedZoneCountResponseUnmarshaller Instance { get; }
    private static GetHostedZoneCountResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, GetHostedZoneCountResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static GetHostedZoneCountResponseUnmarshaller GetInstance();
    public static GetHostedZoneCountResponseUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.GetHostedZoneLimitRequestMarshaller : object {
    private static GetHostedZoneLimitRequestMarshaller _instance;
    public static GetHostedZoneLimitRequestMarshaller Instance { get; }
    private static GetHostedZoneLimitRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(GetHostedZoneLimitRequest publicRequest);
    internal static GetHostedZoneLimitRequestMarshaller GetInstance();
    public static GetHostedZoneLimitRequestMarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.GetHostedZoneLimitResponseUnmarshaller : XmlResponseUnmarshaller {
    private static GetHostedZoneLimitResponseUnmarshaller _instance;
    public static GetHostedZoneLimitResponseUnmarshaller Instance { get; }
    private static GetHostedZoneLimitResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, GetHostedZoneLimitResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static GetHostedZoneLimitResponseUnmarshaller GetInstance();
    public static GetHostedZoneLimitResponseUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.GetHostedZoneRequestMarshaller : object {
    private static GetHostedZoneRequestMarshaller _instance;
    public static GetHostedZoneRequestMarshaller Instance { get; }
    private static GetHostedZoneRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(GetHostedZoneRequest publicRequest);
    internal static GetHostedZoneRequestMarshaller GetInstance();
    public static GetHostedZoneRequestMarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.GetHostedZoneResponseUnmarshaller : XmlResponseUnmarshaller {
    private static GetHostedZoneResponseUnmarshaller _instance;
    public static GetHostedZoneResponseUnmarshaller Instance { get; }
    private static GetHostedZoneResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, GetHostedZoneResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static GetHostedZoneResponseUnmarshaller GetInstance();
    public static GetHostedZoneResponseUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.GetQueryLoggingConfigRequestMarshaller : object {
    private static GetQueryLoggingConfigRequestMarshaller _instance;
    public static GetQueryLoggingConfigRequestMarshaller Instance { get; }
    private static GetQueryLoggingConfigRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(GetQueryLoggingConfigRequest publicRequest);
    internal static GetQueryLoggingConfigRequestMarshaller GetInstance();
    public static GetQueryLoggingConfigRequestMarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.GetQueryLoggingConfigResponseUnmarshaller : XmlResponseUnmarshaller {
    private static GetQueryLoggingConfigResponseUnmarshaller _instance;
    public static GetQueryLoggingConfigResponseUnmarshaller Instance { get; }
    private static GetQueryLoggingConfigResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, GetQueryLoggingConfigResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static GetQueryLoggingConfigResponseUnmarshaller GetInstance();
    public static GetQueryLoggingConfigResponseUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.GetReusableDelegationSetLimitRequestMarshaller : object {
    private static GetReusableDelegationSetLimitRequestMarshaller _instance;
    public static GetReusableDelegationSetLimitRequestMarshaller Instance { get; }
    private static GetReusableDelegationSetLimitRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(GetReusableDelegationSetLimitRequest publicRequest);
    internal static GetReusableDelegationSetLimitRequestMarshaller GetInstance();
    public static GetReusableDelegationSetLimitRequestMarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.GetReusableDelegationSetLimitResponseUnmarshaller : XmlResponseUnmarshaller {
    private static GetReusableDelegationSetLimitResponseUnmarshaller _instance;
    public static GetReusableDelegationSetLimitResponseUnmarshaller Instance { get; }
    private static GetReusableDelegationSetLimitResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, GetReusableDelegationSetLimitResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static GetReusableDelegationSetLimitResponseUnmarshaller GetInstance();
    public static GetReusableDelegationSetLimitResponseUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.GetReusableDelegationSetRequestMarshaller : object {
    private static GetReusableDelegationSetRequestMarshaller _instance;
    public static GetReusableDelegationSetRequestMarshaller Instance { get; }
    private static GetReusableDelegationSetRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(GetReusableDelegationSetRequest publicRequest);
    internal static GetReusableDelegationSetRequestMarshaller GetInstance();
    public static GetReusableDelegationSetRequestMarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.GetReusableDelegationSetResponseUnmarshaller : XmlResponseUnmarshaller {
    private static GetReusableDelegationSetResponseUnmarshaller _instance;
    public static GetReusableDelegationSetResponseUnmarshaller Instance { get; }
    private static GetReusableDelegationSetResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, GetReusableDelegationSetResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static GetReusableDelegationSetResponseUnmarshaller GetInstance();
    public static GetReusableDelegationSetResponseUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.GetTrafficPolicyInstanceCountRequestMarshaller : object {
    private static GetTrafficPolicyInstanceCountRequestMarshaller _instance;
    public static GetTrafficPolicyInstanceCountRequestMarshaller Instance { get; }
    private static GetTrafficPolicyInstanceCountRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(GetTrafficPolicyInstanceCountRequest publicRequest);
    internal static GetTrafficPolicyInstanceCountRequestMarshaller GetInstance();
    public static GetTrafficPolicyInstanceCountRequestMarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.GetTrafficPolicyInstanceCountResponseUnmarshaller : XmlResponseUnmarshaller {
    private static GetTrafficPolicyInstanceCountResponseUnmarshaller _instance;
    public static GetTrafficPolicyInstanceCountResponseUnmarshaller Instance { get; }
    private static GetTrafficPolicyInstanceCountResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, GetTrafficPolicyInstanceCountResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static GetTrafficPolicyInstanceCountResponseUnmarshaller GetInstance();
    public static GetTrafficPolicyInstanceCountResponseUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.GetTrafficPolicyInstanceRequestMarshaller : object {
    private static GetTrafficPolicyInstanceRequestMarshaller _instance;
    public static GetTrafficPolicyInstanceRequestMarshaller Instance { get; }
    private static GetTrafficPolicyInstanceRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(GetTrafficPolicyInstanceRequest publicRequest);
    internal static GetTrafficPolicyInstanceRequestMarshaller GetInstance();
    public static GetTrafficPolicyInstanceRequestMarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.GetTrafficPolicyInstanceResponseUnmarshaller : XmlResponseUnmarshaller {
    private static GetTrafficPolicyInstanceResponseUnmarshaller _instance;
    public static GetTrafficPolicyInstanceResponseUnmarshaller Instance { get; }
    private static GetTrafficPolicyInstanceResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, GetTrafficPolicyInstanceResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static GetTrafficPolicyInstanceResponseUnmarshaller GetInstance();
    public static GetTrafficPolicyInstanceResponseUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.GetTrafficPolicyRequestMarshaller : object {
    private static GetTrafficPolicyRequestMarshaller _instance;
    public static GetTrafficPolicyRequestMarshaller Instance { get; }
    private static GetTrafficPolicyRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(GetTrafficPolicyRequest publicRequest);
    internal static GetTrafficPolicyRequestMarshaller GetInstance();
    public static GetTrafficPolicyRequestMarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.GetTrafficPolicyResponseUnmarshaller : XmlResponseUnmarshaller {
    private static GetTrafficPolicyResponseUnmarshaller _instance;
    public static GetTrafficPolicyResponseUnmarshaller Instance { get; }
    private static GetTrafficPolicyResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, GetTrafficPolicyResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static GetTrafficPolicyResponseUnmarshaller GetInstance();
    public static GetTrafficPolicyResponseUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.HealthCheckAlreadyExistsExceptionUnmarshaller : object {
    private static HealthCheckAlreadyExistsExceptionUnmarshaller _instance;
    public static HealthCheckAlreadyExistsExceptionUnmarshaller Instance { get; }
    private static HealthCheckAlreadyExistsExceptionUnmarshaller();
    public sealed virtual HealthCheckAlreadyExistsException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual HealthCheckAlreadyExistsException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static HealthCheckAlreadyExistsExceptionUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.HealthCheckConfigUnmarshaller : object {
    private static HealthCheckConfigUnmarshaller _instance;
    public static HealthCheckConfigUnmarshaller Instance { get; }
    private static HealthCheckConfigUnmarshaller();
    public sealed virtual HealthCheckConfig Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual HealthCheckConfig Unmarshall(JsonUnmarshallerContext context);
    public static HealthCheckConfigUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.HealthCheckInUseExceptionUnmarshaller : object {
    private static HealthCheckInUseExceptionUnmarshaller _instance;
    public static HealthCheckInUseExceptionUnmarshaller Instance { get; }
    private static HealthCheckInUseExceptionUnmarshaller();
    public sealed virtual HealthCheckInUseException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual HealthCheckInUseException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static HealthCheckInUseExceptionUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.HealthCheckObservationUnmarshaller : object {
    private static HealthCheckObservationUnmarshaller _instance;
    public static HealthCheckObservationUnmarshaller Instance { get; }
    private static HealthCheckObservationUnmarshaller();
    public sealed virtual HealthCheckObservation Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual HealthCheckObservation Unmarshall(JsonUnmarshallerContext context);
    public static HealthCheckObservationUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.HealthCheckUnmarshaller : object {
    private static HealthCheckUnmarshaller _instance;
    public static HealthCheckUnmarshaller Instance { get; }
    private static HealthCheckUnmarshaller();
    public sealed virtual HealthCheck Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual HealthCheck Unmarshall(JsonUnmarshallerContext context);
    public static HealthCheckUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.HealthCheckVersionMismatchExceptionUnmarshaller : object {
    private static HealthCheckVersionMismatchExceptionUnmarshaller _instance;
    public static HealthCheckVersionMismatchExceptionUnmarshaller Instance { get; }
    private static HealthCheckVersionMismatchExceptionUnmarshaller();
    public sealed virtual HealthCheckVersionMismatchException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual HealthCheckVersionMismatchException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static HealthCheckVersionMismatchExceptionUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.HostedZoneAlreadyExistsExceptionUnmarshaller : object {
    private static HostedZoneAlreadyExistsExceptionUnmarshaller _instance;
    public static HostedZoneAlreadyExistsExceptionUnmarshaller Instance { get; }
    private static HostedZoneAlreadyExistsExceptionUnmarshaller();
    public sealed virtual HostedZoneAlreadyExistsException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual HostedZoneAlreadyExistsException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static HostedZoneAlreadyExistsExceptionUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.HostedZoneConfigUnmarshaller : object {
    private static HostedZoneConfigUnmarshaller _instance;
    public static HostedZoneConfigUnmarshaller Instance { get; }
    private static HostedZoneConfigUnmarshaller();
    public sealed virtual HostedZoneConfig Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual HostedZoneConfig Unmarshall(JsonUnmarshallerContext context);
    public static HostedZoneConfigUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.HostedZoneLimitUnmarshaller : object {
    private static HostedZoneLimitUnmarshaller _instance;
    public static HostedZoneLimitUnmarshaller Instance { get; }
    private static HostedZoneLimitUnmarshaller();
    public sealed virtual HostedZoneLimit Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual HostedZoneLimit Unmarshall(JsonUnmarshallerContext context);
    public static HostedZoneLimitUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.HostedZoneNotEmptyExceptionUnmarshaller : object {
    private static HostedZoneNotEmptyExceptionUnmarshaller _instance;
    public static HostedZoneNotEmptyExceptionUnmarshaller Instance { get; }
    private static HostedZoneNotEmptyExceptionUnmarshaller();
    public sealed virtual HostedZoneNotEmptyException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual HostedZoneNotEmptyException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static HostedZoneNotEmptyExceptionUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.HostedZoneNotFoundExceptionUnmarshaller : object {
    private static HostedZoneNotFoundExceptionUnmarshaller _instance;
    public static HostedZoneNotFoundExceptionUnmarshaller Instance { get; }
    private static HostedZoneNotFoundExceptionUnmarshaller();
    public sealed virtual HostedZoneNotFoundException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual HostedZoneNotFoundException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static HostedZoneNotFoundExceptionUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.HostedZoneNotPrivateExceptionUnmarshaller : object {
    private static HostedZoneNotPrivateExceptionUnmarshaller _instance;
    public static HostedZoneNotPrivateExceptionUnmarshaller Instance { get; }
    private static HostedZoneNotPrivateExceptionUnmarshaller();
    public sealed virtual HostedZoneNotPrivateException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual HostedZoneNotPrivateException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static HostedZoneNotPrivateExceptionUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.HostedZoneOwnerUnmarshaller : object {
    private static HostedZoneOwnerUnmarshaller _instance;
    public static HostedZoneOwnerUnmarshaller Instance { get; }
    private static HostedZoneOwnerUnmarshaller();
    public sealed virtual HostedZoneOwner Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual HostedZoneOwner Unmarshall(JsonUnmarshallerContext context);
    public static HostedZoneOwnerUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.HostedZonePartiallyDelegatedExceptionUnmarshaller : object {
    private static HostedZonePartiallyDelegatedExceptionUnmarshaller _instance;
    public static HostedZonePartiallyDelegatedExceptionUnmarshaller Instance { get; }
    private static HostedZonePartiallyDelegatedExceptionUnmarshaller();
    public sealed virtual HostedZonePartiallyDelegatedException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual HostedZonePartiallyDelegatedException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static HostedZonePartiallyDelegatedExceptionUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.HostedZoneSummaryUnmarshaller : object {
    private static HostedZoneSummaryUnmarshaller _instance;
    public static HostedZoneSummaryUnmarshaller Instance { get; }
    private static HostedZoneSummaryUnmarshaller();
    public sealed virtual HostedZoneSummary Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual HostedZoneSummary Unmarshall(JsonUnmarshallerContext context);
    public static HostedZoneSummaryUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.HostedZoneUnmarshaller : object {
    private static HostedZoneUnmarshaller _instance;
    public static HostedZoneUnmarshaller Instance { get; }
    private static HostedZoneUnmarshaller();
    public sealed virtual HostedZone Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual HostedZone Unmarshall(JsonUnmarshallerContext context);
    public static HostedZoneUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.IncompatibleVersionExceptionUnmarshaller : object {
    private static IncompatibleVersionExceptionUnmarshaller _instance;
    public static IncompatibleVersionExceptionUnmarshaller Instance { get; }
    private static IncompatibleVersionExceptionUnmarshaller();
    public sealed virtual IncompatibleVersionException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual IncompatibleVersionException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static IncompatibleVersionExceptionUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.InsufficientCloudWatchLogsResourcePolicyExceptionUnmarshaller : object {
    private static InsufficientCloudWatchLogsResourcePolicyExceptionUnmarshaller _instance;
    public static InsufficientCloudWatchLogsResourcePolicyExceptionUnmarshaller Instance { get; }
    private static InsufficientCloudWatchLogsResourcePolicyExceptionUnmarshaller();
    public sealed virtual InsufficientCloudWatchLogsResourcePolicyException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual InsufficientCloudWatchLogsResourcePolicyException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static InsufficientCloudWatchLogsResourcePolicyExceptionUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.InvalidArgumentExceptionUnmarshaller : object {
    private static InvalidArgumentExceptionUnmarshaller _instance;
    public static InvalidArgumentExceptionUnmarshaller Instance { get; }
    private static InvalidArgumentExceptionUnmarshaller();
    public sealed virtual InvalidArgumentException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual InvalidArgumentException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static InvalidArgumentExceptionUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.InvalidChangeBatchExceptionUnmarshaller : object {
    private static InvalidChangeBatchExceptionUnmarshaller _instance;
    public static InvalidChangeBatchExceptionUnmarshaller Instance { get; }
    private static InvalidChangeBatchExceptionUnmarshaller();
    public sealed virtual InvalidChangeBatchException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual InvalidChangeBatchException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static InvalidChangeBatchExceptionUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.InvalidDomainNameExceptionUnmarshaller : object {
    private static InvalidDomainNameExceptionUnmarshaller _instance;
    public static InvalidDomainNameExceptionUnmarshaller Instance { get; }
    private static InvalidDomainNameExceptionUnmarshaller();
    public sealed virtual InvalidDomainNameException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual InvalidDomainNameException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static InvalidDomainNameExceptionUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.InvalidInputExceptionUnmarshaller : object {
    private static InvalidInputExceptionUnmarshaller _instance;
    public static InvalidInputExceptionUnmarshaller Instance { get; }
    private static InvalidInputExceptionUnmarshaller();
    public sealed virtual InvalidInputException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual InvalidInputException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static InvalidInputExceptionUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.InvalidKeySigningKeyNameExceptionUnmarshaller : object {
    private static InvalidKeySigningKeyNameExceptionUnmarshaller _instance;
    public static InvalidKeySigningKeyNameExceptionUnmarshaller Instance { get; }
    private static InvalidKeySigningKeyNameExceptionUnmarshaller();
    public sealed virtual InvalidKeySigningKeyNameException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual InvalidKeySigningKeyNameException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static InvalidKeySigningKeyNameExceptionUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.InvalidKeySigningKeyStatusExceptionUnmarshaller : object {
    private static InvalidKeySigningKeyStatusExceptionUnmarshaller _instance;
    public static InvalidKeySigningKeyStatusExceptionUnmarshaller Instance { get; }
    private static InvalidKeySigningKeyStatusExceptionUnmarshaller();
    public sealed virtual InvalidKeySigningKeyStatusException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual InvalidKeySigningKeyStatusException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static InvalidKeySigningKeyStatusExceptionUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.InvalidKMSArnExceptionUnmarshaller : object {
    private static InvalidKMSArnExceptionUnmarshaller _instance;
    public static InvalidKMSArnExceptionUnmarshaller Instance { get; }
    private static InvalidKMSArnExceptionUnmarshaller();
    public sealed virtual InvalidKMSArnException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual InvalidKMSArnException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static InvalidKMSArnExceptionUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.InvalidPaginationTokenExceptionUnmarshaller : object {
    private static InvalidPaginationTokenExceptionUnmarshaller _instance;
    public static InvalidPaginationTokenExceptionUnmarshaller Instance { get; }
    private static InvalidPaginationTokenExceptionUnmarshaller();
    public sealed virtual InvalidPaginationTokenException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual InvalidPaginationTokenException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static InvalidPaginationTokenExceptionUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.InvalidSigningStatusExceptionUnmarshaller : object {
    private static InvalidSigningStatusExceptionUnmarshaller _instance;
    public static InvalidSigningStatusExceptionUnmarshaller Instance { get; }
    private static InvalidSigningStatusExceptionUnmarshaller();
    public sealed virtual InvalidSigningStatusException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual InvalidSigningStatusException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static InvalidSigningStatusExceptionUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.InvalidTrafficPolicyDocumentExceptionUnmarshaller : object {
    private static InvalidTrafficPolicyDocumentExceptionUnmarshaller _instance;
    public static InvalidTrafficPolicyDocumentExceptionUnmarshaller Instance { get; }
    private static InvalidTrafficPolicyDocumentExceptionUnmarshaller();
    public sealed virtual InvalidTrafficPolicyDocumentException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual InvalidTrafficPolicyDocumentException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static InvalidTrafficPolicyDocumentExceptionUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.InvalidVPCIdExceptionUnmarshaller : object {
    private static InvalidVPCIdExceptionUnmarshaller _instance;
    public static InvalidVPCIdExceptionUnmarshaller Instance { get; }
    private static InvalidVPCIdExceptionUnmarshaller();
    public sealed virtual InvalidVPCIdException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual InvalidVPCIdException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static InvalidVPCIdExceptionUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.KeySigningKeyAlreadyExistsExceptionUnmarshaller : object {
    private static KeySigningKeyAlreadyExistsExceptionUnmarshaller _instance;
    public static KeySigningKeyAlreadyExistsExceptionUnmarshaller Instance { get; }
    private static KeySigningKeyAlreadyExistsExceptionUnmarshaller();
    public sealed virtual KeySigningKeyAlreadyExistsException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual KeySigningKeyAlreadyExistsException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static KeySigningKeyAlreadyExistsExceptionUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.KeySigningKeyInParentDSRecordExceptionUnmarshaller : object {
    private static KeySigningKeyInParentDSRecordExceptionUnmarshaller _instance;
    public static KeySigningKeyInParentDSRecordExceptionUnmarshaller Instance { get; }
    private static KeySigningKeyInParentDSRecordExceptionUnmarshaller();
    public sealed virtual KeySigningKeyInParentDSRecordException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual KeySigningKeyInParentDSRecordException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static KeySigningKeyInParentDSRecordExceptionUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.KeySigningKeyInUseExceptionUnmarshaller : object {
    private static KeySigningKeyInUseExceptionUnmarshaller _instance;
    public static KeySigningKeyInUseExceptionUnmarshaller Instance { get; }
    private static KeySigningKeyInUseExceptionUnmarshaller();
    public sealed virtual KeySigningKeyInUseException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual KeySigningKeyInUseException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static KeySigningKeyInUseExceptionUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.KeySigningKeyUnmarshaller : object {
    private static KeySigningKeyUnmarshaller _instance;
    public static KeySigningKeyUnmarshaller Instance { get; }
    private static KeySigningKeyUnmarshaller();
    public sealed virtual KeySigningKey Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual KeySigningKey Unmarshall(JsonUnmarshallerContext context);
    public static KeySigningKeyUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.KeySigningKeyWithActiveStatusNotFoundExceptionUnmarshaller : object {
    private static KeySigningKeyWithActiveStatusNotFoundExceptionUnmarshaller _instance;
    public static KeySigningKeyWithActiveStatusNotFoundExceptionUnmarshaller Instance { get; }
    private static KeySigningKeyWithActiveStatusNotFoundExceptionUnmarshaller();
    public sealed virtual KeySigningKeyWithActiveStatusNotFoundException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual KeySigningKeyWithActiveStatusNotFoundException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static KeySigningKeyWithActiveStatusNotFoundExceptionUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.LastVPCAssociationExceptionUnmarshaller : object {
    private static LastVPCAssociationExceptionUnmarshaller _instance;
    public static LastVPCAssociationExceptionUnmarshaller Instance { get; }
    private static LastVPCAssociationExceptionUnmarshaller();
    public sealed virtual LastVPCAssociationException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual LastVPCAssociationException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static LastVPCAssociationExceptionUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.LimitsExceededExceptionUnmarshaller : object {
    private static LimitsExceededExceptionUnmarshaller _instance;
    public static LimitsExceededExceptionUnmarshaller Instance { get; }
    private static LimitsExceededExceptionUnmarshaller();
    public sealed virtual LimitsExceededException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual LimitsExceededException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static LimitsExceededExceptionUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.LinkedServiceUnmarshaller : object {
    private static LinkedServiceUnmarshaller _instance;
    public static LinkedServiceUnmarshaller Instance { get; }
    private static LinkedServiceUnmarshaller();
    public sealed virtual LinkedService Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual LinkedService Unmarshall(JsonUnmarshallerContext context);
    public static LinkedServiceUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.ListCidrBlocksRequestMarshaller : object {
    private static ListCidrBlocksRequestMarshaller _instance;
    public static ListCidrBlocksRequestMarshaller Instance { get; }
    private static ListCidrBlocksRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListCidrBlocksRequest publicRequest);
    internal static ListCidrBlocksRequestMarshaller GetInstance();
    public static ListCidrBlocksRequestMarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.ListCidrBlocksResponseUnmarshaller : XmlResponseUnmarshaller {
    private static ListCidrBlocksResponseUnmarshaller _instance;
    public static ListCidrBlocksResponseUnmarshaller Instance { get; }
    private static ListCidrBlocksResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, ListCidrBlocksResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ListCidrBlocksResponseUnmarshaller GetInstance();
    public static ListCidrBlocksResponseUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.ListCidrCollectionsRequestMarshaller : object {
    private static ListCidrCollectionsRequestMarshaller _instance;
    public static ListCidrCollectionsRequestMarshaller Instance { get; }
    private static ListCidrCollectionsRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListCidrCollectionsRequest publicRequest);
    internal static ListCidrCollectionsRequestMarshaller GetInstance();
    public static ListCidrCollectionsRequestMarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.ListCidrCollectionsResponseUnmarshaller : XmlResponseUnmarshaller {
    private static ListCidrCollectionsResponseUnmarshaller _instance;
    public static ListCidrCollectionsResponseUnmarshaller Instance { get; }
    private static ListCidrCollectionsResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, ListCidrCollectionsResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ListCidrCollectionsResponseUnmarshaller GetInstance();
    public static ListCidrCollectionsResponseUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.ListCidrLocationsRequestMarshaller : object {
    private static ListCidrLocationsRequestMarshaller _instance;
    public static ListCidrLocationsRequestMarshaller Instance { get; }
    private static ListCidrLocationsRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListCidrLocationsRequest publicRequest);
    internal static ListCidrLocationsRequestMarshaller GetInstance();
    public static ListCidrLocationsRequestMarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.ListCidrLocationsResponseUnmarshaller : XmlResponseUnmarshaller {
    private static ListCidrLocationsResponseUnmarshaller _instance;
    public static ListCidrLocationsResponseUnmarshaller Instance { get; }
    private static ListCidrLocationsResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, ListCidrLocationsResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ListCidrLocationsResponseUnmarshaller GetInstance();
    public static ListCidrLocationsResponseUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.ListGeoLocationsRequestMarshaller : object {
    private static ListGeoLocationsRequestMarshaller _instance;
    public static ListGeoLocationsRequestMarshaller Instance { get; }
    private static ListGeoLocationsRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListGeoLocationsRequest publicRequest);
    internal static ListGeoLocationsRequestMarshaller GetInstance();
    public static ListGeoLocationsRequestMarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.ListGeoLocationsResponseUnmarshaller : XmlResponseUnmarshaller {
    private static ListGeoLocationsResponseUnmarshaller _instance;
    public static ListGeoLocationsResponseUnmarshaller Instance { get; }
    private static ListGeoLocationsResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, ListGeoLocationsResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ListGeoLocationsResponseUnmarshaller GetInstance();
    public static ListGeoLocationsResponseUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.ListHealthChecksRequestMarshaller : object {
    private static ListHealthChecksRequestMarshaller _instance;
    public static ListHealthChecksRequestMarshaller Instance { get; }
    private static ListHealthChecksRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListHealthChecksRequest publicRequest);
    internal static ListHealthChecksRequestMarshaller GetInstance();
    public static ListHealthChecksRequestMarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.ListHealthChecksResponseUnmarshaller : XmlResponseUnmarshaller {
    private static ListHealthChecksResponseUnmarshaller _instance;
    public static ListHealthChecksResponseUnmarshaller Instance { get; }
    private static ListHealthChecksResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, ListHealthChecksResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ListHealthChecksResponseUnmarshaller GetInstance();
    public static ListHealthChecksResponseUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.ListHostedZonesByNameRequestMarshaller : object {
    private static ListHostedZonesByNameRequestMarshaller _instance;
    public static ListHostedZonesByNameRequestMarshaller Instance { get; }
    private static ListHostedZonesByNameRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListHostedZonesByNameRequest publicRequest);
    internal static ListHostedZonesByNameRequestMarshaller GetInstance();
    public static ListHostedZonesByNameRequestMarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.ListHostedZonesByNameResponseUnmarshaller : XmlResponseUnmarshaller {
    private static ListHostedZonesByNameResponseUnmarshaller _instance;
    public static ListHostedZonesByNameResponseUnmarshaller Instance { get; }
    private static ListHostedZonesByNameResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, ListHostedZonesByNameResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ListHostedZonesByNameResponseUnmarshaller GetInstance();
    public static ListHostedZonesByNameResponseUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.ListHostedZonesByVPCRequestMarshaller : object {
    private static ListHostedZonesByVPCRequestMarshaller _instance;
    public static ListHostedZonesByVPCRequestMarshaller Instance { get; }
    private static ListHostedZonesByVPCRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListHostedZonesByVPCRequest publicRequest);
    internal static ListHostedZonesByVPCRequestMarshaller GetInstance();
    public static ListHostedZonesByVPCRequestMarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.ListHostedZonesByVPCResponseUnmarshaller : XmlResponseUnmarshaller {
    private static ListHostedZonesByVPCResponseUnmarshaller _instance;
    public static ListHostedZonesByVPCResponseUnmarshaller Instance { get; }
    private static ListHostedZonesByVPCResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, ListHostedZonesByVPCResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ListHostedZonesByVPCResponseUnmarshaller GetInstance();
    public static ListHostedZonesByVPCResponseUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.ListHostedZonesRequestMarshaller : object {
    private static ListHostedZonesRequestMarshaller _instance;
    public static ListHostedZonesRequestMarshaller Instance { get; }
    private static ListHostedZonesRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListHostedZonesRequest publicRequest);
    internal static ListHostedZonesRequestMarshaller GetInstance();
    public static ListHostedZonesRequestMarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.ListHostedZonesResponseUnmarshaller : XmlResponseUnmarshaller {
    private static ListHostedZonesResponseUnmarshaller _instance;
    public static ListHostedZonesResponseUnmarshaller Instance { get; }
    private static ListHostedZonesResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, ListHostedZonesResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ListHostedZonesResponseUnmarshaller GetInstance();
    public static ListHostedZonesResponseUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.ListQueryLoggingConfigsRequestMarshaller : object {
    private static ListQueryLoggingConfigsRequestMarshaller _instance;
    public static ListQueryLoggingConfigsRequestMarshaller Instance { get; }
    private static ListQueryLoggingConfigsRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListQueryLoggingConfigsRequest publicRequest);
    internal static ListQueryLoggingConfigsRequestMarshaller GetInstance();
    public static ListQueryLoggingConfigsRequestMarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.ListQueryLoggingConfigsResponseUnmarshaller : XmlResponseUnmarshaller {
    private static ListQueryLoggingConfigsResponseUnmarshaller _instance;
    public static ListQueryLoggingConfigsResponseUnmarshaller Instance { get; }
    private static ListQueryLoggingConfigsResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, ListQueryLoggingConfigsResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ListQueryLoggingConfigsResponseUnmarshaller GetInstance();
    public static ListQueryLoggingConfigsResponseUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.ListResourceRecordSetsRequestMarshaller : object {
    private static ListResourceRecordSetsRequestMarshaller _instance;
    public static ListResourceRecordSetsRequestMarshaller Instance { get; }
    private static ListResourceRecordSetsRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListResourceRecordSetsRequest publicRequest);
    internal static ListResourceRecordSetsRequestMarshaller GetInstance();
    public static ListResourceRecordSetsRequestMarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.ListResourceRecordSetsResponseUnmarshaller : XmlResponseUnmarshaller {
    private static ListResourceRecordSetsResponseUnmarshaller _instance;
    public static ListResourceRecordSetsResponseUnmarshaller Instance { get; }
    private static ListResourceRecordSetsResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, ListResourceRecordSetsResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ListResourceRecordSetsResponseUnmarshaller GetInstance();
    public static ListResourceRecordSetsResponseUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.ListReusableDelegationSetsRequestMarshaller : object {
    private static ListReusableDelegationSetsRequestMarshaller _instance;
    public static ListReusableDelegationSetsRequestMarshaller Instance { get; }
    private static ListReusableDelegationSetsRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListReusableDelegationSetsRequest publicRequest);
    internal static ListReusableDelegationSetsRequestMarshaller GetInstance();
    public static ListReusableDelegationSetsRequestMarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.ListReusableDelegationSetsResponseUnmarshaller : XmlResponseUnmarshaller {
    private static ListReusableDelegationSetsResponseUnmarshaller _instance;
    public static ListReusableDelegationSetsResponseUnmarshaller Instance { get; }
    private static ListReusableDelegationSetsResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, ListReusableDelegationSetsResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ListReusableDelegationSetsResponseUnmarshaller GetInstance();
    public static ListReusableDelegationSetsResponseUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.ListTagsForResourceRequestMarshaller : object {
    private static ListTagsForResourceRequestMarshaller _instance;
    public static ListTagsForResourceRequestMarshaller Instance { get; }
    private static ListTagsForResourceRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListTagsForResourceRequest publicRequest);
    internal static ListTagsForResourceRequestMarshaller GetInstance();
    public static ListTagsForResourceRequestMarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.ListTagsForResourceResponseUnmarshaller : XmlResponseUnmarshaller {
    private static ListTagsForResourceResponseUnmarshaller _instance;
    public static ListTagsForResourceResponseUnmarshaller Instance { get; }
    private static ListTagsForResourceResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, ListTagsForResourceResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ListTagsForResourceResponseUnmarshaller GetInstance();
    public static ListTagsForResourceResponseUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.ListTagsForResourcesRequestMarshaller : object {
    private static ListTagsForResourcesRequestMarshaller _instance;
    public static ListTagsForResourcesRequestMarshaller Instance { get; }
    private static ListTagsForResourcesRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListTagsForResourcesRequest publicRequest);
    internal static ListTagsForResourcesRequestMarshaller GetInstance();
    public static ListTagsForResourcesRequestMarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.ListTagsForResourcesResponseUnmarshaller : XmlResponseUnmarshaller {
    private static ListTagsForResourcesResponseUnmarshaller _instance;
    public static ListTagsForResourcesResponseUnmarshaller Instance { get; }
    private static ListTagsForResourcesResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, ListTagsForResourcesResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ListTagsForResourcesResponseUnmarshaller GetInstance();
    public static ListTagsForResourcesResponseUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.ListTrafficPoliciesRequestMarshaller : object {
    private static ListTrafficPoliciesRequestMarshaller _instance;
    public static ListTrafficPoliciesRequestMarshaller Instance { get; }
    private static ListTrafficPoliciesRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListTrafficPoliciesRequest publicRequest);
    internal static ListTrafficPoliciesRequestMarshaller GetInstance();
    public static ListTrafficPoliciesRequestMarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.ListTrafficPoliciesResponseUnmarshaller : XmlResponseUnmarshaller {
    private static ListTrafficPoliciesResponseUnmarshaller _instance;
    public static ListTrafficPoliciesResponseUnmarshaller Instance { get; }
    private static ListTrafficPoliciesResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, ListTrafficPoliciesResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ListTrafficPoliciesResponseUnmarshaller GetInstance();
    public static ListTrafficPoliciesResponseUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.ListTrafficPolicyInstancesByHostedZoneRequestMarshaller : object {
    private static ListTrafficPolicyInstancesByHostedZoneRequestMarshaller _instance;
    public static ListTrafficPolicyInstancesByHostedZoneRequestMarshaller Instance { get; }
    private static ListTrafficPolicyInstancesByHostedZoneRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListTrafficPolicyInstancesByHostedZoneRequest publicRequest);
    internal static ListTrafficPolicyInstancesByHostedZoneRequestMarshaller GetInstance();
    public static ListTrafficPolicyInstancesByHostedZoneRequestMarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.ListTrafficPolicyInstancesByHostedZoneResponseUnmarshaller : XmlResponseUnmarshaller {
    private static ListTrafficPolicyInstancesByHostedZoneResponseUnmarshaller _instance;
    public static ListTrafficPolicyInstancesByHostedZoneResponseUnmarshaller Instance { get; }
    private static ListTrafficPolicyInstancesByHostedZoneResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, ListTrafficPolicyInstancesByHostedZoneResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ListTrafficPolicyInstancesByHostedZoneResponseUnmarshaller GetInstance();
    public static ListTrafficPolicyInstancesByHostedZoneResponseUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.ListTrafficPolicyInstancesByPolicyRequestMarshaller : object {
    private static ListTrafficPolicyInstancesByPolicyRequestMarshaller _instance;
    public static ListTrafficPolicyInstancesByPolicyRequestMarshaller Instance { get; }
    private static ListTrafficPolicyInstancesByPolicyRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListTrafficPolicyInstancesByPolicyRequest publicRequest);
    internal static ListTrafficPolicyInstancesByPolicyRequestMarshaller GetInstance();
    public static ListTrafficPolicyInstancesByPolicyRequestMarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.ListTrafficPolicyInstancesByPolicyResponseUnmarshaller : XmlResponseUnmarshaller {
    private static ListTrafficPolicyInstancesByPolicyResponseUnmarshaller _instance;
    public static ListTrafficPolicyInstancesByPolicyResponseUnmarshaller Instance { get; }
    private static ListTrafficPolicyInstancesByPolicyResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, ListTrafficPolicyInstancesByPolicyResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ListTrafficPolicyInstancesByPolicyResponseUnmarshaller GetInstance();
    public static ListTrafficPolicyInstancesByPolicyResponseUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.ListTrafficPolicyInstancesRequestMarshaller : object {
    private static ListTrafficPolicyInstancesRequestMarshaller _instance;
    public static ListTrafficPolicyInstancesRequestMarshaller Instance { get; }
    private static ListTrafficPolicyInstancesRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListTrafficPolicyInstancesRequest publicRequest);
    internal static ListTrafficPolicyInstancesRequestMarshaller GetInstance();
    public static ListTrafficPolicyInstancesRequestMarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.ListTrafficPolicyInstancesResponseUnmarshaller : XmlResponseUnmarshaller {
    private static ListTrafficPolicyInstancesResponseUnmarshaller _instance;
    public static ListTrafficPolicyInstancesResponseUnmarshaller Instance { get; }
    private static ListTrafficPolicyInstancesResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, ListTrafficPolicyInstancesResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ListTrafficPolicyInstancesResponseUnmarshaller GetInstance();
    public static ListTrafficPolicyInstancesResponseUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.ListTrafficPolicyVersionsRequestMarshaller : object {
    private static ListTrafficPolicyVersionsRequestMarshaller _instance;
    public static ListTrafficPolicyVersionsRequestMarshaller Instance { get; }
    private static ListTrafficPolicyVersionsRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListTrafficPolicyVersionsRequest publicRequest);
    internal static ListTrafficPolicyVersionsRequestMarshaller GetInstance();
    public static ListTrafficPolicyVersionsRequestMarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.ListTrafficPolicyVersionsResponseUnmarshaller : XmlResponseUnmarshaller {
    private static ListTrafficPolicyVersionsResponseUnmarshaller _instance;
    public static ListTrafficPolicyVersionsResponseUnmarshaller Instance { get; }
    private static ListTrafficPolicyVersionsResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, ListTrafficPolicyVersionsResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ListTrafficPolicyVersionsResponseUnmarshaller GetInstance();
    public static ListTrafficPolicyVersionsResponseUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.ListVPCAssociationAuthorizationsRequestMarshaller : object {
    private static ListVPCAssociationAuthorizationsRequestMarshaller _instance;
    public static ListVPCAssociationAuthorizationsRequestMarshaller Instance { get; }
    private static ListVPCAssociationAuthorizationsRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListVPCAssociationAuthorizationsRequest publicRequest);
    internal static ListVPCAssociationAuthorizationsRequestMarshaller GetInstance();
    public static ListVPCAssociationAuthorizationsRequestMarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.ListVPCAssociationAuthorizationsResponseUnmarshaller : XmlResponseUnmarshaller {
    private static ListVPCAssociationAuthorizationsResponseUnmarshaller _instance;
    public static ListVPCAssociationAuthorizationsResponseUnmarshaller Instance { get; }
    private static ListVPCAssociationAuthorizationsResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, ListVPCAssociationAuthorizationsResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ListVPCAssociationAuthorizationsResponseUnmarshaller GetInstance();
    public static ListVPCAssociationAuthorizationsResponseUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.LocationSummaryUnmarshaller : object {
    private static LocationSummaryUnmarshaller _instance;
    public static LocationSummaryUnmarshaller Instance { get; }
    private static LocationSummaryUnmarshaller();
    public sealed virtual LocationSummary Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual LocationSummary Unmarshall(JsonUnmarshallerContext context);
    public static LocationSummaryUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.NoSuchChangeExceptionUnmarshaller : object {
    private static NoSuchChangeExceptionUnmarshaller _instance;
    public static NoSuchChangeExceptionUnmarshaller Instance { get; }
    private static NoSuchChangeExceptionUnmarshaller();
    public sealed virtual NoSuchChangeException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual NoSuchChangeException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static NoSuchChangeExceptionUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.NoSuchCidrCollectionExceptionUnmarshaller : object {
    private static NoSuchCidrCollectionExceptionUnmarshaller _instance;
    public static NoSuchCidrCollectionExceptionUnmarshaller Instance { get; }
    private static NoSuchCidrCollectionExceptionUnmarshaller();
    public sealed virtual NoSuchCidrCollectionException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual NoSuchCidrCollectionException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static NoSuchCidrCollectionExceptionUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.NoSuchCidrLocationExceptionUnmarshaller : object {
    private static NoSuchCidrLocationExceptionUnmarshaller _instance;
    public static NoSuchCidrLocationExceptionUnmarshaller Instance { get; }
    private static NoSuchCidrLocationExceptionUnmarshaller();
    public sealed virtual NoSuchCidrLocationException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual NoSuchCidrLocationException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static NoSuchCidrLocationExceptionUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.NoSuchCloudWatchLogsLogGroupExceptionUnmarshaller : object {
    private static NoSuchCloudWatchLogsLogGroupExceptionUnmarshaller _instance;
    public static NoSuchCloudWatchLogsLogGroupExceptionUnmarshaller Instance { get; }
    private static NoSuchCloudWatchLogsLogGroupExceptionUnmarshaller();
    public sealed virtual NoSuchCloudWatchLogsLogGroupException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual NoSuchCloudWatchLogsLogGroupException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static NoSuchCloudWatchLogsLogGroupExceptionUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.NoSuchDelegationSetExceptionUnmarshaller : object {
    private static NoSuchDelegationSetExceptionUnmarshaller _instance;
    public static NoSuchDelegationSetExceptionUnmarshaller Instance { get; }
    private static NoSuchDelegationSetExceptionUnmarshaller();
    public sealed virtual NoSuchDelegationSetException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual NoSuchDelegationSetException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static NoSuchDelegationSetExceptionUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.NoSuchGeoLocationExceptionUnmarshaller : object {
    private static NoSuchGeoLocationExceptionUnmarshaller _instance;
    public static NoSuchGeoLocationExceptionUnmarshaller Instance { get; }
    private static NoSuchGeoLocationExceptionUnmarshaller();
    public sealed virtual NoSuchGeoLocationException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual NoSuchGeoLocationException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static NoSuchGeoLocationExceptionUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.NoSuchHealthCheckExceptionUnmarshaller : object {
    private static NoSuchHealthCheckExceptionUnmarshaller _instance;
    public static NoSuchHealthCheckExceptionUnmarshaller Instance { get; }
    private static NoSuchHealthCheckExceptionUnmarshaller();
    public sealed virtual NoSuchHealthCheckException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual NoSuchHealthCheckException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static NoSuchHealthCheckExceptionUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.NoSuchHostedZoneExceptionUnmarshaller : object {
    private static NoSuchHostedZoneExceptionUnmarshaller _instance;
    public static NoSuchHostedZoneExceptionUnmarshaller Instance { get; }
    private static NoSuchHostedZoneExceptionUnmarshaller();
    public sealed virtual NoSuchHostedZoneException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual NoSuchHostedZoneException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static NoSuchHostedZoneExceptionUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.NoSuchKeySigningKeyExceptionUnmarshaller : object {
    private static NoSuchKeySigningKeyExceptionUnmarshaller _instance;
    public static NoSuchKeySigningKeyExceptionUnmarshaller Instance { get; }
    private static NoSuchKeySigningKeyExceptionUnmarshaller();
    public sealed virtual NoSuchKeySigningKeyException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual NoSuchKeySigningKeyException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static NoSuchKeySigningKeyExceptionUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.NoSuchQueryLoggingConfigExceptionUnmarshaller : object {
    private static NoSuchQueryLoggingConfigExceptionUnmarshaller _instance;
    public static NoSuchQueryLoggingConfigExceptionUnmarshaller Instance { get; }
    private static NoSuchQueryLoggingConfigExceptionUnmarshaller();
    public sealed virtual NoSuchQueryLoggingConfigException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual NoSuchQueryLoggingConfigException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static NoSuchQueryLoggingConfigExceptionUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.NoSuchTrafficPolicyExceptionUnmarshaller : object {
    private static NoSuchTrafficPolicyExceptionUnmarshaller _instance;
    public static NoSuchTrafficPolicyExceptionUnmarshaller Instance { get; }
    private static NoSuchTrafficPolicyExceptionUnmarshaller();
    public sealed virtual NoSuchTrafficPolicyException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual NoSuchTrafficPolicyException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static NoSuchTrafficPolicyExceptionUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.NoSuchTrafficPolicyInstanceExceptionUnmarshaller : object {
    private static NoSuchTrafficPolicyInstanceExceptionUnmarshaller _instance;
    public static NoSuchTrafficPolicyInstanceExceptionUnmarshaller Instance { get; }
    private static NoSuchTrafficPolicyInstanceExceptionUnmarshaller();
    public sealed virtual NoSuchTrafficPolicyInstanceException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual NoSuchTrafficPolicyInstanceException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static NoSuchTrafficPolicyInstanceExceptionUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.NotAuthorizedExceptionUnmarshaller : object {
    private static NotAuthorizedExceptionUnmarshaller _instance;
    public static NotAuthorizedExceptionUnmarshaller Instance { get; }
    private static NotAuthorizedExceptionUnmarshaller();
    public sealed virtual NotAuthorizedException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual NotAuthorizedException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static NotAuthorizedExceptionUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.PriorRequestNotCompleteExceptionUnmarshaller : object {
    private static PriorRequestNotCompleteExceptionUnmarshaller _instance;
    public static PriorRequestNotCompleteExceptionUnmarshaller Instance { get; }
    private static PriorRequestNotCompleteExceptionUnmarshaller();
    public sealed virtual PriorRequestNotCompleteException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual PriorRequestNotCompleteException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static PriorRequestNotCompleteExceptionUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.PublicZoneVPCAssociationExceptionUnmarshaller : object {
    private static PublicZoneVPCAssociationExceptionUnmarshaller _instance;
    public static PublicZoneVPCAssociationExceptionUnmarshaller Instance { get; }
    private static PublicZoneVPCAssociationExceptionUnmarshaller();
    public sealed virtual PublicZoneVPCAssociationException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual PublicZoneVPCAssociationException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static PublicZoneVPCAssociationExceptionUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.QueryLoggingConfigAlreadyExistsExceptionUnmarshaller : object {
    private static QueryLoggingConfigAlreadyExistsExceptionUnmarshaller _instance;
    public static QueryLoggingConfigAlreadyExistsExceptionUnmarshaller Instance { get; }
    private static QueryLoggingConfigAlreadyExistsExceptionUnmarshaller();
    public sealed virtual QueryLoggingConfigAlreadyExistsException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual QueryLoggingConfigAlreadyExistsException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static QueryLoggingConfigAlreadyExistsExceptionUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.QueryLoggingConfigUnmarshaller : object {
    private static QueryLoggingConfigUnmarshaller _instance;
    public static QueryLoggingConfigUnmarshaller Instance { get; }
    private static QueryLoggingConfigUnmarshaller();
    public sealed virtual QueryLoggingConfig Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual QueryLoggingConfig Unmarshall(JsonUnmarshallerContext context);
    public static QueryLoggingConfigUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.ResourceRecordSetUnmarshaller : object {
    private static ResourceRecordSetUnmarshaller _instance;
    public static ResourceRecordSetUnmarshaller Instance { get; }
    private static ResourceRecordSetUnmarshaller();
    public sealed virtual ResourceRecordSet Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ResourceRecordSet Unmarshall(JsonUnmarshallerContext context);
    public static ResourceRecordSetUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.ResourceRecordUnmarshaller : object {
    private static ResourceRecordUnmarshaller _instance;
    public static ResourceRecordUnmarshaller Instance { get; }
    private static ResourceRecordUnmarshaller();
    public sealed virtual ResourceRecord Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ResourceRecord Unmarshall(JsonUnmarshallerContext context);
    public static ResourceRecordUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.ResourceTagSetUnmarshaller : object {
    private static ResourceTagSetUnmarshaller _instance;
    public static ResourceTagSetUnmarshaller Instance { get; }
    private static ResourceTagSetUnmarshaller();
    public sealed virtual ResourceTagSet Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ResourceTagSet Unmarshall(JsonUnmarshallerContext context);
    public static ResourceTagSetUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.ReusableDelegationSetLimitUnmarshaller : object {
    private static ReusableDelegationSetLimitUnmarshaller _instance;
    public static ReusableDelegationSetLimitUnmarshaller Instance { get; }
    private static ReusableDelegationSetLimitUnmarshaller();
    public sealed virtual ReusableDelegationSetLimit Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ReusableDelegationSetLimit Unmarshall(JsonUnmarshallerContext context);
    public static ReusableDelegationSetLimitUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.StatusReportUnmarshaller : object {
    private static StatusReportUnmarshaller _instance;
    public static StatusReportUnmarshaller Instance { get; }
    private static StatusReportUnmarshaller();
    public sealed virtual StatusReport Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual StatusReport Unmarshall(JsonUnmarshallerContext context);
    public static StatusReportUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.TagUnmarshaller : object {
    private static TagUnmarshaller _instance;
    public static TagUnmarshaller Instance { get; }
    private static TagUnmarshaller();
    public sealed virtual Tag Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual Tag Unmarshall(JsonUnmarshallerContext context);
    public static TagUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.TestDNSAnswerRequestMarshaller : object {
    private static TestDNSAnswerRequestMarshaller _instance;
    public static TestDNSAnswerRequestMarshaller Instance { get; }
    private static TestDNSAnswerRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(TestDNSAnswerRequest publicRequest);
    internal static TestDNSAnswerRequestMarshaller GetInstance();
    public static TestDNSAnswerRequestMarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.TestDNSAnswerResponseUnmarshaller : XmlResponseUnmarshaller {
    private static TestDNSAnswerResponseUnmarshaller _instance;
    public static TestDNSAnswerResponseUnmarshaller Instance { get; }
    private static TestDNSAnswerResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, TestDNSAnswerResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static TestDNSAnswerResponseUnmarshaller GetInstance();
    public static TestDNSAnswerResponseUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.ThrottlingExceptionUnmarshaller : object {
    private static ThrottlingExceptionUnmarshaller _instance;
    public static ThrottlingExceptionUnmarshaller Instance { get; }
    private static ThrottlingExceptionUnmarshaller();
    public sealed virtual ThrottlingException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ThrottlingException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static ThrottlingExceptionUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.TooManyHealthChecksExceptionUnmarshaller : object {
    private static TooManyHealthChecksExceptionUnmarshaller _instance;
    public static TooManyHealthChecksExceptionUnmarshaller Instance { get; }
    private static TooManyHealthChecksExceptionUnmarshaller();
    public sealed virtual TooManyHealthChecksException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual TooManyHealthChecksException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static TooManyHealthChecksExceptionUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.TooManyHostedZonesExceptionUnmarshaller : object {
    private static TooManyHostedZonesExceptionUnmarshaller _instance;
    public static TooManyHostedZonesExceptionUnmarshaller Instance { get; }
    private static TooManyHostedZonesExceptionUnmarshaller();
    public sealed virtual TooManyHostedZonesException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual TooManyHostedZonesException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static TooManyHostedZonesExceptionUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.TooManyKeySigningKeysExceptionUnmarshaller : object {
    private static TooManyKeySigningKeysExceptionUnmarshaller _instance;
    public static TooManyKeySigningKeysExceptionUnmarshaller Instance { get; }
    private static TooManyKeySigningKeysExceptionUnmarshaller();
    public sealed virtual TooManyKeySigningKeysException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual TooManyKeySigningKeysException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static TooManyKeySigningKeysExceptionUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.TooManyTrafficPoliciesExceptionUnmarshaller : object {
    private static TooManyTrafficPoliciesExceptionUnmarshaller _instance;
    public static TooManyTrafficPoliciesExceptionUnmarshaller Instance { get; }
    private static TooManyTrafficPoliciesExceptionUnmarshaller();
    public sealed virtual TooManyTrafficPoliciesException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual TooManyTrafficPoliciesException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static TooManyTrafficPoliciesExceptionUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.TooManyTrafficPolicyInstancesExceptionUnmarshaller : object {
    private static TooManyTrafficPolicyInstancesExceptionUnmarshaller _instance;
    public static TooManyTrafficPolicyInstancesExceptionUnmarshaller Instance { get; }
    private static TooManyTrafficPolicyInstancesExceptionUnmarshaller();
    public sealed virtual TooManyTrafficPolicyInstancesException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual TooManyTrafficPolicyInstancesException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static TooManyTrafficPolicyInstancesExceptionUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.TooManyTrafficPolicyVersionsForCurrentPolicyExceptionUnmarshaller : object {
    private static TooManyTrafficPolicyVersionsForCurrentPolicyExceptionUnmarshaller _instance;
    public static TooManyTrafficPolicyVersionsForCurrentPolicyExceptionUnmarshaller Instance { get; }
    private static TooManyTrafficPolicyVersionsForCurrentPolicyExceptionUnmarshaller();
    public sealed virtual TooManyTrafficPolicyVersionsForCurrentPolicyException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual TooManyTrafficPolicyVersionsForCurrentPolicyException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static TooManyTrafficPolicyVersionsForCurrentPolicyExceptionUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.TooManyVPCAssociationAuthorizationsExceptionUnmarshaller : object {
    private static TooManyVPCAssociationAuthorizationsExceptionUnmarshaller _instance;
    public static TooManyVPCAssociationAuthorizationsExceptionUnmarshaller Instance { get; }
    private static TooManyVPCAssociationAuthorizationsExceptionUnmarshaller();
    public sealed virtual TooManyVPCAssociationAuthorizationsException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual TooManyVPCAssociationAuthorizationsException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static TooManyVPCAssociationAuthorizationsExceptionUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.TrafficPolicyAlreadyExistsExceptionUnmarshaller : object {
    private static TrafficPolicyAlreadyExistsExceptionUnmarshaller _instance;
    public static TrafficPolicyAlreadyExistsExceptionUnmarshaller Instance { get; }
    private static TrafficPolicyAlreadyExistsExceptionUnmarshaller();
    public sealed virtual TrafficPolicyAlreadyExistsException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual TrafficPolicyAlreadyExistsException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static TrafficPolicyAlreadyExistsExceptionUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.TrafficPolicyInstanceAlreadyExistsExceptionUnmarshaller : object {
    private static TrafficPolicyInstanceAlreadyExistsExceptionUnmarshaller _instance;
    public static TrafficPolicyInstanceAlreadyExistsExceptionUnmarshaller Instance { get; }
    private static TrafficPolicyInstanceAlreadyExistsExceptionUnmarshaller();
    public sealed virtual TrafficPolicyInstanceAlreadyExistsException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual TrafficPolicyInstanceAlreadyExistsException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static TrafficPolicyInstanceAlreadyExistsExceptionUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.TrafficPolicyInstanceUnmarshaller : object {
    private static TrafficPolicyInstanceUnmarshaller _instance;
    public static TrafficPolicyInstanceUnmarshaller Instance { get; }
    private static TrafficPolicyInstanceUnmarshaller();
    public sealed virtual TrafficPolicyInstance Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual TrafficPolicyInstance Unmarshall(JsonUnmarshallerContext context);
    public static TrafficPolicyInstanceUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.TrafficPolicyInUseExceptionUnmarshaller : object {
    private static TrafficPolicyInUseExceptionUnmarshaller _instance;
    public static TrafficPolicyInUseExceptionUnmarshaller Instance { get; }
    private static TrafficPolicyInUseExceptionUnmarshaller();
    public sealed virtual TrafficPolicyInUseException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual TrafficPolicyInUseException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static TrafficPolicyInUseExceptionUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.TrafficPolicySummaryUnmarshaller : object {
    private static TrafficPolicySummaryUnmarshaller _instance;
    public static TrafficPolicySummaryUnmarshaller Instance { get; }
    private static TrafficPolicySummaryUnmarshaller();
    public sealed virtual TrafficPolicySummary Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual TrafficPolicySummary Unmarshall(JsonUnmarshallerContext context);
    public static TrafficPolicySummaryUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.TrafficPolicyUnmarshaller : object {
    private static TrafficPolicyUnmarshaller _instance;
    public static TrafficPolicyUnmarshaller Instance { get; }
    private static TrafficPolicyUnmarshaller();
    public sealed virtual TrafficPolicy Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual TrafficPolicy Unmarshall(JsonUnmarshallerContext context);
    public static TrafficPolicyUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.UpdateHealthCheckRequestMarshaller : object {
    private static UpdateHealthCheckRequestMarshaller _instance;
    public static UpdateHealthCheckRequestMarshaller Instance { get; }
    private static UpdateHealthCheckRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(UpdateHealthCheckRequest publicRequest);
    internal static UpdateHealthCheckRequestMarshaller GetInstance();
    public static UpdateHealthCheckRequestMarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.UpdateHealthCheckResponseUnmarshaller : XmlResponseUnmarshaller {
    private static UpdateHealthCheckResponseUnmarshaller _instance;
    public static UpdateHealthCheckResponseUnmarshaller Instance { get; }
    private static UpdateHealthCheckResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, UpdateHealthCheckResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static UpdateHealthCheckResponseUnmarshaller GetInstance();
    public static UpdateHealthCheckResponseUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.UpdateHostedZoneCommentRequestMarshaller : object {
    private static UpdateHostedZoneCommentRequestMarshaller _instance;
    public static UpdateHostedZoneCommentRequestMarshaller Instance { get; }
    private static UpdateHostedZoneCommentRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(UpdateHostedZoneCommentRequest publicRequest);
    internal static UpdateHostedZoneCommentRequestMarshaller GetInstance();
    public static UpdateHostedZoneCommentRequestMarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.UpdateHostedZoneCommentResponseUnmarshaller : XmlResponseUnmarshaller {
    private static UpdateHostedZoneCommentResponseUnmarshaller _instance;
    public static UpdateHostedZoneCommentResponseUnmarshaller Instance { get; }
    private static UpdateHostedZoneCommentResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, UpdateHostedZoneCommentResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static UpdateHostedZoneCommentResponseUnmarshaller GetInstance();
    public static UpdateHostedZoneCommentResponseUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.UpdateTrafficPolicyCommentRequestMarshaller : object {
    private static UpdateTrafficPolicyCommentRequestMarshaller _instance;
    public static UpdateTrafficPolicyCommentRequestMarshaller Instance { get; }
    private static UpdateTrafficPolicyCommentRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(UpdateTrafficPolicyCommentRequest publicRequest);
    internal static UpdateTrafficPolicyCommentRequestMarshaller GetInstance();
    public static UpdateTrafficPolicyCommentRequestMarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.UpdateTrafficPolicyCommentResponseUnmarshaller : XmlResponseUnmarshaller {
    private static UpdateTrafficPolicyCommentResponseUnmarshaller _instance;
    public static UpdateTrafficPolicyCommentResponseUnmarshaller Instance { get; }
    private static UpdateTrafficPolicyCommentResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, UpdateTrafficPolicyCommentResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static UpdateTrafficPolicyCommentResponseUnmarshaller GetInstance();
    public static UpdateTrafficPolicyCommentResponseUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.UpdateTrafficPolicyInstanceRequestMarshaller : object {
    private static UpdateTrafficPolicyInstanceRequestMarshaller _instance;
    public static UpdateTrafficPolicyInstanceRequestMarshaller Instance { get; }
    private static UpdateTrafficPolicyInstanceRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(UpdateTrafficPolicyInstanceRequest publicRequest);
    internal static UpdateTrafficPolicyInstanceRequestMarshaller GetInstance();
    public static UpdateTrafficPolicyInstanceRequestMarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.UpdateTrafficPolicyInstanceResponseUnmarshaller : XmlResponseUnmarshaller {
    private static UpdateTrafficPolicyInstanceResponseUnmarshaller _instance;
    public static UpdateTrafficPolicyInstanceResponseUnmarshaller Instance { get; }
    private static UpdateTrafficPolicyInstanceResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, UpdateTrafficPolicyInstanceResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static UpdateTrafficPolicyInstanceResponseUnmarshaller GetInstance();
    public static UpdateTrafficPolicyInstanceResponseUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.VPCAssociationAuthorizationNotFoundExceptionUnmarshaller : object {
    private static VPCAssociationAuthorizationNotFoundExceptionUnmarshaller _instance;
    public static VPCAssociationAuthorizationNotFoundExceptionUnmarshaller Instance { get; }
    private static VPCAssociationAuthorizationNotFoundExceptionUnmarshaller();
    public sealed virtual VPCAssociationAuthorizationNotFoundException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual VPCAssociationAuthorizationNotFoundException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static VPCAssociationAuthorizationNotFoundExceptionUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.VPCAssociationNotFoundExceptionUnmarshaller : object {
    private static VPCAssociationNotFoundExceptionUnmarshaller _instance;
    public static VPCAssociationNotFoundExceptionUnmarshaller Instance { get; }
    private static VPCAssociationNotFoundExceptionUnmarshaller();
    public sealed virtual VPCAssociationNotFoundException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual VPCAssociationNotFoundException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static VPCAssociationNotFoundExceptionUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.Internal.MarshallTransformations.VPCUnmarshaller : object {
    private static VPCUnmarshaller _instance;
    public static VPCUnmarshaller Instance { get; }
    private static VPCUnmarshaller();
    public sealed virtual VPC Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual VPC Unmarshall(JsonUnmarshallerContext context);
    public static VPCUnmarshaller get_Instance();
}
public class Amazon.Route53.Model.InvalidArgumentException : AmazonRoute53Exception {
    public InvalidArgumentException(string message);
    public InvalidArgumentException(string message, Exception innerException);
    public InvalidArgumentException(Exception innerException);
    public InvalidArgumentException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public InvalidArgumentException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Route53.Model.InvalidChangeBatchException : AmazonRoute53Exception {
    private List`1<string> _messages;
    public List`1<string> Messages { get; public set; }
    public InvalidChangeBatchException(string message);
    public InvalidChangeBatchException(string message, Exception innerException);
    public InvalidChangeBatchException(Exception innerException);
    public InvalidChangeBatchException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public InvalidChangeBatchException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public List`1<string> get_Messages();
    public void set_Messages(List`1<string> value);
    internal bool IsSetMessages();
}
public class Amazon.Route53.Model.InvalidDomainNameException : AmazonRoute53Exception {
    public InvalidDomainNameException(string message);
    public InvalidDomainNameException(string message, Exception innerException);
    public InvalidDomainNameException(Exception innerException);
    public InvalidDomainNameException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public InvalidDomainNameException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Route53.Model.InvalidInputException : AmazonRoute53Exception {
    public InvalidInputException(string message);
    public InvalidInputException(string message, Exception innerException);
    public InvalidInputException(Exception innerException);
    public InvalidInputException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public InvalidInputException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Route53.Model.InvalidKeySigningKeyNameException : AmazonRoute53Exception {
    public InvalidKeySigningKeyNameException(string message);
    public InvalidKeySigningKeyNameException(string message, Exception innerException);
    public InvalidKeySigningKeyNameException(Exception innerException);
    public InvalidKeySigningKeyNameException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public InvalidKeySigningKeyNameException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Route53.Model.InvalidKeySigningKeyStatusException : AmazonRoute53Exception {
    public InvalidKeySigningKeyStatusException(string message);
    public InvalidKeySigningKeyStatusException(string message, Exception innerException);
    public InvalidKeySigningKeyStatusException(Exception innerException);
    public InvalidKeySigningKeyStatusException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public InvalidKeySigningKeyStatusException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Route53.Model.InvalidKMSArnException : AmazonRoute53Exception {
    public InvalidKMSArnException(string message);
    public InvalidKMSArnException(string message, Exception innerException);
    public InvalidKMSArnException(Exception innerException);
    public InvalidKMSArnException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public InvalidKMSArnException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Route53.Model.InvalidPaginationTokenException : AmazonRoute53Exception {
    public InvalidPaginationTokenException(string message);
    public InvalidPaginationTokenException(string message, Exception innerException);
    public InvalidPaginationTokenException(Exception innerException);
    public InvalidPaginationTokenException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public InvalidPaginationTokenException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Route53.Model.InvalidSigningStatusException : AmazonRoute53Exception {
    public InvalidSigningStatusException(string message);
    public InvalidSigningStatusException(string message, Exception innerException);
    public InvalidSigningStatusException(Exception innerException);
    public InvalidSigningStatusException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public InvalidSigningStatusException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Route53.Model.InvalidTrafficPolicyDocumentException : AmazonRoute53Exception {
    public InvalidTrafficPolicyDocumentException(string message);
    public InvalidTrafficPolicyDocumentException(string message, Exception innerException);
    public InvalidTrafficPolicyDocumentException(Exception innerException);
    public InvalidTrafficPolicyDocumentException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public InvalidTrafficPolicyDocumentException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Route53.Model.InvalidVPCIdException : AmazonRoute53Exception {
    public InvalidVPCIdException(string message);
    public InvalidVPCIdException(string message, Exception innerException);
    public InvalidVPCIdException(Exception innerException);
    public InvalidVPCIdException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public InvalidVPCIdException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public interface Amazon.Route53.Model.IRoute53PaginatorFactory {
    public abstract virtual IListCidrBlocksPaginator ListCidrBlocks(ListCidrBlocksRequest request);
    public abstract virtual IListCidrCollectionsPaginator ListCidrCollections(ListCidrCollectionsRequest request);
    public abstract virtual IListCidrLocationsPaginator ListCidrLocations(ListCidrLocationsRequest request);
    public abstract virtual IListHealthChecksPaginator ListHealthChecks(ListHealthChecksRequest request);
    public abstract virtual IListHostedZonesPaginator ListHostedZones(ListHostedZonesRequest request);
    public abstract virtual IListQueryLoggingConfigsPaginator ListQueryLoggingConfigs(ListQueryLoggingConfigsRequest request);
    public abstract virtual IListResourceRecordSetsPaginator ListResourceRecordSets(ListResourceRecordSetsRequest request);
}
public class Amazon.Route53.Model.KeySigningKey : object {
    private string _name;
    private string _kmsArn;
    private Nullable`1<int> _flag;
    private string _signingAlgorithmMnemonic;
    private Nullable`1<int> _signingAlgorithmType;
    private string _digestAlgorithmMnemonic;
    private Nullable`1<int> _digestAlgorithmType;
    private Nullable`1<int> _keyTag;
    private string _digestValue;
    private string _publicKey;
    private string _dsRecord;
    private string _dnskeyRecord;
    private string _status;
    private string _statusMessage;
    private Nullable`1<DateTime> _createdDate;
    private Nullable`1<DateTime> _lastModifiedDate;
    [AWSPropertyAttribute]
public string Name { get; public set; }
    public string KmsArn { get; public set; }
    public Nullable`1<int> Flag { get; public set; }
    public string SigningAlgorithmMnemonic { get; public set; }
    public Nullable`1<int> SigningAlgorithmType { get; public set; }
    public string DigestAlgorithmMnemonic { get; public set; }
    public Nullable`1<int> DigestAlgorithmType { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> KeyTag { get; public set; }
    public string DigestValue { get; public set; }
    public string PublicKey { get; public set; }
    public string DSRecord { get; public set; }
    public string DNSKEYRecord { get; public set; }
    [AWSPropertyAttribute]
public string Status { get; public set; }
    [AWSPropertyAttribute]
public string StatusMessage { get; public set; }
    public Nullable`1<DateTime> CreatedDate { get; public set; }
    public Nullable`1<DateTime> LastModifiedDate { get; public set; }
    public string get_Name();
    public void set_Name(string value);
    internal bool IsSetName();
    public string get_KmsArn();
    public void set_KmsArn(string value);
    internal bool IsSetKmsArn();
    public Nullable`1<int> get_Flag();
    public void set_Flag(Nullable`1<int> value);
    internal bool IsSetFlag();
    public string get_SigningAlgorithmMnemonic();
    public void set_SigningAlgorithmMnemonic(string value);
    internal bool IsSetSigningAlgorithmMnemonic();
    public Nullable`1<int> get_SigningAlgorithmType();
    public void set_SigningAlgorithmType(Nullable`1<int> value);
    internal bool IsSetSigningAlgorithmType();
    public string get_DigestAlgorithmMnemonic();
    public void set_DigestAlgorithmMnemonic(string value);
    internal bool IsSetDigestAlgorithmMnemonic();
    public Nullable`1<int> get_DigestAlgorithmType();
    public void set_DigestAlgorithmType(Nullable`1<int> value);
    internal bool IsSetDigestAlgorithmType();
    public Nullable`1<int> get_KeyTag();
    public void set_KeyTag(Nullable`1<int> value);
    internal bool IsSetKeyTag();
    public string get_DigestValue();
    public void set_DigestValue(string value);
    internal bool IsSetDigestValue();
    public string get_PublicKey();
    public void set_PublicKey(string value);
    internal bool IsSetPublicKey();
    public string get_DSRecord();
    public void set_DSRecord(string value);
    internal bool IsSetDSRecord();
    public string get_DNSKEYRecord();
    public void set_DNSKEYRecord(string value);
    internal bool IsSetDNSKEYRecord();
    public string get_Status();
    public void set_Status(string value);
    internal bool IsSetStatus();
    public string get_StatusMessage();
    public void set_StatusMessage(string value);
    internal bool IsSetStatusMessage();
    public Nullable`1<DateTime> get_CreatedDate();
    public void set_CreatedDate(Nullable`1<DateTime> value);
    internal bool IsSetCreatedDate();
    public Nullable`1<DateTime> get_LastModifiedDate();
    public void set_LastModifiedDate(Nullable`1<DateTime> value);
    internal bool IsSetLastModifiedDate();
}
public class Amazon.Route53.Model.KeySigningKeyAlreadyExistsException : AmazonRoute53Exception {
    public KeySigningKeyAlreadyExistsException(string message);
    public KeySigningKeyAlreadyExistsException(string message, Exception innerException);
    public KeySigningKeyAlreadyExistsException(Exception innerException);
    public KeySigningKeyAlreadyExistsException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public KeySigningKeyAlreadyExistsException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Route53.Model.KeySigningKeyInParentDSRecordException : AmazonRoute53Exception {
    public KeySigningKeyInParentDSRecordException(string message);
    public KeySigningKeyInParentDSRecordException(string message, Exception innerException);
    public KeySigningKeyInParentDSRecordException(Exception innerException);
    public KeySigningKeyInParentDSRecordException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public KeySigningKeyInParentDSRecordException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Route53.Model.KeySigningKeyInUseException : AmazonRoute53Exception {
    public KeySigningKeyInUseException(string message);
    public KeySigningKeyInUseException(string message, Exception innerException);
    public KeySigningKeyInUseException(Exception innerException);
    public KeySigningKeyInUseException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public KeySigningKeyInUseException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Route53.Model.KeySigningKeyWithActiveStatusNotFoundException : AmazonRoute53Exception {
    public KeySigningKeyWithActiveStatusNotFoundException(string message);
    public KeySigningKeyWithActiveStatusNotFoundException(string message, Exception innerException);
    public KeySigningKeyWithActiveStatusNotFoundException(Exception innerException);
    public KeySigningKeyWithActiveStatusNotFoundException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public KeySigningKeyWithActiveStatusNotFoundException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Route53.Model.LastVPCAssociationException : AmazonRoute53Exception {
    public LastVPCAssociationException(string message);
    public LastVPCAssociationException(string message, Exception innerException);
    public LastVPCAssociationException(Exception innerException);
    public LastVPCAssociationException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public LastVPCAssociationException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Route53.Model.LimitsExceededException : AmazonRoute53Exception {
    public LimitsExceededException(string message);
    public LimitsExceededException(string message, Exception innerException);
    public LimitsExceededException(Exception innerException);
    public LimitsExceededException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public LimitsExceededException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Route53.Model.LinkedService : object {
    private string _servicePrincipal;
    private string _description;
    [AWSPropertyAttribute]
public string ServicePrincipal { get; public set; }
    [AWSPropertyAttribute]
public string Description { get; public set; }
    public string get_ServicePrincipal();
    public void set_ServicePrincipal(string value);
    internal bool IsSetServicePrincipal();
    public string get_Description();
    public void set_Description(string value);
    internal bool IsSetDescription();
}
internal class Amazon.Route53.Model.ListCidrBlocksPaginator : object {
    private IAmazonRoute53 _client;
    private ListCidrBlocksRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<ListCidrBlocksResponse> Responses { get; }
    public IPaginatedEnumerable`1<CidrBlockSummary> CidrBlocks { get; }
    internal ListCidrBlocksPaginator(IAmazonRoute53 client, ListCidrBlocksRequest request);
    public sealed virtual IPaginatedEnumerable`1<ListCidrBlocksResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<CidrBlockSummary> get_CidrBlocks();
    [AsyncIteratorStateMachineAttribute("Amazon.Route53.Model.ListCidrBlocksPaginator/<Amazon-Runtime-IPaginator<Amazon-Route53-Model-ListCidrBlocksResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<ListCidrBlocksResponse> Amazon.Runtime.IPaginator<Amazon.Route53.Model.ListCidrBlocksResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.Route53.Model.ListCidrBlocksRequest : AmazonRoute53Request {
    private string _collectionId;
    private string _locationName;
    private string _nextToken;
    private string _maxResults;
    [AWSPropertyAttribute]
public string CollectionId { get; public set; }
    [AWSPropertyAttribute]
public string LocationName { get; public set; }
    [AWSPropertyAttribute]
public string NextToken { get; public set; }
    public string MaxResults { get; public set; }
    public string get_CollectionId();
    public void set_CollectionId(string value);
    internal bool IsSetCollectionId();
    public string get_LocationName();
    public void set_LocationName(string value);
    internal bool IsSetLocationName();
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
    public string get_MaxResults();
    public void set_MaxResults(string value);
    internal bool IsSetMaxResults();
}
public class Amazon.Route53.Model.ListCidrBlocksResponse : AmazonWebServiceResponse {
    private string _nextToken;
    private List`1<CidrBlockSummary> _cidrBlocks;
    [AWSPropertyAttribute]
public string NextToken { get; public set; }
    public List`1<CidrBlockSummary> CidrBlocks { get; public set; }
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
    public List`1<CidrBlockSummary> get_CidrBlocks();
    public void set_CidrBlocks(List`1<CidrBlockSummary> value);
    internal bool IsSetCidrBlocks();
}
internal class Amazon.Route53.Model.ListCidrCollectionsPaginator : object {
    private IAmazonRoute53 _client;
    private ListCidrCollectionsRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<ListCidrCollectionsResponse> Responses { get; }
    public IPaginatedEnumerable`1<CollectionSummary> CidrCollections { get; }
    internal ListCidrCollectionsPaginator(IAmazonRoute53 client, ListCidrCollectionsRequest request);
    public sealed virtual IPaginatedEnumerable`1<ListCidrCollectionsResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<CollectionSummary> get_CidrCollections();
    [AsyncIteratorStateMachineAttribute("Amazon.Route53.Model.ListCidrCollectionsPaginator/<Amazon-Runtime-IPaginator<Amazon-Route53-Model-ListCidrCollectionsResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<ListCidrCollectionsResponse> Amazon.Runtime.IPaginator<Amazon.Route53.Model.ListCidrCollectionsResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.Route53.Model.ListCidrCollectionsRequest : AmazonRoute53Request {
    private string _nextToken;
    private string _maxResults;
    [AWSPropertyAttribute]
public string NextToken { get; public set; }
    public string MaxResults { get; public set; }
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
    public string get_MaxResults();
    public void set_MaxResults(string value);
    internal bool IsSetMaxResults();
}
public class Amazon.Route53.Model.ListCidrCollectionsResponse : AmazonWebServiceResponse {
    private string _nextToken;
    private List`1<CollectionSummary> _cidrCollections;
    [AWSPropertyAttribute]
public string NextToken { get; public set; }
    public List`1<CollectionSummary> CidrCollections { get; public set; }
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
    public List`1<CollectionSummary> get_CidrCollections();
    public void set_CidrCollections(List`1<CollectionSummary> value);
    internal bool IsSetCidrCollections();
}
internal class Amazon.Route53.Model.ListCidrLocationsPaginator : object {
    private IAmazonRoute53 _client;
    private ListCidrLocationsRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<ListCidrLocationsResponse> Responses { get; }
    public IPaginatedEnumerable`1<LocationSummary> CidrLocations { get; }
    internal ListCidrLocationsPaginator(IAmazonRoute53 client, ListCidrLocationsRequest request);
    public sealed virtual IPaginatedEnumerable`1<ListCidrLocationsResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<LocationSummary> get_CidrLocations();
    [AsyncIteratorStateMachineAttribute("Amazon.Route53.Model.ListCidrLocationsPaginator/<Amazon-Runtime-IPaginator<Amazon-Route53-Model-ListCidrLocationsResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<ListCidrLocationsResponse> Amazon.Runtime.IPaginator<Amazon.Route53.Model.ListCidrLocationsResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.Route53.Model.ListCidrLocationsRequest : AmazonRoute53Request {
    private string _collectionId;
    private string _nextToken;
    private string _maxResults;
    [AWSPropertyAttribute]
public string CollectionId { get; public set; }
    [AWSPropertyAttribute]
public string NextToken { get; public set; }
    public string MaxResults { get; public set; }
    public string get_CollectionId();
    public void set_CollectionId(string value);
    internal bool IsSetCollectionId();
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
    public string get_MaxResults();
    public void set_MaxResults(string value);
    internal bool IsSetMaxResults();
}
public class Amazon.Route53.Model.ListCidrLocationsResponse : AmazonWebServiceResponse {
    private string _nextToken;
    private List`1<LocationSummary> _cidrLocations;
    [AWSPropertyAttribute]
public string NextToken { get; public set; }
    public List`1<LocationSummary> CidrLocations { get; public set; }
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
    public List`1<LocationSummary> get_CidrLocations();
    public void set_CidrLocations(List`1<LocationSummary> value);
    internal bool IsSetCidrLocations();
}
public class Amazon.Route53.Model.ListGeoLocationsRequest : AmazonRoute53Request {
    private string _startContinentCode;
    private string _startCountryCode;
    private string _startSubdivisionCode;
    private string _maxItems;
    [AWSPropertyAttribute]
public string StartContinentCode { get; public set; }
    [AWSPropertyAttribute]
public string StartCountryCode { get; public set; }
    [AWSPropertyAttribute]
public string StartSubdivisionCode { get; public set; }
    public string MaxItems { get; public set; }
    public string get_StartContinentCode();
    public void set_StartContinentCode(string value);
    internal bool IsSetStartContinentCode();
    public string get_StartCountryCode();
    public void set_StartCountryCode(string value);
    internal bool IsSetStartCountryCode();
    public string get_StartSubdivisionCode();
    public void set_StartSubdivisionCode(string value);
    internal bool IsSetStartSubdivisionCode();
    public string get_MaxItems();
    public void set_MaxItems(string value);
    internal bool IsSetMaxItems();
}
public class Amazon.Route53.Model.ListGeoLocationsResponse : AmazonWebServiceResponse {
    private List`1<GeoLocationDetails> _geoLocationDetailsList;
    private Nullable`1<bool> _isTruncated;
    private string _nextContinentCode;
    private string _nextCountryCode;
    private string _nextSubdivisionCode;
    private string _maxItems;
    [AWSPropertyAttribute]
public List`1<GeoLocationDetails> GeoLocationDetailsList { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<bool> IsTruncated { get; public set; }
    [AWSPropertyAttribute]
public string NextContinentCode { get; public set; }
    [AWSPropertyAttribute]
public string NextCountryCode { get; public set; }
    [AWSPropertyAttribute]
public string NextSubdivisionCode { get; public set; }
    [AWSPropertyAttribute]
public string MaxItems { get; public set; }
    public List`1<GeoLocationDetails> get_GeoLocationDetailsList();
    public void set_GeoLocationDetailsList(List`1<GeoLocationDetails> value);
    internal bool IsSetGeoLocationDetailsList();
    public Nullable`1<bool> get_IsTruncated();
    public void set_IsTruncated(Nullable`1<bool> value);
    internal bool IsSetIsTruncated();
    public string get_NextContinentCode();
    public void set_NextContinentCode(string value);
    internal bool IsSetNextContinentCode();
    public string get_NextCountryCode();
    public void set_NextCountryCode(string value);
    internal bool IsSetNextCountryCode();
    public string get_NextSubdivisionCode();
    public void set_NextSubdivisionCode(string value);
    internal bool IsSetNextSubdivisionCode();
    public string get_MaxItems();
    public void set_MaxItems(string value);
    internal bool IsSetMaxItems();
}
internal class Amazon.Route53.Model.ListHealthChecksPaginator : object {
    private IAmazonRoute53 _client;
    private ListHealthChecksRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<ListHealthChecksResponse> Responses { get; }
    public IPaginatedEnumerable`1<HealthCheck> HealthChecks { get; }
    internal ListHealthChecksPaginator(IAmazonRoute53 client, ListHealthChecksRequest request);
    public sealed virtual IPaginatedEnumerable`1<ListHealthChecksResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<HealthCheck> get_HealthChecks();
    [AsyncIteratorStateMachineAttribute("Amazon.Route53.Model.ListHealthChecksPaginator/<Amazon-Runtime-IPaginator<Amazon-Route53-Model-ListHealthChecksResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<ListHealthChecksResponse> Amazon.Runtime.IPaginator<Amazon.Route53.Model.ListHealthChecksResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.Route53.Model.ListHealthChecksRequest : AmazonRoute53Request {
    private string _marker;
    private string _maxItems;
    [AWSPropertyAttribute]
public string Marker { get; public set; }
    public string MaxItems { get; public set; }
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public string get_MaxItems();
    public void set_MaxItems(string value);
    internal bool IsSetMaxItems();
}
public class Amazon.Route53.Model.ListHealthChecksResponse : AmazonWebServiceResponse {
    private List`1<HealthCheck> _healthChecks;
    private string _marker;
    private Nullable`1<bool> _isTruncated;
    private string _nextMarker;
    private string _maxItems;
    [AWSPropertyAttribute]
public List`1<HealthCheck> HealthChecks { get; public set; }
    [AWSPropertyAttribute]
public string Marker { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<bool> IsTruncated { get; public set; }
    [AWSPropertyAttribute]
public string NextMarker { get; public set; }
    [AWSPropertyAttribute]
public string MaxItems { get; public set; }
    public List`1<HealthCheck> get_HealthChecks();
    public void set_HealthChecks(List`1<HealthCheck> value);
    internal bool IsSetHealthChecks();
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public Nullable`1<bool> get_IsTruncated();
    public void set_IsTruncated(Nullable`1<bool> value);
    internal bool IsSetIsTruncated();
    public string get_NextMarker();
    public void set_NextMarker(string value);
    internal bool IsSetNextMarker();
    public string get_MaxItems();
    public void set_MaxItems(string value);
    internal bool IsSetMaxItems();
}
public class Amazon.Route53.Model.ListHostedZonesByNameRequest : AmazonRoute53Request {
    private string _dnsName;
    private string _hostedZoneId;
    private string _maxItems;
    [AWSPropertyAttribute]
public string DNSName { get; public set; }
    [AWSPropertyAttribute]
public string HostedZoneId { get; public set; }
    public string MaxItems { get; public set; }
    public string get_DNSName();
    public void set_DNSName(string value);
    internal bool IsSetDNSName();
    public string get_HostedZoneId();
    public void set_HostedZoneId(string value);
    internal bool IsSetHostedZoneId();
    public string get_MaxItems();
    public void set_MaxItems(string value);
    internal bool IsSetMaxItems();
}
public class Amazon.Route53.Model.ListHostedZonesByNameResponse : AmazonWebServiceResponse {
    private List`1<HostedZone> _hostedZones;
    private string _dnsName;
    private string _hostedZoneId;
    private Nullable`1<bool> _isTruncated;
    private string _nextDNSName;
    private string _nextHostedZoneId;
    private string _maxItems;
    [AWSPropertyAttribute]
public List`1<HostedZone> HostedZones { get; public set; }
    [AWSPropertyAttribute]
public string DNSName { get; public set; }
    [AWSPropertyAttribute]
public string HostedZoneId { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<bool> IsTruncated { get; public set; }
    [AWSPropertyAttribute]
public string NextDNSName { get; public set; }
    [AWSPropertyAttribute]
public string NextHostedZoneId { get; public set; }
    [AWSPropertyAttribute]
public string MaxItems { get; public set; }
    public List`1<HostedZone> get_HostedZones();
    public void set_HostedZones(List`1<HostedZone> value);
    internal bool IsSetHostedZones();
    public string get_DNSName();
    public void set_DNSName(string value);
    internal bool IsSetDNSName();
    public string get_HostedZoneId();
    public void set_HostedZoneId(string value);
    internal bool IsSetHostedZoneId();
    public Nullable`1<bool> get_IsTruncated();
    public void set_IsTruncated(Nullable`1<bool> value);
    internal bool IsSetIsTruncated();
    public string get_NextDNSName();
    public void set_NextDNSName(string value);
    internal bool IsSetNextDNSName();
    public string get_NextHostedZoneId();
    public void set_NextHostedZoneId(string value);
    internal bool IsSetNextHostedZoneId();
    public string get_MaxItems();
    public void set_MaxItems(string value);
    internal bool IsSetMaxItems();
}
public class Amazon.Route53.Model.ListHostedZonesByVPCRequest : AmazonRoute53Request {
    private string _vpcId;
    private VPCRegion _vpcRegion;
    private string _maxItems;
    private string _nextToken;
    [AWSPropertyAttribute]
public string VPCId { get; public set; }
    [AWSPropertyAttribute]
public VPCRegion VPCRegion { get; public set; }
    public string MaxItems { get; public set; }
    [AWSPropertyAttribute]
public string NextToken { get; public set; }
    public string get_VPCId();
    public void set_VPCId(string value);
    internal bool IsSetVPCId();
    public VPCRegion get_VPCRegion();
    public void set_VPCRegion(VPCRegion value);
    internal bool IsSetVPCRegion();
    public string get_MaxItems();
    public void set_MaxItems(string value);
    internal bool IsSetMaxItems();
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
}
public class Amazon.Route53.Model.ListHostedZonesByVPCResponse : AmazonWebServiceResponse {
    private List`1<HostedZoneSummary> _hostedZoneSummaries;
    private string _maxItems;
    private string _nextToken;
    [AWSPropertyAttribute]
public List`1<HostedZoneSummary> HostedZoneSummaries { get; public set; }
    [AWSPropertyAttribute]
public string MaxItems { get; public set; }
    [AWSPropertyAttribute]
public string NextToken { get; public set; }
    public List`1<HostedZoneSummary> get_HostedZoneSummaries();
    public void set_HostedZoneSummaries(List`1<HostedZoneSummary> value);
    internal bool IsSetHostedZoneSummaries();
    public string get_MaxItems();
    public void set_MaxItems(string value);
    internal bool IsSetMaxItems();
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
}
internal class Amazon.Route53.Model.ListHostedZonesPaginator : object {
    private IAmazonRoute53 _client;
    private ListHostedZonesRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<ListHostedZonesResponse> Responses { get; }
    public IPaginatedEnumerable`1<HostedZone> HostedZones { get; }
    internal ListHostedZonesPaginator(IAmazonRoute53 client, ListHostedZonesRequest request);
    public sealed virtual IPaginatedEnumerable`1<ListHostedZonesResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<HostedZone> get_HostedZones();
    [AsyncIteratorStateMachineAttribute("Amazon.Route53.Model.ListHostedZonesPaginator/<Amazon-Runtime-IPaginator<Amazon-Route53-Model-ListHostedZonesResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<ListHostedZonesResponse> Amazon.Runtime.IPaginator<Amazon.Route53.Model.ListHostedZonesResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.Route53.Model.ListHostedZonesRequest : AmazonRoute53Request {
    private string _marker;
    private string _maxItems;
    private string _delegationSetId;
    private HostedZoneType _hostedZoneType;
    [AWSPropertyAttribute]
public string Marker { get; public set; }
    public string MaxItems { get; public set; }
    [AWSPropertyAttribute]
public string DelegationSetId { get; public set; }
    public HostedZoneType HostedZoneType { get; public set; }
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public string get_MaxItems();
    public void set_MaxItems(string value);
    internal bool IsSetMaxItems();
    public string get_DelegationSetId();
    public void set_DelegationSetId(string value);
    internal bool IsSetDelegationSetId();
    public HostedZoneType get_HostedZoneType();
    public void set_HostedZoneType(HostedZoneType value);
    internal bool IsSetHostedZoneType();
}
public class Amazon.Route53.Model.ListHostedZonesResponse : AmazonWebServiceResponse {
    private List`1<HostedZone> _hostedZones;
    private string _marker;
    private Nullable`1<bool> _isTruncated;
    private string _nextMarker;
    private string _maxItems;
    [AWSPropertyAttribute]
public List`1<HostedZone> HostedZones { get; public set; }
    [AWSPropertyAttribute]
public string Marker { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<bool> IsTruncated { get; public set; }
    [AWSPropertyAttribute]
public string NextMarker { get; public set; }
    [AWSPropertyAttribute]
public string MaxItems { get; public set; }
    public List`1<HostedZone> get_HostedZones();
    public void set_HostedZones(List`1<HostedZone> value);
    internal bool IsSetHostedZones();
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public Nullable`1<bool> get_IsTruncated();
    public void set_IsTruncated(Nullable`1<bool> value);
    internal bool IsSetIsTruncated();
    public string get_NextMarker();
    public void set_NextMarker(string value);
    internal bool IsSetNextMarker();
    public string get_MaxItems();
    public void set_MaxItems(string value);
    internal bool IsSetMaxItems();
}
internal class Amazon.Route53.Model.ListQueryLoggingConfigsPaginator : object {
    private IAmazonRoute53 _client;
    private ListQueryLoggingConfigsRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<ListQueryLoggingConfigsResponse> Responses { get; }
    public IPaginatedEnumerable`1<QueryLoggingConfig> QueryLoggingConfigs { get; }
    internal ListQueryLoggingConfigsPaginator(IAmazonRoute53 client, ListQueryLoggingConfigsRequest request);
    public sealed virtual IPaginatedEnumerable`1<ListQueryLoggingConfigsResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<QueryLoggingConfig> get_QueryLoggingConfigs();
    [AsyncIteratorStateMachineAttribute("Amazon.Route53.Model.ListQueryLoggingConfigsPaginator/<Amazon-Runtime-IPaginator<Amazon-Route53-Model-ListQueryLoggingConfigsResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<ListQueryLoggingConfigsResponse> Amazon.Runtime.IPaginator<Amazon.Route53.Model.ListQueryLoggingConfigsResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.Route53.Model.ListQueryLoggingConfigsRequest : AmazonRoute53Request {
    private string _hostedZoneId;
    private string _nextToken;
    private string _maxResults;
    [AWSPropertyAttribute]
public string HostedZoneId { get; public set; }
    [AWSPropertyAttribute]
public string NextToken { get; public set; }
    public string MaxResults { get; public set; }
    public string get_HostedZoneId();
    public void set_HostedZoneId(string value);
    internal bool IsSetHostedZoneId();
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
    public string get_MaxResults();
    public void set_MaxResults(string value);
    internal bool IsSetMaxResults();
}
public class Amazon.Route53.Model.ListQueryLoggingConfigsResponse : AmazonWebServiceResponse {
    private List`1<QueryLoggingConfig> _queryLoggingConfigs;
    private string _nextToken;
    [AWSPropertyAttribute]
public List`1<QueryLoggingConfig> QueryLoggingConfigs { get; public set; }
    [AWSPropertyAttribute]
public string NextToken { get; public set; }
    public List`1<QueryLoggingConfig> get_QueryLoggingConfigs();
    public void set_QueryLoggingConfigs(List`1<QueryLoggingConfig> value);
    internal bool IsSetQueryLoggingConfigs();
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
}
internal class Amazon.Route53.Model.ListResourceRecordSetsPaginator : object {
    private IAmazonRoute53 _client;
    private ListResourceRecordSetsRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<ListResourceRecordSetsResponse> Responses { get; }
    public IPaginatedEnumerable`1<ResourceRecordSet> ResourceRecordSets { get; }
    internal ListResourceRecordSetsPaginator(IAmazonRoute53 client, ListResourceRecordSetsRequest request);
    public sealed virtual IPaginatedEnumerable`1<ListResourceRecordSetsResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<ResourceRecordSet> get_ResourceRecordSets();
    [AsyncIteratorStateMachineAttribute("Amazon.Route53.Model.ListResourceRecordSetsPaginator/<Amazon-Runtime-IPaginator<Amazon-Route53-Model-ListResourceRecordSetsResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<ListResourceRecordSetsResponse> Amazon.Runtime.IPaginator<Amazon.Route53.Model.ListResourceRecordSetsResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.Route53.Model.ListResourceRecordSetsRequest : AmazonRoute53Request {
    private string _hostedZoneId;
    private string _startRecordName;
    private RRType _startRecordType;
    private string _startRecordIdentifier;
    private string _maxItems;
    [AWSPropertyAttribute]
public string HostedZoneId { get; public set; }
    [AWSPropertyAttribute]
public string StartRecordName { get; public set; }
    public RRType StartRecordType { get; public set; }
    [AWSPropertyAttribute]
public string StartRecordIdentifier { get; public set; }
    public string MaxItems { get; public set; }
    public ListResourceRecordSetsRequest(string hostedZoneId);
    public string get_HostedZoneId();
    public void set_HostedZoneId(string value);
    internal bool IsSetHostedZoneId();
    public string get_StartRecordName();
    public void set_StartRecordName(string value);
    internal bool IsSetStartRecordName();
    public RRType get_StartRecordType();
    public void set_StartRecordType(RRType value);
    internal bool IsSetStartRecordType();
    public string get_StartRecordIdentifier();
    public void set_StartRecordIdentifier(string value);
    internal bool IsSetStartRecordIdentifier();
    public string get_MaxItems();
    public void set_MaxItems(string value);
    internal bool IsSetMaxItems();
}
public class Amazon.Route53.Model.ListResourceRecordSetsResponse : AmazonWebServiceResponse {
    private List`1<ResourceRecordSet> _resourceRecordSets;
    private Nullable`1<bool> _isTruncated;
    private string _nextRecordName;
    private RRType _nextRecordType;
    private string _nextRecordIdentifier;
    private string _maxItems;
    [AWSPropertyAttribute]
public List`1<ResourceRecordSet> ResourceRecordSets { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<bool> IsTruncated { get; public set; }
    [AWSPropertyAttribute]
public string NextRecordName { get; public set; }
    public RRType NextRecordType { get; public set; }
    [AWSPropertyAttribute]
public string NextRecordIdentifier { get; public set; }
    [AWSPropertyAttribute]
public string MaxItems { get; public set; }
    public List`1<ResourceRecordSet> get_ResourceRecordSets();
    public void set_ResourceRecordSets(List`1<ResourceRecordSet> value);
    internal bool IsSetResourceRecordSets();
    public Nullable`1<bool> get_IsTruncated();
    public void set_IsTruncated(Nullable`1<bool> value);
    internal bool IsSetIsTruncated();
    public string get_NextRecordName();
    public void set_NextRecordName(string value);
    internal bool IsSetNextRecordName();
    public RRType get_NextRecordType();
    public void set_NextRecordType(RRType value);
    internal bool IsSetNextRecordType();
    public string get_NextRecordIdentifier();
    public void set_NextRecordIdentifier(string value);
    internal bool IsSetNextRecordIdentifier();
    public string get_MaxItems();
    public void set_MaxItems(string value);
    internal bool IsSetMaxItems();
}
public class Amazon.Route53.Model.ListReusableDelegationSetsRequest : AmazonRoute53Request {
    private string _marker;
    private string _maxItems;
    [AWSPropertyAttribute]
public string Marker { get; public set; }
    public string MaxItems { get; public set; }
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public string get_MaxItems();
    public void set_MaxItems(string value);
    internal bool IsSetMaxItems();
}
public class Amazon.Route53.Model.ListReusableDelegationSetsResponse : AmazonWebServiceResponse {
    private List`1<DelegationSet> _delegationSets;
    private string _marker;
    private Nullable`1<bool> _isTruncated;
    private string _nextMarker;
    private string _maxItems;
    [AWSPropertyAttribute]
public List`1<DelegationSet> DelegationSets { get; public set; }
    [AWSPropertyAttribute]
public string Marker { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<bool> IsTruncated { get; public set; }
    [AWSPropertyAttribute]
public string NextMarker { get; public set; }
    [AWSPropertyAttribute]
public string MaxItems { get; public set; }
    public List`1<DelegationSet> get_DelegationSets();
    public void set_DelegationSets(List`1<DelegationSet> value);
    internal bool IsSetDelegationSets();
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public Nullable`1<bool> get_IsTruncated();
    public void set_IsTruncated(Nullable`1<bool> value);
    internal bool IsSetIsTruncated();
    public string get_NextMarker();
    public void set_NextMarker(string value);
    internal bool IsSetNextMarker();
    public string get_MaxItems();
    public void set_MaxItems(string value);
    internal bool IsSetMaxItems();
}
public class Amazon.Route53.Model.ListTagsForResourceRequest : AmazonRoute53Request {
    private TagResourceType _resourceType;
    private string _resourceId;
    [AWSPropertyAttribute]
public TagResourceType ResourceType { get; public set; }
    [AWSPropertyAttribute]
public string ResourceId { get; public set; }
    public TagResourceType get_ResourceType();
    public void set_ResourceType(TagResourceType value);
    internal bool IsSetResourceType();
    public string get_ResourceId();
    public void set_ResourceId(string value);
    internal bool IsSetResourceId();
}
public class Amazon.Route53.Model.ListTagsForResourceResponse : AmazonWebServiceResponse {
    private ResourceTagSet _resourceTagSet;
    [AWSPropertyAttribute]
public ResourceTagSet ResourceTagSet { get; public set; }
    public ResourceTagSet get_ResourceTagSet();
    public void set_ResourceTagSet(ResourceTagSet value);
    internal bool IsSetResourceTagSet();
}
public class Amazon.Route53.Model.ListTagsForResourcesRequest : AmazonRoute53Request {
    private TagResourceType _resourceType;
    private List`1<string> _resourceIds;
    [AWSPropertyAttribute]
public TagResourceType ResourceType { get; public set; }
    [AWSPropertyAttribute]
public List`1<string> ResourceIds { get; public set; }
    public TagResourceType get_ResourceType();
    public void set_ResourceType(TagResourceType value);
    internal bool IsSetResourceType();
    public List`1<string> get_ResourceIds();
    public void set_ResourceIds(List`1<string> value);
    internal bool IsSetResourceIds();
}
public class Amazon.Route53.Model.ListTagsForResourcesResponse : AmazonWebServiceResponse {
    private List`1<ResourceTagSet> _resourceTagSets;
    [AWSPropertyAttribute]
public List`1<ResourceTagSet> ResourceTagSets { get; public set; }
    public List`1<ResourceTagSet> get_ResourceTagSets();
    public void set_ResourceTagSets(List`1<ResourceTagSet> value);
    internal bool IsSetResourceTagSets();
}
public class Amazon.Route53.Model.ListTrafficPoliciesRequest : AmazonRoute53Request {
    private string _trafficPolicyIdMarker;
    private string _maxItems;
    [AWSPropertyAttribute]
public string TrafficPolicyIdMarker { get; public set; }
    public string MaxItems { get; public set; }
    public string get_TrafficPolicyIdMarker();
    public void set_TrafficPolicyIdMarker(string value);
    internal bool IsSetTrafficPolicyIdMarker();
    public string get_MaxItems();
    public void set_MaxItems(string value);
    internal bool IsSetMaxItems();
}
public class Amazon.Route53.Model.ListTrafficPoliciesResponse : AmazonWebServiceResponse {
    private List`1<TrafficPolicySummary> _trafficPolicySummaries;
    private Nullable`1<bool> _isTruncated;
    private string _trafficPolicyIdMarker;
    private string _maxItems;
    [AWSPropertyAttribute]
public List`1<TrafficPolicySummary> TrafficPolicySummaries { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<bool> IsTruncated { get; public set; }
    [AWSPropertyAttribute]
public string TrafficPolicyIdMarker { get; public set; }
    [AWSPropertyAttribute]
public string MaxItems { get; public set; }
    public List`1<TrafficPolicySummary> get_TrafficPolicySummaries();
    public void set_TrafficPolicySummaries(List`1<TrafficPolicySummary> value);
    internal bool IsSetTrafficPolicySummaries();
    public Nullable`1<bool> get_IsTruncated();
    public void set_IsTruncated(Nullable`1<bool> value);
    internal bool IsSetIsTruncated();
    public string get_TrafficPolicyIdMarker();
    public void set_TrafficPolicyIdMarker(string value);
    internal bool IsSetTrafficPolicyIdMarker();
    public string get_MaxItems();
    public void set_MaxItems(string value);
    internal bool IsSetMaxItems();
}
public class Amazon.Route53.Model.ListTrafficPolicyInstancesByHostedZoneRequest : AmazonRoute53Request {
    private string _hostedZoneId;
    private string _trafficPolicyInstanceNameMarker;
    private RRType _trafficPolicyInstanceTypeMarker;
    private string _maxItems;
    [AWSPropertyAttribute]
public string HostedZoneId { get; public set; }
    [AWSPropertyAttribute]
public string TrafficPolicyInstanceNameMarker { get; public set; }
    public RRType TrafficPolicyInstanceTypeMarker { get; public set; }
    public string MaxItems { get; public set; }
    public string get_HostedZoneId();
    public void set_HostedZoneId(string value);
    internal bool IsSetHostedZoneId();
    public string get_TrafficPolicyInstanceNameMarker();
    public void set_TrafficPolicyInstanceNameMarker(string value);
    internal bool IsSetTrafficPolicyInstanceNameMarker();
    public RRType get_TrafficPolicyInstanceTypeMarker();
    public void set_TrafficPolicyInstanceTypeMarker(RRType value);
    internal bool IsSetTrafficPolicyInstanceTypeMarker();
    public string get_MaxItems();
    public void set_MaxItems(string value);
    internal bool IsSetMaxItems();
}
public class Amazon.Route53.Model.ListTrafficPolicyInstancesByHostedZoneResponse : AmazonWebServiceResponse {
    private List`1<TrafficPolicyInstance> _trafficPolicyInstances;
    private string _trafficPolicyInstanceNameMarker;
    private RRType _trafficPolicyInstanceTypeMarker;
    private Nullable`1<bool> _isTruncated;
    private string _maxItems;
    [AWSPropertyAttribute]
public List`1<TrafficPolicyInstance> TrafficPolicyInstances { get; public set; }
    [AWSPropertyAttribute]
public string TrafficPolicyInstanceNameMarker { get; public set; }
    public RRType TrafficPolicyInstanceTypeMarker { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<bool> IsTruncated { get; public set; }
    [AWSPropertyAttribute]
public string MaxItems { get; public set; }
    public List`1<TrafficPolicyInstance> get_TrafficPolicyInstances();
    public void set_TrafficPolicyInstances(List`1<TrafficPolicyInstance> value);
    internal bool IsSetTrafficPolicyInstances();
    public string get_TrafficPolicyInstanceNameMarker();
    public void set_TrafficPolicyInstanceNameMarker(string value);
    internal bool IsSetTrafficPolicyInstanceNameMarker();
    public RRType get_TrafficPolicyInstanceTypeMarker();
    public void set_TrafficPolicyInstanceTypeMarker(RRType value);
    internal bool IsSetTrafficPolicyInstanceTypeMarker();
    public Nullable`1<bool> get_IsTruncated();
    public void set_IsTruncated(Nullable`1<bool> value);
    internal bool IsSetIsTruncated();
    public string get_MaxItems();
    public void set_MaxItems(string value);
    internal bool IsSetMaxItems();
}
public class Amazon.Route53.Model.ListTrafficPolicyInstancesByPolicyRequest : AmazonRoute53Request {
    private string _trafficPolicyId;
    private Nullable`1<int> _trafficPolicyVersion;
    private string _hostedZoneIdMarker;
    private string _trafficPolicyInstanceNameMarker;
    private RRType _trafficPolicyInstanceTypeMarker;
    private string _maxItems;
    [AWSPropertyAttribute]
public string TrafficPolicyId { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> TrafficPolicyVersion { get; public set; }
    [AWSPropertyAttribute]
public string HostedZoneIdMarker { get; public set; }
    [AWSPropertyAttribute]
public string TrafficPolicyInstanceNameMarker { get; public set; }
    public RRType TrafficPolicyInstanceTypeMarker { get; public set; }
    public string MaxItems { get; public set; }
    public string get_TrafficPolicyId();
    public void set_TrafficPolicyId(string value);
    internal bool IsSetTrafficPolicyId();
    public Nullable`1<int> get_TrafficPolicyVersion();
    public void set_TrafficPolicyVersion(Nullable`1<int> value);
    internal bool IsSetTrafficPolicyVersion();
    public string get_HostedZoneIdMarker();
    public void set_HostedZoneIdMarker(string value);
    internal bool IsSetHostedZoneIdMarker();
    public string get_TrafficPolicyInstanceNameMarker();
    public void set_TrafficPolicyInstanceNameMarker(string value);
    internal bool IsSetTrafficPolicyInstanceNameMarker();
    public RRType get_TrafficPolicyInstanceTypeMarker();
    public void set_TrafficPolicyInstanceTypeMarker(RRType value);
    internal bool IsSetTrafficPolicyInstanceTypeMarker();
    public string get_MaxItems();
    public void set_MaxItems(string value);
    internal bool IsSetMaxItems();
}
public class Amazon.Route53.Model.ListTrafficPolicyInstancesByPolicyResponse : AmazonWebServiceResponse {
    private List`1<TrafficPolicyInstance> _trafficPolicyInstances;
    private string _hostedZoneIdMarker;
    private string _trafficPolicyInstanceNameMarker;
    private RRType _trafficPolicyInstanceTypeMarker;
    private Nullable`1<bool> _isTruncated;
    private string _maxItems;
    [AWSPropertyAttribute]
public List`1<TrafficPolicyInstance> TrafficPolicyInstances { get; public set; }
    [AWSPropertyAttribute]
public string HostedZoneIdMarker { get; public set; }
    [AWSPropertyAttribute]
public string TrafficPolicyInstanceNameMarker { get; public set; }
    public RRType TrafficPolicyInstanceTypeMarker { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<bool> IsTruncated { get; public set; }
    [AWSPropertyAttribute]
public string MaxItems { get; public set; }
    public List`1<TrafficPolicyInstance> get_TrafficPolicyInstances();
    public void set_TrafficPolicyInstances(List`1<TrafficPolicyInstance> value);
    internal bool IsSetTrafficPolicyInstances();
    public string get_HostedZoneIdMarker();
    public void set_HostedZoneIdMarker(string value);
    internal bool IsSetHostedZoneIdMarker();
    public string get_TrafficPolicyInstanceNameMarker();
    public void set_TrafficPolicyInstanceNameMarker(string value);
    internal bool IsSetTrafficPolicyInstanceNameMarker();
    public RRType get_TrafficPolicyInstanceTypeMarker();
    public void set_TrafficPolicyInstanceTypeMarker(RRType value);
    internal bool IsSetTrafficPolicyInstanceTypeMarker();
    public Nullable`1<bool> get_IsTruncated();
    public void set_IsTruncated(Nullable`1<bool> value);
    internal bool IsSetIsTruncated();
    public string get_MaxItems();
    public void set_MaxItems(string value);
    internal bool IsSetMaxItems();
}
public class Amazon.Route53.Model.ListTrafficPolicyInstancesRequest : AmazonRoute53Request {
    private string _hostedZoneIdMarker;
    private string _trafficPolicyInstanceNameMarker;
    private RRType _trafficPolicyInstanceTypeMarker;
    private string _maxItems;
    [AWSPropertyAttribute]
public string HostedZoneIdMarker { get; public set; }
    [AWSPropertyAttribute]
public string TrafficPolicyInstanceNameMarker { get; public set; }
    public RRType TrafficPolicyInstanceTypeMarker { get; public set; }
    public string MaxItems { get; public set; }
    public string get_HostedZoneIdMarker();
    public void set_HostedZoneIdMarker(string value);
    internal bool IsSetHostedZoneIdMarker();
    public string get_TrafficPolicyInstanceNameMarker();
    public void set_TrafficPolicyInstanceNameMarker(string value);
    internal bool IsSetTrafficPolicyInstanceNameMarker();
    public RRType get_TrafficPolicyInstanceTypeMarker();
    public void set_TrafficPolicyInstanceTypeMarker(RRType value);
    internal bool IsSetTrafficPolicyInstanceTypeMarker();
    public string get_MaxItems();
    public void set_MaxItems(string value);
    internal bool IsSetMaxItems();
}
public class Amazon.Route53.Model.ListTrafficPolicyInstancesResponse : AmazonWebServiceResponse {
    private List`1<TrafficPolicyInstance> _trafficPolicyInstances;
    private string _hostedZoneIdMarker;
    private string _trafficPolicyInstanceNameMarker;
    private RRType _trafficPolicyInstanceTypeMarker;
    private Nullable`1<bool> _isTruncated;
    private string _maxItems;
    [AWSPropertyAttribute]
public List`1<TrafficPolicyInstance> TrafficPolicyInstances { get; public set; }
    [AWSPropertyAttribute]
public string HostedZoneIdMarker { get; public set; }
    [AWSPropertyAttribute]
public string TrafficPolicyInstanceNameMarker { get; public set; }
    public RRType TrafficPolicyInstanceTypeMarker { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<bool> IsTruncated { get; public set; }
    [AWSPropertyAttribute]
public string MaxItems { get; public set; }
    public List`1<TrafficPolicyInstance> get_TrafficPolicyInstances();
    public void set_TrafficPolicyInstances(List`1<TrafficPolicyInstance> value);
    internal bool IsSetTrafficPolicyInstances();
    public string get_HostedZoneIdMarker();
    public void set_HostedZoneIdMarker(string value);
    internal bool IsSetHostedZoneIdMarker();
    public string get_TrafficPolicyInstanceNameMarker();
    public void set_TrafficPolicyInstanceNameMarker(string value);
    internal bool IsSetTrafficPolicyInstanceNameMarker();
    public RRType get_TrafficPolicyInstanceTypeMarker();
    public void set_TrafficPolicyInstanceTypeMarker(RRType value);
    internal bool IsSetTrafficPolicyInstanceTypeMarker();
    public Nullable`1<bool> get_IsTruncated();
    public void set_IsTruncated(Nullable`1<bool> value);
    internal bool IsSetIsTruncated();
    public string get_MaxItems();
    public void set_MaxItems(string value);
    internal bool IsSetMaxItems();
}
public class Amazon.Route53.Model.ListTrafficPolicyVersionsRequest : AmazonRoute53Request {
    private string _id;
    private string _trafficPolicyVersionMarker;
    private string _maxItems;
    [AWSPropertyAttribute]
public string Id { get; public set; }
    [AWSPropertyAttribute]
public string TrafficPolicyVersionMarker { get; public set; }
    public string MaxItems { get; public set; }
    public string get_Id();
    public void set_Id(string value);
    internal bool IsSetId();
    public string get_TrafficPolicyVersionMarker();
    public void set_TrafficPolicyVersionMarker(string value);
    internal bool IsSetTrafficPolicyVersionMarker();
    public string get_MaxItems();
    public void set_MaxItems(string value);
    internal bool IsSetMaxItems();
}
public class Amazon.Route53.Model.ListTrafficPolicyVersionsResponse : AmazonWebServiceResponse {
    private List`1<TrafficPolicy> _trafficPolicies;
    private Nullable`1<bool> _isTruncated;
    private string _trafficPolicyVersionMarker;
    private string _maxItems;
    [AWSPropertyAttribute]
public List`1<TrafficPolicy> TrafficPolicies { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<bool> IsTruncated { get; public set; }
    [AWSPropertyAttribute]
public string TrafficPolicyVersionMarker { get; public set; }
    [AWSPropertyAttribute]
public string MaxItems { get; public set; }
    public List`1<TrafficPolicy> get_TrafficPolicies();
    public void set_TrafficPolicies(List`1<TrafficPolicy> value);
    internal bool IsSetTrafficPolicies();
    public Nullable`1<bool> get_IsTruncated();
    public void set_IsTruncated(Nullable`1<bool> value);
    internal bool IsSetIsTruncated();
    public string get_TrafficPolicyVersionMarker();
    public void set_TrafficPolicyVersionMarker(string value);
    internal bool IsSetTrafficPolicyVersionMarker();
    public string get_MaxItems();
    public void set_MaxItems(string value);
    internal bool IsSetMaxItems();
}
public class Amazon.Route53.Model.ListVPCAssociationAuthorizationsRequest : AmazonRoute53Request {
    private string _hostedZoneId;
    private string _nextToken;
    private string _maxResults;
    [AWSPropertyAttribute]
public string HostedZoneId { get; public set; }
    [AWSPropertyAttribute]
public string NextToken { get; public set; }
    public string MaxResults { get; public set; }
    public string get_HostedZoneId();
    public void set_HostedZoneId(string value);
    internal bool IsSetHostedZoneId();
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
    public string get_MaxResults();
    public void set_MaxResults(string value);
    internal bool IsSetMaxResults();
}
public class Amazon.Route53.Model.ListVPCAssociationAuthorizationsResponse : AmazonWebServiceResponse {
    private string _hostedZoneId;
    private string _nextToken;
    private List`1<VPC> _vpCs;
    [AWSPropertyAttribute]
public string HostedZoneId { get; public set; }
    [AWSPropertyAttribute]
public string NextToken { get; public set; }
    [AWSPropertyAttribute]
public List`1<VPC> VPCs { get; public set; }
    public string get_HostedZoneId();
    public void set_HostedZoneId(string value);
    internal bool IsSetHostedZoneId();
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
    public List`1<VPC> get_VPCs();
    public void set_VPCs(List`1<VPC> value);
    internal bool IsSetVPCs();
}
public class Amazon.Route53.Model.LocationSummary : object {
    private string _locationName;
    [AWSPropertyAttribute]
public string LocationName { get; public set; }
    public string get_LocationName();
    public void set_LocationName(string value);
    internal bool IsSetLocationName();
}
public class Amazon.Route53.Model.NoSuchChangeException : AmazonRoute53Exception {
    public NoSuchChangeException(string message);
    public NoSuchChangeException(string message, Exception innerException);
    public NoSuchChangeException(Exception innerException);
    public NoSuchChangeException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public NoSuchChangeException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Route53.Model.NoSuchCidrCollectionException : AmazonRoute53Exception {
    public NoSuchCidrCollectionException(string message);
    public NoSuchCidrCollectionException(string message, Exception innerException);
    public NoSuchCidrCollectionException(Exception innerException);
    public NoSuchCidrCollectionException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public NoSuchCidrCollectionException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Route53.Model.NoSuchCidrLocationException : AmazonRoute53Exception {
    public NoSuchCidrLocationException(string message);
    public NoSuchCidrLocationException(string message, Exception innerException);
    public NoSuchCidrLocationException(Exception innerException);
    public NoSuchCidrLocationException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public NoSuchCidrLocationException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Route53.Model.NoSuchCloudWatchLogsLogGroupException : AmazonRoute53Exception {
    public NoSuchCloudWatchLogsLogGroupException(string message);
    public NoSuchCloudWatchLogsLogGroupException(string message, Exception innerException);
    public NoSuchCloudWatchLogsLogGroupException(Exception innerException);
    public NoSuchCloudWatchLogsLogGroupException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public NoSuchCloudWatchLogsLogGroupException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Route53.Model.NoSuchDelegationSetException : AmazonRoute53Exception {
    public NoSuchDelegationSetException(string message);
    public NoSuchDelegationSetException(string message, Exception innerException);
    public NoSuchDelegationSetException(Exception innerException);
    public NoSuchDelegationSetException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public NoSuchDelegationSetException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Route53.Model.NoSuchGeoLocationException : AmazonRoute53Exception {
    public NoSuchGeoLocationException(string message);
    public NoSuchGeoLocationException(string message, Exception innerException);
    public NoSuchGeoLocationException(Exception innerException);
    public NoSuchGeoLocationException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public NoSuchGeoLocationException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Route53.Model.NoSuchHealthCheckException : AmazonRoute53Exception {
    public NoSuchHealthCheckException(string message);
    public NoSuchHealthCheckException(string message, Exception innerException);
    public NoSuchHealthCheckException(Exception innerException);
    public NoSuchHealthCheckException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public NoSuchHealthCheckException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Route53.Model.NoSuchHostedZoneException : AmazonRoute53Exception {
    public NoSuchHostedZoneException(string message);
    public NoSuchHostedZoneException(string message, Exception innerException);
    public NoSuchHostedZoneException(Exception innerException);
    public NoSuchHostedZoneException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public NoSuchHostedZoneException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Route53.Model.NoSuchKeySigningKeyException : AmazonRoute53Exception {
    public NoSuchKeySigningKeyException(string message);
    public NoSuchKeySigningKeyException(string message, Exception innerException);
    public NoSuchKeySigningKeyException(Exception innerException);
    public NoSuchKeySigningKeyException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public NoSuchKeySigningKeyException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Route53.Model.NoSuchQueryLoggingConfigException : AmazonRoute53Exception {
    public NoSuchQueryLoggingConfigException(string message);
    public NoSuchQueryLoggingConfigException(string message, Exception innerException);
    public NoSuchQueryLoggingConfigException(Exception innerException);
    public NoSuchQueryLoggingConfigException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public NoSuchQueryLoggingConfigException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Route53.Model.NoSuchTrafficPolicyException : AmazonRoute53Exception {
    public NoSuchTrafficPolicyException(string message);
    public NoSuchTrafficPolicyException(string message, Exception innerException);
    public NoSuchTrafficPolicyException(Exception innerException);
    public NoSuchTrafficPolicyException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public NoSuchTrafficPolicyException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Route53.Model.NoSuchTrafficPolicyInstanceException : AmazonRoute53Exception {
    public NoSuchTrafficPolicyInstanceException(string message);
    public NoSuchTrafficPolicyInstanceException(string message, Exception innerException);
    public NoSuchTrafficPolicyInstanceException(Exception innerException);
    public NoSuchTrafficPolicyInstanceException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public NoSuchTrafficPolicyInstanceException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Route53.Model.NotAuthorizedException : AmazonRoute53Exception {
    public NotAuthorizedException(string message);
    public NotAuthorizedException(string message, Exception innerException);
    public NotAuthorizedException(Exception innerException);
    public NotAuthorizedException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public NotAuthorizedException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Route53.Model.PriorRequestNotCompleteException : AmazonRoute53Exception {
    public PriorRequestNotCompleteException(string message);
    public PriorRequestNotCompleteException(string message, Exception innerException);
    public PriorRequestNotCompleteException(Exception innerException);
    public PriorRequestNotCompleteException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public PriorRequestNotCompleteException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Route53.Model.PublicZoneVPCAssociationException : AmazonRoute53Exception {
    public PublicZoneVPCAssociationException(string message);
    public PublicZoneVPCAssociationException(string message, Exception innerException);
    public PublicZoneVPCAssociationException(Exception innerException);
    public PublicZoneVPCAssociationException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public PublicZoneVPCAssociationException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Route53.Model.QueryLoggingConfig : object {
    private string _id;
    private string _hostedZoneId;
    private string _cloudWatchLogsLogGroupArn;
    [AWSPropertyAttribute]
public string Id { get; public set; }
    [AWSPropertyAttribute]
public string HostedZoneId { get; public set; }
    [AWSPropertyAttribute]
public string CloudWatchLogsLogGroupArn { get; public set; }
    public string get_Id();
    public void set_Id(string value);
    internal bool IsSetId();
    public string get_HostedZoneId();
    public void set_HostedZoneId(string value);
    internal bool IsSetHostedZoneId();
    public string get_CloudWatchLogsLogGroupArn();
    public void set_CloudWatchLogsLogGroupArn(string value);
    internal bool IsSetCloudWatchLogsLogGroupArn();
}
public class Amazon.Route53.Model.QueryLoggingConfigAlreadyExistsException : AmazonRoute53Exception {
    public QueryLoggingConfigAlreadyExistsException(string message);
    public QueryLoggingConfigAlreadyExistsException(string message, Exception innerException);
    public QueryLoggingConfigAlreadyExistsException(Exception innerException);
    public QueryLoggingConfigAlreadyExistsException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public QueryLoggingConfigAlreadyExistsException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Route53.Model.ResourceRecord : object {
    private string _value;
    [AWSPropertyAttribute]
public string Value { get; public set; }
    public ResourceRecord(string value);
    public string get_Value();
    public void set_Value(string value);
    internal bool IsSetValue();
}
public class Amazon.Route53.Model.ResourceRecordSet : object {
    private string _name;
    private RRType _type;
    private string _setIdentifier;
    private Nullable`1<long> _weight;
    private ResourceRecordSetRegion _region;
    private GeoLocation _geoLocation;
    private ResourceRecordSetFailover _failover;
    private Nullable`1<bool> _multiValueAnswer;
    private Nullable`1<long> _ttl;
    private List`1<ResourceRecord> _resourceRecords;
    private AliasTarget _aliasTarget;
    private string _healthCheckId;
    private string _trafficPolicyInstanceId;
    private CidrRoutingConfig _cidrRoutingConfig;
    private GeoProximityLocation _geoProximityLocation;
    [AWSPropertyAttribute]
public string Name { get; public set; }
    [AWSPropertyAttribute]
public RRType Type { get; public set; }
    [AWSPropertyAttribute]
public string SetIdentifier { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<long> Weight { get; public set; }
    [AWSPropertyAttribute]
public ResourceRecordSetRegion Region { get; public set; }
    public GeoLocation GeoLocation { get; public set; }
    public ResourceRecordSetFailover Failover { get; public set; }
    public Nullable`1<bool> MultiValueAnswer { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<long> TTL { get; public set; }
    [AWSPropertyAttribute]
public List`1<ResourceRecord> ResourceRecords { get; public set; }
    public AliasTarget AliasTarget { get; public set; }
    [AWSPropertyAttribute]
public string HealthCheckId { get; public set; }
    [AWSPropertyAttribute]
public string TrafficPolicyInstanceId { get; public set; }
    public CidrRoutingConfig CidrRoutingConfig { get; public set; }
    public GeoProximityLocation GeoProximityLocation { get; public set; }
    public ResourceRecordSet(string name, RRType type);
    public string get_Name();
    public void set_Name(string value);
    internal bool IsSetName();
    public RRType get_Type();
    public void set_Type(RRType value);
    internal bool IsSetType();
    public string get_SetIdentifier();
    public void set_SetIdentifier(string value);
    internal bool IsSetSetIdentifier();
    public Nullable`1<long> get_Weight();
    public void set_Weight(Nullable`1<long> value);
    internal bool IsSetWeight();
    public ResourceRecordSetRegion get_Region();
    public void set_Region(ResourceRecordSetRegion value);
    internal bool IsSetRegion();
    public GeoLocation get_GeoLocation();
    public void set_GeoLocation(GeoLocation value);
    internal bool IsSetGeoLocation();
    public ResourceRecordSetFailover get_Failover();
    public void set_Failover(ResourceRecordSetFailover value);
    internal bool IsSetFailover();
    public Nullable`1<bool> get_MultiValueAnswer();
    public void set_MultiValueAnswer(Nullable`1<bool> value);
    internal bool IsSetMultiValueAnswer();
    public Nullable`1<long> get_TTL();
    public void set_TTL(Nullable`1<long> value);
    internal bool IsSetTTL();
    public List`1<ResourceRecord> get_ResourceRecords();
    public void set_ResourceRecords(List`1<ResourceRecord> value);
    internal bool IsSetResourceRecords();
    public AliasTarget get_AliasTarget();
    public void set_AliasTarget(AliasTarget value);
    internal bool IsSetAliasTarget();
    public string get_HealthCheckId();
    public void set_HealthCheckId(string value);
    internal bool IsSetHealthCheckId();
    public string get_TrafficPolicyInstanceId();
    public void set_TrafficPolicyInstanceId(string value);
    internal bool IsSetTrafficPolicyInstanceId();
    public CidrRoutingConfig get_CidrRoutingConfig();
    public void set_CidrRoutingConfig(CidrRoutingConfig value);
    internal bool IsSetCidrRoutingConfig();
    public GeoProximityLocation get_GeoProximityLocation();
    public void set_GeoProximityLocation(GeoProximityLocation value);
    internal bool IsSetGeoProximityLocation();
}
public class Amazon.Route53.Model.ResourceTagSet : object {
    private TagResourceType _resourceType;
    private string _resourceId;
    private List`1<Tag> _tags;
    public TagResourceType ResourceType { get; public set; }
    [AWSPropertyAttribute]
public string ResourceId { get; public set; }
    [AWSPropertyAttribute]
public List`1<Tag> Tags { get; public set; }
    public TagResourceType get_ResourceType();
    public void set_ResourceType(TagResourceType value);
    internal bool IsSetResourceType();
    public string get_ResourceId();
    public void set_ResourceId(string value);
    internal bool IsSetResourceId();
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
}
public class Amazon.Route53.Model.ReusableDelegationSetLimit : object {
    private ReusableDelegationSetLimitType _type;
    private Nullable`1<long> _value;
    [AWSPropertyAttribute]
public ReusableDelegationSetLimitType Type { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<long> Value { get; public set; }
    public ReusableDelegationSetLimitType get_Type();
    public void set_Type(ReusableDelegationSetLimitType value);
    internal bool IsSetType();
    public Nullable`1<long> get_Value();
    public void set_Value(Nullable`1<long> value);
    internal bool IsSetValue();
}
public class Amazon.Route53.Model.Route53PaginatorFactory : object {
    private IAmazonRoute53 client;
    internal Route53PaginatorFactory(IAmazonRoute53 client);
    public sealed virtual IListCidrBlocksPaginator ListCidrBlocks(ListCidrBlocksRequest request);
    public sealed virtual IListCidrCollectionsPaginator ListCidrCollections(ListCidrCollectionsRequest request);
    public sealed virtual IListCidrLocationsPaginator ListCidrLocations(ListCidrLocationsRequest request);
    public sealed virtual IListHealthChecksPaginator ListHealthChecks(ListHealthChecksRequest request);
    public sealed virtual IListHostedZonesPaginator ListHostedZones(ListHostedZonesRequest request);
    public sealed virtual IListQueryLoggingConfigsPaginator ListQueryLoggingConfigs(ListQueryLoggingConfigsRequest request);
    public sealed virtual IListResourceRecordSetsPaginator ListResourceRecordSets(ListResourceRecordSetsRequest request);
}
public class Amazon.Route53.Model.StatusReport : object {
    private string _status;
    private Nullable`1<DateTime> _checkedTime;
    public string Status { get; public set; }
    public Nullable`1<DateTime> CheckedTime { get; public set; }
    public string get_Status();
    public void set_Status(string value);
    internal bool IsSetStatus();
    public Nullable`1<DateTime> get_CheckedTime();
    public void set_CheckedTime(Nullable`1<DateTime> value);
    internal bool IsSetCheckedTime();
}
public class Amazon.Route53.Model.Tag : object {
    private string _key;
    private string _value;
    [AWSPropertyAttribute]
public string Key { get; public set; }
    [AWSPropertyAttribute]
public string Value { get; public set; }
    public string get_Key();
    public void set_Key(string value);
    internal bool IsSetKey();
    public string get_Value();
    public void set_Value(string value);
    internal bool IsSetValue();
}
public class Amazon.Route53.Model.TestDNSAnswerRequest : AmazonRoute53Request {
    private string _hostedZoneId;
    private string _recordName;
    private RRType _recordType;
    private string _resolverIP;
    private string _edns0ClientSubnetIP;
    private string _edns0ClientSubnetMask;
    [AWSPropertyAttribute]
public string HostedZoneId { get; public set; }
    [AWSPropertyAttribute]
public string RecordName { get; public set; }
    [AWSPropertyAttribute]
public RRType RecordType { get; public set; }
    [AWSPropertyAttribute]
public string ResolverIP { get; public set; }
    [AWSPropertyAttribute]
public string EDNS0ClientSubnetIP { get; public set; }
    [AWSPropertyAttribute]
public string EDNS0ClientSubnetMask { get; public set; }
    public string get_HostedZoneId();
    public void set_HostedZoneId(string value);
    internal bool IsSetHostedZoneId();
    public string get_RecordName();
    public void set_RecordName(string value);
    internal bool IsSetRecordName();
    public RRType get_RecordType();
    public void set_RecordType(RRType value);
    internal bool IsSetRecordType();
    public string get_ResolverIP();
    public void set_ResolverIP(string value);
    internal bool IsSetResolverIP();
    public string get_EDNS0ClientSubnetIP();
    public void set_EDNS0ClientSubnetIP(string value);
    internal bool IsSetEDNS0ClientSubnetIP();
    public string get_EDNS0ClientSubnetMask();
    public void set_EDNS0ClientSubnetMask(string value);
    internal bool IsSetEDNS0ClientSubnetMask();
}
public class Amazon.Route53.Model.TestDNSAnswerResponse : AmazonWebServiceResponse {
    private string _nameserver;
    private string _recordName;
    private RRType _recordType;
    private List`1<string> _recordData;
    private string _responseCode;
    private string _protocol;
    [AWSPropertyAttribute]
public string Nameserver { get; public set; }
    [AWSPropertyAttribute]
public string RecordName { get; public set; }
    [AWSPropertyAttribute]
public RRType RecordType { get; public set; }
    [AWSPropertyAttribute]
public List`1<string> RecordData { get; public set; }
    [AWSPropertyAttribute]
public string ResponseCode { get; public set; }
    [AWSPropertyAttribute]
public string Protocol { get; public set; }
    public string get_Nameserver();
    public void set_Nameserver(string value);
    internal bool IsSetNameserver();
    public string get_RecordName();
    public void set_RecordName(string value);
    internal bool IsSetRecordName();
    public RRType get_RecordType();
    public void set_RecordType(RRType value);
    internal bool IsSetRecordType();
    public List`1<string> get_RecordData();
    public void set_RecordData(List`1<string> value);
    internal bool IsSetRecordData();
    public string get_ResponseCode();
    public void set_ResponseCode(string value);
    internal bool IsSetResponseCode();
    public string get_Protocol();
    public void set_Protocol(string value);
    internal bool IsSetProtocol();
}
public class Amazon.Route53.Model.ThrottlingException : AmazonRoute53Exception {
    public ThrottlingException(string message);
    public ThrottlingException(string message, Exception innerException);
    public ThrottlingException(Exception innerException);
    public ThrottlingException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public ThrottlingException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Route53.Model.TooManyHealthChecksException : AmazonRoute53Exception {
    public TooManyHealthChecksException(string message);
    public TooManyHealthChecksException(string message, Exception innerException);
    public TooManyHealthChecksException(Exception innerException);
    public TooManyHealthChecksException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public TooManyHealthChecksException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Route53.Model.TooManyHostedZonesException : AmazonRoute53Exception {
    public TooManyHostedZonesException(string message);
    public TooManyHostedZonesException(string message, Exception innerException);
    public TooManyHostedZonesException(Exception innerException);
    public TooManyHostedZonesException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public TooManyHostedZonesException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Route53.Model.TooManyKeySigningKeysException : AmazonRoute53Exception {
    public TooManyKeySigningKeysException(string message);
    public TooManyKeySigningKeysException(string message, Exception innerException);
    public TooManyKeySigningKeysException(Exception innerException);
    public TooManyKeySigningKeysException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public TooManyKeySigningKeysException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Route53.Model.TooManyTrafficPoliciesException : AmazonRoute53Exception {
    public TooManyTrafficPoliciesException(string message);
    public TooManyTrafficPoliciesException(string message, Exception innerException);
    public TooManyTrafficPoliciesException(Exception innerException);
    public TooManyTrafficPoliciesException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public TooManyTrafficPoliciesException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Route53.Model.TooManyTrafficPolicyInstancesException : AmazonRoute53Exception {
    public TooManyTrafficPolicyInstancesException(string message);
    public TooManyTrafficPolicyInstancesException(string message, Exception innerException);
    public TooManyTrafficPolicyInstancesException(Exception innerException);
    public TooManyTrafficPolicyInstancesException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public TooManyTrafficPolicyInstancesException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Route53.Model.TooManyTrafficPolicyVersionsForCurrentPolicyException : AmazonRoute53Exception {
    public TooManyTrafficPolicyVersionsForCurrentPolicyException(string message);
    public TooManyTrafficPolicyVersionsForCurrentPolicyException(string message, Exception innerException);
    public TooManyTrafficPolicyVersionsForCurrentPolicyException(Exception innerException);
    public TooManyTrafficPolicyVersionsForCurrentPolicyException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public TooManyTrafficPolicyVersionsForCurrentPolicyException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Route53.Model.TooManyVPCAssociationAuthorizationsException : AmazonRoute53Exception {
    public TooManyVPCAssociationAuthorizationsException(string message);
    public TooManyVPCAssociationAuthorizationsException(string message, Exception innerException);
    public TooManyVPCAssociationAuthorizationsException(Exception innerException);
    public TooManyVPCAssociationAuthorizationsException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public TooManyVPCAssociationAuthorizationsException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Route53.Model.TrafficPolicy : object {
    private string _id;
    private Nullable`1<int> _version;
    private string _name;
    private RRType _type;
    private string _document;
    private string _comment;
    [AWSPropertyAttribute]
public string Id { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> Version { get; public set; }
    [AWSPropertyAttribute]
public string Name { get; public set; }
    [AWSPropertyAttribute]
public RRType Type { get; public set; }
    [AWSPropertyAttribute]
public string Document { get; public set; }
    [AWSPropertyAttribute]
public string Comment { get; public set; }
    public string get_Id();
    public void set_Id(string value);
    internal bool IsSetId();
    public Nullable`1<int> get_Version();
    public void set_Version(Nullable`1<int> value);
    internal bool IsSetVersion();
    public string get_Name();
    public void set_Name(string value);
    internal bool IsSetName();
    public RRType get_Type();
    public void set_Type(RRType value);
    internal bool IsSetType();
    public string get_Document();
    public void set_Document(string value);
    internal bool IsSetDocument();
    public string get_Comment();
    public void set_Comment(string value);
    internal bool IsSetComment();
}
public class Amazon.Route53.Model.TrafficPolicyAlreadyExistsException : AmazonRoute53Exception {
    public TrafficPolicyAlreadyExistsException(string message);
    public TrafficPolicyAlreadyExistsException(string message, Exception innerException);
    public TrafficPolicyAlreadyExistsException(Exception innerException);
    public TrafficPolicyAlreadyExistsException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public TrafficPolicyAlreadyExistsException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Route53.Model.TrafficPolicyInstance : object {
    private string _id;
    private string _hostedZoneId;
    private string _name;
    private Nullable`1<long> _ttl;
    private string _state;
    private string _message;
    private string _trafficPolicyId;
    private Nullable`1<int> _trafficPolicyVersion;
    private RRType _trafficPolicyType;
    [AWSPropertyAttribute]
public string Id { get; public set; }
    [AWSPropertyAttribute]
public string HostedZoneId { get; public set; }
    [AWSPropertyAttribute]
public string Name { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<long> TTL { get; public set; }
    [AWSPropertyAttribute]
public string State { get; public set; }
    [AWSPropertyAttribute]
public string Message { get; public set; }
    [AWSPropertyAttribute]
public string TrafficPolicyId { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> TrafficPolicyVersion { get; public set; }
    [AWSPropertyAttribute]
public RRType TrafficPolicyType { get; public set; }
    public string get_Id();
    public void set_Id(string value);
    internal bool IsSetId();
    public string get_HostedZoneId();
    public void set_HostedZoneId(string value);
    internal bool IsSetHostedZoneId();
    public string get_Name();
    public void set_Name(string value);
    internal bool IsSetName();
    public Nullable`1<long> get_TTL();
    public void set_TTL(Nullable`1<long> value);
    internal bool IsSetTTL();
    public string get_State();
    public void set_State(string value);
    internal bool IsSetState();
    public string get_Message();
    public void set_Message(string value);
    internal bool IsSetMessage();
    public string get_TrafficPolicyId();
    public void set_TrafficPolicyId(string value);
    internal bool IsSetTrafficPolicyId();
    public Nullable`1<int> get_TrafficPolicyVersion();
    public void set_TrafficPolicyVersion(Nullable`1<int> value);
    internal bool IsSetTrafficPolicyVersion();
    public RRType get_TrafficPolicyType();
    public void set_TrafficPolicyType(RRType value);
    internal bool IsSetTrafficPolicyType();
}
public class Amazon.Route53.Model.TrafficPolicyInstanceAlreadyExistsException : AmazonRoute53Exception {
    public TrafficPolicyInstanceAlreadyExistsException(string message);
    public TrafficPolicyInstanceAlreadyExistsException(string message, Exception innerException);
    public TrafficPolicyInstanceAlreadyExistsException(Exception innerException);
    public TrafficPolicyInstanceAlreadyExistsException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public TrafficPolicyInstanceAlreadyExistsException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Route53.Model.TrafficPolicyInUseException : AmazonRoute53Exception {
    public TrafficPolicyInUseException(string message);
    public TrafficPolicyInUseException(string message, Exception innerException);
    public TrafficPolicyInUseException(Exception innerException);
    public TrafficPolicyInUseException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public TrafficPolicyInUseException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Route53.Model.TrafficPolicySummary : object {
    private string _id;
    private string _name;
    private RRType _type;
    private Nullable`1<int> _latestVersion;
    private Nullable`1<int> _trafficPolicyCount;
    [AWSPropertyAttribute]
public string Id { get; public set; }
    [AWSPropertyAttribute]
public string Name { get; public set; }
    [AWSPropertyAttribute]
public RRType Type { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> LatestVersion { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> TrafficPolicyCount { get; public set; }
    public string get_Id();
    public void set_Id(string value);
    internal bool IsSetId();
    public string get_Name();
    public void set_Name(string value);
    internal bool IsSetName();
    public RRType get_Type();
    public void set_Type(RRType value);
    internal bool IsSetType();
    public Nullable`1<int> get_LatestVersion();
    public void set_LatestVersion(Nullable`1<int> value);
    internal bool IsSetLatestVersion();
    public Nullable`1<int> get_TrafficPolicyCount();
    public void set_TrafficPolicyCount(Nullable`1<int> value);
    internal bool IsSetTrafficPolicyCount();
}
public class Amazon.Route53.Model.UpdateHealthCheckRequest : AmazonRoute53Request {
    private string _healthCheckId;
    private Nullable`1<long> _healthCheckVersion;
    private string _ipAddress;
    private Nullable`1<int> _port;
    private string _resourcePath;
    private string _fullyQualifiedDomainName;
    private string _searchString;
    private Nullable`1<int> _failureThreshold;
    private Nullable`1<bool> _inverted;
    private Nullable`1<bool> _disabled;
    private Nullable`1<int> _healthThreshold;
    private List`1<string> _childHealthChecks;
    private Nullable`1<bool> _enableSNI;
    private List`1<string> _regions;
    private AlarmIdentifier _alarmIdentifier;
    private InsufficientDataHealthStatus _insufficientDataHealthStatus;
    private List`1<string> _resetElements;
    [AWSPropertyAttribute]
public string HealthCheckId { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<long> HealthCheckVersion { get; public set; }
    [AWSPropertyAttribute]
public string IPAddress { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> Port { get; public set; }
    [AWSPropertyAttribute]
public string ResourcePath { get; public set; }
    [AWSPropertyAttribute]
public string FullyQualifiedDomainName { get; public set; }
    [AWSPropertyAttribute]
public string SearchString { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> FailureThreshold { get; public set; }
    public Nullable`1<bool> Inverted { get; public set; }
    public Nullable`1<bool> Disabled { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> HealthThreshold { get; public set; }
    [AWSPropertyAttribute]
public List`1<string> ChildHealthChecks { get; public set; }
    public Nullable`1<bool> EnableSNI { get; public set; }
    [AWSPropertyAttribute]
public List`1<string> Regions { get; public set; }
    public AlarmIdentifier AlarmIdentifier { get; public set; }
    public InsufficientDataHealthStatus InsufficientDataHealthStatus { get; public set; }
    [AWSPropertyAttribute]
public List`1<string> ResetElements { get; public set; }
    public string get_HealthCheckId();
    public void set_HealthCheckId(string value);
    internal bool IsSetHealthCheckId();
    public Nullable`1<long> get_HealthCheckVersion();
    public void set_HealthCheckVersion(Nullable`1<long> value);
    internal bool IsSetHealthCheckVersion();
    public string get_IPAddress();
    public void set_IPAddress(string value);
    internal bool IsSetIPAddress();
    public Nullable`1<int> get_Port();
    public void set_Port(Nullable`1<int> value);
    internal bool IsSetPort();
    public string get_ResourcePath();
    public void set_ResourcePath(string value);
    internal bool IsSetResourcePath();
    public string get_FullyQualifiedDomainName();
    public void set_FullyQualifiedDomainName(string value);
    internal bool IsSetFullyQualifiedDomainName();
    public string get_SearchString();
    public void set_SearchString(string value);
    internal bool IsSetSearchString();
    public Nullable`1<int> get_FailureThreshold();
    public void set_FailureThreshold(Nullable`1<int> value);
    internal bool IsSetFailureThreshold();
    public Nullable`1<bool> get_Inverted();
    public void set_Inverted(Nullable`1<bool> value);
    internal bool IsSetInverted();
    public Nullable`1<bool> get_Disabled();
    public void set_Disabled(Nullable`1<bool> value);
    internal bool IsSetDisabled();
    public Nullable`1<int> get_HealthThreshold();
    public void set_HealthThreshold(Nullable`1<int> value);
    internal bool IsSetHealthThreshold();
    public List`1<string> get_ChildHealthChecks();
    public void set_ChildHealthChecks(List`1<string> value);
    internal bool IsSetChildHealthChecks();
    public Nullable`1<bool> get_EnableSNI();
    public void set_EnableSNI(Nullable`1<bool> value);
    internal bool IsSetEnableSNI();
    public List`1<string> get_Regions();
    public void set_Regions(List`1<string> value);
    internal bool IsSetRegions();
    public AlarmIdentifier get_AlarmIdentifier();
    public void set_AlarmIdentifier(AlarmIdentifier value);
    internal bool IsSetAlarmIdentifier();
    public InsufficientDataHealthStatus get_InsufficientDataHealthStatus();
    public void set_InsufficientDataHealthStatus(InsufficientDataHealthStatus value);
    internal bool IsSetInsufficientDataHealthStatus();
    public List`1<string> get_ResetElements();
    public void set_ResetElements(List`1<string> value);
    internal bool IsSetResetElements();
}
public class Amazon.Route53.Model.UpdateHealthCheckResponse : AmazonWebServiceResponse {
    private HealthCheck _healthCheck;
    [AWSPropertyAttribute]
public HealthCheck HealthCheck { get; public set; }
    public HealthCheck get_HealthCheck();
    public void set_HealthCheck(HealthCheck value);
    internal bool IsSetHealthCheck();
}
public class Amazon.Route53.Model.UpdateHostedZoneCommentRequest : AmazonRoute53Request {
    private string _id;
    private string _comment;
    [AWSPropertyAttribute]
public string Id { get; public set; }
    [AWSPropertyAttribute]
public string Comment { get; public set; }
    public string get_Id();
    public void set_Id(string value);
    internal bool IsSetId();
    public string get_Comment();
    public void set_Comment(string value);
    internal bool IsSetComment();
}
public class Amazon.Route53.Model.UpdateHostedZoneCommentResponse : AmazonWebServiceResponse {
    private HostedZone _hostedZone;
    [AWSPropertyAttribute]
public HostedZone HostedZone { get; public set; }
    public HostedZone get_HostedZone();
    public void set_HostedZone(HostedZone value);
    internal bool IsSetHostedZone();
}
public class Amazon.Route53.Model.UpdateTrafficPolicyCommentRequest : AmazonRoute53Request {
    private string _id;
    private Nullable`1<int> _version;
    private string _comment;
    [AWSPropertyAttribute]
public string Id { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> Version { get; public set; }
    [AWSPropertyAttribute]
public string Comment { get; public set; }
    public string get_Id();
    public void set_Id(string value);
    internal bool IsSetId();
    public Nullable`1<int> get_Version();
    public void set_Version(Nullable`1<int> value);
    internal bool IsSetVersion();
    public string get_Comment();
    public void set_Comment(string value);
    internal bool IsSetComment();
}
public class Amazon.Route53.Model.UpdateTrafficPolicyCommentResponse : AmazonWebServiceResponse {
    private TrafficPolicy _trafficPolicy;
    [AWSPropertyAttribute]
public TrafficPolicy TrafficPolicy { get; public set; }
    public TrafficPolicy get_TrafficPolicy();
    public void set_TrafficPolicy(TrafficPolicy value);
    internal bool IsSetTrafficPolicy();
}
public class Amazon.Route53.Model.UpdateTrafficPolicyInstanceRequest : AmazonRoute53Request {
    private string _id;
    private Nullable`1<long> _ttl;
    private string _trafficPolicyId;
    private Nullable`1<int> _trafficPolicyVersion;
    [AWSPropertyAttribute]
public string Id { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<long> TTL { get; public set; }
    [AWSPropertyAttribute]
public string TrafficPolicyId { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> TrafficPolicyVersion { get; public set; }
    public string get_Id();
    public void set_Id(string value);
    internal bool IsSetId();
    public Nullable`1<long> get_TTL();
    public void set_TTL(Nullable`1<long> value);
    internal bool IsSetTTL();
    public string get_TrafficPolicyId();
    public void set_TrafficPolicyId(string value);
    internal bool IsSetTrafficPolicyId();
    public Nullable`1<int> get_TrafficPolicyVersion();
    public void set_TrafficPolicyVersion(Nullable`1<int> value);
    internal bool IsSetTrafficPolicyVersion();
}
public class Amazon.Route53.Model.UpdateTrafficPolicyInstanceResponse : AmazonWebServiceResponse {
    private TrafficPolicyInstance _trafficPolicyInstance;
    [AWSPropertyAttribute]
public TrafficPolicyInstance TrafficPolicyInstance { get; public set; }
    public TrafficPolicyInstance get_TrafficPolicyInstance();
    public void set_TrafficPolicyInstance(TrafficPolicyInstance value);
    internal bool IsSetTrafficPolicyInstance();
}
public class Amazon.Route53.Model.VPC : object {
    private VPCRegion _vpcRegion;
    private string _vpcId;
    [AWSPropertyAttribute]
public VPCRegion VPCRegion { get; public set; }
    [AWSPropertyAttribute]
public string VPCId { get; public set; }
    public VPCRegion get_VPCRegion();
    public void set_VPCRegion(VPCRegion value);
    internal bool IsSetVPCRegion();
    public string get_VPCId();
    public void set_VPCId(string value);
    internal bool IsSetVPCId();
}
public class Amazon.Route53.Model.VPCAssociationAuthorizationNotFoundException : AmazonRoute53Exception {
    public VPCAssociationAuthorizationNotFoundException(string message);
    public VPCAssociationAuthorizationNotFoundException(string message, Exception innerException);
    public VPCAssociationAuthorizationNotFoundException(Exception innerException);
    public VPCAssociationAuthorizationNotFoundException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public VPCAssociationAuthorizationNotFoundException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Route53.Model.VPCAssociationNotFoundException : AmazonRoute53Exception {
    public VPCAssociationNotFoundException(string message);
    public VPCAssociationNotFoundException(string message, Exception innerException);
    public VPCAssociationNotFoundException(Exception innerException);
    public VPCAssociationNotFoundException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public VPCAssociationNotFoundException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Route53.ResettableElementName : ConstantClass {
    public static ResettableElementName ChildHealthChecks;
    public static ResettableElementName FullyQualifiedDomainName;
    public static ResettableElementName Regions;
    public static ResettableElementName ResourcePath;
    public ResettableElementName(string value);
    private static ResettableElementName();
    public static ResettableElementName FindValue(string value);
    public static ResettableElementName op_Implicit(string value);
}
public class Amazon.Route53.ResourceRecordSetFailover : ConstantClass {
    public static ResourceRecordSetFailover PRIMARY;
    public static ResourceRecordSetFailover SECONDARY;
    public ResourceRecordSetFailover(string value);
    private static ResourceRecordSetFailover();
    public static ResourceRecordSetFailover FindValue(string value);
    public static ResourceRecordSetFailover op_Implicit(string value);
}
public class Amazon.Route53.ResourceRecordSetRegion : ConstantClass {
    public static ResourceRecordSetRegion AfSouth1;
    public static ResourceRecordSetRegion ApEast1;
    public static ResourceRecordSetRegion ApNortheast1;
    public static ResourceRecordSetRegion ApNortheast2;
    public static ResourceRecordSetRegion ApNortheast3;
    public static ResourceRecordSetRegion ApSouth1;
    public static ResourceRecordSetRegion ApSouth2;
    public static ResourceRecordSetRegion ApSoutheast1;
    public static ResourceRecordSetRegion ApSoutheast2;
    public static ResourceRecordSetRegion ApSoutheast3;
    public static ResourceRecordSetRegion ApSoutheast4;
    public static ResourceRecordSetRegion CaCentral1;
    public static ResourceRecordSetRegion CaWest1;
    public static ResourceRecordSetRegion CnNorth1;
    public static ResourceRecordSetRegion CnNorthwest1;
    public static ResourceRecordSetRegion EuCentral1;
    public static ResourceRecordSetRegion EuCentral2;
    public static ResourceRecordSetRegion EuNorth1;
    public static ResourceRecordSetRegion EuSouth1;
    public static ResourceRecordSetRegion EuSouth2;
    public static ResourceRecordSetRegion EuWest1;
    public static ResourceRecordSetRegion EuWest2;
    public static ResourceRecordSetRegion EuWest3;
    public static ResourceRecordSetRegion IlCentral1;
    public static ResourceRecordSetRegion MeCentral1;
    public static ResourceRecordSetRegion MeSouth1;
    public static ResourceRecordSetRegion SaEast1;
    public static ResourceRecordSetRegion UsEast1;
    public static ResourceRecordSetRegion UsEast2;
    public static ResourceRecordSetRegion UsWest1;
    public static ResourceRecordSetRegion UsWest2;
    public ResourceRecordSetRegion(string value);
    private static ResourceRecordSetRegion();
    public static ResourceRecordSetRegion FindValue(string value);
    public static ResourceRecordSetRegion op_Implicit(string value);
}
public class Amazon.Route53.ReusableDelegationSetLimitType : ConstantClass {
    public static ReusableDelegationSetLimitType MAX_ZONES_BY_REUSABLE_DELEGATION_SET;
    public ReusableDelegationSetLimitType(string value);
    private static ReusableDelegationSetLimitType();
    public static ReusableDelegationSetLimitType FindValue(string value);
    public static ReusableDelegationSetLimitType op_Implicit(string value);
}
public class Amazon.Route53.RRType : ConstantClass {
    public static RRType A;
    public static RRType AAAA;
    public static RRType CAA;
    public static RRType CNAME;
    public static RRType DS;
    public static RRType MX;
    public static RRType NAPTR;
    public static RRType NS;
    public static RRType PTR;
    public static RRType SOA;
    public static RRType SPF;
    public static RRType SRV;
    public static RRType TXT;
    public RRType(string value);
    private static RRType();
    public static RRType FindValue(string value);
    public static RRType op_Implicit(string value);
}
public class Amazon.Route53.Statistic : ConstantClass {
    public static Statistic Average;
    public static Statistic Maximum;
    public static Statistic Minimum;
    public static Statistic SampleCount;
    public static Statistic Sum;
    public Statistic(string value);
    private static Statistic();
    public static Statistic FindValue(string value);
    public static Statistic op_Implicit(string value);
}
public class Amazon.Route53.TagResourceType : ConstantClass {
    public static TagResourceType Healthcheck;
    public static TagResourceType Hostedzone;
    public TagResourceType(string value);
    private static TagResourceType();
    public static TagResourceType FindValue(string value);
    public static TagResourceType op_Implicit(string value);
}
public class Amazon.Route53.VPCRegion : ConstantClass {
    public static VPCRegion AfSouth1;
    public static VPCRegion ApEast1;
    public static VPCRegion ApNortheast1;
    public static VPCRegion ApNortheast2;
    public static VPCRegion ApNortheast3;
    public static VPCRegion ApSouth1;
    public static VPCRegion ApSouth2;
    public static VPCRegion ApSoutheast1;
    public static VPCRegion ApSoutheast2;
    public static VPCRegion ApSoutheast3;
    public static VPCRegion ApSoutheast4;
    public static VPCRegion CaCentral1;
    public static VPCRegion CaWest1;
    public static VPCRegion CnNorth1;
    public static VPCRegion EuCentral1;
    public static VPCRegion EuCentral2;
    public static VPCRegion EuNorth1;
    public static VPCRegion EuSouth1;
    public static VPCRegion EuSouth2;
    public static VPCRegion EuWest1;
    public static VPCRegion EuWest2;
    public static VPCRegion EuWest3;
    public static VPCRegion IlCentral1;
    public static VPCRegion MeCentral1;
    public static VPCRegion MeSouth1;
    public static VPCRegion SaEast1;
    public static VPCRegion UsEast1;
    public static VPCRegion UsEast2;
    public static VPCRegion UsGovEast1;
    public static VPCRegion UsGovWest1;
    public static VPCRegion UsIsobEast1;
    public static VPCRegion UsIsoEast1;
    public static VPCRegion UsIsoWest1;
    public static VPCRegion UsWest1;
    public static VPCRegion UsWest2;
    public VPCRegion(string value);
    private static VPCRegion();
    public static VPCRegion FindValue(string value);
    public static VPCRegion op_Implicit(string value);
}
