public class Amazon.Route53Domains.AmazonRoute53DomainsClient : AmazonServiceClient {
    private static IServiceMetadata serviceMetadata;
    private IRoute53DomainsPaginatorFactory _paginators;
    public IRoute53DomainsPaginatorFactory Paginators { get; }
    protected IServiceMetadata ServiceMetadata { get; }
    public AmazonRoute53DomainsClient(RegionEndpoint region);
    public AmazonRoute53DomainsClient(AmazonRoute53DomainsConfig config);
    public AmazonRoute53DomainsClient(AWSCredentials credentials);
    public AmazonRoute53DomainsClient(AWSCredentials credentials, RegionEndpoint region);
    public AmazonRoute53DomainsClient(AWSCredentials credentials, AmazonRoute53DomainsConfig clientConfig);
    public AmazonRoute53DomainsClient(string awsAccessKeyId, string awsSecretAccessKey);
    public AmazonRoute53DomainsClient(string awsAccessKeyId, string awsSecretAccessKey, RegionEndpoint region);
    public AmazonRoute53DomainsClient(string awsAccessKeyId, string awsSecretAccessKey, AmazonRoute53DomainsConfig clientConfig);
    public AmazonRoute53DomainsClient(string awsAccessKeyId, string awsSecretAccessKey, string awsSessionToken);
    public AmazonRoute53DomainsClient(string awsAccessKeyId, string awsSecretAccessKey, string awsSessionToken, RegionEndpoint region);
    public AmazonRoute53DomainsClient(string awsAccessKeyId, string awsSecretAccessKey, string awsSessionToken, AmazonRoute53DomainsConfig clientConfig);
    private static AmazonRoute53DomainsClient();
    public sealed virtual IRoute53DomainsPaginatorFactory get_Paginators();
    protected virtual AbstractAWSSigner CreateSigner();
    protected virtual void CustomizeRuntimePipeline(RuntimePipeline pipeline);
    protected virtual IServiceMetadata get_ServiceMetadata();
    protected virtual void Dispose(bool disposing);
    internal virtual AcceptDomainTransferFromAnotherAwsAccountResponse AcceptDomainTransferFromAnotherAwsAccount(AcceptDomainTransferFromAnotherAwsAccountRequest request);
    public virtual Task`1<AcceptDomainTransferFromAnotherAwsAccountResponse> AcceptDomainTransferFromAnotherAwsAccountAsync(AcceptDomainTransferFromAnotherAwsAccountRequest request, CancellationToken cancellationToken);
    internal virtual AssociateDelegationSignerToDomainResponse AssociateDelegationSignerToDomain(AssociateDelegationSignerToDomainRequest request);
    public virtual Task`1<AssociateDelegationSignerToDomainResponse> AssociateDelegationSignerToDomainAsync(AssociateDelegationSignerToDomainRequest request, CancellationToken cancellationToken);
    internal virtual CancelDomainTransferToAnotherAwsAccountResponse CancelDomainTransferToAnotherAwsAccount(CancelDomainTransferToAnotherAwsAccountRequest request);
    public virtual Task`1<CancelDomainTransferToAnotherAwsAccountResponse> CancelDomainTransferToAnotherAwsAccountAsync(CancelDomainTransferToAnotherAwsAccountRequest request, CancellationToken cancellationToken);
    internal virtual CheckDomainAvailabilityResponse CheckDomainAvailability(CheckDomainAvailabilityRequest request);
    public virtual Task`1<CheckDomainAvailabilityResponse> CheckDomainAvailabilityAsync(CheckDomainAvailabilityRequest request, CancellationToken cancellationToken);
    internal virtual CheckDomainTransferabilityResponse CheckDomainTransferability(CheckDomainTransferabilityRequest request);
    public virtual Task`1<CheckDomainTransferabilityResponse> CheckDomainTransferabilityAsync(CheckDomainTransferabilityRequest request, CancellationToken cancellationToken);
    internal virtual DeleteDomainResponse DeleteDomain(DeleteDomainRequest request);
    public virtual Task`1<DeleteDomainResponse> DeleteDomainAsync(DeleteDomainRequest request, CancellationToken cancellationToken);
    internal virtual DeleteTagsForDomainResponse DeleteTagsForDomain(DeleteTagsForDomainRequest request);
    public virtual Task`1<DeleteTagsForDomainResponse> DeleteTagsForDomainAsync(string domainName, List`1<string> tagsToDelete, CancellationToken cancellationToken);
    public virtual Task`1<DeleteTagsForDomainResponse> DeleteTagsForDomainAsync(DeleteTagsForDomainRequest request, CancellationToken cancellationToken);
    internal virtual DisableDomainAutoRenewResponse DisableDomainAutoRenew(DisableDomainAutoRenewRequest request);
    public virtual Task`1<DisableDomainAutoRenewResponse> DisableDomainAutoRenewAsync(DisableDomainAutoRenewRequest request, CancellationToken cancellationToken);
    internal virtual DisableDomainTransferLockResponse DisableDomainTransferLock(DisableDomainTransferLockRequest request);
    public virtual Task`1<DisableDomainTransferLockResponse> DisableDomainTransferLockAsync(DisableDomainTransferLockRequest request, CancellationToken cancellationToken);
    internal virtual DisassociateDelegationSignerFromDomainResponse DisassociateDelegationSignerFromDomain(DisassociateDelegationSignerFromDomainRequest request);
    public virtual Task`1<DisassociateDelegationSignerFromDomainResponse> DisassociateDelegationSignerFromDomainAsync(DisassociateDelegationSignerFromDomainRequest request, CancellationToken cancellationToken);
    internal virtual EnableDomainAutoRenewResponse EnableDomainAutoRenew(EnableDomainAutoRenewRequest request);
    public virtual Task`1<EnableDomainAutoRenewResponse> EnableDomainAutoRenewAsync(EnableDomainAutoRenewRequest request, CancellationToken cancellationToken);
    internal virtual EnableDomainTransferLockResponse EnableDomainTransferLock(EnableDomainTransferLockRequest request);
    public virtual Task`1<EnableDomainTransferLockResponse> EnableDomainTransferLockAsync(EnableDomainTransferLockRequest request, CancellationToken cancellationToken);
    internal virtual GetContactReachabilityStatusResponse GetContactReachabilityStatus(GetContactReachabilityStatusRequest request);
    public virtual Task`1<GetContactReachabilityStatusResponse> GetContactReachabilityStatusAsync(GetContactReachabilityStatusRequest request, CancellationToken cancellationToken);
    internal virtual GetDomainDetailResponse GetDomainDetail(GetDomainDetailRequest request);
    public virtual Task`1<GetDomainDetailResponse> GetDomainDetailAsync(GetDomainDetailRequest request, CancellationToken cancellationToken);
    internal virtual GetDomainSuggestionsResponse GetDomainSuggestions(GetDomainSuggestionsRequest request);
    public virtual Task`1<GetDomainSuggestionsResponse> GetDomainSuggestionsAsync(GetDomainSuggestionsRequest request, CancellationToken cancellationToken);
    internal virtual GetOperationDetailResponse GetOperationDetail(GetOperationDetailRequest request);
    public virtual Task`1<GetOperationDetailResponse> GetOperationDetailAsync(GetOperationDetailRequest request, CancellationToken cancellationToken);
    internal virtual ListDomainsResponse ListDomains();
    internal virtual ListDomainsResponse ListDomains(ListDomainsRequest request);
    public virtual Task`1<ListDomainsResponse> ListDomainsAsync(CancellationToken cancellationToken);
    public virtual Task`1<ListDomainsResponse> ListDomainsAsync(ListDomainsRequest request, CancellationToken cancellationToken);
    internal virtual ListOperationsResponse ListOperations();
    internal virtual ListOperationsResponse ListOperations(ListOperationsRequest request);
    public virtual Task`1<ListOperationsResponse> ListOperationsAsync(CancellationToken cancellationToken);
    public virtual Task`1<ListOperationsResponse> ListOperationsAsync(ListOperationsRequest request, CancellationToken cancellationToken);
    internal virtual ListPricesResponse ListPrices(ListPricesRequest request);
    public virtual Task`1<ListPricesResponse> ListPricesAsync(ListPricesRequest request, CancellationToken cancellationToken);
    internal virtual ListTagsForDomainResponse ListTagsForDomain(ListTagsForDomainRequest request);
    public virtual Task`1<ListTagsForDomainResponse> ListTagsForDomainAsync(string domainName, CancellationToken cancellationToken);
    public virtual Task`1<ListTagsForDomainResponse> ListTagsForDomainAsync(ListTagsForDomainRequest request, CancellationToken cancellationToken);
    internal virtual PushDomainResponse PushDomain(PushDomainRequest request);
    public virtual Task`1<PushDomainResponse> PushDomainAsync(PushDomainRequest request, CancellationToken cancellationToken);
    internal virtual RegisterDomainResponse RegisterDomain(RegisterDomainRequest request);
    public virtual Task`1<RegisterDomainResponse> RegisterDomainAsync(RegisterDomainRequest request, CancellationToken cancellationToken);
    internal virtual RejectDomainTransferFromAnotherAwsAccountResponse RejectDomainTransferFromAnotherAwsAccount(RejectDomainTransferFromAnotherAwsAccountRequest request);
    public virtual Task`1<RejectDomainTransferFromAnotherAwsAccountResponse> RejectDomainTransferFromAnotherAwsAccountAsync(RejectDomainTransferFromAnotherAwsAccountRequest request, CancellationToken cancellationToken);
    internal virtual RenewDomainResponse RenewDomain(RenewDomainRequest request);
    public virtual Task`1<RenewDomainResponse> RenewDomainAsync(RenewDomainRequest request, CancellationToken cancellationToken);
    internal virtual ResendContactReachabilityEmailResponse ResendContactReachabilityEmail(ResendContactReachabilityEmailRequest request);
    public virtual Task`1<ResendContactReachabilityEmailResponse> ResendContactReachabilityEmailAsync(ResendContactReachabilityEmailRequest request, CancellationToken cancellationToken);
    internal virtual ResendOperationAuthorizationResponse ResendOperationAuthorization(ResendOperationAuthorizationRequest request);
    public virtual Task`1<ResendOperationAuthorizationResponse> ResendOperationAuthorizationAsync(ResendOperationAuthorizationRequest request, CancellationToken cancellationToken);
    internal virtual RetrieveDomainAuthCodeResponse RetrieveDomainAuthCode(RetrieveDomainAuthCodeRequest request);
    public virtual Task`1<RetrieveDomainAuthCodeResponse> RetrieveDomainAuthCodeAsync(RetrieveDomainAuthCodeRequest request, CancellationToken cancellationToken);
    internal virtual TransferDomainResponse TransferDomain(TransferDomainRequest request);
    public virtual Task`1<TransferDomainResponse> TransferDomainAsync(TransferDomainRequest request, CancellationToken cancellationToken);
    internal virtual TransferDomainToAnotherAwsAccountResponse TransferDomainToAnotherAwsAccount(TransferDomainToAnotherAwsAccountRequest request);
    public virtual Task`1<TransferDomainToAnotherAwsAccountResponse> TransferDomainToAnotherAwsAccountAsync(TransferDomainToAnotherAwsAccountRequest request, CancellationToken cancellationToken);
    internal virtual UpdateDomainContactResponse UpdateDomainContact(UpdateDomainContactRequest request);
    public virtual Task`1<UpdateDomainContactResponse> UpdateDomainContactAsync(UpdateDomainContactRequest request, CancellationToken cancellationToken);
    internal virtual UpdateDomainContactPrivacyResponse UpdateDomainContactPrivacy(UpdateDomainContactPrivacyRequest request);
    public virtual Task`1<UpdateDomainContactPrivacyResponse> UpdateDomainContactPrivacyAsync(UpdateDomainContactPrivacyRequest request, CancellationToken cancellationToken);
    internal virtual UpdateDomainNameserversResponse UpdateDomainNameservers(UpdateDomainNameserversRequest request);
    public virtual Task`1<UpdateDomainNameserversResponse> UpdateDomainNameserversAsync(UpdateDomainNameserversRequest request, CancellationToken cancellationToken);
    internal virtual UpdateTagsForDomainResponse UpdateTagsForDomain(UpdateTagsForDomainRequest request);
    public virtual Task`1<UpdateTagsForDomainResponse> UpdateTagsForDomainAsync(string domainName, List`1<Tag> tagsToUpdate, CancellationToken cancellationToken);
    public virtual Task`1<UpdateTagsForDomainResponse> UpdateTagsForDomainAsync(UpdateTagsForDomainRequest request, CancellationToken cancellationToken);
    internal virtual ViewBillingResponse ViewBilling(ViewBillingRequest request);
    public virtual Task`1<ViewBillingResponse> ViewBillingAsync(ViewBillingRequest request, CancellationToken cancellationToken);
    public sealed virtual Endpoint DetermineServiceOperationEndpoint(AmazonWebServiceRequest request);
    private sealed virtual override IClientConfig Amazon.Runtime.IAmazonService.get_Config();
}
[AWSSignerTypeAttribute("v4")]
public class Amazon.Route53Domains.AmazonRoute53DomainsConfig : ClientConfig {
    private static string UserAgentString;
    private static AmazonRoute53DomainsEndpointResolver EndpointResolver;
    private string _userAgent;
    public static string ServiceId { get; }
    public string RegionEndpointServiceName { get; }
    public string ServiceVersion { get; }
    public string UserAgent { get; }
    private static AmazonRoute53DomainsConfig();
    public static string get_ServiceId();
    public virtual string get_RegionEndpointServiceName();
    public virtual string get_ServiceVersion();
    public virtual string get_UserAgent();
    public virtual Endpoint DetermineServiceOperationEndpoint(ServiceOperationEndpointParameters parameters);
}
public static class Amazon.Route53Domains.AmazonRoute53DomainsDefaultConfiguration : object {
    [CompilerGeneratedAttribute]
private static IDefaultConfiguration <Standard>k__BackingField;
    [CompilerGeneratedAttribute]
private static IDefaultConfiguration <InRegion>k__BackingField;
    [CompilerGeneratedAttribute]
private static IDefaultConfiguration <CrossRegion>k__BackingField;
    [CompilerGeneratedAttribute]
private static IDefaultConfiguration <Mobile>k__BackingField;
    [CompilerGeneratedAttribute]
private static IDefaultConfiguration <Auto>k__BackingField;
    public static IDefaultConfiguration Standard { get; }
    public static IDefaultConfiguration InRegion { get; }
    public static IDefaultConfiguration CrossRegion { get; }
    public static IDefaultConfiguration Mobile { get; }
    public static IDefaultConfiguration Auto { get; }
    private static AmazonRoute53DomainsDefaultConfiguration();
    public static ReadOnlyCollection`1<IDefaultConfiguration> GetAllConfigurations();
    [CompilerGeneratedAttribute]
public static IDefaultConfiguration get_Standard();
    [CompilerGeneratedAttribute]
public static IDefaultConfiguration get_InRegion();
    [CompilerGeneratedAttribute]
public static IDefaultConfiguration get_CrossRegion();
    [CompilerGeneratedAttribute]
public static IDefaultConfiguration get_Mobile();
    [CompilerGeneratedAttribute]
public static IDefaultConfiguration get_Auto();
}
public class Amazon.Route53Domains.AmazonRoute53DomainsException : AmazonServiceException {
    public AmazonRoute53DomainsException(string message);
    public AmazonRoute53DomainsException(string message, Exception innerException);
    public AmazonRoute53DomainsException(Exception innerException);
    public AmazonRoute53DomainsException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public AmazonRoute53DomainsException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Route53Domains.AmazonRoute53DomainsRequest : AmazonWebServiceRequest {
}
public class Amazon.Route53Domains.ContactType : ConstantClass {
    public static ContactType ASSOCIATION;
    public static ContactType COMPANY;
    public static ContactType PERSON;
    public static ContactType PUBLIC_BODY;
    public static ContactType RESELLER;
    public ContactType(string value);
    private static ContactType();
    public static ContactType FindValue(string value);
    public static ContactType op_Implicit(string value);
}
public class Amazon.Route53Domains.CountryCode : ConstantClass {
    public static CountryCode AC;
    public static CountryCode AD;
    public static CountryCode AE;
    public static CountryCode AF;
    public static CountryCode AG;
    public static CountryCode AI;
    public static CountryCode AL;
    public static CountryCode AM;
    public static CountryCode AN;
    public static CountryCode AO;
    public static CountryCode AQ;
    public static CountryCode AR;
    public static CountryCode AS;
    public static CountryCode AT;
    public static CountryCode AU;
    public static CountryCode AW;
    public static CountryCode AX;
    public static CountryCode AZ;
    public static CountryCode BA;
    public static CountryCode BB;
    public static CountryCode BD;
    public static CountryCode BE;
    public static CountryCode BF;
    public static CountryCode BG;
    public static CountryCode BH;
    public static CountryCode BI;
    public static CountryCode BJ;
    public static CountryCode BL;
    public static CountryCode BM;
    public static CountryCode BN;
    public static CountryCode BO;
    public static CountryCode BQ;
    public static CountryCode BR;
    public static CountryCode BS;
    public static CountryCode BT;
    public static CountryCode BV;
    public static CountryCode BW;
    public static CountryCode BY;
    public static CountryCode BZ;
    public static CountryCode CA;
    public static CountryCode CC;
    public static CountryCode CD;
    public static CountryCode CF;
    public static CountryCode CG;
    public static CountryCode CH;
    public static CountryCode CI;
    public static CountryCode CK;
    public static CountryCode CL;
    public static CountryCode CM;
    public static CountryCode CN;
    public static CountryCode CO;
    public static CountryCode CR;
    public static CountryCode CU;
    public static CountryCode CV;
    public static CountryCode CW;
    public static CountryCode CX;
    public static CountryCode CY;
    public static CountryCode CZ;
    public static CountryCode DE;
    public static CountryCode DJ;
    public static CountryCode DK;
    public static CountryCode DM;
    public static CountryCode DO;
    public static CountryCode DZ;
    public static CountryCode EC;
    public static CountryCode EE;
    public static CountryCode EG;
    public static CountryCode EH;
    public static CountryCode ER;
    public static CountryCode ES;
    public static CountryCode ET;
    public static CountryCode FI;
    public static CountryCode FJ;
    public static CountryCode FK;
    public static CountryCode FM;
    public static CountryCode FO;
    public static CountryCode FR;
    public static CountryCode GA;
    public static CountryCode GB;
    public static CountryCode GD;
    public static CountryCode GE;
    public static CountryCode GF;
    public static CountryCode GG;
    public static CountryCode GH;
    public static CountryCode GI;
    public static CountryCode GL;
    public static CountryCode GM;
    public static CountryCode GN;
    public static CountryCode GP;
    public static CountryCode GQ;
    public static CountryCode GR;
    public static CountryCode GS;
    public static CountryCode GT;
    public static CountryCode GU;
    public static CountryCode GW;
    public static CountryCode GY;
    public static CountryCode HK;
    public static CountryCode HM;
    public static CountryCode HN;
    public static CountryCode HR;
    public static CountryCode HT;
    public static CountryCode HU;
    public static CountryCode ID;
    public static CountryCode IE;
    public static CountryCode IL;
    public static CountryCode IM;
    public static CountryCode IN;
    public static CountryCode IO;
    public static CountryCode IQ;
    public static CountryCode IR;
    public static CountryCode IS;
    public static CountryCode IT;
    public static CountryCode JE;
    public static CountryCode JM;
    public static CountryCode JO;
    public static CountryCode JP;
    public static CountryCode KE;
    public static CountryCode KG;
    public static CountryCode KH;
    public static CountryCode KI;
    public static CountryCode KM;
    public static CountryCode KN;
    public static CountryCode KP;
    public static CountryCode KR;
    public static CountryCode KW;
    public static CountryCode KY;
    public static CountryCode KZ;
    public static CountryCode LA;
    public static CountryCode LB;
    public static CountryCode LC;
    public static CountryCode LI;
    public static CountryCode LK;
    public static CountryCode LR;
    public static CountryCode LS;
    public static CountryCode LT;
    public static CountryCode LU;
    public static CountryCode LV;
    public static CountryCode LY;
    public static CountryCode MA;
    public static CountryCode MC;
    public static CountryCode MD;
    public static CountryCode ME;
    public static CountryCode MF;
    public static CountryCode MG;
    public static CountryCode MH;
    public static CountryCode MK;
    public static CountryCode ML;
    public static CountryCode MM;
    public static CountryCode MN;
    public static CountryCode MO;
    public static CountryCode MP;
    public static CountryCode MQ;
    public static CountryCode MR;
    public static CountryCode MS;
    public static CountryCode MT;
    public static CountryCode MU;
    public static CountryCode MV;
    public static CountryCode MW;
    public static CountryCode MX;
    public static CountryCode MY;
    public static CountryCode MZ;
    public static CountryCode NA;
    public static CountryCode NC;
    public static CountryCode NE;
    public static CountryCode NF;
    public static CountryCode NG;
    public static CountryCode NI;
    public static CountryCode NL;
    public static CountryCode NO;
    public static CountryCode NP;
    public static CountryCode NR;
    public static CountryCode NU;
    public static CountryCode NZ;
    public static CountryCode OM;
    public static CountryCode PA;
    public static CountryCode PE;
    public static CountryCode PF;
    public static CountryCode PG;
    public static CountryCode PH;
    public static CountryCode PK;
    public static CountryCode PL;
    public static CountryCode PM;
    public static CountryCode PN;
    public static CountryCode PR;
    public static CountryCode PS;
    public static CountryCode PT;
    public static CountryCode PW;
    public static CountryCode PY;
    public static CountryCode QA;
    public static CountryCode RE;
    public static CountryCode RO;
    public static CountryCode RS;
    public static CountryCode RU;
    public static CountryCode RW;
    public static CountryCode SA;
    public static CountryCode SB;
    public static CountryCode SC;
    public static CountryCode SD;
    public static CountryCode SE;
    public static CountryCode SG;
    public static CountryCode SH;
    public static CountryCode SI;
    public static CountryCode SJ;
    public static CountryCode SK;
    public static CountryCode SL;
    public static CountryCode SM;
    public static CountryCode SN;
    public static CountryCode SO;
    public static CountryCode SR;
    public static CountryCode SS;
    public static CountryCode ST;
    public static CountryCode SV;
    public static CountryCode SX;
    public static CountryCode SY;
    public static CountryCode SZ;
    public static CountryCode TC;
    public static CountryCode TD;
    public static CountryCode TF;
    public static CountryCode TG;
    public static CountryCode TH;
    public static CountryCode TJ;
    public static CountryCode TK;
    public static CountryCode TL;
    public static CountryCode TM;
    public static CountryCode TN;
    public static CountryCode TO;
    public static CountryCode TP;
    public static CountryCode TR;
    public static CountryCode TT;
    public static CountryCode TV;
    public static CountryCode TW;
    public static CountryCode TZ;
    public static CountryCode UA;
    public static CountryCode UG;
    public static CountryCode US;
    public static CountryCode UY;
    public static CountryCode UZ;
    public static CountryCode VA;
    public static CountryCode VC;
    public static CountryCode VE;
    public static CountryCode VG;
    public static CountryCode VI;
    public static CountryCode VN;
    public static CountryCode VU;
    public static CountryCode WF;
    public static CountryCode WS;
    public static CountryCode YE;
    public static CountryCode YT;
    public static CountryCode ZA;
    public static CountryCode ZM;
    public static CountryCode ZW;
    public CountryCode(string value);
    private static CountryCode();
    public static CountryCode FindValue(string value);
    public static CountryCode op_Implicit(string value);
}
public class Amazon.Route53Domains.DomainAvailability : ConstantClass {
    public static DomainAvailability AVAILABLE;
    public static DomainAvailability AVAILABLE_PREORDER;
    public static DomainAvailability AVAILABLE_RESERVED;
    public static DomainAvailability DONT_KNOW;
    public static DomainAvailability INVALID_NAME_FOR_TLD;
    public static DomainAvailability PENDING;
    public static DomainAvailability RESERVED;
    public static DomainAvailability UNAVAILABLE;
    public static DomainAvailability UNAVAILABLE_PREMIUM;
    public static DomainAvailability UNAVAILABLE_RESTRICTED;
    public DomainAvailability(string value);
    private static DomainAvailability();
    public static DomainAvailability FindValue(string value);
    public static DomainAvailability op_Implicit(string value);
}
public class Amazon.Route53Domains.Endpoints.Route53DomainsEndpointParameters : EndpointParameters {
    public string Region { get; public set; }
    public Nullable`1<bool> UseDualStack { get; public set; }
    public Nullable`1<bool> UseFIPS { get; public set; }
    public string Endpoint { get; public set; }
    public string get_Region();
    public void set_Region(string value);
    public Nullable`1<bool> get_UseDualStack();
    public void set_UseDualStack(Nullable`1<bool> value);
    public Nullable`1<bool> get_UseFIPS();
    public void set_UseFIPS(Nullable`1<bool> value);
    public string get_Endpoint();
    public void set_Endpoint(string value);
}
public class Amazon.Route53Domains.ExtraParamName : ConstantClass {
    public static ExtraParamName AU_ID_NUMBER;
    public static ExtraParamName AU_ID_TYPE;
    public static ExtraParamName AU_PRIORITY_TOKEN;
    public static ExtraParamName BIRTH_CITY;
    public static ExtraParamName BIRTH_COUNTRY;
    public static ExtraParamName BIRTH_DATE_IN_YYYY_MM_DD;
    public static ExtraParamName BIRTH_DEPARTMENT;
    public static ExtraParamName BRAND_NUMBER;
    public static ExtraParamName CA_BUSINESS_ENTITY_TYPE;
    public static ExtraParamName CA_LEGAL_REPRESENTATIVE;
    public static ExtraParamName CA_LEGAL_REPRESENTATIVE_CAPACITY;
    public static ExtraParamName CA_LEGAL_TYPE;
    public static ExtraParamName DOCUMENT_NUMBER;
    public static ExtraParamName DUNS_NUMBER;
    public static ExtraParamName ES_IDENTIFICATION;
    public static ExtraParamName ES_IDENTIFICATION_TYPE;
    public static ExtraParamName ES_LEGAL_FORM;
    public static ExtraParamName EU_COUNTRY_OF_CITIZENSHIP;
    public static ExtraParamName FI_BUSINESS_NUMBER;
    public static ExtraParamName FI_ID_NUMBER;
    public static ExtraParamName FI_NATIONALITY;
    public static ExtraParamName FI_ORGANIZATION_TYPE;
    public static ExtraParamName IT_NATIONALITY;
    public static ExtraParamName IT_PIN;
    public static ExtraParamName IT_REGISTRANT_ENTITY_TYPE;
    public static ExtraParamName RU_PASSPORT_DATA;
    public static ExtraParamName SE_ID_NUMBER;
    public static ExtraParamName SG_ID_NUMBER;
    public static ExtraParamName UK_COMPANY_NUMBER;
    public static ExtraParamName UK_CONTACT_TYPE;
    public static ExtraParamName VAT_NUMBER;
    public ExtraParamName(string value);
    private static ExtraParamName();
    public static ExtraParamName FindValue(string value);
    public static ExtraParamName op_Implicit(string value);
}
public interface Amazon.Route53Domains.IAmazonRoute53Domains {
    public IRoute53DomainsPaginatorFactory Paginators { get; }
    public abstract virtual IRoute53DomainsPaginatorFactory get_Paginators();
    public abstract virtual Task`1<AcceptDomainTransferFromAnotherAwsAccountResponse> AcceptDomainTransferFromAnotherAwsAccountAsync(AcceptDomainTransferFromAnotherAwsAccountRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<AssociateDelegationSignerToDomainResponse> AssociateDelegationSignerToDomainAsync(AssociateDelegationSignerToDomainRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<CancelDomainTransferToAnotherAwsAccountResponse> CancelDomainTransferToAnotherAwsAccountAsync(CancelDomainTransferToAnotherAwsAccountRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<CheckDomainAvailabilityResponse> CheckDomainAvailabilityAsync(CheckDomainAvailabilityRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<CheckDomainTransferabilityResponse> CheckDomainTransferabilityAsync(CheckDomainTransferabilityRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeleteDomainResponse> DeleteDomainAsync(DeleteDomainRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeleteTagsForDomainResponse> DeleteTagsForDomainAsync(string domainName, List`1<string> tagsToDelete, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeleteTagsForDomainResponse> DeleteTagsForDomainAsync(DeleteTagsForDomainRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DisableDomainAutoRenewResponse> DisableDomainAutoRenewAsync(DisableDomainAutoRenewRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DisableDomainTransferLockResponse> DisableDomainTransferLockAsync(DisableDomainTransferLockRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DisassociateDelegationSignerFromDomainResponse> DisassociateDelegationSignerFromDomainAsync(DisassociateDelegationSignerFromDomainRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<EnableDomainAutoRenewResponse> EnableDomainAutoRenewAsync(EnableDomainAutoRenewRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<EnableDomainTransferLockResponse> EnableDomainTransferLockAsync(EnableDomainTransferLockRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<GetContactReachabilityStatusResponse> GetContactReachabilityStatusAsync(GetContactReachabilityStatusRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<GetDomainDetailResponse> GetDomainDetailAsync(GetDomainDetailRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<GetDomainSuggestionsResponse> GetDomainSuggestionsAsync(GetDomainSuggestionsRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<GetOperationDetailResponse> GetOperationDetailAsync(GetOperationDetailRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ListDomainsResponse> ListDomainsAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<ListDomainsResponse> ListDomainsAsync(ListDomainsRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ListOperationsResponse> ListOperationsAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<ListOperationsResponse> ListOperationsAsync(ListOperationsRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ListPricesResponse> ListPricesAsync(ListPricesRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ListTagsForDomainResponse> ListTagsForDomainAsync(string domainName, CancellationToken cancellationToken);
    public abstract virtual Task`1<ListTagsForDomainResponse> ListTagsForDomainAsync(ListTagsForDomainRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<PushDomainResponse> PushDomainAsync(PushDomainRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<RegisterDomainResponse> RegisterDomainAsync(RegisterDomainRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<RejectDomainTransferFromAnotherAwsAccountResponse> RejectDomainTransferFromAnotherAwsAccountAsync(RejectDomainTransferFromAnotherAwsAccountRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<RenewDomainResponse> RenewDomainAsync(RenewDomainRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ResendContactReachabilityEmailResponse> ResendContactReachabilityEmailAsync(ResendContactReachabilityEmailRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ResendOperationAuthorizationResponse> ResendOperationAuthorizationAsync(ResendOperationAuthorizationRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<RetrieveDomainAuthCodeResponse> RetrieveDomainAuthCodeAsync(RetrieveDomainAuthCodeRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<TransferDomainResponse> TransferDomainAsync(TransferDomainRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<TransferDomainToAnotherAwsAccountResponse> TransferDomainToAnotherAwsAccountAsync(TransferDomainToAnotherAwsAccountRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<UpdateDomainContactResponse> UpdateDomainContactAsync(UpdateDomainContactRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<UpdateDomainContactPrivacyResponse> UpdateDomainContactPrivacyAsync(UpdateDomainContactPrivacyRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<UpdateDomainNameserversResponse> UpdateDomainNameserversAsync(UpdateDomainNameserversRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<UpdateTagsForDomainResponse> UpdateTagsForDomainAsync(string domainName, List`1<Tag> tagsToUpdate, CancellationToken cancellationToken);
    public abstract virtual Task`1<UpdateTagsForDomainResponse> UpdateTagsForDomainAsync(UpdateTagsForDomainRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ViewBillingResponse> ViewBillingAsync(ViewBillingRequest request, CancellationToken cancellationToken);
    public abstract virtual Endpoint DetermineServiceOperationEndpoint(AmazonWebServiceRequest request);
    [DynamicDependencyAttribute("512", "Amazon.Route53Domains.AmazonRoute53DomainsConfig")]
private static override ClientConfig Amazon.Runtime.IAmazonService.CreateDefaultClientConfig();
    [UnconditionalSuppressMessageAttribute("AssemblyLoadTrimming", "IL2026:RequiresUnreferencedCode")]
private static override IAmazonService Amazon.Runtime.IAmazonService.CreateDefaultServiceClient(AWSCredentials awsCredentials, ClientConfig clientConfig);
}
public class Amazon.Route53Domains.Internal.AmazonRoute53DomainsEndpointProvider : object {
    public sealed virtual Endpoint ResolveEndpoint(EndpointParameters parameters);
}
public class Amazon.Route53Domains.Internal.AmazonRoute53DomainsEndpointResolver : BaseEndpointResolver {
    protected virtual void ServiceSpecificHandler(IExecutionContext executionContext, EndpointParameters parameters);
    protected virtual EndpointParameters MapEndpointsParameters(IRequestContext requestContext);
}
public class Amazon.Route53Domains.Internal.AmazonRoute53DomainsMetadata : object {
    public string ServiceId { get; }
    public IDictionary`2<string, string> OperationNameMapping { get; }
    public sealed virtual string get_ServiceId();
    public sealed virtual IDictionary`2<string, string> get_OperationNameMapping();
}
public class Amazon.Route53Domains.ListDomainsAttributeName : ConstantClass {
    public static ListDomainsAttributeName DomainName;
    public static ListDomainsAttributeName Expiry;
    public ListDomainsAttributeName(string value);
    private static ListDomainsAttributeName();
    public static ListDomainsAttributeName FindValue(string value);
    public static ListDomainsAttributeName op_Implicit(string value);
}
public class Amazon.Route53Domains.ListOperationsSortAttributeName : ConstantClass {
    public static ListOperationsSortAttributeName SubmittedDate;
    public ListOperationsSortAttributeName(string value);
    private static ListOperationsSortAttributeName();
    public static ListOperationsSortAttributeName FindValue(string value);
    public static ListOperationsSortAttributeName op_Implicit(string value);
}
public class Amazon.Route53Domains.Model.AcceptDomainTransferFromAnotherAwsAccountRequest : AmazonRoute53DomainsRequest {
    private string _domainName;
    private string _password;
    [AWSPropertyAttribute]
public string DomainName { get; public set; }
    [AWSPropertyAttribute]
public string Password { get; public set; }
    public string get_DomainName();
    public void set_DomainName(string value);
    internal bool IsSetDomainName();
    public string get_Password();
    public void set_Password(string value);
    internal bool IsSetPassword();
}
public class Amazon.Route53Domains.Model.AcceptDomainTransferFromAnotherAwsAccountResponse : AmazonWebServiceResponse {
    private string _operationId;
    [AWSPropertyAttribute]
public string OperationId { get; public set; }
    public string get_OperationId();
    public void set_OperationId(string value);
    internal bool IsSetOperationId();
}
public class Amazon.Route53Domains.Model.AssociateDelegationSignerToDomainRequest : AmazonRoute53DomainsRequest {
    private string _domainName;
    private DnssecSigningAttributes _signingAttributes;
    [AWSPropertyAttribute]
public string DomainName { get; public set; }
    [AWSPropertyAttribute]
public DnssecSigningAttributes SigningAttributes { get; public set; }
    public string get_DomainName();
    public void set_DomainName(string value);
    internal bool IsSetDomainName();
    public DnssecSigningAttributes get_SigningAttributes();
    public void set_SigningAttributes(DnssecSigningAttributes value);
    internal bool IsSetSigningAttributes();
}
public class Amazon.Route53Domains.Model.AssociateDelegationSignerToDomainResponse : AmazonWebServiceResponse {
    private string _operationId;
    [AWSPropertyAttribute]
public string OperationId { get; public set; }
    public string get_OperationId();
    public void set_OperationId(string value);
    internal bool IsSetOperationId();
}
public class Amazon.Route53Domains.Model.BillingRecord : object {
    private Nullable`1<DateTime> _billDate;
    private string _domainName;
    private string _invoiceId;
    private OperationType _operation;
    private Nullable`1<double> _price;
    public Nullable`1<DateTime> BillDate { get; public set; }
    [AWSPropertyAttribute]
public string DomainName { get; public set; }
    public string InvoiceId { get; public set; }
    public OperationType Operation { get; public set; }
    public Nullable`1<double> Price { get; public set; }
    public Nullable`1<DateTime> get_BillDate();
    public void set_BillDate(Nullable`1<DateTime> value);
    internal bool IsSetBillDate();
    public string get_DomainName();
    public void set_DomainName(string value);
    internal bool IsSetDomainName();
    public string get_InvoiceId();
    public void set_InvoiceId(string value);
    internal bool IsSetInvoiceId();
    public OperationType get_Operation();
    public void set_Operation(OperationType value);
    internal bool IsSetOperation();
    public Nullable`1<double> get_Price();
    public void set_Price(Nullable`1<double> value);
    internal bool IsSetPrice();
}
public class Amazon.Route53Domains.Model.CancelDomainTransferToAnotherAwsAccountRequest : AmazonRoute53DomainsRequest {
    private string _domainName;
    [AWSPropertyAttribute]
public string DomainName { get; public set; }
    public string get_DomainName();
    public void set_DomainName(string value);
    internal bool IsSetDomainName();
}
public class Amazon.Route53Domains.Model.CancelDomainTransferToAnotherAwsAccountResponse : AmazonWebServiceResponse {
    private string _operationId;
    [AWSPropertyAttribute]
public string OperationId { get; public set; }
    public string get_OperationId();
    public void set_OperationId(string value);
    internal bool IsSetOperationId();
}
public class Amazon.Route53Domains.Model.CheckDomainAvailabilityRequest : AmazonRoute53DomainsRequest {
    private string _domainName;
    private string _idnLangCode;
    [AWSPropertyAttribute]
public string DomainName { get; public set; }
    [AWSPropertyAttribute]
public string IdnLangCode { get; public set; }
    public string get_DomainName();
    public void set_DomainName(string value);
    internal bool IsSetDomainName();
    public string get_IdnLangCode();
    public void set_IdnLangCode(string value);
    internal bool IsSetIdnLangCode();
}
public class Amazon.Route53Domains.Model.CheckDomainAvailabilityResponse : AmazonWebServiceResponse {
    private DomainAvailability _availability;
    public DomainAvailability Availability { get; public set; }
    public DomainAvailability get_Availability();
    public void set_Availability(DomainAvailability value);
    internal bool IsSetAvailability();
}
public class Amazon.Route53Domains.Model.CheckDomainTransferabilityRequest : AmazonRoute53DomainsRequest {
    private string _authCode;
    private string _domainName;
    [AWSPropertyAttribute]
public string AuthCode { get; public set; }
    [AWSPropertyAttribute]
public string DomainName { get; public set; }
    public string get_AuthCode();
    public void set_AuthCode(string value);
    internal bool IsSetAuthCode();
    public string get_DomainName();
    public void set_DomainName(string value);
    internal bool IsSetDomainName();
}
public class Amazon.Route53Domains.Model.CheckDomainTransferabilityResponse : AmazonWebServiceResponse {
    private string _message;
    private DomainTransferability _transferability;
    public string Message { get; public set; }
    public DomainTransferability Transferability { get; public set; }
    public string get_Message();
    public void set_Message(string value);
    internal bool IsSetMessage();
    public DomainTransferability get_Transferability();
    public void set_Transferability(DomainTransferability value);
    internal bool IsSetTransferability();
}
public class Amazon.Route53Domains.Model.Consent : object {
    private string _currency;
    private Nullable`1<double> _maxPrice;
    [AWSPropertyAttribute]
public string Currency { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<double> MaxPrice { get; public set; }
    public string get_Currency();
    public void set_Currency(string value);
    internal bool IsSetCurrency();
    public Nullable`1<double> get_MaxPrice();
    public void set_MaxPrice(Nullable`1<double> value);
    internal bool IsSetMaxPrice();
}
public class Amazon.Route53Domains.Model.ContactDetail : object {
    private string _addressLine1;
    private string _addressLine2;
    private string _city;
    private ContactType _contactType;
    private CountryCode _countryCode;
    private string _email;
    private List`1<ExtraParam> _extraParams;
    private string _fax;
    private string _firstName;
    private string _lastName;
    private string _organizationName;
    private string _phoneNumber;
    private string _state;
    private string _zipCode;
    [AWSPropertyAttribute]
public string AddressLine1 { get; public set; }
    [AWSPropertyAttribute]
public string AddressLine2 { get; public set; }
    [AWSPropertyAttribute]
public string City { get; public set; }
    public ContactType ContactType { get; public set; }
    [AWSPropertyAttribute]
public CountryCode CountryCode { get; public set; }
    [AWSPropertyAttribute]
public string Email { get; public set; }
    public List`1<ExtraParam> ExtraParams { get; public set; }
    [AWSPropertyAttribute]
public string Fax { get; public set; }
    [AWSPropertyAttribute]
public string FirstName { get; public set; }
    [AWSPropertyAttribute]
public string LastName { get; public set; }
    [AWSPropertyAttribute]
public string OrganizationName { get; public set; }
    [AWSPropertyAttribute]
public string PhoneNumber { get; public set; }
    [AWSPropertyAttribute]
public string State { get; public set; }
    [AWSPropertyAttribute]
public string ZipCode { get; public set; }
    public string get_AddressLine1();
    public void set_AddressLine1(string value);
    internal bool IsSetAddressLine1();
    public string get_AddressLine2();
    public void set_AddressLine2(string value);
    internal bool IsSetAddressLine2();
    public string get_City();
    public void set_City(string value);
    internal bool IsSetCity();
    public ContactType get_ContactType();
    public void set_ContactType(ContactType value);
    internal bool IsSetContactType();
    public CountryCode get_CountryCode();
    public void set_CountryCode(CountryCode value);
    internal bool IsSetCountryCode();
    public string get_Email();
    public void set_Email(string value);
    internal bool IsSetEmail();
    public List`1<ExtraParam> get_ExtraParams();
    public void set_ExtraParams(List`1<ExtraParam> value);
    internal bool IsSetExtraParams();
    public string get_Fax();
    public void set_Fax(string value);
    internal bool IsSetFax();
    public string get_FirstName();
    public void set_FirstName(string value);
    internal bool IsSetFirstName();
    public string get_LastName();
    public void set_LastName(string value);
    internal bool IsSetLastName();
    public string get_OrganizationName();
    public void set_OrganizationName(string value);
    internal bool IsSetOrganizationName();
    public string get_PhoneNumber();
    public void set_PhoneNumber(string value);
    internal bool IsSetPhoneNumber();
    public string get_State();
    public void set_State(string value);
    internal bool IsSetState();
    public string get_ZipCode();
    public void set_ZipCode(string value);
    internal bool IsSetZipCode();
}
public class Amazon.Route53Domains.Model.DeleteDomainRequest : AmazonRoute53DomainsRequest {
    private string _domainName;
    [AWSPropertyAttribute]
public string DomainName { get; public set; }
    public string get_DomainName();
    public void set_DomainName(string value);
    internal bool IsSetDomainName();
}
public class Amazon.Route53Domains.Model.DeleteDomainResponse : AmazonWebServiceResponse {
    private string _operationId;
    [AWSPropertyAttribute]
public string OperationId { get; public set; }
    public string get_OperationId();
    public void set_OperationId(string value);
    internal bool IsSetOperationId();
}
public class Amazon.Route53Domains.Model.DeleteTagsForDomainRequest : AmazonRoute53DomainsRequest {
    private string _domainName;
    private List`1<string> _tagsToDelete;
    [AWSPropertyAttribute]
public string DomainName { get; public set; }
    [AWSPropertyAttribute]
public List`1<string> TagsToDelete { get; public set; }
    public string get_DomainName();
    public void set_DomainName(string value);
    internal bool IsSetDomainName();
    public List`1<string> get_TagsToDelete();
    public void set_TagsToDelete(List`1<string> value);
    internal bool IsSetTagsToDelete();
}
public class Amazon.Route53Domains.Model.DeleteTagsForDomainResponse : AmazonWebServiceResponse {
}
public class Amazon.Route53Domains.Model.DisableDomainAutoRenewRequest : AmazonRoute53DomainsRequest {
    private string _domainName;
    [AWSPropertyAttribute]
public string DomainName { get; public set; }
    public string get_DomainName();
    public void set_DomainName(string value);
    internal bool IsSetDomainName();
}
public class Amazon.Route53Domains.Model.DisableDomainAutoRenewResponse : AmazonWebServiceResponse {
}
public class Amazon.Route53Domains.Model.DisableDomainTransferLockRequest : AmazonRoute53DomainsRequest {
    private string _domainName;
    [AWSPropertyAttribute]
public string DomainName { get; public set; }
    public string get_DomainName();
    public void set_DomainName(string value);
    internal bool IsSetDomainName();
}
public class Amazon.Route53Domains.Model.DisableDomainTransferLockResponse : AmazonWebServiceResponse {
    private string _operationId;
    [AWSPropertyAttribute]
public string OperationId { get; public set; }
    public string get_OperationId();
    public void set_OperationId(string value);
    internal bool IsSetOperationId();
}
public class Amazon.Route53Domains.Model.DisassociateDelegationSignerFromDomainRequest : AmazonRoute53DomainsRequest {
    private string _domainName;
    private string _id;
    [AWSPropertyAttribute]
public string DomainName { get; public set; }
    [AWSPropertyAttribute]
public string Id { get; public set; }
    public string get_DomainName();
    public void set_DomainName(string value);
    internal bool IsSetDomainName();
    public string get_Id();
    public void set_Id(string value);
    internal bool IsSetId();
}
public class Amazon.Route53Domains.Model.DisassociateDelegationSignerFromDomainResponse : AmazonWebServiceResponse {
    private string _operationId;
    [AWSPropertyAttribute]
public string OperationId { get; public set; }
    public string get_OperationId();
    public void set_OperationId(string value);
    internal bool IsSetOperationId();
}
public class Amazon.Route53Domains.Model.DnssecKey : object {
    private Nullable`1<int> _algorithm;
    private string _digest;
    private Nullable`1<int> _digestType;
    private Nullable`1<int> _flags;
    private string _id;
    private Nullable`1<int> _keyTag;
    private string _publicKey;
    public Nullable`1<int> Algorithm { get; public set; }
    public string Digest { get; public set; }
    public Nullable`1<int> DigestType { get; public set; }
    public Nullable`1<int> Flags { get; public set; }
    public string Id { get; public set; }
    public Nullable`1<int> KeyTag { get; public set; }
    [AWSPropertyAttribute]
public string PublicKey { get; public set; }
    public Nullable`1<int> get_Algorithm();
    public void set_Algorithm(Nullable`1<int> value);
    internal bool IsSetAlgorithm();
    public string get_Digest();
    public void set_Digest(string value);
    internal bool IsSetDigest();
    public Nullable`1<int> get_DigestType();
    public void set_DigestType(Nullable`1<int> value);
    internal bool IsSetDigestType();
    public Nullable`1<int> get_Flags();
    public void set_Flags(Nullable`1<int> value);
    internal bool IsSetFlags();
    public string get_Id();
    public void set_Id(string value);
    internal bool IsSetId();
    public Nullable`1<int> get_KeyTag();
    public void set_KeyTag(Nullable`1<int> value);
    internal bool IsSetKeyTag();
    public string get_PublicKey();
    public void set_PublicKey(string value);
    internal bool IsSetPublicKey();
}
public class Amazon.Route53Domains.Model.DnssecLimitExceededException : AmazonRoute53DomainsException {
    public DnssecLimitExceededException(string message);
    public DnssecLimitExceededException(string message, Exception innerException);
    public DnssecLimitExceededException(Exception innerException);
    public DnssecLimitExceededException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public DnssecLimitExceededException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Route53Domains.Model.DnssecSigningAttributes : object {
    private Nullable`1<int> _algorithm;
    private Nullable`1<int> _flags;
    private string _publicKey;
    public Nullable`1<int> Algorithm { get; public set; }
    public Nullable`1<int> Flags { get; public set; }
    [AWSPropertyAttribute]
public string PublicKey { get; public set; }
    public Nullable`1<int> get_Algorithm();
    public void set_Algorithm(Nullable`1<int> value);
    internal bool IsSetAlgorithm();
    public Nullable`1<int> get_Flags();
    public void set_Flags(Nullable`1<int> value);
    internal bool IsSetFlags();
    public string get_PublicKey();
    public void set_PublicKey(string value);
    internal bool IsSetPublicKey();
}
public class Amazon.Route53Domains.Model.DomainLimitExceededException : AmazonRoute53DomainsException {
    public DomainLimitExceededException(string message);
    public DomainLimitExceededException(string message, Exception innerException);
    public DomainLimitExceededException(Exception innerException);
    public DomainLimitExceededException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public DomainLimitExceededException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Route53Domains.Model.DomainPrice : object {
    private PriceWithCurrency _changeOwnershipPrice;
    private string _name;
    private PriceWithCurrency _registrationPrice;
    private PriceWithCurrency _renewalPrice;
    private PriceWithCurrency _restorationPrice;
    private PriceWithCurrency _transferPrice;
    public PriceWithCurrency ChangeOwnershipPrice { get; public set; }
    [AWSPropertyAttribute]
public string Name { get; public set; }
    public PriceWithCurrency RegistrationPrice { get; public set; }
    public PriceWithCurrency RenewalPrice { get; public set; }
    public PriceWithCurrency RestorationPrice { get; public set; }
    public PriceWithCurrency TransferPrice { get; public set; }
    public PriceWithCurrency get_ChangeOwnershipPrice();
    public void set_ChangeOwnershipPrice(PriceWithCurrency value);
    internal bool IsSetChangeOwnershipPrice();
    public string get_Name();
    public void set_Name(string value);
    internal bool IsSetName();
    public PriceWithCurrency get_RegistrationPrice();
    public void set_RegistrationPrice(PriceWithCurrency value);
    internal bool IsSetRegistrationPrice();
    public PriceWithCurrency get_RenewalPrice();
    public void set_RenewalPrice(PriceWithCurrency value);
    internal bool IsSetRenewalPrice();
    public PriceWithCurrency get_RestorationPrice();
    public void set_RestorationPrice(PriceWithCurrency value);
    internal bool IsSetRestorationPrice();
    public PriceWithCurrency get_TransferPrice();
    public void set_TransferPrice(PriceWithCurrency value);
    internal bool IsSetTransferPrice();
}
public class Amazon.Route53Domains.Model.DomainSuggestion : object {
    private string _availability;
    private string _domainName;
    public string Availability { get; public set; }
    [AWSPropertyAttribute]
public string DomainName { get; public set; }
    public string get_Availability();
    public void set_Availability(string value);
    internal bool IsSetAvailability();
    public string get_DomainName();
    public void set_DomainName(string value);
    internal bool IsSetDomainName();
}
public class Amazon.Route53Domains.Model.DomainSummary : object {
    private Nullable`1<bool> _autoRenew;
    private string _domainName;
    private Nullable`1<DateTime> _expiry;
    private Nullable`1<bool> _transferLock;
    public Nullable`1<bool> AutoRenew { get; public set; }
    [AWSPropertyAttribute]
public string DomainName { get; public set; }
    public Nullable`1<DateTime> Expiry { get; public set; }
    public Nullable`1<bool> TransferLock { get; public set; }
    public Nullable`1<bool> get_AutoRenew();
    public void set_AutoRenew(Nullable`1<bool> value);
    internal bool IsSetAutoRenew();
    public string get_DomainName();
    public void set_DomainName(string value);
    internal bool IsSetDomainName();
    public Nullable`1<DateTime> get_Expiry();
    public void set_Expiry(Nullable`1<DateTime> value);
    internal bool IsSetExpiry();
    public Nullable`1<bool> get_TransferLock();
    public void set_TransferLock(Nullable`1<bool> value);
    internal bool IsSetTransferLock();
}
public class Amazon.Route53Domains.Model.DomainTransferability : object {
    private Transferable _transferable;
    public Transferable Transferable { get; public set; }
    public Transferable get_Transferable();
    public void set_Transferable(Transferable value);
    internal bool IsSetTransferable();
}
public class Amazon.Route53Domains.Model.DuplicateRequestException : AmazonRoute53DomainsException {
    public DuplicateRequestException(string message);
    public DuplicateRequestException(string message, Exception innerException);
    public DuplicateRequestException(Exception innerException);
    public DuplicateRequestException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public DuplicateRequestException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Route53Domains.Model.EnableDomainAutoRenewRequest : AmazonRoute53DomainsRequest {
    private string _domainName;
    [AWSPropertyAttribute]
public string DomainName { get; public set; }
    public string get_DomainName();
    public void set_DomainName(string value);
    internal bool IsSetDomainName();
}
public class Amazon.Route53Domains.Model.EnableDomainAutoRenewResponse : AmazonWebServiceResponse {
}
public class Amazon.Route53Domains.Model.EnableDomainTransferLockRequest : AmazonRoute53DomainsRequest {
    private string _domainName;
    [AWSPropertyAttribute]
public string DomainName { get; public set; }
    public string get_DomainName();
    public void set_DomainName(string value);
    internal bool IsSetDomainName();
}
public class Amazon.Route53Domains.Model.EnableDomainTransferLockResponse : AmazonWebServiceResponse {
    private string _operationId;
    [AWSPropertyAttribute]
public string OperationId { get; public set; }
    public string get_OperationId();
    public void set_OperationId(string value);
    internal bool IsSetOperationId();
}
public class Amazon.Route53Domains.Model.ExtraParam : object {
    private ExtraParamName _name;
    private string _value;
    [AWSPropertyAttribute]
public ExtraParamName Name { get; public set; }
    [AWSPropertyAttribute]
public string Value { get; public set; }
    public ExtraParamName get_Name();
    public void set_Name(ExtraParamName value);
    internal bool IsSetName();
    public string get_Value();
    public void set_Value(string value);
    internal bool IsSetValue();
}
public class Amazon.Route53Domains.Model.FilterCondition : object {
    private ListDomainsAttributeName _name;
    private Operator _operator;
    private List`1<string> _values;
    [AWSPropertyAttribute]
public ListDomainsAttributeName Name { get; public set; }
    [AWSPropertyAttribute]
public Operator Operator { get; public set; }
    [AWSPropertyAttribute]
public List`1<string> Values { get; public set; }
    public ListDomainsAttributeName get_Name();
    public void set_Name(ListDomainsAttributeName value);
    internal bool IsSetName();
    public Operator get_Operator();
    public void set_Operator(Operator value);
    internal bool IsSetOperator();
    public List`1<string> get_Values();
    public void set_Values(List`1<string> value);
    internal bool IsSetValues();
}
public class Amazon.Route53Domains.Model.GetContactReachabilityStatusRequest : AmazonRoute53DomainsRequest {
    private string _domainName;
    [AWSPropertyAttribute]
public string DomainName { get; public set; }
    public string get_DomainName();
    public void set_DomainName(string value);
    internal bool IsSetDomainName();
}
public class Amazon.Route53Domains.Model.GetContactReachabilityStatusResponse : AmazonWebServiceResponse {
    private string _domainName;
    private ReachabilityStatus _status;
    [AWSPropertyAttribute]
public string DomainName { get; public set; }
    public ReachabilityStatus Status { get; public set; }
    public string get_DomainName();
    public void set_DomainName(string value);
    internal bool IsSetDomainName();
    public ReachabilityStatus get_Status();
    public void set_Status(ReachabilityStatus value);
    internal bool IsSetStatus();
}
public class Amazon.Route53Domains.Model.GetDomainDetailRequest : AmazonRoute53DomainsRequest {
    private string _domainName;
    [AWSPropertyAttribute]
public string DomainName { get; public set; }
    public string get_DomainName();
    public void set_DomainName(string value);
    internal bool IsSetDomainName();
}
public class Amazon.Route53Domains.Model.GetDomainDetailResponse : AmazonWebServiceResponse {
    private string _abuseContactEmail;
    private string _abuseContactPhone;
    private ContactDetail _adminContact;
    private Nullable`1<bool> _adminPrivacy;
    private Nullable`1<bool> _autoRenew;
    private ContactDetail _billingContact;
    private Nullable`1<bool> _billingPrivacy;
    private Nullable`1<DateTime> _creationDate;
    private string _dnsSec;
    private List`1<DnssecKey> _dnssecKeys;
    private string _domainName;
    private Nullable`1<DateTime> _expirationDate;
    private List`1<Nameserver> _nameservers;
    private ContactDetail _registrantContact;
    private Nullable`1<bool> _registrantPrivacy;
    private string _registrarName;
    private string _registrarUrl;
    private string _registryDomainId;
    private string _reseller;
    private List`1<string> _statusList;
    private ContactDetail _techContact;
    private Nullable`1<bool> _techPrivacy;
    private Nullable`1<DateTime> _updatedDate;
    private string _whoIsServer;
    [AWSPropertyAttribute]
public string AbuseContactEmail { get; public set; }
    [AWSPropertyAttribute]
public string AbuseContactPhone { get; public set; }
    [AWSPropertyAttribute]
public ContactDetail AdminContact { get; public set; }
    public Nullable`1<bool> AdminPrivacy { get; public set; }
    public Nullable`1<bool> AutoRenew { get; public set; }
    [AWSPropertyAttribute]
public ContactDetail BillingContact { get; public set; }
    public Nullable`1<bool> BillingPrivacy { get; public set; }
    public Nullable`1<DateTime> CreationDate { get; public set; }
    public string DnsSec { get; public set; }
    public List`1<DnssecKey> DnssecKeys { get; public set; }
    [AWSPropertyAttribute]
public string DomainName { get; public set; }
    public Nullable`1<DateTime> ExpirationDate { get; public set; }
    public List`1<Nameserver> Nameservers { get; public set; }
    [AWSPropertyAttribute]
public ContactDetail RegistrantContact { get; public set; }
    public Nullable`1<bool> RegistrantPrivacy { get; public set; }
    public string RegistrarName { get; public set; }
    public string RegistrarUrl { get; public set; }
    public string RegistryDomainId { get; public set; }
    public string Reseller { get; public set; }
    public List`1<string> StatusList { get; public set; }
    [AWSPropertyAttribute]
public ContactDetail TechContact { get; public set; }
    public Nullable`1<bool> TechPrivacy { get; public set; }
    public Nullable`1<DateTime> UpdatedDate { get; public set; }
    public string WhoIsServer { get; public set; }
    public string get_AbuseContactEmail();
    public void set_AbuseContactEmail(string value);
    internal bool IsSetAbuseContactEmail();
    public string get_AbuseContactPhone();
    public void set_AbuseContactPhone(string value);
    internal bool IsSetAbuseContactPhone();
    public ContactDetail get_AdminContact();
    public void set_AdminContact(ContactDetail value);
    internal bool IsSetAdminContact();
    public Nullable`1<bool> get_AdminPrivacy();
    public void set_AdminPrivacy(Nullable`1<bool> value);
    internal bool IsSetAdminPrivacy();
    public Nullable`1<bool> get_AutoRenew();
    public void set_AutoRenew(Nullable`1<bool> value);
    internal bool IsSetAutoRenew();
    public ContactDetail get_BillingContact();
    public void set_BillingContact(ContactDetail value);
    internal bool IsSetBillingContact();
    public Nullable`1<bool> get_BillingPrivacy();
    public void set_BillingPrivacy(Nullable`1<bool> value);
    internal bool IsSetBillingPrivacy();
    public Nullable`1<DateTime> get_CreationDate();
    public void set_CreationDate(Nullable`1<DateTime> value);
    internal bool IsSetCreationDate();
    public string get_DnsSec();
    public void set_DnsSec(string value);
    internal bool IsSetDnsSec();
    public List`1<DnssecKey> get_DnssecKeys();
    public void set_DnssecKeys(List`1<DnssecKey> value);
    internal bool IsSetDnssecKeys();
    public string get_DomainName();
    public void set_DomainName(string value);
    internal bool IsSetDomainName();
    public Nullable`1<DateTime> get_ExpirationDate();
    public void set_ExpirationDate(Nullable`1<DateTime> value);
    internal bool IsSetExpirationDate();
    public List`1<Nameserver> get_Nameservers();
    public void set_Nameservers(List`1<Nameserver> value);
    internal bool IsSetNameservers();
    public ContactDetail get_RegistrantContact();
    public void set_RegistrantContact(ContactDetail value);
    internal bool IsSetRegistrantContact();
    public Nullable`1<bool> get_RegistrantPrivacy();
    public void set_RegistrantPrivacy(Nullable`1<bool> value);
    internal bool IsSetRegistrantPrivacy();
    public string get_RegistrarName();
    public void set_RegistrarName(string value);
    internal bool IsSetRegistrarName();
    public string get_RegistrarUrl();
    public void set_RegistrarUrl(string value);
    internal bool IsSetRegistrarUrl();
    public string get_RegistryDomainId();
    public void set_RegistryDomainId(string value);
    internal bool IsSetRegistryDomainId();
    public string get_Reseller();
    public void set_Reseller(string value);
    internal bool IsSetReseller();
    public List`1<string> get_StatusList();
    public void set_StatusList(List`1<string> value);
    internal bool IsSetStatusList();
    public ContactDetail get_TechContact();
    public void set_TechContact(ContactDetail value);
    internal bool IsSetTechContact();
    public Nullable`1<bool> get_TechPrivacy();
    public void set_TechPrivacy(Nullable`1<bool> value);
    internal bool IsSetTechPrivacy();
    public Nullable`1<DateTime> get_UpdatedDate();
    public void set_UpdatedDate(Nullable`1<DateTime> value);
    internal bool IsSetUpdatedDate();
    public string get_WhoIsServer();
    public void set_WhoIsServer(string value);
    internal bool IsSetWhoIsServer();
}
public class Amazon.Route53Domains.Model.GetDomainSuggestionsRequest : AmazonRoute53DomainsRequest {
    private string _domainName;
    private Nullable`1<bool> _onlyAvailable;
    private Nullable`1<int> _suggestionCount;
    [AWSPropertyAttribute]
public string DomainName { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<bool> OnlyAvailable { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> SuggestionCount { get; public set; }
    public string get_DomainName();
    public void set_DomainName(string value);
    internal bool IsSetDomainName();
    public Nullable`1<bool> get_OnlyAvailable();
    public void set_OnlyAvailable(Nullable`1<bool> value);
    internal bool IsSetOnlyAvailable();
    public Nullable`1<int> get_SuggestionCount();
    public void set_SuggestionCount(Nullable`1<int> value);
    internal bool IsSetSuggestionCount();
}
public class Amazon.Route53Domains.Model.GetDomainSuggestionsResponse : AmazonWebServiceResponse {
    private List`1<DomainSuggestion> _suggestionsList;
    public List`1<DomainSuggestion> SuggestionsList { get; public set; }
    public List`1<DomainSuggestion> get_SuggestionsList();
    public void set_SuggestionsList(List`1<DomainSuggestion> value);
    internal bool IsSetSuggestionsList();
}
public class Amazon.Route53Domains.Model.GetOperationDetailRequest : AmazonRoute53DomainsRequest {
    private string _operationId;
    [AWSPropertyAttribute]
public string OperationId { get; public set; }
    public string get_OperationId();
    public void set_OperationId(string value);
    internal bool IsSetOperationId();
}
public class Amazon.Route53Domains.Model.GetOperationDetailResponse : AmazonWebServiceResponse {
    private string _domainName;
    private Nullable`1<DateTime> _lastUpdatedDate;
    private string _message;
    private string _operationId;
    private OperationStatus _status;
    private StatusFlag _statusFlag;
    private Nullable`1<DateTime> _submittedDate;
    private OperationType _type;
    [AWSPropertyAttribute]
public string DomainName { get; public set; }
    public Nullable`1<DateTime> LastUpdatedDate { get; public set; }
    public string Message { get; public set; }
    [AWSPropertyAttribute]
public string OperationId { get; public set; }
    public OperationStatus Status { get; public set; }
    public StatusFlag StatusFlag { get; public set; }
    public Nullable`1<DateTime> SubmittedDate { get; public set; }
    public OperationType Type { get; public set; }
    public string get_DomainName();
    public void set_DomainName(string value);
    internal bool IsSetDomainName();
    public Nullable`1<DateTime> get_LastUpdatedDate();
    public void set_LastUpdatedDate(Nullable`1<DateTime> value);
    internal bool IsSetLastUpdatedDate();
    public string get_Message();
    public void set_Message(string value);
    internal bool IsSetMessage();
    public string get_OperationId();
    public void set_OperationId(string value);
    internal bool IsSetOperationId();
    public OperationStatus get_Status();
    public void set_Status(OperationStatus value);
    internal bool IsSetStatus();
    public StatusFlag get_StatusFlag();
    public void set_StatusFlag(StatusFlag value);
    internal bool IsSetStatusFlag();
    public Nullable`1<DateTime> get_SubmittedDate();
    public void set_SubmittedDate(Nullable`1<DateTime> value);
    internal bool IsSetSubmittedDate();
    public OperationType get_Type();
    public void set_Type(OperationType value);
    internal bool IsSetType();
}
public interface Amazon.Route53Domains.Model.IListDomainsPaginator {
    public IPaginatedEnumerable`1<ListDomainsResponse> Responses { get; }
    public IPaginatedEnumerable`1<DomainSummary> Domains { get; }
    public abstract virtual IPaginatedEnumerable`1<ListDomainsResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<DomainSummary> get_Domains();
}
public interface Amazon.Route53Domains.Model.IListOperationsPaginator {
    public IPaginatedEnumerable`1<ListOperationsResponse> Responses { get; }
    public IPaginatedEnumerable`1<OperationSummary> Operations { get; }
    public abstract virtual IPaginatedEnumerable`1<ListOperationsResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<OperationSummary> get_Operations();
}
public interface Amazon.Route53Domains.Model.IListPricesPaginator {
    public IPaginatedEnumerable`1<ListPricesResponse> Responses { get; }
    public IPaginatedEnumerable`1<DomainPrice> Prices { get; }
    public abstract virtual IPaginatedEnumerable`1<ListPricesResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<DomainPrice> get_Prices();
}
public class Amazon.Route53Domains.Model.Internal.MarshallTransformations.AcceptDomainTransferFromAnotherAwsAccountRequestMarshaller : object {
    private static AcceptDomainTransferFromAnotherAwsAccountRequestMarshaller _instance;
    public static AcceptDomainTransferFromAnotherAwsAccountRequestMarshaller Instance { get; }
    private static AcceptDomainTransferFromAnotherAwsAccountRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(AcceptDomainTransferFromAnotherAwsAccountRequest publicRequest);
    internal static AcceptDomainTransferFromAnotherAwsAccountRequestMarshaller GetInstance();
    public static AcceptDomainTransferFromAnotherAwsAccountRequestMarshaller get_Instance();
}
public class Amazon.Route53Domains.Model.Internal.MarshallTransformations.AcceptDomainTransferFromAnotherAwsAccountResponseUnmarshaller : JsonResponseUnmarshaller {
    private static AcceptDomainTransferFromAnotherAwsAccountResponseUnmarshaller _instance;
    public static AcceptDomainTransferFromAnotherAwsAccountResponseUnmarshaller Instance { get; }
    private static AcceptDomainTransferFromAnotherAwsAccountResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static AcceptDomainTransferFromAnotherAwsAccountResponseUnmarshaller GetInstance();
    public static AcceptDomainTransferFromAnotherAwsAccountResponseUnmarshaller get_Instance();
}
public class Amazon.Route53Domains.Model.Internal.MarshallTransformations.AssociateDelegationSignerToDomainRequestMarshaller : object {
    private static AssociateDelegationSignerToDomainRequestMarshaller _instance;
    public static AssociateDelegationSignerToDomainRequestMarshaller Instance { get; }
    private static AssociateDelegationSignerToDomainRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(AssociateDelegationSignerToDomainRequest publicRequest);
    internal static AssociateDelegationSignerToDomainRequestMarshaller GetInstance();
    public static AssociateDelegationSignerToDomainRequestMarshaller get_Instance();
}
public class Amazon.Route53Domains.Model.Internal.MarshallTransformations.AssociateDelegationSignerToDomainResponseUnmarshaller : JsonResponseUnmarshaller {
    private static AssociateDelegationSignerToDomainResponseUnmarshaller _instance;
    public static AssociateDelegationSignerToDomainResponseUnmarshaller Instance { get; }
    private static AssociateDelegationSignerToDomainResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static AssociateDelegationSignerToDomainResponseUnmarshaller GetInstance();
    public static AssociateDelegationSignerToDomainResponseUnmarshaller get_Instance();
}
public class Amazon.Route53Domains.Model.Internal.MarshallTransformations.BillingRecordUnmarshaller : object {
    private static BillingRecordUnmarshaller _instance;
    public static BillingRecordUnmarshaller Instance { get; }
    private static BillingRecordUnmarshaller();
    private sealed virtual override BillingRecord Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.Route53Domains.Model.BillingRecord,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual BillingRecord Unmarshall(JsonUnmarshallerContext context);
    public static BillingRecordUnmarshaller get_Instance();
}
public class Amazon.Route53Domains.Model.Internal.MarshallTransformations.CancelDomainTransferToAnotherAwsAccountRequestMarshaller : object {
    private static CancelDomainTransferToAnotherAwsAccountRequestMarshaller _instance;
    public static CancelDomainTransferToAnotherAwsAccountRequestMarshaller Instance { get; }
    private static CancelDomainTransferToAnotherAwsAccountRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(CancelDomainTransferToAnotherAwsAccountRequest publicRequest);
    internal static CancelDomainTransferToAnotherAwsAccountRequestMarshaller GetInstance();
    public static CancelDomainTransferToAnotherAwsAccountRequestMarshaller get_Instance();
}
public class Amazon.Route53Domains.Model.Internal.MarshallTransformations.CancelDomainTransferToAnotherAwsAccountResponseUnmarshaller : JsonResponseUnmarshaller {
    private static CancelDomainTransferToAnotherAwsAccountResponseUnmarshaller _instance;
    public static CancelDomainTransferToAnotherAwsAccountResponseUnmarshaller Instance { get; }
    private static CancelDomainTransferToAnotherAwsAccountResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static CancelDomainTransferToAnotherAwsAccountResponseUnmarshaller GetInstance();
    public static CancelDomainTransferToAnotherAwsAccountResponseUnmarshaller get_Instance();
}
public class Amazon.Route53Domains.Model.Internal.MarshallTransformations.CheckDomainAvailabilityRequestMarshaller : object {
    private static CheckDomainAvailabilityRequestMarshaller _instance;
    public static CheckDomainAvailabilityRequestMarshaller Instance { get; }
    private static CheckDomainAvailabilityRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(CheckDomainAvailabilityRequest publicRequest);
    internal static CheckDomainAvailabilityRequestMarshaller GetInstance();
    public static CheckDomainAvailabilityRequestMarshaller get_Instance();
}
public class Amazon.Route53Domains.Model.Internal.MarshallTransformations.CheckDomainAvailabilityResponseUnmarshaller : JsonResponseUnmarshaller {
    private static CheckDomainAvailabilityResponseUnmarshaller _instance;
    public static CheckDomainAvailabilityResponseUnmarshaller Instance { get; }
    private static CheckDomainAvailabilityResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static CheckDomainAvailabilityResponseUnmarshaller GetInstance();
    public static CheckDomainAvailabilityResponseUnmarshaller get_Instance();
}
public class Amazon.Route53Domains.Model.Internal.MarshallTransformations.CheckDomainTransferabilityRequestMarshaller : object {
    private static CheckDomainTransferabilityRequestMarshaller _instance;
    public static CheckDomainTransferabilityRequestMarshaller Instance { get; }
    private static CheckDomainTransferabilityRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(CheckDomainTransferabilityRequest publicRequest);
    internal static CheckDomainTransferabilityRequestMarshaller GetInstance();
    public static CheckDomainTransferabilityRequestMarshaller get_Instance();
}
public class Amazon.Route53Domains.Model.Internal.MarshallTransformations.CheckDomainTransferabilityResponseUnmarshaller : JsonResponseUnmarshaller {
    private static CheckDomainTransferabilityResponseUnmarshaller _instance;
    public static CheckDomainTransferabilityResponseUnmarshaller Instance { get; }
    private static CheckDomainTransferabilityResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static CheckDomainTransferabilityResponseUnmarshaller GetInstance();
    public static CheckDomainTransferabilityResponseUnmarshaller get_Instance();
}
public class Amazon.Route53Domains.Model.Internal.MarshallTransformations.ConsentMarshaller : object {
    public static ConsentMarshaller Instance;
    private static ConsentMarshaller();
    public sealed virtual void Marshall(Consent requestObject, JsonMarshallerContext context);
}
public class Amazon.Route53Domains.Model.Internal.MarshallTransformations.ContactDetailMarshaller : object {
    public static ContactDetailMarshaller Instance;
    private static ContactDetailMarshaller();
    public sealed virtual void Marshall(ContactDetail requestObject, JsonMarshallerContext context);
}
public class Amazon.Route53Domains.Model.Internal.MarshallTransformations.ContactDetailUnmarshaller : object {
    private static ContactDetailUnmarshaller _instance;
    public static ContactDetailUnmarshaller Instance { get; }
    private static ContactDetailUnmarshaller();
    private sealed virtual override ContactDetail Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.Route53Domains.Model.ContactDetail,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ContactDetail Unmarshall(JsonUnmarshallerContext context);
    public static ContactDetailUnmarshaller get_Instance();
}
public class Amazon.Route53Domains.Model.Internal.MarshallTransformations.DeleteDomainRequestMarshaller : object {
    private static DeleteDomainRequestMarshaller _instance;
    public static DeleteDomainRequestMarshaller Instance { get; }
    private static DeleteDomainRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeleteDomainRequest publicRequest);
    internal static DeleteDomainRequestMarshaller GetInstance();
    public static DeleteDomainRequestMarshaller get_Instance();
}
public class Amazon.Route53Domains.Model.Internal.MarshallTransformations.DeleteDomainResponseUnmarshaller : JsonResponseUnmarshaller {
    private static DeleteDomainResponseUnmarshaller _instance;
    public static DeleteDomainResponseUnmarshaller Instance { get; }
    private static DeleteDomainResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DeleteDomainResponseUnmarshaller GetInstance();
    public static DeleteDomainResponseUnmarshaller get_Instance();
}
public class Amazon.Route53Domains.Model.Internal.MarshallTransformations.DeleteTagsForDomainRequestMarshaller : object {
    private static DeleteTagsForDomainRequestMarshaller _instance;
    public static DeleteTagsForDomainRequestMarshaller Instance { get; }
    private static DeleteTagsForDomainRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeleteTagsForDomainRequest publicRequest);
    internal static DeleteTagsForDomainRequestMarshaller GetInstance();
    public static DeleteTagsForDomainRequestMarshaller get_Instance();
}
public class Amazon.Route53Domains.Model.Internal.MarshallTransformations.DeleteTagsForDomainResponseUnmarshaller : JsonResponseUnmarshaller {
    private static DeleteTagsForDomainResponseUnmarshaller _instance;
    public static DeleteTagsForDomainResponseUnmarshaller Instance { get; }
    private static DeleteTagsForDomainResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DeleteTagsForDomainResponseUnmarshaller GetInstance();
    public static DeleteTagsForDomainResponseUnmarshaller get_Instance();
}
public class Amazon.Route53Domains.Model.Internal.MarshallTransformations.DisableDomainAutoRenewRequestMarshaller : object {
    private static DisableDomainAutoRenewRequestMarshaller _instance;
    public static DisableDomainAutoRenewRequestMarshaller Instance { get; }
    private static DisableDomainAutoRenewRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DisableDomainAutoRenewRequest publicRequest);
    internal static DisableDomainAutoRenewRequestMarshaller GetInstance();
    public static DisableDomainAutoRenewRequestMarshaller get_Instance();
}
public class Amazon.Route53Domains.Model.Internal.MarshallTransformations.DisableDomainAutoRenewResponseUnmarshaller : JsonResponseUnmarshaller {
    private static DisableDomainAutoRenewResponseUnmarshaller _instance;
    public static DisableDomainAutoRenewResponseUnmarshaller Instance { get; }
    private static DisableDomainAutoRenewResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DisableDomainAutoRenewResponseUnmarshaller GetInstance();
    public static DisableDomainAutoRenewResponseUnmarshaller get_Instance();
}
public class Amazon.Route53Domains.Model.Internal.MarshallTransformations.DisableDomainTransferLockRequestMarshaller : object {
    private static DisableDomainTransferLockRequestMarshaller _instance;
    public static DisableDomainTransferLockRequestMarshaller Instance { get; }
    private static DisableDomainTransferLockRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DisableDomainTransferLockRequest publicRequest);
    internal static DisableDomainTransferLockRequestMarshaller GetInstance();
    public static DisableDomainTransferLockRequestMarshaller get_Instance();
}
public class Amazon.Route53Domains.Model.Internal.MarshallTransformations.DisableDomainTransferLockResponseUnmarshaller : JsonResponseUnmarshaller {
    private static DisableDomainTransferLockResponseUnmarshaller _instance;
    public static DisableDomainTransferLockResponseUnmarshaller Instance { get; }
    private static DisableDomainTransferLockResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DisableDomainTransferLockResponseUnmarshaller GetInstance();
    public static DisableDomainTransferLockResponseUnmarshaller get_Instance();
}
public class Amazon.Route53Domains.Model.Internal.MarshallTransformations.DisassociateDelegationSignerFromDomainRequestMarshaller : object {
    private static DisassociateDelegationSignerFromDomainRequestMarshaller _instance;
    public static DisassociateDelegationSignerFromDomainRequestMarshaller Instance { get; }
    private static DisassociateDelegationSignerFromDomainRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DisassociateDelegationSignerFromDomainRequest publicRequest);
    internal static DisassociateDelegationSignerFromDomainRequestMarshaller GetInstance();
    public static DisassociateDelegationSignerFromDomainRequestMarshaller get_Instance();
}
public class Amazon.Route53Domains.Model.Internal.MarshallTransformations.DisassociateDelegationSignerFromDomainResponseUnmarshaller : JsonResponseUnmarshaller {
    private static DisassociateDelegationSignerFromDomainResponseUnmarshaller _instance;
    public static DisassociateDelegationSignerFromDomainResponseUnmarshaller Instance { get; }
    private static DisassociateDelegationSignerFromDomainResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DisassociateDelegationSignerFromDomainResponseUnmarshaller GetInstance();
    public static DisassociateDelegationSignerFromDomainResponseUnmarshaller get_Instance();
}
public class Amazon.Route53Domains.Model.Internal.MarshallTransformations.DnssecKeyUnmarshaller : object {
    private static DnssecKeyUnmarshaller _instance;
    public static DnssecKeyUnmarshaller Instance { get; }
    private static DnssecKeyUnmarshaller();
    private sealed virtual override DnssecKey Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.Route53Domains.Model.DnssecKey,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual DnssecKey Unmarshall(JsonUnmarshallerContext context);
    public static DnssecKeyUnmarshaller get_Instance();
}
public class Amazon.Route53Domains.Model.Internal.MarshallTransformations.DnssecLimitExceededExceptionUnmarshaller : object {
    private static DnssecLimitExceededExceptionUnmarshaller _instance;
    public static DnssecLimitExceededExceptionUnmarshaller Instance { get; }
    private static DnssecLimitExceededExceptionUnmarshaller();
    public sealed virtual DnssecLimitExceededException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual DnssecLimitExceededException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static DnssecLimitExceededExceptionUnmarshaller get_Instance();
}
public class Amazon.Route53Domains.Model.Internal.MarshallTransformations.DnssecSigningAttributesMarshaller : object {
    public static DnssecSigningAttributesMarshaller Instance;
    private static DnssecSigningAttributesMarshaller();
    public sealed virtual void Marshall(DnssecSigningAttributes requestObject, JsonMarshallerContext context);
}
public class Amazon.Route53Domains.Model.Internal.MarshallTransformations.DomainLimitExceededExceptionUnmarshaller : object {
    private static DomainLimitExceededExceptionUnmarshaller _instance;
    public static DomainLimitExceededExceptionUnmarshaller Instance { get; }
    private static DomainLimitExceededExceptionUnmarshaller();
    public sealed virtual DomainLimitExceededException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual DomainLimitExceededException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static DomainLimitExceededExceptionUnmarshaller get_Instance();
}
public class Amazon.Route53Domains.Model.Internal.MarshallTransformations.DomainPriceUnmarshaller : object {
    private static DomainPriceUnmarshaller _instance;
    public static DomainPriceUnmarshaller Instance { get; }
    private static DomainPriceUnmarshaller();
    private sealed virtual override DomainPrice Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.Route53Domains.Model.DomainPrice,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual DomainPrice Unmarshall(JsonUnmarshallerContext context);
    public static DomainPriceUnmarshaller get_Instance();
}
public class Amazon.Route53Domains.Model.Internal.MarshallTransformations.DomainSuggestionUnmarshaller : object {
    private static DomainSuggestionUnmarshaller _instance;
    public static DomainSuggestionUnmarshaller Instance { get; }
    private static DomainSuggestionUnmarshaller();
    private sealed virtual override DomainSuggestion Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.Route53Domains.Model.DomainSuggestion,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual DomainSuggestion Unmarshall(JsonUnmarshallerContext context);
    public static DomainSuggestionUnmarshaller get_Instance();
}
public class Amazon.Route53Domains.Model.Internal.MarshallTransformations.DomainSummaryUnmarshaller : object {
    private static DomainSummaryUnmarshaller _instance;
    public static DomainSummaryUnmarshaller Instance { get; }
    private static DomainSummaryUnmarshaller();
    private sealed virtual override DomainSummary Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.Route53Domains.Model.DomainSummary,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual DomainSummary Unmarshall(JsonUnmarshallerContext context);
    public static DomainSummaryUnmarshaller get_Instance();
}
public class Amazon.Route53Domains.Model.Internal.MarshallTransformations.DomainTransferabilityUnmarshaller : object {
    private static DomainTransferabilityUnmarshaller _instance;
    public static DomainTransferabilityUnmarshaller Instance { get; }
    private static DomainTransferabilityUnmarshaller();
    private sealed virtual override DomainTransferability Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.Route53Domains.Model.DomainTransferability,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual DomainTransferability Unmarshall(JsonUnmarshallerContext context);
    public static DomainTransferabilityUnmarshaller get_Instance();
}
public class Amazon.Route53Domains.Model.Internal.MarshallTransformations.DuplicateRequestExceptionUnmarshaller : object {
    private static DuplicateRequestExceptionUnmarshaller _instance;
    public static DuplicateRequestExceptionUnmarshaller Instance { get; }
    private static DuplicateRequestExceptionUnmarshaller();
    public sealed virtual DuplicateRequestException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual DuplicateRequestException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static DuplicateRequestExceptionUnmarshaller get_Instance();
}
public class Amazon.Route53Domains.Model.Internal.MarshallTransformations.EnableDomainAutoRenewRequestMarshaller : object {
    private static EnableDomainAutoRenewRequestMarshaller _instance;
    public static EnableDomainAutoRenewRequestMarshaller Instance { get; }
    private static EnableDomainAutoRenewRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(EnableDomainAutoRenewRequest publicRequest);
    internal static EnableDomainAutoRenewRequestMarshaller GetInstance();
    public static EnableDomainAutoRenewRequestMarshaller get_Instance();
}
public class Amazon.Route53Domains.Model.Internal.MarshallTransformations.EnableDomainAutoRenewResponseUnmarshaller : JsonResponseUnmarshaller {
    private static EnableDomainAutoRenewResponseUnmarshaller _instance;
    public static EnableDomainAutoRenewResponseUnmarshaller Instance { get; }
    private static EnableDomainAutoRenewResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static EnableDomainAutoRenewResponseUnmarshaller GetInstance();
    public static EnableDomainAutoRenewResponseUnmarshaller get_Instance();
}
public class Amazon.Route53Domains.Model.Internal.MarshallTransformations.EnableDomainTransferLockRequestMarshaller : object {
    private static EnableDomainTransferLockRequestMarshaller _instance;
    public static EnableDomainTransferLockRequestMarshaller Instance { get; }
    private static EnableDomainTransferLockRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(EnableDomainTransferLockRequest publicRequest);
    internal static EnableDomainTransferLockRequestMarshaller GetInstance();
    public static EnableDomainTransferLockRequestMarshaller get_Instance();
}
public class Amazon.Route53Domains.Model.Internal.MarshallTransformations.EnableDomainTransferLockResponseUnmarshaller : JsonResponseUnmarshaller {
    private static EnableDomainTransferLockResponseUnmarshaller _instance;
    public static EnableDomainTransferLockResponseUnmarshaller Instance { get; }
    private static EnableDomainTransferLockResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static EnableDomainTransferLockResponseUnmarshaller GetInstance();
    public static EnableDomainTransferLockResponseUnmarshaller get_Instance();
}
public class Amazon.Route53Domains.Model.Internal.MarshallTransformations.ExtraParamMarshaller : object {
    public static ExtraParamMarshaller Instance;
    private static ExtraParamMarshaller();
    public sealed virtual void Marshall(ExtraParam requestObject, JsonMarshallerContext context);
}
public class Amazon.Route53Domains.Model.Internal.MarshallTransformations.ExtraParamUnmarshaller : object {
    private static ExtraParamUnmarshaller _instance;
    public static ExtraParamUnmarshaller Instance { get; }
    private static ExtraParamUnmarshaller();
    private sealed virtual override ExtraParam Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.Route53Domains.Model.ExtraParam,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ExtraParam Unmarshall(JsonUnmarshallerContext context);
    public static ExtraParamUnmarshaller get_Instance();
}
public class Amazon.Route53Domains.Model.Internal.MarshallTransformations.FilterConditionMarshaller : object {
    public static FilterConditionMarshaller Instance;
    private static FilterConditionMarshaller();
    public sealed virtual void Marshall(FilterCondition requestObject, JsonMarshallerContext context);
}
public class Amazon.Route53Domains.Model.Internal.MarshallTransformations.GetContactReachabilityStatusRequestMarshaller : object {
    private static GetContactReachabilityStatusRequestMarshaller _instance;
    public static GetContactReachabilityStatusRequestMarshaller Instance { get; }
    private static GetContactReachabilityStatusRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(GetContactReachabilityStatusRequest publicRequest);
    internal static GetContactReachabilityStatusRequestMarshaller GetInstance();
    public static GetContactReachabilityStatusRequestMarshaller get_Instance();
}
public class Amazon.Route53Domains.Model.Internal.MarshallTransformations.GetContactReachabilityStatusResponseUnmarshaller : JsonResponseUnmarshaller {
    private static GetContactReachabilityStatusResponseUnmarshaller _instance;
    public static GetContactReachabilityStatusResponseUnmarshaller Instance { get; }
    private static GetContactReachabilityStatusResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static GetContactReachabilityStatusResponseUnmarshaller GetInstance();
    public static GetContactReachabilityStatusResponseUnmarshaller get_Instance();
}
public class Amazon.Route53Domains.Model.Internal.MarshallTransformations.GetDomainDetailRequestMarshaller : object {
    private static GetDomainDetailRequestMarshaller _instance;
    public static GetDomainDetailRequestMarshaller Instance { get; }
    private static GetDomainDetailRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(GetDomainDetailRequest publicRequest);
    internal static GetDomainDetailRequestMarshaller GetInstance();
    public static GetDomainDetailRequestMarshaller get_Instance();
}
public class Amazon.Route53Domains.Model.Internal.MarshallTransformations.GetDomainDetailResponseUnmarshaller : JsonResponseUnmarshaller {
    private static GetDomainDetailResponseUnmarshaller _instance;
    public static GetDomainDetailResponseUnmarshaller Instance { get; }
    private static GetDomainDetailResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static GetDomainDetailResponseUnmarshaller GetInstance();
    public static GetDomainDetailResponseUnmarshaller get_Instance();
}
public class Amazon.Route53Domains.Model.Internal.MarshallTransformations.GetDomainSuggestionsRequestMarshaller : object {
    private static GetDomainSuggestionsRequestMarshaller _instance;
    public static GetDomainSuggestionsRequestMarshaller Instance { get; }
    private static GetDomainSuggestionsRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(GetDomainSuggestionsRequest publicRequest);
    internal static GetDomainSuggestionsRequestMarshaller GetInstance();
    public static GetDomainSuggestionsRequestMarshaller get_Instance();
}
public class Amazon.Route53Domains.Model.Internal.MarshallTransformations.GetDomainSuggestionsResponseUnmarshaller : JsonResponseUnmarshaller {
    private static GetDomainSuggestionsResponseUnmarshaller _instance;
    public static GetDomainSuggestionsResponseUnmarshaller Instance { get; }
    private static GetDomainSuggestionsResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static GetDomainSuggestionsResponseUnmarshaller GetInstance();
    public static GetDomainSuggestionsResponseUnmarshaller get_Instance();
}
public class Amazon.Route53Domains.Model.Internal.MarshallTransformations.GetOperationDetailRequestMarshaller : object {
    private static GetOperationDetailRequestMarshaller _instance;
    public static GetOperationDetailRequestMarshaller Instance { get; }
    private static GetOperationDetailRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(GetOperationDetailRequest publicRequest);
    internal static GetOperationDetailRequestMarshaller GetInstance();
    public static GetOperationDetailRequestMarshaller get_Instance();
}
public class Amazon.Route53Domains.Model.Internal.MarshallTransformations.GetOperationDetailResponseUnmarshaller : JsonResponseUnmarshaller {
    private static GetOperationDetailResponseUnmarshaller _instance;
    public static GetOperationDetailResponseUnmarshaller Instance { get; }
    private static GetOperationDetailResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static GetOperationDetailResponseUnmarshaller GetInstance();
    public static GetOperationDetailResponseUnmarshaller get_Instance();
}
public class Amazon.Route53Domains.Model.Internal.MarshallTransformations.InvalidInputExceptionUnmarshaller : object {
    private static InvalidInputExceptionUnmarshaller _instance;
    public static InvalidInputExceptionUnmarshaller Instance { get; }
    private static InvalidInputExceptionUnmarshaller();
    public sealed virtual InvalidInputException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual InvalidInputException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static InvalidInputExceptionUnmarshaller get_Instance();
}
public class Amazon.Route53Domains.Model.Internal.MarshallTransformations.ListDomainsRequestMarshaller : object {
    private static ListDomainsRequestMarshaller _instance;
    public static ListDomainsRequestMarshaller Instance { get; }
    private static ListDomainsRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListDomainsRequest publicRequest);
    internal static ListDomainsRequestMarshaller GetInstance();
    public static ListDomainsRequestMarshaller get_Instance();
}
public class Amazon.Route53Domains.Model.Internal.MarshallTransformations.ListDomainsResponseUnmarshaller : JsonResponseUnmarshaller {
    private static ListDomainsResponseUnmarshaller _instance;
    public static ListDomainsResponseUnmarshaller Instance { get; }
    private static ListDomainsResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ListDomainsResponseUnmarshaller GetInstance();
    public static ListDomainsResponseUnmarshaller get_Instance();
}
public class Amazon.Route53Domains.Model.Internal.MarshallTransformations.ListOperationsRequestMarshaller : object {
    private static ListOperationsRequestMarshaller _instance;
    public static ListOperationsRequestMarshaller Instance { get; }
    private static ListOperationsRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListOperationsRequest publicRequest);
    internal static ListOperationsRequestMarshaller GetInstance();
    public static ListOperationsRequestMarshaller get_Instance();
}
public class Amazon.Route53Domains.Model.Internal.MarshallTransformations.ListOperationsResponseUnmarshaller : JsonResponseUnmarshaller {
    private static ListOperationsResponseUnmarshaller _instance;
    public static ListOperationsResponseUnmarshaller Instance { get; }
    private static ListOperationsResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ListOperationsResponseUnmarshaller GetInstance();
    public static ListOperationsResponseUnmarshaller get_Instance();
}
public class Amazon.Route53Domains.Model.Internal.MarshallTransformations.ListPricesRequestMarshaller : object {
    private static ListPricesRequestMarshaller _instance;
    public static ListPricesRequestMarshaller Instance { get; }
    private static ListPricesRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListPricesRequest publicRequest);
    internal static ListPricesRequestMarshaller GetInstance();
    public static ListPricesRequestMarshaller get_Instance();
}
public class Amazon.Route53Domains.Model.Internal.MarshallTransformations.ListPricesResponseUnmarshaller : JsonResponseUnmarshaller {
    private static ListPricesResponseUnmarshaller _instance;
    public static ListPricesResponseUnmarshaller Instance { get; }
    private static ListPricesResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ListPricesResponseUnmarshaller GetInstance();
    public static ListPricesResponseUnmarshaller get_Instance();
}
public class Amazon.Route53Domains.Model.Internal.MarshallTransformations.ListTagsForDomainRequestMarshaller : object {
    private static ListTagsForDomainRequestMarshaller _instance;
    public static ListTagsForDomainRequestMarshaller Instance { get; }
    private static ListTagsForDomainRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListTagsForDomainRequest publicRequest);
    internal static ListTagsForDomainRequestMarshaller GetInstance();
    public static ListTagsForDomainRequestMarshaller get_Instance();
}
public class Amazon.Route53Domains.Model.Internal.MarshallTransformations.ListTagsForDomainResponseUnmarshaller : JsonResponseUnmarshaller {
    private static ListTagsForDomainResponseUnmarshaller _instance;
    public static ListTagsForDomainResponseUnmarshaller Instance { get; }
    private static ListTagsForDomainResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ListTagsForDomainResponseUnmarshaller GetInstance();
    public static ListTagsForDomainResponseUnmarshaller get_Instance();
}
public class Amazon.Route53Domains.Model.Internal.MarshallTransformations.NameserverMarshaller : object {
    public static NameserverMarshaller Instance;
    private static NameserverMarshaller();
    public sealed virtual void Marshall(Nameserver requestObject, JsonMarshallerContext context);
}
public class Amazon.Route53Domains.Model.Internal.MarshallTransformations.NameserverUnmarshaller : object {
    private static NameserverUnmarshaller _instance;
    public static NameserverUnmarshaller Instance { get; }
    private static NameserverUnmarshaller();
    private sealed virtual override Nameserver Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.Route53Domains.Model.Nameserver,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual Nameserver Unmarshall(JsonUnmarshallerContext context);
    public static NameserverUnmarshaller get_Instance();
}
public class Amazon.Route53Domains.Model.Internal.MarshallTransformations.OperationLimitExceededExceptionUnmarshaller : object {
    private static OperationLimitExceededExceptionUnmarshaller _instance;
    public static OperationLimitExceededExceptionUnmarshaller Instance { get; }
    private static OperationLimitExceededExceptionUnmarshaller();
    public sealed virtual OperationLimitExceededException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual OperationLimitExceededException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static OperationLimitExceededExceptionUnmarshaller get_Instance();
}
public class Amazon.Route53Domains.Model.Internal.MarshallTransformations.OperationSummaryUnmarshaller : object {
    private static OperationSummaryUnmarshaller _instance;
    public static OperationSummaryUnmarshaller Instance { get; }
    private static OperationSummaryUnmarshaller();
    private sealed virtual override OperationSummary Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.Route53Domains.Model.OperationSummary,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual OperationSummary Unmarshall(JsonUnmarshallerContext context);
    public static OperationSummaryUnmarshaller get_Instance();
}
public class Amazon.Route53Domains.Model.Internal.MarshallTransformations.PriceWithCurrencyUnmarshaller : object {
    private static PriceWithCurrencyUnmarshaller _instance;
    public static PriceWithCurrencyUnmarshaller Instance { get; }
    private static PriceWithCurrencyUnmarshaller();
    private sealed virtual override PriceWithCurrency Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.Route53Domains.Model.PriceWithCurrency,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual PriceWithCurrency Unmarshall(JsonUnmarshallerContext context);
    public static PriceWithCurrencyUnmarshaller get_Instance();
}
public class Amazon.Route53Domains.Model.Internal.MarshallTransformations.PushDomainRequestMarshaller : object {
    private static PushDomainRequestMarshaller _instance;
    public static PushDomainRequestMarshaller Instance { get; }
    private static PushDomainRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(PushDomainRequest publicRequest);
    internal static PushDomainRequestMarshaller GetInstance();
    public static PushDomainRequestMarshaller get_Instance();
}
public class Amazon.Route53Domains.Model.Internal.MarshallTransformations.PushDomainResponseUnmarshaller : JsonResponseUnmarshaller {
    private static PushDomainResponseUnmarshaller _instance;
    public static PushDomainResponseUnmarshaller Instance { get; }
    private static PushDomainResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static PushDomainResponseUnmarshaller GetInstance();
    public static PushDomainResponseUnmarshaller get_Instance();
}
public class Amazon.Route53Domains.Model.Internal.MarshallTransformations.RegisterDomainRequestMarshaller : object {
    private static RegisterDomainRequestMarshaller _instance;
    public static RegisterDomainRequestMarshaller Instance { get; }
    private static RegisterDomainRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(RegisterDomainRequest publicRequest);
    internal static RegisterDomainRequestMarshaller GetInstance();
    public static RegisterDomainRequestMarshaller get_Instance();
}
public class Amazon.Route53Domains.Model.Internal.MarshallTransformations.RegisterDomainResponseUnmarshaller : JsonResponseUnmarshaller {
    private static RegisterDomainResponseUnmarshaller _instance;
    public static RegisterDomainResponseUnmarshaller Instance { get; }
    private static RegisterDomainResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static RegisterDomainResponseUnmarshaller GetInstance();
    public static RegisterDomainResponseUnmarshaller get_Instance();
}
public class Amazon.Route53Domains.Model.Internal.MarshallTransformations.RejectDomainTransferFromAnotherAwsAccountRequestMarshaller : object {
    private static RejectDomainTransferFromAnotherAwsAccountRequestMarshaller _instance;
    public static RejectDomainTransferFromAnotherAwsAccountRequestMarshaller Instance { get; }
    private static RejectDomainTransferFromAnotherAwsAccountRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(RejectDomainTransferFromAnotherAwsAccountRequest publicRequest);
    internal static RejectDomainTransferFromAnotherAwsAccountRequestMarshaller GetInstance();
    public static RejectDomainTransferFromAnotherAwsAccountRequestMarshaller get_Instance();
}
public class Amazon.Route53Domains.Model.Internal.MarshallTransformations.RejectDomainTransferFromAnotherAwsAccountResponseUnmarshaller : JsonResponseUnmarshaller {
    private static RejectDomainTransferFromAnotherAwsAccountResponseUnmarshaller _instance;
    public static RejectDomainTransferFromAnotherAwsAccountResponseUnmarshaller Instance { get; }
    private static RejectDomainTransferFromAnotherAwsAccountResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static RejectDomainTransferFromAnotherAwsAccountResponseUnmarshaller GetInstance();
    public static RejectDomainTransferFromAnotherAwsAccountResponseUnmarshaller get_Instance();
}
public class Amazon.Route53Domains.Model.Internal.MarshallTransformations.RenewDomainRequestMarshaller : object {
    private static RenewDomainRequestMarshaller _instance;
    public static RenewDomainRequestMarshaller Instance { get; }
    private static RenewDomainRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(RenewDomainRequest publicRequest);
    internal static RenewDomainRequestMarshaller GetInstance();
    public static RenewDomainRequestMarshaller get_Instance();
}
public class Amazon.Route53Domains.Model.Internal.MarshallTransformations.RenewDomainResponseUnmarshaller : JsonResponseUnmarshaller {
    private static RenewDomainResponseUnmarshaller _instance;
    public static RenewDomainResponseUnmarshaller Instance { get; }
    private static RenewDomainResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static RenewDomainResponseUnmarshaller GetInstance();
    public static RenewDomainResponseUnmarshaller get_Instance();
}
public class Amazon.Route53Domains.Model.Internal.MarshallTransformations.ResendContactReachabilityEmailRequestMarshaller : object {
    private static ResendContactReachabilityEmailRequestMarshaller _instance;
    public static ResendContactReachabilityEmailRequestMarshaller Instance { get; }
    private static ResendContactReachabilityEmailRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ResendContactReachabilityEmailRequest publicRequest);
    internal static ResendContactReachabilityEmailRequestMarshaller GetInstance();
    public static ResendContactReachabilityEmailRequestMarshaller get_Instance();
}
public class Amazon.Route53Domains.Model.Internal.MarshallTransformations.ResendContactReachabilityEmailResponseUnmarshaller : JsonResponseUnmarshaller {
    private static ResendContactReachabilityEmailResponseUnmarshaller _instance;
    public static ResendContactReachabilityEmailResponseUnmarshaller Instance { get; }
    private static ResendContactReachabilityEmailResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ResendContactReachabilityEmailResponseUnmarshaller GetInstance();
    public static ResendContactReachabilityEmailResponseUnmarshaller get_Instance();
}
public class Amazon.Route53Domains.Model.Internal.MarshallTransformations.ResendOperationAuthorizationRequestMarshaller : object {
    private static ResendOperationAuthorizationRequestMarshaller _instance;
    public static ResendOperationAuthorizationRequestMarshaller Instance { get; }
    private static ResendOperationAuthorizationRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ResendOperationAuthorizationRequest publicRequest);
    internal static ResendOperationAuthorizationRequestMarshaller GetInstance();
    public static ResendOperationAuthorizationRequestMarshaller get_Instance();
}
public class Amazon.Route53Domains.Model.Internal.MarshallTransformations.ResendOperationAuthorizationResponseUnmarshaller : JsonResponseUnmarshaller {
    private static ResendOperationAuthorizationResponseUnmarshaller _instance;
    public static ResendOperationAuthorizationResponseUnmarshaller Instance { get; }
    private static ResendOperationAuthorizationResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ResendOperationAuthorizationResponseUnmarshaller GetInstance();
    public static ResendOperationAuthorizationResponseUnmarshaller get_Instance();
}
public class Amazon.Route53Domains.Model.Internal.MarshallTransformations.RetrieveDomainAuthCodeRequestMarshaller : object {
    private static RetrieveDomainAuthCodeRequestMarshaller _instance;
    public static RetrieveDomainAuthCodeRequestMarshaller Instance { get; }
    private static RetrieveDomainAuthCodeRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(RetrieveDomainAuthCodeRequest publicRequest);
    internal static RetrieveDomainAuthCodeRequestMarshaller GetInstance();
    public static RetrieveDomainAuthCodeRequestMarshaller get_Instance();
}
public class Amazon.Route53Domains.Model.Internal.MarshallTransformations.RetrieveDomainAuthCodeResponseUnmarshaller : JsonResponseUnmarshaller {
    private static RetrieveDomainAuthCodeResponseUnmarshaller _instance;
    public static RetrieveDomainAuthCodeResponseUnmarshaller Instance { get; }
    private static RetrieveDomainAuthCodeResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static RetrieveDomainAuthCodeResponseUnmarshaller GetInstance();
    public static RetrieveDomainAuthCodeResponseUnmarshaller get_Instance();
}
public class Amazon.Route53Domains.Model.Internal.MarshallTransformations.SortConditionMarshaller : object {
    public static SortConditionMarshaller Instance;
    private static SortConditionMarshaller();
    public sealed virtual void Marshall(SortCondition requestObject, JsonMarshallerContext context);
}
public class Amazon.Route53Domains.Model.Internal.MarshallTransformations.TagMarshaller : object {
    public static TagMarshaller Instance;
    private static TagMarshaller();
    public sealed virtual void Marshall(Tag requestObject, JsonMarshallerContext context);
}
public class Amazon.Route53Domains.Model.Internal.MarshallTransformations.TagUnmarshaller : object {
    private static TagUnmarshaller _instance;
    public static TagUnmarshaller Instance { get; }
    private static TagUnmarshaller();
    private sealed virtual override Tag Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.Route53Domains.Model.Tag,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual Tag Unmarshall(JsonUnmarshallerContext context);
    public static TagUnmarshaller get_Instance();
}
public class Amazon.Route53Domains.Model.Internal.MarshallTransformations.TLDRulesViolationExceptionUnmarshaller : object {
    private static TLDRulesViolationExceptionUnmarshaller _instance;
    public static TLDRulesViolationExceptionUnmarshaller Instance { get; }
    private static TLDRulesViolationExceptionUnmarshaller();
    public sealed virtual TLDRulesViolationException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual TLDRulesViolationException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static TLDRulesViolationExceptionUnmarshaller get_Instance();
}
public class Amazon.Route53Domains.Model.Internal.MarshallTransformations.TransferDomainRequestMarshaller : object {
    private static TransferDomainRequestMarshaller _instance;
    public static TransferDomainRequestMarshaller Instance { get; }
    private static TransferDomainRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(TransferDomainRequest publicRequest);
    internal static TransferDomainRequestMarshaller GetInstance();
    public static TransferDomainRequestMarshaller get_Instance();
}
public class Amazon.Route53Domains.Model.Internal.MarshallTransformations.TransferDomainResponseUnmarshaller : JsonResponseUnmarshaller {
    private static TransferDomainResponseUnmarshaller _instance;
    public static TransferDomainResponseUnmarshaller Instance { get; }
    private static TransferDomainResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static TransferDomainResponseUnmarshaller GetInstance();
    public static TransferDomainResponseUnmarshaller get_Instance();
}
public class Amazon.Route53Domains.Model.Internal.MarshallTransformations.TransferDomainToAnotherAwsAccountRequestMarshaller : object {
    private static TransferDomainToAnotherAwsAccountRequestMarshaller _instance;
    public static TransferDomainToAnotherAwsAccountRequestMarshaller Instance { get; }
    private static TransferDomainToAnotherAwsAccountRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(TransferDomainToAnotherAwsAccountRequest publicRequest);
    internal static TransferDomainToAnotherAwsAccountRequestMarshaller GetInstance();
    public static TransferDomainToAnotherAwsAccountRequestMarshaller get_Instance();
}
public class Amazon.Route53Domains.Model.Internal.MarshallTransformations.TransferDomainToAnotherAwsAccountResponseUnmarshaller : JsonResponseUnmarshaller {
    private static TransferDomainToAnotherAwsAccountResponseUnmarshaller _instance;
    public static TransferDomainToAnotherAwsAccountResponseUnmarshaller Instance { get; }
    private static TransferDomainToAnotherAwsAccountResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static TransferDomainToAnotherAwsAccountResponseUnmarshaller GetInstance();
    public static TransferDomainToAnotherAwsAccountResponseUnmarshaller get_Instance();
}
public class Amazon.Route53Domains.Model.Internal.MarshallTransformations.UnsupportedTLDExceptionUnmarshaller : object {
    private static UnsupportedTLDExceptionUnmarshaller _instance;
    public static UnsupportedTLDExceptionUnmarshaller Instance { get; }
    private static UnsupportedTLDExceptionUnmarshaller();
    public sealed virtual UnsupportedTLDException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual UnsupportedTLDException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static UnsupportedTLDExceptionUnmarshaller get_Instance();
}
public class Amazon.Route53Domains.Model.Internal.MarshallTransformations.UpdateDomainContactPrivacyRequestMarshaller : object {
    private static UpdateDomainContactPrivacyRequestMarshaller _instance;
    public static UpdateDomainContactPrivacyRequestMarshaller Instance { get; }
    private static UpdateDomainContactPrivacyRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(UpdateDomainContactPrivacyRequest publicRequest);
    internal static UpdateDomainContactPrivacyRequestMarshaller GetInstance();
    public static UpdateDomainContactPrivacyRequestMarshaller get_Instance();
}
public class Amazon.Route53Domains.Model.Internal.MarshallTransformations.UpdateDomainContactPrivacyResponseUnmarshaller : JsonResponseUnmarshaller {
    private static UpdateDomainContactPrivacyResponseUnmarshaller _instance;
    public static UpdateDomainContactPrivacyResponseUnmarshaller Instance { get; }
    private static UpdateDomainContactPrivacyResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static UpdateDomainContactPrivacyResponseUnmarshaller GetInstance();
    public static UpdateDomainContactPrivacyResponseUnmarshaller get_Instance();
}
public class Amazon.Route53Domains.Model.Internal.MarshallTransformations.UpdateDomainContactRequestMarshaller : object {
    private static UpdateDomainContactRequestMarshaller _instance;
    public static UpdateDomainContactRequestMarshaller Instance { get; }
    private static UpdateDomainContactRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(UpdateDomainContactRequest publicRequest);
    internal static UpdateDomainContactRequestMarshaller GetInstance();
    public static UpdateDomainContactRequestMarshaller get_Instance();
}
public class Amazon.Route53Domains.Model.Internal.MarshallTransformations.UpdateDomainContactResponseUnmarshaller : JsonResponseUnmarshaller {
    private static UpdateDomainContactResponseUnmarshaller _instance;
    public static UpdateDomainContactResponseUnmarshaller Instance { get; }
    private static UpdateDomainContactResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static UpdateDomainContactResponseUnmarshaller GetInstance();
    public static UpdateDomainContactResponseUnmarshaller get_Instance();
}
public class Amazon.Route53Domains.Model.Internal.MarshallTransformations.UpdateDomainNameserversRequestMarshaller : object {
    private static UpdateDomainNameserversRequestMarshaller _instance;
    public static UpdateDomainNameserversRequestMarshaller Instance { get; }
    private static UpdateDomainNameserversRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(UpdateDomainNameserversRequest publicRequest);
    internal static UpdateDomainNameserversRequestMarshaller GetInstance();
    public static UpdateDomainNameserversRequestMarshaller get_Instance();
}
public class Amazon.Route53Domains.Model.Internal.MarshallTransformations.UpdateDomainNameserversResponseUnmarshaller : JsonResponseUnmarshaller {
    private static UpdateDomainNameserversResponseUnmarshaller _instance;
    public static UpdateDomainNameserversResponseUnmarshaller Instance { get; }
    private static UpdateDomainNameserversResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static UpdateDomainNameserversResponseUnmarshaller GetInstance();
    public static UpdateDomainNameserversResponseUnmarshaller get_Instance();
}
public class Amazon.Route53Domains.Model.Internal.MarshallTransformations.UpdateTagsForDomainRequestMarshaller : object {
    private static UpdateTagsForDomainRequestMarshaller _instance;
    public static UpdateTagsForDomainRequestMarshaller Instance { get; }
    private static UpdateTagsForDomainRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(UpdateTagsForDomainRequest publicRequest);
    internal static UpdateTagsForDomainRequestMarshaller GetInstance();
    public static UpdateTagsForDomainRequestMarshaller get_Instance();
}
public class Amazon.Route53Domains.Model.Internal.MarshallTransformations.UpdateTagsForDomainResponseUnmarshaller : JsonResponseUnmarshaller {
    private static UpdateTagsForDomainResponseUnmarshaller _instance;
    public static UpdateTagsForDomainResponseUnmarshaller Instance { get; }
    private static UpdateTagsForDomainResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static UpdateTagsForDomainResponseUnmarshaller GetInstance();
    public static UpdateTagsForDomainResponseUnmarshaller get_Instance();
}
public class Amazon.Route53Domains.Model.Internal.MarshallTransformations.ViewBillingRequestMarshaller : object {
    private static ViewBillingRequestMarshaller _instance;
    public static ViewBillingRequestMarshaller Instance { get; }
    private static ViewBillingRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ViewBillingRequest publicRequest);
    internal static ViewBillingRequestMarshaller GetInstance();
    public static ViewBillingRequestMarshaller get_Instance();
}
public class Amazon.Route53Domains.Model.Internal.MarshallTransformations.ViewBillingResponseUnmarshaller : JsonResponseUnmarshaller {
    private static ViewBillingResponseUnmarshaller _instance;
    public static ViewBillingResponseUnmarshaller Instance { get; }
    private static ViewBillingResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ViewBillingResponseUnmarshaller GetInstance();
    public static ViewBillingResponseUnmarshaller get_Instance();
}
public class Amazon.Route53Domains.Model.InvalidInputException : AmazonRoute53DomainsException {
    public InvalidInputException(string message);
    public InvalidInputException(string message, Exception innerException);
    public InvalidInputException(Exception innerException);
    public InvalidInputException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public InvalidInputException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public interface Amazon.Route53Domains.Model.IRoute53DomainsPaginatorFactory {
    public abstract virtual IListDomainsPaginator ListDomains(ListDomainsRequest request);
    public abstract virtual IListOperationsPaginator ListOperations(ListOperationsRequest request);
    public abstract virtual IListPricesPaginator ListPrices(ListPricesRequest request);
    public abstract virtual IViewBillingPaginator ViewBilling(ViewBillingRequest request);
}
public interface Amazon.Route53Domains.Model.IViewBillingPaginator {
    public IPaginatedEnumerable`1<ViewBillingResponse> Responses { get; }
    public IPaginatedEnumerable`1<BillingRecord> BillingRecords { get; }
    public abstract virtual IPaginatedEnumerable`1<ViewBillingResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<BillingRecord> get_BillingRecords();
}
internal class Amazon.Route53Domains.Model.ListDomainsPaginator : object {
    private IAmazonRoute53Domains _client;
    private ListDomainsRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<ListDomainsResponse> Responses { get; }
    public IPaginatedEnumerable`1<DomainSummary> Domains { get; }
    internal ListDomainsPaginator(IAmazonRoute53Domains client, ListDomainsRequest request);
    public sealed virtual IPaginatedEnumerable`1<ListDomainsResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<DomainSummary> get_Domains();
    [AsyncIteratorStateMachineAttribute("Amazon.Route53Domains.Model.ListDomainsPaginator/<Amazon-Runtime-IPaginator<Amazon-Route53Domains-Model-ListDomainsResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<ListDomainsResponse> Amazon.Runtime.IPaginator<Amazon.Route53Domains.Model.ListDomainsResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.Route53Domains.Model.ListDomainsRequest : AmazonRoute53DomainsRequest {
    private List`1<FilterCondition> _filterConditions;
    private string _marker;
    private Nullable`1<int> _maxItems;
    private SortCondition _sortCondition;
    public List`1<FilterCondition> FilterConditions { get; public set; }
    [AWSPropertyAttribute]
public string Marker { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> MaxItems { get; public set; }
    public SortCondition SortCondition { get; public set; }
    public List`1<FilterCondition> get_FilterConditions();
    public void set_FilterConditions(List`1<FilterCondition> value);
    internal bool IsSetFilterConditions();
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public Nullable`1<int> get_MaxItems();
    public void set_MaxItems(Nullable`1<int> value);
    internal bool IsSetMaxItems();
    public SortCondition get_SortCondition();
    public void set_SortCondition(SortCondition value);
    internal bool IsSetSortCondition();
}
public class Amazon.Route53Domains.Model.ListDomainsResponse : AmazonWebServiceResponse {
    private List`1<DomainSummary> _domains;
    private string _nextPageMarker;
    public List`1<DomainSummary> Domains { get; public set; }
    [AWSPropertyAttribute]
public string NextPageMarker { get; public set; }
    public List`1<DomainSummary> get_Domains();
    public void set_Domains(List`1<DomainSummary> value);
    internal bool IsSetDomains();
    public string get_NextPageMarker();
    public void set_NextPageMarker(string value);
    internal bool IsSetNextPageMarker();
}
internal class Amazon.Route53Domains.Model.ListOperationsPaginator : object {
    private IAmazonRoute53Domains _client;
    private ListOperationsRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<ListOperationsResponse> Responses { get; }
    public IPaginatedEnumerable`1<OperationSummary> Operations { get; }
    internal ListOperationsPaginator(IAmazonRoute53Domains client, ListOperationsRequest request);
    public sealed virtual IPaginatedEnumerable`1<ListOperationsResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<OperationSummary> get_Operations();
    [AsyncIteratorStateMachineAttribute("Amazon.Route53Domains.Model.ListOperationsPaginator/<Amazon-Runtime-IPaginator<Amazon-Route53Domains-Model-ListOperationsResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<ListOperationsResponse> Amazon.Runtime.IPaginator<Amazon.Route53Domains.Model.ListOperationsResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.Route53Domains.Model.ListOperationsRequest : AmazonRoute53DomainsRequest {
    private string _marker;
    private Nullable`1<int> _maxItems;
    private ListOperationsSortAttributeName _sortBy;
    private SortOrder _sortOrder;
    private List`1<string> _status;
    private Nullable`1<DateTime> _submittedSince;
    private List`1<string> _type;
    [AWSPropertyAttribute]
public string Marker { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> MaxItems { get; public set; }
    public ListOperationsSortAttributeName SortBy { get; public set; }
    public SortOrder SortOrder { get; public set; }
    [AWSPropertyAttribute]
public List`1<string> Status { get; public set; }
    public Nullable`1<DateTime> SubmittedSince { get; public set; }
    [AWSPropertyAttribute]
public List`1<string> Type { get; public set; }
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public Nullable`1<int> get_MaxItems();
    public void set_MaxItems(Nullable`1<int> value);
    internal bool IsSetMaxItems();
    public ListOperationsSortAttributeName get_SortBy();
    public void set_SortBy(ListOperationsSortAttributeName value);
    internal bool IsSetSortBy();
    public SortOrder get_SortOrder();
    public void set_SortOrder(SortOrder value);
    internal bool IsSetSortOrder();
    public List`1<string> get_Status();
    public void set_Status(List`1<string> value);
    internal bool IsSetStatus();
    public Nullable`1<DateTime> get_SubmittedSince();
    public void set_SubmittedSince(Nullable`1<DateTime> value);
    internal bool IsSetSubmittedSince();
    public List`1<string> get_Type();
    public void set_Type(List`1<string> value);
    internal bool IsSetType();
}
public class Amazon.Route53Domains.Model.ListOperationsResponse : AmazonWebServiceResponse {
    private string _nextPageMarker;
    private List`1<OperationSummary> _operations;
    [AWSPropertyAttribute]
public string NextPageMarker { get; public set; }
    public List`1<OperationSummary> Operations { get; public set; }
    public string get_NextPageMarker();
    public void set_NextPageMarker(string value);
    internal bool IsSetNextPageMarker();
    public List`1<OperationSummary> get_Operations();
    public void set_Operations(List`1<OperationSummary> value);
    internal bool IsSetOperations();
}
internal class Amazon.Route53Domains.Model.ListPricesPaginator : object {
    private IAmazonRoute53Domains _client;
    private ListPricesRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<ListPricesResponse> Responses { get; }
    public IPaginatedEnumerable`1<DomainPrice> Prices { get; }
    internal ListPricesPaginator(IAmazonRoute53Domains client, ListPricesRequest request);
    public sealed virtual IPaginatedEnumerable`1<ListPricesResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<DomainPrice> get_Prices();
    [AsyncIteratorStateMachineAttribute("Amazon.Route53Domains.Model.ListPricesPaginator/<Amazon-Runtime-IPaginator<Amazon-Route53Domains-Model-ListPricesResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<ListPricesResponse> Amazon.Runtime.IPaginator<Amazon.Route53Domains.Model.ListPricesResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.Route53Domains.Model.ListPricesRequest : AmazonRoute53DomainsRequest {
    private string _marker;
    private Nullable`1<int> _maxItems;
    private string _tld;
    [AWSPropertyAttribute]
public string Marker { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> MaxItems { get; public set; }
    [AWSPropertyAttribute]
public string Tld { get; public set; }
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public Nullable`1<int> get_MaxItems();
    public void set_MaxItems(Nullable`1<int> value);
    internal bool IsSetMaxItems();
    public string get_Tld();
    public void set_Tld(string value);
    internal bool IsSetTld();
}
public class Amazon.Route53Domains.Model.ListPricesResponse : AmazonWebServiceResponse {
    private string _nextPageMarker;
    private List`1<DomainPrice> _prices;
    [AWSPropertyAttribute]
public string NextPageMarker { get; public set; }
    public List`1<DomainPrice> Prices { get; public set; }
    public string get_NextPageMarker();
    public void set_NextPageMarker(string value);
    internal bool IsSetNextPageMarker();
    public List`1<DomainPrice> get_Prices();
    public void set_Prices(List`1<DomainPrice> value);
    internal bool IsSetPrices();
}
public class Amazon.Route53Domains.Model.ListTagsForDomainRequest : AmazonRoute53DomainsRequest {
    private string _domainName;
    [AWSPropertyAttribute]
public string DomainName { get; public set; }
    public string get_DomainName();
    public void set_DomainName(string value);
    internal bool IsSetDomainName();
}
public class Amazon.Route53Domains.Model.ListTagsForDomainResponse : AmazonWebServiceResponse {
    private List`1<Tag> _tagList;
    public List`1<Tag> TagList { get; public set; }
    public List`1<Tag> get_TagList();
    public void set_TagList(List`1<Tag> value);
    internal bool IsSetTagList();
}
public class Amazon.Route53Domains.Model.Nameserver : object {
    private List`1<string> _glueIps;
    private string _name;
    public List`1<string> GlueIps { get; public set; }
    [AWSPropertyAttribute]
public string Name { get; public set; }
    public List`1<string> get_GlueIps();
    public void set_GlueIps(List`1<string> value);
    internal bool IsSetGlueIps();
    public string get_Name();
    public void set_Name(string value);
    internal bool IsSetName();
}
public class Amazon.Route53Domains.Model.OperationLimitExceededException : AmazonRoute53DomainsException {
    public OperationLimitExceededException(string message);
    public OperationLimitExceededException(string message, Exception innerException);
    public OperationLimitExceededException(Exception innerException);
    public OperationLimitExceededException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public OperationLimitExceededException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Route53Domains.Model.OperationSummary : object {
    private string _domainName;
    private Nullable`1<DateTime> _lastUpdatedDate;
    private string _message;
    private string _operationId;
    private OperationStatus _status;
    private StatusFlag _statusFlag;
    private Nullable`1<DateTime> _submittedDate;
    private OperationType _type;
    [AWSPropertyAttribute]
public string DomainName { get; public set; }
    public Nullable`1<DateTime> LastUpdatedDate { get; public set; }
    public string Message { get; public set; }
    [AWSPropertyAttribute]
public string OperationId { get; public set; }
    public OperationStatus Status { get; public set; }
    public StatusFlag StatusFlag { get; public set; }
    public Nullable`1<DateTime> SubmittedDate { get; public set; }
    public OperationType Type { get; public set; }
    public string get_DomainName();
    public void set_DomainName(string value);
    internal bool IsSetDomainName();
    public Nullable`1<DateTime> get_LastUpdatedDate();
    public void set_LastUpdatedDate(Nullable`1<DateTime> value);
    internal bool IsSetLastUpdatedDate();
    public string get_Message();
    public void set_Message(string value);
    internal bool IsSetMessage();
    public string get_OperationId();
    public void set_OperationId(string value);
    internal bool IsSetOperationId();
    public OperationStatus get_Status();
    public void set_Status(OperationStatus value);
    internal bool IsSetStatus();
    public StatusFlag get_StatusFlag();
    public void set_StatusFlag(StatusFlag value);
    internal bool IsSetStatusFlag();
    public Nullable`1<DateTime> get_SubmittedDate();
    public void set_SubmittedDate(Nullable`1<DateTime> value);
    internal bool IsSetSubmittedDate();
    public OperationType get_Type();
    public void set_Type(OperationType value);
    internal bool IsSetType();
}
public class Amazon.Route53Domains.Model.PriceWithCurrency : object {
    private string _currency;
    private Nullable`1<double> _price;
    [AWSPropertyAttribute]
public string Currency { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<double> Price { get; public set; }
    public string get_Currency();
    public void set_Currency(string value);
    internal bool IsSetCurrency();
    public Nullable`1<double> get_Price();
    public void set_Price(Nullable`1<double> value);
    internal bool IsSetPrice();
}
public class Amazon.Route53Domains.Model.PushDomainRequest : AmazonRoute53DomainsRequest {
    private string _domainName;
    private string _target;
    [AWSPropertyAttribute]
public string DomainName { get; public set; }
    [AWSPropertyAttribute]
public string Target { get; public set; }
    public string get_DomainName();
    public void set_DomainName(string value);
    internal bool IsSetDomainName();
    public string get_Target();
    public void set_Target(string value);
    internal bool IsSetTarget();
}
public class Amazon.Route53Domains.Model.PushDomainResponse : AmazonWebServiceResponse {
}
public class Amazon.Route53Domains.Model.RegisterDomainRequest : AmazonRoute53DomainsRequest {
    private ContactDetail _adminContact;
    private Nullable`1<bool> _autoRenew;
    private ContactDetail _billingContact;
    private string _domainName;
    private Nullable`1<int> _durationInYears;
    private string _idnLangCode;
    private Nullable`1<bool> _privacyProtectAdminContact;
    private Nullable`1<bool> _privacyProtectBillingContact;
    private Nullable`1<bool> _privacyProtectRegistrantContact;
    private Nullable`1<bool> _privacyProtectTechContact;
    private ContactDetail _registrantContact;
    private ContactDetail _techContact;
    [AWSPropertyAttribute]
public ContactDetail AdminContact { get; public set; }
    public Nullable`1<bool> AutoRenew { get; public set; }
    [AWSPropertyAttribute]
public ContactDetail BillingContact { get; public set; }
    [AWSPropertyAttribute]
public string DomainName { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> DurationInYears { get; public set; }
    [AWSPropertyAttribute]
public string IdnLangCode { get; public set; }
    public Nullable`1<bool> PrivacyProtectAdminContact { get; public set; }
    public Nullable`1<bool> PrivacyProtectBillingContact { get; public set; }
    public Nullable`1<bool> PrivacyProtectRegistrantContact { get; public set; }
    public Nullable`1<bool> PrivacyProtectTechContact { get; public set; }
    [AWSPropertyAttribute]
public ContactDetail RegistrantContact { get; public set; }
    [AWSPropertyAttribute]
public ContactDetail TechContact { get; public set; }
    public ContactDetail get_AdminContact();
    public void set_AdminContact(ContactDetail value);
    internal bool IsSetAdminContact();
    public Nullable`1<bool> get_AutoRenew();
    public void set_AutoRenew(Nullable`1<bool> value);
    internal bool IsSetAutoRenew();
    public ContactDetail get_BillingContact();
    public void set_BillingContact(ContactDetail value);
    internal bool IsSetBillingContact();
    public string get_DomainName();
    public void set_DomainName(string value);
    internal bool IsSetDomainName();
    public Nullable`1<int> get_DurationInYears();
    public void set_DurationInYears(Nullable`1<int> value);
    internal bool IsSetDurationInYears();
    public string get_IdnLangCode();
    public void set_IdnLangCode(string value);
    internal bool IsSetIdnLangCode();
    public Nullable`1<bool> get_PrivacyProtectAdminContact();
    public void set_PrivacyProtectAdminContact(Nullable`1<bool> value);
    internal bool IsSetPrivacyProtectAdminContact();
    public Nullable`1<bool> get_PrivacyProtectBillingContact();
    public void set_PrivacyProtectBillingContact(Nullable`1<bool> value);
    internal bool IsSetPrivacyProtectBillingContact();
    public Nullable`1<bool> get_PrivacyProtectRegistrantContact();
    public void set_PrivacyProtectRegistrantContact(Nullable`1<bool> value);
    internal bool IsSetPrivacyProtectRegistrantContact();
    public Nullable`1<bool> get_PrivacyProtectTechContact();
    public void set_PrivacyProtectTechContact(Nullable`1<bool> value);
    internal bool IsSetPrivacyProtectTechContact();
    public ContactDetail get_RegistrantContact();
    public void set_RegistrantContact(ContactDetail value);
    internal bool IsSetRegistrantContact();
    public ContactDetail get_TechContact();
    public void set_TechContact(ContactDetail value);
    internal bool IsSetTechContact();
}
public class Amazon.Route53Domains.Model.RegisterDomainResponse : AmazonWebServiceResponse {
    private string _operationId;
    [AWSPropertyAttribute]
public string OperationId { get; public set; }
    public string get_OperationId();
    public void set_OperationId(string value);
    internal bool IsSetOperationId();
}
public class Amazon.Route53Domains.Model.RejectDomainTransferFromAnotherAwsAccountRequest : AmazonRoute53DomainsRequest {
    private string _domainName;
    [AWSPropertyAttribute]
public string DomainName { get; public set; }
    public string get_DomainName();
    public void set_DomainName(string value);
    internal bool IsSetDomainName();
}
public class Amazon.Route53Domains.Model.RejectDomainTransferFromAnotherAwsAccountResponse : AmazonWebServiceResponse {
    private string _operationId;
    [AWSPropertyAttribute]
public string OperationId { get; public set; }
    public string get_OperationId();
    public void set_OperationId(string value);
    internal bool IsSetOperationId();
}
public class Amazon.Route53Domains.Model.RenewDomainRequest : AmazonRoute53DomainsRequest {
    private Nullable`1<int> _currentExpiryYear;
    private string _domainName;
    private Nullable`1<int> _durationInYears;
    [AWSPropertyAttribute]
public Nullable`1<int> CurrentExpiryYear { get; public set; }
    [AWSPropertyAttribute]
public string DomainName { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> DurationInYears { get; public set; }
    public Nullable`1<int> get_CurrentExpiryYear();
    public void set_CurrentExpiryYear(Nullable`1<int> value);
    internal bool IsSetCurrentExpiryYear();
    public string get_DomainName();
    public void set_DomainName(string value);
    internal bool IsSetDomainName();
    public Nullable`1<int> get_DurationInYears();
    public void set_DurationInYears(Nullable`1<int> value);
    internal bool IsSetDurationInYears();
}
public class Amazon.Route53Domains.Model.RenewDomainResponse : AmazonWebServiceResponse {
    private string _operationId;
    [AWSPropertyAttribute]
public string OperationId { get; public set; }
    public string get_OperationId();
    public void set_OperationId(string value);
    internal bool IsSetOperationId();
}
public class Amazon.Route53Domains.Model.ResendContactReachabilityEmailRequest : AmazonRoute53DomainsRequest {
    private string _domainName;
    [AWSPropertyAttribute]
public string DomainName { get; public set; }
    public string get_DomainName();
    public void set_DomainName(string value);
    internal bool IsSetDomainName();
}
public class Amazon.Route53Domains.Model.ResendContactReachabilityEmailResponse : AmazonWebServiceResponse {
    private string _domainName;
    private string _emailAddress;
    private Nullable`1<bool> _isAlreadyVerified;
    [AWSPropertyAttribute]
public string DomainName { get; public set; }
    [AWSPropertyAttribute]
public string EmailAddress { get; public set; }
    public Nullable`1<bool> IsAlreadyVerified { get; public set; }
    public string get_DomainName();
    public void set_DomainName(string value);
    internal bool IsSetDomainName();
    public string get_EmailAddress();
    public void set_EmailAddress(string value);
    internal bool IsSetEmailAddress();
    public Nullable`1<bool> get_IsAlreadyVerified();
    public void set_IsAlreadyVerified(Nullable`1<bool> value);
    internal bool IsSetIsAlreadyVerified();
}
public class Amazon.Route53Domains.Model.ResendOperationAuthorizationRequest : AmazonRoute53DomainsRequest {
    private string _operationId;
    [AWSPropertyAttribute]
public string OperationId { get; public set; }
    public string get_OperationId();
    public void set_OperationId(string value);
    internal bool IsSetOperationId();
}
public class Amazon.Route53Domains.Model.ResendOperationAuthorizationResponse : AmazonWebServiceResponse {
}
public class Amazon.Route53Domains.Model.RetrieveDomainAuthCodeRequest : AmazonRoute53DomainsRequest {
    private string _domainName;
    [AWSPropertyAttribute]
public string DomainName { get; public set; }
    public string get_DomainName();
    public void set_DomainName(string value);
    internal bool IsSetDomainName();
}
public class Amazon.Route53Domains.Model.RetrieveDomainAuthCodeResponse : AmazonWebServiceResponse {
    private string _authCode;
    [AWSPropertyAttribute]
public string AuthCode { get; public set; }
    public string get_AuthCode();
    public void set_AuthCode(string value);
    internal bool IsSetAuthCode();
}
public class Amazon.Route53Domains.Model.Route53DomainsPaginatorFactory : object {
    private IAmazonRoute53Domains client;
    internal Route53DomainsPaginatorFactory(IAmazonRoute53Domains client);
    public sealed virtual IListDomainsPaginator ListDomains(ListDomainsRequest request);
    public sealed virtual IListOperationsPaginator ListOperations(ListOperationsRequest request);
    public sealed virtual IListPricesPaginator ListPrices(ListPricesRequest request);
    public sealed virtual IViewBillingPaginator ViewBilling(ViewBillingRequest request);
}
public class Amazon.Route53Domains.Model.SortCondition : object {
    private ListDomainsAttributeName _name;
    private SortOrder _sortOrder;
    [AWSPropertyAttribute]
public ListDomainsAttributeName Name { get; public set; }
    [AWSPropertyAttribute]
public SortOrder SortOrder { get; public set; }
    public ListDomainsAttributeName get_Name();
    public void set_Name(ListDomainsAttributeName value);
    internal bool IsSetName();
    public SortOrder get_SortOrder();
    public void set_SortOrder(SortOrder value);
    internal bool IsSetSortOrder();
}
public class Amazon.Route53Domains.Model.Tag : object {
    private string _key;
    private string _value;
    [AWSPropertyAttribute]
public string Key { get; public set; }
    [AWSPropertyAttribute]
public string Value { get; public set; }
    public string get_Key();
    public void set_Key(string value);
    internal bool IsSetKey();
    public string get_Value();
    public void set_Value(string value);
    internal bool IsSetValue();
}
public class Amazon.Route53Domains.Model.TLDRulesViolationException : AmazonRoute53DomainsException {
    public TLDRulesViolationException(string message);
    public TLDRulesViolationException(string message, Exception innerException);
    public TLDRulesViolationException(Exception innerException);
    public TLDRulesViolationException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public TLDRulesViolationException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Route53Domains.Model.TransferDomainRequest : AmazonRoute53DomainsRequest {
    private ContactDetail _adminContact;
    private string _authCode;
    private Nullable`1<bool> _autoRenew;
    private ContactDetail _billingContact;
    private string _domainName;
    private Nullable`1<int> _durationInYears;
    private string _idnLangCode;
    private List`1<Nameserver> _nameservers;
    private Nullable`1<bool> _privacyProtectAdminContact;
    private Nullable`1<bool> _privacyProtectBillingContact;
    private Nullable`1<bool> _privacyProtectRegistrantContact;
    private Nullable`1<bool> _privacyProtectTechContact;
    private ContactDetail _registrantContact;
    private ContactDetail _techContact;
    [AWSPropertyAttribute]
public ContactDetail AdminContact { get; public set; }
    [AWSPropertyAttribute]
public string AuthCode { get; public set; }
    public Nullable`1<bool> AutoRenew { get; public set; }
    [AWSPropertyAttribute]
public ContactDetail BillingContact { get; public set; }
    [AWSPropertyAttribute]
public string DomainName { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> DurationInYears { get; public set; }
    [AWSPropertyAttribute]
public string IdnLangCode { get; public set; }
    public List`1<Nameserver> Nameservers { get; public set; }
    public Nullable`1<bool> PrivacyProtectAdminContact { get; public set; }
    public Nullable`1<bool> PrivacyProtectBillingContact { get; public set; }
    public Nullable`1<bool> PrivacyProtectRegistrantContact { get; public set; }
    public Nullable`1<bool> PrivacyProtectTechContact { get; public set; }
    [AWSPropertyAttribute]
public ContactDetail RegistrantContact { get; public set; }
    [AWSPropertyAttribute]
public ContactDetail TechContact { get; public set; }
    public ContactDetail get_AdminContact();
    public void set_AdminContact(ContactDetail value);
    internal bool IsSetAdminContact();
    public string get_AuthCode();
    public void set_AuthCode(string value);
    internal bool IsSetAuthCode();
    public Nullable`1<bool> get_AutoRenew();
    public void set_AutoRenew(Nullable`1<bool> value);
    internal bool IsSetAutoRenew();
    public ContactDetail get_BillingContact();
    public void set_BillingContact(ContactDetail value);
    internal bool IsSetBillingContact();
    public string get_DomainName();
    public void set_DomainName(string value);
    internal bool IsSetDomainName();
    public Nullable`1<int> get_DurationInYears();
    public void set_DurationInYears(Nullable`1<int> value);
    internal bool IsSetDurationInYears();
    public string get_IdnLangCode();
    public void set_IdnLangCode(string value);
    internal bool IsSetIdnLangCode();
    public List`1<Nameserver> get_Nameservers();
    public void set_Nameservers(List`1<Nameserver> value);
    internal bool IsSetNameservers();
    public Nullable`1<bool> get_PrivacyProtectAdminContact();
    public void set_PrivacyProtectAdminContact(Nullable`1<bool> value);
    internal bool IsSetPrivacyProtectAdminContact();
    public Nullable`1<bool> get_PrivacyProtectBillingContact();
    public void set_PrivacyProtectBillingContact(Nullable`1<bool> value);
    internal bool IsSetPrivacyProtectBillingContact();
    public Nullable`1<bool> get_PrivacyProtectRegistrantContact();
    public void set_PrivacyProtectRegistrantContact(Nullable`1<bool> value);
    internal bool IsSetPrivacyProtectRegistrantContact();
    public Nullable`1<bool> get_PrivacyProtectTechContact();
    public void set_PrivacyProtectTechContact(Nullable`1<bool> value);
    internal bool IsSetPrivacyProtectTechContact();
    public ContactDetail get_RegistrantContact();
    public void set_RegistrantContact(ContactDetail value);
    internal bool IsSetRegistrantContact();
    public ContactDetail get_TechContact();
    public void set_TechContact(ContactDetail value);
    internal bool IsSetTechContact();
}
public class Amazon.Route53Domains.Model.TransferDomainResponse : AmazonWebServiceResponse {
    private string _operationId;
    [AWSPropertyAttribute]
public string OperationId { get; public set; }
    public string get_OperationId();
    public void set_OperationId(string value);
    internal bool IsSetOperationId();
}
public class Amazon.Route53Domains.Model.TransferDomainToAnotherAwsAccountRequest : AmazonRoute53DomainsRequest {
    private string _accountId;
    private string _domainName;
    [AWSPropertyAttribute]
public string AccountId { get; public set; }
    [AWSPropertyAttribute]
public string DomainName { get; public set; }
    public string get_AccountId();
    public void set_AccountId(string value);
    internal bool IsSetAccountId();
    public string get_DomainName();
    public void set_DomainName(string value);
    internal bool IsSetDomainName();
}
public class Amazon.Route53Domains.Model.TransferDomainToAnotherAwsAccountResponse : AmazonWebServiceResponse {
    private string _operationId;
    private string _password;
    [AWSPropertyAttribute]
public string OperationId { get; public set; }
    [AWSPropertyAttribute]
public string Password { get; public set; }
    public string get_OperationId();
    public void set_OperationId(string value);
    internal bool IsSetOperationId();
    public string get_Password();
    public void set_Password(string value);
    internal bool IsSetPassword();
}
public class Amazon.Route53Domains.Model.UnsupportedTLDException : AmazonRoute53DomainsException {
    public UnsupportedTLDException(string message);
    public UnsupportedTLDException(string message, Exception innerException);
    public UnsupportedTLDException(Exception innerException);
    public UnsupportedTLDException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public UnsupportedTLDException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Route53Domains.Model.UpdateDomainContactPrivacyRequest : AmazonRoute53DomainsRequest {
    private Nullable`1<bool> _adminPrivacy;
    private Nullable`1<bool> _billingPrivacy;
    private string _domainName;
    private Nullable`1<bool> _registrantPrivacy;
    private Nullable`1<bool> _techPrivacy;
    public Nullable`1<bool> AdminPrivacy { get; public set; }
    public Nullable`1<bool> BillingPrivacy { get; public set; }
    [AWSPropertyAttribute]
public string DomainName { get; public set; }
    public Nullable`1<bool> RegistrantPrivacy { get; public set; }
    public Nullable`1<bool> TechPrivacy { get; public set; }
    public Nullable`1<bool> get_AdminPrivacy();
    public void set_AdminPrivacy(Nullable`1<bool> value);
    internal bool IsSetAdminPrivacy();
    public Nullable`1<bool> get_BillingPrivacy();
    public void set_BillingPrivacy(Nullable`1<bool> value);
    internal bool IsSetBillingPrivacy();
    public string get_DomainName();
    public void set_DomainName(string value);
    internal bool IsSetDomainName();
    public Nullable`1<bool> get_RegistrantPrivacy();
    public void set_RegistrantPrivacy(Nullable`1<bool> value);
    internal bool IsSetRegistrantPrivacy();
    public Nullable`1<bool> get_TechPrivacy();
    public void set_TechPrivacy(Nullable`1<bool> value);
    internal bool IsSetTechPrivacy();
}
public class Amazon.Route53Domains.Model.UpdateDomainContactPrivacyResponse : AmazonWebServiceResponse {
    private string _operationId;
    [AWSPropertyAttribute]
public string OperationId { get; public set; }
    public string get_OperationId();
    public void set_OperationId(string value);
    internal bool IsSetOperationId();
}
public class Amazon.Route53Domains.Model.UpdateDomainContactRequest : AmazonRoute53DomainsRequest {
    private ContactDetail _adminContact;
    private ContactDetail _billingContact;
    private Consent _consent;
    private string _domainName;
    private ContactDetail _registrantContact;
    private ContactDetail _techContact;
    [AWSPropertyAttribute]
public ContactDetail AdminContact { get; public set; }
    [AWSPropertyAttribute]
public ContactDetail BillingContact { get; public set; }
    public Consent Consent { get; public set; }
    [AWSPropertyAttribute]
public string DomainName { get; public set; }
    [AWSPropertyAttribute]
public ContactDetail RegistrantContact { get; public set; }
    [AWSPropertyAttribute]
public ContactDetail TechContact { get; public set; }
    public ContactDetail get_AdminContact();
    public void set_AdminContact(ContactDetail value);
    internal bool IsSetAdminContact();
    public ContactDetail get_BillingContact();
    public void set_BillingContact(ContactDetail value);
    internal bool IsSetBillingContact();
    public Consent get_Consent();
    public void set_Consent(Consent value);
    internal bool IsSetConsent();
    public string get_DomainName();
    public void set_DomainName(string value);
    internal bool IsSetDomainName();
    public ContactDetail get_RegistrantContact();
    public void set_RegistrantContact(ContactDetail value);
    internal bool IsSetRegistrantContact();
    public ContactDetail get_TechContact();
    public void set_TechContact(ContactDetail value);
    internal bool IsSetTechContact();
}
public class Amazon.Route53Domains.Model.UpdateDomainContactResponse : AmazonWebServiceResponse {
    private string _operationId;
    [AWSPropertyAttribute]
public string OperationId { get; public set; }
    public string get_OperationId();
    public void set_OperationId(string value);
    internal bool IsSetOperationId();
}
public class Amazon.Route53Domains.Model.UpdateDomainNameserversRequest : AmazonRoute53DomainsRequest {
    private string _domainName;
    private string _fiAuthKey;
    private List`1<Nameserver> _nameservers;
    [AWSPropertyAttribute]
public string DomainName { get; public set; }
    [ObsoleteAttribute("This property is deprecated")]
[AWSPropertyAttribute]
public string FIAuthKey { get; public set; }
    [AWSPropertyAttribute]
public List`1<Nameserver> Nameservers { get; public set; }
    public string get_DomainName();
    public void set_DomainName(string value);
    internal bool IsSetDomainName();
    public string get_FIAuthKey();
    public void set_FIAuthKey(string value);
    internal bool IsSetFIAuthKey();
    public List`1<Nameserver> get_Nameservers();
    public void set_Nameservers(List`1<Nameserver> value);
    internal bool IsSetNameservers();
}
public class Amazon.Route53Domains.Model.UpdateDomainNameserversResponse : AmazonWebServiceResponse {
    private string _operationId;
    [AWSPropertyAttribute]
public string OperationId { get; public set; }
    public string get_OperationId();
    public void set_OperationId(string value);
    internal bool IsSetOperationId();
}
public class Amazon.Route53Domains.Model.UpdateTagsForDomainRequest : AmazonRoute53DomainsRequest {
    private string _domainName;
    private List`1<Tag> _tagsToUpdate;
    [AWSPropertyAttribute]
public string DomainName { get; public set; }
    public List`1<Tag> TagsToUpdate { get; public set; }
    public string get_DomainName();
    public void set_DomainName(string value);
    internal bool IsSetDomainName();
    public List`1<Tag> get_TagsToUpdate();
    public void set_TagsToUpdate(List`1<Tag> value);
    internal bool IsSetTagsToUpdate();
}
public class Amazon.Route53Domains.Model.UpdateTagsForDomainResponse : AmazonWebServiceResponse {
}
internal class Amazon.Route53Domains.Model.ViewBillingPaginator : object {
    private IAmazonRoute53Domains _client;
    private ViewBillingRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<ViewBillingResponse> Responses { get; }
    public IPaginatedEnumerable`1<BillingRecord> BillingRecords { get; }
    internal ViewBillingPaginator(IAmazonRoute53Domains client, ViewBillingRequest request);
    public sealed virtual IPaginatedEnumerable`1<ViewBillingResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<BillingRecord> get_BillingRecords();
    [AsyncIteratorStateMachineAttribute("Amazon.Route53Domains.Model.ViewBillingPaginator/<Amazon-Runtime-IPaginator<Amazon-Route53Domains-Model-ViewBillingResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<ViewBillingResponse> Amazon.Runtime.IPaginator<Amazon.Route53Domains.Model.ViewBillingResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.Route53Domains.Model.ViewBillingRequest : AmazonRoute53DomainsRequest {
    private Nullable`1<DateTime> _end;
    private string _marker;
    private Nullable`1<int> _maxItems;
    private Nullable`1<DateTime> _start;
    public Nullable`1<DateTime> End { get; public set; }
    [AWSPropertyAttribute]
public string Marker { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> MaxItems { get; public set; }
    public Nullable`1<DateTime> Start { get; public set; }
    public Nullable`1<DateTime> get_End();
    public void set_End(Nullable`1<DateTime> value);
    internal bool IsSetEnd();
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public Nullable`1<int> get_MaxItems();
    public void set_MaxItems(Nullable`1<int> value);
    internal bool IsSetMaxItems();
    public Nullable`1<DateTime> get_Start();
    public void set_Start(Nullable`1<DateTime> value);
    internal bool IsSetStart();
}
public class Amazon.Route53Domains.Model.ViewBillingResponse : AmazonWebServiceResponse {
    private List`1<BillingRecord> _billingRecords;
    private string _nextPageMarker;
    public List`1<BillingRecord> BillingRecords { get; public set; }
    [AWSPropertyAttribute]
public string NextPageMarker { get; public set; }
    public List`1<BillingRecord> get_BillingRecords();
    public void set_BillingRecords(List`1<BillingRecord> value);
    internal bool IsSetBillingRecords();
    public string get_NextPageMarker();
    public void set_NextPageMarker(string value);
    internal bool IsSetNextPageMarker();
}
public class Amazon.Route53Domains.OperationStatus : ConstantClass {
    public static OperationStatus ERROR;
    public static OperationStatus FAILED;
    public static OperationStatus IN_PROGRESS;
    public static OperationStatus SUBMITTED;
    public static OperationStatus SUCCESSFUL;
    public OperationStatus(string value);
    private static OperationStatus();
    public static OperationStatus FindValue(string value);
    public static OperationStatus op_Implicit(string value);
}
public class Amazon.Route53Domains.OperationType : ConstantClass {
    public static OperationType ADD_DNSSEC;
    public static OperationType CHANGE_DOMAIN_OWNER;
    public static OperationType CHANGE_PRIVACY_PROTECTION;
    public static OperationType DELETE_DOMAIN;
    public static OperationType DISABLE_AUTORENEW;
    public static OperationType DOMAIN_LOCK;
    public static OperationType ENABLE_AUTORENEW;
    public static OperationType EXPIRE_DOMAIN;
    public static OperationType INTERNAL_TRANSFER_IN_DOMAIN;
    public static OperationType INTERNAL_TRANSFER_OUT_DOMAIN;
    public static OperationType PUSH_DOMAIN;
    public static OperationType REGISTER_DOMAIN;
    public static OperationType RELEASE_TO_GANDI;
    public static OperationType REMOVE_DNSSEC;
    public static OperationType RENEW_DOMAIN;
    public static OperationType TRANSFER_IN_DOMAIN;
    public static OperationType TRANSFER_ON_RENEW;
    public static OperationType TRANSFER_OUT_DOMAIN;
    public static OperationType UPDATE_DOMAIN_CONTACT;
    public static OperationType UPDATE_NAMESERVER;
    public OperationType(string value);
    private static OperationType();
    public static OperationType FindValue(string value);
    public static OperationType op_Implicit(string value);
}
public class Amazon.Route53Domains.Operator : ConstantClass {
    public static Operator BEGINS_WITH;
    public static Operator GE;
    public static Operator LE;
    public Operator(string value);
    private static Operator();
    public static Operator FindValue(string value);
    public static Operator op_Implicit(string value);
}
public class Amazon.Route53Domains.ReachabilityStatus : ConstantClass {
    public static ReachabilityStatus DONE;
    public static ReachabilityStatus EXPIRED;
    public static ReachabilityStatus PENDING;
    public ReachabilityStatus(string value);
    private static ReachabilityStatus();
    public static ReachabilityStatus FindValue(string value);
    public static ReachabilityStatus op_Implicit(string value);
}
public class Amazon.Route53Domains.SortOrder : ConstantClass {
    public static SortOrder ASC;
    public static SortOrder DESC;
    public SortOrder(string value);
    private static SortOrder();
    public static SortOrder FindValue(string value);
    public static SortOrder op_Implicit(string value);
}
public class Amazon.Route53Domains.StatusFlag : ConstantClass {
    public static StatusFlag PENDING_ACCEPTANCE;
    public static StatusFlag PENDING_AUTHORIZATION;
    public static StatusFlag PENDING_CUSTOMER_ACTION;
    public static StatusFlag PENDING_PAYMENT_VERIFICATION;
    public static StatusFlag PENDING_SUPPORT_CASE;
    public StatusFlag(string value);
    private static StatusFlag();
    public static StatusFlag FindValue(string value);
    public static StatusFlag op_Implicit(string value);
}
public class Amazon.Route53Domains.Transferable : ConstantClass {
    public static Transferable DOMAIN_IN_ANOTHER_ACCOUNT;
    public static Transferable DOMAIN_IN_OWN_ACCOUNT;
    public static Transferable DONT_KNOW;
    public static Transferable PREMIUM_DOMAIN;
    public static Transferable TRANSFERABLE;
    public static Transferable UNTRANSFERABLE;
    public Transferable(string value);
    private static Transferable();
    public static Transferable FindValue(string value);
    public static Transferable op_Implicit(string value);
}
