public static class Amazon.AWSConfigsS3 : object {
    private static string s3Key;
    public static string S3UseSignatureVersion4Key;
    private static bool _useSignatureVersion4;
    [CompilerGeneratedAttribute]
private static bool <DisableDefaultChecksumValidation>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <EnableUnicodeEncodingForObjectMetadata>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <UseSigV4SetExplicitly>k__BackingField;
    public static bool UseSignatureVersion4 { get; public set; }
    [ObsoleteAttribute("This property is deprecated in favor of DisableDefaultChecksumValidation.")]
public static bool DisableMD5Stream { get; public set; }
    public static bool DisableDefaultChecksumValidation { get; public set; }
    public static bool EnableUnicodeEncodingForObjectMetadata { get; public set; }
    internal static bool UseSigV4SetExplicitly { get; private set; }
    private static AWSConfigsS3();
    public static bool get_UseSignatureVersion4();
    public static void set_UseSignatureVersion4(bool value);
    public static bool get_DisableMD5Stream();
    public static void set_DisableMD5Stream(bool value);
    [CompilerGeneratedAttribute]
public static bool get_DisableDefaultChecksumValidation();
    [CompilerGeneratedAttribute]
public static void set_DisableDefaultChecksumValidation(bool value);
    [CompilerGeneratedAttribute]
public static bool get_EnableUnicodeEncodingForObjectMetadata();
    [CompilerGeneratedAttribute]
public static void set_EnableUnicodeEncodingForObjectMetadata(bool value);
    [CompilerGeneratedAttribute]
internal static bool get_UseSigV4SetExplicitly();
    [CompilerGeneratedAttribute]
private static void set_UseSigV4SetExplicitly(bool value);
}
public class Amazon.S3.AmazonS3Client : AmazonServiceClient {
    private static IServiceMetadata serviceMetadata;
    private IS3PaginatorFactory _paginators;
    public IS3PaginatorFactory Paginators { get; }
    protected IServiceMetadata ServiceMetadata { get; }
    public AmazonS3Client(RegionEndpoint region);
    public AmazonS3Client(AmazonS3Config config);
    public AmazonS3Client(AWSCredentials credentials);
    public AmazonS3Client(AWSCredentials credentials, RegionEndpoint region);
    public AmazonS3Client(AWSCredentials credentials, AmazonS3Config clientConfig);
    public AmazonS3Client(string awsAccessKeyId, string awsSecretAccessKey);
    public AmazonS3Client(string awsAccessKeyId, string awsSecretAccessKey, RegionEndpoint region);
    public AmazonS3Client(string awsAccessKeyId, string awsSecretAccessKey, AmazonS3Config clientConfig);
    public AmazonS3Client(string awsAccessKeyId, string awsSecretAccessKey, string awsSessionToken);
    public AmazonS3Client(string awsAccessKeyId, string awsSecretAccessKey, string awsSessionToken, RegionEndpoint region);
    public AmazonS3Client(string awsAccessKeyId, string awsSecretAccessKey, string awsSessionToken, AmazonS3Config clientConfig);
    private static AmazonS3Client();
    protected virtual void Initialize();
    internal string GetPreSignedURLInternal(GetPreSignedUrlRequest request, bool useSigV2Fallback);
    [AsyncStateMachineAttribute("Amazon.S3.AmazonS3Client/<GetPreSignedURLInternalAsync>d__2")]
internal Task`1<string> GetPreSignedURLInternalAsync(GetPreSignedUrlRequest request, bool useSigV2Fallback);
    private static IRequest Marshall(IClientConfig config, GetPreSignedUrlRequest getPreSignedUrlRequest, string accessKey, string token, SignatureVersion signatureVersion);
    private SignatureVersion DetermineSignatureVersionToUse(GetPreSignedUrlRequest request, Arn& arn, bool useSigV2Fallback);
    private static void ConvertToS3Express(ImmutableCredentials immutableCredentials, ExecutionContext context, SignatureVersion& signatureVersion, AmazonS3Config config);
    private static SigningResult ReturnSigningResult(SignatureVersion signatureVersionToUse, IRequest iRequest, IClientConfig config, RequestMetrics metrics, ImmutableCredentials immutableCredentials, Arn arn);
    private static long GetSecondsUntilExpiration(IClientConfig config, GetPreSignedUrlRequest request, SignatureVersion signatureVersion);
    internal static void CleanupRequest(AmazonWebServiceRequest request);
    internal void ConfigureProxy(HttpWebRequest httpRequest);
    public sealed virtual string GetPreSignedURL(GetPreSignedUrlRequest request);
    [AsyncStateMachineAttribute("Amazon.S3.AmazonS3Client/<GetPreSignedURLAsync>d__12")]
public sealed virtual Task`1<string> GetPreSignedURLAsync(GetPreSignedUrlRequest request);
    private sealed virtual override string Amazon.Runtime.SharedInterfaces.ICoreAmazonS3.GeneratePreSignedURL(string bucketName, string objectKey, DateTime expiration, IDictionary`2<string, object> additionalProperties);
    [AsyncStateMachineAttribute("Amazon.S3.AmazonS3Client/<Amazon-Runtime-SharedInterfaces-ICoreAmazonS3-GetAllObjectKeysAsync>d__14")]
private sealed virtual override Task`1<IList`1<string>> Amazon.Runtime.SharedInterfaces.ICoreAmazonS3.GetAllObjectKeysAsync(string bucketName, string prefix, IDictionary`2<string, object> additionalProperties);
    private sealed virtual override Task Amazon.Runtime.SharedInterfaces.ICoreAmazonS3.DeleteAsync(string bucketName, string objectKey, IDictionary`2<string, object> additionalProperties, CancellationToken cancellationToken);
    private sealed virtual override Task Amazon.Runtime.SharedInterfaces.ICoreAmazonS3.DeletesAsync(string bucketName, IEnumerable`1<string> objectKeys, IDictionary`2<string, object> additionalProperties, CancellationToken cancellationToken);
    private sealed virtual override Task Amazon.Runtime.SharedInterfaces.ICoreAmazonS3.UploadObjectFromStreamAsync(string bucketName, string objectKey, Stream stream, IDictionary`2<string, object> additionalProperties, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Amazon.S3.AmazonS3Client/<Amazon-Runtime-SharedInterfaces-ICoreAmazonS3-GetObjectStreamAsync>d__18")]
private sealed virtual override Task`1<Stream> Amazon.Runtime.SharedInterfaces.ICoreAmazonS3.GetObjectStreamAsync(string bucketName, string objectKey, IDictionary`2<string, object> additionalProperties, CancellationToken cancellationToken);
    private sealed virtual override Task Amazon.Runtime.SharedInterfaces.ICoreAmazonS3.UploadObjectFromFilePathAsync(string bucketName, string objectKey, string filepath, IDictionary`2<string, object> additionalProperties, CancellationToken cancellationToken);
    private sealed virtual override Task Amazon.Runtime.SharedInterfaces.ICoreAmazonS3.DownloadToFilePathAsync(string bucketName, string objectKey, string filepath, IDictionary`2<string, object> additionalProperties, CancellationToken cancellationToken);
    private sealed virtual override Task Amazon.Runtime.SharedInterfaces.ICoreAmazonS3.MakeObjectPublicAsync(string bucket, string objectKey, bool enable);
    private sealed virtual override Task Amazon.Runtime.SharedInterfaces.ICoreAmazonS3.EnsureBucketExistsAsync(string bucketName);
    [ObsoleteAttribute("This method is deprecated: its behavior is inconsistent and always uses HTTP. Please use Amazon.S3.Util.AmazonS3Util.DoesS3BucketExistV2Async instead.")]
private sealed virtual override Task`1<bool> Amazon.Runtime.SharedInterfaces.ICoreAmazonS3.DoesS3BucketExistAsync(string bucketName);
    public sealed virtual IS3PaginatorFactory get_Paginators();
    protected virtual AbstractAWSSigner CreateSigner();
    protected virtual void CustomizeRuntimePipeline(RuntimePipeline pipeline);
    protected virtual IServiceMetadata get_ServiceMetadata();
    protected virtual void Dispose(bool disposing);
    internal virtual AbortMultipartUploadResponse AbortMultipartUpload(AbortMultipartUploadRequest request);
    public virtual Task`1<AbortMultipartUploadResponse> AbortMultipartUploadAsync(string bucketName, string key, string uploadId, CancellationToken cancellationToken);
    public virtual Task`1<AbortMultipartUploadResponse> AbortMultipartUploadAsync(AbortMultipartUploadRequest request, CancellationToken cancellationToken);
    internal virtual CompleteMultipartUploadResponse CompleteMultipartUpload(CompleteMultipartUploadRequest request);
    public virtual Task`1<CompleteMultipartUploadResponse> CompleteMultipartUploadAsync(CompleteMultipartUploadRequest request, CancellationToken cancellationToken);
    internal virtual CopyObjectResponse CopyObject(CopyObjectRequest request);
    public virtual Task`1<CopyObjectResponse> CopyObjectAsync(string sourceBucket, string sourceKey, string destinationBucket, string destinationKey, CancellationToken cancellationToken);
    public virtual Task`1<CopyObjectResponse> CopyObjectAsync(string sourceBucket, string sourceKey, string sourceVersionId, string destinationBucket, string destinationKey, CancellationToken cancellationToken);
    public virtual Task`1<CopyObjectResponse> CopyObjectAsync(CopyObjectRequest request, CancellationToken cancellationToken);
    internal virtual CopyPartResponse CopyPart(CopyPartRequest request);
    public virtual Task`1<CopyPartResponse> CopyPartAsync(string sourceBucket, string sourceKey, string destinationBucket, string destinationKey, string uploadId, Nullable`1<int> partNumber, CancellationToken cancellationToken);
    public virtual Task`1<CopyPartResponse> CopyPartAsync(string sourceBucket, string sourceKey, string sourceVersionId, string destinationBucket, string destinationKey, string uploadId, Nullable`1<int> partNumber, CancellationToken cancellationToken);
    public virtual Task`1<CopyPartResponse> CopyPartAsync(CopyPartRequest request, CancellationToken cancellationToken);
    internal virtual CreateSessionResponse CreateSession(CreateSessionRequest request);
    public virtual Task`1<CreateSessionResponse> CreateSessionAsync(CreateSessionRequest request, CancellationToken cancellationToken);
    internal virtual DeleteBucketResponse DeleteBucket(DeleteBucketRequest request);
    public virtual Task`1<DeleteBucketResponse> DeleteBucketAsync(string bucketName, CancellationToken cancellationToken);
    public virtual Task`1<DeleteBucketResponse> DeleteBucketAsync(DeleteBucketRequest request, CancellationToken cancellationToken);
    internal virtual DeleteBucketAnalyticsConfigurationResponse DeleteBucketAnalyticsConfiguration(DeleteBucketAnalyticsConfigurationRequest request);
    public virtual Task`1<DeleteBucketAnalyticsConfigurationResponse> DeleteBucketAnalyticsConfigurationAsync(DeleteBucketAnalyticsConfigurationRequest request, CancellationToken cancellationToken);
    internal virtual DeleteBucketEncryptionResponse DeleteBucketEncryption(DeleteBucketEncryptionRequest request);
    public virtual Task`1<DeleteBucketEncryptionResponse> DeleteBucketEncryptionAsync(DeleteBucketEncryptionRequest request, CancellationToken cancellationToken);
    internal virtual DeleteBucketIntelligentTieringConfigurationResponse DeleteBucketIntelligentTieringConfiguration(DeleteBucketIntelligentTieringConfigurationRequest request);
    public virtual Task`1<DeleteBucketIntelligentTieringConfigurationResponse> DeleteBucketIntelligentTieringConfigurationAsync(DeleteBucketIntelligentTieringConfigurationRequest request, CancellationToken cancellationToken);
    internal virtual DeleteBucketInventoryConfigurationResponse DeleteBucketInventoryConfiguration(DeleteBucketInventoryConfigurationRequest request);
    public virtual Task`1<DeleteBucketInventoryConfigurationResponse> DeleteBucketInventoryConfigurationAsync(DeleteBucketInventoryConfigurationRequest request, CancellationToken cancellationToken);
    internal virtual DeleteBucketMetricsConfigurationResponse DeleteBucketMetricsConfiguration(DeleteBucketMetricsConfigurationRequest request);
    public virtual Task`1<DeleteBucketMetricsConfigurationResponse> DeleteBucketMetricsConfigurationAsync(DeleteBucketMetricsConfigurationRequest request, CancellationToken cancellationToken);
    internal virtual DeleteBucketOwnershipControlsResponse DeleteBucketOwnershipControls(DeleteBucketOwnershipControlsRequest request);
    public virtual Task`1<DeleteBucketOwnershipControlsResponse> DeleteBucketOwnershipControlsAsync(DeleteBucketOwnershipControlsRequest request, CancellationToken cancellationToken);
    internal virtual DeleteBucketPolicyResponse DeleteBucketPolicy(DeleteBucketPolicyRequest request);
    public virtual Task`1<DeleteBucketPolicyResponse> DeleteBucketPolicyAsync(string bucketName, CancellationToken cancellationToken);
    public virtual Task`1<DeleteBucketPolicyResponse> DeleteBucketPolicyAsync(DeleteBucketPolicyRequest request, CancellationToken cancellationToken);
    internal virtual DeleteBucketReplicationResponse DeleteBucketReplication(DeleteBucketReplicationRequest request);
    public virtual Task`1<DeleteBucketReplicationResponse> DeleteBucketReplicationAsync(DeleteBucketReplicationRequest request, CancellationToken cancellationToken);
    internal virtual DeleteBucketTaggingResponse DeleteBucketTagging(DeleteBucketTaggingRequest request);
    public virtual Task`1<DeleteBucketTaggingResponse> DeleteBucketTaggingAsync(string bucketName, CancellationToken cancellationToken);
    public virtual Task`1<DeleteBucketTaggingResponse> DeleteBucketTaggingAsync(DeleteBucketTaggingRequest request, CancellationToken cancellationToken);
    internal virtual DeleteBucketWebsiteResponse DeleteBucketWebsite(DeleteBucketWebsiteRequest request);
    public virtual Task`1<DeleteBucketWebsiteResponse> DeleteBucketWebsiteAsync(string bucketName, CancellationToken cancellationToken);
    public virtual Task`1<DeleteBucketWebsiteResponse> DeleteBucketWebsiteAsync(DeleteBucketWebsiteRequest request, CancellationToken cancellationToken);
    internal virtual DeleteCORSConfigurationResponse DeleteCORSConfiguration(DeleteCORSConfigurationRequest request);
    public virtual Task`1<DeleteCORSConfigurationResponse> DeleteCORSConfigurationAsync(string bucketName, CancellationToken cancellationToken);
    public virtual Task`1<DeleteCORSConfigurationResponse> DeleteCORSConfigurationAsync(DeleteCORSConfigurationRequest request, CancellationToken cancellationToken);
    internal virtual DeleteLifecycleConfigurationResponse DeleteLifecycleConfiguration(DeleteLifecycleConfigurationRequest request);
    public virtual Task`1<DeleteLifecycleConfigurationResponse> DeleteLifecycleConfigurationAsync(string bucketName, CancellationToken cancellationToken);
    public virtual Task`1<DeleteLifecycleConfigurationResponse> DeleteLifecycleConfigurationAsync(DeleteLifecycleConfigurationRequest request, CancellationToken cancellationToken);
    internal virtual DeleteObjectResponse DeleteObject(DeleteObjectRequest request);
    public virtual Task`1<DeleteObjectResponse> DeleteObjectAsync(string bucketName, string key, CancellationToken cancellationToken);
    public virtual Task`1<DeleteObjectResponse> DeleteObjectAsync(string bucketName, string key, string versionId, CancellationToken cancellationToken);
    public virtual Task`1<DeleteObjectResponse> DeleteObjectAsync(DeleteObjectRequest request, CancellationToken cancellationToken);
    internal virtual DeleteObjectsResponse DeleteObjects(DeleteObjectsRequest request);
    public virtual Task`1<DeleteObjectsResponse> DeleteObjectsAsync(DeleteObjectsRequest request, CancellationToken cancellationToken);
    internal virtual DeleteObjectTaggingResponse DeleteObjectTagging(DeleteObjectTaggingRequest request);
    public virtual Task`1<DeleteObjectTaggingResponse> DeleteObjectTaggingAsync(DeleteObjectTaggingRequest request, CancellationToken cancellationToken);
    internal virtual DeletePublicAccessBlockResponse DeletePublicAccessBlock(DeletePublicAccessBlockRequest request);
    public virtual Task`1<DeletePublicAccessBlockResponse> DeletePublicAccessBlockAsync(DeletePublicAccessBlockRequest request, CancellationToken cancellationToken);
    internal virtual GetACLResponse GetACL(GetACLRequest request);
    public virtual Task`1<GetACLResponse> GetACLAsync(string bucketName, CancellationToken cancellationToken);
    public virtual Task`1<GetACLResponse> GetACLAsync(GetACLRequest request, CancellationToken cancellationToken);
    internal virtual GetBucketAccelerateConfigurationResponse GetBucketAccelerateConfiguration(GetBucketAccelerateConfigurationRequest request);
    public virtual Task`1<GetBucketAccelerateConfigurationResponse> GetBucketAccelerateConfigurationAsync(string bucketName, CancellationToken cancellationToken);
    public virtual Task`1<GetBucketAccelerateConfigurationResponse> GetBucketAccelerateConfigurationAsync(GetBucketAccelerateConfigurationRequest request, CancellationToken cancellationToken);
    internal virtual GetBucketAnalyticsConfigurationResponse GetBucketAnalyticsConfiguration(GetBucketAnalyticsConfigurationRequest request);
    public virtual Task`1<GetBucketAnalyticsConfigurationResponse> GetBucketAnalyticsConfigurationAsync(GetBucketAnalyticsConfigurationRequest request, CancellationToken cancellationToken);
    internal virtual GetBucketEncryptionResponse GetBucketEncryption(GetBucketEncryptionRequest request);
    public virtual Task`1<GetBucketEncryptionResponse> GetBucketEncryptionAsync(GetBucketEncryptionRequest request, CancellationToken cancellationToken);
    internal virtual GetBucketIntelligentTieringConfigurationResponse GetBucketIntelligentTieringConfiguration(GetBucketIntelligentTieringConfigurationRequest request);
    public virtual Task`1<GetBucketIntelligentTieringConfigurationResponse> GetBucketIntelligentTieringConfigurationAsync(GetBucketIntelligentTieringConfigurationRequest request, CancellationToken cancellationToken);
    internal virtual GetBucketInventoryConfigurationResponse GetBucketInventoryConfiguration(GetBucketInventoryConfigurationRequest request);
    public virtual Task`1<GetBucketInventoryConfigurationResponse> GetBucketInventoryConfigurationAsync(GetBucketInventoryConfigurationRequest request, CancellationToken cancellationToken);
    internal virtual GetBucketLocationResponse GetBucketLocation(GetBucketLocationRequest request);
    public virtual Task`1<GetBucketLocationResponse> GetBucketLocationAsync(string bucketName, CancellationToken cancellationToken);
    public virtual Task`1<GetBucketLocationResponse> GetBucketLocationAsync(GetBucketLocationRequest request, CancellationToken cancellationToken);
    internal virtual GetBucketLoggingResponse GetBucketLogging(GetBucketLoggingRequest request);
    public virtual Task`1<GetBucketLoggingResponse> GetBucketLoggingAsync(string bucketName, CancellationToken cancellationToken);
    public virtual Task`1<GetBucketLoggingResponse> GetBucketLoggingAsync(GetBucketLoggingRequest request, CancellationToken cancellationToken);
    internal virtual GetBucketMetricsConfigurationResponse GetBucketMetricsConfiguration(GetBucketMetricsConfigurationRequest request);
    public virtual Task`1<GetBucketMetricsConfigurationResponse> GetBucketMetricsConfigurationAsync(GetBucketMetricsConfigurationRequest request, CancellationToken cancellationToken);
    internal virtual GetBucketNotificationResponse GetBucketNotification(GetBucketNotificationRequest request);
    public virtual Task`1<GetBucketNotificationResponse> GetBucketNotificationAsync(string bucketName, CancellationToken cancellationToken);
    public virtual Task`1<GetBucketNotificationResponse> GetBucketNotificationAsync(GetBucketNotificationRequest request, CancellationToken cancellationToken);
    internal virtual GetBucketOwnershipControlsResponse GetBucketOwnershipControls(GetBucketOwnershipControlsRequest request);
    public virtual Task`1<GetBucketOwnershipControlsResponse> GetBucketOwnershipControlsAsync(GetBucketOwnershipControlsRequest request, CancellationToken cancellationToken);
    internal virtual GetBucketPolicyResponse GetBucketPolicy(GetBucketPolicyRequest request);
    public virtual Task`1<GetBucketPolicyResponse> GetBucketPolicyAsync(string bucketName, CancellationToken cancellationToken);
    public virtual Task`1<GetBucketPolicyResponse> GetBucketPolicyAsync(GetBucketPolicyRequest request, CancellationToken cancellationToken);
    internal virtual GetBucketPolicyStatusResponse GetBucketPolicyStatus(GetBucketPolicyStatusRequest request);
    public virtual Task`1<GetBucketPolicyStatusResponse> GetBucketPolicyStatusAsync(GetBucketPolicyStatusRequest request, CancellationToken cancellationToken);
    internal virtual GetBucketReplicationResponse GetBucketReplication(GetBucketReplicationRequest request);
    public virtual Task`1<GetBucketReplicationResponse> GetBucketReplicationAsync(GetBucketReplicationRequest request, CancellationToken cancellationToken);
    internal virtual GetBucketRequestPaymentResponse GetBucketRequestPayment(GetBucketRequestPaymentRequest request);
    public virtual Task`1<GetBucketRequestPaymentResponse> GetBucketRequestPaymentAsync(string bucketName, CancellationToken cancellationToken);
    public virtual Task`1<GetBucketRequestPaymentResponse> GetBucketRequestPaymentAsync(GetBucketRequestPaymentRequest request, CancellationToken cancellationToken);
    internal virtual GetBucketTaggingResponse GetBucketTagging(GetBucketTaggingRequest request);
    public virtual Task`1<GetBucketTaggingResponse> GetBucketTaggingAsync(GetBucketTaggingRequest request, CancellationToken cancellationToken);
    internal virtual GetBucketVersioningResponse GetBucketVersioning(GetBucketVersioningRequest request);
    public virtual Task`1<GetBucketVersioningResponse> GetBucketVersioningAsync(string bucketName, CancellationToken cancellationToken);
    public virtual Task`1<GetBucketVersioningResponse> GetBucketVersioningAsync(GetBucketVersioningRequest request, CancellationToken cancellationToken);
    internal virtual GetBucketWebsiteResponse GetBucketWebsite(GetBucketWebsiteRequest request);
    public virtual Task`1<GetBucketWebsiteResponse> GetBucketWebsiteAsync(string bucketName, CancellationToken cancellationToken);
    public virtual Task`1<GetBucketWebsiteResponse> GetBucketWebsiteAsync(GetBucketWebsiteRequest request, CancellationToken cancellationToken);
    internal virtual GetCORSConfigurationResponse GetCORSConfiguration(GetCORSConfigurationRequest request);
    public virtual Task`1<GetCORSConfigurationResponse> GetCORSConfigurationAsync(string bucketName, CancellationToken cancellationToken);
    public virtual Task`1<GetCORSConfigurationResponse> GetCORSConfigurationAsync(GetCORSConfigurationRequest request, CancellationToken cancellationToken);
    internal virtual GetLifecycleConfigurationResponse GetLifecycleConfiguration(GetLifecycleConfigurationRequest request);
    public virtual Task`1<GetLifecycleConfigurationResponse> GetLifecycleConfigurationAsync(string bucketName, CancellationToken cancellationToken);
    public virtual Task`1<GetLifecycleConfigurationResponse> GetLifecycleConfigurationAsync(GetLifecycleConfigurationRequest request, CancellationToken cancellationToken);
    internal virtual GetObjectResponse GetObject(GetObjectRequest request);
    public virtual Task`1<GetObjectResponse> GetObjectAsync(string bucketName, string key, CancellationToken cancellationToken);
    public virtual Task`1<GetObjectResponse> GetObjectAsync(string bucketName, string key, string versionId, CancellationToken cancellationToken);
    public virtual Task`1<GetObjectResponse> GetObjectAsync(GetObjectRequest request, CancellationToken cancellationToken);
    internal virtual GetObjectAttributesResponse GetObjectAttributes(GetObjectAttributesRequest request);
    public virtual Task`1<GetObjectAttributesResponse> GetObjectAttributesAsync(GetObjectAttributesRequest request, CancellationToken cancellationToken);
    internal virtual GetObjectLegalHoldResponse GetObjectLegalHold(GetObjectLegalHoldRequest request);
    public virtual Task`1<GetObjectLegalHoldResponse> GetObjectLegalHoldAsync(GetObjectLegalHoldRequest request, CancellationToken cancellationToken);
    internal virtual GetObjectLockConfigurationResponse GetObjectLockConfiguration(GetObjectLockConfigurationRequest request);
    public virtual Task`1<GetObjectLockConfigurationResponse> GetObjectLockConfigurationAsync(GetObjectLockConfigurationRequest request, CancellationToken cancellationToken);
    internal virtual GetObjectMetadataResponse GetObjectMetadata(GetObjectMetadataRequest request);
    public virtual Task`1<GetObjectMetadataResponse> GetObjectMetadataAsync(string bucketName, string key, CancellationToken cancellationToken);
    public virtual Task`1<GetObjectMetadataResponse> GetObjectMetadataAsync(string bucketName, string key, string versionId, CancellationToken cancellationToken);
    public virtual Task`1<GetObjectMetadataResponse> GetObjectMetadataAsync(GetObjectMetadataRequest request, CancellationToken cancellationToken);
    internal virtual GetObjectRetentionResponse GetObjectRetention(GetObjectRetentionRequest request);
    public virtual Task`1<GetObjectRetentionResponse> GetObjectRetentionAsync(GetObjectRetentionRequest request, CancellationToken cancellationToken);
    internal virtual GetObjectTaggingResponse GetObjectTagging(GetObjectTaggingRequest request);
    public virtual Task`1<GetObjectTaggingResponse> GetObjectTaggingAsync(GetObjectTaggingRequest request, CancellationToken cancellationToken);
    internal virtual GetObjectTorrentResponse GetObjectTorrent(GetObjectTorrentRequest request);
    public virtual Task`1<GetObjectTorrentResponse> GetObjectTorrentAsync(string bucketName, string key, CancellationToken cancellationToken);
    public virtual Task`1<GetObjectTorrentResponse> GetObjectTorrentAsync(GetObjectTorrentRequest request, CancellationToken cancellationToken);
    internal virtual GetPublicAccessBlockResponse GetPublicAccessBlock(GetPublicAccessBlockRequest request);
    public virtual Task`1<GetPublicAccessBlockResponse> GetPublicAccessBlockAsync(GetPublicAccessBlockRequest request, CancellationToken cancellationToken);
    internal virtual HeadBucketResponse HeadBucket(HeadBucketRequest request);
    internal virtual Task`1<HeadBucketResponse> HeadBucketAsync(HeadBucketRequest request, CancellationToken cancellationToken);
    internal virtual InitiateMultipartUploadResponse InitiateMultipartUpload(InitiateMultipartUploadRequest request);
    public virtual Task`1<InitiateMultipartUploadResponse> InitiateMultipartUploadAsync(string bucketName, string key, CancellationToken cancellationToken);
    public virtual Task`1<InitiateMultipartUploadResponse> InitiateMultipartUploadAsync(InitiateMultipartUploadRequest request, CancellationToken cancellationToken);
    internal virtual ListBucketAnalyticsConfigurationsResponse ListBucketAnalyticsConfigurations(ListBucketAnalyticsConfigurationsRequest request);
    public virtual Task`1<ListBucketAnalyticsConfigurationsResponse> ListBucketAnalyticsConfigurationsAsync(ListBucketAnalyticsConfigurationsRequest request, CancellationToken cancellationToken);
    internal virtual ListBucketIntelligentTieringConfigurationsResponse ListBucketIntelligentTieringConfigurations(ListBucketIntelligentTieringConfigurationsRequest request);
    public virtual Task`1<ListBucketIntelligentTieringConfigurationsResponse> ListBucketIntelligentTieringConfigurationsAsync(ListBucketIntelligentTieringConfigurationsRequest request, CancellationToken cancellationToken);
    internal virtual ListBucketInventoryConfigurationsResponse ListBucketInventoryConfigurations(ListBucketInventoryConfigurationsRequest request);
    public virtual Task`1<ListBucketInventoryConfigurationsResponse> ListBucketInventoryConfigurationsAsync(ListBucketInventoryConfigurationsRequest request, CancellationToken cancellationToken);
    internal virtual ListBucketMetricsConfigurationsResponse ListBucketMetricsConfigurations(ListBucketMetricsConfigurationsRequest request);
    public virtual Task`1<ListBucketMetricsConfigurationsResponse> ListBucketMetricsConfigurationsAsync(ListBucketMetricsConfigurationsRequest request, CancellationToken cancellationToken);
    internal virtual ListBucketsResponse ListBuckets();
    internal virtual ListBucketsResponse ListBuckets(ListBucketsRequest request);
    public virtual Task`1<ListBucketsResponse> ListBucketsAsync(CancellationToken cancellationToken);
    public virtual Task`1<ListBucketsResponse> ListBucketsAsync(ListBucketsRequest request, CancellationToken cancellationToken);
    internal virtual ListDirectoryBucketsResponse ListDirectoryBuckets(ListDirectoryBucketsRequest request);
    public virtual Task`1<ListDirectoryBucketsResponse> ListDirectoryBucketsAsync(ListDirectoryBucketsRequest request, CancellationToken cancellationToken);
    internal virtual ListMultipartUploadsResponse ListMultipartUploads(ListMultipartUploadsRequest request);
    public virtual Task`1<ListMultipartUploadsResponse> ListMultipartUploadsAsync(string bucketName, CancellationToken cancellationToken);
    public virtual Task`1<ListMultipartUploadsResponse> ListMultipartUploadsAsync(string bucketName, string prefix, CancellationToken cancellationToken);
    public virtual Task`1<ListMultipartUploadsResponse> ListMultipartUploadsAsync(ListMultipartUploadsRequest request, CancellationToken cancellationToken);
    internal virtual ListObjectsResponse ListObjects(ListObjectsRequest request);
    public virtual Task`1<ListObjectsResponse> ListObjectsAsync(string bucketName, CancellationToken cancellationToken);
    public virtual Task`1<ListObjectsResponse> ListObjectsAsync(string bucketName, string prefix, CancellationToken cancellationToken);
    public virtual Task`1<ListObjectsResponse> ListObjectsAsync(ListObjectsRequest request, CancellationToken cancellationToken);
    internal virtual ListObjectsV2Response ListObjectsV2(ListObjectsV2Request request);
    public virtual Task`1<ListObjectsV2Response> ListObjectsV2Async(ListObjectsV2Request request, CancellationToken cancellationToken);
    internal virtual ListPartsResponse ListParts(ListPartsRequest request);
    public virtual Task`1<ListPartsResponse> ListPartsAsync(string bucketName, string key, string uploadId, CancellationToken cancellationToken);
    public virtual Task`1<ListPartsResponse> ListPartsAsync(ListPartsRequest request, CancellationToken cancellationToken);
    internal virtual ListVersionsResponse ListVersions(ListVersionsRequest request);
    public virtual Task`1<ListVersionsResponse> ListVersionsAsync(string bucketName, CancellationToken cancellationToken);
    public virtual Task`1<ListVersionsResponse> ListVersionsAsync(string bucketName, string prefix, CancellationToken cancellationToken);
    public virtual Task`1<ListVersionsResponse> ListVersionsAsync(ListVersionsRequest request, CancellationToken cancellationToken);
    internal virtual PutACLResponse PutACL(PutACLRequest request);
    public virtual Task`1<PutACLResponse> PutACLAsync(PutACLRequest request, CancellationToken cancellationToken);
    internal virtual PutBucketResponse PutBucket(PutBucketRequest request);
    public virtual Task`1<PutBucketResponse> PutBucketAsync(string bucketName, CancellationToken cancellationToken);
    public virtual Task`1<PutBucketResponse> PutBucketAsync(PutBucketRequest request, CancellationToken cancellationToken);
    internal virtual PutBucketAccelerateConfigurationResponse PutBucketAccelerateConfiguration(PutBucketAccelerateConfigurationRequest request);
    public virtual Task`1<PutBucketAccelerateConfigurationResponse> PutBucketAccelerateConfigurationAsync(PutBucketAccelerateConfigurationRequest request, CancellationToken cancellationToken);
    internal virtual PutBucketAnalyticsConfigurationResponse PutBucketAnalyticsConfiguration(PutBucketAnalyticsConfigurationRequest request);
    public virtual Task`1<PutBucketAnalyticsConfigurationResponse> PutBucketAnalyticsConfigurationAsync(PutBucketAnalyticsConfigurationRequest request, CancellationToken cancellationToken);
    internal virtual PutBucketEncryptionResponse PutBucketEncryption(PutBucketEncryptionRequest request);
    public virtual Task`1<PutBucketEncryptionResponse> PutBucketEncryptionAsync(PutBucketEncryptionRequest request, CancellationToken cancellationToken);
    internal virtual PutBucketIntelligentTieringConfigurationResponse PutBucketIntelligentTieringConfiguration(PutBucketIntelligentTieringConfigurationRequest request);
    public virtual Task`1<PutBucketIntelligentTieringConfigurationResponse> PutBucketIntelligentTieringConfigurationAsync(PutBucketIntelligentTieringConfigurationRequest request, CancellationToken cancellationToken);
    internal virtual PutBucketInventoryConfigurationResponse PutBucketInventoryConfiguration(PutBucketInventoryConfigurationRequest request);
    public virtual Task`1<PutBucketInventoryConfigurationResponse> PutBucketInventoryConfigurationAsync(PutBucketInventoryConfigurationRequest request, CancellationToken cancellationToken);
    internal virtual PutBucketLoggingResponse PutBucketLogging(PutBucketLoggingRequest request);
    public virtual Task`1<PutBucketLoggingResponse> PutBucketLoggingAsync(PutBucketLoggingRequest request, CancellationToken cancellationToken);
    internal virtual PutBucketMetricsConfigurationResponse PutBucketMetricsConfiguration(PutBucketMetricsConfigurationRequest request);
    public virtual Task`1<PutBucketMetricsConfigurationResponse> PutBucketMetricsConfigurationAsync(PutBucketMetricsConfigurationRequest request, CancellationToken cancellationToken);
    internal virtual PutBucketNotificationResponse PutBucketNotification(PutBucketNotificationRequest request);
    public virtual Task`1<PutBucketNotificationResponse> PutBucketNotificationAsync(PutBucketNotificationRequest request, CancellationToken cancellationToken);
    internal virtual PutBucketOwnershipControlsResponse PutBucketOwnershipControls(PutBucketOwnershipControlsRequest request);
    public virtual Task`1<PutBucketOwnershipControlsResponse> PutBucketOwnershipControlsAsync(PutBucketOwnershipControlsRequest request, CancellationToken cancellationToken);
    internal virtual PutBucketPolicyResponse PutBucketPolicy(PutBucketPolicyRequest request);
    public virtual Task`1<PutBucketPolicyResponse> PutBucketPolicyAsync(string bucketName, string policy, CancellationToken cancellationToken);
    public virtual Task`1<PutBucketPolicyResponse> PutBucketPolicyAsync(string bucketName, string policy, string contentMD5, CancellationToken cancellationToken);
    public virtual Task`1<PutBucketPolicyResponse> PutBucketPolicyAsync(PutBucketPolicyRequest request, CancellationToken cancellationToken);
    internal virtual PutBucketReplicationResponse PutBucketReplication(PutBucketReplicationRequest request);
    public virtual Task`1<PutBucketReplicationResponse> PutBucketReplicationAsync(PutBucketReplicationRequest request, CancellationToken cancellationToken);
    internal virtual PutBucketRequestPaymentResponse PutBucketRequestPayment(PutBucketRequestPaymentRequest request);
    public virtual Task`1<PutBucketRequestPaymentResponse> PutBucketRequestPaymentAsync(string bucketName, RequestPaymentConfiguration requestPaymentConfiguration, CancellationToken cancellationToken);
    public virtual Task`1<PutBucketRequestPaymentResponse> PutBucketRequestPaymentAsync(PutBucketRequestPaymentRequest request, CancellationToken cancellationToken);
    internal virtual PutBucketTaggingResponse PutBucketTagging(PutBucketTaggingRequest request);
    public virtual Task`1<PutBucketTaggingResponse> PutBucketTaggingAsync(string bucketName, List`1<Tag> tagSet, CancellationToken cancellationToken);
    public virtual Task`1<PutBucketTaggingResponse> PutBucketTaggingAsync(PutBucketTaggingRequest request, CancellationToken cancellationToken);
    internal virtual PutBucketVersioningResponse PutBucketVersioning(PutBucketVersioningRequest request);
    public virtual Task`1<PutBucketVersioningResponse> PutBucketVersioningAsync(PutBucketVersioningRequest request, CancellationToken cancellationToken);
    internal virtual PutBucketWebsiteResponse PutBucketWebsite(PutBucketWebsiteRequest request);
    public virtual Task`1<PutBucketWebsiteResponse> PutBucketWebsiteAsync(string bucketName, WebsiteConfiguration websiteConfiguration, CancellationToken cancellationToken);
    public virtual Task`1<PutBucketWebsiteResponse> PutBucketWebsiteAsync(PutBucketWebsiteRequest request, CancellationToken cancellationToken);
    internal virtual PutCORSConfigurationResponse PutCORSConfiguration(PutCORSConfigurationRequest request);
    public virtual Task`1<PutCORSConfigurationResponse> PutCORSConfigurationAsync(string bucketName, CORSConfiguration configuration, CancellationToken cancellationToken);
    public virtual Task`1<PutCORSConfigurationResponse> PutCORSConfigurationAsync(PutCORSConfigurationRequest request, CancellationToken cancellationToken);
    internal virtual PutLifecycleConfigurationResponse PutLifecycleConfiguration(PutLifecycleConfigurationRequest request);
    public virtual Task`1<PutLifecycleConfigurationResponse> PutLifecycleConfigurationAsync(string bucketName, LifecycleConfiguration configuration, CancellationToken cancellationToken);
    public virtual Task`1<PutLifecycleConfigurationResponse> PutLifecycleConfigurationAsync(PutLifecycleConfigurationRequest request, CancellationToken cancellationToken);
    internal virtual PutObjectResponse PutObject(PutObjectRequest request);
    public virtual Task`1<PutObjectResponse> PutObjectAsync(PutObjectRequest request, CancellationToken cancellationToken);
    internal virtual PutObjectLegalHoldResponse PutObjectLegalHold(PutObjectLegalHoldRequest request);
    public virtual Task`1<PutObjectLegalHoldResponse> PutObjectLegalHoldAsync(PutObjectLegalHoldRequest request, CancellationToken cancellationToken);
    internal virtual PutObjectLockConfigurationResponse PutObjectLockConfiguration(PutObjectLockConfigurationRequest request);
    public virtual Task`1<PutObjectLockConfigurationResponse> PutObjectLockConfigurationAsync(PutObjectLockConfigurationRequest request, CancellationToken cancellationToken);
    internal virtual PutObjectRetentionResponse PutObjectRetention(PutObjectRetentionRequest request);
    public virtual Task`1<PutObjectRetentionResponse> PutObjectRetentionAsync(PutObjectRetentionRequest request, CancellationToken cancellationToken);
    internal virtual PutObjectTaggingResponse PutObjectTagging(PutObjectTaggingRequest request);
    public virtual Task`1<PutObjectTaggingResponse> PutObjectTaggingAsync(PutObjectTaggingRequest request, CancellationToken cancellationToken);
    internal virtual PutPublicAccessBlockResponse PutPublicAccessBlock(PutPublicAccessBlockRequest request);
    public virtual Task`1<PutPublicAccessBlockResponse> PutPublicAccessBlockAsync(PutPublicAccessBlockRequest request, CancellationToken cancellationToken);
    internal virtual RestoreObjectResponse RestoreObject(RestoreObjectRequest request);
    public virtual Task`1<RestoreObjectResponse> RestoreObjectAsync(string bucketName, string key, CancellationToken cancellationToken);
    public virtual Task`1<RestoreObjectResponse> RestoreObjectAsync(string bucketName, string key, Nullable`1<int> days, CancellationToken cancellationToken);
    public virtual Task`1<RestoreObjectResponse> RestoreObjectAsync(string bucketName, string key, string versionId, CancellationToken cancellationToken);
    public virtual Task`1<RestoreObjectResponse> RestoreObjectAsync(string bucketName, string key, string versionId, Nullable`1<int> days, CancellationToken cancellationToken);
    public virtual Task`1<RestoreObjectResponse> RestoreObjectAsync(RestoreObjectRequest request, CancellationToken cancellationToken);
    internal virtual SelectObjectContentResponse SelectObjectContent(SelectObjectContentRequest request);
    public virtual Task`1<SelectObjectContentResponse> SelectObjectContentAsync(SelectObjectContentRequest request, CancellationToken cancellationToken);
    internal virtual UploadPartResponse UploadPart(UploadPartRequest request);
    public virtual Task`1<UploadPartResponse> UploadPartAsync(UploadPartRequest request, CancellationToken cancellationToken);
    internal virtual WriteGetObjectResponseResponse WriteGetObjectResponse(WriteGetObjectResponseRequest request);
    public virtual Task`1<WriteGetObjectResponseResponse> WriteGetObjectResponseAsync(WriteGetObjectResponseRequest request, CancellationToken cancellationToken);
    public sealed virtual Endpoint DetermineServiceOperationEndpoint(AmazonWebServiceRequest request);
    private sealed virtual override IClientConfig Amazon.Runtime.IAmazonService.get_Config();
}
[AWSSignerTypeAttribute("s3")]
public class Amazon.S3.AmazonS3Config : ClientConfig {
    private static string UseArnRegionEnvName;
    private static string DisableS3ExpressSessionAuthEnvName;
    private static string AccelerateEndpointSuffix;
    private static string AccelerateDualstackEndpointSuffix;
    private static string AwsProfileEnvironmentVariable;
    private static string DefaultProfileName;
    private static string AwsS3UsEast1RegionalEndpointsEnvironmentVariable;
    private static string DisableMRAPEnvName;
    private bool forcePathStyle;
    private bool useAccelerateEndpoint;
    private Nullable`1<S3UsEast1RegionalEndpointValue> s3UsEast1RegionalEndpointValue;
    private string legacyUSEast1GlobalRegionSystemName;
    private static CredentialProfileStoreChain credentialProfileChain;
    private static CredentialProfile _profile;
    private static object _triedToResolveProfileLock;
    private static bool _triedToResolveProfile;
    private IS3ExpressCredentialProvider s3ExpressCredentialProvider;
    private Nullable`1<bool> _useArnRegion;
    private object _useArnRegionLock;
    private Nullable`1<bool> _disableS3ExpressSessionAuth;
    private object _disableS3ExpressSessionAuthLock;
    private Nullable`1<bool> _disableMultiregionAccessPoints;
    private static string UserAgentString;
    private static AmazonS3EndpointResolver EndpointResolver;
    private string _userAgent;
    public IS3ExpressCredentialProvider S3ExpressCredentialProvider { get; public set; }
    public bool ForcePathStyle { get; public set; }
    public bool UseAccelerateEndpoint { get; public set; }
    public bool UseArnRegion { get; public set; }
    public bool DisableS3ExpressSessionAuth { get; public set; }
    public bool DisableMultiregionAccessPoints { get; public set; }
    public Nullable`1<S3UsEast1RegionalEndpointValue> USEast1RegionalEndpointValue { get; public set; }
    internal string AccelerateEndpoint { get; }
    public static string ServiceId { get; }
    public string RegionEndpointServiceName { get; }
    public string ServiceVersion { get; }
    public string UserAgent { get; }
    private static AmazonS3Config();
    public IS3ExpressCredentialProvider get_S3ExpressCredentialProvider();
    public void set_S3ExpressCredentialProvider(IS3ExpressCredentialProvider value);
    public bool get_ForcePathStyle();
    public void set_ForcePathStyle(bool value);
    public bool get_UseAccelerateEndpoint();
    public void set_UseAccelerateEndpoint(bool value);
    public bool get_UseArnRegion();
    public void set_UseArnRegion(bool value);
    public bool get_DisableS3ExpressSessionAuth();
    public void set_DisableS3ExpressSessionAuth(bool value);
    private static void ResolveCredentialProfile();
    public bool get_DisableMultiregionAccessPoints();
    public void set_DisableMultiregionAccessPoints(bool value);
    public Nullable`1<S3UsEast1RegionalEndpointValue> get_USEast1RegionalEndpointValue();
    public void set_USEast1RegionalEndpointValue(Nullable`1<S3UsEast1RegionalEndpointValue> value);
    protected virtual void Initialize();
    private Nullable`1<S3UsEast1RegionalEndpointValue> GetEndpointFlagValueForUsEast1Regional();
    public virtual void Validate();
    private static Nullable`1<S3UsEast1RegionalEndpointValue> CheckS3EnvironmentVariable();
    private static Nullable`1<S3UsEast1RegionalEndpointValue> CheckCredentialsFile();
    private static Nullable`1<bool> CheckDisableMRAPEnvironmentVariable();
    private static Nullable`1<bool> CheckDisableMRAPCredentialsFile();
    internal string get_AccelerateEndpoint();
    public static string get_ServiceId();
    public virtual string get_RegionEndpointServiceName();
    public virtual string get_ServiceVersion();
    public virtual string get_UserAgent();
    public virtual Endpoint DetermineServiceOperationEndpoint(ServiceOperationEndpointParameters parameters);
}
public static class Amazon.S3.AmazonS3DefaultConfiguration : object {
    [CompilerGeneratedAttribute]
private static IDefaultConfiguration <Standard>k__BackingField;
    [CompilerGeneratedAttribute]
private static IDefaultConfiguration <InRegion>k__BackingField;
    [CompilerGeneratedAttribute]
private static IDefaultConfiguration <CrossRegion>k__BackingField;
    [CompilerGeneratedAttribute]
private static IDefaultConfiguration <Mobile>k__BackingField;
    [CompilerGeneratedAttribute]
private static IDefaultConfiguration <Auto>k__BackingField;
    public static IDefaultConfiguration Standard { get; }
    public static IDefaultConfiguration InRegion { get; }
    public static IDefaultConfiguration CrossRegion { get; }
    public static IDefaultConfiguration Mobile { get; }
    public static IDefaultConfiguration Auto { get; }
    private static AmazonS3DefaultConfiguration();
    public static ReadOnlyCollection`1<IDefaultConfiguration> GetAllConfigurations();
    [CompilerGeneratedAttribute]
public static IDefaultConfiguration get_Standard();
    [CompilerGeneratedAttribute]
public static IDefaultConfiguration get_InRegion();
    [CompilerGeneratedAttribute]
public static IDefaultConfiguration get_CrossRegion();
    [CompilerGeneratedAttribute]
public static IDefaultConfiguration get_Mobile();
    [CompilerGeneratedAttribute]
public static IDefaultConfiguration get_Auto();
}
public class Amazon.S3.AmazonS3Exception : AmazonServiceException {
    [CompilerGeneratedAttribute]
private string <AmazonId2>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AmazonCloudFrontId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ResponseBody>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Region>k__BackingField;
    public string AmazonId2 { get; protected set; }
    public string AmazonCloudFrontId { get; protected set; }
    public string ResponseBody { get; internal set; }
    internal string Region { get; internal set; }
    public string Message { get; }
    public AmazonS3Exception(string message);
    public AmazonS3Exception(string message, Exception innerException);
    public AmazonS3Exception(Exception innerException);
    public AmazonS3Exception(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public AmazonS3Exception(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public AmazonS3Exception(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode, string amazonId2);
    public AmazonS3Exception(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode, string amazonId2, string amazonCfId);
    [CompilerGeneratedAttribute]
public string get_AmazonId2();
    [CompilerGeneratedAttribute]
protected void set_AmazonId2(string value);
    [CompilerGeneratedAttribute]
public string get_AmazonCloudFrontId();
    [CompilerGeneratedAttribute]
protected void set_AmazonCloudFrontId(string value);
    [CompilerGeneratedAttribute]
public string get_ResponseBody();
    [CompilerGeneratedAttribute]
internal void set_ResponseBody(string value);
    [CompilerGeneratedAttribute]
internal string get_Region();
    [CompilerGeneratedAttribute]
internal void set_Region(string value);
    public virtual string get_Message();
}
internal static class Amazon.S3.AmazonS3HttpUtil : object {
    [AsyncStateMachineAttribute("Amazon.S3.AmazonS3HttpUtil/<GetHeadAsync>d__0")]
internal static Task`1<GetHeadResponse> GetHeadAsync(IAmazonS3 s3Client, IClientConfig config, string url, string header);
    internal static GetHeadResponse GetHead(IAmazonS3 s3Client, IClientConfig config, string url, string header);
    internal static HttpWebRequest GetHeadHttpRequest(IClientConfig config, string url);
    private static GetHeadResponse HandleWebResponse(string header, HttpWebResponse httpResponse);
    private static GetHeadResponse HandleWebException(string header, WebException we);
    private static void SetProxyIfAvailableAndConfigured(IClientConfig config, HttpWebRequest httpWebRequest);
}
public class Amazon.S3.AnalyticsS3ExportFileFormat : ConstantClass {
    public static AnalyticsS3ExportFileFormat CSV;
    public AnalyticsS3ExportFileFormat(string value);
    private static AnalyticsS3ExportFileFormat();
    public static AnalyticsS3ExportFileFormat FindValue(string value);
    public static AnalyticsS3ExportFileFormat op_Implicit(string value);
}
public class Amazon.S3.ArchiveStatus : ConstantClass {
    public static ArchiveStatus ARCHIVE_ACCESS;
    public static ArchiveStatus DEEP_ARCHIVE_ACCESS;
    public ArchiveStatus(string value);
    private static ArchiveStatus();
    public static ArchiveStatus FindValue(string value);
    public static ArchiveStatus op_Implicit(string value);
}
[ExtensionAttribute]
public static class Amazon.S3.ArnExtensions : object {
    internal static string ResourceTypeAccessPoint;
    internal static string ResourceTypeBucketName;
    internal static string ResourceTypeOutpostAccessPoint;
    [ExtensionAttribute]
public static bool TryParseAccessPoint(Arn arn, String& accessPoint);
    [ExtensionAttribute]
public static bool TryParseBucket(Arn arn, String& bucketName);
    [ExtensionAttribute]
public static bool IsOutpostArn(Arn arn);
    [ExtensionAttribute]
public static bool IsService(Arn arn, string serviceName);
    [ExtensionAttribute]
public static bool IsMRAPArn(Arn arn);
    [ExtensionAttribute]
public static S3OutpostResource ParseOutpost(Arn arn);
    [ExtensionAttribute]
public static bool HasValidAccountId(Arn arn);
}
public class Amazon.S3.BucketAccelerateStatus : ConstantClass {
    public static BucketAccelerateStatus Enabled;
    public static BucketAccelerateStatus Suspended;
    public BucketAccelerateStatus(string value);
    private static BucketAccelerateStatus();
    public static BucketAccelerateStatus FindValue(string value);
    public static BucketAccelerateStatus op_Implicit(string value);
}
public class Amazon.S3.BucketType : ConstantClass {
    public static BucketType Directory;
    public BucketType(string value);
    private static BucketType();
    public static BucketType FindValue(string value);
    public static BucketType op_Implicit(string value);
}
public class Amazon.S3.ChecksumAlgorithm : ConstantClass {
    public static ChecksumAlgorithm CRC32;
    public static ChecksumAlgorithm CRC32C;
    public static ChecksumAlgorithm SHA1;
    public static ChecksumAlgorithm SHA256;
    public ChecksumAlgorithm(string value);
    private static ChecksumAlgorithm();
    public static ChecksumAlgorithm FindValue(string value);
    public static ChecksumAlgorithm op_Implicit(string value);
}
public class Amazon.S3.ChecksumMode : ConstantClass {
    public static ChecksumMode ENABLED;
    public ChecksumMode(string value);
    private static ChecksumMode();
    public static ChecksumMode FindValue(string value);
    public static ChecksumMode op_Implicit(string value);
}
public class Amazon.S3.CompressionType : ConstantClass {
    public static CompressionType None;
    public static CompressionType Gzip;
    public static CompressionType Bzip2;
    public CompressionType(string value);
    private static CompressionType();
    public static CompressionType FindValue(string value);
    public static CompressionType op_Implicit(string value);
}
public class Amazon.S3.DataRedundancy : ConstantClass {
    public static DataRedundancy SingleAvailabilityZone;
    public DataRedundancy(string value);
    private static DataRedundancy();
    public static DataRedundancy FindValue(string value);
    public static DataRedundancy op_Implicit(string value);
}
public class Amazon.S3.DeleteMarkerReplicationStatus : ConstantClass {
    public static DeleteMarkerReplicationStatus Enabled;
    public static DeleteMarkerReplicationStatus Disabled;
    public DeleteMarkerReplicationStatus(string value);
    private static DeleteMarkerReplicationStatus();
    public static DeleteMarkerReplicationStatus FindValue(string value);
    public static DeleteMarkerReplicationStatus op_Implicit(string value);
}
public class Amazon.S3.DeleteObjectsException : AmazonS3Exception {
    private DeleteObjectsResponse response;
    public DeleteObjectsResponse Response { get; public set; }
    public DeleteObjectsException(DeleteObjectsResponse response);
    public DeleteObjectsResponse get_Response();
    public void set_Response(DeleteObjectsResponse value);
    private static string CreateMessage(DeleteObjectsResponse response);
}
public class Amazon.S3.EncodingType : ConstantClass {
    public static EncodingType Url;
    public EncodingType(string value);
    private static EncodingType();
    public static EncodingType FindValue(string value);
    public static EncodingType op_Implicit(string value);
}
public class Amazon.S3.Endpoints.S3EndpointParameters : EndpointParameters {
    public string Bucket { get; public set; }
    public string Region { get; public set; }
    public Nullable`1<bool> UseFIPS { get; public set; }
    public Nullable`1<bool> UseDualStack { get; public set; }
    public string Endpoint { get; public set; }
    public Nullable`1<bool> ForcePathStyle { get; public set; }
    public Nullable`1<bool> Accelerate { get; public set; }
    public Nullable`1<bool> UseGlobalEndpoint { get; public set; }
    public Nullable`1<bool> UseObjectLambdaEndpoint { get; public set; }
    public string Key { get; public set; }
    public string Prefix { get; public set; }
    public string CopySource { get; public set; }
    public Nullable`1<bool> DisableAccessPoints { get; public set; }
    public Nullable`1<bool> DisableMultiRegionAccessPoints { get; public set; }
    public Nullable`1<bool> UseArnRegion { get; public set; }
    public Nullable`1<bool> UseS3ExpressControlEndpoint { get; public set; }
    public Nullable`1<bool> DisableS3ExpressSessionAuth { get; public set; }
    public string get_Bucket();
    public void set_Bucket(string value);
    public string get_Region();
    public void set_Region(string value);
    public Nullable`1<bool> get_UseFIPS();
    public void set_UseFIPS(Nullable`1<bool> value);
    public Nullable`1<bool> get_UseDualStack();
    public void set_UseDualStack(Nullable`1<bool> value);
    public string get_Endpoint();
    public void set_Endpoint(string value);
    public Nullable`1<bool> get_ForcePathStyle();
    public void set_ForcePathStyle(Nullable`1<bool> value);
    public Nullable`1<bool> get_Accelerate();
    public void set_Accelerate(Nullable`1<bool> value);
    public Nullable`1<bool> get_UseGlobalEndpoint();
    public void set_UseGlobalEndpoint(Nullable`1<bool> value);
    public Nullable`1<bool> get_UseObjectLambdaEndpoint();
    public void set_UseObjectLambdaEndpoint(Nullable`1<bool> value);
    public string get_Key();
    public void set_Key(string value);
    public string get_Prefix();
    public void set_Prefix(string value);
    public string get_CopySource();
    public void set_CopySource(string value);
    public Nullable`1<bool> get_DisableAccessPoints();
    public void set_DisableAccessPoints(Nullable`1<bool> value);
    public Nullable`1<bool> get_DisableMultiRegionAccessPoints();
    public void set_DisableMultiRegionAccessPoints(Nullable`1<bool> value);
    public Nullable`1<bool> get_UseArnRegion();
    public void set_UseArnRegion(Nullable`1<bool> value);
    public Nullable`1<bool> get_UseS3ExpressControlEndpoint();
    public void set_UseS3ExpressControlEndpoint(Nullable`1<bool> value);
    public Nullable`1<bool> get_DisableS3ExpressSessionAuth();
    public void set_DisableS3ExpressSessionAuth(Nullable`1<bool> value);
}
public class Amazon.S3.EventType : ConstantClass {
    public static EventType ObjectCreatedAll;
    public static EventType ObjectCreatedPut;
    public static EventType ObjectCreatedPost;
    public static EventType ObjectCreatedCopy;
    public static EventType ObjectCreatedCompleteMultipartUpload;
    public static EventType ObjectRemovedAll;
    public static EventType ObjectRemovedDelete;
    public static EventType ObjectRemovedDeleteMarkerCreated;
    public static EventType ReducedRedundancyLostObject;
    public static EventType ObjectRestoreAll;
    public static EventType ObjectRestorePost;
    public static EventType ObjectRestoreCompleted;
    public static EventType ReplicationAll;
    public static EventType ReplicationOperationFailedReplication;
    public static EventType ReplicationOperationNotTracked;
    public static EventType ReplicationOperationMissedThreshold;
    public static EventType ReplicationOperationReplicatedAfterThreshold;
    public static EventType S3IntelligentTiering;
    public static EventType S3LifecycleExpirationAll;
    public static EventType S3LifecycleExpirationDelete;
    public static EventType S3LifecycleExpirationDeleteMarkerCreated;
    public static EventType S3LifecycleTransition;
    public static EventType S3ObjectAclPut;
    public static EventType S3ObjectRestoreDelete;
    public static EventType S3ObjectTaggingAll;
    public static EventType S3ObjectTaggingDelete;
    public static EventType S3ObjectTaggingPut;
    public EventType(string value);
    private static EventType();
    public static EventType FindValue(string value);
    public static EventType op_Implicit(string value);
    public virtual bool Equals(ConstantClass obj);
    protected virtual bool Equals(string value);
}
public class Amazon.S3.ExistingObjectReplicationStatus : ConstantClass {
    public static ExistingObjectReplicationStatus Enabled;
    public static ExistingObjectReplicationStatus Disabled;
    public ExistingObjectReplicationStatus(string value);
    private static ExistingObjectReplicationStatus();
    public static ExistingObjectReplicationStatus FindValue(string value);
    public static ExistingObjectReplicationStatus op_Implicit(string value);
}
public class Amazon.S3.ExpressionType : ConstantClass {
    public static ExpressionType SQL;
    public ExpressionType(string value);
    private static ExpressionType();
    public static ExpressionType FindValue(string value);
    public static ExpressionType op_Implicit(string value);
}
public class Amazon.S3.FileHeaderInfo : ConstantClass {
    public static FileHeaderInfo Use;
    public static FileHeaderInfo Ignore;
    public static FileHeaderInfo None;
    public FileHeaderInfo(string value);
    private static FileHeaderInfo();
    public static FileHeaderInfo FindValue(string value);
    public static FileHeaderInfo op_Implicit(string value);
}
internal class Amazon.S3.GetHeadResponse : object {
    [CompilerGeneratedAttribute]
private Nullable`1<HttpStatusCode> <StatusCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HeaderValue>k__BackingField;
    public Nullable`1<HttpStatusCode> StatusCode { get; public set; }
    public string HeaderValue { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<HttpStatusCode> get_StatusCode();
    [CompilerGeneratedAttribute]
public void set_StatusCode(Nullable`1<HttpStatusCode> value);
    [CompilerGeneratedAttribute]
public string get_HeaderValue();
    [CompilerGeneratedAttribute]
public void set_HeaderValue(string value);
}
public class Amazon.S3.GlacierJobTier : ConstantClass {
    public static GlacierJobTier Standard;
    public static GlacierJobTier Bulk;
    public static GlacierJobTier Expedited;
    public GlacierJobTier(string value);
    private static GlacierJobTier();
    public static GlacierJobTier FindValue(string value);
    public static GlacierJobTier op_Implicit(string value);
}
public class Amazon.S3.GranteeType : ConstantClass {
    public static GranteeType Group;
    public static GranteeType Email;
    public static GranteeType CanonicalUser;
    public GranteeType(string value);
    private static GranteeType();
    public static GranteeType FindValue(string value);
    public static GranteeType op_Implicit(string value);
}
public enum Amazon.S3.HttpVerb : Enum {
    public int value__;
    public static HttpVerb GET;
    public static HttpVerb HEAD;
    public static HttpVerb PUT;
    public static HttpVerb DELETE;
}
public interface Amazon.S3.IAmazonS3 {
    public IS3PaginatorFactory Paginators { get; }
    public abstract virtual string GetPreSignedURL(GetPreSignedUrlRequest request);
    public abstract virtual Task`1<string> GetPreSignedURLAsync(GetPreSignedUrlRequest request);
    public abstract virtual IS3PaginatorFactory get_Paginators();
    public abstract virtual Task`1<AbortMultipartUploadResponse> AbortMultipartUploadAsync(string bucketName, string key, string uploadId, CancellationToken cancellationToken);
    public abstract virtual Task`1<AbortMultipartUploadResponse> AbortMultipartUploadAsync(AbortMultipartUploadRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<CompleteMultipartUploadResponse> CompleteMultipartUploadAsync(CompleteMultipartUploadRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<CopyObjectResponse> CopyObjectAsync(string sourceBucket, string sourceKey, string destinationBucket, string destinationKey, CancellationToken cancellationToken);
    public abstract virtual Task`1<CopyObjectResponse> CopyObjectAsync(string sourceBucket, string sourceKey, string sourceVersionId, string destinationBucket, string destinationKey, CancellationToken cancellationToken);
    public abstract virtual Task`1<CopyObjectResponse> CopyObjectAsync(CopyObjectRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<CopyPartResponse> CopyPartAsync(string sourceBucket, string sourceKey, string destinationBucket, string destinationKey, string uploadId, Nullable`1<int> partNumber, CancellationToken cancellationToken);
    public abstract virtual Task`1<CopyPartResponse> CopyPartAsync(string sourceBucket, string sourceKey, string sourceVersionId, string destinationBucket, string destinationKey, string uploadId, Nullable`1<int> partNumber, CancellationToken cancellationToken);
    public abstract virtual Task`1<CopyPartResponse> CopyPartAsync(CopyPartRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<CreateSessionResponse> CreateSessionAsync(CreateSessionRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeleteBucketResponse> DeleteBucketAsync(string bucketName, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeleteBucketResponse> DeleteBucketAsync(DeleteBucketRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeleteBucketAnalyticsConfigurationResponse> DeleteBucketAnalyticsConfigurationAsync(DeleteBucketAnalyticsConfigurationRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeleteBucketEncryptionResponse> DeleteBucketEncryptionAsync(DeleteBucketEncryptionRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeleteBucketIntelligentTieringConfigurationResponse> DeleteBucketIntelligentTieringConfigurationAsync(DeleteBucketIntelligentTieringConfigurationRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeleteBucketInventoryConfigurationResponse> DeleteBucketInventoryConfigurationAsync(DeleteBucketInventoryConfigurationRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeleteBucketMetricsConfigurationResponse> DeleteBucketMetricsConfigurationAsync(DeleteBucketMetricsConfigurationRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeleteBucketOwnershipControlsResponse> DeleteBucketOwnershipControlsAsync(DeleteBucketOwnershipControlsRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeleteBucketPolicyResponse> DeleteBucketPolicyAsync(string bucketName, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeleteBucketPolicyResponse> DeleteBucketPolicyAsync(DeleteBucketPolicyRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeleteBucketReplicationResponse> DeleteBucketReplicationAsync(DeleteBucketReplicationRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeleteBucketTaggingResponse> DeleteBucketTaggingAsync(string bucketName, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeleteBucketTaggingResponse> DeleteBucketTaggingAsync(DeleteBucketTaggingRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeleteBucketWebsiteResponse> DeleteBucketWebsiteAsync(string bucketName, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeleteBucketWebsiteResponse> DeleteBucketWebsiteAsync(DeleteBucketWebsiteRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeleteCORSConfigurationResponse> DeleteCORSConfigurationAsync(string bucketName, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeleteCORSConfigurationResponse> DeleteCORSConfigurationAsync(DeleteCORSConfigurationRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeleteLifecycleConfigurationResponse> DeleteLifecycleConfigurationAsync(string bucketName, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeleteLifecycleConfigurationResponse> DeleteLifecycleConfigurationAsync(DeleteLifecycleConfigurationRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeleteObjectResponse> DeleteObjectAsync(string bucketName, string key, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeleteObjectResponse> DeleteObjectAsync(string bucketName, string key, string versionId, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeleteObjectResponse> DeleteObjectAsync(DeleteObjectRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeleteObjectsResponse> DeleteObjectsAsync(DeleteObjectsRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeleteObjectTaggingResponse> DeleteObjectTaggingAsync(DeleteObjectTaggingRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeletePublicAccessBlockResponse> DeletePublicAccessBlockAsync(DeletePublicAccessBlockRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<GetACLResponse> GetACLAsync(string bucketName, CancellationToken cancellationToken);
    public abstract virtual Task`1<GetACLResponse> GetACLAsync(GetACLRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<GetBucketAccelerateConfigurationResponse> GetBucketAccelerateConfigurationAsync(string bucketName, CancellationToken cancellationToken);
    public abstract virtual Task`1<GetBucketAccelerateConfigurationResponse> GetBucketAccelerateConfigurationAsync(GetBucketAccelerateConfigurationRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<GetBucketAnalyticsConfigurationResponse> GetBucketAnalyticsConfigurationAsync(GetBucketAnalyticsConfigurationRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<GetBucketEncryptionResponse> GetBucketEncryptionAsync(GetBucketEncryptionRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<GetBucketIntelligentTieringConfigurationResponse> GetBucketIntelligentTieringConfigurationAsync(GetBucketIntelligentTieringConfigurationRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<GetBucketInventoryConfigurationResponse> GetBucketInventoryConfigurationAsync(GetBucketInventoryConfigurationRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<GetBucketLocationResponse> GetBucketLocationAsync(string bucketName, CancellationToken cancellationToken);
    public abstract virtual Task`1<GetBucketLocationResponse> GetBucketLocationAsync(GetBucketLocationRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<GetBucketLoggingResponse> GetBucketLoggingAsync(string bucketName, CancellationToken cancellationToken);
    public abstract virtual Task`1<GetBucketLoggingResponse> GetBucketLoggingAsync(GetBucketLoggingRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<GetBucketMetricsConfigurationResponse> GetBucketMetricsConfigurationAsync(GetBucketMetricsConfigurationRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<GetBucketNotificationResponse> GetBucketNotificationAsync(string bucketName, CancellationToken cancellationToken);
    public abstract virtual Task`1<GetBucketNotificationResponse> GetBucketNotificationAsync(GetBucketNotificationRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<GetBucketOwnershipControlsResponse> GetBucketOwnershipControlsAsync(GetBucketOwnershipControlsRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<GetBucketPolicyResponse> GetBucketPolicyAsync(string bucketName, CancellationToken cancellationToken);
    public abstract virtual Task`1<GetBucketPolicyResponse> GetBucketPolicyAsync(GetBucketPolicyRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<GetBucketPolicyStatusResponse> GetBucketPolicyStatusAsync(GetBucketPolicyStatusRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<GetBucketReplicationResponse> GetBucketReplicationAsync(GetBucketReplicationRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<GetBucketRequestPaymentResponse> GetBucketRequestPaymentAsync(string bucketName, CancellationToken cancellationToken);
    public abstract virtual Task`1<GetBucketRequestPaymentResponse> GetBucketRequestPaymentAsync(GetBucketRequestPaymentRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<GetBucketTaggingResponse> GetBucketTaggingAsync(GetBucketTaggingRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<GetBucketVersioningResponse> GetBucketVersioningAsync(string bucketName, CancellationToken cancellationToken);
    public abstract virtual Task`1<GetBucketVersioningResponse> GetBucketVersioningAsync(GetBucketVersioningRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<GetBucketWebsiteResponse> GetBucketWebsiteAsync(string bucketName, CancellationToken cancellationToken);
    public abstract virtual Task`1<GetBucketWebsiteResponse> GetBucketWebsiteAsync(GetBucketWebsiteRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<GetCORSConfigurationResponse> GetCORSConfigurationAsync(string bucketName, CancellationToken cancellationToken);
    public abstract virtual Task`1<GetCORSConfigurationResponse> GetCORSConfigurationAsync(GetCORSConfigurationRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<GetLifecycleConfigurationResponse> GetLifecycleConfigurationAsync(string bucketName, CancellationToken cancellationToken);
    public abstract virtual Task`1<GetLifecycleConfigurationResponse> GetLifecycleConfigurationAsync(GetLifecycleConfigurationRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<GetObjectResponse> GetObjectAsync(string bucketName, string key, CancellationToken cancellationToken);
    public abstract virtual Task`1<GetObjectResponse> GetObjectAsync(string bucketName, string key, string versionId, CancellationToken cancellationToken);
    public abstract virtual Task`1<GetObjectResponse> GetObjectAsync(GetObjectRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<GetObjectAttributesResponse> GetObjectAttributesAsync(GetObjectAttributesRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<GetObjectLegalHoldResponse> GetObjectLegalHoldAsync(GetObjectLegalHoldRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<GetObjectLockConfigurationResponse> GetObjectLockConfigurationAsync(GetObjectLockConfigurationRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<GetObjectMetadataResponse> GetObjectMetadataAsync(string bucketName, string key, CancellationToken cancellationToken);
    public abstract virtual Task`1<GetObjectMetadataResponse> GetObjectMetadataAsync(string bucketName, string key, string versionId, CancellationToken cancellationToken);
    public abstract virtual Task`1<GetObjectMetadataResponse> GetObjectMetadataAsync(GetObjectMetadataRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<GetObjectRetentionResponse> GetObjectRetentionAsync(GetObjectRetentionRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<GetObjectTaggingResponse> GetObjectTaggingAsync(GetObjectTaggingRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<GetObjectTorrentResponse> GetObjectTorrentAsync(string bucketName, string key, CancellationToken cancellationToken);
    public abstract virtual Task`1<GetObjectTorrentResponse> GetObjectTorrentAsync(GetObjectTorrentRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<GetPublicAccessBlockResponse> GetPublicAccessBlockAsync(GetPublicAccessBlockRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<InitiateMultipartUploadResponse> InitiateMultipartUploadAsync(string bucketName, string key, CancellationToken cancellationToken);
    public abstract virtual Task`1<InitiateMultipartUploadResponse> InitiateMultipartUploadAsync(InitiateMultipartUploadRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ListBucketAnalyticsConfigurationsResponse> ListBucketAnalyticsConfigurationsAsync(ListBucketAnalyticsConfigurationsRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ListBucketIntelligentTieringConfigurationsResponse> ListBucketIntelligentTieringConfigurationsAsync(ListBucketIntelligentTieringConfigurationsRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ListBucketInventoryConfigurationsResponse> ListBucketInventoryConfigurationsAsync(ListBucketInventoryConfigurationsRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ListBucketMetricsConfigurationsResponse> ListBucketMetricsConfigurationsAsync(ListBucketMetricsConfigurationsRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ListBucketsResponse> ListBucketsAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<ListBucketsResponse> ListBucketsAsync(ListBucketsRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ListDirectoryBucketsResponse> ListDirectoryBucketsAsync(ListDirectoryBucketsRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ListMultipartUploadsResponse> ListMultipartUploadsAsync(string bucketName, CancellationToken cancellationToken);
    public abstract virtual Task`1<ListMultipartUploadsResponse> ListMultipartUploadsAsync(string bucketName, string prefix, CancellationToken cancellationToken);
    public abstract virtual Task`1<ListMultipartUploadsResponse> ListMultipartUploadsAsync(ListMultipartUploadsRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ListObjectsResponse> ListObjectsAsync(string bucketName, CancellationToken cancellationToken);
    public abstract virtual Task`1<ListObjectsResponse> ListObjectsAsync(string bucketName, string prefix, CancellationToken cancellationToken);
    public abstract virtual Task`1<ListObjectsResponse> ListObjectsAsync(ListObjectsRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ListObjectsV2Response> ListObjectsV2Async(ListObjectsV2Request request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ListPartsResponse> ListPartsAsync(string bucketName, string key, string uploadId, CancellationToken cancellationToken);
    public abstract virtual Task`1<ListPartsResponse> ListPartsAsync(ListPartsRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ListVersionsResponse> ListVersionsAsync(string bucketName, CancellationToken cancellationToken);
    public abstract virtual Task`1<ListVersionsResponse> ListVersionsAsync(string bucketName, string prefix, CancellationToken cancellationToken);
    public abstract virtual Task`1<ListVersionsResponse> ListVersionsAsync(ListVersionsRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<PutACLResponse> PutACLAsync(PutACLRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<PutBucketResponse> PutBucketAsync(string bucketName, CancellationToken cancellationToken);
    public abstract virtual Task`1<PutBucketResponse> PutBucketAsync(PutBucketRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<PutBucketAccelerateConfigurationResponse> PutBucketAccelerateConfigurationAsync(PutBucketAccelerateConfigurationRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<PutBucketAnalyticsConfigurationResponse> PutBucketAnalyticsConfigurationAsync(PutBucketAnalyticsConfigurationRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<PutBucketEncryptionResponse> PutBucketEncryptionAsync(PutBucketEncryptionRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<PutBucketIntelligentTieringConfigurationResponse> PutBucketIntelligentTieringConfigurationAsync(PutBucketIntelligentTieringConfigurationRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<PutBucketInventoryConfigurationResponse> PutBucketInventoryConfigurationAsync(PutBucketInventoryConfigurationRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<PutBucketLoggingResponse> PutBucketLoggingAsync(PutBucketLoggingRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<PutBucketMetricsConfigurationResponse> PutBucketMetricsConfigurationAsync(PutBucketMetricsConfigurationRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<PutBucketNotificationResponse> PutBucketNotificationAsync(PutBucketNotificationRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<PutBucketOwnershipControlsResponse> PutBucketOwnershipControlsAsync(PutBucketOwnershipControlsRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<PutBucketPolicyResponse> PutBucketPolicyAsync(string bucketName, string policy, CancellationToken cancellationToken);
    public abstract virtual Task`1<PutBucketPolicyResponse> PutBucketPolicyAsync(string bucketName, string policy, string contentMD5, CancellationToken cancellationToken);
    public abstract virtual Task`1<PutBucketPolicyResponse> PutBucketPolicyAsync(PutBucketPolicyRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<PutBucketReplicationResponse> PutBucketReplicationAsync(PutBucketReplicationRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<PutBucketRequestPaymentResponse> PutBucketRequestPaymentAsync(string bucketName, RequestPaymentConfiguration requestPaymentConfiguration, CancellationToken cancellationToken);
    public abstract virtual Task`1<PutBucketRequestPaymentResponse> PutBucketRequestPaymentAsync(PutBucketRequestPaymentRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<PutBucketTaggingResponse> PutBucketTaggingAsync(string bucketName, List`1<Tag> tagSet, CancellationToken cancellationToken);
    public abstract virtual Task`1<PutBucketTaggingResponse> PutBucketTaggingAsync(PutBucketTaggingRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<PutBucketVersioningResponse> PutBucketVersioningAsync(PutBucketVersioningRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<PutBucketWebsiteResponse> PutBucketWebsiteAsync(string bucketName, WebsiteConfiguration websiteConfiguration, CancellationToken cancellationToken);
    public abstract virtual Task`1<PutBucketWebsiteResponse> PutBucketWebsiteAsync(PutBucketWebsiteRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<PutCORSConfigurationResponse> PutCORSConfigurationAsync(string bucketName, CORSConfiguration configuration, CancellationToken cancellationToken);
    public abstract virtual Task`1<PutCORSConfigurationResponse> PutCORSConfigurationAsync(PutCORSConfigurationRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<PutLifecycleConfigurationResponse> PutLifecycleConfigurationAsync(string bucketName, LifecycleConfiguration configuration, CancellationToken cancellationToken);
    public abstract virtual Task`1<PutLifecycleConfigurationResponse> PutLifecycleConfigurationAsync(PutLifecycleConfigurationRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<PutObjectResponse> PutObjectAsync(PutObjectRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<PutObjectLegalHoldResponse> PutObjectLegalHoldAsync(PutObjectLegalHoldRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<PutObjectLockConfigurationResponse> PutObjectLockConfigurationAsync(PutObjectLockConfigurationRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<PutObjectRetentionResponse> PutObjectRetentionAsync(PutObjectRetentionRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<PutObjectTaggingResponse> PutObjectTaggingAsync(PutObjectTaggingRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<PutPublicAccessBlockResponse> PutPublicAccessBlockAsync(PutPublicAccessBlockRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<RestoreObjectResponse> RestoreObjectAsync(string bucketName, string key, CancellationToken cancellationToken);
    public abstract virtual Task`1<RestoreObjectResponse> RestoreObjectAsync(string bucketName, string key, Nullable`1<int> days, CancellationToken cancellationToken);
    public abstract virtual Task`1<RestoreObjectResponse> RestoreObjectAsync(string bucketName, string key, string versionId, CancellationToken cancellationToken);
    public abstract virtual Task`1<RestoreObjectResponse> RestoreObjectAsync(string bucketName, string key, string versionId, Nullable`1<int> days, CancellationToken cancellationToken);
    public abstract virtual Task`1<RestoreObjectResponse> RestoreObjectAsync(RestoreObjectRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<SelectObjectContentResponse> SelectObjectContentAsync(SelectObjectContentRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<UploadPartResponse> UploadPartAsync(UploadPartRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<WriteGetObjectResponseResponse> WriteGetObjectResponseAsync(WriteGetObjectResponseRequest request, CancellationToken cancellationToken);
    public abstract virtual Endpoint DetermineServiceOperationEndpoint(AmazonWebServiceRequest request);
}
public class Amazon.S3.IntelligentTieringAccessTier : ConstantClass {
    public static IntelligentTieringAccessTier ARCHIVE_ACCESS;
    public static IntelligentTieringAccessTier DEEP_ARCHIVE_ACCESS;
    public IntelligentTieringAccessTier(string value);
    private static IntelligentTieringAccessTier();
    public static IntelligentTieringAccessTier FindValue(string value);
    public static IntelligentTieringAccessTier op_Implicit(string value);
}
public class Amazon.S3.IntelligentTieringStatus : ConstantClass {
    public static IntelligentTieringStatus Enabled;
    public static IntelligentTieringStatus Disabled;
    public IntelligentTieringStatus(string value);
    private static IntelligentTieringStatus();
    public static IntelligentTieringStatus FindValue(string value);
    public static IntelligentTieringStatus op_Implicit(string value);
}
public class Amazon.S3.Internal.AmazonS3AdaptiveRetryPolicy : AdaptiveRetryPolicy {
    public AmazonS3AdaptiveRetryPolicy(IClientConfig config);
    public Nullable`1<bool> RetryForExceptionSync(IExecutionContext executionContext, Exception exception);
    [AsyncStateMachineAttribute("Amazon.S3.Internal.AmazonS3AdaptiveRetryPolicy/<RetryForExceptionAsync>d__2")]
public virtual Task`1<bool> RetryForExceptionAsync(IExecutionContext executionContext, Exception exception);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private bool <>n__0(IExecutionContext executionContext, Exception exception);
}
public class Amazon.S3.Internal.AmazonS3EndpointProvider : object {
    public sealed virtual Endpoint ResolveEndpoint(EndpointParameters parameters);
}
public class Amazon.S3.Internal.AmazonS3EndpointResolver : BaseEndpointResolver {
    protected virtual void ServiceSpecificHandler(IExecutionContext executionContext, EndpointParameters parameters);
    protected virtual EndpointParameters MapEndpointsParameters(IRequestContext requestContext);
}
public class Amazon.S3.Internal.AmazonS3ExceptionHandler : PipelineHandler {
    public virtual void InvokeSync(IExecutionContext executionContext);
    [AsyncStateMachineAttribute("Amazon.S3.Internal.AmazonS3ExceptionHandler/<InvokeAsync>d__1`1")]
public virtual Task`1<T> InvokeAsync(IExecutionContext executionContext);
    protected virtual void HandleException(IExecutionContext executionContext, Exception exception);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<T> <>n__0(IExecutionContext executionContext);
}
public class Amazon.S3.Internal.AmazonS3KmsHandler : PipelineHandler {
    public virtual void InvokeSync(IExecutionContext executionContext);
    public virtual Task`1<T> InvokeAsync(IExecutionContext executionContext);
    protected virtual void PreInvoke(IExecutionContext executionContext);
    internal static void EvaluateIfSigV4Required(IRequest request);
}
public class Amazon.S3.Internal.AmazonS3Metadata : object {
    public string ServiceId { get; }
    public IDictionary`2<string, string> OperationNameMapping { get; }
    public sealed virtual string get_ServiceId();
    public sealed virtual IDictionary`2<string, string> get_OperationNameMapping();
}
public class Amazon.S3.Internal.AmazonS3PostMarshallHandler : PipelineHandler {
    public virtual void InvokeSync(IExecutionContext executionContext);
    public virtual Task`1<T> InvokeAsync(IExecutionContext executionContext);
    protected virtual void PreInvoke(IExecutionContext executionContext);
    private static void ProcessPreRequestHandlers(IExecutionContext executionContext);
    private static bool SetStreamChecksum(AmazonWebServiceRequest originalRequest, IRequest request);
    private static void SetStreamChecksum(UploadPartRequest uploadPartRequest, IRequest request);
    private static void SetStreamChecksum(PutObjectRequest putObjectRequest, IRequest request);
    private static Stream GetStreamWithLength(Stream baseStream, long hintLength);
}
public class Amazon.S3.Internal.AmazonS3PreMarshallHandler : PipelineHandler {
    public virtual void InvokeSync(IExecutionContext executionContext);
    public virtual Task`1<T> InvokeAsync(IExecutionContext executionContext);
    protected virtual void PreInvoke(IExecutionContext executionContext);
    private static void ProcessPreRequestHandlers(IExecutionContext executionContext);
    private static string DetermineBucketRegionCode(IClientConfig config, AmazonWebServiceRequest request);
}
public class Amazon.S3.Internal.AmazonS3RedirectHandler : RedirectHandler {
    protected virtual void FinalizeForRedirect(IExecutionContext executionContext, string redirectedLocation);
}
public class Amazon.S3.Internal.AmazonS3ResponseHandler : PipelineHandler {
    private static Char[] etagTrimChars;
    private static AmazonS3ResponseHandler();
    public virtual void InvokeSync(IExecutionContext executionContext);
    [AsyncStateMachineAttribute("Amazon.S3.Internal.AmazonS3ResponseHandler/<InvokeAsync>d__1`1")]
public virtual Task`1<T> InvokeAsync(IExecutionContext executionContext);
    protected virtual void PostInvoke(IExecutionContext executionContext);
    private static void ProcessResponseHandlers(IExecutionContext executionContext);
    private static bool HasSSEHeaders(IWebResponseData webResponseData);
    private static void CompareHashes(string etag, Byte[] hash);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<T> <>n__0(IExecutionContext executionContext);
}
public class Amazon.S3.Internal.AmazonS3RetryPolicy : DefaultRetryPolicy {
    private static string AWS_KMS_Signature_Error;
    internal static ICollection`1<Type> RequestsWith200Error;
    public AmazonS3RetryPolicy(IClientConfig config);
    private static AmazonS3RetryPolicy();
    public Nullable`1<bool> RetryForExceptionSync(IExecutionContext executionContext, Exception exception);
    internal static Nullable`1<bool> SharedRetryForExceptionSync(IExecutionContext executionContext, Exception exception, ILogger logger, Func`3<IExecutionContext, Exception, bool> baseRetryForException);
    [AsyncStateMachineAttribute("Amazon.S3.Internal.AmazonS3RetryPolicy/<RetryForExceptionAsync>d__4")]
public virtual Task`1<bool> RetryForExceptionAsync(IExecutionContext executionContext, Exception exception);
    [AsyncStateMachineAttribute("Amazon.S3.Internal.AmazonS3RetryPolicy/<SharedRetryForExceptionAsync>d__5")]
internal static Task`1<bool> SharedRetryForExceptionAsync(IExecutionContext executionContext, Exception exception, Func`3<IExecutionContext, Exception, Nullable`1<bool>> retryForExceptionSync, Func`3<IExecutionContext, Exception, bool> baseRetryForException);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private bool <>n__0(IExecutionContext executionContext, Exception exception);
}
public class Amazon.S3.Internal.AmazonS3StandardRetryPolicy : StandardRetryPolicy {
    public AmazonS3StandardRetryPolicy(IClientConfig config);
    public Nullable`1<bool> RetryForExceptionSync(IExecutionContext executionContext, Exception exception);
    [AsyncStateMachineAttribute("Amazon.S3.Internal.AmazonS3StandardRetryPolicy/<RetryForExceptionAsync>d__2")]
public virtual Task`1<bool> RetryForExceptionAsync(IExecutionContext executionContext, Exception exception);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private bool <>n__0(IExecutionContext executionContext, Exception exception);
}
public interface Amazon.S3.Internal.IAmazonS3Encryption {
}
internal static class Amazon.S3.Internal.S3ArnUtils : object {
    internal static bool IsS3AccessPointsArn(string bucket);
    internal static bool IsS3OutpostsArn(string bucket);
}
internal class Amazon.S3.Internal.S3Express.DefaultS3ExpressCredentialProvider : object {
    private AmazonS3Client _s3Client;
    private LruCache`2<string, SessionCredentialsLruItem> _cache;
    private DateTime _lastRefreshedTime;
    private SemaphoreSlim _cacheLock;
    private Timer _refreshCredentialsTimer;
    private bool _timerStarted;
    private Logger _logger;
    private static TimeSpan _neverTimespan;
    private static int MaxCacheSize;
    private static int RequestTime;
    private static int PrefetchTime;
    private bool _isDisposed;
    public DefaultS3ExpressCredentialProvider(AmazonS3Client s3Client);
    private static DefaultS3ExpressCredentialProvider();
    public sealed virtual SessionCredentials ResolveSessionCredentials(string bucketName);
    [AsyncStateMachineAttribute("Amazon.S3.Internal.S3Express.DefaultS3ExpressCredentialProvider/<ResolveSessionCredentialsAsync>d__14")]
public sealed virtual Task`1<SessionCredentials> ResolveSessionCredentialsAsync(string bucketName, CancellationToken cancellationToken);
    private SessionCredentials GetSessionCredentialsFromCache(string bucketName);
    private void CacheSessionCredentials(string bucketName, SessionCredentials credentials);
    [AsyncStateMachineAttribute("Amazon.S3.Internal.S3Express.DefaultS3ExpressCredentialProvider/<RefreshCredentials>d__17")]
private void RefreshCredentials(object _);
    private static bool IsExpiredSessionCredentials(SessionCredentialsLruItem sessionCredentialsLruItem);
    private void ResetCredentialsTimer(DateTime resetTime);
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
}
public class Amazon.S3.Internal.S3Express.S3ExpressPreSigner : PipelineHandler {
    private static string S3ExpressSessionHeader;
    public virtual void InvokeSync(IExecutionContext executionContext);
    protected static void PreInvoke(IExecutionContext executionContext);
    private static bool ShouldSign(IRequestContext requestContext, AmazonS3Config config);
    private static void PreSignRequest(IRequestContext requestContext, AmazonS3Config config);
    [AsyncStateMachineAttribute("Amazon.S3.Internal.S3Express.S3ExpressPreSigner/<InvokeAsync>d__5`1")]
public virtual Task`1<T> InvokeAsync(IExecutionContext executionContext);
    [AsyncStateMachineAttribute("Amazon.S3.Internal.S3Express.S3ExpressPreSigner/<PreInvokeAsync>d__6")]
protected static Task PreInvokeAsync(IExecutionContext executionContext);
    [AsyncStateMachineAttribute("Amazon.S3.Internal.S3Express.S3ExpressPreSigner/<PreSignRequestAsync>d__7")]
private static Task PreSignRequestAsync(IRequestContext requestContext, AmazonS3Config config);
    private static string GetRequestBucketName(IRequest request);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<T> <>n__0(IExecutionContext executionContext);
}
public class Amazon.S3.Internal.S3Signer : AbstractAWSSigner {
    private S3Signer _s3Signer;
    public ClientProtocol Protocol { get; }
    public virtual ClientProtocol get_Protocol();
    public virtual void Sign(IRequest request, IClientConfig clientConfig, RequestMetrics metrics, string awsAccessKeyId, string awsSecretAccessKey);
    public virtual void Sign(IRequest request, IClientConfig clientConfig, RequestMetrics metrics, ImmutableCredentials credentials);
    internal static void SignRequest(IRequest request, RequestMetrics metrics, string awsAccessKeyId, string awsSecretAccessKey);
    private static void RegionDetectionUpdater(IRequest request);
}
public class Amazon.S3.InventoryFormat : ConstantClass {
    public static InventoryFormat CSV;
    public static InventoryFormat ORC;
    public static InventoryFormat Parquet;
    public InventoryFormat(string value);
    private static InventoryFormat();
    public static InventoryFormat FindValue(string value);
    public static InventoryFormat op_Implicit(string value);
}
public class Amazon.S3.InventoryFrequency : ConstantClass {
    public static InventoryFrequency Daily;
    public static InventoryFrequency Weekly;
    public InventoryFrequency(string value);
    private static InventoryFrequency();
    public static InventoryFrequency FindValue(string value);
    public static InventoryFrequency op_Implicit(string value);
}
public class Amazon.S3.InventoryIncludedObjectVersions : ConstantClass {
    public static InventoryIncludedObjectVersions All;
    public static InventoryIncludedObjectVersions Current;
    public InventoryIncludedObjectVersions(string value);
    private static InventoryIncludedObjectVersions();
    public static InventoryIncludedObjectVersions FindValue(string value);
    public static InventoryIncludedObjectVersions op_Implicit(string value);
}
public class Amazon.S3.InventoryOptionalField : ConstantClass {
    public static InventoryOptionalField Size;
    public static InventoryOptionalField LastModifiedDate;
    public static InventoryOptionalField StorageClass;
    public static InventoryOptionalField ETag;
    public static InventoryOptionalField IsMultipartUploaded;
    public static InventoryOptionalField ReplicationStatus;
    public static InventoryOptionalField EncryptionStatus;
    public static InventoryOptionalField ObjectLockRetainUntilDate;
    public static InventoryOptionalField ObjectLockMode;
    public static InventoryOptionalField ObjectLockLegalHoldStatus;
    public static InventoryOptionalField IntelligentTieringAccessTier;
    public static InventoryOptionalField BucketKeyStatus;
    public static InventoryOptionalField ChecksumAlgorithm;
    public static InventoryOptionalField ObjectAccessControlList;
    public static InventoryOptionalField ObjectOwner;
    public InventoryOptionalField(string value);
    private static InventoryOptionalField();
    public static InventoryOptionalField FindValue(string value);
    public static InventoryOptionalField op_Implicit(string value);
}
public interface Amazon.S3.IS3ExpressCredentialProvider {
    public abstract virtual SessionCredentials ResolveSessionCredentials(string bucketName);
    public abstract virtual Task`1<SessionCredentials> ResolveSessionCredentialsAsync(string bucketName, CancellationToken cancellationToken);
}
public class Amazon.S3.JsonType : ConstantClass {
    public static JsonType Document;
    public static JsonType Lines;
    public JsonType(string value);
    private static JsonType();
    public static JsonType FindValue(string value);
    public static JsonType op_Implicit(string value);
}
public class Amazon.S3.LifecycleRuleStatus : ConstantClass {
    public static LifecycleRuleStatus Enabled;
    public static LifecycleRuleStatus Disabled;
    public LifecycleRuleStatus(string value);
    private static LifecycleRuleStatus();
    public static LifecycleRuleStatus FindValue(string value);
    public static LifecycleRuleStatus op_Implicit(string value);
}
public class Amazon.S3.LocationType : ConstantClass {
    public static LocationType AvailabilityZone;
    public LocationType(string value);
    private static LocationType();
    public static LocationType FindValue(string value);
    public static LocationType op_Implicit(string value);
}
public class Amazon.S3.MetricsStatus : ConstantClass {
    public static MetricsStatus Enabled;
    public static MetricsStatus Disabled;
    public MetricsStatus(string value);
    private static MetricsStatus();
    public static MetricsStatus FindValue(string value);
    public static MetricsStatus op_Implicit(string value);
}
public class Amazon.S3.Model.AbortMultipartUploadRequest : AmazonWebServiceRequest {
    private string bucketName;
    private string key;
    private string uploadId;
    private RequestPayer requestPayer;
    private string expectedBucketOwner;
    public string BucketName { get; public set; }
    public string ExpectedBucketOwner { get; public set; }
    public string Key { get; public set; }
    public RequestPayer RequestPayer { get; public set; }
    public string UploadId { get; public set; }
    public string get_BucketName();
    public void set_BucketName(string value);
    internal bool IsSetBucketName();
    public string get_ExpectedBucketOwner();
    public void set_ExpectedBucketOwner(string value);
    internal bool IsSetExpectedBucketOwner();
    public string get_Key();
    public void set_Key(string value);
    internal bool IsSetKey();
    public RequestPayer get_RequestPayer();
    public void set_RequestPayer(RequestPayer value);
    internal bool IsSetRequestPayer();
    public string get_UploadId();
    public void set_UploadId(string value);
    internal bool IsSetUploadId();
}
public class Amazon.S3.Model.AbortMultipartUploadResponse : AmazonWebServiceResponse {
    private RequestCharged requestCharged;
    public RequestCharged RequestCharged { get; public set; }
    public RequestCharged get_RequestCharged();
    public void set_RequestCharged(RequestCharged value);
    internal bool IsSetRequestCharged();
}
public class Amazon.S3.Model.AccelerateConfiguration : object {
    private BucketAccelerateStatus status;
    public BucketAccelerateStatus Status { get; public set; }
    public BucketAccelerateStatus get_Status();
    public void set_Status(BucketAccelerateStatus value);
    internal bool IsSetBucketAccelerateStatus();
}
public class Amazon.S3.Model.AccessControlTranslation : object {
    private OwnerOverride owner;
    public OwnerOverride Owner { get; public set; }
    public OwnerOverride get_Owner();
    public void set_Owner(OwnerOverride value);
    internal bool IsSetOwner();
}
public class Amazon.S3.Model.AnalyticsAndOperator : AnalyticsNAryOperator {
    public AnalyticsAndOperator(List`1<AnalyticsFilterPredicate> operands);
    internal virtual void Accept(IAnalyticsPredicateVisitor analyticsPredicateVisitor);
}
public class Amazon.S3.Model.AnalyticsConfiguration : object {
    private string analyticsId;
    private AnalyticsFilter analyticsFilter;
    private StorageClassAnalysis storageClassAnalysis;
    public AnalyticsFilter AnalyticsFilter { get; public set; }
    public string AnalyticsId { get; public set; }
    public StorageClassAnalysis StorageClassAnalysis { get; public set; }
    public AnalyticsFilter get_AnalyticsFilter();
    public void set_AnalyticsFilter(AnalyticsFilter value);
    internal bool IsSetAnalyticsFilter();
    public string get_AnalyticsId();
    public void set_AnalyticsId(string value);
    internal bool IsSetAnalyticsId();
    public StorageClassAnalysis get_StorageClassAnalysis();
    public void set_StorageClassAnalysis(StorageClassAnalysis value);
    internal bool IsSetStorageClassAnalysis();
}
public class Amazon.S3.Model.AnalyticsExportDestination : object {
    private AnalyticsS3BucketDestination analyticsS3BucketDestination;
    public AnalyticsS3BucketDestination S3BucketDestination { get; public set; }
    public AnalyticsS3BucketDestination get_S3BucketDestination();
    public void set_S3BucketDestination(AnalyticsS3BucketDestination value);
    internal bool IsSetS3BucketDestination();
}
public class Amazon.S3.Model.AnalyticsFilter : object {
    private AnalyticsFilterPredicate analyticsFilterPredicate;
    public AnalyticsFilterPredicate AnalyticsFilterPredicate { get; public set; }
    public AnalyticsFilterPredicate get_AnalyticsFilterPredicate();
    public void set_AnalyticsFilterPredicate(AnalyticsFilterPredicate value);
}
public abstract class Amazon.S3.Model.AnalyticsFilterPredicate : object {
    internal abstract virtual void Accept(IAnalyticsPredicateVisitor analyticsPredicateVisitor);
}
public abstract class Amazon.S3.Model.AnalyticsNAryOperator : AnalyticsFilterPredicate {
    private List`1<AnalyticsFilterPredicate> operands;
    public List`1<AnalyticsFilterPredicate> Operands { get; }
    protected AnalyticsNAryOperator(List`1<AnalyticsFilterPredicate> operands);
    public List`1<AnalyticsFilterPredicate> get_Operands();
}
public class Amazon.S3.Model.AnalyticsPrefixPredicate : AnalyticsFilterPredicate {
    private string prefix;
    public string Prefix { get; }
    public AnalyticsPrefixPredicate(string prefix);
    public string get_Prefix();
    internal virtual void Accept(IAnalyticsPredicateVisitor analyticsPredicateVisitor);
}
public class Amazon.S3.Model.AnalyticsS3BucketDestination : object {
    private AnalyticsS3ExportFileFormat analyticsS3ExportFileFormat;
    private string accountId;
    private string bucketName;
    private string prefix;
    public string BucketAccountId { get; public set; }
    public string BucketName { get; public set; }
    public string Format { get; public set; }
    public string Prefix { get; public set; }
    public string get_BucketAccountId();
    public void set_BucketAccountId(string value);
    internal bool IsSetBucketAccountId();
    public string get_BucketName();
    public void set_BucketName(string value);
    internal bool IsSetBucketName();
    public string get_Format();
    public void set_Format(string value);
    internal bool IsSetFormat();
    public string get_Prefix();
    public void set_Prefix(string value);
    internal bool IsSetPrefix();
}
public class Amazon.S3.Model.AnalyticsTagPredicate : AnalyticsFilterPredicate {
    private Tag tag;
    public Tag Tag { get; }
    public AnalyticsTagPredicate(Tag tag);
    public Tag get_Tag();
    internal virtual void Accept(IAnalyticsPredicateVisitor analyticsPredicateVisitor);
}
public class Amazon.S3.Model.BucketAlreadyExistsException : AmazonS3Exception {
    public BucketAlreadyExistsException(string message);
    public BucketAlreadyExistsException(string message, Exception innerException);
    public BucketAlreadyExistsException(Exception innerException);
    public BucketAlreadyExistsException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public BucketAlreadyExistsException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.S3.Model.BucketAlreadyOwnedByYouException : AmazonS3Exception {
    public BucketAlreadyOwnedByYouException(string message);
    public BucketAlreadyOwnedByYouException(string message, Exception innerException);
    public BucketAlreadyOwnedByYouException(Exception innerException);
    public BucketAlreadyOwnedByYouException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public BucketAlreadyOwnedByYouException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.S3.Model.BucketInfo : object {
    private DataRedundancy _dataRedundancy;
    private BucketType _type;
    public DataRedundancy DataRedundancy { get; public set; }
    public BucketType Type { get; public set; }
    public DataRedundancy get_DataRedundancy();
    public void set_DataRedundancy(DataRedundancy value);
    internal bool IsSetDataRedundancy();
    public BucketType get_Type();
    public void set_Type(BucketType value);
    internal bool IsSetType();
}
public class Amazon.S3.Model.ByteRange : object {
    private string _formattedByteRange;
    [CompilerGeneratedAttribute]
private long <Start>k__BackingField;
    [CompilerGeneratedAttribute]
private long <End>k__BackingField;
    public long Start { get; public set; }
    public long End { get; public set; }
    public string FormattedByteRange { get; public set; }
    public ByteRange(long start, long end);
    public ByteRange(string byteRangeValue);
    [CompilerGeneratedAttribute]
public long get_Start();
    [CompilerGeneratedAttribute]
public void set_Start(long value);
    [CompilerGeneratedAttribute]
public long get_End();
    [CompilerGeneratedAttribute]
public void set_End(long value);
    public string get_FormattedByteRange();
    public void set_FormattedByteRange(string value);
}
public class Amazon.S3.Model.Checksum : object {
    private string _checksumCRC32;
    private string _checksumCRC32C;
    private string _checksumSHA1;
    private string _checksumSHA256;
    public string ChecksumCRC32 { get; public set; }
    public string ChecksumCRC32C { get; public set; }
    public string ChecksumSHA1 { get; public set; }
    public string ChecksumSHA256 { get; public set; }
    public string get_ChecksumCRC32();
    public void set_ChecksumCRC32(string value);
    internal bool IsSetChecksumCRC32();
    public string get_ChecksumCRC32C();
    public void set_ChecksumCRC32C(string value);
    internal bool IsSetChecksumCRC32C();
    public string get_ChecksumSHA1();
    public void set_ChecksumSHA1(string value);
    internal bool IsSetChecksumSHA1();
    public string get_ChecksumSHA256();
    public void set_ChecksumSHA256(string value);
    internal bool IsSetChecksumSHA256();
}
public class Amazon.S3.Model.CompleteMultipartUploadRequest : AmazonWebServiceRequest {
    private string bucketName;
    private string _checksumCRC32;
    private string _checksumCRC32C;
    private string _checksumSHA1;
    private string _checksumSHA256;
    private string key;
    private List`1<PartETag> partETags;
    private string uploadId;
    private RequestPayer requestPayer;
    private string _sseCustomerAlgorithm;
    private string _sseCustomerKey;
    private string _sseCustomerKeyMD5;
    private string expectedBucketOwner;
    public string BucketName { get; public set; }
    public string ChecksumCRC32 { get; public set; }
    public string ChecksumCRC32C { get; public set; }
    public string ChecksumSHA1 { get; public set; }
    public string ChecksumSHA256 { get; public set; }
    public string ExpectedBucketOwner { get; public set; }
    public string Key { get; public set; }
    public List`1<PartETag> PartETags { get; public set; }
    public RequestPayer RequestPayer { get; public set; }
    public string SSECustomerAlgorithm { get; public set; }
    public string SSECustomerKey { get; public set; }
    public string SSECustomerKeyMD5 { get; public set; }
    public string UploadId { get; public set; }
    public string get_BucketName();
    public void set_BucketName(string value);
    internal bool IsSetBucketName();
    public string get_ChecksumCRC32();
    public void set_ChecksumCRC32(string value);
    internal bool IsSetChecksumCRC32();
    public string get_ChecksumCRC32C();
    public void set_ChecksumCRC32C(string value);
    internal bool IsSetChecksumCRC32C();
    public string get_ChecksumSHA1();
    public void set_ChecksumSHA1(string value);
    internal bool IsSetChecksumSHA1();
    public string get_ChecksumSHA256();
    public void set_ChecksumSHA256(string value);
    internal bool IsSetChecksumSHA256();
    public string get_ExpectedBucketOwner();
    public void set_ExpectedBucketOwner(string value);
    internal bool IsSetExpectedBucketOwner();
    public string get_Key();
    public void set_Key(string value);
    internal bool IsSetKey();
    public List`1<PartETag> get_PartETags();
    public void set_PartETags(List`1<PartETag> value);
    public void AddPartETags(PartETag[] partETags);
    public void AddPartETags(IEnumerable`1<PartETag> partETags);
    public void AddPartETags(UploadPartResponse[] responses);
    public void AddPartETags(IEnumerable`1<UploadPartResponse> responses);
    public void AddPartETags(CopyPartResponse[] responses);
    public void AddPartETags(IEnumerable`1<CopyPartResponse> responses);
    public RequestPayer get_RequestPayer();
    public void set_RequestPayer(RequestPayer value);
    internal bool IsSetRequestPayer();
    public string get_SSECustomerAlgorithm();
    public void set_SSECustomerAlgorithm(string value);
    internal bool IsSetSSECustomerAlgorithm();
    public string get_SSECustomerKey();
    public void set_SSECustomerKey(string value);
    internal bool IsSetSSECustomerKey();
    public string get_SSECustomerKeyMD5();
    public void set_SSECustomerKeyMD5(string value);
    internal bool IsSetSSECustomerKeyMD5();
    public string get_UploadId();
    public void set_UploadId(string value);
    internal bool IsSetUploadId();
}
public class Amazon.S3.Model.CompleteMultipartUploadResponse : AmazonWebServiceResponse {
    private string location;
    private string bucketName;
    private string _checksumCRC32;
    private string _checksumCRC32C;
    private string _checksumSHA1;
    private string _checksumSHA256;
    private string key;
    private string eTag;
    private string versionId;
    private Expiration expiration;
    private ServerSideEncryptionMethod serverSideEncryption;
    private string serverSideEncryptionKeyManagementServiceKeyId;
    private RequestCharged requestCharged;
    private Nullable`1<bool> bucketKeyEnabled;
    public Nullable`1<bool> BucketKeyEnabled { get; public set; }
    public string BucketName { get; public set; }
    public string ChecksumCRC32 { get; public set; }
    public string ChecksumCRC32C { get; public set; }
    public string ChecksumSHA1 { get; public set; }
    public string ChecksumSHA256 { get; public set; }
    public string ETag { get; public set; }
    public Expiration Expiration { get; public set; }
    public string Key { get; public set; }
    public string Location { get; public set; }
    public RequestCharged RequestCharged { get; public set; }
    public ServerSideEncryptionMethod ServerSideEncryptionMethod { get; public set; }
    [AWSPropertyAttribute]
public string ServerSideEncryptionKeyManagementServiceKeyId { get; public set; }
    public string VersionId { get; public set; }
    public Nullable`1<bool> get_BucketKeyEnabled();
    public void set_BucketKeyEnabled(Nullable`1<bool> value);
    internal bool IsSetBucketKeyEnabled();
    public string get_BucketName();
    public void set_BucketName(string value);
    internal bool IsSetBucketName();
    public string get_ChecksumCRC32();
    public void set_ChecksumCRC32(string value);
    internal bool IsSetChecksumCRC32();
    public string get_ChecksumCRC32C();
    public void set_ChecksumCRC32C(string value);
    internal bool IsSetChecksumCRC32C();
    public string get_ChecksumSHA1();
    public void set_ChecksumSHA1(string value);
    internal bool IsSetChecksumSHA1();
    public string get_ChecksumSHA256();
    public void set_ChecksumSHA256(string value);
    internal bool IsSetChecksumSHA256();
    public string get_ETag();
    public void set_ETag(string value);
    internal bool IsSetETag();
    public Expiration get_Expiration();
    public void set_Expiration(Expiration value);
    public string get_Key();
    public void set_Key(string value);
    internal bool IsSetKey();
    public string get_Location();
    public void set_Location(string value);
    internal bool IsSetLocation();
    public RequestCharged get_RequestCharged();
    public void set_RequestCharged(RequestCharged value);
    internal bool IsSetRequestCharged();
    public ServerSideEncryptionMethod get_ServerSideEncryptionMethod();
    public void set_ServerSideEncryptionMethod(ServerSideEncryptionMethod value);
    public string get_ServerSideEncryptionKeyManagementServiceKeyId();
    public void set_ServerSideEncryptionKeyManagementServiceKeyId(string value);
    internal bool IsSetServerSideEncryptionKeyManagementServiceKeyId();
    public string get_VersionId();
    public void set_VersionId(string value);
    internal bool IsSetVersionId();
}
public class Amazon.S3.Model.ContinuationEvent : object {
    public ContinuationEvent(IEventStreamMessage message);
}
public class Amazon.S3.Model.CopyObjectRequest : PutWithACLRequest {
    private S3CannedACL cannedACL;
    private Nullable`1<bool> bucketKeyEnabled;
    private string srcBucket;
    private string srcKey;
    private string srcVersionId;
    private string dstBucket;
    private string dstKey;
    private RequestPayer requestPayer;
    private string expectedBucketOwner;
    private string expectedSourceBucketOwner;
    private ChecksumAlgorithm _checksumAlgorithm;
    private string etagToMatch;
    private string etagToNotMatch;
    private Nullable`1<DateTime> modifiedSinceDate;
    private Nullable`1<DateTime> unmodifiedSinceDate;
    private Nullable`1<DateTime> modifiedSinceDateUtc;
    private Nullable`1<DateTime> unmodifiedSinceDateUtc;
    private List`1<Tag> tagset;
    private S3MetadataDirective metadataDirective;
    private S3StorageClass storageClass;
    private ObjectLockLegalHoldStatus objectLockLegalHoldStatus;
    private ObjectLockMode objectLockMode;
    private Nullable`1<DateTime> objectLockRetainUntilDate;
    private string websiteRedirectLocation;
    private HeadersCollection headersCollection;
    private MetadataCollection metadataCollection;
    private ServerSideEncryptionMethod serverSideEncryption;
    private ServerSideEncryptionCustomerMethod serverSideCustomerEncryption;
    private string serverSideEncryptionCustomerProvidedKey;
    private string serverSideEncryptionCustomerProvidedKeyMD5;
    private string serverSideEncryptionKeyManagementServiceKeyId;
    private string serverSideEncryptionKeyManagementServiceEncryptionContext;
    private ServerSideEncryptionCustomerMethod copySourceServerSideCustomerEncryption;
    private string copySourceServerSideEncryptionCustomerProvidedKey;
    private string copySourceServerSideEncryptionCustomerProvidedKeyMD5;
    private bool disableTrimmingLeadingSlash;
    public S3CannedACL CannedACL { get; public set; }
    public Nullable`1<bool> BucketKeyEnabled { get; public set; }
    public string ContentType { get; public set; }
    [ObsoleteAttribute("Setting this property results in non-UTC DateTimes not being marshalled correctly. Use ModifiedSinceDateUtc instead. Setting either ModifiedSinceDate or ModifiedSinceDateUtc results in both ModifiedSinceDate and ModifiedSinceDateUtc being assigned, the latest assignment to either one of the two property is reflected in the value of both. ModifiedSinceDate is provided for backwards compatibility only and assigning a non-Utc DateTime to it results in the wrong timestamp being passed to the service.", "False")]
public Nullable`1<DateTime> ModifiedSinceDate { get; public set; }
    public Nullable`1<DateTime> ModifiedSinceDateUtc { get; public set; }
    [ObsoleteAttribute("Setting this property results in non-UTC DateTimes not being marshalled correctly. Use UnmodifiedSinceDateUtc instead. Setting either UnmodifiedSinceDate or UnmodifiedSinceDateUtc results in both UnmodifiedSinceDate and UnmodifiedSinceDateUtc being assigned, the latest assignment to either one of the two property is reflected in the value of both. UnmodifiedSinceDate is provided for backwards compatibility only and assigning a non-Utc DateTime to it results in the wrong timestamp being passed to the service.", "False")]
public Nullable`1<DateTime> UnmodifiedSinceDate { get; public set; }
    public Nullable`1<DateTime> UnmodifiedSinceDateUtc { get; public set; }
    public ServerSideEncryptionCustomerMethod CopySourceServerSideEncryptionCustomerMethod { get; public set; }
    [AWSPropertyAttribute]
public string CopySourceServerSideEncryptionCustomerProvidedKey { get; public set; }
    public string CopySourceServerSideEncryptionCustomerProvidedKeyMD5 { get; public set; }
    public string DestinationBucket { get; public set; }
    public string DestinationKey { get; public set; }
    public string ExpectedBucketOwner { get; public set; }
    public string ExpectedSourceBucketOwner { get; public set; }
    public MetadataCollection Metadata { get; }
    public S3MetadataDirective MetadataDirective { get; public set; }
    public ObjectLockLegalHoldStatus ObjectLockLegalHoldStatus { get; public set; }
    public ObjectLockMode ObjectLockMode { get; public set; }
    public DateTime ObjectLockRetainUntilDate { get; public set; }
    public RequestPayer RequestPayer { get; public set; }
    public string SourceBucket { get; public set; }
    public string SourceKey { get; public set; }
    public string SourceVersionId { get; public set; }
    public ServerSideEncryptionMethod ServerSideEncryptionMethod { get; public set; }
    public ServerSideEncryptionCustomerMethod ServerSideEncryptionCustomerMethod { get; public set; }
    [AWSPropertyAttribute]
public string ServerSideEncryptionCustomerProvidedKey { get; public set; }
    public string ServerSideEncryptionCustomerProvidedKeyMD5 { get; public set; }
    [AWSPropertyAttribute]
public string ServerSideEncryptionKeyManagementServiceEncryptionContext { get; public set; }
    [AWSPropertyAttribute]
public string ServerSideEncryptionKeyManagementServiceKeyId { get; public set; }
    public S3StorageClass StorageClass { get; public set; }
    public List`1<Tag> TagSet { get; public set; }
    public string WebsiteRedirectLocation { get; public set; }
    public string ETagToMatch { get; public set; }
    public string ETagToNotMatch { get; public set; }
    public HeadersCollection Headers { get; }
    public ChecksumAlgorithm ChecksumAlgorithm { get; public set; }
    public bool DisableTrimmingLeadingSlash { get; public set; }
    public S3CannedACL get_CannedACL();
    public void set_CannedACL(S3CannedACL value);
    internal bool IsSetCannedACL();
    public Nullable`1<bool> get_BucketKeyEnabled();
    public void set_BucketKeyEnabled(Nullable`1<bool> value);
    internal bool IsSetBucketKeyEnabled();
    public string get_ContentType();
    public void set_ContentType(string value);
    public Nullable`1<DateTime> get_ModifiedSinceDate();
    public void set_ModifiedSinceDate(Nullable`1<DateTime> value);
    public Nullable`1<DateTime> get_ModifiedSinceDateUtc();
    public void set_ModifiedSinceDateUtc(Nullable`1<DateTime> value);
    internal bool IsSetModifiedSinceDateUtc();
    public Nullable`1<DateTime> get_UnmodifiedSinceDate();
    public void set_UnmodifiedSinceDate(Nullable`1<DateTime> value);
    public Nullable`1<DateTime> get_UnmodifiedSinceDateUtc();
    public void set_UnmodifiedSinceDateUtc(Nullable`1<DateTime> value);
    internal bool IsSetUnmodifiedSinceDateUtc();
    public ServerSideEncryptionCustomerMethod get_CopySourceServerSideEncryptionCustomerMethod();
    public void set_CopySourceServerSideEncryptionCustomerMethod(ServerSideEncryptionCustomerMethod value);
    internal bool IsSetCopySourceServerSideEncryptionCustomerMethod();
    public string get_CopySourceServerSideEncryptionCustomerProvidedKey();
    public void set_CopySourceServerSideEncryptionCustomerProvidedKey(string value);
    internal bool IsSetCopySourceServerSideEncryptionCustomerProvidedKey();
    public string get_CopySourceServerSideEncryptionCustomerProvidedKeyMD5();
    public void set_CopySourceServerSideEncryptionCustomerProvidedKeyMD5(string value);
    internal bool IsSetCopySourceServerSideEncryptionCustomerProvidedKeyMD5();
    public string get_DestinationBucket();
    public void set_DestinationBucket(string value);
    internal bool IsSetDestinationBucket();
    public string get_DestinationKey();
    public void set_DestinationKey(string value);
    internal bool IsSetDestinationKey();
    public string get_ExpectedBucketOwner();
    public void set_ExpectedBucketOwner(string value);
    internal bool IsSetExpectedBucketOwner();
    public string get_ExpectedSourceBucketOwner();
    public void set_ExpectedSourceBucketOwner(string value);
    internal bool IsSetExpectedSourceBucketOwner();
    public MetadataCollection get_Metadata();
    public S3MetadataDirective get_MetadataDirective();
    public void set_MetadataDirective(S3MetadataDirective value);
    public ObjectLockLegalHoldStatus get_ObjectLockLegalHoldStatus();
    public void set_ObjectLockLegalHoldStatus(ObjectLockLegalHoldStatus value);
    internal bool IsSetObjectLockLegalHoldStatus();
    public ObjectLockMode get_ObjectLockMode();
    public void set_ObjectLockMode(ObjectLockMode value);
    internal bool IsSetObjectLockMode();
    public DateTime get_ObjectLockRetainUntilDate();
    public void set_ObjectLockRetainUntilDate(DateTime value);
    internal bool IsSetObjectLockRetainUntilDate();
    public RequestPayer get_RequestPayer();
    public void set_RequestPayer(RequestPayer value);
    internal bool IsSetRequestPayer();
    public string get_SourceBucket();
    public void set_SourceBucket(string value);
    internal bool IsSetSourceBucket();
    public string get_SourceKey();
    public void set_SourceKey(string value);
    internal bool IsSetSourceKey();
    public string get_SourceVersionId();
    public void set_SourceVersionId(string value);
    internal bool IsSetSourceVersionId();
    public ServerSideEncryptionMethod get_ServerSideEncryptionMethod();
    public void set_ServerSideEncryptionMethod(ServerSideEncryptionMethod value);
    internal bool IsSetServerSideEncryptionMethod();
    public ServerSideEncryptionCustomerMethod get_ServerSideEncryptionCustomerMethod();
    public void set_ServerSideEncryptionCustomerMethod(ServerSideEncryptionCustomerMethod value);
    internal bool IsSetServerSideEncryptionCustomerMethod();
    public string get_ServerSideEncryptionCustomerProvidedKey();
    public void set_ServerSideEncryptionCustomerProvidedKey(string value);
    internal bool IsSetServerSideEncryptionCustomerProvidedKey();
    public string get_ServerSideEncryptionCustomerProvidedKeyMD5();
    public void set_ServerSideEncryptionCustomerProvidedKeyMD5(string value);
    internal bool IsSetServerSideEncryptionCustomerProvidedKeyMD5();
    public string get_ServerSideEncryptionKeyManagementServiceEncryptionContext();
    public void set_ServerSideEncryptionKeyManagementServiceEncryptionContext(string value);
    internal bool IsSetServerSideEncryptionKeyManagementServiceEncryptionContext();
    public string get_ServerSideEncryptionKeyManagementServiceKeyId();
    public void set_ServerSideEncryptionKeyManagementServiceKeyId(string value);
    internal bool IsSetServerSideEncryptionKeyManagementServiceKeyId();
    public S3StorageClass get_StorageClass();
    public void set_StorageClass(S3StorageClass value);
    internal bool IsSetStorageClass();
    public List`1<Tag> get_TagSet();
    public void set_TagSet(List`1<Tag> value);
    internal bool IsSetTagSet();
    public string get_WebsiteRedirectLocation();
    public void set_WebsiteRedirectLocation(string value);
    internal bool IsSetWebsiteRedirectLocation();
    public string get_ETagToMatch();
    public void set_ETagToMatch(string value);
    internal bool IsSetETagToMatch();
    public string get_ETagToNotMatch();
    public void set_ETagToNotMatch(string value);
    internal bool IsSetETagToNotMatch();
    public HeadersCollection get_Headers();
    public ChecksumAlgorithm get_ChecksumAlgorithm();
    public void set_ChecksumAlgorithm(ChecksumAlgorithm value);
    internal bool IsSetChecksumAlgorithm();
    public bool get_DisableTrimmingLeadingSlash();
    public void set_DisableTrimmingLeadingSlash(bool value);
}
public class Amazon.S3.Model.CopyObjectResponse : AmazonWebServiceResponse {
    private string eTag;
    private string lastModified;
    private string _checksumCRC32;
    private string _checksumCRC32C;
    private string _checksumSHA1;
    private string _checksumSHA256;
    private Expiration expiration;
    private string srcVersionId;
    private string versionId;
    private ServerSideEncryptionMethod serverSideEncryption;
    private ServerSideEncryptionCustomerMethod serverSideCustomerEncryption;
    private string serverSideEncryptionCustomerProvidedKeyMD5;
    private string serverSideEncryptionKeyManagementServiceKeyId;
    private string serverSideEncryptionKeyManagementServiceEncryptionContext;
    private RequestCharged requestCharged;
    private Nullable`1<bool> bucketKeyEnabled;
    public Nullable`1<bool> BucketKeyEnabled { get; public set; }
    public string SourceVersionId { get; public set; }
    public Expiration Expiration { get; public set; }
    public RequestCharged RequestCharged { get; public set; }
    public ServerSideEncryptionMethod ServerSideEncryptionMethod { get; public set; }
    public ServerSideEncryptionCustomerMethod ServerSideEncryptionCustomerMethod { get; public set; }
    public string ServerSideEncryptionCustomerProvidedKeyMD5 { get; public set; }
    [AWSPropertyAttribute]
public string ServerSideEncryptionKeyManagementServiceEncryptionContext { get; public set; }
    [AWSPropertyAttribute]
public string ServerSideEncryptionKeyManagementServiceKeyId { get; public set; }
    public string VersionId { get; public set; }
    public string ETag { get; public set; }
    public string LastModified { get; public set; }
    public string ChecksumCRC32 { get; public set; }
    public string ChecksumCRC32C { get; public set; }
    public string ChecksumSHA1 { get; public set; }
    public string ChecksumSHA256 { get; public set; }
    public Nullable`1<bool> get_BucketKeyEnabled();
    public void set_BucketKeyEnabled(Nullable`1<bool> value);
    internal bool IsSetBucketKeyEnabled();
    public string get_SourceVersionId();
    public void set_SourceVersionId(string value);
    public Expiration get_Expiration();
    public void set_Expiration(Expiration value);
    public RequestCharged get_RequestCharged();
    public void set_RequestCharged(RequestCharged value);
    internal bool IsSetRequestCharged();
    public ServerSideEncryptionMethod get_ServerSideEncryptionMethod();
    public void set_ServerSideEncryptionMethod(ServerSideEncryptionMethod value);
    public ServerSideEncryptionCustomerMethod get_ServerSideEncryptionCustomerMethod();
    public void set_ServerSideEncryptionCustomerMethod(ServerSideEncryptionCustomerMethod value);
    public string get_ServerSideEncryptionCustomerProvidedKeyMD5();
    public void set_ServerSideEncryptionCustomerProvidedKeyMD5(string value);
    public string get_ServerSideEncryptionKeyManagementServiceEncryptionContext();
    public void set_ServerSideEncryptionKeyManagementServiceEncryptionContext(string value);
    public string get_ServerSideEncryptionKeyManagementServiceKeyId();
    public void set_ServerSideEncryptionKeyManagementServiceKeyId(string value);
    public string get_VersionId();
    public void set_VersionId(string value);
    public string get_ETag();
    public void set_ETag(string value);
    public string get_LastModified();
    public void set_LastModified(string value);
    public string get_ChecksumCRC32();
    public void set_ChecksumCRC32(string value);
    internal bool IsSetChecksumCRC32();
    public string get_ChecksumCRC32C();
    public void set_ChecksumCRC32C(string value);
    internal bool IsSetChecksumCRC32C();
    public string get_ChecksumSHA1();
    public void set_ChecksumSHA1(string value);
    internal bool IsSetChecksumSHA1();
    public string get_ChecksumSHA256();
    public void set_ChecksumSHA256(string value);
    internal bool IsSetChecksumSHA256();
}
public class Amazon.S3.Model.CopyPartRequest : AmazonWebServiceRequest {
    private string srcBucket;
    private string srcKey;
    private string srcVersionId;
    private string dstBucket;
    private string dstKey;
    private string uploadId;
    private List`1<string> etagsToMatch;
    private List`1<string> etagsToNotMatch;
    private Nullable`1<DateTime> modifiedSinceDate;
    private Nullable`1<DateTime> unmodifiedSinceDate;
    private Nullable`1<int> partNumber;
    private Nullable`1<long> firstByte;
    private Nullable`1<long> lastByte;
    private string expectedBucketOwner;
    private string expectedSourceBucketOwner;
    private RequestPayer requestPayer;
    [ObsoleteAttribute("Use ServerSideEncryptionMethod in InitiateMultipartUploadRequest instead.")]
private ServerSideEncryptionMethod serverSideEncryption;
    private ServerSideEncryptionCustomerMethod serverSideCustomerEncryption;
    private string serverSideEncryptionCustomerProvidedKey;
    private string serverSideEncryptionCustomerProvidedKeyMD5;
    [ObsoleteAttribute("Use ServerSideEncryptionKeyManagementServiceKeyId in InitiateMultipartUploadRequest instead.")]
private string serverSideEncryptionKeyManagementServiceKeyId;
    private ServerSideEncryptionCustomerMethod copySourceServerSideCustomerEncryption;
    private string copySourceServerSideEncryptionCustomerProvidedKey;
    private string copySourceServerSideEncryptionCustomerProvidedKeyMD5;
    private bool disableTrimmingLeadingSlash;
    public string SourceBucket { get; public set; }
    public string SourceKey { get; public set; }
    public string SourceVersionId { get; public set; }
    public string DestinationBucket { get; public set; }
    public string DestinationKey { get; public set; }
    public string UploadId { get; public set; }
    public List`1<string> ETagToMatch { get; public set; }
    public List`1<string> ETagsToNotMatch { get; public set; }
    public DateTime ModifiedSinceDate { get; public set; }
    public DateTime UnmodifiedSinceDate { get; public set; }
    public Nullable`1<int> PartNumber { get; public set; }
    public Nullable`1<long> FirstByte { get; public set; }
    public Nullable`1<long> LastByte { get; public set; }
    [ObsoleteAttribute("Use ServerSideEncryptionMethod in InitiateMultipartUploadRequest instead.")]
public ServerSideEncryptionMethod ServerSideEncryptionMethod { get; public set; }
    public ServerSideEncryptionCustomerMethod ServerSideEncryptionCustomerMethod { get; public set; }
    [AWSPropertyAttribute]
public string ServerSideEncryptionCustomerProvidedKey { get; public set; }
    public string ServerSideEncryptionCustomerProvidedKeyMD5 { get; public set; }
    [ObsoleteAttribute("Use ServerSideEncryptionKeyManagementServiceKeyId in InitiateMultipartUploadRequest instead.")]
[AWSPropertyAttribute]
public string ServerSideEncryptionKeyManagementServiceKeyId { get; public set; }
    public ServerSideEncryptionCustomerMethod CopySourceServerSideEncryptionCustomerMethod { get; public set; }
    [AWSPropertyAttribute]
public string CopySourceServerSideEncryptionCustomerProvidedKey { get; public set; }
    public string CopySourceServerSideEncryptionCustomerProvidedKeyMD5 { get; public set; }
    public string ExpectedBucketOwner { get; public set; }
    public string ExpectedSourceBucketOwner { get; public set; }
    public RequestPayer RequestPayer { get; public set; }
    public bool DisableTrimmingLeadingSlash { get; public set; }
    public string get_SourceBucket();
    public void set_SourceBucket(string value);
    internal bool IsSetSourceBucket();
    public string get_SourceKey();
    public void set_SourceKey(string value);
    internal bool IsSetSourceKey();
    public string get_SourceVersionId();
    public void set_SourceVersionId(string value);
    internal bool IsSetSourceVersionId();
    public string get_DestinationBucket();
    public void set_DestinationBucket(string value);
    internal bool IsSetDestinationBucket();
    public string get_DestinationKey();
    public void set_DestinationKey(string value);
    internal bool IsSetDestinationKey();
    public string get_UploadId();
    public void set_UploadId(string value);
    internal bool IsSetUploadId();
    public List`1<string> get_ETagToMatch();
    public void set_ETagToMatch(List`1<string> value);
    internal bool IsSetETagToMatch();
    public List`1<string> get_ETagsToNotMatch();
    public void set_ETagsToNotMatch(List`1<string> value);
    internal bool IsSetETagToNotMatch();
    public DateTime get_ModifiedSinceDate();
    public void set_ModifiedSinceDate(DateTime value);
    internal bool IsSetModifiedSinceDate();
    public DateTime get_UnmodifiedSinceDate();
    public void set_UnmodifiedSinceDate(DateTime value);
    internal bool IsSetUnmodifiedSinceDate();
    public Nullable`1<int> get_PartNumber();
    public void set_PartNumber(Nullable`1<int> value);
    internal bool IsSetPartNumber();
    public Nullable`1<long> get_FirstByte();
    public void set_FirstByte(Nullable`1<long> value);
    internal bool IsSetFirstByte();
    public Nullable`1<long> get_LastByte();
    public void set_LastByte(Nullable`1<long> value);
    internal bool IsSetLastByte();
    public ServerSideEncryptionMethod get_ServerSideEncryptionMethod();
    public void set_ServerSideEncryptionMethod(ServerSideEncryptionMethod value);
    [ObsoleteAttribute("Use ServerSideEncryptionMethod in InitiateMultipartUploadRequest instead.")]
internal bool IsSetServerSideEncryptionMethod();
    public ServerSideEncryptionCustomerMethod get_ServerSideEncryptionCustomerMethod();
    public void set_ServerSideEncryptionCustomerMethod(ServerSideEncryptionCustomerMethod value);
    internal bool IsSetServerSideEncryptionCustomerMethod();
    public string get_ServerSideEncryptionCustomerProvidedKey();
    public void set_ServerSideEncryptionCustomerProvidedKey(string value);
    internal bool IsSetServerSideEncryptionCustomerProvidedKey();
    public string get_ServerSideEncryptionCustomerProvidedKeyMD5();
    public void set_ServerSideEncryptionCustomerProvidedKeyMD5(string value);
    internal bool IsSetServerSideEncryptionCustomerProvidedKeyMD5();
    public string get_ServerSideEncryptionKeyManagementServiceKeyId();
    public void set_ServerSideEncryptionKeyManagementServiceKeyId(string value);
    [ObsoleteAttribute("Use ServerSideEncryptionKeyManagementServiceKeyId in InitiateMultipartUploadRequest instead.")]
internal bool IsSetServerSideEncryptionKeyManagementServiceKeyId();
    public ServerSideEncryptionCustomerMethod get_CopySourceServerSideEncryptionCustomerMethod();
    public void set_CopySourceServerSideEncryptionCustomerMethod(ServerSideEncryptionCustomerMethod value);
    internal bool IsSetCopySourceServerSideEncryptionCustomerMethod();
    public string get_CopySourceServerSideEncryptionCustomerProvidedKey();
    public void set_CopySourceServerSideEncryptionCustomerProvidedKey(string value);
    internal bool IsSetCopySourceServerSideEncryptionCustomerProvidedKey();
    public string get_CopySourceServerSideEncryptionCustomerProvidedKeyMD5();
    public void set_CopySourceServerSideEncryptionCustomerProvidedKeyMD5(string value);
    internal bool IsSetCopySourceServerSideEncryptionCustomerProvidedKeyMD5();
    public string get_ExpectedBucketOwner();
    public void set_ExpectedBucketOwner(string value);
    internal bool IsSetExpectedBucketOwner();
    public string get_ExpectedSourceBucketOwner();
    public void set_ExpectedSourceBucketOwner(string value);
    internal bool IsSetExpectedSourceBucketOwner();
    public RequestPayer get_RequestPayer();
    public void set_RequestPayer(RequestPayer value);
    internal bool IsSetRequestPayer();
    public bool get_DisableTrimmingLeadingSlash();
    public void set_DisableTrimmingLeadingSlash(bool value);
}
public class Amazon.S3.Model.CopyPartResponse : AmazonWebServiceResponse {
    private string _checksumCRC32;
    private string _checksumCRC32C;
    private string _checksumSHA1;
    private string _checksumSHA256;
    private Nullable`1<DateTime> lastModified;
    private string eTag;
    private string copySourceVersionId;
    private Nullable`1<int> partNumber;
    private ServerSideEncryptionMethod serverSideEncryption;
    private string serverSideEncryptionKeyManagementServiceKeyId;
    private Nullable`1<bool> bucketKeyEnabled;
    public string CopySourceVersionId { get; public set; }
    public string ChecksumCRC32 { get; public set; }
    public string ChecksumCRC32C { get; public set; }
    public string ChecksumSHA1 { get; public set; }
    public string ChecksumSHA256 { get; public set; }
    public string ETag { get; public set; }
    public Nullable`1<DateTime> LastModified { get; public set; }
    public ServerSideEncryptionMethod ServerSideEncryptionMethod { get; public set; }
    public Nullable`1<int> PartNumber { get; public set; }
    [AWSPropertyAttribute]
public string ServerSideEncryptionKeyManagementServiceKeyId { get; public set; }
    public bool BucketKeyEnabled { get; public set; }
    public string get_CopySourceVersionId();
    public void set_CopySourceVersionId(string value);
    internal bool IsSetCopySourceVersionId();
    public string get_ChecksumCRC32();
    public void set_ChecksumCRC32(string value);
    internal bool IsSetChecksumCRC32();
    public string get_ChecksumCRC32C();
    public void set_ChecksumCRC32C(string value);
    internal bool IsSetChecksumCRC32C();
    public string get_ChecksumSHA1();
    public void set_ChecksumSHA1(string value);
    internal bool IsSetChecksumSHA1();
    public string get_ChecksumSHA256();
    public void set_ChecksumSHA256(string value);
    internal bool IsSetChecksumSHA256();
    public string get_ETag();
    public void set_ETag(string value);
    internal bool IsSetETag();
    public Nullable`1<DateTime> get_LastModified();
    public void set_LastModified(Nullable`1<DateTime> value);
    internal bool IsSetLastModified();
    public ServerSideEncryptionMethod get_ServerSideEncryptionMethod();
    public void set_ServerSideEncryptionMethod(ServerSideEncryptionMethod value);
    internal bool IsSetServerSideEncryptionMethod();
    public Nullable`1<int> get_PartNumber();
    public void set_PartNumber(Nullable`1<int> value);
    public string get_ServerSideEncryptionKeyManagementServiceKeyId();
    public void set_ServerSideEncryptionKeyManagementServiceKeyId(string value);
    internal bool IsSetServerSideEncryptionKeyManagementServiceKeyId();
    public bool get_BucketKeyEnabled();
    public void set_BucketKeyEnabled(bool value);
    internal bool IsSetBucketKeyEnabled();
}
public class Amazon.S3.Model.CORSConfiguration : object {
    private List`1<CORSRule> rules;
    public List`1<CORSRule> Rules { get; public set; }
    public List`1<CORSRule> get_Rules();
    public void set_Rules(List`1<CORSRule> value);
    internal bool IsSetRules();
}
public class Amazon.S3.Model.CORSRule : object {
    private string id;
    private List`1<string> allowedMethods;
    private List`1<string> allowedOrigins;
    private List`1<string> exposeHeaders;
    private List`1<string> allowedHeaders;
    private Nullable`1<int> maxAgeSeconds;
    public List`1<string> AllowedMethods { get; public set; }
    public List`1<string> AllowedOrigins { get; public set; }
    public string Id { get; public set; }
    public List`1<string> ExposeHeaders { get; public set; }
    public Nullable`1<int> MaxAgeSeconds { get; public set; }
    public List`1<string> AllowedHeaders { get; public set; }
    public List`1<string> get_AllowedMethods();
    public void set_AllowedMethods(List`1<string> value);
    internal bool IsSetAllowedMethods();
    public List`1<string> get_AllowedOrigins();
    public void set_AllowedOrigins(List`1<string> value);
    internal bool IsSetAllowedOrigins();
    public string get_Id();
    public void set_Id(string value);
    internal bool IsSetId();
    public List`1<string> get_ExposeHeaders();
    public void set_ExposeHeaders(List`1<string> value);
    internal bool IsSetExposeHeaders();
    public Nullable`1<int> get_MaxAgeSeconds();
    public void set_MaxAgeSeconds(Nullable`1<int> value);
    internal bool IsSetMaxAgeSeconds();
    public List`1<string> get_AllowedHeaders();
    public void set_AllowedHeaders(List`1<string> value);
    internal bool IsSetAllowedHeaders();
}
public class Amazon.S3.Model.CreateSessionRequest : AmazonWebServiceRequest {
    private string _bucketName;
    private SessionMode _sessionMode;
    public string BucketName { get; public set; }
    public SessionMode SessionMode { get; public set; }
    public string get_BucketName();
    public void set_BucketName(string value);
    internal bool IsSetBucketName();
    public SessionMode get_SessionMode();
    public void set_SessionMode(SessionMode value);
    internal bool IsSetSessionMode();
}
public class Amazon.S3.Model.CreateSessionResponse : AmazonWebServiceResponse {
    private SessionCredentials _credentials;
    [AWSPropertyAttribute]
public SessionCredentials Credentials { get; public set; }
    public SessionCredentials get_Credentials();
    public void set_Credentials(SessionCredentials value);
    internal bool IsSetCredentials();
}
public class Amazon.S3.Model.CSVInput : object {
    [CompilerGeneratedAttribute]
private FileHeaderInfo <FileHeaderInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Comments>k__BackingField;
    [CompilerGeneratedAttribute]
private string <QuoteEscapeCharacter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RecordDelimiter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FieldDelimiter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <QuoteCharacter>k__BackingField;
    private Nullable`1<bool> _allowQuotedRecordDelimiter;
    public FileHeaderInfo FileHeaderInfo { get; public set; }
    public string Comments { get; public set; }
    public string QuoteEscapeCharacter { get; public set; }
    public string RecordDelimiter { get; public set; }
    public string FieldDelimiter { get; public set; }
    public string QuoteCharacter { get; public set; }
    public bool AllowQuotedRecordDelimiter { get; public set; }
    [CompilerGeneratedAttribute]
public FileHeaderInfo get_FileHeaderInfo();
    [CompilerGeneratedAttribute]
public void set_FileHeaderInfo(FileHeaderInfo value);
    internal bool IsSetFileHeaderInfo();
    [CompilerGeneratedAttribute]
public string get_Comments();
    [CompilerGeneratedAttribute]
public void set_Comments(string value);
    internal bool IsSetComments();
    [CompilerGeneratedAttribute]
public string get_QuoteEscapeCharacter();
    [CompilerGeneratedAttribute]
public void set_QuoteEscapeCharacter(string value);
    internal bool IsSetQuoteEscapeCharacter();
    [CompilerGeneratedAttribute]
public string get_RecordDelimiter();
    [CompilerGeneratedAttribute]
public void set_RecordDelimiter(string value);
    internal bool IsSetRecordDelimiter();
    [CompilerGeneratedAttribute]
public string get_FieldDelimiter();
    [CompilerGeneratedAttribute]
public void set_FieldDelimiter(string value);
    internal bool IsSetFieldDelimiter();
    [CompilerGeneratedAttribute]
public string get_QuoteCharacter();
    [CompilerGeneratedAttribute]
public void set_QuoteCharacter(string value);
    internal bool IsSetQuoteCharacter();
    public bool get_AllowQuotedRecordDelimiter();
    public void set_AllowQuotedRecordDelimiter(bool value);
    internal bool IsSetAllowQuotedRecordDelimiter();
    internal void Marshall(string memberName, XmlWriter xmlWriter);
}
public class Amazon.S3.Model.CSVOutput : object {
    [CompilerGeneratedAttribute]
private QuoteFields <QuoteFields>k__BackingField;
    [CompilerGeneratedAttribute]
private string <QuoteEscapeCharacter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RecordDelimiter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FieldDelimiter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <QuoteCharacter>k__BackingField;
    public QuoteFields QuoteFields { get; public set; }
    public string QuoteEscapeCharacter { get; public set; }
    public string RecordDelimiter { get; public set; }
    public string FieldDelimiter { get; public set; }
    public string QuoteCharacter { get; public set; }
    [CompilerGeneratedAttribute]
public QuoteFields get_QuoteFields();
    [CompilerGeneratedAttribute]
public void set_QuoteFields(QuoteFields value);
    internal bool IsSetQuoteFields();
    [CompilerGeneratedAttribute]
public string get_QuoteEscapeCharacter();
    [CompilerGeneratedAttribute]
public void set_QuoteEscapeCharacter(string value);
    internal bool IsSetQuoteEscapeCharacter();
    [CompilerGeneratedAttribute]
public string get_RecordDelimiter();
    [CompilerGeneratedAttribute]
public void set_RecordDelimiter(string value);
    internal bool IsSetRecordDelimiter();
    [CompilerGeneratedAttribute]
public string get_FieldDelimiter();
    [CompilerGeneratedAttribute]
public void set_FieldDelimiter(string value);
    internal bool IsSetFieldDelimiter();
    [CompilerGeneratedAttribute]
public string get_QuoteCharacter();
    [CompilerGeneratedAttribute]
public void set_QuoteCharacter(string value);
    internal bool IsSetQuoteCharacter();
    internal void Marshall(string memberName, XmlWriter xmlWriter);
}
public class Amazon.S3.Model.DefaultRetention : object {
    private Nullable`1<int> _days;
    private ObjectLockRetentionMode _mode;
    private Nullable`1<int> _years;
    public Nullable`1<int> Days { get; public set; }
    public ObjectLockRetentionMode Mode { get; public set; }
    public Nullable`1<int> Years { get; public set; }
    public Nullable`1<int> get_Days();
    public void set_Days(Nullable`1<int> value);
    internal bool IsSetDays();
    public ObjectLockRetentionMode get_Mode();
    public void set_Mode(ObjectLockRetentionMode value);
    internal bool IsSetMode();
    public Nullable`1<int> get_Years();
    public void set_Years(Nullable`1<int> value);
    internal bool IsSetYears();
}
public class Amazon.S3.Model.DeleteBucketAnalyticsConfigurationRequest : AmazonWebServiceRequest {
    private string bucketName;
    private string analyticsId;
    private string expectedBucketOwner;
    public string BucketName { get; public set; }
    public string AnalyticsId { get; public set; }
    public string ExpectedBucketOwner { get; public set; }
    public string get_BucketName();
    public void set_BucketName(string value);
    internal bool IsSetBucketName();
    public string get_AnalyticsId();
    public void set_AnalyticsId(string value);
    internal bool IsSetAnalyticsId();
    public string get_ExpectedBucketOwner();
    public void set_ExpectedBucketOwner(string value);
    internal bool IsSetExpectedBucketOwner();
}
public class Amazon.S3.Model.DeleteBucketAnalyticsConfigurationResponse : AmazonWebServiceResponse {
}
public class Amazon.S3.Model.DeleteBucketEncryptionRequest : AmazonWebServiceRequest {
    private string bucketName;
    private string expectedBucketOwner;
    public string BucketName { get; public set; }
    public string ExpectedBucketOwner { get; public set; }
    public string get_BucketName();
    public void set_BucketName(string value);
    internal bool IsSetBucketName();
    public string get_ExpectedBucketOwner();
    public void set_ExpectedBucketOwner(string value);
    internal bool IsSetExpectedBucketOwner();
}
public class Amazon.S3.Model.DeleteBucketEncryptionResponse : AmazonWebServiceResponse {
}
public class Amazon.S3.Model.DeleteBucketIntelligentTieringConfigurationRequest : AmazonWebServiceRequest {
    private string bucketName;
    private string intelligentTieiringId;
    public string BucketName { get; public set; }
    public string IntelligentTieringId { get; public set; }
    public string get_BucketName();
    public void set_BucketName(string value);
    internal bool IsSetBucketName();
    public string get_IntelligentTieringId();
    public void set_IntelligentTieringId(string value);
    internal bool IsSetIntelligentTieiringId();
}
public class Amazon.S3.Model.DeleteBucketIntelligentTieringConfigurationResponse : AmazonWebServiceResponse {
}
public class Amazon.S3.Model.DeleteBucketInventoryConfigurationRequest : AmazonWebServiceRequest {
    private string bucketName;
    private string inventoryId;
    private string expectedBucketOwner;
    public string BucketName { get; public set; }
    public string InventoryId { get; public set; }
    public string ExpectedBucketOwner { get; public set; }
    public string get_BucketName();
    public void set_BucketName(string value);
    internal bool IsSetBucketName();
    public string get_InventoryId();
    public void set_InventoryId(string value);
    internal bool IsSetInventoryId();
    public string get_ExpectedBucketOwner();
    public void set_ExpectedBucketOwner(string value);
    internal bool IsSetExpectedBucketOwner();
}
public class Amazon.S3.Model.DeleteBucketInventoryConfigurationResponse : AmazonWebServiceResponse {
}
public class Amazon.S3.Model.DeleteBucketMetricsConfigurationRequest : AmazonWebServiceRequest {
    private string bucketName;
    private string metricsId;
    private string expectedBucketOwner;
    public string BucketName { get; public set; }
    public string MetricsId { get; public set; }
    public string ExpectedBucketOwner { get; public set; }
    public string get_BucketName();
    public void set_BucketName(string value);
    internal bool IsSetBucketName();
    public string get_MetricsId();
    public void set_MetricsId(string value);
    internal bool IsSetMetricsId();
    public string get_ExpectedBucketOwner();
    public void set_ExpectedBucketOwner(string value);
    internal bool IsSetExpectedBucketOwner();
}
public class Amazon.S3.Model.DeleteBucketMetricsConfigurationResponse : AmazonWebServiceResponse {
}
public class Amazon.S3.Model.DeleteBucketOwnershipControlsRequest : AmazonWebServiceRequest {
    private string bucketName;
    private string expectedBucketOwner;
    public string BucketName { get; public set; }
    public string ExpectedBucketOwner { get; public set; }
    public string get_BucketName();
    public void set_BucketName(string value);
    internal bool IsSetBucketName();
    public string get_ExpectedBucketOwner();
    public void set_ExpectedBucketOwner(string value);
    internal bool IsSetExpectedBucketOwner();
}
public class Amazon.S3.Model.DeleteBucketOwnershipControlsResponse : AmazonWebServiceResponse {
}
public class Amazon.S3.Model.DeleteBucketPolicyRequest : AmazonWebServiceRequest {
    private string bucketName;
    private string expectedBucketOwner;
    public string BucketName { get; public set; }
    public string ExpectedBucketOwner { get; public set; }
    public string get_BucketName();
    public void set_BucketName(string value);
    internal bool IsSetBucketName();
    public string get_ExpectedBucketOwner();
    public void set_ExpectedBucketOwner(string value);
    internal bool IsSetExpectedBucketOwner();
}
public class Amazon.S3.Model.DeleteBucketPolicyResponse : AmazonWebServiceResponse {
}
public class Amazon.S3.Model.DeleteBucketReplicationRequest : AmazonWebServiceRequest {
    private string bucketName;
    private string expectedBucketOwner;
    public string BucketName { get; public set; }
    public string ExpectedBucketOwner { get; public set; }
    public string get_BucketName();
    public void set_BucketName(string value);
    internal bool IsSetBucketName();
    public string get_ExpectedBucketOwner();
    public void set_ExpectedBucketOwner(string value);
    internal bool IsSetExpectedBucketOwner();
}
public class Amazon.S3.Model.DeleteBucketReplicationResponse : AmazonWebServiceResponse {
}
public class Amazon.S3.Model.DeleteBucketRequest : AmazonWebServiceRequest {
    private string bucketName;
    private S3Region bucketRegion;
    private bool useClientRegion;
    private string expectedBucketOwner;
    public string BucketName { get; public set; }
    public S3Region BucketRegion { get; public set; }
    public bool UseClientRegion { get; public set; }
    public string ExpectedBucketOwner { get; public set; }
    public string get_BucketName();
    public void set_BucketName(string value);
    internal bool IsSetBucketName();
    public S3Region get_BucketRegion();
    public void set_BucketRegion(S3Region value);
    internal bool IsSetBucketRegion();
    public bool get_UseClientRegion();
    public void set_UseClientRegion(bool value);
    public string get_ExpectedBucketOwner();
    public void set_ExpectedBucketOwner(string value);
    internal bool IsSetExpectedBucketOwner();
}
public class Amazon.S3.Model.DeleteBucketResponse : AmazonWebServiceResponse {
}
public class Amazon.S3.Model.DeleteBucketTaggingRequest : AmazonWebServiceRequest {
    private string bucketName;
    private string expectedBucketOwner;
    public string BucketName { get; public set; }
    public string ExpectedBucketOwner { get; public set; }
    public string get_BucketName();
    public void set_BucketName(string value);
    internal bool IsSetBucketName();
    public string get_ExpectedBucketOwner();
    public void set_ExpectedBucketOwner(string value);
    internal bool IsSetExpectedBucketOwner();
}
public class Amazon.S3.Model.DeleteBucketTaggingResponse : AmazonWebServiceResponse {
}
public class Amazon.S3.Model.DeleteBucketWebsiteRequest : AmazonWebServiceRequest {
    private string bucketName;
    private string expectedBucketOwner;
    public string BucketName { get; public set; }
    public string ExpectedBucketOwner { get; public set; }
    public string get_BucketName();
    public void set_BucketName(string value);
    internal bool IsSetBucketName();
    public string get_ExpectedBucketOwner();
    public void set_ExpectedBucketOwner(string value);
    internal bool IsSetExpectedBucketOwner();
}
public class Amazon.S3.Model.DeleteBucketWebsiteResponse : AmazonWebServiceResponse {
}
public class Amazon.S3.Model.DeleteCORSConfigurationRequest : AmazonWebServiceRequest {
    private string bucketName;
    private string expectedBucketOwner;
    public string BucketName { get; public set; }
    public string ExpectedBucketOwner { get; public set; }
    public string get_BucketName();
    public void set_BucketName(string value);
    internal bool IsSetBucketName();
    public string get_ExpectedBucketOwner();
    public void set_ExpectedBucketOwner(string value);
    internal bool IsSetExpectedBucketOwner();
}
public class Amazon.S3.Model.DeleteCORSConfigurationResponse : AmazonWebServiceResponse {
}
public class Amazon.S3.Model.DeletedObject : object {
    private Nullable`1<bool> deleteMarker;
    private string deleteMarkerVersionId;
    private string key;
    private string versionId;
    public Nullable`1<bool> DeleteMarker { get; public set; }
    public string DeleteMarkerVersionId { get; public set; }
    public string Key { get; public set; }
    public string VersionId { get; public set; }
    public Nullable`1<bool> get_DeleteMarker();
    public void set_DeleteMarker(Nullable`1<bool> value);
    internal bool IsSetDeleteMarker();
    public string get_DeleteMarkerVersionId();
    public void set_DeleteMarkerVersionId(string value);
    internal bool IsSetDeleteMarkerVersionId();
    public string get_Key();
    public void set_Key(string value);
    internal bool IsSetKey();
    public string get_VersionId();
    public void set_VersionId(string value);
    internal bool IsSetVersionId();
}
public class Amazon.S3.Model.DeleteError : object {
    private string code;
    private string key;
    private string message;
    private string versionId;
    public string Key { get; public set; }
    public string VersionId { get; public set; }
    public string Code { get; public set; }
    public string Message { get; public set; }
    public string get_Key();
    public void set_Key(string value);
    public string get_VersionId();
    public void set_VersionId(string value);
    public string get_Code();
    public void set_Code(string value);
    public string get_Message();
    public void set_Message(string value);
}
public class Amazon.S3.Model.DeleteLifecycleConfigurationRequest : AmazonWebServiceRequest {
    private string bucketName;
    private string expectedBucketOwner;
    public string BucketName { get; public set; }
    public string ExpectedBucketOwner { get; public set; }
    public string get_BucketName();
    public void set_BucketName(string value);
    internal bool IsSetBucketName();
    public string get_ExpectedBucketOwner();
    public void set_ExpectedBucketOwner(string value);
    internal bool IsSetExpectedBucketOwner();
}
public class Amazon.S3.Model.DeleteLifecycleConfigurationResponse : AmazonWebServiceResponse {
}
public class Amazon.S3.Model.DeleteMarkerReplication : object {
    private DeleteMarkerReplicationStatus status;
    public DeleteMarkerReplicationStatus Status { get; public set; }
    public DeleteMarkerReplicationStatus get_Status();
    public void set_Status(DeleteMarkerReplicationStatus value);
    internal bool IsSetStatus();
}
public class Amazon.S3.Model.DeleteObjectRequest : AmazonWebServiceRequest {
    private string bucketName;
    private Nullable`1<bool> bypassGovernanceRetention;
    private string expectedBucketOwner;
    private string key;
    private MfaCodes mfaCodes;
    private RequestPayer requestPayer;
    private string versionId;
    public string BucketName { get; public set; }
    public Nullable`1<bool> BypassGovernanceRetention { get; public set; }
    public string ExpectedBucketOwner { get; public set; }
    public string Key { get; public set; }
    public MfaCodes MfaCodes { get; public set; }
    public RequestPayer RequestPayer { get; public set; }
    public string VersionId { get; public set; }
    public string get_BucketName();
    public void set_BucketName(string value);
    internal bool IsSetBucketName();
    public Nullable`1<bool> get_BypassGovernanceRetention();
    public void set_BypassGovernanceRetention(Nullable`1<bool> value);
    internal bool IsSetBypassGovernanceRetention();
    public string get_ExpectedBucketOwner();
    public void set_ExpectedBucketOwner(string value);
    internal bool IsSetExpectedBucketOwner();
    public string get_Key();
    public void set_Key(string value);
    internal bool IsSetKey();
    public MfaCodes get_MfaCodes();
    public void set_MfaCodes(MfaCodes value);
    internal bool IsSetMfaCodes();
    public RequestPayer get_RequestPayer();
    public void set_RequestPayer(RequestPayer value);
    internal bool IsSetRequestPayer();
    public string get_VersionId();
    public void set_VersionId(string value);
    internal bool IsSetVersionId();
}
public class Amazon.S3.Model.DeleteObjectResponse : AmazonWebServiceResponse {
    private string deleteMarker;
    private string versionId;
    private RequestCharged requestCharged;
    public string DeleteMarker { get; public set; }
    public string VersionId { get; public set; }
    public RequestCharged RequestCharged { get; public set; }
    public string get_DeleteMarker();
    public void set_DeleteMarker(string value);
    internal bool IsSetDeleteMarker();
    public string get_VersionId();
    public void set_VersionId(string value);
    internal bool IsSetVersionId();
    public RequestCharged get_RequestCharged();
    public void set_RequestCharged(RequestCharged value);
    internal bool IsSetRequestCharged();
}
public class Amazon.S3.Model.DeleteObjectsRequest : AmazonWebServiceRequest {
    private string bucketName;
    private Nullable`1<bool> bypassGovernanceRetention;
    private ChecksumAlgorithm _checksumAlgorithm;
    private List`1<KeyVersion> objects;
    private Nullable`1<bool> quiet;
    private MfaCodes mfaCodes;
    private RequestPayer requestPayer;
    private string expectedBucketOwner;
    public string BucketName { get; public set; }
    public Nullable`1<bool> BypassGovernanceRetention { get; public set; }
    public ChecksumAlgorithm ChecksumAlgorithm { get; public set; }
    public string ExpectedBucketOwner { get; public set; }
    public List`1<KeyVersion> Objects { get; public set; }
    public MfaCodes MfaCodes { get; public set; }
    public RequestPayer RequestPayer { get; public set; }
    public Nullable`1<bool> Quiet { get; public set; }
    public string get_BucketName();
    public void set_BucketName(string value);
    internal bool IsSetBucketName();
    public Nullable`1<bool> get_BypassGovernanceRetention();
    public void set_BypassGovernanceRetention(Nullable`1<bool> value);
    internal bool IsSetBypassGovernanceRetention();
    public ChecksumAlgorithm get_ChecksumAlgorithm();
    public void set_ChecksumAlgorithm(ChecksumAlgorithm value);
    internal bool IsSetChecksumAlgorithm();
    public string get_ExpectedBucketOwner();
    public void set_ExpectedBucketOwner(string value);
    internal bool IsSetExpectedBucketOwner();
    public List`1<KeyVersion> get_Objects();
    public void set_Objects(List`1<KeyVersion> value);
    internal bool IsSetObjects();
    public MfaCodes get_MfaCodes();
    public void set_MfaCodes(MfaCodes value);
    internal bool IsSetMfaCodes();
    public RequestPayer get_RequestPayer();
    public void set_RequestPayer(RequestPayer value);
    internal bool IsSetRequestPayer();
    public Nullable`1<bool> get_Quiet();
    public void set_Quiet(Nullable`1<bool> value);
    internal bool IsSetQuiet();
    public void AddKey(string key);
    public void AddKey(string key, string version);
    private void AddKey(KeyVersion keyVersion);
}
public class Amazon.S3.Model.DeleteObjectsResponse : AmazonWebServiceResponse {
    private List`1<DeletedObject> deleted;
    private List`1<DeleteError> errors;
    private RequestCharged requestCharged;
    public List`1<DeletedObject> DeletedObjects { get; public set; }
    public List`1<DeleteError> DeleteErrors { get; public set; }
    public RequestCharged RequestCharged { get; public set; }
    public List`1<DeletedObject> get_DeletedObjects();
    public void set_DeletedObjects(List`1<DeletedObject> value);
    internal bool IsSetDeletedObjects();
    public List`1<DeleteError> get_DeleteErrors();
    public void set_DeleteErrors(List`1<DeleteError> value);
    internal bool IsSetDeleteErrors();
    public RequestCharged get_RequestCharged();
    public void set_RequestCharged(RequestCharged value);
    internal bool IsSetRequestCharged();
}
public class Amazon.S3.Model.DeleteObjectTaggingRequest : AmazonWebServiceRequest {
    private string bucketName;
    private string expectedBucketOwner;
    private string key;
    private string versionId;
    public string BucketName { get; public set; }
    public string ExpectedBucketOwner { get; public set; }
    public string Key { get; public set; }
    public string VersionId { get; public set; }
    public string get_BucketName();
    public void set_BucketName(string value);
    internal bool IsSetBucketName();
    public string get_ExpectedBucketOwner();
    public void set_ExpectedBucketOwner(string value);
    internal bool IsSetExpectedBucketOwner();
    public string get_Key();
    public void set_Key(string value);
    internal bool IsSetKey();
    public string get_VersionId();
    public void set_VersionId(string value);
    internal bool IsSetVersionId();
}
public class Amazon.S3.Model.DeleteObjectTaggingResponse : AmazonWebServiceResponse {
    private string versionId;
    public string VersionId { get; public set; }
    public string get_VersionId();
    public void set_VersionId(string value);
    internal bool IsSetVersionId();
}
public class Amazon.S3.Model.DeletePublicAccessBlockRequest : AmazonWebServiceRequest {
    private string bucketName;
    private string expectedBucketOwner;
    public string BucketName { get; public set; }
    public string ExpectedBucketOwner { get; public set; }
    public string get_BucketName();
    public void set_BucketName(string value);
    internal bool IsSetBucketName();
    public string get_ExpectedBucketOwner();
    public void set_ExpectedBucketOwner(string value);
    internal bool IsSetExpectedBucketOwner();
}
public class Amazon.S3.Model.DeletePublicAccessBlockResponse : AmazonWebServiceResponse {
}
public class Amazon.S3.Model.EncryptionConfiguration : object {
    private string replicaKmsKeyID;
    public string ReplicaKmsKeyID { get; public set; }
    public string get_ReplicaKmsKeyID();
    public void set_ReplicaKmsKeyID(string value);
    internal bool isSetReplicaKmsKeyID();
}
public class Amazon.S3.Model.EndEvent : object {
    public EndEvent(IEventStreamMessage message);
}
public class Amazon.S3.Model.EventBridgeConfiguration : object {
}
public class Amazon.S3.Model.ExistingObjectReplication : object {
    [CompilerGeneratedAttribute]
private ExistingObjectReplicationStatus <Status>k__BackingField;
    public ExistingObjectReplicationStatus Status { get; public set; }
    [CompilerGeneratedAttribute]
public ExistingObjectReplicationStatus get_Status();
    [CompilerGeneratedAttribute]
public void set_Status(ExistingObjectReplicationStatus value);
    internal bool IsSetExistingObjectReplicationStatus();
}
public class Amazon.S3.Model.Expiration : object {
    private DateTime expiryDate;
    private DateTime expiryDateUtc;
    private string ruleId;
    private static string ExpiryRegexPattern;
    private static string RuleRegexPattern;
    private static Regex _expiryRegex;
    private static Regex _ruleRegex;
    [ObsoleteAttribute("This property returns a DateTime of kind Unspecified. Use ExpiryDateUtc instead.", "False")]
public DateTime ExpiryDate { get; public set; }
    public DateTime ExpiryDateUtc { get; public set; }
    public string RuleId { get; public set; }
    internal Expiration(string headerValue);
    private static Expiration();
    public DateTime get_ExpiryDate();
    public void set_ExpiryDate(DateTime value);
    public DateTime get_ExpiryDateUtc();
    public void set_ExpiryDateUtc(DateTime value);
    public string get_RuleId();
    public void set_RuleId(string value);
    private static Regex ExpiryRegex();
    private static Regex RuleRegex();
    private static string UrlDecode(string url);
}
public class Amazon.S3.Model.Filter : object {
    private S3KeyFilter s3KeyFilter;
    public S3KeyFilter S3KeyFilter { get; public set; }
    public S3KeyFilter get_S3KeyFilter();
    public void set_S3KeyFilter(S3KeyFilter value);
    internal bool IsSetS3KeyFilter();
}
public class Amazon.S3.Model.FilterRule : object {
    private string _name;
    private string _value;
    public string Name { get; public set; }
    public string Value { get; public set; }
    public FilterRule(string name, string value);
    public string get_Name();
    public void set_Name(string value);
    internal bool IsSetName();
    public string get_Value();
    public void set_Value(string value);
    internal bool IsSetValue();
}
public class Amazon.S3.Model.GetACLRequest : AmazonWebServiceRequest {
    private string expectedBucketOwner;
    [CompilerGeneratedAttribute]
private string <BucketName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VersionId>k__BackingField;
    public string BucketName { get; public set; }
    public string ExpectedBucketOwner { get; public set; }
    public string Key { get; public set; }
    public string VersionId { get; public set; }
    [CompilerGeneratedAttribute]
public string get_BucketName();
    [CompilerGeneratedAttribute]
public void set_BucketName(string value);
    internal bool IsSetBucket();
    public string get_ExpectedBucketOwner();
    public void set_ExpectedBucketOwner(string value);
    internal bool IsSetExpectedBucketOwner();
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
public void set_Key(string value);
    internal bool IsSetKey();
    [CompilerGeneratedAttribute]
public string get_VersionId();
    [CompilerGeneratedAttribute]
public void set_VersionId(string value);
    internal bool IsSetVersionId();
}
public class Amazon.S3.Model.GetACLResponse : AmazonWebServiceResponse {
    [CompilerGeneratedAttribute]
private S3AccessControlList <AccessControlList>k__BackingField;
    public S3AccessControlList AccessControlList { get; public set; }
    [CompilerGeneratedAttribute]
public S3AccessControlList get_AccessControlList();
    [CompilerGeneratedAttribute]
public void set_AccessControlList(S3AccessControlList value);
}
public class Amazon.S3.Model.GetBucketAccelerateConfigurationRequest : AmazonWebServiceRequest {
    private string _bucketName;
    private string _expectedBucketOwner;
    private RequestPayer _requestPayer;
    public string BucketName { get; public set; }
    public string ExpectedBucketOwner { get; public set; }
    public RequestPayer RequestPayer { get; public set; }
    public string get_BucketName();
    public void set_BucketName(string value);
    internal bool IsSetBucketName();
    public string get_ExpectedBucketOwner();
    public void set_ExpectedBucketOwner(string value);
    internal bool IsSetExpectedBucketOwner();
    public RequestPayer get_RequestPayer();
    public void set_RequestPayer(RequestPayer value);
    internal bool IsSetRequestPayer();
}
public class Amazon.S3.Model.GetBucketAccelerateConfigurationResponse : AmazonWebServiceResponse {
    private RequestCharged _requestCharged;
    private BucketAccelerateStatus _status;
    public RequestCharged RequestCharged { get; public set; }
    public BucketAccelerateStatus Status { get; public set; }
    public RequestCharged get_RequestCharged();
    public void set_RequestCharged(RequestCharged value);
    internal bool IsSetRequestCharged();
    public BucketAccelerateStatus get_Status();
    public void set_Status(BucketAccelerateStatus value);
    internal bool IsSetStatus();
}
public class Amazon.S3.Model.GetBucketAnalyticsConfigurationRequest : AmazonWebServiceRequest {
    private string bucketName;
    private string analyticsId;
    private string expectedBucketOwner;
    public string BucketName { get; public set; }
    public string AnalyticsId { get; public set; }
    public string ExpectedBucketOwner { get; public set; }
    public string get_BucketName();
    public void set_BucketName(string value);
    internal bool IsSetBucketName();
    public string get_AnalyticsId();
    public void set_AnalyticsId(string value);
    internal bool IsSetAnalyticsId();
    public string get_ExpectedBucketOwner();
    public void set_ExpectedBucketOwner(string value);
    internal bool IsSetExpectedBucketOwner();
}
public class Amazon.S3.Model.GetBucketAnalyticsConfigurationResponse : AmazonWebServiceResponse {
    private AnalyticsConfiguration analyticsConfiguration;
    public AnalyticsConfiguration AnalyticsConfiguration { get; public set; }
    public AnalyticsConfiguration get_AnalyticsConfiguration();
    public void set_AnalyticsConfiguration(AnalyticsConfiguration value);
    internal bool IsSetAnalyticsConfiguration();
}
public class Amazon.S3.Model.GetBucketEncryptionRequest : AmazonWebServiceRequest {
    private string bucketName;
    private string expectedBucketOwner;
    public string BucketName { get; public set; }
    public string ExpectedBucketOwner { get; public set; }
    public string get_BucketName();
    public void set_BucketName(string value);
    internal bool IsSetBucketName();
    public string get_ExpectedBucketOwner();
    public void set_ExpectedBucketOwner(string value);
    internal bool IsSetExpectedBucketOwner();
}
public class Amazon.S3.Model.GetBucketEncryptionResponse : AmazonWebServiceResponse {
    private ServerSideEncryptionConfiguration serverSideEncryptionConfiguration;
    public ServerSideEncryptionConfiguration ServerSideEncryptionConfiguration { get; public set; }
    public ServerSideEncryptionConfiguration get_ServerSideEncryptionConfiguration();
    public void set_ServerSideEncryptionConfiguration(ServerSideEncryptionConfiguration value);
    internal bool IsSetServerSideEncryptionConfiguration();
}
public class Amazon.S3.Model.GetBucketIntelligentTieringConfigurationRequest : AmazonWebServiceRequest {
    private string bucketName;
    private string intelligentTieringId;
    public string BucketName { get; public set; }
    public string IntelligentTieringId { get; public set; }
    public string get_BucketName();
    public void set_BucketName(string value);
    internal bool IsSetBucketName();
    public string get_IntelligentTieringId();
    public void set_IntelligentTieringId(string value);
    internal bool IsSetIntelligentTieringId();
}
public class Amazon.S3.Model.GetBucketIntelligentTieringConfigurationResponse : AmazonWebServiceResponse {
    private IntelligentTieringConfiguration intelligentTieringConfiguration;
    public IntelligentTieringConfiguration IntelligentTieringConfiguration { get; public set; }
    public IntelligentTieringConfiguration get_IntelligentTieringConfiguration();
    public void set_IntelligentTieringConfiguration(IntelligentTieringConfiguration value);
    internal bool IsSetIntelligentTieringConfiguration();
}
public class Amazon.S3.Model.GetBucketInventoryConfigurationRequest : AmazonWebServiceRequest {
    private string bucketName;
    private string inventoryId;
    private string expectedBucketOwner;
    public string BucketName { get; public set; }
    public string InventoryId { get; public set; }
    public string ExpectedBucketOwner { get; public set; }
    public string get_BucketName();
    public void set_BucketName(string value);
    internal bool IsSetBucketName();
    public string get_InventoryId();
    public void set_InventoryId(string value);
    internal bool IsSetInventoryId();
    public string get_ExpectedBucketOwner();
    public void set_ExpectedBucketOwner(string value);
    internal bool IsSetExpectedBucketOwner();
}
public class Amazon.S3.Model.GetBucketInventoryConfigurationResponse : AmazonWebServiceResponse {
    private InventoryConfiguration inventoryConfiguration;
    public InventoryConfiguration InventoryConfiguration { get; public set; }
    public InventoryConfiguration get_InventoryConfiguration();
    public void set_InventoryConfiguration(InventoryConfiguration value);
    internal bool IsSetInventoryConfiguration();
}
public class Amazon.S3.Model.GetBucketLocationRequest : AmazonWebServiceRequest {
    [CompilerGeneratedAttribute]
private string <BucketName>k__BackingField;
    private string expectedBucketOwner;
    public string BucketName { get; public set; }
    public string ExpectedBucketOwner { get; public set; }
    [CompilerGeneratedAttribute]
public string get_BucketName();
    [CompilerGeneratedAttribute]
public void set_BucketName(string value);
    internal bool IsSetBucketName();
    public string get_ExpectedBucketOwner();
    public void set_ExpectedBucketOwner(string value);
    internal bool IsSetExpectedBucketOwner();
}
public class Amazon.S3.Model.GetBucketLocationResponse : AmazonWebServiceResponse {
    private string location;
    public S3Region Location { get; public set; }
    public S3Region get_Location();
    public void set_Location(S3Region value);
}
public class Amazon.S3.Model.GetBucketLoggingRequest : AmazonWebServiceRequest {
    private string bucketName;
    private string expectedBucketOwner;
    public string BucketName { get; public set; }
    public string ExpectedBucketOwner { get; public set; }
    public string get_BucketName();
    public void set_BucketName(string value);
    internal bool IsSetBucketName();
    public string get_ExpectedBucketOwner();
    public void set_ExpectedBucketOwner(string value);
    internal bool IsSetExpectedBucketOwner();
}
public class Amazon.S3.Model.GetBucketLoggingResponse : AmazonWebServiceResponse {
    private S3BucketLoggingConfig bucketLoggingConfig;
    public S3BucketLoggingConfig BucketLoggingConfig { get; public set; }
    public S3BucketLoggingConfig get_BucketLoggingConfig();
    public void set_BucketLoggingConfig(S3BucketLoggingConfig value);
}
public class Amazon.S3.Model.GetBucketMetricsConfigurationRequest : AmazonWebServiceRequest {
    private string bucketName;
    private string metricsId;
    private string expectedBucketOwner;
    public string BucketName { get; public set; }
    public string MetricsId { get; public set; }
    public string ExpectedBucketOwner { get; public set; }
    public string get_BucketName();
    public void set_BucketName(string value);
    internal bool IsSetBucketName();
    public string get_MetricsId();
    public void set_MetricsId(string value);
    internal bool IsSetMetricsId();
    public string get_ExpectedBucketOwner();
    public void set_ExpectedBucketOwner(string value);
    internal bool IsSetExpectedBucketOwner();
}
public class Amazon.S3.Model.GetBucketMetricsConfigurationResponse : AmazonWebServiceResponse {
    private MetricsConfiguration metricsConfiguration;
    public MetricsConfiguration MetricsConfiguration { get; public set; }
    public MetricsConfiguration get_MetricsConfiguration();
    public void set_MetricsConfiguration(MetricsConfiguration value);
    internal bool IsSetMetricsConfiguration();
}
public class Amazon.S3.Model.GetBucketNotificationRequest : AmazonWebServiceRequest {
    private string bucket;
    private string expectedBucketOwner;
    public string BucketName { get; public set; }
    public string ExpectedBucketOwner { get; public set; }
    public string get_BucketName();
    public void set_BucketName(string value);
    internal bool IsSetBucketName();
    public string get_ExpectedBucketOwner();
    public void set_ExpectedBucketOwner(string value);
    internal bool IsSetExpectedBucketOwner();
}
public class Amazon.S3.Model.GetBucketNotificationResponse : AmazonWebServiceResponse {
    private List`1<TopicConfiguration> _topicConfigurations;
    private List`1<QueueConfiguration> _queueConfigurations;
    private List`1<LambdaFunctionConfiguration> _lambdaFunctionConfigurations;
    private EventBridgeConfiguration _eventBridgeConfiguration;
    public List`1<TopicConfiguration> TopicConfigurations { get; public set; }
    public List`1<QueueConfiguration> QueueConfigurations { get; public set; }
    public List`1<LambdaFunctionConfiguration> LambdaFunctionConfigurations { get; public set; }
    public EventBridgeConfiguration EventBridgeConfiguration { get; public set; }
    public List`1<TopicConfiguration> get_TopicConfigurations();
    public void set_TopicConfigurations(List`1<TopicConfiguration> value);
    public List`1<QueueConfiguration> get_QueueConfigurations();
    public void set_QueueConfigurations(List`1<QueueConfiguration> value);
    public List`1<LambdaFunctionConfiguration> get_LambdaFunctionConfigurations();
    public void set_LambdaFunctionConfigurations(List`1<LambdaFunctionConfiguration> value);
    public EventBridgeConfiguration get_EventBridgeConfiguration();
    public void set_EventBridgeConfiguration(EventBridgeConfiguration value);
    internal bool IsSetEventBridgeConfiguration();
}
public class Amazon.S3.Model.GetBucketOwnershipControlsRequest : AmazonWebServiceRequest {
    private string bucketName;
    private string expectedBucketOwner;
    public string BucketName { get; public set; }
    public string ExpectedBucketOwner { get; public set; }
    public string get_BucketName();
    public void set_BucketName(string value);
    internal bool IsSetBucketName();
    public string get_ExpectedBucketOwner();
    public void set_ExpectedBucketOwner(string value);
    internal bool IsSetExpectedBucketOwner();
}
public class Amazon.S3.Model.GetBucketOwnershipControlsResponse : AmazonWebServiceResponse {
    private OwnershipControls ownershipControls;
    public OwnershipControls OwnershipControls { get; public set; }
    public OwnershipControls get_OwnershipControls();
    public void set_OwnershipControls(OwnershipControls value);
}
public class Amazon.S3.Model.GetBucketPolicyRequest : AmazonWebServiceRequest {
    [CompilerGeneratedAttribute]
private string <BucketName>k__BackingField;
    private string expectedBucketOwner;
    public string BucketName { get; public set; }
    public string ExpectedBucketOwner { get; public set; }
    [CompilerGeneratedAttribute]
public string get_BucketName();
    [CompilerGeneratedAttribute]
public void set_BucketName(string value);
    internal bool IsSetBucket();
    public string get_ExpectedBucketOwner();
    public void set_ExpectedBucketOwner(string value);
    internal bool IsSetExpectedBucketOwner();
}
public class Amazon.S3.Model.GetBucketPolicyResponse : AmazonWebServiceResponse {
    [CompilerGeneratedAttribute]
private string <Policy>k__BackingField;
    public string Policy { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Policy();
    [CompilerGeneratedAttribute]
public void set_Policy(string value);
    internal bool IsSetPolicy();
}
public class Amazon.S3.Model.GetBucketPolicyStatusRequest : AmazonWebServiceRequest {
    private string bucketName;
    private string expectedBucketOwner;
    public string BucketName { get; public set; }
    public string ExpectedBucketOwner { get; public set; }
    public string get_BucketName();
    public void set_BucketName(string value);
    internal bool IsSetBucketName();
    public string get_ExpectedBucketOwner();
    public void set_ExpectedBucketOwner(string value);
    internal bool IsSetExpectedBucketOwner();
}
public class Amazon.S3.Model.GetBucketPolicyStatusResponse : AmazonWebServiceResponse {
    private PolicyStatus policyStatus;
    public PolicyStatus PolicyStatus { get; public set; }
    public PolicyStatus get_PolicyStatus();
    public void set_PolicyStatus(PolicyStatus value);
    internal bool IsSetPolicyStatus();
}
public class Amazon.S3.Model.GetBucketReplicationRequest : AmazonWebServiceRequest {
    private string bucketName;
    private string expectedBucketOwner;
    public string BucketName { get; public set; }
    public string ExpectedBucketOwner { get; public set; }
    public string get_BucketName();
    public void set_BucketName(string value);
    internal bool IsSetBucketName();
    public string get_ExpectedBucketOwner();
    public void set_ExpectedBucketOwner(string value);
    internal bool IsSetExpectedBucketOwner();
}
public class Amazon.S3.Model.GetBucketReplicationResponse : AmazonWebServiceResponse {
    private ReplicationConfiguration configuration;
    public ReplicationConfiguration Configuration { get; public set; }
    public ReplicationConfiguration get_Configuration();
    public void set_Configuration(ReplicationConfiguration value);
}
public class Amazon.S3.Model.GetBucketRequestPaymentRequest : AmazonWebServiceRequest {
    private string bucketName;
    private string expectedBucketOwner;
    public string BucketName { get; public set; }
    public string ExpectedBucketOwner { get; public set; }
    public string get_BucketName();
    public void set_BucketName(string value);
    internal bool IsSetBucketName();
    public string get_ExpectedBucketOwner();
    public void set_ExpectedBucketOwner(string value);
    internal bool IsSetExpectedBucketOwner();
}
public class Amazon.S3.Model.GetBucketRequestPaymentResponse : AmazonWebServiceResponse {
    private string payer;
    public string Payer { get; public set; }
    public string get_Payer();
    public void set_Payer(string value);
    internal bool IsSetPayer();
}
public class Amazon.S3.Model.GetBucketTaggingRequest : AmazonWebServiceRequest {
    private string bucketName;
    private string expectedBucketOwner;
    public string BucketName { get; public set; }
    public string ExpectedBucketOwner { get; public set; }
    public string get_BucketName();
    public void set_BucketName(string value);
    internal bool IsSetBucketName();
    public string get_ExpectedBucketOwner();
    public void set_ExpectedBucketOwner(string value);
    internal bool IsSetExpectedBucketOwner();
}
public class Amazon.S3.Model.GetBucketTaggingResponse : AmazonWebServiceResponse {
    private List`1<Tag> tagSet;
    public List`1<Tag> TagSet { get; public set; }
    public List`1<Tag> get_TagSet();
    public void set_TagSet(List`1<Tag> value);
    internal bool IsSetTagSet();
}
public class Amazon.S3.Model.GetBucketVersioningRequest : AmazonWebServiceRequest {
    private string bucketName;
    private string expectedBucketOwner;
    public string BucketName { get; public set; }
    public string ExpectedBucketOwner { get; public set; }
    public string get_BucketName();
    public void set_BucketName(string value);
    internal bool IsSetBucketName();
    public string get_ExpectedBucketOwner();
    public void set_ExpectedBucketOwner(string value);
    internal bool IsSetExpectedBucketOwner();
}
public class Amazon.S3.Model.GetBucketVersioningResponse : AmazonWebServiceResponse {
    private S3BucketVersioningConfig config;
    public S3BucketVersioningConfig VersioningConfig { get; public set; }
    public S3BucketVersioningConfig get_VersioningConfig();
    public void set_VersioningConfig(S3BucketVersioningConfig value);
}
public class Amazon.S3.Model.GetBucketWebsiteRequest : AmazonWebServiceRequest {
    private string _bucketName;
    private string _expectedBucketOwner;
    public string BucketName { get; public set; }
    public string ExpectedBucketOwner { get; public set; }
    public string get_BucketName();
    public void set_BucketName(string value);
    internal bool IsSetBucketName();
    public string get_ExpectedBucketOwner();
    public void set_ExpectedBucketOwner(string value);
    internal bool IsSetExpectedBucketOwner();
}
public class Amazon.S3.Model.GetBucketWebsiteResponse : AmazonWebServiceResponse {
    private WebsiteConfiguration websiteConfiguration;
    public WebsiteConfiguration WebsiteConfiguration { get; public set; }
    public WebsiteConfiguration get_WebsiteConfiguration();
    public void set_WebsiteConfiguration(WebsiteConfiguration value);
}
public class Amazon.S3.Model.GetCORSConfigurationRequest : AmazonWebServiceRequest {
    private string bucketName;
    private string expectedBucketOwner;
    public string BucketName { get; public set; }
    public string ExpectedBucketOwner { get; public set; }
    public string get_BucketName();
    public void set_BucketName(string value);
    internal bool IsSetBucketName();
    public string get_ExpectedBucketOwner();
    public void set_ExpectedBucketOwner(string value);
    internal bool IsSetExpectedBucketOwner();
}
public class Amazon.S3.Model.GetCORSConfigurationResponse : AmazonWebServiceResponse {
    private CORSConfiguration configuration;
    public CORSConfiguration Configuration { get; public set; }
    public CORSConfiguration get_Configuration();
    public void set_Configuration(CORSConfiguration value);
    internal bool IsSetConfiguration();
}
public class Amazon.S3.Model.GetLifecycleConfigurationRequest : AmazonWebServiceRequest {
    private string bucketName;
    private string expectedBucketOwner;
    public string BucketName { get; public set; }
    public string ExpectedBucketOwner { get; public set; }
    public string get_BucketName();
    public void set_BucketName(string value);
    internal bool IsSetBucketName();
    public string get_ExpectedBucketOwner();
    public void set_ExpectedBucketOwner(string value);
    internal bool IsSetExpectedBucketOwner();
}
public class Amazon.S3.Model.GetLifecycleConfigurationResponse : AmazonWebServiceResponse {
    private LifecycleConfiguration configuration;
    public LifecycleConfiguration Configuration { get; public set; }
    public LifecycleConfiguration get_Configuration();
    public void set_Configuration(LifecycleConfiguration value);
}
public class Amazon.S3.Model.GetObjectAttributesParts : object {
    private Nullable`1<bool> _isTruncated;
    private Nullable`1<int> _maxParts;
    private Nullable`1<int> _nextPartNumberMarker;
    private Nullable`1<int> _partNumberMarker;
    private List`1<ObjectPart> _parts;
    private Nullable`1<int> _totalPartsCount;
    public Nullable`1<bool> IsTruncated { get; public set; }
    public Nullable`1<int> MaxParts { get; public set; }
    public Nullable`1<int> NextPartNumberMarker { get; public set; }
    public Nullable`1<int> PartNumberMarker { get; public set; }
    public List`1<ObjectPart> Parts { get; public set; }
    public Nullable`1<int> TotalPartsCount { get; public set; }
    public Nullable`1<bool> get_IsTruncated();
    public void set_IsTruncated(Nullable`1<bool> value);
    internal bool IsSetIsTruncated();
    public Nullable`1<int> get_MaxParts();
    public void set_MaxParts(Nullable`1<int> value);
    internal bool IsSetMaxParts();
    public Nullable`1<int> get_NextPartNumberMarker();
    public void set_NextPartNumberMarker(Nullable`1<int> value);
    internal bool IsSetNextPartNumberMarker();
    public Nullable`1<int> get_PartNumberMarker();
    public void set_PartNumberMarker(Nullable`1<int> value);
    internal bool IsSetPartNumberMarker();
    public List`1<ObjectPart> get_Parts();
    public void set_Parts(List`1<ObjectPart> value);
    internal bool IsSetParts();
    public Nullable`1<int> get_TotalPartsCount();
    public void set_TotalPartsCount(Nullable`1<int> value);
    internal bool IsSetTotalPartsCount();
}
public class Amazon.S3.Model.GetObjectAttributesRequest : AmazonWebServiceRequest {
    private string _bucketName;
    private string _expectedBucketOwner;
    private string _key;
    private Nullable`1<int> _maxParts;
    private List`1<ObjectAttributes> _objectAttributes;
    private Nullable`1<int> _partNumberMarker;
    private RequestPayer _requestPayer;
    private string _sseCustomerAlgorithm;
    private string _sseCustomerKey;
    private string _sseCustomerKeyMD5;
    private string _versionId;
    public string BucketName { get; public set; }
    public string ExpectedBucketOwner { get; public set; }
    [AWSPropertyAttribute]
public string Key { get; public set; }
    public Nullable`1<int> MaxParts { get; public set; }
    public List`1<ObjectAttributes> ObjectAttributes { get; public set; }
    public Nullable`1<int> PartNumberMarker { get; public set; }
    public RequestPayer RequestPayer { get; public set; }
    public string SSECustomerAlgorithm { get; public set; }
    public string SSECustomerKey { get; public set; }
    public string SSECustomerKeyMD5 { get; public set; }
    public string VersionId { get; public set; }
    public string get_BucketName();
    public void set_BucketName(string value);
    internal bool IsSetBucketName();
    public string get_ExpectedBucketOwner();
    public void set_ExpectedBucketOwner(string value);
    internal bool IsSetExpectedBucketOwner();
    public string get_Key();
    public void set_Key(string value);
    internal bool IsSetKey();
    public Nullable`1<int> get_MaxParts();
    public void set_MaxParts(Nullable`1<int> value);
    internal bool IsSetMaxParts();
    public List`1<ObjectAttributes> get_ObjectAttributes();
    public void set_ObjectAttributes(List`1<ObjectAttributes> value);
    internal bool IsSetObjectAttributes();
    public Nullable`1<int> get_PartNumberMarker();
    public void set_PartNumberMarker(Nullable`1<int> value);
    internal bool IsSetPartNumberMarker();
    public RequestPayer get_RequestPayer();
    public void set_RequestPayer(RequestPayer value);
    internal bool IsSetRequestPayer();
    public string get_SSECustomerAlgorithm();
    public void set_SSECustomerAlgorithm(string value);
    internal bool IsSetSSECustomerAlgorithm();
    public string get_SSECustomerKey();
    public void set_SSECustomerKey(string value);
    internal bool IsSetSSECustomerKey();
    public string get_SSECustomerKeyMD5();
    public void set_SSECustomerKeyMD5(string value);
    internal bool IsSetSSECustomerKeyMD5();
    public string get_VersionId();
    public void set_VersionId(string value);
    internal bool IsSetVersionId();
}
public class Amazon.S3.Model.GetObjectAttributesResponse : AmazonWebServiceResponse {
    private Checksum _checksum;
    private Nullable`1<bool> _deleteMarker;
    private string _eTag;
    private Nullable`1<DateTime> _lastModified;
    private GetObjectAttributesParts _objectParts;
    private Nullable`1<long> _objectSize;
    private RequestCharged _requestCharged;
    private S3StorageClass _storageClass;
    private string _versionId;
    public Checksum Checksum { get; public set; }
    public Nullable`1<bool> DeleteMarker { get; public set; }
    public string ETag { get; public set; }
    public Nullable`1<DateTime> LastModified { get; public set; }
    public GetObjectAttributesParts ObjectParts { get; public set; }
    public Nullable`1<long> ObjectSize { get; public set; }
    public RequestCharged RequestCharged { get; public set; }
    public S3StorageClass StorageClass { get; public set; }
    public string VersionId { get; public set; }
    public Checksum get_Checksum();
    public void set_Checksum(Checksum value);
    internal bool IsSetChecksum();
    public Nullable`1<bool> get_DeleteMarker();
    public void set_DeleteMarker(Nullable`1<bool> value);
    internal bool IsSetDeleteMarker();
    public string get_ETag();
    public void set_ETag(string value);
    internal bool IsSetETag();
    public Nullable`1<DateTime> get_LastModified();
    public void set_LastModified(Nullable`1<DateTime> value);
    internal bool IsSetLastModified();
    public GetObjectAttributesParts get_ObjectParts();
    public void set_ObjectParts(GetObjectAttributesParts value);
    internal bool IsSetObjectParts();
    public Nullable`1<long> get_ObjectSize();
    public void set_ObjectSize(Nullable`1<long> value);
    internal bool IsSetObjectSize();
    public RequestCharged get_RequestCharged();
    public void set_RequestCharged(RequestCharged value);
    internal bool IsSetRequestCharged();
    public S3StorageClass get_StorageClass();
    public void set_StorageClass(S3StorageClass value);
    internal bool IsSetStorageClass();
    public string get_VersionId();
    public void set_VersionId(string value);
    internal bool IsSetVersionId();
}
public class Amazon.S3.Model.GetObjectLegalHoldRequest : AmazonWebServiceRequest {
    private string _bucketName;
    private string expectedBucketOwner;
    private string _key;
    private RequestPayer _requestPayer;
    private string _versionId;
    public string BucketName { get; public set; }
    public string ExpectedBucketOwner { get; public set; }
    public string Key { get; public set; }
    public RequestPayer RequestPayer { get; public set; }
    public string VersionId { get; public set; }
    public string get_BucketName();
    public void set_BucketName(string value);
    internal bool IsSetBucketName();
    public string get_ExpectedBucketOwner();
    public void set_ExpectedBucketOwner(string value);
    internal bool IsSetExpectedBucketOwner();
    public string get_Key();
    public void set_Key(string value);
    internal bool IsSetKey();
    public RequestPayer get_RequestPayer();
    public void set_RequestPayer(RequestPayer value);
    internal bool IsSetRequestPayer();
    public string get_VersionId();
    public void set_VersionId(string value);
    internal bool IsSetVersionId();
}
public class Amazon.S3.Model.GetObjectLegalHoldResponse : AmazonWebServiceResponse {
    private ObjectLockLegalHold _legalHold;
    public ObjectLockLegalHold LegalHold { get; public set; }
    public ObjectLockLegalHold get_LegalHold();
    public void set_LegalHold(ObjectLockLegalHold value);
    internal bool IsSetLegalHold();
}
public class Amazon.S3.Model.GetObjectLockConfigurationRequest : AmazonWebServiceRequest {
    private string _bucketName;
    private string expectedBucketOwner;
    public string BucketName { get; public set; }
    public string ExpectedBucketOwner { get; public set; }
    public string get_BucketName();
    public void set_BucketName(string value);
    internal bool IsSetBucketName();
    public string get_ExpectedBucketOwner();
    public void set_ExpectedBucketOwner(string value);
    internal bool IsSetExpectedBucketOwner();
}
public class Amazon.S3.Model.GetObjectLockConfigurationResponse : AmazonWebServiceResponse {
    private ObjectLockConfiguration _objectLockConfiguration;
    public ObjectLockConfiguration ObjectLockConfiguration { get; public set; }
    public ObjectLockConfiguration get_ObjectLockConfiguration();
    public void set_ObjectLockConfiguration(ObjectLockConfiguration value);
    internal bool IsSetObjectLockConfiguration();
}
public class Amazon.S3.Model.GetObjectMetadataRequest : AmazonWebServiceRequest {
    private string bucketName;
    private ChecksumMode _checksumMode;
    private Nullable`1<DateTime> modifiedSinceDate;
    private Nullable`1<DateTime> unmodifiedSinceDate;
    private Nullable`1<DateTime> modifiedSinceDateUtc;
    private Nullable`1<DateTime> unmodifiedSinceDateUtc;
    private string etagToMatch;
    private string etagToNotMatch;
    private string key;
    private string versionId;
    private Nullable`1<int> partNumber;
    private RequestPayer requestPayer;
    private string expectedBucketOwner;
    private string _responseCacheControl;
    private string _responseContentDisposition;
    private string _responseContentEncoding;
    private string _responseContentLanguage;
    private string _responseContentType;
    private Nullable`1<DateTime> _responseExpires;
    private ServerSideEncryptionCustomerMethod serverSideCustomerEncryption;
    private string serverSideEncryptionCustomerProvidedKey;
    private string serverSideEncryptionCustomerProvidedKeyMD5;
    public string BucketName { get; public set; }
    public ChecksumMode ChecksumMode { get; public set; }
    public string EtagToMatch { get; public set; }
    [ObsoleteAttribute("Setting this property results in non-UTC DateTimes not being marshalled correctly. Use ModifiedSinceDateUtc instead. Setting either ModifiedSinceDate or ModifiedSinceDateUtc results in both ModifiedSinceDate and ModifiedSinceDateUtc being assigned, the latest assignment to either one of the two property is reflected in the value of both. ModifiedSinceDate is provided for backwards compatibility only and assigning a non-Utc DateTime to it results in the wrong timestamp being passed to the service.", "False")]
public Nullable`1<DateTime> ModifiedSinceDate { get; public set; }
    public Nullable`1<DateTime> ModifiedSinceDateUtc { get; public set; }
    public string EtagToNotMatch { get; public set; }
    [ObsoleteAttribute("Setting this property results in non-UTC DateTimes not being marshalled correctly. Use UnmodifiedSinceDateUtc instead. Setting either UnmodifiedSinceDate or UnmodifiedSinceDateUtc results in both UnmodifiedSinceDate and UnmodifiedSinceDateUtc being assigned, the latest assignment to either one of the two property is reflected in the value of both. UnmodifiedSinceDate is provided for backwards compatibility only and assigning a non-Utc DateTime to it results in the wrong timestamp being passed to the service.", "False")]
public Nullable`1<DateTime> UnmodifiedSinceDate { get; public set; }
    public Nullable`1<DateTime> UnmodifiedSinceDateUtc { get; public set; }
    public string Key { get; public set; }
    public string VersionId { get; public set; }
    public ServerSideEncryptionCustomerMethod ServerSideEncryptionCustomerMethod { get; public set; }
    [AWSPropertyAttribute]
public string ServerSideEncryptionCustomerProvidedKey { get; public set; }
    public string ServerSideEncryptionCustomerProvidedKeyMD5 { get; public set; }
    public Nullable`1<int> PartNumber { get; public set; }
    public RequestPayer RequestPayer { get; public set; }
    public string ExpectedBucketOwner { get; public set; }
    public string ResponseCacheControl { get; public set; }
    public string ResponseContentDisposition { get; public set; }
    public string ResponseContentEncoding { get; public set; }
    public string ResponseContentLanguage { get; public set; }
    public string ResponseContentType { get; public set; }
    public DateTime ResponseExpires { get; public set; }
    public string get_BucketName();
    public void set_BucketName(string value);
    internal bool IsSetBucketName();
    public ChecksumMode get_ChecksumMode();
    public void set_ChecksumMode(ChecksumMode value);
    internal bool IsSetChecksumMode();
    public string get_EtagToMatch();
    public void set_EtagToMatch(string value);
    internal bool IsSetEtagToMatch();
    public Nullable`1<DateTime> get_ModifiedSinceDate();
    public void set_ModifiedSinceDate(Nullable`1<DateTime> value);
    public Nullable`1<DateTime> get_ModifiedSinceDateUtc();
    public void set_ModifiedSinceDateUtc(Nullable`1<DateTime> value);
    internal bool IsSetModifiedSinceDateUtc();
    public string get_EtagToNotMatch();
    public void set_EtagToNotMatch(string value);
    internal bool IsSetEtagToNotMatch();
    public Nullable`1<DateTime> get_UnmodifiedSinceDate();
    public void set_UnmodifiedSinceDate(Nullable`1<DateTime> value);
    public Nullable`1<DateTime> get_UnmodifiedSinceDateUtc();
    public void set_UnmodifiedSinceDateUtc(Nullable`1<DateTime> value);
    internal bool IsSetUnmodifiedSinceDateUtc();
    public string get_Key();
    public void set_Key(string value);
    internal bool IsSetKey();
    public string get_VersionId();
    public void set_VersionId(string value);
    internal bool IsSetVersionId();
    public ServerSideEncryptionCustomerMethod get_ServerSideEncryptionCustomerMethod();
    public void set_ServerSideEncryptionCustomerMethod(ServerSideEncryptionCustomerMethod value);
    internal bool IsSetServerSideEncryptionCustomerMethod();
    public string get_ServerSideEncryptionCustomerProvidedKey();
    public void set_ServerSideEncryptionCustomerProvidedKey(string value);
    internal bool IsSetServerSideEncryptionCustomerProvidedKey();
    public string get_ServerSideEncryptionCustomerProvidedKeyMD5();
    public void set_ServerSideEncryptionCustomerProvidedKeyMD5(string value);
    internal bool IsSetServerSideEncryptionCustomerProvidedKeyMD5();
    public Nullable`1<int> get_PartNumber();
    public void set_PartNumber(Nullable`1<int> value);
    internal bool IsSetPartNumber();
    public RequestPayer get_RequestPayer();
    public void set_RequestPayer(RequestPayer value);
    internal bool IsSetRequestPayer();
    public string get_ExpectedBucketOwner();
    public void set_ExpectedBucketOwner(string value);
    internal bool IsSetExpectedBucketOwner();
    public string get_ResponseCacheControl();
    public void set_ResponseCacheControl(string value);
    internal bool IsSetResponseCacheControl();
    public string get_ResponseContentDisposition();
    public void set_ResponseContentDisposition(string value);
    internal bool IsSetResponseContentDisposition();
    public string get_ResponseContentEncoding();
    public void set_ResponseContentEncoding(string value);
    internal bool IsSetResponseContentEncoding();
    public string get_ResponseContentLanguage();
    public void set_ResponseContentLanguage(string value);
    internal bool IsSetResponseContentLanguage();
    public string get_ResponseContentType();
    public void set_ResponseContentType(string value);
    internal bool IsSetResponseContentType();
    public DateTime get_ResponseExpires();
    public void set_ResponseExpires(DateTime value);
    internal bool IsSetResponseExpires();
}
public class Amazon.S3.Model.GetObjectMetadataResponse : AmazonWebServiceResponse {
    private string deleteMarker;
    private string acceptRanges;
    private string contentRange;
    private Expiration expiration;
    private Nullable`1<DateTime> restoreExpiration;
    private Nullable`1<bool> restoreInProgress;
    private Nullable`1<DateTime> lastModified;
    private string eTag;
    private Nullable`1<int> missingMeta;
    private string versionId;
    private Nullable`1<DateTime> expires;
    private string websiteRedirectLocation;
    private string serverSideEncryptionKeyManagementServiceKeyId;
    private ServerSideEncryptionMethod serverSideEncryption;
    private ServerSideEncryptionCustomerMethod serverSideEncryptionCustomerMethod;
    private HeadersCollection headersCollection;
    private MetadataCollection metadataCollection;
    private ReplicationStatus replicationStatus;
    private ArchiveStatus archiveStatus;
    private Nullable`1<int> partsCount;
    private ObjectLockLegalHoldStatus objectLockLegalHoldStatus;
    private ObjectLockMode objectLockMode;
    private Nullable`1<DateTime> objectLockRetainUntilDate;
    private S3StorageClass storageClass;
    private RequestCharged requestCharged;
    private Nullable`1<bool> bucketKeyEnabled;
    private string _checksumCRC32;
    private string _checksumCRC32C;
    private string _checksumSHA1;
    private string _checksumSHA256;
    private bool isExpiresUnmarshalled;
    [CompilerGeneratedAttribute]
private string <ExpiresString>k__BackingField;
    public string ExpiresString { get; public set; }
    public HeadersCollection Headers { get; }
    public MetadataCollection Metadata { get; }
    public string DeleteMarker { get; public set; }
    public string AcceptRanges { get; public set; }
    public string ContentRange { get; public set; }
    public Expiration Expiration { get; public set; }
    public Nullable`1<DateTime> RestoreExpiration { get; public set; }
    public Nullable`1<bool> RestoreInProgress { get; public set; }
    public Nullable`1<DateTime> LastModified { get; public set; }
    public string ETag { get; public set; }
    public Nullable`1<int> MissingMeta { get; public set; }
    public string VersionId { get; public set; }
    [ObsoleteAttribute("This property is deprecated for handling cases where Expires cannot be parsed as a DateTime. Instead, use ExpiresString, which returns the unparsed value from S3.")]
public Nullable`1<DateTime> Expires { get; public set; }
    public string WebsiteRedirectLocation { get; public set; }
    public ServerSideEncryptionMethod ServerSideEncryptionMethod { get; public set; }
    public ServerSideEncryptionCustomerMethod ServerSideEncryptionCustomerMethod { get; public set; }
    [AWSPropertyAttribute]
public string ServerSideEncryptionKeyManagementServiceKeyId { get; public set; }
    public ReplicationStatus ReplicationStatus { get; public set; }
    public ArchiveStatus ArchiveStatus { get; public set; }
    public Nullable`1<int> PartsCount { get; public set; }
    public ObjectLockLegalHoldStatus ObjectLockLegalHoldStatus { get; public set; }
    public ObjectLockMode ObjectLockMode { get; public set; }
    public Nullable`1<DateTime> ObjectLockRetainUntilDate { get; public set; }
    public S3StorageClass StorageClass { get; public set; }
    public RequestCharged RequestCharged { get; public set; }
    public Nullable`1<bool> BucketKeyEnabled { get; public set; }
    public string ChecksumCRC32 { get; public set; }
    public string ChecksumCRC32C { get; public set; }
    public string ChecksumSHA1 { get; public set; }
    public string ChecksumSHA256 { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ExpiresString();
    [CompilerGeneratedAttribute]
public void set_ExpiresString(string value);
    public HeadersCollection get_Headers();
    public MetadataCollection get_Metadata();
    public string get_DeleteMarker();
    public void set_DeleteMarker(string value);
    internal bool IsSetDeleteMarker();
    public string get_AcceptRanges();
    public void set_AcceptRanges(string value);
    internal bool IsSetAcceptRanges();
    public string get_ContentRange();
    public void set_ContentRange(string value);
    internal bool IsSetContentRange();
    public Expiration get_Expiration();
    public void set_Expiration(Expiration value);
    internal bool IsSetExpiration();
    public Nullable`1<DateTime> get_RestoreExpiration();
    public void set_RestoreExpiration(Nullable`1<DateTime> value);
    public Nullable`1<bool> get_RestoreInProgress();
    public void set_RestoreInProgress(Nullable`1<bool> value);
    public Nullable`1<DateTime> get_LastModified();
    public void set_LastModified(Nullable`1<DateTime> value);
    internal bool IsSetLastModified();
    public string get_ETag();
    public void set_ETag(string value);
    internal bool IsSetETag();
    public Nullable`1<int> get_MissingMeta();
    public void set_MissingMeta(Nullable`1<int> value);
    internal bool IsSetMissingMeta();
    public string get_VersionId();
    public void set_VersionId(string value);
    internal bool IsSetVersionId();
    public Nullable`1<DateTime> get_Expires();
    public void set_Expires(Nullable`1<DateTime> value);
    internal bool IsSetExpires();
    public string get_WebsiteRedirectLocation();
    public void set_WebsiteRedirectLocation(string value);
    internal bool IsSetWebsiteRedirectLocation();
    public ServerSideEncryptionMethod get_ServerSideEncryptionMethod();
    public void set_ServerSideEncryptionMethod(ServerSideEncryptionMethod value);
    internal bool IsSetServerSideEncryptionMethod();
    public ServerSideEncryptionCustomerMethod get_ServerSideEncryptionCustomerMethod();
    public void set_ServerSideEncryptionCustomerMethod(ServerSideEncryptionCustomerMethod value);
    internal bool IsSetServerSideEncryptionCustomerMethod();
    public string get_ServerSideEncryptionKeyManagementServiceKeyId();
    public void set_ServerSideEncryptionKeyManagementServiceKeyId(string value);
    internal bool IsSetServerSideEncryptionKeyManagementServiceKeyId();
    public ReplicationStatus get_ReplicationStatus();
    public void set_ReplicationStatus(ReplicationStatus value);
    public ArchiveStatus get_ArchiveStatus();
    public void set_ArchiveStatus(ArchiveStatus value);
    internal bool IsSetReplicationStatus();
    public Nullable`1<int> get_PartsCount();
    public void set_PartsCount(Nullable`1<int> value);
    internal bool IsSetPartsCount();
    public ObjectLockLegalHoldStatus get_ObjectLockLegalHoldStatus();
    public void set_ObjectLockLegalHoldStatus(ObjectLockLegalHoldStatus value);
    internal bool IsSetObjectLockLegalHoldStatus();
    public ObjectLockMode get_ObjectLockMode();
    public void set_ObjectLockMode(ObjectLockMode value);
    internal bool IsSetObjectLockMode();
    public Nullable`1<DateTime> get_ObjectLockRetainUntilDate();
    public void set_ObjectLockRetainUntilDate(Nullable`1<DateTime> value);
    internal bool IsSetObjectLockRetainUntilDate();
    public S3StorageClass get_StorageClass();
    public void set_StorageClass(S3StorageClass value);
    internal bool IsSetStorageClass();
    public RequestCharged get_RequestCharged();
    public void set_RequestCharged(RequestCharged value);
    internal bool IsSetRequestCharged();
    public Nullable`1<bool> get_BucketKeyEnabled();
    public void set_BucketKeyEnabled(Nullable`1<bool> value);
    internal bool IsSetBucketKeyEnabled();
    public string get_ChecksumCRC32();
    public void set_ChecksumCRC32(string value);
    internal bool IsSetChecksumCRC32();
    public string get_ChecksumCRC32C();
    public void set_ChecksumCRC32C(string value);
    internal bool IsSetChecksumCRC32C();
    public string get_ChecksumSHA1();
    public void set_ChecksumSHA1(string value);
    internal bool IsSetChecksumSHA1();
    public string get_ChecksumSHA256();
    public void set_ChecksumSHA256(string value);
    internal bool IsSetChecksumSHA256();
}
public class Amazon.S3.Model.GetObjectRequest : AmazonWebServiceRequest {
    private string bucketName;
    private string expectedBucketOwner;
    private Nullable`1<DateTime> modifiedSinceDate;
    private Nullable`1<DateTime> unmodifiedSinceDate;
    private Nullable`1<DateTime> modifiedSinceDateUtc;
    private Nullable`1<DateTime> unmodifiedSinceDateUtc;
    private string etagToMatch;
    private string etagToNotMatch;
    private string key;
    private Nullable`1<int> partNumber;
    private ByteRange byteRange;
    private RequestPayer requestPayer;
    private Nullable`1<DateTime> responseExpires;
    private Nullable`1<DateTime> responseExpiresUtc;
    private ResponseHeaderOverrides responseHeaders;
    private ServerSideEncryptionCustomerMethod serverSideCustomerEncryption;
    private string serverSideEncryptionCustomerProvidedKey;
    private string serverSideEncryptionCustomerProvidedKeyMD5;
    private string versionId;
    private ChecksumMode _checksumMode;
    private static List`1<CoreChecksumAlgorithm> _supportedChecksumAlgorithms;
    public string BucketName { get; public set; }
    public string ExpectedBucketOwner { get; public set; }
    [ObsoleteAttribute("Setting this property results in non-UTC DateTimes not being marshalled correctly. Use ModifiedSinceDateUtc instead. Setting either ModifiedSinceDate or ModifiedSinceDateUtc results in both ModifiedSinceDate and ModifiedSinceDateUtc being assigned, the latest assignment to either one of the two property is reflected in the value of both. ModifiedSinceDate is provided for backwards compatibility only and assigning a non-Utc DateTime to it results in the wrong timestamp being passed to the service.", "False")]
public Nullable`1<DateTime> ModifiedSinceDate { get; public set; }
    public Nullable`1<DateTime> ModifiedSinceDateUtc { get; public set; }
    [ObsoleteAttribute("Setting this property results in non-UTC DateTimes not being marshalled correctly. Use UnmodifiedSinceDateUtc instead. Setting either UnmodifiedSinceDate or UnmodifiedSinceDateUtc results in both UnmodifiedSinceDate and UnmodifiedSinceDateUtc being assigned, the latest assignment to either one of the two property is reflected in the value of both. UnmodifiedSinceDate is provided for backwards compatibility only and assigning a non-Utc DateTime to it results in the wrong timestamp being passed to the service.", "False")]
public Nullable`1<DateTime> UnmodifiedSinceDate { get; public set; }
    public Nullable`1<DateTime> UnmodifiedSinceDateUtc { get; public set; }
    public string Key { get; public set; }
    public Nullable`1<int> PartNumber { get; public set; }
    public RequestPayer RequestPayer { get; public set; }
    [ObsoleteAttribute("Setting this property results in non-UTC DateTimes not being marshalled correctly. Use ResponseExpiresUtc instead. Setting either ResponseExpires or ResponseExpiresUtc results in both ResponseExpires and ResponseExpiresUtc being assigned, the latest assignment to either one of the two property is reflected in the value of both. ResponseExpires is provided for backwards compatibility only and assigning a non-Utc DateTime to it results in the wrong timestamp being passed to the service.", "False")]
public Nullable`1<DateTime> ResponseExpires { get; public set; }
    public Nullable`1<DateTime> ResponseExpiresUtc { get; public set; }
    public ServerSideEncryptionCustomerMethod ServerSideEncryptionCustomerMethod { get; public set; }
    [AWSPropertyAttribute]
public string ServerSideEncryptionCustomerProvidedKey { get; public set; }
    public string ServerSideEncryptionCustomerProvidedKeyMD5 { get; public set; }
    public string VersionId { get; public set; }
    public string EtagToMatch { get; public set; }
    public string EtagToNotMatch { get; public set; }
    public ByteRange ByteRange { get; public set; }
    public ResponseHeaderOverrides ResponseHeaderOverrides { get; public set; }
    public ChecksumMode ChecksumMode { get; public set; }
    protected CoreChecksumResponseBehavior CoreChecksumMode { get; }
    protected ReadOnlyCollection`1<CoreChecksumAlgorithm> ChecksumResponseAlgorithms { get; }
    private static GetObjectRequest();
    public string get_BucketName();
    public void set_BucketName(string value);
    internal bool IsSetBucketName();
    public string get_ExpectedBucketOwner();
    public void set_ExpectedBucketOwner(string value);
    internal bool IsSetExpectedBucketOwner();
    public Nullable`1<DateTime> get_ModifiedSinceDate();
    public void set_ModifiedSinceDate(Nullable`1<DateTime> value);
    public Nullable`1<DateTime> get_ModifiedSinceDateUtc();
    public void set_ModifiedSinceDateUtc(Nullable`1<DateTime> value);
    internal bool IsSetModifiedSinceDateUtc();
    public Nullable`1<DateTime> get_UnmodifiedSinceDate();
    public void set_UnmodifiedSinceDate(Nullable`1<DateTime> value);
    public Nullable`1<DateTime> get_UnmodifiedSinceDateUtc();
    public void set_UnmodifiedSinceDateUtc(Nullable`1<DateTime> value);
    internal bool IsSetUnmodifiedSinceDateUtc();
    public string get_Key();
    public void set_Key(string value);
    internal bool IsSetKey();
    public Nullable`1<int> get_PartNumber();
    public void set_PartNumber(Nullable`1<int> value);
    internal bool IsSetPartNumber();
    public RequestPayer get_RequestPayer();
    public void set_RequestPayer(RequestPayer value);
    internal bool IsSetRequestPayer();
    public Nullable`1<DateTime> get_ResponseExpires();
    public void set_ResponseExpires(Nullable`1<DateTime> value);
    public Nullable`1<DateTime> get_ResponseExpiresUtc();
    public void set_ResponseExpiresUtc(Nullable`1<DateTime> value);
    internal bool IsSetResponseExpiresUtc();
    public ServerSideEncryptionCustomerMethod get_ServerSideEncryptionCustomerMethod();
    public void set_ServerSideEncryptionCustomerMethod(ServerSideEncryptionCustomerMethod value);
    internal bool IsSetServerSideEncryptionCustomerMethod();
    public string get_ServerSideEncryptionCustomerProvidedKey();
    public void set_ServerSideEncryptionCustomerProvidedKey(string value);
    internal bool IsSetServerSideEncryptionCustomerProvidedKey();
    public string get_ServerSideEncryptionCustomerProvidedKeyMD5();
    public void set_ServerSideEncryptionCustomerProvidedKeyMD5(string value);
    internal bool IsSetServerSideEncryptionCustomerProvidedKeyMD5();
    public string get_VersionId();
    public void set_VersionId(string value);
    internal bool IsSetVersionId();
    public string get_EtagToMatch();
    public void set_EtagToMatch(string value);
    internal bool IsSetEtagToMatch();
    public string get_EtagToNotMatch();
    public void set_EtagToNotMatch(string value);
    internal bool IsSetEtagToNotMatch();
    public ByteRange get_ByteRange();
    public void set_ByteRange(ByteRange value);
    internal bool IsSetByteRange();
    public ResponseHeaderOverrides get_ResponseHeaderOverrides();
    public void set_ResponseHeaderOverrides(ResponseHeaderOverrides value);
    public ChecksumMode get_ChecksumMode();
    public void set_ChecksumMode(ChecksumMode value);
    internal bool IsSetChecksumMode();
    protected virtual CoreChecksumResponseBehavior get_CoreChecksumMode();
    protected virtual ReadOnlyCollection`1<CoreChecksumAlgorithm> get_ChecksumResponseAlgorithms();
}
public class Amazon.S3.Model.GetObjectResponse : StreamResponse {
    private string deleteMarker;
    private string acceptRanges;
    private string contentRange;
    private Expiration expiration;
    private Nullable`1<DateTime> restoreExpiration;
    private Nullable`1<bool> restoreInProgress;
    private Nullable`1<DateTime> lastModified;
    private string eTag;
    private Nullable`1<int> missingMeta;
    private string versionId;
    private Nullable`1<DateTime> expires;
    private ObjectLockLegalHoldStatus objectLockLegalHoldStatus;
    private ObjectLockMode objectLockMode;
    private Nullable`1<DateTime> objectLockRetainUntilDate;
    private string websiteRedirectLocation;
    private ServerSideEncryptionMethod serverSideEncryption;
    private ServerSideEncryptionCustomerMethod serverSideEncryptionCustomerMethod;
    private string serverSideEncryptionKeyManagementServiceKeyId;
    private HeadersCollection headersCollection;
    private MetadataCollection metadataCollection;
    private ReplicationStatus replicationStatus;
    private Nullable`1<int> partsCount;
    private S3StorageClass storageClass;
    private RequestCharged requestCharged;
    private Nullable`1<int> tagCount;
    private string bucketName;
    private string key;
    private Nullable`1<bool> bucketKeyEnabled;
    private string _checksumCRC32;
    private string _checksumCRC32C;
    private string _checksumSHA1;
    private string _checksumSHA256;
    private bool isExpiresUnmarshalled;
    [CompilerGeneratedAttribute]
private string <ExpiresString>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<WriteObjectProgressArgs> WriteObjectProgressEvent;
    public string ExpiresString { get; public set; }
    public string BucketName { get; public set; }
    public string Key { get; public set; }
    public string DeleteMarker { get; public set; }
    public HeadersCollection Headers { get; }
    public MetadataCollection Metadata { get; }
    public string AcceptRanges { get; public set; }
    public string ContentRange { get; public set; }
    public Expiration Expiration { get; public set; }
    public Nullable`1<DateTime> RestoreExpiration { get; public set; }
    public Nullable`1<bool> RestoreInProgress { get; public set; }
    public Nullable`1<DateTime> LastModified { get; public set; }
    public string ETag { get; public set; }
    public Nullable`1<int> MissingMeta { get; public set; }
    public string VersionId { get; public set; }
    [ObsoleteAttribute("This property is deprecated for handling cases where Expires cannot be parsed as a DateTime. Instead, use ExpiresString, which returns the unparsed value from S3.")]
public Nullable`1<DateTime> Expires { get; public set; }
    public ObjectLockLegalHoldStatus ObjectLockLegalHoldStatus { get; public set; }
    public ObjectLockMode ObjectLockMode { get; public set; }
    public Nullable`1<DateTime> ObjectLockRetainUntilDate { get; public set; }
    public string WebsiteRedirectLocation { get; public set; }
    public ServerSideEncryptionMethod ServerSideEncryptionMethod { get; public set; }
    public S3StorageClass StorageClass { get; public set; }
    [AWSPropertyAttribute]
public string ServerSideEncryptionKeyManagementServiceKeyId { get; public set; }
    public ReplicationStatus ReplicationStatus { get; public set; }
    public Nullable`1<int> PartsCount { get; public set; }
    public ServerSideEncryptionCustomerMethod ServerSideEncryptionCustomerMethod { get; public set; }
    public RequestCharged RequestCharged { get; public set; }
    public int TagCount { get; public set; }
    public Nullable`1<bool> BucketKeyEnabled { get; public set; }
    public string ChecksumCRC32 { get; public set; }
    public string ChecksumCRC32C { get; public set; }
    public string ChecksumSHA1 { get; public set; }
    public string ChecksumSHA256 { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ExpiresString();
    [CompilerGeneratedAttribute]
public void set_ExpiresString(string value);
    public string get_BucketName();
    public void set_BucketName(string value);
    public string get_Key();
    public void set_Key(string value);
    public string get_DeleteMarker();
    public void set_DeleteMarker(string value);
    internal bool IsSetDeleteMarker();
    public HeadersCollection get_Headers();
    public MetadataCollection get_Metadata();
    public string get_AcceptRanges();
    public void set_AcceptRanges(string value);
    internal bool IsSetAcceptRanges();
    public string get_ContentRange();
    public void set_ContentRange(string value);
    internal bool IsSetContentRange();
    public Expiration get_Expiration();
    public void set_Expiration(Expiration value);
    internal bool IsSetExpiration();
    public Nullable`1<DateTime> get_RestoreExpiration();
    public void set_RestoreExpiration(Nullable`1<DateTime> value);
    public Nullable`1<bool> get_RestoreInProgress();
    public void set_RestoreInProgress(Nullable`1<bool> value);
    public Nullable`1<DateTime> get_LastModified();
    public void set_LastModified(Nullable`1<DateTime> value);
    internal bool IsSetLastModified();
    public string get_ETag();
    public void set_ETag(string value);
    internal bool IsSetETag();
    public Nullable`1<int> get_MissingMeta();
    public void set_MissingMeta(Nullable`1<int> value);
    internal bool IsSetMissingMeta();
    public string get_VersionId();
    public void set_VersionId(string value);
    internal bool IsSetVersionId();
    public Nullable`1<DateTime> get_Expires();
    public void set_Expires(Nullable`1<DateTime> value);
    internal bool IsSetExpires();
    public ObjectLockLegalHoldStatus get_ObjectLockLegalHoldStatus();
    public void set_ObjectLockLegalHoldStatus(ObjectLockLegalHoldStatus value);
    internal bool IsSetObjectLockLegalHoldStatus();
    public ObjectLockMode get_ObjectLockMode();
    public void set_ObjectLockMode(ObjectLockMode value);
    internal bool IsSetObjectLockMode();
    public Nullable`1<DateTime> get_ObjectLockRetainUntilDate();
    public void set_ObjectLockRetainUntilDate(Nullable`1<DateTime> value);
    internal bool IsSetObjectLockRetainUntilDate();
    public string get_WebsiteRedirectLocation();
    public void set_WebsiteRedirectLocation(string value);
    internal bool IsSetWebsiteRedirectLocation();
    public ServerSideEncryptionMethod get_ServerSideEncryptionMethod();
    public void set_ServerSideEncryptionMethod(ServerSideEncryptionMethod value);
    internal bool IsSetServerSideEncryptionMethod();
    public S3StorageClass get_StorageClass();
    public void set_StorageClass(S3StorageClass value);
    internal bool IsSetStorageClass();
    public string get_ServerSideEncryptionKeyManagementServiceKeyId();
    public void set_ServerSideEncryptionKeyManagementServiceKeyId(string value);
    internal bool IsSetServerSideEncryptionKeyManagementServiceKeyId();
    public ReplicationStatus get_ReplicationStatus();
    public void set_ReplicationStatus(ReplicationStatus value);
    internal bool IsSetReplicationStatus();
    public Nullable`1<int> get_PartsCount();
    public void set_PartsCount(Nullable`1<int> value);
    internal bool IsSetPartsCount();
    public ServerSideEncryptionCustomerMethod get_ServerSideEncryptionCustomerMethod();
    public void set_ServerSideEncryptionCustomerMethod(ServerSideEncryptionCustomerMethod value);
    public RequestCharged get_RequestCharged();
    public void set_RequestCharged(RequestCharged value);
    internal bool IsSetRequestCharged();
    public int get_TagCount();
    public void set_TagCount(int value);
    public Nullable`1<bool> get_BucketKeyEnabled();
    public void set_BucketKeyEnabled(Nullable`1<bool> value);
    internal bool IsSetBucketKeyEnabled();
    public string get_ChecksumCRC32();
    public void set_ChecksumCRC32(string value);
    internal bool IsSetChecksumCRC32();
    public string get_ChecksumCRC32C();
    public void set_ChecksumCRC32C(string value);
    internal bool IsSetChecksumCRC32C();
    public string get_ChecksumSHA1();
    public void set_ChecksumSHA1(string value);
    internal bool IsSetChecksumSHA1();
    public string get_ChecksumSHA256();
    public void set_ChecksumSHA256(string value);
    internal bool IsSetChecksumSHA256();
    [CompilerGeneratedAttribute]
public void add_WriteObjectProgressEvent(EventHandler`1<WriteObjectProgressArgs> value);
    [CompilerGeneratedAttribute]
public void remove_WriteObjectProgressEvent(EventHandler`1<WriteObjectProgressArgs> value);
    internal void OnRaiseProgressEvent(string file, long incrementTransferred, long transferred, long total, bool completed);
    private void ValidateWrittenStreamSize(long bytesWritten);
    [AsyncStateMachineAttribute("Amazon.S3.Model.GetObjectResponse/<WriteResponseStreamToFileAsync>d__160")]
public Task WriteResponseStreamToFileAsync(string filePath, bool append, CancellationToken cancellationToken);
}
public class Amazon.S3.Model.GetObjectRetentionRequest : AmazonWebServiceRequest {
    private string _bucketName;
    private string expectedBucketOwner;
    private string _key;
    private RequestPayer _requestPayer;
    private string _versionId;
    public string BucketName { get; public set; }
    public string ExpectedBucketOwner { get; public set; }
    public string Key { get; public set; }
    public RequestPayer RequestPayer { get; public set; }
    public string VersionId { get; public set; }
    public string get_BucketName();
    public void set_BucketName(string value);
    internal bool IsSetBucketName();
    public string get_ExpectedBucketOwner();
    public void set_ExpectedBucketOwner(string value);
    internal bool IsSetExpectedBucketOwner();
    public string get_Key();
    public void set_Key(string value);
    internal bool IsSetKey();
    public RequestPayer get_RequestPayer();
    public void set_RequestPayer(RequestPayer value);
    internal bool IsSetRequestPayer();
    public string get_VersionId();
    public void set_VersionId(string value);
    internal bool IsSetVersionId();
}
public class Amazon.S3.Model.GetObjectRetentionResponse : AmazonWebServiceResponse {
    private ObjectLockRetention _retention;
    public ObjectLockRetention Retention { get; public set; }
    public ObjectLockRetention get_Retention();
    public void set_Retention(ObjectLockRetention value);
    internal bool IsSetRetention();
}
public class Amazon.S3.Model.GetObjectTaggingRequest : AmazonWebServiceRequest {
    private string bucketName;
    private string expectedBucketOwner;
    private string key;
    private RequestPayer requestPayer;
    private string versionId;
    public string BucketName { get; public set; }
    public string ExpectedBucketOwner { get; public set; }
    public string Key { get; public set; }
    public RequestPayer RequestPayer { get; public set; }
    public string VersionId { get; public set; }
    public string get_BucketName();
    public void set_BucketName(string value);
    internal bool IsSetBucketName();
    public string get_ExpectedBucketOwner();
    public void set_ExpectedBucketOwner(string value);
    internal bool IsSetExpectedBucketOwner();
    public string get_Key();
    public void set_Key(string value);
    internal bool IsSetKey();
    public RequestPayer get_RequestPayer();
    public void set_RequestPayer(RequestPayer value);
    internal bool IsSetRequestPayer();
    public string get_VersionId();
    public void set_VersionId(string value);
    internal bool IsSetVersionId();
}
public class Amazon.S3.Model.GetObjectTaggingResponse : AmazonWebServiceResponse {
    private List`1<Tag> tagging;
    public List`1<Tag> Tagging { get; public set; }
    public List`1<Tag> get_Tagging();
    public void set_Tagging(List`1<Tag> value);
}
public class Amazon.S3.Model.GetObjectTorrentRequest : AmazonWebServiceRequest {
    private string bucketName;
    private string key;
    private RequestPayer requestPayer;
    private string expectedBucketOwner;
    public string BucketName { get; public set; }
    public string Key { get; public set; }
    public RequestPayer RequestPayer { get; public set; }
    public string ExpectedBucketOwner { get; public set; }
    public string get_BucketName();
    public void set_BucketName(string value);
    internal bool IsSetBucketName();
    public string get_Key();
    public void set_Key(string value);
    internal bool IsSetKey();
    public RequestPayer get_RequestPayer();
    public void set_RequestPayer(RequestPayer value);
    internal bool IsSetRequestPayer();
    public string get_ExpectedBucketOwner();
    public void set_ExpectedBucketOwner(string value);
    internal bool IsSetExpectedBucketOwner();
}
public class Amazon.S3.Model.GetObjectTorrentResponse : StreamResponse {
    private RequestCharged requestCharged;
    public RequestCharged RequestCharged { get; public set; }
    public RequestCharged get_RequestCharged();
    public void set_RequestCharged(RequestCharged value);
    internal bool IsSetRequestCharged();
}
public class Amazon.S3.Model.GetPreSignedUrlRequest : AmazonWebServiceRequest {
    private ResponseHeaderOverrides _responseHeaders;
    private string bucketName;
    private string key;
    private Nullable`1<DateTime> expires;
    private Protocol protocol;
    private HttpVerb verb;
    private string versionId;
    private string uploadId;
    private Nullable`1<int> partNumber;
    private ServerSideEncryptionMethod encryption;
    private RequestPayer requestPayer;
    private string serverSideEncryptionKeyManagementServiceKeyId;
    private HeadersCollection headersCollection;
    private MetadataCollection metadataCollection;
    private ParameterCollection parameterCollection;
    private ServerSideEncryptionCustomerMethod serverSideCustomerEncryption;
    public string BucketName { get; public set; }
    public string Key { get; public set; }
    public string ContentType { get; public set; }
    public Nullable`1<DateTime> Expires { get; public set; }
    public Protocol Protocol { get; public set; }
    public HttpVerb Verb { get; public set; }
    public string VersionId { get; public set; }
    public string UploadId { get; public set; }
    public Nullable`1<int> PartNumber { get; public set; }
    public ServerSideEncryptionMethod ServerSideEncryptionMethod { get; public set; }
    [AWSPropertyAttribute]
public string ServerSideEncryptionKeyManagementServiceKeyId { get; public set; }
    public ServerSideEncryptionCustomerMethod ServerSideEncryptionCustomerMethod { get; public set; }
    public RequestPayer RequestPayer { get; public set; }
    public ResponseHeaderOverrides ResponseHeaderOverrides { get; public set; }
    public HeadersCollection Headers { get; internal set; }
    public MetadataCollection Metadata { get; internal set; }
    public ParameterCollection Parameters { get; internal set; }
    public string get_BucketName();
    public void set_BucketName(string value);
    internal bool IsSetBucketName();
    public string get_Key();
    public void set_Key(string value);
    internal bool IsSetKey();
    public string get_ContentType();
    public void set_ContentType(string value);
    public Nullable`1<DateTime> get_Expires();
    public void set_Expires(Nullable`1<DateTime> value);
    public bool IsSetExpires();
    public Protocol get_Protocol();
    public void set_Protocol(Protocol value);
    public HttpVerb get_Verb();
    public void set_Verb(HttpVerb value);
    public string get_VersionId();
    public void set_VersionId(string value);
    internal bool IsSetVersionId();
    public string get_UploadId();
    public void set_UploadId(string value);
    internal bool IsSetUploadId();
    public Nullable`1<int> get_PartNumber();
    public void set_PartNumber(Nullable`1<int> value);
    internal bool IsSetPartNumber();
    public ServerSideEncryptionMethod get_ServerSideEncryptionMethod();
    public void set_ServerSideEncryptionMethod(ServerSideEncryptionMethod value);
    public string get_ServerSideEncryptionKeyManagementServiceKeyId();
    public void set_ServerSideEncryptionKeyManagementServiceKeyId(string value);
    internal bool IsSetServerSideEncryptionKeyManagementServiceKeyId();
    public ServerSideEncryptionCustomerMethod get_ServerSideEncryptionCustomerMethod();
    public void set_ServerSideEncryptionCustomerMethod(ServerSideEncryptionCustomerMethod value);
    internal bool IsSetServerSideEncryptionCustomerMethod();
    public RequestPayer get_RequestPayer();
    public void set_RequestPayer(RequestPayer value);
    internal bool IsSetRequestPayer();
    public ResponseHeaderOverrides get_ResponseHeaderOverrides();
    public void set_ResponseHeaderOverrides(ResponseHeaderOverrides value);
    public HeadersCollection get_Headers();
    internal void set_Headers(HeadersCollection value);
    public MetadataCollection get_Metadata();
    internal void set_Metadata(MetadataCollection value);
    public ParameterCollection get_Parameters();
    internal void set_Parameters(ParameterCollection value);
}
public class Amazon.S3.Model.GetPreSignedUrlResponse : AmazonWebServiceResponse {
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    public string Url { get; internal set; }
    public GetPreSignedUrlResponse(string url);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
internal void set_Url(string value);
}
public class Amazon.S3.Model.GetPublicAccessBlockRequest : AmazonWebServiceRequest {
    private string bucketName;
    private string expectedBucketOwner;
    public string BucketName { get; public set; }
    public string ExpectedBucketOwner { get; public set; }
    public string get_BucketName();
    public void set_BucketName(string value);
    internal bool IsSetBucketName();
    public string get_ExpectedBucketOwner();
    public void set_ExpectedBucketOwner(string value);
    internal bool IsSetExpectedBucketOwner();
}
public class Amazon.S3.Model.GetPublicAccessBlockResponse : AmazonWebServiceResponse {
    private PublicAccessBlockConfiguration publicAccessBlockConfiguration;
    public PublicAccessBlockConfiguration PublicAccessBlockConfiguration { get; public set; }
    public PublicAccessBlockConfiguration get_PublicAccessBlockConfiguration();
    public void set_PublicAccessBlockConfiguration(PublicAccessBlockConfiguration value);
    internal bool IsSetPublicAccessBlockConfiguration();
}
public class Amazon.S3.Model.HeadBucketRequest : AmazonWebServiceRequest {
    private string bucketName;
    private string expectedBucketOwner;
    public string BucketName { get; public set; }
    public string ExpectedBucketOwner { get; public set; }
    public string get_BucketName();
    public void set_BucketName(string value);
    internal bool IsSetBucketName();
    public string get_ExpectedBucketOwner();
    public void set_ExpectedBucketOwner(string value);
    internal bool IsSetExpectedBucketOwner();
}
public class Amazon.S3.Model.HeadBucketResponse : AmazonWebServiceResponse {
    private Nullable`1<bool> _accessPointAlias;
    private string _bucketLocationName;
    private LocationType _bucketLocationType;
    private string _bucketRegion;
    public Nullable`1<bool> AccessPointAlias { get; public set; }
    public string BucketLocationName { get; public set; }
    public LocationType BucketLocationType { get; public set; }
    [AWSPropertyAttribute]
public string BucketRegion { get; public set; }
    public Nullable`1<bool> get_AccessPointAlias();
    public void set_AccessPointAlias(Nullable`1<bool> value);
    internal bool IsSetAccessPointAlias();
    public string get_BucketLocationName();
    public void set_BucketLocationName(string value);
    internal bool IsSetBucketLocationName();
    public LocationType get_BucketLocationType();
    public void set_BucketLocationType(LocationType value);
    internal bool IsSetBucketLocationType();
    public string get_BucketRegion();
    public void set_BucketRegion(string value);
    internal bool IsSetBucketRegion();
}
[DefaultMemberAttribute("Item")]
public class Amazon.S3.Model.HeadersCollection : object {
    private IDictionary`2<string, string> _values;
    public string Item { get; public set; }
    public int Count { get; }
    public ICollection`1<string> Keys { get; }
    public string CacheControl { get; public set; }
    public string ContentDisposition { get; public set; }
    public string ContentEncoding { get; public set; }
    public long ContentLength { get; public set; }
    public string ContentMD5 { get; public set; }
    public string ContentType { get; public set; }
    public Nullable`1<DateTime> ExpiresUtc { get; public set; }
    [ObsoleteAttribute("Setting this property results in non-UTC DateTimes not being marshalled correctly. Use ExpiresUtc instead.", "False")]
public Nullable`1<DateTime> Expires { get; public set; }
    public string get_Item(string name);
    public void set_Item(string name, string value);
    public int get_Count();
    public ICollection`1<string> get_Keys();
    public string get_CacheControl();
    public void set_CacheControl(string value);
    public string get_ContentDisposition();
    public void set_ContentDisposition(string value);
    public string get_ContentEncoding();
    public void set_ContentEncoding(string value);
    public long get_ContentLength();
    public void set_ContentLength(long value);
    public string get_ContentMD5();
    public void set_ContentMD5(string value);
    public string get_ContentType();
    public void set_ContentType(string value);
    internal bool IsSetContentType();
    public Nullable`1<DateTime> get_ExpiresUtc();
    public void set_ExpiresUtc(Nullable`1<DateTime> value);
    public Nullable`1<DateTime> get_Expires();
    public void set_Expires(Nullable`1<DateTime> value);
}
public interface Amazon.S3.Model.IListMultipartUploadsPaginator {
    public IPaginatedEnumerable`1<ListMultipartUploadsResponse> Responses { get; }
    public IPaginatedEnumerable`1<MultipartUpload> Uploads { get; }
    public IPaginatedEnumerable`1<string> CommonPrefixes { get; }
    public abstract virtual IPaginatedEnumerable`1<ListMultipartUploadsResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<MultipartUpload> get_Uploads();
    public abstract virtual IPaginatedEnumerable`1<string> get_CommonPrefixes();
}
public interface Amazon.S3.Model.IListObjectsPaginator {
    public IPaginatedEnumerable`1<ListObjectsResponse> Responses { get; }
    public IPaginatedEnumerable`1<S3Object> S3Objects { get; }
    public IPaginatedEnumerable`1<string> CommonPrefixes { get; }
    public abstract virtual IPaginatedEnumerable`1<ListObjectsResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<S3Object> get_S3Objects();
    public abstract virtual IPaginatedEnumerable`1<string> get_CommonPrefixes();
}
public interface Amazon.S3.Model.IListObjectsV2Paginator {
    public IPaginatedEnumerable`1<ListObjectsV2Response> Responses { get; }
    public IPaginatedEnumerable`1<S3Object> S3Objects { get; }
    public IPaginatedEnumerable`1<string> CommonPrefixes { get; }
    public abstract virtual IPaginatedEnumerable`1<ListObjectsV2Response> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<S3Object> get_S3Objects();
    public abstract virtual IPaginatedEnumerable`1<string> get_CommonPrefixes();
}
public interface Amazon.S3.Model.IListPartsPaginator {
    public IPaginatedEnumerable`1<ListPartsResponse> Responses { get; }
    public IPaginatedEnumerable`1<PartDetail> Parts { get; }
    public abstract virtual IPaginatedEnumerable`1<ListPartsResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<PartDetail> get_Parts();
}
public interface Amazon.S3.Model.IListVersionsPaginator {
    public IPaginatedEnumerable`1<ListVersionsResponse> Responses { get; }
    public IPaginatedEnumerable`1<S3ObjectVersion> Versions { get; }
    public IPaginatedEnumerable`1<string> CommonPrefixes { get; }
    public abstract virtual IPaginatedEnumerable`1<ListVersionsResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<S3ObjectVersion> get_Versions();
    public abstract virtual IPaginatedEnumerable`1<string> get_CommonPrefixes();
}
public class Amazon.S3.Model.InitiateMultipartUploadRequest : PutWithACLRequest {
    private S3CannedACL cannedACL;
    private Nullable`1<bool> bucketKeyEnabled;
    private string bucketName;
    private string expectedBucketOwner;
    private string key;
    private HeadersCollection headersCollection;
    private MetadataCollection metadataCollection;
    private ObjectLockLegalHoldStatus objectLockLegalHoldStatus;
    private ObjectLockMode objectLockMode;
    private Nullable`1<DateTime> objectLockRetainUntilDate;
    private RequestPayer requestPayer;
    private ServerSideEncryptionMethod serverSideEncryption;
    private ServerSideEncryptionCustomerMethod serverSideCustomerEncryption;
    private string serverSideEncryptionCustomerProvidedKey;
    private string serverSideEncryptionCustomerProvidedKeyMD5;
    private string serverSideEncryptionKeyManagementServiceKeyId;
    private string serverSideEncryptionKeyManagementServiceEncryptionContext;
    private S3StorageClass storageClass;
    private List`1<Tag> tagset;
    private string websiteRedirectLocation;
    private ChecksumAlgorithm _checksumAlgorithm;
    public S3CannedACL CannedACL { get; public set; }
    public Nullable`1<bool> BucketKeyEnabled { get; public set; }
    public string BucketName { get; public set; }
    public string ContentType { get; public set; }
    public string ExpectedBucketOwner { get; public set; }
    public string Key { get; public set; }
    public MetadataCollection Metadata { get; internal set; }
    public ObjectLockLegalHoldStatus ObjectLockLegalHoldStatus { get; public set; }
    public ObjectLockMode ObjectLockMode { get; public set; }
    public Nullable`1<DateTime> ObjectLockRetainUntilDate { get; public set; }
    public RequestPayer RequestPayer { get; public set; }
    public ServerSideEncryptionMethod ServerSideEncryptionMethod { get; public set; }
    [AWSPropertyAttribute]
public string ServerSideEncryptionKeyManagementServiceKeyId { get; public set; }
    public ServerSideEncryptionCustomerMethod ServerSideEncryptionCustomerMethod { get; public set; }
    [AWSPropertyAttribute]
public string ServerSideEncryptionCustomerProvidedKey { get; public set; }
    public string ServerSideEncryptionCustomerProvidedKeyMD5 { get; public set; }
    [AWSPropertyAttribute]
public string ServerSideEncryptionKeyManagementServiceEncryptionContext { get; public set; }
    public S3StorageClass StorageClass { get; public set; }
    public List`1<Tag> TagSet { get; public set; }
    public string WebsiteRedirectLocation { get; public set; }
    public HeadersCollection Headers { get; internal set; }
    public ChecksumAlgorithm ChecksumAlgorithm { get; public set; }
    public S3CannedACL get_CannedACL();
    public void set_CannedACL(S3CannedACL value);
    internal bool IsSetCannedACL();
    public Nullable`1<bool> get_BucketKeyEnabled();
    public void set_BucketKeyEnabled(Nullable`1<bool> value);
    internal bool IsSetBucketKeyEnabled();
    public string get_BucketName();
    public void set_BucketName(string value);
    internal bool IsSetBucketName();
    public string get_ContentType();
    public void set_ContentType(string value);
    public string get_ExpectedBucketOwner();
    public void set_ExpectedBucketOwner(string value);
    internal bool IsSetExpectedBucketOwner();
    public string get_Key();
    public void set_Key(string value);
    internal bool IsSetKey();
    public MetadataCollection get_Metadata();
    internal void set_Metadata(MetadataCollection value);
    public ObjectLockLegalHoldStatus get_ObjectLockLegalHoldStatus();
    public void set_ObjectLockLegalHoldStatus(ObjectLockLegalHoldStatus value);
    internal bool IsSetObjectLockLegalHoldStatus();
    public ObjectLockMode get_ObjectLockMode();
    public void set_ObjectLockMode(ObjectLockMode value);
    internal bool IsSetObjectLockMode();
    public Nullable`1<DateTime> get_ObjectLockRetainUntilDate();
    public void set_ObjectLockRetainUntilDate(Nullable`1<DateTime> value);
    internal bool IsSetObjectLockRetainUntilDate();
    public RequestPayer get_RequestPayer();
    public void set_RequestPayer(RequestPayer value);
    internal bool IsSetRequestPayer();
    public ServerSideEncryptionMethod get_ServerSideEncryptionMethod();
    public void set_ServerSideEncryptionMethod(ServerSideEncryptionMethod value);
    internal bool IsSetServerSideEncryptionMethod();
    public string get_ServerSideEncryptionKeyManagementServiceKeyId();
    public void set_ServerSideEncryptionKeyManagementServiceKeyId(string value);
    internal bool IsSetServerSideEncryptionKeyManagementServiceKeyId();
    public ServerSideEncryptionCustomerMethod get_ServerSideEncryptionCustomerMethod();
    public void set_ServerSideEncryptionCustomerMethod(ServerSideEncryptionCustomerMethod value);
    internal bool IsSetServerSideEncryptionCustomerMethod();
    public string get_ServerSideEncryptionCustomerProvidedKey();
    public void set_ServerSideEncryptionCustomerProvidedKey(string value);
    internal bool IsSetServerSideEncryptionCustomerProvidedKey();
    public string get_ServerSideEncryptionCustomerProvidedKeyMD5();
    public void set_ServerSideEncryptionCustomerProvidedKeyMD5(string value);
    internal bool IsSetServerSideEncryptionCustomerProvidedKeyMD5();
    public string get_ServerSideEncryptionKeyManagementServiceEncryptionContext();
    public void set_ServerSideEncryptionKeyManagementServiceEncryptionContext(string value);
    internal bool IsSetServerSideEncryptionKeyManagementServiceEncryptionContext();
    public S3StorageClass get_StorageClass();
    public void set_StorageClass(S3StorageClass value);
    internal bool IsSetStorageClass();
    public List`1<Tag> get_TagSet();
    public void set_TagSet(List`1<Tag> value);
    internal bool IsSetTagSet();
    public string get_WebsiteRedirectLocation();
    public void set_WebsiteRedirectLocation(string value);
    internal bool IsSetWebsiteRedirectLocation();
    public HeadersCollection get_Headers();
    internal void set_Headers(HeadersCollection value);
    public ChecksumAlgorithm get_ChecksumAlgorithm();
    public void set_ChecksumAlgorithm(ChecksumAlgorithm value);
    internal bool IsSetChecksumAlgorithm();
}
public class Amazon.S3.Model.InitiateMultipartUploadResponse : AmazonWebServiceResponse {
    private Nullable`1<DateTime> abortDate;
    private string abortRuleId;
    private Nullable`1<bool> bucketKeyEnabled;
    private string bucketName;
    private ChecksumAlgorithm _checksumAlgorithm;
    private string key;
    private RequestCharged requestCharged;
    private ServerSideEncryptionMethod serverSideEncryption;
    private ServerSideEncryptionCustomerMethod serverSideCustomerEncryption;
    private string serverSideEncryptionCustomerProvidedKeyMD5;
    private string serverSideEncryptionKeyManagementServiceKeyId;
    private string serverSideEncryptionKeyManagementServiceEncryptionContext;
    private string uploadId;
    public Nullable`1<DateTime> AbortDate { get; public set; }
    public string AbortRuleId { get; public set; }
    public Nullable`1<bool> BucketKeyEnabled { get; public set; }
    public string BucketName { get; public set; }
    public ChecksumAlgorithm ChecksumAlgorithm { get; public set; }
    public string Key { get; public set; }
    public RequestCharged RequestCharged { get; public set; }
    public ServerSideEncryptionMethod ServerSideEncryptionMethod { get; public set; }
    public ServerSideEncryptionCustomerMethod ServerSideEncryptionCustomerMethod { get; public set; }
    public string ServerSideEncryptionCustomerProvidedKeyMD5 { get; public set; }
    [AWSPropertyAttribute]
public string ServerSideEncryptionKeyManagementServiceKeyId { get; public set; }
    [AWSPropertyAttribute]
public string ServerSideEncryptionKeyManagementServiceEncryptionContext { get; public set; }
    public string UploadId { get; public set; }
    public Nullable`1<DateTime> get_AbortDate();
    public void set_AbortDate(Nullable`1<DateTime> value);
    internal bool IsSetAbortDate();
    public string get_AbortRuleId();
    public void set_AbortRuleId(string value);
    internal bool IsSetAbortRuleId();
    public Nullable`1<bool> get_BucketKeyEnabled();
    public void set_BucketKeyEnabled(Nullable`1<bool> value);
    internal bool IsSetBucketKeyEnabled();
    public string get_BucketName();
    public void set_BucketName(string value);
    internal bool IsSetBucketName();
    public ChecksumAlgorithm get_ChecksumAlgorithm();
    public void set_ChecksumAlgorithm(ChecksumAlgorithm value);
    internal bool IsSetChecksumAlgorithm();
    public string get_Key();
    public void set_Key(string value);
    internal bool IsSetKey();
    public RequestCharged get_RequestCharged();
    public void set_RequestCharged(RequestCharged value);
    internal bool IsSetRequestCharged();
    public ServerSideEncryptionMethod get_ServerSideEncryptionMethod();
    public void set_ServerSideEncryptionMethod(ServerSideEncryptionMethod value);
    public ServerSideEncryptionCustomerMethod get_ServerSideEncryptionCustomerMethod();
    public void set_ServerSideEncryptionCustomerMethod(ServerSideEncryptionCustomerMethod value);
    public string get_ServerSideEncryptionCustomerProvidedKeyMD5();
    public void set_ServerSideEncryptionCustomerProvidedKeyMD5(string value);
    public string get_ServerSideEncryptionKeyManagementServiceKeyId();
    public void set_ServerSideEncryptionKeyManagementServiceKeyId(string value);
    internal bool IsSetServerSideEncryptionKeyManagementServiceKeyId();
    public string get_ServerSideEncryptionKeyManagementServiceEncryptionContext();
    public void set_ServerSideEncryptionKeyManagementServiceEncryptionContext(string value);
    public string get_UploadId();
    public void set_UploadId(string value);
    internal bool IsSetUploadId();
}
public class Amazon.S3.Model.Initiator : object {
    private string displayName;
    private string iD;
    public string DisplayName { get; public set; }
    public string Id { get; public set; }
    public string get_DisplayName();
    public void set_DisplayName(string value);
    internal bool IsSetDisplayName();
    public string get_Id();
    public void set_Id(string value);
    internal bool IsSetId();
}
public class Amazon.S3.Model.InputSerialization : object {
    [CompilerGeneratedAttribute]
private CSVInput <CSV>k__BackingField;
    [CompilerGeneratedAttribute]
private CompressionType <CompressionType>k__BackingField;
    [CompilerGeneratedAttribute]
private JSONInput <JSON>k__BackingField;
    [CompilerGeneratedAttribute]
private ParquetInput <Parquet>k__BackingField;
    public CSVInput CSV { get; public set; }
    public CompressionType CompressionType { get; public set; }
    public JSONInput JSON { get; public set; }
    public ParquetInput Parquet { get; public set; }
    [CompilerGeneratedAttribute]
public CSVInput get_CSV();
    [CompilerGeneratedAttribute]
public void set_CSV(CSVInput value);
    [CompilerGeneratedAttribute]
public CompressionType get_CompressionType();
    [CompilerGeneratedAttribute]
public void set_CompressionType(CompressionType value);
    [CompilerGeneratedAttribute]
public JSONInput get_JSON();
    [CompilerGeneratedAttribute]
public void set_JSON(JSONInput value);
    [CompilerGeneratedAttribute]
public ParquetInput get_Parquet();
    [CompilerGeneratedAttribute]
public void set_Parquet(ParquetInput value);
    internal bool IsSetCSV();
    internal bool IsSetCompressionType();
    internal bool IsSetJSON();
    internal bool IsSetParquet();
    internal void Marshall(string memberName, XmlWriter xmlWriter);
}
public class Amazon.S3.Model.IntelligentTieringAndOperator : IntelligentTieringNAryOperator {
    public IntelligentTieringAndOperator(List`1<IntelligentTieringFilterPredicate> operands);
    internal virtual void Accept(IIntelligentTieringPredicateVisitor intelligentTieringPredicateVisitor);
}
public class Amazon.S3.Model.IntelligentTieringConfiguration : object {
    private string intelligentTieringId;
    private IntelligentTieringFilter intelligentTieringFilter;
    private IntelligentTieringStatus status;
    private List`1<Tiering> tierings;
    public string IntelligentTieringId { get; public set; }
    public IntelligentTieringFilter IntelligentTieringFilter { get; public set; }
    public IntelligentTieringStatus Status { get; public set; }
    public List`1<Tiering> Tierings { get; public set; }
    public string get_IntelligentTieringId();
    public void set_IntelligentTieringId(string value);
    internal bool IsSetIntelligentTieringId();
    public IntelligentTieringFilter get_IntelligentTieringFilter();
    public void set_IntelligentTieringFilter(IntelligentTieringFilter value);
    internal bool IsSetIntelligentTieringFilter();
    public IntelligentTieringStatus get_Status();
    public void set_Status(IntelligentTieringStatus value);
    internal bool IsSetStatus();
    public List`1<Tiering> get_Tierings();
    public void set_Tierings(List`1<Tiering> value);
    internal bool IsSetTieringList();
}
public class Amazon.S3.Model.IntelligentTieringFilter : object {
    private IntelligentTieringFilterPredicate intelligentTieringFilterPredicate;
    public IntelligentTieringFilterPredicate IntelligentTieringFilterPredicate { get; public set; }
    public IntelligentTieringFilterPredicate get_IntelligentTieringFilterPredicate();
    public void set_IntelligentTieringFilterPredicate(IntelligentTieringFilterPredicate value);
}
public abstract class Amazon.S3.Model.IntelligentTieringFilterPredicate : object {
    internal abstract virtual void Accept(IIntelligentTieringPredicateVisitor intelligentTieringPredicateVisitor);
}
public abstract class Amazon.S3.Model.IntelligentTieringNAryOperator : IntelligentTieringFilterPredicate {
    private List`1<IntelligentTieringFilterPredicate> operands;
    public List`1<IntelligentTieringFilterPredicate> Operands { get; }
    protected IntelligentTieringNAryOperator(List`1<IntelligentTieringFilterPredicate> operands);
    public List`1<IntelligentTieringFilterPredicate> get_Operands();
}
public class Amazon.S3.Model.IntelligentTieringPrefixPredicate : IntelligentTieringFilterPredicate {
    private string prefix;
    public string Prefix { get; }
    public IntelligentTieringPrefixPredicate(string prefix);
    public string get_Prefix();
    internal virtual void Accept(IIntelligentTieringPredicateVisitor intelligentTieringPredicateVisitor);
}
public class Amazon.S3.Model.IntelligentTieringTagPredicate : IntelligentTieringFilterPredicate {
    private Tag tag;
    public Tag Tag { get; }
    public IntelligentTieringTagPredicate(Tag tag);
    public Tag get_Tag();
    internal virtual void Accept(IIntelligentTieringPredicateVisitor intelligentTieiringPredicateVisitor);
}
internal class Amazon.S3.Model.Internal.AnalyticsPredicateVisitor : object {
    private XmlWriter xmlWriter;
    public AnalyticsPredicateVisitor(XmlWriter xmlWriter);
    public sealed virtual void Visit(AnalyticsPrefixPredicate analyticsPrefixPredicate);
    public sealed virtual void visit(AnalyticsTagPredicate analyticsTagPredicate);
    public sealed virtual void visit(AnalyticsAndOperator analyticsAndOperatorPredicate);
}
internal interface Amazon.S3.Model.Internal.IAnalyticsPredicateVisitor {
    public abstract virtual void Visit(AnalyticsPrefixPredicate analyticsPrefixPredicate);
    public abstract virtual void visit(AnalyticsTagPredicate analyticsTagPredicate);
    public abstract virtual void visit(AnalyticsAndOperator analyticsAndOperatorPredicate);
}
internal interface Amazon.S3.Model.Internal.IIntelligentTieringPredicateVisitor {
    public abstract virtual void Visit(IntelligentTieringPrefixPredicate intelligentTieringPrefixPredicate);
    public abstract virtual void Visit(IntelligentTieringTagPredicate intelligentTieringTagPredicate);
    public abstract virtual void Visit(IntelligentTieringAndOperator intelligentTieringAndOperator);
}
internal interface Amazon.S3.Model.Internal.IInventoryPredicateVisitor {
    public abstract virtual void Visit(InventoryPrefixPredicate inventoryPrefixPredicate);
}
internal interface Amazon.S3.Model.Internal.ILifecyclePredicateVisitor {
    public abstract virtual void Visit(LifecyclePrefixPredicate lifecyclePrefixPredicate);
    public abstract virtual void Visit(LifecycleTagPredicate lifecycleTagPredicate);
    public abstract virtual void Visit(LifecycleObjectSizeGreaterThanPredicate lifecycleGreaterThanPredicate);
    public abstract virtual void Visit(LifecycleObjectSizeLessThanPredicate lifecycleGreaterLessThanPredicate);
    public abstract virtual void Visit(LifecycleAndOperator lifecycleAndOperator);
}
internal interface Amazon.S3.Model.Internal.IMetricsPredicateVisitor {
    public abstract virtual void Visit(MetricsPrefixPredicate metricsPrefixPredicate);
    public abstract virtual void visit(MetricsTagPredicate metricsTagPredicate);
    public abstract virtual void visit(MetricsAndOperator metricsAndOperatorPredicate);
    public abstract virtual void visit(MetricsAccessPointArnPredicate metricsAccessPointArnPredicate);
}
internal class Amazon.S3.Model.Internal.IntelligentTieringPredicateVisitor : object {
    private XmlWriter xmlWriter;
    public IntelligentTieringPredicateVisitor(XmlWriter xmlWriter);
    public sealed virtual void Visit(IntelligentTieringPrefixPredicate intelligentTieringPrefixPredicate);
    public sealed virtual void Visit(IntelligentTieringTagPredicate intelligentTieringTagPredicate);
    public sealed virtual void Visit(IntelligentTieringAndOperator intelligentTieringAndOperatorPredicate);
}
internal class Amazon.S3.Model.Internal.InventoryPredicateVisitor : object {
    private XmlWriter xmlWriter;
    public InventoryPredicateVisitor(XmlWriter xmlWriter);
    public sealed virtual void Visit(InventoryPrefixPredicate inventoryPrefixPredicate);
}
internal class Amazon.S3.Model.Internal.LifecycleFilterPredicateMarshallVisitor : object {
    private XmlWriter xmlWriter;
    public LifecycleFilterPredicateMarshallVisitor(XmlWriter xmlWriter);
    public sealed virtual void Visit(LifecyclePrefixPredicate lifecyclePrefixPredicate);
    public sealed virtual void Visit(LifecycleTagPredicate lifecycleTagPredicate);
    public sealed virtual void Visit(LifecycleObjectSizeGreaterThanPredicate lifecycleGreaterThanPredicate);
    public sealed virtual void Visit(LifecycleObjectSizeLessThanPredicate lifecycleGreaterLessThanPredicate);
    public sealed virtual void Visit(LifecycleAndOperator lifecycleAndOperator);
}
public class Amazon.S3.Model.Internal.MarshallTransformations.AbortIncompleteMultipartUploadUnmarshaller : object {
    private static AbortIncompleteMultipartUploadUnmarshaller _instance;
    public static AbortIncompleteMultipartUploadUnmarshaller Instance { get; }
    public sealed virtual LifecycleRuleAbortIncompleteMultipartUpload Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual LifecycleRuleAbortIncompleteMultipartUpload Unmarshall(JsonUnmarshallerContext context);
    public static AbortIncompleteMultipartUploadUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.AbortMultipartUploadRequestMarshaller : object {
    private static AbortMultipartUploadRequestMarshaller _instance;
    public static AbortMultipartUploadRequestMarshaller Instance { get; }
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(AbortMultipartUploadRequest abortMultipartUploadRequest);
    public static AbortMultipartUploadRequestMarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.AbortMultipartUploadResponseUnmarshaller : S3ReponseUnmarshaller {
    private static AbortMultipartUploadResponseUnmarshaller _instance;
    public static AbortMultipartUploadResponseUnmarshaller Instance { get; }
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    public static AbortMultipartUploadResponseUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.AccessControlTranslationUnmarshaller : object {
    private static AccessControlTranslationUnmarshaller _instance;
    public static AccessControlTranslationUnmarshaller Instance { get; }
    public sealed virtual AccessControlTranslation Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual AccessControlTranslation Unmarshall(JsonUnmarshallerContext context);
    public static AccessControlTranslationUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.AnalyticsConfigurationUnmarshaller : object {
    private static AnalyticsConfigurationUnmarshaller _instance;
    public static AnalyticsConfigurationUnmarshaller Instance { get; }
    public sealed virtual AnalyticsConfiguration Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual AnalyticsConfiguration Unmarshall(JsonUnmarshallerContext context);
    public static AnalyticsConfigurationUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.AnalyticsExportDestinationUnmarshaller : object {
    private static AnalyticsExportDestinationUnmarshaller _instance;
    public static AnalyticsExportDestinationUnmarshaller Instance { get; }
    public sealed virtual AnalyticsExportDestination Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual AnalyticsExportDestination Unmarshall(JsonUnmarshallerContext context);
    public static AnalyticsExportDestinationUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.AnalyticsPredicateListUnmarshaller : object {
    private static AnalyticsPredicateListUnmarshaller _instance;
    public static AnalyticsPredicateListUnmarshaller Instance { get; }
    public sealed virtual List`1<AnalyticsFilterPredicate> Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual List`1<AnalyticsFilterPredicate> Unmarshall(JsonUnmarshallerContext context);
    public static AnalyticsPredicateListUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.AnalyticsS3BucketDestinationUnmarshaller : object {
    private static AnalyticsS3BucketDestinationUnmarshaller _instance;
    public static AnalyticsS3BucketDestinationUnmarshaller Instance { get; }
    public sealed virtual AnalyticsS3BucketDestination Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual AnalyticsS3BucketDestination Unmarshall(JsonUnmarshallerContext context);
    public static AnalyticsS3BucketDestinationUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.BucketAlreadyExistsExceptionUnmarshaller : object {
    private static BucketAlreadyExistsExceptionUnmarshaller _instance;
    public static BucketAlreadyExistsExceptionUnmarshaller Instance { get; }
    private static BucketAlreadyExistsExceptionUnmarshaller();
    public sealed virtual BucketAlreadyExistsException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual BucketAlreadyExistsException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static BucketAlreadyExistsExceptionUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.BucketAlreadyOwnedByYouExceptionUnmarshaller : object {
    private static BucketAlreadyOwnedByYouExceptionUnmarshaller _instance;
    public static BucketAlreadyOwnedByYouExceptionUnmarshaller Instance { get; }
    private static BucketAlreadyOwnedByYouExceptionUnmarshaller();
    public sealed virtual BucketAlreadyOwnedByYouException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual BucketAlreadyOwnedByYouException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static BucketAlreadyOwnedByYouExceptionUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.BucketUnmarshaller : object {
    private static BucketUnmarshaller _instance;
    public static BucketUnmarshaller Instance { get; }
    public sealed virtual S3Bucket Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual S3Bucket Unmarshall(JsonUnmarshallerContext context);
    public static BucketUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.ChecksumUnmarshaller : object {
    private static ChecksumUnmarshaller _instance;
    public static ChecksumUnmarshaller Instance { get; }
    private static ChecksumUnmarshaller();
    public sealed virtual Checksum Unmarshall(XmlUnmarshallerContext context);
    public static ChecksumUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.CommonPrefixesItemUnmarshaller : object {
    private static CommonPrefixesItemUnmarshaller _instance;
    public static CommonPrefixesItemUnmarshaller Instance { get; }
    public sealed virtual string Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual string Unmarshall(JsonUnmarshallerContext context);
    public static CommonPrefixesItemUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.CompleteMultipartUploadRequestMarshaller : object {
    private static CompleteMultipartUploadRequestMarshaller _instance;
    public static CompleteMultipartUploadRequestMarshaller Instance { get; }
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(CompleteMultipartUploadRequest completeMultipartUploadRequest);
    public static CompleteMultipartUploadRequestMarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.CompleteMultipartUploadResponseUnmarshaller : S3ReponseUnmarshaller {
    private static CompleteMultipartUploadResponseUnmarshaller _instance;
    public static CompleteMultipartUploadResponseUnmarshaller Instance { get; }
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, CompleteMultipartUploadResponse response);
    public static CompleteMultipartUploadResponseUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.ContentsItemUnmarshaller : object {
    private static ContentsItemUnmarshaller _instance;
    public static ContentsItemUnmarshaller Instance { get; }
    public sealed virtual S3Object Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual S3Object Unmarshall(JsonUnmarshallerContext context);
    public static ContentsItemUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.CopyObjectRequestMarshaller : object {
    private static CopyObjectRequestMarshaller _instance;
    public static CopyObjectRequestMarshaller Instance { get; }
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(CopyObjectRequest copyObjectRequest);
    private static string ConstructCopySourceHeaderValue(string bucket, string key, string version);
    public static CopyObjectRequestMarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.CopyObjectResponseUnmarshaller : S3ReponseUnmarshaller {
    private static CopyObjectResponseUnmarshaller _instance;
    public static CopyObjectResponseUnmarshaller Instance { get; }
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, CopyObjectResponse response);
    public static CopyObjectResponseUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.CopyPartRequestMarshaller : object {
    private static CopyPartRequestMarshaller _instance;
    public static CopyPartRequestMarshaller Instance { get; }
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(CopyPartRequest copyPartRequest);
    private static string ConstructCopySourceHeaderValue(string bucket, string key, string version);
    private static string ConstructCopySourceRangeHeader(long firstByte, long lastByte);
    public static CopyPartRequestMarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.CopyPartResponseUnmarshaller : S3ReponseUnmarshaller {
    private static CopyPartResponseUnmarshaller _instance;
    public static CopyPartResponseUnmarshaller Instance { get; }
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, CopyPartResponse response);
    public static CopyPartResponseUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.CORSRuleUnmarshaller : object {
    private static CORSRuleUnmarshaller _instance;
    public static CORSRuleUnmarshaller Instance { get; }
    public sealed virtual CORSRule Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual CORSRule Unmarshall(JsonUnmarshallerContext context);
    public static CORSRuleUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.CreateSessionRequestMarshaller : object {
    private static CreateSessionRequestMarshaller _instance;
    public static CreateSessionRequestMarshaller Instance { get; }
    private static CreateSessionRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(CreateSessionRequest publicRequest);
    internal static CreateSessionRequestMarshaller GetInstance();
    public static CreateSessionRequestMarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.CreateSessionResponseUnmarshaller : XmlResponseUnmarshaller {
    private static CreateSessionResponseUnmarshaller _instance;
    public static CreateSessionResponseUnmarshaller Instance { get; }
    private static CreateSessionResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, CreateSessionResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static CreateSessionResponseUnmarshaller GetInstance();
    public static CreateSessionResponseUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.DefaultRetentionUnmarshaller : object {
    private static DefaultRetentionUnmarshaller _instance;
    public static DefaultRetentionUnmarshaller Instance { get; }
    public sealed virtual DefaultRetention Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual DefaultRetention Unmarshall(JsonUnmarshallerContext context);
    public static DefaultRetentionUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.DeleteBucketAnalyticsConfigurationRequestMarshaller : object {
    private static DeleteBucketAnalyticsConfigurationRequestMarshaller _instance;
    public static DeleteBucketAnalyticsConfigurationRequestMarshaller Instance { get; }
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeleteBucketAnalyticsConfigurationRequest deleteBucketAnalyticsConfigurationRequest);
    public static DeleteBucketAnalyticsConfigurationRequestMarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.DeleteBucketAnalyticsConfigurationResponseUnmarshaller : S3ReponseUnmarshaller {
    private static DeleteBucketAnalyticsConfigurationResponseUnmarshaller _instance;
    public static DeleteBucketAnalyticsConfigurationResponseUnmarshaller Instance { get; }
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    public static DeleteBucketAnalyticsConfigurationResponseUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.DeleteBucketEncryptionRequestMarshaller : object {
    private static DeleteBucketEncryptionRequestMarshaller _instance;
    public static DeleteBucketEncryptionRequestMarshaller Instance { get; }
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeleteBucketEncryptionRequest deleteBucketEncryptionRequest);
    public static DeleteBucketEncryptionRequestMarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.DeleteBucketEncryptionResponseUnmarshaller : S3ReponseUnmarshaller {
    private static DeleteBucketEncryptionResponseUnmarshaller _instance;
    public static DeleteBucketEncryptionResponseUnmarshaller Instance { get; }
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    public static DeleteBucketEncryptionResponseUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.DeleteBucketIntelligentTieringConfigurationRequestMarshaller : object {
    private static DeleteBucketIntelligentTieringConfigurationRequestMarshaller _instance;
    public static DeleteBucketIntelligentTieringConfigurationRequestMarshaller Instance { get; }
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeleteBucketIntelligentTieringConfigurationRequest deleteBucketIntelligentTieringConfigurationRequest);
    public static DeleteBucketIntelligentTieringConfigurationRequestMarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.DeleteBucketIntelligentTieringConfigurationResponseUnmarshaller : S3ReponseUnmarshaller {
    private static DeleteBucketIntelligentTieringConfigurationResponseUnmarshaller _instance;
    public static DeleteBucketIntelligentTieringConfigurationResponseUnmarshaller Instance { get; }
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    public static DeleteBucketIntelligentTieringConfigurationResponseUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.DeleteBucketInventoryConfigurationRequestMarshaller : object {
    private static DeleteBucketInventoryConfigurationRequestMarshaller _instance;
    public static DeleteBucketInventoryConfigurationRequestMarshaller Instance { get; }
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeleteBucketInventoryConfigurationRequest deleteInventoryConfigurationRequest);
    public static DeleteBucketInventoryConfigurationRequestMarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.DeleteBucketInventoryConfigurationResponseUnmarshaller : S3ReponseUnmarshaller {
    private static DeleteBucketInventoryConfigurationResponseUnmarshaller _instance;
    public static DeleteBucketInventoryConfigurationResponseUnmarshaller Instance { get; }
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    public static DeleteBucketInventoryConfigurationResponseUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.DeleteBucketMetricsConfigurationRequestMarshaller : object {
    private static DeleteBucketMetricsConfigurationRequestMarshaller _instance;
    public static DeleteBucketMetricsConfigurationRequestMarshaller Instance { get; }
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeleteBucketMetricsConfigurationRequest deleteBucketMetricsConfigurationRequest);
    public static DeleteBucketMetricsConfigurationRequestMarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.DeleteBucketMetricsConfigurationResponseUnmarshaller : S3ReponseUnmarshaller {
    private static DeleteBucketMetricsConfigurationResponseUnmarshaller _instance;
    public static DeleteBucketMetricsConfigurationResponseUnmarshaller Instance { get; }
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    public static DeleteBucketMetricsConfigurationResponseUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.DeleteBucketOwnershipControlsRequestMarshaller : object {
    private static DeleteBucketOwnershipControlsRequestMarshaller _instance;
    public static DeleteBucketOwnershipControlsRequestMarshaller Instance { get; }
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeleteBucketOwnershipControlsRequest deleteBucketOwnershipControlsRequest);
    public static DeleteBucketOwnershipControlsRequestMarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.DeleteBucketOwnershipControlsResponseUnmarshaller : S3ReponseUnmarshaller {
    private static DeleteBucketOwnershipControlsResponseUnmarshaller _instance;
    public static DeleteBucketOwnershipControlsResponseUnmarshaller Instance { get; }
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    public static DeleteBucketOwnershipControlsResponseUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.DeleteBucketPolicyRequestMarshaller : object {
    private static DeleteBucketPolicyRequestMarshaller _instance;
    public static DeleteBucketPolicyRequestMarshaller Instance { get; }
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeleteBucketPolicyRequest deleteBucketPolicyRequest);
    public static DeleteBucketPolicyRequestMarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.DeleteBucketPolicyResponseUnmarshaller : S3ReponseUnmarshaller {
    private static DeleteBucketPolicyResponseUnmarshaller _instance;
    public static DeleteBucketPolicyResponseUnmarshaller Instance { get; }
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    public static DeleteBucketPolicyResponseUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.DeleteBucketReplicationRequestMarshaller : object {
    private static DeleteBucketReplicationRequestMarshaller _instance;
    public static DeleteBucketReplicationRequestMarshaller Instance { get; }
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeleteBucketReplicationRequest deleteBucketReplicationRequest);
    public static DeleteBucketReplicationRequestMarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.DeleteBucketReplicationResponseUnmarshaller : S3ReponseUnmarshaller {
    private static DeleteBucketReplicationResponseUnmarshaller _instance;
    public static DeleteBucketReplicationResponseUnmarshaller Instance { get; }
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    public static DeleteBucketReplicationResponseUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.DeleteBucketRequestMarshaller : object {
    private static DeleteBucketRequestMarshaller _instance;
    public static DeleteBucketRequestMarshaller Instance { get; }
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeleteBucketRequest deleteBucketRequest);
    public static DeleteBucketRequestMarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.DeleteBucketResponseUnmarshaller : S3ReponseUnmarshaller {
    private static DeleteBucketResponseUnmarshaller _instance;
    public static DeleteBucketResponseUnmarshaller Instance { get; }
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    public static DeleteBucketResponseUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.DeleteBucketTaggingRequestMarshaller : object {
    private static DeleteBucketTaggingRequestMarshaller _instance;
    public static DeleteBucketTaggingRequestMarshaller Instance { get; }
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeleteBucketTaggingRequest deleteBucketTaggingRequest);
    public static DeleteBucketTaggingRequestMarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.DeleteBucketTaggingResponseUnmarshaller : S3ReponseUnmarshaller {
    private static DeleteBucketTaggingResponseUnmarshaller _instance;
    public static DeleteBucketTaggingResponseUnmarshaller Instance { get; }
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    public static DeleteBucketTaggingResponseUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.DeleteBucketWebsiteRequestMarshaller : object {
    private static DeleteBucketWebsiteRequestMarshaller _instance;
    public static DeleteBucketWebsiteRequestMarshaller Instance { get; }
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeleteBucketWebsiteRequest deleteBucketWebsiteRequest);
    public static DeleteBucketWebsiteRequestMarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.DeleteBucketWebsiteResponseUnmarshaller : S3ReponseUnmarshaller {
    private static DeleteBucketWebsiteResponseUnmarshaller _instance;
    public static DeleteBucketWebsiteResponseUnmarshaller Instance { get; }
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    public static DeleteBucketWebsiteResponseUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.DeleteCORSConfigurationRequestMarshaller : object {
    private static DeleteCORSConfigurationRequestMarshaller _instance;
    public static DeleteCORSConfigurationRequestMarshaller Instance { get; }
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeleteCORSConfigurationRequest deleteCORSConfigurationRequest);
    public static DeleteCORSConfigurationRequestMarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.DeleteCORSConfigurationResponseUnmarshaller : S3ReponseUnmarshaller {
    private static DeleteCORSConfigurationResponseUnmarshaller _instance;
    public static DeleteCORSConfigurationResponseUnmarshaller Instance { get; }
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    public static DeleteCORSConfigurationResponseUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.DeletedObjectUnmarshaller : object {
    private static DeletedObjectUnmarshaller _instance;
    public static DeletedObjectUnmarshaller Instance { get; }
    public sealed virtual DeletedObject Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual DeletedObject Unmarshall(JsonUnmarshallerContext context);
    public static DeletedObjectUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.DeleteLifecycleConfigurationRequestMarshaller : object {
    private static DeleteLifecycleConfigurationRequestMarshaller _instance;
    public static DeleteLifecycleConfigurationRequestMarshaller Instance { get; }
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeleteLifecycleConfigurationRequest deleteLifecycleConfigurationRequest);
    public static DeleteLifecycleConfigurationRequestMarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.DeleteLifecycleConfigurationResponseUnmarshaller : S3ReponseUnmarshaller {
    private static DeleteLifecycleConfigurationResponseUnmarshaller _instance;
    public static DeleteLifecycleConfigurationResponseUnmarshaller Instance { get; }
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    public static DeleteLifecycleConfigurationResponseUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.DeleteMarkerReplicationUnmarshaller : object {
    private static DeleteMarkerReplicationUnmarshaller _instance;
    public static DeleteMarkerReplicationUnmarshaller Instance { get; }
    public sealed virtual DeleteMarkerReplication Unmarshall(XmlUnmarshallerContext context);
    public static DeleteMarkerReplicationUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.DeleteObjectRequestMarshaller : object {
    private static DeleteObjectRequestMarshaller _instance;
    public static DeleteObjectRequestMarshaller Instance { get; }
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeleteObjectRequest deleteObjectRequest);
    public static DeleteObjectRequestMarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.DeleteObjectResponseUnmarshaller : S3ReponseUnmarshaller {
    private static DeleteObjectResponseUnmarshaller _instance;
    public static DeleteObjectResponseUnmarshaller Instance { get; }
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DeleteObjectResponse response);
    public static DeleteObjectResponseUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.DeleteObjectsRequestMarshaller : object {
    private static DeleteObjectsRequestMarshaller _instance;
    public static DeleteObjectsRequestMarshaller Instance { get; }
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeleteObjectsRequest deleteObjectsRequest);
    public static DeleteObjectsRequestMarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.DeleteObjectsResponseUnmarshaller : S3ReponseUnmarshaller {
    private static DeleteObjectsResponseUnmarshaller _instance;
    public static DeleteObjectsResponseUnmarshaller Instance { get; }
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DeleteObjectsResponse response);
    public static DeleteObjectsResponseUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.DeleteObjectTaggingRequestMarshaller : object {
    private static DeleteObjectTaggingRequestMarshaller _instance;
    public static DeleteObjectTaggingRequestMarshaller Instance { get; }
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeleteObjectTaggingRequest deleteObjectTaggingRequest);
    public static DeleteObjectTaggingRequestMarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.DeleteObjectTaggingResponseUnmarshaller : S3ReponseUnmarshaller {
    private static DeleteObjectTaggingResponseUnmarshaller _instance;
    public static DeleteObjectTaggingResponseUnmarshaller Instance { get; }
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DeleteObjectTaggingResponse response);
    public static DeleteObjectTaggingResponseUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.DeletePublicAccessBlockRequestMarshaller : object {
    private static DeletePublicAccessBlockRequestMarshaller _instance;
    public static DeletePublicAccessBlockRequestMarshaller Instance { get; }
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeletePublicAccessBlockRequest deletePublicAccessBlockRequest);
    public static DeletePublicAccessBlockRequestMarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.DeletePublicAccessBlockResponseUnmarshaller : S3ReponseUnmarshaller {
    private static DeletePublicAccessBlockResponseUnmarshaller _instance;
    public static DeletePublicAccessBlockResponseUnmarshaller Instance { get; }
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    public static DeletePublicAccessBlockResponseUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.EncryptionConfigurationUnmarshaller : object {
    private static EncryptionConfigurationUnmarshaller _instance;
    public static EncryptionConfigurationUnmarshaller Instance { get; }
    public sealed virtual EncryptionConfiguration Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual EncryptionConfiguration Unmarshall(JsonUnmarshallerContext context);
    public static EncryptionConfigurationUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.ErrorsItemUnmarshaller : object {
    private static ErrorsItemUnmarshaller _instance;
    public static ErrorsItemUnmarshaller Instance { get; }
    public sealed virtual DeleteError Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual DeleteError Unmarshall(JsonUnmarshallerContext context);
    public static ErrorsItemUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.EventBridgeConfigurationUnmarshaller : object {
    private static EventBridgeConfigurationUnmarshaller _instance;
    public static EventBridgeConfigurationUnmarshaller Instance { get; }
    private static EventBridgeConfigurationUnmarshaller();
    public sealed virtual EventBridgeConfiguration Unmarshall(XmlUnmarshallerContext context);
    public static EventBridgeConfigurationUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.ExistingObjectReplicationUnmarshaller : object {
    private static ExistingObjectReplicationUnmarshaller _instance;
    public static ExistingObjectReplicationUnmarshaller Instance { get; }
    public sealed virtual ExistingObjectReplication Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ExistingObjectReplication Unmarshall(JsonUnmarshallerContext context);
    public static ExistingObjectReplicationUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.ExpirationUnmarshaller : object {
    private static ExpirationUnmarshaller _instance;
    public static ExpirationUnmarshaller Instance { get; }
    public sealed virtual LifecycleRuleExpiration Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual LifecycleRuleExpiration Unmarshall(JsonUnmarshallerContext context);
    public static ExpirationUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.FilterRuleUnmarshaller : object {
    private static FilterRuleUnmarshaller _instance;
    public static FilterRuleUnmarshaller Instance { get; }
    public sealed virtual FilterRule Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual FilterRule Unmarshall(JsonUnmarshallerContext context);
    public static FilterRuleUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.FilterUnmarshaller : object {
    private static FilterUnmarshaller _instance;
    public static FilterUnmarshaller Instance { get; }
    public sealed virtual Filter Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual Filter Unmarshall(JsonUnmarshallerContext context);
    public static FilterUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.GetACLRequestMarshaller : object {
    private static GetACLRequestMarshaller _instance;
    public static GetACLRequestMarshaller Instance { get; }
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(GetACLRequest getObjectAclRequest);
    public static GetACLRequestMarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.GetACLResponseUnmarshaller : S3ReponseUnmarshaller {
    private static GetACLResponseUnmarshaller _instance;
    public static GetACLResponseUnmarshaller Instance { get; }
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, GetACLResponse response);
    public static GetACLResponseUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.GetBucketAccelerateConfigurationRequestMarshaller : object {
    private static GetBucketAccelerateConfigurationRequestMarshaller _instance;
    public static GetBucketAccelerateConfigurationRequestMarshaller Instance { get; }
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(GetBucketAccelerateConfigurationRequest getBucketAccelerateRequest);
    public static GetBucketAccelerateConfigurationRequestMarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.GetBucketAccelerateConfigurationResponseUnmarshaller : S3ReponseUnmarshaller {
    private static GetBucketAccelerateConfigurationResponseUnmarshaller _instance;
    public static GetBucketAccelerateConfigurationResponseUnmarshaller Instance { get; }
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, GetBucketAccelerateConfigurationResponse response);
    public static GetBucketAccelerateConfigurationResponseUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.GetBucketAnalyticsConfigurationRequestMarshaller : object {
    private static GetBucketAnalyticsConfigurationRequestMarshaller _instance;
    public static GetBucketAnalyticsConfigurationRequestMarshaller Instance { get; }
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(GetBucketAnalyticsConfigurationRequest getAnalyticsConfigurationRequest);
    public static GetBucketAnalyticsConfigurationRequestMarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.GetBucketAnalyticsConfigurationResponseUnmarshaller : S3ReponseUnmarshaller {
    private static GetBucketAnalyticsConfigurationResponseUnmarshaller _instance;
    public static GetBucketAnalyticsConfigurationResponseUnmarshaller Instance { get; }
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, GetBucketAnalyticsConfigurationResponse response);
    public static GetBucketAnalyticsConfigurationResponseUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.GetBucketEncryptionRequestMarshaller : object {
    private static GetBucketEncryptionRequestMarshaller _instance;
    public static GetBucketEncryptionRequestMarshaller Instance { get; }
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(GetBucketEncryptionRequest getEncryptionRequest);
    public static GetBucketEncryptionRequestMarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.GetBucketEncryptionResponseUnmarshaller : S3ReponseUnmarshaller {
    private static GetBucketEncryptionResponseUnmarshaller _instance;
    public static GetBucketEncryptionResponseUnmarshaller Instance { get; }
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, GetBucketEncryptionResponse response);
    public static GetBucketEncryptionResponseUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.GetBucketIntelligentTieringConfigurationRequestMarshaller : object {
    private static GetBucketIntelligentTieringConfigurationRequestMarshaller _instance;
    public static GetBucketIntelligentTieringConfigurationRequestMarshaller Instance { get; }
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(GetBucketIntelligentTieringConfigurationRequest getBucketIntelligentTieringConfigurationRequest);
    public static GetBucketIntelligentTieringConfigurationRequestMarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.GetBucketIntelligentTieringConfigurationResponseUnmarshaller : S3ReponseUnmarshaller {
    private static GetBucketIntelligentTieringConfigurationResponseUnmarshaller _instance;
    public static GetBucketIntelligentTieringConfigurationResponseUnmarshaller Instance { get; }
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, GetBucketIntelligentTieringConfigurationResponse response);
    public static GetBucketIntelligentTieringConfigurationResponseUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.GetBucketInventoryConfigurationRequestMarshaller : object {
    private static GetBucketInventoryConfigurationRequestMarshaller _instance;
    public static GetBucketInventoryConfigurationRequestMarshaller Instance { get; }
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(GetBucketInventoryConfigurationRequest getInventoryConfigurationRequest);
    public static GetBucketInventoryConfigurationRequestMarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.GetBucketInventoryConfigurationResponseUnmarshaller : S3ReponseUnmarshaller {
    private static GetBucketInventoryConfigurationResponseUnmarshaller _instance;
    public static GetBucketInventoryConfigurationResponseUnmarshaller Instance { get; }
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, GetBucketInventoryConfigurationResponse response);
    public static GetBucketInventoryConfigurationResponseUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.GetBucketLocationRequestMarshaller : object {
    private static GetBucketLocationRequestMarshaller _instance;
    public static GetBucketLocationRequestMarshaller Instance { get; }
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(GetBucketLocationRequest getBucketLocationRequest);
    public static GetBucketLocationRequestMarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.GetBucketLocationResponseUnmarshaller : S3ReponseUnmarshaller {
    private static GetBucketLocationResponseUnmarshaller _instance;
    public static GetBucketLocationResponseUnmarshaller Instance { get; }
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, GetBucketLocationResponse response);
    public static GetBucketLocationResponseUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.GetBucketLoggingRequestMarshaller : object {
    private static GetBucketLoggingRequestMarshaller _instance;
    public static GetBucketLoggingRequestMarshaller Instance { get; }
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(GetBucketLoggingRequest getBucketLoggingRequest);
    public static GetBucketLoggingRequestMarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.GetBucketLoggingResponseUnmarshaller : S3ReponseUnmarshaller {
    private static GetBucketLoggingResponseUnmarshaller _instance;
    public static GetBucketLoggingResponseUnmarshaller Instance { get; }
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, GetBucketLoggingResponse response);
    public static GetBucketLoggingResponseUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.GetBucketMetricsConfigurationRequestMarshaller : object {
    private static GetBucketMetricsConfigurationRequestMarshaller _instance;
    public static GetBucketMetricsConfigurationRequestMarshaller Instance { get; }
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(GetBucketMetricsConfigurationRequest getBucketMetricsConfigurationRequest);
    public static GetBucketMetricsConfigurationRequestMarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.GetBucketMetricsConfigurationResponseUnmarshaller : S3ReponseUnmarshaller {
    private static GetBucketMetricsConfigurationResponseUnmarshaller _instance;
    public static GetBucketMetricsConfigurationResponseUnmarshaller Instance { get; }
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, GetBucketMetricsConfigurationResponse response);
    public static GetBucketMetricsConfigurationResponseUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.GetBucketNotificationRequestMarshaller : object {
    private static GetBucketNotificationRequestMarshaller _instance;
    public static GetBucketNotificationRequestMarshaller Instance { get; }
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(GetBucketNotificationRequest getBucketNotificationRequest);
    public static GetBucketNotificationRequestMarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.GetBucketNotificationResponseUnmarshaller : S3ReponseUnmarshaller {
    private static GetBucketNotificationResponseUnmarshaller _instance;
    public static GetBucketNotificationResponseUnmarshaller Instance { get; }
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, GetBucketNotificationResponse response);
    public static GetBucketNotificationResponseUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.GetBucketOwnershipControlsRequestMarshaller : object {
    private static GetBucketOwnershipControlsRequestMarshaller _instance;
    public static GetBucketOwnershipControlsRequestMarshaller Instance { get; }
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(GetBucketOwnershipControlsRequest getBucketOwnershipControlsRequest);
    public static GetBucketOwnershipControlsRequestMarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.GetBucketOwnershipControlsResponseUnmarshaller : S3ReponseUnmarshaller {
    private static GetBucketOwnershipControlsResponseUnmarshaller _instance;
    public static GetBucketOwnershipControlsResponseUnmarshaller Instance { get; }
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, GetBucketOwnershipControlsResponse response);
    public static GetBucketOwnershipControlsResponseUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.GetBucketPolicyRequestMarshaller : object {
    private static GetBucketPolicyRequestMarshaller _instance;
    public static GetBucketPolicyRequestMarshaller Instance { get; }
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(GetBucketPolicyRequest getBucketPolicyRequest);
    public static GetBucketPolicyRequestMarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.GetBucketPolicyResponseUnmarshaller : S3ReponseUnmarshaller {
    private static GetBucketPolicyResponseUnmarshaller _instance;
    public static GetBucketPolicyResponseUnmarshaller Instance { get; }
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, GetBucketPolicyResponse response);
    public static GetBucketPolicyResponseUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.GetBucketPolicyStatusRequestMarshaller : object {
    private static GetBucketPolicyStatusRequestMarshaller _instance;
    public static GetBucketPolicyStatusRequestMarshaller Instance { get; }
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(GetBucketPolicyStatusRequest getBucketPolicyStatusRequest);
    public static GetBucketPolicyStatusRequestMarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.GetBucketPolicyStatusResponseUnmarshaller : S3ReponseUnmarshaller {
    private static GetBucketPolicyStatusResponseUnmarshaller _instance;
    public static GetBucketPolicyStatusResponseUnmarshaller Instance { get; }
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, GetBucketPolicyStatusResponse response);
    public static GetBucketPolicyStatusResponseUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.GetBucketReplicationRequestMarshaller : object {
    private static GetBucketReplicationRequestMarshaller _instance;
    public static GetBucketReplicationRequestMarshaller Instance { get; }
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(GetBucketReplicationRequest getBucketReplicationConfigurationRequest);
    public static GetBucketReplicationRequestMarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.GetBucketReplicationResponseUnmarshaller : S3ReponseUnmarshaller {
    private static GetBucketReplicationResponseUnmarshaller _instance;
    public static GetBucketReplicationResponseUnmarshaller Instance { get; }
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, GetBucketReplicationResponse response);
    public static GetBucketReplicationResponseUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.GetBucketRequestPaymentRequestMarshaller : object {
    private static GetBucketRequestPaymentRequestMarshaller _instance;
    public static GetBucketRequestPaymentRequestMarshaller Instance { get; }
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(GetBucketRequestPaymentRequest getBucketRequestPaymentRequest);
    public static GetBucketRequestPaymentRequestMarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.GetBucketRequestPaymentResponseUnmarshaller : S3ReponseUnmarshaller {
    private static GetBucketRequestPaymentResponseUnmarshaller _instance;
    public static GetBucketRequestPaymentResponseUnmarshaller Instance { get; }
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, GetBucketRequestPaymentResponse response);
    public static GetBucketRequestPaymentResponseUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.GetBucketTaggingRequestMarshaller : object {
    private static GetBucketTaggingRequestMarshaller _instance;
    public static GetBucketTaggingRequestMarshaller Instance { get; }
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(GetBucketTaggingRequest getBucketTaggingRequest);
    public static GetBucketTaggingRequestMarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.GetBucketTaggingResponseUnmarshaller : S3ReponseUnmarshaller {
    private static GetBucketTaggingResponseUnmarshaller _instance;
    public static GetBucketTaggingResponseUnmarshaller Instance { get; }
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, GetBucketTaggingResponse response);
    public static GetBucketTaggingResponseUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.GetBucketVersioningRequestMarshaller : object {
    private static GetBucketVersioningRequestMarshaller _instance;
    public static GetBucketVersioningRequestMarshaller Instance { get; }
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(GetBucketVersioningRequest getBucketVersioningRequest);
    public static GetBucketVersioningRequestMarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.GetBucketVersioningResponseUnmarshaller : S3ReponseUnmarshaller {
    private static GetBucketVersioningResponseUnmarshaller _instance;
    public static GetBucketVersioningResponseUnmarshaller Instance { get; }
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, GetBucketVersioningResponse response);
    public static GetBucketVersioningResponseUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.GetBucketWebsiteRequestMarshaller : object {
    private static GetBucketWebsiteRequestMarshaller _instance;
    public static GetBucketWebsiteRequestMarshaller Instance { get; }
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(GetBucketWebsiteRequest getBucketWebsiteRequest);
    public static GetBucketWebsiteRequestMarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.GetBucketWebsiteResponseUnmarshaller : S3ReponseUnmarshaller {
    private static GetBucketWebsiteResponseUnmarshaller _instance;
    public static GetBucketWebsiteResponseUnmarshaller Instance { get; }
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, GetBucketWebsiteResponse response);
    public static GetBucketWebsiteResponseUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.GetCORSConfigurationRequestMarshaller : object {
    private static GetCORSConfigurationRequestMarshaller _instance;
    public static GetCORSConfigurationRequestMarshaller Instance { get; }
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(GetCORSConfigurationRequest getCORSConfigurationRequest);
    public static GetCORSConfigurationRequestMarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.GetCORSConfigurationResponseUnmarshaller : S3ReponseUnmarshaller {
    private static GetCORSConfigurationResponseUnmarshaller _instance;
    public static GetCORSConfigurationResponseUnmarshaller Instance { get; }
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, GetCORSConfigurationResponse response);
    public static GetCORSConfigurationResponseUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.GetLifecycleConfigurationRequestMarshaller : object {
    private static GetLifecycleConfigurationRequestMarshaller _instance;
    public static GetLifecycleConfigurationRequestMarshaller Instance { get; }
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(GetLifecycleConfigurationRequest getLifecycleConfiguration);
    public static GetLifecycleConfigurationRequestMarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.GetLifecycleConfigurationResponseUnmarshaller : S3ReponseUnmarshaller {
    private static GetLifecycleConfigurationResponseUnmarshaller _instance;
    public static GetLifecycleConfigurationResponseUnmarshaller Instance { get; }
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, GetLifecycleConfigurationResponse response);
    public static GetLifecycleConfigurationResponseUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.GetObjectAttributesPartsUnmarshaller : object {
    private static GetObjectAttributesPartsUnmarshaller _instance;
    public static GetObjectAttributesPartsUnmarshaller Instance { get; }
    private static GetObjectAttributesPartsUnmarshaller();
    public sealed virtual GetObjectAttributesParts Unmarshall(XmlUnmarshallerContext context);
    public static GetObjectAttributesPartsUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.GetObjectAttributesRequestMarshaller : object {
    private static GetObjectAttributesRequestMarshaller _instance;
    public static GetObjectAttributesRequestMarshaller Instance { get; }
    private static GetObjectAttributesRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(GetObjectAttributesRequest publicRequest);
    internal static GetObjectAttributesRequestMarshaller GetInstance();
    public static GetObjectAttributesRequestMarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.GetObjectAttributesResponseUnmarshaller : S3ReponseUnmarshaller {
    private static GetObjectAttributesResponseUnmarshaller _instance;
    public static GetObjectAttributesResponseUnmarshaller Instance { get; }
    private static GetObjectAttributesResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, GetObjectAttributesResponse response);
    public static GetObjectAttributesResponseUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.GetObjectLegalHoldRequestMarshaller : object {
    private static GetObjectLegalHoldRequestMarshaller _instance;
    public static GetObjectLegalHoldRequestMarshaller Instance { get; }
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(GetObjectLegalHoldRequest publicRequest);
    public static GetObjectLegalHoldRequestMarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.GetObjectLegalHoldResponseUnmarshaller : S3ReponseUnmarshaller {
    private static GetObjectLegalHoldResponseUnmarshaller _instance;
    public static GetObjectLegalHoldResponseUnmarshaller Instance { get; }
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, GetObjectLegalHoldResponse response);
    public static GetObjectLegalHoldResponseUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.GetObjectLockConfigurationRequestMarshaller : object {
    private static GetObjectLockConfigurationRequestMarshaller _instance;
    public static GetObjectLockConfigurationRequestMarshaller Instance { get; }
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(GetObjectLockConfigurationRequest publicRequest);
    public static GetObjectLockConfigurationRequestMarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.GetObjectLockConfigurationResponseUnmarshaller : S3ReponseUnmarshaller {
    private static GetObjectLockConfigurationResponseUnmarshaller _instance;
    public static GetObjectLockConfigurationResponseUnmarshaller Instance { get; }
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, GetObjectLockConfigurationResponse response);
    public static GetObjectLockConfigurationResponseUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.GetObjectMetadataRequestMarshaller : object {
    private static GetObjectMetadataRequestMarshaller _instance;
    public static GetObjectMetadataRequestMarshaller Instance { get; }
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(GetObjectMetadataRequest headObjectRequest);
    public static GetObjectMetadataRequestMarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.GetObjectMetadataResponseUnmarshaller : S3ReponseUnmarshaller {
    private static GetObjectMetadataResponseUnmarshaller _instance;
    public static GetObjectMetadataResponseUnmarshaller Instance { get; }
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, GetObjectMetadataResponse response);
    public static GetObjectMetadataResponseUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.GetObjectRequestMarshaller : object {
    private static GetObjectRequestMarshaller _instance;
    public static GetObjectRequestMarshaller Instance { get; }
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(GetObjectRequest getObjectRequest);
    public static GetObjectRequestMarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.GetObjectResponseUnmarshaller : S3ReponseUnmarshaller {
    private static GetObjectResponseUnmarshaller _instance;
    public bool HasStreamingProperty { get; }
    public static GetObjectResponseUnmarshaller Instance { get; }
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, GetObjectResponse response);
    public virtual bool get_HasStreamingProperty();
    public static GetObjectResponseUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.GetObjectRetentionRequestMarshaller : object {
    private static GetObjectRetentionRequestMarshaller _instance;
    public static GetObjectRetentionRequestMarshaller Instance { get; }
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(GetObjectRetentionRequest publicRequest);
    public static GetObjectRetentionRequestMarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.GetObjectRetentionResponseUnmarshaller : S3ReponseUnmarshaller {
    private static GetObjectRetentionResponseUnmarshaller _instance;
    public static GetObjectRetentionResponseUnmarshaller Instance { get; }
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, GetObjectRetentionResponse response);
    public static GetObjectRetentionResponseUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.GetObjectTaggingRequestMarshaller : object {
    private static GetObjectTaggingRequestMarshaller _instance;
    public static GetObjectTaggingRequestMarshaller Instance { get; }
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(GetObjectTaggingRequest getObjectTaggingRequest);
    public static GetObjectTaggingRequestMarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.GetObjectTaggingResponseUnmarshaller : S3ReponseUnmarshaller {
    private static GetObjectTaggingResponseUnmarshaller _instance;
    public static GetObjectTaggingResponseUnmarshaller Instance { get; }
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, GetObjectTaggingResponse response);
    public static GetObjectTaggingResponseUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.GetObjectTorrentRequestMarshaller : object {
    private static GetObjectTorrentRequestMarshaller _instance;
    public static GetObjectTorrentRequestMarshaller Instance { get; }
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(GetObjectTorrentRequest getObjectTorrentRequest);
    public static GetObjectTorrentRequestMarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.GetObjectTorrentResponseUnmarshaller : S3ReponseUnmarshaller {
    private static GetObjectTorrentResponseUnmarshaller _instance;
    public bool HasStreamingProperty { get; }
    public static GetObjectTorrentResponseUnmarshaller Instance { get; }
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, GetObjectTorrentResponse response);
    public virtual bool get_HasStreamingProperty();
    public static GetObjectTorrentResponseUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.GetPublicAccessBlockRequestMarshaller : object {
    private static GetPublicAccessBlockRequestMarshaller _instance;
    public static GetPublicAccessBlockRequestMarshaller Instance { get; }
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(GetPublicAccessBlockRequest getPublicAccessBlockRequest);
    public static GetPublicAccessBlockRequestMarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.GetPublicAccessBlockResponseUnmarshaller : S3ReponseUnmarshaller {
    private static GetPublicAccessBlockResponseUnmarshaller _instance;
    public static GetPublicAccessBlockResponseUnmarshaller Instance { get; }
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, GetPublicAccessBlockResponse response);
    public static GetPublicAccessBlockResponseUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.GranteeUnmarshaller : object {
    private static GranteeUnmarshaller _instance;
    public static GranteeUnmarshaller Instance { get; }
    public sealed virtual S3Grantee Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual S3Grantee Unmarshall(JsonUnmarshallerContext context);
    public static GranteeUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.GrantUnmarshaller : object {
    private static GrantUnmarshaller _instance;
    public static GrantUnmarshaller Instance { get; }
    public sealed virtual S3Grant Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual S3Grant Unmarshall(JsonUnmarshallerContext context);
    public static GrantUnmarshaller get_Instance();
}
internal class Amazon.S3.Model.Internal.MarshallTransformations.HeadBucketRequestMarshaller : object {
    private static HeadBucketRequestMarshaller _instance;
    public static HeadBucketRequestMarshaller Instance { get; }
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(HeadBucketRequest headBucketRequest);
    public static HeadBucketRequestMarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.HeadBucketResponseUnmarshaller : S3ReponseUnmarshaller {
    private static HeadBucketResponseUnmarshaller _instance;
    public static HeadBucketResponseUnmarshaller Instance { get; }
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, HeadBucketResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    public static HeadBucketResponseUnmarshaller get_Instance();
}
public static class Amazon.S3.Model.Internal.MarshallTransformations.HeaderACLRequestMarshaller : object {
    public static void Marshall(IRequest request, PutWithACLRequest aclRequest);
}
public class Amazon.S3.Model.Internal.MarshallTransformations.InitiateMultipartUploadRequestMarshaller : object {
    private static InitiateMultipartUploadRequestMarshaller _instance;
    public static InitiateMultipartUploadRequestMarshaller Instance { get; }
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(InitiateMultipartUploadRequest initiateMultipartUploadRequest);
    public static InitiateMultipartUploadRequestMarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.InitiateMultipartUploadResponseUnmarshaller : S3ReponseUnmarshaller {
    private static InitiateMultipartUploadResponseUnmarshaller _instance;
    public static InitiateMultipartUploadResponseUnmarshaller Instance { get; }
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, InitiateMultipartUploadResponse response);
    public static InitiateMultipartUploadResponseUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.InitiatorUnmarshaller : object {
    private static InitiatorUnmarshaller _instance;
    public static InitiatorUnmarshaller Instance { get; }
    public sealed virtual Initiator Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual Initiator Unmarshall(JsonUnmarshallerContext context);
    public static InitiatorUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.IntelligentTieringConfigurationUnmarshaller : object {
    private static IntelligentTieringConfigurationUnmarshaller _instance;
    public static IntelligentTieringConfigurationUnmarshaller Instance { get; }
    public sealed virtual IntelligentTieringConfiguration Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual IntelligentTieringConfiguration Unmarshall(JsonUnmarshallerContext context);
    public static IntelligentTieringConfigurationUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.IntelligentTieringPredicateListFilterUnmarshaller : object {
    private static IntelligentTieringPredicateListFilterUnmarshaller _instance;
    public static IntelligentTieringPredicateListFilterUnmarshaller Instance { get; }
    public sealed virtual List`1<IntelligentTieringFilterPredicate> Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual List`1<IntelligentTieringFilterPredicate> Unmarshall(JsonUnmarshallerContext context);
    public static IntelligentTieringPredicateListFilterUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.InventoryConfigurationUnmarshaller : object {
    private static InventoryConfigurationUnmarshaller _instance;
    public static InventoryConfigurationUnmarshaller Instance { get; }
    public sealed virtual InventoryConfiguration Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual InventoryConfiguration Unmarshall(JsonUnmarshallerContext context);
    public static InventoryConfigurationUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.InventoryDestinationUnmarshaller : object {
    private static InventoryDestinationUnmarshaller _instance;
    public static InventoryDestinationUnmarshaller Instance { get; }
    public sealed virtual InventoryDestination Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual InventoryDestination Unmarshall(JsonUnmarshallerContext context);
    public static InventoryDestinationUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.InventoryEncryptionUnmarshaller : object {
    private static InventoryEncryptionUnmarshaller _instance;
    public static InventoryEncryptionUnmarshaller Instance { get; }
    public sealed virtual InventoryEncryption Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual InventoryEncryption Unmarshall(JsonUnmarshallerContext context);
    public static InventoryEncryptionUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.InventoryFilterUnmarshaller : object {
    private static InventoryFilterUnmarshaller _instance;
    public static InventoryFilterUnmarshaller Instance { get; }
    public sealed virtual InventoryFilter Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual InventoryFilter Unmarshall(JsonUnmarshallerContext context);
    public static InventoryFilterUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.InventoryS3BucketDestinationUnmarshaller : object {
    private static InventoryS3BucketDestinationUnmarshaller _instance;
    public static InventoryS3BucketDestinationUnmarshaller Instance { get; }
    public sealed virtual InventoryS3BucketDestination Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual InventoryS3BucketDestination Unmarshall(JsonUnmarshallerContext context);
    public static InventoryS3BucketDestinationUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.InventoryScheduleUnmarshaller : object {
    private static InventoryScheduleUnmarshaller _instance;
    public static InventoryScheduleUnmarshaller Instance { get; }
    public sealed virtual InventorySchedule Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual InventorySchedule Unmarshall(JsonUnmarshallerContext context);
    public static InventoryScheduleUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.LambdaFunctionConfigurationUnmarshaller : object {
    private static LambdaFunctionConfigurationUnmarshaller _instance;
    public static LambdaFunctionConfigurationUnmarshaller Instance { get; }
    public sealed virtual LambdaFunctionConfiguration Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual LambdaFunctionConfiguration Unmarshall(JsonUnmarshallerContext context);
    public static LambdaFunctionConfigurationUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.LifecycleFilterPredicateListUnmarshaller : object {
    private static LifecycleFilterPredicateListUnmarshaller _instance;
    public static LifecycleFilterPredicateListUnmarshaller Instance { get; }
    public sealed virtual List`1<LifecycleFilterPredicate> Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual List`1<LifecycleFilterPredicate> Unmarshall(JsonUnmarshallerContext context);
    public static LifecycleFilterPredicateListUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.LifecycleRuleNoncurrentVersionExpirationUnmarshaller : object {
    private static LifecycleRuleNoncurrentVersionExpirationUnmarshaller _instance;
    public static LifecycleRuleNoncurrentVersionExpirationUnmarshaller Instance { get; }
    public sealed virtual LifecycleRuleNoncurrentVersionExpiration Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual LifecycleRuleNoncurrentVersionExpiration Unmarshall(JsonUnmarshallerContext context);
    public static LifecycleRuleNoncurrentVersionExpirationUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.LifecycleRuleNoncurrentVersionTransitionUnmarshaller : object {
    private static LifecycleRuleNoncurrentVersionTransitionUnmarshaller _instance;
    public static LifecycleRuleNoncurrentVersionTransitionUnmarshaller Instance { get; }
    public sealed virtual LifecycleRuleNoncurrentVersionTransition Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual LifecycleRuleNoncurrentVersionTransition Unmarshall(JsonUnmarshallerContext context);
    public static LifecycleRuleNoncurrentVersionTransitionUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.ListBucketAnalyticsConfigurationsRequestMarshaller : object {
    private static ListBucketAnalyticsConfigurationsRequestMarshaller _instance;
    public static ListBucketAnalyticsConfigurationsRequestMarshaller Instance { get; }
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListBucketAnalyticsConfigurationsRequest listBucketAnalyticsConfigurationsRequest);
    public static ListBucketAnalyticsConfigurationsRequestMarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.ListBucketAnalyticsConfigurationsResponseUnmarshaller : S3ReponseUnmarshaller {
    private static ListBucketAnalyticsConfigurationsResponseUnmarshaller _instance;
    public static ListBucketAnalyticsConfigurationsResponseUnmarshaller Instance { get; }
    private static ListBucketAnalyticsConfigurationsResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, ListBucketAnalyticsConfigurationsResponse response);
    public static ListBucketAnalyticsConfigurationsResponseUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.ListBucketIntelligentTieringConfigurationsRequestMarshaller : object {
    private static ListBucketIntelligentTieringConfigurationsRequestMarshaller _instance;
    public static ListBucketIntelligentTieringConfigurationsRequestMarshaller Instance { get; }
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListBucketIntelligentTieringConfigurationsRequest listBucketIntelligentTieringConfigurationsRequest);
    public static ListBucketIntelligentTieringConfigurationsRequestMarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.ListBucketIntelligentTieringConfigurationsResponseUnmarshaller : S3ReponseUnmarshaller {
    private static ListBucketIntelligentTieringConfigurationsResponseUnmarshaller _instance;
    public static ListBucketIntelligentTieringConfigurationsResponseUnmarshaller Instance { get; }
    private static ListBucketIntelligentTieringConfigurationsResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, ListBucketIntelligentTieringConfigurationsResponse response);
    public static ListBucketIntelligentTieringConfigurationsResponseUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.ListBucketInventoryConfigurationsRequestMarshaller : object {
    private static ListBucketInventoryConfigurationsRequestMarshaller _instance;
    public static ListBucketInventoryConfigurationsRequestMarshaller Instance { get; }
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListBucketInventoryConfigurationsRequest listBucketInventoryConfigurationsRequest);
    public static ListBucketInventoryConfigurationsRequestMarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.ListBucketInventoryConfigurationsResponseUnmarshaller : S3ReponseUnmarshaller {
    private static ListBucketInventoryConfigurationsResponseUnmarshaller _instance;
    public static ListBucketInventoryConfigurationsResponseUnmarshaller Instance { get; }
    private static ListBucketInventoryConfigurationsResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, ListBucketInventoryConfigurationsResponse response);
    public static ListBucketInventoryConfigurationsResponseUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.ListBucketMetricsConfigurationsRequestMarshaller : object {
    private static ListBucketMetricsConfigurationsRequestMarshaller _instance;
    public static ListBucketMetricsConfigurationsRequestMarshaller Instance { get; }
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListBucketMetricsConfigurationsRequest listBucketMetricsConfigurationRequest);
    public static ListBucketMetricsConfigurationsRequestMarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.ListBucketMetricsConfigurationsResponseUnmarshaller : S3ReponseUnmarshaller {
    private static ListBucketMetricsConfigurationsResponseUnmarshaller _instance;
    public static ListBucketMetricsConfigurationsResponseUnmarshaller Instance { get; }
    private static ListBucketMetricsConfigurationsResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, ListBucketMetricsConfigurationsResponse response);
    public static ListBucketMetricsConfigurationsResponseUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.ListBucketsRequestMarshaller : object {
    private static ListBucketsRequestMarshaller _instance;
    public static ListBucketsRequestMarshaller Instance { get; }
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListBucketsRequest listBucketsRequest);
    public static ListBucketsRequestMarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.ListBucketsResponseUnmarshaller : S3ReponseUnmarshaller {
    private static ListBucketsResponseUnmarshaller _instance;
    public static ListBucketsResponseUnmarshaller Instance { get; }
    private static ListBucketsResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, ListBucketsResponse response);
    public static ListBucketsResponseUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.ListDirectoryBucketsRequestMarshaller : object {
    private static ListDirectoryBucketsRequestMarshaller _instance;
    public static ListDirectoryBucketsRequestMarshaller Instance { get; }
    private static ListDirectoryBucketsRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListDirectoryBucketsRequest publicRequest);
    internal static ListDirectoryBucketsRequestMarshaller GetInstance();
    public static ListDirectoryBucketsRequestMarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.ListDirectoryBucketsResponseUnmarshaller : XmlResponseUnmarshaller {
    private static ListDirectoryBucketsResponseUnmarshaller _instance;
    public static ListDirectoryBucketsResponseUnmarshaller Instance { get; }
    private static ListDirectoryBucketsResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, ListDirectoryBucketsResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ListDirectoryBucketsResponseUnmarshaller GetInstance();
    public static ListDirectoryBucketsResponseUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.ListMultipartUploadsRequestMarshaller : object {
    private static ListMultipartUploadsRequestMarshaller _instance;
    public static ListMultipartUploadsRequestMarshaller Instance { get; }
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListMultipartUploadsRequest listMultipartUploadsRequest);
    public static ListMultipartUploadsRequestMarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.ListMultipartUploadsResponseUnmarshaller : S3ReponseUnmarshaller {
    private static ListMultipartUploadsResponseUnmarshaller _instance;
    public static ListMultipartUploadsResponseUnmarshaller Instance { get; }
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, ListMultipartUploadsResponse response);
    public static ListMultipartUploadsResponseUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.ListObjectsRequestMarshaller : object {
    private static ListObjectsRequestMarshaller _instance;
    public static ListObjectsRequestMarshaller Instance { get; }
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListObjectsRequest listObjectsRequest);
    public static ListObjectsRequestMarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.ListObjectsResponseUnmarshaller : S3ReponseUnmarshaller {
    private static ListObjectsResponseUnmarshaller _instance;
    public static ListObjectsResponseUnmarshaller Instance { get; }
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, ListObjectsResponse response);
    public static ListObjectsResponseUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.ListObjectsV2RequestMarshaller : object {
    private static ListObjectsV2RequestMarshaller _instance;
    public static ListObjectsV2RequestMarshaller Instance { get; }
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListObjectsV2Request listObjectsRequest);
    public static ListObjectsV2RequestMarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.ListObjectsV2ResponseUnmarshaller : S3ReponseUnmarshaller {
    private static ListObjectsV2ResponseUnmarshaller _instance;
    public static ListObjectsV2ResponseUnmarshaller Instance { get; }
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, ListObjectsV2Response response);
    public static ListObjectsV2ResponseUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.ListPartsRequestMarshaller : object {
    private static ListPartsRequestMarshaller _instance;
    public static ListPartsRequestMarshaller Instance { get; }
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListPartsRequest listPartsRequest);
    public static ListPartsRequestMarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.ListPartsResponseUnmarshaller : S3ReponseUnmarshaller {
    private static ListPartsResponseUnmarshaller _instance;
    public static ListPartsResponseUnmarshaller Instance { get; }
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, ListPartsResponse response);
    public static ListPartsResponseUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.ListVersionsRequestMarshaller : object {
    private static ListVersionsRequestMarshaller _instance;
    public static ListVersionsRequestMarshaller Instance { get; }
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListVersionsRequest listVersionsRequest);
    public static ListVersionsRequestMarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.ListVersionsResponseUnmarshaller : S3ReponseUnmarshaller {
    private static ListVersionsResponseUnmarshaller _instance;
    public static ListVersionsResponseUnmarshaller Instance { get; }
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, ListVersionsResponse response);
    public static ListVersionsResponseUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.LoggingEnabledUnmarshaller : object {
    private static LoggingEnabledUnmarshaller _instance;
    public static LoggingEnabledUnmarshaller Instance { get; }
    public sealed virtual S3BucketLoggingConfig Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual S3BucketLoggingConfig Unmarshall(JsonUnmarshallerContext context);
    public static LoggingEnabledUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.MetricsConfigurationUnmarshaller : object {
    private static MetricsConfigurationUnmarshaller _instance;
    public static MetricsConfigurationUnmarshaller Instance { get; }
    public sealed virtual MetricsConfiguration Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual MetricsConfiguration Unmarshall(JsonUnmarshallerContext context);
    public static MetricsConfigurationUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.MetricsPredicateListFilterUnmarshaller : object {
    private static MetricsPredicateListFilterUnmarshaller _instance;
    public static MetricsPredicateListFilterUnmarshaller Instance { get; }
    public sealed virtual List`1<MetricsFilterPredicate> Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual List`1<MetricsFilterPredicate> Unmarshall(JsonUnmarshallerContext context);
    public static MetricsPredicateListFilterUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.MetricsUnmarshaller : object {
    private static MetricsUnmarshaller _instance;
    public static MetricsUnmarshaller Instance { get; }
    public sealed virtual Metrics Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual Metrics Unmarshall(JsonUnmarshallerContext context);
    public static MetricsUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.MultipartUploadUnmarshaller : object {
    private static MultipartUploadUnmarshaller _instance;
    public static MultipartUploadUnmarshaller Instance { get; }
    public sealed virtual MultipartUpload Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual MultipartUpload Unmarshall(JsonUnmarshallerContext context);
    public static MultipartUploadUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.NoSuchAccesspointExceptionUnmarshaller : object {
    private static NoSuchAccesspointExceptionUnmarshaller _instance;
    public static NoSuchAccesspointExceptionUnmarshaller Instance { get; }
    private static NoSuchAccesspointExceptionUnmarshaller();
    public sealed virtual NoSuchAccesspointException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual NoSuchAccesspointException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static NoSuchAccesspointExceptionUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.NoSuchBucketExceptionUnmarshaller : object {
    private static NoSuchBucketExceptionUnmarshaller _instance;
    public static NoSuchBucketExceptionUnmarshaller Instance { get; }
    private static NoSuchBucketExceptionUnmarshaller();
    public sealed virtual NoSuchBucketException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual NoSuchBucketException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static NoSuchBucketExceptionUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.ObjectLockConfigurationUnmarshaller : object {
    private static ObjectLockConfigurationUnmarshaller _instance;
    public static ObjectLockConfigurationUnmarshaller Instance { get; }
    public sealed virtual ObjectLockConfiguration Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ObjectLockConfiguration Unmarshall(JsonUnmarshallerContext context);
    public static ObjectLockConfigurationUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.ObjectLockLegalHoldUnmarshaller : object {
    private static ObjectLockLegalHoldUnmarshaller _instance;
    public static ObjectLockLegalHoldUnmarshaller Instance { get; }
    public sealed virtual ObjectLockLegalHold Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ObjectLockLegalHold Unmarshall(JsonUnmarshallerContext context);
    public static ObjectLockLegalHoldUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.ObjectLockRetentionUnmarshaller : object {
    private static ObjectLockRetentionUnmarshaller _instance;
    public static ObjectLockRetentionUnmarshaller Instance { get; }
    public sealed virtual ObjectLockRetention Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ObjectLockRetention Unmarshall(JsonUnmarshallerContext context);
    public static ObjectLockRetentionUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.ObjectLockRuleUnmarshaller : object {
    private static ObjectLockRuleUnmarshaller _instance;
    public static ObjectLockRuleUnmarshaller Instance { get; }
    public sealed virtual ObjectLockRule Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ObjectLockRule Unmarshall(JsonUnmarshallerContext context);
    public static ObjectLockRuleUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.ObjectPartUnmarshaller : object {
    private static ObjectPartUnmarshaller _instance;
    public static ObjectPartUnmarshaller Instance { get; }
    private static ObjectPartUnmarshaller();
    public sealed virtual ObjectPart Unmarshall(XmlUnmarshallerContext context);
    public static ObjectPartUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.OwnershipControlsRuleUnmarshaller : object {
    private static OwnershipControlsRuleUnmarshaller _instance;
    public static OwnershipControlsRuleUnmarshaller Instance { get; }
    public sealed virtual OwnershipControlsRule Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual OwnershipControlsRule Unmarshall(JsonUnmarshallerContext context);
    public static OwnershipControlsRuleUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.OwnerUnmarshaller : object {
    private static OwnerUnmarshaller _instance;
    public static OwnerUnmarshaller Instance { get; }
    public sealed virtual Owner Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual Owner Unmarshall(JsonUnmarshallerContext context);
    public static OwnerUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.PartDetailUnmarshaller : object {
    private static PartDetailUnmarshaller _instance;
    public static PartDetailUnmarshaller Instance { get; }
    public sealed virtual PartDetail Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual PartDetail Unmarshall(JsonUnmarshallerContext context);
    public static PartDetailUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.PartitionedPrefixUnmarshaller : object {
    private static PartitionedPrefixUnmarshaller _instance;
    public static PartitionedPrefixUnmarshaller Instance { get; }
    private static PartitionedPrefixUnmarshaller();
    public sealed virtual PartitionedPrefix Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual PartitionedPrefix Unmarshall(JsonUnmarshallerContext context);
    public static PartitionedPrefixUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.PolicyStatusUnmarshaller : object {
    private static PolicyStatusUnmarshaller _instance;
    public static PolicyStatusUnmarshaller Instance { get; }
    public sealed virtual PolicyStatus Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual PolicyStatus Unmarshall(JsonUnmarshallerContext context);
    public static PolicyStatusUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.PublicAccessBlockConfigurationUnmarshaller : object {
    private static PublicAccessBlockConfigurationUnmarshaller _instance;
    public static PublicAccessBlockConfigurationUnmarshaller Instance { get; }
    public sealed virtual PublicAccessBlockConfiguration Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual PublicAccessBlockConfiguration Unmarshall(JsonUnmarshallerContext context);
    public static PublicAccessBlockConfigurationUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.PutACLRequestMarshaller : object {
    private static PutACLRequestMarshaller _instance;
    public static PutACLRequestMarshaller Instance { get; }
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(PutACLRequest putObjectAclRequest);
    public static PutACLRequestMarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.PutACLResponseUnmarshaller : S3ReponseUnmarshaller {
    private static PutACLResponseUnmarshaller _instance;
    public static PutACLResponseUnmarshaller Instance { get; }
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    public static PutACLResponseUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.PutBucketAccelerateConfigurationRequestMarshaller : object {
    private static PutBucketAccelerateConfigurationRequestMarshaller _instance;
    public static PutBucketAccelerateConfigurationRequestMarshaller Instance { get; }
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(PutBucketAccelerateConfigurationRequest putBucketAccelerateRequest);
    public static PutBucketAccelerateConfigurationRequestMarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.PutBucketAccelerateConfigurationResponseUnmarshaller : S3ReponseUnmarshaller {
    private static PutBucketAccelerateConfigurationResponseUnmarshaller _instance;
    public static PutBucketAccelerateConfigurationResponseUnmarshaller Instance { get; }
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    public static PutBucketAccelerateConfigurationResponseUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.PutBucketAnalyticsConfigurationRequestMarshaller : object {
    private static PutBucketAnalyticsConfigurationRequestMarshaller _instance;
    public static PutBucketAnalyticsConfigurationRequestMarshaller Instance { get; }
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(PutBucketAnalyticsConfigurationRequest putBucketAnalyticsConfigurationRequest);
    public static PutBucketAnalyticsConfigurationRequestMarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.PutBucketAnalyticsConfigurationResponseUnmarshaller : S3ReponseUnmarshaller {
    private static PutBucketAnalyticsConfigurationResponseUnmarshaller _instance;
    public static PutBucketAnalyticsConfigurationResponseUnmarshaller Instance { get; }
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    public static PutBucketAnalyticsConfigurationResponseUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.PutBucketEncryptionRequestMarshaller : object {
    private static PutBucketEncryptionRequestMarshaller _instance;
    public static PutBucketEncryptionRequestMarshaller Instance { get; }
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(PutBucketEncryptionRequest putBucketEncryptionRequest);
    public static PutBucketEncryptionRequestMarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.PutBucketEncryptionResponseUnmarshaller : S3ReponseUnmarshaller {
    private static PutBucketEncryptionResponseUnmarshaller _instance;
    public static PutBucketEncryptionResponseUnmarshaller Instance { get; }
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    public static PutBucketEncryptionResponseUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.PutBucketIntelligentTieringConfigurationRequestMarshaller : object {
    private static PutBucketIntelligentTieringConfigurationRequestMarshaller _instance;
    public static PutBucketIntelligentTieringConfigurationRequestMarshaller Instance { get; }
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(PutBucketIntelligentTieringConfigurationRequest PutBucketIntelligentTieringConfigurationRequest);
    public static PutBucketIntelligentTieringConfigurationRequestMarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.PutBucketIntelligentTieringConfigurationResponseUnmarshaller : S3ReponseUnmarshaller {
    private static PutBucketIntelligentTieringConfigurationResponseUnmarshaller _instance;
    public static PutBucketIntelligentTieringConfigurationResponseUnmarshaller Instance { get; }
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    public static PutBucketIntelligentTieringConfigurationResponseUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.PutBucketInventoryConfigurationRequestMarshaller : object {
    private static PutBucketInventoryConfigurationRequestMarshaller _instance;
    public static PutBucketInventoryConfigurationRequestMarshaller Instance { get; }
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(PutBucketInventoryConfigurationRequest putBucketInventoryConfigurationRequest);
    public static PutBucketInventoryConfigurationRequestMarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.PutBucketInventoryConfigurationResponseUnmarshaller : S3ReponseUnmarshaller {
    private static PutBucketInventoryConfigurationResponseUnmarshaller _instance;
    public static PutBucketInventoryConfigurationResponseUnmarshaller Instance { get; }
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    public static PutBucketInventoryConfigurationResponseUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.PutBucketLoggingRequestMarshaller : object {
    private static PutBucketLoggingRequestMarshaller _instance;
    public static PutBucketLoggingRequestMarshaller Instance { get; }
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(PutBucketLoggingRequest putBucketLoggingRequest);
    public static PutBucketLoggingRequestMarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.PutBucketLoggingResponseUnmarshaller : S3ReponseUnmarshaller {
    private static PutBucketLoggingResponseUnmarshaller _instance;
    public static PutBucketLoggingResponseUnmarshaller Instance { get; }
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    public static PutBucketLoggingResponseUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.PutBucketMetricsConfigurationRequestMarshaller : object {
    private static PutBucketMetricsConfigurationRequestMarshaller _instance;
    public static PutBucketMetricsConfigurationRequestMarshaller Instance { get; }
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(PutBucketMetricsConfigurationRequest PutBucketMetricsConfigurationRequest);
    public static PutBucketMetricsConfigurationRequestMarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.PutBucketMetricsConfigurationResponseUnmarshaller : S3ReponseUnmarshaller {
    private static PutBucketMetricsConfigurationResponseUnmarshaller _instance;
    public static PutBucketMetricsConfigurationResponseUnmarshaller Instance { get; }
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    public static PutBucketMetricsConfigurationResponseUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.PutBucketNotificationRequestMarshaller : object {
    private static PutBucketNotificationRequestMarshaller _instance;
    public static PutBucketNotificationRequestMarshaller Instance { get; }
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(PutBucketNotificationRequest putBucketNotificationRequest);
    private static void WriteConfigurationCommon(XmlWriter xmlWriter, NotificationConfiguration notificationConfiguration);
    public static PutBucketNotificationRequestMarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.PutBucketNotificationResponseUnmarshaller : S3ReponseUnmarshaller {
    private static PutBucketNotificationResponseUnmarshaller _instance;
    public static PutBucketNotificationResponseUnmarshaller Instance { get; }
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    public static PutBucketNotificationResponseUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.PutBucketOwnershipControlsRequestMarshaller : object {
    private static PutBucketOwnershipControlsRequestMarshaller _instance;
    public static PutBucketOwnershipControlsRequestMarshaller Instance { get; }
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(PutBucketOwnershipControlsRequest putBucketOwnershipControlsRequest);
    public static PutBucketOwnershipControlsRequestMarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.PutBucketOwnershipControlsResponseUnmarshaller : S3ReponseUnmarshaller {
    private static PutBucketOwnershipControlsResponseUnmarshaller _instance;
    public static PutBucketOwnershipControlsResponseUnmarshaller Instance { get; }
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    public static PutBucketOwnershipControlsResponseUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.PutBucketPolicyRequestMarshaller : object {
    private static PutBucketPolicyRequestMarshaller _instance;
    public static PutBucketPolicyRequestMarshaller Instance { get; }
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(PutBucketPolicyRequest putBucketPolicyRequest);
    public static PutBucketPolicyRequestMarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.PutBucketPolicyResponseUnmarshaller : S3ReponseUnmarshaller {
    private static PutBucketPolicyResponseUnmarshaller _instance;
    public static PutBucketPolicyResponseUnmarshaller Instance { get; }
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    public static PutBucketPolicyResponseUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.PutBucketReplicationRequestMarshaller : object {
    private static PutBucketReplicationRequestMarshaller _instance;
    public static PutBucketReplicationRequestMarshaller Instance { get; }
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(PutBucketReplicationRequest putBucketreplicationRequest);
    public static PutBucketReplicationRequestMarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.PutBucketReplicationResponseUnmarshaller : S3ReponseUnmarshaller {
    private static PutBucketReplicationResponseUnmarshaller _instance;
    public static PutBucketReplicationResponseUnmarshaller Instance { get; }
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    public static PutBucketReplicationResponseUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.PutBucketRequestMarshaller : object {
    private static PutBucketRequestMarshaller _instance;
    public static PutBucketRequestMarshaller Instance { get; }
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(PutBucketRequest putBucketRequest);
    protected internal static void ConvertPutWithACLRequest(PutWithACLRequest request, IRequest irequest);
    public static PutBucketRequestMarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.PutBucketRequestPaymentRequestMarshaller : object {
    private static PutBucketRequestPaymentRequestMarshaller _instance;
    public static PutBucketRequestPaymentRequestMarshaller Instance { get; }
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(PutBucketRequestPaymentRequest putBucketRequestPaymentRequest);
    public static PutBucketRequestPaymentRequestMarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.PutBucketRequestPaymentResponseUnmarshaller : S3ReponseUnmarshaller {
    private static PutBucketRequestPaymentResponseUnmarshaller _instance;
    public static PutBucketRequestPaymentResponseUnmarshaller Instance { get; }
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    public static PutBucketRequestPaymentResponseUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.PutBucketResponseUnmarshaller : S3ReponseUnmarshaller {
    private static PutBucketResponseUnmarshaller _instance;
    public static PutBucketResponseUnmarshaller Instance { get; }
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    public static PutBucketResponseUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.PutBucketTaggingRequestMarshaller : object {
    private static PutBucketTaggingRequestMarshaller _instance;
    public static PutBucketTaggingRequestMarshaller Instance { get; }
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(PutBucketTaggingRequest putBucketTaggingRequest);
    public static PutBucketTaggingRequestMarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.PutBucketTaggingResponseUnmarshaller : S3ReponseUnmarshaller {
    private static PutBucketTaggingResponseUnmarshaller _instance;
    public static PutBucketTaggingResponseUnmarshaller Instance { get; }
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    public static PutBucketTaggingResponseUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.PutBucketVersioningRequestMarshaller : object {
    private static PutBucketVersioningRequestMarshaller _instance;
    public static PutBucketVersioningRequestMarshaller Instance { get; }
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(PutBucketVersioningRequest putBucketVersioningRequest);
    public static PutBucketVersioningRequestMarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.PutBucketVersioningResponseUnmarshaller : S3ReponseUnmarshaller {
    private static PutBucketVersioningResponseUnmarshaller _instance;
    public static PutBucketVersioningResponseUnmarshaller Instance { get; }
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    public static PutBucketVersioningResponseUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.PutBucketWebsiteRequestMarshaller : object {
    private static PutBucketWebsiteRequestMarshaller _instance;
    public static PutBucketWebsiteRequestMarshaller Instance { get; }
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(PutBucketWebsiteRequest putBucketWebsiteRequest);
    public static PutBucketWebsiteRequestMarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.PutBucketWebsiteResponseUnmarshaller : S3ReponseUnmarshaller {
    private static PutBucketWebsiteResponseUnmarshaller _instance;
    public static PutBucketWebsiteResponseUnmarshaller Instance { get; }
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    public static PutBucketWebsiteResponseUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.PutCORSConfigurationRequestMarshaller : object {
    private static PutCORSConfigurationRequestMarshaller _instance;
    public static PutCORSConfigurationRequestMarshaller Instance { get; }
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(PutCORSConfigurationRequest putCORSConfigurationRequest);
    public static PutCORSConfigurationRequestMarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.PutCORSConfigurationResponseUnmarshaller : S3ReponseUnmarshaller {
    private static PutCORSConfigurationResponseUnmarshaller _instance;
    public static PutCORSConfigurationResponseUnmarshaller Instance { get; }
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    public static PutCORSConfigurationResponseUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.PutLifecycleConfigurationRequestMarshaller : object {
    private static PutLifecycleConfigurationRequestMarshaller _instance;
    public static PutLifecycleConfigurationRequestMarshaller Instance { get; }
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(PutLifecycleConfigurationRequest putLifecycleConfigurationRequest);
    public static PutLifecycleConfigurationRequestMarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.PutLifecycleConfigurationResponseUnmarshaller : S3ReponseUnmarshaller {
    private static PutLifecycleConfigurationResponseUnmarshaller _instance;
    public static PutLifecycleConfigurationResponseUnmarshaller Instance { get; }
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    public static PutLifecycleConfigurationResponseUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.PutObjectLegalHoldRequestMarshaller : object {
    private static PutObjectLegalHoldRequestMarshaller _instance;
    public static PutObjectLegalHoldRequestMarshaller Instance { get; }
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(PutObjectLegalHoldRequest publicRequest);
    public static PutObjectLegalHoldRequestMarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.PutObjectLegalHoldResponseUnmarshaller : S3ReponseUnmarshaller {
    private static PutObjectLegalHoldResponseUnmarshaller _instance;
    public static PutObjectLegalHoldResponseUnmarshaller Instance { get; }
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    public static PutObjectLegalHoldResponseUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.PutObjectLockConfigurationRequestMarshaller : object {
    private static PutObjectLockConfigurationRequestMarshaller _instance;
    public static PutObjectLockConfigurationRequestMarshaller Instance { get; }
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(PutObjectLockConfigurationRequest publicRequest);
    public static PutObjectLockConfigurationRequestMarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.PutObjectLockConfigurationResponseUnmarshaller : S3ReponseUnmarshaller {
    private static PutObjectLockConfigurationResponseUnmarshaller _instance;
    public static PutObjectLockConfigurationResponseUnmarshaller Instance { get; }
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    public static PutObjectLockConfigurationResponseUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.PutObjectRequestMarshaller : object {
    private static PutObjectRequestMarshaller _instance;
    public static PutObjectRequestMarshaller Instance { get; }
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(PutObjectRequest putObjectRequest);
    public static PutObjectRequestMarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.PutObjectResponseUnmarshaller : S3ReponseUnmarshaller {
    private static PutObjectResponseUnmarshaller _instance;
    public static PutObjectResponseUnmarshaller Instance { get; }
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, PutObjectResponse response);
    public static PutObjectResponseUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.PutObjectRetentionRequestMarshaller : object {
    private static PutObjectRetentionRequestMarshaller _instance;
    public static PutObjectRetentionRequestMarshaller Instance { get; }
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(PutObjectRetentionRequest publicRequest);
    public static PutObjectRetentionRequestMarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.PutObjectRetentionResponseUnmarshaller : S3ReponseUnmarshaller {
    private static PutObjectRetentionResponseUnmarshaller _instance;
    public static PutObjectRetentionResponseUnmarshaller Instance { get; }
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    public static PutObjectRetentionResponseUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.PutObjectTaggingRequestMarshaller : object {
    private static PutObjectTaggingRequestMarshaller _instance;
    public static PutObjectTaggingRequestMarshaller Instance { get; }
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(PutObjectTaggingRequest putObjectTaggingRequest);
    public static PutObjectTaggingRequestMarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.PutObjectTaggingResponseUnmarshaller : S3ReponseUnmarshaller {
    private static PutObjectTaggingResponseUnmarshaller _instance;
    public static PutObjectTaggingResponseUnmarshaller Instance { get; }
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, PutObjectTaggingResponse response);
    public static PutObjectTaggingResponseUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.PutPublicAccessBlockRequestMarshaller : object {
    private static PutPublicAccessBlockRequestMarshaller _instance;
    public static PutPublicAccessBlockRequestMarshaller Instance { get; }
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(PutPublicAccessBlockRequest putPutPublicAccessBlockRequest);
    public static PutPublicAccessBlockRequestMarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.PutPublicAccessBlockResponseUnmarshaller : S3ReponseUnmarshaller {
    private static PutPublicAccessBlockResponseUnmarshaller _instance;
    public static PutPublicAccessBlockResponseUnmarshaller Instance { get; }
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    public static PutPublicAccessBlockResponseUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.QueueConfigurationUnmarshaller : object {
    private static QueueConfigurationUnmarshaller _instance;
    public static QueueConfigurationUnmarshaller Instance { get; }
    public sealed virtual QueueConfiguration Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual QueueConfiguration Unmarshall(JsonUnmarshallerContext context);
    public static QueueConfigurationUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.ReplicaModificationsUnmarshaller : object {
    private static ReplicaModificationsUnmarshaller _instance;
    public static ReplicaModificationsUnmarshaller Instance { get; }
    public sealed virtual ReplicaModifications Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ReplicaModifications Unmarshall(JsonUnmarshallerContext context);
    public static ReplicaModificationsUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.ReplicationDestinationUnmarshaller : object {
    private static ReplicationDestinationUnmarshaller _instance;
    public static ReplicationDestinationUnmarshaller Instance { get; }
    public sealed virtual ReplicationDestination Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ReplicationDestination Unmarshall(JsonUnmarshallerContext context);
    public static ReplicationDestinationUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.ReplicationRuleAndOperatorUnmarshaller : object {
    private static ReplicationRuleAndOperatorUnmarshaller _instance;
    public static ReplicationRuleAndOperatorUnmarshaller Instance { get; }
    public sealed virtual ReplicationRuleAndOperator Unmarshall(XmlUnmarshallerContext context);
    public static ReplicationRuleAndOperatorUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.ReplicationRuleFilterUnmarshaller : object {
    private static ReplicationRuleFilterUnmarshaller _instance;
    public static ReplicationRuleFilterUnmarshaller Instance { get; }
    public sealed virtual ReplicationRuleFilter Unmarshall(XmlUnmarshallerContext context);
    public static ReplicationRuleFilterUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.ReplicationRuleUnmarshaller : object {
    private static ReplicationRuleUnmarshaller _instance;
    public static ReplicationRuleUnmarshaller Instance { get; }
    public sealed virtual ReplicationRule Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ReplicationRule Unmarshall(JsonUnmarshallerContext context);
    public static ReplicationRuleUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.ReplicationTimeUnmarshaller : object {
    private static ReplicationTimeUnmarshaller _instance;
    public static ReplicationTimeUnmarshaller Instance { get; }
    public sealed virtual ReplicationTime Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ReplicationTime Unmarshall(JsonUnmarshallerContext context);
    public static ReplicationTimeUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.ReplicationTimeValueUnmarshaller : object {
    private static ReplicationTimeValueUnmarshaller _instance;
    public static ReplicationTimeValueUnmarshaller Instance { get; }
    public sealed virtual ReplicationTimeValue Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ReplicationTimeValue Unmarshall(JsonUnmarshallerContext context);
    public static ReplicationTimeValueUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.RestoreObjectRequestMarshaller : object {
    private static RestoreObjectRequestMarshaller _instance;
    public static RestoreObjectRequestMarshaller Instance { get; }
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(RestoreObjectRequest restoreObjectRequest);
    public static RestoreObjectRequestMarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.RestoreObjectResponseUnmarshaller : S3ReponseUnmarshaller {
    private static RestoreObjectResponseUnmarshaller _instance;
    public static RestoreObjectResponseUnmarshaller Instance { get; }
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    public static RestoreObjectResponseUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.RestoreStatusUnmarshaller : object {
    private static RestoreStatusUnmarshaller _instance;
    public static RestoreStatusUnmarshaller Instance { get; }
    private static RestoreStatusUnmarshaller();
    public sealed virtual RestoreStatus Unmarshall(XmlUnmarshallerContext context);
    public static RestoreStatusUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.RoutingRuleConditionUnmarshaller : object {
    private static RoutingRuleConditionUnmarshaller _instance;
    public static RoutingRuleConditionUnmarshaller Instance { get; }
    public sealed virtual RoutingRuleCondition Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual RoutingRuleCondition Unmarshall(JsonUnmarshallerContext context);
    public static RoutingRuleConditionUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.RoutingRuleRedirectUnmarshaller : object {
    private static RoutingRuleRedirectUnmarshaller _instance;
    public static RoutingRuleRedirectUnmarshaller Instance { get; }
    public sealed virtual RoutingRuleRedirect Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual RoutingRuleRedirect Unmarshall(JsonUnmarshallerContext context);
    public static RoutingRuleRedirectUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.RoutingRuleUnmarshaller : object {
    private static RoutingRuleUnmarshaller _instance;
    public static RoutingRuleUnmarshaller Instance { get; }
    public sealed virtual RoutingRule Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual RoutingRule Unmarshall(JsonUnmarshallerContext context);
    public static RoutingRuleUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.RulesItemUnmarshaller : object {
    private static RulesItemUnmarshaller _instance;
    public static RulesItemUnmarshaller Instance { get; }
    public sealed virtual LifecycleRule Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual LifecycleRule Unmarshall(JsonUnmarshallerContext context);
    public static RulesItemUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.S3ErrorResponse : ErrorResponse {
    [CompilerGeneratedAttribute]
private string <Region>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Resource>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Id2>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AmzCfId>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <ParsingException>k__BackingField;
    internal string Region { get; internal set; }
    public string Resource { get; public set; }
    public string Id2 { get; public set; }
    public string AmzCfId { get; public set; }
    public Exception ParsingException { get; public set; }
    [CompilerGeneratedAttribute]
internal string get_Region();
    [CompilerGeneratedAttribute]
internal void set_Region(string value);
    [CompilerGeneratedAttribute]
public string get_Resource();
    [CompilerGeneratedAttribute]
public void set_Resource(string value);
    [CompilerGeneratedAttribute]
public string get_Id2();
    [CompilerGeneratedAttribute]
public void set_Id2(string value);
    [CompilerGeneratedAttribute]
public string get_AmzCfId();
    [CompilerGeneratedAttribute]
public void set_AmzCfId(string value);
    [CompilerGeneratedAttribute]
public Exception get_ParsingException();
    [CompilerGeneratedAttribute]
public void set_ParsingException(Exception value);
}
public class Amazon.S3.Model.Internal.MarshallTransformations.S3ErrorResponseUnmarshaller : object {
    private static string XML_CONTENT_TYPE;
    private static S3ErrorResponseUnmarshaller _instance;
    public static S3ErrorResponseUnmarshaller Instance { get; }
    public sealed virtual S3ErrorResponse Unmarshall(XmlUnmarshallerContext context);
    public static S3ErrorResponseUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.S3KeyFilterUnmarshaller : object {
    private static S3KeyFilterUnmarshaller _instance;
    public static S3KeyFilterUnmarshaller Instance { get; }
    public sealed virtual S3KeyFilter Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual S3KeyFilter Unmarshall(JsonUnmarshallerContext context);
    public static S3KeyFilterUnmarshaller get_Instance();
}
public abstract class Amazon.S3.Model.Internal.MarshallTransformations.S3ReponseUnmarshaller : XmlResponseUnmarshaller {
    public virtual UnmarshallerContext CreateContext(IWebResponseData response, bool readEntireResponse, Stream stream, RequestMetrics metrics, bool isException);
    public virtual UnmarshallerContext CreateContext(IWebResponseData response, bool readEntireResponse, Stream stream, RequestMetrics metrics, bool isException, IRequestContext context);
    public virtual AmazonWebServiceResponse Unmarshall(UnmarshallerContext input);
    protected virtual UnmarshallerContext ConstructUnmarshallerContext(Stream responseStream, bool maintainResponseBody, IWebResponseData response, bool isException);
    protected virtual UnmarshallerContext ConstructUnmarshallerContext(Stream responseStream, bool maintainResponseBody, IWebResponseData response, bool isException, IRequestContext requestContext);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
}
public static class Amazon.S3.Model.Internal.MarshallTransformations.S3Transforms : object {
    internal static string ToURLEncodedValue(string value, bool path);
    internal static string ToURLEncodedValue(int value, bool path);
    internal static string ToURLEncodedValue(DateTime value, bool path);
    internal static string ToStringValue(string value);
    internal static string ToStringValue(int value);
    internal static string ToStringValue(long value);
    internal static string ToStringValue(DateTime value, string dateFormat);
    internal static string ToStringValue(bool value);
    internal static string ToXmlStringValue(string value);
    internal static string ToXmlStringValue(DateTime value);
    internal static string ToXmlStringValue(int value);
    internal static string ToXmlStringValue(long value);
    internal static string ToXmlStringValue(bool value);
    internal static DateTime ToDateTime(string value);
    internal static int ToInt(string value);
    internal static string ToString(string value);
    internal static bool ToBool(string value);
    internal static T Unmarshall(string text);
    internal static void BuildQueryParameterMap(IRequest request, IDictionary`2<string, string> queryParameters, string queryString, String[] unusedIfNullValueParams);
}
public class Amazon.S3.Model.Internal.MarshallTransformations.S3UnmarshallerContext : XmlUnmarshallerContext {
    private bool _checkedForErrorResponse;
    public S3UnmarshallerContext(Stream responseStream, bool maintainResponseBody, IWebResponseData responseData, bool isException);
    public S3UnmarshallerContext(Stream responseStream, bool maintainResponseBody, IWebResponseData responseData, bool isException, IRequestContext requestContext);
    public virtual bool Read();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.SelectObjectContentRequestMarshaller : object {
    private static SelectObjectContentRequestMarshaller _instance;
    public static SelectObjectContentRequestMarshaller Instance { get; }
    public static SelectObjectContentRequestMarshaller get_Instance();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(SelectObjectContentRequest selectObjectContentRequest);
    private static ArgumentException ConstructExceptionArgumentRequired(string parameterName);
}
public class Amazon.S3.Model.Internal.MarshallTransformations.SelectObjectContentResponseUnmarshaller : S3ReponseUnmarshaller {
    private static SelectObjectContentResponseUnmarshaller _instance;
    public static SelectObjectContentResponseUnmarshaller Instance { get; }
    public bool HasStreamingProperty { get; }
    public static SelectObjectContentResponseUnmarshaller get_Instance();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, SelectObjectContentResponse response);
    public virtual bool get_HasStreamingProperty();
    protected virtual bool ShouldReadEntireResponse(IWebResponseData response, bool readEntireResponse);
}
public class Amazon.S3.Model.Internal.MarshallTransformations.ServerSideEncryptionByDefaultUnmarshaller : object {
    private static ServerSideEncryptionByDefaultUnmarshaller _instance;
    public static ServerSideEncryptionByDefaultUnmarshaller Instance { get; }
    public sealed virtual ServerSideEncryptionByDefault Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ServerSideEncryptionByDefault Unmarshall(JsonUnmarshallerContext input);
    public static ServerSideEncryptionByDefaultUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.ServerSideEncryptionRuleUnmarshaller : object {
    private static ServerSideEncryptionRuleUnmarshaller _instance;
    public static ServerSideEncryptionRuleUnmarshaller Instance { get; }
    public sealed virtual ServerSideEncryptionRule Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ServerSideEncryptionRule Unmarshall(JsonUnmarshallerContext input);
    public static ServerSideEncryptionRuleUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.SessionCredentialsUnmarshaller : object {
    private static SessionCredentialsUnmarshaller _instance;
    public static SessionCredentialsUnmarshaller Instance { get; }
    private static SessionCredentialsUnmarshaller();
    public sealed virtual SessionCredentials Unmarshall(XmlUnmarshallerContext context);
    public static SessionCredentialsUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.SimplePrefixUnmarshaller : object {
    private static SimplePrefixUnmarshaller _instance;
    public static SimplePrefixUnmarshaller Instance { get; }
    private static SimplePrefixUnmarshaller();
    public sealed virtual SimplePrefix Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual SimplePrefix Unmarshall(JsonUnmarshallerContext context);
    public static SimplePrefixUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.SourceSelectionCriteriaUnmarshaller : object {
    private static SourceSelectionCriteriaUnmarshaller _instance;
    public static SourceSelectionCriteriaUnmarshaller Instance { get; }
    public sealed virtual SourceSelectionCriteria Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual SourceSelectionCriteria Unmarshall(JsonUnmarshallerContext context);
    public static SourceSelectionCriteriaUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.SseKmsEncryptedObjectsUnmarshaller : object {
    private static SseKmsEncryptedObjectsUnmarshaller _instance;
    public static SseKmsEncryptedObjectsUnmarshaller Instance { get; }
    public sealed virtual SseKmsEncryptedObjects Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual SseKmsEncryptedObjects Unmarshall(JsonUnmarshallerContext context);
    public static SseKmsEncryptedObjectsUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.SSEKMSUnmarshaller : object {
    private static SSEKMSUnmarshaller _instance;
    public static SSEKMSUnmarshaller Instance { get; }
    public sealed virtual SSEKMS Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual SSEKMS Unmarshall(JsonUnmarshallerContext context);
    public static SSEKMSUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.SSES3Unmarshaller : object {
    private static SSES3Unmarshaller _instance;
    public static SSES3Unmarshaller Instance { get; }
    public sealed virtual SSES3 Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual SSES3 Unmarshall(JsonUnmarshallerContext context);
    public static SSES3Unmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.StorageClassAnalysisDataExportUnmarshaller : object {
    private static StorageClassAnalysisDataExportUnmarshaller _instance;
    public static StorageClassAnalysisDataExportUnmarshaller Instance { get; }
    public sealed virtual StorageClassAnalysisDataExport Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual StorageClassAnalysisDataExport Unmarshall(JsonUnmarshallerContext context);
    public static StorageClassAnalysisDataExportUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.StorageClassAnalysisUnmarshaller : object {
    private static StorageClassAnalysisUnmarshaller _instance;
    public static StorageClassAnalysisUnmarshaller Instance { get; }
    public sealed virtual StorageClassAnalysis Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual StorageClassAnalysis Unmarshall(JsonUnmarshallerContext context);
    public static StorageClassAnalysisUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.TagUnmarshaller : object {
    private static TagUnmarshaller _instance;
    public static TagUnmarshaller Instance { get; }
    public sealed virtual Tag Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual Tag Unmarshall(JsonUnmarshallerContext context);
    public static TagUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.TargetObjectKeyFormatUnmarshaller : object {
    private static TargetObjectKeyFormatUnmarshaller _instance;
    public static TargetObjectKeyFormatUnmarshaller Instance { get; }
    private static TargetObjectKeyFormatUnmarshaller();
    public sealed virtual TargetObjectKeyFormat Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual TargetObjectKeyFormat Unmarshall(JsonUnmarshallerContext context);
    public static TargetObjectKeyFormatUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.TieringUnmarshaller : object {
    private static TieringUnmarshaller _instance;
    public static TieringUnmarshaller Instance { get; }
    public sealed virtual Tiering Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual Tiering Unmarshall(JsonUnmarshallerContext context);
    public static TieringUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.TopicConfigurationUnmarshaller : object {
    private static TopicConfigurationUnmarshaller _instance;
    public static TopicConfigurationUnmarshaller Instance { get; }
    public sealed virtual TopicConfiguration Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual TopicConfiguration Unmarshall(JsonUnmarshallerContext context);
    public static TopicConfigurationUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.TransitionUnmarshaller : object {
    private static TransitionUnmarshaller _instance;
    public static TransitionUnmarshaller Instance { get; }
    public sealed virtual LifecycleTransition Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual LifecycleTransition Unmarshall(JsonUnmarshallerContext context);
    public static TransitionUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.UploadPartRequestMarshaller : object {
    private static UploadPartRequestMarshaller _instance;
    public static UploadPartRequestMarshaller Instance { get; }
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(UploadPartRequest uploadPartRequest);
    public static UploadPartRequestMarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.UploadPartResponseUnmarshaller : S3ReponseUnmarshaller {
    private static UploadPartResponseUnmarshaller _instance;
    public static UploadPartResponseUnmarshaller Instance { get; }
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, UploadPartResponse response);
    public static UploadPartResponseUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.VersionsItemUnmarshaller : object {
    private static VersionsItemUnmarshaller _instance;
    public static VersionsItemUnmarshaller Instance { get; }
    public sealed virtual S3ObjectVersion Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual S3ObjectVersion Unmarshall(JsonUnmarshallerContext context);
    public static VersionsItemUnmarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.WriteGetObjectResponseRequestMarshaller : object {
    private static WriteGetObjectResponseRequestMarshaller _instance;
    public static WriteGetObjectResponseRequestMarshaller Instance { get; }
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(WriteGetObjectResponseRequest writeGetObjectResponseRequest);
    public static WriteGetObjectResponseRequestMarshaller get_Instance();
}
public class Amazon.S3.Model.Internal.MarshallTransformations.WriteGetObjectResponseResponseUnmarshaller : S3ReponseUnmarshaller {
    private static WriteGetObjectResponseResponseUnmarshaller _instance;
    public static WriteGetObjectResponseResponseUnmarshaller Instance { get; }
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    public static WriteGetObjectResponseResponseUnmarshaller get_Instance();
}
internal class Amazon.S3.Model.Internal.MetricsPredicateVisitor : object {
    private XmlWriter xmlWriter;
    public MetricsPredicateVisitor(XmlWriter xmlWriter);
    public sealed virtual void Visit(MetricsPrefixPredicate metricsPrefixPredicate);
    public sealed virtual void visit(MetricsTagPredicate metricsTagPredicate);
    public sealed virtual void visit(MetricsAndOperator metricsAndOperatorPredicate);
    public sealed virtual void visit(MetricsAccessPointArnPredicate metricsAccessPointArnPredicate);
}
public class Amazon.S3.Model.InventoryConfiguration : object {
    private InventoryDestination inventoryDestination;
    private InventoryFilter inventoryFilter;
    private string inventoryId;
    private Nullable`1<bool> isEnabled;
    private InventoryIncludedObjectVersions inventoryIncludedObjectVersions;
    private List`1<InventoryOptionalField> inventoryOptionalFields;
    private InventorySchedule inventorySchedule;
    public InventoryDestination Destination { get; public set; }
    public InventoryFilter InventoryFilter { get; public set; }
    public string InventoryId { get; public set; }
    public InventoryIncludedObjectVersions IncludedObjectVersions { get; public set; }
    public Nullable`1<bool> IsEnabled { get; public set; }
    public List`1<InventoryOptionalField> InventoryOptionalFields { get; public set; }
    public InventorySchedule Schedule { get; public set; }
    public InventoryDestination get_Destination();
    public void set_Destination(InventoryDestination value);
    internal bool IsSetDestination();
    public InventoryFilter get_InventoryFilter();
    public void set_InventoryFilter(InventoryFilter value);
    internal bool IsSetInventoryFilter();
    public string get_InventoryId();
    public void set_InventoryId(string value);
    internal bool IsSetInventoryId();
    public InventoryIncludedObjectVersions get_IncludedObjectVersions();
    public void set_IncludedObjectVersions(InventoryIncludedObjectVersions value);
    internal bool IsSetIncludedObjectVersions();
    public Nullable`1<bool> get_IsEnabled();
    public void set_IsEnabled(Nullable`1<bool> value);
    public List`1<InventoryOptionalField> get_InventoryOptionalFields();
    public void set_InventoryOptionalFields(List`1<InventoryOptionalField> value);
    internal bool IsSetInventoryOptionalFields();
    public InventorySchedule get_Schedule();
    public void set_Schedule(InventorySchedule value);
    internal bool IsSetSchedule();
}
public class Amazon.S3.Model.InventoryDestination : object {
    private InventoryS3BucketDestination inventoryS3BucketDestination;
    public InventoryS3BucketDestination S3BucketDestination { get; public set; }
    public InventoryS3BucketDestination get_S3BucketDestination();
    public void set_S3BucketDestination(InventoryS3BucketDestination value);
    public bool isSetS3BucketDestination();
}
public class Amazon.S3.Model.InventoryEncryption : object {
    private SSES3 sSES3;
    private SSEKMS sSEKms;
    public SSES3 SSES3 { get; public set; }
    public SSEKMS SSEKMS { get; public set; }
    public SSES3 get_SSES3();
    public void set_SSES3(SSES3 value);
    internal bool IsSetSSES3();
    public SSEKMS get_SSEKMS();
    public void set_SSEKMS(SSEKMS value);
    internal bool IsSetSSEKMS();
}
public class Amazon.S3.Model.InventoryFilter : object {
    private InventoryFilterPredicate inventoryFilterPredicate;
    public InventoryFilterPredicate InventoryFilterPredicate { get; public set; }
    public InventoryFilterPredicate get_InventoryFilterPredicate();
    public void set_InventoryFilterPredicate(InventoryFilterPredicate value);
}
public abstract class Amazon.S3.Model.InventoryFilterPredicate : object {
    internal abstract virtual void Accept(IInventoryPredicateVisitor inventoryPredicateVisitor);
}
public class Amazon.S3.Model.InventoryPrefixPredicate : InventoryFilterPredicate {
    private string prefix;
    public string Prefix { get; }
    public InventoryPrefixPredicate(string prefix);
    public string get_Prefix();
    internal virtual void Accept(IInventoryPredicateVisitor inventoryPredicateVisitor);
}
public class Amazon.S3.Model.InventoryS3BucketDestination : object {
    private string accountId;
    private string bucketName;
    private string prefix;
    private InventoryFormat inventoryFormat;
    private InventoryEncryption inventoryEncryption;
    public string AccountId { get; public set; }
    public string BucketName { get; public set; }
    public string Prefix { get; public set; }
    public InventoryFormat InventoryFormat { get; public set; }
    public InventoryEncryption InventoryEncryption { get; public set; }
    public string get_AccountId();
    public void set_AccountId(string value);
    public bool IsSetAccountId();
    public string get_BucketName();
    public void set_BucketName(string value);
    internal bool IsSetBucketName();
    public string get_Prefix();
    public void set_Prefix(string value);
    internal bool IsSetPrefix();
    public InventoryFormat get_InventoryFormat();
    public void set_InventoryFormat(InventoryFormat value);
    internal bool IsSetInventoryFormat();
    public InventoryEncryption get_InventoryEncryption();
    public void set_InventoryEncryption(InventoryEncryption value);
    internal bool IsSetInventoryEncryption();
}
public class Amazon.S3.Model.InventorySchedule : object {
    private InventoryFrequency inventoryFrequency;
    public InventoryFrequency Frequency { get; public set; }
    public InventoryFrequency get_Frequency();
    public void set_Frequency(InventoryFrequency value);
    internal bool IsFrequency();
}
public interface Amazon.S3.Model.IS3Event {
}
public interface Amazon.S3.Model.IS3PaginatorFactory {
    public abstract virtual IListMultipartUploadsPaginator ListMultipartUploads(ListMultipartUploadsRequest request);
    public abstract virtual IListObjectsPaginator ListObjects(ListObjectsRequest request);
    public abstract virtual IListObjectsV2Paginator ListObjectsV2(ListObjectsV2Request request);
    public abstract virtual IListPartsPaginator ListParts(ListPartsRequest request);
    public abstract virtual IListVersionsPaginator ListVersions(ListVersionsRequest request);
}
public interface Amazon.S3.Model.ISelectObjectContentEventStream {
    [CompilerGeneratedAttribute]
public abstract virtual void add_EventReceived(EventHandler`1<EventStreamEventReceivedArgs`1<IS3Event>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_EventReceived(EventHandler`1<EventStreamEventReceivedArgs`1<IS3Event>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ExceptionReceived(EventHandler`1<EventStreamExceptionReceivedArgs`1<S3EventStreamException>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ExceptionReceived(EventHandler`1<EventStreamExceptionReceivedArgs`1<S3EventStreamException>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_RecordsEventReceived(EventHandler`1<EventStreamEventReceivedArgs`1<RecordsEvent>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_RecordsEventReceived(EventHandler`1<EventStreamEventReceivedArgs`1<RecordsEvent>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_StatsEventReceived(EventHandler`1<EventStreamEventReceivedArgs`1<StatsEvent>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_StatsEventReceived(EventHandler`1<EventStreamEventReceivedArgs`1<StatsEvent>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ProgressEventReceived(EventHandler`1<EventStreamEventReceivedArgs`1<ProgressEvent>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ProgressEventReceived(EventHandler`1<EventStreamEventReceivedArgs`1<ProgressEvent>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ContinuationEventReceived(EventHandler`1<EventStreamEventReceivedArgs`1<ContinuationEvent>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ContinuationEventReceived(EventHandler`1<EventStreamEventReceivedArgs`1<ContinuationEvent>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_EndEventReceived(EventHandler`1<EventStreamEventReceivedArgs`1<EndEvent>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_EndEventReceived(EventHandler`1<EventStreamEventReceivedArgs`1<EndEvent>> value);
}
public class Amazon.S3.Model.JSONInput : object {
    [CompilerGeneratedAttribute]
private JsonType <JsonType>k__BackingField;
    public JsonType JsonType { get; public set; }
    [CompilerGeneratedAttribute]
public JsonType get_JsonType();
    [CompilerGeneratedAttribute]
public void set_JsonType(JsonType value);
    internal bool IsSetType();
    internal void Marshall(string memberName, XmlWriter xmlWriter);
}
public class Amazon.S3.Model.JSONOutput : object {
    [CompilerGeneratedAttribute]
private string <RecordDelimiter>k__BackingField;
    public string RecordDelimiter { get; public set; }
    [CompilerGeneratedAttribute]
public string get_RecordDelimiter();
    [CompilerGeneratedAttribute]
public void set_RecordDelimiter(string value);
    internal bool IsSetRecordDelimiter();
    internal void Marshall(string memberName, XmlWriter xmlWriter);
}
public class Amazon.S3.Model.KeyVersion : object {
    private string key;
    private string versionId;
    public string Key { get; public set; }
    public string VersionId { get; public set; }
    public string get_Key();
    public void set_Key(string value);
    internal bool IsSetKey();
    public string get_VersionId();
    public void set_VersionId(string value);
    internal bool IsSetVersionId();
}
public class Amazon.S3.Model.LambdaFunctionConfiguration : NotificationConfiguration {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FunctionArn>k__BackingField;
    public string Id { get; public set; }
    public string FunctionArn { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    internal bool IsSetId();
    [CompilerGeneratedAttribute]
public string get_FunctionArn();
    [CompilerGeneratedAttribute]
public void set_FunctionArn(string value);
    internal bool IsSetFunctionArn();
}
public class Amazon.S3.Model.LifecycleAndOperator : LifecycleNAryOperator {
    internal virtual void Accept(ILifecyclePredicateVisitor visitor);
}
public class Amazon.S3.Model.LifecycleConfiguration : object {
    private List`1<LifecycleRule> rules;
    public List`1<LifecycleRule> Rules { get; public set; }
    public List`1<LifecycleRule> get_Rules();
    public void set_Rules(List`1<LifecycleRule> value);
    internal bool IsSetRules();
}
public class Amazon.S3.Model.LifecycleFilter : object {
    [CompilerGeneratedAttribute]
private LifecycleFilterPredicate <LifecycleFilterPredicate>k__BackingField;
    public LifecycleFilterPredicate LifecycleFilterPredicate { get; public set; }
    [CompilerGeneratedAttribute]
public LifecycleFilterPredicate get_LifecycleFilterPredicate();
    [CompilerGeneratedAttribute]
public void set_LifecycleFilterPredicate(LifecycleFilterPredicate value);
    internal bool IsSetLifecycleFilterPredicate();
}
public abstract class Amazon.S3.Model.LifecycleFilterPredicate : object {
    internal abstract virtual void Accept(ILifecyclePredicateVisitor visitor);
}
public abstract class Amazon.S3.Model.LifecycleNAryOperator : LifecycleFilterPredicate {
    [CompilerGeneratedAttribute]
private List`1<LifecycleFilterPredicate> <Operands>k__BackingField;
    public List`1<LifecycleFilterPredicate> Operands { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<LifecycleFilterPredicate> get_Operands();
    [CompilerGeneratedAttribute]
public void set_Operands(List`1<LifecycleFilterPredicate> value);
    internal bool IsSetOperands();
}
public class Amazon.S3.Model.LifecycleObjectSizeGreaterThanPredicate : LifecycleFilterPredicate {
    private Nullable`1<long> _objectSizeGreaterThan;
    public Nullable`1<long> ObjectSizeGreaterThan { get; public set; }
    public Nullable`1<long> get_ObjectSizeGreaterThan();
    public void set_ObjectSizeGreaterThan(Nullable`1<long> value);
    internal bool IsSetObjectSizeGreaterThan();
    internal virtual void Accept(ILifecyclePredicateVisitor visitor);
}
public class Amazon.S3.Model.LifecycleObjectSizeLessThanPredicate : LifecycleFilterPredicate {
    private Nullable`1<long> _objectSizeLessThan;
    public Nullable`1<long> ObjectSizeLessThan { get; public set; }
    public Nullable`1<long> get_ObjectSizeLessThan();
    public void set_ObjectSizeLessThan(Nullable`1<long> value);
    internal bool IsSetObjectSizeLessThan();
    internal virtual void Accept(ILifecyclePredicateVisitor visitor);
}
public class Amazon.S3.Model.LifecyclePrefixPredicate : LifecycleFilterPredicate {
    [CompilerGeneratedAttribute]
private string <Prefix>k__BackingField;
    public string Prefix { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Prefix();
    [CompilerGeneratedAttribute]
public void set_Prefix(string value);
    internal bool IsSetPrefix();
    internal virtual void Accept(ILifecyclePredicateVisitor visitor);
}
public class Amazon.S3.Model.LifecycleRule : object {
    private LifecycleRuleAbortIncompleteMultipartUpload abortIncompleteMultipartUpload;
    private LifecycleRuleExpiration expiration;
    private string id;
    private LifecycleRuleNoncurrentVersionExpiration noncurrentVersionExpiration;
    private List`1<LifecycleRuleNoncurrentVersionTransition> noncurrentVersionTransitions;
    private string prefix;
    private LifecycleRuleStatus status;
    private List`1<LifecycleTransition> transitions;
    private LifecycleFilter filter;
    public LifecycleRuleAbortIncompleteMultipartUpload AbortIncompleteMultipartUpload { get; public set; }
    public LifecycleRuleExpiration Expiration { get; public set; }
    public string Id { get; public set; }
    public LifecycleRuleNoncurrentVersionExpiration NoncurrentVersionExpiration { get; public set; }
    public LifecycleFilter Filter { get; public set; }
    public LifecycleRuleStatus Status { get; public set; }
    [ObsoleteAttribute("The Transition property is now obsolete in favor the Transitions property.")]
public LifecycleTransition Transition { get; public set; }
    [ObsoleteAttribute("The NoncurrentVersionTransition property is now obsolete in favor the NoncurrentVersionTransitions property.")]
public LifecycleRuleNoncurrentVersionTransition NoncurrentVersionTransition { get; public set; }
    public List`1<LifecycleRuleNoncurrentVersionTransition> NoncurrentVersionTransitions { get; public set; }
    [ObsoleteAttribute("This property is obsolete.  Use the Filter property instead.")]
public string Prefix { get; public set; }
    public List`1<LifecycleTransition> Transitions { get; public set; }
    public LifecycleRuleAbortIncompleteMultipartUpload get_AbortIncompleteMultipartUpload();
    public void set_AbortIncompleteMultipartUpload(LifecycleRuleAbortIncompleteMultipartUpload value);
    internal bool IsSetAbortIncompleteMultipartUpload();
    public LifecycleRuleExpiration get_Expiration();
    public void set_Expiration(LifecycleRuleExpiration value);
    internal bool IsSetExpiration();
    public string get_Id();
    public void set_Id(string value);
    internal bool IsSetId();
    public LifecycleRuleNoncurrentVersionExpiration get_NoncurrentVersionExpiration();
    public void set_NoncurrentVersionExpiration(LifecycleRuleNoncurrentVersionExpiration value);
    internal bool IsSetNoncurrentVersionExpiration();
    public LifecycleFilter get_Filter();
    public void set_Filter(LifecycleFilter value);
    internal bool IsSetFilter();
    public LifecycleRuleStatus get_Status();
    public void set_Status(LifecycleRuleStatus value);
    internal bool IsSetStatus();
    public LifecycleTransition get_Transition();
    public void set_Transition(LifecycleTransition value);
    internal bool IsSetTransition();
    public LifecycleRuleNoncurrentVersionTransition get_NoncurrentVersionTransition();
    public void set_NoncurrentVersionTransition(LifecycleRuleNoncurrentVersionTransition value);
    public List`1<LifecycleRuleNoncurrentVersionTransition> get_NoncurrentVersionTransitions();
    public void set_NoncurrentVersionTransitions(List`1<LifecycleRuleNoncurrentVersionTransition> value);
    internal bool IsSetNoncurrentVersionTransitions();
    public string get_Prefix();
    public void set_Prefix(string value);
    internal bool IsSetPrefix();
    public List`1<LifecycleTransition> get_Transitions();
    public void set_Transitions(List`1<LifecycleTransition> value);
    internal bool IsSetTransitions();
}
public class Amazon.S3.Model.LifecycleRuleAbortIncompleteMultipartUpload : object {
    private Nullable`1<int> daysAfterInitiation;
    public Nullable`1<int> DaysAfterInitiation { get; public set; }
    public Nullable`1<int> get_DaysAfterInitiation();
    public void set_DaysAfterInitiation(Nullable`1<int> value);
    internal bool IsSetDaysAfterInitiation();
}
public class Amazon.S3.Model.LifecycleRuleExpiration : object {
    private Nullable`1<DateTime> date;
    private Nullable`1<DateTime> dateUtc;
    private Nullable`1<int> days;
    private Nullable`1<bool> expiredObjectDeleteMarker;
    [ObsoleteAttribute("Setting this property results in non-UTC DateTimes not being marshalled correctly. Use DateUtc instead.", "False")]
public Nullable`1<DateTime> Date { get; public set; }
    public Nullable`1<DateTime> DateUtc { get; public set; }
    public Nullable`1<int> Days { get; public set; }
    public Nullable`1<bool> ExpiredObjectDeleteMarker { get; public set; }
    public Nullable`1<DateTime> get_Date();
    public void set_Date(Nullable`1<DateTime> value);
    public Nullable`1<DateTime> get_DateUtc();
    public void set_DateUtc(Nullable`1<DateTime> value);
    internal bool IsSetDateUtc();
    public Nullable`1<int> get_Days();
    public void set_Days(Nullable`1<int> value);
    internal bool IsSetDays();
    public Nullable`1<bool> get_ExpiredObjectDeleteMarker();
    public void set_ExpiredObjectDeleteMarker(Nullable`1<bool> value);
    internal bool IsSetExpiredObjectDeleteMarker();
}
public class Amazon.S3.Model.LifecycleRuleNoncurrentVersionExpiration : object {
    private Nullable`1<int> _newerNoncurrentVersions;
    private Nullable`1<int> _noncurrentDays;
    public Nullable`1<int> NewerNoncurrentVersions { get; public set; }
    public Nullable`1<int> NoncurrentDays { get; public set; }
    public Nullable`1<int> get_NewerNoncurrentVersions();
    public void set_NewerNoncurrentVersions(Nullable`1<int> value);
    internal bool IsSetNewerNoncurrentVersions();
    public Nullable`1<int> get_NoncurrentDays();
    public void set_NoncurrentDays(Nullable`1<int> value);
    internal bool IsSetNoncurrentDays();
}
public class Amazon.S3.Model.LifecycleRuleNoncurrentVersionTransition : object {
    private Nullable`1<int> _newerNoncurrentVersions;
    private Nullable`1<int> noncurrentDays;
    private S3StorageClass storageClass;
    public Nullable`1<int> NewerNoncurrentVersions { get; public set; }
    public Nullable`1<int> NoncurrentDays { get; public set; }
    public S3StorageClass StorageClass { get; public set; }
    public Nullable`1<int> get_NewerNoncurrentVersions();
    public void set_NewerNoncurrentVersions(Nullable`1<int> value);
    internal bool IsSetNewerNoncurrentVersions();
    public Nullable`1<int> get_NoncurrentDays();
    public void set_NoncurrentDays(Nullable`1<int> value);
    internal bool IsSetNoncurrentDays();
    public S3StorageClass get_StorageClass();
    public void set_StorageClass(S3StorageClass value);
    internal bool IsSetStorageClass();
}
public class Amazon.S3.Model.LifecycleTagPredicate : LifecycleFilterPredicate {
    [CompilerGeneratedAttribute]
private Tag <Tag>k__BackingField;
    public Tag Tag { get; public set; }
    [CompilerGeneratedAttribute]
public Tag get_Tag();
    [CompilerGeneratedAttribute]
public void set_Tag(Tag value);
    internal bool IsSetTag();
    internal virtual void Accept(ILifecyclePredicateVisitor visitor);
}
public class Amazon.S3.Model.LifecycleTransition : object {
    private Nullable`1<DateTime> date;
    private Nullable`1<DateTime> dateUtc;
    private Nullable`1<int> days;
    private S3StorageClass storageClass;
    [ObsoleteAttribute("Setting this property results in non-UTC DateTimes not being marshalled correctly. Use DateUtc instead.", "False")]
public Nullable`1<DateTime> Date { get; public set; }
    public Nullable`1<DateTime> DateUtc { get; public set; }
    public Nullable`1<int> Days { get; public set; }
    public S3StorageClass StorageClass { get; public set; }
    public Nullable`1<DateTime> get_Date();
    public void set_Date(Nullable`1<DateTime> value);
    public Nullable`1<DateTime> get_DateUtc();
    public void set_DateUtc(Nullable`1<DateTime> value);
    internal bool IsSetDateUtc();
    public Nullable`1<int> get_Days();
    public void set_Days(Nullable`1<int> value);
    internal bool IsSetDays();
    public S3StorageClass get_StorageClass();
    public void set_StorageClass(S3StorageClass value);
    internal bool IsSetStorageClass();
}
public class Amazon.S3.Model.ListBucketAnalyticsConfigurationsRequest : AmazonWebServiceRequest {
    private string bucketName;
    private string token;
    private string expectedBucketOwner;
    public string BucketName { get; public set; }
    public string ContinuationToken { get; public set; }
    public string ExpectedBucketOwner { get; public set; }
    public string get_BucketName();
    public void set_BucketName(string value);
    internal bool IsSetBucket();
    public string get_ContinuationToken();
    public void set_ContinuationToken(string value);
    internal bool IsSetContinuationToken();
    public string get_ExpectedBucketOwner();
    public void set_ExpectedBucketOwner(string value);
    internal bool IsSetExpectedBucketOwner();
}
public class Amazon.S3.Model.ListBucketAnalyticsConfigurationsResponse : AmazonWebServiceResponse {
    private string token;
    private List`1<AnalyticsConfiguration> analyticsConfigurationList;
    private Nullable`1<bool> isTruncated;
    private string nextToken;
    public string ContinuationToken { get; public set; }
    public List`1<AnalyticsConfiguration> AnalyticsConfigurationList { get; public set; }
    public Nullable`1<bool> IsTruncated { get; public set; }
    public string NextContinuationToken { get; public set; }
    public string get_ContinuationToken();
    public void set_ContinuationToken(string value);
    internal bool IsSetToken();
    public List`1<AnalyticsConfiguration> get_AnalyticsConfigurationList();
    public void set_AnalyticsConfigurationList(List`1<AnalyticsConfiguration> value);
    public bool IsSetAnalyticsConfigurationList();
    public Nullable`1<bool> get_IsTruncated();
    public void set_IsTruncated(Nullable`1<bool> value);
    internal bool IsSetIsTruncated();
    public string get_NextContinuationToken();
    public void set_NextContinuationToken(string value);
    internal bool IsSetNextToken();
}
public class Amazon.S3.Model.ListBucketIntelligentTieringConfigurationsRequest : AmazonWebServiceRequest {
    private string bucketName;
    private string token;
    public string BucketName { get; public set; }
    public string ContinuationToken { get; public set; }
    public string get_BucketName();
    public void set_BucketName(string value);
    internal bool IsSetBucketName();
    public string get_ContinuationToken();
    public void set_ContinuationToken(string value);
    internal bool IsSetContinuationToken();
}
public class Amazon.S3.Model.ListBucketIntelligentTieringConfigurationsResponse : AmazonWebServiceResponse {
    private string continuationToken;
    private List`1<IntelligentTieringConfiguration> intelligentTieringConfigurationList;
    private Nullable`1<bool> isTruncated;
    private string nextContinuationToken;
    public string ContinuationToken { get; public set; }
    public List`1<IntelligentTieringConfiguration> IntelligentTieringConfigurationList { get; public set; }
    public Nullable`1<bool> IsTruncated { get; public set; }
    public string NextContinuationToken { get; public set; }
    public string get_ContinuationToken();
    public void set_ContinuationToken(string value);
    internal bool IsSetToken();
    public List`1<IntelligentTieringConfiguration> get_IntelligentTieringConfigurationList();
    public void set_IntelligentTieringConfigurationList(List`1<IntelligentTieringConfiguration> value);
    public bool IsSetIntelligentTieringConfigurationList();
    public Nullable`1<bool> get_IsTruncated();
    public void set_IsTruncated(Nullable`1<bool> value);
    internal bool IsSetIsTruncated();
    public string get_NextContinuationToken();
    public void set_NextContinuationToken(string value);
    internal bool IsSetNextToken();
}
public class Amazon.S3.Model.ListBucketInventoryConfigurationsRequest : AmazonWebServiceRequest {
    private string bucketName;
    private string token;
    private string expectedBucketOwner;
    public string BucketName { get; public set; }
    public string ContinuationToken { get; public set; }
    public string ExpectedBucketOwner { get; public set; }
    public string get_BucketName();
    public void set_BucketName(string value);
    internal bool IsSetBucketName();
    public string get_ContinuationToken();
    public void set_ContinuationToken(string value);
    internal bool IsSetContinuationToken();
    public string get_ExpectedBucketOwner();
    public void set_ExpectedBucketOwner(string value);
    internal bool IsSetExpectedBucketOwner();
}
public class Amazon.S3.Model.ListBucketInventoryConfigurationsResponse : AmazonWebServiceResponse {
    private string token;
    private List`1<InventoryConfiguration> inventoryConfigurationList;
    private Nullable`1<bool> isTruncated;
    private string nextToken;
    public string Token { get; public set; }
    public List`1<InventoryConfiguration> InventoryConfigurationList { get; public set; }
    public Nullable`1<bool> IsTruncated { get; public set; }
    public string NextToken { get; public set; }
    public string get_Token();
    public void set_Token(string value);
    internal bool IsSetToken();
    public List`1<InventoryConfiguration> get_InventoryConfigurationList();
    public void set_InventoryConfigurationList(List`1<InventoryConfiguration> value);
    public bool IsSetInventoryConfigurationList();
    public Nullable`1<bool> get_IsTruncated();
    public void set_IsTruncated(Nullable`1<bool> value);
    internal bool IsSetIsTruncated();
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
}
public class Amazon.S3.Model.ListBucketMetricsConfigurationsRequest : AmazonWebServiceRequest {
    private string bucketName;
    private string token;
    private string expectedBucketOwner;
    public string BucketName { get; public set; }
    public string ContinuationToken { get; public set; }
    public string ExpectedBucketOwner { get; public set; }
    public string get_BucketName();
    public void set_BucketName(string value);
    internal bool IsSetBucketName();
    public string get_ContinuationToken();
    public void set_ContinuationToken(string value);
    internal bool IsSetContinuationToken();
    public string get_ExpectedBucketOwner();
    public void set_ExpectedBucketOwner(string value);
    internal bool IsSetExpectedBucketOwner();
}
public class Amazon.S3.Model.ListBucketMetricsConfigurationsResponse : AmazonWebServiceResponse {
    private string token;
    private List`1<MetricsConfiguration> metricsConfigurationList;
    private Nullable`1<bool> isTruncated;
    private string nextToken;
    public string Token { get; public set; }
    public List`1<MetricsConfiguration> MetricsConfigurationList { get; public set; }
    public Nullable`1<bool> IsTruncated { get; public set; }
    public string NextToken { get; public set; }
    public string get_Token();
    public void set_Token(string value);
    internal bool IsSetToken();
    public List`1<MetricsConfiguration> get_MetricsConfigurationList();
    public void set_MetricsConfigurationList(List`1<MetricsConfiguration> value);
    public bool IsSetMetricsConfigurationList();
    public Nullable`1<bool> get_IsTruncated();
    public void set_IsTruncated(Nullable`1<bool> value);
    internal bool IsSetIsTruncated();
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
}
public class Amazon.S3.Model.ListBucketsRequest : AmazonWebServiceRequest {
}
public class Amazon.S3.Model.ListBucketsResponse : AmazonWebServiceResponse {
    private List`1<S3Bucket> buckets;
    private Owner owner;
    public List`1<S3Bucket> Buckets { get; public set; }
    public Owner Owner { get; public set; }
    public List`1<S3Bucket> get_Buckets();
    public void set_Buckets(List`1<S3Bucket> value);
    internal bool IsSetBuckets();
    public Owner get_Owner();
    public void set_Owner(Owner value);
    internal bool IsSetOwner();
}
public class Amazon.S3.Model.ListDirectoryBucketsRequest : AmazonWebServiceRequest {
    private string _continuationToken;
    private Nullable`1<int> _maxDirectoryBuckets;
    [AWSPropertyAttribute]
public string ContinuationToken { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> MaxDirectoryBuckets { get; public set; }
    public string get_ContinuationToken();
    public void set_ContinuationToken(string value);
    internal bool IsSetContinuationToken();
    public Nullable`1<int> get_MaxDirectoryBuckets();
    public void set_MaxDirectoryBuckets(Nullable`1<int> value);
    internal bool IsSetMaxDirectoryBuckets();
}
public class Amazon.S3.Model.ListDirectoryBucketsResponse : AmazonWebServiceResponse {
    private List`1<S3Bucket> _buckets;
    private string _continuationToken;
    public List`1<S3Bucket> Buckets { get; public set; }
    [AWSPropertyAttribute]
public string ContinuationToken { get; public set; }
    public List`1<S3Bucket> get_Buckets();
    public void set_Buckets(List`1<S3Bucket> value);
    internal bool IsSetBuckets();
    public string get_ContinuationToken();
    public void set_ContinuationToken(string value);
    internal bool IsSetContinuationToken();
}
internal class Amazon.S3.Model.ListMultipartUploadsPaginator : object {
    private IAmazonS3 _client;
    private ListMultipartUploadsRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<ListMultipartUploadsResponse> Responses { get; }
    public IPaginatedEnumerable`1<MultipartUpload> Uploads { get; }
    public IPaginatedEnumerable`1<string> CommonPrefixes { get; }
    internal ListMultipartUploadsPaginator(IAmazonS3 client, ListMultipartUploadsRequest request);
    public sealed virtual IPaginatedEnumerable`1<ListMultipartUploadsResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<MultipartUpload> get_Uploads();
    public sealed virtual IPaginatedEnumerable`1<string> get_CommonPrefixes();
    [AsyncIteratorStateMachineAttribute("Amazon.S3.Model.ListMultipartUploadsPaginator/<Amazon-Runtime-IPaginator<Amazon-S3-Model-ListMultipartUploadsResponse>-PaginateAsync>d__10")]
private sealed virtual override IAsyncEnumerable`1<ListMultipartUploadsResponse> Amazon.Runtime.IPaginator<Amazon.S3.Model.ListMultipartUploadsResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.S3.Model.ListMultipartUploadsRequest : AmazonWebServiceRequest {
    private string bucketName;
    private string delimiter;
    private EncodingType encoding;
    private string expectedBucketOwner;
    private string keyMarker;
    private Nullable`1<int> maxUploads;
    private string prefix;
    private RequestPayer _requestPayer;
    private string uploadIdMarker;
    public string BucketName { get; public set; }
    public string Delimiter { get; public set; }
    public EncodingType Encoding { get; public set; }
    public string ExpectedBucketOwner { get; public set; }
    public string KeyMarker { get; public set; }
    public Nullable`1<int> MaxUploads { get; public set; }
    public string Prefix { get; public set; }
    public RequestPayer RequestPayer { get; public set; }
    public string UploadIdMarker { get; public set; }
    public string get_BucketName();
    public void set_BucketName(string value);
    internal bool IsSetBucketName();
    public string get_Delimiter();
    public void set_Delimiter(string value);
    internal bool IsSetDelimiter();
    public EncodingType get_Encoding();
    public void set_Encoding(EncodingType value);
    internal bool IsSetEncoding();
    public string get_ExpectedBucketOwner();
    public void set_ExpectedBucketOwner(string value);
    internal bool IsSetExpectedBucketOwner();
    public string get_KeyMarker();
    public void set_KeyMarker(string value);
    internal bool IsSetKeyMarker();
    public Nullable`1<int> get_MaxUploads();
    public void set_MaxUploads(Nullable`1<int> value);
    internal bool IsSetMaxUploads();
    public string get_Prefix();
    public void set_Prefix(string value);
    internal bool IsSetPrefix();
    public RequestPayer get_RequestPayer();
    public void set_RequestPayer(RequestPayer value);
    internal bool IsSetRequestPayer();
    public string get_UploadIdMarker();
    public void set_UploadIdMarker(string value);
    internal bool IsSetUploadIdMarker();
}
public class Amazon.S3.Model.ListMultipartUploadsResponse : AmazonWebServiceResponse {
    private string _bucketName;
    private string keyMarker;
    private string uploadIdMarker;
    private string nextKeyMarker;
    private string nextUploadIdMarker;
    private Nullable`1<int> maxUploads;
    private RequestCharged _requestCharged;
    private Nullable`1<bool> isTruncated;
    private List`1<MultipartUpload> multipartUploads;
    private string delimiter;
    private List`1<string> commonPrefixes;
    private string prefix;
    public string BucketName { get; public set; }
    public string KeyMarker { get; public set; }
    public string UploadIdMarker { get; public set; }
    public string NextKeyMarker { get; public set; }
    public string NextUploadIdMarker { get; public set; }
    public Nullable`1<int> MaxUploads { get; public set; }
    public Nullable`1<bool> IsTruncated { get; public set; }
    public List`1<MultipartUpload> MultipartUploads { get; public set; }
    public string Prefix { get; public set; }
    public RequestCharged RequestCharged { get; public set; }
    public string Delimiter { get; public set; }
    public List`1<string> CommonPrefixes { get; public set; }
    public string get_BucketName();
    public void set_BucketName(string value);
    internal bool IsSetBucketName();
    public string get_KeyMarker();
    public void set_KeyMarker(string value);
    internal bool IsSetKeyMarker();
    public string get_UploadIdMarker();
    public void set_UploadIdMarker(string value);
    internal bool IsSetUploadIdMarker();
    public string get_NextKeyMarker();
    public void set_NextKeyMarker(string value);
    internal bool IsSetNextKeyMarker();
    public string get_NextUploadIdMarker();
    public void set_NextUploadIdMarker(string value);
    internal bool IsSetNextUploadIdMarker();
    public Nullable`1<int> get_MaxUploads();
    public void set_MaxUploads(Nullable`1<int> value);
    internal bool IsSetMaxUploads();
    public Nullable`1<bool> get_IsTruncated();
    public void set_IsTruncated(Nullable`1<bool> value);
    internal bool IsSetIsTruncated();
    public List`1<MultipartUpload> get_MultipartUploads();
    public void set_MultipartUploads(List`1<MultipartUpload> value);
    public string get_Prefix();
    public void set_Prefix(string value);
    public RequestCharged get_RequestCharged();
    public void set_RequestCharged(RequestCharged value);
    internal bool IsSetRequestCharged();
    public string get_Delimiter();
    public void set_Delimiter(string value);
    public List`1<string> get_CommonPrefixes();
    public void set_CommonPrefixes(List`1<string> value);
}
internal class Amazon.S3.Model.ListObjectsPaginator : object {
    private IAmazonS3 _client;
    private ListObjectsRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<ListObjectsResponse> Responses { get; }
    public IPaginatedEnumerable`1<S3Object> S3Objects { get; }
    public IPaginatedEnumerable`1<string> CommonPrefixes { get; }
    internal ListObjectsPaginator(IAmazonS3 client, ListObjectsRequest request);
    public sealed virtual IPaginatedEnumerable`1<ListObjectsResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<S3Object> get_S3Objects();
    public sealed virtual IPaginatedEnumerable`1<string> get_CommonPrefixes();
    [AsyncIteratorStateMachineAttribute("Amazon.S3.Model.ListObjectsPaginator/<Amazon-Runtime-IPaginator<Amazon-S3-Model-ListObjectsResponse>-PaginateAsync>d__10")]
private sealed virtual override IAsyncEnumerable`1<ListObjectsResponse> Amazon.Runtime.IPaginator<Amazon.S3.Model.ListObjectsResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.S3.Model.ListObjectsRequest : AmazonWebServiceRequest {
    private string bucketName;
    private string delimiter;
    private EncodingType encoding;
    private string expectedBucketOwner;
    private string marker;
    private Nullable`1<int> maxKeys;
    private List`1<string> _optionalObjectAttributes;
    private string prefix;
    private RequestPayer requestPayer;
    public string BucketName { get; public set; }
    public string Delimiter { get; public set; }
    public EncodingType Encoding { get; public set; }
    public string ExpectedBucketOwner { get; public set; }
    public string Marker { get; public set; }
    public Nullable`1<int> MaxKeys { get; public set; }
    public List`1<string> OptionalObjectAttributes { get; public set; }
    public string Prefix { get; public set; }
    public RequestPayer RequestPayer { get; public set; }
    public string get_BucketName();
    public void set_BucketName(string value);
    internal bool IsSetBucketName();
    public string get_Delimiter();
    public void set_Delimiter(string value);
    internal bool IsSetDelimiter();
    public EncodingType get_Encoding();
    public void set_Encoding(EncodingType value);
    internal bool IsSetEncoding();
    public string get_ExpectedBucketOwner();
    public void set_ExpectedBucketOwner(string value);
    internal bool IsSetExpectedBucketOwner();
    public string get_Marker();
    public void set_Marker(string value);
    internal bool IsSetMarker();
    public Nullable`1<int> get_MaxKeys();
    public void set_MaxKeys(Nullable`1<int> value);
    internal bool IsSetMaxKeys();
    public List`1<string> get_OptionalObjectAttributes();
    public void set_OptionalObjectAttributes(List`1<string> value);
    internal bool IsSetOptionalObjectAttributes();
    public string get_Prefix();
    public void set_Prefix(string value);
    internal bool IsSetPrefix();
    public RequestPayer get_RequestPayer();
    public void set_RequestPayer(RequestPayer value);
    internal bool IsSetRequestPayer();
}
public class Amazon.S3.Model.ListObjectsResponse : AmazonWebServiceResponse {
    private Nullable`1<bool> isTruncated;
    private string nextMarker;
    private List`1<S3Object> contents;
    private string name;
    private string prefix;
    private Nullable`1<int> maxKeys;
    private List`1<string> commonPrefixes;
    private string delimiter;
    private RequestCharged _requestCharged;
    public Nullable`1<bool> IsTruncated { get; public set; }
    public string NextMarker { get; public set; }
    public List`1<S3Object> S3Objects { get; public set; }
    public string Name { get; public set; }
    public string Prefix { get; public set; }
    public RequestCharged RequestCharged { get; public set; }
    public Nullable`1<int> MaxKeys { get; public set; }
    public List`1<string> CommonPrefixes { get; public set; }
    public string Delimiter { get; public set; }
    public Nullable`1<bool> get_IsTruncated();
    public void set_IsTruncated(Nullable`1<bool> value);
    internal bool IsSetIsTruncated();
    public string get_NextMarker();
    public void set_NextMarker(string value);
    internal bool IsSetNextMarker();
    public List`1<S3Object> get_S3Objects();
    public void set_S3Objects(List`1<S3Object> value);
    internal bool IsSetContents();
    public string get_Name();
    public void set_Name(string value);
    internal bool IsSetName();
    public string get_Prefix();
    public void set_Prefix(string value);
    internal bool IsSetPrefix();
    public RequestCharged get_RequestCharged();
    public void set_RequestCharged(RequestCharged value);
    internal bool IsSetRequestCharged();
    public Nullable`1<int> get_MaxKeys();
    public void set_MaxKeys(Nullable`1<int> value);
    internal bool IsSetMaxKeys();
    public List`1<string> get_CommonPrefixes();
    public void set_CommonPrefixes(List`1<string> value);
    internal bool IsSetCommonPrefixes();
    public string get_Delimiter();
    public void set_Delimiter(string value);
}
internal class Amazon.S3.Model.ListObjectsV2Paginator : object {
    private IAmazonS3 _client;
    private ListObjectsV2Request _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<ListObjectsV2Response> Responses { get; }
    public IPaginatedEnumerable`1<S3Object> S3Objects { get; }
    public IPaginatedEnumerable`1<string> CommonPrefixes { get; }
    internal ListObjectsV2Paginator(IAmazonS3 client, ListObjectsV2Request request);
    public sealed virtual IPaginatedEnumerable`1<ListObjectsV2Response> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<S3Object> get_S3Objects();
    public sealed virtual IPaginatedEnumerable`1<string> get_CommonPrefixes();
    [AsyncIteratorStateMachineAttribute("Amazon.S3.Model.ListObjectsV2Paginator/<Amazon-Runtime-IPaginator<Amazon-S3-Model-ListObjectsV2Response>-PaginateAsync>d__10")]
private sealed virtual override IAsyncEnumerable`1<ListObjectsV2Response> Amazon.Runtime.IPaginator<Amazon.S3.Model.ListObjectsV2Response>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.S3.Model.ListObjectsV2Request : AmazonWebServiceRequest {
    private string bucketName;
    private string continuationToken;
    private string delimiter;
    private EncodingType encoding;
    private string expectedBucketOwner;
    private Nullable`1<bool> fetchOwner;
    private Nullable`1<int> maxKeys;
    private List`1<string> _optionalObjectAttributes;
    private string prefix;
    private RequestPayer requestPayer;
    private string startAfter;
    public string BucketName { get; public set; }
    public string ContinuationToken { get; public set; }
    public string Delimiter { get; public set; }
    public EncodingType Encoding { get; public set; }
    public string ExpectedBucketOwner { get; public set; }
    public Nullable`1<bool> FetchOwner { get; public set; }
    public Nullable`1<int> MaxKeys { get; public set; }
    public List`1<string> OptionalObjectAttributes { get; public set; }
    public string Prefix { get; public set; }
    public RequestPayer RequestPayer { get; public set; }
    public string StartAfter { get; public set; }
    public string get_BucketName();
    public void set_BucketName(string value);
    internal bool IsSetBucketName();
    public string get_ContinuationToken();
    public void set_ContinuationToken(string value);
    internal bool IsSetContinuationToken();
    public string get_Delimiter();
    public void set_Delimiter(string value);
    internal bool IsSetDelimiter();
    public EncodingType get_Encoding();
    public void set_Encoding(EncodingType value);
    internal bool IsSetEncoding();
    public string get_ExpectedBucketOwner();
    public void set_ExpectedBucketOwner(string value);
    internal bool IsSetExpectedBucketOwner();
    public Nullable`1<bool> get_FetchOwner();
    public void set_FetchOwner(Nullable`1<bool> value);
    internal bool IsSetFetchOwner();
    public Nullable`1<int> get_MaxKeys();
    public void set_MaxKeys(Nullable`1<int> value);
    internal bool IsSetMaxKeys();
    public List`1<string> get_OptionalObjectAttributes();
    public void set_OptionalObjectAttributes(List`1<string> value);
    internal bool IsSetOptionalObjectAttributes();
    public string get_Prefix();
    public void set_Prefix(string value);
    internal bool IsSetPrefix();
    public RequestPayer get_RequestPayer();
    public void set_RequestPayer(RequestPayer value);
    internal bool IsSetRequestPayer();
    public string get_StartAfter();
    public void set_StartAfter(string value);
    internal bool IsSetStartAfter();
}
public class Amazon.S3.Model.ListObjectsV2Response : AmazonWebServiceResponse {
    private List`1<string> commonPrefixes;
    private List`1<S3Object> contents;
    private string continuationToken;
    private string delimiter;
    private EncodingType encoding;
    private Nullable`1<bool> isTruncated;
    private Nullable`1<int> keyCount;
    private Nullable`1<int> maxKeys;
    private string name;
    private string nextContinuationToken;
    private string prefix;
    private RequestCharged _requestCharged;
    private string startAfter;
    public List`1<string> CommonPrefixes { get; public set; }
    public List`1<S3Object> S3Objects { get; public set; }
    public string ContinuationToken { get; public set; }
    public string Delimiter { get; public set; }
    public EncodingType Encoding { get; public set; }
    public Nullable`1<bool> IsTruncated { get; public set; }
    public Nullable`1<int> KeyCount { get; public set; }
    public Nullable`1<int> MaxKeys { get; public set; }
    public string Name { get; public set; }
    public string NextContinuationToken { get; public set; }
    public string Prefix { get; public set; }
    public RequestCharged RequestCharged { get; public set; }
    public string StartAfter { get; public set; }
    public List`1<string> get_CommonPrefixes();
    public void set_CommonPrefixes(List`1<string> value);
    internal bool IsSetCommonPrefixes();
    public List`1<S3Object> get_S3Objects();
    public void set_S3Objects(List`1<S3Object> value);
    internal bool IsSetContents();
    public string get_ContinuationToken();
    public void set_ContinuationToken(string value);
    internal bool IsSetContinuationToken();
    public string get_Delimiter();
    public void set_Delimiter(string value);
    public EncodingType get_Encoding();
    public void set_Encoding(EncodingType value);
    internal bool IsSetEncoding();
    public Nullable`1<bool> get_IsTruncated();
    public void set_IsTruncated(Nullable`1<bool> value);
    internal bool IsSetIsTruncated();
    public Nullable`1<int> get_KeyCount();
    public void set_KeyCount(Nullable`1<int> value);
    internal bool IsSetKeyCount();
    public Nullable`1<int> get_MaxKeys();
    public void set_MaxKeys(Nullable`1<int> value);
    internal bool IsSetMaxKeys();
    public string get_Name();
    public void set_Name(string value);
    internal bool IsSetName();
    public string get_NextContinuationToken();
    public void set_NextContinuationToken(string value);
    internal bool IsSetNextContinuationToken();
    public string get_Prefix();
    public void set_Prefix(string value);
    internal bool IsSetPrefix();
    public RequestCharged get_RequestCharged();
    public void set_RequestCharged(RequestCharged value);
    internal bool IsSetRequestCharged();
    public string get_StartAfter();
    public void set_StartAfter(string value);
    internal bool IsSetStartAfter();
}
internal class Amazon.S3.Model.ListPartsPaginator : object {
    private IAmazonS3 _client;
    private ListPartsRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<ListPartsResponse> Responses { get; }
    public IPaginatedEnumerable`1<PartDetail> Parts { get; }
    internal ListPartsPaginator(IAmazonS3 client, ListPartsRequest request);
    public sealed virtual IPaginatedEnumerable`1<ListPartsResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<PartDetail> get_Parts();
    [AsyncIteratorStateMachineAttribute("Amazon.S3.Model.ListPartsPaginator/<Amazon-Runtime-IPaginator<Amazon-S3-Model-ListPartsResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<ListPartsResponse> Amazon.Runtime.IPaginator<Amazon.S3.Model.ListPartsResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.S3.Model.ListPartsRequest : AmazonWebServiceRequest {
    private string bucketName;
    private EncodingType encoding;
    private string expectedBucketOwner;
    private string key;
    private Nullable`1<int> maxParts;
    private string partNumberMarker;
    private RequestPayer requestPayer;
    private string _sseCustomerAlgorithm;
    private string _sseCustomerKey;
    private string _sseCustomerKeyMD5;
    private string uploadId;
    public string BucketName { get; public set; }
    public EncodingType Encoding { get; public set; }
    public string ExpectedBucketOwner { get; public set; }
    public string Key { get; public set; }
    public Nullable`1<int> MaxParts { get; public set; }
    public string PartNumberMarker { get; public set; }
    public RequestPayer RequestPayer { get; public set; }
    public string SSECustomerAlgorithm { get; public set; }
    public string SSECustomerKey { get; public set; }
    public string SSECustomerKeyMD5 { get; public set; }
    public string UploadId { get; public set; }
    public string get_BucketName();
    public void set_BucketName(string value);
    internal bool IsSetBucketName();
    public EncodingType get_Encoding();
    public void set_Encoding(EncodingType value);
    internal bool IsSetEncoding();
    public string get_ExpectedBucketOwner();
    public void set_ExpectedBucketOwner(string value);
    internal bool IsSetExpectedBucketOwner();
    public string get_Key();
    public void set_Key(string value);
    internal bool IsSetKey();
    public Nullable`1<int> get_MaxParts();
    public void set_MaxParts(Nullable`1<int> value);
    internal bool IsSetMaxParts();
    public string get_PartNumberMarker();
    public void set_PartNumberMarker(string value);
    internal bool IsSetPartNumberMarker();
    public RequestPayer get_RequestPayer();
    public void set_RequestPayer(RequestPayer value);
    internal bool IsSetRequestPayer();
    public string get_SSECustomerAlgorithm();
    public void set_SSECustomerAlgorithm(string value);
    internal bool IsSetSSECustomerAlgorithm();
    public string get_SSECustomerKey();
    public void set_SSECustomerKey(string value);
    internal bool IsSetSSECustomerKey();
    public string get_SSECustomerKeyMD5();
    public void set_SSECustomerKeyMD5(string value);
    internal bool IsSetSSECustomerKeyMD5();
    public string get_UploadId();
    public void set_UploadId(string value);
    internal bool IsSetUploadId();
}
public class Amazon.S3.Model.ListPartsResponse : AmazonWebServiceResponse {
    private string bucketName;
    private ChecksumAlgorithm _checksumAlgorithm;
    private string key;
    private string uploadId;
    private Owner owner;
    private Initiator initiator;
    private S3StorageClass storageClass;
    private Nullable`1<int> partNumberMarker;
    private Nullable`1<int> nextPartNumberMarker;
    private Nullable`1<int> maxParts;
    private Nullable`1<bool> isTruncated;
    private List`1<PartDetail> parts;
    private Nullable`1<DateTime> abortDate;
    private string abortRuleId;
    private RequestCharged requestCharged;
    public string BucketName { get; public set; }
    public ChecksumAlgorithm ChecksumAlgorithm { get; public set; }
    public string Key { get; public set; }
    public string UploadId { get; public set; }
    public Nullable`1<int> PartNumberMarker { get; public set; }
    public Nullable`1<int> NextPartNumberMarker { get; public set; }
    public Nullable`1<int> MaxParts { get; public set; }
    public Nullable`1<bool> IsTruncated { get; public set; }
    public List`1<PartDetail> Parts { get; public set; }
    public Initiator Initiator { get; public set; }
    public Owner Owner { get; public set; }
    public string StorageClass { get; public set; }
    public Nullable`1<DateTime> AbortDate { get; public set; }
    public string AbortRuleId { get; public set; }
    public RequestCharged RequestCharged { get; public set; }
    public string get_BucketName();
    public void set_BucketName(string value);
    internal bool IsSetBucketName();
    public ChecksumAlgorithm get_ChecksumAlgorithm();
    public void set_ChecksumAlgorithm(ChecksumAlgorithm value);
    internal bool IsSetChecksumAlgorithm();
    public string get_Key();
    public void set_Key(string value);
    internal bool IsSetKey();
    public string get_UploadId();
    public void set_UploadId(string value);
    internal bool IsSetUploadId();
    public Nullable`1<int> get_PartNumberMarker();
    public void set_PartNumberMarker(Nullable`1<int> value);
    internal bool IsSetPartNumberMarker();
    public Nullable`1<int> get_NextPartNumberMarker();
    public void set_NextPartNumberMarker(Nullable`1<int> value);
    internal bool IsSetNextPartNumberMarker();
    public Nullable`1<int> get_MaxParts();
    public void set_MaxParts(Nullable`1<int> value);
    internal bool IsSetMaxParts();
    public Nullable`1<bool> get_IsTruncated();
    public void set_IsTruncated(Nullable`1<bool> value);
    internal bool IsSetIsTruncated();
    public List`1<PartDetail> get_Parts();
    public void set_Parts(List`1<PartDetail> value);
    internal bool IsSetParts();
    public Initiator get_Initiator();
    public void set_Initiator(Initiator value);
    internal bool IsSetInitiator();
    public Owner get_Owner();
    public void set_Owner(Owner value);
    internal bool IsSetOwner();
    public string get_StorageClass();
    public void set_StorageClass(string value);
    internal bool IsSetStorageClass();
    public Nullable`1<DateTime> get_AbortDate();
    public void set_AbortDate(Nullable`1<DateTime> value);
    internal bool IsSetAbortDate();
    public string get_AbortRuleId();
    public void set_AbortRuleId(string value);
    internal bool IsSetAbortRuleId();
    public RequestCharged get_RequestCharged();
    public void set_RequestCharged(RequestCharged value);
    internal bool IsSetRequestCharged();
}
internal class Amazon.S3.Model.ListVersionsPaginator : object {
    private IAmazonS3 _client;
    private ListVersionsRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<ListVersionsResponse> Responses { get; }
    public IPaginatedEnumerable`1<S3ObjectVersion> Versions { get; }
    public IPaginatedEnumerable`1<string> CommonPrefixes { get; }
    internal ListVersionsPaginator(IAmazonS3 client, ListVersionsRequest request);
    public sealed virtual IPaginatedEnumerable`1<ListVersionsResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<S3ObjectVersion> get_Versions();
    public sealed virtual IPaginatedEnumerable`1<string> get_CommonPrefixes();
    [AsyncIteratorStateMachineAttribute("Amazon.S3.Model.ListVersionsPaginator/<Amazon-Runtime-IPaginator<Amazon-S3-Model-ListVersionsResponse>-PaginateAsync>d__10")]
private sealed virtual override IAsyncEnumerable`1<ListVersionsResponse> Amazon.Runtime.IPaginator<Amazon.S3.Model.ListVersionsResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.S3.Model.ListVersionsRequest : AmazonWebServiceRequest {
    private string bucketName;
    private string delimiter;
    private string keyMarker;
    private Nullable`1<int> maxKeys;
    private string prefix;
    private List`1<string> _optionalObjectAttributes;
    private RequestPayer _requestPayer;
    private string versionIdMarker;
    private EncodingType encoding;
    private string expectedBucketOwner;
    public string BucketName { get; public set; }
    public string Delimiter { get; public set; }
    public string KeyMarker { get; public set; }
    public Nullable`1<int> MaxKeys { get; public set; }
    public List`1<string> OptionalObjectAttributes { get; public set; }
    public string Prefix { get; public set; }
    public RequestPayer RequestPayer { get; public set; }
    public string VersionIdMarker { get; public set; }
    public EncodingType Encoding { get; public set; }
    public string ExpectedBucketOwner { get; public set; }
    public string get_BucketName();
    public void set_BucketName(string value);
    internal bool IsSetBucketName();
    public string get_Delimiter();
    public void set_Delimiter(string value);
    internal bool IsSetDelimiter();
    public string get_KeyMarker();
    public void set_KeyMarker(string value);
    internal bool IsSetKeyMarker();
    public Nullable`1<int> get_MaxKeys();
    public void set_MaxKeys(Nullable`1<int> value);
    internal bool IsSetMaxKeys();
    public List`1<string> get_OptionalObjectAttributes();
    public void set_OptionalObjectAttributes(List`1<string> value);
    internal bool IsSetOptionalObjectAttributes();
    public string get_Prefix();
    public void set_Prefix(string value);
    internal bool IsSetPrefix();
    public RequestPayer get_RequestPayer();
    public void set_RequestPayer(RequestPayer value);
    internal bool IsSetRequestPayer();
    public string get_VersionIdMarker();
    public void set_VersionIdMarker(string value);
    internal bool IsSetVersionIdMarker();
    public EncodingType get_Encoding();
    public void set_Encoding(EncodingType value);
    internal bool IsSetEncoding();
    public string get_ExpectedBucketOwner();
    public void set_ExpectedBucketOwner(string value);
    internal bool IsSetExpectedBucketOwner();
}
public class Amazon.S3.Model.ListVersionsResponse : AmazonWebServiceResponse {
    private Nullable`1<bool> isTruncated;
    private string keyMarker;
    private string versionIdMarker;
    private string nextKeyMarker;
    private string nextVersionIdMarker;
    private List`1<S3ObjectVersion> versions;
    private string name;
    private string prefix;
    private Nullable`1<int> maxKeys;
    private List`1<string> commonPrefixes;
    private string delimiter;
    private RequestCharged _requestCharged;
    public Nullable`1<bool> IsTruncated { get; public set; }
    public string KeyMarker { get; public set; }
    public string VersionIdMarker { get; public set; }
    public string NextKeyMarker { get; public set; }
    public string NextVersionIdMarker { get; public set; }
    public List`1<S3ObjectVersion> Versions { get; public set; }
    public string Name { get; public set; }
    public string Prefix { get; public set; }
    public RequestCharged RequestCharged { get; public set; }
    public Nullable`1<int> MaxKeys { get; public set; }
    public List`1<string> CommonPrefixes { get; public set; }
    public string Delimiter { get; public set; }
    public Nullable`1<bool> get_IsTruncated();
    public void set_IsTruncated(Nullable`1<bool> value);
    internal bool IsSetIsTruncated();
    public string get_KeyMarker();
    public void set_KeyMarker(string value);
    internal bool IsSetKeyMarker();
    public string get_VersionIdMarker();
    public void set_VersionIdMarker(string value);
    internal bool IsSetVersionIdMarker();
    public string get_NextKeyMarker();
    public void set_NextKeyMarker(string value);
    internal bool IsSetNextKeyMarker();
    public string get_NextVersionIdMarker();
    public void set_NextVersionIdMarker(string value);
    internal bool IsSetNextVersionIdMarker();
    public List`1<S3ObjectVersion> get_Versions();
    public void set_Versions(List`1<S3ObjectVersion> value);
    internal bool IsSetVersions();
    public string get_Name();
    public void set_Name(string value);
    internal bool IsSetName();
    public string get_Prefix();
    public void set_Prefix(string value);
    internal bool IsSetPrefix();
    public RequestCharged get_RequestCharged();
    public void set_RequestCharged(RequestCharged value);
    internal bool IsSetRequestCharged();
    public Nullable`1<int> get_MaxKeys();
    public void set_MaxKeys(Nullable`1<int> value);
    internal bool IsSetMaxKeys();
    public List`1<string> get_CommonPrefixes();
    public void set_CommonPrefixes(List`1<string> value);
    internal bool IsSetCommonPrefixes();
    public string get_Delimiter();
    public void set_Delimiter(string value);
}
public class Amazon.S3.Model.LocationInfo : object {
    private string _name;
    private LocationType _type;
    public string Name { get; public set; }
    public LocationType Type { get; public set; }
    public string get_Name();
    public void set_Name(string value);
    internal bool IsSetName();
    public LocationType get_Type();
    public void set_Type(LocationType value);
    internal bool IsSetType();
}
[DefaultMemberAttribute("Item")]
public class Amazon.S3.Model.MetadataCollection : object {
    internal static string MetaDataHeaderPrefix;
    private IDictionary`2<string, string> values;
    public string Item { get; public set; }
    public int Count { get; }
    public ICollection`1<string> Keys { get; }
    public string get_Item(string name);
    public void set_Item(string name, string value);
    public void Add(string name, string value);
    public void Clear();
    public int get_Count();
    public ICollection`1<string> get_Keys();
    internal void Marshall(string memberName, XmlWriter xmlWriter);
}
public class Amazon.S3.Model.MetadataEntry : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public string Name { get; public set; }
    public string Value { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    internal bool IsSetName();
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
    internal bool IsSetValue();
    internal void Marshall(string memberName, XmlWriter xmlWriter);
}
public class Amazon.S3.Model.Metrics : object {
    private MetricsStatus status;
    private ReplicationTimeValue eventThreshold;
    public MetricsStatus Status { get; public set; }
    public ReplicationTimeValue EventThreshold { get; public set; }
    public MetricsStatus get_Status();
    public void set_Status(MetricsStatus value);
    public ReplicationTimeValue get_EventThreshold();
    public void set_EventThreshold(ReplicationTimeValue value);
    internal bool IsSetStatus();
    internal bool IsSetEventThreshold();
}
public class Amazon.S3.Model.MetricsAccessPointArnPredicate : MetricsFilterPredicate {
    private string _accessPointArn;
    public string AccessPointArn { get; public set; }
    public MetricsAccessPointArnPredicate(string accessPointArn);
    public string get_AccessPointArn();
    public void set_AccessPointArn(string value);
    internal bool IsSetAccessPointArn();
    internal virtual void Accept(IMetricsPredicateVisitor metricsPredicateVisitor);
}
public class Amazon.S3.Model.MetricsAndOperator : MetricsNAryOperator {
    public MetricsAndOperator(List`1<MetricsFilterPredicate> operands);
    internal virtual void Accept(IMetricsPredicateVisitor metricsPredicateVisitor);
}
public class Amazon.S3.Model.MetricsConfiguration : object {
    private MetricsFilter metricsFilter;
    private string metricsId;
    public MetricsFilter MetricsFilter { get; public set; }
    public string MetricsId { get; public set; }
    public MetricsFilter get_MetricsFilter();
    public void set_MetricsFilter(MetricsFilter value);
    internal bool IsSetMetricsFilter();
    public string get_MetricsId();
    public void set_MetricsId(string value);
    internal bool IsSetMetricsId();
}
public class Amazon.S3.Model.MetricsFilter : object {
    private MetricsFilterPredicate metricsFilterPredicate;
    public MetricsFilterPredicate MetricsFilterPredicate { get; public set; }
    public MetricsFilterPredicate get_MetricsFilterPredicate();
    public void set_MetricsFilterPredicate(MetricsFilterPredicate value);
}
public abstract class Amazon.S3.Model.MetricsFilterPredicate : object {
    internal abstract virtual void Accept(IMetricsPredicateVisitor metricsPredicateVisitor);
}
public abstract class Amazon.S3.Model.MetricsNAryOperator : MetricsFilterPredicate {
    private List`1<MetricsFilterPredicate> operands;
    public List`1<MetricsFilterPredicate> Operands { get; }
    protected MetricsNAryOperator(List`1<MetricsFilterPredicate> operands);
    public List`1<MetricsFilterPredicate> get_Operands();
}
public class Amazon.S3.Model.MetricsPrefixPredicate : MetricsFilterPredicate {
    private string prefix;
    public string Prefix { get; }
    public MetricsPrefixPredicate(string prefix);
    public string get_Prefix();
    internal virtual void Accept(IMetricsPredicateVisitor metricsPredicateVisitor);
}
public class Amazon.S3.Model.MetricsTagPredicate : MetricsFilterPredicate {
    private Tag tag;
    public Tag Tag { get; }
    public MetricsTagPredicate(Tag tag);
    public Tag get_Tag();
    internal virtual void Accept(IMetricsPredicateVisitor metricsPredicateVisitor);
}
public class Amazon.S3.Model.MfaCodes : object {
    [CompilerGeneratedAttribute]
private string <SerialNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AuthenticationValue>k__BackingField;
    public string SerialNumber { get; public set; }
    public string AuthenticationValue { get; public set; }
    public string FormattedMfaCodes { get; }
    [CompilerGeneratedAttribute]
public string get_SerialNumber();
    [CompilerGeneratedAttribute]
public void set_SerialNumber(string value);
    [CompilerGeneratedAttribute]
public string get_AuthenticationValue();
    [CompilerGeneratedAttribute]
public void set_AuthenticationValue(string value);
    public string get_FormattedMfaCodes();
}
public class Amazon.S3.Model.MultipartUpload : object {
    private ChecksumAlgorithm _checksumAlgorithm;
    private string key;
    private string uploadId;
    private Owner owner;
    private Initiator initiator;
    private Nullable`1<DateTime> initiated;
    private S3StorageClass storageClass;
    public ChecksumAlgorithm ChecksumAlgorithm { get; public set; }
    public Nullable`1<DateTime> Initiated { get; public set; }
    public Initiator Initiator { get; public set; }
    public string Key { get; public set; }
    public Owner Owner { get; public set; }
    public S3StorageClass StorageClass { get; public set; }
    public string UploadId { get; public set; }
    public ChecksumAlgorithm get_ChecksumAlgorithm();
    public void set_ChecksumAlgorithm(ChecksumAlgorithm value);
    internal bool IsSetChecksumAlgorithm();
    public Nullable`1<DateTime> get_Initiated();
    public void set_Initiated(Nullable`1<DateTime> value);
    internal bool IsSetInitiated();
    public Initiator get_Initiator();
    public void set_Initiator(Initiator value);
    internal bool IsSetInitiator();
    public string get_Key();
    public void set_Key(string value);
    internal bool IsSetKey();
    public Owner get_Owner();
    public void set_Owner(Owner value);
    internal bool IsSetOwner();
    public S3StorageClass get_StorageClass();
    public void set_StorageClass(S3StorageClass value);
    internal bool IsSetStorageClass();
    public string get_UploadId();
    public void set_UploadId(string value);
    internal bool IsSetUploadId();
}
public class Amazon.S3.Model.NoSuchAccesspointException : AmazonS3Exception {
    public NoSuchAccesspointException(string message);
    public NoSuchAccesspointException(string message, Exception innerException);
    public NoSuchAccesspointException(Exception innerException);
    public NoSuchAccesspointException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public NoSuchAccesspointException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.S3.Model.NoSuchBucketException : AmazonS3Exception {
    public NoSuchBucketException(string message);
    public NoSuchBucketException(string message, Exception innerException);
    public NoSuchBucketException(Exception innerException);
    public NoSuchBucketException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public NoSuchBucketException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public abstract class Amazon.S3.Model.NotificationConfiguration : object {
    private List`1<EventType> _events;
    private Filter filter;
    public List`1<EventType> Events { get; public set; }
    public Filter Filter { get; public set; }
    public List`1<EventType> get_Events();
    public void set_Events(List`1<EventType> value);
    internal bool IsSetEvents();
    public Filter get_Filter();
    public void set_Filter(Filter value);
    internal bool IsSetFilter();
}
public class Amazon.S3.Model.ObjectLockConfiguration : object {
    private ObjectLockEnabled _objectLockEnabled;
    private ObjectLockRule _rule;
    public ObjectLockEnabled ObjectLockEnabled { get; public set; }
    public ObjectLockRule Rule { get; public set; }
    public ObjectLockEnabled get_ObjectLockEnabled();
    public void set_ObjectLockEnabled(ObjectLockEnabled value);
    internal bool IsSetObjectLockEnabled();
    public ObjectLockRule get_Rule();
    public void set_Rule(ObjectLockRule value);
    internal bool IsSetRule();
}
public class Amazon.S3.Model.ObjectLockLegalHold : object {
    private ObjectLockLegalHoldStatus _status;
    public ObjectLockLegalHoldStatus Status { get; public set; }
    public ObjectLockLegalHoldStatus get_Status();
    public void set_Status(ObjectLockLegalHoldStatus value);
    internal bool IsSetStatus();
}
public class Amazon.S3.Model.ObjectLockRetention : object {
    private ObjectLockRetentionMode _mode;
    private Nullable`1<DateTime> _retainUntilDate;
    public ObjectLockRetentionMode Mode { get; public set; }
    public Nullable`1<DateTime> RetainUntilDate { get; public set; }
    public ObjectLockRetentionMode get_Mode();
    public void set_Mode(ObjectLockRetentionMode value);
    internal bool IsSetMode();
    public Nullable`1<DateTime> get_RetainUntilDate();
    public void set_RetainUntilDate(Nullable`1<DateTime> value);
    internal bool IsSetRetainUntilDate();
}
public class Amazon.S3.Model.ObjectLockRule : object {
    private DefaultRetention _defaultRetention;
    public DefaultRetention DefaultRetention { get; public set; }
    public DefaultRetention get_DefaultRetention();
    public void set_DefaultRetention(DefaultRetention value);
    internal bool IsSetDefaultRetention();
}
public class Amazon.S3.Model.ObjectPart : object {
    private string _checksumCRC32;
    private string _checksumCRC32C;
    private string _checksumSHA1;
    private string _checksumSHA256;
    private Nullable`1<int> _partNumber;
    private Nullable`1<long> _size;
    public string ChecksumCRC32 { get; public set; }
    public string ChecksumCRC32C { get; public set; }
    public string ChecksumSHA1 { get; public set; }
    public string ChecksumSHA256 { get; public set; }
    public Nullable`1<int> PartNumber { get; public set; }
    public Nullable`1<long> Size { get; public set; }
    public string get_ChecksumCRC32();
    public void set_ChecksumCRC32(string value);
    internal bool IsSetChecksumCRC32();
    public string get_ChecksumCRC32C();
    public void set_ChecksumCRC32C(string value);
    internal bool IsSetChecksumCRC32C();
    public string get_ChecksumSHA1();
    public void set_ChecksumSHA1(string value);
    internal bool IsSetChecksumSHA1();
    public string get_ChecksumSHA256();
    public void set_ChecksumSHA256(string value);
    internal bool IsSetChecksumSHA256();
    public Nullable`1<int> get_PartNumber();
    public void set_PartNumber(Nullable`1<int> value);
    internal bool IsSetPartNumber();
    public Nullable`1<long> get_Size();
    public void set_Size(Nullable`1<long> value);
    internal bool IsSetSize();
}
public class Amazon.S3.Model.OutputLocation : object {
    [CompilerGeneratedAttribute]
private S3Location <S3>k__BackingField;
    public S3Location S3 { get; public set; }
    [CompilerGeneratedAttribute]
public S3Location get_S3();
    [CompilerGeneratedAttribute]
public void set_S3(S3Location value);
    internal bool IsSetS3();
    internal void Marshall(string propertyName, XmlWriter xmlWriter);
}
public class Amazon.S3.Model.OutputSerialization : object {
    [CompilerGeneratedAttribute]
private CSVOutput <CSV>k__BackingField;
    [CompilerGeneratedAttribute]
private JSONOutput <JSON>k__BackingField;
    public CSVOutput CSV { get; public set; }
    public JSONOutput JSON { get; public set; }
    [CompilerGeneratedAttribute]
public CSVOutput get_CSV();
    [CompilerGeneratedAttribute]
public void set_CSV(CSVOutput value);
    [CompilerGeneratedAttribute]
public JSONOutput get_JSON();
    [CompilerGeneratedAttribute]
public void set_JSON(JSONOutput value);
    internal bool IsSetCSV();
    internal bool IsSetJSON();
    internal void Marshall(string propertyName, XmlWriter xmlWriter);
}
public class Amazon.S3.Model.Owner : object {
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    public string DisplayName { get; public set; }
    public string Id { get; public set; }
    [CompilerGeneratedAttribute]
public void set_DisplayName(string value);
    [CompilerGeneratedAttribute]
public string get_DisplayName();
    internal bool IsSetDisplayName();
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    internal bool IsSetId();
}
public class Amazon.S3.Model.OwnershipControls : object {
    private List`1<OwnershipControlsRule> rules;
    public List`1<OwnershipControlsRule> Rules { get; public set; }
    public List`1<OwnershipControlsRule> get_Rules();
    public void set_Rules(List`1<OwnershipControlsRule> value);
}
public class Amazon.S3.Model.OwnershipControlsRule : object {
    private ObjectOwnership objectOwnership;
    public ObjectOwnership ObjectOwnership { get; public set; }
    public ObjectOwnership get_ObjectOwnership();
    public void set_ObjectOwnership(ObjectOwnership value);
    internal bool IsSetObjectOwnership();
}
[DefaultMemberAttribute("Item")]
public class Amazon.S3.Model.ParameterCollection : object {
    private IDictionary`2<string, string> values;
    public string Item { get; public set; }
    public int Count { get; }
    public ICollection`1<string> Keys { get; }
    public string get_Item(string name);
    public void set_Item(string name, string value);
    public void Add(string name, string value);
    public int get_Count();
    public ICollection`1<string> get_Keys();
}
public class Amazon.S3.Model.ParquetInput : object {
    internal void Marshall(string memberName, XmlWriter xmlWriter);
}
public class Amazon.S3.Model.PartDetail : PartETag {
    private Nullable`1<DateTime> lastModified;
    private Nullable`1<long> size;
    public DateTime LastModified { get; public set; }
    public Nullable`1<long> Size { get; public set; }
    public DateTime get_LastModified();
    public void set_LastModified(DateTime value);
    internal bool IsLastModified();
    public Nullable`1<long> get_Size();
    public void set_Size(Nullable`1<long> value);
    internal bool IsSize();
}
public class Amazon.S3.Model.PartETag : object {
    private string _checksumCRC32;
    private string _checksumCRC32C;
    private string _checksumSHA1;
    private string _checksumSHA256;
    private Nullable`1<int> partNumber;
    private string eTag;
    public Nullable`1<int> PartNumber { get; public set; }
    public string ETag { get; public set; }
    public string ChecksumCRC32 { get; public set; }
    public string ChecksumCRC32C { get; public set; }
    public string ChecksumSHA1 { get; public set; }
    public string ChecksumSHA256 { get; public set; }
    public PartETag(int partNumber, string eTag);
    public PartETag(UploadPartResponse uploadPartResponse);
    public PartETag(CopyPartResponse copyPartResponse);
    public sealed virtual int CompareTo(PartETag other);
    public Nullable`1<int> get_PartNumber();
    public void set_PartNumber(Nullable`1<int> value);
    internal bool IsSetPartNumber();
    public string get_ETag();
    public void set_ETag(string value);
    internal bool IsSetETag();
    public string get_ChecksumCRC32();
    public void set_ChecksumCRC32(string value);
    internal bool IsSetChecksumCRC32();
    public string get_ChecksumCRC32C();
    public void set_ChecksumCRC32C(string value);
    internal bool IsSetChecksumCRC32C();
    public string get_ChecksumSHA1();
    public void set_ChecksumSHA1(string value);
    internal bool IsSetChecksumSHA1();
    public string get_ChecksumSHA256();
    public void set_ChecksumSHA256(string value);
    internal bool IsSetChecksumSHA256();
}
public class Amazon.S3.Model.PartitionedPrefix : object {
    private PartitionDateSource _partitionDateSource;
    public PartitionDateSource PartitionDateSource { get; public set; }
    public PartitionDateSource get_PartitionDateSource();
    public void set_PartitionDateSource(PartitionDateSource value);
    internal bool IsSetPartitionDateSource();
}
public class Amazon.S3.Model.PolicyStatus : object {
    private Nullable`1<bool> isPublic;
    public Nullable`1<bool> IsPublic { get; public set; }
    public Nullable`1<bool> get_IsPublic();
    public void set_IsPublic(Nullable`1<bool> value);
    internal bool IsSetIsPublic();
}
public class Amazon.S3.Model.Progress : object {
    [CompilerGeneratedAttribute]
private long <BytesScanned>k__BackingField;
    [CompilerGeneratedAttribute]
private long <BytesProcessed>k__BackingField;
    [CompilerGeneratedAttribute]
private long <BytesReturned>k__BackingField;
    public long BytesScanned { get; public set; }
    public long BytesProcessed { get; public set; }
    public long BytesReturned { get; public set; }
    [CompilerGeneratedAttribute]
public long get_BytesScanned();
    [CompilerGeneratedAttribute]
public void set_BytesScanned(long value);
    [CompilerGeneratedAttribute]
public long get_BytesProcessed();
    [CompilerGeneratedAttribute]
public void set_BytesProcessed(long value);
    [CompilerGeneratedAttribute]
public long get_BytesReturned();
    [CompilerGeneratedAttribute]
public void set_BytesReturned(long value);
    internal static Progress Unmarshall(Byte[] payload);
}
public class Amazon.S3.Model.ProgressEvent : object {
    [CompilerGeneratedAttribute]
private Progress <Details>k__BackingField;
    public Progress Details { get; public set; }
    public ProgressEvent(IEventStreamMessage message);
    [CompilerGeneratedAttribute]
public Progress get_Details();
    [CompilerGeneratedAttribute]
public void set_Details(Progress value);
}
public class Amazon.S3.Model.PublicAccessBlockConfiguration : object {
    private Nullable`1<bool> blockPublicAcls;
    private Nullable`1<bool> ignorePublicAcls;
    private Nullable`1<bool> blockPublicPolicy;
    private Nullable`1<bool> restrictPublicBuckets;
    public Nullable`1<bool> BlockPublicAcls { get; public set; }
    public Nullable`1<bool> IgnorePublicAcls { get; public set; }
    public Nullable`1<bool> BlockPublicPolicy { get; public set; }
    public Nullable`1<bool> RestrictPublicBuckets { get; public set; }
    public Nullable`1<bool> get_BlockPublicAcls();
    public void set_BlockPublicAcls(Nullable`1<bool> value);
    internal bool IsSetBlockPublicAcls();
    public Nullable`1<bool> get_IgnorePublicAcls();
    public void set_IgnorePublicAcls(Nullable`1<bool> value);
    internal bool IsSetIgnorePublicAcls();
    public Nullable`1<bool> get_BlockPublicPolicy();
    public void set_BlockPublicPolicy(Nullable`1<bool> value);
    internal bool IsSetBlockPublicPolicy();
    public Nullable`1<bool> get_RestrictPublicBuckets();
    public void set_RestrictPublicBuckets(Nullable`1<bool> value);
    internal bool IsSetRestrictPublicBuckets();
}
public class Amazon.S3.Model.PutACLRequest : AmazonWebServiceRequest {
    private S3AccessControlList accessControlPolicy;
    private S3CannedACL cannedACL;
    private string bucket;
    private ChecksumAlgorithm _checksumAlgorithm;
    private string expectedBucketOwner;
    private string key;
    private string versionId;
    public S3AccessControlList AccessControlList { get; public set; }
    public S3CannedACL CannedACL { get; public set; }
    public string BucketName { get; public set; }
    public ChecksumAlgorithm ChecksumAlgorithm { get; public set; }
    public string ExpectedBucketOwner { get; public set; }
    public string Key { get; public set; }
    public string VersionId { get; public set; }
    public S3AccessControlList get_AccessControlList();
    public void set_AccessControlList(S3AccessControlList value);
    internal bool IsSetAccessControlPolicy();
    public S3CannedACL get_CannedACL();
    public void set_CannedACL(S3CannedACL value);
    internal bool IsSetCannedACL();
    public string get_BucketName();
    public void set_BucketName(string value);
    internal bool IsSetBucketName();
    public ChecksumAlgorithm get_ChecksumAlgorithm();
    public void set_ChecksumAlgorithm(ChecksumAlgorithm value);
    internal bool IsSetChecksumAlgorithm();
    public string get_ExpectedBucketOwner();
    public void set_ExpectedBucketOwner(string value);
    internal bool IsSetExpectedBucketOwner();
    public string get_Key();
    public void set_Key(string value);
    internal bool IsSetKey();
    public string get_VersionId();
    public void set_VersionId(string value);
    internal bool IsSetVersionId();
}
public class Amazon.S3.Model.PutACLResponse : AmazonWebServiceResponse {
}
public class Amazon.S3.Model.PutBucketAccelerateConfigurationRequest : AmazonWebServiceRequest {
    private string bucketName;
    private ChecksumAlgorithm _checksumAlgorithm;
    private AccelerateConfiguration accelerateConfiguration;
    private string expectedBucketOwner;
    public string BucketName { get; public set; }
    public ChecksumAlgorithm ChecksumAlgorithm { get; public set; }
    public AccelerateConfiguration AccelerateConfiguration { get; public set; }
    public string ExpectedBucketOwner { get; public set; }
    public string get_BucketName();
    public void set_BucketName(string value);
    internal bool IsSetBucketName();
    public ChecksumAlgorithm get_ChecksumAlgorithm();
    public void set_ChecksumAlgorithm(ChecksumAlgorithm value);
    internal bool IsSetChecksumAlgorithm();
    public AccelerateConfiguration get_AccelerateConfiguration();
    public void set_AccelerateConfiguration(AccelerateConfiguration value);
    internal bool IsSetAccelerateConfiguration();
    public string get_ExpectedBucketOwner();
    public void set_ExpectedBucketOwner(string value);
    internal bool IsSetExpectedBucketOwner();
}
public class Amazon.S3.Model.PutBucketAccelerateConfigurationResponse : AmazonWebServiceResponse {
}
public class Amazon.S3.Model.PutBucketAnalyticsConfigurationRequest : AmazonWebServiceRequest {
    private string bucketName;
    private string analyticsId;
    private AnalyticsConfiguration analyticsConfiguration;
    private string expectedBucketOwner;
    public string BucketName { get; public set; }
    public string AnalyticsId { get; public set; }
    public AnalyticsConfiguration AnalyticsConfiguration { get; public set; }
    public string ExpectedBucketOwner { get; public set; }
    public string get_BucketName();
    public void set_BucketName(string value);
    internal bool IsSetBucket();
    public string get_AnalyticsId();
    public void set_AnalyticsId(string value);
    internal bool IsSetAnalyticsId();
    public AnalyticsConfiguration get_AnalyticsConfiguration();
    public void set_AnalyticsConfiguration(AnalyticsConfiguration value);
    internal bool IsSetAnalyticsConfiguration();
    public string get_ExpectedBucketOwner();
    public void set_ExpectedBucketOwner(string value);
    internal bool IsSetExpectedBucketOwner();
}
public class Amazon.S3.Model.PutBucketAnalyticsConfigurationResponse : AmazonWebServiceResponse {
}
public class Amazon.S3.Model.PutBucketConfiguration : object {
    private BucketInfo _bucketInfo;
    private LocationInfo _location;
    public BucketInfo BucketInfo { get; public set; }
    public LocationInfo Location { get; public set; }
    public BucketInfo get_BucketInfo();
    public void set_BucketInfo(BucketInfo value);
    internal bool IsSetBucketInfo();
    public LocationInfo get_Location();
    public void set_Location(LocationInfo value);
    internal bool IsSetLocation();
}
public class Amazon.S3.Model.PutBucketEncryptionRequest : AmazonWebServiceRequest {
    private string bucketName;
    private ChecksumAlgorithm _checksumAlgorithm;
    private string contentMD5;
    private ServerSideEncryptionConfiguration serverSideEncryptionConfiguration;
    private string expectedBucketOwner;
    public string BucketName { get; public set; }
    public ChecksumAlgorithm ChecksumAlgorithm { get; public set; }
    public string ContentMD5 { get; public set; }
    public ServerSideEncryptionConfiguration ServerSideEncryptionConfiguration { get; public set; }
    public string ExpectedBucketOwner { get; public set; }
    public string get_BucketName();
    public void set_BucketName(string value);
    internal bool IsSetBucketName();
    public ChecksumAlgorithm get_ChecksumAlgorithm();
    public void set_ChecksumAlgorithm(ChecksumAlgorithm value);
    internal bool IsSetChecksumAlgorithm();
    public string get_ContentMD5();
    public void set_ContentMD5(string value);
    internal bool IsSetContentMD5();
    public ServerSideEncryptionConfiguration get_ServerSideEncryptionConfiguration();
    public void set_ServerSideEncryptionConfiguration(ServerSideEncryptionConfiguration value);
    internal bool IsSetServerSideEncryptionConfiguration();
    public string get_ExpectedBucketOwner();
    public void set_ExpectedBucketOwner(string value);
    internal bool IsSetExpectedBucketOwner();
}
public class Amazon.S3.Model.PutBucketIntelligentTieringConfigurationRequest : AmazonWebServiceRequest {
    private string bucketName;
    private string intelligentTieringId;
    private IntelligentTieringConfiguration intelligentTieringConfiguration;
    public string BucketName { get; public set; }
    public string IntelligentTieringId { get; public set; }
    public IntelligentTieringConfiguration IntelligentTieringConfiguration { get; public set; }
    public string get_BucketName();
    public void set_BucketName(string value);
    internal bool IsSetBucketName();
    public string get_IntelligentTieringId();
    public void set_IntelligentTieringId(string value);
    internal bool IsSetIntelligentTieringId();
    public IntelligentTieringConfiguration get_IntelligentTieringConfiguration();
    public void set_IntelligentTieringConfiguration(IntelligentTieringConfiguration value);
    internal bool IsIntelligentTieringConfiguration();
}
public class Amazon.S3.Model.PutBucketIntelligentTieringConfigurationResponse : AmazonWebServiceResponse {
}
public class Amazon.S3.Model.PutBucketInventoryConfigurationRequest : AmazonWebServiceRequest {
    private string bucketName;
    private string inventoryId;
    private InventoryConfiguration inventoryConfiguration;
    private string expectedBucketOwner;
    public string BucketName { get; public set; }
    public string InventoryId { get; public set; }
    public InventoryConfiguration InventoryConfiguration { get; public set; }
    public string ExpectedBucketOwner { get; public set; }
    public string get_BucketName();
    public void set_BucketName(string value);
    internal bool IsSetBucketName();
    public string get_InventoryId();
    public void set_InventoryId(string value);
    internal bool IsSetInventoryId();
    public InventoryConfiguration get_InventoryConfiguration();
    public void set_InventoryConfiguration(InventoryConfiguration value);
    internal bool IsSetInventoryConfiguration();
    public string get_ExpectedBucketOwner();
    public void set_ExpectedBucketOwner(string value);
    internal bool IsSetExpectedBucketOwner();
}
public class Amazon.S3.Model.PutBucketInventoryConfigurationResponse : AmazonWebServiceResponse {
}
public class Amazon.S3.Model.PutBucketLoggingRequest : AmazonWebServiceRequest {
    [CompilerGeneratedAttribute]
private string <BucketName>k__BackingField;
    private ChecksumAlgorithm _checksumAlgorithm;
    private string expectedBucketOwner;
    [CompilerGeneratedAttribute]
private S3BucketLoggingConfig <LoggingConfig>k__BackingField;
    public string BucketName { get; public set; }
    public ChecksumAlgorithm ChecksumAlgorithm { get; public set; }
    public S3BucketLoggingConfig LoggingConfig { get; public set; }
    public string ExpectedBucketOwner { get; public set; }
    [CompilerGeneratedAttribute]
public string get_BucketName();
    [CompilerGeneratedAttribute]
public void set_BucketName(string value);
    internal bool IsSetBucketName();
    public ChecksumAlgorithm get_ChecksumAlgorithm();
    public void set_ChecksumAlgorithm(ChecksumAlgorithm value);
    internal bool IsSetChecksumAlgorithm();
    [CompilerGeneratedAttribute]
public S3BucketLoggingConfig get_LoggingConfig();
    [CompilerGeneratedAttribute]
public void set_LoggingConfig(S3BucketLoggingConfig value);
    internal bool IsSetLoggingConfig();
    public string get_ExpectedBucketOwner();
    public void set_ExpectedBucketOwner(string value);
    internal bool IsSetExpectedBucketOwner();
}
public class Amazon.S3.Model.PutBucketLoggingResponse : AmazonWebServiceResponse {
}
public class Amazon.S3.Model.PutBucketMetricsConfigurationRequest : AmazonWebServiceRequest {
    private string bucketName;
    private string metricsId;
    private MetricsConfiguration metricsConfiguration;
    private string expectedBucketOwner;
    public string BucketName { get; public set; }
    public string MetricsId { get; public set; }
    public MetricsConfiguration MetricsConfiguration { get; public set; }
    public string ExpectedBucketOwner { get; public set; }
    public string get_BucketName();
    public void set_BucketName(string value);
    internal bool IsSetBucketName();
    public string get_MetricsId();
    public void set_MetricsId(string value);
    internal bool IsSetMetricsId();
    public MetricsConfiguration get_MetricsConfiguration();
    public void set_MetricsConfiguration(MetricsConfiguration value);
    internal bool IsSetMetricsConfiguration();
    public string get_ExpectedBucketOwner();
    public void set_ExpectedBucketOwner(string value);
    internal bool IsSetExpectedBucketOwner();
}
public class Amazon.S3.Model.PutBucketMetricsConfigurationResponse : AmazonWebServiceResponse {
}
public class Amazon.S3.Model.PutBucketNotificationRequest : AmazonWebServiceRequest {
    private ChecksumAlgorithm _checksumAlgorithm;
    private string expectedBucketOwner;
    private Nullable`1<bool> _skipDestinationValidation;
    private EventBridgeConfiguration _eventBridgeConfiguration;
    [CompilerGeneratedAttribute]
private string <BucketName>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<TopicConfiguration> <TopicConfigurations>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<QueueConfiguration> <QueueConfigurations>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<LambdaFunctionConfiguration> <LambdaFunctionConfigurations>k__BackingField;
    public string BucketName { get; public set; }
    public ChecksumAlgorithm ChecksumAlgorithm { get; public set; }
    public List`1<TopicConfiguration> TopicConfigurations { get; public set; }
    public List`1<QueueConfiguration> QueueConfigurations { get; public set; }
    public List`1<LambdaFunctionConfiguration> LambdaFunctionConfigurations { get; public set; }
    public string ExpectedBucketOwner { get; public set; }
    public Nullable`1<bool> SkipDestinationValidation { get; public set; }
    public EventBridgeConfiguration EventBridgeConfiguration { get; public set; }
    [CompilerGeneratedAttribute]
public string get_BucketName();
    [CompilerGeneratedAttribute]
public void set_BucketName(string value);
    internal bool IsSetBucketName();
    public ChecksumAlgorithm get_ChecksumAlgorithm();
    public void set_ChecksumAlgorithm(ChecksumAlgorithm value);
    internal bool IsSetChecksumAlgorithm();
    [CompilerGeneratedAttribute]
public List`1<TopicConfiguration> get_TopicConfigurations();
    [CompilerGeneratedAttribute]
public void set_TopicConfigurations(List`1<TopicConfiguration> value);
    internal bool IsSetTopicConfigurations();
    [CompilerGeneratedAttribute]
public List`1<QueueConfiguration> get_QueueConfigurations();
    [CompilerGeneratedAttribute]
public void set_QueueConfigurations(List`1<QueueConfiguration> value);
    internal bool IsSetQueueConfigurations();
    [CompilerGeneratedAttribute]
public List`1<LambdaFunctionConfiguration> get_LambdaFunctionConfigurations();
    [CompilerGeneratedAttribute]
public void set_LambdaFunctionConfigurations(List`1<LambdaFunctionConfiguration> value);
    internal bool IsSetLambdaFunctionConfigurations();
    public string get_ExpectedBucketOwner();
    public void set_ExpectedBucketOwner(string value);
    internal bool IsSetExpectedBucketOwner();
    public Nullable`1<bool> get_SkipDestinationValidation();
    public void set_SkipDestinationValidation(Nullable`1<bool> value);
    internal bool IsSetSkipDestinationValidation();
    public EventBridgeConfiguration get_EventBridgeConfiguration();
    public void set_EventBridgeConfiguration(EventBridgeConfiguration value);
    internal bool IsSetEventBridgeConfiguration();
}
public class Amazon.S3.Model.PutBucketNotificationResponse : AmazonWebServiceResponse {
}
public class Amazon.S3.Model.PutBucketOwnershipControlsRequest : AmazonWebServiceRequest {
    private string bucketName;
    private string expectedBucketOwner;
    private OwnershipControls ownershipControls;
    public string BucketName { get; public set; }
    public string ExpectedBucketOwner { get; public set; }
    public OwnershipControls OwnershipControls { get; public set; }
    public string get_BucketName();
    public void set_BucketName(string value);
    internal bool IsSetBucketName();
    public string get_ExpectedBucketOwner();
    public void set_ExpectedBucketOwner(string value);
    internal bool IsSetExpectedBucketOwner();
    public OwnershipControls get_OwnershipControls();
    public void set_OwnershipControls(OwnershipControls value);
}
public class Amazon.S3.Model.PutBucketOwnershipControlsResponse : AmazonWebServiceResponse {
}
public class Amazon.S3.Model.PutBucketPolicyRequest : AmazonWebServiceRequest {
    private ChecksumAlgorithm _checksumAlgorithm;
    private Nullable`1<bool> confirmRemoveSelfBucketAccess;
    private string expectedBucketOwner;
    [CompilerGeneratedAttribute]
private string <BucketName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContentMD5>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Policy>k__BackingField;
    public string BucketName { get; public set; }
    public ChecksumAlgorithm ChecksumAlgorithm { get; public set; }
    public string ContentMD5 { get; public set; }
    public string Policy { get; public set; }
    public Nullable`1<bool> ConfirmRemoveSelfBucketAccess { get; public set; }
    protected bool IncludeSHA256Header { get; }
    public string ExpectedBucketOwner { get; public set; }
    [CompilerGeneratedAttribute]
public string get_BucketName();
    [CompilerGeneratedAttribute]
public void set_BucketName(string value);
    internal bool IsSetBucket();
    public ChecksumAlgorithm get_ChecksumAlgorithm();
    public void set_ChecksumAlgorithm(ChecksumAlgorithm value);
    internal bool IsSetChecksumAlgorithm();
    [CompilerGeneratedAttribute]
public string get_ContentMD5();
    [CompilerGeneratedAttribute]
public void set_ContentMD5(string value);
    internal bool IsSetContentMD5();
    [CompilerGeneratedAttribute]
public string get_Policy();
    [CompilerGeneratedAttribute]
public void set_Policy(string value);
    internal bool IsSetPolicy();
    public Nullable`1<bool> get_ConfirmRemoveSelfBucketAccess();
    public void set_ConfirmRemoveSelfBucketAccess(Nullable`1<bool> value);
    internal bool IsSetConfirmRemoveSelfBucketAccess();
    protected virtual bool get_IncludeSHA256Header();
    public string get_ExpectedBucketOwner();
    public void set_ExpectedBucketOwner(string value);
    internal bool IsSetExpectedBucketOwner();
}
public class Amazon.S3.Model.PutBucketPolicyResponse : AmazonWebServiceResponse {
}
public class Amazon.S3.Model.PutBucketReplicationRequest : AmazonWebServiceRequest {
    private string bucketName;
    private ChecksumAlgorithm _checksumAlgorithm;
    private string expectedBucketOwner;
    private ReplicationConfiguration configuration;
    private string token;
    public string BucketName { get; public set; }
    public ChecksumAlgorithm ChecksumAlgorithm { get; public set; }
    public string ExpectedBucketOwner { get; public set; }
    public ReplicationConfiguration Configuration { get; public set; }
    public string Token { get; public set; }
    public string get_BucketName();
    public void set_BucketName(string value);
    internal bool IsSetBucketName();
    public ChecksumAlgorithm get_ChecksumAlgorithm();
    public void set_ChecksumAlgorithm(ChecksumAlgorithm value);
    internal bool IsSetChecksumAlgorithm();
    public string get_ExpectedBucketOwner();
    public void set_ExpectedBucketOwner(string value);
    internal bool IsSetExpectedBucketOwner();
    public ReplicationConfiguration get_Configuration();
    public void set_Configuration(ReplicationConfiguration value);
    internal bool IsSetConfiguration();
    public string get_Token();
    public void set_Token(string value);
    internal bool IsSetToken();
}
public class Amazon.S3.Model.PutBucketReplicationResponse : AmazonWebServiceResponse {
}
public class Amazon.S3.Model.PutBucketRequest : PutWithACLRequest {
    private string bucketName;
    private S3Region bucketRegion;
    private string bucketRegionName;
    private bool useClientRegion;
    private S3CannedACL cannedAcl;
    private Nullable`1<bool> _objectLockEnabledForBucket;
    private ObjectOwnership _objectOwnership;
    private PutBucketConfiguration _putBucketConfiguration;
    public S3CannedACL CannedACL { get; public set; }
    public bool UseClientRegion { get; public set; }
    public string BucketName { get; public set; }
    public S3Region BucketRegion { get; public set; }
    public string BucketRegionName { get; public set; }
    public PutBucketConfiguration PutBucketConfiguration { get; public set; }
    public Nullable`1<bool> ObjectLockEnabledForBucket { get; public set; }
    public ObjectOwnership ObjectOwnership { get; public set; }
    public S3CannedACL get_CannedACL();
    public void set_CannedACL(S3CannedACL value);
    internal bool IsSetCannedACL();
    public bool get_UseClientRegion();
    public void set_UseClientRegion(bool value);
    public string get_BucketName();
    public void set_BucketName(string value);
    internal bool IsSetBucketName();
    public S3Region get_BucketRegion();
    public void set_BucketRegion(S3Region value);
    internal bool IsSetBucketRegion();
    public string get_BucketRegionName();
    public void set_BucketRegionName(string value);
    public PutBucketConfiguration get_PutBucketConfiguration();
    public void set_PutBucketConfiguration(PutBucketConfiguration value);
    internal bool IsSetPutBucketConfiguration();
    internal bool IsSetBucketRegionName();
    public Nullable`1<bool> get_ObjectLockEnabledForBucket();
    public void set_ObjectLockEnabledForBucket(Nullable`1<bool> value);
    internal bool IsSetObjectLockEnabledForBucket();
    public ObjectOwnership get_ObjectOwnership();
    public void set_ObjectOwnership(ObjectOwnership value);
    internal bool IsSetObjectOwnership();
}
public class Amazon.S3.Model.PutBucketRequestPaymentRequest : AmazonWebServiceRequest {
    private string bucketName;
    private ChecksumAlgorithm _checksumAlgorithm;
    private RequestPaymentConfiguration requestPaymentConfiguration;
    private string expectedBucketOwner;
    public string BucketName { get; public set; }
    public ChecksumAlgorithm ChecksumAlgorithm { get; public set; }
    public RequestPaymentConfiguration RequestPaymentConfiguration { get; public set; }
    public string ExpectedBucketOwner { get; public set; }
    public string get_BucketName();
    public void set_BucketName(string value);
    internal bool IsSetBucketName();
    public ChecksumAlgorithm get_ChecksumAlgorithm();
    public void set_ChecksumAlgorithm(ChecksumAlgorithm value);
    internal bool IsSetChecksumAlgorithm();
    public RequestPaymentConfiguration get_RequestPaymentConfiguration();
    public void set_RequestPaymentConfiguration(RequestPaymentConfiguration value);
    internal bool IsSetRequestPaymentConfiguration();
    public string get_ExpectedBucketOwner();
    public void set_ExpectedBucketOwner(string value);
    internal bool IsSetExpectedBucketOwner();
}
public class Amazon.S3.Model.PutBucketRequestPaymentResponse : AmazonWebServiceResponse {
}
public class Amazon.S3.Model.PutBucketResponse : AmazonWebServiceResponse {
}
public class Amazon.S3.Model.PutBucketTaggingRequest : AmazonWebServiceRequest {
    private string bucketName;
    private ChecksumAlgorithm _checksumAlgorithm;
    private List`1<Tag> tagSet;
    private string expectedBucketOwner;
    public string BucketName { get; public set; }
    public ChecksumAlgorithm ChecksumAlgorithm { get; public set; }
    public List`1<Tag> TagSet { get; public set; }
    public string ExpectedBucketOwner { get; public set; }
    public string get_BucketName();
    public void set_BucketName(string value);
    internal bool IsSetBucketName();
    public ChecksumAlgorithm get_ChecksumAlgorithm();
    public void set_ChecksumAlgorithm(ChecksumAlgorithm value);
    internal bool IsSetChecksumAlgorithm();
    public List`1<Tag> get_TagSet();
    public void set_TagSet(List`1<Tag> value);
    internal bool IsSetTagSet();
    public string get_ExpectedBucketOwner();
    public void set_ExpectedBucketOwner(string value);
    internal bool IsSetExpectedBucketOwner();
}
public class Amazon.S3.Model.PutBucketTaggingResponse : AmazonWebServiceResponse {
}
public class Amazon.S3.Model.PutBucketVersioningRequest : AmazonWebServiceRequest {
    private string bucketName;
    private ChecksumAlgorithm _checksumAlgorithm;
    private MfaCodes mfaCodes;
    private S3BucketVersioningConfig config;
    private string expectedBucketOwner;
    public string BucketName { get; public set; }
    public ChecksumAlgorithm ChecksumAlgorithm { get; public set; }
    public MfaCodes MfaCodes { get; public set; }
    public S3BucketVersioningConfig VersioningConfig { get; public set; }
    public string ExpectedBucketOwner { get; public set; }
    public string get_BucketName();
    public void set_BucketName(string value);
    internal bool IsSetBucketName();
    public ChecksumAlgorithm get_ChecksumAlgorithm();
    public void set_ChecksumAlgorithm(ChecksumAlgorithm value);
    internal bool IsSetChecksumAlgorithm();
    public MfaCodes get_MfaCodes();
    public void set_MfaCodes(MfaCodes value);
    internal bool IsSetMfaCodes();
    public S3BucketVersioningConfig get_VersioningConfig();
    public void set_VersioningConfig(S3BucketVersioningConfig value);
    internal bool IsSetVersioningConfiguration();
    public string get_ExpectedBucketOwner();
    public void set_ExpectedBucketOwner(string value);
    internal bool IsSetExpectedBucketOwner();
}
public class Amazon.S3.Model.PutBucketVersioningResponse : AmazonWebServiceResponse {
}
public class Amazon.S3.Model.PutBucketWebsiteRequest : AmazonWebServiceRequest {
    private string bucketName;
    private ChecksumAlgorithm _checksumAlgorithm;
    private WebsiteConfiguration websiteConfiguration;
    private string expectedBucketOwner;
    public string BucketName { get; public set; }
    public ChecksumAlgorithm ChecksumAlgorithm { get; public set; }
    public WebsiteConfiguration WebsiteConfiguration { get; public set; }
    public string ExpectedBucketOwner { get; public set; }
    public string get_BucketName();
    public void set_BucketName(string value);
    internal bool IsSetBucketName();
    public ChecksumAlgorithm get_ChecksumAlgorithm();
    public void set_ChecksumAlgorithm(ChecksumAlgorithm value);
    internal bool IsSetChecksumAlgorithm();
    public WebsiteConfiguration get_WebsiteConfiguration();
    public void set_WebsiteConfiguration(WebsiteConfiguration value);
    internal bool IsSetWebsiteConfiguration();
    public string get_ExpectedBucketOwner();
    public void set_ExpectedBucketOwner(string value);
    internal bool IsSetExpectedBucketOwner();
}
public class Amazon.S3.Model.PutBucketWebsiteResponse : AmazonWebServiceResponse {
}
public class Amazon.S3.Model.PutCORSConfigurationRequest : AmazonWebServiceRequest {
    private string bucketName;
    private ChecksumAlgorithm _checksumAlgorithm;
    private CORSConfiguration configuration;
    private string expectedBucketOwner;
    public string BucketName { get; public set; }
    public ChecksumAlgorithm ChecksumAlgorithm { get; public set; }
    public CORSConfiguration Configuration { get; public set; }
    public string ExpectedBucketOwner { get; public set; }
    public string get_BucketName();
    public void set_BucketName(string value);
    internal bool IsSetBucketName();
    public ChecksumAlgorithm get_ChecksumAlgorithm();
    public void set_ChecksumAlgorithm(ChecksumAlgorithm value);
    internal bool IsSetChecksumAlgorithm();
    public CORSConfiguration get_Configuration();
    public void set_Configuration(CORSConfiguration value);
    internal bool IsSetConfiguration();
    public string get_ExpectedBucketOwner();
    public void set_ExpectedBucketOwner(string value);
    internal bool IsSetExpectedBucketOwner();
}
public class Amazon.S3.Model.PutCORSConfigurationResponse : AmazonWebServiceResponse {
}
public class Amazon.S3.Model.PutLifecycleConfigurationRequest : AmazonWebServiceRequest {
    private string bucketName;
    private ChecksumAlgorithm _checksumAlgorithm;
    private LifecycleConfiguration lifecycleConfiguration;
    private string expectedBucketOwner;
    public string BucketName { get; public set; }
    public ChecksumAlgorithm ChecksumAlgorithm { get; public set; }
    public LifecycleConfiguration Configuration { get; public set; }
    public string ExpectedBucketOwner { get; public set; }
    public string get_BucketName();
    public void set_BucketName(string value);
    internal bool IsSetBucketName();
    public ChecksumAlgorithm get_ChecksumAlgorithm();
    public void set_ChecksumAlgorithm(ChecksumAlgorithm value);
    internal bool IsSetChecksumAlgorithm();
    public LifecycleConfiguration get_Configuration();
    public void set_Configuration(LifecycleConfiguration value);
    internal bool IsSetConfiguration();
    public string get_ExpectedBucketOwner();
    public void set_ExpectedBucketOwner(string value);
    internal bool IsSetExpectedBucketOwner();
}
public class Amazon.S3.Model.PutLifecycleConfigurationResponse : AmazonWebServiceResponse {
}
public class Amazon.S3.Model.PutObjectLegalHoldRequest : AmazonWebServiceRequest {
    private string _bucketName;
    private ChecksumAlgorithm _checksumAlgorithm;
    private string _contentMD5;
    private string expectedBucketOwner;
    private string _key;
    private ObjectLockLegalHold _legalHold;
    private RequestPayer _requestPayer;
    private string _versionId;
    public string BucketName { get; public set; }
    public ChecksumAlgorithm ChecksumAlgorithm { get; public set; }
    public string ContentMD5 { get; public set; }
    public string ExpectedBucketOwner { get; public set; }
    public string Key { get; public set; }
    public ObjectLockLegalHold LegalHold { get; public set; }
    public RequestPayer RequestPayer { get; public set; }
    public string VersionId { get; public set; }
    public string get_BucketName();
    public void set_BucketName(string value);
    internal bool IsSetBucketName();
    public ChecksumAlgorithm get_ChecksumAlgorithm();
    public void set_ChecksumAlgorithm(ChecksumAlgorithm value);
    internal bool IsSetChecksumAlgorithm();
    public string get_ContentMD5();
    public void set_ContentMD5(string value);
    internal bool IsSetContentMD5();
    public string get_ExpectedBucketOwner();
    public void set_ExpectedBucketOwner(string value);
    internal bool IsSetExpectedBucketOwner();
    public string get_Key();
    public void set_Key(string value);
    internal bool IsSetKey();
    public ObjectLockLegalHold get_LegalHold();
    public void set_LegalHold(ObjectLockLegalHold value);
    internal bool IsSetLegalHold();
    public RequestPayer get_RequestPayer();
    public void set_RequestPayer(RequestPayer value);
    internal bool IsSetRequestPayer();
    public string get_VersionId();
    public void set_VersionId(string value);
    internal bool IsSetVersionId();
}
public class Amazon.S3.Model.PutObjectLegalHoldResponse : AmazonWebServiceResponse {
    private RequestCharged _requestCharged;
    public RequestCharged RequestCharged { get; public set; }
    public RequestCharged get_RequestCharged();
    public void set_RequestCharged(RequestCharged value);
    internal bool IsSetRequestCharged();
}
public class Amazon.S3.Model.PutObjectLockConfigurationRequest : AmazonWebServiceRequest {
    private string _bucketName;
    private ChecksumAlgorithm _checksumAlgorithm;
    private string _contentMD5;
    private ObjectLockConfiguration _objectLockConfiguration;
    private RequestPayer _requestPayer;
    private string _token;
    private string expectedBucketOwner;
    public string BucketName { get; public set; }
    public ChecksumAlgorithm ChecksumAlgorithm { get; public set; }
    public string ContentMD5 { get; public set; }
    public ObjectLockConfiguration ObjectLockConfiguration { get; public set; }
    public RequestPayer RequestPayer { get; public set; }
    public string Token { get; public set; }
    public string ExpectedBucketOwner { get; public set; }
    public string get_BucketName();
    public void set_BucketName(string value);
    internal bool IsSetBucketName();
    public ChecksumAlgorithm get_ChecksumAlgorithm();
    public void set_ChecksumAlgorithm(ChecksumAlgorithm value);
    internal bool IsSetChecksumAlgorithm();
    public string get_ContentMD5();
    public void set_ContentMD5(string value);
    internal bool IsSetContentMD5();
    public ObjectLockConfiguration get_ObjectLockConfiguration();
    public void set_ObjectLockConfiguration(ObjectLockConfiguration value);
    internal bool IsSetObjectLockConfiguration();
    public RequestPayer get_RequestPayer();
    public void set_RequestPayer(RequestPayer value);
    internal bool IsSetRequestPayer();
    public string get_Token();
    public void set_Token(string value);
    internal bool IsSetToken();
    public string get_ExpectedBucketOwner();
    public void set_ExpectedBucketOwner(string value);
    internal bool IsSetExpectedBucketOwner();
}
public class Amazon.S3.Model.PutObjectLockConfigurationResponse : AmazonWebServiceResponse {
    private RequestCharged _requestCharged;
    public RequestCharged RequestCharged { get; public set; }
    public RequestCharged get_RequestCharged();
    public void set_RequestCharged(RequestCharged value);
    internal bool IsSetRequestCharged();
}
public class Amazon.S3.Model.PutObjectRequest : PutWithACLRequest {
    private S3CannedACL cannedACL;
    private Nullable`1<bool> bucketKeyEnabled;
    private string bucketName;
    private string contentBody;
    private string expectedBucketOwner;
    private string key;
    private Stream inputStream;
    private string filePath;
    private bool autoCloseStream;
    private bool autoResetStreamPosition;
    private bool useChunkEncoding;
    private HeadersCollection headersCollection;
    private MetadataCollection metadataCollection;
    private string md5Digest;
    private ObjectLockLegalHoldStatus objectLockLegalHoldStatus;
    private ObjectLockMode objectLockMode;
    private Nullable`1<DateTime> objectLockRetainUntilDate;
    private RequestPayer requestPayer;
    private ServerSideEncryptionMethod serverSideEncryption;
    private ServerSideEncryptionCustomerMethod serverSideCustomerEncryption;
    private string serverSideEncryptionCustomerProvidedKey;
    private string serverSideEncryptionCustomerProvidedKeyMD5;
    private string serverSideEncryptionKeyManagementServiceKeyId;
    private string serverSideEncryptionKeyManagementServiceEncryptionContext;
    private S3StorageClass storageClass;
    private List`1<Tag> tagset;
    private string websiteRedirectLocation;
    private bool calculateContentMD5Header;
    private ChecksumAlgorithm _checksumAlgorithm;
    private string _checksumCRC32;
    private string _checksumCRC32C;
    private string _checksumSHA1;
    private string _checksumSHA256;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <DisableDefaultChecksumValidation>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <DisablePayloadSigning>k__BackingField;
    protected bool IncludeSHA256Header { get; }
    protected bool Expect100Continue { get; }
    public S3CannedACL CannedACL { get; public set; }
    public Nullable`1<bool> BucketKeyEnabled { get; public set; }
    public string BucketName { get; public set; }
    public string MD5Digest { get; public set; }
    public string ContentType { get; public set; }
    public string ExpectedBucketOwner { get; public set; }
    public string Key { get; public set; }
    public MetadataCollection Metadata { get; internal set; }
    public ObjectLockLegalHoldStatus ObjectLockLegalHoldStatus { get; public set; }
    public ObjectLockMode ObjectLockMode { get; public set; }
    public Nullable`1<DateTime> ObjectLockRetainUntilDate { get; public set; }
    public RequestPayer RequestPayer { get; public set; }
    public ServerSideEncryptionMethod ServerSideEncryptionMethod { get; public set; }
    public ServerSideEncryptionCustomerMethod ServerSideEncryptionCustomerMethod { get; public set; }
    [AWSPropertyAttribute]
public string ServerSideEncryptionCustomerProvidedKey { get; public set; }
    public string ServerSideEncryptionCustomerProvidedKeyMD5 { get; public set; }
    [AWSPropertyAttribute]
public string ServerSideEncryptionKeyManagementServiceEncryptionContext { get; public set; }
    [AWSPropertyAttribute]
public string ServerSideEncryptionKeyManagementServiceKeyId { get; public set; }
    public S3StorageClass StorageClass { get; public set; }
    public List`1<Tag> TagSet { get; public set; }
    public string WebsiteRedirectLocation { get; public set; }
    public Stream InputStream { get; public set; }
    public string FilePath { get; public set; }
    public string ContentBody { get; public set; }
    public bool AutoCloseStream { get; public set; }
    public bool AutoResetStreamPosition { get; public set; }
    [ObsoleteAttribute("This property is deprecated in favor of DisableDefaultChecksumValidation.")]
public Nullable`1<bool> DisableMD5Stream { get; public set; }
    public Nullable`1<bool> DisableDefaultChecksumValidation { get; public set; }
    public bool UseChunkEncoding { get; public set; }
    public Nullable`1<bool> DisablePayloadSigning { get; public set; }
    public HeadersCollection Headers { get; internal set; }
    public EventHandler`1<StreamTransferProgressArgs> StreamTransferProgress { get; public set; }
    public bool CalculateContentMD5Header { get; public set; }
    public ChecksumAlgorithm ChecksumAlgorithm { get; public set; }
    public string ChecksumCRC32 { get; public set; }
    public string ChecksumCRC32C { get; public set; }
    public string ChecksumSHA1 { get; public set; }
    public string ChecksumSHA256 { get; public set; }
    protected virtual bool get_IncludeSHA256Header();
    protected virtual bool get_Expect100Continue();
    public S3CannedACL get_CannedACL();
    public void set_CannedACL(S3CannedACL value);
    internal bool IsSetCannedACL();
    public Nullable`1<bool> get_BucketKeyEnabled();
    public void set_BucketKeyEnabled(Nullable`1<bool> value);
    internal bool IsSetBucketKeyEnabled();
    public string get_BucketName();
    public void set_BucketName(string value);
    internal bool IsSetBucket();
    public string get_MD5Digest();
    public void set_MD5Digest(string value);
    internal bool IsSetMD5Digest();
    public string get_ContentType();
    public void set_ContentType(string value);
    public string get_ExpectedBucketOwner();
    public void set_ExpectedBucketOwner(string value);
    internal bool IsSetExpectedBucketOwner();
    public string get_Key();
    public void set_Key(string value);
    internal bool IsSetKey();
    public MetadataCollection get_Metadata();
    internal void set_Metadata(MetadataCollection value);
    public ObjectLockLegalHoldStatus get_ObjectLockLegalHoldStatus();
    public void set_ObjectLockLegalHoldStatus(ObjectLockLegalHoldStatus value);
    internal bool IsSetObjectLockLegalHoldStatus();
    public ObjectLockMode get_ObjectLockMode();
    public void set_ObjectLockMode(ObjectLockMode value);
    internal bool IsSetObjectLockMode();
    public Nullable`1<DateTime> get_ObjectLockRetainUntilDate();
    public void set_ObjectLockRetainUntilDate(Nullable`1<DateTime> value);
    internal bool IsSetObjectLockRetainUntilDate();
    public RequestPayer get_RequestPayer();
    public void set_RequestPayer(RequestPayer value);
    internal bool IsSetRequestPayer();
    public ServerSideEncryptionMethod get_ServerSideEncryptionMethod();
    public void set_ServerSideEncryptionMethod(ServerSideEncryptionMethod value);
    internal bool IsSetServerSideEncryptionMethod();
    public ServerSideEncryptionCustomerMethod get_ServerSideEncryptionCustomerMethod();
    public void set_ServerSideEncryptionCustomerMethod(ServerSideEncryptionCustomerMethod value);
    internal bool IsSetServerSideEncryptionCustomerMethod();
    public string get_ServerSideEncryptionCustomerProvidedKey();
    public void set_ServerSideEncryptionCustomerProvidedKey(string value);
    internal bool IsSetServerSideEncryptionCustomerProvidedKey();
    public string get_ServerSideEncryptionCustomerProvidedKeyMD5();
    public void set_ServerSideEncryptionCustomerProvidedKeyMD5(string value);
    internal bool IsSetServerSideEncryptionCustomerProvidedKeyMD5();
    public string get_ServerSideEncryptionKeyManagementServiceEncryptionContext();
    public void set_ServerSideEncryptionKeyManagementServiceEncryptionContext(string value);
    internal bool IsSetServerSideEncryptionKeyManagementServiceEncryptionContext();
    public string get_ServerSideEncryptionKeyManagementServiceKeyId();
    public void set_ServerSideEncryptionKeyManagementServiceKeyId(string value);
    internal bool IsSetServerSideEncryptionKeyManagementServiceKeyId();
    public S3StorageClass get_StorageClass();
    public void set_StorageClass(S3StorageClass value);
    internal bool IsSetStorageClass();
    public List`1<Tag> get_TagSet();
    public void set_TagSet(List`1<Tag> value);
    internal bool IsSetTagSet();
    public string get_WebsiteRedirectLocation();
    public void set_WebsiteRedirectLocation(string value);
    internal bool IsSetWebsiteRedirectLocation();
    public Stream get_InputStream();
    public void set_InputStream(Stream value);
    internal bool IsSetInputStream();
    public string get_FilePath();
    public void set_FilePath(string value);
    public string get_ContentBody();
    public void set_ContentBody(string value);
    public bool get_AutoCloseStream();
    public void set_AutoCloseStream(bool value);
    public bool get_AutoResetStreamPosition();
    public void set_AutoResetStreamPosition(bool value);
    public Nullable`1<bool> get_DisableMD5Stream();
    public void set_DisableMD5Stream(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_DisableDefaultChecksumValidation();
    [CompilerGeneratedAttribute]
public void set_DisableDefaultChecksumValidation(Nullable`1<bool> value);
    public bool get_UseChunkEncoding();
    public void set_UseChunkEncoding(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_DisablePayloadSigning();
    [CompilerGeneratedAttribute]
public void set_DisablePayloadSigning(Nullable`1<bool> value);
    public HeadersCollection get_Headers();
    internal void set_Headers(HeadersCollection value);
    public EventHandler`1<StreamTransferProgressArgs> get_StreamTransferProgress();
    public void set_StreamTransferProgress(EventHandler`1<StreamTransferProgressArgs> value);
    public bool get_CalculateContentMD5Header();
    public void set_CalculateContentMD5Header(bool value);
    public ChecksumAlgorithm get_ChecksumAlgorithm();
    public void set_ChecksumAlgorithm(ChecksumAlgorithm value);
    internal bool IsSetChecksumAlgorithm();
    public string get_ChecksumCRC32();
    public void set_ChecksumCRC32(string value);
    internal bool IsSetChecksumCRC32();
    public string get_ChecksumCRC32C();
    public void set_ChecksumCRC32C(string value);
    internal bool IsSetChecksumCRC32C();
    public string get_ChecksumSHA1();
    public void set_ChecksumSHA1(string value);
    internal bool IsSetChecksumSHA1();
    public string get_ChecksumSHA256();
    public void set_ChecksumSHA256(string value);
    internal bool IsSetChecksumSHA256();
    internal void SetupForFilePath();
}
public class Amazon.S3.Model.PutObjectResponse : AmazonWebServiceResponse {
    private Expiration expiration;
    private ServerSideEncryptionMethod serverSideEncryption;
    private string eTag;
    private string versionId;
    private string serverSideEncryptionKeyManagementServiceKeyId;
    private ServerSideEncryptionCustomerMethod serverSideCustomerEncryption;
    private string serverSideEncryptionCustomerProvidedKeyMD5;
    private string serverSideEncryptionKeyManagementServiceEncryptionContext;
    private RequestCharged requestCharged;
    private Nullable`1<bool> bucketKeyEnabled;
    private string _checksumCRC32;
    private string _checksumCRC32C;
    private string _checksumSHA1;
    private string _checksumSHA256;
    public Expiration Expiration { get; public set; }
    public ServerSideEncryptionMethod ServerSideEncryptionMethod { get; public set; }
    public string ETag { get; public set; }
    public string VersionId { get; public set; }
    [AWSPropertyAttribute]
public string ServerSideEncryptionKeyManagementServiceKeyId { get; public set; }
    public ServerSideEncryptionCustomerMethod ServerSideEncryptionCustomerMethod { get; public set; }
    public string ServerSideEncryptionCustomerProvidedKeyMD5 { get; public set; }
    [AWSPropertyAttribute]
public string ServerSideEncryptionKeyManagementServiceEncryptionContext { get; public set; }
    public RequestCharged RequestCharged { get; public set; }
    public Nullable`1<bool> BucketKeyEnabled { get; public set; }
    public string ChecksumCRC32 { get; public set; }
    public string ChecksumCRC32C { get; public set; }
    public string ChecksumSHA1 { get; public set; }
    public string ChecksumSHA256 { get; public set; }
    public Expiration get_Expiration();
    public void set_Expiration(Expiration value);
    public ServerSideEncryptionMethod get_ServerSideEncryptionMethod();
    public void set_ServerSideEncryptionMethod(ServerSideEncryptionMethod value);
    public string get_ETag();
    public void set_ETag(string value);
    internal bool IsSetETag();
    public string get_VersionId();
    public void set_VersionId(string value);
    internal bool IsSetVersionId();
    public string get_ServerSideEncryptionKeyManagementServiceKeyId();
    public void set_ServerSideEncryptionKeyManagementServiceKeyId(string value);
    internal bool IsSetServerSideEncryptionKeyManagementServiceKeyId();
    public ServerSideEncryptionCustomerMethod get_ServerSideEncryptionCustomerMethod();
    public void set_ServerSideEncryptionCustomerMethod(ServerSideEncryptionCustomerMethod value);
    public string get_ServerSideEncryptionCustomerProvidedKeyMD5();
    public void set_ServerSideEncryptionCustomerProvidedKeyMD5(string value);
    public string get_ServerSideEncryptionKeyManagementServiceEncryptionContext();
    public void set_ServerSideEncryptionKeyManagementServiceEncryptionContext(string value);
    public RequestCharged get_RequestCharged();
    public void set_RequestCharged(RequestCharged value);
    internal bool IsSetRequestCharged();
    public Nullable`1<bool> get_BucketKeyEnabled();
    public void set_BucketKeyEnabled(Nullable`1<bool> value);
    internal bool IsSetBucketKeyEnabled();
    public string get_ChecksumCRC32();
    public void set_ChecksumCRC32(string value);
    internal bool IsSetChecksumCRC32();
    public string get_ChecksumCRC32C();
    public void set_ChecksumCRC32C(string value);
    internal bool IsSetChecksumCRC32C();
    public string get_ChecksumSHA1();
    public void set_ChecksumSHA1(string value);
    internal bool IsSetChecksumSHA1();
    public string get_ChecksumSHA256();
    public void set_ChecksumSHA256(string value);
    internal bool IsSetChecksumSHA256();
}
public class Amazon.S3.Model.PutObjectRetentionRequest : AmazonWebServiceRequest {
    private string _bucketName;
    private Nullable`1<bool> _bypassGovernanceRetention;
    private ChecksumAlgorithm _checksumAlgorithm;
    private string _contentMD5;
    private string expectedBucketOwner;
    private string _key;
    private RequestPayer _requestPayer;
    private ObjectLockRetention _retention;
    private string _versionId;
    public string BucketName { get; public set; }
    public Nullable`1<bool> BypassGovernanceRetention { get; public set; }
    public ChecksumAlgorithm ChecksumAlgorithm { get; public set; }
    public string ContentMD5 { get; public set; }
    public string ExpectedBucketOwner { get; public set; }
    public string Key { get; public set; }
    public RequestPayer RequestPayer { get; public set; }
    public ObjectLockRetention Retention { get; public set; }
    public string VersionId { get; public set; }
    public string get_BucketName();
    public void set_BucketName(string value);
    internal bool IsSetBucketName();
    public Nullable`1<bool> get_BypassGovernanceRetention();
    public void set_BypassGovernanceRetention(Nullable`1<bool> value);
    internal bool IsSetBypassGovernanceRetention();
    public ChecksumAlgorithm get_ChecksumAlgorithm();
    public void set_ChecksumAlgorithm(ChecksumAlgorithm value);
    internal bool IsSetChecksumAlgorithm();
    public string get_ContentMD5();
    public void set_ContentMD5(string value);
    internal bool IsSetContentMD5();
    public string get_ExpectedBucketOwner();
    public void set_ExpectedBucketOwner(string value);
    internal bool IsSetExpectedBucketOwner();
    public string get_Key();
    public void set_Key(string value);
    internal bool IsSetKey();
    public RequestPayer get_RequestPayer();
    public void set_RequestPayer(RequestPayer value);
    internal bool IsSetRequestPayer();
    public ObjectLockRetention get_Retention();
    public void set_Retention(ObjectLockRetention value);
    internal bool IsSetRetention();
    public string get_VersionId();
    public void set_VersionId(string value);
    internal bool IsSetVersionId();
}
public class Amazon.S3.Model.PutObjectRetentionResponse : AmazonWebServiceResponse {
    private RequestCharged _requestCharged;
    public RequestCharged RequestCharged { get; public set; }
    public RequestCharged get_RequestCharged();
    public void set_RequestCharged(RequestCharged value);
    internal bool IsSetRequestCharged();
}
public class Amazon.S3.Model.PutObjectTaggingRequest : AmazonWebServiceRequest {
    private string bucketName;
    private ChecksumAlgorithm _checksumAlgorithm;
    private string expectedBucketOwner;
    private string key;
    private RequestPayer requestPayer;
    private Tagging tagging;
    private string versionId;
    public string BucketName { get; public set; }
    public ChecksumAlgorithm ChecksumAlgorithm { get; public set; }
    public string ExpectedBucketOwner { get; public set; }
    public string Key { get; public set; }
    public RequestPayer RequestPayer { get; public set; }
    public Tagging Tagging { get; public set; }
    public string VersionId { get; public set; }
    public string get_BucketName();
    public void set_BucketName(string value);
    internal bool IsSetBucket();
    public ChecksumAlgorithm get_ChecksumAlgorithm();
    public void set_ChecksumAlgorithm(ChecksumAlgorithm value);
    internal bool IsSetChecksumAlgorithm();
    public string get_ExpectedBucketOwner();
    public void set_ExpectedBucketOwner(string value);
    internal bool IsSetExpectedBucketOwner();
    public string get_Key();
    public void set_Key(string value);
    internal bool IsSetKey();
    public RequestPayer get_RequestPayer();
    public void set_RequestPayer(RequestPayer value);
    internal bool IsSetRequestPayer();
    public Tagging get_Tagging();
    public void set_Tagging(Tagging value);
    internal bool IsSetTagging();
    public string get_VersionId();
    public void set_VersionId(string value);
    internal bool IsSetVersionId();
}
public class Amazon.S3.Model.PutObjectTaggingResponse : AmazonWebServiceResponse {
    private string versionId;
    public string VersionId { get; public set; }
    public string get_VersionId();
    public void set_VersionId(string value);
    internal bool IsSetVersionId();
}
public class Amazon.S3.Model.PutPublicAccessBlockRequest : AmazonWebServiceRequest {
    private string bucketName;
    private ChecksumAlgorithm _checksumAlgorithm;
    private string contentMD5;
    private PublicAccessBlockConfiguration publicAccessBlockConfiguration;
    private string expectedBucketOwner;
    public string BucketName { get; public set; }
    public ChecksumAlgorithm ChecksumAlgorithm { get; public set; }
    public string ContentMD5 { get; public set; }
    public PublicAccessBlockConfiguration PublicAccessBlockConfiguration { get; public set; }
    public string ExpectedBucketOwner { get; public set; }
    public string get_BucketName();
    public void set_BucketName(string value);
    internal bool IsSetBucketName();
    public ChecksumAlgorithm get_ChecksumAlgorithm();
    public void set_ChecksumAlgorithm(ChecksumAlgorithm value);
    internal bool IsSetChecksumAlgorithm();
    public string get_ContentMD5();
    public void set_ContentMD5(string value);
    internal bool IsSetContentMD5();
    public PublicAccessBlockConfiguration get_PublicAccessBlockConfiguration();
    public void set_PublicAccessBlockConfiguration(PublicAccessBlockConfiguration value);
    internal bool IsSetPublicAccessBlockConfiguration();
    public string get_ExpectedBucketOwner();
    public void set_ExpectedBucketOwner(string value);
    internal bool IsSetExpectedBucketOwner();
}
public class Amazon.S3.Model.PutPublicAccessBlockResponse : AmazonWebServiceResponse {
}
public abstract class Amazon.S3.Model.PutWithACLRequest : AmazonWebServiceRequest {
    private List`1<S3Grant> _grants;
    public List`1<S3Grant> Grants { get; public set; }
    public List`1<S3Grant> get_Grants();
    public void set_Grants(List`1<S3Grant> value);
}
public class Amazon.S3.Model.QueueConfiguration : NotificationConfiguration {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Queue>k__BackingField;
    public string Id { get; public set; }
    public string Queue { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    internal bool IsSetId();
    [CompilerGeneratedAttribute]
public string get_Queue();
    [CompilerGeneratedAttribute]
public void set_Queue(string value);
    internal bool IsSetQueue();
}
public class Amazon.S3.Model.RecordsEvent : object {
    [CompilerGeneratedAttribute]
private Stream <Payload>k__BackingField;
    public Stream Payload { get; public set; }
    public RecordsEvent(IEventStreamMessage message);
    [CompilerGeneratedAttribute]
public Stream get_Payload();
    [CompilerGeneratedAttribute]
public void set_Payload(Stream value);
}
public class Amazon.S3.Model.ReplicaModifications : object {
    private ReplicaModificationsStatus status;
    public ReplicaModificationsStatus Status { get; public set; }
    public ReplicaModificationsStatus get_Status();
    public void set_Status(ReplicaModificationsStatus value);
    internal bool IsSetStatus();
}
public class Amazon.S3.Model.ReplicationConfiguration : object {
    private string role;
    private List`1<ReplicationRule> rules;
    public string Role { get; public set; }
    public List`1<ReplicationRule> Rules { get; public set; }
    public string get_Role();
    public void set_Role(string value);
    internal bool IsSetRole();
    public List`1<ReplicationRule> get_Rules();
    public void set_Rules(List`1<ReplicationRule> value);
    internal bool IsSetRules();
}
public class Amazon.S3.Model.ReplicationDestination : object {
    private AccessControlTranslation accessControlTranslation;
    private string accountId;
    private string bucketArn;
    private EncryptionConfiguration encryptionConfiguration;
    private Metrics metrics;
    private ReplicationTime replicationTime;
    private S3StorageClass storageClass;
    public AccessControlTranslation AccessControlTranslation { get; public set; }
    public string AccountId { get; public set; }
    public string BucketArn { get; public set; }
    public EncryptionConfiguration EncryptionConfiguration { get; public set; }
    public Metrics Metrics { get; public set; }
    public ReplicationTime ReplicationTime { get; public set; }
    public S3StorageClass StorageClass { get; public set; }
    public AccessControlTranslation get_AccessControlTranslation();
    public void set_AccessControlTranslation(AccessControlTranslation value);
    public bool IsSetAccessControlTranslation();
    public string get_AccountId();
    public void set_AccountId(string value);
    public bool IsSetAccountId();
    public string get_BucketArn();
    public void set_BucketArn(string value);
    internal bool IsSetBucketArn();
    public EncryptionConfiguration get_EncryptionConfiguration();
    public void set_EncryptionConfiguration(EncryptionConfiguration value);
    public bool IsSetEncryptionConfiguration();
    public Metrics get_Metrics();
    public void set_Metrics(Metrics value);
    internal bool IsSetMetrics();
    public ReplicationTime get_ReplicationTime();
    public void set_ReplicationTime(ReplicationTime value);
    internal bool IsSetReplicationTime();
    public S3StorageClass get_StorageClass();
    public void set_StorageClass(S3StorageClass value);
    internal bool IsSetStorageClass();
}
public class Amazon.S3.Model.ReplicationRule : object {
    private string id;
    private Nullable`1<int> priority;
    private string prefix;
    private ReplicationRuleFilter filter;
    private ReplicationRuleStatus status;
    private ReplicationDestination destination;
    private SourceSelectionCriteria sourceSelectionCriteria;
    private ExistingObjectReplication existingObjectReplication;
    private DeleteMarkerReplication deleteMarkerReplication;
    public string Id { get; public set; }
    public int Priority { get; public set; }
    [ObsoleteAttribute("This property is deprecated. Use Filter instead.")]
public string Prefix { get; public set; }
    public ReplicationRuleFilter Filter { get; public set; }
    public ReplicationRuleStatus Status { get; public set; }
    public ReplicationDestination Destination { get; public set; }
    public SourceSelectionCriteria SourceSelectionCriteria { get; public set; }
    public ExistingObjectReplication ExistingObjectReplication { get; public set; }
    public DeleteMarkerReplication DeleteMarkerReplication { get; public set; }
    public string get_Id();
    public void set_Id(string value);
    internal bool IsSetId();
    public int get_Priority();
    public void set_Priority(int value);
    internal bool IsSetPriority();
    public string get_Prefix();
    public void set_Prefix(string value);
    internal bool IsSetPrefix();
    public ReplicationRuleFilter get_Filter();
    public void set_Filter(ReplicationRuleFilter value);
    internal bool IsSetFilter();
    public ReplicationRuleStatus get_Status();
    public void set_Status(ReplicationRuleStatus value);
    internal bool IsSetStatus();
    public ReplicationDestination get_Destination();
    public void set_Destination(ReplicationDestination value);
    internal bool IsSetDestination();
    public SourceSelectionCriteria get_SourceSelectionCriteria();
    public void set_SourceSelectionCriteria(SourceSelectionCriteria value);
    internal bool IsSetSourceSelectionCriteria();
    public ExistingObjectReplication get_ExistingObjectReplication();
    public void set_ExistingObjectReplication(ExistingObjectReplication value);
    internal bool IsSetExistingObjectReplication();
    public DeleteMarkerReplication get_DeleteMarkerReplication();
    public void set_DeleteMarkerReplication(DeleteMarkerReplication value);
    internal bool IsSetDeleteMarkerReplication();
}
public class Amazon.S3.Model.ReplicationRuleAndOperator : object {
    private string prefix;
    private List`1<Tag> tags;
    public string Prefix { get; public set; }
    public List`1<Tag> Tags { get; public set; }
    public string get_Prefix();
    public void set_Prefix(string value);
    internal bool IsSetPrefix();
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
}
public class Amazon.S3.Model.ReplicationRuleFilter : object {
    private string prefix;
    private Tag tag;
    private ReplicationRuleAndOperator and;
    public string Prefix { get; public set; }
    public Tag Tag { get; public set; }
    public ReplicationRuleAndOperator And { get; public set; }
    public string get_Prefix();
    public void set_Prefix(string value);
    internal bool IsSetPrefix();
    public Tag get_Tag();
    public void set_Tag(Tag value);
    internal bool IsSetTag();
    public ReplicationRuleAndOperator get_And();
    public void set_And(ReplicationRuleAndOperator value);
    internal bool IsSetAnd();
}
public class Amazon.S3.Model.ReplicationTime : object {
    private ReplicationTimeStatus status;
    private ReplicationTimeValue time;
    public ReplicationTimeStatus Status { get; public set; }
    public ReplicationTimeValue Time { get; public set; }
    public ReplicationTimeStatus get_Status();
    public void set_Status(ReplicationTimeStatus value);
    public ReplicationTimeValue get_Time();
    public void set_Time(ReplicationTimeValue value);
    internal bool IsSetStatus();
    internal bool IsSetTime();
}
public class Amazon.S3.Model.ReplicationTimeValue : object {
    private Nullable`1<int> minutes;
    public Nullable`1<int> Minutes { get; public set; }
    public Nullable`1<int> get_Minutes();
    public void set_Minutes(Nullable`1<int> value);
    internal bool IsSetMinutes();
}
public class Amazon.S3.Model.RequestPaymentConfiguration : object {
    private string payer;
    public string Payer { get; public set; }
    public string get_Payer();
    public void set_Payer(string value);
    internal bool IsSetPayer();
}
public class Amazon.S3.Model.ResponseHeaderOverrides : object {
    internal static string RESPONSE_CONTENT_TYPE;
    internal static string RESPONSE_CONTENT_LANGUAGE;
    internal static string RESPONSE_EXPIRES;
    internal static string RESPONSE_CACHE_CONTROL;
    internal static string RESPONSE_CONTENT_DISPOSITION;
    internal static string RESPONSE_CONTENT_ENCODING;
    private string _contentType;
    private string _contentLanguage;
    private string _expires;
    private string _cacheControl;
    private string _contentDisposition;
    private string _contentEncoding;
    public string ContentType { get; public set; }
    public string ContentLanguage { get; public set; }
    public string Expires { get; public set; }
    public string CacheControl { get; public set; }
    public string ContentDisposition { get; public set; }
    public string ContentEncoding { get; public set; }
    public string get_ContentType();
    public void set_ContentType(string value);
    public string get_ContentLanguage();
    public void set_ContentLanguage(string value);
    public string get_Expires();
    public void set_Expires(string value);
    public string get_CacheControl();
    public void set_CacheControl(string value);
    public string get_ContentDisposition();
    public void set_ContentDisposition(string value);
    public string get_ContentEncoding();
    public void set_ContentEncoding(string value);
}
public class Amazon.S3.Model.RestoreObjectRequest : AmazonWebServiceRequest {
    private string bucketName;
    private ChecksumAlgorithm _checksumAlgorithm;
    private Nullable`1<int> days;
    private string expectedBucketOwner;
    private string description;
    private string key;
    private GlacierJobTier tier;
    private GlacierJobTier retrievalTier;
    private RestoreRequestType type;
    private SelectParameters selectParameters;
    private OutputLocation outputLocation;
    private RequestPayer requestPayer;
    private string versionId;
    public string BucketName { get; public set; }
    public ChecksumAlgorithm ChecksumAlgorithm { get; public set; }
    public Nullable`1<int> Days { get; public set; }
    public string ExpectedBucketOwner { get; public set; }
    public string Description { get; public set; }
    public string Key { get; public set; }
    public GlacierJobTier Tier { get; public set; }
    public GlacierJobTier RetrievalTier { get; public set; }
    public RestoreRequestType RestoreRequestType { get; public set; }
    public SelectParameters SelectParameters { get; public set; }
    public OutputLocation OutputLocation { get; public set; }
    public RequestPayer RequestPayer { get; public set; }
    public string VersionId { get; public set; }
    public string get_BucketName();
    public void set_BucketName(string value);
    internal bool IsSetBucketName();
    public ChecksumAlgorithm get_ChecksumAlgorithm();
    public void set_ChecksumAlgorithm(ChecksumAlgorithm value);
    internal bool IsSetChecksumAlgorithm();
    public Nullable`1<int> get_Days();
    public void set_Days(Nullable`1<int> value);
    internal bool IsSetDays();
    public string get_ExpectedBucketOwner();
    public void set_ExpectedBucketOwner(string value);
    internal bool IsSetExpectedBucketOwner();
    public string get_Description();
    public void set_Description(string value);
    internal bool IsSetDescription();
    public string get_Key();
    public void set_Key(string value);
    internal bool IsSetKey();
    public GlacierJobTier get_Tier();
    public void set_Tier(GlacierJobTier value);
    internal bool IsSetTier();
    public GlacierJobTier get_RetrievalTier();
    public void set_RetrievalTier(GlacierJobTier value);
    internal bool IsSetRetrievalTier();
    public RestoreRequestType get_RestoreRequestType();
    public void set_RestoreRequestType(RestoreRequestType value);
    internal bool IsSetType();
    public SelectParameters get_SelectParameters();
    public void set_SelectParameters(SelectParameters value);
    internal bool IsSetSelectParameters();
    public OutputLocation get_OutputLocation();
    public void set_OutputLocation(OutputLocation value);
    internal bool IsSetOutputLocation();
    internal void Marshall(string propertyName, XmlWriter xmlWriter);
    public RequestPayer get_RequestPayer();
    public void set_RequestPayer(RequestPayer value);
    internal bool IsSetRequestPayer();
    public string get_VersionId();
    public void set_VersionId(string value);
    internal bool IsSetVersionId();
}
public class Amazon.S3.Model.RestoreObjectResponse : AmazonWebServiceResponse {
    private RequestCharged requestCharged;
    private string restoreOutputPath;
    public RequestCharged RequestCharged { get; public set; }
    public string RestoreOutputPath { get; public set; }
    public RequestCharged get_RequestCharged();
    public void set_RequestCharged(RequestCharged value);
    internal bool IsSetRequestCharged();
    public string get_RestoreOutputPath();
    public void set_RestoreOutputPath(string value);
    internal bool IsSetRestoreOutputPath();
}
public class Amazon.S3.Model.RestoreStatus : object {
    private Nullable`1<bool> _isRestoreInProgress;
    private Nullable`1<DateTime> _restoreExpiryDate;
    public Nullable`1<bool> IsRestoreInProgress { get; public set; }
    public Nullable`1<DateTime> RestoreExpiryDate { get; public set; }
    public Nullable`1<bool> get_IsRestoreInProgress();
    public void set_IsRestoreInProgress(Nullable`1<bool> value);
    internal bool IsSetIsRestoreInProgress();
    public Nullable`1<DateTime> get_RestoreExpiryDate();
    public void set_RestoreExpiryDate(Nullable`1<DateTime> value);
    internal bool IsSetRestoreExpiryDate();
}
public class Amazon.S3.Model.RoutingRule : object {
    private RoutingRuleCondition condition;
    private RoutingRuleRedirect redirect;
    public RoutingRuleCondition Condition { get; public set; }
    public RoutingRuleRedirect Redirect { get; public set; }
    public RoutingRuleCondition get_Condition();
    public void set_Condition(RoutingRuleCondition value);
    internal bool IsSetCondition();
    public RoutingRuleRedirect get_Redirect();
    public void set_Redirect(RoutingRuleRedirect value);
    internal bool IsSetRedirect();
}
public class Amazon.S3.Model.RoutingRuleCondition : object {
    private string httpErrorCodeReturnedEquals;
    private string keyPrefixEquals;
    public string HttpErrorCodeReturnedEquals { get; public set; }
    public string KeyPrefixEquals { get; public set; }
    public string get_HttpErrorCodeReturnedEquals();
    public void set_HttpErrorCodeReturnedEquals(string value);
    internal bool IsSetHttpErrorCodeReturnedEquals();
    public string get_KeyPrefixEquals();
    public void set_KeyPrefixEquals(string value);
    internal bool IsSetKeyPrefixEquals();
}
public class Amazon.S3.Model.RoutingRuleRedirect : object {
    private string hostName;
    private string httpRedirectCode;
    private string protocol;
    private string replaceKeyPrefixWith;
    private string replaceKeyWith;
    public string HostName { get; public set; }
    public string HttpRedirectCode { get; public set; }
    public string Protocol { get; public set; }
    public string ReplaceKeyPrefixWith { get; public set; }
    public string ReplaceKeyWith { get; public set; }
    public string get_HostName();
    public void set_HostName(string value);
    internal bool IsSetHostName();
    public string get_HttpRedirectCode();
    public void set_HttpRedirectCode(string value);
    internal bool IsSetHttpRedirectCode();
    public string get_Protocol();
    public void set_Protocol(string value);
    internal bool IsSetProtocol();
    public string get_ReplaceKeyPrefixWith();
    public void set_ReplaceKeyPrefixWith(string value);
    internal bool IsSetReplaceKeyPrefixWith();
    public string get_ReplaceKeyWith();
    public void set_ReplaceKeyWith(string value);
    internal bool IsSetReplaceKeyWith();
}
public class Amazon.S3.Model.S3AccessControlList : object {
    private List`1<S3Grant> grantList;
    [CompilerGeneratedAttribute]
private Owner <Owner>k__BackingField;
    public Owner Owner { get; public set; }
    public List`1<S3Grant> Grants { get; public set; }
    public void AddGrant(S3Grantee grantee, S3Permission permission);
    public void RemoveGrant(S3Grantee grantee, S3Permission permission);
    public void RemoveGrant(S3Grantee grantee);
    [CompilerGeneratedAttribute]
public Owner get_Owner();
    [CompilerGeneratedAttribute]
public void set_Owner(Owner value);
    internal bool IsSetOwner();
    public List`1<S3Grant> get_Grants();
    public void set_Grants(List`1<S3Grant> value);
    internal bool IsSetGrants();
    internal void Marshall(string memberName, XmlWriter xmlWriter);
}
public class Amazon.S3.Model.S3Bucket : object {
    private Nullable`1<DateTime> creationDate;
    private string bucketName;
    public Nullable`1<DateTime> CreationDate { get; public set; }
    public string BucketName { get; public set; }
    public Nullable`1<DateTime> get_CreationDate();
    public void set_CreationDate(Nullable`1<DateTime> value);
    internal bool IsSetCreationDate();
    public string get_BucketName();
    public void set_BucketName(string value);
    internal bool IsSetBucketName();
}
public class Amazon.S3.Model.S3BucketLoggingConfig : object {
    private List`1<S3Grant> targetGrants;
    [CompilerGeneratedAttribute]
private string <TargetBucketName>k__BackingField;
    private TargetObjectKeyFormat _targetObjectKeyFormat;
    [CompilerGeneratedAttribute]
private string <TargetPrefix>k__BackingField;
    public string TargetBucketName { get; public set; }
    public List`1<S3Grant> Grants { get; public set; }
    public TargetObjectKeyFormat TargetObjectKeyFormat { get; public set; }
    public string TargetPrefix { get; public set; }
    [CompilerGeneratedAttribute]
public string get_TargetBucketName();
    [CompilerGeneratedAttribute]
public void set_TargetBucketName(string value);
    internal bool IsSetTargetBucket();
    public List`1<S3Grant> get_Grants();
    public void set_Grants(List`1<S3Grant> value);
    internal bool IsSetGrants();
    public TargetObjectKeyFormat get_TargetObjectKeyFormat();
    public void set_TargetObjectKeyFormat(TargetObjectKeyFormat value);
    internal bool IsSetTargetObjectKeyFormat();
    [CompilerGeneratedAttribute]
public string get_TargetPrefix();
    [CompilerGeneratedAttribute]
public void set_TargetPrefix(string value);
    internal bool IsSetTargetPrefix();
    public void AddGrant(S3Grantee grantee, S3Permission permission);
    public void RemoveGrant(S3Grantee grantee, S3Permission permission);
    public void RemoveGrant(S3Grantee grantee);
}
public class Amazon.S3.Model.S3BucketVersioningConfig : object {
    private Nullable`1<bool> enableMfaDelete;
    private VersionStatus status;
    public Nullable`1<bool> EnableMfaDelete { get; public set; }
    public VersionStatus Status { get; public set; }
    public Nullable`1<bool> get_EnableMfaDelete();
    public void set_EnableMfaDelete(Nullable`1<bool> value);
    internal bool IsSetEnableMfaDelete();
    public VersionStatus get_Status();
    public void set_Status(VersionStatus value);
    internal bool IsSetStatus();
}
public class Amazon.S3.Model.S3Encryption : object {
    [CompilerGeneratedAttribute]
private ServerSideEncryptionMethod <EncryptionType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <KMSKeyId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <KMSContext>k__BackingField;
    public ServerSideEncryptionMethod EncryptionType { get; public set; }
    public string KMSKeyId { get; public set; }
    public string KMSContext { get; public set; }
    [CompilerGeneratedAttribute]
public ServerSideEncryptionMethod get_EncryptionType();
    [CompilerGeneratedAttribute]
public void set_EncryptionType(ServerSideEncryptionMethod value);
    internal bool IsSetEncryptionType();
    [CompilerGeneratedAttribute]
public string get_KMSKeyId();
    [CompilerGeneratedAttribute]
public void set_KMSKeyId(string value);
    internal bool IsSetKMSKeyId();
    [CompilerGeneratedAttribute]
public string get_KMSContext();
    [CompilerGeneratedAttribute]
public void set_KMSContext(string value);
    internal bool IsSetKMSContext();
    internal void Marshall(string memberName, XmlWriter xmlWriter);
}
public class Amazon.S3.Model.S3EventStreamException : EventStreamException {
    public S3EventStreamException(string message);
    public S3EventStreamException(string message, Exception innerException);
}
public class Amazon.S3.Model.S3Grant : object {
    private S3Grantee grantee;
    private S3Permission permission;
    public S3Grantee Grantee { get; public set; }
    public S3Permission Permission { get; public set; }
    public S3Grantee get_Grantee();
    public void set_Grantee(S3Grantee value);
    internal bool IsSetGrantee();
    public S3Permission get_Permission();
    public void set_Permission(S3Permission value);
    internal bool IsSetPermission();
    internal void Marshall(string memberName, XmlWriter xmlWriter);
}
public class Amazon.S3.Model.S3Grantee : object {
    private string displayName;
    private string emailAddress;
    private string canonicalUser;
    private string uRI;
    public GranteeType Type { get; }
    public string DisplayName { get; public set; }
    public string EmailAddress { get; public set; }
    public string CanonicalUser { get; public set; }
    public string URI { get; public set; }
    public GranteeType get_Type();
    internal bool IsSetType();
    public string get_DisplayName();
    public void set_DisplayName(string value);
    internal bool IsSetDisplayName();
    public string get_EmailAddress();
    public void set_EmailAddress(string value);
    internal bool IsSetEmailAddress();
    public string get_CanonicalUser();
    public void set_CanonicalUser(string value);
    internal bool IsSetCanonicalUser();
    public string get_URI();
    public void set_URI(string value);
    internal bool IsSetURI();
}
public class Amazon.S3.Model.S3KeyFilter : object {
    private List`1<FilterRule> filterRules;
    public List`1<FilterRule> FilterRules { get; public set; }
    public List`1<FilterRule> get_FilterRules();
    public void set_FilterRules(List`1<FilterRule> value);
    internal bool IsSetFilterRules();
}
public class Amazon.S3.Model.S3Location : object {
    [CompilerGeneratedAttribute]
private string <BucketName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Prefix>k__BackingField;
    [CompilerGeneratedAttribute]
private S3Encryption <Encryption>k__BackingField;
    [CompilerGeneratedAttribute]
private S3CannedACL <CannedACL>k__BackingField;
    [CompilerGeneratedAttribute]
private S3AccessControlList <AccessControlList>k__BackingField;
    [CompilerGeneratedAttribute]
private Tagging <Tagging>k__BackingField;
    [CompilerGeneratedAttribute]
private MetadataCollection <UserMetadata>k__BackingField;
    [CompilerGeneratedAttribute]
private S3StorageClass <StorageClass>k__BackingField;
    public string BucketName { get; public set; }
    public string Prefix { get; public set; }
    public S3Encryption Encryption { get; public set; }
    public S3CannedACL CannedACL { get; public set; }
    public S3AccessControlList AccessControlList { get; public set; }
    public Tagging Tagging { get; public set; }
    public MetadataCollection UserMetadata { get; public set; }
    public S3StorageClass StorageClass { get; public set; }
    [CompilerGeneratedAttribute]
public string get_BucketName();
    [CompilerGeneratedAttribute]
public void set_BucketName(string value);
    internal bool IsSetBucketName();
    [CompilerGeneratedAttribute]
public string get_Prefix();
    [CompilerGeneratedAttribute]
public void set_Prefix(string value);
    internal bool IsSetPrefix();
    [CompilerGeneratedAttribute]
public S3Encryption get_Encryption();
    [CompilerGeneratedAttribute]
public void set_Encryption(S3Encryption value);
    internal bool IsSetEncryption();
    [CompilerGeneratedAttribute]
public S3CannedACL get_CannedACL();
    [CompilerGeneratedAttribute]
public void set_CannedACL(S3CannedACL value);
    internal bool IsSetCannedACL();
    [CompilerGeneratedAttribute]
public S3AccessControlList get_AccessControlList();
    [CompilerGeneratedAttribute]
public void set_AccessControlList(S3AccessControlList value);
    internal bool IsSetAccessControlList();
    [CompilerGeneratedAttribute]
public Tagging get_Tagging();
    [CompilerGeneratedAttribute]
public void set_Tagging(Tagging value);
    internal bool IsSetTagging();
    [CompilerGeneratedAttribute]
public MetadataCollection get_UserMetadata();
    [CompilerGeneratedAttribute]
public void set_UserMetadata(MetadataCollection value);
    internal bool IsSetUserMetadata();
    [CompilerGeneratedAttribute]
public S3StorageClass get_StorageClass();
    [CompilerGeneratedAttribute]
public void set_StorageClass(S3StorageClass value);
    internal bool IsSetStorageClass();
    internal void Marshall(string memberName, XmlWriter xmlWriter);
}
public class Amazon.S3.Model.S3Object : object {
    private List`1<string> _checksumAlgorithm;
    private string eTag;
    private string key;
    private Nullable`1<DateTime> lastModified;
    private Owner owner;
    private RestoreStatus _restoreStatus;
    private Nullable`1<long> size;
    private S3StorageClass storageClass;
    private string bucketName;
    public List`1<string> ChecksumAlgorithm { get; public set; }
    public string ETag { get; public set; }
    public string BucketName { get; public set; }
    public string Key { get; public set; }
    public Nullable`1<DateTime> LastModified { get; public set; }
    public Owner Owner { get; public set; }
    public RestoreStatus RestoreStatus { get; public set; }
    public Nullable`1<long> Size { get; public set; }
    public S3StorageClass StorageClass { get; public set; }
    public List`1<string> get_ChecksumAlgorithm();
    public void set_ChecksumAlgorithm(List`1<string> value);
    internal bool IsSetChecksumAlgorithm();
    public string get_ETag();
    public void set_ETag(string value);
    internal bool IsSetETag();
    public string get_BucketName();
    public void set_BucketName(string value);
    internal bool IsSetBucketName();
    public string get_Key();
    public void set_Key(string value);
    internal bool IsSetKey();
    public Nullable`1<DateTime> get_LastModified();
    public void set_LastModified(Nullable`1<DateTime> value);
    internal bool IsSetLastModified();
    public Owner get_Owner();
    public void set_Owner(Owner value);
    internal bool IsSetOwner();
    public RestoreStatus get_RestoreStatus();
    public void set_RestoreStatus(RestoreStatus value);
    internal bool IsSetRestoreStatus();
    public Nullable`1<long> get_Size();
    public void set_Size(Nullable`1<long> value);
    internal bool IsSetSize();
    public S3StorageClass get_StorageClass();
    public void set_StorageClass(S3StorageClass value);
    internal bool IsSetStorageClass();
}
public class Amazon.S3.Model.S3ObjectVersion : S3Object {
    private Nullable`1<bool> isLatest;
    private string versionId;
    private Nullable`1<bool> isDeleteMarker;
    public Nullable`1<bool> IsLatest { get; public set; }
    public string VersionId { get; public set; }
    public Nullable`1<bool> IsDeleteMarker { get; public set; }
    public Nullable`1<bool> get_IsLatest();
    public void set_IsLatest(Nullable`1<bool> value);
    public string get_VersionId();
    public void set_VersionId(string value);
    public Nullable`1<bool> get_IsDeleteMarker();
    public void set_IsDeleteMarker(Nullable`1<bool> value);
}
public class Amazon.S3.Model.S3PaginatorFactory : object {
    private IAmazonS3 _client;
    internal S3PaginatorFactory(IAmazonS3 client);
    public sealed virtual IListMultipartUploadsPaginator ListMultipartUploads(ListMultipartUploadsRequest request);
    public sealed virtual IListObjectsPaginator ListObjects(ListObjectsRequest request);
    public sealed virtual IListObjectsV2Paginator ListObjectsV2(ListObjectsV2Request request);
    public sealed virtual IListPartsPaginator ListParts(ListPartsRequest request);
    public sealed virtual IListVersionsPaginator ListVersions(ListVersionsRequest request);
}
public class Amazon.S3.Model.ScanRange : object {
    private Nullable`1<long> start;
    private Nullable`1<long> end;
    public Nullable`1<long> Start { get; public set; }
    public Nullable`1<long> End { get; public set; }
    public Nullable`1<long> get_Start();
    public void set_Start(Nullable`1<long> value);
    internal bool IsSetStart();
    public Nullable`1<long> get_End();
    public void set_End(Nullable`1<long> value);
    internal bool IsSetEnd();
    internal void Marshall(string memberName, XmlWriter xmlWriter);
}
public class Amazon.S3.Model.SelectObjectContentEventStream : EnumerableEventStream`2<IS3Event, S3EventStreamException> {
    [CompilerGeneratedAttribute]
private IDictionary`2<string, Func`2<IEventStreamMessage, IS3Event>> <EventMapping>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, Func`2<IEventStreamMessage, S3EventStreamException>> <ExceptionMapping>k__BackingField;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _isProcessing;
    [CompilerGeneratedAttribute]
private EventHandler`1<EventStreamEventReceivedArgs`1<IS3Event>> EventReceived;
    [CompilerGeneratedAttribute]
private EventHandler`1<EventStreamExceptionReceivedArgs`1<S3EventStreamException>> ExceptionReceived;
    [CompilerGeneratedAttribute]
private EventHandler`1<EventStreamEventReceivedArgs`1<RecordsEvent>> RecordsEventReceived;
    [CompilerGeneratedAttribute]
private EventHandler`1<EventStreamEventReceivedArgs`1<StatsEvent>> StatsEventReceived;
    [CompilerGeneratedAttribute]
private EventHandler`1<EventStreamEventReceivedArgs`1<ProgressEvent>> ProgressEventReceived;
    [CompilerGeneratedAttribute]
private EventHandler`1<EventStreamEventReceivedArgs`1<ContinuationEvent>> ContinuationEventReceived;
    [CompilerGeneratedAttribute]
private EventHandler`1<EventStreamEventReceivedArgs`1<EndEvent>> EndEventReceived;
    protected IDictionary`2<string, Func`2<IEventStreamMessage, IS3Event>> EventMapping { get; }
    protected IDictionary`2<string, Func`2<IEventStreamMessage, S3EventStreamException>> ExceptionMapping { get; }
    protected bool IsProcessing { get; protected set; }
    public SelectObjectContentEventStream(Stream selectObjectStream);
    public SelectObjectContentEventStream(Stream selectObjectStream, IEventStreamDecoder eventStreamDecoder);
    [CompilerGeneratedAttribute]
protected virtual IDictionary`2<string, Func`2<IEventStreamMessage, IS3Event>> get_EventMapping();
    [CompilerGeneratedAttribute]
protected virtual IDictionary`2<string, Func`2<IEventStreamMessage, S3EventStreamException>> get_ExceptionMapping();
    protected virtual bool get_IsProcessing();
    protected virtual void set_IsProcessing(bool value);
    [CompilerGeneratedAttribute]
public virtual void add_EventReceived(EventHandler`1<EventStreamEventReceivedArgs`1<IS3Event>> value);
    [CompilerGeneratedAttribute]
public virtual void remove_EventReceived(EventHandler`1<EventStreamEventReceivedArgs`1<IS3Event>> value);
    [CompilerGeneratedAttribute]
public virtual void add_ExceptionReceived(EventHandler`1<EventStreamExceptionReceivedArgs`1<S3EventStreamException>> value);
    [CompilerGeneratedAttribute]
public virtual void remove_ExceptionReceived(EventHandler`1<EventStreamExceptionReceivedArgs`1<S3EventStreamException>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_RecordsEventReceived(EventHandler`1<EventStreamEventReceivedArgs`1<RecordsEvent>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_RecordsEventReceived(EventHandler`1<EventStreamEventReceivedArgs`1<RecordsEvent>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_StatsEventReceived(EventHandler`1<EventStreamEventReceivedArgs`1<StatsEvent>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_StatsEventReceived(EventHandler`1<EventStreamEventReceivedArgs`1<StatsEvent>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ProgressEventReceived(EventHandler`1<EventStreamEventReceivedArgs`1<ProgressEvent>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ProgressEventReceived(EventHandler`1<EventStreamEventReceivedArgs`1<ProgressEvent>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ContinuationEventReceived(EventHandler`1<EventStreamEventReceivedArgs`1<ContinuationEvent>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ContinuationEventReceived(EventHandler`1<EventStreamEventReceivedArgs`1<ContinuationEvent>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_EndEventReceived(EventHandler`1<EventStreamEventReceivedArgs`1<EndEvent>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_EndEventReceived(EventHandler`1<EventStreamEventReceivedArgs`1<EndEvent>> value);
    private bool RaiseEvent(EventHandler`1<EventStreamEventReceivedArgs`1<T>> eventHandler, IS3Event ev);
    [CompilerGeneratedAttribute]
private void <.ctor>b__32_0(object sender, EventStreamEventReceivedArgs`1<IS3Event> args);
    [CompilerGeneratedAttribute]
private void <.ctor>b__32_1(object sender, EventStreamExceptionReceivedArgs`1<S3EventStreamException> args);
    [CompilerGeneratedAttribute]
private void <.ctor>b__32_2(object sender, EventStreamMessageReceivedEventArgs args);
}
public class Amazon.S3.Model.SelectObjectContentRequest : AmazonWebServiceRequest {
    [CompilerGeneratedAttribute]
private string <BucketName>k__BackingField;
    private string expectedBucketOwner;
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private ServerSideEncryptionCustomerMethod <ServerSideCustomerEncryptionMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServerSideEncryptionCustomerProvidedKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServerSideEncryptionCustomerProvidedKeyMD5>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Expression>k__BackingField;
    [CompilerGeneratedAttribute]
private ExpressionType <ExpressionType>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <RequestProgress>k__BackingField;
    [CompilerGeneratedAttribute]
private InputSerialization <InputSerialization>k__BackingField;
    [CompilerGeneratedAttribute]
private OutputSerialization <OutputSerialization>k__BackingField;
    [CompilerGeneratedAttribute]
private ScanRange <ScanRange>k__BackingField;
    [ObsoleteAttribute("Use BucketName instead")]
public string Bucket { get; public set; }
    public string BucketName { get; public set; }
    public string Key { get; public set; }
    public ServerSideEncryptionCustomerMethod ServerSideCustomerEncryptionMethod { get; public set; }
    [AWSPropertyAttribute]
public string ServerSideEncryptionCustomerProvidedKey { get; public set; }
    public string ServerSideEncryptionCustomerProvidedKeyMD5 { get; public set; }
    public string Expression { get; public set; }
    public ExpressionType ExpressionType { get; public set; }
    public Nullable`1<bool> RequestProgress { get; public set; }
    public InputSerialization InputSerialization { get; public set; }
    public OutputSerialization OutputSerialization { get; public set; }
    public ScanRange ScanRange { get; public set; }
    public string ExpectedBucketOwner { get; public set; }
    public string get_Bucket();
    public void set_Bucket(string value);
    [CompilerGeneratedAttribute]
public string get_BucketName();
    [CompilerGeneratedAttribute]
public void set_BucketName(string value);
    internal bool IsSetBucket();
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
public void set_Key(string value);
    internal bool IsSetKey();
    [CompilerGeneratedAttribute]
public ServerSideEncryptionCustomerMethod get_ServerSideCustomerEncryptionMethod();
    [CompilerGeneratedAttribute]
public void set_ServerSideCustomerEncryptionMethod(ServerSideEncryptionCustomerMethod value);
    internal bool IsSetServerSideCustomerEncryptionMethod();
    [CompilerGeneratedAttribute]
public string get_ServerSideEncryptionCustomerProvidedKey();
    [CompilerGeneratedAttribute]
public void set_ServerSideEncryptionCustomerProvidedKey(string value);
    internal bool IsSetServerSideEncryptionCustomerProvidedKey();
    [CompilerGeneratedAttribute]
public string get_ServerSideEncryptionCustomerProvidedKeyMD5();
    [CompilerGeneratedAttribute]
public void set_ServerSideEncryptionCustomerProvidedKeyMD5(string value);
    internal bool IsSetServerSideEncryptionCustomerProvidedKeyMD5();
    [CompilerGeneratedAttribute]
public string get_Expression();
    [CompilerGeneratedAttribute]
public void set_Expression(string value);
    internal bool IsSetExpression();
    [CompilerGeneratedAttribute]
public ExpressionType get_ExpressionType();
    [CompilerGeneratedAttribute]
public void set_ExpressionType(ExpressionType value);
    internal bool IsSetExpressionType();
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_RequestProgress();
    [CompilerGeneratedAttribute]
public void set_RequestProgress(Nullable`1<bool> value);
    internal bool IsSetRequestProgress();
    [CompilerGeneratedAttribute]
public InputSerialization get_InputSerialization();
    [CompilerGeneratedAttribute]
public void set_InputSerialization(InputSerialization value);
    internal bool IsSetInputSerialization();
    [CompilerGeneratedAttribute]
public OutputSerialization get_OutputSerialization();
    [CompilerGeneratedAttribute]
public void set_OutputSerialization(OutputSerialization value);
    internal bool IsSetOutputSerialization();
    [CompilerGeneratedAttribute]
public ScanRange get_ScanRange();
    [CompilerGeneratedAttribute]
public void set_ScanRange(ScanRange value);
    internal bool IsSetScanRange();
    public string get_ExpectedBucketOwner();
    public void set_ExpectedBucketOwner(string value);
    internal bool IsSetExpectedBucketOwner();
}
public class Amazon.S3.Model.SelectObjectContentResponse : AmazonWebServiceResponse {
    [CompilerGeneratedAttribute]
private ISelectObjectContentEventStream <Payload>k__BackingField;
    public ISelectObjectContentEventStream Payload { get; public set; }
    [CompilerGeneratedAttribute]
public ISelectObjectContentEventStream get_Payload();
    [CompilerGeneratedAttribute]
public void set_Payload(ISelectObjectContentEventStream value);
    internal bool IsSetPayload();
}
public class Amazon.S3.Model.SelectParameters : object {
    [CompilerGeneratedAttribute]
private InputSerialization <InputSerialization>k__BackingField;
    [CompilerGeneratedAttribute]
private ExpressionType <ExpressionType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Expression>k__BackingField;
    [CompilerGeneratedAttribute]
private OutputSerialization <OutputSerialization>k__BackingField;
    public InputSerialization InputSerialization { get; public set; }
    public ExpressionType ExpressionType { get; public set; }
    public string Expression { get; public set; }
    public OutputSerialization OutputSerialization { get; public set; }
    [CompilerGeneratedAttribute]
public InputSerialization get_InputSerialization();
    [CompilerGeneratedAttribute]
public void set_InputSerialization(InputSerialization value);
    internal bool IsSetInputSerialization();
    [CompilerGeneratedAttribute]
public ExpressionType get_ExpressionType();
    [CompilerGeneratedAttribute]
public void set_ExpressionType(ExpressionType value);
    internal bool IsSetExpressionType();
    [CompilerGeneratedAttribute]
public string get_Expression();
    [CompilerGeneratedAttribute]
public void set_Expression(string value);
    internal bool IsSetExpression();
    [CompilerGeneratedAttribute]
public OutputSerialization get_OutputSerialization();
    [CompilerGeneratedAttribute]
public void set_OutputSerialization(OutputSerialization value);
    internal bool IsSetOutputSerialization();
    internal void Marshall(string memberName, XmlWriter xmlWriter);
}
public class Amazon.S3.Model.ServerSideEncryptionByDefault : object {
    private string serverSideEncryptionKeyManagementServiceKeyId;
    private ServerSideEncryptionMethod serverSideEncryptionAlgorithm;
    [AWSPropertyAttribute]
public string ServerSideEncryptionKeyManagementServiceKeyId { get; public set; }
    public ServerSideEncryptionMethod ServerSideEncryptionAlgorithm { get; public set; }
    public string get_ServerSideEncryptionKeyManagementServiceKeyId();
    public void set_ServerSideEncryptionKeyManagementServiceKeyId(string value);
    internal bool IsSetServerSideEncryptionKeyManagementServiceKeyId();
    public ServerSideEncryptionMethod get_ServerSideEncryptionAlgorithm();
    public void set_ServerSideEncryptionAlgorithm(ServerSideEncryptionMethod value);
    internal bool IsSetServerSideEncryptionAlgorithm();
}
public class Amazon.S3.Model.ServerSideEncryptionConfiguration : object {
    private List`1<ServerSideEncryptionRule> serverSideEncryptionRules;
    public List`1<ServerSideEncryptionRule> ServerSideEncryptionRules { get; public set; }
    public List`1<ServerSideEncryptionRule> get_ServerSideEncryptionRules();
    public void set_ServerSideEncryptionRules(List`1<ServerSideEncryptionRule> value);
    internal bool IsSetServerSideEncryptionRules();
}
public class Amazon.S3.Model.ServerSideEncryptionRule : object {
    private ServerSideEncryptionByDefault serverSideEncryptionByDefault;
    private Nullable`1<bool> bucketKeyEnabled;
    public ServerSideEncryptionByDefault ServerSideEncryptionByDefault { get; public set; }
    public Nullable`1<bool> BucketKeyEnabled { get; public set; }
    public ServerSideEncryptionByDefault get_ServerSideEncryptionByDefault();
    public void set_ServerSideEncryptionByDefault(ServerSideEncryptionByDefault value);
    internal bool IsSetServerSideEncryptionByDefault();
    public Nullable`1<bool> get_BucketKeyEnabled();
    public void set_BucketKeyEnabled(Nullable`1<bool> value);
    internal bool IsSetBucketKeyEnabled();
}
public class Amazon.S3.Model.SessionCredentials : object {
    private string _accessKeyId;
    private Nullable`1<DateTime> _expiration;
    private string _secretAccessKey;
    private string _sessionToken;
    [AWSPropertyAttribute]
public string AccessKeyId { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<DateTime> Expiration { get; public set; }
    [AWSPropertyAttribute]
public string SecretAccessKey { get; public set; }
    [AWSPropertyAttribute]
public string SessionToken { get; public set; }
    public string get_AccessKeyId();
    public void set_AccessKeyId(string value);
    internal bool IsSetAccessKeyId();
    public Nullable`1<DateTime> get_Expiration();
    public void set_Expiration(Nullable`1<DateTime> value);
    internal bool IsSetExpiration();
    public string get_SecretAccessKey();
    public void set_SecretAccessKey(string value);
    internal bool IsSetSecretAccessKey();
    public string get_SessionToken();
    public void set_SessionToken(string value);
    internal bool IsSetSessionToken();
}
public class Amazon.S3.Model.SimplePrefix : object {
}
public class Amazon.S3.Model.SourceSelectionCriteria : object {
    private SseKmsEncryptedObjects sseKmsEncryptedObjects;
    private ReplicaModifications replicaModifications;
    public SseKmsEncryptedObjects SseKmsEncryptedObjects { get; public set; }
    public ReplicaModifications ReplicaModifications { get; public set; }
    public SseKmsEncryptedObjects get_SseKmsEncryptedObjects();
    public void set_SseKmsEncryptedObjects(SseKmsEncryptedObjects value);
    internal bool IsSetSseKmsEncryptedObjects();
    public ReplicaModifications get_ReplicaModifications();
    public void set_ReplicaModifications(ReplicaModifications value);
    internal bool IsSetReplicaModifications();
}
public class Amazon.S3.Model.SSEKMS : object {
    private string keyId;
    public string KeyId { get; public set; }
    public string get_KeyId();
    public void set_KeyId(string value);
    internal bool IsSetKeyId();
}
public class Amazon.S3.Model.SseKmsEncryptedObjects : object {
    private SseKmsEncryptedObjectsStatus sseKmsEncryptedObjectsStatus;
    public SseKmsEncryptedObjectsStatus SseKmsEncryptedObjectsStatus { get; public set; }
    public SseKmsEncryptedObjectsStatus get_SseKmsEncryptedObjectsStatus();
    public void set_SseKmsEncryptedObjectsStatus(SseKmsEncryptedObjectsStatus value);
    internal bool IsSetSseKmsEncryptedObjectsStatus();
}
public class Amazon.S3.Model.SSES3 : object {
}
public class Amazon.S3.Model.Stats : object {
    [CompilerGeneratedAttribute]
private long <BytesScanned>k__BackingField;
    [CompilerGeneratedAttribute]
private long <BytesProcessed>k__BackingField;
    [CompilerGeneratedAttribute]
private long <BytesReturned>k__BackingField;
    public long BytesScanned { get; public set; }
    public long BytesProcessed { get; public set; }
    public long BytesReturned { get; public set; }
    [CompilerGeneratedAttribute]
public long get_BytesScanned();
    [CompilerGeneratedAttribute]
public void set_BytesScanned(long value);
    [CompilerGeneratedAttribute]
public long get_BytesProcessed();
    [CompilerGeneratedAttribute]
public void set_BytesProcessed(long value);
    [CompilerGeneratedAttribute]
public long get_BytesReturned();
    [CompilerGeneratedAttribute]
public void set_BytesReturned(long value);
    internal static Stats Unmarshall(Byte[] payload);
}
public class Amazon.S3.Model.StatsEvent : object {
    [CompilerGeneratedAttribute]
private Stats <Details>k__BackingField;
    public Stats Details { get; public set; }
    public StatsEvent(IEventStreamMessage message);
    [CompilerGeneratedAttribute]
public Stats get_Details();
    [CompilerGeneratedAttribute]
public void set_Details(Stats value);
}
public class Amazon.S3.Model.StorageClassAnalysis : object {
    private StorageClassAnalysisDataExport storageClassAnalysisDataExport;
    public StorageClassAnalysisDataExport DataExport { get; public set; }
    public StorageClassAnalysisDataExport get_DataExport();
    public void set_DataExport(StorageClassAnalysisDataExport value);
    internal bool IsSetDataExport();
}
public class Amazon.S3.Model.StorageClassAnalysisDataExport : object {
    private StorageClassAnalysisSchemaVersion storageClassAnalysisSchemaVersion;
    private AnalyticsExportDestination analyticsExportDestination;
    public StorageClassAnalysisSchemaVersion OutputSchemaVersion { get; public set; }
    public AnalyticsExportDestination Destination { get; public set; }
    public StorageClassAnalysisSchemaVersion get_OutputSchemaVersion();
    public void set_OutputSchemaVersion(StorageClassAnalysisSchemaVersion value);
    internal bool IsSetOutputSchemaVersion();
    public AnalyticsExportDestination get_Destination();
    public void set_Destination(AnalyticsExportDestination value);
    internal bool IsSetDestination();
}
public abstract class Amazon.S3.Model.StreamResponse : AmazonWebServiceResponse {
    private bool disposed;
    private Stream responseStream;
    public Stream ResponseStream { get; public set; }
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
    public Stream get_ResponseStream();
    public void set_ResponseStream(Stream value);
    internal bool IsSetResponseStream();
}
public class Amazon.S3.Model.StreamSizeMismatchException : AmazonS3Exception {
    [CompilerGeneratedAttribute]
private long <ExpectedSize>k__BackingField;
    [CompilerGeneratedAttribute]
private long <ActualSize>k__BackingField;
    public long ExpectedSize { get; public set; }
    public long ActualSize { get; public set; }
    public StreamSizeMismatchException(string message);
    public StreamSizeMismatchException(string message, Exception innerException);
    public StreamSizeMismatchException(string message, long expectedSize, long actualSize, string requestId, string amazonId2);
    public StreamSizeMismatchException(string message, long expectedSize, long actualSize, string requestId, string amazonId2, string amazonCfId);
    public StreamSizeMismatchException(string message, Exception innerException, long expectedSize, long actualSize, string requestId, string amazonId2);
    public StreamSizeMismatchException(Exception innerException);
    public StreamSizeMismatchException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public StreamSizeMismatchException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public StreamSizeMismatchException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode, string amazonId2);
    [CompilerGeneratedAttribute]
public long get_ExpectedSize();
    [CompilerGeneratedAttribute]
public void set_ExpectedSize(long value);
    [CompilerGeneratedAttribute]
public long get_ActualSize();
    [CompilerGeneratedAttribute]
public void set_ActualSize(long value);
}
public class Amazon.S3.Model.Tag : object {
    private string key;
    private string value;
    public string Key { get; public set; }
    public string Value { get; public set; }
    public string get_Key();
    public void set_Key(string value);
    internal bool IsSetKey();
    public string get_Value();
    public void set_Value(string value);
    internal bool IsSetValue();
    internal void Marshall(string memberName, XmlWriter xmlWriter);
}
public class Amazon.S3.Model.Tagging : object {
    private List`1<Tag> tagSet;
    public List`1<Tag> TagSet { get; public set; }
    public List`1<Tag> get_TagSet();
    public void set_TagSet(List`1<Tag> value);
    internal void Marshall(string memberName, XmlWriter xmlWriter);
}
public class Amazon.S3.Model.TargetObjectKeyFormat : object {
    private PartitionedPrefix _partitionedPrefix;
    private SimplePrefix _simplePrefix;
    public PartitionedPrefix PartitionedPrefix { get; public set; }
    public SimplePrefix SimplePrefix { get; public set; }
    public PartitionedPrefix get_PartitionedPrefix();
    public void set_PartitionedPrefix(PartitionedPrefix value);
    internal bool IsSetPartitionedPrefix();
    public SimplePrefix get_SimplePrefix();
    public void set_SimplePrefix(SimplePrefix value);
    internal bool IsSetSimplePrefix();
}
public class Amazon.S3.Model.Tiering : object {
    private Nullable`1<int> days;
    private IntelligentTieringAccessTier accessTier;
    public Nullable`1<int> Days { get; public set; }
    public IntelligentTieringAccessTier AccessTier { get; public set; }
    public Nullable`1<int> get_Days();
    public void set_Days(Nullable`1<int> value);
    internal bool IsSetDays();
    public IntelligentTieringAccessTier get_AccessTier();
    public void set_AccessTier(IntelligentTieringAccessTier value);
    internal bool IsSetAccessTier();
}
public class Amazon.S3.Model.TopicConfiguration : NotificationConfiguration {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Topic>k__BackingField;
    public string Id { get; public set; }
    [ObsoleteAttribute("The Event property is now obsolete in favor the Events property.")]
public string Event { get; public set; }
    public string Topic { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    internal bool IsSetId();
    public string get_Event();
    public void set_Event(string value);
    [CompilerGeneratedAttribute]
public string get_Topic();
    [CompilerGeneratedAttribute]
public void set_Topic(string value);
    internal bool IsSetTopic();
}
public class Amazon.S3.Model.TransferProgressArgs : EventArgs {
    private long _incrementTransferred;
    private long _total;
    private long _transferred;
    public int PercentDone { get; }
    internal long IncrementTransferred { get; }
    public long TransferredBytes { get; }
    public long TotalBytes { get; }
    public TransferProgressArgs(long incrementTransferred, long transferred, long total);
    public int get_PercentDone();
    internal long get_IncrementTransferred();
    public long get_TransferredBytes();
    public long get_TotalBytes();
    public virtual string ToString();
}
public class Amazon.S3.Model.UnknownEventStreamEvent : UnknownEventStreamEvent {
    public UnknownEventStreamEvent(IEventStreamMessage receivedMessage);
    public UnknownEventStreamEvent(IEventStreamMessage receivedMessage, string eventType);
}
public class Amazon.S3.Model.UploadPartRequest : AmazonWebServiceRequest {
    private Stream inputStream;
    private string bucketName;
    private ChecksumAlgorithm _checksumAlgorithm;
    private string _checksumCRC32;
    private string _checksumCRC32C;
    private string _checksumSHA1;
    private string _checksumSHA256;
    private string md5Digest;
    private string expectedBucketOwner;
    private string key;
    private Nullable`1<int> partNumber;
    private RequestPayer requestPayer;
    private ServerSideEncryptionCustomerMethod serverSideCustomerEncryption;
    private string serverSideEncryptionCustomerProvidedKey;
    private string serverSideEncryptionCustomerProvidedKeyMD5;
    private string uploadId;
    private Nullable`1<long> partSize;
    private string filePath;
    private Nullable`1<long> filePosition;
    private bool useChunkEncoding;
    private bool lastPart;
    private bool calculateContentMD5Header;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <DisableDefaultChecksumValidation>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <DisablePayloadSigning>k__BackingField;
    [CompilerGeneratedAttribute]
private int <IVSize>k__BackingField;
    public Stream InputStream { get; public set; }
    public string BucketName { get; public set; }
    public ChecksumAlgorithm ChecksumAlgorithm { get; public set; }
    public string ChecksumCRC32 { get; public set; }
    public string ChecksumCRC32C { get; public set; }
    public string ChecksumSHA1 { get; public set; }
    public string ChecksumSHA256 { get; public set; }
    public string ExpectedBucketOwner { get; public set; }
    public string Key { get; public set; }
    public Nullable`1<int> PartNumber { get; public set; }
    public RequestPayer RequestPayer { get; public set; }
    public ServerSideEncryptionCustomerMethod ServerSideEncryptionCustomerMethod { get; public set; }
    [AWSPropertyAttribute]
public string ServerSideEncryptionCustomerProvidedKey { get; public set; }
    public string ServerSideEncryptionCustomerProvidedKeyMD5 { get; public set; }
    public string UploadId { get; public set; }
    public bool IsLastPart { get; public set; }
    [ObsoleteAttribute("This property is deprecated in favor of DisableDefaultChecksumValidation.")]
public Nullable`1<bool> DisableMD5Stream { get; public set; }
    public Nullable`1<bool> DisableDefaultChecksumValidation { get; public set; }
    public string MD5Digest { get; public set; }
    public Nullable`1<long> PartSize { get; public set; }
    public string FilePath { get; public set; }
    public Nullable`1<long> FilePosition { get; public set; }
    public bool UseChunkEncoding { get; public set; }
    public Nullable`1<bool> DisablePayloadSigning { get; public set; }
    public EventHandler`1<StreamTransferProgressArgs> StreamTransferProgress { get; public set; }
    protected bool IncludeSHA256Header { get; }
    protected bool Expect100Continue { get; }
    internal int IVSize { get; internal set; }
    public bool CalculateContentMD5Header { get; public set; }
    public Stream get_InputStream();
    public void set_InputStream(Stream value);
    internal bool IsSetInputStream();
    public string get_BucketName();
    public void set_BucketName(string value);
    internal bool IsSetBucketName();
    public ChecksumAlgorithm get_ChecksumAlgorithm();
    public void set_ChecksumAlgorithm(ChecksumAlgorithm value);
    internal bool IsSetChecksumAlgorithm();
    public string get_ChecksumCRC32();
    public void set_ChecksumCRC32(string value);
    internal bool IsSetChecksumCRC32();
    public string get_ChecksumCRC32C();
    public void set_ChecksumCRC32C(string value);
    internal bool IsSetChecksumCRC32C();
    public string get_ChecksumSHA1();
    public void set_ChecksumSHA1(string value);
    internal bool IsSetChecksumSHA1();
    public string get_ChecksumSHA256();
    public void set_ChecksumSHA256(string value);
    internal bool IsSetChecksumSHA256();
    public string get_ExpectedBucketOwner();
    public void set_ExpectedBucketOwner(string value);
    internal bool IsSetExpectedBucketOwner();
    public string get_Key();
    public void set_Key(string value);
    internal bool IsSetKey();
    public Nullable`1<int> get_PartNumber();
    public void set_PartNumber(Nullable`1<int> value);
    internal bool IsSetPartNumber();
    public RequestPayer get_RequestPayer();
    public void set_RequestPayer(RequestPayer value);
    internal bool IsSetRequestPayer();
    public ServerSideEncryptionCustomerMethod get_ServerSideEncryptionCustomerMethod();
    public void set_ServerSideEncryptionCustomerMethod(ServerSideEncryptionCustomerMethod value);
    internal bool IsSetServerSideEncryptionCustomerMethod();
    public string get_ServerSideEncryptionCustomerProvidedKey();
    public void set_ServerSideEncryptionCustomerProvidedKey(string value);
    internal bool IsSetServerSideEncryptionCustomerProvidedKey();
    public string get_ServerSideEncryptionCustomerProvidedKeyMD5();
    public void set_ServerSideEncryptionCustomerProvidedKeyMD5(string value);
    internal bool IsSetServerSideEncryptionCustomerProvidedKeyMD5();
    public string get_UploadId();
    public void set_UploadId(string value);
    internal bool IsSetUploadId();
    public bool get_IsLastPart();
    public void set_IsLastPart(bool value);
    public Nullable`1<bool> get_DisableMD5Stream();
    public void set_DisableMD5Stream(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_DisableDefaultChecksumValidation();
    [CompilerGeneratedAttribute]
public void set_DisableDefaultChecksumValidation(Nullable`1<bool> value);
    public string get_MD5Digest();
    public void set_MD5Digest(string value);
    internal bool IsSetMD5Digest();
    public Nullable`1<long> get_PartSize();
    public void set_PartSize(Nullable`1<long> value);
    internal bool IsSetPartSize();
    public string get_FilePath();
    public void set_FilePath(string value);
    internal bool IsSetFilePath();
    public Nullable`1<long> get_FilePosition();
    public void set_FilePosition(Nullable`1<long> value);
    public bool get_UseChunkEncoding();
    public void set_UseChunkEncoding(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_DisablePayloadSigning();
    [CompilerGeneratedAttribute]
public void set_DisablePayloadSigning(Nullable`1<bool> value);
    internal bool IsSetFilePosition();
    public EventHandler`1<StreamTransferProgressArgs> get_StreamTransferProgress();
    public void set_StreamTransferProgress(EventHandler`1<StreamTransferProgressArgs> value);
    protected virtual bool get_IncludeSHA256Header();
    protected virtual bool get_Expect100Continue();
    [CompilerGeneratedAttribute]
internal int get_IVSize();
    [CompilerGeneratedAttribute]
internal void set_IVSize(int value);
    public bool get_CalculateContentMD5Header();
    public void set_CalculateContentMD5Header(bool value);
    internal void SetupForFilePath();
}
public class Amazon.S3.Model.UploadPartResponse : AmazonWebServiceResponse {
    private ServerSideEncryptionMethod serverSideEncryption;
    private string eTag;
    private Nullable`1<int> partNumber;
    private RequestCharged requestCharged;
    private Nullable`1<bool> bucketKeyEnabled;
    private string _checksumCRC32;
    private string _checksumCRC32C;
    private string _checksumSHA1;
    private string _checksumSHA256;
    public ServerSideEncryptionMethod ServerSideEncryptionMethod { get; public set; }
    public string ETag { get; public set; }
    public Nullable`1<int> PartNumber { get; public set; }
    public RequestCharged RequestCharged { get; public set; }
    public Nullable`1<bool> BucketKeyEnabled { get; public set; }
    public string ChecksumCRC32 { get; public set; }
    public string ChecksumCRC32C { get; public set; }
    public string ChecksumSHA1 { get; public set; }
    public string ChecksumSHA256 { get; public set; }
    public ServerSideEncryptionMethod get_ServerSideEncryptionMethod();
    public void set_ServerSideEncryptionMethod(ServerSideEncryptionMethod value);
    public string get_ETag();
    public void set_ETag(string value);
    internal bool IsSetETag();
    public Nullable`1<int> get_PartNumber();
    public void set_PartNumber(Nullable`1<int> value);
    public RequestCharged get_RequestCharged();
    public void set_RequestCharged(RequestCharged value);
    internal bool IsSetRequestCharged();
    public Nullable`1<bool> get_BucketKeyEnabled();
    public void set_BucketKeyEnabled(Nullable`1<bool> value);
    internal bool IsSetBucketKeyEnabled();
    public string get_ChecksumCRC32();
    public void set_ChecksumCRC32(string value);
    internal bool IsSetChecksumCRC32();
    public string get_ChecksumCRC32C();
    public void set_ChecksumCRC32C(string value);
    internal bool IsSetChecksumCRC32C();
    public string get_ChecksumSHA1();
    public void set_ChecksumSHA1(string value);
    internal bool IsSetChecksumSHA1();
    public string get_ChecksumSHA256();
    public void set_ChecksumSHA256(string value);
    internal bool IsSetChecksumSHA256();
}
public class Amazon.S3.Model.WebsiteConfiguration : object {
    private string errorDocument;
    private string indexDocumentSuffix;
    private RoutingRuleRedirect redirectAllRequestsTo;
    private List`1<RoutingRule> routingRules;
    public string ErrorDocument { get; public set; }
    public string IndexDocumentSuffix { get; public set; }
    public RoutingRuleRedirect RedirectAllRequestsTo { get; public set; }
    public List`1<RoutingRule> RoutingRules { get; public set; }
    public string get_ErrorDocument();
    public void set_ErrorDocument(string value);
    internal bool IsSetErrorDocument();
    public string get_IndexDocumentSuffix();
    public void set_IndexDocumentSuffix(string value);
    internal bool IsSetIndexDocumentSuffix();
    public RoutingRuleRedirect get_RedirectAllRequestsTo();
    public void set_RedirectAllRequestsTo(RoutingRuleRedirect value);
    internal bool IsSetRedirectAllRequestsTo();
    public List`1<RoutingRule> get_RoutingRules();
    public void set_RoutingRules(List`1<RoutingRule> value);
    internal bool IsSetRoutingRules();
}
public class Amazon.S3.Model.WriteGetObjectResponseRequest : AmazonWebServiceRequest {
    private string requestRoute;
    private string requestToken;
    private Nullable`1<int> statusCode;
    private string errorCode;
    private string errorMessage;
    private string acceptRanges;
    private string cacheControl;
    private string _checksumCRC32;
    private string _checksumCRC32C;
    private string _checksumSHA1;
    private string _checksumSHA256;
    private string contentDisposition;
    private string contentEncoding;
    private string contentLanguage;
    private Nullable`1<long> contentLength;
    private string contentRange;
    private string contentType;
    private Nullable`1<bool> deleteMarker;
    private string eTag;
    private Nullable`1<DateTime> expires;
    private string expiration;
    private Nullable`1<DateTime> lastModified;
    private Nullable`1<int> missingMeta;
    private MetadataCollection metadataCollection;
    private ObjectLockMode objectLockMode;
    private ObjectLockLegalHoldStatus objectLockLegalHoldStatus;
    private Nullable`1<DateTime> objectLockRetainUntilDate;
    private Nullable`1<int> partsCount;
    private ReplicationStatus replicationStatus;
    private RequestCharged requestCharged;
    private string restore;
    private ServerSideEncryptionMethod serverSideEncryption;
    private ServerSideEncryptionCustomerMethod sSECustomerAlgorithm;
    private string sSEKMSKeyId;
    private string sSECustomerKeyMD5;
    private S3StorageClass storageClass;
    private Nullable`1<int> tagCount;
    private string versionId;
    private Nullable`1<bool> bucketKeyEnabled;
    private Stream inputStream;
    public string RequestRoute { get; public set; }
    public string RequestToken { get; public set; }
    public Nullable`1<int> StatusCode { get; public set; }
    public string ErrorCode { get; public set; }
    public string ErrorMessage { get; public set; }
    public string AcceptRanges { get; public set; }
    public string CacheControl { get; public set; }
    public string ChecksumCRC32 { get; public set; }
    public string ChecksumCRC32C { get; public set; }
    public string ChecksumSHA1 { get; public set; }
    public string ChecksumSHA256 { get; public set; }
    public string ContentDisposition { get; public set; }
    public string ContentEncoding { get; public set; }
    public string ContentLanguage { get; public set; }
    public Nullable`1<long> ContentLength { get; public set; }
    public string ContentRange { get; public set; }
    public string ContentType { get; public set; }
    public Nullable`1<bool> DeleteMarker { get; public set; }
    public string ETag { get; public set; }
    public Nullable`1<DateTime> Expires { get; public set; }
    public string Expiration { get; public set; }
    public Nullable`1<DateTime> LastModified { get; public set; }
    public Nullable`1<int> MissingMeta { get; public set; }
    public MetadataCollection Metadata { get; }
    public ObjectLockMode ObjectLockMode { get; public set; }
    public ObjectLockLegalHoldStatus ObjectLockLegalHoldStatus { get; public set; }
    public Nullable`1<DateTime> ObjectLockRetainUntilDate { get; public set; }
    public Nullable`1<int> PartsCount { get; public set; }
    public ReplicationStatus ReplicationStatus { get; public set; }
    public RequestCharged RequestCharged { get; public set; }
    public string Restore { get; public set; }
    public ServerSideEncryptionMethod ServerSideEncryptionMethod { get; public set; }
    public ServerSideEncryptionCustomerMethod SSECustomerAlgorithm { get; public set; }
    public string SSEKMSKeyId { get; public set; }
    public string SSECustomerKeyMD5 { get; public set; }
    public S3StorageClass StorageClass { get; public set; }
    public Nullable`1<int> TagCount { get; public set; }
    public string VersionId { get; public set; }
    public Nullable`1<bool> BucketKeyEnabled { get; public set; }
    public Stream Body { get; public set; }
    public string get_RequestRoute();
    public void set_RequestRoute(string value);
    internal bool IsSetRequestRoute();
    public string get_RequestToken();
    public void set_RequestToken(string value);
    internal bool IsSetRequestToken();
    public Nullable`1<int> get_StatusCode();
    public void set_StatusCode(Nullable`1<int> value);
    internal bool IsSetStatusCode();
    public string get_ErrorCode();
    public void set_ErrorCode(string value);
    internal bool IsSetErrorCode();
    public string get_ErrorMessage();
    public void set_ErrorMessage(string value);
    internal bool IsSetErrorMessage();
    public string get_AcceptRanges();
    public void set_AcceptRanges(string value);
    internal bool IsSetAcceptRanges();
    public string get_CacheControl();
    public void set_CacheControl(string value);
    internal bool IsSetCacheControl();
    public string get_ChecksumCRC32();
    public void set_ChecksumCRC32(string value);
    internal bool IsSetChecksumCRC32();
    public string get_ChecksumCRC32C();
    public void set_ChecksumCRC32C(string value);
    internal bool IsSetChecksumCRC32C();
    public string get_ChecksumSHA1();
    public void set_ChecksumSHA1(string value);
    internal bool IsSetChecksumSHA1();
    public string get_ChecksumSHA256();
    public void set_ChecksumSHA256(string value);
    internal bool IsSetChecksumSHA256();
    public string get_ContentDisposition();
    public void set_ContentDisposition(string value);
    internal bool IsSetContentDisposition();
    public string get_ContentEncoding();
    public void set_ContentEncoding(string value);
    internal bool IsSetContentEncoding();
    public string get_ContentLanguage();
    public void set_ContentLanguage(string value);
    internal bool IsSetContentLanguage();
    public Nullable`1<long> get_ContentLength();
    public void set_ContentLength(Nullable`1<long> value);
    internal bool IsSetContentLength();
    public string get_ContentRange();
    public void set_ContentRange(string value);
    internal bool IsSetContentRange();
    public string get_ContentType();
    public void set_ContentType(string value);
    internal bool IsSetContentType();
    public Nullable`1<bool> get_DeleteMarker();
    public void set_DeleteMarker(Nullable`1<bool> value);
    internal bool IsSetDeleteMarker();
    public string get_ETag();
    public void set_ETag(string value);
    internal bool IsSetETag();
    public Nullable`1<DateTime> get_Expires();
    public void set_Expires(Nullable`1<DateTime> value);
    internal bool IsSetExpires();
    public string get_Expiration();
    public void set_Expiration(string value);
    internal bool IsSetExpiration();
    public Nullable`1<DateTime> get_LastModified();
    public void set_LastModified(Nullable`1<DateTime> value);
    internal bool IsSetLastModified();
    public Nullable`1<int> get_MissingMeta();
    public void set_MissingMeta(Nullable`1<int> value);
    internal bool IsSetMissingMeta();
    public MetadataCollection get_Metadata();
    public ObjectLockMode get_ObjectLockMode();
    public void set_ObjectLockMode(ObjectLockMode value);
    internal bool IsSetObjectLockMode();
    public ObjectLockLegalHoldStatus get_ObjectLockLegalHoldStatus();
    public void set_ObjectLockLegalHoldStatus(ObjectLockLegalHoldStatus value);
    internal bool IsSetObjectLockLegalHoldStatus();
    public Nullable`1<DateTime> get_ObjectLockRetainUntilDate();
    public void set_ObjectLockRetainUntilDate(Nullable`1<DateTime> value);
    internal bool IsSetObjectLockRetainUntilDate();
    public Nullable`1<int> get_PartsCount();
    public void set_PartsCount(Nullable`1<int> value);
    internal bool IsSetPartsCount();
    public ReplicationStatus get_ReplicationStatus();
    public void set_ReplicationStatus(ReplicationStatus value);
    internal bool IsSetReplicationStatus();
    public RequestCharged get_RequestCharged();
    public void set_RequestCharged(RequestCharged value);
    internal bool IsSetRequestCharged();
    public string get_Restore();
    public void set_Restore(string value);
    internal bool IsSetRestore();
    public ServerSideEncryptionMethod get_ServerSideEncryptionMethod();
    public void set_ServerSideEncryptionMethod(ServerSideEncryptionMethod value);
    internal bool IsSetServerSideEncryptionMethod();
    public ServerSideEncryptionCustomerMethod get_SSECustomerAlgorithm();
    public void set_SSECustomerAlgorithm(ServerSideEncryptionCustomerMethod value);
    internal bool IsSetSSECustomerAlgorithm();
    public string get_SSEKMSKeyId();
    public void set_SSEKMSKeyId(string value);
    internal bool IsSetSSEKMSKeyId();
    public string get_SSECustomerKeyMD5();
    public void set_SSECustomerKeyMD5(string value);
    internal bool IsSetSSECustomerKeyMD5();
    public S3StorageClass get_StorageClass();
    public void set_StorageClass(S3StorageClass value);
    internal bool IsSetStorageClass();
    public Nullable`1<int> get_TagCount();
    public void set_TagCount(Nullable`1<int> value);
    internal bool IsSetTagCount();
    public string get_VersionId();
    public void set_VersionId(string value);
    internal bool IsSetVersionId();
    public Nullable`1<bool> get_BucketKeyEnabled();
    public void set_BucketKeyEnabled(Nullable`1<bool> value);
    internal bool IsSetBucketKeyEnabled();
    public Stream get_Body();
    public void set_Body(Stream value);
    internal bool IsSetInputStream();
}
public class Amazon.S3.Model.WriteGetObjectResponseResponse : AmazonWebServiceResponse {
}
public class Amazon.S3.Model.WriteObjectProgressArgs : TransferProgressArgs {
    [CompilerGeneratedAttribute]
private string <BucketName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VersionId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsCompleted>k__BackingField;
    public string BucketName { get; private set; }
    public string Key { get; private set; }
    public string VersionId { get; private set; }
    public string FilePath { get; private set; }
    public bool IsCompleted { get; private set; }
    internal WriteObjectProgressArgs(string bucketName, string key, string versionId, long incrementTransferred, long transferred, long total, bool completed);
    internal WriteObjectProgressArgs(string bucketName, string key, string filePath, string versionId, long incrementTransferred, long transferred, long total, bool completed);
    [CompilerGeneratedAttribute]
public string get_BucketName();
    [CompilerGeneratedAttribute]
private void set_BucketName(string value);
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
private void set_Key(string value);
    [CompilerGeneratedAttribute]
public string get_VersionId();
    [CompilerGeneratedAttribute]
private void set_VersionId(string value);
    [CompilerGeneratedAttribute]
public string get_FilePath();
    [CompilerGeneratedAttribute]
private void set_FilePath(string value);
    [CompilerGeneratedAttribute]
public bool get_IsCompleted();
    [CompilerGeneratedAttribute]
private void set_IsCompleted(bool value);
}
public class Amazon.S3.NotificationEvents : object {
    public static string ReducedRedundancyLostObject;
    private static NotificationEvents();
}
public class Amazon.S3.ObjectAttributes : ConstantClass {
    public static ObjectAttributes Checksum;
    public static ObjectAttributes ETag;
    public static ObjectAttributes ObjectParts;
    public static ObjectAttributes ObjectSize;
    public static ObjectAttributes StorageClass;
    public ObjectAttributes(string value);
    private static ObjectAttributes();
    public static ObjectAttributes FindValue(string value);
    public static ObjectAttributes op_Implicit(string value);
}
public class Amazon.S3.ObjectLockEnabled : ConstantClass {
    public static ObjectLockEnabled Enabled;
    public ObjectLockEnabled(string value);
    private static ObjectLockEnabled();
    public static ObjectLockEnabled FindValue(string value);
    public static ObjectLockEnabled op_Implicit(string value);
}
public class Amazon.S3.ObjectLockLegalHoldStatus : ConstantClass {
    public static ObjectLockLegalHoldStatus On;
    public static ObjectLockLegalHoldStatus Off;
    public ObjectLockLegalHoldStatus(string value);
    private static ObjectLockLegalHoldStatus();
    public static ObjectLockLegalHoldStatus FindValue(string value);
    public static ObjectLockLegalHoldStatus op_Implicit(string value);
}
public class Amazon.S3.ObjectLockMode : ConstantClass {
    public static ObjectLockMode Governance;
    public static ObjectLockMode Compliance;
    public ObjectLockMode(string value);
    private static ObjectLockMode();
    public static ObjectLockMode FindValue(string value);
    public static ObjectLockMode op_Implicit(string value);
}
public class Amazon.S3.ObjectLockRetentionMode : ConstantClass {
    public static ObjectLockRetentionMode Governance;
    public static ObjectLockRetentionMode Compliance;
    public ObjectLockRetentionMode(string value);
    private static ObjectLockRetentionMode();
    public static ObjectLockRetentionMode FindValue(string value);
    public static ObjectLockRetentionMode op_Implicit(string value);
}
public class Amazon.S3.ObjectOwnership : ConstantClass {
    public static ObjectOwnership BucketOwnerEnforced;
    public static ObjectOwnership BucketOwnerPreferred;
    public static ObjectOwnership ObjectWriter;
    public ObjectOwnership(string value);
    private static ObjectOwnership();
    public static ObjectOwnership FindValue(string value);
    public static ObjectOwnership op_Implicit(string value);
}
public class Amazon.S3.OptionalObjectAttributes : ConstantClass {
    public static OptionalObjectAttributes RestoreStatus;
    public OptionalObjectAttributes(string value);
    private static OptionalObjectAttributes();
    public static OptionalObjectAttributes FindValue(string value);
    public static OptionalObjectAttributes op_Implicit(string value);
}
public class Amazon.S3.OwnerOverride : ConstantClass {
    public static OwnerOverride Destination;
    public OwnerOverride(string value);
    private static OwnerOverride();
    public static OwnerOverride FindValue(string value);
    public static OwnerOverride op_Implicit(string value);
}
public class Amazon.S3.PartitionDateSource : ConstantClass {
    public static PartitionDateSource DeliveryTime;
    public static PartitionDateSource EventTime;
    public PartitionDateSource(string value);
    private static PartitionDateSource();
    public static PartitionDateSource FindValue(string value);
    public static PartitionDateSource op_Implicit(string value);
}
public enum Amazon.S3.Protocol : Enum {
    public int value__;
    public static Protocol HTTPS;
    public static Protocol HTTP;
}
public class Amazon.S3.PutBucketEncryptionResponse : AmazonWebServiceResponse {
}
public class Amazon.S3.QuoteFields : ConstantClass {
    public static QuoteFields Always;
    public static QuoteFields AsNeeded;
    public QuoteFields(string value);
    private static QuoteFields();
    public static QuoteFields FindValue(string value);
    public static QuoteFields op_Implicit(string value);
}
public class Amazon.S3.ReplicaModificationsStatus : ConstantClass {
    public static ReplicaModificationsStatus Enabled;
    public static ReplicaModificationsStatus Disabled;
    public ReplicaModificationsStatus(string value);
    private static ReplicaModificationsStatus();
    public static ReplicaModificationsStatus FindValue(string value);
    public static ReplicaModificationsStatus op_Implicit(string value);
}
public class Amazon.S3.ReplicationRuleStatus : ConstantClass {
    public static ReplicationRuleStatus Enabled;
    public static ReplicationRuleStatus Disabled;
    public ReplicationRuleStatus(string value);
    private static ReplicationRuleStatus();
    public static ReplicationRuleStatus FindValue(string value);
    public static ReplicationRuleStatus op_Implicit(string value);
}
public class Amazon.S3.ReplicationStatus : ConstantClass {
    public static ReplicationStatus Pending;
    public static ReplicationStatus Completed;
    public static ReplicationStatus Replica;
    public static ReplicationStatus Failed;
    public ReplicationStatus(string value);
    private static ReplicationStatus();
    public static ReplicationStatus FindValue(string value);
    public static ReplicationStatus op_Implicit(string value);
}
public class Amazon.S3.ReplicationTimeStatus : ConstantClass {
    public static ReplicationTimeStatus Enabled;
    public static ReplicationTimeStatus Disabled;
    public ReplicationTimeStatus(string value);
    private static ReplicationTimeStatus();
    public static ReplicationTimeStatus FindValue(string value);
    public static ReplicationTimeStatus op_Implicit(string value);
}
public class Amazon.S3.RequestCharged : ConstantClass {
    public static RequestCharged Requester;
    public RequestCharged(string value);
    private static RequestCharged();
    public static RequestCharged FindValue(string value);
    public static RequestCharged op_Implicit(string value);
}
public class Amazon.S3.RequestPayer : ConstantClass {
    public static RequestPayer Requester;
    public RequestPayer(string value);
    private static RequestPayer();
    public static RequestPayer FindValue(string value);
    public static RequestPayer op_Implicit(string value);
}
public class Amazon.S3.RestoreRequestType : ConstantClass {
    public static RestoreRequestType SELECT;
    public RestoreRequestType(string value);
    private static RestoreRequestType();
    public static RestoreRequestType FindValue(string value);
    public static RestoreRequestType op_Implicit(string value);
}
public class Amazon.S3.S3CannedACL : ConstantClass {
    public static S3CannedACL NoACL;
    public static S3CannedACL Private;
    public static S3CannedACL PublicRead;
    public static S3CannedACL PublicReadWrite;
    public static S3CannedACL AuthenticatedRead;
    public static S3CannedACL AWSExecRead;
    public static S3CannedACL BucketOwnerRead;
    public static S3CannedACL BucketOwnerFullControl;
    public static S3CannedACL LogDeliveryWrite;
    public S3CannedACL(string value);
    private static S3CannedACL();
    public static S3CannedACL FindValue(string value);
    public static S3CannedACL op_Implicit(string value);
}
public enum Amazon.S3.S3MetadataDirective : Enum {
    public int value__;
    public static S3MetadataDirective COPY;
    public static S3MetadataDirective REPLACE;
}
public class Amazon.S3.S3OutpostResource : object {
    private Arn _arn;
    private string _outpostId;
    [CompilerGeneratedAttribute]
private string <AccessPointName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    public string OutpostId { get; public set; }
    public string AccessPointName { get; public set; }
    public string Key { get; public set; }
    public string FullAccessPointName { get; }
    public S3OutpostResource(Arn arn);
    public string get_OutpostId();
    public void set_OutpostId(string value);
    [CompilerGeneratedAttribute]
public string get_AccessPointName();
    [CompilerGeneratedAttribute]
public void set_AccessPointName(string value);
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
public void set_Key(string value);
    public string get_FullAccessPointName();
}
public class Amazon.S3.S3Permission : ConstantClass {
    public static S3Permission READ;
    public static S3Permission WRITE;
    public static S3Permission READ_ACP;
    public static S3Permission WRITE_ACP;
    public static S3Permission FULL_CONTROL;
    public static S3Permission RESTORE_OBJECT;
    [CompilerGeneratedAttribute]
private string <HeaderName>k__BackingField;
    public string HeaderName { get; private set; }
    public S3Permission(string value);
    public S3Permission(string value, string headerName);
    private static S3Permission();
    [CompilerGeneratedAttribute]
public string get_HeaderName();
    [CompilerGeneratedAttribute]
private void set_HeaderName(string value);
    public static S3Permission FindValue(string value);
    public static S3Permission op_Implicit(string value);
}
internal enum Amazon.S3.S3QueryParameter : Enum {
    public int value__;
    public static S3QueryParameter Action;
    public static S3QueryParameter Authorization;
    public static S3QueryParameter BucketVersion;
    public static S3QueryParameter CanonicalizedResource;
    public static S3QueryParameter ContentBody;
    public static S3QueryParameter ContentLength;
    public static S3QueryParameter ContentType;
    public static S3QueryParameter DestinationBucket;
    public static S3QueryParameter Expires;
    public static S3QueryParameter Key;
    public static S3QueryParameter Query;
    public static S3QueryParameter QueryToSign;
    public static S3QueryParameter Range;
    public static S3QueryParameter RequestAddress;
    public static S3QueryParameter RequestTimeout;
    public static S3QueryParameter RequestReadWriteTimeout;
    public static S3QueryParameter Url;
    public static S3QueryParameter Verb;
    public static S3QueryParameter VerifyChecksum;
    public static S3QueryParameter MaxUploads;
    public static S3QueryParameter KeyMarker;
    public static S3QueryParameter UploadIdMarker;
}
public class Amazon.S3.S3Region : ConstantClass {
    [ObsoleteAttribute("This constant is obsolete. Usage of this property should be migrated to the USEast1 constant")]
public static S3Region US;
    [ObsoleteAttribute("This constant is obsolete. Usage of this property should be migrated to the EUWest1 constant")]
public static S3Region EU;
    [ObsoleteAttribute("This constant is obsolete. Usage of this property should be migrated to the USEast2 constant")]
public static S3Region USE2;
    [ObsoleteAttribute("This constant is obsolete. Usage of this property should be migrated to the EUNorth1 constant")]
public static S3Region EUN1;
    [ObsoleteAttribute("This constant is obsolete. Usage of this property should be migrated to the EUWest1 constant")]
public static S3Region EUW1;
    [ObsoleteAttribute("This constant is obsolete. Usage of this property should be migrated to the EUWest2 constant")]
public static S3Region EUW2;
    [ObsoleteAttribute("This constant is obsolete. Usage of this property should be migrated to the EUWest3 constant")]
public static S3Region EUW3;
    [ObsoleteAttribute("This constant is obsolete. Usage of this property should be migrated to the EUCentral1 constant")]
public static S3Region EUC1;
    [ObsoleteAttribute("This constant is obsolete. Usage of this property should be migrated to the EUSouth1 constant")]
public static S3Region EUS1;
    [ObsoleteAttribute("This constant is obsolete. Usage of this property should be migrated to the USWest1 constant")]
public static S3Region USW1;
    [ObsoleteAttribute("This constant is obsolete. Usage of this property should be migrated to the USWest2 constant")]
public static S3Region USW2;
    [ObsoleteAttribute("This constant is obsolete. Usage of this property should be migrated to the USGovCloudEast1 constant")]
public static S3Region GOVE1;
    [ObsoleteAttribute("This constant is obsolete. Usage of this property should be migrated to the USGovCloudWest1 constant")]
public static S3Region GOVW1;
    [ObsoleteAttribute("This constant is obsolete. Usage of this property should be migrated to the APEast1 constant")]
public static S3Region APE1;
    [ObsoleteAttribute("This constant is obsolete. Usage of this property should be migrated to the APSoutheast1 constant")]
public static S3Region APS1;
    [ObsoleteAttribute("This constant is obsolete. Usage of this property should be migrated to the APSoutheast2 constant")]
public static S3Region APS2;
    [ObsoleteAttribute("This constant is obsolete. Usage of this property should be migrated to the APNortheast1 constant")]
public static S3Region APN1;
    [ObsoleteAttribute("This constant is obsolete. Usage of this property should be migrated to the APNortheast2 constant")]
public static S3Region APN2;
    [ObsoleteAttribute("This constant is obsolete. Usage of this property should be migrated to the APNortheast3 constant")]
public static S3Region APN3;
    [ObsoleteAttribute("This constant is obsolete. Usage of this property should be migrated to the APSouth1 constant")]
public static S3Region APS3;
    [ObsoleteAttribute("This constant is obsolete. Usage of this property should be migrated to the SAEast1 constant")]
public static S3Region SAE1;
    [ObsoleteAttribute("This constant is obsolete. Usage of this property should be migrated to the CNNorth1 constant")]
public static S3Region CN1;
    [ObsoleteAttribute("This constant is obsolete. Usage of this property should be migrated to the CNNorthWest1 constant")]
public static S3Region CNW1;
    [ObsoleteAttribute("This constant is obsolete. Usage of this property should be migrated to the CACentral1 constant")]
public static S3Region CAN1;
    [ObsoleteAttribute("This constant is obsolete. Usage of this property should be migrated to the MESouth1 constant")]
public static S3Region MES1;
    [ObsoleteAttribute("This constant is obsolete. Usage of this property should be migrated to the AFSouth1 constant")]
public static S3Region AFS1;
    [ObsoleteAttribute("This constant is obsolete. Usage of this property should be migrated to the USWest1 constant")]
public static S3Region SFO;
    [ObsoleteAttribute("This constant is obsolete. Usage of this property should be migrated to the CNNorth1 constant")]
public static S3Region CN;
    [ObsoleteAttribute("This constant is obsolete. Usage of this property should be migrated to the USGovCloudWest1 constant")]
public static S3Region GOV;
    public static S3Region AFSouth1;
    public static S3Region APEast1;
    public static S3Region APNortheast1;
    public static S3Region APNortheast2;
    public static S3Region APNortheast3;
    public static S3Region APSouth1;
    public static S3Region APSouth2;
    public static S3Region APSoutheast1;
    public static S3Region APSoutheast2;
    public static S3Region APSoutheast3;
    public static S3Region APSoutheast4;
    public static S3Region CACentral1;
    public static S3Region CAWest1;
    public static S3Region EUCentral1;
    public static S3Region EUCentral2;
    public static S3Region EUNorth1;
    public static S3Region EUSouth1;
    public static S3Region EUSouth2;
    public static S3Region EUWest1;
    public static S3Region EUWest2;
    public static S3Region EUWest3;
    public static S3Region ILCentral1;
    public static S3Region MECentral1;
    public static S3Region MESouth1;
    public static S3Region SAEast1;
    public static S3Region USEast1;
    public static S3Region USEast2;
    public static S3Region USWest1;
    public static S3Region USWest2;
    public static S3Region CNNorth1;
    public static S3Region CNNorthWest1;
    public static S3Region USGovCloudEast1;
    public static S3Region USGovCloudWest1;
    public static S3Region USIsoEast1;
    public static S3Region USIsoWest1;
    public static S3Region USIsobEast1;
    public static S3Region EUIsoeWest1;
    public S3Region(string value);
    private static S3Region();
    public static S3Region FindValue(string value);
    public static S3Region op_Implicit(string value);
}
public class Amazon.S3.S3StorageClass : ConstantClass {
    public static S3StorageClass DeepArchive;
    public static S3StorageClass Glacier;
    public static S3StorageClass GlacierInstantRetrieval;
    public static S3StorageClass IntelligentTiering;
    public static S3StorageClass OneZoneInfrequentAccess;
    public static S3StorageClass Outposts;
    public static S3StorageClass ReducedRedundancy;
    public static S3StorageClass Standard;
    public static S3StorageClass StandardInfrequentAccess;
    public static S3StorageClass Snow;
    public static S3StorageClass ExpressOnezone;
    public S3StorageClass(string value);
    private static S3StorageClass();
    public static S3StorageClass FindValue(string value);
    public static S3StorageClass op_Implicit(string value);
}
public class Amazon.S3.ServerSideEncryptionCustomerMethod : ConstantClass {
    public static ServerSideEncryptionCustomerMethod None;
    public static ServerSideEncryptionCustomerMethod AES256;
    public ServerSideEncryptionCustomerMethod(string value);
    private static ServerSideEncryptionCustomerMethod();
    public static ServerSideEncryptionCustomerMethod FindValue(string value);
    public static ServerSideEncryptionCustomerMethod op_Implicit(string value);
}
public class Amazon.S3.ServerSideEncryptionMethod : ConstantClass {
    public static ServerSideEncryptionMethod None;
    public static ServerSideEncryptionMethod AES256;
    public static ServerSideEncryptionMethod AWSKMS;
    public static ServerSideEncryptionMethod AWSKMSDSSE;
    public ServerSideEncryptionMethod(string value);
    private static ServerSideEncryptionMethod();
    public static ServerSideEncryptionMethod FindValue(string value);
    public static ServerSideEncryptionMethod op_Implicit(string value);
}
public class Amazon.S3.SessionMode : ConstantClass {
    public static SessionMode ReadOnly;
    public static SessionMode ReadWrite;
    public SessionMode(string value);
    private static SessionMode();
    public static SessionMode FindValue(string value);
    public static SessionMode op_Implicit(string value);
}
public class Amazon.S3.SseKmsEncryptedObjectsStatus : ConstantClass {
    public static SseKmsEncryptedObjectsStatus Enabled;
    public static SseKmsEncryptedObjectsStatus Disabled;
    public SseKmsEncryptedObjectsStatus(string value);
    private static SseKmsEncryptedObjectsStatus();
    public static SseKmsEncryptedObjectsStatus FindValue(string value);
    public static SseKmsEncryptedObjectsStatus op_Implicit(string value);
}
public class Amazon.S3.StorageClassAnalysisSchemaVersion : ConstantClass {
    public static StorageClassAnalysisSchemaVersion V_1;
    public StorageClassAnalysisSchemaVersion(string value);
    private static StorageClassAnalysisSchemaVersion();
    public static StorageClassAnalysisSchemaVersion FindValue(string value);
    public static StorageClassAnalysisSchemaVersion op_Implicit(string value);
}
internal class Amazon.S3.TaggingDirective : ConstantClass {
    public static TaggingDirective COPY;
    public static TaggingDirective REPLACE;
    public TaggingDirective(string value);
    private static TaggingDirective();
    public static TaggingDirective FindValue(string value);
    public static TaggingDirective op_Implicit(string value);
}
public abstract class Amazon.S3.Transfer.BaseDownloadRequest : object {
    private string bucketName;
    private string key;
    private string versionId;
    private Nullable`1<DateTime> modifiedSinceDate;
    private Nullable`1<DateTime> unmodifiedSinceDate;
    private Nullable`1<DateTime> modifiedSinceDateUtc;
    private Nullable`1<DateTime> unmodifiedSinceDateUtc;
    private ChecksumMode checksumMode;
    private ServerSideEncryptionCustomerMethod serverSideCustomerEncryption;
    private string serverSideEncryptionCustomerProvidedKey;
    private string serverSideEncryptionCustomerProvidedKeyMD5;
    private RequestPayer requestPayer;
    public string BucketName { get; public set; }
    public string Key { get; public set; }
    public string VersionId { get; public set; }
    [ObsoleteAttribute("Setting this property results in non-UTC DateTimes not being marshalled correctly. Use ModifiedSinceDateUtc instead. Setting either ModifiedSinceDate or ModifiedSinceDateUtc results in both ModifiedSinceDate and ModifiedSinceDateUtc being assigned, the latest assignment to either one of the two property is reflected in the value of both. ModifiedSinceDate is provided for backwards compatibility only and assigning a non-Utc DateTime to it results in the wrong timestamp being passed to the service.", "False")]
public DateTime ModifiedSinceDate { get; public set; }
    public DateTime ModifiedSinceDateUtc { get; public set; }
    [ObsoleteAttribute("Setting this property results in non-UTC DateTimes not being marshalled correctly. Use UnmodifiedSinceDateUtc instead. Setting either UnmodifiedSinceDate or UnmodifiedSinceDateUtc results in both UnmodifiedSinceDate and UnmodifiedSinceDateUtc being assigned, the latest assignment to either one of the two property is reflected in the value of both. UnmodifiedSinceDate is provided for backwards compatibility only and assigning a non-Utc DateTime to it results in the wrong timestamp being passed to the service.", "False")]
public DateTime UnmodifiedSinceDate { get; public set; }
    public DateTime UnmodifiedSinceDateUtc { get; public set; }
    public ServerSideEncryptionCustomerMethod ServerSideEncryptionCustomerMethod { get; public set; }
    [AWSPropertyAttribute]
public string ServerSideEncryptionCustomerProvidedKey { get; public set; }
    public string ServerSideEncryptionCustomerProvidedKeyMD5 { get; public set; }
    public ChecksumMode ChecksumMode { get; public set; }
    public RequestPayer RequestPayer { get; public set; }
    public string get_BucketName();
    public void set_BucketName(string value);
    internal bool IsSetBucketName();
    public string get_Key();
    public void set_Key(string value);
    internal bool IsSetKey();
    public string get_VersionId();
    public void set_VersionId(string value);
    internal bool IsSetVersionId();
    public DateTime get_ModifiedSinceDate();
    public void set_ModifiedSinceDate(DateTime value);
    public DateTime get_ModifiedSinceDateUtc();
    public void set_ModifiedSinceDateUtc(DateTime value);
    internal bool IsSetModifiedSinceDateUtc();
    public DateTime get_UnmodifiedSinceDate();
    public void set_UnmodifiedSinceDate(DateTime value);
    public DateTime get_UnmodifiedSinceDateUtc();
    public void set_UnmodifiedSinceDateUtc(DateTime value);
    internal bool IsSetUnmodifiedSinceDateUtc();
    public ServerSideEncryptionCustomerMethod get_ServerSideEncryptionCustomerMethod();
    public void set_ServerSideEncryptionCustomerMethod(ServerSideEncryptionCustomerMethod value);
    public string get_ServerSideEncryptionCustomerProvidedKey();
    public void set_ServerSideEncryptionCustomerProvidedKey(string value);
    public string get_ServerSideEncryptionCustomerProvidedKeyMD5();
    public void set_ServerSideEncryptionCustomerProvidedKeyMD5(string value);
    public ChecksumMode get_ChecksumMode();
    public void set_ChecksumMode(ChecksumMode value);
    public RequestPayer get_RequestPayer();
    public void set_RequestPayer(RequestPayer value);
}
public abstract class Amazon.S3.Transfer.BaseUploadRequest : object {
}
public class Amazon.S3.Transfer.DownloadDirectoryProgressArgs : EventArgs {
    [CompilerGeneratedAttribute]
private int <TotalNumberOfFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NumberOfFilesDownloaded>k__BackingField;
    [CompilerGeneratedAttribute]
private long <TotalBytes>k__BackingField;
    [CompilerGeneratedAttribute]
private long <TransferredBytes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CurrentFile>k__BackingField;
    [CompilerGeneratedAttribute]
private long <TransferredBytesForCurrentFile>k__BackingField;
    [CompilerGeneratedAttribute]
private long <TotalNumberOfBytesForCurrentFile>k__BackingField;
    public int TotalNumberOfFiles { get; public set; }
    public int NumberOfFilesDownloaded { get; public set; }
    public long TotalBytes { get; public set; }
    public long TransferredBytes { get; public set; }
    public string CurrentFile { get; public set; }
    public long TransferredBytesForCurrentFile { get; public set; }
    public long TotalNumberOfBytesForCurrentFile { get; public set; }
    public DownloadDirectoryProgressArgs(int numberOfFilesDownloaded, int totalNumberOfFiles, string currentFile, long transferredBytesForCurrentFile, long totalNumberOfBytesForCurrentFile);
    public DownloadDirectoryProgressArgs(int numberOfFilesDownloaded, int totalNumberOfFiles, long transferredBytes, long totalBytes, string currentFile, long transferredBytesForCurrentFile, long totalNumberOfBytesForCurrentFile);
    [CompilerGeneratedAttribute]
public int get_TotalNumberOfFiles();
    [CompilerGeneratedAttribute]
public void set_TotalNumberOfFiles(int value);
    [CompilerGeneratedAttribute]
public int get_NumberOfFilesDownloaded();
    [CompilerGeneratedAttribute]
public void set_NumberOfFilesDownloaded(int value);
    [CompilerGeneratedAttribute]
public long get_TotalBytes();
    [CompilerGeneratedAttribute]
public void set_TotalBytes(long value);
    [CompilerGeneratedAttribute]
public long get_TransferredBytes();
    [CompilerGeneratedAttribute]
public void set_TransferredBytes(long value);
    [CompilerGeneratedAttribute]
public string get_CurrentFile();
    [CompilerGeneratedAttribute]
public void set_CurrentFile(string value);
    [CompilerGeneratedAttribute]
public long get_TransferredBytesForCurrentFile();
    [CompilerGeneratedAttribute]
public void set_TransferredBytesForCurrentFile(long value);
    [CompilerGeneratedAttribute]
public long get_TotalNumberOfBytesForCurrentFile();
    [CompilerGeneratedAttribute]
public void set_TotalNumberOfBytesForCurrentFile(long value);
    public virtual string ToString();
}
internal class Amazon.S3.Transfer.Internal.AbortMultipartUploadsCommand : BaseCommand {
    private IAmazonS3 _s3Client;
    private string _bucketName;
    private DateTime _initiatedDate;
    private TransferUtilityConfig _config;
    internal AbortMultipartUploadsCommand(IAmazonS3 s3Client, string bucketName, DateTime initiateDate);
    internal AbortMultipartUploadsCommand(IAmazonS3 s3Client, string bucketName, DateTime initiateDate, TransferUtilityConfig config);
    private ListMultipartUploadsRequest ConstructListMultipartUploadsRequest(ListMultipartUploadsResponse listResponse);
    private AbortMultipartUploadRequest ConstructAbortMultipartUploadRequest(MultipartUpload upload);
    [AsyncStateMachineAttribute("Amazon.S3.Transfer.Internal.AbortMultipartUploadsCommand/<ExecuteAsync>d__8")]
public virtual Task ExecuteAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Amazon.S3.Transfer.Internal.AbortMultipartUploadsCommand/<AbortAsync>d__9")]
private Task`1<AbortMultipartUploadResponse> AbortAsync(AbortMultipartUploadRequest abortRequest, CancellationTokenSource internalCts, CancellationToken cancellationToken, SemaphoreSlim asyncThrottler);
}
internal abstract class Amazon.S3.Transfer.Internal.BaseCommand : object {
    public object Return { get; }
    public virtual object get_Return();
    protected GetObjectRequest ConvertToGetObjectRequest(BaseDownloadRequest request);
    protected void RequestEventHandler(object sender, RequestEventArgs args);
    public abstract virtual Task ExecuteAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Amazon.S3.Transfer.Internal.BaseCommand/<WhenAllOrFirstExceptionAsync>d__5`1")]
protected static Task`1<List`1<T>> WhenAllOrFirstExceptionAsync(List`1<Task`1<T>> pendingTasks, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Amazon.S3.Transfer.Internal.BaseCommand/<WhenAllOrFirstExceptionAsync>d__6")]
protected static Task WhenAllOrFirstExceptionAsync(List`1<Task> pendingTasks, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Amazon.S3.Transfer.Internal.BaseCommand/<ExecuteCommandAsync>d__7")]
protected static Task ExecuteCommandAsync(BaseCommand command, CancellationTokenSource internalCts, SemaphoreSlim throttler);
}
internal class Amazon.S3.Transfer.Internal.DownloadCommand : BaseCommand {
    private static int MAX_BACKOFF_IN_MILLISECONDS;
    private IAmazonS3 _s3Client;
    private TransferUtilityDownloadRequest _request;
    private static Logger Logger { get; }
    internal DownloadCommand(IAmazonS3 s3Client, TransferUtilityDownloadRequest request);
    private static DownloadCommand();
    private static Logger get_Logger();
    private void ValidateRequest();
    private void OnWriteObjectProgressEvent(object sender, WriteObjectProgressArgs e);
    private static bool HandleException(Exception exception, int retries, int maxRetries);
    private static void WaitBeforeRetry(int retries);
    private static ByteRange ByteRangeRemainingForDownload(string filepath);
    [AsyncStateMachineAttribute("Amazon.S3.Transfer.Internal.DownloadCommand/<ExecuteAsync>d__11")]
public virtual Task ExecuteAsync(CancellationToken cancellationToken);
    private static bool HandleExceptionForHttpClient(Exception exception, int retries, int maxRetries);
}
internal class Amazon.S3.Transfer.Internal.DownloadDirectoryCommand : BaseCommand {
    private IAmazonS3 _s3Client;
    private TransferUtilityDownloadDirectoryRequest _request;
    private bool _skipEncryptionInstructionFiles;
    private int _totalNumberOfFilesToDownload;
    private int _numberOfFilesDownloaded;
    private long _totalBytes;
    private long _transferredBytes;
    private string _currentFile;
    private TransferUtilityConfig _config;
    [CompilerGeneratedAttribute]
private bool <DownloadFilesConcurrently>k__BackingField;
    public bool DownloadFilesConcurrently { get; public set; }
    internal DownloadDirectoryCommand(IAmazonS3 s3Client, TransferUtilityDownloadDirectoryRequest request);
    internal DownloadDirectoryCommand(IAmazonS3 s3Client, TransferUtilityDownloadDirectoryRequest request, TransferUtilityConfig config);
    private void downloadedProgressEventCallback(object sender, WriteObjectProgressArgs e);
    private void EnsureDirectoryExists(DirectoryInfo directory);
    private TransferUtilityDownloadRequest ConstructTransferUtilityDownloadRequest(S3Object s3Object, int prefixLength);
    private ListObjectsV2Request ConstructListObjectRequestV2();
    private ListObjectsRequest ConstructListObjectRequest();
    private void ValidateRequest();
    private bool IsInstructionFile(string key);
    private bool ShouldDownload(S3Object s3o);
    [CompilerGeneratedAttribute]
public bool get_DownloadFilesConcurrently();
    [CompilerGeneratedAttribute]
public void set_DownloadFilesConcurrently(bool value);
    [AsyncStateMachineAttribute("Amazon.S3.Transfer.Internal.DownloadDirectoryCommand/<ExecuteAsync>d__23")]
public virtual Task ExecuteAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Amazon.S3.Transfer.Internal.DownloadDirectoryCommand/<GetS3ObjectsToDownloadAsync>d__24")]
private Task`1<List`1<S3Object>> GetS3ObjectsToDownloadAsync(ListObjectsRequest listRequest, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Amazon.S3.Transfer.Internal.DownloadDirectoryCommand/<GetS3ObjectsToDownloadV2Async>d__25")]
private Task`1<List`1<S3Object>> GetS3ObjectsToDownloadV2Async(ListObjectsV2Request listRequestV2, CancellationToken cancellationToken);
}
internal class Amazon.S3.Transfer.Internal.MultipartUploadCommand : BaseCommand {
    private IAmazonS3 _s3Client;
    private long _partSize;
    private int _totalNumberOfParts;
    private TransferUtilityConfig _config;
    private TransferUtilityUploadRequest _fileTransporterRequest;
    private List`1<UploadPartResponse> _uploadResponses;
    private long _totalTransferredBytes;
    private Queue`1<UploadPartRequest> _partsToUpload;
    private long _contentLength;
    [CompilerGeneratedAttribute]
private SemaphoreSlim <AsyncThrottler>k__BackingField;
    private static Logger Logger { get; }
    public SemaphoreSlim AsyncThrottler { get; public set; }
    internal MultipartUploadCommand(IAmazonS3 s3Client, TransferUtilityConfig config, TransferUtilityUploadRequest fileTransporterRequest);
    private static Logger get_Logger();
    private static long calculatePartSize(long fileSize);
    private string determineContentType();
    private int CalculateConcurrentServiceRequests();
    private CompleteMultipartUploadRequest ConstructCompleteMultipartUploadRequest(InitiateMultipartUploadResponse initResponse);
    private CompleteMultipartUploadRequest ConstructCompleteMultipartUploadRequest(InitiateMultipartUploadResponse initResponse, bool skipPartValidation, RequestEventHandler requestEventHandler);
    private UploadPartRequest ConstructUploadPartRequest(int partNumber, long filePosition, InitiateMultipartUploadResponse initiateResponse);
    private UploadPartRequest ConstructGenericUploadPartRequest(InitiateMultipartUploadResponse initiateResponse);
    private UploadPartRequest ConstructUploadPartRequestForNonSeekableStream(Stream inputStream, int partNumber, long partSize, bool isLastPart, InitiateMultipartUploadResponse initiateResponse);
    private InitiateMultipartUploadRequest ConstructInitiateMultipartUploadRequest();
    private InitiateMultipartUploadRequest ConstructInitiateMultipartUploadRequest(RequestEventHandler requestEventHandler);
    private void UploadPartProgressEventCallback(object sender, UploadProgressArgs e);
    [CompilerGeneratedAttribute]
public SemaphoreSlim get_AsyncThrottler();
    [CompilerGeneratedAttribute]
public void set_AsyncThrottler(SemaphoreSlim value);
    [AsyncStateMachineAttribute("Amazon.S3.Transfer.Internal.MultipartUploadCommand/<ExecuteAsync>d__27")]
public virtual Task ExecuteAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Amazon.S3.Transfer.Internal.MultipartUploadCommand/<UploadPartAsync>d__28")]
private Task`1<UploadPartResponse> UploadPartAsync(UploadPartRequest uploadRequest, CancellationTokenSource internalCts, SemaphoreSlim asyncThrottler);
    private void Cleanup(string uploadId, List`1<Task`1<UploadPartResponse>> tasks);
    private void AbortMultipartUpload(string uploadId);
    [AsyncStateMachineAttribute("Amazon.S3.Transfer.Internal.MultipartUploadCommand/<UploadUnseekableStreamAsync>d__31")]
private Task UploadUnseekableStreamAsync(TransferUtilityUploadRequest request, CancellationToken cancellationToken);
}
internal class Amazon.S3.Transfer.Internal.OpenStreamCommand : BaseCommand {
    private IAmazonS3 _s3Client;
    private TransferUtilityOpenStreamRequest _request;
    private Stream _responseStream;
    internal Stream ResponseStream { get; }
    public object Return { get; }
    internal OpenStreamCommand(IAmazonS3 s3Client, TransferUtilityOpenStreamRequest request);
    private GetObjectRequest ConstructRequest();
    internal Stream get_ResponseStream();
    public virtual object get_Return();
    [AsyncStateMachineAttribute("Amazon.S3.Transfer.Internal.OpenStreamCommand/<ExecuteAsync>d__9")]
public virtual Task ExecuteAsync(CancellationToken cancellationToken);
}
internal class Amazon.S3.Transfer.Internal.ProgressHandler : object {
    private StreamTransferProgressArgs _lastProgressArgs;
    private EventHandler`1<UploadProgressArgs> _callback;
    public ProgressHandler(EventHandler`1<UploadProgressArgs> callback);
    public void OnTransferProgress(object sender, StreamTransferProgressArgs e);
}
internal class Amazon.S3.Transfer.Internal.SimpleUploadCommand : BaseCommand {
    private IAmazonS3 _s3Client;
    private TransferUtilityConfig _config;
    private TransferUtilityUploadRequest _fileTransporterRequest;
    [CompilerGeneratedAttribute]
private SemaphoreSlim <AsyncThrottler>k__BackingField;
    public SemaphoreSlim AsyncThrottler { get; public set; }
    internal SimpleUploadCommand(IAmazonS3 s3Client, TransferUtilityConfig config, TransferUtilityUploadRequest fileTransporterRequest);
    private PutObjectRequest ConstructRequest();
    private void PutObjectProgressEventCallback(object sender, UploadProgressArgs e);
    [CompilerGeneratedAttribute]
public SemaphoreSlim get_AsyncThrottler();
    [CompilerGeneratedAttribute]
public void set_AsyncThrottler(SemaphoreSlim value);
    [AsyncStateMachineAttribute("Amazon.S3.Transfer.Internal.SimpleUploadCommand/<ExecuteAsync>d__10")]
public virtual Task ExecuteAsync(CancellationToken cancellationToken);
}
internal class Amazon.S3.Transfer.Internal.UploadDirectoryCommand : BaseCommand {
    private TransferUtilityUploadDirectoryRequest _request;
    private TransferUtility _utility;
    private TransferUtilityConfig _config;
    private int _totalNumberOfFiles;
    private int _numberOfFilesUploaded;
    private long _totalBytes;
    private long _transferredBytes;
    [CompilerGeneratedAttribute]
private bool <UploadFilesConcurrently>k__BackingField;
    public bool UploadFilesConcurrently { get; public set; }
    internal UploadDirectoryCommand(TransferUtility utility, TransferUtilityConfig config, TransferUtilityUploadDirectoryRequest request);
    private TransferUtilityUploadRequest ConstructRequest(string basePath, string filepath, string prefix);
    private string GetKeyPrefix();
    private void UploadProgressEventCallback(object sender, UploadProgressArgs e);
    [CompilerGeneratedAttribute]
public bool get_UploadFilesConcurrently();
    [CompilerGeneratedAttribute]
public void set_UploadFilesConcurrently(bool value);
    [AsyncStateMachineAttribute("Amazon.S3.Transfer.Internal.UploadDirectoryCommand/<ExecuteAsync>d__15")]
public virtual Task ExecuteAsync(CancellationToken cancellationToken);
    private Task`1<String[]> GetFiles(string path, string searchPattern, SearchOption searchOption, CancellationToken cancellationToken);
}
public interface Amazon.S3.Transfer.ITransferUtility {
    public IAmazonS3 S3Client { get; }
    public abstract virtual IAmazonS3 get_S3Client();
    public abstract virtual Task UploadAsync(string filePath, string bucketName, CancellationToken cancellationToken);
    public abstract virtual Task UploadAsync(string filePath, string bucketName, string key, CancellationToken cancellationToken);
    public abstract virtual Task UploadAsync(Stream stream, string bucketName, string key, CancellationToken cancellationToken);
    public abstract virtual Task UploadAsync(TransferUtilityUploadRequest request, CancellationToken cancellationToken);
    public abstract virtual Task AbortMultipartUploadsAsync(string bucketName, DateTime initiatedDate, CancellationToken cancellationToken);
    public abstract virtual Task DownloadAsync(TransferUtilityDownloadRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<Stream> OpenStreamAsync(string bucketName, string key, CancellationToken cancellationToken);
    public abstract virtual Task`1<Stream> OpenStreamAsync(TransferUtilityOpenStreamRequest request, CancellationToken cancellationToken);
    public abstract virtual Task UploadDirectoryAsync(string directory, string bucketName, CancellationToken cancellationToken);
    public abstract virtual Task UploadDirectoryAsync(string directory, string bucketName, string searchPattern, SearchOption searchOption, CancellationToken cancellationToken);
    public abstract virtual Task UploadDirectoryAsync(TransferUtilityUploadDirectoryRequest request, CancellationToken cancellationToken);
    public abstract virtual Task DownloadDirectoryAsync(string bucketName, string s3Directory, string localDirectory, CancellationToken cancellationToken);
    public abstract virtual Task DownloadDirectoryAsync(TransferUtilityDownloadDirectoryRequest request, CancellationToken cancellationToken);
    public abstract virtual Task DownloadAsync(string filePath, string bucketName, string key, CancellationToken cancellationToken);
    public abstract virtual void UploadDirectory(string directory, string bucketName);
    public abstract virtual void UploadDirectory(string directory, string bucketName, string searchPattern, SearchOption searchOption);
    public abstract virtual void UploadDirectory(TransferUtilityUploadDirectoryRequest request);
    public abstract virtual void Upload(string filePath, string bucketName);
    public abstract virtual void Upload(string filePath, string bucketName, string key);
    public abstract virtual void Upload(Stream stream, string bucketName, string key);
    public abstract virtual void Upload(TransferUtilityUploadRequest request);
    public abstract virtual Stream OpenStream(string bucketName, string key);
    public abstract virtual Stream OpenStream(TransferUtilityOpenStreamRequest request);
    public abstract virtual void Download(string filePath, string bucketName, string key);
    public abstract virtual void Download(TransferUtilityDownloadRequest request);
    public abstract virtual void DownloadDirectory(string bucketName, string s3Directory, string localDirectory);
    public abstract virtual void DownloadDirectory(TransferUtilityDownloadDirectoryRequest request);
    public abstract virtual void AbortMultipartUploads(string bucketName, DateTime initiatedDate);
}
public class Amazon.S3.Transfer.TransferUtility : object {
    private TransferUtilityConfig _config;
    private IAmazonS3 _s3Client;
    private bool _shouldDispose;
    private bool _isDisposed;
    private HashSet`1<string> blockedServiceNames;
    private static Logger Logger { get; }
    public IAmazonS3 S3Client { get; }
    public TransferUtility(string awsAccessKeyId, string awsSecretAccessKey);
    public TransferUtility(string awsAccessKeyId, string awsSecretAccessKey, RegionEndpoint region);
    public TransferUtility(string awsAccessKeyId, string awsSecretAccessKey, TransferUtilityConfig config);
    public TransferUtility(string awsAccessKeyId, string awsSecretAccessKey, RegionEndpoint region, TransferUtilityConfig config);
    public TransferUtility(IAmazonS3 s3Client);
    public TransferUtility(IAmazonS3 s3Client, TransferUtilityConfig config);
    public TransferUtility(RegionEndpoint region);
    public TransferUtility(TransferUtilityConfig config);
    private static Logger get_Logger();
    public sealed virtual IAmazonS3 get_S3Client();
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
    private void CheckForBlockedArn(string bucketName, string command);
    private static TransferUtilityUploadRequest ConstructUploadRequest(string filePath, string bucketName);
    private static TransferUtilityUploadRequest ConstructUploadRequest(string filePath, string bucketName, string key);
    private static TransferUtilityUploadRequest ConstructUploadRequest(Stream stream, string bucketName, string key);
    internal BaseCommand GetUploadCommand(TransferUtilityUploadRequest request);
    private bool IsMultipartUpload(TransferUtilityUploadRequest request);
    private static void validate(TransferUtilityUploadRequest request);
    private static TransferUtilityDownloadRequest ConstructDownloadRequest(string filePath, string bucketName, string key);
    private static TransferUtilityDownloadDirectoryRequest ConstructDownloadDirectoryRequest(string bucketName, string s3Directory, string localDirectory);
    private static void validate(TransferUtilityUploadDirectoryRequest request);
    private static TransferUtilityUploadDirectoryRequest ConstructUploadDirectoryRequest(string directory, string bucketName);
    private static TransferUtilityUploadDirectoryRequest ConstructUploadDirectoryRequest(string directory, string bucketName, string searchPattern, SearchOption searchOption);
    public sealed virtual Task UploadAsync(string filePath, string bucketName, CancellationToken cancellationToken);
    public sealed virtual Task UploadAsync(string filePath, string bucketName, string key, CancellationToken cancellationToken);
    public sealed virtual Task UploadAsync(Stream stream, string bucketName, string key, CancellationToken cancellationToken);
    public sealed virtual Task UploadAsync(TransferUtilityUploadRequest request, CancellationToken cancellationToken);
    public sealed virtual Task AbortMultipartUploadsAsync(string bucketName, DateTime initiatedDate, CancellationToken cancellationToken);
    public sealed virtual Task DownloadAsync(TransferUtilityDownloadRequest request, CancellationToken cancellationToken);
    public sealed virtual Task`1<Stream> OpenStreamAsync(string bucketName, string key, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Amazon.S3.Transfer.TransferUtility/<OpenStreamAsync>d__39")]
public sealed virtual Task`1<Stream> OpenStreamAsync(TransferUtilityOpenStreamRequest request, CancellationToken cancellationToken);
    internal BaseCommand GetUploadCommand(TransferUtilityUploadRequest request, SemaphoreSlim asyncThrottler);
    public sealed virtual Task UploadDirectoryAsync(string directory, string bucketName, CancellationToken cancellationToken);
    public sealed virtual Task UploadDirectoryAsync(string directory, string bucketName, string searchPattern, SearchOption searchOption, CancellationToken cancellationToken);
    public sealed virtual Task UploadDirectoryAsync(TransferUtilityUploadDirectoryRequest request, CancellationToken cancellationToken);
    public sealed virtual Task DownloadDirectoryAsync(string bucketName, string s3Directory, string localDirectory, CancellationToken cancellationToken);
    public sealed virtual Task DownloadDirectoryAsync(TransferUtilityDownloadDirectoryRequest request, CancellationToken cancellationToken);
    public sealed virtual Task DownloadAsync(string filePath, string bucketName, string key, CancellationToken cancellationToken);
    public sealed virtual void UploadDirectory(string directory, string bucketName);
    public sealed virtual void UploadDirectory(string directory, string bucketName, string searchPattern, SearchOption searchOption);
    public sealed virtual void UploadDirectory(TransferUtilityUploadDirectoryRequest request);
    public sealed virtual void Upload(string filePath, string bucketName);
    public sealed virtual void Upload(string filePath, string bucketName, string key);
    public sealed virtual void Upload(Stream stream, string bucketName, string key);
    public sealed virtual void Upload(TransferUtilityUploadRequest request);
    public sealed virtual Stream OpenStream(string bucketName, string key);
    public sealed virtual Stream OpenStream(TransferUtilityOpenStreamRequest request);
    public sealed virtual void Download(string filePath, string bucketName, string key);
    public sealed virtual void Download(TransferUtilityDownloadRequest request);
    public sealed virtual void DownloadDirectory(string bucketName, string s3Directory, string localDirectory);
    public sealed virtual void DownloadDirectory(TransferUtilityDownloadDirectoryRequest request);
    public sealed virtual void AbortMultipartUploads(string bucketName, DateTime initiatedDate);
}
public class Amazon.S3.Transfer.TransferUtilityConfig : object {
    private long _minSizeBeforePartUpload;
    private int _concurrentServiceRequests;
    public long MinSizeBeforePartUpload { get; public set; }
    public int ConcurrentServiceRequests { get; public set; }
    [ObsoleteAttribute("This property has been deprecated, use TransferUtilityConfig.ConcurrentServiceRequests instead.")]
public int NumberOfUploadThreads { get; public set; }
    public long get_MinSizeBeforePartUpload();
    public void set_MinSizeBeforePartUpload(long value);
    public int get_ConcurrentServiceRequests();
    public void set_ConcurrentServiceRequests(int value);
    public int get_NumberOfUploadThreads();
    public void set_NumberOfUploadThreads(int value);
}
public class Amazon.S3.Transfer.TransferUtilityDownloadDirectoryRequest : object {
    private string bucketName;
    private string s3Directory;
    private string localDirectory;
    private bool downloadFilesConcurrently;
    private Nullable`1<DateTime> modifiedSinceDate;
    private Nullable`1<DateTime> unmodifiedSinceDate;
    private Nullable`1<DateTime> modifiedSinceDateUtc;
    private Nullable`1<DateTime> unmodifiedSinceDateUtc;
    private bool disableSlashCorrection;
    private ServerSideEncryptionCustomerMethod serverSideCustomerEncryption;
    private string serverSideEncryptionCustomerProvidedKey;
    private string serverSideEncryptionCustomerProvidedKeyMD5;
    [CompilerGeneratedAttribute]
private EventHandler`1<DownloadDirectoryProgressArgs> DownloadedDirectoryProgressEvent;
    public string BucketName { get; public set; }
    public string LocalDirectory { get; public set; }
    public string S3Directory { get; public set; }
    [ObsoleteAttribute("This property doesn't honor the DateTimeKind, please use ModifiedSinceDateUtc instead.", "False")]
public DateTime ModifiedSinceDate { get; public set; }
    public DateTime ModifiedSinceDateUtc { get; public set; }
    [ObsoleteAttribute("This property doesn't honor the DateTimeKind, please use UnmodifiedSinceDateUtc instead.", "False")]
public DateTime UnmodifiedSinceDate { get; public set; }
    public DateTime UnmodifiedSinceDateUtc { get; public set; }
    public bool DownloadFilesConcurrently { get; public set; }
    public bool DisableSlashCorrection { get; public set; }
    public ServerSideEncryptionCustomerMethod ServerSideEncryptionCustomerMethod { get; public set; }
    [AWSPropertyAttribute]
public string ServerSideEncryptionCustomerProvidedKey { get; public set; }
    public string ServerSideEncryptionCustomerProvidedKeyMD5 { get; public set; }
    public string get_BucketName();
    public void set_BucketName(string value);
    internal bool IsSetBucketName();
    public string get_LocalDirectory();
    public void set_LocalDirectory(string value);
    internal bool IsSetLocalDirectory();
    public string get_S3Directory();
    public void set_S3Directory(string value);
    internal bool IsSetS3Directory();
    public DateTime get_ModifiedSinceDate();
    public void set_ModifiedSinceDate(DateTime value);
    internal bool IsSetModifiedSinceDate();
    public DateTime get_ModifiedSinceDateUtc();
    public void set_ModifiedSinceDateUtc(DateTime value);
    internal bool IsSetModifiedSinceDateUtc();
    public DateTime get_UnmodifiedSinceDate();
    public void set_UnmodifiedSinceDate(DateTime value);
    internal bool IsSetUnmodifiedSinceDate();
    public DateTime get_UnmodifiedSinceDateUtc();
    public void set_UnmodifiedSinceDateUtc(DateTime value);
    internal bool IsSetUnmodifiedSinceDateUtc();
    public bool get_DownloadFilesConcurrently();
    public void set_DownloadFilesConcurrently(bool value);
    public bool get_DisableSlashCorrection();
    public void set_DisableSlashCorrection(bool value);
    public ServerSideEncryptionCustomerMethod get_ServerSideEncryptionCustomerMethod();
    public void set_ServerSideEncryptionCustomerMethod(ServerSideEncryptionCustomerMethod value);
    public string get_ServerSideEncryptionCustomerProvidedKey();
    public void set_ServerSideEncryptionCustomerProvidedKey(string value);
    public string get_ServerSideEncryptionCustomerProvidedKeyMD5();
    public void set_ServerSideEncryptionCustomerProvidedKeyMD5(string value);
    [CompilerGeneratedAttribute]
public void add_DownloadedDirectoryProgressEvent(EventHandler`1<DownloadDirectoryProgressArgs> value);
    [CompilerGeneratedAttribute]
public void remove_DownloadedDirectoryProgressEvent(EventHandler`1<DownloadDirectoryProgressArgs> value);
    internal void OnRaiseProgressEvent(DownloadDirectoryProgressArgs downloadDirectoryProgress);
}
public class Amazon.S3.Transfer.TransferUtilityDownloadRequest : BaseDownloadRequest {
    [CompilerGeneratedAttribute]
private string <FilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<WriteObjectProgressArgs> WriteObjectProgressEvent;
    public string FilePath { get; public set; }
    [CompilerGeneratedAttribute]
public string get_FilePath();
    [CompilerGeneratedAttribute]
public void set_FilePath(string value);
    internal bool IsSetFilePath();
    [CompilerGeneratedAttribute]
public void add_WriteObjectProgressEvent(EventHandler`1<WriteObjectProgressArgs> value);
    [CompilerGeneratedAttribute]
public void remove_WriteObjectProgressEvent(EventHandler`1<WriteObjectProgressArgs> value);
    internal void OnRaiseProgressEvent(WriteObjectProgressArgs progressArgs);
}
public class Amazon.S3.Transfer.TransferUtilityOpenStreamRequest : BaseDownloadRequest {
}
public class Amazon.S3.Transfer.TransferUtilityUploadDirectoryRequest : BaseUploadRequest {
    private string _directory;
    private string _bucketname;
    private string _searchPattern;
    private string _keyPrefix;
    private string contentType;
    private bool _uploadFilesConcurrently;
    private SearchOption _searchOption;
    private S3CannedACL _cannedACL;
    private S3StorageClass _storageClass;
    private MetadataCollection metadataCollection;
    private ServerSideEncryptionMethod encryption;
    private string serverSideEncryptionKeyManagementServiceKeyId;
    private ServerSideEncryptionCustomerMethod serverSideCustomerEncryption;
    private string serverSideEncryptionCustomerProvidedKey;
    private string serverSideEncryptionCustomerProvidedKeyMD5;
    private List`1<Tag> tagset;
    private bool calculateContentMD5Header;
    private ObjectLockLegalHoldStatus objectLockLegalHoldStatus;
    private ObjectLockMode objectLockMode;
    private bool disablePayloadSigning;
    private Nullable`1<DateTime> objectLockRetainUntilDate;
    [CompilerGeneratedAttribute]
private EventHandler`1<UploadDirectoryProgressArgs> UploadDirectoryProgressEvent;
    [CompilerGeneratedAttribute]
private EventHandler`1<UploadDirectoryFileRequestArgs> UploadDirectoryFileRequestEvent;
    public bool DisablePayloadSigning { get; public set; }
    public string Directory { get; public set; }
    public string KeyPrefix { get; public set; }
    public string SearchPattern { get; public set; }
    public SearchOption SearchOption { get; public set; }
    public string BucketName { get; public set; }
    public S3CannedACL CannedACL { get; public set; }
    public string ContentType { get; public set; }
    public S3StorageClass StorageClass { get; public set; }
    public MetadataCollection Metadata { get; internal set; }
    public ServerSideEncryptionMethod ServerSideEncryptionMethod { get; public set; }
    [AWSPropertyAttribute]
public string ServerSideEncryptionKeyManagementServiceKeyId { get; public set; }
    public ServerSideEncryptionCustomerMethod ServerSideEncryptionCustomerMethod { get; public set; }
    [AWSPropertyAttribute]
public string ServerSideEncryptionCustomerProvidedKey { get; public set; }
    public string ServerSideEncryptionCustomerProvidedKeyMD5 { get; public set; }
    public bool CalculateContentMD5Header { get; public set; }
    public ObjectLockLegalHoldStatus ObjectLockLegalHoldStatus { get; public set; }
    public ObjectLockMode ObjectLockMode { get; public set; }
    public DateTime ObjectLockRetainUntilDate { get; public set; }
    public bool UploadFilesConcurrently { get; public set; }
    public List`1<Tag> TagSet { get; public set; }
    public bool get_DisablePayloadSigning();
    public void set_DisablePayloadSigning(bool value);
    public string get_Directory();
    public void set_Directory(string value);
    internal bool IsSetDirectory();
    public string get_KeyPrefix();
    public void set_KeyPrefix(string value);
    internal bool IsSetKeyPrefix();
    public string get_SearchPattern();
    public void set_SearchPattern(string value);
    internal bool IsSetSearchPattern();
    public SearchOption get_SearchOption();
    public void set_SearchOption(SearchOption value);
    public string get_BucketName();
    public void set_BucketName(string value);
    internal bool IsSetBucketName();
    public S3CannedACL get_CannedACL();
    public void set_CannedACL(S3CannedACL value);
    internal bool IsSetCannedACL();
    public string get_ContentType();
    public void set_ContentType(string value);
    public S3StorageClass get_StorageClass();
    public void set_StorageClass(S3StorageClass value);
    public MetadataCollection get_Metadata();
    internal void set_Metadata(MetadataCollection value);
    public ServerSideEncryptionMethod get_ServerSideEncryptionMethod();
    public void set_ServerSideEncryptionMethod(ServerSideEncryptionMethod value);
    public string get_ServerSideEncryptionKeyManagementServiceKeyId();
    public void set_ServerSideEncryptionKeyManagementServiceKeyId(string value);
    public ServerSideEncryptionCustomerMethod get_ServerSideEncryptionCustomerMethod();
    public void set_ServerSideEncryptionCustomerMethod(ServerSideEncryptionCustomerMethod value);
    internal bool IsSetServerSideEncryptionKeyManagementServiceKeyId();
    public string get_ServerSideEncryptionCustomerProvidedKey();
    public void set_ServerSideEncryptionCustomerProvidedKey(string value);
    public string get_ServerSideEncryptionCustomerProvidedKeyMD5();
    public void set_ServerSideEncryptionCustomerProvidedKeyMD5(string value);
    public bool get_CalculateContentMD5Header();
    public void set_CalculateContentMD5Header(bool value);
    public ObjectLockLegalHoldStatus get_ObjectLockLegalHoldStatus();
    public void set_ObjectLockLegalHoldStatus(ObjectLockLegalHoldStatus value);
    public ObjectLockMode get_ObjectLockMode();
    public void set_ObjectLockMode(ObjectLockMode value);
    public DateTime get_ObjectLockRetainUntilDate();
    public void set_ObjectLockRetainUntilDate(DateTime value);
    internal bool IsSetObjectLockRetainUntilDate();
    public bool get_UploadFilesConcurrently();
    public void set_UploadFilesConcurrently(bool value);
    [CompilerGeneratedAttribute]
public void add_UploadDirectoryProgressEvent(EventHandler`1<UploadDirectoryProgressArgs> value);
    [CompilerGeneratedAttribute]
public void remove_UploadDirectoryProgressEvent(EventHandler`1<UploadDirectoryProgressArgs> value);
    [CompilerGeneratedAttribute]
public void add_UploadDirectoryFileRequestEvent(EventHandler`1<UploadDirectoryFileRequestArgs> value);
    [CompilerGeneratedAttribute]
public void remove_UploadDirectoryFileRequestEvent(EventHandler`1<UploadDirectoryFileRequestArgs> value);
    internal void OnRaiseProgressEvent(UploadDirectoryProgressArgs uploadDirectoryProgress);
    internal void RaiseUploadDirectoryFileRequestEvent(TransferUtilityUploadRequest request);
    public List`1<Tag> get_TagSet();
    public void set_TagSet(List`1<Tag> value);
}
public class Amazon.S3.Transfer.TransferUtilityUploadRequest : BaseUploadRequest {
    private string bucketName;
    private string key;
    private S3CannedACL cannedACL;
    private string contentType;
    private S3StorageClass storageClass;
    private Nullable`1<long> partSize;
    private bool autoCloseStream;
    private bool autoResetStreamPosition;
    private ServerSideEncryptionMethod encryption;
    private ServerSideEncryptionCustomerMethod serverSideCustomerEncryption;
    private string serverSideEncryptionCustomerProvidedKey;
    private string serverSideEncryptionCustomerProvidedKeyMD5;
    private string serverSideEncryptionKeyManagementServiceKeyId;
    private ChecksumAlgorithm checksumAlgorithm;
    private HeadersCollection headersCollection;
    private MetadataCollection metadataCollection;
    private List`1<Tag> tagset;
    private Stream inputStream;
    private bool calculateContentMD5Header;
    private ObjectLockLegalHoldStatus objectLockLegalHoldStatus;
    private ObjectLockMode objectLockMode;
    private Nullable`1<DateTime> objectLockRetainUntilDate;
    [CompilerGeneratedAttribute]
private string <FilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<UploadProgressArgs> UploadProgressEvent;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <DisableDefaultChecksumValidation>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <DisablePayloadSigning>k__BackingField;
    public string BucketName { get; public set; }
    public string Key { get; public set; }
    public S3CannedACL CannedACL { get; public set; }
    public string ContentType { get; public set; }
    public S3StorageClass StorageClass { get; public set; }
    public ServerSideEncryptionMethod ServerSideEncryptionMethod { get; public set; }
    public ServerSideEncryptionCustomerMethod ServerSideEncryptionCustomerMethod { get; public set; }
    [AWSPropertyAttribute]
public string ServerSideEncryptionKeyManagementServiceKeyId { get; public set; }
    [AWSPropertyAttribute]
public string ServerSideEncryptionCustomerProvidedKey { get; public set; }
    public string ServerSideEncryptionCustomerProvidedKeyMD5 { get; public set; }
    public Stream InputStream { get; public set; }
    public string FilePath { get; public set; }
    public long PartSize { get; public set; }
    public HeadersCollection Headers { get; internal set; }
    public MetadataCollection Metadata { get; internal set; }
    public List`1<Tag> TagSet { get; public set; }
    internal long ContentLength { get; }
    public bool AutoCloseStream { get; public set; }
    public bool AutoResetStreamPosition { get; public set; }
    [ObsoleteAttribute("This property is deprecated in favor of DisableDefaultChecksumValidation.")]
public Nullable`1<bool> DisableMD5Stream { get; public set; }
    public Nullable`1<bool> DisableDefaultChecksumValidation { get; public set; }
    public Nullable`1<bool> DisablePayloadSigning { get; public set; }
    public bool CalculateContentMD5Header { get; public set; }
    public ObjectLockLegalHoldStatus ObjectLockLegalHoldStatus { get; public set; }
    public ObjectLockMode ObjectLockMode { get; public set; }
    public DateTime ObjectLockRetainUntilDate { get; public set; }
    public ChecksumAlgorithm ChecksumAlgorithm { get; public set; }
    public string get_BucketName();
    public void set_BucketName(string value);
    internal bool IsSetBucketName();
    public string get_Key();
    public void set_Key(string value);
    internal bool IsSetKey();
    public S3CannedACL get_CannedACL();
    public void set_CannedACL(S3CannedACL value);
    internal bool IsSetCannedACL();
    public void RemoveCannedACL();
    public string get_ContentType();
    public void set_ContentType(string value);
    internal bool IsSetContentType();
    public S3StorageClass get_StorageClass();
    public void set_StorageClass(S3StorageClass value);
    public ServerSideEncryptionMethod get_ServerSideEncryptionMethod();
    public void set_ServerSideEncryptionMethod(ServerSideEncryptionMethod value);
    public ServerSideEncryptionCustomerMethod get_ServerSideEncryptionCustomerMethod();
    public void set_ServerSideEncryptionCustomerMethod(ServerSideEncryptionCustomerMethod value);
    public string get_ServerSideEncryptionKeyManagementServiceKeyId();
    public void set_ServerSideEncryptionKeyManagementServiceKeyId(string value);
    internal bool IsSetServerSideEncryptionKeyManagementServiceKeyId();
    public string get_ServerSideEncryptionCustomerProvidedKey();
    public void set_ServerSideEncryptionCustomerProvidedKey(string value);
    public string get_ServerSideEncryptionCustomerProvidedKeyMD5();
    public void set_ServerSideEncryptionCustomerProvidedKeyMD5(string value);
    public Stream get_InputStream();
    public void set_InputStream(Stream value);
    internal bool IsSetInputStream();
    [CompilerGeneratedAttribute]
public string get_FilePath();
    [CompilerGeneratedAttribute]
public void set_FilePath(string value);
    internal bool IsSetFilePath();
    public long get_PartSize();
    public void set_PartSize(long value);
    internal bool IsSetPartSize();
    public HeadersCollection get_Headers();
    internal void set_Headers(HeadersCollection value);
    public MetadataCollection get_Metadata();
    internal void set_Metadata(MetadataCollection value);
    public List`1<Tag> get_TagSet();
    public void set_TagSet(List`1<Tag> value);
    [CompilerGeneratedAttribute]
public void add_UploadProgressEvent(EventHandler`1<UploadProgressArgs> value);
    [CompilerGeneratedAttribute]
public void remove_UploadProgressEvent(EventHandler`1<UploadProgressArgs> value);
    internal void OnRaiseProgressEvent(UploadProgressArgs progressArgs);
    internal long get_ContentLength();
    public bool get_AutoCloseStream();
    public void set_AutoCloseStream(bool value);
    public bool get_AutoResetStreamPosition();
    public void set_AutoResetStreamPosition(bool value);
    public TransferUtilityUploadRequest WithAutoCloseStream(bool autoCloseStream);
    public Nullable`1<bool> get_DisableMD5Stream();
    public void set_DisableMD5Stream(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_DisableDefaultChecksumValidation();
    [CompilerGeneratedAttribute]
public void set_DisableDefaultChecksumValidation(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_DisablePayloadSigning();
    [CompilerGeneratedAttribute]
public void set_DisablePayloadSigning(Nullable`1<bool> value);
    public bool get_CalculateContentMD5Header();
    public void set_CalculateContentMD5Header(bool value);
    public ObjectLockLegalHoldStatus get_ObjectLockLegalHoldStatus();
    public void set_ObjectLockLegalHoldStatus(ObjectLockLegalHoldStatus value);
    public ObjectLockMode get_ObjectLockMode();
    public void set_ObjectLockMode(ObjectLockMode value);
    public DateTime get_ObjectLockRetainUntilDate();
    public void set_ObjectLockRetainUntilDate(DateTime value);
    internal bool IsSetObjectLockRetainUntilDate();
    public ChecksumAlgorithm get_ChecksumAlgorithm();
    public void set_ChecksumAlgorithm(ChecksumAlgorithm value);
}
public class Amazon.S3.Transfer.UploadDirectoryFileRequestArgs : EventArgs {
    [CompilerGeneratedAttribute]
private TransferUtilityUploadRequest <UploadRequest>k__BackingField;
    public TransferUtilityUploadRequest UploadRequest { get; public set; }
    public UploadDirectoryFileRequestArgs(TransferUtilityUploadRequest request);
    [CompilerGeneratedAttribute]
public TransferUtilityUploadRequest get_UploadRequest();
    [CompilerGeneratedAttribute]
public void set_UploadRequest(TransferUtilityUploadRequest value);
}
public class Amazon.S3.Transfer.UploadDirectoryProgressArgs : EventArgs {
    [CompilerGeneratedAttribute]
private int <TotalNumberOfFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NumberOfFilesUploaded>k__BackingField;
    [CompilerGeneratedAttribute]
private long <TotalBytes>k__BackingField;
    [CompilerGeneratedAttribute]
private long <TransferredBytes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CurrentFile>k__BackingField;
    [CompilerGeneratedAttribute]
private long <TransferredBytesForCurrentFile>k__BackingField;
    [CompilerGeneratedAttribute]
private long <TotalNumberOfBytesForCurrentFile>k__BackingField;
    public int TotalNumberOfFiles { get; public set; }
    public int NumberOfFilesUploaded { get; public set; }
    public long TotalBytes { get; public set; }
    public long TransferredBytes { get; public set; }
    public string CurrentFile { get; public set; }
    public long TransferredBytesForCurrentFile { get; public set; }
    public long TotalNumberOfBytesForCurrentFile { get; public set; }
    public UploadDirectoryProgressArgs(int numberOfFilesUploaded, int totalNumberOfFiles, string currentFile, long transferredBytesForCurrentFile, long totalNumberOfBytesForCurrentFile);
    public UploadDirectoryProgressArgs(int numberOfFilesUploaded, int totalNumberOfFiles, long transferredBytes, long totalBytes, string currentFile, long transferredBytesForCurrentFile, long totalNumberOfBytesForCurrentFile);
    [CompilerGeneratedAttribute]
public int get_TotalNumberOfFiles();
    [CompilerGeneratedAttribute]
public void set_TotalNumberOfFiles(int value);
    [CompilerGeneratedAttribute]
public int get_NumberOfFilesUploaded();
    [CompilerGeneratedAttribute]
public void set_NumberOfFilesUploaded(int value);
    [CompilerGeneratedAttribute]
public long get_TotalBytes();
    [CompilerGeneratedAttribute]
public void set_TotalBytes(long value);
    [CompilerGeneratedAttribute]
public long get_TransferredBytes();
    [CompilerGeneratedAttribute]
public void set_TransferredBytes(long value);
    [CompilerGeneratedAttribute]
public string get_CurrentFile();
    [CompilerGeneratedAttribute]
public void set_CurrentFile(string value);
    [CompilerGeneratedAttribute]
public long get_TransferredBytesForCurrentFile();
    [CompilerGeneratedAttribute]
public void set_TransferredBytesForCurrentFile(long value);
    [CompilerGeneratedAttribute]
public long get_TotalNumberOfBytesForCurrentFile();
    [CompilerGeneratedAttribute]
public void set_TotalNumberOfBytesForCurrentFile(long value);
    public virtual string ToString();
}
public class Amazon.S3.Transfer.UploadProgressArgs : TransferProgressArgs {
    [CompilerGeneratedAttribute]
private string <FilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private long <CompensationForRetry>k__BackingField;
    public string FilePath { get; private set; }
    internal long CompensationForRetry { get; internal set; }
    public UploadProgressArgs(long incrementTransferred, long transferred, long total);
    public UploadProgressArgs(long incrementTransferred, long transferred, long total, string filePath);
    internal UploadProgressArgs(long incrementTransferred, long transferred, long total, long compensationForRetry, string filePath);
    [CompilerGeneratedAttribute]
public string get_FilePath();
    [CompilerGeneratedAttribute]
private void set_FilePath(string value);
    [CompilerGeneratedAttribute]
internal long get_CompensationForRetry();
    [CompilerGeneratedAttribute]
internal void set_CompensationForRetry(long value);
}
public class Amazon.S3.Util.AmazonS3Uri : object {
    private static string EndpointRegexPattern;
    private static Regex _endpointRegexMatch;
    [CompilerGeneratedAttribute]
private bool <IsPathStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Bucket>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private RegionEndpoint <Region>k__BackingField;
    public bool IsPathStyle { get; private set; }
    public string Bucket { get; private set; }
    public string Key { get; private set; }
    public RegionEndpoint Region { get; public set; }
    public AmazonS3Uri(string uri);
    public AmazonS3Uri(Uri uri);
    public AmazonS3Uri(string uri, bool decode);
    private static AmazonS3Uri();
    private static Regex EndpointRegexMatch();
    [CompilerGeneratedAttribute]
public bool get_IsPathStyle();
    [CompilerGeneratedAttribute]
private void set_IsPathStyle(bool value);
    [CompilerGeneratedAttribute]
public string get_Bucket();
    [CompilerGeneratedAttribute]
private void set_Bucket(string value);
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
private void set_Key(string value);
    [CompilerGeneratedAttribute]
public RegionEndpoint get_Region();
    [CompilerGeneratedAttribute]
public void set_Region(RegionEndpoint value);
    public static bool TryParseAmazonS3Uri(string uri, AmazonS3Uri& amazonS3Uri);
    public static bool TryParseAmazonS3Uri(string uri, bool decode, AmazonS3Uri& amazonS3Uri);
    public static bool TryParseAmazonS3Uri(Uri uri, AmazonS3Uri& amazonS3Uri);
    public static bool IsAmazonS3Endpoint(string uri);
    public static bool IsAmazonS3Endpoint(Uri uri);
    private static string Decode(string s);
    private static string Decode(string s, int firstPercent);
    private static void AppendDecoded(StringBuilder builder, string s, int index);
    private static int FromHex(char c);
    private static string EscapeSpecialControlCharacters(string uri);
}
[ExtensionAttribute]
public static class Amazon.S3.Util.AmazonS3Util : object {
    private static Dictionary`2<string, string> extensionToMime;
    private static string IPv4RegexPattern;
    private static string LabelRegexPattern;
    private static Regex _ipV4Regex;
    private static Regex _labelRegex;
    public static string FormattedCurrentTimestamp { get; }
    private static AmazonS3Util();
    public static string MimeTypeFromExtension(string ext);
    public static string UrlEncode(string data, bool path);
    public static Stream MakeStreamSeekable(Stream input);
    public static string get_FormattedCurrentTimestamp();
    public static string GenerateMD5ChecksumForStream(Stream input);
    public static string GenerateChecksumForContent(string content, bool fBase64Encode);
    internal static string ComputeEncodedMD5FromEncodedString(string base64EncodedString);
    internal static void SetMetadataHeaders(IRequest request, MetadataCollection metadata);
    private static string EscapeNonAscii(string text);
    [ExtensionAttribute]
public static bool IsDirectoryBucket(IRequest request);
    [ExtensionAttribute]
public static bool UseS3ExpressSessionAuth(IRequest request);
    internal static Nullable`1<DateTime> ParseExpiresHeader(string rawValue, string requestId);
    public static bool ValidateV2Bucket(string bucketName);
    private static Regex IPv4Regex();
    private static Regex LabelRegex();
    internal static void AddQueryStringParameter(StringBuilder queryString, string parameterName, string parameterValue);
    internal static void AddQueryStringParameter(StringBuilder queryString, string parameterName, string parameterValue, IDictionary`2<string, string> parameterMap);
    internal static string TagSetToQueryString(List`1<Tag> tags);
    internal static void SerializeTagToXml(XmlWriter xmlWriter, Tag tag);
    internal static void SerializeTagSetToXml(XmlWriter xmlWriter, List`1<Tag> tagset);
    internal static string SerializeTaggingToXml(Tagging tagging);
    internal static void ParseAmzRestoreHeader(string header, Boolean& restoreInProgress, Nullable`1& restoreExpiration);
    internal static bool IsInstructionFile(string key);
    internal static string RemoveLeadingSlash(string key);
    internal static bool ResourcePathContainsOutpostsResource(IRequest request);
    [AsyncStateMachineAttribute("Amazon.S3.Util.AmazonS3Util/<DoesS3BucketExistV2Async>d__31")]
public static Task`1<bool> DoesS3BucketExistV2Async(IAmazonS3 s3Client, string bucketName);
    [AsyncStateMachineAttribute("Amazon.S3.Util.AmazonS3Util/<DoesS3BucketExistAsync>d__32")]
[ObsoleteAttribute("This method is deprecated: its behavior is inconsistent and always uses HTTP. Please use DoesS3BucketExistV2Async instead.")]
public static Task`1<bool> DoesS3BucketExistAsync(IAmazonS3 s3Client, string bucketName);
    public static Task DeleteS3BucketWithObjectsAsync(IAmazonS3 s3Client, string bucketName);
    public static Task DeleteS3BucketWithObjectsAsync(IAmazonS3 s3Client, string bucketName, S3DeleteBucketWithObjectsOptions deleteOptions);
    public static Task DeleteS3BucketWithObjectsAsync(IAmazonS3 s3Client, string bucketName, CancellationToken token);
    public static Task DeleteS3BucketWithObjectsAsync(IAmazonS3 s3Client, string bucketName, S3DeleteBucketWithObjectsOptions deleteOptions, CancellationToken token);
    public static Task DeleteS3BucketWithObjectsAsync(IAmazonS3 s3Client, string bucketName, S3DeleteBucketWithObjectsOptions deleteOptions, Action`1<S3DeleteBucketWithObjectsUpdate> updateCallback, CancellationToken token);
    private static Task InvokeDeleteS3BucketWithObjects(object state, CancellationToken token);
    [AsyncStateMachineAttribute("Amazon.S3.Util.AmazonS3Util/<DeleteS3BucketWithObjectsInternalAsync>d__39")]
private static Task DeleteS3BucketWithObjectsInternalAsync(IAmazonS3 s3Client, string bucketName, S3DeleteBucketWithObjectsOptions deleteOptions, Action`1<S3DeleteBucketWithObjectsUpdate> updateCallback, CancellationToken token);
    private static void InvokeS3DeleteBucketWithObjectsUpdateCallback(Action`1<S3DeleteBucketWithObjectsUpdate> updateCallback, S3DeleteBucketWithObjectsUpdate update);
}
public static class Amazon.S3.Util.BucketRegionDetector : object {
    private static int BucketRegionCacheMaxEntries;
    private static string AuthorizationHeaderMalformedErrorCode;
    [CompilerGeneratedAttribute]
private static LruCache`2<string, RegionEndpoint> <BucketRegionCache>k__BackingField;
    public static LruCache`2<string, RegionEndpoint> BucketRegionCache { get; private set; }
    private static BucketRegionDetector();
    [CompilerGeneratedAttribute]
public static LruCache`2<string, RegionEndpoint> get_BucketRegionCache();
    [CompilerGeneratedAttribute]
private static void set_BucketRegionCache(LruCache`2<string, RegionEndpoint> value);
    internal static string GetCorrectRegion(AmazonS3Uri requestedBucketUri, HttpStatusCode headBucketStatusCode, string xAmzBucketRegionHeaderValue);
    private static string GetCorrectRegion(AmazonS3Uri requestedBucketUri, AmazonServiceException serviceException);
    private static string CheckRegionAndUpdateCache(AmazonS3Uri requestedBucketUri, string actualRegion);
    private static string GetHeadBucketPreSignedUrl(string bucketName, IRequestContext requestContext);
    private static AmazonS3Client GetUsEast1ClientFromCredentials(ImmutableCredentials credentials);
    [AsyncStateMachineAttribute("Amazon.S3.Util.BucketRegionDetector/<DetectMismatchWithHeadBucketFallbackAsync>d__12")]
internal static Task`1<string> DetectMismatchWithHeadBucketFallbackAsync(AmazonS3Uri requestedBucketUri, AmazonServiceException serviceException, IRequestContext requestContext);
    [AsyncStateMachineAttribute("Amazon.S3.Util.BucketRegionDetector/<GetBucketRegionNoPipelineAsync>d__13")]
private static Task`1<string> GetBucketRegionNoPipelineAsync(string bucketName, IRequestContext requestContext);
}
internal static class Amazon.S3.Util.S3Constants : object {
    internal static int PutObjectDefaultTimeout;
    internal static long MinPartSize;
    internal static int MaxNumberOfParts;
    internal static int DefaultBufferSize;
    internal static string S3DefaultEndpoint;
    internal static string S3AlternateDefaultEndpoint;
    internal static int MinBucketLength;
    internal static int MaxBucketLength;
    internal static int MULTIPLE_OBJECT_DELETE_LIMIT;
    internal static string AmzGrantHeaderRead;
    internal static string AmzGrantHeaderWrite;
    internal static string AmzGrantHeaderReadAcp;
    internal static string AmzGrantHeaderWriteAcp;
    internal static string AmzGrantHeaderRestoreObject;
    internal static string AmzGrantHeaderFullControl;
    internal static string PostFormDataObjectKey;
    internal static string PostFormDataAcl;
    internal static string PostFormDataRedirect;
    internal static string PostFormDataStatus;
    internal static string PostFormDataContentType;
    internal static string PostFormDataMetaPrefix;
    internal static string PostFormDataXAmzPrefix;
    internal static string PostFormDataAccessKeyId;
    internal static string PostFormDataPolicy;
    internal static string PostFormDataSignature;
    internal static string PostFormDataXAmzSignature;
    internal static string PostFormDataXAmzAlgorithm;
    internal static string PostFormDataXAmzCredential;
    internal static string PostFormDataXAmzDate;
    internal static string PostFormDataSecurityToken;
    internal static string AmzHeaderArchiveStatus;
    internal static string AmzHeaderBucketKeyEnabled;
    internal static string AmzHeaderExpectedBucketOwner;
    internal static string AmzHeaderExpectedSourceBucketOwner;
    internal static string AmzHeaderMultipartPartsCount;
    internal static string AmzHeaderRequestPayer;
    internal static string AmzHeaderRequestCharged;
    internal static string AmzHeaderTagging;
    internal static string AmzHeaderTaggingDirective;
    internal static string AmzHeaderTaggingCount;
    internal static string AmzHeaderSkipDestinationValidation;
    internal static string AmzHeaderChecksumAlgorithm;
    internal static string AmzHeaderSdkChecksumAlgorithm;
    internal static string AmzHeaderChecksumMode;
    internal static string AmzOptionalObjectAttributes;
    internal static string AmzHeaderRestoreOutputPath;
    internal static string EncryptionInstructionfileSuffix;
    internal static string EncryptionInstructionfileSuffixV2;
    internal static String[] BucketVersions;
    internal static string REGION_US_EAST_1;
    internal static string REGION_EU_WEST_1;
    internal static String[] MetadataDirectives;
    internal static string VersioningOff;
    internal static string VersioningSuspended;
    internal static string VersioningEnabled;
    internal static string NoSuchBucketPolicy;
    internal static string NoSuchWebsiteConfiguration;
    internal static string NoSuchLifecycleConfiguration;
    internal static string NoSuchCORSConfiguration;
    internal static HashSet`1<string> GetObjectExtraSubResources;
    internal static string S3RequestXmlNamespace;
    private static S3Constants();
}
public class Amazon.S3.Util.S3DeleteBucketWithObjectsOptions : object {
    [CompilerGeneratedAttribute]
private bool <ContinueOnError>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <QuietMode>k__BackingField;
    public bool ContinueOnError { get; public set; }
    public bool QuietMode { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_ContinueOnError();
    [CompilerGeneratedAttribute]
public void set_ContinueOnError(bool value);
    [CompilerGeneratedAttribute]
public bool get_QuietMode();
    [CompilerGeneratedAttribute]
public void set_QuietMode(bool value);
}
internal class Amazon.S3.Util.S3DeleteBucketWithObjectsRequest : object {
    [CompilerGeneratedAttribute]
private string <BucketName>k__BackingField;
    [CompilerGeneratedAttribute]
private IAmazonS3 <S3Client>k__BackingField;
    [CompilerGeneratedAttribute]
private S3DeleteBucketWithObjectsOptions <DeleteOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<S3DeleteBucketWithObjectsUpdate> <UpdateCallback>k__BackingField;
    public string BucketName { get; public set; }
    public IAmazonS3 S3Client { get; public set; }
    public S3DeleteBucketWithObjectsOptions DeleteOptions { get; public set; }
    public Action`1<S3DeleteBucketWithObjectsUpdate> UpdateCallback { get; public set; }
    [CompilerGeneratedAttribute]
public string get_BucketName();
    [CompilerGeneratedAttribute]
public void set_BucketName(string value);
    [CompilerGeneratedAttribute]
public IAmazonS3 get_S3Client();
    [CompilerGeneratedAttribute]
public void set_S3Client(IAmazonS3 value);
    [CompilerGeneratedAttribute]
public S3DeleteBucketWithObjectsOptions get_DeleteOptions();
    [CompilerGeneratedAttribute]
public void set_DeleteOptions(S3DeleteBucketWithObjectsOptions value);
    [CompilerGeneratedAttribute]
public Action`1<S3DeleteBucketWithObjectsUpdate> get_UpdateCallback();
    [CompilerGeneratedAttribute]
public void set_UpdateCallback(Action`1<S3DeleteBucketWithObjectsUpdate> value);
}
public class Amazon.S3.Util.S3DeleteBucketWithObjectsUpdate : object {
    [CompilerGeneratedAttribute]
private IList`1<DeletedObject> <DeletedObjects>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<DeleteError> <DeleteErrors>k__BackingField;
    public IList`1<DeletedObject> DeletedObjects { get; public set; }
    public IList`1<DeleteError> DeleteErrors { get; public set; }
    [CompilerGeneratedAttribute]
public IList`1<DeletedObject> get_DeletedObjects();
    [CompilerGeneratedAttribute]
public void set_DeletedObjects(IList`1<DeletedObject> value);
    [CompilerGeneratedAttribute]
public IList`1<DeleteError> get_DeleteErrors();
    [CompilerGeneratedAttribute]
public void set_DeleteErrors(IList`1<DeleteError> value);
}
public class Amazon.S3.Util.S3EventNotification : object {
    [CompilerGeneratedAttribute]
private List`1<S3EventNotificationRecord> <Records>k__BackingField;
    public List`1<S3EventNotificationRecord> Records { get; public set; }
    public static S3EventNotification ParseJson(string json);
    [CompilerGeneratedAttribute]
public List`1<S3EventNotificationRecord> get_Records();
    [CompilerGeneratedAttribute]
public void set_Records(List`1<S3EventNotificationRecord> value);
    private static string GetValueAsString(JsonData data, string key);
    private static Nullable`1<DateTime> GetValueAsDateTime(JsonData data, string key);
    private static long GetValueAsLong(JsonData data, string key);
}
public class Amazon.S3.VersionStatus : ConstantClass {
    public static VersionStatus Off;
    public static VersionStatus Suspended;
    public static VersionStatus Enabled;
    public VersionStatus(string value);
    private static VersionStatus();
    public static VersionStatus FindValue(string value);
    public static VersionStatus op_Implicit(string value);
}
