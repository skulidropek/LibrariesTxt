public class Amazon.SecurityToken.AmazonSecurityTokenServiceClient : AmazonServiceClient {
    private static IServiceMetadata serviceMetadata;
    protected IServiceMetadata ServiceMetadata { get; }
    public AmazonSecurityTokenServiceClient(RegionEndpoint region);
    public AmazonSecurityTokenServiceClient(AmazonSecurityTokenServiceConfig config);
    public AmazonSecurityTokenServiceClient(AWSCredentials credentials);
    public AmazonSecurityTokenServiceClient(AWSCredentials credentials, RegionEndpoint region);
    public AmazonSecurityTokenServiceClient(AWSCredentials credentials, AmazonSecurityTokenServiceConfig clientConfig);
    public AmazonSecurityTokenServiceClient(string awsAccessKeyId, string awsSecretAccessKey);
    public AmazonSecurityTokenServiceClient(string awsAccessKeyId, string awsSecretAccessKey, RegionEndpoint region);
    public AmazonSecurityTokenServiceClient(string awsAccessKeyId, string awsSecretAccessKey, AmazonSecurityTokenServiceConfig clientConfig);
    public AmazonSecurityTokenServiceClient(string awsAccessKeyId, string awsSecretAccessKey, string awsSessionToken);
    public AmazonSecurityTokenServiceClient(string awsAccessKeyId, string awsSecretAccessKey, string awsSessionToken, RegionEndpoint region);
    public AmazonSecurityTokenServiceClient(string awsAccessKeyId, string awsSecretAccessKey, string awsSessionToken, AmazonSecurityTokenServiceConfig clientConfig);
    private static AmazonSecurityTokenServiceClient();
    private sealed virtual override SAMLImmutableCredentials Amazon.Runtime.SharedInterfaces.ICoreAmazonSTS_SAML.CredentialsFromSAMLAuthentication(string endpoint, string authenticationType, string roleARN, TimeSpan credentialDuration, ICredentials userCredential);
    private AssumeRoleWithWebIdentityRequest SetupAssumeRoleWithWebIdentityRequest(string webIdentityToken, string roleArn, string roleSessionName, AssumeRoleWithWebIdentityCredentialsOptions options);
    private sealed virtual override AssumeRoleImmutableCredentials Amazon.Runtime.SharedInterfaces.ICoreAmazonSTS_WebIdentity.CredentialsFromAssumeRoleWithWebIdentityAuthentication(string webIdentityToken, string roleArn, string roleSessionName, AssumeRoleWithWebIdentityCredentialsOptions options);
    [AsyncStateMachineAttribute("Amazon.SecurityToken.AmazonSecurityTokenServiceClient/<Amazon-Runtime-SharedInterfaces-ICoreAmazonSTS_WebIdentity-CredentialsFromAssumeRoleWithWebIdentityAuthenticationAsync>d__3")]
private sealed virtual override Task`1<AssumeRoleImmutableCredentials> Amazon.Runtime.SharedInterfaces.ICoreAmazonSTS_WebIdentity.CredentialsFromAssumeRoleWithWebIdentityAuthenticationAsync(string webIdentityToken, string roleArn, string roleSessionName, AssumeRoleWithWebIdentityCredentialsOptions options);
    private sealed virtual override AssumeRoleImmutableCredentials Amazon.Runtime.SharedInterfaces.ICoreAmazonSTS.CredentialsFromAssumeRoleAuthentication(string roleArn, string roleSessionName, AssumeRoleAWSCredentialsOptions options);
    protected virtual AbstractAWSSigner CreateSigner();
    protected virtual void CustomizeRuntimePipeline(RuntimePipeline pipeline);
    protected virtual IServiceMetadata get_ServiceMetadata();
    protected virtual void Dispose(bool disposing);
    internal virtual AssumeRoleResponse AssumeRole(AssumeRoleRequest request);
    public virtual Task`1<AssumeRoleResponse> AssumeRoleAsync(AssumeRoleRequest request, CancellationToken cancellationToken);
    internal virtual AssumeRoleWithSAMLResponse AssumeRoleWithSAML(AssumeRoleWithSAMLRequest request);
    public virtual Task`1<AssumeRoleWithSAMLResponse> AssumeRoleWithSAMLAsync(AssumeRoleWithSAMLRequest request, CancellationToken cancellationToken);
    internal virtual AssumeRoleWithWebIdentityResponse AssumeRoleWithWebIdentity(AssumeRoleWithWebIdentityRequest request);
    public virtual Task`1<AssumeRoleWithWebIdentityResponse> AssumeRoleWithWebIdentityAsync(AssumeRoleWithWebIdentityRequest request, CancellationToken cancellationToken);
    internal virtual DecodeAuthorizationMessageResponse DecodeAuthorizationMessage(DecodeAuthorizationMessageRequest request);
    public virtual Task`1<DecodeAuthorizationMessageResponse> DecodeAuthorizationMessageAsync(DecodeAuthorizationMessageRequest request, CancellationToken cancellationToken);
    internal virtual GetAccessKeyInfoResponse GetAccessKeyInfo(GetAccessKeyInfoRequest request);
    public virtual Task`1<GetAccessKeyInfoResponse> GetAccessKeyInfoAsync(GetAccessKeyInfoRequest request, CancellationToken cancellationToken);
    internal virtual GetCallerIdentityResponse GetCallerIdentity(GetCallerIdentityRequest request);
    public virtual Task`1<GetCallerIdentityResponse> GetCallerIdentityAsync(GetCallerIdentityRequest request, CancellationToken cancellationToken);
    internal virtual GetFederationTokenResponse GetFederationToken(GetFederationTokenRequest request);
    public virtual Task`1<GetFederationTokenResponse> GetFederationTokenAsync(GetFederationTokenRequest request, CancellationToken cancellationToken);
    internal virtual GetSessionTokenResponse GetSessionToken();
    internal virtual GetSessionTokenResponse GetSessionToken(GetSessionTokenRequest request);
    public virtual Task`1<GetSessionTokenResponse> GetSessionTokenAsync(CancellationToken cancellationToken);
    public virtual Task`1<GetSessionTokenResponse> GetSessionTokenAsync(GetSessionTokenRequest request, CancellationToken cancellationToken);
    public sealed virtual Endpoint DetermineServiceOperationEndpoint(AmazonWebServiceRequest request);
    private sealed virtual override IClientConfig Amazon.Runtime.IAmazonService.get_Config();
}
[AWSSignerTypeAttribute("v4")]
public class Amazon.SecurityToken.AmazonSecurityTokenServiceConfig : ClientConfig {
    private static string UserAgentString;
    private static AmazonSecurityTokenServiceEndpointResolver EndpointResolver;
    private string _userAgent;
    public static string ServiceId { get; }
    public string RegionEndpointServiceName { get; }
    public string ServiceVersion { get; }
    public string UserAgent { get; }
    private static AmazonSecurityTokenServiceConfig();
    public static string get_ServiceId();
    public virtual string get_RegionEndpointServiceName();
    public virtual string get_ServiceVersion();
    public virtual string get_UserAgent();
    public virtual Endpoint DetermineServiceOperationEndpoint(ServiceOperationEndpointParameters parameters);
}
public static class Amazon.SecurityToken.AmazonSecurityTokenServiceDefaultConfiguration : object {
    [CompilerGeneratedAttribute]
private static IDefaultConfiguration <Standard>k__BackingField;
    [CompilerGeneratedAttribute]
private static IDefaultConfiguration <InRegion>k__BackingField;
    [CompilerGeneratedAttribute]
private static IDefaultConfiguration <CrossRegion>k__BackingField;
    [CompilerGeneratedAttribute]
private static IDefaultConfiguration <Mobile>k__BackingField;
    [CompilerGeneratedAttribute]
private static IDefaultConfiguration <Auto>k__BackingField;
    public static IDefaultConfiguration Standard { get; }
    public static IDefaultConfiguration InRegion { get; }
    public static IDefaultConfiguration CrossRegion { get; }
    public static IDefaultConfiguration Mobile { get; }
    public static IDefaultConfiguration Auto { get; }
    private static AmazonSecurityTokenServiceDefaultConfiguration();
    public static ReadOnlyCollection`1<IDefaultConfiguration> GetAllConfigurations();
    [CompilerGeneratedAttribute]
public static IDefaultConfiguration get_Standard();
    [CompilerGeneratedAttribute]
public static IDefaultConfiguration get_InRegion();
    [CompilerGeneratedAttribute]
public static IDefaultConfiguration get_CrossRegion();
    [CompilerGeneratedAttribute]
public static IDefaultConfiguration get_Mobile();
    [CompilerGeneratedAttribute]
public static IDefaultConfiguration get_Auto();
}
public class Amazon.SecurityToken.AmazonSecurityTokenServiceException : AmazonServiceException {
    public AmazonSecurityTokenServiceException(string message);
    public AmazonSecurityTokenServiceException(string message, Exception innerException);
    public AmazonSecurityTokenServiceException(Exception innerException);
    public AmazonSecurityTokenServiceException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public AmazonSecurityTokenServiceException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.SecurityToken.AmazonSecurityTokenServiceRequest : AmazonWebServiceRequest {
}
public class Amazon.SecurityToken.Endpoints.SecurityTokenServiceEndpointParameters : EndpointParameters {
    public string Region { get; public set; }
    public Nullable`1<bool> UseDualStack { get; public set; }
    public Nullable`1<bool> UseFIPS { get; public set; }
    public string Endpoint { get; public set; }
    public Nullable`1<bool> UseGlobalEndpoint { get; public set; }
    public string get_Region();
    public void set_Region(string value);
    public Nullable`1<bool> get_UseDualStack();
    public void set_UseDualStack(Nullable`1<bool> value);
    public Nullable`1<bool> get_UseFIPS();
    public void set_UseFIPS(Nullable`1<bool> value);
    public string get_Endpoint();
    public void set_Endpoint(string value);
    public Nullable`1<bool> get_UseGlobalEndpoint();
    public void set_UseGlobalEndpoint(Nullable`1<bool> value);
}
public interface Amazon.SecurityToken.IAmazonSecurityTokenService {
    public abstract virtual Task`1<AssumeRoleResponse> AssumeRoleAsync(AssumeRoleRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<AssumeRoleWithSAMLResponse> AssumeRoleWithSAMLAsync(AssumeRoleWithSAMLRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<AssumeRoleWithWebIdentityResponse> AssumeRoleWithWebIdentityAsync(AssumeRoleWithWebIdentityRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DecodeAuthorizationMessageResponse> DecodeAuthorizationMessageAsync(DecodeAuthorizationMessageRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<GetAccessKeyInfoResponse> GetAccessKeyInfoAsync(GetAccessKeyInfoRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<GetCallerIdentityResponse> GetCallerIdentityAsync(GetCallerIdentityRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<GetFederationTokenResponse> GetFederationTokenAsync(GetFederationTokenRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<GetSessionTokenResponse> GetSessionTokenAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<GetSessionTokenResponse> GetSessionTokenAsync(GetSessionTokenRequest request, CancellationToken cancellationToken);
    public abstract virtual Endpoint DetermineServiceOperationEndpoint(AmazonWebServiceRequest request);
}
public class Amazon.SecurityToken.Internal.AmazonSecurityTokenServiceEndpointProvider : object {
    public sealed virtual Endpoint ResolveEndpoint(EndpointParameters parameters);
}
public class Amazon.SecurityToken.Internal.AmazonSecurityTokenServiceEndpointResolver : BaseEndpointResolver {
    protected virtual void ServiceSpecificHandler(IExecutionContext executionContext, EndpointParameters parameters);
    protected virtual EndpointParameters MapEndpointsParameters(IRequestContext requestContext);
}
public class Amazon.SecurityToken.Internal.AmazonSecurityTokenServiceMetadata : object {
    public string ServiceId { get; }
    public IDictionary`2<string, string> OperationNameMapping { get; }
    public sealed virtual string get_ServiceId();
    public sealed virtual IDictionary`2<string, string> get_OperationNameMapping();
}
public class Amazon.SecurityToken.Model.AssumedRoleUser : object {
    private string _arn;
    private string _assumedRoleId;
    [AWSPropertyAttribute]
public string Arn { get; public set; }
    [AWSPropertyAttribute]
public string AssumedRoleId { get; public set; }
    public string get_Arn();
    public void set_Arn(string value);
    internal bool IsSetArn();
    public string get_AssumedRoleId();
    public void set_AssumedRoleId(string value);
    internal bool IsSetAssumedRoleId();
}
public class Amazon.SecurityToken.Model.AssumeRoleRequest : AmazonSecurityTokenServiceRequest {
    private Nullable`1<int> _durationSeconds;
    private string _externalId;
    private string _policy;
    private List`1<PolicyDescriptorType> _policyArns;
    private List`1<ProvidedContext> _providedContexts;
    private string _roleArn;
    private string _roleSessionName;
    private string _serialNumber;
    private string _sourceIdentity;
    private List`1<Tag> _tags;
    private string _tokenCode;
    private List`1<string> _transitiveTagKeys;
    [AWSPropertyAttribute]
public Nullable`1<int> DurationSeconds { get; public set; }
    [AWSPropertyAttribute]
public string ExternalId { get; public set; }
    [AWSPropertyAttribute]
public string Policy { get; public set; }
    public List`1<PolicyDescriptorType> PolicyArns { get; public set; }
    [AWSPropertyAttribute]
public List`1<ProvidedContext> ProvidedContexts { get; public set; }
    [AWSPropertyAttribute]
public string RoleArn { get; public set; }
    [AWSPropertyAttribute]
public string RoleSessionName { get; public set; }
    [AWSPropertyAttribute]
public string SerialNumber { get; public set; }
    [AWSPropertyAttribute]
public string SourceIdentity { get; public set; }
    [AWSPropertyAttribute]
public List`1<Tag> Tags { get; public set; }
    [AWSPropertyAttribute]
public string TokenCode { get; public set; }
    [AWSPropertyAttribute]
public List`1<string> TransitiveTagKeys { get; public set; }
    public Nullable`1<int> get_DurationSeconds();
    public void set_DurationSeconds(Nullable`1<int> value);
    internal bool IsSetDurationSeconds();
    public string get_ExternalId();
    public void set_ExternalId(string value);
    internal bool IsSetExternalId();
    public string get_Policy();
    public void set_Policy(string value);
    internal bool IsSetPolicy();
    public List`1<PolicyDescriptorType> get_PolicyArns();
    public void set_PolicyArns(List`1<PolicyDescriptorType> value);
    internal bool IsSetPolicyArns();
    public List`1<ProvidedContext> get_ProvidedContexts();
    public void set_ProvidedContexts(List`1<ProvidedContext> value);
    internal bool IsSetProvidedContexts();
    public string get_RoleArn();
    public void set_RoleArn(string value);
    internal bool IsSetRoleArn();
    public string get_RoleSessionName();
    public void set_RoleSessionName(string value);
    internal bool IsSetRoleSessionName();
    public string get_SerialNumber();
    public void set_SerialNumber(string value);
    internal bool IsSetSerialNumber();
    public string get_SourceIdentity();
    public void set_SourceIdentity(string value);
    internal bool IsSetSourceIdentity();
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
    public string get_TokenCode();
    public void set_TokenCode(string value);
    internal bool IsSetTokenCode();
    public List`1<string> get_TransitiveTagKeys();
    public void set_TransitiveTagKeys(List`1<string> value);
    internal bool IsSetTransitiveTagKeys();
}
public class Amazon.SecurityToken.Model.AssumeRoleResponse : AmazonWebServiceResponse {
    private AssumedRoleUser _assumedRoleUser;
    private Credentials _credentials;
    private Nullable`1<int> _packedPolicySize;
    private string _sourceIdentity;
    public AssumedRoleUser AssumedRoleUser { get; public set; }
    public Credentials Credentials { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> PackedPolicySize { get; public set; }
    [AWSPropertyAttribute]
public string SourceIdentity { get; public set; }
    public AssumedRoleUser get_AssumedRoleUser();
    public void set_AssumedRoleUser(AssumedRoleUser value);
    internal bool IsSetAssumedRoleUser();
    public Credentials get_Credentials();
    public void set_Credentials(Credentials value);
    internal bool IsSetCredentials();
    public Nullable`1<int> get_PackedPolicySize();
    public void set_PackedPolicySize(Nullable`1<int> value);
    internal bool IsSetPackedPolicySize();
    public string get_SourceIdentity();
    public void set_SourceIdentity(string value);
    internal bool IsSetSourceIdentity();
}
public class Amazon.SecurityToken.Model.AssumeRoleWithSAMLRequest : AmazonSecurityTokenServiceRequest {
    private Nullable`1<int> _durationSeconds;
    private string _policy;
    private List`1<PolicyDescriptorType> _policyArns;
    private string _principalArn;
    private string _roleArn;
    private string _samlAssertion;
    [AWSPropertyAttribute]
public Nullable`1<int> DurationSeconds { get; public set; }
    [AWSPropertyAttribute]
public string Policy { get; public set; }
    public List`1<PolicyDescriptorType> PolicyArns { get; public set; }
    [AWSPropertyAttribute]
public string PrincipalArn { get; public set; }
    [AWSPropertyAttribute]
public string RoleArn { get; public set; }
    [AWSPropertyAttribute]
public string SAMLAssertion { get; public set; }
    public Nullable`1<int> get_DurationSeconds();
    public void set_DurationSeconds(Nullable`1<int> value);
    internal bool IsSetDurationSeconds();
    public string get_Policy();
    public void set_Policy(string value);
    internal bool IsSetPolicy();
    public List`1<PolicyDescriptorType> get_PolicyArns();
    public void set_PolicyArns(List`1<PolicyDescriptorType> value);
    internal bool IsSetPolicyArns();
    public string get_PrincipalArn();
    public void set_PrincipalArn(string value);
    internal bool IsSetPrincipalArn();
    public string get_RoleArn();
    public void set_RoleArn(string value);
    internal bool IsSetRoleArn();
    public string get_SAMLAssertion();
    public void set_SAMLAssertion(string value);
    internal bool IsSetSAMLAssertion();
}
public class Amazon.SecurityToken.Model.AssumeRoleWithSAMLResponse : AmazonWebServiceResponse {
    private AssumedRoleUser _assumedRoleUser;
    private string _audience;
    private Credentials _credentials;
    private string _issuer;
    private string _nameQualifier;
    private Nullable`1<int> _packedPolicySize;
    private string _sourceIdentity;
    private string _subject;
    private string _subjectType;
    public AssumedRoleUser AssumedRoleUser { get; public set; }
    public string Audience { get; public set; }
    public Credentials Credentials { get; public set; }
    public string Issuer { get; public set; }
    public string NameQualifier { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> PackedPolicySize { get; public set; }
    [AWSPropertyAttribute]
public string SourceIdentity { get; public set; }
    public string Subject { get; public set; }
    public string SubjectType { get; public set; }
    public AssumedRoleUser get_AssumedRoleUser();
    public void set_AssumedRoleUser(AssumedRoleUser value);
    internal bool IsSetAssumedRoleUser();
    public string get_Audience();
    public void set_Audience(string value);
    internal bool IsSetAudience();
    public Credentials get_Credentials();
    public void set_Credentials(Credentials value);
    internal bool IsSetCredentials();
    public string get_Issuer();
    public void set_Issuer(string value);
    internal bool IsSetIssuer();
    public string get_NameQualifier();
    public void set_NameQualifier(string value);
    internal bool IsSetNameQualifier();
    public Nullable`1<int> get_PackedPolicySize();
    public void set_PackedPolicySize(Nullable`1<int> value);
    internal bool IsSetPackedPolicySize();
    public string get_SourceIdentity();
    public void set_SourceIdentity(string value);
    internal bool IsSetSourceIdentity();
    public string get_Subject();
    public void set_Subject(string value);
    internal bool IsSetSubject();
    public string get_SubjectType();
    public void set_SubjectType(string value);
    internal bool IsSetSubjectType();
}
public class Amazon.SecurityToken.Model.AssumeRoleWithWebIdentityRequest : AmazonSecurityTokenServiceRequest {
    private Nullable`1<int> _durationSeconds;
    private string _policy;
    private List`1<PolicyDescriptorType> _policyArns;
    private string _providerId;
    private string _roleArn;
    private string _roleSessionName;
    private string _webIdentityToken;
    [AWSPropertyAttribute]
public Nullable`1<int> DurationSeconds { get; public set; }
    [AWSPropertyAttribute]
public string Policy { get; public set; }
    public List`1<PolicyDescriptorType> PolicyArns { get; public set; }
    [AWSPropertyAttribute]
public string ProviderId { get; public set; }
    [AWSPropertyAttribute]
public string RoleArn { get; public set; }
    [AWSPropertyAttribute]
public string RoleSessionName { get; public set; }
    [AWSPropertyAttribute]
public string WebIdentityToken { get; public set; }
    public Nullable`1<int> get_DurationSeconds();
    public void set_DurationSeconds(Nullable`1<int> value);
    internal bool IsSetDurationSeconds();
    public string get_Policy();
    public void set_Policy(string value);
    internal bool IsSetPolicy();
    public List`1<PolicyDescriptorType> get_PolicyArns();
    public void set_PolicyArns(List`1<PolicyDescriptorType> value);
    internal bool IsSetPolicyArns();
    public string get_ProviderId();
    public void set_ProviderId(string value);
    internal bool IsSetProviderId();
    public string get_RoleArn();
    public void set_RoleArn(string value);
    internal bool IsSetRoleArn();
    public string get_RoleSessionName();
    public void set_RoleSessionName(string value);
    internal bool IsSetRoleSessionName();
    public string get_WebIdentityToken();
    public void set_WebIdentityToken(string value);
    internal bool IsSetWebIdentityToken();
}
public class Amazon.SecurityToken.Model.AssumeRoleWithWebIdentityResponse : AmazonWebServiceResponse {
    private AssumedRoleUser _assumedRoleUser;
    private string _audience;
    private Credentials _credentials;
    private Nullable`1<int> _packedPolicySize;
    private string _provider;
    private string _sourceIdentity;
    private string _subjectFromWebIdentityToken;
    public AssumedRoleUser AssumedRoleUser { get; public set; }
    public string Audience { get; public set; }
    public Credentials Credentials { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> PackedPolicySize { get; public set; }
    public string Provider { get; public set; }
    [AWSPropertyAttribute]
public string SourceIdentity { get; public set; }
    [AWSPropertyAttribute]
public string SubjectFromWebIdentityToken { get; public set; }
    public AssumedRoleUser get_AssumedRoleUser();
    public void set_AssumedRoleUser(AssumedRoleUser value);
    internal bool IsSetAssumedRoleUser();
    public string get_Audience();
    public void set_Audience(string value);
    internal bool IsSetAudience();
    public Credentials get_Credentials();
    public void set_Credentials(Credentials value);
    internal bool IsSetCredentials();
    public Nullable`1<int> get_PackedPolicySize();
    public void set_PackedPolicySize(Nullable`1<int> value);
    internal bool IsSetPackedPolicySize();
    public string get_Provider();
    public void set_Provider(string value);
    internal bool IsSetProvider();
    public string get_SourceIdentity();
    public void set_SourceIdentity(string value);
    internal bool IsSetSourceIdentity();
    public string get_SubjectFromWebIdentityToken();
    public void set_SubjectFromWebIdentityToken(string value);
    internal bool IsSetSubjectFromWebIdentityToken();
}
public class Amazon.SecurityToken.Model.Credentials : AWSCredentials {
    private ImmutableCredentials _credentials;
    private string _accessKeyId;
    private Nullable`1<DateTime> _expiration;
    private string _secretAccessKey;
    private string _sessionToken;
    [AWSPropertyAttribute]
public string AccessKeyId { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<DateTime> Expiration { get; public set; }
    [AWSPropertyAttribute]
public string SecretAccessKey { get; public set; }
    [AWSPropertyAttribute]
public string SessionToken { get; public set; }
    public Credentials(string accessKeyId, string secretAccessKey, string sessionToken, Nullable`1<DateTime> expiration);
    public virtual ImmutableCredentials GetCredentials();
    public string get_AccessKeyId();
    public void set_AccessKeyId(string value);
    internal bool IsSetAccessKeyId();
    public Nullable`1<DateTime> get_Expiration();
    public void set_Expiration(Nullable`1<DateTime> value);
    internal bool IsSetExpiration();
    public string get_SecretAccessKey();
    public void set_SecretAccessKey(string value);
    internal bool IsSetSecretAccessKey();
    public string get_SessionToken();
    public void set_SessionToken(string value);
    internal bool IsSetSessionToken();
}
public class Amazon.SecurityToken.Model.DecodeAuthorizationMessageRequest : AmazonSecurityTokenServiceRequest {
    private string _encodedMessage;
    [AWSPropertyAttribute]
public string EncodedMessage { get; public set; }
    public string get_EncodedMessage();
    public void set_EncodedMessage(string value);
    internal bool IsSetEncodedMessage();
}
public class Amazon.SecurityToken.Model.DecodeAuthorizationMessageResponse : AmazonWebServiceResponse {
    private string _decodedMessage;
    public string DecodedMessage { get; public set; }
    public string get_DecodedMessage();
    public void set_DecodedMessage(string value);
    internal bool IsSetDecodedMessage();
}
public class Amazon.SecurityToken.Model.ExpiredTokenException : AmazonSecurityTokenServiceException {
    public ExpiredTokenException(string message);
    public ExpiredTokenException(string message, Exception innerException);
    public ExpiredTokenException(Exception innerException);
    public ExpiredTokenException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public ExpiredTokenException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.SecurityToken.Model.FederatedUser : object {
    private string _arn;
    private string _federatedUserId;
    [AWSPropertyAttribute]
public string Arn { get; public set; }
    [AWSPropertyAttribute]
public string FederatedUserId { get; public set; }
    public FederatedUser(string federatedUserId, string arn);
    public string get_Arn();
    public void set_Arn(string value);
    internal bool IsSetArn();
    public string get_FederatedUserId();
    public void set_FederatedUserId(string value);
    internal bool IsSetFederatedUserId();
}
public class Amazon.SecurityToken.Model.GetAccessKeyInfoRequest : AmazonSecurityTokenServiceRequest {
    private string _accessKeyId;
    [AWSPropertyAttribute]
public string AccessKeyId { get; public set; }
    public string get_AccessKeyId();
    public void set_AccessKeyId(string value);
    internal bool IsSetAccessKeyId();
}
public class Amazon.SecurityToken.Model.GetAccessKeyInfoResponse : AmazonWebServiceResponse {
    private string _account;
    public string Account { get; public set; }
    public string get_Account();
    public void set_Account(string value);
    internal bool IsSetAccount();
}
public class Amazon.SecurityToken.Model.GetCallerIdentityRequest : AmazonSecurityTokenServiceRequest {
}
public class Amazon.SecurityToken.Model.GetCallerIdentityResponse : AmazonWebServiceResponse {
    private string _account;
    private string _arn;
    private string _userId;
    public string Account { get; public set; }
    [AWSPropertyAttribute]
public string Arn { get; public set; }
    public string UserId { get; public set; }
    public string get_Account();
    public void set_Account(string value);
    internal bool IsSetAccount();
    public string get_Arn();
    public void set_Arn(string value);
    internal bool IsSetArn();
    public string get_UserId();
    public void set_UserId(string value);
    internal bool IsSetUserId();
}
public class Amazon.SecurityToken.Model.GetFederationTokenRequest : AmazonSecurityTokenServiceRequest {
    private Nullable`1<int> _durationSeconds;
    private string _name;
    private string _policy;
    private List`1<PolicyDescriptorType> _policyArns;
    private List`1<Tag> _tags;
    [AWSPropertyAttribute]
public Nullable`1<int> DurationSeconds { get; public set; }
    [AWSPropertyAttribute]
public string Name { get; public set; }
    [AWSPropertyAttribute]
public string Policy { get; public set; }
    public List`1<PolicyDescriptorType> PolicyArns { get; public set; }
    [AWSPropertyAttribute]
public List`1<Tag> Tags { get; public set; }
    public GetFederationTokenRequest(string name);
    public Nullable`1<int> get_DurationSeconds();
    public void set_DurationSeconds(Nullable`1<int> value);
    internal bool IsSetDurationSeconds();
    public string get_Name();
    public void set_Name(string value);
    internal bool IsSetName();
    public string get_Policy();
    public void set_Policy(string value);
    internal bool IsSetPolicy();
    public List`1<PolicyDescriptorType> get_PolicyArns();
    public void set_PolicyArns(List`1<PolicyDescriptorType> value);
    internal bool IsSetPolicyArns();
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
}
public class Amazon.SecurityToken.Model.GetFederationTokenResponse : AmazonWebServiceResponse {
    private Credentials _credentials;
    private FederatedUser _federatedUser;
    private Nullable`1<int> _packedPolicySize;
    public Credentials Credentials { get; public set; }
    public FederatedUser FederatedUser { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> PackedPolicySize { get; public set; }
    public Credentials get_Credentials();
    public void set_Credentials(Credentials value);
    internal bool IsSetCredentials();
    public FederatedUser get_FederatedUser();
    public void set_FederatedUser(FederatedUser value);
    internal bool IsSetFederatedUser();
    public Nullable`1<int> get_PackedPolicySize();
    public void set_PackedPolicySize(Nullable`1<int> value);
    internal bool IsSetPackedPolicySize();
}
public class Amazon.SecurityToken.Model.GetSessionTokenRequest : AmazonSecurityTokenServiceRequest {
    private Nullable`1<int> _durationSeconds;
    private string _serialNumber;
    private string _tokenCode;
    [AWSPropertyAttribute]
public Nullable`1<int> DurationSeconds { get; public set; }
    [AWSPropertyAttribute]
public string SerialNumber { get; public set; }
    [AWSPropertyAttribute]
public string TokenCode { get; public set; }
    public Nullable`1<int> get_DurationSeconds();
    public void set_DurationSeconds(Nullable`1<int> value);
    internal bool IsSetDurationSeconds();
    public string get_SerialNumber();
    public void set_SerialNumber(string value);
    internal bool IsSetSerialNumber();
    public string get_TokenCode();
    public void set_TokenCode(string value);
    internal bool IsSetTokenCode();
}
public class Amazon.SecurityToken.Model.GetSessionTokenResponse : AmazonWebServiceResponse {
    private Credentials _credentials;
    public Credentials Credentials { get; public set; }
    public Credentials get_Credentials();
    public void set_Credentials(Credentials value);
    internal bool IsSetCredentials();
}
public class Amazon.SecurityToken.Model.IDPCommunicationErrorException : AmazonSecurityTokenServiceException {
    public IDPCommunicationErrorException(string message);
    public IDPCommunicationErrorException(string message, Exception innerException);
    public IDPCommunicationErrorException(Exception innerException);
    public IDPCommunicationErrorException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public IDPCommunicationErrorException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.SecurityToken.Model.IDPRejectedClaimException : AmazonSecurityTokenServiceException {
    public IDPRejectedClaimException(string message);
    public IDPRejectedClaimException(string message, Exception innerException);
    public IDPRejectedClaimException(Exception innerException);
    public IDPRejectedClaimException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public IDPRejectedClaimException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.SecurityToken.Model.Internal.MarshallTransformations.AssumedRoleUserUnmarshaller : object {
    private static AssumedRoleUserUnmarshaller _instance;
    public static AssumedRoleUserUnmarshaller Instance { get; }
    private static AssumedRoleUserUnmarshaller();
    public sealed virtual AssumedRoleUser Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual AssumedRoleUser Unmarshall(JsonUnmarshallerContext context);
    public static AssumedRoleUserUnmarshaller get_Instance();
}
public class Amazon.SecurityToken.Model.Internal.MarshallTransformations.AssumeRoleRequestMarshaller : object {
    private static AssumeRoleRequestMarshaller _instance;
    public static AssumeRoleRequestMarshaller Instance { get; }
    private static AssumeRoleRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(AssumeRoleRequest publicRequest);
    internal static AssumeRoleRequestMarshaller GetInstance();
    public static AssumeRoleRequestMarshaller get_Instance();
}
public class Amazon.SecurityToken.Model.Internal.MarshallTransformations.AssumeRoleResponseUnmarshaller : XmlResponseUnmarshaller {
    private static AssumeRoleResponseUnmarshaller _instance;
    public static AssumeRoleResponseUnmarshaller Instance { get; }
    private static AssumeRoleResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, AssumeRoleResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static AssumeRoleResponseUnmarshaller GetInstance();
    public static AssumeRoleResponseUnmarshaller get_Instance();
}
public class Amazon.SecurityToken.Model.Internal.MarshallTransformations.AssumeRoleWithSAMLRequestMarshaller : object {
    private static AssumeRoleWithSAMLRequestMarshaller _instance;
    public static AssumeRoleWithSAMLRequestMarshaller Instance { get; }
    private static AssumeRoleWithSAMLRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(AssumeRoleWithSAMLRequest publicRequest);
    internal static AssumeRoleWithSAMLRequestMarshaller GetInstance();
    public static AssumeRoleWithSAMLRequestMarshaller get_Instance();
}
public class Amazon.SecurityToken.Model.Internal.MarshallTransformations.AssumeRoleWithSAMLResponseUnmarshaller : XmlResponseUnmarshaller {
    private static AssumeRoleWithSAMLResponseUnmarshaller _instance;
    public static AssumeRoleWithSAMLResponseUnmarshaller Instance { get; }
    private static AssumeRoleWithSAMLResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, AssumeRoleWithSAMLResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static AssumeRoleWithSAMLResponseUnmarshaller GetInstance();
    public static AssumeRoleWithSAMLResponseUnmarshaller get_Instance();
}
public class Amazon.SecurityToken.Model.Internal.MarshallTransformations.AssumeRoleWithWebIdentityRequestMarshaller : object {
    private static AssumeRoleWithWebIdentityRequestMarshaller _instance;
    public static AssumeRoleWithWebIdentityRequestMarshaller Instance { get; }
    private static AssumeRoleWithWebIdentityRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(AssumeRoleWithWebIdentityRequest publicRequest);
    internal static AssumeRoleWithWebIdentityRequestMarshaller GetInstance();
    public static AssumeRoleWithWebIdentityRequestMarshaller get_Instance();
}
public class Amazon.SecurityToken.Model.Internal.MarshallTransformations.AssumeRoleWithWebIdentityResponseUnmarshaller : XmlResponseUnmarshaller {
    private static AssumeRoleWithWebIdentityResponseUnmarshaller _instance;
    public static AssumeRoleWithWebIdentityResponseUnmarshaller Instance { get; }
    private static AssumeRoleWithWebIdentityResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, AssumeRoleWithWebIdentityResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static AssumeRoleWithWebIdentityResponseUnmarshaller GetInstance();
    public static AssumeRoleWithWebIdentityResponseUnmarshaller get_Instance();
}
public class Amazon.SecurityToken.Model.Internal.MarshallTransformations.CredentialsUnmarshaller : object {
    private static CredentialsUnmarshaller _instance;
    public static CredentialsUnmarshaller Instance { get; }
    private static CredentialsUnmarshaller();
    public sealed virtual Credentials Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual Credentials Unmarshall(JsonUnmarshallerContext context);
    public static CredentialsUnmarshaller get_Instance();
}
public class Amazon.SecurityToken.Model.Internal.MarshallTransformations.DecodeAuthorizationMessageRequestMarshaller : object {
    private static DecodeAuthorizationMessageRequestMarshaller _instance;
    public static DecodeAuthorizationMessageRequestMarshaller Instance { get; }
    private static DecodeAuthorizationMessageRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DecodeAuthorizationMessageRequest publicRequest);
    internal static DecodeAuthorizationMessageRequestMarshaller GetInstance();
    public static DecodeAuthorizationMessageRequestMarshaller get_Instance();
}
public class Amazon.SecurityToken.Model.Internal.MarshallTransformations.DecodeAuthorizationMessageResponseUnmarshaller : XmlResponseUnmarshaller {
    private static DecodeAuthorizationMessageResponseUnmarshaller _instance;
    public static DecodeAuthorizationMessageResponseUnmarshaller Instance { get; }
    private static DecodeAuthorizationMessageResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, DecodeAuthorizationMessageResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DecodeAuthorizationMessageResponseUnmarshaller GetInstance();
    public static DecodeAuthorizationMessageResponseUnmarshaller get_Instance();
}
public class Amazon.SecurityToken.Model.Internal.MarshallTransformations.ExpiredTokenExceptionUnmarshaller : object {
    private static ExpiredTokenExceptionUnmarshaller _instance;
    public static ExpiredTokenExceptionUnmarshaller Instance { get; }
    private static ExpiredTokenExceptionUnmarshaller();
    public sealed virtual ExpiredTokenException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ExpiredTokenException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static ExpiredTokenExceptionUnmarshaller get_Instance();
}
public class Amazon.SecurityToken.Model.Internal.MarshallTransformations.FederatedUserUnmarshaller : object {
    private static FederatedUserUnmarshaller _instance;
    public static FederatedUserUnmarshaller Instance { get; }
    private static FederatedUserUnmarshaller();
    public sealed virtual FederatedUser Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual FederatedUser Unmarshall(JsonUnmarshallerContext context);
    public static FederatedUserUnmarshaller get_Instance();
}
public class Amazon.SecurityToken.Model.Internal.MarshallTransformations.GetAccessKeyInfoRequestMarshaller : object {
    private static GetAccessKeyInfoRequestMarshaller _instance;
    public static GetAccessKeyInfoRequestMarshaller Instance { get; }
    private static GetAccessKeyInfoRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(GetAccessKeyInfoRequest publicRequest);
    internal static GetAccessKeyInfoRequestMarshaller GetInstance();
    public static GetAccessKeyInfoRequestMarshaller get_Instance();
}
public class Amazon.SecurityToken.Model.Internal.MarshallTransformations.GetAccessKeyInfoResponseUnmarshaller : XmlResponseUnmarshaller {
    private static GetAccessKeyInfoResponseUnmarshaller _instance;
    public static GetAccessKeyInfoResponseUnmarshaller Instance { get; }
    private static GetAccessKeyInfoResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, GetAccessKeyInfoResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static GetAccessKeyInfoResponseUnmarshaller GetInstance();
    public static GetAccessKeyInfoResponseUnmarshaller get_Instance();
}
public class Amazon.SecurityToken.Model.Internal.MarshallTransformations.GetCallerIdentityRequestMarshaller : object {
    private static GetCallerIdentityRequestMarshaller _instance;
    public static GetCallerIdentityRequestMarshaller Instance { get; }
    private static GetCallerIdentityRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(GetCallerIdentityRequest publicRequest);
    internal static GetCallerIdentityRequestMarshaller GetInstance();
    public static GetCallerIdentityRequestMarshaller get_Instance();
}
public class Amazon.SecurityToken.Model.Internal.MarshallTransformations.GetCallerIdentityResponseUnmarshaller : XmlResponseUnmarshaller {
    private static GetCallerIdentityResponseUnmarshaller _instance;
    public static GetCallerIdentityResponseUnmarshaller Instance { get; }
    private static GetCallerIdentityResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, GetCallerIdentityResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static GetCallerIdentityResponseUnmarshaller GetInstance();
    public static GetCallerIdentityResponseUnmarshaller get_Instance();
}
public class Amazon.SecurityToken.Model.Internal.MarshallTransformations.GetFederationTokenRequestMarshaller : object {
    private static GetFederationTokenRequestMarshaller _instance;
    public static GetFederationTokenRequestMarshaller Instance { get; }
    private static GetFederationTokenRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(GetFederationTokenRequest publicRequest);
    internal static GetFederationTokenRequestMarshaller GetInstance();
    public static GetFederationTokenRequestMarshaller get_Instance();
}
public class Amazon.SecurityToken.Model.Internal.MarshallTransformations.GetFederationTokenResponseUnmarshaller : XmlResponseUnmarshaller {
    private static GetFederationTokenResponseUnmarshaller _instance;
    public static GetFederationTokenResponseUnmarshaller Instance { get; }
    private static GetFederationTokenResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, GetFederationTokenResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static GetFederationTokenResponseUnmarshaller GetInstance();
    public static GetFederationTokenResponseUnmarshaller get_Instance();
}
public class Amazon.SecurityToken.Model.Internal.MarshallTransformations.GetSessionTokenRequestMarshaller : object {
    private static GetSessionTokenRequestMarshaller _instance;
    public static GetSessionTokenRequestMarshaller Instance { get; }
    private static GetSessionTokenRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(GetSessionTokenRequest publicRequest);
    internal static GetSessionTokenRequestMarshaller GetInstance();
    public static GetSessionTokenRequestMarshaller get_Instance();
}
public class Amazon.SecurityToken.Model.Internal.MarshallTransformations.GetSessionTokenResponseUnmarshaller : XmlResponseUnmarshaller {
    private static GetSessionTokenResponseUnmarshaller _instance;
    public static GetSessionTokenResponseUnmarshaller Instance { get; }
    private static GetSessionTokenResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(XmlUnmarshallerContext context);
    private static void UnmarshallResult(XmlUnmarshallerContext context, GetSessionTokenResponse response);
    public virtual AmazonServiceException UnmarshallException(XmlUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static GetSessionTokenResponseUnmarshaller GetInstance();
    public static GetSessionTokenResponseUnmarshaller get_Instance();
}
public class Amazon.SecurityToken.Model.Internal.MarshallTransformations.IDPCommunicationErrorExceptionUnmarshaller : object {
    private static IDPCommunicationErrorExceptionUnmarshaller _instance;
    public static IDPCommunicationErrorExceptionUnmarshaller Instance { get; }
    private static IDPCommunicationErrorExceptionUnmarshaller();
    public sealed virtual IDPCommunicationErrorException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual IDPCommunicationErrorException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static IDPCommunicationErrorExceptionUnmarshaller get_Instance();
}
public class Amazon.SecurityToken.Model.Internal.MarshallTransformations.IDPRejectedClaimExceptionUnmarshaller : object {
    private static IDPRejectedClaimExceptionUnmarshaller _instance;
    public static IDPRejectedClaimExceptionUnmarshaller Instance { get; }
    private static IDPRejectedClaimExceptionUnmarshaller();
    public sealed virtual IDPRejectedClaimException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual IDPRejectedClaimException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static IDPRejectedClaimExceptionUnmarshaller get_Instance();
}
public class Amazon.SecurityToken.Model.Internal.MarshallTransformations.InvalidAuthorizationMessageExceptionUnmarshaller : object {
    private static InvalidAuthorizationMessageExceptionUnmarshaller _instance;
    public static InvalidAuthorizationMessageExceptionUnmarshaller Instance { get; }
    private static InvalidAuthorizationMessageExceptionUnmarshaller();
    public sealed virtual InvalidAuthorizationMessageException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual InvalidAuthorizationMessageException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static InvalidAuthorizationMessageExceptionUnmarshaller get_Instance();
}
public class Amazon.SecurityToken.Model.Internal.MarshallTransformations.InvalidIdentityTokenExceptionUnmarshaller : object {
    private static InvalidIdentityTokenExceptionUnmarshaller _instance;
    public static InvalidIdentityTokenExceptionUnmarshaller Instance { get; }
    private static InvalidIdentityTokenExceptionUnmarshaller();
    public sealed virtual InvalidIdentityTokenException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual InvalidIdentityTokenException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static InvalidIdentityTokenExceptionUnmarshaller get_Instance();
}
public class Amazon.SecurityToken.Model.Internal.MarshallTransformations.MalformedPolicyDocumentExceptionUnmarshaller : object {
    private static MalformedPolicyDocumentExceptionUnmarshaller _instance;
    public static MalformedPolicyDocumentExceptionUnmarshaller Instance { get; }
    private static MalformedPolicyDocumentExceptionUnmarshaller();
    public sealed virtual MalformedPolicyDocumentException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual MalformedPolicyDocumentException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static MalformedPolicyDocumentExceptionUnmarshaller get_Instance();
}
public class Amazon.SecurityToken.Model.Internal.MarshallTransformations.PackedPolicyTooLargeExceptionUnmarshaller : object {
    private static PackedPolicyTooLargeExceptionUnmarshaller _instance;
    public static PackedPolicyTooLargeExceptionUnmarshaller Instance { get; }
    private static PackedPolicyTooLargeExceptionUnmarshaller();
    public sealed virtual PackedPolicyTooLargeException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual PackedPolicyTooLargeException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static PackedPolicyTooLargeExceptionUnmarshaller get_Instance();
}
public class Amazon.SecurityToken.Model.Internal.MarshallTransformations.RegionDisabledExceptionUnmarshaller : object {
    private static RegionDisabledExceptionUnmarshaller _instance;
    public static RegionDisabledExceptionUnmarshaller Instance { get; }
    private static RegionDisabledExceptionUnmarshaller();
    public sealed virtual RegionDisabledException Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual RegionDisabledException Unmarshall(XmlUnmarshallerContext context, ErrorResponse errorResponse);
    public static RegionDisabledExceptionUnmarshaller get_Instance();
}
public class Amazon.SecurityToken.Model.InvalidAuthorizationMessageException : AmazonSecurityTokenServiceException {
    public InvalidAuthorizationMessageException(string message);
    public InvalidAuthorizationMessageException(string message, Exception innerException);
    public InvalidAuthorizationMessageException(Exception innerException);
    public InvalidAuthorizationMessageException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public InvalidAuthorizationMessageException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.SecurityToken.Model.InvalidIdentityTokenException : AmazonSecurityTokenServiceException {
    public InvalidIdentityTokenException(string message);
    public InvalidIdentityTokenException(string message, Exception innerException);
    public InvalidIdentityTokenException(Exception innerException);
    public InvalidIdentityTokenException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public InvalidIdentityTokenException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.SecurityToken.Model.MalformedPolicyDocumentException : AmazonSecurityTokenServiceException {
    public MalformedPolicyDocumentException(string message);
    public MalformedPolicyDocumentException(string message, Exception innerException);
    public MalformedPolicyDocumentException(Exception innerException);
    public MalformedPolicyDocumentException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public MalformedPolicyDocumentException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.SecurityToken.Model.PackedPolicyTooLargeException : AmazonSecurityTokenServiceException {
    public PackedPolicyTooLargeException(string message);
    public PackedPolicyTooLargeException(string message, Exception innerException);
    public PackedPolicyTooLargeException(Exception innerException);
    public PackedPolicyTooLargeException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public PackedPolicyTooLargeException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.SecurityToken.Model.PolicyDescriptorType : object {
    private string _arn;
    [AWSPropertyAttribute]
public string Arn { get; public set; }
    public string get_Arn();
    public void set_Arn(string value);
    internal bool IsSetArn();
}
public class Amazon.SecurityToken.Model.ProvidedContext : object {
    private string _contextAssertion;
    private string _providerArn;
    [AWSPropertyAttribute]
public string ContextAssertion { get; public set; }
    [AWSPropertyAttribute]
public string ProviderArn { get; public set; }
    public string get_ContextAssertion();
    public void set_ContextAssertion(string value);
    internal bool IsSetContextAssertion();
    public string get_ProviderArn();
    public void set_ProviderArn(string value);
    internal bool IsSetProviderArn();
}
public class Amazon.SecurityToken.Model.RegionDisabledException : AmazonSecurityTokenServiceException {
    public RegionDisabledException(string message);
    public RegionDisabledException(string message, Exception innerException);
    public RegionDisabledException(Exception innerException);
    public RegionDisabledException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public RegionDisabledException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.SecurityToken.Model.Tag : object {
    private string _key;
    private string _value;
    [AWSPropertyAttribute]
public string Key { get; public set; }
    [AWSPropertyAttribute]
public string Value { get; public set; }
    public string get_Key();
    public void set_Key(string value);
    internal bool IsSetKey();
    public string get_Value();
    public void set_Value(string value);
    internal bool IsSetValue();
}
internal class Amazon.SecurityToken.SAML.AdfsAuthenticationController : object {
    public sealed virtual string Authenticate(Uri identityProvider, ICredentials credentials, string authenticationType, IWebProxy proxySettings);
    private static string QueryProvider(Uri identityProvider, IWebProxy proxySettings, ICredentials credentials, string authenticationType);
}
public class Amazon.SecurityToken.SAML.AdfsAuthenticationControllerException : Exception {
    public AdfsAuthenticationControllerException(string message);
    public AdfsAuthenticationControllerException(string message, Exception innerException);
    public AdfsAuthenticationControllerException(Exception innerException);
}
internal class Amazon.SecurityToken.SAML.AdfsAuthenticationResponseParser : object {
    private static string SamlResponseRegexPattern;
    private static Regex _samlResponseRegex;
    private static AdfsAuthenticationResponseParser();
    public sealed virtual SAMLAssertion Parse(string authenticationResponse);
    private static Regex SamlResponseRegex();
}
public interface Amazon.SecurityToken.SAML.IAuthenticationController {
    public abstract virtual string Authenticate(Uri identityProvider, ICredentials credentials, string authenticationType, IWebProxy proxySettings);
}
public interface Amazon.SecurityToken.SAML.IAuthenticationResponseParser {
    public abstract virtual SAMLAssertion Parse(string authenticationResponse);
}
public class Amazon.SecurityToken.SAML.SAMLAssertion : object {
    private static string AssertionNamespace;
    private static string RoleXPath;
    [CompilerGeneratedAttribute]
private string <AssertionDocument>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <RoleSet>k__BackingField;
    public string AssertionDocument { get; private set; }
    public IDictionary`2<string, string> RoleSet { get; private set; }
    internal SAMLAssertion(string assertion);
    [CompilerGeneratedAttribute]
public string get_AssertionDocument();
    [CompilerGeneratedAttribute]
private void set_AssertionDocument(string value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_RoleSet();
    [CompilerGeneratedAttribute]
private void set_RoleSet(IDictionary`2<string, string> value);
    public SAMLImmutableCredentials GetRoleCredentials(IAmazonSecurityTokenService stsClient, string principalAndRoleArns, TimeSpan duration);
    private IDictionary`2<string, string> ExtractRoleData();
    private static bool IsSamlProvider(string chunk);
    private static string ExtractRoleName(string chunk);
}
public class Amazon.SecurityToken.SAML.SAMLAuthenticationController : object {
    [CompilerGeneratedAttribute]
private IAuthenticationController <AuthenticationController>k__BackingField;
    [CompilerGeneratedAttribute]
private IAuthenticationResponseParser <ResponseParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IWebProxy <ProxySettings>k__BackingField;
    public IAuthenticationController AuthenticationController { get; private set; }
    public IAuthenticationResponseParser ResponseParser { get; private set; }
    public IWebProxy ProxySettings { get; private set; }
    public SAMLAuthenticationController(IWebProxy proxySettings);
    public SAMLAuthenticationController(IAuthenticationController authenticationController, IAuthenticationResponseParser responseParser, IWebProxy proxySettings);
    [CompilerGeneratedAttribute]
public IAuthenticationController get_AuthenticationController();
    [CompilerGeneratedAttribute]
private void set_AuthenticationController(IAuthenticationController value);
    [CompilerGeneratedAttribute]
public IAuthenticationResponseParser get_ResponseParser();
    [CompilerGeneratedAttribute]
private void set_ResponseParser(IAuthenticationResponseParser value);
    [CompilerGeneratedAttribute]
public IWebProxy get_ProxySettings();
    [CompilerGeneratedAttribute]
private void set_ProxySettings(IWebProxy value);
    public SAMLAssertion GetSAMLAssertion(string identityProviderUrl, ICredentials credentials, string authenticationType);
    public SAMLAssertion GetSAMLAssertion(Uri identityProviderUrl, ICredentials credentials, string authenticationType);
}
public class Amazon.SecurityToken.SecurityTokenServiceAdaptiveRetryPolicy : AdaptiveRetryPolicy {
    public SecurityTokenServiceAdaptiveRetryPolicy(IClientConfig config);
    public virtual bool RetryForException(IExecutionContext executionContext, Exception exception);
    public virtual Task`1<bool> RetryForExceptionAsync(IExecutionContext executionContext, Exception exception);
}
public class Amazon.SecurityToken.SecurityTokenServiceRetryPolicy : DefaultRetryPolicy {
    public SecurityTokenServiceRetryPolicy(IClientConfig config);
    public virtual bool RetryForException(IExecutionContext executionContext, Exception exception);
    public virtual Task`1<bool> RetryForExceptionAsync(IExecutionContext executionContext, Exception exception);
}
public class Amazon.SecurityToken.SecurityTokenServiceStandardRetryPolicy : StandardRetryPolicy {
    public SecurityTokenServiceStandardRetryPolicy(IClientConfig config);
    public virtual bool RetryForException(IExecutionContext executionContext, Exception exception);
    public virtual Task`1<bool> RetryForExceptionAsync(IExecutionContext executionContext, Exception exception);
}
[ObsoleteAttribute("This class has been replaced by Amazon.Runtime.AssumeRoleAWSCredentials and Amazon.Runtime.StoredProfileFederatedCredentials, and will be removed in a future version.", "False")]
public class Amazon.SecurityToken.STSAssumeRoleAWSCredentials : RefreshingAWSCredentials {
    private IAmazonSecurityTokenService _stsClient;
    private AssumeRoleRequest _assumeRequest;
    private AssumeRoleWithSAMLRequest _assumeSamlRequest;
    private bool _isDisposed;
    private static TimeSpan _defaultPreemptExpiryTime;
    public STSAssumeRoleAWSCredentials(IAmazonSecurityTokenService sts, AssumeRoleRequest assumeRoleRequest);
    public STSAssumeRoleAWSCredentials(AssumeRoleWithSAMLRequest assumeRoleWithSamlRequest);
    private static STSAssumeRoleAWSCredentials();
    protected virtual CredentialsRefreshState GenerateNewCredentials();
    protected virtual void Dispose(bool disposing);
    private Credentials GetServiceCredentials();
    [CompilerGeneratedAttribute]
private Task`1<AssumeRoleResponse> <GetServiceCredentials>b__9_0();
    [CompilerGeneratedAttribute]
private Task`1<AssumeRoleWithSAMLResponse> <GetServiceCredentials>b__9_1();
}
