public class Amazon.Transfer.AgreementStatusType : ConstantClass {
    public static AgreementStatusType ACTIVE;
    public static AgreementStatusType INACTIVE;
    public AgreementStatusType(string value);
    private static AgreementStatusType();
    public static AgreementStatusType FindValue(string value);
    public static AgreementStatusType op_Implicit(string value);
}
public class Amazon.Transfer.AmazonTransferClient : AmazonServiceClient {
    private static IServiceMetadata serviceMetadata;
    private ITransferPaginatorFactory _paginators;
    public ITransferPaginatorFactory Paginators { get; }
    protected IServiceMetadata ServiceMetadata { get; }
    public AmazonTransferClient(RegionEndpoint region);
    public AmazonTransferClient(AmazonTransferConfig config);
    public AmazonTransferClient(AWSCredentials credentials);
    public AmazonTransferClient(AWSCredentials credentials, RegionEndpoint region);
    public AmazonTransferClient(AWSCredentials credentials, AmazonTransferConfig clientConfig);
    public AmazonTransferClient(string awsAccessKeyId, string awsSecretAccessKey);
    public AmazonTransferClient(string awsAccessKeyId, string awsSecretAccessKey, RegionEndpoint region);
    public AmazonTransferClient(string awsAccessKeyId, string awsSecretAccessKey, AmazonTransferConfig clientConfig);
    public AmazonTransferClient(string awsAccessKeyId, string awsSecretAccessKey, string awsSessionToken);
    public AmazonTransferClient(string awsAccessKeyId, string awsSecretAccessKey, string awsSessionToken, RegionEndpoint region);
    public AmazonTransferClient(string awsAccessKeyId, string awsSecretAccessKey, string awsSessionToken, AmazonTransferConfig clientConfig);
    private static AmazonTransferClient();
    public sealed virtual ITransferPaginatorFactory get_Paginators();
    protected virtual AbstractAWSSigner CreateSigner();
    protected virtual void CustomizeRuntimePipeline(RuntimePipeline pipeline);
    protected virtual IServiceMetadata get_ServiceMetadata();
    protected virtual void Dispose(bool disposing);
    internal virtual CreateAccessResponse CreateAccess(CreateAccessRequest request);
    public virtual Task`1<CreateAccessResponse> CreateAccessAsync(CreateAccessRequest request, CancellationToken cancellationToken);
    internal virtual CreateAgreementResponse CreateAgreement(CreateAgreementRequest request);
    public virtual Task`1<CreateAgreementResponse> CreateAgreementAsync(CreateAgreementRequest request, CancellationToken cancellationToken);
    internal virtual CreateConnectorResponse CreateConnector(CreateConnectorRequest request);
    public virtual Task`1<CreateConnectorResponse> CreateConnectorAsync(CreateConnectorRequest request, CancellationToken cancellationToken);
    internal virtual CreateProfileResponse CreateProfile(CreateProfileRequest request);
    public virtual Task`1<CreateProfileResponse> CreateProfileAsync(CreateProfileRequest request, CancellationToken cancellationToken);
    internal virtual CreateServerResponse CreateServer(CreateServerRequest request);
    public virtual Task`1<CreateServerResponse> CreateServerAsync(CreateServerRequest request, CancellationToken cancellationToken);
    internal virtual CreateUserResponse CreateUser(CreateUserRequest request);
    public virtual Task`1<CreateUserResponse> CreateUserAsync(CreateUserRequest request, CancellationToken cancellationToken);
    internal virtual CreateWorkflowResponse CreateWorkflow(CreateWorkflowRequest request);
    public virtual Task`1<CreateWorkflowResponse> CreateWorkflowAsync(CreateWorkflowRequest request, CancellationToken cancellationToken);
    internal virtual DeleteAccessResponse DeleteAccess(DeleteAccessRequest request);
    public virtual Task`1<DeleteAccessResponse> DeleteAccessAsync(DeleteAccessRequest request, CancellationToken cancellationToken);
    internal virtual DeleteAgreementResponse DeleteAgreement(DeleteAgreementRequest request);
    public virtual Task`1<DeleteAgreementResponse> DeleteAgreementAsync(DeleteAgreementRequest request, CancellationToken cancellationToken);
    internal virtual DeleteCertificateResponse DeleteCertificate(DeleteCertificateRequest request);
    public virtual Task`1<DeleteCertificateResponse> DeleteCertificateAsync(DeleteCertificateRequest request, CancellationToken cancellationToken);
    internal virtual DeleteConnectorResponse DeleteConnector(DeleteConnectorRequest request);
    public virtual Task`1<DeleteConnectorResponse> DeleteConnectorAsync(DeleteConnectorRequest request, CancellationToken cancellationToken);
    internal virtual DeleteHostKeyResponse DeleteHostKey(DeleteHostKeyRequest request);
    public virtual Task`1<DeleteHostKeyResponse> DeleteHostKeyAsync(DeleteHostKeyRequest request, CancellationToken cancellationToken);
    internal virtual DeleteProfileResponse DeleteProfile(DeleteProfileRequest request);
    public virtual Task`1<DeleteProfileResponse> DeleteProfileAsync(DeleteProfileRequest request, CancellationToken cancellationToken);
    internal virtual DeleteServerResponse DeleteServer(DeleteServerRequest request);
    public virtual Task`1<DeleteServerResponse> DeleteServerAsync(DeleteServerRequest request, CancellationToken cancellationToken);
    internal virtual DeleteSshPublicKeyResponse DeleteSshPublicKey(DeleteSshPublicKeyRequest request);
    public virtual Task`1<DeleteSshPublicKeyResponse> DeleteSshPublicKeyAsync(DeleteSshPublicKeyRequest request, CancellationToken cancellationToken);
    internal virtual DeleteUserResponse DeleteUser(DeleteUserRequest request);
    public virtual Task`1<DeleteUserResponse> DeleteUserAsync(DeleteUserRequest request, CancellationToken cancellationToken);
    internal virtual DeleteWorkflowResponse DeleteWorkflow(DeleteWorkflowRequest request);
    public virtual Task`1<DeleteWorkflowResponse> DeleteWorkflowAsync(DeleteWorkflowRequest request, CancellationToken cancellationToken);
    internal virtual DescribeAccessResponse DescribeAccess(DescribeAccessRequest request);
    public virtual Task`1<DescribeAccessResponse> DescribeAccessAsync(DescribeAccessRequest request, CancellationToken cancellationToken);
    internal virtual DescribeAgreementResponse DescribeAgreement(DescribeAgreementRequest request);
    public virtual Task`1<DescribeAgreementResponse> DescribeAgreementAsync(DescribeAgreementRequest request, CancellationToken cancellationToken);
    internal virtual DescribeCertificateResponse DescribeCertificate(DescribeCertificateRequest request);
    public virtual Task`1<DescribeCertificateResponse> DescribeCertificateAsync(DescribeCertificateRequest request, CancellationToken cancellationToken);
    internal virtual DescribeConnectorResponse DescribeConnector(DescribeConnectorRequest request);
    public virtual Task`1<DescribeConnectorResponse> DescribeConnectorAsync(DescribeConnectorRequest request, CancellationToken cancellationToken);
    internal virtual DescribeExecutionResponse DescribeExecution(DescribeExecutionRequest request);
    public virtual Task`1<DescribeExecutionResponse> DescribeExecutionAsync(DescribeExecutionRequest request, CancellationToken cancellationToken);
    internal virtual DescribeHostKeyResponse DescribeHostKey(DescribeHostKeyRequest request);
    public virtual Task`1<DescribeHostKeyResponse> DescribeHostKeyAsync(DescribeHostKeyRequest request, CancellationToken cancellationToken);
    internal virtual DescribeProfileResponse DescribeProfile(DescribeProfileRequest request);
    public virtual Task`1<DescribeProfileResponse> DescribeProfileAsync(DescribeProfileRequest request, CancellationToken cancellationToken);
    internal virtual DescribeSecurityPolicyResponse DescribeSecurityPolicy(DescribeSecurityPolicyRequest request);
    public virtual Task`1<DescribeSecurityPolicyResponse> DescribeSecurityPolicyAsync(DescribeSecurityPolicyRequest request, CancellationToken cancellationToken);
    internal virtual DescribeServerResponse DescribeServer(DescribeServerRequest request);
    public virtual Task`1<DescribeServerResponse> DescribeServerAsync(DescribeServerRequest request, CancellationToken cancellationToken);
    internal virtual DescribeUserResponse DescribeUser(DescribeUserRequest request);
    public virtual Task`1<DescribeUserResponse> DescribeUserAsync(DescribeUserRequest request, CancellationToken cancellationToken);
    internal virtual DescribeWorkflowResponse DescribeWorkflow(DescribeWorkflowRequest request);
    public virtual Task`1<DescribeWorkflowResponse> DescribeWorkflowAsync(DescribeWorkflowRequest request, CancellationToken cancellationToken);
    internal virtual ImportCertificateResponse ImportCertificate(ImportCertificateRequest request);
    public virtual Task`1<ImportCertificateResponse> ImportCertificateAsync(ImportCertificateRequest request, CancellationToken cancellationToken);
    internal virtual ImportHostKeyResponse ImportHostKey(ImportHostKeyRequest request);
    public virtual Task`1<ImportHostKeyResponse> ImportHostKeyAsync(ImportHostKeyRequest request, CancellationToken cancellationToken);
    internal virtual ImportSshPublicKeyResponse ImportSshPublicKey(ImportSshPublicKeyRequest request);
    public virtual Task`1<ImportSshPublicKeyResponse> ImportSshPublicKeyAsync(ImportSshPublicKeyRequest request, CancellationToken cancellationToken);
    internal virtual ListAccessesResponse ListAccesses(ListAccessesRequest request);
    public virtual Task`1<ListAccessesResponse> ListAccessesAsync(ListAccessesRequest request, CancellationToken cancellationToken);
    internal virtual ListAgreementsResponse ListAgreements(ListAgreementsRequest request);
    public virtual Task`1<ListAgreementsResponse> ListAgreementsAsync(ListAgreementsRequest request, CancellationToken cancellationToken);
    internal virtual ListCertificatesResponse ListCertificates(ListCertificatesRequest request);
    public virtual Task`1<ListCertificatesResponse> ListCertificatesAsync(ListCertificatesRequest request, CancellationToken cancellationToken);
    internal virtual ListConnectorsResponse ListConnectors(ListConnectorsRequest request);
    public virtual Task`1<ListConnectorsResponse> ListConnectorsAsync(ListConnectorsRequest request, CancellationToken cancellationToken);
    internal virtual ListExecutionsResponse ListExecutions(ListExecutionsRequest request);
    public virtual Task`1<ListExecutionsResponse> ListExecutionsAsync(ListExecutionsRequest request, CancellationToken cancellationToken);
    internal virtual ListHostKeysResponse ListHostKeys(ListHostKeysRequest request);
    public virtual Task`1<ListHostKeysResponse> ListHostKeysAsync(ListHostKeysRequest request, CancellationToken cancellationToken);
    internal virtual ListProfilesResponse ListProfiles(ListProfilesRequest request);
    public virtual Task`1<ListProfilesResponse> ListProfilesAsync(ListProfilesRequest request, CancellationToken cancellationToken);
    internal virtual ListSecurityPoliciesResponse ListSecurityPolicies(ListSecurityPoliciesRequest request);
    public virtual Task`1<ListSecurityPoliciesResponse> ListSecurityPoliciesAsync(ListSecurityPoliciesRequest request, CancellationToken cancellationToken);
    internal virtual ListServersResponse ListServers(ListServersRequest request);
    public virtual Task`1<ListServersResponse> ListServersAsync(ListServersRequest request, CancellationToken cancellationToken);
    internal virtual ListTagsForResourceResponse ListTagsForResource(ListTagsForResourceRequest request);
    public virtual Task`1<ListTagsForResourceResponse> ListTagsForResourceAsync(ListTagsForResourceRequest request, CancellationToken cancellationToken);
    internal virtual ListUsersResponse ListUsers(ListUsersRequest request);
    public virtual Task`1<ListUsersResponse> ListUsersAsync(ListUsersRequest request, CancellationToken cancellationToken);
    internal virtual ListWorkflowsResponse ListWorkflows(ListWorkflowsRequest request);
    public virtual Task`1<ListWorkflowsResponse> ListWorkflowsAsync(ListWorkflowsRequest request, CancellationToken cancellationToken);
    internal virtual SendWorkflowStepStateResponse SendWorkflowStepState(SendWorkflowStepStateRequest request);
    public virtual Task`1<SendWorkflowStepStateResponse> SendWorkflowStepStateAsync(SendWorkflowStepStateRequest request, CancellationToken cancellationToken);
    internal virtual StartDirectoryListingResponse StartDirectoryListing(StartDirectoryListingRequest request);
    public virtual Task`1<StartDirectoryListingResponse> StartDirectoryListingAsync(StartDirectoryListingRequest request, CancellationToken cancellationToken);
    internal virtual StartFileTransferResponse StartFileTransfer(StartFileTransferRequest request);
    public virtual Task`1<StartFileTransferResponse> StartFileTransferAsync(StartFileTransferRequest request, CancellationToken cancellationToken);
    internal virtual StartServerResponse StartServer(StartServerRequest request);
    public virtual Task`1<StartServerResponse> StartServerAsync(StartServerRequest request, CancellationToken cancellationToken);
    internal virtual StopServerResponse StopServer(StopServerRequest request);
    public virtual Task`1<StopServerResponse> StopServerAsync(StopServerRequest request, CancellationToken cancellationToken);
    internal virtual TagResourceResponse TagResource(TagResourceRequest request);
    public virtual Task`1<TagResourceResponse> TagResourceAsync(TagResourceRequest request, CancellationToken cancellationToken);
    internal virtual TestConnectionResponse TestConnection(TestConnectionRequest request);
    public virtual Task`1<TestConnectionResponse> TestConnectionAsync(TestConnectionRequest request, CancellationToken cancellationToken);
    internal virtual TestIdentityProviderResponse TestIdentityProvider(TestIdentityProviderRequest request);
    public virtual Task`1<TestIdentityProviderResponse> TestIdentityProviderAsync(TestIdentityProviderRequest request, CancellationToken cancellationToken);
    internal virtual UntagResourceResponse UntagResource(UntagResourceRequest request);
    public virtual Task`1<UntagResourceResponse> UntagResourceAsync(UntagResourceRequest request, CancellationToken cancellationToken);
    internal virtual UpdateAccessResponse UpdateAccess(UpdateAccessRequest request);
    public virtual Task`1<UpdateAccessResponse> UpdateAccessAsync(UpdateAccessRequest request, CancellationToken cancellationToken);
    internal virtual UpdateAgreementResponse UpdateAgreement(UpdateAgreementRequest request);
    public virtual Task`1<UpdateAgreementResponse> UpdateAgreementAsync(UpdateAgreementRequest request, CancellationToken cancellationToken);
    internal virtual UpdateCertificateResponse UpdateCertificate(UpdateCertificateRequest request);
    public virtual Task`1<UpdateCertificateResponse> UpdateCertificateAsync(UpdateCertificateRequest request, CancellationToken cancellationToken);
    internal virtual UpdateConnectorResponse UpdateConnector(UpdateConnectorRequest request);
    public virtual Task`1<UpdateConnectorResponse> UpdateConnectorAsync(UpdateConnectorRequest request, CancellationToken cancellationToken);
    internal virtual UpdateHostKeyResponse UpdateHostKey(UpdateHostKeyRequest request);
    public virtual Task`1<UpdateHostKeyResponse> UpdateHostKeyAsync(UpdateHostKeyRequest request, CancellationToken cancellationToken);
    internal virtual UpdateProfileResponse UpdateProfile(UpdateProfileRequest request);
    public virtual Task`1<UpdateProfileResponse> UpdateProfileAsync(UpdateProfileRequest request, CancellationToken cancellationToken);
    internal virtual UpdateServerResponse UpdateServer(UpdateServerRequest request);
    public virtual Task`1<UpdateServerResponse> UpdateServerAsync(UpdateServerRequest request, CancellationToken cancellationToken);
    internal virtual UpdateUserResponse UpdateUser(UpdateUserRequest request);
    public virtual Task`1<UpdateUserResponse> UpdateUserAsync(UpdateUserRequest request, CancellationToken cancellationToken);
    public sealed virtual Endpoint DetermineServiceOperationEndpoint(AmazonWebServiceRequest request);
    private sealed virtual override IClientConfig Amazon.Runtime.IAmazonService.get_Config();
}
[AWSSignerTypeAttribute("v4")]
public class Amazon.Transfer.AmazonTransferConfig : ClientConfig {
    private static string UserAgentString;
    private static AmazonTransferEndpointResolver EndpointResolver;
    private string _userAgent;
    public static string ServiceId { get; }
    public string RegionEndpointServiceName { get; }
    public string ServiceVersion { get; }
    public string UserAgent { get; }
    private static AmazonTransferConfig();
    public static string get_ServiceId();
    public virtual string get_RegionEndpointServiceName();
    public virtual string get_ServiceVersion();
    public virtual string get_UserAgent();
    public virtual Endpoint DetermineServiceOperationEndpoint(ServiceOperationEndpointParameters parameters);
}
public static class Amazon.Transfer.AmazonTransferDefaultConfiguration : object {
    [CompilerGeneratedAttribute]
private static IDefaultConfiguration <Standard>k__BackingField;
    [CompilerGeneratedAttribute]
private static IDefaultConfiguration <InRegion>k__BackingField;
    [CompilerGeneratedAttribute]
private static IDefaultConfiguration <CrossRegion>k__BackingField;
    [CompilerGeneratedAttribute]
private static IDefaultConfiguration <Mobile>k__BackingField;
    [CompilerGeneratedAttribute]
private static IDefaultConfiguration <Auto>k__BackingField;
    public static IDefaultConfiguration Standard { get; }
    public static IDefaultConfiguration InRegion { get; }
    public static IDefaultConfiguration CrossRegion { get; }
    public static IDefaultConfiguration Mobile { get; }
    public static IDefaultConfiguration Auto { get; }
    private static AmazonTransferDefaultConfiguration();
    public static ReadOnlyCollection`1<IDefaultConfiguration> GetAllConfigurations();
    [CompilerGeneratedAttribute]
public static IDefaultConfiguration get_Standard();
    [CompilerGeneratedAttribute]
public static IDefaultConfiguration get_InRegion();
    [CompilerGeneratedAttribute]
public static IDefaultConfiguration get_CrossRegion();
    [CompilerGeneratedAttribute]
public static IDefaultConfiguration get_Mobile();
    [CompilerGeneratedAttribute]
public static IDefaultConfiguration get_Auto();
}
public class Amazon.Transfer.AmazonTransferException : AmazonServiceException {
    public AmazonTransferException(string message);
    public AmazonTransferException(string message, Exception innerException);
    public AmazonTransferException(Exception innerException);
    public AmazonTransferException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public AmazonTransferException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Transfer.AmazonTransferRequest : AmazonWebServiceRequest {
}
public class Amazon.Transfer.As2Transport : ConstantClass {
    public static As2Transport HTTP;
    public As2Transport(string value);
    private static As2Transport();
    public static As2Transport FindValue(string value);
    public static As2Transport op_Implicit(string value);
}
public class Amazon.Transfer.CertificateStatusType : ConstantClass {
    public static CertificateStatusType ACTIVE;
    public static CertificateStatusType INACTIVE;
    public static CertificateStatusType PENDING_ROTATION;
    public CertificateStatusType(string value);
    private static CertificateStatusType();
    public static CertificateStatusType FindValue(string value);
    public static CertificateStatusType op_Implicit(string value);
}
public class Amazon.Transfer.CertificateType : ConstantClass {
    public static CertificateType CERTIFICATE;
    public static CertificateType CERTIFICATE_WITH_PRIVATE_KEY;
    public CertificateType(string value);
    private static CertificateType();
    public static CertificateType FindValue(string value);
    public static CertificateType op_Implicit(string value);
}
public class Amazon.Transfer.CertificateUsageType : ConstantClass {
    public static CertificateUsageType ENCRYPTION;
    public static CertificateUsageType SIGNING;
    public static CertificateUsageType TLS;
    public CertificateUsageType(string value);
    private static CertificateUsageType();
    public static CertificateUsageType FindValue(string value);
    public static CertificateUsageType op_Implicit(string value);
}
public class Amazon.Transfer.CompressionEnum : ConstantClass {
    public static CompressionEnum DISABLED;
    public static CompressionEnum ZLIB;
    public CompressionEnum(string value);
    private static CompressionEnum();
    public static CompressionEnum FindValue(string value);
    public static CompressionEnum op_Implicit(string value);
}
public class Amazon.Transfer.CustomStepStatus : ConstantClass {
    public static CustomStepStatus FAILURE;
    public static CustomStepStatus SUCCESS;
    public CustomStepStatus(string value);
    private static CustomStepStatus();
    public static CustomStepStatus FindValue(string value);
    public static CustomStepStatus op_Implicit(string value);
}
public class Amazon.Transfer.DirectoryListingOptimization : ConstantClass {
    public static DirectoryListingOptimization DISABLED;
    public static DirectoryListingOptimization ENABLED;
    public DirectoryListingOptimization(string value);
    private static DirectoryListingOptimization();
    public static DirectoryListingOptimization FindValue(string value);
    public static DirectoryListingOptimization op_Implicit(string value);
}
public class Amazon.Transfer.Domain : ConstantClass {
    public static Domain EFS;
    public static Domain S3;
    public Domain(string value);
    private static Domain();
    public static Domain FindValue(string value);
    public static Domain op_Implicit(string value);
}
public class Amazon.Transfer.EncryptionAlg : ConstantClass {
    public static EncryptionAlg AES128_CBC;
    public static EncryptionAlg AES192_CBC;
    public static EncryptionAlg AES256_CBC;
    public static EncryptionAlg DES_EDE3_CBC;
    public static EncryptionAlg NONE;
    public EncryptionAlg(string value);
    private static EncryptionAlg();
    public static EncryptionAlg FindValue(string value);
    public static EncryptionAlg op_Implicit(string value);
}
public class Amazon.Transfer.EncryptionType : ConstantClass {
    public static EncryptionType PGP;
    public EncryptionType(string value);
    private static EncryptionType();
    public static EncryptionType FindValue(string value);
    public static EncryptionType op_Implicit(string value);
}
public class Amazon.Transfer.Endpoints.TransferEndpointParameters : EndpointParameters {
    public string Region { get; public set; }
    public Nullable`1<bool> UseDualStack { get; public set; }
    public Nullable`1<bool> UseFIPS { get; public set; }
    public string Endpoint { get; public set; }
    public string get_Region();
    public void set_Region(string value);
    public Nullable`1<bool> get_UseDualStack();
    public void set_UseDualStack(Nullable`1<bool> value);
    public Nullable`1<bool> get_UseFIPS();
    public void set_UseFIPS(Nullable`1<bool> value);
    public string get_Endpoint();
    public void set_Endpoint(string value);
}
public class Amazon.Transfer.EndpointType : ConstantClass {
    public static EndpointType PUBLIC;
    public static EndpointType VPC;
    public static EndpointType VPC_ENDPOINT;
    public EndpointType(string value);
    private static EndpointType();
    public static EndpointType FindValue(string value);
    public static EndpointType op_Implicit(string value);
}
public class Amazon.Transfer.ExecutionErrorType : ConstantClass {
    public static ExecutionErrorType ALREADY_EXISTS;
    public static ExecutionErrorType BAD_REQUEST;
    public static ExecutionErrorType CUSTOM_STEP_FAILED;
    public static ExecutionErrorType INTERNAL_SERVER_ERROR;
    public static ExecutionErrorType NOT_FOUND;
    public static ExecutionErrorType PERMISSION_DENIED;
    public static ExecutionErrorType THROTTLED;
    public static ExecutionErrorType TIMEOUT;
    public ExecutionErrorType(string value);
    private static ExecutionErrorType();
    public static ExecutionErrorType FindValue(string value);
    public static ExecutionErrorType op_Implicit(string value);
}
public class Amazon.Transfer.ExecutionStatus : ConstantClass {
    public static ExecutionStatus COMPLETED;
    public static ExecutionStatus EXCEPTION;
    public static ExecutionStatus HANDLING_EXCEPTION;
    public static ExecutionStatus IN_PROGRESS;
    public ExecutionStatus(string value);
    private static ExecutionStatus();
    public static ExecutionStatus FindValue(string value);
    public static ExecutionStatus op_Implicit(string value);
}
public class Amazon.Transfer.HomeDirectoryType : ConstantClass {
    public static HomeDirectoryType LOGICAL;
    public static HomeDirectoryType PATH;
    public HomeDirectoryType(string value);
    private static HomeDirectoryType();
    public static HomeDirectoryType FindValue(string value);
    public static HomeDirectoryType op_Implicit(string value);
}
public interface Amazon.Transfer.IAmazonTransfer {
    public ITransferPaginatorFactory Paginators { get; }
    public abstract virtual ITransferPaginatorFactory get_Paginators();
    public abstract virtual Task`1<CreateAccessResponse> CreateAccessAsync(CreateAccessRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<CreateAgreementResponse> CreateAgreementAsync(CreateAgreementRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<CreateConnectorResponse> CreateConnectorAsync(CreateConnectorRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<CreateProfileResponse> CreateProfileAsync(CreateProfileRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<CreateServerResponse> CreateServerAsync(CreateServerRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<CreateUserResponse> CreateUserAsync(CreateUserRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<CreateWorkflowResponse> CreateWorkflowAsync(CreateWorkflowRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeleteAccessResponse> DeleteAccessAsync(DeleteAccessRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeleteAgreementResponse> DeleteAgreementAsync(DeleteAgreementRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeleteCertificateResponse> DeleteCertificateAsync(DeleteCertificateRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeleteConnectorResponse> DeleteConnectorAsync(DeleteConnectorRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeleteHostKeyResponse> DeleteHostKeyAsync(DeleteHostKeyRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeleteProfileResponse> DeleteProfileAsync(DeleteProfileRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeleteServerResponse> DeleteServerAsync(DeleteServerRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeleteSshPublicKeyResponse> DeleteSshPublicKeyAsync(DeleteSshPublicKeyRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeleteUserResponse> DeleteUserAsync(DeleteUserRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeleteWorkflowResponse> DeleteWorkflowAsync(DeleteWorkflowRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DescribeAccessResponse> DescribeAccessAsync(DescribeAccessRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DescribeAgreementResponse> DescribeAgreementAsync(DescribeAgreementRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DescribeCertificateResponse> DescribeCertificateAsync(DescribeCertificateRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DescribeConnectorResponse> DescribeConnectorAsync(DescribeConnectorRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DescribeExecutionResponse> DescribeExecutionAsync(DescribeExecutionRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DescribeHostKeyResponse> DescribeHostKeyAsync(DescribeHostKeyRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DescribeProfileResponse> DescribeProfileAsync(DescribeProfileRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DescribeSecurityPolicyResponse> DescribeSecurityPolicyAsync(DescribeSecurityPolicyRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DescribeServerResponse> DescribeServerAsync(DescribeServerRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DescribeUserResponse> DescribeUserAsync(DescribeUserRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<DescribeWorkflowResponse> DescribeWorkflowAsync(DescribeWorkflowRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ImportCertificateResponse> ImportCertificateAsync(ImportCertificateRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ImportHostKeyResponse> ImportHostKeyAsync(ImportHostKeyRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ImportSshPublicKeyResponse> ImportSshPublicKeyAsync(ImportSshPublicKeyRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ListAccessesResponse> ListAccessesAsync(ListAccessesRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ListAgreementsResponse> ListAgreementsAsync(ListAgreementsRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ListCertificatesResponse> ListCertificatesAsync(ListCertificatesRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ListConnectorsResponse> ListConnectorsAsync(ListConnectorsRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ListExecutionsResponse> ListExecutionsAsync(ListExecutionsRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ListHostKeysResponse> ListHostKeysAsync(ListHostKeysRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ListProfilesResponse> ListProfilesAsync(ListProfilesRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ListSecurityPoliciesResponse> ListSecurityPoliciesAsync(ListSecurityPoliciesRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ListServersResponse> ListServersAsync(ListServersRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ListTagsForResourceResponse> ListTagsForResourceAsync(ListTagsForResourceRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ListUsersResponse> ListUsersAsync(ListUsersRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<ListWorkflowsResponse> ListWorkflowsAsync(ListWorkflowsRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<SendWorkflowStepStateResponse> SendWorkflowStepStateAsync(SendWorkflowStepStateRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<StartDirectoryListingResponse> StartDirectoryListingAsync(StartDirectoryListingRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<StartFileTransferResponse> StartFileTransferAsync(StartFileTransferRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<StartServerResponse> StartServerAsync(StartServerRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<StopServerResponse> StopServerAsync(StopServerRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<TagResourceResponse> TagResourceAsync(TagResourceRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<TestConnectionResponse> TestConnectionAsync(TestConnectionRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<TestIdentityProviderResponse> TestIdentityProviderAsync(TestIdentityProviderRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<UntagResourceResponse> UntagResourceAsync(UntagResourceRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<UpdateAccessResponse> UpdateAccessAsync(UpdateAccessRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<UpdateAgreementResponse> UpdateAgreementAsync(UpdateAgreementRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<UpdateCertificateResponse> UpdateCertificateAsync(UpdateCertificateRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<UpdateConnectorResponse> UpdateConnectorAsync(UpdateConnectorRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<UpdateHostKeyResponse> UpdateHostKeyAsync(UpdateHostKeyRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<UpdateProfileResponse> UpdateProfileAsync(UpdateProfileRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<UpdateServerResponse> UpdateServerAsync(UpdateServerRequest request, CancellationToken cancellationToken);
    public abstract virtual Task`1<UpdateUserResponse> UpdateUserAsync(UpdateUserRequest request, CancellationToken cancellationToken);
    public abstract virtual Endpoint DetermineServiceOperationEndpoint(AmazonWebServiceRequest request);
}
public class Amazon.Transfer.IdentityProviderType : ConstantClass {
    public static IdentityProviderType API_GATEWAY;
    public static IdentityProviderType AWS_DIRECTORY_SERVICE;
    public static IdentityProviderType AWS_LAMBDA;
    public static IdentityProviderType SERVICE_MANAGED;
    public IdentityProviderType(string value);
    private static IdentityProviderType();
    public static IdentityProviderType FindValue(string value);
    public static IdentityProviderType op_Implicit(string value);
}
public class Amazon.Transfer.Internal.AmazonTransferEndpointProvider : object {
    public sealed virtual Endpoint ResolveEndpoint(EndpointParameters parameters);
}
public class Amazon.Transfer.Internal.AmazonTransferEndpointResolver : BaseEndpointResolver {
    protected virtual void ServiceSpecificHandler(IExecutionContext executionContext, EndpointParameters parameters);
    protected virtual EndpointParameters MapEndpointsParameters(IRequestContext requestContext);
}
public class Amazon.Transfer.Internal.AmazonTransferMetadata : object {
    public string ServiceId { get; }
    public IDictionary`2<string, string> OperationNameMapping { get; }
    public sealed virtual string get_ServiceId();
    public sealed virtual IDictionary`2<string, string> get_OperationNameMapping();
}
public class Amazon.Transfer.MapType : ConstantClass {
    public static MapType DIRECTORY;
    public static MapType FILE;
    public MapType(string value);
    private static MapType();
    public static MapType FindValue(string value);
    public static MapType op_Implicit(string value);
}
public class Amazon.Transfer.MdnResponse : ConstantClass {
    public static MdnResponse NONE;
    public static MdnResponse SYNC;
    public MdnResponse(string value);
    private static MdnResponse();
    public static MdnResponse FindValue(string value);
    public static MdnResponse op_Implicit(string value);
}
public class Amazon.Transfer.MdnSigningAlg : ConstantClass {
    public static MdnSigningAlg DEFAULT;
    public static MdnSigningAlg NONE;
    public static MdnSigningAlg SHA1;
    public static MdnSigningAlg SHA256;
    public static MdnSigningAlg SHA384;
    public static MdnSigningAlg SHA512;
    public MdnSigningAlg(string value);
    private static MdnSigningAlg();
    public static MdnSigningAlg FindValue(string value);
    public static MdnSigningAlg op_Implicit(string value);
}
public class Amazon.Transfer.Model.AccessDeniedException : AmazonTransferException {
    public AccessDeniedException(string message);
    public AccessDeniedException(string message, Exception innerException);
    public AccessDeniedException(Exception innerException);
    public AccessDeniedException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public AccessDeniedException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Transfer.Model.As2ConnectorConfig : object {
    private string _basicAuthSecretId;
    private CompressionEnum _compression;
    private EncryptionAlg _encryptionAlgorithm;
    private string _localProfileId;
    private MdnResponse _mdnResponse;
    private MdnSigningAlg _mdnSigningAlgorithm;
    private string _messageSubject;
    private string _partnerProfileId;
    private SigningAlg _signingAlgorithm;
    [AWSPropertyAttribute]
public string BasicAuthSecretId { get; public set; }
    public CompressionEnum Compression { get; public set; }
    public EncryptionAlg EncryptionAlgorithm { get; public set; }
    [AWSPropertyAttribute]
public string LocalProfileId { get; public set; }
    public MdnResponse MdnResponse { get; public set; }
    public MdnSigningAlg MdnSigningAlgorithm { get; public set; }
    [AWSPropertyAttribute]
public string MessageSubject { get; public set; }
    [AWSPropertyAttribute]
public string PartnerProfileId { get; public set; }
    public SigningAlg SigningAlgorithm { get; public set; }
    public string get_BasicAuthSecretId();
    public void set_BasicAuthSecretId(string value);
    internal bool IsSetBasicAuthSecretId();
    public CompressionEnum get_Compression();
    public void set_Compression(CompressionEnum value);
    internal bool IsSetCompression();
    public EncryptionAlg get_EncryptionAlgorithm();
    public void set_EncryptionAlgorithm(EncryptionAlg value);
    internal bool IsSetEncryptionAlgorithm();
    public string get_LocalProfileId();
    public void set_LocalProfileId(string value);
    internal bool IsSetLocalProfileId();
    public MdnResponse get_MdnResponse();
    public void set_MdnResponse(MdnResponse value);
    internal bool IsSetMdnResponse();
    public MdnSigningAlg get_MdnSigningAlgorithm();
    public void set_MdnSigningAlgorithm(MdnSigningAlg value);
    internal bool IsSetMdnSigningAlgorithm();
    public string get_MessageSubject();
    public void set_MessageSubject(string value);
    internal bool IsSetMessageSubject();
    public string get_PartnerProfileId();
    public void set_PartnerProfileId(string value);
    internal bool IsSetPartnerProfileId();
    public SigningAlg get_SigningAlgorithm();
    public void set_SigningAlgorithm(SigningAlg value);
    internal bool IsSetSigningAlgorithm();
}
public class Amazon.Transfer.Model.ConflictException : AmazonTransferException {
    public ConflictException(string message);
    public ConflictException(string message, Exception innerException);
    public ConflictException(Exception innerException);
    public ConflictException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public ConflictException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Transfer.Model.CopyStepDetails : object {
    private InputFileLocation _destinationFileLocation;
    private string _name;
    private OverwriteExisting _overwriteExisting;
    private string _sourceFileLocation;
    public InputFileLocation DestinationFileLocation { get; public set; }
    [AWSPropertyAttribute]
public string Name { get; public set; }
    public OverwriteExisting OverwriteExisting { get; public set; }
    [AWSPropertyAttribute]
public string SourceFileLocation { get; public set; }
    public InputFileLocation get_DestinationFileLocation();
    public void set_DestinationFileLocation(InputFileLocation value);
    internal bool IsSetDestinationFileLocation();
    public string get_Name();
    public void set_Name(string value);
    internal bool IsSetName();
    public OverwriteExisting get_OverwriteExisting();
    public void set_OverwriteExisting(OverwriteExisting value);
    internal bool IsSetOverwriteExisting();
    public string get_SourceFileLocation();
    public void set_SourceFileLocation(string value);
    internal bool IsSetSourceFileLocation();
}
public class Amazon.Transfer.Model.CreateAccessRequest : AmazonTransferRequest {
    private string _externalId;
    private string _homeDirectory;
    private List`1<HomeDirectoryMapEntry> _homeDirectoryMappings;
    private HomeDirectoryType _homeDirectoryType;
    private string _policy;
    private PosixProfile _posixProfile;
    private string _role;
    private string _serverId;
    [AWSPropertyAttribute]
public string ExternalId { get; public set; }
    [AWSPropertyAttribute]
public string HomeDirectory { get; public set; }
    [AWSPropertyAttribute]
public List`1<HomeDirectoryMapEntry> HomeDirectoryMappings { get; public set; }
    public HomeDirectoryType HomeDirectoryType { get; public set; }
    [AWSPropertyAttribute]
public string Policy { get; public set; }
    public PosixProfile PosixProfile { get; public set; }
    [AWSPropertyAttribute]
public string Role { get; public set; }
    [AWSPropertyAttribute]
public string ServerId { get; public set; }
    public string get_ExternalId();
    public void set_ExternalId(string value);
    internal bool IsSetExternalId();
    public string get_HomeDirectory();
    public void set_HomeDirectory(string value);
    internal bool IsSetHomeDirectory();
    public List`1<HomeDirectoryMapEntry> get_HomeDirectoryMappings();
    public void set_HomeDirectoryMappings(List`1<HomeDirectoryMapEntry> value);
    internal bool IsSetHomeDirectoryMappings();
    public HomeDirectoryType get_HomeDirectoryType();
    public void set_HomeDirectoryType(HomeDirectoryType value);
    internal bool IsSetHomeDirectoryType();
    public string get_Policy();
    public void set_Policy(string value);
    internal bool IsSetPolicy();
    public PosixProfile get_PosixProfile();
    public void set_PosixProfile(PosixProfile value);
    internal bool IsSetPosixProfile();
    public string get_Role();
    public void set_Role(string value);
    internal bool IsSetRole();
    public string get_ServerId();
    public void set_ServerId(string value);
    internal bool IsSetServerId();
}
public class Amazon.Transfer.Model.CreateAccessResponse : AmazonWebServiceResponse {
    private string _externalId;
    private string _serverId;
    [AWSPropertyAttribute]
public string ExternalId { get; public set; }
    [AWSPropertyAttribute]
public string ServerId { get; public set; }
    public string get_ExternalId();
    public void set_ExternalId(string value);
    internal bool IsSetExternalId();
    public string get_ServerId();
    public void set_ServerId(string value);
    internal bool IsSetServerId();
}
public class Amazon.Transfer.Model.CreateAgreementRequest : AmazonTransferRequest {
    private string _accessRole;
    private string _baseDirectory;
    private string _description;
    private string _localProfileId;
    private string _partnerProfileId;
    private string _serverId;
    private AgreementStatusType _status;
    private List`1<Tag> _tags;
    [AWSPropertyAttribute]
public string AccessRole { get; public set; }
    [AWSPropertyAttribute]
public string BaseDirectory { get; public set; }
    [AWSPropertyAttribute]
public string Description { get; public set; }
    [AWSPropertyAttribute]
public string LocalProfileId { get; public set; }
    [AWSPropertyAttribute]
public string PartnerProfileId { get; public set; }
    [AWSPropertyAttribute]
public string ServerId { get; public set; }
    public AgreementStatusType Status { get; public set; }
    [AWSPropertyAttribute]
public List`1<Tag> Tags { get; public set; }
    public string get_AccessRole();
    public void set_AccessRole(string value);
    internal bool IsSetAccessRole();
    public string get_BaseDirectory();
    public void set_BaseDirectory(string value);
    internal bool IsSetBaseDirectory();
    public string get_Description();
    public void set_Description(string value);
    internal bool IsSetDescription();
    public string get_LocalProfileId();
    public void set_LocalProfileId(string value);
    internal bool IsSetLocalProfileId();
    public string get_PartnerProfileId();
    public void set_PartnerProfileId(string value);
    internal bool IsSetPartnerProfileId();
    public string get_ServerId();
    public void set_ServerId(string value);
    internal bool IsSetServerId();
    public AgreementStatusType get_Status();
    public void set_Status(AgreementStatusType value);
    internal bool IsSetStatus();
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
}
public class Amazon.Transfer.Model.CreateAgreementResponse : AmazonWebServiceResponse {
    private string _agreementId;
    [AWSPropertyAttribute]
public string AgreementId { get; public set; }
    public string get_AgreementId();
    public void set_AgreementId(string value);
    internal bool IsSetAgreementId();
}
public class Amazon.Transfer.Model.CreateConnectorRequest : AmazonTransferRequest {
    private string _accessRole;
    private As2ConnectorConfig _as2Config;
    private string _loggingRole;
    private string _securityPolicyName;
    private SftpConnectorConfig _sftpConfig;
    private List`1<Tag> _tags;
    private string _url;
    [AWSPropertyAttribute]
public string AccessRole { get; public set; }
    public As2ConnectorConfig As2Config { get; public set; }
    [AWSPropertyAttribute]
public string LoggingRole { get; public set; }
    [AWSPropertyAttribute]
public string SecurityPolicyName { get; public set; }
    public SftpConnectorConfig SftpConfig { get; public set; }
    [AWSPropertyAttribute]
public List`1<Tag> Tags { get; public set; }
    [AWSPropertyAttribute]
public string Url { get; public set; }
    public string get_AccessRole();
    public void set_AccessRole(string value);
    internal bool IsSetAccessRole();
    public As2ConnectorConfig get_As2Config();
    public void set_As2Config(As2ConnectorConfig value);
    internal bool IsSetAs2Config();
    public string get_LoggingRole();
    public void set_LoggingRole(string value);
    internal bool IsSetLoggingRole();
    public string get_SecurityPolicyName();
    public void set_SecurityPolicyName(string value);
    internal bool IsSetSecurityPolicyName();
    public SftpConnectorConfig get_SftpConfig();
    public void set_SftpConfig(SftpConnectorConfig value);
    internal bool IsSetSftpConfig();
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
    public string get_Url();
    public void set_Url(string value);
    internal bool IsSetUrl();
}
public class Amazon.Transfer.Model.CreateConnectorResponse : AmazonWebServiceResponse {
    private string _connectorId;
    [AWSPropertyAttribute]
public string ConnectorId { get; public set; }
    public string get_ConnectorId();
    public void set_ConnectorId(string value);
    internal bool IsSetConnectorId();
}
public class Amazon.Transfer.Model.CreateProfileRequest : AmazonTransferRequest {
    private string _as2Id;
    private List`1<string> _certificateIds;
    private ProfileType _profileType;
    private List`1<Tag> _tags;
    [AWSPropertyAttribute]
public string As2Id { get; public set; }
    public List`1<string> CertificateIds { get; public set; }
    [AWSPropertyAttribute]
public ProfileType ProfileType { get; public set; }
    [AWSPropertyAttribute]
public List`1<Tag> Tags { get; public set; }
    public string get_As2Id();
    public void set_As2Id(string value);
    internal bool IsSetAs2Id();
    public List`1<string> get_CertificateIds();
    public void set_CertificateIds(List`1<string> value);
    internal bool IsSetCertificateIds();
    public ProfileType get_ProfileType();
    public void set_ProfileType(ProfileType value);
    internal bool IsSetProfileType();
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
}
public class Amazon.Transfer.Model.CreateProfileResponse : AmazonWebServiceResponse {
    private string _profileId;
    [AWSPropertyAttribute]
public string ProfileId { get; public set; }
    public string get_ProfileId();
    public void set_ProfileId(string value);
    internal bool IsSetProfileId();
}
public class Amazon.Transfer.Model.CreateServerRequest : AmazonTransferRequest {
    private string _certificate;
    private Domain _domain;
    private EndpointDetails _endpointDetails;
    private EndpointType _endpointType;
    private string _hostKey;
    private IdentityProviderDetails _identityProviderDetails;
    private IdentityProviderType _identityProviderType;
    private string _loggingRole;
    private string _postAuthenticationLoginBanner;
    private string _preAuthenticationLoginBanner;
    private ProtocolDetails _protocolDetails;
    private List`1<string> _protocols;
    private S3StorageOptions _s3StorageOptions;
    private string _securityPolicyName;
    private List`1<string> _structuredLogDestinations;
    private List`1<Tag> _tags;
    private WorkflowDetails _workflowDetails;
    [AWSPropertyAttribute]
public string Certificate { get; public set; }
    public Domain Domain { get; public set; }
    public EndpointDetails EndpointDetails { get; public set; }
    public EndpointType EndpointType { get; public set; }
    [AWSPropertyAttribute]
public string HostKey { get; public set; }
    public IdentityProviderDetails IdentityProviderDetails { get; public set; }
    public IdentityProviderType IdentityProviderType { get; public set; }
    [AWSPropertyAttribute]
public string LoggingRole { get; public set; }
    [AWSPropertyAttribute]
public string PostAuthenticationLoginBanner { get; public set; }
    [AWSPropertyAttribute]
public string PreAuthenticationLoginBanner { get; public set; }
    public ProtocolDetails ProtocolDetails { get; public set; }
    [AWSPropertyAttribute]
public List`1<string> Protocols { get; public set; }
    public S3StorageOptions S3StorageOptions { get; public set; }
    [AWSPropertyAttribute]
public string SecurityPolicyName { get; public set; }
    [AWSPropertyAttribute]
public List`1<string> StructuredLogDestinations { get; public set; }
    [AWSPropertyAttribute]
public List`1<Tag> Tags { get; public set; }
    public WorkflowDetails WorkflowDetails { get; public set; }
    public string get_Certificate();
    public void set_Certificate(string value);
    internal bool IsSetCertificate();
    public Domain get_Domain();
    public void set_Domain(Domain value);
    internal bool IsSetDomain();
    public EndpointDetails get_EndpointDetails();
    public void set_EndpointDetails(EndpointDetails value);
    internal bool IsSetEndpointDetails();
    public EndpointType get_EndpointType();
    public void set_EndpointType(EndpointType value);
    internal bool IsSetEndpointType();
    public string get_HostKey();
    public void set_HostKey(string value);
    internal bool IsSetHostKey();
    public IdentityProviderDetails get_IdentityProviderDetails();
    public void set_IdentityProviderDetails(IdentityProviderDetails value);
    internal bool IsSetIdentityProviderDetails();
    public IdentityProviderType get_IdentityProviderType();
    public void set_IdentityProviderType(IdentityProviderType value);
    internal bool IsSetIdentityProviderType();
    public string get_LoggingRole();
    public void set_LoggingRole(string value);
    internal bool IsSetLoggingRole();
    public string get_PostAuthenticationLoginBanner();
    public void set_PostAuthenticationLoginBanner(string value);
    internal bool IsSetPostAuthenticationLoginBanner();
    public string get_PreAuthenticationLoginBanner();
    public void set_PreAuthenticationLoginBanner(string value);
    internal bool IsSetPreAuthenticationLoginBanner();
    public ProtocolDetails get_ProtocolDetails();
    public void set_ProtocolDetails(ProtocolDetails value);
    internal bool IsSetProtocolDetails();
    public List`1<string> get_Protocols();
    public void set_Protocols(List`1<string> value);
    internal bool IsSetProtocols();
    public S3StorageOptions get_S3StorageOptions();
    public void set_S3StorageOptions(S3StorageOptions value);
    internal bool IsSetS3StorageOptions();
    public string get_SecurityPolicyName();
    public void set_SecurityPolicyName(string value);
    internal bool IsSetSecurityPolicyName();
    public List`1<string> get_StructuredLogDestinations();
    public void set_StructuredLogDestinations(List`1<string> value);
    internal bool IsSetStructuredLogDestinations();
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
    public WorkflowDetails get_WorkflowDetails();
    public void set_WorkflowDetails(WorkflowDetails value);
    internal bool IsSetWorkflowDetails();
}
public class Amazon.Transfer.Model.CreateServerResponse : AmazonWebServiceResponse {
    private string _serverId;
    [AWSPropertyAttribute]
public string ServerId { get; public set; }
    public string get_ServerId();
    public void set_ServerId(string value);
    internal bool IsSetServerId();
}
public class Amazon.Transfer.Model.CreateUserRequest : AmazonTransferRequest {
    private string _homeDirectory;
    private List`1<HomeDirectoryMapEntry> _homeDirectoryMappings;
    private HomeDirectoryType _homeDirectoryType;
    private string _policy;
    private PosixProfile _posixProfile;
    private string _role;
    private string _serverId;
    private string _sshPublicKeyBody;
    private List`1<Tag> _tags;
    private string _userName;
    [AWSPropertyAttribute]
public string HomeDirectory { get; public set; }
    [AWSPropertyAttribute]
public List`1<HomeDirectoryMapEntry> HomeDirectoryMappings { get; public set; }
    public HomeDirectoryType HomeDirectoryType { get; public set; }
    [AWSPropertyAttribute]
public string Policy { get; public set; }
    public PosixProfile PosixProfile { get; public set; }
    [AWSPropertyAttribute]
public string Role { get; public set; }
    [AWSPropertyAttribute]
public string ServerId { get; public set; }
    [AWSPropertyAttribute]
public string SshPublicKeyBody { get; public set; }
    [AWSPropertyAttribute]
public List`1<Tag> Tags { get; public set; }
    [AWSPropertyAttribute]
public string UserName { get; public set; }
    public string get_HomeDirectory();
    public void set_HomeDirectory(string value);
    internal bool IsSetHomeDirectory();
    public List`1<HomeDirectoryMapEntry> get_HomeDirectoryMappings();
    public void set_HomeDirectoryMappings(List`1<HomeDirectoryMapEntry> value);
    internal bool IsSetHomeDirectoryMappings();
    public HomeDirectoryType get_HomeDirectoryType();
    public void set_HomeDirectoryType(HomeDirectoryType value);
    internal bool IsSetHomeDirectoryType();
    public string get_Policy();
    public void set_Policy(string value);
    internal bool IsSetPolicy();
    public PosixProfile get_PosixProfile();
    public void set_PosixProfile(PosixProfile value);
    internal bool IsSetPosixProfile();
    public string get_Role();
    public void set_Role(string value);
    internal bool IsSetRole();
    public string get_ServerId();
    public void set_ServerId(string value);
    internal bool IsSetServerId();
    public string get_SshPublicKeyBody();
    public void set_SshPublicKeyBody(string value);
    internal bool IsSetSshPublicKeyBody();
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
    public string get_UserName();
    public void set_UserName(string value);
    internal bool IsSetUserName();
}
public class Amazon.Transfer.Model.CreateUserResponse : AmazonWebServiceResponse {
    private string _serverId;
    private string _userName;
    [AWSPropertyAttribute]
public string ServerId { get; public set; }
    [AWSPropertyAttribute]
public string UserName { get; public set; }
    public string get_ServerId();
    public void set_ServerId(string value);
    internal bool IsSetServerId();
    public string get_UserName();
    public void set_UserName(string value);
    internal bool IsSetUserName();
}
public class Amazon.Transfer.Model.CreateWorkflowRequest : AmazonTransferRequest {
    private string _description;
    private List`1<WorkflowStep> _onExceptionSteps;
    private List`1<WorkflowStep> _steps;
    private List`1<Tag> _tags;
    [AWSPropertyAttribute]
public string Description { get; public set; }
    [AWSPropertyAttribute]
public List`1<WorkflowStep> OnExceptionSteps { get; public set; }
    [AWSPropertyAttribute]
public List`1<WorkflowStep> Steps { get; public set; }
    [AWSPropertyAttribute]
public List`1<Tag> Tags { get; public set; }
    public string get_Description();
    public void set_Description(string value);
    internal bool IsSetDescription();
    public List`1<WorkflowStep> get_OnExceptionSteps();
    public void set_OnExceptionSteps(List`1<WorkflowStep> value);
    internal bool IsSetOnExceptionSteps();
    public List`1<WorkflowStep> get_Steps();
    public void set_Steps(List`1<WorkflowStep> value);
    internal bool IsSetSteps();
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
}
public class Amazon.Transfer.Model.CreateWorkflowResponse : AmazonWebServiceResponse {
    private string _workflowId;
    [AWSPropertyAttribute]
public string WorkflowId { get; public set; }
    public string get_WorkflowId();
    public void set_WorkflowId(string value);
    internal bool IsSetWorkflowId();
}
public class Amazon.Transfer.Model.CustomStepDetails : object {
    private string _name;
    private string _sourceFileLocation;
    private string _target;
    private Nullable`1<int> _timeoutSeconds;
    [AWSPropertyAttribute]
public string Name { get; public set; }
    [AWSPropertyAttribute]
public string SourceFileLocation { get; public set; }
    [AWSPropertyAttribute]
public string Target { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> TimeoutSeconds { get; public set; }
    public string get_Name();
    public void set_Name(string value);
    internal bool IsSetName();
    public string get_SourceFileLocation();
    public void set_SourceFileLocation(string value);
    internal bool IsSetSourceFileLocation();
    public string get_Target();
    public void set_Target(string value);
    internal bool IsSetTarget();
    public Nullable`1<int> get_TimeoutSeconds();
    public void set_TimeoutSeconds(Nullable`1<int> value);
    internal bool IsSetTimeoutSeconds();
}
public class Amazon.Transfer.Model.DecryptStepDetails : object {
    private InputFileLocation _destinationFileLocation;
    private string _name;
    private OverwriteExisting _overwriteExisting;
    private string _sourceFileLocation;
    private EncryptionType _type;
    [AWSPropertyAttribute]
public InputFileLocation DestinationFileLocation { get; public set; }
    [AWSPropertyAttribute]
public string Name { get; public set; }
    public OverwriteExisting OverwriteExisting { get; public set; }
    [AWSPropertyAttribute]
public string SourceFileLocation { get; public set; }
    [AWSPropertyAttribute]
public EncryptionType Type { get; public set; }
    public InputFileLocation get_DestinationFileLocation();
    public void set_DestinationFileLocation(InputFileLocation value);
    internal bool IsSetDestinationFileLocation();
    public string get_Name();
    public void set_Name(string value);
    internal bool IsSetName();
    public OverwriteExisting get_OverwriteExisting();
    public void set_OverwriteExisting(OverwriteExisting value);
    internal bool IsSetOverwriteExisting();
    public string get_SourceFileLocation();
    public void set_SourceFileLocation(string value);
    internal bool IsSetSourceFileLocation();
    public EncryptionType get_Type();
    public void set_Type(EncryptionType value);
    internal bool IsSetType();
}
public class Amazon.Transfer.Model.DeleteAccessRequest : AmazonTransferRequest {
    private string _externalId;
    private string _serverId;
    [AWSPropertyAttribute]
public string ExternalId { get; public set; }
    [AWSPropertyAttribute]
public string ServerId { get; public set; }
    public string get_ExternalId();
    public void set_ExternalId(string value);
    internal bool IsSetExternalId();
    public string get_ServerId();
    public void set_ServerId(string value);
    internal bool IsSetServerId();
}
public class Amazon.Transfer.Model.DeleteAccessResponse : AmazonWebServiceResponse {
}
public class Amazon.Transfer.Model.DeleteAgreementRequest : AmazonTransferRequest {
    private string _agreementId;
    private string _serverId;
    [AWSPropertyAttribute]
public string AgreementId { get; public set; }
    [AWSPropertyAttribute]
public string ServerId { get; public set; }
    public string get_AgreementId();
    public void set_AgreementId(string value);
    internal bool IsSetAgreementId();
    public string get_ServerId();
    public void set_ServerId(string value);
    internal bool IsSetServerId();
}
public class Amazon.Transfer.Model.DeleteAgreementResponse : AmazonWebServiceResponse {
}
public class Amazon.Transfer.Model.DeleteCertificateRequest : AmazonTransferRequest {
    private string _certificateId;
    [AWSPropertyAttribute]
public string CertificateId { get; public set; }
    public string get_CertificateId();
    public void set_CertificateId(string value);
    internal bool IsSetCertificateId();
}
public class Amazon.Transfer.Model.DeleteCertificateResponse : AmazonWebServiceResponse {
}
public class Amazon.Transfer.Model.DeleteConnectorRequest : AmazonTransferRequest {
    private string _connectorId;
    [AWSPropertyAttribute]
public string ConnectorId { get; public set; }
    public string get_ConnectorId();
    public void set_ConnectorId(string value);
    internal bool IsSetConnectorId();
}
public class Amazon.Transfer.Model.DeleteConnectorResponse : AmazonWebServiceResponse {
}
public class Amazon.Transfer.Model.DeleteHostKeyRequest : AmazonTransferRequest {
    private string _hostKeyId;
    private string _serverId;
    [AWSPropertyAttribute]
public string HostKeyId { get; public set; }
    [AWSPropertyAttribute]
public string ServerId { get; public set; }
    public string get_HostKeyId();
    public void set_HostKeyId(string value);
    internal bool IsSetHostKeyId();
    public string get_ServerId();
    public void set_ServerId(string value);
    internal bool IsSetServerId();
}
public class Amazon.Transfer.Model.DeleteHostKeyResponse : AmazonWebServiceResponse {
}
public class Amazon.Transfer.Model.DeleteProfileRequest : AmazonTransferRequest {
    private string _profileId;
    [AWSPropertyAttribute]
public string ProfileId { get; public set; }
    public string get_ProfileId();
    public void set_ProfileId(string value);
    internal bool IsSetProfileId();
}
public class Amazon.Transfer.Model.DeleteProfileResponse : AmazonWebServiceResponse {
}
public class Amazon.Transfer.Model.DeleteServerRequest : AmazonTransferRequest {
    private string _serverId;
    [AWSPropertyAttribute]
public string ServerId { get; public set; }
    public string get_ServerId();
    public void set_ServerId(string value);
    internal bool IsSetServerId();
}
public class Amazon.Transfer.Model.DeleteServerResponse : AmazonWebServiceResponse {
}
public class Amazon.Transfer.Model.DeleteSshPublicKeyRequest : AmazonTransferRequest {
    private string _serverId;
    private string _sshPublicKeyId;
    private string _userName;
    [AWSPropertyAttribute]
public string ServerId { get; public set; }
    [AWSPropertyAttribute]
public string SshPublicKeyId { get; public set; }
    [AWSPropertyAttribute]
public string UserName { get; public set; }
    public string get_ServerId();
    public void set_ServerId(string value);
    internal bool IsSetServerId();
    public string get_SshPublicKeyId();
    public void set_SshPublicKeyId(string value);
    internal bool IsSetSshPublicKeyId();
    public string get_UserName();
    public void set_UserName(string value);
    internal bool IsSetUserName();
}
public class Amazon.Transfer.Model.DeleteSshPublicKeyResponse : AmazonWebServiceResponse {
}
public class Amazon.Transfer.Model.DeleteStepDetails : object {
    private string _name;
    private string _sourceFileLocation;
    [AWSPropertyAttribute]
public string Name { get; public set; }
    [AWSPropertyAttribute]
public string SourceFileLocation { get; public set; }
    public string get_Name();
    public void set_Name(string value);
    internal bool IsSetName();
    public string get_SourceFileLocation();
    public void set_SourceFileLocation(string value);
    internal bool IsSetSourceFileLocation();
}
public class Amazon.Transfer.Model.DeleteUserRequest : AmazonTransferRequest {
    private string _serverId;
    private string _userName;
    [AWSPropertyAttribute]
public string ServerId { get; public set; }
    [AWSPropertyAttribute]
public string UserName { get; public set; }
    public string get_ServerId();
    public void set_ServerId(string value);
    internal bool IsSetServerId();
    public string get_UserName();
    public void set_UserName(string value);
    internal bool IsSetUserName();
}
public class Amazon.Transfer.Model.DeleteUserResponse : AmazonWebServiceResponse {
}
public class Amazon.Transfer.Model.DeleteWorkflowRequest : AmazonTransferRequest {
    private string _workflowId;
    [AWSPropertyAttribute]
public string WorkflowId { get; public set; }
    public string get_WorkflowId();
    public void set_WorkflowId(string value);
    internal bool IsSetWorkflowId();
}
public class Amazon.Transfer.Model.DeleteWorkflowResponse : AmazonWebServiceResponse {
}
public class Amazon.Transfer.Model.DescribeAccessRequest : AmazonTransferRequest {
    private string _externalId;
    private string _serverId;
    [AWSPropertyAttribute]
public string ExternalId { get; public set; }
    [AWSPropertyAttribute]
public string ServerId { get; public set; }
    public string get_ExternalId();
    public void set_ExternalId(string value);
    internal bool IsSetExternalId();
    public string get_ServerId();
    public void set_ServerId(string value);
    internal bool IsSetServerId();
}
public class Amazon.Transfer.Model.DescribeAccessResponse : AmazonWebServiceResponse {
    private DescribedAccess _access;
    private string _serverId;
    [AWSPropertyAttribute]
public DescribedAccess Access { get; public set; }
    [AWSPropertyAttribute]
public string ServerId { get; public set; }
    public DescribedAccess get_Access();
    public void set_Access(DescribedAccess value);
    internal bool IsSetAccess();
    public string get_ServerId();
    public void set_ServerId(string value);
    internal bool IsSetServerId();
}
public class Amazon.Transfer.Model.DescribeAgreementRequest : AmazonTransferRequest {
    private string _agreementId;
    private string _serverId;
    [AWSPropertyAttribute]
public string AgreementId { get; public set; }
    [AWSPropertyAttribute]
public string ServerId { get; public set; }
    public string get_AgreementId();
    public void set_AgreementId(string value);
    internal bool IsSetAgreementId();
    public string get_ServerId();
    public void set_ServerId(string value);
    internal bool IsSetServerId();
}
public class Amazon.Transfer.Model.DescribeAgreementResponse : AmazonWebServiceResponse {
    private DescribedAgreement _agreement;
    [AWSPropertyAttribute]
public DescribedAgreement Agreement { get; public set; }
    public DescribedAgreement get_Agreement();
    public void set_Agreement(DescribedAgreement value);
    internal bool IsSetAgreement();
}
public class Amazon.Transfer.Model.DescribeCertificateRequest : AmazonTransferRequest {
    private string _certificateId;
    [AWSPropertyAttribute]
public string CertificateId { get; public set; }
    public string get_CertificateId();
    public void set_CertificateId(string value);
    internal bool IsSetCertificateId();
}
public class Amazon.Transfer.Model.DescribeCertificateResponse : AmazonWebServiceResponse {
    private DescribedCertificate _certificate;
    [AWSPropertyAttribute]
public DescribedCertificate Certificate { get; public set; }
    public DescribedCertificate get_Certificate();
    public void set_Certificate(DescribedCertificate value);
    internal bool IsSetCertificate();
}
public class Amazon.Transfer.Model.DescribeConnectorRequest : AmazonTransferRequest {
    private string _connectorId;
    [AWSPropertyAttribute]
public string ConnectorId { get; public set; }
    public string get_ConnectorId();
    public void set_ConnectorId(string value);
    internal bool IsSetConnectorId();
}
public class Amazon.Transfer.Model.DescribeConnectorResponse : AmazonWebServiceResponse {
    private DescribedConnector _connector;
    [AWSPropertyAttribute]
public DescribedConnector Connector { get; public set; }
    public DescribedConnector get_Connector();
    public void set_Connector(DescribedConnector value);
    internal bool IsSetConnector();
}
public class Amazon.Transfer.Model.DescribedAccess : object {
    private string _externalId;
    private string _homeDirectory;
    private List`1<HomeDirectoryMapEntry> _homeDirectoryMappings;
    private HomeDirectoryType _homeDirectoryType;
    private string _policy;
    private PosixProfile _posixProfile;
    private string _role;
    [AWSPropertyAttribute]
public string ExternalId { get; public set; }
    [AWSPropertyAttribute]
public string HomeDirectory { get; public set; }
    [AWSPropertyAttribute]
public List`1<HomeDirectoryMapEntry> HomeDirectoryMappings { get; public set; }
    public HomeDirectoryType HomeDirectoryType { get; public set; }
    [AWSPropertyAttribute]
public string Policy { get; public set; }
    public PosixProfile PosixProfile { get; public set; }
    [AWSPropertyAttribute]
public string Role { get; public set; }
    public string get_ExternalId();
    public void set_ExternalId(string value);
    internal bool IsSetExternalId();
    public string get_HomeDirectory();
    public void set_HomeDirectory(string value);
    internal bool IsSetHomeDirectory();
    public List`1<HomeDirectoryMapEntry> get_HomeDirectoryMappings();
    public void set_HomeDirectoryMappings(List`1<HomeDirectoryMapEntry> value);
    internal bool IsSetHomeDirectoryMappings();
    public HomeDirectoryType get_HomeDirectoryType();
    public void set_HomeDirectoryType(HomeDirectoryType value);
    internal bool IsSetHomeDirectoryType();
    public string get_Policy();
    public void set_Policy(string value);
    internal bool IsSetPolicy();
    public PosixProfile get_PosixProfile();
    public void set_PosixProfile(PosixProfile value);
    internal bool IsSetPosixProfile();
    public string get_Role();
    public void set_Role(string value);
    internal bool IsSetRole();
}
public class Amazon.Transfer.Model.DescribedAgreement : object {
    private string _accessRole;
    private string _agreementId;
    private string _arn;
    private string _baseDirectory;
    private string _description;
    private string _localProfileId;
    private string _partnerProfileId;
    private string _serverId;
    private AgreementStatusType _status;
    private List`1<Tag> _tags;
    [AWSPropertyAttribute]
public string AccessRole { get; public set; }
    [AWSPropertyAttribute]
public string AgreementId { get; public set; }
    [AWSPropertyAttribute]
public string Arn { get; public set; }
    [AWSPropertyAttribute]
public string BaseDirectory { get; public set; }
    [AWSPropertyAttribute]
public string Description { get; public set; }
    [AWSPropertyAttribute]
public string LocalProfileId { get; public set; }
    [AWSPropertyAttribute]
public string PartnerProfileId { get; public set; }
    [AWSPropertyAttribute]
public string ServerId { get; public set; }
    public AgreementStatusType Status { get; public set; }
    [AWSPropertyAttribute]
public List`1<Tag> Tags { get; public set; }
    public string get_AccessRole();
    public void set_AccessRole(string value);
    internal bool IsSetAccessRole();
    public string get_AgreementId();
    public void set_AgreementId(string value);
    internal bool IsSetAgreementId();
    public string get_Arn();
    public void set_Arn(string value);
    internal bool IsSetArn();
    public string get_BaseDirectory();
    public void set_BaseDirectory(string value);
    internal bool IsSetBaseDirectory();
    public string get_Description();
    public void set_Description(string value);
    internal bool IsSetDescription();
    public string get_LocalProfileId();
    public void set_LocalProfileId(string value);
    internal bool IsSetLocalProfileId();
    public string get_PartnerProfileId();
    public void set_PartnerProfileId(string value);
    internal bool IsSetPartnerProfileId();
    public string get_ServerId();
    public void set_ServerId(string value);
    internal bool IsSetServerId();
    public AgreementStatusType get_Status();
    public void set_Status(AgreementStatusType value);
    internal bool IsSetStatus();
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
}
public class Amazon.Transfer.Model.DescribedCertificate : object {
    private Nullable`1<DateTime> _activeDate;
    private string _arn;
    private string _certificate;
    private string _certificateChain;
    private string _certificateId;
    private string _description;
    private Nullable`1<DateTime> _inactiveDate;
    private Nullable`1<DateTime> _notAfterDate;
    private Nullable`1<DateTime> _notBeforeDate;
    private string _serial;
    private CertificateStatusType _status;
    private List`1<Tag> _tags;
    private CertificateType _type;
    private CertificateUsageType _usage;
    public Nullable`1<DateTime> ActiveDate { get; public set; }
    [AWSPropertyAttribute]
public string Arn { get; public set; }
    [AWSPropertyAttribute]
public string Certificate { get; public set; }
    [AWSPropertyAttribute]
public string CertificateChain { get; public set; }
    [AWSPropertyAttribute]
public string CertificateId { get; public set; }
    [AWSPropertyAttribute]
public string Description { get; public set; }
    public Nullable`1<DateTime> InactiveDate { get; public set; }
    public Nullable`1<DateTime> NotAfterDate { get; public set; }
    public Nullable`1<DateTime> NotBeforeDate { get; public set; }
    [AWSPropertyAttribute]
public string Serial { get; public set; }
    public CertificateStatusType Status { get; public set; }
    [AWSPropertyAttribute]
public List`1<Tag> Tags { get; public set; }
    public CertificateType Type { get; public set; }
    public CertificateUsageType Usage { get; public set; }
    public Nullable`1<DateTime> get_ActiveDate();
    public void set_ActiveDate(Nullable`1<DateTime> value);
    internal bool IsSetActiveDate();
    public string get_Arn();
    public void set_Arn(string value);
    internal bool IsSetArn();
    public string get_Certificate();
    public void set_Certificate(string value);
    internal bool IsSetCertificate();
    public string get_CertificateChain();
    public void set_CertificateChain(string value);
    internal bool IsSetCertificateChain();
    public string get_CertificateId();
    public void set_CertificateId(string value);
    internal bool IsSetCertificateId();
    public string get_Description();
    public void set_Description(string value);
    internal bool IsSetDescription();
    public Nullable`1<DateTime> get_InactiveDate();
    public void set_InactiveDate(Nullable`1<DateTime> value);
    internal bool IsSetInactiveDate();
    public Nullable`1<DateTime> get_NotAfterDate();
    public void set_NotAfterDate(Nullable`1<DateTime> value);
    internal bool IsSetNotAfterDate();
    public Nullable`1<DateTime> get_NotBeforeDate();
    public void set_NotBeforeDate(Nullable`1<DateTime> value);
    internal bool IsSetNotBeforeDate();
    public string get_Serial();
    public void set_Serial(string value);
    internal bool IsSetSerial();
    public CertificateStatusType get_Status();
    public void set_Status(CertificateStatusType value);
    internal bool IsSetStatus();
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
    public CertificateType get_Type();
    public void set_Type(CertificateType value);
    internal bool IsSetType();
    public CertificateUsageType get_Usage();
    public void set_Usage(CertificateUsageType value);
    internal bool IsSetUsage();
}
public class Amazon.Transfer.Model.DescribedConnector : object {
    private string _accessRole;
    private string _arn;
    private As2ConnectorConfig _as2Config;
    private string _connectorId;
    private string _loggingRole;
    private string _securityPolicyName;
    private List`1<string> _serviceManagedEgressIpAddresses;
    private SftpConnectorConfig _sftpConfig;
    private List`1<Tag> _tags;
    private string _url;
    [AWSPropertyAttribute]
public string AccessRole { get; public set; }
    [AWSPropertyAttribute]
public string Arn { get; public set; }
    public As2ConnectorConfig As2Config { get; public set; }
    [AWSPropertyAttribute]
public string ConnectorId { get; public set; }
    [AWSPropertyAttribute]
public string LoggingRole { get; public set; }
    [AWSPropertyAttribute]
public string SecurityPolicyName { get; public set; }
    public List`1<string> ServiceManagedEgressIpAddresses { get; public set; }
    public SftpConnectorConfig SftpConfig { get; public set; }
    [AWSPropertyAttribute]
public List`1<Tag> Tags { get; public set; }
    [AWSPropertyAttribute]
public string Url { get; public set; }
    public string get_AccessRole();
    public void set_AccessRole(string value);
    internal bool IsSetAccessRole();
    public string get_Arn();
    public void set_Arn(string value);
    internal bool IsSetArn();
    public As2ConnectorConfig get_As2Config();
    public void set_As2Config(As2ConnectorConfig value);
    internal bool IsSetAs2Config();
    public string get_ConnectorId();
    public void set_ConnectorId(string value);
    internal bool IsSetConnectorId();
    public string get_LoggingRole();
    public void set_LoggingRole(string value);
    internal bool IsSetLoggingRole();
    public string get_SecurityPolicyName();
    public void set_SecurityPolicyName(string value);
    internal bool IsSetSecurityPolicyName();
    public List`1<string> get_ServiceManagedEgressIpAddresses();
    public void set_ServiceManagedEgressIpAddresses(List`1<string> value);
    internal bool IsSetServiceManagedEgressIpAddresses();
    public SftpConnectorConfig get_SftpConfig();
    public void set_SftpConfig(SftpConnectorConfig value);
    internal bool IsSetSftpConfig();
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
    public string get_Url();
    public void set_Url(string value);
    internal bool IsSetUrl();
}
public class Amazon.Transfer.Model.DescribedExecution : object {
    private string _executionId;
    private string _executionRole;
    private FileLocation _initialFileLocation;
    private LoggingConfiguration _loggingConfiguration;
    private PosixProfile _posixProfile;
    private ExecutionResults _results;
    private ServiceMetadata _serviceMetadata;
    private ExecutionStatus _status;
    [AWSPropertyAttribute]
public string ExecutionId { get; public set; }
    [AWSPropertyAttribute]
public string ExecutionRole { get; public set; }
    public FileLocation InitialFileLocation { get; public set; }
    public LoggingConfiguration LoggingConfiguration { get; public set; }
    public PosixProfile PosixProfile { get; public set; }
    public ExecutionResults Results { get; public set; }
    public ServiceMetadata ServiceMetadata { get; public set; }
    public ExecutionStatus Status { get; public set; }
    public string get_ExecutionId();
    public void set_ExecutionId(string value);
    internal bool IsSetExecutionId();
    public string get_ExecutionRole();
    public void set_ExecutionRole(string value);
    internal bool IsSetExecutionRole();
    public FileLocation get_InitialFileLocation();
    public void set_InitialFileLocation(FileLocation value);
    internal bool IsSetInitialFileLocation();
    public LoggingConfiguration get_LoggingConfiguration();
    public void set_LoggingConfiguration(LoggingConfiguration value);
    internal bool IsSetLoggingConfiguration();
    public PosixProfile get_PosixProfile();
    public void set_PosixProfile(PosixProfile value);
    internal bool IsSetPosixProfile();
    public ExecutionResults get_Results();
    public void set_Results(ExecutionResults value);
    internal bool IsSetResults();
    public ServiceMetadata get_ServiceMetadata();
    public void set_ServiceMetadata(ServiceMetadata value);
    internal bool IsSetServiceMetadata();
    public ExecutionStatus get_Status();
    public void set_Status(ExecutionStatus value);
    internal bool IsSetStatus();
}
public class Amazon.Transfer.Model.DescribedHostKey : object {
    private string _arn;
    private Nullable`1<DateTime> _dateImported;
    private string _description;
    private string _hostKeyFingerprint;
    private string _hostKeyId;
    private List`1<Tag> _tags;
    private string _type;
    [AWSPropertyAttribute]
public string Arn { get; public set; }
    public Nullable`1<DateTime> DateImported { get; public set; }
    [AWSPropertyAttribute]
public string Description { get; public set; }
    public string HostKeyFingerprint { get; public set; }
    [AWSPropertyAttribute]
public string HostKeyId { get; public set; }
    [AWSPropertyAttribute]
public List`1<Tag> Tags { get; public set; }
    public string Type { get; public set; }
    public string get_Arn();
    public void set_Arn(string value);
    internal bool IsSetArn();
    public Nullable`1<DateTime> get_DateImported();
    public void set_DateImported(Nullable`1<DateTime> value);
    internal bool IsSetDateImported();
    public string get_Description();
    public void set_Description(string value);
    internal bool IsSetDescription();
    public string get_HostKeyFingerprint();
    public void set_HostKeyFingerprint(string value);
    internal bool IsSetHostKeyFingerprint();
    public string get_HostKeyId();
    public void set_HostKeyId(string value);
    internal bool IsSetHostKeyId();
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
    public string get_Type();
    public void set_Type(string value);
    internal bool IsSetType();
}
public class Amazon.Transfer.Model.DescribedProfile : object {
    private string _arn;
    private string _as2Id;
    private List`1<string> _certificateIds;
    private string _profileId;
    private ProfileType _profileType;
    private List`1<Tag> _tags;
    [AWSPropertyAttribute]
public string Arn { get; public set; }
    [AWSPropertyAttribute]
public string As2Id { get; public set; }
    public List`1<string> CertificateIds { get; public set; }
    [AWSPropertyAttribute]
public string ProfileId { get; public set; }
    public ProfileType ProfileType { get; public set; }
    [AWSPropertyAttribute]
public List`1<Tag> Tags { get; public set; }
    public string get_Arn();
    public void set_Arn(string value);
    internal bool IsSetArn();
    public string get_As2Id();
    public void set_As2Id(string value);
    internal bool IsSetAs2Id();
    public List`1<string> get_CertificateIds();
    public void set_CertificateIds(List`1<string> value);
    internal bool IsSetCertificateIds();
    public string get_ProfileId();
    public void set_ProfileId(string value);
    internal bool IsSetProfileId();
    public ProfileType get_ProfileType();
    public void set_ProfileType(ProfileType value);
    internal bool IsSetProfileType();
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
}
public class Amazon.Transfer.Model.DescribedSecurityPolicy : object {
    private Nullable`1<bool> _fips;
    private List`1<string> _protocols;
    private string _securityPolicyName;
    private List`1<string> _sshCiphers;
    private List`1<string> _sshHostKeyAlgorithms;
    private List`1<string> _sshKexs;
    private List`1<string> _sshMacs;
    private List`1<string> _tlsCiphers;
    private SecurityPolicyResourceType _type;
    public Nullable`1<bool> Fips { get; public set; }
    [AWSPropertyAttribute]
public List`1<string> Protocols { get; public set; }
    [AWSPropertyAttribute]
public string SecurityPolicyName { get; public set; }
    public List`1<string> SshCiphers { get; public set; }
    public List`1<string> SshHostKeyAlgorithms { get; public set; }
    public List`1<string> SshKexs { get; public set; }
    public List`1<string> SshMacs { get; public set; }
    public List`1<string> TlsCiphers { get; public set; }
    public SecurityPolicyResourceType Type { get; public set; }
    public Nullable`1<bool> get_Fips();
    public void set_Fips(Nullable`1<bool> value);
    internal bool IsSetFips();
    public List`1<string> get_Protocols();
    public void set_Protocols(List`1<string> value);
    internal bool IsSetProtocols();
    public string get_SecurityPolicyName();
    public void set_SecurityPolicyName(string value);
    internal bool IsSetSecurityPolicyName();
    public List`1<string> get_SshCiphers();
    public void set_SshCiphers(List`1<string> value);
    internal bool IsSetSshCiphers();
    public List`1<string> get_SshHostKeyAlgorithms();
    public void set_SshHostKeyAlgorithms(List`1<string> value);
    internal bool IsSetSshHostKeyAlgorithms();
    public List`1<string> get_SshKexs();
    public void set_SshKexs(List`1<string> value);
    internal bool IsSetSshKexs();
    public List`1<string> get_SshMacs();
    public void set_SshMacs(List`1<string> value);
    internal bool IsSetSshMacs();
    public List`1<string> get_TlsCiphers();
    public void set_TlsCiphers(List`1<string> value);
    internal bool IsSetTlsCiphers();
    public SecurityPolicyResourceType get_Type();
    public void set_Type(SecurityPolicyResourceType value);
    internal bool IsSetType();
}
public class Amazon.Transfer.Model.DescribedServer : object {
    private string _arn;
    private List`1<string> _as2ServiceManagedEgressIpAddresses;
    private string _certificate;
    private Domain _domain;
    private EndpointDetails _endpointDetails;
    private EndpointType _endpointType;
    private string _hostKeyFingerprint;
    private IdentityProviderDetails _identityProviderDetails;
    private IdentityProviderType _identityProviderType;
    private string _loggingRole;
    private string _postAuthenticationLoginBanner;
    private string _preAuthenticationLoginBanner;
    private ProtocolDetails _protocolDetails;
    private List`1<string> _protocols;
    private S3StorageOptions _s3StorageOptions;
    private string _securityPolicyName;
    private string _serverId;
    private State _state;
    private List`1<string> _structuredLogDestinations;
    private List`1<Tag> _tags;
    private Nullable`1<int> _userCount;
    private WorkflowDetails _workflowDetails;
    [AWSPropertyAttribute]
public string Arn { get; public set; }
    public List`1<string> As2ServiceManagedEgressIpAddresses { get; public set; }
    [AWSPropertyAttribute]
public string Certificate { get; public set; }
    public Domain Domain { get; public set; }
    public EndpointDetails EndpointDetails { get; public set; }
    public EndpointType EndpointType { get; public set; }
    public string HostKeyFingerprint { get; public set; }
    public IdentityProviderDetails IdentityProviderDetails { get; public set; }
    public IdentityProviderType IdentityProviderType { get; public set; }
    [AWSPropertyAttribute]
public string LoggingRole { get; public set; }
    [AWSPropertyAttribute]
public string PostAuthenticationLoginBanner { get; public set; }
    [AWSPropertyAttribute]
public string PreAuthenticationLoginBanner { get; public set; }
    public ProtocolDetails ProtocolDetails { get; public set; }
    [AWSPropertyAttribute]
public List`1<string> Protocols { get; public set; }
    public S3StorageOptions S3StorageOptions { get; public set; }
    [AWSPropertyAttribute]
public string SecurityPolicyName { get; public set; }
    [AWSPropertyAttribute]
public string ServerId { get; public set; }
    public State State { get; public set; }
    [AWSPropertyAttribute]
public List`1<string> StructuredLogDestinations { get; public set; }
    [AWSPropertyAttribute]
public List`1<Tag> Tags { get; public set; }
    public Nullable`1<int> UserCount { get; public set; }
    public WorkflowDetails WorkflowDetails { get; public set; }
    public string get_Arn();
    public void set_Arn(string value);
    internal bool IsSetArn();
    public List`1<string> get_As2ServiceManagedEgressIpAddresses();
    public void set_As2ServiceManagedEgressIpAddresses(List`1<string> value);
    internal bool IsSetAs2ServiceManagedEgressIpAddresses();
    public string get_Certificate();
    public void set_Certificate(string value);
    internal bool IsSetCertificate();
    public Domain get_Domain();
    public void set_Domain(Domain value);
    internal bool IsSetDomain();
    public EndpointDetails get_EndpointDetails();
    public void set_EndpointDetails(EndpointDetails value);
    internal bool IsSetEndpointDetails();
    public EndpointType get_EndpointType();
    public void set_EndpointType(EndpointType value);
    internal bool IsSetEndpointType();
    public string get_HostKeyFingerprint();
    public void set_HostKeyFingerprint(string value);
    internal bool IsSetHostKeyFingerprint();
    public IdentityProviderDetails get_IdentityProviderDetails();
    public void set_IdentityProviderDetails(IdentityProviderDetails value);
    internal bool IsSetIdentityProviderDetails();
    public IdentityProviderType get_IdentityProviderType();
    public void set_IdentityProviderType(IdentityProviderType value);
    internal bool IsSetIdentityProviderType();
    public string get_LoggingRole();
    public void set_LoggingRole(string value);
    internal bool IsSetLoggingRole();
    public string get_PostAuthenticationLoginBanner();
    public void set_PostAuthenticationLoginBanner(string value);
    internal bool IsSetPostAuthenticationLoginBanner();
    public string get_PreAuthenticationLoginBanner();
    public void set_PreAuthenticationLoginBanner(string value);
    internal bool IsSetPreAuthenticationLoginBanner();
    public ProtocolDetails get_ProtocolDetails();
    public void set_ProtocolDetails(ProtocolDetails value);
    internal bool IsSetProtocolDetails();
    public List`1<string> get_Protocols();
    public void set_Protocols(List`1<string> value);
    internal bool IsSetProtocols();
    public S3StorageOptions get_S3StorageOptions();
    public void set_S3StorageOptions(S3StorageOptions value);
    internal bool IsSetS3StorageOptions();
    public string get_SecurityPolicyName();
    public void set_SecurityPolicyName(string value);
    internal bool IsSetSecurityPolicyName();
    public string get_ServerId();
    public void set_ServerId(string value);
    internal bool IsSetServerId();
    public State get_State();
    public void set_State(State value);
    internal bool IsSetState();
    public List`1<string> get_StructuredLogDestinations();
    public void set_StructuredLogDestinations(List`1<string> value);
    internal bool IsSetStructuredLogDestinations();
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
    public Nullable`1<int> get_UserCount();
    public void set_UserCount(Nullable`1<int> value);
    internal bool IsSetUserCount();
    public WorkflowDetails get_WorkflowDetails();
    public void set_WorkflowDetails(WorkflowDetails value);
    internal bool IsSetWorkflowDetails();
}
public class Amazon.Transfer.Model.DescribedUser : object {
    private string _arn;
    private string _homeDirectory;
    private List`1<HomeDirectoryMapEntry> _homeDirectoryMappings;
    private HomeDirectoryType _homeDirectoryType;
    private string _policy;
    private PosixProfile _posixProfile;
    private string _role;
    private List`1<SshPublicKey> _sshPublicKeys;
    private List`1<Tag> _tags;
    private string _userName;
    [AWSPropertyAttribute]
public string Arn { get; public set; }
    [AWSPropertyAttribute]
public string HomeDirectory { get; public set; }
    [AWSPropertyAttribute]
public List`1<HomeDirectoryMapEntry> HomeDirectoryMappings { get; public set; }
    public HomeDirectoryType HomeDirectoryType { get; public set; }
    [AWSPropertyAttribute]
public string Policy { get; public set; }
    public PosixProfile PosixProfile { get; public set; }
    [AWSPropertyAttribute]
public string Role { get; public set; }
    [AWSPropertyAttribute]
public List`1<SshPublicKey> SshPublicKeys { get; public set; }
    [AWSPropertyAttribute]
public List`1<Tag> Tags { get; public set; }
    [AWSPropertyAttribute]
public string UserName { get; public set; }
    public string get_Arn();
    public void set_Arn(string value);
    internal bool IsSetArn();
    public string get_HomeDirectory();
    public void set_HomeDirectory(string value);
    internal bool IsSetHomeDirectory();
    public List`1<HomeDirectoryMapEntry> get_HomeDirectoryMappings();
    public void set_HomeDirectoryMappings(List`1<HomeDirectoryMapEntry> value);
    internal bool IsSetHomeDirectoryMappings();
    public HomeDirectoryType get_HomeDirectoryType();
    public void set_HomeDirectoryType(HomeDirectoryType value);
    internal bool IsSetHomeDirectoryType();
    public string get_Policy();
    public void set_Policy(string value);
    internal bool IsSetPolicy();
    public PosixProfile get_PosixProfile();
    public void set_PosixProfile(PosixProfile value);
    internal bool IsSetPosixProfile();
    public string get_Role();
    public void set_Role(string value);
    internal bool IsSetRole();
    public List`1<SshPublicKey> get_SshPublicKeys();
    public void set_SshPublicKeys(List`1<SshPublicKey> value);
    internal bool IsSetSshPublicKeys();
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
    public string get_UserName();
    public void set_UserName(string value);
    internal bool IsSetUserName();
}
public class Amazon.Transfer.Model.DescribedWorkflow : object {
    private string _arn;
    private string _description;
    private List`1<WorkflowStep> _onExceptionSteps;
    private List`1<WorkflowStep> _steps;
    private List`1<Tag> _tags;
    private string _workflowId;
    [AWSPropertyAttribute]
public string Arn { get; public set; }
    [AWSPropertyAttribute]
public string Description { get; public set; }
    [AWSPropertyAttribute]
public List`1<WorkflowStep> OnExceptionSteps { get; public set; }
    [AWSPropertyAttribute]
public List`1<WorkflowStep> Steps { get; public set; }
    [AWSPropertyAttribute]
public List`1<Tag> Tags { get; public set; }
    [AWSPropertyAttribute]
public string WorkflowId { get; public set; }
    public string get_Arn();
    public void set_Arn(string value);
    internal bool IsSetArn();
    public string get_Description();
    public void set_Description(string value);
    internal bool IsSetDescription();
    public List`1<WorkflowStep> get_OnExceptionSteps();
    public void set_OnExceptionSteps(List`1<WorkflowStep> value);
    internal bool IsSetOnExceptionSteps();
    public List`1<WorkflowStep> get_Steps();
    public void set_Steps(List`1<WorkflowStep> value);
    internal bool IsSetSteps();
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
    public string get_WorkflowId();
    public void set_WorkflowId(string value);
    internal bool IsSetWorkflowId();
}
public class Amazon.Transfer.Model.DescribeExecutionRequest : AmazonTransferRequest {
    private string _executionId;
    private string _workflowId;
    [AWSPropertyAttribute]
public string ExecutionId { get; public set; }
    [AWSPropertyAttribute]
public string WorkflowId { get; public set; }
    public string get_ExecutionId();
    public void set_ExecutionId(string value);
    internal bool IsSetExecutionId();
    public string get_WorkflowId();
    public void set_WorkflowId(string value);
    internal bool IsSetWorkflowId();
}
public class Amazon.Transfer.Model.DescribeExecutionResponse : AmazonWebServiceResponse {
    private DescribedExecution _execution;
    private string _workflowId;
    [AWSPropertyAttribute]
public DescribedExecution Execution { get; public set; }
    [AWSPropertyAttribute]
public string WorkflowId { get; public set; }
    public DescribedExecution get_Execution();
    public void set_Execution(DescribedExecution value);
    internal bool IsSetExecution();
    public string get_WorkflowId();
    public void set_WorkflowId(string value);
    internal bool IsSetWorkflowId();
}
public class Amazon.Transfer.Model.DescribeHostKeyRequest : AmazonTransferRequest {
    private string _hostKeyId;
    private string _serverId;
    [AWSPropertyAttribute]
public string HostKeyId { get; public set; }
    [AWSPropertyAttribute]
public string ServerId { get; public set; }
    public string get_HostKeyId();
    public void set_HostKeyId(string value);
    internal bool IsSetHostKeyId();
    public string get_ServerId();
    public void set_ServerId(string value);
    internal bool IsSetServerId();
}
public class Amazon.Transfer.Model.DescribeHostKeyResponse : AmazonWebServiceResponse {
    private DescribedHostKey _hostKey;
    [AWSPropertyAttribute]
public DescribedHostKey HostKey { get; public set; }
    public DescribedHostKey get_HostKey();
    public void set_HostKey(DescribedHostKey value);
    internal bool IsSetHostKey();
}
public class Amazon.Transfer.Model.DescribeProfileRequest : AmazonTransferRequest {
    private string _profileId;
    [AWSPropertyAttribute]
public string ProfileId { get; public set; }
    public string get_ProfileId();
    public void set_ProfileId(string value);
    internal bool IsSetProfileId();
}
public class Amazon.Transfer.Model.DescribeProfileResponse : AmazonWebServiceResponse {
    private DescribedProfile _profile;
    [AWSPropertyAttribute]
public DescribedProfile Profile { get; public set; }
    public DescribedProfile get_Profile();
    public void set_Profile(DescribedProfile value);
    internal bool IsSetProfile();
}
public class Amazon.Transfer.Model.DescribeSecurityPolicyRequest : AmazonTransferRequest {
    private string _securityPolicyName;
    [AWSPropertyAttribute]
public string SecurityPolicyName { get; public set; }
    public string get_SecurityPolicyName();
    public void set_SecurityPolicyName(string value);
    internal bool IsSetSecurityPolicyName();
}
public class Amazon.Transfer.Model.DescribeSecurityPolicyResponse : AmazonWebServiceResponse {
    private DescribedSecurityPolicy _securityPolicy;
    [AWSPropertyAttribute]
public DescribedSecurityPolicy SecurityPolicy { get; public set; }
    public DescribedSecurityPolicy get_SecurityPolicy();
    public void set_SecurityPolicy(DescribedSecurityPolicy value);
    internal bool IsSetSecurityPolicy();
}
public class Amazon.Transfer.Model.DescribeServerRequest : AmazonTransferRequest {
    private string _serverId;
    [AWSPropertyAttribute]
public string ServerId { get; public set; }
    public string get_ServerId();
    public void set_ServerId(string value);
    internal bool IsSetServerId();
}
public class Amazon.Transfer.Model.DescribeServerResponse : AmazonWebServiceResponse {
    private DescribedServer _server;
    [AWSPropertyAttribute]
public DescribedServer Server { get; public set; }
    public DescribedServer get_Server();
    public void set_Server(DescribedServer value);
    internal bool IsSetServer();
}
public class Amazon.Transfer.Model.DescribeUserRequest : AmazonTransferRequest {
    private string _serverId;
    private string _userName;
    [AWSPropertyAttribute]
public string ServerId { get; public set; }
    [AWSPropertyAttribute]
public string UserName { get; public set; }
    public string get_ServerId();
    public void set_ServerId(string value);
    internal bool IsSetServerId();
    public string get_UserName();
    public void set_UserName(string value);
    internal bool IsSetUserName();
}
public class Amazon.Transfer.Model.DescribeUserResponse : AmazonWebServiceResponse {
    private string _serverId;
    private DescribedUser _user;
    [AWSPropertyAttribute]
public string ServerId { get; public set; }
    [AWSPropertyAttribute]
public DescribedUser User { get; public set; }
    public string get_ServerId();
    public void set_ServerId(string value);
    internal bool IsSetServerId();
    public DescribedUser get_User();
    public void set_User(DescribedUser value);
    internal bool IsSetUser();
}
public class Amazon.Transfer.Model.DescribeWorkflowRequest : AmazonTransferRequest {
    private string _workflowId;
    [AWSPropertyAttribute]
public string WorkflowId { get; public set; }
    public string get_WorkflowId();
    public void set_WorkflowId(string value);
    internal bool IsSetWorkflowId();
}
public class Amazon.Transfer.Model.DescribeWorkflowResponse : AmazonWebServiceResponse {
    private DescribedWorkflow _workflow;
    [AWSPropertyAttribute]
public DescribedWorkflow Workflow { get; public set; }
    public DescribedWorkflow get_Workflow();
    public void set_Workflow(DescribedWorkflow value);
    internal bool IsSetWorkflow();
}
public class Amazon.Transfer.Model.EfsFileLocation : object {
    private string _fileSystemId;
    private string _path;
    [AWSPropertyAttribute]
public string FileSystemId { get; public set; }
    [AWSPropertyAttribute]
public string Path { get; public set; }
    public string get_FileSystemId();
    public void set_FileSystemId(string value);
    internal bool IsSetFileSystemId();
    public string get_Path();
    public void set_Path(string value);
    internal bool IsSetPath();
}
public class Amazon.Transfer.Model.EndpointDetails : object {
    private List`1<string> _addressAllocationIds;
    private List`1<string> _securityGroupIds;
    private List`1<string> _subnetIds;
    private string _vpcEndpointId;
    private string _vpcId;
    public List`1<string> AddressAllocationIds { get; public set; }
    public List`1<string> SecurityGroupIds { get; public set; }
    public List`1<string> SubnetIds { get; public set; }
    [AWSPropertyAttribute]
public string VpcEndpointId { get; public set; }
    public string VpcId { get; public set; }
    public List`1<string> get_AddressAllocationIds();
    public void set_AddressAllocationIds(List`1<string> value);
    internal bool IsSetAddressAllocationIds();
    public List`1<string> get_SecurityGroupIds();
    public void set_SecurityGroupIds(List`1<string> value);
    internal bool IsSetSecurityGroupIds();
    public List`1<string> get_SubnetIds();
    public void set_SubnetIds(List`1<string> value);
    internal bool IsSetSubnetIds();
    public string get_VpcEndpointId();
    public void set_VpcEndpointId(string value);
    internal bool IsSetVpcEndpointId();
    public string get_VpcId();
    public void set_VpcId(string value);
    internal bool IsSetVpcId();
}
public class Amazon.Transfer.Model.ExecutionError : object {
    private string _message;
    private ExecutionErrorType _type;
    [AWSPropertyAttribute]
public string Message { get; public set; }
    [AWSPropertyAttribute]
public ExecutionErrorType Type { get; public set; }
    public string get_Message();
    public void set_Message(string value);
    internal bool IsSetMessage();
    public ExecutionErrorType get_Type();
    public void set_Type(ExecutionErrorType value);
    internal bool IsSetType();
}
public class Amazon.Transfer.Model.ExecutionResults : object {
    private List`1<ExecutionStepResult> _onExceptionSteps;
    private List`1<ExecutionStepResult> _steps;
    [AWSPropertyAttribute]
public List`1<ExecutionStepResult> OnExceptionSteps { get; public set; }
    [AWSPropertyAttribute]
public List`1<ExecutionStepResult> Steps { get; public set; }
    public List`1<ExecutionStepResult> get_OnExceptionSteps();
    public void set_OnExceptionSteps(List`1<ExecutionStepResult> value);
    internal bool IsSetOnExceptionSteps();
    public List`1<ExecutionStepResult> get_Steps();
    public void set_Steps(List`1<ExecutionStepResult> value);
    internal bool IsSetSteps();
}
public class Amazon.Transfer.Model.ExecutionStepResult : object {
    private ExecutionError _error;
    private string _outputs;
    private WorkflowStepType _stepType;
    public ExecutionError Error { get; public set; }
    [AWSPropertyAttribute]
public string Outputs { get; public set; }
    public WorkflowStepType StepType { get; public set; }
    public ExecutionError get_Error();
    public void set_Error(ExecutionError value);
    internal bool IsSetError();
    public string get_Outputs();
    public void set_Outputs(string value);
    internal bool IsSetOutputs();
    public WorkflowStepType get_StepType();
    public void set_StepType(WorkflowStepType value);
    internal bool IsSetStepType();
}
public class Amazon.Transfer.Model.FileLocation : object {
    private EfsFileLocation _efsFileLocation;
    private S3FileLocation _s3FileLocation;
    public EfsFileLocation EfsFileLocation { get; public set; }
    public S3FileLocation S3FileLocation { get; public set; }
    public EfsFileLocation get_EfsFileLocation();
    public void set_EfsFileLocation(EfsFileLocation value);
    internal bool IsSetEfsFileLocation();
    public S3FileLocation get_S3FileLocation();
    public void set_S3FileLocation(S3FileLocation value);
    internal bool IsSetS3FileLocation();
}
public class Amazon.Transfer.Model.HomeDirectoryMapEntry : object {
    private string _entry;
    private string _target;
    private MapType _type;
    [AWSPropertyAttribute]
public string Entry { get; public set; }
    [AWSPropertyAttribute]
public string Target { get; public set; }
    public MapType Type { get; public set; }
    public string get_Entry();
    public void set_Entry(string value);
    internal bool IsSetEntry();
    public string get_Target();
    public void set_Target(string value);
    internal bool IsSetTarget();
    public MapType get_Type();
    public void set_Type(MapType value);
    internal bool IsSetType();
}
public class Amazon.Transfer.Model.IdentityProviderDetails : object {
    private string _directoryId;
    private string _function;
    private string _invocationRole;
    private SftpAuthenticationMethods _sftpAuthenticationMethods;
    private string _url;
    [AWSPropertyAttribute]
public string DirectoryId { get; public set; }
    [AWSPropertyAttribute]
public string Function { get; public set; }
    [AWSPropertyAttribute]
public string InvocationRole { get; public set; }
    public SftpAuthenticationMethods SftpAuthenticationMethods { get; public set; }
    [AWSPropertyAttribute]
public string Url { get; public set; }
    public string get_DirectoryId();
    public void set_DirectoryId(string value);
    internal bool IsSetDirectoryId();
    public string get_Function();
    public void set_Function(string value);
    internal bool IsSetFunction();
    public string get_InvocationRole();
    public void set_InvocationRole(string value);
    internal bool IsSetInvocationRole();
    public SftpAuthenticationMethods get_SftpAuthenticationMethods();
    public void set_SftpAuthenticationMethods(SftpAuthenticationMethods value);
    internal bool IsSetSftpAuthenticationMethods();
    public string get_Url();
    public void set_Url(string value);
    internal bool IsSetUrl();
}
public interface Amazon.Transfer.Model.IListAccessesPaginator {
    public IPaginatedEnumerable`1<ListAccessesResponse> Responses { get; }
    public IPaginatedEnumerable`1<ListedAccess> Accesses { get; }
    public abstract virtual IPaginatedEnumerable`1<ListAccessesResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<ListedAccess> get_Accesses();
}
public interface Amazon.Transfer.Model.IListAgreementsPaginator {
    public IPaginatedEnumerable`1<ListAgreementsResponse> Responses { get; }
    public IPaginatedEnumerable`1<ListedAgreement> Agreements { get; }
    public abstract virtual IPaginatedEnumerable`1<ListAgreementsResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<ListedAgreement> get_Agreements();
}
public interface Amazon.Transfer.Model.IListCertificatesPaginator {
    public IPaginatedEnumerable`1<ListCertificatesResponse> Responses { get; }
    public IPaginatedEnumerable`1<ListedCertificate> Certificates { get; }
    public abstract virtual IPaginatedEnumerable`1<ListCertificatesResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<ListedCertificate> get_Certificates();
}
public interface Amazon.Transfer.Model.IListConnectorsPaginator {
    public IPaginatedEnumerable`1<ListConnectorsResponse> Responses { get; }
    public IPaginatedEnumerable`1<ListedConnector> Connectors { get; }
    public abstract virtual IPaginatedEnumerable`1<ListConnectorsResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<ListedConnector> get_Connectors();
}
public interface Amazon.Transfer.Model.IListExecutionsPaginator {
    public IPaginatedEnumerable`1<ListExecutionsResponse> Responses { get; }
    public IPaginatedEnumerable`1<ListedExecution> Executions { get; }
    public abstract virtual IPaginatedEnumerable`1<ListExecutionsResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<ListedExecution> get_Executions();
}
public interface Amazon.Transfer.Model.IListProfilesPaginator {
    public IPaginatedEnumerable`1<ListProfilesResponse> Responses { get; }
    public IPaginatedEnumerable`1<ListedProfile> Profiles { get; }
    public abstract virtual IPaginatedEnumerable`1<ListProfilesResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<ListedProfile> get_Profiles();
}
public interface Amazon.Transfer.Model.IListSecurityPoliciesPaginator {
    public IPaginatedEnumerable`1<ListSecurityPoliciesResponse> Responses { get; }
    public IPaginatedEnumerable`1<string> SecurityPolicyNames { get; }
    public abstract virtual IPaginatedEnumerable`1<ListSecurityPoliciesResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<string> get_SecurityPolicyNames();
}
public interface Amazon.Transfer.Model.IListServersPaginator {
    public IPaginatedEnumerable`1<ListServersResponse> Responses { get; }
    public IPaginatedEnumerable`1<ListedServer> Servers { get; }
    public abstract virtual IPaginatedEnumerable`1<ListServersResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<ListedServer> get_Servers();
}
public interface Amazon.Transfer.Model.IListTagsForResourcePaginator {
    public IPaginatedEnumerable`1<ListTagsForResourceResponse> Responses { get; }
    public IPaginatedEnumerable`1<Tag> Tags { get; }
    public abstract virtual IPaginatedEnumerable`1<ListTagsForResourceResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<Tag> get_Tags();
}
public interface Amazon.Transfer.Model.IListUsersPaginator {
    public IPaginatedEnumerable`1<ListUsersResponse> Responses { get; }
    public IPaginatedEnumerable`1<ListedUser> Users { get; }
    public abstract virtual IPaginatedEnumerable`1<ListUsersResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<ListedUser> get_Users();
}
public interface Amazon.Transfer.Model.IListWorkflowsPaginator {
    public IPaginatedEnumerable`1<ListWorkflowsResponse> Responses { get; }
    public IPaginatedEnumerable`1<ListedWorkflow> Workflows { get; }
    public abstract virtual IPaginatedEnumerable`1<ListWorkflowsResponse> get_Responses();
    public abstract virtual IPaginatedEnumerable`1<ListedWorkflow> get_Workflows();
}
public class Amazon.Transfer.Model.ImportCertificateRequest : AmazonTransferRequest {
    private Nullable`1<DateTime> _activeDate;
    private string _certificate;
    private string _certificateChain;
    private string _description;
    private Nullable`1<DateTime> _inactiveDate;
    private string _privateKey;
    private List`1<Tag> _tags;
    private CertificateUsageType _usage;
    public Nullable`1<DateTime> ActiveDate { get; public set; }
    [AWSPropertyAttribute]
public string Certificate { get; public set; }
    [AWSPropertyAttribute]
public string CertificateChain { get; public set; }
    [AWSPropertyAttribute]
public string Description { get; public set; }
    public Nullable`1<DateTime> InactiveDate { get; public set; }
    [AWSPropertyAttribute]
public string PrivateKey { get; public set; }
    [AWSPropertyAttribute]
public List`1<Tag> Tags { get; public set; }
    [AWSPropertyAttribute]
public CertificateUsageType Usage { get; public set; }
    public Nullable`1<DateTime> get_ActiveDate();
    public void set_ActiveDate(Nullable`1<DateTime> value);
    internal bool IsSetActiveDate();
    public string get_Certificate();
    public void set_Certificate(string value);
    internal bool IsSetCertificate();
    public string get_CertificateChain();
    public void set_CertificateChain(string value);
    internal bool IsSetCertificateChain();
    public string get_Description();
    public void set_Description(string value);
    internal bool IsSetDescription();
    public Nullable`1<DateTime> get_InactiveDate();
    public void set_InactiveDate(Nullable`1<DateTime> value);
    internal bool IsSetInactiveDate();
    public string get_PrivateKey();
    public void set_PrivateKey(string value);
    internal bool IsSetPrivateKey();
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
    public CertificateUsageType get_Usage();
    public void set_Usage(CertificateUsageType value);
    internal bool IsSetUsage();
}
public class Amazon.Transfer.Model.ImportCertificateResponse : AmazonWebServiceResponse {
    private string _certificateId;
    [AWSPropertyAttribute]
public string CertificateId { get; public set; }
    public string get_CertificateId();
    public void set_CertificateId(string value);
    internal bool IsSetCertificateId();
}
public class Amazon.Transfer.Model.ImportHostKeyRequest : AmazonTransferRequest {
    private string _description;
    private string _hostKeyBody;
    private string _serverId;
    private List`1<Tag> _tags;
    [AWSPropertyAttribute]
public string Description { get; public set; }
    [AWSPropertyAttribute]
public string HostKeyBody { get; public set; }
    [AWSPropertyAttribute]
public string ServerId { get; public set; }
    [AWSPropertyAttribute]
public List`1<Tag> Tags { get; public set; }
    public string get_Description();
    public void set_Description(string value);
    internal bool IsSetDescription();
    public string get_HostKeyBody();
    public void set_HostKeyBody(string value);
    internal bool IsSetHostKeyBody();
    public string get_ServerId();
    public void set_ServerId(string value);
    internal bool IsSetServerId();
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
}
public class Amazon.Transfer.Model.ImportHostKeyResponse : AmazonWebServiceResponse {
    private string _hostKeyId;
    private string _serverId;
    [AWSPropertyAttribute]
public string HostKeyId { get; public set; }
    [AWSPropertyAttribute]
public string ServerId { get; public set; }
    public string get_HostKeyId();
    public void set_HostKeyId(string value);
    internal bool IsSetHostKeyId();
    public string get_ServerId();
    public void set_ServerId(string value);
    internal bool IsSetServerId();
}
public class Amazon.Transfer.Model.ImportSshPublicKeyRequest : AmazonTransferRequest {
    private string _serverId;
    private string _sshPublicKeyBody;
    private string _userName;
    [AWSPropertyAttribute]
public string ServerId { get; public set; }
    [AWSPropertyAttribute]
public string SshPublicKeyBody { get; public set; }
    [AWSPropertyAttribute]
public string UserName { get; public set; }
    public string get_ServerId();
    public void set_ServerId(string value);
    internal bool IsSetServerId();
    public string get_SshPublicKeyBody();
    public void set_SshPublicKeyBody(string value);
    internal bool IsSetSshPublicKeyBody();
    public string get_UserName();
    public void set_UserName(string value);
    internal bool IsSetUserName();
}
public class Amazon.Transfer.Model.ImportSshPublicKeyResponse : AmazonWebServiceResponse {
    private string _serverId;
    private string _sshPublicKeyId;
    private string _userName;
    [AWSPropertyAttribute]
public string ServerId { get; public set; }
    [AWSPropertyAttribute]
public string SshPublicKeyId { get; public set; }
    [AWSPropertyAttribute]
public string UserName { get; public set; }
    public string get_ServerId();
    public void set_ServerId(string value);
    internal bool IsSetServerId();
    public string get_SshPublicKeyId();
    public void set_SshPublicKeyId(string value);
    internal bool IsSetSshPublicKeyId();
    public string get_UserName();
    public void set_UserName(string value);
    internal bool IsSetUserName();
}
public class Amazon.Transfer.Model.InputFileLocation : object {
    private EfsFileLocation _efsFileLocation;
    private S3InputFileLocation _s3FileLocation;
    public EfsFileLocation EfsFileLocation { get; public set; }
    public S3InputFileLocation S3FileLocation { get; public set; }
    public EfsFileLocation get_EfsFileLocation();
    public void set_EfsFileLocation(EfsFileLocation value);
    internal bool IsSetEfsFileLocation();
    public S3InputFileLocation get_S3FileLocation();
    public void set_S3FileLocation(S3InputFileLocation value);
    internal bool IsSetS3FileLocation();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.AccessDeniedExceptionUnmarshaller : object {
    private static AccessDeniedExceptionUnmarshaller _instance;
    public static AccessDeniedExceptionUnmarshaller Instance { get; }
    private static AccessDeniedExceptionUnmarshaller();
    public sealed virtual AccessDeniedException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual AccessDeniedException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static AccessDeniedExceptionUnmarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.As2ConnectorConfigMarshaller : object {
    public static As2ConnectorConfigMarshaller Instance;
    private static As2ConnectorConfigMarshaller();
    public sealed virtual void Marshall(As2ConnectorConfig requestObject, JsonMarshallerContext context);
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.As2ConnectorConfigUnmarshaller : object {
    private static As2ConnectorConfigUnmarshaller _instance;
    public static As2ConnectorConfigUnmarshaller Instance { get; }
    private static As2ConnectorConfigUnmarshaller();
    private sealed virtual override As2ConnectorConfig Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.Transfer.Model.As2ConnectorConfig,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual As2ConnectorConfig Unmarshall(JsonUnmarshallerContext context);
    public static As2ConnectorConfigUnmarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.ConflictExceptionUnmarshaller : object {
    private static ConflictExceptionUnmarshaller _instance;
    public static ConflictExceptionUnmarshaller Instance { get; }
    private static ConflictExceptionUnmarshaller();
    public sealed virtual ConflictException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual ConflictException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static ConflictExceptionUnmarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.CopyStepDetailsMarshaller : object {
    public static CopyStepDetailsMarshaller Instance;
    private static CopyStepDetailsMarshaller();
    public sealed virtual void Marshall(CopyStepDetails requestObject, JsonMarshallerContext context);
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.CopyStepDetailsUnmarshaller : object {
    private static CopyStepDetailsUnmarshaller _instance;
    public static CopyStepDetailsUnmarshaller Instance { get; }
    private static CopyStepDetailsUnmarshaller();
    private sealed virtual override CopyStepDetails Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.Transfer.Model.CopyStepDetails,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual CopyStepDetails Unmarshall(JsonUnmarshallerContext context);
    public static CopyStepDetailsUnmarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.CreateAccessRequestMarshaller : object {
    private static CreateAccessRequestMarshaller _instance;
    public static CreateAccessRequestMarshaller Instance { get; }
    private static CreateAccessRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(CreateAccessRequest publicRequest);
    internal static CreateAccessRequestMarshaller GetInstance();
    public static CreateAccessRequestMarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.CreateAccessResponseUnmarshaller : JsonResponseUnmarshaller {
    private static CreateAccessResponseUnmarshaller _instance;
    public static CreateAccessResponseUnmarshaller Instance { get; }
    private static CreateAccessResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static CreateAccessResponseUnmarshaller GetInstance();
    public static CreateAccessResponseUnmarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.CreateAgreementRequestMarshaller : object {
    private static CreateAgreementRequestMarshaller _instance;
    public static CreateAgreementRequestMarshaller Instance { get; }
    private static CreateAgreementRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(CreateAgreementRequest publicRequest);
    internal static CreateAgreementRequestMarshaller GetInstance();
    public static CreateAgreementRequestMarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.CreateAgreementResponseUnmarshaller : JsonResponseUnmarshaller {
    private static CreateAgreementResponseUnmarshaller _instance;
    public static CreateAgreementResponseUnmarshaller Instance { get; }
    private static CreateAgreementResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static CreateAgreementResponseUnmarshaller GetInstance();
    public static CreateAgreementResponseUnmarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.CreateConnectorRequestMarshaller : object {
    private static CreateConnectorRequestMarshaller _instance;
    public static CreateConnectorRequestMarshaller Instance { get; }
    private static CreateConnectorRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(CreateConnectorRequest publicRequest);
    internal static CreateConnectorRequestMarshaller GetInstance();
    public static CreateConnectorRequestMarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.CreateConnectorResponseUnmarshaller : JsonResponseUnmarshaller {
    private static CreateConnectorResponseUnmarshaller _instance;
    public static CreateConnectorResponseUnmarshaller Instance { get; }
    private static CreateConnectorResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static CreateConnectorResponseUnmarshaller GetInstance();
    public static CreateConnectorResponseUnmarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.CreateProfileRequestMarshaller : object {
    private static CreateProfileRequestMarshaller _instance;
    public static CreateProfileRequestMarshaller Instance { get; }
    private static CreateProfileRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(CreateProfileRequest publicRequest);
    internal static CreateProfileRequestMarshaller GetInstance();
    public static CreateProfileRequestMarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.CreateProfileResponseUnmarshaller : JsonResponseUnmarshaller {
    private static CreateProfileResponseUnmarshaller _instance;
    public static CreateProfileResponseUnmarshaller Instance { get; }
    private static CreateProfileResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static CreateProfileResponseUnmarshaller GetInstance();
    public static CreateProfileResponseUnmarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.CreateServerRequestMarshaller : object {
    private static CreateServerRequestMarshaller _instance;
    public static CreateServerRequestMarshaller Instance { get; }
    private static CreateServerRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(CreateServerRequest publicRequest);
    internal static CreateServerRequestMarshaller GetInstance();
    public static CreateServerRequestMarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.CreateServerResponseUnmarshaller : JsonResponseUnmarshaller {
    private static CreateServerResponseUnmarshaller _instance;
    public static CreateServerResponseUnmarshaller Instance { get; }
    private static CreateServerResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static CreateServerResponseUnmarshaller GetInstance();
    public static CreateServerResponseUnmarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.CreateUserRequestMarshaller : object {
    private static CreateUserRequestMarshaller _instance;
    public static CreateUserRequestMarshaller Instance { get; }
    private static CreateUserRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(CreateUserRequest publicRequest);
    internal static CreateUserRequestMarshaller GetInstance();
    public static CreateUserRequestMarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.CreateUserResponseUnmarshaller : JsonResponseUnmarshaller {
    private static CreateUserResponseUnmarshaller _instance;
    public static CreateUserResponseUnmarshaller Instance { get; }
    private static CreateUserResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static CreateUserResponseUnmarshaller GetInstance();
    public static CreateUserResponseUnmarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.CreateWorkflowRequestMarshaller : object {
    private static CreateWorkflowRequestMarshaller _instance;
    public static CreateWorkflowRequestMarshaller Instance { get; }
    private static CreateWorkflowRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(CreateWorkflowRequest publicRequest);
    internal static CreateWorkflowRequestMarshaller GetInstance();
    public static CreateWorkflowRequestMarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.CreateWorkflowResponseUnmarshaller : JsonResponseUnmarshaller {
    private static CreateWorkflowResponseUnmarshaller _instance;
    public static CreateWorkflowResponseUnmarshaller Instance { get; }
    private static CreateWorkflowResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static CreateWorkflowResponseUnmarshaller GetInstance();
    public static CreateWorkflowResponseUnmarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.CustomStepDetailsMarshaller : object {
    public static CustomStepDetailsMarshaller Instance;
    private static CustomStepDetailsMarshaller();
    public sealed virtual void Marshall(CustomStepDetails requestObject, JsonMarshallerContext context);
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.CustomStepDetailsUnmarshaller : object {
    private static CustomStepDetailsUnmarshaller _instance;
    public static CustomStepDetailsUnmarshaller Instance { get; }
    private static CustomStepDetailsUnmarshaller();
    private sealed virtual override CustomStepDetails Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.Transfer.Model.CustomStepDetails,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual CustomStepDetails Unmarshall(JsonUnmarshallerContext context);
    public static CustomStepDetailsUnmarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.DecryptStepDetailsMarshaller : object {
    public static DecryptStepDetailsMarshaller Instance;
    private static DecryptStepDetailsMarshaller();
    public sealed virtual void Marshall(DecryptStepDetails requestObject, JsonMarshallerContext context);
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.DecryptStepDetailsUnmarshaller : object {
    private static DecryptStepDetailsUnmarshaller _instance;
    public static DecryptStepDetailsUnmarshaller Instance { get; }
    private static DecryptStepDetailsUnmarshaller();
    private sealed virtual override DecryptStepDetails Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.Transfer.Model.DecryptStepDetails,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual DecryptStepDetails Unmarshall(JsonUnmarshallerContext context);
    public static DecryptStepDetailsUnmarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.DeleteAccessRequestMarshaller : object {
    private static DeleteAccessRequestMarshaller _instance;
    public static DeleteAccessRequestMarshaller Instance { get; }
    private static DeleteAccessRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeleteAccessRequest publicRequest);
    internal static DeleteAccessRequestMarshaller GetInstance();
    public static DeleteAccessRequestMarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.DeleteAccessResponseUnmarshaller : JsonResponseUnmarshaller {
    private static DeleteAccessResponseUnmarshaller _instance;
    public static DeleteAccessResponseUnmarshaller Instance { get; }
    private static DeleteAccessResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DeleteAccessResponseUnmarshaller GetInstance();
    public static DeleteAccessResponseUnmarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.DeleteAgreementRequestMarshaller : object {
    private static DeleteAgreementRequestMarshaller _instance;
    public static DeleteAgreementRequestMarshaller Instance { get; }
    private static DeleteAgreementRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeleteAgreementRequest publicRequest);
    internal static DeleteAgreementRequestMarshaller GetInstance();
    public static DeleteAgreementRequestMarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.DeleteAgreementResponseUnmarshaller : JsonResponseUnmarshaller {
    private static DeleteAgreementResponseUnmarshaller _instance;
    public static DeleteAgreementResponseUnmarshaller Instance { get; }
    private static DeleteAgreementResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DeleteAgreementResponseUnmarshaller GetInstance();
    public static DeleteAgreementResponseUnmarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.DeleteCertificateRequestMarshaller : object {
    private static DeleteCertificateRequestMarshaller _instance;
    public static DeleteCertificateRequestMarshaller Instance { get; }
    private static DeleteCertificateRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeleteCertificateRequest publicRequest);
    internal static DeleteCertificateRequestMarshaller GetInstance();
    public static DeleteCertificateRequestMarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.DeleteCertificateResponseUnmarshaller : JsonResponseUnmarshaller {
    private static DeleteCertificateResponseUnmarshaller _instance;
    public static DeleteCertificateResponseUnmarshaller Instance { get; }
    private static DeleteCertificateResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DeleteCertificateResponseUnmarshaller GetInstance();
    public static DeleteCertificateResponseUnmarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.DeleteConnectorRequestMarshaller : object {
    private static DeleteConnectorRequestMarshaller _instance;
    public static DeleteConnectorRequestMarshaller Instance { get; }
    private static DeleteConnectorRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeleteConnectorRequest publicRequest);
    internal static DeleteConnectorRequestMarshaller GetInstance();
    public static DeleteConnectorRequestMarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.DeleteConnectorResponseUnmarshaller : JsonResponseUnmarshaller {
    private static DeleteConnectorResponseUnmarshaller _instance;
    public static DeleteConnectorResponseUnmarshaller Instance { get; }
    private static DeleteConnectorResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DeleteConnectorResponseUnmarshaller GetInstance();
    public static DeleteConnectorResponseUnmarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.DeleteHostKeyRequestMarshaller : object {
    private static DeleteHostKeyRequestMarshaller _instance;
    public static DeleteHostKeyRequestMarshaller Instance { get; }
    private static DeleteHostKeyRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeleteHostKeyRequest publicRequest);
    internal static DeleteHostKeyRequestMarshaller GetInstance();
    public static DeleteHostKeyRequestMarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.DeleteHostKeyResponseUnmarshaller : JsonResponseUnmarshaller {
    private static DeleteHostKeyResponseUnmarshaller _instance;
    public static DeleteHostKeyResponseUnmarshaller Instance { get; }
    private static DeleteHostKeyResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DeleteHostKeyResponseUnmarshaller GetInstance();
    public static DeleteHostKeyResponseUnmarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.DeleteProfileRequestMarshaller : object {
    private static DeleteProfileRequestMarshaller _instance;
    public static DeleteProfileRequestMarshaller Instance { get; }
    private static DeleteProfileRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeleteProfileRequest publicRequest);
    internal static DeleteProfileRequestMarshaller GetInstance();
    public static DeleteProfileRequestMarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.DeleteProfileResponseUnmarshaller : JsonResponseUnmarshaller {
    private static DeleteProfileResponseUnmarshaller _instance;
    public static DeleteProfileResponseUnmarshaller Instance { get; }
    private static DeleteProfileResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DeleteProfileResponseUnmarshaller GetInstance();
    public static DeleteProfileResponseUnmarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.DeleteServerRequestMarshaller : object {
    private static DeleteServerRequestMarshaller _instance;
    public static DeleteServerRequestMarshaller Instance { get; }
    private static DeleteServerRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeleteServerRequest publicRequest);
    internal static DeleteServerRequestMarshaller GetInstance();
    public static DeleteServerRequestMarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.DeleteServerResponseUnmarshaller : JsonResponseUnmarshaller {
    private static DeleteServerResponseUnmarshaller _instance;
    public static DeleteServerResponseUnmarshaller Instance { get; }
    private static DeleteServerResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DeleteServerResponseUnmarshaller GetInstance();
    public static DeleteServerResponseUnmarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.DeleteSshPublicKeyRequestMarshaller : object {
    private static DeleteSshPublicKeyRequestMarshaller _instance;
    public static DeleteSshPublicKeyRequestMarshaller Instance { get; }
    private static DeleteSshPublicKeyRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeleteSshPublicKeyRequest publicRequest);
    internal static DeleteSshPublicKeyRequestMarshaller GetInstance();
    public static DeleteSshPublicKeyRequestMarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.DeleteSshPublicKeyResponseUnmarshaller : JsonResponseUnmarshaller {
    private static DeleteSshPublicKeyResponseUnmarshaller _instance;
    public static DeleteSshPublicKeyResponseUnmarshaller Instance { get; }
    private static DeleteSshPublicKeyResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DeleteSshPublicKeyResponseUnmarshaller GetInstance();
    public static DeleteSshPublicKeyResponseUnmarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.DeleteStepDetailsMarshaller : object {
    public static DeleteStepDetailsMarshaller Instance;
    private static DeleteStepDetailsMarshaller();
    public sealed virtual void Marshall(DeleteStepDetails requestObject, JsonMarshallerContext context);
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.DeleteStepDetailsUnmarshaller : object {
    private static DeleteStepDetailsUnmarshaller _instance;
    public static DeleteStepDetailsUnmarshaller Instance { get; }
    private static DeleteStepDetailsUnmarshaller();
    private sealed virtual override DeleteStepDetails Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.Transfer.Model.DeleteStepDetails,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual DeleteStepDetails Unmarshall(JsonUnmarshallerContext context);
    public static DeleteStepDetailsUnmarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.DeleteUserRequestMarshaller : object {
    private static DeleteUserRequestMarshaller _instance;
    public static DeleteUserRequestMarshaller Instance { get; }
    private static DeleteUserRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeleteUserRequest publicRequest);
    internal static DeleteUserRequestMarshaller GetInstance();
    public static DeleteUserRequestMarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.DeleteUserResponseUnmarshaller : JsonResponseUnmarshaller {
    private static DeleteUserResponseUnmarshaller _instance;
    public static DeleteUserResponseUnmarshaller Instance { get; }
    private static DeleteUserResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DeleteUserResponseUnmarshaller GetInstance();
    public static DeleteUserResponseUnmarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.DeleteWorkflowRequestMarshaller : object {
    private static DeleteWorkflowRequestMarshaller _instance;
    public static DeleteWorkflowRequestMarshaller Instance { get; }
    private static DeleteWorkflowRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DeleteWorkflowRequest publicRequest);
    internal static DeleteWorkflowRequestMarshaller GetInstance();
    public static DeleteWorkflowRequestMarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.DeleteWorkflowResponseUnmarshaller : JsonResponseUnmarshaller {
    private static DeleteWorkflowResponseUnmarshaller _instance;
    public static DeleteWorkflowResponseUnmarshaller Instance { get; }
    private static DeleteWorkflowResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DeleteWorkflowResponseUnmarshaller GetInstance();
    public static DeleteWorkflowResponseUnmarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.DescribeAccessRequestMarshaller : object {
    private static DescribeAccessRequestMarshaller _instance;
    public static DescribeAccessRequestMarshaller Instance { get; }
    private static DescribeAccessRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DescribeAccessRequest publicRequest);
    internal static DescribeAccessRequestMarshaller GetInstance();
    public static DescribeAccessRequestMarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.DescribeAccessResponseUnmarshaller : JsonResponseUnmarshaller {
    private static DescribeAccessResponseUnmarshaller _instance;
    public static DescribeAccessResponseUnmarshaller Instance { get; }
    private static DescribeAccessResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DescribeAccessResponseUnmarshaller GetInstance();
    public static DescribeAccessResponseUnmarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.DescribeAgreementRequestMarshaller : object {
    private static DescribeAgreementRequestMarshaller _instance;
    public static DescribeAgreementRequestMarshaller Instance { get; }
    private static DescribeAgreementRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DescribeAgreementRequest publicRequest);
    internal static DescribeAgreementRequestMarshaller GetInstance();
    public static DescribeAgreementRequestMarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.DescribeAgreementResponseUnmarshaller : JsonResponseUnmarshaller {
    private static DescribeAgreementResponseUnmarshaller _instance;
    public static DescribeAgreementResponseUnmarshaller Instance { get; }
    private static DescribeAgreementResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DescribeAgreementResponseUnmarshaller GetInstance();
    public static DescribeAgreementResponseUnmarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.DescribeCertificateRequestMarshaller : object {
    private static DescribeCertificateRequestMarshaller _instance;
    public static DescribeCertificateRequestMarshaller Instance { get; }
    private static DescribeCertificateRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DescribeCertificateRequest publicRequest);
    internal static DescribeCertificateRequestMarshaller GetInstance();
    public static DescribeCertificateRequestMarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.DescribeCertificateResponseUnmarshaller : JsonResponseUnmarshaller {
    private static DescribeCertificateResponseUnmarshaller _instance;
    public static DescribeCertificateResponseUnmarshaller Instance { get; }
    private static DescribeCertificateResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DescribeCertificateResponseUnmarshaller GetInstance();
    public static DescribeCertificateResponseUnmarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.DescribeConnectorRequestMarshaller : object {
    private static DescribeConnectorRequestMarshaller _instance;
    public static DescribeConnectorRequestMarshaller Instance { get; }
    private static DescribeConnectorRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DescribeConnectorRequest publicRequest);
    internal static DescribeConnectorRequestMarshaller GetInstance();
    public static DescribeConnectorRequestMarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.DescribeConnectorResponseUnmarshaller : JsonResponseUnmarshaller {
    private static DescribeConnectorResponseUnmarshaller _instance;
    public static DescribeConnectorResponseUnmarshaller Instance { get; }
    private static DescribeConnectorResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DescribeConnectorResponseUnmarshaller GetInstance();
    public static DescribeConnectorResponseUnmarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.DescribedAccessUnmarshaller : object {
    private static DescribedAccessUnmarshaller _instance;
    public static DescribedAccessUnmarshaller Instance { get; }
    private static DescribedAccessUnmarshaller();
    private sealed virtual override DescribedAccess Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.Transfer.Model.DescribedAccess,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual DescribedAccess Unmarshall(JsonUnmarshallerContext context);
    public static DescribedAccessUnmarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.DescribedAgreementUnmarshaller : object {
    private static DescribedAgreementUnmarshaller _instance;
    public static DescribedAgreementUnmarshaller Instance { get; }
    private static DescribedAgreementUnmarshaller();
    private sealed virtual override DescribedAgreement Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.Transfer.Model.DescribedAgreement,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual DescribedAgreement Unmarshall(JsonUnmarshallerContext context);
    public static DescribedAgreementUnmarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.DescribedCertificateUnmarshaller : object {
    private static DescribedCertificateUnmarshaller _instance;
    public static DescribedCertificateUnmarshaller Instance { get; }
    private static DescribedCertificateUnmarshaller();
    private sealed virtual override DescribedCertificate Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.Transfer.Model.DescribedCertificate,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual DescribedCertificate Unmarshall(JsonUnmarshallerContext context);
    public static DescribedCertificateUnmarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.DescribedConnectorUnmarshaller : object {
    private static DescribedConnectorUnmarshaller _instance;
    public static DescribedConnectorUnmarshaller Instance { get; }
    private static DescribedConnectorUnmarshaller();
    private sealed virtual override DescribedConnector Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.Transfer.Model.DescribedConnector,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual DescribedConnector Unmarshall(JsonUnmarshallerContext context);
    public static DescribedConnectorUnmarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.DescribedExecutionUnmarshaller : object {
    private static DescribedExecutionUnmarshaller _instance;
    public static DescribedExecutionUnmarshaller Instance { get; }
    private static DescribedExecutionUnmarshaller();
    private sealed virtual override DescribedExecution Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.Transfer.Model.DescribedExecution,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual DescribedExecution Unmarshall(JsonUnmarshallerContext context);
    public static DescribedExecutionUnmarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.DescribedHostKeyUnmarshaller : object {
    private static DescribedHostKeyUnmarshaller _instance;
    public static DescribedHostKeyUnmarshaller Instance { get; }
    private static DescribedHostKeyUnmarshaller();
    private sealed virtual override DescribedHostKey Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.Transfer.Model.DescribedHostKey,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual DescribedHostKey Unmarshall(JsonUnmarshallerContext context);
    public static DescribedHostKeyUnmarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.DescribedProfileUnmarshaller : object {
    private static DescribedProfileUnmarshaller _instance;
    public static DescribedProfileUnmarshaller Instance { get; }
    private static DescribedProfileUnmarshaller();
    private sealed virtual override DescribedProfile Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.Transfer.Model.DescribedProfile,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual DescribedProfile Unmarshall(JsonUnmarshallerContext context);
    public static DescribedProfileUnmarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.DescribedSecurityPolicyUnmarshaller : object {
    private static DescribedSecurityPolicyUnmarshaller _instance;
    public static DescribedSecurityPolicyUnmarshaller Instance { get; }
    private static DescribedSecurityPolicyUnmarshaller();
    private sealed virtual override DescribedSecurityPolicy Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.Transfer.Model.DescribedSecurityPolicy,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual DescribedSecurityPolicy Unmarshall(JsonUnmarshallerContext context);
    public static DescribedSecurityPolicyUnmarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.DescribedServerUnmarshaller : object {
    private static DescribedServerUnmarshaller _instance;
    public static DescribedServerUnmarshaller Instance { get; }
    private static DescribedServerUnmarshaller();
    private sealed virtual override DescribedServer Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.Transfer.Model.DescribedServer,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual DescribedServer Unmarshall(JsonUnmarshallerContext context);
    public static DescribedServerUnmarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.DescribedUserUnmarshaller : object {
    private static DescribedUserUnmarshaller _instance;
    public static DescribedUserUnmarshaller Instance { get; }
    private static DescribedUserUnmarshaller();
    private sealed virtual override DescribedUser Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.Transfer.Model.DescribedUser,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual DescribedUser Unmarshall(JsonUnmarshallerContext context);
    public static DescribedUserUnmarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.DescribedWorkflowUnmarshaller : object {
    private static DescribedWorkflowUnmarshaller _instance;
    public static DescribedWorkflowUnmarshaller Instance { get; }
    private static DescribedWorkflowUnmarshaller();
    private sealed virtual override DescribedWorkflow Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.Transfer.Model.DescribedWorkflow,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual DescribedWorkflow Unmarshall(JsonUnmarshallerContext context);
    public static DescribedWorkflowUnmarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.DescribeExecutionRequestMarshaller : object {
    private static DescribeExecutionRequestMarshaller _instance;
    public static DescribeExecutionRequestMarshaller Instance { get; }
    private static DescribeExecutionRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DescribeExecutionRequest publicRequest);
    internal static DescribeExecutionRequestMarshaller GetInstance();
    public static DescribeExecutionRequestMarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.DescribeExecutionResponseUnmarshaller : JsonResponseUnmarshaller {
    private static DescribeExecutionResponseUnmarshaller _instance;
    public static DescribeExecutionResponseUnmarshaller Instance { get; }
    private static DescribeExecutionResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DescribeExecutionResponseUnmarshaller GetInstance();
    public static DescribeExecutionResponseUnmarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.DescribeHostKeyRequestMarshaller : object {
    private static DescribeHostKeyRequestMarshaller _instance;
    public static DescribeHostKeyRequestMarshaller Instance { get; }
    private static DescribeHostKeyRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DescribeHostKeyRequest publicRequest);
    internal static DescribeHostKeyRequestMarshaller GetInstance();
    public static DescribeHostKeyRequestMarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.DescribeHostKeyResponseUnmarshaller : JsonResponseUnmarshaller {
    private static DescribeHostKeyResponseUnmarshaller _instance;
    public static DescribeHostKeyResponseUnmarshaller Instance { get; }
    private static DescribeHostKeyResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DescribeHostKeyResponseUnmarshaller GetInstance();
    public static DescribeHostKeyResponseUnmarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.DescribeProfileRequestMarshaller : object {
    private static DescribeProfileRequestMarshaller _instance;
    public static DescribeProfileRequestMarshaller Instance { get; }
    private static DescribeProfileRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DescribeProfileRequest publicRequest);
    internal static DescribeProfileRequestMarshaller GetInstance();
    public static DescribeProfileRequestMarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.DescribeProfileResponseUnmarshaller : JsonResponseUnmarshaller {
    private static DescribeProfileResponseUnmarshaller _instance;
    public static DescribeProfileResponseUnmarshaller Instance { get; }
    private static DescribeProfileResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DescribeProfileResponseUnmarshaller GetInstance();
    public static DescribeProfileResponseUnmarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.DescribeSecurityPolicyRequestMarshaller : object {
    private static DescribeSecurityPolicyRequestMarshaller _instance;
    public static DescribeSecurityPolicyRequestMarshaller Instance { get; }
    private static DescribeSecurityPolicyRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DescribeSecurityPolicyRequest publicRequest);
    internal static DescribeSecurityPolicyRequestMarshaller GetInstance();
    public static DescribeSecurityPolicyRequestMarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.DescribeSecurityPolicyResponseUnmarshaller : JsonResponseUnmarshaller {
    private static DescribeSecurityPolicyResponseUnmarshaller _instance;
    public static DescribeSecurityPolicyResponseUnmarshaller Instance { get; }
    private static DescribeSecurityPolicyResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DescribeSecurityPolicyResponseUnmarshaller GetInstance();
    public static DescribeSecurityPolicyResponseUnmarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.DescribeServerRequestMarshaller : object {
    private static DescribeServerRequestMarshaller _instance;
    public static DescribeServerRequestMarshaller Instance { get; }
    private static DescribeServerRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DescribeServerRequest publicRequest);
    internal static DescribeServerRequestMarshaller GetInstance();
    public static DescribeServerRequestMarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.DescribeServerResponseUnmarshaller : JsonResponseUnmarshaller {
    private static DescribeServerResponseUnmarshaller _instance;
    public static DescribeServerResponseUnmarshaller Instance { get; }
    private static DescribeServerResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DescribeServerResponseUnmarshaller GetInstance();
    public static DescribeServerResponseUnmarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.DescribeUserRequestMarshaller : object {
    private static DescribeUserRequestMarshaller _instance;
    public static DescribeUserRequestMarshaller Instance { get; }
    private static DescribeUserRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DescribeUserRequest publicRequest);
    internal static DescribeUserRequestMarshaller GetInstance();
    public static DescribeUserRequestMarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.DescribeUserResponseUnmarshaller : JsonResponseUnmarshaller {
    private static DescribeUserResponseUnmarshaller _instance;
    public static DescribeUserResponseUnmarshaller Instance { get; }
    private static DescribeUserResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DescribeUserResponseUnmarshaller GetInstance();
    public static DescribeUserResponseUnmarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.DescribeWorkflowRequestMarshaller : object {
    private static DescribeWorkflowRequestMarshaller _instance;
    public static DescribeWorkflowRequestMarshaller Instance { get; }
    private static DescribeWorkflowRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(DescribeWorkflowRequest publicRequest);
    internal static DescribeWorkflowRequestMarshaller GetInstance();
    public static DescribeWorkflowRequestMarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.DescribeWorkflowResponseUnmarshaller : JsonResponseUnmarshaller {
    private static DescribeWorkflowResponseUnmarshaller _instance;
    public static DescribeWorkflowResponseUnmarshaller Instance { get; }
    private static DescribeWorkflowResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static DescribeWorkflowResponseUnmarshaller GetInstance();
    public static DescribeWorkflowResponseUnmarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.EfsFileLocationMarshaller : object {
    public static EfsFileLocationMarshaller Instance;
    private static EfsFileLocationMarshaller();
    public sealed virtual void Marshall(EfsFileLocation requestObject, JsonMarshallerContext context);
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.EfsFileLocationUnmarshaller : object {
    private static EfsFileLocationUnmarshaller _instance;
    public static EfsFileLocationUnmarshaller Instance { get; }
    private static EfsFileLocationUnmarshaller();
    private sealed virtual override EfsFileLocation Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.Transfer.Model.EfsFileLocation,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual EfsFileLocation Unmarshall(JsonUnmarshallerContext context);
    public static EfsFileLocationUnmarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.EndpointDetailsMarshaller : object {
    public static EndpointDetailsMarshaller Instance;
    private static EndpointDetailsMarshaller();
    public sealed virtual void Marshall(EndpointDetails requestObject, JsonMarshallerContext context);
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.EndpointDetailsUnmarshaller : object {
    private static EndpointDetailsUnmarshaller _instance;
    public static EndpointDetailsUnmarshaller Instance { get; }
    private static EndpointDetailsUnmarshaller();
    private sealed virtual override EndpointDetails Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.Transfer.Model.EndpointDetails,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual EndpointDetails Unmarshall(JsonUnmarshallerContext context);
    public static EndpointDetailsUnmarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.ExecutionErrorUnmarshaller : object {
    private static ExecutionErrorUnmarshaller _instance;
    public static ExecutionErrorUnmarshaller Instance { get; }
    private static ExecutionErrorUnmarshaller();
    private sealed virtual override ExecutionError Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.Transfer.Model.ExecutionError,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ExecutionError Unmarshall(JsonUnmarshallerContext context);
    public static ExecutionErrorUnmarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.ExecutionResultsUnmarshaller : object {
    private static ExecutionResultsUnmarshaller _instance;
    public static ExecutionResultsUnmarshaller Instance { get; }
    private static ExecutionResultsUnmarshaller();
    private sealed virtual override ExecutionResults Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.Transfer.Model.ExecutionResults,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ExecutionResults Unmarshall(JsonUnmarshallerContext context);
    public static ExecutionResultsUnmarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.ExecutionStepResultUnmarshaller : object {
    private static ExecutionStepResultUnmarshaller _instance;
    public static ExecutionStepResultUnmarshaller Instance { get; }
    private static ExecutionStepResultUnmarshaller();
    private sealed virtual override ExecutionStepResult Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.Transfer.Model.ExecutionStepResult,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ExecutionStepResult Unmarshall(JsonUnmarshallerContext context);
    public static ExecutionStepResultUnmarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.FileLocationUnmarshaller : object {
    private static FileLocationUnmarshaller _instance;
    public static FileLocationUnmarshaller Instance { get; }
    private static FileLocationUnmarshaller();
    private sealed virtual override FileLocation Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.Transfer.Model.FileLocation,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual FileLocation Unmarshall(JsonUnmarshallerContext context);
    public static FileLocationUnmarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.HomeDirectoryMapEntryMarshaller : object {
    public static HomeDirectoryMapEntryMarshaller Instance;
    private static HomeDirectoryMapEntryMarshaller();
    public sealed virtual void Marshall(HomeDirectoryMapEntry requestObject, JsonMarshallerContext context);
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.HomeDirectoryMapEntryUnmarshaller : object {
    private static HomeDirectoryMapEntryUnmarshaller _instance;
    public static HomeDirectoryMapEntryUnmarshaller Instance { get; }
    private static HomeDirectoryMapEntryUnmarshaller();
    private sealed virtual override HomeDirectoryMapEntry Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.Transfer.Model.HomeDirectoryMapEntry,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual HomeDirectoryMapEntry Unmarshall(JsonUnmarshallerContext context);
    public static HomeDirectoryMapEntryUnmarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.IdentityProviderDetailsMarshaller : object {
    public static IdentityProviderDetailsMarshaller Instance;
    private static IdentityProviderDetailsMarshaller();
    public sealed virtual void Marshall(IdentityProviderDetails requestObject, JsonMarshallerContext context);
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.IdentityProviderDetailsUnmarshaller : object {
    private static IdentityProviderDetailsUnmarshaller _instance;
    public static IdentityProviderDetailsUnmarshaller Instance { get; }
    private static IdentityProviderDetailsUnmarshaller();
    private sealed virtual override IdentityProviderDetails Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.Transfer.Model.IdentityProviderDetails,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual IdentityProviderDetails Unmarshall(JsonUnmarshallerContext context);
    public static IdentityProviderDetailsUnmarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.ImportCertificateRequestMarshaller : object {
    private static ImportCertificateRequestMarshaller _instance;
    public static ImportCertificateRequestMarshaller Instance { get; }
    private static ImportCertificateRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ImportCertificateRequest publicRequest);
    internal static ImportCertificateRequestMarshaller GetInstance();
    public static ImportCertificateRequestMarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.ImportCertificateResponseUnmarshaller : JsonResponseUnmarshaller {
    private static ImportCertificateResponseUnmarshaller _instance;
    public static ImportCertificateResponseUnmarshaller Instance { get; }
    private static ImportCertificateResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ImportCertificateResponseUnmarshaller GetInstance();
    public static ImportCertificateResponseUnmarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.ImportHostKeyRequestMarshaller : object {
    private static ImportHostKeyRequestMarshaller _instance;
    public static ImportHostKeyRequestMarshaller Instance { get; }
    private static ImportHostKeyRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ImportHostKeyRequest publicRequest);
    internal static ImportHostKeyRequestMarshaller GetInstance();
    public static ImportHostKeyRequestMarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.ImportHostKeyResponseUnmarshaller : JsonResponseUnmarshaller {
    private static ImportHostKeyResponseUnmarshaller _instance;
    public static ImportHostKeyResponseUnmarshaller Instance { get; }
    private static ImportHostKeyResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ImportHostKeyResponseUnmarshaller GetInstance();
    public static ImportHostKeyResponseUnmarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.ImportSshPublicKeyRequestMarshaller : object {
    private static ImportSshPublicKeyRequestMarshaller _instance;
    public static ImportSshPublicKeyRequestMarshaller Instance { get; }
    private static ImportSshPublicKeyRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ImportSshPublicKeyRequest publicRequest);
    internal static ImportSshPublicKeyRequestMarshaller GetInstance();
    public static ImportSshPublicKeyRequestMarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.ImportSshPublicKeyResponseUnmarshaller : JsonResponseUnmarshaller {
    private static ImportSshPublicKeyResponseUnmarshaller _instance;
    public static ImportSshPublicKeyResponseUnmarshaller Instance { get; }
    private static ImportSshPublicKeyResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ImportSshPublicKeyResponseUnmarshaller GetInstance();
    public static ImportSshPublicKeyResponseUnmarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.InputFileLocationMarshaller : object {
    public static InputFileLocationMarshaller Instance;
    private static InputFileLocationMarshaller();
    public sealed virtual void Marshall(InputFileLocation requestObject, JsonMarshallerContext context);
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.InputFileLocationUnmarshaller : object {
    private static InputFileLocationUnmarshaller _instance;
    public static InputFileLocationUnmarshaller Instance { get; }
    private static InputFileLocationUnmarshaller();
    private sealed virtual override InputFileLocation Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.Transfer.Model.InputFileLocation,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual InputFileLocation Unmarshall(JsonUnmarshallerContext context);
    public static InputFileLocationUnmarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.InternalServiceErrorExceptionUnmarshaller : object {
    private static InternalServiceErrorExceptionUnmarshaller _instance;
    public static InternalServiceErrorExceptionUnmarshaller Instance { get; }
    private static InternalServiceErrorExceptionUnmarshaller();
    public sealed virtual InternalServiceErrorException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual InternalServiceErrorException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static InternalServiceErrorExceptionUnmarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.InvalidNextTokenExceptionUnmarshaller : object {
    private static InvalidNextTokenExceptionUnmarshaller _instance;
    public static InvalidNextTokenExceptionUnmarshaller Instance { get; }
    private static InvalidNextTokenExceptionUnmarshaller();
    public sealed virtual InvalidNextTokenException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual InvalidNextTokenException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static InvalidNextTokenExceptionUnmarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.InvalidRequestExceptionUnmarshaller : object {
    private static InvalidRequestExceptionUnmarshaller _instance;
    public static InvalidRequestExceptionUnmarshaller Instance { get; }
    private static InvalidRequestExceptionUnmarshaller();
    public sealed virtual InvalidRequestException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual InvalidRequestException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static InvalidRequestExceptionUnmarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.ListAccessesRequestMarshaller : object {
    private static ListAccessesRequestMarshaller _instance;
    public static ListAccessesRequestMarshaller Instance { get; }
    private static ListAccessesRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListAccessesRequest publicRequest);
    internal static ListAccessesRequestMarshaller GetInstance();
    public static ListAccessesRequestMarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.ListAccessesResponseUnmarshaller : JsonResponseUnmarshaller {
    private static ListAccessesResponseUnmarshaller _instance;
    public static ListAccessesResponseUnmarshaller Instance { get; }
    private static ListAccessesResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ListAccessesResponseUnmarshaller GetInstance();
    public static ListAccessesResponseUnmarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.ListAgreementsRequestMarshaller : object {
    private static ListAgreementsRequestMarshaller _instance;
    public static ListAgreementsRequestMarshaller Instance { get; }
    private static ListAgreementsRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListAgreementsRequest publicRequest);
    internal static ListAgreementsRequestMarshaller GetInstance();
    public static ListAgreementsRequestMarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.ListAgreementsResponseUnmarshaller : JsonResponseUnmarshaller {
    private static ListAgreementsResponseUnmarshaller _instance;
    public static ListAgreementsResponseUnmarshaller Instance { get; }
    private static ListAgreementsResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ListAgreementsResponseUnmarshaller GetInstance();
    public static ListAgreementsResponseUnmarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.ListCertificatesRequestMarshaller : object {
    private static ListCertificatesRequestMarshaller _instance;
    public static ListCertificatesRequestMarshaller Instance { get; }
    private static ListCertificatesRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListCertificatesRequest publicRequest);
    internal static ListCertificatesRequestMarshaller GetInstance();
    public static ListCertificatesRequestMarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.ListCertificatesResponseUnmarshaller : JsonResponseUnmarshaller {
    private static ListCertificatesResponseUnmarshaller _instance;
    public static ListCertificatesResponseUnmarshaller Instance { get; }
    private static ListCertificatesResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ListCertificatesResponseUnmarshaller GetInstance();
    public static ListCertificatesResponseUnmarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.ListConnectorsRequestMarshaller : object {
    private static ListConnectorsRequestMarshaller _instance;
    public static ListConnectorsRequestMarshaller Instance { get; }
    private static ListConnectorsRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListConnectorsRequest publicRequest);
    internal static ListConnectorsRequestMarshaller GetInstance();
    public static ListConnectorsRequestMarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.ListConnectorsResponseUnmarshaller : JsonResponseUnmarshaller {
    private static ListConnectorsResponseUnmarshaller _instance;
    public static ListConnectorsResponseUnmarshaller Instance { get; }
    private static ListConnectorsResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ListConnectorsResponseUnmarshaller GetInstance();
    public static ListConnectorsResponseUnmarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.ListedAccessUnmarshaller : object {
    private static ListedAccessUnmarshaller _instance;
    public static ListedAccessUnmarshaller Instance { get; }
    private static ListedAccessUnmarshaller();
    private sealed virtual override ListedAccess Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.Transfer.Model.ListedAccess,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ListedAccess Unmarshall(JsonUnmarshallerContext context);
    public static ListedAccessUnmarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.ListedAgreementUnmarshaller : object {
    private static ListedAgreementUnmarshaller _instance;
    public static ListedAgreementUnmarshaller Instance { get; }
    private static ListedAgreementUnmarshaller();
    private sealed virtual override ListedAgreement Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.Transfer.Model.ListedAgreement,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ListedAgreement Unmarshall(JsonUnmarshallerContext context);
    public static ListedAgreementUnmarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.ListedCertificateUnmarshaller : object {
    private static ListedCertificateUnmarshaller _instance;
    public static ListedCertificateUnmarshaller Instance { get; }
    private static ListedCertificateUnmarshaller();
    private sealed virtual override ListedCertificate Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.Transfer.Model.ListedCertificate,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ListedCertificate Unmarshall(JsonUnmarshallerContext context);
    public static ListedCertificateUnmarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.ListedConnectorUnmarshaller : object {
    private static ListedConnectorUnmarshaller _instance;
    public static ListedConnectorUnmarshaller Instance { get; }
    private static ListedConnectorUnmarshaller();
    private sealed virtual override ListedConnector Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.Transfer.Model.ListedConnector,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ListedConnector Unmarshall(JsonUnmarshallerContext context);
    public static ListedConnectorUnmarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.ListedExecutionUnmarshaller : object {
    private static ListedExecutionUnmarshaller _instance;
    public static ListedExecutionUnmarshaller Instance { get; }
    private static ListedExecutionUnmarshaller();
    private sealed virtual override ListedExecution Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.Transfer.Model.ListedExecution,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ListedExecution Unmarshall(JsonUnmarshallerContext context);
    public static ListedExecutionUnmarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.ListedHostKeyUnmarshaller : object {
    private static ListedHostKeyUnmarshaller _instance;
    public static ListedHostKeyUnmarshaller Instance { get; }
    private static ListedHostKeyUnmarshaller();
    private sealed virtual override ListedHostKey Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.Transfer.Model.ListedHostKey,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ListedHostKey Unmarshall(JsonUnmarshallerContext context);
    public static ListedHostKeyUnmarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.ListedProfileUnmarshaller : object {
    private static ListedProfileUnmarshaller _instance;
    public static ListedProfileUnmarshaller Instance { get; }
    private static ListedProfileUnmarshaller();
    private sealed virtual override ListedProfile Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.Transfer.Model.ListedProfile,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ListedProfile Unmarshall(JsonUnmarshallerContext context);
    public static ListedProfileUnmarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.ListedServerUnmarshaller : object {
    private static ListedServerUnmarshaller _instance;
    public static ListedServerUnmarshaller Instance { get; }
    private static ListedServerUnmarshaller();
    private sealed virtual override ListedServer Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.Transfer.Model.ListedServer,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ListedServer Unmarshall(JsonUnmarshallerContext context);
    public static ListedServerUnmarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.ListedUserUnmarshaller : object {
    private static ListedUserUnmarshaller _instance;
    public static ListedUserUnmarshaller Instance { get; }
    private static ListedUserUnmarshaller();
    private sealed virtual override ListedUser Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.Transfer.Model.ListedUser,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ListedUser Unmarshall(JsonUnmarshallerContext context);
    public static ListedUserUnmarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.ListedWorkflowUnmarshaller : object {
    private static ListedWorkflowUnmarshaller _instance;
    public static ListedWorkflowUnmarshaller Instance { get; }
    private static ListedWorkflowUnmarshaller();
    private sealed virtual override ListedWorkflow Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.Transfer.Model.ListedWorkflow,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ListedWorkflow Unmarshall(JsonUnmarshallerContext context);
    public static ListedWorkflowUnmarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.ListExecutionsRequestMarshaller : object {
    private static ListExecutionsRequestMarshaller _instance;
    public static ListExecutionsRequestMarshaller Instance { get; }
    private static ListExecutionsRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListExecutionsRequest publicRequest);
    internal static ListExecutionsRequestMarshaller GetInstance();
    public static ListExecutionsRequestMarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.ListExecutionsResponseUnmarshaller : JsonResponseUnmarshaller {
    private static ListExecutionsResponseUnmarshaller _instance;
    public static ListExecutionsResponseUnmarshaller Instance { get; }
    private static ListExecutionsResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ListExecutionsResponseUnmarshaller GetInstance();
    public static ListExecutionsResponseUnmarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.ListHostKeysRequestMarshaller : object {
    private static ListHostKeysRequestMarshaller _instance;
    public static ListHostKeysRequestMarshaller Instance { get; }
    private static ListHostKeysRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListHostKeysRequest publicRequest);
    internal static ListHostKeysRequestMarshaller GetInstance();
    public static ListHostKeysRequestMarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.ListHostKeysResponseUnmarshaller : JsonResponseUnmarshaller {
    private static ListHostKeysResponseUnmarshaller _instance;
    public static ListHostKeysResponseUnmarshaller Instance { get; }
    private static ListHostKeysResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ListHostKeysResponseUnmarshaller GetInstance();
    public static ListHostKeysResponseUnmarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.ListProfilesRequestMarshaller : object {
    private static ListProfilesRequestMarshaller _instance;
    public static ListProfilesRequestMarshaller Instance { get; }
    private static ListProfilesRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListProfilesRequest publicRequest);
    internal static ListProfilesRequestMarshaller GetInstance();
    public static ListProfilesRequestMarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.ListProfilesResponseUnmarshaller : JsonResponseUnmarshaller {
    private static ListProfilesResponseUnmarshaller _instance;
    public static ListProfilesResponseUnmarshaller Instance { get; }
    private static ListProfilesResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ListProfilesResponseUnmarshaller GetInstance();
    public static ListProfilesResponseUnmarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.ListSecurityPoliciesRequestMarshaller : object {
    private static ListSecurityPoliciesRequestMarshaller _instance;
    public static ListSecurityPoliciesRequestMarshaller Instance { get; }
    private static ListSecurityPoliciesRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListSecurityPoliciesRequest publicRequest);
    internal static ListSecurityPoliciesRequestMarshaller GetInstance();
    public static ListSecurityPoliciesRequestMarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.ListSecurityPoliciesResponseUnmarshaller : JsonResponseUnmarshaller {
    private static ListSecurityPoliciesResponseUnmarshaller _instance;
    public static ListSecurityPoliciesResponseUnmarshaller Instance { get; }
    private static ListSecurityPoliciesResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ListSecurityPoliciesResponseUnmarshaller GetInstance();
    public static ListSecurityPoliciesResponseUnmarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.ListServersRequestMarshaller : object {
    private static ListServersRequestMarshaller _instance;
    public static ListServersRequestMarshaller Instance { get; }
    private static ListServersRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListServersRequest publicRequest);
    internal static ListServersRequestMarshaller GetInstance();
    public static ListServersRequestMarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.ListServersResponseUnmarshaller : JsonResponseUnmarshaller {
    private static ListServersResponseUnmarshaller _instance;
    public static ListServersResponseUnmarshaller Instance { get; }
    private static ListServersResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ListServersResponseUnmarshaller GetInstance();
    public static ListServersResponseUnmarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.ListTagsForResourceRequestMarshaller : object {
    private static ListTagsForResourceRequestMarshaller _instance;
    public static ListTagsForResourceRequestMarshaller Instance { get; }
    private static ListTagsForResourceRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListTagsForResourceRequest publicRequest);
    internal static ListTagsForResourceRequestMarshaller GetInstance();
    public static ListTagsForResourceRequestMarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.ListTagsForResourceResponseUnmarshaller : JsonResponseUnmarshaller {
    private static ListTagsForResourceResponseUnmarshaller _instance;
    public static ListTagsForResourceResponseUnmarshaller Instance { get; }
    private static ListTagsForResourceResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ListTagsForResourceResponseUnmarshaller GetInstance();
    public static ListTagsForResourceResponseUnmarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.ListUsersRequestMarshaller : object {
    private static ListUsersRequestMarshaller _instance;
    public static ListUsersRequestMarshaller Instance { get; }
    private static ListUsersRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListUsersRequest publicRequest);
    internal static ListUsersRequestMarshaller GetInstance();
    public static ListUsersRequestMarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.ListUsersResponseUnmarshaller : JsonResponseUnmarshaller {
    private static ListUsersResponseUnmarshaller _instance;
    public static ListUsersResponseUnmarshaller Instance { get; }
    private static ListUsersResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ListUsersResponseUnmarshaller GetInstance();
    public static ListUsersResponseUnmarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.ListWorkflowsRequestMarshaller : object {
    private static ListWorkflowsRequestMarshaller _instance;
    public static ListWorkflowsRequestMarshaller Instance { get; }
    private static ListWorkflowsRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(ListWorkflowsRequest publicRequest);
    internal static ListWorkflowsRequestMarshaller GetInstance();
    public static ListWorkflowsRequestMarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.ListWorkflowsResponseUnmarshaller : JsonResponseUnmarshaller {
    private static ListWorkflowsResponseUnmarshaller _instance;
    public static ListWorkflowsResponseUnmarshaller Instance { get; }
    private static ListWorkflowsResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static ListWorkflowsResponseUnmarshaller GetInstance();
    public static ListWorkflowsResponseUnmarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.LoggingConfigurationUnmarshaller : object {
    private static LoggingConfigurationUnmarshaller _instance;
    public static LoggingConfigurationUnmarshaller Instance { get; }
    private static LoggingConfigurationUnmarshaller();
    private sealed virtual override LoggingConfiguration Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.Transfer.Model.LoggingConfiguration,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual LoggingConfiguration Unmarshall(JsonUnmarshallerContext context);
    public static LoggingConfigurationUnmarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.PosixProfileMarshaller : object {
    public static PosixProfileMarshaller Instance;
    private static PosixProfileMarshaller();
    public sealed virtual void Marshall(PosixProfile requestObject, JsonMarshallerContext context);
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.PosixProfileUnmarshaller : object {
    private static PosixProfileUnmarshaller _instance;
    public static PosixProfileUnmarshaller Instance { get; }
    private static PosixProfileUnmarshaller();
    private sealed virtual override PosixProfile Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.Transfer.Model.PosixProfile,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual PosixProfile Unmarshall(JsonUnmarshallerContext context);
    public static PosixProfileUnmarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.ProtocolDetailsMarshaller : object {
    public static ProtocolDetailsMarshaller Instance;
    private static ProtocolDetailsMarshaller();
    public sealed virtual void Marshall(ProtocolDetails requestObject, JsonMarshallerContext context);
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.ProtocolDetailsUnmarshaller : object {
    private static ProtocolDetailsUnmarshaller _instance;
    public static ProtocolDetailsUnmarshaller Instance { get; }
    private static ProtocolDetailsUnmarshaller();
    private sealed virtual override ProtocolDetails Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.Transfer.Model.ProtocolDetails,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ProtocolDetails Unmarshall(JsonUnmarshallerContext context);
    public static ProtocolDetailsUnmarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.ResourceExistsExceptionUnmarshaller : object {
    private static ResourceExistsExceptionUnmarshaller _instance;
    public static ResourceExistsExceptionUnmarshaller Instance { get; }
    private static ResourceExistsExceptionUnmarshaller();
    public sealed virtual ResourceExistsException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual ResourceExistsException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static ResourceExistsExceptionUnmarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.ResourceNotFoundExceptionUnmarshaller : object {
    private static ResourceNotFoundExceptionUnmarshaller _instance;
    public static ResourceNotFoundExceptionUnmarshaller Instance { get; }
    private static ResourceNotFoundExceptionUnmarshaller();
    public sealed virtual ResourceNotFoundException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual ResourceNotFoundException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static ResourceNotFoundExceptionUnmarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.S3FileLocationUnmarshaller : object {
    private static S3FileLocationUnmarshaller _instance;
    public static S3FileLocationUnmarshaller Instance { get; }
    private static S3FileLocationUnmarshaller();
    private sealed virtual override S3FileLocation Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.Transfer.Model.S3FileLocation,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual S3FileLocation Unmarshall(JsonUnmarshallerContext context);
    public static S3FileLocationUnmarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.S3InputFileLocationMarshaller : object {
    public static S3InputFileLocationMarshaller Instance;
    private static S3InputFileLocationMarshaller();
    public sealed virtual void Marshall(S3InputFileLocation requestObject, JsonMarshallerContext context);
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.S3InputFileLocationUnmarshaller : object {
    private static S3InputFileLocationUnmarshaller _instance;
    public static S3InputFileLocationUnmarshaller Instance { get; }
    private static S3InputFileLocationUnmarshaller();
    private sealed virtual override S3InputFileLocation Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.Transfer.Model.S3InputFileLocation,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual S3InputFileLocation Unmarshall(JsonUnmarshallerContext context);
    public static S3InputFileLocationUnmarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.S3StorageOptionsMarshaller : object {
    public static S3StorageOptionsMarshaller Instance;
    private static S3StorageOptionsMarshaller();
    public sealed virtual void Marshall(S3StorageOptions requestObject, JsonMarshallerContext context);
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.S3StorageOptionsUnmarshaller : object {
    private static S3StorageOptionsUnmarshaller _instance;
    public static S3StorageOptionsUnmarshaller Instance { get; }
    private static S3StorageOptionsUnmarshaller();
    private sealed virtual override S3StorageOptions Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.Transfer.Model.S3StorageOptions,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual S3StorageOptions Unmarshall(JsonUnmarshallerContext context);
    public static S3StorageOptionsUnmarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.S3TagMarshaller : object {
    public static S3TagMarshaller Instance;
    private static S3TagMarshaller();
    public sealed virtual void Marshall(S3Tag requestObject, JsonMarshallerContext context);
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.S3TagUnmarshaller : object {
    private static S3TagUnmarshaller _instance;
    public static S3TagUnmarshaller Instance { get; }
    private static S3TagUnmarshaller();
    private sealed virtual override S3Tag Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.Transfer.Model.S3Tag,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual S3Tag Unmarshall(JsonUnmarshallerContext context);
    public static S3TagUnmarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.SendWorkflowStepStateRequestMarshaller : object {
    private static SendWorkflowStepStateRequestMarshaller _instance;
    public static SendWorkflowStepStateRequestMarshaller Instance { get; }
    private static SendWorkflowStepStateRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(SendWorkflowStepStateRequest publicRequest);
    internal static SendWorkflowStepStateRequestMarshaller GetInstance();
    public static SendWorkflowStepStateRequestMarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.SendWorkflowStepStateResponseUnmarshaller : JsonResponseUnmarshaller {
    private static SendWorkflowStepStateResponseUnmarshaller _instance;
    public static SendWorkflowStepStateResponseUnmarshaller Instance { get; }
    private static SendWorkflowStepStateResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static SendWorkflowStepStateResponseUnmarshaller GetInstance();
    public static SendWorkflowStepStateResponseUnmarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.ServiceMetadataUnmarshaller : object {
    private static ServiceMetadataUnmarshaller _instance;
    public static ServiceMetadataUnmarshaller Instance { get; }
    private static ServiceMetadataUnmarshaller();
    private sealed virtual override ServiceMetadata Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.Transfer.Model.ServiceMetadata,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual ServiceMetadata Unmarshall(JsonUnmarshallerContext context);
    public static ServiceMetadataUnmarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.ServiceUnavailableExceptionUnmarshaller : object {
    private static ServiceUnavailableExceptionUnmarshaller _instance;
    public static ServiceUnavailableExceptionUnmarshaller Instance { get; }
    private static ServiceUnavailableExceptionUnmarshaller();
    public sealed virtual ServiceUnavailableException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual ServiceUnavailableException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static ServiceUnavailableExceptionUnmarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.SftpConnectorConfigMarshaller : object {
    public static SftpConnectorConfigMarshaller Instance;
    private static SftpConnectorConfigMarshaller();
    public sealed virtual void Marshall(SftpConnectorConfig requestObject, JsonMarshallerContext context);
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.SftpConnectorConfigUnmarshaller : object {
    private static SftpConnectorConfigUnmarshaller _instance;
    public static SftpConnectorConfigUnmarshaller Instance { get; }
    private static SftpConnectorConfigUnmarshaller();
    private sealed virtual override SftpConnectorConfig Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.Transfer.Model.SftpConnectorConfig,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual SftpConnectorConfig Unmarshall(JsonUnmarshallerContext context);
    public static SftpConnectorConfigUnmarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.SshPublicKeyUnmarshaller : object {
    private static SshPublicKeyUnmarshaller _instance;
    public static SshPublicKeyUnmarshaller Instance { get; }
    private static SshPublicKeyUnmarshaller();
    private sealed virtual override SshPublicKey Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.Transfer.Model.SshPublicKey,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual SshPublicKey Unmarshall(JsonUnmarshallerContext context);
    public static SshPublicKeyUnmarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.StartDirectoryListingRequestMarshaller : object {
    private static StartDirectoryListingRequestMarshaller _instance;
    public static StartDirectoryListingRequestMarshaller Instance { get; }
    private static StartDirectoryListingRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(StartDirectoryListingRequest publicRequest);
    internal static StartDirectoryListingRequestMarshaller GetInstance();
    public static StartDirectoryListingRequestMarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.StartDirectoryListingResponseUnmarshaller : JsonResponseUnmarshaller {
    private static StartDirectoryListingResponseUnmarshaller _instance;
    public static StartDirectoryListingResponseUnmarshaller Instance { get; }
    private static StartDirectoryListingResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static StartDirectoryListingResponseUnmarshaller GetInstance();
    public static StartDirectoryListingResponseUnmarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.StartFileTransferRequestMarshaller : object {
    private static StartFileTransferRequestMarshaller _instance;
    public static StartFileTransferRequestMarshaller Instance { get; }
    private static StartFileTransferRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(StartFileTransferRequest publicRequest);
    internal static StartFileTransferRequestMarshaller GetInstance();
    public static StartFileTransferRequestMarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.StartFileTransferResponseUnmarshaller : JsonResponseUnmarshaller {
    private static StartFileTransferResponseUnmarshaller _instance;
    public static StartFileTransferResponseUnmarshaller Instance { get; }
    private static StartFileTransferResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static StartFileTransferResponseUnmarshaller GetInstance();
    public static StartFileTransferResponseUnmarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.StartServerRequestMarshaller : object {
    private static StartServerRequestMarshaller _instance;
    public static StartServerRequestMarshaller Instance { get; }
    private static StartServerRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(StartServerRequest publicRequest);
    internal static StartServerRequestMarshaller GetInstance();
    public static StartServerRequestMarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.StartServerResponseUnmarshaller : JsonResponseUnmarshaller {
    private static StartServerResponseUnmarshaller _instance;
    public static StartServerResponseUnmarshaller Instance { get; }
    private static StartServerResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static StartServerResponseUnmarshaller GetInstance();
    public static StartServerResponseUnmarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.StopServerRequestMarshaller : object {
    private static StopServerRequestMarshaller _instance;
    public static StopServerRequestMarshaller Instance { get; }
    private static StopServerRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(StopServerRequest publicRequest);
    internal static StopServerRequestMarshaller GetInstance();
    public static StopServerRequestMarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.StopServerResponseUnmarshaller : JsonResponseUnmarshaller {
    private static StopServerResponseUnmarshaller _instance;
    public static StopServerResponseUnmarshaller Instance { get; }
    private static StopServerResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static StopServerResponseUnmarshaller GetInstance();
    public static StopServerResponseUnmarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.TagMarshaller : object {
    public static TagMarshaller Instance;
    private static TagMarshaller();
    public sealed virtual void Marshall(Tag requestObject, JsonMarshallerContext context);
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.TagResourceRequestMarshaller : object {
    private static TagResourceRequestMarshaller _instance;
    public static TagResourceRequestMarshaller Instance { get; }
    private static TagResourceRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(TagResourceRequest publicRequest);
    internal static TagResourceRequestMarshaller GetInstance();
    public static TagResourceRequestMarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.TagResourceResponseUnmarshaller : JsonResponseUnmarshaller {
    private static TagResourceResponseUnmarshaller _instance;
    public static TagResourceResponseUnmarshaller Instance { get; }
    private static TagResourceResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static TagResourceResponseUnmarshaller GetInstance();
    public static TagResourceResponseUnmarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.TagStepDetailsMarshaller : object {
    public static TagStepDetailsMarshaller Instance;
    private static TagStepDetailsMarshaller();
    public sealed virtual void Marshall(TagStepDetails requestObject, JsonMarshallerContext context);
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.TagStepDetailsUnmarshaller : object {
    private static TagStepDetailsUnmarshaller _instance;
    public static TagStepDetailsUnmarshaller Instance { get; }
    private static TagStepDetailsUnmarshaller();
    private sealed virtual override TagStepDetails Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.Transfer.Model.TagStepDetails,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual TagStepDetails Unmarshall(JsonUnmarshallerContext context);
    public static TagStepDetailsUnmarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.TagUnmarshaller : object {
    private static TagUnmarshaller _instance;
    public static TagUnmarshaller Instance { get; }
    private static TagUnmarshaller();
    private sealed virtual override Tag Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.Transfer.Model.Tag,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual Tag Unmarshall(JsonUnmarshallerContext context);
    public static TagUnmarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.TestConnectionRequestMarshaller : object {
    private static TestConnectionRequestMarshaller _instance;
    public static TestConnectionRequestMarshaller Instance { get; }
    private static TestConnectionRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(TestConnectionRequest publicRequest);
    internal static TestConnectionRequestMarshaller GetInstance();
    public static TestConnectionRequestMarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.TestConnectionResponseUnmarshaller : JsonResponseUnmarshaller {
    private static TestConnectionResponseUnmarshaller _instance;
    public static TestConnectionResponseUnmarshaller Instance { get; }
    private static TestConnectionResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static TestConnectionResponseUnmarshaller GetInstance();
    public static TestConnectionResponseUnmarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.TestIdentityProviderRequestMarshaller : object {
    private static TestIdentityProviderRequestMarshaller _instance;
    public static TestIdentityProviderRequestMarshaller Instance { get; }
    private static TestIdentityProviderRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(TestIdentityProviderRequest publicRequest);
    internal static TestIdentityProviderRequestMarshaller GetInstance();
    public static TestIdentityProviderRequestMarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.TestIdentityProviderResponseUnmarshaller : JsonResponseUnmarshaller {
    private static TestIdentityProviderResponseUnmarshaller _instance;
    public static TestIdentityProviderResponseUnmarshaller Instance { get; }
    private static TestIdentityProviderResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static TestIdentityProviderResponseUnmarshaller GetInstance();
    public static TestIdentityProviderResponseUnmarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.ThrottlingExceptionUnmarshaller : object {
    private static ThrottlingExceptionUnmarshaller _instance;
    public static ThrottlingExceptionUnmarshaller Instance { get; }
    private static ThrottlingExceptionUnmarshaller();
    public sealed virtual ThrottlingException Unmarshall(JsonUnmarshallerContext context);
    public sealed virtual ThrottlingException Unmarshall(JsonUnmarshallerContext context, ErrorResponse errorResponse);
    public static ThrottlingExceptionUnmarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.UntagResourceRequestMarshaller : object {
    private static UntagResourceRequestMarshaller _instance;
    public static UntagResourceRequestMarshaller Instance { get; }
    private static UntagResourceRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(UntagResourceRequest publicRequest);
    internal static UntagResourceRequestMarshaller GetInstance();
    public static UntagResourceRequestMarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.UntagResourceResponseUnmarshaller : JsonResponseUnmarshaller {
    private static UntagResourceResponseUnmarshaller _instance;
    public static UntagResourceResponseUnmarshaller Instance { get; }
    private static UntagResourceResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static UntagResourceResponseUnmarshaller GetInstance();
    public static UntagResourceResponseUnmarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.UpdateAccessRequestMarshaller : object {
    private static UpdateAccessRequestMarshaller _instance;
    public static UpdateAccessRequestMarshaller Instance { get; }
    private static UpdateAccessRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(UpdateAccessRequest publicRequest);
    internal static UpdateAccessRequestMarshaller GetInstance();
    public static UpdateAccessRequestMarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.UpdateAccessResponseUnmarshaller : JsonResponseUnmarshaller {
    private static UpdateAccessResponseUnmarshaller _instance;
    public static UpdateAccessResponseUnmarshaller Instance { get; }
    private static UpdateAccessResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static UpdateAccessResponseUnmarshaller GetInstance();
    public static UpdateAccessResponseUnmarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.UpdateAgreementRequestMarshaller : object {
    private static UpdateAgreementRequestMarshaller _instance;
    public static UpdateAgreementRequestMarshaller Instance { get; }
    private static UpdateAgreementRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(UpdateAgreementRequest publicRequest);
    internal static UpdateAgreementRequestMarshaller GetInstance();
    public static UpdateAgreementRequestMarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.UpdateAgreementResponseUnmarshaller : JsonResponseUnmarshaller {
    private static UpdateAgreementResponseUnmarshaller _instance;
    public static UpdateAgreementResponseUnmarshaller Instance { get; }
    private static UpdateAgreementResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static UpdateAgreementResponseUnmarshaller GetInstance();
    public static UpdateAgreementResponseUnmarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.UpdateCertificateRequestMarshaller : object {
    private static UpdateCertificateRequestMarshaller _instance;
    public static UpdateCertificateRequestMarshaller Instance { get; }
    private static UpdateCertificateRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(UpdateCertificateRequest publicRequest);
    internal static UpdateCertificateRequestMarshaller GetInstance();
    public static UpdateCertificateRequestMarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.UpdateCertificateResponseUnmarshaller : JsonResponseUnmarshaller {
    private static UpdateCertificateResponseUnmarshaller _instance;
    public static UpdateCertificateResponseUnmarshaller Instance { get; }
    private static UpdateCertificateResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static UpdateCertificateResponseUnmarshaller GetInstance();
    public static UpdateCertificateResponseUnmarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.UpdateConnectorRequestMarshaller : object {
    private static UpdateConnectorRequestMarshaller _instance;
    public static UpdateConnectorRequestMarshaller Instance { get; }
    private static UpdateConnectorRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(UpdateConnectorRequest publicRequest);
    internal static UpdateConnectorRequestMarshaller GetInstance();
    public static UpdateConnectorRequestMarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.UpdateConnectorResponseUnmarshaller : JsonResponseUnmarshaller {
    private static UpdateConnectorResponseUnmarshaller _instance;
    public static UpdateConnectorResponseUnmarshaller Instance { get; }
    private static UpdateConnectorResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static UpdateConnectorResponseUnmarshaller GetInstance();
    public static UpdateConnectorResponseUnmarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.UpdateHostKeyRequestMarshaller : object {
    private static UpdateHostKeyRequestMarshaller _instance;
    public static UpdateHostKeyRequestMarshaller Instance { get; }
    private static UpdateHostKeyRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(UpdateHostKeyRequest publicRequest);
    internal static UpdateHostKeyRequestMarshaller GetInstance();
    public static UpdateHostKeyRequestMarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.UpdateHostKeyResponseUnmarshaller : JsonResponseUnmarshaller {
    private static UpdateHostKeyResponseUnmarshaller _instance;
    public static UpdateHostKeyResponseUnmarshaller Instance { get; }
    private static UpdateHostKeyResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static UpdateHostKeyResponseUnmarshaller GetInstance();
    public static UpdateHostKeyResponseUnmarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.UpdateProfileRequestMarshaller : object {
    private static UpdateProfileRequestMarshaller _instance;
    public static UpdateProfileRequestMarshaller Instance { get; }
    private static UpdateProfileRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(UpdateProfileRequest publicRequest);
    internal static UpdateProfileRequestMarshaller GetInstance();
    public static UpdateProfileRequestMarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.UpdateProfileResponseUnmarshaller : JsonResponseUnmarshaller {
    private static UpdateProfileResponseUnmarshaller _instance;
    public static UpdateProfileResponseUnmarshaller Instance { get; }
    private static UpdateProfileResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static UpdateProfileResponseUnmarshaller GetInstance();
    public static UpdateProfileResponseUnmarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.UpdateServerRequestMarshaller : object {
    private static UpdateServerRequestMarshaller _instance;
    public static UpdateServerRequestMarshaller Instance { get; }
    private static UpdateServerRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(UpdateServerRequest publicRequest);
    internal static UpdateServerRequestMarshaller GetInstance();
    public static UpdateServerRequestMarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.UpdateServerResponseUnmarshaller : JsonResponseUnmarshaller {
    private static UpdateServerResponseUnmarshaller _instance;
    public static UpdateServerResponseUnmarshaller Instance { get; }
    private static UpdateServerResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static UpdateServerResponseUnmarshaller GetInstance();
    public static UpdateServerResponseUnmarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.UpdateUserRequestMarshaller : object {
    private static UpdateUserRequestMarshaller _instance;
    public static UpdateUserRequestMarshaller Instance { get; }
    private static UpdateUserRequestMarshaller();
    public sealed virtual IRequest Marshall(AmazonWebServiceRequest input);
    public sealed virtual IRequest Marshall(UpdateUserRequest publicRequest);
    internal static UpdateUserRequestMarshaller GetInstance();
    public static UpdateUserRequestMarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.UpdateUserResponseUnmarshaller : JsonResponseUnmarshaller {
    private static UpdateUserResponseUnmarshaller _instance;
    public static UpdateUserResponseUnmarshaller Instance { get; }
    private static UpdateUserResponseUnmarshaller();
    public virtual AmazonWebServiceResponse Unmarshall(JsonUnmarshallerContext context);
    public virtual AmazonServiceException UnmarshallException(JsonUnmarshallerContext context, Exception innerException, HttpStatusCode statusCode);
    internal static UpdateUserResponseUnmarshaller GetInstance();
    public static UpdateUserResponseUnmarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.UserDetailsUnmarshaller : object {
    private static UserDetailsUnmarshaller _instance;
    public static UserDetailsUnmarshaller Instance { get; }
    private static UserDetailsUnmarshaller();
    private sealed virtual override UserDetails Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.Transfer.Model.UserDetails,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual UserDetails Unmarshall(JsonUnmarshallerContext context);
    public static UserDetailsUnmarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.WorkflowDetailMarshaller : object {
    public static WorkflowDetailMarshaller Instance;
    private static WorkflowDetailMarshaller();
    public sealed virtual void Marshall(WorkflowDetail requestObject, JsonMarshallerContext context);
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.WorkflowDetailsMarshaller : object {
    public static WorkflowDetailsMarshaller Instance;
    private static WorkflowDetailsMarshaller();
    public sealed virtual void Marshall(WorkflowDetails requestObject, JsonMarshallerContext context);
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.WorkflowDetailsUnmarshaller : object {
    private static WorkflowDetailsUnmarshaller _instance;
    public static WorkflowDetailsUnmarshaller Instance { get; }
    private static WorkflowDetailsUnmarshaller();
    private sealed virtual override WorkflowDetails Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.Transfer.Model.WorkflowDetails,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual WorkflowDetails Unmarshall(JsonUnmarshallerContext context);
    public static WorkflowDetailsUnmarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.WorkflowDetailUnmarshaller : object {
    private static WorkflowDetailUnmarshaller _instance;
    public static WorkflowDetailUnmarshaller Instance { get; }
    private static WorkflowDetailUnmarshaller();
    private sealed virtual override WorkflowDetail Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.Transfer.Model.WorkflowDetail,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual WorkflowDetail Unmarshall(JsonUnmarshallerContext context);
    public static WorkflowDetailUnmarshaller get_Instance();
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.WorkflowStepMarshaller : object {
    public static WorkflowStepMarshaller Instance;
    private static WorkflowStepMarshaller();
    public sealed virtual void Marshall(WorkflowStep requestObject, JsonMarshallerContext context);
}
public class Amazon.Transfer.Model.Internal.MarshallTransformations.WorkflowStepUnmarshaller : object {
    private static WorkflowStepUnmarshaller _instance;
    public static WorkflowStepUnmarshaller Instance { get; }
    private static WorkflowStepUnmarshaller();
    private sealed virtual override WorkflowStep Amazon.Runtime.Internal.Transform.IUnmarshaller<Amazon.Transfer.Model.WorkflowStep,Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext>.Unmarshall(XmlUnmarshallerContext context);
    public sealed virtual WorkflowStep Unmarshall(JsonUnmarshallerContext context);
    public static WorkflowStepUnmarshaller get_Instance();
}
public class Amazon.Transfer.Model.InternalServiceErrorException : AmazonTransferException {
    public InternalServiceErrorException(string message);
    public InternalServiceErrorException(string message, Exception innerException);
    public InternalServiceErrorException(Exception innerException);
    public InternalServiceErrorException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public InternalServiceErrorException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Transfer.Model.InvalidNextTokenException : AmazonTransferException {
    public InvalidNextTokenException(string message);
    public InvalidNextTokenException(string message, Exception innerException);
    public InvalidNextTokenException(Exception innerException);
    public InvalidNextTokenException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public InvalidNextTokenException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Transfer.Model.InvalidRequestException : AmazonTransferException {
    public InvalidRequestException(string message);
    public InvalidRequestException(string message, Exception innerException);
    public InvalidRequestException(Exception innerException);
    public InvalidRequestException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public InvalidRequestException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public interface Amazon.Transfer.Model.ITransferPaginatorFactory {
    public abstract virtual IListAccessesPaginator ListAccesses(ListAccessesRequest request);
    public abstract virtual IListAgreementsPaginator ListAgreements(ListAgreementsRequest request);
    public abstract virtual IListCertificatesPaginator ListCertificates(ListCertificatesRequest request);
    public abstract virtual IListConnectorsPaginator ListConnectors(ListConnectorsRequest request);
    public abstract virtual IListExecutionsPaginator ListExecutions(ListExecutionsRequest request);
    public abstract virtual IListProfilesPaginator ListProfiles(ListProfilesRequest request);
    public abstract virtual IListSecurityPoliciesPaginator ListSecurityPolicies(ListSecurityPoliciesRequest request);
    public abstract virtual IListServersPaginator ListServers(ListServersRequest request);
    public abstract virtual IListTagsForResourcePaginator ListTagsForResource(ListTagsForResourceRequest request);
    public abstract virtual IListUsersPaginator ListUsers(ListUsersRequest request);
    public abstract virtual IListWorkflowsPaginator ListWorkflows(ListWorkflowsRequest request);
}
internal class Amazon.Transfer.Model.ListAccessesPaginator : object {
    private IAmazonTransfer _client;
    private ListAccessesRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<ListAccessesResponse> Responses { get; }
    public IPaginatedEnumerable`1<ListedAccess> Accesses { get; }
    internal ListAccessesPaginator(IAmazonTransfer client, ListAccessesRequest request);
    public sealed virtual IPaginatedEnumerable`1<ListAccessesResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<ListedAccess> get_Accesses();
    [AsyncIteratorStateMachineAttribute("Amazon.Transfer.Model.ListAccessesPaginator/<Amazon-Runtime-IPaginator<Amazon-Transfer-Model-ListAccessesResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<ListAccessesResponse> Amazon.Runtime.IPaginator<Amazon.Transfer.Model.ListAccessesResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.Transfer.Model.ListAccessesRequest : AmazonTransferRequest {
    private Nullable`1<int> _maxResults;
    private string _nextToken;
    private string _serverId;
    [AWSPropertyAttribute]
public Nullable`1<int> MaxResults { get; public set; }
    [AWSPropertyAttribute]
public string NextToken { get; public set; }
    [AWSPropertyAttribute]
public string ServerId { get; public set; }
    public Nullable`1<int> get_MaxResults();
    public void set_MaxResults(Nullable`1<int> value);
    internal bool IsSetMaxResults();
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
    public string get_ServerId();
    public void set_ServerId(string value);
    internal bool IsSetServerId();
}
public class Amazon.Transfer.Model.ListAccessesResponse : AmazonWebServiceResponse {
    private List`1<ListedAccess> _accesses;
    private string _nextToken;
    private string _serverId;
    [AWSPropertyAttribute]
public List`1<ListedAccess> Accesses { get; public set; }
    [AWSPropertyAttribute]
public string NextToken { get; public set; }
    [AWSPropertyAttribute]
public string ServerId { get; public set; }
    public List`1<ListedAccess> get_Accesses();
    public void set_Accesses(List`1<ListedAccess> value);
    internal bool IsSetAccesses();
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
    public string get_ServerId();
    public void set_ServerId(string value);
    internal bool IsSetServerId();
}
internal class Amazon.Transfer.Model.ListAgreementsPaginator : object {
    private IAmazonTransfer _client;
    private ListAgreementsRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<ListAgreementsResponse> Responses { get; }
    public IPaginatedEnumerable`1<ListedAgreement> Agreements { get; }
    internal ListAgreementsPaginator(IAmazonTransfer client, ListAgreementsRequest request);
    public sealed virtual IPaginatedEnumerable`1<ListAgreementsResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<ListedAgreement> get_Agreements();
    [AsyncIteratorStateMachineAttribute("Amazon.Transfer.Model.ListAgreementsPaginator/<Amazon-Runtime-IPaginator<Amazon-Transfer-Model-ListAgreementsResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<ListAgreementsResponse> Amazon.Runtime.IPaginator<Amazon.Transfer.Model.ListAgreementsResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.Transfer.Model.ListAgreementsRequest : AmazonTransferRequest {
    private Nullable`1<int> _maxResults;
    private string _nextToken;
    private string _serverId;
    [AWSPropertyAttribute]
public Nullable`1<int> MaxResults { get; public set; }
    [AWSPropertyAttribute]
public string NextToken { get; public set; }
    [AWSPropertyAttribute]
public string ServerId { get; public set; }
    public Nullable`1<int> get_MaxResults();
    public void set_MaxResults(Nullable`1<int> value);
    internal bool IsSetMaxResults();
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
    public string get_ServerId();
    public void set_ServerId(string value);
    internal bool IsSetServerId();
}
public class Amazon.Transfer.Model.ListAgreementsResponse : AmazonWebServiceResponse {
    private List`1<ListedAgreement> _agreements;
    private string _nextToken;
    [AWSPropertyAttribute]
public List`1<ListedAgreement> Agreements { get; public set; }
    [AWSPropertyAttribute]
public string NextToken { get; public set; }
    public List`1<ListedAgreement> get_Agreements();
    public void set_Agreements(List`1<ListedAgreement> value);
    internal bool IsSetAgreements();
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
}
internal class Amazon.Transfer.Model.ListCertificatesPaginator : object {
    private IAmazonTransfer _client;
    private ListCertificatesRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<ListCertificatesResponse> Responses { get; }
    public IPaginatedEnumerable`1<ListedCertificate> Certificates { get; }
    internal ListCertificatesPaginator(IAmazonTransfer client, ListCertificatesRequest request);
    public sealed virtual IPaginatedEnumerable`1<ListCertificatesResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<ListedCertificate> get_Certificates();
    [AsyncIteratorStateMachineAttribute("Amazon.Transfer.Model.ListCertificatesPaginator/<Amazon-Runtime-IPaginator<Amazon-Transfer-Model-ListCertificatesResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<ListCertificatesResponse> Amazon.Runtime.IPaginator<Amazon.Transfer.Model.ListCertificatesResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.Transfer.Model.ListCertificatesRequest : AmazonTransferRequest {
    private Nullable`1<int> _maxResults;
    private string _nextToken;
    [AWSPropertyAttribute]
public Nullable`1<int> MaxResults { get; public set; }
    [AWSPropertyAttribute]
public string NextToken { get; public set; }
    public Nullable`1<int> get_MaxResults();
    public void set_MaxResults(Nullable`1<int> value);
    internal bool IsSetMaxResults();
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
}
public class Amazon.Transfer.Model.ListCertificatesResponse : AmazonWebServiceResponse {
    private List`1<ListedCertificate> _certificates;
    private string _nextToken;
    [AWSPropertyAttribute]
public List`1<ListedCertificate> Certificates { get; public set; }
    [AWSPropertyAttribute]
public string NextToken { get; public set; }
    public List`1<ListedCertificate> get_Certificates();
    public void set_Certificates(List`1<ListedCertificate> value);
    internal bool IsSetCertificates();
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
}
internal class Amazon.Transfer.Model.ListConnectorsPaginator : object {
    private IAmazonTransfer _client;
    private ListConnectorsRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<ListConnectorsResponse> Responses { get; }
    public IPaginatedEnumerable`1<ListedConnector> Connectors { get; }
    internal ListConnectorsPaginator(IAmazonTransfer client, ListConnectorsRequest request);
    public sealed virtual IPaginatedEnumerable`1<ListConnectorsResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<ListedConnector> get_Connectors();
    [AsyncIteratorStateMachineAttribute("Amazon.Transfer.Model.ListConnectorsPaginator/<Amazon-Runtime-IPaginator<Amazon-Transfer-Model-ListConnectorsResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<ListConnectorsResponse> Amazon.Runtime.IPaginator<Amazon.Transfer.Model.ListConnectorsResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.Transfer.Model.ListConnectorsRequest : AmazonTransferRequest {
    private Nullable`1<int> _maxResults;
    private string _nextToken;
    [AWSPropertyAttribute]
public Nullable`1<int> MaxResults { get; public set; }
    [AWSPropertyAttribute]
public string NextToken { get; public set; }
    public Nullable`1<int> get_MaxResults();
    public void set_MaxResults(Nullable`1<int> value);
    internal bool IsSetMaxResults();
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
}
public class Amazon.Transfer.Model.ListConnectorsResponse : AmazonWebServiceResponse {
    private List`1<ListedConnector> _connectors;
    private string _nextToken;
    [AWSPropertyAttribute]
public List`1<ListedConnector> Connectors { get; public set; }
    [AWSPropertyAttribute]
public string NextToken { get; public set; }
    public List`1<ListedConnector> get_Connectors();
    public void set_Connectors(List`1<ListedConnector> value);
    internal bool IsSetConnectors();
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
}
public class Amazon.Transfer.Model.ListedAccess : object {
    private string _externalId;
    private string _homeDirectory;
    private HomeDirectoryType _homeDirectoryType;
    private string _role;
    [AWSPropertyAttribute]
public string ExternalId { get; public set; }
    [AWSPropertyAttribute]
public string HomeDirectory { get; public set; }
    public HomeDirectoryType HomeDirectoryType { get; public set; }
    [AWSPropertyAttribute]
public string Role { get; public set; }
    public string get_ExternalId();
    public void set_ExternalId(string value);
    internal bool IsSetExternalId();
    public string get_HomeDirectory();
    public void set_HomeDirectory(string value);
    internal bool IsSetHomeDirectory();
    public HomeDirectoryType get_HomeDirectoryType();
    public void set_HomeDirectoryType(HomeDirectoryType value);
    internal bool IsSetHomeDirectoryType();
    public string get_Role();
    public void set_Role(string value);
    internal bool IsSetRole();
}
public class Amazon.Transfer.Model.ListedAgreement : object {
    private string _agreementId;
    private string _arn;
    private string _description;
    private string _localProfileId;
    private string _partnerProfileId;
    private string _serverId;
    private AgreementStatusType _status;
    [AWSPropertyAttribute]
public string AgreementId { get; public set; }
    [AWSPropertyAttribute]
public string Arn { get; public set; }
    [AWSPropertyAttribute]
public string Description { get; public set; }
    [AWSPropertyAttribute]
public string LocalProfileId { get; public set; }
    [AWSPropertyAttribute]
public string PartnerProfileId { get; public set; }
    [AWSPropertyAttribute]
public string ServerId { get; public set; }
    public AgreementStatusType Status { get; public set; }
    public string get_AgreementId();
    public void set_AgreementId(string value);
    internal bool IsSetAgreementId();
    public string get_Arn();
    public void set_Arn(string value);
    internal bool IsSetArn();
    public string get_Description();
    public void set_Description(string value);
    internal bool IsSetDescription();
    public string get_LocalProfileId();
    public void set_LocalProfileId(string value);
    internal bool IsSetLocalProfileId();
    public string get_PartnerProfileId();
    public void set_PartnerProfileId(string value);
    internal bool IsSetPartnerProfileId();
    public string get_ServerId();
    public void set_ServerId(string value);
    internal bool IsSetServerId();
    public AgreementStatusType get_Status();
    public void set_Status(AgreementStatusType value);
    internal bool IsSetStatus();
}
public class Amazon.Transfer.Model.ListedCertificate : object {
    private Nullable`1<DateTime> _activeDate;
    private string _arn;
    private string _certificateId;
    private string _description;
    private Nullable`1<DateTime> _inactiveDate;
    private CertificateStatusType _status;
    private CertificateType _type;
    private CertificateUsageType _usage;
    public Nullable`1<DateTime> ActiveDate { get; public set; }
    [AWSPropertyAttribute]
public string Arn { get; public set; }
    [AWSPropertyAttribute]
public string CertificateId { get; public set; }
    [AWSPropertyAttribute]
public string Description { get; public set; }
    public Nullable`1<DateTime> InactiveDate { get; public set; }
    public CertificateStatusType Status { get; public set; }
    public CertificateType Type { get; public set; }
    public CertificateUsageType Usage { get; public set; }
    public Nullable`1<DateTime> get_ActiveDate();
    public void set_ActiveDate(Nullable`1<DateTime> value);
    internal bool IsSetActiveDate();
    public string get_Arn();
    public void set_Arn(string value);
    internal bool IsSetArn();
    public string get_CertificateId();
    public void set_CertificateId(string value);
    internal bool IsSetCertificateId();
    public string get_Description();
    public void set_Description(string value);
    internal bool IsSetDescription();
    public Nullable`1<DateTime> get_InactiveDate();
    public void set_InactiveDate(Nullable`1<DateTime> value);
    internal bool IsSetInactiveDate();
    public CertificateStatusType get_Status();
    public void set_Status(CertificateStatusType value);
    internal bool IsSetStatus();
    public CertificateType get_Type();
    public void set_Type(CertificateType value);
    internal bool IsSetType();
    public CertificateUsageType get_Usage();
    public void set_Usage(CertificateUsageType value);
    internal bool IsSetUsage();
}
public class Amazon.Transfer.Model.ListedConnector : object {
    private string _arn;
    private string _connectorId;
    private string _url;
    [AWSPropertyAttribute]
public string Arn { get; public set; }
    [AWSPropertyAttribute]
public string ConnectorId { get; public set; }
    [AWSPropertyAttribute]
public string Url { get; public set; }
    public string get_Arn();
    public void set_Arn(string value);
    internal bool IsSetArn();
    public string get_ConnectorId();
    public void set_ConnectorId(string value);
    internal bool IsSetConnectorId();
    public string get_Url();
    public void set_Url(string value);
    internal bool IsSetUrl();
}
public class Amazon.Transfer.Model.ListedExecution : object {
    private string _executionId;
    private FileLocation _initialFileLocation;
    private ServiceMetadata _serviceMetadata;
    private ExecutionStatus _status;
    [AWSPropertyAttribute]
public string ExecutionId { get; public set; }
    public FileLocation InitialFileLocation { get; public set; }
    public ServiceMetadata ServiceMetadata { get; public set; }
    public ExecutionStatus Status { get; public set; }
    public string get_ExecutionId();
    public void set_ExecutionId(string value);
    internal bool IsSetExecutionId();
    public FileLocation get_InitialFileLocation();
    public void set_InitialFileLocation(FileLocation value);
    internal bool IsSetInitialFileLocation();
    public ServiceMetadata get_ServiceMetadata();
    public void set_ServiceMetadata(ServiceMetadata value);
    internal bool IsSetServiceMetadata();
    public ExecutionStatus get_Status();
    public void set_Status(ExecutionStatus value);
    internal bool IsSetStatus();
}
public class Amazon.Transfer.Model.ListedHostKey : object {
    private string _arn;
    private Nullable`1<DateTime> _dateImported;
    private string _description;
    private string _fingerprint;
    private string _hostKeyId;
    private string _type;
    [AWSPropertyAttribute]
public string Arn { get; public set; }
    public Nullable`1<DateTime> DateImported { get; public set; }
    [AWSPropertyAttribute]
public string Description { get; public set; }
    public string Fingerprint { get; public set; }
    [AWSPropertyAttribute]
public string HostKeyId { get; public set; }
    public string Type { get; public set; }
    public string get_Arn();
    public void set_Arn(string value);
    internal bool IsSetArn();
    public Nullable`1<DateTime> get_DateImported();
    public void set_DateImported(Nullable`1<DateTime> value);
    internal bool IsSetDateImported();
    public string get_Description();
    public void set_Description(string value);
    internal bool IsSetDescription();
    public string get_Fingerprint();
    public void set_Fingerprint(string value);
    internal bool IsSetFingerprint();
    public string get_HostKeyId();
    public void set_HostKeyId(string value);
    internal bool IsSetHostKeyId();
    public string get_Type();
    public void set_Type(string value);
    internal bool IsSetType();
}
public class Amazon.Transfer.Model.ListedProfile : object {
    private string _arn;
    private string _as2Id;
    private string _profileId;
    private ProfileType _profileType;
    [AWSPropertyAttribute]
public string Arn { get; public set; }
    [AWSPropertyAttribute]
public string As2Id { get; public set; }
    [AWSPropertyAttribute]
public string ProfileId { get; public set; }
    public ProfileType ProfileType { get; public set; }
    public string get_Arn();
    public void set_Arn(string value);
    internal bool IsSetArn();
    public string get_As2Id();
    public void set_As2Id(string value);
    internal bool IsSetAs2Id();
    public string get_ProfileId();
    public void set_ProfileId(string value);
    internal bool IsSetProfileId();
    public ProfileType get_ProfileType();
    public void set_ProfileType(ProfileType value);
    internal bool IsSetProfileType();
}
public class Amazon.Transfer.Model.ListedServer : object {
    private string _arn;
    private Domain _domain;
    private EndpointType _endpointType;
    private IdentityProviderType _identityProviderType;
    private string _loggingRole;
    private string _serverId;
    private State _state;
    private Nullable`1<int> _userCount;
    [AWSPropertyAttribute]
public string Arn { get; public set; }
    public Domain Domain { get; public set; }
    public EndpointType EndpointType { get; public set; }
    public IdentityProviderType IdentityProviderType { get; public set; }
    [AWSPropertyAttribute]
public string LoggingRole { get; public set; }
    [AWSPropertyAttribute]
public string ServerId { get; public set; }
    public State State { get; public set; }
    public Nullable`1<int> UserCount { get; public set; }
    public string get_Arn();
    public void set_Arn(string value);
    internal bool IsSetArn();
    public Domain get_Domain();
    public void set_Domain(Domain value);
    internal bool IsSetDomain();
    public EndpointType get_EndpointType();
    public void set_EndpointType(EndpointType value);
    internal bool IsSetEndpointType();
    public IdentityProviderType get_IdentityProviderType();
    public void set_IdentityProviderType(IdentityProviderType value);
    internal bool IsSetIdentityProviderType();
    public string get_LoggingRole();
    public void set_LoggingRole(string value);
    internal bool IsSetLoggingRole();
    public string get_ServerId();
    public void set_ServerId(string value);
    internal bool IsSetServerId();
    public State get_State();
    public void set_State(State value);
    internal bool IsSetState();
    public Nullable`1<int> get_UserCount();
    public void set_UserCount(Nullable`1<int> value);
    internal bool IsSetUserCount();
}
public class Amazon.Transfer.Model.ListedUser : object {
    private string _arn;
    private string _homeDirectory;
    private HomeDirectoryType _homeDirectoryType;
    private string _role;
    private Nullable`1<int> _sshPublicKeyCount;
    private string _userName;
    [AWSPropertyAttribute]
public string Arn { get; public set; }
    [AWSPropertyAttribute]
public string HomeDirectory { get; public set; }
    public HomeDirectoryType HomeDirectoryType { get; public set; }
    [AWSPropertyAttribute]
public string Role { get; public set; }
    public Nullable`1<int> SshPublicKeyCount { get; public set; }
    [AWSPropertyAttribute]
public string UserName { get; public set; }
    public string get_Arn();
    public void set_Arn(string value);
    internal bool IsSetArn();
    public string get_HomeDirectory();
    public void set_HomeDirectory(string value);
    internal bool IsSetHomeDirectory();
    public HomeDirectoryType get_HomeDirectoryType();
    public void set_HomeDirectoryType(HomeDirectoryType value);
    internal bool IsSetHomeDirectoryType();
    public string get_Role();
    public void set_Role(string value);
    internal bool IsSetRole();
    public Nullable`1<int> get_SshPublicKeyCount();
    public void set_SshPublicKeyCount(Nullable`1<int> value);
    internal bool IsSetSshPublicKeyCount();
    public string get_UserName();
    public void set_UserName(string value);
    internal bool IsSetUserName();
}
public class Amazon.Transfer.Model.ListedWorkflow : object {
    private string _arn;
    private string _description;
    private string _workflowId;
    [AWSPropertyAttribute]
public string Arn { get; public set; }
    [AWSPropertyAttribute]
public string Description { get; public set; }
    [AWSPropertyAttribute]
public string WorkflowId { get; public set; }
    public string get_Arn();
    public void set_Arn(string value);
    internal bool IsSetArn();
    public string get_Description();
    public void set_Description(string value);
    internal bool IsSetDescription();
    public string get_WorkflowId();
    public void set_WorkflowId(string value);
    internal bool IsSetWorkflowId();
}
internal class Amazon.Transfer.Model.ListExecutionsPaginator : object {
    private IAmazonTransfer _client;
    private ListExecutionsRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<ListExecutionsResponse> Responses { get; }
    public IPaginatedEnumerable`1<ListedExecution> Executions { get; }
    internal ListExecutionsPaginator(IAmazonTransfer client, ListExecutionsRequest request);
    public sealed virtual IPaginatedEnumerable`1<ListExecutionsResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<ListedExecution> get_Executions();
    [AsyncIteratorStateMachineAttribute("Amazon.Transfer.Model.ListExecutionsPaginator/<Amazon-Runtime-IPaginator<Amazon-Transfer-Model-ListExecutionsResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<ListExecutionsResponse> Amazon.Runtime.IPaginator<Amazon.Transfer.Model.ListExecutionsResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.Transfer.Model.ListExecutionsRequest : AmazonTransferRequest {
    private Nullable`1<int> _maxResults;
    private string _nextToken;
    private string _workflowId;
    [AWSPropertyAttribute]
public Nullable`1<int> MaxResults { get; public set; }
    [AWSPropertyAttribute]
public string NextToken { get; public set; }
    [AWSPropertyAttribute]
public string WorkflowId { get; public set; }
    public Nullable`1<int> get_MaxResults();
    public void set_MaxResults(Nullable`1<int> value);
    internal bool IsSetMaxResults();
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
    public string get_WorkflowId();
    public void set_WorkflowId(string value);
    internal bool IsSetWorkflowId();
}
public class Amazon.Transfer.Model.ListExecutionsResponse : AmazonWebServiceResponse {
    private List`1<ListedExecution> _executions;
    private string _nextToken;
    private string _workflowId;
    [AWSPropertyAttribute]
public List`1<ListedExecution> Executions { get; public set; }
    [AWSPropertyAttribute]
public string NextToken { get; public set; }
    [AWSPropertyAttribute]
public string WorkflowId { get; public set; }
    public List`1<ListedExecution> get_Executions();
    public void set_Executions(List`1<ListedExecution> value);
    internal bool IsSetExecutions();
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
    public string get_WorkflowId();
    public void set_WorkflowId(string value);
    internal bool IsSetWorkflowId();
}
public class Amazon.Transfer.Model.ListHostKeysRequest : AmazonTransferRequest {
    private Nullable`1<int> _maxResults;
    private string _nextToken;
    private string _serverId;
    [AWSPropertyAttribute]
public Nullable`1<int> MaxResults { get; public set; }
    [AWSPropertyAttribute]
public string NextToken { get; public set; }
    [AWSPropertyAttribute]
public string ServerId { get; public set; }
    public Nullable`1<int> get_MaxResults();
    public void set_MaxResults(Nullable`1<int> value);
    internal bool IsSetMaxResults();
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
    public string get_ServerId();
    public void set_ServerId(string value);
    internal bool IsSetServerId();
}
public class Amazon.Transfer.Model.ListHostKeysResponse : AmazonWebServiceResponse {
    private List`1<ListedHostKey> _hostKeys;
    private string _nextToken;
    private string _serverId;
    [AWSPropertyAttribute]
public List`1<ListedHostKey> HostKeys { get; public set; }
    [AWSPropertyAttribute]
public string NextToken { get; public set; }
    [AWSPropertyAttribute]
public string ServerId { get; public set; }
    public List`1<ListedHostKey> get_HostKeys();
    public void set_HostKeys(List`1<ListedHostKey> value);
    internal bool IsSetHostKeys();
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
    public string get_ServerId();
    public void set_ServerId(string value);
    internal bool IsSetServerId();
}
internal class Amazon.Transfer.Model.ListProfilesPaginator : object {
    private IAmazonTransfer _client;
    private ListProfilesRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<ListProfilesResponse> Responses { get; }
    public IPaginatedEnumerable`1<ListedProfile> Profiles { get; }
    internal ListProfilesPaginator(IAmazonTransfer client, ListProfilesRequest request);
    public sealed virtual IPaginatedEnumerable`1<ListProfilesResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<ListedProfile> get_Profiles();
    [AsyncIteratorStateMachineAttribute("Amazon.Transfer.Model.ListProfilesPaginator/<Amazon-Runtime-IPaginator<Amazon-Transfer-Model-ListProfilesResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<ListProfilesResponse> Amazon.Runtime.IPaginator<Amazon.Transfer.Model.ListProfilesResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.Transfer.Model.ListProfilesRequest : AmazonTransferRequest {
    private Nullable`1<int> _maxResults;
    private string _nextToken;
    private ProfileType _profileType;
    [AWSPropertyAttribute]
public Nullable`1<int> MaxResults { get; public set; }
    [AWSPropertyAttribute]
public string NextToken { get; public set; }
    public ProfileType ProfileType { get; public set; }
    public Nullable`1<int> get_MaxResults();
    public void set_MaxResults(Nullable`1<int> value);
    internal bool IsSetMaxResults();
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
    public ProfileType get_ProfileType();
    public void set_ProfileType(ProfileType value);
    internal bool IsSetProfileType();
}
public class Amazon.Transfer.Model.ListProfilesResponse : AmazonWebServiceResponse {
    private string _nextToken;
    private List`1<ListedProfile> _profiles;
    [AWSPropertyAttribute]
public string NextToken { get; public set; }
    [AWSPropertyAttribute]
public List`1<ListedProfile> Profiles { get; public set; }
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
    public List`1<ListedProfile> get_Profiles();
    public void set_Profiles(List`1<ListedProfile> value);
    internal bool IsSetProfiles();
}
internal class Amazon.Transfer.Model.ListSecurityPoliciesPaginator : object {
    private IAmazonTransfer _client;
    private ListSecurityPoliciesRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<ListSecurityPoliciesResponse> Responses { get; }
    public IPaginatedEnumerable`1<string> SecurityPolicyNames { get; }
    internal ListSecurityPoliciesPaginator(IAmazonTransfer client, ListSecurityPoliciesRequest request);
    public sealed virtual IPaginatedEnumerable`1<ListSecurityPoliciesResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<string> get_SecurityPolicyNames();
    [AsyncIteratorStateMachineAttribute("Amazon.Transfer.Model.ListSecurityPoliciesPaginator/<Amazon-Runtime-IPaginator<Amazon-Transfer-Model-ListSecurityPoliciesResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<ListSecurityPoliciesResponse> Amazon.Runtime.IPaginator<Amazon.Transfer.Model.ListSecurityPoliciesResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.Transfer.Model.ListSecurityPoliciesRequest : AmazonTransferRequest {
    private Nullable`1<int> _maxResults;
    private string _nextToken;
    [AWSPropertyAttribute]
public Nullable`1<int> MaxResults { get; public set; }
    [AWSPropertyAttribute]
public string NextToken { get; public set; }
    public Nullable`1<int> get_MaxResults();
    public void set_MaxResults(Nullable`1<int> value);
    internal bool IsSetMaxResults();
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
}
public class Amazon.Transfer.Model.ListSecurityPoliciesResponse : AmazonWebServiceResponse {
    private string _nextToken;
    private List`1<string> _securityPolicyNames;
    [AWSPropertyAttribute]
public string NextToken { get; public set; }
    [AWSPropertyAttribute]
public List`1<string> SecurityPolicyNames { get; public set; }
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
    public List`1<string> get_SecurityPolicyNames();
    public void set_SecurityPolicyNames(List`1<string> value);
    internal bool IsSetSecurityPolicyNames();
}
internal class Amazon.Transfer.Model.ListServersPaginator : object {
    private IAmazonTransfer _client;
    private ListServersRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<ListServersResponse> Responses { get; }
    public IPaginatedEnumerable`1<ListedServer> Servers { get; }
    internal ListServersPaginator(IAmazonTransfer client, ListServersRequest request);
    public sealed virtual IPaginatedEnumerable`1<ListServersResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<ListedServer> get_Servers();
    [AsyncIteratorStateMachineAttribute("Amazon.Transfer.Model.ListServersPaginator/<Amazon-Runtime-IPaginator<Amazon-Transfer-Model-ListServersResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<ListServersResponse> Amazon.Runtime.IPaginator<Amazon.Transfer.Model.ListServersResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.Transfer.Model.ListServersRequest : AmazonTransferRequest {
    private Nullable`1<int> _maxResults;
    private string _nextToken;
    [AWSPropertyAttribute]
public Nullable`1<int> MaxResults { get; public set; }
    [AWSPropertyAttribute]
public string NextToken { get; public set; }
    public Nullable`1<int> get_MaxResults();
    public void set_MaxResults(Nullable`1<int> value);
    internal bool IsSetMaxResults();
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
}
public class Amazon.Transfer.Model.ListServersResponse : AmazonWebServiceResponse {
    private string _nextToken;
    private List`1<ListedServer> _servers;
    [AWSPropertyAttribute]
public string NextToken { get; public set; }
    [AWSPropertyAttribute]
public List`1<ListedServer> Servers { get; public set; }
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
    public List`1<ListedServer> get_Servers();
    public void set_Servers(List`1<ListedServer> value);
    internal bool IsSetServers();
}
internal class Amazon.Transfer.Model.ListTagsForResourcePaginator : object {
    private IAmazonTransfer _client;
    private ListTagsForResourceRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<ListTagsForResourceResponse> Responses { get; }
    public IPaginatedEnumerable`1<Tag> Tags { get; }
    internal ListTagsForResourcePaginator(IAmazonTransfer client, ListTagsForResourceRequest request);
    public sealed virtual IPaginatedEnumerable`1<ListTagsForResourceResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<Tag> get_Tags();
    [AsyncIteratorStateMachineAttribute("Amazon.Transfer.Model.ListTagsForResourcePaginator/<Amazon-Runtime-IPaginator<Amazon-Transfer-Model-ListTagsForResourceResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<ListTagsForResourceResponse> Amazon.Runtime.IPaginator<Amazon.Transfer.Model.ListTagsForResourceResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.Transfer.Model.ListTagsForResourceRequest : AmazonTransferRequest {
    private string _arn;
    private Nullable`1<int> _maxResults;
    private string _nextToken;
    [AWSPropertyAttribute]
public string Arn { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> MaxResults { get; public set; }
    [AWSPropertyAttribute]
public string NextToken { get; public set; }
    public string get_Arn();
    public void set_Arn(string value);
    internal bool IsSetArn();
    public Nullable`1<int> get_MaxResults();
    public void set_MaxResults(Nullable`1<int> value);
    internal bool IsSetMaxResults();
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
}
public class Amazon.Transfer.Model.ListTagsForResourceResponse : AmazonWebServiceResponse {
    private string _arn;
    private string _nextToken;
    private List`1<Tag> _tags;
    [AWSPropertyAttribute]
public string Arn { get; public set; }
    [AWSPropertyAttribute]
public string NextToken { get; public set; }
    [AWSPropertyAttribute]
public List`1<Tag> Tags { get; public set; }
    public string get_Arn();
    public void set_Arn(string value);
    internal bool IsSetArn();
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
}
internal class Amazon.Transfer.Model.ListUsersPaginator : object {
    private IAmazonTransfer _client;
    private ListUsersRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<ListUsersResponse> Responses { get; }
    public IPaginatedEnumerable`1<ListedUser> Users { get; }
    internal ListUsersPaginator(IAmazonTransfer client, ListUsersRequest request);
    public sealed virtual IPaginatedEnumerable`1<ListUsersResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<ListedUser> get_Users();
    [AsyncIteratorStateMachineAttribute("Amazon.Transfer.Model.ListUsersPaginator/<Amazon-Runtime-IPaginator<Amazon-Transfer-Model-ListUsersResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<ListUsersResponse> Amazon.Runtime.IPaginator<Amazon.Transfer.Model.ListUsersResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.Transfer.Model.ListUsersRequest : AmazonTransferRequest {
    private Nullable`1<int> _maxResults;
    private string _nextToken;
    private string _serverId;
    [AWSPropertyAttribute]
public Nullable`1<int> MaxResults { get; public set; }
    [AWSPropertyAttribute]
public string NextToken { get; public set; }
    [AWSPropertyAttribute]
public string ServerId { get; public set; }
    public Nullable`1<int> get_MaxResults();
    public void set_MaxResults(Nullable`1<int> value);
    internal bool IsSetMaxResults();
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
    public string get_ServerId();
    public void set_ServerId(string value);
    internal bool IsSetServerId();
}
public class Amazon.Transfer.Model.ListUsersResponse : AmazonWebServiceResponse {
    private string _nextToken;
    private string _serverId;
    private List`1<ListedUser> _users;
    [AWSPropertyAttribute]
public string NextToken { get; public set; }
    [AWSPropertyAttribute]
public string ServerId { get; public set; }
    [AWSPropertyAttribute]
public List`1<ListedUser> Users { get; public set; }
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
    public string get_ServerId();
    public void set_ServerId(string value);
    internal bool IsSetServerId();
    public List`1<ListedUser> get_Users();
    public void set_Users(List`1<ListedUser> value);
    internal bool IsSetUsers();
}
internal class Amazon.Transfer.Model.ListWorkflowsPaginator : object {
    private IAmazonTransfer _client;
    private ListWorkflowsRequest _request;
    private int _isPaginatorInUse;
    public IPaginatedEnumerable`1<ListWorkflowsResponse> Responses { get; }
    public IPaginatedEnumerable`1<ListedWorkflow> Workflows { get; }
    internal ListWorkflowsPaginator(IAmazonTransfer client, ListWorkflowsRequest request);
    public sealed virtual IPaginatedEnumerable`1<ListWorkflowsResponse> get_Responses();
    public sealed virtual IPaginatedEnumerable`1<ListedWorkflow> get_Workflows();
    [AsyncIteratorStateMachineAttribute("Amazon.Transfer.Model.ListWorkflowsPaginator/<Amazon-Runtime-IPaginator<Amazon-Transfer-Model-ListWorkflowsResponse>-PaginateAsync>d__8")]
private sealed virtual override IAsyncEnumerable`1<ListWorkflowsResponse> Amazon.Runtime.IPaginator<Amazon.Transfer.Model.ListWorkflowsResponse>.PaginateAsync(CancellationToken cancellationToken);
}
public class Amazon.Transfer.Model.ListWorkflowsRequest : AmazonTransferRequest {
    private Nullable`1<int> _maxResults;
    private string _nextToken;
    [AWSPropertyAttribute]
public Nullable`1<int> MaxResults { get; public set; }
    [AWSPropertyAttribute]
public string NextToken { get; public set; }
    public Nullable`1<int> get_MaxResults();
    public void set_MaxResults(Nullable`1<int> value);
    internal bool IsSetMaxResults();
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
}
public class Amazon.Transfer.Model.ListWorkflowsResponse : AmazonWebServiceResponse {
    private string _nextToken;
    private List`1<ListedWorkflow> _workflows;
    [AWSPropertyAttribute]
public string NextToken { get; public set; }
    [AWSPropertyAttribute]
public List`1<ListedWorkflow> Workflows { get; public set; }
    public string get_NextToken();
    public void set_NextToken(string value);
    internal bool IsSetNextToken();
    public List`1<ListedWorkflow> get_Workflows();
    public void set_Workflows(List`1<ListedWorkflow> value);
    internal bool IsSetWorkflows();
}
public class Amazon.Transfer.Model.LoggingConfiguration : object {
    private string _loggingRole;
    private string _logGroupName;
    [AWSPropertyAttribute]
public string LoggingRole { get; public set; }
    [AWSPropertyAttribute]
public string LogGroupName { get; public set; }
    public string get_LoggingRole();
    public void set_LoggingRole(string value);
    internal bool IsSetLoggingRole();
    public string get_LogGroupName();
    public void set_LogGroupName(string value);
    internal bool IsSetLogGroupName();
}
public class Amazon.Transfer.Model.PosixProfile : object {
    private Nullable`1<long> _gid;
    private List`1<long> _secondaryGids;
    private Nullable`1<long> _uid;
    [AWSPropertyAttribute]
public Nullable`1<long> Gid { get; public set; }
    [AWSPropertyAttribute]
public List`1<long> SecondaryGids { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<long> Uid { get; public set; }
    public Nullable`1<long> get_Gid();
    public void set_Gid(Nullable`1<long> value);
    internal bool IsSetGid();
    public List`1<long> get_SecondaryGids();
    public void set_SecondaryGids(List`1<long> value);
    internal bool IsSetSecondaryGids();
    public Nullable`1<long> get_Uid();
    public void set_Uid(Nullable`1<long> value);
    internal bool IsSetUid();
}
public class Amazon.Transfer.Model.ProtocolDetails : object {
    private List`1<string> _as2Transports;
    private string _passiveIp;
    private SetStatOption _setStatOption;
    private TlsSessionResumptionMode _tlsSessionResumptionMode;
    [AWSPropertyAttribute]
public List`1<string> As2Transports { get; public set; }
    [AWSPropertyAttribute]
public string PassiveIp { get; public set; }
    public SetStatOption SetStatOption { get; public set; }
    public TlsSessionResumptionMode TlsSessionResumptionMode { get; public set; }
    public List`1<string> get_As2Transports();
    public void set_As2Transports(List`1<string> value);
    internal bool IsSetAs2Transports();
    public string get_PassiveIp();
    public void set_PassiveIp(string value);
    internal bool IsSetPassiveIp();
    public SetStatOption get_SetStatOption();
    public void set_SetStatOption(SetStatOption value);
    internal bool IsSetSetStatOption();
    public TlsSessionResumptionMode get_TlsSessionResumptionMode();
    public void set_TlsSessionResumptionMode(TlsSessionResumptionMode value);
    internal bool IsSetTlsSessionResumptionMode();
}
public class Amazon.Transfer.Model.ResourceExistsException : AmazonTransferException {
    private string _resource;
    private string _resourceType;
    [AWSPropertyAttribute]
public string Resource { get; public set; }
    [AWSPropertyAttribute]
public string ResourceType { get; public set; }
    public ResourceExistsException(string message);
    public ResourceExistsException(string message, Exception innerException);
    public ResourceExistsException(Exception innerException);
    public ResourceExistsException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public ResourceExistsException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public string get_Resource();
    public void set_Resource(string value);
    internal bool IsSetResource();
    public string get_ResourceType();
    public void set_ResourceType(string value);
    internal bool IsSetResourceType();
}
public class Amazon.Transfer.Model.ResourceNotFoundException : AmazonTransferException {
    private string _resource;
    private string _resourceType;
    [AWSPropertyAttribute]
public string Resource { get; public set; }
    [AWSPropertyAttribute]
public string ResourceType { get; public set; }
    public ResourceNotFoundException(string message);
    public ResourceNotFoundException(string message, Exception innerException);
    public ResourceNotFoundException(Exception innerException);
    public ResourceNotFoundException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public ResourceNotFoundException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public string get_Resource();
    public void set_Resource(string value);
    internal bool IsSetResource();
    public string get_ResourceType();
    public void set_ResourceType(string value);
    internal bool IsSetResourceType();
}
public class Amazon.Transfer.Model.S3FileLocation : object {
    private string _bucket;
    private string _etag;
    private string _key;
    private string _versionId;
    [AWSPropertyAttribute]
public string Bucket { get; public set; }
    [AWSPropertyAttribute]
public string Etag { get; public set; }
    [AWSPropertyAttribute]
public string Key { get; public set; }
    [AWSPropertyAttribute]
public string VersionId { get; public set; }
    public string get_Bucket();
    public void set_Bucket(string value);
    internal bool IsSetBucket();
    public string get_Etag();
    public void set_Etag(string value);
    internal bool IsSetEtag();
    public string get_Key();
    public void set_Key(string value);
    internal bool IsSetKey();
    public string get_VersionId();
    public void set_VersionId(string value);
    internal bool IsSetVersionId();
}
public class Amazon.Transfer.Model.S3InputFileLocation : object {
    private string _bucket;
    private string _key;
    [AWSPropertyAttribute]
public string Bucket { get; public set; }
    [AWSPropertyAttribute]
public string Key { get; public set; }
    public string get_Bucket();
    public void set_Bucket(string value);
    internal bool IsSetBucket();
    public string get_Key();
    public void set_Key(string value);
    internal bool IsSetKey();
}
public class Amazon.Transfer.Model.S3StorageOptions : object {
    private DirectoryListingOptimization _directoryListingOptimization;
    public DirectoryListingOptimization DirectoryListingOptimization { get; public set; }
    public DirectoryListingOptimization get_DirectoryListingOptimization();
    public void set_DirectoryListingOptimization(DirectoryListingOptimization value);
    internal bool IsSetDirectoryListingOptimization();
}
public class Amazon.Transfer.Model.S3Tag : object {
    private string _key;
    private string _value;
    [AWSPropertyAttribute]
public string Key { get; public set; }
    [AWSPropertyAttribute]
public string Value { get; public set; }
    public string get_Key();
    public void set_Key(string value);
    internal bool IsSetKey();
    public string get_Value();
    public void set_Value(string value);
    internal bool IsSetValue();
}
public class Amazon.Transfer.Model.SendWorkflowStepStateRequest : AmazonTransferRequest {
    private string _executionId;
    private CustomStepStatus _status;
    private string _token;
    private string _workflowId;
    [AWSPropertyAttribute]
public string ExecutionId { get; public set; }
    [AWSPropertyAttribute]
public CustomStepStatus Status { get; public set; }
    [AWSPropertyAttribute]
public string Token { get; public set; }
    [AWSPropertyAttribute]
public string WorkflowId { get; public set; }
    public string get_ExecutionId();
    public void set_ExecutionId(string value);
    internal bool IsSetExecutionId();
    public CustomStepStatus get_Status();
    public void set_Status(CustomStepStatus value);
    internal bool IsSetStatus();
    public string get_Token();
    public void set_Token(string value);
    internal bool IsSetToken();
    public string get_WorkflowId();
    public void set_WorkflowId(string value);
    internal bool IsSetWorkflowId();
}
public class Amazon.Transfer.Model.SendWorkflowStepStateResponse : AmazonWebServiceResponse {
}
public class Amazon.Transfer.Model.ServiceMetadata : object {
    private UserDetails _userDetails;
    [AWSPropertyAttribute]
public UserDetails UserDetails { get; public set; }
    public UserDetails get_UserDetails();
    public void set_UserDetails(UserDetails value);
    internal bool IsSetUserDetails();
}
public class Amazon.Transfer.Model.ServiceUnavailableException : AmazonTransferException {
    public ServiceUnavailableException(string message);
    public ServiceUnavailableException(string message, Exception innerException);
    public ServiceUnavailableException(Exception innerException);
    public ServiceUnavailableException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public ServiceUnavailableException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
}
public class Amazon.Transfer.Model.SftpConnectorConfig : object {
    private List`1<string> _trustedHostKeys;
    private string _userSecretId;
    [AWSPropertyAttribute]
public List`1<string> TrustedHostKeys { get; public set; }
    [AWSPropertyAttribute]
public string UserSecretId { get; public set; }
    public List`1<string> get_TrustedHostKeys();
    public void set_TrustedHostKeys(List`1<string> value);
    internal bool IsSetTrustedHostKeys();
    public string get_UserSecretId();
    public void set_UserSecretId(string value);
    internal bool IsSetUserSecretId();
}
public class Amazon.Transfer.Model.SshPublicKey : object {
    private Nullable`1<DateTime> _dateImported;
    private string _sshPublicKeyBody;
    private string _sshPublicKeyId;
    [AWSPropertyAttribute]
public Nullable`1<DateTime> DateImported { get; public set; }
    [AWSPropertyAttribute]
public string SshPublicKeyBody { get; public set; }
    [AWSPropertyAttribute]
public string SshPublicKeyId { get; public set; }
    public Nullable`1<DateTime> get_DateImported();
    public void set_DateImported(Nullable`1<DateTime> value);
    internal bool IsSetDateImported();
    public string get_SshPublicKeyBody();
    public void set_SshPublicKeyBody(string value);
    internal bool IsSetSshPublicKeyBody();
    public string get_SshPublicKeyId();
    public void set_SshPublicKeyId(string value);
    internal bool IsSetSshPublicKeyId();
}
public class Amazon.Transfer.Model.StartDirectoryListingRequest : AmazonTransferRequest {
    private string _connectorId;
    private Nullable`1<int> _maxItems;
    private string _outputDirectoryPath;
    private string _remoteDirectoryPath;
    [AWSPropertyAttribute]
public string ConnectorId { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> MaxItems { get; public set; }
    [AWSPropertyAttribute]
public string OutputDirectoryPath { get; public set; }
    [AWSPropertyAttribute]
public string RemoteDirectoryPath { get; public set; }
    public string get_ConnectorId();
    public void set_ConnectorId(string value);
    internal bool IsSetConnectorId();
    public Nullable`1<int> get_MaxItems();
    public void set_MaxItems(Nullable`1<int> value);
    internal bool IsSetMaxItems();
    public string get_OutputDirectoryPath();
    public void set_OutputDirectoryPath(string value);
    internal bool IsSetOutputDirectoryPath();
    public string get_RemoteDirectoryPath();
    public void set_RemoteDirectoryPath(string value);
    internal bool IsSetRemoteDirectoryPath();
}
public class Amazon.Transfer.Model.StartDirectoryListingResponse : AmazonWebServiceResponse {
    private string _listingId;
    private string _outputFileName;
    [AWSPropertyAttribute]
public string ListingId { get; public set; }
    [AWSPropertyAttribute]
public string OutputFileName { get; public set; }
    public string get_ListingId();
    public void set_ListingId(string value);
    internal bool IsSetListingId();
    public string get_OutputFileName();
    public void set_OutputFileName(string value);
    internal bool IsSetOutputFileName();
}
public class Amazon.Transfer.Model.StartFileTransferRequest : AmazonTransferRequest {
    private string _connectorId;
    private string _localDirectoryPath;
    private string _remoteDirectoryPath;
    private List`1<string> _retrieveFilePaths;
    private List`1<string> _sendFilePaths;
    [AWSPropertyAttribute]
public string ConnectorId { get; public set; }
    [AWSPropertyAttribute]
public string LocalDirectoryPath { get; public set; }
    [AWSPropertyAttribute]
public string RemoteDirectoryPath { get; public set; }
    [AWSPropertyAttribute]
public List`1<string> RetrieveFilePaths { get; public set; }
    [AWSPropertyAttribute]
public List`1<string> SendFilePaths { get; public set; }
    public string get_ConnectorId();
    public void set_ConnectorId(string value);
    internal bool IsSetConnectorId();
    public string get_LocalDirectoryPath();
    public void set_LocalDirectoryPath(string value);
    internal bool IsSetLocalDirectoryPath();
    public string get_RemoteDirectoryPath();
    public void set_RemoteDirectoryPath(string value);
    internal bool IsSetRemoteDirectoryPath();
    public List`1<string> get_RetrieveFilePaths();
    public void set_RetrieveFilePaths(List`1<string> value);
    internal bool IsSetRetrieveFilePaths();
    public List`1<string> get_SendFilePaths();
    public void set_SendFilePaths(List`1<string> value);
    internal bool IsSetSendFilePaths();
}
public class Amazon.Transfer.Model.StartFileTransferResponse : AmazonWebServiceResponse {
    private string _transferId;
    [AWSPropertyAttribute]
public string TransferId { get; public set; }
    public string get_TransferId();
    public void set_TransferId(string value);
    internal bool IsSetTransferId();
}
public class Amazon.Transfer.Model.StartServerRequest : AmazonTransferRequest {
    private string _serverId;
    [AWSPropertyAttribute]
public string ServerId { get; public set; }
    public string get_ServerId();
    public void set_ServerId(string value);
    internal bool IsSetServerId();
}
public class Amazon.Transfer.Model.StartServerResponse : AmazonWebServiceResponse {
}
public class Amazon.Transfer.Model.StopServerRequest : AmazonTransferRequest {
    private string _serverId;
    [AWSPropertyAttribute]
public string ServerId { get; public set; }
    public string get_ServerId();
    public void set_ServerId(string value);
    internal bool IsSetServerId();
}
public class Amazon.Transfer.Model.StopServerResponse : AmazonWebServiceResponse {
}
public class Amazon.Transfer.Model.Tag : object {
    private string _key;
    private string _value;
    [AWSPropertyAttribute]
public string Key { get; public set; }
    [AWSPropertyAttribute]
public string Value { get; public set; }
    public string get_Key();
    public void set_Key(string value);
    internal bool IsSetKey();
    public string get_Value();
    public void set_Value(string value);
    internal bool IsSetValue();
}
public class Amazon.Transfer.Model.TagResourceRequest : AmazonTransferRequest {
    private string _arn;
    private List`1<Tag> _tags;
    [AWSPropertyAttribute]
public string Arn { get; public set; }
    [AWSPropertyAttribute]
public List`1<Tag> Tags { get; public set; }
    public string get_Arn();
    public void set_Arn(string value);
    internal bool IsSetArn();
    public List`1<Tag> get_Tags();
    public void set_Tags(List`1<Tag> value);
    internal bool IsSetTags();
}
public class Amazon.Transfer.Model.TagResourceResponse : AmazonWebServiceResponse {
}
public class Amazon.Transfer.Model.TagStepDetails : object {
    private string _name;
    private string _sourceFileLocation;
    private List`1<S3Tag> _tags;
    [AWSPropertyAttribute]
public string Name { get; public set; }
    [AWSPropertyAttribute]
public string SourceFileLocation { get; public set; }
    [AWSPropertyAttribute]
public List`1<S3Tag> Tags { get; public set; }
    public string get_Name();
    public void set_Name(string value);
    internal bool IsSetName();
    public string get_SourceFileLocation();
    public void set_SourceFileLocation(string value);
    internal bool IsSetSourceFileLocation();
    public List`1<S3Tag> get_Tags();
    public void set_Tags(List`1<S3Tag> value);
    internal bool IsSetTags();
}
public class Amazon.Transfer.Model.TestConnectionRequest : AmazonTransferRequest {
    private string _connectorId;
    [AWSPropertyAttribute]
public string ConnectorId { get; public set; }
    public string get_ConnectorId();
    public void set_ConnectorId(string value);
    internal bool IsSetConnectorId();
}
public class Amazon.Transfer.Model.TestConnectionResponse : AmazonWebServiceResponse {
    private string _connectorId;
    private string _status;
    private string _statusMessage;
    [AWSPropertyAttribute]
public string ConnectorId { get; public set; }
    public string Status { get; public set; }
    public string StatusMessage { get; public set; }
    public string get_ConnectorId();
    public void set_ConnectorId(string value);
    internal bool IsSetConnectorId();
    public string get_Status();
    public void set_Status(string value);
    internal bool IsSetStatus();
    public string get_StatusMessage();
    public void set_StatusMessage(string value);
    internal bool IsSetStatusMessage();
}
public class Amazon.Transfer.Model.TestIdentityProviderRequest : AmazonTransferRequest {
    private string _serverId;
    private Protocol _serverProtocol;
    private string _sourceIp;
    private string _userName;
    private string _userPassword;
    [AWSPropertyAttribute]
public string ServerId { get; public set; }
    public Protocol ServerProtocol { get; public set; }
    [AWSPropertyAttribute]
public string SourceIp { get; public set; }
    [AWSPropertyAttribute]
public string UserName { get; public set; }
    [AWSPropertyAttribute]
public string UserPassword { get; public set; }
    public string get_ServerId();
    public void set_ServerId(string value);
    internal bool IsSetServerId();
    public Protocol get_ServerProtocol();
    public void set_ServerProtocol(Protocol value);
    internal bool IsSetServerProtocol();
    public string get_SourceIp();
    public void set_SourceIp(string value);
    internal bool IsSetSourceIp();
    public string get_UserName();
    public void set_UserName(string value);
    internal bool IsSetUserName();
    public string get_UserPassword();
    public void set_UserPassword(string value);
    internal bool IsSetUserPassword();
}
public class Amazon.Transfer.Model.TestIdentityProviderResponse : AmazonWebServiceResponse {
    private string _message;
    private string _response;
    private Nullable`1<int> _statusCode;
    private string _url;
    public string Message { get; public set; }
    public string Response { get; public set; }
    [AWSPropertyAttribute]
public Nullable`1<int> StatusCode { get; public set; }
    [AWSPropertyAttribute]
public string Url { get; public set; }
    public string get_Message();
    public void set_Message(string value);
    internal bool IsSetMessage();
    public string get_Response();
    public void set_Response(string value);
    internal bool IsSetResponse();
    public Nullable`1<int> get_StatusCode();
    public void set_StatusCode(Nullable`1<int> value);
    internal bool IsSetStatusCode();
    public string get_Url();
    public void set_Url(string value);
    internal bool IsSetUrl();
}
public class Amazon.Transfer.Model.ThrottlingException : AmazonTransferException {
    private string _retryAfterSeconds;
    public string RetryAfterSeconds { get; public set; }
    public ThrottlingException(string message);
    public ThrottlingException(string message, Exception innerException);
    public ThrottlingException(Exception innerException);
    public ThrottlingException(string message, Exception innerException, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public ThrottlingException(string message, ErrorType errorType, string errorCode, string requestId, HttpStatusCode statusCode);
    public string get_RetryAfterSeconds();
    public void set_RetryAfterSeconds(string value);
    internal bool IsSetRetryAfterSeconds();
}
public class Amazon.Transfer.Model.TransferPaginatorFactory : object {
    private IAmazonTransfer client;
    internal TransferPaginatorFactory(IAmazonTransfer client);
    public sealed virtual IListAccessesPaginator ListAccesses(ListAccessesRequest request);
    public sealed virtual IListAgreementsPaginator ListAgreements(ListAgreementsRequest request);
    public sealed virtual IListCertificatesPaginator ListCertificates(ListCertificatesRequest request);
    public sealed virtual IListConnectorsPaginator ListConnectors(ListConnectorsRequest request);
    public sealed virtual IListExecutionsPaginator ListExecutions(ListExecutionsRequest request);
    public sealed virtual IListProfilesPaginator ListProfiles(ListProfilesRequest request);
    public sealed virtual IListSecurityPoliciesPaginator ListSecurityPolicies(ListSecurityPoliciesRequest request);
    public sealed virtual IListServersPaginator ListServers(ListServersRequest request);
    public sealed virtual IListTagsForResourcePaginator ListTagsForResource(ListTagsForResourceRequest request);
    public sealed virtual IListUsersPaginator ListUsers(ListUsersRequest request);
    public sealed virtual IListWorkflowsPaginator ListWorkflows(ListWorkflowsRequest request);
}
public class Amazon.Transfer.Model.UntagResourceRequest : AmazonTransferRequest {
    private string _arn;
    private List`1<string> _tagKeys;
    [AWSPropertyAttribute]
public string Arn { get; public set; }
    [AWSPropertyAttribute]
public List`1<string> TagKeys { get; public set; }
    public string get_Arn();
    public void set_Arn(string value);
    internal bool IsSetArn();
    public List`1<string> get_TagKeys();
    public void set_TagKeys(List`1<string> value);
    internal bool IsSetTagKeys();
}
public class Amazon.Transfer.Model.UntagResourceResponse : AmazonWebServiceResponse {
}
public class Amazon.Transfer.Model.UpdateAccessRequest : AmazonTransferRequest {
    private string _externalId;
    private string _homeDirectory;
    private List`1<HomeDirectoryMapEntry> _homeDirectoryMappings;
    private HomeDirectoryType _homeDirectoryType;
    private string _policy;
    private PosixProfile _posixProfile;
    private string _role;
    private string _serverId;
    [AWSPropertyAttribute]
public string ExternalId { get; public set; }
    [AWSPropertyAttribute]
public string HomeDirectory { get; public set; }
    [AWSPropertyAttribute]
public List`1<HomeDirectoryMapEntry> HomeDirectoryMappings { get; public set; }
    public HomeDirectoryType HomeDirectoryType { get; public set; }
    [AWSPropertyAttribute]
public string Policy { get; public set; }
    public PosixProfile PosixProfile { get; public set; }
    [AWSPropertyAttribute]
public string Role { get; public set; }
    [AWSPropertyAttribute]
public string ServerId { get; public set; }
    public string get_ExternalId();
    public void set_ExternalId(string value);
    internal bool IsSetExternalId();
    public string get_HomeDirectory();
    public void set_HomeDirectory(string value);
    internal bool IsSetHomeDirectory();
    public List`1<HomeDirectoryMapEntry> get_HomeDirectoryMappings();
    public void set_HomeDirectoryMappings(List`1<HomeDirectoryMapEntry> value);
    internal bool IsSetHomeDirectoryMappings();
    public HomeDirectoryType get_HomeDirectoryType();
    public void set_HomeDirectoryType(HomeDirectoryType value);
    internal bool IsSetHomeDirectoryType();
    public string get_Policy();
    public void set_Policy(string value);
    internal bool IsSetPolicy();
    public PosixProfile get_PosixProfile();
    public void set_PosixProfile(PosixProfile value);
    internal bool IsSetPosixProfile();
    public string get_Role();
    public void set_Role(string value);
    internal bool IsSetRole();
    public string get_ServerId();
    public void set_ServerId(string value);
    internal bool IsSetServerId();
}
public class Amazon.Transfer.Model.UpdateAccessResponse : AmazonWebServiceResponse {
    private string _externalId;
    private string _serverId;
    [AWSPropertyAttribute]
public string ExternalId { get; public set; }
    [AWSPropertyAttribute]
public string ServerId { get; public set; }
    public string get_ExternalId();
    public void set_ExternalId(string value);
    internal bool IsSetExternalId();
    public string get_ServerId();
    public void set_ServerId(string value);
    internal bool IsSetServerId();
}
public class Amazon.Transfer.Model.UpdateAgreementRequest : AmazonTransferRequest {
    private string _accessRole;
    private string _agreementId;
    private string _baseDirectory;
    private string _description;
    private string _localProfileId;
    private string _partnerProfileId;
    private string _serverId;
    private AgreementStatusType _status;
    [AWSPropertyAttribute]
public string AccessRole { get; public set; }
    [AWSPropertyAttribute]
public string AgreementId { get; public set; }
    [AWSPropertyAttribute]
public string BaseDirectory { get; public set; }
    [AWSPropertyAttribute]
public string Description { get; public set; }
    [AWSPropertyAttribute]
public string LocalProfileId { get; public set; }
    [AWSPropertyAttribute]
public string PartnerProfileId { get; public set; }
    [AWSPropertyAttribute]
public string ServerId { get; public set; }
    public AgreementStatusType Status { get; public set; }
    public string get_AccessRole();
    public void set_AccessRole(string value);
    internal bool IsSetAccessRole();
    public string get_AgreementId();
    public void set_AgreementId(string value);
    internal bool IsSetAgreementId();
    public string get_BaseDirectory();
    public void set_BaseDirectory(string value);
    internal bool IsSetBaseDirectory();
    public string get_Description();
    public void set_Description(string value);
    internal bool IsSetDescription();
    public string get_LocalProfileId();
    public void set_LocalProfileId(string value);
    internal bool IsSetLocalProfileId();
    public string get_PartnerProfileId();
    public void set_PartnerProfileId(string value);
    internal bool IsSetPartnerProfileId();
    public string get_ServerId();
    public void set_ServerId(string value);
    internal bool IsSetServerId();
    public AgreementStatusType get_Status();
    public void set_Status(AgreementStatusType value);
    internal bool IsSetStatus();
}
public class Amazon.Transfer.Model.UpdateAgreementResponse : AmazonWebServiceResponse {
    private string _agreementId;
    [AWSPropertyAttribute]
public string AgreementId { get; public set; }
    public string get_AgreementId();
    public void set_AgreementId(string value);
    internal bool IsSetAgreementId();
}
public class Amazon.Transfer.Model.UpdateCertificateRequest : AmazonTransferRequest {
    private Nullable`1<DateTime> _activeDate;
    private string _certificateId;
    private string _description;
    private Nullable`1<DateTime> _inactiveDate;
    public Nullable`1<DateTime> ActiveDate { get; public set; }
    [AWSPropertyAttribute]
public string CertificateId { get; public set; }
    [AWSPropertyAttribute]
public string Description { get; public set; }
    public Nullable`1<DateTime> InactiveDate { get; public set; }
    public Nullable`1<DateTime> get_ActiveDate();
    public void set_ActiveDate(Nullable`1<DateTime> value);
    internal bool IsSetActiveDate();
    public string get_CertificateId();
    public void set_CertificateId(string value);
    internal bool IsSetCertificateId();
    public string get_Description();
    public void set_Description(string value);
    internal bool IsSetDescription();
    public Nullable`1<DateTime> get_InactiveDate();
    public void set_InactiveDate(Nullable`1<DateTime> value);
    internal bool IsSetInactiveDate();
}
public class Amazon.Transfer.Model.UpdateCertificateResponse : AmazonWebServiceResponse {
    private string _certificateId;
    [AWSPropertyAttribute]
public string CertificateId { get; public set; }
    public string get_CertificateId();
    public void set_CertificateId(string value);
    internal bool IsSetCertificateId();
}
public class Amazon.Transfer.Model.UpdateConnectorRequest : AmazonTransferRequest {
    private string _accessRole;
    private As2ConnectorConfig _as2Config;
    private string _connectorId;
    private string _loggingRole;
    private string _securityPolicyName;
    private SftpConnectorConfig _sftpConfig;
    private string _url;
    [AWSPropertyAttribute]
public string AccessRole { get; public set; }
    public As2ConnectorConfig As2Config { get; public set; }
    [AWSPropertyAttribute]
public string ConnectorId { get; public set; }
    [AWSPropertyAttribute]
public string LoggingRole { get; public set; }
    [AWSPropertyAttribute]
public string SecurityPolicyName { get; public set; }
    public SftpConnectorConfig SftpConfig { get; public set; }
    [AWSPropertyAttribute]
public string Url { get; public set; }
    public string get_AccessRole();
    public void set_AccessRole(string value);
    internal bool IsSetAccessRole();
    public As2ConnectorConfig get_As2Config();
    public void set_As2Config(As2ConnectorConfig value);
    internal bool IsSetAs2Config();
    public string get_ConnectorId();
    public void set_ConnectorId(string value);
    internal bool IsSetConnectorId();
    public string get_LoggingRole();
    public void set_LoggingRole(string value);
    internal bool IsSetLoggingRole();
    public string get_SecurityPolicyName();
    public void set_SecurityPolicyName(string value);
    internal bool IsSetSecurityPolicyName();
    public SftpConnectorConfig get_SftpConfig();
    public void set_SftpConfig(SftpConnectorConfig value);
    internal bool IsSetSftpConfig();
    public string get_Url();
    public void set_Url(string value);
    internal bool IsSetUrl();
}
public class Amazon.Transfer.Model.UpdateConnectorResponse : AmazonWebServiceResponse {
    private string _connectorId;
    [AWSPropertyAttribute]
public string ConnectorId { get; public set; }
    public string get_ConnectorId();
    public void set_ConnectorId(string value);
    internal bool IsSetConnectorId();
}
public class Amazon.Transfer.Model.UpdateHostKeyRequest : AmazonTransferRequest {
    private string _description;
    private string _hostKeyId;
    private string _serverId;
    [AWSPropertyAttribute]
public string Description { get; public set; }
    [AWSPropertyAttribute]
public string HostKeyId { get; public set; }
    [AWSPropertyAttribute]
public string ServerId { get; public set; }
    public string get_Description();
    public void set_Description(string value);
    internal bool IsSetDescription();
    public string get_HostKeyId();
    public void set_HostKeyId(string value);
    internal bool IsSetHostKeyId();
    public string get_ServerId();
    public void set_ServerId(string value);
    internal bool IsSetServerId();
}
public class Amazon.Transfer.Model.UpdateHostKeyResponse : AmazonWebServiceResponse {
    private string _hostKeyId;
    private string _serverId;
    [AWSPropertyAttribute]
public string HostKeyId { get; public set; }
    [AWSPropertyAttribute]
public string ServerId { get; public set; }
    public string get_HostKeyId();
    public void set_HostKeyId(string value);
    internal bool IsSetHostKeyId();
    public string get_ServerId();
    public void set_ServerId(string value);
    internal bool IsSetServerId();
}
public class Amazon.Transfer.Model.UpdateProfileRequest : AmazonTransferRequest {
    private List`1<string> _certificateIds;
    private string _profileId;
    public List`1<string> CertificateIds { get; public set; }
    [AWSPropertyAttribute]
public string ProfileId { get; public set; }
    public List`1<string> get_CertificateIds();
    public void set_CertificateIds(List`1<string> value);
    internal bool IsSetCertificateIds();
    public string get_ProfileId();
    public void set_ProfileId(string value);
    internal bool IsSetProfileId();
}
public class Amazon.Transfer.Model.UpdateProfileResponse : AmazonWebServiceResponse {
    private string _profileId;
    [AWSPropertyAttribute]
public string ProfileId { get; public set; }
    public string get_ProfileId();
    public void set_ProfileId(string value);
    internal bool IsSetProfileId();
}
public class Amazon.Transfer.Model.UpdateServerRequest : AmazonTransferRequest {
    private string _certificate;
    private EndpointDetails _endpointDetails;
    private EndpointType _endpointType;
    private string _hostKey;
    private IdentityProviderDetails _identityProviderDetails;
    private string _loggingRole;
    private string _postAuthenticationLoginBanner;
    private string _preAuthenticationLoginBanner;
    private ProtocolDetails _protocolDetails;
    private List`1<string> _protocols;
    private S3StorageOptions _s3StorageOptions;
    private string _securityPolicyName;
    private string _serverId;
    private List`1<string> _structuredLogDestinations;
    private WorkflowDetails _workflowDetails;
    [AWSPropertyAttribute]
public string Certificate { get; public set; }
    public EndpointDetails EndpointDetails { get; public set; }
    public EndpointType EndpointType { get; public set; }
    [AWSPropertyAttribute]
public string HostKey { get; public set; }
    public IdentityProviderDetails IdentityProviderDetails { get; public set; }
    [AWSPropertyAttribute]
public string LoggingRole { get; public set; }
    [AWSPropertyAttribute]
public string PostAuthenticationLoginBanner { get; public set; }
    [AWSPropertyAttribute]
public string PreAuthenticationLoginBanner { get; public set; }
    public ProtocolDetails ProtocolDetails { get; public set; }
    [AWSPropertyAttribute]
public List`1<string> Protocols { get; public set; }
    public S3StorageOptions S3StorageOptions { get; public set; }
    [AWSPropertyAttribute]
public string SecurityPolicyName { get; public set; }
    [AWSPropertyAttribute]
public string ServerId { get; public set; }
    [AWSPropertyAttribute]
public List`1<string> StructuredLogDestinations { get; public set; }
    public WorkflowDetails WorkflowDetails { get; public set; }
    public string get_Certificate();
    public void set_Certificate(string value);
    internal bool IsSetCertificate();
    public EndpointDetails get_EndpointDetails();
    public void set_EndpointDetails(EndpointDetails value);
    internal bool IsSetEndpointDetails();
    public EndpointType get_EndpointType();
    public void set_EndpointType(EndpointType value);
    internal bool IsSetEndpointType();
    public string get_HostKey();
    public void set_HostKey(string value);
    internal bool IsSetHostKey();
    public IdentityProviderDetails get_IdentityProviderDetails();
    public void set_IdentityProviderDetails(IdentityProviderDetails value);
    internal bool IsSetIdentityProviderDetails();
    public string get_LoggingRole();
    public void set_LoggingRole(string value);
    internal bool IsSetLoggingRole();
    public string get_PostAuthenticationLoginBanner();
    public void set_PostAuthenticationLoginBanner(string value);
    internal bool IsSetPostAuthenticationLoginBanner();
    public string get_PreAuthenticationLoginBanner();
    public void set_PreAuthenticationLoginBanner(string value);
    internal bool IsSetPreAuthenticationLoginBanner();
    public ProtocolDetails get_ProtocolDetails();
    public void set_ProtocolDetails(ProtocolDetails value);
    internal bool IsSetProtocolDetails();
    public List`1<string> get_Protocols();
    public void set_Protocols(List`1<string> value);
    internal bool IsSetProtocols();
    public S3StorageOptions get_S3StorageOptions();
    public void set_S3StorageOptions(S3StorageOptions value);
    internal bool IsSetS3StorageOptions();
    public string get_SecurityPolicyName();
    public void set_SecurityPolicyName(string value);
    internal bool IsSetSecurityPolicyName();
    public string get_ServerId();
    public void set_ServerId(string value);
    internal bool IsSetServerId();
    public List`1<string> get_StructuredLogDestinations();
    public void set_StructuredLogDestinations(List`1<string> value);
    internal bool IsSetStructuredLogDestinations();
    public WorkflowDetails get_WorkflowDetails();
    public void set_WorkflowDetails(WorkflowDetails value);
    internal bool IsSetWorkflowDetails();
}
public class Amazon.Transfer.Model.UpdateServerResponse : AmazonWebServiceResponse {
    private string _serverId;
    [AWSPropertyAttribute]
public string ServerId { get; public set; }
    public string get_ServerId();
    public void set_ServerId(string value);
    internal bool IsSetServerId();
}
public class Amazon.Transfer.Model.UpdateUserRequest : AmazonTransferRequest {
    private string _homeDirectory;
    private List`1<HomeDirectoryMapEntry> _homeDirectoryMappings;
    private HomeDirectoryType _homeDirectoryType;
    private string _policy;
    private PosixProfile _posixProfile;
    private string _role;
    private string _serverId;
    private string _userName;
    [AWSPropertyAttribute]
public string HomeDirectory { get; public set; }
    [AWSPropertyAttribute]
public List`1<HomeDirectoryMapEntry> HomeDirectoryMappings { get; public set; }
    public HomeDirectoryType HomeDirectoryType { get; public set; }
    [AWSPropertyAttribute]
public string Policy { get; public set; }
    public PosixProfile PosixProfile { get; public set; }
    [AWSPropertyAttribute]
public string Role { get; public set; }
    [AWSPropertyAttribute]
public string ServerId { get; public set; }
    [AWSPropertyAttribute]
public string UserName { get; public set; }
    public string get_HomeDirectory();
    public void set_HomeDirectory(string value);
    internal bool IsSetHomeDirectory();
    public List`1<HomeDirectoryMapEntry> get_HomeDirectoryMappings();
    public void set_HomeDirectoryMappings(List`1<HomeDirectoryMapEntry> value);
    internal bool IsSetHomeDirectoryMappings();
    public HomeDirectoryType get_HomeDirectoryType();
    public void set_HomeDirectoryType(HomeDirectoryType value);
    internal bool IsSetHomeDirectoryType();
    public string get_Policy();
    public void set_Policy(string value);
    internal bool IsSetPolicy();
    public PosixProfile get_PosixProfile();
    public void set_PosixProfile(PosixProfile value);
    internal bool IsSetPosixProfile();
    public string get_Role();
    public void set_Role(string value);
    internal bool IsSetRole();
    public string get_ServerId();
    public void set_ServerId(string value);
    internal bool IsSetServerId();
    public string get_UserName();
    public void set_UserName(string value);
    internal bool IsSetUserName();
}
public class Amazon.Transfer.Model.UpdateUserResponse : AmazonWebServiceResponse {
    private string _serverId;
    private string _userName;
    [AWSPropertyAttribute]
public string ServerId { get; public set; }
    [AWSPropertyAttribute]
public string UserName { get; public set; }
    public string get_ServerId();
    public void set_ServerId(string value);
    internal bool IsSetServerId();
    public string get_UserName();
    public void set_UserName(string value);
    internal bool IsSetUserName();
}
public class Amazon.Transfer.Model.UserDetails : object {
    private string _serverId;
    private string _sessionId;
    private string _userName;
    [AWSPropertyAttribute]
public string ServerId { get; public set; }
    [AWSPropertyAttribute]
public string SessionId { get; public set; }
    [AWSPropertyAttribute]
public string UserName { get; public set; }
    public string get_ServerId();
    public void set_ServerId(string value);
    internal bool IsSetServerId();
    public string get_SessionId();
    public void set_SessionId(string value);
    internal bool IsSetSessionId();
    public string get_UserName();
    public void set_UserName(string value);
    internal bool IsSetUserName();
}
public class Amazon.Transfer.Model.WorkflowDetail : object {
    private string _executionRole;
    private string _workflowId;
    [AWSPropertyAttribute]
public string ExecutionRole { get; public set; }
    [AWSPropertyAttribute]
public string WorkflowId { get; public set; }
    public string get_ExecutionRole();
    public void set_ExecutionRole(string value);
    internal bool IsSetExecutionRole();
    public string get_WorkflowId();
    public void set_WorkflowId(string value);
    internal bool IsSetWorkflowId();
}
public class Amazon.Transfer.Model.WorkflowDetails : object {
    private List`1<WorkflowDetail> _onPartialUpload;
    private List`1<WorkflowDetail> _onUpload;
    [AWSPropertyAttribute]
public List`1<WorkflowDetail> OnPartialUpload { get; public set; }
    [AWSPropertyAttribute]
public List`1<WorkflowDetail> OnUpload { get; public set; }
    public List`1<WorkflowDetail> get_OnPartialUpload();
    public void set_OnPartialUpload(List`1<WorkflowDetail> value);
    internal bool IsSetOnPartialUpload();
    public List`1<WorkflowDetail> get_OnUpload();
    public void set_OnUpload(List`1<WorkflowDetail> value);
    internal bool IsSetOnUpload();
}
public class Amazon.Transfer.Model.WorkflowStep : object {
    private CopyStepDetails _copyStepDetails;
    private CustomStepDetails _customStepDetails;
    private DecryptStepDetails _decryptStepDetails;
    private DeleteStepDetails _deleteStepDetails;
    private TagStepDetails _tagStepDetails;
    private WorkflowStepType _type;
    public CopyStepDetails CopyStepDetails { get; public set; }
    public CustomStepDetails CustomStepDetails { get; public set; }
    public DecryptStepDetails DecryptStepDetails { get; public set; }
    public DeleteStepDetails DeleteStepDetails { get; public set; }
    public TagStepDetails TagStepDetails { get; public set; }
    public WorkflowStepType Type { get; public set; }
    public CopyStepDetails get_CopyStepDetails();
    public void set_CopyStepDetails(CopyStepDetails value);
    internal bool IsSetCopyStepDetails();
    public CustomStepDetails get_CustomStepDetails();
    public void set_CustomStepDetails(CustomStepDetails value);
    internal bool IsSetCustomStepDetails();
    public DecryptStepDetails get_DecryptStepDetails();
    public void set_DecryptStepDetails(DecryptStepDetails value);
    internal bool IsSetDecryptStepDetails();
    public DeleteStepDetails get_DeleteStepDetails();
    public void set_DeleteStepDetails(DeleteStepDetails value);
    internal bool IsSetDeleteStepDetails();
    public TagStepDetails get_TagStepDetails();
    public void set_TagStepDetails(TagStepDetails value);
    internal bool IsSetTagStepDetails();
    public WorkflowStepType get_Type();
    public void set_Type(WorkflowStepType value);
    internal bool IsSetType();
}
public class Amazon.Transfer.OverwriteExisting : ConstantClass {
    public static OverwriteExisting FALSE;
    public static OverwriteExisting TRUE;
    public OverwriteExisting(string value);
    private static OverwriteExisting();
    public static OverwriteExisting FindValue(string value);
    public static OverwriteExisting op_Implicit(string value);
}
public class Amazon.Transfer.ProfileType : ConstantClass {
    public static ProfileType LOCAL;
    public static ProfileType PARTNER;
    public ProfileType(string value);
    private static ProfileType();
    public static ProfileType FindValue(string value);
    public static ProfileType op_Implicit(string value);
}
public class Amazon.Transfer.Protocol : ConstantClass {
    public static Protocol AS2;
    public static Protocol FTP;
    public static Protocol FTPS;
    public static Protocol SFTP;
    public Protocol(string value);
    private static Protocol();
    public static Protocol FindValue(string value);
    public static Protocol op_Implicit(string value);
}
public class Amazon.Transfer.SecurityPolicyProtocol : ConstantClass {
    public static SecurityPolicyProtocol FTPS;
    public static SecurityPolicyProtocol SFTP;
    public SecurityPolicyProtocol(string value);
    private static SecurityPolicyProtocol();
    public static SecurityPolicyProtocol FindValue(string value);
    public static SecurityPolicyProtocol op_Implicit(string value);
}
public class Amazon.Transfer.SecurityPolicyResourceType : ConstantClass {
    public static SecurityPolicyResourceType CONNECTOR;
    public static SecurityPolicyResourceType SERVER;
    public SecurityPolicyResourceType(string value);
    private static SecurityPolicyResourceType();
    public static SecurityPolicyResourceType FindValue(string value);
    public static SecurityPolicyResourceType op_Implicit(string value);
}
public class Amazon.Transfer.SetStatOption : ConstantClass {
    public static SetStatOption DEFAULT;
    public static SetStatOption ENABLE_NO_OP;
    public SetStatOption(string value);
    private static SetStatOption();
    public static SetStatOption FindValue(string value);
    public static SetStatOption op_Implicit(string value);
}
public class Amazon.Transfer.SftpAuthenticationMethods : ConstantClass {
    public static SftpAuthenticationMethods PASSWORD;
    public static SftpAuthenticationMethods PUBLIC_KEY;
    public static SftpAuthenticationMethods PUBLIC_KEY_AND_PASSWORD;
    public static SftpAuthenticationMethods PUBLIC_KEY_OR_PASSWORD;
    public SftpAuthenticationMethods(string value);
    private static SftpAuthenticationMethods();
    public static SftpAuthenticationMethods FindValue(string value);
    public static SftpAuthenticationMethods op_Implicit(string value);
}
public class Amazon.Transfer.SigningAlg : ConstantClass {
    public static SigningAlg NONE;
    public static SigningAlg SHA1;
    public static SigningAlg SHA256;
    public static SigningAlg SHA384;
    public static SigningAlg SHA512;
    public SigningAlg(string value);
    private static SigningAlg();
    public static SigningAlg FindValue(string value);
    public static SigningAlg op_Implicit(string value);
}
public class Amazon.Transfer.State : ConstantClass {
    public static State OFFLINE;
    public static State ONLINE;
    public static State START_FAILED;
    public static State STARTING;
    public static State STOP_FAILED;
    public static State STOPPING;
    public State(string value);
    private static State();
    public static State FindValue(string value);
    public static State op_Implicit(string value);
}
public class Amazon.Transfer.TlsSessionResumptionMode : ConstantClass {
    public static TlsSessionResumptionMode DISABLED;
    public static TlsSessionResumptionMode ENABLED;
    public static TlsSessionResumptionMode ENFORCED;
    public TlsSessionResumptionMode(string value);
    private static TlsSessionResumptionMode();
    public static TlsSessionResumptionMode FindValue(string value);
    public static TlsSessionResumptionMode op_Implicit(string value);
}
public class Amazon.Transfer.WorkflowStepType : ConstantClass {
    public static WorkflowStepType COPY;
    public static WorkflowStepType CUSTOM;
    public static WorkflowStepType DECRYPT;
    public static WorkflowStepType DELETE;
    public static WorkflowStepType TAG;
    public WorkflowStepType(string value);
    private static WorkflowStepType();
    public static WorkflowStepType FindValue(string value);
    public static WorkflowStepType op_Implicit(string value);
}
