[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class AwsSignatureVersion4.AwsSignatureHandler : DelegatingHandler {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static KeyValuePair`2[] EmptyRequestHeaders;
    private AwsSignatureHandlerSettings settings;
    public AwsSignatureHandler(AwsSignatureHandlerSettings settings);
    private static AwsSignatureHandler();
    [AsyncStateMachineAttribute("AwsSignatureVersion4.AwsSignatureHandler/<SendAsync>d__3")]
protected virtual Task`1<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken);
    private static void RemoveHeaders(HttpRequestMessage request);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<HttpResponseMessage> <>n__0(HttpRequestMessage request, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class AwsSignatureVersion4.AwsSignatureHandlerSettings : object {
    [CompilerGeneratedAttribute]
private string <RegionName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServiceName>k__BackingField;
    [CompilerGeneratedAttribute]
private AWSCredentials <Credentials>k__BackingField;
    internal string RegionName { get; }
    internal string ServiceName { get; }
    internal AWSCredentials Credentials { get; }
    public AwsSignatureHandlerSettings(string regionName, string serviceName, ImmutableCredentials credentials);
    public AwsSignatureHandlerSettings(string regionName, string serviceName, AWSCredentials credentials);
    [CompilerGeneratedAttribute]
internal string get_RegionName();
    [CompilerGeneratedAttribute]
internal string get_ServiceName();
    [CompilerGeneratedAttribute]
internal AWSCredentials get_Credentials();
}
public static class AwsSignatureVersion4.Private.AuthorizationHeader : object {
    [NullableContextAttribute("1")]
public static string Build(DateTime now, string regionName, string serviceName, ImmutableCredentials credentials, string signedHeaders, string credentialScope, string stringToSign);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class AwsSignatureVersion4.Private.AWSCredentialsWrapper : AWSCredentials {
    private ImmutableCredentials credentials;
    public AWSCredentialsWrapper(ImmutableCredentials credentials);
    public virtual ImmutableCredentials GetCredentials();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class AwsSignatureVersion4.Private.CanonicalRequest : object {
    [CompilerGeneratedAttribute]
private static EnvironmentProbe <EnvironmentProbe>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <HeaderValueSeparator>k__BackingField;
    public static EnvironmentProbe EnvironmentProbe { get; public set; }
    public static string HeaderValueSeparator { get; public set; }
    private static CanonicalRequest();
    [CompilerGeneratedAttribute]
public static EnvironmentProbe get_EnvironmentProbe();
    [CompilerGeneratedAttribute]
public static void set_EnvironmentProbe(EnvironmentProbe value);
    [CompilerGeneratedAttribute]
public static string get_HeaderValueSeparator();
    [CompilerGeneratedAttribute]
public static void set_HeaderValueSeparator(string value);
    public static ValueTuple`2<string, string> Build(string serviceName, HttpRequestMessage request, IEnumerable`1<KeyValuePair`2<string, IEnumerable`1<string>>> defaultHeaders, string contentHash);
    public static string GetCanonicalResourcePath(string serviceName, Uri requestUri);
    public static SortedList`2<string, List`1<string>> SortQueryParameters(string query);
    public static SortedDictionary`2<string, List`1<string>> SortHeaders(HttpRequestHeaders headers, IEnumerable`1<KeyValuePair`2<string, IEnumerable`1<string>>> defaultHeaders);
    [CompilerGeneratedAttribute]
internal static string <SortHeaders>g__FormatHeaderName|11_0(string headerName);
    [CompilerGeneratedAttribute]
internal static void <SortHeaders>g__AddHeader|11_1(KeyValuePair`2<string, IEnumerable`1<string>> header, <>c__DisplayClass11_0& );
    [CompilerGeneratedAttribute]
internal static void <SortHeaders>g__AddDefaultDotnetHeaders|11_2(<>c__DisplayClass11_0& );
    [CompilerGeneratedAttribute]
internal static void <SortHeaders>g__AddDefaultMonoHeaders|11_3(<>c__DisplayClass11_0& );
}
public static class AwsSignatureVersion4.Private.ContentHash : object {
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("AwsSignatureVersion4.Private.ContentHash/<CalculateAsync>d__0")]
public static Task`1<string> CalculateAsync(HttpContent content);
}
public class AwsSignatureVersion4.Private.EnvironmentProbe : object {
    [NullableAttribute("1")]
private Lazy`1<bool> isMono;
    public bool IsMono { get; }
    public virtual bool get_IsMono();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class AwsSignatureVersion4.Private.ErrorMessages : object {
    public static string XAmzDateHeaderExists;
    public static string AuthorizationHeaderExists;
    public static string InvalidRequestUri;
    public static string InvalidRegionName;
    public static string InvalidServiceName;
    public static string S3DoesNotSupportPatch;
    public static string S3DoesNotSupportPost;
    private static ErrorMessages();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class AwsSignatureVersion4.Private.Extensions : object {
    private static char SpaceCharacter;
    [ExtensionAttribute]
public static Uri ToUri(string self);
    [ExtensionAttribute]
public static string NormalizeWhiteSpace(string self);
    [ExtensionAttribute]
public static void AddHeader(HttpRequestMessage request, string headerName, string headerValue);
    [ExtensionAttribute]
public static void AddHeaders(HttpRequestMessage request, string headerName, IEnumerable`1<string> headerValues);
    [ExtensionAttribute]
public static void AddHeaderIf(HttpRequestMessage request, bool condition, string headerName, string headerValue);
    [ExtensionAttribute]
public static string ToIso8601BasicDate(DateTime self);
    [ExtensionAttribute]
public static string ToIso8601BasicDateTime(DateTime self);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class AwsSignatureVersion4.Private.Result : object {
    [CompilerGeneratedAttribute]
private string <CanonicalRequest>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StringToSign>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AuthorizationHeader>k__BackingField;
    public string CanonicalRequest { get; }
    public string StringToSign { get; }
    public string AuthorizationHeader { get; }
    public Result(string canonicalRequest, string stringToSign, string authorizationHeader);
    [CompilerGeneratedAttribute]
public string get_CanonicalRequest();
    [CompilerGeneratedAttribute]
public string get_StringToSign();
    [CompilerGeneratedAttribute]
public string get_AuthorizationHeader();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class AwsSignatureVersion4.Private.ServiceName : object {
    internal static string OpenSearchServerless;
    internal static string S3;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class AwsSignatureVersion4.Private.Signer : object {
    [AsyncStateMachineAttribute("AwsSignatureVersion4.Private.Signer/<SignAsync>d__0")]
public static Task`1<Result> SignAsync(HttpRequestMessage request, Uri baseAddress, IEnumerable`1<KeyValuePair`2<string, IEnumerable`1<string>>> defaultRequestHeaders, DateTime now, string regionName, string serviceName, ImmutableCredentials credentials);
    private static void ValidateArguments(HttpRequestMessage request, string regionName, string serviceName, ImmutableCredentials credentials);
    private static void AddHeaders(HttpRequestMessage request, DateTime now, string serviceName, ImmutableCredentials credentials, string contentHash);
    private static void UpdateRequestUri(HttpRequestMessage request, Uri baseAddress);
}
public static class AwsSignatureVersion4.Private.StringToSign : object {
    [NullableContextAttribute("1")]
public static ValueTuple`2<string, string> Build(DateTime now, string regionName, string serviceName, string canonicalRequest);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class System.Net.Http.DeleteAsyncExtensions : object {
    [ExtensionAttribute]
public static Task`1<HttpResponseMessage> DeleteAsync(HttpClient self, string requestUri, string regionName, string serviceName, AWSCredentials credentials);
    [ExtensionAttribute]
public static Task`1<HttpResponseMessage> DeleteAsync(HttpClient self, string requestUri, string regionName, string serviceName, ImmutableCredentials credentials);
    [ExtensionAttribute]
public static Task`1<HttpResponseMessage> DeleteAsync(HttpClient self, Uri requestUri, string regionName, string serviceName, AWSCredentials credentials);
    [ExtensionAttribute]
public static Task`1<HttpResponseMessage> DeleteAsync(HttpClient self, Uri requestUri, string regionName, string serviceName, ImmutableCredentials credentials);
    [ExtensionAttribute]
public static Task`1<HttpResponseMessage> DeleteAsync(HttpClient self, string requestUri, string regionName, string serviceName, AWSCredentials credentials, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<HttpResponseMessage> DeleteAsync(HttpClient self, string requestUri, string regionName, string serviceName, ImmutableCredentials credentials, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("System.Net.Http.DeleteAsyncExtensions/<DeleteAsync>d__6")]
[ExtensionAttribute]
public static Task`1<HttpResponseMessage> DeleteAsync(HttpClient self, Uri requestUri, string regionName, string serviceName, AWSCredentials credentials, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<HttpResponseMessage> DeleteAsync(HttpClient self, Uri requestUri, string regionName, string serviceName, ImmutableCredentials credentials, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class System.Net.Http.GetAsyncExtensions : object {
    [ExtensionAttribute]
public static Task`1<HttpResponseMessage> GetAsync(HttpClient self, string requestUri, string regionName, string serviceName, AWSCredentials credentials);
    [ExtensionAttribute]
public static Task`1<HttpResponseMessage> GetAsync(HttpClient self, string requestUri, string regionName, string serviceName, ImmutableCredentials credentials);
    [ExtensionAttribute]
public static Task`1<HttpResponseMessage> GetAsync(HttpClient self, Uri requestUri, string regionName, string serviceName, AWSCredentials credentials);
    [ExtensionAttribute]
public static Task`1<HttpResponseMessage> GetAsync(HttpClient self, Uri requestUri, string regionName, string serviceName, ImmutableCredentials credentials);
    [ExtensionAttribute]
public static Task`1<HttpResponseMessage> GetAsync(HttpClient self, string requestUri, HttpCompletionOption completionOption, string regionName, string serviceName, AWSCredentials credentials);
    [ExtensionAttribute]
public static Task`1<HttpResponseMessage> GetAsync(HttpClient self, string requestUri, HttpCompletionOption completionOption, string regionName, string serviceName, ImmutableCredentials credentials);
    [ExtensionAttribute]
public static Task`1<HttpResponseMessage> GetAsync(HttpClient self, Uri requestUri, HttpCompletionOption completionOption, string regionName, string serviceName, AWSCredentials credentials);
    [ExtensionAttribute]
public static Task`1<HttpResponseMessage> GetAsync(HttpClient self, Uri requestUri, HttpCompletionOption completionOption, string regionName, string serviceName, ImmutableCredentials credentials);
    [ExtensionAttribute]
public static Task`1<HttpResponseMessage> GetAsync(HttpClient self, string requestUri, string regionName, string serviceName, AWSCredentials credentials, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<HttpResponseMessage> GetAsync(HttpClient self, string requestUri, string regionName, string serviceName, ImmutableCredentials credentials, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<HttpResponseMessage> GetAsync(HttpClient self, Uri requestUri, string regionName, string serviceName, AWSCredentials credentials, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<HttpResponseMessage> GetAsync(HttpClient self, Uri requestUri, string regionName, string serviceName, ImmutableCredentials credentials, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<HttpResponseMessage> GetAsync(HttpClient self, string requestUri, HttpCompletionOption completionOption, string regionName, string serviceName, AWSCredentials credentials, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<HttpResponseMessage> GetAsync(HttpClient self, string requestUri, HttpCompletionOption completionOption, string regionName, string serviceName, ImmutableCredentials credentials, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("System.Net.Http.GetAsyncExtensions/<GetAsync>d__14")]
[ExtensionAttribute]
public static Task`1<HttpResponseMessage> GetAsync(HttpClient self, Uri requestUri, HttpCompletionOption completionOption, string regionName, string serviceName, AWSCredentials credentials, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<HttpResponseMessage> GetAsync(HttpClient self, Uri requestUri, HttpCompletionOption completionOption, string regionName, string serviceName, ImmutableCredentials credentials, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class System.Net.Http.GetStringAsyncExtensions : object {
    [ExtensionAttribute]
public static Task`1<string> GetStringAsync(HttpClient self, string requestUri, string regionName, string serviceName, AWSCredentials credentials);
    [ExtensionAttribute]
public static Task`1<string> GetStringAsync(HttpClient self, string requestUri, string regionName, string serviceName, ImmutableCredentials credentials);
    [ExtensionAttribute]
public static Task`1<string> GetStringAsync(HttpClient self, Uri requestUri, string regionName, string serviceName, AWSCredentials credentials);
    [ExtensionAttribute]
public static Task`1<string> GetStringAsync(HttpClient self, Uri requestUri, string regionName, string serviceName, ImmutableCredentials credentials);
    [ExtensionAttribute]
public static Task`1<string> GetStringAsync(HttpClient self, string requestUri, string regionName, string serviceName, AWSCredentials credentials, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<string> GetStringAsync(HttpClient self, string requestUri, string regionName, string serviceName, ImmutableCredentials credentials, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("System.Net.Http.GetStringAsyncExtensions/<GetStringAsync>d__6")]
[ExtensionAttribute]
public static Task`1<string> GetStringAsync(HttpClient self, Uri requestUri, string regionName, string serviceName, AWSCredentials credentials, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("System.Net.Http.GetStringAsyncExtensions/<GetStringAsync>d__7")]
[ExtensionAttribute]
public static Task`1<string> GetStringAsync(HttpClient self, Uri requestUri, string regionName, string serviceName, ImmutableCredentials credentials, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class System.Net.Http.PatchAsyncExtensions : object {
    internal static HttpMethod PatchMethod;
    private static PatchAsyncExtensions();
    [ExtensionAttribute]
public static Task`1<HttpResponseMessage> PatchAsync(HttpClient self, string requestUri, HttpContent content, string regionName, string serviceName, AWSCredentials credentials);
    [ExtensionAttribute]
public static Task`1<HttpResponseMessage> PatchAsync(HttpClient self, string requestUri, HttpContent content, string regionName, string serviceName, ImmutableCredentials credentials);
    [ExtensionAttribute]
public static Task`1<HttpResponseMessage> PatchAsync(HttpClient self, Uri requestUri, HttpContent content, string regionName, string serviceName, AWSCredentials credentials);
    [ExtensionAttribute]
public static Task`1<HttpResponseMessage> PatchAsync(HttpClient self, Uri requestUri, HttpContent content, string regionName, string serviceName, ImmutableCredentials credentials);
    [ExtensionAttribute]
public static Task`1<HttpResponseMessage> PatchAsync(HttpClient self, string requestUri, HttpContent content, string regionName, string serviceName, AWSCredentials credentials, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<HttpResponseMessage> PatchAsync(HttpClient self, string requestUri, HttpContent content, string regionName, string serviceName, ImmutableCredentials credentials, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("System.Net.Http.PatchAsyncExtensions/<PatchAsync>d__7")]
[ExtensionAttribute]
public static Task`1<HttpResponseMessage> PatchAsync(HttpClient self, Uri requestUri, HttpContent content, string regionName, string serviceName, AWSCredentials credentials, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<HttpResponseMessage> PatchAsync(HttpClient self, Uri requestUri, HttpContent content, string regionName, string serviceName, ImmutableCredentials credentials, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class System.Net.Http.PostAsyncExtensions : object {
    [ExtensionAttribute]
public static Task`1<HttpResponseMessage> PostAsync(HttpClient self, string requestUri, HttpContent content, string regionName, string serviceName, AWSCredentials credentials);
    [ExtensionAttribute]
public static Task`1<HttpResponseMessage> PostAsync(HttpClient self, string requestUri, HttpContent content, string regionName, string serviceName, ImmutableCredentials credentials);
    [ExtensionAttribute]
public static Task`1<HttpResponseMessage> PostAsync(HttpClient self, Uri requestUri, HttpContent content, string regionName, string serviceName, AWSCredentials credentials);
    [ExtensionAttribute]
public static Task`1<HttpResponseMessage> PostAsync(HttpClient self, Uri requestUri, HttpContent content, string regionName, string serviceName, ImmutableCredentials credentials);
    [ExtensionAttribute]
public static Task`1<HttpResponseMessage> PostAsync(HttpClient self, string requestUri, HttpContent content, string regionName, string serviceName, AWSCredentials credentials, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<HttpResponseMessage> PostAsync(HttpClient self, string requestUri, HttpContent content, string regionName, string serviceName, ImmutableCredentials credentials, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("System.Net.Http.PostAsyncExtensions/<PostAsync>d__6")]
[ExtensionAttribute]
public static Task`1<HttpResponseMessage> PostAsync(HttpClient self, Uri requestUri, HttpContent content, string regionName, string serviceName, AWSCredentials credentials, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<HttpResponseMessage> PostAsync(HttpClient self, Uri requestUri, HttpContent content, string regionName, string serviceName, ImmutableCredentials credentials, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class System.Net.Http.PutAsyncExtensions : object {
    [ExtensionAttribute]
public static Task`1<HttpResponseMessage> PutAsync(HttpClient self, string requestUri, HttpContent content, string regionName, string serviceName, AWSCredentials credentials);
    [ExtensionAttribute]
public static Task`1<HttpResponseMessage> PutAsync(HttpClient self, string requestUri, HttpContent content, string regionName, string serviceName, ImmutableCredentials credentials);
    [ExtensionAttribute]
public static Task`1<HttpResponseMessage> PutAsync(HttpClient self, Uri requestUri, HttpContent content, string regionName, string serviceName, AWSCredentials credentials);
    [ExtensionAttribute]
public static Task`1<HttpResponseMessage> PutAsync(HttpClient self, Uri requestUri, HttpContent content, string regionName, string serviceName, ImmutableCredentials credentials);
    [ExtensionAttribute]
public static Task`1<HttpResponseMessage> PutAsync(HttpClient self, string requestUri, HttpContent content, string regionName, string serviceName, AWSCredentials credentials, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<HttpResponseMessage> PutAsync(HttpClient self, string requestUri, HttpContent content, string regionName, string serviceName, ImmutableCredentials credentials, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("System.Net.Http.PutAsyncExtensions/<PutAsync>d__6")]
[ExtensionAttribute]
public static Task`1<HttpResponseMessage> PutAsync(HttpClient self, Uri requestUri, HttpContent content, string regionName, string serviceName, AWSCredentials credentials, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<HttpResponseMessage> PutAsync(HttpClient self, Uri requestUri, HttpContent content, string regionName, string serviceName, ImmutableCredentials credentials, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class System.Net.Http.SendAsyncExtensions : object {
    internal static HttpCompletionOption DefaultCompletionOption;
    [ExtensionAttribute]
public static Task`1<HttpResponseMessage> SendAsync(HttpClient self, HttpRequestMessage request, string regionName, string serviceName, AWSCredentials credentials);
    [ExtensionAttribute]
public static Task`1<HttpResponseMessage> SendAsync(HttpClient self, HttpRequestMessage request, string regionName, string serviceName, ImmutableCredentials credentials);
    [ExtensionAttribute]
public static Task`1<HttpResponseMessage> SendAsync(HttpClient self, HttpRequestMessage request, HttpCompletionOption completionOption, string regionName, string serviceName, AWSCredentials credentials);
    [ExtensionAttribute]
public static Task`1<HttpResponseMessage> SendAsync(HttpClient self, HttpRequestMessage request, HttpCompletionOption completionOption, string regionName, string serviceName, ImmutableCredentials credentials);
    [ExtensionAttribute]
public static Task`1<HttpResponseMessage> SendAsync(HttpClient self, HttpRequestMessage request, string regionName, string serviceName, AWSCredentials credentials, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<HttpResponseMessage> SendAsync(HttpClient self, HttpRequestMessage request, string regionName, string serviceName, ImmutableCredentials credentials, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("System.Net.Http.SendAsyncExtensions/<SendAsync>d__7")]
[ExtensionAttribute]
public static Task`1<HttpResponseMessage> SendAsync(HttpClient self, HttpRequestMessage request, HttpCompletionOption completionOption, string regionName, string serviceName, AWSCredentials credentials, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("System.Net.Http.SendAsyncExtensions/<SendAsync>d__8")]
[ExtensionAttribute]
public static Task`1<HttpResponseMessage> SendAsync(HttpClient self, HttpRequestMessage request, HttpCompletionOption completionOption, string regionName, string serviceName, ImmutableCredentials credentials, CancellationToken cancellationToken);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
