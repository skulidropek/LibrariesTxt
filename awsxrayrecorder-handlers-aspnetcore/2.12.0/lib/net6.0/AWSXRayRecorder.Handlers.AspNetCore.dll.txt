public class Amazon.XRay.Recorder.Handlers.AspNetCore.Internal.AWSXRayMiddleware : object {
    private RequestDelegate _next;
    private static Logger _logger;
    private AWSXRayRecorder _recorder;
    private static string X_FORWARDED_FOR;
    private static string SchemeDelimiter;
    [CompilerGeneratedAttribute]
private SegmentNamingStrategy <SegmentNamingStrategy>k__BackingField;
    private SegmentNamingStrategy SegmentNamingStrategy { get; private set; }
    public AWSXRayMiddleware(RequestDelegate next, SegmentNamingStrategy segmentNamingStrategy, AWSXRayRecorder recorder);
    public AWSXRayMiddleware(RequestDelegate next, SegmentNamingStrategy segmentNamingStrategy, IConfiguration configuration);
    public AWSXRayMiddleware(RequestDelegate next, string fixedName);
    public AWSXRayMiddleware(RequestDelegate next, string fixedName, IConfiguration configuration);
    public AWSXRayMiddleware(RequestDelegate next, SegmentNamingStrategy segmentNamingStrategy);
    private static AWSXRayMiddleware();
    [CompilerGeneratedAttribute]
private SegmentNamingStrategy get_SegmentNamingStrategy();
    [CompilerGeneratedAttribute]
private void set_SegmentNamingStrategy(SegmentNamingStrategy value);
    [AsyncStateMachineAttribute("Amazon.XRay.Recorder.Handlers.AspNetCore.Internal.AWSXRayMiddleware/<Invoke>d__14")]
public Task Invoke(HttpContext context);
    private void ProcessHTTPResponse(HttpContext context);
    private void PopulateResponseAttributes(HttpResponse response, Dictionary`2<string, object> responseAttributes);
    private void ProcessHTTPRequest(HttpContext context);
    private static void PopulateRequestAttributes(HttpRequest request, Dictionary`2<string, object> requestAttributes);
    private static string GetUrl(HttpRequest request);
    private static string GetXForwardedFor(HttpRequest request);
    private static string GetClientIpAddress(HttpRequest request);
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Builder.AWSXRayMiddlewareExtensions : object {
    [ExtensionAttribute]
public static IApplicationBuilder UseXRay(IApplicationBuilder builder, string segmentName);
    [ExtensionAttribute]
public static IApplicationBuilder UseXRay(IApplicationBuilder builder, string segmentName, IConfiguration configuration);
    [ExtensionAttribute]
public static IApplicationBuilder UseXRay(IApplicationBuilder builder, SegmentNamingStrategy segmentNamingStrategy);
    [ExtensionAttribute]
public static IApplicationBuilder UseXRay(IApplicationBuilder builder, SegmentNamingStrategy segmentNamingStrategy, IConfiguration configuration);
}
