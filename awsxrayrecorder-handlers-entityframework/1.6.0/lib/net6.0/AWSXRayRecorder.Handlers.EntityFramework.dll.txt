public class Amazon.XRay.Recorder.Handlers.EntityFramework.EFInterceptor : DbCommandInterceptor {
    private Nullable`1<bool> _collectSqlQueriesOverride;
    public EFInterceptor(Nullable`1<bool> collectSqlQueries);
    public virtual InterceptionResult`1<DbDataReader> ReaderExecuting(DbCommand command, CommandEventData eventData, InterceptionResult`1<DbDataReader> result);
    public virtual DbDataReader ReaderExecuted(DbCommand command, CommandExecutedEventData eventData, DbDataReader result);
    public virtual ValueTask`1<InterceptionResult`1<DbDataReader>> ReaderExecutingAsync(DbCommand command, CommandEventData eventData, InterceptionResult`1<DbDataReader> result, CancellationToken cancellationToken);
    public virtual ValueTask`1<DbDataReader> ReaderExecutedAsync(DbCommand command, CommandExecutedEventData eventData, DbDataReader result, CancellationToken cancellationToken);
    public virtual void CommandFailed(DbCommand command, CommandErrorEventData eventData);
    public virtual Task CommandFailedAsync(DbCommand command, CommandErrorEventData eventData, CancellationToken cancellationToken);
    public virtual InterceptionResult`1<int> NonQueryExecuting(DbCommand command, CommandEventData eventData, InterceptionResult`1<int> result);
    public virtual ValueTask`1<InterceptionResult`1<int>> NonQueryExecutingAsync(DbCommand command, CommandEventData eventData, InterceptionResult`1<int> result, CancellationToken cancellationToken);
    public virtual int NonQueryExecuted(DbCommand command, CommandExecutedEventData eventData, int result);
    public virtual ValueTask`1<int> NonQueryExecutedAsync(DbCommand command, CommandExecutedEventData eventData, int result, CancellationToken cancellationToken);
    public virtual InterceptionResult`1<object> ScalarExecuting(DbCommand command, CommandEventData eventData, InterceptionResult`1<object> result);
    public virtual ValueTask`1<InterceptionResult`1<object>> ScalarExecutingAsync(DbCommand command, CommandEventData eventData, InterceptionResult`1<object> result, CancellationToken cancellationToken);
    public virtual object ScalarExecuted(DbCommand command, CommandExecutedEventData eventData, object result);
    public virtual ValueTask`1<object> ScalarExecutedAsync(DbCommand command, CommandExecutedEventData eventData, object result, CancellationToken cancellationToken);
}
internal static class Amazon.XRay.Recorder.Handlers.EntityFramework.EFUtil : object {
    private static string DefaultDbTypeEntityFramework;
    private static string SqlServerCompact35;
    private static string SqlServerCompact40;
    private static string MicrosoftSqlClient;
    private static string SystemSqlClient;
    private static string SqlServer;
    private static String[] UserIdFormatOptions;
    private static String[] DatabaseTypes;
    private static Regex _portNumberRegex;
    private static AWSXRayRecorder _recorder;
    private static Logger _logger;
    private static EFUtil();
    internal static void ProcessBeginCommand(DbCommand command, Nullable`1<bool> collectSqlQueriesOverride);
    internal static void ProcessEndCommand();
    internal static void ProcessCommandError(Exception exception);
    private static string BuildSubsegmentName(DbCommand command);
    private static void CollectSqlInformation(DbCommand command, Nullable`1<bool> collectSqlQueriesOverride);
    internal static string GetDataBaseType(DbCommand command);
    internal static string GetUserId(DbConnectionStringBuilder builder);
    private static string RemovePortNumberFromDataSource(string dataSource);
    private static bool ShouldCollectSqlText(Nullable`1<bool> collectSqlQueriesOverride);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.AWSXRayInterceptorExtensions : object {
    [ExtensionAttribute]
public static DbContextOptionsBuilder AddXRayInterceptor(DbContextOptionsBuilder dbContextOptionsBuilder, Nullable`1<bool> collectSqlQueries);
}
