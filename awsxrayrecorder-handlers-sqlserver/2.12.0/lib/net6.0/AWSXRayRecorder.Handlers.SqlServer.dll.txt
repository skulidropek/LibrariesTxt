public class Amazon.XRay.Recorder.Handlers.SqlServer.DbCommandInterceptor : object {
    private static string DataBaseTypeString;
    private AWSXRayRecorder _recorder;
    private Nullable`1<bool> _collectSqlQueriesOverride;
    public DbCommandInterceptor(AWSXRayRecorder recorder, Nullable`1<bool> collectSqlQueries);
    [AsyncStateMachineAttribute("Amazon.XRay.Recorder.Handlers.SqlServer.DbCommandInterceptor/<InterceptAsync>d__4`1")]
public sealed virtual Task`1<TResult> InterceptAsync(Func`1<Task`1<TResult>> method, DbCommand command);
    public sealed virtual TResult Intercept(Func`1<TResult> method, DbCommand command);
    protected virtual void CollectSqlInformation(DbCommand command);
    private static string BuildSubsegmentName(DbCommand command);
    private bool ShouldCollectSqlText();
}
public interface Amazon.XRay.Recorder.Handlers.SqlServer.IDbCommandInterceptor {
    public abstract virtual Task`1<TResult> InterceptAsync(Func`1<Task`1<TResult>> method, DbCommand command);
    public abstract virtual TResult Intercept(Func`1<TResult> method, DbCommand command);
}
public static class Amazon.XRay.Recorder.Handlers.SqlServer.SqlUtil : object {
    private static Regex _sqlLiteralRegex;
    private static Regex _portNumberRegex;
    private static SqlUtil();
    public static string SanitizeTsqlQuery(string query);
    public static string RemovePortNumberFromDataSource(string dataSource);
}
public class Amazon.XRay.Recorder.Handlers.SqlServer.TraceableSqlCommand : DbCommand {
    [CompilerGeneratedAttribute]
private IDbCommandInterceptor <_interceptor>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlCommand <InnerSqlCommand>k__BackingField;
    private IDbCommandInterceptor _interceptor { get; private set; }
    public SqlCommand InnerSqlCommand { get; private set; }
    public string CommandText { get; public set; }
    public int CommandTimeout { get; public set; }
    public CommandType CommandType { get; public set; }
    public SqlConnection Connection { get; public set; }
    public bool DesignTimeVisible { get; public set; }
    public SqlParameterCollection Parameters { get; }
    public SqlTransaction Transaction { get; public set; }
    public UpdateRowSource UpdatedRowSource { get; public set; }
    protected DbConnection DbConnection { get; protected set; }
    protected DbTransaction DbTransaction { get; protected set; }
    protected DbParameterCollection DbParameterCollection { get; }
    public TraceableSqlCommand(Nullable`1<bool> collectSqlQueries);
    public TraceableSqlCommand(string cmdText, Nullable`1<bool> collectSqlQueries);
    public TraceableSqlCommand(string cmdText, SqlConnection connection, Nullable`1<bool> collectSqlQueries);
    public TraceableSqlCommand(string cmdText, SqlConnection connection, SqlTransaction transaction, Nullable`1<bool> collectSqlQueries);
    private TraceableSqlCommand(TraceableSqlCommand from);
    [CompilerGeneratedAttribute]
private IDbCommandInterceptor get__interceptor();
    [CompilerGeneratedAttribute]
private void set__interceptor(IDbCommandInterceptor value);
    public void add_StatementCompleted(StatementCompletedEventHandler value);
    public void remove_StatementCompleted(StatementCompletedEventHandler value);
    [CompilerGeneratedAttribute]
public SqlCommand get_InnerSqlCommand();
    [CompilerGeneratedAttribute]
private void set_InnerSqlCommand(SqlCommand value);
    public virtual string get_CommandText();
    public virtual void set_CommandText(string value);
    public virtual int get_CommandTimeout();
    public virtual void set_CommandTimeout(int value);
    public virtual CommandType get_CommandType();
    public virtual void set_CommandType(CommandType value);
    public SqlConnection get_Connection();
    public void set_Connection(SqlConnection value);
    public virtual bool get_DesignTimeVisible();
    public virtual void set_DesignTimeVisible(bool value);
    public SqlParameterCollection get_Parameters();
    public SqlTransaction get_Transaction();
    public void set_Transaction(SqlTransaction value);
    public virtual UpdateRowSource get_UpdatedRowSource();
    public virtual void set_UpdatedRowSource(UpdateRowSource value);
    protected virtual DbConnection get_DbConnection();
    protected virtual void set_DbConnection(DbConnection value);
    protected virtual DbTransaction get_DbTransaction();
    protected virtual void set_DbTransaction(DbTransaction value);
    protected virtual DbParameterCollection get_DbParameterCollection();
    public virtual void Cancel();
    public TraceableSqlCommand Clone();
    private sealed virtual override object System.ICloneable.Clone();
    public SqlParameter CreateParameter();
    public virtual int ExecuteNonQuery();
    public virtual Task`1<int> ExecuteNonQueryAsync(CancellationToken cancellationToken);
    public SqlDataReader ExecuteReader();
    public SqlDataReader ExecuteReader(CommandBehavior behavior);
    public Task`1<SqlDataReader> ExecuteReaderAsync();
    public Task`1<SqlDataReader> ExecuteReaderAsync(CancellationToken cancellationToken);
    public Task`1<SqlDataReader> ExecuteReaderAsync(CommandBehavior behavior);
    public Task`1<SqlDataReader> ExecuteReaderAsync(CommandBehavior behavior, CancellationToken cancellationToken);
    public virtual object ExecuteScalar();
    public virtual Task`1<object> ExecuteScalarAsync(CancellationToken cancellationToken);
    public XmlReader ExecuteXmlReader();
    public Task`1<XmlReader> ExecuteXmlReaderAsync();
    public Task`1<XmlReader> ExecuteXmlReaderAsync(CancellationToken cancellationToken);
    public virtual void Prepare();
    protected virtual DbParameter CreateDbParameter();
    protected virtual DbDataReader ExecuteDbDataReader(CommandBehavior behavior);
    [AsyncStateMachineAttribute("Amazon.XRay.Recorder.Handlers.SqlServer.TraceableSqlCommand/<InterceptAsync>d__67`1")]
protected virtual Task`1<TResult> InterceptAsync(Func`1<Task`1<TResult>> method);
    protected virtual TResult Intercept(Func`1<TResult> method);
    [CompilerGeneratedAttribute]
private int <ExecuteNonQuery>b__51_0();
    [CompilerGeneratedAttribute]
private SqlDataReader <ExecuteReader>b__53_0();
    [CompilerGeneratedAttribute]
private Task`1<SqlDataReader> <ExecuteReaderAsync>b__55_0();
    [CompilerGeneratedAttribute]
private object <ExecuteScalar>b__59_0();
    [CompilerGeneratedAttribute]
private XmlReader <ExecuteXmlReader>b__61_0();
    [CompilerGeneratedAttribute]
private Task`1<XmlReader> <ExecuteXmlReaderAsync>b__62_0();
}
