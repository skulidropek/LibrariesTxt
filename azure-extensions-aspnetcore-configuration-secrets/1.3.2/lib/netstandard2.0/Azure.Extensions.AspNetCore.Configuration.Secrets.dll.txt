internal static class Azure.Core.Argument : object {
    public static void AssertNotNull(T value, string name);
    public static void AssertNotNull(Nullable`1<T> value, string name);
    public static void AssertNotNullOrEmpty(IEnumerable`1<T> value, string name);
    public static void AssertNotNullOrEmpty(string value, string name);
    public static void AssertNotNullOrWhiteSpace(string value, string name);
    public static void AssertNotDefault(T& value, string name);
    public static void AssertInRange(T value, T minimum, T maximum, string name);
    public static void AssertEnumDefined(Type enumType, object value, string name);
    public static T CheckNotNull(T value, string name);
    public static string CheckNotNullOrEmpty(string value, string name);
    [NullableContextAttribute("1")]
public static void AssertNull(T value, string name, string message);
}
public class Azure.Extensions.AspNetCore.Configuration.Secrets.AzureKeyVaultConfigurationOptions : object {
    [CompilerGeneratedAttribute]
private KeyVaultSecretManager <Manager>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <ReloadInterval>k__BackingField;
    public KeyVaultSecretManager Manager { get; public set; }
    public Nullable`1<TimeSpan> ReloadInterval { get; public set; }
    [CompilerGeneratedAttribute]
public KeyVaultSecretManager get_Manager();
    [CompilerGeneratedAttribute]
public void set_Manager(KeyVaultSecretManager value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_ReloadInterval();
    [CompilerGeneratedAttribute]
public void set_ReloadInterval(Nullable`1<TimeSpan> value);
}
public class Azure.Extensions.AspNetCore.Configuration.Secrets.AzureKeyVaultConfigurationProvider : ConfigurationProvider {
    private Nullable`1<TimeSpan> _reloadInterval;
    private SecretClient _client;
    private KeyVaultSecretManager _manager;
    private Dictionary`2<string, KeyVaultSecret> _loadedSecrets;
    private Task _pollingTask;
    private CancellationTokenSource _cancellationToken;
    private bool _disposed;
    public AzureKeyVaultConfigurationProvider(SecretClient client, AzureKeyVaultConfigurationOptions options);
    public virtual void Load();
    private void AddSecretToLoader(SecretProperties secret, Dictionary`2<string, KeyVaultSecret> oldLoadedSecrets, Dictionary`2<string, KeyVaultSecret> newLoadedSecrets, ParallelSecretLoader secretLoader);
    private void UpdateSecrets(Response`1[] loadedSecret, Dictionary`2<string, KeyVaultSecret> newLoadedSecrets, Dictionary`2<string, KeyVaultSecret> oldLoadedSecrets);
    [AsyncStateMachineAttribute("Azure.Extensions.AspNetCore.Configuration.Secrets.AzureKeyVaultConfigurationProvider/<PollForSecretChangesAsync>d__11")]
private Task PollForSecretChangesAsync();
    internal virtual Task WaitForReload();
    [AsyncStateMachineAttribute("Azure.Extensions.AspNetCore.Configuration.Secrets.AzureKeyVaultConfigurationProvider/<LoadAsync>d__13")]
private Task LoadAsync();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    private static bool IsUpToDate(KeyVaultSecret current, SecretProperties updated);
}
public class Azure.Extensions.AspNetCore.Configuration.Secrets.AzureKeyVaultConfigurationSource : object {
    private AzureKeyVaultConfigurationOptions _options;
    private SecretClient _client;
    public AzureKeyVaultConfigurationSource(SecretClient client, AzureKeyVaultConfigurationOptions options);
    public sealed virtual IConfigurationProvider Build(IConfigurationBuilder builder);
}
public class Azure.Extensions.AspNetCore.Configuration.Secrets.KeyVaultSecretManager : object {
    [CompilerGeneratedAttribute]
private static KeyVaultSecretManager <Instance>k__BackingField;
    internal static KeyVaultSecretManager Instance { get; }
    private static KeyVaultSecretManager();
    [CompilerGeneratedAttribute]
internal static KeyVaultSecretManager get_Instance();
    public virtual string GetKey(KeyVaultSecret secret);
    public virtual Dictionary`2<string, string> GetData(IEnumerable`1<KeyVaultSecret> secrets);
    public virtual bool Load(SecretProperties secret);
}
internal class Azure.Extensions.AspNetCore.Configuration.Secrets.ParallelSecretLoader : object {
    private static int ParallelismLevel;
    private SecretClient _client;
    private SemaphoreSlim _semaphore;
    private List`1<Task`1<Response`1<KeyVaultSecret>>> _tasks;
    public ParallelSecretLoader(SecretClient client);
    public void AddSecretToLoad(string secretName);
    [AsyncStateMachineAttribute("Azure.Extensions.AspNetCore.Configuration.Secrets.ParallelSecretLoader/<GetSecretAsync>d__6")]
private Task`1<Response`1<KeyVaultSecret>> GetSecretAsync(string secretName);
    public Response`1[] WaitForAll();
    public Task`1<Response`1[]> WaitForAllAsync();
    public sealed virtual void Dispose();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[ExtensionAttribute]
public static class Microsoft.Extensions.Configuration.AzureKeyVaultConfigurationExtensions : object {
    [ExtensionAttribute]
public static IConfigurationBuilder AddAzureKeyVault(IConfigurationBuilder configurationBuilder, Uri vaultUri, TokenCredential credential);
    [ExtensionAttribute]
public static IConfigurationBuilder AddAzureKeyVault(IConfigurationBuilder configurationBuilder, Uri vaultUri, TokenCredential credential, KeyVaultSecretManager manager);
    [ExtensionAttribute]
public static IConfigurationBuilder AddAzureKeyVault(IConfigurationBuilder configurationBuilder, SecretClient client, KeyVaultSecretManager manager);
    [ExtensionAttribute]
public static IConfigurationBuilder AddAzureKeyVault(IConfigurationBuilder configurationBuilder, Uri vaultUri, TokenCredential credential, AzureKeyVaultConfigurationOptions options);
    [ExtensionAttribute]
public static IConfigurationBuilder AddAzureKeyVault(IConfigurationBuilder configurationBuilder, SecretClient client, AzureKeyVaultConfigurationOptions options);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
