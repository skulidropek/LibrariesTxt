internal static class Azure.Core.Argument : object {
    public static void AssertNotNull(T value, string name);
    public static void AssertNotNull(Nullable`1<T> value, string name);
    public static void AssertNotNullOrEmpty(IEnumerable`1<T> value, string name);
    public static void AssertNotNullOrEmpty(string value, string name);
    public static void AssertNotNullOrWhiteSpace(string value, string name);
    public static void AssertNotDefault(T& value, string name);
    public static void AssertInRange(T value, T minimum, T maximum, string name);
    public static void AssertEnumDefined(Type enumType, object value, string name);
    public static T CheckNotNull(T value, string name);
    public static string CheckNotNullOrEmpty(string value, string name);
    [NullableContextAttribute("1")]
public static void AssertNull(T value, string name, string message);
}
internal class Azure.Extensions.AspNetCore.DataProtection.Keys.AzureKeyVaultXmlDecryptor : object {
    private IKeyEncryptionKeyResolver _client;
    public AzureKeyVaultXmlDecryptor(IServiceProvider serviceProvider);
    public sealed virtual XElement Decrypt(XElement encryptedElement);
}
internal class Azure.Extensions.AspNetCore.DataProtection.Keys.AzureKeyVaultXmlEncryptor : object {
    internal static string DefaultKeyEncryption;
    internal static Func`1<SymmetricAlgorithm> DefaultSymmetricAlgorithmFactory;
    private RandomNumberGenerator _randomNumberGenerator;
    private IKeyEncryptionKeyResolver _client;
    private string _keyId;
    public AzureKeyVaultXmlEncryptor(IKeyEncryptionKeyResolver client, string keyId);
    internal AzureKeyVaultXmlEncryptor(IKeyEncryptionKeyResolver client, string keyId, RandomNumberGenerator randomNumberGenerator);
    private static AzureKeyVaultXmlEncryptor();
    public sealed virtual EncryptedXmlInfo Encrypt(XElement plaintextElement);
}
internal class Azure.Extensions.AspNetCore.DataProtection.Keys.ConfigureKeyManagementKeyVaultEncryptorClientOptions : object {
    private IServiceScopeFactory _serviceScopeFactory;
    public ConfigureKeyManagementKeyVaultEncryptorClientOptions(IServiceScopeFactory serviceScopeFactory);
    public sealed virtual void Configure(KeyManagementOptions options);
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.DataProtection.AzureDataProtectionKeyVaultKeyBuilderExtensions : object {
    [ExtensionAttribute]
public static IDataProtectionBuilder ProtectKeysWithAzureKeyVault(IDataProtectionBuilder builder, Uri keyIdentifier, TokenCredential tokenCredential);
    [ExtensionAttribute]
public static IDataProtectionBuilder ProtectKeysWithAzureKeyVault(IDataProtectionBuilder builder, string keyIdentifier, IKeyEncryptionKeyResolver keyResolver);
    [ExtensionAttribute]
public static IDataProtectionBuilder ProtectKeysWithAzureKeyVault(IDataProtectionBuilder builder, string keyIdentifier, Func`2<IServiceProvider, IKeyEncryptionKeyResolver> keyResolverFactory);
    [ExtensionAttribute]
public static IDataProtectionBuilder ProtectKeysWithAzureKeyVault(IDataProtectionBuilder builder, string keyIdentifier, Func`2<IServiceProvider, TokenCredential> tokenCredentialFactory);
}
internal class Microsoft.AspNetCore.DataProtection.DecryptorTypeForwardingActivator : object {
    private IServiceProvider _services;
    private static string OldNamespace;
    private static string CurrentNamespace;
    private static string CurrentAzureNamespace;
    private static string OldDecryptor;
    private static string OldDecryptorAssembly;
    private static string NewDecryptor;
    private static string NewDecryptorAssembly;
    private ILogger _logger;
    private static Regex _versionPattern;
    private static Regex _tokenPattern;
    public DecryptorTypeForwardingActivator(IServiceProvider services);
    public DecryptorTypeForwardingActivator(IServiceProvider services, ILoggerFactory loggerFactory);
    private static DecryptorTypeForwardingActivator();
    public sealed virtual object CreateInstance(Type expectedBaseType, string originalTypeName);
    internal object CreateInstance(Type expectedBaseType, string originalTypeName, Boolean& forwarded);
    private static string RemovePublicKeyTokenFromAssemblyName(string forwardedTypeName);
    internal static string RemoveVersionFromAssemblyName(string forwardedTypeName);
    private object CreateInstanceImpl(Type expectedBaseType, string implementationTypeName);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
