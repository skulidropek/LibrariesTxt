internal abstract class Azure.Core.Amqp.MessageBody : object {
    protected ReadOnlyMemory`1<byte> WrittenMemory { get; }
    [NullableContextAttribute("1")]
public static MessageBody FromReadOnlyMemorySegments(IEnumerable`1<ReadOnlyMemory`1<byte>> segments);
    public static MessageBody FromReadOnlyMemorySegment(ReadOnlyMemory`1<byte> segment);
    [NullableContextAttribute("1")]
public static MessageBody FromDataSegments(IEnumerable`1<Data> segments);
    protected abstract virtual ReadOnlyMemory`1<byte> get_WrittenMemory();
    public abstract virtual IEnumerator`1<ReadOnlyMemory`1<byte>> GetEnumerator();
    [NullableContextAttribute("1")]
private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public static ReadOnlyMemory`1<byte> op_Implicit(MessageBody memory);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Azure.Core.Amqp.Shared.AmqpAnnotatedMessageConverter : object {
    private static int StreamBufferSizeInBytes;
    private static IReadOnlyDictionary`2<Type, AmqpType> AmqpPropertyTypeMap;
    private static AmqpAnnotatedMessageConverter();
    public static AmqpMessage ToAmqpMessage(AmqpAnnotatedMessage sourceMessage);
    public static AmqpAnnotatedMessage FromAmqpMessage(AmqpMessage source);
    [NullableContextAttribute("2")]
public static bool TryCreateAmqpPropertyValueFromNetProperty(object propertyValue, Object& amqpPropertyValue, bool allowBodyTypes);
    [NullableContextAttribute("2")]
public static bool TryCreateNetPropertyFromAmqpProperty(object amqpPropertyValue, Object& convertedPropertyValue, bool allowBodyTypes);
    [IteratorStateMachineAttribute("Azure.Core.Amqp.Shared.AmqpAnnotatedMessageConverter/<TranslateDataBody>d__6")]
private static IEnumerable`1<Data> TranslateDataBody(IEnumerable`1<ReadOnlyMemory`1<byte>> dataBody);
    [IteratorStateMachineAttribute("Azure.Core.Amqp.Shared.AmqpAnnotatedMessageConverter/<TranslateSequenceBody>d__7")]
private static IEnumerable`1<AmqpSequence> TranslateSequenceBody(IEnumerable`1<IList`1<object>> sequenceBody);
    private static AmqpValue TranslateValueBody(object valueBody);
    private static bool TryGetDataBody(AmqpMessage source, AmqpMessageBody& dataBody);
    private static bool TryGetSequenceBody(AmqpMessage source, AmqpMessageBody& sequenceBody);
    private static bool TryGetValueBody(AmqpMessage source, AmqpMessageBody& valueBody);
    private static void ThrowSerializationFailed(string propertyName, KeyValuePair`2<string, object> pair);
    [NullableContextAttribute("2")]
private static AmqpType GetTypeIdentifier(object value);
    private static object TranslateSymbol(AmqpSymbol symbol, object value);
    [NullableContextAttribute("0")]
private static ArraySegment`1<byte> ReadStreamToArraySegment(Stream stream);
    [NullableContextAttribute("2")]
public static AmqpType ToAmqpPropertyType(Type type);
}
internal static class Azure.Core.AppContextSwitchHelper : object {
    [NullableContextAttribute("1")]
public static bool GetConfigValue(string appContexSwitchName, string environmentVariableName);
}
internal static class Azure.Core.Argument : object {
    public static void AssertNotEmptyOrWhiteSpace(string argumentValue, string argumentName);
    public static void AssertNotTooLong(string argumentValue, int maximumLength, string argumentName);
    public static void AssertNotNegative(TimeSpan argumentValue, string argumentName);
    public static void AssertPositive(TimeSpan argumentValue, string argumentName);
    public static void AssertAtLeast(T argumentValue, T minimumValue, string argumentName);
    public static void AssertNotDisposed(bool wasDisposed, string targetName);
    public static void AssertWellFormedServiceBusNamespace(string argumentValue, string argumentName);
    public static void AssertNotNull(T value, string name);
    public static void AssertNotNull(Nullable`1<T> value, string name);
    public static void AssertNotNullOrEmpty(IEnumerable`1<T> value, string name);
    public static void AssertNotNullOrEmpty(string value, string name);
    public static void AssertNotNullOrWhiteSpace(string value, string name);
    public static void AssertNotDefault(T& value, string name);
    public static void AssertInRange(T value, T minimum, T maximum, string name);
    public static void AssertEnumDefined(Type enumType, object value, string name);
    public static T CheckNotNull(T value, string name);
    public static string CheckNotNullOrEmpty(string value, string name);
    [NullableContextAttribute("1")]
public static void AssertNull(T value, string name, string message);
}
internal class Azure.Core.ArrayBufferWriter`1 : object {
    private T[] _buffer;
    private static int DefaultInitialBufferSize;
    [CompilerGeneratedAttribute]
private int <WrittenCount>k__BackingField;
    public ReadOnlyMemory`1<T> WrittenMemory { get; }
    public ReadOnlySpan`1<T> WrittenSpan { get; }
    public int WrittenCount { get; private set; }
    public int Capacity { get; }
    public int FreeCapacity { get; }
    public ArrayBufferWriter`1(int initialCapacity);
    public ReadOnlyMemory`1<T> get_WrittenMemory();
    public ReadOnlySpan`1<T> get_WrittenSpan();
    [CompilerGeneratedAttribute]
public int get_WrittenCount();
    [CompilerGeneratedAttribute]
private void set_WrittenCount(int value);
    public int get_Capacity();
    public int get_FreeCapacity();
    public void Clear();
    public sealed virtual void Advance(int count);
    public sealed virtual Memory`1<T> GetMemory(int sizeHint);
    public sealed virtual Span`1<T> GetSpan(int sizeHint);
    private void CheckAndResizeBuffer(int sizeHint);
    private static void ThrowInvalidOperationException_AdvancedTooFar(int capacity);
}
[AttributeUsageAttribute("1")]
internal class Azure.Core.AzureResourceProviderNamespaceAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ResourceProviderNamespace>k__BackingField;
    public string ResourceProviderNamespace { get; }
    public AzureResourceProviderNamespaceAttribute(string resourceProviderNamespace);
    [CompilerGeneratedAttribute]
public string get_ResourceProviderNamespace();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class Azure.Core.Diagnostics.AzureEventSource : EventSource {
    private static string SharedDataKey;
    private static HashSet`1<string> NamesInUse;
    private static String[] MainEventSourceTraits;
    private static AzureEventSource();
    protected AzureEventSource(string eventSourceName);
    private static string DeduplicateName(string eventSourceName);
}
internal class Azure.Core.Diagnostics.ValueStopwatch : ValueType {
    private static double TimestampToTicks;
    private long _startTimestamp;
    public bool IsActive { get; }
    private ValueStopwatch(long startTimestamp);
    private static ValueStopwatch();
    public bool get_IsActive();
    public static ValueStopwatch StartNew();
    public TimeSpan GetElapsedTime();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Azure.Core.HashCodeBuilder : ValueType {
    private static UInt32 s_seed;
    private static UInt32 Prime1;
    private static UInt32 Prime2;
    private static UInt32 Prime3;
    private static UInt32 Prime4;
    private static UInt32 Prime5;
    private UInt32 _v1;
    private UInt32 _v2;
    private UInt32 _v3;
    private UInt32 _v4;
    private UInt32 _queue1;
    private UInt32 _queue2;
    private UInt32 _queue3;
    private UInt32 _length;
    private static HashCodeBuilder();
    private static UInt32 GenerateGlobalSeed();
    public static int Combine(T1 value1);
    public static int Combine(T1 value1, T2 value2);
    public static int Combine(T1 value1, T2 value2, T3 value3);
    public static int Combine(T1 value1, T2 value2, T3 value3, T4 value4);
    public static int Combine(T1 value1, T2 value2, T3 value3, T4 value4, T5 value5);
    public static int Combine(T1 value1, T2 value2, T3 value3, T4 value4, T5 value5, T6 value6);
    public static int Combine(T1 value1, T2 value2, T3 value3, T4 value4, T5 value5, T6 value6, T7 value7);
    public static int Combine(T1 value1, T2 value2, T3 value3, T4 value4, T5 value5, T6 value6, T7 value7, T8 value8);
    private static void Initialize(UInt32& v1, UInt32& v2, UInt32& v3, UInt32& v4);
    private static UInt32 Round(UInt32 hash, UInt32 input);
    private static UInt32 QueueRound(UInt32 hash, UInt32 queuedValue);
    private static UInt32 MixState(UInt32 v1, UInt32 v2, UInt32 v3, UInt32 v4);
    public static UInt32 RotateLeft(UInt32 value, int offset);
    private static UInt32 MixEmptyState();
    private static UInt32 MixFinal(UInt32 hash);
    public void Add(T value);
    public void Add(T value, IEqualityComparer`1<T> comparer);
    private void Add(int value);
    public int ToHashCode();
    [ObsoleteAttribute("HashCode is a mutable struct and should not be compared with other HashCodes. Use ToHashCode to retrieve the computed hash code.", "True")]
[EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[ObsoleteAttribute("HashCode is a mutable struct and should not be compared with other HashCodes.", "True")]
[EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Azure.Core.HttpMessageSanitizer : object {
    private static string LogAllValue;
    private bool _logAllHeaders;
    private bool _logFullQueries;
    private String[] _allowedQueryParameters;
    private string _redactedPlaceholder;
    private HashSet`1<string> _allowedHeaders;
    [NullableAttribute("2")]
[ThreadStaticAttribute]
private static StringBuilder s_cachedStringBuilder;
    private static int MaxCachedStringBuilderCapacity;
    internal static HttpMessageSanitizer Default;
    public HttpMessageSanitizer(String[] allowedQueryParameters, String[] allowedHeaders, string redactedPlaceholder);
    private static HttpMessageSanitizer();
    public string SanitizeHeader(string name, string value);
    public string SanitizeUrl(string url);
    private static StringBuilder RentStringBuilder(int capacity);
    private static string ToStringAndReturnStringBuilder(StringBuilder builder);
    [CompilerGeneratedAttribute]
internal static StringBuilder <SanitizeUrl>g__AppendReadOnlySpan|11_0(StringBuilder builder, ReadOnlySpan`1<char> span);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Azure.Core.PageResponseEnumerator : object {
    public static FuncPageable`1<T> CreateEnumerable(Func`2<string, Page`1<T>> pageFunc);
    public static FuncPageable`1<T> CreateEnumerable(Func`3<string, Nullable`1<int>, Page`1<T>> pageFunc);
    public static AsyncPageable`1<T> CreateAsyncEnumerable(Func`2<string, Task`1<Page`1<T>>> pageFunc);
    public static AsyncPageable`1<T> CreateAsyncEnumerable(Func`3<string, Nullable`1<int>, Task`1<Page`1<T>>> pageFunc);
}
internal static class Azure.Core.Pipeline.ActivityExtensions : object {
    [CompilerGeneratedAttribute]
private static bool <SupportsActivitySource>k__BackingField;
    public static bool SupportsActivitySource { get; private set; }
    private static ActivityExtensions();
    [CompilerGeneratedAttribute]
public static bool get_SupportsActivitySource();
    [CompilerGeneratedAttribute]
private static void set_SupportsActivitySource(bool value);
    public static void ResetFeatureSwitch();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Azure.Core.Pipeline.ClientDiagnostics : DiagnosticScopeFactory {
    public ClientDiagnostics(ClientOptions options, Nullable`1<bool> suppressNestedClientActivities);
    public ClientDiagnostics(string optionsNamespace, string providerNamespace, DiagnosticsOptions diagnosticsOptions, Nullable`1<bool> suppressNestedClientActivities);
    internal static HttpMessageSanitizer CreateMessageSanitizer(DiagnosticsOptions diagnostics);
    internal static string GetResourceProviderNamespace(Assembly assembly);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
internal class Azure.Core.Pipeline.DiagnosticScope : ValueType {
    private static string AzureSdkScopeLabel;
    internal static string OpenTelemetrySchemaAttribute;
    internal static string OpenTelemetrySchemaVersion;
    private static object AzureSdkScopeValue;
    [NullableAttribute("2")]
private ActivityAdapter _activityAdapter;
    private bool _suppressNestedClientActivities;
    [CompilerGeneratedAttribute]
private bool <IsEnabled>k__BackingField;
    public bool IsEnabled { get; }
    [RequiresUnreferencedCodeAttribute("The diagnosticSourceArgs are used in a call to DiagnosticSource.Write, all necessary properties need to be preserved on the type being passed in using DynamicDependency attributes.")]
internal DiagnosticScope(string scopeName, DiagnosticListener source, object diagnosticSourceArgs, ActivitySource activitySource, ActivityKind kind, bool suppressNestedClientActivities);
    private static DiagnosticScope();
    [CompilerGeneratedAttribute]
public bool get_IsEnabled();
    public void AddAttribute(string name, string value);
    public void AddIntegerAttribute(string name, int value);
    public void AddLongAttribute(string name, long value);
    public void AddAttribute(string name, T value, Func`2<T, string> format);
    public void AddLink(string traceparent, string tracestate, IDictionary`2<string, object> attributes);
    public void Start();
    public void SetDisplayName(string displayName);
    public void SetStartTime(DateTime dateTime);
    public void SetTraceContext(string traceparent, string tracestate);
    public sealed virtual void Dispose();
    [UnconditionalSuppressMessageAttribute("ReflectionAnalysis", "IL2026")]
public void Failed(Exception exception);
    [UnconditionalSuppressMessageAttribute("ReflectionAnalysis", "IL2026")]
public void Failed(string errorCode);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Azure.Core.Pipeline.DiagnosticScopeFactory : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Dictionary`2<string, DiagnosticListener> _listeners;
    [NullableAttribute("2")]
private string _resourceProviderNamespace;
    [NullableAttribute("2")]
private DiagnosticListener _source;
    private bool _suppressNestedClientActivities;
    private bool _isStable;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static ConcurrentDictionary`2<string, ActivitySource> ActivitySources;
    [CompilerGeneratedAttribute]
private bool <IsActivityEnabled>k__BackingField;
    public bool IsActivityEnabled { get; }
    public DiagnosticScopeFactory(string clientNamespace, string resourceProviderNamespace, bool isActivityEnabled, bool suppressNestedClientActivities, bool isStable);
    private static DiagnosticScopeFactory();
    [CompilerGeneratedAttribute]
public bool get_IsActivityEnabled();
    [UnconditionalSuppressMessageAttribute("ReflectionAnalysis", "IL2026:RequiresUnreferencedCode")]
public DiagnosticScope CreateScope(string name, ActivityKind kind);
    private ActivitySource GetActivitySource(string ns, string name);
}
internal class Azure.Core.Pipeline.ServiceBusRequestFailedDetailsParser : RequestFailedDetailsParser {
    [NullableContextAttribute("1")]
public virtual bool TryParse(Response response, ResponseError& error, IDictionary`2& data);
}
[ExtensionAttribute]
internal static class Azure.Core.Pipeline.TaskExtensions : object {
    [ExtensionAttribute]
public static WithCancellationTaskAwaitable AwaitWithCancellation(Task task, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static WithCancellationTaskAwaitable`1<T> AwaitWithCancellation(Task`1<T> task, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static WithCancellationValueTaskAwaitable`1<T> AwaitWithCancellation(ValueTask`1<T> task, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static T EnsureCompleted(Task`1<T> task);
    [ExtensionAttribute]
public static void EnsureCompleted(Task task);
    [ExtensionAttribute]
public static T EnsureCompleted(ValueTask`1<T> task);
    [ExtensionAttribute]
public static void EnsureCompleted(ValueTask task);
    [ExtensionAttribute]
public static Enumerable`1<T> EnsureSyncEnumerable(IAsyncEnumerable`1<T> asyncEnumerable);
    [ExtensionAttribute]
public static ConfiguredValueTaskAwaitable`1<T> EnsureCompleted(ConfiguredValueTaskAwaitable`1<T> awaitable, bool async);
    [ExtensionAttribute]
public static ConfiguredValueTaskAwaitable EnsureCompleted(ConfiguredValueTaskAwaitable awaitable, bool async);
    [ConditionalAttribute("DEBUG")]
private static void VerifyTaskCompleted(bool isCompleted);
}
internal static class Azure.Core.Shared.GuidUtilities : object {
    private static int GuidSizeInBytes;
    public static bool TryParseGuidBytes(ReadOnlySpan`1<byte> bytes, Guid& guid);
    public static void WriteGuidToBuffer(Guid guid, Span`1<byte> buffer);
    private static void AssertBufferSize(Span`1<byte> buffer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Azure.Core.Shared.MessagingClientDiagnostics : object {
    private string _fullyQualifiedNamespace;
    private string _entityPath;
    private string _messagingSystem;
    private DiagnosticScopeFactory _scopeFactory;
    public static string MessagingSystem;
    public static string DestinationName;
    public static string MessagingOperation;
    public static string ServerAddress;
    public static string BatchCount;
    public static string TraceParent;
    public static string TraceState;
    public static string MessageBusDestination;
    public static string PeerAddress;
    public static string Component;
    public static string DiagnosticIdAttribute;
    public MessagingClientDiagnostics(string clientNamespace, string resourceProviderNamespace, string messagingSystem, string fullyQualifiedNamespace, string entityPath);
    public DiagnosticScope CreateScope(string activityName, ActivityKind kind, MessagingDiagnosticOperation operation);
    [NullableContextAttribute("2")]
public static bool TryExtractTraceContext(IReadOnlyDictionary`2<string, object> properties, String& traceparent, String& tracestate);
    [NullableContextAttribute("2")]
public static bool TryExtractTraceContext(IDictionary`2<string, object> properties, String& traceparent, String& tracestate);
    [NullableContextAttribute("2")]
public void InstrumentMessage(IDictionary`2<string, object> properties, string activityName, String& traceparent, String& tracestate);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
internal class Azure.Core.Shared.MessagingDiagnosticOperation : ValueType {
    public static MessagingDiagnosticOperation Settle;
    private string _operation;
    public static MessagingDiagnosticOperation Publish;
    public static MessagingDiagnosticOperation Receive;
    public static MessagingDiagnosticOperation Process;
    private MessagingDiagnosticOperation(string operation);
    private static MessagingDiagnosticOperation();
    public virtual string ToString();
    public static bool op_Equality(MessagingDiagnosticOperation left, MessagingDiagnosticOperation right);
    public static bool op_Inequality(MessagingDiagnosticOperation left, MessagingDiagnosticOperation right);
    public static MessagingDiagnosticOperation op_Implicit(string value);
    public sealed virtual bool Equals(MessagingDiagnosticOperation other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public enum Azure.Messaging.ServiceBus.Administration.AccessRights : Enum {
    public int value__;
    public static AccessRights Manage;
    public static AccessRights Send;
    public static AccessRights Listen;
}
internal class Azure.Messaging.ServiceBus.Administration.AdministrationClientConstants : object {
    public static int QueueNameMaximumLength;
    public static int TopicNameMaximumLength;
    public static int SubscriptionNameMaximumLength;
    public static int RuleNameMaximumLength;
    public static string AtomNamespace;
    public static string ServiceBusNamespace;
    public static string XmlSchemaInstanceNamespace;
    public static string XmlSchemaNamespace;
    public static string SerializationNamespace;
    public static string AtomContentType;
    public static string ServiceBusSupplementartyAuthorizationHeaderName;
    public static string ServiceBusDlqSupplementaryAuthorizationHeaderName;
    public static string HttpErrorSubCodeFormatString;
    public static string ConflictOperationInProgressSubCode;
    public static string ForbiddenInvalidOperationSubCode;
    public static TimeSpan MinimumAllowedTimeToLive;
    public static TimeSpan MaximumAllowedTimeToLive;
    public static TimeSpan MinimumLockDuration;
    public static TimeSpan MaximumLockDuration;
    public static TimeSpan MinimumAllowedAutoDeleteOnIdle;
    public static TimeSpan MaximumDuplicateDetectionHistoryTimeWindow;
    public static TimeSpan MinimumDuplicateDetectionHistoryTimeWindow;
    public static int MinAllowedMaxDeliveryCount;
    public static int MaxUserMetadataLength;
    public static Char[] InvalidEntityPathCharacters;
    public static int SupportedClaimsCount;
    private static AdministrationClientConstants();
}
public abstract class Azure.Messaging.ServiceBus.Administration.AuthorizationRule : object {
    [CompilerGeneratedAttribute]
private DateTimeOffset <CreatedTime>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <ModifiedTime>k__BackingField;
    public string ClaimType { get; }
    internal string ClaimValue { get; }
    public List`1<AccessRights> Rights { get; public set; }
    public string KeyName { get; public set; }
    public DateTimeOffset CreatedTime { get; internal set; }
    public DateTimeOffset ModifiedTime { get; internal set; }
    internal abstract virtual AuthorizationRule Clone();
    public abstract virtual string get_ClaimType();
    internal abstract virtual string get_ClaimValue();
    public abstract virtual List`1<AccessRights> get_Rights();
    public abstract virtual void set_Rights(List`1<AccessRights> value);
    public abstract virtual string get_KeyName();
    public abstract virtual void set_KeyName(string value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_CreatedTime();
    [CompilerGeneratedAttribute]
internal void set_CreatedTime(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_ModifiedTime();
    [CompilerGeneratedAttribute]
internal void set_ModifiedTime(DateTimeOffset value);
    public abstract virtual bool Equals(AuthorizationRule other);
    internal static AuthorizationRule ParseFromXElement(XElement xElement);
    internal abstract virtual XElement Serialize();
    public abstract virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class Azure.Messaging.ServiceBus.Administration.AuthorizationRules : List`1<AuthorizationRule> {
    internal XElement Serialize();
    internal AuthorizationRules Clone();
    internal static AuthorizationRules ParseFromXElement(XElement xElement);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(AuthorizationRules other);
    public static bool op_Equality(AuthorizationRules left, AuthorizationRules right);
    public static bool op_Inequality(AuthorizationRules left, AuthorizationRules right);
}
public class Azure.Messaging.ServiceBus.Administration.CorrelationRuleFilter : RuleFilter {
    [CompilerGeneratedAttribute]
private string <CorrelationId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MessageId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <To>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReplyTo>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Subject>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SessionId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReplyToSessionId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContentType>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <ApplicationProperties>k__BackingField;
    public string CorrelationId { get; public set; }
    public string MessageId { get; public set; }
    public string To { get; public set; }
    public string ReplyTo { get; public set; }
    public string Subject { get; public set; }
    public string SessionId { get; public set; }
    public string ReplyToSessionId { get; public set; }
    public string ContentType { get; public set; }
    public IDictionary`2<string, object> ApplicationProperties { get; internal set; }
    public CorrelationRuleFilter(string correlationId);
    internal virtual RuleFilter Clone();
    [CompilerGeneratedAttribute]
public string get_CorrelationId();
    [CompilerGeneratedAttribute]
public void set_CorrelationId(string value);
    [CompilerGeneratedAttribute]
public string get_MessageId();
    [CompilerGeneratedAttribute]
public void set_MessageId(string value);
    [CompilerGeneratedAttribute]
public string get_To();
    [CompilerGeneratedAttribute]
public void set_To(string value);
    [CompilerGeneratedAttribute]
public string get_ReplyTo();
    [CompilerGeneratedAttribute]
public void set_ReplyTo(string value);
    [CompilerGeneratedAttribute]
public string get_Subject();
    [CompilerGeneratedAttribute]
public void set_Subject(string value);
    [CompilerGeneratedAttribute]
public string get_SessionId();
    [CompilerGeneratedAttribute]
public void set_SessionId(string value);
    [CompilerGeneratedAttribute]
public string get_ReplyToSessionId();
    [CompilerGeneratedAttribute]
public void set_ReplyToSessionId(string value);
    [CompilerGeneratedAttribute]
public string get_ContentType();
    [CompilerGeneratedAttribute]
public void set_ContentType(string value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_ApplicationProperties();
    [CompilerGeneratedAttribute]
internal void set_ApplicationProperties(IDictionary`2<string, object> value);
    public virtual string ToString();
    private static void AppendPropertyExpression(Boolean& firstExpression, StringBuilder builder, string propertyName, object value);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public virtual bool Equals(RuleFilter other);
    public static bool op_Equality(CorrelationRuleFilter left, CorrelationRuleFilter right);
    public static bool op_Inequality(CorrelationRuleFilter left, CorrelationRuleFilter right);
}
[ExtensionAttribute]
internal static class Azure.Messaging.ServiceBus.Administration.CorrelationRuleFilterExtensions : object {
    public static RuleFilter ParseFromXElement(XElement xElement);
    [ExtensionAttribute]
public static XElement Serialize(CorrelationRuleFilter filter, string filterName);
}
public class Azure.Messaging.ServiceBus.Administration.CreateQueueOptions : object {
    private TimeSpan _duplicateDetectionHistoryTimeWindow;
    private string _name;
    private TimeSpan _lockDuration;
    private TimeSpan _defaultMessageTimeToLive;
    private TimeSpan autoDeleteOnIdle;
    private int _maxDeliveryCount;
    private string _forwardTo;
    private string _forwardDeadLetteredMessagesTo;
    private string _userMetadata;
    [CompilerGeneratedAttribute]
private long <MaxSizeInMegabytes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RequiresDuplicateDetection>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RequiresSession>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DeadLetteringOnMessageExpiration>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableBatchedOperations>k__BackingField;
    [CompilerGeneratedAttribute]
private AuthorizationRules <AuthorizationRules>k__BackingField;
    [CompilerGeneratedAttribute]
private EntityStatus <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnablePartitioning>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <MaxMessageSizeInKilobytes>k__BackingField;
    public string Name { get; public set; }
    public TimeSpan LockDuration { get; public set; }
    public long MaxSizeInMegabytes { get; public set; }
    public bool RequiresDuplicateDetection { get; public set; }
    public bool RequiresSession { get; public set; }
    public TimeSpan DefaultMessageTimeToLive { get; public set; }
    public TimeSpan AutoDeleteOnIdle { get; public set; }
    public bool DeadLetteringOnMessageExpiration { get; public set; }
    public TimeSpan DuplicateDetectionHistoryTimeWindow { get; public set; }
    public int MaxDeliveryCount { get; public set; }
    public bool EnableBatchedOperations { get; public set; }
    public AuthorizationRules AuthorizationRules { get; internal set; }
    public EntityStatus Status { get; public set; }
    public string ForwardTo { get; public set; }
    public string ForwardDeadLetteredMessagesTo { get; public set; }
    public bool EnablePartitioning { get; public set; }
    public string UserMetadata { get; public set; }
    public Nullable`1<long> MaxMessageSizeInKilobytes { get; public set; }
    public CreateQueueOptions(string name);
    public CreateQueueOptions(QueueProperties queue);
    public string get_Name();
    public void set_Name(string value);
    public TimeSpan get_LockDuration();
    public void set_LockDuration(TimeSpan value);
    [CompilerGeneratedAttribute]
public long get_MaxSizeInMegabytes();
    [CompilerGeneratedAttribute]
public void set_MaxSizeInMegabytes(long value);
    [CompilerGeneratedAttribute]
public bool get_RequiresDuplicateDetection();
    [CompilerGeneratedAttribute]
public void set_RequiresDuplicateDetection(bool value);
    [CompilerGeneratedAttribute]
public bool get_RequiresSession();
    [CompilerGeneratedAttribute]
public void set_RequiresSession(bool value);
    public TimeSpan get_DefaultMessageTimeToLive();
    public void set_DefaultMessageTimeToLive(TimeSpan value);
    public TimeSpan get_AutoDeleteOnIdle();
    public void set_AutoDeleteOnIdle(TimeSpan value);
    [CompilerGeneratedAttribute]
public bool get_DeadLetteringOnMessageExpiration();
    [CompilerGeneratedAttribute]
public void set_DeadLetteringOnMessageExpiration(bool value);
    public TimeSpan get_DuplicateDetectionHistoryTimeWindow();
    public void set_DuplicateDetectionHistoryTimeWindow(TimeSpan value);
    public int get_MaxDeliveryCount();
    public void set_MaxDeliveryCount(int value);
    [CompilerGeneratedAttribute]
public bool get_EnableBatchedOperations();
    [CompilerGeneratedAttribute]
public void set_EnableBatchedOperations(bool value);
    [CompilerGeneratedAttribute]
public AuthorizationRules get_AuthorizationRules();
    [CompilerGeneratedAttribute]
internal void set_AuthorizationRules(AuthorizationRules value);
    [CompilerGeneratedAttribute]
public EntityStatus get_Status();
    [CompilerGeneratedAttribute]
public void set_Status(EntityStatus value);
    public string get_ForwardTo();
    public void set_ForwardTo(string value);
    public string get_ForwardDeadLetteredMessagesTo();
    public void set_ForwardDeadLetteredMessagesTo(string value);
    [CompilerGeneratedAttribute]
public bool get_EnablePartitioning();
    [CompilerGeneratedAttribute]
public void set_EnablePartitioning(bool value);
    public string get_UserMetadata();
    public void set_UserMetadata(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_MaxMessageSizeInKilobytes();
    [CompilerGeneratedAttribute]
public void set_MaxMessageSizeInKilobytes(Nullable`1<long> value);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(CreateQueueOptions other);
    public static bool op_Equality(CreateQueueOptions left, CreateQueueOptions right);
    public static bool op_Inequality(CreateQueueOptions left, CreateQueueOptions right);
}
public class Azure.Messaging.ServiceBus.Administration.CreateRuleOptions : object {
    public static string DefaultRuleName;
    private RuleFilter _filter;
    [CompilerGeneratedAttribute]
private RuleAction <Action>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <CreatedAt>k__BackingField;
    public RuleFilter Filter { get; public set; }
    public RuleAction Action { get; public set; }
    public string Name { get; public set; }
    internal DateTime CreatedAt { get; internal set; }
    public CreateRuleOptions(string name);
    public CreateRuleOptions(string name, RuleFilter filter);
    public CreateRuleOptions(RuleProperties rule);
    public RuleFilter get_Filter();
    public void set_Filter(RuleFilter value);
    [CompilerGeneratedAttribute]
public RuleAction get_Action();
    [CompilerGeneratedAttribute]
public void set_Action(RuleAction value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
internal DateTime get_CreatedAt();
    [CompilerGeneratedAttribute]
internal void set_CreatedAt(DateTime value);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(CreateRuleOptions other);
    public static bool op_Equality(CreateRuleOptions left, CreateRuleOptions right);
    public static bool op_Inequality(CreateRuleOptions left, CreateRuleOptions right);
}
public class Azure.Messaging.ServiceBus.Administration.CreateSubscriptionOptions : object {
    private string _topicName;
    private string _subscriptionName;
    private TimeSpan _lockDuration;
    private TimeSpan _defaultMessageTimeToLive;
    private TimeSpan _autoDeleteOnIdle;
    private int _maxDeliveryCount;
    private string _forwardTo;
    private string _forwardDeadLetteredMessagesTo;
    private string _userMetadata;
    [CompilerGeneratedAttribute]
private bool <RequiresSession>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DeadLetteringOnMessageExpiration>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableDeadLetteringOnFilterEvaluationExceptions>k__BackingField;
    [CompilerGeneratedAttribute]
private EntityStatus <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableBatchedOperations>k__BackingField;
    public TimeSpan LockDuration { get; public set; }
    public bool RequiresSession { get; public set; }
    public TimeSpan DefaultMessageTimeToLive { get; public set; }
    public TimeSpan AutoDeleteOnIdle { get; public set; }
    public bool DeadLetteringOnMessageExpiration { get; public set; }
    public bool EnableDeadLetteringOnFilterEvaluationExceptions { get; public set; }
    public string TopicName { get; public set; }
    public string SubscriptionName { get; public set; }
    public int MaxDeliveryCount { get; public set; }
    public EntityStatus Status { get; public set; }
    public string ForwardTo { get; public set; }
    public string ForwardDeadLetteredMessagesTo { get; public set; }
    public bool EnableBatchedOperations { get; public set; }
    public string UserMetadata { get; public set; }
    public CreateSubscriptionOptions(string topicName, string subscriptionName);
    public CreateSubscriptionOptions(SubscriptionProperties subscription);
    public TimeSpan get_LockDuration();
    public void set_LockDuration(TimeSpan value);
    [CompilerGeneratedAttribute]
public bool get_RequiresSession();
    [CompilerGeneratedAttribute]
public void set_RequiresSession(bool value);
    public TimeSpan get_DefaultMessageTimeToLive();
    public void set_DefaultMessageTimeToLive(TimeSpan value);
    public TimeSpan get_AutoDeleteOnIdle();
    public void set_AutoDeleteOnIdle(TimeSpan value);
    [CompilerGeneratedAttribute]
public bool get_DeadLetteringOnMessageExpiration();
    [CompilerGeneratedAttribute]
public void set_DeadLetteringOnMessageExpiration(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableDeadLetteringOnFilterEvaluationExceptions();
    [CompilerGeneratedAttribute]
public void set_EnableDeadLetteringOnFilterEvaluationExceptions(bool value);
    public string get_TopicName();
    public void set_TopicName(string value);
    public string get_SubscriptionName();
    public void set_SubscriptionName(string value);
    public int get_MaxDeliveryCount();
    public void set_MaxDeliveryCount(int value);
    [CompilerGeneratedAttribute]
public EntityStatus get_Status();
    [CompilerGeneratedAttribute]
public void set_Status(EntityStatus value);
    public string get_ForwardTo();
    public void set_ForwardTo(string value);
    public string get_ForwardDeadLetteredMessagesTo();
    public void set_ForwardDeadLetteredMessagesTo(string value);
    [CompilerGeneratedAttribute]
public bool get_EnableBatchedOperations();
    [CompilerGeneratedAttribute]
public void set_EnableBatchedOperations(bool value);
    public string get_UserMetadata();
    public void set_UserMetadata(string value);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(CreateSubscriptionOptions other);
    public static bool op_Equality(CreateSubscriptionOptions left, CreateSubscriptionOptions right);
    public static bool op_Inequality(CreateSubscriptionOptions left, CreateSubscriptionOptions right);
}
public class Azure.Messaging.ServiceBus.Administration.CreateTopicOptions : object {
    private TimeSpan _duplicateDetectionHistoryTimeWindow;
    private string _name;
    private TimeSpan _defaultMessageTimeToLive;
    private TimeSpan _autoDeleteOnIdle;
    private string _userMetadata;
    [CompilerGeneratedAttribute]
private long <MaxSizeInMegabytes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RequiresDuplicateDetection>k__BackingField;
    [CompilerGeneratedAttribute]
private AuthorizationRules <AuthorizationRules>k__BackingField;
    [CompilerGeneratedAttribute]
private EntityStatus <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnablePartitioning>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SupportOrdering>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableBatchedOperations>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <MaxMessageSizeInKilobytes>k__BackingField;
    public TimeSpan DefaultMessageTimeToLive { get; public set; }
    public TimeSpan AutoDeleteOnIdle { get; public set; }
    public long MaxSizeInMegabytes { get; public set; }
    public bool RequiresDuplicateDetection { get; public set; }
    public TimeSpan DuplicateDetectionHistoryTimeWindow { get; public set; }
    public string Name { get; public set; }
    public AuthorizationRules AuthorizationRules { get; internal set; }
    public EntityStatus Status { get; public set; }
    public bool EnablePartitioning { get; public set; }
    public bool SupportOrdering { get; public set; }
    public bool EnableBatchedOperations { get; public set; }
    public string UserMetadata { get; public set; }
    public Nullable`1<long> MaxMessageSizeInKilobytes { get; public set; }
    public CreateTopicOptions(string name);
    public CreateTopicOptions(TopicProperties topic);
    public TimeSpan get_DefaultMessageTimeToLive();
    public void set_DefaultMessageTimeToLive(TimeSpan value);
    public TimeSpan get_AutoDeleteOnIdle();
    public void set_AutoDeleteOnIdle(TimeSpan value);
    [CompilerGeneratedAttribute]
public long get_MaxSizeInMegabytes();
    [CompilerGeneratedAttribute]
public void set_MaxSizeInMegabytes(long value);
    [CompilerGeneratedAttribute]
public bool get_RequiresDuplicateDetection();
    [CompilerGeneratedAttribute]
public void set_RequiresDuplicateDetection(bool value);
    public TimeSpan get_DuplicateDetectionHistoryTimeWindow();
    public void set_DuplicateDetectionHistoryTimeWindow(TimeSpan value);
    public string get_Name();
    public void set_Name(string value);
    [CompilerGeneratedAttribute]
public AuthorizationRules get_AuthorizationRules();
    [CompilerGeneratedAttribute]
internal void set_AuthorizationRules(AuthorizationRules value);
    [CompilerGeneratedAttribute]
public EntityStatus get_Status();
    [CompilerGeneratedAttribute]
public void set_Status(EntityStatus value);
    [CompilerGeneratedAttribute]
public bool get_EnablePartitioning();
    [CompilerGeneratedAttribute]
public void set_EnablePartitioning(bool value);
    [CompilerGeneratedAttribute]
public bool get_SupportOrdering();
    [CompilerGeneratedAttribute]
public void set_SupportOrdering(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableBatchedOperations();
    [CompilerGeneratedAttribute]
public void set_EnableBatchedOperations(bool value);
    public string get_UserMetadata();
    public void set_UserMetadata(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_MaxMessageSizeInKilobytes();
    [CompilerGeneratedAttribute]
public void set_MaxMessageSizeInKilobytes(Nullable`1<long> value);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(CreateTopicOptions other);
    public static bool op_Equality(CreateTopicOptions left, CreateTopicOptions right);
    public static bool op_Inequality(CreateTopicOptions left, CreateTopicOptions right);
}
[IsReadOnlyAttribute]
public class Azure.Messaging.ServiceBus.Administration.EntityStatus : ValueType {
    internal static string ActiveValue;
    internal static string DisabledValue;
    internal static string SendDisabledValue;
    internal static string ReceiveDisabledValue;
    private string _value;
    [CompilerGeneratedAttribute]
private static EntityStatus <Active>k__BackingField;
    [CompilerGeneratedAttribute]
private static EntityStatus <Disabled>k__BackingField;
    [CompilerGeneratedAttribute]
private static EntityStatus <SendDisabled>k__BackingField;
    [CompilerGeneratedAttribute]
private static EntityStatus <ReceiveDisabled>k__BackingField;
    public static EntityStatus Active { get; }
    public static EntityStatus Disabled { get; }
    public static EntityStatus SendDisabled { get; }
    public static EntityStatus ReceiveDisabled { get; }
    public EntityStatus(string value);
    private static EntityStatus();
    [CompilerGeneratedAttribute]
public static EntityStatus get_Active();
    [CompilerGeneratedAttribute]
public static EntityStatus get_Disabled();
    [CompilerGeneratedAttribute]
public static EntityStatus get_SendDisabled();
    [CompilerGeneratedAttribute]
public static EntityStatus get_ReceiveDisabled();
    public static bool op_Equality(EntityStatus left, EntityStatus right);
    public static bool op_Inequality(EntityStatus left, EntityStatus right);
    public static EntityStatus op_Implicit(string value);
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(EntityStatus other);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    public virtual string ToString();
}
public class Azure.Messaging.ServiceBus.Administration.FalseRuleFilter : SqlRuleFilter {
    internal virtual RuleFilter Clone();
    public virtual string ToString();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public virtual bool Equals(RuleFilter other);
    public static bool op_Equality(FalseRuleFilter left, FalseRuleFilter right);
    public static bool op_Inequality(FalseRuleFilter left, FalseRuleFilter right);
}
internal class Azure.Messaging.ServiceBus.Administration.HttpRequestAndResponse : object {
    private HttpPipeline _pipeline;
    private string _fullyQualifiedNamespace;
    private TokenCredential _tokenCredential;
    private int _port;
    private ClientDiagnostics _diagnostics;
    private string _versionQuery;
    public HttpRequestAndResponse(HttpPipeline pipeline, ClientDiagnostics diagnostics, TokenCredential tokenCredential, string fullyQualifiedNamespace, ServiceVersion version);
    internal void ThrowIfRequestFailed(Request request, Response response);
    private Task`1<string> GetToken(Uri requestUri);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.Administration.HttpRequestAndResponse/<GetTokenAsync>d__9")]
public Task`1<string> GetTokenAsync(string requestUri);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.Administration.HttpRequestAndResponse/<GetEntitiesPageAsync>d__10`1")]
public Task`1<Page`1<T>> GetEntitiesPageAsync(string path, string nextSkip, Func`2<Response, Task`1<IReadOnlyList`1<T>>> parseFunction, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.Administration.HttpRequestAndResponse/<GetEntityAsync>d__11")]
public Task`1<Response> GetEntityAsync(string entityPath, string query, bool enrich, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.Administration.HttpRequestAndResponse/<PutEntityAsync>d__12")]
public Task`1<Response> PutEntityAsync(string entityPath, string requestBody, bool isUpdate, string forwardTo, string fwdDeadLetterTo, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.Administration.HttpRequestAndResponse/<DeleteEntityAsync>d__13")]
public Task`1<Response> DeleteEntityAsync(string entityPath, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.Administration.HttpRequestAndResponse/<SendHttpRequestAsync>d__14")]
private Task`1<Response> SendHttpRequestAsync(Request request, CancellationToken cancellationToken);
    private static int GetPort(string endpoint);
}
[IsReadOnlyAttribute]
public class Azure.Messaging.ServiceBus.Administration.MessagingSku : ValueType {
    internal static string BasicValue;
    internal static string StandardValue;
    internal static string PremiumValue;
    private string _value;
    [CompilerGeneratedAttribute]
private static MessagingSku <Basic>k__BackingField;
    [CompilerGeneratedAttribute]
private static MessagingSku <Standard>k__BackingField;
    [CompilerGeneratedAttribute]
private static MessagingSku <Premium>k__BackingField;
    public static MessagingSku Basic { get; }
    public static MessagingSku Standard { get; }
    public static MessagingSku Premium { get; }
    public MessagingSku(string value);
    private static MessagingSku();
    [CompilerGeneratedAttribute]
public static MessagingSku get_Basic();
    [CompilerGeneratedAttribute]
public static MessagingSku get_Standard();
    [CompilerGeneratedAttribute]
public static MessagingSku get_Premium();
    public static bool op_Equality(MessagingSku left, MessagingSku right);
    public static bool op_Inequality(MessagingSku left, MessagingSku right);
    public static MessagingSku op_Implicit(string value);
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(MessagingSku other);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    public virtual string ToString();
}
public class Azure.Messaging.ServiceBus.Administration.NamespaceProperties : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private NamespaceType <NamespaceType>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <CreatedTime>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <ModifiedTime>k__BackingField;
    [CompilerGeneratedAttribute]
private MessagingSku <MessagingSku>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MessagingUnits>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Alias>k__BackingField;
    public string Name { get; internal set; }
    internal NamespaceType NamespaceType { get; internal set; }
    public DateTimeOffset CreatedTime { get; internal set; }
    public DateTimeOffset ModifiedTime { get; internal set; }
    public MessagingSku MessagingSku { get; internal set; }
    public int MessagingUnits { get; internal set; }
    public string Alias { get; internal set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
internal void set_Name(string value);
    [CompilerGeneratedAttribute]
internal NamespaceType get_NamespaceType();
    [CompilerGeneratedAttribute]
internal void set_NamespaceType(NamespaceType value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_CreatedTime();
    [CompilerGeneratedAttribute]
internal void set_CreatedTime(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_ModifiedTime();
    [CompilerGeneratedAttribute]
internal void set_ModifiedTime(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public MessagingSku get_MessagingSku();
    [CompilerGeneratedAttribute]
internal void set_MessagingSku(MessagingSku value);
    [CompilerGeneratedAttribute]
public int get_MessagingUnits();
    [CompilerGeneratedAttribute]
internal void set_MessagingUnits(int value);
    [CompilerGeneratedAttribute]
public string get_Alias();
    [CompilerGeneratedAttribute]
internal void set_Alias(string value);
}
internal class Azure.Messaging.ServiceBus.Administration.NamespacePropertiesExtensions : object {
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.Administration.NamespacePropertiesExtensions/<ParseResponseAsync>d__0")]
public static Task`1<NamespaceProperties> ParseResponseAsync(Response response);
    private static NamespaceProperties ParseFromEntryElement(XElement xEntry, Response response);
}
[IsReadOnlyAttribute]
internal class Azure.Messaging.ServiceBus.Administration.NamespaceType : ValueType {
    internal static string MessagingValue;
    internal static string MixedValue;
    private string _value;
    [CompilerGeneratedAttribute]
private static NamespaceType <Messaging>k__BackingField;
    [CompilerGeneratedAttribute]
private static NamespaceType <Mixed>k__BackingField;
    public static NamespaceType Messaging { get; }
    public static NamespaceType Mixed { get; }
    public NamespaceType(string value);
    private static NamespaceType();
    [CompilerGeneratedAttribute]
public static NamespaceType get_Messaging();
    [CompilerGeneratedAttribute]
public static NamespaceType get_Mixed();
    public static bool op_Equality(NamespaceType left, NamespaceType right);
    public static bool op_Inequality(NamespaceType left, NamespaceType right);
    public static NamespaceType op_Implicit(string value);
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(NamespaceType other);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    public virtual string ToString();
}
public class Azure.Messaging.ServiceBus.Administration.QueueProperties : object {
    private TimeSpan _duplicateDetectionHistoryTimeWindow;
    private TimeSpan _lockDuration;
    private TimeSpan _defaultMessageTimeToLive;
    private TimeSpan _autoDeleteOnIdle;
    private int _maxDeliveryCount;
    private string _forwardTo;
    private string _forwardDeadLetteredMessagesTo;
    private string _userMetadata;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private long <MaxSizeInMegabytes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RequiresDuplicateDetection>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RequiresSession>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DeadLetteringOnMessageExpiration>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableBatchedOperations>k__BackingField;
    [CompilerGeneratedAttribute]
private AuthorizationRules <AuthorizationRules>k__BackingField;
    [CompilerGeneratedAttribute]
private EntityStatus <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnablePartitioning>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAnonymousAccessible>k__BackingField;
    internal Nullable`1<bool> _internalSupportOrdering;
    [CompilerGeneratedAttribute]
private bool <EnableExpress>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <MaxMessageSizeInKilobytes>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<XElement> <UnknownProperties>k__BackingField;
    public string Name { get; }
    public TimeSpan LockDuration { get; public set; }
    public long MaxSizeInMegabytes { get; public set; }
    public bool RequiresDuplicateDetection { get; internal set; }
    public bool RequiresSession { get; internal set; }
    public TimeSpan DefaultMessageTimeToLive { get; public set; }
    public TimeSpan AutoDeleteOnIdle { get; public set; }
    public bool DeadLetteringOnMessageExpiration { get; public set; }
    public TimeSpan DuplicateDetectionHistoryTimeWindow { get; public set; }
    public int MaxDeliveryCount { get; public set; }
    public bool EnableBatchedOperations { get; public set; }
    public AuthorizationRules AuthorizationRules { get; internal set; }
    public EntityStatus Status { get; public set; }
    public string ForwardTo { get; public set; }
    public string ForwardDeadLetteredMessagesTo { get; public set; }
    public bool EnablePartitioning { get; internal set; }
    public string UserMetadata { get; public set; }
    internal bool IsAnonymousAccessible { get; internal set; }
    internal bool SupportOrdering { get; internal set; }
    internal bool EnableExpress { get; internal set; }
    public Nullable`1<long> MaxMessageSizeInKilobytes { get; public set; }
    internal List`1<XElement> UnknownProperties { get; internal set; }
    internal QueueProperties(string name);
    internal QueueProperties(CreateQueueOptions options);
    [CompilerGeneratedAttribute]
public string get_Name();
    public TimeSpan get_LockDuration();
    public void set_LockDuration(TimeSpan value);
    [CompilerGeneratedAttribute]
public long get_MaxSizeInMegabytes();
    [CompilerGeneratedAttribute]
public void set_MaxSizeInMegabytes(long value);
    [CompilerGeneratedAttribute]
public bool get_RequiresDuplicateDetection();
    [CompilerGeneratedAttribute]
internal void set_RequiresDuplicateDetection(bool value);
    [CompilerGeneratedAttribute]
public bool get_RequiresSession();
    [CompilerGeneratedAttribute]
internal void set_RequiresSession(bool value);
    public TimeSpan get_DefaultMessageTimeToLive();
    public void set_DefaultMessageTimeToLive(TimeSpan value);
    public TimeSpan get_AutoDeleteOnIdle();
    public void set_AutoDeleteOnIdle(TimeSpan value);
    [CompilerGeneratedAttribute]
public bool get_DeadLetteringOnMessageExpiration();
    [CompilerGeneratedAttribute]
public void set_DeadLetteringOnMessageExpiration(bool value);
    public TimeSpan get_DuplicateDetectionHistoryTimeWindow();
    public void set_DuplicateDetectionHistoryTimeWindow(TimeSpan value);
    public int get_MaxDeliveryCount();
    public void set_MaxDeliveryCount(int value);
    [CompilerGeneratedAttribute]
public bool get_EnableBatchedOperations();
    [CompilerGeneratedAttribute]
public void set_EnableBatchedOperations(bool value);
    [CompilerGeneratedAttribute]
public AuthorizationRules get_AuthorizationRules();
    [CompilerGeneratedAttribute]
internal void set_AuthorizationRules(AuthorizationRules value);
    [CompilerGeneratedAttribute]
public EntityStatus get_Status();
    [CompilerGeneratedAttribute]
public void set_Status(EntityStatus value);
    public string get_ForwardTo();
    public void set_ForwardTo(string value);
    public string get_ForwardDeadLetteredMessagesTo();
    public void set_ForwardDeadLetteredMessagesTo(string value);
    [CompilerGeneratedAttribute]
public bool get_EnablePartitioning();
    [CompilerGeneratedAttribute]
internal void set_EnablePartitioning(bool value);
    public string get_UserMetadata();
    public void set_UserMetadata(string value);
    [CompilerGeneratedAttribute]
internal bool get_IsAnonymousAccessible();
    [CompilerGeneratedAttribute]
internal void set_IsAnonymousAccessible(bool value);
    internal bool get_SupportOrdering();
    internal void set_SupportOrdering(bool value);
    [CompilerGeneratedAttribute]
internal bool get_EnableExpress();
    [CompilerGeneratedAttribute]
internal void set_EnableExpress(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_MaxMessageSizeInKilobytes();
    [CompilerGeneratedAttribute]
public void set_MaxMessageSizeInKilobytes(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
internal List`1<XElement> get_UnknownProperties();
    [CompilerGeneratedAttribute]
internal void set_UnknownProperties(List`1<XElement> value);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(QueueProperties other);
    public static bool op_Equality(QueueProperties left, QueueProperties right);
    public static bool op_Inequality(QueueProperties left, QueueProperties right);
}
[ExtensionAttribute]
internal static class Azure.Messaging.ServiceBus.Administration.QueuePropertiesExtensions : object {
    [ExtensionAttribute]
public static XDocument Serialize(QueueProperties description);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.Administration.QueuePropertiesExtensions/<ParseResponseAsync>d__1")]
public static Task`1<QueueProperties> ParseResponseAsync(Response response, ClientDiagnostics diagnostics);
    private static QueueProperties ParseFromEntryElement(XElement xEntry, Response response);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.Administration.QueuePropertiesExtensions/<ParsePagedResponseAsync>d__3")]
public static Task`1<List`1<QueueProperties>> ParsePagedResponseAsync(Response response);
    [ExtensionAttribute]
public static void NormalizeDescription(QueueProperties description, string baseAddress);
    private static string NormalizeForwardToAddress(string forwardTo, string baseAddress);
}
public class Azure.Messaging.ServiceBus.Administration.QueueRuntimeProperties : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private long <TotalMessageCount>k__BackingField;
    [CompilerGeneratedAttribute]
private long <ActiveMessageCount>k__BackingField;
    [CompilerGeneratedAttribute]
private long <DeadLetterMessageCount>k__BackingField;
    [CompilerGeneratedAttribute]
private long <ScheduledMessageCount>k__BackingField;
    [CompilerGeneratedAttribute]
private long <TransferMessageCount>k__BackingField;
    [CompilerGeneratedAttribute]
private long <TransferDeadLetterMessageCount>k__BackingField;
    [CompilerGeneratedAttribute]
private long <SizeInBytes>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <CreatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <UpdatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <AccessedAt>k__BackingField;
    public string Name { get; internal set; }
    public long TotalMessageCount { get; internal set; }
    public long ActiveMessageCount { get; internal set; }
    public long DeadLetterMessageCount { get; internal set; }
    public long ScheduledMessageCount { get; internal set; }
    public long TransferMessageCount { get; internal set; }
    public long TransferDeadLetterMessageCount { get; internal set; }
    public long SizeInBytes { get; internal set; }
    public DateTimeOffset CreatedAt { get; internal set; }
    public DateTimeOffset UpdatedAt { get; internal set; }
    public DateTimeOffset AccessedAt { get; internal set; }
    internal QueueRuntimeProperties(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
internal void set_Name(string value);
    [CompilerGeneratedAttribute]
public long get_TotalMessageCount();
    [CompilerGeneratedAttribute]
internal void set_TotalMessageCount(long value);
    [CompilerGeneratedAttribute]
public long get_ActiveMessageCount();
    [CompilerGeneratedAttribute]
internal void set_ActiveMessageCount(long value);
    [CompilerGeneratedAttribute]
public long get_DeadLetterMessageCount();
    [CompilerGeneratedAttribute]
internal void set_DeadLetterMessageCount(long value);
    [CompilerGeneratedAttribute]
public long get_ScheduledMessageCount();
    [CompilerGeneratedAttribute]
internal void set_ScheduledMessageCount(long value);
    [CompilerGeneratedAttribute]
public long get_TransferMessageCount();
    [CompilerGeneratedAttribute]
internal void set_TransferMessageCount(long value);
    [CompilerGeneratedAttribute]
public long get_TransferDeadLetterMessageCount();
    [CompilerGeneratedAttribute]
internal void set_TransferDeadLetterMessageCount(long value);
    [CompilerGeneratedAttribute]
public long get_SizeInBytes();
    [CompilerGeneratedAttribute]
internal void set_SizeInBytes(long value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_CreatedAt();
    [CompilerGeneratedAttribute]
internal void set_CreatedAt(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_UpdatedAt();
    [CompilerGeneratedAttribute]
internal void set_UpdatedAt(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_AccessedAt();
    [CompilerGeneratedAttribute]
internal void set_AccessedAt(DateTimeOffset value);
}
internal static class Azure.Messaging.ServiceBus.Administration.QueueRuntimePropertiesExtensions : object {
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.Administration.QueueRuntimePropertiesExtensions/<ParseResponseAsync>d__0")]
public static Task`1<QueueRuntimeProperties> ParseResponseAsync(Response response);
    private static QueueRuntimeProperties ParseFromEntryElement(XElement xEntry, Response response);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.Administration.QueueRuntimePropertiesExtensions/<ParsePagedResponseAsync>d__2")]
public static Task`1<List`1<QueueRuntimeProperties>> ParsePagedResponseAsync(Response response);
}
[ExtensionAttribute]
internal static class Azure.Messaging.ServiceBus.Administration.ResponseExtensions : object {
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.Administration.ResponseExtensions/<ReadAsStringAsync>d__0")]
[ExtensionAttribute]
public static Task`1<string> ReadAsStringAsync(Response response);
}
public abstract class Azure.Messaging.ServiceBus.Administration.RuleAction : object {
    internal abstract virtual RuleAction Clone();
    public abstract virtual bool Equals(RuleAction other);
    public abstract virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[ExtensionAttribute]
internal static class Azure.Messaging.ServiceBus.Administration.RuleActionExtensions : object {
    internal static RuleAction ParseFromXElement(XElement xElement);
    private static RuleAction ParseFromXElementSqlRuleAction(XElement xElement);
    [ExtensionAttribute]
public static XElement Serialize(RuleAction action);
}
[ExtensionAttribute]
internal static class Azure.Messaging.ServiceBus.Administration.RuleDescriptionExtensions : object {
    [ExtensionAttribute]
public static void ValidateDescriptionName(RuleProperties description);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.Administration.RuleDescriptionExtensions/<ParseResponseAsync>d__1")]
public static Task`1<RuleProperties> ParseResponseAsync(Response response, ClientDiagnostics diagnostics);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.Administration.RuleDescriptionExtensions/<ParsePagedResponseAsync>d__2")]
public static Task`1<List`1<RuleProperties>> ParsePagedResponseAsync(Response response, ClientDiagnostics diagnostics);
    private static RuleProperties ParseFromEntryElement(XElement xEntry);
    [ExtensionAttribute]
public static XDocument Serialize(RuleProperties description);
    [ExtensionAttribute]
public static XElement SerializeRule(RuleProperties description, string elementName);
}
public abstract class Azure.Messaging.ServiceBus.Administration.RuleFilter : object {
    internal abstract virtual RuleFilter Clone();
    public abstract virtual bool Equals(RuleFilter other);
    public abstract virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[ExtensionAttribute]
internal static class Azure.Messaging.ServiceBus.Administration.RuleFilterExtensions : object {
    public static RuleFilter ParseFromXElement(XElement xElement);
    [ExtensionAttribute]
public static XElement Serialize(RuleFilter filter);
}
public class Azure.Messaging.ServiceBus.Administration.RuleProperties : object {
    public static string DefaultRuleName;
    private RuleFilter _filter;
    [CompilerGeneratedAttribute]
private RuleAction <Action>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <CreatedAt>k__BackingField;
    public RuleFilter Filter { get; public set; }
    public RuleAction Action { get; public set; }
    public string Name { get; internal set; }
    internal DateTime CreatedAt { get; internal set; }
    internal RuleProperties(string name);
    internal RuleProperties(string name, RuleFilter filter);
    internal RuleProperties(CreateRuleOptions options);
    public RuleFilter get_Filter();
    public void set_Filter(RuleFilter value);
    [CompilerGeneratedAttribute]
public RuleAction get_Action();
    [CompilerGeneratedAttribute]
public void set_Action(RuleAction value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
internal void set_Name(string value);
    [CompilerGeneratedAttribute]
internal DateTime get_CreatedAt();
    [CompilerGeneratedAttribute]
internal void set_CreatedAt(DateTime value);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(RuleProperties other);
    public static bool op_Equality(RuleProperties left, RuleProperties right);
    public static bool op_Inequality(RuleProperties left, RuleProperties right);
}
public class Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClient : object {
    private string _fullyQualifiedNamespace;
    private HttpRequestAndResponse _httpRequestAndResponse;
    private ClientDiagnostics _clientDiagnostics;
    private static string NamespacePath;
    private static string QueuesPath;
    private static string TopicsPath;
    private static string SubscriptionsPath;
    private static string RulesPath;
    public ServiceBusAdministrationClient(string connectionString);
    public ServiceBusAdministrationClient(string connectionString, ServiceBusAdministrationClientOptions options);
    public ServiceBusAdministrationClient(string fullyQualifiedNamespace, AzureNamedKeyCredential credential, ServiceBusAdministrationClientOptions options);
    public ServiceBusAdministrationClient(string fullyQualifiedNamespace, AzureSasCredential credential, ServiceBusAdministrationClientOptions options);
    public ServiceBusAdministrationClient(string fullyQualifiedNamespace, TokenCredential credential);
    public ServiceBusAdministrationClient(string fullyQualifiedNamespace, TokenCredential credential, ServiceBusAdministrationClientOptions options);
    private ServiceBusAdministrationClient(string fullyQualifiedNamespace, ServiceBusTokenCredential credential, ServiceBusAdministrationClientOptions options);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClient/<GetNamespacePropertiesAsync>d__16")]
public virtual Task`1<Response`1<NamespaceProperties>> GetNamespacePropertiesAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClient/<DeleteQueueAsync>d__17")]
public virtual Task`1<Response> DeleteQueueAsync(string name, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClient/<DeleteTopicAsync>d__18")]
public virtual Task`1<Response> DeleteTopicAsync(string name, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClient/<DeleteSubscriptionAsync>d__19")]
public virtual Task`1<Response> DeleteSubscriptionAsync(string topicName, string subscriptionName, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClient/<DeleteRuleAsync>d__20")]
public virtual Task`1<Response> DeleteRuleAsync(string topicName, string subscriptionName, string ruleName, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClient/<GetQueueAsync>d__21")]
public virtual Task`1<Response`1<QueueProperties>> GetQueueAsync(string name, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClient/<GetTopicAsync>d__22")]
public virtual Task`1<Response`1<TopicProperties>> GetTopicAsync(string name, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClient/<GetSubscriptionAsync>d__23")]
public virtual Task`1<Response`1<SubscriptionProperties>> GetSubscriptionAsync(string topicName, string subscriptionName, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClient/<GetRuleAsync>d__24")]
public virtual Task`1<Response`1<RuleProperties>> GetRuleAsync(string topicName, string subscriptionName, string ruleName, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClient/<GetQueueRuntimePropertiesAsync>d__25")]
public virtual Task`1<Response`1<QueueRuntimeProperties>> GetQueueRuntimePropertiesAsync(string name, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClient/<GetTopicRuntimePropertiesAsync>d__26")]
public virtual Task`1<Response`1<TopicRuntimeProperties>> GetTopicRuntimePropertiesAsync(string name, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClient/<GetSubscriptionRuntimePropertiesAsync>d__27")]
public virtual Task`1<Response`1<SubscriptionRuntimeProperties>> GetSubscriptionRuntimePropertiesAsync(string topicName, string subscriptionName, CancellationToken cancellationToken);
    public virtual AsyncPageable`1<QueueProperties> GetQueuesAsync(CancellationToken cancellationToken);
    public virtual AsyncPageable`1<TopicProperties> GetTopicsAsync(CancellationToken cancellationToken);
    public virtual AsyncPageable`1<SubscriptionProperties> GetSubscriptionsAsync(string topicName, CancellationToken cancellationToken);
    public virtual AsyncPageable`1<RuleProperties> GetRulesAsync(string topicName, string subscriptionName, CancellationToken cancellationToken);
    public virtual AsyncPageable`1<QueueRuntimeProperties> GetQueuesRuntimePropertiesAsync(CancellationToken cancellationToken);
    public virtual AsyncPageable`1<TopicRuntimeProperties> GetTopicsRuntimePropertiesAsync(CancellationToken cancellationToken);
    public virtual AsyncPageable`1<SubscriptionRuntimeProperties> GetSubscriptionsRuntimePropertiesAsync(string topicName, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClient/<CreateQueueAsync>d__35")]
public virtual Task`1<Response`1<QueueProperties>> CreateQueueAsync(string name, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClient/<CreateQueueAsync>d__36")]
public virtual Task`1<Response`1<QueueProperties>> CreateQueueAsync(CreateQueueOptions options, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClient/<CreateTopicAsync>d__37")]
public virtual Task`1<Response`1<TopicProperties>> CreateTopicAsync(string name, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClient/<CreateTopicAsync>d__38")]
public virtual Task`1<Response`1<TopicProperties>> CreateTopicAsync(CreateTopicOptions options, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClient/<CreateSubscriptionAsync>d__39")]
public virtual Task`1<Response`1<SubscriptionProperties>> CreateSubscriptionAsync(string topicName, string subscriptionName, CancellationToken cancellationToken);
    public virtual Task`1<Response`1<SubscriptionProperties>> CreateSubscriptionAsync(CreateSubscriptionOptions options, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClient/<CreateSubscriptionAsync>d__41")]
public virtual Task`1<Response`1<SubscriptionProperties>> CreateSubscriptionAsync(CreateSubscriptionOptions options, CreateRuleOptions rule, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClient/<CreateRuleAsync>d__42")]
public virtual Task`1<Response`1<RuleProperties>> CreateRuleAsync(string topicName, string subscriptionName, CreateRuleOptions options, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClient/<UpdateQueueAsync>d__43")]
public virtual Task`1<Response`1<QueueProperties>> UpdateQueueAsync(QueueProperties queue, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClient/<UpdateTopicAsync>d__44")]
public virtual Task`1<Response`1<TopicProperties>> UpdateTopicAsync(TopicProperties topic, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClient/<UpdateSubscriptionAsync>d__45")]
public virtual Task`1<Response`1<SubscriptionProperties>> UpdateSubscriptionAsync(SubscriptionProperties subscription, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClient/<UpdateRuleAsync>d__46")]
public virtual Task`1<Response`1<RuleProperties>> UpdateRuleAsync(string topicName, string subscriptionName, RuleProperties rule, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClient/<QueueExistsAsync>d__47")]
public virtual Task`1<Response`1<bool>> QueueExistsAsync(string name, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClient/<TopicExistsAsync>d__48")]
public virtual Task`1<Response`1<bool>> TopicExistsAsync(string name, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClient/<SubscriptionExistsAsync>d__49")]
public virtual Task`1<Response`1<bool>> SubscriptionExistsAsync(string topicName, string subscriptionName, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClient/<RuleExistsAsync>d__50")]
public virtual Task`1<Response`1<bool>> RuleExistsAsync(string topicName, string subscriptionName, string ruleName, CancellationToken cancellationToken);
    internal static string BuildAudienceResource(string fullyQualifiedNamespace);
    private static ServiceBusTokenCredential TranslateCredential(string fullyQualifiedNamespace, AzureNamedKeyCredential credential);
    private static ServiceBusTokenCredential TranslateCredential(AzureSasCredential credential);
    private static ServiceBusTokenCredential TranslateCredential(TokenCredential credential);
}
public class Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClientOptions : ClientOptions {
    [CompilerGeneratedAttribute]
private ServiceVersion <Version>k__BackingField;
    public ServiceVersion Version { get; }
    public ServiceBusAdministrationClientOptions(ServiceVersion version);
    [CompilerGeneratedAttribute]
public ServiceVersion get_Version();
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
}
[ExtensionAttribute]
internal static class Azure.Messaging.ServiceBus.Administration.ServiceVersionExtensions : object {
    [ExtensionAttribute]
internal static string ToVersionString(ServiceVersion version);
}
public class Azure.Messaging.ServiceBus.Administration.SharedAccessAuthorizationRule : AuthorizationRule {
    private static int SupportedSASKeyLength;
    private static string FixedClaimType;
    private string internalKeyName;
    private string internalPrimaryKey;
    private string internalSecondaryKey;
    private List`1<AccessRights> internalRights;
    public string ClaimType { get; }
    internal string ClaimValue { get; }
    public string KeyName { get; public set; }
    public string PrimaryKey { get; public set; }
    public string SecondaryKey { get; public set; }
    public List`1<AccessRights> Rights { get; public set; }
    public SharedAccessAuthorizationRule(string keyName, IEnumerable`1<AccessRights> rights);
    public SharedAccessAuthorizationRule(string keyName, string primaryKey, IEnumerable`1<AccessRights> rights);
    public SharedAccessAuthorizationRule(string keyName, string primaryKey, string secondaryKey, IEnumerable`1<AccessRights> rights);
    internal virtual AuthorizationRule Clone();
    public virtual string get_ClaimType();
    internal virtual string get_ClaimValue();
    public sealed virtual string get_KeyName();
    public sealed virtual void set_KeyName(string value);
    public string get_PrimaryKey();
    public void set_PrimaryKey(string value);
    public string get_SecondaryKey();
    public void set_SecondaryKey(string value);
    public virtual List`1<AccessRights> get_Rights();
    public virtual void set_Rights(List`1<AccessRights> value);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public virtual bool Equals(AuthorizationRule other);
    public static bool op_Equality(SharedAccessAuthorizationRule left, SharedAccessAuthorizationRule right);
    public static bool op_Inequality(SharedAccessAuthorizationRule left, SharedAccessAuthorizationRule right);
    private static string GenerateRandomKey();
    private static bool CheckBase64(string base64EncodedString);
    internal static SharedAccessAuthorizationRule ParseFromXElement(XElement xElement);
    internal virtual XElement Serialize();
}
public class Azure.Messaging.ServiceBus.Administration.SqlRuleAction : RuleAction {
    [CompilerGeneratedAttribute]
private string <SqlExpression>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <Parameters>k__BackingField;
    public string SqlExpression { get; }
    public IDictionary`2<string, object> Parameters { get; internal set; }
    public SqlRuleAction(string sqlExpression);
    internal virtual RuleAction Clone();
    [CompilerGeneratedAttribute]
public string get_SqlExpression();
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_Parameters();
    [CompilerGeneratedAttribute]
internal void set_Parameters(IDictionary`2<string, object> value);
    public virtual string ToString();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public virtual bool Equals(RuleAction other);
    public static bool op_Equality(SqlRuleAction left, SqlRuleAction right);
    public static bool op_Inequality(SqlRuleAction left, SqlRuleAction right);
}
public class Azure.Messaging.ServiceBus.Administration.SqlRuleFilter : RuleFilter {
    [CompilerGeneratedAttribute]
private string <SqlExpression>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <Parameters>k__BackingField;
    public string SqlExpression { get; }
    public IDictionary`2<string, object> Parameters { get; internal set; }
    public SqlRuleFilter(string sqlExpression);
    internal virtual RuleFilter Clone();
    [CompilerGeneratedAttribute]
public string get_SqlExpression();
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_Parameters();
    [CompilerGeneratedAttribute]
internal void set_Parameters(IDictionary`2<string, object> value);
    public virtual string ToString();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public virtual bool Equals(RuleFilter other);
    public static bool op_Equality(SqlRuleFilter left, SqlRuleFilter right);
    public static bool op_Inequality(SqlRuleFilter left, SqlRuleFilter right);
}
[ExtensionAttribute]
internal static class Azure.Messaging.ServiceBus.Administration.SqlRuleFilterExtensions : object {
    internal static RuleFilter ParseFromXElement(XElement xElement);
    [ExtensionAttribute]
public static XElement Serialize(SqlRuleFilter filter, string filterName);
}
public class Azure.Messaging.ServiceBus.Administration.SubscriptionProperties : object {
    private string _topicName;
    private string _subscriptionName;
    private TimeSpan _lockDuration;
    private TimeSpan _defaultMessageTimeToLive;
    private TimeSpan _autoDeleteOnIdle;
    private int _maxDeliveryCount;
    private string _forwardTo;
    private string _forwardDeadLetteredMessagesTo;
    private string _userMetadata;
    [CompilerGeneratedAttribute]
private bool <RequiresSession>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DeadLetteringOnMessageExpiration>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableDeadLetteringOnFilterEvaluationExceptions>k__BackingField;
    [CompilerGeneratedAttribute]
private EntityStatus <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableBatchedOperations>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<XElement> <UnknownProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private RuleProperties <Rule>k__BackingField;
    public TimeSpan LockDuration { get; public set; }
    public bool RequiresSession { get; public set; }
    public TimeSpan DefaultMessageTimeToLive { get; public set; }
    public TimeSpan AutoDeleteOnIdle { get; public set; }
    public bool DeadLetteringOnMessageExpiration { get; public set; }
    public bool EnableDeadLetteringOnFilterEvaluationExceptions { get; public set; }
    public string TopicName { get; public set; }
    public string SubscriptionName { get; public set; }
    public int MaxDeliveryCount { get; public set; }
    public EntityStatus Status { get; public set; }
    public string ForwardTo { get; public set; }
    public string ForwardDeadLetteredMessagesTo { get; public set; }
    public bool EnableBatchedOperations { get; public set; }
    public string UserMetadata { get; public set; }
    internal List`1<XElement> UnknownProperties { get; internal set; }
    internal RuleProperties Rule { get; internal set; }
    internal SubscriptionProperties(string topicName, string subscriptionName);
    internal SubscriptionProperties(CreateSubscriptionOptions options);
    public TimeSpan get_LockDuration();
    public void set_LockDuration(TimeSpan value);
    [CompilerGeneratedAttribute]
public bool get_RequiresSession();
    [CompilerGeneratedAttribute]
public void set_RequiresSession(bool value);
    public TimeSpan get_DefaultMessageTimeToLive();
    public void set_DefaultMessageTimeToLive(TimeSpan value);
    public TimeSpan get_AutoDeleteOnIdle();
    public void set_AutoDeleteOnIdle(TimeSpan value);
    [CompilerGeneratedAttribute]
public bool get_DeadLetteringOnMessageExpiration();
    [CompilerGeneratedAttribute]
public void set_DeadLetteringOnMessageExpiration(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableDeadLetteringOnFilterEvaluationExceptions();
    [CompilerGeneratedAttribute]
public void set_EnableDeadLetteringOnFilterEvaluationExceptions(bool value);
    public string get_TopicName();
    public void set_TopicName(string value);
    public string get_SubscriptionName();
    public void set_SubscriptionName(string value);
    public int get_MaxDeliveryCount();
    public void set_MaxDeliveryCount(int value);
    [CompilerGeneratedAttribute]
public EntityStatus get_Status();
    [CompilerGeneratedAttribute]
public void set_Status(EntityStatus value);
    public string get_ForwardTo();
    public void set_ForwardTo(string value);
    public string get_ForwardDeadLetteredMessagesTo();
    public void set_ForwardDeadLetteredMessagesTo(string value);
    [CompilerGeneratedAttribute]
public bool get_EnableBatchedOperations();
    [CompilerGeneratedAttribute]
public void set_EnableBatchedOperations(bool value);
    public string get_UserMetadata();
    public void set_UserMetadata(string value);
    [CompilerGeneratedAttribute]
internal List`1<XElement> get_UnknownProperties();
    [CompilerGeneratedAttribute]
internal void set_UnknownProperties(List`1<XElement> value);
    [CompilerGeneratedAttribute]
internal RuleProperties get_Rule();
    [CompilerGeneratedAttribute]
internal void set_Rule(RuleProperties value);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(SubscriptionProperties other);
    public static bool op_Equality(SubscriptionProperties left, SubscriptionProperties right);
    public static bool op_Inequality(SubscriptionProperties left, SubscriptionProperties right);
}
[ExtensionAttribute]
internal static class Azure.Messaging.ServiceBus.Administration.SubscriptionPropertiesExtensions : object {
    [ExtensionAttribute]
public static void NormalizeDescription(SubscriptionProperties description, string baseAddress);
    public static string NormalizeForwardToAddress(string forwardTo, string baseAddress);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.Administration.SubscriptionPropertiesExtensions/<ParseResponseAsync>d__2")]
public static Task`1<SubscriptionProperties> ParseResponseAsync(string topicName, Response response);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.Administration.SubscriptionPropertiesExtensions/<ParsePagedResponseAsync>d__3")]
public static Task`1<List`1<SubscriptionProperties>> ParsePagedResponseAsync(string topicName, Response response, ClientDiagnostics diagnostics);
    private static SubscriptionProperties ParseFromEntryElement(string topicName, XElement xEntry, Response response);
    [ExtensionAttribute]
public static XDocument Serialize(SubscriptionProperties description);
}
public class Azure.Messaging.ServiceBus.Administration.SubscriptionRuntimeProperties : object {
    [CompilerGeneratedAttribute]
private string <TopicName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SubscriptionName>k__BackingField;
    [CompilerGeneratedAttribute]
private long <TotalMessageCount>k__BackingField;
    [CompilerGeneratedAttribute]
private long <ActiveMessageCount>k__BackingField;
    [CompilerGeneratedAttribute]
private long <DeadLetterMessageCount>k__BackingField;
    [CompilerGeneratedAttribute]
private long <TransferMessageCount>k__BackingField;
    [CompilerGeneratedAttribute]
private long <TransferDeadLetterMessageCount>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <AccessedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <CreatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <UpdatedAt>k__BackingField;
    public string TopicName { get; internal set; }
    public string SubscriptionName { get; internal set; }
    public long TotalMessageCount { get; internal set; }
    public long ActiveMessageCount { get; internal set; }
    public long DeadLetterMessageCount { get; internal set; }
    public long TransferMessageCount { get; internal set; }
    public long TransferDeadLetterMessageCount { get; internal set; }
    public DateTimeOffset AccessedAt { get; internal set; }
    public DateTimeOffset CreatedAt { get; internal set; }
    public DateTimeOffset UpdatedAt { get; internal set; }
    internal SubscriptionRuntimeProperties(string topicName, string subscriptionName);
    [CompilerGeneratedAttribute]
public string get_TopicName();
    [CompilerGeneratedAttribute]
internal void set_TopicName(string value);
    [CompilerGeneratedAttribute]
public string get_SubscriptionName();
    [CompilerGeneratedAttribute]
internal void set_SubscriptionName(string value);
    [CompilerGeneratedAttribute]
public long get_TotalMessageCount();
    [CompilerGeneratedAttribute]
internal void set_TotalMessageCount(long value);
    [CompilerGeneratedAttribute]
public long get_ActiveMessageCount();
    [CompilerGeneratedAttribute]
internal void set_ActiveMessageCount(long value);
    [CompilerGeneratedAttribute]
public long get_DeadLetterMessageCount();
    [CompilerGeneratedAttribute]
internal void set_DeadLetterMessageCount(long value);
    [CompilerGeneratedAttribute]
public long get_TransferMessageCount();
    [CompilerGeneratedAttribute]
internal void set_TransferMessageCount(long value);
    [CompilerGeneratedAttribute]
public long get_TransferDeadLetterMessageCount();
    [CompilerGeneratedAttribute]
internal void set_TransferDeadLetterMessageCount(long value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_AccessedAt();
    [CompilerGeneratedAttribute]
internal void set_AccessedAt(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_CreatedAt();
    [CompilerGeneratedAttribute]
internal void set_CreatedAt(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_UpdatedAt();
    [CompilerGeneratedAttribute]
internal void set_UpdatedAt(DateTimeOffset value);
}
internal static class Azure.Messaging.ServiceBus.Administration.SubscriptionRuntimePropertiesExtensions : object {
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.Administration.SubscriptionRuntimePropertiesExtensions/<ParseResponseAsync>d__0")]
public static Task`1<SubscriptionRuntimeProperties> ParseResponseAsync(string topicName, Response response, ClientDiagnostics diagnostics);
    private static SubscriptionRuntimeProperties ParseFromEntryElement(string topicName, XElement xEntry, Response response, ClientDiagnostics diagnostics);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.Administration.SubscriptionRuntimePropertiesExtensions/<ParsePagedResponseAsync>d__2")]
public static Task`1<List`1<SubscriptionRuntimeProperties>> ParsePagedResponseAsync(string topicPath, Response response, ClientDiagnostics diagnostics);
}
public class Azure.Messaging.ServiceBus.Administration.TopicProperties : object {
    private TimeSpan _duplicateDetectionHistoryTimeWindow;
    private string _name;
    private TimeSpan _defaultMessageTimeToLive;
    private TimeSpan _autoDeleteOnIdle;
    private string _userMetadata;
    [CompilerGeneratedAttribute]
private long <MaxSizeInMegabytes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RequiresDuplicateDetection>k__BackingField;
    [CompilerGeneratedAttribute]
private AuthorizationRules <AuthorizationRules>k__BackingField;
    [CompilerGeneratedAttribute]
private EntityStatus <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnablePartitioning>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SupportOrdering>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableBatchedOperations>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <MaxMessageSizeInKilobytes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAnonymousAccessible>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FilteringMessagesBeforePublishing>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ForwardTo>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableExpress>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableSubscriptionPartitioning>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<XElement> <UnknownProperties>k__BackingField;
    public TimeSpan DefaultMessageTimeToLive { get; public set; }
    public TimeSpan AutoDeleteOnIdle { get; public set; }
    public long MaxSizeInMegabytes { get; public set; }
    public bool RequiresDuplicateDetection { get; public set; }
    public TimeSpan DuplicateDetectionHistoryTimeWindow { get; public set; }
    public string Name { get; public set; }
    public AuthorizationRules AuthorizationRules { get; internal set; }
    public EntityStatus Status { get; public set; }
    public bool EnablePartitioning { get; public set; }
    public bool SupportOrdering { get; public set; }
    public bool EnableBatchedOperations { get; public set; }
    public string UserMetadata { get; public set; }
    public Nullable`1<long> MaxMessageSizeInKilobytes { get; public set; }
    internal bool IsAnonymousAccessible { get; internal set; }
    internal bool FilteringMessagesBeforePublishing { get; internal set; }
    internal string ForwardTo { get; internal set; }
    internal bool EnableExpress { get; internal set; }
    internal bool EnableSubscriptionPartitioning { get; internal set; }
    internal List`1<XElement> UnknownProperties { get; internal set; }
    internal TopicProperties(string name);
    internal TopicProperties(CreateTopicOptions options);
    public TimeSpan get_DefaultMessageTimeToLive();
    public void set_DefaultMessageTimeToLive(TimeSpan value);
    public TimeSpan get_AutoDeleteOnIdle();
    public void set_AutoDeleteOnIdle(TimeSpan value);
    [CompilerGeneratedAttribute]
public long get_MaxSizeInMegabytes();
    [CompilerGeneratedAttribute]
public void set_MaxSizeInMegabytes(long value);
    [CompilerGeneratedAttribute]
public bool get_RequiresDuplicateDetection();
    [CompilerGeneratedAttribute]
public void set_RequiresDuplicateDetection(bool value);
    public TimeSpan get_DuplicateDetectionHistoryTimeWindow();
    public void set_DuplicateDetectionHistoryTimeWindow(TimeSpan value);
    public string get_Name();
    public void set_Name(string value);
    [CompilerGeneratedAttribute]
public AuthorizationRules get_AuthorizationRules();
    [CompilerGeneratedAttribute]
internal void set_AuthorizationRules(AuthorizationRules value);
    [CompilerGeneratedAttribute]
public EntityStatus get_Status();
    [CompilerGeneratedAttribute]
public void set_Status(EntityStatus value);
    [CompilerGeneratedAttribute]
public bool get_EnablePartitioning();
    [CompilerGeneratedAttribute]
public void set_EnablePartitioning(bool value);
    [CompilerGeneratedAttribute]
public bool get_SupportOrdering();
    [CompilerGeneratedAttribute]
public void set_SupportOrdering(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableBatchedOperations();
    [CompilerGeneratedAttribute]
public void set_EnableBatchedOperations(bool value);
    public string get_UserMetadata();
    public void set_UserMetadata(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_MaxMessageSizeInKilobytes();
    [CompilerGeneratedAttribute]
public void set_MaxMessageSizeInKilobytes(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
internal bool get_IsAnonymousAccessible();
    [CompilerGeneratedAttribute]
internal void set_IsAnonymousAccessible(bool value);
    [CompilerGeneratedAttribute]
internal bool get_FilteringMessagesBeforePublishing();
    [CompilerGeneratedAttribute]
internal void set_FilteringMessagesBeforePublishing(bool value);
    [CompilerGeneratedAttribute]
internal string get_ForwardTo();
    [CompilerGeneratedAttribute]
internal void set_ForwardTo(string value);
    [CompilerGeneratedAttribute]
internal bool get_EnableExpress();
    [CompilerGeneratedAttribute]
internal void set_EnableExpress(bool value);
    [CompilerGeneratedAttribute]
internal bool get_EnableSubscriptionPartitioning();
    [CompilerGeneratedAttribute]
internal void set_EnableSubscriptionPartitioning(bool value);
    [CompilerGeneratedAttribute]
internal List`1<XElement> get_UnknownProperties();
    [CompilerGeneratedAttribute]
internal void set_UnknownProperties(List`1<XElement> value);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(TopicProperties other);
    public static bool op_Equality(TopicProperties left, TopicProperties right);
    public static bool op_Inequality(TopicProperties left, TopicProperties right);
}
[ExtensionAttribute]
internal static class Azure.Messaging.ServiceBus.Administration.TopicPropertiesExtensions : object {
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.Administration.TopicPropertiesExtensions/<ParseResponseAsync>d__0")]
public static Task`1<TopicProperties> ParseResponseAsync(Response response);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.Administration.TopicPropertiesExtensions/<ParsePagedResponseAsync>d__1")]
public static Task`1<List`1<TopicProperties>> ParsePagedResponseAsync(Response response);
    private static TopicProperties ParseFromEntryElement(XElement xEntry, Response response);
    [ExtensionAttribute]
public static XDocument Serialize(TopicProperties description);
}
public class Azure.Messaging.ServiceBus.Administration.TopicRuntimeProperties : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <AccessedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <CreatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <UpdatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private long <SizeInBytes>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SubscriptionCount>k__BackingField;
    [CompilerGeneratedAttribute]
private long <ScheduledMessageCount>k__BackingField;
    public string Name { get; internal set; }
    public DateTimeOffset AccessedAt { get; internal set; }
    public DateTimeOffset CreatedAt { get; internal set; }
    public DateTimeOffset UpdatedAt { get; internal set; }
    public long SizeInBytes { get; internal set; }
    public int SubscriptionCount { get; internal set; }
    public long ScheduledMessageCount { get; internal set; }
    internal TopicRuntimeProperties(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
internal void set_Name(string value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_AccessedAt();
    [CompilerGeneratedAttribute]
internal void set_AccessedAt(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_CreatedAt();
    [CompilerGeneratedAttribute]
internal void set_CreatedAt(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_UpdatedAt();
    [CompilerGeneratedAttribute]
internal void set_UpdatedAt(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public long get_SizeInBytes();
    [CompilerGeneratedAttribute]
internal void set_SizeInBytes(long value);
    [CompilerGeneratedAttribute]
public int get_SubscriptionCount();
    [CompilerGeneratedAttribute]
internal void set_SubscriptionCount(int value);
    [CompilerGeneratedAttribute]
public long get_ScheduledMessageCount();
    [CompilerGeneratedAttribute]
internal void set_ScheduledMessageCount(long value);
}
internal static class Azure.Messaging.ServiceBus.Administration.TopicRuntimePropertiesExtensions : object {
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.Administration.TopicRuntimePropertiesExtensions/<ParseResponseAsync>d__0")]
public static Task`1<TopicRuntimeProperties> ParseResponseAsync(Response response);
    public static TopicRuntimeProperties ParseFromEntryElement(XElement xEntry, Response response);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.Administration.TopicRuntimePropertiesExtensions/<ParsePagedResponseAsync>d__2")]
public static Task`1<List`1<TopicRuntimeProperties>> ParsePagedResponseAsync(Response response, ClientDiagnostics diagnostics);
}
public class Azure.Messaging.ServiceBus.Administration.TrueRuleFilter : SqlRuleFilter {
    internal static TrueRuleFilter Default;
    private static TrueRuleFilter();
    internal virtual RuleFilter Clone();
    public virtual string ToString();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public virtual bool Equals(RuleFilter other);
    public static bool op_Equality(TrueRuleFilter left, TrueRuleFilter right);
    public static bool op_Inequality(TrueRuleFilter left, TrueRuleFilter right);
}
internal class Azure.Messaging.ServiceBus.Administration.XmlObjectConvertor : object {
    internal static object ParseValueObject(XElement element);
    internal static XElement SerializeObject(object value);
}
internal class Azure.Messaging.ServiceBus.Amqp.AmqpClient : TransportClient {
    [CompilerGeneratedAttribute]
private static TimeSpan <CredentialRefreshBuffer>k__BackingField;
    private bool _closed;
    private AccessToken _accessToken;
    [CompilerGeneratedAttribute]
private Uri <ServiceEndpoint>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <ConnectionEndpoint>k__BackingField;
    [CompilerGeneratedAttribute]
private ServiceBusTokenCredential <Credential>k__BackingField;
    [CompilerGeneratedAttribute]
private AmqpConnectionScope <ConnectionScope>k__BackingField;
    private AmqpMessageConverter _messageConverter;
    private static TimeSpan CredentialRefreshBuffer { get; }
    public bool IsClosed { get; }
    public Uri ServiceEndpoint { get; }
    public Uri ConnectionEndpoint { get; }
    private ServiceBusTokenCredential Credential { get; }
    private AmqpConnectionScope ConnectionScope { get; }
    internal AmqpClient(string host, ServiceBusTokenCredential credential, ServiceBusClientOptions options, bool useTls);
    private static AmqpClient();
    [CompilerGeneratedAttribute]
private static TimeSpan get_CredentialRefreshBuffer();
    public virtual bool get_IsClosed();
    [CompilerGeneratedAttribute]
public virtual Uri get_ServiceEndpoint();
    [CompilerGeneratedAttribute]
public Uri get_ConnectionEndpoint();
    [CompilerGeneratedAttribute]
private ServiceBusTokenCredential get_Credential();
    [CompilerGeneratedAttribute]
private AmqpConnectionScope get_ConnectionScope();
    public virtual TransportSender CreateSender(string entityPath, ServiceBusRetryPolicy retryPolicy, string identifier);
    public virtual TransportReceiver CreateReceiver(string entityPath, ServiceBusRetryPolicy retryPolicy, ServiceBusReceiveMode receiveMode, UInt32 prefetchCount, string identifier, string sessionId, bool isSessionReceiver, bool isProcessor, CancellationToken cancellationToken);
    public virtual TransportRuleManager CreateRuleManager(string subscriptionPath, ServiceBusRetryPolicy retryPolicy, string identifier);
    public virtual Task CloseAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.Amqp.AmqpClient/<AcquireAccessTokenAsync>d__25")]
private Task`1<string> AcquireAccessTokenAsync(CancellationToken cancellationToken);
    private static TimeSpan UseMinimum(TimeSpan firstOption, TimeSpan secondOption);
}
internal class Azure.Messaging.ServiceBus.Amqp.AmqpClientConstants : object {
    public static string ManagementAddress;
    public static string EntityTypeManagement;
    public static string EntityNameKey;
    public static string PartitionNameKey;
    public static string ManagementOperationKey;
    public static string ReadOperationValue;
    public static string ManagementEntityTypeKey;
    public static string ManagementSecurityTokenKey;
    public static string FilterOffsetPartName;
    public static string FilterOffset;
    public static string FilterInclusiveOffset;
    public static string FilterOffsetFormatString;
    public static string FilterInclusiveOffsetFormatString;
    public static string FilterReceivedAtPartNameV1;
    public static string FilterReceivedAtPartNameV2;
    public static string FilterReceivedAt;
    public static string FilterReceivedAtFormatString;
    public static AmqpSymbol SessionFilterName;
    public static AmqpSymbol MessageReceiptsFilterName;
    public static AmqpSymbol ClientSideCursorFilterName;
    public static TimeSpan ClientMinimumTokenRefreshInterval;
    public static AmqpSymbol AttachEpoch;
    public static AmqpSymbol BatchFlushIntervalName;
    public static AmqpSymbol EntityTypeName;
    public static AmqpSymbol TransferDestinationAddress;
    public static AmqpSymbol TimeoutName;
    public static AmqpSymbol TrackingIdName;
    public static AmqpSymbol DeadLetterName;
    public static AmqpSymbol TimeoutError;
    public static AmqpSymbol AddressAlreadyInUseError;
    public static AmqpSymbol AuthorizationFailedError;
    public static AmqpSymbol MessageLockLostError;
    public static AmqpSymbol SessionLockLostError;
    public static AmqpSymbol StoreLockLostError;
    public static AmqpSymbol SessionCannotBeLockedError;
    public static AmqpSymbol NoMatchingSubscriptionError;
    public static AmqpSymbol ServerBusyError;
    public static AmqpSymbol ArgumentError;
    public static AmqpSymbol ArgumentOutOfRangeError;
    public static AmqpSymbol PartitionNotOwnedError;
    public static AmqpSymbol EntityDisabledError;
    public static AmqpSymbol PublisherRevokedError;
    public static AmqpSymbol OperationCancelledError;
    public static AmqpSymbol EntityAlreadyExistsError;
    public static AmqpSymbol RelayNotFoundError;
    public static AmqpSymbol MessageNotFoundError;
    public static AmqpSymbol LockedUntilUtc;
    private static AmqpClientConstants();
}
internal class Azure.Messaging.ServiceBus.Amqp.AmqpConnectionScope : TransportConnectionScope {
    private static string CbsSaslHandlerName;
    private static string WebSocketsPathSuffix;
    private static string WebSocketsSecureUriScheme;
    private static string WebSocketsInsecureUriScheme;
    private static int s_randomSeed;
    private static ThreadLocal`1<Random> RandomNumberGenerator;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _disposed;
    [CompilerGeneratedAttribute]
private static Version <AmqpVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private static TimeSpan <AuthorizationRefreshBuffer>k__BackingField;
    [CompilerGeneratedAttribute]
private static int <AuthorizationBaseJitterSeconds>k__BackingField;
    [CompilerGeneratedAttribute]
private static int <OpenReceiveLinkBaseJitterMilliseconds>k__BackingField;
    [CompilerGeneratedAttribute]
private static TimeSpan <OpenReceiveLinkBuffer>k__BackingField;
    [CompilerGeneratedAttribute]
private static TimeSpan <OpenReceiveLinkBufferThreshold>k__BackingField;
    [CompilerGeneratedAttribute]
private static TimeSpan <MinimumAuthorizationRefresh>k__BackingField;
    [CompilerGeneratedAttribute]
private static TimeSpan <MaximumAuthorizationRefresh>k__BackingField;
    [CompilerGeneratedAttribute]
private static TimeSpan <AuthorizationRefreshTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private static TimeSpan <AuthorizationTokenExpirationBuffer>k__BackingField;
    [CompilerGeneratedAttribute]
private CancellationTokenSource <OperationCancellationSource>k__BackingField;
    [CompilerGeneratedAttribute]
private ConcurrentDictionary`2<AmqpObject, Timer> <ActiveLinks>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <ServiceEndpoint>k__BackingField;
    [CompilerGeneratedAttribute]
private CbsTokenProvider <TokenProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private ServiceBusTransportType <Transport>k__BackingField;
    [CompilerGeneratedAttribute]
private IWebProxy <Proxy>k__BackingField;
    [CompilerGeneratedAttribute]
private FaultTolerantAmqpObject`1<AmqpConnection> <ActiveConnection>k__BackingField;
    [CompilerGeneratedAttribute]
private FaultTolerantAmqpObject`1<Controller> <TransactionController>k__BackingField;
    private bool _useSingleSession;
    private FaultTolerantAmqpObject`1<AmqpSession> _singletonSession;
    private string _sendViaReceiverEntityPath;
    private object _syncLock;
    private TimeSpan _operationTimeout;
    private UInt32 _connectionIdleTimeoutMilliseconds;
    private static Version AmqpVersion { get; }
    private static TimeSpan AuthorizationRefreshBuffer { get; }
    private static int AuthorizationBaseJitterSeconds { get; }
    private static int OpenReceiveLinkBaseJitterMilliseconds { get; }
    private static TimeSpan OpenReceiveLinkBuffer { get; }
    private static TimeSpan OpenReceiveLinkBufferThreshold { get; }
    private static TimeSpan MinimumAuthorizationRefresh { get; }
    private static TimeSpan MaximumAuthorizationRefresh { get; }
    private static TimeSpan AuthorizationRefreshTimeout { get; }
    private static TimeSpan AuthorizationTokenExpirationBuffer { get; }
    public bool IsDisposed { get; protected set; }
    private CancellationTokenSource OperationCancellationSource { get; }
    private ConcurrentDictionary`2<AmqpObject, Timer> ActiveLinks { get; }
    private string Id { get; }
    private Uri ServiceEndpoint { get; }
    private CbsTokenProvider TokenProvider { get; }
    private ServiceBusTransportType Transport { get; }
    private IWebProxy Proxy { get; }
    private FaultTolerantAmqpObject`1<AmqpConnection> ActiveConnection { get; }
    internal FaultTolerantAmqpObject`1<Controller> TransactionController { get; }
    public AmqpConnectionScope(Uri serviceEndpoint, Uri connectionEndpoint, ServiceBusTokenCredential credential, ServiceBusTransportType transport, IWebProxy proxy, bool useSingleSession, TimeSpan operationTimeout, TimeSpan idleTimeout);
    private static AmqpConnectionScope();
    [CompilerGeneratedAttribute]
private static Version get_AmqpVersion();
    [CompilerGeneratedAttribute]
private static TimeSpan get_AuthorizationRefreshBuffer();
    [CompilerGeneratedAttribute]
private static int get_AuthorizationBaseJitterSeconds();
    [CompilerGeneratedAttribute]
private static int get_OpenReceiveLinkBaseJitterMilliseconds();
    [CompilerGeneratedAttribute]
private static TimeSpan get_OpenReceiveLinkBuffer();
    [CompilerGeneratedAttribute]
private static TimeSpan get_OpenReceiveLinkBufferThreshold();
    [CompilerGeneratedAttribute]
private static TimeSpan get_MinimumAuthorizationRefresh();
    [CompilerGeneratedAttribute]
private static TimeSpan get_MaximumAuthorizationRefresh();
    [CompilerGeneratedAttribute]
private static TimeSpan get_AuthorizationRefreshTimeout();
    [CompilerGeneratedAttribute]
private static TimeSpan get_AuthorizationTokenExpirationBuffer();
    public virtual bool get_IsDisposed();
    protected virtual void set_IsDisposed(bool value);
    [CompilerGeneratedAttribute]
private CancellationTokenSource get_OperationCancellationSource();
    [CompilerGeneratedAttribute]
private ConcurrentDictionary`2<AmqpObject, Timer> get_ActiveLinks();
    [CompilerGeneratedAttribute]
private string get_Id();
    [CompilerGeneratedAttribute]
private Uri get_ServiceEndpoint();
    [CompilerGeneratedAttribute]
private CbsTokenProvider get_TokenProvider();
    [CompilerGeneratedAttribute]
private ServiceBusTransportType get_Transport();
    [CompilerGeneratedAttribute]
private IWebProxy get_Proxy();
    [CompilerGeneratedAttribute]
private FaultTolerantAmqpObject`1<AmqpConnection> get_ActiveConnection();
    [CompilerGeneratedAttribute]
internal FaultTolerantAmqpObject`1<Controller> get_TransactionController();
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.Amqp.AmqpConnectionScope/<CreateControllerAsync>d__74")]
private Task`1<Controller> CreateControllerAsync(AmqpSession amqpSession, TimeSpan timeout);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.Amqp.AmqpConnectionScope/<OpenManagementLinkAsync>d__76")]
public virtual Task`1<RequestResponseAmqpLink> OpenManagementLinkAsync(string entityPath, string identifier, TimeSpan timeout, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.Amqp.AmqpConnectionScope/<OpenReceiverLinkAsync>d__77")]
public virtual Task`1<ReceivingAmqpLink> OpenReceiverLinkAsync(string identifier, string entityPath, TimeSpan timeout, UInt32 prefetchCount, ServiceBusReceiveMode receiveMode, string sessionId, bool isSessionReceiver, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.Amqp.AmqpConnectionScope/<OpenSenderLinkAsync>d__78")]
public virtual Task`1<SendingAmqpLink> OpenSenderLinkAsync(string entityPath, string identifier, TimeSpan timeout, CancellationToken cancellationToken);
    public virtual void Dispose();
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.Amqp.AmqpConnectionScope/<CreateAndOpenConnectionAsync>d__80")]
protected virtual Task`1<AmqpConnection> CreateAndOpenConnectionAsync(Version amqpVersion, Uri serviceEndpoint, Uri connectionEndpoint, ServiceBusTransportType transportType, IWebProxy proxy, string scopeIdentifier, TimeSpan timeout);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.Amqp.AmqpConnectionScope/<CreateManagementLinkAsync>d__81")]
protected virtual Task`1<RequestResponseAmqpLink> CreateManagementLinkAsync(string entityPath, string identifier, AmqpConnection connection, TimeSpan timeout, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.Amqp.AmqpConnectionScope/<CreateReceivingLinkAsync>d__82")]
protected virtual Task`1<ReceivingAmqpLink> CreateReceivingLinkAsync(string entityPath, string identifier, AmqpConnection connection, Uri endpoint, TimeSpan timeout, UInt32 prefetchCount, ServiceBusReceiveMode receiveMode, string sessionId, bool isSessionReceiver, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.Amqp.AmqpConnectionScope/<CreateSessionIfNeededAsync>d__83")]
private Task`1<AmqpSession> CreateSessionIfNeededAsync(AmqpConnection connection, TimeSpan timeout);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.Amqp.AmqpConnectionScope/<CreateAndOpenSessionAsync>d__84")]
private Task`1<AmqpSession> CreateAndOpenSessionAsync(AmqpConnection connection, TimeSpan timeout);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.Amqp.AmqpConnectionScope/<CreateSendingLinkAsync>d__85")]
protected virtual Task`1<SendingAmqpLink> CreateSendingLinkAsync(string entityPath, string identifier, AmqpConnection connection, TimeSpan timeout, CancellationToken cancellationToken);
    private void ValidateCanCreateSenderLink(string entityPath);
    protected virtual void StartTrackingLinkAsActive(string entityPath, AmqpObject link, Timer authorizationRefreshTimer);
    private void StopTrackingLinkAsActive(AmqpObject link, Timer authorizationRefreshTimer);
    protected virtual void CloseConnection(AmqpConnection connection);
    protected virtual TimeSpan CalculateLinkAuthorizationRefreshInterval(DateTime expirationTimeUtc, Nullable`1<DateTime> currentTimeUtc);
    protected virtual TimerCallback CreateAuthorizationRefreshHandler(string entityPath, AmqpConnection connection, AmqpObject amqpLink, CbsTokenProvider tokenProvider, Uri endpoint, String[] audience, String[] requiredClaims, TimeSpan refreshTimeout, Func`1<Timer> refreshTimerFactory, string identifier);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.Amqp.AmqpConnectionScope/<OpenAmqpLinkAsync>d__92")]
protected virtual Task OpenAmqpLinkAsync(AmqpLink link, string entityPath, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.Amqp.AmqpConnectionScope/<OpenAmqpLinkAsync>d__93")]
protected virtual Task OpenAmqpLinkAsync(RequestResponseAmqpLink link, string entityPath, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.Amqp.AmqpConnectionScope/<OpenAmqpObjectAsync>d__94")]
protected virtual Task OpenAmqpObjectAsync(AmqpObject targetObject, TimeSpan timeout);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.Amqp.AmqpConnectionScope/<OpenAmqpObjectCoreAsync>d__95")]
private Task OpenAmqpObjectCoreAsync(AmqpObject target, string entityPath, Nullable`1<TimeSpan> timeout, Nullable`1<CancellationToken> cancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.Amqp.AmqpConnectionScope/<RequestAuthorizationUsingCbsAsync>d__96")]
protected virtual Task`1<DateTime> RequestAuthorizationUsingCbsAsync(AmqpConnection connection, CbsTokenProvider tokenProvider, Uri endpoint, String[] audience, String[] requiredClaims, TimeSpan timeout, string identifier);
    private static AmqpSettings CreateAmpqSettings(Version amqpVersion);
    private static TransportSettings CreateTransportSettingsforTcp(Uri connectionEndpoint);
    private static TransportSettings CreateTransportSettingsForWebSockets(Uri connectionEndpoint, IWebProxy proxy);
    private static AmqpConnectionSettings CreateAmqpConnectionSettings(string hostName, string identifier, UInt32 idleTimeoutMilliseconds);
    private static bool ShouldUseTls(string urlScheme);
    private static void ValidateTransport(ServiceBusTransportType transport);
    internal void CloseLink(AmqpLink link);
    internal void CloseLink(RequestResponseAmqpLink link);
}
[ExtensionAttribute]
internal static class Azure.Messaging.ServiceBus.Amqp.AmqpExceptionHelper : object {
    private static Dictionary`2<string, AmqpResponseStatusCode> s_conditionToStatusMap;
    private static AmqpExceptionHelper();
    public static AmqpSymbol GetResponseErrorCondition(AmqpMessage response, AmqpResponseStatusCode statusCode);
    [ExtensionAttribute]
public static AmqpResponseStatusCode GetResponseStatusCode(AmqpMessage responseMessage);
    [ExtensionAttribute]
public static Exception ToMessagingContractException(AmqpMessage responseMessage, AmqpResponseStatusCode statusCode);
    [ExtensionAttribute]
public static Exception ToMessagingContractException(Error error, bool connectionError);
    public static Exception ToMessagingContractException(string condition, string message, bool connectionError);
    public static Exception TranslateException(Exception exception, string referenceId, Exception innerException, bool connectionError);
    [ExtensionAttribute]
public static string GetTrackingId(AmqpLink link);
    [ExtensionAttribute]
public static Exception GetInnerException(AmqpObject amqpObject);
    private static string EnrichMessage(string message);
}
internal class Azure.Messaging.ServiceBus.Amqp.AmqpMessageBatch : TransportMessageBatch {
    private static byte OverheadBytesSmallMessage;
    private static byte OverheadBytesLargeMessage;
    private static byte MaximumBytesSmallMessage;
    private bool _disposed;
    private long _sizeBytes;
    [CompilerGeneratedAttribute]
private CreateMessageBatchOptions <Options>k__BackingField;
    private AmqpMessageConverter _messageConverter;
    [CompilerGeneratedAttribute]
private List`1<AmqpMessage> <_batchMessages>k__BackingField;
    public long MaxSizeInBytes { get; }
    public long SizeInBytes { get; }
    public int Count { get; }
    private CreateMessageBatchOptions Options { get; }
    private List`1<AmqpMessage> _batchMessages { get; }
    public AmqpMessageBatch(AmqpMessageConverter messageConverter, CreateMessageBatchOptions options);
    public virtual long get_MaxSizeInBytes();
    public virtual long get_SizeInBytes();
    public virtual int get_Count();
    [CompilerGeneratedAttribute]
private CreateMessageBatchOptions get_Options();
    [CompilerGeneratedAttribute]
private List`1<AmqpMessage> get__batchMessages();
    public virtual bool TryAddMessage(ServiceBusMessage message);
    public virtual void Clear();
    public virtual IReadOnlyCollection`1<T> AsReadOnly();
    public virtual void Dispose();
}
internal class Azure.Messaging.ServiceBus.Amqp.AmqpMessageConstants : object {
    internal static string EnqueuedTimeUtcName;
    internal static string ScheduledEnqueueTimeUtcName;
    internal static string SequenceNumberName;
    internal static string EnqueueSequenceNumberName;
    internal static string LockedUntilName;
    internal static string PartitionKeyName;
    internal static string PartitionIdName;
    internal static string ViaPartitionKeyName;
    internal static string DeadLetterSourceName;
    internal static string MessageStateName;
    internal static string TimeSpanName;
    internal static string UriName;
    internal static string DateTimeOffsetName;
    internal static string DeadLetterReasonHeader;
    internal static string DeadLetterErrorDescriptionHeader;
}
internal class Azure.Messaging.ServiceBus.Amqp.AmqpMessageConverter : object {
    private static int StreamBufferSizeInBytes;
    public static AmqpMessageConverter Default;
    private static AmqpMessageConverter();
    public virtual AmqpMessage BatchSBMessagesAsAmqpMessage(ServiceBusMessage source, bool forceBatch);
    public virtual AmqpMessage BatchSBMessagesAsAmqpMessage(IReadOnlyCollection`1<ServiceBusMessage> source, bool forceBatch);
    private AmqpMessage BuildAmqpBatchFromMessage(IReadOnlyCollection`1<ServiceBusMessage> source, bool forceBatch);
    public virtual AmqpMessage BuildAmqpBatchFromMessages(IReadOnlyCollection`1<AmqpMessage> source, bool forceBatch);
    private static ArraySegment`1<byte> ReadStreamToArraySegment(Stream stream);
    public virtual AmqpMessage SBMessageToAmqpMessage(ServiceBusMessage sbMessage);
    public virtual ServiceBusReceivedMessage AmqpMessageToSBReceivedMessage(AmqpMessage amqpMessage, bool isPeeked);
    internal static bool TryGetAmqpObjectFromNetObject(object netObject, MappingType mappingType, Object& amqpObject);
}
[ExtensionAttribute]
internal static class Azure.Messaging.ServiceBus.Amqp.AmqpMessageExtensions : object {
    [ExtensionAttribute]
public static AmqpMessage ToAmqpMessage(ServiceBusMessage message);
    [ExtensionAttribute]
public static AmqpMessage ToAmqpMessage(AmqpAnnotatedMessage message);
    [IteratorStateMachineAttribute("Azure.Messaging.ServiceBus.Amqp.AmqpMessageExtensions/<AsAmqpData>d__2")]
[ExtensionAttribute]
private static IEnumerable`1<Data> AsAmqpData(IEnumerable`1<ReadOnlyMemory`1<byte>> binaryData);
    [ExtensionAttribute]
public static string GetPartitionKey(AmqpAnnotatedMessage message);
    [ExtensionAttribute]
public static string GetViaPartitionKey(AmqpAnnotatedMessage message);
    [ExtensionAttribute]
public static TimeSpan GetTimeToLive(AmqpAnnotatedMessage message);
    [ExtensionAttribute]
public static DateTimeOffset GetScheduledEnqueueTime(AmqpAnnotatedMessage message);
    [ExtensionAttribute]
public static BinaryData GetBody(AmqpAnnotatedMessage message);
}
internal class Azure.Messaging.ServiceBus.Amqp.AmqpReceiver : TransportReceiver {
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _closed;
    [CompilerGeneratedAttribute]
private string <Identifier>k__BackingField;
    private string _entityPath;
    private ServiceBusRetryPolicy _retryPolicy;
    private bool _isSessionReceiver;
    private AmqpConnectionScope _connectionScope;
    private ServiceBusReceiveMode _receiveMode;
    private FaultTolerantAmqpObject`1<ReceivingAmqpLink> _receiveLink;
    private FaultTolerantAmqpObject`1<RequestResponseAmqpLink> _managementLink;
    private static int SizeOfGuidInBytes;
    [CompilerGeneratedAttribute]
private long <LastPeekedSequenceNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SessionId>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <SessionLockedUntil>k__BackingField;
    private Int32 modreq(System.Runtime.CompilerServices.IsVolatile) _prefetchCount;
    [CompilerGeneratedAttribute]
private Exception <LinkException>k__BackingField;
    private AmqpMessageConverter _messageConverter;
    internal ConcurrentExpiringSet`1<Guid> RequestResponseLockedMessages;
    private bool _isProcessor;
    private static IReadOnlyList`1<ServiceBusReceivedMessage> s_emptyReceivedMessageList;
    private static IReadOnlyList`1<AmqpMessage> s_emptyAmqpMessageList;
    public bool IsClosed { get; }
    public bool IsSessionLinkClosed { get; }
    public string Identifier { get; }
    public long LastPeekedSequenceNumber { get; private set; }
    public string SessionId { get; protected set; }
    public DateTimeOffset SessionLockedUntil { get; protected set; }
    public int PrefetchCount { get; public set; }
    private Exception LinkException { get; private set; }
    public AmqpReceiver(string entityPath, ServiceBusReceiveMode receiveMode, UInt32 prefetchCount, AmqpConnectionScope connectionScope, ServiceBusRetryPolicy retryPolicy, string identifier, string sessionId, bool isSessionReceiver, bool isProcessor, AmqpMessageConverter messageConverter, CancellationToken cancellationToken);
    private static AmqpReceiver();
    public bool get_IsClosed();
    public virtual bool get_IsSessionLinkClosed();
    [CompilerGeneratedAttribute]
public string get_Identifier();
    [CompilerGeneratedAttribute]
public long get_LastPeekedSequenceNumber();
    [CompilerGeneratedAttribute]
private void set_LastPeekedSequenceNumber(long value);
    [CompilerGeneratedAttribute]
public virtual string get_SessionId();
    [CompilerGeneratedAttribute]
protected virtual void set_SessionId(string value);
    [CompilerGeneratedAttribute]
public virtual DateTimeOffset get_SessionLockedUntil();
    [CompilerGeneratedAttribute]
protected virtual void set_SessionLockedUntil(DateTimeOffset value);
    public virtual int get_PrefetchCount();
    public virtual void set_PrefetchCount(int value);
    [CompilerGeneratedAttribute]
private Exception get_LinkException();
    [CompilerGeneratedAttribute]
private void set_LinkException(Exception value);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.Amqp.AmqpReceiver/<OpenManagementLinkAsync>d__42")]
private Task`1<RequestResponseAmqpLink> OpenManagementLinkAsync(TimeSpan timeout);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.Amqp.AmqpReceiver/<OpenReceiverLinkAsync>d__43")]
private Task`1<ReceivingAmqpLink> OpenReceiverLinkAsync(TimeSpan timeout, UInt32 prefetchCount, ServiceBusReceiveMode receiveMode, string identifier, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.Amqp.AmqpReceiver/<ReceiveMessagesAsync>d__44")]
public virtual Task`1<IReadOnlyList`1<ServiceBusReceivedMessage>> ReceiveMessagesAsync(int maxMessages, Nullable`1<TimeSpan> maxWaitTime, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.Amqp.AmqpReceiver/<ReceiveMessagesAsyncInternal>d__45")]
private Task`1<IReadOnlyList`1<ServiceBusReceivedMessage>> ReceiveMessagesAsyncInternal(int maxMessages, Nullable`1<TimeSpan> maxWaitTime, TimeSpan timeout, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.Amqp.AmqpReceiver/<CompleteAsync>d__46")]
public virtual Task CompleteAsync(Guid lockToken, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.Amqp.AmqpReceiver/<CompleteInternalAsync>d__47")]
private Task CompleteInternalAsync(Guid lockToken, TimeSpan timeout);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.Amqp.AmqpReceiver/<DisposeMessageAsync>d__48")]
private Task DisposeMessageAsync(Guid lockToken, Outcome outcome, DispositionStatus disposition, TimeSpan timeout, IDictionary`2<string, object> propertiesToModify, string deadLetterReason, string deadLetterDescription);
    private void ThrowLockLostException();
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.Amqp.AmqpReceiver/<DeferAsync>d__50")]
public virtual Task DeferAsync(Guid lockToken, IDictionary`2<string, object> propertiesToModify, CancellationToken cancellationToken);
    private Task DeferInternalAsync(Guid lockToken, TimeSpan timeout, IDictionary`2<string, object> propertiesToModify);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.Amqp.AmqpReceiver/<AbandonAsync>d__52")]
public virtual Task AbandonAsync(Guid lockToken, IDictionary`2<string, object> propertiesToModify, CancellationToken cancellationToken);
    private Task AbandonInternalAsync(Guid lockToken, TimeSpan timeout, IDictionary`2<string, object> propertiesToModify);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.Amqp.AmqpReceiver/<DeadLetterAsync>d__54")]
public virtual Task DeadLetterAsync(Guid lockToken, string deadLetterReason, string deadLetterErrorDescription, IDictionary`2<string, object> propertiesToModify, CancellationToken cancellationToken);
    internal virtual Task DeadLetterInternalAsync(Guid lockToken, TimeSpan timeout, IDictionary`2<string, object> propertiesToModify, string deadLetterReason, string deadLetterErrorDescription);
    private static Rejected GetRejectedOutcome(IDictionary`2<string, object> propertiesToModify, string deadLetterReason, string deadLetterErrorDescription);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.Amqp.AmqpReceiver/<DisposeMessageRequestResponseAsync>d__57")]
private Task DisposeMessageRequestResponseAsync(Guid lockToken, TimeSpan timeout, DispositionStatus dispositionStatus, string sessionId, IDictionary`2<string, object> propertiesToModify, string deadLetterReason, string deadLetterDescription);
    private static Outcome GetAbandonOutcome(IDictionary`2<string, object> propertiesToModify);
    private static Outcome GetDeferOutcome(IDictionary`2<string, object> propertiesToModify);
    private static Outcome GetModifiedOutcome(IDictionary`2<string, object> propertiesToModify, bool undeliverableHere);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.Amqp.AmqpReceiver/<PeekMessagesAsync>d__61")]
public virtual Task`1<IReadOnlyList`1<ServiceBusReceivedMessage>> PeekMessagesAsync(Nullable`1<long> sequenceNumber, int messageCount, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.Amqp.AmqpReceiver/<PeekMessagesInternalAsync>d__62")]
private Task`1<IReadOnlyList`1<ServiceBusReceivedMessage>> PeekMessagesInternalAsync(long sequenceNumber, int messageCount, TimeSpan timeout, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.Amqp.AmqpReceiver/<RenewMessageLockAsync>d__63")]
public virtual Task`1<DateTimeOffset> RenewMessageLockAsync(Guid lockToken, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.Amqp.AmqpReceiver/<RenewMessageLockInternalAsync>d__64")]
private Task`1<DateTimeOffset> RenewMessageLockInternalAsync(Guid lockToken, TimeSpan timeout);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.Amqp.AmqpReceiver/<ExecuteRequest>d__65")]
private Task`1<AmqpResponseMessage> ExecuteRequest(TimeSpan timeout, AmqpRequestMessage amqpRequestMessage);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.Amqp.AmqpReceiver/<RenewSessionLockAsync>d__66")]
public virtual Task RenewSessionLockAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.Amqp.AmqpReceiver/<RenewSessionLockInternal>d__67")]
internal Task`1<DateTimeOffset> RenewSessionLockInternal(TimeSpan timeout);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.Amqp.AmqpReceiver/<GetStateAsync>d__68")]
public virtual Task`1<BinaryData> GetStateAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.Amqp.AmqpReceiver/<GetStateInternal>d__69")]
internal Task`1<BinaryData> GetStateInternal(TimeSpan timeout);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.Amqp.AmqpReceiver/<SetStateAsync>d__70")]
public virtual Task SetStateAsync(BinaryData sessionState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.Amqp.AmqpReceiver/<SetStateInternal>d__71")]
internal Task SetStateInternal(BinaryData sessionState, TimeSpan timeout);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.Amqp.AmqpReceiver/<ReceiveDeferredMessagesAsync>d__72")]
public virtual Task`1<IReadOnlyList`1<ServiceBusReceivedMessage>> ReceiveDeferredMessagesAsync(Int64[] sequenceNumbers, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.Amqp.AmqpReceiver/<ReceiveDeferredMessagesAsyncInternal>d__73")]
internal virtual Task`1<IReadOnlyList`1<ServiceBusReceivedMessage>> ReceiveDeferredMessagesAsyncInternal(Int64[] sequenceNumbers, TimeSpan timeout);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.Amqp.AmqpReceiver/<DeleteMessagesAsync>d__74")]
public virtual Task`1<int> DeleteMessagesAsync(int messageCount, DateTimeOffset beforeEnqueueTimeUtc, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.Amqp.AmqpReceiver/<DeleteMessagesInternalAsync>d__75")]
private Task`1<int> DeleteMessagesInternalAsync(int messageCount, DateTimeOffset beforeEnqueueTimeUtc, TimeSpan timeout, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.Amqp.AmqpReceiver/<CloseAsync>d__76")]
public virtual Task CloseAsync(CancellationToken cancellationToken);
    private void OnReceiverLinkClosed(object receiver, EventArgs e);
    private void OnManagementLinkClosed(object managementLink, EventArgs e);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.Amqp.AmqpReceiver/<OpenLinkAsync>d__79")]
public virtual Task OpenLinkAsync(CancellationToken cancellationToken);
    private bool HasLinkCommunicationError(ReceivingAmqpLink link);
    private void ThrowIfSessionLockLost();
}
internal class Azure.Messaging.ServiceBus.Amqp.AmqpRequestMessage : object {
    [CompilerGeneratedAttribute]
private AmqpMessage <AmqpMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private AmqpMap <Map>k__BackingField;
    public AmqpMessage AmqpMessage { get; }
    public AmqpMap Map { get; }
    public AmqpRequestMessage(string operation, TimeSpan timeout, string trackingId);
    [CompilerGeneratedAttribute]
public AmqpMessage get_AmqpMessage();
    [CompilerGeneratedAttribute]
public AmqpMap get_Map();
    public static AmqpRequestMessage CreateRequest(string operation, TimeSpan timeout, string trackingId);
}
internal class Azure.Messaging.ServiceBus.Amqp.AmqpResponseMessage : object {
    [CompilerGeneratedAttribute]
private AmqpMessage <AmqpMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private AmqpResponseStatusCode <StatusCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TrackingId>k__BackingField;
    [CompilerGeneratedAttribute]
private AmqpMap <Map>k__BackingField;
    public AmqpMessage AmqpMessage { get; }
    public AmqpResponseStatusCode StatusCode { get; }
    public string TrackingId { get; }
    public AmqpMap Map { get; }
    private AmqpResponseMessage(AmqpMessage responseMessage);
    [CompilerGeneratedAttribute]
public AmqpMessage get_AmqpMessage();
    [CompilerGeneratedAttribute]
public AmqpResponseStatusCode get_StatusCode();
    [CompilerGeneratedAttribute]
public string get_TrackingId();
    [CompilerGeneratedAttribute]
public AmqpMap get_Map();
    public static AmqpResponseMessage CreateResponse(AmqpMessage response);
    public TValue GetValue(MapKey key);
    public List`1<TValue> GetListValue(MapKey key);
    public AmqpSymbol GetResponseErrorCondition();
    public Exception ToMessagingContractException();
}
internal class Azure.Messaging.ServiceBus.Amqp.AmqpRuleManager : TransportRuleManager {
    private ServiceBusRetryPolicy _retryPolicy;
    private AmqpConnectionScope _connectionScope;
    private bool _closed;
    private FaultTolerantAmqpObject`1<RequestResponseAmqpLink> _managementLink;
    public bool IsClosed { get; }
    private static AmqpRuleManager();
    public AmqpRuleManager(string subscriptionPath, AmqpConnectionScope connectionScope, ServiceBusRetryPolicy retryPolicy, string identifier);
    public virtual bool get_IsClosed();
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.Amqp.AmqpRuleManager/<CreateRuleAsync>d__8")]
public virtual Task CreateRuleAsync(RuleProperties properties, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.Amqp.AmqpRuleManager/<AddRuleInternalAsync>d__9")]
private Task AddRuleInternalAsync(RuleProperties description, TimeSpan timeout);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.Amqp.AmqpRuleManager/<DeleteRuleAsync>d__10")]
public virtual Task DeleteRuleAsync(string ruleName, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.Amqp.AmqpRuleManager/<DeleteRuleInternalAsync>d__11")]
private Task DeleteRuleInternalAsync(string ruleName, TimeSpan timeout);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.Amqp.AmqpRuleManager/<GetRulesAsync>d__12")]
public virtual Task`1<List`1<RuleProperties>> GetRulesAsync(int skip, int top, CancellationToken cancellationToken);
    public static AmqpMap GetRuleDescriptionMap(RuleProperties description);
    public virtual RuleProperties GetRuleDescription(AmqpRuleDescriptionCodec amqpDescription);
    internal static AmqpMap GetSqlRuleFilterMap(SqlRuleFilter sqlRuleFilter);
    internal static AmqpMap GetCorrelationRuleFilterMap(CorrelationRuleFilter correlationRuleFilter);
    internal static AmqpMap GetRuleActionMap(SqlRuleAction sqlRuleAction);
    private static RuleAction GetRuleAction(AmqpRuleActionCodec amqpAction);
    public virtual RuleFilter GetFilter(AmqpRuleFilterCodec amqpFilter);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.Amqp.AmqpRuleManager/<GetRulesInternalAsync>d__20")]
private Task`1<List`1<RuleProperties>> GetRulesInternalAsync(TimeSpan timeout, int skip, int top);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.Amqp.AmqpRuleManager/<CloseAsync>d__21")]
public virtual Task CloseAsync(CancellationToken cancellationToken);
}
internal class Azure.Messaging.ServiceBus.Amqp.AmqpSender : TransportSender {
    private bool _closed;
    private int _deliveryCount;
    [CompilerGeneratedAttribute]
private string <Identifier>k__BackingField;
    private string _entityPath;
    private ServiceBusRetryPolicy _retryPolicy;
    private AmqpMessageConverter _messageConverter;
    private AmqpConnectionScope _connectionScope;
    private FaultTolerantAmqpObject`1<SendingAmqpLink> _sendLink;
    private FaultTolerantAmqpObject`1<RequestResponseAmqpLink> _managementLink;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <MaxMessageSize>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <MaxBatchSize>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxMessageCount>k__BackingField;
    public bool IsClosed { get; }
    public string Identifier { get; }
    private Nullable`1<long> MaxMessageSize { get; private set; }
    private Nullable`1<long> MaxBatchSize { get; private set; }
    private int MaxMessageCount { get; private set; }
    public AmqpSender(string entityPath, AmqpConnectionScope connectionScope, ServiceBusRetryPolicy retryPolicy, string identifier, AmqpMessageConverter messageConverter);
    public bool get_IsClosed();
    [CompilerGeneratedAttribute]
public string get_Identifier();
    [CompilerGeneratedAttribute]
private Nullable`1<long> get_MaxMessageSize();
    [CompilerGeneratedAttribute]
private void set_MaxMessageSize(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
private Nullable`1<long> get_MaxBatchSize();
    [CompilerGeneratedAttribute]
private void set_MaxBatchSize(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
private int get_MaxMessageCount();
    [CompilerGeneratedAttribute]
private void set_MaxMessageCount(int value);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.Amqp.AmqpSender/<OpenManagementLinkAsync>d__26")]
private Task`1<RequestResponseAmqpLink> OpenManagementLinkAsync(TimeSpan timeout);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.Amqp.AmqpSender/<CreateMessageBatchAsync>d__27")]
public virtual ValueTask`1<TransportMessageBatch> CreateMessageBatchAsync(CreateMessageBatchOptions options, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.Amqp.AmqpSender/<CreateMessageBatchInternalAsync>d__28")]
internal ValueTask`1<TransportMessageBatch> CreateMessageBatchInternalAsync(CreateMessageBatchOptions options, TimeSpan timeout);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.Amqp.AmqpSender/<SendBatchAsync>d__29")]
public virtual Task SendBatchAsync(ServiceBusMessageBatch messageBatch, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.Amqp.AmqpSender/<SendBatchInternalAsync>d__30")]
internal virtual Task SendBatchInternalAsync(IReadOnlyCollection`1<AmqpMessage> messages, TimeSpan timeout, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.Amqp.AmqpSender/<SendBatchInternalAsync>d__31")]
internal virtual Task SendBatchInternalAsync(AmqpMessage batchMessage, TimeSpan timeout, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.Amqp.AmqpSender/<SendAsync>d__32")]
public virtual Task SendAsync(IReadOnlyCollection`1<ServiceBusMessage> messages, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.Amqp.AmqpSender/<CloseAsync>d__33")]
public virtual Task CloseAsync(CancellationToken cancellationToken);
    private void OnSenderLinkClosed(object sender, EventArgs e);
    private void OnManagementLinkClosed(object managementLink, EventArgs e);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.Amqp.AmqpSender/<ScheduleMessagesAsync>d__36")]
public virtual Task`1<IReadOnlyList`1<long>> ScheduleMessagesAsync(IReadOnlyCollection`1<ServiceBusMessage> messages, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.Amqp.AmqpSender/<ScheduleMessageInternalAsync>d__37")]
internal Task`1<IReadOnlyList`1<long>> ScheduleMessageInternalAsync(IReadOnlyCollection`1<ServiceBusMessage> messages, TimeSpan timeout, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.Amqp.AmqpSender/<CancelScheduledMessagesAsync>d__38")]
public virtual Task CancelScheduledMessagesAsync(Int64[] sequenceNumbers, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.Amqp.AmqpSender/<CancelScheduledMessageInternalAsync>d__39")]
internal Task CancelScheduledMessageInternalAsync(Int64[] sequenceNumbers, TimeSpan timeout, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.Amqp.AmqpSender/<CreateLinkAndEnsureSenderStateAsync>d__40")]
protected virtual Task`1<SendingAmqpLink> CreateLinkAndEnsureSenderStateAsync(TimeSpan timeout, CancellationToken cancellationToken);
    private bool HasLinkCommunicationError(SendingAmqpLink link);
    [CompilerGeneratedAttribute]
private Task`1<SendingAmqpLink> <.ctor>b__25_0(TimeSpan timeout);
    [CompilerGeneratedAttribute]
private void <.ctor>b__25_1(SendingAmqpLink link);
    [CompilerGeneratedAttribute]
private Task`1<RequestResponseAmqpLink> <.ctor>b__25_2(TimeSpan timeout);
    [CompilerGeneratedAttribute]
private void <.ctor>b__25_3(RequestResponseAmqpLink link);
}
internal class Azure.Messaging.ServiceBus.Amqp.AmqpTransactionEnlistment : Singleton`1<AmqpTransactionEnlistment> {
    private string _transactionId;
    private AmqpTransactionManager _transactionManager;
    private AmqpConnectionScope _connectionScope;
    private TimeSpan _timeout;
    [CompilerGeneratedAttribute]
private ArraySegment`1<byte> <AmqpTransactionId>k__BackingField;
    public ArraySegment`1<byte> AmqpTransactionId { get; private set; }
    public AmqpTransactionEnlistment(Transaction transaction, AmqpTransactionManager transactionManager, AmqpConnectionScope connectionScope, TimeSpan timeout);
    [CompilerGeneratedAttribute]
public ArraySegment`1<byte> get_AmqpTransactionId();
    [CompilerGeneratedAttribute]
private void set_AmqpTransactionId(ArraySegment`1<byte> value);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.Amqp.AmqpTransactionEnlistment/<OnCreateAsync>d__9")]
protected virtual Task`1<AmqpTransactionEnlistment> OnCreateAsync(TimeSpan timeout, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.Amqp.AmqpTransactionEnlistment/<GetController>d__10")]
private Task`1<Controller> GetController(TimeSpan timeout);
    protected virtual void OnSafeClose(AmqpTransactionEnlistment value);
    private sealed virtual override void System.Transactions.IPromotableSinglePhaseNotification.Initialize();
    private sealed virtual override void System.Transactions.IPromotableSinglePhaseNotification.SinglePhaseCommit(SinglePhaseEnlistment singlePhaseEnlistment);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.Amqp.AmqpTransactionEnlistment/<SinglePhaseCommitAsync>d__14")]
private Task SinglePhaseCommitAsync(SinglePhaseEnlistment singlePhaseEnlistment);
    private sealed virtual override void System.Transactions.IPromotableSinglePhaseNotification.Rollback(SinglePhaseEnlistment singlePhaseEnlistment);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.Amqp.AmqpTransactionEnlistment/<RollbackAsync>d__16")]
private Task RollbackAsync(SinglePhaseEnlistment singlePhaseEnlistment);
    private sealed virtual override Byte[] System.Transactions.ITransactionPromoter.Promote();
}
internal class Azure.Messaging.ServiceBus.Amqp.AmqpTransactionManager : object {
    private object _syncRoot;
    private Dictionary`2<string, AmqpTransactionEnlistment> _enlistmentMap;
    [CompilerGeneratedAttribute]
private static AmqpTransactionManager <Instance>k__BackingField;
    public static AmqpTransactionManager Instance { get; }
    private static AmqpTransactionManager();
    [CompilerGeneratedAttribute]
public static AmqpTransactionManager get_Instance();
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.Amqp.AmqpTransactionManager/<EnlistAsync>d__5")]
public Task`1<ArraySegment`1<byte>> EnlistAsync(Transaction transaction, AmqpConnectionScope connectionScope, TimeSpan timeout);
    public void RemoveEnlistment(string transactionId);
}
internal class Azure.Messaging.ServiceBus.Amqp.CbsTokenProvider : object {
    private static string SharedAccessTokenType;
    private static string JsonWebTokenType;
    private string TokenType;
    private ServiceBusTokenCredential Credential;
    private SemaphoreSlim TokenAcquireSemaphore;
    private TimeSpan TokenExpirationBuffer;
    private CancellationToken CancellationToken;
    private CbsToken _cachedJwtToken;
    public CbsTokenProvider(ServiceBusTokenCredential credential, TimeSpan tokenExpirationBuffer, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.Amqp.CbsTokenProvider/<GetTokenAsync>d__9")]
public sealed virtual Task`1<CbsToken> GetTokenAsync(Uri namespaceAddress, string appliesTo, String[] requiredClaims);
    public sealed virtual void Dispose();
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.Amqp.CbsTokenProvider/<AcquireJwtTokenAsync>d__11")]
private Task`1<CbsToken> AcquireJwtTokenAsync();
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.Amqp.CbsTokenProvider/<AcquireSharedAccessTokenAsync>d__12")]
private Task`1<CbsToken> AcquireSharedAccessTokenAsync();
    private bool IsNearingExpiration(CbsToken token);
}
internal class Azure.Messaging.ServiceBus.Amqp.Framing.AmqpCorrelationRuleFilterCodec : AmqpRuleFilterCodec {
    public static string Name;
    public static ulong Code;
    private static int Fields;
    private AmqpMap properties;
    [CompilerGeneratedAttribute]
private string <CorrelationId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MessageId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <To>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReplyTo>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Subject>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SessionId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReplyToSessionId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContentType>k__BackingField;
    public string CorrelationId { get; public set; }
    public string MessageId { get; public set; }
    public string To { get; public set; }
    public string ReplyTo { get; public set; }
    public string Subject { get; public set; }
    public string SessionId { get; public set; }
    public string ReplyToSessionId { get; public set; }
    public string ContentType { get; public set; }
    public AmqpMap Properties { get; }
    protected int FieldCount { get; }
    [CompilerGeneratedAttribute]
public string get_CorrelationId();
    [CompilerGeneratedAttribute]
public void set_CorrelationId(string value);
    [CompilerGeneratedAttribute]
public string get_MessageId();
    [CompilerGeneratedAttribute]
public void set_MessageId(string value);
    [CompilerGeneratedAttribute]
public string get_To();
    [CompilerGeneratedAttribute]
public void set_To(string value);
    [CompilerGeneratedAttribute]
public string get_ReplyTo();
    [CompilerGeneratedAttribute]
public void set_ReplyTo(string value);
    [CompilerGeneratedAttribute]
public string get_Subject();
    [CompilerGeneratedAttribute]
public void set_Subject(string value);
    [CompilerGeneratedAttribute]
public string get_SessionId();
    [CompilerGeneratedAttribute]
public void set_SessionId(string value);
    [CompilerGeneratedAttribute]
public string get_ReplyToSessionId();
    [CompilerGeneratedAttribute]
public void set_ReplyToSessionId(string value);
    [CompilerGeneratedAttribute]
public string get_ContentType();
    [CompilerGeneratedAttribute]
public void set_ContentType(string value);
    public AmqpMap get_Properties();
    protected virtual int get_FieldCount();
    public virtual string ToString();
    protected virtual void OnEncode(ByteBuffer buffer);
    protected virtual void OnDecode(ByteBuffer buffer, int count);
    protected virtual int OnValueSize();
}
internal class Azure.Messaging.ServiceBus.Amqp.Framing.AmqpEmptyRuleActionCodec : AmqpRuleActionCodec {
    public static string Name;
    public static ulong Code;
    private static int Fields;
    protected int FieldCount { get; }
    protected virtual int get_FieldCount();
    protected virtual void OnEncode(ByteBuffer buffer);
    protected virtual void OnDecode(ByteBuffer buffer, int count);
    protected virtual int OnValueSize();
}
internal class Azure.Messaging.ServiceBus.Amqp.Framing.AmqpFalseRuleFilterCodec : AmqpRuleFilterCodec {
    public static string Name;
    public static ulong Code;
    public virtual string ToString();
}
internal abstract class Azure.Messaging.ServiceBus.Amqp.Framing.AmqpRuleActionCodec : DescribedList {
    protected AmqpRuleActionCodec(string name, ulong code);
}
internal class Azure.Messaging.ServiceBus.Amqp.Framing.AmqpRuleDescriptionCodec : DescribedList {
    public static string Name;
    public static ulong Code;
    private static int Fields;
    [CompilerGeneratedAttribute]
private AmqpRuleFilterCodec <Filter>k__BackingField;
    [CompilerGeneratedAttribute]
private AmqpRuleActionCodec <Action>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RuleName>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <CreatedAt>k__BackingField;
    public AmqpRuleFilterCodec Filter { get; public set; }
    public AmqpRuleActionCodec Action { get; public set; }
    public string RuleName { get; public set; }
    public Nullable`1<DateTime> CreatedAt { get; public set; }
    protected int FieldCount { get; }
    [CompilerGeneratedAttribute]
public AmqpRuleFilterCodec get_Filter();
    [CompilerGeneratedAttribute]
public void set_Filter(AmqpRuleFilterCodec value);
    [CompilerGeneratedAttribute]
public AmqpRuleActionCodec get_Action();
    [CompilerGeneratedAttribute]
public void set_Action(AmqpRuleActionCodec value);
    [CompilerGeneratedAttribute]
public string get_RuleName();
    [CompilerGeneratedAttribute]
public void set_RuleName(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_CreatedAt();
    [CompilerGeneratedAttribute]
public void set_CreatedAt(Nullable`1<DateTime> value);
    protected virtual int get_FieldCount();
    protected virtual void OnEncode(ByteBuffer buffer);
    protected virtual void OnDecode(ByteBuffer buffer, int count);
    protected virtual int OnValueSize();
}
internal abstract class Azure.Messaging.ServiceBus.Amqp.Framing.AmqpRuleFilterCodec : DescribedList {
    protected int FieldCount { get; }
    protected AmqpRuleFilterCodec(string name, ulong code);
    protected virtual int get_FieldCount();
    protected virtual void OnEncode(ByteBuffer buffer);
    protected virtual void OnDecode(ByteBuffer buffer, int count);
    protected virtual int OnValueSize();
}
internal class Azure.Messaging.ServiceBus.Amqp.Framing.AmqpSqlRuleActionCodec : AmqpRuleActionCodec {
    public static string Name;
    public static ulong Code;
    private static int Fields;
    [CompilerGeneratedAttribute]
private string <SqlExpression>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <CompatibilityLevel>k__BackingField;
    public string SqlExpression { get; public set; }
    public Nullable`1<int> CompatibilityLevel { get; public set; }
    protected int FieldCount { get; }
    [CompilerGeneratedAttribute]
public string get_SqlExpression();
    [CompilerGeneratedAttribute]
public void set_SqlExpression(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_CompatibilityLevel();
    [CompilerGeneratedAttribute]
public void set_CompatibilityLevel(Nullable`1<int> value);
    protected virtual int get_FieldCount();
    public virtual string ToString();
    protected virtual void OnEncode(ByteBuffer buffer);
    protected virtual void OnDecode(ByteBuffer buffer, int count);
    protected virtual int OnValueSize();
}
internal class Azure.Messaging.ServiceBus.Amqp.Framing.AmqpSqlRuleFilterCodec : AmqpRuleFilterCodec {
    public static string Name;
    public static ulong Code;
    private static int Fields;
    [CompilerGeneratedAttribute]
private string <Expression>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <CompatibilityLevel>k__BackingField;
    public string Expression { get; public set; }
    public Nullable`1<int> CompatibilityLevel { get; public set; }
    protected int FieldCount { get; }
    [CompilerGeneratedAttribute]
public string get_Expression();
    [CompilerGeneratedAttribute]
public void set_Expression(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_CompatibilityLevel();
    [CompilerGeneratedAttribute]
public void set_CompatibilityLevel(Nullable`1<int> value);
    protected virtual int get_FieldCount();
    public virtual string ToString();
    protected virtual void OnEncode(ByteBuffer buffer);
    protected virtual void OnDecode(ByteBuffer buffer, int count);
    protected virtual int OnValueSize();
}
internal class Azure.Messaging.ServiceBus.Amqp.Framing.AmqpTrueRuleFilterCodec : AmqpRuleFilterCodec {
    public static string Name;
    public static ulong Code;
    public virtual string ToString();
}
internal static class Azure.Messaging.ServiceBus.Amqp.ManagementConstants : object {
    public static string Microsoft;
}
internal static class Azure.Messaging.ServiceBus.Amqp.ManagementUtilities : object {
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.Amqp.ManagementUtilities/<ExecuteRequestResponseAsync>d__0")]
internal static Task`1<AmqpResponseMessage> ExecuteRequestResponseAsync(AmqpConnectionScope connectionScope, FaultTolerantAmqpObject`1<RequestResponseAmqpLink> managementLink, AmqpRequestMessage amqpRequestMessage, TimeSpan timeout);
}
internal enum Azure.Messaging.ServiceBus.Amqp.MappingType : Enum {
    public int value__;
    public static MappingType ApplicationProperty;
    public static MappingType MessageBody;
}
internal enum Azure.Messaging.ServiceBus.Amqp.PropertyValueType : Enum {
    public int value__;
    public static PropertyValueType Null;
    public static PropertyValueType Byte;
    public static PropertyValueType SByte;
    public static PropertyValueType Char;
    public static PropertyValueType Int16;
    public static PropertyValueType UInt16;
    public static PropertyValueType Int32;
    public static PropertyValueType UInt32;
    public static PropertyValueType Int64;
    public static PropertyValueType UInt64;
    public static PropertyValueType Single;
    public static PropertyValueType Double;
    public static PropertyValueType Decimal;
    public static PropertyValueType Boolean;
    public static PropertyValueType Guid;
    public static PropertyValueType String;
    public static PropertyValueType Uri;
    public static PropertyValueType DateTime;
    public static PropertyValueType DateTimeOffset;
    public static PropertyValueType TimeSpan;
    public static PropertyValueType Stream;
    public static PropertyValueType Unknown;
}
internal class Azure.Messaging.ServiceBus.Amqp.SerializationUtilities : object {
    private static Dictionary`2<Type, PropertyValueType> s_typeToIntMap;
    private static SerializationUtilities();
    public static PropertyValueType GetTypeId(object value);
    public static bool IsSupportedPropertyType(Type type);
}
internal static class Azure.Messaging.ServiceBus.AmqpResponse : object {
    public static string StatusCode;
    public static string StatusDescription;
    public static string ErrorCondition;
    public static bool IsSuccessStatus(AmqpResponseStatusCode statusCode);
}
internal static class Azure.Messaging.ServiceBus.Authorization.ServiceBusClaim : object {
    public static string Manage;
    public static string Send;
    public static string Listen;
}
internal class Azure.Messaging.ServiceBus.Authorization.ServiceBusTokenCredential : TokenCredential {
    private TokenCredential _credential;
    [CompilerGeneratedAttribute]
private bool <IsSharedAccessCredential>k__BackingField;
    public bool IsSharedAccessCredential { get; }
    public ServiceBusTokenCredential(TokenCredential tokenCredential);
    [CompilerGeneratedAttribute]
public bool get_IsSharedAccessCredential();
    public virtual AccessToken GetToken(TokenRequestContext requestContext, CancellationToken cancellationToken);
    public virtual ValueTask`1<AccessToken> GetTokenAsync(TokenRequestContext requestContext, CancellationToken cancellationToken);
    public ValueTask`1<AccessToken> GetTokenUsingDefaultScopeAsync(CancellationToken cancellationToken);
}
internal class Azure.Messaging.ServiceBus.Authorization.SharedAccessCredential : TokenCredential {
    private static TimeSpan SignatureRefreshBuffer;
    private static TimeSpan SignatureExtensionDuration;
    private AzureNamedKeyCredential _sourceKeyCredential;
    private AzureSasCredential _sourceSasCredential;
    private SharedAccessSignature _sharedAccessSignature;
    public SharedAccessCredential(SharedAccessSignature signature);
    public SharedAccessCredential(AzureSasCredential sourceCredential);
    public SharedAccessCredential(AzureNamedKeyCredential sourceCredential, string signatureResource);
    private static SharedAccessCredential();
    public virtual AccessToken GetToken(TokenRequestContext requestContext, CancellationToken cancellationToken);
    public virtual ValueTask`1<AccessToken> GetTokenAsync(TokenRequestContext requestContext, CancellationToken cancellationToken);
    private SharedAccessSignature SafeUpdateSharedAccessSignature(SharedAccessSignature cachedSignature, SharedAccessSignature updatedSignature);
}
internal class Azure.Messaging.ServiceBus.Authorization.SharedAccessSignature : object {
    internal static int MaximumKeyNameLength;
    private static int MaximumKeyLength;
    private static string AuthenticationTypeToken;
    private static string SignedResourceToken;
    private static string SignatureToken;
    private static string SignedKeyNameToken;
    private static string SignedExpiryToken;
    private static string SignedResourceFullIdentifierToken;
    private static char TokenValueSeparator;
    private static char TokenValuePairDelimiter;
    private static TimeSpan DefaultSignatureValidityDuration;
    private static DateTimeOffset Epoch;
    [CompilerGeneratedAttribute]
private string <SharedAccessKeyName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SharedAccessKey>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <SignatureExpiration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Resource>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public string SharedAccessKeyName { get; private set; }
    public string SharedAccessKey { get; private set; }
    public DateTimeOffset SignatureExpiration { get; private set; }
    public string Resource { get; private set; }
    public string Value { get; private set; }
    public SharedAccessSignature(string serviceBusResource, string sharedAccessKeyName, string sharedAccessKey, Nullable`1<TimeSpan> signatureValidityDuration);
    public SharedAccessSignature(string sharedAccessSignature, string sharedAccessKey);
    public SharedAccessSignature(string sharedAccessSignature);
    public SharedAccessSignature(string eventHubResource, string sharedAccessKeyName, string sharedAccessKey, string value, DateTimeOffset signatureExpiration);
    private static SharedAccessSignature();
    [CompilerGeneratedAttribute]
public string get_SharedAccessKeyName();
    [CompilerGeneratedAttribute]
private void set_SharedAccessKeyName(string value);
    [CompilerGeneratedAttribute]
public string get_SharedAccessKey();
    [CompilerGeneratedAttribute]
private void set_SharedAccessKey(string value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_SignatureExpiration();
    [CompilerGeneratedAttribute]
private void set_SignatureExpiration(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public string get_Resource();
    [CompilerGeneratedAttribute]
private void set_Resource(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
private void set_Value(string value);
    public SharedAccessSignature CloneWithNewExpiration(TimeSpan signatureValidityDuration);
    public virtual string ToString();
    private static ValueTuple`3<string, string, DateTimeOffset> ParseSignature(string sharedAccessSignature);
    private static string BuildSignature(string audience, string sharedAccessKeyName, string sharedAccessKey, DateTimeOffset expirationTime);
    private static DateTimeOffset ConvertFromUnixTime(long unixTime);
    private static long ConvertToUnixTime(DateTimeOffset dateTimeOffset);
}
[ExtensionAttribute]
internal static class Azure.Messaging.ServiceBus.CancellationTokenSourceExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static void CancelAfterLockExpired(CancellationTokenSource cancellationTokenSource, ServiceBusReceivedMessage receivedMessage);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static void CancelAfterLockExpired(CancellationTokenSource cancellationTokenSource, ServiceBusSessionReceiver sessionReceiver);
}
internal static class Azure.Messaging.ServiceBus.Constants : object {
    public static int MaxMessageIdLength;
    public static int MaxPartitionKeyLength;
    public static int MaxSessionIdLength;
    public static string PathDelimiter;
    public static int RuleNameMaximumLength;
    public static int MaximumSqlRuleFilterStatementLength;
    public static int MaximumSqlRuleActionStatementLength;
    public static int DefaultClientPrefetchCount;
    public static int MaxDeadLetterReasonLength;
    public static long DefaultLastPeekedSequenceNumber;
    public static TimeSpan DefaultOperationTimeout;
    public static TimeSpan ClientPumpRenewLockTimeout;
    public static TimeSpan MaximumRenewBufferDuration;
    public static TimeSpan DefaultRetryDeltaBackoff;
    public static TimeSpan NoMessageBackoffTimeSpan;
    public static string SasTokenType;
    public static string JsonWebTokenType;
    public static string AadServiceBusAudience;
    public static DateTime EpochTime;
    public static int WellKnownPublicPortsLimit;
    public static string DefaultScope;
    public static string TroubleshootingMessage;
    private static Constants();
}
internal class Azure.Messaging.ServiceBus.Core.BasicRetryPolicy : ServiceBusRetryPolicy {
    private static int s_randomSeed;
    private static ThreadLocal`1<Random> RandomNumberGenerator;
    private static double MaximumTimeSpanSeconds;
    [CompilerGeneratedAttribute]
private ServiceBusRetryOptions <Options>k__BackingField;
    [CompilerGeneratedAttribute]
private double <JitterFactor>k__BackingField;
    public ServiceBusRetryOptions Options { get; }
    public double JitterFactor { get; }
    public BasicRetryPolicy(ServiceBusRetryOptions retryOptions);
    private static BasicRetryPolicy();
    [CompilerGeneratedAttribute]
public ServiceBusRetryOptions get_Options();
    [CompilerGeneratedAttribute]
public double get_JitterFactor();
    public virtual TimeSpan CalculateTryTimeout(int attemptCount);
    public virtual Nullable`1<TimeSpan> CalculateRetryDelay(Exception lastException, int attemptCount);
    private static bool ShouldRetryException(Exception exception);
    private static TimeSpan CalculateExponentialDelay(int attemptCount, double baseDelaySeconds, double baseJitterSeconds, Random random);
    private static TimeSpan CalculateFixedDelay(double baseDelaySeconds, double baseJitterSeconds, Random random);
}
[ExtensionAttribute]
internal static class Azure.Messaging.ServiceBus.Core.CancellationTokenExtensions : object {
    [ExtensionAttribute]
public static void ThrowIfCancellationRequested(CancellationToken instance);
}
internal class Azure.Messaging.ServiceBus.Core.ClientLibraryInformation : object {
    [CompilerGeneratedAttribute]
private static ClientLibraryInformation <Current>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Product>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Framework>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Platform>k__BackingField;
    [CompilerGeneratedAttribute]
private KeyValuePair`2[] <SerializedProperties>k__BackingField;
    public static ClientLibraryInformation Current { get; }
    public string Product { get; }
    public string Version { get; }
    public string Framework { get; }
    public string Platform { get; }
    [DescriptionAttribute("user-agent")]
public string UserAgent { get; }
    public KeyValuePair`2[] SerializedProperties { get; }
    private static ClientLibraryInformation();
    [CompilerGeneratedAttribute]
public static ClientLibraryInformation get_Current();
    [CompilerGeneratedAttribute]
public string get_Product();
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public string get_Framework();
    [CompilerGeneratedAttribute]
public string get_Platform();
    public string get_UserAgent();
    [CompilerGeneratedAttribute]
public KeyValuePair`2[] get_SerializedProperties();
    private static KeyValuePair`2[] SerializeProperties(ClientLibraryInformation self);
    private static string GetTelemetryName(MemberInfo property);
}
[ExtensionAttribute]
internal static class Azure.Messaging.ServiceBus.Core.ServiceBusRetryOptionsExtensions : object {
    [ExtensionAttribute]
public static ServiceBusRetryOptions Clone(ServiceBusRetryOptions instance);
    [ExtensionAttribute]
public static ServiceBusRetryPolicy ToRetryPolicy(ServiceBusRetryOptions instance);
    [ExtensionAttribute]
public static bool IsEquivalentTo(ServiceBusRetryOptions instance, ServiceBusRetryOptions other);
}
[ExtensionAttribute]
internal static class Azure.Messaging.ServiceBus.Core.TimeSpanExtensions : object {
    [ExtensionAttribute]
public static TimeSpan CalculateRemaining(TimeSpan instance, TimeSpan elapsed);
}
internal abstract class Azure.Messaging.ServiceBus.Core.TransportClient : object {
    [CompilerGeneratedAttribute]
private bool <IsClosed>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <ServiceEndpoint>k__BackingField;
    public bool IsClosed { get; }
    public Uri ServiceEndpoint { get; }
    [CompilerGeneratedAttribute]
public virtual bool get_IsClosed();
    [CompilerGeneratedAttribute]
public virtual Uri get_ServiceEndpoint();
    public abstract virtual TransportSender CreateSender(string entityPath, ServiceBusRetryPolicy retryPolicy, string identifier);
    public abstract virtual TransportReceiver CreateReceiver(string entityPath, ServiceBusRetryPolicy retryPolicy, ServiceBusReceiveMode receiveMode, UInt32 prefetchCount, string identifier, string sessionId, bool isSessionReceiver, bool isProcessor, CancellationToken cancellationToken);
    public abstract virtual TransportRuleManager CreateRuleManager(string subscriptionPath, ServiceBusRetryPolicy retryPolicy, string identifier);
    public abstract virtual Task CloseAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.Core.TransportClient/<DisposeAsync>d__10")]
public virtual ValueTask DisposeAsync();
}
internal abstract class Azure.Messaging.ServiceBus.Core.TransportConnectionScope : object {
    public bool IsDisposed { get; protected set; }
    public abstract virtual bool get_IsDisposed();
    protected abstract virtual void set_IsDisposed(bool value);
    public abstract virtual void Dispose();
}
internal abstract class Azure.Messaging.ServiceBus.Core.TransportMessageBatch : object {
    public long MaxSizeInBytes { get; }
    public long SizeInBytes { get; }
    public int Count { get; }
    public abstract virtual long get_MaxSizeInBytes();
    public abstract virtual long get_SizeInBytes();
    public abstract virtual int get_Count();
    public abstract virtual bool TryAddMessage(ServiceBusMessage message);
    public abstract virtual void Clear();
    public abstract virtual IReadOnlyCollection`1<T> AsReadOnly();
    public abstract virtual void Dispose();
}
internal abstract class Azure.Messaging.ServiceBus.Core.TransportReceiver : object {
    public bool IsSessionLinkClosed { get; }
    public string SessionId { get; protected set; }
    public DateTimeOffset SessionLockedUntil { get; protected set; }
    public int PrefetchCount { get; public set; }
    public abstract virtual bool get_IsSessionLinkClosed();
    public abstract virtual string get_SessionId();
    protected abstract virtual void set_SessionId(string value);
    public abstract virtual DateTimeOffset get_SessionLockedUntil();
    protected abstract virtual void set_SessionLockedUntil(DateTimeOffset value);
    public abstract virtual int get_PrefetchCount();
    public abstract virtual void set_PrefetchCount(int value);
    public abstract virtual Task`1<IReadOnlyList`1<ServiceBusReceivedMessage>> ReceiveMessagesAsync(int maximumMessageCount, Nullable`1<TimeSpan> maxWaitTime, CancellationToken cancellationToken);
    public abstract virtual Task CloseAsync(CancellationToken cancellationToken);
    public abstract virtual Task OpenLinkAsync(CancellationToken cancellationToken);
    public abstract virtual Task CompleteAsync(Guid lockToken, CancellationToken cancellationToken);
    public abstract virtual Task DeferAsync(Guid lockToken, IDictionary`2<string, object> propertiesToModify, CancellationToken cancellationToken);
    public abstract virtual Task`1<IReadOnlyList`1<ServiceBusReceivedMessage>> PeekMessagesAsync(Nullable`1<long> sequenceNumber, int messageCount, CancellationToken cancellationToken);
    public abstract virtual Task AbandonAsync(Guid lockToken, IDictionary`2<string, object> propertiesToModify, CancellationToken cancellationToken);
    public abstract virtual Task`1<int> DeleteMessagesAsync(int messageCount, DateTimeOffset beforeEnqueueTimeUtc, CancellationToken cancellationToken);
    public abstract virtual Task DeadLetterAsync(Guid lockToken, string deadLetterReason, string deadLetterErrorDescription, IDictionary`2<string, object> propertiesToModify, CancellationToken cancellationToken);
    public abstract virtual Task`1<IReadOnlyList`1<ServiceBusReceivedMessage>> ReceiveDeferredMessagesAsync(Int64[] sequenceNumbers, CancellationToken cancellationToken);
    public abstract virtual Task`1<DateTimeOffset> RenewMessageLockAsync(Guid lockToken, CancellationToken cancellationToken);
    public abstract virtual Task RenewSessionLockAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<BinaryData> GetStateAsync(CancellationToken cancellationToken);
    public abstract virtual Task SetStateAsync(BinaryData sessionState, CancellationToken cancellationToken);
}
internal abstract class Azure.Messaging.ServiceBus.Core.TransportRuleManager : object {
    public bool IsClosed { get; }
    public abstract virtual bool get_IsClosed();
    public abstract virtual Task CreateRuleAsync(RuleProperties properties, CancellationToken cancellationToken);
    public abstract virtual Task DeleteRuleAsync(string ruleName, CancellationToken cancellationToken);
    public abstract virtual Task`1<List`1<RuleProperties>> GetRulesAsync(int skip, int top, CancellationToken cancellationToken);
    public abstract virtual Task CloseAsync(CancellationToken cancellationToken);
}
internal abstract class Azure.Messaging.ServiceBus.Core.TransportSender : object {
    public abstract virtual ValueTask`1<TransportMessageBatch> CreateMessageBatchAsync(CreateMessageBatchOptions options, CancellationToken cancellationToken);
    public abstract virtual Task SendAsync(IReadOnlyCollection`1<ServiceBusMessage> messages, CancellationToken cancellationToken);
    public abstract virtual Task SendBatchAsync(ServiceBusMessageBatch messageBatch, CancellationToken cancellationToken);
    public abstract virtual Task`1<IReadOnlyList`1<long>> ScheduleMessagesAsync(IReadOnlyCollection`1<ServiceBusMessage> messages, CancellationToken cancellationToken);
    public abstract virtual Task CancelScheduledMessagesAsync(Int64[] sequenceNumbers, CancellationToken cancellationToken);
    public abstract virtual Task CloseAsync(CancellationToken cancellationToken);
}
[ExtensionAttribute]
internal static class Azure.Messaging.ServiceBus.Core.TransportTypeExtensions : object {
    private static string AmqpTlsUriScheme;
    private static string AmqpInsecureUriScheme;
    [ExtensionAttribute]
public static string GetUriScheme(ServiceBusTransportType instance, bool useTls);
    [ExtensionAttribute]
public static bool IsWebSocketTransport(ServiceBusTransportType instance);
}
public class Azure.Messaging.ServiceBus.CreateMessageBatchOptions : object {
    private Nullable`1<long> _maxSizeInBytes;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxMessageCount>k__BackingField;
    internal Nullable`1<int> MaxMessageCount { get; internal set; }
    public Nullable`1<long> MaxSizeInBytes { get; public set; }
    [CompilerGeneratedAttribute]
internal Nullable`1<int> get_MaxMessageCount();
    [CompilerGeneratedAttribute]
internal void set_MaxMessageCount(Nullable`1<int> value);
    public Nullable`1<long> get_MaxSizeInBytes();
    public void set_MaxSizeInBytes(Nullable`1<long> value);
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    internal CreateMessageBatchOptions Clone();
}
[ExtensionAttribute]
internal static class Azure.Messaging.ServiceBus.Diagnostics.DiagnosticExtensions : object {
    [ExtensionAttribute]
public static string GetAsciiString(ArraySegment`1<byte> arraySegment);
    [ExtensionAttribute]
public static void SetMessageData(DiagnosticScope scope, ServiceBusReceivedMessage message);
    [ExtensionAttribute]
public static void SetMessageAsParent(DiagnosticScope scope, ServiceBusReceivedMessage message);
    [ExtensionAttribute]
public static void SetMessageData(DiagnosticScope scope, IReadOnlyCollection`1<ServiceBusReceivedMessage> messages);
    [ExtensionAttribute]
public static void SetMessageData(DiagnosticScope scope, IReadOnlyCollection`1<ServiceBusMessage> messages);
    [ExtensionAttribute]
public static void SetMessageData(DiagnosticScope scope, IReadOnlyCollection`1<AmqpMessage> messages);
    [ExtensionAttribute]
public static void BackdateStart(DiagnosticScope scope, DateTime startTime);
    [ExtensionAttribute]
private static void AddLinkedDiagnostics(DiagnosticScope scope, IReadOnlyCollection`1<ServiceBusReceivedMessage> messages);
    [ExtensionAttribute]
private static void AddLinkedDiagnostics(DiagnosticScope scope, IReadOnlyCollection`1<AmqpMessage> messages);
    [ExtensionAttribute]
private static void AddLinkedDiagnostics(DiagnosticScope scope, ServiceBusReceivedMessage message);
    [ExtensionAttribute]
private static void AddLinkedDiagnostics(DiagnosticScope scope, IReadOnlyCollection`1<ServiceBusMessage> messages);
    [ExtensionAttribute]
private static void AddLinkedDiagnostics(DiagnosticScope scope, IReadOnlyDictionary`2<string, object> properties);
    [ExtensionAttribute]
private static void AddLinkedDiagnostics(DiagnosticScope scope, PropertiesMap properties);
    [ExtensionAttribute]
private static void AddLinkedDiagnostics(DiagnosticScope scope, IDictionary`2<string, object> properties);
    public static bool TryExtractDiagnosticId(PropertiesMap properties, String& id);
}
internal static class Azure.Messaging.ServiceBus.Diagnostics.DiagnosticProperty : object {
    public static string DiagnosticNamespace;
    public static string ResourceProviderNamespace;
    public static string ServiceBusServiceContext;
    [CompilerGeneratedAttribute]
private static string <MessageActivityName>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <SendActivityName>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <ScheduleActivityName>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <CancelActivityName>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <ReceiveActivityName>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <ReceiveDeferredActivityName>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <PeekActivityName>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <AbandonActivityName>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <CompleteActivityName>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <DeadLetterActivityName>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <DeferActivityName>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <DeleteActivityName>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <PurgeActivityName>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <RenewMessageLockActivityName>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <RenewSessionLockActivityName>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <GetSessionStateActivityName>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <SetSessionStateActivityName>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <ProcessMessageActivityName>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <ProcessSessionMessageActivityName>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <CreateRuleActivityName>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <DeleteRuleActivityName>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <GetRulesActivityName>k__BackingField;
    public static string MessageActivityName { get; }
    public static string SendActivityName { get; }
    public static string ScheduleActivityName { get; }
    public static string CancelActivityName { get; }
    public static string ReceiveActivityName { get; }
    public static string ReceiveDeferredActivityName { get; }
    public static string PeekActivityName { get; }
    public static string AbandonActivityName { get; }
    public static string CompleteActivityName { get; }
    public static string DeadLetterActivityName { get; }
    public static string DeferActivityName { get; }
    public static string DeleteActivityName { get; }
    public static string PurgeActivityName { get; }
    public static string RenewMessageLockActivityName { get; }
    public static string RenewSessionLockActivityName { get; }
    public static string GetSessionStateActivityName { get; }
    public static string SetSessionStateActivityName { get; }
    public static string ProcessMessageActivityName { get; }
    public static string ProcessSessionMessageActivityName { get; }
    public static string CreateRuleActivityName { get; }
    public static string DeleteRuleActivityName { get; }
    public static string GetRulesActivityName { get; }
    private static DiagnosticProperty();
    [CompilerGeneratedAttribute]
public static string get_MessageActivityName();
    [CompilerGeneratedAttribute]
public static string get_SendActivityName();
    [CompilerGeneratedAttribute]
public static string get_ScheduleActivityName();
    [CompilerGeneratedAttribute]
public static string get_CancelActivityName();
    [CompilerGeneratedAttribute]
public static string get_ReceiveActivityName();
    [CompilerGeneratedAttribute]
public static string get_ReceiveDeferredActivityName();
    [CompilerGeneratedAttribute]
public static string get_PeekActivityName();
    [CompilerGeneratedAttribute]
public static string get_AbandonActivityName();
    [CompilerGeneratedAttribute]
public static string get_CompleteActivityName();
    [CompilerGeneratedAttribute]
public static string get_DeadLetterActivityName();
    [CompilerGeneratedAttribute]
public static string get_DeferActivityName();
    [CompilerGeneratedAttribute]
public static string get_DeleteActivityName();
    [CompilerGeneratedAttribute]
public static string get_PurgeActivityName();
    [CompilerGeneratedAttribute]
public static string get_RenewMessageLockActivityName();
    [CompilerGeneratedAttribute]
public static string get_RenewSessionLockActivityName();
    [CompilerGeneratedAttribute]
public static string get_GetSessionStateActivityName();
    [CompilerGeneratedAttribute]
public static string get_SetSessionStateActivityName();
    [CompilerGeneratedAttribute]
public static string get_ProcessMessageActivityName();
    [CompilerGeneratedAttribute]
public static string get_ProcessSessionMessageActivityName();
    [CompilerGeneratedAttribute]
public static string get_CreateRuleActivityName();
    [CompilerGeneratedAttribute]
public static string get_DeleteRuleActivityName();
    [CompilerGeneratedAttribute]
public static string get_GetRulesActivityName();
}
internal static class Azure.Messaging.ServiceBus.Diagnostics.DiagnosticUtilities : object {
    internal static string GenerateIdentifier(string entityPath);
}
[EventSourceAttribute]
internal class Azure.Messaging.ServiceBus.Diagnostics.ServiceBusEventSource : AzureEventSource {
    private static string EventSourceName;
    [CompilerGeneratedAttribute]
private static ServiceBusEventSource <Log>k__BackingField;
    internal static int SendMessageStartEvent;
    internal static int SendMessageCompleteEvent;
    internal static int SendMessageExceptionEvent;
    internal static int CreateMessageBatchStartEvent;
    internal static int CreateMessageBatchCompleteEvent;
    internal static int CreateMessageBatchExceptionEvent;
    internal static int ReceiveMessageStartEvent;
    internal static int ReceiveMessageCompleteEvent;
    internal static int ReceiveMessageExceptionEvent;
    internal static int ScheduleMessageStartEvent;
    internal static int ScheduleMessageCompleteEvent;
    internal static int ScheduleMessageExceptionEvent;
    internal static int CancelScheduledMessageStartEvent;
    internal static int CancelScheduledMessageCompleteEvent;
    internal static int CancelScheduledMessageExceptionEvent;
    internal static int CompleteMessageStartEvent;
    internal static int CompleteMessageCompleteEvent;
    internal static int CompleteMessageExceptionEvent;
    internal static int DeferMessageStartEvent;
    internal static int DeferMessageCompleteEvent;
    internal static int DeferMessageExceptionEvent;
    internal static int AbandonMessageStartEvent;
    internal static int AbandonMessageCompleteEvent;
    internal static int AbandonMessageExceptionEvent;
    internal static int DeadLetterMessageStartEvent;
    internal static int DeadLetterMessageCompleteEvent;
    internal static int DeadLetterMessageExceptionEvent;
    internal static int PeekMessageStartEvent;
    internal static int PeekMessageCompleteEvent;
    internal static int PeekMessageExceptionEvent;
    internal static int RenewMessageLockStartEvent;
    internal static int RenewMessageLockCompleteEvent;
    internal static int RenewMessageLockExceptionEvent;
    internal static int ReceiveDeferredMessageStartEvent;
    internal static int ReceiveDeferredMessageCompleteEvent;
    internal static int ReceiveDeferredMessageExceptionEvent;
    internal static int LinkStateLostEvent;
    internal static int ReceiveLinkClosedEvent;
    internal static int AmqpLinkRefreshStartEvent;
    internal static int AmqpLinkRefreshCompleteEvent;
    internal static int AmqpLinkRefreshExceptionEvent;
    internal static int ManagementSerializedExceptionEvent;
    internal static int RunOperationExceptionEvent;
    internal static int ClientCloseStartEvent;
    internal static int ClientCloseCompleteEvent;
    internal static int ClientCloseExceptionEvent;
    internal static int RenewSessionLockStartEvent;
    internal static int RenewSessionLockCompleteEvent;
    internal static int RenewSessionLockExceptionEvent;
    internal static int StartProcessingStartEvent;
    internal static int StartProcessingCompleteEvent;
    internal static int StartProcessingExceptionEvent;
    internal static int StopProcessingStartEvent;
    internal static int StopProcessingCompleteEvent;
    internal static int StopProcessingExceptionEvent;
    internal static int ProcessorRenewMessageLockStartEvent;
    internal static int ProcessorRenewMessageLockCompleteEvent;
    internal static int ProcessorRenewMessageLockExceptionEvent;
    internal static int ProcessorRenewSessionLockStartEvent;
    internal static int ProcessorRenewSessionLockCompleteEvent;
    internal static int ProcessorRenewSessionLockExceptionEvent;
    internal static int GetSessionStateStartEvent;
    internal static int GetSessionStateCompleteEvent;
    internal static int GetSessionStateExceptionEvent;
    internal static int SetSessionStateStartEvent;
    internal static int SetSessionStateCompleteEvent;
    internal static int SetSessionStateExceptionEvent;
    internal static int CreateRuleStartEvent;
    internal static int CreateRuleCompleteEvent;
    internal static int CreateRuleExceptionEvent;
    internal static int DeleteRuleStartEvent;
    internal static int DeleteRuleCompleteEvent;
    internal static int DeleteRuleExceptionEvent;
    internal static int GetRulesStartEvent;
    internal static int GetRulesCompleteEvent;
    internal static int GetRulesExceptionEvent;
    internal static int ClientCreateStartEvent;
    internal static int ClientCreateCompleteEvent;
    internal static int ClientCreateExceptionEvent;
    internal static int CreateSendLinkStartEvent;
    internal static int CreateSendLinkCompleteEvent;
    internal static int CreateSendLinkExceptionEvent;
    internal static int CreateReceiveLinkStartEvent;
    internal static int CreateReceiveLinkCompleteEvent;
    internal static int CreateReceiveLinkExceptionEvent;
    internal static int CreateManagementLinkStartEvent;
    internal static int CreateManagementLinkCompleteEvent;
    internal static int CreateManagementLinkExceptionEvent;
    internal static int TransactionInitializationExceptionEvent;
    internal static int TransactionDeclaredEvent;
    internal static int TransactionDischargedEvent;
    internal static int TransactionDischargedExceptionEvent;
    internal static int CreateControllerExceptionEvent;
    internal static int ProcessorErrorHandlerThrewExceptionEvent;
    internal static int ScheduleTaskFailedEvent;
    internal static int MaxMessagesExceedsPrefetchEvent;
    internal static int SendLinkClosedEvent;
    internal static int ManagementLinkClosedEvent;
    internal static int ProcessorMessageHandlerStartEvent;
    internal static int ProcessorMessageHandlerCompleteEvent;
    internal static int ProcessorMessageHandlerExceptionEvent;
    internal static int RequestAuthorizationStartEvent;
    internal static int RequestAuthorizationCompleteEvent;
    internal static int RequestAuthorizationExceptionEvent;
    internal static int ProcessorClientClosedExceptionEvent;
    internal static int ProcessorAcceptSessionTimeoutEvent;
    internal static int ProcessorStoppingReceiveCanceledEvent;
    internal static int ProcessorStoppingAcceptSessionCanceledEvent;
    internal static int PartitionKeyValueOverwritten;
    internal static int ProcessorStoppingCancellationWarningEvent;
    internal static int RunOperationExceptionVerboseEvent;
    internal static int ReceiveMessageCanceledEvent;
    internal static int DeleteMessagesStartEvent;
    internal static int DeleteMessagesCompleteEvent;
    internal static int DeleteMessagesExceptionEvent;
    internal static int PurgeMessagesStartEvent;
    internal static int PurgeMessagesCompleteEvent;
    internal static int PurgeMessagesExceptionEvent;
    public static ServiceBusEventSource Log { get; }
    private static ServiceBusEventSource();
    [CompilerGeneratedAttribute]
public static ServiceBusEventSource get_Log();
    [EventAttribute("1")]
public virtual void SendMessageStart(string identifier, int messageCount);
    [EventAttribute("2")]
public virtual void SendMessageComplete(string identifier);
    [EventAttribute("3")]
public virtual void SendMessageException(string identifier, string exception);
    [EventAttribute("4")]
public virtual void CreateMessageBatchStart(string identifier);
    [EventAttribute("5")]
public virtual void CreateMessageBatchComplete(string identifier);
    [EventAttribute("6")]
public virtual void CreateMessageBatchException(string identifier, string exception);
    [EventAttribute("7")]
public virtual void ReceiveMessageStart(string identifier, int messageCount);
    [NonEventAttribute]
public virtual void ReceiveMessageComplete(string identifier, IReadOnlyList`1<ServiceBusReceivedMessage> messages);
    [EventAttribute("8")]
private void ReceiveMessageCompleteCore(string identifier, int messageCount, string lockTokens);
    [EventAttribute("9")]
public virtual void ReceiveMessageException(string clientId, string exception);
    [EventAttribute("115")]
public void ReceiveMessageCanceled(string identifier, string exception);
    [NonEventAttribute]
public virtual void ReceiveDeferredMessageStart(string identifier, Int64[] sequenceNumbers);
    [EventAttribute("34")]
private void ReceiveDeferredMessageStartCore(string identifier, int messageCount, string sequenceNumbers);
    [EventAttribute("35")]
public virtual void ReceiveDeferredMessageComplete(string identifier, int messageCount);
    [EventAttribute("36")]
public virtual void ReceiveDeferredMessageException(string identifier, string exception);
    [EventAttribute("28")]
public virtual void PeekMessageStart(string identifier, Nullable`1<long> sequenceNumber, int messageCount);
    [NonEventAttribute]
private void PeekMessageStartCore(int eventId, string identifier, Nullable`1<long> sequenceNumber, int messageCount);
    [EventAttribute("29")]
public virtual void PeekMessageComplete(string identifier, int messageCount);
    [EventAttribute("30")]
public virtual void PeekMessageException(string identifier, string exception);
    [EventAttribute("10")]
public virtual void ScheduleMessagesStart(string identifier, int messageCount, string scheduledEnqueueTime);
    [EventAttribute("11")]
public virtual void ScheduleMessagesComplete(string identifier);
    [EventAttribute("12")]
public virtual void ScheduleMessagesException(string identifier, string exception);
    [NonEventAttribute]
public virtual void CancelScheduledMessagesStart(string identifier, Int64[] sequenceNumbers);
    [EventAttribute("13")]
public virtual void CancelScheduledMessagesStartCore(string identifier, int messageCount, string sequenceNumbers);
    [EventAttribute("14")]
public virtual void CancelScheduledMessagesComplete(string identifier);
    [EventAttribute("15")]
public virtual void CancelScheduledMessagesException(string identifier, string exception);
    [NonEventAttribute]
public virtual void CompleteMessageStart(string identifier, int messageCount, Guid lockToken);
    [EventAttribute("16")]
private void CompleteMessageStartCore(string identifier, int messageCount, string lockTokens);
    [NonEventAttribute]
public virtual void CompleteMessageComplete(string identifier, Guid lockToken);
    [EventAttribute("17")]
private void CompleteMessageCompleteCore(string identifier, string lockToken);
    [NonEventAttribute]
public virtual void CompleteMessageException(string identifier, string exception, Guid lockToken);
    [EventAttribute("18")]
private void CompleteMessageExceptionCore(string identifier, string exception, string lockToken);
    [NonEventAttribute]
public virtual void DeferMessageStart(string identifier, int messageCount, Guid lockToken);
    [EventAttribute("19")]
private void DeferMessageStartCore(string identifier, int messageCount, string lockToken);
    [NonEventAttribute]
public virtual void DeferMessageComplete(string identifier, Guid lockToken);
    [EventAttribute("20")]
private void DeferMessageCompleteCore(string identifier, string lockToken);
    [NonEventAttribute]
public virtual void DeferMessageException(string identifier, string exception, Guid lockToken);
    [EventAttribute("21")]
private void DeferMessageExceptionCore(string identifier, string exception, string lockToken);
    [NonEventAttribute]
public virtual void AbandonMessageStart(string identifier, int messageCount, Guid lockToken);
    [EventAttribute("22")]
private void AbandonMessageStartCore(string identifier, int messageCount, string lockToken);
    [NonEventAttribute]
public virtual void AbandonMessageComplete(string identifier, Guid lockToken);
    [EventAttribute("23")]
private void AbandonMessageCompleteCore(string identifier, string lockToken);
    [NonEventAttribute]
public virtual void AbandonMessageException(string identifier, string exception, Guid lockToken);
    [EventAttribute("24")]
private void AbandonMessageExceptionCore(string identifier, string exception, string lockToken);
    [NonEventAttribute]
public virtual void DeadLetterMessageStart(string identifier, int messageCount, Guid lockToken);
    [EventAttribute("25")]
private void DeadLetterMessageStartCore(string identifier, int messageCount, string lockToken);
    [NonEventAttribute]
public virtual void DeadLetterMessageComplete(string identifier, Guid lockToken);
    [EventAttribute("26")]
private void DeadLetterMessageCompleteCore(string identifier, string lockToken);
    [NonEventAttribute]
public virtual void DeadLetterMessageException(string identifier, string exception, Guid lockToken);
    [EventAttribute("27")]
private void DeadLetterMessageExceptionCore(string identifier, string exception, string lockToken);
    [NonEventAttribute]
public virtual void DeleteMessagesStart(string identifier, int maxMessages, DateTimeOffset enqueuedTimeUtcOlderThan);
    [EventAttribute("116")]
private void DeleteMessagesStartCore(string identifier, int messageCount, string enqueuedTimeUtcOlderThan);
    [NonEventAttribute]
public virtual void DeleteMessagesComplete(string identifier, int messagesDeleted);
    [EventAttribute("117")]
private void DeleteMessagesCompleteCore(string identifier, int messagesDeleted);
    [NonEventAttribute]
public virtual void DeleteMessagesException(string identifier, string exception);
    [EventAttribute("118")]
private void DeleteMessagesExceptionCore(string identifier, string exception);
    [NonEventAttribute]
public virtual void PurgeMessagesStart(string identifier, DateTimeOffset enqueuedTimeUtcOlderThan);
    [EventAttribute("119")]
private void PurgeMessagesStartCore(string identifier, string enqueuedTimeUtcOlderThan);
    [NonEventAttribute]
public virtual void PurgeMessagesComplete(string identifier, int messagesPurged);
    [EventAttribute("120")]
private void PurgeMessagesCompleteCore(string identifier, int messagesPurged);
    [NonEventAttribute]
public virtual void PurgeMessagesException(string identifier, string exception);
    [EventAttribute("121")]
private void PurgeMessagesExceptionCore(string identifier, string exception);
    [NonEventAttribute]
public virtual void RenewMessageLockStart(string identifier, int messageCount, Guid lockToken);
    [EventAttribute("31")]
private void RenewMessageLockStartCore(string identifier, int messageCount, string lockToken);
    [NonEventAttribute]
public virtual void RenewMessageLockComplete(string identifier, Guid lockToken);
    [EventAttribute("32")]
private void RenewMessageLockCompleteCore(string identifier, string lockToken);
    [NonEventAttribute]
public virtual void RenewMessageLockException(string identifier, string exception, Guid lockToken);
    [EventAttribute("33")]
private void RenewMessageLockExceptionCore(string identifier, string exception, string lockToken);
    [EventAttribute("47")]
public virtual void RenewSessionLockStart(string identifier, string sessionId);
    [EventAttribute("48")]
public virtual void RenewSessionLockComplete(string identifier, string sessionId);
    [EventAttribute("49")]
public virtual void RenewSessionLockException(string identifier, string exception, string sessionId);
    [EventAttribute("62")]
public virtual void GetSessionStateStart(string identifiers, string sessionId);
    [EventAttribute("63")]
public virtual void GetSessionStateComplete(string identifier, string sessionId);
    [EventAttribute("64")]
public virtual void GetSessionStateException(string identifier, string exception, string sessionId);
    [EventAttribute("65")]
public virtual void SetSessionStateStart(string identifiers, string sessionId);
    [EventAttribute("66")]
public virtual void SetSessionStateComplete(string identifier, string sessionId);
    [EventAttribute("67")]
public virtual void SetSessionStateException(string identifier, string exception, string sessionId);
    [EventAttribute("50")]
public virtual void StartProcessingStart(string identifier);
    [EventAttribute("51")]
public virtual void StartProcessingComplete(string identifier);
    [EventAttribute("52")]
public virtual void StartProcessingException(string identifier, string exception);
    [EventAttribute("53")]
public virtual void StopProcessingStart(string identifier);
    [EventAttribute("54")]
public virtual void StopProcessingComplete(string identifier);
    [EventAttribute("55")]
public virtual void StopProcessingException(string identifier, string exception);
    [EventAttribute("113")]
public virtual void ProcessorStoppingCancellationWarning(string identifier, string exception);
    [NonEventAttribute]
public virtual void ProcessorRenewMessageLockStart(string identifier, int messageCount, Guid lockToken);
    [EventAttribute("56")]
private void ProcessorRenewMessageLockStartCore(string identifier, int messageCount, string lockToken);
    [NonEventAttribute]
public virtual void ProcessorRenewMessageLockComplete(string identifier, Guid lockToken);
    [EventAttribute("57")]
private void ProcessorRenewMessageLockCompleteCore(string identifier, string lockToken);
    [NonEventAttribute]
public virtual void ProcessorRenewMessageLockException(string identifier, string exception, Guid lockToken);
    [EventAttribute("58")]
private void ProcessorRenewMessageLockExceptionCore(string identifier, string exception, string lockToken);
    [EventAttribute("59")]
public virtual void ProcessorRenewSessionLockStart(string identifier, string sessionId);
    [EventAttribute("60")]
public virtual void ProcessorRenewSessionLockComplete(string identifier, string sessionId);
    [EventAttribute("61")]
public virtual void ProcessorRenewSessionLockException(string identifier, string exception, string sessionId);
    [EventAttribute("94")]
public void ProcessorErrorHandlerThrewException(string exception, string identifier);
    [NonEventAttribute]
public void ProcessorMessageHandlerStart(string identifier, long sequenceNumber, Guid lockToken);
    [EventAttribute("102")]
private void ProcessorMessageHandlerStartCore(string identifier, long sequenceNumber, string lockToken);
    [NonEventAttribute]
public void ProcessorMessageHandlerComplete(string identifier, long sequenceNumber, Guid lockToken);
    [EventAttribute("103")]
private void ProcessorMessageHandlerCompleteCore(string identifier, long sequenceNumber, string lockToken);
    [NonEventAttribute]
public void ProcessorMessageHandlerException(string identifier, long sequenceNumber, string exception, Guid lockToken);
    [EventAttribute("104")]
private void ProcessorMessageHandlerExceptionCore(string identifier, long sequenceNumber, string exception, string lockToken);
    [NonEventAttribute]
private void ProcessorMessageHandlerExceptionCore(int eventId, string identifier, long sequenceNumber, string exception, string lockToken);
    [EventAttribute("108")]
public void ProcessorClientClosedException(string identifier);
    [EventAttribute("110")]
public void ProcessorStoppingReceiveCanceled(string identifier, string exception);
    [EventAttribute("111")]
public void ProcessorStoppingAcceptSessionCanceled(string fullyQualifiedNamespace, string entityPath, string exception);
    [EventAttribute("109")]
public virtual void ProcessorAcceptSessionTimeout(string fullyQualifiedNamespace, string entityPath, string exception);
    [EventAttribute("68")]
public virtual void CreateRuleStart(string identifiers, string ruleName);
    [EventAttribute("69")]
public virtual void CreateRuleComplete(string identifier, string ruleName);
    [EventAttribute("70")]
public virtual void CreateRuleException(string identifier, string exception, string ruleName);
    [EventAttribute("71")]
public virtual void DeleteRuleStart(string identifiers, string ruleName);
    [EventAttribute("72")]
public virtual void DeleteRuleComplete(string identifier, string ruleName);
    [EventAttribute("73")]
public virtual void DeleteRuleException(string identifier, string exception, string ruleName);
    [EventAttribute("74")]
public virtual void GetRulesStart(string identifiers);
    [EventAttribute("75")]
public virtual void GetRulesComplete(string identifier);
    [EventAttribute("76")]
public virtual void GetRulesException(string identifier, string exception);
    [EventAttribute("37")]
public virtual void LinkStateLost(string identifier, string receiveLinkName, string receiveLinkState, bool isSessionReceiver, string exception);
    [NonEventAttribute]
private void LinkStateLostCore(int eventId, string identifier, string receiveLinkName, string receiveLinkState, bool isSessionReceiver, string exception);
    [NonEventAttribute]
public virtual void ReceiveLinkClosed(string identifier, string sessionId, object receiver);
    [EventAttribute("38")]
public virtual void ReceiveLinkClosedCore(string identifier, string sessionId, string linkException);
    [EventAttribute("39")]
public virtual void AmqpLinkAuthorizationRefreshStart(string identifier, string endpoint);
    [EventAttribute("40")]
public virtual void AmqpLinkAuthorizationRefreshComplete(string identifier, string endpoint);
    [EventAttribute("41")]
public virtual void AmqpLinkAuthorizationRefreshError(string identifier, string endpoint, string errorMessage);
    [EventAttribute("80")]
public virtual void CreateSendLinkStart(string identifier);
    [EventAttribute("81")]
public virtual void CreateSendLinkComplete(string identifier);
    [EventAttribute("82")]
public virtual void CreateSendLinkException(string identifier, string exception);
    [NonEventAttribute]
public virtual void SendLinkClosed(string identifier, object sender);
    [EventAttribute("100")]
public virtual void SendLinkClosedCore(string identifier, string linkException);
    [EventAttribute("83")]
public virtual void CreateReceiveLinkStart(string identifier);
    [EventAttribute("84")]
public virtual void CreateReceiveLinkComplete(string identifier, string sessionId);
    [EventAttribute("85")]
public virtual void CreateReceiveLinkException(string identifier, string exception);
    [EventAttribute("86")]
public virtual void CreateManagementLinkStart(string identifier);
    [EventAttribute("87")]
public virtual void CreateManagementLinkComplete(string identifier);
    [EventAttribute("88")]
public virtual void CreateManagementLinkException(string identifier, string exception);
    [NonEventAttribute]
public virtual void ManagementLinkClosed(string identifier, object managementLink);
    [EventAttribute("101")]
public virtual void ManagementLinkClosedCore(string identifier, string linkException);
    [EventAttribute("105")]
public virtual void RequestAuthorizationStart(string identifier, string endpoint);
    [EventAttribute("106")]
public virtual void RequestAuthorizationComplete(string identifier, string endpoint, string expiration);
    [EventAttribute("107")]
public virtual void RequestAuthorizationException(string identifier, string endpoint, string exception);
    [EventAttribute("43")]
public virtual void RunOperationExceptionEncountered(string exception);
    [EventAttribute("114")]
public virtual void RunOperationExceptionEncounteredVerbose(string exception);
    [NonEventAttribute]
public virtual void ClientCreateStart(Type clientType, string fullyQualifiedNamespace, string entityName);
    [EventAttribute("77")]
public virtual void ClientCreateStartCore(string clientType, string fullyQualifiedNamespace, string entityName);
    [NonEventAttribute]
public virtual void ClientCreateComplete(Type clientType, string identifier);
    [EventAttribute("78")]
public virtual void ClientCreateCompleteCore(string clientType, string identifier);
    [NonEventAttribute]
public virtual void ClientCreateException(Type clientType, string fullyQualifiedNamespace, string entityPath, Exception exception);
    [EventAttribute("79")]
public virtual void ClientCreateExceptionCore(string clientType, string fullyQualifiedNamespace, string entityPath, string exception);
    [NonEventAttribute]
public virtual void ClientCloseStart(Type clientType, string identifier);
    [EventAttribute("44")]
public virtual void ClientCloseStartCore(string clientType, string identifier);
    [NonEventAttribute]
public virtual void ClientCloseComplete(Type clientType, string identifier);
    [EventAttribute("45")]
public virtual void ClientCloseCompleteCore(string clientType, string identifier);
    [NonEventAttribute]
public virtual void ClientCloseException(Type clientType, string identifier, Exception exception);
    [EventAttribute("46")]
public virtual void ClientCloseExceptionCore(string clientType, string identifier, string exception);
    [EventAttribute("89")]
public void TransactionInitializeException(string transactionId, string exception);
    [NonEventAttribute]
public void TransactionDeclared(string localTransactionId, ArraySegment`1<byte> amqpTransactionId);
    [EventAttribute("90")]
public void TransactionDeclared(string transactionId, string amqpTransactionId);
    [NonEventAttribute]
public void TransactionDischarged(string localTransactionId, ArraySegment`1<byte> amqpTransactionId, bool rollback);
    [EventAttribute("91")]
public void TransactionDischarged(string transactionId, string amqpTransactionId, bool rollback);
    [NonEventAttribute]
private void TransactionDischargedCore(int eventId, string transactionId, string amqpTransactionId, bool rollback);
    [NonEventAttribute]
public void TransactionDischargeException(string transactionId, ArraySegment`1<byte> amqpTransactionId, Exception exception);
    [EventAttribute("92")]
public void TransactionDischargeException(string transactionId, string amqpTransactionId, string exception);
    [EventAttribute("93")]
public void CreateControllerException(string connectionManager, string exception);
    [NonEventAttribute]
public void ScheduleTaskFailed(Func`1<Task> task, Exception exception);
    [EventAttribute("95")]
public void ScheduleTaskFailed(string funcTargetName, string methodInfoName, string exception);
    [EventAttribute("42")]
public void ManagementSerializationException(string objectName, string details);
    [EventAttribute("99")]
public virtual void MaxMessagesExceedsPrefetch(string identifier, int prefetchCount, int maxMessages);
    [EventAttribute("112")]
public virtual void PartitionKeyOverwritten(string partitionKey, string sessionId, string messageId);
    [NonEventAttribute]
private void WriteEvent(int eventId, string arg1, int arg2, string arg3);
    [NonEventAttribute]
private void WriteEvent(int eventId, string arg1, long arg2, string arg3);
    [NonEventAttribute]
private void WriteEvent(int eventId, string arg1, string arg2, string arg3, string arg4);
}
internal static class Azure.Messaging.ServiceBus.EntityNameFormatter : object {
    private static string PathDelimiter;
    private static string SubscriptionsSubPath;
    private static string RulesSubPath;
    private static string SubQueuePrefix;
    private static string DeadLetterQueueSuffix;
    private static string DeadLetterQueueName;
    private static string Transfer;
    private static string TransferDeadLetterQueueName;
    public static string FormatEntityPath(string entityPath, SubQueue subQueue);
    public static string FormatDeadLetterPath(string entityPath);
    public static string FormatSubQueuePath(string entityPath, string subQueueName);
    public static string FormatSubscriptionPath(string topicPath, string subscriptionName);
    public static string FormatRulePath(string topicPath, string subscriptionName, string ruleName);
    public static string FormatTransferDeadLetterPath(string entityPath);
    internal static void CheckValidQueueName(string queueName, string paramName);
    internal static void CheckValidTopicName(string topicName, string paramName);
    internal static void CheckValidSubscriptionName(string subscriptionName, string paramName);
    internal static void CheckValidRuleName(string ruleName, string paramName);
    private static void CheckValidEntityName(string entityName, int maxEntityNameLength, bool allowSeparator, string paramName);
    private static string GetPathWithoutBaseUri(string entityName);
}
internal enum Azure.Messaging.ServiceBus.LinkCloseMode : Enum {
    public int value__;
    public static LinkCloseMode Detach;
}
public class Azure.Messaging.ServiceBus.MessageLockLostEventArgs : object {
    [CompilerGeneratedAttribute]
private ServiceBusReceivedMessage <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    public ServiceBusReceivedMessage Message { get; }
    public Exception Exception { get; }
    public MessageLockLostEventArgs(ServiceBusReceivedMessage message, Exception exception);
    [CompilerGeneratedAttribute]
public ServiceBusReceivedMessage get_Message();
    [CompilerGeneratedAttribute]
public Exception get_Exception();
}
internal static class Azure.Messaging.ServiceBus.Primitives.ClientInfo : object {
    internal static Assembly assembly;
    internal static string Product;
    internal static string Version;
    internal static string Framework;
    internal static string Platform;
    private static ClientInfo();
    internal static string GetPlatform();
    internal static Assembly GetAssesmbly();
    internal static string GetAssemblyAttributeValue(Assembly assembly, Func`2<T, string> getter);
}
internal class Azure.Messaging.ServiceBus.Primitives.ConcurrentExpiringSet`1 : object {
    private ConcurrentDictionary`2<TKey, DateTimeOffset> _dictionary;
    private ICollection`1<KeyValuePair`2<TKey, DateTimeOffset>> _dictionaryAsCollection;
    private CancellationTokenSource _tokenSource;
    private TaskCompletionSource`1 modreq(System.Runtime.CompilerServices.IsVolatile) _cleanupTaskCompletionSource;
    private int _disposeSignaled;
    [CompilerGeneratedAttribute]
private bool <IsDisposed>k__BackingField;
    private static TimeSpan DelayBetweenCleanups;
    public bool IsDisposed { get; private set; }
    private static ConcurrentExpiringSet`1();
    [CompilerGeneratedAttribute]
public bool get_IsDisposed();
    [CompilerGeneratedAttribute]
private void set_IsDisposed(bool value);
    public void AddOrUpdate(TKey key, DateTimeOffset expiration);
    public bool Contains(TKey key);
    public sealed virtual void Dispose();
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.Primitives.ConcurrentExpiringSet`1/<CollectExpiredEntriesAsync>d__14")]
public Task CollectExpiredEntriesAsync(CancellationToken token);
    private void ThrowIfDisposed();
}
internal enum Azure.Messaging.ServiceBus.Primitives.DispositionStatus : Enum {
    public int value__;
    public static DispositionStatus Completed;
    public static DispositionStatus Defered;
    public static DispositionStatus Suspended;
    public static DispositionStatus Abandoned;
    public static DispositionStatus Renewed;
}
[DefaultMemberAttribute("Item")]
internal class Azure.Messaging.ServiceBus.Primitives.PropertyDictionary : object {
    private IDictionary`2<string, object> _inner;
    public ICollection`1<string> Keys { get; }
    public ICollection`1<object> Values { get; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public object Item { get; public set; }
    public PropertyDictionary(IDictionary`2<string, object> container);
    public sealed virtual ICollection`1<string> get_Keys();
    public sealed virtual ICollection`1<object> get_Values();
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual object get_Item(string key);
    public sealed virtual void set_Item(string key, object value);
    public sealed virtual void Add(string key, object value);
    public sealed virtual bool ContainsKey(string key);
    public sealed virtual bool Remove(string key);
    public sealed virtual bool TryGetValue(string key, Object& value);
    public sealed virtual void Add(KeyValuePair`2<string, object> item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(KeyValuePair`2<string, object> item);
    public sealed virtual void CopyTo(KeyValuePair`2[] array, int arrayIndex);
    public sealed virtual bool Remove(KeyValuePair`2<string, object> item);
    public sealed virtual IEnumerator`1<KeyValuePair`2<string, object>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private static bool IsSupportedObject(object value);
    internal PropertyDictionary Clone();
}
[ExtensionAttribute]
internal static class Azure.Messaging.ServiceBus.Primitives.StringUtility : object {
    public static string GetFormattedLockTokens(IEnumerable`1<Guid> lockTokens);
    public static string GetFormattedSequenceNumbers(IEnumerable`1<long> sequenceNumbers);
    [ExtensionAttribute]
public static string FormatForUser(string format, Object[] args);
}
public class Azure.Messaging.ServiceBus.ProcessErrorEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    [CompilerGeneratedAttribute]
private ServiceBusErrorSource <ErrorSource>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FullyQualifiedNamespace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Identifier>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EntityPath>k__BackingField;
    [CompilerGeneratedAttribute]
private CancellationToken <CancellationToken>k__BackingField;
    public Exception Exception { get; }
    public ServiceBusErrorSource ErrorSource { get; }
    public string FullyQualifiedNamespace { get; }
    public string Identifier { get; }
    public string EntityPath { get; }
    public CancellationToken CancellationToken { get; }
    public ProcessErrorEventArgs(Exception exception, ServiceBusErrorSource errorSource, string fullyQualifiedNamespace, string entityPath, string identifier, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public ProcessErrorEventArgs(Exception exception, ServiceBusErrorSource errorSource, string fullyQualifiedNamespace, string entityPath, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
public Exception get_Exception();
    [CompilerGeneratedAttribute]
public ServiceBusErrorSource get_ErrorSource();
    [CompilerGeneratedAttribute]
public string get_FullyQualifiedNamespace();
    [CompilerGeneratedAttribute]
public string get_Identifier();
    [CompilerGeneratedAttribute]
public string get_EntityPath();
    [CompilerGeneratedAttribute]
public CancellationToken get_CancellationToken();
}
public class Azure.Messaging.ServiceBus.ProcessMessageEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private ServiceBusReceivedMessage <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private CancellationToken <CancellationToken>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<MessageLockLostEventArgs, Task> MessageLockLostAsync;
    [CompilerGeneratedAttribute]
private CancellationTokenSource <MessageLockLostCancellationSource>k__BackingField;
    [CompilerGeneratedAttribute]
private CancellationToken <MessageLockCancellationToken>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <LockLostException>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Identifier>k__BackingField;
    private ServiceBusReceiver _receiver;
    private ProcessorReceiveActions _receiveActions;
    public ServiceBusReceivedMessage Message { get; }
    public CancellationToken CancellationToken { get; }
    internal CancellationTokenSource MessageLockLostCancellationSource { get; }
    internal CancellationToken MessageLockCancellationToken { get; }
    internal Exception LockLostException { get; internal set; }
    public string EntityPath { get; }
    public string Identifier { get; }
    public string FullyQualifiedNamespace { get; }
    internal ConcurrentDictionary`2<ServiceBusReceivedMessage, byte> Messages { get; }
    [EditorBrowsableAttribute("1")]
public ProcessMessageEventArgs(ServiceBusReceivedMessage message, ServiceBusReceiver receiver, CancellationToken cancellationToken);
    public ProcessMessageEventArgs(ServiceBusReceivedMessage message, ServiceBusReceiver receiver, string identifier, CancellationToken cancellationToken);
    internal ProcessMessageEventArgs(ServiceBusReceivedMessage message, ReceiverManager manager, CancellationToken cancellationToken);
    internal ProcessMessageEventArgs(ServiceBusReceivedMessage message, ReceiverManager manager, string identifier, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
public ServiceBusReceivedMessage get_Message();
    [CompilerGeneratedAttribute]
public CancellationToken get_CancellationToken();
    [CompilerGeneratedAttribute]
public void add_MessageLockLostAsync(Func`2<MessageLockLostEventArgs, Task> value);
    [CompilerGeneratedAttribute]
public void remove_MessageLockLostAsync(Func`2<MessageLockLostEventArgs, Task> value);
    [CompilerGeneratedAttribute]
internal CancellationTokenSource get_MessageLockLostCancellationSource();
    [CompilerGeneratedAttribute]
internal CancellationToken get_MessageLockCancellationToken();
    [CompilerGeneratedAttribute]
internal Exception get_LockLostException();
    [CompilerGeneratedAttribute]
internal void set_LockLostException(Exception value);
    public string get_EntityPath();
    [CompilerGeneratedAttribute]
public string get_Identifier();
    public string get_FullyQualifiedNamespace();
    internal ConcurrentDictionary`2<ServiceBusReceivedMessage, byte> get_Messages();
    protected internal virtual Task OnMessageLockLostAsync(MessageLockLostEventArgs args);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.ProcessMessageEventArgs/<AbandonMessageAsync>d__35")]
public virtual Task AbandonMessageAsync(ServiceBusReceivedMessage message, IDictionary`2<string, object> propertiesToModify, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.ProcessMessageEventArgs/<CompleteMessageAsync>d__36")]
public virtual Task CompleteMessageAsync(ServiceBusReceivedMessage message, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.ProcessMessageEventArgs/<DeadLetterMessageAsync>d__37")]
public virtual Task DeadLetterMessageAsync(ServiceBusReceivedMessage message, string deadLetterReason, string deadLetterErrorDescription, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.ProcessMessageEventArgs/<DeadLetterMessageAsync>d__38")]
public virtual Task DeadLetterMessageAsync(ServiceBusReceivedMessage message, IDictionary`2<string, object> propertiesToModify, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.ProcessMessageEventArgs/<DeadLetterMessageAsync>d__39")]
public virtual Task DeadLetterMessageAsync(ServiceBusReceivedMessage message, IDictionary`2<string, object> propertiesToModify, string deadLetterReason, string deadLetterErrorDescription, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.ProcessMessageEventArgs/<DeferMessageAsync>d__40")]
public virtual Task DeferMessageAsync(ServiceBusReceivedMessage message, IDictionary`2<string, object> propertiesToModify, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.ProcessMessageEventArgs/<RenewMessageLockAsync>d__41")]
public virtual Task RenewMessageLockAsync(ServiceBusReceivedMessage message, CancellationToken cancellationToken);
    public virtual ProcessorReceiveActions GetReceiveActions();
    internal void EndExecutionScope();
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.ProcessMessageEventArgs/<CancelMessageLockRenewalAsync>d__44")]
internal Task CancelMessageLockRenewalAsync();
    internal CancellationTokenRegistration RegisterMessageLockLostHandler();
    [CompilerGeneratedAttribute]
private void <RegisterMessageLockLostHandler>b__45_0();
}
public class Azure.Messaging.ServiceBus.ProcessorReceiveActions : object {
    private bool _callbackCompleted;
    private ReceiverManager _manager;
    private ServiceBusReceiver _receiver;
    private CancellationTokenSource _lockRenewalCancellationSource;
    private ConcurrentDictionary`2<Task, byte> _renewalTasks;
    private bool _autoRenew;
    private ProcessMessageEventArgs _processMessageEventArgs;
    [CompilerGeneratedAttribute]
private ConcurrentDictionary`2<ServiceBusReceivedMessage, byte> <Messages>k__BackingField;
    internal ConcurrentDictionary`2<ServiceBusReceivedMessage, byte> Messages { get; }
    internal ProcessorReceiveActions(EventArgs args, ReceiverManager manager, bool autoRenewMessageLocks);
    [CompilerGeneratedAttribute]
internal ConcurrentDictionary`2<ServiceBusReceivedMessage, byte> get_Messages();
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.ProcessorReceiveActions/<ReceiveMessagesAsync>d__12")]
public virtual Task`1<IReadOnlyList`1<ServiceBusReceivedMessage>> ReceiveMessagesAsync(int maxMessages, Nullable`1<TimeSpan> maxWaitTime, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.ProcessorReceiveActions/<ReceiveDeferredMessagesAsync>d__13")]
public virtual Task`1<IReadOnlyList`1<ServiceBusReceivedMessage>> ReceiveDeferredMessagesAsync(IEnumerable`1<long> sequenceNumbers, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.ProcessorReceiveActions/<PeekMessagesAsync>d__14")]
public virtual Task`1<IReadOnlyList`1<ServiceBusReceivedMessage>> PeekMessagesAsync(int maxMessages, Nullable`1<long> fromSequenceNumber, CancellationToken cancellationToken);
    private IReadOnlyList`1<ServiceBusReceivedMessage> TrackMessagesAsReceived(IReadOnlyList`1<ServiceBusReceivedMessage> messages);
    internal void EndExecutionScope();
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.ProcessorReceiveActions/<CancelMessageLockRenewalAsync>d__17")]
internal Task CancelMessageLockRenewalAsync();
    private void ValidateCallbackInScope();
}
public class Azure.Messaging.ServiceBus.ProcessSessionEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private CancellationToken <CancellationToken>k__BackingField;
    private ServiceBusSessionReceiver _sessionReceiver;
    private SessionReceiverManager _manager;
    [CompilerGeneratedAttribute]
private string <Identifier>k__BackingField;
    public CancellationToken CancellationToken { get; }
    public string SessionId { get; }
    public string Identifier { get; }
    public DateTimeOffset SessionLockedUntil { get; }
    public string EntityPath { get; }
    public string FullyQualifiedNamespace { get; }
    [EditorBrowsableAttribute("1")]
public ProcessSessionEventArgs(ServiceBusSessionReceiver receiver, CancellationToken cancellationToken);
    public ProcessSessionEventArgs(ServiceBusSessionReceiver receiver, string identifier, CancellationToken cancellationToken);
    internal ProcessSessionEventArgs(SessionReceiverManager manager, CancellationToken cancellationToken);
    internal ProcessSessionEventArgs(SessionReceiverManager manager, string identifier, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
public CancellationToken get_CancellationToken();
    public string get_SessionId();
    [CompilerGeneratedAttribute]
public string get_Identifier();
    public DateTimeOffset get_SessionLockedUntil();
    public string get_EntityPath();
    public string get_FullyQualifiedNamespace();
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.ProcessSessionEventArgs/<GetSessionStateAsync>d__20")]
public virtual Task`1<BinaryData> GetSessionStateAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.ProcessSessionEventArgs/<SetSessionStateAsync>d__21")]
public virtual Task SetSessionStateAsync(BinaryData sessionState, CancellationToken cancellationToken);
    public virtual void ReleaseSession();
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.ProcessSessionEventArgs/<RenewSessionLockAsync>d__23")]
public virtual Task RenewSessionLockAsync(CancellationToken cancellationToken);
}
public class Azure.Messaging.ServiceBus.ProcessSessionMessageEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private ServiceBusReceivedMessage <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private CancellationToken <CancellationToken>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<SessionLockLostEventArgs, Task> SessionLockLostAsync;
    private ServiceBusSessionReceiver _sessionReceiver;
    private SessionReceiverManager _manager;
    private ProcessorReceiveActions _receiveActions;
    [CompilerGeneratedAttribute]
private string <Identifier>k__BackingField;
    public ServiceBusReceivedMessage Message { get; }
    public CancellationToken CancellationToken { get; }
    internal ConcurrentDictionary`2<ServiceBusReceivedMessage, byte> Messages { get; }
    public string SessionId { get; }
    public DateTimeOffset SessionLockedUntil { get; }
    public string EntityPath { get; }
    public string Identifier { get; }
    public string FullyQualifiedNamespace { get; }
    [EditorBrowsableAttribute("1")]
public ProcessSessionMessageEventArgs(ServiceBusReceivedMessage message, ServiceBusSessionReceiver receiver, CancellationToken cancellationToken);
    public ProcessSessionMessageEventArgs(ServiceBusReceivedMessage message, ServiceBusSessionReceiver receiver, string identifier, CancellationToken cancellationToken);
    internal ProcessSessionMessageEventArgs(ServiceBusReceivedMessage message, SessionReceiverManager manager, string identifier, CancellationToken cancellationToken);
    internal ProcessSessionMessageEventArgs(ServiceBusReceivedMessage message, SessionReceiverManager manager, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
public ServiceBusReceivedMessage get_Message();
    [CompilerGeneratedAttribute]
public CancellationToken get_CancellationToken();
    [CompilerGeneratedAttribute]
public void add_SessionLockLostAsync(Func`2<SessionLockLostEventArgs, Task> value);
    [CompilerGeneratedAttribute]
public void remove_SessionLockLostAsync(Func`2<SessionLockLostEventArgs, Task> value);
    protected internal virtual Task OnSessionLockLostAsync(SessionLockLostEventArgs args);
    internal ConcurrentDictionary`2<ServiceBusReceivedMessage, byte> get_Messages();
    public string get_SessionId();
    public DateTimeOffset get_SessionLockedUntil();
    public string get_EntityPath();
    [CompilerGeneratedAttribute]
public string get_Identifier();
    public string get_FullyQualifiedNamespace();
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.ProcessSessionMessageEventArgs/<GetSessionStateAsync>d__30")]
public virtual Task`1<BinaryData> GetSessionStateAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.ProcessSessionMessageEventArgs/<SetSessionStateAsync>d__31")]
public virtual Task SetSessionStateAsync(BinaryData sessionState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.ProcessSessionMessageEventArgs/<AbandonMessageAsync>d__32")]
public virtual Task AbandonMessageAsync(ServiceBusReceivedMessage message, IDictionary`2<string, object> propertiesToModify, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.ProcessSessionMessageEventArgs/<CompleteMessageAsync>d__33")]
public virtual Task CompleteMessageAsync(ServiceBusReceivedMessage message, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.ProcessSessionMessageEventArgs/<DeadLetterMessageAsync>d__34")]
public virtual Task DeadLetterMessageAsync(ServiceBusReceivedMessage message, string deadLetterReason, string deadLetterErrorDescription, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.ProcessSessionMessageEventArgs/<DeadLetterMessageAsync>d__35")]
public virtual Task DeadLetterMessageAsync(ServiceBusReceivedMessage message, IDictionary`2<string, object> propertiesToModify, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.ProcessSessionMessageEventArgs/<DeadLetterMessageAsync>d__36")]
public virtual Task DeadLetterMessageAsync(ServiceBusReceivedMessage message, Dictionary`2<string, object> propertiesToModify, string deadLetterReason, string deadLetterErrorDescription, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.ProcessSessionMessageEventArgs/<DeferMessageAsync>d__37")]
public virtual Task DeferMessageAsync(ServiceBusReceivedMessage message, IDictionary`2<string, object> propertiesToModify, CancellationToken cancellationToken);
    public virtual void ReleaseSession();
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.ProcessSessionMessageEventArgs/<RenewSessionLockAsync>d__39")]
public virtual Task RenewSessionLockAsync(CancellationToken cancellationToken);
    public virtual ProcessorReceiveActions GetReceiveActions();
    internal void EndExecutionScope();
    internal CancellationTokenRegistration RegisterSessionLockLostHandler();
    [CompilerGeneratedAttribute]
private void <RegisterSessionLockLostHandler>b__42_0();
}
internal class Azure.Messaging.ServiceBus.ReceiverManager : object {
    [CompilerGeneratedAttribute]
private ServiceBusReceiver <Receiver>k__BackingField;
    protected ServiceBusProcessor Processor;
    protected Nullable`1<TimeSpan> _maxReceiveWaitTime;
    private ServiceBusReceiverOptions _receiverOptions;
    protected ServiceBusProcessorOptions ProcessorOptions;
    private MessagingClientDiagnostics _clientDiagnostics;
    internal ServiceBusReceiver Receiver { get; private set; }
    protected bool AutoRenewLock { get; }
    public ReceiverManager(ServiceBusProcessor processor, MessagingClientDiagnostics clientDiagnostics, bool isSession);
    [CompilerGeneratedAttribute]
internal virtual ServiceBusReceiver get_Receiver();
    [CompilerGeneratedAttribute]
private void set_Receiver(ServiceBusReceiver value);
    protected bool get_AutoRenewLock();
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.ReceiverManager/<CloseReceiverIfNeeded>d__12")]
public virtual Task CloseReceiverIfNeeded(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.ReceiverManager/<ReceiveAndProcessMessagesAsync>d__13")]
public virtual Task ReceiveAndProcessMessagesAsync(CancellationToken cancellationToken);
    public virtual Task CancelAsync();
    public virtual void UpdatePrefetchCount(int prefetchCount);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.ReceiverManager/<ProcessOneMessageWithinScopeAsync>d__16")]
protected Task ProcessOneMessageWithinScopeAsync(ServiceBusReceivedMessage message, string activityName, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.ReceiverManager/<ProcessOneMessage>d__17")]
private Task ProcessOneMessage(ServiceBusReceivedMessage triggerMessage, CancellationToken cancellationToken);
    private static ICollection`1<ServiceBusReceivedMessage> GetProcessedMessages(EventArgs args);
    internal bool ShouldAutoRenewMessageLock();
    protected virtual EventArgs ConstructEventArgs(ServiceBusReceivedMessage message, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.ReceiverManager/<OnMessageHandler>d__21")]
protected virtual Task OnMessageHandler(EventArgs args);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.ReceiverManager/<RenewMessageLockAsync>d__22")]
internal Task RenewMessageLockAsync(ProcessMessageEventArgs args, ServiceBusReceivedMessage message, CancellationTokenSource cancellationTokenSource);
    private static void ThrowIfSessionLockLost(Exception exception, ServiceBusErrorSource errorSource);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.ReceiverManager/<HandleRenewLockException>d__24")]
protected Task HandleRenewLockException(Exception ex, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.ReceiverManager/<RaiseExceptionReceived>d__25")]
protected virtual Task RaiseExceptionReceived(ProcessErrorEventArgs eventArgs);
    protected static TimeSpan CalculateRenewDelay(DateTimeOffset lockedUntil);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Azure.Messaging.ServiceBus.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string AmqpFieldSessionId { get; }
    internal static string AmqpMessageSizeExceeded { get; }
    internal static string ArgumentInvalidCombination { get; }
    internal static string ArgumentMustBePositive { get; }
    internal static string ArgumentNullOrWhiteSpace { get; }
    internal static string ArgumentStringTooBig { get; }
    internal static string BrokeredMessageListIsNullOrEmpty { get; }
    internal static string CannotLockMessageOnSessionEntity { get; }
    internal static string CannotRegisterNonSessionEventHandlerWhenUsingSession { get; }
    internal static string CannotRegisterSessionEventHandlerWhenNotUsingSessions { get; }
    internal static string CannotSendAnEmptyMessage { get; }
    internal static string CannotStartMessageProcessorWithoutHandler { get; }
    internal static string CharacterReservedForUriScheme { get; }
    internal static string ClosedInstanceCannotPerformOperation { get; }
    internal static string CouldNotAcquireAccessToken { get; }
    internal static string CouldNotCreateLink { get; }
    internal static string DefaultServerBusyException { get; }
    internal static string DisposedConnectionMessageProcessorMustStop { get; }
    internal static string ExponentialRetryBackoffRange { get; }
    internal static string FailedToSerializeUnsupportedType { get; }
    internal static string HandlerHasAlreadyBeenAssigned { get; }
    internal static string HandlerHasNotBeenAssigned { get; }
    internal static string InvalidAmqpMessageBodyType { get; }
    internal static string InvalidAmqpMessageProperty { get; }
    internal static string InvalidAmqpMessageValueBody { get; }
    internal static string InvalidCharacterInEntityName { get; }
    internal static string InvalidConnectionString { get; }
    internal static string InvalidEncoding { get; }
    internal static string InvalidEndpointAddress { get; }
    internal static string InvalidFullyQualifiedNamespace { get; }
    internal static string InvalidSharedAccessSignature { get; }
    internal static string InvalidTransportType { get; }
    internal static string ListOfLockTokensCannotBeEmpty { get; }
    internal static string MaxPermittedLengthExceeded { get; }
    internal static string MessageBatchIsLocked { get; }
    internal static string MessageHandlerAlreadyRegistered { get; }
    internal static string MessageLockLost { get; }
    internal static string MessageProcessorIsNotRunning { get; }
    internal static string MessageSizeExceeded { get; }
    internal static string MissingConnectionInformation { get; }
    internal static string NotSupportedPropertyType { get; }
    internal static string OnlyOneEntityNameMayBeSpecified { get; }
    internal static string OnlyOneSharedAccessAuthorizationMayBeSpecified { get; }
    internal static string OperationNotSupported { get; }
    internal static string PeekLockModeRequired { get; }
    internal static string PluginAlreadyRegistered { get; }
    internal static string ProxyMustUseWebSockets { get; }
    internal static string RuleFilterNotSupported { get; }
    internal static string RunningMessageProcessorCannotPerformOperation { get; }
    internal static string SendViaCannotBeUsedWithEntityInConnectionString { get; }
    internal static string SessionFilterMissing { get; }
    internal static string SessionHandlerAlreadyRegistered { get; }
    internal static string SessionLockExpiredOnMessageSession { get; }
    internal static string SharedAccessKeyIsRequired { get; }
    internal static string SharedKeyCredentialCannotGenerateTokens { get; }
    internal static string SqlRuleFilterStatmentTooLong { get; }
    internal static string TimeoutMustBeNonNegative { get; }
    internal static string TimeoutMustBePositive { get; }
    internal static string TimeoutMustBePositiveNonZero { get; }
    internal static string TokenMissingAudience { get; }
    internal static string TokenMissingExpiresOn { get; }
    internal static string TransactionReconnectionError { get; }
    internal static string UnknownConnectionType { get; }
    internal static string UnknownRetryMode { get; }
    internal static string UnsupportedCredential { get; }
    internal static string UnsupportedTransportEventType { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_AmqpFieldSessionId();
    internal static string get_AmqpMessageSizeExceeded();
    internal static string get_ArgumentInvalidCombination();
    internal static string get_ArgumentMustBePositive();
    internal static string get_ArgumentNullOrWhiteSpace();
    internal static string get_ArgumentStringTooBig();
    internal static string get_BrokeredMessageListIsNullOrEmpty();
    internal static string get_CannotLockMessageOnSessionEntity();
    internal static string get_CannotRegisterNonSessionEventHandlerWhenUsingSession();
    internal static string get_CannotRegisterSessionEventHandlerWhenNotUsingSessions();
    internal static string get_CannotSendAnEmptyMessage();
    internal static string get_CannotStartMessageProcessorWithoutHandler();
    internal static string get_CharacterReservedForUriScheme();
    internal static string get_ClosedInstanceCannotPerformOperation();
    internal static string get_CouldNotAcquireAccessToken();
    internal static string get_CouldNotCreateLink();
    internal static string get_DefaultServerBusyException();
    internal static string get_DisposedConnectionMessageProcessorMustStop();
    internal static string get_ExponentialRetryBackoffRange();
    internal static string get_FailedToSerializeUnsupportedType();
    internal static string get_HandlerHasAlreadyBeenAssigned();
    internal static string get_HandlerHasNotBeenAssigned();
    internal static string get_InvalidAmqpMessageBodyType();
    internal static string get_InvalidAmqpMessageProperty();
    internal static string get_InvalidAmqpMessageValueBody();
    internal static string get_InvalidCharacterInEntityName();
    internal static string get_InvalidConnectionString();
    internal static string get_InvalidEncoding();
    internal static string get_InvalidEndpointAddress();
    internal static string get_InvalidFullyQualifiedNamespace();
    internal static string get_InvalidSharedAccessSignature();
    internal static string get_InvalidTransportType();
    internal static string get_ListOfLockTokensCannotBeEmpty();
    internal static string get_MaxPermittedLengthExceeded();
    internal static string get_MessageBatchIsLocked();
    internal static string get_MessageHandlerAlreadyRegistered();
    internal static string get_MessageLockLost();
    internal static string get_MessageProcessorIsNotRunning();
    internal static string get_MessageSizeExceeded();
    internal static string get_MissingConnectionInformation();
    internal static string get_NotSupportedPropertyType();
    internal static string get_OnlyOneEntityNameMayBeSpecified();
    internal static string get_OnlyOneSharedAccessAuthorizationMayBeSpecified();
    internal static string get_OperationNotSupported();
    internal static string get_PeekLockModeRequired();
    internal static string get_PluginAlreadyRegistered();
    internal static string get_ProxyMustUseWebSockets();
    internal static string get_RuleFilterNotSupported();
    internal static string get_RunningMessageProcessorCannotPerformOperation();
    internal static string get_SendViaCannotBeUsedWithEntityInConnectionString();
    internal static string get_SessionFilterMissing();
    internal static string get_SessionHandlerAlreadyRegistered();
    internal static string get_SessionLockExpiredOnMessageSession();
    internal static string get_SharedAccessKeyIsRequired();
    internal static string get_SharedKeyCredentialCannotGenerateTokens();
    internal static string get_SqlRuleFilterStatmentTooLong();
    internal static string get_TimeoutMustBeNonNegative();
    internal static string get_TimeoutMustBePositive();
    internal static string get_TimeoutMustBePositiveNonZero();
    internal static string get_TokenMissingAudience();
    internal static string get_TokenMissingExpiresOn();
    internal static string get_TransactionReconnectionError();
    internal static string get_UnknownConnectionType();
    internal static string get_UnknownRetryMode();
    internal static string get_UnsupportedCredential();
    internal static string get_UnsupportedTransportEventType();
}
public class Azure.Messaging.ServiceBus.ServiceBusClient : object {
    private ServiceBusClientOptions _options;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _closed;
    [CompilerGeneratedAttribute]
private ServiceBusTransportType <TransportType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Identifier>k__BackingField;
    [CompilerGeneratedAttribute]
private ServiceBusEventSource <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private ServiceBusConnection <Connection>k__BackingField;
    public string FullyQualifiedNamespace { get; }
    public bool IsClosed { get; private set; }
    public ServiceBusTransportType TransportType { get; }
    public string Identifier { get; }
    internal ServiceBusEventSource Logger { get; internal set; }
    internal ServiceBusConnection Connection { get; }
    public ServiceBusClient(string connectionString);
    public ServiceBusClient(string connectionString, ServiceBusClientOptions options);
    public ServiceBusClient(string fullyQualifiedNamespace, AzureNamedKeyCredential credential, ServiceBusClientOptions options);
    public ServiceBusClient(string fullyQualifiedNamespace, AzureSasCredential credential, ServiceBusClientOptions options);
    public ServiceBusClient(string fullyQualifiedNamespace, TokenCredential credential);
    public ServiceBusClient(string fullyQualifiedNamespace, TokenCredential credential, ServiceBusClientOptions options);
    private ServiceBusClient(string fullyQualifiedNamespace, object credential, ServiceBusClientOptions options);
    public virtual string get_FullyQualifiedNamespace();
    public virtual bool get_IsClosed();
    private void set_IsClosed(bool value);
    [CompilerGeneratedAttribute]
public ServiceBusTransportType get_TransportType();
    [CompilerGeneratedAttribute]
public virtual string get_Identifier();
    [CompilerGeneratedAttribute]
internal ServiceBusEventSource get_Logger();
    [CompilerGeneratedAttribute]
internal void set_Logger(ServiceBusEventSource value);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.ServiceBusClient/<DisposeAsync>d__17")]
public virtual ValueTask DisposeAsync();
    [CompilerGeneratedAttribute]
internal ServiceBusConnection get_Connection();
    public virtual ServiceBusSender CreateSender(string queueOrTopicName);
    public virtual ServiceBusSender CreateSender(string queueOrTopicName, ServiceBusSenderOptions options);
    public virtual ServiceBusReceiver CreateReceiver(string queueName);
    public virtual ServiceBusReceiver CreateReceiver(string queueName, ServiceBusReceiverOptions options);
    public virtual ServiceBusReceiver CreateReceiver(string topicName, string subscriptionName);
    public virtual ServiceBusReceiver CreateReceiver(string topicName, string subscriptionName, ServiceBusReceiverOptions options);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.ServiceBusClient/<AcceptNextSessionAsync>d__35")]
public virtual Task`1<ServiceBusSessionReceiver> AcceptNextSessionAsync(string queueName, ServiceBusSessionReceiverOptions options, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.ServiceBusClient/<AcceptNextSessionAsync>d__36")]
public virtual Task`1<ServiceBusSessionReceiver> AcceptNextSessionAsync(string topicName, string subscriptionName, ServiceBusSessionReceiverOptions options, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.ServiceBusClient/<AcceptSessionAsync>d__37")]
public virtual Task`1<ServiceBusSessionReceiver> AcceptSessionAsync(string queueName, string sessionId, ServiceBusSessionReceiverOptions options, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.ServiceBusClient/<AcceptSessionAsync>d__38")]
public virtual Task`1<ServiceBusSessionReceiver> AcceptSessionAsync(string topicName, string subscriptionName, string sessionId, ServiceBusSessionReceiverOptions options, CancellationToken cancellationToken);
    public virtual ServiceBusProcessor CreateProcessor(string queueName);
    public virtual ServiceBusProcessor CreateProcessor(string queueName, ServiceBusProcessorOptions options);
    public virtual ServiceBusProcessor CreateProcessor(string topicName, string subscriptionName);
    public virtual ServiceBusProcessor CreateProcessor(string topicName, string subscriptionName, ServiceBusProcessorOptions options);
    public virtual ServiceBusSessionProcessor CreateSessionProcessor(string queueName, ServiceBusSessionProcessorOptions options);
    public virtual ServiceBusSessionProcessor CreateSessionProcessor(string topicName, string subscriptionName, ServiceBusSessionProcessorOptions options);
    public virtual ServiceBusRuleManager CreateRuleManager(string topicName, string subscriptionName);
    internal void ValidateEntityName(string entityName);
}
public class Azure.Messaging.ServiceBus.ServiceBusClientOptions : object {
    private ServiceBusRetryOptions _retryOptions;
    private TimeSpan _connectionIdleTimeout;
    [CompilerGeneratedAttribute]
private ServiceBusTransportType <TransportType>k__BackingField;
    [CompilerGeneratedAttribute]
private IWebProxy <WebProxy>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Identifier>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <CustomEndpointAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableCrossEntityTransactions>k__BackingField;
    public ServiceBusTransportType TransportType { get; public set; }
    public IWebProxy WebProxy { get; public set; }
    public string Identifier { get; public set; }
    public Uri CustomEndpointAddress { get; public set; }
    public TimeSpan ConnectionIdleTimeout { get; public set; }
    public ServiceBusRetryOptions RetryOptions { get; public set; }
    public bool EnableCrossEntityTransactions { get; public set; }
    [CompilerGeneratedAttribute]
public ServiceBusTransportType get_TransportType();
    [CompilerGeneratedAttribute]
public void set_TransportType(ServiceBusTransportType value);
    [CompilerGeneratedAttribute]
public IWebProxy get_WebProxy();
    [CompilerGeneratedAttribute]
public void set_WebProxy(IWebProxy value);
    [CompilerGeneratedAttribute]
public string get_Identifier();
    [CompilerGeneratedAttribute]
public void set_Identifier(string value);
    [CompilerGeneratedAttribute]
public Uri get_CustomEndpointAddress();
    [CompilerGeneratedAttribute]
public void set_CustomEndpointAddress(Uri value);
    public TimeSpan get_ConnectionIdleTimeout();
    public void set_ConnectionIdleTimeout(TimeSpan value);
    public ServiceBusRetryOptions get_RetryOptions();
    public void set_RetryOptions(ServiceBusRetryOptions value);
    [CompilerGeneratedAttribute]
public bool get_EnableCrossEntityTransactions();
    [CompilerGeneratedAttribute]
public void set_EnableCrossEntityTransactions(bool value);
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    internal ServiceBusClientOptions Clone();
}
internal class Azure.Messaging.ServiceBus.ServiceBusConnection : object {
    [CompilerGeneratedAttribute]
private string <FullyQualifiedNamespace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EntityPath>k__BackingField;
    [CompilerGeneratedAttribute]
private ServiceBusTransportType <TransportType>k__BackingField;
    [CompilerGeneratedAttribute]
private ServiceBusRetryOptions <RetryOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private TransportClient <InnerClient>k__BackingField;
    public string FullyQualifiedNamespace { get; }
    public bool IsClosed { get; }
    public string EntityPath { get; }
    internal Uri ServiceEndpoint { get; }
    public ServiceBusTransportType TransportType { get; }
    public ServiceBusRetryOptions RetryOptions { get; }
    internal TransportClient InnerClient { get; }
    internal ServiceBusConnection(string connectionString, ServiceBusClientOptions options);
    internal ServiceBusConnection(string fullyQualifiedNamespace, AzureNamedKeyCredential credential, ServiceBusClientOptions options);
    internal ServiceBusConnection(string fullyQualifiedNamespace, AzureSasCredential credential, ServiceBusClientOptions options);
    internal ServiceBusConnection(string fullyQualifiedNamespace, TokenCredential credential, ServiceBusClientOptions options);
    [CompilerGeneratedAttribute]
public string get_FullyQualifiedNamespace();
    public bool get_IsClosed();
    [CompilerGeneratedAttribute]
public string get_EntityPath();
    internal Uri get_ServiceEndpoint();
    [CompilerGeneratedAttribute]
public ServiceBusTransportType get_TransportType();
    [CompilerGeneratedAttribute]
public virtual ServiceBusRetryOptions get_RetryOptions();
    [CompilerGeneratedAttribute]
internal TransportClient get_InnerClient();
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.ServiceBusConnection/<CloseAsync>d__24")]
public virtual Task CloseAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.ServiceBusConnection/<DisposeAsync>d__25")]
public virtual ValueTask DisposeAsync();
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    internal virtual TransportSender CreateTransportSender(string entityPath, ServiceBusRetryPolicy retryPolicy, string identifier);
    internal virtual TransportReceiver CreateTransportReceiver(string entityPath, ServiceBusRetryPolicy retryPolicy, ServiceBusReceiveMode receiveMode, UInt32 prefetchCount, string identifier, string sessionId, bool isSessionReceiver, bool isProcessor, CancellationToken cancellationToken);
    internal virtual TransportRuleManager CreateTransportRuleManager(string subscriptionPath, ServiceBusRetryPolicy retryPolicy, string identifier);
    internal virtual TransportClient CreateTransportClient(ServiceBusTokenCredential credential, ServiceBusClientOptions options, bool useTls);
    internal static string BuildConnectionResource(ServiceBusTransportType transportType, string fullyQualifiedNamespace, string entityName);
    internal virtual void ThrowIfClosed();
    internal static ServiceBusConnection CreateWithCredential(string fullyQualifiedNamespace, TCredential credential, ServiceBusClientOptions options);
    private static SharedAccessCredential TranslateNamedKeyCredential(AzureNamedKeyCredential credential, string fullyQualifiedNamespace, string entityPath, ServiceBusTransportType transportType);
    private static void ValidateConnectionOptions(ServiceBusClientOptions connectionOptions);
    private static void ValidateConnectionStringProperties(ServiceBusConnectionStringProperties connectionStringProperties, string connectionStringArgumentName);
}
public class Azure.Messaging.ServiceBus.ServiceBusConnectionStringProperties : object {
    private static char TokenValueSeparator;
    private static char TokenValuePairDelimiter;
    private static string ServiceBusEndpointSchemeName;
    private static string EndpointToken;
    private static string EntityPathToken;
    private static string SharedAccessKeyNameToken;
    private static string SharedAccessKeyValueToken;
    private static string SharedAccessSignatureToken;
    private static string DevelopmentEmulatorToken;
    private static string ServiceBusEndpointScheme;
    [CompilerGeneratedAttribute]
private Uri <Endpoint>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EntityPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SharedAccessKeyName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SharedAccessKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SharedAccessSignature>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseDevelopmentEmulator>k__BackingField;
    public string FullyQualifiedNamespace { get; }
    public Uri Endpoint { get; internal set; }
    public string EntityPath { get; internal set; }
    public string SharedAccessKeyName { get; internal set; }
    public string SharedAccessKey { get; internal set; }
    public string SharedAccessSignature { get; internal set; }
    internal bool UseDevelopmentEmulator { get; internal set; }
    private static ServiceBusConnectionStringProperties();
    public string get_FullyQualifiedNamespace();
    [CompilerGeneratedAttribute]
public Uri get_Endpoint();
    [CompilerGeneratedAttribute]
internal void set_Endpoint(Uri value);
    [CompilerGeneratedAttribute]
public string get_EntityPath();
    [CompilerGeneratedAttribute]
internal void set_EntityPath(string value);
    [CompilerGeneratedAttribute]
public string get_SharedAccessKeyName();
    [CompilerGeneratedAttribute]
internal void set_SharedAccessKeyName(string value);
    [CompilerGeneratedAttribute]
public string get_SharedAccessKey();
    [CompilerGeneratedAttribute]
internal void set_SharedAccessKey(string value);
    [CompilerGeneratedAttribute]
public string get_SharedAccessSignature();
    [CompilerGeneratedAttribute]
internal void set_SharedAccessSignature(string value);
    [CompilerGeneratedAttribute]
internal bool get_UseDevelopmentEmulator();
    [CompilerGeneratedAttribute]
internal void set_UseDevelopmentEmulator(bool value);
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    internal string ToConnectionString();
    public static ServiceBusConnectionStringProperties Parse(string connectionString);
    private static int CountChar(char value, ReadOnlySpan`1<char> span);
}
public enum Azure.Messaging.ServiceBus.ServiceBusErrorSource : Enum {
    public int value__;
    public static ServiceBusErrorSource Complete;
    public static ServiceBusErrorSource Abandon;
    public static ServiceBusErrorSource ProcessMessageCallback;
    public static ServiceBusErrorSource Receive;
    public static ServiceBusErrorSource RenewLock;
    public static ServiceBusErrorSource AcceptSession;
    public static ServiceBusErrorSource CloseSession;
}
public class Azure.Messaging.ServiceBus.ServiceBusException : Exception {
    [CompilerGeneratedAttribute]
private bool <IsTransient>k__BackingField;
    [CompilerGeneratedAttribute]
private ServiceBusFailureReason <Reason>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EntityPath>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ServiceBusErrorSource> <ProcessorErrorSource>k__BackingField;
    public bool IsTransient { get; }
    public ServiceBusFailureReason Reason { get; }
    public string EntityPath { get; }
    internal Nullable`1<ServiceBusErrorSource> ProcessorErrorSource { get; internal set; }
    public string Message { get; }
    public ServiceBusException(string message, ServiceBusFailureReason reason, string entityPath, Exception innerException);
    public ServiceBusException(bool isTransient, string message, string entityName, ServiceBusFailureReason reason, Exception innerException);
    [CompilerGeneratedAttribute]
public bool get_IsTransient();
    [CompilerGeneratedAttribute]
public ServiceBusFailureReason get_Reason();
    [CompilerGeneratedAttribute]
public string get_EntityPath();
    [CompilerGeneratedAttribute]
internal Nullable`1<ServiceBusErrorSource> get_ProcessorErrorSource();
    [CompilerGeneratedAttribute]
internal void set_ProcessorErrorSource(Nullable`1<ServiceBusErrorSource> value);
    public virtual string get_Message();
}
public enum Azure.Messaging.ServiceBus.ServiceBusFailureReason : Enum {
    public int value__;
    public static ServiceBusFailureReason GeneralError;
    public static ServiceBusFailureReason MessagingEntityNotFound;
    public static ServiceBusFailureReason MessageLockLost;
    public static ServiceBusFailureReason MessageNotFound;
    public static ServiceBusFailureReason MessageSizeExceeded;
    public static ServiceBusFailureReason MessagingEntityDisabled;
    public static ServiceBusFailureReason QuotaExceeded;
    public static ServiceBusFailureReason ServiceBusy;
    public static ServiceBusFailureReason ServiceTimeout;
    public static ServiceBusFailureReason ServiceCommunicationProblem;
    public static ServiceBusFailureReason SessionCannotBeLocked;
    public static ServiceBusFailureReason SessionLockLost;
    public static ServiceBusFailureReason MessagingEntityAlreadyExists;
}
public class Azure.Messaging.ServiceBus.ServiceBusMessage : object {
    [CompilerGeneratedAttribute]
private AmqpAnnotatedMessage <AmqpMessage>k__BackingField;
    public BinaryData Body { get; public set; }
    public string MessageId { get; public set; }
    public string PartitionKey { get; public set; }
    public string TransactionPartitionKey { get; public set; }
    public string SessionId { get; public set; }
    public string ReplyToSessionId { get; public set; }
    public TimeSpan TimeToLive { get; public set; }
    public string CorrelationId { get; public set; }
    public string Subject { get; public set; }
    public string To { get; public set; }
    public string ContentType { get; public set; }
    public string ReplyTo { get; public set; }
    public DateTimeOffset ScheduledEnqueueTime { get; public set; }
    internal AmqpAnnotatedMessage AmqpMessage { get; internal set; }
    public IDictionary`2<string, object> ApplicationProperties { get; }
    public ServiceBusMessage(string body);
    public ServiceBusMessage(ReadOnlyMemory`1<byte> body);
    public ServiceBusMessage(BinaryData body);
    public ServiceBusMessage(ServiceBusReceivedMessage receivedMessage);
    public ServiceBusMessage(AmqpAnnotatedMessage message);
    public BinaryData get_Body();
    public void set_Body(BinaryData value);
    public string get_MessageId();
    public void set_MessageId(string value);
    public string get_PartitionKey();
    public void set_PartitionKey(string value);
    public string get_TransactionPartitionKey();
    public void set_TransactionPartitionKey(string value);
    public string get_SessionId();
    public void set_SessionId(string value);
    public string get_ReplyToSessionId();
    public void set_ReplyToSessionId(string value);
    public TimeSpan get_TimeToLive();
    public void set_TimeToLive(TimeSpan value);
    public string get_CorrelationId();
    public void set_CorrelationId(string value);
    public string get_Subject();
    public void set_Subject(string value);
    public string get_To();
    public void set_To(string value);
    public string get_ContentType();
    public void set_ContentType(string value);
    public string get_ReplyTo();
    public void set_ReplyTo(string value);
    public DateTimeOffset get_ScheduledEnqueueTime();
    public void set_ScheduledEnqueueTime(DateTimeOffset value);
    [CompilerGeneratedAttribute]
internal AmqpAnnotatedMessage get_AmqpMessage();
    [CompilerGeneratedAttribute]
internal void set_AmqpMessage(AmqpAnnotatedMessage value);
    public AmqpAnnotatedMessage GetRawAmqpMessage();
    public IDictionary`2<string, object> get_ApplicationProperties();
    public virtual string ToString();
}
public class Azure.Messaging.ServiceBus.ServiceBusMessageBatch : object {
    private object _syncGuard;
    private bool _locked;
    private TransportMessageBatch _innerBatch;
    private MessagingClientDiagnostics _clientDiagnostics;
    public long MaxSizeInBytes { get; }
    public long SizeInBytes { get; }
    public int Count { get; }
    internal ServiceBusMessageBatch(TransportMessageBatch transportBatch, MessagingClientDiagnostics clientDiagnostics);
    public long get_MaxSizeInBytes();
    public long get_SizeInBytes();
    public int get_Count();
    public bool TryAddMessage(ServiceBusMessage message);
    public sealed virtual void Dispose();
    internal void Clear();
    internal IReadOnlyCollection`1<T> AsReadOnly();
    internal void Lock();
    internal void Unlock();
    private void AssertNotLocked();
}
public enum Azure.Messaging.ServiceBus.ServiceBusMessageState : Enum {
    public int value__;
    public static ServiceBusMessageState Active;
    public static ServiceBusMessageState Deferred;
    public static ServiceBusMessageState Scheduled;
}
public static class Azure.Messaging.ServiceBus.ServiceBusModelFactory : object {
    [EditorBrowsableAttribute("1")]
public static ServiceBusReceivedMessage ServiceBusReceivedMessage(BinaryData body, string messageId, string partitionKey, string viaPartitionKey, string sessionId, string replyToSessionId, TimeSpan timeToLive, string correlationId, string subject, string to, string contentType, string replyTo, DateTimeOffset scheduledEnqueueTime, IDictionary`2<string, object> properties, Guid lockTokenGuid, int deliveryCount, DateTimeOffset lockedUntil, long sequenceNumber, string deadLetterSource, long enqueuedSequenceNumber, DateTimeOffset enqueuedTime);
    public static ServiceBusReceivedMessage ServiceBusReceivedMessage(BinaryData body, string messageId, string partitionKey, string viaPartitionKey, string sessionId, string replyToSessionId, TimeSpan timeToLive, string correlationId, string subject, string to, string contentType, string replyTo, DateTimeOffset scheduledEnqueueTime, IDictionary`2<string, object> properties, Guid lockTokenGuid, int deliveryCount, DateTimeOffset lockedUntil, long sequenceNumber, string deadLetterSource, long enqueuedSequenceNumber, DateTimeOffset enqueuedTime, ServiceBusMessageState serviceBusMessageState);
    public static QueueProperties QueueProperties(string name, TimeSpan lockDuration, long maxSizeInMegabytes, bool requiresDuplicateDetection, bool requiresSession, TimeSpan defaultMessageTimeToLive, TimeSpan autoDeleteOnIdle, bool deadLetteringOnMessageExpiration, TimeSpan duplicateDetectionHistoryTimeWindow, int maxDeliveryCount, bool enableBatchedOperations, EntityStatus status, string forwardTo, string forwardDeadLetteredMessagesTo, string userMetadata, bool enablePartitioning);
    [EditorBrowsableAttribute("1")]
public static QueueProperties QueueProperties(string name, TimeSpan lockDuration, long maxSizeInMegabytes, bool requiresDuplicateDetection, bool requiresSession, TimeSpan defaultMessageTimeToLive, TimeSpan autoDeleteOnIdle, bool deadLetteringOnMessageExpiration, TimeSpan duplicateDetectionHistoryTimeWindow, int maxDeliveryCount, bool enableBatchedOperations, EntityStatus status, string forwardTo, string forwardDeadLetteredMessagesTo, string userMetadata, bool enablePartitioning, long maxMessageSizeInKilobytes);
    [EditorBrowsableAttribute("1")]
public static TopicProperties TopicProperties(string name, long maxSizeInMegabytes, bool requiresDuplicateDetection, TimeSpan defaultMessageTimeToLive, TimeSpan autoDeleteOnIdle, TimeSpan duplicateDetectionHistoryTimeWindow, bool enableBatchedOperations, EntityStatus status, bool enablePartitioning);
    public static TopicProperties TopicProperties(string name, long maxSizeInMegabytes, bool requiresDuplicateDetection, TimeSpan defaultMessageTimeToLive, TimeSpan autoDeleteOnIdle, TimeSpan duplicateDetectionHistoryTimeWindow, bool enableBatchedOperations, EntityStatus status, bool enablePartitioning, long maxMessageSizeInKilobytes);
    public static NamespaceProperties NamespaceProperties(string name, DateTimeOffset createdTime, DateTimeOffset modifiedTime, MessagingSku messagingSku, int messagingUnits, string alias);
    public static SubscriptionProperties SubscriptionProperties(string topicName, string subscriptionName, TimeSpan lockDuration, bool requiresSession, TimeSpan defaultMessageTimeToLive, TimeSpan autoDeleteOnIdle, bool deadLetteringOnMessageExpiration, int maxDeliveryCount, bool enableBatchedOperations, EntityStatus status, string forwardTo, string forwardDeadLetteredMessagesTo, string userMetadata);
    public static RuleProperties RuleProperties(string name, RuleFilter filter, RuleAction action);
    public static QueueRuntimeProperties QueueRuntimeProperties(string name, long activeMessageCount, long scheduledMessageCount, long deadLetterMessageCount, long transferDeadLetterMessageCount, long transferMessageCount, long totalMessageCount, long sizeInBytes, DateTimeOffset createdAt, DateTimeOffset updatedAt, DateTimeOffset accessedAt);
    public static TopicRuntimeProperties TopicRuntimeProperties(string name, long scheduledMessageCount, long sizeInBytes, int subscriptionCount, DateTimeOffset createdAt, DateTimeOffset updatedAt, DateTimeOffset accessedAt);
    public static SubscriptionRuntimeProperties SubscriptionRuntimeProperties(string topicName, string subscriptionName, long activeMessageCount, long deadLetterMessageCount, long transferDeadLetterMessageCount, long transferMessageCount, long totalMessageCount, DateTimeOffset createdAt, DateTimeOffset updatedAt, DateTimeOffset accessedAt);
    public static ServiceBusMessageBatch ServiceBusMessageBatch(long batchSizeBytes, IList`1<ServiceBusMessage> batchMessageStore, CreateMessageBatchOptions batchOptions, Func`2<ServiceBusMessage, bool> tryAddCallback);
}
public class Azure.Messaging.ServiceBus.ServiceBusProcessor : object {
    private Func`2<ProcessMessageEventArgs, Task> _processMessageAsync;
    private Func`2<ProcessSessionMessageEventArgs, Task> _processSessionMessageAsync;
    private Func`2<ProcessErrorEventArgs, Task> _processErrorAsync;
    internal Func`2<ProcessSessionEventArgs, Task> _sessionInitializingAsync;
    internal Func`2<ProcessSessionEventArgs, Task> _sessionClosingAsync;
    private SemaphoreSlim _messageHandlerSemaphore;
    private object _optionsLock;
    private SemaphoreSlim _maxConcurrentAcceptSessionsSemaphore;
    private SemaphoreSlim _processingStartStopSemaphore;
    [CompilerGeneratedAttribute]
private CancellationTokenSource <RunningTaskTokenSource>k__BackingField;
    [CompilerGeneratedAttribute]
private Task <ActiveReceiveTask>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EntityPath>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSessionProcessor>k__BackingField;
    [CompilerGeneratedAttribute]
private ServiceBusProcessorOptions <Options>k__BackingField;
    internal ServiceBusConnection Connection;
    private int _currentConcurrentCalls;
    private Int32 modreq(System.Runtime.CompilerServices.IsVolatile) _maxConcurrentSessions;
    private int _currentConcurrentSessions;
    private Int32 modreq(System.Runtime.CompilerServices.IsVolatile) _maxConcurrentCallsPerSession;
    private int _currentAcceptSessions;
    [CompilerGeneratedAttribute]
private bool <AutoCompleteMessages>k__BackingField;
    [CompilerGeneratedAttribute]
private ServiceBusEventSource <Logger>k__BackingField;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _closed;
    private String[] _sessionIds;
    private MessagingClientDiagnostics _clientDiagnostics;
    private List`1<ReceiverManager> _receiverManagers;
    private ServiceBusSessionProcessor _sessionProcessor;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private List`1<ValueTuple`2<Task, CancellationTokenSource>> <TaskTuples>k__BackingField;
    private List`1<ReceiverManager> _orphanedReceiverManagers;
    private CancellationTokenSource _handlerCts;
    private int _processorCount;
    private CancellationTokenSource RunningTaskTokenSource { get; private set; }
    private Task ActiveReceiveTask { get; private set; }
    public string FullyQualifiedNamespace { get; }
    public string EntityPath { get; }
    public string Identifier { get; }
    public ServiceBusReceiveMode ReceiveMode { get; }
    internal bool IsSessionProcessor { get; }
    public int PrefetchCount { get; }
    public bool IsProcessing { get; }
    internal ServiceBusProcessorOptions Options { get; }
    public int MaxConcurrentCalls { get; }
    internal int MaxConcurrentSessions { get; }
    internal int MaxConcurrentCallsPerSession { get; }
    internal Nullable`1<TimeSpan> MaxReceiveWaitTime { get; }
    public bool AutoCompleteMessages { get; }
    public TimeSpan MaxAutoLockRenewalDuration { get; }
    internal ServiceBusEventSource Logger { get; internal set; }
    public bool IsClosed { get; private set; }
    internal bool KeepOpenOnReceiveTimeout { get; }
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal List`1<ValueTuple`2<Task, CancellationTokenSource>> TaskTuples { get; private set; }
    internal ServiceBusProcessor(ServiceBusConnection connection, string entityPath, bool isSessionEntity, ServiceBusProcessorOptions options, String[] sessionIds, int maxConcurrentSessions, int maxConcurrentCallsPerSession, ServiceBusSessionProcessor sessionProcessor);
    protected ServiceBusProcessor(ServiceBusClient client, string queueName, ServiceBusProcessorOptions options);
    protected ServiceBusProcessor(ServiceBusClient client, string topicName, string subscriptionName, ServiceBusProcessorOptions options);
    [CompilerGeneratedAttribute]
private CancellationTokenSource get_RunningTaskTokenSource();
    [CompilerGeneratedAttribute]
private void set_RunningTaskTokenSource(CancellationTokenSource value);
    [CompilerGeneratedAttribute]
private Task get_ActiveReceiveTask();
    [CompilerGeneratedAttribute]
private void set_ActiveReceiveTask(Task value);
    public virtual string get_FullyQualifiedNamespace();
    [CompilerGeneratedAttribute]
public virtual string get_EntityPath();
    public virtual string get_Identifier();
    public virtual ServiceBusReceiveMode get_ReceiveMode();
    [CompilerGeneratedAttribute]
internal bool get_IsSessionProcessor();
    public virtual int get_PrefetchCount();
    public virtual bool get_IsProcessing();
    [CompilerGeneratedAttribute]
internal ServiceBusProcessorOptions get_Options();
    public virtual int get_MaxConcurrentCalls();
    internal int get_MaxConcurrentSessions();
    internal int get_MaxConcurrentCallsPerSession();
    internal Nullable`1<TimeSpan> get_MaxReceiveWaitTime();
    [CompilerGeneratedAttribute]
public virtual bool get_AutoCompleteMessages();
    public virtual TimeSpan get_MaxAutoLockRenewalDuration();
    [CompilerGeneratedAttribute]
internal ServiceBusEventSource get_Logger();
    [CompilerGeneratedAttribute]
internal void set_Logger(ServiceBusEventSource value);
    public virtual bool get_IsClosed();
    private void set_IsClosed(bool value);
    internal bool get_KeepOpenOnReceiveTimeout();
    [CompilerGeneratedAttribute]
internal List`1<ValueTuple`2<Task, CancellationTokenSource>> get_TaskTuples();
    [CompilerGeneratedAttribute]
private void set_TaskTuples(List`1<ValueTuple`2<Task, CancellationTokenSource>> value);
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    public void add_ProcessMessageAsync(Func`2<ProcessMessageEventArgs, Task> value);
    public void remove_ProcessMessageAsync(Func`2<ProcessMessageEventArgs, Task> value);
    internal void add_ProcessSessionMessageAsync(Func`2<ProcessSessionMessageEventArgs, Task> value);
    internal void remove_ProcessSessionMessageAsync(Func`2<ProcessSessionMessageEventArgs, Task> value);
    public void add_ProcessErrorAsync(Func`2<ProcessErrorEventArgs, Task> value);
    public void remove_ProcessErrorAsync(Func`2<ProcessErrorEventArgs, Task> value);
    internal void add_SessionInitializingAsync(Func`2<ProcessSessionEventArgs, Task> value);
    internal void remove_SessionInitializingAsync(Func`2<ProcessSessionEventArgs, Task> value);
    internal void add_SessionClosingAsync(Func`2<ProcessSessionEventArgs, Task> value);
    internal void remove_SessionClosingAsync(Func`2<ProcessSessionEventArgs, Task> value);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.ServiceBusProcessor/<OnProcessMessageAsync>d__98")]
protected internal virtual Task OnProcessMessageAsync(ProcessMessageEventArgs args);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.ServiceBusProcessor/<OnProcessErrorAsync>d__99")]
protected internal virtual Task OnProcessErrorAsync(ProcessErrorEventArgs args);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.ServiceBusProcessor/<OnProcessSessionMessageAsync>d__100")]
internal Task OnProcessSessionMessageAsync(ProcessSessionMessageEventArgs args);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.ServiceBusProcessor/<OnSessionInitializingAsync>d__101")]
internal Task OnSessionInitializingAsync(ProcessSessionEventArgs args);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.ServiceBusProcessor/<OnSessionClosingAsync>d__102")]
internal Task OnSessionClosingAsync(ProcessSessionEventArgs args);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.ServiceBusProcessor/<StartProcessingAsync>d__103")]
public virtual Task StartProcessingAsync(CancellationToken cancellationToken);
    private void ReconcileReceiverManagers(int maxConcurrentSessions, int prefetchCount);
    private void ValidateErrorHandler();
    private void ValidateMessageHandler();
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.ServiceBusProcessor/<StopProcessingAsync>d__107")]
public virtual Task StopProcessingAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.ServiceBusProcessor/<RunReceiveTaskAsync>d__108")]
private Task RunReceiveTaskAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.ServiceBusProcessor/<ReceiveAndProcessMessagesAsync>d__109")]
private Task ReceiveAndProcessMessagesAsync(ReceiverManager receiverManager, CancellationToken cancellationToken);
    internal void EnsureNotRunningAndInvoke(Action action);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.ServiceBusProcessor/<CloseAsync>d__111")]
public virtual Task CloseAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.ServiceBusProcessor/<DisposeAsync>d__112")]
public sealed virtual ValueTask DisposeAsync();
    public void UpdateConcurrency(int maxConcurrentCalls);
    public void UpdatePrefetchCount(int prefetchCount);
    internal void UpdateConcurrency(int maxConcurrentSessions, int maxConcurrentCallsPerSession);
    private void WakeLoop();
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.ServiceBusProcessor/<ReconcileConcurrencyAsync>d__117")]
private Task ReconcileConcurrencyAsync();
    [CompilerGeneratedAttribute]
private void <remove_ProcessMessageAsync>b__85_0();
    [CompilerGeneratedAttribute]
private void <remove_ProcessSessionMessageAsync>b__88_0();
    [CompilerGeneratedAttribute]
private void <remove_ProcessErrorAsync>b__91_0();
    [CompilerGeneratedAttribute]
private void <remove_SessionInitializingAsync>b__94_0();
    [CompilerGeneratedAttribute]
private void <remove_SessionClosingAsync>b__97_0();
}
public class Azure.Messaging.ServiceBus.ServiceBusProcessorOptions : object {
    private Int32 modreq(System.Runtime.CompilerServices.IsVolatile) _prefetchCount;
    [CompilerGeneratedAttribute]
private ServiceBusReceiveMode <ReceiveMode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AutoCompleteMessages>k__BackingField;
    private TimeSpan _maxAutoRenewDuration;
    private Nullable`1<TimeSpan> _maxReceiveWaitTime;
    private Int32 modreq(System.Runtime.CompilerServices.IsVolatile) _maxConcurrentCalls;
    [CompilerGeneratedAttribute]
private SubQueue <SubQueue>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Identifier>k__BackingField;
    public int PrefetchCount { get; public set; }
    public ServiceBusReceiveMode ReceiveMode { get; public set; }
    public bool AutoCompleteMessages { get; public set; }
    public TimeSpan MaxAutoLockRenewalDuration { get; public set; }
    internal Nullable`1<TimeSpan> MaxReceiveWaitTime { get; internal set; }
    public int MaxConcurrentCalls { get; public set; }
    public SubQueue SubQueue { get; public set; }
    public string Identifier { get; public set; }
    public int get_PrefetchCount();
    public void set_PrefetchCount(int value);
    [CompilerGeneratedAttribute]
public ServiceBusReceiveMode get_ReceiveMode();
    [CompilerGeneratedAttribute]
public void set_ReceiveMode(ServiceBusReceiveMode value);
    [CompilerGeneratedAttribute]
public bool get_AutoCompleteMessages();
    [CompilerGeneratedAttribute]
public void set_AutoCompleteMessages(bool value);
    public TimeSpan get_MaxAutoLockRenewalDuration();
    public void set_MaxAutoLockRenewalDuration(TimeSpan value);
    internal Nullable`1<TimeSpan> get_MaxReceiveWaitTime();
    internal void set_MaxReceiveWaitTime(Nullable`1<TimeSpan> value);
    public int get_MaxConcurrentCalls();
    public void set_MaxConcurrentCalls(int value);
    [CompilerGeneratedAttribute]
public SubQueue get_SubQueue();
    [CompilerGeneratedAttribute]
public void set_SubQueue(SubQueue value);
    [CompilerGeneratedAttribute]
public string get_Identifier();
    [CompilerGeneratedAttribute]
public void set_Identifier(string value);
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    internal ServiceBusProcessorOptions Clone();
}
public class Azure.Messaging.ServiceBus.ServiceBusReceivedMessage : object {
    [CompilerGeneratedAttribute]
private bool <IsSettled>k__BackingField;
    [CompilerGeneratedAttribute]
private AmqpAnnotatedMessage <AmqpMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private short <PartitionId>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <LockTokenGuid>k__BackingField;
    internal bool IsSettled { get; internal set; }
    internal AmqpAnnotatedMessage AmqpMessage { get; internal set; }
    public BinaryData Body { get; }
    public string MessageId { get; }
    public string PartitionKey { get; }
    public string TransactionPartitionKey { get; }
    public string SessionId { get; }
    public string ReplyToSessionId { get; }
    public TimeSpan TimeToLive { get; }
    public string CorrelationId { get; }
    public string Subject { get; }
    public string To { get; }
    public string ContentType { get; }
    public string ReplyTo { get; }
    public DateTimeOffset ScheduledEnqueueTime { get; }
    public IReadOnlyDictionary`2<string, object> ApplicationProperties { get; }
    public string LockToken { get; }
    public int DeliveryCount { get; internal set; }
    public DateTimeOffset LockedUntil { get; internal set; }
    public long SequenceNumber { get; internal set; }
    public string DeadLetterSource { get; internal set; }
    internal short PartitionId { get; internal set; }
    public long EnqueuedSequenceNumber { get; internal set; }
    public DateTimeOffset EnqueuedTime { get; internal set; }
    internal Guid LockTokenGuid { get; internal set; }
    public DateTimeOffset ExpiresAt { get; }
    public string DeadLetterReason { get; }
    public string DeadLetterErrorDescription { get; }
    public ServiceBusMessageState State { get; }
    internal ServiceBusReceivedMessage(ReadOnlyMemory`1<byte> body);
    internal ServiceBusReceivedMessage(AmqpAnnotatedMessage message);
    public static ServiceBusReceivedMessage FromAmqpMessage(AmqpAnnotatedMessage message, BinaryData lockTokenBytes);
    [CompilerGeneratedAttribute]
internal bool get_IsSettled();
    [CompilerGeneratedAttribute]
internal void set_IsSettled(bool value);
    [CompilerGeneratedAttribute]
internal AmqpAnnotatedMessage get_AmqpMessage();
    [CompilerGeneratedAttribute]
internal void set_AmqpMessage(AmqpAnnotatedMessage value);
    public AmqpAnnotatedMessage GetRawAmqpMessage();
    public BinaryData get_Body();
    public string get_MessageId();
    public string get_PartitionKey();
    public string get_TransactionPartitionKey();
    public string get_SessionId();
    public string get_ReplyToSessionId();
    public TimeSpan get_TimeToLive();
    public string get_CorrelationId();
    public string get_Subject();
    public string get_To();
    public string get_ContentType();
    public string get_ReplyTo();
    public DateTimeOffset get_ScheduledEnqueueTime();
    public IReadOnlyDictionary`2<string, object> get_ApplicationProperties();
    public string get_LockToken();
    public int get_DeliveryCount();
    internal void set_DeliveryCount(int value);
    public DateTimeOffset get_LockedUntil();
    internal void set_LockedUntil(DateTimeOffset value);
    public long get_SequenceNumber();
    internal void set_SequenceNumber(long value);
    public string get_DeadLetterSource();
    internal void set_DeadLetterSource(string value);
    [CompilerGeneratedAttribute]
internal short get_PartitionId();
    [CompilerGeneratedAttribute]
internal void set_PartitionId(short value);
    public long get_EnqueuedSequenceNumber();
    internal void set_EnqueuedSequenceNumber(long value);
    public DateTimeOffset get_EnqueuedTime();
    internal void set_EnqueuedTime(DateTimeOffset value);
    [CompilerGeneratedAttribute]
internal Guid get_LockTokenGuid();
    [CompilerGeneratedAttribute]
internal void set_LockTokenGuid(Guid value);
    public DateTimeOffset get_ExpiresAt();
    public string get_DeadLetterReason();
    public string get_DeadLetterErrorDescription();
    public ServiceBusMessageState get_State();
    public virtual string ToString();
}
public enum Azure.Messaging.ServiceBus.ServiceBusReceiveMode : Enum {
    public int value__;
    public static ServiceBusReceiveMode PeekLock;
    public static ServiceBusReceiveMode ReceiveAndDelete;
}
public class Azure.Messaging.ServiceBus.ServiceBusReceiver : object {
    internal static int MaxDeleteMessageCount;
    private static ServiceBusReceiverOptions s_defaultOptions;
    [CompilerGeneratedAttribute]
private string <EntityPath>k__BackingField;
    [CompilerGeneratedAttribute]
private ServiceBusReceiveMode <ReceiveMode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSessionReceiver>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Identifier>k__BackingField;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _closed;
    private ServiceBusRetryPolicy _retryPolicy;
    private ServiceBusConnection _connection;
    private TransportReceiver _innerReceiver;
    private MessagingClientDiagnostics _clientDiagnostics;
    [CompilerGeneratedAttribute]
private ServiceBusEventSource <Logger>k__BackingField;
    public string FullyQualifiedNamespace { get; }
    public string EntityPath { get; }
    public ServiceBusReceiveMode ReceiveMode { get; }
    internal bool IsSessionReceiver { get; }
    public int PrefetchCount { get; internal set; }
    public string Identifier { get; internal set; }
    public bool IsClosed { get; private set; }
    internal bool IsDisposed { get; }
    internal TransportReceiver InnerReceiver { get; }
    internal MessagingClientDiagnostics ClientDiagnostics { get; }
    internal ServiceBusEventSource Logger { get; internal set; }
    internal ServiceBusReceiver(ServiceBusConnection connection, string entityPath, bool isSessionEntity, ServiceBusReceiverOptions options, string sessionId, bool isProcessor, CancellationToken cancellationToken);
    protected ServiceBusReceiver(ServiceBusClient client, string queueName, ServiceBusReceiverOptions options);
    protected ServiceBusReceiver(ServiceBusClient client, string topicName, string subscriptionName, ServiceBusReceiverOptions options);
    public virtual string get_FullyQualifiedNamespace();
    [CompilerGeneratedAttribute]
public virtual string get_EntityPath();
    [CompilerGeneratedAttribute]
public virtual ServiceBusReceiveMode get_ReceiveMode();
    [CompilerGeneratedAttribute]
internal bool get_IsSessionReceiver();
    public virtual int get_PrefetchCount();
    internal virtual void set_PrefetchCount(int value);
    [CompilerGeneratedAttribute]
public virtual string get_Identifier();
    [CompilerGeneratedAttribute]
internal virtual void set_Identifier(string value);
    public virtual bool get_IsClosed();
    private void set_IsClosed(bool value);
    internal bool get_IsDisposed();
    internal TransportReceiver get_InnerReceiver();
    internal MessagingClientDiagnostics get_ClientDiagnostics();
    [CompilerGeneratedAttribute]
internal ServiceBusEventSource get_Logger();
    [CompilerGeneratedAttribute]
internal void set_Logger(ServiceBusEventSource value);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.ServiceBusReceiver/<CloseAsync>d__42")]
public virtual Task CloseAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.ServiceBusReceiver/<ReceiveMessagesAsync>d__43")]
public virtual Task`1<IReadOnlyList`1<ServiceBusReceivedMessage>> ReceiveMessagesAsync(int maxMessages, Nullable`1<TimeSpan> maxWaitTime, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.ServiceBusReceiver/<ReceiveMessagesAsync>d__44")]
internal Task`1<IReadOnlyList`1<ServiceBusReceivedMessage>> ReceiveMessagesAsync(int maxMessages, Nullable`1<TimeSpan> maxWaitTime, bool isProcessor, CancellationToken cancellationToken);
    [AsyncIteratorStateMachineAttribute("Azure.Messaging.ServiceBus.ServiceBusReceiver/<ReceiveMessagesAsync>d__45")]
public virtual IAsyncEnumerable`1<ServiceBusReceivedMessage> ReceiveMessagesAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.ServiceBusReceiver/<ReceiveMessageAsync>d__46")]
public virtual Task`1<ServiceBusReceivedMessage> ReceiveMessageAsync(Nullable`1<TimeSpan> maxWaitTime, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.ServiceBusReceiver/<PeekMessageAsync>d__47")]
public virtual Task`1<ServiceBusReceivedMessage> PeekMessageAsync(Nullable`1<long> fromSequenceNumber, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.ServiceBusReceiver/<PeekMessagesAsync>d__48")]
public virtual Task`1<IReadOnlyList`1<ServiceBusReceivedMessage>> PeekMessagesAsync(int maxMessages, Nullable`1<long> fromSequenceNumber, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.ServiceBusReceiver/<PeekMessagesInternalAsync>d__49")]
private Task`1<IReadOnlyList`1<ServiceBusReceivedMessage>> PeekMessagesInternalAsync(Nullable`1<long> sequenceNumber, int maxMessages, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.ServiceBusReceiver/<OpenLinkAsync>d__50")]
internal Task OpenLinkAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.ServiceBusReceiver/<CompleteMessageAsync>d__51")]
public virtual Task CompleteMessageAsync(ServiceBusReceivedMessage message, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.ServiceBusReceiver/<AbandonMessageAsync>d__52")]
public virtual Task AbandonMessageAsync(ServiceBusReceivedMessage message, IDictionary`2<string, object> propertiesToModify, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.ServiceBusReceiver/<PurgeMessagesAsync>d__53")]
internal virtual Task`1<int> PurgeMessagesAsync(Nullable`1<DateTimeOffset> beforeEnqueueTime, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.ServiceBusReceiver/<DeleteMessagesAsync>d__54")]
internal virtual Task`1<int> DeleteMessagesAsync(int messageCount, Nullable`1<DateTimeOffset> beforeEnqueueTime, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.ServiceBusReceiver/<DeadLetterMessageAsync>d__55")]
public virtual Task DeadLetterMessageAsync(ServiceBusReceivedMessage message, IDictionary`2<string, object> propertiesToModify, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.ServiceBusReceiver/<DeadLetterMessageAsync>d__56")]
public virtual Task DeadLetterMessageAsync(ServiceBusReceivedMessage message, IDictionary`2<string, object> propertiesToModify, string deadLetterReason, string deadLetterErrorDescription, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.ServiceBusReceiver/<DeadLetterMessageAsync>d__57")]
public virtual Task DeadLetterMessageAsync(ServiceBusReceivedMessage message, string deadLetterReason, string deadLetterErrorDescription, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.ServiceBusReceiver/<DeadLetterInternalAsync>d__58")]
internal virtual Task DeadLetterInternalAsync(ServiceBusReceivedMessage message, string deadLetterReason, string deadLetterErrorDescription, IDictionary`2<string, object> propertiesToModify, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.ServiceBusReceiver/<DeferMessageAsync>d__59")]
public virtual Task DeferMessageAsync(ServiceBusReceivedMessage message, IDictionary`2<string, object> propertiesToModify, CancellationToken cancellationToken);
    private void ThrowIfNotPeekLockMode();
    private static void ThrowIfLockTokenIsEmpty(Guid lockToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.ServiceBusReceiver/<ReceiveDeferredMessageAsync>d__62")]
public virtual Task`1<ServiceBusReceivedMessage> ReceiveDeferredMessageAsync(long sequenceNumber, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.ServiceBusReceiver/<ReceiveDeferredMessagesAsync>d__63")]
public virtual Task`1<IReadOnlyList`1<ServiceBusReceivedMessage>> ReceiveDeferredMessagesAsync(IEnumerable`1<long> sequenceNumbers, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.ServiceBusReceiver/<RenewMessageLockAsync>d__64")]
public virtual Task RenewMessageLockAsync(ServiceBusReceivedMessage message, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.ServiceBusReceiver/<RenewMessageLockAsync>d__65")]
internal virtual Task`1<DateTimeOffset> RenewMessageLockAsync(Guid lockToken, CancellationToken cancellationToken);
    private void ThrowIfSessionReceiver();
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.ServiceBusReceiver/<DisposeAsync>d__67")]
public virtual ValueTask DisposeAsync();
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
}
public class Azure.Messaging.ServiceBus.ServiceBusReceiverOptions : object {
    private int _prefetchCount;
    [CompilerGeneratedAttribute]
private ServiceBusReceiveMode <ReceiveMode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Identifier>k__BackingField;
    [CompilerGeneratedAttribute]
private SubQueue <SubQueue>k__BackingField;
    public int PrefetchCount { get; public set; }
    public ServiceBusReceiveMode ReceiveMode { get; public set; }
    public string Identifier { get; public set; }
    public SubQueue SubQueue { get; public set; }
    public int get_PrefetchCount();
    public void set_PrefetchCount(int value);
    [CompilerGeneratedAttribute]
public ServiceBusReceiveMode get_ReceiveMode();
    [CompilerGeneratedAttribute]
public void set_ReceiveMode(ServiceBusReceiveMode value);
    [CompilerGeneratedAttribute]
public string get_Identifier();
    [CompilerGeneratedAttribute]
public void set_Identifier(string value);
    [CompilerGeneratedAttribute]
public SubQueue get_SubQueue();
    [CompilerGeneratedAttribute]
public void set_SubQueue(SubQueue value);
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
}
public enum Azure.Messaging.ServiceBus.ServiceBusRetryMode : Enum {
    public int value__;
    public static ServiceBusRetryMode Fixed;
    public static ServiceBusRetryMode Exponential;
}
public class Azure.Messaging.ServiceBus.ServiceBusRetryOptions : object {
    private int _maxRetries;
    private TimeSpan _delay;
    private TimeSpan _maxDelay;
    private TimeSpan _tryTimeout;
    [CompilerGeneratedAttribute]
private ServiceBusRetryMode <Mode>k__BackingField;
    [CompilerGeneratedAttribute]
private ServiceBusRetryPolicy <CustomRetryPolicy>k__BackingField;
    public ServiceBusRetryMode Mode { get; public set; }
    public int MaxRetries { get; public set; }
    public TimeSpan Delay { get; public set; }
    public TimeSpan MaxDelay { get; public set; }
    public TimeSpan TryTimeout { get; public set; }
    public ServiceBusRetryPolicy CustomRetryPolicy { get; public set; }
    [CompilerGeneratedAttribute]
public ServiceBusRetryMode get_Mode();
    [CompilerGeneratedAttribute]
public void set_Mode(ServiceBusRetryMode value);
    public int get_MaxRetries();
    public void set_MaxRetries(int value);
    public TimeSpan get_Delay();
    public void set_Delay(TimeSpan value);
    public TimeSpan get_MaxDelay();
    public void set_MaxDelay(TimeSpan value);
    public TimeSpan get_TryTimeout();
    public void set_TryTimeout(TimeSpan value);
    [CompilerGeneratedAttribute]
public ServiceBusRetryPolicy get_CustomRetryPolicy();
    [CompilerGeneratedAttribute]
public void set_CustomRetryPolicy(ServiceBusRetryPolicy value);
}
public abstract class Azure.Messaging.ServiceBus.ServiceBusRetryPolicy : object {
    private Int32 modreq(System.Runtime.CompilerServices.IsVolatile) _serverBusyState;
    private static int ServerNotBusyState;
    private static int ServerBusyState;
    [CompilerGeneratedAttribute]
private string <ServerBusyExceptionMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <ServerBusyBaseSleepTime>k__BackingField;
    [CompilerGeneratedAttribute]
private ServiceBusEventSource <Logger>k__BackingField;
    internal bool IsServerBusy { get; }
    internal string ServerBusyExceptionMessage { get; internal set; }
    internal TimeSpan ServerBusyBaseSleepTime { get; internal set; }
    internal ServiceBusEventSource Logger { get; internal set; }
    internal bool get_IsServerBusy();
    [CompilerGeneratedAttribute]
internal string get_ServerBusyExceptionMessage();
    [CompilerGeneratedAttribute]
internal void set_ServerBusyExceptionMessage(string value);
    [CompilerGeneratedAttribute]
internal TimeSpan get_ServerBusyBaseSleepTime();
    [CompilerGeneratedAttribute]
internal void set_ServerBusyBaseSleepTime(TimeSpan value);
    [CompilerGeneratedAttribute]
internal ServiceBusEventSource get_Logger();
    [CompilerGeneratedAttribute]
internal void set_Logger(ServiceBusEventSource value);
    public abstract virtual TimeSpan CalculateTryTimeout(int attemptCount);
    public abstract virtual Nullable`1<TimeSpan> CalculateRetryDelay(Exception lastException, int attemptCount);
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.ServiceBusRetryPolicy/<RunOperation>d__22`1")]
internal ValueTask RunOperation(Func`4<T1, TimeSpan, CancellationToken, ValueTask> operation, T1 t1, TransportConnectionScope scope, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.ServiceBusRetryPolicy/<RunOperation>d__23`2")]
internal ValueTask`1<TResult> RunOperation(Func`4<T1, TimeSpan, CancellationToken, ValueTask`1<TResult>> operation, T1 t1, TransportConnectionScope scope, CancellationToken cancellationToken, bool logTimeoutRetriesAsVerbose);
    private void SetServerBusy(string exceptionMessage, CancellationToken cancellationToken);
    private void ResetServerBusy();
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.ServiceBusRetryPolicy/<ScheduleResetServerBusy>d__26")]
private Task ScheduleResetServerBusy(CancellationToken cancellationToken);
}
public class Azure.Messaging.ServiceBus.ServiceBusRuleManager : object {
    [CompilerGeneratedAttribute]
private string <SubscriptionPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Identifier>k__BackingField;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _closed;
    private ServiceBusConnection _connection;
    internal TransportRuleManager InnerRuleManager;
    private MessagingClientDiagnostics _clientDiagnostics;
    private static int MaxRulesPerRequest;
    public string SubscriptionPath { get; }
    public string FullyQualifiedNamespace { get; }
    internal string Identifier { get; }
    public bool IsClosed { get; private set; }
    internal ServiceBusRuleManager(ServiceBusConnection connection, string subscriptionPath);
    [CompilerGeneratedAttribute]
public virtual string get_SubscriptionPath();
    public virtual string get_FullyQualifiedNamespace();
    [CompilerGeneratedAttribute]
internal string get_Identifier();
    public virtual bool get_IsClosed();
    private void set_IsClosed(bool value);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.ServiceBusRuleManager/<CreateRuleAsync>d__18")]
public virtual Task CreateRuleAsync(string ruleName, RuleFilter filter, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.ServiceBusRuleManager/<CreateRuleAsync>d__19")]
public virtual Task CreateRuleAsync(CreateRuleOptions options, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.ServiceBusRuleManager/<DeleteRuleAsync>d__20")]
public virtual Task DeleteRuleAsync(string ruleName, CancellationToken cancellationToken);
    [AsyncIteratorStateMachineAttribute("Azure.Messaging.ServiceBus.ServiceBusRuleManager/<GetRulesAsync>d__21")]
public virtual IAsyncEnumerable`1<RuleProperties> GetRulesAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.ServiceBusRuleManager/<DisposeAsync>d__22")]
public virtual ValueTask DisposeAsync();
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.ServiceBusRuleManager/<CloseAsync>d__23")]
public virtual Task CloseAsync(CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
}
public class Azure.Messaging.ServiceBus.ServiceBusSender : object {
    internal static int MinimumBatchSizeLimit;
    [CompilerGeneratedAttribute]
private string <EntityPath>k__BackingField;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _closed;
    [CompilerGeneratedAttribute]
private ServiceBusEventSource <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Identifier>k__BackingField;
    private ServiceBusRetryPolicy _retryPolicy;
    private ServiceBusConnection _connection;
    private TransportSender _innerSender;
    private MessagingClientDiagnostics _clientDiagnostics;
    public string FullyQualifiedNamespace { get; }
    public string EntityPath { get; }
    public bool IsClosed { get; private set; }
    internal ServiceBusEventSource Logger { get; internal set; }
    public string Identifier { get; }
    internal ServiceBusSender(string entityPath, ServiceBusConnection connection, ServiceBusSenderOptions options);
    protected ServiceBusSender(ServiceBusClient client, string queueOrTopicName);
    protected ServiceBusSender(ServiceBusClient client, string queueOrTopicName, ServiceBusSenderOptions options);
    public virtual string get_FullyQualifiedNamespace();
    [CompilerGeneratedAttribute]
public virtual string get_EntityPath();
    public virtual bool get_IsClosed();
    private void set_IsClosed(bool value);
    [CompilerGeneratedAttribute]
internal ServiceBusEventSource get_Logger();
    [CompilerGeneratedAttribute]
internal void set_Logger(ServiceBusEventSource value);
    [CompilerGeneratedAttribute]
public virtual string get_Identifier();
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.ServiceBusSender/<SendMessageAsync>d__25")]
public virtual Task SendMessageAsync(ServiceBusMessage message, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.ServiceBusSender/<SendMessagesAsync>d__26")]
public virtual Task SendMessagesAsync(IEnumerable`1<ServiceBusMessage> messages, CancellationToken cancellationToken);
    private DiagnosticScope CreateDiagnosticScope(IReadOnlyCollection`1<ServiceBusMessage> messages, string activityName, MessagingDiagnosticOperation operation);
    private DiagnosticScope CreateDiagnosticScope(ServiceBusMessageBatch messageBatch, string activityName, MessagingDiagnosticOperation operation);
    public virtual ValueTask`1<ServiceBusMessageBatch> CreateMessageBatchAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.ServiceBusSender/<CreateMessageBatchAsync>d__30")]
public virtual ValueTask`1<ServiceBusMessageBatch> CreateMessageBatchAsync(CreateMessageBatchOptions options, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.ServiceBusSender/<SendMessagesAsync>d__31")]
public virtual Task SendMessagesAsync(ServiceBusMessageBatch messageBatch, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.ServiceBusSender/<ScheduleMessageAsync>d__32")]
public virtual Task`1<long> ScheduleMessageAsync(ServiceBusMessage message, DateTimeOffset scheduledEnqueueTime, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.ServiceBusSender/<ScheduleMessagesAsync>d__33")]
public virtual Task`1<IReadOnlyList`1<long>> ScheduleMessagesAsync(IEnumerable`1<ServiceBusMessage> messages, DateTimeOffset scheduledEnqueueTime, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.ServiceBusSender/<CancelScheduledMessageAsync>d__34")]
public virtual Task CancelScheduledMessageAsync(long sequenceNumber, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.ServiceBusSender/<CancelScheduledMessagesAsync>d__35")]
public virtual Task CancelScheduledMessagesAsync(IEnumerable`1<long> sequenceNumbers, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.ServiceBusSender/<CloseAsync>d__36")]
public virtual Task CloseAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.ServiceBusSender/<DisposeAsync>d__37")]
public virtual ValueTask DisposeAsync();
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
}
public class Azure.Messaging.ServiceBus.ServiceBusSenderOptions : object {
    [CompilerGeneratedAttribute]
private string <Identifier>k__BackingField;
    public string Identifier { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Identifier();
    [CompilerGeneratedAttribute]
public void set_Identifier(string value);
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
}
public class Azure.Messaging.ServiceBus.ServiceBusSessionProcessor : object {
    [CompilerGeneratedAttribute]
private ServiceBusProcessor <InnerProcessor>k__BackingField;
    protected internal ServiceBusProcessor InnerProcessor { get; }
    public string EntityPath { get; }
    public string Identifier { get; }
    public ServiceBusReceiveMode ReceiveMode { get; }
    public int PrefetchCount { get; }
    public bool IsProcessing { get; }
    public bool AutoCompleteMessages { get; }
    public bool IsClosed { get; }
    public TimeSpan MaxAutoLockRenewalDuration { get; }
    public int MaxConcurrentSessions { get; }
    public int MaxConcurrentCallsPerSession { get; }
    public string FullyQualifiedNamespace { get; }
    public Nullable`1<TimeSpan> SessionIdleTimeout { get; }
    internal ServiceBusSessionProcessor(ServiceBusConnection connection, string entityPath, ServiceBusSessionProcessorOptions options);
    protected ServiceBusSessionProcessor(ServiceBusClient client, string queueName, ServiceBusSessionProcessorOptions options);
    protected ServiceBusSessionProcessor(ServiceBusClient client, string topicName, string subscriptionName, ServiceBusSessionProcessorOptions options);
    [CompilerGeneratedAttribute]
protected internal virtual ServiceBusProcessor get_InnerProcessor();
    public virtual string get_EntityPath();
    public virtual string get_Identifier();
    public virtual ServiceBusReceiveMode get_ReceiveMode();
    public virtual int get_PrefetchCount();
    public virtual bool get_IsProcessing();
    public virtual bool get_AutoCompleteMessages();
    public virtual bool get_IsClosed();
    public virtual TimeSpan get_MaxAutoLockRenewalDuration();
    public virtual int get_MaxConcurrentSessions();
    public virtual int get_MaxConcurrentCallsPerSession();
    public virtual string get_FullyQualifiedNamespace();
    public virtual Nullable`1<TimeSpan> get_SessionIdleTimeout();
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.ServiceBusSessionProcessor/<OnProcessSessionMessageAsync>d__31")]
protected internal virtual Task OnProcessSessionMessageAsync(ProcessSessionMessageEventArgs args);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.ServiceBusSessionProcessor/<OnProcessErrorAsync>d__32")]
protected internal virtual Task OnProcessErrorAsync(ProcessErrorEventArgs args);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.ServiceBusSessionProcessor/<OnSessionInitializingAsync>d__33")]
protected internal virtual Task OnSessionInitializingAsync(ProcessSessionEventArgs args);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.ServiceBusSessionProcessor/<OnSessionClosingAsync>d__34")]
protected internal virtual Task OnSessionClosingAsync(ProcessSessionEventArgs args);
    public void add_ProcessMessageAsync(Func`2<ProcessSessionMessageEventArgs, Task> value);
    public void remove_ProcessMessageAsync(Func`2<ProcessSessionMessageEventArgs, Task> value);
    public void add_ProcessErrorAsync(Func`2<ProcessErrorEventArgs, Task> value);
    public void remove_ProcessErrorAsync(Func`2<ProcessErrorEventArgs, Task> value);
    public void add_SessionInitializingAsync(Func`2<ProcessSessionEventArgs, Task> value);
    public void remove_SessionInitializingAsync(Func`2<ProcessSessionEventArgs, Task> value);
    public void add_SessionClosingAsync(Func`2<ProcessSessionEventArgs, Task> value);
    public void remove_SessionClosingAsync(Func`2<ProcessSessionEventArgs, Task> value);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.ServiceBusSessionProcessor/<StartProcessingAsync>d__47")]
public virtual Task StartProcessingAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.ServiceBusSessionProcessor/<StopProcessingAsync>d__48")]
public virtual Task StopProcessingAsync(CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.ServiceBusSessionProcessor/<CloseAsync>d__52")]
public virtual Task CloseAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.ServiceBusSessionProcessor/<DisposeAsync>d__53")]
public sealed virtual ValueTask DisposeAsync();
    public void UpdateConcurrency(int maxConcurrentSessions, int maxConcurrentCallsPerSession);
    public void UpdatePrefetchCount(int prefetchCount);
}
public class Azure.Messaging.ServiceBus.ServiceBusSessionProcessorOptions : object {
    private int _prefetchCount;
    [CompilerGeneratedAttribute]
private ServiceBusReceiveMode <ReceiveMode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Identifier>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AutoCompleteMessages>k__BackingField;
    private TimeSpan _maxAutoRenewDuration;
    private Nullable`1<TimeSpan> _sessionIdleTimeout;
    private int _maxConcurrentSessions;
    private int _maxConcurrentCallsPerSessions;
    [CompilerGeneratedAttribute]
private IList`1<string> <SessionIds>k__BackingField;
    public int PrefetchCount { get; public set; }
    public ServiceBusReceiveMode ReceiveMode { get; public set; }
    public string Identifier { get; public set; }
    public bool AutoCompleteMessages { get; public set; }
    public TimeSpan MaxAutoLockRenewalDuration { get; public set; }
    public Nullable`1<TimeSpan> SessionIdleTimeout { get; public set; }
    public int MaxConcurrentSessions { get; public set; }
    public int MaxConcurrentCallsPerSession { get; public set; }
    public IList`1<string> SessionIds { get; }
    public int get_PrefetchCount();
    public void set_PrefetchCount(int value);
    [CompilerGeneratedAttribute]
public ServiceBusReceiveMode get_ReceiveMode();
    [CompilerGeneratedAttribute]
public void set_ReceiveMode(ServiceBusReceiveMode value);
    [CompilerGeneratedAttribute]
public string get_Identifier();
    [CompilerGeneratedAttribute]
public void set_Identifier(string value);
    [CompilerGeneratedAttribute]
public bool get_AutoCompleteMessages();
    [CompilerGeneratedAttribute]
public void set_AutoCompleteMessages(bool value);
    public TimeSpan get_MaxAutoLockRenewalDuration();
    public void set_MaxAutoLockRenewalDuration(TimeSpan value);
    public Nullable`1<TimeSpan> get_SessionIdleTimeout();
    public void set_SessionIdleTimeout(Nullable`1<TimeSpan> value);
    public int get_MaxConcurrentSessions();
    public void set_MaxConcurrentSessions(int value);
    public int get_MaxConcurrentCallsPerSession();
    public void set_MaxConcurrentCallsPerSession(int value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_SessionIds();
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    internal ServiceBusProcessorOptions ToProcessorOptions();
}
public class Azure.Messaging.ServiceBus.ServiceBusSessionReceiver : ServiceBusReceiver {
    private ServiceBusConnection _connection;
    public string SessionId { get; }
    public bool IsClosed { get; }
    public DateTimeOffset SessionLockedUntil { get; }
    internal ServiceBusSessionReceiver(ServiceBusConnection connection, string entityPath, ServiceBusSessionReceiverOptions options, CancellationToken cancellationToken, string sessionId, bool isProcessor);
    public virtual string get_SessionId();
    public virtual bool get_IsClosed();
    public virtual DateTimeOffset get_SessionLockedUntil();
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.ServiceBusSessionReceiver/<CreateSessionReceiverAsync>d__7")]
internal static Task`1<ServiceBusSessionReceiver> CreateSessionReceiverAsync(string entityPath, ServiceBusConnection connection, ServiceBusSessionReceiverOptions options, string sessionId, CancellationToken cancellationToken, bool isProcessor);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.ServiceBusSessionReceiver/<GetSessionStateAsync>d__10")]
public virtual Task`1<BinaryData> GetSessionStateAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.ServiceBusSessionReceiver/<SetSessionStateAsync>d__11")]
public virtual Task SetSessionStateAsync(BinaryData sessionState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.ServiceBusSessionReceiver/<RenewSessionLockAsync>d__12")]
public virtual Task RenewSessionLockAsync(CancellationToken cancellationToken);
}
public class Azure.Messaging.ServiceBus.ServiceBusSessionReceiverOptions : object {
    private int _prefetchCount;
    [CompilerGeneratedAttribute]
private ServiceBusReceiveMode <ReceiveMode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Identifier>k__BackingField;
    public int PrefetchCount { get; public set; }
    public ServiceBusReceiveMode ReceiveMode { get; public set; }
    public string Identifier { get; public set; }
    public int get_PrefetchCount();
    public void set_PrefetchCount(int value);
    [CompilerGeneratedAttribute]
public ServiceBusReceiveMode get_ReceiveMode();
    [CompilerGeneratedAttribute]
public void set_ReceiveMode(ServiceBusReceiveMode value);
    [CompilerGeneratedAttribute]
public string get_Identifier();
    [CompilerGeneratedAttribute]
public void set_Identifier(string value);
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    internal ServiceBusReceiverOptions ToReceiverOptions();
}
public enum Azure.Messaging.ServiceBus.ServiceBusTransportType : Enum {
    public int value__;
    public static ServiceBusTransportType AmqpTcp;
    public static ServiceBusTransportType AmqpWebSockets;
}
public class Azure.Messaging.ServiceBus.SessionLockLostEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private DateTimeOffset <SessionLockedUntil>k__BackingField;
    [CompilerGeneratedAttribute]
private ServiceBusReceivedMessage <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    public DateTimeOffset SessionLockedUntil { get; }
    public ServiceBusReceivedMessage Message { get; }
    public Exception Exception { get; }
    public SessionLockLostEventArgs(ServiceBusReceivedMessage message, DateTimeOffset sessionLockedUntil, Exception exception);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_SessionLockedUntil();
    [CompilerGeneratedAttribute]
public ServiceBusReceivedMessage get_Message();
    [CompilerGeneratedAttribute]
public Exception get_Exception();
}
internal class Azure.Messaging.ServiceBus.SessionReceiverManager : ReceiverManager {
    private int _activeTaskCount;
    private SemaphoreSlim _concurrentAcceptSessionsSemaphore;
    private ServiceBusSessionReceiverOptions _sessionReceiverOptions;
    private string _sessionId;
    private bool _keepOpenOnReceiveTimeout;
    private ServiceBusSessionReceiver _receiver;
    private CancellationTokenSource _sessionLockRenewalCancellationSource;
    private Task _sessionLockRenewalTask;
    private CancellationTokenSource _sessionCancellationSource;
    private CancellationTokenSource _sessionLockCancellationTokenSource;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _receiveTimeout;
    private SemaphoreSlim _semaphore;
    private ServiceBusSessionProcessor _sessionProcessor;
    [CompilerGeneratedAttribute]
private Exception <SessionLockLostException>k__BackingField;
    internal ServiceBusReceiver Receiver { get; }
    internal CancellationToken SessionLockCancellationToken { get; }
    internal Exception SessionLockLostException { get; private set; }
    public SessionReceiverManager(ServiceBusSessionProcessor sessionProcessor, string sessionId, SemaphoreSlim concurrentAcceptSessionsSemaphore, MessagingClientDiagnostics clientDiagnostics, bool keepOpenOnReceiveTimeout);
    internal virtual ServiceBusReceiver get_Receiver();
    internal CancellationToken get_SessionLockCancellationToken();
    [CompilerGeneratedAttribute]
internal Exception get_SessionLockLostException();
    [CompilerGeneratedAttribute]
private void set_SessionLockLostException(Exception value);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.SessionReceiverManager/<EnsureCanProcess>d__22")]
private Task`1<bool> EnsureCanProcess(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.SessionReceiverManager/<WaitSemaphore>d__23")]
private Task WaitSemaphore(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.SessionReceiverManager/<CreateAndInitializeSessionReceiver>d__24")]
private Task CreateAndInitializeSessionReceiver(CancellationToken processorCancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.SessionReceiverManager/<CreateReceiver>d__25")]
private Task CreateReceiver(CancellationToken processorCancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.SessionReceiverManager/<CloseReceiverIfNeeded>d__26")]
public virtual Task CloseReceiverIfNeeded(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.SessionReceiverManager/<CloseReceiverCore>d__27")]
private Task CloseReceiverCore(bool forceClose, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.SessionReceiverManager/<CloseReceiver>d__28")]
private Task CloseReceiver(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.SessionReceiverManager/<ReceiveAndProcessMessagesAsync>d__29")]
public virtual Task ReceiveAndProcessMessagesAsync(CancellationToken processorCancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.SessionReceiverManager/<RenewSessionLock>d__30")]
private Task RenewSessionLock();
    protected virtual EventArgs ConstructEventArgs(ServiceBusReceivedMessage message, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.SessionReceiverManager/<OnMessageHandler>d__32")]
protected virtual Task OnMessageHandler(EventArgs args);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.SessionReceiverManager/<RaiseExceptionReceived>d__33")]
protected virtual Task RaiseExceptionReceived(ProcessErrorEventArgs eventArgs);
    [AsyncStateMachineAttribute("Azure.Messaging.ServiceBus.SessionReceiverManager/<CancelAsync>d__34")]
public virtual Task CancelAsync();
    internal void RefreshSessionLockToken();
}
public enum Azure.Messaging.ServiceBus.SubQueue : Enum {
    public int value__;
    public static SubQueue None;
    public static SubQueue DeadLetter;
    public static SubQueue TransferDeadLetter;
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[ExtensionAttribute]
public static class Microsoft.Extensions.Azure.ServiceBusClientBuilderExtensions : object {
    [ExtensionAttribute]
public static IAzureClientBuilder`2<ServiceBusClient, ServiceBusClientOptions> AddServiceBusClient(TBuilder builder, string connectionString);
    [ExtensionAttribute]
public static IAzureClientBuilder`2<ServiceBusClient, ServiceBusClientOptions> AddServiceBusClientWithNamespace(TBuilder builder, string fullyQualifiedNamespace);
    [ExtensionAttribute]
public static IAzureClientBuilder`2<ServiceBusClient, ServiceBusClientOptions> AddServiceBusClient(TBuilder builder, TConfiguration configuration);
    [ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static IAzureClientBuilder`2<ServiceBusAdministrationClient, ServiceBusAdministrationClientOptions> AddServiceAdministrationBusClient(TBuilder builder, string connectionString);
    [ExtensionAttribute]
public static IAzureClientBuilder`2<ServiceBusAdministrationClient, ServiceBusAdministrationClientOptions> AddServiceBusAdministrationClient(TBuilder builder, string connectionString);
    [ExtensionAttribute]
public static IAzureClientBuilder`2<ServiceBusAdministrationClient, ServiceBusAdministrationClientOptions> AddServiceBusAdministrationClientWithNamespace(TBuilder builder, string fullyQualifiedNamespace);
    [ExtensionAttribute]
public static IAzureClientBuilder`2<ServiceBusAdministrationClient, ServiceBusAdministrationClientOptions> AddServiceBusAdministrationClient(TBuilder builder, TConfiguration configuration);
}
[AttributeUsageAttribute("28108")]
internal class System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembersAttribute : Attribute {
    [CompilerGeneratedAttribute]
private DynamicallyAccessedMemberTypes <MemberTypes>k__BackingField;
    public DynamicallyAccessedMemberTypes MemberTypes { get; }
    public DynamicallyAccessedMembersAttribute(DynamicallyAccessedMemberTypes memberTypes);
    [CompilerGeneratedAttribute]
public DynamicallyAccessedMemberTypes get_MemberTypes();
}
[FlagsAttribute]
internal enum System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes : Enum {
    public int value__;
    public static DynamicallyAccessedMemberTypes None;
    public static DynamicallyAccessedMemberTypes PublicParameterlessConstructor;
    public static DynamicallyAccessedMemberTypes PublicConstructors;
    public static DynamicallyAccessedMemberTypes NonPublicConstructors;
    public static DynamicallyAccessedMemberTypes PublicMethods;
    public static DynamicallyAccessedMemberTypes NonPublicMethods;
    public static DynamicallyAccessedMemberTypes PublicFields;
    public static DynamicallyAccessedMemberTypes NonPublicFields;
    public static DynamicallyAccessedMemberTypes PublicNestedTypes;
    public static DynamicallyAccessedMemberTypes NonPublicNestedTypes;
    public static DynamicallyAccessedMemberTypes PublicProperties;
    public static DynamicallyAccessedMemberTypes NonPublicProperties;
    public static DynamicallyAccessedMemberTypes PublicEvents;
    public static DynamicallyAccessedMemberTypes NonPublicEvents;
    public static DynamicallyAccessedMemberTypes Interfaces;
    public static DynamicallyAccessedMemberTypes All;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("352")]
internal class System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <MemberSignature>k__BackingField;
    [CompilerGeneratedAttribute]
private DynamicallyAccessedMemberTypes <MemberTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssemblyName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Condition>k__BackingField;
    public string MemberSignature { get; }
    public DynamicallyAccessedMemberTypes MemberTypes { get; }
    public Type Type { get; }
    public string TypeName { get; }
    public string AssemblyName { get; }
    public string Condition { get; public set; }
    [NullableContextAttribute("1")]
public DynamicDependencyAttribute(string memberSignature);
    [NullableContextAttribute("1")]
public DynamicDependencyAttribute(string memberSignature, Type type);
    [NullableContextAttribute("1")]
public DynamicDependencyAttribute(string memberSignature, string typeName, string assemblyName);
    [NullableContextAttribute("1")]
public DynamicDependencyAttribute(DynamicallyAccessedMemberTypes memberTypes, Type type);
    [NullableContextAttribute("1")]
public DynamicDependencyAttribute(DynamicallyAccessedMemberTypes memberTypes, string typeName, string assemblyName);
    [CompilerGeneratedAttribute]
public string get_MemberSignature();
    [CompilerGeneratedAttribute]
public DynamicallyAccessedMemberTypes get_MemberTypes();
    [CompilerGeneratedAttribute]
public Type get_Type();
    [CompilerGeneratedAttribute]
public string get_TypeName();
    [CompilerGeneratedAttribute]
public string get_AssemblyName();
    [CompilerGeneratedAttribute]
public string get_Condition();
    [CompilerGeneratedAttribute]
public void set_Condition(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("100")]
internal class System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    public string Message { get; }
    [NullableAttribute("2")]
public string Url { get; public set; }
    public RequiresDynamicCodeAttribute(string message);
    [CompilerGeneratedAttribute]
public string get_Message();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Url();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Url(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("100")]
internal class System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    public string Message { get; }
    [NullableAttribute("2")]
public string Url { get; public set; }
    public RequiresUnreferencedCodeAttribute(string message);
    [CompilerGeneratedAttribute]
public string get_Message();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Url();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Url(string value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("32767")]
internal class System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute : Attribute {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <Category>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <CheckId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Scope>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Target>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MessageId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Justification>k__BackingField;
    [NullableAttribute("1")]
public string Category { get; }
    [NullableAttribute("1")]
public string CheckId { get; }
    public string Scope { get; public set; }
    public string Target { get; public set; }
    public string MessageId { get; public set; }
    public string Justification { get; public set; }
    [NullableContextAttribute("1")]
public UnconditionalSuppressMessageAttribute(string category, string checkId);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_Category();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_CheckId();
    [CompilerGeneratedAttribute]
public string get_Scope();
    [CompilerGeneratedAttribute]
public void set_Scope(string value);
    [CompilerGeneratedAttribute]
public string get_Target();
    [CompilerGeneratedAttribute]
public void set_Target(string value);
    [CompilerGeneratedAttribute]
public string get_MessageId();
    [CompilerGeneratedAttribute]
public void set_MessageId(string value);
    [CompilerGeneratedAttribute]
public string get_Justification();
    [CompilerGeneratedAttribute]
public void set_Justification(string value);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
