[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Autorest.CSharp.Core.GeneratorPageableHelpers : object {
    public static AsyncPageable`1<T> CreateAsyncPageable(Func`2<Nullable`1<int>, HttpMessage> createFirstPageRequest, Func`3<Nullable`1<int>, string, HttpMessage> createNextPageRequest, Func`2<Response, ValueTuple`2<List`1<T>, string>> responseParser, ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, string scopeName, RequestContext requestContext);
    public static AsyncPageable`1<T> CreateAsyncPageable(Func`2<Nullable`1<int>, HttpMessage> createFirstPageRequest, Func`3<Nullable`1<int>, string, HttpMessage> createNextPageRequest, Func`2<JsonElement, T> valueFactory, ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, string scopeName, string itemPropertyName, string nextLinkPropertyName, CancellationToken cancellationToken);
    public static AsyncPageable`1<T> CreateAsyncPageable(Func`2<Nullable`1<int>, HttpMessage> createFirstPageRequest, Func`3<Nullable`1<int>, string, HttpMessage> createNextPageRequest, Func`2<JsonElement, T> valueFactory, ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, string scopeName, string itemPropertyName, string nextLinkPropertyName, RequestContext requestContext);
    public static AsyncPageable`1<T> CreateAsyncPageable(Response initialResponse, Func`3<Nullable`1<int>, string, HttpMessage> createNextPageRequest, Func`2<JsonElement, T> valueFactory, ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, string scopeName, string itemPropertyName, string nextLinkPropertyName, CancellationToken cancellationToken);
    public static Pageable`1<T> CreatePageable(Func`2<Nullable`1<int>, HttpMessage> createFirstPageRequest, Func`3<Nullable`1<int>, string, HttpMessage> createNextPageRequest, Func`2<Response, ValueTuple`2<List`1<T>, string>> responseParser, ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, string scopeName, RequestContext requestContext);
    public static Pageable`1<T> CreatePageable(Func`2<Nullable`1<int>, HttpMessage> createFirstPageRequest, Func`3<Nullable`1<int>, string, HttpMessage> createNextPageRequest, Func`2<JsonElement, T> valueFactory, ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, string scopeName, string itemPropertyName, string nextLinkPropertyName, CancellationToken cancellationToken);
    public static Pageable`1<T> CreatePageable(Func`2<Nullable`1<int>, HttpMessage> createFirstPageRequest, Func`3<Nullable`1<int>, string, HttpMessage> createNextPageRequest, Func`2<JsonElement, T> valueFactory, ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, string scopeName, string itemPropertyName, string nextLinkPropertyName, RequestContext requestContext);
    public static Pageable`1<T> CreatePageable(Response initialResponse, Func`3<Nullable`1<int>, string, HttpMessage> createNextPageRequest, Func`2<JsonElement, T> valueFactory, ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, string scopeName, string itemPropertyName, string nextLinkPropertyName, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Autorest.CSharp.Core.GeneratorPageableHelpers/<CreateAsyncPageable>d__8`1")]
public static ValueTask`1<Operation`1<AsyncPageable`1<T>>> CreateAsyncPageable(WaitUntil waitUntil, HttpMessage message, Func`3<Nullable`1<int>, string, HttpMessage> createNextPageMethod, Func`2<JsonElement, T> valueFactory, ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, OperationFinalStateVia finalStateVia, string scopeName, string itemPropertyName, string nextLinkPropertyName, RequestContext requestContext);
    public static Operation`1<Pageable`1<T>> CreatePageable(WaitUntil waitUntil, HttpMessage message, Func`3<Nullable`1<int>, string, HttpMessage> createNextPageMethod, Func`2<JsonElement, T> valueFactory, ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, OperationFinalStateVia finalStateVia, string scopeName, string itemPropertyName, string nextLinkPropertyName, RequestContext requestContext);
    public static Pageable`1<T> CreateEnumerable(Func`2<Nullable`1<int>, Page`1<T>> firstPageFunc, Func`3<string, Nullable`1<int>, Page`1<T>> nextPageFunc, Nullable`1<int> pageSize);
    public static AsyncPageable`1<T> CreateAsyncEnumerable(Func`2<Nullable`1<int>, Task`1<Page`1<T>>> firstPageFunc, Func`3<string, Nullable`1<int>, Task`1<Page`1<T>>> nextPageFunc, Nullable`1<int> pageSize);
}
internal static class Azure.Core.AppContextSwitchHelper : object {
    [NullableContextAttribute("1")]
public static bool GetConfigValue(string appContexSwitchName, string environmentVariableName);
}
internal class Azure.Core.ArrayBufferWriter`1 : object {
    private T[] _buffer;
    private static int DefaultInitialBufferSize;
    [CompilerGeneratedAttribute]
private int <WrittenCount>k__BackingField;
    public ReadOnlyMemory`1<T> WrittenMemory { get; }
    public ReadOnlySpan`1<T> WrittenSpan { get; }
    public int WrittenCount { get; private set; }
    public int Capacity { get; }
    public int FreeCapacity { get; }
    public ArrayBufferWriter`1(int initialCapacity);
    public ReadOnlyMemory`1<T> get_WrittenMemory();
    public ReadOnlySpan`1<T> get_WrittenSpan();
    [CompilerGeneratedAttribute]
public int get_WrittenCount();
    [CompilerGeneratedAttribute]
private void set_WrittenCount(int value);
    public int get_Capacity();
    public int get_FreeCapacity();
    public void Clear();
    public sealed virtual void Advance(int count);
    public sealed virtual Memory`1<T> GetMemory(int sizeHint);
    public sealed virtual Span`1<T> GetSpan(int sizeHint);
    private void CheckAndResizeBuffer(int sizeHint);
    private static void ThrowInvalidOperationException_AdvancedTooFar(int capacity);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Azure.Core.AsyncLockWithValue`1 : object {
    private object _syncObj;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Queue`1<TaskCompletionSource`1<LockOrValue<T>>> _waiters;
    private bool _isLocked;
    private bool _hasValue;
    private long _index;
    [NullableAttribute("2")]
private T _value;
    public bool HasValue { get; }
    public AsyncLockWithValue`1(T value);
    public bool get_HasValue();
    [NullableContextAttribute("2")]
public bool TryGetValue(T& value);
    [NullableContextAttribute("0")]
[AsyncStateMachineAttribute("Azure.Core.AsyncLockWithValue`1/<GetLockOrValueAsync>d__11")]
public ValueTask`1<LockOrValue<T>> GetLockOrValueAsync(bool async, CancellationToken cancellationToken);
    private void SetValue(T value, Int64& lockIndex);
    private void Reset(Int64& lockIndex);
    private void UnlockOrGetNextWaiter(Int64& lockIndex, TaskCompletionSource`1& nextWaiter);
}
[AttributeUsageAttribute("1")]
internal class Azure.Core.AzureResourceProviderNamespaceAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ResourceProviderNamespace>k__BackingField;
    public string ResourceProviderNamespace { get; }
    public AzureResourceProviderNamespaceAttribute(string resourceProviderNamespace);
    [CompilerGeneratedAttribute]
public string get_ResourceProviderNamespace();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("4")]
internal class Azure.Core.CodeGenClientAttribute : CodeGenTypeAttribute {
    [CompilerGeneratedAttribute]
private Type <ParentClient>k__BackingField;
    public Type ParentClient { get; public set; }
    [NullableContextAttribute("1")]
public CodeGenClientAttribute(string originalName);
    [CompilerGeneratedAttribute]
public Type get_ParentClient();
    [CompilerGeneratedAttribute]
public void set_ParentClient(Type value);
}
[AttributeUsageAttribute("384")]
internal class Azure.Core.CodeGenMemberAttribute : CodeGenTypeAttribute {
    [NullableContextAttribute("1")]
public CodeGenMemberAttribute(string originalName);
}
[AttributeUsageAttribute("28")]
internal class Azure.Core.CodeGenModelAttribute : CodeGenTypeAttribute {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private String[] <Usage>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private String[] <Formats>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] Usage { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] Formats { get; public set; }
    [NullableContextAttribute("1")]
public CodeGenModelAttribute(string originalName);
    [CompilerGeneratedAttribute]
public String[] get_Usage();
    [CompilerGeneratedAttribute]
public void set_Usage(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_Formats();
    [CompilerGeneratedAttribute]
public void set_Formats(String[] value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("1")]
internal class Azure.Core.CodeGenOverrideServiceVersionsAttribute : Attribute {
    [CompilerGeneratedAttribute]
private String[] <Versions>k__BackingField;
    public String[] Versions { get; }
    public CodeGenOverrideServiceVersionsAttribute(String[] versions);
    [CompilerGeneratedAttribute]
public String[] get_Versions();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("12")]
internal class Azure.Core.CodeGenSerializationAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <PropertyName>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private String[] <SerializationPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SerializationValueHook>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DeserializationValueHook>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BicepSerializationValueHook>k__BackingField;
    public string PropertyName { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] SerializationPath { get; }
    public string SerializationValueHook { get; public set; }
    public string DeserializationValueHook { get; public set; }
    public string BicepSerializationValueHook { get; public set; }
    [NullableContextAttribute("1")]
public CodeGenSerializationAttribute(string propertyName);
    [NullableContextAttribute("1")]
public CodeGenSerializationAttribute(string propertyName, string serializationName);
    [NullableContextAttribute("1")]
public CodeGenSerializationAttribute(string propertyName, String[] serializationPath);
    [CompilerGeneratedAttribute]
public string get_PropertyName();
    [CompilerGeneratedAttribute]
public void set_PropertyName(string value);
    [CompilerGeneratedAttribute]
public String[] get_SerializationPath();
    [CompilerGeneratedAttribute]
public string get_SerializationValueHook();
    [CompilerGeneratedAttribute]
public void set_SerializationValueHook(string value);
    [CompilerGeneratedAttribute]
public string get_DeserializationValueHook();
    [CompilerGeneratedAttribute]
public void set_DeserializationValueHook(string value);
    [CompilerGeneratedAttribute]
public string get_BicepSerializationValueHook();
    [CompilerGeneratedAttribute]
public void set_BicepSerializationValueHook(string value);
}
[AttributeUsageAttribute("28")]
internal class Azure.Core.CodeGenSuppressAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Member>k__BackingField;
    [CompilerGeneratedAttribute]
private Type[] <Parameters>k__BackingField;
    public string Member { get; }
    public Type[] Parameters { get; }
    public CodeGenSuppressAttribute(string member, Type[] parameters);
    [CompilerGeneratedAttribute]
public string get_Member();
    [CompilerGeneratedAttribute]
public Type[] get_Parameters();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("1")]
internal class Azure.Core.CodeGenSuppressTypeAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Typename>k__BackingField;
    public string Typename { get; }
    public CodeGenSuppressTypeAttribute(string typename);
    [CompilerGeneratedAttribute]
public string get_Typename();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("4")]
internal class Azure.Core.CodeGenTypeAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <OriginalName>k__BackingField;
    public string OriginalName { get; }
    public CodeGenTypeAttribute(string originalName);
    [CompilerGeneratedAttribute]
public string get_OriginalName();
}
internal class Azure.Core.FixedDelayWithNoJitterStrategy : DelayStrategy {
    private static TimeSpan DefaultDelay;
    private TimeSpan _delay;
    public FixedDelayWithNoJitterStrategy(Nullable`1<TimeSpan> suggestedDelay);
    private static FixedDelayWithNoJitterStrategy();
    [NullableContextAttribute("2")]
protected virtual TimeSpan GetNextDelayCore(Response response, int retryNumber);
}
internal class Azure.Core.FormUrlEncodedContent : RequestContent {
    private List`1<KeyValuePair`2<string, string>> _values;
    private Encoding Latin1;
    private Byte[] _bytes;
    public void Add(string parameter, string value);
    private void BuildIfNeeded();
    [AsyncStateMachineAttribute("Azure.Core.FormUrlEncodedContent/<WriteToAsync>d__5")]
public virtual Task WriteToAsync(Stream stream, CancellationToken cancellation);
    public virtual void WriteTo(Stream stream, CancellationToken cancellation);
    public virtual bool TryComputeLength(Int64& length);
    public virtual void Dispose();
    private Byte[] GetContentByteArray(IEnumerable`1<KeyValuePair`2<string, string>> nameValueCollection);
    private static string Encode(string data);
}
[AttributeUsageAttribute("64")]
internal class Azure.Core.ForwardsClientCallsAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <SkipChecks>k__BackingField;
    public bool SkipChecks { get; }
    public ForwardsClientCallsAttribute(bool skipChecks);
    [CompilerGeneratedAttribute]
public bool get_SkipChecks();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Azure.Core.HttpMessageSanitizer : object {
    private static string LogAllValue;
    private bool _logAllHeaders;
    private bool _logFullQueries;
    private String[] _allowedQueryParameters;
    private string _redactedPlaceholder;
    private HashSet`1<string> _allowedHeaders;
    [NullableAttribute("2")]
[ThreadStaticAttribute]
private static StringBuilder s_cachedStringBuilder;
    private static int MaxCachedStringBuilderCapacity;
    internal static HttpMessageSanitizer Default;
    public HttpMessageSanitizer(String[] allowedQueryParameters, String[] allowedHeaders, string redactedPlaceholder);
    private static HttpMessageSanitizer();
    public string SanitizeHeader(string name, string value);
    public string SanitizeUrl(string url);
    private static StringBuilder RentStringBuilder(int capacity);
    private static string ToStringAndReturnStringBuilder(StringBuilder builder);
    [CompilerGeneratedAttribute]
internal static StringBuilder <SanitizeUrl>g__AppendReadOnlySpan|11_0(StringBuilder builder, ReadOnlySpan`1<char> span);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Azure.Core.HttpPipelineExtensions : object {
    [AsyncStateMachineAttribute("Azure.Core.HttpPipelineExtensions/<ProcessMessageAsync>d__0")]
[ExtensionAttribute]
public static ValueTask`1<Response> ProcessMessageAsync(HttpPipeline pipeline, HttpMessage message, RequestContext requestContext, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Response ProcessMessage(HttpPipeline pipeline, HttpMessage message, RequestContext requestContext, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Core.HttpPipelineExtensions/<ProcessHeadAsBoolMessageAsync>d__2")]
[ExtensionAttribute]
public static ValueTask`1<Response`1<bool>> ProcessHeadAsBoolMessageAsync(HttpPipeline pipeline, HttpMessage message, ClientDiagnostics clientDiagnostics, RequestContext requestContext);
    [ExtensionAttribute]
public static Response`1<bool> ProcessHeadAsBoolMessage(HttpPipeline pipeline, HttpMessage message, ClientDiagnostics clientDiagnostics, RequestContext requestContext);
    [NullableContextAttribute("0")]
private static ValueTuple`2<CancellationToken, ErrorOptions> ApplyRequestContext(RequestContext requestContext);
}
internal interface Azure.Core.IOperation {
    public abstract virtual ValueTask`1<OperationState> UpdateStateAsync(bool async, CancellationToken cancellationToken);
}
[NullableContextAttribute("2")]
internal interface Azure.Core.IOperation`1 {
    public abstract virtual ValueTask`1<OperationState`1<T>> UpdateStateAsync(bool async, CancellationToken cancellationToken);
}
internal interface Azure.Core.IOperationSource`1 {
    public abstract virtual T CreateResult(Response response, CancellationToken cancellationToken);
    public abstract virtual ValueTask`1<T> CreateResultAsync(Response response, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
internal interface Azure.Core.IUtf8JsonSerializable {
    public abstract virtual void Write(Utf8JsonWriter writer);
}
[NullableContextAttribute("1")]
internal interface Azure.Core.IXmlSerializable {
    public abstract virtual void Write(XmlWriter writer, string nameHint);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Azure.Core.NextLinkOperationImplementation : object {
    internal static string NotSet;
    internal static string RehydrationTokenVersion;
    private static string ApiVersionParam;
    private static String[] FailureStates;
    private static String[] SuccessStates;
    private HeaderSource _headerSource;
    private Uri _startRequestUri;
    private OperationFinalStateVia _finalStateVia;
    private HttpPipeline _pipeline;
    [NullableAttribute("2")]
private string _apiVersion;
    [NullableAttribute("2")]
private string _lastKnownLocation;
    private string _nextRequestUri;
    [CompilerGeneratedAttribute]
private string <OperationId>k__BackingField;
    [CompilerGeneratedAttribute]
private RequestMethod <RequestMethod>k__BackingField;
    public string OperationId { get; private set; }
    public RequestMethod RequestMethod { get; }
    private NextLinkOperationImplementation(HttpPipeline pipeline, RequestMethod requestMethod, Uri startRequestUri, string nextRequestUri, HeaderSource headerSource, string lastKnownLocation, OperationFinalStateVia finalStateVia, string apiVersion, string operationId, bool isNextRequestPolling);
    private static NextLinkOperationImplementation();
    [CompilerGeneratedAttribute]
public string get_OperationId();
    [CompilerGeneratedAttribute]
private void set_OperationId(string value);
    [CompilerGeneratedAttribute]
public RequestMethod get_RequestMethod();
    public static IOperation Create(HttpPipeline pipeline, RequestMethod requestMethod, Uri startRequestUri, Response response, OperationFinalStateVia finalStateVia, bool skipApiVersionOverride, string apiVersionOverrideValue);
    public static IOperation`1<T> Create(IOperationSource`1<T> operationSource, HttpPipeline pipeline, RequestMethod requestMethod, Uri startRequestUri, Response response, OperationFinalStateVia finalStateVia, bool skipApiVersionOverride, string apiVersionOverrideValue);
    public static IOperation`1<T> Create(IOperationSource`1<T> operationSource, IOperation operation);
    public static IOperation Create(HttpPipeline pipeline, RehydrationToken rehydrationToken);
    private static string ParseOperationId(Uri startRequestUri, string nextRequestUri);
    public RehydrationToken GetRehydrationToken();
    public static RehydrationToken GetRehydrationToken(RequestMethod requestMethod, Uri startRequestUri, Response response, OperationFinalStateVia finalStateVia);
    public static RehydrationToken GetRehydrationToken(RequestMethod requestMethod, Uri startRequestUri, string nextRequestUri, string headerSource, string lastKnownLocation, string finalStateVia, string operationId);
    [NullableContextAttribute("2")]
private static string ConstructStringValue(string value);
    [NullableContextAttribute("0")]
[AsyncStateMachineAttribute("Azure.Core.NextLinkOperationImplementation/<UpdateStateAsync>d__29")]
public sealed virtual ValueTask`1<OperationState> UpdateStateAsync(bool async, CancellationToken cancellationToken);
    private static OperationState GetOperationStateFromFinalResponse(RequestMethod requestMethod, Response response);
    private void UpdateNextRequestUri(ResponseHeaders headers);
    internal static string AppendOrReplaceApiVersion(string uri, string apiVersion);
    [NullableContextAttribute("0")]
internal static bool TryGetApiVersion(Uri startRequestUri, ReadOnlySpan`1& apiVersion);
    [NullableContextAttribute("2")]
private string GetFinalUri(string resourceLocation);
    private Response GetResponse(string uri, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Core.NextLinkOperationImplementation/<GetResponseAsync>d__36")]
private ValueTask`1<Response> GetResponseAsync(string uri, CancellationToken cancellationToken);
    private HttpMessage CreateRequest(string uri);
    private static bool IsFinalState(Response response, HeaderSource headerSource, Nullable`1& failureState, String& resourceLocation);
    private static string GetRequiredString(JsonElement& element);
    private static bool ShouldIgnoreHeader(RequestMethod method, Response response);
    private static HeaderSource GetHeaderSource(RequestMethod requestMethod, Uri requestUri, Response response, string apiVersion, String& nextRequestUri, Boolean& isNextRequestPolling);
    private static void AssertNotNull(T value, string name);
}
internal enum Azure.Core.OperationFinalStateVia : Enum {
    public int value__;
    public static OperationFinalStateVia AzureAsyncOperation;
    public static OperationFinalStateVia Location;
    public static OperationFinalStateVia OriginalUri;
    public static OperationFinalStateVia OperationLocation;
    public static OperationFinalStateVia LocationOverride;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Azure.Core.OperationHelpers : object {
    public static T GetValue(T& value);
    [NullableContextAttribute("0")]
public static T GetValue(Nullable`1& value);
    [AsyncStateMachineAttribute("Azure.Core.OperationHelpers/<DefaultWaitForCompletionAsync>d__2`1")]
[ExtensionAttribute]
public static ValueTask`1<Response`1<TResult>> DefaultWaitForCompletionAsync(Operation`1<TResult> operation, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Core.OperationHelpers/<DefaultWaitForCompletionAsync>d__3`1")]
[ExtensionAttribute]
public static ValueTask`1<Response`1<TResult>> DefaultWaitForCompletionAsync(Operation`1<TResult> operation, TimeSpan pollingInterval, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Response`1<TResult> DefaultWaitForCompletion(Operation`1<TResult> operation, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Response`1<TResult> DefaultWaitForCompletion(Operation`1<TResult> operation, TimeSpan pollingInterval, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Core.OperationHelpers/<DefaultWaitForCompletionResponseAsync>d__6")]
[ExtensionAttribute]
public static ValueTask`1<Response> DefaultWaitForCompletionResponseAsync(Operation operation, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Core.OperationHelpers/<DefaultWaitForCompletionResponseAsync>d__7")]
[ExtensionAttribute]
public static ValueTask`1<Response> DefaultWaitForCompletionResponseAsync(Operation operation, TimeSpan pollingInterval, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Response DefaultWaitForCompletionResponse(Operation operation, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Response DefaultWaitForCompletionResponse(Operation operation, TimeSpan pollingInterval, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Azure.Core.OperationInternal : OperationInternalBase {
    private OperationInternal`1<VoidValue> _internalOperation;
    public Response RawResponse { get; }
    public bool HasCompleted { get; }
    public OperationInternal(IOperation operation, ClientDiagnostics clientDiagnostics, Response rawResponse, string operationTypeName, IEnumerable`1<KeyValuePair`2<string, string>> scopeAttributes, DelayStrategy fallbackStrategy);
    internal OperationInternal(OperationState finalState);
    public static OperationInternal Succeeded(Response rawResponse);
    public static OperationInternal Failed(Response rawResponse, RequestFailedException operationFailedException);
    public virtual Response get_RawResponse();
    public virtual bool get_HasCompleted();
    [AsyncStateMachineAttribute("Azure.Core.OperationInternal/<UpdateStatusAsync>d__9")]
protected virtual ValueTask`1<Response> UpdateStatusAsync(bool async, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Azure.Core.OperationInternal`1 : OperationInternalBase {
    private IOperation`1<T> _operation;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private AsyncLockWithValue`1<OperationState`1<T>> _stateLock;
    private Response _rawResponse;
    public Response RawResponse { get; }
    public bool HasCompleted { get; }
    public bool HasValue { get; }
    public T Value { get; }
    public OperationInternal`1(IOperation`1<T> operation, ClientDiagnostics clientDiagnostics, Response rawResponse, string operationTypeName, IEnumerable`1<KeyValuePair`2<string, string>> scopeAttributes, DelayStrategy fallbackStrategy);
    internal OperationInternal`1(OperationState`1<T> finalState);
    public static OperationInternal`1<T> Succeeded(Response rawResponse, T value);
    public static OperationInternal`1<T> Failed(Response rawResponse, RequestFailedException operationFailedException);
    public virtual Response get_RawResponse();
    public virtual bool get_HasCompleted();
    public bool get_HasValue();
    public T get_Value();
    [AsyncStateMachineAttribute("Azure.Core.OperationInternal`1/<WaitForCompletionAsync>d__15")]
public ValueTask`1<Response`1<T>> WaitForCompletionAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Core.OperationInternal`1/<WaitForCompletionAsync>d__16")]
public ValueTask`1<Response`1<T>> WaitForCompletionAsync(TimeSpan pollingInterval, CancellationToken cancellationToken);
    public Response`1<T> WaitForCompletion(CancellationToken cancellationToken);
    public Response`1<T> WaitForCompletion(TimeSpan pollingInterval, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Core.OperationInternal`1/<WaitForCompletionAsync>d__19")]
private ValueTask`1<Response`1<T>> WaitForCompletionAsync(bool async, Nullable`1<TimeSpan> pollingInterval, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Core.OperationInternal`1/<UpdateStatusAsync>d__20")]
protected virtual ValueTask`1<Response> UpdateStatusAsync(bool async, CancellationToken cancellationToken);
    private static Response GetResponseFromState(OperationState`1<T> state);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class Azure.Core.OperationInternalBase : object {
    private ClientDiagnostics _diagnostics;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IReadOnlyDictionary`2<string, string> _scopeAttributes;
    [NullableAttribute("2")]
private DelayStrategy _fallbackStrategy;
    private AsyncLockWithValue`1<Response> _responseLock;
    private string _waitForCompletionResponseScopeName;
    protected string _updateStatusScopeName;
    protected string _waitForCompletionScopeName;
    public Response RawResponse { get; }
    public bool HasCompleted { get; }
    protected OperationInternalBase(Response rawResponse);
    protected OperationInternalBase(ClientDiagnostics clientDiagnostics, string operationTypeName, IEnumerable`1<KeyValuePair`2<string, string>> scopeAttributes, DelayStrategy fallbackStrategy);
    public abstract virtual Response get_RawResponse();
    public abstract virtual bool get_HasCompleted();
    [AsyncStateMachineAttribute("Azure.Core.OperationInternalBase/<UpdateStatusAsync>d__13")]
public ValueTask`1<Response> UpdateStatusAsync(CancellationToken cancellationToken);
    public Response UpdateStatus(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Core.OperationInternalBase/<WaitForCompletionResponseAsync>d__15")]
public ValueTask`1<Response> WaitForCompletionResponseAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Core.OperationInternalBase/<WaitForCompletionResponseAsync>d__16")]
public ValueTask`1<Response> WaitForCompletionResponseAsync(TimeSpan pollingInterval, CancellationToken cancellationToken);
    public Response WaitForCompletionResponse(CancellationToken cancellationToken);
    public Response WaitForCompletionResponse(TimeSpan pollingInterval, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Core.OperationInternalBase/<WaitForCompletionResponseAsync>d__19")]
protected ValueTask`1<Response> WaitForCompletionResponseAsync(bool async, Nullable`1<TimeSpan> pollingInterval, string scopeName, CancellationToken cancellationToken);
    protected abstract virtual ValueTask`1<Response> UpdateStatusAsync(bool async, CancellationToken cancellationToken);
    protected DiagnosticScope CreateScope(string scopeName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Azure.Core.OperationPoller : object {
    private DelayStrategy _delayStrategy;
    [NullableContextAttribute("2")]
public OperationPoller(DelayStrategy strategy);
    public ValueTask`1<Response> WaitForCompletionResponseAsync(Operation operation, Nullable`1<TimeSpan> delayHint, CancellationToken cancellationToken);
    public Response WaitForCompletionResponse(Operation operation, Nullable`1<TimeSpan> delayHint, CancellationToken cancellationToken);
    public ValueTask`1<Response> WaitForCompletionResponseAsync(OperationInternalBase operation, Nullable`1<TimeSpan> delayHint, CancellationToken cancellationToken);
    public Response WaitForCompletionResponse(OperationInternalBase operation, Nullable`1<TimeSpan> delayHint, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Core.OperationPoller/<WaitForCompletionAsync>d__6`1")]
public ValueTask`1<Response`1<T>> WaitForCompletionAsync(Operation`1<T> operation, Nullable`1<TimeSpan> delayHint, CancellationToken cancellationToken);
    public Response`1<T> WaitForCompletion(Operation`1<T> operation, Nullable`1<TimeSpan> delayHint, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Core.OperationPoller/<WaitForCompletionAsync>d__8`1")]
public ValueTask`1<Response`1<T>> WaitForCompletionAsync(OperationInternal`1<T> operation, Nullable`1<TimeSpan> delayHint, CancellationToken cancellationToken);
    public Response`1<T> WaitForCompletion(OperationInternal`1<T> operation, Nullable`1<TimeSpan> delayHint, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Core.OperationPoller/<WaitForCompletionAsync>d__10")]
private ValueTask`1<Response> WaitForCompletionAsync(bool async, Operation operation, Nullable`1<TimeSpan> delayHint, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Core.OperationPoller/<WaitForCompletionAsync>d__11")]
private ValueTask`1<Response> WaitForCompletionAsync(bool async, OperationInternalBase operation, Nullable`1<TimeSpan> delayHint, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Core.OperationPoller/<Delay>d__12")]
private static ValueTask Delay(bool async, TimeSpan delay, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
internal class Azure.Core.OperationState : ValueType {
    [CompilerGeneratedAttribute]
private Response <RawResponse>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasCompleted>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasSucceeded>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private RequestFailedException <OperationFailedException>k__BackingField;
    public Response RawResponse { get; }
    public bool HasCompleted { get; }
    public bool HasSucceeded { get; }
    [NullableAttribute("2")]
public RequestFailedException OperationFailedException { get; }
    private OperationState(Response rawResponse, bool hasCompleted, bool hasSucceeded, RequestFailedException operationFailedException);
    [CompilerGeneratedAttribute]
public Response get_RawResponse();
    [CompilerGeneratedAttribute]
public bool get_HasCompleted();
    [CompilerGeneratedAttribute]
public bool get_HasSucceeded();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public RequestFailedException get_OperationFailedException();
    public static OperationState Success(Response rawResponse);
    public static OperationState Failure(Response rawResponse, RequestFailedException operationFailedException);
    public static OperationState Pending(Response rawResponse);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
internal class Azure.Core.OperationState`1 : ValueType {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private Response <RawResponse>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasCompleted>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasSucceeded>k__BackingField;
    [CompilerGeneratedAttribute]
private T <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private RequestFailedException <OperationFailedException>k__BackingField;
    [NullableAttribute("1")]
public Response RawResponse { get; }
    public bool HasCompleted { get; }
    public bool HasSucceeded { get; }
    public T Value { get; }
    public RequestFailedException OperationFailedException { get; }
    private OperationState`1(Response rawResponse, bool hasCompleted, bool hasSucceeded, T value, RequestFailedException operationFailedException);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public Response get_RawResponse();
    [CompilerGeneratedAttribute]
public bool get_HasCompleted();
    [CompilerGeneratedAttribute]
public bool get_HasSucceeded();
    [CompilerGeneratedAttribute]
public T get_Value();
    [CompilerGeneratedAttribute]
public RequestFailedException get_OperationFailedException();
    [NullableContextAttribute("1")]
public static OperationState`1<T> Success(Response rawResponse, T value);
    [NullableContextAttribute("1")]
public static OperationState`1<T> Failure(Response rawResponse, RequestFailedException operationFailedException);
    [NullableContextAttribute("1")]
public static OperationState`1<T> Pending(Response rawResponse);
}
internal static class Azure.Core.Page : object {
    [NullableContextAttribute("1")]
public static Page`1<T> FromValues(IEnumerable`1<T> values, string continuationToken, Response response);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Azure.Core.PageableHelpers : object {
    private static Byte[] DefaultItemPropertyName;
    private static Byte[] DefaultNextLinkPropertyName;
    private static PageableHelpers();
    public static AsyncPageable`1<T> CreateAsyncPageable(Func`2<Nullable`1<int>, HttpMessage> createFirstPageRequest, Func`3<Nullable`1<int>, string, HttpMessage> createNextPageRequest, Func`2<Response, ValueTuple`2<List`1<T>, string>> responseParser, ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, string scopeName, RequestContext requestContext);
    public static AsyncPageable`1<T> CreateAsyncPageable(Func`2<Nullable`1<int>, HttpMessage> createFirstPageRequest, Func`3<Nullable`1<int>, string, HttpMessage> createNextPageRequest, Func`2<JsonElement, T> valueFactory, ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, string scopeName, string itemPropertyName, string nextLinkPropertyName, CancellationToken cancellationToken);
    public static AsyncPageable`1<T> CreateAsyncPageable(Func`2<Nullable`1<int>, HttpMessage> createFirstPageRequest, Func`3<Nullable`1<int>, string, HttpMessage> createNextPageRequest, Func`2<JsonElement, T> valueFactory, ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, string scopeName, string itemPropertyName, string nextLinkPropertyName, RequestContext requestContext);
    public static AsyncPageable`1<T> CreateAsyncPageable(Response initialResponse, Func`3<Nullable`1<int>, string, HttpMessage> createNextPageRequest, Func`2<JsonElement, T> valueFactory, ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, string scopeName, string itemPropertyName, string nextLinkPropertyName, CancellationToken cancellationToken);
    public static Pageable`1<T> CreatePageable(Func`2<Nullable`1<int>, HttpMessage> createFirstPageRequest, Func`3<Nullable`1<int>, string, HttpMessage> createNextPageRequest, Func`2<Response, ValueTuple`2<List`1<T>, string>> responseParser, ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, string scopeName, RequestContext requestContext);
    public static Pageable`1<T> CreatePageable(Func`2<Nullable`1<int>, HttpMessage> createFirstPageRequest, Func`3<Nullable`1<int>, string, HttpMessage> createNextPageRequest, Func`2<JsonElement, T> valueFactory, ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, string scopeName, string itemPropertyName, string nextLinkPropertyName, CancellationToken cancellationToken);
    public static Pageable`1<T> CreatePageable(Func`2<Nullable`1<int>, HttpMessage> createFirstPageRequest, Func`3<Nullable`1<int>, string, HttpMessage> createNextPageRequest, Func`2<JsonElement, T> valueFactory, ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, string scopeName, string itemPropertyName, string nextLinkPropertyName, RequestContext requestContext);
    public static Pageable`1<T> CreatePageable(Response initialResponse, Func`3<Nullable`1<int>, string, HttpMessage> createNextPageRequest, Func`2<JsonElement, T> valueFactory, ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, string scopeName, string itemPropertyName, string nextLinkPropertyName, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Core.PageableHelpers/<CreateAsyncPageable>d__10`1")]
public static ValueTask`1<Operation`1<AsyncPageable`1<T>>> CreateAsyncPageable(WaitUntil waitUntil, HttpMessage message, Func`3<Nullable`1<int>, string, HttpMessage> createNextPageMethod, Func`2<JsonElement, T> valueFactory, ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, OperationFinalStateVia finalStateVia, string scopeName, string itemPropertyName, string nextLinkPropertyName, RequestContext requestContext);
    public static Operation`1<Pageable`1<T>> CreatePageable(WaitUntil waitUntil, HttpMessage message, Func`3<Nullable`1<int>, string, HttpMessage> createNextPageMethod, Func`2<JsonElement, T> valueFactory, ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, OperationFinalStateVia finalStateVia, string scopeName, string itemPropertyName, string nextLinkPropertyName, RequestContext requestContext);
    public static Pageable`1<T> CreateEnumerable(Func`2<Nullable`1<int>, Page`1<T>> firstPageFunc, Func`3<string, Nullable`1<int>, Page`1<T>> nextPageFunc, Nullable`1<int> pageSize);
    public static AsyncPageable`1<T> CreateAsyncEnumerable(Func`2<Nullable`1<int>, Task`1<Page`1<T>>> firstPageFunc, Func`3<string, Nullable`1<int>, Task`1<Page`1<T>>> nextPageFunc, Nullable`1<int> pageSize);
    private static ValueTuple`2<List`1<T>, string> ParseResponseForBinaryData(Response response, Byte[] itemPropertyName, Byte[] nextLinkPropertyName);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
internal static object <ParseResponseForBinaryData>g__ReadBinaryData|19_0(Utf8JsonReader& r, ReadOnlyMemory`1& content);
}
internal static class Azure.Core.Pipeline.ActivityExtensions : object {
    [CompilerGeneratedAttribute]
private static bool <SupportsActivitySource>k__BackingField;
    public static bool SupportsActivitySource { get; private set; }
    private static ActivityExtensions();
    [CompilerGeneratedAttribute]
public static bool get_SupportsActivitySource();
    [CompilerGeneratedAttribute]
private static void set_SupportsActivitySource(bool value);
    public static void ResetFeatureSwitch();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Azure.Core.Pipeline.ClientDiagnostics : DiagnosticScopeFactory {
    public ClientDiagnostics(ClientOptions options, Nullable`1<bool> suppressNestedClientActivities);
    public ClientDiagnostics(string optionsNamespace, string providerNamespace, DiagnosticsOptions diagnosticsOptions, Nullable`1<bool> suppressNestedClientActivities);
    internal static HttpMessageSanitizer CreateMessageSanitizer(DiagnosticsOptions diagnostics);
    internal static string GetResourceProviderNamespace(Assembly assembly);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
internal class Azure.Core.Pipeline.DiagnosticScope : ValueType {
    private static string AzureSdkScopeLabel;
    internal static string OpenTelemetrySchemaAttribute;
    internal static string OpenTelemetrySchemaVersion;
    private static object AzureSdkScopeValue;
    [NullableAttribute("2")]
private ActivityAdapter _activityAdapter;
    private bool _suppressNestedClientActivities;
    [CompilerGeneratedAttribute]
private bool <IsEnabled>k__BackingField;
    public bool IsEnabled { get; }
    [RequiresUnreferencedCodeAttribute("The diagnosticSourceArgs are used in a call to DiagnosticSource.Write, all necessary properties need to be preserved on the type being passed in using DynamicDependency attributes.")]
internal DiagnosticScope(string scopeName, DiagnosticListener source, object diagnosticSourceArgs, ActivitySource activitySource, ActivityKind kind, bool suppressNestedClientActivities);
    private static DiagnosticScope();
    [CompilerGeneratedAttribute]
public bool get_IsEnabled();
    public void AddAttribute(string name, string value);
    public void AddIntegerAttribute(string name, int value);
    public void AddLongAttribute(string name, long value);
    public void AddAttribute(string name, T value, Func`2<T, string> format);
    public void AddLink(string traceparent, string tracestate, IDictionary`2<string, object> attributes);
    public void Start();
    public void SetDisplayName(string displayName);
    public void SetStartTime(DateTime dateTime);
    public void SetTraceContext(string traceparent, string tracestate);
    public sealed virtual void Dispose();
    [UnconditionalSuppressMessageAttribute("ReflectionAnalysis", "IL2026")]
public void Failed(Exception exception);
    [UnconditionalSuppressMessageAttribute("ReflectionAnalysis", "IL2026")]
public void Failed(string errorCode);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Azure.Core.Pipeline.DiagnosticScopeFactory : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Dictionary`2<string, DiagnosticListener> _listeners;
    [NullableAttribute("2")]
private string _resourceProviderNamespace;
    [NullableAttribute("2")]
private DiagnosticListener _source;
    private bool _suppressNestedClientActivities;
    private bool _isStable;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static ConcurrentDictionary`2<string, ActivitySource> ActivitySources;
    [CompilerGeneratedAttribute]
private bool <IsActivityEnabled>k__BackingField;
    public bool IsActivityEnabled { get; }
    public DiagnosticScopeFactory(string clientNamespace, string resourceProviderNamespace, bool isActivityEnabled, bool suppressNestedClientActivities, bool isStable);
    private static DiagnosticScopeFactory();
    [CompilerGeneratedAttribute]
public bool get_IsActivityEnabled();
    [UnconditionalSuppressMessageAttribute("ReflectionAnalysis", "IL2026:RequiresUnreferencedCode")]
public DiagnosticScope CreateScope(string name, ActivityKind kind);
    private ActivitySource GetActivitySource(string ns, string name);
}
[ExtensionAttribute]
internal static class Azure.Core.Pipeline.TaskExtensions : object {
    [ExtensionAttribute]
public static WithCancellationTaskAwaitable AwaitWithCancellation(Task task, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static WithCancellationTaskAwaitable`1<T> AwaitWithCancellation(Task`1<T> task, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static WithCancellationValueTaskAwaitable`1<T> AwaitWithCancellation(ValueTask`1<T> task, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static T EnsureCompleted(Task`1<T> task);
    [ExtensionAttribute]
public static void EnsureCompleted(Task task);
    [ExtensionAttribute]
public static T EnsureCompleted(ValueTask`1<T> task);
    [ExtensionAttribute]
public static void EnsureCompleted(ValueTask task);
    [ExtensionAttribute]
public static Enumerable`1<T> EnsureSyncEnumerable(IAsyncEnumerable`1<T> asyncEnumerable);
    [ExtensionAttribute]
public static ConfiguredValueTaskAwaitable`1<T> EnsureCompleted(ConfiguredValueTaskAwaitable`1<T> awaitable, bool async);
    [ExtensionAttribute]
public static ConfiguredValueTaskAwaitable EnsureCompleted(ConfiguredValueTaskAwaitable awaitable, bool async);
    [ConditionalAttribute("DEBUG")]
private static void VerifyTaskCompleted(bool isCompleted);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Azure.Core.ProtocolOperation`1 : Operation`1<T> {
    private Func`2<Response, T> _resultSelector;
    private OperationInternal`1<T> _operation;
    private IOperation _nextLinkOperation;
    public string Id { get; }
    public T Value { get; }
    public bool HasCompleted { get; }
    public bool HasValue { get; }
    internal ProtocolOperation`1(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Request request, Response response, OperationFinalStateVia finalStateVia, string scopeName, Func`2<Response, T> resultSelector);
    public virtual string get_Id();
    public virtual T get_Value();
    public virtual bool get_HasCompleted();
    public virtual bool get_HasValue();
    public virtual Response GetRawResponse();
    public virtual Response UpdateStatus(CancellationToken cancellationToken);
    public virtual ValueTask`1<Response> UpdateStatusAsync(CancellationToken cancellationToken);
    public virtual ValueTask`1<Response`1<T>> WaitForCompletionAsync(CancellationToken cancellationToken);
    public virtual ValueTask`1<Response`1<T>> WaitForCompletionAsync(TimeSpan pollingInterval, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.Core.ProtocolOperation`1/<Azure-Core-IOperation<T>-UpdateStateAsync>d__17")]
private sealed virtual override ValueTask`1<OperationState`1<T>> Azure.Core.IOperation<T>.UpdateStateAsync(bool async, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Azure.Core.ProtocolOperationHelpers : object {
    public static Operation`1<TTo> Convert(Operation`1<TFrom> operation, Func`2<Response, TTo> convertFunc, ClientDiagnostics diagnostics, string scopeName);
    public static ValueTask`1<Operation`1<VoidValue>> ProcessMessageWithoutResponseValueAsync(HttpPipeline pipeline, HttpMessage message, ClientDiagnostics clientDiagnostics, string scopeName, OperationFinalStateVia finalStateVia, RequestContext requestContext, WaitUntil waitUntil);
    public static Operation`1<VoidValue> ProcessMessageWithoutResponseValue(HttpPipeline pipeline, HttpMessage message, ClientDiagnostics clientDiagnostics, string scopeName, OperationFinalStateVia finalStateVia, RequestContext requestContext, WaitUntil waitUntil);
    public static ValueTask`1<Operation`1<BinaryData>> ProcessMessageAsync(HttpPipeline pipeline, HttpMessage message, ClientDiagnostics clientDiagnostics, string scopeName, OperationFinalStateVia finalStateVia, RequestContext requestContext, WaitUntil waitUntil);
    public static Operation`1<BinaryData> ProcessMessage(HttpPipeline pipeline, HttpMessage message, ClientDiagnostics clientDiagnostics, string scopeName, OperationFinalStateVia finalStateVia, RequestContext requestContext, WaitUntil waitUntil);
    [AsyncStateMachineAttribute("Azure.Core.ProtocolOperationHelpers/<ProcessMessageAsync>d__5`1")]
public static ValueTask`1<Operation`1<T>> ProcessMessageAsync(HttpPipeline pipeline, HttpMessage message, ClientDiagnostics clientDiagnostics, string scopeName, OperationFinalStateVia finalStateVia, RequestContext requestContext, WaitUntil waitUntil, Func`2<Response, T> resultSelector);
    public static Operation`1<T> ProcessMessage(HttpPipeline pipeline, HttpMessage message, ClientDiagnostics clientDiagnostics, string scopeName, OperationFinalStateVia finalStateVia, RequestContext requestContext, WaitUntil waitUntil, Func`2<Response, T> resultSelector);
}
internal class Azure.Core.RawRequestUriBuilder : RequestUriBuilder {
    [NullableAttribute("1")]
private static string SchemeSeparator;
    private static char HostSeparator;
    private static char PortSeparator;
    [NullableAttribute("1")]
private static Char[] HostOrPort;
    private static char QueryBeginSeparator;
    private static char QueryContinueSeparator;
    private static char QueryValueSeparator;
    private Nullable`1<RawWritingPosition> _position;
    private static RawRequestUriBuilder();
    private static void GetQueryParts(ReadOnlySpan`1<char> queryUnparsed, ReadOnlySpan`1& name, ReadOnlySpan`1& value);
    [NullableContextAttribute("1")]
public void AppendRaw(string value, bool escape);
    private void AppendRaw(ReadOnlySpan`1<char> value, bool escape);
    [NullableContextAttribute("1")]
public void AppendRawNextLink(string nextLink, bool escape);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Azure.Core.RequestHeaderExtensions : object {
    [ExtensionAttribute]
public static void Add(RequestHeaders headers, string name, bool value);
    [ExtensionAttribute]
public static void Add(RequestHeaders headers, string name, float value);
    [ExtensionAttribute]
public static void Add(RequestHeaders headers, string name, double value);
    [ExtensionAttribute]
public static void Add(RequestHeaders headers, string name, int value);
    [ExtensionAttribute]
public static void Add(RequestHeaders headers, string name, long value);
    [ExtensionAttribute]
public static void Add(RequestHeaders headers, string name, DateTimeOffset value, string format);
    [ExtensionAttribute]
public static void Add(RequestHeaders headers, string name, TimeSpan value, string format);
    [ExtensionAttribute]
public static void Add(RequestHeaders headers, string name, Guid value);
    [ExtensionAttribute]
public static void Add(RequestHeaders headers, string name, Byte[] value, string format);
    [ExtensionAttribute]
public static void Add(RequestHeaders headers, string name, BinaryData value, string format);
    [ExtensionAttribute]
public static void Add(RequestHeaders headers, string prefix, IDictionary`2<string, string> headersToAdd);
    [ExtensionAttribute]
public static void Add(RequestHeaders headers, string name, ETag value);
    [ExtensionAttribute]
public static void Add(RequestHeaders headers, MatchConditions conditions);
    [ExtensionAttribute]
public static void Add(RequestHeaders headers, RequestConditions conditions, string format);
    [ExtensionAttribute]
public static void AddDelimited(RequestHeaders headers, string name, IEnumerable`1<T> value, string delimiter);
    [ExtensionAttribute]
public static void AddDelimited(RequestHeaders headers, string name, IEnumerable`1<T> value, string delimiter, string format);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Azure.Core.RequestUriBuilderExtensions : object {
    [ExtensionAttribute]
public static void AppendPath(RequestUriBuilder builder, bool value, bool escape);
    [ExtensionAttribute]
public static void AppendPath(RequestUriBuilder builder, float value, bool escape);
    [ExtensionAttribute]
public static void AppendPath(RequestUriBuilder builder, double value, bool escape);
    [ExtensionAttribute]
public static void AppendPath(RequestUriBuilder builder, int value, bool escape);
    [ExtensionAttribute]
public static void AppendPath(RequestUriBuilder builder, Byte[] value, string format, bool escape);
    [ExtensionAttribute]
public static void AppendPath(RequestUriBuilder builder, IEnumerable`1<string> value, bool escape);
    [ExtensionAttribute]
public static void AppendPath(RequestUriBuilder builder, DateTimeOffset value, string format, bool escape);
    [ExtensionAttribute]
public static void AppendPath(RequestUriBuilder builder, TimeSpan value, string format, bool escape);
    [ExtensionAttribute]
public static void AppendPath(RequestUriBuilder builder, Guid value, bool escape);
    [ExtensionAttribute]
public static void AppendPath(RequestUriBuilder builder, long value, bool escape);
    [ExtensionAttribute]
public static void AppendQuery(RequestUriBuilder builder, string name, bool value, bool escape);
    [ExtensionAttribute]
public static void AppendQuery(RequestUriBuilder builder, string name, float value, bool escape);
    [ExtensionAttribute]
public static void AppendQuery(RequestUriBuilder builder, string name, DateTimeOffset value, string format, bool escape);
    [ExtensionAttribute]
public static void AppendQuery(RequestUriBuilder builder, string name, TimeSpan value, string format, bool escape);
    [ExtensionAttribute]
public static void AppendQuery(RequestUriBuilder builder, string name, double value, bool escape);
    [ExtensionAttribute]
public static void AppendQuery(RequestUriBuilder builder, string name, decimal value, bool escape);
    [ExtensionAttribute]
public static void AppendQuery(RequestUriBuilder builder, string name, int value, bool escape);
    [ExtensionAttribute]
public static void AppendQuery(RequestUriBuilder builder, string name, long value, bool escape);
    [ExtensionAttribute]
public static void AppendQuery(RequestUriBuilder builder, string name, TimeSpan value, bool escape);
    [ExtensionAttribute]
public static void AppendQuery(RequestUriBuilder builder, string name, Byte[] value, string format, bool escape);
    [ExtensionAttribute]
public static void AppendQuery(RequestUriBuilder builder, string name, Guid value, bool escape);
    [ExtensionAttribute]
public static void AppendQueryDelimited(RequestUriBuilder builder, string name, IEnumerable`1<T> value, string delimiter, bool escape);
    [ExtensionAttribute]
public static void AppendQueryDelimited(RequestUriBuilder builder, string name, IEnumerable`1<T> value, string delimiter, string format, bool escape);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Azure.Core.ResponseHeadersExtensions : object {
    private static String[] KnownFormats;
    private static ResponseHeadersExtensions();
    [ExtensionAttribute]
public static bool TryGetValue(ResponseHeaders headers, string name, Byte[]& value);
    [ExtensionAttribute]
public static bool TryGetValue(ResponseHeaders headers, string name, Nullable`1& value);
    [ExtensionAttribute]
public static bool TryGetValue(ResponseHeaders headers, string name, Nullable`1& value);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
public static bool TryGetValue(ResponseHeaders headers, string name, Nullable`1& value);
    [ExtensionAttribute]
public static bool TryGetValue(ResponseHeaders headers, string name, T& value);
    [ExtensionAttribute]
public static bool TryGetValue(ResponseHeaders headers, string prefix, IDictionary`2& value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Azure.Core.ResponseWithHeaders : object {
    public static ResponseWithHeaders`2<T, THeaders> FromValue(T value, THeaders headers, Response rawResponse);
    public static ResponseWithHeaders`1<THeaders> FromValue(THeaders headers, Response rawResponse);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Azure.Core.ResponseWithHeaders`1 : object {
    private Response _rawResponse;
    [CompilerGeneratedAttribute]
private THeaders <Headers>k__BackingField;
    public THeaders Headers { get; }
    public ResponseWithHeaders`1(THeaders headers, Response rawResponse);
    public Response GetRawResponse();
    [CompilerGeneratedAttribute]
public THeaders get_Headers();
    public static Response op_Implicit(ResponseWithHeaders`1<THeaders> self);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Azure.Core.ResponseWithHeaders`2 : Response`1<T> {
    private Response _rawResponse;
    [CompilerGeneratedAttribute]
private T <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private THeaders <Headers>k__BackingField;
    public T Value { get; }
    public THeaders Headers { get; }
    public ResponseWithHeaders`2(T value, THeaders headers, Response rawResponse);
    public virtual Response GetRawResponse();
    [CompilerGeneratedAttribute]
public virtual T get_Value();
    [CompilerGeneratedAttribute]
public THeaders get_Headers();
    public static Response op_Implicit(ResponseWithHeaders`2<T, THeaders> self);
}
internal class Azure.Core.SequentialDelayStrategy : DelayStrategy {
    [NullableAttribute("1")]
private static TimeSpan[] _pollingSequence;
    private static TimeSpan _maxDelay;
    private static SequentialDelayStrategy();
    [NullableContextAttribute("2")]
protected virtual TimeSpan GetNextDelayCore(Response response, int retryNumber);
}
internal class Azure.Core.StringRequestContent : RequestContent {
    private Byte[] _bytes;
    public StringRequestContent(string value);
    [AsyncStateMachineAttribute("Azure.Core.StringRequestContent/<WriteToAsync>d__2")]
public virtual Task WriteToAsync(Stream stream, CancellationToken cancellation);
    public virtual void WriteTo(Stream stream, CancellationToken cancellation);
    public virtual bool TryComputeLength(Int64& length);
    public virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Azure.Core.TypeFormatters : object {
    private static string RoundtripZFormat;
    [CompilerGeneratedAttribute]
private static string <DefaultNumberFormat>k__BackingField;
    public static string DefaultNumberFormat { get; }
    private static TypeFormatters();
    [CompilerGeneratedAttribute]
public static string get_DefaultNumberFormat();
    public static string ToString(bool value);
    public static string ToString(DateTime value, string format);
    public static string ToString(DateTimeOffset value, string format);
    public static string ToString(TimeSpan value, string format);
    public static string ToString(Byte[] value, string format);
    public static string ToBase64UrlString(Byte[] value);
    public static Byte[] FromBase64UrlString(string value);
    private static int GetNumBase64PaddingCharsToAddForDecode(int inputLength);
    public static DateTimeOffset ParseDateTimeOffset(string value, string format);
    public static TimeSpan ParseTimeSpan(string value, string format);
    [NullableContextAttribute("2")]
public static string ConvertToString(object value, string format);
}
[IsReadOnlyAttribute]
internal class Azure.Core.VoidValue : ValueType {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Azure.Core.XmlWriterContent : RequestContent {
    private MemoryStream _stream;
    private RequestContent _content;
    [CompilerGeneratedAttribute]
private XmlWriter <XmlWriter>k__BackingField;
    public XmlWriter XmlWriter { get; }
    [CompilerGeneratedAttribute]
public XmlWriter get_XmlWriter();
    [AsyncStateMachineAttribute("Azure.Core.XmlWriterContent/<WriteToAsync>d__6")]
public virtual Task WriteToAsync(Stream stream, CancellationToken cancellation);
    public virtual void WriteTo(Stream stream, CancellationToken cancellation);
    public virtual bool TryComputeLength(Int64& length);
    public virtual void Dispose();
}
internal class Azure.NoValueResponse`1 : NullableResponse`1<T> {
    private Response _response;
    public bool HasValue { get; }
    public T Value { get; }
    public NoValueResponse`1(Response response);
    public virtual bool get_HasValue();
    public virtual T get_Value();
    public virtual Response GetRawResponse();
    public virtual string ToString();
    internal string GetStatusMessage();
}
internal class Azure.ResourceManager.Models.ManagedServiceIdentityTypeV3Converter : JsonConverter`1<ManagedServiceIdentityType> {
    internal static string SystemAssignedUserAssignedV3Value;
    public virtual void Write(Utf8JsonWriter writer, ManagedServiceIdentityType model, JsonSerializerOptions options);
    public virtual ManagedServiceIdentityType Read(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options);
}
internal class Azure.ResourceManager.Redis.AccessPolicyAssignmentRestOperations : object {
    private TelemetryDetails _userAgent;
    private HttpPipeline _pipeline;
    private Uri _endpoint;
    private string _apiVersion;
    public AccessPolicyAssignmentRestOperations(HttpPipeline pipeline, string applicationId, Uri endpoint, string apiVersion);
    internal RequestUriBuilder CreateCreateUpdateRequestUri(string subscriptionId, string resourceGroupName, string cacheName, string accessPolicyAssignmentName, RedisCacheAccessPolicyAssignmentData data);
    internal HttpMessage CreateCreateUpdateRequest(string subscriptionId, string resourceGroupName, string cacheName, string accessPolicyAssignmentName, RedisCacheAccessPolicyAssignmentData data);
    [AsyncStateMachineAttribute("Azure.ResourceManager.Redis.AccessPolicyAssignmentRestOperations/<CreateUpdateAsync>d__7")]
public Task`1<Response> CreateUpdateAsync(string subscriptionId, string resourceGroupName, string cacheName, string accessPolicyAssignmentName, RedisCacheAccessPolicyAssignmentData data, CancellationToken cancellationToken);
    public Response CreateUpdate(string subscriptionId, string resourceGroupName, string cacheName, string accessPolicyAssignmentName, RedisCacheAccessPolicyAssignmentData data, CancellationToken cancellationToken);
    internal RequestUriBuilder CreateDeleteRequestUri(string subscriptionId, string resourceGroupName, string cacheName, string accessPolicyAssignmentName);
    internal HttpMessage CreateDeleteRequest(string subscriptionId, string resourceGroupName, string cacheName, string accessPolicyAssignmentName);
    [AsyncStateMachineAttribute("Azure.ResourceManager.Redis.AccessPolicyAssignmentRestOperations/<DeleteAsync>d__11")]
public Task`1<Response> DeleteAsync(string subscriptionId, string resourceGroupName, string cacheName, string accessPolicyAssignmentName, CancellationToken cancellationToken);
    public Response Delete(string subscriptionId, string resourceGroupName, string cacheName, string accessPolicyAssignmentName, CancellationToken cancellationToken);
    internal RequestUriBuilder CreateGetRequestUri(string subscriptionId, string resourceGroupName, string cacheName, string accessPolicyAssignmentName);
    internal HttpMessage CreateGetRequest(string subscriptionId, string resourceGroupName, string cacheName, string accessPolicyAssignmentName);
    [AsyncStateMachineAttribute("Azure.ResourceManager.Redis.AccessPolicyAssignmentRestOperations/<GetAsync>d__15")]
public Task`1<Response`1<RedisCacheAccessPolicyAssignmentData>> GetAsync(string subscriptionId, string resourceGroupName, string cacheName, string accessPolicyAssignmentName, CancellationToken cancellationToken);
    public Response`1<RedisCacheAccessPolicyAssignmentData> Get(string subscriptionId, string resourceGroupName, string cacheName, string accessPolicyAssignmentName, CancellationToken cancellationToken);
    internal RequestUriBuilder CreateListRequestUri(string subscriptionId, string resourceGroupName, string cacheName);
    internal HttpMessage CreateListRequest(string subscriptionId, string resourceGroupName, string cacheName);
    [AsyncStateMachineAttribute("Azure.ResourceManager.Redis.AccessPolicyAssignmentRestOperations/<ListAsync>d__19")]
public Task`1<Response`1<RedisCacheAccessPolicyAssignmentList>> ListAsync(string subscriptionId, string resourceGroupName, string cacheName, CancellationToken cancellationToken);
    public Response`1<RedisCacheAccessPolicyAssignmentList> List(string subscriptionId, string resourceGroupName, string cacheName, CancellationToken cancellationToken);
    internal RequestUriBuilder CreateListNextPageRequestUri(string nextLink, string subscriptionId, string resourceGroupName, string cacheName);
    internal HttpMessage CreateListNextPageRequest(string nextLink, string subscriptionId, string resourceGroupName, string cacheName);
    [AsyncStateMachineAttribute("Azure.ResourceManager.Redis.AccessPolicyAssignmentRestOperations/<ListNextPageAsync>d__23")]
public Task`1<Response`1<RedisCacheAccessPolicyAssignmentList>> ListNextPageAsync(string nextLink, string subscriptionId, string resourceGroupName, string cacheName, CancellationToken cancellationToken);
    public Response`1<RedisCacheAccessPolicyAssignmentList> ListNextPage(string nextLink, string subscriptionId, string resourceGroupName, string cacheName, CancellationToken cancellationToken);
}
internal class Azure.ResourceManager.Redis.AccessPolicyRestOperations : object {
    private TelemetryDetails _userAgent;
    private HttpPipeline _pipeline;
    private Uri _endpoint;
    private string _apiVersion;
    public AccessPolicyRestOperations(HttpPipeline pipeline, string applicationId, Uri endpoint, string apiVersion);
    internal RequestUriBuilder CreateCreateUpdateRequestUri(string subscriptionId, string resourceGroupName, string cacheName, string accessPolicyName, RedisCacheAccessPolicyData data);
    internal HttpMessage CreateCreateUpdateRequest(string subscriptionId, string resourceGroupName, string cacheName, string accessPolicyName, RedisCacheAccessPolicyData data);
    [AsyncStateMachineAttribute("Azure.ResourceManager.Redis.AccessPolicyRestOperations/<CreateUpdateAsync>d__7")]
public Task`1<Response> CreateUpdateAsync(string subscriptionId, string resourceGroupName, string cacheName, string accessPolicyName, RedisCacheAccessPolicyData data, CancellationToken cancellationToken);
    public Response CreateUpdate(string subscriptionId, string resourceGroupName, string cacheName, string accessPolicyName, RedisCacheAccessPolicyData data, CancellationToken cancellationToken);
    internal RequestUriBuilder CreateDeleteRequestUri(string subscriptionId, string resourceGroupName, string cacheName, string accessPolicyName);
    internal HttpMessage CreateDeleteRequest(string subscriptionId, string resourceGroupName, string cacheName, string accessPolicyName);
    [AsyncStateMachineAttribute("Azure.ResourceManager.Redis.AccessPolicyRestOperations/<DeleteAsync>d__11")]
public Task`1<Response> DeleteAsync(string subscriptionId, string resourceGroupName, string cacheName, string accessPolicyName, CancellationToken cancellationToken);
    public Response Delete(string subscriptionId, string resourceGroupName, string cacheName, string accessPolicyName, CancellationToken cancellationToken);
    internal RequestUriBuilder CreateGetRequestUri(string subscriptionId, string resourceGroupName, string cacheName, string accessPolicyName);
    internal HttpMessage CreateGetRequest(string subscriptionId, string resourceGroupName, string cacheName, string accessPolicyName);
    [AsyncStateMachineAttribute("Azure.ResourceManager.Redis.AccessPolicyRestOperations/<GetAsync>d__15")]
public Task`1<Response`1<RedisCacheAccessPolicyData>> GetAsync(string subscriptionId, string resourceGroupName, string cacheName, string accessPolicyName, CancellationToken cancellationToken);
    public Response`1<RedisCacheAccessPolicyData> Get(string subscriptionId, string resourceGroupName, string cacheName, string accessPolicyName, CancellationToken cancellationToken);
    internal RequestUriBuilder CreateListRequestUri(string subscriptionId, string resourceGroupName, string cacheName);
    internal HttpMessage CreateListRequest(string subscriptionId, string resourceGroupName, string cacheName);
    [AsyncStateMachineAttribute("Azure.ResourceManager.Redis.AccessPolicyRestOperations/<ListAsync>d__19")]
public Task`1<Response`1<RedisCacheAccessPolicyList>> ListAsync(string subscriptionId, string resourceGroupName, string cacheName, CancellationToken cancellationToken);
    public Response`1<RedisCacheAccessPolicyList> List(string subscriptionId, string resourceGroupName, string cacheName, CancellationToken cancellationToken);
    internal RequestUriBuilder CreateListNextPageRequestUri(string nextLink, string subscriptionId, string resourceGroupName, string cacheName);
    internal HttpMessage CreateListNextPageRequest(string nextLink, string subscriptionId, string resourceGroupName, string cacheName);
    [AsyncStateMachineAttribute("Azure.ResourceManager.Redis.AccessPolicyRestOperations/<ListNextPageAsync>d__23")]
public Task`1<Response`1<RedisCacheAccessPolicyList>> ListNextPageAsync(string nextLink, string subscriptionId, string resourceGroupName, string cacheName, CancellationToken cancellationToken);
    public Response`1<RedisCacheAccessPolicyList> ListNextPage(string nextLink, string subscriptionId, string resourceGroupName, string cacheName, CancellationToken cancellationToken);
}
internal static class Azure.ResourceManager.Redis.Argument : object {
    public static void AssertNotNull(T value, string name);
    public static void AssertNotNull(Nullable`1<T> value, string name);
    public static void AssertNotNullOrEmpty(IEnumerable`1<T> value, string name);
    public static void AssertNotNullOrEmpty(string value, string name);
    public static void AssertNotNullOrWhiteSpace(string value, string name);
    public static void AssertNotDefault(T& value, string name);
    public static void AssertInRange(T value, T minimum, T maximum, string name);
    public static void AssertEnumDefined(Type enumType, object value, string name);
    public static T CheckNotNull(T value, string name);
    public static string CheckNotNullOrEmpty(string value, string name);
    public static void AssertNull(T value, string name, string message);
}
internal class Azure.ResourceManager.Redis.AsyncOperationStatusRestOperations : object {
    private TelemetryDetails _userAgent;
    private HttpPipeline _pipeline;
    private Uri _endpoint;
    private string _apiVersion;
    public AsyncOperationStatusRestOperations(HttpPipeline pipeline, string applicationId, Uri endpoint, string apiVersion);
    internal RequestUriBuilder CreateGetRequestUri(string subscriptionId, AzureLocation location, string operationId);
    internal HttpMessage CreateGetRequest(string subscriptionId, AzureLocation location, string operationId);
    [AsyncStateMachineAttribute("Azure.ResourceManager.Redis.AsyncOperationStatusRestOperations/<GetAsync>d__7")]
public Task`1<Response`1<RedisOperationStatus>> GetAsync(string subscriptionId, AzureLocation location, string operationId, CancellationToken cancellationToken);
    public Response`1<RedisOperationStatus> Get(string subscriptionId, AzureLocation location, string operationId, CancellationToken cancellationToken);
}
internal static class Azure.ResourceManager.Redis.BicepSerializationHelpers : object {
    public static void AppendChildObject(StringBuilder stringBuilder, object childObject, ModelReaderWriterOptions options, int spaces, bool indentFirstLine, string formattedPropertyName);
}
[DefaultMemberAttribute("Item")]
internal class Azure.ResourceManager.Redis.ChangeTrackingDictionary`2 : object {
    private IDictionary`2<TKey, TValue> _innerDictionary;
    public bool IsUndefined { get; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public ICollection`1<TKey> Keys { get; }
    public ICollection`1<TValue> Values { get; }
    public TValue Item { get; public set; }
    private IEnumerable`1<TKey> System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Keys { get; }
    private IEnumerable`1<TValue> System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Values { get; }
    public ChangeTrackingDictionary`2(IDictionary`2<TKey, TValue> dictionary);
    public ChangeTrackingDictionary`2(IReadOnlyDictionary`2<TKey, TValue> dictionary);
    public bool get_IsUndefined();
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual ICollection`1<TKey> get_Keys();
    public sealed virtual ICollection`1<TValue> get_Values();
    public sealed virtual TValue get_Item(TKey key);
    public sealed virtual void set_Item(TKey key, TValue value);
    private sealed virtual override IEnumerable`1<TKey> System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.get_Keys();
    private sealed virtual override IEnumerable`1<TValue> System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.get_Values();
    public sealed virtual IEnumerator`1<KeyValuePair`2<TKey, TValue>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual void Add(KeyValuePair`2<TKey, TValue> item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(KeyValuePair`2<TKey, TValue> item);
    public sealed virtual void CopyTo(KeyValuePair`2[] array, int index);
    public sealed virtual bool Remove(KeyValuePair`2<TKey, TValue> item);
    public sealed virtual void Add(TKey key, TValue value);
    public sealed virtual bool ContainsKey(TKey key);
    public sealed virtual bool Remove(TKey key);
    public sealed virtual bool TryGetValue(TKey key, TValue& value);
    public IDictionary`2<TKey, TValue> EnsureDictionary();
    [IteratorStateMachineAttribute("Azure.ResourceManager.Redis.ChangeTrackingDictionary`2/<<GetEnumerator>g__enumerateEmpty|21_0>d")]
[CompilerGeneratedAttribute]
internal static IEnumerator`1<KeyValuePair`2<TKey, TValue>> <GetEnumerator>g__enumerateEmpty|21_0();
}
[DefaultMemberAttribute("Item")]
internal class Azure.ResourceManager.Redis.ChangeTrackingList`1 : object {
    private IList`1<T> _innerList;
    public bool IsUndefined { get; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public T Item { get; public set; }
    public ChangeTrackingList`1(IList`1<T> innerList);
    public ChangeTrackingList`1(IReadOnlyList`1<T> innerList);
    public bool get_IsUndefined();
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual T get_Item(int index);
    public sealed virtual void set_Item(int index, T value);
    public void Reset();
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual void Add(T item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(T item);
    public sealed virtual void CopyTo(T[] array, int arrayIndex);
    public sealed virtual bool Remove(T item);
    public sealed virtual int IndexOf(T item);
    public sealed virtual void Insert(int index, T item);
    public sealed virtual void RemoveAt(int index);
    public IList`1<T> EnsureList();
    [IteratorStateMachineAttribute("Azure.ResourceManager.Redis.ChangeTrackingList`1/<<GetEnumerator>g__enumerateEmpty|14_0>d")]
[CompilerGeneratedAttribute]
internal static IEnumerator`1<T> <GetEnumerator>g__enumerateEmpty|14_0();
}
internal class Azure.ResourceManager.Redis.FirewallRulesRestOperations : object {
    private TelemetryDetails _userAgent;
    private HttpPipeline _pipeline;
    private Uri _endpoint;
    private string _apiVersion;
    public FirewallRulesRestOperations(HttpPipeline pipeline, string applicationId, Uri endpoint, string apiVersion);
    internal RequestUriBuilder CreateListRequestUri(string subscriptionId, string resourceGroupName, string cacheName);
    internal HttpMessage CreateListRequest(string subscriptionId, string resourceGroupName, string cacheName);
    [AsyncStateMachineAttribute("Azure.ResourceManager.Redis.FirewallRulesRestOperations/<ListAsync>d__7")]
public Task`1<Response`1<RedisFirewallRuleListResult>> ListAsync(string subscriptionId, string resourceGroupName, string cacheName, CancellationToken cancellationToken);
    public Response`1<RedisFirewallRuleListResult> List(string subscriptionId, string resourceGroupName, string cacheName, CancellationToken cancellationToken);
    internal RequestUriBuilder CreateCreateOrUpdateRequestUri(string subscriptionId, string resourceGroupName, string cacheName, string ruleName, RedisFirewallRuleData data);
    internal HttpMessage CreateCreateOrUpdateRequest(string subscriptionId, string resourceGroupName, string cacheName, string ruleName, RedisFirewallRuleData data);
    [AsyncStateMachineAttribute("Azure.ResourceManager.Redis.FirewallRulesRestOperations/<CreateOrUpdateAsync>d__11")]
public Task`1<Response`1<RedisFirewallRuleData>> CreateOrUpdateAsync(string subscriptionId, string resourceGroupName, string cacheName, string ruleName, RedisFirewallRuleData data, CancellationToken cancellationToken);
    public Response`1<RedisFirewallRuleData> CreateOrUpdate(string subscriptionId, string resourceGroupName, string cacheName, string ruleName, RedisFirewallRuleData data, CancellationToken cancellationToken);
    internal RequestUriBuilder CreateGetRequestUri(string subscriptionId, string resourceGroupName, string cacheName, string ruleName);
    internal HttpMessage CreateGetRequest(string subscriptionId, string resourceGroupName, string cacheName, string ruleName);
    [AsyncStateMachineAttribute("Azure.ResourceManager.Redis.FirewallRulesRestOperations/<GetAsync>d__15")]
public Task`1<Response`1<RedisFirewallRuleData>> GetAsync(string subscriptionId, string resourceGroupName, string cacheName, string ruleName, CancellationToken cancellationToken);
    public Response`1<RedisFirewallRuleData> Get(string subscriptionId, string resourceGroupName, string cacheName, string ruleName, CancellationToken cancellationToken);
    internal RequestUriBuilder CreateDeleteRequestUri(string subscriptionId, string resourceGroupName, string cacheName, string ruleName);
    internal HttpMessage CreateDeleteRequest(string subscriptionId, string resourceGroupName, string cacheName, string ruleName);
    [AsyncStateMachineAttribute("Azure.ResourceManager.Redis.FirewallRulesRestOperations/<DeleteAsync>d__19")]
public Task`1<Response> DeleteAsync(string subscriptionId, string resourceGroupName, string cacheName, string ruleName, CancellationToken cancellationToken);
    public Response Delete(string subscriptionId, string resourceGroupName, string cacheName, string ruleName, CancellationToken cancellationToken);
    internal RequestUriBuilder CreateListNextPageRequestUri(string nextLink, string subscriptionId, string resourceGroupName, string cacheName);
    internal HttpMessage CreateListNextPageRequest(string nextLink, string subscriptionId, string resourceGroupName, string cacheName);
    [AsyncStateMachineAttribute("Azure.ResourceManager.Redis.FirewallRulesRestOperations/<ListNextPageAsync>d__23")]
public Task`1<Response`1<RedisFirewallRuleListResult>> ListNextPageAsync(string nextLink, string subscriptionId, string resourceGroupName, string cacheName, CancellationToken cancellationToken);
    public Response`1<RedisFirewallRuleListResult> ListNextPage(string nextLink, string subscriptionId, string resourceGroupName, string cacheName, CancellationToken cancellationToken);
}
internal class Azure.ResourceManager.Redis.LinkedServerRestOperations : object {
    private TelemetryDetails _userAgent;
    private HttpPipeline _pipeline;
    private Uri _endpoint;
    private string _apiVersion;
    public LinkedServerRestOperations(HttpPipeline pipeline, string applicationId, Uri endpoint, string apiVersion);
    internal RequestUriBuilder CreateCreateRequestUri(string subscriptionId, string resourceGroupName, string name, string linkedServerName, RedisLinkedServerWithPropertyCreateOrUpdateContent content);
    internal HttpMessage CreateCreateRequest(string subscriptionId, string resourceGroupName, string name, string linkedServerName, RedisLinkedServerWithPropertyCreateOrUpdateContent content);
    [AsyncStateMachineAttribute("Azure.ResourceManager.Redis.LinkedServerRestOperations/<CreateAsync>d__7")]
public Task`1<Response> CreateAsync(string subscriptionId, string resourceGroupName, string name, string linkedServerName, RedisLinkedServerWithPropertyCreateOrUpdateContent content, CancellationToken cancellationToken);
    public Response Create(string subscriptionId, string resourceGroupName, string name, string linkedServerName, RedisLinkedServerWithPropertyCreateOrUpdateContent content, CancellationToken cancellationToken);
    internal RequestUriBuilder CreateDeleteRequestUri(string subscriptionId, string resourceGroupName, string name, string linkedServerName);
    internal HttpMessage CreateDeleteRequest(string subscriptionId, string resourceGroupName, string name, string linkedServerName);
    [AsyncStateMachineAttribute("Azure.ResourceManager.Redis.LinkedServerRestOperations/<DeleteAsync>d__11")]
public Task`1<Response> DeleteAsync(string subscriptionId, string resourceGroupName, string name, string linkedServerName, CancellationToken cancellationToken);
    public Response Delete(string subscriptionId, string resourceGroupName, string name, string linkedServerName, CancellationToken cancellationToken);
    internal RequestUriBuilder CreateGetRequestUri(string subscriptionId, string resourceGroupName, string name, string linkedServerName);
    internal HttpMessage CreateGetRequest(string subscriptionId, string resourceGroupName, string name, string linkedServerName);
    [AsyncStateMachineAttribute("Azure.ResourceManager.Redis.LinkedServerRestOperations/<GetAsync>d__15")]
public Task`1<Response`1<RedisLinkedServerWithPropertyData>> GetAsync(string subscriptionId, string resourceGroupName, string name, string linkedServerName, CancellationToken cancellationToken);
    public Response`1<RedisLinkedServerWithPropertyData> Get(string subscriptionId, string resourceGroupName, string name, string linkedServerName, CancellationToken cancellationToken);
    internal RequestUriBuilder CreateListRequestUri(string subscriptionId, string resourceGroupName, string name);
    internal HttpMessage CreateListRequest(string subscriptionId, string resourceGroupName, string name);
    [AsyncStateMachineAttribute("Azure.ResourceManager.Redis.LinkedServerRestOperations/<ListAsync>d__19")]
public Task`1<Response`1<RedisLinkedServerWithPropertiesList>> ListAsync(string subscriptionId, string resourceGroupName, string name, CancellationToken cancellationToken);
    public Response`1<RedisLinkedServerWithPropertiesList> List(string subscriptionId, string resourceGroupName, string name, CancellationToken cancellationToken);
    internal RequestUriBuilder CreateListNextPageRequestUri(string nextLink, string subscriptionId, string resourceGroupName, string name);
    internal HttpMessage CreateListNextPageRequest(string nextLink, string subscriptionId, string resourceGroupName, string name);
    [AsyncStateMachineAttribute("Azure.ResourceManager.Redis.LinkedServerRestOperations/<ListNextPageAsync>d__23")]
public Task`1<Response`1<RedisLinkedServerWithPropertiesList>> ListNextPageAsync(string nextLink, string subscriptionId, string resourceGroupName, string name, CancellationToken cancellationToken);
    public Response`1<RedisLinkedServerWithPropertiesList> ListNextPage(string nextLink, string subscriptionId, string resourceGroupName, string name, CancellationToken cancellationToken);
}
public class Azure.ResourceManager.Redis.Mocking.MockableRedisArmClient : ArmResource {
    internal MockableRedisArmClient(ArmClient client, ResourceIdentifier id);
    internal MockableRedisArmClient(ArmClient client);
    private string GetApiVersionOrNull(ResourceType resourceType);
    public virtual RedisResource GetRedisResource(ResourceIdentifier id);
    public virtual RedisFirewallRuleResource GetRedisFirewallRuleResource(ResourceIdentifier id);
    public virtual RedisPatchScheduleResource GetRedisPatchScheduleResource(ResourceIdentifier id);
    public virtual RedisLinkedServerWithPropertyResource GetRedisLinkedServerWithPropertyResource(ResourceIdentifier id);
    public virtual RedisPrivateEndpointConnectionResource GetRedisPrivateEndpointConnectionResource(ResourceIdentifier id);
    public virtual RedisCacheAccessPolicyResource GetRedisCacheAccessPolicyResource(ResourceIdentifier id);
    public virtual RedisCacheAccessPolicyAssignmentResource GetRedisCacheAccessPolicyAssignmentResource(ResourceIdentifier id);
}
public class Azure.ResourceManager.Redis.Mocking.MockableRedisResourceGroupResource : ArmResource {
    internal MockableRedisResourceGroupResource(ArmClient client, ResourceIdentifier id);
    private string GetApiVersionOrNull(ResourceType resourceType);
    public virtual RedisCollection GetAllRedis();
    [AsyncStateMachineAttribute("Azure.ResourceManager.Redis.Mocking.MockableRedisResourceGroupResource/<GetRedisAsync>d__4")]
[ForwardsClientCallsAttribute]
public virtual Task`1<Response`1<RedisResource>> GetRedisAsync(string name, CancellationToken cancellationToken);
    [ForwardsClientCallsAttribute]
public virtual Response`1<RedisResource> GetRedis(string name, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
private RedisCollection <GetAllRedis>b__3_0(ArmClient client);
}
public class Azure.ResourceManager.Redis.Mocking.MockableRedisSubscriptionResource : ArmResource {
    private ClientDiagnostics _redisClientDiagnostics;
    private RedisRestOperations _redisRestClient;
    private ClientDiagnostics _asyncOperationStatusClientDiagnostics;
    private AsyncOperationStatusRestOperations _asyncOperationStatusRestClient;
    private ClientDiagnostics RedisClientDiagnostics { get; }
    private RedisRestOperations RedisRestClient { get; }
    private ClientDiagnostics AsyncOperationStatusClientDiagnostics { get; }
    private AsyncOperationStatusRestOperations AsyncOperationStatusRestClient { get; }
    internal MockableRedisSubscriptionResource(ArmClient client, ResourceIdentifier id);
    private ClientDiagnostics get_RedisClientDiagnostics();
    private RedisRestOperations get_RedisRestClient();
    private ClientDiagnostics get_AsyncOperationStatusClientDiagnostics();
    private AsyncOperationStatusRestOperations get_AsyncOperationStatusRestClient();
    private string GetApiVersionOrNull(ResourceType resourceType);
    [AsyncStateMachineAttribute("Azure.ResourceManager.Redis.Mocking.MockableRedisSubscriptionResource/<CheckRedisNameAvailabilityAsync>d__15")]
public virtual Task`1<Response> CheckRedisNameAvailabilityAsync(RedisNameAvailabilityContent content, CancellationToken cancellationToken);
    public virtual Response CheckRedisNameAvailability(RedisNameAvailabilityContent content, CancellationToken cancellationToken);
    public virtual AsyncPageable`1<RedisResource> GetAllRedisAsync(CancellationToken cancellationToken);
    public virtual Pageable`1<RedisResource> GetAllRedis(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.ResourceManager.Redis.Mocking.MockableRedisSubscriptionResource/<GetAsyncOperationStatusAsync>d__19")]
public virtual Task`1<Response`1<RedisOperationStatus>> GetAsyncOperationStatusAsync(AzureLocation location, string operationId, CancellationToken cancellationToken);
    public virtual Response`1<RedisOperationStatus> GetAsyncOperationStatus(AzureLocation location, string operationId, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
private HttpMessage <GetAllRedisAsync>g__FirstPageRequest|17_0(Nullable`1<int> pageSizeHint);
    [CompilerGeneratedAttribute]
private HttpMessage <GetAllRedisAsync>g__NextPageRequest|17_1(Nullable`1<int> pageSizeHint, string nextLink);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private RedisResource <GetAllRedisAsync>b__17_2(JsonElement e);
    [CompilerGeneratedAttribute]
private HttpMessage <GetAllRedis>g__FirstPageRequest|18_0(Nullable`1<int> pageSizeHint);
    [CompilerGeneratedAttribute]
private HttpMessage <GetAllRedis>g__NextPageRequest|18_1(Nullable`1<int> pageSizeHint, string nextLink);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private RedisResource <GetAllRedis>b__18_2(JsonElement e);
}
[IsReadOnlyAttribute]
public class Azure.ResourceManager.Redis.Models.AccessPolicyAssignmentProvisioningState : ValueType {
    private string _value;
    private static string UpdatingValue;
    private static string SucceededValue;
    private static string DeletingValue;
    private static string DeletedValue;
    private static string CanceledValue;
    private static string FailedValue;
    [CompilerGeneratedAttribute]
private static AccessPolicyAssignmentProvisioningState <Updating>k__BackingField;
    [CompilerGeneratedAttribute]
private static AccessPolicyAssignmentProvisioningState <Succeeded>k__BackingField;
    [CompilerGeneratedAttribute]
private static AccessPolicyAssignmentProvisioningState <Deleting>k__BackingField;
    [CompilerGeneratedAttribute]
private static AccessPolicyAssignmentProvisioningState <Deleted>k__BackingField;
    [CompilerGeneratedAttribute]
private static AccessPolicyAssignmentProvisioningState <Canceled>k__BackingField;
    [CompilerGeneratedAttribute]
private static AccessPolicyAssignmentProvisioningState <Failed>k__BackingField;
    public static AccessPolicyAssignmentProvisioningState Updating { get; }
    public static AccessPolicyAssignmentProvisioningState Succeeded { get; }
    public static AccessPolicyAssignmentProvisioningState Deleting { get; }
    public static AccessPolicyAssignmentProvisioningState Deleted { get; }
    public static AccessPolicyAssignmentProvisioningState Canceled { get; }
    public static AccessPolicyAssignmentProvisioningState Failed { get; }
    public AccessPolicyAssignmentProvisioningState(string value);
    private static AccessPolicyAssignmentProvisioningState();
    [CompilerGeneratedAttribute]
public static AccessPolicyAssignmentProvisioningState get_Updating();
    [CompilerGeneratedAttribute]
public static AccessPolicyAssignmentProvisioningState get_Succeeded();
    [CompilerGeneratedAttribute]
public static AccessPolicyAssignmentProvisioningState get_Deleting();
    [CompilerGeneratedAttribute]
public static AccessPolicyAssignmentProvisioningState get_Deleted();
    [CompilerGeneratedAttribute]
public static AccessPolicyAssignmentProvisioningState get_Canceled();
    [CompilerGeneratedAttribute]
public static AccessPolicyAssignmentProvisioningState get_Failed();
    public static bool op_Equality(AccessPolicyAssignmentProvisioningState left, AccessPolicyAssignmentProvisioningState right);
    public static bool op_Inequality(AccessPolicyAssignmentProvisioningState left, AccessPolicyAssignmentProvisioningState right);
    public static AccessPolicyAssignmentProvisioningState op_Implicit(string value);
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(AccessPolicyAssignmentProvisioningState other);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    public virtual string ToString();
}
[IsReadOnlyAttribute]
public class Azure.ResourceManager.Redis.Models.AccessPolicyProvisioningState : ValueType {
    private string _value;
    private static string UpdatingValue;
    private static string SucceededValue;
    private static string DeletingValue;
    private static string DeletedValue;
    private static string CanceledValue;
    private static string FailedValue;
    [CompilerGeneratedAttribute]
private static AccessPolicyProvisioningState <Updating>k__BackingField;
    [CompilerGeneratedAttribute]
private static AccessPolicyProvisioningState <Succeeded>k__BackingField;
    [CompilerGeneratedAttribute]
private static AccessPolicyProvisioningState <Deleting>k__BackingField;
    [CompilerGeneratedAttribute]
private static AccessPolicyProvisioningState <Deleted>k__BackingField;
    [CompilerGeneratedAttribute]
private static AccessPolicyProvisioningState <Canceled>k__BackingField;
    [CompilerGeneratedAttribute]
private static AccessPolicyProvisioningState <Failed>k__BackingField;
    public static AccessPolicyProvisioningState Updating { get; }
    public static AccessPolicyProvisioningState Succeeded { get; }
    public static AccessPolicyProvisioningState Deleting { get; }
    public static AccessPolicyProvisioningState Deleted { get; }
    public static AccessPolicyProvisioningState Canceled { get; }
    public static AccessPolicyProvisioningState Failed { get; }
    public AccessPolicyProvisioningState(string value);
    private static AccessPolicyProvisioningState();
    [CompilerGeneratedAttribute]
public static AccessPolicyProvisioningState get_Updating();
    [CompilerGeneratedAttribute]
public static AccessPolicyProvisioningState get_Succeeded();
    [CompilerGeneratedAttribute]
public static AccessPolicyProvisioningState get_Deleting();
    [CompilerGeneratedAttribute]
public static AccessPolicyProvisioningState get_Deleted();
    [CompilerGeneratedAttribute]
public static AccessPolicyProvisioningState get_Canceled();
    [CompilerGeneratedAttribute]
public static AccessPolicyProvisioningState get_Failed();
    public static bool op_Equality(AccessPolicyProvisioningState left, AccessPolicyProvisioningState right);
    public static bool op_Inequality(AccessPolicyProvisioningState left, AccessPolicyProvisioningState right);
    public static AccessPolicyProvisioningState op_Implicit(string value);
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(AccessPolicyProvisioningState other);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    public virtual string ToString();
}
[IsReadOnlyAttribute]
public class Azure.ResourceManager.Redis.Models.AccessPolicyType : ValueType {
    private string _value;
    private static string CustomValue;
    private static string BuiltInValue;
    [CompilerGeneratedAttribute]
private static AccessPolicyType <Custom>k__BackingField;
    [CompilerGeneratedAttribute]
private static AccessPolicyType <BuiltIn>k__BackingField;
    public static AccessPolicyType Custom { get; }
    public static AccessPolicyType BuiltIn { get; }
    public AccessPolicyType(string value);
    private static AccessPolicyType();
    [CompilerGeneratedAttribute]
public static AccessPolicyType get_Custom();
    [CompilerGeneratedAttribute]
public static AccessPolicyType get_BuiltIn();
    public static bool op_Equality(AccessPolicyType left, AccessPolicyType right);
    public static bool op_Inequality(AccessPolicyType left, AccessPolicyType right);
    public static AccessPolicyType op_Implicit(string value);
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(AccessPolicyType other);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    public virtual string ToString();
}
public static class Azure.ResourceManager.Redis.Models.ArmRedisModelFactory : object {
    [EditorBrowsableAttribute("1")]
public static RedisCommonConfiguration RedisCommonConfiguration(Nullable`1<bool> isRdbBackupEnabled, string rdbBackupFrequency, Nullable`1<int> rdbBackupMaxSnapshotCount, string rdbStorageConnectionString, Nullable`1<bool> isAofBackupEnabled, string aofStorageConnectionString0, string aofStorageConnectionString1, string maxFragmentationMemoryReserved, string maxMemoryPolicy, string maxMemoryReserved, string maxMemoryDelta, string maxClients, string preferredDataArchiveAuthMethod, string preferredDataPersistenceAuthMethod, string zonalConfiguration, string authNotRequired, string storageSubscriptionId, IDictionary`2<string, BinaryData> additionalProperties);
    [EditorBrowsableAttribute("1")]
public static RedisData RedisData(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, IDictionary`2<string, string> tags, AzureLocation location, IEnumerable`1<string> zones, ManagedServiceIdentity identity, RedisCommonConfiguration redisConfiguration, string redisVersion, Nullable`1<bool> enableNonSslPort, Nullable`1<int> replicasPerMaster, Nullable`1<int> replicasPerPrimary, IDictionary`2<string, string> tenantSettings, Nullable`1<int> shardCount, Nullable`1<RedisTlsVersion> minimumTlsVersion, Nullable`1<RedisPublicNetworkAccess> publicNetworkAccess, RedisSku sku, ResourceIdentifier subnetId, IPAddress staticIP, Nullable`1<RedisProvisioningState> provisioningState, string hostName, Nullable`1<int> port, Nullable`1<int> sslPort, RedisAccessKeys accessKeys, IEnumerable`1<SubResource> linkedServers, IEnumerable`1<RedisInstanceDetails> instances, IEnumerable`1<RedisPrivateEndpointConnectionData> privateEndpointConnections);
    public static RedisUpgradeNotification RedisUpgradeNotification(string name, Nullable`1<DateTimeOffset> timestamp, IReadOnlyDictionary`2<string, string> upsellNotification);
    public static RedisCreateOrUpdateContent RedisCreateOrUpdateContent(IEnumerable`1<string> zones, AzureLocation location, IDictionary`2<string, string> tags, ManagedServiceIdentity identity, RedisCommonConfiguration redisConfiguration, string redisVersion, Nullable`1<bool> enableNonSslPort, Nullable`1<int> replicasPerMaster, Nullable`1<int> replicasPerPrimary, IDictionary`2<string, string> tenantSettings, Nullable`1<int> shardCount, Nullable`1<RedisTlsVersion> minimumTlsVersion, Nullable`1<RedisPublicNetworkAccess> publicNetworkAccess, Nullable`1<UpdateChannel> updateChannel, Nullable`1<bool> isAccessKeyAuthenticationDisabled, RedisSku sku, ResourceIdentifier subnetId, IPAddress staticIP);
    public static RedisCommonConfiguration RedisCommonConfiguration(Nullable`1<bool> isRdbBackupEnabled, string rdbBackupFrequency, Nullable`1<int> rdbBackupMaxSnapshotCount, string rdbStorageConnectionString, Nullable`1<bool> isAofBackupEnabled, string aofStorageConnectionString0, string aofStorageConnectionString1, string maxFragmentationMemoryReserved, string maxMemoryPolicy, string maxMemoryReserved, string maxMemoryDelta, string maxClients, string notifyKeyspaceEvents, string preferredDataArchiveAuthMethod, string preferredDataPersistenceAuthMethod, string zonalConfiguration, string authNotRequired, string storageSubscriptionId, string isAadEnabled, IDictionary`2<string, BinaryData> additionalProperties);
    public static RedisData RedisData(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, IDictionary`2<string, string> tags, AzureLocation location, IEnumerable`1<string> zones, ManagedServiceIdentity identity, RedisCommonConfiguration redisConfiguration, string redisVersion, Nullable`1<bool> enableNonSslPort, Nullable`1<int> replicasPerMaster, Nullable`1<int> replicasPerPrimary, IDictionary`2<string, string> tenantSettings, Nullable`1<int> shardCount, Nullable`1<RedisTlsVersion> minimumTlsVersion, Nullable`1<RedisPublicNetworkAccess> publicNetworkAccess, Nullable`1<UpdateChannel> updateChannel, Nullable`1<bool> isAccessKeyAuthenticationDisabled, RedisSku sku, ResourceIdentifier subnetId, IPAddress staticIP, Nullable`1<RedisProvisioningState> provisioningState, string hostName, Nullable`1<int> port, Nullable`1<int> sslPort, RedisAccessKeys accessKeys, IEnumerable`1<SubResource> linkedServers, IEnumerable`1<RedisInstanceDetails> instances, IEnumerable`1<RedisPrivateEndpointConnectionData> privateEndpointConnections);
    public static RedisAccessKeys RedisAccessKeys(string primaryKey, string secondaryKey);
    public static RedisInstanceDetails RedisInstanceDetails(Nullable`1<int> sslPort, Nullable`1<int> nonSslPort, string zone, Nullable`1<int> shardId, Nullable`1<bool> isMaster, Nullable`1<bool> isPrimary);
    public static RedisPrivateEndpointConnectionData RedisPrivateEndpointConnectionData(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, ResourceIdentifier privateEndpointId, RedisPrivateLinkServiceConnectionState redisPrivateLinkServiceConnectionState, Nullable`1<RedisPrivateEndpointConnectionProvisioningState> redisProvisioningState);
    public static RedisForceRebootResult RedisForceRebootResult(string message);
    public static ExportRdbContent ExportRdbContent(string format, string prefix, string container, string preferredDataArchiveAuthMethod, string storageSubscriptionId);
    public static RedisFirewallRuleData RedisFirewallRuleData(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, IPAddress startIP, IPAddress endIP);
    public static RedisPatchScheduleData RedisPatchScheduleData(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, Nullable`1<AzureLocation> location, IEnumerable`1<RedisPatchScheduleSetting> scheduleEntries);
    public static RedisLinkedServerWithPropertyCreateOrUpdateContent RedisLinkedServerWithPropertyCreateOrUpdateContent(ResourceIdentifier linkedRedisCacheId, AzureLocation linkedRedisCacheLocation, RedisLinkedServerRole serverRole, string geoReplicatedPrimaryHostName, string primaryHostName);
    public static RedisLinkedServerWithPropertyData RedisLinkedServerWithPropertyData(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, ResourceIdentifier linkedRedisCacheId, Nullable`1<AzureLocation> linkedRedisCacheLocation, Nullable`1<RedisLinkedServerRole> serverRole, string geoReplicatedPrimaryHostName, string primaryHostName, string provisioningState);
    public static RedisPrivateLinkResource RedisPrivateLinkResource(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, string groupId, IEnumerable`1<string> requiredMembers, IEnumerable`1<string> requiredZoneNames);
    public static RedisOperationStatus RedisOperationStatus(ResourceIdentifier id, string name, string status, Nullable`1<float> percentComplete, Nullable`1<DateTimeOffset> startOn, Nullable`1<DateTimeOffset> endOn, IEnumerable`1<OperationStatusResult> operations, ResponseError error, IReadOnlyDictionary`2<string, BinaryData> properties);
    public static RedisCacheAccessPolicyData RedisCacheAccessPolicyData(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, Nullable`1<AccessPolicyProvisioningState> provisioningState, Nullable`1<AccessPolicyType> typePropertiesType, string permissions);
    public static RedisCacheAccessPolicyAssignmentData RedisCacheAccessPolicyAssignmentData(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, Nullable`1<AccessPolicyAssignmentProvisioningState> provisioningState, Nullable`1<Guid> objectId, string objectIdAlias, string accessPolicyName);
    [EditorBrowsableAttribute("1")]
public static RedisCreateOrUpdateContent RedisCreateOrUpdateContent(IEnumerable`1<string> zones, AzureLocation location, IDictionary`2<string, string> tags, ManagedServiceIdentity identity, RedisCommonConfiguration redisConfiguration, string redisVersion, Nullable`1<bool> enableNonSslPort, Nullable`1<int> replicasPerMaster, Nullable`1<int> replicasPerPrimary, IDictionary`2<string, string> tenantSettings, Nullable`1<int> shardCount, Nullable`1<RedisTlsVersion> minimumTlsVersion, Nullable`1<RedisPublicNetworkAccess> publicNetworkAccess, Nullable`1<UpdateChannel> updateChannel, RedisSku sku, ResourceIdentifier subnetId, IPAddress staticIP);
    [EditorBrowsableAttribute("1")]
public static RedisCommonConfiguration RedisCommonConfiguration(Nullable`1<bool> isRdbBackupEnabled, string rdbBackupFrequency, Nullable`1<int> rdbBackupMaxSnapshotCount, string rdbStorageConnectionString, Nullable`1<bool> isAofBackupEnabled, string aofStorageConnectionString0, string aofStorageConnectionString1, string maxFragmentationMemoryReserved, string maxMemoryPolicy, string maxMemoryReserved, string maxMemoryDelta, string maxClients, string preferredDataArchiveAuthMethod, string preferredDataPersistenceAuthMethod, string zonalConfiguration, string authNotRequired, string storageSubscriptionId, string isAadEnabled, IDictionary`2<string, BinaryData> additionalProperties);
    [EditorBrowsableAttribute("1")]
public static RedisData RedisData(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, IDictionary`2<string, string> tags, AzureLocation location, IEnumerable`1<string> zones, ManagedServiceIdentity identity, RedisCommonConfiguration redisConfiguration, string redisVersion, Nullable`1<bool> enableNonSslPort, Nullable`1<int> replicasPerMaster, Nullable`1<int> replicasPerPrimary, IDictionary`2<string, string> tenantSettings, Nullable`1<int> shardCount, Nullable`1<RedisTlsVersion> minimumTlsVersion, Nullable`1<RedisPublicNetworkAccess> publicNetworkAccess, Nullable`1<UpdateChannel> updateChannel, RedisSku sku, ResourceIdentifier subnetId, IPAddress staticIP, Nullable`1<RedisProvisioningState> provisioningState, string hostName, Nullable`1<int> port, Nullable`1<int> sslPort, RedisAccessKeys accessKeys, IEnumerable`1<SubResource> linkedServers, IEnumerable`1<RedisInstanceDetails> instances, IEnumerable`1<RedisPrivateEndpointConnectionData> privateEndpointConnections);
}
public class Azure.ResourceManager.Redis.Models.ExportRdbContent : object {
    private IDictionary`2<string, BinaryData> _serializedAdditionalRawData;
    [CompilerGeneratedAttribute]
private string <Format>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Prefix>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Container>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PreferredDataArchiveAuthMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StorageSubscriptionId>k__BackingField;
    [WirePathAttribute("format")]
public string Format { get; public set; }
    [WirePathAttribute("prefix")]
public string Prefix { get; }
    [WirePathAttribute("container")]
public string Container { get; }
    [WirePathAttribute("preferred-data-archive-auth-method")]
public string PreferredDataArchiveAuthMethod { get; public set; }
    [WirePathAttribute("storage-subscription-id")]
public string StorageSubscriptionId { get; public set; }
    public ExportRdbContent(string prefix, string container);
    internal ExportRdbContent(string format, string prefix, string container, string preferredDataArchiveAuthMethod, string storageSubscriptionId, IDictionary`2<string, BinaryData> serializedAdditionalRawData);
    [CompilerGeneratedAttribute]
public string get_Format();
    [CompilerGeneratedAttribute]
public void set_Format(string value);
    [CompilerGeneratedAttribute]
public string get_Prefix();
    [CompilerGeneratedAttribute]
public string get_Container();
    [CompilerGeneratedAttribute]
public string get_PreferredDataArchiveAuthMethod();
    [CompilerGeneratedAttribute]
public void set_PreferredDataArchiveAuthMethod(string value);
    [CompilerGeneratedAttribute]
public string get_StorageSubscriptionId();
    [CompilerGeneratedAttribute]
public void set_StorageSubscriptionId(string value);
    private sealed virtual override void Azure.Core.IUtf8JsonSerializable.Write(Utf8JsonWriter writer);
    private sealed virtual override void System.ClientModel.Primitives.IJsonModel<Azure.ResourceManager.Redis.Models.ExportRdbContent>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options);
    private sealed virtual override ExportRdbContent System.ClientModel.Primitives.IJsonModel<Azure.ResourceManager.Redis.Models.ExportRdbContent>.Create(Utf8JsonReader& reader, ModelReaderWriterOptions options);
    internal static ExportRdbContent DeserializeExportRdbContent(JsonElement element, ModelReaderWriterOptions options);
    private sealed virtual override BinaryData System.ClientModel.Primitives.IPersistableModel<Azure.ResourceManager.Redis.Models.ExportRdbContent>.Write(ModelReaderWriterOptions options);
    private sealed virtual override ExportRdbContent System.ClientModel.Primitives.IPersistableModel<Azure.ResourceManager.Redis.Models.ExportRdbContent>.Create(BinaryData data, ModelReaderWriterOptions options);
    private sealed virtual override string System.ClientModel.Primitives.IPersistableModel<Azure.ResourceManager.Redis.Models.ExportRdbContent>.GetFormatFromOptions(ModelReaderWriterOptions options);
}
public class Azure.ResourceManager.Redis.Models.ImportRdbContent : object {
    private IDictionary`2<string, BinaryData> _serializedAdditionalRawData;
    [CompilerGeneratedAttribute]
private string <Format>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <Files>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PreferredDataArchiveAuthMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StorageSubscriptionId>k__BackingField;
    [WirePathAttribute("format")]
public string Format { get; public set; }
    [WirePathAttribute("files")]
public IList`1<string> Files { get; }
    [WirePathAttribute("preferred-data-archive-auth-method")]
public string PreferredDataArchiveAuthMethod { get; public set; }
    [WirePathAttribute("storage-subscription-id")]
public string StorageSubscriptionId { get; public set; }
    public ImportRdbContent(IEnumerable`1<string> files);
    internal ImportRdbContent(string format, IList`1<string> files, string preferredDataArchiveAuthMethod, string storageSubscriptionId, IDictionary`2<string, BinaryData> serializedAdditionalRawData);
    [CompilerGeneratedAttribute]
public string get_Format();
    [CompilerGeneratedAttribute]
public void set_Format(string value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_Files();
    [CompilerGeneratedAttribute]
public string get_PreferredDataArchiveAuthMethod();
    [CompilerGeneratedAttribute]
public void set_PreferredDataArchiveAuthMethod(string value);
    [CompilerGeneratedAttribute]
public string get_StorageSubscriptionId();
    [CompilerGeneratedAttribute]
public void set_StorageSubscriptionId(string value);
    private sealed virtual override void Azure.Core.IUtf8JsonSerializable.Write(Utf8JsonWriter writer);
    private sealed virtual override void System.ClientModel.Primitives.IJsonModel<Azure.ResourceManager.Redis.Models.ImportRdbContent>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options);
    private sealed virtual override ImportRdbContent System.ClientModel.Primitives.IJsonModel<Azure.ResourceManager.Redis.Models.ImportRdbContent>.Create(Utf8JsonReader& reader, ModelReaderWriterOptions options);
    internal static ImportRdbContent DeserializeImportRdbContent(JsonElement element, ModelReaderWriterOptions options);
    private sealed virtual override BinaryData System.ClientModel.Primitives.IPersistableModel<Azure.ResourceManager.Redis.Models.ImportRdbContent>.Write(ModelReaderWriterOptions options);
    private sealed virtual override ImportRdbContent System.ClientModel.Primitives.IPersistableModel<Azure.ResourceManager.Redis.Models.ImportRdbContent>.Create(BinaryData data, ModelReaderWriterOptions options);
    private sealed virtual override string System.ClientModel.Primitives.IPersistableModel<Azure.ResourceManager.Redis.Models.ImportRdbContent>.GetFormatFromOptions(ModelReaderWriterOptions options);
}
public class Azure.ResourceManager.Redis.Models.RedisAccessKeys : object {
    private IDictionary`2<string, BinaryData> _serializedAdditionalRawData;
    [CompilerGeneratedAttribute]
private string <PrimaryKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SecondaryKey>k__BackingField;
    [WirePathAttribute("primaryKey")]
public string PrimaryKey { get; }
    [WirePathAttribute("secondaryKey")]
public string SecondaryKey { get; }
    internal RedisAccessKeys(string primaryKey, string secondaryKey, IDictionary`2<string, BinaryData> serializedAdditionalRawData);
    [CompilerGeneratedAttribute]
public string get_PrimaryKey();
    [CompilerGeneratedAttribute]
public string get_SecondaryKey();
    private sealed virtual override void Azure.Core.IUtf8JsonSerializable.Write(Utf8JsonWriter writer);
    private sealed virtual override void System.ClientModel.Primitives.IJsonModel<Azure.ResourceManager.Redis.Models.RedisAccessKeys>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options);
    private sealed virtual override RedisAccessKeys System.ClientModel.Primitives.IJsonModel<Azure.ResourceManager.Redis.Models.RedisAccessKeys>.Create(Utf8JsonReader& reader, ModelReaderWriterOptions options);
    internal static RedisAccessKeys DeserializeRedisAccessKeys(JsonElement element, ModelReaderWriterOptions options);
    private BinaryData SerializeBicep(ModelReaderWriterOptions options);
    private sealed virtual override BinaryData System.ClientModel.Primitives.IPersistableModel<Azure.ResourceManager.Redis.Models.RedisAccessKeys>.Write(ModelReaderWriterOptions options);
    private sealed virtual override RedisAccessKeys System.ClientModel.Primitives.IPersistableModel<Azure.ResourceManager.Redis.Models.RedisAccessKeys>.Create(BinaryData data, ModelReaderWriterOptions options);
    private sealed virtual override string System.ClientModel.Primitives.IPersistableModel<Azure.ResourceManager.Redis.Models.RedisAccessKeys>.GetFormatFromOptions(ModelReaderWriterOptions options);
}
internal class Azure.ResourceManager.Redis.Models.RedisCacheAccessPolicyAssignmentList : object {
    private IDictionary`2<string, BinaryData> _serializedAdditionalRawData;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<RedisCacheAccessPolicyAssignmentData> <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NextLink>k__BackingField;
    public IReadOnlyList`1<RedisCacheAccessPolicyAssignmentData> Value { get; }
    public string NextLink { get; }
    internal RedisCacheAccessPolicyAssignmentList(IReadOnlyList`1<RedisCacheAccessPolicyAssignmentData> value, string nextLink, IDictionary`2<string, BinaryData> serializedAdditionalRawData);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<RedisCacheAccessPolicyAssignmentData> get_Value();
    [CompilerGeneratedAttribute]
public string get_NextLink();
    private sealed virtual override void Azure.Core.IUtf8JsonSerializable.Write(Utf8JsonWriter writer);
    private sealed virtual override void System.ClientModel.Primitives.IJsonModel<Azure.ResourceManager.Redis.Models.RedisCacheAccessPolicyAssignmentList>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options);
    private sealed virtual override RedisCacheAccessPolicyAssignmentList System.ClientModel.Primitives.IJsonModel<Azure.ResourceManager.Redis.Models.RedisCacheAccessPolicyAssignmentList>.Create(Utf8JsonReader& reader, ModelReaderWriterOptions options);
    internal static RedisCacheAccessPolicyAssignmentList DeserializeRedisCacheAccessPolicyAssignmentList(JsonElement element, ModelReaderWriterOptions options);
    private BinaryData SerializeBicep(ModelReaderWriterOptions options);
    private sealed virtual override BinaryData System.ClientModel.Primitives.IPersistableModel<Azure.ResourceManager.Redis.Models.RedisCacheAccessPolicyAssignmentList>.Write(ModelReaderWriterOptions options);
    private sealed virtual override RedisCacheAccessPolicyAssignmentList System.ClientModel.Primitives.IPersistableModel<Azure.ResourceManager.Redis.Models.RedisCacheAccessPolicyAssignmentList>.Create(BinaryData data, ModelReaderWriterOptions options);
    private sealed virtual override string System.ClientModel.Primitives.IPersistableModel<Azure.ResourceManager.Redis.Models.RedisCacheAccessPolicyAssignmentList>.GetFormatFromOptions(ModelReaderWriterOptions options);
}
internal class Azure.ResourceManager.Redis.Models.RedisCacheAccessPolicyList : object {
    private IDictionary`2<string, BinaryData> _serializedAdditionalRawData;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<RedisCacheAccessPolicyData> <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NextLink>k__BackingField;
    public IReadOnlyList`1<RedisCacheAccessPolicyData> Value { get; }
    public string NextLink { get; }
    internal RedisCacheAccessPolicyList(IReadOnlyList`1<RedisCacheAccessPolicyData> value, string nextLink, IDictionary`2<string, BinaryData> serializedAdditionalRawData);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<RedisCacheAccessPolicyData> get_Value();
    [CompilerGeneratedAttribute]
public string get_NextLink();
    private sealed virtual override void Azure.Core.IUtf8JsonSerializable.Write(Utf8JsonWriter writer);
    private sealed virtual override void System.ClientModel.Primitives.IJsonModel<Azure.ResourceManager.Redis.Models.RedisCacheAccessPolicyList>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options);
    private sealed virtual override RedisCacheAccessPolicyList System.ClientModel.Primitives.IJsonModel<Azure.ResourceManager.Redis.Models.RedisCacheAccessPolicyList>.Create(Utf8JsonReader& reader, ModelReaderWriterOptions options);
    internal static RedisCacheAccessPolicyList DeserializeRedisCacheAccessPolicyList(JsonElement element, ModelReaderWriterOptions options);
    private BinaryData SerializeBicep(ModelReaderWriterOptions options);
    private sealed virtual override BinaryData System.ClientModel.Primitives.IPersistableModel<Azure.ResourceManager.Redis.Models.RedisCacheAccessPolicyList>.Write(ModelReaderWriterOptions options);
    private sealed virtual override RedisCacheAccessPolicyList System.ClientModel.Primitives.IPersistableModel<Azure.ResourceManager.Redis.Models.RedisCacheAccessPolicyList>.Create(BinaryData data, ModelReaderWriterOptions options);
    private sealed virtual override string System.ClientModel.Primitives.IPersistableModel<Azure.ResourceManager.Redis.Models.RedisCacheAccessPolicyList>.GetFormatFromOptions(ModelReaderWriterOptions options);
}
[CodeGenSerializationAttribute("IsRdbBackupEnabled")]
[CodeGenSerializationAttribute("IsAofBackupEnabled")]
[CodeGenSerializationAttribute("RdbBackupMaxSnapshotCount")]
public class Azure.ResourceManager.Redis.Models.RedisCommonConfiguration : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsRdbBackupEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RdbBackupFrequency>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <RdbBackupMaxSnapshotCount>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RdbStorageConnectionString>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsAofBackupEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AofStorageConnectionString0>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AofStorageConnectionString1>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MaxFragmentationMemoryReserved>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MaxMemoryPolicy>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MaxMemoryReserved>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MaxMemoryDelta>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MaxClients>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NotifyKeyspaceEvents>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PreferredDataArchiveAuthMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PreferredDataPersistenceAuthMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ZonalConfiguration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AuthNotRequired>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StorageSubscriptionId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IsAadEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, BinaryData> <AdditionalProperties>k__BackingField;
    [WirePathAttribute("rdb-backup-enabled")]
public Nullable`1<bool> IsRdbBackupEnabled { get; public set; }
    [WirePathAttribute("rdb-backup-frequency")]
public string RdbBackupFrequency { get; public set; }
    [WirePathAttribute("rdb-backup-max-snapshot-count")]
public Nullable`1<int> RdbBackupMaxSnapshotCount { get; public set; }
    [WirePathAttribute("rdb-storage-connection-string")]
public string RdbStorageConnectionString { get; public set; }
    [WirePathAttribute("aof-backup-enabled")]
public Nullable`1<bool> IsAofBackupEnabled { get; public set; }
    [WirePathAttribute("aof-storage-connection-string-0")]
public string AofStorageConnectionString0 { get; public set; }
    [WirePathAttribute("aof-storage-connection-string-1")]
public string AofStorageConnectionString1 { get; public set; }
    [WirePathAttribute("maxfragmentationmemory-reserved")]
public string MaxFragmentationMemoryReserved { get; public set; }
    [WirePathAttribute("maxmemory-policy")]
public string MaxMemoryPolicy { get; public set; }
    [WirePathAttribute("maxmemory-reserved")]
public string MaxMemoryReserved { get; public set; }
    [WirePathAttribute("maxmemory-delta")]
public string MaxMemoryDelta { get; public set; }
    [WirePathAttribute("maxclients")]
public string MaxClients { get; }
    [WirePathAttribute("notify-keyspace-events")]
public string NotifyKeyspaceEvents { get; public set; }
    [WirePathAttribute("preferred-data-archive-auth-method")]
public string PreferredDataArchiveAuthMethod { get; }
    [WirePathAttribute("preferred-data-persistence-auth-method")]
public string PreferredDataPersistenceAuthMethod { get; public set; }
    [WirePathAttribute("zonal-configuration")]
public string ZonalConfiguration { get; }
    [WirePathAttribute("authnotrequired")]
public string AuthNotRequired { get; public set; }
    [WirePathAttribute("storage-subscription-id")]
public string StorageSubscriptionId { get; public set; }
    [WirePathAttribute("aad-enabled")]
public string IsAadEnabled { get; public set; }
    [WirePathAttribute("AdditionalProperties")]
public IDictionary`2<string, BinaryData> AdditionalProperties { get; }
    internal RedisCommonConfiguration(Nullable`1<bool> isRdbBackupEnabled, string rdbBackupFrequency, Nullable`1<int> rdbBackupMaxSnapshotCount, string rdbStorageConnectionString, Nullable`1<bool> isAofBackupEnabled, string aofStorageConnectionString0, string aofStorageConnectionString1, string maxFragmentationMemoryReserved, string maxMemoryPolicy, string maxMemoryReserved, string maxMemoryDelta, string maxClients, string notifyKeyspaceEvents, string preferredDataArchiveAuthMethod, string preferredDataPersistenceAuthMethod, string zonalConfiguration, string authNotRequired, string storageSubscriptionId, string isAadEnabled, IDictionary`2<string, BinaryData> additionalProperties);
    internal void WriteRdbBackupMaxSnapshotCount(Utf8JsonWriter writer, ModelReaderWriterOptions options);
    internal static void ReadIsRdbBackupEnabled(JsonProperty property, Nullable`1& IsRdbBackupEnabled);
    internal static void ReadIsAofBackupEnabled(JsonProperty property, Nullable`1& IsAofBackupEnabled);
    internal static void ReadRdbBackupMaxSnapshotCount(JsonProperty property, Nullable`1& RdbBackupMaxSnapshotCount);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsRdbBackupEnabled();
    [CompilerGeneratedAttribute]
public void set_IsRdbBackupEnabled(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_RdbBackupFrequency();
    [CompilerGeneratedAttribute]
public void set_RdbBackupFrequency(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_RdbBackupMaxSnapshotCount();
    [CompilerGeneratedAttribute]
public void set_RdbBackupMaxSnapshotCount(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_RdbStorageConnectionString();
    [CompilerGeneratedAttribute]
public void set_RdbStorageConnectionString(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsAofBackupEnabled();
    [CompilerGeneratedAttribute]
public void set_IsAofBackupEnabled(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_AofStorageConnectionString0();
    [CompilerGeneratedAttribute]
public void set_AofStorageConnectionString0(string value);
    [CompilerGeneratedAttribute]
public string get_AofStorageConnectionString1();
    [CompilerGeneratedAttribute]
public void set_AofStorageConnectionString1(string value);
    [CompilerGeneratedAttribute]
public string get_MaxFragmentationMemoryReserved();
    [CompilerGeneratedAttribute]
public void set_MaxFragmentationMemoryReserved(string value);
    [CompilerGeneratedAttribute]
public string get_MaxMemoryPolicy();
    [CompilerGeneratedAttribute]
public void set_MaxMemoryPolicy(string value);
    [CompilerGeneratedAttribute]
public string get_MaxMemoryReserved();
    [CompilerGeneratedAttribute]
public void set_MaxMemoryReserved(string value);
    [CompilerGeneratedAttribute]
public string get_MaxMemoryDelta();
    [CompilerGeneratedAttribute]
public void set_MaxMemoryDelta(string value);
    [CompilerGeneratedAttribute]
public string get_MaxClients();
    [CompilerGeneratedAttribute]
public string get_NotifyKeyspaceEvents();
    [CompilerGeneratedAttribute]
public void set_NotifyKeyspaceEvents(string value);
    [CompilerGeneratedAttribute]
public string get_PreferredDataArchiveAuthMethod();
    [CompilerGeneratedAttribute]
public string get_PreferredDataPersistenceAuthMethod();
    [CompilerGeneratedAttribute]
public void set_PreferredDataPersistenceAuthMethod(string value);
    [CompilerGeneratedAttribute]
public string get_ZonalConfiguration();
    [CompilerGeneratedAttribute]
public string get_AuthNotRequired();
    [CompilerGeneratedAttribute]
public void set_AuthNotRequired(string value);
    [CompilerGeneratedAttribute]
public string get_StorageSubscriptionId();
    [CompilerGeneratedAttribute]
public void set_StorageSubscriptionId(string value);
    [CompilerGeneratedAttribute]
public string get_IsAadEnabled();
    [CompilerGeneratedAttribute]
public void set_IsAadEnabled(string value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, BinaryData> get_AdditionalProperties();
    private sealed virtual override void Azure.Core.IUtf8JsonSerializable.Write(Utf8JsonWriter writer);
    private sealed virtual override void System.ClientModel.Primitives.IJsonModel<Azure.ResourceManager.Redis.Models.RedisCommonConfiguration>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options);
    private sealed virtual override RedisCommonConfiguration System.ClientModel.Primitives.IJsonModel<Azure.ResourceManager.Redis.Models.RedisCommonConfiguration>.Create(Utf8JsonReader& reader, ModelReaderWriterOptions options);
    internal static RedisCommonConfiguration DeserializeRedisCommonConfiguration(JsonElement element, ModelReaderWriterOptions options);
    private BinaryData SerializeBicep(ModelReaderWriterOptions options);
    private sealed virtual override BinaryData System.ClientModel.Primitives.IPersistableModel<Azure.ResourceManager.Redis.Models.RedisCommonConfiguration>.Write(ModelReaderWriterOptions options);
    private sealed virtual override RedisCommonConfiguration System.ClientModel.Primitives.IPersistableModel<Azure.ResourceManager.Redis.Models.RedisCommonConfiguration>.Create(BinaryData data, ModelReaderWriterOptions options);
    private sealed virtual override string System.ClientModel.Primitives.IPersistableModel<Azure.ResourceManager.Redis.Models.RedisCommonConfiguration>.GetFormatFromOptions(ModelReaderWriterOptions options);
}
public class Azure.ResourceManager.Redis.Models.RedisCreateOrUpdateContent : object {
    private IDictionary`2<string, BinaryData> _serializedAdditionalRawData;
    [CompilerGeneratedAttribute]
private IList`1<string> <Zones>k__BackingField;
    [CompilerGeneratedAttribute]
private AzureLocation <Location>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <Tags>k__BackingField;
    [CompilerGeneratedAttribute]
private ManagedServiceIdentity <Identity>k__BackingField;
    [CompilerGeneratedAttribute]
private RedisCommonConfiguration <RedisConfiguration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RedisVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <EnableNonSslPort>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <ReplicasPerMaster>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <ReplicasPerPrimary>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <TenantSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <ShardCount>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<RedisTlsVersion> <MinimumTlsVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<RedisPublicNetworkAccess> <PublicNetworkAccess>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<UpdateChannel> <UpdateChannel>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsAccessKeyAuthenticationDisabled>k__BackingField;
    [CompilerGeneratedAttribute]
private RedisSku <Sku>k__BackingField;
    [CompilerGeneratedAttribute]
private ResourceIdentifier <SubnetId>k__BackingField;
    [CompilerGeneratedAttribute]
private IPAddress <StaticIP>k__BackingField;
    [WirePathAttribute("zones")]
public IList`1<string> Zones { get; }
    [WirePathAttribute("location")]
public AzureLocation Location { get; }
    [WirePathAttribute("tags")]
public IDictionary`2<string, string> Tags { get; }
    [WirePathAttribute("identity")]
public ManagedServiceIdentity Identity { get; public set; }
    [WirePathAttribute("properties.redisConfiguration")]
public RedisCommonConfiguration RedisConfiguration { get; public set; }
    [WirePathAttribute("properties.redisVersion")]
public string RedisVersion { get; public set; }
    [WirePathAttribute("properties.enableNonSslPort")]
public Nullable`1<bool> EnableNonSslPort { get; public set; }
    [WirePathAttribute("properties.replicasPerMaster")]
public Nullable`1<int> ReplicasPerMaster { get; public set; }
    [WirePathAttribute("properties.replicasPerPrimary")]
public Nullable`1<int> ReplicasPerPrimary { get; public set; }
    [WirePathAttribute("properties.tenantSettings")]
public IDictionary`2<string, string> TenantSettings { get; }
    [WirePathAttribute("properties.shardCount")]
public Nullable`1<int> ShardCount { get; public set; }
    [WirePathAttribute("properties.minimumTlsVersion")]
public Nullable`1<RedisTlsVersion> MinimumTlsVersion { get; public set; }
    [WirePathAttribute("properties.publicNetworkAccess")]
public Nullable`1<RedisPublicNetworkAccess> PublicNetworkAccess { get; public set; }
    [WirePathAttribute("properties.updateChannel")]
public Nullable`1<UpdateChannel> UpdateChannel { get; public set; }
    [WirePathAttribute("properties.disableAccessKeyAuthentication")]
public Nullable`1<bool> IsAccessKeyAuthenticationDisabled { get; public set; }
    [WirePathAttribute("properties.sku")]
public RedisSku Sku { get; }
    [WirePathAttribute("properties.subnetId")]
public ResourceIdentifier SubnetId { get; public set; }
    [WirePathAttribute("properties.staticIP")]
public IPAddress StaticIP { get; public set; }
    public RedisCreateOrUpdateContent(AzureLocation location, RedisSku sku);
    internal RedisCreateOrUpdateContent(IList`1<string> zones, AzureLocation location, IDictionary`2<string, string> tags, ManagedServiceIdentity identity, RedisCommonConfiguration redisConfiguration, string redisVersion, Nullable`1<bool> enableNonSslPort, Nullable`1<int> replicasPerMaster, Nullable`1<int> replicasPerPrimary, IDictionary`2<string, string> tenantSettings, Nullable`1<int> shardCount, Nullable`1<RedisTlsVersion> minimumTlsVersion, Nullable`1<RedisPublicNetworkAccess> publicNetworkAccess, Nullable`1<UpdateChannel> updateChannel, Nullable`1<bool> isAccessKeyAuthenticationDisabled, RedisSku sku, ResourceIdentifier subnetId, IPAddress staticIP, IDictionary`2<string, BinaryData> serializedAdditionalRawData);
    [CompilerGeneratedAttribute]
public IList`1<string> get_Zones();
    [CompilerGeneratedAttribute]
public AzureLocation get_Location();
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_Tags();
    [CompilerGeneratedAttribute]
public ManagedServiceIdentity get_Identity();
    [CompilerGeneratedAttribute]
public void set_Identity(ManagedServiceIdentity value);
    [CompilerGeneratedAttribute]
public RedisCommonConfiguration get_RedisConfiguration();
    [CompilerGeneratedAttribute]
public void set_RedisConfiguration(RedisCommonConfiguration value);
    [CompilerGeneratedAttribute]
public string get_RedisVersion();
    [CompilerGeneratedAttribute]
public void set_RedisVersion(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_EnableNonSslPort();
    [CompilerGeneratedAttribute]
public void set_EnableNonSslPort(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_ReplicasPerMaster();
    [CompilerGeneratedAttribute]
public void set_ReplicasPerMaster(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_ReplicasPerPrimary();
    [CompilerGeneratedAttribute]
public void set_ReplicasPerPrimary(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_TenantSettings();
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_ShardCount();
    [CompilerGeneratedAttribute]
public void set_ShardCount(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<RedisTlsVersion> get_MinimumTlsVersion();
    [CompilerGeneratedAttribute]
public void set_MinimumTlsVersion(Nullable`1<RedisTlsVersion> value);
    [CompilerGeneratedAttribute]
public Nullable`1<RedisPublicNetworkAccess> get_PublicNetworkAccess();
    [CompilerGeneratedAttribute]
public void set_PublicNetworkAccess(Nullable`1<RedisPublicNetworkAccess> value);
    [CompilerGeneratedAttribute]
public Nullable`1<UpdateChannel> get_UpdateChannel();
    [CompilerGeneratedAttribute]
public void set_UpdateChannel(Nullable`1<UpdateChannel> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsAccessKeyAuthenticationDisabled();
    [CompilerGeneratedAttribute]
public void set_IsAccessKeyAuthenticationDisabled(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public RedisSku get_Sku();
    [CompilerGeneratedAttribute]
public ResourceIdentifier get_SubnetId();
    [CompilerGeneratedAttribute]
public void set_SubnetId(ResourceIdentifier value);
    [CompilerGeneratedAttribute]
public IPAddress get_StaticIP();
    [CompilerGeneratedAttribute]
public void set_StaticIP(IPAddress value);
    private sealed virtual override void Azure.Core.IUtf8JsonSerializable.Write(Utf8JsonWriter writer);
    private sealed virtual override void System.ClientModel.Primitives.IJsonModel<Azure.ResourceManager.Redis.Models.RedisCreateOrUpdateContent>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options);
    private sealed virtual override RedisCreateOrUpdateContent System.ClientModel.Primitives.IJsonModel<Azure.ResourceManager.Redis.Models.RedisCreateOrUpdateContent>.Create(Utf8JsonReader& reader, ModelReaderWriterOptions options);
    internal static RedisCreateOrUpdateContent DeserializeRedisCreateOrUpdateContent(JsonElement element, ModelReaderWriterOptions options);
    private sealed virtual override BinaryData System.ClientModel.Primitives.IPersistableModel<Azure.ResourceManager.Redis.Models.RedisCreateOrUpdateContent>.Write(ModelReaderWriterOptions options);
    private sealed virtual override RedisCreateOrUpdateContent System.ClientModel.Primitives.IPersistableModel<Azure.ResourceManager.Redis.Models.RedisCreateOrUpdateContent>.Create(BinaryData data, ModelReaderWriterOptions options);
    private sealed virtual override string System.ClientModel.Primitives.IPersistableModel<Azure.ResourceManager.Redis.Models.RedisCreateOrUpdateContent>.GetFormatFromOptions(ModelReaderWriterOptions options);
}
public enum Azure.ResourceManager.Redis.Models.RedisDayOfWeek : Enum {
    public int value__;
    public static RedisDayOfWeek Monday;
    public static RedisDayOfWeek Tuesday;
    public static RedisDayOfWeek Wednesday;
    public static RedisDayOfWeek Thursday;
    public static RedisDayOfWeek Friday;
    public static RedisDayOfWeek Saturday;
    public static RedisDayOfWeek Sunday;
    public static RedisDayOfWeek Everyday;
    public static RedisDayOfWeek Weekend;
}
[ExtensionAttribute]
internal static class Azure.ResourceManager.Redis.Models.RedisDayOfWeekExtensions : object {
    [ExtensionAttribute]
public static string ToSerialString(RedisDayOfWeek value);
    [ExtensionAttribute]
public static RedisDayOfWeek ToRedisDayOfWeek(string value);
}
internal class Azure.ResourceManager.Redis.Models.RedisFirewallRuleListResult : object {
    private IDictionary`2<string, BinaryData> _serializedAdditionalRawData;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<RedisFirewallRuleData> <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NextLink>k__BackingField;
    public IReadOnlyList`1<RedisFirewallRuleData> Value { get; }
    public string NextLink { get; }
    internal RedisFirewallRuleListResult(IReadOnlyList`1<RedisFirewallRuleData> value, string nextLink, IDictionary`2<string, BinaryData> serializedAdditionalRawData);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<RedisFirewallRuleData> get_Value();
    [CompilerGeneratedAttribute]
public string get_NextLink();
    private sealed virtual override void Azure.Core.IUtf8JsonSerializable.Write(Utf8JsonWriter writer);
    private sealed virtual override void System.ClientModel.Primitives.IJsonModel<Azure.ResourceManager.Redis.Models.RedisFirewallRuleListResult>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options);
    private sealed virtual override RedisFirewallRuleListResult System.ClientModel.Primitives.IJsonModel<Azure.ResourceManager.Redis.Models.RedisFirewallRuleListResult>.Create(Utf8JsonReader& reader, ModelReaderWriterOptions options);
    internal static RedisFirewallRuleListResult DeserializeRedisFirewallRuleListResult(JsonElement element, ModelReaderWriterOptions options);
    private BinaryData SerializeBicep(ModelReaderWriterOptions options);
    private sealed virtual override BinaryData System.ClientModel.Primitives.IPersistableModel<Azure.ResourceManager.Redis.Models.RedisFirewallRuleListResult>.Write(ModelReaderWriterOptions options);
    private sealed virtual override RedisFirewallRuleListResult System.ClientModel.Primitives.IPersistableModel<Azure.ResourceManager.Redis.Models.RedisFirewallRuleListResult>.Create(BinaryData data, ModelReaderWriterOptions options);
    private sealed virtual override string System.ClientModel.Primitives.IPersistableModel<Azure.ResourceManager.Redis.Models.RedisFirewallRuleListResult>.GetFormatFromOptions(ModelReaderWriterOptions options);
}
public class Azure.ResourceManager.Redis.Models.RedisForceRebootResult : object {
    private IDictionary`2<string, BinaryData> _serializedAdditionalRawData;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [WirePathAttribute("message")]
public string Message { get; }
    internal RedisForceRebootResult(string message, IDictionary`2<string, BinaryData> serializedAdditionalRawData);
    [CompilerGeneratedAttribute]
public string get_Message();
    private sealed virtual override void Azure.Core.IUtf8JsonSerializable.Write(Utf8JsonWriter writer);
    private sealed virtual override void System.ClientModel.Primitives.IJsonModel<Azure.ResourceManager.Redis.Models.RedisForceRebootResult>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options);
    private sealed virtual override RedisForceRebootResult System.ClientModel.Primitives.IJsonModel<Azure.ResourceManager.Redis.Models.RedisForceRebootResult>.Create(Utf8JsonReader& reader, ModelReaderWriterOptions options);
    internal static RedisForceRebootResult DeserializeRedisForceRebootResult(JsonElement element, ModelReaderWriterOptions options);
    private BinaryData SerializeBicep(ModelReaderWriterOptions options);
    private sealed virtual override BinaryData System.ClientModel.Primitives.IPersistableModel<Azure.ResourceManager.Redis.Models.RedisForceRebootResult>.Write(ModelReaderWriterOptions options);
    private sealed virtual override RedisForceRebootResult System.ClientModel.Primitives.IPersistableModel<Azure.ResourceManager.Redis.Models.RedisForceRebootResult>.Create(BinaryData data, ModelReaderWriterOptions options);
    private sealed virtual override string System.ClientModel.Primitives.IPersistableModel<Azure.ResourceManager.Redis.Models.RedisForceRebootResult>.GetFormatFromOptions(ModelReaderWriterOptions options);
}
public class Azure.ResourceManager.Redis.Models.RedisInstanceDetails : object {
    private IDictionary`2<string, BinaryData> _serializedAdditionalRawData;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <SslPort>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <NonSslPort>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Zone>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <ShardId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsMaster>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsPrimary>k__BackingField;
    [WirePathAttribute("sslPort")]
public Nullable`1<int> SslPort { get; }
    [WirePathAttribute("nonSslPort")]
public Nullable`1<int> NonSslPort { get; }
    [WirePathAttribute("zone")]
public string Zone { get; }
    [WirePathAttribute("shardId")]
public Nullable`1<int> ShardId { get; }
    [WirePathAttribute("isMaster")]
public Nullable`1<bool> IsMaster { get; }
    [WirePathAttribute("isPrimary")]
public Nullable`1<bool> IsPrimary { get; }
    internal RedisInstanceDetails(Nullable`1<int> sslPort, Nullable`1<int> nonSslPort, string zone, Nullable`1<int> shardId, Nullable`1<bool> isMaster, Nullable`1<bool> isPrimary, IDictionary`2<string, BinaryData> serializedAdditionalRawData);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_SslPort();
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_NonSslPort();
    [CompilerGeneratedAttribute]
public string get_Zone();
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_ShardId();
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsMaster();
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsPrimary();
    private sealed virtual override void Azure.Core.IUtf8JsonSerializable.Write(Utf8JsonWriter writer);
    private sealed virtual override void System.ClientModel.Primitives.IJsonModel<Azure.ResourceManager.Redis.Models.RedisInstanceDetails>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options);
    private sealed virtual override RedisInstanceDetails System.ClientModel.Primitives.IJsonModel<Azure.ResourceManager.Redis.Models.RedisInstanceDetails>.Create(Utf8JsonReader& reader, ModelReaderWriterOptions options);
    internal static RedisInstanceDetails DeserializeRedisInstanceDetails(JsonElement element, ModelReaderWriterOptions options);
    private BinaryData SerializeBicep(ModelReaderWriterOptions options);
    private sealed virtual override BinaryData System.ClientModel.Primitives.IPersistableModel<Azure.ResourceManager.Redis.Models.RedisInstanceDetails>.Write(ModelReaderWriterOptions options);
    private sealed virtual override RedisInstanceDetails System.ClientModel.Primitives.IPersistableModel<Azure.ResourceManager.Redis.Models.RedisInstanceDetails>.Create(BinaryData data, ModelReaderWriterOptions options);
    private sealed virtual override string System.ClientModel.Primitives.IPersistableModel<Azure.ResourceManager.Redis.Models.RedisInstanceDetails>.GetFormatFromOptions(ModelReaderWriterOptions options);
}
public enum Azure.ResourceManager.Redis.Models.RedisLinkedServerRole : Enum {
    public int value__;
    public static RedisLinkedServerRole Primary;
    public static RedisLinkedServerRole Secondary;
}
[ExtensionAttribute]
internal static class Azure.ResourceManager.Redis.Models.RedisLinkedServerRoleExtensions : object {
    [ExtensionAttribute]
public static string ToSerialString(RedisLinkedServerRole value);
    [ExtensionAttribute]
public static RedisLinkedServerRole ToRedisLinkedServerRole(string value);
}
internal class Azure.ResourceManager.Redis.Models.RedisLinkedServerWithPropertiesList : object {
    private IDictionary`2<string, BinaryData> _serializedAdditionalRawData;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<RedisLinkedServerWithPropertyData> <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NextLink>k__BackingField;
    public IReadOnlyList`1<RedisLinkedServerWithPropertyData> Value { get; }
    public string NextLink { get; }
    internal RedisLinkedServerWithPropertiesList(IReadOnlyList`1<RedisLinkedServerWithPropertyData> value, string nextLink, IDictionary`2<string, BinaryData> serializedAdditionalRawData);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<RedisLinkedServerWithPropertyData> get_Value();
    [CompilerGeneratedAttribute]
public string get_NextLink();
    private sealed virtual override void Azure.Core.IUtf8JsonSerializable.Write(Utf8JsonWriter writer);
    private sealed virtual override void System.ClientModel.Primitives.IJsonModel<Azure.ResourceManager.Redis.Models.RedisLinkedServerWithPropertiesList>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options);
    private sealed virtual override RedisLinkedServerWithPropertiesList System.ClientModel.Primitives.IJsonModel<Azure.ResourceManager.Redis.Models.RedisLinkedServerWithPropertiesList>.Create(Utf8JsonReader& reader, ModelReaderWriterOptions options);
    internal static RedisLinkedServerWithPropertiesList DeserializeRedisLinkedServerWithPropertiesList(JsonElement element, ModelReaderWriterOptions options);
    private BinaryData SerializeBicep(ModelReaderWriterOptions options);
    private sealed virtual override BinaryData System.ClientModel.Primitives.IPersistableModel<Azure.ResourceManager.Redis.Models.RedisLinkedServerWithPropertiesList>.Write(ModelReaderWriterOptions options);
    private sealed virtual override RedisLinkedServerWithPropertiesList System.ClientModel.Primitives.IPersistableModel<Azure.ResourceManager.Redis.Models.RedisLinkedServerWithPropertiesList>.Create(BinaryData data, ModelReaderWriterOptions options);
    private sealed virtual override string System.ClientModel.Primitives.IPersistableModel<Azure.ResourceManager.Redis.Models.RedisLinkedServerWithPropertiesList>.GetFormatFromOptions(ModelReaderWriterOptions options);
}
public class Azure.ResourceManager.Redis.Models.RedisLinkedServerWithPropertyCreateOrUpdateContent : object {
    private IDictionary`2<string, BinaryData> _serializedAdditionalRawData;
    [CompilerGeneratedAttribute]
private ResourceIdentifier <LinkedRedisCacheId>k__BackingField;
    [CompilerGeneratedAttribute]
private AzureLocation <LinkedRedisCacheLocation>k__BackingField;
    [CompilerGeneratedAttribute]
private RedisLinkedServerRole <ServerRole>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GeoReplicatedPrimaryHostName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PrimaryHostName>k__BackingField;
    [WirePathAttribute("properties.linkedRedisCacheId")]
public ResourceIdentifier LinkedRedisCacheId { get; }
    [WirePathAttribute("properties.linkedRedisCacheLocation")]
public AzureLocation LinkedRedisCacheLocation { get; }
    [WirePathAttribute("properties.serverRole")]
public RedisLinkedServerRole ServerRole { get; }
    [WirePathAttribute("properties.geoReplicatedPrimaryHostName")]
public string GeoReplicatedPrimaryHostName { get; }
    [WirePathAttribute("properties.primaryHostName")]
public string PrimaryHostName { get; }
    public RedisLinkedServerWithPropertyCreateOrUpdateContent(ResourceIdentifier linkedRedisCacheId, AzureLocation linkedRedisCacheLocation, RedisLinkedServerRole serverRole);
    internal RedisLinkedServerWithPropertyCreateOrUpdateContent(ResourceIdentifier linkedRedisCacheId, AzureLocation linkedRedisCacheLocation, RedisLinkedServerRole serverRole, string geoReplicatedPrimaryHostName, string primaryHostName, IDictionary`2<string, BinaryData> serializedAdditionalRawData);
    [CompilerGeneratedAttribute]
public ResourceIdentifier get_LinkedRedisCacheId();
    [CompilerGeneratedAttribute]
public AzureLocation get_LinkedRedisCacheLocation();
    [CompilerGeneratedAttribute]
public RedisLinkedServerRole get_ServerRole();
    [CompilerGeneratedAttribute]
public string get_GeoReplicatedPrimaryHostName();
    [CompilerGeneratedAttribute]
public string get_PrimaryHostName();
    private sealed virtual override void Azure.Core.IUtf8JsonSerializable.Write(Utf8JsonWriter writer);
    private sealed virtual override void System.ClientModel.Primitives.IJsonModel<Azure.ResourceManager.Redis.Models.RedisLinkedServerWithPropertyCreateOrUpdateContent>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options);
    private sealed virtual override RedisLinkedServerWithPropertyCreateOrUpdateContent System.ClientModel.Primitives.IJsonModel<Azure.ResourceManager.Redis.Models.RedisLinkedServerWithPropertyCreateOrUpdateContent>.Create(Utf8JsonReader& reader, ModelReaderWriterOptions options);
    internal static RedisLinkedServerWithPropertyCreateOrUpdateContent DeserializeRedisLinkedServerWithPropertyCreateOrUpdateContent(JsonElement element, ModelReaderWriterOptions options);
    private sealed virtual override BinaryData System.ClientModel.Primitives.IPersistableModel<Azure.ResourceManager.Redis.Models.RedisLinkedServerWithPropertyCreateOrUpdateContent>.Write(ModelReaderWriterOptions options);
    private sealed virtual override RedisLinkedServerWithPropertyCreateOrUpdateContent System.ClientModel.Primitives.IPersistableModel<Azure.ResourceManager.Redis.Models.RedisLinkedServerWithPropertyCreateOrUpdateContent>.Create(BinaryData data, ModelReaderWriterOptions options);
    private sealed virtual override string System.ClientModel.Primitives.IPersistableModel<Azure.ResourceManager.Redis.Models.RedisLinkedServerWithPropertyCreateOrUpdateContent>.GetFormatFromOptions(ModelReaderWriterOptions options);
}
internal class Azure.ResourceManager.Redis.Models.RedisListResult : object {
    private IDictionary`2<string, BinaryData> _serializedAdditionalRawData;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<RedisData> <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NextLink>k__BackingField;
    public IReadOnlyList`1<RedisData> Value { get; }
    public string NextLink { get; }
    internal RedisListResult(IReadOnlyList`1<RedisData> value, string nextLink, IDictionary`2<string, BinaryData> serializedAdditionalRawData);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<RedisData> get_Value();
    [CompilerGeneratedAttribute]
public string get_NextLink();
    private sealed virtual override void Azure.Core.IUtf8JsonSerializable.Write(Utf8JsonWriter writer);
    private sealed virtual override void System.ClientModel.Primitives.IJsonModel<Azure.ResourceManager.Redis.Models.RedisListResult>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options);
    private sealed virtual override RedisListResult System.ClientModel.Primitives.IJsonModel<Azure.ResourceManager.Redis.Models.RedisListResult>.Create(Utf8JsonReader& reader, ModelReaderWriterOptions options);
    internal static RedisListResult DeserializeRedisListResult(JsonElement element, ModelReaderWriterOptions options);
    private BinaryData SerializeBicep(ModelReaderWriterOptions options);
    private sealed virtual override BinaryData System.ClientModel.Primitives.IPersistableModel<Azure.ResourceManager.Redis.Models.RedisListResult>.Write(ModelReaderWriterOptions options);
    private sealed virtual override RedisListResult System.ClientModel.Primitives.IPersistableModel<Azure.ResourceManager.Redis.Models.RedisListResult>.Create(BinaryData data, ModelReaderWriterOptions options);
    private sealed virtual override string System.ClientModel.Primitives.IPersistableModel<Azure.ResourceManager.Redis.Models.RedisListResult>.GetFormatFromOptions(ModelReaderWriterOptions options);
}
public class Azure.ResourceManager.Redis.Models.RedisNameAvailabilityContent : object {
    private IDictionary`2<string, BinaryData> _serializedAdditionalRawData;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private ResourceType <ResourceType>k__BackingField;
    [WirePathAttribute("name")]
public string Name { get; }
    [WirePathAttribute("type")]
public ResourceType ResourceType { get; }
    public RedisNameAvailabilityContent(string name, ResourceType resourceType);
    internal RedisNameAvailabilityContent(string name, ResourceType resourceType, IDictionary`2<string, BinaryData> serializedAdditionalRawData);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public ResourceType get_ResourceType();
    private sealed virtual override void Azure.Core.IUtf8JsonSerializable.Write(Utf8JsonWriter writer);
    private sealed virtual override void System.ClientModel.Primitives.IJsonModel<Azure.ResourceManager.Redis.Models.RedisNameAvailabilityContent>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options);
    private sealed virtual override RedisNameAvailabilityContent System.ClientModel.Primitives.IJsonModel<Azure.ResourceManager.Redis.Models.RedisNameAvailabilityContent>.Create(Utf8JsonReader& reader, ModelReaderWriterOptions options);
    internal static RedisNameAvailabilityContent DeserializeRedisNameAvailabilityContent(JsonElement element, ModelReaderWriterOptions options);
    private sealed virtual override BinaryData System.ClientModel.Primitives.IPersistableModel<Azure.ResourceManager.Redis.Models.RedisNameAvailabilityContent>.Write(ModelReaderWriterOptions options);
    private sealed virtual override RedisNameAvailabilityContent System.ClientModel.Primitives.IPersistableModel<Azure.ResourceManager.Redis.Models.RedisNameAvailabilityContent>.Create(BinaryData data, ModelReaderWriterOptions options);
    private sealed virtual override string System.ClientModel.Primitives.IPersistableModel<Azure.ResourceManager.Redis.Models.RedisNameAvailabilityContent>.GetFormatFromOptions(ModelReaderWriterOptions options);
}
public class Azure.ResourceManager.Redis.Models.RedisOperationStatus : OperationStatusResult {
    private IDictionary`2<string, BinaryData> _serializedAdditionalRawData;
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, BinaryData> <Properties>k__BackingField;
    [WirePathAttribute("properties")]
public IReadOnlyDictionary`2<string, BinaryData> Properties { get; }
    internal RedisOperationStatus(string status);
    internal RedisOperationStatus(ResourceIdentifier id, string name, string status, Nullable`1<float> percentComplete, Nullable`1<DateTimeOffset> startOn, Nullable`1<DateTimeOffset> endOn, IReadOnlyList`1<OperationStatusResult> operations, ResponseError error, IReadOnlyDictionary`2<string, BinaryData> properties, IDictionary`2<string, BinaryData> serializedAdditionalRawData);
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<string, BinaryData> get_Properties();
    private sealed virtual override void Azure.Core.IUtf8JsonSerializable.Write(Utf8JsonWriter writer);
    private sealed virtual override void System.ClientModel.Primitives.IJsonModel<Azure.ResourceManager.Redis.Models.RedisOperationStatus>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options);
    private sealed virtual override RedisOperationStatus System.ClientModel.Primitives.IJsonModel<Azure.ResourceManager.Redis.Models.RedisOperationStatus>.Create(Utf8JsonReader& reader, ModelReaderWriterOptions options);
    internal static RedisOperationStatus DeserializeRedisOperationStatus(JsonElement element, ModelReaderWriterOptions options);
    private BinaryData SerializeBicep(ModelReaderWriterOptions options);
    private sealed virtual override BinaryData System.ClientModel.Primitives.IPersistableModel<Azure.ResourceManager.Redis.Models.RedisOperationStatus>.Write(ModelReaderWriterOptions options);
    private sealed virtual override RedisOperationStatus System.ClientModel.Primitives.IPersistableModel<Azure.ResourceManager.Redis.Models.RedisOperationStatus>.Create(BinaryData data, ModelReaderWriterOptions options);
    private sealed virtual override string System.ClientModel.Primitives.IPersistableModel<Azure.ResourceManager.Redis.Models.RedisOperationStatus>.GetFormatFromOptions(ModelReaderWriterOptions options);
}
public class Azure.ResourceManager.Redis.Models.RedisPatch : object {
    private IDictionary`2<string, BinaryData> _serializedAdditionalRawData;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <Tags>k__BackingField;
    [CompilerGeneratedAttribute]
private ManagedServiceIdentity <Identity>k__BackingField;
    [CompilerGeneratedAttribute]
private RedisCommonConfiguration <RedisConfiguration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RedisVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <EnableNonSslPort>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <ReplicasPerMaster>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <ReplicasPerPrimary>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <TenantSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <ShardCount>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<RedisTlsVersion> <MinimumTlsVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<RedisPublicNetworkAccess> <PublicNetworkAccess>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<UpdateChannel> <UpdateChannel>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsAccessKeyAuthenticationDisabled>k__BackingField;
    [CompilerGeneratedAttribute]
private RedisSku <Sku>k__BackingField;
    [WirePathAttribute("tags")]
public IDictionary`2<string, string> Tags { get; }
    [WirePathAttribute("identity")]
public ManagedServiceIdentity Identity { get; public set; }
    [WirePathAttribute("properties.redisConfiguration")]
public RedisCommonConfiguration RedisConfiguration { get; public set; }
    [WirePathAttribute("properties.redisVersion")]
public string RedisVersion { get; public set; }
    [WirePathAttribute("properties.enableNonSslPort")]
public Nullable`1<bool> EnableNonSslPort { get; public set; }
    [WirePathAttribute("properties.replicasPerMaster")]
public Nullable`1<int> ReplicasPerMaster { get; public set; }
    [WirePathAttribute("properties.replicasPerPrimary")]
public Nullable`1<int> ReplicasPerPrimary { get; public set; }
    [WirePathAttribute("properties.tenantSettings")]
public IDictionary`2<string, string> TenantSettings { get; }
    [WirePathAttribute("properties.shardCount")]
public Nullable`1<int> ShardCount { get; public set; }
    [WirePathAttribute("properties.minimumTlsVersion")]
public Nullable`1<RedisTlsVersion> MinimumTlsVersion { get; public set; }
    [WirePathAttribute("properties.publicNetworkAccess")]
public Nullable`1<RedisPublicNetworkAccess> PublicNetworkAccess { get; public set; }
    [WirePathAttribute("properties.updateChannel")]
public Nullable`1<UpdateChannel> UpdateChannel { get; public set; }
    [WirePathAttribute("properties.disableAccessKeyAuthentication")]
public Nullable`1<bool> IsAccessKeyAuthenticationDisabled { get; public set; }
    [WirePathAttribute("properties.sku")]
public RedisSku Sku { get; public set; }
    internal RedisPatch(IDictionary`2<string, string> tags, ManagedServiceIdentity identity, RedisCommonConfiguration redisConfiguration, string redisVersion, Nullable`1<bool> enableNonSslPort, Nullable`1<int> replicasPerMaster, Nullable`1<int> replicasPerPrimary, IDictionary`2<string, string> tenantSettings, Nullable`1<int> shardCount, Nullable`1<RedisTlsVersion> minimumTlsVersion, Nullable`1<RedisPublicNetworkAccess> publicNetworkAccess, Nullable`1<UpdateChannel> updateChannel, Nullable`1<bool> isAccessKeyAuthenticationDisabled, RedisSku sku, IDictionary`2<string, BinaryData> serializedAdditionalRawData);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_Tags();
    [CompilerGeneratedAttribute]
public ManagedServiceIdentity get_Identity();
    [CompilerGeneratedAttribute]
public void set_Identity(ManagedServiceIdentity value);
    [CompilerGeneratedAttribute]
public RedisCommonConfiguration get_RedisConfiguration();
    [CompilerGeneratedAttribute]
public void set_RedisConfiguration(RedisCommonConfiguration value);
    [CompilerGeneratedAttribute]
public string get_RedisVersion();
    [CompilerGeneratedAttribute]
public void set_RedisVersion(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_EnableNonSslPort();
    [CompilerGeneratedAttribute]
public void set_EnableNonSslPort(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_ReplicasPerMaster();
    [CompilerGeneratedAttribute]
public void set_ReplicasPerMaster(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_ReplicasPerPrimary();
    [CompilerGeneratedAttribute]
public void set_ReplicasPerPrimary(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_TenantSettings();
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_ShardCount();
    [CompilerGeneratedAttribute]
public void set_ShardCount(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<RedisTlsVersion> get_MinimumTlsVersion();
    [CompilerGeneratedAttribute]
public void set_MinimumTlsVersion(Nullable`1<RedisTlsVersion> value);
    [CompilerGeneratedAttribute]
public Nullable`1<RedisPublicNetworkAccess> get_PublicNetworkAccess();
    [CompilerGeneratedAttribute]
public void set_PublicNetworkAccess(Nullable`1<RedisPublicNetworkAccess> value);
    [CompilerGeneratedAttribute]
public Nullable`1<UpdateChannel> get_UpdateChannel();
    [CompilerGeneratedAttribute]
public void set_UpdateChannel(Nullable`1<UpdateChannel> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsAccessKeyAuthenticationDisabled();
    [CompilerGeneratedAttribute]
public void set_IsAccessKeyAuthenticationDisabled(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public RedisSku get_Sku();
    [CompilerGeneratedAttribute]
public void set_Sku(RedisSku value);
    private sealed virtual override void Azure.Core.IUtf8JsonSerializable.Write(Utf8JsonWriter writer);
    private sealed virtual override void System.ClientModel.Primitives.IJsonModel<Azure.ResourceManager.Redis.Models.RedisPatch>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options);
    private sealed virtual override RedisPatch System.ClientModel.Primitives.IJsonModel<Azure.ResourceManager.Redis.Models.RedisPatch>.Create(Utf8JsonReader& reader, ModelReaderWriterOptions options);
    internal static RedisPatch DeserializeRedisPatch(JsonElement element, ModelReaderWriterOptions options);
    private sealed virtual override BinaryData System.ClientModel.Primitives.IPersistableModel<Azure.ResourceManager.Redis.Models.RedisPatch>.Write(ModelReaderWriterOptions options);
    private sealed virtual override RedisPatch System.ClientModel.Primitives.IPersistableModel<Azure.ResourceManager.Redis.Models.RedisPatch>.Create(BinaryData data, ModelReaderWriterOptions options);
    private sealed virtual override string System.ClientModel.Primitives.IPersistableModel<Azure.ResourceManager.Redis.Models.RedisPatch>.GetFormatFromOptions(ModelReaderWriterOptions options);
}
[IsReadOnlyAttribute]
public class Azure.ResourceManager.Redis.Models.RedisPatchScheduleDefaultName : ValueType {
    private string _value;
    private static string DefaultValue;
    [CompilerGeneratedAttribute]
private static RedisPatchScheduleDefaultName <Default>k__BackingField;
    public static RedisPatchScheduleDefaultName Default { get; }
    public RedisPatchScheduleDefaultName(string value);
    private static RedisPatchScheduleDefaultName();
    [CompilerGeneratedAttribute]
public static RedisPatchScheduleDefaultName get_Default();
    public static bool op_Equality(RedisPatchScheduleDefaultName left, RedisPatchScheduleDefaultName right);
    public static bool op_Inequality(RedisPatchScheduleDefaultName left, RedisPatchScheduleDefaultName right);
    public static RedisPatchScheduleDefaultName op_Implicit(string value);
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(RedisPatchScheduleDefaultName other);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    public virtual string ToString();
}
internal class Azure.ResourceManager.Redis.Models.RedisPatchScheduleListResult : object {
    private IDictionary`2<string, BinaryData> _serializedAdditionalRawData;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<RedisPatchScheduleData> <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NextLink>k__BackingField;
    public IReadOnlyList`1<RedisPatchScheduleData> Value { get; }
    public string NextLink { get; }
    internal RedisPatchScheduleListResult(IReadOnlyList`1<RedisPatchScheduleData> value, string nextLink, IDictionary`2<string, BinaryData> serializedAdditionalRawData);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<RedisPatchScheduleData> get_Value();
    [CompilerGeneratedAttribute]
public string get_NextLink();
    private sealed virtual override void Azure.Core.IUtf8JsonSerializable.Write(Utf8JsonWriter writer);
    private sealed virtual override void System.ClientModel.Primitives.IJsonModel<Azure.ResourceManager.Redis.Models.RedisPatchScheduleListResult>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options);
    private sealed virtual override RedisPatchScheduleListResult System.ClientModel.Primitives.IJsonModel<Azure.ResourceManager.Redis.Models.RedisPatchScheduleListResult>.Create(Utf8JsonReader& reader, ModelReaderWriterOptions options);
    internal static RedisPatchScheduleListResult DeserializeRedisPatchScheduleListResult(JsonElement element, ModelReaderWriterOptions options);
    private BinaryData SerializeBicep(ModelReaderWriterOptions options);
    private sealed virtual override BinaryData System.ClientModel.Primitives.IPersistableModel<Azure.ResourceManager.Redis.Models.RedisPatchScheduleListResult>.Write(ModelReaderWriterOptions options);
    private sealed virtual override RedisPatchScheduleListResult System.ClientModel.Primitives.IPersistableModel<Azure.ResourceManager.Redis.Models.RedisPatchScheduleListResult>.Create(BinaryData data, ModelReaderWriterOptions options);
    private sealed virtual override string System.ClientModel.Primitives.IPersistableModel<Azure.ResourceManager.Redis.Models.RedisPatchScheduleListResult>.GetFormatFromOptions(ModelReaderWriterOptions options);
}
public class Azure.ResourceManager.Redis.Models.RedisPatchScheduleSetting : object {
    private IDictionary`2<string, BinaryData> _serializedAdditionalRawData;
    [CompilerGeneratedAttribute]
private RedisDayOfWeek <DayOfWeek>k__BackingField;
    [CompilerGeneratedAttribute]
private int <StartHourUtc>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <MaintenanceWindow>k__BackingField;
    [WirePathAttribute("dayOfWeek")]
public RedisDayOfWeek DayOfWeek { get; public set; }
    [WirePathAttribute("startHourUtc")]
public int StartHourUtc { get; public set; }
    [WirePathAttribute("maintenanceWindow")]
public Nullable`1<TimeSpan> MaintenanceWindow { get; public set; }
    public RedisPatchScheduleSetting(RedisDayOfWeek dayOfWeek, int startHourUtc);
    internal RedisPatchScheduleSetting(RedisDayOfWeek dayOfWeek, int startHourUtc, Nullable`1<TimeSpan> maintenanceWindow, IDictionary`2<string, BinaryData> serializedAdditionalRawData);
    [CompilerGeneratedAttribute]
public RedisDayOfWeek get_DayOfWeek();
    [CompilerGeneratedAttribute]
public void set_DayOfWeek(RedisDayOfWeek value);
    [CompilerGeneratedAttribute]
public int get_StartHourUtc();
    [CompilerGeneratedAttribute]
public void set_StartHourUtc(int value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_MaintenanceWindow();
    [CompilerGeneratedAttribute]
public void set_MaintenanceWindow(Nullable`1<TimeSpan> value);
    private sealed virtual override void Azure.Core.IUtf8JsonSerializable.Write(Utf8JsonWriter writer);
    private sealed virtual override void System.ClientModel.Primitives.IJsonModel<Azure.ResourceManager.Redis.Models.RedisPatchScheduleSetting>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options);
    private sealed virtual override RedisPatchScheduleSetting System.ClientModel.Primitives.IJsonModel<Azure.ResourceManager.Redis.Models.RedisPatchScheduleSetting>.Create(Utf8JsonReader& reader, ModelReaderWriterOptions options);
    internal static RedisPatchScheduleSetting DeserializeRedisPatchScheduleSetting(JsonElement element, ModelReaderWriterOptions options);
    private BinaryData SerializeBicep(ModelReaderWriterOptions options);
    private sealed virtual override BinaryData System.ClientModel.Primitives.IPersistableModel<Azure.ResourceManager.Redis.Models.RedisPatchScheduleSetting>.Write(ModelReaderWriterOptions options);
    private sealed virtual override RedisPatchScheduleSetting System.ClientModel.Primitives.IPersistableModel<Azure.ResourceManager.Redis.Models.RedisPatchScheduleSetting>.Create(BinaryData data, ModelReaderWriterOptions options);
    private sealed virtual override string System.ClientModel.Primitives.IPersistableModel<Azure.ResourceManager.Redis.Models.RedisPatchScheduleSetting>.GetFormatFromOptions(ModelReaderWriterOptions options);
}
internal class Azure.ResourceManager.Redis.Models.RedisPrivateEndpointConnectionListResult : object {
    private IDictionary`2<string, BinaryData> _serializedAdditionalRawData;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<RedisPrivateEndpointConnectionData> <Value>k__BackingField;
    public IReadOnlyList`1<RedisPrivateEndpointConnectionData> Value { get; }
    internal RedisPrivateEndpointConnectionListResult(IReadOnlyList`1<RedisPrivateEndpointConnectionData> value, IDictionary`2<string, BinaryData> serializedAdditionalRawData);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<RedisPrivateEndpointConnectionData> get_Value();
    private sealed virtual override void Azure.Core.IUtf8JsonSerializable.Write(Utf8JsonWriter writer);
    private sealed virtual override void System.ClientModel.Primitives.IJsonModel<Azure.ResourceManager.Redis.Models.RedisPrivateEndpointConnectionListResult>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options);
    private sealed virtual override RedisPrivateEndpointConnectionListResult System.ClientModel.Primitives.IJsonModel<Azure.ResourceManager.Redis.Models.RedisPrivateEndpointConnectionListResult>.Create(Utf8JsonReader& reader, ModelReaderWriterOptions options);
    internal static RedisPrivateEndpointConnectionListResult DeserializeRedisPrivateEndpointConnectionListResult(JsonElement element, ModelReaderWriterOptions options);
    private BinaryData SerializeBicep(ModelReaderWriterOptions options);
    private sealed virtual override BinaryData System.ClientModel.Primitives.IPersistableModel<Azure.ResourceManager.Redis.Models.RedisPrivateEndpointConnectionListResult>.Write(ModelReaderWriterOptions options);
    private sealed virtual override RedisPrivateEndpointConnectionListResult System.ClientModel.Primitives.IPersistableModel<Azure.ResourceManager.Redis.Models.RedisPrivateEndpointConnectionListResult>.Create(BinaryData data, ModelReaderWriterOptions options);
    private sealed virtual override string System.ClientModel.Primitives.IPersistableModel<Azure.ResourceManager.Redis.Models.RedisPrivateEndpointConnectionListResult>.GetFormatFromOptions(ModelReaderWriterOptions options);
}
[IsReadOnlyAttribute]
public class Azure.ResourceManager.Redis.Models.RedisPrivateEndpointConnectionProvisioningState : ValueType {
    private string _value;
    private static string SucceededValue;
    private static string CreatingValue;
    private static string DeletingValue;
    private static string FailedValue;
    [CompilerGeneratedAttribute]
private static RedisPrivateEndpointConnectionProvisioningState <Succeeded>k__BackingField;
    [CompilerGeneratedAttribute]
private static RedisPrivateEndpointConnectionProvisioningState <Creating>k__BackingField;
    [CompilerGeneratedAttribute]
private static RedisPrivateEndpointConnectionProvisioningState <Deleting>k__BackingField;
    [CompilerGeneratedAttribute]
private static RedisPrivateEndpointConnectionProvisioningState <Failed>k__BackingField;
    public static RedisPrivateEndpointConnectionProvisioningState Succeeded { get; }
    public static RedisPrivateEndpointConnectionProvisioningState Creating { get; }
    public static RedisPrivateEndpointConnectionProvisioningState Deleting { get; }
    public static RedisPrivateEndpointConnectionProvisioningState Failed { get; }
    public RedisPrivateEndpointConnectionProvisioningState(string value);
    private static RedisPrivateEndpointConnectionProvisioningState();
    [CompilerGeneratedAttribute]
public static RedisPrivateEndpointConnectionProvisioningState get_Succeeded();
    [CompilerGeneratedAttribute]
public static RedisPrivateEndpointConnectionProvisioningState get_Creating();
    [CompilerGeneratedAttribute]
public static RedisPrivateEndpointConnectionProvisioningState get_Deleting();
    [CompilerGeneratedAttribute]
public static RedisPrivateEndpointConnectionProvisioningState get_Failed();
    public static bool op_Equality(RedisPrivateEndpointConnectionProvisioningState left, RedisPrivateEndpointConnectionProvisioningState right);
    public static bool op_Inequality(RedisPrivateEndpointConnectionProvisioningState left, RedisPrivateEndpointConnectionProvisioningState right);
    public static RedisPrivateEndpointConnectionProvisioningState op_Implicit(string value);
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(RedisPrivateEndpointConnectionProvisioningState other);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    public virtual string ToString();
}
[IsReadOnlyAttribute]
public class Azure.ResourceManager.Redis.Models.RedisPrivateEndpointServiceConnectionStatus : ValueType {
    private string _value;
    private static string PendingValue;
    private static string ApprovedValue;
    private static string RejectedValue;
    [CompilerGeneratedAttribute]
private static RedisPrivateEndpointServiceConnectionStatus <Pending>k__BackingField;
    [CompilerGeneratedAttribute]
private static RedisPrivateEndpointServiceConnectionStatus <Approved>k__BackingField;
    [CompilerGeneratedAttribute]
private static RedisPrivateEndpointServiceConnectionStatus <Rejected>k__BackingField;
    public static RedisPrivateEndpointServiceConnectionStatus Pending { get; }
    public static RedisPrivateEndpointServiceConnectionStatus Approved { get; }
    public static RedisPrivateEndpointServiceConnectionStatus Rejected { get; }
    public RedisPrivateEndpointServiceConnectionStatus(string value);
    private static RedisPrivateEndpointServiceConnectionStatus();
    [CompilerGeneratedAttribute]
public static RedisPrivateEndpointServiceConnectionStatus get_Pending();
    [CompilerGeneratedAttribute]
public static RedisPrivateEndpointServiceConnectionStatus get_Approved();
    [CompilerGeneratedAttribute]
public static RedisPrivateEndpointServiceConnectionStatus get_Rejected();
    public static bool op_Equality(RedisPrivateEndpointServiceConnectionStatus left, RedisPrivateEndpointServiceConnectionStatus right);
    public static bool op_Inequality(RedisPrivateEndpointServiceConnectionStatus left, RedisPrivateEndpointServiceConnectionStatus right);
    public static RedisPrivateEndpointServiceConnectionStatus op_Implicit(string value);
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(RedisPrivateEndpointServiceConnectionStatus other);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    public virtual string ToString();
}
public class Azure.ResourceManager.Redis.Models.RedisPrivateLinkResource : ResourceData {
    private IDictionary`2<string, BinaryData> _serializedAdditionalRawData;
    [CompilerGeneratedAttribute]
private string <GroupId>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<string> <RequiredMembers>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <RequiredZoneNames>k__BackingField;
    [WirePathAttribute("properties.groupId")]
public string GroupId { get; }
    [WirePathAttribute("properties.requiredMembers")]
public IReadOnlyList`1<string> RequiredMembers { get; }
    [WirePathAttribute("properties.requiredZoneNames")]
public IList`1<string> RequiredZoneNames { get; }
    internal RedisPrivateLinkResource(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, string groupId, IReadOnlyList`1<string> requiredMembers, IList`1<string> requiredZoneNames, IDictionary`2<string, BinaryData> serializedAdditionalRawData);
    [CompilerGeneratedAttribute]
public string get_GroupId();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<string> get_RequiredMembers();
    [CompilerGeneratedAttribute]
public IList`1<string> get_RequiredZoneNames();
    private sealed virtual override void Azure.Core.IUtf8JsonSerializable.Write(Utf8JsonWriter writer);
    private sealed virtual override void System.ClientModel.Primitives.IJsonModel<Azure.ResourceManager.Redis.Models.RedisPrivateLinkResource>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options);
    private sealed virtual override RedisPrivateLinkResource System.ClientModel.Primitives.IJsonModel<Azure.ResourceManager.Redis.Models.RedisPrivateLinkResource>.Create(Utf8JsonReader& reader, ModelReaderWriterOptions options);
    internal static RedisPrivateLinkResource DeserializeRedisPrivateLinkResource(JsonElement element, ModelReaderWriterOptions options);
    private BinaryData SerializeBicep(ModelReaderWriterOptions options);
    private sealed virtual override BinaryData System.ClientModel.Primitives.IPersistableModel<Azure.ResourceManager.Redis.Models.RedisPrivateLinkResource>.Write(ModelReaderWriterOptions options);
    private sealed virtual override RedisPrivateLinkResource System.ClientModel.Primitives.IPersistableModel<Azure.ResourceManager.Redis.Models.RedisPrivateLinkResource>.Create(BinaryData data, ModelReaderWriterOptions options);
    private sealed virtual override string System.ClientModel.Primitives.IPersistableModel<Azure.ResourceManager.Redis.Models.RedisPrivateLinkResource>.GetFormatFromOptions(ModelReaderWriterOptions options);
}
internal class Azure.ResourceManager.Redis.Models.RedisPrivateLinkResourceListResult : object {
    private IDictionary`2<string, BinaryData> _serializedAdditionalRawData;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<RedisPrivateLinkResource> <Value>k__BackingField;
    public IReadOnlyList`1<RedisPrivateLinkResource> Value { get; }
    internal RedisPrivateLinkResourceListResult(IReadOnlyList`1<RedisPrivateLinkResource> value, IDictionary`2<string, BinaryData> serializedAdditionalRawData);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<RedisPrivateLinkResource> get_Value();
    private sealed virtual override void Azure.Core.IUtf8JsonSerializable.Write(Utf8JsonWriter writer);
    private sealed virtual override void System.ClientModel.Primitives.IJsonModel<Azure.ResourceManager.Redis.Models.RedisPrivateLinkResourceListResult>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options);
    private sealed virtual override RedisPrivateLinkResourceListResult System.ClientModel.Primitives.IJsonModel<Azure.ResourceManager.Redis.Models.RedisPrivateLinkResourceListResult>.Create(Utf8JsonReader& reader, ModelReaderWriterOptions options);
    internal static RedisPrivateLinkResourceListResult DeserializeRedisPrivateLinkResourceListResult(JsonElement element, ModelReaderWriterOptions options);
    private BinaryData SerializeBicep(ModelReaderWriterOptions options);
    private sealed virtual override BinaryData System.ClientModel.Primitives.IPersistableModel<Azure.ResourceManager.Redis.Models.RedisPrivateLinkResourceListResult>.Write(ModelReaderWriterOptions options);
    private sealed virtual override RedisPrivateLinkResourceListResult System.ClientModel.Primitives.IPersistableModel<Azure.ResourceManager.Redis.Models.RedisPrivateLinkResourceListResult>.Create(BinaryData data, ModelReaderWriterOptions options);
    private sealed virtual override string System.ClientModel.Primitives.IPersistableModel<Azure.ResourceManager.Redis.Models.RedisPrivateLinkResourceListResult>.GetFormatFromOptions(ModelReaderWriterOptions options);
}
public class Azure.ResourceManager.Redis.Models.RedisPrivateLinkServiceConnectionState : object {
    private IDictionary`2<string, BinaryData> _serializedAdditionalRawData;
    [CompilerGeneratedAttribute]
private Nullable`1<RedisPrivateEndpointServiceConnectionStatus> <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ActionsRequired>k__BackingField;
    [WirePathAttribute("status")]
public Nullable`1<RedisPrivateEndpointServiceConnectionStatus> Status { get; public set; }
    [WirePathAttribute("description")]
public string Description { get; public set; }
    [WirePathAttribute("actionsRequired")]
public string ActionsRequired { get; public set; }
    internal RedisPrivateLinkServiceConnectionState(Nullable`1<RedisPrivateEndpointServiceConnectionStatus> status, string description, string actionsRequired, IDictionary`2<string, BinaryData> serializedAdditionalRawData);
    [CompilerGeneratedAttribute]
public Nullable`1<RedisPrivateEndpointServiceConnectionStatus> get_Status();
    [CompilerGeneratedAttribute]
public void set_Status(Nullable`1<RedisPrivateEndpointServiceConnectionStatus> value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public string get_ActionsRequired();
    [CompilerGeneratedAttribute]
public void set_ActionsRequired(string value);
    private sealed virtual override void Azure.Core.IUtf8JsonSerializable.Write(Utf8JsonWriter writer);
    private sealed virtual override void System.ClientModel.Primitives.IJsonModel<Azure.ResourceManager.Redis.Models.RedisPrivateLinkServiceConnectionState>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options);
    private sealed virtual override RedisPrivateLinkServiceConnectionState System.ClientModel.Primitives.IJsonModel<Azure.ResourceManager.Redis.Models.RedisPrivateLinkServiceConnectionState>.Create(Utf8JsonReader& reader, ModelReaderWriterOptions options);
    internal static RedisPrivateLinkServiceConnectionState DeserializeRedisPrivateLinkServiceConnectionState(JsonElement element, ModelReaderWriterOptions options);
    private BinaryData SerializeBicep(ModelReaderWriterOptions options);
    private sealed virtual override BinaryData System.ClientModel.Primitives.IPersistableModel<Azure.ResourceManager.Redis.Models.RedisPrivateLinkServiceConnectionState>.Write(ModelReaderWriterOptions options);
    private sealed virtual override RedisPrivateLinkServiceConnectionState System.ClientModel.Primitives.IPersistableModel<Azure.ResourceManager.Redis.Models.RedisPrivateLinkServiceConnectionState>.Create(BinaryData data, ModelReaderWriterOptions options);
    private sealed virtual override string System.ClientModel.Primitives.IPersistableModel<Azure.ResourceManager.Redis.Models.RedisPrivateLinkServiceConnectionState>.GetFormatFromOptions(ModelReaderWriterOptions options);
}
[IsReadOnlyAttribute]
public class Azure.ResourceManager.Redis.Models.RedisProvisioningState : ValueType {
    private string _value;
    private static string CreatingValue;
    private static string DeletingValue;
    private static string DisabledValue;
    private static string FailedValue;
    private static string LinkingValue;
    private static string ProvisioningValue;
    private static string RecoveringScaleFailureValue;
    private static string ScalingValue;
    private static string SucceededValue;
    private static string UnlinkingValue;
    private static string UnprovisioningValue;
    private static string UpdatingValue;
    private static string ConfiguringAADValue;
    [CompilerGeneratedAttribute]
private static RedisProvisioningState <Creating>k__BackingField;
    [CompilerGeneratedAttribute]
private static RedisProvisioningState <Deleting>k__BackingField;
    [CompilerGeneratedAttribute]
private static RedisProvisioningState <Disabled>k__BackingField;
    [CompilerGeneratedAttribute]
private static RedisProvisioningState <Failed>k__BackingField;
    [CompilerGeneratedAttribute]
private static RedisProvisioningState <Linking>k__BackingField;
    [CompilerGeneratedAttribute]
private static RedisProvisioningState <Provisioning>k__BackingField;
    [CompilerGeneratedAttribute]
private static RedisProvisioningState <RecoveringScaleFailure>k__BackingField;
    [CompilerGeneratedAttribute]
private static RedisProvisioningState <Scaling>k__BackingField;
    [CompilerGeneratedAttribute]
private static RedisProvisioningState <Succeeded>k__BackingField;
    [CompilerGeneratedAttribute]
private static RedisProvisioningState <Unlinking>k__BackingField;
    [CompilerGeneratedAttribute]
private static RedisProvisioningState <Unprovisioning>k__BackingField;
    [CompilerGeneratedAttribute]
private static RedisProvisioningState <Updating>k__BackingField;
    [CompilerGeneratedAttribute]
private static RedisProvisioningState <ConfiguringAAD>k__BackingField;
    public static RedisProvisioningState Creating { get; }
    public static RedisProvisioningState Deleting { get; }
    public static RedisProvisioningState Disabled { get; }
    public static RedisProvisioningState Failed { get; }
    public static RedisProvisioningState Linking { get; }
    public static RedisProvisioningState Provisioning { get; }
    public static RedisProvisioningState RecoveringScaleFailure { get; }
    public static RedisProvisioningState Scaling { get; }
    public static RedisProvisioningState Succeeded { get; }
    public static RedisProvisioningState Unlinking { get; }
    public static RedisProvisioningState Unprovisioning { get; }
    public static RedisProvisioningState Updating { get; }
    public static RedisProvisioningState ConfiguringAAD { get; }
    public RedisProvisioningState(string value);
    private static RedisProvisioningState();
    [CompilerGeneratedAttribute]
public static RedisProvisioningState get_Creating();
    [CompilerGeneratedAttribute]
public static RedisProvisioningState get_Deleting();
    [CompilerGeneratedAttribute]
public static RedisProvisioningState get_Disabled();
    [CompilerGeneratedAttribute]
public static RedisProvisioningState get_Failed();
    [CompilerGeneratedAttribute]
public static RedisProvisioningState get_Linking();
    [CompilerGeneratedAttribute]
public static RedisProvisioningState get_Provisioning();
    [CompilerGeneratedAttribute]
public static RedisProvisioningState get_RecoveringScaleFailure();
    [CompilerGeneratedAttribute]
public static RedisProvisioningState get_Scaling();
    [CompilerGeneratedAttribute]
public static RedisProvisioningState get_Succeeded();
    [CompilerGeneratedAttribute]
public static RedisProvisioningState get_Unlinking();
    [CompilerGeneratedAttribute]
public static RedisProvisioningState get_Unprovisioning();
    [CompilerGeneratedAttribute]
public static RedisProvisioningState get_Updating();
    [CompilerGeneratedAttribute]
public static RedisProvisioningState get_ConfiguringAAD();
    public static bool op_Equality(RedisProvisioningState left, RedisProvisioningState right);
    public static bool op_Inequality(RedisProvisioningState left, RedisProvisioningState right);
    public static RedisProvisioningState op_Implicit(string value);
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(RedisProvisioningState other);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    public virtual string ToString();
}
[IsReadOnlyAttribute]
public class Azure.ResourceManager.Redis.Models.RedisPublicNetworkAccess : ValueType {
    private string _value;
    private static string EnabledValue;
    private static string DisabledValue;
    [CompilerGeneratedAttribute]
private static RedisPublicNetworkAccess <Enabled>k__BackingField;
    [CompilerGeneratedAttribute]
private static RedisPublicNetworkAccess <Disabled>k__BackingField;
    public static RedisPublicNetworkAccess Enabled { get; }
    public static RedisPublicNetworkAccess Disabled { get; }
    public RedisPublicNetworkAccess(string value);
    private static RedisPublicNetworkAccess();
    [CompilerGeneratedAttribute]
public static RedisPublicNetworkAccess get_Enabled();
    [CompilerGeneratedAttribute]
public static RedisPublicNetworkAccess get_Disabled();
    public static bool op_Equality(RedisPublicNetworkAccess left, RedisPublicNetworkAccess right);
    public static bool op_Inequality(RedisPublicNetworkAccess left, RedisPublicNetworkAccess right);
    public static RedisPublicNetworkAccess op_Implicit(string value);
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(RedisPublicNetworkAccess other);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    public virtual string ToString();
}
public class Azure.ResourceManager.Redis.Models.RedisRebootContent : object {
    private IDictionary`2<string, BinaryData> _serializedAdditionalRawData;
    [CompilerGeneratedAttribute]
private Nullable`1<RedisRebootType> <RebootType>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <ShardId>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<int> <Ports>k__BackingField;
    [WirePathAttribute("rebootType")]
public Nullable`1<RedisRebootType> RebootType { get; public set; }
    [WirePathAttribute("shardId")]
public Nullable`1<int> ShardId { get; public set; }
    [WirePathAttribute("ports")]
public IList`1<int> Ports { get; }
    internal RedisRebootContent(Nullable`1<RedisRebootType> rebootType, Nullable`1<int> shardId, IList`1<int> ports, IDictionary`2<string, BinaryData> serializedAdditionalRawData);
    [CompilerGeneratedAttribute]
public Nullable`1<RedisRebootType> get_RebootType();
    [CompilerGeneratedAttribute]
public void set_RebootType(Nullable`1<RedisRebootType> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_ShardId();
    [CompilerGeneratedAttribute]
public void set_ShardId(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public IList`1<int> get_Ports();
    private sealed virtual override void Azure.Core.IUtf8JsonSerializable.Write(Utf8JsonWriter writer);
    private sealed virtual override void System.ClientModel.Primitives.IJsonModel<Azure.ResourceManager.Redis.Models.RedisRebootContent>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options);
    private sealed virtual override RedisRebootContent System.ClientModel.Primitives.IJsonModel<Azure.ResourceManager.Redis.Models.RedisRebootContent>.Create(Utf8JsonReader& reader, ModelReaderWriterOptions options);
    internal static RedisRebootContent DeserializeRedisRebootContent(JsonElement element, ModelReaderWriterOptions options);
    private sealed virtual override BinaryData System.ClientModel.Primitives.IPersistableModel<Azure.ResourceManager.Redis.Models.RedisRebootContent>.Write(ModelReaderWriterOptions options);
    private sealed virtual override RedisRebootContent System.ClientModel.Primitives.IPersistableModel<Azure.ResourceManager.Redis.Models.RedisRebootContent>.Create(BinaryData data, ModelReaderWriterOptions options);
    private sealed virtual override string System.ClientModel.Primitives.IPersistableModel<Azure.ResourceManager.Redis.Models.RedisRebootContent>.GetFormatFromOptions(ModelReaderWriterOptions options);
}
[IsReadOnlyAttribute]
public class Azure.ResourceManager.Redis.Models.RedisRebootType : ValueType {
    private string _value;
    private static string PrimaryNodeValue;
    private static string SecondaryNodeValue;
    private static string AllNodesValue;
    [CompilerGeneratedAttribute]
private static RedisRebootType <PrimaryNode>k__BackingField;
    [CompilerGeneratedAttribute]
private static RedisRebootType <SecondaryNode>k__BackingField;
    [CompilerGeneratedAttribute]
private static RedisRebootType <AllNodes>k__BackingField;
    public static RedisRebootType PrimaryNode { get; }
    public static RedisRebootType SecondaryNode { get; }
    public static RedisRebootType AllNodes { get; }
    public RedisRebootType(string value);
    private static RedisRebootType();
    [CompilerGeneratedAttribute]
public static RedisRebootType get_PrimaryNode();
    [CompilerGeneratedAttribute]
public static RedisRebootType get_SecondaryNode();
    [CompilerGeneratedAttribute]
public static RedisRebootType get_AllNodes();
    public static bool op_Equality(RedisRebootType left, RedisRebootType right);
    public static bool op_Inequality(RedisRebootType left, RedisRebootType right);
    public static RedisRebootType op_Implicit(string value);
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(RedisRebootType other);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    public virtual string ToString();
}
public class Azure.ResourceManager.Redis.Models.RedisRegenerateKeyContent : object {
    private IDictionary`2<string, BinaryData> _serializedAdditionalRawData;
    [CompilerGeneratedAttribute]
private RedisRegenerateKeyType <KeyType>k__BackingField;
    [WirePathAttribute("keyType")]
public RedisRegenerateKeyType KeyType { get; }
    public RedisRegenerateKeyContent(RedisRegenerateKeyType keyType);
    internal RedisRegenerateKeyContent(RedisRegenerateKeyType keyType, IDictionary`2<string, BinaryData> serializedAdditionalRawData);
    [CompilerGeneratedAttribute]
public RedisRegenerateKeyType get_KeyType();
    private sealed virtual override void Azure.Core.IUtf8JsonSerializable.Write(Utf8JsonWriter writer);
    private sealed virtual override void System.ClientModel.Primitives.IJsonModel<Azure.ResourceManager.Redis.Models.RedisRegenerateKeyContent>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options);
    private sealed virtual override RedisRegenerateKeyContent System.ClientModel.Primitives.IJsonModel<Azure.ResourceManager.Redis.Models.RedisRegenerateKeyContent>.Create(Utf8JsonReader& reader, ModelReaderWriterOptions options);
    internal static RedisRegenerateKeyContent DeserializeRedisRegenerateKeyContent(JsonElement element, ModelReaderWriterOptions options);
    private sealed virtual override BinaryData System.ClientModel.Primitives.IPersistableModel<Azure.ResourceManager.Redis.Models.RedisRegenerateKeyContent>.Write(ModelReaderWriterOptions options);
    private sealed virtual override RedisRegenerateKeyContent System.ClientModel.Primitives.IPersistableModel<Azure.ResourceManager.Redis.Models.RedisRegenerateKeyContent>.Create(BinaryData data, ModelReaderWriterOptions options);
    private sealed virtual override string System.ClientModel.Primitives.IPersistableModel<Azure.ResourceManager.Redis.Models.RedisRegenerateKeyContent>.GetFormatFromOptions(ModelReaderWriterOptions options);
}
public enum Azure.ResourceManager.Redis.Models.RedisRegenerateKeyType : Enum {
    public int value__;
    public static RedisRegenerateKeyType Primary;
    public static RedisRegenerateKeyType Secondary;
}
[ExtensionAttribute]
internal static class Azure.ResourceManager.Redis.Models.RedisRegenerateKeyTypeExtensions : object {
    [ExtensionAttribute]
public static string ToSerialString(RedisRegenerateKeyType value);
    [ExtensionAttribute]
public static RedisRegenerateKeyType ToRedisRegenerateKeyType(string value);
}
public class Azure.ResourceManager.Redis.Models.RedisSku : object {
    private IDictionary`2<string, BinaryData> _serializedAdditionalRawData;
    [CompilerGeneratedAttribute]
private RedisSkuName <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private RedisSkuFamily <Family>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Capacity>k__BackingField;
    [WirePathAttribute("name")]
public RedisSkuName Name { get; public set; }
    [WirePathAttribute("family")]
public RedisSkuFamily Family { get; public set; }
    [WirePathAttribute("capacity")]
public int Capacity { get; public set; }
    public RedisSku(RedisSkuName name, RedisSkuFamily family, int capacity);
    internal RedisSku(RedisSkuName name, RedisSkuFamily family, int capacity, IDictionary`2<string, BinaryData> serializedAdditionalRawData);
    [CompilerGeneratedAttribute]
public RedisSkuName get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(RedisSkuName value);
    [CompilerGeneratedAttribute]
public RedisSkuFamily get_Family();
    [CompilerGeneratedAttribute]
public void set_Family(RedisSkuFamily value);
    [CompilerGeneratedAttribute]
public int get_Capacity();
    [CompilerGeneratedAttribute]
public void set_Capacity(int value);
    private sealed virtual override void Azure.Core.IUtf8JsonSerializable.Write(Utf8JsonWriter writer);
    private sealed virtual override void System.ClientModel.Primitives.IJsonModel<Azure.ResourceManager.Redis.Models.RedisSku>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options);
    private sealed virtual override RedisSku System.ClientModel.Primitives.IJsonModel<Azure.ResourceManager.Redis.Models.RedisSku>.Create(Utf8JsonReader& reader, ModelReaderWriterOptions options);
    internal static RedisSku DeserializeRedisSku(JsonElement element, ModelReaderWriterOptions options);
    private BinaryData SerializeBicep(ModelReaderWriterOptions options);
    private sealed virtual override BinaryData System.ClientModel.Primitives.IPersistableModel<Azure.ResourceManager.Redis.Models.RedisSku>.Write(ModelReaderWriterOptions options);
    private sealed virtual override RedisSku System.ClientModel.Primitives.IPersistableModel<Azure.ResourceManager.Redis.Models.RedisSku>.Create(BinaryData data, ModelReaderWriterOptions options);
    private sealed virtual override string System.ClientModel.Primitives.IPersistableModel<Azure.ResourceManager.Redis.Models.RedisSku>.GetFormatFromOptions(ModelReaderWriterOptions options);
}
[IsReadOnlyAttribute]
public class Azure.ResourceManager.Redis.Models.RedisSkuFamily : ValueType {
    private string _value;
    private static string BasicOrStandardValue;
    private static string PremiumValue;
    [CompilerGeneratedAttribute]
private static RedisSkuFamily <BasicOrStandard>k__BackingField;
    [CompilerGeneratedAttribute]
private static RedisSkuFamily <Premium>k__BackingField;
    public static RedisSkuFamily BasicOrStandard { get; }
    public static RedisSkuFamily Premium { get; }
    public RedisSkuFamily(string value);
    private static RedisSkuFamily();
    [CompilerGeneratedAttribute]
public static RedisSkuFamily get_BasicOrStandard();
    [CompilerGeneratedAttribute]
public static RedisSkuFamily get_Premium();
    public static bool op_Equality(RedisSkuFamily left, RedisSkuFamily right);
    public static bool op_Inequality(RedisSkuFamily left, RedisSkuFamily right);
    public static RedisSkuFamily op_Implicit(string value);
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(RedisSkuFamily other);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    public virtual string ToString();
}
[IsReadOnlyAttribute]
public class Azure.ResourceManager.Redis.Models.RedisSkuName : ValueType {
    private string _value;
    private static string BasicValue;
    private static string StandardValue;
    private static string PremiumValue;
    [CompilerGeneratedAttribute]
private static RedisSkuName <Basic>k__BackingField;
    [CompilerGeneratedAttribute]
private static RedisSkuName <Standard>k__BackingField;
    [CompilerGeneratedAttribute]
private static RedisSkuName <Premium>k__BackingField;
    public static RedisSkuName Basic { get; }
    public static RedisSkuName Standard { get; }
    public static RedisSkuName Premium { get; }
    public RedisSkuName(string value);
    private static RedisSkuName();
    [CompilerGeneratedAttribute]
public static RedisSkuName get_Basic();
    [CompilerGeneratedAttribute]
public static RedisSkuName get_Standard();
    [CompilerGeneratedAttribute]
public static RedisSkuName get_Premium();
    public static bool op_Equality(RedisSkuName left, RedisSkuName right);
    public static bool op_Inequality(RedisSkuName left, RedisSkuName right);
    public static RedisSkuName op_Implicit(string value);
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(RedisSkuName other);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    public virtual string ToString();
}
[IsReadOnlyAttribute]
public class Azure.ResourceManager.Redis.Models.RedisTlsVersion : ValueType {
    [CompilerGeneratedAttribute]
private static RedisTlsVersion <Tls1_0>k__BackingField;
    [CompilerGeneratedAttribute]
private static RedisTlsVersion <Tls1_1>k__BackingField;
    [CompilerGeneratedAttribute]
private static RedisTlsVersion <Tls1_2>k__BackingField;
    private string _value;
    private static string Tls1_0Value;
    private static string Tls1_1Value;
    private static string Tls1_2Value;
    [CodeGenMemberAttribute("One0")]
public static RedisTlsVersion Tls1_0 { get; }
    [CodeGenMemberAttribute("One1")]
public static RedisTlsVersion Tls1_1 { get; }
    [CodeGenMemberAttribute("One2")]
public static RedisTlsVersion Tls1_2 { get; }
    public RedisTlsVersion(string value);
    private static RedisTlsVersion();
    [CompilerGeneratedAttribute]
public static RedisTlsVersion get_Tls1_0();
    [CompilerGeneratedAttribute]
public static RedisTlsVersion get_Tls1_1();
    [CompilerGeneratedAttribute]
public static RedisTlsVersion get_Tls1_2();
    public static bool op_Equality(RedisTlsVersion left, RedisTlsVersion right);
    public static bool op_Inequality(RedisTlsVersion left, RedisTlsVersion right);
    public static RedisTlsVersion op_Implicit(string value);
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(RedisTlsVersion other);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    public virtual string ToString();
}
public class Azure.ResourceManager.Redis.Models.RedisUpgradeNotification : object {
    private IDictionary`2<string, BinaryData> _serializedAdditionalRawData;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <Timestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, string> <UpsellNotification>k__BackingField;
    [WirePathAttribute("name")]
public string Name { get; }
    [WirePathAttribute("timestamp")]
public Nullable`1<DateTimeOffset> Timestamp { get; }
    [WirePathAttribute("upsellNotification")]
public IReadOnlyDictionary`2<string, string> UpsellNotification { get; }
    internal RedisUpgradeNotification(string name, Nullable`1<DateTimeOffset> timestamp, IReadOnlyDictionary`2<string, string> upsellNotification, IDictionary`2<string, BinaryData> serializedAdditionalRawData);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_Timestamp();
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<string, string> get_UpsellNotification();
    private sealed virtual override void Azure.Core.IUtf8JsonSerializable.Write(Utf8JsonWriter writer);
    private sealed virtual override void System.ClientModel.Primitives.IJsonModel<Azure.ResourceManager.Redis.Models.RedisUpgradeNotification>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options);
    private sealed virtual override RedisUpgradeNotification System.ClientModel.Primitives.IJsonModel<Azure.ResourceManager.Redis.Models.RedisUpgradeNotification>.Create(Utf8JsonReader& reader, ModelReaderWriterOptions options);
    internal static RedisUpgradeNotification DeserializeRedisUpgradeNotification(JsonElement element, ModelReaderWriterOptions options);
    private BinaryData SerializeBicep(ModelReaderWriterOptions options);
    private sealed virtual override BinaryData System.ClientModel.Primitives.IPersistableModel<Azure.ResourceManager.Redis.Models.RedisUpgradeNotification>.Write(ModelReaderWriterOptions options);
    private sealed virtual override RedisUpgradeNotification System.ClientModel.Primitives.IPersistableModel<Azure.ResourceManager.Redis.Models.RedisUpgradeNotification>.Create(BinaryData data, ModelReaderWriterOptions options);
    private sealed virtual override string System.ClientModel.Primitives.IPersistableModel<Azure.ResourceManager.Redis.Models.RedisUpgradeNotification>.GetFormatFromOptions(ModelReaderWriterOptions options);
}
internal class Azure.ResourceManager.Redis.Models.RedisUpgradeNotificationListResponse : object {
    private IDictionary`2<string, BinaryData> _serializedAdditionalRawData;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<RedisUpgradeNotification> <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NextLink>k__BackingField;
    public IReadOnlyList`1<RedisUpgradeNotification> Value { get; }
    public string NextLink { get; }
    internal RedisUpgradeNotificationListResponse(IReadOnlyList`1<RedisUpgradeNotification> value, string nextLink, IDictionary`2<string, BinaryData> serializedAdditionalRawData);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<RedisUpgradeNotification> get_Value();
    [CompilerGeneratedAttribute]
public string get_NextLink();
    private sealed virtual override void Azure.Core.IUtf8JsonSerializable.Write(Utf8JsonWriter writer);
    private sealed virtual override void System.ClientModel.Primitives.IJsonModel<Azure.ResourceManager.Redis.Models.RedisUpgradeNotificationListResponse>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options);
    private sealed virtual override RedisUpgradeNotificationListResponse System.ClientModel.Primitives.IJsonModel<Azure.ResourceManager.Redis.Models.RedisUpgradeNotificationListResponse>.Create(Utf8JsonReader& reader, ModelReaderWriterOptions options);
    internal static RedisUpgradeNotificationListResponse DeserializeRedisUpgradeNotificationListResponse(JsonElement element, ModelReaderWriterOptions options);
    private BinaryData SerializeBicep(ModelReaderWriterOptions options);
    private sealed virtual override BinaryData System.ClientModel.Primitives.IPersistableModel<Azure.ResourceManager.Redis.Models.RedisUpgradeNotificationListResponse>.Write(ModelReaderWriterOptions options);
    private sealed virtual override RedisUpgradeNotificationListResponse System.ClientModel.Primitives.IPersistableModel<Azure.ResourceManager.Redis.Models.RedisUpgradeNotificationListResponse>.Create(BinaryData data, ModelReaderWriterOptions options);
    private sealed virtual override string System.ClientModel.Primitives.IPersistableModel<Azure.ResourceManager.Redis.Models.RedisUpgradeNotificationListResponse>.GetFormatFromOptions(ModelReaderWriterOptions options);
}
[IsReadOnlyAttribute]
public class Azure.ResourceManager.Redis.Models.UpdateChannel : ValueType {
    private string _value;
    private static string StableValue;
    private static string PreviewValue;
    [CompilerGeneratedAttribute]
private static UpdateChannel <Stable>k__BackingField;
    [CompilerGeneratedAttribute]
private static UpdateChannel <Preview>k__BackingField;
    public static UpdateChannel Stable { get; }
    public static UpdateChannel Preview { get; }
    public UpdateChannel(string value);
    private static UpdateChannel();
    [CompilerGeneratedAttribute]
public static UpdateChannel get_Stable();
    [CompilerGeneratedAttribute]
public static UpdateChannel get_Preview();
    public static bool op_Equality(UpdateChannel left, UpdateChannel right);
    public static bool op_Inequality(UpdateChannel left, UpdateChannel right);
    public static UpdateChannel op_Implicit(string value);
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(UpdateChannel other);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    public virtual string ToString();
}
[ExtensionAttribute]
internal static class Azure.ResourceManager.Redis.ModelSerializationExtensions : object {
    internal static ModelReaderWriterOptions WireOptions;
    private static ModelSerializationExtensions();
    [ExtensionAttribute]
public static object GetObject(JsonElement element);
    [ExtensionAttribute]
public static Byte[] GetBytesFromBase64(JsonElement element, string format);
    [ExtensionAttribute]
public static DateTimeOffset GetDateTimeOffset(JsonElement element, string format);
    [ExtensionAttribute]
public static TimeSpan GetTimeSpan(JsonElement element, string format);
    [ExtensionAttribute]
public static char GetChar(JsonElement element);
    [ExtensionAttribute]
[ConditionalAttribute("DEBUG")]
public static void ThrowNonNullablePropertyIsNull(JsonProperty property);
    [ExtensionAttribute]
public static string GetRequiredString(JsonElement element);
    [ExtensionAttribute]
public static void WriteStringValue(Utf8JsonWriter writer, DateTimeOffset value, string format);
    [ExtensionAttribute]
public static void WriteStringValue(Utf8JsonWriter writer, DateTime value, string format);
    [ExtensionAttribute]
public static void WriteStringValue(Utf8JsonWriter writer, TimeSpan value, string format);
    [ExtensionAttribute]
public static void WriteStringValue(Utf8JsonWriter writer, char value);
    [ExtensionAttribute]
public static void WriteBase64StringValue(Utf8JsonWriter writer, Byte[] value, string format);
    [ExtensionAttribute]
public static void WriteNumberValue(Utf8JsonWriter writer, DateTimeOffset value, string format);
    [ExtensionAttribute]
public static void WriteObjectValue(Utf8JsonWriter writer, T value, ModelReaderWriterOptions options);
    [ExtensionAttribute]
public static void WriteObjectValue(Utf8JsonWriter writer, object value, ModelReaderWriterOptions options);
}
internal class Azure.ResourceManager.Redis.OperationStatusResultOperationSource : object {
    private sealed virtual override OperationStatusResult Azure.Core.IOperationSource<Azure.ResourceManager.Models.OperationStatusResult>.CreateResult(Response response, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.ResourceManager.Redis.OperationStatusResultOperationSource/<Azure-Core-IOperationSource<Azure-ResourceManager-Models-OperationStatusResult>-CreateResultAsync>d__1")]
private sealed virtual override ValueTask`1<OperationStatusResult> Azure.Core.IOperationSource<Azure.ResourceManager.Models.OperationStatusResult>.CreateResultAsync(Response response, CancellationToken cancellationToken);
}
internal static class Azure.ResourceManager.Redis.Optional : object {
    public static bool IsCollectionDefined(IEnumerable`1<T> collection);
    public static bool IsCollectionDefined(IDictionary`2<TKey, TValue> collection);
    public static bool IsCollectionDefined(IReadOnlyDictionary`2<TKey, TValue> collection);
    public static bool IsDefined(Nullable`1<T> value);
    public static bool IsDefined(object value);
    public static bool IsDefined(JsonElement value);
    public static bool IsDefined(string value);
}
internal class Azure.ResourceManager.Redis.PatchSchedulesRestOperations : object {
    private TelemetryDetails _userAgent;
    private HttpPipeline _pipeline;
    private Uri _endpoint;
    private string _apiVersion;
    public PatchSchedulesRestOperations(HttpPipeline pipeline, string applicationId, Uri endpoint, string apiVersion);
    internal RequestUriBuilder CreateListByRedisResourceRequestUri(string subscriptionId, string resourceGroupName, string cacheName);
    internal HttpMessage CreateListByRedisResourceRequest(string subscriptionId, string resourceGroupName, string cacheName);
    [AsyncStateMachineAttribute("Azure.ResourceManager.Redis.PatchSchedulesRestOperations/<ListByRedisResourceAsync>d__7")]
public Task`1<Response`1<RedisPatchScheduleListResult>> ListByRedisResourceAsync(string subscriptionId, string resourceGroupName, string cacheName, CancellationToken cancellationToken);
    public Response`1<RedisPatchScheduleListResult> ListByRedisResource(string subscriptionId, string resourceGroupName, string cacheName, CancellationToken cancellationToken);
    internal RequestUriBuilder CreateCreateOrUpdateRequestUri(string subscriptionId, string resourceGroupName, string name, RedisPatchScheduleDefaultName defaultName, RedisPatchScheduleData data);
    internal HttpMessage CreateCreateOrUpdateRequest(string subscriptionId, string resourceGroupName, string name, RedisPatchScheduleDefaultName defaultName, RedisPatchScheduleData data);
    [AsyncStateMachineAttribute("Azure.ResourceManager.Redis.PatchSchedulesRestOperations/<CreateOrUpdateAsync>d__11")]
public Task`1<Response`1<RedisPatchScheduleData>> CreateOrUpdateAsync(string subscriptionId, string resourceGroupName, string name, RedisPatchScheduleDefaultName defaultName, RedisPatchScheduleData data, CancellationToken cancellationToken);
    public Response`1<RedisPatchScheduleData> CreateOrUpdate(string subscriptionId, string resourceGroupName, string name, RedisPatchScheduleDefaultName defaultName, RedisPatchScheduleData data, CancellationToken cancellationToken);
    internal RequestUriBuilder CreateDeleteRequestUri(string subscriptionId, string resourceGroupName, string name, RedisPatchScheduleDefaultName defaultName);
    internal HttpMessage CreateDeleteRequest(string subscriptionId, string resourceGroupName, string name, RedisPatchScheduleDefaultName defaultName);
    [AsyncStateMachineAttribute("Azure.ResourceManager.Redis.PatchSchedulesRestOperations/<DeleteAsync>d__15")]
public Task`1<Response> DeleteAsync(string subscriptionId, string resourceGroupName, string name, RedisPatchScheduleDefaultName defaultName, CancellationToken cancellationToken);
    public Response Delete(string subscriptionId, string resourceGroupName, string name, RedisPatchScheduleDefaultName defaultName, CancellationToken cancellationToken);
    internal RequestUriBuilder CreateGetRequestUri(string subscriptionId, string resourceGroupName, string name, RedisPatchScheduleDefaultName defaultName);
    internal HttpMessage CreateGetRequest(string subscriptionId, string resourceGroupName, string name, RedisPatchScheduleDefaultName defaultName);
    [AsyncStateMachineAttribute("Azure.ResourceManager.Redis.PatchSchedulesRestOperations/<GetAsync>d__19")]
public Task`1<Response`1<RedisPatchScheduleData>> GetAsync(string subscriptionId, string resourceGroupName, string name, RedisPatchScheduleDefaultName defaultName, CancellationToken cancellationToken);
    public Response`1<RedisPatchScheduleData> Get(string subscriptionId, string resourceGroupName, string name, RedisPatchScheduleDefaultName defaultName, CancellationToken cancellationToken);
    internal RequestUriBuilder CreateListByRedisResourceNextPageRequestUri(string nextLink, string subscriptionId, string resourceGroupName, string cacheName);
    internal HttpMessage CreateListByRedisResourceNextPageRequest(string nextLink, string subscriptionId, string resourceGroupName, string cacheName);
    [AsyncStateMachineAttribute("Azure.ResourceManager.Redis.PatchSchedulesRestOperations/<ListByRedisResourceNextPageAsync>d__23")]
public Task`1<Response`1<RedisPatchScheduleListResult>> ListByRedisResourceNextPageAsync(string nextLink, string subscriptionId, string resourceGroupName, string cacheName, CancellationToken cancellationToken);
    public Response`1<RedisPatchScheduleListResult> ListByRedisResourceNextPage(string nextLink, string subscriptionId, string resourceGroupName, string cacheName, CancellationToken cancellationToken);
}
internal class Azure.ResourceManager.Redis.PrivateEndpointConnectionsRestOperations : object {
    private TelemetryDetails _userAgent;
    private HttpPipeline _pipeline;
    private Uri _endpoint;
    private string _apiVersion;
    public PrivateEndpointConnectionsRestOperations(HttpPipeline pipeline, string applicationId, Uri endpoint, string apiVersion);
    internal RequestUriBuilder CreateListRequestUri(string subscriptionId, string resourceGroupName, string cacheName);
    internal HttpMessage CreateListRequest(string subscriptionId, string resourceGroupName, string cacheName);
    [AsyncStateMachineAttribute("Azure.ResourceManager.Redis.PrivateEndpointConnectionsRestOperations/<ListAsync>d__7")]
public Task`1<Response`1<RedisPrivateEndpointConnectionListResult>> ListAsync(string subscriptionId, string resourceGroupName, string cacheName, CancellationToken cancellationToken);
    public Response`1<RedisPrivateEndpointConnectionListResult> List(string subscriptionId, string resourceGroupName, string cacheName, CancellationToken cancellationToken);
    internal RequestUriBuilder CreateGetRequestUri(string subscriptionId, string resourceGroupName, string cacheName, string privateEndpointConnectionName);
    internal HttpMessage CreateGetRequest(string subscriptionId, string resourceGroupName, string cacheName, string privateEndpointConnectionName);
    [AsyncStateMachineAttribute("Azure.ResourceManager.Redis.PrivateEndpointConnectionsRestOperations/<GetAsync>d__11")]
public Task`1<Response`1<RedisPrivateEndpointConnectionData>> GetAsync(string subscriptionId, string resourceGroupName, string cacheName, string privateEndpointConnectionName, CancellationToken cancellationToken);
    public Response`1<RedisPrivateEndpointConnectionData> Get(string subscriptionId, string resourceGroupName, string cacheName, string privateEndpointConnectionName, CancellationToken cancellationToken);
    internal RequestUriBuilder CreatePutRequestUri(string subscriptionId, string resourceGroupName, string cacheName, string privateEndpointConnectionName, RedisPrivateEndpointConnectionData data);
    internal HttpMessage CreatePutRequest(string subscriptionId, string resourceGroupName, string cacheName, string privateEndpointConnectionName, RedisPrivateEndpointConnectionData data);
    [AsyncStateMachineAttribute("Azure.ResourceManager.Redis.PrivateEndpointConnectionsRestOperations/<PutAsync>d__15")]
public Task`1<Response> PutAsync(string subscriptionId, string resourceGroupName, string cacheName, string privateEndpointConnectionName, RedisPrivateEndpointConnectionData data, CancellationToken cancellationToken);
    public Response Put(string subscriptionId, string resourceGroupName, string cacheName, string privateEndpointConnectionName, RedisPrivateEndpointConnectionData data, CancellationToken cancellationToken);
    internal RequestUriBuilder CreateDeleteRequestUri(string subscriptionId, string resourceGroupName, string cacheName, string privateEndpointConnectionName);
    internal HttpMessage CreateDeleteRequest(string subscriptionId, string resourceGroupName, string cacheName, string privateEndpointConnectionName);
    [AsyncStateMachineAttribute("Azure.ResourceManager.Redis.PrivateEndpointConnectionsRestOperations/<DeleteAsync>d__19")]
public Task`1<Response> DeleteAsync(string subscriptionId, string resourceGroupName, string cacheName, string privateEndpointConnectionName, CancellationToken cancellationToken);
    public Response Delete(string subscriptionId, string resourceGroupName, string cacheName, string privateEndpointConnectionName, CancellationToken cancellationToken);
}
internal class Azure.ResourceManager.Redis.PrivateLinkResourcesRestOperations : object {
    private TelemetryDetails _userAgent;
    private HttpPipeline _pipeline;
    private Uri _endpoint;
    private string _apiVersion;
    public PrivateLinkResourcesRestOperations(HttpPipeline pipeline, string applicationId, Uri endpoint, string apiVersion);
    internal RequestUriBuilder CreateListByRedisCacheRequestUri(string subscriptionId, string resourceGroupName, string cacheName);
    internal HttpMessage CreateListByRedisCacheRequest(string subscriptionId, string resourceGroupName, string cacheName);
    [AsyncStateMachineAttribute("Azure.ResourceManager.Redis.PrivateLinkResourcesRestOperations/<ListByRedisCacheAsync>d__7")]
public Task`1<Response`1<RedisPrivateLinkResourceListResult>> ListByRedisCacheAsync(string subscriptionId, string resourceGroupName, string cacheName, CancellationToken cancellationToken);
    public Response`1<RedisPrivateLinkResourceListResult> ListByRedisCache(string subscriptionId, string resourceGroupName, string cacheName, CancellationToken cancellationToken);
}
internal static class Azure.ResourceManager.Redis.ProviderConstants : object {
    [CompilerGeneratedAttribute]
private static string <DefaultProviderNamespace>k__BackingField;
    public static string DefaultProviderNamespace { get; }
    private static ProviderConstants();
    [CompilerGeneratedAttribute]
public static string get_DefaultProviderNamespace();
}
internal class Azure.ResourceManager.Redis.RedisArmOperation : ArmOperation {
    private OperationInternal _operation;
    private Nullable`1<RehydrationToken> _completeRehydrationToken;
    private NextLinkOperationImplementation _nextLinkOperation;
    private string _operationId;
    public string Id { get; }
    public bool HasCompleted { get; }
    internal RedisArmOperation(Response response, Nullable`1<RehydrationToken> rehydrationToken);
    internal RedisArmOperation(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Request request, Response response, OperationFinalStateVia finalStateVia, bool skipApiVersionOverride, string apiVersionOverrideValue);
    private string GetOperationId(Nullable`1<RehydrationToken> rehydrationToken);
    public virtual string get_Id();
    public virtual Nullable`1<RehydrationToken> GetRehydrationToken();
    public virtual bool get_HasCompleted();
    public virtual Response GetRawResponse();
    public virtual Response UpdateStatus(CancellationToken cancellationToken);
    public virtual ValueTask`1<Response> UpdateStatusAsync(CancellationToken cancellationToken);
    public virtual Response WaitForCompletionResponse(CancellationToken cancellationToken);
    public virtual Response WaitForCompletionResponse(TimeSpan pollingInterval, CancellationToken cancellationToken);
    public virtual ValueTask`1<Response> WaitForCompletionResponseAsync(CancellationToken cancellationToken);
    public virtual ValueTask`1<Response> WaitForCompletionResponseAsync(TimeSpan pollingInterval, CancellationToken cancellationToken);
}
internal class Azure.ResourceManager.Redis.RedisArmOperation`1 : ArmOperation`1<T> {
    private OperationInternal`1<T> _operation;
    private Nullable`1<RehydrationToken> _completeRehydrationToken;
    private NextLinkOperationImplementation _nextLinkOperation;
    private string _operationId;
    public string Id { get; }
    public T Value { get; }
    public bool HasValue { get; }
    public bool HasCompleted { get; }
    internal RedisArmOperation`1(Response`1<T> response, Nullable`1<RehydrationToken> rehydrationToken);
    internal RedisArmOperation`1(IOperationSource`1<T> source, ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Request request, Response response, OperationFinalStateVia finalStateVia, bool skipApiVersionOverride, string apiVersionOverrideValue);
    private string GetOperationId(Nullable`1<RehydrationToken> rehydrationToken);
    public virtual string get_Id();
    public virtual Nullable`1<RehydrationToken> GetRehydrationToken();
    public virtual T get_Value();
    public virtual bool get_HasValue();
    public virtual bool get_HasCompleted();
    public virtual Response GetRawResponse();
    public virtual Response UpdateStatus(CancellationToken cancellationToken);
    public virtual ValueTask`1<Response> UpdateStatusAsync(CancellationToken cancellationToken);
    public virtual Response`1<T> WaitForCompletion(CancellationToken cancellationToken);
    public virtual Response`1<T> WaitForCompletion(TimeSpan pollingInterval, CancellationToken cancellationToken);
    public virtual ValueTask`1<Response`1<T>> WaitForCompletionAsync(CancellationToken cancellationToken);
    public virtual ValueTask`1<Response`1<T>> WaitForCompletionAsync(TimeSpan pollingInterval, CancellationToken cancellationToken);
}
public class Azure.ResourceManager.Redis.RedisCacheAccessPolicyAssignmentCollection : ArmCollection {
    private ClientDiagnostics _redisCacheAccessPolicyAssignmentAccessPolicyAssignmentClientDiagnostics;
    private AccessPolicyAssignmentRestOperations _redisCacheAccessPolicyAssignmentAccessPolicyAssignmentRestClient;
    internal RedisCacheAccessPolicyAssignmentCollection(ArmClient client, ResourceIdentifier id);
    internal static void ValidateResourceId(ResourceIdentifier id);
    [AsyncStateMachineAttribute("Azure.ResourceManager.Redis.RedisCacheAccessPolicyAssignmentCollection/<CreateOrUpdateAsync>d__5")]
public virtual Task`1<ArmOperation`1<RedisCacheAccessPolicyAssignmentResource>> CreateOrUpdateAsync(WaitUntil waitUntil, string accessPolicyAssignmentName, RedisCacheAccessPolicyAssignmentData data, CancellationToken cancellationToken);
    public virtual ArmOperation`1<RedisCacheAccessPolicyAssignmentResource> CreateOrUpdate(WaitUntil waitUntil, string accessPolicyAssignmentName, RedisCacheAccessPolicyAssignmentData data, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.ResourceManager.Redis.RedisCacheAccessPolicyAssignmentCollection/<GetAsync>d__7")]
public virtual Task`1<Response`1<RedisCacheAccessPolicyAssignmentResource>> GetAsync(string accessPolicyAssignmentName, CancellationToken cancellationToken);
    public virtual Response`1<RedisCacheAccessPolicyAssignmentResource> Get(string accessPolicyAssignmentName, CancellationToken cancellationToken);
    public virtual AsyncPageable`1<RedisCacheAccessPolicyAssignmentResource> GetAllAsync(CancellationToken cancellationToken);
    public virtual Pageable`1<RedisCacheAccessPolicyAssignmentResource> GetAll(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.ResourceManager.Redis.RedisCacheAccessPolicyAssignmentCollection/<ExistsAsync>d__11")]
public virtual Task`1<Response`1<bool>> ExistsAsync(string accessPolicyAssignmentName, CancellationToken cancellationToken);
    public virtual Response`1<bool> Exists(string accessPolicyAssignmentName, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.ResourceManager.Redis.RedisCacheAccessPolicyAssignmentCollection/<GetIfExistsAsync>d__13")]
public virtual Task`1<NullableResponse`1<RedisCacheAccessPolicyAssignmentResource>> GetIfExistsAsync(string accessPolicyAssignmentName, CancellationToken cancellationToken);
    public virtual NullableResponse`1<RedisCacheAccessPolicyAssignmentResource> GetIfExists(string accessPolicyAssignmentName, CancellationToken cancellationToken);
    private sealed virtual override IEnumerator`1<RedisCacheAccessPolicyAssignmentResource> System.Collections.Generic.IEnumerable<Azure.ResourceManager.Redis.RedisCacheAccessPolicyAssignmentResource>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override IAsyncEnumerator`1<RedisCacheAccessPolicyAssignmentResource> System.Collections.Generic.IAsyncEnumerable<Azure.ResourceManager.Redis.RedisCacheAccessPolicyAssignmentResource>.GetAsyncEnumerator(CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
private HttpMessage <GetAllAsync>g__FirstPageRequest|9_0(Nullable`1<int> pageSizeHint);
    [CompilerGeneratedAttribute]
private HttpMessage <GetAllAsync>g__NextPageRequest|9_1(Nullable`1<int> pageSizeHint, string nextLink);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private RedisCacheAccessPolicyAssignmentResource <GetAllAsync>b__9_2(JsonElement e);
    [CompilerGeneratedAttribute]
private HttpMessage <GetAll>g__FirstPageRequest|10_0(Nullable`1<int> pageSizeHint);
    [CompilerGeneratedAttribute]
private HttpMessage <GetAll>g__NextPageRequest|10_1(Nullable`1<int> pageSizeHint, string nextLink);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private RedisCacheAccessPolicyAssignmentResource <GetAll>b__10_2(JsonElement e);
}
public class Azure.ResourceManager.Redis.RedisCacheAccessPolicyAssignmentData : ResourceData {
    private IDictionary`2<string, BinaryData> _serializedAdditionalRawData;
    [CompilerGeneratedAttribute]
private Nullable`1<AccessPolicyAssignmentProvisioningState> <ProvisioningState>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Guid> <ObjectId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ObjectIdAlias>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AccessPolicyName>k__BackingField;
    [WirePathAttribute("properties.provisioningState")]
public Nullable`1<AccessPolicyAssignmentProvisioningState> ProvisioningState { get; }
    [WirePathAttribute("properties.objectId")]
public Nullable`1<Guid> ObjectId { get; public set; }
    [WirePathAttribute("properties.objectIdAlias")]
public string ObjectIdAlias { get; public set; }
    [WirePathAttribute("properties.accessPolicyName")]
public string AccessPolicyName { get; public set; }
    internal RedisCacheAccessPolicyAssignmentData(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, Nullable`1<AccessPolicyAssignmentProvisioningState> provisioningState, Nullable`1<Guid> objectId, string objectIdAlias, string accessPolicyName, IDictionary`2<string, BinaryData> serializedAdditionalRawData);
    [CompilerGeneratedAttribute]
public Nullable`1<AccessPolicyAssignmentProvisioningState> get_ProvisioningState();
    [CompilerGeneratedAttribute]
public Nullable`1<Guid> get_ObjectId();
    [CompilerGeneratedAttribute]
public void set_ObjectId(Nullable`1<Guid> value);
    [CompilerGeneratedAttribute]
public string get_ObjectIdAlias();
    [CompilerGeneratedAttribute]
public void set_ObjectIdAlias(string value);
    [CompilerGeneratedAttribute]
public string get_AccessPolicyName();
    [CompilerGeneratedAttribute]
public void set_AccessPolicyName(string value);
    private sealed virtual override void Azure.Core.IUtf8JsonSerializable.Write(Utf8JsonWriter writer);
    private sealed virtual override void System.ClientModel.Primitives.IJsonModel<Azure.ResourceManager.Redis.RedisCacheAccessPolicyAssignmentData>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options);
    private sealed virtual override RedisCacheAccessPolicyAssignmentData System.ClientModel.Primitives.IJsonModel<Azure.ResourceManager.Redis.RedisCacheAccessPolicyAssignmentData>.Create(Utf8JsonReader& reader, ModelReaderWriterOptions options);
    internal static RedisCacheAccessPolicyAssignmentData DeserializeRedisCacheAccessPolicyAssignmentData(JsonElement element, ModelReaderWriterOptions options);
    private BinaryData SerializeBicep(ModelReaderWriterOptions options);
    private sealed virtual override BinaryData System.ClientModel.Primitives.IPersistableModel<Azure.ResourceManager.Redis.RedisCacheAccessPolicyAssignmentData>.Write(ModelReaderWriterOptions options);
    private sealed virtual override RedisCacheAccessPolicyAssignmentData System.ClientModel.Primitives.IPersistableModel<Azure.ResourceManager.Redis.RedisCacheAccessPolicyAssignmentData>.Create(BinaryData data, ModelReaderWriterOptions options);
    private sealed virtual override string System.ClientModel.Primitives.IPersistableModel<Azure.ResourceManager.Redis.RedisCacheAccessPolicyAssignmentData>.GetFormatFromOptions(ModelReaderWriterOptions options);
}
internal class Azure.ResourceManager.Redis.RedisCacheAccessPolicyAssignmentOperationSource : object {
    private ArmClient _client;
    internal RedisCacheAccessPolicyAssignmentOperationSource(ArmClient client);
    private sealed virtual override RedisCacheAccessPolicyAssignmentResource Azure.Core.IOperationSource<Azure.ResourceManager.Redis.RedisCacheAccessPolicyAssignmentResource>.CreateResult(Response response, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.ResourceManager.Redis.RedisCacheAccessPolicyAssignmentOperationSource/<Azure-Core-IOperationSource<Azure-ResourceManager-Redis-RedisCacheAccessPolicyAssignmentResource>-CreateResultAsync>d__3")]
private sealed virtual override ValueTask`1<RedisCacheAccessPolicyAssignmentResource> Azure.Core.IOperationSource<Azure.ResourceManager.Redis.RedisCacheAccessPolicyAssignmentResource>.CreateResultAsync(Response response, CancellationToken cancellationToken);
}
public class Azure.ResourceManager.Redis.RedisCacheAccessPolicyAssignmentResource : ArmResource {
    private ClientDiagnostics _redisCacheAccessPolicyAssignmentAccessPolicyAssignmentClientDiagnostics;
    private AccessPolicyAssignmentRestOperations _redisCacheAccessPolicyAssignmentAccessPolicyAssignmentRestClient;
    private RedisCacheAccessPolicyAssignmentData _data;
    public static ResourceType ResourceType;
    [CompilerGeneratedAttribute]
private bool <HasData>k__BackingField;
    public bool HasData { get; }
    public RedisCacheAccessPolicyAssignmentData Data { get; }
    internal RedisCacheAccessPolicyAssignmentResource(ArmClient client, RedisCacheAccessPolicyAssignmentData data);
    internal RedisCacheAccessPolicyAssignmentResource(ArmClient client, ResourceIdentifier id);
    private static RedisCacheAccessPolicyAssignmentResource();
    public static ResourceIdentifier CreateResourceIdentifier(string subscriptionId, string resourceGroupName, string cacheName, string accessPolicyAssignmentName);
    [CompilerGeneratedAttribute]
public virtual bool get_HasData();
    public virtual RedisCacheAccessPolicyAssignmentData get_Data();
    internal static void ValidateResourceId(ResourceIdentifier id);
    [AsyncStateMachineAttribute("Azure.ResourceManager.Redis.RedisCacheAccessPolicyAssignmentResource/<GetAsync>d__14")]
public virtual Task`1<Response`1<RedisCacheAccessPolicyAssignmentResource>> GetAsync(CancellationToken cancellationToken);
    public virtual Response`1<RedisCacheAccessPolicyAssignmentResource> Get(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.ResourceManager.Redis.RedisCacheAccessPolicyAssignmentResource/<DeleteAsync>d__16")]
public virtual Task`1<ArmOperation> DeleteAsync(WaitUntil waitUntil, CancellationToken cancellationToken);
    public virtual ArmOperation Delete(WaitUntil waitUntil, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.ResourceManager.Redis.RedisCacheAccessPolicyAssignmentResource/<UpdateAsync>d__18")]
public virtual Task`1<ArmOperation`1<RedisCacheAccessPolicyAssignmentResource>> UpdateAsync(WaitUntil waitUntil, RedisCacheAccessPolicyAssignmentData data, CancellationToken cancellationToken);
    public virtual ArmOperation`1<RedisCacheAccessPolicyAssignmentResource> Update(WaitUntil waitUntil, RedisCacheAccessPolicyAssignmentData data, CancellationToken cancellationToken);
    private sealed virtual override void System.ClientModel.Primitives.IJsonModel<Azure.ResourceManager.Redis.RedisCacheAccessPolicyAssignmentData>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options);
    private sealed virtual override RedisCacheAccessPolicyAssignmentData System.ClientModel.Primitives.IJsonModel<Azure.ResourceManager.Redis.RedisCacheAccessPolicyAssignmentData>.Create(Utf8JsonReader& reader, ModelReaderWriterOptions options);
    private sealed virtual override BinaryData System.ClientModel.Primitives.IPersistableModel<Azure.ResourceManager.Redis.RedisCacheAccessPolicyAssignmentData>.Write(ModelReaderWriterOptions options);
    private sealed virtual override RedisCacheAccessPolicyAssignmentData System.ClientModel.Primitives.IPersistableModel<Azure.ResourceManager.Redis.RedisCacheAccessPolicyAssignmentData>.Create(BinaryData data, ModelReaderWriterOptions options);
    private sealed virtual override string System.ClientModel.Primitives.IPersistableModel<Azure.ResourceManager.Redis.RedisCacheAccessPolicyAssignmentData>.GetFormatFromOptions(ModelReaderWriterOptions options);
}
public class Azure.ResourceManager.Redis.RedisCacheAccessPolicyCollection : ArmCollection {
    private ClientDiagnostics _redisCacheAccessPolicyAccessPolicyClientDiagnostics;
    private AccessPolicyRestOperations _redisCacheAccessPolicyAccessPolicyRestClient;
    internal RedisCacheAccessPolicyCollection(ArmClient client, ResourceIdentifier id);
    internal static void ValidateResourceId(ResourceIdentifier id);
    [AsyncStateMachineAttribute("Azure.ResourceManager.Redis.RedisCacheAccessPolicyCollection/<CreateOrUpdateAsync>d__5")]
public virtual Task`1<ArmOperation`1<RedisCacheAccessPolicyResource>> CreateOrUpdateAsync(WaitUntil waitUntil, string accessPolicyName, RedisCacheAccessPolicyData data, CancellationToken cancellationToken);
    public virtual ArmOperation`1<RedisCacheAccessPolicyResource> CreateOrUpdate(WaitUntil waitUntil, string accessPolicyName, RedisCacheAccessPolicyData data, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.ResourceManager.Redis.RedisCacheAccessPolicyCollection/<GetAsync>d__7")]
public virtual Task`1<Response`1<RedisCacheAccessPolicyResource>> GetAsync(string accessPolicyName, CancellationToken cancellationToken);
    public virtual Response`1<RedisCacheAccessPolicyResource> Get(string accessPolicyName, CancellationToken cancellationToken);
    public virtual AsyncPageable`1<RedisCacheAccessPolicyResource> GetAllAsync(CancellationToken cancellationToken);
    public virtual Pageable`1<RedisCacheAccessPolicyResource> GetAll(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.ResourceManager.Redis.RedisCacheAccessPolicyCollection/<ExistsAsync>d__11")]
public virtual Task`1<Response`1<bool>> ExistsAsync(string accessPolicyName, CancellationToken cancellationToken);
    public virtual Response`1<bool> Exists(string accessPolicyName, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.ResourceManager.Redis.RedisCacheAccessPolicyCollection/<GetIfExistsAsync>d__13")]
public virtual Task`1<NullableResponse`1<RedisCacheAccessPolicyResource>> GetIfExistsAsync(string accessPolicyName, CancellationToken cancellationToken);
    public virtual NullableResponse`1<RedisCacheAccessPolicyResource> GetIfExists(string accessPolicyName, CancellationToken cancellationToken);
    private sealed virtual override IEnumerator`1<RedisCacheAccessPolicyResource> System.Collections.Generic.IEnumerable<Azure.ResourceManager.Redis.RedisCacheAccessPolicyResource>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override IAsyncEnumerator`1<RedisCacheAccessPolicyResource> System.Collections.Generic.IAsyncEnumerable<Azure.ResourceManager.Redis.RedisCacheAccessPolicyResource>.GetAsyncEnumerator(CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
private HttpMessage <GetAllAsync>g__FirstPageRequest|9_0(Nullable`1<int> pageSizeHint);
    [CompilerGeneratedAttribute]
private HttpMessage <GetAllAsync>g__NextPageRequest|9_1(Nullable`1<int> pageSizeHint, string nextLink);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private RedisCacheAccessPolicyResource <GetAllAsync>b__9_2(JsonElement e);
    [CompilerGeneratedAttribute]
private HttpMessage <GetAll>g__FirstPageRequest|10_0(Nullable`1<int> pageSizeHint);
    [CompilerGeneratedAttribute]
private HttpMessage <GetAll>g__NextPageRequest|10_1(Nullable`1<int> pageSizeHint, string nextLink);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private RedisCacheAccessPolicyResource <GetAll>b__10_2(JsonElement e);
}
public class Azure.ResourceManager.Redis.RedisCacheAccessPolicyData : ResourceData {
    private IDictionary`2<string, BinaryData> _serializedAdditionalRawData;
    [CompilerGeneratedAttribute]
private Nullable`1<AccessPolicyProvisioningState> <ProvisioningState>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<AccessPolicyType> <TypePropertiesType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Permissions>k__BackingField;
    [WirePathAttribute("properties.provisioningState")]
public Nullable`1<AccessPolicyProvisioningState> ProvisioningState { get; }
    [WirePathAttribute("properties.type")]
public Nullable`1<AccessPolicyType> TypePropertiesType { get; }
    [WirePathAttribute("properties.permissions")]
public string Permissions { get; public set; }
    internal RedisCacheAccessPolicyData(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, Nullable`1<AccessPolicyProvisioningState> provisioningState, Nullable`1<AccessPolicyType> typePropertiesType, string permissions, IDictionary`2<string, BinaryData> serializedAdditionalRawData);
    [CompilerGeneratedAttribute]
public Nullable`1<AccessPolicyProvisioningState> get_ProvisioningState();
    [CompilerGeneratedAttribute]
public Nullable`1<AccessPolicyType> get_TypePropertiesType();
    [CompilerGeneratedAttribute]
public string get_Permissions();
    [CompilerGeneratedAttribute]
public void set_Permissions(string value);
    private sealed virtual override void Azure.Core.IUtf8JsonSerializable.Write(Utf8JsonWriter writer);
    private sealed virtual override void System.ClientModel.Primitives.IJsonModel<Azure.ResourceManager.Redis.RedisCacheAccessPolicyData>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options);
    private sealed virtual override RedisCacheAccessPolicyData System.ClientModel.Primitives.IJsonModel<Azure.ResourceManager.Redis.RedisCacheAccessPolicyData>.Create(Utf8JsonReader& reader, ModelReaderWriterOptions options);
    internal static RedisCacheAccessPolicyData DeserializeRedisCacheAccessPolicyData(JsonElement element, ModelReaderWriterOptions options);
    private BinaryData SerializeBicep(ModelReaderWriterOptions options);
    private sealed virtual override BinaryData System.ClientModel.Primitives.IPersistableModel<Azure.ResourceManager.Redis.RedisCacheAccessPolicyData>.Write(ModelReaderWriterOptions options);
    private sealed virtual override RedisCacheAccessPolicyData System.ClientModel.Primitives.IPersistableModel<Azure.ResourceManager.Redis.RedisCacheAccessPolicyData>.Create(BinaryData data, ModelReaderWriterOptions options);
    private sealed virtual override string System.ClientModel.Primitives.IPersistableModel<Azure.ResourceManager.Redis.RedisCacheAccessPolicyData>.GetFormatFromOptions(ModelReaderWriterOptions options);
}
internal class Azure.ResourceManager.Redis.RedisCacheAccessPolicyOperationSource : object {
    private ArmClient _client;
    internal RedisCacheAccessPolicyOperationSource(ArmClient client);
    private sealed virtual override RedisCacheAccessPolicyResource Azure.Core.IOperationSource<Azure.ResourceManager.Redis.RedisCacheAccessPolicyResource>.CreateResult(Response response, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.ResourceManager.Redis.RedisCacheAccessPolicyOperationSource/<Azure-Core-IOperationSource<Azure-ResourceManager-Redis-RedisCacheAccessPolicyResource>-CreateResultAsync>d__3")]
private sealed virtual override ValueTask`1<RedisCacheAccessPolicyResource> Azure.Core.IOperationSource<Azure.ResourceManager.Redis.RedisCacheAccessPolicyResource>.CreateResultAsync(Response response, CancellationToken cancellationToken);
}
public class Azure.ResourceManager.Redis.RedisCacheAccessPolicyResource : ArmResource {
    private ClientDiagnostics _redisCacheAccessPolicyAccessPolicyClientDiagnostics;
    private AccessPolicyRestOperations _redisCacheAccessPolicyAccessPolicyRestClient;
    private RedisCacheAccessPolicyData _data;
    public static ResourceType ResourceType;
    [CompilerGeneratedAttribute]
private bool <HasData>k__BackingField;
    public bool HasData { get; }
    public RedisCacheAccessPolicyData Data { get; }
    internal RedisCacheAccessPolicyResource(ArmClient client, RedisCacheAccessPolicyData data);
    internal RedisCacheAccessPolicyResource(ArmClient client, ResourceIdentifier id);
    private static RedisCacheAccessPolicyResource();
    public static ResourceIdentifier CreateResourceIdentifier(string subscriptionId, string resourceGroupName, string cacheName, string accessPolicyName);
    [CompilerGeneratedAttribute]
public virtual bool get_HasData();
    public virtual RedisCacheAccessPolicyData get_Data();
    internal static void ValidateResourceId(ResourceIdentifier id);
    [AsyncStateMachineAttribute("Azure.ResourceManager.Redis.RedisCacheAccessPolicyResource/<GetAsync>d__14")]
public virtual Task`1<Response`1<RedisCacheAccessPolicyResource>> GetAsync(CancellationToken cancellationToken);
    public virtual Response`1<RedisCacheAccessPolicyResource> Get(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.ResourceManager.Redis.RedisCacheAccessPolicyResource/<DeleteAsync>d__16")]
public virtual Task`1<ArmOperation> DeleteAsync(WaitUntil waitUntil, CancellationToken cancellationToken);
    public virtual ArmOperation Delete(WaitUntil waitUntil, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.ResourceManager.Redis.RedisCacheAccessPolicyResource/<UpdateAsync>d__18")]
public virtual Task`1<ArmOperation`1<RedisCacheAccessPolicyResource>> UpdateAsync(WaitUntil waitUntil, RedisCacheAccessPolicyData data, CancellationToken cancellationToken);
    public virtual ArmOperation`1<RedisCacheAccessPolicyResource> Update(WaitUntil waitUntil, RedisCacheAccessPolicyData data, CancellationToken cancellationToken);
    private sealed virtual override void System.ClientModel.Primitives.IJsonModel<Azure.ResourceManager.Redis.RedisCacheAccessPolicyData>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options);
    private sealed virtual override RedisCacheAccessPolicyData System.ClientModel.Primitives.IJsonModel<Azure.ResourceManager.Redis.RedisCacheAccessPolicyData>.Create(Utf8JsonReader& reader, ModelReaderWriterOptions options);
    private sealed virtual override BinaryData System.ClientModel.Primitives.IPersistableModel<Azure.ResourceManager.Redis.RedisCacheAccessPolicyData>.Write(ModelReaderWriterOptions options);
    private sealed virtual override RedisCacheAccessPolicyData System.ClientModel.Primitives.IPersistableModel<Azure.ResourceManager.Redis.RedisCacheAccessPolicyData>.Create(BinaryData data, ModelReaderWriterOptions options);
    private sealed virtual override string System.ClientModel.Primitives.IPersistableModel<Azure.ResourceManager.Redis.RedisCacheAccessPolicyData>.GetFormatFromOptions(ModelReaderWriterOptions options);
}
public class Azure.ResourceManager.Redis.RedisCollection : ArmCollection {
    private ClientDiagnostics _redisClientDiagnostics;
    private RedisRestOperations _redisRestClient;
    internal RedisCollection(ArmClient client, ResourceIdentifier id);
    internal static void ValidateResourceId(ResourceIdentifier id);
    [AsyncStateMachineAttribute("Azure.ResourceManager.Redis.RedisCollection/<CreateOrUpdateAsync>d__5")]
public virtual Task`1<ArmOperation`1<RedisResource>> CreateOrUpdateAsync(WaitUntil waitUntil, string name, RedisCreateOrUpdateContent content, CancellationToken cancellationToken);
    public virtual ArmOperation`1<RedisResource> CreateOrUpdate(WaitUntil waitUntil, string name, RedisCreateOrUpdateContent content, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.ResourceManager.Redis.RedisCollection/<GetAsync>d__7")]
public virtual Task`1<Response`1<RedisResource>> GetAsync(string name, CancellationToken cancellationToken);
    public virtual Response`1<RedisResource> Get(string name, CancellationToken cancellationToken);
    public virtual AsyncPageable`1<RedisResource> GetAllAsync(CancellationToken cancellationToken);
    public virtual Pageable`1<RedisResource> GetAll(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.ResourceManager.Redis.RedisCollection/<ExistsAsync>d__11")]
public virtual Task`1<Response`1<bool>> ExistsAsync(string name, CancellationToken cancellationToken);
    public virtual Response`1<bool> Exists(string name, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.ResourceManager.Redis.RedisCollection/<GetIfExistsAsync>d__13")]
public virtual Task`1<NullableResponse`1<RedisResource>> GetIfExistsAsync(string name, CancellationToken cancellationToken);
    public virtual NullableResponse`1<RedisResource> GetIfExists(string name, CancellationToken cancellationToken);
    private sealed virtual override IEnumerator`1<RedisResource> System.Collections.Generic.IEnumerable<Azure.ResourceManager.Redis.RedisResource>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override IAsyncEnumerator`1<RedisResource> System.Collections.Generic.IAsyncEnumerable<Azure.ResourceManager.Redis.RedisResource>.GetAsyncEnumerator(CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
private HttpMessage <GetAllAsync>g__FirstPageRequest|9_0(Nullable`1<int> pageSizeHint);
    [CompilerGeneratedAttribute]
private HttpMessage <GetAllAsync>g__NextPageRequest|9_1(Nullable`1<int> pageSizeHint, string nextLink);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private RedisResource <GetAllAsync>b__9_2(JsonElement e);
    [CompilerGeneratedAttribute]
private HttpMessage <GetAll>g__FirstPageRequest|10_0(Nullable`1<int> pageSizeHint);
    [CompilerGeneratedAttribute]
private HttpMessage <GetAll>g__NextPageRequest|10_1(Nullable`1<int> pageSizeHint, string nextLink);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private RedisResource <GetAll>b__10_2(JsonElement e);
}
public class Azure.ResourceManager.Redis.RedisData : TrackedResourceData {
    private IDictionary`2<string, BinaryData> _serializedAdditionalRawData;
    [CompilerGeneratedAttribute]
private IList`1<string> <Zones>k__BackingField;
    [CompilerGeneratedAttribute]
private ManagedServiceIdentity <Identity>k__BackingField;
    [CompilerGeneratedAttribute]
private RedisCommonConfiguration <RedisConfiguration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RedisVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <EnableNonSslPort>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <ReplicasPerMaster>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <ReplicasPerPrimary>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <TenantSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <ShardCount>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<RedisTlsVersion> <MinimumTlsVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<RedisPublicNetworkAccess> <PublicNetworkAccess>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<UpdateChannel> <UpdateChannel>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsAccessKeyAuthenticationDisabled>k__BackingField;
    [CompilerGeneratedAttribute]
private RedisSku <Sku>k__BackingField;
    [CompilerGeneratedAttribute]
private ResourceIdentifier <SubnetId>k__BackingField;
    [CompilerGeneratedAttribute]
private IPAddress <StaticIP>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<RedisProvisioningState> <ProvisioningState>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HostName>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Port>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <SslPort>k__BackingField;
    [CompilerGeneratedAttribute]
private RedisAccessKeys <AccessKeys>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<SubResource> <LinkedServers>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<RedisInstanceDetails> <Instances>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<RedisPrivateEndpointConnectionData> <PrivateEndpointConnections>k__BackingField;
    [WirePathAttribute("zones")]
public IList`1<string> Zones { get; }
    [WirePathAttribute("identity")]
public ManagedServiceIdentity Identity { get; public set; }
    [WirePathAttribute("properties.redisConfiguration")]
public RedisCommonConfiguration RedisConfiguration { get; public set; }
    [WirePathAttribute("properties.redisVersion")]
public string RedisVersion { get; public set; }
    [WirePathAttribute("properties.enableNonSslPort")]
public Nullable`1<bool> EnableNonSslPort { get; public set; }
    [WirePathAttribute("properties.replicasPerMaster")]
public Nullable`1<int> ReplicasPerMaster { get; public set; }
    [WirePathAttribute("properties.replicasPerPrimary")]
public Nullable`1<int> ReplicasPerPrimary { get; public set; }
    [WirePathAttribute("properties.tenantSettings")]
public IDictionary`2<string, string> TenantSettings { get; }
    [WirePathAttribute("properties.shardCount")]
public Nullable`1<int> ShardCount { get; public set; }
    [WirePathAttribute("properties.minimumTlsVersion")]
public Nullable`1<RedisTlsVersion> MinimumTlsVersion { get; public set; }
    [WirePathAttribute("properties.publicNetworkAccess")]
public Nullable`1<RedisPublicNetworkAccess> PublicNetworkAccess { get; public set; }
    [WirePathAttribute("properties.updateChannel")]
public Nullable`1<UpdateChannel> UpdateChannel { get; public set; }
    [WirePathAttribute("properties.disableAccessKeyAuthentication")]
public Nullable`1<bool> IsAccessKeyAuthenticationDisabled { get; public set; }
    [WirePathAttribute("properties.sku")]
public RedisSku Sku { get; public set; }
    [WirePathAttribute("properties.subnetId")]
public ResourceIdentifier SubnetId { get; public set; }
    [WirePathAttribute("properties.staticIP")]
public IPAddress StaticIP { get; public set; }
    [WirePathAttribute("properties.provisioningState")]
public Nullable`1<RedisProvisioningState> ProvisioningState { get; }
    [WirePathAttribute("properties.hostName")]
public string HostName { get; }
    [WirePathAttribute("properties.port")]
public Nullable`1<int> Port { get; }
    [WirePathAttribute("properties.sslPort")]
public Nullable`1<int> SslPort { get; }
    [WirePathAttribute("properties.accessKeys")]
public RedisAccessKeys AccessKeys { get; }
    [WirePathAttribute("properties.linkedServers")]
public IReadOnlyList`1<SubResource> LinkedServers { get; }
    [WirePathAttribute("properties.instances")]
public IReadOnlyList`1<RedisInstanceDetails> Instances { get; }
    [WirePathAttribute("properties.privateEndpointConnections")]
public IReadOnlyList`1<RedisPrivateEndpointConnectionData> PrivateEndpointConnections { get; }
    public RedisData(AzureLocation location, RedisSku sku);
    internal RedisData(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, IDictionary`2<string, string> tags, AzureLocation location, IList`1<string> zones, ManagedServiceIdentity identity, RedisCommonConfiguration redisConfiguration, string redisVersion, Nullable`1<bool> enableNonSslPort, Nullable`1<int> replicasPerMaster, Nullable`1<int> replicasPerPrimary, IDictionary`2<string, string> tenantSettings, Nullable`1<int> shardCount, Nullable`1<RedisTlsVersion> minimumTlsVersion, Nullable`1<RedisPublicNetworkAccess> publicNetworkAccess, Nullable`1<UpdateChannel> updateChannel, Nullable`1<bool> isAccessKeyAuthenticationDisabled, RedisSku sku, ResourceIdentifier subnetId, IPAddress staticIP, Nullable`1<RedisProvisioningState> provisioningState, string hostName, Nullable`1<int> port, Nullable`1<int> sslPort, RedisAccessKeys accessKeys, IReadOnlyList`1<SubResource> linkedServers, IReadOnlyList`1<RedisInstanceDetails> instances, IReadOnlyList`1<RedisPrivateEndpointConnectionData> privateEndpointConnections, IDictionary`2<string, BinaryData> serializedAdditionalRawData);
    [CompilerGeneratedAttribute]
public IList`1<string> get_Zones();
    [CompilerGeneratedAttribute]
public ManagedServiceIdentity get_Identity();
    [CompilerGeneratedAttribute]
public void set_Identity(ManagedServiceIdentity value);
    [CompilerGeneratedAttribute]
public RedisCommonConfiguration get_RedisConfiguration();
    [CompilerGeneratedAttribute]
public void set_RedisConfiguration(RedisCommonConfiguration value);
    [CompilerGeneratedAttribute]
public string get_RedisVersion();
    [CompilerGeneratedAttribute]
public void set_RedisVersion(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_EnableNonSslPort();
    [CompilerGeneratedAttribute]
public void set_EnableNonSslPort(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_ReplicasPerMaster();
    [CompilerGeneratedAttribute]
public void set_ReplicasPerMaster(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_ReplicasPerPrimary();
    [CompilerGeneratedAttribute]
public void set_ReplicasPerPrimary(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_TenantSettings();
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_ShardCount();
    [CompilerGeneratedAttribute]
public void set_ShardCount(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<RedisTlsVersion> get_MinimumTlsVersion();
    [CompilerGeneratedAttribute]
public void set_MinimumTlsVersion(Nullable`1<RedisTlsVersion> value);
    [CompilerGeneratedAttribute]
public Nullable`1<RedisPublicNetworkAccess> get_PublicNetworkAccess();
    [CompilerGeneratedAttribute]
public void set_PublicNetworkAccess(Nullable`1<RedisPublicNetworkAccess> value);
    [CompilerGeneratedAttribute]
public Nullable`1<UpdateChannel> get_UpdateChannel();
    [CompilerGeneratedAttribute]
public void set_UpdateChannel(Nullable`1<UpdateChannel> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsAccessKeyAuthenticationDisabled();
    [CompilerGeneratedAttribute]
public void set_IsAccessKeyAuthenticationDisabled(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public RedisSku get_Sku();
    [CompilerGeneratedAttribute]
public void set_Sku(RedisSku value);
    [CompilerGeneratedAttribute]
public ResourceIdentifier get_SubnetId();
    [CompilerGeneratedAttribute]
public void set_SubnetId(ResourceIdentifier value);
    [CompilerGeneratedAttribute]
public IPAddress get_StaticIP();
    [CompilerGeneratedAttribute]
public void set_StaticIP(IPAddress value);
    [CompilerGeneratedAttribute]
public Nullable`1<RedisProvisioningState> get_ProvisioningState();
    [CompilerGeneratedAttribute]
public string get_HostName();
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Port();
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_SslPort();
    [CompilerGeneratedAttribute]
public RedisAccessKeys get_AccessKeys();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<SubResource> get_LinkedServers();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<RedisInstanceDetails> get_Instances();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<RedisPrivateEndpointConnectionData> get_PrivateEndpointConnections();
    private sealed virtual override void Azure.Core.IUtf8JsonSerializable.Write(Utf8JsonWriter writer);
    private sealed virtual override void System.ClientModel.Primitives.IJsonModel<Azure.ResourceManager.Redis.RedisData>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options);
    private sealed virtual override RedisData System.ClientModel.Primitives.IJsonModel<Azure.ResourceManager.Redis.RedisData>.Create(Utf8JsonReader& reader, ModelReaderWriterOptions options);
    internal static RedisData DeserializeRedisData(JsonElement element, ModelReaderWriterOptions options);
    private BinaryData SerializeBicep(ModelReaderWriterOptions options);
    private sealed virtual override BinaryData System.ClientModel.Primitives.IPersistableModel<Azure.ResourceManager.Redis.RedisData>.Write(ModelReaderWriterOptions options);
    private sealed virtual override RedisData System.ClientModel.Primitives.IPersistableModel<Azure.ResourceManager.Redis.RedisData>.Create(BinaryData data, ModelReaderWriterOptions options);
    private sealed virtual override string System.ClientModel.Primitives.IPersistableModel<Azure.ResourceManager.Redis.RedisData>.GetFormatFromOptions(ModelReaderWriterOptions options);
}
[ExtensionAttribute]
public static class Azure.ResourceManager.Redis.RedisExtensions : object {
    private static MockableRedisArmClient GetMockableRedisArmClient(ArmClient client);
    private static MockableRedisResourceGroupResource GetMockableRedisResourceGroupResource(ArmResource resource);
    private static MockableRedisSubscriptionResource GetMockableRedisSubscriptionResource(ArmResource resource);
    [ExtensionAttribute]
public static RedisResource GetRedisResource(ArmClient client, ResourceIdentifier id);
    [ExtensionAttribute]
public static RedisFirewallRuleResource GetRedisFirewallRuleResource(ArmClient client, ResourceIdentifier id);
    [ExtensionAttribute]
public static RedisPatchScheduleResource GetRedisPatchScheduleResource(ArmClient client, ResourceIdentifier id);
    [ExtensionAttribute]
public static RedisLinkedServerWithPropertyResource GetRedisLinkedServerWithPropertyResource(ArmClient client, ResourceIdentifier id);
    [ExtensionAttribute]
public static RedisPrivateEndpointConnectionResource GetRedisPrivateEndpointConnectionResource(ArmClient client, ResourceIdentifier id);
    [ExtensionAttribute]
public static RedisCacheAccessPolicyResource GetRedisCacheAccessPolicyResource(ArmClient client, ResourceIdentifier id);
    [ExtensionAttribute]
public static RedisCacheAccessPolicyAssignmentResource GetRedisCacheAccessPolicyAssignmentResource(ArmClient client, ResourceIdentifier id);
    [ExtensionAttribute]
public static RedisCollection GetAllRedis(ResourceGroupResource resourceGroupResource);
    [AsyncStateMachineAttribute("Azure.ResourceManager.Redis.RedisExtensions/<GetRedisAsync>d__11")]
[ExtensionAttribute]
[ForwardsClientCallsAttribute]
public static Task`1<Response`1<RedisResource>> GetRedisAsync(ResourceGroupResource resourceGroupResource, string name, CancellationToken cancellationToken);
    [ExtensionAttribute]
[ForwardsClientCallsAttribute]
public static Response`1<RedisResource> GetRedis(ResourceGroupResource resourceGroupResource, string name, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.ResourceManager.Redis.RedisExtensions/<CheckRedisNameAvailabilityAsync>d__13")]
[ExtensionAttribute]
public static Task`1<Response> CheckRedisNameAvailabilityAsync(SubscriptionResource subscriptionResource, RedisNameAvailabilityContent content, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Response CheckRedisNameAvailability(SubscriptionResource subscriptionResource, RedisNameAvailabilityContent content, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static AsyncPageable`1<RedisResource> GetAllRedisAsync(SubscriptionResource subscriptionResource, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Pageable`1<RedisResource> GetAllRedis(SubscriptionResource subscriptionResource, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.ResourceManager.Redis.RedisExtensions/<GetAsyncOperationStatusAsync>d__17")]
[ExtensionAttribute]
public static Task`1<Response`1<RedisOperationStatus>> GetAsyncOperationStatusAsync(SubscriptionResource subscriptionResource, AzureLocation location, string operationId, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Response`1<RedisOperationStatus> GetAsyncOperationStatus(SubscriptionResource subscriptionResource, AzureLocation location, string operationId, CancellationToken cancellationToken);
}
public class Azure.ResourceManager.Redis.RedisFirewallRuleCollection : ArmCollection {
    private ClientDiagnostics _redisFirewallRuleFirewallRulesClientDiagnostics;
    private FirewallRulesRestOperations _redisFirewallRuleFirewallRulesRestClient;
    internal RedisFirewallRuleCollection(ArmClient client, ResourceIdentifier id);
    internal static void ValidateResourceId(ResourceIdentifier id);
    [AsyncStateMachineAttribute("Azure.ResourceManager.Redis.RedisFirewallRuleCollection/<CreateOrUpdateAsync>d__5")]
public virtual Task`1<ArmOperation`1<RedisFirewallRuleResource>> CreateOrUpdateAsync(WaitUntil waitUntil, string ruleName, RedisFirewallRuleData data, CancellationToken cancellationToken);
    public virtual ArmOperation`1<RedisFirewallRuleResource> CreateOrUpdate(WaitUntil waitUntil, string ruleName, RedisFirewallRuleData data, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.ResourceManager.Redis.RedisFirewallRuleCollection/<GetAsync>d__7")]
public virtual Task`1<Response`1<RedisFirewallRuleResource>> GetAsync(string ruleName, CancellationToken cancellationToken);
    public virtual Response`1<RedisFirewallRuleResource> Get(string ruleName, CancellationToken cancellationToken);
    public virtual AsyncPageable`1<RedisFirewallRuleResource> GetAllAsync(CancellationToken cancellationToken);
    public virtual Pageable`1<RedisFirewallRuleResource> GetAll(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.ResourceManager.Redis.RedisFirewallRuleCollection/<ExistsAsync>d__11")]
public virtual Task`1<Response`1<bool>> ExistsAsync(string ruleName, CancellationToken cancellationToken);
    public virtual Response`1<bool> Exists(string ruleName, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.ResourceManager.Redis.RedisFirewallRuleCollection/<GetIfExistsAsync>d__13")]
public virtual Task`1<NullableResponse`1<RedisFirewallRuleResource>> GetIfExistsAsync(string ruleName, CancellationToken cancellationToken);
    public virtual NullableResponse`1<RedisFirewallRuleResource> GetIfExists(string ruleName, CancellationToken cancellationToken);
    private sealed virtual override IEnumerator`1<RedisFirewallRuleResource> System.Collections.Generic.IEnumerable<Azure.ResourceManager.Redis.RedisFirewallRuleResource>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override IAsyncEnumerator`1<RedisFirewallRuleResource> System.Collections.Generic.IAsyncEnumerable<Azure.ResourceManager.Redis.RedisFirewallRuleResource>.GetAsyncEnumerator(CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
private HttpMessage <GetAllAsync>g__FirstPageRequest|9_0(Nullable`1<int> pageSizeHint);
    [CompilerGeneratedAttribute]
private HttpMessage <GetAllAsync>g__NextPageRequest|9_1(Nullable`1<int> pageSizeHint, string nextLink);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private RedisFirewallRuleResource <GetAllAsync>b__9_2(JsonElement e);
    [CompilerGeneratedAttribute]
private HttpMessage <GetAll>g__FirstPageRequest|10_0(Nullable`1<int> pageSizeHint);
    [CompilerGeneratedAttribute]
private HttpMessage <GetAll>g__NextPageRequest|10_1(Nullable`1<int> pageSizeHint, string nextLink);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private RedisFirewallRuleResource <GetAll>b__10_2(JsonElement e);
}
public class Azure.ResourceManager.Redis.RedisFirewallRuleData : ResourceData {
    private protected IDictionary`2<string, BinaryData> _serializedAdditionalRawData;
    [CompilerGeneratedAttribute]
private IPAddress <StartIP>k__BackingField;
    [CompilerGeneratedAttribute]
private IPAddress <EndIP>k__BackingField;
    [WirePathAttribute("properties.startIP")]
public IPAddress StartIP { get; public set; }
    [WirePathAttribute("properties.endIP")]
public IPAddress EndIP { get; public set; }
    public RedisFirewallRuleData(IPAddress startIP, IPAddress endIP);
    internal RedisFirewallRuleData(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, IPAddress startIP, IPAddress endIP, IDictionary`2<string, BinaryData> serializedAdditionalRawData);
    [CompilerGeneratedAttribute]
public IPAddress get_StartIP();
    [CompilerGeneratedAttribute]
public void set_StartIP(IPAddress value);
    [CompilerGeneratedAttribute]
public IPAddress get_EndIP();
    [CompilerGeneratedAttribute]
public void set_EndIP(IPAddress value);
    private sealed virtual override void Azure.Core.IUtf8JsonSerializable.Write(Utf8JsonWriter writer);
    private sealed virtual override void System.ClientModel.Primitives.IJsonModel<Azure.ResourceManager.Redis.RedisFirewallRuleData>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options);
    private sealed virtual override RedisFirewallRuleData System.ClientModel.Primitives.IJsonModel<Azure.ResourceManager.Redis.RedisFirewallRuleData>.Create(Utf8JsonReader& reader, ModelReaderWriterOptions options);
    internal static RedisFirewallRuleData DeserializeRedisFirewallRuleData(JsonElement element, ModelReaderWriterOptions options);
    private BinaryData SerializeBicep(ModelReaderWriterOptions options);
    private sealed virtual override BinaryData System.ClientModel.Primitives.IPersistableModel<Azure.ResourceManager.Redis.RedisFirewallRuleData>.Write(ModelReaderWriterOptions options);
    private sealed virtual override RedisFirewallRuleData System.ClientModel.Primitives.IPersistableModel<Azure.ResourceManager.Redis.RedisFirewallRuleData>.Create(BinaryData data, ModelReaderWriterOptions options);
    private sealed virtual override string System.ClientModel.Primitives.IPersistableModel<Azure.ResourceManager.Redis.RedisFirewallRuleData>.GetFormatFromOptions(ModelReaderWriterOptions options);
}
public class Azure.ResourceManager.Redis.RedisFirewallRuleResource : ArmResource {
    private ClientDiagnostics _redisFirewallRuleFirewallRulesClientDiagnostics;
    private FirewallRulesRestOperations _redisFirewallRuleFirewallRulesRestClient;
    private RedisFirewallRuleData _data;
    public static ResourceType ResourceType;
    [CompilerGeneratedAttribute]
private bool <HasData>k__BackingField;
    public bool HasData { get; }
    public RedisFirewallRuleData Data { get; }
    internal RedisFirewallRuleResource(ArmClient client, RedisFirewallRuleData data);
    internal RedisFirewallRuleResource(ArmClient client, ResourceIdentifier id);
    private static RedisFirewallRuleResource();
    public static ResourceIdentifier CreateResourceIdentifier(string subscriptionId, string resourceGroupName, string cacheName, string ruleName);
    [CompilerGeneratedAttribute]
public virtual bool get_HasData();
    public virtual RedisFirewallRuleData get_Data();
    internal static void ValidateResourceId(ResourceIdentifier id);
    [AsyncStateMachineAttribute("Azure.ResourceManager.Redis.RedisFirewallRuleResource/<GetAsync>d__14")]
public virtual Task`1<Response`1<RedisFirewallRuleResource>> GetAsync(CancellationToken cancellationToken);
    public virtual Response`1<RedisFirewallRuleResource> Get(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.ResourceManager.Redis.RedisFirewallRuleResource/<DeleteAsync>d__16")]
public virtual Task`1<ArmOperation> DeleteAsync(WaitUntil waitUntil, CancellationToken cancellationToken);
    public virtual ArmOperation Delete(WaitUntil waitUntil, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.ResourceManager.Redis.RedisFirewallRuleResource/<UpdateAsync>d__18")]
public virtual Task`1<ArmOperation`1<RedisFirewallRuleResource>> UpdateAsync(WaitUntil waitUntil, RedisFirewallRuleData data, CancellationToken cancellationToken);
    public virtual ArmOperation`1<RedisFirewallRuleResource> Update(WaitUntil waitUntil, RedisFirewallRuleData data, CancellationToken cancellationToken);
    private sealed virtual override void System.ClientModel.Primitives.IJsonModel<Azure.ResourceManager.Redis.RedisFirewallRuleData>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options);
    private sealed virtual override RedisFirewallRuleData System.ClientModel.Primitives.IJsonModel<Azure.ResourceManager.Redis.RedisFirewallRuleData>.Create(Utf8JsonReader& reader, ModelReaderWriterOptions options);
    private sealed virtual override BinaryData System.ClientModel.Primitives.IPersistableModel<Azure.ResourceManager.Redis.RedisFirewallRuleData>.Write(ModelReaderWriterOptions options);
    private sealed virtual override RedisFirewallRuleData System.ClientModel.Primitives.IPersistableModel<Azure.ResourceManager.Redis.RedisFirewallRuleData>.Create(BinaryData data, ModelReaderWriterOptions options);
    private sealed virtual override string System.ClientModel.Primitives.IPersistableModel<Azure.ResourceManager.Redis.RedisFirewallRuleData>.GetFormatFromOptions(ModelReaderWriterOptions options);
}
public class Azure.ResourceManager.Redis.RedisLinkedServerWithPropertyCollection : ArmCollection {
    private ClientDiagnostics _redisLinkedServerWithPropertyLinkedServerClientDiagnostics;
    private LinkedServerRestOperations _redisLinkedServerWithPropertyLinkedServerRestClient;
    internal RedisLinkedServerWithPropertyCollection(ArmClient client, ResourceIdentifier id);
    internal static void ValidateResourceId(ResourceIdentifier id);
    [AsyncStateMachineAttribute("Azure.ResourceManager.Redis.RedisLinkedServerWithPropertyCollection/<CreateOrUpdateAsync>d__5")]
public virtual Task`1<ArmOperation`1<RedisLinkedServerWithPropertyResource>> CreateOrUpdateAsync(WaitUntil waitUntil, string linkedServerName, RedisLinkedServerWithPropertyCreateOrUpdateContent content, CancellationToken cancellationToken);
    public virtual ArmOperation`1<RedisLinkedServerWithPropertyResource> CreateOrUpdate(WaitUntil waitUntil, string linkedServerName, RedisLinkedServerWithPropertyCreateOrUpdateContent content, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.ResourceManager.Redis.RedisLinkedServerWithPropertyCollection/<GetAsync>d__7")]
public virtual Task`1<Response`1<RedisLinkedServerWithPropertyResource>> GetAsync(string linkedServerName, CancellationToken cancellationToken);
    public virtual Response`1<RedisLinkedServerWithPropertyResource> Get(string linkedServerName, CancellationToken cancellationToken);
    public virtual AsyncPageable`1<RedisLinkedServerWithPropertyResource> GetAllAsync(CancellationToken cancellationToken);
    public virtual Pageable`1<RedisLinkedServerWithPropertyResource> GetAll(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.ResourceManager.Redis.RedisLinkedServerWithPropertyCollection/<ExistsAsync>d__11")]
public virtual Task`1<Response`1<bool>> ExistsAsync(string linkedServerName, CancellationToken cancellationToken);
    public virtual Response`1<bool> Exists(string linkedServerName, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.ResourceManager.Redis.RedisLinkedServerWithPropertyCollection/<GetIfExistsAsync>d__13")]
public virtual Task`1<NullableResponse`1<RedisLinkedServerWithPropertyResource>> GetIfExistsAsync(string linkedServerName, CancellationToken cancellationToken);
    public virtual NullableResponse`1<RedisLinkedServerWithPropertyResource> GetIfExists(string linkedServerName, CancellationToken cancellationToken);
    private sealed virtual override IEnumerator`1<RedisLinkedServerWithPropertyResource> System.Collections.Generic.IEnumerable<Azure.ResourceManager.Redis.RedisLinkedServerWithPropertyResource>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override IAsyncEnumerator`1<RedisLinkedServerWithPropertyResource> System.Collections.Generic.IAsyncEnumerable<Azure.ResourceManager.Redis.RedisLinkedServerWithPropertyResource>.GetAsyncEnumerator(CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
private HttpMessage <GetAllAsync>g__FirstPageRequest|9_0(Nullable`1<int> pageSizeHint);
    [CompilerGeneratedAttribute]
private HttpMessage <GetAllAsync>g__NextPageRequest|9_1(Nullable`1<int> pageSizeHint, string nextLink);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private RedisLinkedServerWithPropertyResource <GetAllAsync>b__9_2(JsonElement e);
    [CompilerGeneratedAttribute]
private HttpMessage <GetAll>g__FirstPageRequest|10_0(Nullable`1<int> pageSizeHint);
    [CompilerGeneratedAttribute]
private HttpMessage <GetAll>g__NextPageRequest|10_1(Nullable`1<int> pageSizeHint, string nextLink);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private RedisLinkedServerWithPropertyResource <GetAll>b__10_2(JsonElement e);
}
public class Azure.ResourceManager.Redis.RedisLinkedServerWithPropertyData : ResourceData {
    private IDictionary`2<string, BinaryData> _serializedAdditionalRawData;
    [CompilerGeneratedAttribute]
private ResourceIdentifier <LinkedRedisCacheId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<AzureLocation> <LinkedRedisCacheLocation>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<RedisLinkedServerRole> <ServerRole>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GeoReplicatedPrimaryHostName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PrimaryHostName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProvisioningState>k__BackingField;
    [WirePathAttribute("properties.linkedRedisCacheId")]
public ResourceIdentifier LinkedRedisCacheId { get; public set; }
    [WirePathAttribute("properties.linkedRedisCacheLocation")]
public Nullable`1<AzureLocation> LinkedRedisCacheLocation { get; public set; }
    [WirePathAttribute("properties.serverRole")]
public Nullable`1<RedisLinkedServerRole> ServerRole { get; public set; }
    [WirePathAttribute("properties.geoReplicatedPrimaryHostName")]
public string GeoReplicatedPrimaryHostName { get; }
    [WirePathAttribute("properties.primaryHostName")]
public string PrimaryHostName { get; }
    [WirePathAttribute("properties.provisioningState")]
public string ProvisioningState { get; }
    internal RedisLinkedServerWithPropertyData(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, ResourceIdentifier linkedRedisCacheId, Nullable`1<AzureLocation> linkedRedisCacheLocation, Nullable`1<RedisLinkedServerRole> serverRole, string geoReplicatedPrimaryHostName, string primaryHostName, string provisioningState, IDictionary`2<string, BinaryData> serializedAdditionalRawData);
    [CompilerGeneratedAttribute]
public ResourceIdentifier get_LinkedRedisCacheId();
    [CompilerGeneratedAttribute]
public void set_LinkedRedisCacheId(ResourceIdentifier value);
    [CompilerGeneratedAttribute]
public Nullable`1<AzureLocation> get_LinkedRedisCacheLocation();
    [CompilerGeneratedAttribute]
public void set_LinkedRedisCacheLocation(Nullable`1<AzureLocation> value);
    [CompilerGeneratedAttribute]
public Nullable`1<RedisLinkedServerRole> get_ServerRole();
    [CompilerGeneratedAttribute]
public void set_ServerRole(Nullable`1<RedisLinkedServerRole> value);
    [CompilerGeneratedAttribute]
public string get_GeoReplicatedPrimaryHostName();
    [CompilerGeneratedAttribute]
public string get_PrimaryHostName();
    [CompilerGeneratedAttribute]
public string get_ProvisioningState();
    private sealed virtual override void Azure.Core.IUtf8JsonSerializable.Write(Utf8JsonWriter writer);
    private sealed virtual override void System.ClientModel.Primitives.IJsonModel<Azure.ResourceManager.Redis.RedisLinkedServerWithPropertyData>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options);
    private sealed virtual override RedisLinkedServerWithPropertyData System.ClientModel.Primitives.IJsonModel<Azure.ResourceManager.Redis.RedisLinkedServerWithPropertyData>.Create(Utf8JsonReader& reader, ModelReaderWriterOptions options);
    internal static RedisLinkedServerWithPropertyData DeserializeRedisLinkedServerWithPropertyData(JsonElement element, ModelReaderWriterOptions options);
    private BinaryData SerializeBicep(ModelReaderWriterOptions options);
    private sealed virtual override BinaryData System.ClientModel.Primitives.IPersistableModel<Azure.ResourceManager.Redis.RedisLinkedServerWithPropertyData>.Write(ModelReaderWriterOptions options);
    private sealed virtual override RedisLinkedServerWithPropertyData System.ClientModel.Primitives.IPersistableModel<Azure.ResourceManager.Redis.RedisLinkedServerWithPropertyData>.Create(BinaryData data, ModelReaderWriterOptions options);
    private sealed virtual override string System.ClientModel.Primitives.IPersistableModel<Azure.ResourceManager.Redis.RedisLinkedServerWithPropertyData>.GetFormatFromOptions(ModelReaderWriterOptions options);
}
internal class Azure.ResourceManager.Redis.RedisLinkedServerWithPropertyOperationSource : object {
    private ArmClient _client;
    internal RedisLinkedServerWithPropertyOperationSource(ArmClient client);
    private sealed virtual override RedisLinkedServerWithPropertyResource Azure.Core.IOperationSource<Azure.ResourceManager.Redis.RedisLinkedServerWithPropertyResource>.CreateResult(Response response, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.ResourceManager.Redis.RedisLinkedServerWithPropertyOperationSource/<Azure-Core-IOperationSource<Azure-ResourceManager-Redis-RedisLinkedServerWithPropertyResource>-CreateResultAsync>d__3")]
private sealed virtual override ValueTask`1<RedisLinkedServerWithPropertyResource> Azure.Core.IOperationSource<Azure.ResourceManager.Redis.RedisLinkedServerWithPropertyResource>.CreateResultAsync(Response response, CancellationToken cancellationToken);
}
public class Azure.ResourceManager.Redis.RedisLinkedServerWithPropertyResource : ArmResource {
    private ClientDiagnostics _redisLinkedServerWithPropertyLinkedServerClientDiagnostics;
    private LinkedServerRestOperations _redisLinkedServerWithPropertyLinkedServerRestClient;
    private RedisLinkedServerWithPropertyData _data;
    public static ResourceType ResourceType;
    [CompilerGeneratedAttribute]
private bool <HasData>k__BackingField;
    public bool HasData { get; }
    public RedisLinkedServerWithPropertyData Data { get; }
    internal RedisLinkedServerWithPropertyResource(ArmClient client, RedisLinkedServerWithPropertyData data);
    internal RedisLinkedServerWithPropertyResource(ArmClient client, ResourceIdentifier id);
    private static RedisLinkedServerWithPropertyResource();
    public static ResourceIdentifier CreateResourceIdentifier(string subscriptionId, string resourceGroupName, string name, string linkedServerName);
    [CompilerGeneratedAttribute]
public virtual bool get_HasData();
    public virtual RedisLinkedServerWithPropertyData get_Data();
    internal static void ValidateResourceId(ResourceIdentifier id);
    [AsyncStateMachineAttribute("Azure.ResourceManager.Redis.RedisLinkedServerWithPropertyResource/<GetAsync>d__14")]
public virtual Task`1<Response`1<RedisLinkedServerWithPropertyResource>> GetAsync(CancellationToken cancellationToken);
    public virtual Response`1<RedisLinkedServerWithPropertyResource> Get(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.ResourceManager.Redis.RedisLinkedServerWithPropertyResource/<DeleteAsync>d__16")]
public virtual Task`1<ArmOperation> DeleteAsync(WaitUntil waitUntil, CancellationToken cancellationToken);
    public virtual ArmOperation Delete(WaitUntil waitUntil, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.ResourceManager.Redis.RedisLinkedServerWithPropertyResource/<UpdateAsync>d__18")]
public virtual Task`1<ArmOperation`1<RedisLinkedServerWithPropertyResource>> UpdateAsync(WaitUntil waitUntil, RedisLinkedServerWithPropertyCreateOrUpdateContent content, CancellationToken cancellationToken);
    public virtual ArmOperation`1<RedisLinkedServerWithPropertyResource> Update(WaitUntil waitUntil, RedisLinkedServerWithPropertyCreateOrUpdateContent content, CancellationToken cancellationToken);
    private sealed virtual override void System.ClientModel.Primitives.IJsonModel<Azure.ResourceManager.Redis.RedisLinkedServerWithPropertyData>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options);
    private sealed virtual override RedisLinkedServerWithPropertyData System.ClientModel.Primitives.IJsonModel<Azure.ResourceManager.Redis.RedisLinkedServerWithPropertyData>.Create(Utf8JsonReader& reader, ModelReaderWriterOptions options);
    private sealed virtual override BinaryData System.ClientModel.Primitives.IPersistableModel<Azure.ResourceManager.Redis.RedisLinkedServerWithPropertyData>.Write(ModelReaderWriterOptions options);
    private sealed virtual override RedisLinkedServerWithPropertyData System.ClientModel.Primitives.IPersistableModel<Azure.ResourceManager.Redis.RedisLinkedServerWithPropertyData>.Create(BinaryData data, ModelReaderWriterOptions options);
    private sealed virtual override string System.ClientModel.Primitives.IPersistableModel<Azure.ResourceManager.Redis.RedisLinkedServerWithPropertyData>.GetFormatFromOptions(ModelReaderWriterOptions options);
}
internal class Azure.ResourceManager.Redis.RedisOperationSource : object {
    private ArmClient _client;
    internal RedisOperationSource(ArmClient client);
    private sealed virtual override RedisResource Azure.Core.IOperationSource<Azure.ResourceManager.Redis.RedisResource>.CreateResult(Response response, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.ResourceManager.Redis.RedisOperationSource/<Azure-Core-IOperationSource<Azure-ResourceManager-Redis-RedisResource>-CreateResultAsync>d__3")]
private sealed virtual override ValueTask`1<RedisResource> Azure.Core.IOperationSource<Azure.ResourceManager.Redis.RedisResource>.CreateResultAsync(Response response, CancellationToken cancellationToken);
}
public class Azure.ResourceManager.Redis.RedisPatchScheduleCollection : ArmCollection {
    private ClientDiagnostics _redisPatchSchedulePatchSchedulesClientDiagnostics;
    private PatchSchedulesRestOperations _redisPatchSchedulePatchSchedulesRestClient;
    internal RedisPatchScheduleCollection(ArmClient client, ResourceIdentifier id);
    internal static void ValidateResourceId(ResourceIdentifier id);
    [AsyncStateMachineAttribute("Azure.ResourceManager.Redis.RedisPatchScheduleCollection/<CreateOrUpdateAsync>d__5")]
public virtual Task`1<ArmOperation`1<RedisPatchScheduleResource>> CreateOrUpdateAsync(WaitUntil waitUntil, RedisPatchScheduleDefaultName defaultName, RedisPatchScheduleData data, CancellationToken cancellationToken);
    public virtual ArmOperation`1<RedisPatchScheduleResource> CreateOrUpdate(WaitUntil waitUntil, RedisPatchScheduleDefaultName defaultName, RedisPatchScheduleData data, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.ResourceManager.Redis.RedisPatchScheduleCollection/<GetAsync>d__7")]
public virtual Task`1<Response`1<RedisPatchScheduleResource>> GetAsync(RedisPatchScheduleDefaultName defaultName, CancellationToken cancellationToken);
    public virtual Response`1<RedisPatchScheduleResource> Get(RedisPatchScheduleDefaultName defaultName, CancellationToken cancellationToken);
    public virtual AsyncPageable`1<RedisPatchScheduleResource> GetAllAsync(CancellationToken cancellationToken);
    public virtual Pageable`1<RedisPatchScheduleResource> GetAll(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.ResourceManager.Redis.RedisPatchScheduleCollection/<ExistsAsync>d__11")]
public virtual Task`1<Response`1<bool>> ExistsAsync(RedisPatchScheduleDefaultName defaultName, CancellationToken cancellationToken);
    public virtual Response`1<bool> Exists(RedisPatchScheduleDefaultName defaultName, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.ResourceManager.Redis.RedisPatchScheduleCollection/<GetIfExistsAsync>d__13")]
public virtual Task`1<NullableResponse`1<RedisPatchScheduleResource>> GetIfExistsAsync(RedisPatchScheduleDefaultName defaultName, CancellationToken cancellationToken);
    public virtual NullableResponse`1<RedisPatchScheduleResource> GetIfExists(RedisPatchScheduleDefaultName defaultName, CancellationToken cancellationToken);
    private sealed virtual override IEnumerator`1<RedisPatchScheduleResource> System.Collections.Generic.IEnumerable<Azure.ResourceManager.Redis.RedisPatchScheduleResource>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override IAsyncEnumerator`1<RedisPatchScheduleResource> System.Collections.Generic.IAsyncEnumerable<Azure.ResourceManager.Redis.RedisPatchScheduleResource>.GetAsyncEnumerator(CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
private HttpMessage <GetAllAsync>g__FirstPageRequest|9_0(Nullable`1<int> pageSizeHint);
    [CompilerGeneratedAttribute]
private HttpMessage <GetAllAsync>g__NextPageRequest|9_1(Nullable`1<int> pageSizeHint, string nextLink);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private RedisPatchScheduleResource <GetAllAsync>b__9_2(JsonElement e);
    [CompilerGeneratedAttribute]
private HttpMessage <GetAll>g__FirstPageRequest|10_0(Nullable`1<int> pageSizeHint);
    [CompilerGeneratedAttribute]
private HttpMessage <GetAll>g__NextPageRequest|10_1(Nullable`1<int> pageSizeHint, string nextLink);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private RedisPatchScheduleResource <GetAll>b__10_2(JsonElement e);
}
public class Azure.ResourceManager.Redis.RedisPatchScheduleData : ResourceData {
    private IDictionary`2<string, BinaryData> _serializedAdditionalRawData;
    [CompilerGeneratedAttribute]
private Nullable`1<AzureLocation> <Location>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<RedisPatchScheduleSetting> <ScheduleEntries>k__BackingField;
    [WirePathAttribute("location")]
public Nullable`1<AzureLocation> Location { get; }
    [WirePathAttribute("properties.scheduleEntries")]
public IList`1<RedisPatchScheduleSetting> ScheduleEntries { get; }
    public RedisPatchScheduleData(IEnumerable`1<RedisPatchScheduleSetting> scheduleEntries);
    internal RedisPatchScheduleData(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, Nullable`1<AzureLocation> location, IList`1<RedisPatchScheduleSetting> scheduleEntries, IDictionary`2<string, BinaryData> serializedAdditionalRawData);
    [CompilerGeneratedAttribute]
public Nullable`1<AzureLocation> get_Location();
    [CompilerGeneratedAttribute]
public IList`1<RedisPatchScheduleSetting> get_ScheduleEntries();
    private sealed virtual override void Azure.Core.IUtf8JsonSerializable.Write(Utf8JsonWriter writer);
    private sealed virtual override void System.ClientModel.Primitives.IJsonModel<Azure.ResourceManager.Redis.RedisPatchScheduleData>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options);
    private sealed virtual override RedisPatchScheduleData System.ClientModel.Primitives.IJsonModel<Azure.ResourceManager.Redis.RedisPatchScheduleData>.Create(Utf8JsonReader& reader, ModelReaderWriterOptions options);
    internal static RedisPatchScheduleData DeserializeRedisPatchScheduleData(JsonElement element, ModelReaderWriterOptions options);
    private BinaryData SerializeBicep(ModelReaderWriterOptions options);
    private sealed virtual override BinaryData System.ClientModel.Primitives.IPersistableModel<Azure.ResourceManager.Redis.RedisPatchScheduleData>.Write(ModelReaderWriterOptions options);
    private sealed virtual override RedisPatchScheduleData System.ClientModel.Primitives.IPersistableModel<Azure.ResourceManager.Redis.RedisPatchScheduleData>.Create(BinaryData data, ModelReaderWriterOptions options);
    private sealed virtual override string System.ClientModel.Primitives.IPersistableModel<Azure.ResourceManager.Redis.RedisPatchScheduleData>.GetFormatFromOptions(ModelReaderWriterOptions options);
}
public class Azure.ResourceManager.Redis.RedisPatchScheduleResource : ArmResource {
    private ClientDiagnostics _redisPatchSchedulePatchSchedulesClientDiagnostics;
    private PatchSchedulesRestOperations _redisPatchSchedulePatchSchedulesRestClient;
    private RedisPatchScheduleData _data;
    public static ResourceType ResourceType;
    [CompilerGeneratedAttribute]
private bool <HasData>k__BackingField;
    public bool HasData { get; }
    public RedisPatchScheduleData Data { get; }
    internal RedisPatchScheduleResource(ArmClient client, RedisPatchScheduleData data);
    internal RedisPatchScheduleResource(ArmClient client, ResourceIdentifier id);
    private static RedisPatchScheduleResource();
    public static ResourceIdentifier CreateResourceIdentifier(string subscriptionId, string resourceGroupName, string name, RedisPatchScheduleDefaultName defaultName);
    [CompilerGeneratedAttribute]
public virtual bool get_HasData();
    public virtual RedisPatchScheduleData get_Data();
    internal static void ValidateResourceId(ResourceIdentifier id);
    [AsyncStateMachineAttribute("Azure.ResourceManager.Redis.RedisPatchScheduleResource/<GetAsync>d__14")]
public virtual Task`1<Response`1<RedisPatchScheduleResource>> GetAsync(CancellationToken cancellationToken);
    public virtual Response`1<RedisPatchScheduleResource> Get(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.ResourceManager.Redis.RedisPatchScheduleResource/<DeleteAsync>d__16")]
public virtual Task`1<ArmOperation> DeleteAsync(WaitUntil waitUntil, CancellationToken cancellationToken);
    public virtual ArmOperation Delete(WaitUntil waitUntil, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.ResourceManager.Redis.RedisPatchScheduleResource/<UpdateAsync>d__18")]
public virtual Task`1<ArmOperation`1<RedisPatchScheduleResource>> UpdateAsync(WaitUntil waitUntil, RedisPatchScheduleData data, CancellationToken cancellationToken);
    public virtual ArmOperation`1<RedisPatchScheduleResource> Update(WaitUntil waitUntil, RedisPatchScheduleData data, CancellationToken cancellationToken);
    private sealed virtual override void System.ClientModel.Primitives.IJsonModel<Azure.ResourceManager.Redis.RedisPatchScheduleData>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options);
    private sealed virtual override RedisPatchScheduleData System.ClientModel.Primitives.IJsonModel<Azure.ResourceManager.Redis.RedisPatchScheduleData>.Create(Utf8JsonReader& reader, ModelReaderWriterOptions options);
    private sealed virtual override BinaryData System.ClientModel.Primitives.IPersistableModel<Azure.ResourceManager.Redis.RedisPatchScheduleData>.Write(ModelReaderWriterOptions options);
    private sealed virtual override RedisPatchScheduleData System.ClientModel.Primitives.IPersistableModel<Azure.ResourceManager.Redis.RedisPatchScheduleData>.Create(BinaryData data, ModelReaderWriterOptions options);
    private sealed virtual override string System.ClientModel.Primitives.IPersistableModel<Azure.ResourceManager.Redis.RedisPatchScheduleData>.GetFormatFromOptions(ModelReaderWriterOptions options);
}
public class Azure.ResourceManager.Redis.RedisPrivateEndpointConnectionCollection : ArmCollection {
    private ClientDiagnostics _redisPrivateEndpointConnectionPrivateEndpointConnectionsClientDiagnostics;
    private PrivateEndpointConnectionsRestOperations _redisPrivateEndpointConnectionPrivateEndpointConnectionsRestClient;
    internal RedisPrivateEndpointConnectionCollection(ArmClient client, ResourceIdentifier id);
    internal static void ValidateResourceId(ResourceIdentifier id);
    [AsyncStateMachineAttribute("Azure.ResourceManager.Redis.RedisPrivateEndpointConnectionCollection/<CreateOrUpdateAsync>d__5")]
public virtual Task`1<ArmOperation`1<RedisPrivateEndpointConnectionResource>> CreateOrUpdateAsync(WaitUntil waitUntil, string privateEndpointConnectionName, RedisPrivateEndpointConnectionData data, CancellationToken cancellationToken);
    public virtual ArmOperation`1<RedisPrivateEndpointConnectionResource> CreateOrUpdate(WaitUntil waitUntil, string privateEndpointConnectionName, RedisPrivateEndpointConnectionData data, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.ResourceManager.Redis.RedisPrivateEndpointConnectionCollection/<GetAsync>d__7")]
public virtual Task`1<Response`1<RedisPrivateEndpointConnectionResource>> GetAsync(string privateEndpointConnectionName, CancellationToken cancellationToken);
    public virtual Response`1<RedisPrivateEndpointConnectionResource> Get(string privateEndpointConnectionName, CancellationToken cancellationToken);
    public virtual AsyncPageable`1<RedisPrivateEndpointConnectionResource> GetAllAsync(CancellationToken cancellationToken);
    public virtual Pageable`1<RedisPrivateEndpointConnectionResource> GetAll(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.ResourceManager.Redis.RedisPrivateEndpointConnectionCollection/<ExistsAsync>d__11")]
public virtual Task`1<Response`1<bool>> ExistsAsync(string privateEndpointConnectionName, CancellationToken cancellationToken);
    public virtual Response`1<bool> Exists(string privateEndpointConnectionName, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.ResourceManager.Redis.RedisPrivateEndpointConnectionCollection/<GetIfExistsAsync>d__13")]
public virtual Task`1<NullableResponse`1<RedisPrivateEndpointConnectionResource>> GetIfExistsAsync(string privateEndpointConnectionName, CancellationToken cancellationToken);
    public virtual NullableResponse`1<RedisPrivateEndpointConnectionResource> GetIfExists(string privateEndpointConnectionName, CancellationToken cancellationToken);
    private sealed virtual override IEnumerator`1<RedisPrivateEndpointConnectionResource> System.Collections.Generic.IEnumerable<Azure.ResourceManager.Redis.RedisPrivateEndpointConnectionResource>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override IAsyncEnumerator`1<RedisPrivateEndpointConnectionResource> System.Collections.Generic.IAsyncEnumerable<Azure.ResourceManager.Redis.RedisPrivateEndpointConnectionResource>.GetAsyncEnumerator(CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
private HttpMessage <GetAllAsync>g__FirstPageRequest|9_0(Nullable`1<int> pageSizeHint);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private RedisPrivateEndpointConnectionResource <GetAllAsync>b__9_1(JsonElement e);
    [CompilerGeneratedAttribute]
private HttpMessage <GetAll>g__FirstPageRequest|10_0(Nullable`1<int> pageSizeHint);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private RedisPrivateEndpointConnectionResource <GetAll>b__10_1(JsonElement e);
}
public class Azure.ResourceManager.Redis.RedisPrivateEndpointConnectionData : ResourceData {
    private IDictionary`2<string, BinaryData> _serializedAdditionalRawData;
    [CompilerGeneratedAttribute]
private SubResource <PrivateEndpoint>k__BackingField;
    [CompilerGeneratedAttribute]
private RedisPrivateLinkServiceConnectionState <RedisPrivateLinkServiceConnectionState>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<RedisPrivateEndpointConnectionProvisioningState> <RedisProvisioningState>k__BackingField;
    internal SubResource PrivateEndpoint { get; internal set; }
    [WirePathAttribute("properties.privateEndpoint.id")]
public ResourceIdentifier PrivateEndpointId { get; }
    [WirePathAttribute("properties.privateLinkServiceConnectionState")]
public RedisPrivateLinkServiceConnectionState RedisPrivateLinkServiceConnectionState { get; public set; }
    [WirePathAttribute("properties.provisioningState")]
public Nullable`1<RedisPrivateEndpointConnectionProvisioningState> RedisProvisioningState { get; }
    internal RedisPrivateEndpointConnectionData(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, SubResource privateEndpoint, RedisPrivateLinkServiceConnectionState redisPrivateLinkServiceConnectionState, Nullable`1<RedisPrivateEndpointConnectionProvisioningState> redisProvisioningState, IDictionary`2<string, BinaryData> serializedAdditionalRawData);
    [CompilerGeneratedAttribute]
internal SubResource get_PrivateEndpoint();
    [CompilerGeneratedAttribute]
internal void set_PrivateEndpoint(SubResource value);
    public ResourceIdentifier get_PrivateEndpointId();
    [CompilerGeneratedAttribute]
public RedisPrivateLinkServiceConnectionState get_RedisPrivateLinkServiceConnectionState();
    [CompilerGeneratedAttribute]
public void set_RedisPrivateLinkServiceConnectionState(RedisPrivateLinkServiceConnectionState value);
    [CompilerGeneratedAttribute]
public Nullable`1<RedisPrivateEndpointConnectionProvisioningState> get_RedisProvisioningState();
    private sealed virtual override void Azure.Core.IUtf8JsonSerializable.Write(Utf8JsonWriter writer);
    private sealed virtual override void System.ClientModel.Primitives.IJsonModel<Azure.ResourceManager.Redis.RedisPrivateEndpointConnectionData>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options);
    private sealed virtual override RedisPrivateEndpointConnectionData System.ClientModel.Primitives.IJsonModel<Azure.ResourceManager.Redis.RedisPrivateEndpointConnectionData>.Create(Utf8JsonReader& reader, ModelReaderWriterOptions options);
    internal static RedisPrivateEndpointConnectionData DeserializeRedisPrivateEndpointConnectionData(JsonElement element, ModelReaderWriterOptions options);
    private BinaryData SerializeBicep(ModelReaderWriterOptions options);
    private sealed virtual override BinaryData System.ClientModel.Primitives.IPersistableModel<Azure.ResourceManager.Redis.RedisPrivateEndpointConnectionData>.Write(ModelReaderWriterOptions options);
    private sealed virtual override RedisPrivateEndpointConnectionData System.ClientModel.Primitives.IPersistableModel<Azure.ResourceManager.Redis.RedisPrivateEndpointConnectionData>.Create(BinaryData data, ModelReaderWriterOptions options);
    private sealed virtual override string System.ClientModel.Primitives.IPersistableModel<Azure.ResourceManager.Redis.RedisPrivateEndpointConnectionData>.GetFormatFromOptions(ModelReaderWriterOptions options);
}
internal class Azure.ResourceManager.Redis.RedisPrivateEndpointConnectionOperationSource : object {
    private ArmClient _client;
    internal RedisPrivateEndpointConnectionOperationSource(ArmClient client);
    private sealed virtual override RedisPrivateEndpointConnectionResource Azure.Core.IOperationSource<Azure.ResourceManager.Redis.RedisPrivateEndpointConnectionResource>.CreateResult(Response response, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.ResourceManager.Redis.RedisPrivateEndpointConnectionOperationSource/<Azure-Core-IOperationSource<Azure-ResourceManager-Redis-RedisPrivateEndpointConnectionResource>-CreateResultAsync>d__3")]
private sealed virtual override ValueTask`1<RedisPrivateEndpointConnectionResource> Azure.Core.IOperationSource<Azure.ResourceManager.Redis.RedisPrivateEndpointConnectionResource>.CreateResultAsync(Response response, CancellationToken cancellationToken);
}
public class Azure.ResourceManager.Redis.RedisPrivateEndpointConnectionResource : ArmResource {
    private ClientDiagnostics _redisPrivateEndpointConnectionPrivateEndpointConnectionsClientDiagnostics;
    private PrivateEndpointConnectionsRestOperations _redisPrivateEndpointConnectionPrivateEndpointConnectionsRestClient;
    private RedisPrivateEndpointConnectionData _data;
    public static ResourceType ResourceType;
    [CompilerGeneratedAttribute]
private bool <HasData>k__BackingField;
    public bool HasData { get; }
    public RedisPrivateEndpointConnectionData Data { get; }
    internal RedisPrivateEndpointConnectionResource(ArmClient client, RedisPrivateEndpointConnectionData data);
    internal RedisPrivateEndpointConnectionResource(ArmClient client, ResourceIdentifier id);
    private static RedisPrivateEndpointConnectionResource();
    public static ResourceIdentifier CreateResourceIdentifier(string subscriptionId, string resourceGroupName, string cacheName, string privateEndpointConnectionName);
    [CompilerGeneratedAttribute]
public virtual bool get_HasData();
    public virtual RedisPrivateEndpointConnectionData get_Data();
    internal static void ValidateResourceId(ResourceIdentifier id);
    [AsyncStateMachineAttribute("Azure.ResourceManager.Redis.RedisPrivateEndpointConnectionResource/<GetAsync>d__14")]
public virtual Task`1<Response`1<RedisPrivateEndpointConnectionResource>> GetAsync(CancellationToken cancellationToken);
    public virtual Response`1<RedisPrivateEndpointConnectionResource> Get(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.ResourceManager.Redis.RedisPrivateEndpointConnectionResource/<DeleteAsync>d__16")]
public virtual Task`1<ArmOperation> DeleteAsync(WaitUntil waitUntil, CancellationToken cancellationToken);
    public virtual ArmOperation Delete(WaitUntil waitUntil, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.ResourceManager.Redis.RedisPrivateEndpointConnectionResource/<UpdateAsync>d__18")]
public virtual Task`1<ArmOperation`1<RedisPrivateEndpointConnectionResource>> UpdateAsync(WaitUntil waitUntil, RedisPrivateEndpointConnectionData data, CancellationToken cancellationToken);
    public virtual ArmOperation`1<RedisPrivateEndpointConnectionResource> Update(WaitUntil waitUntil, RedisPrivateEndpointConnectionData data, CancellationToken cancellationToken);
    private sealed virtual override void System.ClientModel.Primitives.IJsonModel<Azure.ResourceManager.Redis.RedisPrivateEndpointConnectionData>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options);
    private sealed virtual override RedisPrivateEndpointConnectionData System.ClientModel.Primitives.IJsonModel<Azure.ResourceManager.Redis.RedisPrivateEndpointConnectionData>.Create(Utf8JsonReader& reader, ModelReaderWriterOptions options);
    private sealed virtual override BinaryData System.ClientModel.Primitives.IPersistableModel<Azure.ResourceManager.Redis.RedisPrivateEndpointConnectionData>.Write(ModelReaderWriterOptions options);
    private sealed virtual override RedisPrivateEndpointConnectionData System.ClientModel.Primitives.IPersistableModel<Azure.ResourceManager.Redis.RedisPrivateEndpointConnectionData>.Create(BinaryData data, ModelReaderWriterOptions options);
    private sealed virtual override string System.ClientModel.Primitives.IPersistableModel<Azure.ResourceManager.Redis.RedisPrivateEndpointConnectionData>.GetFormatFromOptions(ModelReaderWriterOptions options);
}
public class Azure.ResourceManager.Redis.RedisResource : ArmResource {
    private ClientDiagnostics _redisClientDiagnostics;
    private RedisRestOperations _redisRestClient;
    private ClientDiagnostics _privateLinkResourcesClientDiagnostics;
    private PrivateLinkResourcesRestOperations _privateLinkResourcesRestClient;
    private RedisData _data;
    public static ResourceType ResourceType;
    [CompilerGeneratedAttribute]
private bool <HasData>k__BackingField;
    public bool HasData { get; }
    public RedisData Data { get; }
    internal RedisResource(ArmClient client, RedisData data);
    internal RedisResource(ArmClient client, ResourceIdentifier id);
    private static RedisResource();
    [AsyncStateMachineAttribute("Azure.ResourceManager.Redis.RedisResource/<UpdateAsync>d__0")]
[ObsoleteAttribute("This method is obsolete and will be removed in a future release. Please use another long-running operation with same method name instead.", "False")]
[EditorBrowsableAttribute("1")]
public virtual Task`1<Response`1<RedisResource>> UpdateAsync(RedisPatch patch, CancellationToken cancellationToken);
    [ObsoleteAttribute("This method is obsolete and will be removed in a future release. Please use another long-running operation with same method name instead.", "False")]
[EditorBrowsableAttribute("1")]
public virtual Response`1<RedisResource> Update(RedisPatch patch, CancellationToken cancellationToken);
    public static ResourceIdentifier CreateResourceIdentifier(string subscriptionId, string resourceGroupName, string name);
    [CompilerGeneratedAttribute]
public virtual bool get_HasData();
    public virtual RedisData get_Data();
    internal static void ValidateResourceId(ResourceIdentifier id);
    public virtual RedisFirewallRuleCollection GetRedisFirewallRules();
    [AsyncStateMachineAttribute("Azure.ResourceManager.Redis.RedisResource/<GetRedisFirewallRuleAsync>d__19")]
[ForwardsClientCallsAttribute]
public virtual Task`1<Response`1<RedisFirewallRuleResource>> GetRedisFirewallRuleAsync(string ruleName, CancellationToken cancellationToken);
    [ForwardsClientCallsAttribute]
public virtual Response`1<RedisFirewallRuleResource> GetRedisFirewallRule(string ruleName, CancellationToken cancellationToken);
    public virtual RedisPatchScheduleCollection GetRedisPatchSchedules();
    [AsyncStateMachineAttribute("Azure.ResourceManager.Redis.RedisResource/<GetRedisPatchScheduleAsync>d__22")]
[ForwardsClientCallsAttribute]
public virtual Task`1<Response`1<RedisPatchScheduleResource>> GetRedisPatchScheduleAsync(RedisPatchScheduleDefaultName defaultName, CancellationToken cancellationToken);
    [ForwardsClientCallsAttribute]
public virtual Response`1<RedisPatchScheduleResource> GetRedisPatchSchedule(RedisPatchScheduleDefaultName defaultName, CancellationToken cancellationToken);
    public virtual RedisLinkedServerWithPropertyCollection GetRedisLinkedServerWithProperties();
    [AsyncStateMachineAttribute("Azure.ResourceManager.Redis.RedisResource/<GetRedisLinkedServerWithPropertyAsync>d__25")]
[ForwardsClientCallsAttribute]
public virtual Task`1<Response`1<RedisLinkedServerWithPropertyResource>> GetRedisLinkedServerWithPropertyAsync(string linkedServerName, CancellationToken cancellationToken);
    [ForwardsClientCallsAttribute]
public virtual Response`1<RedisLinkedServerWithPropertyResource> GetRedisLinkedServerWithProperty(string linkedServerName, CancellationToken cancellationToken);
    public virtual RedisPrivateEndpointConnectionCollection GetRedisPrivateEndpointConnections();
    [AsyncStateMachineAttribute("Azure.ResourceManager.Redis.RedisResource/<GetRedisPrivateEndpointConnectionAsync>d__28")]
[ForwardsClientCallsAttribute]
public virtual Task`1<Response`1<RedisPrivateEndpointConnectionResource>> GetRedisPrivateEndpointConnectionAsync(string privateEndpointConnectionName, CancellationToken cancellationToken);
    [ForwardsClientCallsAttribute]
public virtual Response`1<RedisPrivateEndpointConnectionResource> GetRedisPrivateEndpointConnection(string privateEndpointConnectionName, CancellationToken cancellationToken);
    public virtual RedisCacheAccessPolicyCollection GetRedisCacheAccessPolicies();
    [AsyncStateMachineAttribute("Azure.ResourceManager.Redis.RedisResource/<GetRedisCacheAccessPolicyAsync>d__31")]
[ForwardsClientCallsAttribute]
public virtual Task`1<Response`1<RedisCacheAccessPolicyResource>> GetRedisCacheAccessPolicyAsync(string accessPolicyName, CancellationToken cancellationToken);
    [ForwardsClientCallsAttribute]
public virtual Response`1<RedisCacheAccessPolicyResource> GetRedisCacheAccessPolicy(string accessPolicyName, CancellationToken cancellationToken);
    public virtual RedisCacheAccessPolicyAssignmentCollection GetRedisCacheAccessPolicyAssignments();
    [AsyncStateMachineAttribute("Azure.ResourceManager.Redis.RedisResource/<GetRedisCacheAccessPolicyAssignmentAsync>d__34")]
[ForwardsClientCallsAttribute]
public virtual Task`1<Response`1<RedisCacheAccessPolicyAssignmentResource>> GetRedisCacheAccessPolicyAssignmentAsync(string accessPolicyAssignmentName, CancellationToken cancellationToken);
    [ForwardsClientCallsAttribute]
public virtual Response`1<RedisCacheAccessPolicyAssignmentResource> GetRedisCacheAccessPolicyAssignment(string accessPolicyAssignmentName, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.ResourceManager.Redis.RedisResource/<GetAsync>d__36")]
public virtual Task`1<Response`1<RedisResource>> GetAsync(CancellationToken cancellationToken);
    public virtual Response`1<RedisResource> Get(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.ResourceManager.Redis.RedisResource/<DeleteAsync>d__38")]
public virtual Task`1<ArmOperation> DeleteAsync(WaitUntil waitUntil, CancellationToken cancellationToken);
    public virtual ArmOperation Delete(WaitUntil waitUntil, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.ResourceManager.Redis.RedisResource/<UpdateAsync>d__40")]
public virtual Task`1<ArmOperation`1<RedisResource>> UpdateAsync(WaitUntil waitUntil, RedisPatch patch, CancellationToken cancellationToken);
    public virtual ArmOperation`1<RedisResource> Update(WaitUntil waitUntil, RedisPatch patch, CancellationToken cancellationToken);
    public virtual AsyncPageable`1<RedisUpgradeNotification> GetUpgradeNotificationsAsync(double history, CancellationToken cancellationToken);
    public virtual Pageable`1<RedisUpgradeNotification> GetUpgradeNotifications(double history, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.ResourceManager.Redis.RedisResource/<GetKeysAsync>d__44")]
public virtual Task`1<Response`1<RedisAccessKeys>> GetKeysAsync(CancellationToken cancellationToken);
    public virtual Response`1<RedisAccessKeys> GetKeys(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.ResourceManager.Redis.RedisResource/<RegenerateKeyAsync>d__46")]
public virtual Task`1<Response`1<RedisAccessKeys>> RegenerateKeyAsync(RedisRegenerateKeyContent content, CancellationToken cancellationToken);
    public virtual Response`1<RedisAccessKeys> RegenerateKey(RedisRegenerateKeyContent content, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.ResourceManager.Redis.RedisResource/<ForceRebootAsync>d__48")]
public virtual Task`1<Response`1<RedisForceRebootResult>> ForceRebootAsync(RedisRebootContent content, CancellationToken cancellationToken);
    public virtual Response`1<RedisForceRebootResult> ForceReboot(RedisRebootContent content, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.ResourceManager.Redis.RedisResource/<ImportDataAsync>d__50")]
public virtual Task`1<ArmOperation> ImportDataAsync(WaitUntil waitUntil, ImportRdbContent content, CancellationToken cancellationToken);
    public virtual ArmOperation ImportData(WaitUntil waitUntil, ImportRdbContent content, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.ResourceManager.Redis.RedisResource/<ExportDataAsync>d__52")]
public virtual Task`1<ArmOperation> ExportDataAsync(WaitUntil waitUntil, ExportRdbContent content, CancellationToken cancellationToken);
    public virtual ArmOperation ExportData(WaitUntil waitUntil, ExportRdbContent content, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.ResourceManager.Redis.RedisResource/<FlushCacheAsync>d__54")]
public virtual Task`1<ArmOperation`1<OperationStatusResult>> FlushCacheAsync(WaitUntil waitUntil, CancellationToken cancellationToken);
    public virtual ArmOperation`1<OperationStatusResult> FlushCache(WaitUntil waitUntil, CancellationToken cancellationToken);
    public virtual AsyncPageable`1<RedisPrivateLinkResource> GetPrivateLinkResourcesByRedisCacheAsync(CancellationToken cancellationToken);
    public virtual Pageable`1<RedisPrivateLinkResource> GetPrivateLinkResourcesByRedisCache(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.ResourceManager.Redis.RedisResource/<AddTagAsync>d__58")]
public virtual Task`1<Response`1<RedisResource>> AddTagAsync(string key, string value, CancellationToken cancellationToken);
    public virtual Response`1<RedisResource> AddTag(string key, string value, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.ResourceManager.Redis.RedisResource/<SetTagsAsync>d__60")]
public virtual Task`1<Response`1<RedisResource>> SetTagsAsync(IDictionary`2<string, string> tags, CancellationToken cancellationToken);
    public virtual Response`1<RedisResource> SetTags(IDictionary`2<string, string> tags, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Azure.ResourceManager.Redis.RedisResource/<RemoveTagAsync>d__62")]
public virtual Task`1<Response`1<RedisResource>> RemoveTagAsync(string key, CancellationToken cancellationToken);
    public virtual Response`1<RedisResource> RemoveTag(string key, CancellationToken cancellationToken);
    private sealed virtual override void System.ClientModel.Primitives.IJsonModel<Azure.ResourceManager.Redis.RedisData>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options);
    private sealed virtual override RedisData System.ClientModel.Primitives.IJsonModel<Azure.ResourceManager.Redis.RedisData>.Create(Utf8JsonReader& reader, ModelReaderWriterOptions options);
    private sealed virtual override BinaryData System.ClientModel.Primitives.IPersistableModel<Azure.ResourceManager.Redis.RedisData>.Write(ModelReaderWriterOptions options);
    private sealed virtual override RedisData System.ClientModel.Primitives.IPersistableModel<Azure.ResourceManager.Redis.RedisData>.Create(BinaryData data, ModelReaderWriterOptions options);
    private sealed virtual override string System.ClientModel.Primitives.IPersistableModel<Azure.ResourceManager.Redis.RedisData>.GetFormatFromOptions(ModelReaderWriterOptions options);
    [CompilerGeneratedAttribute]
private RedisFirewallRuleCollection <GetRedisFirewallRules>b__18_0(ArmClient client);
    [CompilerGeneratedAttribute]
private RedisPatchScheduleCollection <GetRedisPatchSchedules>b__21_0(ArmClient client);
    [CompilerGeneratedAttribute]
private RedisLinkedServerWithPropertyCollection <GetRedisLinkedServerWithProperties>b__24_0(ArmClient client);
    [CompilerGeneratedAttribute]
private RedisPrivateEndpointConnectionCollection <GetRedisPrivateEndpointConnections>b__27_0(ArmClient client);
    [CompilerGeneratedAttribute]
private RedisCacheAccessPolicyCollection <GetRedisCacheAccessPolicies>b__30_0(ArmClient client);
    [CompilerGeneratedAttribute]
private RedisCacheAccessPolicyAssignmentCollection <GetRedisCacheAccessPolicyAssignments>b__33_0(ArmClient client);
    [CompilerGeneratedAttribute]
private HttpMessage <GetPrivateLinkResourcesByRedisCacheAsync>g__FirstPageRequest|56_0(Nullable`1<int> pageSizeHint);
    [CompilerGeneratedAttribute]
private HttpMessage <GetPrivateLinkResourcesByRedisCache>g__FirstPageRequest|57_0(Nullable`1<int> pageSizeHint);
}
internal class Azure.ResourceManager.Redis.RedisRestOperations : object {
    private TelemetryDetails _userAgent;
    private HttpPipeline _pipeline;
    private Uri _endpoint;
    private string _apiVersion;
    public RedisRestOperations(HttpPipeline pipeline, string applicationId, Uri endpoint, string apiVersion);
    internal RequestUriBuilder CreateCheckNameAvailabilityRequestUri(string subscriptionId, RedisNameAvailabilityContent content);
    internal HttpMessage CreateCheckNameAvailabilityRequest(string subscriptionId, RedisNameAvailabilityContent content);
    [AsyncStateMachineAttribute("Azure.ResourceManager.Redis.RedisRestOperations/<CheckNameAvailabilityAsync>d__7")]
public Task`1<Response> CheckNameAvailabilityAsync(string subscriptionId, RedisNameAvailabilityContent content, CancellationToken cancellationToken);
    public Response CheckNameAvailability(string subscriptionId, RedisNameAvailabilityContent content, CancellationToken cancellationToken);
    internal RequestUriBuilder CreateListUpgradeNotificationsRequestUri(string subscriptionId, string resourceGroupName, string name, double history);
    internal HttpMessage CreateListUpgradeNotificationsRequest(string subscriptionId, string resourceGroupName, string name, double history);
    [AsyncStateMachineAttribute("Azure.ResourceManager.Redis.RedisRestOperations/<ListUpgradeNotificationsAsync>d__11")]
public Task`1<Response`1<RedisUpgradeNotificationListResponse>> ListUpgradeNotificationsAsync(string subscriptionId, string resourceGroupName, string name, double history, CancellationToken cancellationToken);
    public Response`1<RedisUpgradeNotificationListResponse> ListUpgradeNotifications(string subscriptionId, string resourceGroupName, string name, double history, CancellationToken cancellationToken);
    internal RequestUriBuilder CreateCreateRequestUri(string subscriptionId, string resourceGroupName, string name, RedisCreateOrUpdateContent content);
    internal HttpMessage CreateCreateRequest(string subscriptionId, string resourceGroupName, string name, RedisCreateOrUpdateContent content);
    [AsyncStateMachineAttribute("Azure.ResourceManager.Redis.RedisRestOperations/<CreateAsync>d__15")]
public Task`1<Response> CreateAsync(string subscriptionId, string resourceGroupName, string name, RedisCreateOrUpdateContent content, CancellationToken cancellationToken);
    public Response Create(string subscriptionId, string resourceGroupName, string name, RedisCreateOrUpdateContent content, CancellationToken cancellationToken);
    internal RequestUriBuilder CreateUpdateRequestUri(string subscriptionId, string resourceGroupName, string name, RedisPatch patch);
    internal HttpMessage CreateUpdateRequest(string subscriptionId, string resourceGroupName, string name, RedisPatch patch);
    [AsyncStateMachineAttribute("Azure.ResourceManager.Redis.RedisRestOperations/<UpdateAsync>d__19")]
public Task`1<Response> UpdateAsync(string subscriptionId, string resourceGroupName, string name, RedisPatch patch, CancellationToken cancellationToken);
    public Response Update(string subscriptionId, string resourceGroupName, string name, RedisPatch patch, CancellationToken cancellationToken);
    internal RequestUriBuilder CreateDeleteRequestUri(string subscriptionId, string resourceGroupName, string name);
    internal HttpMessage CreateDeleteRequest(string subscriptionId, string resourceGroupName, string name);
    [AsyncStateMachineAttribute("Azure.ResourceManager.Redis.RedisRestOperations/<DeleteAsync>d__23")]
public Task`1<Response> DeleteAsync(string subscriptionId, string resourceGroupName, string name, CancellationToken cancellationToken);
    public Response Delete(string subscriptionId, string resourceGroupName, string name, CancellationToken cancellationToken);
    internal RequestUriBuilder CreateGetRequestUri(string subscriptionId, string resourceGroupName, string name);
    internal HttpMessage CreateGetRequest(string subscriptionId, string resourceGroupName, string name);
    [AsyncStateMachineAttribute("Azure.ResourceManager.Redis.RedisRestOperations/<GetAsync>d__27")]
public Task`1<Response`1<RedisData>> GetAsync(string subscriptionId, string resourceGroupName, string name, CancellationToken cancellationToken);
    public Response`1<RedisData> Get(string subscriptionId, string resourceGroupName, string name, CancellationToken cancellationToken);
    internal RequestUriBuilder CreateListByResourceGroupRequestUri(string subscriptionId, string resourceGroupName);
    internal HttpMessage CreateListByResourceGroupRequest(string subscriptionId, string resourceGroupName);
    [AsyncStateMachineAttribute("Azure.ResourceManager.Redis.RedisRestOperations/<ListByResourceGroupAsync>d__31")]
public Task`1<Response`1<RedisListResult>> ListByResourceGroupAsync(string subscriptionId, string resourceGroupName, CancellationToken cancellationToken);
    public Response`1<RedisListResult> ListByResourceGroup(string subscriptionId, string resourceGroupName, CancellationToken cancellationToken);
    internal RequestUriBuilder CreateListBySubscriptionRequestUri(string subscriptionId);
    internal HttpMessage CreateListBySubscriptionRequest(string subscriptionId);
    [AsyncStateMachineAttribute("Azure.ResourceManager.Redis.RedisRestOperations/<ListBySubscriptionAsync>d__35")]
public Task`1<Response`1<RedisListResult>> ListBySubscriptionAsync(string subscriptionId, CancellationToken cancellationToken);
    public Response`1<RedisListResult> ListBySubscription(string subscriptionId, CancellationToken cancellationToken);
    internal RequestUriBuilder CreateListKeysRequestUri(string subscriptionId, string resourceGroupName, string name);
    internal HttpMessage CreateListKeysRequest(string subscriptionId, string resourceGroupName, string name);
    [AsyncStateMachineAttribute("Azure.ResourceManager.Redis.RedisRestOperations/<ListKeysAsync>d__39")]
public Task`1<Response`1<RedisAccessKeys>> ListKeysAsync(string subscriptionId, string resourceGroupName, string name, CancellationToken cancellationToken);
    public Response`1<RedisAccessKeys> ListKeys(string subscriptionId, string resourceGroupName, string name, CancellationToken cancellationToken);
    internal RequestUriBuilder CreateRegenerateKeyRequestUri(string subscriptionId, string resourceGroupName, string name, RedisRegenerateKeyContent content);
    internal HttpMessage CreateRegenerateKeyRequest(string subscriptionId, string resourceGroupName, string name, RedisRegenerateKeyContent content);
    [AsyncStateMachineAttribute("Azure.ResourceManager.Redis.RedisRestOperations/<RegenerateKeyAsync>d__43")]
public Task`1<Response`1<RedisAccessKeys>> RegenerateKeyAsync(string subscriptionId, string resourceGroupName, string name, RedisRegenerateKeyContent content, CancellationToken cancellationToken);
    public Response`1<RedisAccessKeys> RegenerateKey(string subscriptionId, string resourceGroupName, string name, RedisRegenerateKeyContent content, CancellationToken cancellationToken);
    internal RequestUriBuilder CreateForceRebootRequestUri(string subscriptionId, string resourceGroupName, string name, RedisRebootContent content);
    internal HttpMessage CreateForceRebootRequest(string subscriptionId, string resourceGroupName, string name, RedisRebootContent content);
    [AsyncStateMachineAttribute("Azure.ResourceManager.Redis.RedisRestOperations/<ForceRebootAsync>d__47")]
public Task`1<Response`1<RedisForceRebootResult>> ForceRebootAsync(string subscriptionId, string resourceGroupName, string name, RedisRebootContent content, CancellationToken cancellationToken);
    public Response`1<RedisForceRebootResult> ForceReboot(string subscriptionId, string resourceGroupName, string name, RedisRebootContent content, CancellationToken cancellationToken);
    internal RequestUriBuilder CreateImportDataRequestUri(string subscriptionId, string resourceGroupName, string name, ImportRdbContent content);
    internal HttpMessage CreateImportDataRequest(string subscriptionId, string resourceGroupName, string name, ImportRdbContent content);
    [AsyncStateMachineAttribute("Azure.ResourceManager.Redis.RedisRestOperations/<ImportDataAsync>d__51")]
public Task`1<Response> ImportDataAsync(string subscriptionId, string resourceGroupName, string name, ImportRdbContent content, CancellationToken cancellationToken);
    public Response ImportData(string subscriptionId, string resourceGroupName, string name, ImportRdbContent content, CancellationToken cancellationToken);
    internal RequestUriBuilder CreateExportDataRequestUri(string subscriptionId, string resourceGroupName, string name, ExportRdbContent content);
    internal HttpMessage CreateExportDataRequest(string subscriptionId, string resourceGroupName, string name, ExportRdbContent content);
    [AsyncStateMachineAttribute("Azure.ResourceManager.Redis.RedisRestOperations/<ExportDataAsync>d__55")]
public Task`1<Response> ExportDataAsync(string subscriptionId, string resourceGroupName, string name, ExportRdbContent content, CancellationToken cancellationToken);
    public Response ExportData(string subscriptionId, string resourceGroupName, string name, ExportRdbContent content, CancellationToken cancellationToken);
    internal RequestUriBuilder CreateFlushCacheRequestUri(string subscriptionId, string resourceGroupName, string cacheName);
    internal HttpMessage CreateFlushCacheRequest(string subscriptionId, string resourceGroupName, string cacheName);
    [AsyncStateMachineAttribute("Azure.ResourceManager.Redis.RedisRestOperations/<FlushCacheAsync>d__59")]
public Task`1<Response> FlushCacheAsync(string subscriptionId, string resourceGroupName, string cacheName, CancellationToken cancellationToken);
    public Response FlushCache(string subscriptionId, string resourceGroupName, string cacheName, CancellationToken cancellationToken);
    internal RequestUriBuilder CreateListUpgradeNotificationsNextPageRequestUri(string nextLink, string subscriptionId, string resourceGroupName, string name, double history);
    internal HttpMessage CreateListUpgradeNotificationsNextPageRequest(string nextLink, string subscriptionId, string resourceGroupName, string name, double history);
    [AsyncStateMachineAttribute("Azure.ResourceManager.Redis.RedisRestOperations/<ListUpgradeNotificationsNextPageAsync>d__63")]
public Task`1<Response`1<RedisUpgradeNotificationListResponse>> ListUpgradeNotificationsNextPageAsync(string nextLink, string subscriptionId, string resourceGroupName, string name, double history, CancellationToken cancellationToken);
    public Response`1<RedisUpgradeNotificationListResponse> ListUpgradeNotificationsNextPage(string nextLink, string subscriptionId, string resourceGroupName, string name, double history, CancellationToken cancellationToken);
    internal RequestUriBuilder CreateListByResourceGroupNextPageRequestUri(string nextLink, string subscriptionId, string resourceGroupName);
    internal HttpMessage CreateListByResourceGroupNextPageRequest(string nextLink, string subscriptionId, string resourceGroupName);
    [AsyncStateMachineAttribute("Azure.ResourceManager.Redis.RedisRestOperations/<ListByResourceGroupNextPageAsync>d__67")]
public Task`1<Response`1<RedisListResult>> ListByResourceGroupNextPageAsync(string nextLink, string subscriptionId, string resourceGroupName, CancellationToken cancellationToken);
    public Response`1<RedisListResult> ListByResourceGroupNextPage(string nextLink, string subscriptionId, string resourceGroupName, CancellationToken cancellationToken);
    internal RequestUriBuilder CreateListBySubscriptionNextPageRequestUri(string nextLink, string subscriptionId);
    internal HttpMessage CreateListBySubscriptionNextPageRequest(string nextLink, string subscriptionId);
    [AsyncStateMachineAttribute("Azure.ResourceManager.Redis.RedisRestOperations/<ListBySubscriptionNextPageAsync>d__71")]
public Task`1<Response`1<RedisListResult>> ListBySubscriptionNextPageAsync(string nextLink, string subscriptionId, CancellationToken cancellationToken);
    public Response`1<RedisListResult> ListBySubscriptionNextPage(string nextLink, string subscriptionId, CancellationToken cancellationToken);
}
internal class Azure.ResourceManager.Redis.Utf8JsonRequestContent : RequestContent {
    private MemoryStream _stream;
    private RequestContent _content;
    [CompilerGeneratedAttribute]
private Utf8JsonWriter <JsonWriter>k__BackingField;
    public Utf8JsonWriter JsonWriter { get; }
    [CompilerGeneratedAttribute]
public Utf8JsonWriter get_JsonWriter();
    [AsyncStateMachineAttribute("Azure.ResourceManager.Redis.Utf8JsonRequestContent/<WriteToAsync>d__6")]
public virtual Task WriteToAsync(Stream stream, CancellationToken cancellationToken);
    public virtual void WriteTo(Stream stream, CancellationToken cancellationToken);
    public virtual bool TryComputeLength(Int64& length);
    public virtual void Dispose();
}
[AttributeUsageAttribute("128")]
internal class Azure.ResourceManager.Redis.WirePathAttribute : Attribute {
    private string _wirePath;
    public WirePathAttribute(string wirePath);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Azure.ResourceManager.SharedExtensions : object {
    [ExtensionAttribute]
public static string SubstringAfterProviderNamespace(ResourceIdentifier resourceId);
    [ExtensionAttribute]
public static IDictionary`2<string, string> ReplaceWith(IDictionary`2<string, string> dest, IDictionary`2<string, string> src);
    [AsyncStateMachineAttribute("Azure.ResourceManager.SharedExtensions/<FirstOrDefaultAsync>d__2`1")]
[ExtensionAttribute]
public static Task`1<TSource> FirstOrDefaultAsync(AsyncPageable`1<TSource> source, Func`2<TSource, bool> predicate, CancellationToken token);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[AttributeUsageAttribute("28108")]
internal class System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembersAttribute : Attribute {
    [CompilerGeneratedAttribute]
private DynamicallyAccessedMemberTypes <MemberTypes>k__BackingField;
    public DynamicallyAccessedMemberTypes MemberTypes { get; }
    public DynamicallyAccessedMembersAttribute(DynamicallyAccessedMemberTypes memberTypes);
    [CompilerGeneratedAttribute]
public DynamicallyAccessedMemberTypes get_MemberTypes();
}
[FlagsAttribute]
internal enum System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes : Enum {
    public int value__;
    public static DynamicallyAccessedMemberTypes None;
    public static DynamicallyAccessedMemberTypes PublicParameterlessConstructor;
    public static DynamicallyAccessedMemberTypes PublicConstructors;
    public static DynamicallyAccessedMemberTypes NonPublicConstructors;
    public static DynamicallyAccessedMemberTypes PublicMethods;
    public static DynamicallyAccessedMemberTypes NonPublicMethods;
    public static DynamicallyAccessedMemberTypes PublicFields;
    public static DynamicallyAccessedMemberTypes NonPublicFields;
    public static DynamicallyAccessedMemberTypes PublicNestedTypes;
    public static DynamicallyAccessedMemberTypes NonPublicNestedTypes;
    public static DynamicallyAccessedMemberTypes PublicProperties;
    public static DynamicallyAccessedMemberTypes NonPublicProperties;
    public static DynamicallyAccessedMemberTypes PublicEvents;
    public static DynamicallyAccessedMemberTypes NonPublicEvents;
    public static DynamicallyAccessedMemberTypes Interfaces;
    public static DynamicallyAccessedMemberTypes All;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("352")]
internal class System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <MemberSignature>k__BackingField;
    [CompilerGeneratedAttribute]
private DynamicallyAccessedMemberTypes <MemberTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssemblyName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Condition>k__BackingField;
    public string MemberSignature { get; }
    public DynamicallyAccessedMemberTypes MemberTypes { get; }
    public Type Type { get; }
    public string TypeName { get; }
    public string AssemblyName { get; }
    public string Condition { get; public set; }
    [NullableContextAttribute("1")]
public DynamicDependencyAttribute(string memberSignature);
    [NullableContextAttribute("1")]
public DynamicDependencyAttribute(string memberSignature, Type type);
    [NullableContextAttribute("1")]
public DynamicDependencyAttribute(string memberSignature, string typeName, string assemblyName);
    [NullableContextAttribute("1")]
public DynamicDependencyAttribute(DynamicallyAccessedMemberTypes memberTypes, Type type);
    [NullableContextAttribute("1")]
public DynamicDependencyAttribute(DynamicallyAccessedMemberTypes memberTypes, string typeName, string assemblyName);
    [CompilerGeneratedAttribute]
public string get_MemberSignature();
    [CompilerGeneratedAttribute]
public DynamicallyAccessedMemberTypes get_MemberTypes();
    [CompilerGeneratedAttribute]
public Type get_Type();
    [CompilerGeneratedAttribute]
public string get_TypeName();
    [CompilerGeneratedAttribute]
public string get_AssemblyName();
    [CompilerGeneratedAttribute]
public string get_Condition();
    [CompilerGeneratedAttribute]
public void set_Condition(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("100")]
internal class System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    public string Message { get; }
    [NullableAttribute("2")]
public string Url { get; public set; }
    public RequiresDynamicCodeAttribute(string message);
    [CompilerGeneratedAttribute]
public string get_Message();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Url();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Url(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("100")]
internal class System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    public string Message { get; }
    [NullableAttribute("2")]
public string Url { get; public set; }
    public RequiresUnreferencedCodeAttribute(string message);
    [CompilerGeneratedAttribute]
public string get_Message();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Url();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Url(string value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("32767")]
internal class System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute : Attribute {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <Category>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <CheckId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Scope>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Target>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MessageId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Justification>k__BackingField;
    [NullableAttribute("1")]
public string Category { get; }
    [NullableAttribute("1")]
public string CheckId { get; }
    public string Scope { get; public set; }
    public string Target { get; public set; }
    public string MessageId { get; public set; }
    public string Justification { get; public set; }
    [NullableContextAttribute("1")]
public UnconditionalSuppressMessageAttribute(string category, string checkId);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_Category();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_CheckId();
    [CompilerGeneratedAttribute]
public string get_Scope();
    [CompilerGeneratedAttribute]
public void set_Scope(string value);
    [CompilerGeneratedAttribute]
public string get_Target();
    [CompilerGeneratedAttribute]
public void set_Target(string value);
    [CompilerGeneratedAttribute]
public string get_MessageId();
    [CompilerGeneratedAttribute]
public void set_MessageId(string value);
    [CompilerGeneratedAttribute]
public string get_Justification();
    [CompilerGeneratedAttribute]
public void set_Justification(string value);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
