internal static class AzureSign.Core.AlgorithmTranslator : object {
    public static UInt32 HashAlgorithmToAlgId(HashAlgorithmName hashAlgorithmName);
    public static ReadOnlySpan`1<byte> HashAlgorithmToOidAsciiTerminated(HashAlgorithmName hashAlgorithmName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class AzureSign.Core.AuthenticodeKeyVaultSigner : object {
    private AsymmetricAlgorithm _signingAlgorithm;
    private X509Certificate2 _signingCertificate;
    private HashAlgorithmName _fileDigestAlgorithm;
    private TimeStampConfiguration _timeStampConfiguration;
    private MemoryCertificateStore _certificateStore;
    private X509Chain _chain;
    private SignCallback _signCallback;
    public AuthenticodeKeyVaultSigner(AsymmetricAlgorithm signingAlgorithm, X509Certificate2 signingCertificate, HashAlgorithmName fileDigestAlgorithm, TimeStampConfiguration timeStampConfiguration, X509Certificate2Collection additionalCertificates);
    [NullableContextAttribute("0")]
public int SignFile(ReadOnlySpan`1<char> path, ReadOnlySpan`1<char> description, ReadOnlySpan`1<char> descriptionUrl, Nullable`1<bool> pageHashing, ILogger logger, bool appendSignature);
    public sealed virtual void Dispose();
    private int SignCallback(IntPtr pCertContext, IntPtr pvExtra, UInt32 algId, Byte[] pDigestToSign, UInt32 dwDigestToSign, CRYPTOAPI_BLOB& blob);
    [NullableContextAttribute("0")]
private static void FillAppxExtension(APPX_SIP_CLIENT_DATA& clientData, SignerSignEx3Flags flags, SignerSignTimeStampFlags timestampFlags, SIGNER_SUBJECT_INFO* signerSubjectInfo, SIGNER_CERT* signerCert, SIGNER_SIGNATURE_INFO* signatureInfo, IntPtr* signerContext, Char* timestampUrl, Byte* timestampOid, SIGN_INFO* signInfo);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
internal static Char[] <SignFile>g__NullTerminate|8_0(ReadOnlySpan`1<char> str);
}
internal class AzureSign.Core.Interop.APPX_SIP_CLIENT_DATA : ValueType {
    public SIGNER_SIGN_EX3_PARAMS* pSignerParams;
    public IntPtr pAppxSipState;
}
[FlagsAttribute]
internal enum AzureSign.Core.Interop.CertCloreStoreFlags : Enum {
    public UInt32 value__;
    public static CertCloreStoreFlags NONE;
    public static CertCloreStoreFlags CERT_CLOSE_STORE_FORCE_FLAG;
    public static CertCloreStoreFlags CERT_CLOSE_STORE_CHECK_FLAG;
}
internal enum AzureSign.Core.Interop.CertEncodingType : Enum {
    public UInt32 value__;
    public static CertEncodingType NONE;
    public static CertEncodingType X509_ASN_ENCODING;
    public static CertEncodingType PKCS_7_ASN_ENCODING;
}
[FlagsAttribute]
internal enum AzureSign.Core.Interop.CertOpenStoreFlags : Enum {
    public UInt32 value__;
    public static CertOpenStoreFlags NONE;
    public static CertOpenStoreFlags CERT_STORE_NO_CRYPT_RELEASE_FLAG;
    public static CertOpenStoreFlags CERT_STORE_SET_LOCALIZED_NAME_FLAG;
    public static CertOpenStoreFlags CERT_STORE_DEFER_CLOSE_UNTIL_LAST_FREE_FLAG;
    public static CertOpenStoreFlags CERT_STORE_DELETE_FLAG;
    public static CertOpenStoreFlags CERT_STORE_UNSAFE_PHYSICAL_FLAG;
    public static CertOpenStoreFlags CERT_STORE_SHARE_STORE_FLAG;
    public static CertOpenStoreFlags CERT_STORE_SHARE_CONTEXT_FLAG;
    public static CertOpenStoreFlags CERT_STORE_MANIFOLD_FLAG;
    public static CertOpenStoreFlags CERT_STORE_ENUM_ARCHIVED_FLAG;
    public static CertOpenStoreFlags CERT_STORE_UPDATE_KEYID_FLAG;
    public static CertOpenStoreFlags CERT_STORE_BACKUP_RESTORE_FLAG;
    public static CertOpenStoreFlags CERT_STORE_READONLY_FLAG;
    public static CertOpenStoreFlags CERT_STORE_OPEN_EXISTING_FLAG;
    public static CertOpenStoreFlags CERT_STORE_CREATE_NEW_FLAG;
    public static CertOpenStoreFlags CERT_STORE_MAXIMUM_ALLOWED_FLAG;
}
internal static class AzureSign.Core.Interop.crypt32 : object {
    public static bool CertCloseStore(IntPtr hCertStore, CertCloreStoreFlags dwFlags);
    [NullableContextAttribute("1")]
public static IntPtr CertOpenStore(string lpszStoreProvider, CertEncodingType CertEncodingType, IntPtr hCryptProv, CertOpenStoreFlags dwFlags, IntPtr pvPara);
}
internal class AzureSign.Core.Interop.CRYPTOAPI_BLOB : ValueType {
    public UInt32 cbData;
    public IntPtr pbData;
}
internal static class AzureSign.Core.Interop.mssign32 : object {
    public static int SignerSignEx3(SignerSignEx3Flags dwFlags, SIGNER_SUBJECT_INFO* pSubjectInfo, SIGNER_CERT* pSignerCert, SIGNER_SIGNATURE_INFO* pSignatureInfo, IntPtr pProviderInfo, SignerSignTimeStampFlags dwTimestampFlags, Byte* pszTimestampAlgorithmOid, Char* pwszHttpTimeStamp, IntPtr psRequest, Void* pSipData, IntPtr* ppSignerContext, IntPtr pCryptoPolicy, SIGN_INFO* pSignInfo, IntPtr pReserved);
    public static int SignerFreeSignerContext(IntPtr pSignerContext);
}
internal class AzureSign.Core.Interop.SIGN_INFO : ValueType {
    public UInt32 cbSize;
    public IntPtr callback;
    public IntPtr pvOpaque;
    public SIGN_INFO(IntPtr callback);
}
[UnmanagedFunctionPointerAttribute("1")]
internal class AzureSign.Core.Interop.SignCallback : MulticastDelegate {
    public SignCallback(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual int Invoke(IntPtr pCertContext, IntPtr pvExtra, UInt32 algId, Byte[] pDigestToSign, UInt32 dwDigestToSign, CRYPTOAPI_BLOB& blob);
    public virtual IAsyncResult BeginInvoke(IntPtr pCertContext, IntPtr pvExtra, UInt32 algId, Byte[] pDigestToSign, UInt32 dwDigestToSign, CRYPTOAPI_BLOB& blob, AsyncCallback callback, object object);
    public virtual int EndInvoke(CRYPTOAPI_BLOB& blob, IAsyncResult result);
}
internal class AzureSign.Core.Interop.SIGNER_ATTR_AUTHCODE : ValueType {
    public UInt32 cbSize;
    public UInt32 fCommercial;
    public UInt32 fIndividual;
    public Char* pwszName;
    public Char* pwszInfo;
    public SIGNER_ATTR_AUTHCODE(Char* pwszName, Char* pwszInfo);
}
internal class AzureSign.Core.Interop.SIGNER_CERT : ValueType {
    public UInt32 cbSize;
    public SignerCertChoice dwCertChoice;
    public SIGNER_CERT_UNION union;
    public IntPtr hwnd;
    public SIGNER_CERT(SignerCertChoice dwCertChoice, SIGNER_CERT_UNION union);
}
internal class AzureSign.Core.Interop.SIGNER_CERT_STORE_INFO : ValueType {
    public UInt32 cbSize;
    public IntPtr pSigningCert;
    public SignerCertStoreInfoFlags dwCertPolicy;
    public IntPtr hCertStore;
    public SIGNER_CERT_STORE_INFO(IntPtr pSigningCert, SignerCertStoreInfoFlags dwCertPolicy, IntPtr hCertStore);
}
internal class AzureSign.Core.Interop.SIGNER_CERT_UNION : ValueType {
    public SIGNER_CERT_STORE_INFO* pSpcChainInfo;
    public SIGNER_CERT_UNION(SIGNER_CERT_STORE_INFO* certStoreInfo);
}
internal class AzureSign.Core.Interop.SIGNER_FILE_INFO : ValueType {
    public UInt32 cbSize;
    public Char* pwszFileName;
    public IntPtr hFile;
    public SIGNER_FILE_INFO(Char* pwszFileName, IntPtr hFile);
}
internal class AzureSign.Core.Interop.SIGNER_SIGN_EX3_PARAMS : ValueType {
    public SignerSignEx3Flags dwFlags;
    public SIGNER_SUBJECT_INFO* pSubjectInfo;
    public SIGNER_CERT* pSignerCert;
    public SIGNER_SIGNATURE_INFO* pSignatureInfo;
    public IntPtr pProviderInfo;
    public SignerSignTimeStampFlags dwTimestampFlags;
    public Byte* pszTimestampAlgorithmOid;
    public Char* pwszHttpTimeStamp;
    public IntPtr psRequest;
    public SIGN_INFO* pSignCallBack;
    public IntPtr* ppSignerContext;
    public IntPtr pCryptoPolicy;
    public IntPtr pReserved;
}
internal class AzureSign.Core.Interop.SIGNER_SIGNATURE_INFO : ValueType {
    public UInt32 cbSize;
    public UInt32 algidHash;
    public SignerSignatureInfoAttrChoice dwAttrChoice;
    public SIGNER_SIGNATURE_INFO_UNION attrAuthUnion;
    public IntPtr psAuthenticated;
    public IntPtr psUnauthenticated;
    public SIGNER_SIGNATURE_INFO(UInt32 algidHash, SignerSignatureInfoAttrChoice dwAttrChoice, SIGNER_SIGNATURE_INFO_UNION attrAuthUnion, IntPtr psAuthenticated, IntPtr psUnauthenticated);
}
internal class AzureSign.Core.Interop.SIGNER_SIGNATURE_INFO_UNION : ValueType {
    public SIGNER_ATTR_AUTHCODE* pAttrAuthcode;
    public SIGNER_SIGNATURE_INFO_UNION(SIGNER_ATTR_AUTHCODE* pAttrAuthcode);
}
internal class AzureSign.Core.Interop.SIGNER_SUBJECT_INFO : ValueType {
    public UInt32 cbSize;
    public UInt32* pdwIndex;
    public SignerSubjectInfoUnionChoice dwSubjectChoice;
    public SIGNER_SUBJECT_INFO_UNION unionInfo;
    public SIGNER_SUBJECT_INFO(UInt32* pdwIndex, SignerSubjectInfoUnionChoice dwSubjectChoice, SIGNER_SUBJECT_INFO_UNION unionInfo);
}
internal class AzureSign.Core.Interop.SIGNER_SUBJECT_INFO_UNION : ValueType {
    public SIGNER_FILE_INFO* file;
    public SIGNER_SUBJECT_INFO_UNION(SIGNER_FILE_INFO* file);
}
internal enum AzureSign.Core.Interop.SignerCertChoice : Enum {
    public UInt32 value__;
    public static SignerCertChoice SIGNER_CERT_SPC_FILE;
    public static SignerCertChoice SIGNER_CERT_STORE;
    public static SignerCertChoice SIGNER_CERT_SPC_CHAIN;
}
[FlagsAttribute]
internal enum AzureSign.Core.Interop.SignerCertStoreInfoFlags : Enum {
    public int value__;
    public static SignerCertStoreInfoFlags SIGNER_CERT_POLICY_CHAIN;
    public static SignerCertStoreInfoFlags SIGNER_CERT_POLICY_CHAIN_NO_ROOT;
    public static SignerCertStoreInfoFlags SIGNER_CERT_POLICY_STORE;
}
internal enum AzureSign.Core.Interop.SignerSignatureInfoAttrChoice : Enum {
    public UInt32 value__;
    public static SignerSignatureInfoAttrChoice SIGNER_AUTHCODE_ATTR;
    public static SignerSignatureInfoAttrChoice SIGNER_NO_ATTR;
}
[FlagsAttribute]
internal enum AzureSign.Core.Interop.SignerSignEx3Flags : Enum {
    public UInt32 value__;
    public static SignerSignEx3Flags NONE;
    public static SignerSignEx3Flags SPC_EXC_PE_PAGE_HASHES_FLAG;
    public static SignerSignEx3Flags SPC_INC_PE_IMPORT_ADDR_TABLE_FLAG;
    public static SignerSignEx3Flags SPC_INC_PE_DEBUG_INFO_FLAG;
    public static SignerSignEx3Flags SPC_INC_PE_RESOURCES_FLAG;
    public static SignerSignEx3Flags SPC_INC_PE_PAGE_HASHES_FLAG;
    public static SignerSignEx3Flags SIGN_CALLBACK_UNDOCUMENTED;
    public static SignerSignEx3Flags SIG_APPEND;
}
internal enum AzureSign.Core.Interop.SignerSignTimeStampFlags : Enum {
    public UInt32 value__;
    public static SignerSignTimeStampFlags SIGNER_TIMESTAMP_AUTHENTICODE;
    public static SignerSignTimeStampFlags SIGNER_TIMESTAMP_RFC3161;
}
internal enum AzureSign.Core.Interop.SignerSubjectInfoUnionChoice : Enum {
    public UInt32 value__;
    public static SignerSubjectInfoUnionChoice SIGNER_SUBJECT_BLOB;
    public static SignerSubjectInfoUnionChoice SIGNER_SUBJECT_FILE;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class AzureSign.Core.MemoryCertificateStore : object {
    private IntPtr _handle;
    private X509Store _store;
    public IntPtr Handle { get; }
    public X509Certificate2Collection Certificates { get; }
    private MemoryCertificateStore(IntPtr handle);
    public static MemoryCertificateStore Create();
    public void Close();
    private sealed virtual override void System.IDisposable.Dispose();
    protected virtual override void Finalize();
    public IntPtr get_Handle();
    public void Add(X509Certificate2 certificate);
    public void Add(X509Certificate2Collection collection);
    public X509Certificate2Collection get_Certificates();
    private void Dispose(bool disposing);
    private void FreeHandle();
}
internal class AzureSign.Core.SipExtensionFactory : object {
    public static SipKind GetSipKind(ReadOnlySpan`1<char> filePath);
}
internal enum AzureSign.Core.SipKind : Enum {
    public int value__;
    public static SipKind None;
    public static SipKind Appx;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class AzureSign.Core.TimeStampConfiguration : object {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private HashAlgorithmName <DigestAlgorithm>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeStampType> <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private static TimeStampConfiguration <None>k__BackingField;
    [NullableAttribute("2")]
public string Url { get; }
    public HashAlgorithmName DigestAlgorithm { get; }
    public Nullable`1<TimeStampType> Type { get; }
    public static TimeStampConfiguration None { get; }
    public TimeStampConfiguration(string url, HashAlgorithmName digestAlgorithm, TimeStampType type);
    private static TimeStampConfiguration();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public HashAlgorithmName get_DigestAlgorithm();
    [CompilerGeneratedAttribute]
public Nullable`1<TimeStampType> get_Type();
    [CompilerGeneratedAttribute]
public static TimeStampConfiguration get_None();
}
public enum AzureSign.Core.TimeStampType : Enum {
    public int value__;
    public static TimeStampType Authenticode;
    public static TimeStampType RFC3161;
}
