[GeneratedCodeAttribute("System.Text.RegularExpressions.Generator", "8.0.10.16909")]
internal class System.Text.RegularExpressions.Generated.<RegexGenerator_g>FA50B8FCF258432F4BD930D67C58DA75C8FF385BD952D265DF48189391A450DBB__ArgumentNamePattern_1 : Regex {
    [NullableAttribute("1")]
internal static <RegexGenerator_g>FA50B8FCF258432F4BD930D67C58DA75C8FF385BD952D265DF48189391A450DBB__ArgumentNamePattern_1 Instance;
    private static <RegexGenerator_g>FA50B8FCF258432F4BD930D67C58DA75C8FF385BD952D265DF48189391A450DBB__ArgumentNamePattern_1();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[GeneratedCodeAttribute("System.Text.RegularExpressions.Generator", "8.0.10.16909")]
internal static class System.Text.RegularExpressions.Generated.<RegexGenerator_g>FA50B8FCF258432F4BD930D67C58DA75C8FF385BD952D265DF48189391A450DBB__Utilities : object {
    internal static TimeSpan s_defaultTimeout;
    internal static bool s_hasTimeout;
    private static <RegexGenerator_g>FA50B8FCF258432F4BD930D67C58DA75C8FF385BD952D265DF48189391A450DBB__Utilities();
    internal static void StackPop(Int32[] stack, Int32& pos, Int32& arg0, Int32& arg1);
    internal static void StackPush(Int32[]& stack, Int32& pos, int arg0);
    internal static void StackPush(Int32[]& stack, Int32& pos, int arg0, int arg1);
    internal static void StackPush(Int32[]& stack, Int32& pos, int arg0, int arg1, int arg2);
    [CompilerGeneratedAttribute]
internal static void <StackPush>g__WithResize|3_0(Int32[]& stack, Int32& pos, int arg0);
    [CompilerGeneratedAttribute]
internal static void <StackPush>g__WithResize|4_0(Int32[]& stack, Int32& pos, int arg0, int arg1);
    [CompilerGeneratedAttribute]
internal static void <StackPush>g__WithResize|5_0(Int32[]& stack, Int32& pos, int arg0, int arg1, int arg2);
}
[GeneratedCodeAttribute("System.Text.RegularExpressions.Generator", "8.0.10.16909")]
internal class System.Text.RegularExpressions.Generated.<RegexGenerator_g>FA50B8FCF258432F4BD930D67C58DA75C8FF385BD952D265DF48189391A450DBB__ValueOption_0 : Regex {
    [NullableAttribute("1")]
internal static <RegexGenerator_g>FA50B8FCF258432F4BD930D67C58DA75C8FF385BD952D265DF48189391A450DBB__ValueOption_0 Instance;
    private static <RegexGenerator_g>FA50B8FCF258432F4BD930D67C58DA75C8FF385BD952D265DF48189391A450DBB__ValueOption_0();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class XenoAtom.CommandLine.ArgumentSource : CommandNode {
    public string Description { get; }
    public abstract virtual String[] GetNames();
    public abstract virtual string get_Description();
    public abstract virtual bool TryGetArguments(string value, IEnumerable`1& arguments);
    public static IEnumerable`1<string> GetArgumentsFromFile(string file);
    public static IEnumerable`1<string> GetArguments(TextReader reader);
    [IteratorStateMachineAttribute("XenoAtom.CommandLine.ArgumentSource/<GetArguments>d__7")]
private static IEnumerable`1<string> GetArguments(TextReader reader, bool close);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class XenoAtom.CommandLine.Command : CommandContainer {
    private Dictionary`2<string, Command> _subCommands;
    private Dictionary`2<string, Option> _options;
    private List`1<ArgumentSource> _sources;
    private bool _hasCommandUsage;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private ReadOnlyDictionary`2<string, Option> <Options>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OptionsName>k__BackingField;
    [CompilerGeneratedAttribute]
private ReadOnlyDictionary`2<string, Command> <SubCommands>k__BackingField;
    [CompilerGeneratedAttribute]
private CommandConfig <Config>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`3<CommandRunContext, String[], ValueTask`1<int>> <Action>k__BackingField;
    public string Name { get; }
    [NullableAttribute("2")]
public string Description { get; }
    public ReadOnlyDictionary`2<string, Option> Options { get; }
    public string OptionsName { get; public set; }
    public ReadOnlyDictionary`2<string, Command> SubCommands { get; }
    public CommandConfig Config { get; internal set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`3<CommandRunContext, String[], ValueTask`1<int>> Action { get; public set; }
    [NullableContextAttribute("2")]
public Command(string name, string help, Func`1<bool> active);
    [CompilerGeneratedAttribute]
public string get_Name();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual string get_Description();
    [CompilerGeneratedAttribute]
public ReadOnlyDictionary`2<string, Option> get_Options();
    [CompilerGeneratedAttribute]
public string get_OptionsName();
    [CompilerGeneratedAttribute]
public void set_OptionsName(string value);
    [CompilerGeneratedAttribute]
public ReadOnlyDictionary`2<string, Command> get_SubCommands();
    [CompilerGeneratedAttribute]
public CommandConfig get_Config();
    [CompilerGeneratedAttribute]
internal void set_Config(CommandConfig value);
    [CompilerGeneratedAttribute]
public Func`3<CommandRunContext, String[], ValueTask`1<int>> get_Action();
    [CompilerGeneratedAttribute]
public void set_Action(Func`3<CommandRunContext, String[], ValueTask`1<int>> value);
    protected virtual void AddImpl(CommandNode node);
    protected virtual OptionContext CreateOptionContext(CommandRunContext runContext);
    protected virtual CommandRunContext CreateCommandContext(CommandRunConfig config);
    [NullableContextAttribute("0")]
[AsyncStateMachineAttribute("XenoAtom.CommandLine.Command/<RunAsync>d__32")]
public virtual ValueTask`1<int> RunAsync(IEnumerable`1<string> arguments, CommandRunConfig runConfig);
    [NullableContextAttribute("2")]
public CommandApp GetCommandApp();
    [NullableContextAttribute("2")]
public void ShowHelp(CommandRunConfig runConfig);
    public string GetFullCommandPath();
    private List`1<string> ParseOptions(CommandRunContext runContext, IEnumerable`1<string> arguments);
    private bool AddSource(ArgumentEnumerator ae, string argument);
    private static bool Unprocessed(ICollection`1<string> extra, Option def, OptionContext c, string argument);
    [GeneratedRegexAttribute("^(?<flag>--|-|/)(?<name>[^:=]+)((?<sep>[:=])(?<value>.*))?$")]
[GeneratedCodeAttribute("System.Text.RegularExpressions.Generator", "8.0.10.16909")]
private static Regex ValueOption();
    [NullableContextAttribute("2")]
private bool GetOptionParts(string argument, String& flag, String& name, String& sep, String& value);
    private bool ParseOption(string argument, OptionContext c);
    private void ParseValue(string option, OptionContext c);
    private bool ParseBool(string option, string n, OptionContext c);
    private bool ParseBundledValue(string f, string n, OptionContext c);
    private static void Invoke(OptionContext c, string name, string value, Option option);
    private void WriteUnknownCommandOrOption(CommandRunConfig runConfig, Command command, string unknownCommand);
    private void WriteCommandException(CommandRunConfig runConfig, CommandException e);
    private void WriteUnknownOptions(CommandRunConfig runConfig, Command command, List`1<string> unknownOptions);
    private string GetDefaultUsage(CommandRunConfig runConfig);
    private void ShowHelp(CommandRunConfig runConfig, Command c, string commandName);
    private void WriteDescription(TextWriter o, string value, string prefix, int firstWidth, int remWidth);
    private bool WriteOptionPrototype(TextWriter o, Option p, Int32& written);
    private static int GetNextOptionIndex(String[] names, int i);
    private static void Write(TextWriter o, Int32& n, string s);
    [GeneratedRegexAttribute("(?<=(?<!\{)\{)[^{}]*(?=\}(?!\}))")]
[GeneratedCodeAttribute("System.Text.RegularExpressions.Generator", "8.0.10.16909")]
private static Regex ArgumentNamePattern();
    private static string GetArgumentName(int index, int maxIndex, string description);
    private static string GetDescription(string description);
    private static IEnumerable`1<string> GetLines(string description, int firstWidth, int remWidth);
    private static string NormalizeCommandName(string name);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class XenoAtom.CommandLine.CommandApp : Command {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`1<string> <LicenseHeader>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`1<string> LicenseHeader { get; public set; }
    public CommandApp(CommandConfig config);
    public CommandApp(string name, string help, CommandConfig config);
    [CompilerGeneratedAttribute]
public Func`1<string> get_LicenseHeader();
    [CompilerGeneratedAttribute]
public void set_LicenseHeader(Func`1<string> value);
    [NullableContextAttribute("1")]
private static string GetDefaultAppCommand();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class XenoAtom.CommandLine.CommandConfig : object {
    public static CommandConfig Default;
    [CompilerGeneratedAttribute]
private Converter`2<string, string> <Localizer>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public Converter`2<string, string> Localizer { get; public set; }
    [CompilerGeneratedAttribute]
protected CommandConfig(CommandConfig original);
    private static CommandConfig();
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public Converter`2<string, string> get_Localizer();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Localizer(Converter`2<string, string> value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(CommandConfig left, CommandConfig right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(CommandConfig left, CommandConfig right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(CommandConfig other);
    [CompilerGeneratedAttribute]
public virtual CommandConfig <Clone>$();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class XenoAtom.CommandLine.CommandContainer : CommandNode {
    private List`1<CommandNode> _nodes;
    [CompilerGeneratedAttribute]
private ReadOnlyCollection`1<CommandNode> <Nodes>k__BackingField;
    public ReadOnlyCollection`1<CommandNode> Nodes { get; }
    [NullableContextAttribute("2")]
internal CommandContainer(Func`1<bool> active);
    [CompilerGeneratedAttribute]
public ReadOnlyCollection`1<CommandNode> get_Nodes();
    public void Add(CommandNode node);
    protected virtual void AddImpl(CommandNode node);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class XenoAtom.CommandLine.CommandException : Exception {
    public CommandException(string message);
    public CommandException(string message, Exception innerException);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class XenoAtom.CommandLine.CommandExtensions : object {
    [ExtensionAttribute]
public static TCommand Add(TCommand command, Func`3<CommandRunContext, String[], ValueTask`1<int>> action);
    [ExtensionAttribute]
public static TCommand Add(TCommand command, Func`2<String[], ValueTask`1<int>> action);
    [ExtensionAttribute]
public static TCommand Add(TCommand command, string text);
    [ExtensionAttribute]
public static TCommand Add(TCommand command, Option option);
    [ExtensionAttribute]
public static TCommand Add(TCommand command, string prototype, Action`1<string> action);
    [ExtensionAttribute]
public static TCommand Add(TCommand command, string prototype, string description, Action`1<string> action);
    [ExtensionAttribute]
public static TCommand Add(TCommand command, string prototype, string description, Action`1<string> action, bool hidden);
    [ExtensionAttribute]
public static TCommand Add(TCommand command, string prototype, Action`2<string, string> action);
    [ExtensionAttribute]
public static TCommand Add(TCommand command, string prototype, string description, Action`2<string, string> action);
    [ExtensionAttribute]
public static TCommand Add(TCommand command, string prototype, string description, Action`2<string, string> action, bool hidden);
    [ExtensionAttribute]
public static TCommand Add(TCommand command, string prototype, Action`1<T> action);
    [ExtensionAttribute]
public static TCommand Add(TCommand command, string prototype, string description, Action`1<T> action);
    [ExtensionAttribute]
public static TCommand Add(TCommand command, string prototype, ICollection`1<T> list);
    [ExtensionAttribute]
public static TCommand Add(TCommand command, string prototype, string description, ICollection`1<T> list);
    [ExtensionAttribute]
public static TCommand Add(TCommand command, string prototype, Action`2<TKey, TValue> action);
    [ExtensionAttribute]
public static TCommand Add(TCommand command, string prototype, string description, Action`2<TKey, TValue> action);
    [ExtensionAttribute]
public static TCommand Add(TCommand command, ArgumentSource source);
}
public class XenoAtom.CommandLine.CommandGroup : CommandContainer {
    [NullableContextAttribute("2")]
public CommandGroup(Func`1<bool> active);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public abstract class XenoAtom.CommandLine.CommandNode : object {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private Func`1<bool> <IsThisNodeActive>k__BackingField;
    [CompilerGeneratedAttribute]
private CommandNode <Parent>k__BackingField;
    [NullableAttribute("1")]
public Func`1<bool> IsThisNodeActive { get; }
    public CommandNode Parent { get; internal set; }
    internal CommandNode(Func`1<bool> active);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public Func`1<bool> get_IsThisNodeActive();
    public bool IsActive();
    [CompilerGeneratedAttribute]
public CommandNode get_Parent();
    [CompilerGeneratedAttribute]
internal void set_Parent(CommandNode value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class XenoAtom.CommandLine.CommandRunConfig : object {
    [CompilerGeneratedAttribute]
private int <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private int <OptionWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowLicenseOnRun>k__BackingField;
    [CompilerGeneratedAttribute]
private TextWriter <Out>k__BackingField;
    [CompilerGeneratedAttribute]
private TextWriter <Error>k__BackingField;
    internal int DescriptionFirstWidth;
    internal int DescriptionRemWidth;
    internal string CommandHelpIndentStart;
    internal string CommandHelpIndentRemaining;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public int Width { get; public set; }
    public int OptionWidth { get; public set; }
    public bool ShowLicenseOnRun { get; public set; }
    public TextWriter Out { get; public set; }
    public TextWriter Error { get; public set; }
    public CommandRunConfig(int Width, int OptionWidth);
    [CompilerGeneratedAttribute]
protected CommandRunConfig(CommandRunConfig original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public int get_Width();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Width(int value);
    [CompilerGeneratedAttribute]
public int get_OptionWidth();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_OptionWidth(int value);
    [CompilerGeneratedAttribute]
public bool get_ShowLicenseOnRun();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ShowLicenseOnRun(bool value);
    [CompilerGeneratedAttribute]
public TextWriter get_Out();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Out(TextWriter value);
    [CompilerGeneratedAttribute]
public TextWriter get_Error();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Error(TextWriter value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(CommandRunConfig left, CommandRunConfig right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(CommandRunConfig left, CommandRunConfig right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(CommandRunConfig other);
    [CompilerGeneratedAttribute]
public virtual CommandRunConfig <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(Int32& Width, Int32& OptionWidth);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class XenoAtom.CommandLine.CommandRunContext : object {
    [CompilerGeneratedAttribute]
private bool <ShouldShowLicenseOnRun>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShouldShowHelp>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShouldRunAfterParsingOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private CommandRunConfig <RunConfig>k__BackingField;
    public bool ShouldShowLicenseOnRun { get; public set; }
    public bool ShouldShowHelp { get; public set; }
    public bool ShouldRunAfterParsingOptions { get; public set; }
    public CommandRunConfig RunConfig { get; }
    public TextWriter Out { get; }
    public TextWriter Error { get; }
    internal CommandRunContext(CommandRunConfig config);
    [CompilerGeneratedAttribute]
public bool get_ShouldShowLicenseOnRun();
    [CompilerGeneratedAttribute]
public void set_ShouldShowLicenseOnRun(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShouldShowHelp();
    [CompilerGeneratedAttribute]
public void set_ShouldShowHelp(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShouldRunAfterParsingOptions();
    [CompilerGeneratedAttribute]
public void set_ShouldRunAfterParsingOptions(bool value);
    [CompilerGeneratedAttribute]
public CommandRunConfig get_RunConfig();
    public TextWriter get_Out();
    public TextWriter get_Error();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class XenoAtom.CommandLine.CommandUsage : CommandNode {
    private string _description;
    [NullableAttribute("1")]
public static string NameMarker;
    public string Description { get; }
    public CommandUsage(string description);
    public sealed virtual string get_Description();
    private string GetFullCommandPath();
}
[IsReadOnlyAttribute]
public class XenoAtom.CommandLine.EnumWrapper`1 : ValueType {
    [CompilerGeneratedAttribute]
private TEnum <Value>k__BackingField;
    public TEnum Value { get; public set; }
    [NullableAttribute("1")]
public static string Names { get; }
    public EnumWrapper`1(TEnum Value);
    [CompilerGeneratedAttribute]
public TEnum get_Value();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Value(TEnum value);
    [NullableContextAttribute("1")]
public static string get_Names();
    public static override EnumWrapper`1<TEnum> Parse(string s, IFormatProvider provider);
    [NullableContextAttribute("2")]
public static override bool TryParse(string s, IFormatProvider provider, EnumWrapper`1& result);
    public static override EnumWrapper`1<TEnum> Parse(ReadOnlySpan`1<char> s, IFormatProvider provider);
    public static override bool TryParse(ReadOnlySpan`1<char> s, IFormatProvider provider, EnumWrapper`1& result);
    public static TEnum op_Implicit(EnumWrapper`1<TEnum> wrapper);
    public static EnumWrapper`1<TEnum> op_Implicit(TEnum value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(EnumWrapper`1<TEnum> left, EnumWrapper`1<TEnum> right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(EnumWrapper`1<TEnum> left, EnumWrapper`1<TEnum> right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(EnumWrapper`1<TEnum> other);
    [CompilerGeneratedAttribute]
public void Deconstruct(TEnum& Value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class XenoAtom.CommandLine.HelpOption : Option {
    public HelpOption(string prototype, string help);
    protected virtual void OnParseComplete(OptionContext c);
}
[NullableContextAttribute("2")]
public interface XenoAtom.CommandLine.ICommandNodeDescriptor {
    public string Description { get; }
    public abstract virtual string get_Description();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class XenoAtom.CommandLine.Option : CommandNode {
    private static Char[] NameTerminator;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private String[] _separators;
    [CompilerGeneratedAttribute]
private string <Prototype>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private OptionValueType <OptionValueType>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxValueCount>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Hidden>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Names>k__BackingField;
    public string Prototype { get; }
    [NullableAttribute("2")]
public string Description { get; }
    public OptionValueType OptionValueType { get; }
    public int MaxValueCount { get; }
    public bool Hidden { get; }
    internal String[] Names { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal String[] ValueSeparators { get; }
    protected Option(string prototype, string description);
    protected Option(string prototype, string description, int maxValueCount);
    protected Option(string prototype, string description, int maxValueCount, bool hidden);
    private static Option();
    [CompilerGeneratedAttribute]
public string get_Prototype();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual string get_Description();
    [CompilerGeneratedAttribute]
public OptionValueType get_OptionValueType();
    [CompilerGeneratedAttribute]
public int get_MaxValueCount();
    [CompilerGeneratedAttribute]
public bool get_Hidden();
    [CompilerGeneratedAttribute]
internal String[] get_Names();
    internal String[] get_ValueSeparators();
    public String[] GetNames();
    public String[] GetValueSeparators();
    public void Invoke(OptionContext c);
    public virtual string ToString();
    protected abstract virtual void OnParseComplete(OptionContext c);
    protected static T Parse(string value, OptionContext c);
    private OptionValueType ParsePrototype(String[]& separators);
    private static void AddSeparators(string name, int end, ICollection`1<string> seps);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class XenoAtom.CommandLine.OptionContext : object {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Option <Option>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <OptionName>k__BackingField;
    [CompilerGeneratedAttribute]
private int <OptionIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private Command <Command>k__BackingField;
    [CompilerGeneratedAttribute]
private OptionValueCollection <OptionValues>k__BackingField;
    [CompilerGeneratedAttribute]
private CommandRunContext <CommandRunContext>k__BackingField;
    [NullableAttribute("2")]
public Option Option { get; public set; }
    [NullableAttribute("2")]
public string OptionName { get; public set; }
    public int OptionIndex { get; public set; }
    public Command Command { get; }
    public OptionValueCollection OptionValues { get; }
    public CommandRunContext CommandRunContext { get; }
    public OptionContext(CommandRunContext commandRunContext, Command command);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Option get_Option();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Option(Option value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_OptionName();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_OptionName(string value);
    [CompilerGeneratedAttribute]
public int get_OptionIndex();
    [CompilerGeneratedAttribute]
public void set_OptionIndex(int value);
    [CompilerGeneratedAttribute]
public Command get_Command();
    [CompilerGeneratedAttribute]
public OptionValueCollection get_OptionValues();
    [CompilerGeneratedAttribute]
public CommandRunContext get_CommandRunContext();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class XenoAtom.CommandLine.OptionException : CommandException {
    [CompilerGeneratedAttribute]
private string <OptionName>k__BackingField;
    public string OptionName { get; }
    public OptionException(string message, string optionName);
    public OptionException(string message, string optionName, Exception innerException);
    [CompilerGeneratedAttribute]
public string get_OptionName();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class XenoAtom.CommandLine.OptionValueCollection : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<string> _values;
    [NullableAttribute("1")]
private OptionContext _optionContext;
    public int Count { get; }
    public bool IsReadOnly { get; }
    public string Item { get; public set; }
    [NullableContextAttribute("1")]
internal OptionValueCollection(OptionContext optionContext);
    public sealed virtual void Add(string item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(string item);
    public sealed virtual void CopyTo(String[] array, int arrayIndex);
    public sealed virtual bool Remove(string item);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    [NullableContextAttribute("1")]
private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    [NullableContextAttribute("1")]
public sealed virtual IEnumerator`1<string> GetEnumerator();
    public sealed virtual int IndexOf(string item);
    public sealed virtual void Insert(int index, string item);
    public sealed virtual void RemoveAt(int index);
    private void AssertValid(int index);
    public sealed virtual string get_Item(int index);
    public sealed virtual void set_Item(int index, string value);
    public List`1<string> ToList();
    public String[] ToArray();
    [NullableContextAttribute("1")]
public virtual string ToString();
}
public enum XenoAtom.CommandLine.OptionValueType : Enum {
    public int value__;
    public static OptionValueType None;
    public static OptionValueType Optional;
    public static OptionValueType Required;
}
internal static class XenoAtom.CommandLine.PathHelper : object {
    [NullableContextAttribute("2")]
public static string GetExeName(string name);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class XenoAtom.CommandLine.ResponseFileSource : ArgumentSource {
    public string Description { get; }
    public virtual String[] GetNames();
    public virtual string get_Description();
    public virtual bool TryGetArguments(string value, IEnumerable`1& replacement);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class XenoAtom.CommandLine.StringCoda : object {
    public static IEnumerable`1<string> WrappedLines(string self, Int32[] widths);
    public static IEnumerable`1<string> WrappedLines(string self, IEnumerable`1<int> widths);
    [IteratorStateMachineAttribute("XenoAtom.CommandLine.StringCoda/<CreateWrappedLinesIterator>d__2")]
private static IEnumerable`1<string> CreateWrappedLinesIterator(string self, IEnumerable`1<int> widths);
    private static int GetNextWidth(IEnumerator`1<int> ewidths, int curWidth, Nullable`1& eValid);
    private static bool IsEolChar(char c);
    private static int GetLineEnd(int start, int length, string description);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class XenoAtom.CommandLine.VersionOption : Option {
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    public string Version { get; }
    public VersionOption(string version, string prototype, string help);
    [CompilerGeneratedAttribute]
public string get_Version();
    protected virtual void OnParseComplete(OptionContext c);
    public static string GetDefaultVersion();
}
