public enum BarcodeStandard.AlignmentPositions : Enum {
    public int value__;
    public static AlignmentPositions Center;
    public static AlignmentPositions Left;
    public static AlignmentPositions Right;
}
[SecuritySafeCriticalAttribute]
public class BarcodeStandard.Barcode : object {
    private IBarcode _iBarcode;
    private static XmlSerializer SaveDataXmlSerializer;
    [CompilerGeneratedAttribute]
private string <RawData>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EncodedValue>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CountryAssigningManufacturerCode>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <EncodedType>k__BackingField;
    [CompilerGeneratedAttribute]
private SKImage <EncodedImage>k__BackingField;
    [CompilerGeneratedAttribute]
private SKColorF <ForeColor>k__BackingField;
    [CompilerGeneratedAttribute]
private SKColorF <BackColor>k__BackingField;
    [CompilerGeneratedAttribute]
private SKFont <LabelFont>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Height>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <BarWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <AspectRatio>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeLabel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AlternateLabel>k__BackingField;
    [CompilerGeneratedAttribute]
private double <EncodingTime>k__BackingField;
    [CompilerGeneratedAttribute]
private SKEncodedImageFormat <ImageFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private AlignmentPositions <Alignment>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisableEan13CountryException>k__BackingField;
    private bool _disposedValue;
    public string RawData { get; public set; }
    public string EncodedValue { get; private set; }
    public string CountryAssigningManufacturerCode { get; private set; }
    public Type EncodedType { get; public set; }
    public SKImage EncodedImage { get; private set; }
    public SKColorF ForeColor { get; public set; }
    public SKColorF BackColor { get; public set; }
    public SKFont LabelFont { get; public set; }
    public int Width { get; public set; }
    public int Height { get; public set; }
    public Nullable`1<int> BarWidth { get; public set; }
    public Nullable`1<double> AspectRatio { get; public set; }
    public bool IncludeLabel { get; public set; }
    public string AlternateLabel { get; public set; }
    public double EncodingTime { get; public set; }
    public SKEncodedImageFormat ImageFormat { get; public set; }
    public List`1<string> Errors { get; }
    public AlignmentPositions Alignment { get; public set; }
    public Byte[] EncodedImageBytes { get; }
    public static Version Version { get; }
    public bool DisableEan13CountryException { get; public set; }
    public Barcode(string data);
    public Barcode(string data, Type iType);
    private static Barcode();
    [CompilerGeneratedAttribute]
public string get_RawData();
    [CompilerGeneratedAttribute]
public void set_RawData(string value);
    [CompilerGeneratedAttribute]
public string get_EncodedValue();
    [CompilerGeneratedAttribute]
private void set_EncodedValue(string value);
    [CompilerGeneratedAttribute]
public string get_CountryAssigningManufacturerCode();
    [CompilerGeneratedAttribute]
private void set_CountryAssigningManufacturerCode(string value);
    [CompilerGeneratedAttribute]
public void set_EncodedType(Type value);
    [CompilerGeneratedAttribute]
public Type get_EncodedType();
    [CompilerGeneratedAttribute]
public SKImage get_EncodedImage();
    [CompilerGeneratedAttribute]
private void set_EncodedImage(SKImage value);
    [CompilerGeneratedAttribute]
public SKColorF get_ForeColor();
    [CompilerGeneratedAttribute]
public void set_ForeColor(SKColorF value);
    [CompilerGeneratedAttribute]
public SKColorF get_BackColor();
    [CompilerGeneratedAttribute]
public void set_BackColor(SKColorF value);
    [CompilerGeneratedAttribute]
public SKFont get_LabelFont();
    [CompilerGeneratedAttribute]
public void set_LabelFont(SKFont value);
    [CompilerGeneratedAttribute]
public int get_Width();
    [CompilerGeneratedAttribute]
public void set_Width(int value);
    [CompilerGeneratedAttribute]
public int get_Height();
    [CompilerGeneratedAttribute]
public void set_Height(int value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_BarWidth();
    [CompilerGeneratedAttribute]
public void set_BarWidth(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_AspectRatio();
    [CompilerGeneratedAttribute]
public void set_AspectRatio(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public bool get_IncludeLabel();
    [CompilerGeneratedAttribute]
public void set_IncludeLabel(bool value);
    [CompilerGeneratedAttribute]
public string get_AlternateLabel();
    [CompilerGeneratedAttribute]
public void set_AlternateLabel(string value);
    [CompilerGeneratedAttribute]
public double get_EncodingTime();
    [CompilerGeneratedAttribute]
public void set_EncodingTime(double value);
    [CompilerGeneratedAttribute]
public SKEncodedImageFormat get_ImageFormat();
    [CompilerGeneratedAttribute]
public void set_ImageFormat(SKEncodedImageFormat value);
    public List`1<string> get_Errors();
    [CompilerGeneratedAttribute]
public AlignmentPositions get_Alignment();
    [CompilerGeneratedAttribute]
public void set_Alignment(AlignmentPositions value);
    public Byte[] get_EncodedImageBytes();
    public static Version get_Version();
    [CompilerGeneratedAttribute]
public bool get_DisableEan13CountryException();
    [CompilerGeneratedAttribute]
public void set_DisableEan13CountryException(bool value);
    public SKImage Encode(Type iType, string stringToEncode, int width, int height);
    public SKImage Encode(Type iType, string stringToEncode, SKColorF foreColor, SKColorF backColor, int width, int height);
    public SKImage Encode(Type iType, string stringToEncode, SKColorF foreColor, SKColorF backColor);
    public SKImage Encode(Type iType, string stringToEncode);
    internal SKImage Encode(Type iType);
    public SKImage Encode(string stringToEncode);
    internal SKImage Encode();
    public string GenerateBarcode(string rawData);
    private SKBitmap Generate_Image();
    public Byte[] GetImageData(SaveTypes savetype);
    public void SaveImage(string filename, SaveTypes fileType);
    public void SaveImage(Stream stream, SaveTypes fileType);
    private SKEncodedImageFormat GetSaveType(SaveTypes fileType);
    private SaveData GetSaveData(bool includeImage);
    public string ToJson(bool includeImage);
    public string ToXml(bool includeImage);
    public static SaveData FromJson(Stream jsonStream);
    public static SaveData FromXml(Stream xmlStream);
    public static SKImage GetImageFromSaveData(SaveData saveData);
    public static SKImage DoEncode(Type iType, string data);
    public static SKImage DoEncode(Type iType, string data, String& xml);
    public static SKImage DoEncode(Type iType, string data, bool includeLabel);
    public static SKImage DoEncode(Type iType, string data, bool includeLabel, int width, int height);
    public static SKImage DoEncode(Type iType, string data, bool includeLabel, Color drawColor, Color backColor);
    public static SKImage DoEncode(Type iType, string data, bool includeLabel, Color drawColor, Color backColor, int width, int height);
    public static SKImage DoEncode(Type iType, string data, bool includeLabel, Color drawColor, Color backColor, int width, int height, String& xml);
    protected virtual void Dispose(bool disposing);
    protected virtual override void Finalize();
    private sealed virtual override void System.IDisposable.Dispose();
}
internal abstract class BarcodeStandard.BarcodeCommon : object {
    [CompilerGeneratedAttribute]
private string <RawData>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <Errors>k__BackingField;
    public string RawData { get; protected set; }
    public List`1<string> Errors { get; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_RawData();
    [CompilerGeneratedAttribute]
protected void set_RawData(string value);
    [CompilerGeneratedAttribute]
public sealed virtual List`1<string> get_Errors();
    protected void Error(string errorMessage);
    internal static bool IsNumericOnly(string s);
    internal static int GetAlignmentShiftAdjustment(Barcode barcode);
}
internal interface BarcodeStandard.IBarcode {
    public string Encoded_Value { get; }
    public string RawData { get; }
    public List`1<string> Errors { get; }
    public abstract virtual string get_Encoded_Value();
    public abstract virtual string get_RawData();
    public abstract virtual List`1<string> get_Errors();
}
internal class BarcodeStandard.Labels : object {
    public static SKImage Label_ITF14(Barcode barcode, SKBitmap img);
    public static SKImage Label_Generic(Barcode barcode, SKBitmap img);
    public static SKImage Label_EAN13(Barcode barcode, SKBitmap img);
    public static SKImage Label_UPCA(Barcode barcode, SKBitmap img);
}
public class BarcodeStandard.SaveData : object {
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RawData>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EncodedValue>k__BackingField;
    [CompilerGeneratedAttribute]
private double <EncodingTime>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeLabel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Forecolor>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Backcolor>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CountryAssigningManufacturingCode>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ImageWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ImageHeight>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Image>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Alignment>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LabelFont>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ImageFormat>k__BackingField;
    public string Type { get; public set; }
    public string RawData { get; public set; }
    public string EncodedValue { get; public set; }
    public double EncodingTime { get; public set; }
    public bool IncludeLabel { get; public set; }
    public string Forecolor { get; public set; }
    public string Backcolor { get; public set; }
    public string CountryAssigningManufacturingCode { get; public set; }
    public int ImageWidth { get; public set; }
    public int ImageHeight { get; public set; }
    public string Image { get; public set; }
    public int Alignment { get; public set; }
    public string LabelFont { get; public set; }
    public string ImageFormat { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(string value);
    [CompilerGeneratedAttribute]
public string get_RawData();
    [CompilerGeneratedAttribute]
public void set_RawData(string value);
    [CompilerGeneratedAttribute]
public string get_EncodedValue();
    [CompilerGeneratedAttribute]
public void set_EncodedValue(string value);
    [CompilerGeneratedAttribute]
public double get_EncodingTime();
    [CompilerGeneratedAttribute]
public void set_EncodingTime(double value);
    [CompilerGeneratedAttribute]
public bool get_IncludeLabel();
    [CompilerGeneratedAttribute]
public void set_IncludeLabel(bool value);
    [CompilerGeneratedAttribute]
public string get_Forecolor();
    [CompilerGeneratedAttribute]
public void set_Forecolor(string value);
    [CompilerGeneratedAttribute]
public string get_Backcolor();
    [CompilerGeneratedAttribute]
public void set_Backcolor(string value);
    [CompilerGeneratedAttribute]
public string get_CountryAssigningManufacturingCode();
    [CompilerGeneratedAttribute]
public void set_CountryAssigningManufacturingCode(string value);
    [CompilerGeneratedAttribute]
public int get_ImageWidth();
    [CompilerGeneratedAttribute]
public void set_ImageWidth(int value);
    [CompilerGeneratedAttribute]
public int get_ImageHeight();
    [CompilerGeneratedAttribute]
public void set_ImageHeight(int value);
    [CompilerGeneratedAttribute]
public string get_Image();
    [CompilerGeneratedAttribute]
public void set_Image(string value);
    [CompilerGeneratedAttribute]
public int get_Alignment();
    [CompilerGeneratedAttribute]
public void set_Alignment(int value);
    [CompilerGeneratedAttribute]
public string get_LabelFont();
    [CompilerGeneratedAttribute]
public void set_LabelFont(string value);
    [CompilerGeneratedAttribute]
public string get_ImageFormat();
    [CompilerGeneratedAttribute]
public void set_ImageFormat(string value);
    public sealed virtual void Dispose();
}
public enum BarcodeStandard.SaveTypes : Enum {
    public int value__;
    public static SaveTypes Jpg;
    public static SaveTypes Png;
    public static SaveTypes Webp;
    public static SaveTypes Unspecified;
}
internal class BarcodeStandard.Symbologies.Blank : BarcodeCommon {
    public string Encoded_Value { get; }
    public sealed virtual string get_Encoded_Value();
}
internal class BarcodeStandard.Symbologies.Codabar : BarcodeCommon {
    private Hashtable Codabar_Code;
    public string Encoded_Value { get; }
    internal Codabar(string input);
    private string Encode_Codabar();
    private void Init_Codabar();
    public sealed virtual string get_Encoded_Value();
}
internal class BarcodeStandard.Symbologies.Code11 : BarcodeCommon {
    private String[] C11_Code;
    public string Encoded_Value { get; }
    internal Code11(string input);
    private string Encode_Code11();
    public sealed virtual string get_Encoded_Value();
}
internal class BarcodeStandard.Symbologies.Code128 : BarcodeCommon {
    public static char FNC1;
    public static char FNC2;
    public static char FNC3;
    public static char FNC4;
    private List`1<string> C128_Code;
    private Dictionary`2<string, int> C128_CodeIndexByA;
    private Dictionary`2<string, int> C128_CodeIndexByB;
    private Dictionary`2<string, int> C128_CodeIndexByC;
    private List`1<string> _FormattedData;
    private List`1<string> _EncodedData;
    private Nullable`1<int> _startCharacterIndex;
    private TYPES type;
    public string Encoded_Value { get; }
    internal Code128(string input);
    internal Code128(string input, TYPES type);
    private static Code128();
    private string C128_ByA(string a);
    private string C128_TryByLookup(Dictionary`2<string, int> lookup, string value);
    private string C128_TryByA(string a);
    private string C128_TryByB(string b);
    private string C128_TryByC(string c);
    private string Encode_Code128();
    private void Init_Code128();
    private List`1<int> FindStartorCodeCharacter(string s);
    private string CalculateCheckDigit();
    private void BreakUpDataForEncoding();
    private void InsertStartandCodeCharacters();
    private string GetEncoding();
    public sealed virtual string get_Encoded_Value();
    [CompilerGeneratedAttribute]
private void <Init_Code128>g__entry|21_0(string a, string b, string c, string encoding);
}
internal class BarcodeStandard.Symbologies.Code39 : BarcodeCommon {
    private Hashtable C39_Code;
    private Hashtable ExtC39_Translation;
    private bool _allowExtended;
    private bool _enableChecksum;
    public string Encoded_Value { get; }
    internal Code39(string input);
    internal Code39(string input, bool allowExtended);
    internal Code39(string input, bool allowExtended, bool enableChecksum);
    private string Encode_Code39();
    private void Init_Code39();
    private void Init_ExtendedCode39();
    private void InsertExtendedCharsIfNeeded(String& formattedData);
    private char GetChecksumChar(string strNoAstr);
    public sealed virtual string get_Encoded_Value();
}
internal class BarcodeStandard.Symbologies.Code93 : BarcodeCommon {
    private Dictionary`2<char, Code93CodeWord> codewordPatterns;
    private Dictionary`2<char, string> fullASCIITranslationTable;
    private Dictionary`2<int, char> codeWordToChar;
    public string Encoded_Value { get; }
    internal Code93(string input);
    private string Encode_Code93();
    private string MapFullASCII(string toBeMapped);
    public sealed virtual string get_Encoded_Value();
    private string CalculateChecksum(string code);
    private ValueTuple`2<int, int> CalculateChecksums(string code);
    private void InitCodeWordPatterns();
    private Dictionary`2<int, char> InitCodeWordToChar();
    private void InitFullASCIITranslationTable();
}
internal class BarcodeStandard.Symbologies.Code93CodeWord : object {
    [CompilerGeneratedAttribute]
private string <Pattern>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CodeWordValue>k__BackingField;
    public string Pattern { get; public set; }
    public int CodeWordValue { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Pattern();
    [CompilerGeneratedAttribute]
public void set_Pattern(string value);
    [CompilerGeneratedAttribute]
public int get_CodeWordValue();
    [CompilerGeneratedAttribute]
public void set_CodeWordValue(int value);
}
internal class BarcodeStandard.Symbologies.EAN13 : BarcodeCommon {
    private String[] EAN_CodeA;
    private String[] EAN_CodeB;
    private String[] EAN_CodeC;
    private String[] EAN_Pattern;
    private Hashtable _countryCodes;
    private string _countryAssigningManufacturerCode;
    [CompilerGeneratedAttribute]
private bool <DisableCountryCode>k__BackingField;
    public string CountryAssigningManufacturerCode { get; public set; }
    public bool DisableCountryCode { get; public set; }
    public string Encoded_Value { get; }
    internal EAN13(string input, bool disableCountryCode);
    public string get_CountryAssigningManufacturerCode();
    public void set_CountryAssigningManufacturerCode(string value);
    [CompilerGeneratedAttribute]
public bool get_DisableCountryCode();
    [CompilerGeneratedAttribute]
public void set_DisableCountryCode(bool value);
    private string Encode_EAN13();
    private void ParseCountryCode();
    private void Create_CountryCodeRange(int startingNumber, int endingNumber, string countryDescription);
    private void Init_CountryCodes();
    private void CheckDigit();
    public sealed virtual string get_Encoded_Value();
}
internal class BarcodeStandard.Symbologies.EAN8 : BarcodeCommon {
    private String[] EAN_CodeA;
    private String[] EAN_CodeC;
    public string Encoded_Value { get; }
    internal EAN8(string input);
    private string Encode_EAN8();
    private void CheckDigit();
    public sealed virtual string get_Encoded_Value();
}
internal class BarcodeStandard.Symbologies.FIM : BarcodeCommon {
    private String[] FIM_Codes;
    public string Encoded_Value { get; }
    internal FIM(string input);
    internal string Encode_FIM();
    public sealed virtual string get_Encoded_Value();
}
internal class BarcodeStandard.Symbologies.IATA2of5 : BarcodeCommon {
    private String[] IATA2of5_Code;
    public string Encoded_Value { get; }
    internal IATA2of5(string input);
    private string Encode_IATA2of5();
    private int CalculateMod10CheckDigit();
    public sealed virtual string get_Encoded_Value();
}
internal class BarcodeStandard.Symbologies.Interleaved2of5 : BarcodeCommon {
    private String[] _i25Code;
    private Type _encodedType;
    public string Encoded_Value { get; }
    internal Interleaved2of5(string input, Type encodedType);
    private string Encode_Interleaved2of5();
    private int CalculateMod10CheckDigit();
    public sealed virtual string get_Encoded_Value();
}
internal class BarcodeStandard.Symbologies.ISBN : BarcodeCommon {
    public string Encoded_Value { get; }
    internal ISBN(string input);
    private string Encode_ISBN_Bookland();
    public sealed virtual string get_Encoded_Value();
}
internal class BarcodeStandard.Symbologies.ITF14 : BarcodeCommon {
    private String[] ITF14_Code;
    public string Encoded_Value { get; }
    internal ITF14(string input);
    private string Encode_ITF14();
    private void CheckDigit();
    public sealed virtual string get_Encoded_Value();
}
internal class BarcodeStandard.Symbologies.JAN13 : BarcodeCommon {
    public string Encoded_Value { get; }
    internal JAN13(string input);
    private string Encode_JAN13();
    public sealed virtual string get_Encoded_Value();
}
internal class BarcodeStandard.Symbologies.MSI : BarcodeCommon {
    private String[] MSI_Code;
    private Type Encoded_Type;
    public string Encoded_Value { get; }
    internal MSI(string input, Type encodedType);
    private string Encode_MSI();
    private string Mod10(string code);
    private string Mod11(string code);
    public sealed virtual string get_Encoded_Value();
}
internal class BarcodeStandard.Symbologies.Pharmacode : BarcodeCommon {
    private string _thinBar;
    private string _gap;
    private string _thickBar;
    public string Encoded_Value { get; }
    internal Pharmacode(string input);
    private string Encode_Pharmacode();
    public sealed virtual string get_Encoded_Value();
}
internal class BarcodeStandard.Symbologies.Postnet : BarcodeCommon {
    private String[] POSTNET_Code;
    public string Encoded_Value { get; }
    internal Postnet(string input);
    private string Encode_Postnet();
    public sealed virtual string get_Encoded_Value();
}
internal class BarcodeStandard.Symbologies.Standard2of5 : BarcodeCommon {
    private String[] S25_Code;
    private Type _encodedType;
    public string Encoded_Value { get; }
    internal Standard2of5(string input, Type encodedType);
    private string Encode_Standard2of5();
    private int CalculateMod10CheckDigit();
    public sealed virtual string get_Encoded_Value();
}
internal class BarcodeStandard.Symbologies.Telepen : BarcodeCommon {
    private static Hashtable Telepen_Code;
    private StartStopCode _startCode;
    private StartStopCode _stopCode;
    private int _switchModeIndex;
    private int _iCheckSum;
    public string Encoded_Value { get; }
    internal Telepen(string input);
    private static Telepen();
    private string Encode_Telepen();
    private void EncodeASCII(string input, String& output);
    private void EncodeNumeric(string input, String& output);
    private void EncodeSwitchMode(String& output);
    private char Calculate_Checksum(int iCheckSum);
    private void SetEncodingSequence();
    private void Init_Telepen();
    public sealed virtual string get_Encoded_Value();
}
internal class BarcodeStandard.Symbologies.UPCA : BarcodeCommon {
    private String[] UPC_Code_A;
    private String[] UPC_Code_B;
    public string Encoded_Value { get; }
    internal UPCA(string input);
    private string Encode_UPCA();
    private void CheckDigit();
    public sealed virtual string get_Encoded_Value();
}
internal class BarcodeStandard.Symbologies.UPCE : BarcodeCommon {
    private String[] EAN_Code_A;
    private String[] EAN_Code_B;
    private String[] UPC_E_Code0;
    private String[] UPC_E_Code1;
    public string Encoded_Value { get; }
    internal UPCE(string input);
    private string Encode_UPCE();
    private string GetPattern(int checkDigit, int numberSystem);
    private string ConvertUPCAToUPCE();
    private string ConvertUPCEToUPCA(string UPCECode);
    private string CalculateCheckDigit(string upcA);
    public sealed virtual string get_Encoded_Value();
}
internal class BarcodeStandard.Symbologies.UPCSupplement2 : BarcodeCommon {
    private String[] EAN_CodeA;
    private String[] EAN_CodeB;
    private String[] UPC_SUPP_2;
    public string Encoded_Value { get; }
    internal UPCSupplement2(string input);
    private string Encode_UPCSupplemental_2();
    public sealed virtual string get_Encoded_Value();
}
internal class BarcodeStandard.Symbologies.UPCSupplement5 : BarcodeCommon {
    private String[] EAN_CodeA;
    private String[] EAN_CodeB;
    private String[] UPC_SUPP_5;
    public string Encoded_Value { get; }
    internal UPCSupplement5(string input);
    private string Encode_UPCSupplemental_5();
    public sealed virtual string get_Encoded_Value();
}
public enum BarcodeStandard.Type : Enum {
    public int value__;
    public static Type Unspecified;
    public static Type UpcA;
    public static Type UpcE;
    public static Type UpcSupplemental2Digit;
    public static Type UpcSupplemental5Digit;
    public static Type Ean13;
    public static Type Ean8;
    public static Type Interleaved2Of5;
    public static Type Interleaved2Of5Mod10;
    public static Type Standard2Of5;
    public static Type Standard2Of5Mod10;
    public static Type Industrial2Of5;
    public static Type Industrial2Of5Mod10;
    public static Type Code39;
    public static Type Code39Extended;
    public static Type Code39Mod43;
    public static Type Codabar;
    public static Type PostNet;
    public static Type Bookland;
    public static Type Isbn;
    public static Type Jan13;
    public static Type MsiMod10;
    public static Type Msi2Mod10;
    public static Type MsiMod11;
    public static Type MsiMod11Mod10;
    public static Type ModifiedPlessey;
    public static Type Code11;
    public static Type Usd8;
    public static Type Ucc12;
    public static Type Ucc13;
    public static Type Logmars;
    public static Type Code128;
    public static Type Code128A;
    public static Type Code128B;
    public static Type Code128C;
    public static Type Itf14;
    public static Type Code93;
    public static Type Telepen;
    public static Type Fim;
    public static Type Pharmacode;
    public static Type IATA2of5;
}
internal static class BarcodeStandard.Utils : object {
    internal static int GetFontHeight(string text, SKFont font);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
