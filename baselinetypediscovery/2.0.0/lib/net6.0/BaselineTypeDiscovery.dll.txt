public static class BaselineTypeDiscovery.AssemblyFinder : object {
    public static IEnumerable`1<Assembly> FindAssemblies(Action`1<string> logFailure, Func`2<Assembly, bool> filter, bool includeExeFiles);
    public static IEnumerable`1<Assembly> FindAssemblies(Func`2<Assembly, bool> filter, string assemblyPath, Action`1<string> logFailure, bool includeExeFiles);
    [IteratorStateMachineAttribute("BaselineTypeDiscovery.AssemblyFinder/<findAssemblies>d__2")]
private static IEnumerable`1<Assembly> findAssemblies(string assemblyPath, Action`1<string> logFailure, bool includeExeFiles);
    public static IEnumerable`1<Assembly> FindAssemblies(Func`2<Assembly, bool> filter, Action`1<string> onDirectoryFound, bool includeExeFiles);
}
public class BaselineTypeDiscovery.AssemblyLoadContextWrapper : object {
    private AssemblyLoadContext ctx;
    public AssemblyLoadContextWrapper(AssemblyLoadContext ctx);
    public sealed virtual Assembly LoadFromStream(Stream assembly);
    public sealed virtual Assembly LoadFromAssemblyName(AssemblyName assemblyName);
    public sealed virtual Assembly LoadFromAssemblyPath(string assemblyName);
}
public static class BaselineTypeDiscovery.AssemblyLoader : object {
    public static Assembly ByName(string assemblyName);
}
public class BaselineTypeDiscovery.AssemblyScanRecord : object {
    public string Name;
    public Exception LoadException;
    public virtual string ToString();
}
public class BaselineTypeDiscovery.AssemblyShelf : object {
    public IList`1<Type> Interfaces;
    public IList`1<Type> Concretes;
    public IList`1<Type> Abstracts;
    [IteratorStateMachineAttribute("BaselineTypeDiscovery.AssemblyShelf/<SelectLists>d__3")]
public IEnumerable`1<IList`1<Type>> SelectLists(TypeClassification classification);
    public IEnumerable`1<Type> AllTypes();
    public void Add(Type type);
}
public class BaselineTypeDiscovery.AssemblyTypes : object {
    private AssemblyScanRecord _record;
    public AssemblyShelf ClosedTypes;
    public AssemblyShelf OpenTypes;
    public AssemblyScanRecord Record { get; }
    public AssemblyTypes(Assembly assembly);
    public AssemblyTypes(string name, Func`1<IEnumerable`1<Type>> typeSource);
    public AssemblyScanRecord get_Record();
    public IEnumerable`1<Type> FindTypes(TypeClassification classification);
    private IEnumerable`1<Type> allTypes(IList`1[] shelves);
    private IEnumerable`1<IList`1<Type>> selectGroups(TypeClassification classification);
    [IteratorStateMachineAttribute("BaselineTypeDiscovery.AssemblyTypes/<selectShelves>d__10")]
private IEnumerable`1<AssemblyShelf> selectShelves(TypeClassification classification);
}
internal static class BaselineTypeDiscovery.BaselineAssemblyContext : object {
    public static IBaselineAssemblyLoadContext Loader;
    private static BaselineAssemblyContext();
}
public class BaselineTypeDiscovery.CallingAssembly : object {
    private static String[] _prefixesToIgnore;
    private static IList`1<string> _misses;
    private static CallingAssembly();
    private static string GetStackTraceInEnglish();
    public static Assembly Find();
    private static bool isSystemAssembly(Assembly assembly);
    private static bool isSystemAssembly(string assemblyName);
    private static Assembly findAssembly(string stacktraceLine);
    public static Assembly DetermineApplicationAssembly(object registry);
}
public class BaselineTypeDiscovery.CustomAssemblyLoadContext : AssemblyLoadContext {
    protected virtual Assembly Load(AssemblyName assemblyName);
    private sealed virtual override Assembly BaselineTypeDiscovery.IBaselineAssemblyLoadContext.LoadFromAssemblyName(AssemblyName assemblyName);
    private sealed virtual override Assembly BaselineTypeDiscovery.IBaselineAssemblyLoadContext.LoadFromStream(Stream assembly);
    private sealed virtual override Assembly BaselineTypeDiscovery.IBaselineAssemblyLoadContext.LoadFromAssemblyPath(string assemblyName);
}
internal interface BaselineTypeDiscovery.IBaselineAssemblyLoadContext {
    public abstract virtual Assembly LoadFromStream(Stream assembly);
    public abstract virtual Assembly LoadFromAssemblyName(AssemblyName assemblyName);
    public abstract virtual Assembly LoadFromAssemblyPath(string assemblyName);
}
[AttributeUsageAttribute("1")]
public class BaselineTypeDiscovery.IgnoreAssemblyAttribute : Attribute {
}
internal class BaselineTypeDiscovery.ImHashMap`2 : object {
    public static ImHashMap`2<K, V> Empty;
    public ImHashMap`2<K, V> Left;
    public ImHashMap`2<K, V> Right;
    public int Height;
    private Data<K, V> _data;
    public int Hash { get; }
    public K Key { get; }
    public V Value { get; }
    public KV`2[] Conflicts { get; }
    public bool IsEmpty { get; }
    private ImHashMap`2(Data<K, V> data);
    private ImHashMap`2(Data<K, V> data, ImHashMap`2<K, V> left, ImHashMap`2<K, V> right);
    private ImHashMap`2(Data<K, V> data, ImHashMap`2<K, V> left, ImHashMap`2<K, V> right, int height);
    private static ImHashMap`2();
    public int get_Hash();
    public K get_Key();
    public V get_Value();
    public KV`2[] get_Conflicts();
    public bool get_IsEmpty();
    public ImHashMap`2<K, V> AddOrUpdate(K key, V value);
    public ImHashMap`2<K, V> AddOrUpdate(K key, V value, Update`1<V> update);
    public ImHashMap`2<K, V> Update(K key, V value, Update`1<V> update);
    public V GetValueOrDefault(K key, V defaultValue);
    public bool TryFind(K key, V& value);
    [IteratorStateMachineAttribute("BaselineTypeDiscovery.ImHashMap`2/<Enumerate>d__19")]
public IEnumerable`1<KV`2<K, V>> Enumerate();
    public ImHashMap`2<K, V> Remove(K key);
    internal ImHashMap`2<K, V> AddOrUpdate(int hash, K key, V value);
    private ImHashMap`2<K, V> AddOrUpdate(int hash, K key, V value, Update`1<V> update);
    internal ImHashMap`2<K, V> Update(int hash, K key, V value, Update`1<V> update);
    private ImHashMap`2<K, V> UpdateValueAndResolveConflicts(K key, V value, Update`1<V> update, bool updateOnly);
    internal V GetConflictedValueOrDefault(K key, V defaultValue);
    private bool TryFindConflictedValue(K key, V& value);
    private ImHashMap`2<K, V> KeepBalance();
    private ImHashMap`2<K, V> With(ImHashMap`2<K, V> left, ImHashMap`2<K, V> right);
    internal ImHashMap`2<K, V> Remove(int hash, K key, bool ignoreKey);
    private ImHashMap`2<K, V> TryRemoveConflicted(K key);
    private ImHashMap`2<K, V> ReplaceRemovedWithConflicted();
}
internal class BaselineTypeDiscovery.KV`2 : object {
    public K Key;
    public V Value;
    public KV`2(K key, V value);
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[ExtensionAttribute]
internal static class BaselineTypeDiscovery.TopologicalSortExtensions : object {
    [ExtensionAttribute]
public static IEnumerable`1<T> TopologicalSort(IEnumerable`1<T> source, Func`2<T, IEnumerable`1<T>> dependencies, bool throwOnCycle);
    private static void Visit(T item, ISet`1<T> visited, ICollection`1<T> sorted, Func`2<T, IEnumerable`1<T>> dependencies, bool throwOnCycle);
}
[FlagsAttribute]
public enum BaselineTypeDiscovery.TypeClassification : Enum {
    public short value__;
    public static TypeClassification All;
    public static TypeClassification Open;
    public static TypeClassification Closed;
    public static TypeClassification Interfaces;
    public static TypeClassification Abstracts;
    public static TypeClassification Concretes;
}
[ExtensionAttribute]
internal static class BaselineTypeDiscovery.TypeExtensions : object {
    [ExtensionAttribute]
public static bool IsOpenGeneric(Type type);
}
public class BaselineTypeDiscovery.TypeQuery : object {
    private TypeClassification _classification;
    public Func`2<Type, bool> Filter;
    public TypeQuery(TypeClassification classification, Func`2<Type, bool> filter);
    public IEnumerable`1<Type> Find(AssemblyTypes assembly);
}
public static class BaselineTypeDiscovery.TypeRepository : object {
    private static ImHashMap`2<Assembly, Task`1<AssemblyTypes>> _assemblies;
    private static TypeRepository();
    public static void ClearAll();
    public static void AssertNoTypeScanningFailures();
    public static IEnumerable`1<AssemblyTypes> FailedAssemblies();
    public static Task`1<AssemblyTypes> ForAssembly(Assembly assembly);
    public static Task`1<TypeSet> FindTypes(IEnumerable`1<Assembly> assemblies, Func`2<Type, bool> filter);
    public static Task`1<IEnumerable`1<Type>> FindTypes(IEnumerable`1<Assembly> assemblies, TypeClassification classification, Func`2<Type, bool> filter);
    public static Task`1<IEnumerable`1<Type>> FindTypes(Assembly assembly, TypeClassification classification, Func`2<Type, bool> filter);
}
public class BaselineTypeDiscovery.TypeSet : object {
    private IEnumerable`1<AssemblyTypes> _allTypes;
    private Func`2<Type, bool> _filter;
    public IEnumerable`1<AssemblyScanRecord> Records { get; }
    public TypeSet(IEnumerable`1<AssemblyTypes> allTypes, Func`2<Type, bool> filter);
    public IEnumerable`1<AssemblyScanRecord> get_Records();
    public IEnumerable`1<Type> FindTypes(TypeClassification classification);
    public IEnumerable`1<Type> AllTypes();
}
internal class BaselineTypeDiscovery.Update`1 : MulticastDelegate {
    public Update`1(object object, IntPtr method);
    public virtual V Invoke(V oldValue, V newValue);
    public virtual IAsyncResult BeginInvoke(V oldValue, V newValue, AsyncCallback callback, object object);
    public virtual V EndInvoke(IAsyncResult result);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
