public class BCrypt.Net.BCrypt : object {
    private static int DefaultRounds;
    private static int BCryptSaltLen;
    private static Encoding SafeUTF8;
    private static HashType DefaultEnhancedHashType;
    private static int BlowfishNumRounds;
    private static RandomNumberGenerator RngCsp;
    private static UInt32[] POrig;
    private static UInt32[] SOrig;
    private static UInt32[] BfCryptCiphertext;
    private static Char[] Base64Code;
    private static Int32[] Index64;
    private static string EmptyString;
    private static char DefaultHashVersion;
    private static string Nul;
    private static short MinRounds;
    private static short MaxRounds;
    private UInt32[] _p;
    private UInt32[] _s;
    private static BCrypt();
    public static string ValidateAndReplacePassword(string currentKey, string currentHash, string newKey, int workFactor, bool forceWorkFactor);
    public static string ValidateAndReplacePassword(string currentKey, string currentHash, bool currentKeyEnhancedEntropy, HashType oldHashType, string newKey, bool newKeyEnhancedEntropy, HashType newHashType, int workFactor, bool forceWorkFactor);
    [ObsoleteAttribute("Replace with HashPassword, this method will be removed at a later date")]
public static string HashString(string inputKey, int workFactor);
    public static string HashPassword(string inputKey);
    public static string EnhancedHashPassword(string inputKey);
    public static string EnhancedHashPassword(string inputKey, int workFactor);
    public static string EnhancedHashPassword(string inputKey, int workFactor, HashType hashType);
    public static string EnhancedHashPassword(string inputKey, HashType hashType, int workFactor);
    public static string HashPassword(string inputKey, int workFactor, bool enhancedEntropy);
    public static string HashPassword(string inputKey, string salt);
    public static string HashPassword(string inputKey, string salt, bool enhancedEntropy, HashType hashType);
    private static Byte[] EnhancedHash(Byte[] inputBytes, char bcryptMinorRevision, HashType hashType);
    public static string GenerateSalt(int workFactor, char bcryptMinorRevision);
    public static bool PasswordNeedsRehash(string hash, int newMinimumWorkLoad);
    public static HashInformation InterrogateHash(string hash);
    public static string GenerateSalt();
    public static bool EnhancedVerify(string text, string hash, HashType hashType);
    public static bool Verify(string text, string hash, bool enhancedEntropy, HashType hashType);
    private static bool SecureEquals(Byte[] a, Byte[] b);
    internal static Char[] EncodeBase64(Byte[] byteArray, int length);
    internal static Byte[] DecodeBase64(string encodedString, int maximumBytes);
    private static int Char64(char character);
    private void Encipher(UInt32[] blockArray, int offset);
    private static UInt32 StreamToWord(Byte[] data, Int32& offset);
    private void InitializeKey();
    private void Key(Byte[] keyBytes);
    private void EKSKey(Byte[] saltBytes, Byte[] inputBytes);
    internal Byte[] CryptRaw(Byte[] inputBytes, Byte[] saltBytes, int workFactor);
}
public class BCrypt.Net.BcryptAuthenticationException : Exception {
    public BcryptAuthenticationException(string message);
    public BcryptAuthenticationException(string message, Exception innerException);
}
public class BCrypt.Net.HashInformation : object {
    [CompilerGeneratedAttribute]
private string <Settings>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WorkFactor>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RawHash>k__BackingField;
    public string Settings { get; private set; }
    public string Version { get; private set; }
    public string WorkFactor { get; private set; }
    public string RawHash { get; private set; }
    internal HashInformation(string settings, string version, string workFactor, string rawHash);
    [CompilerGeneratedAttribute]
public string get_Settings();
    [CompilerGeneratedAttribute]
private void set_Settings(string value);
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
private void set_Version(string value);
    [CompilerGeneratedAttribute]
public string get_WorkFactor();
    [CompilerGeneratedAttribute]
private void set_WorkFactor(string value);
    [CompilerGeneratedAttribute]
public string get_RawHash();
    [CompilerGeneratedAttribute]
private void set_RawHash(string value);
}
public class BCrypt.Net.HashInformationException : Exception {
    public HashInformationException(string message);
    public HashInformationException(string message, Exception innerException);
}
internal static class BCrypt.Net.HashParser : object {
    private static HashFormatDescriptor OldFormatDescriptor;
    private static HashFormatDescriptor NewFormatDescriptor;
    private static HashParser();
    public static HashInformation GetHashInformation(string hash);
    public static int GetWorkFactor(string hash);
    private static bool IsValidHash(string hash, HashFormatDescriptor& format);
    private static bool IsValidBCryptVersionChar(char value);
    private static bool IsValidBCryptBase64Char(char value);
    private static bool IsAsciiNumeric(char value);
    private static void ThrowInvalidHashFormat();
}
public enum BCrypt.Net.HashType : Enum {
    public int value__;
    public static HashType None;
    public static HashType SHA256;
    public static HashType SHA384;
    public static HashType SHA512;
}
public class BCrypt.Net.SaltParseException : Exception {
    public SaltParseException(string message);
    public SaltParseException(string message, Exception innerException);
}
