[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public static class System.Collections.Generic.Enumerable.EnumerableIList : object {
    [NullableContextAttribute("1")]
public static EnumerableIList`1<T> Create(IList`1<T> list);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class System.Collections.Generic.Enumerable.EnumerableIList`1 : ValueType {
    private IList`1<T> _list;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static EnumerableIList`1<T> Empty;
    public T Item { get; public set; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public EnumerableIList`1(IList`1<T> list);
    private static EnumerableIList`1();
    public sealed virtual EnumeratorIList`1<T> GetEnumerator();
    public static EnumerableIList`1<T> op_Implicit(List`1<T> list);
    public static EnumerableIList`1<T> op_Implicit(T[] array);
    public sealed virtual T get_Item(int index);
    public sealed virtual void set_Item(int index, T value);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual void Add(T item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(T item);
    public sealed virtual void CopyTo(T[] array, int arrayIndex);
    public sealed virtual int IndexOf(T item);
    public sealed virtual void Insert(int index, T item);
    public sealed virtual bool Remove(T item);
    public sealed virtual void RemoveAt(int index);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override IEnumerator`1<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Collections.Generic.Enumerable.EnumeratorIList`1 : ValueType {
    private IList`1<T> _list;
    private int _index;
    public T Current { get; }
    [NullableAttribute("2")]
private object System.Collections.IEnumerator.Current { get; }
    public EnumeratorIList`1(IList`1<T> list);
    public sealed virtual T get_Current();
    public sealed virtual bool MoveNext();
    public sealed virtual void Dispose();
    [NullableContextAttribute("2")]
private sealed virtual override object System.Collections.IEnumerator.get_Current();
    public sealed virtual void Reset();
}
internal interface System.Collections.Generic.Enumerable.IEnumerableIList`1 {
    public abstract virtual EnumeratorIList`1<T> GetEnumerator();
}
[AttributeUsageAttribute("2432")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.AllowNullAttribute : Attribute {
}
[AttributeUsageAttribute("2432")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.DisallowNullAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ParameterValue>k__BackingField;
    public bool ParameterValue { get; }
    public DoesNotReturnIfAttribute(bool parameterValue);
    [CompilerGeneratedAttribute]
public bool get_ParameterValue();
}
[AttributeUsageAttribute("10624")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.MaybeNullAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public MaybeNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("192")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.MemberNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private String[] <Members>k__BackingField;
    public String[] Members { get; }
    public MemberNotNullAttribute(string member);
    public MemberNotNullAttribute(String[] members);
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("192")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Members>k__BackingField;
    public bool ReturnValue { get; }
    public String[] Members { get; }
    public MemberNotNullWhenAttribute(bool returnValue, string member);
    public MemberNotNullWhenAttribute(bool returnValue, String[] members);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[AttributeUsageAttribute("10624")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.NotNullAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("10368")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    public string ParameterName { get; }
    public NotNullIfNotNullAttribute(string parameterName);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
}
[AttributeUsageAttribute("2048")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.NotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public NotNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Diagnostics.EnhancedStackFrame : StackFrame {
    [NullableAttribute("2")]
private string _fileName;
    private int _lineNumber;
    private int _colNumber;
    [CompilerGeneratedAttribute]
private StackFrame <StackFrame>k__BackingField;
    [CompilerGeneratedAttribute]
private ResolvedMethod <MethodInfo>k__BackingField;
    public StackFrame StackFrame { get; }
    public bool IsRecursive { get; internal set; }
    public ResolvedMethod MethodInfo { get; }
    internal EnhancedStackFrame(StackFrame stackFrame, ResolvedMethod methodInfo, string fileName, int lineNumber, int colNumber);
    [CompilerGeneratedAttribute]
public StackFrame get_StackFrame();
    public bool get_IsRecursive();
    internal void set_IsRecursive(bool value);
    [CompilerGeneratedAttribute]
public ResolvedMethod get_MethodInfo();
    internal bool IsEquivalent(ResolvedMethod methodInfo, string fileName, int lineNumber, int colNumber);
    public virtual int GetFileColumnNumber();
    public virtual int GetFileLineNumber();
    [NullableContextAttribute("2")]
public virtual string GetFileName();
    public virtual int GetILOffset();
    [NullableContextAttribute("2")]
public virtual MethodBase GetMethod();
    public virtual int GetNativeOffset();
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Diagnostics.EnhancedStackTrace : StackTrace {
    private List`1<EnhancedStackFrame> _frames;
    [NullableAttribute("2")]
private static Type StackTraceHiddenAttributeType;
    public int FrameCount { get; }
    public EnhancedStackTrace(Exception e);
    public EnhancedStackTrace(StackTrace stackTrace);
    private static EnhancedStackTrace();
    public static EnhancedStackTrace Current();
    public virtual int get_FrameCount();
    public virtual StackFrame GetFrame(int index);
    public virtual StackFrame[] GetFrames();
    public virtual string ToString();
    internal void Append(StringBuilder sb);
    private EnumerableIList`1<EnhancedStackFrame> GetEnumerator();
    private sealed virtual override IEnumerator`1<EnhancedStackFrame> System.Collections.Generic.IEnumerable<System.Diagnostics.EnhancedStackFrame>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public static string TryGetFullPath(string filePath);
    private static List`1<EnhancedStackFrame> GetFrames(Exception exception);
    public static List`1<EnhancedStackFrame> GetFrames(StackTrace stackTrace);
    public static ResolvedMethod GetMethodDisplayString(MethodBase originMethod);
    private static bool IsFSharpAsync(MethodBase method);
    private static bool TryResolveGeneratedName(MethodBase& method, Type& type, String& methodName, String& subMethodName, GeneratedNameKind& kind, Nullable`1& ordinal);
    private static bool TryResolveSourceMethod(IEnumerable`1<MethodBase> candidateMethods, GeneratedNameKind kind, string matchHint, MethodBase& method, Type& type, Nullable`1& ordinal);
    private static void GetOrdinal(MethodBase method, Nullable`1& ordinal);
    private static string GetMatchHint(GeneratedNameKind kind, MethodBase method);
    internal static bool TryParseGeneratedName(string name, GeneratedNameKind& kind, Int32& openBracketOffset, Int32& closeBracketOffset);
    private static int IndexOfBalancedParenthesis(string str, int openingOffset, char closing);
    private static string GetPrefix(ParameterInfo parameter);
    private static ResolvedParameter GetParameter(ParameterInfo parameter);
    private static ResolvedParameter GetValueTupleParameter(IList`1<string> tupleNames, string prefix, string name, Type parameterType);
    private static string GetValueTupleParameterName(IList`1<string> tupleNames, Type parameterType);
    private static bool ShowInStackTrace(MethodBase method);
    private static bool IsStackTraceHidden(MemberInfo memberInfo);
    private static bool TryResolveStateMachineMethod(MethodBase& method, Type& declaringType);
    [CompilerGeneratedAttribute]
internal static MethodInfo[] <TryResolveStateMachineMethod>g__GetDeclaredMethods|31_0(Type type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class System.Diagnostics.ExceptionExtensions : object {
    [NullableAttribute("2")]
private static FieldInfo stackTraceString;
    private static ExceptionExtensions();
    [ExtensionAttribute]
private static void SetStackTracesString(Exception exception, string value);
    [ExtensionAttribute]
public static T Demystify(T exception);
    [ExtensionAttribute]
public static string ToStringDemystified(Exception exception);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Diagnostics.Internal.ILReader : object {
    private static OpCode[] singleByteOpCode;
    private static OpCode[] doubleByteOpCode;
    private Byte[] _cil;
    private int ptr;
    [CompilerGeneratedAttribute]
private OpCode <OpCode>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MetadataToken>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private MemberInfo <Operand>k__BackingField;
    public OpCode OpCode { get; private set; }
    public int MetadataToken { get; private set; }
    [NullableAttribute("2")]
public MemberInfo Operand { get; private set; }
    public ILReader(Byte[] cil);
    private static ILReader();
    [CompilerGeneratedAttribute]
public OpCode get_OpCode();
    [CompilerGeneratedAttribute]
private void set_OpCode(OpCode value);
    [CompilerGeneratedAttribute]
public int get_MetadataToken();
    [CompilerGeneratedAttribute]
private void set_MetadataToken(int value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public MemberInfo get_Operand();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_Operand(MemberInfo value);
    public bool Read(MethodBase methodInfo);
    private OpCode ReadOpCode();
    private MemberInfo ReadOperand(OpCode code, MethodBase methodInfo);
    private byte ReadByte();
    private int ReadInt();
    private static FieldInfo[] GetOpCodeFields();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Diagnostics.Internal.PortablePdbReader : object {
    private Dictionary`2<string, MetadataReaderProvider> _cache;
    public void PopulateStackFrame(StackFrame frameInfo, MethodBase method, int IlOffset, String& fileName, Int32& row, Int32& column);
    private MetadataReader GetMetadataReader(string assemblyPath);
    private static string GetPdbPath(string assemblyPath);
    private static bool IsPortable(string pdbPath);
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class System.Diagnostics.Internal.ReflectionHelper : object {
    [NullableAttribute("2")]
private static PropertyInfo tranformerNamesLazyPropertyInfo;
    [ExtensionAttribute]
public static bool IsValueTuple(Type type);
    [ExtensionAttribute]
public static bool IsTupleElementNameAttribue(Attribute attribute);
    [ExtensionAttribute]
public static IList`1<string> GetTransformerNames(Attribute attribute);
    private static PropertyInfo GetTransformNamesPropertyInfo(Type attributeType);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Diagnostics.ResolvedMethod : object {
    [CompilerGeneratedAttribute]
private MethodBase <MethodBase>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <DeclaringType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAsync>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsLambda>k__BackingField;
    [CompilerGeneratedAttribute]
private ResolvedParameter <ReturnParameter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Ordinal>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GenericArguments>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Type[] <ResolvedGenericArguments>k__BackingField;
    [CompilerGeneratedAttribute]
private MethodBase <SubMethodBase>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SubMethod>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EnumerableIList`1<ResolvedParameter> <Parameters>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EnumerableIList`1<ResolvedParameter> <SubMethodParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RecurseCount>k__BackingField;
    public MethodBase MethodBase { get; public set; }
    public Type DeclaringType { get; public set; }
    public bool IsAsync { get; public set; }
    public bool IsLambda { get; public set; }
    public ResolvedParameter ReturnParameter { get; public set; }
    public string Name { get; public set; }
    public Nullable`1<int> Ordinal { get; public set; }
    public string GenericArguments { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Type[] ResolvedGenericArguments { get; public set; }
    public MethodBase SubMethodBase { get; public set; }
    public string SubMethod { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public EnumerableIList`1<ResolvedParameter> Parameters { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public EnumerableIList`1<ResolvedParameter> SubMethodParameters { get; public set; }
    public int RecurseCount { get; internal set; }
    [CompilerGeneratedAttribute]
public MethodBase get_MethodBase();
    [CompilerGeneratedAttribute]
public void set_MethodBase(MethodBase value);
    [CompilerGeneratedAttribute]
public Type get_DeclaringType();
    [CompilerGeneratedAttribute]
public void set_DeclaringType(Type value);
    [CompilerGeneratedAttribute]
public bool get_IsAsync();
    [CompilerGeneratedAttribute]
public void set_IsAsync(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsLambda();
    [CompilerGeneratedAttribute]
public void set_IsLambda(bool value);
    [CompilerGeneratedAttribute]
public ResolvedParameter get_ReturnParameter();
    [CompilerGeneratedAttribute]
public void set_ReturnParameter(ResolvedParameter value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Ordinal();
    [CompilerGeneratedAttribute]
public void set_Ordinal(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_GenericArguments();
    [CompilerGeneratedAttribute]
public void set_GenericArguments(string value);
    [CompilerGeneratedAttribute]
public Type[] get_ResolvedGenericArguments();
    [CompilerGeneratedAttribute]
public void set_ResolvedGenericArguments(Type[] value);
    [CompilerGeneratedAttribute]
public MethodBase get_SubMethodBase();
    [CompilerGeneratedAttribute]
public void set_SubMethodBase(MethodBase value);
    [CompilerGeneratedAttribute]
public string get_SubMethod();
    [CompilerGeneratedAttribute]
public void set_SubMethod(string value);
    [CompilerGeneratedAttribute]
public EnumerableIList`1<ResolvedParameter> get_Parameters();
    [CompilerGeneratedAttribute]
public void set_Parameters(EnumerableIList`1<ResolvedParameter> value);
    [CompilerGeneratedAttribute]
public EnumerableIList`1<ResolvedParameter> get_SubMethodParameters();
    [CompilerGeneratedAttribute]
public void set_SubMethodParameters(EnumerableIList`1<ResolvedParameter> value);
    [CompilerGeneratedAttribute]
public int get_RecurseCount();
    [CompilerGeneratedAttribute]
internal void set_RecurseCount(int value);
    [NullableContextAttribute("1")]
internal bool IsSequentialEquivalent(ResolvedMethod obj);
    [NullableContextAttribute("1")]
public virtual string ToString();
    [NullableContextAttribute("1")]
public StringBuilder Append(StringBuilder builder);
    [NullableContextAttribute("1")]
public StringBuilder Append(StringBuilder builder, bool fullName);
    [NullableContextAttribute("1")]
private StringBuilder AppendDeclaringTypeName(StringBuilder builder, bool fullName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Diagnostics.ResolvedParameter : object {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ResolvedType>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Prefix>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDynamicType>k__BackingField;
    [NullableAttribute("2")]
public string Name { get; public set; }
    public Type ResolvedType { get; public set; }
    [NullableAttribute("2")]
public string Prefix { get; public set; }
    public bool IsDynamicType { get; public set; }
    public ResolvedParameter(Type resolvedType);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Name();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public Type get_ResolvedType();
    [CompilerGeneratedAttribute]
public void set_ResolvedType(Type value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Prefix();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Prefix(string value);
    [CompilerGeneratedAttribute]
public bool get_IsDynamicType();
    [CompilerGeneratedAttribute]
public void set_IsDynamicType(bool value);
    public virtual string ToString();
    public StringBuilder Append(StringBuilder sb);
    protected virtual void AppendTypeName(StringBuilder sb);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class System.Diagnostics.StringBuilderExtentions : object {
    [ExtensionAttribute]
public static StringBuilder AppendDemystified(StringBuilder builder, Exception exception);
    [ExtensionAttribute]
private static void AppendInnerException(StringBuilder builder, Exception exception);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class System.Diagnostics.TypeNameHelper : object {
    public static Dictionary`2<Type, string> BuiltInTypeNames;
    public static Dictionary`2<string, string> FSharpTypeNames;
    private static TypeNameHelper();
    public static string GetTypeDisplayName(Type type, bool fullName, bool includeGenericParameterNames);
    [ExtensionAttribute]
public static StringBuilder AppendTypeDisplayName(StringBuilder builder, Type type, bool fullName, bool includeGenericParameterNames);
    public static string GetTypeNameForGenericType(Type type);
    private static void ProcessType(StringBuilder builder, Type type, DisplayNameOptions options);
    private static void ProcessArrayType(StringBuilder builder, Type type, DisplayNameOptions options);
    private static void ProcessGenericType(StringBuilder builder, Type type, Type[] genericArguments, int length, DisplayNameOptions options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Diagnostics.ValueTupleResolvedParameter : ResolvedParameter {
    [CompilerGeneratedAttribute]
private IList`1<string> <TupleNames>k__BackingField;
    public IList`1<string> TupleNames { get; }
    public ValueTupleResolvedParameter(Type resolvedType, IList`1<string> tupleNames);
    [CompilerGeneratedAttribute]
public IList`1<string> get_TupleNames();
    protected virtual void AppendTypeName(StringBuilder sb);
    private void AppendValueTupleParameterName(StringBuilder sb, Type parameterType);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[GeneratedCodeAttribute("Nerdbank.GitVersioning.Tasks", "3.4.194.9857")]
[ExcludeFromCodeCoverageAttribute]
internal static class ThisAssembly : object {
    internal static string AssemblyConfiguration;
    internal static string AssemblyFileVersion;
    internal static string AssemblyInformationalVersion;
    internal static string AssemblyName;
    internal static string AssemblyTitle;
    internal static string AssemblyVersion;
    internal static DateTime GitCommitDate;
    internal static string GitCommitId;
    internal static bool IsPrerelease;
    internal static bool IsPublicRelease;
    internal static string PublicKey;
    internal static string PublicKeyToken;
    internal static string RootNamespace;
    private static ThisAssembly();
}
