[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Blauhaus.Auth.Abstractions.AccessToken.AuthenticatedAccessToken : object {
    private Dictionary`2<string, string> _additionalHeaders;
    [CompilerGeneratedAttribute]
private string <Scheme>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Token>k__BackingField;
    public string Scheme { get; protected set; }
    public string Token { get; protected set; }
    public IReadOnlyDictionary`2<string, string> AdditionalHeaders { get; }
    public sealed virtual void SetAccessToken(string scheme, string authenticatedAccessToken);
    public sealed virtual void SetHeader(string key, string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Scheme();
    [CompilerGeneratedAttribute]
protected void set_Scheme(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Token();
    [CompilerGeneratedAttribute]
protected void set_Token(string value);
    public sealed virtual IReadOnlyDictionary`2<string, string> get_AdditionalHeaders();
    public sealed virtual void Clear();
}
[NullableContextAttribute("1")]
public interface Blauhaus.Auth.Abstractions.AccessToken.IAuthenticatedAccessToken {
    public string Scheme { get; }
    public string Token { get; }
    public IReadOnlyDictionary`2<string, string> AdditionalHeaders { get; }
    public abstract virtual void SetAccessToken(string scheme, string authenticatedAccessToken);
    public abstract virtual void SetHeader(string key, string value);
    public abstract virtual string get_Scheme();
    public abstract virtual string get_Token();
    public abstract virtual IReadOnlyDictionary`2<string, string> get_AdditionalHeaders();
    public abstract virtual void Clear();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Blauhaus.Auth.Abstractions.Builders.ClaimsPrincipalBuilder : object {
    private ClaimsPrincipal _claimsPrincipal;
    private string _authSchemeName;
    private List`1<Claim> _claims;
    public ClaimsPrincipalBuilder(bool isAuthenticated);
    public ClaimsPrincipalBuilder WithIsAuthenticatedTrue(string scheme);
    public ClaimsPrincipalBuilder WithIsAuthenticatedFalse();
    public ClaimsPrincipalBuilder With_NameIdentifier(string nameIdentifier);
    public ClaimsPrincipalBuilder With_UserObjectId(Guid userObjectId);
    public ClaimsPrincipalBuilder With_Claim(string claimType, string claimValue);
    public ClaimsPrincipal Build();
}
public static class Blauhaus.Auth.Abstractions.Claims.ClaimTypesExtended : object {
    [NullableAttribute("1")]
public static string ObjectIdentifierClaimType;
}
public static class Blauhaus.Auth.Abstractions.Errors.AuthError : object {
    public static Error AuthenticationCancelled;
    public static Error NotAuthenticated;
    public static Error IncorrectCredentials;
    public static Error InvalidIdentity;
    public static Error InvalidToken;
    public static Error NotAuthorized;
    private static AuthError();
}
[ObsoleteAttribute("Use AuthError")]
public static class Blauhaus.Auth.Abstractions.Errors.AuthErrors : object {
    public static Error AuthenticationCancelled;
    public static Error NotAuthenticated;
    public static Error InvalidIdentity;
    public static Error InvalidToken;
    public static Error NotAuthorized;
    private static AuthErrors();
}
public static class Blauhaus.Auth.Abstractions.Errors.PasswordError : object {
    public static Error TooShort(int minimum);
    public static Error TooFewSpecialCharacters(int minimum);
}
[ExtensionAttribute]
public static class Blauhaus.Auth.Abstractions.Extensions.AuthenticatedUserExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static bool IsAdminUser(IAuthenticatedUser user);
}
[ExtensionAttribute]
public static class Blauhaus.Auth.Abstractions.Ioc.IocServiceExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IIocService RegisterAccessToken(IIocService iocService);
}
[ExtensionAttribute]
public static class Blauhaus.Auth.Abstractions.Ioc.ServiceCollectionExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IServiceCollection RegisterAccessToken(IServiceCollection services);
}
public enum Blauhaus.Auth.Abstractions.Models.AuthenticationMode : Enum {
    public int value__;
    public static AuthenticationMode None;
    public static AuthenticationMode SilentLogin;
    public static AuthenticationMode ManualLogin;
    public static AuthenticationMode ResetPassword;
    public static AuthenticationMode RefreshToken;
    public static AuthenticationMode EditProfile;
}
[NullableContextAttribute("2")]
public interface Blauhaus.Auth.Abstractions.Models.IUserAuthentication {
    public bool IsAuthenticated { get; }
    public UserAuthenticationState AuthenticationState { get; }
    public AuthenticationMode AuthenticationMode { get; }
    public string AuthenticatedAccessToken { get; }
    public string AuthenticatedIdToken { get; }
    public string ErrorMessage { get; }
    public IAuthenticatedUser User { get; }
    public abstract virtual bool get_IsAuthenticated();
    public abstract virtual UserAuthenticationState get_AuthenticationState();
    public abstract virtual AuthenticationMode get_AuthenticationMode();
    public abstract virtual string get_AuthenticatedAccessToken();
    public abstract virtual string get_AuthenticatedIdToken();
    public abstract virtual string get_ErrorMessage();
    public abstract virtual IAuthenticatedUser get_User();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Blauhaus.Auth.Abstractions.Models.UserAuthentication : object {
    [CompilerGeneratedAttribute]
private UserAuthenticationState <AuthenticationState>k__BackingField;
    [CompilerGeneratedAttribute]
private AuthenticationMode <AuthenticationMode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AuthenticatedAccessToken>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AuthenticatedIdToken>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private IAuthenticatedUser <User>k__BackingField;
    public bool IsAuthenticated { get; }
    public UserAuthenticationState AuthenticationState { get; }
    public AuthenticationMode AuthenticationMode { get; }
    public string AuthenticatedAccessToken { get; }
    public string AuthenticatedIdToken { get; }
    public string ErrorMessage { get; }
    public IAuthenticatedUser User { get; }
    private UserAuthentication(UserAuthenticationState authenticationState, AuthenticationMode mode, IAuthenticatedUser user, string authToken, string idToken, string errorMessage);
    public sealed virtual bool get_IsAuthenticated();
    [CompilerGeneratedAttribute]
public sealed virtual UserAuthenticationState get_AuthenticationState();
    [CompilerGeneratedAttribute]
public sealed virtual AuthenticationMode get_AuthenticationMode();
    [CompilerGeneratedAttribute]
public sealed virtual string get_AuthenticatedAccessToken();
    [CompilerGeneratedAttribute]
public sealed virtual string get_AuthenticatedIdToken();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ErrorMessage();
    [CompilerGeneratedAttribute]
public sealed virtual IAuthenticatedUser get_User();
    [NullableContextAttribute("1")]
public static IUserAuthentication CreateAuthenticated(IAuthenticatedUser user, string accessToken, string idToken, AuthenticationMode mode);
    [NullableContextAttribute("1")]
public static IUserAuthentication CreateCancelled(AuthenticationMode mode);
    [NullableContextAttribute("1")]
public static IUserAuthentication CreateFailed(string errorMessage, AuthenticationMode mode);
}
public enum Blauhaus.Auth.Abstractions.Models.UserAuthenticationState : Enum {
    public int value__;
    public static UserAuthenticationState Authenticated;
    public static UserAuthenticationState Cancelled;
    public static UserAuthenticationState Failed;
}
[NullableContextAttribute("1")]
public interface Blauhaus.Auth.Abstractions.Services.IAuthenticatedUserFactory {
    public abstract virtual Response`1<IAuthenticatedUser> ExtractFromClaimsPrincipal(ClaimsPrincipal claimsPrincipal);
    public abstract virtual Response`1<IAuthenticatedUser> ExtractFromJwtToken(string jwtToken);
}
[NullableContextAttribute("1")]
public interface Blauhaus.Auth.Abstractions.Services.IAuthenticationClientService {
    public abstract virtual Task`1<IUserAuthentication> TryGetLoggedInUserAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<IUserAuthentication> LoginAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<IUserAuthentication> RefreshAccessTokenAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<IUserAuthentication> EditProfileAsync(CancellationToken cancellationToken);
    public abstract virtual Task LogoutAsync();
}
[NullableContextAttribute("1")]
public interface Blauhaus.Auth.Abstractions.Services.IAzureAuthenticationServerService {
    public abstract virtual Task SetCustomClaimsAsync(Guid userId, Dictionary`2<string, string> claims, CancellationToken token);
    public abstract virtual Task`1<IAuthenticatedUser> GetUserFromAzureAsync(Guid userId, CancellationToken token);
    public abstract virtual IAuthenticatedUser ExtractUserFromClaimsPrincipal(ClaimsPrincipal claimsPrincipal);
}
[NullableContextAttribute("1")]
public interface Blauhaus.Auth.Abstractions.Services.IPasswordService {
    public abstract virtual Response`1<string> CreateHashedPassword(string password);
    public abstract virtual bool IsMatch(string plainTextPassword, string hashedPassword);
}
[NullableContextAttribute("1")]
public interface Blauhaus.Auth.Abstractions.Tokens.IJwtTokenFactory {
    public abstract virtual string GenerateTokenForUser(IAuthenticatedUser authenticatedUser);
}
[NullableContextAttribute("1")]
public interface Blauhaus.Auth.Abstractions.User.IAuthenticatedUser {
    [NullableAttribute("2")]
public string EmailAddress { get; }
    public string AuthPolicy { get; }
    public String[] Scopes { get; }
    [NullableContextAttribute("2")]
public abstract virtual string get_EmailAddress();
    public abstract virtual string get_AuthPolicy();
    public abstract virtual String[] get_Scopes();
    public abstract virtual bool HasClaim(string name);
    public abstract virtual bool HasClaimValue(string name, string value);
    public abstract virtual bool TryGetClaimValue(string name, String& value);
    public abstract virtual Dictionary`2<string, string> GetClaimValuesByPrefix(string prefix);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
