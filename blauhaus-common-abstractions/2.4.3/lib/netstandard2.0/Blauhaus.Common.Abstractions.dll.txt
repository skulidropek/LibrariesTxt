[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Blauhaus.Common.Abstractions.Extensions.HasPropertiesExtensions : object {
    [ExtensionAttribute]
public static T AddProperties(T hasProperties, Dictionary`2<string, string> properties);
    [ExtensionAttribute]
public static bool TryGetValue(IHasProperties hasProperties, string key, String& value, bool allowEmpty);
    [ExtensionAttribute]
public static bool TryGetId(IHasProperties hasProperties, string key, Guid& value, bool allowEmpty);
    [ExtensionAttribute]
public static T WithValue(T hasProperties, string key, string value);
}
[NullableContextAttribute("1")]
public interface Blauhaus.Common.Abstractions.Extensions.IAsyncMultiPublisher {
    public abstract virtual Task`1<IDisposable> SubscribeAsync(Func`2<T, Task> handler, bool publishImmediately);
}
[NullableContextAttribute("1")]
public interface Blauhaus.Common.Abstractions.IAsyncCollectionPublisher {
    public abstract virtual Task`1<IDisposable> SubscribeToCollectionAsync(Func`2<IReadOnlyList`1<T>, Task> handler, Func`2<T, bool> filter);
}
[NullableContextAttribute("1")]
public interface Blauhaus.Common.Abstractions.IAsyncCollectionPublisher`1 {
    public abstract virtual Task`1<IReadOnlyList`1<T>> GetCollectionAsync();
    public abstract virtual Task AddItemAsync(T item);
    public abstract virtual Task RemoveItemAsync(T item);
}
[NullableContextAttribute("1")]
public interface Blauhaus.Common.Abstractions.IAsyncInitializable {
    public abstract virtual Task InitializeAsync();
}
[NullableContextAttribute("1")]
public interface Blauhaus.Common.Abstractions.IAsyncInitializable`1 {
    public abstract virtual Task InitializeAsync(T value);
}
[NullableContextAttribute("1")]
public interface Blauhaus.Common.Abstractions.IAsyncProvider`1 {
    public abstract virtual Task`1<T> GetAsync();
}
[NullableContextAttribute("1")]
public interface Blauhaus.Common.Abstractions.IAsyncPublisher {
    public abstract virtual Task`1<IDisposable> SubscribeAsync(Func`2<T, Task> handler, Func`2<T, bool> filter);
}
[NullableContextAttribute("1")]
public interface Blauhaus.Common.Abstractions.IAsyncPublisher`1 {
    public abstract virtual Task`1<IDisposable> SubscribeAsync(Func`2<T, Task> handler, Func`2<T, bool> filter);
}
[NullableContextAttribute("1")]
public interface Blauhaus.Common.Abstractions.IAsyncReloadable {
    public abstract virtual Task ReloadAsync();
}
public interface Blauhaus.Common.Abstractions.Identities.ITypedIdentity {
    public Guid Id { get; }
    public Guid TypeId { get; }
    public abstract virtual Guid get_Id();
    public abstract virtual Guid get_TypeId();
}
public interface Blauhaus.Common.Abstractions.IHasId {
}
[NullableContextAttribute("1")]
public interface Blauhaus.Common.Abstractions.IHasId`1 {
    public TId Id { get; }
    public abstract virtual TId get_Id();
}
[NullableContextAttribute("1")]
public interface Blauhaus.Common.Abstractions.IHasName {
    public string Name { get; }
    public abstract virtual string get_Name();
}
public interface Blauhaus.Common.Abstractions.IHasNameValue {
}
[NullableContextAttribute("1")]
public interface Blauhaus.Common.Abstractions.IHasNameValue`1 {
    public TValue Value { get; }
    public abstract virtual TValue get_Value();
}
[NullableContextAttribute("2")]
public interface Blauhaus.Common.Abstractions.IHasParentId`1 {
    public Guid ParentId { get; }
    public abstract virtual Guid get_ParentId();
}
[NullableContextAttribute("1")]
public interface Blauhaus.Common.Abstractions.IHasProperties {
    public Dictionary`2<string, string> Properties { get; }
    public abstract virtual Dictionary`2<string, string> get_Properties();
}
public interface Blauhaus.Common.Abstractions.IHasUserId {
}
[NullableContextAttribute("1")]
public interface Blauhaus.Common.Abstractions.IHasUserId`1 {
    public TId UserId { get; }
    public abstract virtual TId get_UserId();
}
public interface Blauhaus.Common.Abstractions.IInitializable {
    public abstract virtual void Initialize();
}
[NullableContextAttribute("1")]
public interface Blauhaus.Common.Abstractions.IInitializable`1 {
    public abstract virtual void Initialize(T initialValue);
}
public interface Blauhaus.Common.Abstractions.IIsVisible {
    public bool IsVisible { get; public set; }
    public abstract virtual bool get_IsVisible();
    public abstract virtual void set_IsVisible(bool value);
}
[NullableContextAttribute("1")]
public interface Blauhaus.Common.Abstractions.IKeyValueStore {
    public abstract virtual Task`1<string> GetAsync(string key);
    public abstract virtual Task SetAsync(string key, string value);
    public abstract virtual bool Remove(string key);
}
[NullableContextAttribute("1")]
public interface Blauhaus.Common.Abstractions.IPublisher {
    public abstract virtual IDisposable Subscribe(Func`1<T> handler);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
