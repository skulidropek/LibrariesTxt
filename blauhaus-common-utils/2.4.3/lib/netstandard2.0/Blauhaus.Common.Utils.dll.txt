[AttributeUsageAttribute("32767")]
public class Blauhaus.Common.Utils.Attributes.PreserveAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <Conditional>k__BackingField;
    public bool Conditional { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Conditional();
    [CompilerGeneratedAttribute]
public void set_Conditional(bool value);
}
public class Blauhaus.Common.Utils.Disposables.ActionDisposable : object {
    [NullableAttribute("2")]
private Action _disposeAction;
    [NullableContextAttribute("1")]
public ActionDisposable(Action disposeAction);
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public abstract class Blauhaus.Common.Utils.Disposables.BaseAsyncCollectionPublisher`1 : BaseImmediatePublisher`1<IReadOnlyList`1<T>> {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
protected List`1<T> Items;
    [AsyncStateMachineAttribute("Blauhaus.Common.Utils.Disposables.BaseAsyncCollectionPublisher`1/<GetCollectionAsync>d__1")]
public sealed virtual Task`1<IReadOnlyList`1<T>> GetCollectionAsync();
    [AsyncStateMachineAttribute("Blauhaus.Common.Utils.Disposables.BaseAsyncCollectionPublisher`1/<AddItemAsync>d__2")]
public sealed virtual Task AddItemAsync(T item);
    [AsyncStateMachineAttribute("Blauhaus.Common.Utils.Disposables.BaseAsyncCollectionPublisher`1/<RemoveItemAsync>d__3")]
public sealed virtual Task RemoveItemAsync(T item);
    [AsyncStateMachineAttribute("Blauhaus.Common.Utils.Disposables.BaseAsyncCollectionPublisher`1/<GetAsync>d__4")]
protected virtual Task`1<IReadOnlyList`1<T>> GetAsync();
    protected abstract virtual Task`1<IEnumerable`1<T>> LoadItemsAsync();
}
public abstract class Blauhaus.Common.Utils.Disposables.BaseDisposable : object {
    private bool _isDisposed;
    [AsyncStateMachineAttribute("Blauhaus.Common.Utils.Disposables.BaseDisposable/<DisposeAsync>d__1")]
public sealed virtual ValueTask DisposeAsync();
    protected virtual ValueTask DisposeAsyncCore();
}
public abstract class Blauhaus.Common.Utils.Disposables.BaseImmediatePublisher`1 : BasePublisher {
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Blauhaus.Common.Utils.Disposables.BaseImmediatePublisher`1/<SubscribeAsync>d__0")]
public virtual Task`1<IDisposable> SubscribeAsync(Func`2<T, Task> handler, Func`2<T, bool> filter);
    protected abstract virtual Task`1<T> GetAsync();
}
public abstract class Blauhaus.Common.Utils.Disposables.BaseMultiPublisher : BasePublisher {
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Blauhaus.Common.Utils.Disposables.BaseMultiPublisher/<SubscribeAsync>d__0`1")]
public sealed virtual Task`1<IDisposable> SubscribeAsync(Func`2<T, Task> handler, bool publishImmediately);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Blauhaus.Common.Utils.Disposables.BasePublisher : BaseDisposable {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ConcurrentDictionary`2<string, ConcurrentDictionary`2<Guid, Func`2<object, Task>>> _subscriptions;
    public virtual Task`1<IDisposable> SubscribeAsync(Func`2<T, Task> handler, Func`2<T, bool> filter);
    protected void AddHandler(Func`2<T, Task> handler, Func`2<T, bool> filter);
    private IDisposable AddSubscription(Func`2<T, Task> handler, string subscriptionName, Func`2<T, bool> filter);
    protected IDisposable AddSubscriber(Func`2<T, Task> handler, Func`2<T, bool> filter);
    protected IDisposable AddSubscriber(Func`2<T, Task> handler, string name, Func`2<T, bool> filter);
    [AsyncStateMachineAttribute("Blauhaus.Common.Utils.Disposables.BasePublisher/<UpdateSubscribersAsync>d__6`1")]
protected Task UpdateSubscribersAsync(T update);
    private static string GetName();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Blauhaus.Common.Utils.Disposables.Disposables : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<IDisposable> _disposables;
    public Disposables(IDisposable[] disposables);
    public void Add(IDisposable disposable);
    public void Remove(IDisposable disposable);
    public sealed virtual void Dispose();
}
public class Blauhaus.Common.Utils.ExecutionDelayer.ImmediateTaskExecutor : object {
    [CompilerGeneratedAttribute]
private bool <IsExecuting>k__BackingField;
    public bool IsExecuting { get; public set; }
    [NullableContextAttribute("1")]
public sealed virtual Task ExecuteAfterDelayAsync(Func`1<Task> taskToExecuteAfterDelay, int delayMs);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsExecuting();
    [CompilerGeneratedAttribute]
public void set_IsExecuting(bool value);
    [NullableContextAttribute("1")]
public void ExecuteAfterDelay(Func`1<Task> taskToExecuteAfterDelay, int delayMs);
}
[NullableContextAttribute("1")]
public interface Blauhaus.Common.Utils.ExecutionDelayer.ITaskExecutionDelayer {
    public bool IsExecuting { get; }
    public abstract virtual Task ExecuteAfterDelayAsync(Func`1<Task> taskToExecuteAfterDelay, int delayMs);
    public abstract virtual bool get_IsExecuting();
}
public class Blauhaus.Common.Utils.ExecutionDelayer.TaskExecutionDelayer : object {
    [NullableAttribute("1")]
private CancellationTokenSource _throttleCts;
    [CompilerGeneratedAttribute]
private bool <IsExecuting>k__BackingField;
    public bool IsExecuting { get; private set; }
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Blauhaus.Common.Utils.ExecutionDelayer.TaskExecutionDelayer/<ExecuteAfterDelayAsync>d__1")]
public sealed virtual Task ExecuteAfterDelayAsync(Func`1<Task> taskToExecuteAfterDelay, int delayMs);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsExecuting();
    [CompilerGeneratedAttribute]
private void set_IsExecuting(bool value);
}
[ExtensionAttribute]
public static class Blauhaus.Common.Utils.Extensions.ExpressionExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static string ToPropertyName(Expression`1<T> expression);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Blauhaus.Common.Utils.Extensions.StringExtensions : object {
    [ExtensionAttribute]
public static string ExtractValueBetweenText(string stringContainingTags, string beginText, string endText);
    [ExtensionAttribute]
public static string ExtractValueBetweenTags(string stringContainingTags, string tagName);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static bool IsValidEmail(string email);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Blauhaus.Common.Utils.NotifyPropertyChanged.BaseBindableObject : object {
    private static object Locker;
    protected Dictionary`2<string, object> Properties;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    private static BaseBindableObject();
    protected void InitiazeValue(string propertyName, object value);
    protected bool SetProperty(T value, string propertyName);
    protected bool SetProperty(T value, Action onChanged, string propertyName);
    protected T GetProperty(T defaultValue, string propertyName);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    protected void RaisePropertyChanged(string propertyName);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
