[NullableContextAttribute("1")]
public interface Blauhaus.DeviceServices.Abstractions.Application.IApplicationInfoService {
    public string CurrentVersion { get; }
    public abstract virtual string get_CurrentVersion();
}
public enum Blauhaus.DeviceServices.Abstractions.Connectivity.ConnectionAccess : Enum {
    public int value__;
    public static ConnectionAccess Unknown;
    public static ConnectionAccess None;
    public static ConnectionAccess Local;
    public static ConnectionAccess ConstrainedInternet;
    public static ConnectionAccess Internet;
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Blauhaus.DeviceServices.Abstractions.Connectivity.ConnectionState : BaseValueObject`1<ConnectionState> {
    [CompilerGeneratedAttribute]
private IEnumerable`1<ConnectionType> <Types>k__BackingField;
    [CompilerGeneratedAttribute]
private ConnectionAccess <Access>k__BackingField;
    public static ConnectionState Disconnected;
    public static ConnectionState Wifi;
    public static ConnectionState Cellular;
    public IEnumerable`1<ConnectionType> Types { get; }
    public ConnectionAccess Access { get; }
    public bool IsConnected { get; }
    public ConnectionState(ConnectionAccess access, IEnumerable`1<ConnectionType> types);
    public ConnectionState(ConnectionAccess access, ConnectionType[] types);
    private static ConnectionState();
    [CompilerGeneratedAttribute]
public IEnumerable`1<ConnectionType> get_Types();
    [CompilerGeneratedAttribute]
public ConnectionAccess get_Access();
    public bool get_IsConnected();
    public virtual string ToString();
    protected virtual int GetHashCodeCore();
    protected virtual bool EqualsCore(ConnectionState other);
}
public enum Blauhaus.DeviceServices.Abstractions.Connectivity.ConnectionType : Enum {
    public int value__;
    public static ConnectionType Unknown;
    public static ConnectionType Bluetooth;
    public static ConnectionType Cellular;
    public static ConnectionType Ethernet;
    public static ConnectionType WiFi;
}
public static class Blauhaus.DeviceServices.Abstractions.Connectivity.ConnectivityError : object {
    public static Error NotConnected;
    private static ConnectivityError();
}
[NullableContextAttribute("1")]
public interface Blauhaus.DeviceServices.Abstractions.Connectivity.IConnectivityService {
    public bool IsConnectedToInternet { get; }
    public bool IsConnectionUsingCellularData { get; }
    public ConnectionState CurrentConnection { get; }
    public abstract virtual bool get_IsConnectedToInternet();
    public abstract virtual bool get_IsConnectionUsingCellularData();
    public abstract virtual ValueTask`1<ConnectionState> GetConnectionStateAsync();
    public abstract virtual ConnectionState get_CurrentConnection();
}
[NullableContextAttribute("1")]
public interface Blauhaus.DeviceServices.Abstractions.DeviceInfo.IDeviceInfoService {
    public IDeviceType Type { get; }
    public IRuntimePlatform Platform { get; }
    public string OperatingSystemVersion { get; }
    public string Manufacturer { get; }
    public string Model { get; }
    public string AppDataFolder { get; }
    public CultureInfo CurrentCulture { get; }
    [ObsoleteAttribute("Prefer GetDeviceIdentifierAsync")]
public string DeviceUniqueIdentifier { get; }
    public abstract virtual IDeviceType get_Type();
    public abstract virtual IRuntimePlatform get_Platform();
    public abstract virtual string get_OperatingSystemVersion();
    public abstract virtual string get_Manufacturer();
    public abstract virtual string get_Model();
    public abstract virtual string get_AppDataFolder();
    public abstract virtual CultureInfo get_CurrentCulture();
    public abstract virtual string get_DeviceUniqueIdentifier();
    public abstract virtual ValueTask`1<string> GetDeviceIdentifierAsync();
}
public interface Blauhaus.DeviceServices.Abstractions.Haptics.IHapticFeedbackService {
    public abstract virtual void Vibrate(TimeSpan duration);
}
public enum Blauhaus.DeviceServices.Abstractions.Permissions.DevicePermission : Enum {
    public int value__;
    public static DevicePermission Battery;
    public static DevicePermission CalendarRead;
    public static DevicePermission CalendarWrite;
    public static DevicePermission Camera;
    public static DevicePermission ContactsRead;
    public static DevicePermission ContactsWrite;
    public static DevicePermission Flashlight;
    public static DevicePermission LaunchApp;
    public static DevicePermission LocationWhenInUse;
    public static DevicePermission LocationAlways;
    public static DevicePermission Maps;
    public static DevicePermission Media;
    public static DevicePermission Microphone;
    public static DevicePermission NetworkState;
    public static DevicePermission Phone;
    public static DevicePermission Photos;
    public static DevicePermission Reminders;
    public static DevicePermission Sensors;
    public static DevicePermission Sms;
    public static DevicePermission Speech;
    public static DevicePermission StorageRead;
    public static DevicePermission StorageWrite;
    public static DevicePermission Vibrate;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Blauhaus.DeviceServices.Abstractions.Permissions.DevicePermissionErrors : object {
    public static Error PermissionDenied(string permissionName);
    public static Error PermissionDisabled(string permissionName);
    public static Error PermissionRestricted(string permissionName);
    public static Error PermissionUnknown(string permissionName);
    public static Error PermissionException(string permissionName);
    [ExtensionAttribute]
public static bool IsPermissionError(Error error);
    [ExtensionAttribute]
public static bool IsPermissionError(Exception exception);
}
[NullableContextAttribute("1")]
public interface Blauhaus.DeviceServices.Abstractions.Permissions.IDevicePermissionsService {
    public abstract virtual Task`1<Response> EnsurePermissionGrantedAsync(DevicePermission permission);
    public abstract virtual Task`1<Response> CheckPermissionAsync(DevicePermission permission);
    public abstract virtual Task`1<Response> RequestPermissionAsync(DevicePermission permission);
}
public interface Blauhaus.DeviceServices.Abstractions.SecureStorage.ISecureStorageService {
}
public interface Blauhaus.DeviceServices.Abstractions.Settings.ISettingsService {
}
[NullableContextAttribute("1")]
public interface Blauhaus.DeviceServices.Abstractions.Share.IShareService {
    public abstract virtual Task`1<Response> ShareFileAsync(Byte[] fileBytes, string filename, string title);
}
[NullableContextAttribute("1")]
public interface Blauhaus.DeviceServices.Abstractions.Thread.IThreadService {
    public bool IsOnMainThread { get; }
    public abstract virtual bool get_IsOnMainThread();
    public abstract virtual void InvokeOnMainThread(Action action);
    public abstract virtual void InvokeOnMainThread(Task task);
    public abstract virtual Task`1<T> InvokeOnMainThreadAsync(Func`1<T> task);
    public abstract virtual Task InvokeOnMainThreadAsync(Action action);
    public abstract virtual Task`1<T> InvokeOnMainThreadAsync(Func`1<Task`1<T>> task);
    public abstract virtual Task InvokeOnMainThreadAsync(Func`1<Task> task);
    public abstract virtual Task`1<SynchronizationContext> GetMainThreadSynchronizationContextAsync();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
