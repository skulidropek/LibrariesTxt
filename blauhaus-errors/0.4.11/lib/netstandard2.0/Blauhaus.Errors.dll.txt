[IsReadOnlyAttribute]
[PreserveAttribute]
public class Blauhaus.Errors.Error : ValueType {
    [CompilerGeneratedAttribute]
private string <Code>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private static Error <None>k__BackingField;
    public static Error Undefined;
    public static Error Cancelled;
    public static Error Timeout;
    public string Code { get; }
    public string Description { get; }
    public static Error None { get; }
    [JsonConstructorAttribute]
public Error(string code, string description);
    private static Error();
    [CompilerGeneratedAttribute]
public string get_Code();
    [CompilerGeneratedAttribute]
public string get_Description();
    public static Error Create(string errorDescription, string errorCode);
    public static Error Deserialize(string serializedError);
    [CompilerGeneratedAttribute]
public static Error get_None();
    public static Error Generic(string description);
    public static Error Unexpected(string errorMessage);
    public static Error NotFound();
    public static Error NotFound(string name);
    public static Error NotFound();
    public static Error RequiredValue();
    public static Error RequiredValue(string propertyName);
    public static Error RequiredValue();
    public static Error RequiredValue(Expression`1<Func`2<T, object>> property);
    public static Error InvalidValue();
    public static Error InvalidValue(string reason);
    public static Error InvalidValue();
    public static Error InvalidValue(Expression`1<Func`2<T, object>> property);
    public static Error InvalidValue(Expression`1<Func`2<T, object>> property, string reason);
    public virtual string ToString();
    public sealed virtual bool Equals(Error other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(Error left, Error right);
    public static bool op_Inequality(Error left, Error right);
}
[PreserveAttribute]
public class Blauhaus.Errors.ErrorException : Exception {
    [CompilerGeneratedAttribute]
private Error <Error>k__BackingField;
    public Error Error { get; }
    public ErrorException(Error error, Exception innerException);
    public ErrorException(Error error);
    public ErrorException(string serializedError);
    [CompilerGeneratedAttribute]
public Error get_Error();
}
[ExtensionAttribute]
public static class Blauhaus.Errors.Extensions.ExceptionExtensions : object {
    [ExtensionAttribute]
public static bool IsErrorException(Exception exception, Error error);
    [ExtensionAttribute]
public static bool IsErrorException(Exception exception);
    [ExtensionAttribute]
public static Error ToError(Exception exception);
    [ExtensionAttribute]
public static bool TryGetError(Exception exception, Nullable`1& error);
}
[ExtensionAttribute]
public static class Blauhaus.Errors.Extensions.StringExtensions : object {
    private static JsonSerializerOptions _serializerOptions;
    private static StringExtensions();
    [ExtensionAttribute]
public static bool IsError(string serializedError, Error expectedError);
    [ExtensionAttribute]
public static bool IsError(string serializedError, Error expectedError, Error& error);
    [ExtensionAttribute]
public static bool IsError(string serializedError);
    [ExtensionAttribute]
public static bool IsError(string serializedError, Error& error);
    [ExtensionAttribute]
public static Error ToError(string serializedError);
}
[ExtensionAttribute]
public static class Blauhaus.Errors.Extensions.ValidationExtensions : object {
    [ExtensionAttribute]
public static string ThrowIfNullOrWhiteSpace(string value);
    [ExtensionAttribute]
public static string ThrowIfNullOrWhiteSpace(string value, Expression`1<Func`2<T, object>> property);
    [ExtensionAttribute]
public static Guid ThrowIfEmpty(Guid value);
    [ExtensionAttribute]
public static Guid ThrowIfEmpty(Guid value, Expression`1<Func`2<T, object>> property);
}
public interface Blauhaus.Errors.Handler.IErrorHandler {
    public abstract virtual Task HandleExceptionAsync(object sender, Exception exception);
    public abstract virtual Task HandleErrorAsync(string errorMessage);
    public abstract virtual Task HandleErrorAsync(Error errorMessage);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
