public abstract class Blauhaus.Ioc.Abstractions.BaseIocService : object {
    public sealed virtual void RegisterType(IocLifetime lifeTime);
    public sealed virtual void RegisterImplementation(IocLifetime lifeTime);
    public sealed virtual void RegisterInstance(T instance);
    public sealed virtual T Resolve();
    public sealed virtual object ResolveType(Type type);
    public sealed virtual bool TryResolve(T& instance);
    public sealed virtual void Dispose();
    protected abstract virtual void RegisterTypeWithContainer(IocLifetime lifeTime);
    protected abstract virtual void RegisterImplementationWithContainer(IocLifetime lifeTime);
    protected abstract virtual void RegisterInstanceWithContainer(T instance);
    protected abstract virtual object ResolveTypeFromContainer(Type type);
    protected abstract virtual T ResolveFromContainer();
    protected abstract virtual void Dispose(bool disposing);
}
public interface Blauhaus.Ioc.Abstractions.IIocService {
    public abstract virtual void RegisterType(IocLifetime lifeTime);
    public abstract virtual void RegisterImplementation(IocLifetime lifeTime);
    public abstract virtual void RegisterInstance(T instance);
    public abstract virtual T Resolve();
    public abstract virtual object ResolveType(Type type);
    public abstract virtual bool TryResolve(T& instance);
}
public class Blauhaus.Ioc.Abstractions.IocContainerException : Exception {
    public IocContainerException(string message, Exception innerException);
}
public enum Blauhaus.Ioc.Abstractions.IocLifetime : Enum {
    public int value__;
    public static IocLifetime Transient;
    public static IocLifetime Singleton;
}
public interface Blauhaus.Ioc.Abstractions.IServiceLocator {
    public abstract virtual T Resolve();
    public abstract virtual object Resolve(Type type);
    public abstract virtual T ResolveAs(Type type);
    public abstract virtual Task`1<T> ResolveAndInitializeAsync(TId id);
    public abstract virtual IDisposable ResetScope();
}
public class Blauhaus.Ioc.Abstractions.StartupTasks : List`1<Func`1<Task>> {
    public StartupTasks(Func`1[] tasks);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
