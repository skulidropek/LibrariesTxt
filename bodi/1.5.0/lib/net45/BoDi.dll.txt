public class BoDi.BoDiConfigurationSection : ConfigurationSection {
    [ConfigurationPropertyAttribute]
[ConfigurationCollectionAttribute("BoDi.ContainerRegistrationCollection")]
public ContainerRegistrationCollection Registrations { get; public set; }
    public ContainerRegistrationCollection get_Registrations();
    public void set_Registrations(ContainerRegistrationCollection value);
}
public class BoDi.ContainerRegistrationCollection : ConfigurationElementCollection {
    protected virtual ConfigurationElement CreateNewElement();
    protected virtual object GetElementKey(ConfigurationElement element);
    public void Add(string implementationType, string interfaceType, string name);
}
public class BoDi.ContainerRegistrationConfigElement : ConfigurationElement {
    [ConfigurationPropertyAttribute("as")]
public string Interface { get; public set; }
    [ConfigurationPropertyAttribute("type")]
public string Implementation { get; public set; }
    [ConfigurationPropertyAttribute("name")]
public string Name { get; public set; }
    public string get_Interface();
    public void set_Interface(string value);
    public string get_Implementation();
    public void set_Implementation(string value);
    public string get_Name();
    public void set_Name(string value);
}
public interface BoDi.IContainedInstance {
    public IObjectContainer Container { get; }
    public abstract virtual IObjectContainer get_Container();
}
public interface BoDi.IObjectContainer {
    [CompilerGeneratedAttribute]
public abstract virtual void add_ObjectCreated(Action`1<object> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ObjectCreated(Action`1<object> value);
    public abstract virtual IStrategyRegistration RegisterTypeAs(string name);
    public abstract virtual void RegisterInstanceAs(TInterface instance, string name, bool dispose);
    public abstract virtual void RegisterInstanceAs(object instance, Type interfaceType, string name, bool dispose);
    public abstract virtual IStrategyRegistration RegisterFactoryAs(Func`2<IObjectContainer, TInterface> factoryDelegate, string name);
    public abstract virtual T Resolve();
    public abstract virtual T Resolve(string name);
    public abstract virtual object Resolve(Type typeToResolve, string name);
    public abstract virtual IEnumerable`1<T> ResolveAll();
    public abstract virtual bool IsRegistered();
    public abstract virtual bool IsRegistered(string name);
}
public interface BoDi.IStrategyRegistration {
    public abstract virtual IStrategyRegistration InstancePerDependency();
    public abstract virtual IStrategyRegistration InstancePerContext();
}
public class BoDi.ObjectContainer : object {
    private static string REGISTERED_NAME_PARAMETER_NAME;
    private static string DISABLE_THREAD_SAFE_RESOLUTION;
    private bool isDisposed;
    private ObjectContainer baseContainer;
    private ConcurrentDictionary`2<RegistrationKey, IRegistration> registrations;
    private List`1<RegistrationKey> resolvedKeys;
    private Dictionary`2<RegistrationKey, object> objectPool;
    [CompilerGeneratedAttribute]
private static bool <DisableThreadSafeResolution>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<object> ObjectCreated;
    [CompilerGeneratedAttribute]
private static TimeSpan <ConcurrentObjectResolutionTimeout>k__BackingField;
    public static bool DisableThreadSafeResolution { get; public set; }
    public IObjectContainer BaseContainer { get; }
    public static TimeSpan ConcurrentObjectResolutionTimeout { get; public set; }
    private static ObjectContainer();
    public ObjectContainer(IObjectContainer baseContainer);
    [CompilerGeneratedAttribute]
public static bool get_DisableThreadSafeResolution();
    [CompilerGeneratedAttribute]
public static void set_DisableThreadSafeResolution(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ObjectCreated(Action`1<object> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ObjectCreated(Action`1<object> value);
    public IObjectContainer get_BaseContainer();
    [CompilerGeneratedAttribute]
public static TimeSpan get_ConcurrentObjectResolutionTimeout();
    [CompilerGeneratedAttribute]
public static void set_ConcurrentObjectResolutionTimeout(TimeSpan value);
    public IStrategyRegistration RegisterTypeAs(Type implementationType, string name);
    public sealed virtual IStrategyRegistration RegisterTypeAs(string name);
    public IStrategyRegistration RegisterTypeAs(Type implementationType, Type interfaceType);
    private bool IsValidTypeMapping(Type implementationType, Type interfaceType);
    private static IEnumerable`1<Type> GetBaseTypes(Type type);
    private RegistrationKey CreateNamedInstanceDictionaryKey(Type targetType);
    private void AddRegistration(RegistrationKey key, IRegistration registration);
    private IRegistration EnsureImplicitRegistration(RegistrationKey key);
    private void AddNamedDictionaryRegistration(RegistrationKey key);
    private IStrategyRegistration RegisterTypeAs(Type implementationType, Type interfaceType, string name);
    public sealed virtual void RegisterInstanceAs(object instance, Type interfaceType, string name, bool dispose);
    private static object GetPoolableInstance(object instance, bool dispose);
    public sealed virtual void RegisterInstanceAs(TInterface instance, string name, bool dispose);
    public IStrategyRegistration RegisterFactoryAs(Func`1<TInterface> factoryDelegate, string name);
    public sealed virtual IStrategyRegistration RegisterFactoryAs(Func`2<IObjectContainer, TInterface> factoryDelegate, string name);
    public void RegisterFactoryAs(Delegate factoryDelegate, string name);
    public IStrategyRegistration RegisterFactoryAs(Delegate factoryDelegate, Type interfaceType, string name);
    public sealed virtual bool IsRegistered();
    public sealed virtual bool IsRegistered(string name);
    private void AssertNotResolved(RegistrationKey interfaceType);
    private void ClearRegistrations(RegistrationKey registrationKey);
    public void RegisterFromConfiguration();
    public void RegisterFromConfiguration(ContainerRegistrationCollection containerRegistrationCollection);
    private void RegisterFromConfiguration(ContainerRegistrationConfigElement registrationConfigElement);
    public sealed virtual T Resolve();
    public sealed virtual T Resolve(string name);
    public sealed virtual object Resolve(Type typeToResolve, string name);
    public sealed virtual IEnumerable`1<T> ResolveAll();
    private object Resolve(Type typeToResolve, ResolutionList resolutionPath, string name);
    private Nullable`1<KeyValuePair`2<ObjectContainer, IRegistration>> GetRegistrationResult(RegistrationKey keyToResolve);
    private bool IsDefaultNamedInstanceDictionaryKey(RegistrationKey keyToResolve);
    private bool IsSpecialNamedInstanceDictionaryKey(RegistrationKey keyToResolve);
    private bool IsNamedInstanceDictionaryKey(RegistrationKey keyToResolve);
    private object GetPooledObject(RegistrationKey pooledObjectKey);
    private bool GetObjectFromPool(RegistrationKey pooledObjectKey, Object& obj);
    private object ResolveObject(RegistrationKey keyToResolve, ResolutionList resolutionPath);
    private object CreateObject(Type type, ResolutionList resolutionPath, RegistrationKey keyToResolve);
    protected virtual void OnObjectCreated(object obj);
    private object InvokeFactoryDelegate(Delegate factoryDelegate, ResolutionList resolutionPath, RegistrationKey keyToResolve);
    private Object[] ResolveArguments(IEnumerable`1<ParameterInfo> parameters, RegistrationKey keyToResolve, ResolutionList resolutionPath);
    private object ResolveRegisteredName(RegistrationKey keyToResolve);
    private bool IsRegisteredNameParameter(ParameterInfo parameterInfo);
    public virtual string ToString();
    private void AssertNotDisposed();
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
private T <ResolveAll>b__59_1(KeyValuePair`2<RegistrationKey, IRegistration> x);
    [CompilerGeneratedAttribute]
private bool <Dispose>b__76_0(IDisposable o);
}
public class BoDi.ObjectContainerException : Exception {
    public ObjectContainerException(string message, Type[] resolutionPath);
    protected ObjectContainerException(SerializationInfo info, StreamingContext context);
    private static string GetMessage(string message, Type[] resolutionPath);
}
