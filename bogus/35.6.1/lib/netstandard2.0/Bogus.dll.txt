public class Bogus.Binder : object {
    protected internal BindingFlags BindingFlags;
    public Binder(BindingFlags bindingFlags);
    public virtual Dictionary`2<string, MemberInfo> GetMembers(Type t);
    protected virtual MemberInfo UseBaseTypeDeclaredPropertyInfo(Type t, MemberInfo m);
}
public class Bogus.BogusException : Exception {
    public BogusException(string message);
    public BogusException(string message, Exception innerException);
}
[DefaultMemberAttribute("Item")]
public class Bogus.Bson.BArray : BValue {
    private List`1<BValue> items;
    public BValue Item { get; public set; }
    public bool HasValues { get; }
    public int Count { get; }
    public virtual BValue get_Item(int index);
    public virtual void set_Item(int index, BValue value);
    public bool get_HasValues();
    public int get_Count();
    public virtual void Add(BValue v);
    public int IndexOf(BValue item);
    public void Insert(int index, BValue item);
    public bool Remove(BValue v);
    public void RemoveAt(int index);
    public virtual void Clear();
    public virtual bool Contains(BValue v);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[DefaultMemberAttribute("Item")]
public class Bogus.Bson.BObject : BValue {
    private Dictionary`2<string, BValue> map;
    public ICollection`1<string> Keys { get; }
    public ICollection`1<BValue> Values { get; }
    public int Count { get; }
    public BValue Item { get; public set; }
    public ICollection`1<string> get_Keys();
    public ICollection`1<BValue> get_Values();
    public int get_Count();
    public virtual BValue get_Item(string key);
    public virtual void set_Item(string key, BValue value);
    public virtual void Clear();
    public virtual void Add(string key, BValue value);
    public virtual bool Contains(BValue v);
    public virtual bool ContainsKey(string key);
    public bool Remove(string key);
    public bool TryGetValue(string key, BValue& value);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class Bogus.Bson.Bson : object {
    private MemoryStream stream;
    private BinaryReader reader;
    private Bson(Byte[] buf);
    public static BObject Load(Byte[] buf);
    private BValue DecodeElement(String& name);
    private BObject DecodeDocument();
    private BArray DecodeArray();
    private string DecodeString();
    private string DecodeCString();
    public static Byte[] Serialize(BObject obj);
    private void EncodeElement(MemoryStream ms, string name, BValue v);
    private void EncodeDocument(MemoryStream ms, BObject obj);
    private void EncodeArray(MemoryStream ms, BArray lst);
    private void EncodeBinary(MemoryStream ms, Byte[] buf);
    private void EncodeCString(MemoryStream ms, string v);
    private void EncodeString(MemoryStream ms, string v);
    private void EncodeDouble(MemoryStream ms, double v);
    private void EncodeBool(MemoryStream ms, bool v);
    private void EncodeInt32(MemoryStream ms, int v);
    private void EncodeInt64(MemoryStream ms, long v);
    private void EncodeUTCDateTime(MemoryStream ms, DateTime dt);
}
[DefaultMemberAttribute("Item")]
public class Bogus.Bson.BValue : object {
    private BValueType valueType;
    private double _double;
    private string _string;
    private Byte[] _binary;
    private bool _bool;
    private DateTime _dateTime;
    private int _int32;
    private long _int64;
    public BValueType ValueType { get; }
    public double DoubleValue { get; }
    public int Int32Value { get; }
    public long Int64Value { get; }
    public Byte[] BinaryValue { get; }
    public DateTime DateTimeValue { get; }
    public string StringValue { get; }
    public bool BoolValue { get; }
    public bool IsNone { get; }
    public BValue Item { get; public set; }
    public BValue Item { get; public set; }
    protected BValue(BValueType valueType);
    public BValue(double v);
    public BValue(string v);
    public BValue(Byte[] v);
    public BValue(bool v);
    public BValue(DateTime dt);
    public BValue(int v);
    public BValue(long v);
    public BValueType get_ValueType();
    public double get_DoubleValue();
    public int get_Int32Value();
    public long get_Int64Value();
    public Byte[] get_BinaryValue();
    public DateTime get_DateTimeValue();
    public string get_StringValue();
    public bool get_BoolValue();
    public bool get_IsNone();
    public virtual BValue get_Item(string key);
    public virtual void set_Item(string key, BValue value);
    public virtual BValue get_Item(int index);
    public virtual void set_Item(int index, BValue value);
    public virtual void Clear();
    public virtual void Add(string key, BValue value);
    public virtual void Add(BValue value);
    public virtual bool Contains(BValue v);
    public virtual bool ContainsKey(string key);
    public static BValue op_Implicit(double v);
    public static BValue op_Implicit(int v);
    public static BValue op_Implicit(long v);
    public static BValue op_Implicit(Byte[] v);
    public static BValue op_Implicit(DateTime v);
    public static BValue op_Implicit(string v);
    public static double op_Implicit(BValue v);
    public static int op_Implicit(BValue v);
    public static long op_Implicit(BValue v);
    public static Byte[] op_Implicit(BValue v);
    public static DateTime op_Implicit(BValue v);
    public static string op_Implicit(BValue v);
    public static bool op_Equality(BValue a, object b);
    public static bool op_Inequality(BValue a, object b);
}
public enum Bogus.Bson.BValueType : Enum {
    public int value__;
    public static BValueType Double;
    public static BValueType String;
    public static BValueType Array;
    public static BValueType Binary;
    public static BValueType Boolean;
    public static BValueType UTCDateTime;
    public static BValueType None;
    public static BValueType Int32;
    public static BValueType Int64;
    public static BValueType Object;
}
public static class Bogus.Chars : object {
    public static string LowerCase;
    public static string UpperCase;
    public static string Numbers;
    public static string HexLowerCase;
    public static string HexUpperCase;
    public static string AlphaNumericUpperCase;
    public static string AlphaNumericLowerCase;
}
public static class Bogus.Database : object {
    public static Lazy`1<ConcurrentDictionary`2<string, BObject>> Data;
    public static string ResourceNameFormat;
    private static Database();
    public static String[] GetAllLocales();
    public static bool LocaleResourceExists(string locale);
    private static string GetLocaleResourceName(string locale);
    private static ConcurrentDictionary`2<string, BObject> Initialize();
    internal static BObject DeserializeLocale(string locale);
    public static BObject GetLocale(string locale);
    public static void ResetLocale(string locale);
    public static bool HasKey(string category, string path, string locale, string fallbackLocale);
    public static BValue Get(string category, string path, string locale, string localeFallback);
    private static BValue Select(string category, string path, BValue localeRoot);
}
[AttributeUsageAttribute("4")]
public class Bogus.DataCategoryAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; public set; }
    public DataCategoryAttribute(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
}
public class Bogus.DataSet : object {
    [CompilerGeneratedAttribute]
private string <Category>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Locale>k__BackingField;
    protected SeedNotifier Notifier;
    private Randomizer randomizer;
    private static Regex parseTokensRegex;
    protected string Category { get; protected set; }
    public string Locale { get; public set; }
    public Randomizer Random { get; public set; }
    public DataSet(string locale);
    private static DataSet();
    [CompilerGeneratedAttribute]
protected string get_Category();
    [CompilerGeneratedAttribute]
protected void set_Category(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Locale();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Locale(string value);
    public Randomizer get_Random();
    public sealed virtual void set_Random(Randomizer value);
    private sealed virtual override SeedNotifier Bogus.IHasRandomizer.GetNotifier();
    public static string ResolveCategory(Type type);
    protected internal virtual BValue Get(string path);
    protected internal virtual BValue Get(string category, string path);
    protected internal virtual bool HasKey(string path, bool includeFallback);
    protected internal virtual BArray GetArray(string path);
    protected internal virtual BArray GetArray(string category, string path);
    protected internal virtual BObject GetObject(string path);
    protected internal virtual string GetRandomArrayItem(string path, Nullable`1<int> min, Nullable`1<int> max);
    protected internal virtual string GetRandomArrayItem(string category, string path, Nullable`1<int> min, Nullable`1<int> max);
    protected internal virtual BObject GetRandomBObject(string path);
    protected internal virtual string GetFormattedValue(string path);
    private string ParseTokens(string value);
    [CompilerGeneratedAttribute]
private string <ParseTokens>b__27_0(Match x);
}
public class Bogus.DataSets.Address : DataSet {
    protected Name Name;
    public Address(string locale);
    public string ZipCode(string format);
    public string City();
    public string StreetAddress(bool useFullAddress);
    public string CityPrefix();
    public string CitySuffix();
    public string StreetName();
    public string BuildingNumber();
    public string StreetSuffix();
    public string SecondaryAddress();
    public string County();
    public string Country();
    public string FullAddress();
    public string CountryCode(Iso3166Format format);
    public string State();
    public string StateAbbr();
    public double Latitude(double min, double max);
    public double Longitude(double min, double max);
    public string Direction(bool useAbbreviation);
    public string CardinalDirection(bool useAbbreviation);
    public string OrdinalDirection(bool useAbbreviation);
}
public class Bogus.DataSets.CardType : object {
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public static List`1<CardType> All;
    public static CardType Visa;
    public static CardType Mastercard;
    public static CardType Discover;
    public static CardType AmericanExpress;
    public static CardType DinersClub;
    public static CardType Jcb;
    public static CardType Switch;
    public static CardType Solo;
    public static CardType Maestro;
    public static CardType Laser;
    public static CardType Instapayment;
    internal string Value { get; }
    private CardType(string value);
    private static CardType();
    [CompilerGeneratedAttribute]
internal string get_Value();
}
public enum Bogus.DataSets.ColorFormat : Enum {
    public int value__;
    public static ColorFormat Hex;
    public static ColorFormat Rgb;
    public static ColorFormat Delimited;
}
public class Bogus.DataSets.Commerce : DataSet {
    protected static Int32[] Ean8Weights;
    protected static Int32[] Ean13Weights;
    public Commerce(string locale);
    private static Commerce();
    public string Department(int max, bool returnMax);
    public string Price(decimal min, decimal max, int decimals, string symbol);
    public String[] Categories(int num);
    public string ProductName();
    public string Color();
    public string Product();
    public string ProductAdjective();
    public string ProductMaterial();
    public string ProductDescription();
    public string Ean8();
    public string Ean13();
    private string Ean(int length, Int32[] weights);
}
public class Bogus.DataSets.Company : DataSet {
    protected Name Name;
    public Company(string locale);
    public string CompanySuffix();
    public string CompanyName(Nullable`1<int> formatIndex);
    public string CompanyName(string format);
    public string CatchPhrase();
    public string Bs();
    protected internal virtual String[] Suffixes();
    protected internal virtual string CatchPhraseAdjective();
    protected internal virtual string CatchPhraseDescriptor();
    protected internal virtual string CatchPhraseNoun();
    protected internal virtual string BsAdjective();
    protected internal virtual string BsBuzz();
    protected internal virtual string BsNoun();
}
public class Bogus.DataSets.Currency : object {
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Code>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Symbol>k__BackingField;
    public static Currency Default;
    public string Description { get; public set; }
    public string Code { get; public set; }
    public string Symbol { get; public set; }
    private static Currency();
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public string get_Code();
    [CompilerGeneratedAttribute]
public void set_Code(string value);
    [CompilerGeneratedAttribute]
public string get_Symbol();
    [CompilerGeneratedAttribute]
public void set_Symbol(string value);
}
public class Bogus.DataSets.Database : DataSet {
    public string Column();
    public string Type();
    public string Collation();
    public string Engine();
}
public class Bogus.DataSets.Date : DataSet {
    private bool hasMonthWideContext;
    private bool hasMonthAbbrContext;
    private bool hasWeekdayWideContext;
    private bool hasWeekdayAbbrContext;
    [ObsoleteAttribute("Consider using new Faker[T].UseDateTimeReference(refDate), or new Faker(){ DateTimeReference = refDate } or new Date {LocalSystemClock = () => refDate}; all these options are scoped per object instance. Setting this global static system clock is considered bad practice and may be removed in the future.")]
public static Func`1<DateTime> SystemClock;
    public Func`1<DateTime> LocalSystemClock;
    public Date(string locale);
    private static Date();
    protected internal DateTime GetTimeReference();
    public DateTime Past(int yearsToGoBack, Nullable`1<DateTime> refDate);
    public DateTimeOffset PastOffset(int yearsToGoBack, Nullable`1<DateTimeOffset> refDate);
    protected internal TimeSpan RandomTimeSpanFromTicks(long totalTimeSpanTicks);
    public DateTime Soon(int days, Nullable`1<DateTime> refDate);
    public DateTimeOffset SoonOffset(int days, Nullable`1<DateTimeOffset> refDate);
    public DateTime Future(int yearsToGoForward, Nullable`1<DateTime> refDate);
    public DateTimeOffset FutureOffset(int yearsToGoForward, Nullable`1<DateTimeOffset> refDate);
    public DateTime Between(DateTime start, DateTime end);
    public DateTimeOffset BetweenOffset(DateTimeOffset start, DateTimeOffset end);
    public DateTime Recent(int days, Nullable`1<DateTime> refDate);
    public DateTimeOffset RecentOffset(int days, Nullable`1<DateTimeOffset> refDate);
    public TimeSpan Timespan(Nullable`1<TimeSpan> maxSpan);
    public string Month(bool abbreviation, bool useContext);
    public string Weekday(bool abbreviation, bool useContext);
    public string TimeZoneString();
}
public class Bogus.DataSets.Finance : DataSet {
    private static Char[] BtcCharset;
    protected static String[] BicVowels;
    protected static String[] IbanAlpha;
    protected static String[] IbanPattern10;
    protected static String[] IbanPattern100;
    protected static String[] IbanIso3166;
    private static Finance();
    public string Account(int length);
    public string AccountName();
    public decimal Amount(decimal min, decimal max, int decimals);
    public string TransactionType();
    public Currency Currency(bool includeFundCodes);
    public string CreditCardNumber(CardType provider);
    public string CreditCardCvv();
    public string BitcoinAddress();
    public string EthereumAddress();
    public string LitecoinAddress();
    public string RoutingNumber();
    public string Bic();
    public string Iban(bool formatted, string countryCode);
    protected string Iban(IBanFormat ibanFormat, bool formatted);
    protected int IbanMod97(string digitStr);
    protected string IbanToDigitString(string str);
    protected IBanFormat GetIbanFormat(BObject obj);
    protected BbanItem[] GetBbanItems(BObject obj);
    [CompilerGeneratedAttribute]
private string <CreditCardNumber>g__RegexStyleStringParse|5_1(string str);
}
public class Bogus.DataSets.Hacker : DataSet {
    public Hacker(string locale);
    public string Abbreviation();
    public string Adjective();
    public string Noun();
    public string Verb();
    public string IngVerb();
    public string Phrase();
}
[DataCategoryAttribute("image")]
public class Bogus.DataSets.Images : DataSet {
    public Images(string locale);
    public string DataUri(int width, int height, string htmlColor);
    public string PlaceImgUrl(int width, int height, string category, Nullable`1<PlaceImgFilter> filter);
    public string PicsumUrl(int width, int height, bool grayscale, bool blur, Nullable`1<int> imageId);
    public string PlaceholderUrl(int width, int height, string text, string backColor, string textColor, string format);
    public string LoremFlickrUrl(int width, int height, string keywords, bool grascale, bool matchAllKeywords, Nullable`1<int> lockId);
}
public class Bogus.DataSets.Internet : DataSet {
    protected Name Name;
    private UserAgentGenerator userAgentGenerator;
    public Internet(string locale);
    public string Avatar();
    public string Email(string firstName, string lastName, string provider, string uniqueSuffix);
    public string ExampleEmail(string firstName, string lastName);
    public string UserName(string firstName, string lastName);
    public string UserNameUnicode(string firstName, string lastName);
    public string DomainName();
    public string DomainWord();
    public string DomainSuffix();
    public string Ip();
    public int Port();
    public IPAddress IpAddress();
    public IPEndPoint IpEndPoint();
    public string Ipv6();
    public IPAddress Ipv6Address();
    public IPEndPoint Ipv6EndPoint();
    public string UserAgent();
    public string Mac(string separator);
    public string Password(int length, bool memorable, string regexPattern, string prefix);
    public string Color(byte baseRed, byte baseGreen, byte baseBlue, bool grayscale, ColorFormat format);
    public string Protocol();
    public string Url();
    public string UrlWithPath(string protocol, string domain, string fileExt);
    public string UrlRootedPath(string fileExt);
    private string Url(string protocol, string domain);
    [CompilerGeneratedAttribute]
private Randomizer <.ctor>b__1_0();
    [CompilerGeneratedAttribute]
private string <Mac>b__19_0(int _);
    [CompilerGeneratedAttribute]
internal static string <Color>g__DelimitedRgb|21_0(<>c__DisplayClass21_0& );
}
public enum Bogus.DataSets.Iso3166Format : Enum {
    public int value__;
    public static Iso3166Format Alpha2;
    public static Iso3166Format Alpha3;
}
public class Bogus.DataSets.Lorem : DataSet {
    public Lorem(string locale);
    public string Word();
    public String[] Words(int num);
    public string Letter(int num);
    public string Sentence(Nullable`1<int> wordCount, Nullable`1<int> range);
    public string Sentences(Nullable`1<int> sentenceCount, string separator);
    public string Paragraph(int min);
    public string Paragraphs(int count, string separator);
    public string Paragraphs(int min, int max, string separator);
    public string Text();
    public string Lines(Nullable`1<int> lineCount, string separator);
    public string Slug(int wordcount);
    [CompilerGeneratedAttribute]
private string <Words>b__2_0(int _);
    [CompilerGeneratedAttribute]
private string <Sentences>b__5_0(int _);
    [CompilerGeneratedAttribute]
private string <Paragraphs>b__7_0(int _);
    [CompilerGeneratedAttribute]
private string <Text>b__9_0();
    [CompilerGeneratedAttribute]
private string <Text>b__9_1();
    [CompilerGeneratedAttribute]
private string <Text>b__9_2();
    [CompilerGeneratedAttribute]
private string <Text>b__9_3();
}
public class Bogus.DataSets.Music : DataSet {
    public string Genre();
}
[DefaultMemberAttribute("Item")]
public class Bogus.DataSets.Name : DataSet {
    public bool SupportsGenderFirstNames;
    public bool SupportsGenderLastNames;
    public bool SupportsGenderPrefixes;
    public bool HasFirstNameList;
    public Name Item { get; }
    public Name(string locale);
    public Name get_Item(string switchLocale);
    public string FirstName(Nullable`1<Gender> gender);
    public string LastName(Nullable`1<Gender> gender);
    public string FullName(Nullable`1<Gender> gender);
    public string Prefix(Nullable`1<Gender> gender);
    public string Suffix();
    public string FindName(string firstName, string lastName, Nullable`1<bool> withPrefix, Nullable`1<bool> withSuffix, Nullable`1<Gender> gender);
    public string JobTitle();
    public string JobDescriptor();
    public string JobArea();
    public string JobType();
}
[DataCategoryAttribute("phone_number")]
public class Bogus.DataSets.PhoneNumbers : DataSet {
    public PhoneNumbers(string locale);
    public string PhoneNumber(string format);
    public string PhoneNumberFormat(int phoneFormatsArrayIndex);
    protected virtual string PhoneFormat();
    protected virtual string ReplaceExclamChar(string s);
    [CompilerGeneratedAttribute]
private char <ReplaceExclamChar>b__4_0();
}
public static class Bogus.DataSets.PlaceImgCategory : object {
    public static string Animals;
    public static string Architecture;
    public static string Nature;
    public static string People;
    public static string Tech;
    public static string Any;
}
public enum Bogus.DataSets.PlaceImgFilter : Enum {
    public int value__;
    public static PlaceImgFilter Grayscale;
    public static PlaceImgFilter Sepia;
}
public class Bogus.DataSets.Rant : DataSet {
    public string Review(string product);
    public String[] Reviews(string product, int lines);
}
public class Bogus.DataSets.System : DataSet {
    protected Lorem Lorem;
    private Dictionary`2<string, BObject> lookup;
    private BArray mimes;
    private String[] exts;
    private String[] types;
    private String[] mimeKeys;
    private static String[] commonFileTypes;
    private static String[] commonMimeTypes;
    public System(string locale);
    private static System();
    public string FileName(string ext);
    public string DirectoryPath();
    public string FilePath();
    public string CommonFileName(string ext);
    public string MimeType();
    public string CommonFileType();
    public string CommonFileExt();
    public string FileType();
    public string FileExt(string mimeType);
    public string Semver();
    public Version Version();
    public Exception Exception();
    public string AndroidId();
    public string ApplePushToken();
    public string BlackBerryPin();
}
public class Bogus.DataSets.Vehicle : DataSet {
    private static string StrictUpperCase;
    private static string StrictAlphaNumericUpperCase;
    public string Vin(bool strict);
    public string Manufacturer();
    public string Model();
    public string Type();
    public string Fuel();
}
[ExtensionAttribute]
public static class Bogus.Distributions.Gaussian.ExtensionsForRandomizer : object {
    private static Double[] AcklamsCoefficientA;
    private static Double[] AcklamsCoefficientB;
    private static Double[] AcklamsCoefficientC;
    private static Double[] AcklamsCoefficientD;
    private static double AcklamsLowBreakPoint;
    private static double AcklamsHighBreakPoint;
    private static ExtensionsForRandomizer();
    private static double InverseNCD(double probability);
    [ExtensionAttribute]
public static double GaussianDouble(Randomizer rnd, double mean, double standardDeviation);
    [ExtensionAttribute]
public static int GaussianInt(Randomizer rnd, double mean, double standardDeviation);
    [ExtensionAttribute]
public static float GaussianFloat(Randomizer rnd, double mean, double standardDeviation);
    [ExtensionAttribute]
public static decimal GaussianDecimal(Randomizer rnd, double mean, double standardDeviation);
}
[ExtensionAttribute]
public static class Bogus.Extensions.Belgium.ExtensionsForBelgium : object {
    [ExtensionAttribute]
public static string NationalNumber(Person p, bool includeFormatSymbols);
    internal static string CalculateCheckNumber(string baseNumber, DateTime dateOfBirth);
    private static string FormatNationalNumber(string nationalNumber);
}
[ExtensionAttribute]
public static class Bogus.Extensions.Brazil.ExtensionsForBrazil : object {
    private static Int32[] CpfWeights;
    private static Int32[] CnpjWeights;
    private static ExtensionsForBrazil();
    [ExtensionAttribute]
public static string Cpf(Person p, bool includeFormatSymbols);
    public static string FormatCpf(Int32[] digits, bool includeFormatSymbols);
    [ExtensionAttribute]
public static string Cnpj(Company c, bool includeFormatSymbols);
}
[ExtensionAttribute]
public static class Bogus.Extensions.Canada.ExtensionsForCanada : object {
    private static Int32[] Mask;
    private static ExtensionsForCanada();
    [ExtensionAttribute]
public static string Sin(Person p);
}
[ExtensionAttribute]
public static class Bogus.Extensions.Denmark.ExtensionsForDenmark : object {
    [ExtensionAttribute]
public static string Cpr(Person p, bool validChecksum, bool includeDash);
    private static string GenerateIndividualFourDigitNumber(Randomizer r, Gender gender, int year);
    private static string GenerateIndividualThreeDigitNumber(Randomizer r, int year);
    private static bool GenerateChecksum(string birthDate, Gender gender, string individualNumber, String& checksum);
}
[ExtensionAttribute]
public static class Bogus.Extensions.ExtensionsForCultureInfo : object {
    public static Dictionary`2<string, string> Lookup;
    private static ExtensionsForCultureInfo();
    [ExtensionAttribute]
public static string ToBogusLocale(CultureInfo ci);
    private static string Normalize(CultureInfo ci);
}
[ExtensionAttribute]
public static class Bogus.Extensions.ExtensionsForPropertyInfo : object {
    private static MethodInfo GenericSetterCreationMethod;
    private static ExtensionsForPropertyInfo();
    [ExtensionAttribute]
public static Action`2<T, object> CreateSetter(PropertyInfo property);
    private static Action`2<T, object> CreateSetterGeneric(MethodInfo setter);
}
[ExtensionAttribute]
public static class Bogus.Extensions.ExtensionsForRandomizer : object {
    [ExtensionAttribute]
public static decimal Decimal2(Randomizer r, decimal min, decimal max);
}
[ExtensionAttribute]
public static class Bogus.Extensions.ExtensionsForString : object {
    [ExtensionAttribute]
public static string ClampLength(string str, Nullable`1<int> min, Nullable`1<int> max, char paddingChar);
    [ExtensionAttribute]
public static string RemoveDiacritics(string this);
    [ExtensionAttribute]
public static string Transliterate(string this, string lang);
}
[ExtensionAttribute]
public static class Bogus.Extensions.Extras.CheckDigitExtension : object {
    private static Int32[] Results;
    private static CheckDigitExtension();
    [ExtensionAttribute]
public static int CheckDigit(IList`1<int> digits);
    [ExtensionAttribute]
public static IList`1<int> AppendCheckDigit(IList`1<int> digits);
    [ExtensionAttribute]
public static bool HasValidCheckDigit(IList`1<int> digits);
    [ExtensionAttribute]
private static IList`1<int> ToDigitList(string digits);
    [ExtensionAttribute]
public static string CheckDigit(string digits);
    [ExtensionAttribute]
public static string AppendCheckDigit(string digits);
    [ExtensionAttribute]
public static bool HasValidCheckDigit(string digits);
}
[ExtensionAttribute]
public static class Bogus.Extensions.Extras.FinanceExtensions : object {
    [ExtensionAttribute]
public static string CreditCardNumberObfuscated(Finance f, string separator);
    [ExtensionAttribute]
public static string CreditCardNumberLastFourDigits(Finance f);
}
[ExtensionAttribute]
public static class Bogus.Extensions.Finland.ExtensionsForFinland : object {
    [ExtensionAttribute]
public static string Henkilotunnus(Person p);
}
internal static class Bogus.Extensions.Italy.CodiceFiscaleGenerator : object {
    private static Dictionary`2<char, int> evenMap;
    private static Char[] monthChars;
    private static Dictionary`2<char, int> oddMap;
    private static CodiceFiscaleGenerator();
    public static string Generate(string lastName, string firstName, DateTime birthday, bool male, bool validChecksum);
    private static char ComputeChecksumCodiceFiscale(string prefix, bool validChecksum);
    private static string GetFiscalCodeSqueezedName(string name, bool isFirstName);
    private static bool IsVowel(char c);
}
[ExtensionAttribute]
public static class Bogus.Extensions.Italy.ExtensionsForItaly : object {
    [ExtensionAttribute]
public static string CodiceFiscale(Person p, bool validChecksum);
    [ExtensionAttribute]
public static string CodiceFiscale(Finance finance, string lastName, string firstName, DateTime birthday, bool isMale, bool validChecksum);
}
[ExtensionAttribute]
public static class Bogus.Extensions.Norway.ExtensionsForNorway : object {
    [ExtensionAttribute]
public static string Fodselsnummer(Person p);
    private static string GenerateIndividualNumber(Randomizer r, Gender gender, int year);
    private static bool GenerateChecksum(string birthDate, string individualNumber, String& checksum);
}
[ExtensionAttribute]
public static class Bogus.Extensions.Poland.ExtensionsForPoland : object {
    private static Int32[] PeselWeights;
    private static Int32[] NipWeights;
    private static Dictionary`2<RegonType, Int32[]> RegonWeights;
    private static ExtensionsForPoland();
    [ExtensionAttribute]
public static string Pesel(Person person);
    [ExtensionAttribute]
private static StringBuilder AppendPeselDateOfBirth(StringBuilder builder, DateTime dateOfBirth);
    [ExtensionAttribute]
private static StringBuilder AppendPeselGender(StringBuilder builder, Person person);
    [ExtensionAttribute]
private static StringBuilder AppendPeselChecksum(StringBuilder builder);
    [ExtensionAttribute]
public static string Nip(Company company);
    [ExtensionAttribute]
public static string Regon(Company company, RegonType type);
}
[ExtensionAttribute]
public static class Bogus.Extensions.Portugal.ExtensionsForPortugal : object {
    [ExtensionAttribute]
public static string Nif(Person p);
    [ExtensionAttribute]
public static string Nipc(Company c);
}
internal static class Bogus.Extensions.Portugal.TaxNumberGenerator : object {
    public static Int32[] NifIdentify;
    public static Int32[] NipcIdentify;
    private static Int32[] Weights;
    private static TaxNumberGenerator();
    public static string Create(Int32[] arrNumber);
}
[ExtensionAttribute]
public static class Bogus.Extensions.Romania.ExtensionsForRomania : object {
    [ExtensionAttribute]
public static string Cnp(Person p);
    private static string GenerateChecksum(string cnp);
}
public enum Bogus.Extensions.Romania.RomanianBirthCounty : Enum {
    public int value__;
    public static RomanianBirthCounty Alba;
    public static RomanianBirthCounty Arad;
    public static RomanianBirthCounty Arges;
    public static RomanianBirthCounty Bacau;
    public static RomanianBirthCounty Bihor;
    public static RomanianBirthCounty BistritaNasaud;
    public static RomanianBirthCounty Botosani;
    public static RomanianBirthCounty Brasov;
    public static RomanianBirthCounty Braila;
    public static RomanianBirthCounty Buzau;
    public static RomanianBirthCounty CarasSeverin;
    public static RomanianBirthCounty Cluj;
    public static RomanianBirthCounty Constanta;
    public static RomanianBirthCounty Covasna;
    public static RomanianBirthCounty Dambovita;
    public static RomanianBirthCounty Dolj;
    public static RomanianBirthCounty Galati;
    public static RomanianBirthCounty Gorj;
    public static RomanianBirthCounty Harghita;
    public static RomanianBirthCounty Hunedoara;
    public static RomanianBirthCounty Ialomita;
    public static RomanianBirthCounty Iasi;
    public static RomanianBirthCounty Ilfov;
    public static RomanianBirthCounty Maramures;
    public static RomanianBirthCounty Mehedinti;
    public static RomanianBirthCounty Mures;
    public static RomanianBirthCounty Neamt;
    public static RomanianBirthCounty Olt;
    public static RomanianBirthCounty Prahova;
    public static RomanianBirthCounty SatuMare;
    public static RomanianBirthCounty Salaj;
    public static RomanianBirthCounty Sibiu;
    public static RomanianBirthCounty Suceava;
    public static RomanianBirthCounty Teleorman;
    public static RomanianBirthCounty Timis;
    public static RomanianBirthCounty Tulcea;
    public static RomanianBirthCounty Vaslui;
    public static RomanianBirthCounty Valcea;
    public static RomanianBirthCounty Vrancea;
    public static RomanianBirthCounty Bucuresti;
    public static RomanianBirthCounty BucurestiSector1;
    public static RomanianBirthCounty BucurestiSector2;
    public static RomanianBirthCounty BucurestiSector3;
    public static RomanianBirthCounty BucurestiSector4;
    public static RomanianBirthCounty BucurestiSector5;
    public static RomanianBirthCounty BucurestiSector6;
    public static RomanianBirthCounty Calarasi;
    public static RomanianBirthCounty Giurgiu;
}
[ExtensionAttribute]
public static class Bogus.Extensions.Sweden.ExtensionsForSweden : object {
    [ExtensionAttribute]
public static string Personnummer(Person person);
    [ExtensionAttribute]
public static string Samordningsnummer(Person person);
    private static string GenerateIndividualNumber(Randomizer r, Gender gender, DateTime dateOfBirth, int dayOffset);
    private static int GetGenderNumber(Randomizer r, Gender gender);
    private static int GetLuhn(string value);
}
[ExtensionAttribute]
public static class Bogus.Extensions.UnitedKingdom.ExtensionsForGreatBritainRegistrationPlate : object {
    private static DateTime StartOfCurrentStyle;
    private static DateTime EarliestRegistration;
    private static DateTime LatestRegistration;
    private static Char[] SequenceLetters;
    private static Char[] PrimaryLocations;
    private static Dictionary`2<char, Char[]> SecondaryLocations;
    private static ExtensionsForGreatBritainRegistrationPlate();
    [ExtensionAttribute]
public static string GbRegistrationPlate(Vehicle vehicle, DateTime dateFrom, DateTime dateTo);
    private static string GenerateCurrentStylePlates(Vehicle vehicle, DateTime registrationDate);
    private static void ApplySN07Exception(StringBuilder sb);
    private static char GetSecondaryLocation(Vehicle vehicle, char primaryLocation, DateTime registrationDate);
    private static DateTime GenerateRegistrationDate(Vehicle vehicle, DateTime dateFrom, DateTime dateTo);
}
[ExtensionAttribute]
public static class Bogus.Extensions.UnitedKingdom.ExtensionsForUnitedKingdom : object {
    [ExtensionAttribute]
public static string SortCode(Finance finance, bool includeSeparator);
    [ExtensionAttribute]
public static string Nino(Finance finance, bool includeSeparator);
    [ExtensionAttribute]
public static string CountryOfUnitedKingdom(Address address);
    [ExtensionAttribute]
public static string VatNumber(Finance finance, VatRegistrationNumberType registrationNumberType, bool includeSeparator);
    private static int CalculateChecksum(int n);
}
public enum Bogus.Extensions.UnitedKingdom.VatRegistrationNumberType : Enum {
    public int value__;
    public static VatRegistrationNumberType Standard;
    public static VatRegistrationNumberType BranchTrader;
    public static VatRegistrationNumberType GovernmentDepartment;
    public static VatRegistrationNumberType HealthAuthority;
}
[ExtensionAttribute]
public static class Bogus.Extensions.UnitedStates.ExtensionsForUnitedStates : object {
    [ExtensionAttribute]
public static string Ssn(Person p);
    [ExtensionAttribute]
public static string Ein(Company c);
}
[ExtensionAttribute]
public static class Bogus.ExtensionsForFakerT : object {
    [ExtensionAttribute]
public static List`1<T> GenerateBetween(Faker`1<T> faker, int min, int max, string ruleSets);
    [ExtensionAttribute]
public static T OrNull(T value, Faker& f, float nullWeight);
    [ExtensionAttribute]
public static Nullable`1<T> OrNull(T value, Faker f, float nullWeight);
    [ExtensionAttribute]
public static T OrDefault(T value, Faker f, float defaultWeight, T defaultValue);
}
public class Bogus.Faker : object {
    public static bool DefaultStrictMode;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, object> <Bogus.IHasContext.Context>k__BackingField;
    protected SeedNotifier Notifier;
    private Randomizer randomizer;
    private Person person;
    private Nullable`1<DateTime> localDateTimeRef;
    [CompilerGeneratedAttribute]
private Hacker <Hacker>k__BackingField;
    [CompilerGeneratedAttribute]
private PhoneNumbers <Phone>k__BackingField;
    [CompilerGeneratedAttribute]
private Name <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Lorem <Lorem>k__BackingField;
    [CompilerGeneratedAttribute]
private Images <Image>k__BackingField;
    [CompilerGeneratedAttribute]
private Finance <Finance>k__BackingField;
    [CompilerGeneratedAttribute]
private Address <Address>k__BackingField;
    [CompilerGeneratedAttribute]
private Date <Date>k__BackingField;
    [CompilerGeneratedAttribute]
private Company <Company>k__BackingField;
    [CompilerGeneratedAttribute]
private Internet <Internet>k__BackingField;
    [CompilerGeneratedAttribute]
private Commerce <Commerce>k__BackingField;
    [CompilerGeneratedAttribute]
private System <System>k__BackingField;
    [CompilerGeneratedAttribute]
private Database <Database>k__BackingField;
    [CompilerGeneratedAttribute]
private Rant <Rant>k__BackingField;
    [CompilerGeneratedAttribute]
private Vehicle <Vehicle>k__BackingField;
    [CompilerGeneratedAttribute]
private Music <Music>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Locale>k__BackingField;
    public static int GlobalUniqueIndex;
    private int capturedGlobalIndex;
    public int IndexFaker;
    public int IndexVariable;
    [CompilerGeneratedAttribute]
private Hashids <Hashids>k__BackingField;
    private Dictionary`2<string, object> Bogus.IHasContext.Context { get; }
    [RegisterMustasheMethodsAttribute]
public Randomizer Random { get; public set; }
    public Person Person { get; }
    public Nullable`1<DateTime> DateTimeReference { get; public set; }
    [RegisterMustasheMethodsAttribute]
public Hacker Hacker { get; public set; }
    [RegisterMustasheMethodsAttribute]
public PhoneNumbers Phone { get; public set; }
    [RegisterMustasheMethodsAttribute]
public Name Name { get; public set; }
    [RegisterMustasheMethodsAttribute]
public Lorem Lorem { get; public set; }
    [RegisterMustasheMethodsAttribute]
public Images Image { get; public set; }
    [RegisterMustasheMethodsAttribute]
public Finance Finance { get; public set; }
    [RegisterMustasheMethodsAttribute]
public Address Address { get; public set; }
    [RegisterMustasheMethodsAttribute]
public Date Date { get; public set; }
    [RegisterMustasheMethodsAttribute]
public Company Company { get; public set; }
    [RegisterMustasheMethodsAttribute]
public Internet Internet { get; public set; }
    [RegisterMustasheMethodsAttribute]
public Commerce Commerce { get; public set; }
    [RegisterMustasheMethodsAttribute]
public System System { get; public set; }
    [RegisterMustasheMethodsAttribute]
public Database Database { get; public set; }
    [RegisterMustasheMethodsAttribute]
public Rant Rant { get; public set; }
    [RegisterMustasheMethodsAttribute]
public Vehicle Vehicle { get; public set; }
    [RegisterMustasheMethodsAttribute]
public Music Music { get; public set; }
    public string Locale { get; public set; }
    internal bool HasContext { get; }
    public int UniqueIndex { get; }
    public int IndexGlobal { get; }
    public Hashids Hashids { get; public set; }
    public Faker(string locale);
    private static Faker();
    [CompilerGeneratedAttribute]
private sealed virtual override Dictionary`2<string, object> Bogus.IHasContext.get_Context();
    private sealed virtual override SeedNotifier Bogus.IHasRandomizer.GetNotifier();
    public Randomizer get_Random();
    public sealed virtual void set_Random(Randomizer value);
    public string Parse(string str);
    public Person get_Person();
    public Nullable`1<DateTime> get_DateTimeReference();
    public void set_DateTimeReference(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public Hacker get_Hacker();
    [CompilerGeneratedAttribute]
public void set_Hacker(Hacker value);
    [CompilerGeneratedAttribute]
public PhoneNumbers get_Phone();
    [CompilerGeneratedAttribute]
public void set_Phone(PhoneNumbers value);
    [CompilerGeneratedAttribute]
public Name get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(Name value);
    [CompilerGeneratedAttribute]
public Lorem get_Lorem();
    [CompilerGeneratedAttribute]
public void set_Lorem(Lorem value);
    [CompilerGeneratedAttribute]
public Images get_Image();
    [CompilerGeneratedAttribute]
public void set_Image(Images value);
    [CompilerGeneratedAttribute]
public Finance get_Finance();
    [CompilerGeneratedAttribute]
public void set_Finance(Finance value);
    [CompilerGeneratedAttribute]
public Address get_Address();
    [CompilerGeneratedAttribute]
public void set_Address(Address value);
    [CompilerGeneratedAttribute]
public Date get_Date();
    [CompilerGeneratedAttribute]
public void set_Date(Date value);
    [CompilerGeneratedAttribute]
public Company get_Company();
    [CompilerGeneratedAttribute]
public void set_Company(Company value);
    [CompilerGeneratedAttribute]
public Internet get_Internet();
    [CompilerGeneratedAttribute]
public void set_Internet(Internet value);
    [CompilerGeneratedAttribute]
public Commerce get_Commerce();
    [CompilerGeneratedAttribute]
public void set_Commerce(Commerce value);
    [CompilerGeneratedAttribute]
public System get_System();
    [CompilerGeneratedAttribute]
public void set_System(System value);
    [CompilerGeneratedAttribute]
public Database get_Database();
    [CompilerGeneratedAttribute]
public void set_Database(Database value);
    [CompilerGeneratedAttribute]
public Rant get_Rant();
    [CompilerGeneratedAttribute]
public void set_Rant(Rant value);
    [CompilerGeneratedAttribute]
public Vehicle get_Vehicle();
    [CompilerGeneratedAttribute]
public void set_Vehicle(Vehicle value);
    [CompilerGeneratedAttribute]
public Music get_Music();
    [CompilerGeneratedAttribute]
public void set_Music(Music value);
    public T PickRandom(IEnumerable`1<T> items);
    public T PickRandom(IList`1<T> items);
    public T PickRandom(ICollection`1<T> items);
    public T PickRandom(List`1<T> items);
    public T PickRandom(T[] items);
    public T PickRandomParam(T[] items);
    public IEnumerable`1<T> PickRandom(IEnumerable`1<T> items, int amountToPick);
    public IList`1<T> Make(int count, Func`1<T> action);
    public IList`1<T> Make(int count, Func`2<int, T> action);
    public IEnumerable`1<T> MakeLazy(int count, Func`1<T> action);
    public IEnumerable`1<T> MakeLazy(int count, Func`2<int, T> action);
    public T PickRandom();
    public T PickRandomWithout(T[] exclude);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Locale();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Locale(string value);
    internal void NewContext();
    internal bool get_HasContext();
    public int get_UniqueIndex();
    public int get_IndexGlobal();
    [CompilerGeneratedAttribute]
public Hashids get_Hashids();
    [CompilerGeneratedAttribute]
public void set_Hashids(Hashids value);
    [CompilerGeneratedAttribute]
private DateTime <set_DateTimeReference>b__18_0();
}
public class Bogus.Faker`1 : object {
    protected static string Default;
    private static String[] DefaultRuleSet;
    protected internal Faker FakerHub;
    protected internal IBinder binder;
    protected internal MultiDictionary`3<string, string, PopulateAction`1<T>> Actions;
    protected internal Dictionary`2<string, FinalizeAction`1<T>> FinalizeActions;
    protected internal Dictionary`2<string, Func`2<Faker, T>> CreateActions;
    protected internal Dictionary`2<string, MemberInfo> TypeProperties;
    protected internal Dictionary`2<string, Action`2<T, object>> SetterCache;
    protected internal Dictionary`2<string, bool> StrictModes;
    protected internal Nullable`1<bool> IsValid;
    protected internal string currentRuleSet;
    protected internal Nullable`1<int> localSeed;
    protected internal Nullable`1<DateTime> localDateTimeRef;
    [CompilerGeneratedAttribute]
private string <Locale>k__BackingField;
    private object _setterCreateLock;
    private Faker Bogus.IFakerTInternal.FakerHub { get; }
    private IBinder Bogus.IFakerTInternal.Binder { get; }
    private Nullable`1<int> Bogus.IFakerTInternal.LocalSeed { get; }
    private Type Bogus.IFakerTInternal.TypeOfT { get; }
    public string Locale { get; public set; }
    public Faker`1(string locale);
    public Faker`1(string locale, IBinder binder);
    private static Faker`1();
    private sealed virtual override Faker Bogus.IFakerTInternal.get_FakerHub();
    private sealed virtual override IBinder Bogus.IFakerTInternal.get_Binder();
    private sealed virtual override Nullable`1<int> Bogus.IFakerTInternal.get_LocalSeed();
    private sealed virtual override Type Bogus.IFakerTInternal.get_TypeOfT();
    public Faker`1<T> Clone();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Locale();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Locale(string value);
    public virtual Faker`1<T> UseSeed(int seed);
    public virtual Faker`1<T> UseDateTimeReference(Nullable`1<DateTime> refDate);
    public virtual Faker`1<T> CustomInstantiator(Func`2<Faker, T> factoryMethod);
    public virtual Faker`1<T> RuleFor(Expression`1<Func`2<T, TProperty>> property, Func`3<Faker, T, TProperty> setter);
    public virtual Faker`1<T> RuleFor(Expression`1<Func`2<T, TProperty>> property, TProperty value);
    public virtual Faker`1<T> RuleFor(Expression`1<Func`2<T, TProperty>> property, Func`1<TProperty> valueFunction);
    public virtual Faker`1<T> RuleFor(Expression`1<Func`2<T, TProperty>> property, Func`2<Faker, TProperty> setter);
    public virtual Faker`1<T> RuleFor(string propertyOrFieldName, Func`2<Faker, TProperty> setter);
    public virtual Faker`1<T> RuleFor(string propertyOrFieldName, Func`3<Faker, T, TProperty> setter);
    protected virtual Faker`1<T> AddRule(string propertyOrField, Func`3<Faker, T, object> invoker);
    public virtual Faker`1<T> Rules(Action`2<Faker, T> setActions);
    public virtual Faker`1<T> RuleForType(Type type, Func`2<Faker, TType> setterForType);
    protected virtual Type GetFieldOrPropertyType(MemberInfo mi);
    public virtual Faker`1<T> RuleSet(string ruleSetName, Action`1<IRuleSet`1<T>> action);
    protected virtual void EnsureMemberExists(string propNameOrField, string exceptionMessage);
    public virtual Faker`1<T> Ignore(string propertyOrFieldName);
    public virtual Faker`1<T> Ignore(Expression`1<Func`2<T, TPropertyOrField>> propertyOrField);
    public virtual Faker`1<T> StrictMode(bool ensureRulesForAllProperties);
    public virtual Faker`1<T> FinishWith(Action`2<Faker, T> action);
    protected virtual String[] ParseDirtyRulesSets(string dirtyRules);
    public virtual T Generate(string ruleSets);
    public virtual List`1<T> Generate(int count, string ruleSets);
    public virtual IEnumerable`1<T> GenerateLazy(int count, string ruleSets);
    [IteratorStateMachineAttribute("Bogus.Faker`1/<GenerateForever>d__53")]
public virtual IEnumerable`1<T> GenerateForever(string ruleSets);
    public virtual void Populate(T instance, string ruleSets);
    protected virtual void PopulateInternal(T instance, String[] ruleSets);
    private void PopulateProperty(T instance, PopulateAction`1<T> action);
    public virtual bool Validate(string ruleSets);
    public virtual void AssertConfigurationIsValid(string ruleSets);
    protected virtual ValidationException MakeValidationException(ValidationResult result);
    private ValidationResult ValidateInternal(String[] ruleSets);
    public static T op_Implicit(Faker`1<T> faker);
    [ObsoleteAttribute("This exists here only as a Visual Studio IntelliSense work around. See: https://github.com/bchavez/Bogus/issues/54", "True")]
public void RuleFor(Expression`1<Func`2<T, TProperty>> property);
}
public class Bogus.FinalizeAction`1 : Rule`1<Action`2<Faker, T>> {
}
public class Bogus.Hashids : object {
    public static string DEFAULT_ALPHABET;
    public static string DEFAULT_SEPS;
    private static int MIN_ALPHABET_LENGTH;
    private static double SEP_DIV;
    private static double GUARD_DIV;
    private string alphabet;
    private string salt;
    private string seps;
    private string guards;
    private int minHashLength;
    private Regex guardsRegex;
    private Regex sepsRegex;
    private static Regex hexValidator;
    private static Regex hexSplitter;
    public Hashids(string salt, int minHashLength, string alphabet, string seps);
    private static Hashids();
    public virtual string Encode(Int32[] numbers);
    public virtual string Encode(IEnumerable`1<int> numbers);
    public virtual Int32[] Decode(string hash);
    public virtual string EncodeHex(string hex);
    public virtual string DecodeHex(string hash);
    public sealed virtual Int64[] DecodeLong(string hash);
    public sealed virtual string EncodeLong(Int64[] numbers);
    public sealed virtual string EncodeLong(IEnumerable`1<long> numbers);
    [ObsoleteAttribute("Use 'Encode' instead. The method was renamed to better explain what it actually does.")]
public virtual string Encrypt(Int32[] numbers);
    [ObsoleteAttribute("Use 'EncodeHex' instead. The method was renamed to better explain what it actually does.")]
public virtual string EncryptHex(string hex);
    [ObsoleteAttribute("Use 'Decode' instead. Method was renamed to better explain what it actually does.")]
public virtual Int32[] Decrypt(string hash);
    [ObsoleteAttribute("Use 'DecodeHex' instead. The method was renamed to better explain what it actually does.")]
public virtual string DecryptHex(string hash);
    private void SetupSeps();
    private void SetupGuards();
    private string GenerateHashFrom(Int64[] numbers);
    private string Hash(long input, string alphabet);
    private long Unhash(string input, string alphabet);
    private Int64[] GetNumbersFrom(string hash);
    private string ConsistentShuffle(string alphabet, string salt);
}
public interface Bogus.IBinder {
    public abstract virtual Dictionary`2<string, MemberInfo> GetMembers(Type t);
}
public interface Bogus.IFakerTInternal {
    public Faker FakerHub { get; }
    public IBinder Binder { get; }
    public Nullable`1<int> LocalSeed { get; }
    public Type TypeOfT { get; }
    public abstract virtual Faker get_FakerHub();
    public abstract virtual IBinder get_Binder();
    public abstract virtual Nullable`1<int> get_LocalSeed();
    public abstract virtual Type get_TypeOfT();
}
public interface Bogus.IHasContext {
    public Dictionary`2<string, object> Context { get; }
    public abstract virtual Dictionary`2<string, object> get_Context();
}
public interface Bogus.IHashids {
    public abstract virtual Int32[] Decode(string hash);
    public abstract virtual Int64[] DecodeLong(string hash);
    public abstract virtual string DecodeHex(string hash);
    public abstract virtual string Encode(Int32[] numbers);
    public abstract virtual string Encode(IEnumerable`1<int> numbers);
    public abstract virtual string EncodeLong(Int64[] numbers);
    public abstract virtual string EncodeLong(IEnumerable`1<long> numbers);
    public abstract virtual string EncodeHex(string hex);
}
public interface Bogus.IHasRandomizer {
    unknown Randomizer Random {public set; }
    public abstract virtual void set_Random(Randomizer value);
    public abstract virtual SeedNotifier GetNotifier();
}
public interface Bogus.ILocaleAware {
    public string Locale { get; public set; }
    public abstract virtual string get_Locale();
    public abstract virtual void set_Locale(string value);
}
public interface Bogus.IRuleSet`1 {
    public abstract virtual Faker`1<T> CustomInstantiator(Func`2<Faker, T> factoryMethod);
    public abstract virtual Faker`1<T> RuleFor(Expression`1<Func`2<T, TProperty>> property, Func`3<Faker, T, TProperty> setter);
    public abstract virtual Faker`1<T> RuleFor(Expression`1<Func`2<T, TProperty>> property, Func`2<Faker, TProperty> setter);
    public abstract virtual Faker`1<T> RuleFor(Expression`1<Func`2<T, TProperty>> property, Func`1<TProperty> valueFunction);
    public abstract virtual Faker`1<T> Ignore(Expression`1<Func`2<T, TPropertyOrField>> propertyOrField);
    public abstract virtual Faker`1<T> StrictMode(bool ensureRulesForAllProperties);
    public abstract virtual Faker`1<T> FinishWith(Action`2<Faker, T> action);
    public abstract virtual Faker`1<T> RuleFor(Expression`1<Func`2<T, TProperty>> property, TProperty value);
    public abstract virtual Faker`1<T> Rules(Action`2<Faker, T> setActions);
}
public class Bogus.MultiDictionary`3 : Dictionary`2<Key, Dictionary`2<Key2, Value>> {
    public MultiDictionary`3(IEqualityComparer`1<Key> comparer);
    public void Add(Key key, Key2 key2, Value value);
}
public class Bogus.MultiSetDictionary`2 : Dictionary`2<Key, HashSet`1<Value>> {
    public MultiSetDictionary`2(IEqualityComparer`1<Key> comparer);
    public void Add(Key key, Value value);
}
public class Bogus.MustashMethod : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private MethodInfo <Method>k__BackingField;
    [CompilerGeneratedAttribute]
private Object[] <OptionalArgs>k__BackingField;
    public string Name { get; public set; }
    public MethodInfo Method { get; public set; }
    public Object[] OptionalArgs { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public MethodInfo get_Method();
    [CompilerGeneratedAttribute]
public void set_Method(MethodInfo value);
    [CompilerGeneratedAttribute]
public Object[] get_OptionalArgs();
    [CompilerGeneratedAttribute]
public void set_OptionalArgs(Object[] value);
}
public class Bogus.Person : object {
    internal Dictionary`2<string, object> context;
    [CompilerGeneratedAttribute]
private Name <DsName>k__BackingField;
    [CompilerGeneratedAttribute]
private Internet <DsInternet>k__BackingField;
    [CompilerGeneratedAttribute]
private Date <DsDate>k__BackingField;
    [CompilerGeneratedAttribute]
private PhoneNumbers <DsPhoneNumbers>k__BackingField;
    [CompilerGeneratedAttribute]
private Address <DsAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private Company <DsCompany>k__BackingField;
    protected SeedNotifier Notifier;
    private Randomizer randomizer;
    public Gender Gender;
    public string FirstName;
    public string LastName;
    public string FullName;
    public string UserName;
    public string Avatar;
    public string Email;
    public DateTime DateOfBirth;
    public CardAddress Address;
    public string Phone;
    public string Website;
    public CardCompany Company;
    private Dictionary`2<string, object> Bogus.IHasContext.Context { get; }
    protected internal Name DsName { get; protected internal set; }
    protected internal Internet DsInternet { get; protected internal set; }
    protected internal Date DsDate { get; protected internal set; }
    protected internal PhoneNumbers DsPhoneNumbers { get; protected internal set; }
    protected internal Address DsAddress { get; protected internal set; }
    protected internal Company DsCompany { get; protected internal set; }
    public Randomizer Random { get; public set; }
    public Person(string locale, Nullable`1<int> seed, Nullable`1<DateTime> refDate);
    internal Person(Randomizer randomizer, Nullable`1<DateTime> refDate, string locale);
    private sealed virtual override Dictionary`2<string, object> Bogus.IHasContext.get_Context();
    [CompilerGeneratedAttribute]
protected internal Name get_DsName();
    [CompilerGeneratedAttribute]
protected internal void set_DsName(Name value);
    [CompilerGeneratedAttribute]
protected internal Internet get_DsInternet();
    [CompilerGeneratedAttribute]
protected internal void set_DsInternet(Internet value);
    [CompilerGeneratedAttribute]
protected internal Date get_DsDate();
    [CompilerGeneratedAttribute]
protected internal void set_DsDate(Date value);
    [CompilerGeneratedAttribute]
protected internal PhoneNumbers get_DsPhoneNumbers();
    [CompilerGeneratedAttribute]
protected internal void set_DsPhoneNumbers(PhoneNumbers value);
    [CompilerGeneratedAttribute]
protected internal Address get_DsAddress();
    [CompilerGeneratedAttribute]
protected internal void set_DsAddress(Address value);
    [CompilerGeneratedAttribute]
protected internal Company get_DsCompany();
    [CompilerGeneratedAttribute]
protected internal void set_DsCompany(Company value);
    private void GetDataSources(string locale);
    protected internal virtual void Populate();
    public Randomizer get_Random();
    public sealed virtual void set_Random(Randomizer value);
    private sealed virtual override SeedNotifier Bogus.IHasRandomizer.GetNotifier();
}
[ExtensionAttribute]
public static class Bogus.Platform.ExtensionsForType : object {
    [ExtensionAttribute]
public static T GetCustomAttributeX(Type type);
    [ExtensionAttribute]
public static bool IsEnum(Type type);
    [ExtensionAttribute]
public static Assembly GetAssembly(Type type);
    [ExtensionAttribute]
public static IEnumerable`1<MemberInfo> GetAllMembers(Type type, BindingFlags bindingFlags);
}
public class Bogus.PopulateAction`1 : Rule`1<Func`3<Faker, T, object>> {
}
public static class Bogus.Premium.ContextHelper : object {
    public static T GetOrSet(string key, Faker f, Func`1<T> factory);
    public static T GetOrSet(Faker f, Func`1<T> factory);
}
public class Bogus.Premium.License : object {
    [CompilerGeneratedAttribute]
private static string <LicenseTo>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <LicenseKey>k__BackingField;
    public static string LicenseTo { get; public set; }
    public static string LicenseKey { get; public set; }
    [CompilerGeneratedAttribute]
public static string get_LicenseTo();
    [CompilerGeneratedAttribute]
public static void set_LicenseTo(string value);
    [CompilerGeneratedAttribute]
public static string get_LicenseKey();
    [CompilerGeneratedAttribute]
public static void set_LicenseKey(string value);
}
public static class Bogus.Premium.LicenseVerifier : object {
    public static string LicenseFile;
    [CompilerGeneratedAttribute]
private static List`1<string> <ProbePaths>k__BackingField;
    public static List`1<string> ProbePaths { get; }
    private static LicenseVerifier();
    public static bool VerifyLicense(string licenseTo, string licenseKey);
    private static void AssertKeyIsNotBanned(string licenseKey);
    public static string FindLicense();
    public static string FindLicense(string probePath);
    public static void ReadLicense(string path, String& name, String& key);
    [CompilerGeneratedAttribute]
public static List`1<string> get_ProbePaths();
}
public abstract class Bogus.Premium.PremiumDataSet : DataSet {
    protected internal virtual BValue Get(string path);
    protected internal virtual BValue Get(string category, string path);
    protected internal virtual bool HasKey(string path, bool includeFallback);
    protected virtual void CheckLicense();
    protected abstract virtual void Initialize();
    protected void LoadResource(Assembly asm, string resourceName);
}
[EditorBrowsableAttribute("1")]
public static class Bogus.PropertyName : object {
    public static string For(Expression`1<Func`2<T, TProp>> expression);
    public static string For(Expression`1<Func`2<T, object>> expression);
    public static string For(Expression`1<Func`1<object>> expression);
    public static string GetMemberName(Expression expression);
}
public class Bogus.Randomizer : object {
    public static Random Seed;
    internal static Lazy`1<object> Locker;
    protected Random localSeed;
    private WordFunctions wordFunctions;
    private static Char[] AlphaChars;
    private static Char[] HexChars;
    public Randomizer(int localSeed);
    private static Randomizer();
    public int Number(int max);
    public Int32[] Digits(int count, int minDigit, int maxDigit);
    public int Number(int min, int max);
    public int Even(int min, int max);
    public int Odd(int min, int max);
    public double Double(double min, double max);
    public decimal Decimal(decimal min, decimal max);
    public float Float(float min, float max);
    public byte Byte(byte min, byte max);
    public Byte[] Bytes(int count);
    public sbyte SByte(sbyte min, sbyte max);
    public int Int(int min, int max);
    public UInt32 UInt(UInt32 min, UInt32 max);
    public ulong ULong(ulong min, ulong max);
    public long Long(long min, long max);
    public short Short(short min, short max);
    public ushort UShort(ushort min, ushort max);
    public char Char(char min, char max);
    public Char[] Chars(char min, char max, int count);
    public string String(Nullable`1<int> length, char minChar, char maxChar);
    public string String(int minLength, int maxLength, char minChar, char maxChar);
    public string String2(int length, string chars);
    public string String2(int minLength, int maxLength, string chars);
    public string Utf16String(int minLength, int maxLength, bool excludeSurrogates);
    public string Hash(int length, bool upperCase);
    public bool Bool();
    public bool Bool(float weight);
    public T ArrayElement(T[] array);
    public BValue ArrayElement(BArray props, Nullable`1<int> min, Nullable`1<int> max);
    public string ArrayElement(Array array);
    public T[] ArrayElements(T[] array, Nullable`1<int> count);
    public T ListItem(List`1<T> list);
    public T ListItem(IList`1<T> list);
    public List`1<T> ListItems(IList`1<T> items, Nullable`1<int> count);
    public IList`1<T> ListItems(List`1<T> items, Nullable`1<int> count);
    public T CollectionItem(ICollection`1<T> collection);
    public string ReplaceNumbers(string format, char symbol);
    public string ReplaceSymbols(string format, char symbol, Func`1<char> func);
    public string Replace(string format);
    public string ClampString(string str, Nullable`1<int> min, Nullable`1<int> max);
    public T Enum(T[] exclude);
    public T[] EnumValues(Nullable`1<int> count, T[] exclude);
    [IteratorStateMachineAttribute("Bogus.Randomizer/<Shuffle>d__47`1")]
public IEnumerable`1<T> Shuffle(IEnumerable`1<T> source);
    public string Word();
    public string Words(Nullable`1<int> count);
    public String[] WordsArray(int min, int max);
    public String[] WordsArray(int count);
    public Guid Guid();
    public Guid Uuid();
    public string RandomLocale();
    public string AlphaNumeric(int length);
    public string Hexadecimal(int length, string prefix);
    public T WeightedRandom(T[] items, Single[] weights);
    [CompilerGeneratedAttribute]
private char <ReplaceNumbers>b__41_0();
    [CompilerGeneratedAttribute]
private char <Replace>b__43_0(char c);
    [CompilerGeneratedAttribute]
private string <WordsArray>b__52_0(int f);
    [CompilerGeneratedAttribute]
private StringBuilder <AlphaNumeric>b__57_0(StringBuilder b, int i);
}
[AttributeUsageAttribute("128")]
internal class Bogus.RegisterMustasheMethodsAttribute : Attribute {
}
public static class Bogus.ResourceHelper : object {
    public static bool ResourceExists(Assembly assembly, string resourceName);
    public static Byte[] ReadResource(Assembly assembly, string resourceName);
    public static BValue ReadBValueResource(Assembly assembly, string resourceName);
    public static BObject ReadBObjectResource(Assembly assembly, string resourceName);
}
public class Bogus.Rule`1 : object {
    [CompilerGeneratedAttribute]
private T <Action>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PropertyName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RuleSet>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ProhibitInStrictMode>k__BackingField;
    public T Action { get; public set; }
    public string PropertyName { get; public set; }
    public string RuleSet { get; public set; }
    public bool ProhibitInStrictMode { get; public set; }
    [CompilerGeneratedAttribute]
public T get_Action();
    [CompilerGeneratedAttribute]
public void set_Action(T value);
    [CompilerGeneratedAttribute]
public string get_PropertyName();
    [CompilerGeneratedAttribute]
public void set_PropertyName(string value);
    [CompilerGeneratedAttribute]
public string get_RuleSet();
    [CompilerGeneratedAttribute]
public void set_RuleSet(string value);
    [CompilerGeneratedAttribute]
public bool get_ProhibitInStrictMode();
    [CompilerGeneratedAttribute]
public void set_ProhibitInStrictMode(bool value);
}
[EditorBrowsableAttribute("1")]
public static class Bogus.SafeUnicodeRanges : object {
    public static String[] Basic;
    public static String[] SurrogatePairs;
    private static SafeUnicodeRanges();
}
public class Bogus.SeedNotifier : object {
    private List`1<IHasRandomizer> registry;
    public U Flow(U item);
    public void Notify(Randomizer r);
}
public class Bogus.Tokenizer : object {
    public static ILookup`2<string, MustashMethod> MustashMethods;
    private static Tokenizer();
    public static void RegisterMustashMethods(Type type);
    public static string Parse(string str, Object[] dataSets);
    private static object FindDataSetWithMethod(Object[] dataSets, string methodName);
    private static void ParseMustashText(string str, int start, int end, String& methodName, String[]& arguments);
    private static MustashMethod FindMustashMethod(string methodName, String[] arguments);
    private static Object[] ConvertStringArgumentsToObjects(String[] parameters, MustashMethod mm);
    private static object GetValueForParameter(ParameterInfo parameterInfo, string parameterValue);
    private static string GetArgumentsString(string methodCall, int parametersStart);
}
public static class Bogus.Transliterater : object {
    public static Trie CharMap;
    public static Trie DiatricMap;
    public static MultiDictionary`3<string, string, string> LangCharMap;
    public static MultiDictionary`3<string, string, string> SymbolMap;
    public static Dictionary`2<string, string> EmptyDictionary;
    private static Transliterater();
    public static string Translate(string input, string lang);
    [EditorBrowsableAttribute("1")]
public static string WalkTrie(int i, string input, Trie trie, Int32& used);
    [EditorBrowsableAttribute("1")]
public static Trie BuildCharMap(Trie trie);
    [EditorBrowsableAttribute("1")]
public static Trie BuildDiatricMap(Trie trie);
    [EditorBrowsableAttribute("1")]
public static MultiDictionary`3<string, string, string> BuildLangCharMap(MultiDictionary`3<string, string, string> md);
    [EditorBrowsableAttribute("1")]
public static MultiDictionary`3<string, string, string> BuildSymbolMap(MultiDictionary`3<string, string, string> md);
}
[EditorBrowsableAttribute("1")]
public class Bogus.Trie : object {
    public Dictionary`2<string, Trie> Map;
    public string Value;
    public static void Insert(Trie node, string key, string value);
    public static string Find(Trie node, string key);
}
public static class Bogus.Utils : object {
    public static Regex SlugifyRegex;
    private static Utils();
    public static string Slugify(string txt);
    public static string Slashify(IEnumerable`1<string> parts, string separator);
}
public class Bogus.ValidationException : Exception {
    public ValidationException(string message);
}
public class Bogus.ValidationResult : object {
    [CompilerGeneratedAttribute]
private bool <IsValid>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <MissingRules>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <ExtraMessages>k__BackingField;
    internal bool IsValid { get; internal set; }
    internal List`1<string> MissingRules { get; }
    internal List`1<string> ExtraMessages { get; }
    [CompilerGeneratedAttribute]
internal bool get_IsValid();
    [CompilerGeneratedAttribute]
internal void set_IsValid(bool value);
    [CompilerGeneratedAttribute]
internal List`1<string> get_MissingRules();
    [CompilerGeneratedAttribute]
internal List`1<string> get_ExtraMessages();
}
internal class Bogus.Vendor.UserAgentGenerator : object {
    private Func`1<Randomizer> random;
    private static String[] BrowserNames;
    private static Single[] BrowserWeights;
    private static MultiDictionary`3<string, string, float> BrowserOSUsage;
    private static MultiDictionary`3<string, string, float> Proc;
    private Randomizer Random { get; }
    internal UserAgentGenerator(Func`1<Randomizer> random);
    private static UserAgentGenerator();
    private Randomizer get_Random();
    internal string VersionString(string type, string delim);
    internal string RandomRevision(int dots);
    private string RandomLanguage();
    internal string RandomBrowser();
    internal string RandomOS(string browser);
    internal string RandomProc(string os);
    internal string BrowserAgent(string browser, string arch);
    public string Generate();
}
public class Bogus.WordFunctions : object {
    [CompilerGeneratedAttribute]
private List`1<Func`1<string>> <Functions>k__BackingField;
    [CompilerGeneratedAttribute]
private Commerce <Commerce>k__BackingField;
    [CompilerGeneratedAttribute]
private Company <Company>k__BackingField;
    [CompilerGeneratedAttribute]
private Address <Address>k__BackingField;
    [CompilerGeneratedAttribute]
private Finance <Finance>k__BackingField;
    [CompilerGeneratedAttribute]
private Hacker <Hacker>k__BackingField;
    [CompilerGeneratedAttribute]
private Name <Name>k__BackingField;
    public List`1<Func`1<string>> Functions { get; }
    private Commerce Commerce { get; }
    private Company Company { get; }
    private Address Address { get; }
    private Finance Finance { get; }
    private Hacker Hacker { get; }
    private Name Name { get; }
    public WordFunctions(Randomizer r);
    [CompilerGeneratedAttribute]
public List`1<Func`1<string>> get_Functions();
    [CompilerGeneratedAttribute]
private Commerce get_Commerce();
    [CompilerGeneratedAttribute]
private Company get_Company();
    [CompilerGeneratedAttribute]
private Address get_Address();
    [CompilerGeneratedAttribute]
private Finance get_Finance();
    [CompilerGeneratedAttribute]
private Hacker get_Hacker();
    [CompilerGeneratedAttribute]
private Name get_Name();
    private void Init();
    [CompilerGeneratedAttribute]
private string <Init>b__22_0();
    [CompilerGeneratedAttribute]
private string <Init>b__22_1();
    [CompilerGeneratedAttribute]
private string <Init>b__22_2();
    [CompilerGeneratedAttribute]
private string <Init>b__22_3();
    [CompilerGeneratedAttribute]
private string <Init>b__22_4();
    [CompilerGeneratedAttribute]
private string <Init>b__22_5();
    [CompilerGeneratedAttribute]
private string <Init>b__22_6();
    [CompilerGeneratedAttribute]
private string <Init>b__22_7();
    [CompilerGeneratedAttribute]
private string <Init>b__22_8();
    [CompilerGeneratedAttribute]
private string <Init>b__22_9();
    [CompilerGeneratedAttribute]
private string <Init>b__22_10();
    [CompilerGeneratedAttribute]
private string <Init>b__22_11();
    [CompilerGeneratedAttribute]
private string <Init>b__22_12();
    [CompilerGeneratedAttribute]
private string <Init>b__22_13();
    [CompilerGeneratedAttribute]
private string <Init>b__22_14();
    [CompilerGeneratedAttribute]
private string <Init>b__22_15();
    [CompilerGeneratedAttribute]
private string <Init>b__22_16();
    [CompilerGeneratedAttribute]
private string <Init>b__22_17();
    [CompilerGeneratedAttribute]
private string <Init>b__22_18();
    [CompilerGeneratedAttribute]
private string <Init>b__22_19();
    [CompilerGeneratedAttribute]
private string <Init>b__22_20();
    [CompilerGeneratedAttribute]
private string <Init>b__22_21();
    [CompilerGeneratedAttribute]
private string <Init>b__22_22();
    [CompilerGeneratedAttribute]
private string <Init>b__22_23();
    [CompilerGeneratedAttribute]
private string <Init>b__22_24();
    [CompilerGeneratedAttribute]
private string <Init>b__22_25();
    [CompilerGeneratedAttribute]
private string <Init>b__22_26();
    [CompilerGeneratedAttribute]
private string <Init>b__22_27();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
internal static class System.AssemblyVersionInformation : object {
    internal static string AssemblyProduct;
    internal static string AssemblyTitle;
    internal static string AssemblyCompany;
    internal static string AssemblyCopyright;
    internal static string AssemblyVersion;
    internal static string AssemblyFileVersion;
    internal static string AssemblyInformationalVersion;
    internal static string AssemblyTrademark;
    internal static string AssemblyDescription;
    internal static string InternalsVisibleTo;
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
