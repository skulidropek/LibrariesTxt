public class Bond.IO.Unsafe.InputBuffer : InputBuffer {
    public InputBuffer(Byte[] data);
    public InputBuffer(Byte[] data, int length);
    public InputBuffer(ArraySegment`1<byte> seg);
    public InputBuffer(Byte[] data, int offset, int length);
    internal InputBuffer(InputBuffer that);
    public sealed virtual InputBuffer Clone();
    public virtual ushort ReadUInt16();
    public virtual UInt32 ReadUInt32();
    public virtual ulong ReadUInt64();
    public virtual float ReadFloat();
    public virtual double ReadDouble();
}
public class Bond.IO.Unsafe.InputPointer : object {
    private Byte* buffer;
    private int end;
    private int position;
    public long Length { get; }
    public long Position { get; public set; }
    public InputPointer(IntPtr data, int length);
    public InputPointer(Byte* data, int length);
    public sealed virtual InputPointer Clone();
    public sealed virtual long get_Length();
    public sealed virtual long get_Position();
    public sealed virtual void set_Position(long value);
    public sealed virtual void SkipBytes(int count);
    public sealed virtual byte ReadUInt8();
    public sealed virtual ushort ReadUInt16();
    public sealed virtual UInt32 ReadUInt32();
    public sealed virtual ulong ReadUInt64();
    public sealed virtual float ReadFloat();
    public sealed virtual double ReadDouble();
    public sealed virtual ArraySegment`1<byte> ReadBytes(int count);
    public sealed virtual ushort ReadVarUInt16();
    public sealed virtual UInt32 ReadVarUInt32();
    public sealed virtual ulong ReadVarUInt64();
    public sealed virtual string ReadString(Encoding encoding, int size);
    private ulong DecodeVarUInt64Checked();
    private static void EndOfStream(int count);
}
public class Bond.IO.Unsafe.InputStream : InputBuffer {
    public static int DefaultAllocationChunk;
    private static Byte[][] EmptyTempBuffers;
    private static int activeAllocationChunk;
    private Stream stream;
    private int bufferLength;
    private bool canReuseBuffer;
    public static int ActiveAllocationChunk { get; public set; }
    public long Length { get; }
    public long Position { get; public set; }
    private static InputStream();
    public InputStream(Stream stream, int bufferLength);
    private InputStream(InputStream that);
    public static int get_ActiveAllocationChunk();
    public static void set_ActiveAllocationChunk(int value);
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public sealed virtual InputStream Clone();
    public virtual ArraySegment`1<byte> ReadBytes(int count);
    internal virtual void EndOfStream(int count);
    private void AdvanceUnderlyingStream(int count, Byte[] scratchBuffer);
}
internal static class Bond.IO.Unsafe.IntegerHelper : object {
    public static int MaxBytesVarInt16;
    public static int MaxBytesVarInt32;
    public static int MaxBytesVarInt64;
    public static int EncodeVarUInt16(Byte* data, ushort value, int index);
    public static int EncodeVarUInt32(Byte* data, UInt32 value, int index);
    public static int EncodeVarUInt64(Byte* data, ulong value, int index);
    public static ushort DecodeVarUInt16(Byte* data, Int32& index);
    public static UInt32 DecodeVarUInt32(Byte* data, Int32& index);
    public static ulong DecodeVarUInt64(Byte* data, Int32& index);
}
public class Bond.IO.Unsafe.OutputBuffer : OutputBuffer {
    public OutputBuffer(int length);
    public OutputBuffer(Byte[] data);
    public virtual void WriteUInt32(UInt32 value);
    public virtual void WriteUInt64(ulong value);
    public virtual void WriteFloat(float value);
    public virtual void WriteDouble(double value);
}
public class Bond.IO.Unsafe.OutputPointer : object {
    private static int BlockCopyMin;
    private Byte* buffer;
    private int length;
    private int position;
    public IntPtr Data { get; }
    public long Position { get; public set; }
    public OutputPointer(IntPtr buffer, int length);
    public OutputPointer(Byte* buffer, int length);
    public IntPtr get_Data();
    public sealed virtual long get_Position();
    public sealed virtual void set_Position(long value);
    public sealed virtual void WriteUInt8(byte value);
    public sealed virtual void WriteUInt16(ushort value);
    public sealed virtual void WriteUInt32(UInt32 value);
    public sealed virtual void WriteUInt64(ulong value);
    public sealed virtual void WriteFloat(float value);
    public sealed virtual void WriteDouble(double value);
    public sealed virtual void WriteBytes(ArraySegment`1<byte> bytes);
    public sealed virtual void WriteVarUInt16(ushort value);
    public sealed virtual void WriteVarUInt32(UInt32 value);
    public sealed virtual void WriteVarUInt64(ulong value);
    public sealed virtual void WriteString(Encoding encoding, string value, int size);
    private static void EndOfStream(int count);
}
public class Bond.IO.Unsafe.OutputStream : OutputBuffer {
    private Stream stream;
    public long Position { get; public set; }
    public OutputStream(Stream stream, int bufferLength);
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public void Flush();
    public virtual void WriteBytes(ArraySegment`1<byte> data);
    public virtual void WriteString(Encoding encoding, string value, int size);
    internal virtual void Grow(int minLength);
}
[ExtensionAttribute]
internal static class Bond.IO.Unsafe.StreamCloning : object {
    private static FileShare[] shareModes;
    private static StreamCloning();
    [ExtensionAttribute]
public static T Clone(T stream);
    [ExtensionAttribute]
public static Stream Clone(Stream stream);
    private static MemoryStream Clone(MemoryStream stream);
    private static FileStream Clone(FileStream stream);
}
