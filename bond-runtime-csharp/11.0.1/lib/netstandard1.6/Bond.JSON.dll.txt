public abstract class Bond.Expressions.Json.JsonParser`1 : PullParser`1<JsonToken> {
    private JsonReader`1<R> reader;
    protected JsonReader`1<R> Reader { get; }
    public ParameterExpression ReaderParam { get; }
    public Expression ReaderValue { get; }
    protected Expression EOF { get; }
    protected JsonParser`1(RuntimeSchema schema, bool flatten);
    protected JsonParser`1(JsonParser`1<R> that, RuntimeSchema schema, bool flatten);
    protected JsonReader`1<R> get_Reader();
    public virtual ParameterExpression get_ReaderParam();
    public virtual Expression get_ReaderValue();
    protected virtual Expression Read();
    protected virtual Expression get_EOF();
    protected virtual Expression Token();
}
public class Bond.Expressions.Json.JsonReader`1 : object {
    private static MethodInfo read;
    private static MethodInfo skip;
    private static PropertyInfo eof;
    private static PropertyInfo tokenType;
    private static PropertyInfo lineNumber;
    private static PropertyInfo linePosition;
    private static PropertyInfo value;
    private ParameterExpression reader;
    public ParameterExpression Param { get; }
    public Expression EOF { get; }
    public Expression TokenType { get; }
    public Expression LineNumber { get; }
    public Expression LinePosition { get; }
    public Expression Value { get; }
    private static JsonReader`1();
    public ParameterExpression get_Param();
    public Expression get_EOF();
    public Expression get_TokenType();
    public Expression get_LineNumber();
    public Expression get_LinePosition();
    public Expression Read();
    public Expression Skip();
    public Expression get_Value();
}
public class Bond.Expressions.Json.SimpleJsonParser`1 : JsonParser`1<R> {
    private static Dictionary`2<BondDataType, JsonToken> ScalarTokenTypes;
    public SimpleJsonParser`1(RuntimeSchema schema);
    public SimpleJsonParser`1(Type type);
    protected SimpleJsonParser`1(SimpleJsonParser`1<R> that, RuntimeSchema schema);
    private static SimpleJsonParser`1();
    public virtual Expression Container(Nullable`1<BondDataType> expectedType, ContainerHandler handler);
    public virtual Expression Map(Nullable`1<BondDataType> expectedKeyType, Nullable`1<BondDataType> expectedValueType, MapHandler handler);
    public virtual Expression Blob(Expression count);
    public virtual Expression Scalar(Expression valueType, BondDataType expectedType, ValueHandler handler);
    protected virtual IStateMachine`1<JsonToken> CreateStateMachine(IEnumerable`1<TransformSchemaPair> transforms, ParameterExpression requiredFields);
    private Expression ThrowUnexpectedState(Expression state);
    private Expression ThrowUnexpectedInput(Expression errorMessage);
    private Expression ThrowUnexpectedInput(string errorMessage);
    private Expression ProcessField(ParameterExpression requiredFields, IEnumerable`1<TransformSchemaPair> transforms);
    private Expression PropertyNameEquals(string name);
    private Expression JsonTokenEquals(JsonToken token);
    private Expression JsonTokenNotEquals(JsonToken token);
    private Expression SkipValue();
}
public interface Bond.Protocols.IJsonReader {
    public bool EOF { get; }
    public JsonToken TokenType { get; }
    public object Value { get; }
    public int LineNumber { get; }
    public int LinePosition { get; }
    public abstract virtual void Read();
    public abstract virtual void Skip();
    public abstract virtual bool get_EOF();
    public abstract virtual JsonToken get_TokenType();
    public abstract virtual object get_Value();
    public abstract virtual int get_LineNumber();
    public abstract virtual int get_LinePosition();
}
[ParserAttribute("Bond.Expressions.Json.SimpleJsonParser`1")]
public class Bond.Protocols.SimpleJsonReader : ValueType {
    private JsonTextReader reader;
    private bool eof;
    public bool EOF { get; }
    public JsonToken TokenType { get; }
    public Type ValueType { get; }
    public object Value { get; }
    public int LineNumber { get; }
    public int LinePosition { get; }
    public SimpleJsonReader(TextReader reader);
    public SimpleJsonReader(Stream stream);
    public sealed virtual bool get_EOF();
    public sealed virtual void Skip();
    public sealed virtual JsonToken get_TokenType();
    public Type get_ValueType();
    public sealed virtual object get_Value();
    public sealed virtual int get_LineNumber();
    public sealed virtual int get_LinePosition();
    public sealed virtual void Read();
}
[ReaderAttribute("Bond.Protocols.SimpleJsonReader")]
public class Bond.Protocols.SimpleJsonWriter : ValueType {
    public static string NameAttribute;
    private JsonTextWriter writer;
    public SimpleJsonWriter(TextWriter writer);
    public SimpleJsonWriter(Stream stream);
    public void Flush();
    public sealed virtual void WriteVersion();
    public sealed virtual void WriteStructBegin(Metadata metadata);
    public sealed virtual void WriteStructEnd();
    public sealed virtual void WriteBaseBegin(Metadata metadata);
    public sealed virtual void WriteBaseEnd();
    public sealed virtual void WriteFieldBegin(BondDataType type, ushort id, Metadata metadata);
    public sealed virtual void WriteFieldEnd();
    public sealed virtual void WriteFieldOmitted(BondDataType type, ushort id, Metadata metadata);
    public sealed virtual void WriteContainerBegin(int count, BondDataType keyType, BondDataType valueType);
    public sealed virtual void WriteContainerBegin(int count, BondDataType elementType);
    public sealed virtual void WriteContainerEnd();
    public sealed virtual void WriteBool(bool value);
    public sealed virtual void WriteBytes(ArraySegment`1<byte> data);
    public sealed virtual void WriteDouble(double value);
    public sealed virtual void WriteFloat(float value);
    public sealed virtual void WriteInt16(short value);
    public sealed virtual void WriteInt32(int value);
    public sealed virtual void WriteInt64(long value);
    public sealed virtual void WriteInt8(sbyte value);
    public sealed virtual void WriteUInt16(ushort value);
    public sealed virtual void WriteUInt32(UInt32 value);
    public sealed virtual void WriteUInt64(ulong value);
    public sealed virtual void WriteUInt8(byte value);
    public sealed virtual void WriteString(string value);
    public sealed virtual void WriteWString(string value);
}
