public static class BrotliSharpLib.Brotli : object {
    private static int BROTLI_NUM_LITERAL_SYMBOLS;
    private static int BROTLI_NUM_COMMAND_SYMBOLS;
    private static int BROTLI_NUM_BLOCK_LEN_SYMBOLS;
    private static int BROTLI_MAX_NPOSTFIX;
    private static int BROTLI_MAX_NDIRECT;
    private static int BROTLI_NUM_DISTANCE_SYMBOLS;
    private static int BROTLI_REPEAT_PREVIOUS_CODE_LENGTH;
    private static int BROTLI_REPEAT_ZERO_CODE_LENGTH;
    private static int BROTLI_CODE_LENGTH_CODES;
    private static int BROTLI_INITIAL_REPEATED_CODE_LENGTH;
    private static int BROTLI_NUM_DISTANCE_SHORT_CODES;
    private static int BROTLI_MAX_DISTANCE_BITS;
    private static int BROTLI_LITERAL_CONTEXT_BITS;
    private static int BROTLI_DISTANCE_CONTEXT_BITS;
    private static int BROTLI_WINDOW_GAP;
    private static bool BROTLI_ALIGNED_READ;
    private static Endianess BYTE_ORDER;
    private static bool BROTLI_LITTLE_ENDIAN;
    private static bool BROTLI_BIG_ENDIAN;
    private static int BROTLI_HUFFMAN_MAX_CODE_LENGTH;
    private static int BROTLI_HUFFMAN_MAX_SIZE_26;
    private static int BROTLI_HUFFMAN_MAX_SIZE_258;
    private static int BROTLI_HUFFMAN_MAX_SIZE_272;
    private static int BROTLI_HUFFMAN_MAX_CODE_LENGTH_CODE_LENGTH;
    private static int BROTLI_REVERSE_BITS_MAX;
    private static int BROTLI_REVERSE_BITS_BASE;
    private static int HUFFMAN_TABLE_MASK;
    private static int BROTLI_MIN_DICTIONARY_WORD_LENGTH;
    private static int BROTLI_MAX_DICTIONARY_WORD_LENGTH;
    private static int HUFFMAN_TABLE_BITS;
    private static SizeT BROTLI_REVERSE_BITS_LOWEST;
    private static int BROTLI_SHORT_FILL_BIT_WINDOW_READ;
    private static string kPrefixSuffix;
    private static PrefixCodeRange[] kBlockLengthPrefixCode;
    private static UInt32[] kBitMask;
    private static Byte[] kReverseBits;
    private static UInt16[] kMaxHuffmanTableSize;
    private static Byte[] kContextLookup;
    private static Int32[] kContextLookupOffsets;
    private static CmdLutElement[] kCmdLut;
    private static Transform[] kTransforms;
    private static int kNumTransforms;
    private static Byte[] kCodeLengthCodeOrder;
    private static Byte[] kCodeLengthPrefixLength;
    private static Byte[] kCodeLengthPrefixValue;
    private static UInt32[] kBrotliDictionaryOffsetsByLength;
    private static Byte[] kBrotliDictionarySizeBitsByLength;
    private static Byte[] kBrotliDictionary;
    private static int SYMBOL_BITS;
    private static SizeT kMaxLiteralHistograms;
    private static SizeT kMaxCommandHistograms;
    private static double kLiteralBlockSwitchCost;
    private static double kCommandBlockSwitchCost;
    private static double kDistanceBlockSwitchCost;
    private static SizeT kLiteralStrideLength;
    private static SizeT kCommandStrideLength;
    private static SizeT kSymbolsPerLiteralHistogram;
    private static SizeT kSymbolsPerCommandHistogram;
    private static SizeT kSymbolsPerDistanceHistogram;
    private static SizeT kMinLengthForBlockSplitting;
    private static SizeT kIterMulForRefining;
    private static SizeT kMinItersForRefining;
    private static UInt32[] kInsBase;
    private static UInt32[] kInsExtra;
    private static UInt32[] kCopyBase;
    private static UInt32[] kCopyExtra;
    internal static int BROTLI_MIN_WINDOW_BITS;
    internal static int BROTLI_MAX_WINDOW_BITS;
    private static int BROTLI_MIN_INPUT_BLOCK_BITS;
    private static int BROTLI_MAX_INPUT_BLOCK_BITS;
    internal static int BROTLI_MIN_QUALITY;
    internal static int BROTLI_MAX_QUALITY;
    private static int FAST_ONE_PASS_COMPRESSION_QUALITY;
    private static int FAST_TWO_PASS_COMPRESSION_QUALITY;
    private static int ZOPFLIFICATION_QUALITY;
    private static int HQ_ZOPFLIFICATION_QUALITY;
    private static int MAX_QUALITY_FOR_STATIC_ENTROPY_CODES;
    private static int MIN_QUALITY_FOR_BLOCK_SPLIT;
    private static int MIN_QUALITY_FOR_OPTIMIZE_HISTOGRAMS;
    private static int MIN_QUALITY_FOR_EXTENSIVE_REFERENCE_SEARCH;
    private static int MIN_QUALITY_FOR_CONTEXT_MODELING;
    private static int MIN_QUALITY_FOR_HQ_CONTEXT_MODELING;
    private static int BROTLI_MAX_STATIC_CONTEXTS;
    private static int HISTOGRAMS_PER_BATCH;
    private static int CLUSTERS_PER_BATCH;
    private static int BROTLI_MAX_NUMBER_OF_BLOCK_TYPES;
    private static int BROTLI_CONTEXT_MAP_MAX_RLE;
    private static int BROTLI_MAX_CONTEXT_MAP_SYMBOLS;
    private static int BROTLI_MAX_BLOCK_TYPE_SYMBOLS;
    private static int MAX_HUFFMAN_TREE_SIZE;
    private static int SIMPLE_DISTANCE_ALPHABET_SIZE;
    private static int SIMPLE_DISTANCE_ALPHABET_BITS;
    private static int MAX_NUM_DELAYED_SYMBOLS;
    private static int MAX_ZOPFLI_LEN_QUALITY_10;
    private static int MAX_ZOPFLI_LEN_QUALITY_11;
    private static int BROTLI_LONG_COPY_QUICK_STEP;
    private static int BROTLI_LITERAL_BYTE_SCORE;
    private static int BROTLI_DISTANCE_BIT_PENALTY;
    private static int BROTLI_SCORE_BASE;
    private static UInt32 kCutoffTransformsCount;
    private static ulong kCutoffTransforms;
    private static int BROTLI_MAX_STATIC_DICTIONARY_MATCH_LEN;
    private static UInt32 kInvalidMatch;
    private static int MAX_NUM_MATCHES_H10;
    private static int MIN_QUALITY_FOR_HQ_BLOCK_SPLITTING;
    private static int MIN_QUALITY_FOR_RECOMPUTE_DISTANCE_PREFIXES;
    private static UInt32 kHashMul32;
    private static ulong kHashMul64;
    private static ulong kHashMul64Long;
    private static int kDictNumBits;
    private static UInt32 kDictHashMul32;
    private static float kInfinity;
    private static byte kUppercaseFirst;
    private static double kMinUTF8Ratio;
    private static int MAX_HUFFMAN_BITS;
    private static SizeT kCompressFragmentTwoPassBlockSize;
    private static int BROTLI_DEFAULT_QUALITY;
    private static int BROTLI_DEFAULT_WINDOW;
    private static BrotliEncoderMode BROTLI_DEFAULT_MODE;
    private static Byte[] kUTF8ContextLookup;
    private static Byte[] kSigned3BitContextLookup;
    private static UInt16[] kStaticDictionaryHash;
    private static Single[] kLog2Table;
    private static double LOG_2_INV;
    private static Dictionary`2<int, Hasher> kHashers;
    private static UInt16[] kStaticDictionaryBuckets;
    private static DictWord[] kStaticDictionaryWords;
    private static Byte[] kDefaultCommandDepths;
    private static UInt16[] kDefaultCommandBits;
    private static Byte[] kDefaultCommandCode;
    private static SizeT kDefaultCommandCodeNumBits;
    private static Byte[] kCodeLengthDepth;
    private static Byte[] kCodeLengthBits;
    private static UInt64[] kZeroRepsBits;
    private static UInt32[] kZeroRepsDepth;
    private static UInt64[] kNonZeroRepsBits;
    private static UInt32[] kNonZeroRepsDepth;
    private static UInt32[] kCmdHistoSeed;
    private static Byte[] kOmitLastNTransforms;
    private static UInt32[] kDistanceCacheIndex;
    private static Int32[] kDistanceCacheOffset;
    private static Byte[] kStaticCommandCodeDepth;
    private static UInt16[] kStaticCommandCodeBits;
    private static Byte[] kStaticDistanceCodeDepth;
    private static UInt16[] kStaticDistanceCodeBits;
    private static UInt32[] kStaticContextMapComplexUTF8;
    private static UInt32[] kStaticContextMapContinuation;
    private static UInt32[] kStaticContextMapSimpleUTF8;
    private static bool Is64Bit;
    private static int WordSize;
    private static SizeT wsize;
    private static SizeT wmask;
    private static Brotli();
    public static Byte[] DecompressBuffer(Byte[] buffer, int offset, int length, Byte[] customDictionary);
    public static Byte[] CompressBuffer(Byte[] buffer, int offset, int length, int quality, int lgwin, Byte[] customDictionary);
    private static SizeT BROTLI_MAX_BACKWARD_LIMIT(SizeT W);
    private static UInt32 BitMask(UInt32 n);
    private static void BrotliInitBitReader(BrotliBitReader* br);
    private static bool BrotliWarmupBitReader(BrotliBitReader* br);
    private static void BrotliBitReaderSaveState(BrotliBitReader* from, BrotliBitReader* to);
    private static void BrotliBitReaderRestoreState(BrotliBitReader* to, BrotliBitReader* from);
    private static UInt32 BrotliGetAvailableBits(BrotliBitReader* br);
    private static SizeT BrotliGetRemainingBytes(BrotliBitReader* br);
    private static bool BrotliCheckInputAmount(BrotliBitReader* br, SizeT num);
    private static ushort BrotliLoad16LE(Byte* bIn);
    private static UInt32 BrotliLoad32LE(Byte* bIn);
    private static ulong BrotliLoad64LE(Byte* bIn);
    private static void BrotliFillBitWindow(BrotliBitReader* br, UInt32 n_bits);
    private static void BrotliFillBitWindow16(BrotliBitReader* br);
    private static bool BrotliPullByte(BrotliBitReader* br);
    private static SizeT BrotliGetBitsUnmasked(BrotliBitReader* br);
    private static UInt32 BrotliGet16BitsUnmasked(BrotliBitReader* br);
    private static UInt32 BrotliGetBits(BrotliBitReader* br, UInt32 n_bits);
    private static bool BrotliSafeGetBits(BrotliBitReader* br, UInt32 n_bits, UInt32* val);
    private static void BrotliDropBits(BrotliBitReader* br, UInt32 n_bits);
    private static void BrotliBitReaderUnload(BrotliBitReader* br);
    private static void BrotliTakeBits(BrotliBitReader* br, UInt32 n_bits, UInt32* val);
    private static UInt32 BrotliReadBits(BrotliBitReader* br, UInt32 n_bits);
    private static bool BrotliSafeReadBits(BrotliBitReader* br, UInt32 n_bits, UInt32* val);
    private static bool BrotliJumpToByteBoundary(BrotliBitReader* br);
    private static void BrotliCopyBytes(Byte* dest, BrotliBitReader* br, SizeT num);
    private static T CreateStruct();
    private static Void* DefaultAllocFunc(Void* opaque, SizeT size);
    private static void DefaultFreeFunc(Void* opaque, Void* address);
    internal static BrotliDecoderStateStruct BrotliCreateDecoderState();
    internal static void BrotliDecoderSetCustomDictionary(BrotliDecoderStateStruct& s, SizeT size, Byte* dict);
    private static BrotliDecoderResult BrotliDecoderDecompress(SizeT encoded_size, Byte* encoded_buffer, SizeT* decoded_size, Byte* decoded_buffer);
    private static BrotliDecoderResult SaveErrorCode(BrotliDecoderStateStruct& s, BrotliDecoderErrorCode e);
    private static SizeT UnwrittenBytes(BrotliDecoderStateStruct& s, bool wrap);
    private static BrotliDecoderErrorCode WriteRingBuffer(BrotliDecoderStateStruct& s, SizeT* available_out, Byte** next_out, SizeT* total_out, bool force);
    private static UInt32 DecodeWindowBits(BrotliBitReader* br);
    private static BrotliDecoderErrorCode DecodeMetaBlockLength(BrotliDecoderStateStruct& s, BrotliBitReader* br);
    private static void BrotliCalculateRingBufferSize(BrotliDecoderStateStruct& s);
    private static bool BrotliEnsureRingBuffer(BrotliDecoderStateStruct& s);
    private static BrotliDecoderErrorCode CopyUncompressedBlockToOutput(SizeT* available_out, Byte** next_out, SizeT* total_out, BrotliDecoderStateStruct& s);
    private static UInt32 Log2Floor(UInt32 x);
    private static BrotliDecoderErrorCode ReadSimpleHuffmanSymbols(UInt32 alphabet_size, BrotliDecoderStateStruct& s);
    private static BrotliDecoderErrorCode DecodeVarLenUint8(BrotliDecoderStateStruct& s, BrotliBitReader* br, UInt32* value);
    private static BrotliDecoderErrorCode ReadCodeLengthCodeLengths(BrotliDecoderStateStruct& s);
    private static void ProcessSingleCodeLength(UInt32 code_len, UInt32* symbol, UInt32* repeat, UInt32* space, UInt32* prev_code_len, UInt16* symbol_lists, UInt16* code_length_histo, Int32* next_symbol);
    private static void ProcessRepeatedCodeLength(UInt32 code_len, UInt32 repeat_delta, UInt32 alphabet_size, UInt32* symbol, UInt32* repeat, UInt32* space, UInt32* prev_code_len, UInt32* repeat_code_len, UInt16* symbol_lists, UInt16* code_length_histo, Int32* next_symbol);
    private static BrotliDecoderErrorCode SafeReadSymbolCodeLengths(UInt32 alphabet_size, BrotliDecoderStateStruct& s);
    private static BrotliDecoderErrorCode ReadSymbolCodeLengths(UInt32 alphabet_size, BrotliDecoderStateStruct& s);
    private static BrotliDecoderErrorCode ReadHuffmanCode(UInt32 alphabet_size, HuffmanCode* table, UInt32* opt_table_size, BrotliDecoderStateStruct& s);
    private static UInt32 DecodeSymbol(UInt32 bits, HuffmanCode* table, BrotliBitReader* br);
    private static bool SafeDecodeSymbol(HuffmanCode* table, BrotliBitReader* br, UInt32* result);
    private static bool SafeReadSymbol(HuffmanCode* table, BrotliBitReader* br, UInt32* result);
    private static bool SafeReadBlockLength(BrotliDecoderStateStruct& s, UInt32* result, HuffmanCode* table, BrotliBitReader* br);
    private static BrotliDecoderErrorCode ReadContextModes(BrotliDecoderStateStruct& s);
    private static void InverseMoveToFrontTransform(Byte* v, UInt32 v_len, BrotliDecoderStateStruct& state);
    private static BrotliDecoderErrorCode DecodeContextMap(UInt32 context_map_size, UInt32* num_htrees, Byte** context_map_arg, BrotliDecoderStateStruct& s);
    private static void DetectTrivialLiteralBlockTypes(BrotliDecoderStateStruct& s);
    private static BrotliDecoderErrorCode HuffmanTreeGroupDecode(HuffmanTreeGroup* group, BrotliDecoderStateStruct& s);
    private static void PrepareLiteralDecoding(BrotliDecoderStateStruct& s);
    private static bool CheckInputAmount(int safe, BrotliBitReader* br, SizeT num);
    private static UInt32 ReadSymbol(HuffmanCode* table, BrotliBitReader* br);
    private static UInt32 ReadBlockLength(HuffmanCode* table, BrotliBitReader* br);
    private static bool DecodeBlockTypeAndLength(int safe, BrotliDecoderStateStruct& s, int tree_type);
    private static bool DecodeCommandBlockSwitchInternal(int safe, BrotliDecoderStateStruct& s);
    private static void DecodeCommandBlockSwitch(BrotliDecoderStateStruct& s);
    private static bool SafeDecodeCommandBlockSwitch(BrotliDecoderStateStruct& s);
    private static bool SafeReadBits(BrotliBitReader* br, UInt32 n_bits, UInt32* val);
    private static bool ReadCommandInternal(int safe, BrotliDecoderStateStruct& s, BrotliBitReader* br, Int32* insert_length);
    private static void ReadCommand(BrotliDecoderStateStruct& s, BrotliBitReader* br, Int32* insert_length);
    private static bool SafeReadCommand(BrotliDecoderStateStruct& s, BrotliBitReader* br, Int32* insert_length);
    private static void PreloadSymbol(int safe, HuffmanCode* table, BrotliBitReader* br, UInt32* bits, UInt32* value);
    private static bool DecodeLiteralBlockSwitchInternal(int safe, BrotliDecoderStateStruct& s);
    private static void DecodeLiteralBlockSwitch(BrotliDecoderStateStruct& s);
    private static bool SafeDecodeLiteralBlockSwitch(BrotliDecoderStateStruct& s);
    private static UInt32 ReadPreloadedSymbol(HuffmanCode* table, BrotliBitReader* br, UInt32* bits, UInt32* value);
    private static bool DecodeDistanceBlockSwitchInternal(int safe, BrotliDecoderStateStruct& s);
    private static void DecodeDistanceBlockSwitch(BrotliDecoderStateStruct& s);
    private static bool SafeDecodeDistanceBlockSwitch(BrotliDecoderStateStruct& s);
    private static void TakeDistanceFromRingBuffer(BrotliDecoderStateStruct& s);
    private static bool ReadDistanceInternal(int safe, BrotliDecoderStateStruct& s, BrotliBitReader* br);
    private static void ReadDistance(BrotliDecoderStateStruct& s, BrotliBitReader* br);
    private static bool SafeReadDistance(BrotliDecoderStateStruct& s, BrotliBitReader* br);
    private static BrotliDecoderErrorCode ProcessCommandsInternal(int safe, BrotliDecoderStateStruct& s);
    private static BrotliDecoderErrorCode ProcessCommands(BrotliDecoderStateStruct& s);
    private static BrotliDecoderErrorCode SafeProcessCommands(BrotliDecoderStateStruct& s);
    private static void WrapRingBuffer(BrotliDecoderStateStruct& s);
    private static void BrotliDecoderHuffmanTreeGroupRelease(BrotliDecoderStateStruct& s, HuffmanTreeGroup* group);
    internal static BrotliDecoderResult BrotliDecoderDecompressStream(BrotliDecoderStateStruct& s, SizeT* available_in, Byte** next_in, SizeT* available_out, Byte** next_out, SizeT* total_out);
    private static SizeT BrotliReverseBits(SizeT num);
    private static void ReplicateValue(HuffmanCode* table, int step, int end, HuffmanCode code);
    private static int NextTableBitSize(UInt16* count, int len, int root_bits);
    private static void BrotliBuildCodeLengthsHuffmanTable(HuffmanCode* table, Byte* code_lengths, UInt16* count);
    private static UInt32 BrotliBuildHuffmanTable(HuffmanCode* root_table, int root_bits, UInt16* symbol_lists, UInt16* count);
    private static UInt32 BrotliBuildSimpleHuffmanTable(HuffmanCode* table, int root_bits, UInt16* val, UInt32 num_symbols);
    internal static void BrotliDecoderStateInit(BrotliDecoderStateStruct& s);
    private static void BrotliDecoderStateInitWithCustomAllocators(BrotliDecoderStateStruct& s, brotli_alloc_func alloc_func, brotli_free_func free_func, Void* opaque);
    internal static void BrotliDecoderStateCleanup(BrotliDecoderStateStruct& s);
    private static void BrotliDecoderStateMetablockBegin(BrotliDecoderStateStruct& s);
    private static void BrotliDecoderStateCleanupAfterMetablock(BrotliDecoderStateStruct& s);
    private static bool BrotliDecoderHuffmanTreeGroupInit(BrotliDecoderStateStruct& s, HuffmanTreeGroup* group, UInt32 alphabet_size, UInt32 ntrees);
    private static int ToUpperCase(Byte* p);
    private static int TransformDictionaryWord(Byte* dst, Byte* word, int len, int transform);
    private static Endianess GetEndianess();
    private static bool IsWhitelistedCPU();
    private static SizeT ComputeDistanceCode(SizeT distance, SizeT max_distance, Int32* dist_cache);
    private static void BrotliCreateBackwardReferences(SizeT num_bytes, SizeT position, Byte* ringbuffer, SizeT ringbuffer_mask, BrotliEncoderParams* params_, HasherHandle hasher, Int32* dist_cache, SizeT* last_insert_len, Command* commands, SizeT* num_commands, SizeT* num_literals);
    private static void InitStartPosQueue(StartPosQueue* self);
    private static void BrotliInitZopfliNodes(ZopfliNode* array, SizeT length);
    private static void CleanupZopfliCostModel(MemoryManager& m, ZopfliCostModel* self);
    private static UInt32 ZopfliNodeCopyLength(ZopfliNode* self);
    private static UInt32 ZopfliNodeLengthCode(ZopfliNode* self);
    private static UInt32 ZopfliNodeCopyDistance(ZopfliNode* self);
    private static UInt32 ZopfliNodeDistanceCode(ZopfliNode* self);
    private static UInt32 ZopfliNodeCommandLength(ZopfliNode* self);
    private static void InitZopfliCostModel(MemoryManager& m, ZopfliCostModel* self, SizeT num_bytes);
    private static void ZopfliCostModelSetFromLiteralCosts(ZopfliCostModel* self, SizeT position, Byte* ringbuffer, SizeT ringbuffer_mask);
    private static float ZopfliCostModelGetCommandCost(ZopfliCostModel* self, ushort cmdcode);
    private static float ZopfliCostModelGetDistanceCost(ZopfliCostModel* self, SizeT distcode);
    private static float ZopfliCostModelGetLiteralCosts(ZopfliCostModel* self, SizeT from, SizeT to);
    private static float ZopfliCostModelGetMinCostCmd(ZopfliCostModel* self);
    private static void ComputeDistanceCache(SizeT pos, Int32* starting_dist_cache, ZopfliNode* nodes, Int32* dist_cache);
    private static UInt32 ComputeDistanceShortcut(SizeT block_start, SizeT pos, SizeT max_backward, ZopfliNode* nodes);
    private static SizeT StartPosQueueSize(StartPosQueue* self);
    private static void StartPosQueuePush(StartPosQueue* self, PosData* posdata);
    private static void EvaluateNode(SizeT block_start, SizeT pos, SizeT max_backward_limit, Int32* starting_dist_cache, ZopfliCostModel* model, StartPosQueue* queue, ZopfliNode* nodes);
    private static PosData* StartPosQueueAt(StartPosQueue* self, SizeT k);
    private static SizeT ComputeMinimumCopyLength(float start_cost, ZopfliNode* nodes, SizeT num_bytes, SizeT pos);
    private static void UpdateZopfliNode(ZopfliNode* nodes, SizeT pos, SizeT start_pos, SizeT len, SizeT len_code, SizeT dist, SizeT short_code, float cost);
    private static SizeT UpdateNodes(SizeT num_bytes, SizeT block_start, SizeT pos, Byte* ringbuffer, SizeT ringbuffer_mask, BrotliEncoderParams* params_, SizeT max_backward_limit, Int32* starting_dist_cache, SizeT num_matches, BackwardMatch* matches, ZopfliCostModel* model, StartPosQueue* queue, ZopfliNode* nodes);
    private static SizeT ComputeShortestPathFromNodes(SizeT num_bytes, ZopfliNode* nodes);
    private static SizeT BrotliZopfliComputeShortestPath(MemoryManager& m, SizeT num_bytes, SizeT position, Byte* ringbuffer, SizeT ringbuffer_mask, BrotliEncoderParams* params_, SizeT max_backward_limit, Int32* dist_cache, HasherHandle hasher, ZopfliNode* nodes);
    private static void BrotliZopfliCreateCommands(SizeT num_bytes, SizeT block_start, SizeT max_backward_limit, ZopfliNode* nodes, Int32* dist_cache, SizeT* last_insert_len, Command* commands, SizeT* num_literals);
    private static void BrotliCreateZopfliBackwardReferences(MemoryManager& m, SizeT num_bytes, SizeT position, Byte* ringbuffer, SizeT ringbuffer_mask, BrotliEncoderParams* params_, HasherHandle hasher, Int32* dist_cache, SizeT* last_insert_len, Command* commands, SizeT* num_commands, SizeT* num_literals);
    private static void SetCost(UInt32* histogram, SizeT histogram_size, Single* cost);
    private static void ZopfliCostModelSetFromCommands(ZopfliCostModel* self, SizeT position, Byte* ringbuffer, SizeT ringbuffer_mask, Command* commands, SizeT num_commands, SizeT last_insert_len);
    private static SizeT ZopfliIterate(SizeT num_bytes, SizeT position, Byte* ringbuffer, SizeT ringbuffer_mask, BrotliEncoderParams* params_, SizeT max_backward_limit, Int32* dist_cache, ZopfliCostModel* model, UInt32* num_matches, BackwardMatch* matches, ZopfliNode* nodes);
    private static void BrotliCreateHqZopfliBackwardReferences(MemoryManager& m, SizeT num_bytes, SizeT position, Byte* ringbuffer, SizeT ringbuffer_mask, BrotliEncoderParams* params_, HasherHandle hasher, Int32* dist_cache, SizeT* last_insert_len, Command* commands, SizeT* num_commands, SizeT* num_literals);
    private static double ShannonEntropy(UInt32* population, SizeT size, SizeT* total);
    private static double BitsEntropy(UInt32* population, SizeT size);
    private static UInt32 BlockLengthPrefixCode(UInt32 len);
    private static void GetBlockLengthPrefixCode(UInt32 len, SizeT* code, UInt32* n_extra, UInt32* extra);
    private static void InitBlockTypeCodeCalculator(BlockTypeCodeCalculator* self);
    private static SizeT NextBlockTypeCode(BlockTypeCodeCalculator* calculator, byte type);
    private static void InitBlockEncoder(BlockEncoder* self, SizeT alphabet_size, SizeT num_block_types, Byte* block_types, UInt32* block_lengths, SizeT num_blocks);
    private static void StoreVarLenUint8(SizeT n, SizeT* storage_ix, Byte* storage);
    private static void StoreBlockSwitch(BlockSplitCode* code, UInt32 block_len, byte block_type, bool is_first_block, SizeT* storage_ix, Byte* storage);
    private static void BuildAndStoreBlockSplitCode(Byte* types, UInt32* lengths, SizeT num_blocks, SizeT num_types, HuffmanTree* tree, BlockSplitCode* code, SizeT* storage_ix, Byte* storage);
    private static void BuildAndStoreBlockSwitchEntropyCodes(BlockEncoder* self, HuffmanTree* tree, SizeT* storage_ix, Byte* storage);
    private static void StoreTrivialContextMap(SizeT num_types, SizeT context_bits, HuffmanTree* tree, SizeT* storage_ix, Byte* storage);
    private static SizeT IndexOf(Byte* v, SizeT v_size, byte value);
    private static void MoveToFront(Byte* v, SizeT index);
    private static void MoveToFrontTransform(UInt32* v_in, SizeT v_size, UInt32* v_out);
    private static void RunLengthCodeZeros(SizeT in_size, UInt32* v, SizeT* out_size, UInt32* max_run_length_prefix);
    private static void EncodeContextMap(MemoryManager& m, UInt32* context_map, SizeT context_map_size, SizeT num_clusters, HuffmanTree* tree, SizeT* storage_ix, Byte* storage);
    private static void StoreSymbol(BlockEncoder* self, SizeT symbol, SizeT* storage_ix, Byte* storage);
    private static void StoreSymbolWithContext(BlockEncoder* self, SizeT symbol, SizeT context, UInt32* context_map, SizeT* storage_ix, Byte* storage, SizeT context_bits);
    private static void CleanupBlockEncoder(MemoryManager& m, BlockEncoder* self);
    private static void BrotliStoreMetaBlock(MemoryManager& m, Byte* input, SizeT start_pos, SizeT length, SizeT mask, byte prev_byte, byte prev_byte2, bool is_last, UInt32 num_direct_distance_codes, UInt32 distance_postfix_bits, ContextType literal_context_mode, Command* commands, SizeT n_commands, MetaBlockSplit* mb, SizeT* storage_ix, Byte* storage);
    private static void BrotliEncodeMlen(SizeT length, UInt64* bits, SizeT* numbits, UInt64* nibblesbits);
    private static void JumpToByteBoundary(SizeT* storage_ix, Byte* storage);
    private static void StoreCompressedMetaBlockHeader(bool is_final_block, SizeT length, SizeT* storage_ix, Byte* storage);
    private static void StoreCommandExtra(Command* cmd, SizeT* storage_ix, Byte* storage);
    private static void StoreDataWithHuffmanCodes(Byte* input, SizeT start_pos, SizeT mask, Command* commands, SizeT n_commands, Byte* lit_depth, UInt16* lit_bits, Byte* cmd_depth, UInt16* cmd_bits, Byte* dist_depth, UInt16* dist_bits, SizeT* storage_ix, Byte* storage);
    private static void BuildHistograms(Byte* input, SizeT start_pos, SizeT mask, Command* commands, SizeT n_commands, HistogramLiteral* lit_histo, HistogramCommand* cmd_histo, HistogramDistance* dist_histo);
    private static void StoreSimpleHuffmanTree(Byte* depths, SizeT* symbols, SizeT num_symbols, SizeT max_bits, SizeT* storage_ix, Byte* storage);
    private static void BuildAndStoreHuffmanTree(UInt32* histogram, SizeT length, HuffmanTree* tree, Byte* depth, UInt16* bits, SizeT* storage_ix, Byte* storage);
    private static void BrotliStoreMetaBlockTrivial(MemoryManager& m, Byte* input, SizeT start_pos, SizeT length, SizeT mask, bool is_last, Command* commands, SizeT n_commands, SizeT* storage_ix, Byte* storage);
    private static void BrotliStoreMetaBlockFast(MemoryManager& m, Byte* input, SizeT start_pos, SizeT length, SizeT mask, bool is_last, Command* commands, SizeT n_commands, SizeT* storage_ix, Byte* storage);
    private static void BrotliStoreUncompressedMetaBlock(bool is_final_block, Byte* input, SizeT position, SizeT mask, SizeT len, SizeT* storage_ix, Byte* storage);
    private static void BrotliStoreUncompressedMetaBlockHeader(SizeT length, SizeT* storage_ix, Byte* storage);
    private static void BrotliStoreHuffmanTreeToBitMask(SizeT huffman_tree_size, Byte* huffman_tree, Byte* huffman_tree_extra_bits, Byte* code_length_bitdepth, UInt16* code_length_bitdepth_symbols, SizeT* storage_ix, Byte* storage);
    private static void BrotliStoreHuffmanTreeOfHuffmanTreeToBitMask(int num_codes, Byte* code_length_bitdepth, SizeT* storage_ix, Byte* storage);
    private static void BrotliStoreHuffmanTree(Byte* depths, SizeT num, HuffmanTree* tree, SizeT* storage_ix, Byte* storage);
    private static bool SortHuffmanTreeBitStream(HuffmanTree* v0, HuffmanTree* v1);
    private static void BrotliBuildAndStoreHuffmanTreeFast(MemoryManager& m, UInt32* histogram, SizeT histogram_total, SizeT max_bits, Byte* depth, UInt16* bits, SizeT* storage_ix, Byte* storage);
    private static SizeT CountLiterals(Command* cmds, SizeT num_commands);
    private static void CopyLiteralsToByteArray(Command* cmds, SizeT num_commands, Byte* data, SizeT offset, SizeT mask, Byte* literals);
    private static void BrotliInitBlockSplit(BlockSplit* self);
    private static UInt32 MyRand(UInt32* seed);
    private static void BrotliDestroyBlockSplit(MemoryManager& m, BlockSplit* self);
    private static double BitCost(SizeT count);
    private static void BrotliSplitBlock(MemoryManager& m, Command* cmds, SizeT num_commands, Byte* data, SizeT pos, SizeT mask, BrotliEncoderParams* params_, BlockSplit* literal_split, BlockSplit* insert_and_copy_split, BlockSplit* dist_split);
    private static bool HistogramPairIsLess(HistogramPair* p1, HistogramPair* p2);
    private static double ClusterCostDiff(SizeT size_a, SizeT size_b);
    private static ushort GetInsertLengthCode(SizeT insertlen);
    private static ushort GetCopyLengthCode(SizeT copylen);
    private static ushort CombineLengthCodes(ushort inscode, ushort copycode, bool use_last_distance);
    private static void InitCommand(Command* self, SizeT insertlen, SizeT copylen, SizeT copylen_code, SizeT distance_code);
    private static void GetLengthCode(SizeT insertlen, SizeT copylen, bool use_last_distance, UInt16* code);
    private static UInt32 CommandRestoreDistanceCode(Command* self);
    private static UInt32 CommandCopyLenCode(Command* self);
    private static void InitInsertCommand(Command* self, SizeT insertlen);
    private static UInt32 CommandDistanceContext(Command* self);
    private static UInt32 CommandCopyLen(Command* self);
    private static UInt32 GetInsertExtra(ushort inscode);
    private static UInt32 GetCopyExtra(ushort copycode);
    private static UInt32 GetInsertBase(ushort inscode);
    private static UInt32 GetCopyBase(ushort copycode);
    private static void BrotliCompressFragmentFast(MemoryManager& m, Byte* input, SizeT input_size, bool is_last, Int32* table, SizeT table_size, Byte* cmd_depth, UInt16* cmd_bits, SizeT* cmd_code_numbits, Byte* cmd_code, SizeT* storage_ix, Byte* storage);
    private static void BrotliCompressFragmentTwoPass(MemoryManager& m, Byte* input, SizeT input_size, bool is_last, UInt32* command_buf, Byte* literal_buf, Int32* table, SizeT table_size, SizeT* storage_ix, Byte* storage);
    private static byte Context(byte p1, byte p2, ContextType mode);
    internal static BrotliEncoderStateStruct BrotliEncoderCreateInstance(brotli_alloc_func alloc_func, brotli_free_func free_func, Void* opaque);
    private static void BrotliEncoderInitParams(BrotliEncoderParams& params_);
    private static void BrotliEncoderCleanupState(BrotliEncoderStateStruct& s);
    internal static void BrotliEncoderDestroyInstance(BrotliEncoderStateStruct& state);
    private static void BrotliEncoderInitState(BrotliEncoderStateStruct& s);
    internal static bool BrotliEncoderSetParameter(BrotliEncoderStateStruct& state, BrotliEncoderParameter p, UInt32 value);
    private static void EncodeWindowBits(int lgwin, Byte& last_byte, Byte& last_byte_bits);
    private static void InitCommandPrefixCodes(Byte* cmd_depths, UInt16* cmd_bits, Byte* cmd_code, SizeT* cmd_code_numbits);
    private static bool EnsureInitialized(BrotliEncoderStateStruct& s);
    private static void CopyInputToRingBuffer(BrotliEncoderStateStruct& s, SizeT input_size, Byte* input_buffer);
    private static SizeT InputBlockSize(BrotliEncoderStateStruct& s);
    private static ulong UnprocessedInputSize(BrotliEncoderStateStruct& s);
    private static void UpdateSizeHint(BrotliEncoderStateStruct& s, SizeT available_in);
    private static void InjectBytePaddingBlock(BrotliEncoderStateStruct& s);
    private static bool InjectFlushOrPushOutput(BrotliEncoderStateStruct& s, SizeT* available_out, Byte** next_out, SizeT* total_out);
    private static UInt32 WrapPosition(ulong position);
    private static Byte* GetBrotliStorage(BrotliEncoderStateStruct& s, SizeT size);
    private static SizeT HashTableSize(SizeT max_table_size, SizeT input_size);
    private static Int32* GetHashTable(BrotliEncoderStateStruct& s, int quality, SizeT input_size, SizeT* table_size);
    private static bool UpdateLastProcessedPos(BrotliEncoderStateStruct& s);
    private static bool ShouldCompress(Byte* data, SizeT mask, ulong last_flush_pos, SizeT bytes, SizeT num_literals, SizeT num_commands);
    private static bool ShouldUseComplexStaticContextMap(Byte* input, SizeT start_pos, SizeT length, SizeT mask, int quality, SizeT size_hint, ContextType* literal_context_mode, SizeT* num_literal_contexts, UInt32** literal_context_map);
    private static void RecomputeDistancePrefixes(Command* cmds, SizeT num_commands, UInt32 num_direct_distance_codes, UInt32 distance_postfix_bits);
    private static void ChooseContextMap(int quality, UInt32* bigram_histo, SizeT* num_literal_contexts, UInt32** literal_context_map);
    private static void DecideOverLiteralContextModeling(Byte* input, SizeT start_pos, SizeT length, SizeT mask, int quality, SizeT size_hint, ContextType* literal_context_mode, SizeT* num_literal_contexts, UInt32** literal_context_map);
    private static void WriteMetaBlockInternal(MemoryManager& m, Byte* data, SizeT mask, ulong last_flush_pos, SizeT bytes, bool is_last, BrotliEncoderParams* params_, byte prev_byte, byte prev_byte2, SizeT num_literals, SizeT num_commands, Command* commands, Int32* saved_dist_cache, Int32* dist_cache, SizeT* storage_ix, Byte* storage);
    private static bool EncodeData(BrotliEncoderStateStruct& s, bool is_last, bool force_flush, SizeT* out_size, Byte** output);
    private static SizeT WriteMetadataHeader(BrotliEncoderStateStruct& s, SizeT block_size, Byte* header);
    private static bool ProcessMetadata(BrotliEncoderStateStruct& s, SizeT* available_in, Byte** next_in, SizeT* available_out, Byte** next_out, SizeT* total_out);
    private static SizeT RemainingInputBlockSize(BrotliEncoderStateStruct& s);
    private static void CheckFlushComplete(BrotliEncoderStateStruct& s);
    private static bool BrotliEncoderCompressStreamFast(BrotliEncoderStateStruct& s, BrotliEncoderOperation op, SizeT* available_in, Byte** next_in, SizeT* available_out, Byte** next_out, SizeT* total_out);
    internal static bool BrotliEncoderCompressStream(BrotliEncoderStateStruct& s, BrotliEncoderOperation op, SizeT* available_in, Byte** next_in, SizeT* available_out, Byte** next_out, SizeT* total_out);
    internal static bool BrotliEncoderIsFinished(BrotliEncoderStateStruct& s);
    private static bool BrotliEncoderHasMoreOutput(BrotliEncoderStateStruct& s);
    internal static void BrotliEncoderSetCustomDictionary(BrotliEncoderStateStruct& s, SizeT size, Byte* dict);
    private static void InitHuffmanTree(HuffmanTree* self, UInt32 count, short left, short right);
    private static ushort BrotliReverseBits(SizeT num_bits, ushort bits);
    private static void BrotliConvertBitDepthsToSymbols(Byte* depth, SizeT len, UInt16* bits);
    private static bool BrotliSetDepth(int p0, HuffmanTree* pool, Byte* depth, int max_depth);
    private static void DecideOverRleUse(Byte* depth, SizeT length, Boolean* use_rle_for_non_zero, Boolean* use_rle_for_zero);
    private static void BrotliWriteHuffmanTreeRepetitionsZeros(SizeT repetitions, SizeT* tree_size, Byte* tree, Byte* extra_bits_data);
    private static void BrotliWriteHuffmanTree(Byte* depth, SizeT length, SizeT* tree_size, Byte* tree, Byte* extra_bits_data);
    private static void BrotliCreateHuffmanTree(UInt32* data, SizeT length, int tree_limit, HuffmanTree* tree, Byte* depth);
    private static void Reverse(Byte* v, SizeT start, SizeT end);
    private static void BrotliWriteHuffmanTreeRepetitions(byte previous_value, byte value, SizeT repetitions, SizeT* tree_size, Byte* tree, Byte* extra_bits_data);
    private static void BrotliOptimizeHuffmanCountsForRle(SizeT length, UInt32* counts, Byte* good_for_rle);
    private static bool SortHuffmanTreeEntropyEncode(HuffmanTree* v0, HuffmanTree* v1);
    private static void SortHuffmanTreeItems(HuffmanTree* items, SizeT n, HuffmanTreeComparator comparator);
    private static void StoreStaticCodeLengthCode(SizeT* storage_ix, Byte* storage);
    private static void StoreStaticCommandHuffmanTree(SizeT* storage_ix, Byte* storage);
    private static void StoreStaticDistanceHuffmanTree(SizeT* storage_ix, Byte* storage);
    private static double FastLog2(SizeT v);
    private static UInt32 Log2FloorNonZero(SizeT n);
    private static SizeT FindMatchLengthWithLimit(Byte* s1, Byte* s2, SizeT limit);
    private static void DestroyHasher(MemoryManager& m, HasherHandle* handle);
    private static SizeT BackwardReferenceScoreUsingLastDistance(SizeT copy_length);
    private static void PrepareDistanceCache(Int32* distance_cache, int num_distances);
    private static SizeT BackwardReferenceScore(SizeT copy_length, SizeT backward_reference_offset);
    private static UInt32 Hash14(Byte* data);
    private static bool TestStaticDictionaryItem(SizeT item, Byte* data, SizeT max_length, SizeT max_backward, HasherSearchResult* out_);
    private static bool SearchInStaticDictionary(UInt16* dictionary_hash, HasherHandle handle, Byte* data, SizeT max_length, SizeT max_backward, HasherSearchResult* out_, bool shallow);
    private static SizeT BackwardReferencePenaltyUsingLastDistance(SizeT distance_short_code);
    private static SizeT BackwardMatchLength(BackwardMatch* self);
    private static SizeT BackwardMatchLengthCode(BackwardMatch* self);
    private static void InitBackwardMatch(BackwardMatch* self, SizeT dist, SizeT len);
    private static void InitDictionaryBackwardMatch(BackwardMatch* self, SizeT dist, SizeT len, SizeT len_code);
    private static HasherCommon* GetHasherCommon(HasherHandle handle);
    private static void HasherReset(HasherHandle handle);
    private static SizeT HasherSize(BrotliEncoderParams* params_, bool one_shot, SizeT input_size);
    private static void HasherSetup(MemoryManager& m, HasherHandle* handle, BrotliEncoderParams* params_, Byte* data, SizeT position, SizeT input_size, bool is_last);
    private static void HasherPrependCustomDictionary(MemoryManager& m, HasherHandle* handle, BrotliEncoderParams* params_, SizeT size, Byte* dict);
    private static void InitOrStitchToPreviousBlock(MemoryManager& m, HasherHandle* handle, Byte* data, SizeT mask, BrotliEncoderParams* params_, SizeT position, SizeT input_size, bool is_last);
    private static void BrotliEnsureCapacity(MemoryManager& m, int t, Void** a, SizeT* c, SizeT r);
    private static void InitBlockSplitIterator(BlockSplitIterator* self, BlockSplit* split);
    private static void BlockSplitIteratorNext(BlockSplitIterator* self);
    private static void BrotliBuildHistogramsWithContext(Command* cmds, SizeT num_commands, BlockSplit* literal_split, BlockSplit* insert_and_copy_split, BlockSplit* dist_split, Byte* ringbuffer, SizeT start_pos, SizeT mask, byte prev_byte, byte prev_byte2, ContextType* context_modes, HistogramLiteral* literal_histograms, HistogramCommand* insert_and_copy_histograms, HistogramDistance* copy_dist_histograms);
    private static SizeT UTF8Position(SizeT last, SizeT c, SizeT clamp);
    private static SizeT DecideMultiByteStatsLevel(SizeT pos, SizeT len, SizeT mask, Byte* data);
    private static void EstimateBitCostsForLiteralsUTF8(SizeT pos, SizeT len, SizeT mask, Byte* data, Single* cost);
    private static void BrotliEstimateBitCostsForLiterals(SizeT pos, SizeT len, SizeT mask, Byte* data, Single* cost);
    private static void BrotliInitMemoryManager(MemoryManager& m, brotli_alloc_func alloc_func, brotli_free_func free_func, Void* opaque);
    private static Void* BrotliAllocate(MemoryManager& m, SizeT n);
    private static void BrotliFree(MemoryManager& m, Void* p);
    private static void BrotliBuildMetaBlock(MemoryManager& m, Byte* ringbuffer, SizeT pos, SizeT mask, BrotliEncoderParams* params_, byte prev_byte, byte prev_byte2, Command* cmds, SizeT num_commands, ContextType literal_context_mode, MetaBlockSplit* mb);
    private static void InitMetaBlockSplit(MetaBlockSplit* mb);
    private static void InitContextBlockSplitter(MemoryManager& m, ContextBlockSplitter* self, SizeT alphabet_size, SizeT num_contexts, SizeT min_block_size, double split_threshold, SizeT num_symbols, BlockSplit* split, HistogramLiteral** histograms, SizeT* histograms_size);
    private static void ContextBlockSplitterFinishBlock(ContextBlockSplitter* self, MemoryManager& m, bool is_final);
    private static void ContextBlockSplitterAddSymbol(ContextBlockSplitter* self, MemoryManager& m, SizeT symbol, SizeT context);
    private static void MapStaticContexts(MemoryManager& m, SizeT num_contexts, UInt32* static_context_map, MetaBlockSplit* mb);
    private static void BrotliBuildMetaBlockGreedyInternal(MemoryManager& m, Byte* ringbuffer, SizeT pos, SizeT mask, byte prev_byte, byte prev_byte2, ContextType literal_context_mode, SizeT num_contexts, UInt32* static_context_map, Command* commands, SizeT n_commands, MetaBlockSplit* mb);
    private static void BrotliBuildMetaBlockGreedy(MemoryManager& m, Byte* ringbuffer, SizeT pos, SizeT mask, byte prev_byte, byte prev_byte2, ContextType literal_context_mode, SizeT num_contexts, UInt32* static_context_map, Command* commands, SizeT n_commands, MetaBlockSplit* mb);
    private static void DestroyMetaBlockSplit(MemoryManager& m, MetaBlockSplit* mb);
    private static void BrotliOptimizeHistograms(SizeT num_direct_distance_codes, SizeT distance_postfix_bits, MetaBlockSplit* mb);
    private static void PrefixEncodeCopyDistance(SizeT distance_code, SizeT num_direct_codes, SizeT postfix_bits, UInt16* code, UInt32* extra_bits);
    private static SizeT MaxHashTableSize(int quality);
    private static SizeT MaxZopfliLen(BrotliEncoderParams* params_);
    private static SizeT MaxMetablockSize(BrotliEncoderParams* params_);
    private static SizeT LiteralSpreeLengthForSparseSearch(BrotliEncoderParams* params_);
    private static SizeT MaxZopfliCandidates(BrotliEncoderParams* params_);
    private static void SanitizeParams(BrotliEncoderParams* params_);
    private static int ComputeLgBlock(BrotliEncoderParams* params_);
    private static int ComputeRbBits(BrotliEncoderParams* params_);
    private static void ChooseHasher(BrotliEncoderParams* params_, BrotliHasherParams* hparams);
    private static void RingBufferInit(RingBuffer& rb);
    private static void RingBufferSetup(BrotliEncoderParams* params_, RingBuffer* rb);
    private static void RingBufferFree(MemoryManager& m, RingBuffer* rb);
    private static void RingBufferInitBuffer(MemoryManager& m, UInt32 buflen, RingBuffer* rb);
    private static void RingBufferWriteTail(Byte* bytes, SizeT n, RingBuffer* rb);
    private static void RingBufferWrite(MemoryManager& m, Byte* bytes, SizeT n, RingBuffer* rb);
    private static UInt32 Hash(Byte* data);
    private static void AddMatch(SizeT distance, SizeT len, SizeT len_code, UInt32* matches);
    private static SizeT DictMatchLength(Byte* data, SizeT id, SizeT len, SizeT maxlen);
    private static bool IsMatch(DictWord w, Byte* data, SizeT max_length);
    private static bool BrotliFindAllStaticDictionaryMatches(Byte* data, SizeT min_length, SizeT max_length, UInt32* matches);
    private static SizeT BrotliParseAsUTF8(Int32* symbol, Byte* input, SizeT size);
    private static bool BrotliIsMostlyUTF8(Byte* data, SizeT pos, SizeT mask, SizeT length, double min_fraction);
    private static void BrotliWriteBits(SizeT n_bits, ulong bits, SizeT* pos, Byte* array);
    private static void BrotliWriteBitsPrepareStorage(SizeT pos, Byte* array);
    private static void memmove(Void* destination, Void* source, SizeT length);
    private static void memcpy(Void* destination, Void* source, SizeT length);
    private static void memmove16(Byte* dst, Byte* src);
    private static Void* memset(Void* ptr, int value, SizeT num);
}
public class BrotliSharpLib.BrotliStream : Stream {
    private Stream _stream;
    private CompressionMode _mode;
    private bool _leaveOpen;
    private bool _disposed;
    private IntPtr _customDictionary;
    private Byte[] _buffer;
    private int _bufferCount;
    private int _bufferOffset;
    private BrotliEncoderStateStruct _encoderState;
    private BrotliDecoderStateStruct _decoderState;
    private BrotliDecoderResult _lastDecoderState;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public BrotliStream(Stream stream, CompressionMode mode, bool leaveOpen);
    public BrotliStream(Stream stream, CompressionMode mode);
    protected virtual override void Finalize();
    public void SetQuality(int quality);
    public void SetCustomDictionary(Byte[] dictionary);
    public void SetWindow(int windowSize);
    protected virtual void Dispose(bool disposing);
    public virtual void Flush();
    private void FlushCompress(bool finish);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    private void ValidateParameters(Byte[] array, int offset, int count);
    public virtual int Read(Byte[] buffer, int offset, int count);
    private void WriteCore(Byte[] buffer, int offset, int count, BrotliEncoderOperation operation);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    private void EnsureNotDisposed();
}
