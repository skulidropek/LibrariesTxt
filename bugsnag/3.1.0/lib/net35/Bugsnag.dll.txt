public class Bugsnag.Breadcrumbs : object {
    private object _lock;
    private int _maximumBreadcrumbs;
    private LinkedList`1<Breadcrumb> _breadcrumbs;
    public Breadcrumbs(IConfiguration configuration);
    public sealed virtual void Leave(string message);
    public sealed virtual void Leave(string message, BreadcrumbType type, IDictionary`2<string, string> metadata);
    public sealed virtual void Leave(Breadcrumb breadcrumb);
    public sealed virtual IEnumerable`1<Breadcrumb> Retrieve();
}
public enum Bugsnag.BreadcrumbType : Enum {
    public int value__;
    public static BreadcrumbType Navigation;
    public static BreadcrumbType Request;
    public static BreadcrumbType Process;
    public static BreadcrumbType Log;
    public static BreadcrumbType User;
    public static BreadcrumbType State;
    public static BreadcrumbType Error;
    public static BreadcrumbType Manual;
}
public class Bugsnag.Client : object {
    private IConfiguration _configuration;
    private IDelivery _delivery;
    private IBreadcrumbs _breadcrumbs;
    private ISessionTracker _sessionTracking;
    private List`1<Middleware> _middleware;
    private object _middlewareLock;
    protected static Middleware[] DefaultInternalMiddleware;
    public IConfiguration Configuration { get; }
    public IBreadcrumbs Breadcrumbs { get; }
    public ISessionTracker SessionTracking { get; }
    protected Middleware[] InternalMiddleware { get; }
    public Client(string apiKey);
    public Client(IConfiguration configuration);
    public Client(IConfiguration configuration, IDelivery delivery, IBreadcrumbs breadcrumbs, ISessionTracker sessionTracking);
    private static Client();
    public sealed virtual IConfiguration get_Configuration();
    public sealed virtual IBreadcrumbs get_Breadcrumbs();
    public sealed virtual ISessionTracker get_SessionTracking();
    public sealed virtual void BeforeNotify(Middleware middleware);
    protected Middleware[] get_InternalMiddleware();
    public sealed virtual void Notify(Exception exception);
    public sealed virtual void Notify(Exception exception, Middleware callback);
    public sealed virtual void Notify(Exception exception, Severity severity);
    public sealed virtual void Notify(Exception exception, Severity severity, Middleware callback);
    public sealed virtual void Notify(Exception exception, HandledState handledState);
    public sealed virtual void Notify(Exception exception, HandledState handledState, Middleware callback);
    public sealed virtual void Notify(Report report, Middleware callback);
}
public class Bugsnag.Configuration : object {
    public static string DefaultEndpoint;
    public static string DefaultSessionEndpoint;
    [CompilerGeneratedAttribute]
private string <ApiKey>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <Endpoint>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AutoNotify>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReleaseStage>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <NotifyReleaseStages>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AppVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AppType>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <ProjectRoots>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <ProjectNamespaces>k__BackingField;
    [CompilerGeneratedAttribute]
private Type[] <IgnoreClasses>k__BackingField;
    [CompilerGeneratedAttribute]
private KeyValuePair`2[] <GlobalMetadata>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <MetadataFilters>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AutoCaptureSessions>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <SessionEndpoint>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <SessionTrackingInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private IWebProxy <Proxy>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaximumBreadcrumbs>k__BackingField;
    public string ApiKey { get; public set; }
    public Uri Endpoint { get; public set; }
    public bool AutoNotify { get; public set; }
    public string ReleaseStage { get; public set; }
    public String[] NotifyReleaseStages { get; public set; }
    public string AppVersion { get; public set; }
    public string AppType { get; public set; }
    public String[] ProjectRoots { get; public set; }
    public String[] ProjectNamespaces { get; public set; }
    public Type[] IgnoreClasses { get; public set; }
    public KeyValuePair`2[] GlobalMetadata { get; public set; }
    public String[] MetadataFilters { get; public set; }
    public bool AutoCaptureSessions { get; public set; }
    public Uri SessionEndpoint { get; public set; }
    public TimeSpan SessionTrackingInterval { get; public set; }
    public IWebProxy Proxy { get; public set; }
    public int MaximumBreadcrumbs { get; public set; }
    public Configuration(string apiKey);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ApiKey();
    [CompilerGeneratedAttribute]
public void set_ApiKey(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Uri get_Endpoint();
    [CompilerGeneratedAttribute]
public void set_Endpoint(Uri value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_AutoNotify();
    [CompilerGeneratedAttribute]
public void set_AutoNotify(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ReleaseStage();
    [CompilerGeneratedAttribute]
public void set_ReleaseStage(string value);
    [CompilerGeneratedAttribute]
public sealed virtual String[] get_NotifyReleaseStages();
    [CompilerGeneratedAttribute]
public void set_NotifyReleaseStages(String[] value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_AppVersion();
    [CompilerGeneratedAttribute]
public void set_AppVersion(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_AppType();
    [CompilerGeneratedAttribute]
public void set_AppType(string value);
    [CompilerGeneratedAttribute]
public sealed virtual String[] get_ProjectRoots();
    [CompilerGeneratedAttribute]
public void set_ProjectRoots(String[] value);
    [CompilerGeneratedAttribute]
public sealed virtual String[] get_ProjectNamespaces();
    [CompilerGeneratedAttribute]
public void set_ProjectNamespaces(String[] value);
    [CompilerGeneratedAttribute]
public sealed virtual Type[] get_IgnoreClasses();
    [CompilerGeneratedAttribute]
public void set_IgnoreClasses(Type[] value);
    [CompilerGeneratedAttribute]
public sealed virtual KeyValuePair`2[] get_GlobalMetadata();
    [CompilerGeneratedAttribute]
public void set_GlobalMetadata(KeyValuePair`2[] value);
    [CompilerGeneratedAttribute]
public sealed virtual String[] get_MetadataFilters();
    [CompilerGeneratedAttribute]
public void set_MetadataFilters(String[] value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_AutoCaptureSessions();
    [CompilerGeneratedAttribute]
public void set_AutoCaptureSessions(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual Uri get_SessionEndpoint();
    [CompilerGeneratedAttribute]
public void set_SessionEndpoint(Uri value);
    [CompilerGeneratedAttribute]
public sealed virtual TimeSpan get_SessionTrackingInterval();
    [CompilerGeneratedAttribute]
public void set_SessionTrackingInterval(TimeSpan value);
    [CompilerGeneratedAttribute]
public sealed virtual IWebProxy get_Proxy();
    [CompilerGeneratedAttribute]
public void set_Proxy(IWebProxy value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_MaximumBreadcrumbs();
    [CompilerGeneratedAttribute]
public void set_MaximumBreadcrumbs(int value);
}
public class Bugsnag.Countdown : object {
    private object _lock;
    private int _counter;
    private ManualResetEvent _resetEvent;
    public Countdown(int initialCount);
    internal void AddCount();
    internal void Signal();
    internal void Wait(TimeSpan timeout);
}
public interface Bugsnag.IBreadcrumbs {
    public abstract virtual void Leave(string message);
    public abstract virtual void Leave(string message, BreadcrumbType type, IDictionary`2<string, string> metadata);
    public abstract virtual void Leave(Breadcrumb breadcrumb);
    public abstract virtual IEnumerable`1<Breadcrumb> Retrieve();
}
public interface Bugsnag.IClient {
    public IBreadcrumbs Breadcrumbs { get; }
    public ISessionTracker SessionTracking { get; }
    public IConfiguration Configuration { get; }
    public abstract virtual void Notify(Exception exception);
    public abstract virtual void Notify(Exception exception, Middleware callback);
    public abstract virtual void Notify(Exception exception, Severity severity);
    public abstract virtual void Notify(Exception exception, Severity severity, Middleware callback);
    public abstract virtual void Notify(Exception exception, HandledState handledState);
    public abstract virtual void Notify(Exception exception, HandledState handledState, Middleware callback);
    public abstract virtual void Notify(Report report, Middleware callback);
    public abstract virtual IBreadcrumbs get_Breadcrumbs();
    public abstract virtual ISessionTracker get_SessionTracking();
    public abstract virtual IConfiguration get_Configuration();
    public abstract virtual void BeforeNotify(Middleware middleware);
}
public interface Bugsnag.IConfiguration {
    public string ApiKey { get; }
    public Uri Endpoint { get; }
    public bool AutoNotify { get; }
    public string ReleaseStage { get; }
    public String[] NotifyReleaseStages { get; }
    public string AppVersion { get; }
    public string AppType { get; }
    public String[] ProjectRoots { get; }
    public String[] ProjectNamespaces { get; }
    public Type[] IgnoreClasses { get; }
    public KeyValuePair`2[] GlobalMetadata { get; }
    public String[] MetadataFilters { get; }
    public bool AutoCaptureSessions { get; }
    public Uri SessionEndpoint { get; }
    public TimeSpan SessionTrackingInterval { get; }
    public IWebProxy Proxy { get; }
    public int MaximumBreadcrumbs { get; }
    public abstract virtual string get_ApiKey();
    public abstract virtual Uri get_Endpoint();
    public abstract virtual bool get_AutoNotify();
    public abstract virtual string get_ReleaseStage();
    public abstract virtual String[] get_NotifyReleaseStages();
    public abstract virtual string get_AppVersion();
    public abstract virtual string get_AppType();
    public abstract virtual String[] get_ProjectRoots();
    public abstract virtual String[] get_ProjectNamespaces();
    public abstract virtual Type[] get_IgnoreClasses();
    public abstract virtual KeyValuePair`2[] get_GlobalMetadata();
    public abstract virtual String[] get_MetadataFilters();
    public abstract virtual bool get_AutoCaptureSessions();
    public abstract virtual Uri get_SessionEndpoint();
    public abstract virtual TimeSpan get_SessionTrackingInterval();
    public abstract virtual IWebProxy get_Proxy();
    public abstract virtual int get_MaximumBreadcrumbs();
}
public interface Bugsnag.IDelivery {
    public abstract virtual void Send(IPayload payload);
}
public interface Bugsnag.IFilterable {
}
public static class Bugsnag.InternalMiddleware : object {
    public static Middleware ReleaseStageFilter;
    public static Middleware RemoveProjectRoots;
    public static Middleware DetectInProjectNamespaces;
    public static Middleware CheckIgnoreClasses;
    public static Middleware AttachGlobalMetadata;
    public static Middleware ApplyMetadataFilters;
    public static Middleware DetermineDefaultContext;
    private static InternalMiddleware();
}
public interface Bugsnag.IPayload {
    public Uri Endpoint { get; }
    public IWebProxy Proxy { get; }
    public KeyValuePair`2[] Headers { get; }
    public abstract virtual Uri get_Endpoint();
    public abstract virtual IWebProxy get_Proxy();
    public abstract virtual KeyValuePair`2[] get_Headers();
    public abstract virtual Byte[] Serialize();
}
public interface Bugsnag.ISessionTracker {
    public Session CurrentSession { get; }
    public abstract virtual void CreateSession();
    public abstract virtual Session get_CurrentSession();
}
public class Bugsnag.Middleware : MulticastDelegate {
    public Middleware(object object, IntPtr method);
    public virtual void Invoke(Report report);
    public virtual IAsyncResult BeginInvoke(Report report, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Bugsnag.Payload.App : Dictionary`2<string, object> {
    public App(IConfiguration configuration);
    public App(string version, string releaseStage, string type);
}
public class Bugsnag.Payload.BatchedSessions : Dictionary`2<string, object> {
    private KeyValuePair`2[] _headers;
    private IConfiguration _configuration;
    [CompilerGeneratedAttribute]
private Uri <Endpoint>k__BackingField;
    [CompilerGeneratedAttribute]
private IWebProxy <Proxy>k__BackingField;
    public Uri Endpoint { get; public set; }
    public IWebProxy Proxy { get; public set; }
    public KeyValuePair`2[] Headers { get; }
    public BatchedSessions(IConfiguration configuration, IEnumerable`1<KeyValuePair`2<string, long>> sessionData);
    public BatchedSessions(IConfiguration configuration, NotifierInfo notifier, App app, Device device, IEnumerable`1<KeyValuePair`2<string, long>> sessionData);
    [CompilerGeneratedAttribute]
public sealed virtual Uri get_Endpoint();
    [CompilerGeneratedAttribute]
public void set_Endpoint(Uri value);
    [CompilerGeneratedAttribute]
public sealed virtual IWebProxy get_Proxy();
    [CompilerGeneratedAttribute]
public void set_Proxy(IWebProxy value);
    public sealed virtual KeyValuePair`2[] get_Headers();
    public sealed virtual Byte[] Serialize();
}
public class Bugsnag.Payload.Breadcrumb : Dictionary`2<string, object> {
    private static string UndefinedName;
    public string Name { get; }
    public IDictionary`2<string, string> Metadata { get; }
    public Breadcrumb(string name, BreadcrumbType type);
    public Breadcrumb(string name, BreadcrumbType type, IDictionary`2<string, string> metadata);
    public static Breadcrumb FromReport(Report report);
    public string get_Name();
    public IDictionary`2<string, string> get_Metadata();
}
public class Bugsnag.Payload.Device : Dictionary`2<string, object> {
    private static string Hostname { get; }
    private static string OsName { get; }
    public Device(string hostname);
    private static string get_Hostname();
    private static string get_OsName();
}
public class Bugsnag.Payload.Event : Dictionary`2<string, object> {
    private HandledState _handledState;
    public bool IsHandled { get; }
    public Exception[] Exceptions { get; public set; }
    public string Context { get; public set; }
    public string GroupingHash { get; public set; }
    public App App { get; }
    public Device Device { get; }
    public Metadata Metadata { get; }
    public User User { get; public set; }
    public Request Request { get; public set; }
    public IEnumerable`1<Breadcrumb> Breadcrumbs { get; }
    public Severity Severity { get; public set; }
    unknown HandledState HandledState {private set; }
    public Event(string payloadVersion, App app, Device device, Exception exception, HandledState handledState, IEnumerable`1<Breadcrumb> breadcrumbs, Session session);
    public bool get_IsHandled();
    public Exception[] get_Exceptions();
    public void set_Exceptions(Exception[] value);
    public string get_Context();
    public void set_Context(string value);
    public string get_GroupingHash();
    public void set_GroupingHash(string value);
    public App get_App();
    public Device get_Device();
    public Metadata get_Metadata();
    public User get_User();
    public void set_User(User value);
    public Request get_Request();
    public void set_Request(Request value);
    public IEnumerable`1<Breadcrumb> get_Breadcrumbs();
    public void set_Severity(Severity value);
    public Severity get_Severity();
    private void set_HandledState(HandledState value);
    public bool TrimExtraData();
}
public class Bugsnag.Payload.Exception : Dictionary`2<string, object> {
    private Exception _originalException;
    public IEnumerable`1<StackTraceLine> StackTrace { get; }
    public string ErrorClass { get; }
    public string ErrorMessage { get; }
    public Exception OriginalException { get; }
    public Exception(Exception exception);
    public IEnumerable`1<StackTraceLine> get_StackTrace();
    public string get_ErrorClass();
    public string get_ErrorMessage();
    public Exception get_OriginalException();
}
public class Bugsnag.Payload.Exceptions : object {
    private Exception _originalException;
    private int _sourceCodeLineCount;
    private IEnumerable`1<Exception> _exceptions;
    public Exceptions(Exception exception, int sourceCodeLineCount);
    public sealed virtual IEnumerator`1<Exception> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private static IEnumerable`1<Exception> FlattenAndReverseExceptionTree(Exception ex);
}
public class Bugsnag.Payload.HandledState : Dictionary`2<string, object> {
    private Severity _severity;
    public Severity Severity { get; }
    public bool Handled { get; public set; }
    private HandledState(bool handled, Severity severity, SeverityReason reason);
    public static HandledState ForUnhandledException();
    public static HandledState ForHandledException();
    public static HandledState ForUserSpecifiedSeverity(Severity severity);
    public static HandledState ForCallbackSpecifiedSeverity(Severity severity, HandledState previousSeverity);
    public Severity get_Severity();
    public bool get_Handled();
    public void set_Handled(bool value);
}
internal static class Bugsnag.Payload.Headers : object {
    public static string ApiKeyHeader;
    public static string PayloadVersionHeader;
}
public class Bugsnag.Payload.Metadata : Dictionary`2<string, object> {
}
public class Bugsnag.Payload.Method : object {
    private MethodBase _methodBase;
    public Method(MethodBase methodBase);
    public string DisplayName();
}
public class Bugsnag.Payload.MethodParameter : object {
    private ParameterInfo _originalParameterInfo;
    public MethodParameter(ParameterInfo parameterInfo);
    public string DisplayName();
}
public class Bugsnag.Payload.NotifierInfo : Dictionary`2<string, string> {
    private static NotifierInfo NotifierInfoInstance;
    public static NotifierInfo Instance { get; }
    private static NotifierInfo();
    public static NotifierInfo get_Instance();
}
[ExtensionAttribute]
public static class Bugsnag.Payload.PayloadExtensions : object {
    [ExtensionAttribute]
public static void AddToPayload(Dictionary`2<string, T> dictionary, string key, T value);
    [ExtensionAttribute]
public static U Get(Dictionary`2<T, U> dictionary, T key);
    [ExtensionAttribute]
public static void FilterPayload(IDictionary dictionary, String[] filters);
    [ExtensionAttribute]
public static void FilterPayload(IDictionary dictionary, String[] filters, IDictionary seen);
    [ExtensionAttribute]
public static void FilterPayload(IEnumerable enumerable, String[] filters, IDictionary seen);
    [ExtensionAttribute]
public static void FilterUri(Uri uri, String[] filters);
}
public class Bugsnag.Payload.Report : Dictionary`2<string, object> {
    private static string _payloadVersion;
    private static int MaximumSize;
    private KeyValuePair`2[] _headers;
    private Exception _originalException;
    private HandledState _originalSeverity;
    private IConfiguration _configuration;
    private Event _event;
    private bool _ignored;
    [CompilerGeneratedAttribute]
private Uri <Endpoint>k__BackingField;
    [CompilerGeneratedAttribute]
private IWebProxy <Proxy>k__BackingField;
    public bool Ignored { get; }
    public Event Event { get; }
    public Exception OriginalException { get; }
    public HandledState OriginalSeverity { get; }
    public IConfiguration Configuration { get; }
    public Uri Endpoint { get; public set; }
    public IWebProxy Proxy { get; public set; }
    public KeyValuePair`2[] Headers { get; }
    public Report(IConfiguration configuration, Exception exception, HandledState severity, IEnumerable`1<Breadcrumb> breadcrumbs, Session session);
    private static Report();
    public void Ignore();
    public bool get_Ignored();
    public Event get_Event();
    public Exception get_OriginalException();
    public HandledState get_OriginalSeverity();
    public IConfiguration get_Configuration();
    [CompilerGeneratedAttribute]
public sealed virtual Uri get_Endpoint();
    [CompilerGeneratedAttribute]
public void set_Endpoint(Uri value);
    [CompilerGeneratedAttribute]
public sealed virtual IWebProxy get_Proxy();
    [CompilerGeneratedAttribute]
public void set_Proxy(IWebProxy value);
    public sealed virtual KeyValuePair`2[] get_Headers();
    public sealed virtual Byte[] Serialize();
}
public class Bugsnag.Payload.ReportContext : Dictionary`2<string, object> {
    public Exception OriginalException { get; }
    public HandledState OriginalSeverity { get; }
    public ReportContext(Exception exception, HandledState severity);
    public Exception get_OriginalException();
    public HandledState get_OriginalSeverity();
}
public class Bugsnag.Payload.Request : Dictionary`2<string, object> {
    public string ClientIp { get; public set; }
    public IDictionary`2<string, string> Headers { get; public set; }
    public string HttpMethod { get; public set; }
    public string Url { get; public set; }
    public string Referer { get; public set; }
    public string get_ClientIp();
    public void set_ClientIp(string value);
    public IDictionary`2<string, string> get_Headers();
    public void set_Headers(IDictionary`2<string, string> value);
    public string get_HttpMethod();
    public void set_HttpMethod(string value);
    public string get_Url();
    public void set_Url(string value);
    public string get_Referer();
    public void set_Referer(string value);
}
public class Bugsnag.Payload.Session : Dictionary`2<string, object> {
    public string SessionKey { get; }
    public Session(DateTime startedAt, int handled, int unhandled);
    public string get_SessionKey();
    public void AddException(Report report);
}
public class Bugsnag.Payload.SessionCount : Dictionary`2<string, object> {
    public SessionCount(string startedAt, long sessionStarted);
}
public class Bugsnag.Payload.SessionEvents : Dictionary`2<string, int> {
    private object _handledLock;
    private object _unhandledLock;
    public SessionEvents(int handled, int unhandled);
    public void IncrementHandledCount();
    public void IncrementUnhandledCount();
}
public class Bugsnag.Payload.StackTrace : object {
    private Exception _originalException;
    public StackTrace(Exception exception);
    public sealed virtual IEnumerator`1<StackTraceLine> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class Bugsnag.Payload.StackTraceLine : Dictionary`2<string, object> {
    public string FileName { get; public set; }
    public string MethodName { get; public set; }
    public bool InProject { get; public set; }
    public StackTraceLine(string file, int lineNumber, string methodName, bool inProject);
    public static StackTraceLine FromStackFrame(StackFrame stackFrame);
    public string get_FileName();
    public void set_FileName(string value);
    public string get_MethodName();
    public void set_MethodName(string value);
    public bool get_InProject();
    public void set_InProject(bool value);
}
public class Bugsnag.Payload.User : Dictionary`2<string, string> {
    public string Id { get; public set; }
    public string Name { get; public set; }
    public string Email { get; public set; }
    public string get_Id();
    public void set_Id(string value);
    public string get_Name();
    public void set_Name(string value);
    public string get_Email();
    public void set_Email(string value);
}
public static class Bugsnag.Polyfills.FileExtensions : object {
    public static IEnumerable`1<string> ReadLines(string file);
}
public static class Bugsnag.Polyfills.String : object {
    public static bool IsNullOrWhiteSpace(string s);
}
[ExtensionAttribute]
public static class Bugsnag.Reflection : object {
    [ExtensionAttribute]
public static Assembly GetAssembly(Type type);
    [ExtensionAttribute]
public static bool IsGenericType(Type type);
    [ExtensionAttribute]
public static Type[] GetGenericArguments(Type type);
}
public static class Bugsnag.Serializer : object {
    public static string SerializeObject(object obj);
    public static string SerializeObject(object obj, String[] filters);
    public static Byte[] SerializeObjectToByteArray(object obj);
    public static Byte[] SerializeObjectToByteArray(object obj, String[] filters);
}
public class Bugsnag.SessionsStore : object {
    private static object _instanceLock;
    private static SessionsStore _instance;
    private Dictionary`2<IConfiguration, Dictionary`2<string, long>> _store;
    private object _lock;
    private Timer _timer;
    public static SessionsStore Instance { get; }
    private static SessionsStore();
    private void SendSessions(object state);
    internal void Stop();
    public static SessionsStore get_Instance();
    public Session CreateSession(IConfiguration configuration);
}
public class Bugsnag.SessionTracker : object {
    private IConfiguration _configuration;
    private Session _currentSession;
    public Session CurrentSession { get; }
    public SessionTracker(IConfiguration configuration);
    public sealed virtual Session get_CurrentSession();
    public sealed virtual void CreateSession();
}
public enum Bugsnag.Severity : Enum {
    public int value__;
    public static Severity Info;
    public static Severity Warning;
    public static Severity Error;
}
public class Bugsnag.ThreadQueueDelivery : object {
    private static ThreadQueueDelivery instance;
    private static object instanceLock;
    private BlockingQueue`1<IPayload> _queue;
    private Thread _worker;
    public static ThreadQueueDelivery Instance { get; }
    private static ThreadQueueDelivery();
    internal void Stop();
    public static ThreadQueueDelivery get_Instance();
    private void ProcessQueue();
    private void ReportCallback(IAsyncResult asyncResult);
    public sealed virtual void Send(IPayload payload);
}
internal class Bugsnag.TypeNameHelper : object {
    private static Dictionary`2<Type, string> _builtInTypeNames;
    private static TypeNameHelper();
    public static string GetTypeDisplayName(object item, bool fullName);
    public static string GetTypeDisplayName(Type type, bool fullName, bool includeGenericParameterNames);
    private static void ProcessType(StringBuilder builder, Type type, DisplayNameOptions options);
    private static void ProcessArrayType(StringBuilder builder, Type type, DisplayNameOptions options);
    private static void ProcessGenericType(StringBuilder builder, Type type, Type[] genericArguments, int length, DisplayNameOptions options);
}
internal class Bugsnag.UnhandledException : object {
    private static UnhandledException _instance;
    private static object _instanceLock;
    private object _currentClientLock;
    private IClient _currentClient;
    private bool _unobservedTerminates;
    public static UnhandledException Instance { get; }
    private static UnhandledException();
    public static UnhandledException get_Instance();
    public void ConfigureClient(IClient client, IConfiguration configuration);
    private bool DetermineUnobservedTerminates();
    private void CurrentDomain_ProcessExit(object sender, EventArgs e);
    private void TaskScheduler_UnobservedTaskException(object sender, UnobservedTaskExceptionEventArgs e);
    [HandleProcessCorruptedStateExceptionsAttribute]
private void CurrentDomain_UnhandledException(object sender, UnhandledExceptionEventArgs e);
    private void HandleEvent(Exception exception, bool runtimeEnding);
}
public class Bugsnag.WebRequest : object {
    public IAsyncResult BeginSend(Uri endpoint, IWebProxy proxy, KeyValuePair`2[] headers, Byte[] report, AsyncCallback callback, object state);
    public WebResponse EndSend(IAsyncResult asyncResult);
    private void ReadCallback(IAsyncResult asynchronousResult);
    private void WriteCallback(IAsyncResult asynchronousResult);
}
public class Bugsnag.WebResponse : object {
    [CompilerGeneratedAttribute]
private HttpStatusCode <HttpStatusCode>k__BackingField;
    public HttpStatusCode HttpStatusCode { get; }
    public WebResponse(HttpStatusCode httpStatusCode);
    [CompilerGeneratedAttribute]
public HttpStatusCode get_HttpStatusCode();
}
public interface Microsoft.Extensions.FileProviders.IFileInfo {
    public string PhysicalPath { get; }
    public bool Exists { get; }
    public abstract virtual string get_PhysicalPath();
    public abstract virtual bool get_Exists();
    public abstract virtual Stream CreateReadStream();
}
public interface Microsoft.Extensions.FileProviders.IFileProvider {
    public abstract virtual IFileInfo GetFileInfo(string path);
}
[GeneratedCodeAttribute("simple-json", "1.0.0")]
internal interface SimpleJson.IJsonSerializerStrategy {
    public abstract virtual bool TrySerializeNonPrimitiveObject(object input, Object& output);
    public abstract virtual object DeserializeObject(object value, Type type);
}
[GeneratedCodeAttribute("simple-json", "1.0.0")]
[EditorBrowsableAttribute("1")]
internal class SimpleJson.JsonArray : List`1<object> {
    public JsonArray(int capacity);
    public virtual string ToString();
}
[DefaultMemberAttribute("Item")]
[GeneratedCodeAttribute("simple-json", "1.0.0")]
[EditorBrowsableAttribute("1")]
internal class SimpleJson.JsonObject : object {
    private Dictionary`2<string, object> _members;
    public object Item { get; }
    public ICollection`1<string> Keys { get; }
    public ICollection`1<object> Values { get; }
    public object Item { get; public set; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public JsonObject(IEqualityComparer`1<string> comparer);
    public object get_Item(int index);
    internal static object GetAtIndex(IDictionary`2<string, object> obj, int index);
    public sealed virtual void Add(string key, object value);
    public sealed virtual bool ContainsKey(string key);
    public sealed virtual ICollection`1<string> get_Keys();
    public sealed virtual bool Remove(string key);
    public sealed virtual bool TryGetValue(string key, Object& value);
    public sealed virtual ICollection`1<object> get_Values();
    public sealed virtual object get_Item(string key);
    public sealed virtual void set_Item(string key, object value);
    public sealed virtual void Add(KeyValuePair`2<string, object> item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(KeyValuePair`2<string, object> item);
    public sealed virtual void CopyTo(KeyValuePair`2[] array, int arrayIndex);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool Remove(KeyValuePair`2<string, object> item);
    public sealed virtual IEnumerator`1<KeyValuePair`2<string, object>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public virtual string ToString();
}
[GeneratedCodeAttribute("simple-json", "1.0.0")]
internal class SimpleJson.PocoJsonSerializerStrategy : object {
    internal IDictionary`2<Type, ConstructorDelegate> ConstructorCache;
    internal IDictionary`2<Type, IDictionary`2<string, GetDelegate>> GetCache;
    internal IDictionary`2<Type, IDictionary`2<string, KeyValuePair`2<Type, SetDelegate>>> SetCache;
    internal static Type[] EmptyTypes;
    internal static Type[] ArrayConstructorParameterTypes;
    private static String[] Iso8601Format;
    private static PocoJsonSerializerStrategy();
    protected virtual string MapClrMemberNameToJsonFieldName(string clrPropertyName);
    internal virtual ConstructorDelegate ContructorDelegateFactory(Type key);
    internal virtual IDictionary`2<string, GetDelegate> GetterValueFactory(Type type);
    internal virtual IDictionary`2<string, KeyValuePair`2<Type, SetDelegate>> SetterValueFactory(Type type);
    public virtual bool TrySerializeNonPrimitiveObject(object input, Object& output);
    public virtual object DeserializeObject(object value, Type type);
    protected virtual object SerializeEnum(Enum p);
    protected virtual bool TrySerializeKnownTypes(object input, Object& output);
    protected virtual bool TrySerializeUnknownTypes(object input, Object& output);
}
[GeneratedCodeAttribute("reflection-utils", "1.0.0")]
internal class SimpleJson.Reflection.ReflectionUtils : object {
    private static Object[] EmptyObjects;
    private static ReflectionUtils();
    public static Type GetTypeInfo(Type type);
    public static Attribute GetAttribute(MemberInfo info, Type type);
    public static Type GetGenericListElementType(Type type);
    public static Attribute GetAttribute(Type objectType, Type attributeType);
    public static Type[] GetGenericTypeArguments(Type type);
    public static bool IsTypeGeneric(Type type);
    public static bool IsTypeGenericeCollectionInterface(Type type);
    public static bool IsAssignableFrom(Type type1, Type type2);
    public static bool IsTypeDictionary(Type type);
    public static bool IsNullableType(Type type);
    public static object ToNullableType(object obj, Type nullableType);
    public static bool IsValueType(Type type);
    public static IEnumerable`1<ConstructorInfo> GetConstructors(Type type);
    public static ConstructorInfo GetConstructorInfo(Type type, Type[] argsType);
    public static IEnumerable`1<PropertyInfo> GetProperties(Type type);
    public static IEnumerable`1<FieldInfo> GetFields(Type type);
    public static MethodInfo GetGetterMethodInfo(PropertyInfo propertyInfo);
    public static MethodInfo GetSetterMethodInfo(PropertyInfo propertyInfo);
    public static ConstructorDelegate GetContructor(ConstructorInfo constructorInfo);
    public static ConstructorDelegate GetContructor(Type type, Type[] argsType);
    public static ConstructorDelegate GetConstructorByReflection(ConstructorInfo constructorInfo);
    public static ConstructorDelegate GetConstructorByReflection(Type type, Type[] argsType);
    public static ConstructorDelegate GetConstructorByExpression(ConstructorInfo constructorInfo);
    public static ConstructorDelegate GetConstructorByExpression(Type type, Type[] argsType);
    public static GetDelegate GetGetMethod(PropertyInfo propertyInfo);
    public static GetDelegate GetGetMethod(FieldInfo fieldInfo);
    public static GetDelegate GetGetMethodByReflection(PropertyInfo propertyInfo);
    public static GetDelegate GetGetMethodByReflection(FieldInfo fieldInfo);
    public static GetDelegate GetGetMethodByExpression(PropertyInfo propertyInfo);
    public static GetDelegate GetGetMethodByExpression(FieldInfo fieldInfo);
    public static SetDelegate GetSetMethod(PropertyInfo propertyInfo);
    public static SetDelegate GetSetMethod(FieldInfo fieldInfo);
    public static SetDelegate GetSetMethodByReflection(PropertyInfo propertyInfo);
    public static SetDelegate GetSetMethodByReflection(FieldInfo fieldInfo);
    public static SetDelegate GetSetMethodByExpression(PropertyInfo propertyInfo);
    public static SetDelegate GetSetMethodByExpression(FieldInfo fieldInfo);
    public static BinaryExpression Assign(Expression left, Expression right);
}
[GeneratedCodeAttribute("simple-json", "1.0.0")]
internal static class SimpleJson.SimpleJson : object {
    private static int TOKEN_NONE;
    private static int TOKEN_CURLY_OPEN;
    private static int TOKEN_CURLY_CLOSE;
    private static int TOKEN_SQUARED_OPEN;
    private static int TOKEN_SQUARED_CLOSE;
    private static int TOKEN_COLON;
    private static int TOKEN_COMMA;
    private static int TOKEN_STRING;
    private static int TOKEN_NUMBER;
    private static int TOKEN_TRUE;
    private static int TOKEN_FALSE;
    private static int TOKEN_NULL;
    private static int BUILDER_CAPACITY;
    private static Char[] EscapeTable;
    private static Char[] EscapeCharacters;
    private static string EscapeCharactersString;
    private static IJsonSerializerStrategy _currentJsonSerializerStrategy;
    private static PocoJsonSerializerStrategy _pocoJsonSerializerStrategy;
    public static IJsonSerializerStrategy CurrentJsonSerializerStrategy { get; public set; }
    [EditorBrowsableAttribute("2")]
public static PocoJsonSerializerStrategy PocoJsonSerializerStrategy { get; }
    private static SimpleJson();
    public static object DeserializeObject(string json);
    public static bool TryDeserializeObject(string json, Object& obj);
    public static object DeserializeObject(string json, Type type, IJsonSerializerStrategy jsonSerializerStrategy);
    public static object DeserializeObject(string json, Type type);
    public static T DeserializeObject(string json, IJsonSerializerStrategy jsonSerializerStrategy);
    public static T DeserializeObject(string json);
    public static string SerializeObject(object json, IJsonSerializerStrategy jsonSerializerStrategy, IDictionary seen);
    public static string SerializeObject(object json, IJsonSerializerStrategy jsonSerializerStrategy, IDictionary seen, IDictionary filters);
    public static string SerializeObject(object json);
    public static string SerializeObject(object json, IDictionary filters);
    public static string EscapeToJavascriptString(string jsonString);
    private static IDictionary`2<string, object> ParseObject(Char[] json, Int32& index, Boolean& success);
    private static JsonArray ParseArray(Char[] json, Int32& index, Boolean& success);
    private static object ParseValue(Char[] json, Int32& index, Boolean& success);
    private static string ParseString(Char[] json, Int32& index, Boolean& success);
    private static string ConvertFromUtf32(int utf32);
    private static object ParseNumber(Char[] json, Int32& index, Boolean& success);
    private static int GetLastIndexOfNumber(Char[] json, int index);
    private static void EatWhitespace(Char[] json, Int32& index);
    private static int LookAhead(Char[] json, int index);
    private static int NextToken(Char[] json, Int32& index);
    private static bool SerializeValue(IJsonSerializerStrategy jsonSerializerStrategy, object value, StringBuilder builder, IDictionary seen, IDictionary filters, bool applyFilters);
    private static bool SerializeObject(IJsonSerializerStrategy jsonSerializerStrategy, IEnumerable keys, IEnumerable values, StringBuilder builder, IDictionary seen, IDictionary filters, bool applyFilters);
    private static bool SerializeArray(IJsonSerializerStrategy jsonSerializerStrategy, IEnumerable anArray, StringBuilder builder, IDictionary seen, IDictionary filters, bool applyFilters);
    private static bool SerializeString(string aString, StringBuilder builder);
    private static void IntToHex(int value, Char[] hex);
    private static bool SerializeNumber(object number, StringBuilder builder);
    public static IJsonSerializerStrategy get_CurrentJsonSerializerStrategy();
    public static void set_CurrentJsonSerializerStrategy(IJsonSerializerStrategy value);
    public static PocoJsonSerializerStrategy get_PocoJsonSerializerStrategy();
}
[ExtensionAttribute]
public static class System.Reflection.IntrospectionExtensions : object {
    [ExtensionAttribute]
public static TypeInfo GetTypeInfo(Type type);
}
public class System.Reflection.TypeInfo : object {
    [CompilerGeneratedAttribute]
private Type[] <GenericTypeArguments>k__BackingField;
    public Type[] GenericTypeArguments { get; }
    public bool IsGenericType { get; }
    [CompilerGeneratedAttribute]
public Type[] get_GenericTypeArguments();
    public bool get_IsGenericType();
}
public class System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute : Attribute {
}
public class System.Threading.Tasks.TaskScheduler : object {
    public static void add_UnobservedTaskException(EventHandler`1<UnobservedTaskExceptionEventArgs> value);
    public static void remove_UnobservedTaskException(EventHandler`1<UnobservedTaskExceptionEventArgs> value);
}
public class System.Threading.Tasks.UnobservedTaskExceptionEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Observed>k__BackingField;
    public Exception Exception { get; public set; }
    public bool Observed { get; public set; }
    [CompilerGeneratedAttribute]
public Exception get_Exception();
    [CompilerGeneratedAttribute]
public void set_Exception(Exception value);
    [CompilerGeneratedAttribute]
public bool get_Observed();
    [CompilerGeneratedAttribute]
public void set_Observed(bool value);
}
