internal class WebCompiler.BabelCompiler : object {
    private static Regex _errorRx;
    private string _path;
    private string _output;
    private string _error;
    public BabelCompiler(string path);
    private static BabelCompiler();
    public sealed virtual CompilerResult Compile(Config config);
    private void RunCompilerProcess(Config config, FileInfo info);
    private static string ConstructArguments(Config config);
}
public class WebCompiler.BabelOptions : BaseOptions`1<BabelOptions> {
    protected string CompilerFileName { get; }
    protected virtual void LoadSettings(Config config);
    protected virtual string get_CompilerFileName();
}
public abstract class WebCompiler.BaseMinifyOptions : object {
    protected static void LoadDefaultSettings(Config config, string minifierType);
    protected static string GetValue(Config config, string key, object defaultValue);
}
public abstract class WebCompiler.BaseOptions`1 : object {
    [CompilerGeneratedAttribute]
private bool <SourceMap>k__BackingField;
    protected string CompilerFileName { get; }
    [JsonPropertyAttribute("sourceMap")]
public bool SourceMap { get; public set; }
    public static T FromConfig(Config config);
    protected abstract virtual string get_CompilerFileName();
    protected virtual void LoadSettings(Config config);
    [CompilerGeneratedAttribute]
public bool get_SourceMap();
    [CompilerGeneratedAttribute]
public void set_SourceMap(bool value);
    protected string GetValue(Config config, string key);
}
public class WebCompiler.CompileFileEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private bool <ContainsChanges>k__BackingField;
    [CompilerGeneratedAttribute]
private Config <Config>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BaseFolder>k__BackingField;
    public bool ContainsChanges { get; public set; }
    public Config Config { get; public set; }
    public string BaseFolder { get; public set; }
    public CompileFileEventArgs(Config config, string baseFolder, bool containsChanges);
    [CompilerGeneratedAttribute]
public bool get_ContainsChanges();
    [CompilerGeneratedAttribute]
public void set_ContainsChanges(bool value);
    [CompilerGeneratedAttribute]
public Config get_Config();
    [CompilerGeneratedAttribute]
public void set_Config(Config value);
    [CompilerGeneratedAttribute]
public string get_BaseFolder();
    [CompilerGeneratedAttribute]
public void set_BaseFolder(string value);
}
public class WebCompiler.CompilerBuildTask : Task {
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    public string FileName { get; public set; }
    [CompilerGeneratedAttribute]
public string get_FileName();
    [CompilerGeneratedAttribute]
public void set_FileName(string value);
    public virtual bool Execute();
    private void FileMinifier_AfterWritingGzipFile(object sender, MinifyFileEventArgs e);
    private void Processor_AfterProcess(object sender, CompileFileEventArgs e);
    private void Processor_AfterWritingSourceMap(object sender, SourceMapEventArgs e);
    private void FileMinifier_AfterWritingMinFile(object sender, MinifyFileEventArgs e);
    [CompilerGeneratedAttribute]
private void <Execute>b__4_4(object s, EventArgs e);
}
public class WebCompiler.CompilerCleanTask : Task {
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    public string FileName { get; public set; }
    [CompilerGeneratedAttribute]
public string get_FileName();
    [CompilerGeneratedAttribute]
public void set_FileName(string value);
    public virtual bool Execute();
}
public class WebCompiler.CompilerError : object {
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LineNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ColumnNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsWarning>k__BackingField;
    public string FileName { get; public set; }
    public string Message { get; public set; }
    public int LineNumber { get; public set; }
    public int ColumnNumber { get; public set; }
    public bool IsWarning { get; public set; }
    [CompilerGeneratedAttribute]
public string get_FileName();
    [CompilerGeneratedAttribute]
public void set_FileName(string value);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(string value);
    [CompilerGeneratedAttribute]
public int get_LineNumber();
    [CompilerGeneratedAttribute]
public void set_LineNumber(int value);
    [CompilerGeneratedAttribute]
public int get_ColumnNumber();
    [CompilerGeneratedAttribute]
public void set_ColumnNumber(int value);
    [CompilerGeneratedAttribute]
public bool get_IsWarning();
    [CompilerGeneratedAttribute]
public void set_IsWarning(bool value);
}
public class WebCompiler.CompilerResult : object {
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OriginalContent>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CompiledContent>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SourceMap>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<CompilerError> <Errors>k__BackingField;
    public string FileName { get; public set; }
    public string OriginalContent { get; public set; }
    public string CompiledContent { get; public set; }
    public string SourceMap { get; public set; }
    public List`1<CompilerError> Errors { get; public set; }
    public bool HasErrors { get; }
    [CompilerGeneratedAttribute]
public string get_FileName();
    [CompilerGeneratedAttribute]
public void set_FileName(string value);
    [CompilerGeneratedAttribute]
public string get_OriginalContent();
    [CompilerGeneratedAttribute]
public void set_OriginalContent(string value);
    [CompilerGeneratedAttribute]
public string get_CompiledContent();
    [CompilerGeneratedAttribute]
public void set_CompiledContent(string value);
    [CompilerGeneratedAttribute]
public string get_SourceMap();
    [CompilerGeneratedAttribute]
public void set_SourceMap(string value);
    [CompilerGeneratedAttribute]
public List`1<CompilerError> get_Errors();
    [CompilerGeneratedAttribute]
public void set_Errors(List`1<CompilerError> value);
    public bool get_HasErrors();
}
public static class WebCompiler.CompilerService : object {
    internal static string Version;
    private static string _path;
    private static object _syncRoot;
    public static String[] AllowedExtensions;
    [CompilerGeneratedAttribute]
private static EventHandler`1<EventArgs> Initializing;
    [CompilerGeneratedAttribute]
private static EventHandler`1<EventArgs> Initialized;
    private static CompilerService();
    public static bool IsSupported(string inputFile);
    internal static ICompiler GetCompiler(Config config);
    public static void Initialize();
    private static void SaveResourceFile(string path, string resourceName, string fileName);
    private static void OnInitializing();
    private static void OnInitialized();
    [CompilerGeneratedAttribute]
public static void add_Initializing(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public static void remove_Initializing(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public static void add_Initialized(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public static void remove_Initialized(EventHandler`1<EventArgs> value);
}
public class WebCompiler.Config : object {
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InputFile>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, object> <Minify>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeInProject>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SourceMap>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, object> <Options>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Output>k__BackingField;
    [JsonIgnoreAttribute]
public string FileName { get; public set; }
    [JsonPropertyAttribute("outputFile")]
public string OutputFile { get; public set; }
    [JsonPropertyAttribute("inputFile")]
public string InputFile { get; public set; }
    [JsonPropertyAttribute("minify")]
public Dictionary`2<string, object> Minify { get; public set; }
    [DefaultValueAttribute("True")]
[JsonPropertyAttribute("includeInProject")]
public bool IncludeInProject { get; public set; }
    [JsonPropertyAttribute("sourceMap")]
public bool SourceMap { get; public set; }
    [JsonPropertyAttribute("options")]
public Dictionary`2<string, object> Options { get; public set; }
    internal string Output { get; internal set; }
    [CompilerGeneratedAttribute]
public string get_FileName();
    [CompilerGeneratedAttribute]
public void set_FileName(string value);
    [CompilerGeneratedAttribute]
public string get_OutputFile();
    [CompilerGeneratedAttribute]
public void set_OutputFile(string value);
    [CompilerGeneratedAttribute]
public string get_InputFile();
    [CompilerGeneratedAttribute]
public void set_InputFile(string value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, object> get_Minify();
    [CompilerGeneratedAttribute]
public void set_Minify(Dictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public bool get_IncludeInProject();
    [CompilerGeneratedAttribute]
public void set_IncludeInProject(bool value);
    [CompilerGeneratedAttribute]
public bool get_SourceMap();
    [CompilerGeneratedAttribute]
public void set_SourceMap(bool value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, object> get_Options();
    [CompilerGeneratedAttribute]
public void set_Options(Dictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
internal string get_Output();
    [CompilerGeneratedAttribute]
internal void set_Output(string value);
    public FileInfo GetAbsoluteInputFile();
    public FileInfo GetAbsoluteOutputFile();
    public bool CompilationRequired();
    private bool HasDependenciesNewerThanOutput(FileInfo input, FileInfo output);
    private bool CheckForNewerDependenciesRecursively(string key, Dictionary`2<string, Dependencies> dependencies, FileInfo output, HashSet`1<string> checkedDependencies);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public bool ShouldSerializeIncludeInProject();
    public bool ShouldSerializeMinify();
    public bool ShouldSerializeOptions();
    private static bool DictionaryEqual(IDictionary`2<TKey, TValue> first, IDictionary`2<TKey, TValue> second, IEqualityComparer`1<TValue> valueComparer);
}
public class WebCompiler.ConfigFileProcessor : object {
    private static List`1<string> _processing;
    private static object _syncRoot;
    [CompilerGeneratedAttribute]
private EventHandler`1<CompileFileEventArgs> BeforeProcess;
    [CompilerGeneratedAttribute]
private EventHandler`1<ConfigProcessedEventArgs> ConfigProcessed;
    [CompilerGeneratedAttribute]
private EventHandler`1<CompileFileEventArgs> AfterProcess;
    [CompilerGeneratedAttribute]
private EventHandler`1<SourceMapEventArgs> BeforeWritingSourceMap;
    [CompilerGeneratedAttribute]
private EventHandler`1<SourceMapEventArgs> AfterWritingSourceMap;
    private static ConfigFileProcessor();
    public IEnumerable`1<CompilerResult> Process(string configFile, IEnumerable`1<Config> configs, bool force);
    public void DeleteOutputFiles(string configFile);
    private static void DeleteFile(string fileName);
    public IEnumerable`1<CompilerResult> SourceFileChanged(string configFile, string sourceFile, string projectPath);
    private IEnumerable`1<CompilerResult> SourceFileChanged(string configFile, string sourceFile, string projectPath, HashSet`1<string> compiledFiles);
    public static IEnumerable`1<Config> IsFileConfigured(string configFile, string sourceFile);
    private CompilerResult ProcessConfig(string baseFolder, Config config);
    private static bool AdjustRelativePaths(Config config);
    private void OnBeforeProcess(Config config, string baseFolder, bool containsChanges);
    private void OnConfigProcessed(Config config, int amountProcessed, int total);
    private void OnAfterProcess(Config config, string baseFolder, bool containsChanges);
    private void OnBeforeWritingSourceMap(string file, string mapFile, bool containsChanges);
    private void OnAfterWritingSourceMap(string file, string mapFile, bool containsChanges);
    [CompilerGeneratedAttribute]
public void add_BeforeProcess(EventHandler`1<CompileFileEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_BeforeProcess(EventHandler`1<CompileFileEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_ConfigProcessed(EventHandler`1<ConfigProcessedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_ConfigProcessed(EventHandler`1<ConfigProcessedEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_AfterProcess(EventHandler`1<CompileFileEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_AfterProcess(EventHandler`1<CompileFileEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_BeforeWritingSourceMap(EventHandler`1<SourceMapEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_BeforeWritingSourceMap(EventHandler`1<SourceMapEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_AfterWritingSourceMap(EventHandler`1<SourceMapEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_AfterWritingSourceMap(EventHandler`1<SourceMapEventArgs> value);
}
public class WebCompiler.ConfigHandler : object {
    public void AddConfig(string fileName, Config config);
    public void RemoveConfig(Config configToRemove);
    public void CreateDefaultsFile(string fileName);
    public static IEnumerable`1<Config> GetConfigs(string fileName);
}
public class WebCompiler.ConfigProcessedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private Config <Config>k__BackingField;
    [CompilerGeneratedAttribute]
private int <AmountProcessed>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Total>k__BackingField;
    public Config Config { get; public set; }
    public int AmountProcessed { get; public set; }
    public int Total { get; public set; }
    public ConfigProcessedEventArgs(Config config, int amountProcessed, int total);
    [CompilerGeneratedAttribute]
public Config get_Config();
    [CompilerGeneratedAttribute]
public void set_Config(Config value);
    [CompilerGeneratedAttribute]
public int get_AmountProcessed();
    [CompilerGeneratedAttribute]
public void set_AmountProcessed(int value);
    [CompilerGeneratedAttribute]
public int get_Total();
    [CompilerGeneratedAttribute]
public void set_Total(int value);
}
public class WebCompiler.CssOptions : BaseMinifyOptions {
    public static CssSettings GetSettings(Config config);
}
internal static class WebCompiler.CssRelativePath : object {
    private static Regex _rxUrl;
    private static CssRelativePath();
    public static string Adjust(string content, Config config);
    private static string GetAbsolutePath(string cssFilePath, string pathOnly);
}
public class WebCompiler.Dependencies : object {
    [CompilerGeneratedAttribute]
private HashSet`1<string> <DependentOn>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<string> <DependentFiles>k__BackingField;
    public HashSet`1<string> DependentOn { get; public set; }
    public HashSet`1<string> DependentFiles { get; public set; }
    [CompilerGeneratedAttribute]
public HashSet`1<string> get_DependentOn();
    [CompilerGeneratedAttribute]
public void set_DependentOn(HashSet`1<string> value);
    [CompilerGeneratedAttribute]
public HashSet`1<string> get_DependentFiles();
    [CompilerGeneratedAttribute]
public void set_DependentFiles(HashSet`1<string> value);
}
public abstract class WebCompiler.DependencyResolverBase : object {
    private Dictionary`2<string, Dependencies> _dependencies;
    protected Dictionary`2<string, Dependencies> Dependencies { get; }
    public String[] SearchPatterns { get; }
    public string FileExtension { get; }
    protected Dictionary`2<string, Dependencies> get_Dependencies();
    public abstract virtual String[] get_SearchPatterns();
    public abstract virtual string get_FileExtension();
    public Dictionary`2<string, Dependencies> GetDependencies(string projectRootPath);
    public abstract virtual void UpdateFileDependencies(string path);
}
internal class WebCompiler.DependencyService : object {
    private static Dictionary`2<DependencyType, DependencyResolverBase> _dependencies;
    private static DependencyService();
    public static Dictionary`2<string, Dependencies> GetDependencies(string projectRootPath, string sourceFile);
    private static DependencyType GetDependencyType(string sourceFile);
}
public static class WebCompiler.FileHelpers : object {
    public static string MakeRelative(string baseFile, string file);
    public static void RemoveReadonlyFlagFromFile(string fileName);
    public static void RemoveReadonlyFlagFromFile(FileInfo file);
    public static bool HasFileContentChanged(string fileName, string newContent);
}
public class WebCompiler.FileMinifier : object {
    [CompilerGeneratedAttribute]
private static EventHandler`1<MinifyFileEventArgs> BeforeWritingMinFile;
    [CompilerGeneratedAttribute]
private static EventHandler`1<MinifyFileEventArgs> AfterWritingMinFile;
    [CompilerGeneratedAttribute]
private static EventHandler`1<MinifyFileEventArgs> BeforeWritingGzipFile;
    [CompilerGeneratedAttribute]
private static EventHandler`1<MinifyFileEventArgs> AfterWritingGzipFile;
    internal static MinificationResult MinifyFile(Config config);
    private static MinificationResult MinifyJavaScript(Config config, string file);
    private static MinificationResult MinifyCss(Config config, string file);
    private static string GetMinFileName(string file);
    private static void GzipFile(Config config, string sourceFile, bool containsChanges);
    private static void OnBeforeWritingMinFile(string file, string minFile, bool containsChanges);
    private static void OnAfterWritingMinFile(string file, string minFile, bool containsChanges);
    private static void OnBeforeWritingGzipFile(string minFile, string gzipFile, bool containsChanges);
    private static void OnAfterWritingGzipFile(string minFile, string gzipFile, bool containsChanges);
    [CompilerGeneratedAttribute]
public static void add_BeforeWritingMinFile(EventHandler`1<MinifyFileEventArgs> value);
    [CompilerGeneratedAttribute]
public static void remove_BeforeWritingMinFile(EventHandler`1<MinifyFileEventArgs> value);
    [CompilerGeneratedAttribute]
public static void add_AfterWritingMinFile(EventHandler`1<MinifyFileEventArgs> value);
    [CompilerGeneratedAttribute]
public static void remove_AfterWritingMinFile(EventHandler`1<MinifyFileEventArgs> value);
    [CompilerGeneratedAttribute]
public static void add_BeforeWritingGzipFile(EventHandler`1<MinifyFileEventArgs> value);
    [CompilerGeneratedAttribute]
public static void remove_BeforeWritingGzipFile(EventHandler`1<MinifyFileEventArgs> value);
    [CompilerGeneratedAttribute]
public static void add_AfterWritingGzipFile(EventHandler`1<MinifyFileEventArgs> value);
    [CompilerGeneratedAttribute]
public static void remove_AfterWritingGzipFile(EventHandler`1<MinifyFileEventArgs> value);
}
internal class WebCompiler.HandlebarsCompiler : object {
    private static Regex _errorRx;
    private string _mapPath;
    private string _path;
    private string _name;
    private string _extension;
    private string _output;
    private string _error;
    private bool _partial;
    public HandlebarsCompiler(string path);
    private static HandlebarsCompiler();
    public sealed virtual CompilerResult Compile(Config config);
    private void RunCompilerProcess(Config config, FileInfo info);
    private string ConstructArguments(Config config);
}
public class WebCompiler.HandlebarsOptions : BaseOptions`1<HandlebarsOptions> {
    private static string trueStr;
    [CompilerGeneratedAttribute]
private string <Root>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoBOM>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TemplateNameSpace>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <KnownHelpersOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ForcePartial>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <KnownHelpers>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CommonJS>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AMD>k__BackingField;
    protected string CompilerFileName { get; }
    [JsonPropertyAttribute("root")]
public string Root { get; public set; }
    [JsonPropertyAttribute("noBOM")]
public bool NoBOM { get; public set; }
    [JsonPropertyAttribute("name")]
public string Name { get; public set; }
    [JsonPropertyAttribute("namespace")]
public string TemplateNameSpace { get; public set; }
    [JsonPropertyAttribute("knownHelpersOnly")]
public bool KnownHelpersOnly { get; public set; }
    [JsonPropertyAttribute("forcePartial")]
public bool ForcePartial { get; public set; }
    [JsonPropertyAttribute("knownHelpers")]
public String[] KnownHelpers { get; public set; }
    [JsonPropertyAttribute("commonjs")]
public string CommonJS { get; public set; }
    [JsonPropertyAttribute("amd")]
public bool AMD { get; public set; }
    protected virtual void LoadSettings(Config config);
    protected virtual string get_CompilerFileName();
    [CompilerGeneratedAttribute]
public string get_Root();
    [CompilerGeneratedAttribute]
public void set_Root(string value);
    [CompilerGeneratedAttribute]
public bool get_NoBOM();
    [CompilerGeneratedAttribute]
public void set_NoBOM(bool value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_TemplateNameSpace();
    [CompilerGeneratedAttribute]
public void set_TemplateNameSpace(string value);
    [CompilerGeneratedAttribute]
public bool get_KnownHelpersOnly();
    [CompilerGeneratedAttribute]
public void set_KnownHelpersOnly(bool value);
    [CompilerGeneratedAttribute]
public bool get_ForcePartial();
    [CompilerGeneratedAttribute]
public void set_ForcePartial(bool value);
    [CompilerGeneratedAttribute]
public String[] get_KnownHelpers();
    [CompilerGeneratedAttribute]
public void set_KnownHelpers(String[] value);
    [CompilerGeneratedAttribute]
public string get_CommonJS();
    [CompilerGeneratedAttribute]
public void set_CommonJS(string value);
    [CompilerGeneratedAttribute]
public bool get_AMD();
    [CompilerGeneratedAttribute]
public void set_AMD(bool value);
}
internal class WebCompiler.IcedCoffeeScriptCompiler : object {
    private static Regex _errorRx;
    private string _path;
    private string _error;
    private string _temp;
    public IcedCoffeeScriptCompiler(string path);
    private static IcedCoffeeScriptCompiler();
    public sealed virtual CompilerResult Compile(Config config);
    private void RunCompilerProcess(Config config, FileInfo info);
    private string ConstructArguments(Config config);
}
public class WebCompiler.IcedCoffeeScriptOptions : BaseOptions`1<IcedCoffeeScriptOptions> {
    private static string trueStr;
    [CompilerGeneratedAttribute]
private bool <Bare>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RuntimeMode>k__BackingField;
    protected string CompilerFileName { get; }
    [JsonPropertyAttribute("bare")]
public bool Bare { get; public set; }
    [JsonPropertyAttribute("runtimeMode")]
public string RuntimeMode { get; public set; }
    protected virtual void LoadSettings(Config config);
    protected virtual string get_CompilerFileName();
    [CompilerGeneratedAttribute]
public bool get_Bare();
    [CompilerGeneratedAttribute]
public void set_Bare(bool value);
    [CompilerGeneratedAttribute]
public string get_RuntimeMode();
    [CompilerGeneratedAttribute]
public void set_RuntimeMode(string value);
}
internal interface WebCompiler.ICompiler {
    public abstract virtual CompilerResult Compile(Config config);
}
public class WebCompiler.JavaScriptOptions : BaseMinifyOptions {
    public static CodeSettings GetSettings(Config config);
}
internal class WebCompiler.LessCompiler : object {
    private static Regex _errorRx;
    private string _path;
    private string _output;
    private string _error;
    public LessCompiler(string path);
    private static LessCompiler();
    public sealed virtual CompilerResult Compile(Config config);
    private void RunCompilerProcess(Config config, FileInfo info);
    private static string ConstructArguments(Config config);
}
internal class WebCompiler.LessDependencyResolver : SassDependencyResolver {
    public String[] SearchPatterns { get; }
    public string FileExtension { get; }
    public virtual String[] get_SearchPatterns();
    public virtual string get_FileExtension();
}
public class WebCompiler.LessOptions : BaseOptions`1<LessOptions> {
    private static string trueStr;
    [CompilerGeneratedAttribute]
private string <AutoPrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CssComb>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IECompat>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Math>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <StrictMath>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <StrictUnits>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RelativeUrls>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RootPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SourceMapRoot>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SourceMapBasePath>k__BackingField;
    protected string CompilerFileName { get; }
    [JsonPropertyAttribute("autoPrefix")]
public string AutoPrefix { get; public set; }
    [JsonPropertyAttribute("cssComb")]
public string CssComb { get; public set; }
    [JsonPropertyAttribute("ieCompat")]
public bool IECompat { get; public set; }
    [JsonPropertyAttribute("math")]
public string Math { get; public set; }
    [JsonPropertyAttribute("strictMath")]
public bool StrictMath { get; public set; }
    [JsonPropertyAttribute("strictUnits")]
public bool StrictUnits { get; public set; }
    [JsonPropertyAttribute("relativeUrls")]
public bool RelativeUrls { get; public set; }
    [JsonPropertyAttribute("rootPath")]
public string RootPath { get; public set; }
    [JsonPropertyAttribute("sourceMapRoot")]
public string SourceMapRoot { get; public set; }
    [JsonPropertyAttribute("sourceMapBasePath")]
public string SourceMapBasePath { get; public set; }
    protected virtual void LoadSettings(Config config);
    protected virtual string get_CompilerFileName();
    [CompilerGeneratedAttribute]
public string get_AutoPrefix();
    [CompilerGeneratedAttribute]
public void set_AutoPrefix(string value);
    [CompilerGeneratedAttribute]
public string get_CssComb();
    [CompilerGeneratedAttribute]
public void set_CssComb(string value);
    [CompilerGeneratedAttribute]
public bool get_IECompat();
    [CompilerGeneratedAttribute]
public void set_IECompat(bool value);
    [CompilerGeneratedAttribute]
public string get_Math();
    [CompilerGeneratedAttribute]
public void set_Math(string value);
    [CompilerGeneratedAttribute]
public bool get_StrictMath();
    [CompilerGeneratedAttribute]
public void set_StrictMath(bool value);
    [CompilerGeneratedAttribute]
public bool get_StrictUnits();
    [CompilerGeneratedAttribute]
public void set_StrictUnits(bool value);
    [CompilerGeneratedAttribute]
public bool get_RelativeUrls();
    [CompilerGeneratedAttribute]
public void set_RelativeUrls(bool value);
    [CompilerGeneratedAttribute]
public string get_RootPath();
    [CompilerGeneratedAttribute]
public void set_RootPath(string value);
    [CompilerGeneratedAttribute]
public string get_SourceMapRoot();
    [CompilerGeneratedAttribute]
public void set_SourceMapRoot(string value);
    [CompilerGeneratedAttribute]
public string get_SourceMapBasePath();
    [CompilerGeneratedAttribute]
public void set_SourceMapBasePath(string value);
}
public class WebCompiler.MinificationResult : object {
    [CompilerGeneratedAttribute]
private string <MinifiedContent>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SourceMap>k__BackingField;
    public string MinifiedContent { get; public set; }
    public string SourceMap { get; public set; }
    public MinificationResult(string content, string sourceMap);
    [CompilerGeneratedAttribute]
public string get_MinifiedContent();
    [CompilerGeneratedAttribute]
public void set_MinifiedContent(string value);
    [CompilerGeneratedAttribute]
public string get_SourceMap();
    [CompilerGeneratedAttribute]
public void set_SourceMap(string value);
}
public class WebCompiler.MinifyFileEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private bool <ContainsChanges>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OriginalFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ResultFile>k__BackingField;
    public bool ContainsChanges { get; public set; }
    public string OriginalFile { get; public set; }
    public string ResultFile { get; public set; }
    public MinifyFileEventArgs(string originalFile, string resultFile, bool containsChanges);
    [CompilerGeneratedAttribute]
public bool get_ContainsChanges();
    [CompilerGeneratedAttribute]
public void set_ContainsChanges(bool value);
    [CompilerGeneratedAttribute]
public string get_OriginalFile();
    [CompilerGeneratedAttribute]
public void set_OriginalFile(string value);
    [CompilerGeneratedAttribute]
public string get_ResultFile();
    [CompilerGeneratedAttribute]
public void set_ResultFile(string value);
}
internal class WebCompiler.Program : object {
    private static int Main(String[] args);
    private static void EventHookups(ConfigFileProcessor processor, string configPath);
    private static IEnumerable`1<Config> GetConfigs(string configPath, string file);
}
internal class WebCompiler.SassCompiler : object {
    private static Regex _errorRx;
    private string _path;
    private string _output;
    private string _error;
    public SassCompiler(string path);
    private static SassCompiler();
    public sealed virtual CompilerResult Compile(Config config);
    private void RunCompilerProcess(Config config, FileInfo info);
    private static string ConstructArguments(Config config);
}
internal class WebCompiler.SassDependencyResolver : DependencyResolverBase {
    public String[] SearchPatterns { get; }
    public string FileExtension { get; }
    public virtual String[] get_SearchPatterns();
    public virtual string get_FileExtension();
    public virtual void UpdateFileDependencies(string path);
    private static IEnumerable`1<FileInfo> GetFileInfos(FileInfo info, Match match);
}
public class WebCompiler.SassOptions : BaseOptions`1<SassOptions> {
    private static string trueStr;
    [CompilerGeneratedAttribute]
private string <AutoPrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IncludePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IndentType>k__BackingField;
    [CompilerGeneratedAttribute]
private int <IndentWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Precision>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RelativeUrls>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SourceMapRoot>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LineFeed>k__BackingField;
    protected string CompilerFileName { get; }
    [JsonPropertyAttribute("autoPrefix")]
public string AutoPrefix { get; public set; }
    [JsonPropertyAttribute("includePath")]
public string IncludePath { get; public set; }
    [JsonPropertyAttribute("indentType")]
public string IndentType { get; public set; }
    [JsonPropertyAttribute("indentWidth")]
public int IndentWidth { get; public set; }
    [JsonPropertyAttribute("outputStyle")]
public string OutputStyle { get; public set; }
    public int Precision { get; public set; }
    [JsonPropertyAttribute("relativeUrls")]
public bool RelativeUrls { get; public set; }
    [JsonPropertyAttribute("sourceMapRoot")]
public string SourceMapRoot { get; public set; }
    [JsonPropertyAttribute("lineFeed")]
public string LineFeed { get; public set; }
    protected virtual void LoadSettings(Config config);
    protected virtual string get_CompilerFileName();
    [CompilerGeneratedAttribute]
public string get_AutoPrefix();
    [CompilerGeneratedAttribute]
public void set_AutoPrefix(string value);
    [CompilerGeneratedAttribute]
public string get_IncludePath();
    [CompilerGeneratedAttribute]
public void set_IncludePath(string value);
    [CompilerGeneratedAttribute]
public string get_IndentType();
    [CompilerGeneratedAttribute]
public void set_IndentType(string value);
    [CompilerGeneratedAttribute]
public int get_IndentWidth();
    [CompilerGeneratedAttribute]
public void set_IndentWidth(int value);
    [CompilerGeneratedAttribute]
public string get_OutputStyle();
    [CompilerGeneratedAttribute]
public void set_OutputStyle(string value);
    [CompilerGeneratedAttribute]
public int get_Precision();
    [CompilerGeneratedAttribute]
public void set_Precision(int value);
    [CompilerGeneratedAttribute]
public bool get_RelativeUrls();
    [CompilerGeneratedAttribute]
public void set_RelativeUrls(bool value);
    [CompilerGeneratedAttribute]
public string get_SourceMapRoot();
    [CompilerGeneratedAttribute]
public void set_SourceMapRoot(string value);
    [CompilerGeneratedAttribute]
public string get_LineFeed();
    [CompilerGeneratedAttribute]
public void set_LineFeed(string value);
}
public class WebCompiler.SourceMapEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private bool <ContainsChanges>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OriginalFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ResultFile>k__BackingField;
    public bool ContainsChanges { get; public set; }
    public string OriginalFile { get; public set; }
    public string ResultFile { get; public set; }
    public SourceMapEventArgs(string originalFile, string resultFile, bool containsChanges);
    [CompilerGeneratedAttribute]
public bool get_ContainsChanges();
    [CompilerGeneratedAttribute]
public void set_ContainsChanges(bool value);
    [CompilerGeneratedAttribute]
public string get_OriginalFile();
    [CompilerGeneratedAttribute]
public void set_OriginalFile(string value);
    [CompilerGeneratedAttribute]
public string get_ResultFile();
    [CompilerGeneratedAttribute]
public void set_ResultFile(string value);
}
internal class WebCompiler.StylusCompiler : object {
    private static Regex _errorRx;
    private string _path;
    private string _output;
    private string _error;
    public StylusCompiler(string path);
    private static StylusCompiler();
    public sealed virtual CompilerResult Compile(Config config);
    private void RunCompilerProcess(Config config, FileInfo info);
    private static string ConstructArguments(Config config);
}
public class WebCompiler.StylusOptions : BaseOptions`1<StylusOptions> {
    protected string CompilerFileName { get; }
    protected virtual void LoadSettings(Config config);
    protected virtual string get_CompilerFileName();
}
