public class BundlerMinifier.Bundle : object {
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputFileName>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <InputFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, object> <Minify>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeInProject>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SourceMap>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SourceMapRootPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Output>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <MostRecentWrite>k__BackingField;
    [JsonIgnoreAttribute]
public string FileName { get; public set; }
    [JsonPropertyAttribute("outputFileName")]
public string OutputFileName { get; public set; }
    [JsonPropertyAttribute("inputFiles")]
public List`1<string> InputFiles { get; }
    [JsonPropertyAttribute("minify")]
public Dictionary`2<string, object> Minify { get; }
    [JsonPropertyAttribute("includeInProject")]
public bool IncludeInProject { get; public set; }
    [JsonPropertyAttribute("sourceMap")]
public bool SourceMap { get; public set; }
    [JsonPropertyAttribute("sourceMapRootPath")]
public string SourceMapRootPath { get; public set; }
    internal string Output { get; internal set; }
    internal bool IsMinificationEnabled { get; }
    internal bool IsGzipEnabled { get; }
    [JsonIgnoreAttribute]
public bool OutputIsMinFile { get; }
    public DateTime MostRecentWrite { get; public set; }
    [CompilerGeneratedAttribute]
public string get_FileName();
    [CompilerGeneratedAttribute]
public void set_FileName(string value);
    [CompilerGeneratedAttribute]
public string get_OutputFileName();
    [CompilerGeneratedAttribute]
public void set_OutputFileName(string value);
    [CompilerGeneratedAttribute]
public List`1<string> get_InputFiles();
    [CompilerGeneratedAttribute]
public Dictionary`2<string, object> get_Minify();
    [CompilerGeneratedAttribute]
public bool get_IncludeInProject();
    [CompilerGeneratedAttribute]
public void set_IncludeInProject(bool value);
    [CompilerGeneratedAttribute]
public bool get_SourceMap();
    [CompilerGeneratedAttribute]
public void set_SourceMap(bool value);
    [CompilerGeneratedAttribute]
public string get_SourceMapRootPath();
    [CompilerGeneratedAttribute]
public void set_SourceMapRootPath(string value);
    [CompilerGeneratedAttribute]
internal string get_Output();
    [CompilerGeneratedAttribute]
internal void set_Output(string value);
    internal bool get_IsMinificationEnabled();
    internal bool get_IsGzipEnabled();
    public bool get_OutputIsMinFile();
    [CompilerGeneratedAttribute]
public DateTime get_MostRecentWrite();
    [CompilerGeneratedAttribute]
public void set_MostRecentWrite(DateTime value);
    public string GetAbsoluteOutputFile();
    public List`1<string> GetAbsoluteInputFiles(bool notifyOnPatternMiss);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public bool ShouldSerializeIncludeInProject();
    public bool ShouldSerializeMinify();
    private static bool DictionaryEqual(IDictionary`2<TKey, TValue> first, IDictionary`2<TKey, TValue> second, IEqualityComparer`1<TValue> valueComparer);
}
public class BundlerMinifier.BundleFileEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private bool <ContainsChanges>k__BackingField;
    [CompilerGeneratedAttribute]
private Bundle <Bundle>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputFileName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BaseFolder>k__BackingField;
    public bool ContainsChanges { get; public set; }
    public Bundle Bundle { get; public set; }
    public string OutputFileName { get; public set; }
    public string BaseFolder { get; public set; }
    public BundleFileEventArgs(string outputFileName, Bundle bundle, string baseFolder, bool containsChanges);
    [CompilerGeneratedAttribute]
public bool get_ContainsChanges();
    [CompilerGeneratedAttribute]
public void set_ContainsChanges(bool value);
    [CompilerGeneratedAttribute]
public Bundle get_Bundle();
    [CompilerGeneratedAttribute]
public void set_Bundle(Bundle value);
    [CompilerGeneratedAttribute]
public string get_OutputFileName();
    [CompilerGeneratedAttribute]
public void set_OutputFileName(string value);
    [CompilerGeneratedAttribute]
public string get_BaseFolder();
    [CompilerGeneratedAttribute]
public void set_BaseFolder(string value);
}
public class BundlerMinifier.BundleFileProcessor : object {
    private static String[] _supported;
    [CompilerGeneratedAttribute]
private EventHandler`1<BundleFileEventArgs> Processing;
    [CompilerGeneratedAttribute]
private EventHandler`1<BundleFileEventArgs> BeforeBundling;
    [CompilerGeneratedAttribute]
private EventHandler`1<BundleFileEventArgs> AfterBundling;
    [CompilerGeneratedAttribute]
private EventHandler`1<MinifyFileEventArgs> BeforeWritingSourceMap;
    [CompilerGeneratedAttribute]
private EventHandler`1<MinifyFileEventArgs> AfterWritingSourceMap;
    [CompilerGeneratedAttribute]
private EventHandler`1<BundleFileEventArgs> MinificationSkipped;
    private static BundleFileProcessor();
    public static bool IsSupported(String[] files);
    public bool Process(string fileName, IEnumerable`1<Bundle> bundles);
    public void Clean(string fileName, IEnumerable`1<Bundle> bundles);
    public void SourceFileChanged(string bundleFile, string sourceFile);
    public static IEnumerable`1<Bundle> IsFileConfigured(string configFile, string sourceFile);
    private bool ProcessBundle(string baseFolder, Bundle bundle);
    private void CleanBundle(string baseFolder, Bundle bundle);
    [CompilerGeneratedAttribute]
public void add_Processing(EventHandler`1<BundleFileEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_Processing(EventHandler`1<BundleFileEventArgs> value);
    protected void OnProcessing(Bundle bundle, string baseFolder);
    [CompilerGeneratedAttribute]
public void add_BeforeBundling(EventHandler`1<BundleFileEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_BeforeBundling(EventHandler`1<BundleFileEventArgs> value);
    protected void OnBeforeBundling(Bundle bundle, string baseFolder, bool containsChanges);
    [CompilerGeneratedAttribute]
public void add_AfterBundling(EventHandler`1<BundleFileEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_AfterBundling(EventHandler`1<BundleFileEventArgs> value);
    protected void OnAfterBundling(Bundle bundle, string baseFolder, bool containsChanges);
    [CompilerGeneratedAttribute]
public void add_BeforeWritingSourceMap(EventHandler`1<MinifyFileEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_BeforeWritingSourceMap(EventHandler`1<MinifyFileEventArgs> value);
    protected void OnBeforeWritingSourceMap(string file, string mapFile, bool containsChanges);
    [CompilerGeneratedAttribute]
public void add_AfterWritingSourceMap(EventHandler`1<MinifyFileEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_AfterWritingSourceMap(EventHandler`1<MinifyFileEventArgs> value);
    protected void OnAfterWritingSourceMap(string file, string mapFile, bool containsChanges);
    [CompilerGeneratedAttribute]
public void add_MinificationSkipped(EventHandler`1<BundleFileEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_MinificationSkipped(EventHandler`1<BundleFileEventArgs> value);
    protected void OnMinificationSkipped(Bundle bundle, string baseFolder, bool containsChanges);
}
public static class BundlerMinifier.BundleHandler : object {
    public static void AddBundle(string configFile, Bundle newBundle);
    public static void RemoveBundle(string configFile, Bundle bundleToRemove);
    public static bool TryGetBundles(string configFile, IEnumerable`1& bundles);
    public static IEnumerable`1<Bundle> GetBundles(string configFile);
    public static void ProcessBundle(string baseFolder, Bundle bundle);
    private static bool AdjustRelativePaths(Bundle bundle);
}
public static class BundlerMinifier.BundleMinifier : object {
    [CompilerGeneratedAttribute]
private static EventHandler`1<MinifyFileEventArgs> BeforeWritingMinFile;
    [CompilerGeneratedAttribute]
private static EventHandler`1<MinifyFileEventArgs> AfterWritingMinFile;
    [CompilerGeneratedAttribute]
private static EventHandler`1<MinifyFileEventArgs> BeforeWritingGzipFile;
    [CompilerGeneratedAttribute]
private static EventHandler`1<MinifyFileEventArgs> AfterWritingGzipFile;
    [CompilerGeneratedAttribute]
private static EventHandler`1<MinifyFileEventArgs> ErrorMinifyingFile;
    public static MinificationResult MinifyBundle(Bundle bundle);
    private static void MinifyJavaScript(Bundle bundle, MinificationResult minResult);
    private static void MinifyCss(Bundle bundle, MinificationResult minResult);
    private static void MinifyHtml(Bundle bundle, MinificationResult minResult);
    private static void WriteMinFile(Bundle bundle, MinificationResult minResult, UglifyResult uglifyResult);
    public static void GzipFile(string sourceFile, Bundle bundle, bool minificationChanged, string minifiedContent);
    private static void AddNUglifyErrors(UglifyResult minifier, MinificationResult minResult);
    private static void AddGenericException(MinificationResult minResult, Exception ex);
    public static string GetMinFileName(string file);
    private static void OnBeforeWritingMinFile(string file, string minFile, Bundle bundle, bool containsChanges);
    private static void OnAfterWritingMinFile(string file, string minFile, Bundle bundle, bool containsChanges);
    private static void OnBeforeWritingGzipFile(string minFile, string gzipFile, Bundle bundle, bool containsChanges);
    private static void OnAfterWritingGzipFile(string minFile, string gzipFile, Bundle bundle, bool containsChanges);
    private static void OnErrorMinifyingFile(MinificationResult result);
    [CompilerGeneratedAttribute]
public static void add_BeforeWritingMinFile(EventHandler`1<MinifyFileEventArgs> value);
    [CompilerGeneratedAttribute]
public static void remove_BeforeWritingMinFile(EventHandler`1<MinifyFileEventArgs> value);
    [CompilerGeneratedAttribute]
public static void add_AfterWritingMinFile(EventHandler`1<MinifyFileEventArgs> value);
    [CompilerGeneratedAttribute]
public static void remove_AfterWritingMinFile(EventHandler`1<MinifyFileEventArgs> value);
    [CompilerGeneratedAttribute]
public static void add_BeforeWritingGzipFile(EventHandler`1<MinifyFileEventArgs> value);
    [CompilerGeneratedAttribute]
public static void remove_BeforeWritingGzipFile(EventHandler`1<MinifyFileEventArgs> value);
    [CompilerGeneratedAttribute]
public static void add_AfterWritingGzipFile(EventHandler`1<MinifyFileEventArgs> value);
    [CompilerGeneratedAttribute]
public static void remove_AfterWritingGzipFile(EventHandler`1<MinifyFileEventArgs> value);
    [CompilerGeneratedAttribute]
public static void add_ErrorMinifyingFile(EventHandler`1<MinifyFileEventArgs> value);
    [CompilerGeneratedAttribute]
public static void remove_ErrorMinifyingFile(EventHandler`1<MinifyFileEventArgs> value);
}
internal class BundlerMinifier.ChangeHandler : object {
    private static String[] _ignorePatterns;
    private Bundle _bundle;
    private string _configFile;
    private BundleFileProcessor _processor;
    public Bundle Bundle { get; }
    public ChangeHandler(BundleFileProcessor processor, string configFile, Bundle bundle);
    private static ChangeHandler();
    public Bundle get_Bundle();
    public sealed virtual bool Equals(ChangeHandler other);
    private bool SetCompare(IEnumerable`1<T> left, IEnumerable`1<T> right, Func`3<T, T, bool> comparer, Func`2<T, int> getHashCode);
    private bool SetCompare(IEnumerable`1<T> left, IEnumerable`1<T> right, IEqualityComparer`1<T> comparer);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public bool FilesChanged(FileSystemEventArgs e);
    private bool IsFileValid(string file);
}
public class BundlerMinifier.ColoredText : object {
    private int _color;
    private string _message;
    private bool _bright;
    public ColoredText(string message);
    public ColoredText Bright();
    public ColoredText Red();
    public ColoredText Black();
    public ColoredText Green();
    public ColoredText Orange();
    public ColoredText Blue();
    public ColoredText Purple();
    public ColoredText Cyan();
    public ColoredText LightGray();
    public static string op_Implicit(ColoredText t);
    public virtual string ToString();
}
public class BundlerMinifier.ColoredTextRegion : object {
    private string _after;
    private bool _isDisposed;
    private ColoredTextRegion(Func`2<string, ColoredText> colorization);
    public static IDisposable Create(Func`2<string, ColoredText> colorization);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool isDisposing);
}
public class BundlerMinifier.Constants : object {
    public static string VERSION;
}
internal static class BundlerMinifier.CssOptions : object {
    public static CssSettings GetSettings(Bundle bundle);
    internal static string GetValue(Bundle bundle, string key, object defaultValue);
}
internal static class BundlerMinifier.CssRelativePath : object {
    private static Regex _rxUrl;
    private static CssRelativePath();
    public static string Adjust(string inputFile, string outputPath);
    private static string GetAbsolutePath(string cssFilePath, string pathOnly);
}
[ExtensionAttribute]
public static class BundlerMinifier.FileHelpers : object {
    private static string _protocol;
    public static bool IsUnixPathPreferred { get; }
    public static char PathSeparatorChar { get; }
    private static FileHelpers();
    public static string MakeRelative(string baseFile, string file);
    public static void RemoveReadonlyFlagFromFile(string fileName);
    public static bool HasFileContentChanged(string fileName, string newContent);
    public static bool get_IsUnixPathPreferred();
    public static char get_PathSeparatorChar();
    [ExtensionAttribute]
public static string NormalizePath(string path);
    [ExtensionAttribute]
public static string TrimTrailingPathSeparatorChar(string path);
    [ExtensionAttribute]
public static string DemandTrailingPathSeparatorChar(string path);
    [ExtensionAttribute]
public static string AsPathSegment(string path);
    public static string ReadAllText(string file);
}
internal static class BundlerMinifier.HtmlOptions : object {
    public static HtmlSettings GetSettings(Bundle bundle);
    internal static string GetValue(Bundle bundle, string key, object defaultValue);
}
internal static class BundlerMinifier.JavaScriptOptions : object {
    public static CodeSettings GetSettings(Bundle bundle);
    internal static string GetValue(Bundle bundle, string key, object defaultValue);
}
public class BundlerMinifier.MinificationError : object {
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LineNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ColumnNumber>k__BackingField;
    public string FileName { get; public set; }
    public string Message { get; public set; }
    public int LineNumber { get; public set; }
    public int ColumnNumber { get; public set; }
    [CompilerGeneratedAttribute]
public string get_FileName();
    [CompilerGeneratedAttribute]
public void set_FileName(string value);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(string value);
    [CompilerGeneratedAttribute]
public int get_LineNumber();
    [CompilerGeneratedAttribute]
public void set_LineNumber(int value);
    [CompilerGeneratedAttribute]
public int get_ColumnNumber();
    [CompilerGeneratedAttribute]
public void set_ColumnNumber(int value);
    public virtual string ToString();
}
public class BundlerMinifier.MinificationResult : object {
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MinifiedContent>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SourceMap>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<MinificationError> <Errors>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Changed>k__BackingField;
    public string FileName { get; public set; }
    public string MinifiedContent { get; public set; }
    public string SourceMap { get; public set; }
    public List`1<MinificationError> Errors { get; }
    public bool HasErrors { get; }
    public bool Changed { get; public set; }
    public MinificationResult(string fileName, string content, string sourceMap);
    [CompilerGeneratedAttribute]
public string get_FileName();
    [CompilerGeneratedAttribute]
public void set_FileName(string value);
    [CompilerGeneratedAttribute]
public string get_MinifiedContent();
    [CompilerGeneratedAttribute]
public void set_MinifiedContent(string value);
    [CompilerGeneratedAttribute]
public string get_SourceMap();
    [CompilerGeneratedAttribute]
public void set_SourceMap(string value);
    [CompilerGeneratedAttribute]
public List`1<MinificationError> get_Errors();
    public bool get_HasErrors();
    [CompilerGeneratedAttribute]
public bool get_Changed();
    [CompilerGeneratedAttribute]
public void set_Changed(bool value);
}
public class BundlerMinifier.MinifyFileEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private bool <ContainsChanges>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OriginalFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ResultFile>k__BackingField;
    [CompilerGeneratedAttribute]
private Bundle <Bundle>k__BackingField;
    [CompilerGeneratedAttribute]
private MinificationResult <Result>k__BackingField;
    public bool ContainsChanges { get; public set; }
    public string OriginalFile { get; private set; }
    public string ResultFile { get; private set; }
    public Bundle Bundle { get; private set; }
    public MinificationResult Result { get; public set; }
    public MinifyFileEventArgs(string originalFile, string resultFile, bool containsChanges);
    public MinifyFileEventArgs(string originalFile, string resultFile, Bundle bundle, bool containsChanges);
    [CompilerGeneratedAttribute]
public bool get_ContainsChanges();
    [CompilerGeneratedAttribute]
public void set_ContainsChanges(bool value);
    [CompilerGeneratedAttribute]
public string get_OriginalFile();
    [CompilerGeneratedAttribute]
private void set_OriginalFile(string value);
    [CompilerGeneratedAttribute]
public string get_ResultFile();
    [CompilerGeneratedAttribute]
private void set_ResultFile(string value);
    [CompilerGeneratedAttribute]
public Bundle get_Bundle();
    [CompilerGeneratedAttribute]
private void set_Bundle(Bundle value);
    [CompilerGeneratedAttribute]
public MinificationResult get_Result();
    [CompilerGeneratedAttribute]
public void set_Result(MinificationResult value);
}
internal class BundlerMinifier.Program : object {
    private static string DefaultConfigFileName;
    private static bool GetConfigFileFromArgs(String[] args, String& configPath);
    private static int Main(String[] args);
    private static void ShowHelp();
    private static int Run(BundleFileProcessor processor, string configPath, string file, bool isClean);
    private static void EventHookups(BundleFileProcessor processor, string configPath);
    private static IEnumerable`1<Bundle> GetConfigs(string configPath, string file);
}
[ExtensionAttribute]
public static class BundlerMinifier.StringExtensions : object {
    [CompilerGeneratedAttribute]
private static bool <NoColor>k__BackingField;
    public static bool NoColor { get; public set; }
    [CompilerGeneratedAttribute]
public static bool get_NoColor();
    [CompilerGeneratedAttribute]
public static void set_NoColor(bool value);
    [ExtensionAttribute]
public static ColoredText Orange(string s);
    [ExtensionAttribute]
public static ColoredText Black(string s);
    [ExtensionAttribute]
public static ColoredText Red(string s);
    [ExtensionAttribute]
public static ColoredText Green(string s);
    [ExtensionAttribute]
public static ColoredText Blue(string s);
    [ExtensionAttribute]
public static ColoredText Purple(string s);
    [ExtensionAttribute]
public static ColoredText Cyan(string s);
    [ExtensionAttribute]
public static ColoredText LightGray(string s);
}
public class BundlerMinifier.Watcher : object {
    private static List`1<ChangeHandler> ChangeHandlers;
    private static FileSystemWatcher _listener;
    private static string _configPath;
    private static bool _watchingAll;
    private static BundleFileProcessor _processor;
    private static Watcher();
    public static bool Configure(BundleFileProcessor processor, List`1<string> configurations, string configPath);
    private static void ConfigureWatcher(string configPath);
    public static void Stop();
    [AsyncStateMachineAttribute("BundlerMinifier.Watcher/<FilesChanged>d__8")]
private static void FilesChanged(object sender, FileSystemEventArgs e);
    private static bool ReloadConfig();
}
public class Minimatch.Minimatcher : object {
    private Options options;
    private string pattern;
    private bool negate;
    private bool comment;
    private bool empty;
    private Regex regexp;
    private bool isError;
    private IEnumerable`1<string> globSet;
    private IEnumerable`1<IEnumerable`1<ParseItem>> set;
    private IEnumerable`1<IEnumerable`1<string>> globParts;
    private static string qmark;
    private static string star;
    private static string twoStarDot;
    private static string twoStarNoDot;
    private static HashSet`1<char> reSpecials;
    private static Regex slashSplit;
    private static Regex hasBraces;
    private static Regex numericSet;
    private static Regex escapeCheck;
    private static Regex globUnescaper;
    public Minimatcher(string pattern, Options options);
    private static Minimatcher();
    public static Func`2<string, bool> CreateFilter(string pattern, Options options);
    public static bool Check(string input, string pattern, Options options);
    public static IEnumerable`1<string> Filter(IEnumerable`1<string> list, string pattern, Options options);
    public static Regex CreateRegex(string pattern, Options options);
    public bool IsMatch(string input);
    public IEnumerable`1<string> Filter(IEnumerable`1<string> list);
    private void Make();
    private void ParseNegate();
    public static IEnumerable`1<string> BraceExpand(string pattern, Options options);
    private Tuple`2<ParseItem, bool> Parse(string pattern, bool isSub);
    private Regex MakeRegex();
    private bool Match(string input, bool partial);
    private bool MatchOne(IList`1<string> file, IList`1<ParseItem> pattern, bool partial);
    private static string GlobUnescape(string s);
    [CompilerGeneratedAttribute]
private IEnumerable`1<Tuple`2<ParseItem, bool>> <Make>b__23_1(IEnumerable`1<string> g);
    [CompilerGeneratedAttribute]
private Tuple`2<ParseItem, bool> <Make>b__23_4(string t);
    [CompilerGeneratedAttribute]
private string <MakeRegex>b__35_0(IEnumerable`1<ParseItem> pattern);
    [CompilerGeneratedAttribute]
private string <MakeRegex>b__35_1(ParseItem p);
}
public class Minimatch.Options : object {
    [CompilerGeneratedAttribute]
private bool <NoComment>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoNegate>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoBrace>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoGlobStar>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoCase>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoExt>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Dot>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoNull>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FlipNegate>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MatchBase>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowWindowsPaths>k__BackingField;
    public bool NoComment { get; public set; }
    public bool NoNegate { get; public set; }
    public bool NoBrace { get; public set; }
    public bool NoGlobStar { get; public set; }
    public bool NoCase { get; public set; }
    public bool NoExt { get; public set; }
    public bool Dot { get; public set; }
    public bool NoNull { get; public set; }
    public bool FlipNegate { get; public set; }
    public bool MatchBase { get; public set; }
    internal RegexOptions RegexOptions { get; }
    public bool AllowWindowsPaths { get; public set; }
    public bool IgnoreCase { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_NoComment();
    [CompilerGeneratedAttribute]
public void set_NoComment(bool value);
    [CompilerGeneratedAttribute]
public bool get_NoNegate();
    [CompilerGeneratedAttribute]
public void set_NoNegate(bool value);
    [CompilerGeneratedAttribute]
public bool get_NoBrace();
    [CompilerGeneratedAttribute]
public void set_NoBrace(bool value);
    [CompilerGeneratedAttribute]
public bool get_NoGlobStar();
    [CompilerGeneratedAttribute]
public void set_NoGlobStar(bool value);
    [CompilerGeneratedAttribute]
public bool get_NoCase();
    [CompilerGeneratedAttribute]
public void set_NoCase(bool value);
    [CompilerGeneratedAttribute]
public bool get_NoExt();
    [CompilerGeneratedAttribute]
public void set_NoExt(bool value);
    [CompilerGeneratedAttribute]
public bool get_Dot();
    [CompilerGeneratedAttribute]
public void set_Dot(bool value);
    [CompilerGeneratedAttribute]
public bool get_NoNull();
    [CompilerGeneratedAttribute]
public void set_NoNull(bool value);
    [CompilerGeneratedAttribute]
public bool get_FlipNegate();
    [CompilerGeneratedAttribute]
public void set_FlipNegate(bool value);
    [CompilerGeneratedAttribute]
public bool get_MatchBase();
    [CompilerGeneratedAttribute]
public void set_MatchBase(bool value);
    internal RegexOptions get_RegexOptions();
    [CompilerGeneratedAttribute]
public bool get_AllowWindowsPaths();
    [CompilerGeneratedAttribute]
public void set_AllowWindowsPaths(bool value);
    public bool get_IgnoreCase();
    public void set_IgnoreCase(bool value);
}
