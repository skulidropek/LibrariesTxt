public abstract class BundleTransformer.Core.AssetNodeMatchBase : object {
    [CompilerGeneratedAttribute]
private int <Position>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Length>k__BackingField;
    [CompilerGeneratedAttribute]
private Match <Match>k__BackingField;
    public int Position { get; private set; }
    public int Length { get; private set; }
    public Match Match { get; private set; }
    protected AssetNodeMatchBase(int position, int length, Match match);
    [CompilerGeneratedAttribute]
public int get_Position();
    [CompilerGeneratedAttribute]
private void set_Position(int value);
    [CompilerGeneratedAttribute]
public int get_Length();
    [CompilerGeneratedAttribute]
private void set_Length(int value);
    [CompilerGeneratedAttribute]
public Match get_Match();
    [CompilerGeneratedAttribute]
private void set_Match(Match value);
}
public class BundleTransformer.Core.Assets.Asset : object {
    private static Regex _cssFileWithMinExtensionRegex;
    private static Regex _jsFileWithDebugExtensionRegex;
    private static Regex _jsFileWithMinExtensionRegex;
    private IVirtualFileSystemWrapper _virtualFileSystemWrapper;
    private FileExtensionMappingCollection _styleFileExtensionMappings;
    private FileExtensionMappingCollection _scriptFileExtensionMappings;
    private string _virtualPath;
    private string _assetTypeCode;
    private bool _isStylesheet;
    private bool _isScript;
    private string _content;
    private string _includedVirtualPath;
    private IList`1<IItemTransform> _transforms;
    [CompilerGeneratedAttribute]
private IList`1<string> <VirtualPathDependencies>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IAsset> <OriginalAssets>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Combined>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Minified>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RelativePathsResolved>k__BackingField;
    public string VirtualPath { get; public set; }
    public string Url { get; }
    public IList`1<string> VirtualPathDependencies { get; public set; }
    public IList`1<IAsset> OriginalAssets { get; public set; }
    public string AssetTypeCode { get; }
    public bool Combined { get; public set; }
    public bool Minified { get; public set; }
    public bool RelativePathsResolved { get; public set; }
    public string Content { get; public set; }
    public bool IsStylesheet { get; }
    public bool IsScript { get; }
    public Asset(string virtualPath);
    public Asset(string virtualPath, IVirtualFileSystemWrapper virtualFileSystemWrapper);
    public Asset(string virtualPath, BundleFile bundleFile);
    public Asset(string virtualPath, BundleFile bundleFile, IVirtualFileSystemWrapper virtualFileSystemWrapper);
    public Asset(string virtualPath, BundleFile bundleFile, IVirtualFileSystemWrapper virtualFileSystemWrapper, FileExtensionMappingCollection styleFileExtensionMappings, FileExtensionMappingCollection scriptFileExtensionMappings);
    private static Asset();
    public sealed virtual string get_VirtualPath();
    public sealed virtual void set_VirtualPath(string value);
    public sealed virtual string get_Url();
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<string> get_VirtualPathDependencies();
    [CompilerGeneratedAttribute]
public sealed virtual void set_VirtualPathDependencies(IList`1<string> value);
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<IAsset> get_OriginalAssets();
    [CompilerGeneratedAttribute]
public sealed virtual void set_OriginalAssets(IList`1<IAsset> value);
    public sealed virtual string get_AssetTypeCode();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Combined();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Combined(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Minified();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Minified(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_RelativePathsResolved();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RelativePathsResolved(bool value);
    public sealed virtual string get_Content();
    public sealed virtual void set_Content(string value);
    public sealed virtual bool get_IsStylesheet();
    public sealed virtual bool get_IsScript();
    private string ApplyTransformsToContent(string content);
    public static bool IsCssFileWithMinExtension(string assetVirtualPath);
    public static bool IsJsFileWithDebugExtension(string assetVirtualPath);
    public static bool IsJsFileWithMinExtension(string assetVirtualPath);
    public static string RemoveAdditionalCssFileExtension(string assetVirtualPath);
    public static string RemoveAdditionalJsFileExtension(string assetVirtualPath);
}
public abstract class BundleTransformer.Core.Assets.AssetContextBase : object {
    protected AssetSettingsBase _assetConfig;
    protected Dictionary`2<string, ITranslator> _translatorsPool;
    protected object _translatorsPoolSynchronizer;
    protected Dictionary`2<string, IPostProcessor> _postProcessorsPool;
    protected object _postProcessorsPoolSynchronizer;
    protected Dictionary`2<string, IMinifier> _minifiersPool;
    protected object _minifiersPoolSynchronizer;
    protected FileExtensionMappingCollection _fileExtensionMappings;
    protected string OutputCodeType { get; }
    public FileExtensionMappingCollection FileExtensionMappings { get; }
    protected AssetContextBase(AssetSettingsBase assetConfig);
    protected abstract virtual string get_OutputCodeType();
    public sealed virtual FileExtensionMappingCollection get_FileExtensionMappings();
    private FileExtensionMappingCollection GetFileExtensionMappings();
    public abstract virtual IBundleTransform GetDefaultTransformInstance();
    public sealed virtual ITranslator GetTranslatorInstance(string translatorName);
    public sealed virtual IPostProcessor GetPostProcessorInstance(string postProcessorName);
    public sealed virtual IMinifier GetMinifierInstance(string minifierName);
    public sealed virtual IList`1<ITranslator> GetDefaultTranslatorInstances();
    public sealed virtual IList`1<IPostProcessor> GetDefaultPostProcessorInstances();
    public sealed virtual IMinifier GetDefaultMinifierInstance();
}
public class BundleTransformer.Core.Assets.Dependency : object {
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Content>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsObservable>k__BackingField;
    public string Url { get; private set; }
    public string Content { get; public set; }
    public bool IsObservable { get; public set; }
    public Dependency(string url);
    public Dependency(string url, string content);
    public Dependency(string url, string content, bool isObservable);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
private void set_Url(string value);
    [CompilerGeneratedAttribute]
public string get_Content();
    [CompilerGeneratedAttribute]
public void set_Content(string value);
    [CompilerGeneratedAttribute]
public bool get_IsObservable();
    [CompilerGeneratedAttribute]
public void set_IsObservable(bool value);
}
public class BundleTransformer.Core.Assets.DependencyCollection : List`1<Dependency> {
    public bool ContainsUrl(string url);
    public Dependency GetByUrl(string url);
}
public class BundleTransformer.Core.Assets.FileExtensionMapping : object {
    [CompilerGeneratedAttribute]
private string <FileExtension>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssetTypeCode>k__BackingField;
    public string FileExtension { get; private set; }
    public string AssetTypeCode { get; private set; }
    public FileExtensionMapping(string fileExtension, string assetTypeCode);
    [CompilerGeneratedAttribute]
public string get_FileExtension();
    [CompilerGeneratedAttribute]
private void set_FileExtension(string value);
    [CompilerGeneratedAttribute]
public string get_AssetTypeCode();
    [CompilerGeneratedAttribute]
private void set_AssetTypeCode(string value);
}
[DefaultMemberAttribute("Item")]
public class BundleTransformer.Core.Assets.FileExtensionMappingCollection : object {
    private Dictionary`2<string, string> _entries;
    public string Item { get; public set; }
    public ICollection`1<string> FileExtensions { get; }
    public ICollection`1<string> AssetTypeCodes { get; }
    public int Count { get; }
    public string get_Item(string fileExtension);
    public void set_Item(string fileExtension, string value);
    public ICollection`1<string> get_FileExtensions();
    public ICollection`1<string> get_AssetTypeCodes();
    public int get_Count();
    public sealed virtual IEnumerator`1<FileExtensionMapping> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public bool ContainsFileExtension(string fileExtension);
    public bool ContainsAssetTypeCode(string assetTypeCode);
    public bool Contains(FileExtensionMapping mapping);
    private bool InnerContainsFileExtension(string fileExtension);
    public string GetAssetTypeCodeByFilePath(string filePath);
    public void Add(string fileExtension, string assetTypeCode);
    public void Add(FileExtensionMapping mapping);
    private void InnerAdd(string fileExtension, string assetTypeCode);
    public bool Remove(string fileExtension);
    public bool Remove(FileExtensionMapping mapping);
    private bool InnerRemove(string fileExtension);
    public void Clear();
    private static string ProcessFileExtension(string fileExtension);
    private static string ProcessAssetTypeCode(string assetTypeCode);
}
public interface BundleTransformer.Core.Assets.IAsset {
    public string VirtualPath { get; public set; }
    public string Url { get; }
    public IList`1<IAsset> OriginalAssets { get; public set; }
    public IList`1<string> VirtualPathDependencies { get; public set; }
    public string AssetTypeCode { get; }
    public bool Combined { get; public set; }
    public bool Minified { get; public set; }
    public bool RelativePathsResolved { get; public set; }
    public string Content { get; public set; }
    public bool IsStylesheet { get; }
    public bool IsScript { get; }
    public abstract virtual string get_VirtualPath();
    public abstract virtual void set_VirtualPath(string value);
    public abstract virtual string get_Url();
    public abstract virtual IList`1<IAsset> get_OriginalAssets();
    public abstract virtual void set_OriginalAssets(IList`1<IAsset> value);
    public abstract virtual IList`1<string> get_VirtualPathDependencies();
    public abstract virtual void set_VirtualPathDependencies(IList`1<string> value);
    public abstract virtual string get_AssetTypeCode();
    public abstract virtual bool get_Combined();
    public abstract virtual void set_Combined(bool value);
    public abstract virtual bool get_Minified();
    public abstract virtual void set_Minified(bool value);
    public abstract virtual bool get_RelativePathsResolved();
    public abstract virtual void set_RelativePathsResolved(bool value);
    public abstract virtual string get_Content();
    public abstract virtual void set_Content(string value);
    public abstract virtual bool get_IsStylesheet();
    public abstract virtual bool get_IsScript();
}
public interface BundleTransformer.Core.Assets.IAssetContext {
    public FileExtensionMappingCollection FileExtensionMappings { get; }
    public abstract virtual FileExtensionMappingCollection get_FileExtensionMappings();
    public abstract virtual IBundleTransform GetDefaultTransformInstance();
    public abstract virtual ITranslator GetTranslatorInstance(string translatorName);
    public abstract virtual IPostProcessor GetPostProcessorInstance(string postProcessorName);
    public abstract virtual IMinifier GetMinifierInstance(string minifierName);
    public abstract virtual IList`1<ITranslator> GetDefaultTranslatorInstances();
    public abstract virtual IList`1<IPostProcessor> GetDefaultPostProcessorInstances();
    public abstract virtual IMinifier GetDefaultMinifierInstance();
}
public class BundleTransformer.Core.Assets.ScriptContext : AssetContextBase {
    private Lazy`1<ScriptTransformer> _transformer;
    protected string OutputCodeType { get; }
    public ScriptContext(ScriptSettings scriptConfig);
    protected virtual string get_OutputCodeType();
    public virtual IBundleTransform GetDefaultTransformInstance();
}
public class BundleTransformer.Core.Assets.StyleContext : AssetContextBase {
    private Lazy`1<StyleTransformer> _transformer;
    protected string OutputCodeType { get; }
    public StyleContext(StyleSettings styleConfig);
    protected virtual string get_OutputCodeType();
    public virtual IBundleTransform GetDefaultTransformInstance();
}
public class BundleTransformer.Core.Builders.NullBuilder : object {
    public sealed virtual string BuildBundleContent(Bundle bundle, BundleContext context, IEnumerable`1<BundleFile> files);
}
public class BundleTransformer.Core.Bundles.CustomScriptBundle : Bundle {
    public CustomScriptBundle(string virtualPath);
    public CustomScriptBundle(string virtualPath, string cdnPath);
}
public class BundleTransformer.Core.Bundles.CustomStyleBundle : Bundle {
    public CustomStyleBundle(string virtualPath);
    public CustomStyleBundle(string virtualPath, string cdnPath);
}
public class BundleTransformer.Core.BundleTransformerContext : object {
    private static Lazy`1<BundleTransformerContext> _default;
    private static IBundleTransformerContext _current;
    [CompilerGeneratedAttribute]
private IConfigurationContext <Configuration>k__BackingField;
    [CompilerGeneratedAttribute]
private IFileSystemContext <FileSystem>k__BackingField;
    [CompilerGeneratedAttribute]
private IAssetContext <Styles>k__BackingField;
    [CompilerGeneratedAttribute]
private IAssetContext <Scripts>k__BackingField;
    public static IBundleTransformerContext Current { get; public set; }
    public IConfigurationContext Configuration { get; private set; }
    public IFileSystemContext FileSystem { get; private set; }
    public IAssetContext Styles { get; private set; }
    public IAssetContext Scripts { get; private set; }
    public bool IsDebugMode { get; }
    private static BundleTransformerContext();
    public static IBundleTransformerContext get_Current();
    public static void set_Current(IBundleTransformerContext value);
    [CompilerGeneratedAttribute]
public sealed virtual IConfigurationContext get_Configuration();
    [CompilerGeneratedAttribute]
private void set_Configuration(IConfigurationContext value);
    [CompilerGeneratedAttribute]
public sealed virtual IFileSystemContext get_FileSystem();
    [CompilerGeneratedAttribute]
private void set_FileSystem(IFileSystemContext value);
    [CompilerGeneratedAttribute]
public sealed virtual IAssetContext get_Styles();
    [CompilerGeneratedAttribute]
private void set_Styles(IAssetContext value);
    [CompilerGeneratedAttribute]
public sealed virtual IAssetContext get_Scripts();
    [CompilerGeneratedAttribute]
private void set_Scripts(IAssetContext value);
    public sealed virtual bool get_IsDebugMode();
}
public abstract class BundleTransformer.Core.Combiners.CombinerBase : object {
    [CompilerGeneratedAttribute]
private bool <IsDebugMode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableTracing>k__BackingField;
    public bool IsDebugMode { get; public set; }
    public bool EnableTracing { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsDebugMode();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsDebugMode(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_EnableTracing();
    [CompilerGeneratedAttribute]
public sealed virtual void set_EnableTracing(bool value);
    public sealed virtual IAsset Combine(IList`1<IAsset> assets, string bundleVirtualPath);
    protected abstract virtual string GenerateCombinedAssetVirtualPath(string bundleVirtualPath);
    protected abstract virtual string CombineAssetContent(IList`1<IAsset> assets);
    protected IList`1<string> CombineAssetVirtualPathDependencies(IList`1<IAsset> assets);
}
public interface BundleTransformer.Core.Combiners.ICombiner {
    public bool IsDebugMode { get; public set; }
    public bool EnableTracing { get; public set; }
    public abstract virtual bool get_IsDebugMode();
    public abstract virtual void set_IsDebugMode(bool value);
    public abstract virtual bool get_EnableTracing();
    public abstract virtual void set_EnableTracing(bool value);
    public abstract virtual IAsset Combine(IList`1<IAsset> assets, string bundleVirtualPath);
}
public class BundleTransformer.Core.Combiners.ScriptCombiner : CombinerBase {
    protected virtual string GenerateCombinedAssetVirtualPath(string bundleVirtualPath);
    protected virtual string CombineAssetContent(IList`1<IAsset> assets);
}
public class BundleTransformer.Core.Combiners.StyleCombiner : CombinerBase {
    private static Regex _cssImportRuleRegex;
    private static StyleCombiner();
    protected virtual string GenerateCombinedAssetVirtualPath(string bundleVirtualPath);
    protected virtual string CombineAssetContent(IList`1<IAsset> assets);
    private static string EjectCssCharsetAndImports(string content, String& topCharset, IList`1<string> imports);
    private static void ProcessOtherContent(StringBuilder contentBuilder, string assetContent, Int32& currentPosition, int nextPosition);
}
public static class BundleTransformer.Core.CommonRegExps : object {
    public static Regex CssMultilineCommentRegex;
    public static Regex CssCharsetRuleRegex;
    public static Regex CssUrlRuleRegex;
    private static CommonRegExps();
}
public class BundleTransformer.Core.Configuration.AssetHandlerSettings : ConfigurationElement {
    [ConfigurationPropertyAttribute("disableServerCache")]
public bool DisableServerCache { get; public set; }
    [ConfigurationPropertyAttribute("serverCacheDurationInMinutes")]
[IntegerValidatorAttribute]
public int ServerCacheDurationInMinutes { get; public set; }
    [ConfigurationPropertyAttribute("disableClientCache")]
public bool DisableClientCache { get; public set; }
    public bool get_DisableServerCache();
    public void set_DisableServerCache(bool value);
    public int get_ServerCacheDurationInMinutes();
    public void set_ServerCacheDurationInMinutes(int value);
    public bool get_DisableClientCache();
    public void set_DisableClientCache(bool value);
}
public abstract class BundleTransformer.Core.Configuration.AssetProcessorRegistrationBase : ConfigurationElement {
    [ConfigurationPropertyAttribute("name")]
public string Name { get; public set; }
    [ConfigurationPropertyAttribute("type")]
public string Type { get; public set; }
    public string get_Name();
    public void set_Name(string value);
    public string get_Type();
    public void set_Type(string value);
}
public abstract class BundleTransformer.Core.Configuration.AssetSettingsBase : ConfigurationElement {
    [ConfigurationPropertyAttribute("defaultMinifier")]
public string DefaultMinifier { get; public set; }
    public string DefaultPostProcessors { get; public set; }
    [ConfigurationPropertyAttribute("usePreMinifiedFiles")]
public bool UsePreMinifiedFiles { get; public set; }
    [ConfigurationPropertyAttribute("combineFilesBeforeMinification")]
public bool CombineFilesBeforeMinification { get; public set; }
    [ConfigurationPropertyAttribute("translators")]
public TranslatorRegistrationCollection Translators { get; }
    [ConfigurationPropertyAttribute("postProcessors")]
public PostProcessorRegistrationCollection PostProcessors { get; }
    [ConfigurationPropertyAttribute("minifiers")]
public MinifierRegistrationCollection Minifiers { get; }
    [ConfigurationPropertyAttribute("fileExtensions")]
public FileExtensionRegistrationCollection FileExtensions { get; }
    public string get_DefaultMinifier();
    public void set_DefaultMinifier(string value);
    public abstract virtual string get_DefaultPostProcessors();
    public abstract virtual void set_DefaultPostProcessors(string value);
    public bool get_UsePreMinifiedFiles();
    public void set_UsePreMinifiedFiles(bool value);
    public bool get_CombineFilesBeforeMinification();
    public void set_CombineFilesBeforeMinification(bool value);
    public TranslatorRegistrationCollection get_Translators();
    public PostProcessorRegistrationCollection get_PostProcessors();
    public MinifierRegistrationCollection get_Minifiers();
    public FileExtensionRegistrationCollection get_FileExtensions();
}
public class BundleTransformer.Core.Configuration.ConfigurationContext : object {
    private Lazy`1<CoreSettings> _coreConfig;
    public sealed virtual CoreSettings GetCoreSettings();
}
public class BundleTransformer.Core.Configuration.CoreSettings : ConfigurationSection {
    [ConfigurationPropertyAttribute("enableTracing")]
public bool EnableTracing { get; public set; }
    [ConfigurationPropertyAttribute("jsFilesWithMicrosoftStyleExtensions")]
public string JsFilesWithMicrosoftStyleExtensions { get; public set; }
    [ConfigurationPropertyAttribute("css")]
public StyleSettings Styles { get; }
    [ConfigurationPropertyAttribute("js")]
public ScriptSettings Scripts { get; }
    [ConfigurationPropertyAttribute("assetHandler")]
public AssetHandlerSettings AssetHandler { get; }
    public bool get_EnableTracing();
    public void set_EnableTracing(bool value);
    public string get_JsFilesWithMicrosoftStyleExtensions();
    public void set_JsFilesWithMicrosoftStyleExtensions(string value);
    public StyleSettings get_Styles();
    public ScriptSettings get_Scripts();
    public AssetHandlerSettings get_AssetHandler();
}
public class BundleTransformer.Core.Configuration.FileExtensionRegistration : ConfigurationElement {
    [ConfigurationPropertyAttribute("fileExtension")]
public string FileExtension { get; public set; }
    [ConfigurationPropertyAttribute("assetTypeCode")]
public string AssetTypeCode { get; public set; }
    public string get_FileExtension();
    public void set_FileExtension(string value);
    public string get_AssetTypeCode();
    public void set_AssetTypeCode(string value);
}
[DefaultMemberAttribute("Item")]
[ConfigurationCollectionAttribute("BundleTransformer.Core.Configuration.FileExtensionRegistration")]
public class BundleTransformer.Core.Configuration.FileExtensionRegistrationCollection : ConfigurationElementCollection {
    public FileExtensionRegistration Item { get; }
    protected virtual ConfigurationElement CreateNewElement();
    protected virtual object GetElementKey(ConfigurationElement element);
    public FileExtensionRegistration get_Item(string name);
}
public interface BundleTransformer.Core.Configuration.IConfigurationContext {
    public abstract virtual CoreSettings GetCoreSettings();
}
public class BundleTransformer.Core.Configuration.JsEngineSettings : ConfigurationElement {
    [ConfigurationPropertyAttribute("name")]
public string Name { get; public set; }
    public string get_Name();
    public void set_Name(string value);
}
public class BundleTransformer.Core.Configuration.MinifierRegistration : AssetProcessorRegistrationBase {
}
[DefaultMemberAttribute("Item")]
[ConfigurationCollectionAttribute("BundleTransformer.Core.Configuration.MinifierRegistration")]
public class BundleTransformer.Core.Configuration.MinifierRegistrationCollection : ConfigurationElementCollection {
    public MinifierRegistration Item { get; }
    protected virtual ConfigurationElement CreateNewElement();
    protected virtual object GetElementKey(ConfigurationElement element);
    public MinifierRegistration get_Item(string name);
}
public class BundleTransformer.Core.Configuration.PostProcessorRegistration : AssetProcessorRegistrationBase {
    [ConfigurationPropertyAttribute("useInDebugMode")]
public bool UseInDebugMode { get; public set; }
    public bool get_UseInDebugMode();
    public void set_UseInDebugMode(bool value);
}
[DefaultMemberAttribute("Item")]
[ConfigurationCollectionAttribute("BundleTransformer.Core.Configuration.PostProcessorRegistration")]
public class BundleTransformer.Core.Configuration.PostProcessorRegistrationCollection : ConfigurationElementCollection {
    public PostProcessorRegistration Item { get; }
    protected virtual ConfigurationElement CreateNewElement();
    protected virtual object GetElementKey(ConfigurationElement element);
    public PostProcessorRegistration get_Item(string name);
}
public class BundleTransformer.Core.Configuration.ScriptSettings : AssetSettingsBase {
    [ConfigurationPropertyAttribute("defaultPostProcessors")]
public string DefaultPostProcessors { get; public set; }
    public virtual string get_DefaultPostProcessors();
    public virtual void set_DefaultPostProcessors(string value);
}
public class BundleTransformer.Core.Configuration.StyleSettings : AssetSettingsBase {
    [ConfigurationPropertyAttribute("defaultPostProcessors")]
public string DefaultPostProcessors { get; public set; }
    public virtual string get_DefaultPostProcessors();
    public virtual void set_DefaultPostProcessors(string value);
}
public class BundleTransformer.Core.Configuration.TranslatorRegistration : AssetProcessorRegistrationBase {
    [ConfigurationPropertyAttribute("enabled")]
public bool Enabled { get; public set; }
    public bool get_Enabled();
    public void set_Enabled(bool value);
}
[DefaultMemberAttribute("Item")]
[ConfigurationCollectionAttribute("BundleTransformer.Core.Configuration.TranslatorRegistration")]
public class BundleTransformer.Core.Configuration.TranslatorRegistrationCollection : ConfigurationElementCollection {
    public TranslatorRegistration Item { get; }
    protected virtual ConfigurationElement CreateNewElement();
    protected virtual object GetElementKey(ConfigurationElement element);
    public TranslatorRegistration get_Item(string name);
}
public static class BundleTransformer.Core.Constants.AssetTypeCode : object {
    public static string Unknown;
    public static string Css;
    public static string JavaScript;
    private static AssetTypeCode();
}
public static class BundleTransformer.Core.Constants.Common : object {
    public static string TempFilesDirectoryPath;
    public static string ProcessedAssetContentCacheItemKeyPattern;
    public static string BundleVirtualPathQueryStringParameterName;
    private static Common();
}
public static class BundleTransformer.Core.Constants.ContentType : object {
    public static string Css;
    public static string Js;
    private static ContentType();
}
public static class BundleTransformer.Core.Constants.FileExtension : object {
    public static string Css;
    public static string JavaScript;
    private static FileExtension();
}
internal static class BundleTransformer.Core.Constants.MinifierName : object {
    public static string NullMinifier;
}
internal static class BundleTransformer.Core.Constants.PostProcessorName : object {
    public static string NullPostProcessor;
    public static string UrlRewritingCssPostProcessor;
}
internal static class BundleTransformer.Core.Constants.TranslatorName : object {
    public static string NullTranslator;
}
public class BundleTransformer.Core.CssNodeMatch : AssetNodeMatchBase {
    [CompilerGeneratedAttribute]
private CssNodeType <NodeType>k__BackingField;
    public CssNodeType NodeType { get; private set; }
    public CssNodeMatch(int position, int length, CssNodeType nodeType, Match match);
    [CompilerGeneratedAttribute]
public CssNodeType get_NodeType();
    [CompilerGeneratedAttribute]
private void set_NodeType(CssNodeType value);
}
public enum BundleTransformer.Core.CssNodeType : Enum {
    public int value__;
    public static CssNodeType Unknown;
    public static CssNodeType CharsetRule;
    public static CssNodeType ImportRule;
    public static CssNodeType UrlRule;
    public static CssNodeType MultilineComment;
}
public class BundleTransformer.Core.EmptyValueException : Exception {
    public EmptyValueException(string message);
    public EmptyValueException(string message, Exception innerException);
}
public class BundleTransformer.Core.FileSystem.CommonRelativePathResolver : object {
    private IVirtualFileSystemWrapper _virtualFileSystemWrapper;
    public CommonRelativePathResolver(IVirtualFileSystemWrapper virtualFileSystemWrapper);
    public sealed virtual string ResolveRelativePath(string basePath, string relativePath);
    private bool TryConvertToAbsolutePath(string relativePath, String& absolutePath);
}
public class BundleTransformer.Core.FileSystem.FileSystemContext : object {
    private Lazy`1<VirtualFileSystemWrapper> _virtualFileSystemWrapper;
    private Lazy`1<CommonRelativePathResolver> _commonRelativePathResolver;
    public sealed virtual IVirtualFileSystemWrapper GetVirtualFileSystemWrapper();
    public sealed virtual IRelativePathResolver GetCommonRelativePathResolver();
}
public interface BundleTransformer.Core.FileSystem.IFileSystemContext {
    public abstract virtual IVirtualFileSystemWrapper GetVirtualFileSystemWrapper();
    public abstract virtual IRelativePathResolver GetCommonRelativePathResolver();
}
public interface BundleTransformer.Core.FileSystem.IRelativePathResolver {
    public abstract virtual string ResolveRelativePath(string basePath, string relativePath);
}
public interface BundleTransformer.Core.FileSystem.IVirtualFileSystemWrapper {
    public abstract virtual bool FileExists(string virtualPath);
    public abstract virtual string GetFileTextContent(string virtualPath);
    public abstract virtual Byte[] GetFileBinaryContent(string virtualPath);
    public abstract virtual Stream GetFileStream(string virtualPath);
    public abstract virtual string ToAbsolutePath(string virtualPath);
    public abstract virtual string GetCacheKey(string virtualPath);
    public abstract virtual CacheDependency GetCacheDependency(string virtualPath, String[] virtualPathDependencies, DateTime utcStart);
    public abstract virtual bool IsTextFile(string virtualPath, int sampleSize, Encoding& encoding);
}
public class BundleTransformer.Core.FileSystem.VirtualFileSystemWrapper : object {
    public sealed virtual bool FileExists(string virtualPath);
    public sealed virtual string GetFileTextContent(string virtualPath);
    public sealed virtual Byte[] GetFileBinaryContent(string virtualPath);
    public sealed virtual Stream GetFileStream(string virtualPath);
    public sealed virtual string ToAbsolutePath(string virtualPath);
    public sealed virtual string GetCacheKey(string virtualPath);
    public sealed virtual CacheDependency GetCacheDependency(string virtualPath, String[] virtualPathDependencies, DateTime utcStart);
    public sealed virtual bool IsTextFile(string virtualPath, int sampleSize, Encoding& encoding);
}
public class BundleTransformer.Core.Filters.CssFileExtensionsFilter : FileExtensionsFilterBase {
    private static String[] _debugCssExtensions;
    private static String[] _releaseCssExtensions;
    public CssFileExtensionsFilter(IVirtualFileSystemWrapper virtualFileSystemWrapper);
    private static CssFileExtensionsFilter();
    public virtual IList`1<IAsset> Transform(IList`1<IAsset> assets);
    protected virtual string GetAppropriateAssetFilePath(string assetVirtualPath, Boolean& isMinified);
}
public abstract class BundleTransformer.Core.Filters.FileExtensionsFilterBase : object {
    private IVirtualFileSystemWrapper _virtualFileSystemWrapper;
    [CompilerGeneratedAttribute]
private bool <IsDebugMode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UsePreMinifiedFiles>k__BackingField;
    public bool IsDebugMode { get; public set; }
    public bool UsePreMinifiedFiles { get; public set; }
    public bool UsageOfPreMinifiedFilesEnabled { get; }
    protected FileExtensionsFilterBase(IVirtualFileSystemWrapper virtualFileSystemWrapper);
    [CompilerGeneratedAttribute]
public bool get_IsDebugMode();
    [CompilerGeneratedAttribute]
public void set_IsDebugMode(bool value);
    [CompilerGeneratedAttribute]
public bool get_UsePreMinifiedFiles();
    [CompilerGeneratedAttribute]
public void set_UsePreMinifiedFiles(bool value);
    public bool get_UsageOfPreMinifiedFilesEnabled();
    public abstract virtual IList`1<IAsset> Transform(IList`1<IAsset> assets);
    protected abstract virtual string GetAppropriateAssetFilePath(string assetVirtualPath, Boolean& isMinified);
    protected string ProbeAssetFilePath(string assetVirtualPath, String[] extensions);
}
public interface BundleTransformer.Core.Filters.IFilter {
    public abstract virtual IList`1<IAsset> Transform(IList`1<IAsset> assets);
}
public class BundleTransformer.Core.Filters.JsFileExtensionsFilter : FileExtensionsFilterBase {
    private static string VERSION_NUMBER_PLACEHOLDER;
    private List`1<Regex> _jsFilesWithMsStyleExtensionsRegExps;
    private static String[] _debugJsExtensionsForStandardStyle;
    private static String[] _releaseJsExtensionsForStandardStyle;
    private static String[] _debugJsExtensionsForMicrosoftStyle;
    private static String[] _releaseJsExtensionsForMicrosoftStyle;
    public JsFileExtensionsFilter(String[] jsFilesWithMsStyleExtensions);
    public JsFileExtensionsFilter(String[] jsFilesWithMsStyleExtensions, IVirtualFileSystemWrapper virtualFileSystemWrapper);
    private static JsFileExtensionsFilter();
    public virtual IList`1<IAsset> Transform(IList`1<IAsset> assets);
    protected virtual string GetAppropriateAssetFilePath(string assetVirtualPath, Boolean& isMinified);
    private bool IsJsFileWithMicrosoftStyleExtension(string assetVirtualPath);
}
public class BundleTransformer.Core.Filters.ScriptDuplicateAssetsFilter : object {
    public sealed virtual IList`1<IAsset> Transform(IList`1<IAsset> assets);
}
public class BundleTransformer.Core.Filters.ScriptUnnecessaryAssetsFilter : UnnecessaryAssetsFilterBase {
    public ScriptUnnecessaryAssetsFilter(String[] ignorePatterns);
    public virtual IList`1<IAsset> Transform(IList`1<IAsset> assets);
}
public class BundleTransformer.Core.Filters.StyleDuplicateAssetsFilter : object {
    public sealed virtual IList`1<IAsset> Transform(IList`1<IAsset> assets);
}
public class BundleTransformer.Core.Filters.StyleUnnecessaryAssetsFilter : UnnecessaryAssetsFilterBase {
    public StyleUnnecessaryAssetsFilter(String[] ignorePatterns);
    public virtual IList`1<IAsset> Transform(IList`1<IAsset> assets);
}
public abstract class BundleTransformer.Core.Filters.UnnecessaryAssetsFilterBase : object {
    protected List`1<Regex> _ignoreRegExps;
    protected UnnecessaryAssetsFilterBase(String[] ignorePatterns);
    public abstract virtual IList`1<IAsset> Transform(IList`1<IAsset> assets);
    protected bool IsUnnecessaryAsset(string assetVirtualPath);
}
public static class BundleTransformer.Core.Helpers.UrlHelpers : object {
    private static Regex _protocolRegExp;
    private static Regex _multipleForwardSlashesRegex;
    private static UrlHelpers();
    public static bool StartsWithProtocol(string url);
    public static bool StartsWithDataUriScheme(string url);
    public static bool StartsWithHashMark(string url);
    public static string ProcessBackSlashes(string url);
    public static string RemoveFirstSlash(string url);
    public static string RemoveLastSlash(string url);
    private static int FindLastDirectorySeparator(string url);
    public static string GetDirectoryName(string url);
    public static string GetFileName(string url);
    public static string Normalize(string url);
    public static string Combine(string baseUrl, string relativeUrl);
    public static string EscapeLongDataString(string stringToEscape);
}
public abstract class BundleTransformer.Core.HttpHandlers.AssetHandlerBase : object {
    protected HttpContextBase _context;
    protected Cache _cache;
    private static object _cacheSynchronizer;
    private IVirtualFileSystemWrapper _virtualFileSystemWrapper;
    private AssetHandlerSettings _assetHandlerConfig;
    private static Lazy`1<IHttpHandler> _staticFileHandler;
    protected string ContentType { get; }
    protected bool IsStaticAsset { get; }
    public bool IsReusable { get; }
    protected AssetHandlerBase(Cache cache, IVirtualFileSystemWrapper virtualFileSystemWrapper, AssetHandlerSettings assetHandlerConfig);
    private static AssetHandlerBase();
    protected abstract virtual string get_ContentType();
    protected abstract virtual bool get_IsStaticAsset();
    public sealed virtual bool get_IsReusable();
    public sealed virtual void ProcessRequest(HttpContext context);
    public void ProcessRequest(HttpContextBase context);
    private static void ProcessStaticAssetRequest(HttpContextBase context);
    private static IHttpHandler CreateStaticFileHandlerInstance();
    protected virtual string GetCacheKey(string assetVirtualPath, string bundleVirtualPath);
    private string GetProcessedAssetContent(string assetVirtualPath, string bundleVirtualPath);
    private static string GenerateAssetETag(string assetContent);
    private static SHA256 CreateHashAlgorithm();
    private static bool IsETagHeaderChanged(HttpRequestBase request, string eTag);
    private IAsset ProcessAsset(string assetVirtualPath, string bundleVirtualPath);
    protected virtual Bundle GetBundleByVirtualPath(string virtualPath);
    protected virtual BundleFile GetBundleFileByVirtualPath(Bundle bundle, string virtualPath);
    protected virtual string RemoveAdditionalFileExtension(string assetPath);
    protected abstract virtual ITransformer GetTransformer(Bundle bundle);
    protected virtual IAsset TranslateAsset(IAsset asset, ITransformer transformer, bool isDebugMode);
    protected IAsset InnerTranslateAsset(string translatorName, IAsset asset, ITransformer transformer, bool isDebugMode);
    protected abstract virtual T GetTranslatorByName(string translatorName);
    protected T GetTranslatorByType(ITransformer transformer);
    protected virtual IAsset PostProcessAsset(IAsset asset, ITransformer transformer);
}
public class BundleTransformer.Core.HttpHandlers.CssAssetHandler : StyleAssetHandlerBase {
    protected bool IsStaticAsset { get; }
    public CssAssetHandler(Cache cache, IVirtualFileSystemWrapper virtualFileSystemWrapper, AssetHandlerSettings assetHandlerConfig);
    protected virtual bool get_IsStaticAsset();
    protected virtual string RemoveAdditionalFileExtension(string assetPath);
}
public class BundleTransformer.Core.HttpHandlers.JsAssetHandler : ScriptAssetHandlerBase {
    protected bool IsStaticAsset { get; }
    public JsAssetHandler(Cache cache, IVirtualFileSystemWrapper virtualFileSystemWrapper, AssetHandlerSettings assetHandlerConfig);
    protected virtual bool get_IsStaticAsset();
    protected virtual string RemoveAdditionalFileExtension(string assetPath);
}
public abstract class BundleTransformer.Core.HttpHandlers.ScriptAssetHandlerBase : AssetHandlerBase {
    protected string ContentType { get; }
    protected ScriptAssetHandlerBase(Cache cache, IVirtualFileSystemWrapper virtualFileSystemWrapper, AssetHandlerSettings assetHandlerConfig);
    protected virtual string get_ContentType();
    protected virtual ITransformer GetTransformer(Bundle bundle);
    protected virtual T GetTranslatorByName(string translatorName);
}
public abstract class BundleTransformer.Core.HttpHandlers.StyleAssetHandlerBase : AssetHandlerBase {
    protected string ContentType { get; }
    protected StyleAssetHandlerBase(Cache cache, IVirtualFileSystemWrapper virtualFileSystemWrapper, AssetHandlerSettings assetHandlerConfig);
    protected virtual string get_ContentType();
    protected virtual ITransformer GetTransformer(Bundle bundle);
    protected virtual T GetTranslatorByName(string translatorName);
}
public interface BundleTransformer.Core.IBundleTransformerContext {
    public IConfigurationContext Configuration { get; }
    public IFileSystemContext FileSystem { get; }
    public IAssetContext Styles { get; }
    public IAssetContext Scripts { get; }
    public bool IsDebugMode { get; }
    public abstract virtual IConfigurationContext get_Configuration();
    public abstract virtual IFileSystemContext get_FileSystem();
    public abstract virtual IAssetContext get_Styles();
    public abstract virtual IAssetContext get_Scripts();
    public abstract virtual bool get_IsDebugMode();
}
public class BundleTransformer.Core.Minifiers.AssetMinificationException : Exception {
    public AssetMinificationException(string message);
    public AssetMinificationException(string message, Exception innerException);
}
public interface BundleTransformer.Core.Minifiers.IMinifier {
    public abstract virtual IAsset Minify(IAsset asset);
    public abstract virtual IList`1<IAsset> Minify(IList`1<IAsset> assets);
}
public class BundleTransformer.Core.Minifiers.MinifierNotFoundException : Exception {
    public MinifierNotFoundException(string message);
    public MinifierNotFoundException(string message, Exception innerException);
}
public class BundleTransformer.Core.Minifiers.NullMinifier : object {
    public sealed virtual IAsset Minify(IAsset asset);
    public sealed virtual IList`1<IAsset> Minify(IList`1<IAsset> assets);
}
public class BundleTransformer.Core.Orderers.NullOrderer : object {
    public sealed virtual IEnumerable`1<BundleFile> OrderFiles(BundleContext context, IEnumerable`1<BundleFile> files);
}
public class BundleTransformer.Core.PostProcessors.AssetPostProcessingException : Exception {
    public AssetPostProcessingException(string message);
    public AssetPostProcessingException(string message, Exception innerException);
}
public interface BundleTransformer.Core.PostProcessors.IPostProcessor {
    public bool UseInDebugMode { get; public set; }
    public abstract virtual bool get_UseInDebugMode();
    public abstract virtual void set_UseInDebugMode(bool value);
    public abstract virtual IAsset PostProcess(IAsset asset);
    public abstract virtual IList`1<IAsset> PostProcess(IList`1<IAsset> assets);
}
public class BundleTransformer.Core.PostProcessors.NullPostProcessor : PostProcessorBase {
    public virtual IAsset PostProcess(IAsset asset);
    public virtual IList`1<IAsset> PostProcess(IList`1<IAsset> assets);
}
public abstract class BundleTransformer.Core.PostProcessors.PostProcessorBase : object {
    [CompilerGeneratedAttribute]
private bool <UseInDebugMode>k__BackingField;
    public bool UseInDebugMode { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual bool get_UseInDebugMode();
    [CompilerGeneratedAttribute]
public sealed virtual void set_UseInDebugMode(bool value);
    public abstract virtual IAsset PostProcess(IAsset asset);
    public abstract virtual IList`1<IAsset> PostProcess(IList`1<IAsset> assets);
}
public class BundleTransformer.Core.PostProcessors.PostProcessorNotFoundException : Exception {
    public PostProcessorNotFoundException(string message);
    public PostProcessorNotFoundException(string message, Exception innerException);
}
public class BundleTransformer.Core.PostProcessors.UrlRewritingCssPostProcessor : PostProcessorBase {
    private IRelativePathResolver _relativePathResolver;
    private static Regex _cssImportRuleRegex;
    public UrlRewritingCssPostProcessor(IRelativePathResolver relativePathResolver);
    private static UrlRewritingCssPostProcessor();
    public virtual IAsset PostProcess(IAsset asset);
    public virtual IList`1<IAsset> PostProcess(IList`1<IAsset> assets);
    private void InnerPostProcess(IAsset asset);
    public string ResolveAllRelativePaths(string content, string path);
    private string ProcessImportRule(string parentAssetUrl, string assetUrl);
    private string ProcessUrlRule(string parentAssetUrl, string assetUrl, string quote);
    private static void ProcessOtherContent(StringBuilder contentBuilder, string assetContent, Int32& currentPosition, int nextPosition);
}
public class BundleTransformer.Core.Resolvers.CustomBundleResolver : object {
    private BundleCollection _bundles;
    private HttpContextBase _httpContext;
    internal HttpContextBase Context { get; internal set; }
    public CustomBundleResolver(BundleCollection bundles);
    public CustomBundleResolver(BundleCollection bundles, HttpContextBase context);
    internal HttpContextBase get_Context();
    internal void set_Context(HttpContextBase value);
    public sealed virtual bool IsBundleVirtualPath(string virtualPath);
    public sealed virtual IEnumerable`1<string> GetBundleContents(string bundleVirtualPath);
    public sealed virtual string GetBundleUrl(string virtualPath);
    private static BundleResponse GetBundleResponse(Bundle bundle, BundleContext context);
    private static Exception ValidateVirtualPath(string virtualPath, string argumentName);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
public class BundleTransformer.Core.Resources.Strings : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
public static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
public static CultureInfo Culture { get; public set; }
    public static string AssetHandler_BundleFileNotFound { get; }
    public static string AssetHandler_BundleNotFound { get; }
    public static string AssetHandler_DependencyNotFound { get; }
    public static string AssetHandler_TransformerNotFound { get; }
    public static string AssetHandler_TranslatorNotFound { get; }
    public static string AssetHandler_UnknownError { get; }
    public static string Assets_InvalidIgnorePattern { get; }
    public static string Assets_ScriptAssetsContainAssetsWithInvalidTypes { get; }
    public static string Assets_StyleAssetsContainAssetsWithInvalidTypes { get; }
    public static string Common_ArgumentIsEmpty { get; }
    public static string Common_ArgumentIsNull { get; }
    public static string Common_AssemblyNameIsEmpty { get; }
    public static string Common_EnumValueConversionFailed { get; }
    public static string Common_EnumValueToCodeConversionFailed { get; }
    public static string Common_FileNotExist { get; }
    public static string Common_InstanceCreationFailed { get; }
    public static string Common_SeverityLevelToEnumValueConversionFailed { get; }
    public static string Common_TypeNameIsEmpty { get; }
    public static string Common_UnknownError { get; }
    public static string Common_UnknownMimeType { get; }
    public static string Common_ValueIsEmpty { get; }
    public static string Common_ValueIsNull { get; }
    public static string Configuration_DefaultMinifierNotSpecified { get; }
    public static string Configuration_JsEngineNotSpecified { get; }
    public static string Configuration_MinifierNotRegistered { get; }
    public static string Configuration_PostProcessorNotRegistered { get; }
    public static string Configuration_TranslatorNotRegistered { get; }
    public static string ErrorDetails_ColumnNumber { get; }
    public static string ErrorDetails_EndColumn { get; }
    public static string ErrorDetails_EndLine { get; }
    public static string ErrorDetails_ErrorCode { get; }
    public static string ErrorDetails_ErrorType { get; }
    public static string ErrorDetails_File { get; }
    public static string ErrorDetails_HelpKeyword { get; }
    public static string ErrorDetails_LineNumber { get; }
    public static string ErrorDetails_LineSource { get; }
    public static string ErrorDetails_Message { get; }
    public static string ErrorDetails_Name { get; }
    public static string ErrorDetails_ScriptStackTrace { get; }
    public static string ErrorDetails_Severity { get; }
    public static string ErrorDetails_SourceError { get; }
    public static string ErrorDetails_SourceName { get; }
    public static string ErrorDetails_StartColumn { get; }
    public static string ErrorDetails_StartLine { get; }
    public static string ErrorDetails_Subcategory { get; }
    public static string ErrorType_Error { get; }
    public static string ErrorType_Warning { get; }
    public static string FileExtensionMapping_DuplicateFileExtension { get; }
    public static string Minifiers_MinificationFailed { get; }
    public static string Minifiers_MinificationSyntaxError { get; }
    public static string PostProcessors_PostprocessingFailed { get; }
    public static string PostProcessors_PostprocessingSyntaxError { get; }
    public static string Resources_ResourceIsNull { get; }
    public static string Translators_TranslationFailed { get; }
    public static string Translators_TranslationSyntaxError { get; }
    public static string UrlMappings_OnlyAppRelativeUrlAllowed { get; }
    public static ResourceManager get_ResourceManager();
    public static CultureInfo get_Culture();
    public static void set_Culture(CultureInfo value);
    public static string get_AssetHandler_BundleFileNotFound();
    public static string get_AssetHandler_BundleNotFound();
    public static string get_AssetHandler_DependencyNotFound();
    public static string get_AssetHandler_TransformerNotFound();
    public static string get_AssetHandler_TranslatorNotFound();
    public static string get_AssetHandler_UnknownError();
    public static string get_Assets_InvalidIgnorePattern();
    public static string get_Assets_ScriptAssetsContainAssetsWithInvalidTypes();
    public static string get_Assets_StyleAssetsContainAssetsWithInvalidTypes();
    public static string get_Common_ArgumentIsEmpty();
    public static string get_Common_ArgumentIsNull();
    public static string get_Common_AssemblyNameIsEmpty();
    public static string get_Common_EnumValueConversionFailed();
    public static string get_Common_EnumValueToCodeConversionFailed();
    public static string get_Common_FileNotExist();
    public static string get_Common_InstanceCreationFailed();
    public static string get_Common_SeverityLevelToEnumValueConversionFailed();
    public static string get_Common_TypeNameIsEmpty();
    public static string get_Common_UnknownError();
    public static string get_Common_UnknownMimeType();
    public static string get_Common_ValueIsEmpty();
    public static string get_Common_ValueIsNull();
    public static string get_Configuration_DefaultMinifierNotSpecified();
    public static string get_Configuration_JsEngineNotSpecified();
    public static string get_Configuration_MinifierNotRegistered();
    public static string get_Configuration_PostProcessorNotRegistered();
    public static string get_Configuration_TranslatorNotRegistered();
    public static string get_ErrorDetails_ColumnNumber();
    public static string get_ErrorDetails_EndColumn();
    public static string get_ErrorDetails_EndLine();
    public static string get_ErrorDetails_ErrorCode();
    public static string get_ErrorDetails_ErrorType();
    public static string get_ErrorDetails_File();
    public static string get_ErrorDetails_HelpKeyword();
    public static string get_ErrorDetails_LineNumber();
    public static string get_ErrorDetails_LineSource();
    public static string get_ErrorDetails_Message();
    public static string get_ErrorDetails_Name();
    public static string get_ErrorDetails_ScriptStackTrace();
    public static string get_ErrorDetails_Severity();
    public static string get_ErrorDetails_SourceError();
    public static string get_ErrorDetails_SourceName();
    public static string get_ErrorDetails_StartColumn();
    public static string get_ErrorDetails_StartLine();
    public static string get_ErrorDetails_Subcategory();
    public static string get_ErrorType_Error();
    public static string get_ErrorType_Warning();
    public static string get_FileExtensionMapping_DuplicateFileExtension();
    public static string get_Minifiers_MinificationFailed();
    public static string get_Minifiers_MinificationSyntaxError();
    public static string get_PostProcessors_PostprocessingFailed();
    public static string get_PostProcessors_PostprocessingSyntaxError();
    public static string get_Resources_ResourceIsNull();
    public static string get_Translators_TranslationFailed();
    public static string get_Translators_TranslationSyntaxError();
    public static string get_UrlMappings_OnlyAppRelativeUrlAllowed();
}
public interface BundleTransformer.Core.Transformers.ITransformer {
    public ReadOnlyCollection`1<ITranslator> Translators { get; }
    public ReadOnlyCollection`1<IPostProcessor> PostProcessors { get; }
    public IMinifier Minifier { get; }
    public abstract virtual ReadOnlyCollection`1<ITranslator> get_Translators();
    public abstract virtual ReadOnlyCollection`1<IPostProcessor> get_PostProcessors();
    public abstract virtual IMinifier get_Minifier();
}
public class BundleTransformer.Core.Transformers.ScriptTransformer : TransformerBase {
    private String[] _jsFilesWithMsStyleExtensions;
    protected string ContentType { get; }
    public ScriptTransformer(IMinifier minifier);
    public ScriptTransformer(IList`1<ITranslator> translators);
    public ScriptTransformer(IList`1<IPostProcessor> postProcessors);
    public ScriptTransformer(IMinifier minifier, IList`1<ITranslator> translators);
    public ScriptTransformer(IMinifier minifier, IList`1<IPostProcessor> postProcessors);
    public ScriptTransformer(IList`1<ITranslator> translators, IList`1<IPostProcessor> postProcessors);
    public ScriptTransformer(IMinifier minifier, IList`1<ITranslator> translators, IList`1<IPostProcessor> postProcessors);
    public ScriptTransformer(String[] ignorePatterns);
    public ScriptTransformer(IMinifier minifier, IList`1<ITranslator> translators, IList`1<IPostProcessor> postProcessors, String[] ignorePatterns);
    public ScriptTransformer(IMinifier minifier, IList`1<ITranslator> translators, IList`1<IPostProcessor> postProcessors, String[] ignorePatterns, CoreSettings coreConfig);
    protected virtual string get_ContentType();
    protected virtual void ValidateAssetTypes(IList`1<IAsset> assets);
    protected virtual IList`1<IAsset> RemoveDuplicateAssets(IList`1<IAsset> assets);
    protected virtual IList`1<IAsset> RemoveUnnecessaryAssets(IList`1<IAsset> assets);
    protected virtual IList`1<IAsset> ReplaceFileExtensions(IList`1<IAsset> assets, bool isDebugMode);
    protected virtual IAsset Combine(IList`1<IAsset> assets, string bundleVirtualPath, bool isDebugMode);
}
public class BundleTransformer.Core.Transformers.StyleTransformer : TransformerBase {
    protected string ContentType { get; }
    public StyleTransformer(IMinifier minifier);
    public StyleTransformer(IList`1<ITranslator> translators);
    public StyleTransformer(IList`1<IPostProcessor> postProcessors);
    public StyleTransformer(IMinifier minifier, IList`1<ITranslator> translators);
    public StyleTransformer(IMinifier minifier, IList`1<IPostProcessor> postProcessors);
    public StyleTransformer(IList`1<ITranslator> translators, IList`1<IPostProcessor> postProcessors);
    public StyleTransformer(IMinifier minifier, IList`1<ITranslator> translators, IList`1<IPostProcessor> postProcessors);
    public StyleTransformer(String[] ignorePatterns);
    public StyleTransformer(IMinifier minifier, IList`1<ITranslator> translators, IList`1<IPostProcessor> postProcessors, String[] ignorePatterns);
    public StyleTransformer(IMinifier minifier, IList`1<ITranslator> translators, IList`1<IPostProcessor> postProcessors, String[] ignorePatterns, CoreSettings coreConfig);
    protected virtual string get_ContentType();
    protected virtual void ValidateAssetTypes(IList`1<IAsset> assets);
    protected virtual IList`1<IAsset> RemoveDuplicateAssets(IList`1<IAsset> assets);
    protected virtual IList`1<IAsset> RemoveUnnecessaryAssets(IList`1<IAsset> assets);
    protected virtual IList`1<IAsset> ReplaceFileExtensions(IList`1<IAsset> assets, bool isDebugMode);
    protected virtual IAsset Combine(IList`1<IAsset> assets, string bundleVirtualPath, bool isDebugMode);
}
public class BundleTransformer.Core.Transformers.Tracer : object {
    public sealed virtual void Process(BundleContext context, BundleResponse response);
}
public abstract class BundleTransformer.Core.Transformers.TransformerBase : object {
    protected String[] _ignorePatterns;
    protected ReadOnlyCollection`1<ITranslator> _translators;
    protected ReadOnlyCollection`1<IPostProcessor> _postProcessors;
    protected IMinifier _minifier;
    [CompilerGeneratedAttribute]
private bool <EnableTracing>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UsePreMinifiedFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CombineFilesBeforeMinification>k__BackingField;
    protected string ContentType { get; }
    public ReadOnlyCollection`1<ITranslator> Translators { get; }
    public ReadOnlyCollection`1<IPostProcessor> PostProcessors { get; }
    public IMinifier Minifier { get; }
    public bool EnableTracing { get; public set; }
    public bool UsePreMinifiedFiles { get; public set; }
    public bool CombineFilesBeforeMinification { get; public set; }
    protected TransformerBase(String[] ignorePatterns, CoreSettings coreConfig);
    protected abstract virtual string get_ContentType();
    public sealed virtual ReadOnlyCollection`1<ITranslator> get_Translators();
    public sealed virtual ReadOnlyCollection`1<IPostProcessor> get_PostProcessors();
    public sealed virtual IMinifier get_Minifier();
    [CompilerGeneratedAttribute]
public bool get_EnableTracing();
    [CompilerGeneratedAttribute]
public void set_EnableTracing(bool value);
    [CompilerGeneratedAttribute]
public bool get_UsePreMinifiedFiles();
    [CompilerGeneratedAttribute]
public void set_UsePreMinifiedFiles(bool value);
    [CompilerGeneratedAttribute]
public bool get_CombineFilesBeforeMinification();
    [CompilerGeneratedAttribute]
public void set_CombineFilesBeforeMinification(bool value);
    public sealed virtual void Process(BundleContext bundleContext, BundleResponse bundleResponse);
    public void Process(BundleContext bundleContext, BundleResponse bundleResponse, bool isDebugMode);
    protected virtual void Transform(IList`1<IAsset> assets, BundleContext bundleContext, BundleResponse bundleResponse, VirtualPathProvider virtualPathProvider, bool isDebugMode);
    protected abstract virtual void ValidateAssetTypes(IList`1<IAsset> assets);
    protected abstract virtual IList`1<IAsset> RemoveDuplicateAssets(IList`1<IAsset> assets);
    protected abstract virtual IList`1<IAsset> RemoveUnnecessaryAssets(IList`1<IAsset> assets);
    protected virtual IList`1<IAsset> Translate(IList`1<IAsset> assets, bool isDebugMode);
    protected abstract virtual IList`1<IAsset> ReplaceFileExtensions(IList`1<IAsset> assets, bool isDebugMode);
    protected virtual IList`1<IAsset> PostProcess(IList`1<IAsset> assets, bool isDebugMode);
    protected virtual IAsset Minify(IAsset asset);
    protected virtual IList`1<IAsset> Minify(IList`1<IAsset> assets);
    protected abstract virtual IAsset Combine(IList`1<IAsset> assets, string bundleVirtualPath, bool isDebugMode);
    protected virtual void ConfigureBundleResponse(IAsset combinedAsset, BundleResponse bundleResponse, VirtualPathProvider virtualPathProvider);
}
public class BundleTransformer.Core.Translators.AssetTranslationException : Exception {
    public AssetTranslationException(string message);
    public AssetTranslationException(string message, Exception innerException);
}
public interface BundleTransformer.Core.Translators.ITranslator {
    public bool IsDebugMode { get; public set; }
    public abstract virtual bool get_IsDebugMode();
    public abstract virtual void set_IsDebugMode(bool value);
    public abstract virtual IAsset Translate(IAsset asset);
    public abstract virtual IList`1<IAsset> Translate(IList`1<IAsset> assets);
}
public class BundleTransformer.Core.Translators.NullTranslator : object {
    [CompilerGeneratedAttribute]
private bool <IsDebugMode>k__BackingField;
    public bool IsDebugMode { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsDebugMode();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsDebugMode(bool value);
    public sealed virtual IAsset Translate(IAsset asset);
    public sealed virtual IList`1<IAsset> Translate(IList`1<IAsset> assets);
}
public class BundleTransformer.Core.Translators.TranslatorNotFoundException : Exception {
    public TranslatorNotFoundException(string message);
    public TranslatorNotFoundException(string message, Exception innerException);
}
public abstract class BundleTransformer.Core.Translators.TranslatorWithNativeMinificationBase : object {
    [CompilerGeneratedAttribute]
private bool <IsDebugMode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseNativeMinification>k__BackingField;
    public bool IsDebugMode { get; public set; }
    public bool UseNativeMinification { get; public set; }
    public bool NativeMinificationEnabled { get; }
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsDebugMode();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsDebugMode(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseNativeMinification();
    [CompilerGeneratedAttribute]
public void set_UseNativeMinification(bool value);
    public bool get_NativeMinificationEnabled();
    public abstract virtual IAsset Translate(IAsset asset);
    public abstract virtual IList`1<IAsset> Translate(IList`1<IAsset> assets);
}
[ExtensionAttribute]
public static class BundleTransformer.Core.Utilities.CharExtensions : object {
    [ExtensionAttribute]
public static bool IsWhitespace(char source);
    [ExtensionAttribute]
public static bool IsNumeric(char source);
    [ExtensionAttribute]
public static bool IsAlphaLower(char source);
    [ExtensionAttribute]
public static bool IsAlphaUpper(char source);
    [ExtensionAttribute]
public static bool IsAlpha(char source);
    [ExtensionAttribute]
public static bool IsAlphaNumeric(char source);
}
public class BundleTransformer.Core.Utilities.InterlockedStatedFlag : ValueType {
    private int _counter;
    public bool IsSet();
    public bool Set();
}
public static class BundleTransformer.Core.Utilities.SourceCodeNavigator : object {
    private static byte DEFAULT_TAB_SIZE;
    private static int DEFAULT_MAX_FRAGMENT_LENGTH;
    private static Char[] _nextLineBreakChars;
    private static Char[] _previousLineBreakChars;
    private static SourceCodeNavigator();
    private static void FindNextLineBreak(string sourceCode, int startPosition, Int32& lineBreakPosition, Int32& lineBreakLength);
    private static void FindNextLineBreak(string sourceCode, int startPosition, int length, Int32& lineBreakPosition, Int32& lineBreakLength);
    private static void FindPreviousLineBreak(string sourceCode, int startPosition, Int32& lineBreakPosition, Int32& lineBreakLength);
    public static void CalculateLineBreakCount(string sourceCode, Int32& lineBreakCount, Int32& charRemainderCount);
    public static void CalculateLineBreakCount(string sourceCode, int fragmentStartPosition, Int32& lineBreakCount, Int32& charRemainderCount);
    public static void CalculateLineBreakCount(string sourceCode, int fragmentStartPosition, int fragmentLength, Int32& lineBreakCount, Int32& charRemainderCount);
    public static SourceCodeNodeCoordinates CalculateNodeCoordinates(string sourceCode, int nodePosition);
    public static string GetSourceFragment(string sourceCode, int nodePosition, byte tabSize, int maxFragmentLength);
    public static string GetSourceFragment(string sourceCode, SourceCodeNodeCoordinates nodeCoordinates, byte tabSize, int maxFragmentLength);
    private static void CalculateCutPositions(string line, int columnNumber, int maxFragmentLength, Int32& fragmentStartPosition, Int32& fragmentLength);
    private static string FormatSourceCodeLine(string line, SourceCodeNodeCoordinates nodeCoordinates, int lineNumberSize, int fragmentStartPosition, int fragmentLength, byte tabSize);
    public static SourceCodeNodeCoordinates CalculateAbsoluteNodeCoordinates(SourceCodeNodeCoordinates baseNodeCoordinates, SourceCodeNodeCoordinates relativeNodeCoordinates);
    public static SourceCodeNodeCoordinates CalculateAbsoluteNodeCoordinates(SourceCodeNodeCoordinates baseNodeCoordinates, string additionalContent);
    public static SourceCodeNodeCoordinates CalculateAbsoluteNodeCoordinates(SourceCodeNodeCoordinates baseNodeCoordinates, int lineBreakCount, int charRemainderCount);
    public static string GetCurrentLine(string sourceCode, int currentPosition, Int32& startLinePosition, Int32& endLinePosition);
}
public class BundleTransformer.Core.Utilities.SourceCodeNodeCoordinates : ValueType {
    private int _lineNumber;
    private int _columnNumber;
    public static SourceCodeNodeCoordinates Empty;
    public int LineNumber { get; public set; }
    public int ColumnNumber { get; public set; }
    public bool IsEmpty { get; }
    public SourceCodeNodeCoordinates(int lineNumber, int columnNumber);
    private static SourceCodeNodeCoordinates();
    public int get_LineNumber();
    public void set_LineNumber(int value);
    public int get_ColumnNumber();
    public void set_ColumnNumber(int value);
    public bool get_IsEmpty();
}
public class BundleTransformer.Core.Utilities.StatedFlag : ValueType {
    private bool _isSet;
    public bool IsSet();
    public bool Set();
}
[ExtensionAttribute]
public static class BundleTransformer.Core.Utilities.StringExtensions : object {
    [ExtensionAttribute]
public static string TabsToSpaces(string source, int tabSize);
    [ExtensionAttribute]
public static bool TryGetChar(string source, int index, Char& result);
}
public static class BundleTransformer.Core.Utilities.Utils : object {
    public static String[] ConvertToStringCollection(string value, char separator, bool trimItemValues, bool removeEmptyItems);
    public static String[] ConvertToStringCollection(string value, Char[] separator, bool trimItemValues, bool removeEmptyItems);
    internal static T CreateInstanceByFullTypeName(string fullTypeName);
    public static TDest GetEnumFromOtherEnum(TSource value);
    public static string GetResourceAsString(string resourceName, Type type);
    public static string GetResourceAsString(string resourceName, Assembly assembly);
    private static string InnerGetResourceAsString(string resourceName, Assembly assembly);
    public static bool IsTextStream(Stream stream, int sampleSize, Encoding& encoding);
    public static Stream GetStreamFromString(string value);
}
public class BundleTransformer.Core.Validators.InvalidAssetTypesException : Exception {
    [CompilerGeneratedAttribute]
private String[] <InvalidAssetsVirtualPaths>k__BackingField;
    public String[] InvalidAssetsVirtualPaths { get; public set; }
    public InvalidAssetTypesException(string message, String[] invalidAssetsVirtualPaths);
    [CompilerGeneratedAttribute]
public String[] get_InvalidAssetsVirtualPaths();
    [CompilerGeneratedAttribute]
public void set_InvalidAssetsVirtualPaths(String[] value);
}
internal interface BundleTransformer.Core.Validators.IValidator {
    public abstract virtual void Validate(IList`1<IAsset> assets);
}
public class BundleTransformer.Core.Validators.ScriptAssetTypesValidator : object {
    public sealed virtual void Validate(IList`1<IAsset> assets);
}
public class BundleTransformer.Core.Validators.StyleAssetTypesValidator : object {
    public sealed virtual void Validate(IList`1<IAsset> assets);
}
