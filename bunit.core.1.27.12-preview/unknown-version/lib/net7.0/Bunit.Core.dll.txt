[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Bunit.Asserting.ActualExpectedAssertException : Exception {
    public ActualExpectedAssertException(string actual, string expected, string actualText, string expectedText, string message);
    protected ActualExpectedAssertException(SerializationInfo info, StreamingContext context);
    private static string CreateMessage(string actual, string expected, string actualText, string expectedText, string message);
}
[AttributeUsageAttribute("64")]
public class Bunit.Asserting.AssertionMethodAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Bunit.ComponentFactories.ConditionalComponentFactory : object {
    private Predicate`1<Type> condition;
    private Func`2<Type, IComponent> factory;
    public ConditionalComponentFactory(Predicate`1<Type> condition, Func`2<Type, IComponent> factory);
    public sealed virtual bool CanCreate(Type componentType);
    public sealed virtual IComponent Create(Type componentType);
}
internal class Bunit.ComponentFactories.GenericComponentFactory`2 : object {
    [NullableContextAttribute("1")]
public sealed virtual bool CanCreate(Type componentType);
    [NullableContextAttribute("1")]
public sealed virtual IComponent Create(Type componentType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Bunit.ComponentFactories.InstanceComponentFactory`1 : object {
    private TComponent instance;
    private int createCount;
    public InstanceComponentFactory`1(TComponent instance);
    public sealed virtual bool CanCreate(Type componentType);
    public sealed virtual IComponent Create(Type componentType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Bunit.ComponentFactories.TypeBasedComponentFactory`1 : object {
    private Func`1<TComponent> componentFactory;
    public TypeBasedComponentFactory`1(Func`1<TComponent> componentFactory);
    public sealed virtual bool CanCreate(Type componentType);
    public sealed virtual IComponent Create(Type componentType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class Bunit.ComponentFactoryCollection : object {
    private IList`1<IComponentFactory> factories;
    public IComponentFactory Item { get; public set; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public sealed virtual IComponentFactory get_Item(int index);
    public sealed virtual void set_Item(int index, IComponentFactory value);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual void Add(IComponentFactory item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(IComponentFactory item);
    public sealed virtual void CopyTo(IComponentFactory[] array, int arrayIndex);
    public sealed virtual IEnumerator`1<IComponentFactory> GetEnumerator();
    public sealed virtual int IndexOf(IComponentFactory item);
    public sealed virtual void Insert(int index, IComponentFactory item);
    public sealed virtual bool Remove(IComponentFactory item);
    public sealed virtual void RemoveAt(int index);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Bunit.ComponentFactoryCollectionExtensions : object {
    [ExtensionAttribute]
public static ComponentFactoryCollection Add(ComponentFactoryCollection factories);
    [ExtensionAttribute]
public static ComponentFactoryCollection Add(ComponentFactoryCollection factories, TComponent instance);
    [ExtensionAttribute]
public static ComponentFactoryCollection Add(ComponentFactoryCollection factories, Func`1<TComponent> factory);
    [ExtensionAttribute]
public static ComponentFactoryCollection Add(ComponentFactoryCollection factories, Predicate`1<Type> condition, Func`2<Type, IComponent> factory);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class Bunit.ComponentParameter : ValueType {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsCascadingValue>k__BackingField;
    public string Name { get; }
    public object Value { get; }
    public bool IsCascadingValue { get; }
    private ComponentParameter(string name, object value, bool isCascadingValue);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
public bool get_IsCascadingValue();
    [NullableContextAttribute("1")]
public static ComponentParameter CreateParameter(string name, object value);
    [NullableContextAttribute("1")]
public static ComponentParameter CreateCascadingValue(string name, object value);
    public static ComponentParameter op_Implicit(ValueTuple`2<string, object> input);
    public static ComponentParameter op_Implicit(ValueTuple`3<string, object, bool> input);
    public sealed virtual bool Equals(ComponentParameter other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(ComponentParameter left, ComponentParameter right);
    public static bool op_Inequality(ComponentParameter left, ComponentParameter right);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Bunit.ComponentParameterCollection : object {
    private static MethodInfo CreateTemplateWrapperMethod;
    private static Type CascadingValueType;
    [NullableAttribute("2")]
private List`1<ComponentParameter> parameters;
    [CompilerGeneratedAttribute]
private bool <IsReadOnly>k__BackingField;
    public int Count { get; }
    public bool IsReadOnly { get; }
    private static ComponentParameterCollection();
    public sealed virtual int get_Count();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsReadOnly();
    public sealed virtual void Add(ComponentParameter item);
    public void Add(IEnumerable`1<ComponentParameter> parameters);
    public sealed virtual bool Contains(ComponentParameter item);
    public sealed virtual void Clear();
    public sealed virtual void CopyTo(ComponentParameter[] array, int arrayIndex);
    public sealed virtual bool Remove(ComponentParameter item);
    public RenderFragment ToRenderFragment();
    [IteratorStateMachineAttribute("Bunit.ComponentParameterCollection/<GetEnumerator>d__15")]
public sealed virtual IEnumerator`1<ComponentParameter> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private static object WrapTemplates(Type templateParameterType, ComponentParameter[] templateParameters);
    private static RenderFragment`1<T> CreateTemplateWrapper(ComponentParameter[] subTemplateParams);
    private static Type GetCascadingValueType(ComponentParameter parameter);
    private static MethodInfo GetCreateTemplateWrapperMethod();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Bunit.ComponentParameterCollectionBuilder`1 : object {
    private static string ChildContent;
    private static Type TComponentType;
    [CompilerGeneratedAttribute]
private static bool <HasUnmatchedCaptureParameter>k__BackingField;
    private ComponentParameterCollection parameters;
    private static bool HasUnmatchedCaptureParameter { get; }
    public ComponentParameterCollectionBuilder`1(Action`1<ComponentParameterCollectionBuilder`1<TComponent>> parameterAdder);
    private static ComponentParameterCollectionBuilder`1();
    [CompilerGeneratedAttribute]
private static bool get_HasUnmatchedCaptureParameter();
    public ComponentParameterCollectionBuilder`1<TComponent> Add(Expression`1<Func`2<TComponent, TValue>> parameterSelector, TValue value);
    public ComponentParameterCollectionBuilder`1<TComponent> Add(Expression`1<Func`2<TComponent, RenderFragment>> parameterSelector, Action`1<ComponentParameterCollectionBuilder`1<TChildComponent>> childParameterBuilder);
    public ComponentParameterCollectionBuilder`1<TComponent> Add(Expression`1<Func`2<TComponent, RenderFragment>> parameterSelector, string markup);
    public ComponentParameterCollectionBuilder`1<TComponent> Add(Expression`1<Func`2<TComponent, RenderFragment`1<TValue>>> parameterSelector, Func`2<TValue, string> markupFactory);
    public ComponentParameterCollectionBuilder`1<TComponent> Add(Expression`1<Func`2<TComponent, RenderFragment`1<TValue>>> parameterSelector, Func`2<TValue, Action`1<ComponentParameterCollectionBuilder`1<TChildComponent>>> templateFactory);
    public ComponentParameterCollectionBuilder`1<TComponent> Add(Expression`1<Func`2<TComponent, EventCallback>> parameterSelector, Action callback);
    public ComponentParameterCollectionBuilder`1<TComponent> Add(Expression`1<Func`2<TComponent, Nullable`1<EventCallback>>> parameterSelector, Action callback);
    public ComponentParameterCollectionBuilder`1<TComponent> Add(Expression`1<Func`2<TComponent, EventCallback>> parameterSelector, Action`1<object> callback);
    public ComponentParameterCollectionBuilder`1<TComponent> Add(Expression`1<Func`2<TComponent, Nullable`1<EventCallback>>> parameterSelector, Action`1<object> callback);
    public ComponentParameterCollectionBuilder`1<TComponent> Add(Expression`1<Func`2<TComponent, EventCallback>> parameterSelector, Func`1<Task> callback);
    public ComponentParameterCollectionBuilder`1<TComponent> Add(Expression`1<Func`2<TComponent, Nullable`1<EventCallback>>> parameterSelector, Func`1<Task> callback);
    public ComponentParameterCollectionBuilder`1<TComponent> Add(Expression`1<Func`2<TComponent, EventCallback`1<TValue>>> parameterSelector, Action callback);
    public ComponentParameterCollectionBuilder`1<TComponent> Add(Expression`1<Func`2<TComponent, Nullable`1<EventCallback`1<TValue>>>> parameterSelector, Action callback);
    public ComponentParameterCollectionBuilder`1<TComponent> Add(Expression`1<Func`2<TComponent, EventCallback`1<TValue>>> parameterSelector, Action`1<TValue> callback);
    public ComponentParameterCollectionBuilder`1<TComponent> Add(Expression`1<Func`2<TComponent, Nullable`1<EventCallback`1<TValue>>>> parameterSelector, Action`1<TValue> callback);
    public ComponentParameterCollectionBuilder`1<TComponent> Add(Expression`1<Func`2<TComponent, EventCallback`1<TValue>>> parameterSelector, Func`1<Task> callback);
    public ComponentParameterCollectionBuilder`1<TComponent> Add(Expression`1<Func`2<TComponent, Nullable`1<EventCallback`1<TValue>>>> parameterSelector, Func`1<Task> callback);
    public ComponentParameterCollectionBuilder`1<TComponent> AddChildContent(RenderFragment childContent);
    public ComponentParameterCollectionBuilder`1<TComponent> AddChildContent(string markup);
    public ComponentParameterCollectionBuilder`1<TComponent> AddChildContent(Action`1<ComponentParameterCollectionBuilder`1<TChildComponent>> childParameterBuilder);
    public ComponentParameterCollectionBuilder`1<TComponent> AddCascadingValue(TValue cascadingValue);
    public ComponentParameterCollectionBuilder`1<TComponent> AddCascadingValue(string name, TValue cascadingValue);
    public ComponentParameterCollectionBuilder`1<TComponent> AddUnmatched(string name, object value);
    public ComponentParameterCollectionBuilder`1<TComponent> Bind(Expression`1<Func`2<TComponent, TValue>> parameterSelector, TValue initialValue, Action`1<TValue> changedAction, Expression`1<Func`1<TValue>> valueExpression);
    public bool TryAdd(string name, TValue value);
    public ComponentParameterCollection Build();
    private static ValueTuple`3<string, string, bool> GetParameterInfo(Expression`1<Func`2<TComponent, TValue>> parameterSelector);
    private static bool HasChildContentParameter();
    private static bool HasGenericChildContentParameter();
    private ComponentParameterCollectionBuilder`1<TComponent> AddParameter(string name, TValue value);
    [NullableContextAttribute("2")]
private ComponentParameterCollectionBuilder`1<TComponent> AddCascadingValueParameter(string name, object cascadingValue);
    private static RenderFragment GetRenderFragment(Action`1<ComponentParameterCollectionBuilder`1<TChildComponent>> childParameterBuilder);
    private static bool HasPublicParameterProperty(string parameterName);
    private static bool IsConcreteGenericOf(Type type, Type openGeneric);
    [CompilerGeneratedAttribute]
internal static void <Bind>g__AssertBindTargetIsCorrect|31_1(string parameterName, Expression`1<Func`2<TComponent, TValue>> parameterSelector);
    [CompilerGeneratedAttribute]
internal static string <Bind>g__TrimEnd|31_2(string source, string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Bunit.ComponentParameterFactory : object {
    public static ComponentParameter EventCallback(string name, Action callback);
    public static ComponentParameter EventCallback(string name, Action`1<object> callback);
    public static ComponentParameter EventCallback(string name, Func`1<Task> callback);
    public static ComponentParameter EventCallback(string name, Func`2<object, Task> callback);
    public static ComponentParameter EventCallback(string name, Action callback);
    public static ComponentParameter EventCallback(string name, Action`1<TValue> callback);
    public static ComponentParameter EventCallback(string name, Func`1<Task> callback);
    public static ComponentParameter EventCallback(string name, Func`2<TValue, Task> callback);
    public static ComponentParameter Parameter(string name, object value);
    public static ComponentParameter CascadingValue(string name, object value);
    public static ComponentParameter CascadingValue(object value);
    public static ComponentParameter ChildContent(string markup);
    public static ComponentParameter ChildContent(ComponentParameter[] parameters);
    public static ComponentParameter ChildContent(RenderFragment renderFragment);
    public static ComponentParameter RenderFragment(string name, string markup);
    public static ComponentParameter RenderFragment(string name, ComponentParameter[] parameters);
    public static ComponentParameter Template(string name, RenderFragment`1<TValue> template);
    public static ComponentParameter Template(string name, Func`2<TValue, string> markupFactory);
    public static ComponentParameter Template(string name, Func`2<TValue, ComponentParameter[]> parameterCollectionBuilder);
}
[ExtensionAttribute]
public static class Bunit.Extensions.BlazorExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static RenderFragment ToMarkupRenderFragment(string markup);
}
[ExtensionAttribute]
public static class Bunit.Extensions.EnumerableExtensions : object {
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static bool IsNullOrEmpty(IEnumerable`1<T> enumerable);
}
[ExtensionAttribute]
public static class Bunit.Extensions.LoggerHelperExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static ILogger`1<TCategoryName> CreateLogger(IServiceProvider services);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Bunit.Extensions.TestContextBaseRenderExtensions : object {
    [ExtensionAttribute]
public static IRenderedComponentBase`1<TComponent> RenderInsideRenderTree(TestContextBase testContext, RenderFragment renderFragment);
    [ExtensionAttribute]
public static IRenderedFragmentBase RenderInsideRenderTree(TestContextBase testContext, RenderFragment renderFragment);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Bunit.Extensions.WaitForHelpers.WaitForAssertionHelper : WaitForHelper`1<object> {
    internal static string TimeoutMessage;
    [CompilerGeneratedAttribute]
private bool <StopWaitingOnCheckException>k__BackingField;
    [NullableAttribute("2")]
protected string TimeoutErrorMessage { get; }
    protected bool StopWaitingOnCheckException { get; }
    public WaitForAssertionHelper(IRenderedFragmentBase renderedFragment, Action assertion, Nullable`1<TimeSpan> timeout);
    [NullableContextAttribute("2")]
protected virtual string get_TimeoutErrorMessage();
    [CompilerGeneratedAttribute]
protected virtual bool get_StopWaitingOnCheckException();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Bunit.Extensions.WaitForHelpers.WaitForFailedException : Exception {
    [NullableContextAttribute("2")]
public WaitForFailedException(string errorMessage, Exception innerException);
    internal WaitForFailedException(string errorMessage, int checkCount, int componentRenderCount, int totalRenderCount, Exception innerException);
    private WaitForFailedException(SerializationInfo info, StreamingContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Bunit.Extensions.WaitForHelpers.WaitForHelper`1 : object {
    private Timer timer;
    private TaskCompletionSource`1<T> checkPassedCompletionSource;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`1<ValueTuple`2<bool, T>> completeChecker;
    private IRenderedFragmentBase renderedFragment;
    private ILogger`1<WaitForHelper`1<T>> logger;
    private TestRenderer renderer;
    private bool isDisposed;
    private int checkCount;
    [NullableAttribute("2")]
private Exception capturedException;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <TimeoutErrorMessage>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <CheckThrowErrorMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private Task`1<T> <WaitTask>k__BackingField;
    [NullableAttribute("2")]
protected string TimeoutErrorMessage { get; }
    [NullableAttribute("2")]
protected string CheckThrowErrorMessage { get; }
    protected bool StopWaitingOnCheckException { get; }
    public Task`1<T> WaitTask { get; }
    protected WaitForHelper`1(IRenderedFragmentBase renderedFragment, Func`1<ValueTuple`2<bool, T>> completeChecker, Nullable`1<TimeSpan> timeout);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
protected virtual string get_TimeoutErrorMessage();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
protected virtual string get_CheckThrowErrorMessage();
    protected abstract virtual bool get_StopWaitingOnCheckException();
    [CompilerGeneratedAttribute]
public Task`1<T> get_WaitTask();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    private void InitializeWaiting();
    private Task`1<T> CreateWaitTask();
    private void OnAfterRender(object sender, EventArgs args);
    private void SubscribeToOnAfterRender();
    private static TimeSpan GetRuntimeTimeout(Nullable`1<TimeSpan> timeout);
    [CompilerGeneratedAttribute]
private void <InitializeWaiting>b__23_0();
    [AsyncStateMachineAttribute("Bunit.Extensions.WaitForHelpers.WaitForHelper`1/<<CreateWaitTask>b__24_0>d")]
[CompilerGeneratedAttribute]
private Task`1<Task`1<T>> <CreateWaitTask>b__24_0();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Bunit.Extensions.WaitForHelpers.WaitForHelperLoggerExtensions : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Action`3<ILogger, int, Exception> CheckingWaitCondition;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Action`3<ILogger, int, Exception> CheckCompleted;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Action`3<ILogger, int, Exception> CheckFailed;
    private static Action`3<ILogger, int, Exception> CheckThrow;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Action`3<ILogger, int, Exception> WaiterTimedOut;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Action`3<ILogger, int, Exception> WaiterDisposed;
    private static WaitForHelperLoggerExtensions();
    [ExtensionAttribute]
internal static void LogCheckingWaitCondition(ILogger`1<WaitForHelper`1<T>> logger, int componentId);
    [ExtensionAttribute]
internal static void LogCheckCompleted(ILogger`1<WaitForHelper`1<T>> logger, int componentId);
    [ExtensionAttribute]
internal static void LogCheckFailed(ILogger`1<WaitForHelper`1<T>> logger, int componentId);
    [ExtensionAttribute]
internal static void LogCheckThrow(ILogger`1<WaitForHelper`1<T>> logger, int componentId, Exception exception);
    [ExtensionAttribute]
internal static void LogWaiterTimedOut(ILogger`1<WaitForHelper`1<T>> logger, int componentId);
    [ExtensionAttribute]
internal static void LogWaiterDisposed(ILogger`1<WaitForHelper`1<T>> logger, int componentId);
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Bunit.Extensions.WaitForHelpers.WaitForStateHelper : WaitForHelper`1<object> {
    [NullableAttribute("1")]
internal static string TimeoutBeforePassMessage;
    [NullableAttribute("1")]
internal static string ExceptionInPredicateMessage;
    protected string TimeoutErrorMessage { get; }
    protected string CheckThrowErrorMessage { get; }
    protected bool StopWaitingOnCheckException { get; }
    [NullableContextAttribute("1")]
public WaitForStateHelper(IRenderedFragmentBase renderedFragment, Func`1<bool> statePredicate, Nullable`1<TimeSpan> timeout);
    protected virtual string get_TimeoutErrorMessage();
    protected virtual string get_CheckThrowErrorMessage();
    protected virtual bool get_StopWaitingOnCheckException();
}
[NullableContextAttribute("1")]
public interface Bunit.IComponentFactory {
    public abstract virtual bool CanCreate(Type componentType);
    public abstract virtual IComponent Create(Type componentType);
}
public interface Bunit.IRenderedComponentBase`1 {
    [NullableAttribute("1")]
public TComponent Instance { get; }
    [NullableContextAttribute("1")]
public abstract virtual TComponent get_Instance();
}
[NullableContextAttribute("1")]
public interface Bunit.IRenderedFragmentBase {
    public int RenderCount { get; }
    public bool IsDisposed { get; }
    public int ComponentId { get; }
    public IServiceProvider Services { get; }
    public abstract virtual int get_RenderCount();
    public abstract virtual bool get_IsDisposed();
    public abstract virtual int get_ComponentId();
    public abstract virtual void OnRender(RenderEvent renderEvent);
    public abstract virtual IServiceProvider get_Services();
    [CompilerGeneratedAttribute]
public abstract virtual void add_OnAfterRender(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_OnAfterRender(EventHandler value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Bunit.RazorTesting.ParameterException : ArgumentException {
    public ParameterException(string messsage, string parameterName);
    private ParameterException(SerializationInfo serializationInfo, StreamingContext streamingContext);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Bunit.RenderedComponentRenderExtensions : object {
    [ExtensionAttribute]
public static void Render(IRenderedComponentBase`1<TComponent> renderedComponent);
    [ExtensionAttribute]
public static void SetParametersAndRender(IRenderedComponentBase`1<TComponent> renderedComponent, ParameterView parameters);
    [ExtensionAttribute]
public static void SetParametersAndRender(IRenderedComponentBase`1<TComponent> renderedComponent, ComponentParameter[] parameters);
    [ExtensionAttribute]
public static void SetParametersAndRender(IRenderedComponentBase`1<TComponent> renderedComponent, Action`1<ComponentParameterCollectionBuilder`1<TComponent>> parameterBuilder);
    private static ParameterView ToParameterView(IReadOnlyCollection`1<ComponentParameter> parameters);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Bunit.RenderedFragmentInvokeAsyncExtensions : object {
    [ExtensionAttribute]
public static Task InvokeAsync(IRenderedFragmentBase renderedFragment, Action workItem);
    [ExtensionAttribute]
public static Task InvokeAsync(IRenderedFragmentBase renderedFragment, Func`1<Task> workItem);
    [ExtensionAttribute]
public static Task`1<T> InvokeAsync(IRenderedFragmentBase renderedFragment, Func`1<T> workItem);
    [ExtensionAttribute]
public static Task`1<T> InvokeAsync(IRenderedFragmentBase renderedFragment, Func`1<Task`1<T>> workItem);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Bunit.RenderedFragmentWaitForHelperExtensions : object {
    [ExtensionAttribute]
public static void WaitForState(IRenderedFragmentBase renderedFragment, Func`1<bool> statePredicate, Nullable`1<TimeSpan> timeout);
    [AsyncStateMachineAttribute("Bunit.RenderedFragmentWaitForHelperExtensions/<WaitForStateAsync>d__1")]
[ExtensionAttribute]
internal static Task WaitForStateAsync(IRenderedFragmentBase renderedFragment, Func`1<bool> statePredicate, Nullable`1<TimeSpan> timeout);
    [ExtensionAttribute]
[AssertionMethodAttribute]
public static void WaitForAssertion(IRenderedFragmentBase renderedFragment, Action assertion, Nullable`1<TimeSpan> timeout);
    [AsyncStateMachineAttribute("Bunit.RenderedFragmentWaitForHelperExtensions/<WaitForAssertionAsync>d__3")]
[ExtensionAttribute]
[AssertionMethodAttribute]
internal static Task WaitForAssertionAsync(IRenderedFragmentBase renderedFragment, Action assertion, Nullable`1<TimeSpan> timeout);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Bunit.Rendering.BunitComponentActivator : object {
    private ComponentFactoryCollection factories;
    private IComponentActivator componentActivator;
    public BunitComponentActivator(ComponentFactoryCollection factories, IComponentActivator externalComponentActivator);
    public sealed virtual IComponent CreateInstance(Type componentType);
}
public class Bunit.Rendering.ComponentDisposedException : Exception {
    public ComponentDisposedException(int componentId);
    [NullableContextAttribute("1")]
private ComponentDisposedException(SerializationInfo serializationInfo, StreamingContext streamingContext);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Bunit.Rendering.ComponentNotFoundException : Exception {
    public ComponentNotFoundException(Type componentType);
    private ComponentNotFoundException(SerializationInfo serializationInfo, StreamingContext streamingContext);
}
internal class Bunit.Rendering.FragmentContainer : object {
    private RenderHandle renderHandle;
    public sealed virtual void Attach(RenderHandle renderHandle);
    [NullableContextAttribute("1")]
public sealed virtual Task SetParametersAsync(ParameterView parameters);
    [NullableContextAttribute("1")]
public static RenderFragment Wrap(RenderFragment wrappingTarget);
}
[NullableContextAttribute("1")]
public interface Bunit.Rendering.IRenderedComponentActivator {
    public abstract virtual IRenderedFragmentBase CreateRenderedFragment(int componentId);
    public abstract virtual IRenderedComponentBase`1<TComponent> CreateRenderedComponent(int componentId);
    public abstract virtual IRenderedComponentBase`1<TComponent> CreateRenderedComponent(int componentId, TComponent component, RenderTreeFrameDictionary componentFrames);
}
[NullableContextAttribute("1")]
public interface Bunit.Rendering.ITestRenderer {
    public Task`1<Exception> UnhandledException { get; }
    public Dispatcher Dispatcher { get; }
    public abstract virtual Task`1<Exception> get_UnhandledException();
    public abstract virtual Dispatcher get_Dispatcher();
    public abstract virtual Task DispatchEventAsync(ulong eventHandlerId, EventFieldInfo fieldInfo, EventArgs eventArgs);
    public abstract virtual Task DispatchEventAsync(ulong eventHandlerId, EventFieldInfo fieldInfo, EventArgs eventArgs, bool ignoreUnknownEventHandlers);
    public abstract virtual IRenderedFragmentBase RenderFragment(RenderFragment renderFragment);
    public abstract virtual IRenderedComponentBase`1<TComponent> RenderComponent(ComponentParameterCollection parameters);
    public abstract virtual IRenderedComponentBase`1<TComponent> FindComponent(IRenderedFragmentBase parentComponent);
    public abstract virtual IReadOnlyList`1<IRenderedComponentBase`1<TComponent>> FindComponents(IRenderedFragmentBase parentComponent);
    public abstract virtual void DisposeComponents();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Bunit.Rendering.RenderEvent : object {
    private Dictionary`2<int, Status> statuses;
    [CompilerGeneratedAttribute]
private RenderTreeFrameDictionary <Frames>k__BackingField;
    internal IReadOnlyDictionary`2<int, Status> Statuses { get; }
    public RenderTreeFrameDictionary Frames { get; }
    internal IReadOnlyDictionary`2<int, Status> get_Statuses();
    [CompilerGeneratedAttribute]
public RenderTreeFrameDictionary get_Frames();
    [NullableContextAttribute("0")]
public ValueTuple`3<bool, bool, bool> GetRenderStatus(IRenderedFragmentBase renderedComponent);
    internal Status GetOrCreateStatus(int componentId);
    internal void SetDisposed(int componentId);
    internal void SetUpdated(int componentId, bool hasChanges);
    internal void SetUpdatedApplied(int componentId);
    [NullableContextAttribute("0")]
internal void AddFrames(int componentId, ArrayRange`1<RenderTreeFrame> frames);
}
[DefaultMemberAttribute("Item")]
public class Bunit.Rendering.RenderTreeFrameDictionary : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<int, ArrayRange`1<RenderTreeFrame>> currentRenderTree;
    public int Count { get; }
    [NullableAttribute("1")]
public IEnumerable`1<int> Keys { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IEnumerable`1<ArrayRange`1<RenderTreeFrame>> Values { get; }
    public ArrayRange`1<RenderTreeFrame> Item { get; }
    public sealed virtual int get_Count();
    [NullableContextAttribute("1")]
public sealed virtual IEnumerable`1<int> get_Keys();
    public sealed virtual IEnumerable`1<ArrayRange`1<RenderTreeFrame>> get_Values();
    public sealed virtual ArrayRange`1<RenderTreeFrame> get_Item(int componentId);
    public bool Contains(int componentId);
    public sealed virtual bool ContainsKey(int key);
    public sealed virtual bool TryGetValue(int key, ArrayRange`1& value);
    public sealed virtual IEnumerator`1<KeyValuePair`2<int, ArrayRange`1<RenderTreeFrame>>> GetEnumerator();
    [NullableContextAttribute("1")]
private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    internal void Add(int componentId, ArrayRange`1<RenderTreeFrame> frames);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Bunit.Rendering.RootComponent : object {
    private RenderFragment renderFragment;
    private RenderHandle renderHandle;
    public RootComponent(RenderFragment renderFragment);
    public sealed virtual void Attach(RenderHandle renderHandle);
    public sealed virtual Task SetParametersAsync(ParameterView parameters);
    public void Render();
    public void Detach();
}
public class Bunit.Rendering.RootRenderTree : object {
    [NullableAttribute("1")]
private List`1<RootRenderTreeRegistration> registrations;
    public int Count { get; }
    public void Add(Action`1<ComponentParameterCollectionBuilder`1<TComponent>> parameterBuilder);
    public bool TryAdd(Action`1<ComponentParameterCollectionBuilder`1<TComponent>> parameterBuilder);
    public sealed virtual int get_Count();
    [NullableContextAttribute("1")]
public sealed virtual IEnumerator`1<RootRenderTreeRegistration> GetEnumerator();
    [NullableContextAttribute("1")]
private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    [NullableContextAttribute("1")]
public RenderFragment Wrap(RenderFragment target);
    public int GetCountOf();
    [NullableContextAttribute("1")]
private static RenderFragment`1<RenderFragment> CreateRenderFragmentBuilder(Action`1<ComponentParameterCollectionBuilder`1<TComponent>> parameterBuilder);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Bunit.Rendering.RootRenderTreeRegistration : object {
    [CompilerGeneratedAttribute]
private Type <ComponentType>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment`1<RenderFragment> <RenderFragmentBuilder>k__BackingField;
    public Type ComponentType { get; }
    public RenderFragment`1<RenderFragment> RenderFragmentBuilder { get; }
    internal RootRenderTreeRegistration(Type componentType, RenderFragment`1<RenderFragment> renderFragmentBuilder);
    [CompilerGeneratedAttribute]
public Type get_ComponentType();
    [CompilerGeneratedAttribute]
public RenderFragment`1<RenderFragment> get_RenderFragmentBuilder();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Bunit.Rendering.TestRenderer : Renderer {
    private static Type RendererType;
    private static MethodInfo GetRequiredComponentStateMethod;
    private static FieldInfo IsBatchInProgressField;
    private object renderTreeUpdateLock;
    private Dictionary`2<int, IRenderedFragmentBase> renderedComponents;
    private List`1<RootComponent> rootComponents;
    private ILogger`1<TestRenderer> logger;
    private IRenderedComponentActivator activator;
    private bool disposed;
    private TaskCompletionSource`1<Exception> unhandledExceptionTsc;
    [NullableAttribute("2")]
private Exception capturedUnhandledException;
    [CompilerGeneratedAttribute]
private Dispatcher <Dispatcher>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RenderCount>k__BackingField;
    private bool IsBatchInProgress { get; private set; }
    public Task`1<Exception> UnhandledException { get; }
    public Dispatcher Dispatcher { get; }
    internal int RenderCount { get; private set; }
    public TestRenderer(IRenderedComponentActivator renderedComponentActivator, TestServiceProvider services, ILoggerFactory loggerFactory);
    public TestRenderer(IRenderedComponentActivator renderedComponentActivator, TestServiceProvider services, ILoggerFactory loggerFactory, IComponentActivator componentActivator);
    private static TestRenderer();
    private bool get_IsBatchInProgress();
    private void set_IsBatchInProgress(bool value);
    public sealed virtual Task`1<Exception> get_UnhandledException();
    [CompilerGeneratedAttribute]
public virtual Dispatcher get_Dispatcher();
    [CompilerGeneratedAttribute]
internal int get_RenderCount();
    [CompilerGeneratedAttribute]
private void set_RenderCount(int value);
    public sealed virtual IRenderedFragmentBase RenderFragment(RenderFragment renderFragment);
    public sealed virtual IRenderedComponentBase`1<TComponent> RenderComponent(ComponentParameterCollection parameters);
    public sealed virtual Task DispatchEventAsync(ulong eventHandlerId, EventFieldInfo fieldInfo, EventArgs eventArgs);
    public sealed virtual Task DispatchEventAsync(ulong eventHandlerId, EventFieldInfo fieldInfo, EventArgs eventArgs, bool ignoreUnknownEventHandlers);
    public sealed virtual IRenderedComponentBase`1<TComponent> FindComponent(IRenderedFragmentBase parentComponent);
    public sealed virtual IReadOnlyList`1<IRenderedComponentBase`1<TComponent>> FindComponents(IRenderedFragmentBase parentComponent);
    public sealed virtual void DisposeComponents();
    internal Task SetDirectParametersAsync(IRenderedFragmentBase renderedComponent, ParameterView parameters);
    protected virtual void ProcessPendingRender();
    protected virtual Task UpdateDisplayAsync(RenderBatch& modreq(System.Runtime.InteropServices.InAttribute) renderBatch);
    private void ApplyRenderEvent(RenderEvent renderEvent);
    protected virtual void Dispose(bool disposing);
    private TResult Render(RenderFragment renderFragment, Func`2<int, TResult> activator);
    private IReadOnlyList`1<IRenderedComponentBase`1<TComponent>> FindComponents(IRenderedFragmentBase parentComponent, int resultLimit);
    private IRenderedComponentBase`1<TComponent> GetOrCreateRenderedComponent(RenderTreeFrameDictionary framesCollection, int componentId, TComponent component);
    private void LoadRenderTreeFrames(int componentId, RenderTreeFrameDictionary framesCollection);
    [NullableContextAttribute("0")]
private ArrayRange`1<RenderTreeFrame> GetOrLoadRenderTreeFrame(RenderTreeFrameDictionary framesCollection, int componentId);
    protected virtual void HandleException(Exception exception);
    private void ResetUnhandledException();
    private void AssertNoUnhandledExceptions();
    [CompilerGeneratedAttribute]
private IRenderedFragmentBase <RenderFragment>b__25_0(int id);
    [CompilerGeneratedAttribute]
private IRenderedComponentBase`1<TComponent> <RenderComponent>b__26_0(int id);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(ulong eventHandlerId, EventFieldInfo fieldInfo, EventArgs eventArgs);
    [CompilerGeneratedAttribute]
private void <DisposeComponents>b__31_0();
    [CompilerGeneratedAttribute]
internal static void <SetDirectParametersAsync>g__SetDirectParametersViaComponentState|32_1(TestRenderer renderer, int componentId, ParameterView& parameters);
    [CompilerGeneratedAttribute]
private void <UpdateDisplayAsync>g__PrepareRenderEvent|34_0(RenderBatch& renderBatch, <>c__DisplayClass34_0& );
    [CompilerGeneratedAttribute]
private void <UpdateDisplayAsync>g__LoadChangesIntoRenderEvent|34_1(int componentId, <>c__DisplayClass34_0& );
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private void <>n__1(bool disposing);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void <FindComponents>g__FindComponentsInRenderTree|38_0(int componentId, <>c__DisplayClass38_0`1& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Bunit.Rendering.TestRendererLoggerExtensions : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Action`3<ILogger, int, Exception> ComponentDisposed;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Action`3<ILogger, int, Exception> ComponentRendered;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Action`4<ILogger, int, int, Exception> DisposedChildInRenderTreeFrame;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Action`2<ILogger, Exception> AsyncInitialRender;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Action`3<ILogger, int, Exception> InitialRenderCompleted;
    private static Action`4<ILogger, string, string, Exception> UnhandledException;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Action`2<ILogger, Exception> RenderCycleActiveAfterDispose;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Action`6<ILogger, string, string, ulong, int, Exception> DispatchingEventWithFieldValue;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Action`5<ILogger, string, ulong, int, Exception> DispatchingEvent;
    private static TestRendererLoggerExtensions();
    [ExtensionAttribute]
internal static void LogComponentDisposed(ILogger`1<TestRenderer> logger, int componentId);
    [ExtensionAttribute]
internal static void LogComponentRendered(ILogger`1<TestRenderer> logger, int componentId);
    [ExtensionAttribute]
internal static void LogDisposedChildInRenderTreeFrame(ILogger`1<TestRenderer> logger, int parentComponentId, int componentId);
    [ExtensionAttribute]
internal static void LogAsyncInitialRender(ILogger`1<TestRenderer> logger);
    [ExtensionAttribute]
internal static void LogInitialRenderCompleted(ILogger`1<TestRenderer> logger, int componentId);
    [ExtensionAttribute]
internal static void LogUnhandledException(ILogger`1<TestRenderer> logger, Exception exception);
    [ExtensionAttribute]
internal static void LogRenderCycleActiveAfterDispose(ILogger`1<TestRenderer> logger);
    [ExtensionAttribute]
internal static void LogDispatchingEvent(ILogger`1<TestRenderer> logger, ulong eventHandlerId, EventFieldInfo fieldInfo, EventArgs eventArgs);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Bunit.Rendering.UnknownEventHandlerIdException : Exception {
    public UnknownEventHandlerIdException(ulong eventHandlerId, EventFieldInfo fieldInfo, Exception innerException);
    private UnknownEventHandlerIdException(SerializationInfo serializationInfo, StreamingContext streamingContext);
    private static string CreateMessage(ulong eventHandlerId, EventFieldInfo fieldInfo);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Bunit.TestContextBase : object {
    private bool disposed;
    [NullableAttribute("2")]
private ITestRenderer testRenderer;
    [CompilerGeneratedAttribute]
private static TimeSpan <DefaultWaitTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private TestServiceProvider <Services>k__BackingField;
    [CompilerGeneratedAttribute]
private RootRenderTree <RenderTree>k__BackingField;
    [CompilerGeneratedAttribute]
private ComponentFactoryCollection <ComponentFactories>k__BackingField;
    public static TimeSpan DefaultWaitTimeout { get; public set; }
    public ITestRenderer Renderer { get; }
    public TestServiceProvider Services { get; }
    public RootRenderTree RenderTree { get; }
    public ComponentFactoryCollection ComponentFactories { get; }
    private static TestContextBase();
    [CompilerGeneratedAttribute]
public static TimeSpan get_DefaultWaitTimeout();
    [CompilerGeneratedAttribute]
public static void set_DefaultWaitTimeout(TimeSpan value);
    public ITestRenderer get_Renderer();
    protected abstract virtual ITestRenderer CreateTestRenderer();
    [CompilerGeneratedAttribute]
public TestServiceProvider get_Services();
    [CompilerGeneratedAttribute]
public RootRenderTree get_RenderTree();
    [CompilerGeneratedAttribute]
public ComponentFactoryCollection get_ComponentFactories();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public void DisposeComponents();
    [CompilerGeneratedAttribute]
private ComponentFactoryCollection <.ctor>b__18_0(IServiceProvider _);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Bunit.TestDoubles.FakePersistentComponentState : object {
    private static JsonSerializerOptions JsonSerializerOptions;
    private FakePersistentComponentStateStore store;
    private Lazy`1<ComponentStatePersistenceManager> manager;
    private Lazy`1<ITestRenderer> renderer;
    internal FakePersistentComponentState(IServiceProvider services);
    private static FakePersistentComponentState();
    public void TriggerOnPersisting();
    public void Persist(string key, TValue instance);
    [NullableContextAttribute("2")]
public bool TryTake(string key, TValue& instance);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Bunit.TestDoubles.FakePersistentComponentStateStore : object {
    private Dictionary`2<string, Byte[]> state;
    public void Add(string key, Byte[] value);
    public sealed virtual Task`1<IDictionary`2<string, Byte[]>> GetPersistedStateAsync();
    public sealed virtual Task PersistStateAsync(IReadOnlyDictionary`2<string, Byte[]> state);
}
[ExtensionAttribute]
public static class Bunit.TestDoubles.TestContextBaseExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static FakePersistentComponentState AddFakePersistentComponentState(TestContextBase testContext);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class Bunit.TestServiceProvider : object {
    private static ServiceProviderOptions DefaultServiceProviderOptions;
    private IServiceCollection serviceCollection;
    [NullableAttribute("2")]
private IServiceProvider rootServiceProvider;
    [NullableAttribute("2")]
private IServiceScope serviceScope;
    [NullableAttribute("2")]
private IServiceProvider serviceProvider;
    [NullableAttribute("2")]
private IServiceProvider fallbackServiceProvider;
    private ServiceProviderOptions options;
    private Func`1<IServiceProvider> serviceProviderFactory;
    public bool IsProviderInitialized { get; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public ServiceDescriptor Item { get; public set; }
    public ServiceProviderOptions Options { get; public set; }
    [NullableContextAttribute("2")]
public TestServiceProvider(IServiceCollection initialServiceCollection);
    private TestServiceProvider(IServiceCollection initialServiceCollection, bool initializeProvider);
    private static TestServiceProvider();
    public bool get_IsProviderInitialized();
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual ServiceDescriptor get_Item(int index);
    public sealed virtual void set_Item(int index, ServiceDescriptor value);
    public ServiceProviderOptions get_Options();
    public void set_Options(ServiceProviderOptions value);
    public void UseServiceProviderFactory(Func`2<IServiceCollection, IServiceProvider> serviceProviderFactory);
    public void UseServiceProviderFactory(IServiceProviderFactory`1<TContainerBuilder> serviceProviderFactory, Action`1<TContainerBuilder> configure);
    [MemberNotNullAttribute("serviceProvider")]
private void InitializeProvider();
    public void AddFallbackServiceProvider(IServiceProvider serviceProvider);
    [NullableContextAttribute("2")]
public TService GetService();
    public sealed virtual object GetService(Type serviceType);
    private object GetServiceInternal(Type serviceType);
    public sealed virtual IEnumerator`1<ServiceDescriptor> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual void Dispose();
    [AsyncStateMachineAttribute("Bunit.TestServiceProvider/<DisposeAsync>d__32")]
public sealed virtual ValueTask DisposeAsync();
    public sealed virtual int IndexOf(ServiceDescriptor item);
    public sealed virtual void Insert(int index, ServiceDescriptor item);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual void Add(ServiceDescriptor item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(ServiceDescriptor item);
    public sealed virtual void CopyTo(ServiceDescriptor[] array, int arrayIndex);
    public sealed virtual bool Remove(ServiceDescriptor item);
    private void CheckInitializedAndThrow();
    [CompilerGeneratedAttribute]
private IServiceProvider <.ctor>b__21_0();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
[GeneratedCodeAttribute("Nerdbank.GitVersioning.Tasks", "3.6.133.12845")]
[ExcludeFromCodeCoverageAttribute]
internal static class ThisAssembly : object {
    internal static string AssemblyConfiguration;
    internal static string AssemblyFileVersion;
    internal static string AssemblyInformationalVersion;
    internal static string AssemblyName;
    internal static string AssemblyTitle;
    internal static string AssemblyVersion;
    internal static DateTime GitCommitDate;
    internal static string GitCommitId;
    internal static bool IsPrerelease;
    internal static bool IsPublicRelease;
    internal static string PublicKey;
    internal static string PublicKeyToken;
    internal static string RootNamespace;
    private static ThisAssembly();
}
