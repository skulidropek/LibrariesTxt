[NullableContextAttribute("1")]
[NullableAttribute("0")]
[TypeConverterAttribute("ByteSizeLib.ByteSizeTypeConverter")]
public class ByteSizeLib.ByteSize : ValueType {
    public static long BytesInKibiByte;
    public static long BytesInMebiByte;
    public static long BytesInGibiByte;
    public static long BytesInTebiByte;
    public static long BytesInPebiByte;
    public static string KibiByteSymbol;
    public static string MebiByteSymbol;
    public static string GibiByteSymbol;
    public static string TebiByteSymbol;
    public static string PebiByteSymbol;
    public static ByteSize MinValue;
    public static ByteSize MaxValue;
    public static long BitsInByte;
    public static string BitSymbol;
    public static string ByteSymbol;
    [CompilerGeneratedAttribute]
private long <Bits>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Bytes>k__BackingField;
    public static long BytesInKiloByte;
    public static long BytesInMegaByte;
    public static long BytesInGigaByte;
    public static long BytesInTeraByte;
    public static long BytesInPetaByte;
    public static string KiloByteSymbol;
    public static string MegaByteSymbol;
    public static string GigaByteSymbol;
    public static string TeraByteSymbol;
    public static string PetaByteSymbol;
    public double KibiBytes { get; }
    public double MebiBytes { get; }
    public double GibiBytes { get; }
    public double TebiBytes { get; }
    public double PebiBytes { get; }
    public long Bits { get; }
    public double Bytes { get; }
    public string LargestWholeNumberBinarySymbol { get; }
    public string LargestWholeNumberDecimalSymbol { get; }
    public double LargestWholeNumberBinaryValue { get; }
    public double LargestWholeNumberDecimalValue { get; }
    public double KiloBytes { get; }
    public double MegaBytes { get; }
    public double GigaBytes { get; }
    public double TeraBytes { get; }
    public double PetaBytes { get; }
    public ByteSize(long bits);
    public ByteSize(double bytes);
    private static ByteSize();
    public double get_KibiBytes();
    public double get_MebiBytes();
    public double get_GibiBytes();
    public double get_TebiBytes();
    public double get_PebiBytes();
    public static ByteSize FromKibiBytes(double value);
    public static ByteSize FromMebiBytes(double value);
    public static ByteSize FromGibiBytes(double value);
    public static ByteSize FromTebiBytes(double value);
    public static ByteSize FromPebiBytes(double value);
    public ByteSize AddKibiBytes(double value);
    public ByteSize AddMebiBytes(double value);
    public ByteSize AddGibiBytes(double value);
    public ByteSize AddTebiBytes(double value);
    public ByteSize AddPebiBytes(double value);
    public string ToBinaryString();
    public string ToBinaryString(IFormatProvider formatProvider);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public long get_Bits();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public double get_Bytes();
    public string get_LargestWholeNumberBinarySymbol();
    public string get_LargestWholeNumberDecimalSymbol();
    public double get_LargestWholeNumberBinaryValue();
    public double get_LargestWholeNumberDecimalValue();
    public static ByteSize FromBits(long value);
    public static ByteSize FromBytes(double value);
    public virtual string ToString();
    public string ToString(string format);
    [NullableContextAttribute("2")]
public sealed virtual string ToString(string format, IFormatProvider provider);
    [NullableContextAttribute("2")]
public string ToString(string format, IFormatProvider provider, bool useBinaryByte);
    [NullableContextAttribute("2")]
public virtual bool Equals(object value);
    public sealed virtual bool Equals(ByteSize value);
    public virtual int GetHashCode();
    public sealed virtual int CompareTo(ByteSize other);
    public ByteSize Add(ByteSize bs);
    public ByteSize AddBits(long value);
    public ByteSize AddBytes(double value);
    public ByteSize Subtract(ByteSize bs);
    public static ByteSize op_Addition(ByteSize b1, ByteSize b2);
    public static ByteSize op_Increment(ByteSize b);
    public static ByteSize op_UnaryNegation(ByteSize b);
    public static ByteSize op_Subtraction(ByteSize b1, ByteSize b2);
    public static ByteSize op_Decrement(ByteSize b);
    public static ByteSize op_Multiply(ByteSize a, ByteSize b);
    public static ByteSize op_Division(ByteSize a, ByteSize b);
    public static bool op_Equality(ByteSize b1, ByteSize b2);
    public static bool op_Inequality(ByteSize b1, ByteSize b2);
    public static bool op_LessThan(ByteSize b1, ByteSize b2);
    public static bool op_LessThanOrEqual(ByteSize b1, ByteSize b2);
    public static bool op_GreaterThan(ByteSize b1, ByteSize b2);
    public static bool op_GreaterThanOrEqual(ByteSize b1, ByteSize b2);
    public static ByteSize Parse(string s);
    public static ByteSize Parse(string s, IFormatProvider formatProvider);
    public static ByteSize Parse(string s, NumberStyles numberStyles, IFormatProvider formatProvider);
    public static bool TryParse(string s, ByteSize& result);
    public static bool TryParse(string s, NumberStyles numberStyles, IFormatProvider formatProvider, ByteSize& result);
    public double get_KiloBytes();
    public double get_MegaBytes();
    public double get_GigaBytes();
    public double get_TeraBytes();
    public double get_PetaBytes();
    public static ByteSize FromKiloBytes(double value);
    public static ByteSize FromMegaBytes(double value);
    public static ByteSize FromGigaBytes(double value);
    public static ByteSize FromTeraBytes(double value);
    public static ByteSize FromPetaBytes(double value);
    public ByteSize AddKiloBytes(double value);
    public ByteSize AddMegaBytes(double value);
    public ByteSize AddGigaBytes(double value);
    public ByteSize AddTeraBytes(double value);
    public ByteSize AddPetaBytes(double value);
    [CompilerGeneratedAttribute]
internal static bool <ToString>g__has|58_0(string s, <>c__DisplayClass58_0& );
    [CompilerGeneratedAttribute]
internal static string <ToString>g__output|58_1(double n, <>c__DisplayClass58_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class ByteSizeLib.ByteSizeTypeConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
[ExtensionAttribute]
public static class ByteSizeLib.EnumerableExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static ByteSize Sum(IEnumerable`1<ByteSize> byteSizes);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
