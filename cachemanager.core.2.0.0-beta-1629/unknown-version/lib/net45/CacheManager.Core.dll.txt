public class CacheManager.Core.BaseCacheManager`1 : BaseCache`1<TCacheValue> {
    private bool _logTrace;
    private BaseCacheHandle`1[] _cacheHandles;
    private CacheBackplane _cacheBackplane;
    [CompilerGeneratedAttribute]
private EventHandler`1<CacheActionEventArgs> OnAdd;
    [CompilerGeneratedAttribute]
private EventHandler`1<CacheClearEventArgs> OnClear;
    [CompilerGeneratedAttribute]
private EventHandler`1<CacheClearRegionEventArgs> OnClearRegion;
    [CompilerGeneratedAttribute]
private EventHandler`1<CacheActionEventArgs> OnGet;
    [CompilerGeneratedAttribute]
private EventHandler`1<CacheActionEventArgs> OnPut;
    [CompilerGeneratedAttribute]
private EventHandler`1<CacheActionEventArgs> OnRemove;
    [CompilerGeneratedAttribute]
private EventHandler`1<CacheItemRemovedEventArgs> OnRemoveByHandle;
    [CompilerGeneratedAttribute]
private EventHandler`1<CacheActionEventArgs> OnUpdate;
    [CompilerGeneratedAttribute]
private IReadOnlyCacheManagerConfiguration <Configuration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    public IReadOnlyCacheManagerConfiguration Configuration { get; }
    public IEnumerable`1<BaseCacheHandle`1<TCacheValue>> CacheHandles { get; }
    public CacheBackplane Backplane { get; }
    public string Name { get; }
    protected ILogger Logger { get; }
    public BaseCacheManager`1(ICacheManagerConfiguration configuration);
    private BaseCacheManager`1(string name, ICacheManagerConfiguration configuration);
    [CompilerGeneratedAttribute]
public sealed virtual void add_OnAdd(EventHandler`1<CacheActionEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_OnAdd(EventHandler`1<CacheActionEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_OnClear(EventHandler`1<CacheClearEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_OnClear(EventHandler`1<CacheClearEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_OnClearRegion(EventHandler`1<CacheClearRegionEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_OnClearRegion(EventHandler`1<CacheClearRegionEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_OnGet(EventHandler`1<CacheActionEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_OnGet(EventHandler`1<CacheActionEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_OnPut(EventHandler`1<CacheActionEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_OnPut(EventHandler`1<CacheActionEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_OnRemove(EventHandler`1<CacheActionEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_OnRemove(EventHandler`1<CacheActionEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_OnRemoveByHandle(EventHandler`1<CacheItemRemovedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_OnRemoveByHandle(EventHandler`1<CacheItemRemovedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_OnUpdate(EventHandler`1<CacheActionEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_OnUpdate(EventHandler`1<CacheActionEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyCacheManagerConfiguration get_Configuration();
    public sealed virtual IEnumerable`1<BaseCacheHandle`1<TCacheValue>> get_CacheHandles();
    public CacheBackplane get_Backplane();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
protected virtual ILogger get_Logger();
    public virtual void Clear();
    public virtual void ClearRegion(string region);
    public virtual bool Exists(string key);
    public virtual bool Exists(string key, string region);
    public virtual string ToString();
    protected internal virtual bool AddInternal(CacheItem`1<TCacheValue> item);
    protected internal virtual void PutInternal(CacheItem`1<TCacheValue> item);
    protected virtual void Dispose(bool disposeManaged);
    protected virtual CacheItem`1<TCacheValue> GetCacheItemInternal(string key);
    protected virtual CacheItem`1<TCacheValue> GetCacheItemInternal(string key, string region);
    protected virtual bool RemoveInternal(string key);
    protected virtual bool RemoveInternal(string key, string region);
    private static bool AddItemToHandle(CacheItem`1<TCacheValue> item, BaseCacheHandle`1<TCacheValue> handle);
    private static void ClearHandles(BaseCacheHandle`1[] handles);
    private static void ClearRegionHandles(string region, BaseCacheHandle`1[] handles);
    private void EvictFromHandles(string key, string region, BaseCacheHandle`1[] handles);
    private void EvictFromHandle(string key, string region, BaseCacheHandle`1<TCacheValue> handle);
    private void AddToHandles(CacheItem`1<TCacheValue> item, int foundIndex);
    private void AddToHandlesBelow(CacheItem`1<TCacheValue> item, int foundIndex);
    private void EvictFromOtherHandles(string key, string region, int excludeIndex);
    private void EvictFromHandlesAbove(string key, string region, int excludeIndex);
    private void RegisterCacheBackplane(CacheBackplane backplane);
    private void TriggerOnAdd(string key, string region, CacheActionEventArgOrigin origin);
    private void TriggerOnClear(CacheActionEventArgOrigin origin);
    private void TriggerOnClearRegion(string region, CacheActionEventArgOrigin origin);
    private void TriggerOnGet(string key, string region, CacheActionEventArgOrigin origin);
    private void TriggerOnPut(string key, string region, CacheActionEventArgOrigin origin);
    private void TriggerOnRemove(string key, string region, CacheActionEventArgOrigin origin);
    private void TriggerOnRemoveByHandle(string key, string region, CacheItemRemovedReason reason, int level, object value);
    private void TriggerOnUpdate(string key, string region, CacheActionEventArgOrigin origin);
    public sealed virtual void Expire(string key, ExpirationMode mode, TimeSpan timeout);
    public sealed virtual void Expire(string key, string region, ExpirationMode mode, TimeSpan timeout);
    private void ExpireInternal(string key, string region, ExpirationMode mode, TimeSpan timeout);
    public sealed virtual void Expire(string key, DateTimeOffset absoluteExpiration);
    public sealed virtual void Expire(string key, string region, DateTimeOffset absoluteExpiration);
    public sealed virtual void Expire(string key, TimeSpan slidingExpiration);
    public sealed virtual void Expire(string key, string region, TimeSpan slidingExpiration);
    public sealed virtual void RemoveExpiration(string key);
    public sealed virtual void RemoveExpiration(string key, string region);
    public sealed virtual TCacheValue GetOrAdd(string key, TCacheValue value);
    public sealed virtual TCacheValue GetOrAdd(string key, string region, TCacheValue value);
    public sealed virtual TCacheValue GetOrAdd(string key, Func`2<string, TCacheValue> valueFactory);
    public sealed virtual TCacheValue GetOrAdd(string key, string region, Func`3<string, string, TCacheValue> valueFactory);
    public sealed virtual CacheItem`1<TCacheValue> GetOrAdd(string key, Func`2<string, CacheItem`1<TCacheValue>> valueFactory);
    public sealed virtual CacheItem`1<TCacheValue> GetOrAdd(string key, string region, Func`3<string, string, CacheItem`1<TCacheValue>> valueFactory);
    public sealed virtual bool TryGetOrAdd(string key, Func`2<string, TCacheValue> valueFactory, TCacheValue& value);
    public sealed virtual bool TryGetOrAdd(string key, string region, Func`3<string, string, TCacheValue> valueFactory, TCacheValue& value);
    public sealed virtual bool TryGetOrAdd(string key, Func`2<string, CacheItem`1<TCacheValue>> valueFactory, CacheItem`1& item);
    public sealed virtual bool TryGetOrAdd(string key, string region, Func`3<string, string, CacheItem`1<TCacheValue>> valueFactory, CacheItem`1& item);
    private bool TryGetOrAddInternal(string key, string region, Func`3<string, string, CacheItem`1<TCacheValue>> valueFactory, CacheItem`1& item);
    private CacheItem`1<TCacheValue> GetOrAddInternal(string key, string region, Func`3<string, string, CacheItem`1<TCacheValue>> valueFactory);
    public sealed virtual TCacheValue AddOrUpdate(string key, TCacheValue addValue, Func`2<TCacheValue, TCacheValue> updateValue);
    public sealed virtual TCacheValue AddOrUpdate(string key, string region, TCacheValue addValue, Func`2<TCacheValue, TCacheValue> updateValue);
    public sealed virtual TCacheValue AddOrUpdate(string key, TCacheValue addValue, Func`2<TCacheValue, TCacheValue> updateValue, int maxRetries);
    public sealed virtual TCacheValue AddOrUpdate(string key, string region, TCacheValue addValue, Func`2<TCacheValue, TCacheValue> updateValue, int maxRetries);
    public sealed virtual TCacheValue AddOrUpdate(CacheItem`1<TCacheValue> addItem, Func`2<TCacheValue, TCacheValue> updateValue);
    public sealed virtual TCacheValue AddOrUpdate(CacheItem`1<TCacheValue> addItem, Func`2<TCacheValue, TCacheValue> updateValue, int maxRetries);
    private TCacheValue AddOrUpdateInternal(CacheItem`1<TCacheValue> item, Func`2<TCacheValue, TCacheValue> updateValue, int maxRetries);
    public sealed virtual bool TryUpdate(string key, Func`2<TCacheValue, TCacheValue> updateValue, TCacheValue& value);
    public sealed virtual bool TryUpdate(string key, string region, Func`2<TCacheValue, TCacheValue> updateValue, TCacheValue& value);
    public sealed virtual bool TryUpdate(string key, Func`2<TCacheValue, TCacheValue> updateValue, int maxRetries, TCacheValue& value);
    public sealed virtual bool TryUpdate(string key, string region, Func`2<TCacheValue, TCacheValue> updateValue, int maxRetries, TCacheValue& value);
    public sealed virtual TCacheValue Update(string key, Func`2<TCacheValue, TCacheValue> updateValue);
    public sealed virtual TCacheValue Update(string key, string region, Func`2<TCacheValue, TCacheValue> updateValue);
    public sealed virtual TCacheValue Update(string key, Func`2<TCacheValue, TCacheValue> updateValue, int maxRetries);
    public sealed virtual TCacheValue Update(string key, string region, Func`2<TCacheValue, TCacheValue> updateValue, int maxRetries);
    private bool UpdateInternal(BaseCacheHandle`1[] handles, string key, Func`2<TCacheValue, TCacheValue> updateValue, int maxRetries, bool throwOnFailure, TCacheValue& value);
    private bool UpdateInternal(BaseCacheHandle`1[] handles, string key, string region, Func`2<TCacheValue, TCacheValue> updateValue, int maxRetries, bool throwOnFailure, TCacheValue& value);
    [CompilerGeneratedAttribute]
private BaseCacheHandle`1[] <RegisterCacheBackplane>b__63_1(bool includSource);
}
public static class CacheManager.Core.CacheFactory : object {
    public static ICacheManager`1<object> Build(string cacheName, Action`1<ConfigurationBuilderCachePart> settings);
    public static ICacheManager`1<object> Build(Action`1<ConfigurationBuilderCachePart> settings);
    public static ICacheManager`1<TCacheValue> Build(string cacheName, Action`1<ConfigurationBuilderCachePart> settings);
    public static ICacheManager`1<TCacheValue> Build(Action`1<ConfigurationBuilderCachePart> settings);
    public static object Build(Type cacheValueType, string cacheName, Action`1<ConfigurationBuilderCachePart> settings);
    public static object Build(Type cacheValueType, Action`1<ConfigurationBuilderCachePart> settings);
    public static ICacheManager`1<TCacheValue> FromConfiguration(string cacheName);
    public static object FromConfiguration(Type cacheValueType, string cacheName);
    public static ICacheManager`1<TCacheValue> FromConfiguration(string cacheName, string sectionName);
    public static object FromConfiguration(Type cacheValueType, string cacheName, string sectionName);
    public static ICacheManager`1<TCacheValue> FromConfiguration(string cacheName, ICacheManagerConfiguration configuration);
    public static ICacheManager`1<TCacheValue> FromConfiguration(ICacheManagerConfiguration configuration);
    public static object FromConfiguration(Type cacheValueType, string cacheName, ICacheManagerConfiguration configuration);
    public static object FromConfiguration(Type cacheValueType, ICacheManagerConfiguration configuration);
}
public class CacheManager.Core.CacheHandleConfiguration : object {
    [CompilerGeneratedAttribute]
private bool <EnablePerformanceCounters>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableStatistics>k__BackingField;
    [CompilerGeneratedAttribute]
private ExpirationMode <ExpirationMode>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <ExpirationTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsBackplaneSource>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <HandleType>k__BackingField;
    [CompilerGeneratedAttribute]
private Object[] <ConfigurationTypes>k__BackingField;
    public bool EnablePerformanceCounters { get; public set; }
    public bool EnableStatistics { get; public set; }
    public ExpirationMode ExpirationMode { get; public set; }
    public TimeSpan ExpirationTimeout { get; public set; }
    public string Name { get; public set; }
    public string Key { get; public set; }
    public bool IsBackplaneSource { get; public set; }
    public Type HandleType { get; public set; }
    internal Object[] ConfigurationTypes { get; internal set; }
    public CacheHandleConfiguration(string handleName);
    public CacheHandleConfiguration(string handleName, string configurationKey);
    [CompilerGeneratedAttribute]
public bool get_EnablePerformanceCounters();
    [CompilerGeneratedAttribute]
public void set_EnablePerformanceCounters(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableStatistics();
    [CompilerGeneratedAttribute]
public void set_EnableStatistics(bool value);
    [CompilerGeneratedAttribute]
public ExpirationMode get_ExpirationMode();
    [CompilerGeneratedAttribute]
public void set_ExpirationMode(ExpirationMode value);
    [CompilerGeneratedAttribute]
public TimeSpan get_ExpirationTimeout();
    [CompilerGeneratedAttribute]
public void set_ExpirationTimeout(TimeSpan value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
public void set_Key(string value);
    [CompilerGeneratedAttribute]
public bool get_IsBackplaneSource();
    [CompilerGeneratedAttribute]
public void set_IsBackplaneSource(bool value);
    [CompilerGeneratedAttribute]
public Type get_HandleType();
    [CompilerGeneratedAttribute]
public void set_HandleType(Type value);
    [CompilerGeneratedAttribute]
internal Object[] get_ConfigurationTypes();
    [CompilerGeneratedAttribute]
internal void set_ConfigurationTypes(Object[] value);
    public virtual string ToString();
}
public class CacheManager.Core.CacheItem`1 : object {
    [CompilerGeneratedAttribute]
private DateTime <CreatedUtc>k__BackingField;
    [CompilerGeneratedAttribute]
private ExpirationMode <ExpirationMode>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <ExpirationTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <LastAccessedUtc>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Region>k__BackingField;
    [CompilerGeneratedAttribute]
private T <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ValueType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UsesExpirationDefaults>k__BackingField;
    public bool IsExpired { get; }
    public DateTime CreatedUtc { get; }
    public ExpirationMode ExpirationMode { get; }
    public TimeSpan ExpirationTimeout { get; }
    public string Key { get; }
    public DateTime LastAccessedUtc { get; public set; }
    public string Region { get; }
    public T Value { get; }
    public Type ValueType { get; }
    public bool UsesExpirationDefaults { get; }
    public CacheItem`1(string key, T value);
    public CacheItem`1(string key, string region, T value);
    public CacheItem`1(string key, T value, ExpirationMode expiration, TimeSpan timeout);
    public CacheItem`1(string key, string region, T value, ExpirationMode expiration, TimeSpan timeout);
    protected CacheItem`1(SerializationInfo info, StreamingContext context);
    private CacheItem`1(string key, string region, T value, Nullable`1<ExpirationMode> expiration, Nullable`1<TimeSpan> timeout, Nullable`1<DateTime> created, Nullable`1<DateTime> lastAccessed, bool expirationDefaults);
    public bool get_IsExpired();
    [CompilerGeneratedAttribute]
public sealed virtual DateTime get_CreatedUtc();
    [CompilerGeneratedAttribute]
public sealed virtual ExpirationMode get_ExpirationMode();
    [CompilerGeneratedAttribute]
public sealed virtual TimeSpan get_ExpirationTimeout();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Key();
    [CompilerGeneratedAttribute]
public sealed virtual DateTime get_LastAccessedUtc();
    [CompilerGeneratedAttribute]
public sealed virtual void set_LastAccessedUtc(DateTime value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Region();
    [CompilerGeneratedAttribute]
public T get_Value();
    [CompilerGeneratedAttribute]
public sealed virtual Type get_ValueType();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_UsesExpirationDefaults();
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public virtual string ToString();
    internal CacheItem`1<T> WithExpiration(ExpirationMode mode, TimeSpan timeout, bool usesHandleDefault);
    public CacheItem`1<T> WithAbsoluteExpiration(DateTimeOffset absoluteExpiration);
    public CacheItem`1<T> WithAbsoluteExpiration(TimeSpan absoluteExpiration);
    public CacheItem`1<T> WithSlidingExpiration(TimeSpan slidingExpiration);
    public CacheItem`1<T> WithNoExpiration();
    public CacheItem`1<T> WithDefaultExpiration();
    public CacheItem`1<T> WithValue(T value);
    public CacheItem`1<T> WithCreated(DateTime created);
}
public class CacheManager.Core.CacheManagerConfiguration : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private CacheUpdateMode <UpdateMode>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxRetries>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RetryTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BackplaneConfigurationKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BackplaneChannelName>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <BackplaneType>k__BackingField;
    [CompilerGeneratedAttribute]
private Object[] <BackplaneTypeArguments>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <SerializerType>k__BackingField;
    [CompilerGeneratedAttribute]
private Object[] <SerializerTypeArguments>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <LoggerFactoryType>k__BackingField;
    [CompilerGeneratedAttribute]
private Object[] <LoggerFactoryTypeArguments>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<CacheHandleConfiguration> <CacheHandleConfigurations>k__BackingField;
    public ConfigurationBuilder Builder { get; }
    public string Name { get; public set; }
    public CacheUpdateMode UpdateMode { get; public set; }
    public int MaxRetries { get; public set; }
    public int RetryTimeout { get; public set; }
    public string BackplaneConfigurationKey { get; public set; }
    public string BackplaneChannelName { get; public set; }
    public bool HasBackplane { get; }
    public Type BackplaneType { get; public set; }
    public Object[] BackplaneTypeArguments { get; public set; }
    public Type SerializerType { get; public set; }
    public Object[] SerializerTypeArguments { get; public set; }
    public Type LoggerFactoryType { get; public set; }
    public Object[] LoggerFactoryTypeArguments { get; public set; }
    public IList`1<CacheHandleConfiguration> CacheHandleConfigurations { get; }
    public sealed virtual ConfigurationBuilder get_Builder();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public sealed virtual CacheUpdateMode get_UpdateMode();
    [CompilerGeneratedAttribute]
public void set_UpdateMode(CacheUpdateMode value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_MaxRetries();
    [CompilerGeneratedAttribute]
public void set_MaxRetries(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_RetryTimeout();
    [CompilerGeneratedAttribute]
public void set_RetryTimeout(int value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_BackplaneConfigurationKey();
    [CompilerGeneratedAttribute]
public void set_BackplaneConfigurationKey(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_BackplaneChannelName();
    [CompilerGeneratedAttribute]
public void set_BackplaneChannelName(string value);
    public sealed virtual bool get_HasBackplane();
    [CompilerGeneratedAttribute]
public sealed virtual Type get_BackplaneType();
    [CompilerGeneratedAttribute]
public void set_BackplaneType(Type value);
    [CompilerGeneratedAttribute]
public sealed virtual Object[] get_BackplaneTypeArguments();
    [CompilerGeneratedAttribute]
public void set_BackplaneTypeArguments(Object[] value);
    [CompilerGeneratedAttribute]
public sealed virtual Type get_SerializerType();
    [CompilerGeneratedAttribute]
public void set_SerializerType(Type value);
    [CompilerGeneratedAttribute]
public sealed virtual Object[] get_SerializerTypeArguments();
    [CompilerGeneratedAttribute]
public void set_SerializerTypeArguments(Object[] value);
    [CompilerGeneratedAttribute]
public sealed virtual Type get_LoggerFactoryType();
    [CompilerGeneratedAttribute]
public void set_LoggerFactoryType(Type value);
    [CompilerGeneratedAttribute]
public sealed virtual Object[] get_LoggerFactoryTypeArguments();
    [CompilerGeneratedAttribute]
public void set_LoggerFactoryTypeArguments(Object[] value);
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<CacheHandleConfiguration> get_CacheHandleConfigurations();
    public virtual string ToString();
}
public enum CacheManager.Core.CacheUpdateMode : Enum {
    public int value__;
    public static CacheUpdateMode None;
    public static CacheUpdateMode Up;
}
public class CacheManager.Core.Configuration.CacheHandleDefinition : ConfigurationElement {
    [ConfigurationPropertyAttribute("defaultExpirationMode")]
public ExpirationMode DefaultExpirationMode { get; public set; }
    [ConfigurationPropertyAttribute("defaultTimeout")]
public string DefaultTimeout { get; public set; }
    [ConfigurationPropertyAttribute("type")]
[TypeConverterAttribute("System.Configuration.TypeNameConverter")]
public Type HandleType { get; public set; }
    [ConfigurationPropertyAttribute("id")]
public string Id { get; public set; }
    public ExpirationMode get_DefaultExpirationMode();
    public void set_DefaultExpirationMode(ExpirationMode value);
    public string get_DefaultTimeout();
    public void set_DefaultTimeout(string value);
    public Type get_HandleType();
    public void set_HandleType(Type value);
    public string get_Id();
    public void set_Id(string value);
}
public class CacheManager.Core.Configuration.CacheHandleDefinitionCollection : ConfigurationElementCollection {
    [IteratorStateMachineAttribute("CacheManager.Core.Configuration.CacheHandleDefinitionCollection/<GetEnumerator>d__1")]
public sealed virtual IEnumerator`1<CacheHandleDefinition> GetEnumerator();
    protected virtual ConfigurationElement CreateNewElement();
    protected virtual object GetElementKey(ConfigurationElement element);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IEnumerator <>n__0();
}
public class CacheManager.Core.Configuration.CacheManagerCollection : ConfigurationElementCollection {
    [IteratorStateMachineAttribute("CacheManager.Core.Configuration.CacheManagerCollection/<GetEnumerator>d__0")]
public sealed virtual IEnumerator`1<CacheManagerHandleCollection> GetEnumerator();
    protected virtual ConfigurationElement CreateNewElement();
    protected virtual object GetElementKey(ConfigurationElement element);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IEnumerator <>n__0();
}
public class CacheManager.Core.Configuration.CacheManagerHandle : ConfigurationElement {
    [ConfigurationPropertyAttribute("expirationMode")]
public string ExpirationMode { get; public set; }
    [ConfigurationPropertyAttribute("isBackplaneSource")]
public bool IsBackplaneSource { get; public set; }
    [ConfigurationPropertyAttribute("name")]
public string Name { get; public set; }
    [ConfigurationPropertyAttribute("ref")]
public string RefHandleId { get; public set; }
    [ConfigurationPropertyAttribute("timeout")]
public string Timeout { get; public set; }
    public string get_ExpirationMode();
    public void set_ExpirationMode(string value);
    public bool get_IsBackplaneSource();
    public void set_IsBackplaneSource(bool value);
    public string get_Name();
    public void set_Name(string value);
    public string get_RefHandleId();
    public void set_RefHandleId(string value);
    public string get_Timeout();
    public void set_Timeout(string value);
}
public class CacheManager.Core.Configuration.CacheManagerHandleCollection : ConfigurationElementCollection {
    private static string BackplaneNameKey;
    private static string BackplaneTypeKey;
    private static string SerializerTypeKey;
    private static string EnablePerformanceCountersKey;
    private static string EnableStatisticsKey;
    private static string MaxRetriesKey;
    private static string NameKey;
    private static string RetryTimeoutKey;
    private static string UpdateModeKey;
    [ConfigurationPropertyAttribute("backplaneName")]
public string BackplaneName { get; public set; }
    [ConfigurationPropertyAttribute("backplaneType")]
public string BackplaneType { get; public set; }
    [ConfigurationPropertyAttribute("serializerType")]
public string SerializerType { get; public set; }
    [ConfigurationPropertyAttribute("enablePerformanceCounters")]
public bool EnablePerformanceCounters { get; public set; }
    [ConfigurationPropertyAttribute("enableStatistics")]
public bool EnableStatistics { get; public set; }
    [ConfigurationPropertyAttribute("maxRetries")]
public Nullable`1<int> MaximumRetries { get; public set; }
    [ConfigurationPropertyAttribute("name")]
public string Name { get; public set; }
    [ConfigurationPropertyAttribute("retryTimeout")]
public Nullable`1<int> RetryTimeout { get; public set; }
    [ConfigurationPropertyAttribute("updateMode")]
public CacheUpdateMode UpdateMode { get; public set; }
    public string get_BackplaneName();
    public void set_BackplaneName(string value);
    public string get_BackplaneType();
    public void set_BackplaneType(string value);
    public string get_SerializerType();
    public void set_SerializerType(string value);
    public bool get_EnablePerformanceCounters();
    public void set_EnablePerformanceCounters(bool value);
    public bool get_EnableStatistics();
    public void set_EnableStatistics(bool value);
    public Nullable`1<int> get_MaximumRetries();
    public void set_MaximumRetries(Nullable`1<int> value);
    public string get_Name();
    public void set_Name(string value);
    public Nullable`1<int> get_RetryTimeout();
    public void set_RetryTimeout(Nullable`1<int> value);
    public CacheUpdateMode get_UpdateMode();
    public void set_UpdateMode(CacheUpdateMode value);
    [IteratorStateMachineAttribute("CacheManager.Core.Configuration.CacheManagerHandleCollection/<GetEnumerator>d__37")]
public sealed virtual IEnumerator`1<CacheManagerHandle> GetEnumerator();
    protected virtual ConfigurationElement CreateNewElement();
    protected virtual object GetElementKey(ConfigurationElement element);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IEnumerator <>n__0();
}
public class CacheManager.Core.Configuration.CacheManagerSection : ConfigurationSection {
    public static string DefaultSectionName;
    private static string HandlesName;
    private static string ManagersName;
    private static string RedisName;
    [CompilerGeneratedAttribute]
private string <Xmlns>k__BackingField;
    [ConfigurationPropertyAttribute("cacheHandles")]
[ConfigurationCollectionAttribute("CacheManager.Core.Configuration.CacheHandleDefinitionCollection")]
public CacheHandleDefinitionCollection CacheHandleDefinitions { get; }
    [ConfigurationPropertyAttribute("managers")]
[ConfigurationCollectionAttribute("CacheManager.Core.Configuration.CacheManagerCollection")]
public CacheManagerCollection CacheManagers { get; }
    [ConfigurationPropertyAttribute("xmlns")]
public string Xmlns { get; public set; }
    public CacheHandleDefinitionCollection get_CacheHandleDefinitions();
    public CacheManagerCollection get_CacheManagers();
    [CompilerGeneratedAttribute]
public string get_Xmlns();
    [CompilerGeneratedAttribute]
public void set_Xmlns(string value);
}
public class CacheManager.Core.ConfigurationBuilder : ConfigurationBuilderCachePart {
    private static string Hours;
    private static string Minutes;
    private static string Seconds;
    public ConfigurationBuilder(string name);
    public ConfigurationBuilder(ICacheManagerConfiguration forConfiguration);
    public ConfigurationBuilder(string name, ICacheManagerConfiguration forConfiguration);
    public static ICacheManagerConfiguration BuildConfiguration(Action`1<ConfigurationBuilderCachePart> settings);
    public static ICacheManagerConfiguration BuildConfiguration(string name, Action`1<ConfigurationBuilderCachePart> settings);
    public static ICacheManagerConfiguration LoadConfiguration(string configName);
    public static ICacheManagerConfiguration LoadConfiguration(string sectionName, string configName);
    public static ICacheManagerConfiguration LoadConfigurationFile(string configFileName, string configName);
    public static ICacheManagerConfiguration LoadConfigurationFile(string configFileName, string sectionName, string configName);
    internal static CacheManagerConfiguration LoadFromSection(CacheManagerSection section, string configName);
    private static TimeSpan GetTimeSpan(string timespanCfgValue, string propName);
}
public class CacheManager.Core.ConfigurationBuilderCacheHandlePart : object {
    private ConfigurationBuilderCachePart _parent;
    [CompilerGeneratedAttribute]
private CacheHandleConfiguration <Configuration>k__BackingField;
    public ConfigurationBuilderCachePart And { get; }
    internal CacheHandleConfiguration Configuration { get; }
    internal ConfigurationBuilderCacheHandlePart(CacheHandleConfiguration cfg, ConfigurationBuilderCachePart parentPart);
    public ConfigurationBuilderCachePart get_And();
    [CompilerGeneratedAttribute]
internal CacheHandleConfiguration get_Configuration();
    public ICacheManagerConfiguration Build();
    public ConfigurationBuilderCacheHandlePart DisablePerformanceCounters();
    public ConfigurationBuilderCacheHandlePart DisableStatistics();
    public ConfigurationBuilderCacheHandlePart EnablePerformanceCounters();
    public ConfigurationBuilderCacheHandlePart EnableStatistics();
    public ConfigurationBuilderCacheHandlePart WithExpiration(ExpirationMode expirationMode, TimeSpan timeout);
}
public class CacheManager.Core.ConfigurationBuilderCachePart : object {
    [CompilerGeneratedAttribute]
private CacheManagerConfiguration <Configuration>k__BackingField;
    internal CacheManagerConfiguration Configuration { get; }
    internal ConfigurationBuilderCachePart(CacheManagerConfiguration forConfiguration);
    [CompilerGeneratedAttribute]
internal CacheManagerConfiguration get_Configuration();
    public ConfigurationBuilderCachePart WithBackplane(Type backplaneType, string configurationKey, Object[] args);
    public ConfigurationBuilderCachePart WithBackplane(Type backplaneType, string configurationKey, string channelName, Object[] args);
    public ConfigurationBuilderCacheHandlePart WithDictionaryHandle(bool isBackplaneSource);
    public ConfigurationBuilderCacheHandlePart WithDictionaryHandle(string handleName, bool isBackplaneSource);
    public ConfigurationBuilderCacheHandlePart WithHandle(Type cacheHandleBaseType, string handleName, bool isBackplaneSource, Object[] configurationTypes);
    public ConfigurationBuilderCacheHandlePart WithHandle(Type cacheHandleBaseType, string handleName);
    public ConfigurationBuilderCacheHandlePart WithHandle(Type cacheHandleBaseType);
    public ConfigurationBuilderCachePart WithMaxRetries(int retries);
    public ConfigurationBuilderCachePart WithRetryTimeout(int timeoutMillis);
    public ConfigurationBuilderCachePart WithUpdateMode(CacheUpdateMode updateMode);
    public ConfigurationBuilderCachePart WithSerializer(Type serializerType, Object[] args);
    public ConfigurationBuilderCachePart WithBinarySerializer();
    public ConfigurationBuilderCachePart WithBinarySerializer(BinaryFormatter serializationFormatter, BinaryFormatter deserializationFormatter);
    public ConfigurationBuilderCachePart WithLogging(Type loggerFactoryType, Object[] args);
    public ICacheManagerConfiguration Build();
}
public enum CacheManager.Core.ExpirationMode : Enum {
    public int value__;
    public static ExpirationMode Default;
    public static ExpirationMode None;
    public static ExpirationMode Sliding;
    public static ExpirationMode Absolute;
}
[DefaultMemberAttribute("Item")]
public interface CacheManager.Core.ICache`1 {
    public TCacheValue Item { get; public set; }
    public TCacheValue Item { get; public set; }
    public abstract virtual TCacheValue get_Item(string key);
    public abstract virtual void set_Item(string key, TCacheValue value);
    public abstract virtual TCacheValue get_Item(string key, string region);
    public abstract virtual void set_Item(string key, string region, TCacheValue value);
    public abstract virtual bool Add(string key, TCacheValue value);
    public abstract virtual bool Add(string key, TCacheValue value, string region);
    public abstract virtual bool Add(CacheItem`1<TCacheValue> item);
    public abstract virtual void Clear();
    public abstract virtual void ClearRegion(string region);
    public abstract virtual bool Exists(string key);
    public abstract virtual bool Exists(string key, string region);
    public abstract virtual TCacheValue Get(string key);
    public abstract virtual TCacheValue Get(string key, string region);
    public abstract virtual TOut Get(string key);
    public abstract virtual TOut Get(string key, string region);
    public abstract virtual CacheItem`1<TCacheValue> GetCacheItem(string key);
    public abstract virtual CacheItem`1<TCacheValue> GetCacheItem(string key, string region);
    public abstract virtual void Put(string key, TCacheValue value);
    public abstract virtual void Put(string key, TCacheValue value, string region);
    public abstract virtual void Put(CacheItem`1<TCacheValue> item);
    public abstract virtual bool Remove(string key);
    public abstract virtual bool Remove(string key, string region);
}
public interface CacheManager.Core.ICacheManager`1 {
    public IReadOnlyCacheManagerConfiguration Configuration { get; }
    public string Name { get; }
    public IEnumerable`1<BaseCacheHandle`1<TCacheValue>> CacheHandles { get; }
    [CompilerGeneratedAttribute]
public abstract virtual void add_OnAdd(EventHandler`1<CacheActionEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_OnAdd(EventHandler`1<CacheActionEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_OnClear(EventHandler`1<CacheClearEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_OnClear(EventHandler`1<CacheClearEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_OnClearRegion(EventHandler`1<CacheClearRegionEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_OnClearRegion(EventHandler`1<CacheClearRegionEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_OnGet(EventHandler`1<CacheActionEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_OnGet(EventHandler`1<CacheActionEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_OnPut(EventHandler`1<CacheActionEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_OnPut(EventHandler`1<CacheActionEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_OnRemove(EventHandler`1<CacheActionEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_OnRemove(EventHandler`1<CacheActionEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_OnRemoveByHandle(EventHandler`1<CacheItemRemovedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_OnRemoveByHandle(EventHandler`1<CacheItemRemovedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_OnUpdate(EventHandler`1<CacheActionEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_OnUpdate(EventHandler`1<CacheActionEventArgs> value);
    public abstract virtual IReadOnlyCacheManagerConfiguration get_Configuration();
    public abstract virtual string get_Name();
    public abstract virtual IEnumerable`1<BaseCacheHandle`1<TCacheValue>> get_CacheHandles();
    public abstract virtual TCacheValue AddOrUpdate(string key, TCacheValue addValue, Func`2<TCacheValue, TCacheValue> updateValue);
    public abstract virtual TCacheValue AddOrUpdate(string key, string region, TCacheValue addValue, Func`2<TCacheValue, TCacheValue> updateValue);
    public abstract virtual TCacheValue AddOrUpdate(string key, TCacheValue addValue, Func`2<TCacheValue, TCacheValue> updateValue, int maxRetries);
    public abstract virtual TCacheValue AddOrUpdate(string key, string region, TCacheValue addValue, Func`2<TCacheValue, TCacheValue> updateValue, int maxRetries);
    public abstract virtual TCacheValue AddOrUpdate(CacheItem`1<TCacheValue> addItem, Func`2<TCacheValue, TCacheValue> updateValue);
    public abstract virtual TCacheValue AddOrUpdate(CacheItem`1<TCacheValue> addItem, Func`2<TCacheValue, TCacheValue> updateValue, int maxRetries);
    public abstract virtual TCacheValue GetOrAdd(string key, TCacheValue value);
    public abstract virtual TCacheValue GetOrAdd(string key, string region, TCacheValue value);
    public abstract virtual TCacheValue GetOrAdd(string key, Func`2<string, TCacheValue> valueFactory);
    public abstract virtual TCacheValue GetOrAdd(string key, string region, Func`3<string, string, TCacheValue> valueFactory);
    public abstract virtual CacheItem`1<TCacheValue> GetOrAdd(string key, Func`2<string, CacheItem`1<TCacheValue>> valueFactory);
    public abstract virtual CacheItem`1<TCacheValue> GetOrAdd(string key, string region, Func`3<string, string, CacheItem`1<TCacheValue>> valueFactory);
    public abstract virtual bool TryGetOrAdd(string key, Func`2<string, TCacheValue> valueFactory, TCacheValue& value);
    public abstract virtual bool TryGetOrAdd(string key, string region, Func`3<string, string, TCacheValue> valueFactory, TCacheValue& value);
    public abstract virtual bool TryGetOrAdd(string key, Func`2<string, CacheItem`1<TCacheValue>> valueFactory, CacheItem`1& item);
    public abstract virtual bool TryGetOrAdd(string key, string region, Func`3<string, string, CacheItem`1<TCacheValue>> valueFactory, CacheItem`1& item);
    public abstract virtual TCacheValue Update(string key, Func`2<TCacheValue, TCacheValue> updateValue);
    public abstract virtual TCacheValue Update(string key, string region, Func`2<TCacheValue, TCacheValue> updateValue);
    public abstract virtual TCacheValue Update(string key, Func`2<TCacheValue, TCacheValue> updateValue, int maxRetries);
    public abstract virtual TCacheValue Update(string key, string region, Func`2<TCacheValue, TCacheValue> updateValue, int maxRetries);
    public abstract virtual bool TryUpdate(string key, Func`2<TCacheValue, TCacheValue> updateValue, TCacheValue& value);
    public abstract virtual bool TryUpdate(string key, string region, Func`2<TCacheValue, TCacheValue> updateValue, TCacheValue& value);
    public abstract virtual bool TryUpdate(string key, Func`2<TCacheValue, TCacheValue> updateValue, int maxRetries, TCacheValue& value);
    public abstract virtual bool TryUpdate(string key, string region, Func`2<TCacheValue, TCacheValue> updateValue, int maxRetries, TCacheValue& value);
    public abstract virtual void Expire(string key, ExpirationMode mode, TimeSpan timeout);
    public abstract virtual void Expire(string key, string region, ExpirationMode mode, TimeSpan timeout);
    public abstract virtual void Expire(string key, DateTimeOffset absoluteExpiration);
    public abstract virtual void Expire(string key, string region, DateTimeOffset absoluteExpiration);
    public abstract virtual void Expire(string key, TimeSpan slidingExpiration);
    public abstract virtual void Expire(string key, string region, TimeSpan slidingExpiration);
    public abstract virtual void RemoveExpiration(string key);
    public abstract virtual void RemoveExpiration(string key, string region);
}
public interface CacheManager.Core.ICacheManagerConfiguration {
    public IList`1<CacheHandleConfiguration> CacheHandleConfigurations { get; }
    public ConfigurationBuilder Builder { get; }
    public abstract virtual IList`1<CacheHandleConfiguration> get_CacheHandleConfigurations();
    public abstract virtual ConfigurationBuilder get_Builder();
}
public enum CacheManager.Core.Internal.BackplaneAction : Enum {
    public byte value__;
    public static BackplaneAction Invalid;
    public static BackplaneAction Changed;
    public static BackplaneAction Clear;
    public static BackplaneAction ClearRegion;
    public static BackplaneAction Removed;
}
public class CacheManager.Core.Internal.BackplaneMessage : object {
    [CompilerGeneratedAttribute]
private BackplaneAction <Action>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <OwnerIdentity>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Region>k__BackingField;
    [CompilerGeneratedAttribute]
private CacheItemChangedEventAction <ChangeAction>k__BackingField;
    public BackplaneAction Action { get; }
    public string Key { get; }
    public Byte[] OwnerIdentity { get; }
    public string Region { get; private set; }
    public CacheItemChangedEventAction ChangeAction { get; }
    private BackplaneMessage(Byte[] owner, BackplaneAction action);
    private BackplaneMessage(Byte[] owner, BackplaneAction action, string key);
    private BackplaneMessage(Byte[] owner, BackplaneAction action, string key, string region);
    private BackplaneMessage(Byte[] owner, BackplaneAction action, string key, CacheItemChangedEventAction changeAction);
    private BackplaneMessage(Byte[] owner, BackplaneAction action, string key, string region, CacheItemChangedEventAction changeAction);
    [CompilerGeneratedAttribute]
public BackplaneAction get_Action();
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
public Byte[] get_OwnerIdentity();
    [CompilerGeneratedAttribute]
public string get_Region();
    [CompilerGeneratedAttribute]
private void set_Region(string value);
    [CompilerGeneratedAttribute]
public CacheItemChangedEventAction get_ChangeAction();
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static BackplaneMessage ForChanged(Byte[] owner, string key, CacheItemChangedEventAction changeAction);
    public static BackplaneMessage ForChanged(Byte[] owner, string key, string region, CacheItemChangedEventAction changeAction);
    public static BackplaneMessage ForClear(Byte[] owner);
    public static BackplaneMessage ForClearRegion(Byte[] owner, string region);
    public static BackplaneMessage ForRemoved(Byte[] owner, string key);
    public static BackplaneMessage ForRemoved(Byte[] owner, string key, string region);
    public static Byte[] Serialize(BackplaneMessage[] messages);
    private static void SerializeMessage(MessageWriter writer, BackplaneMessage message, bool skipOwner);
    [IteratorStateMachineAttribute("CacheManager.Core.Internal.BackplaneMessage/<Deserialize>d__32")]
public static IEnumerable`1<BackplaneMessage> Deserialize(Byte[] message, Byte[] skipOwner);
    private static BackplaneMessage DeserializeMessage(MessageReader reader, Byte[] existingOwner);
}
[DefaultMemberAttribute("Item")]
public abstract class CacheManager.Core.Internal.BaseCache`1 : object {
    [CompilerGeneratedAttribute]
private bool <Disposed>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Disposing>k__BackingField;
    protected ILogger Logger { get; }
    protected bool Disposed { get; protected set; }
    protected bool Disposing { get; protected set; }
    public TCacheValue Item { get; public set; }
    public TCacheValue Item { get; public set; }
    protected virtual override void Finalize();
    protected abstract virtual ILogger get_Logger();
    [CompilerGeneratedAttribute]
protected bool get_Disposed();
    [CompilerGeneratedAttribute]
protected void set_Disposed(bool value);
    [CompilerGeneratedAttribute]
protected bool get_Disposing();
    [CompilerGeneratedAttribute]
protected void set_Disposing(bool value);
    public virtual TCacheValue get_Item(string key);
    public virtual void set_Item(string key, TCacheValue value);
    public virtual TCacheValue get_Item(string key, string region);
    public virtual void set_Item(string key, string region, TCacheValue value);
    public virtual bool Add(string key, TCacheValue value);
    public virtual bool Add(string key, TCacheValue value, string region);
    public virtual bool Add(CacheItem`1<TCacheValue> item);
    public abstract virtual void Clear();
    public abstract virtual void ClearRegion(string region);
    public sealed virtual void Dispose();
    public abstract virtual bool Exists(string key);
    public abstract virtual bool Exists(string key, string region);
    public virtual TCacheValue Get(string key);
    public virtual TCacheValue Get(string key, string region);
    public virtual TOut Get(string key);
    public virtual TOut Get(string key, string region);
    public virtual CacheItem`1<TCacheValue> GetCacheItem(string key);
    public virtual CacheItem`1<TCacheValue> GetCacheItem(string key, string region);
    public virtual void Put(string key, TCacheValue value);
    public virtual void Put(string key, TCacheValue value, string region);
    public virtual void Put(CacheItem`1<TCacheValue> item);
    public virtual bool Remove(string key);
    public virtual bool Remove(string key, string region);
    protected internal abstract virtual bool AddInternal(CacheItem`1<TCacheValue> item);
    protected internal abstract virtual void PutInternal(CacheItem`1<TCacheValue> item);
    protected virtual void Dispose(bool disposeManaged);
    protected abstract virtual CacheItem`1<TCacheValue> GetCacheItemInternal(string key);
    protected abstract virtual CacheItem`1<TCacheValue> GetCacheItemInternal(string key, string region);
    protected abstract virtual bool RemoveInternal(string key);
    protected abstract virtual bool RemoveInternal(string key, string region);
    protected void CheckDisposed();
    protected static TOut GetCasted(object value);
}
public abstract class CacheManager.Core.Internal.BaseCacheHandle`1 : BaseCache`1<TCacheValue> {
    private object _updateLock;
    [CompilerGeneratedAttribute]
private EventHandler`1<CacheItemRemovedEventArgs> OnCacheSpecificRemove;
    [CompilerGeneratedAttribute]
private CacheHandleConfiguration <Configuration>k__BackingField;
    [CompilerGeneratedAttribute]
private CacheStats`1<TCacheValue> <Stats>k__BackingField;
    public bool IsDistributedCache { get; }
    public CacheHandleConfiguration Configuration { get; }
    public int Count { get; }
    public CacheStats`1<TCacheValue> Stats { get; }
    protected BaseCacheHandle`1(ICacheManagerConfiguration managerConfiguration, CacheHandleConfiguration configuration);
    public virtual bool get_IsDistributedCache();
    [CompilerGeneratedAttribute]
internal void add_OnCacheSpecificRemove(EventHandler`1<CacheItemRemovedEventArgs> value);
    [CompilerGeneratedAttribute]
internal void remove_OnCacheSpecificRemove(EventHandler`1<CacheItemRemovedEventArgs> value);
    [CompilerGeneratedAttribute]
public CacheHandleConfiguration get_Configuration();
    public abstract virtual int get_Count();
    [CompilerGeneratedAttribute]
public virtual CacheStats`1<TCacheValue> get_Stats();
    public virtual UpdateItemResult`1<TCacheValue> Update(string key, Func`2<TCacheValue, TCacheValue> updateValue, int maxRetries);
    public virtual UpdateItemResult`1<TCacheValue> Update(string key, string region, Func`2<TCacheValue, TCacheValue> updateValue, int maxRetries);
    protected internal virtual bool AddInternal(CacheItem`1<TCacheValue> item);
    protected internal virtual void PutInternal(CacheItem`1<TCacheValue> item);
    protected void TriggerCacheSpecificRemove(string key, string region, CacheItemRemovedReason reason, object value);
    protected abstract virtual bool AddInternalPrepared(CacheItem`1<TCacheValue> item);
    protected virtual void Dispose(bool disposeManaged);
    protected virtual CacheItem`1<TCacheValue> GetItemExpiration(CacheItem`1<TCacheValue> item);
    protected abstract virtual void PutInternalPrepared(CacheItem`1<TCacheValue> item);
}
public class CacheManager.Core.Internal.BinaryCacheSerializer : object {
    [CompilerGeneratedAttribute]
private BinaryFormatter <DeserializationFormatter>k__BackingField;
    [CompilerGeneratedAttribute]
private BinaryFormatter <SerializationFormatter>k__BackingField;
    public BinaryFormatter DeserializationFormatter { get; }
    public BinaryFormatter SerializationFormatter { get; }
    public BinaryCacheSerializer(BinaryFormatter serializationFormatter, BinaryFormatter deserializationFormatter);
    [CompilerGeneratedAttribute]
public BinaryFormatter get_DeserializationFormatter();
    [CompilerGeneratedAttribute]
public BinaryFormatter get_SerializationFormatter();
    public sealed virtual object Deserialize(Byte[] data, Type target);
    public sealed virtual CacheItem`1<T> DeserializeCacheItem(Byte[] value, Type valueType);
    public sealed virtual Byte[] Serialize(T value);
    public sealed virtual Byte[] SerializeCacheItem(CacheItem`1<T> value);
}
public enum CacheManager.Core.Internal.CacheActionEventArgOrigin : Enum {
    public int value__;
    public static CacheActionEventArgOrigin Local;
    public static CacheActionEventArgOrigin Remote;
}
public class CacheManager.Core.Internal.CacheActionEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Region>k__BackingField;
    [CompilerGeneratedAttribute]
private CacheActionEventArgOrigin <Origin>k__BackingField;
    public string Key { get; }
    public string Region { get; }
    public CacheActionEventArgOrigin Origin { get; }
    public CacheActionEventArgs(string key, string region);
    public CacheActionEventArgs(string key, string region, CacheActionEventArgOrigin origin);
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
public string get_Region();
    [CompilerGeneratedAttribute]
public CacheActionEventArgOrigin get_Origin();
    public virtual string ToString();
}
public abstract class CacheManager.Core.Internal.CacheBackplane : object {
    public static long MessagesSent;
    public static long MessagesReceived;
    public static long SentChunks;
    [CompilerGeneratedAttribute]
private EventHandler`1<CacheItemChangedEventArgs> Changed;
    [CompilerGeneratedAttribute]
private EventHandler`1<EventArgs> Cleared;
    [CompilerGeneratedAttribute]
private EventHandler`1<RegionEventArgs> ClearedRegion;
    [CompilerGeneratedAttribute]
private EventHandler`1<CacheItemEventArgs> Removed;
    [CompilerGeneratedAttribute]
private ICacheManagerConfiguration <CacheConfiguration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConfigurationKey>k__BackingField;
    public ICacheManagerConfiguration CacheConfiguration { get; }
    public string ConfigurationKey { get; }
    protected CacheBackplane(ICacheManagerConfiguration configuration);
    private static CacheBackplane();
    protected virtual override void Finalize();
    [CompilerGeneratedAttribute]
internal void add_Changed(EventHandler`1<CacheItemChangedEventArgs> value);
    [CompilerGeneratedAttribute]
internal void remove_Changed(EventHandler`1<CacheItemChangedEventArgs> value);
    [CompilerGeneratedAttribute]
internal void add_Cleared(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
internal void remove_Cleared(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
internal void add_ClearedRegion(EventHandler`1<RegionEventArgs> value);
    [CompilerGeneratedAttribute]
internal void remove_ClearedRegion(EventHandler`1<RegionEventArgs> value);
    [CompilerGeneratedAttribute]
internal void add_Removed(EventHandler`1<CacheItemEventArgs> value);
    [CompilerGeneratedAttribute]
internal void remove_Removed(EventHandler`1<CacheItemEventArgs> value);
    [CompilerGeneratedAttribute]
public ICacheManagerConfiguration get_CacheConfiguration();
    [CompilerGeneratedAttribute]
public string get_ConfigurationKey();
    public sealed virtual void Dispose();
    public abstract virtual void NotifyChange(string key, CacheItemChangedEventAction action);
    public abstract virtual void NotifyChange(string key, string region, CacheItemChangedEventAction action);
    public abstract virtual void NotifyClear();
    public abstract virtual void NotifyClearRegion(string region);
    public abstract virtual void NotifyRemove(string key);
    public abstract virtual void NotifyRemove(string key, string region);
    protected internal void TriggerChanged(string key, CacheItemChangedEventAction action);
    protected internal void TriggerChanged(string key, string region, CacheItemChangedEventAction action);
    protected internal void TriggerCleared();
    protected internal void TriggerClearedRegion(string region);
    protected internal void TriggerRemoved(string key);
    protected internal void TriggerRemoved(string key, string region);
    protected virtual void Dispose(bool managed);
}
public class CacheManager.Core.Internal.CacheClearEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private CacheActionEventArgOrigin <Origin>k__BackingField;
    public CacheActionEventArgOrigin Origin { get; }
    public CacheClearEventArgs(CacheActionEventArgOrigin origin);
    [CompilerGeneratedAttribute]
public CacheActionEventArgOrigin get_Origin();
    public virtual string ToString();
}
public class CacheManager.Core.Internal.CacheClearRegionEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private string <Region>k__BackingField;
    [CompilerGeneratedAttribute]
private CacheActionEventArgOrigin <Origin>k__BackingField;
    public string Region { get; }
    public CacheActionEventArgOrigin Origin { get; }
    public CacheClearRegionEventArgs(string region, CacheActionEventArgOrigin origin);
    [CompilerGeneratedAttribute]
public string get_Region();
    [CompilerGeneratedAttribute]
public CacheActionEventArgOrigin get_Origin();
    public virtual string ToString();
}
public enum CacheManager.Core.Internal.CacheItemChangedEventAction : Enum {
    public byte value__;
    public static CacheItemChangedEventAction Invalid;
    public static CacheItemChangedEventAction Put;
    public static CacheItemChangedEventAction Add;
    public static CacheItemChangedEventAction Update;
}
internal class CacheManager.Core.Internal.CacheItemChangedEventArgs : CacheItemEventArgs {
    [CompilerGeneratedAttribute]
private CacheItemChangedEventAction <Action>k__BackingField;
    public CacheItemChangedEventAction Action { get; }
    public CacheItemChangedEventArgs(string key, CacheItemChangedEventAction action);
    public CacheItemChangedEventArgs(string key, string region, CacheItemChangedEventAction action);
    [CompilerGeneratedAttribute]
public CacheItemChangedEventAction get_Action();
}
internal class CacheManager.Core.Internal.CacheItemEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Region>k__BackingField;
    public string Key { get; }
    public string Region { get; }
    public CacheItemEventArgs(string key);
    public CacheItemEventArgs(string key, string region);
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
public string get_Region();
}
public class CacheManager.Core.Internal.CacheItemRemovedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Region>k__BackingField;
    [CompilerGeneratedAttribute]
private CacheItemRemovedReason <Reason>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Level>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    public string Key { get; }
    public string Region { get; }
    public CacheItemRemovedReason Reason { get; }
    public int Level { get; }
    public object Value { get; }
    public CacheItemRemovedEventArgs(string key, string region, CacheItemRemovedReason reason, object value, int level);
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
public string get_Region();
    [CompilerGeneratedAttribute]
public CacheItemRemovedReason get_Reason();
    [CompilerGeneratedAttribute]
public int get_Level();
    [CompilerGeneratedAttribute]
public object get_Value();
    public virtual string ToString();
}
public enum CacheManager.Core.Internal.CacheItemRemovedReason : Enum {
    public int value__;
    public static CacheItemRemovedReason Expired;
    public static CacheItemRemovedReason Evicted;
    public static CacheItemRemovedReason ExternalDelete;
}
internal class CacheManager.Core.Internal.CachePerformanceCounters`1 : object {
    private static string Category;
    private static string Entries;
    private static string HitRatio;
    private static string HitRatioBase;
    private static string Hits;
    private static string HitsPerSecond;
    private static string Misses;
    private static string ReadsPerSecond;
    private static string Writes;
    private static string WritesPerSecond;
    private static int _numStatsCounters;
    private Timer _counterTimer;
    private string _instanceName;
    private CacheStats`1<T> _stats;
    private Int64[] _statsCounts;
    private PerformanceCounter[] _counters;
    private bool _enabled;
    private object _updateLock;
    public CachePerformanceCounters`1(string cacheName, string handleName, CacheStats`1<T> stats);
    private static CachePerformanceCounters`1();
    protected virtual override void Finalize();
    public void Decrement(CachePerformanceCounterType type);
    public sealed virtual void Dispose();
    public void Increment(CachePerformanceCounterType type);
    public void IncrementBy(CachePerformanceCounterType type, long value);
    public void SetValue(CachePerformanceCounterType type, long value);
    private static void InitializeCategory();
    private void Dispose(bool disposeManaged);
    private PerformanceCounter GetCounter(CachePerformanceCounterType type);
    private void InitializeCounters();
    private void PerformanceCounterWorker(object state);
    private void ResetCounters();
}
internal enum CacheManager.Core.Internal.CachePerformanceCounterType : Enum {
    public int value__;
    public static CachePerformanceCounterType Items;
    public static CachePerformanceCounterType HitRatio;
    public static CachePerformanceCounterType HitRatioBase;
    public static CachePerformanceCounterType TotalHits;
    public static CachePerformanceCounterType TotalMisses;
    public static CachePerformanceCounterType TotalWrites;
    public static CachePerformanceCounterType ReadsPerSecond;
    public static CachePerformanceCounterType WritesPerSecond;
    public static CachePerformanceCounterType HitsPerSecond;
}
[ExtensionAttribute]
internal static class CacheManager.Core.Internal.CacheReflectionHelper : object {
    internal static ILoggerFactory CreateLoggerFactory(ICacheManagerConfiguration configuration);
    internal static ICacheSerializer CreateSerializer(ICacheManagerConfiguration configuration, ILoggerFactory loggerFactory);
    internal static CacheBackplane CreateBackplane(ICacheManagerConfiguration configuration, ILoggerFactory loggerFactory);
    internal static ICollection`1<BaseCacheHandle`1<TCacheValue>> CreateCacheHandles(BaseCacheManager`1<TCacheValue> manager, ILoggerFactory loggerFactory, ICacheSerializer serializer);
    internal static object CreateInstance(Type instanceType, Object[] knownInstances);
    private static Object[] MatchArguments(IEnumerable`1<ConstructorInfo> constructors, Object[] instances);
    [ExtensionAttribute]
private static IEnumerable`1<Type> GetGenericBaseTypes(Type type);
    private static void ValidateCacheHandleGenericTypeArguments(Type handle);
    private static void CheckImplements(Type type);
    private static void CheckExtends(Type type);
}
public abstract class CacheManager.Core.Internal.CacheSerializer : object {
    protected abstract virtual Type GetOpenGeneric();
    protected abstract virtual object CreateNewItem(ICacheItemProperties properties, object value);
    public abstract virtual Byte[] Serialize(T value);
    public abstract virtual object Deserialize(Byte[] data, Type target);
    public virtual Byte[] SerializeCacheItem(CacheItem`1<T> value);
    public virtual CacheItem`1<T> DeserializeCacheItem(Byte[] value, Type valueType);
    private object CreateFromCacheItem(CacheItem`1<TCacheValue> source);
}
public class CacheManager.Core.Internal.CacheStats`1 : object {
    private static string _nullRegionKey;
    private ConcurrentDictionary`2<string, CacheStatsCounter> _counters;
    private bool _isPerformanceCounterEnabled;
    private bool _isStatsEnabled;
    private CachePerformanceCounters`1<TCacheValue> _performanceCounters;
    public CacheStats`1(string cacheName, string handleName, bool enabled, bool enablePerformanceCounters);
    private static CacheStats`1();
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    public long GetStatistic(CacheStatsCounterType type, string region);
    public long GetStatistic(CacheStatsCounterType type);
    public void OnAdd(CacheItem`1<TCacheValue> item);
    public void OnClear();
    public void OnClearRegion(string region);
    public void OnGet(string region);
    public void OnHit(string region);
    public void OnMiss(string region);
    public void OnPut(CacheItem`1<TCacheValue> item, bool itemAdded);
    public void OnRemove(string region);
    public void OnUpdate(string key, string region, UpdateItemResult`1<TCacheValue> result);
    private void Dispose(bool disposeManaged);
    private CacheStatsCounter GetCounter(string key);
    [IteratorStateMachineAttribute("CacheManager.Core.Internal.CacheStats`1/<GetWorkingCounters>d__21")]
private IEnumerable`1<CacheStatsCounter> GetWorkingCounters(string region);
}
internal class CacheManager.Core.Internal.CacheStatsCounter : object {
    private Int64[] modreq(System.Runtime.CompilerServices.IsVolatile) _counters;
    public void Add(CacheStatsCounterType type, long value);
    public void Decrement(CacheStatsCounterType type);
    public long Get(CacheStatsCounterType type);
    public void Increment(CacheStatsCounterType type);
    public void Set(CacheStatsCounterType type, long value);
}
public enum CacheManager.Core.Internal.CacheStatsCounterType : Enum {
    public int value__;
    public static CacheStatsCounterType Hits;
    public static CacheStatsCounterType Misses;
    public static CacheStatsCounterType Items;
    public static CacheStatsCounterType RemoveCalls;
    public static CacheStatsCounterType AddCalls;
    public static CacheStatsCounterType PutCalls;
    public static CacheStatsCounterType GetCalls;
    public static CacheStatsCounterType ClearCalls;
    public static CacheStatsCounterType ClearRegionCalls;
}
public class CacheManager.Core.Internal.DictionaryCacheHandle`1 : BaseCacheHandle`1<TCacheValue> {
    private static int ScanInterval;
    private static Random _random;
    private ConcurrentDictionary`2<string, CacheItem`1<TCacheValue>> _cache;
    private Timer _timer;
    private int _scanRunning;
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    public int Count { get; }
    protected ILogger Logger { get; }
    public DictionaryCacheHandle`1(ICacheManagerConfiguration managerConfiguration, CacheHandleConfiguration configuration, ILoggerFactory loggerFactory);
    private static DictionaryCacheHandle`1();
    public virtual int get_Count();
    [CompilerGeneratedAttribute]
protected virtual ILogger get_Logger();
    public virtual void Clear();
    public virtual void ClearRegion(string region);
    public virtual bool Exists(string key);
    public virtual bool Exists(string key, string region);
    protected virtual bool AddInternalPrepared(CacheItem`1<TCacheValue> item);
    protected virtual CacheItem`1<TCacheValue> GetCacheItemInternal(string key);
    protected virtual CacheItem`1<TCacheValue> GetCacheItemInternal(string key, string region);
    protected virtual void PutInternalPrepared(CacheItem`1<TCacheValue> item);
    protected virtual bool RemoveInternal(string key);
    protected virtual bool RemoveInternal(string key, string region);
    private static string GetKey(string key, string region);
    private static bool IsExpired(CacheItem`1<TCacheValue> item, DateTime now);
    private void TimerLoop(object state);
    private int ScanForExpiredItems();
}
public interface CacheManager.Core.Internal.ICacheItemConverter {
    public abstract virtual CacheItem`1<TTarget> ToCacheItem();
}
public interface CacheManager.Core.Internal.ICacheItemProperties {
    public DateTime CreatedUtc { get; }
    public ExpirationMode ExpirationMode { get; }
    public TimeSpan ExpirationTimeout { get; }
    public string Key { get; }
    public DateTime LastAccessedUtc { get; public set; }
    public string Region { get; }
    public bool UsesExpirationDefaults { get; }
    public Type ValueType { get; }
    public abstract virtual DateTime get_CreatedUtc();
    public abstract virtual ExpirationMode get_ExpirationMode();
    public abstract virtual TimeSpan get_ExpirationTimeout();
    public abstract virtual string get_Key();
    public abstract virtual DateTime get_LastAccessedUtc();
    public abstract virtual void set_LastAccessedUtc(DateTime value);
    public abstract virtual string get_Region();
    public abstract virtual bool get_UsesExpirationDefaults();
    public abstract virtual Type get_ValueType();
}
public interface CacheManager.Core.Internal.ICacheSerializer {
    public abstract virtual Byte[] Serialize(T value);
    public abstract virtual object Deserialize(Byte[] data, Type target);
    public abstract virtual Byte[] SerializeCacheItem(CacheItem`1<T> value);
    public abstract virtual CacheItem`1<T> DeserializeCacheItem(Byte[] value, Type valueType);
}
internal class CacheManager.Core.Internal.RegionEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private string <Region>k__BackingField;
    public string Region { get; }
    public RegionEventArgs(string region);
    [CompilerGeneratedAttribute]
public string get_Region();
}
[AttributeUsageAttribute("4")]
public class CacheManager.Core.Internal.RequiresSerializerAttribute : Attribute {
}
[DataContractAttribute]
public abstract class CacheManager.Core.Internal.SerializerCacheItem`1 : object {
    [DataMemberAttribute]
public long CreatedUtc { get; public set; }
    [DataMemberAttribute]
public ExpirationMode ExpirationMode { get; public set; }
    [DataMemberAttribute]
public double ExpirationTimeout { get; public set; }
    [DataMemberAttribute]
public string Key { get; public set; }
    [DataMemberAttribute]
public long LastAccessedUtc { get; public set; }
    [DataMemberAttribute]
public string Region { get; public set; }
    [DataMemberAttribute]
public bool UsesExpirationDefaults { get; public set; }
    [DataMemberAttribute]
public string ValueType { get; public set; }
    [DataMemberAttribute]
public T Value { get; public set; }
    public SerializerCacheItem`1(ICacheItemProperties properties, object value);
    public abstract virtual long get_CreatedUtc();
    public abstract virtual void set_CreatedUtc(long value);
    public abstract virtual ExpirationMode get_ExpirationMode();
    public abstract virtual void set_ExpirationMode(ExpirationMode value);
    public abstract virtual double get_ExpirationTimeout();
    public abstract virtual void set_ExpirationTimeout(double value);
    public abstract virtual string get_Key();
    public abstract virtual void set_Key(string value);
    public abstract virtual long get_LastAccessedUtc();
    public abstract virtual void set_LastAccessedUtc(long value);
    public abstract virtual string get_Region();
    public abstract virtual void set_Region(string value);
    public abstract virtual bool get_UsesExpirationDefaults();
    public abstract virtual void set_UsesExpirationDefaults(bool value);
    public abstract virtual string get_ValueType();
    public abstract virtual void set_ValueType(string value);
    public abstract virtual T get_Value();
    public abstract virtual void set_Value(T value);
    public sealed virtual CacheItem`1<TTarget> ToCacheItem();
}
public static class CacheManager.Core.Internal.TypeCache : object {
    private static Dictionary`2<string, Type> _types;
    private static object _typesLock;
    private static List`1<Func`2<string, Type>> _resolvers;
    [CompilerGeneratedAttribute]
private static Type <ObjectType>k__BackingField;
    public static Type ObjectType { get; }
    private static TypeCache();
    [CompilerGeneratedAttribute]
public static Type get_ObjectType();
    public static void RegisterResolveType(Func`2<string, Type> resolve);
    public static Type GetType(string type);
}
public static class CacheManager.Core.Internal.UpdateItemResult : object {
    public static UpdateItemResult`1<TCacheValue> ForItemDidNotExist();
    public static UpdateItemResult`1<TCacheValue> ForFactoryReturnedNull();
    public static UpdateItemResult`1<TCacheValue> ForSuccess(CacheItem`1<TCacheValue> value, bool conflictOccurred, int triesNeeded);
    public static UpdateItemResult`1<TCacheValue> ForTooManyRetries(int triesNeeded);
}
public class CacheManager.Core.Internal.UpdateItemResult`1 : object {
    [CompilerGeneratedAttribute]
private int <NumberOfTriesNeeded>k__BackingField;
    [CompilerGeneratedAttribute]
private UpdateItemResultState <UpdateState>k__BackingField;
    [CompilerGeneratedAttribute]
private CacheItem`1<TCacheValue> <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <VersionConflictOccurred>k__BackingField;
    public int NumberOfTriesNeeded { get; }
    public UpdateItemResultState UpdateState { get; }
    public CacheItem`1<TCacheValue> Value { get; }
    public bool VersionConflictOccurred { get; }
    internal UpdateItemResult`1(CacheItem`1<TCacheValue> value, UpdateItemResultState state, bool conflictOccurred, int triesNeeded);
    [CompilerGeneratedAttribute]
public int get_NumberOfTriesNeeded();
    [CompilerGeneratedAttribute]
public UpdateItemResultState get_UpdateState();
    [CompilerGeneratedAttribute]
public CacheItem`1<TCacheValue> get_Value();
    [CompilerGeneratedAttribute]
public bool get_VersionConflictOccurred();
}
public enum CacheManager.Core.Internal.UpdateItemResultState : Enum {
    public int value__;
    public static UpdateItemResultState Success;
    public static UpdateItemResultState TooManyRetries;
    public static UpdateItemResultState ItemDidNotExist;
    public static UpdateItemResultState FactoryReturnedNull;
}
public interface CacheManager.Core.IReadOnlyCacheManagerConfiguration {
    public string BackplaneChannelName { get; }
    public string BackplaneConfigurationKey { get; }
    public Type BackplaneType { get; }
    public Object[] BackplaneTypeArguments { get; }
    public bool HasBackplane { get; }
    public Type LoggerFactoryType { get; }
    public Object[] LoggerFactoryTypeArguments { get; }
    public int MaxRetries { get; }
    public string Name { get; }
    public int RetryTimeout { get; }
    public Type SerializerType { get; }
    public Object[] SerializerTypeArguments { get; }
    public CacheUpdateMode UpdateMode { get; }
    public abstract virtual string get_BackplaneChannelName();
    public abstract virtual string get_BackplaneConfigurationKey();
    public abstract virtual Type get_BackplaneType();
    public abstract virtual Object[] get_BackplaneTypeArguments();
    public abstract virtual bool get_HasBackplane();
    public abstract virtual Type get_LoggerFactoryType();
    public abstract virtual Object[] get_LoggerFactoryTypeArguments();
    public abstract virtual int get_MaxRetries();
    public abstract virtual string get_Name();
    public abstract virtual int get_RetryTimeout();
    public abstract virtual Type get_SerializerType();
    public abstract virtual Object[] get_SerializerTypeArguments();
    public abstract virtual CacheUpdateMode get_UpdateMode();
}
public interface CacheManager.Core.Logging.ILogger {
    public abstract virtual void Log(LogLevel logLevel, int eventId, object message, Exception exception);
    public abstract virtual bool IsEnabled(LogLevel logLevel);
    public abstract virtual IDisposable BeginScope(object state);
}
public interface CacheManager.Core.Logging.ILoggerFactory {
    public abstract virtual ILogger CreateLogger(string categoryName);
    public abstract virtual ILogger CreateLogger(T instance);
}
[ExtensionAttribute]
public static class CacheManager.Core.Logging.LoggerExtensions : object {
    [ExtensionAttribute]
public static void LogCritical(ILogger logger, string message, Object[] args);
    [ExtensionAttribute]
public static void LogCritical(ILogger logger, int eventId, string message, Object[] args);
    [ExtensionAttribute]
public static void LogCritical(ILogger logger, Exception exception, string message, Object[] args);
    [ExtensionAttribute]
public static void LogCritical(ILogger logger, int eventId, Exception exception, string message, Object[] args);
    [ExtensionAttribute]
public static void LogDebug(ILogger logger, string message, Object[] args);
    [ExtensionAttribute]
public static void LogDebug(ILogger logger, int eventId, string message, Object[] args);
    [ExtensionAttribute]
public static void LogDebug(ILogger logger, Exception exception, string message, Object[] args);
    [ExtensionAttribute]
public static void LogDebug(ILogger logger, int eventId, Exception exception, string message, Object[] args);
    [ExtensionAttribute]
public static void LogError(ILogger logger, string message, Object[] args);
    [ExtensionAttribute]
public static void LogError(ILogger logger, int eventId, string message, Object[] args);
    [ExtensionAttribute]
public static void LogError(ILogger logger, Exception exception, string message, Object[] args);
    [ExtensionAttribute]
public static void LogError(ILogger logger, int eventId, Exception exception, string message, Object[] args);
    [ExtensionAttribute]
public static void LogInfo(ILogger logger, string message, Object[] args);
    [ExtensionAttribute]
public static void LogInfo(ILogger logger, int eventId, string message, Object[] args);
    [ExtensionAttribute]
public static void LogInfo(ILogger logger, Exception exception, string message, Object[] args);
    [ExtensionAttribute]
public static void LogInfo(ILogger logger, int eventId, Exception exception, string message, Object[] args);
    [ExtensionAttribute]
public static void LogTrace(ILogger logger, string message, Object[] args);
    [ExtensionAttribute]
public static void LogTrace(ILogger logger, int eventId, string message, Object[] args);
    [ExtensionAttribute]
public static void LogTrace(ILogger logger, Exception exception, string message, Object[] args);
    [ExtensionAttribute]
public static void LogTrace(ILogger logger, int eventId, Exception exception, string message, Object[] args);
    [ExtensionAttribute]
public static void LogWarn(ILogger logger, string message, Object[] args);
    [ExtensionAttribute]
public static void LogWarn(ILogger logger, int eventId, string message, Object[] args);
    [ExtensionAttribute]
public static void LogWarn(ILogger logger, Exception exception, string message, Object[] args);
    [ExtensionAttribute]
public static void LogWarn(ILogger logger, int eventId, Exception exception, string message, Object[] args);
}
public enum CacheManager.Core.Logging.LogLevel : Enum {
    public int value__;
    public static LogLevel Trace;
    public static LogLevel Debug;
    public static LogLevel Information;
    public static LogLevel Warning;
    public static LogLevel Error;
    public static LogLevel Critical;
}
internal class CacheManager.Core.Logging.NullLogger : object {
    public sealed virtual IDisposable BeginScope(object state);
    public sealed virtual bool IsEnabled(LogLevel logLevel);
    public sealed virtual void Log(LogLevel logLevel, int eventId, object message, Exception exception);
}
public class CacheManager.Core.Logging.NullLoggerFactory : object {
    public sealed virtual ILogger CreateLogger(string categoryName);
    public sealed virtual ILogger CreateLogger(T instance);
}
public static class CacheManager.Core.Utility.Clock : object {
    public static long TicksPerMillisecond;
    public static long UnixEpochTicks;
    public static long UnixEpochSeconds;
    private static int DaysPerYear;
    private static int DaysPer4Years;
    private static int DaysPer100Years;
    private static int DaysPer400Years;
    private static int DaysTo1970;
    public static long GetUnixTimestampMillis();
    public static long GetUnixTimestampTicks();
    public static long ToUnixTimestampMillis(DateTime date);
}
public static class CacheManager.Core.Utility.Guard : object {
    [DebuggerStepThroughAttribute]
public static T NotNull(T value, string parameterName);
    [DebuggerStepThroughAttribute]
public static string NotNullOrEmpty(string value, string name);
    [DebuggerStepThroughAttribute]
public static ICollection`1<T> NotNullOrEmpty(ICollection`1<T> value, string name);
    [DebuggerStepThroughAttribute]
public static string NotNullOrWhiteSpace(string value, string name);
    [DebuggerStepThroughAttribute]
public static bool Ensure(bool condition, string message, Object[] args);
    [DebuggerStepThroughAttribute]
public static T EnsureNotNull(T value, string message, Object[] args);
}
public interface CacheManager.Core.Utility.IObjectPoolPolicy`1 {
    public abstract virtual T CreateNew();
    public abstract virtual bool Return(T value);
}
public class CacheManager.Core.Utility.ObjectPool`1 : object {
    private T[] _items;
    private IObjectPoolPolicy`1<T> _policy;
    public ObjectPool`1(IObjectPoolPolicy`1<T> policy, Nullable`1<int> maxItems);
    public T Lease();
    public void Return(T value);
}
[AttributeUsageAttribute("2048")]
public class CacheManager.Core.Utility.ValidatedNotNullAttribute : Attribute {
}
