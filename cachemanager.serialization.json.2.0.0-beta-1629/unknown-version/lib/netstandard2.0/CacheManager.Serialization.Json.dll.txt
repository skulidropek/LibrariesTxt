internal class CacheManager.Core.JsonCacheItem`1 : SerializerCacheItem`1<T> {
    [CompilerGeneratedAttribute]
private long <CreatedUtc>k__BackingField;
    [CompilerGeneratedAttribute]
private ExpirationMode <ExpirationMode>k__BackingField;
    [CompilerGeneratedAttribute]
private double <ExpirationTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private long <LastAccessedUtc>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Region>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UsesExpirationDefaults>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ValueType>k__BackingField;
    [CompilerGeneratedAttribute]
private T <Value>k__BackingField;
    [JsonPropertyAttribute("createdUtc")]
public long CreatedUtc { get; public set; }
    [JsonPropertyAttribute("expirationMode")]
public ExpirationMode ExpirationMode { get; public set; }
    [JsonPropertyAttribute("expirationTimeout")]
public double ExpirationTimeout { get; public set; }
    [JsonPropertyAttribute("key")]
public string Key { get; public set; }
    [JsonPropertyAttribute("lastAccessedUtc")]
public long LastAccessedUtc { get; public set; }
    [JsonPropertyAttribute("region")]
public string Region { get; public set; }
    [JsonPropertyAttribute("usesDefaultExpiration")]
public bool UsesExpirationDefaults { get; public set; }
    [JsonPropertyAttribute("valueType")]
public string ValueType { get; public set; }
    [JsonPropertyAttribute("value")]
public T Value { get; public set; }
    public JsonCacheItem`1(ICacheItemProperties properties, object value);
    [CompilerGeneratedAttribute]
public virtual long get_CreatedUtc();
    [CompilerGeneratedAttribute]
public virtual void set_CreatedUtc(long value);
    [CompilerGeneratedAttribute]
public virtual ExpirationMode get_ExpirationMode();
    [CompilerGeneratedAttribute]
public virtual void set_ExpirationMode(ExpirationMode value);
    [CompilerGeneratedAttribute]
public virtual double get_ExpirationTimeout();
    [CompilerGeneratedAttribute]
public virtual void set_ExpirationTimeout(double value);
    [CompilerGeneratedAttribute]
public virtual string get_Key();
    [CompilerGeneratedAttribute]
public virtual void set_Key(string value);
    [CompilerGeneratedAttribute]
public virtual long get_LastAccessedUtc();
    [CompilerGeneratedAttribute]
public virtual void set_LastAccessedUtc(long value);
    [CompilerGeneratedAttribute]
public virtual string get_Region();
    [CompilerGeneratedAttribute]
public virtual void set_Region(string value);
    [CompilerGeneratedAttribute]
public virtual bool get_UsesExpirationDefaults();
    [CompilerGeneratedAttribute]
public virtual void set_UsesExpirationDefaults(bool value);
    [CompilerGeneratedAttribute]
public virtual string get_ValueType();
    [CompilerGeneratedAttribute]
public virtual void set_ValueType(string value);
    [CompilerGeneratedAttribute]
public virtual T get_Value();
    [CompilerGeneratedAttribute]
public virtual void set_Value(T value);
}
[ExtensionAttribute]
public static class CacheManager.Core.JsonConfigurationBuilderExtensions : object {
    [ExtensionAttribute]
public static ConfigurationBuilderCachePart WithJsonSerializer(ConfigurationBuilderCachePart part);
    [ExtensionAttribute]
public static ConfigurationBuilderCachePart WithJsonSerializer(ConfigurationBuilderCachePart part, JsonSerializerSettings serializationSettings, JsonSerializerSettings deserializationSettings);
    [ExtensionAttribute]
public static ConfigurationBuilderCachePart WithGzJsonSerializer(ConfigurationBuilderCachePart part);
    [ExtensionAttribute]
public static ConfigurationBuilderCachePart WithGzJsonSerializer(ConfigurationBuilderCachePart part, JsonSerializerSettings serializationSettings, JsonSerializerSettings deserializationSettings);
}
public class CacheManager.Serialization.Json.GzJsonCacheSerializer : JsonCacheSerializer {
    public GzJsonCacheSerializer(JsonSerializerSettings serializationSettings, JsonSerializerSettings deserializationSettings);
    public virtual object Deserialize(Byte[] data, Type target);
    public virtual Byte[] Serialize(T value);
    protected virtual Byte[] Compression(Byte[] data);
    protected virtual Byte[] Decompression(Byte[] compressedData);
}
public class CacheManager.Serialization.Json.JsonCacheSerializer : CacheSerializer {
    private static Type _openGenericItemType;
    private ObjectPool`1<StringBuilder> _stringBuilderPool;
    private JsonSerializer _deserializer;
    private JsonSerializer _serializer;
    [CompilerGeneratedAttribute]
private JsonSerializerSettings <DeserializationSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private JsonSerializerSettings <SerializationSettings>k__BackingField;
    public JsonSerializerSettings DeserializationSettings { get; }
    public JsonSerializerSettings SerializationSettings { get; }
    public JsonCacheSerializer(JsonSerializerSettings serializationSettings, JsonSerializerSettings deserializationSettings);
    private static JsonCacheSerializer();
    [CompilerGeneratedAttribute]
public JsonSerializerSettings get_DeserializationSettings();
    [CompilerGeneratedAttribute]
public JsonSerializerSettings get_SerializationSettings();
    public virtual object Deserialize(Byte[] data, Type target);
    public virtual Byte[] Serialize(T value);
    protected virtual Type GetOpenGeneric();
    protected virtual object CreateNewItem(ICacheItemProperties properties, object value);
}
