[ExtensionAttribute]
public static class Cake.Docker.ArgumentsBuilderExtension : object {
    [ExtensionAttribute]
public static void AppendAll(ProcessArgumentBuilder builder, string command, TSettings settings, String[] arguments);
    public static void AppendArguments(ProcessArgumentBuilder builder, TSettings settings, bool preCommand);
    [IteratorStateMachineAttribute("Cake.Docker.ArgumentsBuilderExtension/<GetArgumentFromProperty>d__2`1")]
public static IEnumerable`1<Nullable`1<DockerArgument>> GetArgumentFromProperty(PropertyInfo property, TSettings settings, bool preCommand, bool isSecret);
    public static bool IsPropertyValueSecret(PropertyInfo property, TSettings settings);
    public static string GetArgumentFromAutoProperty(AutoPropertyAttribute attribute, PropertyInfo property, object value);
    public static AutoPropertyAttribute GetAutoPropertyAttributeOrNull(PropertyInfo property);
    public static string GetArgumentFromBoolProperty(PropertyInfo property, bool value);
    public static string GetArgumentFromNullableIntProperty(PropertyInfo property, Nullable`1<int> value);
    public static string GetArgumentFromNullableInt64Property(PropertyInfo property, Nullable`1<long> value);
    public static string GetArgumentFromNullableUInt64Property(PropertyInfo property, Nullable`1<ulong> value);
    public static string GetArgumentFromNullableUInt16Property(PropertyInfo property, Nullable`1<ushort> value);
    public static string GetArgumentFromNullableBoolProperty(PropertyInfo property, Nullable`1<bool> value);
    [IteratorStateMachineAttribute("Cake.Docker.ArgumentsBuilderExtension/<GetArgumentFromDictionaryProperty>d__12")]
public static IEnumerable`1<Nullable`1<DockerArgument>> GetArgumentFromDictionaryProperty(PropertyInfo property, Dictionary`2<string, string> values, bool isSecret);
    [IteratorStateMachineAttribute("Cake.Docker.ArgumentsBuilderExtension/<GetArgumentFromStringArrayProperty>d__13")]
public static IEnumerable`1<Nullable`1<DockerArgument>> GetArgumentFromStringArrayProperty(PropertyInfo property, String[] values, bool isSecret);
    public static Nullable`1<DockerArgument> GetArgumentFromStringArrayListProperty(PropertyInfo property, String[] values, bool isSecret);
    public static Nullable`1<DockerArgument> GetArgumentFromStringProperty(PropertyInfo property, string value, bool isSecret);
    public static string GetArgumentFromNullableTimeSpanProperty(PropertyInfo property, Nullable`1<TimeSpan> value);
    public static string ConvertTimeSpan(TimeSpan source);
    public static string GetPropertyName(string name);
}
public enum Cake.Docker.AutoArrayType : Enum {
    public int value__;
    public static AutoArrayType MultipleInstances;
    public static AutoArrayType List;
}
[AttributeUsageAttribute("128")]
public class Cake.Docker.AutoPropertyAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Format>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OnlyWhenTrue>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PreCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private AutoArrayType <AutoArrayType>k__BackingField;
    public string Format { get; public set; }
    public bool OnlyWhenTrue { get; public set; }
    public bool PreCommand { get; public set; }
    public AutoArrayType AutoArrayType { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Format();
    [CompilerGeneratedAttribute]
public void set_Format(string value);
    [CompilerGeneratedAttribute]
public bool get_OnlyWhenTrue();
    [CompilerGeneratedAttribute]
public void set_OnlyWhenTrue(bool value);
    [CompilerGeneratedAttribute]
public bool get_PreCommand();
    [CompilerGeneratedAttribute]
public void set_PreCommand(bool value);
    [CompilerGeneratedAttribute]
public AutoArrayType get_AutoArrayType();
    [CompilerGeneratedAttribute]
public void set_AutoArrayType(AutoArrayType value);
}
public abstract class Cake.Docker.AutoToolSettings : ToolSettings {
    public HashSet`1<string> SecretProperties;
    protected virtual String[] CollectSecretProperties();
}
public static class Cake.Docker.Constants : object {
    public static string BoolWithTrueDefaultFormat;
}
[ExtensionAttribute]
[CakeAliasCategoryAttribute("Docker")]
public static class Cake.Docker.DockerAliases : object {
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void DockerBuildXBake(ICakeContext context, IEnumerable`1<string> target);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void DockerBuildXBake(ICakeContext context, DockerBuildXBakeSettings settings, IEnumerable`1<string> target);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void DockerBuildXBuild(ICakeContext context, string target);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void DockerBuildXBuild(ICakeContext context, DockerBuildXBuildSettings settings, string target);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void DockerBuildXCreate(ICakeContext context, string target);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void DockerBuildXCreate(ICakeContext context, DockerBuildXCreateSettings settings, string target);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static IEnumerable`1<string> DockerBuildXDu(ICakeContext context, DockerBuildXDuSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void DockerBuildXImageToolsCreate(ICakeContext context, IEnumerable`1<string> target);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void DockerBuildXImageToolsCreate(ICakeContext context, DockerBuildXImageToolsCreateSettings settings, IEnumerable`1<string> target);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static IEnumerable`1<string> DockerBuildXImageToolsInspect(ICakeContext context, string name);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static IEnumerable`1<string> DockerBuildXImageToolsInspect(ICakeContext context, DockerBuildXImageToolsInspectSettings settings, string name);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static IEnumerable`1<string> DockerBuildXInspect(ICakeContext context, string name);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static IEnumerable`1<string> DockerBuildXInspect(ICakeContext context, DockerBuildXInspectSettings settings, string name);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void DockerBuildXInstall(ICakeContext context);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static IEnumerable`1<string> DockerBuildXLs(ICakeContext context, DockerBuildXLsSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void DockerBuildXPrune(ICakeContext context, DockerBuildXPruneSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void DockerBuildXRm(ICakeContext context, string name);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void DockerBuildXRm(ICakeContext context, DockerBuildXRmSettings settings, string name);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void DockerBuildXStop(ICakeContext context, string name);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void DockerBuildXStop(ICakeContext context, DockerBuildXStopSettings settings, string name);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void DockerBuildXUninstall(ICakeContext context);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void DockerBuildXUse(ICakeContext context, string name);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void DockerBuildXUse(ICakeContext context, DockerBuildXUseSettings settings, string name);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static IEnumerable`1<string> DockerBuildXVersion(ICakeContext context, DockerBuildXVersionSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void DockerComposeBuild(ICakeContext context, String[] services);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void DockerComposeBuild(ICakeContext context, DockerComposeBuildSettings settings, String[] services);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void DockerComposeCp(ICakeContext context, string source, string destination);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void DockerComposeCp(ICakeContext context, string source, string destination, DockerComposeCpSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void DockerComposeCreate(ICakeContext context, String[] services);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void DockerComposeCreate(ICakeContext context, DockerComposeCreateSettings settings, String[] services);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void DockerComposeDown(ICakeContext context);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void DockerComposeDown(ICakeContext context, DockerComposeDownSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void DockerComposeExec(ICakeContext context, string service, string command, String[] args);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void DockerComposeExec(ICakeContext context, DockerComposeExecSettings settings, string service, string command, String[] args);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void DockerComposeKill(ICakeContext context);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void DockerComposeKill(ICakeContext context, DockerComposeKillSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static IEnumerable`1<string> DockerComposeLogs(ICakeContext context);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static IEnumerable`1<string> DockerComposeLogs(ICakeContext context, DockerComposeLogsSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void DockerComposePause(ICakeContext context, String[] services);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void DockerComposePause(ICakeContext context, DockerComposeSettings settings, String[] services);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void DockerComposePort(ICakeContext context, string service, int port);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static IEnumerable`1<string> DockerComposePort(ICakeContext context, DockerComposePortSettings settings, string service, int port);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void DockerComposePs(ICakeContext context, String[] services);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static IEnumerable`1<string> DockerComposePs(ICakeContext context, DockerComposePsSettings settings, String[] services);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void DockerComposePull(ICakeContext context, String[] services);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void DockerComposePull(ICakeContext context, DockerComposePullSettings settings, String[] services);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void DockerComposePush(ICakeContext context, String[] services);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void DockerComposePush(ICakeContext context, DockerComposePushSettings settings, String[] services);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void DockerComposeRestart(ICakeContext context, String[] services);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void DockerComposeRestart(ICakeContext context, DockerComposeRestartSettings settings, String[] services);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void DockerComposeRm(ICakeContext context, String[] services);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void DockerComposeRm(ICakeContext context, DockerComposeRmSettings settings, String[] services);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void DockerComposeRun(ICakeContext context, string service, String[] args);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void DockerComposeRun(ICakeContext context, string service, string command, String[] args);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void DockerComposeRun(ICakeContext context, DockerComposeRunSettings settings, string service, String[] args);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void DockerComposeRun(ICakeContext context, DockerComposeRunSettings settings, string service, string command, String[] args);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void DockerComposeScale(ICakeContext context, String[] services);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void DockerComposeScale(ICakeContext context, DockerComposeSettings settings, String[] services);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void DockerComposeStart(ICakeContext context, String[] services);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void DockerComposeStart(ICakeContext context, DockerComposeSettings settings, String[] services);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void DockerComposeStop(ICakeContext context, String[] services);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void DockerComposeStop(ICakeContext context, DockerComposeBuildSettings settings, String[] services);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void DockerComposeUnpause(ICakeContext context, String[] services);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void DockerComposeUnpause(ICakeContext context, DockerComposeSettings settings, String[] services);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void DockerComposeUp(ICakeContext context, String[] services);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void DockerComposeUp(ICakeContext context, DockerComposeUpSettings settings, String[] services);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void DockerCp(ICakeContext context, string from, string to);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void DockerCp(ICakeContext context, string from, string to, DockerContainerCpSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static string DockerCreate(ICakeContext context, string image, string command, String[] args);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static string DockerCreate(ICakeContext context, DockerContainerCreateSettings settings, string image, string command, String[] args);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void DockerExec(ICakeContext context, string container, string command, String[] args);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void DockerExec(ICakeContext context, DockerContainerExecSettings settings, string container, string command, String[] args);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static IEnumerable`1<string> DockerLogs(ICakeContext context, string container);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static IEnumerable`1<string> DockerLogs(ICakeContext context, DockerContainerLogsSettings settings, string container);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static IEnumerable`1<string> DockerContainerLs(ICakeContext context, DockerContainerLsSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static string DockerPs(ICakeContext context, DockerContainerPsSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void DockerRm(ICakeContext context, String[] containers);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void DockerRm(ICakeContext context, DockerContainerRmSettings settings, String[] containers);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static string DockerRun(ICakeContext context, string image, string command, String[] args);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static string DockerRun(ICakeContext context, DockerContainerRunSettings settings, string image, string command, String[] args);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void DockerRunWithoutResult(ICakeContext context, string image, string command, String[] args);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void DockerRunWithoutResult(ICakeContext context, DockerContainerRunSettings settings, string image, string command, String[] args);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void DockerStart(ICakeContext context, String[] containers);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void DockerStart(ICakeContext context, DockerContainerStartSettings settings, String[] containers);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void DockerStop(ICakeContext context, String[] containers);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void DockerStop(ICakeContext context, DockerContainerStopSettings settings, String[] containers);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static IEnumerable`1<string> DockerCustomCommand(ICakeContext context, string command);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static IEnumerable`1<string> DockerCustomCommand(ICakeContext context, DockerCustomCommandSettings settings, string command);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void DockerBuild(ICakeContext context, string path);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void DockerBuild(ICakeContext context, DockerImageBuildSettings settings, string path);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void DockerLoad(ICakeContext context, DockerImageLoadSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static IEnumerable`1<string> DockerImageLs(ICakeContext context, DockerImageLsSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static IEnumerable`1<string> DockerImagePrune(ICakeContext context);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static IEnumerable`1<string> DockerImagePrune(ICakeContext context, DockerImagePruneSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void DockerPull(ICakeContext context, string imageReference);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void DockerPull(ICakeContext context, DockerImagePullSettings settings, string imageReference);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void DockerPush(ICakeContext context, string imageReference);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void DockerPush(ICakeContext context, DockerImagePushSettings settings, string imageReference);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void DockerRmi(ICakeContext context, String[] images);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void DockerRemove(ICakeContext context, DockerImageRemoveSettings settings, String[] images);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void DockerSave(ICakeContext context, DockerImageSaveSettings settings, String[] images);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void DockerTag(ICakeContext context, string imageReference, string registryReference);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[ExperimentalAttribute]
public static void DockerManifestAnnotate(ICakeContext context, string manifestList, string manifest);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[ExperimentalAttribute]
public static void DockerManifestAnnotate(ICakeContext context, DockerManifestAnnotateSettings settings, string manifestList, string manifest);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[ExperimentalAttribute]
public static void DockerManifestCreate(ICakeContext context, string manifestList, string manifest, String[] manifests);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[ExperimentalAttribute]
public static void DockerManifestCreate(ICakeContext context, DockerManifestCreateSettings settings, string manifestList, string manifest, String[] manifests);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[ExperimentalAttribute]
public static void DockerManifestInspect(ICakeContext context, string manifest);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[ExperimentalAttribute]
public static void DockerManifestInspect(ICakeContext context, string manifestList, string manifest);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[ExperimentalAttribute]
public static void DockerManifestInspect(ICakeContext context, DockerManifestInspectSettings settings, string manifestList, string manifest);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[ExperimentalAttribute]
public static void DockerManifestPush(ICakeContext context, string manifestList);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[ExperimentalAttribute]
public static void DockerManifestPush(ICakeContext context, DockerManifestPushSettings settings, string manifestList);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void DockerNetworkConnect(ICakeContext context, string network, string container, String[] args);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void DockerNetworkConnect(ICakeContext context, DockerNetworkConnectSettings settings, string network, string container, String[] args);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void DockerNetworkCreate(ICakeContext context, String[] args);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void DockerNetworkCreate(ICakeContext context, DockerNetworkCreateSettings settings, String[] args);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void DockerNetworkDisconnect(ICakeContext context, String[] args);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void DockerNetworkDisconnect(ICakeContext context, DockerNetworkDisconnectSettings settings, String[] args);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void DockerNetworkRemove(ICakeContext context, string network, String[] args);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void DockerNetworkRemove(ICakeContext context, String[] network, String[] args);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void DockerLogin(ICakeContext context, string username, string password, string server);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void DockerLogin(ICakeContext context, DockerRegistryLoginSettings settings, string server);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void DockerLogout(ICakeContext context, string server);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void DockerLogout(ICakeContext context, DockerRegistryLogoutSettings settings, string server);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void DockerSwarmInit(ICakeContext context, String[] args);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void DockerSwarmInit(ICakeContext context, DockerSwarmInitSettings settings, String[] args);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void DockerSwarmJoin(ICakeContext context, String[] args);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void DockerSwarmJoin(ICakeContext context, DockerSwarmJoinSettings settings, String[] args);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void DockerSwarmLeave(ICakeContext context, String[] args);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void DockerSwarmLeave(ICakeContext context, DockerSwarmLeaveSettings settings, String[] args);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void DockerSwarmUpdate(ICakeContext context, String[] args);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void DockerSwarmUpdate(ICakeContext context, DockerSwarmUpdateSettings settings, String[] args);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void DockerVolumeCreate(ICakeContext context, string volume);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void DockerVolumeCreate(ICakeContext context, DockerVolumeCreateSettings settings, string volume);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static IEnumerable`1<string> DockerVolumeInspect(ICakeContext context, DockerVolumeInspectSettings settings, String[] volumes);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static IEnumerable`1<string> DockerVolumeInspect(ICakeContext context, String[] volumes);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static IEnumerable`1<string> DockerVolumeLs(ICakeContext context, DockerVolumeLsSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void DockerVolumePrune(ICakeContext context, DockerVolumePruneSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void DockerVolumeRm(ICakeContext context, DockerVolumeRmSettings settings, String[] volumes);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void DockerVolumeRm(ICakeContext context, String[] volumes);
}
public class Cake.Docker.DockerArgument : ValueType {
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private DockerArgumentQuoting <Quoting>k__BackingField;
    public string Key { get; }
    public string Value { get; }
    public DockerArgumentQuoting Quoting { get; }
    public DockerArgument(string key, string value, DockerArgumentQuoting quoting);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_Key();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_Value();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public DockerArgumentQuoting get_Quoting();
}
public enum Cake.Docker.DockerArgumentQuoting : Enum {
    public int value__;
    public static DockerArgumentQuoting Unquoted;
    public static DockerArgumentQuoting Quoted;
    public static DockerArgumentQuoting QuotedSecret;
}
public static class Cake.Docker.DockerBridge : object {
    public static string Bridge;
    public static string None;
    public static string Host;
}
public class Cake.Docker.DockerBuildXBakeSettings : AutoToolSettings {
    [CompilerGeneratedAttribute]
private string <Builder>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <File>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Load>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MetadataFile>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoCache>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Print>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Progress>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Pull>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Push>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Set>k__BackingField;
    public string Builder { get; public set; }
    [AutoPropertyAttribute]
public String[] File { get; public set; }
    public bool Load { get; public set; }
    public string MetadataFile { get; public set; }
    public bool NoCache { get; public set; }
    public bool Print { get; public set; }
    public string Progress { get; public set; }
    public bool Pull { get; public set; }
    public bool Push { get; public set; }
    [AutoPropertyAttribute]
public String[] Set { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Builder();
    [CompilerGeneratedAttribute]
public void set_Builder(string value);
    [CompilerGeneratedAttribute]
public String[] get_File();
    [CompilerGeneratedAttribute]
public void set_File(String[] value);
    [CompilerGeneratedAttribute]
public bool get_Load();
    [CompilerGeneratedAttribute]
public void set_Load(bool value);
    [CompilerGeneratedAttribute]
public string get_MetadataFile();
    [CompilerGeneratedAttribute]
public void set_MetadataFile(string value);
    [CompilerGeneratedAttribute]
public bool get_NoCache();
    [CompilerGeneratedAttribute]
public void set_NoCache(bool value);
    [CompilerGeneratedAttribute]
public bool get_Print();
    [CompilerGeneratedAttribute]
public void set_Print(bool value);
    [CompilerGeneratedAttribute]
public string get_Progress();
    [CompilerGeneratedAttribute]
public void set_Progress(string value);
    [CompilerGeneratedAttribute]
public bool get_Pull();
    [CompilerGeneratedAttribute]
public void set_Pull(bool value);
    [CompilerGeneratedAttribute]
public bool get_Push();
    [CompilerGeneratedAttribute]
public void set_Push(bool value);
    [CompilerGeneratedAttribute]
public String[] get_Set();
    [CompilerGeneratedAttribute]
public void set_Set(String[] value);
}
public class Cake.Docker.DockerBuildXBuildSettings : AutoToolSettings {
    [CompilerGeneratedAttribute]
private String[] <AddHost>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Allow>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <BuildArg>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <BuildContext>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Builder>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <CacheFrom>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <CacheTo>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CgroupParent>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Compress>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <CpuPeriod>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <CpuQuota>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CpusetCpus>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CpusetMems>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <CpuShares>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <DisableContentTrust>k__BackingField;
    [CompilerGeneratedAttribute]
private string <File>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <ForceRm>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Iidfile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Isolation>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Label>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Load>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Memory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MemorySwap>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MetadataFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Network>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoCache>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <NoCacheFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Output>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Platform>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Progress>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Pull>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Push>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Quiet>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Rm>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Secret>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <SecurityOpt>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ShmSize>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Squash>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Ssh>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Tag>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Target>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Ulimit>k__BackingField;
    [AutoPropertyAttribute]
public String[] AddHost { get; public set; }
    [AutoPropertyAttribute]
public String[] Allow { get; public set; }
    [AutoPropertyAttribute]
public String[] BuildArg { get; public set; }
    [AutoPropertyAttribute]
public String[] BuildContext { get; public set; }
    public string Builder { get; public set; }
    [AutoPropertyAttribute]
public String[] CacheFrom { get; public set; }
    [AutoPropertyAttribute]
public String[] CacheTo { get; public set; }
    public string CgroupParent { get; public set; }
    public Nullable`1<bool> Compress { get; public set; }
    public Nullable`1<long> CpuPeriod { get; public set; }
    public Nullable`1<long> CpuQuota { get; public set; }
    public string CpusetCpus { get; public set; }
    public string CpusetMems { get; public set; }
    public Nullable`1<long> CpuShares { get; public set; }
    [AutoPropertyAttribute]
public Nullable`1<bool> DisableContentTrust { get; public set; }
    public string File { get; public set; }
    public Nullable`1<bool> ForceRm { get; public set; }
    public string Iidfile { get; public set; }
    public string Isolation { get; public set; }
    [AutoPropertyAttribute]
public String[] Label { get; public set; }
    public bool Load { get; public set; }
    public string Memory { get; public set; }
    public string MemorySwap { get; public set; }
    public string MetadataFile { get; public set; }
    public string Network { get; public set; }
    public bool NoCache { get; public set; }
    [AutoPropertyAttribute]
public String[] NoCacheFilter { get; public set; }
    [AutoPropertyAttribute]
public String[] Output { get; public set; }
    [AutoPropertyAttribute]
public String[] Platform { get; public set; }
    public string Progress { get; public set; }
    public bool Pull { get; public set; }
    public bool Push { get; public set; }
    public bool Quiet { get; public set; }
    [AutoPropertyAttribute]
public Nullable`1<bool> Rm { get; public set; }
    [AutoPropertyAttribute]
public String[] Secret { get; public set; }
    [AutoPropertyAttribute]
public String[] SecurityOpt { get; public set; }
    public string ShmSize { get; public set; }
    public Nullable`1<bool> Squash { get; public set; }
    [AutoPropertyAttribute]
public String[] Ssh { get; public set; }
    [AutoPropertyAttribute]
public String[] Tag { get; public set; }
    public string Target { get; public set; }
    [AutoPropertyAttribute]
public String[] Ulimit { get; public set; }
    [CompilerGeneratedAttribute]
public String[] get_AddHost();
    [CompilerGeneratedAttribute]
public void set_AddHost(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_Allow();
    [CompilerGeneratedAttribute]
public void set_Allow(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_BuildArg();
    [CompilerGeneratedAttribute]
public void set_BuildArg(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_BuildContext();
    [CompilerGeneratedAttribute]
public void set_BuildContext(String[] value);
    [CompilerGeneratedAttribute]
public string get_Builder();
    [CompilerGeneratedAttribute]
public void set_Builder(string value);
    [CompilerGeneratedAttribute]
public String[] get_CacheFrom();
    [CompilerGeneratedAttribute]
public void set_CacheFrom(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_CacheTo();
    [CompilerGeneratedAttribute]
public void set_CacheTo(String[] value);
    [CompilerGeneratedAttribute]
public string get_CgroupParent();
    [CompilerGeneratedAttribute]
public void set_CgroupParent(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Compress();
    [CompilerGeneratedAttribute]
public void set_Compress(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_CpuPeriod();
    [CompilerGeneratedAttribute]
public void set_CpuPeriod(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_CpuQuota();
    [CompilerGeneratedAttribute]
public void set_CpuQuota(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public string get_CpusetCpus();
    [CompilerGeneratedAttribute]
public void set_CpusetCpus(string value);
    [CompilerGeneratedAttribute]
public string get_CpusetMems();
    [CompilerGeneratedAttribute]
public void set_CpusetMems(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_CpuShares();
    [CompilerGeneratedAttribute]
public void set_CpuShares(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_DisableContentTrust();
    [CompilerGeneratedAttribute]
public void set_DisableContentTrust(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_File();
    [CompilerGeneratedAttribute]
public void set_File(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_ForceRm();
    [CompilerGeneratedAttribute]
public void set_ForceRm(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_Iidfile();
    [CompilerGeneratedAttribute]
public void set_Iidfile(string value);
    [CompilerGeneratedAttribute]
public string get_Isolation();
    [CompilerGeneratedAttribute]
public void set_Isolation(string value);
    [CompilerGeneratedAttribute]
public String[] get_Label();
    [CompilerGeneratedAttribute]
public void set_Label(String[] value);
    [CompilerGeneratedAttribute]
public bool get_Load();
    [CompilerGeneratedAttribute]
public void set_Load(bool value);
    [CompilerGeneratedAttribute]
public string get_Memory();
    [CompilerGeneratedAttribute]
public void set_Memory(string value);
    [CompilerGeneratedAttribute]
public string get_MemorySwap();
    [CompilerGeneratedAttribute]
public void set_MemorySwap(string value);
    [CompilerGeneratedAttribute]
public string get_MetadataFile();
    [CompilerGeneratedAttribute]
public void set_MetadataFile(string value);
    [CompilerGeneratedAttribute]
public string get_Network();
    [CompilerGeneratedAttribute]
public void set_Network(string value);
    [CompilerGeneratedAttribute]
public bool get_NoCache();
    [CompilerGeneratedAttribute]
public void set_NoCache(bool value);
    [CompilerGeneratedAttribute]
public String[] get_NoCacheFilter();
    [CompilerGeneratedAttribute]
public void set_NoCacheFilter(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_Output();
    [CompilerGeneratedAttribute]
public void set_Output(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_Platform();
    [CompilerGeneratedAttribute]
public void set_Platform(String[] value);
    [CompilerGeneratedAttribute]
public string get_Progress();
    [CompilerGeneratedAttribute]
public void set_Progress(string value);
    [CompilerGeneratedAttribute]
public bool get_Pull();
    [CompilerGeneratedAttribute]
public void set_Pull(bool value);
    [CompilerGeneratedAttribute]
public bool get_Push();
    [CompilerGeneratedAttribute]
public void set_Push(bool value);
    [CompilerGeneratedAttribute]
public bool get_Quiet();
    [CompilerGeneratedAttribute]
public void set_Quiet(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Rm();
    [CompilerGeneratedAttribute]
public void set_Rm(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public String[] get_Secret();
    [CompilerGeneratedAttribute]
public void set_Secret(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_SecurityOpt();
    [CompilerGeneratedAttribute]
public void set_SecurityOpt(String[] value);
    [CompilerGeneratedAttribute]
public string get_ShmSize();
    [CompilerGeneratedAttribute]
public void set_ShmSize(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Squash();
    [CompilerGeneratedAttribute]
public void set_Squash(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public String[] get_Ssh();
    [CompilerGeneratedAttribute]
public void set_Ssh(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_Tag();
    [CompilerGeneratedAttribute]
public void set_Tag(String[] value);
    [CompilerGeneratedAttribute]
public string get_Target();
    [CompilerGeneratedAttribute]
public void set_Target(string value);
    [CompilerGeneratedAttribute]
public String[] get_Ulimit();
    [CompilerGeneratedAttribute]
public void set_Ulimit(String[] value);
}
public class Cake.Docker.DockerBuildXCreateSettings : AutoToolSettings {
    [CompilerGeneratedAttribute]
private bool <Append>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Bootstrap>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Builder>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BuildkitdFlags>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Config>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Driver>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <DriverOpt>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Leave>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Node>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Platform>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Use>k__BackingField;
    public bool Append { get; public set; }
    public bool Bootstrap { get; public set; }
    public string Builder { get; public set; }
    public string BuildkitdFlags { get; public set; }
    public string Config { get; public set; }
    public string Driver { get; public set; }
    [AutoPropertyAttribute]
public String[] DriverOpt { get; public set; }
    public bool Leave { get; public set; }
    public string Name { get; public set; }
    public string Node { get; public set; }
    [AutoPropertyAttribute]
public String[] Platform { get; public set; }
    public bool Use { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Append();
    [CompilerGeneratedAttribute]
public void set_Append(bool value);
    [CompilerGeneratedAttribute]
public bool get_Bootstrap();
    [CompilerGeneratedAttribute]
public void set_Bootstrap(bool value);
    [CompilerGeneratedAttribute]
public string get_Builder();
    [CompilerGeneratedAttribute]
public void set_Builder(string value);
    [CompilerGeneratedAttribute]
public string get_BuildkitdFlags();
    [CompilerGeneratedAttribute]
public void set_BuildkitdFlags(string value);
    [CompilerGeneratedAttribute]
public string get_Config();
    [CompilerGeneratedAttribute]
public void set_Config(string value);
    [CompilerGeneratedAttribute]
public string get_Driver();
    [CompilerGeneratedAttribute]
public void set_Driver(string value);
    [CompilerGeneratedAttribute]
public String[] get_DriverOpt();
    [CompilerGeneratedAttribute]
public void set_DriverOpt(String[] value);
    [CompilerGeneratedAttribute]
public bool get_Leave();
    [CompilerGeneratedAttribute]
public void set_Leave(bool value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Node();
    [CompilerGeneratedAttribute]
public void set_Node(string value);
    [CompilerGeneratedAttribute]
public String[] get_Platform();
    [CompilerGeneratedAttribute]
public void set_Platform(String[] value);
    [CompilerGeneratedAttribute]
public bool get_Use();
    [CompilerGeneratedAttribute]
public void set_Use(bool value);
}
public class Cake.Docker.DockerBuildXDuSettings : AutoToolSettings {
    [CompilerGeneratedAttribute]
private string <Builder>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Filter>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Verbose>k__BackingField;
    public string Builder { get; public set; }
    public string Filter { get; public set; }
    public bool Verbose { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Builder();
    [CompilerGeneratedAttribute]
public void set_Builder(string value);
    [CompilerGeneratedAttribute]
public string get_Filter();
    [CompilerGeneratedAttribute]
public void set_Filter(string value);
    [CompilerGeneratedAttribute]
public bool get_Verbose();
    [CompilerGeneratedAttribute]
public void set_Verbose(bool value);
}
public class Cake.Docker.DockerBuildXImageToolsCreateSettings : AutoToolSettings {
    [CompilerGeneratedAttribute]
private bool <Append>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Builder>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DryRun>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <File>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Tag>k__BackingField;
    public bool Append { get; public set; }
    public string Builder { get; public set; }
    public bool DryRun { get; public set; }
    [AutoPropertyAttribute]
public String[] File { get; public set; }
    [AutoPropertyAttribute]
public String[] Tag { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Append();
    [CompilerGeneratedAttribute]
public void set_Append(bool value);
    [CompilerGeneratedAttribute]
public string get_Builder();
    [CompilerGeneratedAttribute]
public void set_Builder(string value);
    [CompilerGeneratedAttribute]
public bool get_DryRun();
    [CompilerGeneratedAttribute]
public void set_DryRun(bool value);
    [CompilerGeneratedAttribute]
public String[] get_File();
    [CompilerGeneratedAttribute]
public void set_File(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_Tag();
    [CompilerGeneratedAttribute]
public void set_Tag(String[] value);
}
public class Cake.Docker.DockerBuildXImageToolsInspectSettings : AutoToolSettings {
    [CompilerGeneratedAttribute]
private string <Builder>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Format>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Raw>k__BackingField;
    public string Builder { get; public set; }
    public string Format { get; public set; }
    public bool Raw { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Builder();
    [CompilerGeneratedAttribute]
public void set_Builder(string value);
    [CompilerGeneratedAttribute]
public string get_Format();
    [CompilerGeneratedAttribute]
public void set_Format(string value);
    [CompilerGeneratedAttribute]
public bool get_Raw();
    [CompilerGeneratedAttribute]
public void set_Raw(bool value);
}
public class Cake.Docker.DockerBuildXInspectSettings : AutoToolSettings {
    [CompilerGeneratedAttribute]
private bool <Bootstrap>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Builder>k__BackingField;
    public bool Bootstrap { get; public set; }
    public string Builder { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Bootstrap();
    [CompilerGeneratedAttribute]
public void set_Bootstrap(bool value);
    [CompilerGeneratedAttribute]
public string get_Builder();
    [CompilerGeneratedAttribute]
public void set_Builder(string value);
}
public class Cake.Docker.DockerBuildXInstallSettings : AutoToolSettings {
    [CompilerGeneratedAttribute]
private string <Builder>k__BackingField;
    public string Builder { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Builder();
    [CompilerGeneratedAttribute]
public void set_Builder(string value);
}
public class Cake.Docker.DockerBuildXLsSettings : AutoToolSettings {
    [CompilerGeneratedAttribute]
private string <Builder>k__BackingField;
    public string Builder { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Builder();
    [CompilerGeneratedAttribute]
public void set_Builder(string value);
}
public class Cake.Docker.DockerBuildXPruneSettings : AutoToolSettings {
    [CompilerGeneratedAttribute]
private bool <All>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Builder>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Filter>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Force>k__BackingField;
    [CompilerGeneratedAttribute]
private string <KeepStorage>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Verbose>k__BackingField;
    public bool All { get; public set; }
    public string Builder { get; public set; }
    public string Filter { get; public set; }
    public bool Force { get; public set; }
    public string KeepStorage { get; public set; }
    public bool Verbose { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_All();
    [CompilerGeneratedAttribute]
public void set_All(bool value);
    [CompilerGeneratedAttribute]
public string get_Builder();
    [CompilerGeneratedAttribute]
public void set_Builder(string value);
    [CompilerGeneratedAttribute]
public string get_Filter();
    [CompilerGeneratedAttribute]
public void set_Filter(string value);
    [CompilerGeneratedAttribute]
public bool get_Force();
    [CompilerGeneratedAttribute]
public void set_Force(bool value);
    [CompilerGeneratedAttribute]
public string get_KeepStorage();
    [CompilerGeneratedAttribute]
public void set_KeepStorage(string value);
    [CompilerGeneratedAttribute]
public bool get_Verbose();
    [CompilerGeneratedAttribute]
public void set_Verbose(bool value);
}
public class Cake.Docker.DockerBuildXRmSettings : AutoToolSettings {
    [CompilerGeneratedAttribute]
private bool <AllInactive>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Builder>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Force>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <KeepDaemon>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <KeepState>k__BackingField;
    public bool AllInactive { get; public set; }
    public string Builder { get; public set; }
    public bool Force { get; public set; }
    public bool KeepDaemon { get; public set; }
    public bool KeepState { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_AllInactive();
    [CompilerGeneratedAttribute]
public void set_AllInactive(bool value);
    [CompilerGeneratedAttribute]
public string get_Builder();
    [CompilerGeneratedAttribute]
public void set_Builder(string value);
    [CompilerGeneratedAttribute]
public bool get_Force();
    [CompilerGeneratedAttribute]
public void set_Force(bool value);
    [CompilerGeneratedAttribute]
public bool get_KeepDaemon();
    [CompilerGeneratedAttribute]
public void set_KeepDaemon(bool value);
    [CompilerGeneratedAttribute]
public bool get_KeepState();
    [CompilerGeneratedAttribute]
public void set_KeepState(bool value);
}
public class Cake.Docker.DockerBuildXStopSettings : AutoToolSettings {
    [CompilerGeneratedAttribute]
private string <Builder>k__BackingField;
    public string Builder { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Builder();
    [CompilerGeneratedAttribute]
public void set_Builder(string value);
}
public class Cake.Docker.DockerBuildXUninstallSettings : AutoToolSettings {
    [CompilerGeneratedAttribute]
private string <Builder>k__BackingField;
    public string Builder { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Builder();
    [CompilerGeneratedAttribute]
public void set_Builder(string value);
}
public class Cake.Docker.DockerBuildXUseSettings : AutoToolSettings {
    [CompilerGeneratedAttribute]
private string <Builder>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Default>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Global>k__BackingField;
    public string Builder { get; public set; }
    public bool Default { get; public set; }
    public bool Global { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Builder();
    [CompilerGeneratedAttribute]
public void set_Builder(string value);
    [CompilerGeneratedAttribute]
public bool get_Default();
    [CompilerGeneratedAttribute]
public void set_Default(bool value);
    [CompilerGeneratedAttribute]
public bool get_Global();
    [CompilerGeneratedAttribute]
public void set_Global(bool value);
}
public class Cake.Docker.DockerBuildXVersionSettings : AutoToolSettings {
    [CompilerGeneratedAttribute]
private string <Builder>k__BackingField;
    public string Builder { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Builder();
    [CompilerGeneratedAttribute]
public void set_Builder(string value);
}
public class Cake.Docker.DockerComposeBuildSettings : DockerComposeSettings {
    [CompilerGeneratedAttribute]
private bool <ForceRm>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoCache>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Pull>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <BuildArg>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Parallel>k__BackingField;
    public bool ForceRm { get; public set; }
    public bool NoCache { get; public set; }
    public bool Pull { get; public set; }
    public String[] BuildArg { get; public set; }
    public Nullable`1<bool> Parallel { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_ForceRm();
    [CompilerGeneratedAttribute]
public void set_ForceRm(bool value);
    [CompilerGeneratedAttribute]
public bool get_NoCache();
    [CompilerGeneratedAttribute]
public void set_NoCache(bool value);
    [CompilerGeneratedAttribute]
public bool get_Pull();
    [CompilerGeneratedAttribute]
public void set_Pull(bool value);
    [CompilerGeneratedAttribute]
public String[] get_BuildArg();
    [CompilerGeneratedAttribute]
public void set_BuildArg(String[] value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Parallel();
    [CompilerGeneratedAttribute]
public void set_Parallel(Nullable`1<bool> value);
}
public class Cake.Docker.DockerComposeCpSettings : AutoToolSettings {
    [CompilerGeneratedAttribute]
private bool <All>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Archive>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FollowLink>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Index>k__BackingField;
    public bool All { get; public set; }
    public bool Archive { get; public set; }
    public bool FollowLink { get; public set; }
    public Nullable`1<int> Index { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_All();
    [CompilerGeneratedAttribute]
public void set_All(bool value);
    [CompilerGeneratedAttribute]
public bool get_Archive();
    [CompilerGeneratedAttribute]
public void set_Archive(bool value);
    [CompilerGeneratedAttribute]
public bool get_FollowLink();
    [CompilerGeneratedAttribute]
public void set_FollowLink(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Index();
    [CompilerGeneratedAttribute]
public void set_Index(Nullable`1<int> value);
}
public class Cake.Docker.DockerComposeCreateSettings : DockerComposeSettings {
    [CompilerGeneratedAttribute]
private bool <ForceRecreate>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoRecreate>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoBuild>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Build>k__BackingField;
    public bool ForceRecreate { get; public set; }
    public bool NoRecreate { get; public set; }
    public bool NoBuild { get; public set; }
    public bool Build { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_ForceRecreate();
    [CompilerGeneratedAttribute]
public void set_ForceRecreate(bool value);
    [CompilerGeneratedAttribute]
public bool get_NoRecreate();
    [CompilerGeneratedAttribute]
public void set_NoRecreate(bool value);
    [CompilerGeneratedAttribute]
public bool get_NoBuild();
    [CompilerGeneratedAttribute]
public void set_NoBuild(bool value);
    [CompilerGeneratedAttribute]
public bool get_Build();
    [CompilerGeneratedAttribute]
public void set_Build(bool value);
}
public static class Cake.Docker.DockerComposeDownRmiType : object {
    public static string All;
    public static string Local;
}
public class Cake.Docker.DockerComposeDownSettings : DockerComposeSettings {
    [CompilerGeneratedAttribute]
private string <Rmi>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Volumes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RemoveOrphans>k__BackingField;
    public string Rmi { get; public set; }
    public bool Volumes { get; public set; }
    public bool RemoveOrphans { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Rmi();
    [CompilerGeneratedAttribute]
public void set_Rmi(string value);
    [CompilerGeneratedAttribute]
public bool get_Volumes();
    [CompilerGeneratedAttribute]
public void set_Volumes(bool value);
    [CompilerGeneratedAttribute]
public bool get_RemoveOrphans();
    [CompilerGeneratedAttribute]
public void set_RemoveOrphans(bool value);
}
public class Cake.Docker.DockerComposeExecSettings : DockerComposeSettings {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Detach>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Privileged>k__BackingField;
    [CompilerGeneratedAttribute]
private string <User>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Index>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Env>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Workdir>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <DisablePseudoTTYAllocation>k__BackingField;
    public Nullable`1<bool> Detach { get; public set; }
    public Nullable`1<bool> Privileged { get; public set; }
    public string User { get; public set; }
    public Nullable`1<int> Index { get; public set; }
    public String[] Env { get; public set; }
    public string Workdir { get; public set; }
    [AutoPropertyAttribute]
public Nullable`1<bool> DisablePseudoTTYAllocation { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Detach();
    [CompilerGeneratedAttribute]
public void set_Detach(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Privileged();
    [CompilerGeneratedAttribute]
public void set_Privileged(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_User();
    [CompilerGeneratedAttribute]
public void set_User(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Index();
    [CompilerGeneratedAttribute]
public void set_Index(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public String[] get_Env();
    [CompilerGeneratedAttribute]
public void set_Env(String[] value);
    [CompilerGeneratedAttribute]
public string get_Workdir();
    [CompilerGeneratedAttribute]
public void set_Workdir(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_DisablePseudoTTYAllocation();
    [CompilerGeneratedAttribute]
public void set_DisablePseudoTTYAllocation(Nullable`1<bool> value);
}
public class Cake.Docker.DockerComposeKillSettings : DockerComposeSettings {
    [CompilerGeneratedAttribute]
private string <Signal>k__BackingField;
    [AutoPropertyAttribute]
public string Signal { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Signal();
    [CompilerGeneratedAttribute]
public void set_Signal(string value);
}
public class Cake.Docker.DockerComposeLogsSettings : DockerComposeSettings {
    [CompilerGeneratedAttribute]
private bool <NoColor>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Follow>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Timestamps>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Tail>k__BackingField;
    public bool NoColor { get; public set; }
    public Nullable`1<bool> Follow { get; public set; }
    public Nullable`1<bool> Timestamps { get; public set; }
    public string Tail { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_NoColor();
    [CompilerGeneratedAttribute]
public void set_NoColor(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Follow();
    [CompilerGeneratedAttribute]
public void set_Follow(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Timestamps();
    [CompilerGeneratedAttribute]
public void set_Timestamps(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_Tail();
    [CompilerGeneratedAttribute]
public void set_Tail(string value);
}
public class Cake.Docker.DockerComposePortSettings : DockerComposeSettings {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Index>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Protocol>k__BackingField;
    [AutoPropertyAttribute]
public Nullable`1<int> Index { get; public set; }
    [AutoPropertyAttribute]
public string Protocol { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Index();
    [CompilerGeneratedAttribute]
public void set_Index(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_Protocol();
    [CompilerGeneratedAttribute]
public void set_Protocol(string value);
}
public class Cake.Docker.DockerComposePsSettings : DockerComposeSettings {
    [CompilerGeneratedAttribute]
private String[] <Filters>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Quiet>k__BackingField;
    [AutoPropertyAttribute]
public String[] Filters { get; public set; }
    [AutoPropertyAttribute]
public Nullable`1<bool> Quiet { get; public set; }
    [CompilerGeneratedAttribute]
public String[] get_Filters();
    [CompilerGeneratedAttribute]
public void set_Filters(String[] value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Quiet();
    [CompilerGeneratedAttribute]
public void set_Quiet(Nullable`1<bool> value);
}
public class Cake.Docker.DockerComposePullSettings : DockerComposeSettings {
    [CompilerGeneratedAttribute]
private bool <IgnorePullFailures>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoParallel>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeDeps>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Quiet>k__BackingField;
    public bool IgnorePullFailures { get; public set; }
    public bool NoParallel { get; public set; }
    public bool IncludeDeps { get; public set; }
    public bool Quiet { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_IgnorePullFailures();
    [CompilerGeneratedAttribute]
public void set_IgnorePullFailures(bool value);
    [CompilerGeneratedAttribute]
public bool get_NoParallel();
    [CompilerGeneratedAttribute]
public void set_NoParallel(bool value);
    [CompilerGeneratedAttribute]
public bool get_IncludeDeps();
    [CompilerGeneratedAttribute]
public void set_IncludeDeps(bool value);
    [CompilerGeneratedAttribute]
public bool get_Quiet();
    [CompilerGeneratedAttribute]
public void set_Quiet(bool value);
}
public class Cake.Docker.DockerComposePushSettings : DockerComposeSettings {
    [CompilerGeneratedAttribute]
private bool <IgnorePushFailures>k__BackingField;
    public bool IgnorePushFailures { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_IgnorePushFailures();
    [CompilerGeneratedAttribute]
public void set_IgnorePushFailures(bool value);
}
public class Cake.Docker.DockerComposeRestartSettings : DockerComposeSettings {
    [CompilerGeneratedAttribute]
private bool <Timeout>k__BackingField;
    public bool Timeout { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(bool value);
}
public class Cake.Docker.DockerComposeRmSettings : DockerComposeSettings {
    [CompilerGeneratedAttribute]
private bool <Force>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Volumes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Stop>k__BackingField;
    public bool Force { get; public set; }
    [AutoPropertyAttribute]
public bool Volumes { get; public set; }
    public bool Stop { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Force();
    [CompilerGeneratedAttribute]
public void set_Force(bool value);
    [CompilerGeneratedAttribute]
public bool get_Volumes();
    [CompilerGeneratedAttribute]
public void set_Volumes(bool value);
    [CompilerGeneratedAttribute]
public bool get_Stop();
    [CompilerGeneratedAttribute]
public void set_Stop(bool value);
}
public class Cake.Docker.DockerComposeRunSettings : DockerComposeSettings {
    [CompilerGeneratedAttribute]
private bool <DetachedMode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Entrypoint>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Environment>k__BackingField;
    [CompilerGeneratedAttribute]
private string <User>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoDeps>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Rm>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Publish>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ServicePorts>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Volume>k__BackingField;
    [AutoPropertyAttribute]
public bool DetachedMode { get; public set; }
    public bool Name { get; public set; }
    public string Entrypoint { get; public set; }
    [AutoPropertyAttribute]
public String[] Environment { get; public set; }
    public string User { get; public set; }
    public bool NoDeps { get; public set; }
    public bool Rm { get; public set; }
    public String[] Publish { get; public set; }
    public bool ServicePorts { get; public set; }
    public String[] Volume { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_DetachedMode();
    [CompilerGeneratedAttribute]
public void set_DetachedMode(bool value);
    [CompilerGeneratedAttribute]
public bool get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(bool value);
    [CompilerGeneratedAttribute]
public string get_Entrypoint();
    [CompilerGeneratedAttribute]
public void set_Entrypoint(string value);
    [CompilerGeneratedAttribute]
public String[] get_Environment();
    [CompilerGeneratedAttribute]
public void set_Environment(String[] value);
    [CompilerGeneratedAttribute]
public string get_User();
    [CompilerGeneratedAttribute]
public void set_User(string value);
    [CompilerGeneratedAttribute]
public bool get_NoDeps();
    [CompilerGeneratedAttribute]
public void set_NoDeps(bool value);
    [CompilerGeneratedAttribute]
public bool get_Rm();
    [CompilerGeneratedAttribute]
public void set_Rm(bool value);
    [CompilerGeneratedAttribute]
public String[] get_Publish();
    [CompilerGeneratedAttribute]
public void set_Publish(String[] value);
    [CompilerGeneratedAttribute]
public bool get_ServicePorts();
    [CompilerGeneratedAttribute]
public void set_ServicePorts(bool value);
    [CompilerGeneratedAttribute]
public String[] get_Volume();
    [CompilerGeneratedAttribute]
public void set_Volume(String[] value);
}
public class Cake.Docker.DockerComposeSettings : AutoToolSettings {
    [CompilerGeneratedAttribute]
private String[] <Files>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProjectName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Verbose>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Host>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Tls>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Tlscacert>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Tlscert>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Tlskey>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Tlsverify>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SkipHostnameCheck>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProjectDirectory>k__BackingField;
    [AutoPropertyAttribute]
public String[] Files { get; public set; }
    [AutoPropertyAttribute]
public string ProjectName { get; public set; }
    [AutoPropertyAttribute]
public bool Verbose { get; public set; }
    [AutoPropertyAttribute]
public bool Version { get; public set; }
    [AutoPropertyAttribute]
public string Host { get; public set; }
    [AutoPropertyAttribute]
public bool Tls { get; public set; }
    [AutoPropertyAttribute]
public string Tlscacert { get; public set; }
    [AutoPropertyAttribute]
public string Tlscert { get; public set; }
    [AutoPropertyAttribute]
public string Tlskey { get; public set; }
    [AutoPropertyAttribute]
public bool Tlsverify { get; public set; }
    [AutoPropertyAttribute]
public bool SkipHostnameCheck { get; public set; }
    [AutoPropertyAttribute]
public string ProjectDirectory { get; public set; }
    [CompilerGeneratedAttribute]
public String[] get_Files();
    [CompilerGeneratedAttribute]
public void set_Files(String[] value);
    [CompilerGeneratedAttribute]
public string get_ProjectName();
    [CompilerGeneratedAttribute]
public void set_ProjectName(string value);
    [CompilerGeneratedAttribute]
public bool get_Verbose();
    [CompilerGeneratedAttribute]
public void set_Verbose(bool value);
    [CompilerGeneratedAttribute]
public bool get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(bool value);
    [CompilerGeneratedAttribute]
public string get_Host();
    [CompilerGeneratedAttribute]
public void set_Host(string value);
    [CompilerGeneratedAttribute]
public bool get_Tls();
    [CompilerGeneratedAttribute]
public void set_Tls(bool value);
    [CompilerGeneratedAttribute]
public string get_Tlscacert();
    [CompilerGeneratedAttribute]
public void set_Tlscacert(string value);
    [CompilerGeneratedAttribute]
public string get_Tlscert();
    [CompilerGeneratedAttribute]
public void set_Tlscert(string value);
    [CompilerGeneratedAttribute]
public string get_Tlskey();
    [CompilerGeneratedAttribute]
public void set_Tlskey(string value);
    [CompilerGeneratedAttribute]
public bool get_Tlsverify();
    [CompilerGeneratedAttribute]
public void set_Tlsverify(bool value);
    [CompilerGeneratedAttribute]
public bool get_SkipHostnameCheck();
    [CompilerGeneratedAttribute]
public void set_SkipHostnameCheck(bool value);
    [CompilerGeneratedAttribute]
public string get_ProjectDirectory();
    [CompilerGeneratedAttribute]
public void set_ProjectDirectory(string value);
}
public class Cake.Docker.DockerComposeStopSettings : DockerComposeSettings {
    [CompilerGeneratedAttribute]
private bool <Timeout>k__BackingField;
    public bool Timeout { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(bool value);
}
public abstract class Cake.Docker.DockerComposeTool`1 : Tool`1<TSettings> {
    private ICakeEnvironment _environment;
    private IFileSystem _fileSystem;
    protected DockerComposeTool`1(IFileSystem fileSystem, ICakeEnvironment environment, IProcessRunner processRunner, IToolLocator tools);
    protected virtual string GetToolName();
    protected virtual IEnumerable`1<string> GetToolExecutableNames();
    protected virtual IEnumerable`1<FilePath> GetAlternativeToolPaths(TSettings settings);
}
public class Cake.Docker.DockerComposeUpSettings : DockerComposeSettings {
    [CompilerGeneratedAttribute]
private bool <AbortOnContainerExit>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AlwaysRecreateDeps>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Attach>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AttachDependencies>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Build>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Detach>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DryRun>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExitCodeFrom>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ForceRecreate>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <NoAttach>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoBuild>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoColor>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoDeps>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoLogPrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoRecreate>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoStart>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Pull>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <QuietPull>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RemoveOrphans>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RenewAnonVolumes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Scale>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Timeout>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Timestamps>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Wait>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <WaitTimeout>k__BackingField;
    public bool AbortOnContainerExit { get; public set; }
    public bool AlwaysRecreateDeps { get; public set; }
    [AutoPropertyAttribute]
public String[] Attach { get; public set; }
    public bool AttachDependencies { get; public set; }
    public bool Build { get; public set; }
    public bool Detach { get; public set; }
    public bool DryRun { get; public set; }
    [AutoPropertyAttribute]
public string ExitCodeFrom { get; public set; }
    public bool ForceRecreate { get; public set; }
    [AutoPropertyAttribute]
public String[] NoAttach { get; public set; }
    public bool NoBuild { get; public set; }
    public bool NoColor { get; public set; }
    public bool NoDeps { get; public set; }
    public bool NoLogPrefix { get; public set; }
    public bool NoRecreate { get; public set; }
    public bool NoStart { get; public set; }
    public string Pull { get; public set; }
    public bool QuietPull { get; public set; }
    public bool RemoveOrphans { get; public set; }
    public bool RenewAnonVolumes { get; public set; }
    public string Scale { get; public set; }
    public int Timeout { get; public set; }
    public bool Timestamps { get; public set; }
    public bool Wait { get; public set; }
    public Nullable`1<int> WaitTimeout { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_AbortOnContainerExit();
    [CompilerGeneratedAttribute]
public void set_AbortOnContainerExit(bool value);
    [CompilerGeneratedAttribute]
public bool get_AlwaysRecreateDeps();
    [CompilerGeneratedAttribute]
public void set_AlwaysRecreateDeps(bool value);
    [CompilerGeneratedAttribute]
public String[] get_Attach();
    [CompilerGeneratedAttribute]
public void set_Attach(String[] value);
    [CompilerGeneratedAttribute]
public bool get_AttachDependencies();
    [CompilerGeneratedAttribute]
public void set_AttachDependencies(bool value);
    [CompilerGeneratedAttribute]
public bool get_Build();
    [CompilerGeneratedAttribute]
public void set_Build(bool value);
    [CompilerGeneratedAttribute]
public bool get_Detach();
    [CompilerGeneratedAttribute]
public void set_Detach(bool value);
    [CompilerGeneratedAttribute]
public bool get_DryRun();
    [CompilerGeneratedAttribute]
public void set_DryRun(bool value);
    [CompilerGeneratedAttribute]
public string get_ExitCodeFrom();
    [CompilerGeneratedAttribute]
public void set_ExitCodeFrom(string value);
    [CompilerGeneratedAttribute]
public bool get_ForceRecreate();
    [CompilerGeneratedAttribute]
public void set_ForceRecreate(bool value);
    [CompilerGeneratedAttribute]
public String[] get_NoAttach();
    [CompilerGeneratedAttribute]
public void set_NoAttach(String[] value);
    [CompilerGeneratedAttribute]
public bool get_NoBuild();
    [CompilerGeneratedAttribute]
public void set_NoBuild(bool value);
    [CompilerGeneratedAttribute]
public bool get_NoColor();
    [CompilerGeneratedAttribute]
public void set_NoColor(bool value);
    [CompilerGeneratedAttribute]
public bool get_NoDeps();
    [CompilerGeneratedAttribute]
public void set_NoDeps(bool value);
    [CompilerGeneratedAttribute]
public bool get_NoLogPrefix();
    [CompilerGeneratedAttribute]
public void set_NoLogPrefix(bool value);
    [CompilerGeneratedAttribute]
public bool get_NoRecreate();
    [CompilerGeneratedAttribute]
public void set_NoRecreate(bool value);
    [CompilerGeneratedAttribute]
public bool get_NoStart();
    [CompilerGeneratedAttribute]
public void set_NoStart(bool value);
    [CompilerGeneratedAttribute]
public string get_Pull();
    [CompilerGeneratedAttribute]
public void set_Pull(string value);
    [CompilerGeneratedAttribute]
public bool get_QuietPull();
    [CompilerGeneratedAttribute]
public void set_QuietPull(bool value);
    [CompilerGeneratedAttribute]
public bool get_RemoveOrphans();
    [CompilerGeneratedAttribute]
public void set_RemoveOrphans(bool value);
    [CompilerGeneratedAttribute]
public bool get_RenewAnonVolumes();
    [CompilerGeneratedAttribute]
public void set_RenewAnonVolumes(bool value);
    [CompilerGeneratedAttribute]
public string get_Scale();
    [CompilerGeneratedAttribute]
public void set_Scale(string value);
    [CompilerGeneratedAttribute]
public int get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(int value);
    [CompilerGeneratedAttribute]
public bool get_Timestamps();
    [CompilerGeneratedAttribute]
public void set_Timestamps(bool value);
    [CompilerGeneratedAttribute]
public bool get_Wait();
    [CompilerGeneratedAttribute]
public void set_Wait(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_WaitTimeout();
    [CompilerGeneratedAttribute]
public void set_WaitTimeout(Nullable`1<int> value);
}
public class Cake.Docker.DockerContainerCpSettings : AutoToolSettings {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Archive>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <FollowLink>k__BackingField;
    public Nullable`1<bool> Archive { get; public set; }
    public Nullable`1<bool> FollowLink { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Archive();
    [CompilerGeneratedAttribute]
public void set_Archive(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_FollowLink();
    [CompilerGeneratedAttribute]
public void set_FollowLink(Nullable`1<bool> value);
}
public class Cake.Docker.DockerContainerCreateSettings : AutoToolSettings {
    [CompilerGeneratedAttribute]
private String[] <AddHost>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Attach>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ulong> <BlkioWeightDevice>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <CapAdd>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <CapDrop>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CgroupParent>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Cidfile>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <CpuCount>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <CpuPercent>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <CpuPeriod>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <CpuQuota>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <CpuRtPeriod>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <CpuRtRuntime>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ulong> <Cpus>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CpusetCpus>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CpusetMems>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <CpuShares>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Device>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <DeviceCgroupRule>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ulong> <DeviceReadBps>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ulong> <DeviceReadIops>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ulong> <DeviceWriteBps>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ulong> <DeviceWriteIops>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <DisableContentTrust>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Dns>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <DnsOption>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <DnsSearch>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Entrypoint>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Env>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <EnvFile>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Expose>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <GroupAdd>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HealthCmd>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HealthInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <HealthRetries>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HealthStartPeriod>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HealthTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Hostname>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Init>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Interactive>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IoMaxbandwidth>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IoMaxiops>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Ip>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Ip6>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Ipc>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Isolation>k__BackingField;
    [CompilerGeneratedAttribute]
private string <KernelMemory>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Label>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <LabelFile>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Link>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <LinkLocalIp>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LogDriver>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <LogOpt>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MacAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Memory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MemoryReservation>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MemorySwap>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <MemorySwappiness>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Mount>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Network>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <NetworkAlias>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <NoHealthcheck>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <OomKillDisable>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <OomScoreAdj>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Pid>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <PidsLimit>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Platform>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Privileged>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Publish>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <PublishAll>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <ReadOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Restart>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Rm>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Runtime>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <SecurityOpt>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ShmSize>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StopSignal>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <StopTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <StorageOpt>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Sysctl>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Tmpfs>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Tty>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Ulimit>k__BackingField;
    [CompilerGeneratedAttribute]
private string <User>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Userns>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Uts>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Volume>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VolumeDriver>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <VolumesFrom>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Workdir>k__BackingField;
    public String[] AddHost { get; public set; }
    public String[] Attach { get; public set; }
    public Nullable`1<ulong> BlkioWeightDevice { get; public set; }
    public String[] CapAdd { get; public set; }
    public String[] CapDrop { get; public set; }
    public string CgroupParent { get; public set; }
    public string Cidfile { get; public set; }
    public Nullable`1<long> CpuCount { get; public set; }
    public Nullable`1<long> CpuPercent { get; public set; }
    public Nullable`1<long> CpuPeriod { get; public set; }
    public Nullable`1<long> CpuQuota { get; public set; }
    public Nullable`1<long> CpuRtPeriod { get; public set; }
    public Nullable`1<long> CpuRtRuntime { get; public set; }
    public Nullable`1<ulong> Cpus { get; public set; }
    public string CpusetCpus { get; public set; }
    public string CpusetMems { get; public set; }
    public Nullable`1<long> CpuShares { get; public set; }
    public String[] Device { get; public set; }
    public String[] DeviceCgroupRule { get; public set; }
    public Nullable`1<ulong> DeviceReadBps { get; public set; }
    public Nullable`1<ulong> DeviceReadIops { get; public set; }
    public Nullable`1<ulong> DeviceWriteBps { get; public set; }
    public Nullable`1<ulong> DeviceWriteIops { get; public set; }
    [AutoPropertyAttribute]
public Nullable`1<bool> DisableContentTrust { get; public set; }
    public String[] Dns { get; public set; }
    public String[] DnsOption { get; public set; }
    public String[] DnsSearch { get; public set; }
    public string Entrypoint { get; public set; }
    public String[] Env { get; public set; }
    public String[] EnvFile { get; public set; }
    public String[] Expose { get; public set; }
    public String[] GroupAdd { get; public set; }
    public string HealthCmd { get; public set; }
    public string HealthInterval { get; public set; }
    public Nullable`1<int> HealthRetries { get; public set; }
    public string HealthStartPeriod { get; public set; }
    public string HealthTimeout { get; public set; }
    public string Hostname { get; public set; }
    public Nullable`1<bool> Init { get; public set; }
    public Nullable`1<bool> Interactive { get; public set; }
    public string IoMaxbandwidth { get; public set; }
    public string IoMaxiops { get; public set; }
    public string Ip { get; public set; }
    public string Ip6 { get; public set; }
    public string Ipc { get; public set; }
    public string Isolation { get; public set; }
    public string KernelMemory { get; public set; }
    public String[] Label { get; public set; }
    public String[] LabelFile { get; public set; }
    public String[] Link { get; public set; }
    public String[] LinkLocalIp { get; public set; }
    public string LogDriver { get; public set; }
    public String[] LogOpt { get; public set; }
    public string MacAddress { get; public set; }
    public string Memory { get; public set; }
    public string MemoryReservation { get; public set; }
    public string MemorySwap { get; public set; }
    public Nullable`1<long> MemorySwappiness { get; public set; }
    public String[] Mount { get; public set; }
    public string Name { get; public set; }
    public string Network { get; public set; }
    public String[] NetworkAlias { get; public set; }
    public Nullable`1<bool> NoHealthcheck { get; public set; }
    public Nullable`1<bool> OomKillDisable { get; public set; }
    public Nullable`1<int> OomScoreAdj { get; public set; }
    public string Pid { get; public set; }
    public Nullable`1<long> PidsLimit { get; public set; }
    public string Platform { get; public set; }
    public Nullable`1<bool> Privileged { get; public set; }
    public String[] Publish { get; public set; }
    public Nullable`1<bool> PublishAll { get; public set; }
    public Nullable`1<bool> ReadOnly { get; public set; }
    public string Restart { get; public set; }
    public Nullable`1<bool> Rm { get; public set; }
    public string Runtime { get; public set; }
    public String[] SecurityOpt { get; public set; }
    public string ShmSize { get; public set; }
    public string StopSignal { get; public set; }
    public Nullable`1<int> StopTimeout { get; public set; }
    public String[] StorageOpt { get; public set; }
    public String[] Sysctl { get; public set; }
    public String[] Tmpfs { get; public set; }
    public Nullable`1<bool> Tty { get; public set; }
    public String[] Ulimit { get; public set; }
    public string User { get; public set; }
    public string Userns { get; public set; }
    public string Uts { get; public set; }
    public String[] Volume { get; public set; }
    public string VolumeDriver { get; public set; }
    public String[] VolumesFrom { get; public set; }
    public string Workdir { get; public set; }
    [CompilerGeneratedAttribute]
public String[] get_AddHost();
    [CompilerGeneratedAttribute]
public void set_AddHost(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_Attach();
    [CompilerGeneratedAttribute]
public void set_Attach(String[] value);
    [CompilerGeneratedAttribute]
public Nullable`1<ulong> get_BlkioWeightDevice();
    [CompilerGeneratedAttribute]
public void set_BlkioWeightDevice(Nullable`1<ulong> value);
    [CompilerGeneratedAttribute]
public String[] get_CapAdd();
    [CompilerGeneratedAttribute]
public void set_CapAdd(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_CapDrop();
    [CompilerGeneratedAttribute]
public void set_CapDrop(String[] value);
    [CompilerGeneratedAttribute]
public string get_CgroupParent();
    [CompilerGeneratedAttribute]
public void set_CgroupParent(string value);
    [CompilerGeneratedAttribute]
public string get_Cidfile();
    [CompilerGeneratedAttribute]
public void set_Cidfile(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_CpuCount();
    [CompilerGeneratedAttribute]
public void set_CpuCount(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_CpuPercent();
    [CompilerGeneratedAttribute]
public void set_CpuPercent(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_CpuPeriod();
    [CompilerGeneratedAttribute]
public void set_CpuPeriod(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_CpuQuota();
    [CompilerGeneratedAttribute]
public void set_CpuQuota(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_CpuRtPeriod();
    [CompilerGeneratedAttribute]
public void set_CpuRtPeriod(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_CpuRtRuntime();
    [CompilerGeneratedAttribute]
public void set_CpuRtRuntime(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public Nullable`1<ulong> get_Cpus();
    [CompilerGeneratedAttribute]
public void set_Cpus(Nullable`1<ulong> value);
    [CompilerGeneratedAttribute]
public string get_CpusetCpus();
    [CompilerGeneratedAttribute]
public void set_CpusetCpus(string value);
    [CompilerGeneratedAttribute]
public string get_CpusetMems();
    [CompilerGeneratedAttribute]
public void set_CpusetMems(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_CpuShares();
    [CompilerGeneratedAttribute]
public void set_CpuShares(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public String[] get_Device();
    [CompilerGeneratedAttribute]
public void set_Device(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_DeviceCgroupRule();
    [CompilerGeneratedAttribute]
public void set_DeviceCgroupRule(String[] value);
    [CompilerGeneratedAttribute]
public Nullable`1<ulong> get_DeviceReadBps();
    [CompilerGeneratedAttribute]
public void set_DeviceReadBps(Nullable`1<ulong> value);
    [CompilerGeneratedAttribute]
public Nullable`1<ulong> get_DeviceReadIops();
    [CompilerGeneratedAttribute]
public void set_DeviceReadIops(Nullable`1<ulong> value);
    [CompilerGeneratedAttribute]
public Nullable`1<ulong> get_DeviceWriteBps();
    [CompilerGeneratedAttribute]
public void set_DeviceWriteBps(Nullable`1<ulong> value);
    [CompilerGeneratedAttribute]
public Nullable`1<ulong> get_DeviceWriteIops();
    [CompilerGeneratedAttribute]
public void set_DeviceWriteIops(Nullable`1<ulong> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_DisableContentTrust();
    [CompilerGeneratedAttribute]
public void set_DisableContentTrust(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public String[] get_Dns();
    [CompilerGeneratedAttribute]
public void set_Dns(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_DnsOption();
    [CompilerGeneratedAttribute]
public void set_DnsOption(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_DnsSearch();
    [CompilerGeneratedAttribute]
public void set_DnsSearch(String[] value);
    [CompilerGeneratedAttribute]
public string get_Entrypoint();
    [CompilerGeneratedAttribute]
public void set_Entrypoint(string value);
    [CompilerGeneratedAttribute]
public String[] get_Env();
    [CompilerGeneratedAttribute]
public void set_Env(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_EnvFile();
    [CompilerGeneratedAttribute]
public void set_EnvFile(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_Expose();
    [CompilerGeneratedAttribute]
public void set_Expose(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_GroupAdd();
    [CompilerGeneratedAttribute]
public void set_GroupAdd(String[] value);
    [CompilerGeneratedAttribute]
public string get_HealthCmd();
    [CompilerGeneratedAttribute]
public void set_HealthCmd(string value);
    [CompilerGeneratedAttribute]
public string get_HealthInterval();
    [CompilerGeneratedAttribute]
public void set_HealthInterval(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_HealthRetries();
    [CompilerGeneratedAttribute]
public void set_HealthRetries(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_HealthStartPeriod();
    [CompilerGeneratedAttribute]
public void set_HealthStartPeriod(string value);
    [CompilerGeneratedAttribute]
public string get_HealthTimeout();
    [CompilerGeneratedAttribute]
public void set_HealthTimeout(string value);
    [CompilerGeneratedAttribute]
public string get_Hostname();
    [CompilerGeneratedAttribute]
public void set_Hostname(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Init();
    [CompilerGeneratedAttribute]
public void set_Init(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Interactive();
    [CompilerGeneratedAttribute]
public void set_Interactive(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_IoMaxbandwidth();
    [CompilerGeneratedAttribute]
public void set_IoMaxbandwidth(string value);
    [CompilerGeneratedAttribute]
public string get_IoMaxiops();
    [CompilerGeneratedAttribute]
public void set_IoMaxiops(string value);
    [CompilerGeneratedAttribute]
public string get_Ip();
    [CompilerGeneratedAttribute]
public void set_Ip(string value);
    [CompilerGeneratedAttribute]
public string get_Ip6();
    [CompilerGeneratedAttribute]
public void set_Ip6(string value);
    [CompilerGeneratedAttribute]
public string get_Ipc();
    [CompilerGeneratedAttribute]
public void set_Ipc(string value);
    [CompilerGeneratedAttribute]
public string get_Isolation();
    [CompilerGeneratedAttribute]
public void set_Isolation(string value);
    [CompilerGeneratedAttribute]
public string get_KernelMemory();
    [CompilerGeneratedAttribute]
public void set_KernelMemory(string value);
    [CompilerGeneratedAttribute]
public String[] get_Label();
    [CompilerGeneratedAttribute]
public void set_Label(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_LabelFile();
    [CompilerGeneratedAttribute]
public void set_LabelFile(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_Link();
    [CompilerGeneratedAttribute]
public void set_Link(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_LinkLocalIp();
    [CompilerGeneratedAttribute]
public void set_LinkLocalIp(String[] value);
    [CompilerGeneratedAttribute]
public string get_LogDriver();
    [CompilerGeneratedAttribute]
public void set_LogDriver(string value);
    [CompilerGeneratedAttribute]
public String[] get_LogOpt();
    [CompilerGeneratedAttribute]
public void set_LogOpt(String[] value);
    [CompilerGeneratedAttribute]
public string get_MacAddress();
    [CompilerGeneratedAttribute]
public void set_MacAddress(string value);
    [CompilerGeneratedAttribute]
public string get_Memory();
    [CompilerGeneratedAttribute]
public void set_Memory(string value);
    [CompilerGeneratedAttribute]
public string get_MemoryReservation();
    [CompilerGeneratedAttribute]
public void set_MemoryReservation(string value);
    [CompilerGeneratedAttribute]
public string get_MemorySwap();
    [CompilerGeneratedAttribute]
public void set_MemorySwap(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_MemorySwappiness();
    [CompilerGeneratedAttribute]
public void set_MemorySwappiness(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public String[] get_Mount();
    [CompilerGeneratedAttribute]
public void set_Mount(String[] value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Network();
    [CompilerGeneratedAttribute]
public void set_Network(string value);
    [CompilerGeneratedAttribute]
public String[] get_NetworkAlias();
    [CompilerGeneratedAttribute]
public void set_NetworkAlias(String[] value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_NoHealthcheck();
    [CompilerGeneratedAttribute]
public void set_NoHealthcheck(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_OomKillDisable();
    [CompilerGeneratedAttribute]
public void set_OomKillDisable(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_OomScoreAdj();
    [CompilerGeneratedAttribute]
public void set_OomScoreAdj(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_Pid();
    [CompilerGeneratedAttribute]
public void set_Pid(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_PidsLimit();
    [CompilerGeneratedAttribute]
public void set_PidsLimit(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public string get_Platform();
    [CompilerGeneratedAttribute]
public void set_Platform(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Privileged();
    [CompilerGeneratedAttribute]
public void set_Privileged(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public String[] get_Publish();
    [CompilerGeneratedAttribute]
public void set_Publish(String[] value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_PublishAll();
    [CompilerGeneratedAttribute]
public void set_PublishAll(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_ReadOnly();
    [CompilerGeneratedAttribute]
public void set_ReadOnly(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_Restart();
    [CompilerGeneratedAttribute]
public void set_Restart(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Rm();
    [CompilerGeneratedAttribute]
public void set_Rm(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_Runtime();
    [CompilerGeneratedAttribute]
public void set_Runtime(string value);
    [CompilerGeneratedAttribute]
public String[] get_SecurityOpt();
    [CompilerGeneratedAttribute]
public void set_SecurityOpt(String[] value);
    [CompilerGeneratedAttribute]
public string get_ShmSize();
    [CompilerGeneratedAttribute]
public void set_ShmSize(string value);
    [CompilerGeneratedAttribute]
public string get_StopSignal();
    [CompilerGeneratedAttribute]
public void set_StopSignal(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_StopTimeout();
    [CompilerGeneratedAttribute]
public void set_StopTimeout(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public String[] get_StorageOpt();
    [CompilerGeneratedAttribute]
public void set_StorageOpt(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_Sysctl();
    [CompilerGeneratedAttribute]
public void set_Sysctl(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_Tmpfs();
    [CompilerGeneratedAttribute]
public void set_Tmpfs(String[] value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Tty();
    [CompilerGeneratedAttribute]
public void set_Tty(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public String[] get_Ulimit();
    [CompilerGeneratedAttribute]
public void set_Ulimit(String[] value);
    [CompilerGeneratedAttribute]
public string get_User();
    [CompilerGeneratedAttribute]
public void set_User(string value);
    [CompilerGeneratedAttribute]
public string get_Userns();
    [CompilerGeneratedAttribute]
public void set_Userns(string value);
    [CompilerGeneratedAttribute]
public string get_Uts();
    [CompilerGeneratedAttribute]
public void set_Uts(string value);
    [CompilerGeneratedAttribute]
public String[] get_Volume();
    [CompilerGeneratedAttribute]
public void set_Volume(String[] value);
    [CompilerGeneratedAttribute]
public string get_VolumeDriver();
    [CompilerGeneratedAttribute]
public void set_VolumeDriver(string value);
    [CompilerGeneratedAttribute]
public String[] get_VolumesFrom();
    [CompilerGeneratedAttribute]
public void set_VolumesFrom(String[] value);
    [CompilerGeneratedAttribute]
public string get_Workdir();
    [CompilerGeneratedAttribute]
public void set_Workdir(string value);
}
public class Cake.Docker.DockerContainerExecSettings : AutoToolSettings {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Detach>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DetachKeys>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Env>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Interactive>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Privileged>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Tty>k__BackingField;
    [CompilerGeneratedAttribute]
private string <User>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Workdir>k__BackingField;
    public Nullable`1<bool> Detach { get; public set; }
    public string DetachKeys { get; public set; }
    public String[] Env { get; public set; }
    public Nullable`1<bool> Interactive { get; public set; }
    public Nullable`1<bool> Privileged { get; public set; }
    public Nullable`1<bool> Tty { get; public set; }
    public string User { get; public set; }
    public string Workdir { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Detach();
    [CompilerGeneratedAttribute]
public void set_Detach(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_DetachKeys();
    [CompilerGeneratedAttribute]
public void set_DetachKeys(string value);
    [CompilerGeneratedAttribute]
public String[] get_Env();
    [CompilerGeneratedAttribute]
public void set_Env(String[] value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Interactive();
    [CompilerGeneratedAttribute]
public void set_Interactive(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Privileged();
    [CompilerGeneratedAttribute]
public void set_Privileged(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Tty();
    [CompilerGeneratedAttribute]
public void set_Tty(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_User();
    [CompilerGeneratedAttribute]
public void set_User(string value);
    [CompilerGeneratedAttribute]
public string get_Workdir();
    [CompilerGeneratedAttribute]
public void set_Workdir(string value);
}
public class Cake.Docker.DockerContainerLogsSettings : AutoToolSettings {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Details>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Follow>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Since>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Tail>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Timestamps>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Until>k__BackingField;
    public Nullable`1<bool> Details { get; public set; }
    public Nullable`1<bool> Follow { get; public set; }
    public string Since { get; public set; }
    public string Tail { get; public set; }
    public Nullable`1<bool> Timestamps { get; public set; }
    public string Until { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Details();
    [CompilerGeneratedAttribute]
public void set_Details(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Follow();
    [CompilerGeneratedAttribute]
public void set_Follow(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_Since();
    [CompilerGeneratedAttribute]
public void set_Since(string value);
    [CompilerGeneratedAttribute]
public string get_Tail();
    [CompilerGeneratedAttribute]
public void set_Tail(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Timestamps();
    [CompilerGeneratedAttribute]
public void set_Timestamps(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_Until();
    [CompilerGeneratedAttribute]
public void set_Until(string value);
}
public class Cake.Docker.DockerContainerLsSettings : AutoToolSettings {
    [CompilerGeneratedAttribute]
private bool <All>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Filter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Format>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Last>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Latest>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoTrunc>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Quiet>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Size>k__BackingField;
    public bool All { get; public set; }
    public string Filter { get; public set; }
    public string Format { get; public set; }
    public int Last { get; public set; }
    public bool Latest { get; public set; }
    public bool NoTrunc { get; public set; }
    public bool Quiet { get; public set; }
    public bool Size { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_All();
    [CompilerGeneratedAttribute]
public void set_All(bool value);
    [CompilerGeneratedAttribute]
public string get_Filter();
    [CompilerGeneratedAttribute]
public void set_Filter(string value);
    [CompilerGeneratedAttribute]
public string get_Format();
    [CompilerGeneratedAttribute]
public void set_Format(string value);
    [CompilerGeneratedAttribute]
public int get_Last();
    [CompilerGeneratedAttribute]
public void set_Last(int value);
    [CompilerGeneratedAttribute]
public bool get_Latest();
    [CompilerGeneratedAttribute]
public void set_Latest(bool value);
    [CompilerGeneratedAttribute]
public bool get_NoTrunc();
    [CompilerGeneratedAttribute]
public void set_NoTrunc(bool value);
    [CompilerGeneratedAttribute]
public bool get_Quiet();
    [CompilerGeneratedAttribute]
public void set_Quiet(bool value);
    [CompilerGeneratedAttribute]
public bool get_Size();
    [CompilerGeneratedAttribute]
public void set_Size(bool value);
}
public class Cake.Docker.DockerContainerPsSettings : AutoToolSettings {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <All>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Filter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Format>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Last>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Latest>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <NoTrunc>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Quiet>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Size>k__BackingField;
    public Nullable`1<bool> All { get; public set; }
    public string Filter { get; public set; }
    public string Format { get; public set; }
    public int Last { get; public set; }
    public Nullable`1<bool> Latest { get; public set; }
    public Nullable`1<bool> NoTrunc { get; public set; }
    public Nullable`1<bool> Quiet { get; public set; }
    public Nullable`1<bool> Size { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_All();
    [CompilerGeneratedAttribute]
public void set_All(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_Filter();
    [CompilerGeneratedAttribute]
public void set_Filter(string value);
    [CompilerGeneratedAttribute]
public string get_Format();
    [CompilerGeneratedAttribute]
public void set_Format(string value);
    [CompilerGeneratedAttribute]
public int get_Last();
    [CompilerGeneratedAttribute]
public void set_Last(int value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Latest();
    [CompilerGeneratedAttribute]
public void set_Latest(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_NoTrunc();
    [CompilerGeneratedAttribute]
public void set_NoTrunc(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Quiet();
    [CompilerGeneratedAttribute]
public void set_Quiet(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Size();
    [CompilerGeneratedAttribute]
public void set_Size(Nullable`1<bool> value);
}
public class Cake.Docker.DockerContainerRmSettings : AutoToolSettings {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Force>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Link>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Volumes>k__BackingField;
    public Nullable`1<bool> Force { get; public set; }
    public Nullable`1<bool> Link { get; public set; }
    public Nullable`1<bool> Volumes { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Force();
    [CompilerGeneratedAttribute]
public void set_Force(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Link();
    [CompilerGeneratedAttribute]
public void set_Link(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Volumes();
    [CompilerGeneratedAttribute]
public void set_Volumes(Nullable`1<bool> value);
}
public class Cake.Docker.DockerContainerRunSettings : AutoToolSettings {
    [CompilerGeneratedAttribute]
private String[] <AddHost>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Attach>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ulong> <BlkioWeightDevice>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <CapAdd>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <CapDrop>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CgroupParent>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Cidfile>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <CpuCount>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <CpuPercent>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <CpuPeriod>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <CpuQuota>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <CpuRtPeriod>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <CpuRtRuntime>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ulong> <Cpus>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CpusetCpus>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CpusetMems>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <CpuShares>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Detach>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DetachKeys>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Device>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <DeviceCgroupRule>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ulong> <DeviceReadBps>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ulong> <DeviceReadIops>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ulong> <DeviceWriteBps>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ulong> <DeviceWriteIops>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <DisableContentTrust>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Dns>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <DnsOption>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <DnsSearch>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Entrypoint>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Env>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <EnvFile>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Expose>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <GroupAdd>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HealthCmd>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HealthInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <HealthRetries>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HealthStartPeriod>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HealthTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Hostname>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Init>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Interactive>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IoMaxbandwidth>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IoMaxiops>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Ip>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Ip6>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Ipc>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Isolation>k__BackingField;
    [CompilerGeneratedAttribute]
private string <KernelMemory>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Label>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <LabelFile>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Link>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <LinkLocalIp>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LogDriver>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <LogOpt>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MacAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Memory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MemoryReservation>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MemorySwap>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <MemorySwappiness>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Mount>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Network>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <NetworkAlias>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <NoHealthcheck>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <OomKillDisable>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <OomScoreAdj>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Pid>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <PidsLimit>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Platform>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Privileged>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Publish>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <PublishAll>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <ReadOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Restart>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Rm>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Runtime>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <SecurityOpt>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ShmSize>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <SigProxy>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StopSignal>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <StopTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <StorageOpt>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Sysctl>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Tmpfs>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Tty>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Ulimit>k__BackingField;
    [CompilerGeneratedAttribute]
private string <User>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Userns>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Uts>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Volume>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VolumeDriver>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <VolumesFrom>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Workdir>k__BackingField;
    public String[] AddHost { get; public set; }
    public String[] Attach { get; public set; }
    public Nullable`1<ulong> BlkioWeightDevice { get; public set; }
    public String[] CapAdd { get; public set; }
    public String[] CapDrop { get; public set; }
    public string CgroupParent { get; public set; }
    public string Cidfile { get; public set; }
    public Nullable`1<long> CpuCount { get; public set; }
    public Nullable`1<long> CpuPercent { get; public set; }
    public Nullable`1<long> CpuPeriod { get; public set; }
    public Nullable`1<long> CpuQuota { get; public set; }
    public Nullable`1<long> CpuRtPeriod { get; public set; }
    public Nullable`1<long> CpuRtRuntime { get; public set; }
    public Nullable`1<ulong> Cpus { get; public set; }
    public string CpusetCpus { get; public set; }
    public string CpusetMems { get; public set; }
    public Nullable`1<long> CpuShares { get; public set; }
    public Nullable`1<bool> Detach { get; public set; }
    public string DetachKeys { get; public set; }
    public String[] Device { get; public set; }
    public String[] DeviceCgroupRule { get; public set; }
    public Nullable`1<ulong> DeviceReadBps { get; public set; }
    public Nullable`1<ulong> DeviceReadIops { get; public set; }
    public Nullable`1<ulong> DeviceWriteBps { get; public set; }
    public Nullable`1<ulong> DeviceWriteIops { get; public set; }
    [AutoPropertyAttribute]
public Nullable`1<bool> DisableContentTrust { get; public set; }
    public String[] Dns { get; public set; }
    public String[] DnsOption { get; public set; }
    public String[] DnsSearch { get; public set; }
    public string Entrypoint { get; public set; }
    public String[] Env { get; public set; }
    public String[] EnvFile { get; public set; }
    public String[] Expose { get; public set; }
    public String[] GroupAdd { get; public set; }
    public string HealthCmd { get; public set; }
    public string HealthInterval { get; public set; }
    public Nullable`1<int> HealthRetries { get; public set; }
    public string HealthStartPeriod { get; public set; }
    public string HealthTimeout { get; public set; }
    public string Hostname { get; public set; }
    public Nullable`1<bool> Init { get; public set; }
    public Nullable`1<bool> Interactive { get; public set; }
    public string IoMaxbandwidth { get; public set; }
    public string IoMaxiops { get; public set; }
    public string Ip { get; public set; }
    public string Ip6 { get; public set; }
    public string Ipc { get; public set; }
    public string Isolation { get; public set; }
    public string KernelMemory { get; public set; }
    public String[] Label { get; public set; }
    public String[] LabelFile { get; public set; }
    public String[] Link { get; public set; }
    public String[] LinkLocalIp { get; public set; }
    public string LogDriver { get; public set; }
    public String[] LogOpt { get; public set; }
    public string MacAddress { get; public set; }
    public string Memory { get; public set; }
    public string MemoryReservation { get; public set; }
    public string MemorySwap { get; public set; }
    public Nullable`1<long> MemorySwappiness { get; public set; }
    public String[] Mount { get; public set; }
    public string Name { get; public set; }
    public string Network { get; public set; }
    public String[] NetworkAlias { get; public set; }
    public Nullable`1<bool> NoHealthcheck { get; public set; }
    public Nullable`1<bool> OomKillDisable { get; public set; }
    public Nullable`1<int> OomScoreAdj { get; public set; }
    public string Pid { get; public set; }
    public Nullable`1<long> PidsLimit { get; public set; }
    public string Platform { get; public set; }
    public Nullable`1<bool> Privileged { get; public set; }
    public String[] Publish { get; public set; }
    public Nullable`1<bool> PublishAll { get; public set; }
    public Nullable`1<bool> ReadOnly { get; public set; }
    public string Restart { get; public set; }
    public Nullable`1<bool> Rm { get; public set; }
    public string Runtime { get; public set; }
    public String[] SecurityOpt { get; public set; }
    public string ShmSize { get; public set; }
    public Nullable`1<bool> SigProxy { get; public set; }
    public string StopSignal { get; public set; }
    public Nullable`1<int> StopTimeout { get; public set; }
    public String[] StorageOpt { get; public set; }
    public String[] Sysctl { get; public set; }
    public String[] Tmpfs { get; public set; }
    public Nullable`1<bool> Tty { get; public set; }
    public String[] Ulimit { get; public set; }
    public string User { get; public set; }
    public string Userns { get; public set; }
    public string Uts { get; public set; }
    public String[] Volume { get; public set; }
    public string VolumeDriver { get; public set; }
    public String[] VolumesFrom { get; public set; }
    public string Workdir { get; public set; }
    [CompilerGeneratedAttribute]
public String[] get_AddHost();
    [CompilerGeneratedAttribute]
public void set_AddHost(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_Attach();
    [CompilerGeneratedAttribute]
public void set_Attach(String[] value);
    [CompilerGeneratedAttribute]
public Nullable`1<ulong> get_BlkioWeightDevice();
    [CompilerGeneratedAttribute]
public void set_BlkioWeightDevice(Nullable`1<ulong> value);
    [CompilerGeneratedAttribute]
public String[] get_CapAdd();
    [CompilerGeneratedAttribute]
public void set_CapAdd(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_CapDrop();
    [CompilerGeneratedAttribute]
public void set_CapDrop(String[] value);
    [CompilerGeneratedAttribute]
public string get_CgroupParent();
    [CompilerGeneratedAttribute]
public void set_CgroupParent(string value);
    [CompilerGeneratedAttribute]
public string get_Cidfile();
    [CompilerGeneratedAttribute]
public void set_Cidfile(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_CpuCount();
    [CompilerGeneratedAttribute]
public void set_CpuCount(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_CpuPercent();
    [CompilerGeneratedAttribute]
public void set_CpuPercent(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_CpuPeriod();
    [CompilerGeneratedAttribute]
public void set_CpuPeriod(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_CpuQuota();
    [CompilerGeneratedAttribute]
public void set_CpuQuota(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_CpuRtPeriod();
    [CompilerGeneratedAttribute]
public void set_CpuRtPeriod(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_CpuRtRuntime();
    [CompilerGeneratedAttribute]
public void set_CpuRtRuntime(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public Nullable`1<ulong> get_Cpus();
    [CompilerGeneratedAttribute]
public void set_Cpus(Nullable`1<ulong> value);
    [CompilerGeneratedAttribute]
public string get_CpusetCpus();
    [CompilerGeneratedAttribute]
public void set_CpusetCpus(string value);
    [CompilerGeneratedAttribute]
public string get_CpusetMems();
    [CompilerGeneratedAttribute]
public void set_CpusetMems(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_CpuShares();
    [CompilerGeneratedAttribute]
public void set_CpuShares(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Detach();
    [CompilerGeneratedAttribute]
public void set_Detach(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_DetachKeys();
    [CompilerGeneratedAttribute]
public void set_DetachKeys(string value);
    [CompilerGeneratedAttribute]
public String[] get_Device();
    [CompilerGeneratedAttribute]
public void set_Device(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_DeviceCgroupRule();
    [CompilerGeneratedAttribute]
public void set_DeviceCgroupRule(String[] value);
    [CompilerGeneratedAttribute]
public Nullable`1<ulong> get_DeviceReadBps();
    [CompilerGeneratedAttribute]
public void set_DeviceReadBps(Nullable`1<ulong> value);
    [CompilerGeneratedAttribute]
public Nullable`1<ulong> get_DeviceReadIops();
    [CompilerGeneratedAttribute]
public void set_DeviceReadIops(Nullable`1<ulong> value);
    [CompilerGeneratedAttribute]
public Nullable`1<ulong> get_DeviceWriteBps();
    [CompilerGeneratedAttribute]
public void set_DeviceWriteBps(Nullable`1<ulong> value);
    [CompilerGeneratedAttribute]
public Nullable`1<ulong> get_DeviceWriteIops();
    [CompilerGeneratedAttribute]
public void set_DeviceWriteIops(Nullable`1<ulong> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_DisableContentTrust();
    [CompilerGeneratedAttribute]
public void set_DisableContentTrust(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public String[] get_Dns();
    [CompilerGeneratedAttribute]
public void set_Dns(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_DnsOption();
    [CompilerGeneratedAttribute]
public void set_DnsOption(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_DnsSearch();
    [CompilerGeneratedAttribute]
public void set_DnsSearch(String[] value);
    [CompilerGeneratedAttribute]
public string get_Entrypoint();
    [CompilerGeneratedAttribute]
public void set_Entrypoint(string value);
    [CompilerGeneratedAttribute]
public String[] get_Env();
    [CompilerGeneratedAttribute]
public void set_Env(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_EnvFile();
    [CompilerGeneratedAttribute]
public void set_EnvFile(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_Expose();
    [CompilerGeneratedAttribute]
public void set_Expose(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_GroupAdd();
    [CompilerGeneratedAttribute]
public void set_GroupAdd(String[] value);
    [CompilerGeneratedAttribute]
public string get_HealthCmd();
    [CompilerGeneratedAttribute]
public void set_HealthCmd(string value);
    [CompilerGeneratedAttribute]
public string get_HealthInterval();
    [CompilerGeneratedAttribute]
public void set_HealthInterval(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_HealthRetries();
    [CompilerGeneratedAttribute]
public void set_HealthRetries(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_HealthStartPeriod();
    [CompilerGeneratedAttribute]
public void set_HealthStartPeriod(string value);
    [CompilerGeneratedAttribute]
public string get_HealthTimeout();
    [CompilerGeneratedAttribute]
public void set_HealthTimeout(string value);
    [CompilerGeneratedAttribute]
public string get_Hostname();
    [CompilerGeneratedAttribute]
public void set_Hostname(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Init();
    [CompilerGeneratedAttribute]
public void set_Init(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Interactive();
    [CompilerGeneratedAttribute]
public void set_Interactive(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_IoMaxbandwidth();
    [CompilerGeneratedAttribute]
public void set_IoMaxbandwidth(string value);
    [CompilerGeneratedAttribute]
public string get_IoMaxiops();
    [CompilerGeneratedAttribute]
public void set_IoMaxiops(string value);
    [CompilerGeneratedAttribute]
public string get_Ip();
    [CompilerGeneratedAttribute]
public void set_Ip(string value);
    [CompilerGeneratedAttribute]
public string get_Ip6();
    [CompilerGeneratedAttribute]
public void set_Ip6(string value);
    [CompilerGeneratedAttribute]
public string get_Ipc();
    [CompilerGeneratedAttribute]
public void set_Ipc(string value);
    [CompilerGeneratedAttribute]
public string get_Isolation();
    [CompilerGeneratedAttribute]
public void set_Isolation(string value);
    [CompilerGeneratedAttribute]
public string get_KernelMemory();
    [CompilerGeneratedAttribute]
public void set_KernelMemory(string value);
    [CompilerGeneratedAttribute]
public String[] get_Label();
    [CompilerGeneratedAttribute]
public void set_Label(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_LabelFile();
    [CompilerGeneratedAttribute]
public void set_LabelFile(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_Link();
    [CompilerGeneratedAttribute]
public void set_Link(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_LinkLocalIp();
    [CompilerGeneratedAttribute]
public void set_LinkLocalIp(String[] value);
    [CompilerGeneratedAttribute]
public string get_LogDriver();
    [CompilerGeneratedAttribute]
public void set_LogDriver(string value);
    [CompilerGeneratedAttribute]
public String[] get_LogOpt();
    [CompilerGeneratedAttribute]
public void set_LogOpt(String[] value);
    [CompilerGeneratedAttribute]
public string get_MacAddress();
    [CompilerGeneratedAttribute]
public void set_MacAddress(string value);
    [CompilerGeneratedAttribute]
public string get_Memory();
    [CompilerGeneratedAttribute]
public void set_Memory(string value);
    [CompilerGeneratedAttribute]
public string get_MemoryReservation();
    [CompilerGeneratedAttribute]
public void set_MemoryReservation(string value);
    [CompilerGeneratedAttribute]
public string get_MemorySwap();
    [CompilerGeneratedAttribute]
public void set_MemorySwap(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_MemorySwappiness();
    [CompilerGeneratedAttribute]
public void set_MemorySwappiness(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public String[] get_Mount();
    [CompilerGeneratedAttribute]
public void set_Mount(String[] value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Network();
    [CompilerGeneratedAttribute]
public void set_Network(string value);
    [CompilerGeneratedAttribute]
public String[] get_NetworkAlias();
    [CompilerGeneratedAttribute]
public void set_NetworkAlias(String[] value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_NoHealthcheck();
    [CompilerGeneratedAttribute]
public void set_NoHealthcheck(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_OomKillDisable();
    [CompilerGeneratedAttribute]
public void set_OomKillDisable(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_OomScoreAdj();
    [CompilerGeneratedAttribute]
public void set_OomScoreAdj(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_Pid();
    [CompilerGeneratedAttribute]
public void set_Pid(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_PidsLimit();
    [CompilerGeneratedAttribute]
public void set_PidsLimit(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public string get_Platform();
    [CompilerGeneratedAttribute]
public void set_Platform(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Privileged();
    [CompilerGeneratedAttribute]
public void set_Privileged(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public String[] get_Publish();
    [CompilerGeneratedAttribute]
public void set_Publish(String[] value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_PublishAll();
    [CompilerGeneratedAttribute]
public void set_PublishAll(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_ReadOnly();
    [CompilerGeneratedAttribute]
public void set_ReadOnly(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_Restart();
    [CompilerGeneratedAttribute]
public void set_Restart(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Rm();
    [CompilerGeneratedAttribute]
public void set_Rm(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_Runtime();
    [CompilerGeneratedAttribute]
public void set_Runtime(string value);
    [CompilerGeneratedAttribute]
public String[] get_SecurityOpt();
    [CompilerGeneratedAttribute]
public void set_SecurityOpt(String[] value);
    [CompilerGeneratedAttribute]
public string get_ShmSize();
    [CompilerGeneratedAttribute]
public void set_ShmSize(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_SigProxy();
    [CompilerGeneratedAttribute]
public void set_SigProxy(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_StopSignal();
    [CompilerGeneratedAttribute]
public void set_StopSignal(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_StopTimeout();
    [CompilerGeneratedAttribute]
public void set_StopTimeout(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public String[] get_StorageOpt();
    [CompilerGeneratedAttribute]
public void set_StorageOpt(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_Sysctl();
    [CompilerGeneratedAttribute]
public void set_Sysctl(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_Tmpfs();
    [CompilerGeneratedAttribute]
public void set_Tmpfs(String[] value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Tty();
    [CompilerGeneratedAttribute]
public void set_Tty(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public String[] get_Ulimit();
    [CompilerGeneratedAttribute]
public void set_Ulimit(String[] value);
    [CompilerGeneratedAttribute]
public string get_User();
    [CompilerGeneratedAttribute]
public void set_User(string value);
    [CompilerGeneratedAttribute]
public string get_Userns();
    [CompilerGeneratedAttribute]
public void set_Userns(string value);
    [CompilerGeneratedAttribute]
public string get_Uts();
    [CompilerGeneratedAttribute]
public void set_Uts(string value);
    [CompilerGeneratedAttribute]
public String[] get_Volume();
    [CompilerGeneratedAttribute]
public void set_Volume(String[] value);
    [CompilerGeneratedAttribute]
public string get_VolumeDriver();
    [CompilerGeneratedAttribute]
public void set_VolumeDriver(string value);
    [CompilerGeneratedAttribute]
public String[] get_VolumesFrom();
    [CompilerGeneratedAttribute]
public void set_VolumesFrom(String[] value);
    [CompilerGeneratedAttribute]
public string get_Workdir();
    [CompilerGeneratedAttribute]
public void set_Workdir(string value);
}
public class Cake.Docker.DockerContainerStartSettings : AutoToolSettings {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Attach>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Checkpoint>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CheckpointDir>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DetachKeys>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Interactive>k__BackingField;
    public Nullable`1<bool> Attach { get; public set; }
    public string Checkpoint { get; public set; }
    public string CheckpointDir { get; public set; }
    public string DetachKeys { get; public set; }
    public Nullable`1<bool> Interactive { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Attach();
    [CompilerGeneratedAttribute]
public void set_Attach(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_Checkpoint();
    [CompilerGeneratedAttribute]
public void set_Checkpoint(string value);
    [CompilerGeneratedAttribute]
public string get_CheckpointDir();
    [CompilerGeneratedAttribute]
public void set_CheckpointDir(string value);
    [CompilerGeneratedAttribute]
public string get_DetachKeys();
    [CompilerGeneratedAttribute]
public void set_DetachKeys(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Interactive();
    [CompilerGeneratedAttribute]
public void set_Interactive(Nullable`1<bool> value);
}
public class Cake.Docker.DockerContainerStopSettings : AutoToolSettings {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Time>k__BackingField;
    public Nullable`1<int> Time { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Time();
    [CompilerGeneratedAttribute]
public void set_Time(Nullable`1<int> value);
}
public class Cake.Docker.DockerCustomCommandSettings : AutoToolSettings {
}
public class Cake.Docker.DockerImageBuildSettings : AutoToolSettings {
    [CompilerGeneratedAttribute]
private String[] <AddHost>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <BuildArg>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <CacheFrom>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CgroupParent>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Compress>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <CpuPeriod>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <CpuQuota>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CpusetCpus>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CpusetMems>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <CpuShares>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <DisableContentTrust>k__BackingField;
    [CompilerGeneratedAttribute]
private string <File>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <ForceRm>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Iidfile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Isolation>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Label>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Memory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MemorySwap>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Network>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <NoCache>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Platform>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Progress>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Pull>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Quiet>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Rm>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <SecurityOpt>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ShmSize>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Squash>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Stream>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Tag>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Target>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Ulimit>k__BackingField;
    public String[] AddHost { get; public set; }
    public String[] BuildArg { get; public set; }
    public String[] CacheFrom { get; public set; }
    public string CgroupParent { get; public set; }
    public Nullable`1<bool> Compress { get; public set; }
    public Nullable`1<long> CpuPeriod { get; public set; }
    public Nullable`1<long> CpuQuota { get; public set; }
    public string CpusetCpus { get; public set; }
    public string CpusetMems { get; public set; }
    public Nullable`1<long> CpuShares { get; public set; }
    [AutoPropertyAttribute]
public Nullable`1<bool> DisableContentTrust { get; public set; }
    public string File { get; public set; }
    public Nullable`1<bool> ForceRm { get; public set; }
    public string Iidfile { get; public set; }
    public string Isolation { get; public set; }
    public String[] Label { get; public set; }
    public string Memory { get; public set; }
    public string MemorySwap { get; public set; }
    public string Network { get; public set; }
    public Nullable`1<bool> NoCache { get; public set; }
    public string Platform { get; public set; }
    public string Progress { get; public set; }
    public Nullable`1<bool> Pull { get; public set; }
    public Nullable`1<bool> Quiet { get; public set; }
    [AutoPropertyAttribute]
public Nullable`1<bool> Rm { get; public set; }
    public String[] SecurityOpt { get; public set; }
    public string ShmSize { get; public set; }
    public Nullable`1<bool> Squash { get; public set; }
    public Nullable`1<bool> Stream { get; public set; }
    public String[] Tag { get; public set; }
    public string Target { get; public set; }
    public String[] Ulimit { get; public set; }
    [CompilerGeneratedAttribute]
public String[] get_AddHost();
    [CompilerGeneratedAttribute]
public void set_AddHost(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_BuildArg();
    [CompilerGeneratedAttribute]
public void set_BuildArg(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_CacheFrom();
    [CompilerGeneratedAttribute]
public void set_CacheFrom(String[] value);
    [CompilerGeneratedAttribute]
public string get_CgroupParent();
    [CompilerGeneratedAttribute]
public void set_CgroupParent(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Compress();
    [CompilerGeneratedAttribute]
public void set_Compress(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_CpuPeriod();
    [CompilerGeneratedAttribute]
public void set_CpuPeriod(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_CpuQuota();
    [CompilerGeneratedAttribute]
public void set_CpuQuota(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public string get_CpusetCpus();
    [CompilerGeneratedAttribute]
public void set_CpusetCpus(string value);
    [CompilerGeneratedAttribute]
public string get_CpusetMems();
    [CompilerGeneratedAttribute]
public void set_CpusetMems(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_CpuShares();
    [CompilerGeneratedAttribute]
public void set_CpuShares(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_DisableContentTrust();
    [CompilerGeneratedAttribute]
public void set_DisableContentTrust(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_File();
    [CompilerGeneratedAttribute]
public void set_File(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_ForceRm();
    [CompilerGeneratedAttribute]
public void set_ForceRm(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_Iidfile();
    [CompilerGeneratedAttribute]
public void set_Iidfile(string value);
    [CompilerGeneratedAttribute]
public string get_Isolation();
    [CompilerGeneratedAttribute]
public void set_Isolation(string value);
    [CompilerGeneratedAttribute]
public String[] get_Label();
    [CompilerGeneratedAttribute]
public void set_Label(String[] value);
    [CompilerGeneratedAttribute]
public string get_Memory();
    [CompilerGeneratedAttribute]
public void set_Memory(string value);
    [CompilerGeneratedAttribute]
public string get_MemorySwap();
    [CompilerGeneratedAttribute]
public void set_MemorySwap(string value);
    [CompilerGeneratedAttribute]
public string get_Network();
    [CompilerGeneratedAttribute]
public void set_Network(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_NoCache();
    [CompilerGeneratedAttribute]
public void set_NoCache(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_Platform();
    [CompilerGeneratedAttribute]
public void set_Platform(string value);
    [CompilerGeneratedAttribute]
public string get_Progress();
    [CompilerGeneratedAttribute]
public void set_Progress(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Pull();
    [CompilerGeneratedAttribute]
public void set_Pull(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Quiet();
    [CompilerGeneratedAttribute]
public void set_Quiet(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Rm();
    [CompilerGeneratedAttribute]
public void set_Rm(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public String[] get_SecurityOpt();
    [CompilerGeneratedAttribute]
public void set_SecurityOpt(String[] value);
    [CompilerGeneratedAttribute]
public string get_ShmSize();
    [CompilerGeneratedAttribute]
public void set_ShmSize(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Squash();
    [CompilerGeneratedAttribute]
public void set_Squash(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Stream();
    [CompilerGeneratedAttribute]
public void set_Stream(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public String[] get_Tag();
    [CompilerGeneratedAttribute]
public void set_Tag(String[] value);
    [CompilerGeneratedAttribute]
public string get_Target();
    [CompilerGeneratedAttribute]
public void set_Target(string value);
    [CompilerGeneratedAttribute]
public String[] get_Ulimit();
    [CompilerGeneratedAttribute]
public void set_Ulimit(String[] value);
}
public class Cake.Docker.DockerImageLoadSettings : AutoToolSettings {
    [CompilerGeneratedAttribute]
private string <Input>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Quiet>k__BackingField;
    public string Input { get; public set; }
    public Nullable`1<bool> Quiet { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Input();
    [CompilerGeneratedAttribute]
public void set_Input(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Quiet();
    [CompilerGeneratedAttribute]
public void set_Quiet(Nullable`1<bool> value);
}
public class Cake.Docker.DockerImageLsSettings : AutoToolSettings {
    [CompilerGeneratedAttribute]
private bool <All>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Digests>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Format>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Filter>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoTrunc>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Quiet>k__BackingField;
    public bool All { get; public set; }
    public bool Digests { get; public set; }
    public string Format { get; public set; }
    public string Filter { get; public set; }
    public bool NoTrunc { get; public set; }
    public bool Quiet { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_All();
    [CompilerGeneratedAttribute]
public void set_All(bool value);
    [CompilerGeneratedAttribute]
public bool get_Digests();
    [CompilerGeneratedAttribute]
public void set_Digests(bool value);
    [CompilerGeneratedAttribute]
public string get_Format();
    [CompilerGeneratedAttribute]
public void set_Format(string value);
    [CompilerGeneratedAttribute]
public string get_Filter();
    [CompilerGeneratedAttribute]
public void set_Filter(string value);
    [CompilerGeneratedAttribute]
public bool get_NoTrunc();
    [CompilerGeneratedAttribute]
public void set_NoTrunc(bool value);
    [CompilerGeneratedAttribute]
public bool get_Quiet();
    [CompilerGeneratedAttribute]
public void set_Quiet(bool value);
}
public class Cake.Docker.DockerImagePruneSettings : AutoToolSettings {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <All>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Filter>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Force>k__BackingField;
    public Nullable`1<bool> All { get; public set; }
    public string Filter { get; public set; }
    public Nullable`1<bool> Force { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_All();
    [CompilerGeneratedAttribute]
public void set_All(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_Filter();
    [CompilerGeneratedAttribute]
public void set_Filter(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Force();
    [CompilerGeneratedAttribute]
public void set_Force(Nullable`1<bool> value);
}
public class Cake.Docker.DockerImagePullSettings : AutoToolSettings {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <AllTags>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <DisableContentTrust>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Platform>k__BackingField;
    public Nullable`1<bool> AllTags { get; public set; }
    [AutoPropertyAttribute]
public Nullable`1<bool> DisableContentTrust { get; public set; }
    public string Platform { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_AllTags();
    [CompilerGeneratedAttribute]
public void set_AllTags(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_DisableContentTrust();
    [CompilerGeneratedAttribute]
public void set_DisableContentTrust(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_Platform();
    [CompilerGeneratedAttribute]
public void set_Platform(string value);
}
public class Cake.Docker.DockerImagePushSettings : AutoToolSettings {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <DisableContentTrust>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllTags>k__BackingField;
    [AutoPropertyAttribute]
public Nullable`1<bool> DisableContentTrust { get; public set; }
    public bool AllTags { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_DisableContentTrust();
    [CompilerGeneratedAttribute]
public void set_DisableContentTrust(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public bool get_AllTags();
    [CompilerGeneratedAttribute]
public void set_AllTags(bool value);
}
public class Cake.Docker.DockerImageRemoveSettings : AutoToolSettings {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Force>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <NoPrune>k__BackingField;
    public Nullable`1<bool> Force { get; public set; }
    public Nullable`1<bool> NoPrune { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Force();
    [CompilerGeneratedAttribute]
public void set_Force(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_NoPrune();
    [CompilerGeneratedAttribute]
public void set_NoPrune(Nullable`1<bool> value);
}
public class Cake.Docker.DockerImageSaveSettings : AutoToolSettings {
    [CompilerGeneratedAttribute]
private string <Output>k__BackingField;
    public string Output { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Output();
    [CompilerGeneratedAttribute]
public void set_Output(string value);
}
public class Cake.Docker.DockerImageTagSettings : AutoToolSettings {
}
[ExperimentalAttribute]
public class Cake.Docker.DockerManifestAnnotateSettings : AutoToolSettings {
    [CompilerGeneratedAttribute]
private string <Arch>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Os>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OsFeatures>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Variant>k__BackingField;
    public string Arch { get; public set; }
    public string Os { get; public set; }
    public string OsFeatures { get; public set; }
    public string Variant { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Arch();
    [CompilerGeneratedAttribute]
public void set_Arch(string value);
    [CompilerGeneratedAttribute]
public string get_Os();
    [CompilerGeneratedAttribute]
public void set_Os(string value);
    [CompilerGeneratedAttribute]
public string get_OsFeatures();
    [CompilerGeneratedAttribute]
public void set_OsFeatures(string value);
    [CompilerGeneratedAttribute]
public string get_Variant();
    [CompilerGeneratedAttribute]
public void set_Variant(string value);
}
[ExperimentalAttribute]
public class Cake.Docker.DockerManifestCreateSettings : AutoToolSettings {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Amend>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Insecure>k__BackingField;
    public Nullable`1<bool> Amend { get; public set; }
    public Nullable`1<bool> Insecure { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Amend();
    [CompilerGeneratedAttribute]
public void set_Amend(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Insecure();
    [CompilerGeneratedAttribute]
public void set_Insecure(Nullable`1<bool> value);
}
[ExperimentalAttribute]
public class Cake.Docker.DockerManifestInspectSettings : AutoToolSettings {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Insecure>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Verbose>k__BackingField;
    public Nullable`1<bool> Insecure { get; public set; }
    public Nullable`1<bool> Verbose { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Insecure();
    [CompilerGeneratedAttribute]
public void set_Insecure(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Verbose();
    [CompilerGeneratedAttribute]
public void set_Verbose(Nullable`1<bool> value);
}
[ExperimentalAttribute]
public class Cake.Docker.DockerManifestPushSettings : AutoToolSettings {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Insecure>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Purge>k__BackingField;
    public Nullable`1<bool> Insecure { get; public set; }
    public Nullable`1<bool> Purge { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Insecure();
    [CompilerGeneratedAttribute]
public void set_Insecure(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Purge();
    [CompilerGeneratedAttribute]
public void set_Purge(Nullable`1<bool> value);
}
public class Cake.Docker.DockerNetworkConnectSettings : AutoToolSettings {
    [CompilerGeneratedAttribute]
private String[] <Alias>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Ip>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Ip6>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Link>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <LinkLocalIp>k__BackingField;
    public String[] Alias { get; public set; }
    public string Ip { get; public set; }
    public string Ip6 { get; public set; }
    public String[] Link { get; public set; }
    public String[] LinkLocalIp { get; public set; }
    [CompilerGeneratedAttribute]
public String[] get_Alias();
    [CompilerGeneratedAttribute]
public void set_Alias(String[] value);
    [CompilerGeneratedAttribute]
public string get_Ip();
    [CompilerGeneratedAttribute]
public void set_Ip(string value);
    [CompilerGeneratedAttribute]
public string get_Ip6();
    [CompilerGeneratedAttribute]
public void set_Ip6(string value);
    [CompilerGeneratedAttribute]
public String[] get_Link();
    [CompilerGeneratedAttribute]
public void set_Link(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_LinkLocalIp();
    [CompilerGeneratedAttribute]
public void set_LinkLocalIp(String[] value);
}
public class Cake.Docker.DockerNetworkCreateSettings : AutoToolSettings {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Attachable>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <AuxAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConfigFrom>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <ConfigOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Driver>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Gateway>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Ingress>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Internal>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IpamDriver>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <IpamOpt>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <IpRange>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Ipv6>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Label>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Opt>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Scope>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Subnet>k__BackingField;
    public Nullable`1<bool> Attachable { get; public set; }
    public String[] AuxAddress { get; public set; }
    public string ConfigFrom { get; public set; }
    public Nullable`1<bool> ConfigOnly { get; public set; }
    public string Driver { get; public set; }
    public String[] Gateway { get; public set; }
    public Nullable`1<bool> Ingress { get; public set; }
    public Nullable`1<bool> Internal { get; public set; }
    public string IpamDriver { get; public set; }
    public String[] IpamOpt { get; public set; }
    public String[] IpRange { get; public set; }
    public Nullable`1<bool> Ipv6 { get; public set; }
    public String[] Label { get; public set; }
    public String[] Opt { get; public set; }
    public string Scope { get; public set; }
    public String[] Subnet { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Attachable();
    [CompilerGeneratedAttribute]
public void set_Attachable(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public String[] get_AuxAddress();
    [CompilerGeneratedAttribute]
public void set_AuxAddress(String[] value);
    [CompilerGeneratedAttribute]
public string get_ConfigFrom();
    [CompilerGeneratedAttribute]
public void set_ConfigFrom(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_ConfigOnly();
    [CompilerGeneratedAttribute]
public void set_ConfigOnly(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_Driver();
    [CompilerGeneratedAttribute]
public void set_Driver(string value);
    [CompilerGeneratedAttribute]
public String[] get_Gateway();
    [CompilerGeneratedAttribute]
public void set_Gateway(String[] value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Ingress();
    [CompilerGeneratedAttribute]
public void set_Ingress(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Internal();
    [CompilerGeneratedAttribute]
public void set_Internal(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_IpamDriver();
    [CompilerGeneratedAttribute]
public void set_IpamDriver(string value);
    [CompilerGeneratedAttribute]
public String[] get_IpamOpt();
    [CompilerGeneratedAttribute]
public void set_IpamOpt(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_IpRange();
    [CompilerGeneratedAttribute]
public void set_IpRange(String[] value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Ipv6();
    [CompilerGeneratedAttribute]
public void set_Ipv6(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public String[] get_Label();
    [CompilerGeneratedAttribute]
public void set_Label(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_Opt();
    [CompilerGeneratedAttribute]
public void set_Opt(String[] value);
    [CompilerGeneratedAttribute]
public string get_Scope();
    [CompilerGeneratedAttribute]
public void set_Scope(string value);
    [CompilerGeneratedAttribute]
public String[] get_Subnet();
    [CompilerGeneratedAttribute]
public void set_Subnet(String[] value);
}
public class Cake.Docker.DockerNetworkDisconnectSettings : AutoToolSettings {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Force>k__BackingField;
    public Nullable`1<bool> Force { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Force();
    [CompilerGeneratedAttribute]
public void set_Force(Nullable`1<bool> value);
}
public class Cake.Docker.DockerNetworkRemoveSettings : AutoToolSettings {
}
public class Cake.Docker.DockerRegistryLoginSettings : AutoToolSettings {
    [CompilerGeneratedAttribute]
private string <Password>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <PasswordStdin>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Username>k__BackingField;
    public string Password { get; public set; }
    public Nullable`1<bool> PasswordStdin { get; public set; }
    public string Username { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Password();
    [CompilerGeneratedAttribute]
public void set_Password(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_PasswordStdin();
    [CompilerGeneratedAttribute]
public void set_PasswordStdin(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_Username();
    [CompilerGeneratedAttribute]
public void set_Username(string value);
    protected virtual String[] CollectSecretProperties();
}
public class Cake.Docker.DockerRegistryLogoutSettings : AutoToolSettings {
}
internal static class Cake.Docker.DockerResolver : object {
    public static FilePath GetDockerPath(IFileSystem fileSystem, ICakeEnvironment environment);
    private static FilePath CheckCommonWindowsPaths(IFileSystem fileSystem, ICakeEnvironment environment);
    private static DirectoryPath[] GetDefaultWindowsPaths(IFileSystem fileSystem, ICakeEnvironment environment);
}
public class Cake.Docker.DockerSwarmInitSettings : AutoToolSettings {
    [CompilerGeneratedAttribute]
private string <AdvertiseAddr>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Autolock>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Availability>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CertExpiry>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DataPathAddr>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DispatcherHeartbeat>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExternalCa>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <ForceNewCluster>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ListenAddr>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MaxSnapshots>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SnapshotInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <TaskHistoryLimit>k__BackingField;
    public string AdvertiseAddr { get; public set; }
    public Nullable`1<bool> Autolock { get; public set; }
    public string Availability { get; public set; }
    public string CertExpiry { get; public set; }
    public string DataPathAddr { get; public set; }
    public string DispatcherHeartbeat { get; public set; }
    public string ExternalCa { get; public set; }
    public Nullable`1<bool> ForceNewCluster { get; public set; }
    public string ListenAddr { get; public set; }
    public string MaxSnapshots { get; public set; }
    public string SnapshotInterval { get; public set; }
    public Nullable`1<long> TaskHistoryLimit { get; public set; }
    [CompilerGeneratedAttribute]
public string get_AdvertiseAddr();
    [CompilerGeneratedAttribute]
public void set_AdvertiseAddr(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Autolock();
    [CompilerGeneratedAttribute]
public void set_Autolock(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_Availability();
    [CompilerGeneratedAttribute]
public void set_Availability(string value);
    [CompilerGeneratedAttribute]
public string get_CertExpiry();
    [CompilerGeneratedAttribute]
public void set_CertExpiry(string value);
    [CompilerGeneratedAttribute]
public string get_DataPathAddr();
    [CompilerGeneratedAttribute]
public void set_DataPathAddr(string value);
    [CompilerGeneratedAttribute]
public string get_DispatcherHeartbeat();
    [CompilerGeneratedAttribute]
public void set_DispatcherHeartbeat(string value);
    [CompilerGeneratedAttribute]
public string get_ExternalCa();
    [CompilerGeneratedAttribute]
public void set_ExternalCa(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_ForceNewCluster();
    [CompilerGeneratedAttribute]
public void set_ForceNewCluster(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_ListenAddr();
    [CompilerGeneratedAttribute]
public void set_ListenAddr(string value);
    [CompilerGeneratedAttribute]
public string get_MaxSnapshots();
    [CompilerGeneratedAttribute]
public void set_MaxSnapshots(string value);
    [CompilerGeneratedAttribute]
public string get_SnapshotInterval();
    [CompilerGeneratedAttribute]
public void set_SnapshotInterval(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_TaskHistoryLimit();
    [CompilerGeneratedAttribute]
public void set_TaskHistoryLimit(Nullable`1<long> value);
}
public class Cake.Docker.DockerSwarmJoinSettings : AutoToolSettings {
    [CompilerGeneratedAttribute]
private string <AdvertiseAddr>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Availability>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DataPathAddr>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ListenAddr>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Token>k__BackingField;
    public string AdvertiseAddr { get; public set; }
    public string Availability { get; public set; }
    public string DataPathAddr { get; public set; }
    public string ListenAddr { get; public set; }
    public string Token { get; public set; }
    [CompilerGeneratedAttribute]
public string get_AdvertiseAddr();
    [CompilerGeneratedAttribute]
public void set_AdvertiseAddr(string value);
    [CompilerGeneratedAttribute]
public string get_Availability();
    [CompilerGeneratedAttribute]
public void set_Availability(string value);
    [CompilerGeneratedAttribute]
public string get_DataPathAddr();
    [CompilerGeneratedAttribute]
public void set_DataPathAddr(string value);
    [CompilerGeneratedAttribute]
public string get_ListenAddr();
    [CompilerGeneratedAttribute]
public void set_ListenAddr(string value);
    [CompilerGeneratedAttribute]
public string get_Token();
    [CompilerGeneratedAttribute]
public void set_Token(string value);
}
public class Cake.Docker.DockerSwarmLeaveSettings : AutoToolSettings {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Force>k__BackingField;
    public Nullable`1<bool> Force { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Force();
    [CompilerGeneratedAttribute]
public void set_Force(Nullable`1<bool> value);
}
public class Cake.Docker.DockerSwarmUpdateSettings : AutoToolSettings {
    [CompilerGeneratedAttribute]
private string <CertExpiry>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DispatcherHeartbeat>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExternalCa>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MaxSnapshots>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SnapshotInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <TaskHistoryLimit>k__BackingField;
    public string CertExpiry { get; public set; }
    public string DispatcherHeartbeat { get; public set; }
    public string ExternalCa { get; public set; }
    public string MaxSnapshots { get; public set; }
    public string SnapshotInterval { get; public set; }
    public Nullable`1<long> TaskHistoryLimit { get; public set; }
    [CompilerGeneratedAttribute]
public string get_CertExpiry();
    [CompilerGeneratedAttribute]
public void set_CertExpiry(string value);
    [CompilerGeneratedAttribute]
public string get_DispatcherHeartbeat();
    [CompilerGeneratedAttribute]
public void set_DispatcherHeartbeat(string value);
    [CompilerGeneratedAttribute]
public string get_ExternalCa();
    [CompilerGeneratedAttribute]
public void set_ExternalCa(string value);
    [CompilerGeneratedAttribute]
public string get_MaxSnapshots();
    [CompilerGeneratedAttribute]
public void set_MaxSnapshots(string value);
    [CompilerGeneratedAttribute]
public string get_SnapshotInterval();
    [CompilerGeneratedAttribute]
public void set_SnapshotInterval(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_TaskHistoryLimit();
    [CompilerGeneratedAttribute]
public void set_TaskHistoryLimit(Nullable`1<long> value);
}
public abstract class Cake.Docker.DockerTool`1 : Tool`1<TSettings> {
    private ICakeEnvironment _environment;
    private IFileSystem _fileSystem;
    protected DockerTool`1(IFileSystem fileSystem, ICakeEnvironment environment, IProcessRunner processRunner, IToolLocator tools);
    protected virtual string GetToolName();
    protected virtual IEnumerable`1<string> GetToolExecutableNames();
    protected virtual IEnumerable`1<FilePath> GetAlternativeToolPaths(TSettings settings);
}
public class Cake.Docker.DockerVolumeCreateSettings : AutoToolSettings {
    [CompilerGeneratedAttribute]
private string <Driver>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Label>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Opt>k__BackingField;
    public string Driver { get; public set; }
    public string Label { get; public set; }
    public string Name { get; public set; }
    public String[] Opt { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Driver();
    [CompilerGeneratedAttribute]
public void set_Driver(string value);
    [CompilerGeneratedAttribute]
public string get_Label();
    [CompilerGeneratedAttribute]
public void set_Label(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public String[] get_Opt();
    [CompilerGeneratedAttribute]
public void set_Opt(String[] value);
}
public class Cake.Docker.DockerVolumeInspectSettings : AutoToolSettings {
    [CompilerGeneratedAttribute]
private string <Format>k__BackingField;
    public string Format { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Format();
    [CompilerGeneratedAttribute]
public void set_Format(string value);
}
public class Cake.Docker.DockerVolumeLsSettings : AutoToolSettings {
    [CompilerGeneratedAttribute]
private string <Format>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Filter>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Quiet>k__BackingField;
    public string Format { get; public set; }
    public string Filter { get; public set; }
    public bool Quiet { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Format();
    [CompilerGeneratedAttribute]
public void set_Format(string value);
    [CompilerGeneratedAttribute]
public string get_Filter();
    [CompilerGeneratedAttribute]
public void set_Filter(string value);
    [CompilerGeneratedAttribute]
public bool get_Quiet();
    [CompilerGeneratedAttribute]
public void set_Quiet(bool value);
}
public class Cake.Docker.DockerVolumePruneSettings : AutoToolSettings {
    [CompilerGeneratedAttribute]
private string <Filter>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Force>k__BackingField;
    public string Filter { get; public set; }
    public bool Force { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Filter();
    [CompilerGeneratedAttribute]
public void set_Filter(string value);
    [CompilerGeneratedAttribute]
public bool get_Force();
    [CompilerGeneratedAttribute]
public void set_Force(bool value);
}
public class Cake.Docker.DockerVolumeRmSettings : AutoToolSettings {
    [CompilerGeneratedAttribute]
private bool <Force>k__BackingField;
    public bool Force { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Force();
    [CompilerGeneratedAttribute]
public void set_Force(bool value);
}
public class Cake.Docker.EmptySettings : AutoToolSettings {
}
[AttributeUsageAttribute("196")]
public class Cake.Docker.ExperimentalAttribute : Attribute {
}
public class Cake.Docker.GenericDockerComposeRunner`1 : DockerComposeTool`1<TSettings> {
    public GenericDockerComposeRunner`1(IFileSystem fileSystem, ICakeEnvironment environment, IProcessRunner processRunner, IToolLocator tools);
    public void Run(string command, TSettings settings, String[] additional);
    private static ProcessArgumentBuilder GetArguments(string command, TSettings settings, String[] containers);
    public T[] RunWithResult(string command, TSettings settings, Func`2<IEnumerable`1<string>, T[]> processOutput, String[] arguments);
}
public class Cake.Docker.GenericDockerRunner`1 : DockerTool`1<TSettings> {
    private static bool IsExperimental { get; }
    public GenericDockerRunner`1(IFileSystem fileSystem, ICakeEnvironment environment, IProcessRunner processRunner, IToolLocator tools);
    public void Run(string command, TSettings settings, String[] additional);
    private static bool get_IsExperimental();
    private static ProcessSettings CreateExperimentalProcessSettings();
    private ProcessArgumentBuilder GetArguments(string command, TSettings settings, String[] additional);
    public T[] RunWithResult(string command, TSettings settings, Func`2<IEnumerable`1<string>, T[]> processOutput, String[] arguments);
}
[CompilerGeneratedAttribute]
internal class Cake.Docker.NamespaceDoc : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
