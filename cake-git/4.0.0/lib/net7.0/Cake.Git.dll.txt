[ExtensionAttribute]
internal static class Cake.Git.Extensions.PathExtensions : object {
    [ExtensionAttribute]
internal static Path MakeRelativePath(Path path, ICakeEnvironment environment, DirectoryPath rootDirectoryPath);
    [ExtensionAttribute]
internal static FilePath MakeRelativePath(FilePath filePath, ICakeEnvironment environment, DirectoryPath rootDirectoryPath);
    [ExtensionAttribute]
internal static DirectoryPath MakeRelativePath(DirectoryPath directoryPath, ICakeEnvironment environment, DirectoryPath rootDirectoryPath);
    [ExtensionAttribute]
internal static String[] ToRelativePathStrings(IEnumerable`1<FilePath> filePaths, ICakeContext context, DirectoryPath repositoryDirectoryPath);
}
[ExtensionAttribute]
internal static class Cake.Git.Extensions.RepositoryExtensions : object {
    [ExtensionAttribute]
internal static void UseRepository(ICakeContext context, DirectoryPath repositoryPath, Action`1<Repository> repositoryAction);
    [ExtensionAttribute]
internal static TResult UseRepository(ICakeContext context, DirectoryPath repositoryPath, Func`2<Repository, TResult> repositoryFunc);
}
[ExtensionAttribute]
[CakeAliasCategoryAttribute("Git")]
public static class Cake.Git.GitAliases : object {
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Add")]
public static void GitAdd(ICakeContext context, DirectoryPath repositoryDirectoryPath, FilePath[] filePaths);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Add")]
public static void GitAddAll(ICakeContext context, DirectoryPath repositoryDirectoryPath);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Branches")]
public static GitBranch GitBranchCurrent(ICakeContext context, DirectoryPath repositoryDirectoryPath);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Branch")]
public static GitBranch GitCreateBranch(ICakeContext context, DirectoryPath repositoryDirectoryPath, string branchName, bool checkOut);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Branches")]
public static ICollection`1<GitBranch> GitBranches(ICakeContext context, DirectoryPath repositoryDirectoryPath);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Checkout")]
public static void GitCheckout(ICakeContext context, DirectoryPath repositoryDirectoryPath, string committishOrBranchSpec, FilePath[] filePaths);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Checkout")]
public static void GitCheckout(ICakeContext context, DirectoryPath repositoryDirectoryPath, FilePath[] filePaths);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Clean")]
public static void GitClean(ICakeContext context, DirectoryPath repositoryDirectoryPath);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Clone")]
public static DirectoryPath GitClone(ICakeContext context, string sourceUrl, DirectoryPath workDirectoryPath);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Clone")]
public static DirectoryPath GitClone(ICakeContext context, string sourceUrl, DirectoryPath workDirectoryPath, GitCloneSettings cloneSettings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Clone")]
public static DirectoryPath GitClone(ICakeContext context, string sourceUrl, DirectoryPath workDirectoryPath, string username, string password);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Clone")]
public static DirectoryPath GitClone(ICakeContext context, string sourceUrl, DirectoryPath workDirectoryPath, string username, string password, GitCloneSettings cloneSettings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Commit")]
public static GitCommit GitCommit(ICakeContext context, DirectoryPath repositoryDirectoryPath, string name, string email, string message);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Configuration")]
public static T GitConfigGet(ICakeContext context, DirectoryPath repositoryDirectoryPath, string key);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Configuration")]
public static T GitConfigGet(ICakeContext context, DirectoryPath repositoryDirectoryPath, string key, T defaultValue);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Configuration")]
public static void GitConfigSetLocal(ICakeContext context, DirectoryPath repositoryDirectoryPath, string key, T newValue);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Configuration")]
public static void GitConfigUnsetLocal(ICakeContext context, DirectoryPath repositoryDirectoryPath, string key);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Configuration")]
public static bool GitConfigExists(ICakeContext context, DirectoryPath repositoryDirectoryPath, string key);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Describe")]
public static string GitDescribe(ICakeContext context, DirectoryPath repositoryDirectoryPath);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Describe")]
public static string GitDescribe(ICakeContext context, DirectoryPath repositoryDirectoryPath, GitDescribeStrategy strategy);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Describe")]
public static string GitDescribe(ICakeContext context, DirectoryPath repositoryDirectoryPath, bool renderLongFormat, GitDescribeStrategy strategy);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Describe")]
public static string GitDescribe(ICakeContext context, DirectoryPath repositoryDirectoryPath, bool renderLongFormat, GitDescribeStrategy strategy, Nullable`1<int> minimumCommitIdAbbreviatedSize);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Describe")]
public static string GitDescribe(ICakeContext context, DirectoryPath repositoryDirectoryPath, string commitishName, bool renderLongFormat, GitDescribeStrategy strategy, Nullable`1<int> minimumCommitIdAbbreviatedSize);
    [CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Describe")]
private static string GitDescribeImpl(ICakeContext context, IRepository repository, Commit commit, bool renderLongFormat, GitDescribeStrategy strategy, Nullable`1<int> minimumCommitIdAbbreviatedSize);
    private static DescribeStrategy ConvertDescribeStrategy(GitDescribeStrategy source);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Diff")]
public static ICollection`1<GitDiffFile> GitDiff(ICakeContext context, DirectoryPath repositoryDirectoryPath);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Diff")]
public static ICollection`1<GitDiffFile> GitDiff(ICakeContext context, DirectoryPath repositoryDirectoryPath, string sinceCommitId);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Diff")]
public static ICollection`1<GitDiffFile> GitDiff(ICakeContext context, DirectoryPath repositoryDirectoryPath, string sinceCommitId, string toCommitId);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Fetch")]
public static void GitFetch(ICakeContext context, DirectoryPath repositoryDirectoryPath, string remoteName);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Fetch")]
public static void GitFetchTags(ICakeContext context, DirectoryPath repositoryDirectoryPath, string remoteName);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Fetch")]
public static void GitFetch(ICakeContext context, DirectoryPath repositoryDirectoryPath, GitFetchSettings fetchSettings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Init")]
public static DirectoryPath GitInit(ICakeContext context, DirectoryPath initDirectoryPath);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Log")]
public static GitCommit GitLogTip(ICakeContext context, DirectoryPath repositoryDirectoryPath);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Log")]
public static ICollection`1<GitCommit> GitLog(ICakeContext context, DirectoryPath repositoryDirectoryPath, int count);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Log")]
public static ICollection`1<GitCommit> GitLog(ICakeContext context, DirectoryPath repositoryDirectoryPath, string sinceCommitId);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Log")]
public static ICollection`1<GitCommit> GitLogTag(ICakeContext context, DirectoryPath repositoryDirectoryPath, string sinceTag);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Log")]
public static GitCommit GitLogLookup(ICakeContext context, DirectoryPath repositoryDirectoryPath, string commitId);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Pull")]
public static GitMergeResult GitPull(ICakeContext context, DirectoryPath repositoryDirectoryPath, string mergerName, string mergerEmail);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Pull")]
public static GitMergeResult GitPull(ICakeContext context, DirectoryPath repositoryDirectoryPath, string mergerName, string mergerEmail, string username, string password, string remoteName);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Push")]
public static void GitPush(ICakeContext context, DirectoryPath repositoryDirectoryPath);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Push")]
public static void GitPush(ICakeContext context, DirectoryPath repositoryDirectoryPath, string username, string password);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Push")]
public static void GitPush(ICakeContext context, DirectoryPath repositoryDirectoryPath, string username, string password, string branchName);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Push")]
public static void GitPushRef(ICakeContext context, DirectoryPath repositoryDirectoryPath, string remote, string pushRefSpec);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Push")]
public static void GitPushRef(ICakeContext context, DirectoryPath repositoryDirectoryPath, string username, string password, string remote, string pushRefSpec);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Remove")]
public static void GitRemove(ICakeContext context, DirectoryPath repositoryDirectoryPath, bool removeFromWorkingDirectory, FilePath[] filePaths);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Repository")]
public static bool GitIsValidRepository(ICakeContext context, DirectoryPath path);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Repository")]
public static bool GitHasUncommitedChanges(ICakeContext context, DirectoryPath path);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Repository")]
public static bool GitHasStagedChanges(ICakeContext context, DirectoryPath path);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Repository")]
public static bool GitHasUntrackedFiles(ICakeContext context, DirectoryPath path);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Repository")]
public static DirectoryPath GitFindRootFromPath(ICakeContext context, DirectoryPath path);
    private static DirectoryPath GetParent(ICakeContext context, DirectoryPath path);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Reset")]
public static void GitReset(ICakeContext context, DirectoryPath repositoryDirectoryPath, GitResetMode mode, string commitId);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Reset")]
public static void GitReset(ICakeContext context, DirectoryPath repositoryDirectoryPath, GitResetMode mode);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Sha")]
public static string GitShortenSha(ICakeContext context, DirectoryPath repositoryDirectoryPath, GitCommit commit, Nullable`1<int> minimalLength);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Tag")]
public static void GitTag(ICakeContext context, DirectoryPath repositoryDirectoryPath, string tagName);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Tag")]
public static void GitTag(ICakeContext context, DirectoryPath repositoryDirectoryPath, string tagName, string objectish);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Tag")]
public static void GitTag(ICakeContext context, DirectoryPath repositoryDirectoryPath, string tagName, string name, string email, string message);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Tag")]
public static void GitTag(ICakeContext context, DirectoryPath repositoryDirectoryPath, string tagName, string objectish, string name, string email, string message);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Tags")]
public static List`1<Tag> GitTags(ICakeContext context, DirectoryPath repositoryDirectoryPath);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Tags")]
public static List`1<Tag> GitTags(ICakeContext context, DirectoryPath repositoryDirectoryPath, bool loadTargets);
    private static List`1<T> SortedTags(IEnumerable`1<Tag> tags, Func`2<Tag, T> selector);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Unstage")]
public static void GitUnstage(ICakeContext context, DirectoryPath repositoryDirectoryPath, FilePath[] filePaths);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Unstage")]
public static void GitUnstageAll(ICakeContext context, DirectoryPath repositoryDirectoryPath);
}
public class Cake.Git.GitBranch : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <CanonicalName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <FriendlyName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private GitCommit <Tip>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsRemote>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <RemoteName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<GitRemote> <Remotes>k__BackingField;
    public string CanonicalName { get; }
    public string FriendlyName { get; }
    public GitCommit Tip { get; }
    public bool IsRemote { get; }
    public string RemoteName { get; }
    public List`1<GitRemote> Remotes { get; public set; }
    public GitBranch(Repository repository);
    internal GitBranch(Repository repository, Branch branch);
    [CompilerGeneratedAttribute]
public string get_CanonicalName();
    [CompilerGeneratedAttribute]
public string get_FriendlyName();
    [CompilerGeneratedAttribute]
public GitCommit get_Tip();
    [CompilerGeneratedAttribute]
public bool get_IsRemote();
    [CompilerGeneratedAttribute]
public string get_RemoteName();
    [CompilerGeneratedAttribute]
public List`1<GitRemote> get_Remotes();
    [CompilerGeneratedAttribute]
public void set_Remotes(List`1<GitRemote> value);
    public virtual string ToString();
}
public enum Cake.Git.GitChangeKind : Enum {
    public int value__;
    public static GitChangeKind Unmodified;
    public static GitChangeKind Added;
    public static GitChangeKind Deleted;
    public static GitChangeKind Modified;
    public static GitChangeKind Renamed;
    public static GitChangeKind Copied;
    public static GitChangeKind Ignored;
    public static GitChangeKind Untracked;
    public static GitChangeKind TypeChanged;
    public static GitChangeKind Unreadable;
    public static GitChangeKind Conflicted;
}
public class Cake.Git.GitCloneSettings : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsBare>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <Checkout>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <BranchName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <RecurseSubmodules>k__BackingField;
    public bool IsBare { get; public set; }
    public bool Checkout { get; public set; }
    public string BranchName { get; public set; }
    public bool RecurseSubmodules { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_IsBare();
    [CompilerGeneratedAttribute]
public void set_IsBare(bool value);
    [CompilerGeneratedAttribute]
public bool get_Checkout();
    [CompilerGeneratedAttribute]
public void set_Checkout(bool value);
    [CompilerGeneratedAttribute]
public string get_BranchName();
    [CompilerGeneratedAttribute]
public void set_BranchName(string value);
    [CompilerGeneratedAttribute]
public bool get_RecurseSubmodules();
    [CompilerGeneratedAttribute]
public void set_RecurseSubmodules(bool value);
    internal CloneOptions ToCloneOptions();
}
public class Cake.Git.GitCommit : object {
    public static string RootCommit;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Sha>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private GitSignature <Author>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private GitSignature <Committer>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <MessageShort>k__BackingField;
    public string Sha { get; }
    public GitSignature Author { get; }
    public GitSignature Committer { get; }
    public string Message { get; }
    public string MessageShort { get; }
    internal GitCommit(Commit commit);
    [CompilerGeneratedAttribute]
public string get_Sha();
    [CompilerGeneratedAttribute]
public GitSignature get_Author();
    [CompilerGeneratedAttribute]
public GitSignature get_Committer();
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public string get_MessageShort();
    public virtual string ToString();
}
public enum Cake.Git.GitDescribeStrategy : Enum {
    public int value__;
    public static GitDescribeStrategy Default;
    public static GitDescribeStrategy Tags;
    public static GitDescribeStrategy All;
}
public class Cake.Git.GitDiffFile : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <OldPath>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private GitChangeKind <Status>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <Exists>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <OldExists>k__BackingField;
    public string Path { get; }
    public string OldPath { get; }
    public GitChangeKind Status { get; }
    public bool Exists { get; }
    public bool OldExists { get; }
    internal GitDiffFile(TreeEntryChanges change);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public string get_OldPath();
    [CompilerGeneratedAttribute]
public GitChangeKind get_Status();
    [CompilerGeneratedAttribute]
public bool get_Exists();
    [CompilerGeneratedAttribute]
public bool get_OldExists();
    public virtual string ToString();
}
public class Cake.Git.GitFetchSettings : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Remote>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Func`2<RefSpec, bool> <RefSpecFilter>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<TagFetchMode> <TagFetchMode>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Nullable`1<bool> <Prune>k__BackingField;
    public string Remote { get; public set; }
    public Func`2<RefSpec, bool> RefSpecFilter { get; public set; }
    public Nullable`1<TagFetchMode> TagFetchMode { get; public set; }
    public Nullable`1<bool> Prune { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Remote();
    [CompilerGeneratedAttribute]
public void set_Remote(string value);
    [CompilerGeneratedAttribute]
public Func`2<RefSpec, bool> get_RefSpecFilter();
    [CompilerGeneratedAttribute]
public void set_RefSpecFilter(Func`2<RefSpec, bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<TagFetchMode> get_TagFetchMode();
    [CompilerGeneratedAttribute]
public void set_TagFetchMode(Nullable`1<TagFetchMode> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Prune();
    [CompilerGeneratedAttribute]
public void set_Prune(Nullable`1<bool> value);
}
public class Cake.Git.GitMergeResult : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private GitCommit <Commit>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private GitMergeStatus <Status>k__BackingField;
    public GitCommit Commit { get; }
    public GitMergeStatus Status { get; }
    internal GitMergeResult(MergeResult mergeResult);
    [CompilerGeneratedAttribute]
public GitCommit get_Commit();
    [CompilerGeneratedAttribute]
public GitMergeStatus get_Status();
}
public enum Cake.Git.GitMergeStatus : Enum {
    public int value__;
    public static GitMergeStatus UpToDate;
    public static GitMergeStatus FastForward;
    public static GitMergeStatus NonFastForward;
    public static GitMergeStatus Conflicts;
}
public class Cake.Git.GitRemote : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <PushUrl>k__BackingField;
    public string Name { get; }
    public string Url { get; }
    public string PushUrl { get; }
    public GitRemote(string name, string pushUrl, string url);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public string get_PushUrl();
    public virtual string ToString();
}
public enum Cake.Git.GitResetMode : Enum {
    public int value__;
    public static GitResetMode Hard;
    public static GitResetMode Soft;
    public static GitResetMode Mixed;
}
public class Cake.Git.GitSignature : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Email>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private DateTimeOffset <When>k__BackingField;
    public string Email { get; }
    public string Name { get; }
    public DateTimeOffset When { get; }
    internal GitSignature(string email, string name, DateTimeOffset when);
    [CompilerGeneratedAttribute]
public string get_Email();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public DateTimeOffset get_When();
    public virtual string ToString();
}
[CompilerGeneratedAttribute]
internal class Cake.Git.NamespaceDoc : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
