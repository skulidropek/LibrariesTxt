public class Cake.Http.CakeHttpClientHandler : HttpClientHandler {
    private HttpSettings _Settings;
    private ICakeContext _Context;
    public CakeHttpClientHandler(ICakeContext context, HttpSettings settings);
    [AsyncStateMachineAttribute("Cake.Http.CakeHttpClientHandler/<SendAsync>d__3")]
protected virtual Task`1<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken);
    private void AppendHeaders(HttpRequestMessage request);
    [AsyncStateMachineAttribute("Cake.Http.CakeHttpClientHandler/<LogHttpEvent>d__5")]
private Task LogHttpEvent(string id, HttpEventType eventType, string requestInfo, Byte[] message);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<HttpResponseMessage> <>n__0(HttpRequestMessage request, CancellationToken cancellationToken);
}
[GeneratedCodeAttribute("simple-json", "1.0.0")]
public class Cake.Http.DataContractJsonSerializerStrategy : PocoJsonSerializerStrategy {
    internal virtual IDictionary`2<string, GetDelegate> GetterValueFactory(Type type);
    internal virtual IDictionary`2<string, KeyValuePair`2<Type, SetDelegate>> SetterValueFactory(Type type);
    private static bool CanAdd(MemberInfo info, String& jsonKey);
}
[ExtensionAttribute]
[CakeAliasCategoryAttribute("HTTP Operations")]
[CakeNamespaceImportAttribute("Cake.Http")]
public static class Cake.Http.HttpClientAliases : object {
    [ExtensionAttribute]
[CakeAliasCategoryAttribute("Get")]
[CakeMethodAliasAttribute]
public static Byte[] HttpGetAsByteArray(ICakeContext context, string address, HttpSettings settings);
    [ExtensionAttribute]
[CakeAliasCategoryAttribute("Get")]
[CakeMethodAliasAttribute]
public static string HttpGet(ICakeContext context, string address, HttpSettings settings);
    [ExtensionAttribute]
[CakeAliasCategoryAttribute("Get")]
[CakeMethodAliasAttribute]
public static string HttpGet(ICakeContext context, string address, Action`1<HttpSettings> configurator);
    [ExtensionAttribute]
[CakeAliasCategoryAttribute("Get")]
[CakeMethodAliasAttribute]
public static string HttpGet(ICakeContext context, string address);
    [ExtensionAttribute]
[CakeAliasCategoryAttribute("Post")]
[CakeMethodAliasAttribute]
public static Byte[] HttpPostAsByteArray(ICakeContext context, string address, HttpSettings settings);
    [ExtensionAttribute]
[CakeAliasCategoryAttribute("Post")]
[CakeMethodAliasAttribute]
public static string HttpPost(ICakeContext context, string address, HttpSettings settings);
    [ExtensionAttribute]
[CakeAliasCategoryAttribute("Post")]
[CakeMethodAliasAttribute]
public static string HttpPost(ICakeContext context, string address, Action`1<HttpSettings> configurator);
    [ExtensionAttribute]
[CakeAliasCategoryAttribute("Post")]
[CakeMethodAliasAttribute]
public static string HttpPost(ICakeContext context, string address);
    [ExtensionAttribute]
[CakeAliasCategoryAttribute("Put")]
[CakeMethodAliasAttribute]
public static Byte[] HttpPutAsByteArray(ICakeContext context, string address, HttpSettings settings);
    [ExtensionAttribute]
[CakeAliasCategoryAttribute("Put")]
[CakeMethodAliasAttribute]
public static string HttpPut(ICakeContext context, string address, HttpSettings settings);
    [ExtensionAttribute]
[CakeAliasCategoryAttribute("Put")]
[CakeMethodAliasAttribute]
public static string HttpPut(ICakeContext context, string address, Action`1<HttpSettings> configurator);
    [ExtensionAttribute]
[CakeAliasCategoryAttribute("Put")]
[CakeMethodAliasAttribute]
public static string HttpPut(ICakeContext context, string address);
    [ExtensionAttribute]
[CakeAliasCategoryAttribute("Patch")]
[CakeMethodAliasAttribute]
public static Byte[] HttpPatchAsByteArray(ICakeContext context, string address, HttpSettings settings);
    [ExtensionAttribute]
[CakeAliasCategoryAttribute("Patch")]
[CakeMethodAliasAttribute]
public static string HttpPatch(ICakeContext context, string address, HttpSettings settings);
    [ExtensionAttribute]
[CakeAliasCategoryAttribute("Patch")]
[CakeMethodAliasAttribute]
public static string HttpPatch(ICakeContext context, string address, Action`1<HttpSettings> configurator);
    [ExtensionAttribute]
[CakeAliasCategoryAttribute("Patch")]
[CakeMethodAliasAttribute]
public static string HttpPatch(ICakeContext context, string address);
    [ExtensionAttribute]
[CakeAliasCategoryAttribute("Delete")]
[CakeMethodAliasAttribute]
public static void HttpDelete(ICakeContext context, string address, HttpSettings settings);
    [ExtensionAttribute]
[CakeAliasCategoryAttribute("Delete")]
[CakeMethodAliasAttribute]
public static void HttpDelete(ICakeContext context, string address, Action`1<HttpSettings> configurator);
    [ExtensionAttribute]
[CakeAliasCategoryAttribute("Delete")]
[CakeMethodAliasAttribute]
public static void HttpDelete(ICakeContext context, string address);
    [ExtensionAttribute]
[CakeAliasCategoryAttribute("Send")]
[CakeMethodAliasAttribute]
public static Byte[] HttpSendAsByteArray(ICakeContext context, string address, string httpMethod, HttpSettings settings);
    [ExtensionAttribute]
[CakeAliasCategoryAttribute("Send")]
[CakeMethodAliasAttribute]
public static string HttpSend(ICakeContext context, string address, string httpMethod, HttpSettings settings);
    [ExtensionAttribute]
[CakeAliasCategoryAttribute("Send")]
[CakeMethodAliasAttribute]
public static string HttpSend(ICakeContext context, string address, string httpMethod, Action`1<HttpSettings> configurator);
    [ExtensionAttribute]
[CakeAliasCategoryAttribute("Send")]
[CakeMethodAliasAttribute]
public static string HttpSend(ICakeContext context, string address, string httpMethod);
    [ExtensionAttribute]
[CakeAliasCategoryAttribute("Send")]
[CakeMethodAliasAttribute]
public static HttpResponseMessage HttpSend(ICakeContext context, HttpRequestMessage request);
    private static HttpClient GetHttpClient(ICakeContext context, HttpSettings settings);
    private static void SetHttpClientBasedSettings(HttpSettings settings, HttpClient httpClient);
    private static void VerifyParameters(ICakeContext context, string address, HttpSettings settings);
}
[ExtensionAttribute]
[CakeAliasCategoryAttribute("HTTP Operations")]
[CakeNamespaceImportAttribute("Cake.Http")]
public static class Cake.Http.HttpClientAsyncAliases : object {
    [AsyncStateMachineAttribute("Cake.Http.HttpClientAsyncAliases/<HttpGetAsByteArrayAsync>d__0")]
[ExtensionAttribute]
[CakeAliasCategoryAttribute("Get")]
[CakeMethodAliasAttribute]
public static Task`1<Byte[]> HttpGetAsByteArrayAsync(ICakeContext context, string address, HttpSettings settings);
    [AsyncStateMachineAttribute("Cake.Http.HttpClientAsyncAliases/<HttpGetAsync>d__1")]
[ExtensionAttribute]
[CakeAliasCategoryAttribute("Get")]
[CakeMethodAliasAttribute]
public static Task`1<string> HttpGetAsync(ICakeContext context, string address, HttpSettings settings);
    [AsyncStateMachineAttribute("Cake.Http.HttpClientAsyncAliases/<HttpGetAsync>d__2")]
[ExtensionAttribute]
[CakeAliasCategoryAttribute("Get")]
[CakeMethodAliasAttribute]
public static Task`1<string> HttpGetAsync(ICakeContext context, string address, Action`1<HttpSettings> configurator);
    [AsyncStateMachineAttribute("Cake.Http.HttpClientAsyncAliases/<HttpGetAsync>d__3")]
[ExtensionAttribute]
[CakeAliasCategoryAttribute("Get")]
[CakeMethodAliasAttribute]
public static Task`1<string> HttpGetAsync(ICakeContext context, string address);
    [AsyncStateMachineAttribute("Cake.Http.HttpClientAsyncAliases/<HttpPostAsByteArrayAsync>d__4")]
[ExtensionAttribute]
[CakeAliasCategoryAttribute("Post")]
[CakeMethodAliasAttribute]
public static Task`1<Byte[]> HttpPostAsByteArrayAsync(ICakeContext context, string address, HttpSettings settings);
    [AsyncStateMachineAttribute("Cake.Http.HttpClientAsyncAliases/<HttpPostAsync>d__5")]
[ExtensionAttribute]
[CakeAliasCategoryAttribute("Post")]
[CakeMethodAliasAttribute]
public static Task`1<string> HttpPostAsync(ICakeContext context, string address, HttpSettings settings);
    [AsyncStateMachineAttribute("Cake.Http.HttpClientAsyncAliases/<HttpPostAsync>d__6")]
[ExtensionAttribute]
[CakeAliasCategoryAttribute("Post")]
[CakeMethodAliasAttribute]
public static Task`1<string> HttpPostAsync(ICakeContext context, string address, Action`1<HttpSettings> configurator);
    [AsyncStateMachineAttribute("Cake.Http.HttpClientAsyncAliases/<HttpPostAsync>d__7")]
[ExtensionAttribute]
[CakeAliasCategoryAttribute("Post")]
[CakeMethodAliasAttribute]
public static Task`1<string> HttpPostAsync(ICakeContext context, string address);
    [AsyncStateMachineAttribute("Cake.Http.HttpClientAsyncAliases/<HttpPutAsByteArrayAsync>d__8")]
[ExtensionAttribute]
[CakeAliasCategoryAttribute("Put")]
[CakeMethodAliasAttribute]
public static Task`1<Byte[]> HttpPutAsByteArrayAsync(ICakeContext context, string address, HttpSettings settings);
    [AsyncStateMachineAttribute("Cake.Http.HttpClientAsyncAliases/<HttpPutAsync>d__9")]
[ExtensionAttribute]
[CakeAliasCategoryAttribute("Put")]
[CakeMethodAliasAttribute]
public static Task`1<string> HttpPutAsync(ICakeContext context, string address, HttpSettings settings);
    [AsyncStateMachineAttribute("Cake.Http.HttpClientAsyncAliases/<HttpPutAsync>d__10")]
[ExtensionAttribute]
[CakeAliasCategoryAttribute("Put")]
[CakeMethodAliasAttribute]
public static Task`1<string> HttpPutAsync(ICakeContext context, string address, Action`1<HttpSettings> configurator);
    [AsyncStateMachineAttribute("Cake.Http.HttpClientAsyncAliases/<HttpPutAsync>d__11")]
[ExtensionAttribute]
[CakeAliasCategoryAttribute("Put")]
[CakeMethodAliasAttribute]
public static Task`1<string> HttpPutAsync(ICakeContext context, string address);
    [AsyncStateMachineAttribute("Cake.Http.HttpClientAsyncAliases/<HttpPatchAsByteArrayAsync>d__12")]
[ExtensionAttribute]
[CakeAliasCategoryAttribute("Patch")]
[CakeMethodAliasAttribute]
public static Task`1<Byte[]> HttpPatchAsByteArrayAsync(ICakeContext context, string address, HttpSettings settings);
    [AsyncStateMachineAttribute("Cake.Http.HttpClientAsyncAliases/<HttpPatchAsync>d__13")]
[ExtensionAttribute]
[CakeAliasCategoryAttribute("Patch")]
[CakeMethodAliasAttribute]
public static Task`1<string> HttpPatchAsync(ICakeContext context, string address, HttpSettings settings);
    [AsyncStateMachineAttribute("Cake.Http.HttpClientAsyncAliases/<HttpPatchAsync>d__14")]
[ExtensionAttribute]
[CakeAliasCategoryAttribute("Patch")]
[CakeMethodAliasAttribute]
public static Task`1<string> HttpPatchAsync(ICakeContext context, string address, Action`1<HttpSettings> configurator);
    [AsyncStateMachineAttribute("Cake.Http.HttpClientAsyncAliases/<HttpPatchAsync>d__15")]
[ExtensionAttribute]
[CakeAliasCategoryAttribute("Patch")]
[CakeMethodAliasAttribute]
public static Task`1<string> HttpPatchAsync(ICakeContext context, string address);
    [AsyncStateMachineAttribute("Cake.Http.HttpClientAsyncAliases/<HttpDeleteAsync>d__16")]
[ExtensionAttribute]
[CakeAliasCategoryAttribute("Delete")]
[CakeMethodAliasAttribute]
public static Task HttpDeleteAsync(ICakeContext context, string address, HttpSettings settings);
    [AsyncStateMachineAttribute("Cake.Http.HttpClientAsyncAliases/<HttpDeleteAsync>d__17")]
[ExtensionAttribute]
[CakeAliasCategoryAttribute("Delete")]
[CakeMethodAliasAttribute]
public static Task HttpDeleteAsync(ICakeContext context, string address, Action`1<HttpSettings> configurator);
    [AsyncStateMachineAttribute("Cake.Http.HttpClientAsyncAliases/<HttpDeleteAsync>d__18")]
[ExtensionAttribute]
[CakeAliasCategoryAttribute("Delete")]
[CakeMethodAliasAttribute]
public static Task HttpDeleteAsync(ICakeContext context, string address);
    [AsyncStateMachineAttribute("Cake.Http.HttpClientAsyncAliases/<HttpSendAsByteArrayAsync>d__19")]
[ExtensionAttribute]
[CakeAliasCategoryAttribute("Send")]
[CakeMethodAliasAttribute]
public static Task`1<Byte[]> HttpSendAsByteArrayAsync(ICakeContext context, string address, string httpMethod, HttpSettings settings);
    [AsyncStateMachineAttribute("Cake.Http.HttpClientAsyncAliases/<HttpSendAsync>d__20")]
[ExtensionAttribute]
[CakeAliasCategoryAttribute("Send")]
[CakeMethodAliasAttribute]
public static Task`1<string> HttpSendAsync(ICakeContext context, string address, string httpMethod, HttpSettings settings);
    [AsyncStateMachineAttribute("Cake.Http.HttpClientAsyncAliases/<HttpSendAsync>d__21")]
[ExtensionAttribute]
[CakeAliasCategoryAttribute("Send")]
[CakeMethodAliasAttribute]
public static Task`1<string> HttpSendAsync(ICakeContext context, string address, string httpMethod, Action`1<HttpSettings> configurator);
    [AsyncStateMachineAttribute("Cake.Http.HttpClientAsyncAliases/<HttpSendAsync>d__22")]
[ExtensionAttribute]
[CakeAliasCategoryAttribute("Send")]
[CakeMethodAliasAttribute]
public static Task`1<string> HttpSendAsync(ICakeContext context, string address, string httpMethod);
    [AsyncStateMachineAttribute("Cake.Http.HttpClientAsyncAliases/<HttpSendAsync>d__23")]
[ExtensionAttribute]
[CakeAliasCategoryAttribute("Send")]
[CakeMethodAliasAttribute]
public static Task`1<HttpResponseMessage> HttpSendAsync(ICakeContext context, HttpRequestMessage request);
    private static HttpClient GetHttpClient(ICakeContext context, HttpSettings settings);
    private static void SetHttpClientBasedSettings(HttpSettings settings, HttpClient httpClient);
    private static void VerifyParameters(ICakeContext context, string address, HttpSettings settings);
}
public class Cake.Http.HttpSettings : object {
    [CompilerGeneratedAttribute]
private Byte[] <RequestBody>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <Headers>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <Cookies>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseDefaultCredentials>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnsureSuccessStatusCode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ThrowExceptionOnNonSuccessStatusCode>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<X509Certificate2> <ClientCertificates>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <Timeout>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <LogRequestResponseOutput>k__BackingField;
    public Byte[] RequestBody { get; public set; }
    public IDictionary`2<string, string> Headers { get; public set; }
    public IDictionary`2<string, string> Cookies { get; public set; }
    public bool UseDefaultCredentials { get; public set; }
    public bool EnsureSuccessStatusCode { get; public set; }
    public bool ThrowExceptionOnNonSuccessStatusCode { get; public set; }
    public IList`1<X509Certificate2> ClientCertificates { get; public set; }
    public Nullable`1<TimeSpan> Timeout { get; public set; }
    public bool LogRequestResponseOutput { get; public set; }
    [CompilerGeneratedAttribute]
public Byte[] get_RequestBody();
    [CompilerGeneratedAttribute]
public void set_RequestBody(Byte[] value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_Headers();
    [CompilerGeneratedAttribute]
public void set_Headers(IDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_Cookies();
    [CompilerGeneratedAttribute]
public void set_Cookies(IDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public bool get_UseDefaultCredentials();
    [CompilerGeneratedAttribute]
public void set_UseDefaultCredentials(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnsureSuccessStatusCode();
    [CompilerGeneratedAttribute]
public void set_EnsureSuccessStatusCode(bool value);
    [CompilerGeneratedAttribute]
public bool get_ThrowExceptionOnNonSuccessStatusCode();
    [CompilerGeneratedAttribute]
public void set_ThrowExceptionOnNonSuccessStatusCode(bool value);
    [CompilerGeneratedAttribute]
public IList`1<X509Certificate2> get_ClientCertificates();
    [CompilerGeneratedAttribute]
public void set_ClientCertificates(IList`1<X509Certificate2> value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public bool get_LogRequestResponseOutput();
    [CompilerGeneratedAttribute]
public void set_LogRequestResponseOutput(bool value);
}
[ExtensionAttribute]
public static class Cake.Http.HttpSettingsExtensions : object {
    internal static string BoundaryPrefix;
    [ExtensionAttribute]
public static HttpSettings AppendHeader(HttpSettings settings, string name, string value);
    [ExtensionAttribute]
public static HttpSettings AppendCookie(HttpSettings settings, string name, string value);
    [ExtensionAttribute]
public static HttpSettings SetAuthorization(HttpSettings settings, string schema, string parameter);
    [ExtensionAttribute]
public static HttpSettings UseBasicAuthorization(HttpSettings settings, string userName, string password);
    [ExtensionAttribute]
public static HttpSettings UseBearerAuthorization(HttpSettings settings, string token);
    [ExtensionAttribute]
public static HttpSettings SetContentType(HttpSettings settings, string contentType);
    [ExtensionAttribute]
public static HttpSettings SetAccept(HttpSettings settings, string accept);
    [ExtensionAttribute]
public static HttpSettings SetAcceptLanguage(HttpSettings settings, string acceptLanguage);
    [ExtensionAttribute]
public static HttpSettings SetNoCache(HttpSettings settings);
    [ExtensionAttribute]
public static HttpSettings SetOrigin(HttpSettings settings, string url);
    [ExtensionAttribute]
public static HttpSettings SetReferer(HttpSettings settings, string url);
    [ExtensionAttribute]
public static HttpSettings SetRequestBody(HttpSettings settings, string requestBody);
    [ExtensionAttribute]
public static HttpSettings SetJsonRequestBody(HttpSettings settings, T data, bool indentOutput);
    [ExtensionAttribute]
public static HttpSettings SetFormUrlEncodedRequestBody(HttpSettings settings, IDictionary`2<string, string> data);
    [ExtensionAttribute]
public static HttpSettings SetFormUrlEncodedRequestBody(HttpSettings settings, IEnumerable`1<KeyValuePair`2<string, string>> data);
    [ExtensionAttribute]
public static HttpSettings SetMultipartFormDataRequestBody(HttpSettings settings, IEnumerable`1<KeyValuePair`2<string, string>> data, IEnumerable`1<FilePath> filePaths);
    [ExtensionAttribute]
public static HttpSettings SetMultipartFormDataRequestBody(HttpSettings settings, IEnumerable`1<KeyValuePair`2<string, string>> data, IEnumerable`1<KeyValuePair`2<string, FilePath>> filePaths);
    [ExtensionAttribute]
public static HttpSettings EnsureSuccessStatusCode(HttpSettings settings, bool throwExceptionOnNonSuccessStatusCode);
    [ExtensionAttribute]
public static HttpSettings UseClientCertificates(HttpSettings settings, X509Certificate2[] clientCertificates);
    [ExtensionAttribute]
public static HttpSettings UseClientCertificates(HttpSettings settings, IEnumerable`1<X509Certificate2> clientCertificates);
    [ExtensionAttribute]
public static HttpSettings SetTimeout(HttpSettings settings, TimeSpan timeout);
    [ExtensionAttribute]
public static HttpSettings SuppressLogResponseRequestBodyOutput(HttpSettings settings);
    private static void VerifyParameters(HttpSettings settings, string name, string value);
}
[GeneratedCodeAttribute("simple-json", "1.0.0")]
public interface Cake.Http.IJsonSerializerStrategy {
    public abstract virtual bool TrySerializeNonPrimitiveObject(object input, Object& output);
    public abstract virtual object DeserializeObject(object value, Type type);
}
[GeneratedCodeAttribute("simple-json", "1.0.0")]
[EditorBrowsableAttribute("1")]
internal class Cake.Http.JsonArray : List`1<object> {
    public JsonArray(int capacity);
    public virtual string ToString();
}
[GeneratedCodeAttribute("simple-json", "1.0.0")]
public static class Cake.Http.JsonEncoder : object {
    private static int TOKEN_NONE;
    private static int TOKEN_CURLY_OPEN;
    private static int TOKEN_CURLY_CLOSE;
    private static int TOKEN_SQUARED_OPEN;
    private static int TOKEN_SQUARED_CLOSE;
    private static int TOKEN_COLON;
    private static int TOKEN_COMMA;
    private static int TOKEN_STRING;
    private static int TOKEN_NUMBER;
    private static int TOKEN_TRUE;
    private static int TOKEN_FALSE;
    private static int TOKEN_NULL;
    private static int BUILDER_CAPACITY;
    private static Char[] EscapeTable;
    private static Char[] EscapeCharacters;
    private static string EscapeCharactersString;
    private static IJsonSerializerStrategy _currentJsonSerializerStrategy;
    private static PocoJsonSerializerStrategy _pocoJsonSerializerStrategy;
    private static DataContractJsonSerializerStrategy _dataContractJsonSerializerStrategy;
    public static IJsonSerializerStrategy CurrentJsonSerializerStrategy { get; public set; }
    [EditorBrowsableAttribute("2")]
public static PocoJsonSerializerStrategy PocoJsonSerializerStrategy { get; }
    [EditorBrowsableAttribute("2")]
public static DataContractJsonSerializerStrategy DataContractJsonSerializerStrategy { get; }
    private static JsonEncoder();
    public static object DeserializeObject(string json);
    public static bool TryDeserializeObject(string json, Object& obj);
    public static object DeserializeObject(string json, Type type, IJsonSerializerStrategy jsonSerializerStrategy);
    public static object DeserializeObject(string json, Type type);
    public static T DeserializeObject(string json, IJsonSerializerStrategy jsonSerializerStrategy);
    public static T DeserializeObject(string json);
    public static string SerializeObject(object json, IJsonSerializerStrategy jsonSerializerStrategy);
    public static string SerializeObject(object json, bool indentOutput);
    public static string EscapeToJavascriptString(string jsonString);
    private static IDictionary`2<string, object> ParseObject(Char[] json, Int32& index, Boolean& success);
    private static JsonArray ParseArray(Char[] json, Int32& index, Boolean& success);
    private static object ParseValue(Char[] json, Int32& index, Boolean& success);
    private static string ParseString(Char[] json, Int32& index, Boolean& success);
    private static string ConvertFromUtf32(int utf32);
    private static object ParseNumber(Char[] json, Int32& index, Boolean& success);
    private static int GetLastIndexOfNumber(Char[] json, int index);
    private static void EatWhitespace(Char[] json, Int32& index);
    private static int LookAhead(Char[] json, int index);
    private static int NextToken(Char[] json, Int32& index);
    private static bool SerializeValue(IJsonSerializerStrategy jsonSerializerStrategy, object value, StringBuilder builder);
    private static bool SerializeObject(IJsonSerializerStrategy jsonSerializerStrategy, IEnumerable keys, IEnumerable values, StringBuilder builder);
    private static bool SerializeArray(IJsonSerializerStrategy jsonSerializerStrategy, IEnumerable anArray, StringBuilder builder);
    private static bool SerializeString(string aString, StringBuilder builder);
    private static bool SerializeNumber(object number, StringBuilder builder);
    private static bool IsNumeric(object value);
    public static IJsonSerializerStrategy get_CurrentJsonSerializerStrategy();
    public static void set_CurrentJsonSerializerStrategy(IJsonSerializerStrategy value);
    public static PocoJsonSerializerStrategy get_PocoJsonSerializerStrategy();
    public static DataContractJsonSerializerStrategy get_DataContractJsonSerializerStrategy();
    internal static string FormatJsonOutput(string data);
}
[DefaultMemberAttribute("Item")]
[GeneratedCodeAttribute("simple-json", "1.0.0")]
[EditorBrowsableAttribute("1")]
internal class Cake.Http.JsonObject : DynamicObject {
    private Dictionary`2<string, object> _members;
    public object Item { get; }
    public ICollection`1<string> Keys { get; }
    public ICollection`1<object> Values { get; }
    public object Item { get; public set; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public JsonObject(IEqualityComparer`1<string> comparer);
    public object get_Item(int index);
    internal static object GetAtIndex(IDictionary`2<string, object> obj, int index);
    public sealed virtual void Add(string key, object value);
    public sealed virtual bool ContainsKey(string key);
    public sealed virtual ICollection`1<string> get_Keys();
    public sealed virtual bool Remove(string key);
    public sealed virtual bool TryGetValue(string key, Object& value);
    public sealed virtual ICollection`1<object> get_Values();
    public sealed virtual object get_Item(string key);
    public sealed virtual void set_Item(string key, object value);
    public sealed virtual void Add(KeyValuePair`2<string, object> item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(KeyValuePair`2<string, object> item);
    public sealed virtual void CopyTo(KeyValuePair`2[] array, int arrayIndex);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool Remove(KeyValuePair`2<string, object> item);
    public sealed virtual IEnumerator`1<KeyValuePair`2<string, object>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public virtual string ToString();
    public virtual bool TryConvert(ConvertBinder binder, Object& result);
    public virtual bool TryDeleteMember(DeleteMemberBinder binder);
    public virtual bool TryGetIndex(GetIndexBinder binder, Object[] indexes, Object& result);
    public virtual bool TryGetMember(GetMemberBinder binder, Object& result);
    public virtual bool TrySetIndex(SetIndexBinder binder, Object[] indexes, object value);
    public virtual bool TrySetMember(SetMemberBinder binder, object value);
    [IteratorStateMachineAttribute("Cake.Http.JsonObject/<GetDynamicMemberNames>d__35")]
public virtual IEnumerable`1<string> GetDynamicMemberNames();
}
[CompilerGeneratedAttribute]
internal class Cake.Http.NamespaceDoc : object {
}
[GeneratedCodeAttribute("simple-json", "1.0.0")]
public class Cake.Http.PocoJsonSerializerStrategy : object {
    internal IDictionary`2<Type, ConstructorDelegate> ConstructorCache;
    internal IDictionary`2<Type, IDictionary`2<string, GetDelegate>> GetCache;
    internal IDictionary`2<Type, IDictionary`2<string, KeyValuePair`2<Type, SetDelegate>>> SetCache;
    internal static Type[] EmptyTypes;
    internal static Type[] ArrayConstructorParameterTypes;
    private static String[] Iso8601Format;
    private static PocoJsonSerializerStrategy();
    protected virtual string MapClrMemberNameToJsonFieldName(string clrPropertyName);
    internal virtual ConstructorDelegate ContructorDelegateFactory(Type key);
    internal virtual IDictionary`2<string, GetDelegate> GetterValueFactory(Type type);
    internal virtual IDictionary`2<string, KeyValuePair`2<Type, SetDelegate>> SetterValueFactory(Type type);
    public virtual bool TrySerializeNonPrimitiveObject(object input, Object& output);
    public virtual object DeserializeObject(object value, Type type);
    protected virtual object SerializeEnum(Enum p);
    protected virtual bool TrySerializeKnownTypes(object input, Object& output);
    protected virtual bool TrySerializeUnknownTypes(object input, Object& output);
}
[GeneratedCodeAttribute("reflection-utils", "1.0.0")]
internal class Cake.Http.Reflection.ReflectionUtils : object {
    private static Object[] EmptyObjects;
    private static ReflectionUtils();
    public static TypeInfo GetTypeInfo(Type type);
    public static Attribute GetAttribute(MemberInfo info, Type type);
    public static Type GetGenericListElementType(Type type);
    public static Attribute GetAttribute(Type objectType, Type attributeType);
    public static Type[] GetGenericTypeArguments(Type type);
    public static bool IsTypeGeneric(Type type);
    public static bool IsTypeGenericeCollectionInterface(Type type);
    public static bool IsAssignableFrom(Type type1, Type type2);
    public static bool IsTypeDictionary(Type type);
    public static bool IsNullableType(Type type);
    public static object ToNullableType(object obj, Type nullableType);
    public static bool IsValueType(Type type);
    public static IEnumerable`1<ConstructorInfo> GetConstructors(Type type);
    public static ConstructorInfo GetConstructorInfo(Type type, Type[] argsType);
    public static IEnumerable`1<PropertyInfo> GetProperties(Type type);
    public static IEnumerable`1<FieldInfo> GetFields(Type type);
    public static MethodInfo GetGetterMethodInfo(PropertyInfo propertyInfo);
    public static MethodInfo GetSetterMethodInfo(PropertyInfo propertyInfo);
    public static ConstructorDelegate GetContructor(ConstructorInfo constructorInfo);
    public static ConstructorDelegate GetContructor(Type type, Type[] argsType);
    public static ConstructorDelegate GetConstructorByReflection(ConstructorInfo constructorInfo);
    public static ConstructorDelegate GetConstructorByReflection(Type type, Type[] argsType);
    public static ConstructorDelegate GetConstructorByExpression(ConstructorInfo constructorInfo);
    public static ConstructorDelegate GetConstructorByExpression(Type type, Type[] argsType);
    public static GetDelegate GetGetMethod(PropertyInfo propertyInfo);
    public static GetDelegate GetGetMethod(FieldInfo fieldInfo);
    public static GetDelegate GetGetMethodByReflection(PropertyInfo propertyInfo);
    public static GetDelegate GetGetMethodByReflection(FieldInfo fieldInfo);
    public static GetDelegate GetGetMethodByExpression(PropertyInfo propertyInfo);
    public static GetDelegate GetGetMethodByExpression(FieldInfo fieldInfo);
    public static SetDelegate GetSetMethod(PropertyInfo propertyInfo);
    public static SetDelegate GetSetMethod(FieldInfo fieldInfo);
    public static SetDelegate GetSetMethodByReflection(PropertyInfo propertyInfo);
    public static SetDelegate GetSetMethodByReflection(FieldInfo fieldInfo);
    public static SetDelegate GetSetMethodByExpression(PropertyInfo propertyInfo);
    public static SetDelegate GetSetMethodByExpression(FieldInfo fieldInfo);
    public static BinaryExpression Assign(Expression left, Expression right);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
