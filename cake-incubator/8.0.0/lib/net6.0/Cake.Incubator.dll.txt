[ExtensionAttribute]
[CakeAliasCategoryAttribute("Guard")]
public static class Cake.Incubator.AssertExtensions.AssertExtensions : object {
    [ExtensionAttribute]
[CakeAliasCategoryAttribute("Guard Clauses")]
public static T ThrowIfNull(T value, string varName);
    [ExtensionAttribute]
[CakeAliasCategoryAttribute("Guard Clauses")]
public static T ThrowIfNull(T value, string varName, string message);
    [ExtensionAttribute]
[CakeAliasCategoryAttribute("Guard Clauses")]
public static string ThrowIfNullOrWhiteSpace(string value, string varName);
    [ExtensionAttribute]
[CakeAliasCategoryAttribute("Guard Clauses")]
public static string ThrowIfNullOrEmpty(string value, string varName);
    [ExtensionAttribute]
[CakeAliasCategoryAttribute("Guard Clauses")]
public static bool IsNullOrEmpty(string value);
    [ExtensionAttribute]
[CakeAliasCategoryAttribute("Guard Clauses")]
public static bool IsNullOrEmpty(ICollection`1<T> value);
}
[ExtensionAttribute]
[CakeNamespaceImportAttribute("Cake.Incubator.DotNetBuildExtensions")]
public static class Cake.Incubator.DotNetBuildExtensions.DotNetBuildSettingsExtensions : object {
    [ExtensionAttribute]
public static DotNetMSBuildSettings WithTargets(DotNetMSBuildSettings settings, IEnumerable`1<string> targets);
}
[ExtensionAttribute]
[CakeAliasCategoryAttribute("DotNet")]
public static class Cake.Incubator.DotNetTestExtensions.DotNetTestExtensions : object {
    [ExtensionAttribute]
[CakeAliasCategoryAttribute("Test")]
[CakeMethodAliasAttribute]
public static void DotNetTest(ICakeContext context, FilePath project, XUnit2Settings xunitSettings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Test")]
public static void DotNetTest(ICakeContext context, DotNetTestSettings settings, FilePath project, XUnit2Settings xunitSettings);
    private static ProcessArgumentBuilder ProcessArguments(ICakeContext cakeContext, ProcessArgumentBuilder builder, FilePath project, XUnit2Settings settings);
    private static void AddOutputArgument(ProcessArgumentBuilder builder, ICakeContext cakeContext, FilePath project, XUnit2Settings settings, string fileExtension, string argumentName);
}
[ExtensionAttribute]
[CakeNamespaceImportAttribute("Cake.Incubator.EnumerableExtensions")]
public static class Cake.Incubator.EnumerableExtensions.EnumerableExtensions : object {
    [ExtensionAttribute]
public static void Each(IEnumerable`1<T> source, Action`1<T> action);
    [ExtensionAttribute]
public static bool IsNullOrEmpty(IEnumerable`1<T> source);
    [ExtensionAttribute]
public static bool IsNullOrEmpty(IList`1<T> source);
    [ExtensionAttribute]
public static bool IsNullOrEmpty(T[] source);
    [IteratorStateMachineAttribute("Cake.Incubator.EnumerableExtensions.EnumerableExtensions/<Distinct>d__4`2")]
[ExtensionAttribute]
public static IEnumerable`1<TSource> Distinct(IEnumerable`1<TSource> source, Func`2<TSource, TKey> getKey);
    [ExtensionAttribute]
public static bool IsIn(T source, T[] list);
}
[ExtensionAttribute]
[CakeNamespaceImportAttribute("Cake.Incubator.FileExtensions")]
public static class Cake.Incubator.FileExtensions.FileExtensions : object {
    [ExtensionAttribute]
public static IEnumerable`1<FilePath> Filter(FilePathCollection filePathCollection, String[] fileNames);
    [ExtensionAttribute]
public static XDocument LoadXml(IFile xmlFile);
}
[ExtensionAttribute]
[CakeNamespaceImportAttribute("Cake.Incubator.FilePathExtensions")]
public static class Cake.Incubator.FilePathExtensions.FilePathExtensions : object {
    [ExtensionAttribute]
public static bool IsSolution(FilePath filePath);
    [ExtensionAttribute]
public static bool IsProject(FilePath filePath);
    [ExtensionAttribute]
public static bool HasFileName(FilePath path, string fileName);
    [ExtensionAttribute]
public static bool HasFileExtension(FilePath path, string fileExtension);
}
[ExtensionAttribute]
[CakeNamespaceImportAttribute("Cake.Incubator.FileSystemExtensions")]
internal static class Cake.Incubator.FileSystemExtensions.FileSystemExtensions : object {
    [ExtensionAttribute]
internal static IFile GetProjectFile(IFileSystem fs, FilePath projectPath);
}
[ExtensionAttribute]
[CakeAliasCategoryAttribute("Globbing")]
public static class Cake.Incubator.GlobbingExtensions.GlobbingExtensions : object {
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Files")]
public static FilePathCollection GetMatchingFiles(ICakeContext context, IEnumerable`1<FilePath> files);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Files")]
public static FilePathCollection GetFiles(ICakeContext context, String[] patterns);
}
[ExtensionAttribute]
[CakeNamespaceImportAttribute("Cake.Incubator.LoggingExtensions")]
public static class Cake.Incubator.LoggingExtensions.LoggingExtensions : object {
    [ExtensionAttribute]
public static string Dump(T obj);
    private static string ObjectToString(T obj);
    private static void ProcessEnumerable(object value, StringBuilder sb, MemberDescriptor descriptor);
    private static bool IsSimpleType(Type type);
}
[CompilerGeneratedAttribute]
internal class Cake.Incubator.NamespaceDoc : object {
}
public class Cake.Incubator.Project.BuildTarget : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <BeforeTargets>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <AfterTargets>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <DependsOn>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<BuildTargetExecutable> <Executables>k__BackingField;
    public string Name { get; public set; }
    public String[] BeforeTargets { get; public set; }
    public String[] AfterTargets { get; public set; }
    public String[] DependsOn { get; public set; }
    public ICollection`1<BuildTargetExecutable> Executables { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public String[] get_BeforeTargets();
    [CompilerGeneratedAttribute]
public void set_BeforeTargets(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_AfterTargets();
    [CompilerGeneratedAttribute]
public void set_AfterTargets(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_DependsOn();
    [CompilerGeneratedAttribute]
public void set_DependsOn(String[] value);
    [CompilerGeneratedAttribute]
public ICollection`1<BuildTargetExecutable> get_Executables();
    [CompilerGeneratedAttribute]
public void set_Executables(ICollection`1<BuildTargetExecutable> value);
}
public class Cake.Incubator.Project.BuildTargetExecutable : object {
    [CompilerGeneratedAttribute]
private string <Command>k__BackingField;
    public string Command { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Command();
    [CompilerGeneratedAttribute]
public void set_Command(string value);
}
public class Cake.Incubator.Project.CustomProjectFile : object {
    [CompilerGeneratedAttribute]
private ProjectPath <FilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RelativePath>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Compile>k__BackingField;
    public ProjectPath FilePath { get; public set; }
    public string RelativePath { get; public set; }
    public bool Compile { get; public set; }
    [CompilerGeneratedAttribute]
public ProjectPath get_FilePath();
    [CompilerGeneratedAttribute]
public void set_FilePath(ProjectPath value);
    [CompilerGeneratedAttribute]
public string get_RelativePath();
    [CompilerGeneratedAttribute]
public void set_RelativePath(string value);
    [CompilerGeneratedAttribute]
public bool get_Compile();
    [CompilerGeneratedAttribute]
public void set_Compile(bool value);
}
public class Cake.Incubator.Project.CustomProjectParserResult : object {
    [CompilerGeneratedAttribute]
private FilePath <ProjectFilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Configuration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Platform>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProjectGuid>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <ProjectTypeGuids>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputType>k__BackingField;
    [CompilerGeneratedAttribute]
private DirectoryPath <OutputPath>k__BackingField;
    [CompilerGeneratedAttribute]
private DirectoryPath[] <OutputPaths>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RootNameSpace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssemblyName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetFrameworkVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <TargetFrameworkVersions>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetFrameworkProfile>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<CustomProjectFile> <Files>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<ProjectAssemblyReference> <References>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<ProjectReference> <ProjectReferences>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsNetCore>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsNetFramework>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsNetStandard>k__BackingField;
    [CompilerGeneratedAttribute]
private NetCoreProject <NetCore>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<PackageReference> <PackageReferences>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsVS2017ProjectFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private XDocument <ProjectXml>k__BackingField;
    public FilePath ProjectFilePath { get; public set; }
    public string Configuration { get; public set; }
    public string Platform { get; public set; }
    public string ProjectGuid { get; public set; }
    public String[] ProjectTypeGuids { get; public set; }
    public string OutputType { get; public set; }
    [ObsoleteAttribute("Use OutputPaths instead for multi-targeting support")]
public DirectoryPath OutputPath { get; public set; }
    public DirectoryPath[] OutputPaths { get; public set; }
    public string RootNameSpace { get; public set; }
    public string AssemblyName { get; public set; }
    [ObsoleteAttribute("Use TargetFrameworkVersions instead")]
public string TargetFrameworkVersion { get; public set; }
    public String[] TargetFrameworkVersions { get; public set; }
    public string TargetFrameworkProfile { get; public set; }
    public ICollection`1<CustomProjectFile> Files { get; public set; }
    public ICollection`1<ProjectAssemblyReference> References { get; public set; }
    public ICollection`1<ProjectReference> ProjectReferences { get; public set; }
    public bool IsNetCore { get; public set; }
    public bool IsNetFramework { get; public set; }
    public bool IsNetStandard { get; public set; }
    public NetCoreProject NetCore { get; public set; }
    public ICollection`1<PackageReference> PackageReferences { get; public set; }
    public bool IsVS2017ProjectFormat { get; public set; }
    public XDocument ProjectXml { get; public set; }
    [CompilerGeneratedAttribute]
public FilePath get_ProjectFilePath();
    [CompilerGeneratedAttribute]
public void set_ProjectFilePath(FilePath value);
    [CompilerGeneratedAttribute]
public string get_Configuration();
    [CompilerGeneratedAttribute]
public void set_Configuration(string value);
    [CompilerGeneratedAttribute]
public string get_Platform();
    [CompilerGeneratedAttribute]
public void set_Platform(string value);
    [CompilerGeneratedAttribute]
public string get_ProjectGuid();
    [CompilerGeneratedAttribute]
public void set_ProjectGuid(string value);
    [CompilerGeneratedAttribute]
public String[] get_ProjectTypeGuids();
    [CompilerGeneratedAttribute]
public void set_ProjectTypeGuids(String[] value);
    [CompilerGeneratedAttribute]
public string get_OutputType();
    [CompilerGeneratedAttribute]
public void set_OutputType(string value);
    [CompilerGeneratedAttribute]
public DirectoryPath get_OutputPath();
    [CompilerGeneratedAttribute]
public void set_OutputPath(DirectoryPath value);
    [CompilerGeneratedAttribute]
public DirectoryPath[] get_OutputPaths();
    [CompilerGeneratedAttribute]
public void set_OutputPaths(DirectoryPath[] value);
    [CompilerGeneratedAttribute]
public string get_RootNameSpace();
    [CompilerGeneratedAttribute]
public void set_RootNameSpace(string value);
    [CompilerGeneratedAttribute]
public string get_AssemblyName();
    [CompilerGeneratedAttribute]
public void set_AssemblyName(string value);
    [CompilerGeneratedAttribute]
public string get_TargetFrameworkVersion();
    [CompilerGeneratedAttribute]
public void set_TargetFrameworkVersion(string value);
    [CompilerGeneratedAttribute]
public String[] get_TargetFrameworkVersions();
    [CompilerGeneratedAttribute]
public void set_TargetFrameworkVersions(String[] value);
    [CompilerGeneratedAttribute]
public string get_TargetFrameworkProfile();
    [CompilerGeneratedAttribute]
public void set_TargetFrameworkProfile(string value);
    [CompilerGeneratedAttribute]
public ICollection`1<CustomProjectFile> get_Files();
    [CompilerGeneratedAttribute]
public void set_Files(ICollection`1<CustomProjectFile> value);
    [CompilerGeneratedAttribute]
public ICollection`1<ProjectAssemblyReference> get_References();
    [CompilerGeneratedAttribute]
public void set_References(ICollection`1<ProjectAssemblyReference> value);
    [CompilerGeneratedAttribute]
public ICollection`1<ProjectReference> get_ProjectReferences();
    [CompilerGeneratedAttribute]
public void set_ProjectReferences(ICollection`1<ProjectReference> value);
    [CompilerGeneratedAttribute]
public bool get_IsNetCore();
    [CompilerGeneratedAttribute]
public void set_IsNetCore(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsNetFramework();
    [CompilerGeneratedAttribute]
public void set_IsNetFramework(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsNetStandard();
    [CompilerGeneratedAttribute]
public void set_IsNetStandard(bool value);
    [CompilerGeneratedAttribute]
public NetCoreProject get_NetCore();
    [CompilerGeneratedAttribute]
public void set_NetCore(NetCoreProject value);
    [CompilerGeneratedAttribute]
public ICollection`1<PackageReference> get_PackageReferences();
    [CompilerGeneratedAttribute]
public void set_PackageReferences(ICollection`1<PackageReference> value);
    [CompilerGeneratedAttribute]
public bool get_IsVS2017ProjectFormat();
    [CompilerGeneratedAttribute]
public void set_IsVS2017ProjectFormat(bool value);
    [CompilerGeneratedAttribute]
public XDocument get_ProjectXml();
    [CompilerGeneratedAttribute]
public void set_ProjectXml(XDocument value);
}
public class Cake.Incubator.Project.DotNetCliToolReference : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    public string Name { get; public set; }
    public string Version { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(string value);
}
public class Cake.Incubator.Project.NetCoreProject : object {
    [CompilerGeneratedAttribute]
private bool <AllowUnsafeBlocks>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ApplicationIcon>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssemblyTitle>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssemblyOriginatorKeyFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssemblyVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Authors>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BuildOutputTargetFolder>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <ContentTargetFolders>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Copyright>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Company>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DebugSymbols>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DebugType>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <DefineConstants>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DelaySign>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DocumentationFile>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<DotNetCliToolReference> <DotNetCliToolReferences>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FileVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <GenerateDocumentationFile>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <GeneratePackageOnBuild>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GenerateSerializationAssemblies>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeSymbols>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeSource>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeBuildOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeContentInPack>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsPackable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsTool>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsWeb>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LangVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MinClientVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NetStandardImplicitPackageVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NeutralLanguage>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoPackageAnalysis>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <NoWarn>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NuspecBasePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NuspecFile>k__BackingField;
    [CompilerGeneratedAttribute]
private NameValueCollection <NuspecProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Optimize>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PackageIconUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PackageId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PackageLicenseUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PackageOutputPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PackageProjectUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<PackageReference> <PackageReferences>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PackageRequireLicenseAcceptance>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PackageReleaseNotes>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <PackageTags>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <PackageTargetFallbacks>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PreserveCompilationContext>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Product>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<ProjectReference> <ProjectReferences>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PublicSign>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RepositoryType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RepositoryUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RuntimeFrameworkVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <RuntimeIdentifiers>k__BackingField;
    [CompilerGeneratedAttribute]
private RuntimeOptions <RuntimeOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Sdk>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SignAssembly>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<BuildTarget> <Targets>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <TargetFrameworks>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <TreatSpecificWarningsAsErrors>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TreatWarningsAsErrors>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WarningLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PackAsTool>k__BackingField;
    public bool AllowUnsafeBlocks { get; public set; }
    public string ApplicationIcon { get; public set; }
    public string AssemblyTitle { get; public set; }
    public string AssemblyOriginatorKeyFile { get; public set; }
    public string AssemblyVersion { get; public set; }
    public String[] Authors { get; public set; }
    public string BuildOutputTargetFolder { get; public set; }
    public String[] ContentTargetFolders { get; public set; }
    public string Copyright { get; public set; }
    public string Company { get; public set; }
    public bool DebugSymbols { get; public set; }
    public string DebugType { get; public set; }
    public String[] DefineConstants { get; public set; }
    public bool DelaySign { get; public set; }
    public string Description { get; public set; }
    public string DocumentationFile { get; public set; }
    public ICollection`1<DotNetCliToolReference> DotNetCliToolReferences { get; public set; }
    public string FileVersion { get; public set; }
    public bool GenerateDocumentationFile { get; public set; }
    public bool GeneratePackageOnBuild { get; public set; }
    public string GenerateSerializationAssemblies { get; public set; }
    public bool IncludeSymbols { get; public set; }
    public bool IncludeSource { get; public set; }
    public bool IncludeBuildOutput { get; public set; }
    public bool IncludeContentInPack { get; public set; }
    public bool IsPackable { get; public set; }
    public bool IsTool { get; public set; }
    public bool IsWeb { get; public set; }
    public string LangVersion { get; public set; }
    public string MinClientVersion { get; public set; }
    public string NetStandardImplicitPackageVersion { get; public set; }
    public string NeutralLanguage { get; public set; }
    public bool NoPackageAnalysis { get; public set; }
    public String[] NoWarn { get; public set; }
    public string NuspecBasePath { get; public set; }
    public string NuspecFile { get; public set; }
    public NameValueCollection NuspecProperties { get; public set; }
    public bool Optimize { get; public set; }
    public string PackageIconUrl { get; public set; }
    public string PackageId { get; public set; }
    public string PackageLicenseUrl { get; public set; }
    public string PackageOutputPath { get; public set; }
    public string PackageProjectUrl { get; public set; }
    public ICollection`1<PackageReference> PackageReferences { get; public set; }
    public bool PackageRequireLicenseAcceptance { get; public set; }
    public string PackageReleaseNotes { get; public set; }
    public String[] PackageTags { get; public set; }
    public String[] PackageTargetFallbacks { get; public set; }
    public bool PreserveCompilationContext { get; public set; }
    public string Product { get; public set; }
    public ICollection`1<ProjectReference> ProjectReferences { get; public set; }
    public bool PublicSign { get; public set; }
    public string RepositoryType { get; public set; }
    public string RepositoryUrl { get; public set; }
    public string RuntimeFrameworkVersion { get; public set; }
    public String[] RuntimeIdentifiers { get; public set; }
    public RuntimeOptions RuntimeOptions { get; public set; }
    public string Sdk { get; public set; }
    public bool SignAssembly { get; public set; }
    public ICollection`1<BuildTarget> Targets { get; public set; }
    public string Title { get; public set; }
    public String[] TargetFrameworks { get; public set; }
    public String[] TreatSpecificWarningsAsErrors { get; public set; }
    public bool TreatWarningsAsErrors { get; public set; }
    public string Version { get; public set; }
    public string WarningLevel { get; public set; }
    public bool PackAsTool { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_AllowUnsafeBlocks();
    [CompilerGeneratedAttribute]
public void set_AllowUnsafeBlocks(bool value);
    [CompilerGeneratedAttribute]
public string get_ApplicationIcon();
    [CompilerGeneratedAttribute]
public void set_ApplicationIcon(string value);
    [CompilerGeneratedAttribute]
public string get_AssemblyTitle();
    [CompilerGeneratedAttribute]
public void set_AssemblyTitle(string value);
    [CompilerGeneratedAttribute]
public string get_AssemblyOriginatorKeyFile();
    [CompilerGeneratedAttribute]
public void set_AssemblyOriginatorKeyFile(string value);
    [CompilerGeneratedAttribute]
public string get_AssemblyVersion();
    [CompilerGeneratedAttribute]
public void set_AssemblyVersion(string value);
    [CompilerGeneratedAttribute]
public String[] get_Authors();
    [CompilerGeneratedAttribute]
public void set_Authors(String[] value);
    [CompilerGeneratedAttribute]
public string get_BuildOutputTargetFolder();
    [CompilerGeneratedAttribute]
public void set_BuildOutputTargetFolder(string value);
    [CompilerGeneratedAttribute]
public String[] get_ContentTargetFolders();
    [CompilerGeneratedAttribute]
public void set_ContentTargetFolders(String[] value);
    [CompilerGeneratedAttribute]
public string get_Copyright();
    [CompilerGeneratedAttribute]
public void set_Copyright(string value);
    [CompilerGeneratedAttribute]
public string get_Company();
    [CompilerGeneratedAttribute]
public void set_Company(string value);
    [CompilerGeneratedAttribute]
public bool get_DebugSymbols();
    [CompilerGeneratedAttribute]
public void set_DebugSymbols(bool value);
    [CompilerGeneratedAttribute]
public string get_DebugType();
    [CompilerGeneratedAttribute]
public void set_DebugType(string value);
    [CompilerGeneratedAttribute]
public String[] get_DefineConstants();
    [CompilerGeneratedAttribute]
public void set_DefineConstants(String[] value);
    [CompilerGeneratedAttribute]
public bool get_DelaySign();
    [CompilerGeneratedAttribute]
public void set_DelaySign(bool value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public string get_DocumentationFile();
    [CompilerGeneratedAttribute]
public void set_DocumentationFile(string value);
    [CompilerGeneratedAttribute]
public ICollection`1<DotNetCliToolReference> get_DotNetCliToolReferences();
    [CompilerGeneratedAttribute]
public void set_DotNetCliToolReferences(ICollection`1<DotNetCliToolReference> value);
    [CompilerGeneratedAttribute]
public string get_FileVersion();
    [CompilerGeneratedAttribute]
public void set_FileVersion(string value);
    [CompilerGeneratedAttribute]
public bool get_GenerateDocumentationFile();
    [CompilerGeneratedAttribute]
public void set_GenerateDocumentationFile(bool value);
    [CompilerGeneratedAttribute]
public bool get_GeneratePackageOnBuild();
    [CompilerGeneratedAttribute]
public void set_GeneratePackageOnBuild(bool value);
    [CompilerGeneratedAttribute]
public string get_GenerateSerializationAssemblies();
    [CompilerGeneratedAttribute]
public void set_GenerateSerializationAssemblies(string value);
    [CompilerGeneratedAttribute]
public bool get_IncludeSymbols();
    [CompilerGeneratedAttribute]
public void set_IncludeSymbols(bool value);
    [CompilerGeneratedAttribute]
public bool get_IncludeSource();
    [CompilerGeneratedAttribute]
public void set_IncludeSource(bool value);
    [CompilerGeneratedAttribute]
public bool get_IncludeBuildOutput();
    [CompilerGeneratedAttribute]
public void set_IncludeBuildOutput(bool value);
    [CompilerGeneratedAttribute]
public bool get_IncludeContentInPack();
    [CompilerGeneratedAttribute]
public void set_IncludeContentInPack(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsPackable();
    [CompilerGeneratedAttribute]
public void set_IsPackable(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsTool();
    [CompilerGeneratedAttribute]
public void set_IsTool(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsWeb();
    [CompilerGeneratedAttribute]
public void set_IsWeb(bool value);
    [CompilerGeneratedAttribute]
public string get_LangVersion();
    [CompilerGeneratedAttribute]
public void set_LangVersion(string value);
    [CompilerGeneratedAttribute]
public string get_MinClientVersion();
    [CompilerGeneratedAttribute]
public void set_MinClientVersion(string value);
    [CompilerGeneratedAttribute]
public string get_NetStandardImplicitPackageVersion();
    [CompilerGeneratedAttribute]
public void set_NetStandardImplicitPackageVersion(string value);
    [CompilerGeneratedAttribute]
public string get_NeutralLanguage();
    [CompilerGeneratedAttribute]
public void set_NeutralLanguage(string value);
    [CompilerGeneratedAttribute]
public bool get_NoPackageAnalysis();
    [CompilerGeneratedAttribute]
public void set_NoPackageAnalysis(bool value);
    [CompilerGeneratedAttribute]
public String[] get_NoWarn();
    [CompilerGeneratedAttribute]
public void set_NoWarn(String[] value);
    [CompilerGeneratedAttribute]
public string get_NuspecBasePath();
    [CompilerGeneratedAttribute]
public void set_NuspecBasePath(string value);
    [CompilerGeneratedAttribute]
public string get_NuspecFile();
    [CompilerGeneratedAttribute]
public void set_NuspecFile(string value);
    [CompilerGeneratedAttribute]
public NameValueCollection get_NuspecProperties();
    [CompilerGeneratedAttribute]
public void set_NuspecProperties(NameValueCollection value);
    [CompilerGeneratedAttribute]
public bool get_Optimize();
    [CompilerGeneratedAttribute]
public void set_Optimize(bool value);
    [CompilerGeneratedAttribute]
public string get_PackageIconUrl();
    [CompilerGeneratedAttribute]
public void set_PackageIconUrl(string value);
    [CompilerGeneratedAttribute]
public string get_PackageId();
    [CompilerGeneratedAttribute]
public void set_PackageId(string value);
    [CompilerGeneratedAttribute]
public string get_PackageLicenseUrl();
    [CompilerGeneratedAttribute]
public void set_PackageLicenseUrl(string value);
    [CompilerGeneratedAttribute]
public string get_PackageOutputPath();
    [CompilerGeneratedAttribute]
public void set_PackageOutputPath(string value);
    [CompilerGeneratedAttribute]
public string get_PackageProjectUrl();
    [CompilerGeneratedAttribute]
public void set_PackageProjectUrl(string value);
    [CompilerGeneratedAttribute]
public ICollection`1<PackageReference> get_PackageReferences();
    [CompilerGeneratedAttribute]
public void set_PackageReferences(ICollection`1<PackageReference> value);
    [CompilerGeneratedAttribute]
public bool get_PackageRequireLicenseAcceptance();
    [CompilerGeneratedAttribute]
public void set_PackageRequireLicenseAcceptance(bool value);
    [CompilerGeneratedAttribute]
public string get_PackageReleaseNotes();
    [CompilerGeneratedAttribute]
public void set_PackageReleaseNotes(string value);
    [CompilerGeneratedAttribute]
public String[] get_PackageTags();
    [CompilerGeneratedAttribute]
public void set_PackageTags(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_PackageTargetFallbacks();
    [CompilerGeneratedAttribute]
public void set_PackageTargetFallbacks(String[] value);
    [CompilerGeneratedAttribute]
public bool get_PreserveCompilationContext();
    [CompilerGeneratedAttribute]
public void set_PreserveCompilationContext(bool value);
    [CompilerGeneratedAttribute]
public string get_Product();
    [CompilerGeneratedAttribute]
public void set_Product(string value);
    [CompilerGeneratedAttribute]
public ICollection`1<ProjectReference> get_ProjectReferences();
    [CompilerGeneratedAttribute]
public void set_ProjectReferences(ICollection`1<ProjectReference> value);
    [CompilerGeneratedAttribute]
public bool get_PublicSign();
    [CompilerGeneratedAttribute]
public void set_PublicSign(bool value);
    [CompilerGeneratedAttribute]
public string get_RepositoryType();
    [CompilerGeneratedAttribute]
public void set_RepositoryType(string value);
    [CompilerGeneratedAttribute]
public string get_RepositoryUrl();
    [CompilerGeneratedAttribute]
public void set_RepositoryUrl(string value);
    [CompilerGeneratedAttribute]
public string get_RuntimeFrameworkVersion();
    [CompilerGeneratedAttribute]
public void set_RuntimeFrameworkVersion(string value);
    [CompilerGeneratedAttribute]
public String[] get_RuntimeIdentifiers();
    [CompilerGeneratedAttribute]
public void set_RuntimeIdentifiers(String[] value);
    [CompilerGeneratedAttribute]
public RuntimeOptions get_RuntimeOptions();
    [CompilerGeneratedAttribute]
public void set_RuntimeOptions(RuntimeOptions value);
    [CompilerGeneratedAttribute]
public string get_Sdk();
    [CompilerGeneratedAttribute]
public void set_Sdk(string value);
    [CompilerGeneratedAttribute]
public bool get_SignAssembly();
    [CompilerGeneratedAttribute]
public void set_SignAssembly(bool value);
    [CompilerGeneratedAttribute]
public ICollection`1<BuildTarget> get_Targets();
    [CompilerGeneratedAttribute]
public void set_Targets(ICollection`1<BuildTarget> value);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [CompilerGeneratedAttribute]
public String[] get_TargetFrameworks();
    [CompilerGeneratedAttribute]
public void set_TargetFrameworks(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_TreatSpecificWarningsAsErrors();
    [CompilerGeneratedAttribute]
public void set_TreatSpecificWarningsAsErrors(String[] value);
    [CompilerGeneratedAttribute]
public bool get_TreatWarningsAsErrors();
    [CompilerGeneratedAttribute]
public void set_TreatWarningsAsErrors(bool value);
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(string value);
    [CompilerGeneratedAttribute]
public string get_WarningLevel();
    [CompilerGeneratedAttribute]
public void set_WarningLevel(string value);
    [CompilerGeneratedAttribute]
public bool get_PackAsTool();
    [CompilerGeneratedAttribute]
public void set_PackAsTool(bool value);
}
internal class Cake.Incubator.Project.NetFrameworkProjectProperties : object {
    [CompilerGeneratedAttribute]
private string <Configuration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Platform>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProjectGuid>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <ProjectTypeGuids>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputType>k__BackingField;
    [CompilerGeneratedAttribute]
private DirectoryPath <OutputPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RootNameSpace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssemblyName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetFrameworkVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <TargetFrameworkVersions>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetFrameworkProfile>k__BackingField;
    public string Configuration { get; public set; }
    public string Platform { get; public set; }
    public string ProjectGuid { get; public set; }
    public String[] ProjectTypeGuids { get; public set; }
    public string OutputType { get; public set; }
    public DirectoryPath OutputPath { get; public set; }
    public string RootNameSpace { get; public set; }
    public string AssemblyName { get; public set; }
    [ObsoleteAttribute("Use TargetFrameworkVersions insead")]
public string TargetFrameworkVersion { get; public set; }
    public String[] TargetFrameworkVersions { get; public set; }
    public string TargetFrameworkProfile { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Configuration();
    [CompilerGeneratedAttribute]
public void set_Configuration(string value);
    [CompilerGeneratedAttribute]
public string get_Platform();
    [CompilerGeneratedAttribute]
public void set_Platform(string value);
    [CompilerGeneratedAttribute]
public string get_ProjectGuid();
    [CompilerGeneratedAttribute]
public void set_ProjectGuid(string value);
    [CompilerGeneratedAttribute]
public String[] get_ProjectTypeGuids();
    [CompilerGeneratedAttribute]
public void set_ProjectTypeGuids(String[] value);
    [CompilerGeneratedAttribute]
public string get_OutputType();
    [CompilerGeneratedAttribute]
public void set_OutputType(string value);
    [CompilerGeneratedAttribute]
public DirectoryPath get_OutputPath();
    [CompilerGeneratedAttribute]
public void set_OutputPath(DirectoryPath value);
    [CompilerGeneratedAttribute]
public string get_RootNameSpace();
    [CompilerGeneratedAttribute]
public void set_RootNameSpace(string value);
    [CompilerGeneratedAttribute]
public string get_AssemblyName();
    [CompilerGeneratedAttribute]
public void set_AssemblyName(string value);
    [CompilerGeneratedAttribute]
public string get_TargetFrameworkVersion();
    [CompilerGeneratedAttribute]
public void set_TargetFrameworkVersion(string value);
    [CompilerGeneratedAttribute]
public String[] get_TargetFrameworkVersions();
    [CompilerGeneratedAttribute]
public void set_TargetFrameworkVersions(String[] value);
    [CompilerGeneratedAttribute]
public string get_TargetFrameworkProfile();
    [CompilerGeneratedAttribute]
public void set_TargetFrameworkProfile(string value);
}
public class Cake.Incubator.Project.PackageReference : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetFramework>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <PrivateAssets>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <IncludeAssets>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <ExcludeAssets>k__BackingField;
    public string Name { get; public set; }
    public string Version { get; public set; }
    public string TargetFramework { get; public set; }
    public String[] PrivateAssets { get; public set; }
    public String[] IncludeAssets { get; public set; }
    public String[] ExcludeAssets { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(string value);
    [CompilerGeneratedAttribute]
public string get_TargetFramework();
    [CompilerGeneratedAttribute]
public void set_TargetFramework(string value);
    [CompilerGeneratedAttribute]
public String[] get_PrivateAssets();
    [CompilerGeneratedAttribute]
public void set_PrivateAssets(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_IncludeAssets();
    [CompilerGeneratedAttribute]
public void set_IncludeAssets(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_ExcludeAssets();
    [CompilerGeneratedAttribute]
public void set_ExcludeAssets(String[] value);
}
[ExtensionAttribute]
[CakeAliasCategoryAttribute("MSBuild Resource")]
public static class Cake.Incubator.Project.ProjectParserExtensions : object {
    private static RegexOptions parseOptions;
    private static Regex NetCoreTargetFrameworkRegex;
    private static Regex NetStandardTargetFrameworkRegex;
    private static Regex NetFrameworkTargetFrameworkRegex;
    private static Regex Net5PlusTargetFrameworkRegex;
    private static ProjectParserExtensions();
    [ExtensionAttribute]
public static bool IsLibrary(CustomProjectParserResult projectParserResult);
    [ExtensionAttribute]
public static bool IsGlobalTool(CustomProjectParserResult projectParserResult);
    [ExtensionAttribute]
public static bool IsDotNetCliTestProject(CustomProjectParserResult projectParserResult);
    [ExtensionAttribute]
public static bool IsFrameworkTestProject(CustomProjectParserResult projectParserResult);
    [ExtensionAttribute]
public static bool IsTestProject(CustomProjectParserResult projectParserResult);
    [ExtensionAttribute]
public static bool IsXUnitTestProject(CustomProjectParserResult projectParserResult);
    [ExtensionAttribute]
public static bool IsFsUnitTestProject(CustomProjectParserResult projectParserResult);
    [ExtensionAttribute]
public static bool IsNUnitTestProject(CustomProjectParserResult projectParserResult);
    [ExtensionAttribute]
public static bool IsExpectoTestProject(CustomProjectParserResult projectParserResult);
    [ExtensionAttribute]
public static bool IsFixieTestProject(CustomProjectParserResult projectParserResult);
    [ExtensionAttribute]
public static bool IsMSTestProject(CustomProjectParserResult projectParserResult);
    [ExtensionAttribute]
public static bool IsWebApplication(CustomProjectParserResult projectParserResult);
    [ExtensionAttribute]
public static string GetExtension(CustomProjectParserResult projectParserResult);
    [ExtensionAttribute]
[ObsoleteAttribute("Use GetAssemblyFilePaths instead for multi-targeting support")]
public static FilePath GetAssemblyFilePath(CustomProjectParserResult projectParserResult);
    [ExtensionAttribute]
public static FilePath[] GetAssemblyFilePaths(CustomProjectParserResult projectParserResult);
    [ExtensionAttribute]
public static bool IsType(CustomProjectParserResult projectParserResult, ProjectType projectType);
    [ExtensionAttribute]
public static bool HasPackage(CustomProjectParserResult projectParserResult, string packageName, string targetFramework);
    [ExtensionAttribute]
public static bool HasReference(CustomProjectParserResult projectParserResult, string referenceAssemblyName);
    [ExtensionAttribute]
public static PackageReference GetPackage(CustomProjectParserResult projectParserResult, string packageName, string targetFramework);
    [ExtensionAttribute]
public static bool HasDotNetCliToolReference(CustomProjectParserResult projectParserResult, string cliToolReferenceName);
    [ExtensionAttribute]
public static DotNetCliToolReference GetDotNetCliToolReference(CustomProjectParserResult projectParserResult, string cliToolReferenceName);
    [ExtensionAttribute]
public static ProjectAssemblyReference GetReference(CustomProjectParserResult projectParserResult, string referenceAssemblyName);
    [ExtensionAttribute]
public static string GetProjectProperty(CustomProjectParserResult projectParserResult, string propertyName);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static CustomProjectParserResult ParseProject(ICakeContext context, FilePath project, string configuration);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static CustomProjectParserResult ParseProject(ICakeContext context, FilePath project, string configuration, string platform);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Projects")]
public static IEnumerable`1<FilePath> GetOutputAssemblies(ICakeContext context, FilePath target, string configuration);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Projects")]
public static IEnumerable`1<FilePath> GetOutputAssemblies(ICakeContext context, FilePath target, string configuration, string platform);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Projects")]
public static IEnumerable`1<FilePath> GetSolutionAssemblies(ICakeContext context, FilePath target, string configuration);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Projects")]
public static IEnumerable`1<FilePath> GetSolutionAssemblies(ICakeContext context, FilePath target, string configuration, string platform);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Projects")]
[ObsoleteAttribute("Use GetProjectAssemblies instead which includes support for multi-targeting projects")]
public static FilePath GetProjectAssembly(ICakeContext context, FilePath target, string configuration);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Projects")]
public static FilePath[] GetProjectAssemblies(ICakeContext context, FilePath target, string configuration);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Projects")]
public static FilePath[] GetProjectAssemblies(ICakeContext context, FilePath target, string configuration, string platform);
    [ExtensionAttribute]
public static CustomProjectParserResult ParseProjectFile(IFile projectFile, string configuration, string platform);
    [ExtensionAttribute]
internal static CustomProjectParserResult ParsePreVS2017ProjectFile(XDocument document, IFile projectFile, string config, string platform);
    [ExtensionAttribute]
internal static CustomProjectParserResult ParseVS2017ProjectFile(XDocument document, IFile projectFile, string config, string platform);
    private static NetFrameworkProjectProperties GetPreVS2017ProjectProperties(XDocument document, string config, string platform, XNamespace ns, DirectoryPath rootPath);
    private static CustomProjectFile[] GetNetFrameworkMSBuildProjects(XDocument document, XNamespace ns, DirectoryPath rootPath);
    private static ProjectReference[] GetNetFrameworkProjectReferences(XDocument document, XNamespace ns, DirectoryPath rootPath);
    [ExtensionAttribute]
private static bool IsTestProjectOfType(CustomProjectParserResult projectParserResult, string packageId, string referenceId);
}
public class Cake.Incubator.Project.ProjectPath : object {
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    public string Path { get; public set; }
    public bool IsFile { get; }
    public ProjectPath(string path);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    public bool get_IsFile();
}
[FlagsAttribute]
public enum Cake.Incubator.Project.ProjectType : Enum {
    public int value__;
    public static ProjectType AspNetMvc1;
    public static ProjectType AspNetMvc2;
    public static ProjectType AspNetMvc3;
    public static ProjectType AspNetMvc4;
    public static ProjectType AspNetMvc5;
    public static ProjectType CPlusplus;
    public static ProjectType CSharp;
    public static ProjectType Database;
    public static ProjectType DatabaseOther;
    public static ProjectType DeploymentCab;
    public static ProjectType DeploymentMergeModule;
    public static ProjectType DeploymentSetup;
    public static ProjectType DeploymentSmartDeviceCab;
    public static ProjectType DistributedSystem;
    public static ProjectType DotNetCore;
    public static ProjectType Dynamics2012AxCsharpInAot;
    public static ProjectType FSharp;
    public static ProjectType JSharp;
    public static ProjectType Legacy2003SmartDeviceCSharp;
    public static ProjectType Legacy2003SmartDeviceVbNet;
    public static ProjectType ModelViewControllerV2Mvc2;
    public static ProjectType ModelViewControllerV3Mvc3;
    public static ProjectType ModelViewControllerV4Mvc4;
    public static ProjectType ModelViewControllerV5Mvc5;
    public static ProjectType MonoForAndroid;
    public static ProjectType Monotouch;
    public static ProjectType MonotouchBinding;
    public static ProjectType PortableClassLibrary;
    public static ProjectType ProjectFolders;
    public static ProjectType SharepointCSharp;
    public static ProjectType SharepointVbNet;
    public static ProjectType SharepointWorkflow;
    public static ProjectType Silverlight;
    public static ProjectType ServiceFabricApplication;
    public static ProjectType SmartDeviceCSharp;
    public static ProjectType SmartDeviceVbNet;
    public static ProjectType SolutionFolder;
    public static ProjectType Test;
    public static ProjectType VbNet;
    public static ProjectType VisualDatabaseTools;
    public static ProjectType VisualStudioToolsForApplicationsVsta;
    public static ProjectType VisualStudioToolsForOfficeVsto;
    public static ProjectType WebApplication;
    public static ProjectType WebSite;
    public static ProjectType WindowsCSharp;
    public static ProjectType WindowsCommunicationFoundation;
    public static ProjectType WindowsPhone881AppCSharp;
    public static ProjectType WindowsPhone881AppVbNet;
    public static ProjectType WindowsPhone881BlankHubWebviewApp;
    public static ProjectType WindowsPresentationFoundation;
    public static ProjectType WindowsStoreMetroAppsComponents;
    public static ProjectType WindowsVbNet;
    public static ProjectType WindowsVisualCPlusplus;
    public static ProjectType WorkflowCSharp;
    public static ProjectType WorkflowFoundation;
    public static ProjectType WorkflowVbNet;
    public static ProjectType XamarinAndroid;
    public static ProjectType XamarinIos;
    public static ProjectType XnaWindows;
    public static ProjectType XnaXbox;
    public static ProjectType XnaZune;
    public static ProjectType Unspecified;
}
public static class Cake.Incubator.Project.ProjectTypes : object {
    public static string AspNetMvc1;
    public static string AspNetMvc2;
    public static string AspNetMvc3;
    public static string AspNetMvc4;
    public static string AspNetMvc5;
    public static string CSharp;
    public static string CPlusplus;
    public static string Database;
    public static string DatabaseOther;
    public static string DeploymentCab;
    public static string DeploymentMergeModule;
    public static string DeploymentSetup;
    public static string DeploymentSmartDeviceCab;
    public static string DistributedSystem;
    public static string DotNetCore;
    public static string Dynamics2012AxCsharpInAot;
    public static string FSharp;
    public static string JSharp;
    public static string Legacy2003SmartDeviceCSharp;
    public static string Legacy2003SmartDeviceVbNet;
    public static string ModelViewControllerV2Mvc2;
    public static string ModelViewControllerV3Mvc3;
    public static string ModelViewControllerV4Mvc4;
    public static string ModelViewControllerV5Mvc5;
    public static string MonoForAndroid;
    public static string Monotouch;
    public static string MonotouchBinding;
    public static string PortableClassLibrary;
    public static string ProjectFolders;
    public static string ServiceFabricApplication;
    public static string SharepointCSharp;
    public static string SharepointVbNet;
    public static string SharepointWorkflow;
    public static string Silverlight;
    public static string SmartDeviceCSharp;
    public static string SmartDeviceVbNet;
    public static string SolutionFolder;
    public static string Test;
    public static string VbNet;
    public static string VisualDatabaseTools;
    public static string VisualStudioToolsForApplicationsVsta;
    public static string VisualStudioToolsForOfficeVsto;
    public static string WebApplication;
    public static string WebSite;
    public static string WindowsCSharp;
    public static string WindowsVbNet;
    public static string WindowsVisualCPlusplus;
    public static string WindowsCommunicationFoundation;
    public static string WindowsPhone881BlankHubWebviewApp;
    public static string WindowsPhone881AppCSharp;
    public static string WindowsPhone881AppVbNet;
    public static string WindowsPresentationFoundation;
    public static string WindowsStoreMetroAppsComponents;
    public static string WorkflowCSharp;
    public static string WorkflowVbNet;
    public static string WorkflowFoundation;
    public static string XamarinAndroid;
    public static string XamarinIos;
    public static string XnaWindows;
    public static string XnaXbox;
    public static string XnaZune;
}
internal static class Cake.Incubator.Project.ProjectXElement : object {
    internal static string Aliases;
    internal static string AllowUnsafeBlocks;
    internal static string AppendTargetFrameworkToOutputPath;
    internal static string ApplicationIcon;
    internal static string AssemblyName;
    internal static string AssemblyOriginatorKeyFile;
    internal static string AssemblyTitle;
    internal static string AssemblyVersion;
    internal static string Authors;
    internal static string BootstrapperPackage;
    internal static string BuildOutputTargetFolder;
    internal static string Company;
    internal static string Compile;
    internal static string ConcurrentGarbageCollection;
    internal static string Configuration;
    internal static string ContentTargetFolders;
    internal static string Copyright;
    internal static string DebugSymbols;
    internal static string DebugType;
    internal static string DefineConstants;
    internal static string DelaySign;
    internal static string Description;
    internal static string DocumentationFile;
    internal static string DotNetCliToolReference;
    internal static string ExcludeAssets;
    internal static string FileVersion;
    internal static string FusionName;
    internal static string GenerateDocumentationFile;
    internal static string GeneratePackageOnBuild;
    internal static string GenerateSerializationAssemblies;
    internal static string HintPath;
    internal static string Import;
    internal static string Include;
    internal static string IncludeAssets;
    internal static string IncludeBuildOutput;
    internal static string IncludeContentInPack;
    internal static string IncludeSource;
    internal static string IncludeSymbols;
    internal static string IsPackable;
    internal static string IsTool;
    internal static string ItemGroup;
    internal static string LangVersion;
    internal static string MinClientVersion;
    internal static string Name;
    internal static string NetStandardImplicitPackageVersion;
    internal static string NeutralLanguage;
    internal static string NoPackageAnalysis;
    internal static string NoWarn;
    internal static string NuspecBasePath;
    internal static string NuspecFile;
    internal static string NuspecProperties;
    internal static string Optimize;
    internal static string OutputPath;
    internal static string OutputType;
    internal static string PackAsTool;
    internal static string Package;
    internal static string PackageId;
    internal static string PackageIconUrl;
    internal static string PackageLicenseUrl;
    internal static string PackageOutputPath;
    internal static string PackageProjectUrl;
    internal static string PackageReference;
    internal static string PackageReleaseNotes;
    internal static string PackageRequireLicenseAcceptance;
    internal static string PackageTags;
    internal static string PackageTargetFallback;
    internal static string Platform;
    internal static string PreserveCompilationContext;
    internal static string Private;
    internal static string PrivateAssets;
    internal static string Product;
    internal static string Project;
    internal static string ProjectGuid;
    internal static string ProjectReference;
    internal static string ProjectTypeGuids;
    internal static string PropertyGroup;
    internal static string PublicSign;
    internal static string Reference;
    internal static string RepositoryType;
    internal static string RepositoryUrl;
    internal static string RetainVMGarbageCollection;
    internal static string RootNamespace;
    internal static string RuntimeFrameworkVersion;
    internal static string RuntimeIdentifiers;
    internal static string ServerGarbageCollection;
    internal static string Service;
    internal static string SpecificVersion;
    internal static string SignAssembly;
    internal static string Target;
    internal static string TargetFrameworkVersion;
    internal static string TargetFrameworkVersions;
    internal static string TargetFrameworkProfile;
    internal static string TargetFramework;
    internal static string TargetFrameworks;
    internal static string ThreadPoolMaxThreads;
    internal static string ThreadPoolMinThreads;
    internal static string Title;
    internal static string TreatSpecificWarningsAsErrors;
    internal static string TreatWarningsAsErrors;
    internal static string Version;
    internal static string VersionPrefix;
    internal static string VersionSuffix;
    internal static string WarningLevel;
}
public class Cake.Incubator.Project.RuntimeOptions : object {
    [CompilerGeneratedAttribute]
private bool <ServerGarbageCollection>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RetainVMGarbageCollection>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ThreadPoolMinThreads>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ThreadPoolMaxThreads>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ConcurrentGarbageCollection>k__BackingField;
    public bool ServerGarbageCollection { get; public set; }
    public bool RetainVMGarbageCollection { get; public set; }
    public int ThreadPoolMinThreads { get; public set; }
    public int ThreadPoolMaxThreads { get; public set; }
    public bool ConcurrentGarbageCollection { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_ServerGarbageCollection();
    [CompilerGeneratedAttribute]
public void set_ServerGarbageCollection(bool value);
    [CompilerGeneratedAttribute]
public bool get_RetainVMGarbageCollection();
    [CompilerGeneratedAttribute]
public void set_RetainVMGarbageCollection(bool value);
    [CompilerGeneratedAttribute]
public int get_ThreadPoolMinThreads();
    [CompilerGeneratedAttribute]
public void set_ThreadPoolMinThreads(int value);
    [CompilerGeneratedAttribute]
public int get_ThreadPoolMaxThreads();
    [CompilerGeneratedAttribute]
public void set_ThreadPoolMaxThreads(int value);
    [CompilerGeneratedAttribute]
public bool get_ConcurrentGarbageCollection();
    [CompilerGeneratedAttribute]
public void set_ConcurrentGarbageCollection(bool value);
}
[ExtensionAttribute]
[CakeNamespaceImportAttribute("Cake.Incubator.ProjectPathExtensions")]
public static class Cake.Incubator.ProjectPathExtensions.ProjectPathExtensions : object {
    [ExtensionAttribute]
public static ProjectPath CombineWithProjectPath(DirectoryPath basePath, string path);
}
[ExtensionAttribute]
[CakeNamespaceImportAttribute("Cake.Incubator.SolutionParserExtensions")]
public static class Cake.Incubator.SolutionParserExtensions.SolutionParserExtensions : object {
    internal static IReadOnlyDictionary`2<ProjectType, string> Types;
    private static SolutionParserExtensions();
    [ExtensionAttribute]
public static bool IsSolutionFolder(SolutionProject project);
    [ExtensionAttribute]
public static bool IsType(SolutionProject project, ProjectType projectType);
    [ExtensionAttribute]
public static IEnumerable`1<SolutionProject> GetProjects(SolutionParserResult projects);
    [ExtensionAttribute]
public static FilePath GetAssemblyFilePath(SolutionProject solutionProject, CustomProjectParserResult project);
}
[ExtensionAttribute]
[CakeNamespaceImportAttribute("Cake.Incubator.StringExtensions")]
public static class Cake.Incubator.StringExtensions.StringExtensions : object {
    private static Regex TargetframeworkCondition;
    private static string ConfigPlatformCondition;
    private static StringExtensions();
    [ExtensionAttribute]
public static bool EqualsIgnoreCase(string source, string value);
    [ExtensionAttribute]
public static bool StartsWithIgnoreCase(string source, string value);
    [ExtensionAttribute]
public static bool EndsWithIgnoreCase(string source, string value);
    [ExtensionAttribute]
internal static bool HasTargetFrameworkCondition(string condition);
    [ExtensionAttribute]
internal static bool HasConfigPlatformCondition(string condition, string config, string platform);
    [ExtensionAttribute]
internal static string GetConditionalConfigPlatform(string condition);
    [ExtensionAttribute]
internal static String[] SplitIgnoreEmpty(string value, Char[] separator);
    [ExtensionAttribute]
internal static string GetConditionTargetFramework(string condition);
    [ExtensionAttribute]
internal static FilePath GetAbsolutePath(string relativePath, DirectoryPath rootPath);
}
[ExtensionAttribute]
internal static class Cake.Incubator.XDocumentExtensions.XDocumentExtensions : object {
    [ExtensionAttribute]
internal static DirectoryPath[] GetOutputPaths(XDocument document, string config, String[] targetFrameworks, DirectoryPath rootDirectoryPath, string platform);
    [ExtensionAttribute]
internal static bool IsDotNetSdk(XDocument document);
    [ExtensionAttribute]
internal static string GetSdk(XDocument document);
    [ExtensionAttribute]
internal static string GetVersion(XDocument document);
    [ExtensionAttribute]
internal static string GetFirstElementValue(XDocument document, XName elementName, string config, string platform);
    [ExtensionAttribute]
internal static ICollection`1<DotNetCliToolReference> GetDotNetCliToolReferences(XDocument document);
    [ExtensionAttribute]
internal static XName GetXNameWithNamespace(XNamespace ns, string elementName);
    [ExtensionAttribute]
internal static ICollection`1<PackageReference> GetPackageReferences(XDocument document);
    [ExtensionAttribute]
internal static ICollection`1<ProjectAssemblyReference> GetAssemblyReferences(XDocument document, DirectoryPath rootPath);
    [ExtensionAttribute]
internal static ICollection`1<ProjectReference> GetProjectReferences(XDocument document, DirectoryPath rootPath);
    [ExtensionAttribute]
internal static ICollection`1<BuildTarget> GetTargets(XDocument document);
    [ExtensionAttribute]
internal static NameValueCollection GetNuspecProps(XDocument document);
}
[ExtensionAttribute]
internal static class Cake.Incubator.XElementExtensions.XElementExtensions : object {
    [ExtensionAttribute]
internal static string GetAttributeValue(XElement element, string attributeName);
    [ExtensionAttribute]
internal static string GetFirstElementValue(XElement element, XName elementName, string config, string platform);
    [ExtensionAttribute]
internal static bool WithConfigCondition(XElement element, string config, string platform);
    [ExtensionAttribute]
internal static IEnumerable`1<XElement> GetPropertyGroups(XElement project, XNamespace ns);
    [ExtensionAttribute]
internal static string GetPlatform(XElement propertyGroup, XNamespace ns);
    [ExtensionAttribute]
internal static string GetTargetFrameworkProfile(XElement propertyGroup, XNamespace ns);
    [ExtensionAttribute]
internal static string GetTargetFrameworkVersion(XElement propertyGroup, XNamespace ns);
    [ExtensionAttribute]
internal static string GetTargetFrameworkVersions(XElement propertyGroup, XNamespace ns);
    [ExtensionAttribute]
internal static string GetAssemblyName(XElement propertyGroup, XNamespace ns);
    [ExtensionAttribute]
internal static string GetRootNamespace(XElement propertyGroup, XNamespace ns);
    [ExtensionAttribute]
internal static DirectoryPath GetOutputPath(IEnumerable`1<XElement> configPropertyGroups, XNamespace ns, DirectoryPath rootPath);
    [ExtensionAttribute]
internal static string GetOutputType(XElement propertyGroup, XNamespace ns);
    [ExtensionAttribute]
internal static string GetProjectType(XElement propertyGroup, XNamespace ns);
    [ExtensionAttribute]
internal static string GetProjectGuid(XElement propertyGroup, XNamespace ns);
    [ExtensionAttribute]
internal static XAttribute Attribute(XElement element, XName name, bool ignoreCase);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
