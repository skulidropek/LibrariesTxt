internal static class Cake.Npm.AddinInformation : object {
    private static string InformationalVersion;
    private static string AssemblyVersion;
    private static string AssemblyName;
    private static AddinInformation();
    public static void LogVersionInformation(ICakeLog log);
}
public enum Cake.Npm.AddUser.AuthType : Enum {
    public int value__;
    public static AuthType Default;
    public static AuthType Legacy;
    public static AuthType SSO;
    public static AuthType Saml;
    public static AuthType OAuth;
}
public class Cake.Npm.AddUser.NpmAddUser : NpmTool`1<NpmAddUserSettings> {
    public NpmAddUser(IFileSystem fileSystem, ICakeEnvironment environment, IProcessRunner processRunner, IToolLocator tools, ICakeLog log);
    public void AddUser(NpmAddUserSettings settings);
}
public class Cake.Npm.AddUser.NpmAddUserSettings : NpmSettings {
    [CompilerGeneratedAttribute]
private Uri <Registry>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Scope>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AlwaysAuth>k__BackingField;
    [CompilerGeneratedAttribute]
private AuthType <AuthType>k__BackingField;
    public Uri Registry { get; public set; }
    public string Scope { get; public set; }
    public bool AlwaysAuth { get; public set; }
    public AuthType AuthType { get; public set; }
    [CompilerGeneratedAttribute]
public Uri get_Registry();
    [CompilerGeneratedAttribute]
public void set_Registry(Uri value);
    [CompilerGeneratedAttribute]
public string get_Scope();
    [CompilerGeneratedAttribute]
public void set_Scope(string value);
    [CompilerGeneratedAttribute]
public bool get_AlwaysAuth();
    [CompilerGeneratedAttribute]
public void set_AlwaysAuth(bool value);
    [CompilerGeneratedAttribute]
public AuthType get_AuthType();
    [CompilerGeneratedAttribute]
public void set_AuthType(AuthType value);
    protected virtual void EvaluateCore(ProcessArgumentBuilder args);
}
[ExtensionAttribute]
public static class Cake.Npm.AddUser.NpmAddUserSettingsExtensions : object {
    [ExtensionAttribute]
public static NpmAddUserSettings ForRegistry(NpmAddUserSettings settings, Uri registry);
    [ExtensionAttribute]
public static NpmAddUserSettings ForScope(NpmAddUserSettings settings, string scope);
    [ExtensionAttribute]
public static NpmAddUserSettings AlwaysAuthenticate(NpmAddUserSettings settings);
    [ExtensionAttribute]
public static NpmAddUserSettings UsingAuthentication(NpmAddUserSettings settings, AuthType authType);
}
[CompilerGeneratedAttribute]
internal class Cake.Npm.BumpVersion.NamespaceDoc : object {
}
public class Cake.Npm.BumpVersion.NpmBumpVersionSettings : NpmSettings {
    [CompilerGeneratedAttribute]
private bool <Force>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CommitMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <GitTagVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <AllowSameVersion>k__BackingField;
    public bool Force { get; public set; }
    public string CommitMessage { get; public set; }
    public string Version { get; public set; }
    public Nullable`1<bool> GitTagVersion { get; public set; }
    public Nullable`1<bool> AllowSameVersion { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Force();
    [CompilerGeneratedAttribute]
public void set_Force(bool value);
    [CompilerGeneratedAttribute]
public string get_CommitMessage();
    [CompilerGeneratedAttribute]
public void set_CommitMessage(string value);
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_GitTagVersion();
    [CompilerGeneratedAttribute]
public void set_GitTagVersion(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_AllowSameVersion();
    [CompilerGeneratedAttribute]
public void set_AllowSameVersion(Nullable`1<bool> value);
    protected virtual void EvaluateCore(ProcessArgumentBuilder args);
}
[ExtensionAttribute]
public static class Cake.Npm.BumpVersion.NpmBumpVersionSettingsExtensions : object {
    [ExtensionAttribute]
public static NpmBumpVersionSettings WithForce(NpmBumpVersionSettings settings, bool force);
    [ExtensionAttribute]
public static NpmBumpVersionSettings WithCommitMessage(NpmBumpVersionSettings settings, string message);
    [ExtensionAttribute]
public static NpmBumpVersionSettings WithVersion(NpmBumpVersionSettings settings, string version);
}
public class Cake.Npm.BumpVersion.NpmBumpVersionTool : NpmTool`1<NpmBumpVersionSettings> {
    public NpmBumpVersionTool(IFileSystem fileSystem, ICakeEnvironment environment, IProcessRunner processRunner, IToolLocator tools, ICakeLog log);
    public void BumpVersion(NpmBumpVersionSettings settings);
}
[CompilerGeneratedAttribute]
internal class Cake.Npm.Ci.NamespaceDoc : object {
}
public class Cake.Npm.Ci.NpmCiSettings : NpmSettings {
    [CompilerGeneratedAttribute]
private bool <Production>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <Registry>k__BackingField;
    public bool Production { get; public set; }
    public Uri Registry { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Production();
    [CompilerGeneratedAttribute]
public void set_Production(bool value);
    [CompilerGeneratedAttribute]
public Uri get_Registry();
    [CompilerGeneratedAttribute]
public void set_Registry(Uri value);
    protected virtual void EvaluateCore(ProcessArgumentBuilder args);
}
[ExtensionAttribute]
public static class Cake.Npm.Ci.NpmCiSettingsExtensions : object {
    [ExtensionAttribute]
public static NpmCiSettings ForProduction(NpmCiSettings settings);
    [ExtensionAttribute]
public static NpmCiSettings FromRegistry(NpmCiSettings settings, Uri registry);
}
public class Cake.Npm.Ci.NpmCiTool : NpmTool`1<NpmCiSettings> {
    public NpmCiTool(IFileSystem fileSystem, ICakeEnvironment environment, IProcessRunner processRunner, IToolLocator tools, ICakeLog log);
    public void Install(NpmCiSettings settings);
}
[CompilerGeneratedAttribute]
internal class Cake.Npm.Install.NamespaceDoc : object {
}
public class Cake.Npm.Install.NpmInstaller : NpmTool`1<NpmInstallSettings> {
    public NpmInstaller(IFileSystem fileSystem, ICakeEnvironment environment, IProcessRunner processRunner, IToolLocator tools, ICakeLog log);
    public void Install(NpmInstallSettings settings);
}
public class Cake.Npm.Install.NpmInstallSettings : NpmSettings {
    private List`1<string> _packages;
    [CompilerGeneratedAttribute]
private bool <Force>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Global>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Production>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoOptional>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <Registry>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PreferOffline>k__BackingField;
    public bool Force { get; public set; }
    public bool Global { get; public set; }
    public bool Production { get; public set; }
    public bool NoOptional { get; public set; }
    public IList`1<string> Packages { get; }
    public Uri Registry { get; public set; }
    public bool PreferOffline { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Force();
    [CompilerGeneratedAttribute]
public void set_Force(bool value);
    [CompilerGeneratedAttribute]
public bool get_Global();
    [CompilerGeneratedAttribute]
public void set_Global(bool value);
    [CompilerGeneratedAttribute]
public bool get_Production();
    [CompilerGeneratedAttribute]
public void set_Production(bool value);
    [CompilerGeneratedAttribute]
public bool get_NoOptional();
    [CompilerGeneratedAttribute]
public void set_NoOptional(bool value);
    public IList`1<string> get_Packages();
    [CompilerGeneratedAttribute]
public Uri get_Registry();
    [CompilerGeneratedAttribute]
public void set_Registry(Uri value);
    [CompilerGeneratedAttribute]
public bool get_PreferOffline();
    [CompilerGeneratedAttribute]
public void set_PreferOffline(bool value);
    protected virtual void EvaluateCore(ProcessArgumentBuilder args);
}
[ExtensionAttribute]
public static class Cake.Npm.Install.NpmInstallSettingsExtensions : object {
    [ExtensionAttribute]
public static NpmInstallSettings WithForce(NpmInstallSettings settings);
    [ExtensionAttribute]
public static NpmInstallSettings WithoutForce(NpmInstallSettings settings);
    [ExtensionAttribute]
public static NpmInstallSettings WithForce(NpmInstallSettings settings, bool value);
    [ExtensionAttribute]
public static NpmInstallSettings InstallGlobally(NpmInstallSettings settings);
    [ExtensionAttribute]
public static NpmInstallSettings InstallLocally(NpmInstallSettings settings);
    [ExtensionAttribute]
public static NpmInstallSettings ForProduction(NpmInstallSettings settings);
    [ExtensionAttribute]
public static NpmInstallSettings WithoutOptionalDependencies(NpmInstallSettings settings);
    [ExtensionAttribute]
public static NpmInstallSettings WithOptionalDependencies(NpmInstallSettings settings);
    [ExtensionAttribute]
public static NpmInstallSettings WithNoOptional(NpmInstallSettings settings, bool value);
    [ExtensionAttribute]
public static NpmInstallSettings AddPackage(NpmInstallSettings settings, Uri url);
    [ExtensionAttribute]
public static NpmInstallSettings AddPackage(NpmInstallSettings settings, string packageName);
    [ExtensionAttribute]
public static NpmInstallSettings AddPackage(NpmInstallSettings settings, string packageName, string versionOrTag);
    [ExtensionAttribute]
public static NpmInstallSettings AddScopedPackage(NpmInstallSettings settings, string packageName, string scope);
    [ExtensionAttribute]
public static NpmInstallSettings AddPackage(NpmInstallSettings settings, string packageName, string scope, string versionOrTag);
    [ExtensionAttribute]
public static NpmInstallSettings FromRegistry(NpmInstallSettings settings, Uri registry);
}
[CompilerGeneratedAttribute]
internal class Cake.Npm.NamespaceDoc : object {
}
[ExtensionAttribute]
[CakeAliasCategoryAttribute("Npm")]
[CakeNamespaceImportAttribute("Cake.Npm.AddUser")]
public static class Cake.Npm.NpmAddUserAliases : object {
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("AddUser")]
public static void NpmAddUser(ICakeContext context, Action`1<NpmAddUserSettings> configurator);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("AddUser")]
public static void NpmAddUser(ICakeContext context, NpmAddUserSettings settings);
}
[ExtensionAttribute]
[CakeAliasCategoryAttribute("Npm")]
[CakeNamespaceImportAttribute("Cake.Npm.BumpVersion")]
public static class Cake.Npm.NpmBumpVersionAliases : object {
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("BumpVersion")]
public static void NpmBumpVersion(ICakeContext context);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("BumpVersion")]
public static void NpmBumpVersion(ICakeContext context, Action`1<NpmBumpVersionSettings> configurator);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("BumpVersion")]
public static void NpmBumpVersion(ICakeContext context, NpmBumpVersionSettings settings);
}
[ExtensionAttribute]
[CakeAliasCategoryAttribute("Npm")]
[CakeNamespaceImportAttribute("Cake.Npm.Ci")]
public static class Cake.Npm.NpmCiAliases : object {
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Ci")]
public static void NpmCi(ICakeContext context);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Ci")]
public static void NpmCi(ICakeContext context, Action`1<NpmCiSettings> configurator);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Ci")]
public static void NpmCi(ICakeContext context, NpmCiSettings settings);
}
[ExtensionAttribute]
[CakeAliasCategoryAttribute("Npm")]
[CakeNamespaceImportAttribute("Cake.Npm.Install")]
public static class Cake.Npm.NpmInstallAliases : object {
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Install")]
public static void NpmInstall(ICakeContext context);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Install")]
public static void NpmInstall(ICakeContext context, String[] packages);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Install")]
public static void NpmInstall(ICakeContext context, Action`1<NpmInstallSettings> configurator);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Install")]
public static void NpmInstall(ICakeContext context, NpmInstallSettings settings);
}
public enum Cake.Npm.NpmLogLevel : Enum {
    public int value__;
    public static NpmLogLevel Default;
    public static NpmLogLevel Silent;
    public static NpmLogLevel Warn;
    public static NpmLogLevel Info;
    public static NpmLogLevel Error;
    public static NpmLogLevel Verbose;
    public static NpmLogLevel Silly;
    public static NpmLogLevel Http;
}
[ExtensionAttribute]
[CakeAliasCategoryAttribute("Npm")]
[CakeNamespaceImportAttribute("Cake.Npm.Pack")]
public static class Cake.Npm.NpmPackAliases : object {
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Pack")]
public static IEnumerable`1<FilePath> NpmPack(ICakeContext context);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Pack")]
public static IEnumerable`1<FilePath> NpmPack(ICakeContext context, string source);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Pack")]
public static IEnumerable`1<FilePath> NpmPack(ICakeContext context, Action`1<NpmPackSettings> configurator);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Pack")]
public static IEnumerable`1<FilePath> NpmPack(ICakeContext context, NpmPackSettings settings);
}
[ExtensionAttribute]
[CakeAliasCategoryAttribute("Npm")]
[CakeNamespaceImportAttribute("Cake.Npm.Prune")]
public static class Cake.Npm.NpmPruneAliases : object {
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Prune")]
public static void NpmPrune(ICakeContext context);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Prune")]
public static void NpmPrune(ICakeContext context, Action`1<NpmPruneSettings> configurator);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Prune")]
public static void NpmPrune(ICakeContext context, NpmPruneSettings settings);
}
[ExtensionAttribute]
[CakeAliasCategoryAttribute("Npm")]
[CakeNamespaceImportAttribute("Cake.Npm.Publish")]
public static class Cake.Npm.NpmPublishAliases : object {
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Publish")]
public static void NpmPublish(ICakeContext context);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Publish")]
public static void NpmPublish(ICakeContext context, string source);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Publish")]
public static void NpmPublish(ICakeContext context, Action`1<NpmPublishSettings> configurator);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Publish")]
public static void NpmPublish(ICakeContext context, NpmPublishSettings settings);
}
[ExtensionAttribute]
[CakeAliasCategoryAttribute("Npm")]
[CakeNamespaceImportAttribute("Cake.Npm.Rebuild")]
public static class Cake.Npm.NpmRebuildAliases : object {
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Rebuild")]
public static void NpmRebuild(ICakeContext context);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Rebuild")]
public static void NpmRebuild(ICakeContext context, String[] packages);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Rebuild")]
public static void NpmRebuild(ICakeContext context, Action`1<NpmRebuildSettings> configurator);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Rebuild")]
public static void NpmRebuild(ICakeContext context, NpmRebuildSettings settings);
}
[ExtensionAttribute]
[CakeAliasCategoryAttribute("Npm")]
[CakeNamespaceImportAttribute("Cake.Npm.RunScript")]
public static class Cake.Npm.NpmRunScriptAliases : object {
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Run-Script")]
public static void NpmRunScript(ICakeContext context, string scriptName);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Run-Script")]
public static void NpmRunScript(ICakeContext context, string scriptName, IEnumerable`1<string> arguments);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Run-Script")]
public static void NpmRunScript(ICakeContext context, string scriptName, Action`1<NpmRunScriptSettings> configurator);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Run-Script")]
public static void NpmRunScript(ICakeContext context, NpmRunScriptSettings settings);
}
[ExtensionAttribute]
[CakeAliasCategoryAttribute("Npm")]
[CakeNamespaceImportAttribute("Cake.Npm.Set")]
public static class Cake.Npm.NpmSetAliases : object {
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Set")]
public static void NpmSet(ICakeContext context, string key, string value, bool global);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Set")]
public static void NpmSet(ICakeContext context, Action`1<NpmSetSettings> configurator);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Set")]
public static void NpmSet(ICakeContext context, NpmSetSettings settings);
}
public abstract class Cake.Npm.NpmSettings : ToolSettings {
    [CompilerGeneratedAttribute]
private NpmLogLevel <LogLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RedirectStandardError>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<string> <StandardErrorAction>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RedirectStandardOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<string> <StandardOutputAction>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Verbosity> <CakeVerbosityLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Command>k__BackingField;
    public NpmLogLevel LogLevel { get; public set; }
    public bool RedirectStandardError { get; public set; }
    public Action`1<string> StandardErrorAction { get; public set; }
    public bool RedirectStandardOutput { get; public set; }
    public Action`1<string> StandardOutputAction { get; public set; }
    internal Nullable`1<Verbosity> CakeVerbosityLevel { get; internal set; }
    protected string Command { get; private set; }
    protected NpmSettings(string command);
    [CompilerGeneratedAttribute]
public NpmLogLevel get_LogLevel();
    [CompilerGeneratedAttribute]
public void set_LogLevel(NpmLogLevel value);
    [CompilerGeneratedAttribute]
public bool get_RedirectStandardError();
    [CompilerGeneratedAttribute]
public void set_RedirectStandardError(bool value);
    [CompilerGeneratedAttribute]
public Action`1<string> get_StandardErrorAction();
    [CompilerGeneratedAttribute]
public void set_StandardErrorAction(Action`1<string> value);
    [CompilerGeneratedAttribute]
public bool get_RedirectStandardOutput();
    [CompilerGeneratedAttribute]
public void set_RedirectStandardOutput(bool value);
    [CompilerGeneratedAttribute]
public Action`1<string> get_StandardOutputAction();
    [CompilerGeneratedAttribute]
public void set_StandardOutputAction(Action`1<string> value);
    [CompilerGeneratedAttribute]
internal Nullable`1<Verbosity> get_CakeVerbosityLevel();
    [CompilerGeneratedAttribute]
internal void set_CakeVerbosityLevel(Nullable`1<Verbosity> value);
    [CompilerGeneratedAttribute]
protected string get_Command();
    [CompilerGeneratedAttribute]
private void set_Command(string value);
    internal void Evaluate(ProcessArgumentBuilder args);
    private void AppendNpmSettings(ProcessArgumentBuilder args);
    protected virtual void EvaluateCore(ProcessArgumentBuilder args);
    private void AppendLogLevel(ProcessArgumentBuilder args, NpmLogLevel logLevel);
    private static NpmLogLevel CakeToNpmLogLevelConverter(Verbosity cakeVerbosityLevel);
}
[ExtensionAttribute]
public static class Cake.Npm.NpmSettingsExtensions : object {
    [ExtensionAttribute]
public static NpmSettings WithLogLevel(NpmSettings settings, NpmLogLevel logLevel);
    [ExtensionAttribute]
public static NpmSettings FromPath(NpmSettings settings, DirectoryPath path);
    [ExtensionAttribute]
public static NpmSettings SetRedirectedStandardErrorHandler(NpmSettings settings, Action`1<string> standardErrorAction);
    [ExtensionAttribute]
public static NpmSettings SetRedirectedStandardOutputHandler(NpmSettings settings, Action`1<string> standardOutputAction);
}
public abstract class Cake.Npm.NpmTool`1 : Tool`1<TSettings> {
    private ICakeLog _log;
    public ICakeLog CakeLog { get; }
    protected NpmTool`1(IFileSystem fileSystem, ICakeEnvironment environment, IProcessRunner processRunner, IToolLocator tools, ICakeLog log);
    public ICakeLog get_CakeLog();
    protected sealed virtual string GetToolName();
    protected sealed virtual IEnumerable`1<string> GetToolExecutableNames();
    protected void RunCore(TSettings settings);
    protected void RunCore(TSettings settings, ProcessSettings processSettings, Action`1<IProcess> postAction);
    protected ProcessArgumentBuilder GetArguments(TSettings settings);
}
[ExtensionAttribute]
[CakeAliasCategoryAttribute("Npm")]
[CakeNamespaceImportAttribute("Cake.Npm.Update")]
public static class Cake.Npm.NpmUpdateAliases : object {
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Update")]
public static void NpmUpdate(ICakeContext context);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Update")]
public static void NpmUpdate(ICakeContext context, Action`1<NpmUpdateSettings> configurator);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Update")]
public static void NpmUpdate(ICakeContext context, NpmUpdateSettings settings);
}
[ExtensionAttribute]
[CakeAliasCategoryAttribute("Npm")]
[CakeNamespaceImportAttribute("Cake.Npm.Version")]
public static class Cake.Npm.NpmVersionAliases : object {
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Version")]
public static string NpmVersion(ICakeContext context);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Version")]
public static string NpmVersion(ICakeContext context, Action`1<NpmVersionSettings> configurator);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Version")]
public static string NpmVersion(ICakeContext context, NpmVersionSettings settings);
}
[ExtensionAttribute]
[CakeAliasCategoryAttribute("Npm")]
[CakeNamespaceImportAttribute("Cake.Npm.ViewVersion")]
public static class Cake.Npm.NpmViewVersionAliases : object {
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Version")]
public static string NpmViewVersion(ICakeContext context, string package);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Version")]
public static string NpmViewVersion(ICakeContext context, Action`1<NpmViewVersionSettings> configurator);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Version")]
public static string NpmViewVersion(ICakeContext context, NpmViewVersionSettings settings);
}
[CompilerGeneratedAttribute]
internal class Cake.Npm.Pack.NamespaceDoc : object {
}
public class Cake.Npm.Pack.NpmPacker : NpmTool`1<NpmPackSettings> {
    public NpmPacker(IFileSystem fileSystem, ICakeEnvironment environment, IProcessRunner processRunner, IToolLocator tools, ICakeLog log);
    public IEnumerable`1<FilePath> Pack(NpmPackSettings settings);
}
public class Cake.Npm.Pack.NpmPackSettings : NpmSettings {
    [CompilerGeneratedAttribute]
private string <Source>k__BackingField;
    public string Source { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Source();
    [CompilerGeneratedAttribute]
public void set_Source(string value);
    protected virtual void EvaluateCore(ProcessArgumentBuilder args);
}
[ExtensionAttribute]
public static class Cake.Npm.Pack.NpmPackSettingsExtensions : object {
    [ExtensionAttribute]
public static NpmPackSettings FromSource(NpmPackSettings settings, string source);
}
public class Cake.Npm.Prune.NpmPruneRunner : NpmTool`1<NpmPruneSettings> {
    public NpmPruneRunner(IFileSystem fileSystem, ICakeEnvironment environment, IProcessRunner processRunner, IToolLocator tools, ICakeLog log);
    public void Prune(NpmPruneSettings settings);
}
public class Cake.Npm.Prune.NpmPruneSettings : NpmSettings {
    private List`1<string> _packages;
    [CompilerGeneratedAttribute]
private bool <Production>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DryRun>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Json>k__BackingField;
    public bool Production { get; public set; }
    public IList`1<string> Packages { get; }
    public bool DryRun { get; public set; }
    public bool Json { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Production();
    [CompilerGeneratedAttribute]
public void set_Production(bool value);
    public IList`1<string> get_Packages();
    [CompilerGeneratedAttribute]
public bool get_DryRun();
    [CompilerGeneratedAttribute]
public void set_DryRun(bool value);
    [CompilerGeneratedAttribute]
public bool get_Json();
    [CompilerGeneratedAttribute]
public void set_Json(bool value);
    protected virtual void EvaluateCore(ProcessArgumentBuilder args);
}
[ExtensionAttribute]
public static class Cake.Npm.Prune.NpmPruneSettingsExtensions : object {
    [ExtensionAttribute]
public static NpmPruneSettings ForProduction(NpmPruneSettings settings);
    [ExtensionAttribute]
public static NpmPruneSettings ForProduction(NpmPruneSettings settings, bool production);
    [ExtensionAttribute]
public static NpmPruneSettings AddPackage(NpmPruneSettings settings, string packageName);
    [ExtensionAttribute]
public static NpmPruneSettings AddPackage(NpmPruneSettings settings, string packageName, string scope);
    [ExtensionAttribute]
public static NpmPruneSettings DryRun(NpmPruneSettings settings);
    [ExtensionAttribute]
public static NpmPruneSettings DryRun(NpmPruneSettings settings, bool dryRun);
    [ExtensionAttribute]
public static NpmPruneSettings Json(NpmPruneSettings settings);
    [ExtensionAttribute]
public static NpmPruneSettings Json(NpmPruneSettings settings, bool json);
}
[CompilerGeneratedAttribute]
internal class Cake.Npm.Publish.NamespaceDoc : object {
}
public enum Cake.Npm.Publish.NpmPublishAccess : Enum {
    public int value__;
    public static NpmPublishAccess Default;
    public static NpmPublishAccess Public;
    public static NpmPublishAccess Restricted;
}
public class Cake.Npm.Publish.NpmPublisher : NpmTool`1<NpmPublishSettings> {
    public NpmPublisher(IFileSystem fileSystem, ICakeEnvironment environment, IProcessRunner processRunner, IToolLocator tools, ICakeLog log);
    public void Publish(NpmPublishSettings settings);
}
public class Cake.Npm.Publish.NpmPublishSettings : NpmSettings {
    [CompilerGeneratedAttribute]
private string <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Tag>k__BackingField;
    [CompilerGeneratedAttribute]
private NpmPublishAccess <Access>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <Registry>k__BackingField;
    public string Source { get; public set; }
    public string Tag { get; public set; }
    public NpmPublishAccess Access { get; public set; }
    public Uri Registry { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Source();
    [CompilerGeneratedAttribute]
public void set_Source(string value);
    [CompilerGeneratedAttribute]
public string get_Tag();
    [CompilerGeneratedAttribute]
public void set_Tag(string value);
    [CompilerGeneratedAttribute]
public NpmPublishAccess get_Access();
    [CompilerGeneratedAttribute]
public void set_Access(NpmPublishAccess value);
    [CompilerGeneratedAttribute]
public Uri get_Registry();
    [CompilerGeneratedAttribute]
public void set_Registry(Uri value);
    protected virtual void EvaluateCore(ProcessArgumentBuilder args);
}
[ExtensionAttribute]
public static class Cake.Npm.Publish.NpmPublishSettingsExtensions : object {
    [ExtensionAttribute]
public static NpmPublishSettings FromSource(NpmPublishSettings settings, string source);
    [ExtensionAttribute]
public static NpmPublishSettings WithTag(NpmPublishSettings settings, string tag);
    [ExtensionAttribute]
public static NpmPublishSettings WithAccess(NpmPublishSettings settings, NpmPublishAccess access);
    [ExtensionAttribute]
public static NpmPublishSettings ToRegistry(NpmPublishSettings settings, Uri registry);
}
public class Cake.Npm.Rebuild.NpmRebuilder : NpmTool`1<NpmRebuildSettings> {
    public NpmRebuilder(IFileSystem fileSystem, ICakeEnvironment environment, IProcessRunner processRunner, IToolLocator tools, ICakeLog log);
    public void Rebuild(NpmRebuildSettings settings);
}
public class Cake.Npm.Rebuild.NpmRebuildSettings : NpmSettings {
    private List`1<string> _packages;
    public IList`1<string> Packages { get; }
    public IList`1<string> get_Packages();
    protected virtual void EvaluateCore(ProcessArgumentBuilder args);
}
[ExtensionAttribute]
public static class Cake.Npm.Rebuild.NpmRebuildSettingsExtensions : object {
    [ExtensionAttribute]
public static NpmRebuildSettings AddPackage(NpmRebuildSettings settings, string packageName);
    [ExtensionAttribute]
public static NpmRebuildSettings AddScopedPackage(NpmRebuildSettings settings, string packageName, string scope);
}
[CompilerGeneratedAttribute]
internal class Cake.Npm.RunScript.NamespaceDoc : object {
}
public class Cake.Npm.RunScript.NpmRunScriptSettings : NpmSettings {
    private List`1<string> _arguments;
    [CompilerGeneratedAttribute]
private string <ScriptName>k__BackingField;
    public string ScriptName { get; public set; }
    public IList`1<string> Arguments { get; }
    [CompilerGeneratedAttribute]
public string get_ScriptName();
    [CompilerGeneratedAttribute]
public void set_ScriptName(string value);
    public IList`1<string> get_Arguments();
    protected virtual void EvaluateCore(ProcessArgumentBuilder args);
}
[ExtensionAttribute]
public static class Cake.Npm.RunScript.NpmRunScriptSettingsExtensions : object {
    [ExtensionAttribute]
public static NpmRunScriptSettings WithArguments(NpmRunScriptSettings settings, string arguments);
}
public class Cake.Npm.RunScript.NpmScriptRunner : NpmTool`1<NpmRunScriptSettings> {
    public NpmScriptRunner(IFileSystem fileSystem, ICakeEnvironment environment, IProcessRunner processRunner, IToolLocator tools, ICakeLog log);
    public void RunScript(NpmRunScriptSettings settings);
}
[CompilerGeneratedAttribute]
internal class Cake.Npm.Set.NamespaceDoc : object {
}
public class Cake.Npm.Set.NpmSetSettings : NpmSettings {
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Global>k__BackingField;
    public string Key { get; public set; }
    public string Value { get; public set; }
    public bool Global { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
public void set_Key(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
    [CompilerGeneratedAttribute]
public bool get_Global();
    [CompilerGeneratedAttribute]
public void set_Global(bool value);
    protected virtual void EvaluateCore(ProcessArgumentBuilder args);
}
[ExtensionAttribute]
public static class Cake.Npm.Set.NpmSetSettingsExtensions : object {
    [ExtensionAttribute]
public static NpmSetSettings ForKey(NpmSetSettings settings, string key);
    [ExtensionAttribute]
public static NpmSetSettings WithValue(NpmSetSettings settings, string value);
}
public class Cake.Npm.Set.NpmSetTool : NpmTool`1<NpmSetSettings> {
    public NpmSetTool(IFileSystem fileSystem, ICakeEnvironment environment, IProcessRunner processRunner, IToolLocator tools, ICakeLog log);
    public void Set(NpmSetSettings settings);
}
[CompilerGeneratedAttribute]
internal class Cake.Npm.Update.NamespaceDoc : object {
}
public class Cake.Npm.Update.NpmUpdateSettings : NpmSettings {
    [CompilerGeneratedAttribute]
private bool <Global>k__BackingField;
    public bool Global { get; internal set; }
    [CompilerGeneratedAttribute]
public bool get_Global();
    [CompilerGeneratedAttribute]
internal void set_Global(bool value);
    protected virtual void EvaluateCore(ProcessArgumentBuilder args);
}
[ExtensionAttribute]
public static class Cake.Npm.Update.NpmUpdateSettingsExtensions : object {
    [ExtensionAttribute]
public static NpmUpdateSettings UpdateGlobalPackages(NpmUpdateSettings settings);
}
public class Cake.Npm.Update.NpmUpdateTool : NpmTool`1<NpmUpdateSettings> {
    public NpmUpdateTool(IFileSystem fileSystem, ICakeEnvironment environment, IProcessRunner processRunner, IToolLocator tools, ICakeLog log);
    public void Update(NpmUpdateSettings settings);
}
[CompilerGeneratedAttribute]
internal class Cake.Npm.Version.NamespaceDoc : object {
}
public class Cake.Npm.Version.NpmVersionSettings : NpmSettings {
}
public class Cake.Npm.Version.NpmVersionTool : NpmTool`1<NpmVersionSettings> {
    public NpmVersionTool(IFileSystem fileSystem, ICakeEnvironment environment, IProcessRunner processRunner, IToolLocator tools, ICakeLog log);
    public string Version(NpmVersionSettings settings);
}
[CompilerGeneratedAttribute]
internal class Cake.Npm.ViewVersion.NamespaceDoc : object {
}
public class Cake.Npm.ViewVersion.NpmViewVersionSettings : NpmSettings {
    [CompilerGeneratedAttribute]
private string <Package>k__BackingField;
    public string Package { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Package();
    [CompilerGeneratedAttribute]
public void set_Package(string value);
    protected virtual void EvaluateCore(ProcessArgumentBuilder args);
}
[ExtensionAttribute]
public static class Cake.Npm.ViewVersion.NpmViewVersionSettingsExtensions : object {
    [ExtensionAttribute]
public static NpmViewVersionSettings ForPackage(NpmViewVersionSettings settings, string package);
}
public class Cake.Npm.ViewVersion.NpmViewVersionTool : NpmTool`1<NpmViewVersionSettings> {
    public NpmViewVersionTool(IFileSystem fileSystem, ICakeEnvironment environment, IProcessRunner processRunner, IToolLocator tools, ICakeLog log);
    public string Version(NpmViewVersionSettings settings);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
