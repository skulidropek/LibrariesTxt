[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Spectre.Console.Cli.AnsiConsoleExtensions : object {
    private static Lazy`1<IAnsiConsole> _console;
    private static AnsiConsoleExtensions();
    [ExtensionAttribute]
public static IAnsiConsole GetConsole(IAnsiConsole console);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static void SafeRender(IAnsiConsole console, IRenderable renderable);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static void SafeRender(IAnsiConsole console, IEnumerable`1<IRenderable> renderables);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Spectre.Console.Cli.AsyncCommand : object {
    public abstract virtual Task`1<int> ExecuteAsync(CommandContext context);
    private sealed virtual override Task`1<int> Spectre.Console.Cli.ICommand<Spectre.Console.Cli.EmptyCommandSettings>.Execute(CommandContext context, EmptyCommandSettings settings);
    private sealed virtual override Task`1<int> Spectre.Console.Cli.ICommand.Execute(CommandContext context, CommandSettings settings);
    private sealed virtual override ValidationResult Spectre.Console.Cli.ICommand.Validate(CommandContext context, CommandSettings settings);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Spectre.Console.Cli.AsyncCommand`1 : object {
    public virtual ValidationResult Validate(CommandContext context, TSettings settings);
    public abstract virtual Task`1<int> ExecuteAsync(CommandContext context, TSettings settings);
    private sealed virtual override ValidationResult Spectre.Console.Cli.ICommand.Validate(CommandContext context, CommandSettings settings);
    private sealed virtual override Task`1<int> Spectre.Console.Cli.ICommand.Execute(CommandContext context, CommandSettings settings);
    private sealed virtual override Task`1<int> Spectre.Console.Cli.ICommand<TSettings>.Execute(CommandContext context, TSettings settings);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Spectre.Console.Cli.BranchConfigurator : object {
    [CompilerGeneratedAttribute]
private ConfiguredCommand <Command>k__BackingField;
    public ConfiguredCommand Command { get; }
    public BranchConfigurator(ConfiguredCommand command);
    [CompilerGeneratedAttribute]
public ConfiguredCommand get_Command();
    public sealed virtual IBranchConfigurator WithAlias(string alias);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Spectre.Console.Cli.CachingActivator : ComponentActivator {
    private ComponentActivator _activator;
    [NullableAttribute("2")]
private object _result;
    public CachingActivator(ComponentActivator activator);
    public virtual object Activate(DefaultTypeResolver container);
    public virtual ComponentActivator CreateCopy();
}
[FlagsAttribute]
public enum Spectre.Console.Cli.CaseSensitivity : Enum {
    public int value__;
    public static CaseSensitivity None;
    public static CaseSensitivity LongOptions;
    public static CaseSensitivity Commands;
    public static CaseSensitivity All;
}
[ExtensionAttribute]
internal static class Spectre.Console.Cli.CaseSensitivityExtensions : object {
    [ExtensionAttribute]
public static StringComparison GetStringComparison(CaseSensitivity caseSensitivity, CommandPart part);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static StringComparer GetStringComparer(CaseSensitivity caseSensitivity, CommandPart part);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Spectre.Console.Cli.CliConstants : object {
    public static string DefaultCommandName;
    public static string True;
    public static string False;
    [CompilerGeneratedAttribute]
private static String[] <AcceptedBooleanValues>k__BackingField;
    public static String[] AcceptedBooleanValues { get; }
    private static CliConstants();
    [CompilerGeneratedAttribute]
public static String[] get_AcceptedBooleanValues();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Spectre.Console.Cli.Command : object {
    public abstract virtual int Execute(CommandContext context);
    private sealed virtual override Task`1<int> Spectre.Console.Cli.ICommand<Spectre.Console.Cli.EmptyCommandSettings>.Execute(CommandContext context, EmptyCommandSettings settings);
    private sealed virtual override Task`1<int> Spectre.Console.Cli.ICommand.Execute(CommandContext context, CommandSettings settings);
    private sealed virtual override ValidationResult Spectre.Console.Cli.ICommand.Validate(CommandContext context, CommandSettings settings);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Spectre.Console.Cli.Command`1 : object {
    public virtual ValidationResult Validate(CommandContext context, TSettings settings);
    public abstract virtual int Execute(CommandContext context, TSettings settings);
    private sealed virtual override ValidationResult Spectre.Console.Cli.ICommand.Validate(CommandContext context, CommandSettings settings);
    private sealed virtual override Task`1<int> Spectre.Console.Cli.ICommand.Execute(CommandContext context, CommandSettings settings);
    private sealed virtual override Task`1<int> Spectre.Console.Cli.ICommand<TSettings>.Execute(CommandContext context, TSettings settings);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Spectre.Console.Cli.CommandApp : object {
    private Configurator _configurator;
    private CommandExecutor _executor;
    private bool _executed;
    [NullableContextAttribute("2")]
public CommandApp(ITypeRegistrar registrar);
    public sealed virtual void Configure(Action`1<IConfigurator> configuration);
    public DefaultCommandConfigurator SetDefaultCommand();
    public sealed virtual int Run(IEnumerable`1<string> args);
    [AsyncStateMachineAttribute("Spectre.Console.Cli.CommandApp/<RunAsync>d__7")]
public sealed virtual Task`1<int> RunAsync(IEnumerable`1<string> args);
    internal Configurator GetConfigurator();
    private static List`1<IRenderable> GetRenderableErrorMessage(Exception ex, bool convert);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Spectre.Console.Cli.CommandApp`1 : object {
    private CommandApp _app;
    private DefaultCommandConfigurator _defaultCommandConfigurator;
    [NullableContextAttribute("2")]
public CommandApp`1(ITypeRegistrar registrar);
    public sealed virtual void Configure(Action`1<IConfigurator> configuration);
    public sealed virtual int Run(IEnumerable`1<string> args);
    public sealed virtual Task`1<int> RunAsync(IEnumerable`1<string> args);
    internal Configurator GetConfigurator();
    public CommandApp`1<TDefaultCommand> WithDescription(string description);
    public CommandApp`1<TDefaultCommand> WithData(object data);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public abstract class Spectre.Console.Cli.CommandAppException : Exception {
    [CompilerGeneratedAttribute]
private IRenderable <Pretty>k__BackingField;
    public IRenderable Pretty { get; }
    internal bool AlwaysPropagateWhenDebugging { get; }
    [NullableContextAttribute("1")]
internal CommandAppException(string message, IRenderable pretty);
    [NullableContextAttribute("1")]
internal CommandAppException(string message, Exception ex, IRenderable pretty);
    [CompilerGeneratedAttribute]
public IRenderable get_Pretty();
    internal virtual bool get_AlwaysPropagateWhenDebugging();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Spectre.Console.Cli.CommandAppSettings : object {
    [CompilerGeneratedAttribute]
private string <ApplicationName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ApplicationVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowOptionDefaultValues>k__BackingField;
    [CompilerGeneratedAttribute]
private IAnsiConsole <Console>k__BackingField;
    [CompilerGeneratedAttribute]
private ICommandInterceptor <Interceptor>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private ITypeRegistrarFrontend <Registrar>k__BackingField;
    [CompilerGeneratedAttribute]
private CaseSensitivity <CaseSensitivity>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PropagateExceptions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ValidateExamples>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TrimTrailingPeriod>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <StrictParsing>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ConvertFlagsToRemainingArguments>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<Exception, int> <ExceptionHandler>k__BackingField;
    public string ApplicationName { get; public set; }
    public string ApplicationVersion { get; public set; }
    public bool ShowOptionDefaultValues { get; public set; }
    public IAnsiConsole Console { get; public set; }
    public ICommandInterceptor Interceptor { get; public set; }
    [NullableAttribute("1")]
public ITypeRegistrarFrontend Registrar { get; public set; }
    public CaseSensitivity CaseSensitivity { get; public set; }
    public bool PropagateExceptions { get; public set; }
    public bool ValidateExamples { get; public set; }
    public bool TrimTrailingPeriod { get; public set; }
    public bool StrictParsing { get; public set; }
    public bool ConvertFlagsToRemainingArguments { get; public set; }
    public ParsingMode ParsingMode { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<Exception, int> ExceptionHandler { get; public set; }
    [NullableContextAttribute("1")]
public CommandAppSettings(ITypeRegistrar registrar);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ApplicationName();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ApplicationName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ApplicationVersion();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ApplicationVersion(string value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ShowOptionDefaultValues();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ShowOptionDefaultValues(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual IAnsiConsole get_Console();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Console(IAnsiConsole value);
    [CompilerGeneratedAttribute]
public sealed virtual ICommandInterceptor get_Interceptor();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Interceptor(ICommandInterceptor value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public sealed virtual ITypeRegistrarFrontend get_Registrar();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_Registrar(ITypeRegistrarFrontend value);
    [CompilerGeneratedAttribute]
public sealed virtual CaseSensitivity get_CaseSensitivity();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CaseSensitivity(CaseSensitivity value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_PropagateExceptions();
    [CompilerGeneratedAttribute]
public sealed virtual void set_PropagateExceptions(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ValidateExamples();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ValidateExamples(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_TrimTrailingPeriod();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TrimTrailingPeriod(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_StrictParsing();
    [CompilerGeneratedAttribute]
public sealed virtual void set_StrictParsing(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ConvertFlagsToRemainingArguments();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ConvertFlagsToRemainingArguments(bool value);
    public ParsingMode get_ParsingMode();
    [CompilerGeneratedAttribute]
public sealed virtual Func`2<Exception, int> get_ExceptionHandler();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ExceptionHandler(Func`2<Exception, int> value);
    [NullableContextAttribute("1")]
public bool IsTrue(Func`2<CommandAppSettings, bool> func, string environmentVariableName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Spectre.Console.Cli.CommandArgument : CommandParameter {
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Position>k__BackingField;
    public string Value { get; }
    public int Position { get; public set; }
    public CommandArgument(Type parameterType, ParameterKind parameterKind, PropertyInfo property, string description, TypeConverterAttribute converter, DefaultValueAttribute defaultValue, CommandArgumentAttribute argument, ParameterValueProviderAttribute valueProvider, IEnumerable`1<ParameterValidationAttribute> validators);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public int get_Position();
    [CompilerGeneratedAttribute]
public void set_Position(int value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("128")]
public class Spectre.Console.Cli.CommandArgumentAttribute : Attribute {
    [CompilerGeneratedAttribute]
private int <Position>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ValueName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsRequired>k__BackingField;
    public int Position { get; }
    public string ValueName { get; }
    public bool IsRequired { get; }
    public CommandArgumentAttribute(int position, string template);
    [CompilerGeneratedAttribute]
public int get_Position();
    [CompilerGeneratedAttribute]
public string get_ValueName();
    [CompilerGeneratedAttribute]
public bool get_IsRequired();
}
internal static class Spectre.Console.Cli.CommandBinder : object {
    [NullableContextAttribute("1")]
public static CommandSettings Bind(CommandTree tree, Type settingsType, ITypeResolver resolver);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Spectre.Console.Cli.CommandConfigurationException : CommandAppException {
    internal bool AlwaysPropagateWhenDebugging { get; }
    internal CommandConfigurationException(string message, IRenderable pretty);
    internal CommandConfigurationException(string message, Exception ex, IRenderable pretty);
    internal virtual bool get_AlwaysPropagateWhenDebugging();
    internal static CommandConfigurationException NoCommandConfigured();
    internal static CommandConfigurationException CommandNameConflict(CommandInfo command, string alias);
    internal static CommandConfigurationException DuplicateOption(CommandInfo command, String[] options);
    internal static CommandConfigurationException BranchHasNoChildren(CommandInfo command);
    internal static CommandConfigurationException TooManyVectorArguments(CommandInfo command);
    internal static CommandConfigurationException VectorArgumentNotSpecifiedLast(CommandInfo command);
    internal static CommandConfigurationException OptionalOptionValueMustBeFlagWithValue(CommandOption option);
    internal static CommandConfigurationException OptionBothHasPairDeconstructorAndTypeParameter(CommandOption option);
    internal static CommandConfigurationException OptionTypeDoesNotSupportDeconstruction(CommandOption option);
    internal static CommandConfigurationException RequiredArgumentsCannotHaveDefaultValue(CommandArgument option);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Spectre.Console.Cli.CommandConfigurator : object {
    [CompilerGeneratedAttribute]
private ConfiguredCommand <Command>k__BackingField;
    public ConfiguredCommand Command { get; }
    public CommandConfigurator(ConfiguredCommand command);
    [CompilerGeneratedAttribute]
public ConfiguredCommand get_Command();
    public sealed virtual ICommandConfigurator WithExample(String[] args);
    public sealed virtual ICommandConfigurator WithAlias(string alias);
    public sealed virtual ICommandConfigurator WithDescription(string description);
    public sealed virtual ICommandConfigurator WithData(object data);
    public sealed virtual ICommandConfigurator IsHidden();
}
internal static class Spectre.Console.Cli.CommandConstructorBinder : object {
    [NullableContextAttribute("1")]
public static CommandSettings CreateSettings(CommandValueLookup lookup, ConstructorInfo constructor, ITypeResolver resolver);
}
[ExtensionAttribute]
internal static class Spectre.Console.Cli.CommandContainerExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static CommandInfo FindCommand(ICommandContainer root, string name, CaseSensitivity sensitivity);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Spectre.Console.Cli.CommandContext : object {
    [CompilerGeneratedAttribute]
private IRemainingArguments <Remaining>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private object <Data>k__BackingField;
    public IRemainingArguments Remaining { get; }
    public string Name { get; }
    [NullableAttribute("2")]
public object Data { get; }
    public CommandContext(IRemainingArguments remaining, string name, object data);
    [CompilerGeneratedAttribute]
public IRemainingArguments get_Remaining();
    [CompilerGeneratedAttribute]
public string get_Name();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public object get_Data();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Spectre.Console.Cli.CommandExecutor : object {
    private ITypeRegistrar _registrar;
    public CommandExecutor(ITypeRegistrar registrar);
    [AsyncStateMachineAttribute("Spectre.Console.Cli.CommandExecutor/<Execute>d__2")]
public Task`1<int> Execute(IConfiguration configuration, IEnumerable`1<string> args);
    private CommandTreeParserResult ParseCommandLineArguments(CommandModel model, CommandAppSettings settings, IEnumerable`1<string> args);
    private static string ResolveApplicationVersion(IConfiguration configuration);
    private static Task`1<int> Execute(CommandTree leaf, CommandTree tree, CommandContext context, ITypeResolver resolver, IConfiguration configuration);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Spectre.Console.Cli.CommandInfo : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<string> <Aliases>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private object <Data>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Type <CommandType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <SettingsType>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`3<CommandContext, CommandSettings, int> <Delegate>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDefaultCommand>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private CommandInfo <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<CommandInfo> <Children>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<CommandParameter> <Parameters>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<String[]> <Examples>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsHidden>k__BackingField;
    public string Name { get; }
    public HashSet`1<string> Aliases { get; }
    [NullableAttribute("2")]
public string Description { get; }
    [NullableAttribute("2")]
public object Data { get; }
    [NullableAttribute("2")]
public Type CommandType { get; }
    public Type SettingsType { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`3<CommandContext, CommandSettings, int> Delegate { get; }
    public bool IsDefaultCommand { get; }
    [NullableAttribute("2")]
public CommandInfo Parent { get; }
    public IList`1<CommandInfo> Children { get; }
    public IList`1<CommandParameter> Parameters { get; }
    public IList`1<String[]> Examples { get; }
    public bool IsBranch { get; }
    private IList`1<CommandInfo> Spectre.Console.Cli.ICommandContainer.Commands { get; }
    [NullableAttribute("2")]
public CommandInfo DefaultCommand { get; }
    public bool IsHidden { get; }
    public CommandInfo(CommandInfo parent, ConfiguredCommand prototype);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public HashSet`1<string> get_Aliases();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Description();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public object get_Data();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Type get_CommandType();
    [CompilerGeneratedAttribute]
public Type get_SettingsType();
    [CompilerGeneratedAttribute]
public Func`3<CommandContext, CommandSettings, int> get_Delegate();
    [CompilerGeneratedAttribute]
public bool get_IsDefaultCommand();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public CommandInfo get_Parent();
    [CompilerGeneratedAttribute]
public IList`1<CommandInfo> get_Children();
    [CompilerGeneratedAttribute]
public IList`1<CommandParameter> get_Parameters();
    [CompilerGeneratedAttribute]
public IList`1<String[]> get_Examples();
    public bool get_IsBranch();
    private sealed virtual override IList`1<CommandInfo> Spectre.Console.Cli.ICommandContainer.get_Commands();
    [NullableContextAttribute("2")]
public sealed virtual CommandInfo get_DefaultCommand();
    [CompilerGeneratedAttribute]
public bool get_IsHidden();
    public List`1<CommandInfo> Flatten();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Spectre.Console.Cli.CommandInfoExtensions : object {
    [ExtensionAttribute]
public static bool HaveParentWithOption(CommandInfo command, CommandOption option);
    [ExtensionAttribute]
public static bool AllowParentOption(CommandInfo command, CommandOption option);
    [ExtensionAttribute]
public static bool HaveParentWithArgument(CommandInfo command, CommandArgument argument);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Spectre.Console.Cli.CommandLineParseExceptionFactory : object {
    internal static CommandParseException Create(string arguments, CommandTreeToken token, string message, string details);
    internal static CommandParseException Create(IEnumerable`1<string> arguments, CommandTreeToken token, string message, string details);
    private static IRenderable CreatePrettyMessage(string arguments, CommandTreeToken token, string message, string details);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Spectre.Console.Cli.CommandLineTemplateExceptionFactory : object {
    internal static CommandTemplateException Create(string template, TemplateToken token, string message, string details);
    private static IRenderable CreatePrettyMessage(string template, TemplateToken token, string message, string details);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Spectre.Console.Cli.CommandModel : object {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <ApplicationName>k__BackingField;
    [CompilerGeneratedAttribute]
private ParsingMode <ParsingMode>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<CommandInfo> <Commands>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<String[]> <Examples>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TrimTrailingPeriod>k__BackingField;
    [NullableAttribute("2")]
public string ApplicationName { get; }
    public ParsingMode ParsingMode { get; }
    public IList`1<CommandInfo> Commands { get; }
    public IList`1<String[]> Examples { get; }
    public bool TrimTrailingPeriod { get; }
    [NullableAttribute("2")]
public CommandInfo DefaultCommand { get; }
    public CommandModel(CommandAppSettings settings, IEnumerable`1<CommandInfo> commands, IEnumerable`1<String[]> examples);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_ApplicationName();
    [CompilerGeneratedAttribute]
public ParsingMode get_ParsingMode();
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<CommandInfo> get_Commands();
    [CompilerGeneratedAttribute]
public IList`1<String[]> get_Examples();
    [CompilerGeneratedAttribute]
public bool get_TrimTrailingPeriod();
    [NullableContextAttribute("2")]
public sealed virtual CommandInfo get_DefaultCommand();
    public string GetApplicationName();
    [NullableContextAttribute("2")]
private static string GetApplicationFile();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Spectre.Console.Cli.CommandModelBuilder : object {
    public static CommandModel Build(IConfiguration configuration);
    private static CommandInfo Build(CommandInfo parent, ConfiguredCommand command);
    private static IEnumerable`1<CommandParameter> GetParameters(CommandInfo command);
    private static CommandOption BuildOptionParameter(PropertyInfo property, CommandOptionAttribute attribute);
    private static CommandArgument BuildArgumentParameter(PropertyInfo property, CommandArgumentAttribute attribute);
    private static ParameterKind GetOptionKind(Type type, CommandOptionAttribute attribute, PairDeconstructorAttribute deconstructor, TypeConverterAttribute converter);
    private static ParameterKind GetParameterKind(Type type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Spectre.Console.Cli.CommandModelValidator : object {
    public static void Validate(CommandModel model, CommandAppSettings settings);
    [NullableContextAttribute("2")]
private static void Validate(CommandInfo command);
    private static void ValidateExamples(CommandModel model, CommandAppSettings settings);
    private static String[] GetDuplicates(CommandInfo command);
    [CompilerGeneratedAttribute]
internal static void <GetDuplicates>g__AddToResult|3_0(IEnumerable`1<string> keys, <>c__DisplayClass3_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Spectre.Console.Cli.CommandOption : CommandParameter {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<string> <LongNames>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<string> <ShortNames>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <ValueName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ValueIsOptional>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsShadowed>k__BackingField;
    public IReadOnlyList`1<string> LongNames { get; }
    public IReadOnlyList`1<string> ShortNames { get; }
    [NullableAttribute("2")]
public string ValueName { get; }
    public bool ValueIsOptional { get; }
    public bool IsShadowed { get; public set; }
    [NullableContextAttribute("2")]
public CommandOption(Type parameterType, ParameterKind parameterKind, PropertyInfo property, string description, TypeConverterAttribute converter, PairDeconstructorAttribute deconstructor, CommandOptionAttribute optionAttribute, ParameterValueProviderAttribute valueProvider, IEnumerable`1<ParameterValidationAttribute> validators, DefaultValueAttribute defaultValue, bool valueIsOptional);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<string> get_LongNames();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<string> get_ShortNames();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_ValueName();
    [CompilerGeneratedAttribute]
public bool get_ValueIsOptional();
    [CompilerGeneratedAttribute]
public bool get_IsShadowed();
    [CompilerGeneratedAttribute]
public void set_IsShadowed(bool value);
    public string GetOptionName();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("128")]
public class Spectre.Console.Cli.CommandOptionAttribute : Attribute {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<string> <LongNames>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<string> <ShortNames>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <ValueName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ValueIsOptional>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsHidden>k__BackingField;
    public IReadOnlyList`1<string> LongNames { get; }
    public IReadOnlyList`1<string> ShortNames { get; }
    [NullableAttribute("2")]
public string ValueName { get; }
    public bool ValueIsOptional { get; }
    public bool IsHidden { get; public set; }
    public CommandOptionAttribute(string template);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<string> get_LongNames();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<string> get_ShortNames();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_ValueName();
    [CompilerGeneratedAttribute]
public bool get_ValueIsOptional();
    [CompilerGeneratedAttribute]
public bool get_IsHidden();
    [CompilerGeneratedAttribute]
public void set_IsHidden(bool value);
    internal bool IsMatch(string name);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal abstract class Spectre.Console.Cli.CommandParameter : object {
    [CompilerGeneratedAttribute]
private Guid <Id>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private Type <ParameterType>k__BackingField;
    [CompilerGeneratedAttribute]
private ParameterKind <ParameterKind>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private PropertyInfo <Property>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private DefaultValueAttribute <DefaultValue>k__BackingField;
    [CompilerGeneratedAttribute]
private TypeConverterAttribute <Converter>k__BackingField;
    [CompilerGeneratedAttribute]
private PairDeconstructorAttribute <PairDeconstructor>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private List`1<ParameterValidationAttribute> <Validators>k__BackingField;
    [CompilerGeneratedAttribute]
private ParameterValueProviderAttribute <ValueProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Required>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsHidden>k__BackingField;
    public Guid Id { get; }
    [NullableAttribute("1")]
public Type ParameterType { get; }
    public ParameterKind ParameterKind { get; }
    [NullableAttribute("1")]
public PropertyInfo Property { get; }
    public string Description { get; }
    public DefaultValueAttribute DefaultValue { get; }
    public TypeConverterAttribute Converter { get; }
    public PairDeconstructorAttribute PairDeconstructor { get; }
    [NullableAttribute("1")]
public List`1<ParameterValidationAttribute> Validators { get; }
    public ParameterValueProviderAttribute ValueProvider { get; }
    public bool Required { get; public set; }
    public bool IsHidden { get; }
    [NullableAttribute("1")]
public string PropertyName { get; }
    public bool WantRawValue { get; }
    protected CommandParameter(Type parameterType, ParameterKind parameterKind, PropertyInfo property, string description, TypeConverterAttribute converter, DefaultValueAttribute defaultValue, PairDeconstructorAttribute deconstructor, ParameterValueProviderAttribute valueProvider, IEnumerable`1<ParameterValidationAttribute> validators, bool required, bool isHidden);
    [CompilerGeneratedAttribute]
public Guid get_Id();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public sealed virtual Type get_ParameterType();
    [CompilerGeneratedAttribute]
public ParameterKind get_ParameterKind();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public PropertyInfo get_Property();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Description();
    [CompilerGeneratedAttribute]
public DefaultValueAttribute get_DefaultValue();
    [CompilerGeneratedAttribute]
public TypeConverterAttribute get_Converter();
    [CompilerGeneratedAttribute]
public PairDeconstructorAttribute get_PairDeconstructor();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public List`1<ParameterValidationAttribute> get_Validators();
    [CompilerGeneratedAttribute]
public ParameterValueProviderAttribute get_ValueProvider();
    [CompilerGeneratedAttribute]
public bool get_Required();
    [CompilerGeneratedAttribute]
public void set_Required(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsHidden();
    [NullableContextAttribute("1")]
public sealed virtual string get_PropertyName();
    public virtual bool get_WantRawValue();
    public bool IsFlagValue();
    [NullableContextAttribute("1")]
public bool HaveSameBackingPropertyAs(CommandParameter other);
    [NullableContextAttribute("1")]
public void Assign(CommandSettings settings, ITypeResolver resolver, object value);
    [NullableContextAttribute("1")]
public object Get(CommandSettings settings);
}
internal static class Spectre.Console.Cli.CommandParameterComparer : object {
    [NullableAttribute("1")]
public static ByBackingPropertyComparer ByBackingProperty;
    private static CommandParameterComparer();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Spectre.Console.Cli.CommandParameterContext : object {
    [CompilerGeneratedAttribute]
private ICommandParameterInfo <Parameter>k__BackingField;
    [CompilerGeneratedAttribute]
private ITypeResolver <Resolver>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    public ICommandParameterInfo Parameter { get; }
    public ITypeResolver Resolver { get; }
    [NullableAttribute("2")]
public object Value { get; }
    public CommandParameterContext(ICommandParameterInfo parameter, ITypeResolver resolver, object value);
    [CompilerGeneratedAttribute]
public ICommandParameterInfo get_Parameter();
    [CompilerGeneratedAttribute]
public ITypeResolver get_Resolver();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public object get_Value();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Spectre.Console.Cli.CommandParseException : CommandRuntimeException {
    internal CommandParseException(string message, IRenderable pretty);
    internal static CommandParseException CouldNotCreateSettings(Type settingsType);
    internal static CommandParseException CouldNotCreateCommand(Type commandType);
    internal static CommandParseException ExpectedTokenButFoundNull(Kind expected);
    internal static CommandParseException ExpectedTokenButFoundOther(Kind expected, Kind found);
    internal static CommandParseException OptionHasNoName(string input, CommandTreeToken token);
    internal static CommandParseException OptionValueWasExpected(string input, CommandTreeToken token);
    internal static CommandParseException OptionHasNoValue(IEnumerable`1<string> args, CommandTreeToken token, CommandOption option);
    internal static CommandParseException UnexpectedOption(IEnumerable`1<string> args, CommandTreeToken token);
    internal static CommandParseException CannotAssignValueToFlag(IEnumerable`1<string> args, CommandTreeToken token);
    internal static CommandParseException InvalidShortOptionName(string input, CommandTreeToken token);
    internal static CommandParseException LongOptionNameIsMissing(TextBuffer reader, int position);
    internal static CommandParseException LongOptionNameIsOneCharacter(TextBuffer reader, int position, string name);
    internal static CommandParseException LongOptionNameStartWithDigit(TextBuffer reader, int position, string name);
    internal static CommandParseException LongOptionNameContainSymbol(TextBuffer reader, int position, char character);
    internal static CommandParseException UnknownCommand(CommandModel model, CommandTree node, IEnumerable`1<string> args, CommandTreeToken token);
    internal static CommandParseException CouldNotMatchArgument(IEnumerable`1<string> args, CommandTreeToken token);
    internal static CommandParseException UnknownOption(IEnumerable`1<string> args, CommandTreeToken token);
    internal static CommandParseException ValueIsNotInValidFormat(string value);
}
internal enum Spectre.Console.Cli.CommandPart : Enum {
    public int value__;
    public static CommandPart CommandName;
    public static CommandPart LongOption;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Spectre.Console.Cli.CommandPropertyBinder : object {
    public static CommandSettings CreateSettings(CommandValueLookup lookup, Type settingsType, ITypeResolver resolver);
    private static CommandSettings CreateSettings(ITypeResolver resolver, Type settingsType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Spectre.Console.Cli.CommandRuntimeException : CommandAppException {
    internal CommandRuntimeException(string message, IRenderable pretty);
    internal CommandRuntimeException(string message, Exception ex, IRenderable pretty);
    internal static CommandRuntimeException CouldNotResolveType(Type type, Exception ex);
    internal static CommandRuntimeException MissingRequiredArgument(CommandTree node, CommandArgument argument);
    internal static CommandRuntimeException NoConverterFound(CommandParameter parameter);
    internal static CommandRuntimeException ConversionFailed(MappedCommandParameter parameter, TypeConverter typeConverter, Exception exception);
    internal static CommandRuntimeException ValidationFailed(ValidationResult result);
    internal static Exception CouldNotGetSettingsType(Type commandType);
}
public abstract class Spectre.Console.Cli.CommandSettings : object {
    [NullableContextAttribute("1")]
public virtual ValidationResult Validate();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Spectre.Console.Cli.CommandSuggestor : object {
    private static float SmallestDistance;
    public static CommandInfo Suggest(CommandModel model, CommandInfo command, string name);
    private static float Score(string source, string target);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Spectre.Console.Cli.CommandTemplateException : CommandConfigurationException {
    [CompilerGeneratedAttribute]
private string <Template>k__BackingField;
    public string Template { get; }
    internal bool AlwaysPropagateWhenDebugging { get; }
    internal CommandTemplateException(string message, string template, IRenderable pretty);
    [CompilerGeneratedAttribute]
public string get_Template();
    internal virtual bool get_AlwaysPropagateWhenDebugging();
    internal static CommandTemplateException UnexpectedCharacter(string template, int position, char character);
    internal static CommandTemplateException UnterminatedValueName(string template, TemplateToken token);
    internal static CommandTemplateException ArgumentCannotContainOptions(string template, TemplateToken token);
    internal static CommandTemplateException MultipleValuesAreNotSupported(string template, TemplateToken token);
    internal static CommandTemplateException ValuesMustHaveName(string template, TemplateToken token);
    internal static CommandTemplateException OptionsMustHaveName(string template, TemplateToken token);
    internal static CommandTemplateException OptionNamesCannotStartWithDigit(string template, TemplateToken token);
    internal static CommandTemplateException InvalidCharacterInOptionName(string template, TemplateToken token, char character);
    internal static CommandTemplateException LongOptionMustHaveMoreThanOneCharacter(string template, TemplateToken token);
    internal static CommandTemplateException MultipleShortOptionNamesNotAllowed(string template, TemplateToken token);
    internal static CommandTemplateException ShortOptionMustOnlyBeOneCharacter(string template, TemplateToken token);
    internal static CommandTemplateException MultipleOptionValuesAreNotSupported(string template, TemplateToken token);
    internal static CommandTemplateException InvalidCharacterInValueName(string template, TemplateToken token, char character);
    internal static CommandTemplateException MissingLongAndShortName(string template, TemplateToken token);
    internal static CommandTemplateException ArgumentsMustHaveValueName(string template);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Spectre.Console.Cli.CommandTree : object {
    [CompilerGeneratedAttribute]
private CommandInfo <Command>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<MappedCommandParameter> <Mapped>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<CommandParameter> <Unmapped>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private CommandTree <Parent>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private CommandTree <Next>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowHelp>k__BackingField;
    public CommandInfo Command { get; }
    public List`1<MappedCommandParameter> Mapped { get; }
    public List`1<CommandParameter> Unmapped { get; }
    [NullableAttribute("2")]
public CommandTree Parent { get; }
    [NullableAttribute("2")]
public CommandTree Next { get; public set; }
    public bool ShowHelp { get; public set; }
    public CommandTree(CommandTree parent, CommandInfo command);
    [CompilerGeneratedAttribute]
public CommandInfo get_Command();
    [CompilerGeneratedAttribute]
public List`1<MappedCommandParameter> get_Mapped();
    [CompilerGeneratedAttribute]
public List`1<CommandParameter> get_Unmapped();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public CommandTree get_Parent();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public CommandTree get_Next();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Next(CommandTree value);
    [CompilerGeneratedAttribute]
public bool get_ShowHelp();
    [CompilerGeneratedAttribute]
public void set_ShowHelp(bool value);
    public ICommand CreateCommand(ITypeResolver resolver);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Spectre.Console.Cli.CommandTreeExtensions : object {
    [ExtensionAttribute]
public static CommandTree GetRootCommand(CommandTree node);
    [ExtensionAttribute]
public static CommandTree GetLeafCommand(CommandTree node);
    [ExtensionAttribute]
public static bool HasArguments(CommandTree tree);
    [ExtensionAttribute]
public static CommandArgument FindArgument(CommandTree tree, int position);
    [ExtensionAttribute]
public static CommandOption FindOption(CommandTree tree, string name, bool longOption, CaseSensitivity sensitivity);
    [ExtensionAttribute]
public static bool IsOptionMappedWithParent(CommandTree tree, string name, bool longOption);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Spectre.Console.Cli.CommandTreeParser : object {
    private CommandModel _configuration;
    private ParsingMode _parsingMode;
    private CommandOptionAttribute _help;
    private bool _convertFlagsToRemainingArguments;
    [CompilerGeneratedAttribute]
private CaseSensitivity <CaseSensitivity>k__BackingField;
    public CaseSensitivity CaseSensitivity { get; }
    public CommandTreeParser(CommandModel configuration, CaseSensitivity caseSensitivity, Nullable`1<ParsingMode> parsingMode, Nullable`1<bool> convertFlagsToRemainingArguments);
    [CompilerGeneratedAttribute]
public CaseSensitivity get_CaseSensitivity();
    public CommandTreeParserResult Parse(IEnumerable`1<string> args);
    public CommandTreeParserResult Parse(CommandTreeParserContext context, CommandTreeTokenizerResult tokenizerResult);
    private CommandTree ParseCommand(CommandTreeParserContext context, ICommandContainer current, CommandTree parent, CommandTreeTokenStream stream);
    private CommandTree ParseCommandParameters(CommandTreeParserContext context, CommandInfo command, CommandTree parent, CommandTreeTokenStream stream);
    private void ParseString(CommandTreeParserContext context, CommandTreeTokenStream stream, CommandTree node);
    private void ParseOption(CommandTreeParserContext context, CommandTreeTokenStream stream, CommandTreeToken token, CommandTree node, bool isLongOption);
    private void ParseOptionValue(CommandTreeParserContext context, CommandTreeTokenStream stream, CommandTreeToken token, CommandTree current, CommandParameter parameter);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Spectre.Console.Cli.CommandTreeParserContext : object {
    private List`1<string> _args;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<string, List`1<string>> _remaining;
    [CompilerGeneratedAttribute]
private int <CurrentArgumentPosition>k__BackingField;
    [CompilerGeneratedAttribute]
private State <State>k__BackingField;
    [CompilerGeneratedAttribute]
private ParsingMode <ParsingMode>k__BackingField;
    public IReadOnlyList`1<string> Arguments { get; }
    public int CurrentArgumentPosition { get; private set; }
    public State State { get; public set; }
    public ParsingMode ParsingMode { get; }
    public CommandTreeParserContext(IEnumerable`1<string> args, ParsingMode parsingMode);
    public IReadOnlyList`1<string> get_Arguments();
    [CompilerGeneratedAttribute]
public int get_CurrentArgumentPosition();
    [CompilerGeneratedAttribute]
private void set_CurrentArgumentPosition(int value);
    [CompilerGeneratedAttribute]
public State get_State();
    [CompilerGeneratedAttribute]
public void set_State(State value);
    [CompilerGeneratedAttribute]
public ParsingMode get_ParsingMode();
    public void ResetArgumentPosition();
    public void IncreaseArgumentPosition();
    public void AddRemainingArgument(string key, string value);
    public ILookup`2<string, string> GetRemainingArguments();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Spectre.Console.Cli.CommandTreeParserResult : object {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private CommandTree <Tree>k__BackingField;
    [CompilerGeneratedAttribute]
private IRemainingArguments <Remaining>k__BackingField;
    [NullableAttribute("2")]
public CommandTree Tree { get; }
    public IRemainingArguments Remaining { get; }
    public CommandTreeParserResult(CommandTree tree, IRemainingArguments remaining);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public CommandTree get_Tree();
    [CompilerGeneratedAttribute]
public IRemainingArguments get_Remaining();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Spectre.Console.Cli.CommandTreeToken : object {
    [CompilerGeneratedAttribute]
private Kind <TokenKind>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Position>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Representation>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsGrouped>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HadSeparator>k__BackingField;
    public Kind TokenKind { get; }
    public int Position { get; }
    public string Value { get; }
    public string Representation { get; }
    public bool IsGrouped { get; public set; }
    public bool HadSeparator { get; public set; }
    public CommandTreeToken(Kind kind, int position, string value, string representation);
    [CompilerGeneratedAttribute]
public Kind get_TokenKind();
    [CompilerGeneratedAttribute]
public int get_Position();
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public string get_Representation();
    [CompilerGeneratedAttribute]
public bool get_IsGrouped();
    [CompilerGeneratedAttribute]
public void set_IsGrouped(bool value);
    [CompilerGeneratedAttribute]
public bool get_HadSeparator();
    [CompilerGeneratedAttribute]
public void set_HadSeparator(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Spectre.Console.Cli.CommandTreeTokenizer : object {
    public static CommandTreeTokenizerResult Tokenize(IEnumerable`1<string> args);
    private static int ParseToken(CommandTreeTokenizerContext context, TextBuffer reader, int position, int start, List`1<CommandTreeToken> tokens);
    private static CommandTreeToken ScanString(CommandTreeTokenizerContext context, TextBuffer reader, Char[] stop);
    private static IEnumerable`1<CommandTreeToken> ScanOptions(CommandTreeTokenizerContext context, TextBuffer reader);
    private static IEnumerable`1<CommandTreeToken> ScanShortOptions(CommandTreeTokenizerContext context, TextBuffer reader, int position);
    private static CommandTreeToken ScanLongOption(CommandTreeTokenizerContext context, TextBuffer reader, int position);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Spectre.Console.Cli.CommandTreeTokenizerContext : object {
    private StringBuilder _builder;
    private List`1<string> _remaining;
    [CompilerGeneratedAttribute]
private Mode <Mode>k__BackingField;
    public Mode Mode { get; public set; }
    public IReadOnlyList`1<string> Remaining { get; }
    [CompilerGeneratedAttribute]
public Mode get_Mode();
    [CompilerGeneratedAttribute]
public void set_Mode(Mode value);
    public IReadOnlyList`1<string> get_Remaining();
    public void AddRemaining(char character);
    public void AddRemaining(string text);
    public void FlushRemaining();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
internal class Spectre.Console.Cli.CommandTreeTokenStream : object {
    private List`1<CommandTreeToken> _tokens;
    private int _position;
    public int Count { get; }
    public int Position { get; }
    public CommandTreeToken Item { get; }
    [NullableAttribute("2")]
public CommandTreeToken Current { get; }
    public CommandTreeTokenStream(IEnumerable`1<CommandTreeToken> tokens);
    public sealed virtual int get_Count();
    public int get_Position();
    public sealed virtual CommandTreeToken get_Item(int index);
    [NullableContextAttribute("2")]
public CommandTreeToken get_Current();
    [NullableContextAttribute("2")]
public CommandTreeToken Peek(int index);
    [NullableContextAttribute("2")]
public CommandTreeToken Consume();
    [NullableContextAttribute("2")]
public CommandTreeToken Consume(Kind type);
    public CommandTreeToken Expect(Kind expected);
    public sealed virtual IEnumerator`1<CommandTreeToken> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal static class Spectre.Console.Cli.CommandValidator : object {
    [NullableContextAttribute("2")]
public static void ValidateRequiredParameters(CommandTree tree);
    [NullableContextAttribute("1")]
public static void ValidateParameter(CommandParameter parameter, CommandValueLookup settings, ITypeResolver resolver);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Spectre.Console.Cli.CommandValueBinder : object {
    private CommandValueLookup _lookup;
    public CommandValueBinder(CommandValueLookup lookup);
    public void Bind(CommandParameter parameter, ITypeResolver resolver, object value);
    private object GetLookup(CommandParameter parameter, ITypeResolver resolver, object value);
    private object GetArray(CommandParameter parameter, object value);
    private object GetFlag(CommandParameter parameter, object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Spectre.Console.Cli.CommandValueLookup : object {
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<Guid, ValueTuple`2<CommandParameter, object>> _lookup;
    [IteratorStateMachineAttribute("Spectre.Console.Cli.CommandValueLookup/<GetEnumerator>d__2")]
public sealed virtual IEnumerator`1<ValueTuple`2<CommandParameter, object>> GetEnumerator();
    [NullableContextAttribute("2")]
public bool HasParameterWithName(string name);
    [NullableContextAttribute("2")]
public bool TryGetParameterWithName(string name, ValueTuple`2& result);
    public object GetValue(CommandParameter parameter);
    public void SetValue(CommandParameter parameter, object value);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Spectre.Console.Cli.CommandValueResolver : object {
    public static CommandValueLookup GetParameterValues(CommandTree tree, ITypeResolver resolver);
    private static object ConvertValue(ITypeResolver resolver, CommandValueLookup lookup, CommandValueBinder binder, CommandParameter parameter, object result);
    private static Array ConvertArray(Array sourceArray, TypeConverter converter);
    private static ValueTuple`2<TypeConverter, ConstructorInfo> GetConverter(CommandValueLookup lookup, CommandValueBinder binder, ITypeResolver resolver, CommandParameter parameter);
    [CompilerGeneratedAttribute]
internal static ConstructorInfo <GetConverter>g__GetStringConstructor|3_0(Type type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class Spectre.Console.Cli.ComponentActivator : object {
    public abstract virtual object Activate(DefaultTypeResolver container);
    public abstract virtual ComponentActivator CreateCopy();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Spectre.Console.Cli.ComponentRegistration : object {
    [CompilerGeneratedAttribute]
private Type <ImplementationType>k__BackingField;
    [CompilerGeneratedAttribute]
private ComponentActivator <Activator>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<Type> <RegistrationTypes>k__BackingField;
    public Type ImplementationType { get; }
    public ComponentActivator Activator { get; }
    public IReadOnlyList`1<Type> RegistrationTypes { get; }
    public ComponentRegistration(Type type, ComponentActivator activator, IEnumerable`1<Type> registrationTypes);
    [CompilerGeneratedAttribute]
public Type get_ImplementationType();
    [CompilerGeneratedAttribute]
public ComponentActivator get_Activator();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<Type> get_RegistrationTypes();
    public ComponentRegistration CreateCopy();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Spectre.Console.Cli.ComponentRegistry : object {
    private Dictionary`2<Type, HashSet`1<ComponentRegistration>> _registrations;
    public ComponentRegistry CreateCopy();
    public sealed virtual void Dispose();
    public void Register(ComponentRegistration registration);
    public ICollection`1<ComponentRegistration> GetRegistrations(Type type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Spectre.Console.Cli.Composer : object {
    private StringBuilder _content;
    public Composer Text(string text);
    public Composer Style(string style, string text);
    public Composer Style(string style, Action`1<Composer> action);
    public Composer Space();
    public Composer Spaces(int count);
    public Composer Tab();
    public Composer Tabs(int count);
    public Composer Repeat(char character, int count);
    public Composer LineBreak();
    public Composer LineBreaks(int count);
    public Composer Join(string separator, IEnumerable`1<string> composers);
    public sealed virtual Measurement Measure(RenderOptions options, int maxWidth);
    public sealed virtual IEnumerable`1<Segment> Render(RenderOptions options, int maxWidth);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Spectre.Console.Cli.ConfigurationHelper : object {
    public static Type GetSettingsType(Type commandType);
    private static bool GetGenericTypeArguments(Type type, Type genericType, Type[]& genericTypeArguments);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Spectre.Console.Cli.Configurator : object {
    private ITypeRegistrar _registrar;
    [CompilerGeneratedAttribute]
private IList`1<ConfiguredCommand> <Commands>k__BackingField;
    [CompilerGeneratedAttribute]
private CommandAppSettings <Settings>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ConfiguredCommand <DefaultCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<String[]> <Examples>k__BackingField;
    public IList`1<ConfiguredCommand> Commands { get; }
    public CommandAppSettings Settings { get; }
    [NullableAttribute("2")]
public ConfiguredCommand DefaultCommand { get; private set; }
    public IList`1<String[]> Examples { get; }
    private ICommandAppSettings Spectre.Console.Cli.IConfigurator.Settings { get; }
    public Configurator(ITypeRegistrar registrar);
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<ConfiguredCommand> get_Commands();
    [CompilerGeneratedAttribute]
public sealed virtual CommandAppSettings get_Settings();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual ConfiguredCommand get_DefaultCommand();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_DefaultCommand(ConfiguredCommand value);
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<String[]> get_Examples();
    private sealed virtual override ICommandAppSettings Spectre.Console.Cli.IConfigurator.get_Settings();
    public sealed virtual void AddExample(String[] args);
    public ConfiguredCommand SetDefaultCommand();
    public sealed virtual ICommandConfigurator AddCommand(string name);
    public sealed virtual ICommandConfigurator AddDelegate(string name, Func`3<CommandContext, TSettings, int> func);
    public sealed virtual IBranchConfigurator AddBranch(string name, Action`1<IConfigurator`1<TSettings>> action);
    private sealed virtual override ICommandConfigurator Spectre.Console.Cli.Unsafe.IUnsafeConfigurator.AddCommand(string name, Type command);
    private sealed virtual override IBranchConfigurator Spectre.Console.Cli.Unsafe.IUnsafeConfigurator.AddBranch(string name, Type settings, Action`1<IUnsafeBranchConfigurator> action);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Spectre.Console.Cli.Configurator`1 : object {
    private ConfiguredCommand _command;
    [NullableAttribute("2")]
private ITypeRegistrar _registrar;
    public Configurator`1(ConfiguredCommand command, ITypeRegistrar registrar);
    public sealed virtual void SetDescription(string description);
    public sealed virtual void AddExample(String[] args);
    public sealed virtual void SetDefaultCommand();
    public sealed virtual void HideBranch();
    public sealed virtual ICommandConfigurator AddCommand(string name);
    public sealed virtual ICommandConfigurator AddDelegate(string name, Func`3<CommandContext, TDerivedSettings, int> func);
    public sealed virtual IBranchConfigurator AddBranch(string name, Action`1<IConfigurator`1<TDerivedSettings>> action);
    private sealed virtual override ICommandConfigurator Spectre.Console.Cli.Unsafe.IUnsafeConfigurator.AddCommand(string name, Type command);
    private sealed virtual override IBranchConfigurator Spectre.Console.Cli.Unsafe.IUnsafeConfigurator.AddBranch(string name, Type settings, Action`1<IUnsafeBranchConfigurator> action);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Spectre.Console.Cli.ConfiguratorExtensions : object {
    [ExtensionAttribute]
public static IConfigurator SetApplicationName(IConfigurator configurator, string name);
    [ExtensionAttribute]
public static IConfigurator SetApplicationVersion(IConfigurator configurator, string version);
    [ExtensionAttribute]
public static IConfigurator HideOptionDefaultValues(IConfigurator configurator);
    [ExtensionAttribute]
public static IConfigurator ConfigureConsole(IConfigurator configurator, IAnsiConsole console);
    [ExtensionAttribute]
public static IConfigurator UseStrictParsing(IConfigurator configurator);
    [ExtensionAttribute]
public static IConfigurator TrimTrailingPeriods(IConfigurator configurator, bool trimTrailingPeriods);
    [ExtensionAttribute]
public static IConfigurator PropagateExceptions(IConfigurator configurator);
    [ExtensionAttribute]
public static IConfigurator CaseSensitivity(IConfigurator configurator, CaseSensitivity sensitivity);
    [ExtensionAttribute]
public static IConfigurator ValidateExamples(IConfigurator configurator);
    [ExtensionAttribute]
public static IConfigurator SetInterceptor(IConfigurator configurator, ICommandInterceptor interceptor);
    [ExtensionAttribute]
public static IBranchConfigurator AddBranch(IConfigurator configurator, string name, Action`1<IConfigurator`1<CommandSettings>> action);
    [ExtensionAttribute]
public static IBranchConfigurator AddBranch(IConfigurator`1<TSettings> configurator, string name, Action`1<IConfigurator`1<TSettings>> action);
    [ExtensionAttribute]
public static ICommandConfigurator AddDelegate(IConfigurator configurator, string name, Func`2<CommandContext, int> func);
    [ExtensionAttribute]
public static ICommandConfigurator AddDelegate(IConfigurator`1<TSettings> configurator, string name, Func`2<CommandContext, int> func);
    [ExtensionAttribute]
public static IConfigurator SetExceptionHandler(IConfigurator configurator, Action`1<Exception> exceptionHandler);
    [ExtensionAttribute]
public static IConfigurator SetExceptionHandler(IConfigurator configurator, Func`2<Exception, int> exceptionHandler);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Spectre.Console.Cli.ConfiguredCommand : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<string> <Aliases>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private object <Data>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Type <CommandType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <SettingsType>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`3<CommandContext, CommandSettings, int> <Delegate>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDefaultCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsHidden>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ConfiguredCommand> <Children>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<String[]> <Examples>k__BackingField;
    public string Name { get; }
    public HashSet`1<string> Aliases { get; }
    [NullableAttribute("2")]
public string Description { get; public set; }
    [NullableAttribute("2")]
public object Data { get; public set; }
    [NullableAttribute("2")]
public Type CommandType { get; }
    public Type SettingsType { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`3<CommandContext, CommandSettings, int> Delegate { get; }
    public bool IsDefaultCommand { get; }
    public bool IsHidden { get; public set; }
    public IList`1<ConfiguredCommand> Children { get; }
    public IList`1<String[]> Examples { get; }
    private ConfiguredCommand(string name, Type commandType, Type settingsType, Func`3<CommandContext, CommandSettings, int> delegate, bool isDefaultCommand);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public HashSet`1<string> get_Aliases();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Description();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Description(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public object get_Data();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Data(object value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Type get_CommandType();
    [CompilerGeneratedAttribute]
public Type get_SettingsType();
    [CompilerGeneratedAttribute]
public Func`3<CommandContext, CommandSettings, int> get_Delegate();
    [CompilerGeneratedAttribute]
public bool get_IsDefaultCommand();
    [CompilerGeneratedAttribute]
public bool get_IsHidden();
    [CompilerGeneratedAttribute]
public void set_IsHidden(bool value);
    [CompilerGeneratedAttribute]
public IList`1<ConfiguredCommand> get_Children();
    [CompilerGeneratedAttribute]
public IList`1<String[]> get_Examples();
    public static ConfiguredCommand FromBranch(Type settings, string name);
    public static ConfiguredCommand FromBranch(string name);
    public static ConfiguredCommand FromType(string name, bool isDefaultCommand);
    public static ConfiguredCommand FromDelegate(string name, Func`3<CommandContext, CommandSettings, int> delegate);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Spectre.Console.Cli.DefaultPairDeconstructor : object {
    private sealed virtual override ValueTuple`2<object, object> Spectre.Console.Cli.IPairDeconstructor.Deconstruct(ITypeResolver resolver, Type keyType, Type valueType, string value);
    private static object Parse(string value, Type targetType);
    private static TypeConverter GetConverter(Type type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Spectre.Console.Cli.DefaultTypeRegistrar : object {
    private Queue`1<Action`1<ComponentRegistry>> _registry;
    public sealed virtual ITypeResolver Build();
    public sealed virtual void Register(Type service, Type implementation);
    public sealed virtual void RegisterInstance(Type service, object implementation);
    public sealed virtual void RegisterLazy(Type service, Func`1<object> factory);
}
internal class Spectre.Console.Cli.DefaultTypeResolver : object {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private ComponentRegistry <Registry>k__BackingField;
    [NullableAttribute("1")]
public ComponentRegistry Registry { get; }
    [NullableContextAttribute("2")]
public DefaultTypeResolver(ComponentRegistry registry);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public ComponentRegistry get_Registry();
    public sealed virtual void Dispose();
    [NullableContextAttribute("2")]
public sealed virtual object Resolve(Type type);
    [NullableContextAttribute("2")]
public object Resolve(ComponentRegistration registration);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Spectre.Console.Cli.DelegateCommand : object {
    private Func`3<CommandContext, CommandSettings, int> _func;
    public DelegateCommand(Func`3<CommandContext, CommandSettings, int> func);
    public sealed virtual Task`1<int> Execute(CommandContext context, CommandSettings settings);
    public sealed virtual ValidationResult Validate(CommandContext context, CommandSettings settings);
}
public class Spectre.Console.Cli.EmptyCommandSettings : CommandSettings {
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[DescriptionAttribute("Displays diagnostics about CLI configurations")]
internal class Spectre.Console.Cli.ExplainCommand : Command`1<Settings> {
    private CommandModel _commandModel;
    private IAnsiConsole _writer;
    public ExplainCommand(IConfiguration configuration, CommandModel commandModel);
    public virtual int Execute(CommandContext context, Settings settings);
    private IRenderable ValueMarkup(string key, string value);
    private IRenderable ValueMarkup(string key, string value, string noValueText);
    private string ParentMarkup(string description);
    private void AddStringList(TreeNode node, string description, IList`1<string> strings);
    private void AddCommands(TreeNode node, IEnumerable`1<CommandInfo> commands, bool detailed, bool includeHidden);
    private void AddParameter(TreeNode parametersNode, CommandParameter parameter, bool detailed, bool includeHidden);
    private static string GetShortOptions(CommandParameter parameter);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Spectre.Console.Cli.FlagValue`1 : object {
    [CompilerGeneratedAttribute]
private bool <IsSet>k__BackingField;
    [CompilerGeneratedAttribute]
private T <Value>k__BackingField;
    public bool IsSet { get; public set; }
    public T Value { get; public set; }
    private Type Spectre.Console.Cli.IFlagValue.Type { get; }
    [NullableAttribute("2")]
private object Spectre.Console.Cli.IFlagValue.Value { get; private set; }
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsSet();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsSet(bool value);
    [CompilerGeneratedAttribute]
public T get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(T value);
    private sealed virtual override Type Spectre.Console.Cli.IFlagValue.get_Type();
    [NullableContextAttribute("2")]
private sealed virtual override object Spectre.Console.Cli.IFlagValue.get_Value();
    [NullableContextAttribute("2")]
private sealed virtual override void Spectre.Console.Cli.IFlagValue.set_Value(object value);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Spectre.Console.Cli.HelpWriter : object {
    public static IEnumerable`1<IRenderable> Write(CommandModel model, bool writeOptionsDefaultValues);
    public static IEnumerable`1<IRenderable> WriteCommand(CommandModel model, CommandInfo command, bool writeOptionsDefaultValues);
    [IteratorStateMachineAttribute("Spectre.Console.Cli.HelpWriter/<GetDescription>d__4")]
private static IEnumerable`1<IRenderable> GetDescription(CommandInfo command);
    private static IEnumerable`1<IRenderable> GetUsage(CommandModel model, CommandInfo command);
    private static IEnumerable`1<IRenderable> GetExamples(CommandModel model, CommandInfo command);
    private static IEnumerable`1<IRenderable> GetArguments(CommandInfo command);
    private static IEnumerable`1<IRenderable> GetOptions(CommandModel model, CommandInfo command, bool writeDefaultValues);
    private static IEnumerable`1<IRenderable> GetCommands(CommandModel model, ICommandContainer command, bool isDefaultCommand);
    [CompilerGeneratedAttribute]
internal static string <GetOptions>g__GetOptionParts|8_1(HelpOption option);
    [CompilerGeneratedAttribute]
internal static string <GetOptions>g__Bold|8_2(object obj);
}
[NullableContextAttribute("1")]
public interface Spectre.Console.Cli.IBranchConfigurator {
    public abstract virtual IBranchConfigurator WithAlias(string name);
}
[NullableContextAttribute("1")]
public interface Spectre.Console.Cli.ICommand {
    public abstract virtual ValidationResult Validate(CommandContext context, CommandSettings settings);
    public abstract virtual Task`1<int> Execute(CommandContext context, CommandSettings settings);
}
public interface Spectre.Console.Cli.ICommand`1 {
    [NullableContextAttribute("1")]
public abstract virtual Task`1<int> Execute(CommandContext context, TSettings settings);
}
[NullableContextAttribute("1")]
public interface Spectre.Console.Cli.ICommandApp {
    public abstract virtual void Configure(Action`1<IConfigurator> configuration);
    public abstract virtual int Run(IEnumerable`1<string> args);
    public abstract virtual Task`1<int> RunAsync(IEnumerable`1<string> args);
}
[NullableContextAttribute("2")]
public interface Spectre.Console.Cli.ICommandAppSettings {
    public string ApplicationName { get; public set; }
    public string ApplicationVersion { get; public set; }
    public bool ShowOptionDefaultValues { get; public set; }
    public IAnsiConsole Console { get; public set; }
    public ICommandInterceptor Interceptor { get; public set; }
    [NullableAttribute("1")]
public ITypeRegistrarFrontend Registrar { get; }
    public CaseSensitivity CaseSensitivity { get; public set; }
    public bool TrimTrailingPeriod { get; public set; }
    public bool StrictParsing { get; public set; }
    public bool ConvertFlagsToRemainingArguments { get; public set; }
    public bool PropagateExceptions { get; public set; }
    public bool ValidateExamples { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<Exception, int> ExceptionHandler { get; public set; }
    public abstract virtual string get_ApplicationName();
    public abstract virtual void set_ApplicationName(string value);
    public abstract virtual string get_ApplicationVersion();
    public abstract virtual void set_ApplicationVersion(string value);
    public abstract virtual bool get_ShowOptionDefaultValues();
    public abstract virtual void set_ShowOptionDefaultValues(bool value);
    public abstract virtual IAnsiConsole get_Console();
    public abstract virtual void set_Console(IAnsiConsole value);
    public abstract virtual ICommandInterceptor get_Interceptor();
    public abstract virtual void set_Interceptor(ICommandInterceptor value);
    [NullableContextAttribute("1")]
public abstract virtual ITypeRegistrarFrontend get_Registrar();
    public abstract virtual CaseSensitivity get_CaseSensitivity();
    public abstract virtual void set_CaseSensitivity(CaseSensitivity value);
    public abstract virtual bool get_TrimTrailingPeriod();
    public abstract virtual void set_TrimTrailingPeriod(bool value);
    public abstract virtual bool get_StrictParsing();
    public abstract virtual void set_StrictParsing(bool value);
    public abstract virtual bool get_ConvertFlagsToRemainingArguments();
    public abstract virtual void set_ConvertFlagsToRemainingArguments(bool value);
    public abstract virtual bool get_PropagateExceptions();
    public abstract virtual void set_PropagateExceptions(bool value);
    public abstract virtual bool get_ValidateExamples();
    public abstract virtual void set_ValidateExamples(bool value);
    public abstract virtual Func`2<Exception, int> get_ExceptionHandler();
    public abstract virtual void set_ExceptionHandler(Func`2<Exception, int> value);
}
[NullableContextAttribute("1")]
public interface Spectre.Console.Cli.ICommandConfigurator {
    public abstract virtual ICommandConfigurator WithExample(String[] args);
    public abstract virtual ICommandConfigurator WithAlias(string name);
    public abstract virtual ICommandConfigurator WithDescription(string description);
    public abstract virtual ICommandConfigurator WithData(object data);
    public abstract virtual ICommandConfigurator IsHidden();
}
[NullableContextAttribute("1")]
internal interface Spectre.Console.Cli.ICommandContainer {
    public IList`1<CommandInfo> Commands { get; }
    [NullableAttribute("2")]
public CommandInfo DefaultCommand { get; }
    public abstract virtual IList`1<CommandInfo> get_Commands();
    [NullableContextAttribute("2")]
public abstract virtual CommandInfo get_DefaultCommand();
}
[NullableContextAttribute("1")]
public interface Spectre.Console.Cli.ICommandInterceptor {
    public abstract virtual void Intercept(CommandContext context, CommandSettings settings);
}
public interface Spectre.Console.Cli.ICommandLimiter`1 {
}
[NullableContextAttribute("1")]
public interface Spectre.Console.Cli.ICommandParameterInfo {
    public string PropertyName { get; }
    public Type ParameterType { get; }
    [NullableAttribute("2")]
public string Description { get; }
    public abstract virtual string get_PropertyName();
    public abstract virtual Type get_ParameterType();
    [NullableContextAttribute("2")]
public abstract virtual string get_Description();
}
[NullableContextAttribute("1")]
internal interface Spectre.Console.Cli.IConfiguration {
    public IList`1<ConfiguredCommand> Commands { get; }
    public CommandAppSettings Settings { get; }
    [NullableAttribute("2")]
public ConfiguredCommand DefaultCommand { get; }
    public IList`1<String[]> Examples { get; }
    public abstract virtual IList`1<ConfiguredCommand> get_Commands();
    public abstract virtual CommandAppSettings get_Settings();
    [NullableContextAttribute("2")]
public abstract virtual ConfiguredCommand get_DefaultCommand();
    public abstract virtual IList`1<String[]> get_Examples();
}
[NullableContextAttribute("1")]
public interface Spectre.Console.Cli.IConfigurator {
    public ICommandAppSettings Settings { get; }
    public abstract virtual ICommandAppSettings get_Settings();
    public abstract virtual void AddExample(String[] args);
    public abstract virtual ICommandConfigurator AddCommand(string name);
    public abstract virtual ICommandConfigurator AddDelegate(string name, Func`3<CommandContext, TSettings, int> func);
    public abstract virtual IBranchConfigurator AddBranch(string name, Action`1<IConfigurator`1<TSettings>> action);
}
[NullableContextAttribute("1")]
public interface Spectre.Console.Cli.IConfigurator`1 {
    public abstract virtual void SetDescription(string description);
    public abstract virtual void AddExample(String[] args);
    public abstract virtual void SetDefaultCommand();
    public abstract virtual void HideBranch();
    public abstract virtual ICommandConfigurator AddCommand(string name);
    public abstract virtual ICommandConfigurator AddDelegate(string name, Func`3<CommandContext, TDerivedSettings, int> func);
    public abstract virtual IBranchConfigurator AddBranch(string name, Action`1<IConfigurator`1<TDerivedSettings>> action);
}
[NullableContextAttribute("2")]
public interface Spectre.Console.Cli.IFlagValue {
    public bool IsSet { get; public set; }
    [NullableAttribute("1")]
public Type Type { get; }
    public object Value { get; public set; }
    public abstract virtual bool get_IsSet();
    public abstract virtual void set_IsSet(bool value);
    [NullableContextAttribute("1")]
public abstract virtual Type get_Type();
    public abstract virtual object get_Value();
    public abstract virtual void set_Value(object value);
}
internal interface Spectre.Console.Cli.IMultiMap {
    public abstract virtual void Add(ValueTuple`2<object, object> pair);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Spectre.Console.Cli.InstanceActivator : ComponentActivator {
    private object _instance;
    public InstanceActivator(object instance);
    public virtual object Activate(DefaultTypeResolver container);
    public virtual ComponentActivator CreateCopy();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Spectre.Console.Cli.Internal.Configuration.DefaultCommandConfigurator : object {
    private ConfiguredCommand _defaultCommand;
    internal DefaultCommandConfigurator(ConfiguredCommand defaultCommand);
    public DefaultCommandConfigurator WithDescription(string description);
    public DefaultCommandConfigurator WithData(object data);
}
[NullableContextAttribute("1")]
internal interface Spectre.Console.Cli.IPairDeconstructor {
    public abstract virtual ValueTuple`2<object, object> Deconstruct(ITypeResolver resolver, Type keyType, Type valueType, string value);
}
[NullableContextAttribute("1")]
public interface Spectre.Console.Cli.IRemainingArguments {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ILookup`2<string, string> Parsed { get; }
    public IReadOnlyList`1<string> Raw { get; }
    public abstract virtual ILookup`2<string, string> get_Parsed();
    public abstract virtual IReadOnlyList`1<string> get_Raw();
}
[NullableContextAttribute("1")]
public interface Spectre.Console.Cli.ITypeRegistrar {
    public abstract virtual void Register(Type service, Type implementation);
    public abstract virtual void RegisterInstance(Type service, object implementation);
    public abstract virtual void RegisterLazy(Type service, Func`1<object> factory);
    public abstract virtual ITypeResolver Build();
}
[NullableContextAttribute("1")]
public interface Spectre.Console.Cli.ITypeRegistrarFrontend {
    [NullableContextAttribute("0")]
public abstract virtual void Register();
    public abstract virtual void RegisterInstance(TImplementation instance);
    public abstract virtual void RegisterInstance(TImplementation instance);
}
[NullableContextAttribute("2")]
public interface Spectre.Console.Cli.ITypeResolver {
    public abstract virtual object Resolve(Type type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Spectre.Console.Cli.ListExtensions : object {
    [ExtensionAttribute]
public static void ForEach(IEnumerable`1<T> source, Action`1<T> action);
    [ExtensionAttribute]
public static T AddAndReturn(IList`1<T> source, T item);
    [ExtensionAttribute]
public static void AddIfNotNull(IList`1<T> source, T item);
    [ExtensionAttribute]
public static void AddRangeIfNotNull(IList`1<T> source, IEnumerable`1<T> items);
    [ExtensionAttribute]
public static void AddRange(IList`1<T> source, IEnumerable`1<T> items);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Spectre.Console.Cli.MappedCommandParameter : object {
    [CompilerGeneratedAttribute]
private CommandParameter <Parameter>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public CommandParameter Parameter { get; }
    [NullableAttribute("2")]
public string Value { get; }
    public MappedCommandParameter(CommandParameter parameter, string value);
    [CompilerGeneratedAttribute]
public CommandParameter get_Parameter();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Value();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
internal class Spectre.Console.Cli.MultiMap`2 : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IDictionary`2<TKey, MultiMapGrouping<TKey, TValue>> _lookup;
    private IDictionary`2<TKey, TValue> _dictionary;
    public int Count { get; }
    public bool IsReadOnly { get; }
    public ICollection`1<TKey> Keys { get; }
    public ICollection`1<TValue> Values { get; }
    private IEnumerable`1<TKey> System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Keys { get; }
    private IEnumerable`1<TValue> System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Values { get; }
    private TValue System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Item { get; }
    private TValue System.Collections.Generic.IDictionary<TKey,TValue>.Item { get; private set; }
    public IEnumerable`1<TValue> Item { get; }
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual ICollection`1<TKey> get_Keys();
    public sealed virtual ICollection`1<TValue> get_Values();
    private sealed virtual override IEnumerable`1<TKey> System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.get_Keys();
    private sealed virtual override IEnumerable`1<TValue> System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.get_Values();
    private sealed virtual override TValue System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.get_Item(TKey key);
    private sealed virtual override TValue System.Collections.Generic.IDictionary<TKey,TValue>.get_Item(TKey key);
    private sealed virtual override void System.Collections.Generic.IDictionary<TKey,TValue>.set_Item(TKey key, TValue value);
    public sealed virtual IEnumerable`1<TValue> get_Item(TKey key);
    public sealed virtual bool Contains(TKey key);
    [IteratorStateMachineAttribute("Spectre.Console.Cli.MultiMap`2/<GetEnumerator>d__24")]
public sealed virtual IEnumerator`1<IGrouping`2<TKey, TValue>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual void Add(TKey key, TValue value);
    public sealed virtual bool ContainsKey(TKey key);
    public sealed virtual bool Remove(TKey key);
    public sealed virtual bool TryGetValue(TKey key, TValue& value);
    public sealed virtual void Add(KeyValuePair`2<TKey, TValue> item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(KeyValuePair`2<TKey, TValue> item);
    public sealed virtual void CopyTo(KeyValuePair`2[] array, int arrayIndex);
    public sealed virtual bool Remove(KeyValuePair`2<TKey, TValue> item);
    private sealed virtual override IEnumerator`1<KeyValuePair`2<TKey, TValue>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>.GetEnumerator();
    public sealed virtual void Add(ValueTuple`2<object, object> pair);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public abstract class Spectre.Console.Cli.PairDeconstructor`2 : object {
    protected abstract virtual ValueTuple`2<TKey, TValue> Deconstruct(string value);
    [NullableContextAttribute("1")]
private sealed virtual override ValueTuple`2<object, object> Spectre.Console.Cli.IPairDeconstructor.Deconstruct(ITypeResolver resolver, Type keyType, Type valueType, string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("128")]
public class Spectre.Console.Cli.PairDeconstructorAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    public Type Type { get; }
    public PairDeconstructorAttribute(Type type);
    [CompilerGeneratedAttribute]
public Type get_Type();
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ObsoleteAttribute("Use PairDeconstructor instead")]
public abstract class Spectre.Console.Cli.PairDeconstuctor`2 : PairDeconstructor`2<TKey, TValue> {
}
internal enum Spectre.Console.Cli.ParameterKind : Enum {
    public int value__;
    [DescriptionAttribute("flag")]
public static ParameterKind Flag;
    [DescriptionAttribute("scalar")]
public static ParameterKind Scalar;
    [DescriptionAttribute("vector")]
public static ParameterKind Vector;
    [DescriptionAttribute("flagvalue")]
public static ParameterKind FlagWithValue;
    [DescriptionAttribute("pair")]
public static ParameterKind Pair;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("128")]
public abstract class Spectre.Console.Cli.ParameterValidationAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ErrorMessage>k__BackingField;
    public string ErrorMessage { get; }
    protected ParameterValidationAttribute(string errorMessage);
    [CompilerGeneratedAttribute]
public string get_ErrorMessage();
    public abstract virtual ValidationResult Validate(CommandParameterContext context);
}
[AttributeUsageAttribute("128")]
public abstract class Spectre.Console.Cli.ParameterValueProviderAttribute : Attribute {
    [NullableContextAttribute("1")]
public abstract virtual bool TryGetValue(CommandParameterContext context, Object& result);
}
internal enum Spectre.Console.Cli.ParsingMode : Enum {
    public int value__;
    public static ParsingMode Relaxed;
    public static ParsingMode Strict;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Spectre.Console.Cli.ReflectionActivator : ComponentActivator {
    private Type _type;
    private ConstructorInfo _constructor;
    private List`1<ParameterInfo> _parameters;
    public ReflectionActivator(Type type);
    public virtual object Activate(DefaultTypeResolver container);
    public virtual ComponentActivator CreateCopy();
    private static ConstructorInfo GetGreediestConstructor(Type type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Spectre.Console.Cli.RemainingArguments : object {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<string> <Raw>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private ILookup`2<string, string> <Parsed>k__BackingField;
    public IReadOnlyList`1<string> Raw { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ILookup`2<string, string> Parsed { get; }
    public RemainingArguments(ILookup`2<string, string> remaining, IReadOnlyList`1<string> raw);
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyList`1<string> get_Raw();
    [CompilerGeneratedAttribute]
public sealed virtual ILookup`2<string, string> get_Parsed();
}
[ExtensionAttribute]
internal static class Spectre.Console.Cli.StringExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
internal static int OrdinalIndexOf(string text, char token);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Spectre.Console.Cli.StringWriterWithEncoding : StringWriter {
    [CompilerGeneratedAttribute]
private Encoding <Encoding>k__BackingField;
    public Encoding Encoding { get; }
    public StringWriterWithEncoding(Encoding encoding);
    [CompilerGeneratedAttribute]
public virtual Encoding get_Encoding();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Spectre.Console.Cli.TemplateParser : object {
    public static ArgumentResult ParseArgumentTemplate(string template);
    public static OptionResult ParseOptionTemplate(string template);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Spectre.Console.Cli.TemplateToken : object {
    [CompilerGeneratedAttribute]
private Kind <TokenKind>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Position>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Representation>k__BackingField;
    public Kind TokenKind { get; }
    public int Position { get; }
    public string Value { get; }
    public string Representation { get; }
    public TemplateToken(Kind kind, int position, string value, string representation);
    [CompilerGeneratedAttribute]
public Kind get_TokenKind();
    [CompilerGeneratedAttribute]
public int get_Position();
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public string get_Representation();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Spectre.Console.Cli.TemplateTokenizer : object {
    public static IReadOnlyList`1<TemplateToken> Tokenize(string template);
    private static void EatWhitespace(TextBuffer buffer);
    private static TemplateToken ReadOption(TextBuffer buffer);
    private static string ReadOptionName(TextBuffer buffer);
    private static TemplateToken ReadValue(TextBuffer buffer, bool required);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Spectre.Console.Cli.TextBuffer : object {
    private StringReader _reader;
    [CompilerGeneratedAttribute]
private string <Original>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Position>k__BackingField;
    public bool ReachedEnd { get; }
    public string Original { get; }
    public int Position { get; private set; }
    public TextBuffer(string text);
    public TextBuffer(TextBuffer buffer, string text);
    public bool get_ReachedEnd();
    [CompilerGeneratedAttribute]
public string get_Original();
    [CompilerGeneratedAttribute]
public int get_Position();
    [CompilerGeneratedAttribute]
private void set_Position(int value);
    public sealed virtual void Dispose();
    public char Peek();
    public bool TryPeek(Char& character);
    public void Consume();
    public void Consume(char character);
    public bool IsNext(char character);
    public char Read();
    private void EnsureNotAtEnd();
}
[ExtensionAttribute]
internal static class Spectre.Console.Cli.TypeExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static bool IsPairDeconstructable(Type type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Spectre.Console.Cli.TypeRegistrar : object {
    private ITypeRegistrar _registrar;
    internal TypeRegistrar(ITypeRegistrar registrar);
    [NullableContextAttribute("0")]
public sealed virtual void Register();
    public sealed virtual void RegisterInstance(TImplementation instance);
    public sealed virtual void RegisterInstance(TImplementation instance);
}
[ExtensionAttribute]
internal static class Spectre.Console.Cli.TypeRegistrarExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static void RegisterDependencies(ITypeRegistrar registrar, CommandModel model);
}
internal class Spectre.Console.Cli.TypeResolverAdapter : object {
    [NullableAttribute("2")]
private ITypeResolver _resolver;
    [NullableContextAttribute("2")]
public TypeResolverAdapter(ITypeResolver resolver);
    [NullableContextAttribute("2")]
public sealed virtual object Resolve(Type type);
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
public interface Spectre.Console.Cli.Unsafe.IUnsafeBranchConfigurator {
    public abstract virtual void SetDescription(string description);
    public abstract virtual void AddExample(String[] args);
}
[NullableContextAttribute("1")]
public interface Spectre.Console.Cli.Unsafe.IUnsafeConfigurator {
    public abstract virtual ICommandConfigurator AddCommand(string name, Type command);
    public abstract virtual IBranchConfigurator AddBranch(string name, Type settings, Action`1<IUnsafeBranchConfigurator> action);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Spectre.Console.Cli.Unsafe.UnsafeConfiguratorExtensions : object {
    [ExtensionAttribute]
public static IUnsafeConfigurator SafetyOff(IConfigurator configurator);
    [ExtensionAttribute]
public static IConfigurator SafetyOn(IUnsafeConfigurator configurator);
    [ExtensionAttribute]
public static IUnsafeConfigurator SafetyOff(IConfigurator`1<TSettings> configurator);
    [ExtensionAttribute]
public static IConfigurator`1<TSettings> SafetyOn(IUnsafeBranchConfigurator configurator);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[DescriptionAttribute("Displays the CLI library version")]
internal class Spectre.Console.Cli.VersionCommand : Command`1<Settings> {
    private IAnsiConsole _writer;
    public VersionCommand(IConfiguration configuration);
    public virtual int Execute(CommandContext context, Settings settings);
}
internal static class Spectre.Console.Cli.VersionHelper : object {
    [NullableContextAttribute("1")]
public static string GetVersion(Assembly assembly);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[DescriptionAttribute("Generates an XML representation of the CLI configuration.")]
internal class Spectre.Console.Cli.XmlDocCommand : Command`1<Settings> {
    private CommandModel _model;
    private IAnsiConsole _writer;
    public XmlDocCommand(IConfiguration configuration, CommandModel model);
    public virtual int Execute(CommandContext context, Settings settings);
    public static string Serialize(CommandModel model);
    private static XmlDocument SerializeModel(CommandModel model);
    private static XmlNode CreateCommandNode(XmlDocument doc, CommandInfo command, bool isDefaultCommand);
    [IteratorStateMachineAttribute("Spectre.Console.Cli.XmlDocCommand/<CreateParameterNodes>d__8")]
private static IEnumerable`1<XmlNode> CreateParameterNodes(XmlDocument document, CommandInfo command);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Spectre.Console.Cli.XmlElementExtensions : object {
    [ExtensionAttribute]
public static void SetNullableAttribute(XmlElement element, string name, string value);
    [ExtensionAttribute]
public static void SetNullableAttribute(XmlElement element, string name, IEnumerable`1<string> values);
    [ExtensionAttribute]
public static void SetBooleanAttribute(XmlElement element, string name, bool value);
    [ExtensionAttribute]
public static void SetEnumAttribute(XmlElement element, string name, Enum value);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
