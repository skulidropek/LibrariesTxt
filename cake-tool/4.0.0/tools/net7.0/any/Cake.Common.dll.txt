[ExtensionAttribute]
[CakeAliasCategoryAttribute("Arguments")]
public static class Cake.Common.ArgumentAliases : object {
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static bool HasArgument(ICakeContext context, string name);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static T Argument(ICakeContext context, string name);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static ICollection`1<T> Arguments(ICakeContext context, string name);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static ICollection`1<T> Arguments(ICakeContext context, string name, T defaultValue);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static ICollection`1<T> Arguments(ICakeContext context, string name, ICollection`1<T> defaultValues);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static ICollection`1<T> Arguments(ICakeContext context, string name, Func`2<ICakeContext, ICollection`1<T>> defaultValues);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static T Argument(ICakeContext context, string name, T defaultValue);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static IDictionary`2<string, ICollection`1<string>> Arguments(ICakeContext context);
    private static T Convert(string value);
}
public abstract class Cake.Common.Build.AppVeyor.AppVeyorInfo : object {
    private ICakeEnvironment _environment;
    protected AppVeyorInfo(ICakeEnvironment environment);
    protected string GetEnvironmentString(string variable);
    protected int GetEnvironmentInteger(string variable);
    protected bool GetEnvironmentBoolean(string variable);
}
public enum Cake.Common.Build.AppVeyor.AppVeyorMessageCategoryType : Enum {
    public int value__;
    public static AppVeyorMessageCategoryType Information;
    public static AppVeyorMessageCategoryType Warning;
    public static AppVeyorMessageCategoryType Error;
}
public class Cake.Common.Build.AppVeyor.AppVeyorProvider : object {
    private ICakeEnvironment _environment;
    private IProcessRunner _processRunner;
    private ICakeLog _log;
    [CompilerGeneratedAttribute]
private AppVeyorEnvironmentInfo <Environment>k__BackingField;
    public bool IsRunningOnAppVeyor { get; }
    public AppVeyorEnvironmentInfo Environment { get; }
    public AppVeyorProvider(ICakeEnvironment environment, IProcessRunner processRunner, ICakeLog log);
    public sealed virtual bool get_IsRunningOnAppVeyor();
    [CompilerGeneratedAttribute]
public sealed virtual AppVeyorEnvironmentInfo get_Environment();
    public sealed virtual void UploadArtifact(FilePath path);
    public sealed virtual void UploadArtifact(FilePath path, AppVeyorUploadArtifactsSettings settings);
    public sealed virtual void UploadArtifact(FilePath path, Action`1<AppVeyorUploadArtifactsSettings> settingsAction);
    public sealed virtual void UploadTestResults(FilePath path, AppVeyorTestResultsType resultsType);
    public sealed virtual void UpdateBuildVersion(string version);
    public sealed virtual void AddMessage(string message, AppVeyorMessageCategoryType category, string details);
    private void StartAppVeyor(ProcessArgumentBuilder arguments, string memberName);
}
[ExtensionAttribute]
public static class Cake.Common.Build.AppVeyor.AppVeyorProviderAddMessageExtensions : object {
    [ExtensionAttribute]
public static void AddInformationalMessage(IAppVeyorProvider provider, string format, Object[] args);
    [ExtensionAttribute]
public static void AddWarningMessage(IAppVeyorProvider provider, string format, Object[] args);
    [ExtensionAttribute]
public static void AddErrorMessage(IAppVeyorProvider provider, string format, Object[] args);
    [ExtensionAttribute]
public static void AddErrorMessage(IAppVeyorProvider provider, string message, Exception exception);
}
public enum Cake.Common.Build.AppVeyor.AppVeyorTestResultsType : Enum {
    public int value__;
    public static AppVeyorTestResultsType MSTest;
    public static AppVeyorTestResultsType XUnit;
    public static AppVeyorTestResultsType NUnit;
    public static AppVeyorTestResultsType NUnit3;
    public static AppVeyorTestResultsType JUnit;
}
public class Cake.Common.Build.AppVeyor.AppVeyorUploadArtifactsSettings : object {
    [CompilerGeneratedAttribute]
private AppVeyorUploadArtifactType <ArtifactType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DeploymentName>k__BackingField;
    public AppVeyorUploadArtifactType ArtifactType { get; public set; }
    public string DeploymentName { get; public set; }
    [CompilerGeneratedAttribute]
public AppVeyorUploadArtifactType get_ArtifactType();
    [CompilerGeneratedAttribute]
public void set_ArtifactType(AppVeyorUploadArtifactType value);
    [CompilerGeneratedAttribute]
public string get_DeploymentName();
    [CompilerGeneratedAttribute]
public void set_DeploymentName(string value);
    public AppVeyorUploadArtifactsSettings SetArtifactType(AppVeyorUploadArtifactType type);
    public AppVeyorUploadArtifactsSettings SetDeploymentName(string deploymentName);
}
public enum Cake.Common.Build.AppVeyor.AppVeyorUploadArtifactType : Enum {
    public int value__;
    public static AppVeyorUploadArtifactType Auto;
    public static AppVeyorUploadArtifactType WebDeployPackage;
    public static AppVeyorUploadArtifactType NuGetPackage;
}
public class Cake.Common.Build.AppVeyor.Data.AppVeyorBuildInfo : AppVeyorInfo {
    public string Folder { get; }
    public string Id { get; }
    public int Number { get; }
    public string Version { get; }
    public AppVeyorBuildInfo(ICakeEnvironment environment);
    public string get_Folder();
    public string get_Id();
    public int get_Number();
    public string get_Version();
}
public class Cake.Common.Build.AppVeyor.Data.AppVeyorCommitInfo : AppVeyorInfo {
    public string Id { get; }
    public string Author { get; }
    public string Email { get; }
    public string Timestamp { get; }
    public string Message { get; }
    public string ExtendedMessage { get; }
    public AppVeyorCommitInfo(ICakeEnvironment environment);
    public string get_Id();
    public string get_Author();
    public string get_Email();
    public string get_Timestamp();
    public string get_Message();
    public string get_ExtendedMessage();
}
public class Cake.Common.Build.AppVeyor.Data.AppVeyorEnvironmentInfo : AppVeyorInfo {
    [CompilerGeneratedAttribute]
private AppVeyorProjectInfo <Project>k__BackingField;
    [CompilerGeneratedAttribute]
private AppVeyorBuildInfo <Build>k__BackingField;
    [CompilerGeneratedAttribute]
private AppVeyorPullRequestInfo <PullRequest>k__BackingField;
    [CompilerGeneratedAttribute]
private AppVeyorRepositoryInfo <Repository>k__BackingField;
    public string ApiUrl { get; }
    public string JobId { get; }
    public string JobName { get; }
    public bool ScheduledBuild { get; }
    public string Platform { get; }
    public string Configuration { get; }
    public AppVeyorProjectInfo Project { get; }
    public AppVeyorBuildInfo Build { get; }
    public AppVeyorPullRequestInfo PullRequest { get; }
    public AppVeyorRepositoryInfo Repository { get; }
    public AppVeyorEnvironmentInfo(ICakeEnvironment environment);
    public string get_ApiUrl();
    public string get_JobId();
    public string get_JobName();
    public bool get_ScheduledBuild();
    public string get_Platform();
    public string get_Configuration();
    [CompilerGeneratedAttribute]
public AppVeyorProjectInfo get_Project();
    [CompilerGeneratedAttribute]
public AppVeyorBuildInfo get_Build();
    [CompilerGeneratedAttribute]
public AppVeyorPullRequestInfo get_PullRequest();
    [CompilerGeneratedAttribute]
public AppVeyorRepositoryInfo get_Repository();
}
public class Cake.Common.Build.AppVeyor.Data.AppVeyorProjectInfo : AppVeyorInfo {
    public string Id { get; }
    public string Name { get; }
    public string Slug { get; }
    public AppVeyorProjectInfo(ICakeEnvironment environment);
    public string get_Id();
    public string get_Name();
    public string get_Slug();
}
public class Cake.Common.Build.AppVeyor.Data.AppVeyorPullRequestInfo : AppVeyorInfo {
    public bool IsPullRequest { get; }
    public int Number { get; }
    public string Title { get; }
    public AppVeyorPullRequestInfo(ICakeEnvironment environment);
    public bool get_IsPullRequest();
    public int get_Number();
    public string get_Title();
}
public class Cake.Common.Build.AppVeyor.Data.AppVeyorRepositoryInfo : AppVeyorInfo {
    [CompilerGeneratedAttribute]
private AppVeyorTagInfo <Tag>k__BackingField;
    [CompilerGeneratedAttribute]
private AppVeyorCommitInfo <Commit>k__BackingField;
    public string Provider { get; }
    public string Scm { get; }
    public string Name { get; }
    public string Branch { get; }
    public AppVeyorTagInfo Tag { get; }
    public AppVeyorCommitInfo Commit { get; }
    public AppVeyorRepositoryInfo(ICakeEnvironment environment);
    public string get_Provider();
    public string get_Scm();
    public string get_Name();
    public string get_Branch();
    [CompilerGeneratedAttribute]
public AppVeyorTagInfo get_Tag();
    [CompilerGeneratedAttribute]
public AppVeyorCommitInfo get_Commit();
}
public class Cake.Common.Build.AppVeyor.Data.AppVeyorTagInfo : AppVeyorInfo {
    public bool IsTag { get; }
    public string Name { get; }
    public AppVeyorTagInfo(ICakeEnvironment environment);
    public bool get_IsTag();
    public string get_Name();
}
[CompilerGeneratedAttribute]
internal class Cake.Common.Build.AppVeyor.Data.NamespaceDoc : object {
}
public interface Cake.Common.Build.AppVeyor.IAppVeyorProvider {
    public bool IsRunningOnAppVeyor { get; }
    public AppVeyorEnvironmentInfo Environment { get; }
    public abstract virtual bool get_IsRunningOnAppVeyor();
    public abstract virtual AppVeyorEnvironmentInfo get_Environment();
    public abstract virtual void UploadArtifact(FilePath path);
    public abstract virtual void UploadArtifact(FilePath path, AppVeyorUploadArtifactsSettings settings);
    public abstract virtual void UploadArtifact(FilePath path, Action`1<AppVeyorUploadArtifactsSettings> settingsAction);
    public abstract virtual void UploadTestResults(FilePath path, AppVeyorTestResultsType resultsType);
    public abstract virtual void UpdateBuildVersion(string version);
    public abstract virtual void AddMessage(string message, AppVeyorMessageCategoryType category, string details);
}
[CompilerGeneratedAttribute]
internal class Cake.Common.Build.AppVeyor.NamespaceDoc : object {
}
public class Cake.Common.Build.AzurePipelines.AzurePipelinesCommands : object {
    private static string FormatPrefix;
    private static string MessagePrefix;
    private static string MessagePostfix;
    private ICakeEnvironment _environment;
    private IBuildSystemServiceMessageWriter _writer;
    public AzurePipelinesCommands(ICakeEnvironment environment, IBuildSystemServiceMessageWriter writer);
    public sealed virtual void WriteWarning(string message);
    public sealed virtual void WriteWarning(string message, AzurePipelinesMessageData data);
    public sealed virtual void WriteError(string message);
    public sealed virtual void WriteError(string message, AzurePipelinesMessageData data);
    public sealed virtual void BeginGroup(string name);
    public sealed virtual void EndGroup();
    public sealed virtual void Section(string name);
    public sealed virtual void SetProgress(int progress, string currentOperation);
    public sealed virtual void CompleteCurrentTask();
    public sealed virtual void CompleteCurrentTask(AzurePipelinesTaskResult result);
    public sealed virtual Guid CreateNewRecord(string name, string type, int order);
    public sealed virtual Guid CreateNewRecord(string name, string type, int order, AzurePipelinesRecordData data);
    public sealed virtual void UpdateRecord(Guid id, AzurePipelinesRecordData data);
    public sealed virtual void SetVariable(string name, string value);
    public sealed virtual void SetOutputVariable(string name, string value);
    public sealed virtual void SetSecretVariable(string name, string value);
    public sealed virtual void UploadTaskSummary(FilePath markdownPath);
    public sealed virtual void UploadTaskLogFile(FilePath logFile);
    public sealed virtual void LinkArtifact(string name, AzurePipelinesArtifactType type, string location);
    public sealed virtual void UploadArtifact(string folderName, FilePath file);
    public sealed virtual void UploadArtifact(string folderName, FilePath file, string artifactName);
    public sealed virtual void UploadArtifactDirectory(DirectoryPath directory);
    public sealed virtual void UploadArtifactDirectory(DirectoryPath directory, string artifactName);
    public sealed virtual void UploadBuildLogFile(FilePath logFile);
    public sealed virtual void UpdateBuildNumber(string buildNumber);
    public sealed virtual void AddBuildTag(string tag);
    public sealed virtual void PublishTestResults(AzurePipelinesPublishTestResultsData data);
    public sealed virtual void PublishCodeCoverage(AzurePipelinesPublishCodeCoverageData data);
    public sealed virtual void PublishCodeCoverage(FilePath summaryFilePath, AzurePipelinesPublishCodeCoverageData data);
    public sealed virtual void PublishCodeCoverage(FilePath summaryFilePath, Action`1<AzurePipelinesPublishCodeCoverageData> action);
    private void WriteFormatCommand(string actionName, string value);
    private void WriteLoggingCommand(string actionName, string value);
    private void WriteLoggingCommand(string actionName, Dictionary`2<string, string> properties, string value);
}
[ExtensionAttribute]
public static class Cake.Common.Build.AzurePipelines.AzurePipelinesDisposableExtensions : object {
    [ExtensionAttribute]
public static IDisposable Group(IAzurePipelinesCommands azurePipelinesCommands, string name);
}
public abstract class Cake.Common.Build.AzurePipelines.AzurePipelinesInfo : object {
    private ICakeEnvironment _environment;
    protected AzurePipelinesInfo(ICakeEnvironment environment);
    protected string GetEnvironmentString(string variable);
    protected int GetEnvironmentInteger(string variable);
    protected bool GetEnvironmentBoolean(string variable);
    protected Uri GetEnvironmentUri(string variable);
    protected Nullable`1<AzurePipelinesRepositoryType> GetRepositoryType(string variable);
}
public class Cake.Common.Build.AzurePipelines.AzurePipelinesProvider : object {
    private ICakeEnvironment _environment;
    [CompilerGeneratedAttribute]
private AzurePipelinesEnvironmentInfo <Environment>k__BackingField;
    [CompilerGeneratedAttribute]
private IAzurePipelinesCommands <Commands>k__BackingField;
    public bool IsRunningOnAzurePipelines { get; }
    public AzurePipelinesEnvironmentInfo Environment { get; }
    public IAzurePipelinesCommands Commands { get; }
    private bool IsHostedAgent { get; }
    public AzurePipelinesProvider(ICakeEnvironment environment, IBuildSystemServiceMessageWriter writer);
    public sealed virtual bool get_IsRunningOnAzurePipelines();
    [CompilerGeneratedAttribute]
public sealed virtual AzurePipelinesEnvironmentInfo get_Environment();
    [CompilerGeneratedAttribute]
public sealed virtual IAzurePipelinesCommands get_Commands();
    private bool get_IsHostedAgent();
}
public class Cake.Common.Build.AzurePipelines.Data.AzurePipelinesAgentInfo : AzurePipelinesInfo {
    public FilePath BuildDirectory { get; }
    public FilePath HomeDirectory { get; }
    public FilePath WorkingDirectory { get; }
    public int Id { get; }
    public string JobName { get; }
    public string JobStatus { get; }
    public string Name { get; }
    public string MachineName { get; }
    public FilePath ToolsDirectory { get; }
    public bool IsHosted { get; }
    public AzurePipelinesAgentInfo(ICakeEnvironment environment);
    public FilePath get_BuildDirectory();
    public FilePath get_HomeDirectory();
    public FilePath get_WorkingDirectory();
    public int get_Id();
    public string get_JobName();
    public string get_JobStatus();
    public string get_Name();
    public string get_MachineName();
    public FilePath get_ToolsDirectory();
    public bool get_IsHosted();
}
public enum Cake.Common.Build.AzurePipelines.Data.AzurePipelinesArtifactType : Enum {
    public int value__;
    public static AzurePipelinesArtifactType Container;
    public static AzurePipelinesArtifactType FilePath;
    public static AzurePipelinesArtifactType VersionControl;
    public static AzurePipelinesArtifactType GitRef;
    public static AzurePipelinesArtifactType TFVCLabel;
}
public class Cake.Common.Build.AzurePipelines.Data.AzurePipelinesBuildInfo : AzurePipelinesInfo {
    [CompilerGeneratedAttribute]
private AzurePipelinesTriggeredBy <TriggeredBy>k__BackingField;
    public string AccessToken { get; }
    public bool Debug { get; }
    public DirectoryPath ArtifactStagingDirectory { get; }
    public DirectoryPath BinariesDirectory { get; }
    public int Id { get; }
    public string Number { get; }
    public Uri Uri { get; }
    public string QueuedBy { get; }
    public string Reason { get; }
    public string RequestedFor { get; }
    public string RequestedForEmail { get; }
    public DirectoryPath SourcesDirectory { get; }
    public DirectoryPath StagingDirectory { get; }
    public DirectoryPath TestResultsDirectory { get; }
    public AzurePipelinesTriggeredBy TriggeredBy { get; }
    public AzurePipelinesBuildInfo(ICakeEnvironment environment);
    public string get_AccessToken();
    public bool get_Debug();
    public DirectoryPath get_ArtifactStagingDirectory();
    public DirectoryPath get_BinariesDirectory();
    public int get_Id();
    public string get_Number();
    public Uri get_Uri();
    public string get_QueuedBy();
    public string get_Reason();
    public string get_RequestedFor();
    public string get_RequestedForEmail();
    public DirectoryPath get_SourcesDirectory();
    public DirectoryPath get_StagingDirectory();
    public DirectoryPath get_TestResultsDirectory();
    [CompilerGeneratedAttribute]
public AzurePipelinesTriggeredBy get_TriggeredBy();
}
public enum Cake.Common.Build.AzurePipelines.Data.AzurePipelinesCodeCoverageToolType : Enum {
    public int value__;
    public static AzurePipelinesCodeCoverageToolType JaCoCo;
    public static AzurePipelinesCodeCoverageToolType Cobertura;
}
public class Cake.Common.Build.AzurePipelines.Data.AzurePipelinesDefinitionInfo : AzurePipelinesInfo {
    public int Id { get; }
    public string Name { get; }
    public int Version { get; }
    public AzurePipelinesDefinitionInfo(ICakeEnvironment environment);
    public int get_Id();
    public string get_Name();
    public int get_Version();
}
public class Cake.Common.Build.AzurePipelines.Data.AzurePipelinesEnvironmentInfo : AzurePipelinesInfo {
    [CompilerGeneratedAttribute]
private AzurePipelinesRepositoryInfo <Repository>k__BackingField;
    [CompilerGeneratedAttribute]
private AzurePipelinesDefinitionInfo <BuildDefinition>k__BackingField;
    [CompilerGeneratedAttribute]
private AzurePipelinesBuildInfo <Build>k__BackingField;
    [CompilerGeneratedAttribute]
private AzurePipelinesPullRequestInfo <PullRequest>k__BackingField;
    [CompilerGeneratedAttribute]
private AzurePipelinesTeamProjectInfo <TeamProject>k__BackingField;
    [CompilerGeneratedAttribute]
private AzurePipelinesAgentInfo <Agent>k__BackingField;
    public AzurePipelinesRepositoryInfo Repository { get; }
    public AzurePipelinesDefinitionInfo BuildDefinition { get; }
    public AzurePipelinesBuildInfo Build { get; }
    public AzurePipelinesPullRequestInfo PullRequest { get; }
    public AzurePipelinesTeamProjectInfo TeamProject { get; }
    public AzurePipelinesAgentInfo Agent { get; }
    public AzurePipelinesEnvironmentInfo(ICakeEnvironment environment);
    [CompilerGeneratedAttribute]
public AzurePipelinesRepositoryInfo get_Repository();
    [CompilerGeneratedAttribute]
public AzurePipelinesDefinitionInfo get_BuildDefinition();
    [CompilerGeneratedAttribute]
public AzurePipelinesBuildInfo get_Build();
    [CompilerGeneratedAttribute]
public AzurePipelinesPullRequestInfo get_PullRequest();
    [CompilerGeneratedAttribute]
public AzurePipelinesTeamProjectInfo get_TeamProject();
    [CompilerGeneratedAttribute]
public AzurePipelinesAgentInfo get_Agent();
}
public class Cake.Common.Build.AzurePipelines.Data.AzurePipelinesMessageData : object {
    [CompilerGeneratedAttribute]
private string <SourcePath>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <LineNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <ColumnNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <ErrorCode>k__BackingField;
    public string SourcePath { get; public set; }
    public Nullable`1<int> LineNumber { get; public set; }
    public Nullable`1<int> ColumnNumber { get; public set; }
    public Nullable`1<int> ErrorCode { get; public set; }
    [CompilerGeneratedAttribute]
public string get_SourcePath();
    [CompilerGeneratedAttribute]
public void set_SourcePath(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_LineNumber();
    [CompilerGeneratedAttribute]
public void set_LineNumber(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_ColumnNumber();
    [CompilerGeneratedAttribute]
public void set_ColumnNumber(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_ErrorCode();
    [CompilerGeneratedAttribute]
public void set_ErrorCode(Nullable`1<int> value);
    internal Dictionary`2<string, string> GetProperties();
}
public class Cake.Common.Build.AzurePipelines.Data.AzurePipelinesPublishCodeCoverageData : object {
    [CompilerGeneratedAttribute]
private Nullable`1<AzurePipelinesCodeCoverageToolType> <CodeCoverageTool>k__BackingField;
    [CompilerGeneratedAttribute]
private FilePath <SummaryFileLocation>k__BackingField;
    [CompilerGeneratedAttribute]
private DirectoryPath <ReportDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private FilePath[] <AdditionalCodeCoverageFiles>k__BackingField;
    public Nullable`1<AzurePipelinesCodeCoverageToolType> CodeCoverageTool { get; public set; }
    public FilePath SummaryFileLocation { get; public set; }
    public DirectoryPath ReportDirectory { get; public set; }
    public FilePath[] AdditionalCodeCoverageFiles { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<AzurePipelinesCodeCoverageToolType> get_CodeCoverageTool();
    [CompilerGeneratedAttribute]
public void set_CodeCoverageTool(Nullable`1<AzurePipelinesCodeCoverageToolType> value);
    [CompilerGeneratedAttribute]
public FilePath get_SummaryFileLocation();
    [CompilerGeneratedAttribute]
public void set_SummaryFileLocation(FilePath value);
    [CompilerGeneratedAttribute]
public DirectoryPath get_ReportDirectory();
    [CompilerGeneratedAttribute]
public void set_ReportDirectory(DirectoryPath value);
    [CompilerGeneratedAttribute]
public FilePath[] get_AdditionalCodeCoverageFiles();
    [CompilerGeneratedAttribute]
public void set_AdditionalCodeCoverageFiles(FilePath[] value);
    internal Dictionary`2<string, string> GetProperties(ICakeEnvironment environment, FilePath summaryFilePath);
}
public class Cake.Common.Build.AzurePipelines.Data.AzurePipelinesPublishTestResultsData : object {
    [CompilerGeneratedAttribute]
private Nullable`1<AzurePipelinesTestRunnerType> <TestRunner>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<FilePath> <TestResultsFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <MergeTestResults>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Platform>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Configuration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TestRunTitle>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <PublishRunAttachments>k__BackingField;
    public Nullable`1<AzurePipelinesTestRunnerType> TestRunner { get; public set; }
    public ICollection`1<FilePath> TestResultsFiles { get; public set; }
    public Nullable`1<bool> MergeTestResults { get; public set; }
    public string Platform { get; public set; }
    public string Configuration { get; public set; }
    public string TestRunTitle { get; public set; }
    public Nullable`1<bool> PublishRunAttachments { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<AzurePipelinesTestRunnerType> get_TestRunner();
    [CompilerGeneratedAttribute]
public void set_TestRunner(Nullable`1<AzurePipelinesTestRunnerType> value);
    [CompilerGeneratedAttribute]
public ICollection`1<FilePath> get_TestResultsFiles();
    [CompilerGeneratedAttribute]
public void set_TestResultsFiles(ICollection`1<FilePath> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_MergeTestResults();
    [CompilerGeneratedAttribute]
public void set_MergeTestResults(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_Platform();
    [CompilerGeneratedAttribute]
public void set_Platform(string value);
    [CompilerGeneratedAttribute]
public string get_Configuration();
    [CompilerGeneratedAttribute]
public void set_Configuration(string value);
    [CompilerGeneratedAttribute]
public string get_TestRunTitle();
    [CompilerGeneratedAttribute]
public void set_TestRunTitle(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_PublishRunAttachments();
    [CompilerGeneratedAttribute]
public void set_PublishRunAttachments(Nullable`1<bool> value);
    internal Dictionary`2<string, string> GetProperties(ICakeEnvironment environment);
}
public class Cake.Common.Build.AzurePipelines.Data.AzurePipelinesPullRequestInfo : AzurePipelinesInfo {
    public bool IsFork { get; }
    public bool IsPullRequest { get; }
    public int Id { get; }
    public int Number { get; }
    public string SourceBranch { get; }
    public Uri SourceRepositoryUri { get; }
    public string TargetBranch { get; }
    public AzurePipelinesPullRequestInfo(ICakeEnvironment environment);
    public bool get_IsFork();
    public bool get_IsPullRequest();
    public int get_Id();
    public int get_Number();
    public string get_SourceBranch();
    public Uri get_SourceRepositoryUri();
    public string get_TargetBranch();
}
public class Cake.Common.Build.AzurePipelines.Data.AzurePipelinesRecordData : object {
    [CompilerGeneratedAttribute]
private Guid <ParentRecord>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <StartTime>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <FinishTime>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Progress>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<AzurePipelinesTaskStatus> <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<AzurePipelinesTaskResult> <Result>k__BackingField;
    public Guid ParentRecord { get; public set; }
    public Nullable`1<DateTime> StartTime { get; public set; }
    public Nullable`1<DateTime> FinishTime { get; public set; }
    public Nullable`1<int> Progress { get; public set; }
    public Nullable`1<AzurePipelinesTaskStatus> Status { get; public set; }
    public Nullable`1<AzurePipelinesTaskResult> Result { get; public set; }
    [CompilerGeneratedAttribute]
public Guid get_ParentRecord();
    [CompilerGeneratedAttribute]
public void set_ParentRecord(Guid value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_StartTime();
    [CompilerGeneratedAttribute]
public void set_StartTime(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_FinishTime();
    [CompilerGeneratedAttribute]
public void set_FinishTime(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Progress();
    [CompilerGeneratedAttribute]
public void set_Progress(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<AzurePipelinesTaskStatus> get_Status();
    [CompilerGeneratedAttribute]
public void set_Status(Nullable`1<AzurePipelinesTaskStatus> value);
    [CompilerGeneratedAttribute]
public Nullable`1<AzurePipelinesTaskResult> get_Result();
    [CompilerGeneratedAttribute]
public void set_Result(Nullable`1<AzurePipelinesTaskResult> value);
    internal Dictionary`2<string, string> GetProperties();
}
public class Cake.Common.Build.AzurePipelines.Data.AzurePipelinesRepositoryInfo : AzurePipelinesInfo {
    public string SourceBranch { get; }
    public string SourceBranchName { get; }
    public string SourceVersion { get; }
    public string SourceVersionMessage { get; }
    public string Shelveset { get; }
    public string RepoName { get; }
    public Nullable`1<AzurePipelinesRepositoryType> Provider { get; }
    public string GitSubmoduleCheckout { get; }
    public AzurePipelinesRepositoryInfo(ICakeEnvironment environment);
    public string get_SourceBranch();
    public string get_SourceBranchName();
    public string get_SourceVersion();
    public string get_SourceVersionMessage();
    public string get_Shelveset();
    public string get_RepoName();
    public Nullable`1<AzurePipelinesRepositoryType> get_Provider();
    public string get_GitSubmoduleCheckout();
}
public enum Cake.Common.Build.AzurePipelines.Data.AzurePipelinesRepositoryType : Enum {
    public int value__;
    public static AzurePipelinesRepositoryType TfsGit;
    public static AzurePipelinesRepositoryType TfsVersionControl;
    public static AzurePipelinesRepositoryType Git;
    public static AzurePipelinesRepositoryType GitHub;
    public static AzurePipelinesRepositoryType Svn;
}
public enum Cake.Common.Build.AzurePipelines.Data.AzurePipelinesTaskResult : Enum {
    public int value__;
    public static AzurePipelinesTaskResult Succeeded;
    public static AzurePipelinesTaskResult SucceededWithIssues;
    public static AzurePipelinesTaskResult Failed;
    public static AzurePipelinesTaskResult Cancelled;
    public static AzurePipelinesTaskResult Skipped;
}
public enum Cake.Common.Build.AzurePipelines.Data.AzurePipelinesTaskStatus : Enum {
    public int value__;
    public static AzurePipelinesTaskStatus Unknown;
    public static AzurePipelinesTaskStatus Initialized;
    public static AzurePipelinesTaskStatus InProgress;
    public static AzurePipelinesTaskStatus Completed;
}
public class Cake.Common.Build.AzurePipelines.Data.AzurePipelinesTeamProjectInfo : AzurePipelinesInfo {
    public string Name { get; }
    public string Id { get; }
    public Uri CollectionUri { get; }
    public AzurePipelinesTeamProjectInfo(ICakeEnvironment environment);
    public string get_Name();
    public string get_Id();
    public Uri get_CollectionUri();
}
public enum Cake.Common.Build.AzurePipelines.Data.AzurePipelinesTestRunnerType : Enum {
    public int value__;
    public static AzurePipelinesTestRunnerType JUnit;
    public static AzurePipelinesTestRunnerType NUnit;
    public static AzurePipelinesTestRunnerType VSTest;
    public static AzurePipelinesTestRunnerType XUnit;
}
public class Cake.Common.Build.AzurePipelines.Data.AzurePipelinesTriggeredBy : AzurePipelinesInfo {
    public int BuildId { get; }
    public int DefinitionId { get; }
    public string DefinitionName { get; }
    public string BuildNumber { get; }
    public string ProjectId { get; }
    public AzurePipelinesTriggeredBy(ICakeEnvironment environment);
    public int get_BuildId();
    public int get_DefinitionId();
    public string get_DefinitionName();
    public string get_BuildNumber();
    public string get_ProjectId();
}
public interface Cake.Common.Build.AzurePipelines.IAzurePipelinesCommands {
    public abstract virtual void WriteWarning(string message);
    public abstract virtual void WriteWarning(string message, AzurePipelinesMessageData data);
    public abstract virtual void WriteError(string message);
    public abstract virtual void WriteError(string message, AzurePipelinesMessageData data);
    public abstract virtual void BeginGroup(string name);
    public abstract virtual void EndGroup();
    public abstract virtual void Section(string name);
    public abstract virtual void SetProgress(int progress, string currentOperation);
    public abstract virtual void CompleteCurrentTask();
    public abstract virtual void CompleteCurrentTask(AzurePipelinesTaskResult result);
    public abstract virtual Guid CreateNewRecord(string name, string type, int order);
    public abstract virtual Guid CreateNewRecord(string name, string type, int order, AzurePipelinesRecordData data);
    public abstract virtual void UpdateRecord(Guid id, AzurePipelinesRecordData data);
    public abstract virtual void SetVariable(string name, string value);
    public abstract virtual void SetOutputVariable(string name, string value);
    public abstract virtual void SetSecretVariable(string name, string value);
    public abstract virtual void UploadTaskSummary(FilePath markdownPath);
    public abstract virtual void UploadTaskLogFile(FilePath logFile);
    public abstract virtual void LinkArtifact(string name, AzurePipelinesArtifactType type, string location);
    public abstract virtual void UploadArtifact(string folderName, FilePath file);
    public abstract virtual void UploadArtifact(string folderName, FilePath file, string artifactName);
    public abstract virtual void UploadArtifactDirectory(DirectoryPath directory);
    public abstract virtual void UploadArtifactDirectory(DirectoryPath directory, string artifactName);
    public abstract virtual void UploadBuildLogFile(FilePath logFile);
    public abstract virtual void UpdateBuildNumber(string buildNumber);
    public abstract virtual void AddBuildTag(string tag);
    public abstract virtual void PublishTestResults(AzurePipelinesPublishTestResultsData data);
    public abstract virtual void PublishCodeCoverage(AzurePipelinesPublishCodeCoverageData data);
    public abstract virtual void PublishCodeCoverage(FilePath summaryFilePath, AzurePipelinesPublishCodeCoverageData data);
    public abstract virtual void PublishCodeCoverage(FilePath summaryFilePath, Action`1<AzurePipelinesPublishCodeCoverageData> action);
}
public interface Cake.Common.Build.AzurePipelines.IAzurePipelinesProvider {
    public bool IsRunningOnAzurePipelines { get; }
    public AzurePipelinesEnvironmentInfo Environment { get; }
    public IAzurePipelinesCommands Commands { get; }
    public abstract virtual bool get_IsRunningOnAzurePipelines();
    public abstract virtual AzurePipelinesEnvironmentInfo get_Environment();
    public abstract virtual IAzurePipelinesCommands get_Commands();
}
public abstract class Cake.Common.Build.Bamboo.BambooInfo : object {
    private ICakeEnvironment _environment;
    protected BambooInfo(ICakeEnvironment environment);
    protected string GetEnvironmentString(string variable);
    protected int GetEnvironmentInteger(string variable);
    protected bool GetEnvironmentBoolean(string variable);
}
public class Cake.Common.Build.Bamboo.BambooProvider : object {
    private ICakeEnvironment _environment;
    [CompilerGeneratedAttribute]
private BambooEnvironmentInfo <Environment>k__BackingField;
    public bool IsRunningOnBamboo { get; }
    public BambooEnvironmentInfo Environment { get; }
    public BambooProvider(ICakeEnvironment environment);
    public sealed virtual bool get_IsRunningOnBamboo();
    [CompilerGeneratedAttribute]
public sealed virtual BambooEnvironmentInfo get_Environment();
}
public class Cake.Common.Build.Bamboo.Data.BambooBuildInfo : BambooInfo {
    [CompilerGeneratedAttribute]
private BambooCustomBuildInfo <CustomBuild>k__BackingField;
    public string Folder { get; }
    public int Number { get; }
    public string BuildKey { get; }
    public string ResultKey { get; }
    public string ResultsUrl { get; }
    public string BuildTimestamp { get; }
    public BambooCustomBuildInfo CustomBuild { get; }
    public BambooBuildInfo(ICakeEnvironment environment);
    public string get_Folder();
    public int get_Number();
    public string get_BuildKey();
    public string get_ResultKey();
    public string get_ResultsUrl();
    public string get_BuildTimestamp();
    [CompilerGeneratedAttribute]
public BambooCustomBuildInfo get_CustomBuild();
}
public class Cake.Common.Build.Bamboo.Data.BambooCommitInfo : BambooInfo {
    public string RepositoryRevision { get; }
    public BambooCommitInfo(ICakeEnvironment environment);
    public string get_RepositoryRevision();
}
public class Cake.Common.Build.Bamboo.Data.BambooCustomBuildInfo : BambooInfo {
    public bool IsCustomBuild { get; }
    public string RevisonName { get; }
    public BambooCustomBuildInfo(ICakeEnvironment environment);
    public bool get_IsCustomBuild();
    public string get_RevisonName();
}
public class Cake.Common.Build.Bamboo.Data.BambooEnvironmentInfo : BambooInfo {
    [CompilerGeneratedAttribute]
private BambooPlanInfo <Plan>k__BackingField;
    [CompilerGeneratedAttribute]
private BambooBuildInfo <Build>k__BackingField;
    [CompilerGeneratedAttribute]
private BambooRepositoryInfo <Repository>k__BackingField;
    public BambooPlanInfo Plan { get; }
    public BambooBuildInfo Build { get; }
    public BambooRepositoryInfo Repository { get; }
    public BambooEnvironmentInfo(ICakeEnvironment environment);
    [CompilerGeneratedAttribute]
public BambooPlanInfo get_Plan();
    [CompilerGeneratedAttribute]
public BambooBuildInfo get_Build();
    [CompilerGeneratedAttribute]
public BambooRepositoryInfo get_Repository();
}
public class Cake.Common.Build.Bamboo.Data.BambooPlanInfo : BambooInfo {
    public string PlanName { get; }
    public string ShortPlanName { get; }
    public string PlanKey { get; }
    public string ShortPlanKey { get; }
    public string ShortJobKey { get; }
    public string ShortJobName { get; }
    public BambooPlanInfo(ICakeEnvironment environment);
    public string get_PlanName();
    public string get_ShortPlanName();
    public string get_PlanKey();
    public string get_ShortPlanKey();
    public string get_ShortJobKey();
    public string get_ShortJobName();
}
public class Cake.Common.Build.Bamboo.Data.BambooRepositoryInfo : BambooInfo {
    [CompilerGeneratedAttribute]
private BambooCommitInfo <Commit>k__BackingField;
    public string Scm { get; }
    public string Name { get; }
    public string Branch { get; }
    public BambooCommitInfo Commit { get; }
    public BambooRepositoryInfo(ICakeEnvironment environment);
    public string get_Scm();
    public string get_Name();
    public string get_Branch();
    [CompilerGeneratedAttribute]
public BambooCommitInfo get_Commit();
}
public interface Cake.Common.Build.Bamboo.IBambooProvider {
    public bool IsRunningOnBamboo { get; }
    public BambooEnvironmentInfo Environment { get; }
    public abstract virtual bool get_IsRunningOnBamboo();
    public abstract virtual BambooEnvironmentInfo get_Environment();
}
public abstract class Cake.Common.Build.BitbucketPipelines.BitbucketPipelinesInfo : object {
    private ICakeEnvironment _environment;
    protected BitbucketPipelinesInfo(ICakeEnvironment environment);
    protected string GetEnvironmentString(string variable);
    protected int GetEnvironmentInteger(string variable);
}
public class Cake.Common.Build.BitbucketPipelines.BitbucketPipelinesProvider : object {
    [CompilerGeneratedAttribute]
private BitbucketPipelinesEnvironmentInfo <Environment>k__BackingField;
    public bool IsRunningOnBitbucketPipelines { get; }
    public BitbucketPipelinesEnvironmentInfo Environment { get; }
    public BitbucketPipelinesProvider(ICakeEnvironment environment);
    public sealed virtual bool get_IsRunningOnBitbucketPipelines();
    [CompilerGeneratedAttribute]
public sealed virtual BitbucketPipelinesEnvironmentInfo get_Environment();
}
public class Cake.Common.Build.BitbucketPipelines.Data.BitbucketPipelinesEnvironmentInfo : BitbucketPipelinesInfo {
    [CompilerGeneratedAttribute]
private BitbucketPipelinesRepositoryInfo <Repository>k__BackingField;
    [CompilerGeneratedAttribute]
private BitbucketPipelinesPullRequestInfo <PullRequest>k__BackingField;
    public BitbucketPipelinesRepositoryInfo Repository { get; }
    public BitbucketPipelinesPullRequestInfo PullRequest { get; }
    public BitbucketPipelinesEnvironmentInfo(ICakeEnvironment environment);
    [CompilerGeneratedAttribute]
public BitbucketPipelinesRepositoryInfo get_Repository();
    [CompilerGeneratedAttribute]
public BitbucketPipelinesPullRequestInfo get_PullRequest();
}
public class Cake.Common.Build.BitbucketPipelines.Data.BitbucketPipelinesPullRequestInfo : BitbucketPipelinesInfo {
    public bool IsPullRequest { get; }
    public int Id { get; }
    public BitbucketPipelinesPullRequestInfo(ICakeEnvironment environment);
    public bool get_IsPullRequest();
    public int get_Id();
}
public class Cake.Common.Build.BitbucketPipelines.Data.BitbucketPipelinesRepositoryInfo : BitbucketPipelinesInfo {
    public string Branch { get; }
    public string Tag { get; }
    public string Commit { get; }
    public string RepoOwner { get; }
    public string RepoSlug { get; }
    public BitbucketPipelinesRepositoryInfo(ICakeEnvironment environment);
    public string get_Branch();
    public string get_Tag();
    public string get_Commit();
    public string get_RepoOwner();
    public string get_RepoSlug();
}
public interface Cake.Common.Build.BitbucketPipelines.IBitbucketPipelinesProvider {
    public bool IsRunningOnBitbucketPipelines { get; }
    public BitbucketPipelinesEnvironmentInfo Environment { get; }
    public abstract virtual bool get_IsRunningOnBitbucketPipelines();
    public abstract virtual BitbucketPipelinesEnvironmentInfo get_Environment();
}
public abstract class Cake.Common.Build.Bitrise.BitriseInfo : object {
    private ICakeEnvironment _environment;
    protected BitriseInfo(ICakeEnvironment environment);
    protected string GetEnvironmentString(string variable);
    protected int GetEnvironmentInteger(string variable);
    protected bool GetEnvironmentBoolean(string variable);
}
public class Cake.Common.Build.Bitrise.BitriseProvider : object {
    private ICakeEnvironment _environment;
    private IProcessRunner _processRunner;
    [CompilerGeneratedAttribute]
private BitriseEnvironmentInfo <Environment>k__BackingField;
    public bool IsRunningOnBitrise { get; }
    public BitriseEnvironmentInfo Environment { get; }
    public BitriseProvider(ICakeEnvironment environment, IProcessRunner processRunner);
    public sealed virtual bool get_IsRunningOnBitrise();
    [CompilerGeneratedAttribute]
public sealed virtual BitriseEnvironmentInfo get_Environment();
    public sealed virtual void SetEnvironmentString(string variable, string value);
}
public class Cake.Common.Build.Bitrise.Data.BitriseApplicationInfo : BitriseInfo {
    public string ApplicationTitle { get; }
    public string ApplicationUrl { get; }
    public string AppSlug { get; }
    public BitriseApplicationInfo(ICakeEnvironment environment);
    public string get_ApplicationTitle();
    public string get_ApplicationUrl();
    public string get_AppSlug();
}
public class Cake.Common.Build.Bitrise.Data.BitriseBuildInfo : BitriseInfo {
    public string BuildNumber { get; }
    public string BuildUrl { get; }
    public string BuildSlug { get; }
    public string BuildTriggerTimestamp { get; }
    public bool BuildStatus { get; }
    public BitriseBuildInfo(ICakeEnvironment environment);
    public string get_BuildNumber();
    public string get_BuildUrl();
    public string get_BuildSlug();
    public string get_BuildTriggerTimestamp();
    public bool get_BuildStatus();
}
public class Cake.Common.Build.Bitrise.Data.BitriseDirectoryInfo : BitriseInfo {
    public string SourceDirectory { get; }
    public string DeployDirectory { get; }
    public BitriseDirectoryInfo(ICakeEnvironment environment);
    public string get_SourceDirectory();
    public string get_DeployDirectory();
}
public class Cake.Common.Build.Bitrise.Data.BitriseEnvironmentInfo : BitriseInfo {
    [CompilerGeneratedAttribute]
private BitriseApplicationInfo <Application>k__BackingField;
    [CompilerGeneratedAttribute]
private BitriseBuildInfo <Build>k__BackingField;
    [CompilerGeneratedAttribute]
private BitrisePullRequestInfo <PullRequest>k__BackingField;
    [CompilerGeneratedAttribute]
private BitriseDirectoryInfo <Directory>k__BackingField;
    [CompilerGeneratedAttribute]
private BitriseProvisioningInfo <Provisioning>k__BackingField;
    [CompilerGeneratedAttribute]
private BitriseRepositoryInfo <Repository>k__BackingField;
    [CompilerGeneratedAttribute]
private BitriseWorkflowInfo <Workflow>k__BackingField;
    public BitriseApplicationInfo Application { get; }
    public BitriseBuildInfo Build { get; }
    public BitrisePullRequestInfo PullRequest { get; }
    public BitriseDirectoryInfo Directory { get; }
    public BitriseProvisioningInfo Provisioning { get; }
    public BitriseRepositoryInfo Repository { get; }
    public BitriseWorkflowInfo Workflow { get; }
    public BitriseEnvironmentInfo(ICakeEnvironment environment);
    [CompilerGeneratedAttribute]
public BitriseApplicationInfo get_Application();
    [CompilerGeneratedAttribute]
public BitriseBuildInfo get_Build();
    [CompilerGeneratedAttribute]
public BitrisePullRequestInfo get_PullRequest();
    [CompilerGeneratedAttribute]
public BitriseDirectoryInfo get_Directory();
    [CompilerGeneratedAttribute]
public BitriseProvisioningInfo get_Provisioning();
    [CompilerGeneratedAttribute]
public BitriseRepositoryInfo get_Repository();
    [CompilerGeneratedAttribute]
public BitriseWorkflowInfo get_Workflow();
}
public class Cake.Common.Build.Bitrise.Data.BitriseProvisioningInfo : BitriseInfo {
    public string ProvisionUrl { get; }
    public string CertificateUrl { get; }
    public string CertificatePassphrase { get; }
    public BitriseProvisioningInfo(ICakeEnvironment environment);
    public string get_ProvisionUrl();
    public string get_CertificateUrl();
    public string get_CertificatePassphrase();
}
public class Cake.Common.Build.Bitrise.Data.BitrisePullRequestInfo : BitriseInfo {
    public bool IsPullRequest { get; }
    public int Id { get; }
    public BitrisePullRequestInfo(ICakeEnvironment environment);
    public bool get_IsPullRequest();
    public int get_Id();
}
public class Cake.Common.Build.Bitrise.Data.BitriseRepositoryInfo : BitriseInfo {
    public string GitRepositoryUrl { get; }
    public string GitBranch { get; }
    public string GitTag { get; }
    public string GitCommit { get; }
    public string PullRequest { get; }
    public BitriseRepositoryInfo(ICakeEnvironment environment);
    public string get_GitRepositoryUrl();
    public string get_GitBranch();
    public string get_GitTag();
    public string get_GitCommit();
    public string get_PullRequest();
}
public class Cake.Common.Build.Bitrise.Data.BitriseWorkflowInfo : BitriseInfo {
    public string WorkflowId { get; }
    public string WorkflowTitle { get; }
    public BitriseWorkflowInfo(ICakeEnvironment environment);
    public string get_WorkflowId();
    public string get_WorkflowTitle();
}
public interface Cake.Common.Build.Bitrise.IBitriseProvider {
    public bool IsRunningOnBitrise { get; }
    public BitriseEnvironmentInfo Environment { get; }
    public abstract virtual bool get_IsRunningOnBitrise();
    public abstract virtual BitriseEnvironmentInfo get_Environment();
    public abstract virtual void SetEnvironmentString(string variable, string value);
}
[FlagsAttribute]
public enum Cake.Common.Build.BuildProvider : Enum {
    public int value__;
    public static BuildProvider Local;
    public static BuildProvider AppVeyor;
    public static BuildProvider TeamCity;
    public static BuildProvider MyGet;
    public static BuildProvider Bamboo;
    public static BuildProvider ContinuaCI;
    public static BuildProvider Jenkins;
    public static BuildProvider Bitrise;
    public static BuildProvider TravisCI;
    public static BuildProvider BitbucketPipelines;
    public static BuildProvider GoCD;
    public static BuildProvider GitLabCI;
    public static BuildProvider AzurePipelines;
    public static BuildProvider GitHubActions;
}
public class Cake.Common.Build.BuildSystem : object {
    [CompilerGeneratedAttribute]
private IAppVeyorProvider <AppVeyor>k__BackingField;
    [CompilerGeneratedAttribute]
private ITeamCityProvider <TeamCity>k__BackingField;
    [CompilerGeneratedAttribute]
private IMyGetProvider <MyGet>k__BackingField;
    [CompilerGeneratedAttribute]
private IBambooProvider <Bamboo>k__BackingField;
    [CompilerGeneratedAttribute]
private IContinuaCIProvider <ContinuaCI>k__BackingField;
    [CompilerGeneratedAttribute]
private IJenkinsProvider <Jenkins>k__BackingField;
    [CompilerGeneratedAttribute]
private IBitriseProvider <Bitrise>k__BackingField;
    [CompilerGeneratedAttribute]
private ITravisCIProvider <TravisCI>k__BackingField;
    [CompilerGeneratedAttribute]
private IBitbucketPipelinesProvider <BitbucketPipelines>k__BackingField;
    [CompilerGeneratedAttribute]
private IGoCDProvider <GoCD>k__BackingField;
    [CompilerGeneratedAttribute]
private IGitLabCIProvider <GitLabCI>k__BackingField;
    [CompilerGeneratedAttribute]
private IAzurePipelinesProvider <AzurePipelines>k__BackingField;
    [CompilerGeneratedAttribute]
private IGitHubActionsProvider <GitHubActions>k__BackingField;
    [CompilerGeneratedAttribute]
private BuildProvider <Provider>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsLocalBuild>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsPullRequest>k__BackingField;
    public bool IsRunningOnAppVeyor { get; }
    public IAppVeyorProvider AppVeyor { get; }
    public bool IsRunningOnTeamCity { get; }
    public ITeamCityProvider TeamCity { get; }
    public bool IsRunningOnMyGet { get; }
    public IMyGetProvider MyGet { get; }
    public bool IsRunningOnBamboo { get; }
    public IBambooProvider Bamboo { get; }
    public bool IsRunningOnContinuaCI { get; }
    public IContinuaCIProvider ContinuaCI { get; }
    public bool IsRunningOnJenkins { get; }
    public IJenkinsProvider Jenkins { get; }
    public bool IsRunningOnBitrise { get; }
    public IBitriseProvider Bitrise { get; }
    public bool IsRunningOnTravisCI { get; }
    public ITravisCIProvider TravisCI { get; }
    public bool IsRunningOnBitbucketPipelines { get; }
    public IBitbucketPipelinesProvider BitbucketPipelines { get; }
    public bool IsRunningOnGoCD { get; }
    public IGoCDProvider GoCD { get; }
    public IGitLabCIProvider GitLabCI { get; }
    public bool IsRunningOnGitLabCI { get; }
    public bool IsRunningOnAzurePipelines { get; }
    public IAzurePipelinesProvider AzurePipelines { get; }
    public bool IsRunningOnGitHubActions { get; }
    public IGitHubActionsProvider GitHubActions { get; }
    public BuildProvider Provider { get; }
    public bool IsLocalBuild { get; }
    public bool IsPullRequest { get; }
    public BuildSystem(IAppVeyorProvider appVeyorProvider, ITeamCityProvider teamCityProvider, IMyGetProvider myGetProvider, IBambooProvider bambooProvider, IContinuaCIProvider continuaCIProvider, IJenkinsProvider jenkinsProvider, IBitriseProvider bitriseProvider, ITravisCIProvider travisCIProvider, IBitbucketPipelinesProvider bitbucketPipelinesProvider, IGoCDProvider goCDProvider, IGitLabCIProvider gitLabCIProvider, IGitHubActionsProvider gitHubActionsProvider, IAzurePipelinesProvider azurePipelinesProvider);
    public bool get_IsRunningOnAppVeyor();
    [CompilerGeneratedAttribute]
public IAppVeyorProvider get_AppVeyor();
    public bool get_IsRunningOnTeamCity();
    [CompilerGeneratedAttribute]
public ITeamCityProvider get_TeamCity();
    public bool get_IsRunningOnMyGet();
    [CompilerGeneratedAttribute]
public IMyGetProvider get_MyGet();
    public bool get_IsRunningOnBamboo();
    [CompilerGeneratedAttribute]
public IBambooProvider get_Bamboo();
    public bool get_IsRunningOnContinuaCI();
    [CompilerGeneratedAttribute]
public IContinuaCIProvider get_ContinuaCI();
    public bool get_IsRunningOnJenkins();
    [CompilerGeneratedAttribute]
public IJenkinsProvider get_Jenkins();
    public bool get_IsRunningOnBitrise();
    [CompilerGeneratedAttribute]
public IBitriseProvider get_Bitrise();
    public bool get_IsRunningOnTravisCI();
    [CompilerGeneratedAttribute]
public ITravisCIProvider get_TravisCI();
    public bool get_IsRunningOnBitbucketPipelines();
    [CompilerGeneratedAttribute]
public IBitbucketPipelinesProvider get_BitbucketPipelines();
    public bool get_IsRunningOnGoCD();
    [CompilerGeneratedAttribute]
public IGoCDProvider get_GoCD();
    [CompilerGeneratedAttribute]
public IGitLabCIProvider get_GitLabCI();
    public bool get_IsRunningOnGitLabCI();
    public bool get_IsRunningOnAzurePipelines();
    [CompilerGeneratedAttribute]
public IAzurePipelinesProvider get_AzurePipelines();
    public bool get_IsRunningOnGitHubActions();
    [CompilerGeneratedAttribute]
public IGitHubActionsProvider get_GitHubActions();
    [CompilerGeneratedAttribute]
public BuildProvider get_Provider();
    [CompilerGeneratedAttribute]
public bool get_IsLocalBuild();
    [CompilerGeneratedAttribute]
public bool get_IsPullRequest();
}
[ExtensionAttribute]
[CakeAliasCategoryAttribute("Build System")]
public static class Cake.Common.Build.BuildSystemAliases : object {
    [ExtensionAttribute]
[CakePropertyAliasAttribute]
public static BuildSystem BuildSystem(ICakeContext context);
    [ExtensionAttribute]
[CakePropertyAliasAttribute]
[CakeNamespaceImportAttribute("Cake.Common.Build.AppVeyor")]
[CakeNamespaceImportAttribute("Cake.Common.Build.AppVeyor.Data")]
public static IAppVeyorProvider AppVeyor(ICakeContext context);
    [ExtensionAttribute]
[CakePropertyAliasAttribute]
[CakeNamespaceImportAttribute("Cake.Common.Build.TeamCity")]
public static ITeamCityProvider TeamCity(ICakeContext context);
    [ExtensionAttribute]
[CakePropertyAliasAttribute]
[CakeNamespaceImportAttribute("Cake.Common.Build.MyGet")]
public static IMyGetProvider MyGet(ICakeContext context);
    [ExtensionAttribute]
[CakePropertyAliasAttribute]
[CakeNamespaceImportAttribute("Cake.Common.Build.Bamboo")]
[CakeNamespaceImportAttribute("Cake.Common.Build.Bamboo.Data")]
public static IBambooProvider Bamboo(ICakeContext context);
    [ExtensionAttribute]
[CakePropertyAliasAttribute]
[CakeNamespaceImportAttribute("Cake.Common.Build.ContinuaCI")]
[CakeNamespaceImportAttribute("Cake.Common.Build.ContinuaCI.Data")]
public static IContinuaCIProvider ContinuaCI(ICakeContext context);
    [ExtensionAttribute]
[CakePropertyAliasAttribute]
[CakeNamespaceImportAttribute("Cake.Common.Build.Jenkins")]
[CakeNamespaceImportAttribute("Cake.Common.Build.Jenkins.Data")]
public static IJenkinsProvider Jenkins(ICakeContext context);
    [ExtensionAttribute]
[CakePropertyAliasAttribute]
[CakeNamespaceImportAttribute("Cake.Common.Build.Bitrise")]
[CakeNamespaceImportAttribute("Cake.Common.Build.Bitrise.Data")]
public static IBitriseProvider Bitrise(ICakeContext context);
    [ExtensionAttribute]
[CakePropertyAliasAttribute]
[CakeNamespaceImportAttribute("Cake.Common.Build.TravisCI")]
[CakeNamespaceImportAttribute("Cake.Common.Build.TravisCI.Data")]
public static ITravisCIProvider TravisCI(ICakeContext context);
    [ExtensionAttribute]
[CakePropertyAliasAttribute]
[CakeNamespaceImportAttribute("Cake.Common.Build.BitbucketPipelines")]
[CakeNamespaceImportAttribute("Cake.Common.Build.BitbucketPipelines.Data")]
public static IBitbucketPipelinesProvider BitbucketPipelines(ICakeContext context);
    [ExtensionAttribute]
[CakePropertyAliasAttribute]
[CakeNamespaceImportAttribute("Cake.Common.Build.GoCD")]
[CakeNamespaceImportAttribute("Cake.Common.Build.GoCD.Data")]
public static IGoCDProvider GoCD(ICakeContext context);
    [ExtensionAttribute]
[CakePropertyAliasAttribute]
[CakeNamespaceImportAttribute("Cake.Common.Build.GitLabCI")]
[CakeNamespaceImportAttribute("Cake.Common.Build.GitLabCI.Data")]
public static IGitLabCIProvider GitLabCI(ICakeContext context);
    [ExtensionAttribute]
[CakePropertyAliasAttribute]
[CakeNamespaceImportAttribute("Cake.Common.Build.GitHubActions")]
[CakeNamespaceImportAttribute("Cake.Common.Build.GitHubActions.Data")]
public static IGitHubActionsProvider GitHubActions(ICakeContext context);
    [ExtensionAttribute]
[CakePropertyAliasAttribute]
[CakeNamespaceImportAttribute("Cake.Common.Build.AzurePipelines")]
[CakeNamespaceImportAttribute("Cake.Common.Build.AzurePipelines.Data")]
public static IAzurePipelinesProvider AzurePipelines(ICakeContext context);
}
internal class Cake.Common.Build.BuildSystemServiceMessageWriter : object {
    public sealed virtual void Write(string format, Object[] args);
}
public abstract class Cake.Common.Build.ContinuaCI.ContinuaCIInfo : object {
    private ICakeEnvironment _environment;
    private IDictionary`2<string, string> _allEnvironmentVariables;
    protected ContinuaCIInfo(ICakeEnvironment environment);
    protected string GetEnvironmentString(string variable);
    protected int GetEnvironmentInteger(string variable);
    protected bool GetEnvironmentBoolean(string variable);
    protected Nullable`1<DateTime> GetEnvironmentDateTime(string variable);
    protected long GetEnvironmentLong(string variable);
    protected Nullable`1<TimeSpan> GetEnvironmentTimeSpan(string variable);
    protected IEnumerable`1<string> GetEnvironmentStringList(string variable);
    protected IDictionary`2<string, string> GetEnvironmentStringDictionary(string variablePrefix);
}
public enum Cake.Common.Build.ContinuaCI.ContinuaCIMessageType : Enum {
    public int value__;
    public static ContinuaCIMessageType Debug;
    public static ContinuaCIMessageType Success;
    public static ContinuaCIMessageType Information;
    public static ContinuaCIMessageType Warning;
    public static ContinuaCIMessageType Error;
    public static ContinuaCIMessageType Fatal;
}
public class Cake.Common.Build.ContinuaCI.ContinuaCIProvider : object {
    private static string MessagePrefix;
    private static string MessagePostfix;
    private static Dictionary`2<string, string> _sanitizationTokens;
    private ICakeEnvironment _environment;
    private IBuildSystemServiceMessageWriter _writer;
    [CompilerGeneratedAttribute]
private ContinuaCIEnvironmentInfo <Environment>k__BackingField;
    public bool IsRunningOnContinuaCI { get; }
    public ContinuaCIEnvironmentInfo Environment { get; }
    private static ContinuaCIProvider();
    public ContinuaCIProvider(ICakeEnvironment environment, IBuildSystemServiceMessageWriter writer);
    public sealed virtual bool get_IsRunningOnContinuaCI();
    [CompilerGeneratedAttribute]
public sealed virtual ContinuaCIEnvironmentInfo get_Environment();
    public sealed virtual void WriteMessage(string message, ContinuaCIMessageType status);
    public sealed virtual void WriteStartGroup(string groupName);
    public sealed virtual void WriteEndBlock(string groupName);
    public sealed virtual void SetVariable(string name, string value, bool skipIfNotDefined);
    public sealed virtual void SetBuildVersion(string version);
    public sealed virtual void SetBuildStatus(string text);
    private void WriteServiceMessage(string messageName, string attributeName, string attributeValue);
    private void WriteServiceMessage(string messageName, Dictionary`2<string, string> parameters);
    private static string Sanitize(string source);
}
public class Cake.Common.Build.ContinuaCI.Data.ContinuaCIBuildInfo : ContinuaCIInfo {
    private string _prefix;
    [CompilerGeneratedAttribute]
private ContinuaCIChangesetInfo <LatestChangeset>k__BackingField;
    public int Id { get; }
    public string Version { get; }
    public string StartedBy { get; }
    public bool IsFeatureBranchBuild { get; }
    public int BuildNumber { get; }
    public Nullable`1<DateTime> Started { get; }
    public bool UsesDefaultBranch { get; }
    public bool HasNewChanges { get; }
    public int ChangesetCount { get; }
    public int IssueCount { get; }
    public Nullable`1<TimeSpan> Elapsed { get; }
    public long TimeOnQueue { get; }
    public IEnumerable`1<string> Repositories { get; }
    public IEnumerable`1<string> RepositoryBranches { get; }
    public string TriggeringBranch { get; }
    public IEnumerable`1<string> ChangesetRevisions { get; }
    public IEnumerable`1<string> ChangesetUserNames { get; }
    public IEnumerable`1<string> ChangesetTagNames { get; }
    public ContinuaCIChangesetInfo LatestChangeset { get; }
    public ContinuaCIBuildInfo(ICakeEnvironment environment, string prefix);
    public int get_Id();
    public string get_Version();
    public string get_StartedBy();
    public bool get_IsFeatureBranchBuild();
    public int get_BuildNumber();
    public Nullable`1<DateTime> get_Started();
    public bool get_UsesDefaultBranch();
    public bool get_HasNewChanges();
    public int get_ChangesetCount();
    public int get_IssueCount();
    public Nullable`1<TimeSpan> get_Elapsed();
    public long get_TimeOnQueue();
    public IEnumerable`1<string> get_Repositories();
    public IEnumerable`1<string> get_RepositoryBranches();
    public string get_TriggeringBranch();
    public IEnumerable`1<string> get_ChangesetRevisions();
    public IEnumerable`1<string> get_ChangesetUserNames();
    public IEnumerable`1<string> get_ChangesetTagNames();
    [CompilerGeneratedAttribute]
public ContinuaCIChangesetInfo get_LatestChangeset();
}
public class Cake.Common.Build.ContinuaCI.Data.ContinuaCIChangesetInfo : ContinuaCIInfo {
    private string _prefix;
    public string Revision { get; }
    public string Branch { get; }
    public Nullable`1<DateTime> Created { get; }
    public int FileCount { get; }
    public string UserName { get; }
    public int TagCount { get; }
    public int IssueCount { get; }
    public IEnumerable`1<string> TagNames { get; }
    public IEnumerable`1<string> IssueNames { get; }
    public ContinuaCIChangesetInfo(ICakeEnvironment environment, string prefix);
    public string get_Revision();
    public string get_Branch();
    public Nullable`1<DateTime> get_Created();
    public int get_FileCount();
    public string get_UserName();
    public int get_TagCount();
    public int get_IssueCount();
    public IEnumerable`1<string> get_TagNames();
    public IEnumerable`1<string> get_IssueNames();
}
public class Cake.Common.Build.ContinuaCI.Data.ContinuaCIConfigurationInfo : ContinuaCIInfo {
    private string _prefix;
    public string Name { get; }
    public ContinuaCIConfigurationInfo(ICakeEnvironment environment, string prefix);
    public string get_Name();
}
public class Cake.Common.Build.ContinuaCI.Data.ContinuaCIEnvironmentInfo : ContinuaCIInfo {
    private static string Prefix;
    [CompilerGeneratedAttribute]
private ContinuaCIConfigurationInfo <Configuration>k__BackingField;
    [CompilerGeneratedAttribute]
private ContinuaCIProjectInfo <Project>k__BackingField;
    [CompilerGeneratedAttribute]
private ContinuaCIBuildInfo <Build>k__BackingField;
    public ContinuaCIConfigurationInfo Configuration { get; }
    public ContinuaCIProjectInfo Project { get; }
    public ContinuaCIBuildInfo Build { get; }
    public IDictionary`2<string, string> Variable { get; }
    public IDictionary`2<string, string> AgentProperty { get; }
    public string Version { get; }
    public ContinuaCIEnvironmentInfo(ICakeEnvironment environment);
    [CompilerGeneratedAttribute]
public ContinuaCIConfigurationInfo get_Configuration();
    [CompilerGeneratedAttribute]
public ContinuaCIProjectInfo get_Project();
    [CompilerGeneratedAttribute]
public ContinuaCIBuildInfo get_Build();
    public IDictionary`2<string, string> get_Variable();
    public IDictionary`2<string, string> get_AgentProperty();
    public string get_Version();
}
public class Cake.Common.Build.ContinuaCI.Data.ContinuaCIProjectInfo : ContinuaCIInfo {
    private string _prefix;
    public string Name { get; }
    public ContinuaCIProjectInfo(ICakeEnvironment environment, string prefix);
    public string get_Name();
}
public interface Cake.Common.Build.ContinuaCI.IContinuaCIProvider {
    public bool IsRunningOnContinuaCI { get; }
    public ContinuaCIEnvironmentInfo Environment { get; }
    public abstract virtual void WriteMessage(string message, ContinuaCIMessageType status);
    public abstract virtual void WriteStartGroup(string groupName);
    public abstract virtual void WriteEndBlock(string groupName);
    public abstract virtual void SetVariable(string name, string value, bool skipIfNotDefined);
    public abstract virtual void SetBuildVersion(string version);
    public abstract virtual void SetBuildStatus(string text);
    public abstract virtual bool get_IsRunningOnContinuaCI();
    public abstract virtual ContinuaCIEnvironmentInfo get_Environment();
}
internal class Cake.Common.Build.GitHubActions.Commands.ArtifactResponse : object {
    [CompilerGeneratedAttribute]
private long <ContainerId>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SignedContent>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FileContainerResourceUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [JsonPropertyNameAttribute("containerId")]
public long ContainerId { get; public set; }
    [JsonPropertyNameAttribute("size")]
public long Size { get; public set; }
    [JsonPropertyNameAttribute("signedContent")]
public string SignedContent { get; public set; }
    [JsonPropertyNameAttribute("fileContainerResourceUrl")]
public string FileContainerResourceUrl { get; public set; }
    [JsonPropertyNameAttribute("type")]
public string Type { get; public set; }
    [JsonPropertyNameAttribute("name")]
public string Name { get; public set; }
    [JsonPropertyNameAttribute("url")]
public string Url { get; public set; }
    [CompilerGeneratedAttribute]
public long get_ContainerId();
    [CompilerGeneratedAttribute]
public void set_ContainerId(long value);
    [CompilerGeneratedAttribute]
public long get_Size();
    [CompilerGeneratedAttribute]
public void set_Size(long value);
    [CompilerGeneratedAttribute]
public string get_SignedContent();
    [CompilerGeneratedAttribute]
public void set_SignedContent(string value);
    [CompilerGeneratedAttribute]
public string get_FileContainerResourceUrl();
    [CompilerGeneratedAttribute]
public void set_FileContainerResourceUrl(string value);
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
}
internal class Cake.Common.Build.GitHubActions.Commands.ContainerItem : object {
    [CompilerGeneratedAttribute]
private long <ContainerId>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FileContainerResourceUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <ExpiresOn>k__BackingField;
    [JsonPropertyNameAttribute("containerId")]
public long ContainerId { get; public set; }
    [JsonPropertyNameAttribute("size")]
public long Size { get; public set; }
    [JsonPropertyNameAttribute("fileContainerResourceUrl")]
public string FileContainerResourceUrl { get; public set; }
    [JsonPropertyNameAttribute("type")]
public string Type { get; public set; }
    [JsonPropertyNameAttribute("name")]
public string Name { get; public set; }
    [JsonPropertyNameAttribute("url")]
public string Url { get; public set; }
    [JsonPropertyNameAttribute("expiresOn")]
public DateTimeOffset ExpiresOn { get; public set; }
    [CompilerGeneratedAttribute]
public long get_ContainerId();
    [CompilerGeneratedAttribute]
public void set_ContainerId(long value);
    [CompilerGeneratedAttribute]
public long get_Size();
    [CompilerGeneratedAttribute]
public void set_Size(long value);
    [CompilerGeneratedAttribute]
public string get_FileContainerResourceUrl();
    [CompilerGeneratedAttribute]
public void set_FileContainerResourceUrl(string value);
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_ExpiresOn();
    [CompilerGeneratedAttribute]
public void set_ExpiresOn(DateTimeOffset value);
}
internal class Cake.Common.Build.GitHubActions.Commands.ContainerItemResource : object {
    [CompilerGeneratedAttribute]
private long <ContainerId>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <ScopeIdentifier>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ItemType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <DateCreated>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <DateLastModified>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <CreatedBy>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <LastModifiedBy>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ItemLocation>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContentLocation>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContentId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <FileLength>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <FileEncoding>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <FileType>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <FileId>k__BackingField;
    [JsonPropertyNameAttribute("containerId")]
public long ContainerId { get; public set; }
    [JsonPropertyNameAttribute("scopeIdentifier")]
public Guid ScopeIdentifier { get; public set; }
    [JsonPropertyNameAttribute("path")]
public string Path { get; public set; }
    [JsonPropertyNameAttribute("itemType")]
public string ItemType { get; public set; }
    [JsonPropertyNameAttribute("status")]
public string Status { get; public set; }
    [JsonPropertyNameAttribute("dateCreated")]
public DateTimeOffset DateCreated { get; public set; }
    [JsonPropertyNameAttribute("dateLastModified")]
public DateTimeOffset DateLastModified { get; public set; }
    [JsonPropertyNameAttribute("createdBy")]
public Guid CreatedBy { get; public set; }
    [JsonPropertyNameAttribute("lastModifiedBy")]
public Guid LastModifiedBy { get; public set; }
    [JsonPropertyNameAttribute("itemLocation")]
public string ItemLocation { get; public set; }
    [JsonPropertyNameAttribute("contentLocation")]
public string ContentLocation { get; public set; }
    [JsonPropertyNameAttribute("contentId")]
public string ContentId { get; public set; }
    [JsonPropertyNameAttribute("fileLength")]
public Nullable`1<long> FileLength { get; public set; }
    [JsonPropertyNameAttribute("fileEncoding")]
public Nullable`1<long> FileEncoding { get; public set; }
    [JsonPropertyNameAttribute("fileType")]
public Nullable`1<long> FileType { get; public set; }
    [JsonPropertyNameAttribute("fileId")]
public Nullable`1<long> FileId { get; public set; }
    [CompilerGeneratedAttribute]
public long get_ContainerId();
    [CompilerGeneratedAttribute]
public void set_ContainerId(long value);
    [CompilerGeneratedAttribute]
public Guid get_ScopeIdentifier();
    [CompilerGeneratedAttribute]
public void set_ScopeIdentifier(Guid value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public string get_ItemType();
    [CompilerGeneratedAttribute]
public void set_ItemType(string value);
    [CompilerGeneratedAttribute]
public string get_Status();
    [CompilerGeneratedAttribute]
public void set_Status(string value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_DateCreated();
    [CompilerGeneratedAttribute]
public void set_DateCreated(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_DateLastModified();
    [CompilerGeneratedAttribute]
public void set_DateLastModified(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public Guid get_CreatedBy();
    [CompilerGeneratedAttribute]
public void set_CreatedBy(Guid value);
    [CompilerGeneratedAttribute]
public Guid get_LastModifiedBy();
    [CompilerGeneratedAttribute]
public void set_LastModifiedBy(Guid value);
    [CompilerGeneratedAttribute]
public string get_ItemLocation();
    [CompilerGeneratedAttribute]
public void set_ItemLocation(string value);
    [CompilerGeneratedAttribute]
public string get_ContentLocation();
    [CompilerGeneratedAttribute]
public void set_ContentLocation(string value);
    [CompilerGeneratedAttribute]
public string get_ContentId();
    [CompilerGeneratedAttribute]
public void set_ContentId(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_FileLength();
    [CompilerGeneratedAttribute]
public void set_FileLength(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_FileEncoding();
    [CompilerGeneratedAttribute]
public void set_FileEncoding(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_FileType();
    [CompilerGeneratedAttribute]
public void set_FileType(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_FileId();
    [CompilerGeneratedAttribute]
public void set_FileId(Nullable`1<long> value);
}
internal class Cake.Common.Build.GitHubActions.Commands.CreateArtifactParameters : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    public string Name { get; public set; }
    public string Type { get; public set; }
    public CreateArtifactParameters(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(string value);
}
public class Cake.Common.Build.GitHubActions.Commands.GitHubActionsCommands : object {
    private static string ApiVersion;
    private static string AcceptHeader;
    private static string ContentTypeHeader;
    private static string AcceptGzip;
    private static string AcceptEncodingGzip;
    private ICakeEnvironment _environment;
    private IFileSystem _fileSystem;
    private IBuildSystemServiceMessageWriter _writer;
    private GitHubActionsEnvironmentInfo _actionsEnvironment;
    private Func`2<string, HttpClient> _createHttpClient;
    public GitHubActionsCommands(ICakeEnvironment environment, IFileSystem fileSystem, IBuildSystemServiceMessageWriter writer, GitHubActionsEnvironmentInfo actionsEnvironment, Func`2<string, HttpClient> createHttpClient);
    public void Debug(string message);
    public void Notice(string message, GitHubActionsAnnotation annotation);
    public void Warning(string message, GitHubActionsAnnotation annotation);
    public void Error(string message, GitHubActionsAnnotation annotation);
    public void StartGroup(string title);
    public void EndGroup();
    public void SetSecret(string secret);
    public void AddPath(DirectoryPath path);
    public void SetEnvironmentVariable(string key, string value);
    public void SetOutputParameter(string key, string value);
    public void SetStepSummary(string summary);
    [AsyncStateMachineAttribute("Cake.Common.Build.GitHubActions.Commands.GitHubActionsCommands/<UploadArtifact>d__22")]
public Task UploadArtifact(FilePath path, string artifactName);
    [AsyncStateMachineAttribute("Cake.Common.Build.GitHubActions.Commands.GitHubActionsCommands/<UploadArtifact>d__23")]
public Task UploadArtifact(DirectoryPath path, string artifactName);
    [AsyncStateMachineAttribute("Cake.Common.Build.GitHubActions.Commands.GitHubActionsCommands/<DownloadArtifact>d__24")]
public Task DownloadArtifact(string artifactName, DirectoryPath path);
    internal void WriteCommand(string command, string message);
    internal void WriteCommand(string command, Dictionary`2<string, string> parameters, string message);
    private static string EscapeCommandMessage(string value);
    private static string EscapeCommandParameter(string value);
    [AsyncStateMachineAttribute("Cake.Common.Build.GitHubActions.Commands.GitHubActionsCommands/<DownloadItemResources>d__29")]
private Task DownloadItemResources(HttpClient client, ValueTuple`3[] containerItemResourceContent);
    [AsyncStateMachineAttribute("Cake.Common.Build.GitHubActions.Commands.GitHubActionsCommands/<DownloadItemResource>d__30")]
private Task DownloadItemResource(HttpClient client, FilePath filePath, string contentLocation, long fileLength);
    [AsyncStateMachineAttribute("Cake.Common.Build.GitHubActions.Commands.GitHubActionsCommands/<GetContainerItemResources>d__31")]
private Task`1<ValueTuple`3[]> GetContainerItemResources(HttpClient client, DirectoryPath path, string artifactName, string artifactResourceUrl);
    [AsyncStateMachineAttribute("Cake.Common.Build.GitHubActions.Commands.GitHubActionsCommands/<GetArtifactResourceUrl>d__32")]
private Task`1<string> GetArtifactResourceUrl(HttpClient client, string artifactName);
    private T ValidateArtifactParameters(T path, string artifactName);
    [AsyncStateMachineAttribute("Cake.Common.Build.GitHubActions.Commands.GitHubActionsCommands/<CreateAndUploadArtifactFiles>d__34")]
private Task CreateAndUploadArtifactFiles(string artifactName, DirectoryPath rootPath, IFile[] files);
    private string GetArtifactUrl(string artifactName);
    private HttpClient GetRuntimeHttpClient(string memberName);
    [AsyncStateMachineAttribute("Cake.Common.Build.GitHubActions.Commands.GitHubActionsCommands/<FinalizeArtifact>d__37")]
private static Task FinalizeArtifact(HttpClient client, string artifactUrl, long totalSize);
    [AsyncStateMachineAttribute("Cake.Common.Build.GitHubActions.Commands.GitHubActionsCommands/<UploadFile>d__38")]
private static Task UploadFile(DirectoryPath rootPath, string artifactName, ArtifactResponse artifactResponse, HttpClient client, Stream artifactStream, IFile file);
    [AsyncStateMachineAttribute("Cake.Common.Build.GitHubActions.Commands.GitHubActionsCommands/<CreateArtifact>d__39")]
private static Task`1<ArtifactResponse> CreateArtifact(string artifactName, HttpClient client, string artifactUrl);
}
internal class Cake.Common.Build.GitHubActions.Commands.PatchArtifactSize : object {
    [CompilerGeneratedAttribute]
private long <Size>k__BackingField;
    public long Size { get; public set; }
    public PatchArtifactSize(long size);
    [CompilerGeneratedAttribute]
public long get_Size();
    [CompilerGeneratedAttribute]
public void set_Size(long value);
}
internal class Cake.Common.Build.GitHubActions.Commands.Values`1 : object {
    [CompilerGeneratedAttribute]
private long <Count>k__BackingField;
    [CompilerGeneratedAttribute]
private T[] <Value>k__BackingField;
    [JsonPropertyNameAttribute("count")]
public long Count { get; public set; }
    [JsonPropertyNameAttribute("value")]
public T[] Value { get; public set; }
    [CompilerGeneratedAttribute]
public long get_Count();
    [CompilerGeneratedAttribute]
public void set_Count(long value);
    [CompilerGeneratedAttribute]
public T[] get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(T[] value);
}
public class Cake.Common.Build.GitHubActions.Data.GitHubActionsAnnotation : object {
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private string <File>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <StartLine>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <EndLine>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <StartColumn>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <EndColumn>k__BackingField;
    public string Title { get; public set; }
    public string File { get; public set; }
    public Nullable`1<int> StartLine { get; public set; }
    public Nullable`1<int> EndLine { get; public set; }
    public Nullable`1<int> StartColumn { get; public set; }
    public Nullable`1<int> EndColumn { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [CompilerGeneratedAttribute]
public string get_File();
    [CompilerGeneratedAttribute]
public void set_File(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_StartLine();
    [CompilerGeneratedAttribute]
public void set_StartLine(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_EndLine();
    [CompilerGeneratedAttribute]
public void set_EndLine(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_StartColumn();
    [CompilerGeneratedAttribute]
public void set_StartColumn(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_EndColumn();
    [CompilerGeneratedAttribute]
public void set_EndColumn(Nullable`1<int> value);
    internal Dictionary`2<string, string> GetParameters();
}
public enum Cake.Common.Build.GitHubActions.Data.GitHubActionsArchitecture : Enum {
    public int value__;
    public static GitHubActionsArchitecture Unknown;
    public static GitHubActionsArchitecture X86;
    public static GitHubActionsArchitecture X64;
    public static GitHubActionsArchitecture ARM;
    public static GitHubActionsArchitecture ARM64;
}
public class Cake.Common.Build.GitHubActions.Data.GitHubActionsEnvironmentInfo : GitHubActionsInfo {
    [CompilerGeneratedAttribute]
private GitHubActionsRunnerInfo <Runner>k__BackingField;
    [CompilerGeneratedAttribute]
private GitHubActionsWorkflowInfo <Workflow>k__BackingField;
    [CompilerGeneratedAttribute]
private GitHubActionsPullRequestInfo <PullRequest>k__BackingField;
    [CompilerGeneratedAttribute]
private GitHubActionsRuntimeInfo <Runtime>k__BackingField;
    public DirectoryPath Home { get; }
    public GitHubActionsRunnerInfo Runner { get; }
    public GitHubActionsWorkflowInfo Workflow { get; }
    public GitHubActionsPullRequestInfo PullRequest { get; }
    public GitHubActionsRuntimeInfo Runtime { get; }
    public GitHubActionsEnvironmentInfo(ICakeEnvironment environment);
    public DirectoryPath get_Home();
    [CompilerGeneratedAttribute]
public GitHubActionsRunnerInfo get_Runner();
    [CompilerGeneratedAttribute]
public GitHubActionsWorkflowInfo get_Workflow();
    [CompilerGeneratedAttribute]
public GitHubActionsPullRequestInfo get_PullRequest();
    [CompilerGeneratedAttribute]
public GitHubActionsRuntimeInfo get_Runtime();
}
public class Cake.Common.Build.GitHubActions.Data.GitHubActionsPullRequestInfo : GitHubActionsInfo {
    public bool IsPullRequest { get; }
    public GitHubActionsPullRequestInfo(ICakeEnvironment environment);
    public bool get_IsPullRequest();
}
public enum Cake.Common.Build.GitHubActions.Data.GitHubActionsRefType : Enum {
    public int value__;
    public static GitHubActionsRefType Unknown;
    public static GitHubActionsRefType Branch;
    public static GitHubActionsRefType Tag;
}
public class Cake.Common.Build.GitHubActions.Data.GitHubActionsRunnerInfo : GitHubActionsInfo {
    public string Name { get; }
    public string OS { get; }
    public DirectoryPath Temp { get; }
    public DirectoryPath ToolCache { get; }
    public DirectoryPath Workspace { get; }
    public string ImageOS { get; }
    public string ImageVersion { get; }
    public string User { get; }
    public GitHubActionsArchitecture Architecture { get; }
    public GitHubActionsRunnerInfo(ICakeEnvironment environment);
    public string get_Name();
    public string get_OS();
    public DirectoryPath get_Temp();
    public DirectoryPath get_ToolCache();
    public DirectoryPath get_Workspace();
    public string get_ImageOS();
    public string get_ImageVersion();
    public string get_User();
    public GitHubActionsArchitecture get_Architecture();
}
public class Cake.Common.Build.GitHubActions.Data.GitHubActionsRuntimeInfo : GitHubActionsInfo {
    public bool IsRuntimeAvailable { get; }
    public string Token { get; }
    public string Url { get; }
    public FilePath EnvPath { get; }
    public FilePath OutputPath { get; }
    public FilePath StepSummary { get; }
    public FilePath SystemPath { get; }
    public GitHubActionsRuntimeInfo(ICakeEnvironment environment);
    public bool get_IsRuntimeAvailable();
    public string get_Token();
    public string get_Url();
    public FilePath get_EnvPath();
    public FilePath get_OutputPath();
    public FilePath get_StepSummary();
    public FilePath get_SystemPath();
}
public class Cake.Common.Build.GitHubActions.Data.GitHubActionsWorkflowInfo : GitHubActionsInfo {
    public string Action { get; }
    public DirectoryPath ActionPath { get; }
    public string Actor { get; }
    public string ApiUrl { get; }
    public string BaseRef { get; }
    public string EventName { get; }
    public FilePath EventPath { get; }
    public string GraphQLUrl { get; }
    public string HeadRef { get; }
    public string Job { get; }
    public string Ref { get; }
    public string Repository { get; }
    public string RepositoryOwner { get; }
    public string RunId { get; }
    public int RunNumber { get; }
    public string ServerUrl { get; }
    public string Sha { get; }
    public string Workflow { get; }
    public DirectoryPath Workspace { get; }
    public int Attempt { get; }
    public bool RefProtected { get; }
    public string RefName { get; }
    public GitHubActionsRefType RefType { get; }
    public GitHubActionsWorkflowInfo(ICakeEnvironment environment);
    public string get_Action();
    public DirectoryPath get_ActionPath();
    public string get_Actor();
    public string get_ApiUrl();
    public string get_BaseRef();
    public string get_EventName();
    public FilePath get_EventPath();
    public string get_GraphQLUrl();
    public string get_HeadRef();
    public string get_Job();
    public string get_Ref();
    public string get_Repository();
    public string get_RepositoryOwner();
    public string get_RunId();
    public int get_RunNumber();
    public string get_ServerUrl();
    public string get_Sha();
    public string get_Workflow();
    public DirectoryPath get_Workspace();
    public int get_Attempt();
    public bool get_RefProtected();
    public string get_RefName();
    public GitHubActionsRefType get_RefType();
}
public abstract class Cake.Common.Build.GitHubActions.GitHubActionsInfo : object {
    private ICakeEnvironment _environment;
    protected GitHubActionsInfo(ICakeEnvironment environment);
    protected string GetEnvironmentString(string variable);
    protected DirectoryPath GetEnvironmentDirectoryPath(string variable);
    protected FilePath GetEnvironmentFilePath(string variable);
    protected int GetEnvironmentInteger(string variable);
    protected bool GetEnvironmentBoolean(string variable);
}
public class Cake.Common.Build.GitHubActions.GitHubActionsProvider : object {
    private ICakeEnvironment _environment;
    [CompilerGeneratedAttribute]
private GitHubActionsEnvironmentInfo <Environment>k__BackingField;
    [CompilerGeneratedAttribute]
private GitHubActionsCommands <Commands>k__BackingField;
    public bool IsRunningOnGitHubActions { get; }
    public GitHubActionsEnvironmentInfo Environment { get; }
    public GitHubActionsCommands Commands { get; }
    public GitHubActionsProvider(ICakeEnvironment environment, IFileSystem fileSystem, IBuildSystemServiceMessageWriter writer);
    public sealed virtual bool get_IsRunningOnGitHubActions();
    [CompilerGeneratedAttribute]
public sealed virtual GitHubActionsEnvironmentInfo get_Environment();
    [CompilerGeneratedAttribute]
public sealed virtual GitHubActionsCommands get_Commands();
}
public interface Cake.Common.Build.GitHubActions.IGitHubActionsProvider {
    public bool IsRunningOnGitHubActions { get; }
    public GitHubActionsEnvironmentInfo Environment { get; }
    public GitHubActionsCommands Commands { get; }
    public abstract virtual bool get_IsRunningOnGitHubActions();
    public abstract virtual GitHubActionsEnvironmentInfo get_Environment();
    public abstract virtual GitHubActionsCommands get_Commands();
}
public class Cake.Common.Build.GitLabCI.Data.GitLabCIBuildInfo : GitLabCIInfo {
    public int Id { get; }
    public string Reference { get; }
    public string Tag { get; }
    public string Name { get; }
    public string Stage { get; }
    public string RefName { get; }
    public string RepoUrl { get; }
    public bool Triggered { get; }
    public bool Manual { get; }
    public string Token { get; }
    public int PipelineId { get; }
    public int PipelineIId { get; }
    public int UserId { get; }
    public string UserEmail { get; }
    public GitLabCIBuildInfo(ICakeEnvironment environment);
    public int get_Id();
    public string get_Reference();
    public string get_Tag();
    public string get_Name();
    public string get_Stage();
    public string get_RefName();
    public string get_RepoUrl();
    public bool get_Triggered();
    public bool get_Manual();
    public string get_Token();
    public int get_PipelineId();
    public int get_PipelineIId();
    public int get_UserId();
    public string get_UserEmail();
}
public class Cake.Common.Build.GitLabCI.Data.GitLabCIEnvironmentInfo : GitLabCIInfo {
    [CompilerGeneratedAttribute]
private GitLabCIRunnerInfo <Runner>k__BackingField;
    [CompilerGeneratedAttribute]
private GitLabCIServerInfo <Server>k__BackingField;
    [CompilerGeneratedAttribute]
private GitLabCIBuildInfo <Build>k__BackingField;
    [CompilerGeneratedAttribute]
private GitLabCIPullRequestInfo <PullRequest>k__BackingField;
    [CompilerGeneratedAttribute]
private GitLabCIProjectInfo <Project>k__BackingField;
    public GitLabCIRunnerInfo Runner { get; }
    public GitLabCIServerInfo Server { get; }
    public GitLabCIBuildInfo Build { get; }
    public GitLabCIPullRequestInfo PullRequest { get; }
    public GitLabCIProjectInfo Project { get; }
    public GitLabCIEnvironmentInfo(ICakeEnvironment environment);
    [CompilerGeneratedAttribute]
public GitLabCIRunnerInfo get_Runner();
    [CompilerGeneratedAttribute]
public GitLabCIServerInfo get_Server();
    [CompilerGeneratedAttribute]
public GitLabCIBuildInfo get_Build();
    [CompilerGeneratedAttribute]
public GitLabCIPullRequestInfo get_PullRequest();
    [CompilerGeneratedAttribute]
public GitLabCIProjectInfo get_Project();
}
public class Cake.Common.Build.GitLabCI.Data.GitLabCIProjectInfo : GitLabCIInfo {
    public int Id { get; }
    public string Name { get; }
    public string Namespace { get; }
    public string Path { get; }
    public string Url { get; }
    public string Directory { get; }
    public GitLabCIProjectInfo(ICakeEnvironment environment);
    public int get_Id();
    public string get_Name();
    public string get_Namespace();
    public string get_Path();
    public string get_Url();
    public string get_Directory();
}
public class Cake.Common.Build.GitLabCI.Data.GitLabCIPullRequestInfo : GitLabCIInfo {
    public bool IsPullRequest { get; }
    public int Id { get; }
    public int IId { get; }
    public GitLabCIPullRequestInfo(ICakeEnvironment environment);
    public bool get_IsPullRequest();
    public int get_Id();
    public int get_IId();
}
public class Cake.Common.Build.GitLabCI.Data.GitLabCIRunnerInfo : GitLabCIInfo {
    public int Id { get; }
    public string Description { get; }
    public String[] Tags { get; }
    public GitLabCIRunnerInfo(ICakeEnvironment environment);
    public int get_Id();
    public string get_Description();
    public String[] get_Tags();
}
public class Cake.Common.Build.GitLabCI.Data.GitLabCIServerInfo : GitLabCIInfo {
    public string Name { get; }
    public string Version { get; }
    public string Revision { get; }
    public GitLabCIServerInfo(ICakeEnvironment environment);
    public string get_Name();
    public string get_Version();
    public string get_Revision();
}
public class Cake.Common.Build.GitLabCI.GitLabCICommands : object {
    private IFileSystem _fileSystem;
    public GitLabCICommands(IFileSystem fileSystem);
    public void SetEnvironmentVariable(FilePath envPath, string key, string value);
}
public abstract class Cake.Common.Build.GitLabCI.GitLabCIInfo : object {
    private ICakeEnvironment _environment;
    protected GitLabCIInfo(ICakeEnvironment environment);
    protected string GetEnvironmentString(string variable);
    protected string GetEnvironmentString(string primaryVariable, string secondaryVariable);
    protected int GetEnvironmentInteger(string variable);
    protected int GetEnvironmentInteger(string primaryVariable, string secondaryVariable);
    protected bool GetEnvironmentBoolean(string variable);
    protected bool GetEnvironmentBoolean(string primaryVariable, string secondaryVariable);
}
public class Cake.Common.Build.GitLabCI.GitLabCIProvider : object {
    private ICakeEnvironment _environment;
    [CompilerGeneratedAttribute]
private GitLabCIEnvironmentInfo <Environment>k__BackingField;
    [CompilerGeneratedAttribute]
private GitLabCICommands <Commands>k__BackingField;
    public bool IsRunningOnGitLabCI { get; }
    public GitLabCIEnvironmentInfo Environment { get; }
    public GitLabCICommands Commands { get; }
    public GitLabCIProvider(ICakeEnvironment environment, IFileSystem fileSystem);
    public sealed virtual bool get_IsRunningOnGitLabCI();
    [CompilerGeneratedAttribute]
public sealed virtual GitLabCIEnvironmentInfo get_Environment();
    [CompilerGeneratedAttribute]
public sealed virtual GitLabCICommands get_Commands();
}
public interface Cake.Common.Build.GitLabCI.IGitLabCIProvider {
    public bool IsRunningOnGitLabCI { get; }
    public GitLabCIEnvironmentInfo Environment { get; }
    public GitLabCICommands Commands { get; }
    public abstract virtual bool get_IsRunningOnGitLabCI();
    public abstract virtual GitLabCIEnvironmentInfo get_Environment();
    public abstract virtual GitLabCICommands get_Commands();
}
[DataContractAttribute]
public class Cake.Common.Build.GoCD.Data.GoCDBuildCauseInfo : object {
    [CompilerGeneratedAttribute]
private string <Approver>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<GoCDMaterialRevisionsInfo> <MaterialRevisions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TriggerForced>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TriggerMessage>k__BackingField;
    [DataMemberAttribute]
public string Approver { get; public set; }
    [DataMemberAttribute]
public IEnumerable`1<GoCDMaterialRevisionsInfo> MaterialRevisions { get; public set; }
    [DataMemberAttribute]
public bool TriggerForced { get; public set; }
    [DataMemberAttribute]
public string TriggerMessage { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Approver();
    [CompilerGeneratedAttribute]
public void set_Approver(string value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<GoCDMaterialRevisionsInfo> get_MaterialRevisions();
    [CompilerGeneratedAttribute]
public void set_MaterialRevisions(IEnumerable`1<GoCDMaterialRevisionsInfo> value);
    [CompilerGeneratedAttribute]
public bool get_TriggerForced();
    [CompilerGeneratedAttribute]
public void set_TriggerForced(bool value);
    [CompilerGeneratedAttribute]
public string get_TriggerMessage();
    [CompilerGeneratedAttribute]
public void set_TriggerMessage(string value);
}
public class Cake.Common.Build.GoCD.Data.GoCDEnvironmentInfo : GoCDInfo {
    [CompilerGeneratedAttribute]
private GoCDPipelineInfo <Pipeline>k__BackingField;
    [CompilerGeneratedAttribute]
private GoCDStageInfo <Stage>k__BackingField;
    [CompilerGeneratedAttribute]
private GoCDRepositoryInfo <Repository>k__BackingField;
    public GoCDPipelineInfo Pipeline { get; }
    public GoCDStageInfo Stage { get; }
    public GoCDRepositoryInfo Repository { get; }
    public string GoCDUrl { get; }
    public string EnvironmentName { get; }
    public string JobName { get; }
    public string User { get; }
    public GoCDEnvironmentInfo(ICakeEnvironment environment);
    [CompilerGeneratedAttribute]
public GoCDPipelineInfo get_Pipeline();
    [CompilerGeneratedAttribute]
public GoCDStageInfo get_Stage();
    [CompilerGeneratedAttribute]
public GoCDRepositoryInfo get_Repository();
    public string get_GoCDUrl();
    public string get_EnvironmentName();
    public string get_JobName();
    public string get_User();
}
[DataContractAttribute]
public class Cake.Common.Build.GoCD.Data.GoCDHistoryInfo : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<GoCDPipelineHistoryInfo> <Pipelines>k__BackingField;
    [DataMemberAttribute]
public IEnumerable`1<GoCDPipelineHistoryInfo> Pipelines { get; public set; }
    [CompilerGeneratedAttribute]
public IEnumerable`1<GoCDPipelineHistoryInfo> get_Pipelines();
    [CompilerGeneratedAttribute]
public void set_Pipelines(IEnumerable`1<GoCDPipelineHistoryInfo> value);
}
[DataContractAttribute]
public class Cake.Common.Build.GoCD.Data.GoCDMaterialRevisionsInfo : object {
    [CompilerGeneratedAttribute]
private bool <Changed>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<GoCDModificationInfo> <Modifications>k__BackingField;
    [DataMemberAttribute]
public bool Changed { get; public set; }
    [DataMemberAttribute]
public IEnumerable`1<GoCDModificationInfo> Modifications { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Changed();
    [CompilerGeneratedAttribute]
public void set_Changed(bool value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<GoCDModificationInfo> get_Modifications();
    [CompilerGeneratedAttribute]
public void set_Modifications(IEnumerable`1<GoCDModificationInfo> value);
}
[DataContractAttribute]
public class Cake.Common.Build.GoCD.Data.GoCDModificationInfo : object {
    [CompilerGeneratedAttribute]
private string <EmailAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private long <ModifiedTimeUnixMilliseconds>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Username>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Comment>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Revision>k__BackingField;
    [DataMemberAttribute]
public string EmailAddress { get; public set; }
    [DataMemberAttribute]
public int Id { get; public set; }
    [DataMemberAttribute]
public long ModifiedTimeUnixMilliseconds { get; public set; }
    public DateTime ModifiedTime { get; public set; }
    [DataMemberAttribute]
public string Username { get; public set; }
    [DataMemberAttribute]
public string Comment { get; public set; }
    [DataMemberAttribute]
public string Revision { get; public set; }
    [CompilerGeneratedAttribute]
public string get_EmailAddress();
    [CompilerGeneratedAttribute]
public void set_EmailAddress(string value);
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(int value);
    [CompilerGeneratedAttribute]
public long get_ModifiedTimeUnixMilliseconds();
    [CompilerGeneratedAttribute]
public void set_ModifiedTimeUnixMilliseconds(long value);
    public DateTime get_ModifiedTime();
    public void set_ModifiedTime(DateTime value);
    [CompilerGeneratedAttribute]
public string get_Username();
    [CompilerGeneratedAttribute]
public void set_Username(string value);
    [CompilerGeneratedAttribute]
public string get_Comment();
    [CompilerGeneratedAttribute]
public void set_Comment(string value);
    [CompilerGeneratedAttribute]
public string get_Revision();
    [CompilerGeneratedAttribute]
public void set_Revision(string value);
    private static DateTime FromUnixTimeMilliseconds(long milliseconds);
    private static long ToUnixTimeMilliseconds(DateTime dateTime);
}
[DataContractAttribute]
public class Cake.Common.Build.GoCD.Data.GoCDPipelineHistoryInfo : object {
    [CompilerGeneratedAttribute]
private GoCDBuildCauseInfo <BuildCause>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Comment>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NaturalOrder>k__BackingField;
    [DataMemberAttribute]
public GoCDBuildCauseInfo BuildCause { get; public set; }
    [DataMemberAttribute]
public string Comment { get; public set; }
    [DataMemberAttribute]
public string Name { get; public set; }
    [DataMemberAttribute]
public string NaturalOrder { get; public set; }
    [CompilerGeneratedAttribute]
public GoCDBuildCauseInfo get_BuildCause();
    [CompilerGeneratedAttribute]
public void set_BuildCause(GoCDBuildCauseInfo value);
    [CompilerGeneratedAttribute]
public string get_Comment();
    [CompilerGeneratedAttribute]
public void set_Comment(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_NaturalOrder();
    [CompilerGeneratedAttribute]
public void set_NaturalOrder(string value);
}
public class Cake.Common.Build.GoCD.Data.GoCDPipelineInfo : GoCDInfo {
    public string Name { get; }
    public int Counter { get; }
    public string Label { get; }
    public GoCDPipelineInfo(ICakeEnvironment environment);
    public string get_Name();
    public int get_Counter();
    public string get_Label();
}
public class Cake.Common.Build.GoCD.Data.GoCDRepositoryInfo : GoCDInfo {
    public string Revision { get; }
    public string ToRevision { get; }
    public string FromRevision { get; }
    public GoCDRepositoryInfo(ICakeEnvironment environment);
    public string get_Revision();
    public string get_ToRevision();
    public string get_FromRevision();
}
public class Cake.Common.Build.GoCD.Data.GoCDStageInfo : GoCDInfo {
    public string Name { get; }
    public int Counter { get; }
    public GoCDStageInfo(ICakeEnvironment environment);
    public string get_Name();
    public int get_Counter();
}
public abstract class Cake.Common.Build.GoCD.GoCDInfo : object {
    private ICakeEnvironment _environment;
    protected GoCDInfo(ICakeEnvironment environment);
    protected string GetEnvironmentString(string variable);
    protected int GetEnvironmentInteger(string variable);
    protected bool GetEnvironmentBoolean(string variable);
}
public class Cake.Common.Build.GoCD.GoCDProvider : object {
    private ICakeEnvironment _environment;
    private ICakeLog _log;
    [CompilerGeneratedAttribute]
private GoCDEnvironmentInfo <Environment>k__BackingField;
    public bool IsRunningOnGoCD { get; }
    public GoCDEnvironmentInfo Environment { get; }
    public GoCDProvider(ICakeEnvironment environment, ICakeLog log);
    public sealed virtual bool get_IsRunningOnGoCD();
    [CompilerGeneratedAttribute]
public sealed virtual GoCDEnvironmentInfo get_Environment();
    public sealed virtual GoCDHistoryInfo GetHistory(string username, string password);
    public sealed virtual GoCDHistoryInfo GetHistory(string username, string password, string serverUrl);
}
public interface Cake.Common.Build.GoCD.IGoCDProvider {
    public bool IsRunningOnGoCD { get; }
    public GoCDEnvironmentInfo Environment { get; }
    public abstract virtual bool get_IsRunningOnGoCD();
    public abstract virtual GoCDEnvironmentInfo get_Environment();
    public abstract virtual GoCDHistoryInfo GetHistory(string username, string password);
    public abstract virtual GoCDHistoryInfo GetHistory(string username, string password, string serverUrl);
}
public interface Cake.Common.Build.IBuildSystemServiceMessageWriter {
    public abstract virtual void Write(string format, Object[] args);
}
public class Cake.Common.Build.Jenkins.Data.JenkinsBuildInfo : JenkinsInfo {
    public int BuildNumber { get; }
    public string BuildId { get; }
    public string BuildDisplayName { get; }
    public string BuildTag { get; }
    public string BuildUrl { get; }
    public int ExecutorNumber { get; }
    public string Workspace { get; }
    public JenkinsBuildInfo(ICakeEnvironment environment);
    public int get_BuildNumber();
    public string get_BuildId();
    public string get_BuildDisplayName();
    public string get_BuildTag();
    public string get_BuildUrl();
    public int get_ExecutorNumber();
    public string get_Workspace();
}
public class Cake.Common.Build.Jenkins.Data.JenkinsChangeInfo : JenkinsInfo {
    public string Id { get; }
    public bool IsPullRequest { get; }
    public string Url { get; }
    public string Title { get; }
    public string Author { get; }
    public string AuthorDisplayName { get; }
    public string AuthorEmail { get; }
    public string Target { get; }
    public string Branch { get; }
    public string Fork { get; }
    public JenkinsChangeInfo(ICakeEnvironment environment);
    public string get_Id();
    public bool get_IsPullRequest();
    public string get_Url();
    public string get_Title();
    public string get_Author();
    public string get_AuthorDisplayName();
    public string get_AuthorEmail();
    public string get_Target();
    public string get_Branch();
    public string get_Fork();
}
public class Cake.Common.Build.Jenkins.Data.JenkinsEnvironmentInfo : JenkinsInfo {
    [CompilerGeneratedAttribute]
private JenkinsBuildInfo <Build>k__BackingField;
    [CompilerGeneratedAttribute]
private JenkinsRepositoryInfo <Repository>k__BackingField;
    [CompilerGeneratedAttribute]
private JenkinsJobInfo <Job>k__BackingField;
    [CompilerGeneratedAttribute]
private JenkinsNodeInfo <Node>k__BackingField;
    [CompilerGeneratedAttribute]
private JenkinsChangeInfo <Change>k__BackingField;
    public JenkinsBuildInfo Build { get; }
    public JenkinsRepositoryInfo Repository { get; }
    public JenkinsJobInfo Job { get; }
    public JenkinsNodeInfo Node { get; }
    public JenkinsChangeInfo Change { get; }
    public string JenkinsHome { get; }
    public string JenkinsUrl { get; }
    public JenkinsEnvironmentInfo(ICakeEnvironment environment);
    [CompilerGeneratedAttribute]
public JenkinsBuildInfo get_Build();
    [CompilerGeneratedAttribute]
public JenkinsRepositoryInfo get_Repository();
    [CompilerGeneratedAttribute]
public JenkinsJobInfo get_Job();
    [CompilerGeneratedAttribute]
public JenkinsNodeInfo get_Node();
    [CompilerGeneratedAttribute]
public JenkinsChangeInfo get_Change();
    public string get_JenkinsHome();
    public string get_JenkinsUrl();
}
public class Cake.Common.Build.Jenkins.Data.JenkinsJobInfo : JenkinsInfo {
    public string JobName { get; }
    public string JobBaseName { get; }
    public string JobUrl { get; }
    public JenkinsJobInfo(ICakeEnvironment environment);
    public string get_JobName();
    public string get_JobBaseName();
    public string get_JobUrl();
}
public class Cake.Common.Build.Jenkins.Data.JenkinsNodeInfo : JenkinsInfo {
    public string NodeName { get; }
    public String[] NodeLabels { get; }
    public JenkinsNodeInfo(ICakeEnvironment environment);
    public string get_NodeName();
    public String[] get_NodeLabels();
}
public class Cake.Common.Build.Jenkins.Data.JenkinsRepositoryInfo : JenkinsInfo {
    public string BranchName { get; }
    public string GitCommitSha { get; }
    public string GitPreviousCommitSha { get; }
    public string GitPreviousSuccessfullCommitSha { get; }
    public string GitBranch { get; }
    public string GitLocalBranch { get; }
    public string GitCheckoutDirectory { get; }
    public string GitUrl { get; }
    public string SvnRevision { get; }
    public string CvsBranch { get; }
    public string SvnUrl { get; }
    public string MercurialRevision { get; }
    public string MercurialRevisionShort { get; }
    public string MercurialRevisionNumber { get; }
    public string MercurialRevisionBranch { get; }
    public string MercurialRepositoryUrl { get; }
    public JenkinsRepositoryInfo(ICakeEnvironment environment);
    public string get_BranchName();
    public string get_GitCommitSha();
    public string get_GitPreviousCommitSha();
    public string get_GitPreviousSuccessfullCommitSha();
    public string get_GitBranch();
    public string get_GitLocalBranch();
    public string get_GitCheckoutDirectory();
    public string get_GitUrl();
    public string get_SvnRevision();
    public string get_CvsBranch();
    public string get_SvnUrl();
    public string get_MercurialRevision();
    public string get_MercurialRevisionShort();
    public string get_MercurialRevisionNumber();
    public string get_MercurialRevisionBranch();
    public string get_MercurialRepositoryUrl();
}
public interface Cake.Common.Build.Jenkins.IJenkinsProvider {
    public bool IsRunningOnJenkins { get; }
    public JenkinsEnvironmentInfo Environment { get; }
    public abstract virtual bool get_IsRunningOnJenkins();
    public abstract virtual JenkinsEnvironmentInfo get_Environment();
}
public abstract class Cake.Common.Build.Jenkins.JenkinsInfo : object {
    private ICakeEnvironment _environment;
    protected JenkinsInfo(ICakeEnvironment environment);
    protected string GetEnvironmentString(string variable);
    protected int GetEnvironmentInteger(string variable);
    protected bool GetEnvironmentBoolean(string variable);
}
public class Cake.Common.Build.Jenkins.JenkinsProvider : object {
    private ICakeEnvironment _environment;
    [CompilerGeneratedAttribute]
private JenkinsEnvironmentInfo <Environment>k__BackingField;
    public bool IsRunningOnJenkins { get; }
    public JenkinsEnvironmentInfo Environment { get; }
    public JenkinsProvider(ICakeEnvironment environment);
    public sealed virtual bool get_IsRunningOnJenkins();
    [CompilerGeneratedAttribute]
public sealed virtual JenkinsEnvironmentInfo get_Environment();
}
public interface Cake.Common.Build.MyGet.IMyGetProvider {
    public bool IsRunningOnMyGet { get; }
    public abstract virtual bool get_IsRunningOnMyGet();
    public abstract virtual void BuildProblem(string description);
    public abstract virtual void SetParameter(string name, string value);
    public abstract virtual void WriteStatus(string message, MyGetBuildStatus status, string errorDetails);
    public abstract virtual void SetBuildNumber(string buildNumber);
}
public enum Cake.Common.Build.MyGet.MyGetBuildStatus : Enum {
    public int value__;
    public static MyGetBuildStatus Failure;
    public static MyGetBuildStatus Error;
    public static MyGetBuildStatus Warning;
    public static MyGetBuildStatus Normal;
}
public class Cake.Common.Build.MyGet.MyGetProvider : object {
    private static string MessagePrefix;
    private static string MessagePostfix;
    private static Dictionary`2<char, string> _sanitizationTokens;
    private static Char[] _specialCharacters;
    private ICakeEnvironment _environment;
    private IBuildSystemServiceMessageWriter _writer;
    public bool IsRunningOnMyGet { get; }
    private static MyGetProvider();
    public MyGetProvider(ICakeEnvironment environment, IBuildSystemServiceMessageWriter writer);
    public sealed virtual bool get_IsRunningOnMyGet();
    public sealed virtual void BuildProblem(string description);
    public sealed virtual void SetParameter(string name, string value);
    public sealed virtual void WriteStatus(string message, MyGetBuildStatus status, string errorDetails);
    public sealed virtual void SetBuildNumber(string buildNumber);
    private void WriteServiceMessage(string messageName, string attributeValue);
    private void WriteServiceMessage(string messageName, string attributeName, string attributeValue);
    private void WriteServiceMessage(string messageName, Dictionary`2<string, string> values);
    private static string Sanitize(string source);
}
[CompilerGeneratedAttribute]
internal class Cake.Common.Build.NamespaceDoc : object {
}
public class Cake.Common.Build.TeamCity.Data.TeamCityBuildInfo : TeamCityInfo {
    private Nullable`1<DateTimeOffset> _startDateTime;
    private Lazy`1<Dictionary`2<string, string>> _buildProperties;
    private Lazy`1<Dictionary`2<string, string>> _configProperties;
    private Lazy`1<Dictionary`2<string, string>> _runnerProperties;
    public string BuildConfName { get; }
    public string Number { get; }
    public Nullable`1<DateTimeOffset> StartDateTime { get; }
    public string BranchName { get; }
    public string VcsBranchName { get; }
    public Dictionary`2<string, string> BuildProperties { get; }
    public Dictionary`2<string, string> ConfigProperties { get; }
    public Dictionary`2<string, string> RunnerProperties { get; }
    public TeamCityBuildInfo(ICakeEnvironment environment, IFileSystem fileSystem);
    public string get_BuildConfName();
    public string get_Number();
    public Nullable`1<DateTimeOffset> get_StartDateTime();
    public string get_BranchName();
    public string get_VcsBranchName();
    public Dictionary`2<string, string> get_BuildProperties();
    public Dictionary`2<string, string> get_ConfigProperties();
    public Dictionary`2<string, string> get_RunnerProperties();
    private Dictionary`2<string, string> ReadAndParseFile(IFileSystem fileSystem, string fileName);
    private string BuildValueIfExists(string key);
}
public class Cake.Common.Build.TeamCity.Data.TeamCityEnvironmentInfo : TeamCityInfo {
    [CompilerGeneratedAttribute]
private TeamCityProjectInfo <Project>k__BackingField;
    [CompilerGeneratedAttribute]
private TeamCityBuildInfo <Build>k__BackingField;
    [CompilerGeneratedAttribute]
private TeamCityPullRequestInfo <PullRequest>k__BackingField;
    public TeamCityProjectInfo Project { get; }
    public TeamCityBuildInfo Build { get; }
    public TeamCityPullRequestInfo PullRequest { get; }
    public TeamCityEnvironmentInfo(ICakeEnvironment environment, IFileSystem fileSystem);
    [CompilerGeneratedAttribute]
public TeamCityProjectInfo get_Project();
    [CompilerGeneratedAttribute]
public TeamCityBuildInfo get_Build();
    [CompilerGeneratedAttribute]
public TeamCityPullRequestInfo get_PullRequest();
}
public class Cake.Common.Build.TeamCity.Data.TeamCityProjectInfo : TeamCityInfo {
    public string Name { get; }
    public TeamCityProjectInfo(ICakeEnvironment environment);
    public string get_Name();
}
public class Cake.Common.Build.TeamCity.Data.TeamCityPullRequestInfo : TeamCityInfo {
    private TeamCityBuildInfo _buildInfo;
    public bool IsPullRequest { get; }
    public Nullable`1<int> Number { get; }
    public TeamCityPullRequestInfo(ICakeEnvironment environment, TeamCityBuildInfo buildInfo);
    private bool InferIsPullRequest();
    private Nullable`1<int> GetPullRequestNumber();
    private string GetBranchRef();
    public bool get_IsPullRequest();
    public Nullable`1<int> get_Number();
}
public interface Cake.Common.Build.TeamCity.ITeamCityProvider {
    public bool IsRunningOnTeamCity { get; }
    public TeamCityEnvironmentInfo Environment { get; }
    public abstract virtual bool get_IsRunningOnTeamCity();
    public abstract virtual TeamCityEnvironmentInfo get_Environment();
    public abstract virtual void BuildProblem(string description, string identity);
    public abstract virtual void ImportData(string type, FilePath path);
    public abstract virtual void ImportDotCoverCoverage(FilePath snapshotFile, DirectoryPath dotCoverHome);
    public abstract virtual void PublishArtifacts(string path);
    public abstract virtual void SetBuildNumber(string buildNumber);
    public abstract virtual void SetParameter(string parameterName, string parameterValue);
    public abstract virtual void WriteEndBlock(string blockName);
    public abstract virtual void WriteEndBuildBlock(string compilerName);
    public abstract virtual void WriteEndProgress(string message);
    public abstract virtual void WriteProgressMessage(string message);
    public abstract virtual void WriteStartBlock(string blockName);
    public abstract virtual void WriteStartBuildBlock(string compilerName);
    public abstract virtual void WriteStartProgress(string message);
    public abstract virtual void WriteStatus(string message, string status, string errorDetails);
    public abstract virtual void WritePrependBuildStatus(string message, string status);
    public abstract virtual void WriteAppendBuildStatus(string message, string status);
    public abstract virtual void WriteReplacementBuildStatus(string message, string status);
    public abstract virtual void WriteStatistic(string key, string value);
}
[CompilerGeneratedAttribute]
internal class Cake.Common.Build.TeamCity.NamespaceDoc : object {
}
[ExtensionAttribute]
public static class Cake.Common.Build.TeamCity.TeamCityDisposableExtensions : object {
    [ExtensionAttribute]
public static IDisposable Block(ITeamCityProvider teamCityProvider, string blockName);
    [ExtensionAttribute]
public static IDisposable BuildBlock(ITeamCityProvider teamCityProvider, string compilerName);
}
public abstract class Cake.Common.Build.TeamCity.TeamCityInfo : object {
    private ICakeEnvironment _environment;
    protected TeamCityInfo(ICakeEnvironment environment);
    protected string GetEnvironmentString(string variable);
    protected int GetEnvironmentInteger(string variable);
    protected bool GetEnvironmentBoolean(string variable);
}
public class Cake.Common.Build.TeamCity.TeamCityProvider : object {
    private static string MessagePrefix;
    private static string MessagePostfix;
    private static Dictionary`2<string, string> _sanitizationTokens;
    private ICakeEnvironment _environment;
    private IFileSystem _fileSystem;
    private IBuildSystemServiceMessageWriter _writer;
    [CompilerGeneratedAttribute]
private TeamCityEnvironmentInfo <Environment>k__BackingField;
    public bool IsRunningOnTeamCity { get; }
    public TeamCityEnvironmentInfo Environment { get; }
    private static TeamCityProvider();
    public TeamCityProvider(ICakeEnvironment environment, IFileSystem fileSystem, IBuildSystemServiceMessageWriter writer);
    public sealed virtual bool get_IsRunningOnTeamCity();
    [CompilerGeneratedAttribute]
public sealed virtual TeamCityEnvironmentInfo get_Environment();
    public sealed virtual void WriteProgressMessage(string message);
    public sealed virtual void WriteStartProgress(string message);
    public sealed virtual void WriteEndProgress(string message);
    public sealed virtual void WriteStartBlock(string blockName);
    public sealed virtual void WriteEndBlock(string blockName);
    public sealed virtual void WriteStartBuildBlock(string compilerName);
    public sealed virtual void WriteEndBuildBlock(string compilerName);
    public sealed virtual void WriteStatus(string message, string status, string errorDetails);
    public sealed virtual void WriteAppendBuildStatus(string message, string status);
    public sealed virtual void WritePrependBuildStatus(string message, string status);
    public sealed virtual void WriteReplacementBuildStatus(string message, string status);
    public sealed virtual void ImportData(string type, FilePath path);
    public sealed virtual void ImportDotCoverCoverage(FilePath snapshotFile, DirectoryPath dotCoverHome);
    public sealed virtual void BuildProblem(string description, string identity);
    public sealed virtual void PublishArtifacts(string path);
    public sealed virtual void SetBuildNumber(string buildNumber);
    public sealed virtual void SetParameter(string parameterName, string parameterValue);
    public sealed virtual void WriteStatistic(string key, string value);
    private void WriteServiceMessage(string messageName, string attributeValue);
    private void WriteServiceMessage(string messageName, string attributeName, string attributeValue);
    private void WriteServiceMessage(string messageName, Dictionary`2<string, string> values);
    private static string Sanitize(string source);
}
public class Cake.Common.Build.TravisCI.Data.TravisCIBuildInfo : TravisCIInfo {
    public string Branch { get; }
    public string BuildDirectory { get; }
    public string BuildId { get; }
    public int BuildNumber { get; }
    public int TestResult { get; }
    public string Tag { get; }
    public TravisCIBuildInfo(ICakeEnvironment environment);
    public string get_Branch();
    public string get_BuildDirectory();
    public string get_BuildId();
    public int get_BuildNumber();
    public int get_TestResult();
    public string get_Tag();
}
public class Cake.Common.Build.TravisCI.Data.TravisCIEnvironmentInfo : TravisCIInfo {
    [CompilerGeneratedAttribute]
private TravisCIBuildInfo <Build>k__BackingField;
    [CompilerGeneratedAttribute]
private TravisCIPullRequestInfo <PullRequest>k__BackingField;
    [CompilerGeneratedAttribute]
private TravisCIJobInfo <Job>k__BackingField;
    [CompilerGeneratedAttribute]
private TravisCIRepositoryInfo <Repository>k__BackingField;
    public TravisCIBuildInfo Build { get; }
    public TravisCIPullRequestInfo PullRequest { get; }
    public TravisCIJobInfo Job { get; }
    public TravisCIRepositoryInfo Repository { get; }
    public bool CI { get; }
    public string Home { get; }
    public bool Travis { get; }
    public TravisCIEnvironmentInfo(ICakeEnvironment environment);
    [CompilerGeneratedAttribute]
public TravisCIBuildInfo get_Build();
    [CompilerGeneratedAttribute]
public TravisCIPullRequestInfo get_PullRequest();
    [CompilerGeneratedAttribute]
public TravisCIJobInfo get_Job();
    [CompilerGeneratedAttribute]
public TravisCIRepositoryInfo get_Repository();
    public bool get_CI();
    public string get_Home();
    public bool get_Travis();
}
public class Cake.Common.Build.TravisCI.Data.TravisCIJobInfo : TravisCIInfo {
    public string JobId { get; }
    public string JobNumber { get; }
    public string OSName { get; }
    public bool SecureEnvironmentVariables { get; }
    public TravisCIJobInfo(ICakeEnvironment environment);
    public string get_JobId();
    public string get_JobNumber();
    public string get_OSName();
    public bool get_SecureEnvironmentVariables();
}
public class Cake.Common.Build.TravisCI.Data.TravisCIPullRequestInfo : TravisCIInfo {
    public bool IsPullRequest { get; }
    public int Id { get; }
    public TravisCIPullRequestInfo(ICakeEnvironment environment);
    public bool get_IsPullRequest();
    public int get_Id();
}
public class Cake.Common.Build.TravisCI.Data.TravisCIRepositoryInfo : TravisCIInfo {
    public string Commit { get; }
    public string CommitRange { get; }
    public string PullRequest { get; }
    public string Slug { get; }
    public TravisCIRepositoryInfo(ICakeEnvironment environment);
    public string get_Commit();
    public string get_CommitRange();
    public string get_PullRequest();
    public string get_Slug();
}
public interface Cake.Common.Build.TravisCI.ITravisCIProvider {
    public bool IsRunningOnTravisCI { get; }
    public TravisCIEnvironmentInfo Environment { get; }
    public abstract virtual bool get_IsRunningOnTravisCI();
    public abstract virtual TravisCIEnvironmentInfo get_Environment();
    public abstract virtual void WriteStartFold(string name);
    public abstract virtual void WriteEndFold(string name);
}
[ExtensionAttribute]
public static class Cake.Common.Build.TravisCI.TravisCIDisposableExtensions : object {
    [ExtensionAttribute]
public static IDisposable Fold(ITravisCIProvider travisCIProvider, string name);
}
public abstract class Cake.Common.Build.TravisCI.TravisCIInfo : object {
    private ICakeEnvironment _environment;
    protected TravisCIInfo(ICakeEnvironment environment);
    protected string GetEnvironmentString(string variable);
    protected int GetEnvironmentInteger(string variable);
    protected bool GetEnvironmentBoolean(string variable);
}
public class Cake.Common.Build.TravisCI.TravisCIProvider : object {
    private static string MessagePrefix;
    private static string MessagePostfix;
    private ICakeEnvironment _environment;
    private IBuildSystemServiceMessageWriter _writer;
    private static Dictionary`2<string, string> _sanitizationTokens;
    [CompilerGeneratedAttribute]
private TravisCIEnvironmentInfo <Environment>k__BackingField;
    public bool IsRunningOnTravisCI { get; }
    public TravisCIEnvironmentInfo Environment { get; }
    private static TravisCIProvider();
    public TravisCIProvider(ICakeEnvironment environment, IBuildSystemServiceMessageWriter writer);
    public sealed virtual bool get_IsRunningOnTravisCI();
    [CompilerGeneratedAttribute]
public sealed virtual TravisCIEnvironmentInfo get_Environment();
    public sealed virtual void WriteStartFold(string name);
    public sealed virtual void WriteEndFold(string name);
    private void WriteServiceMessage(string messageName, string attributeName, string attributeValue);
    private void WriteServiceMessage(string messageName, Dictionary`2<string, string> values);
    private static string Sanitize(string source);
}
[ExtensionAttribute]
[CakeAliasCategoryAttribute("Logging")]
public static class Cake.Common.Diagnostics.LoggingAliases : object {
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Error")]
public static void Error(ICakeContext context, string format, Object[] args);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Error")]
public static void Error(ICakeContext context, LogAction logAction);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Error")]
public static void Error(ICakeContext context, object value);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Error")]
public static void Error(ICakeContext context, string value);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Warning")]
public static void Warning(ICakeContext context, string format, Object[] args);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Warning")]
public static void Warning(ICakeContext context, LogAction logAction);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Warning")]
public static void Warning(ICakeContext context, object value);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Warning")]
public static void Warning(ICakeContext context, string value);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Information")]
public static void Information(ICakeContext context, string format, Object[] args);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Information")]
public static void Information(ICakeContext context, LogAction logAction);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Information")]
public static void Information(ICakeContext context, object value);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Information")]
public static void Information(ICakeContext context, string value);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Verbose")]
public static void Verbose(ICakeContext context, string format, Object[] args);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Verbose")]
public static void Verbose(ICakeContext context, LogAction logAction);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Verbose")]
public static void Verbose(ICakeContext context, object value);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Verbose")]
public static void Verbose(ICakeContext context, string value);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Debug")]
public static void Debug(ICakeContext context, string format, Object[] args);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Debug")]
public static void Debug(ICakeContext context, LogAction logAction);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Debug")]
public static void Debug(ICakeContext context, object value);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Debug")]
public static void Debug(ICakeContext context, string value);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Verbosity")]
public static IDisposable QuietVerbosity(ICakeContext context);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Verbosity")]
public static IDisposable MinimalVerbosity(ICakeContext context);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Verbosity")]
public static IDisposable NormalVerbosity(ICakeContext context);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Verbosity")]
public static IDisposable VerboseVerbosity(ICakeContext context);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Verbosity")]
public static IDisposable DiagnosticVerbosity(ICakeContext context);
}
[CompilerGeneratedAttribute]
internal class Cake.Common.Diagnostics.NamespaceDoc : object {
}
[ExtensionAttribute]
[CakeAliasCategoryAttribute("Diagnostics")]
public static class Cake.Common.Diagnostics.ScriptCallerAliases : object {
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static ScriptCallerInfo GetCallerInfo(ICakeContext context, string memberName, string sourceFilePath, int sourceLineNumber);
}
public class Cake.Common.Diagnostics.ScriptCallerInfo : object {
    [CompilerGeneratedAttribute]
private string <MemberName>k__BackingField;
    [CompilerGeneratedAttribute]
private FilePath <SourceFilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SourceLineNumber>k__BackingField;
    public string MemberName { get; }
    public FilePath SourceFilePath { get; }
    public int SourceLineNumber { get; }
    public ScriptCallerInfo(string memberName, FilePath sourceFilePath, int sourceLineNumber);
    [CompilerGeneratedAttribute]
public string get_MemberName();
    [CompilerGeneratedAttribute]
public FilePath get_SourceFilePath();
    [CompilerGeneratedAttribute]
public int get_SourceLineNumber();
    public virtual string ToString();
}
[ExtensionAttribute]
[CakeAliasCategoryAttribute("Dry Run")]
public static class Cake.Common.DryRunAliases : object {
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static bool IsDryRun(ICakeContext context);
}
[ExtensionAttribute]
[CakeAliasCategoryAttribute("Environment")]
public static class Cake.Common.EnvironmentAliases : object {
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Environment Variables")]
public static string EnvironmentVariable(ICakeContext context, string variable);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Environment Variables")]
public static T EnvironmentVariable(ICakeContext context, string variable, T defaultValue);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Environment Variables")]
public static IDictionary`2<string, string> EnvironmentVariables(ICakeContext context);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Environment Variables")]
public static bool HasEnvironmentVariable(ICakeContext context, string variable);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Platform")]
public static bool IsRunningOnWindows(ICakeContext context);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Platform")]
public static bool IsRunningOnUnix(ICakeContext context);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Platform")]
public static bool IsRunningOnMacOs(ICakeContext context);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Platform")]
public static bool IsRunningOnLinux(ICakeContext context);
    private static T Convert(string value);
}
public class Cake.Common.IO.CleanDirectorySettings : object {
    [CompilerGeneratedAttribute]
private bool <Force>k__BackingField;
    public bool Force { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Force();
    [CompilerGeneratedAttribute]
public void set_Force(bool value);
}
public class Cake.Common.IO.DeleteDirectorySettings : object {
    [CompilerGeneratedAttribute]
private bool <Recursive>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Force>k__BackingField;
    public bool Recursive { get; public set; }
    public bool Force { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Recursive();
    [CompilerGeneratedAttribute]
public void set_Recursive(bool value);
    [CompilerGeneratedAttribute]
public bool get_Force();
    [CompilerGeneratedAttribute]
public void set_Force(bool value);
}
[ExtensionAttribute]
[CakeAliasCategoryAttribute("Directory Operations")]
public static class Cake.Common.IO.DirectoryAliases : object {
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeNamespaceImportAttribute("Cake.Common.IO.Paths")]
public static ConvertableDirectoryPath Directory(ICakeContext context, string path);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Delete")]
public static void DeleteDirectories(ICakeContext context, IEnumerable`1<DirectoryPath> directories, DeleteDirectorySettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Delete")]
public static void DeleteDirectories(ICakeContext context, IEnumerable`1<string> directories, DeleteDirectorySettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Delete")]
public static void DeleteDirectory(ICakeContext context, DirectoryPath path, DeleteDirectorySettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Clean")]
public static void CleanDirectories(ICakeContext context, GlobPattern pattern);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Clean")]
public static void CleanDirectories(ICakeContext context, GlobPattern pattern, CleanDirectorySettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Clean")]
public static void CleanDirectories(ICakeContext context, GlobPattern pattern, Func`2<IFileSystemInfo, bool> predicate);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Clean")]
public static void CleanDirectories(ICakeContext context, GlobPattern pattern, Func`2<IFileSystemInfo, bool> predicate, CleanDirectorySettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Clean")]
public static void CleanDirectories(ICakeContext context, IEnumerable`1<DirectoryPath> directories);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Clean")]
public static void CleanDirectories(ICakeContext context, IEnumerable`1<DirectoryPath> directories, CleanDirectorySettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Clean")]
public static void CleanDirectories(ICakeContext context, IEnumerable`1<string> directories);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Clean")]
public static void CleanDirectories(ICakeContext context, IEnumerable`1<string> directories, CleanDirectorySettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Clean")]
public static void CleanDirectory(ICakeContext context, DirectoryPath path);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Clean")]
public static void CleanDirectory(ICakeContext context, DirectoryPath path, CleanDirectorySettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Clean")]
public static void CleanDirectory(ICakeContext context, DirectoryPath path, Func`2<IFileSystemInfo, bool> predicate);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Clean")]
public static void CleanDirectory(ICakeContext context, DirectoryPath path, Func`2<IFileSystemInfo, bool> predicate, CleanDirectorySettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Create")]
public static void CreateDirectory(ICakeContext context, DirectoryPath path);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Exists")]
public static void EnsureDirectoryExists(ICakeContext context, DirectoryPath path);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("DoesNotExist")]
public static void EnsureDirectoryDoesNotExist(ICakeContext context, DirectoryPath path);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("DoesNotExist")]
public static void EnsureDirectoryDoesNotExist(ICakeContext context, DirectoryPath path, DeleteDirectorySettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("DoesNotExist")]
public static void EnsureDirectoryDoesNotExist(ICakeContext context, DirectoryPath path, EnsureDirectoryDoesNotExistSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Copy")]
public static void CopyDirectory(ICakeContext context, DirectoryPath source, DirectoryPath destination);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Exists")]
public static bool DirectoryExists(ICakeContext context, DirectoryPath path);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Path")]
public static DirectoryPath MakeAbsolute(ICakeContext context, DirectoryPath path);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Path")]
public static DirectoryPath MakeRelative(ICakeContext context, DirectoryPath path, DirectoryPath rootPath);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Path")]
public static FilePath MakeRelative(ICakeContext context, FilePath path, DirectoryPath rootPath);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Move")]
public static void MoveDirectory(ICakeContext context, DirectoryPath directoryPath, DirectoryPath targetDirectoryPath);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("List")]
public static DirectoryPathCollection GetSubDirectories(ICakeContext context, DirectoryPath directoryPath);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Path")]
public static DirectoryPath ExpandEnvironmentVariables(ICakeContext context, DirectoryPath directoryPath);
}
internal static class Cake.Common.IO.DirectoryCleaner : object {
    public static void Clean(ICakeContext context, DirectoryPath path);
    public static void Clean(ICakeContext context, DirectoryPath path, CleanDirectorySettings settings);
    public static void Clean(ICakeContext context, DirectoryPath path, Func`2<IFileSystemInfo, bool> predicate);
    public static void Clean(ICakeContext context, DirectoryPath path, Func`2<IFileSystemInfo, bool> predicate, CleanDirectorySettings settings);
    private static bool CleanDirectory(IDirectory root, Func`2<IFileSystemInfo, bool> predicate, int level, CleanDirectorySettings settings);
}
internal static class Cake.Common.IO.DirectoryCreator : object {
    public static void Create(ICakeContext context, DirectoryPath path);
}
internal static class Cake.Common.IO.DirectoryDeleter : object {
    public static void Delete(ICakeContext context, DirectoryPath path, DeleteDirectorySettings settings);
}
internal static class Cake.Common.IO.DirectoryMover : object {
    public static void MoveDirectory(ICakeContext context, DirectoryPath directoryPath, DirectoryPath targetDirectoryPath);
}
public class Cake.Common.IO.EnsureDirectoryDoesNotExistSettings : DeleteDirectorySettings {
}
[ExtensionAttribute]
[CakeAliasCategoryAttribute("File Operations")]
public static class Cake.Common.IO.FileAliases : object {
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeNamespaceImportAttribute("Cake.Common.IO.Paths")]
public static ConvertableFilePath File(ICakeContext context, string path);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Copy")]
public static void CopyFileToDirectory(ICakeContext context, FilePath filePath, DirectoryPath targetDirectoryPath);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Copy")]
public static void CopyFile(ICakeContext context, FilePath filePath, FilePath targetFilePath);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Copy")]
public static void CopyFiles(ICakeContext context, GlobPattern pattern, DirectoryPath targetDirectoryPath);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Copy")]
public static void CopyFiles(ICakeContext context, IEnumerable`1<FilePath> filePaths, DirectoryPath targetDirectoryPath);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Copy")]
public static void CopyFiles(ICakeContext context, IEnumerable`1<string> filePaths, DirectoryPath targetDirectoryPath);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Copy")]
public static void CopyFiles(ICakeContext context, GlobPattern pattern, DirectoryPath targetDirectoryPath, bool preserveFolderStructure);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Copy")]
public static void CopyFiles(ICakeContext context, IEnumerable`1<FilePath> filePaths, DirectoryPath targetDirectoryPath, bool preserveFolderStructure);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Copy")]
public static void CopyFiles(ICakeContext context, IEnumerable`1<string> filePaths, DirectoryPath targetDirectoryPath, bool preserveFolderStructure);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Move")]
public static void MoveFileToDirectory(ICakeContext context, FilePath filePath, DirectoryPath targetDirectoryPath);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Move")]
public static void MoveFiles(ICakeContext context, GlobPattern pattern, DirectoryPath targetDirectoryPath);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Move")]
public static void MoveFiles(ICakeContext context, IEnumerable`1<FilePath> filePaths, DirectoryPath targetDirectoryPath);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Move")]
public static void MoveFile(ICakeContext context, FilePath filePath, FilePath targetFilePath);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Delete")]
public static void DeleteFiles(ICakeContext context, GlobPattern pattern);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Delete")]
public static void DeleteFiles(ICakeContext context, IEnumerable`1<FilePath> filePaths);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Delete")]
public static void DeleteFile(ICakeContext context, FilePath filePath);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Exists")]
public static bool FileExists(ICakeContext context, FilePath filePath);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Path")]
public static FilePath MakeAbsolute(ICakeContext context, FilePath filePath);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Exists")]
public static long FileSize(ICakeContext context, FilePath filePath);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Path")]
public static FilePath ExpandEnvironmentVariables(ICakeContext context, FilePath filePath);
}
internal static class Cake.Common.IO.FileCopier : object {
    public static void CopyFileToDirectory(ICakeContext context, FilePath filePath, DirectoryPath targetDirectoryPath);
    public static void CopyFile(ICakeContext context, FilePath filePath, FilePath targetFilePath);
    public static void CopyFiles(ICakeContext context, GlobPattern pattern, DirectoryPath targetDirectoryPath, bool preserverFolderStructure);
    public static void CopyFiles(ICakeContext context, IEnumerable`1<FilePath> filePaths, DirectoryPath targetDirectoryPath, bool preserverFolderStructure);
    private static void CopyFileCore(ICakeContext context, FilePath filePath, FilePath targetFilePath, string commonPath);
}
internal static class Cake.Common.IO.FileDeleter : object {
    public static void DeleteFiles(ICakeContext context, GlobPattern pattern);
    public static void DeleteFiles(ICakeContext context, IEnumerable`1<FilePath> filePaths);
    public static void DeleteFile(ICakeContext context, FilePath filePath);
}
[ExtensionAttribute]
internal static class Cake.Common.IO.FileMover : object {
    public static void MoveFileToDirectory(ICakeContext context, FilePath filePath, DirectoryPath targetDirectoryPath);
    public static void MoveFiles(ICakeContext context, GlobPattern pattern, DirectoryPath targetDirectoryPath);
    [ExtensionAttribute]
public static void MoveFiles(ICakeContext context, IEnumerable`1<FilePath> filePaths, DirectoryPath targetDirectoryPath);
    public static void MoveFile(ICakeContext context, FilePath filePath, FilePath targetFilePath);
}
[ExtensionAttribute]
[CakeAliasCategoryAttribute("Globbing")]
public static class Cake.Common.IO.GlobbingAliases : object {
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Files")]
public static FilePathCollection GetFiles(ICakeContext context, GlobPattern pattern);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Files")]
public static FilePathCollection GetFiles(ICakeContext context, GlobPattern pattern, GlobberSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Directories")]
public static DirectoryPathCollection GetDirectories(ICakeContext context, GlobPattern pattern);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Directories")]
public static DirectoryPathCollection GetDirectories(ICakeContext context, GlobPattern pattern, GlobberSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Paths")]
public static PathCollection GetPaths(ICakeContext context, GlobPattern pattern);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Paths")]
public static PathCollection GetPaths(ICakeContext context, GlobPattern pattern, GlobberSettings settings);
}
[CompilerGeneratedAttribute]
internal class Cake.Common.IO.NamespaceDoc : object {
}
[CompilerGeneratedAttribute]
internal class Cake.Common.IO.Net.NamespaceDoc : object {
}
public class Cake.Common.IO.Paths.ConvertableDirectoryPath : object {
    [CompilerGeneratedAttribute]
private DirectoryPath <Path>k__BackingField;
    public DirectoryPath Path { get; }
    internal ConvertableDirectoryPath(DirectoryPath path);
    [CompilerGeneratedAttribute]
public DirectoryPath get_Path();
    public static ConvertableDirectoryPath op_Addition(ConvertableDirectoryPath left, ConvertableDirectoryPath right);
    public static ConvertableDirectoryPath op_Addition(DirectoryPath left, ConvertableDirectoryPath right);
    public static ConvertableDirectoryPath op_Addition(ConvertableDirectoryPath left, DirectoryPath right);
    public static ConvertableFilePath op_Addition(ConvertableDirectoryPath directory, ConvertableFilePath file);
    public static ConvertableFilePath op_Addition(ConvertableDirectoryPath directory, FilePath file);
    public static DirectoryPath op_Implicit(ConvertableDirectoryPath path);
    public static string op_Implicit(ConvertableDirectoryPath path);
    public virtual string ToString();
}
public class Cake.Common.IO.Paths.ConvertableFilePath : object {
    [CompilerGeneratedAttribute]
private FilePath <Path>k__BackingField;
    public FilePath Path { get; }
    internal ConvertableFilePath(FilePath path);
    [CompilerGeneratedAttribute]
public FilePath get_Path();
    public static FilePath op_Implicit(ConvertableFilePath path);
    public static string op_Implicit(ConvertableFilePath path);
    public virtual string ToString();
}
[CompilerGeneratedAttribute]
internal class Cake.Common.IO.Paths.NamespaceDoc : object {
}
[ExtensionAttribute]
[CakeAliasCategoryAttribute("Compression")]
public static class Cake.Common.IO.ZipAliases : object {
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void Zip(ICakeContext context, DirectoryPath rootPath, FilePath outputPath);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void Zip(ICakeContext context, DirectoryPath rootPath, FilePath outputPath, string pattern);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void Zip(ICakeContext context, DirectoryPath rootPath, FilePath outputPath, IEnumerable`1<FilePath> filePaths);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void Zip(ICakeContext context, DirectoryPath rootPath, FilePath outputPath, IEnumerable`1<string> filePaths);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void Unzip(ICakeContext context, FilePath zipFile, DirectoryPath outputPath);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void Unzip(ICakeContext context, FilePath zipFile, DirectoryPath outputPath, bool overwriteFiles);
}
public class Cake.Common.IO.Zipper : object {
    private static int ValidZipDateYearMin;
    private static int ValidZipDateYearMax;
    private static DateTimeOffset InvalidZipDateIndicator;
    private IFileSystem _fileSystem;
    private ICakeEnvironment _environment;
    private ICakeLog _log;
    private StringComparison _comparison;
    public Zipper(IFileSystem fileSystem, ICakeEnvironment environment, ICakeLog log);
    private static Zipper();
    public void Zip(DirectoryPath rootPath, FilePath outputPath, IEnumerable`1<Path> paths);
    public void Zip(DirectoryPath rootPath, FilePath outputPath, IEnumerable`1<FilePath> filePaths);
    public void Unzip(FilePath zipPath, DirectoryPath outputPath);
    public void Unzip(FilePath zipPath, DirectoryPath outputPath, bool overwriteFiles);
    private string GetRelativePath(DirectoryPath root, Path path);
    private static DateTimeOffset GetValidZipDateTimeOffset(Nullable`1<DateTime> value);
}
public class Cake.Common.Modules.CommonModule : object {
    public sealed virtual void Register(ICakeContainerRegistrar registrar);
}
[CompilerGeneratedAttribute]
internal class Cake.Common.NamespaceDoc : object {
}
public class Cake.Common.Net.DownloadFileSettings : object {
    [CompilerGeneratedAttribute]
private string <Username>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Password>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseDefaultCredentials>k__BackingField;
    public string Username { get; public set; }
    public string Password { get; public set; }
    public bool UseDefaultCredentials { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Username();
    [CompilerGeneratedAttribute]
public void set_Username(string value);
    [CompilerGeneratedAttribute]
public string get_Password();
    [CompilerGeneratedAttribute]
public void set_Password(string value);
    [CompilerGeneratedAttribute]
public bool get_UseDefaultCredentials();
    [CompilerGeneratedAttribute]
public void set_UseDefaultCredentials(bool value);
}
[ExtensionAttribute]
[CakeAliasCategoryAttribute("HTTP Operations")]
public static class Cake.Common.Net.HttpAliases : object {
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Download")]
public static FilePath DownloadFile(ICakeContext context, string address);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Download")]
public static FilePath DownloadFile(ICakeContext context, string address, DownloadFileSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Download")]
public static FilePath DownloadFile(ICakeContext context, Uri address);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Download")]
public static FilePath DownloadFile(ICakeContext context, Uri address, DownloadFileSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Download")]
public static void DownloadFile(ICakeContext context, string address, FilePath outputPath);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Download")]
public static void DownloadFile(ICakeContext context, string address, FilePath outputPath, DownloadFileSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Download")]
public static void DownloadFile(ICakeContext context, Uri address, FilePath outputPath, DownloadFileSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Upload")]
public static void UploadFile(ICakeContext context, Uri address, FilePath filePath, UploadFileSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Upload")]
public static void UploadFile(ICakeContext context, string address, FilePath filePath);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Upload")]
public static void UploadFile(ICakeContext context, Uri address, Byte[] data, string fileName, UploadFileSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Upload")]
public static void UploadFile(ICakeContext context, string address, Byte[] data, string fileName);
    private static HttpClient GetHttpClient(ICakeContext context, bool useDefaultCredentials);
}
[ExtensionAttribute]
internal static class Cake.Common.Net.HttpClientExtensions : object {
    private static int DefaultBufferSize;
    [AsyncStateMachineAttribute("Cake.Common.Net.HttpClientExtensions/<DownloadFileAsync>d__1")]
[ExtensionAttribute]
public static Task DownloadFileAsync(HttpClient client, Uri requestUri, string path, IProgress`1<int> progress);
    [AsyncStateMachineAttribute("Cake.Common.Net.HttpClientExtensions/<UploadFileAsync>d__2")]
[ExtensionAttribute]
public static Task`1<HttpResponseMessage> UploadFileAsync(HttpClient client, Uri requestUri, string path, string contentType);
    [AsyncStateMachineAttribute("Cake.Common.Net.HttpClientExtensions/<UploadFileAsync>d__3")]
[ExtensionAttribute]
public static Task`1<HttpResponseMessage> UploadFileAsync(HttpClient client, Uri requestUri, Stream stream, string fileName, string contentType);
    [AsyncStateMachineAttribute("Cake.Common.Net.HttpClientExtensions/<UploadFileAsync>d__4")]
[ExtensionAttribute]
public static Task`1<HttpResponseMessage> UploadFileAsync(HttpClient client, Uri requestUri, Byte[] data, string fileName, string contentType);
}
[CompilerGeneratedAttribute]
internal class Cake.Common.Net.NamespaceDoc : object {
}
public class Cake.Common.Net.UploadFileSettings : object {
    [CompilerGeneratedAttribute]
private string <Username>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Password>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseDefaultCredentials>k__BackingField;
    public string Username { get; public set; }
    public string Password { get; public set; }
    public bool UseDefaultCredentials { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Username();
    [CompilerGeneratedAttribute]
public void set_Username(string value);
    [CompilerGeneratedAttribute]
public string get_Password();
    [CompilerGeneratedAttribute]
public void set_Password(string value);
    [CompilerGeneratedAttribute]
public bool get_UseDefaultCredentials();
    [CompilerGeneratedAttribute]
public void set_UseDefaultCredentials(bool value);
}
internal static class Cake.Common.Polyfill.XmlTransformationHelper : object {
    public static void Transform(XmlReader xsl, XsltArgumentList arguments, XmlReader xml, XmlWriter result);
}
internal static class Cake.Common.Polyfill.XmlWriterSettingsHelper : object {
    public static bool GetDoNotEscapeUriAttributes(XmlWriterSettings settings);
    public static void SetDoNotEscapeUriAttributes(XmlWriterSettings settings, bool value);
}
[ExtensionAttribute]
[CakeAliasCategoryAttribute("Process")]
public static class Cake.Common.ProcessAliases : object {
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static int StartProcess(ICakeContext context, FilePath fileName);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static int StartProcess(ICakeContext context, FilePath fileName, string processArguments);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static int StartProcess(ICakeContext context, FilePath fileName, ProcessSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static int StartProcess(ICakeContext context, FilePath fileName, ProcessSettings settings, IEnumerable`1& redirectedStandardOutput);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static int StartProcess(ICakeContext context, FilePath fileName, ProcessSettings settings, IEnumerable`1& redirectedStandardOutput, IEnumerable`1& redirectedErrorOutput);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static IProcess StartAndReturnProcess(ICakeContext context, FilePath fileName, ProcessSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static IProcess StartAndReturnProcess(ICakeContext context, FilePath fileName);
}
public class Cake.Common.ReleaseNotes : object {
    private List`1<string> _notes;
    [CompilerGeneratedAttribute]
private SemVersion <SemVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private Version <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RawVersionLine>k__BackingField;
    public SemVersion SemVersion { get; }
    public Version Version { get; }
    public IReadOnlyList`1<string> Notes { get; }
    public string RawVersionLine { get; }
    public ReleaseNotes(SemVersion semVersion, IEnumerable`1<string> notes, string rawVersionLine);
    public ReleaseNotes(Version version, IEnumerable`1<string> notes, string rawVersionLine);
    private ReleaseNotes(Version version, SemVersion semVersion, IEnumerable`1<string> notes, string rawVersionLine);
    [CompilerGeneratedAttribute]
public SemVersion get_SemVersion();
    [CompilerGeneratedAttribute]
public Version get_Version();
    public IReadOnlyList`1<string> get_Notes();
    [CompilerGeneratedAttribute]
public string get_RawVersionLine();
}
[ExtensionAttribute]
[CakeAliasCategoryAttribute("Release Notes")]
public static class Cake.Common.ReleaseNotesAliases : object {
    private static ReleaseNotesParser _parser;
    private static ReleaseNotesAliases();
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static IReadOnlyList`1<ReleaseNotes> ParseAllReleaseNotes(ICakeContext context, FilePath filePath);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static ReleaseNotes ParseReleaseNotes(ICakeContext context, FilePath filePath);
}
public class Cake.Common.ReleaseNotesParser : object {
    private Regex _versionRegex;
    public IReadOnlyList`1<ReleaseNotes> Parse(string content);
    private IReadOnlyList`1<ReleaseNotes> ParseComplexFormat(String[] lines);
    private IReadOnlyList`1<ReleaseNotes> ParseSimpleFormat(String[] lines);
}
public class Cake.Common.Security.DirectoryHash : object {
    private Byte[] _hash;
    [CompilerGeneratedAttribute]
private HashAlgorithm <Algorithm>k__BackingField;
    [CompilerGeneratedAttribute]
private DirectoryPath <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<FileHash> <FileHashList>k__BackingField;
    public HashAlgorithm Algorithm { get; }
    public DirectoryPath Path { get; }
    public List`1<FileHash> FileHashList { get; }
    public Byte[] ComputedHash { get; }
    public DirectoryHash(DirectoryPath directoryPath, Byte[] hash, HashAlgorithm hashAlgorithm, IEnumerable`1<FileHash> fileHashList);
    [CompilerGeneratedAttribute]
public HashAlgorithm get_Algorithm();
    [CompilerGeneratedAttribute]
public DirectoryPath get_Path();
    [CompilerGeneratedAttribute]
public List`1<FileHash> get_FileHashList();
    public Byte[] get_ComputedHash();
    public string ToHex();
}
public class Cake.Common.Security.DirectoryHashCalculator : object {
    private ICakeContext _context;
    private IHashAlgorithmBuilder _hashAlgorithmBuilder;
    private FileHashCalculator _fileHashCalculator;
    public DirectoryHashCalculator(ICakeContext context, IHashAlgorithmBuilder hashAlgorithmBuilder);
    public DirectoryHash Calculate(DirectoryPath directoryPath, IEnumerable`1<GlobPattern> pattern, HashAlgorithm hashAlgorithm);
    public DirectoryHash Calculate(DirectoryPath directoryPath, IEnumerable`1<string> pattern, HashAlgorithm hashAlgorithm);
    private FilePathCollection GetDirectoryFiles(DirectoryPath directoryPath, IEnumerable`1<GlobPattern> pattern);
    private FileHash CalculateFileContentAndNameHash(FilePath filePath, DirectoryPath directoryPath, HashAlgorithm hashAlgorithm);
}
public class Cake.Common.Security.FileHash : object {
    private Byte[] _hash;
    [CompilerGeneratedAttribute]
private HashAlgorithm <Algorithm>k__BackingField;
    [CompilerGeneratedAttribute]
private FilePath <Path>k__BackingField;
    public HashAlgorithm Algorithm { get; }
    public FilePath Path { get; }
    public Byte[] ComputedHash { get; }
    public FileHash(FilePath filePath, Byte[] hash, HashAlgorithm hashAlgorithm);
    [CompilerGeneratedAttribute]
public HashAlgorithm get_Algorithm();
    [CompilerGeneratedAttribute]
public FilePath get_Path();
    public Byte[] get_ComputedHash();
    public string ToHex();
}
public class Cake.Common.Security.FileHashCalculator : object {
    private IFileSystem _fileSystem;
    private IHashAlgorithmBuilder _hashAlgorithmBuilder;
    public FileHashCalculator(IFileSystem fileSystem);
    public FileHashCalculator(IFileSystem fileSystem, IHashAlgorithmBuilder hashAlgorithmBuilder);
    public FileHash Calculate(FilePath filePath, HashAlgorithm hashAlgorithm);
}
public enum Cake.Common.Security.HashAlgorithm : Enum {
    public int value__;
    public static HashAlgorithm MD5;
    public static HashAlgorithm SHA256;
    public static HashAlgorithm SHA512;
}
public class Cake.Common.Security.HashAlgorithmBuilder : object {
    public sealed virtual HashAlgorithm CreateHashAlgorithm(HashAlgorithm hashAlgorithm);
}
public interface Cake.Common.Security.IHashAlgorithmBuilder {
    public abstract virtual HashAlgorithm CreateHashAlgorithm(HashAlgorithm hashAlgorithm);
}
[ExtensionAttribute]
[CakeAliasCategoryAttribute("Security")]
public static class Cake.Common.Security.SecurityAliases : object {
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static FileHash CalculateFileHash(ICakeContext context, FilePath filePath);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static FileHash CalculateFileHash(ICakeContext context, FilePath filePath, HashAlgorithm hashAlgorithm);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static DirectoryHash CalculateDirectoryHash(ICakeContext context, IEnumerable`1<GlobPattern> globs, DirectoryPath directoryPath);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static DirectoryHash CalculateDirectoryHash(ICakeContext context, DirectoryPath directoryPath, IEnumerable`1<GlobPattern> globs, HashAlgorithm hashAlgorithm);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static DirectoryHash CalculateDirectoryHash(ICakeContext context, IEnumerable`1<string> globs, DirectoryPath directoryPath);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static DirectoryHash CalculateDirectoryHash(ICakeContext context, DirectoryPath directoryPath, IEnumerable`1<string> globs, HashAlgorithm hashAlgorithm);
}
public class Cake.Common.SemVersion : object {
    [CompilerGeneratedAttribute]
private static SemVersion <Zero>k__BackingField;
    public static Regex SemVerRegex;
    [CompilerGeneratedAttribute]
private int <Major>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Minor>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Patch>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PreRelease>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Meta>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsPreRelease>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasMeta>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VersionString>k__BackingField;
    [CompilerGeneratedAttribute]
private Version <AssemblyVersion>k__BackingField;
    public static SemVersion Zero { get; }
    public int Major { get; }
    public int Minor { get; }
    public int Patch { get; }
    public string PreRelease { get; }
    public string Meta { get; }
    public bool IsPreRelease { get; }
    public bool HasMeta { get; }
    public string VersionString { get; }
    public Version AssemblyVersion { get; }
    public SemVersion(int major, int minor, int patch, string preRelease, string meta);
    public SemVersion(int major, int minor, int patch, string preRelease, string meta, string versionString);
    private static SemVersion();
    [CompilerGeneratedAttribute]
public static SemVersion get_Zero();
    [CompilerGeneratedAttribute]
public int get_Major();
    [CompilerGeneratedAttribute]
public int get_Minor();
    [CompilerGeneratedAttribute]
public int get_Patch();
    [CompilerGeneratedAttribute]
public string get_PreRelease();
    [CompilerGeneratedAttribute]
public string get_Meta();
    [CompilerGeneratedAttribute]
public bool get_IsPreRelease();
    [CompilerGeneratedAttribute]
public bool get_HasMeta();
    [CompilerGeneratedAttribute]
public string get_VersionString();
    [CompilerGeneratedAttribute]
public Version get_AssemblyVersion();
    public static bool TryParse(string version, SemVersion& semVersion);
    public sealed virtual bool Equals(SemVersion other);
    public sealed virtual int CompareTo(SemVersion other);
    public sealed virtual int CompareTo(object obj);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public static bool op_GreaterThan(SemVersion operand1, SemVersion operand2);
    public static bool op_LessThan(SemVersion operand1, SemVersion operand2);
    public static bool op_GreaterThanOrEqual(SemVersion operand1, SemVersion operand2);
    public static bool op_LessThanOrEqual(SemVersion operand1, SemVersion operand2);
    public static bool op_Equality(SemVersion operand1, SemVersion operand2);
    public static bool op_Inequality(SemVersion operand1, SemVersion operand2);
}
[CompilerGeneratedAttribute]
internal class Cake.Common.Solution.NamespaceDoc : object {
}
[CompilerGeneratedAttribute]
internal class Cake.Common.Solution.Project.NamespaceDoc : object {
}
[ExtensionAttribute]
[CakeAliasCategoryAttribute("MSBuild Resource")]
public static class Cake.Common.Solution.Project.ProjectAliases : object {
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static ProjectParserResult ParseProject(ICakeContext context, FilePath projectPath);
}
public class Cake.Common.Solution.Project.ProjectAssemblyReference : object {
    [CompilerGeneratedAttribute]
private string <Include>k__BackingField;
    [CompilerGeneratedAttribute]
private FilePath <HintPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FusionName>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <SpecificVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Aliases>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Private>k__BackingField;
    public string Include { get; public set; }
    public FilePath HintPath { get; public set; }
    public string Name { get; public set; }
    public string FusionName { get; public set; }
    public Nullable`1<bool> SpecificVersion { get; public set; }
    public string Aliases { get; public set; }
    public Nullable`1<bool> Private { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Include();
    [CompilerGeneratedAttribute]
public void set_Include(string value);
    [CompilerGeneratedAttribute]
public FilePath get_HintPath();
    [CompilerGeneratedAttribute]
public void set_HintPath(FilePath value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_FusionName();
    [CompilerGeneratedAttribute]
public void set_FusionName(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_SpecificVersion();
    [CompilerGeneratedAttribute]
public void set_SpecificVersion(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_Aliases();
    [CompilerGeneratedAttribute]
public void set_Aliases(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Private();
    [CompilerGeneratedAttribute]
public void set_Private(Nullable`1<bool> value);
}
public class Cake.Common.Solution.Project.ProjectFile : object {
    [CompilerGeneratedAttribute]
private FilePath <FilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RelativePath>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Compile>k__BackingField;
    public FilePath FilePath { get; public set; }
    public string RelativePath { get; public set; }
    public bool Compile { get; public set; }
    [CompilerGeneratedAttribute]
public FilePath get_FilePath();
    [CompilerGeneratedAttribute]
public void set_FilePath(FilePath value);
    [CompilerGeneratedAttribute]
public string get_RelativePath();
    [CompilerGeneratedAttribute]
public void set_RelativePath(string value);
    [CompilerGeneratedAttribute]
public bool get_Compile();
    [CompilerGeneratedAttribute]
public void set_Compile(bool value);
}
public class Cake.Common.Solution.Project.ProjectParser : object {
    private IFileSystem _fileSystem;
    private ICakeEnvironment _environment;
    public ProjectParser(IFileSystem fileSystem, ICakeEnvironment environment);
    public ProjectParserResult Parse(FilePath projectPath);
}
public class Cake.Common.Solution.Project.ProjectParserResult : object {
    [CompilerGeneratedAttribute]
private string <Configuration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Platform>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProjectGuid>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputType>k__BackingField;
    [CompilerGeneratedAttribute]
private DirectoryPath <OutputPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RootNameSpace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssemblyName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetFrameworkVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetFrameworkProfile>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<ProjectFile> <Files>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<ProjectAssemblyReference> <References>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<ProjectReference> <ProjectReferences>k__BackingField;
    public string Configuration { get; }
    public string Platform { get; }
    public string ProjectGuid { get; }
    public string OutputType { get; }
    public DirectoryPath OutputPath { get; }
    public string RootNameSpace { get; }
    public string AssemblyName { get; }
    public string TargetFrameworkVersion { get; }
    public string TargetFrameworkProfile { get; }
    public ICollection`1<ProjectFile> Files { get; }
    public ICollection`1<ProjectAssemblyReference> References { get; }
    public ICollection`1<ProjectReference> ProjectReferences { get; }
    public ProjectParserResult(string configuration, string platform, string projectGuid, string outputType, DirectoryPath outputPath, string rootNameSpace, string assemblyName, string targetFrameworkVersion, string targetFrameworkProfile, IEnumerable`1<ProjectFile> files, IEnumerable`1<ProjectAssemblyReference> references, IEnumerable`1<ProjectReference> projectReferences);
    [CompilerGeneratedAttribute]
public string get_Configuration();
    [CompilerGeneratedAttribute]
public string get_Platform();
    [CompilerGeneratedAttribute]
public string get_ProjectGuid();
    [CompilerGeneratedAttribute]
public string get_OutputType();
    [CompilerGeneratedAttribute]
public DirectoryPath get_OutputPath();
    [CompilerGeneratedAttribute]
public string get_RootNameSpace();
    [CompilerGeneratedAttribute]
public string get_AssemblyName();
    [CompilerGeneratedAttribute]
public string get_TargetFrameworkVersion();
    [CompilerGeneratedAttribute]
public string get_TargetFrameworkProfile();
    [CompilerGeneratedAttribute]
public ICollection`1<ProjectFile> get_Files();
    [CompilerGeneratedAttribute]
public ICollection`1<ProjectAssemblyReference> get_References();
    [CompilerGeneratedAttribute]
public ICollection`1<ProjectReference> get_ProjectReferences();
}
public class Cake.Common.Solution.Project.ProjectReference : object {
    [CompilerGeneratedAttribute]
private FilePath <FilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RelativePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Project>k__BackingField;
    [CompilerGeneratedAttribute]
private FilePath <Package>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Private>k__BackingField;
    public FilePath FilePath { get; public set; }
    public string RelativePath { get; public set; }
    public string Name { get; public set; }
    public string Project { get; public set; }
    public FilePath Package { get; public set; }
    public Nullable`1<bool> Private { get; public set; }
    [CompilerGeneratedAttribute]
public FilePath get_FilePath();
    [CompilerGeneratedAttribute]
public void set_FilePath(FilePath value);
    [CompilerGeneratedAttribute]
public string get_RelativePath();
    [CompilerGeneratedAttribute]
public void set_RelativePath(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Project();
    [CompilerGeneratedAttribute]
public void set_Project(string value);
    [CompilerGeneratedAttribute]
public FilePath get_Package();
    [CompilerGeneratedAttribute]
public void set_Package(FilePath value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Private();
    [CompilerGeneratedAttribute]
public void set_Private(Nullable`1<bool> value);
}
internal static class Cake.Common.Solution.Project.ProjectXElement : object {
    private static string XmlNamespace;
    internal static string Project;
    internal static string ItemGroup;
    internal static string Reference;
    internal static string Import;
    internal static string Compile;
    internal static string PropertyGroup;
    internal static string RootNamespace;
    internal static string OutputType;
    internal static string OutputPath;
    internal static string AssemblyName;
    internal static string TargetFrameworkVersion;
    internal static string TargetFrameworkProfile;
    internal static string Configuration;
    internal static string Platform;
    internal static string ProjectGuid;
    internal static string BootstrapperPackage;
    internal static string ProjectReference;
    internal static string Service;
    internal static string HintPath;
    internal static string Name;
    internal static string FusionName;
    internal static string SpecificVersion;
    internal static string Aliases;
    internal static string Private;
    internal static string Package;
}
[ExtensionAttribute]
[CakeAliasCategoryAttribute("Assembly Info")]
public static class Cake.Common.Solution.Project.Properties.AssemblyInfoAliases : object {
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void CreateAssemblyInfo(ICakeContext context, FilePath outputPath, AssemblyInfoSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static AssemblyInfoParseResult ParseAssemblyInfo(ICakeContext context, FilePath assemblyInfoPath);
}
public class Cake.Common.Solution.Project.Properties.AssemblyInfoCreator : object {
    private static string CSharpComment;
    private static string CSharpUsingFormat;
    private static string CSharpAttributeFormat;
    private static string CSharpAttributeWithValueFormat;
    private static string CSharpAttributeWithKeyValueFormat;
    private static string VBComment;
    private static string VBUsingFormat;
    private static string VBAttributeFormat;
    private static string VBAttributeWithValueFormat;
    private static string VBAttributeWithKeyValueFormat;
    private IFileSystem _fileSystem;
    private ICakeEnvironment _environment;
    private ICakeLog _log;
    public AssemblyInfoCreator(IFileSystem fileSystem, ICakeEnvironment environment, ICakeLog log);
    public void Create(FilePath outputPath, AssemblyInfoSettings settings, string attributeFormat, string attributeWithValueFormat, string attributeWithKeyValueFormat, string vbAttributeFormat, string vbAttributeWithValueFormat, string vbAttributeWithKeyValueFormat);
}
internal class Cake.Common.Solution.Project.Properties.AssemblyInfoCreatorData : object {
    private Dictionary`2<string, string> _dictionary;
    private Dictionary`2<string, string> _customAttributes;
    private Dictionary`2<string, string> _metadatattributes;
    private HashSet`1<string> _namespaces;
    private HashSet`1<string> _internalVisibleTo;
    private string _trueStringValue;
    private string _falseStringValue;
    public IDictionary`2<string, string> Attributes { get; }
    public IDictionary`2<string, string> CustomAttributes { get; }
    public IDictionary`2<string, string> MetadataAttributes { get; }
    public ISet`1<string> Namespaces { get; }
    public ISet`1<string> InternalVisibleTo { get; }
    public AssemblyInfoCreatorData(AssemblyInfoSettings settings, bool isVisualBasicAssemblyInfoFile);
    public IDictionary`2<string, string> get_Attributes();
    public IDictionary`2<string, string> get_CustomAttributes();
    public IDictionary`2<string, string> get_MetadataAttributes();
    public ISet`1<string> get_Namespaces();
    public ISet`1<string> get_InternalVisibleTo();
    private void AddAttribute(string name, string namespace, Nullable`1<bool> value);
    private void AddAttribute(string name, string namespace, string value);
    private void AddCustomAttribute(string name, string namespace, object value, bool isRawValue);
    private string AttributeValueToString(object value, bool isRawValue);
    private void AddMetadataAttribute(string namespace, string key, string value);
    private void AddAttributeCore(IDictionary`2<string, string> dict, string name, string namespace, string value);
}
public class Cake.Common.Solution.Project.Properties.AssemblyInfoCustomAttribute : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NameSpace>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseRawValue>k__BackingField;
    public string Name { get; public set; }
    public string NameSpace { get; public set; }
    public object Value { get; public set; }
    public bool UseRawValue { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_NameSpace();
    [CompilerGeneratedAttribute]
public void set_NameSpace(string value);
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(object value);
    [CompilerGeneratedAttribute]
public bool get_UseRawValue();
    [CompilerGeneratedAttribute]
public void set_UseRawValue(bool value);
}
public class Cake.Common.Solution.Project.Properties.AssemblyInfoMetadataAttribute : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NameSpace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public string Name { get; }
    public string Key { get; public set; }
    public string NameSpace { get; }
    public string Value { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
public void set_Key(string value);
    [CompilerGeneratedAttribute]
public string get_NameSpace();
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
}
public class Cake.Common.Solution.Project.Properties.AssemblyInfoParser : object {
    private static string CSharpNonQuotedPattern;
    private static string CSharpQuotedPattern;
    private static string VBNonQuotedPattern;
    private static string VBQuotedPattern;
    private static string DefaultVersion;
    private IFileSystem _fileSystem;
    private ICakeEnvironment _environment;
    public AssemblyInfoParser(IFileSystem fileSystem, ICakeEnvironment environment);
    public AssemblyInfoParseResult Parse(FilePath assemblyInfoPath);
    private static string ParseSingle(string pattern, string attributeName, string content);
    [IteratorStateMachineAttribute("Cake.Common.Solution.Project.Properties.AssemblyInfoParser/<ParseMultiple>d__10")]
private static IEnumerable`1<string> ParseMultiple(string pattern, string attributeName, string content);
}
public class Cake.Common.Solution.Project.Properties.AssemblyInfoParseResult : object {
    private List`1<string> _internalsVisibleTo;
    [CompilerGeneratedAttribute]
private bool <ClsCompliant>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Company>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ComVisible>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Configuration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Copyright>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssemblyFileVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Guid>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssemblyInformationalVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Product>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Trademark>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssemblyVersion>k__BackingField;
    public bool ClsCompliant { get; }
    public string Company { get; }
    public bool ComVisible { get; }
    public string Configuration { get; }
    public string Copyright { get; }
    public string Description { get; }
    public string AssemblyFileVersion { get; }
    public string Guid { get; }
    public string AssemblyInformationalVersion { get; }
    public string Product { get; }
    public string Title { get; }
    public string Trademark { get; }
    public string AssemblyVersion { get; }
    public ICollection`1<string> InternalsVisibleTo { get; }
    public AssemblyInfoParseResult(string clsCompliant, string company, string comVisible, string configuration, string copyright, string description, string assemblyFileVersion, string guid, string assemblyInformationalVersion, string product, string title, string trademark, string assemblyVersion, IEnumerable`1<string> internalsVisibleTo);
    [CompilerGeneratedAttribute]
public bool get_ClsCompliant();
    [CompilerGeneratedAttribute]
public string get_Company();
    [CompilerGeneratedAttribute]
public bool get_ComVisible();
    [CompilerGeneratedAttribute]
public string get_Configuration();
    [CompilerGeneratedAttribute]
public string get_Copyright();
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public string get_AssemblyFileVersion();
    [CompilerGeneratedAttribute]
public string get_Guid();
    [CompilerGeneratedAttribute]
public string get_AssemblyInformationalVersion();
    [CompilerGeneratedAttribute]
public string get_Product();
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public string get_Trademark();
    [CompilerGeneratedAttribute]
public string get_AssemblyVersion();
    public ICollection`1<string> get_InternalsVisibleTo();
}
public class Cake.Common.Solution.Project.Properties.AssemblyInfoSettings : object {
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Guid>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Product>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Copyright>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Trademark>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FileVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InformationalVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <ComVisible>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <CLSCompliant>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Company>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<string> <InternalsVisibleTo>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Configuration>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<AssemblyInfoCustomAttribute> <CustomAttributes>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<AssemblyInfoMetadataAttribute> <MetaDataAttributes>k__BackingField;
    public string Title { get; public set; }
    public string Description { get; public set; }
    public string Guid { get; public set; }
    public string Product { get; public set; }
    public string Copyright { get; public set; }
    public string Trademark { get; public set; }
    public string Version { get; public set; }
    public string FileVersion { get; public set; }
    public string InformationalVersion { get; public set; }
    public Nullable`1<bool> ComVisible { get; public set; }
    public Nullable`1<bool> CLSCompliant { get; public set; }
    public string Company { get; public set; }
    public ICollection`1<string> InternalsVisibleTo { get; public set; }
    public string Configuration { get; public set; }
    public ICollection`1<AssemblyInfoCustomAttribute> CustomAttributes { get; public set; }
    public ICollection`1<AssemblyInfoMetadataAttribute> MetaDataAttributes { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public string get_Guid();
    [CompilerGeneratedAttribute]
public void set_Guid(string value);
    [CompilerGeneratedAttribute]
public string get_Product();
    [CompilerGeneratedAttribute]
public void set_Product(string value);
    [CompilerGeneratedAttribute]
public string get_Copyright();
    [CompilerGeneratedAttribute]
public void set_Copyright(string value);
    [CompilerGeneratedAttribute]
public string get_Trademark();
    [CompilerGeneratedAttribute]
public void set_Trademark(string value);
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(string value);
    [CompilerGeneratedAttribute]
public string get_FileVersion();
    [CompilerGeneratedAttribute]
public void set_FileVersion(string value);
    [CompilerGeneratedAttribute]
public string get_InformationalVersion();
    [CompilerGeneratedAttribute]
public void set_InformationalVersion(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_ComVisible();
    [CompilerGeneratedAttribute]
public void set_ComVisible(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_CLSCompliant();
    [CompilerGeneratedAttribute]
public void set_CLSCompliant(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_Company();
    [CompilerGeneratedAttribute]
public void set_Company(string value);
    [CompilerGeneratedAttribute]
public ICollection`1<string> get_InternalsVisibleTo();
    [CompilerGeneratedAttribute]
public void set_InternalsVisibleTo(ICollection`1<string> value);
    [CompilerGeneratedAttribute]
public string get_Configuration();
    [CompilerGeneratedAttribute]
public void set_Configuration(string value);
    [CompilerGeneratedAttribute]
public ICollection`1<AssemblyInfoCustomAttribute> get_CustomAttributes();
    [CompilerGeneratedAttribute]
public void set_CustomAttributes(ICollection`1<AssemblyInfoCustomAttribute> value);
    [CompilerGeneratedAttribute]
public ICollection`1<AssemblyInfoMetadataAttribute> get_MetaDataAttributes();
    [CompilerGeneratedAttribute]
public void set_MetaDataAttributes(ICollection`1<AssemblyInfoMetadataAttribute> value);
}
[ExtensionAttribute]
public static class Cake.Common.Solution.Project.Properties.AssemblyInfoSettingsExtensions : object {
    [ExtensionAttribute]
public static AssemblyInfoSettings AddCustomAttribute(AssemblyInfoSettings settings, string name, string namespace, string value);
    [ExtensionAttribute]
public static AssemblyInfoSettings AddMetadataAttribute(AssemblyInfoSettings settings, string key, string value);
}
[CompilerGeneratedAttribute]
internal class Cake.Common.Solution.Project.Properties.NamespaceDoc : object {
}
[CompilerGeneratedAttribute]
internal class Cake.Common.Solution.Project.XmlDoc.NamespaceDoc : object {
}
[ExtensionAttribute]
[CakeAliasCategoryAttribute("MSBuild Resource")]
public static class Cake.Common.Solution.Project.XmlDoc.XmlDocAliases : object {
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static IEnumerable`1<XmlDocExampleCode> ParseXmlDocExampleCode(ICakeContext context, FilePath xmlFilePath);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static IEnumerable`1<XmlDocExampleCode> ParseXmlDocFilesExampleCode(ICakeContext context, GlobPattern pattern);
}
public class Cake.Common.Solution.Project.XmlDoc.XmlDocExampleCode : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Code>k__BackingField;
    public string Name { get; }
    public string Code { get; }
    public XmlDocExampleCode(string name, string code);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public string get_Code();
}
public class Cake.Common.Solution.Project.XmlDoc.XmlDocExampleCodeParser : object {
    private IFileSystem _fileSystem;
    private IGlobber _globber;
    private ICakeLog _log;
    public XmlDocExampleCodeParser(IFileSystem fileSystem, IGlobber globber, ICakeLog log);
    public IEnumerable`1<XmlDocExampleCode> Parse(FilePath xmlFilePath);
    public IEnumerable`1<XmlDocExampleCode> ParseFiles(GlobPattern pattern);
}
[ExtensionAttribute]
[CakeAliasCategoryAttribute("MSBuild Resource")]
public static class Cake.Common.Solution.SolutionAliases : object {
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static SolutionParserResult ParseSolution(ICakeContext context, FilePath solutionPath);
}
public class Cake.Common.Solution.SolutionFolder : SolutionProject {
    public static string TypeIdentifier;
    [CompilerGeneratedAttribute]
private List`1<SolutionProject> <Items>k__BackingField;
    public List`1<SolutionProject> Items { get; }
    public SolutionFolder(string id, string name, FilePath path);
    [CompilerGeneratedAttribute]
public List`1<SolutionProject> get_Items();
}
public class Cake.Common.Solution.SolutionParser : object {
    private IFileSystem _fileSystem;
    private ICakeEnvironment _environment;
    public SolutionParser(IFileSystem fileSystem, ICakeEnvironment environment);
    public SolutionParserResult Parse(FilePath solutionPath);
    private static SolutionProject ParseSolutionProjectLine(IFile file, string line);
    private static void ParseNestedProjectLine(List`1<SolutionProject> projects, string line);
}
public class Cake.Common.Solution.SolutionParserResult : object {
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VisualStudioVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MinimumVisualStudioVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<SolutionProject> <Projects>k__BackingField;
    public string Version { get; }
    public string VisualStudioVersion { get; }
    public string MinimumVisualStudioVersion { get; }
    public IReadOnlyCollection`1<SolutionProject> Projects { get; }
    public SolutionParserResult(string version, string visualStudioVersion, string minimumVisualStudioVersion, IReadOnlyCollection`1<SolutionProject> projects);
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public string get_VisualStudioVersion();
    [CompilerGeneratedAttribute]
public string get_MinimumVisualStudioVersion();
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<SolutionProject> get_Projects();
}
public class Cake.Common.Solution.SolutionProject : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private FilePath <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private SolutionProject <Parent>k__BackingField;
    public string Id { get; }
    public string Name { get; }
    public FilePath Path { get; }
    public string Type { get; }
    public SolutionProject Parent { get; internal set; }
    public SolutionProject(string id, string name, FilePath path, string type);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public FilePath get_Path();
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public SolutionProject get_Parent();
    [CompilerGeneratedAttribute]
internal void set_Parent(SolutionProject value);
}
[CompilerGeneratedAttribute]
internal class Cake.Common.Text.NamespaceDoc : object {
}
public class Cake.Common.Text.TextTransformation`1 : object {
    private IFileSystem _fileSystem;
    private ICakeEnvironment _environment;
    [CompilerGeneratedAttribute]
private TTemplate <Template>k__BackingField;
    public TTemplate Template { get; }
    public TextTransformation`1(IFileSystem fileSystem, ICakeEnvironment environment, TTemplate template);
    [CompilerGeneratedAttribute]
public TTemplate get_Template();
    public void Save(FilePath path);
    public void Save(FilePath path, Encoding encoding);
    public virtual string ToString();
}
[ExtensionAttribute]
[CakeAliasCategoryAttribute("Text")]
public static class Cake.Common.Text.TextTransformationAliases : object {
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static TextTransformation`1<TextTransformationTemplate> TransformText(ICakeContext context, string template);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static TextTransformation`1<TextTransformationTemplate> TransformText(ICakeContext context, string template, string leftPlaceholder, string rightPlaceholder);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static TextTransformation`1<TextTransformationTemplate> TransformTextFile(ICakeContext context, FilePath path);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static TextTransformation`1<TextTransformationTemplate> TransformTextFile(ICakeContext context, FilePath path, string leftPlaceholder, string rightPlaceholder);
}
[ExtensionAttribute]
public static class Cake.Common.Text.TextTransformationExtensions : object {
    [ExtensionAttribute]
public static TextTransformation`1<TTemplate> WithToken(TextTransformation`1<TTemplate> transformation, string key, object value);
    [ExtensionAttribute]
public static TextTransformation`1<TTemplate> WithTokens(TextTransformation`1<TTemplate> transformation, IEnumerable`1<KeyValuePair`2<string, object>> tokens);
}
[ExtensionAttribute]
[CakeAliasCategoryAttribute("Cake")]
public static class Cake.Common.Tools.Cake.CakeAliases : object {
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void CakeExecuteScript(ICakeContext context, FilePath cakeScriptPath);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void CakeExecuteScript(ICakeContext context, FilePath cakeScriptPath, CakeSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void CakeExecuteExpression(ICakeContext context, string cakeExpression);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void CakeExecuteExpression(ICakeContext context, string cakeExpression, CakeSettings settings);
}
public class Cake.Common.Tools.Cake.CakeRunner : Tool`1<CakeSettings> {
    private ICakeEnvironment _environment;
    private IFileSystem _fileSystem;
    private IGlobber _globber;
    private DotNetExecutor _coreExecutor;
    private static IEnumerable`1<FilePath> _executingAssemblyToolPaths;
    private static CakeRunner();
    public CakeRunner(IFileSystem fileSystem, ICakeEnvironment environment, IGlobber globber, IProcessRunner processRunner, IToolLocator tools);
    public void ExecuteScript(FilePath scriptPath, CakeSettings settings);
    public void ExecuteExpression(string cakeExpression, CakeSettings settings);
    private ProcessArgumentBuilder GetArguments(FilePath scriptPath, CakeSettings settings);
    protected virtual string GetToolName();
    protected virtual IEnumerable`1<string> GetToolExecutableNames();
    protected virtual IEnumerable`1<FilePath> GetAlternativeToolPaths(CakeSettings settings);
}
public class Cake.Common.Tools.Cake.CakeSettings : ToolSettings {
    [CompilerGeneratedAttribute]
private Nullable`1<Verbosity> <Verbosity>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <Arguments>k__BackingField;
    public Nullable`1<Verbosity> Verbosity { get; public set; }
    public IDictionary`2<string, string> Arguments { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<Verbosity> get_Verbosity();
    [CompilerGeneratedAttribute]
public void set_Verbosity(Nullable`1<Verbosity> value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_Arguments();
    [CompilerGeneratedAttribute]
public void set_Arguments(IDictionary`2<string, string> value);
}
[CompilerGeneratedAttribute]
internal class Cake.Common.Tools.Cake.NamespaceDoc : object {
}
public class Cake.Common.Tools.Chocolatey.ApiKey.ChocolateyApiKeySetter : ChocolateyTool`1<ChocolateyApiKeySettings> {
    public ChocolateyApiKeySetter(IFileSystem fileSystem, ICakeEnvironment environment, IProcessRunner processRunner, IToolLocator tools, IChocolateyToolResolver resolver);
    public void Set(string source, ChocolateyApiKeySettings settings);
    private ProcessArgumentBuilder GetArguments(string source, ChocolateyApiKeySettings settings);
}
public class Cake.Common.Tools.Chocolatey.ApiKey.ChocolateyApiKeySettings : ChocolateySettings {
    [CompilerGeneratedAttribute]
private string <ApiKey>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Remove>k__BackingField;
    public string ApiKey { get; public set; }
    public bool Remove { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ApiKey();
    [CompilerGeneratedAttribute]
public void set_ApiKey(string value);
    [CompilerGeneratedAttribute]
public bool get_Remove();
    [CompilerGeneratedAttribute]
public void set_Remove(bool value);
}
[ExtensionAttribute]
[CakeAliasCategoryAttribute("Chocolatey")]
public static class Cake.Common.Tools.Chocolatey.ChocolateyAliases : object {
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Pack")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.Chocolatey.Pack")]
public static void ChocolateyPack(ICakeContext context, FilePath nuspecFilePath, ChocolateyPackSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Pack")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.Chocolatey.Pack")]
public static void ChocolateyPack(ICakeContext context, IEnumerable`1<FilePath> filePaths, ChocolateyPackSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Pack")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.Chocolatey.Pack")]
public static void ChocolateyPack(ICakeContext context, ChocolateyPackSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Install")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.Chocolatey.Install")]
public static void ChocolateyInstall(ICakeContext context, string packageId);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Install")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.Chocolatey.Install")]
public static void ChocolateyInstall(ICakeContext context, string packageId, ChocolateyInstallSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Install")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.Chocolatey.Install")]
public static void ChocolateyInstallFromConfig(ICakeContext context, FilePath packageConfigPath);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Install")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.Chocolatey.Install")]
public static void ChocolateyInstallFromConfig(ICakeContext context, FilePath packageConfigPath, ChocolateyInstallSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Uninstall")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.Chocolatey.Uninstall")]
public static void ChocolateyUninstall(ICakeContext context, string packageId);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Uninstall")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.Chocolatey.Uninstall")]
public static void ChocolateyUninstall(ICakeContext context, string packageId, ChocolateyUninstallSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Uninstall")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.Chocolatey.Uninstall")]
public static void ChocolateyUninstall(ICakeContext context, IEnumerable`1<string> packageIds);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Uninstall")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.Chocolatey.Uninstall")]
public static void ChocolateyUninstall(ICakeContext context, IEnumerable`1<string> packageIds, ChocolateyUninstallSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Pin")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.Chocolatey.Pin")]
public static void ChocolateyPin(ICakeContext context, string name, ChocolateyPinSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("ApiKey")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.Chocolatey.ApiKey")]
public static void ChocolateyApiKey(ICakeContext context, string source, ChocolateyApiKeySettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Config")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.Chocolatey.Config")]
public static void ChocolateyConfig(ICakeContext context, string name, string value, ChocolateyConfigSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("EnableFeature")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.Chocolatey.Features")]
public static void ChocolateyEnableFeature(ICakeContext context, string name);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("EnableFeature")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.Chocolatey.Features")]
public static void ChocolateyEnableFeature(ICakeContext context, string name, ChocolateyFeatureSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("DisableFeature")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.Chocolatey.Features")]
public static void ChocolateyDisableFeature(ICakeContext context, string name);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("DisableFeature")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.Chocolatey.Features")]
public static void ChocolateyDisableFeature(ICakeContext context, string name, ChocolateyFeatureSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("AddSource")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.Chocolatey.Sources")]
public static void ChocolateyAddSource(ICakeContext context, string name, string source);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("AddSource")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.Chocolatey.Sources")]
public static void ChocolateyAddSource(ICakeContext context, string name, string source, ChocolateySourcesSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("RemoveSource")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.Chocolatey.Sources")]
public static void ChocolateyRemoveSource(ICakeContext context, string name);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("RemoveSource")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.Chocolatey.Sources")]
public static void ChocolateyRemoveSource(ICakeContext context, string name, ChocolateySourcesSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("EnableSource")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.Chocolatey.Sources")]
public static void ChocolateyEnableSource(ICakeContext context, string name);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("EnableSource")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.Chocolatey.Sources")]
public static void ChocolateyEnableSource(ICakeContext context, string name, ChocolateySourcesSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("DisableSource")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.Chocolatey.Sources")]
public static void ChocolateyDisableSource(ICakeContext context, string name);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("DisableSource")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.Chocolatey.Sources")]
public static void ChocolateyDisableSource(ICakeContext context, string name, ChocolateySourcesSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Push")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.Chocolatey.Push")]
public static void ChocolateyPush(ICakeContext context, FilePath packageFilePath, ChocolateyPushSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Push")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.Chocolatey.Push")]
public static void ChocolateyPush(ICakeContext context, IEnumerable`1<FilePath> packageFilePaths, ChocolateyPushSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Upgrade")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.Chocolatey.Upgrade")]
public static void ChocolateyUpgrade(ICakeContext context, string packageId);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Upgrade")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.Chocolatey.Upgrade")]
public static void ChocolateyUpgrade(ICakeContext context, string packageId, ChocolateyUpgradeSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("New")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.Chocolatey.New")]
public static void ChocolateyNew(ICakeContext context, string packageId);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("New")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.Chocolatey.New")]
public static void ChocolateyNew(ICakeContext context, string packageId, ChocolateyNewSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Download")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.Chocolatey.Download")]
public static void ChocolateyDownload(ICakeContext context, string packageId);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Download")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.Chocolatey.Download")]
public static void ChocolateyDownload(ICakeContext context, string packageId, ChocolateyDownloadSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Export")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.Chocolatey.Export")]
public static void ChocolateyExport(ICakeContext context);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Export")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.Chocolatey.Export")]
public static void ChocolateyExport(ICakeContext context, ChocolateyExportSettings settings);
}
public class Cake.Common.Tools.Chocolatey.ChocolateySettings : ToolSettings {
    [CompilerGeneratedAttribute]
private bool <Debug>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Verbose>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Trace>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoColor>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AcceptLicense>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Force>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Noop>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <LimitOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ExecutionTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CacheLocation>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowUnofficial>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FailOnErrorOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseSystemPowerShell>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoProgress>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Proxy>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProxyUser>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProxyPassword>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProxyByPassList>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ProxyBypassOnLocal>k__BackingField;
    [CompilerGeneratedAttribute]
private FilePath <LogFile>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SkipCompatibilityChecks>k__BackingField;
    public bool Debug { get; public set; }
    public bool Verbose { get; public set; }
    public bool Trace { get; public set; }
    public bool NoColor { get; public set; }
    public bool AcceptLicense { get; public set; }
    public bool Force { get; public set; }
    public bool Noop { get; public set; }
    public bool LimitOutput { get; public set; }
    public int ExecutionTimeout { get; public set; }
    public string CacheLocation { get; public set; }
    public bool AllowUnofficial { get; public set; }
    public bool FailOnErrorOutput { get; public set; }
    public bool UseSystemPowerShell { get; public set; }
    public bool NoProgress { get; public set; }
    public string Proxy { get; public set; }
    public string ProxyUser { get; public set; }
    public string ProxyPassword { get; public set; }
    public string ProxyByPassList { get; public set; }
    public bool ProxyBypassOnLocal { get; public set; }
    public FilePath LogFile { get; public set; }
    public bool SkipCompatibilityChecks { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Debug();
    [CompilerGeneratedAttribute]
public void set_Debug(bool value);
    [CompilerGeneratedAttribute]
public bool get_Verbose();
    [CompilerGeneratedAttribute]
public void set_Verbose(bool value);
    [CompilerGeneratedAttribute]
public bool get_Trace();
    [CompilerGeneratedAttribute]
public void set_Trace(bool value);
    [CompilerGeneratedAttribute]
public bool get_NoColor();
    [CompilerGeneratedAttribute]
public void set_NoColor(bool value);
    [CompilerGeneratedAttribute]
public bool get_AcceptLicense();
    [CompilerGeneratedAttribute]
public void set_AcceptLicense(bool value);
    [CompilerGeneratedAttribute]
public bool get_Force();
    [CompilerGeneratedAttribute]
public void set_Force(bool value);
    [CompilerGeneratedAttribute]
public bool get_Noop();
    [CompilerGeneratedAttribute]
public void set_Noop(bool value);
    [CompilerGeneratedAttribute]
public bool get_LimitOutput();
    [CompilerGeneratedAttribute]
public void set_LimitOutput(bool value);
    [CompilerGeneratedAttribute]
public int get_ExecutionTimeout();
    [CompilerGeneratedAttribute]
public void set_ExecutionTimeout(int value);
    [CompilerGeneratedAttribute]
public string get_CacheLocation();
    [CompilerGeneratedAttribute]
public void set_CacheLocation(string value);
    [CompilerGeneratedAttribute]
public bool get_AllowUnofficial();
    [CompilerGeneratedAttribute]
public void set_AllowUnofficial(bool value);
    [CompilerGeneratedAttribute]
public bool get_FailOnErrorOutput();
    [CompilerGeneratedAttribute]
public void set_FailOnErrorOutput(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseSystemPowerShell();
    [CompilerGeneratedAttribute]
public void set_UseSystemPowerShell(bool value);
    [CompilerGeneratedAttribute]
public bool get_NoProgress();
    [CompilerGeneratedAttribute]
public void set_NoProgress(bool value);
    [CompilerGeneratedAttribute]
public string get_Proxy();
    [CompilerGeneratedAttribute]
public void set_Proxy(string value);
    [CompilerGeneratedAttribute]
public string get_ProxyUser();
    [CompilerGeneratedAttribute]
public void set_ProxyUser(string value);
    [CompilerGeneratedAttribute]
public string get_ProxyPassword();
    [CompilerGeneratedAttribute]
public void set_ProxyPassword(string value);
    [CompilerGeneratedAttribute]
public string get_ProxyByPassList();
    [CompilerGeneratedAttribute]
public void set_ProxyByPassList(string value);
    [CompilerGeneratedAttribute]
public bool get_ProxyBypassOnLocal();
    [CompilerGeneratedAttribute]
public void set_ProxyBypassOnLocal(bool value);
    [CompilerGeneratedAttribute]
public FilePath get_LogFile();
    [CompilerGeneratedAttribute]
public void set_LogFile(FilePath value);
    [CompilerGeneratedAttribute]
public bool get_SkipCompatibilityChecks();
    [CompilerGeneratedAttribute]
public void set_SkipCompatibilityChecks(bool value);
}
public class Cake.Common.Tools.Chocolatey.ChocolateySharedSettings : ChocolateySettings {
    [CompilerGeneratedAttribute]
private string <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OverrideArguments>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NotSilent>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PackageParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ApplyInstallArgumentsToDependencies>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ApplyPackageParametersToDependencies>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SideBySide>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SkipPowerShell>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnorePackageExitCodes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UsePackageExitCodes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <StopOnFirstFailure>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ExitWhenRebootDetected>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreDetectedReboot>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SkipHooks>k__BackingField;
    public string Source { get; public set; }
    public string Version { get; public set; }
    public bool OverrideArguments { get; public set; }
    public bool NotSilent { get; public set; }
    public string PackageParameters { get; public set; }
    public bool ApplyInstallArgumentsToDependencies { get; public set; }
    public bool ApplyPackageParametersToDependencies { get; public set; }
    public bool SideBySide { get; public set; }
    public bool SkipPowerShell { get; public set; }
    public bool IgnorePackageExitCodes { get; public set; }
    public bool UsePackageExitCodes { get; public set; }
    public bool StopOnFirstFailure { get; public set; }
    public bool ExitWhenRebootDetected { get; public set; }
    public bool IgnoreDetectedReboot { get; public set; }
    public bool SkipHooks { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Source();
    [CompilerGeneratedAttribute]
public void set_Source(string value);
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(string value);
    [CompilerGeneratedAttribute]
public bool get_OverrideArguments();
    [CompilerGeneratedAttribute]
public void set_OverrideArguments(bool value);
    [CompilerGeneratedAttribute]
public bool get_NotSilent();
    [CompilerGeneratedAttribute]
public void set_NotSilent(bool value);
    [CompilerGeneratedAttribute]
public string get_PackageParameters();
    [CompilerGeneratedAttribute]
public void set_PackageParameters(string value);
    [CompilerGeneratedAttribute]
public bool get_ApplyInstallArgumentsToDependencies();
    [CompilerGeneratedAttribute]
public void set_ApplyInstallArgumentsToDependencies(bool value);
    [CompilerGeneratedAttribute]
public bool get_ApplyPackageParametersToDependencies();
    [CompilerGeneratedAttribute]
public void set_ApplyPackageParametersToDependencies(bool value);
    [CompilerGeneratedAttribute]
public bool get_SideBySide();
    [CompilerGeneratedAttribute]
public void set_SideBySide(bool value);
    [CompilerGeneratedAttribute]
public bool get_SkipPowerShell();
    [CompilerGeneratedAttribute]
public void set_SkipPowerShell(bool value);
    [CompilerGeneratedAttribute]
public bool get_IgnorePackageExitCodes();
    [CompilerGeneratedAttribute]
public void set_IgnorePackageExitCodes(bool value);
    [CompilerGeneratedAttribute]
public bool get_UsePackageExitCodes();
    [CompilerGeneratedAttribute]
public void set_UsePackageExitCodes(bool value);
    [CompilerGeneratedAttribute]
public bool get_StopOnFirstFailure();
    [CompilerGeneratedAttribute]
public void set_StopOnFirstFailure(bool value);
    [CompilerGeneratedAttribute]
public bool get_ExitWhenRebootDetected();
    [CompilerGeneratedAttribute]
public void set_ExitWhenRebootDetected(bool value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreDetectedReboot();
    [CompilerGeneratedAttribute]
public void set_IgnoreDetectedReboot(bool value);
    [CompilerGeneratedAttribute]
public bool get_SkipHooks();
    [CompilerGeneratedAttribute]
public void set_SkipHooks(bool value);
}
public abstract class Cake.Common.Tools.Chocolatey.ChocolateyTool`1 : Tool`1<TSettings> {
    private static string Separator;
    private IChocolateyToolResolver _resolver;
    private ICakeEnvironment _environment;
    protected ChocolateyTool`1(IFileSystem fileSystem, ICakeEnvironment environment, IProcessRunner processRunner, IToolLocator tools, IChocolateyToolResolver resolver);
    protected sealed virtual string GetToolName();
    protected sealed virtual IEnumerable`1<string> GetToolExecutableNames();
    protected sealed virtual IEnumerable`1<FilePath> GetAlternativeToolPaths(TSettings settings);
    protected ProcessArgumentBuilder AddGlobalArguments(ChocolateySettings settings, ProcessArgumentBuilder builder);
    protected ProcessArgumentBuilder AddSharedArguments(ChocolateySharedSettings settings, ProcessArgumentBuilder builder);
}
public class Cake.Common.Tools.Chocolatey.ChocolateyToolResolver : object {
    private IFileSystem _fileSystem;
    private ICakeEnvironment _environment;
    private IFile _cachedPath;
    public ChocolateyToolResolver(IFileSystem fileSystem, ICakeEnvironment environment);
    public sealed virtual FilePath ResolvePath();
    [CompilerGeneratedAttribute]
private IDirectory <ResolvePath>b__4_0(string path);
}
public class Cake.Common.Tools.Chocolatey.Config.ChocolateyConfigSetter : ChocolateyTool`1<ChocolateyConfigSettings> {
    public ChocolateyConfigSetter(IFileSystem fileSystem, ICakeEnvironment environment, IProcessRunner processRunner, IToolLocator tools, IChocolateyToolResolver resolver);
    public void Set(string name, string value, ChocolateyConfigSettings settings);
    private ProcessArgumentBuilder GetArguments(string name, string value, ChocolateyConfigSettings settings);
}
public class Cake.Common.Tools.Chocolatey.Config.ChocolateyConfigSettings : ChocolateySettings {
}
public class Cake.Common.Tools.Chocolatey.Download.ChocolateyDownloader : ChocolateyTool`1<ChocolateyDownloadSettings> {
    private ICakeEnvironment _environment;
    public ChocolateyDownloader(IFileSystem fileSystem, ICakeEnvironment environment, IProcessRunner processRunner, IToolLocator tools, IChocolateyToolResolver resolver);
    public void Download(string packageId, ChocolateyDownloadSettings settings);
    private ProcessArgumentBuilder GetArguments(string packageId, ChocolateyDownloadSettings settings);
}
public class Cake.Common.Tools.Chocolatey.Download.ChocolateyDownloadSettings : ChocolateySettings {
    [CompilerGeneratedAttribute]
private string <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Prerelease>k__BackingField;
    [CompilerGeneratedAttribute]
private string <User>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Password>k__BackingField;
    [CompilerGeneratedAttribute]
private FilePath <Certificate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CertificatePassword>k__BackingField;
    [CompilerGeneratedAttribute]
private DirectoryPath <OutputDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreDependencies>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Installed>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreUnfound>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisableRepositoryOptimizations>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Internalize>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ResourcesLocation>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DownloadLocation>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <InternalizeAllUrls>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AppendUseOriginalLocation>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SkipDownloadCache>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseDownloadCache>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SkipVirusCheck>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <VirusCheck>k__BackingField;
    [CompilerGeneratedAttribute]
private int <VirusPositivesMinimum>k__BackingField;
    public string Source { get; public set; }
    public string Version { get; public set; }
    public bool Prerelease { get; public set; }
    public string User { get; public set; }
    public string Password { get; public set; }
    public FilePath Certificate { get; public set; }
    public string CertificatePassword { get; public set; }
    public DirectoryPath OutputDirectory { get; public set; }
    public bool IgnoreDependencies { get; public set; }
    public bool Installed { get; public set; }
    public bool IgnoreUnfound { get; public set; }
    public bool DisableRepositoryOptimizations { get; public set; }
    public bool Internalize { get; public set; }
    public string ResourcesLocation { get; public set; }
    public string DownloadLocation { get; public set; }
    public bool InternalizeAllUrls { get; public set; }
    public bool AppendUseOriginalLocation { get; public set; }
    public bool SkipDownloadCache { get; public set; }
    public bool UseDownloadCache { get; public set; }
    public bool SkipVirusCheck { get; public set; }
    public bool VirusCheck { get; public set; }
    public int VirusPositivesMinimum { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Source();
    [CompilerGeneratedAttribute]
public void set_Source(string value);
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(string value);
    [CompilerGeneratedAttribute]
public bool get_Prerelease();
    [CompilerGeneratedAttribute]
public void set_Prerelease(bool value);
    [CompilerGeneratedAttribute]
public string get_User();
    [CompilerGeneratedAttribute]
public void set_User(string value);
    [CompilerGeneratedAttribute]
public string get_Password();
    [CompilerGeneratedAttribute]
public void set_Password(string value);
    [CompilerGeneratedAttribute]
public FilePath get_Certificate();
    [CompilerGeneratedAttribute]
public void set_Certificate(FilePath value);
    [CompilerGeneratedAttribute]
public string get_CertificatePassword();
    [CompilerGeneratedAttribute]
public void set_CertificatePassword(string value);
    [CompilerGeneratedAttribute]
public DirectoryPath get_OutputDirectory();
    [CompilerGeneratedAttribute]
public void set_OutputDirectory(DirectoryPath value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreDependencies();
    [CompilerGeneratedAttribute]
public void set_IgnoreDependencies(bool value);
    [CompilerGeneratedAttribute]
public bool get_Installed();
    [CompilerGeneratedAttribute]
public void set_Installed(bool value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreUnfound();
    [CompilerGeneratedAttribute]
public void set_IgnoreUnfound(bool value);
    [CompilerGeneratedAttribute]
public bool get_DisableRepositoryOptimizations();
    [CompilerGeneratedAttribute]
public void set_DisableRepositoryOptimizations(bool value);
    [CompilerGeneratedAttribute]
public bool get_Internalize();
    [CompilerGeneratedAttribute]
public void set_Internalize(bool value);
    [CompilerGeneratedAttribute]
public string get_ResourcesLocation();
    [CompilerGeneratedAttribute]
public void set_ResourcesLocation(string value);
    [CompilerGeneratedAttribute]
public string get_DownloadLocation();
    [CompilerGeneratedAttribute]
public void set_DownloadLocation(string value);
    [CompilerGeneratedAttribute]
public bool get_InternalizeAllUrls();
    [CompilerGeneratedAttribute]
public void set_InternalizeAllUrls(bool value);
    [CompilerGeneratedAttribute]
public bool get_AppendUseOriginalLocation();
    [CompilerGeneratedAttribute]
public void set_AppendUseOriginalLocation(bool value);
    [CompilerGeneratedAttribute]
public bool get_SkipDownloadCache();
    [CompilerGeneratedAttribute]
public void set_SkipDownloadCache(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseDownloadCache();
    [CompilerGeneratedAttribute]
public void set_UseDownloadCache(bool value);
    [CompilerGeneratedAttribute]
public bool get_SkipVirusCheck();
    [CompilerGeneratedAttribute]
public void set_SkipVirusCheck(bool value);
    [CompilerGeneratedAttribute]
public bool get_VirusCheck();
    [CompilerGeneratedAttribute]
public void set_VirusCheck(bool value);
    [CompilerGeneratedAttribute]
public int get_VirusPositivesMinimum();
    [CompilerGeneratedAttribute]
public void set_VirusPositivesMinimum(int value);
}
public class Cake.Common.Tools.Chocolatey.Export.ChocolateyExporter : ChocolateyTool`1<ChocolateyExportSettings> {
    public ChocolateyExporter(IFileSystem fileSystem, ICakeEnvironment environment, IProcessRunner processRunner, IToolLocator tools, IChocolateyToolResolver resolver);
    public void Export(ChocolateyExportSettings settings);
    private ProcessArgumentBuilder GetArguments(ChocolateyExportSettings settings);
}
public class Cake.Common.Tools.Chocolatey.Export.ChocolateyExportSettings : ChocolateySettings {
    [CompilerGeneratedAttribute]
private FilePath <OutputFilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeVersionNumbers>k__BackingField;
    public FilePath OutputFilePath { get; public set; }
    public bool IncludeVersionNumbers { get; public set; }
    [CompilerGeneratedAttribute]
public FilePath get_OutputFilePath();
    [CompilerGeneratedAttribute]
public void set_OutputFilePath(FilePath value);
    [CompilerGeneratedAttribute]
public bool get_IncludeVersionNumbers();
    [CompilerGeneratedAttribute]
public void set_IncludeVersionNumbers(bool value);
}
public class Cake.Common.Tools.Chocolatey.Features.ChocolateyFeatureSettings : ChocolateySettings {
}
public class Cake.Common.Tools.Chocolatey.Features.ChocolateyFeatureToggler : ChocolateyTool`1<ChocolateyFeatureSettings> {
    public ChocolateyFeatureToggler(IFileSystem fileSystem, ICakeEnvironment environment, IProcessRunner processRunner, IToolLocator tools, IChocolateyToolResolver resolver);
    public void EnableFeature(string name, ChocolateyFeatureSettings settings);
    public void DisableFeature(string name, ChocolateyFeatureSettings settings);
    private ProcessArgumentBuilder GetArguments(bool enableDisableToggle, string name, ChocolateyFeatureSettings settings);
}
public interface Cake.Common.Tools.Chocolatey.IChocolateyToolResolver {
    public abstract virtual FilePath ResolvePath();
}
public class Cake.Common.Tools.Chocolatey.Install.ChocolateyInstaller : ChocolateyTool`1<ChocolateyInstallSettings> {
    private ICakeEnvironment _environment;
    public ChocolateyInstaller(IFileSystem fileSystem, ICakeEnvironment environment, IProcessRunner processRunner, IToolLocator tools, IChocolateyToolResolver resolver);
    public void InstallFromConfig(FilePath packageConfigPath, ChocolateyInstallSettings settings);
    public void Install(string packageId, ChocolateyInstallSettings settings);
    private ProcessArgumentBuilder GetArguments(string packageId, ChocolateyInstallSettings settings);
}
public class Cake.Common.Tools.Chocolatey.Install.ChocolateyInstallSettings : ChocolateySharedSettings {
    [CompilerGeneratedAttribute]
private bool <Prerelease>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Forcex86>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InstallArguments>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowDowngrade>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreDependencies>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ForceDependencies>k__BackingField;
    [CompilerGeneratedAttribute]
private string <User>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Password>k__BackingField;
    [CompilerGeneratedAttribute]
private FilePath <Certificate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CertificatePassword>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreChecksums>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowEmptyChecksums>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowEmptyChecksumsSecure>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RequireChecksums>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Checksum>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Checksum64>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ChecksumType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ChecksumType64>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisableRepositoryOptimizations>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Pin>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SkipDownloadCache>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseDownloadCache>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SkipVirusCheck>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <VirusCheck>k__BackingField;
    [CompilerGeneratedAttribute]
private int <VirusPositivesMinimum>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InstallArgumentsSensitive>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PackageParametersSensitive>k__BackingField;
    [CompilerGeneratedAttribute]
private DirectoryPath <InstallDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaximumDownloadBitsPerSecond>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ReducePackageSize>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoReducePackageSize>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ReduceNupkgOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PinReason>k__BackingField;
    public bool Prerelease { get; public set; }
    public bool Forcex86 { get; public set; }
    public string InstallArguments { get; public set; }
    public bool AllowDowngrade { get; public set; }
    public bool IgnoreDependencies { get; public set; }
    public bool ForceDependencies { get; public set; }
    public string User { get; public set; }
    public string Password { get; public set; }
    public FilePath Certificate { get; public set; }
    public string CertificatePassword { get; public set; }
    public bool IgnoreChecksums { get; public set; }
    public bool AllowEmptyChecksums { get; public set; }
    public bool AllowEmptyChecksumsSecure { get; public set; }
    public bool RequireChecksums { get; public set; }
    public string Checksum { get; public set; }
    public string Checksum64 { get; public set; }
    public string ChecksumType { get; public set; }
    public string ChecksumType64 { get; public set; }
    public bool DisableRepositoryOptimizations { get; public set; }
    public bool Pin { get; public set; }
    public bool SkipDownloadCache { get; public set; }
    public bool UseDownloadCache { get; public set; }
    public bool SkipVirusCheck { get; public set; }
    public bool VirusCheck { get; public set; }
    public int VirusPositivesMinimum { get; public set; }
    public string InstallArgumentsSensitive { get; public set; }
    public string PackageParametersSensitive { get; public set; }
    public DirectoryPath InstallDirectory { get; public set; }
    public int MaximumDownloadBitsPerSecond { get; public set; }
    public bool ReducePackageSize { get; public set; }
    public bool NoReducePackageSize { get; public set; }
    public bool ReduceNupkgOnly { get; public set; }
    public string PinReason { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Prerelease();
    [CompilerGeneratedAttribute]
public void set_Prerelease(bool value);
    [CompilerGeneratedAttribute]
public bool get_Forcex86();
    [CompilerGeneratedAttribute]
public void set_Forcex86(bool value);
    [CompilerGeneratedAttribute]
public string get_InstallArguments();
    [CompilerGeneratedAttribute]
public void set_InstallArguments(string value);
    [CompilerGeneratedAttribute]
public bool get_AllowDowngrade();
    [CompilerGeneratedAttribute]
public void set_AllowDowngrade(bool value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreDependencies();
    [CompilerGeneratedAttribute]
public void set_IgnoreDependencies(bool value);
    [CompilerGeneratedAttribute]
public bool get_ForceDependencies();
    [CompilerGeneratedAttribute]
public void set_ForceDependencies(bool value);
    [CompilerGeneratedAttribute]
public string get_User();
    [CompilerGeneratedAttribute]
public void set_User(string value);
    [CompilerGeneratedAttribute]
public string get_Password();
    [CompilerGeneratedAttribute]
public void set_Password(string value);
    [CompilerGeneratedAttribute]
public FilePath get_Certificate();
    [CompilerGeneratedAttribute]
public void set_Certificate(FilePath value);
    [CompilerGeneratedAttribute]
public string get_CertificatePassword();
    [CompilerGeneratedAttribute]
public void set_CertificatePassword(string value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreChecksums();
    [CompilerGeneratedAttribute]
public void set_IgnoreChecksums(bool value);
    [CompilerGeneratedAttribute]
public bool get_AllowEmptyChecksums();
    [CompilerGeneratedAttribute]
public void set_AllowEmptyChecksums(bool value);
    [CompilerGeneratedAttribute]
public bool get_AllowEmptyChecksumsSecure();
    [CompilerGeneratedAttribute]
public void set_AllowEmptyChecksumsSecure(bool value);
    [CompilerGeneratedAttribute]
public bool get_RequireChecksums();
    [CompilerGeneratedAttribute]
public void set_RequireChecksums(bool value);
    [CompilerGeneratedAttribute]
public string get_Checksum();
    [CompilerGeneratedAttribute]
public void set_Checksum(string value);
    [CompilerGeneratedAttribute]
public string get_Checksum64();
    [CompilerGeneratedAttribute]
public void set_Checksum64(string value);
    [CompilerGeneratedAttribute]
public string get_ChecksumType();
    [CompilerGeneratedAttribute]
public void set_ChecksumType(string value);
    [CompilerGeneratedAttribute]
public string get_ChecksumType64();
    [CompilerGeneratedAttribute]
public void set_ChecksumType64(string value);
    [CompilerGeneratedAttribute]
public bool get_DisableRepositoryOptimizations();
    [CompilerGeneratedAttribute]
public void set_DisableRepositoryOptimizations(bool value);
    [CompilerGeneratedAttribute]
public bool get_Pin();
    [CompilerGeneratedAttribute]
public void set_Pin(bool value);
    [CompilerGeneratedAttribute]
public bool get_SkipDownloadCache();
    [CompilerGeneratedAttribute]
public void set_SkipDownloadCache(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseDownloadCache();
    [CompilerGeneratedAttribute]
public void set_UseDownloadCache(bool value);
    [CompilerGeneratedAttribute]
public bool get_SkipVirusCheck();
    [CompilerGeneratedAttribute]
public void set_SkipVirusCheck(bool value);
    [CompilerGeneratedAttribute]
public bool get_VirusCheck();
    [CompilerGeneratedAttribute]
public void set_VirusCheck(bool value);
    [CompilerGeneratedAttribute]
public int get_VirusPositivesMinimum();
    [CompilerGeneratedAttribute]
public void set_VirusPositivesMinimum(int value);
    [CompilerGeneratedAttribute]
public string get_InstallArgumentsSensitive();
    [CompilerGeneratedAttribute]
public void set_InstallArgumentsSensitive(string value);
    [CompilerGeneratedAttribute]
public string get_PackageParametersSensitive();
    [CompilerGeneratedAttribute]
public void set_PackageParametersSensitive(string value);
    [CompilerGeneratedAttribute]
public DirectoryPath get_InstallDirectory();
    [CompilerGeneratedAttribute]
public void set_InstallDirectory(DirectoryPath value);
    [CompilerGeneratedAttribute]
public int get_MaximumDownloadBitsPerSecond();
    [CompilerGeneratedAttribute]
public void set_MaximumDownloadBitsPerSecond(int value);
    [CompilerGeneratedAttribute]
public bool get_ReducePackageSize();
    [CompilerGeneratedAttribute]
public void set_ReducePackageSize(bool value);
    [CompilerGeneratedAttribute]
public bool get_NoReducePackageSize();
    [CompilerGeneratedAttribute]
public void set_NoReducePackageSize(bool value);
    [CompilerGeneratedAttribute]
public bool get_ReduceNupkgOnly();
    [CompilerGeneratedAttribute]
public void set_ReduceNupkgOnly(bool value);
    [CompilerGeneratedAttribute]
public string get_PinReason();
    [CompilerGeneratedAttribute]
public void set_PinReason(string value);
}
public class Cake.Common.Tools.Chocolatey.New.ChocolateyNewSettings : ChocolateySettings {
    private Dictionary`2<string, string> _additionalPropertyValues;
    [CompilerGeneratedAttribute]
private bool <AutomaticPackage>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TemplateName>k__BackingField;
    [CompilerGeneratedAttribute]
private DirectoryPath <OutputDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <BuiltInTemplate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PackageVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MaintainerName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MaintainerRepo>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InstallerType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url64>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SilentArgs>k__BackingField;
    [CompilerGeneratedAttribute]
private string <File>k__BackingField;
    [CompilerGeneratedAttribute]
private string <File64>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseOriginalFilesLocation>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Checksum>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Checksum64>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ChecksumType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PauseOnError>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <BuildPackage>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <GeneratePackagesFromInstalledSoftware>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RemoveArchitectureFromName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeArchitectureInPackageName>k__BackingField;
    public bool AutomaticPackage { get; public set; }
    public string TemplateName { get; public set; }
    public DirectoryPath OutputDirectory { get; public set; }
    public bool BuiltInTemplate { get; public set; }
    public string PackageVersion { get; public set; }
    public string MaintainerName { get; public set; }
    public string MaintainerRepo { get; public set; }
    public string InstallerType { get; public set; }
    public string Url { get; public set; }
    public string Url64 { get; public set; }
    public string SilentArgs { get; public set; }
    public Dictionary`2<string, string> AdditionalPropertyValues { get; }
    public string File { get; public set; }
    public string File64 { get; public set; }
    public bool UseOriginalFilesLocation { get; public set; }
    public string Checksum { get; public set; }
    public string Checksum64 { get; public set; }
    public string ChecksumType { get; public set; }
    public bool PauseOnError { get; public set; }
    public bool BuildPackage { get; public set; }
    public bool GeneratePackagesFromInstalledSoftware { get; public set; }
    public bool RemoveArchitectureFromName { get; public set; }
    public bool IncludeArchitectureInPackageName { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_AutomaticPackage();
    [CompilerGeneratedAttribute]
public void set_AutomaticPackage(bool value);
    [CompilerGeneratedAttribute]
public string get_TemplateName();
    [CompilerGeneratedAttribute]
public void set_TemplateName(string value);
    [CompilerGeneratedAttribute]
public DirectoryPath get_OutputDirectory();
    [CompilerGeneratedAttribute]
public void set_OutputDirectory(DirectoryPath value);
    [CompilerGeneratedAttribute]
public bool get_BuiltInTemplate();
    [CompilerGeneratedAttribute]
public void set_BuiltInTemplate(bool value);
    [CompilerGeneratedAttribute]
public string get_PackageVersion();
    [CompilerGeneratedAttribute]
public void set_PackageVersion(string value);
    [CompilerGeneratedAttribute]
public string get_MaintainerName();
    [CompilerGeneratedAttribute]
public void set_MaintainerName(string value);
    [CompilerGeneratedAttribute]
public string get_MaintainerRepo();
    [CompilerGeneratedAttribute]
public void set_MaintainerRepo(string value);
    [CompilerGeneratedAttribute]
public string get_InstallerType();
    [CompilerGeneratedAttribute]
public void set_InstallerType(string value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
    [CompilerGeneratedAttribute]
public string get_Url64();
    [CompilerGeneratedAttribute]
public void set_Url64(string value);
    [CompilerGeneratedAttribute]
public string get_SilentArgs();
    [CompilerGeneratedAttribute]
public void set_SilentArgs(string value);
    public Dictionary`2<string, string> get_AdditionalPropertyValues();
    [CompilerGeneratedAttribute]
public string get_File();
    [CompilerGeneratedAttribute]
public void set_File(string value);
    [CompilerGeneratedAttribute]
public string get_File64();
    [CompilerGeneratedAttribute]
public void set_File64(string value);
    [CompilerGeneratedAttribute]
public bool get_UseOriginalFilesLocation();
    [CompilerGeneratedAttribute]
public void set_UseOriginalFilesLocation(bool value);
    [CompilerGeneratedAttribute]
public string get_Checksum();
    [CompilerGeneratedAttribute]
public void set_Checksum(string value);
    [CompilerGeneratedAttribute]
public string get_Checksum64();
    [CompilerGeneratedAttribute]
public void set_Checksum64(string value);
    [CompilerGeneratedAttribute]
public string get_ChecksumType();
    [CompilerGeneratedAttribute]
public void set_ChecksumType(string value);
    [CompilerGeneratedAttribute]
public bool get_PauseOnError();
    [CompilerGeneratedAttribute]
public void set_PauseOnError(bool value);
    [CompilerGeneratedAttribute]
public bool get_BuildPackage();
    [CompilerGeneratedAttribute]
public void set_BuildPackage(bool value);
    [CompilerGeneratedAttribute]
public bool get_GeneratePackagesFromInstalledSoftware();
    [CompilerGeneratedAttribute]
public void set_GeneratePackagesFromInstalledSoftware(bool value);
    [CompilerGeneratedAttribute]
public bool get_RemoveArchitectureFromName();
    [CompilerGeneratedAttribute]
public void set_RemoveArchitectureFromName(bool value);
    [CompilerGeneratedAttribute]
public bool get_IncludeArchitectureInPackageName();
    [CompilerGeneratedAttribute]
public void set_IncludeArchitectureInPackageName(bool value);
}
public class Cake.Common.Tools.Chocolatey.New.ChocolateyScaffolder : ChocolateyTool`1<ChocolateyNewSettings> {
    private ICakeEnvironment _environment;
    public ChocolateyScaffolder(IFileSystem fileSystem, ICakeEnvironment environment, IProcessRunner processRunner, IToolLocator tools, IChocolateyToolResolver resolver);
    public void CreatePackage(string packageId, ChocolateyNewSettings settings);
    private ProcessArgumentBuilder GetArguments(string packageId, ChocolateyNewSettings settings);
}
public class Cake.Common.Tools.Chocolatey.Pack.ChocolateyNuSpecContent : object {
    [CompilerGeneratedAttribute]
private string <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Target>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Exclude>k__BackingField;
    public string Source { get; public set; }
    public string Target { get; public set; }
    public string Exclude { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Source();
    [CompilerGeneratedAttribute]
public void set_Source(string value);
    [CompilerGeneratedAttribute]
public string get_Target();
    [CompilerGeneratedAttribute]
public void set_Target(string value);
    [CompilerGeneratedAttribute]
public string get_Exclude();
    [CompilerGeneratedAttribute]
public void set_Exclude(string value);
}
public class Cake.Common.Tools.Chocolatey.Pack.ChocolateyNuSpecDependency : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    public string Id { get; public set; }
    public string Version { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(string value);
}
internal class Cake.Common.Tools.Chocolatey.Pack.ChocolateyNuSpecProcessor : object {
    private IFileSystem _fileSystem;
    private ICakeEnvironment _environment;
    private ICakeLog _log;
    public ChocolateyNuSpecProcessor(IFileSystem fileSystem, ICakeEnvironment environment, ICakeLog log);
    public FilePath Process(ChocolateyPackSettings settings);
    public FilePath Process(FilePath nuspecFilePath, ChocolateyPackSettings settings);
    private FilePath ProcessXml(FilePath nuspecFilePath, ChocolateyPackSettings settings, XmlDocument xml);
    private static XmlDocument LoadNuspecXml(IFile nuspecFile);
    private static XmlDocument LoadEmptyNuSpec();
    private FilePath SaveNuspecXml(FilePath nuspecFilePath, XmlDocument document);
}
[ExtensionAttribute]
internal static class Cake.Common.Tools.Chocolatey.Pack.ChocolateyNuSpecTransformer : object {
    private static string ChocolateyNuSpecXsd;
    private static Dictionary`2<string, Func`2<ChocolateyPackSettings, string>> _mappings;
    private static List`1<string> _cdataElements;
    private static ChocolateyNuSpecTransformer();
    public static void Transform(XmlDocument document, ChocolateyPackSettings settings);
    private static XmlNode GetPackageElement(XmlDocument document);
    private static XmlNode FindOrCreateElement(XmlDocument document, XmlNamespaceManager ns, string name);
    [ExtensionAttribute]
private static XmlNode CreateAndAppendElement(XmlDocument document, XmlNode parent, string name);
    [ExtensionAttribute]
private static void AddAttributeIfSpecified(XmlNode element, string value, string name);
    private static string ToString(string value);
    private static string ToString(Uri value);
    private static string ToString(bool value);
    private static string ToCommaSeparatedString(ICollection`1<string> values);
    private static string ToMultiLineString(ICollection`1<string> values);
    private static string ToSpaceSeparatedString(ICollection`1<string> values);
}
public class Cake.Common.Tools.Chocolatey.Pack.ChocolateyPacker : ChocolateyTool`1<ChocolateyPackSettings> {
    private IFileSystem _fileSystem;
    private ICakeEnvironment _environment;
    private ChocolateyNuSpecProcessor _processor;
    public ChocolateyPacker(IFileSystem fileSystem, ICakeEnvironment environment, IProcessRunner processRunner, ICakeLog log, IToolLocator tools, IChocolateyToolResolver resolver);
    public void Pack(ChocolateyPackSettings settings);
    public void Pack(FilePath nuspecFilePath, ChocolateyPackSettings settings);
    private void Pack(ChocolateyPackSettings settings, Func`1<FilePath> process);
    private ProcessArgumentBuilder GetArguments(FilePath nuspecFilePath, ChocolateyPackSettings settings);
}
public class Cake.Common.Tools.Chocolatey.Pack.ChocolateyPackSettings : ChocolateySettings {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<string> <Authors>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<string> <Owners>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Summary>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <ProjectUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <PackageSourceUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <ProjectSourceUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <DocsUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <MailingListUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <BugTrackerUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<string> <Tags>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Copyright>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <LicenseUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RequireLicenseAcceptance>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <IconUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<string> <ReleaseNotes>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<ChocolateyNuSpecContent> <Files>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<ChocolateyNuSpecDependency> <Dependencies>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private DirectoryPath <OutputDirectory>k__BackingField;
    public string Id { get; public set; }
    public string Title { get; public set; }
    public ICollection`1<string> Authors { get; public set; }
    public ICollection`1<string> Owners { get; public set; }
    public string Summary { get; public set; }
    public string Description { get; public set; }
    public Uri ProjectUrl { get; public set; }
    public Uri PackageSourceUrl { get; public set; }
    public Uri ProjectSourceUrl { get; public set; }
    public Uri DocsUrl { get; public set; }
    public Uri MailingListUrl { get; public set; }
    public Uri BugTrackerUrl { get; public set; }
    public ICollection`1<string> Tags { get; public set; }
    public string Copyright { get; public set; }
    public Uri LicenseUrl { get; public set; }
    public bool RequireLicenseAcceptance { get; public set; }
    public Uri IconUrl { get; public set; }
    public ICollection`1<string> ReleaseNotes { get; public set; }
    public ICollection`1<ChocolateyNuSpecContent> Files { get; public set; }
    public ICollection`1<ChocolateyNuSpecDependency> Dependencies { get; public set; }
    public string Version { get; public set; }
    public DirectoryPath OutputDirectory { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [CompilerGeneratedAttribute]
public ICollection`1<string> get_Authors();
    [CompilerGeneratedAttribute]
public void set_Authors(ICollection`1<string> value);
    [CompilerGeneratedAttribute]
public ICollection`1<string> get_Owners();
    [CompilerGeneratedAttribute]
public void set_Owners(ICollection`1<string> value);
    [CompilerGeneratedAttribute]
public string get_Summary();
    [CompilerGeneratedAttribute]
public void set_Summary(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public Uri get_ProjectUrl();
    [CompilerGeneratedAttribute]
public void set_ProjectUrl(Uri value);
    [CompilerGeneratedAttribute]
public Uri get_PackageSourceUrl();
    [CompilerGeneratedAttribute]
public void set_PackageSourceUrl(Uri value);
    [CompilerGeneratedAttribute]
public Uri get_ProjectSourceUrl();
    [CompilerGeneratedAttribute]
public void set_ProjectSourceUrl(Uri value);
    [CompilerGeneratedAttribute]
public Uri get_DocsUrl();
    [CompilerGeneratedAttribute]
public void set_DocsUrl(Uri value);
    [CompilerGeneratedAttribute]
public Uri get_MailingListUrl();
    [CompilerGeneratedAttribute]
public void set_MailingListUrl(Uri value);
    [CompilerGeneratedAttribute]
public Uri get_BugTrackerUrl();
    [CompilerGeneratedAttribute]
public void set_BugTrackerUrl(Uri value);
    [CompilerGeneratedAttribute]
public ICollection`1<string> get_Tags();
    [CompilerGeneratedAttribute]
public void set_Tags(ICollection`1<string> value);
    [CompilerGeneratedAttribute]
public string get_Copyright();
    [CompilerGeneratedAttribute]
public void set_Copyright(string value);
    [CompilerGeneratedAttribute]
public Uri get_LicenseUrl();
    [CompilerGeneratedAttribute]
public void set_LicenseUrl(Uri value);
    [CompilerGeneratedAttribute]
public bool get_RequireLicenseAcceptance();
    [CompilerGeneratedAttribute]
public void set_RequireLicenseAcceptance(bool value);
    [CompilerGeneratedAttribute]
public Uri get_IconUrl();
    [CompilerGeneratedAttribute]
public void set_IconUrl(Uri value);
    [CompilerGeneratedAttribute]
public ICollection`1<string> get_ReleaseNotes();
    [CompilerGeneratedAttribute]
public void set_ReleaseNotes(ICollection`1<string> value);
    [CompilerGeneratedAttribute]
public ICollection`1<ChocolateyNuSpecContent> get_Files();
    [CompilerGeneratedAttribute]
public void set_Files(ICollection`1<ChocolateyNuSpecContent> value);
    [CompilerGeneratedAttribute]
public ICollection`1<ChocolateyNuSpecDependency> get_Dependencies();
    [CompilerGeneratedAttribute]
public void set_Dependencies(ICollection`1<ChocolateyNuSpecDependency> value);
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(string value);
    [CompilerGeneratedAttribute]
public DirectoryPath get_OutputDirectory();
    [CompilerGeneratedAttribute]
public void set_OutputDirectory(DirectoryPath value);
}
public class Cake.Common.Tools.Chocolatey.Pin.ChocolateyPinner : ChocolateyTool`1<ChocolateyPinSettings> {
    public ChocolateyPinner(IFileSystem fileSystem, ICakeEnvironment environment, IProcessRunner processRunner, IToolLocator tools, IChocolateyToolResolver resolver);
    public void Pin(string name, ChocolateyPinSettings settings);
    private ProcessArgumentBuilder GetArguments(string name, ChocolateyPinSettings settings);
}
public class Cake.Common.Tools.Chocolatey.Pin.ChocolateyPinSettings : ChocolateySettings {
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PinReason>k__BackingField;
    public string Version { get; public set; }
    public string PinReason { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(string value);
    [CompilerGeneratedAttribute]
public string get_PinReason();
    [CompilerGeneratedAttribute]
public void set_PinReason(string value);
}
public class Cake.Common.Tools.Chocolatey.Push.ChocolateyPusher : ChocolateyTool`1<ChocolateyPushSettings> {
    private ICakeEnvironment _environment;
    public ChocolateyPusher(IFileSystem fileSystem, ICakeEnvironment environment, IProcessRunner processRunner, IToolLocator tools, IChocolateyToolResolver resolver);
    public void Push(FilePath packageFilePath, ChocolateyPushSettings settings);
    private ProcessArgumentBuilder GetArguments(FilePath packageFilePath, ChocolateyPushSettings settings);
}
public class Cake.Common.Tools.Chocolatey.Push.ChocolateyPushSettings : ChocolateySettings {
    [CompilerGeneratedAttribute]
private string <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ApiKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClientCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RedirectUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EndPoint>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SkipCleanup>k__BackingField;
    public string Source { get; public set; }
    public string ApiKey { get; public set; }
    public string ClientCode { get; public set; }
    public string RedirectUrl { get; public set; }
    public string EndPoint { get; public set; }
    public bool SkipCleanup { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Source();
    [CompilerGeneratedAttribute]
public void set_Source(string value);
    [CompilerGeneratedAttribute]
public string get_ApiKey();
    [CompilerGeneratedAttribute]
public void set_ApiKey(string value);
    [CompilerGeneratedAttribute]
public string get_ClientCode();
    [CompilerGeneratedAttribute]
public void set_ClientCode(string value);
    [CompilerGeneratedAttribute]
public string get_RedirectUrl();
    [CompilerGeneratedAttribute]
public void set_RedirectUrl(string value);
    [CompilerGeneratedAttribute]
public string get_EndPoint();
    [CompilerGeneratedAttribute]
public void set_EndPoint(string value);
    [CompilerGeneratedAttribute]
public bool get_SkipCleanup();
    [CompilerGeneratedAttribute]
public void set_SkipCleanup(bool value);
}
public class Cake.Common.Tools.Chocolatey.Sources.ChocolateySources : ChocolateyTool`1<ChocolateySourcesSettings> {
    private static string Separator;
    private ICakeEnvironment _environment;
    public ChocolateySources(IFileSystem fileSystem, ICakeEnvironment environment, IProcessRunner processRunner, IToolLocator tools, IChocolateyToolResolver resolver);
    public void AddSource(string name, string source, ChocolateySourcesSettings settings);
    public void RemoveSource(string name, ChocolateySourcesSettings settings);
    public void EnableSource(string name, ChocolateySourcesSettings settings);
    public void DisableSource(string name, ChocolateySourcesSettings settings);
    private ProcessArgumentBuilder GetAddArguments(string name, string source, ChocolateySourcesSettings settings);
    private ProcessArgumentBuilder GetRemoveArguments(string name, ChocolateySourcesSettings settings);
    private ProcessArgumentBuilder GetEnableArguments(string name, ChocolateySourcesSettings settings);
    private ProcessArgumentBuilder GetDisableArguments(string name, ChocolateySourcesSettings settings);
    private void AddCommonParameters(string name, string source, ChocolateySourcesSettings settings, ProcessArgumentBuilder builder);
}
public class Cake.Common.Tools.Chocolatey.Sources.ChocolateySourcesSettings : ChocolateySettings {
    [CompilerGeneratedAttribute]
private string <UserName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Password>k__BackingField;
    [CompilerGeneratedAttribute]
private FilePath <Certificate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CertificatePassword>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Priority>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ByPassProxy>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowSelfService>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AdminOnly>k__BackingField;
    public string UserName { get; public set; }
    public string Password { get; public set; }
    public FilePath Certificate { get; public set; }
    public string CertificatePassword { get; public set; }
    public int Priority { get; public set; }
    public bool ByPassProxy { get; public set; }
    public bool AllowSelfService { get; public set; }
    public bool AdminOnly { get; public set; }
    [CompilerGeneratedAttribute]
public string get_UserName();
    [CompilerGeneratedAttribute]
public void set_UserName(string value);
    [CompilerGeneratedAttribute]
public string get_Password();
    [CompilerGeneratedAttribute]
public void set_Password(string value);
    [CompilerGeneratedAttribute]
public FilePath get_Certificate();
    [CompilerGeneratedAttribute]
public void set_Certificate(FilePath value);
    [CompilerGeneratedAttribute]
public string get_CertificatePassword();
    [CompilerGeneratedAttribute]
public void set_CertificatePassword(string value);
    [CompilerGeneratedAttribute]
public int get_Priority();
    [CompilerGeneratedAttribute]
public void set_Priority(int value);
    [CompilerGeneratedAttribute]
public bool get_ByPassProxy();
    [CompilerGeneratedAttribute]
public void set_ByPassProxy(bool value);
    [CompilerGeneratedAttribute]
public bool get_AllowSelfService();
    [CompilerGeneratedAttribute]
public void set_AllowSelfService(bool value);
    [CompilerGeneratedAttribute]
public bool get_AdminOnly();
    [CompilerGeneratedAttribute]
public void set_AdminOnly(bool value);
}
public class Cake.Common.Tools.Chocolatey.Uninstall.ChocolateyUninstaller : ChocolateyTool`1<ChocolateyUninstallSettings> {
    public ChocolateyUninstaller(IFileSystem fileSystem, ICakeEnvironment environment, IProcessRunner processRunner, IToolLocator tools, IChocolateyToolResolver resolver);
    public void Uninstall(IEnumerable`1<string> packageIds, ChocolateyUninstallSettings settings);
    private ProcessArgumentBuilder GetArguments(IEnumerable`1<string> packageIds, ChocolateyUninstallSettings settings);
}
public class Cake.Common.Tools.Chocolatey.Uninstall.ChocolateyUninstallSettings : ChocolateySharedSettings {
    [CompilerGeneratedAttribute]
private bool <AllVersions>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UninstallArguments>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ForceDependencies>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseAutoUninstaller>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SkipAutoUninstaller>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FailOnAutoUninstaller>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreAutoUninstallerFailure>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FromProgramsAndFeatures>k__BackingField;
    public bool AllVersions { get; public set; }
    public string UninstallArguments { get; public set; }
    public bool ForceDependencies { get; public set; }
    public bool UseAutoUninstaller { get; public set; }
    public bool SkipAutoUninstaller { get; public set; }
    public bool FailOnAutoUninstaller { get; public set; }
    public bool IgnoreAutoUninstallerFailure { get; public set; }
    public bool FromProgramsAndFeatures { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_AllVersions();
    [CompilerGeneratedAttribute]
public void set_AllVersions(bool value);
    [CompilerGeneratedAttribute]
public string get_UninstallArguments();
    [CompilerGeneratedAttribute]
public void set_UninstallArguments(string value);
    [CompilerGeneratedAttribute]
public bool get_ForceDependencies();
    [CompilerGeneratedAttribute]
public void set_ForceDependencies(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseAutoUninstaller();
    [CompilerGeneratedAttribute]
public void set_UseAutoUninstaller(bool value);
    [CompilerGeneratedAttribute]
public bool get_SkipAutoUninstaller();
    [CompilerGeneratedAttribute]
public void set_SkipAutoUninstaller(bool value);
    [CompilerGeneratedAttribute]
public bool get_FailOnAutoUninstaller();
    [CompilerGeneratedAttribute]
public void set_FailOnAutoUninstaller(bool value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreAutoUninstallerFailure();
    [CompilerGeneratedAttribute]
public void set_IgnoreAutoUninstallerFailure(bool value);
    [CompilerGeneratedAttribute]
public bool get_FromProgramsAndFeatures();
    [CompilerGeneratedAttribute]
public void set_FromProgramsAndFeatures(bool value);
}
public class Cake.Common.Tools.Chocolatey.Upgrade.ChocolateyUpgrader : ChocolateyTool`1<ChocolateyUpgradeSettings> {
    private ICakeEnvironment _environment;
    public ChocolateyUpgrader(IFileSystem fileSystem, ICakeEnvironment environment, IProcessRunner processRunner, IToolLocator tools, IChocolateyToolResolver resolver);
    public void Upgrade(string packageId, ChocolateyUpgradeSettings settings);
    private ProcessArgumentBuilder GetArguments(string packageId, ChocolateyUpgradeSettings settings);
}
public class Cake.Common.Tools.Chocolatey.Upgrade.ChocolateyUpgradeSettings : ChocolateySharedSettings {
    [CompilerGeneratedAttribute]
private bool <Prerelease>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Forcex86>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InstallArguments>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowDowngrade>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreDependencies>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FailOnUnfound>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreUnfound>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FailOnNotInstalled>k__BackingField;
    [CompilerGeneratedAttribute]
private string <User>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Password>k__BackingField;
    [CompilerGeneratedAttribute]
private FilePath <Certificate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CertificatePassword>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreChecksums>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowEmptyChecksums>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowEmptyChecksumsSecure>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RequireChecksums>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Checksum>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Checksum64>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ChecksumType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ChecksumType64>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Except>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SkipIfNotInstalled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <InstallIfNotInstalled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ExcludePrerelease>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseRememberedArguments>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreRememeredArguments>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisableRepositoryOptimizations>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Pin>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SkipDownloadCache>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseDownloadCache>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SkipVirusCheck>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <VirusCheck>k__BackingField;
    [CompilerGeneratedAttribute]
private int <VirusPositivesMinimum>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InstallArgumentsSensitive>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PackageParametersSensitive>k__BackingField;
    [CompilerGeneratedAttribute]
private DirectoryPath <InstallDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaximumDownloadBitsPerSecond>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ReducePackageSize>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoReducePackageSize>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ReduceNupkgOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ExcludeChocolateyPackagesDuringUpgradeAll>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeChocolateyPackagesDuringUpgradeAll>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PinReason>k__BackingField;
    public bool Prerelease { get; public set; }
    public bool Forcex86 { get; public set; }
    public string InstallArguments { get; public set; }
    public bool AllowDowngrade { get; public set; }
    public bool IgnoreDependencies { get; public set; }
    public bool FailOnUnfound { get; public set; }
    public bool IgnoreUnfound { get; public set; }
    public bool FailOnNotInstalled { get; public set; }
    public string User { get; public set; }
    public string Password { get; public set; }
    public FilePath Certificate { get; public set; }
    public string CertificatePassword { get; public set; }
    public bool IgnoreChecksums { get; public set; }
    public bool AllowEmptyChecksums { get; public set; }
    public bool AllowEmptyChecksumsSecure { get; public set; }
    public bool RequireChecksums { get; public set; }
    public string Checksum { get; public set; }
    public string Checksum64 { get; public set; }
    public string ChecksumType { get; public set; }
    public string ChecksumType64 { get; public set; }
    public string Except { get; public set; }
    public bool SkipIfNotInstalled { get; public set; }
    public bool InstallIfNotInstalled { get; public set; }
    public bool ExcludePrerelease { get; public set; }
    public bool UseRememberedArguments { get; public set; }
    public bool IgnoreRememeredArguments { get; public set; }
    public bool DisableRepositoryOptimizations { get; public set; }
    public bool Pin { get; public set; }
    public bool SkipDownloadCache { get; public set; }
    public bool UseDownloadCache { get; public set; }
    public bool SkipVirusCheck { get; public set; }
    public bool VirusCheck { get; public set; }
    public int VirusPositivesMinimum { get; public set; }
    public string InstallArgumentsSensitive { get; public set; }
    public string PackageParametersSensitive { get; public set; }
    public DirectoryPath InstallDirectory { get; public set; }
    public int MaximumDownloadBitsPerSecond { get; public set; }
    public bool ReducePackageSize { get; public set; }
    public bool NoReducePackageSize { get; public set; }
    public bool ReduceNupkgOnly { get; public set; }
    public bool ExcludeChocolateyPackagesDuringUpgradeAll { get; public set; }
    public bool IncludeChocolateyPackagesDuringUpgradeAll { get; public set; }
    public string PinReason { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Prerelease();
    [CompilerGeneratedAttribute]
public void set_Prerelease(bool value);
    [CompilerGeneratedAttribute]
public bool get_Forcex86();
    [CompilerGeneratedAttribute]
public void set_Forcex86(bool value);
    [CompilerGeneratedAttribute]
public string get_InstallArguments();
    [CompilerGeneratedAttribute]
public void set_InstallArguments(string value);
    [CompilerGeneratedAttribute]
public bool get_AllowDowngrade();
    [CompilerGeneratedAttribute]
public void set_AllowDowngrade(bool value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreDependencies();
    [CompilerGeneratedAttribute]
public void set_IgnoreDependencies(bool value);
    [CompilerGeneratedAttribute]
public bool get_FailOnUnfound();
    [CompilerGeneratedAttribute]
public void set_FailOnUnfound(bool value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreUnfound();
    [CompilerGeneratedAttribute]
public void set_IgnoreUnfound(bool value);
    [CompilerGeneratedAttribute]
public bool get_FailOnNotInstalled();
    [CompilerGeneratedAttribute]
public void set_FailOnNotInstalled(bool value);
    [CompilerGeneratedAttribute]
public string get_User();
    [CompilerGeneratedAttribute]
public void set_User(string value);
    [CompilerGeneratedAttribute]
public string get_Password();
    [CompilerGeneratedAttribute]
public void set_Password(string value);
    [CompilerGeneratedAttribute]
public FilePath get_Certificate();
    [CompilerGeneratedAttribute]
public void set_Certificate(FilePath value);
    [CompilerGeneratedAttribute]
public string get_CertificatePassword();
    [CompilerGeneratedAttribute]
public void set_CertificatePassword(string value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreChecksums();
    [CompilerGeneratedAttribute]
public void set_IgnoreChecksums(bool value);
    [CompilerGeneratedAttribute]
public bool get_AllowEmptyChecksums();
    [CompilerGeneratedAttribute]
public void set_AllowEmptyChecksums(bool value);
    [CompilerGeneratedAttribute]
public bool get_AllowEmptyChecksumsSecure();
    [CompilerGeneratedAttribute]
public void set_AllowEmptyChecksumsSecure(bool value);
    [CompilerGeneratedAttribute]
public bool get_RequireChecksums();
    [CompilerGeneratedAttribute]
public void set_RequireChecksums(bool value);
    [CompilerGeneratedAttribute]
public string get_Checksum();
    [CompilerGeneratedAttribute]
public void set_Checksum(string value);
    [CompilerGeneratedAttribute]
public string get_Checksum64();
    [CompilerGeneratedAttribute]
public void set_Checksum64(string value);
    [CompilerGeneratedAttribute]
public string get_ChecksumType();
    [CompilerGeneratedAttribute]
public void set_ChecksumType(string value);
    [CompilerGeneratedAttribute]
public string get_ChecksumType64();
    [CompilerGeneratedAttribute]
public void set_ChecksumType64(string value);
    [CompilerGeneratedAttribute]
public string get_Except();
    [CompilerGeneratedAttribute]
public void set_Except(string value);
    [CompilerGeneratedAttribute]
public bool get_SkipIfNotInstalled();
    [CompilerGeneratedAttribute]
public void set_SkipIfNotInstalled(bool value);
    [CompilerGeneratedAttribute]
public bool get_InstallIfNotInstalled();
    [CompilerGeneratedAttribute]
public void set_InstallIfNotInstalled(bool value);
    [CompilerGeneratedAttribute]
public bool get_ExcludePrerelease();
    [CompilerGeneratedAttribute]
public void set_ExcludePrerelease(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseRememberedArguments();
    [CompilerGeneratedAttribute]
public void set_UseRememberedArguments(bool value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreRememeredArguments();
    [CompilerGeneratedAttribute]
public void set_IgnoreRememeredArguments(bool value);
    [CompilerGeneratedAttribute]
public bool get_DisableRepositoryOptimizations();
    [CompilerGeneratedAttribute]
public void set_DisableRepositoryOptimizations(bool value);
    [CompilerGeneratedAttribute]
public bool get_Pin();
    [CompilerGeneratedAttribute]
public void set_Pin(bool value);
    [CompilerGeneratedAttribute]
public bool get_SkipDownloadCache();
    [CompilerGeneratedAttribute]
public void set_SkipDownloadCache(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseDownloadCache();
    [CompilerGeneratedAttribute]
public void set_UseDownloadCache(bool value);
    [CompilerGeneratedAttribute]
public bool get_SkipVirusCheck();
    [CompilerGeneratedAttribute]
public void set_SkipVirusCheck(bool value);
    [CompilerGeneratedAttribute]
public bool get_VirusCheck();
    [CompilerGeneratedAttribute]
public void set_VirusCheck(bool value);
    [CompilerGeneratedAttribute]
public int get_VirusPositivesMinimum();
    [CompilerGeneratedAttribute]
public void set_VirusPositivesMinimum(int value);
    [CompilerGeneratedAttribute]
public string get_InstallArgumentsSensitive();
    [CompilerGeneratedAttribute]
public void set_InstallArgumentsSensitive(string value);
    [CompilerGeneratedAttribute]
public string get_PackageParametersSensitive();
    [CompilerGeneratedAttribute]
public void set_PackageParametersSensitive(string value);
    [CompilerGeneratedAttribute]
public DirectoryPath get_InstallDirectory();
    [CompilerGeneratedAttribute]
public void set_InstallDirectory(DirectoryPath value);
    [CompilerGeneratedAttribute]
public int get_MaximumDownloadBitsPerSecond();
    [CompilerGeneratedAttribute]
public void set_MaximumDownloadBitsPerSecond(int value);
    [CompilerGeneratedAttribute]
public bool get_ReducePackageSize();
    [CompilerGeneratedAttribute]
public void set_ReducePackageSize(bool value);
    [CompilerGeneratedAttribute]
public bool get_NoReducePackageSize();
    [CompilerGeneratedAttribute]
public void set_NoReducePackageSize(bool value);
    [CompilerGeneratedAttribute]
public bool get_ReduceNupkgOnly();
    [CompilerGeneratedAttribute]
public void set_ReduceNupkgOnly(bool value);
    [CompilerGeneratedAttribute]
public bool get_ExcludeChocolateyPackagesDuringUpgradeAll();
    [CompilerGeneratedAttribute]
public void set_ExcludeChocolateyPackagesDuringUpgradeAll(bool value);
    [CompilerGeneratedAttribute]
public bool get_IncludeChocolateyPackagesDuringUpgradeAll();
    [CompilerGeneratedAttribute]
public void set_IncludeChocolateyPackagesDuringUpgradeAll(bool value);
    [CompilerGeneratedAttribute]
public string get_PinReason();
    [CompilerGeneratedAttribute]
public void set_PinReason(string value);
}
[ExtensionAttribute]
[CakeAliasCategoryAttribute("Command")]
public static class Cake.Common.Tools.Command.CommandAliases : object {
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Command")]
public static void Command(ICakeContext context, ICollection`1<string> toolExecutableNames, ProcessArgumentBuilder arguments, int expectedExitCode, Func`2<CommandSettings, CommandSettings> settingsCustomization);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Command")]
public static void Command(ICakeContext context, CommandSettings settings, ProcessArgumentBuilder arguments);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Command")]
public static int Command(ICakeContext context, ICollection`1<string> toolExecutableNames, String& standardOutput, ProcessArgumentBuilder arguments, int expectedExitCode, Func`2<CommandSettings, CommandSettings> settingsCustomization);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Command")]
public static int Command(ICakeContext context, CommandSettings settings, String& standardOutput, ProcessArgumentBuilder arguments);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Command")]
public static int Command(ICakeContext context, ICollection`1<string> toolExecutableNames, String& standardOutput, String& standardError, ProcessArgumentBuilder arguments, int expectedExitCode, Func`2<CommandSettings, CommandSettings> settingsCustomization);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Command")]
public static int Command(ICakeContext context, CommandSettings settings, String& standardOutput, String& standardError, ProcessArgumentBuilder arguments);
    private static CommandSettings GetSettings(ICollection`1<string> toolExecutableNames, int expectedExitCode, Func`2<CommandSettings, CommandSettings> settingsCustomization);
    private static CommandRunner GetRunner(ICakeContext context, CommandSettings settings, ProcessArgumentBuilder& arguments);
}
public class Cake.Common.Tools.Command.CommandRunner : Tool`1<CommandSettings> {
    [CompilerGeneratedAttribute]
private CommandSettings <Settings>k__BackingField;
    private CommandSettings Settings { get; }
    public CommandRunner(CommandSettings settings, IFileSystem fileSystem, ICakeEnvironment environment, IProcessRunner processRunner, IToolLocator tools);
    [CompilerGeneratedAttribute]
private CommandSettings get_Settings();
    protected virtual IEnumerable`1<string> GetToolExecutableNames();
    protected virtual string GetToolName();
    public void RunCommand(ProcessArgumentBuilder arguments);
    public int RunCommand(ProcessArgumentBuilder arguments, String& standardOutput);
    public int RunCommand(ProcessArgumentBuilder arguments, String& standardOutput, String& standardError);
    private int RunCommand(ProcessArgumentBuilder arguments, String& standardOutput, String& standardError, ProcessSettings processSettings);
    private void RunCommand(ProcessArgumentBuilder arguments, ProcessSettings processSettings, Action`1<IProcess> postAction);
}
public class Cake.Common.Tools.Command.CommandSettings : ToolSettings {
    [CompilerGeneratedAttribute]
private string <ToolName>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<string> <ToolExecutableNames>k__BackingField;
    public string ToolName { get; public set; }
    public ICollection`1<string> ToolExecutableNames { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_ToolName();
    [CompilerGeneratedAttribute]
public virtual void set_ToolName(string value);
    [CompilerGeneratedAttribute]
public virtual ICollection`1<string> get_ToolExecutableNames();
    [CompilerGeneratedAttribute]
public virtual void set_ToolExecutableNames(ICollection`1<string> value);
}
[ExtensionAttribute]
public static class Cake.Common.Tools.Command.CommandSettingsExtensions : object {
    [ExtensionAttribute]
public static T WithExecutableNames(T toolSettings, String[] toolExecutableNames);
    [ExtensionAttribute]
public static T WithToolName(T toolSettings, string toolName);
}
public class Cake.Common.Tools.DotCover.Analyse.DotCoverAnalyser : DotCoverCoverageTool`1<DotCoverAnalyseSettings> {
    private ICakeEnvironment _environment;
    public DotCoverAnalyser(IFileSystem fileSystem, ICakeEnvironment environment, IProcessRunner processRunner, IToolLocator tools);
    public void Analyse(ICakeContext context, Action`1<ICakeContext> action, FilePath outputPath, DotCoverAnalyseSettings settings);
    private ProcessArgumentBuilder GetArguments(ICakeContext context, Action`1<ICakeContext> action, DotCoverAnalyseSettings settings, FilePath outputPath);
}
public class Cake.Common.Tools.DotCover.Analyse.DotCoverAnalyseSettings : DotCoverCoverageSettings {
    [CompilerGeneratedAttribute]
private DotCoverReportType <ReportType>k__BackingField;
    public DotCoverReportType ReportType { get; public set; }
    [CompilerGeneratedAttribute]
public DotCoverReportType get_ReportType();
    [CompilerGeneratedAttribute]
public void set_ReportType(DotCoverReportType value);
}
public class Cake.Common.Tools.DotCover.Cover.DotCoverCoverer : DotCoverCoverageTool`1<DotCoverCoverSettings> {
    private ICakeEnvironment _environment;
    public DotCoverCoverer(IFileSystem fileSystem, ICakeEnvironment environment, IProcessRunner processRunner, IToolLocator tools);
    public void Cover(ICakeContext context, Action`1<ICakeContext> action, FilePath outputPath, DotCoverCoverSettings settings);
    private ProcessArgumentBuilder GetArguments(ICakeContext context, Action`1<ICakeContext> action, DotCoverCoverSettings settings, FilePath outputPath);
}
public class Cake.Common.Tools.DotCover.Cover.DotCoverCoverSettings : DotCoverCoverageSettings {
}
[ExtensionAttribute]
[CakeAliasCategoryAttribute("DotCover")]
public static class Cake.Common.Tools.DotCover.DotCoverAliases : object {
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Analyse")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.DotCover.Analyse")]
public static void DotCoverAnalyse(ICakeContext context, Action`1<ICakeContext> action, FilePath outputFile, DotCoverAnalyseSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Cover")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.DotCover.Cover")]
public static void DotCoverCover(ICakeContext context, Action`1<ICakeContext> action, FilePath outputFile, DotCoverCoverSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Report")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.DotCover.Report")]
public static void DotCoverReport(ICakeContext context, FilePath sourceFile, FilePath outputFile, DotCoverReportSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Merge")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.DotCover.Merge")]
public static void DotCoverMerge(ICakeContext context, IEnumerable`1<FilePath> sourceFiles, FilePath outputFile);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Merge")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.DotCover.Merge")]
public static void DotCoverMerge(ICakeContext context, IEnumerable`1<FilePath> sourceFiles, FilePath outputFile, DotCoverMergeSettings settings);
}
internal class Cake.Common.Tools.DotCover.DotCoverContext : CakeContextAdapter {
    private DotCoverProcessRunner _runner;
    [CompilerGeneratedAttribute]
private ICakeLog <Log>k__BackingField;
    public ICakeLog Log { get; }
    public IProcessRunner ProcessRunner { get; }
    public FilePath FilePath { get; }
    public ProcessSettings Settings { get; }
    public DotCoverContext(ICakeContext context);
    [CompilerGeneratedAttribute]
public virtual ICakeLog get_Log();
    public virtual IProcessRunner get_ProcessRunner();
    public FilePath get_FilePath();
    public ProcessSettings get_Settings();
}
public abstract class Cake.Common.Tools.DotCover.DotCoverCoverageSettings : DotCoverSettings {
    private HashSet`1<string> _scope;
    private HashSet`1<string> _filters;
    private HashSet`1<string> _processFilters;
    private HashSet`1<string> _attributeFilters;
    [CompilerGeneratedAttribute]
private DirectoryPath <TargetWorkingDir>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisableDefaultFilters>k__BackingField;
    public DirectoryPath TargetWorkingDir { get; public set; }
    public ISet`1<string> Scope { get; }
    public ISet`1<string> Filters { get; }
    public ISet`1<string> AttributeFilters { get; }
    public ISet`1<string> ProcessFilters { get; }
    public bool DisableDefaultFilters { get; public set; }
    [CompilerGeneratedAttribute]
public DirectoryPath get_TargetWorkingDir();
    [CompilerGeneratedAttribute]
public void set_TargetWorkingDir(DirectoryPath value);
    public ISet`1<string> get_Scope();
    public ISet`1<string> get_Filters();
    public ISet`1<string> get_AttributeFilters();
    public ISet`1<string> get_ProcessFilters();
    [CompilerGeneratedAttribute]
public bool get_DisableDefaultFilters();
    [CompilerGeneratedAttribute]
public void set_DisableDefaultFilters(bool value);
}
[ExtensionAttribute]
public static class Cake.Common.Tools.DotCover.DotCoverCoverageSettingsExtensions : object {
    [ExtensionAttribute]
public static T WithScope(T settings, string scope);
    [ExtensionAttribute]
public static T WithFilter(T settings, string filter);
    [ExtensionAttribute]
public static T WithAttributeFilter(T settings, string attributeFilter);
    [ExtensionAttribute]
public static T WithProcessFilter(T settings, string filter);
}
public abstract class Cake.Common.Tools.DotCover.DotCoverCoverageTool`1 : DotCoverTool`1<TSettings> {
    private ICakeEnvironment _environment;
    public DotCoverCoverageTool`1(IFileSystem fileSystem, ICakeEnvironment environment, IProcessRunner processRunner, IToolLocator tools);
    protected ProcessArgumentBuilder GetTargetArguments(ICakeContext context, Action`1<ICakeContext> action);
    protected ProcessArgumentBuilder GetCoverageArguments(DotCoverCoverageSettings settings);
    private static DotCoverContext InterceptAction(ICakeContext context, Action`1<ICakeContext> action);
}
internal class Cake.Common.Tools.DotCover.DotCoverProcessRunner : object {
    [CompilerGeneratedAttribute]
private FilePath <FilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private ProcessSettings <ProcessSettings>k__BackingField;
    public FilePath FilePath { get; public set; }
    public ProcessSettings ProcessSettings { get; public set; }
    [CompilerGeneratedAttribute]
public FilePath get_FilePath();
    [CompilerGeneratedAttribute]
public void set_FilePath(FilePath value);
    [CompilerGeneratedAttribute]
public ProcessSettings get_ProcessSettings();
    [CompilerGeneratedAttribute]
public void set_ProcessSettings(ProcessSettings value);
    public sealed virtual IProcess Start(FilePath filePath, ProcessSettings settings);
}
public enum Cake.Common.Tools.DotCover.DotCoverReportType : Enum {
    public int value__;
    public static DotCoverReportType XML;
    public static DotCoverReportType HTML;
    public static DotCoverReportType JSON;
    public static DotCoverReportType DetailedXML;
    public static DotCoverReportType NDependXML;
}
public abstract class Cake.Common.Tools.DotCover.DotCoverSettings : ToolSettings {
    [CompilerGeneratedAttribute]
private FilePath <LogFile>k__BackingField;
    [CompilerGeneratedAttribute]
private FilePath <ConfigFile>k__BackingField;
    public FilePath LogFile { get; public set; }
    public FilePath ConfigFile { get; public set; }
    [CompilerGeneratedAttribute]
public FilePath get_LogFile();
    [CompilerGeneratedAttribute]
public void set_LogFile(FilePath value);
    [CompilerGeneratedAttribute]
public FilePath get_ConfigFile();
    [CompilerGeneratedAttribute]
public void set_ConfigFile(FilePath value);
}
[ExtensionAttribute]
public static class Cake.Common.Tools.DotCover.DotCoverSettingsExtensions : object {
    [ExtensionAttribute]
public static T WithConfigFile(T settings, FilePath configFile);
}
public abstract class Cake.Common.Tools.DotCover.DotCoverTool`1 : Tool`1<TSettings> {
    private ICakeEnvironment _environment;
    protected DotCoverTool`1(IFileSystem fileSystem, ICakeEnvironment environment, IProcessRunner processRunner, IToolLocator tools);
    protected virtual string GetToolName();
    protected virtual IEnumerable`1<string> GetToolExecutableNames();
    protected ProcessArgumentBuilder GetArguments(DotCoverSettings settings);
    protected ProcessArgumentBuilder GetConfigurationFileArgument(DotCoverSettings settings);
}
public class Cake.Common.Tools.DotCover.Merge.DotCoverMerger : DotCoverTool`1<DotCoverMergeSettings> {
    private ICakeEnvironment _environment;
    public DotCoverMerger(IFileSystem fileSystem, ICakeEnvironment environment, IProcessRunner processRunner, IToolLocator tools);
    public void Merge(IEnumerable`1<FilePath> sourceFiles, FilePath outputFile, DotCoverMergeSettings settings);
    private ProcessArgumentBuilder GetArguments(IEnumerable`1<FilePath> sourceFiles, FilePath outputFile, DotCoverMergeSettings settings);
    [CompilerGeneratedAttribute]
private string <GetArguments>b__3_0(FilePath s);
}
public class Cake.Common.Tools.DotCover.Merge.DotCoverMergeSettings : DotCoverSettings {
}
public class Cake.Common.Tools.DotCover.Report.DotCoverReporter : DotCoverTool`1<DotCoverReportSettings> {
    private ICakeEnvironment _environment;
    public DotCoverReporter(IFileSystem fileSystem, ICakeEnvironment environment, IProcessRunner processRunner, IToolLocator tools);
    public void Report(FilePath sourceFile, FilePath outputFile, DotCoverReportSettings settings);
    private ProcessArgumentBuilder GetArguments(FilePath sourceFile, FilePath outputFile, DotCoverReportSettings settings);
}
public class Cake.Common.Tools.DotCover.Report.DotCoverReportSettings : DotCoverSettings {
    [CompilerGeneratedAttribute]
private DotCoverReportType <ReportType>k__BackingField;
    public DotCoverReportType ReportType { get; public set; }
    [CompilerGeneratedAttribute]
public DotCoverReportType get_ReportType();
    [CompilerGeneratedAttribute]
public void set_ReportType(DotCoverReportType value);
}
public class Cake.Common.Tools.DotNet.Build.DotNetBuilder : DotNetTool`1<DotNetBuildSettings> {
    private ICakeEnvironment _environment;
    public DotNetBuilder(IFileSystem fileSystem, ICakeEnvironment environment, IProcessRunner processRunner, IToolLocator tools);
    public void Build(string project, DotNetBuildSettings settings);
    private ProcessArgumentBuilder GetArguments(string project, DotNetBuildSettings settings);
}
public class Cake.Common.Tools.DotNet.Build.DotNetBuildSettings : DotNetSettings {
    [CompilerGeneratedAttribute]
private DirectoryPath <OutputDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Runtime>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Configuration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Framework>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VersionSuffix>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoIncremental>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoDependencies>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoRestore>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoLogo>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<string> <Sources>k__BackingField;
    [CompilerGeneratedAttribute]
private DotNetMSBuildSettings <MSBuildSettings>k__BackingField;
    public DirectoryPath OutputDirectory { get; public set; }
    public string Runtime { get; public set; }
    public string Configuration { get; public set; }
    public string Framework { get; public set; }
    public string VersionSuffix { get; public set; }
    public bool NoIncremental { get; public set; }
    public bool NoDependencies { get; public set; }
    public bool NoRestore { get; public set; }
    public bool NoLogo { get; public set; }
    public ICollection`1<string> Sources { get; public set; }
    public DotNetMSBuildSettings MSBuildSettings { get; public set; }
    [CompilerGeneratedAttribute]
public DirectoryPath get_OutputDirectory();
    [CompilerGeneratedAttribute]
public void set_OutputDirectory(DirectoryPath value);
    [CompilerGeneratedAttribute]
public string get_Runtime();
    [CompilerGeneratedAttribute]
public void set_Runtime(string value);
    [CompilerGeneratedAttribute]
public string get_Configuration();
    [CompilerGeneratedAttribute]
public void set_Configuration(string value);
    [CompilerGeneratedAttribute]
public string get_Framework();
    [CompilerGeneratedAttribute]
public void set_Framework(string value);
    [CompilerGeneratedAttribute]
public string get_VersionSuffix();
    [CompilerGeneratedAttribute]
public void set_VersionSuffix(string value);
    [CompilerGeneratedAttribute]
public bool get_NoIncremental();
    [CompilerGeneratedAttribute]
public void set_NoIncremental(bool value);
    [CompilerGeneratedAttribute]
public bool get_NoDependencies();
    [CompilerGeneratedAttribute]
public void set_NoDependencies(bool value);
    [CompilerGeneratedAttribute]
public bool get_NoRestore();
    [CompilerGeneratedAttribute]
public void set_NoRestore(bool value);
    [CompilerGeneratedAttribute]
public bool get_NoLogo();
    [CompilerGeneratedAttribute]
public void set_NoLogo(bool value);
    [CompilerGeneratedAttribute]
public ICollection`1<string> get_Sources();
    [CompilerGeneratedAttribute]
public void set_Sources(ICollection`1<string> value);
    [CompilerGeneratedAttribute]
public DotNetMSBuildSettings get_MSBuildSettings();
    [CompilerGeneratedAttribute]
public void set_MSBuildSettings(DotNetMSBuildSettings value);
}
public class Cake.Common.Tools.DotNet.BuildServer.DotNetBuildServer : DotNetTool`1<DotNetBuildServerShutdownSettings> {
    public DotNetBuildServer(IFileSystem fileSystem, ICakeEnvironment environment, IProcessRunner processRunner, IToolLocator tools);
    public void Shutdown(DotNetBuildServerShutdownSettings settings);
    private ProcessArgumentBuilder GetArguments(DotNetBuildServerShutdownSettings settings);
}
public abstract class Cake.Common.Tools.DotNet.BuildServer.DotNetBuildServerSettings : DotNetSettings {
}
public class Cake.Common.Tools.DotNet.BuildServer.DotNetBuildServerShutdownSettings : DotNetBuildServerSettings {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <MSBuild>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Razor>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <VBCSCompiler>k__BackingField;
    public Nullable`1<bool> MSBuild { get; public set; }
    public Nullable`1<bool> Razor { get; public set; }
    public Nullable`1<bool> VBCSCompiler { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_MSBuild();
    [CompilerGeneratedAttribute]
public void set_MSBuild(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Razor();
    [CompilerGeneratedAttribute]
public void set_Razor(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_VBCSCompiler();
    [CompilerGeneratedAttribute]
public void set_VBCSCompiler(Nullable`1<bool> value);
}
public class Cake.Common.Tools.DotNet.Clean.DotNetCleaner : DotNetTool`1<DotNetCleanSettings> {
    private ICakeEnvironment _environment;
    public DotNetCleaner(IFileSystem fileSystem, ICakeEnvironment environment, IProcessRunner processRunner, IToolLocator tools);
    public void Clean(string project, DotNetCleanSettings settings);
    private ProcessArgumentBuilder GetArguments(string project, DotNetCleanSettings settings);
}
public class Cake.Common.Tools.DotNet.Clean.DotNetCleanSettings : DotNetSettings {
    [CompilerGeneratedAttribute]
private DirectoryPath <OutputDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Configuration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Framework>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Runtime>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoLogo>k__BackingField;
    [CompilerGeneratedAttribute]
private DotNetMSBuildSettings <MSBuildSettings>k__BackingField;
    public DirectoryPath OutputDirectory { get; public set; }
    public string Configuration { get; public set; }
    public string Framework { get; public set; }
    public string Runtime { get; public set; }
    public bool NoLogo { get; public set; }
    public DotNetMSBuildSettings MSBuildSettings { get; public set; }
    [CompilerGeneratedAttribute]
public DirectoryPath get_OutputDirectory();
    [CompilerGeneratedAttribute]
public void set_OutputDirectory(DirectoryPath value);
    [CompilerGeneratedAttribute]
public string get_Configuration();
    [CompilerGeneratedAttribute]
public void set_Configuration(string value);
    [CompilerGeneratedAttribute]
public string get_Framework();
    [CompilerGeneratedAttribute]
public void set_Framework(string value);
    [CompilerGeneratedAttribute]
public string get_Runtime();
    [CompilerGeneratedAttribute]
public void set_Runtime(string value);
    [CompilerGeneratedAttribute]
public bool get_NoLogo();
    [CompilerGeneratedAttribute]
public void set_NoLogo(bool value);
    [CompilerGeneratedAttribute]
public DotNetMSBuildSettings get_MSBuildSettings();
    [CompilerGeneratedAttribute]
public void set_MSBuildSettings(DotNetMSBuildSettings value);
}
[ExtensionAttribute]
[CakeAliasCategoryAttribute("DotNet")]
public static class Cake.Common.Tools.DotNet.DotNetAliases : object {
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Execute")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.DotNet.Execute")]
public static void DotNetExecute(ICakeContext context, FilePath assemblyPath);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Execute")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.DotNet.Execute")]
public static void DotNetExecute(ICakeContext context, FilePath assemblyPath, ProcessArgumentBuilder arguments);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Execute")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.DotNet.Execute")]
public static void DotNetExecute(ICakeContext context, FilePath assemblyPath, ProcessArgumentBuilder arguments, DotNetExecuteSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Restore")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.DotNet.Restore")]
public static void DotNetRestore(ICakeContext context);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Restore")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.DotNet.Restore")]
public static void DotNetRestore(ICakeContext context, string root);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Restore")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.DotNet.Restore")]
public static void DotNetRestore(ICakeContext context, DotNetRestoreSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Restore")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.DotNet.Restore")]
public static void DotNetRestore(ICakeContext context, string root, DotNetRestoreSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Build")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.DotNet.Build")]
public static void DotNetBuild(ICakeContext context, string project);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Build")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.DotNet.Build")]
public static void DotNetBuild(ICakeContext context, string project, DotNetBuildSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Publish")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.DotNet.Publish")]
public static void DotNetPublish(ICakeContext context, string project);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Publish")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.DotNet.Publish")]
public static void DotNetPublish(ICakeContext context, string project, DotNetPublishSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Test")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.DotNet.Test")]
public static void DotNetTest(ICakeContext context);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Test")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.DotNet.Test")]
public static void DotNetTest(ICakeContext context, string project);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Test")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.DotNet.Test")]
public static void DotNetTest(ICakeContext context, string project, DotNetTestSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Test")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.DotNet.Test")]
public static void DotNetTest(ICakeContext context, string project, ProcessArgumentBuilder arguments, DotNetTestSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Clean")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.DotNet.Clean")]
public static void DotNetClean(ICakeContext context, string project);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Clean")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.DotNet.Clean")]
public static void DotNetClean(ICakeContext context, string project, DotNetCleanSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("NuGet")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.DotNet.NuGet.Delete")]
public static void DotNetNuGetDelete(ICakeContext context);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("NuGet")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.DotNet.NuGet.Delete")]
public static void DotNetNuGetDelete(ICakeContext context, string packageName);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("NuGet")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.DotNet.NuGet.Delete")]
public static void DotNetNuGetDelete(ICakeContext context, string packageName, string packageVersion);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("NuGet")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.DotNet.NuGet.Delete")]
public static void DotNetNuGetDelete(ICakeContext context, string packageName, DotNetNuGetDeleteSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("NuGet")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.DotNet.NuGet.Delete")]
public static void DotNetNuGetDelete(ICakeContext context, DotNetNuGetDeleteSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("NuGet")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.DotNet.NuGet.Delete")]
public static void DotNetNuGetDelete(ICakeContext context, string packageName, string packageVersion, DotNetNuGetDeleteSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("NuGet")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.DotNet.NuGet.Push")]
public static void DotNetNuGetPush(ICakeContext context, FilePath packageFilePath);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("NuGet")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.DotNet.NuGet.Push")]
public static void DotNetNuGetPush(ICakeContext context, FilePath packageFilePath, DotNetNuGetPushSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("NuGet")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.DotNet.NuGet.Source")]
public static void DotNetNuGetAddSource(ICakeContext context, string name, DotNetNuGetSourceSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("NuGet")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.DotNet.NuGet.Source")]
public static void DotNetNuGetDisableSource(ICakeContext context, string name);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("NuGet")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.DotNet.NuGet.Source")]
public static void DotNetNuGetDisableSource(ICakeContext context, string name, DotNetNuGetSourceSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("NuGet")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.DotNet.NuGet.Source")]
public static void DotNetNuGetEnableSource(ICakeContext context, string name);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("NuGet")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.DotNet.NuGet.Source")]
public static void DotNetNuGetEnableSource(ICakeContext context, string name, DotNetNuGetSourceSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("NuGet")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.DotNet.NuGet.Source")]
public static bool DotNetNuGetHasSource(ICakeContext context, string name);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("NuGet")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.DotNet.NuGet.Source")]
public static bool DotNetNuGetHasSource(ICakeContext context, string name, DotNetNuGetSourceSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("NuGet")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.DotNet.NuGet.Source")]
public static void DotNetNuGetRemoveSource(ICakeContext context, string name);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("NuGet")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.DotNet.NuGet.Source")]
public static void DotNetNuGetRemoveSource(ICakeContext context, string name, DotNetNuGetSourceSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("NuGet")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.DotNet.NuGet.Source")]
public static void DotNetNuGetUpdateSource(ICakeContext context, string name, DotNetNuGetSourceSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Pack")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.DotNet.Pack")]
public static void DotNetPack(ICakeContext context, string project);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Pack")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.DotNet.Pack")]
public static void DotNetPack(ICakeContext context, string project, DotNetPackSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Run")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.DotNet.Run")]
public static void DotNetRun(ICakeContext context);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Run")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.DotNet.Run")]
public static void DotNetRun(ICakeContext context, string project);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Run")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.DotNet.Run")]
public static void DotNetRun(ICakeContext context, string project, ProcessArgumentBuilder arguments);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Run")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.DotNet.Run")]
public static void DotNetRun(ICakeContext context, string project, ProcessArgumentBuilder arguments, DotNetRunSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Run")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.DotNet.Run")]
public static void DotNetRun(ICakeContext context, string project, DotNetRunSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("MSBuild")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.DotNet.MSBuild")]
public static void DotNetMSBuild(ICakeContext context);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("MSBuild")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.DotNet.MSBuild")]
public static void DotNetMSBuild(ICakeContext context, string projectOrDirectory);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("MSBuild")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.DotNet.MSBuild")]
public static void DotNetMSBuild(ICakeContext context, DotNetMSBuildSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("MSBuild")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.DotNet.MSBuild")]
public static void DotNetMSBuild(ICakeContext context, string projectOrDirectory, DotNetMSBuildSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Test")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.DotNet.VSTest")]
public static void DotNetVSTest(ICakeContext context, GlobPattern testFile);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Test")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.DotNet.VSTest")]
public static void DotNetVSTest(ICakeContext context, GlobPattern testFile, DotNetVSTestSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Test")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.DotNet.VSTest")]
public static void DotNetVSTest(ICakeContext context, IEnumerable`1<FilePath> testFiles, DotNetVSTestSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Tool")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.DotNet.Tool")]
public static void DotNetTool(ICakeContext context, string command);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Tool")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.DotNet.Tool")]
public static void DotNetTool(ICakeContext context, string command, DotNetToolSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Tool")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.DotNet.Tool")]
public static void DotNetTool(ICakeContext context, FilePath projectPath, string command);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Tool")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.DotNet.Tool")]
public static void DotNetTool(ICakeContext context, FilePath projectPath, string command, ProcessArgumentBuilder arguments);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Tool")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.DotNet.Tool")]
public static void DotNetTool(ICakeContext context, FilePath projectPath, string command, ProcessArgumentBuilder arguments, DotNetToolSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Build Server")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.DotNet.BuildServer")]
public static void DotNetBuildServerShutdown(ICakeContext context);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Build Server")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.DotNet.BuildServer")]
public static void DotNetBuildServerShutdown(ICakeContext context, DotNetBuildServerShutdownSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Format")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.DotNet.Format")]
public static void DotNetFormat(ICakeContext context, string root);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Format")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.DotNet.Format")]
public static void DotNetFormat(ICakeContext context, string root, DotNetFormatSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Format")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.DotNet.Format")]
public static void DotNetFormatWhitespace(ICakeContext context, string root);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Format")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.DotNet.Format")]
public static void DotNetFormatWhitespace(ICakeContext context, string root, DotNetFormatSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Format")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.DotNet.Format")]
public static void DotNetFormatStyle(ICakeContext context, string root);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Format")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.DotNet.Format")]
public static void DotNetFormatStyle(ICakeContext context, string root, DotNetFormatSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Format")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.DotNet.Format")]
public static void DotNetFormatAnalyzers(ICakeContext context, string project);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Format")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.DotNet.Format")]
public static void DotNetFormatAnalyzers(ICakeContext context, string root, DotNetFormatSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("SDK")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.DotNet.SDKCheck")]
public static void DotNetSDKCheck(ICakeContext context);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Workload")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.DotNet.Workload.Search")]
public static IEnumerable`1<DotNetWorkload> DotNetWorkloadSearch(ICakeContext context);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Workload")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.DotNet.Workload.Search")]
public static IEnumerable`1<DotNetWorkload> DotNetWorkloadSearch(ICakeContext context, string searchString);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Workload")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.DotNet.Workload.Search")]
public static IEnumerable`1<DotNetWorkload> DotNetWorkloadSearch(ICakeContext context, string searchString, DotNetWorkloadSearchSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Workload")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.DotNet.Workload.Uninstall")]
public static void DotNetWorkloadUninstall(ICakeContext context, string workloadId);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Workload")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.DotNet.Workload.Uninstall")]
public static void DotNetWorkloadUninstall(ICakeContext context, IEnumerable`1<string> workloadIds);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Workload")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.DotNet.Workload.Install")]
public static void DotNetWorkloadInstall(ICakeContext context, string workloadId);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Workload")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.DotNet.Workload.Install")]
public static void DotNetWorkloadInstall(ICakeContext context, string workloadId, DotNetWorkloadInstallSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Workload")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.DotNet.Workload.Install")]
public static void DotNetWorkloadInstall(ICakeContext context, IEnumerable`1<string> workloadIds);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Workload")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.DotNet.Workload.Install")]
public static void DotNetWorkloadInstall(ICakeContext context, IEnumerable`1<string> workloadIds, DotNetWorkloadInstallSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Workload")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.DotNet.Workload.List")]
public static IEnumerable`1<DotNetWorkloadListItem> DotNetWorkloadList(ICakeContext context);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Workload")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.DotNet.Workload.List")]
public static IEnumerable`1<DotNetWorkloadListItem> DotNetWorkloadList(ICakeContext context, DotNetWorkloadListSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Workload")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.DotNet.Workload.Repair")]
public static void DotNetWorkloadRepair(ICakeContext context);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Workload")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.DotNet.Workload.Repair")]
public static void DotNetWorkloadRepair(ICakeContext context, DotNetWorkloadRepairSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Workload")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.DotNet.Workload.Update")]
public static void DotNetWorkloadUpdate(ICakeContext context);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Workload")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.DotNet.Workload.Update")]
public static void DotNetWorkloadUpdate(ICakeContext context, DotNetWorkloadUpdateSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Workload")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.DotNet.Workload.Restore")]
public static void DotNetWorkloadRestore(ICakeContext context, string project);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Workload")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.DotNet.Workload.Restore")]
public static void DotNetWorkloadRestore(ICakeContext context, string project, DotNetWorkloadRestoreSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Package")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.DotNet.Package.Add")]
public static void DotNetAddPackage(ICakeContext context, string packageName);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Package")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.DotNet.Package.Add")]
public static void DotNetAddPackage(ICakeContext context, string packageName, string project);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Package")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.DotNet.Package.Add")]
public static void DotNetAddPackage(ICakeContext context, string packageName, DotNetPackageAddSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Package")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.DotNet.Package.Add")]
public static void DotNetAddPackage(ICakeContext context, string packageName, string project, DotNetPackageAddSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Package")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.DotNet.Package.Remove")]
public static void DotNetRemovePackage(ICakeContext context, string packageName);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Package")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.DotNet.Package.Remove")]
public static void DotNetRemovePackage(ICakeContext context, string packageName, string project);
}
public enum Cake.Common.Tools.DotNet.DotNetRollForward : Enum {
    public int value__;
    public static DotNetRollForward Minor;
    public static DotNetRollForward LatestPatch;
    public static DotNetRollForward Major;
    public static DotNetRollForward LatestMinor;
    public static DotNetRollForward LatestMajor;
    public static DotNetRollForward Disable;
}
public abstract class Cake.Common.Tools.DotNet.DotNetSettings : ToolSettings {
    [CompilerGeneratedAttribute]
private Nullable`1<DotNetVerbosity> <Verbosity>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DiagnosticOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DotNetRollForward> <RollForward>k__BackingField;
    public Nullable`1<DotNetVerbosity> Verbosity { get; public set; }
    public bool DiagnosticOutput { get; public set; }
    public Nullable`1<DotNetRollForward> RollForward { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<DotNetVerbosity> get_Verbosity();
    [CompilerGeneratedAttribute]
public void set_Verbosity(Nullable`1<DotNetVerbosity> value);
    [CompilerGeneratedAttribute]
public bool get_DiagnosticOutput();
    [CompilerGeneratedAttribute]
public void set_DiagnosticOutput(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<DotNetRollForward> get_RollForward();
    [CompilerGeneratedAttribute]
public void set_RollForward(Nullable`1<DotNetRollForward> value);
}
public abstract class Cake.Common.Tools.DotNet.DotNetTool`1 : Tool`1<TSettings> {
    protected DotNetTool`1(IFileSystem fileSystem, ICakeEnvironment environment, IProcessRunner processRunner, IToolLocator tools);
    protected virtual string GetToolName();
    protected virtual IEnumerable`1<string> GetToolExecutableNames();
    protected void RunCommand(TSettings settings, ProcessArgumentBuilder arguments);
    protected void RunCommand(TSettings settings, ProcessArgumentBuilder arguments, ProcessSettings processSettings);
    protected void RunCommand(TSettings settings, ProcessArgumentBuilder arguments, ProcessSettings processSettings, Action`1<IProcess> postAction);
    protected ProcessArgumentBuilder CreateArgumentBuilder(TSettings settings);
    private ProcessArgumentBuilder AppendCommonArguments(ProcessArgumentBuilder builder, TSettings settings);
}
public enum Cake.Common.Tools.DotNet.DotNetVerbosity : Enum {
    public int value__;
    public static DotNetVerbosity Quiet;
    public static DotNetVerbosity Minimal;
    public static DotNetVerbosity Normal;
    public static DotNetVerbosity Detailed;
    public static DotNetVerbosity Diagnostic;
}
public class Cake.Common.Tools.DotNet.Execute.DotNetExecuteSettings : DotNetSettings {
    [CompilerGeneratedAttribute]
private string <FrameworkVersion>k__BackingField;
    public string FrameworkVersion { get; public set; }
    [CompilerGeneratedAttribute]
public string get_FrameworkVersion();
    [CompilerGeneratedAttribute]
public void set_FrameworkVersion(string value);
}
public class Cake.Common.Tools.DotNet.Execute.DotNetExecutor : DotNetTool`1<DotNetSettings> {
    private ICakeEnvironment _environment;
    public DotNetExecutor(IFileSystem fileSystem, ICakeEnvironment environment, IProcessRunner processRunner, IToolLocator tools);
    public void Execute(FilePath assemblyPath, ProcessArgumentBuilder arguments, DotNetExecuteSettings settings);
    private ProcessArgumentBuilder GetArguments(FilePath assemblyPath, ProcessArgumentBuilder arguments, DotNetExecuteSettings settings);
}
public class Cake.Common.Tools.DotNet.Format.DotNetFormatSettings : DotNetSettings {
    [CompilerGeneratedAttribute]
private ICollection`1<string> <Diagnostics>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DotNetFormatSeverity> <Severity>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoRestore>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <VerifyNoChanges>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<string> <Include>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<string> <Exclude>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeGenerated>k__BackingField;
    [CompilerGeneratedAttribute]
private FilePath <BinaryLog>k__BackingField;
    [CompilerGeneratedAttribute]
private FilePath <Report>k__BackingField;
    public ICollection`1<string> Diagnostics { get; public set; }
    public Nullable`1<DotNetFormatSeverity> Severity { get; public set; }
    public bool NoRestore { get; public set; }
    public bool VerifyNoChanges { get; public set; }
    public ICollection`1<string> Include { get; public set; }
    public ICollection`1<string> Exclude { get; public set; }
    public bool IncludeGenerated { get; public set; }
    public FilePath BinaryLog { get; public set; }
    public FilePath Report { get; public set; }
    [CompilerGeneratedAttribute]
public ICollection`1<string> get_Diagnostics();
    [CompilerGeneratedAttribute]
public void set_Diagnostics(ICollection`1<string> value);
    [CompilerGeneratedAttribute]
public Nullable`1<DotNetFormatSeverity> get_Severity();
    [CompilerGeneratedAttribute]
public void set_Severity(Nullable`1<DotNetFormatSeverity> value);
    [CompilerGeneratedAttribute]
public bool get_NoRestore();
    [CompilerGeneratedAttribute]
public void set_NoRestore(bool value);
    [CompilerGeneratedAttribute]
public bool get_VerifyNoChanges();
    [CompilerGeneratedAttribute]
public void set_VerifyNoChanges(bool value);
    [CompilerGeneratedAttribute]
public ICollection`1<string> get_Include();
    [CompilerGeneratedAttribute]
public void set_Include(ICollection`1<string> value);
    [CompilerGeneratedAttribute]
public ICollection`1<string> get_Exclude();
    [CompilerGeneratedAttribute]
public void set_Exclude(ICollection`1<string> value);
    [CompilerGeneratedAttribute]
public bool get_IncludeGenerated();
    [CompilerGeneratedAttribute]
public void set_IncludeGenerated(bool value);
    [CompilerGeneratedAttribute]
public FilePath get_BinaryLog();
    [CompilerGeneratedAttribute]
public void set_BinaryLog(FilePath value);
    [CompilerGeneratedAttribute]
public FilePath get_Report();
    [CompilerGeneratedAttribute]
public void set_Report(FilePath value);
}
public enum Cake.Common.Tools.DotNet.Format.DotNetFormatSeverity : Enum {
    public int value__;
    public static DotNetFormatSeverity Info;
    public static DotNetFormatSeverity Warning;
    public static DotNetFormatSeverity Error;
}
public class Cake.Common.Tools.DotNet.Format.DotNetFormatter : DotNetTool`1<DotNetFormatSettings> {
    private ICakeEnvironment _environment;
    public DotNetFormatter(IFileSystem fileSystem, ICakeEnvironment environment, IProcessRunner processRunner, IToolLocator tools);
    public void Format(string root, string subcommand, DotNetFormatSettings settings);
    private ProcessArgumentBuilder GetArguments(string root, string subcommand, DotNetFormatSettings settings);
    private static string GetSeverityValue(DotNetFormatSeverity value);
}
public class Cake.Common.Tools.DotNet.MSBuild.DotNetMSBuildBuilder : DotNetTool`1<DotNetMSBuildSettings> {
    private ICakeEnvironment _environment;
    public DotNetMSBuildBuilder(IFileSystem fileSystem, ICakeEnvironment environment, IProcessRunner processRunner, IToolLocator tools);
    public void Build(string projectOrDirectory, DotNetMSBuildSettings settings);
    private ProcessArgumentBuilder GetArguments(string projectOrDirectory, DotNetMSBuildSettings settings);
}
public class Cake.Common.Tools.DotNet.MSBuild.DotNetMSBuildSettings : DotNetSettings {
    [CompilerGeneratedAttribute]
private bool <DetailedSummary>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<string> <IgnoreProjectExtensions>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxCpuCount>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ExcludeAutoResponseFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoLogo>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <ContinuousIntegrationBuild>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, ICollection`1<string>> <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<string> <Targets>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<MSBuildVersion> <ToolVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ValidateProjectFile>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<FilePath> <ResponseFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DistributedFileLogger>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<MSBuildDistributedLogger> <DistributedLoggers>k__BackingField;
    [CompilerGeneratedAttribute]
private MSBuildLoggerSettings <ConsoleLoggerSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<MSBuildFileLoggerSettings> <FileLoggers>k__BackingField;
    [CompilerGeneratedAttribute]
private MSBuildBinaryLoggerSettings <BinaryLogger>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<MSBuildLogger> <Loggers>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisableConsoleLogger>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <WarningCodesAsError>k__BackingField;
    [CompilerGeneratedAttribute]
private MSBuildTreatAllWarningsAs <TreatAllWarningsAs>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <WarningCodesAsMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <NodeReuse>k__BackingField;
    public bool DetailedSummary { get; public set; }
    public ICollection`1<string> IgnoreProjectExtensions { get; public set; }
    public Nullable`1<int> MaxCpuCount { get; public set; }
    public bool ExcludeAutoResponseFiles { get; public set; }
    public bool NoLogo { get; public set; }
    public string Version { get; public set; }
    public string VersionPrefix { get; public set; }
    public string VersionSuffix { get; public set; }
    public string FileVersion { get; public set; }
    public string AssemblyVersion { get; public set; }
    public string InformationalVersion { get; public set; }
    public string PackageVersion { get; public set; }
    public string PackageReleaseNotes { get; public set; }
    public Nullable`1<bool> ContinuousIntegrationBuild { get; public set; }
    public IDictionary`2<string, ICollection`1<string>> Properties { get; }
    public ICollection`1<string> Targets { get; }
    public Nullable`1<MSBuildVersion> ToolVersion { get; public set; }
    public bool ValidateProjectFile { get; public set; }
    public ICollection`1<FilePath> ResponseFiles { get; }
    public bool DistributedFileLogger { get; public set; }
    public ICollection`1<MSBuildDistributedLogger> DistributedLoggers { get; }
    public MSBuildLoggerSettings ConsoleLoggerSettings { get; public set; }
    public ICollection`1<MSBuildFileLoggerSettings> FileLoggers { get; }
    public MSBuildBinaryLoggerSettings BinaryLogger { get; public set; }
    public ICollection`1<MSBuildLogger> Loggers { get; }
    public bool DisableConsoleLogger { get; public set; }
    public IList`1<string> WarningCodesAsError { get; }
    public MSBuildTreatAllWarningsAs TreatAllWarningsAs { get; public set; }
    public IList`1<string> WarningCodesAsMessage { get; }
    public Nullable`1<bool> NodeReuse { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_DetailedSummary();
    [CompilerGeneratedAttribute]
public void set_DetailedSummary(bool value);
    [CompilerGeneratedAttribute]
public ICollection`1<string> get_IgnoreProjectExtensions();
    [CompilerGeneratedAttribute]
public void set_IgnoreProjectExtensions(ICollection`1<string> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaxCpuCount();
    [CompilerGeneratedAttribute]
public void set_MaxCpuCount(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public bool get_ExcludeAutoResponseFiles();
    [CompilerGeneratedAttribute]
public void set_ExcludeAutoResponseFiles(bool value);
    [CompilerGeneratedAttribute]
public bool get_NoLogo();
    [CompilerGeneratedAttribute]
public void set_NoLogo(bool value);
    public string get_Version();
    public void set_Version(string value);
    public string get_VersionPrefix();
    public void set_VersionPrefix(string value);
    public string get_VersionSuffix();
    public void set_VersionSuffix(string value);
    public string get_FileVersion();
    public void set_FileVersion(string value);
    public string get_AssemblyVersion();
    public void set_AssemblyVersion(string value);
    public string get_InformationalVersion();
    public void set_InformationalVersion(string value);
    public string get_PackageVersion();
    public void set_PackageVersion(string value);
    public string get_PackageReleaseNotes();
    public void set_PackageReleaseNotes(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_ContinuousIntegrationBuild();
    [CompilerGeneratedAttribute]
public void set_ContinuousIntegrationBuild(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, ICollection`1<string>> get_Properties();
    [CompilerGeneratedAttribute]
public ICollection`1<string> get_Targets();
    [CompilerGeneratedAttribute]
public Nullable`1<MSBuildVersion> get_ToolVersion();
    [CompilerGeneratedAttribute]
public void set_ToolVersion(Nullable`1<MSBuildVersion> value);
    [CompilerGeneratedAttribute]
public bool get_ValidateProjectFile();
    [CompilerGeneratedAttribute]
public void set_ValidateProjectFile(bool value);
    [CompilerGeneratedAttribute]
public ICollection`1<FilePath> get_ResponseFiles();
    [CompilerGeneratedAttribute]
public bool get_DistributedFileLogger();
    [CompilerGeneratedAttribute]
public void set_DistributedFileLogger(bool value);
    [CompilerGeneratedAttribute]
public ICollection`1<MSBuildDistributedLogger> get_DistributedLoggers();
    [CompilerGeneratedAttribute]
public MSBuildLoggerSettings get_ConsoleLoggerSettings();
    [CompilerGeneratedAttribute]
public void set_ConsoleLoggerSettings(MSBuildLoggerSettings value);
    [CompilerGeneratedAttribute]
public ICollection`1<MSBuildFileLoggerSettings> get_FileLoggers();
    [CompilerGeneratedAttribute]
public MSBuildBinaryLoggerSettings get_BinaryLogger();
    [CompilerGeneratedAttribute]
public void set_BinaryLogger(MSBuildBinaryLoggerSettings value);
    [CompilerGeneratedAttribute]
public ICollection`1<MSBuildLogger> get_Loggers();
    [CompilerGeneratedAttribute]
public bool get_DisableConsoleLogger();
    [CompilerGeneratedAttribute]
public void set_DisableConsoleLogger(bool value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_WarningCodesAsError();
    [CompilerGeneratedAttribute]
public MSBuildTreatAllWarningsAs get_TreatAllWarningsAs();
    [CompilerGeneratedAttribute]
public void set_TreatAllWarningsAs(MSBuildTreatAllWarningsAs value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_WarningCodesAsMessage();
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_NodeReuse();
    [CompilerGeneratedAttribute]
public void set_NodeReuse(Nullable`1<bool> value);
    private string GetPropertyValueOrDefault(string propertyName, string default);
}
[ExtensionAttribute]
public static class Cake.Common.Tools.DotNet.MSBuild.DotNetMSBuildSettingsExtensions : object {
    [ExtensionAttribute]
public static DotNetMSBuildSettings WithTarget(DotNetMSBuildSettings settings, string target);
    [ExtensionAttribute]
public static DotNetMSBuildSettings WithProperty(DotNetMSBuildSettings settings, string name, String[] values);
    [ExtensionAttribute]
public static DotNetMSBuildSettings ShowDetailedSummary(DotNetMSBuildSettings settings);
    [ExtensionAttribute]
public static DotNetMSBuildSettings WithIgnoredProjectExtension(DotNetMSBuildSettings settings, string extension);
    [ExtensionAttribute]
public static DotNetMSBuildSettings SetMaxCpuCount(DotNetMSBuildSettings settings, Nullable`1<int> maxCpuCount);
    [ExtensionAttribute]
public static DotNetMSBuildSettings ExcludeAutoResponseFiles(DotNetMSBuildSettings settings);
    [ExtensionAttribute]
public static DotNetMSBuildSettings HideLogo(DotNetMSBuildSettings settings);
    [ExtensionAttribute]
public static DotNetMSBuildSettings SetContinuousIntegrationBuild(DotNetMSBuildSettings settings, Nullable`1<bool> continuousIntegrationBuild);
    [ExtensionAttribute]
public static DotNetMSBuildSettings UseToolVersion(DotNetMSBuildSettings settings, MSBuildVersion version);
    [ExtensionAttribute]
public static DotNetMSBuildSettings ValidateProjectFile(DotNetMSBuildSettings settings);
    [ExtensionAttribute]
public static DotNetMSBuildSettings WithResponseFile(DotNetMSBuildSettings settings, FilePath responseFile);
    [ExtensionAttribute]
public static DotNetMSBuildSettings UseDistributedFileLogger(DotNetMSBuildSettings settings);
    [ExtensionAttribute]
public static DotNetMSBuildSettings WithDistributedLogger(DotNetMSBuildSettings settings, MSBuildDistributedLogger logger);
    [ExtensionAttribute]
public static DotNetMSBuildSettings SetConsoleLoggerSettings(DotNetMSBuildSettings settings, MSBuildLoggerSettings consoleLoggerParameters);
    [ExtensionAttribute]
public static DotNetMSBuildSettings AddFileLogger(DotNetMSBuildSettings settings);
    [ExtensionAttribute]
public static DotNetMSBuildSettings AddFileLogger(DotNetMSBuildSettings settings, MSBuildFileLoggerSettings fileLoggerParameters);
    [ExtensionAttribute]
public static DotNetMSBuildSettings EnableBinaryLogger(DotNetMSBuildSettings settings);
    [ExtensionAttribute]
public static DotNetMSBuildSettings EnableBinaryLogger(DotNetMSBuildSettings settings, MSBuildBinaryLoggerImports imports);
    [ExtensionAttribute]
public static DotNetMSBuildSettings EnableBinaryLogger(DotNetMSBuildSettings settings, string fileName);
    [ExtensionAttribute]
public static DotNetMSBuildSettings EnableBinaryLogger(DotNetMSBuildSettings settings, string fileName, MSBuildBinaryLoggerImports imports);
    [ExtensionAttribute]
public static DotNetMSBuildSettings WithLogger(DotNetMSBuildSettings settings, string loggerAssembly, string loggerClass, string loggerParameters);
    [ExtensionAttribute]
public static DotNetMSBuildSettings DisableConsoleLogger(DotNetMSBuildSettings settings);
    [ExtensionAttribute]
public static DotNetMSBuildSettings SetWarningCodeAsError(DotNetMSBuildSettings settings, string warningCode);
    [ExtensionAttribute]
public static DotNetMSBuildSettings SetWarningCodeAsMessage(DotNetMSBuildSettings settings, string warningCode);
    [ExtensionAttribute]
public static DotNetMSBuildSettings TreatAllWarningsAs(DotNetMSBuildSettings settings, MSBuildTreatAllWarningsAs behaviour);
    [ExtensionAttribute]
public static DotNetMSBuildSettings SetNodeReuse(DotNetMSBuildSettings settings, bool reuse);
    [ExtensionAttribute]
public static DotNetMSBuildSettings SetConfiguration(DotNetMSBuildSettings settings, string configuration);
    [ExtensionAttribute]
public static DotNetMSBuildSettings SetVersion(DotNetMSBuildSettings settings, string version);
    [ExtensionAttribute]
public static DotNetMSBuildSettings SetFileVersion(DotNetMSBuildSettings settings, string fileVersion);
    [ExtensionAttribute]
public static DotNetMSBuildSettings SetAssemblyVersion(DotNetMSBuildSettings settings, string assemblyVersion);
    [ExtensionAttribute]
public static DotNetMSBuildSettings SetInformationalVersion(DotNetMSBuildSettings settings, string informationalVersion);
    [ExtensionAttribute]
public static DotNetMSBuildSettings SetPackageVersion(DotNetMSBuildSettings settings, string packageVersion);
    [ExtensionAttribute]
public static DotNetMSBuildSettings SetPackageReleaseNotes(DotNetMSBuildSettings settings, string packageReleaseNotes);
    [ExtensionAttribute]
public static DotNetMSBuildSettings SuppressVersionRecommendedFormatWarning(DotNetMSBuildSettings settings);
    [ExtensionAttribute]
public static DotNetMSBuildSettings SetVersionPrefix(DotNetMSBuildSettings settings, string versionPrefix);
    [ExtensionAttribute]
public static DotNetMSBuildSettings SetVersionSuffix(DotNetMSBuildSettings settings, string versionSuffix);
    [ExtensionAttribute]
public static DotNetMSBuildSettings SetTargetFramework(DotNetMSBuildSettings settings, string targetFramework);
    [ExtensionAttribute]
public static DotNetMSBuildSettings SetRuntime(DotNetMSBuildSettings settings, string runtimeId);
    private static void EnsureSettings(DotNetMSBuildSettings settings);
}
[ExtensionAttribute]
public static class Cake.Common.Tools.DotNet.MSBuild.MSBuildArgumentBuilderExtensions : object {
    [ExtensionAttribute]
public static void AppendMSBuildSettings(ProcessArgumentBuilder builder, DotNetMSBuildSettings settings, ICakeEnvironment environment);
    [ExtensionAttribute]
public static void AppendMSBuildSettings(ProcessArgumentBuilder builder, DotNetMSBuildSettings settings, ICakeEnvironment environment, bool invokeArgumentCustomization);
    private static string GetLoggerValue(MSBuildLogger logger);
    private static string GetLoggerArgument(int index, MSBuildFileLoggerSettings logger, ICakeEnvironment environment);
    private static string GetToolVersionValue(MSBuildVersion toolVersion);
    private static string GetLoggerSettings(MSBuildFileLoggerSettings loggerSettings, ICakeEnvironment environment);
    private static string GetLoggerSettings(MSBuildLoggerSettings loggerSettings);
    private static string GetWarningCodes(bool shouldApplyToAllWarnings, IList`1<string> warningCodes);
    [ExtensionAttribute]
private static void AppendMSBuildSwitch(ProcessArgumentBuilder builder, string switch);
    [ExtensionAttribute]
private static void AppendMSBuildSwitch(ProcessArgumentBuilder builder, string switch, string value);
    [ExtensionAttribute]
private static void AppendMSBuildSwitchQuoted(ProcessArgumentBuilder builder, string switch, string value);
    [ExtensionAttribute]
private static void AppendMSBuildSwitchWithOptionalValueIfNotEmpty(ProcessArgumentBuilder builder, string switch, string value);
    [ExtensionAttribute]
private static void AppendMSBuildSwitchWithOptionalValue(ProcessArgumentBuilder builder, string switch, T value, Func`2<T, bool> predicate);
}
public enum Cake.Common.Tools.DotNet.MSBuild.MSBuildBinaryLoggerImports : Enum {
    public int value__;
    public static MSBuildBinaryLoggerImports Unspecified;
    public static MSBuildBinaryLoggerImports None;
    public static MSBuildBinaryLoggerImports Embed;
    public static MSBuildBinaryLoggerImports ZipFile;
}
public class Cake.Common.Tools.DotNet.MSBuild.MSBuildBinaryLoggerSettings : object {
    [CompilerGeneratedAttribute]
private bool <Enabled>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    [CompilerGeneratedAttribute]
private MSBuildBinaryLoggerImports <Imports>k__BackingField;
    public bool Enabled { get; public set; }
    public string FileName { get; public set; }
    public MSBuildBinaryLoggerImports Imports { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Enabled();
    [CompilerGeneratedAttribute]
public void set_Enabled(bool value);
    [CompilerGeneratedAttribute]
public string get_FileName();
    [CompilerGeneratedAttribute]
public void set_FileName(string value);
    [CompilerGeneratedAttribute]
public MSBuildBinaryLoggerImports get_Imports();
    [CompilerGeneratedAttribute]
public void set_Imports(MSBuildBinaryLoggerImports value);
}
public enum Cake.Common.Tools.DotNet.MSBuild.MSBuildConsoleColorType : Enum {
    public int value__;
    public static MSBuildConsoleColorType Normal;
    public static MSBuildConsoleColorType Disabled;
    public static MSBuildConsoleColorType ForceAnsi;
}
public class Cake.Common.Tools.DotNet.MSBuild.MSBuildDistributedLogger : object {
    [CompilerGeneratedAttribute]
private MSBuildLogger <CentralLogger>k__BackingField;
    [CompilerGeneratedAttribute]
private MSBuildLogger <ForwardingLogger>k__BackingField;
    public MSBuildLogger CentralLogger { get; public set; }
    public MSBuildLogger ForwardingLogger { get; public set; }
    [CompilerGeneratedAttribute]
public MSBuildLogger get_CentralLogger();
    [CompilerGeneratedAttribute]
public void set_CentralLogger(MSBuildLogger value);
    [CompilerGeneratedAttribute]
public MSBuildLogger get_ForwardingLogger();
    [CompilerGeneratedAttribute]
public void set_ForwardingLogger(MSBuildLogger value);
}
public class Cake.Common.Tools.DotNet.MSBuild.MSBuildFileLoggerSettings : MSBuildLoggerSettings {
    [CompilerGeneratedAttribute]
private string <LogFile>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AppendToLogFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FileEncoding>k__BackingField;
    public string LogFile { get; public set; }
    public bool AppendToLogFile { get; public set; }
    public string FileEncoding { get; public set; }
    [CompilerGeneratedAttribute]
public string get_LogFile();
    [CompilerGeneratedAttribute]
public void set_LogFile(string value);
    [CompilerGeneratedAttribute]
public bool get_AppendToLogFile();
    [CompilerGeneratedAttribute]
public void set_AppendToLogFile(bool value);
    [CompilerGeneratedAttribute]
public string get_FileEncoding();
    [CompilerGeneratedAttribute]
public void set_FileEncoding(string value);
}
public enum Cake.Common.Tools.DotNet.MSBuild.MSBuildLoggerOutputLevel : Enum {
    public int value__;
    public static MSBuildLoggerOutputLevel Default;
    public static MSBuildLoggerOutputLevel WarningsOnly;
    public static MSBuildLoggerOutputLevel ErrorsOnly;
}
public class Cake.Common.Tools.DotNet.MSBuild.MSBuildLoggerSettings : object {
    [CompilerGeneratedAttribute]
private bool <PerformanceSummary>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoSummary>k__BackingField;
    [CompilerGeneratedAttribute]
private MSBuildLoggerOutputLevel <SummaryOutputLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HideItemAndPropertyList>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowCommandLine>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowTimestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowEventId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ForceNoAlign>k__BackingField;
    [CompilerGeneratedAttribute]
private MSBuildConsoleColorType <ConsoleColorType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisableMultiprocessorLogging>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DotNetVerbosity> <Verbosity>k__BackingField;
    public bool PerformanceSummary { get; public set; }
    public bool NoSummary { get; public set; }
    public MSBuildLoggerOutputLevel SummaryOutputLevel { get; public set; }
    public bool HideItemAndPropertyList { get; public set; }
    public bool ShowCommandLine { get; public set; }
    public bool ShowTimestamp { get; public set; }
    public bool ShowEventId { get; public set; }
    public bool ForceNoAlign { get; public set; }
    public MSBuildConsoleColorType ConsoleColorType { get; public set; }
    public bool DisableMultiprocessorLogging { get; public set; }
    public Nullable`1<DotNetVerbosity> Verbosity { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_PerformanceSummary();
    [CompilerGeneratedAttribute]
public void set_PerformanceSummary(bool value);
    [CompilerGeneratedAttribute]
public bool get_NoSummary();
    [CompilerGeneratedAttribute]
public void set_NoSummary(bool value);
    [CompilerGeneratedAttribute]
public MSBuildLoggerOutputLevel get_SummaryOutputLevel();
    [CompilerGeneratedAttribute]
public void set_SummaryOutputLevel(MSBuildLoggerOutputLevel value);
    [CompilerGeneratedAttribute]
public bool get_HideItemAndPropertyList();
    [CompilerGeneratedAttribute]
public void set_HideItemAndPropertyList(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShowCommandLine();
    [CompilerGeneratedAttribute]
public void set_ShowCommandLine(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShowTimestamp();
    [CompilerGeneratedAttribute]
public void set_ShowTimestamp(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShowEventId();
    [CompilerGeneratedAttribute]
public void set_ShowEventId(bool value);
    [CompilerGeneratedAttribute]
public bool get_ForceNoAlign();
    [CompilerGeneratedAttribute]
public void set_ForceNoAlign(bool value);
    [CompilerGeneratedAttribute]
public MSBuildConsoleColorType get_ConsoleColorType();
    [CompilerGeneratedAttribute]
public void set_ConsoleColorType(MSBuildConsoleColorType value);
    [CompilerGeneratedAttribute]
public bool get_DisableMultiprocessorLogging();
    [CompilerGeneratedAttribute]
public void set_DisableMultiprocessorLogging(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<DotNetVerbosity> get_Verbosity();
    [CompilerGeneratedAttribute]
public void set_Verbosity(Nullable`1<DotNetVerbosity> value);
}
public enum Cake.Common.Tools.DotNet.MSBuild.MSBuildTreatAllWarningsAs : Enum {
    public int value__;
    public static MSBuildTreatAllWarningsAs Default;
    public static MSBuildTreatAllWarningsAs Message;
    public static MSBuildTreatAllWarningsAs Error;
}
public class Cake.Common.Tools.DotNet.NuGet.Delete.DotNetNuGetDeleter : DotNetTool`1<DotNetNuGetDeleteSettings> {
    public DotNetNuGetDeleter(IFileSystem fileSystem, ICakeEnvironment environment, IProcessRunner processRunner, IToolLocator tools);
    public void Delete(string packageName, string version, DotNetNuGetDeleteSettings settings);
    private ProcessArgumentBuilder GetArguments(string packageName, string packageVersion, DotNetNuGetDeleteSettings settings);
}
public class Cake.Common.Tools.DotNet.NuGet.Delete.DotNetNuGetDeleteSettings : DotNetSettings {
    [CompilerGeneratedAttribute]
private string <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoServiceEndpoint>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Interactive>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NonInteractive>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ApiKey>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ForceEnglishOutput>k__BackingField;
    public string Source { get; public set; }
    public bool NoServiceEndpoint { get; public set; }
    public bool Interactive { get; public set; }
    public bool NonInteractive { get; public set; }
    public string ApiKey { get; public set; }
    public bool ForceEnglishOutput { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Source();
    [CompilerGeneratedAttribute]
public void set_Source(string value);
    [CompilerGeneratedAttribute]
public bool get_NoServiceEndpoint();
    [CompilerGeneratedAttribute]
public void set_NoServiceEndpoint(bool value);
    [CompilerGeneratedAttribute]
public bool get_Interactive();
    [CompilerGeneratedAttribute]
public void set_Interactive(bool value);
    [CompilerGeneratedAttribute]
public bool get_NonInteractive();
    [CompilerGeneratedAttribute]
public void set_NonInteractive(bool value);
    [CompilerGeneratedAttribute]
public string get_ApiKey();
    [CompilerGeneratedAttribute]
public void set_ApiKey(string value);
    [CompilerGeneratedAttribute]
public bool get_ForceEnglishOutput();
    [CompilerGeneratedAttribute]
public void set_ForceEnglishOutput(bool value);
}
public class Cake.Common.Tools.DotNet.NuGet.Push.DotNetNuGetPusher : DotNetTool`1<DotNetNuGetPushSettings> {
    public DotNetNuGetPusher(IFileSystem fileSystem, ICakeEnvironment environment, IProcessRunner processRunner, IToolLocator tools);
    public void Push(string packageName, DotNetNuGetPushSettings settings);
    private ProcessArgumentBuilder GetArguments(string packageName, DotNetNuGetPushSettings settings);
}
public class Cake.Common.Tools.DotNet.NuGet.Push.DotNetNuGetPushSettings : DotNetSettings {
    [CompilerGeneratedAttribute]
private string <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SymbolSource>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoServiceEndpoint>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Interactive>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Timeout>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ApiKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SymbolApiKey>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisableBuffering>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreSymbols>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SkipDuplicate>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ForceEnglishOutput>k__BackingField;
    public string Source { get; public set; }
    public string SymbolSource { get; public set; }
    public bool NoServiceEndpoint { get; public set; }
    public bool Interactive { get; public set; }
    public Nullable`1<int> Timeout { get; public set; }
    public string ApiKey { get; public set; }
    public string SymbolApiKey { get; public set; }
    public bool DisableBuffering { get; public set; }
    public bool IgnoreSymbols { get; public set; }
    public bool SkipDuplicate { get; public set; }
    public bool ForceEnglishOutput { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Source();
    [CompilerGeneratedAttribute]
public void set_Source(string value);
    [CompilerGeneratedAttribute]
public string get_SymbolSource();
    [CompilerGeneratedAttribute]
public void set_SymbolSource(string value);
    [CompilerGeneratedAttribute]
public bool get_NoServiceEndpoint();
    [CompilerGeneratedAttribute]
public void set_NoServiceEndpoint(bool value);
    [CompilerGeneratedAttribute]
public bool get_Interactive();
    [CompilerGeneratedAttribute]
public void set_Interactive(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_ApiKey();
    [CompilerGeneratedAttribute]
public void set_ApiKey(string value);
    [CompilerGeneratedAttribute]
public string get_SymbolApiKey();
    [CompilerGeneratedAttribute]
public void set_SymbolApiKey(string value);
    [CompilerGeneratedAttribute]
public bool get_DisableBuffering();
    [CompilerGeneratedAttribute]
public void set_DisableBuffering(bool value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreSymbols();
    [CompilerGeneratedAttribute]
public void set_IgnoreSymbols(bool value);
    [CompilerGeneratedAttribute]
public bool get_SkipDuplicate();
    [CompilerGeneratedAttribute]
public void set_SkipDuplicate(bool value);
    [CompilerGeneratedAttribute]
public bool get_ForceEnglishOutput();
    [CompilerGeneratedAttribute]
public void set_ForceEnglishOutput(bool value);
}
public class Cake.Common.Tools.DotNet.NuGet.Source.DotNetNuGetAddSourceSettings : DotNetNuGetSourceSettings {
}
public class Cake.Common.Tools.DotNet.NuGet.Source.DotNetNuGetDisableSourceSettings : DotNetNuGetSourceSettings {
}
public class Cake.Common.Tools.DotNet.NuGet.Source.DotNetNuGetEnableSourceSettings : DotNetNuGetSourceSettings {
}
public class Cake.Common.Tools.DotNet.NuGet.Source.DotNetNuGetHasSourceSettings : DotNetNuGetSourceSettings {
}
public class Cake.Common.Tools.DotNet.NuGet.Source.DotNetNuGetListSourceSettings : DotNetNuGetSourceSettings {
}
public class Cake.Common.Tools.DotNet.NuGet.Source.DotNetNuGetRemoveSourceSettings : DotNetNuGetSourceSettings {
}
public class Cake.Common.Tools.DotNet.NuGet.Source.DotNetNuGetSourcer : DotNetTool`1<DotNetNuGetSourceSettings> {
    private ICakeEnvironment _environment;
    public DotNetNuGetSourcer(IFileSystem fileSystem, ICakeEnvironment environment, IProcessRunner processRunner, IToolLocator tools);
    public void AddSource(string name, DotNetNuGetSourceSettings settings);
    public void DisableSource(string name, DotNetNuGetSourceSettings settings);
    public void EnableSource(string name, DotNetNuGetSourceSettings settings);
    public bool HasSource(string name, DotNetNuGetSourceSettings settings);
    public string ListSource(string format, DotNetNuGetSourceSettings settings);
    public void RemoveSource(string name, DotNetNuGetSourceSettings settings);
    public void UpdateSource(string name, DotNetNuGetSourceSettings settings);
    private ProcessArgumentBuilder GetAddSourceArguments(string name, DotNetNuGetSourceSettings settings);
    private ProcessArgumentBuilder GetDisableSourceArguments(string name, DotNetNuGetSourceSettings settings);
    private ProcessArgumentBuilder GetEnableSourceArguments(string name, DotNetNuGetSourceSettings settings);
    private ProcessArgumentBuilder GetListSourceArguments(string format, DotNetNuGetSourceSettings settings);
    private ProcessArgumentBuilder GetRemoveSourceArguments(string name, DotNetNuGetSourceSettings settings);
    private ProcessArgumentBuilder GetUpdateSourceArguments(string name, DotNetNuGetSourceSettings settings);
    private void AddCommonArguments(DotNetNuGetSourceSettings settings, ProcessArgumentBuilder builder);
}
public class Cake.Common.Tools.DotNet.NuGet.Source.DotNetNuGetSourceSettings : DotNetSettings {
    [CompilerGeneratedAttribute]
private string <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSensitiveSource>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Password>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <StorePasswordInClearText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ValidAuthenticationTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private FilePath <ConfigFile>k__BackingField;
    public string Source { get; public set; }
    public bool IsSensitiveSource { get; public set; }
    public string UserName { get; public set; }
    public string Password { get; public set; }
    public bool StorePasswordInClearText { get; public set; }
    public string ValidAuthenticationTypes { get; public set; }
    public FilePath ConfigFile { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Source();
    [CompilerGeneratedAttribute]
public void set_Source(string value);
    [CompilerGeneratedAttribute]
public bool get_IsSensitiveSource();
    [CompilerGeneratedAttribute]
public void set_IsSensitiveSource(bool value);
    [CompilerGeneratedAttribute]
public string get_UserName();
    [CompilerGeneratedAttribute]
public void set_UserName(string value);
    [CompilerGeneratedAttribute]
public string get_Password();
    [CompilerGeneratedAttribute]
public void set_Password(string value);
    [CompilerGeneratedAttribute]
public bool get_StorePasswordInClearText();
    [CompilerGeneratedAttribute]
public void set_StorePasswordInClearText(bool value);
    [CompilerGeneratedAttribute]
public string get_ValidAuthenticationTypes();
    [CompilerGeneratedAttribute]
public void set_ValidAuthenticationTypes(string value);
    [CompilerGeneratedAttribute]
public FilePath get_ConfigFile();
    [CompilerGeneratedAttribute]
public void set_ConfigFile(FilePath value);
}
public class Cake.Common.Tools.DotNet.NuGet.Source.DotNetNuGetUpdateSourceSettings : DotNetNuGetSourceSettings {
}
public class Cake.Common.Tools.DotNet.Pack.DotNetPacker : DotNetTool`1<DotNetPackSettings> {
    private ICakeEnvironment _environment;
    public DotNetPacker(IFileSystem fileSystem, ICakeEnvironment environment, IProcessRunner processRunner, IToolLocator tools);
    public void Pack(string project, DotNetPackSettings settings);
    private ProcessArgumentBuilder GetArguments(string project, DotNetPackSettings settings);
}
public class Cake.Common.Tools.DotNet.Pack.DotNetPackSettings : DotNetSettings {
    [CompilerGeneratedAttribute]
private DirectoryPath <OutputDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Configuration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VersionSuffix>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoBuild>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoDependencies>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoRestore>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoLogo>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeSymbols>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SymbolPackageFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeSource>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Serviceable>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Runtime>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<string> <Sources>k__BackingField;
    [CompilerGeneratedAttribute]
private DotNetMSBuildSettings <MSBuildSettings>k__BackingField;
    public DirectoryPath OutputDirectory { get; public set; }
    public string Configuration { get; public set; }
    public string VersionSuffix { get; public set; }
    public bool NoBuild { get; public set; }
    public bool NoDependencies { get; public set; }
    public bool NoRestore { get; public set; }
    public bool NoLogo { get; public set; }
    public bool IncludeSymbols { get; public set; }
    public string SymbolPackageFormat { get; public set; }
    public bool IncludeSource { get; public set; }
    public bool Serviceable { get; public set; }
    public string Runtime { get; public set; }
    public ICollection`1<string> Sources { get; public set; }
    public DotNetMSBuildSettings MSBuildSettings { get; public set; }
    [CompilerGeneratedAttribute]
public DirectoryPath get_OutputDirectory();
    [CompilerGeneratedAttribute]
public void set_OutputDirectory(DirectoryPath value);
    [CompilerGeneratedAttribute]
public string get_Configuration();
    [CompilerGeneratedAttribute]
public void set_Configuration(string value);
    [CompilerGeneratedAttribute]
public string get_VersionSuffix();
    [CompilerGeneratedAttribute]
public void set_VersionSuffix(string value);
    [CompilerGeneratedAttribute]
public bool get_NoBuild();
    [CompilerGeneratedAttribute]
public void set_NoBuild(bool value);
    [CompilerGeneratedAttribute]
public bool get_NoDependencies();
    [CompilerGeneratedAttribute]
public void set_NoDependencies(bool value);
    [CompilerGeneratedAttribute]
public bool get_NoRestore();
    [CompilerGeneratedAttribute]
public void set_NoRestore(bool value);
    [CompilerGeneratedAttribute]
public bool get_NoLogo();
    [CompilerGeneratedAttribute]
public void set_NoLogo(bool value);
    [CompilerGeneratedAttribute]
public bool get_IncludeSymbols();
    [CompilerGeneratedAttribute]
public void set_IncludeSymbols(bool value);
    [CompilerGeneratedAttribute]
public string get_SymbolPackageFormat();
    [CompilerGeneratedAttribute]
public void set_SymbolPackageFormat(string value);
    [CompilerGeneratedAttribute]
public bool get_IncludeSource();
    [CompilerGeneratedAttribute]
public void set_IncludeSource(bool value);
    [CompilerGeneratedAttribute]
public bool get_Serviceable();
    [CompilerGeneratedAttribute]
public void set_Serviceable(bool value);
    [CompilerGeneratedAttribute]
public string get_Runtime();
    [CompilerGeneratedAttribute]
public void set_Runtime(string value);
    [CompilerGeneratedAttribute]
public ICollection`1<string> get_Sources();
    [CompilerGeneratedAttribute]
public void set_Sources(ICollection`1<string> value);
    [CompilerGeneratedAttribute]
public DotNetMSBuildSettings get_MSBuildSettings();
    [CompilerGeneratedAttribute]
public void set_MSBuildSettings(DotNetMSBuildSettings value);
}
public class Cake.Common.Tools.DotNet.Package.Add.DotNetPackageAdder : DotNetTool`1<DotNetPackageAddSettings> {
    private ICakeEnvironment _environment;
    public DotNetPackageAdder(IFileSystem fileSystem, ICakeEnvironment environment, IProcessRunner processRunner, IToolLocator tools);
    public void Add(string packageName, string project, DotNetPackageAddSettings settings);
    private ProcessArgumentBuilder GetArguments(string packageName, string project, DotNetPackageAddSettings settings);
}
public class Cake.Common.Tools.DotNet.Package.Add.DotNetPackageAddSettings : DotNetSettings {
    [CompilerGeneratedAttribute]
private string <Framework>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Interactive>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoRestore>k__BackingField;
    [CompilerGeneratedAttribute]
private DirectoryPath <PackageDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Prerelease>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    public string Framework { get; public set; }
    public bool Interactive { get; public set; }
    public bool NoRestore { get; public set; }
    public DirectoryPath PackageDirectory { get; public set; }
    public bool Prerelease { get; public set; }
    public string Source { get; public set; }
    public string Version { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Framework();
    [CompilerGeneratedAttribute]
public void set_Framework(string value);
    [CompilerGeneratedAttribute]
public bool get_Interactive();
    [CompilerGeneratedAttribute]
public void set_Interactive(bool value);
    [CompilerGeneratedAttribute]
public bool get_NoRestore();
    [CompilerGeneratedAttribute]
public void set_NoRestore(bool value);
    [CompilerGeneratedAttribute]
public DirectoryPath get_PackageDirectory();
    [CompilerGeneratedAttribute]
public void set_PackageDirectory(DirectoryPath value);
    [CompilerGeneratedAttribute]
public bool get_Prerelease();
    [CompilerGeneratedAttribute]
public void set_Prerelease(bool value);
    [CompilerGeneratedAttribute]
public string get_Source();
    [CompilerGeneratedAttribute]
public void set_Source(string value);
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(string value);
}
public class Cake.Common.Tools.DotNet.Package.Remove.DotNetPackageRemover : DotNetTool`1<DotNetPackageRemoveSettings> {
    private ICakeEnvironment _environment;
    public DotNetPackageRemover(IFileSystem fileSystem, ICakeEnvironment environment, IProcessRunner processRunner, IToolLocator tools);
    public void Remove(string packageName, string project);
    private ProcessArgumentBuilder GetArguments(string packageName, string project, DotNetPackageRemoveSettings settings);
}
public class Cake.Common.Tools.DotNet.Package.Remove.DotNetPackageRemoveSettings : DotNetSettings {
}
public class Cake.Common.Tools.DotNet.Publish.DotNetPublisher : DotNetTool`1<DotNetPublishSettings> {
    private ICakeEnvironment _environment;
    public DotNetPublisher(IFileSystem fileSystem, ICakeEnvironment environment, IProcessRunner processRunner, IToolLocator tools);
    public void Publish(string path, DotNetPublishSettings settings);
    private ProcessArgumentBuilder GetArguments(string path, DotNetPublishSettings settings);
}
public class Cake.Common.Tools.DotNet.Publish.DotNetPublishSettings : DotNetSettings {
    [CompilerGeneratedAttribute]
private DirectoryPath <OutputDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Runtime>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Framework>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Configuration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VersionSuffix>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoBuild>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoDependencies>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoRestore>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoLogo>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Force>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <SelfContained>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <PublishSingleFile>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <PublishTrimmed>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <TieredCompilationQuickJit>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <TieredCompilation>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <PublishReadyToRun>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <PublishReadyToRunShowWarnings>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IncludeNativeLibrariesForSelfExtract>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IncludeAllContentForSelfExtract>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <EnableCompressionInSingleFile>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<string> <Sources>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OS>k__BackingField;
    [CompilerGeneratedAttribute]
private DotNetMSBuildSettings <MSBuildSettings>k__BackingField;
    public DirectoryPath OutputDirectory { get; public set; }
    public string Runtime { get; public set; }
    public string Framework { get; public set; }
    public string Configuration { get; public set; }
    public string VersionSuffix { get; public set; }
    public bool NoBuild { get; public set; }
    public bool NoDependencies { get; public set; }
    public bool NoRestore { get; public set; }
    public bool NoLogo { get; public set; }
    public bool Force { get; public set; }
    public Nullable`1<bool> SelfContained { get; public set; }
    public Nullable`1<bool> PublishSingleFile { get; public set; }
    public Nullable`1<bool> PublishTrimmed { get; public set; }
    public Nullable`1<bool> TieredCompilationQuickJit { get; public set; }
    public Nullable`1<bool> TieredCompilation { get; public set; }
    public Nullable`1<bool> PublishReadyToRun { get; public set; }
    public Nullable`1<bool> PublishReadyToRunShowWarnings { get; public set; }
    public Nullable`1<bool> IncludeNativeLibrariesForSelfExtract { get; public set; }
    public Nullable`1<bool> IncludeAllContentForSelfExtract { get; public set; }
    public Nullable`1<bool> EnableCompressionInSingleFile { get; public set; }
    public ICollection`1<string> Sources { get; public set; }
    public string OS { get; public set; }
    public DotNetMSBuildSettings MSBuildSettings { get; public set; }
    [CompilerGeneratedAttribute]
public DirectoryPath get_OutputDirectory();
    [CompilerGeneratedAttribute]
public void set_OutputDirectory(DirectoryPath value);
    [CompilerGeneratedAttribute]
public string get_Runtime();
    [CompilerGeneratedAttribute]
public void set_Runtime(string value);
    [CompilerGeneratedAttribute]
public string get_Framework();
    [CompilerGeneratedAttribute]
public void set_Framework(string value);
    [CompilerGeneratedAttribute]
public string get_Configuration();
    [CompilerGeneratedAttribute]
public void set_Configuration(string value);
    [CompilerGeneratedAttribute]
public string get_VersionSuffix();
    [CompilerGeneratedAttribute]
public void set_VersionSuffix(string value);
    [CompilerGeneratedAttribute]
public bool get_NoBuild();
    [CompilerGeneratedAttribute]
public void set_NoBuild(bool value);
    [CompilerGeneratedAttribute]
public bool get_NoDependencies();
    [CompilerGeneratedAttribute]
public void set_NoDependencies(bool value);
    [CompilerGeneratedAttribute]
public bool get_NoRestore();
    [CompilerGeneratedAttribute]
public void set_NoRestore(bool value);
    [CompilerGeneratedAttribute]
public bool get_NoLogo();
    [CompilerGeneratedAttribute]
public void set_NoLogo(bool value);
    [CompilerGeneratedAttribute]
public bool get_Force();
    [CompilerGeneratedAttribute]
public void set_Force(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_SelfContained();
    [CompilerGeneratedAttribute]
public void set_SelfContained(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_PublishSingleFile();
    [CompilerGeneratedAttribute]
public void set_PublishSingleFile(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_PublishTrimmed();
    [CompilerGeneratedAttribute]
public void set_PublishTrimmed(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_TieredCompilationQuickJit();
    [CompilerGeneratedAttribute]
public void set_TieredCompilationQuickJit(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_TieredCompilation();
    [CompilerGeneratedAttribute]
public void set_TieredCompilation(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_PublishReadyToRun();
    [CompilerGeneratedAttribute]
public void set_PublishReadyToRun(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_PublishReadyToRunShowWarnings();
    [CompilerGeneratedAttribute]
public void set_PublishReadyToRunShowWarnings(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IncludeNativeLibrariesForSelfExtract();
    [CompilerGeneratedAttribute]
public void set_IncludeNativeLibrariesForSelfExtract(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IncludeAllContentForSelfExtract();
    [CompilerGeneratedAttribute]
public void set_IncludeAllContentForSelfExtract(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_EnableCompressionInSingleFile();
    [CompilerGeneratedAttribute]
public void set_EnableCompressionInSingleFile(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public ICollection`1<string> get_Sources();
    [CompilerGeneratedAttribute]
public void set_Sources(ICollection`1<string> value);
    [CompilerGeneratedAttribute]
public string get_OS();
    [CompilerGeneratedAttribute]
public void set_OS(string value);
    [CompilerGeneratedAttribute]
public DotNetMSBuildSettings get_MSBuildSettings();
    [CompilerGeneratedAttribute]
public void set_MSBuildSettings(DotNetMSBuildSettings value);
}
public class Cake.Common.Tools.DotNet.Restore.DotNetRestorer : DotNetTool`1<DotNetRestoreSettings> {
    private ICakeEnvironment _environment;
    public DotNetRestorer(IFileSystem fileSystem, ICakeEnvironment environment, IProcessRunner processRunner, IToolLocator tools, ICakeLog log);
    public void Restore(string root, DotNetRestoreSettings settings);
    private ProcessArgumentBuilder GetArguments(string root, DotNetRestoreSettings settings);
}
public class Cake.Common.Tools.DotNet.Restore.DotNetRestoreSettings : DotNetSettings {
    [CompilerGeneratedAttribute]
private ICollection`1<string> <Sources>k__BackingField;
    [CompilerGeneratedAttribute]
private FilePath <ConfigFile>k__BackingField;
    [CompilerGeneratedAttribute]
private DirectoryPath <PackagesDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoCache>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisableParallel>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreFailedSources>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Runtime>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoDependencies>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Force>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Interactive>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseLockFile>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <LockedMode>k__BackingField;
    [CompilerGeneratedAttribute]
private FilePath <LockFilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ForceEvaluate>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <PublishReadyToRun>k__BackingField;
    [CompilerGeneratedAttribute]
private DotNetMSBuildSettings <MSBuildSettings>k__BackingField;
    public ICollection`1<string> Sources { get; public set; }
    public FilePath ConfigFile { get; public set; }
    public DirectoryPath PackagesDirectory { get; public set; }
    public bool NoCache { get; public set; }
    public bool DisableParallel { get; public set; }
    public bool IgnoreFailedSources { get; public set; }
    public string Runtime { get; public set; }
    public bool NoDependencies { get; public set; }
    public bool Force { get; public set; }
    public bool Interactive { get; public set; }
    public bool UseLockFile { get; public set; }
    public bool LockedMode { get; public set; }
    public FilePath LockFilePath { get; public set; }
    public bool ForceEvaluate { get; public set; }
    public Nullable`1<bool> PublishReadyToRun { get; public set; }
    public DotNetMSBuildSettings MSBuildSettings { get; public set; }
    [CompilerGeneratedAttribute]
public ICollection`1<string> get_Sources();
    [CompilerGeneratedAttribute]
public void set_Sources(ICollection`1<string> value);
    [CompilerGeneratedAttribute]
public FilePath get_ConfigFile();
    [CompilerGeneratedAttribute]
public void set_ConfigFile(FilePath value);
    [CompilerGeneratedAttribute]
public DirectoryPath get_PackagesDirectory();
    [CompilerGeneratedAttribute]
public void set_PackagesDirectory(DirectoryPath value);
    [CompilerGeneratedAttribute]
public bool get_NoCache();
    [CompilerGeneratedAttribute]
public void set_NoCache(bool value);
    [CompilerGeneratedAttribute]
public bool get_DisableParallel();
    [CompilerGeneratedAttribute]
public void set_DisableParallel(bool value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreFailedSources();
    [CompilerGeneratedAttribute]
public void set_IgnoreFailedSources(bool value);
    [CompilerGeneratedAttribute]
public string get_Runtime();
    [CompilerGeneratedAttribute]
public void set_Runtime(string value);
    [CompilerGeneratedAttribute]
public bool get_NoDependencies();
    [CompilerGeneratedAttribute]
public void set_NoDependencies(bool value);
    [CompilerGeneratedAttribute]
public bool get_Force();
    [CompilerGeneratedAttribute]
public void set_Force(bool value);
    [CompilerGeneratedAttribute]
public bool get_Interactive();
    [CompilerGeneratedAttribute]
public void set_Interactive(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseLockFile();
    [CompilerGeneratedAttribute]
public void set_UseLockFile(bool value);
    [CompilerGeneratedAttribute]
public bool get_LockedMode();
    [CompilerGeneratedAttribute]
public void set_LockedMode(bool value);
    [CompilerGeneratedAttribute]
public FilePath get_LockFilePath();
    [CompilerGeneratedAttribute]
public void set_LockFilePath(FilePath value);
    [CompilerGeneratedAttribute]
public bool get_ForceEvaluate();
    [CompilerGeneratedAttribute]
public void set_ForceEvaluate(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_PublishReadyToRun();
    [CompilerGeneratedAttribute]
public void set_PublishReadyToRun(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public DotNetMSBuildSettings get_MSBuildSettings();
    [CompilerGeneratedAttribute]
public void set_MSBuildSettings(DotNetMSBuildSettings value);
}
public class Cake.Common.Tools.DotNet.Run.DotNetRunner : DotNetTool`1<DotNetRunSettings> {
    private ICakeEnvironment _environment;
    public DotNetRunner(IFileSystem fileSystem, ICakeEnvironment environment, IProcessRunner processRunner, IToolLocator tools);
    public void Run(string project, ProcessArgumentBuilder arguments, DotNetRunSettings settings);
    private ProcessArgumentBuilder GetArguments(string project, ProcessArgumentBuilder arguments, DotNetRunSettings settings);
}
public class Cake.Common.Tools.DotNet.Run.DotNetRunSettings : DotNetSettings {
    [CompilerGeneratedAttribute]
private string <Framework>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Configuration>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoRestore>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoBuild>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<string> <Sources>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Runtime>k__BackingField;
    [CompilerGeneratedAttribute]
private DotNetMSBuildSettings <MSBuildSettings>k__BackingField;
    public string Framework { get; public set; }
    public string Configuration { get; public set; }
    public bool NoRestore { get; public set; }
    public bool NoBuild { get; public set; }
    public ICollection`1<string> Sources { get; public set; }
    public string Runtime { get; public set; }
    public DotNetMSBuildSettings MSBuildSettings { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Framework();
    [CompilerGeneratedAttribute]
public void set_Framework(string value);
    [CompilerGeneratedAttribute]
public string get_Configuration();
    [CompilerGeneratedAttribute]
public void set_Configuration(string value);
    [CompilerGeneratedAttribute]
public bool get_NoRestore();
    [CompilerGeneratedAttribute]
public void set_NoRestore(bool value);
    [CompilerGeneratedAttribute]
public bool get_NoBuild();
    [CompilerGeneratedAttribute]
public void set_NoBuild(bool value);
    [CompilerGeneratedAttribute]
public ICollection`1<string> get_Sources();
    [CompilerGeneratedAttribute]
public void set_Sources(ICollection`1<string> value);
    [CompilerGeneratedAttribute]
public string get_Runtime();
    [CompilerGeneratedAttribute]
public void set_Runtime(string value);
    [CompilerGeneratedAttribute]
public DotNetMSBuildSettings get_MSBuildSettings();
    [CompilerGeneratedAttribute]
public void set_MSBuildSettings(DotNetMSBuildSettings value);
}
public class Cake.Common.Tools.DotNet.SDKCheck.DotNetSDKChecker : DotNetTool`1<DotNetSDKCheckSettings> {
    public DotNetSDKChecker(IFileSystem fileSystem, ICakeEnvironment environment, IProcessRunner processRunner, IToolLocator tools);
    public void Check();
    private ProcessArgumentBuilder GetArguments(DotNetSDKCheckSettings settings);
}
public class Cake.Common.Tools.DotNet.SDKCheck.DotNetSDKCheckSettings : DotNetSettings {
}
public class Cake.Common.Tools.DotNet.Test.DotNetTester : DotNetTool`1<DotNetTestSettings> {
    private ICakeEnvironment _environment;
    public DotNetTester(IFileSystem fileSystem, ICakeEnvironment environment, IProcessRunner processRunner, IToolLocator tools);
    public void Test(string project, ProcessArgumentBuilder arguments, DotNetTestSettings settings);
    private ProcessArgumentBuilder GetArguments(string project, ProcessArgumentBuilder arguments, DotNetTestSettings settings);
}
public class Cake.Common.Tools.DotNet.Test.DotNetTestSettings : DotNetSettings {
    [CompilerGeneratedAttribute]
private FilePath <Settings>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Filter>k__BackingField;
    [CompilerGeneratedAttribute]
private DirectoryPath <TestAdapterPath>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<string> <Loggers>k__BackingField;
    [CompilerGeneratedAttribute]
private DirectoryPath <OutputDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Configuration>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<string> <Collectors>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Framework>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoBuild>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoRestore>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoLogo>k__BackingField;
    [CompilerGeneratedAttribute]
private FilePath <DiagnosticFile>k__BackingField;
    [CompilerGeneratedAttribute]
private DirectoryPath <ResultsDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private FilePath <VSTestReportPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Runtime>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Blame>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<string> <Sources>k__BackingField;
    [CompilerGeneratedAttribute]
private DotNetMSBuildSettings <MSBuildSettings>k__BackingField;
    public FilePath Settings { get; public set; }
    public string Filter { get; public set; }
    public DirectoryPath TestAdapterPath { get; public set; }
    public ICollection`1<string> Loggers { get; public set; }
    public DirectoryPath OutputDirectory { get; public set; }
    public string Configuration { get; public set; }
    public ICollection`1<string> Collectors { get; public set; }
    public string Framework { get; public set; }
    public bool NoBuild { get; public set; }
    public bool NoRestore { get; public set; }
    public bool NoLogo { get; public set; }
    public FilePath DiagnosticFile { get; public set; }
    public DirectoryPath ResultsDirectory { get; public set; }
    public FilePath VSTestReportPath { get; public set; }
    public string Runtime { get; public set; }
    public bool Blame { get; public set; }
    public ICollection`1<string> Sources { get; public set; }
    public DotNetMSBuildSettings MSBuildSettings { get; public set; }
    [CompilerGeneratedAttribute]
public FilePath get_Settings();
    [CompilerGeneratedAttribute]
public void set_Settings(FilePath value);
    [CompilerGeneratedAttribute]
public string get_Filter();
    [CompilerGeneratedAttribute]
public void set_Filter(string value);
    [CompilerGeneratedAttribute]
public DirectoryPath get_TestAdapterPath();
    [CompilerGeneratedAttribute]
public void set_TestAdapterPath(DirectoryPath value);
    [CompilerGeneratedAttribute]
public ICollection`1<string> get_Loggers();
    [CompilerGeneratedAttribute]
public void set_Loggers(ICollection`1<string> value);
    [CompilerGeneratedAttribute]
public DirectoryPath get_OutputDirectory();
    [CompilerGeneratedAttribute]
public void set_OutputDirectory(DirectoryPath value);
    [CompilerGeneratedAttribute]
public string get_Configuration();
    [CompilerGeneratedAttribute]
public void set_Configuration(string value);
    [CompilerGeneratedAttribute]
public ICollection`1<string> get_Collectors();
    [CompilerGeneratedAttribute]
public void set_Collectors(ICollection`1<string> value);
    [CompilerGeneratedAttribute]
public string get_Framework();
    [CompilerGeneratedAttribute]
public void set_Framework(string value);
    [CompilerGeneratedAttribute]
public bool get_NoBuild();
    [CompilerGeneratedAttribute]
public void set_NoBuild(bool value);
    [CompilerGeneratedAttribute]
public bool get_NoRestore();
    [CompilerGeneratedAttribute]
public void set_NoRestore(bool value);
    [CompilerGeneratedAttribute]
public bool get_NoLogo();
    [CompilerGeneratedAttribute]
public void set_NoLogo(bool value);
    [CompilerGeneratedAttribute]
public FilePath get_DiagnosticFile();
    [CompilerGeneratedAttribute]
public void set_DiagnosticFile(FilePath value);
    [CompilerGeneratedAttribute]
public DirectoryPath get_ResultsDirectory();
    [CompilerGeneratedAttribute]
public void set_ResultsDirectory(DirectoryPath value);
    [CompilerGeneratedAttribute]
public FilePath get_VSTestReportPath();
    [CompilerGeneratedAttribute]
public void set_VSTestReportPath(FilePath value);
    [CompilerGeneratedAttribute]
public string get_Runtime();
    [CompilerGeneratedAttribute]
public void set_Runtime(string value);
    [CompilerGeneratedAttribute]
public bool get_Blame();
    [CompilerGeneratedAttribute]
public void set_Blame(bool value);
    [CompilerGeneratedAttribute]
public ICollection`1<string> get_Sources();
    [CompilerGeneratedAttribute]
public void set_Sources(ICollection`1<string> value);
    [CompilerGeneratedAttribute]
public DotNetMSBuildSettings get_MSBuildSettings();
    [CompilerGeneratedAttribute]
public void set_MSBuildSettings(DotNetMSBuildSettings value);
}
public class Cake.Common.Tools.DotNet.Tool.DotNetToolRunner : DotNetTool`1<DotNetSettings> {
    public DotNetToolRunner(IFileSystem fileSystem, ICakeEnvironment environment, IProcessRunner processRunner, IToolLocator tools);
    public void Execute(FilePath projectPath, string command, ProcessArgumentBuilder arguments, DotNetToolSettings settings);
    private ProcessArgumentBuilder GetArguments(string command, ProcessArgumentBuilder arguments, DotNetToolSettings settings);
}
public class Cake.Common.Tools.DotNet.Tool.DotNetToolSettings : DotNetSettings {
}
public class Cake.Common.Tools.DotNet.VSTest.DotNetVSTester : DotNetTool`1<DotNetVSTestSettings> {
    private ICakeEnvironment _environment;
    public DotNetVSTester(IFileSystem fileSystem, ICakeEnvironment environment, IProcessRunner processRunner, IToolLocator tools);
    public void Test(IEnumerable`1<FilePath> testFiles, DotNetVSTestSettings settings);
    private ProcessArgumentBuilder GetArguments(IEnumerable`1<FilePath> testFiles, DotNetVSTestSettings settings);
}
public class Cake.Common.Tools.DotNet.VSTest.DotNetVSTestSettings : DotNetSettings {
    [CompilerGeneratedAttribute]
private FilePath <Settings>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<string> <TestsToRun>k__BackingField;
    [CompilerGeneratedAttribute]
private DirectoryPath <TestAdapterPath>k__BackingField;
    [CompilerGeneratedAttribute]
private VSTestPlatform <Platform>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Framework>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Parallel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TestCaseFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ParentProcessId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Port>k__BackingField;
    [CompilerGeneratedAttribute]
private FilePath <DiagnosticFile>k__BackingField;
    [CompilerGeneratedAttribute]
private DirectoryPath <ResultsDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <Arguments>k__BackingField;
    public FilePath Settings { get; public set; }
    public ICollection`1<string> TestsToRun { get; public set; }
    public DirectoryPath TestAdapterPath { get; public set; }
    public VSTestPlatform Platform { get; public set; }
    public string Framework { get; public set; }
    public bool Parallel { get; public set; }
    public string TestCaseFilter { get; public set; }
    public string Logger { get; public set; }
    public string ParentProcessId { get; public set; }
    public Nullable`1<int> Port { get; public set; }
    public FilePath DiagnosticFile { get; public set; }
    public DirectoryPath ResultsDirectory { get; public set; }
    public IDictionary`2<string, string> Arguments { get; public set; }
    [CompilerGeneratedAttribute]
public FilePath get_Settings();
    [CompilerGeneratedAttribute]
public void set_Settings(FilePath value);
    [CompilerGeneratedAttribute]
public ICollection`1<string> get_TestsToRun();
    [CompilerGeneratedAttribute]
public void set_TestsToRun(ICollection`1<string> value);
    [CompilerGeneratedAttribute]
public DirectoryPath get_TestAdapterPath();
    [CompilerGeneratedAttribute]
public void set_TestAdapterPath(DirectoryPath value);
    [CompilerGeneratedAttribute]
public VSTestPlatform get_Platform();
    [CompilerGeneratedAttribute]
public void set_Platform(VSTestPlatform value);
    [CompilerGeneratedAttribute]
public string get_Framework();
    [CompilerGeneratedAttribute]
public void set_Framework(string value);
    [CompilerGeneratedAttribute]
public bool get_Parallel();
    [CompilerGeneratedAttribute]
public void set_Parallel(bool value);
    [CompilerGeneratedAttribute]
public string get_TestCaseFilter();
    [CompilerGeneratedAttribute]
public void set_TestCaseFilter(string value);
    [CompilerGeneratedAttribute]
public string get_Logger();
    [CompilerGeneratedAttribute]
public void set_Logger(string value);
    [CompilerGeneratedAttribute]
public string get_ParentProcessId();
    [CompilerGeneratedAttribute]
public void set_ParentProcessId(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Port();
    [CompilerGeneratedAttribute]
public void set_Port(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public FilePath get_DiagnosticFile();
    [CompilerGeneratedAttribute]
public void set_DiagnosticFile(FilePath value);
    [CompilerGeneratedAttribute]
public DirectoryPath get_ResultsDirectory();
    [CompilerGeneratedAttribute]
public void set_ResultsDirectory(DirectoryPath value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_Arguments();
    [CompilerGeneratedAttribute]
public void set_Arguments(IDictionary`2<string, string> value);
}
public class Cake.Common.Tools.DotNet.Workload.Install.DotNetWorkloadInstaller : DotNetTool`1<DotNetWorkloadInstallSettings> {
    private ICakeEnvironment _environment;
    public DotNetWorkloadInstaller(IFileSystem fileSystem, ICakeEnvironment environment, IProcessRunner processRunner, IToolLocator tools);
    public void Install(IEnumerable`1<string> workloadIds, DotNetWorkloadInstallSettings settings);
    private ProcessArgumentBuilder GetArguments(IEnumerable`1<string> workloadIds, DotNetWorkloadInstallSettings settings);
}
public class Cake.Common.Tools.DotNet.Workload.Install.DotNetWorkloadInstallSettings : DotNetSettings {
    [CompilerGeneratedAttribute]
private FilePath <ConfigFile>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisableParallel>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreFailedSources>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludePreviews>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Interactive>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoCache>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SkipManifestUpdate>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<string> <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private DirectoryPath <TempDir>k__BackingField;
    public FilePath ConfigFile { get; public set; }
    public bool DisableParallel { get; public set; }
    public bool IgnoreFailedSources { get; public set; }
    public bool IncludePreviews { get; public set; }
    public bool Interactive { get; public set; }
    public bool NoCache { get; public set; }
    public bool SkipManifestUpdate { get; public set; }
    public ICollection`1<string> Source { get; public set; }
    public DirectoryPath TempDir { get; public set; }
    [CompilerGeneratedAttribute]
public FilePath get_ConfigFile();
    [CompilerGeneratedAttribute]
public void set_ConfigFile(FilePath value);
    [CompilerGeneratedAttribute]
public bool get_DisableParallel();
    [CompilerGeneratedAttribute]
public void set_DisableParallel(bool value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreFailedSources();
    [CompilerGeneratedAttribute]
public void set_IgnoreFailedSources(bool value);
    [CompilerGeneratedAttribute]
public bool get_IncludePreviews();
    [CompilerGeneratedAttribute]
public void set_IncludePreviews(bool value);
    [CompilerGeneratedAttribute]
public bool get_Interactive();
    [CompilerGeneratedAttribute]
public void set_Interactive(bool value);
    [CompilerGeneratedAttribute]
public bool get_NoCache();
    [CompilerGeneratedAttribute]
public void set_NoCache(bool value);
    [CompilerGeneratedAttribute]
public bool get_SkipManifestUpdate();
    [CompilerGeneratedAttribute]
public void set_SkipManifestUpdate(bool value);
    [CompilerGeneratedAttribute]
public ICollection`1<string> get_Source();
    [CompilerGeneratedAttribute]
public void set_Source(ICollection`1<string> value);
    [CompilerGeneratedAttribute]
public DirectoryPath get_TempDir();
    [CompilerGeneratedAttribute]
public void set_TempDir(DirectoryPath value);
}
public class Cake.Common.Tools.DotNet.Workload.List.DotNetWorkloadLister : DotNetTool`1<DotNetWorkloadListSettings> {
    public DotNetWorkloadLister(IFileSystem fileSystem, ICakeEnvironment environment, IProcessRunner processRunner, IToolLocator tools);
    public IEnumerable`1<DotNetWorkloadListItem> List(DotNetWorkloadListSettings settings);
    private ProcessArgumentBuilder GetArguments(DotNetWorkloadListSettings settings);
    [IteratorStateMachineAttribute("Cake.Common.Tools.DotNet.Workload.List.DotNetWorkloadLister/<ParseResult>d__3")]
private static IEnumerable`1<DotNetWorkloadListItem> ParseResult(IEnumerable`1<string> result);
}
public class Cake.Common.Tools.DotNet.Workload.List.DotNetWorkloadListItem : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ManifestVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InstallationSource>k__BackingField;
    public string Id { get; }
    public string ManifestVersion { get; }
    public string InstallationSource { get; }
    public DotNetWorkloadListItem(string id, string manifestVersion, string installationSource);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public string get_ManifestVersion();
    [CompilerGeneratedAttribute]
public string get_InstallationSource();
}
public class Cake.Common.Tools.DotNet.Workload.List.DotNetWorkloadListSettings : DotNetSettings {
}
public class Cake.Common.Tools.DotNet.Workload.Repair.DotNetWorkloadRepairer : DotNetTool`1<DotNetWorkloadRepairSettings> {
    private ICakeEnvironment _environment;
    public DotNetWorkloadRepairer(IFileSystem fileSystem, ICakeEnvironment environment, IProcessRunner processRunner, IToolLocator tools);
    public void Repair(DotNetWorkloadRepairSettings settings);
    private ProcessArgumentBuilder GetArguments(DotNetWorkloadRepairSettings settings);
}
public class Cake.Common.Tools.DotNet.Workload.Repair.DotNetWorkloadRepairSettings : DotNetSettings {
    [CompilerGeneratedAttribute]
private FilePath <ConfigFile>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisableParallel>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreFailedSources>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludePreviews>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Interactive>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoCache>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<string> <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private DirectoryPath <TempDir>k__BackingField;
    public FilePath ConfigFile { get; public set; }
    public bool DisableParallel { get; public set; }
    public bool IgnoreFailedSources { get; public set; }
    public bool IncludePreviews { get; public set; }
    public bool Interactive { get; public set; }
    public bool NoCache { get; public set; }
    public ICollection`1<string> Source { get; public set; }
    public DirectoryPath TempDir { get; public set; }
    [CompilerGeneratedAttribute]
public FilePath get_ConfigFile();
    [CompilerGeneratedAttribute]
public void set_ConfigFile(FilePath value);
    [CompilerGeneratedAttribute]
public bool get_DisableParallel();
    [CompilerGeneratedAttribute]
public void set_DisableParallel(bool value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreFailedSources();
    [CompilerGeneratedAttribute]
public void set_IgnoreFailedSources(bool value);
    [CompilerGeneratedAttribute]
public bool get_IncludePreviews();
    [CompilerGeneratedAttribute]
public void set_IncludePreviews(bool value);
    [CompilerGeneratedAttribute]
public bool get_Interactive();
    [CompilerGeneratedAttribute]
public void set_Interactive(bool value);
    [CompilerGeneratedAttribute]
public bool get_NoCache();
    [CompilerGeneratedAttribute]
public void set_NoCache(bool value);
    [CompilerGeneratedAttribute]
public ICollection`1<string> get_Source();
    [CompilerGeneratedAttribute]
public void set_Source(ICollection`1<string> value);
    [CompilerGeneratedAttribute]
public DirectoryPath get_TempDir();
    [CompilerGeneratedAttribute]
public void set_TempDir(DirectoryPath value);
}
public class Cake.Common.Tools.DotNet.Workload.Restore.DotNetWorkloadRestorer : DotNetTool`1<DotNetWorkloadRestoreSettings> {
    private ICakeEnvironment _environment;
    public DotNetWorkloadRestorer(IFileSystem fileSystem, ICakeEnvironment environment, IProcessRunner processRunner, IToolLocator tools);
    public void Restore(string project, DotNetWorkloadRestoreSettings settings);
    private ProcessArgumentBuilder GetArguments(string project, DotNetWorkloadRestoreSettings settings);
}
public class Cake.Common.Tools.DotNet.Workload.Restore.DotNetWorkloadRestoreSettings : DotNetSettings {
    [CompilerGeneratedAttribute]
private FilePath <ConfigFile>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisableParallel>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreFailedSources>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludePreviews>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Interactive>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoCache>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SkipManifestUpdate>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<string> <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private DirectoryPath <TempDir>k__BackingField;
    public FilePath ConfigFile { get; public set; }
    public bool DisableParallel { get; public set; }
    public bool IgnoreFailedSources { get; public set; }
    public bool IncludePreviews { get; public set; }
    public bool Interactive { get; public set; }
    public bool NoCache { get; public set; }
    public bool SkipManifestUpdate { get; public set; }
    public ICollection`1<string> Source { get; public set; }
    public DirectoryPath TempDir { get; public set; }
    [CompilerGeneratedAttribute]
public FilePath get_ConfigFile();
    [CompilerGeneratedAttribute]
public void set_ConfigFile(FilePath value);
    [CompilerGeneratedAttribute]
public bool get_DisableParallel();
    [CompilerGeneratedAttribute]
public void set_DisableParallel(bool value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreFailedSources();
    [CompilerGeneratedAttribute]
public void set_IgnoreFailedSources(bool value);
    [CompilerGeneratedAttribute]
public bool get_IncludePreviews();
    [CompilerGeneratedAttribute]
public void set_IncludePreviews(bool value);
    [CompilerGeneratedAttribute]
public bool get_Interactive();
    [CompilerGeneratedAttribute]
public void set_Interactive(bool value);
    [CompilerGeneratedAttribute]
public bool get_NoCache();
    [CompilerGeneratedAttribute]
public void set_NoCache(bool value);
    [CompilerGeneratedAttribute]
public bool get_SkipManifestUpdate();
    [CompilerGeneratedAttribute]
public void set_SkipManifestUpdate(bool value);
    [CompilerGeneratedAttribute]
public ICollection`1<string> get_Source();
    [CompilerGeneratedAttribute]
public void set_Source(ICollection`1<string> value);
    [CompilerGeneratedAttribute]
public DirectoryPath get_TempDir();
    [CompilerGeneratedAttribute]
public void set_TempDir(DirectoryPath value);
}
public class Cake.Common.Tools.DotNet.Workload.Search.DotNetWorkload : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    public string Id { get; }
    public string Description { get; }
    public DotNetWorkload(string id, string description);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public string get_Description();
}
public class Cake.Common.Tools.DotNet.Workload.Search.DotNetWorkloadSearcher : DotNetTool`1<DotNetWorkloadSearchSettings> {
    public DotNetWorkloadSearcher(IFileSystem fileSystem, ICakeEnvironment environment, IProcessRunner processRunner, IToolLocator tools);
    public IEnumerable`1<DotNetWorkload> Search(string searchString, DotNetWorkloadSearchSettings settings);
    private ProcessArgumentBuilder GetArguments(string searchString, DotNetWorkloadSearchSettings settings);
    [IteratorStateMachineAttribute("Cake.Common.Tools.DotNet.Workload.Search.DotNetWorkloadSearcher/<ParseResult>d__3")]
private static IEnumerable`1<DotNetWorkload> ParseResult(IEnumerable`1<string> result);
}
public class Cake.Common.Tools.DotNet.Workload.Search.DotNetWorkloadSearchSettings : DotNetSettings {
}
public class Cake.Common.Tools.DotNet.Workload.Uninstall.DotNetWorkloadUninstaller : DotNetTool`1<DotNetWorkloadUninstallSettings> {
    public DotNetWorkloadUninstaller(IFileSystem fileSystem, ICakeEnvironment environment, IProcessRunner processRunner, IToolLocator tools);
    public void Uninstall(IEnumerable`1<string> workloadIds);
    private ProcessArgumentBuilder GetArguments(IEnumerable`1<string> workloadIds, DotNetWorkloadUninstallSettings settings);
}
public class Cake.Common.Tools.DotNet.Workload.Uninstall.DotNetWorkloadUninstallSettings : DotNetSettings {
}
public class Cake.Common.Tools.DotNet.Workload.Update.DotNetWorkloadUpdater : DotNetTool`1<DotNetWorkloadUpdateSettings> {
    private ICakeEnvironment _environment;
    public DotNetWorkloadUpdater(IFileSystem fileSystem, ICakeEnvironment environment, IProcessRunner processRunner, IToolLocator tools);
    public void Update(DotNetWorkloadUpdateSettings settings);
    private ProcessArgumentBuilder GetArguments(DotNetWorkloadUpdateSettings settings);
}
public class Cake.Common.Tools.DotNet.Workload.Update.DotNetWorkloadUpdateSettings : DotNetSettings {
    [CompilerGeneratedAttribute]
private bool <AdvertisingManifestsOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private FilePath <ConfigFile>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisableParallel>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FromPreviousSdk>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreFailedSources>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludePreviews>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Interactive>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoCache>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<string> <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private DirectoryPath <TempDir>k__BackingField;
    public bool AdvertisingManifestsOnly { get; public set; }
    public FilePath ConfigFile { get; public set; }
    public bool DisableParallel { get; public set; }
    public bool FromPreviousSdk { get; public set; }
    public bool IgnoreFailedSources { get; public set; }
    public bool IncludePreviews { get; public set; }
    public bool Interactive { get; public set; }
    public bool NoCache { get; public set; }
    public ICollection`1<string> Source { get; public set; }
    public DirectoryPath TempDir { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_AdvertisingManifestsOnly();
    [CompilerGeneratedAttribute]
public void set_AdvertisingManifestsOnly(bool value);
    [CompilerGeneratedAttribute]
public FilePath get_ConfigFile();
    [CompilerGeneratedAttribute]
public void set_ConfigFile(FilePath value);
    [CompilerGeneratedAttribute]
public bool get_DisableParallel();
    [CompilerGeneratedAttribute]
public void set_DisableParallel(bool value);
    [CompilerGeneratedAttribute]
public bool get_FromPreviousSdk();
    [CompilerGeneratedAttribute]
public void set_FromPreviousSdk(bool value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreFailedSources();
    [CompilerGeneratedAttribute]
public void set_IgnoreFailedSources(bool value);
    [CompilerGeneratedAttribute]
public bool get_IncludePreviews();
    [CompilerGeneratedAttribute]
public void set_IncludePreviews(bool value);
    [CompilerGeneratedAttribute]
public bool get_Interactive();
    [CompilerGeneratedAttribute]
public void set_Interactive(bool value);
    [CompilerGeneratedAttribute]
public bool get_NoCache();
    [CompilerGeneratedAttribute]
public void set_NoCache(bool value);
    [CompilerGeneratedAttribute]
public ICollection`1<string> get_Source();
    [CompilerGeneratedAttribute]
public void set_Source(ICollection`1<string> value);
    [CompilerGeneratedAttribute]
public DirectoryPath get_TempDir();
    [CompilerGeneratedAttribute]
public void set_TempDir(DirectoryPath value);
}
[ExtensionAttribute]
[CakeAliasCategoryAttribute("ReSharper")]
public static class Cake.Common.Tools.DupFinder.DupFinderAliases : object {
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("DupFinder")]
public static void DupFinder(ICakeContext context, FilePath file);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("DupFinder")]
public static void DupFinder(ICakeContext context, FilePath file, DupFinderSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("DupFinder")]
public static void DupFinder(ICakeContext context, IEnumerable`1<FilePath> files);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("DupFinder")]
public static void DupFinder(ICakeContext context, IEnumerable`1<FilePath> files, DupFinderSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("DupFinder")]
public static void DupFinder(ICakeContext context, GlobPattern pattern);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("DupFinder")]
public static void DupFinder(ICakeContext context, GlobPattern pattern, DupFinderSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("DupFinder")]
public static void DupFinderFromConfig(ICakeContext context, FilePath configFile);
}
public class Cake.Common.Tools.DupFinder.DupFinderRunner : Tool`1<DupFinderSettings> {
    private IFileSystem _fileSystem;
    private ICakeEnvironment _environment;
    private ICakeLog _log;
    public DupFinderRunner(IFileSystem fileSystem, ICakeEnvironment environment, IProcessRunner processRunner, IToolLocator tools, ICakeLog log);
    public void Run(IEnumerable`1<FilePath> filePaths, DupFinderSettings settings);
    public void RunFromConfig(FilePath configFile);
    private ProcessArgumentBuilder GetConfigArgument(FilePath configFile);
    private ProcessArgumentBuilder GetArgument(DupFinderSettings settings, IEnumerable`1<FilePath> files);
    private void AnalyzeResultsFile(FilePath resultsFilePath, bool throwOnDuplicates);
    protected virtual string GetToolName();
    protected virtual IEnumerable`1<string> GetToolExecutableNames();
}
public class Cake.Common.Tools.DupFinder.DupFinderSettings : ToolSettings {
    [CompilerGeneratedAttribute]
private bool <Debug>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <DiscardCost>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DiscardFieldsName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DiscardLiterals>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DiscardLocalVariablesName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DiscardTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IdlePriority>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <ExcludeFilesByStartingCommentSubstring>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <ExcludeCodeRegionsByNameSubstring>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <ExcludePattern>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <MsBuildProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NormalizeTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private DirectoryPath <CachesHome>k__BackingField;
    [CompilerGeneratedAttribute]
private FilePath <OutputFile>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowStats>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowText>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ThrowExceptionOnFindingDuplicates>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SkipOutputAnalysis>k__BackingField;
    public bool Debug { get; public set; }
    public Nullable`1<int> DiscardCost { get; public set; }
    public bool DiscardFieldsName { get; public set; }
    public bool DiscardLiterals { get; public set; }
    public bool DiscardLocalVariablesName { get; public set; }
    public bool DiscardTypes { get; public set; }
    public bool IdlePriority { get; public set; }
    public String[] ExcludeFilesByStartingCommentSubstring { get; public set; }
    public String[] ExcludeCodeRegionsByNameSubstring { get; public set; }
    public String[] ExcludePattern { get; public set; }
    public Dictionary`2<string, string> MsBuildProperties { get; public set; }
    public bool NormalizeTypes { get; public set; }
    public DirectoryPath CachesHome { get; public set; }
    public FilePath OutputFile { get; public set; }
    public bool ShowStats { get; public set; }
    public bool ShowText { get; public set; }
    public bool ThrowExceptionOnFindingDuplicates { get; public set; }
    public bool SkipOutputAnalysis { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Debug();
    [CompilerGeneratedAttribute]
public void set_Debug(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_DiscardCost();
    [CompilerGeneratedAttribute]
public void set_DiscardCost(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public bool get_DiscardFieldsName();
    [CompilerGeneratedAttribute]
public void set_DiscardFieldsName(bool value);
    [CompilerGeneratedAttribute]
public bool get_DiscardLiterals();
    [CompilerGeneratedAttribute]
public void set_DiscardLiterals(bool value);
    [CompilerGeneratedAttribute]
public bool get_DiscardLocalVariablesName();
    [CompilerGeneratedAttribute]
public void set_DiscardLocalVariablesName(bool value);
    [CompilerGeneratedAttribute]
public bool get_DiscardTypes();
    [CompilerGeneratedAttribute]
public void set_DiscardTypes(bool value);
    [CompilerGeneratedAttribute]
public bool get_IdlePriority();
    [CompilerGeneratedAttribute]
public void set_IdlePriority(bool value);
    [CompilerGeneratedAttribute]
public String[] get_ExcludeFilesByStartingCommentSubstring();
    [CompilerGeneratedAttribute]
public void set_ExcludeFilesByStartingCommentSubstring(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_ExcludeCodeRegionsByNameSubstring();
    [CompilerGeneratedAttribute]
public void set_ExcludeCodeRegionsByNameSubstring(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_ExcludePattern();
    [CompilerGeneratedAttribute]
public void set_ExcludePattern(String[] value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_MsBuildProperties();
    [CompilerGeneratedAttribute]
public void set_MsBuildProperties(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public bool get_NormalizeTypes();
    [CompilerGeneratedAttribute]
public void set_NormalizeTypes(bool value);
    [CompilerGeneratedAttribute]
public DirectoryPath get_CachesHome();
    [CompilerGeneratedAttribute]
public void set_CachesHome(DirectoryPath value);
    [CompilerGeneratedAttribute]
public FilePath get_OutputFile();
    [CompilerGeneratedAttribute]
public void set_OutputFile(FilePath value);
    [CompilerGeneratedAttribute]
public bool get_ShowStats();
    [CompilerGeneratedAttribute]
public void set_ShowStats(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShowText();
    [CompilerGeneratedAttribute]
public void set_ShowText(bool value);
    [CompilerGeneratedAttribute]
public bool get_ThrowExceptionOnFindingDuplicates();
    [CompilerGeneratedAttribute]
public void set_ThrowExceptionOnFindingDuplicates(bool value);
    [CompilerGeneratedAttribute]
public bool get_SkipOutputAnalysis();
    [CompilerGeneratedAttribute]
public void set_SkipOutputAnalysis(bool value);
}
[ExtensionAttribute]
[CakeAliasCategoryAttribute("Fixie")]
public static class Cake.Common.Tools.Fixie.FixieAliases : object {
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void Fixie(ICakeContext context, GlobPattern pattern);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void Fixie(ICakeContext context, GlobPattern pattern, FixieSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void Fixie(ICakeContext context, IEnumerable`1<string> assemblies);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void Fixie(ICakeContext context, IEnumerable`1<FilePath> assemblies);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void Fixie(ICakeContext context, IEnumerable`1<string> assemblies, FixieSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void Fixie(ICakeContext context, IEnumerable`1<FilePath> assemblies, FixieSettings settings);
}
public class Cake.Common.Tools.Fixie.FixieRunner : Tool`1<FixieSettings> {
    private ICakeEnvironment _environment;
    public FixieRunner(IFileSystem fileSystem, ICakeEnvironment environment, IProcessRunner processRunner, IToolLocator tools);
    public void Run(IEnumerable`1<FilePath> assemblyPaths, FixieSettings settings);
    private ProcessArgumentBuilder GetArguments(IEnumerable`1<FilePath> assemblyPaths, FixieSettings settings);
    protected virtual string GetToolName();
    protected virtual IEnumerable`1<string> GetToolExecutableNames();
}
public class Cake.Common.Tools.Fixie.FixieSettings : ToolSettings {
    [CompilerGeneratedAttribute]
private FilePath <NUnitXml>k__BackingField;
    [CompilerGeneratedAttribute]
private FilePath <XUnitXml>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <TeamCity>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, IList`1<string>> <Options>k__BackingField;
    public FilePath NUnitXml { get; public set; }
    public FilePath XUnitXml { get; public set; }
    public Nullable`1<bool> TeamCity { get; public set; }
    public IDictionary`2<string, IList`1<string>> Options { get; }
    [CompilerGeneratedAttribute]
public FilePath get_NUnitXml();
    [CompilerGeneratedAttribute]
public void set_NUnitXml(FilePath value);
    [CompilerGeneratedAttribute]
public FilePath get_XUnitXml();
    [CompilerGeneratedAttribute]
public void set_XUnitXml(FilePath value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_TeamCity();
    [CompilerGeneratedAttribute]
public void set_TeamCity(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, IList`1<string>> get_Options();
}
[ExtensionAttribute]
public static class Cake.Common.Tools.Fixie.FixieSettingsExtensions : object {
    [ExtensionAttribute]
public static FixieSettings WithOption(FixieSettings settings, string name, String[] values);
}
[ExtensionAttribute]
[CakeAliasCategoryAttribute("GitLink v3")]
public static class Cake.Common.Tools.GitLink.GitLink3Aliases : object {
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void GitLink3(ICakeContext context, FilePath pdbFilePath);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void GitLink3(ICakeContext context, FilePath pdbFilePath, GitLink3Settings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void GitLink3(ICakeContext context, IEnumerable`1<FilePath> pdbFiles);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void GitLink3(ICakeContext context, IEnumerable`1<FilePath> pdbFiles, GitLink3Settings settings);
}
public class Cake.Common.Tools.GitLink.GitLink3Runner : Tool`1<GitLink3Settings> {
    private ICakeEnvironment _environment;
    public GitLink3Runner(IFileSystem fileSystem, ICakeEnvironment environment, IProcessRunner processRunner, IToolLocator tools);
    public void Run(FilePath pdbFile, GitLink3Settings settings);
    public void Run(IEnumerable`1<FilePath> pdbFiles, GitLink3Settings settings);
    private ProcessArgumentBuilder GetArguments(FilePath pdbFilePath, GitLink3Settings settings);
    protected virtual string GetToolName();
    protected virtual IEnumerable`1<string> GetToolExecutableNames();
}
public class Cake.Common.Tools.GitLink.GitLink3Settings : ToolSettings {
    [CompilerGeneratedAttribute]
private string <RepositoryUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ShaHash>k__BackingField;
    [CompilerGeneratedAttribute]
private DirectoryPath <BaseDir>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UsePowerShell>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SkipVerify>k__BackingField;
    public string RepositoryUrl { get; public set; }
    public string ShaHash { get; public set; }
    public DirectoryPath BaseDir { get; public set; }
    public bool UsePowerShell { get; public set; }
    public bool SkipVerify { get; public set; }
    [CompilerGeneratedAttribute]
public string get_RepositoryUrl();
    [CompilerGeneratedAttribute]
public void set_RepositoryUrl(string value);
    [CompilerGeneratedAttribute]
public string get_ShaHash();
    [CompilerGeneratedAttribute]
public void set_ShaHash(string value);
    [CompilerGeneratedAttribute]
public DirectoryPath get_BaseDir();
    [CompilerGeneratedAttribute]
public void set_BaseDir(DirectoryPath value);
    [CompilerGeneratedAttribute]
public bool get_UsePowerShell();
    [CompilerGeneratedAttribute]
public void set_UsePowerShell(bool value);
    [CompilerGeneratedAttribute]
public bool get_SkipVerify();
    [CompilerGeneratedAttribute]
public void set_SkipVerify(bool value);
}
[ExtensionAttribute]
[CakeAliasCategoryAttribute("GitLink")]
public static class Cake.Common.Tools.GitLink.GitLinkAliases : object {
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void GitLink(ICakeContext context, DirectoryPath repositoryRootPath);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void GitLink(ICakeContext context, DirectoryPath repositoryRootPath, GitLinkSettings settings);
}
public class Cake.Common.Tools.GitLink.GitLinkRunner : Tool`1<GitLinkSettings> {
    private ICakeEnvironment _environment;
    public GitLinkRunner(IFileSystem fileSystem, ICakeEnvironment environment, IProcessRunner processRunner, IToolLocator tools);
    public void Run(DirectoryPath repositoryRootPath, GitLinkSettings settings);
    private ProcessArgumentBuilder GetArguments(DirectoryPath repositoryRootPath, GitLinkSettings settings);
    protected virtual string GetToolName();
    protected virtual IEnumerable`1<string> GetToolExecutableNames();
}
public class Cake.Common.Tools.GitLink.GitLinkSettings : ToolSettings {
    [CompilerGeneratedAttribute]
private string <RepositoryUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SolutionFileName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Configuration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Platform>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Branch>k__BackingField;
    [CompilerGeneratedAttribute]
private FilePath <LogFilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ShaHash>k__BackingField;
    [CompilerGeneratedAttribute]
private DirectoryPath <PdbDirectoryPath>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UsePowerShell>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ErrorsAsWarnings>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SkipVerify>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDebug>k__BackingField;
    public string RepositoryUrl { get; public set; }
    public string SolutionFileName { get; public set; }
    public string Configuration { get; public set; }
    public string Platform { get; public set; }
    public string Branch { get; public set; }
    public FilePath LogFilePath { get; public set; }
    public string ShaHash { get; public set; }
    public DirectoryPath PdbDirectoryPath { get; public set; }
    public bool UsePowerShell { get; public set; }
    public bool ErrorsAsWarnings { get; public set; }
    public bool SkipVerify { get; public set; }
    public bool IsDebug { get; public set; }
    [CompilerGeneratedAttribute]
public string get_RepositoryUrl();
    [CompilerGeneratedAttribute]
public void set_RepositoryUrl(string value);
    [CompilerGeneratedAttribute]
public string get_SolutionFileName();
    [CompilerGeneratedAttribute]
public void set_SolutionFileName(string value);
    [CompilerGeneratedAttribute]
public string get_Configuration();
    [CompilerGeneratedAttribute]
public void set_Configuration(string value);
    [CompilerGeneratedAttribute]
public string get_Platform();
    [CompilerGeneratedAttribute]
public void set_Platform(string value);
    [CompilerGeneratedAttribute]
public string get_Branch();
    [CompilerGeneratedAttribute]
public void set_Branch(string value);
    [CompilerGeneratedAttribute]
public FilePath get_LogFilePath();
    [CompilerGeneratedAttribute]
public void set_LogFilePath(FilePath value);
    [CompilerGeneratedAttribute]
public string get_ShaHash();
    [CompilerGeneratedAttribute]
public void set_ShaHash(string value);
    [CompilerGeneratedAttribute]
public DirectoryPath get_PdbDirectoryPath();
    [CompilerGeneratedAttribute]
public void set_PdbDirectoryPath(DirectoryPath value);
    [CompilerGeneratedAttribute]
public bool get_UsePowerShell();
    [CompilerGeneratedAttribute]
public void set_UsePowerShell(bool value);
    [CompilerGeneratedAttribute]
public bool get_ErrorsAsWarnings();
    [CompilerGeneratedAttribute]
public void set_ErrorsAsWarnings(bool value);
    [CompilerGeneratedAttribute]
public bool get_SkipVerify();
    [CompilerGeneratedAttribute]
public void set_SkipVerify(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsDebug();
    [CompilerGeneratedAttribute]
public void set_IsDebug(bool value);
}
public class Cake.Common.Tools.GitReleaseManager.AddAssets.GitReleaseManagerAddAssetsSettings : GitReleaseManagerSettings {
}
public class Cake.Common.Tools.GitReleaseManager.AddAssets.GitReleaseManagerAssetsAdder : GitReleaseManagerTool`1<GitReleaseManagerAddAssetsSettings> {
    public GitReleaseManagerAssetsAdder(IFileSystem fileSystem, ICakeEnvironment environment, IProcessRunner processRunner, IToolLocator tools);
    public void AddAssets(string userName, string password, string owner, string repository, string tagName, string assets, GitReleaseManagerAddAssetsSettings settings);
    public void AddAssets(string token, string owner, string repository, string tagName, string assets, GitReleaseManagerAddAssetsSettings settings);
    private ProcessArgumentBuilder GetArguments(string userName, string password, string owner, string repository, string tagName, string assets, GitReleaseManagerAddAssetsSettings settings);
    private ProcessArgumentBuilder GetArguments(string token, string owner, string repository, string tagName, string assets, GitReleaseManagerAddAssetsSettings settings);
    private void ParseCommonArguments(ProcessArgumentBuilder builder, string owner, string repository, string tagName, string assets);
}
public class Cake.Common.Tools.GitReleaseManager.Close.GitReleaseManagerCloseMilestoneSettings : GitReleaseManagerSettings {
}
public class Cake.Common.Tools.GitReleaseManager.Close.GitReleaseManagerMilestoneCloser : GitReleaseManagerTool`1<GitReleaseManagerCloseMilestoneSettings> {
    public GitReleaseManagerMilestoneCloser(IFileSystem fileSystem, ICakeEnvironment environment, IProcessRunner processRunner, IToolLocator tools);
    public void Close(string userName, string password, string owner, string repository, string milestone, GitReleaseManagerCloseMilestoneSettings settings);
    public void Close(string token, string owner, string repository, string milestone, GitReleaseManagerCloseMilestoneSettings settings);
    private ProcessArgumentBuilder GetArguments(string userName, string password, string owner, string repository, string milestone, GitReleaseManagerCloseMilestoneSettings settings);
    private ProcessArgumentBuilder GetArguments(string token, string owner, string repository, string milestone, GitReleaseManagerCloseMilestoneSettings settings);
    private void ParseCommonArguments(ProcessArgumentBuilder builder, string owner, string repository, string milestone);
}
public class Cake.Common.Tools.GitReleaseManager.Create.GitReleaseManagerCreateSettings : GitReleaseManagerSettings {
    [CompilerGeneratedAttribute]
private string <Milestone>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private FilePath <InputFilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Prerelease>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Assets>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetCommitish>k__BackingField;
    public string Milestone { get; public set; }
    public string Name { get; public set; }
    public FilePath InputFilePath { get; public set; }
    public bool Prerelease { get; public set; }
    public string Assets { get; public set; }
    public string TargetCommitish { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Milestone();
    [CompilerGeneratedAttribute]
public void set_Milestone(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public FilePath get_InputFilePath();
    [CompilerGeneratedAttribute]
public void set_InputFilePath(FilePath value);
    [CompilerGeneratedAttribute]
public bool get_Prerelease();
    [CompilerGeneratedAttribute]
public void set_Prerelease(bool value);
    [CompilerGeneratedAttribute]
public string get_Assets();
    [CompilerGeneratedAttribute]
public void set_Assets(string value);
    [CompilerGeneratedAttribute]
public string get_TargetCommitish();
    [CompilerGeneratedAttribute]
public void set_TargetCommitish(string value);
}
public class Cake.Common.Tools.GitReleaseManager.Create.GitReleaseManagerCreator : GitReleaseManagerTool`1<GitReleaseManagerCreateSettings> {
    private ICakeEnvironment _environment;
    public GitReleaseManagerCreator(IFileSystem fileSystem, ICakeEnvironment environment, IProcessRunner processRunner, IToolLocator tools);
    public void Create(string userName, string password, string owner, string repository, GitReleaseManagerCreateSettings settings);
    public void Create(string token, string owner, string repository, GitReleaseManagerCreateSettings settings);
    private ProcessArgumentBuilder GetArguments(string userName, string password, string owner, string repository, GitReleaseManagerCreateSettings settings);
    private ProcessArgumentBuilder GetArguments(string token, string owner, string repository, GitReleaseManagerCreateSettings settings);
    private void ParseCommonArguments(ProcessArgumentBuilder builder, string owner, string repository, GitReleaseManagerCreateSettings settings);
}
public class Cake.Common.Tools.GitReleaseManager.Discard.GitReleaseManagerDiscarder : GitReleaseManagerTool`1<GitReleaseManagerDiscardSettings> {
    public GitReleaseManagerDiscarder(IFileSystem fileSystem, ICakeEnvironment environment, IProcessRunner processRunner, IToolLocator tools);
    public void Discard(string token, string owner, string repository, string milestone, GitReleaseManagerDiscardSettings settings);
    private ProcessArgumentBuilder GetArguments(string token, string owner, string repository, string milestone, GitReleaseManagerDiscardSettings settings);
}
public class Cake.Common.Tools.GitReleaseManager.Discard.GitReleaseManagerDiscardSettings : GitReleaseManagerSettings {
}
public class Cake.Common.Tools.GitReleaseManager.Export.GitReleaseManagerExporter : GitReleaseManagerTool`1<GitReleaseManagerExportSettings> {
    private ICakeEnvironment _environment;
    public GitReleaseManagerExporter(IFileSystem fileSystem, ICakeEnvironment environment, IProcessRunner processRunner, IToolLocator tools);
    public void Export(string userName, string password, string owner, string repository, FilePath fileOutputPath, GitReleaseManagerExportSettings settings);
    public void Export(string token, string owner, string repository, FilePath fileOutputPath, GitReleaseManagerExportSettings settings);
    private ProcessArgumentBuilder GetArguments(string userName, string password, string owner, string repository, FilePath fileOutputPath, GitReleaseManagerExportSettings settings);
    private ProcessArgumentBuilder GetArguments(string token, string owner, string repository, FilePath fileOutputPath, GitReleaseManagerExportSettings settings);
    private void ParseCommonArguments(ProcessArgumentBuilder builder, string owner, string repository, FilePath fileOutputPath, GitReleaseManagerExportSettings settings);
}
public class Cake.Common.Tools.GitReleaseManager.Export.GitReleaseManagerExportSettings : GitReleaseManagerSettings {
    [CompilerGeneratedAttribute]
private string <TagName>k__BackingField;
    public string TagName { get; public set; }
    [CompilerGeneratedAttribute]
public string get_TagName();
    [CompilerGeneratedAttribute]
public void set_TagName(string value);
}
[ExtensionAttribute]
[CakeAliasCategoryAttribute("GitReleaseManager")]
public static class Cake.Common.Tools.GitReleaseManager.GitReleaseManagerAliases : object {
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Create")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.GitReleaseManager.Create")]
public static void GitReleaseManagerCreate(ICakeContext context, string token, string owner, string repository);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Create")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.GitReleaseManager.Create")]
public static void GitReleaseManagerCreate(ICakeContext context, string token, string owner, string repository, GitReleaseManagerCreateSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("AddAssets")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.GitReleaseManager.AddAssets")]
public static void GitReleaseManagerAddAssets(ICakeContext context, string token, string owner, string repository, string tagName, string assets);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("AddAssets")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.GitReleaseManager.AddAssets")]
public static void GitReleaseManagerAddAssets(ICakeContext context, string token, string owner, string repository, string tagName, string assets, GitReleaseManagerAddAssetsSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Close")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.GitReleaseManager.Close")]
public static void GitReleaseManagerClose(ICakeContext context, string token, string owner, string repository, string milestone);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Close")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.GitReleaseManager.Close")]
public static void GitReleaseManagerClose(ICakeContext context, string token, string owner, string repository, string milestone, GitReleaseManagerCloseMilestoneSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Publish")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.GitReleaseManager.Publish")]
public static void GitReleaseManagerPublish(ICakeContext context, string token, string owner, string repository, string tagName);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Publish")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.GitReleaseManager.Publish")]
public static void GitReleaseManagerPublish(ICakeContext context, string token, string owner, string repository, string tagName, GitReleaseManagerPublishSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Export")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.GitReleaseManager.Export")]
public static void GitReleaseManagerExport(ICakeContext context, string token, string owner, string repository, FilePath fileOutputPath);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Export")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.GitReleaseManager.Export")]
public static void GitReleaseManagerExport(ICakeContext context, string token, string owner, string repository, FilePath fileOutputPath, GitReleaseManagerExportSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Label")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.GitReleaseManager.Label")]
public static void GitReleaseManagerLabel(ICakeContext context, string token, string owner, string repository);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Label")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.GitReleaseManager.Label")]
public static void GitReleaseManagerLabel(ICakeContext context, string token, string owner, string repository, GitReleaseManagerLabelSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Open")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.GitReleaseManager.Open")]
public static void GitReleaseManagerOpen(ICakeContext context, string token, string owner, string repository, string milestone);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Open")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.GitReleaseManager.Open")]
public static void GitReleaseManagerOpen(ICakeContext context, string token, string owner, string repository, string milestone, GitReleaseManagerOpenMilestoneSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Discard")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.GitReleaseManager.Discard")]
public static void GitReleaseManagerDiscard(ICakeContext context, string token, string owner, string repository, string milestone);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Discard")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.GitReleaseManager.Discard")]
public static void GitReleaseManagerDiscard(ICakeContext context, string token, string owner, string repository, string milestone, GitReleaseManagerDiscardSettings settings);
}
public class Cake.Common.Tools.GitReleaseManager.GitReleaseManagerSettings : ToolSettings {
    [CompilerGeneratedAttribute]
private DirectoryPath <TargetDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private FilePath <LogFilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Debug>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Verbose>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoLogo>k__BackingField;
    public DirectoryPath TargetDirectory { get; public set; }
    public FilePath LogFilePath { get; public set; }
    public bool Debug { get; public set; }
    public bool Verbose { get; public set; }
    public bool NoLogo { get; public set; }
    [CompilerGeneratedAttribute]
public DirectoryPath get_TargetDirectory();
    [CompilerGeneratedAttribute]
public void set_TargetDirectory(DirectoryPath value);
    [CompilerGeneratedAttribute]
public FilePath get_LogFilePath();
    [CompilerGeneratedAttribute]
public void set_LogFilePath(FilePath value);
    [CompilerGeneratedAttribute]
public bool get_Debug();
    [CompilerGeneratedAttribute]
public void set_Debug(bool value);
    [CompilerGeneratedAttribute]
public bool get_Verbose();
    [CompilerGeneratedAttribute]
public void set_Verbose(bool value);
    [CompilerGeneratedAttribute]
public bool get_NoLogo();
    [CompilerGeneratedAttribute]
public void set_NoLogo(bool value);
}
public abstract class Cake.Common.Tools.GitReleaseManager.GitReleaseManagerTool`1 : Tool`1<TSettings> {
    private ICakeEnvironment _environment;
    protected GitReleaseManagerTool`1(IFileSystem fileSystem, ICakeEnvironment environment, IProcessRunner processRunner, IToolLocator tools);
    protected sealed virtual string GetToolName();
    protected sealed virtual IEnumerable`1<string> GetToolExecutableNames();
    protected ProcessArgumentBuilder AddBaseArguments(GitReleaseManagerSettings settings, ProcessArgumentBuilder builder);
}
public class Cake.Common.Tools.GitReleaseManager.Label.GitReleaseManagerLabeller : GitReleaseManagerTool`1<GitReleaseManagerLabelSettings> {
    public GitReleaseManagerLabeller(IFileSystem fileSystem, ICakeEnvironment environment, IProcessRunner processRunner, IToolLocator tools);
    public void Label(string userName, string password, string owner, string repository, GitReleaseManagerLabelSettings settings);
    public void Label(string token, string owner, string repository, GitReleaseManagerLabelSettings settings);
    private ProcessArgumentBuilder GetArguments(string userName, string password, string owner, string repository, GitReleaseManagerLabelSettings settings);
    private ProcessArgumentBuilder GetArguments(string token, string owner, string repository, GitReleaseManagerLabelSettings settings);
    private void ParseCommonArguments(ProcessArgumentBuilder builder, string owner, string repository);
}
public class Cake.Common.Tools.GitReleaseManager.Label.GitReleaseManagerLabelSettings : GitReleaseManagerSettings {
}
public class Cake.Common.Tools.GitReleaseManager.Open.GitReleaseManagerMilestoneOpener : GitReleaseManagerTool`1<GitReleaseManagerOpenMilestoneSettings> {
    public GitReleaseManagerMilestoneOpener(IFileSystem fileSystem, ICakeEnvironment environment, IProcessRunner processRunner, IToolLocator tools);
    public void Open(string token, string owner, string repository, string milestone, GitReleaseManagerOpenMilestoneSettings settings);
    private ProcessArgumentBuilder GetArguments(string token, string owner, string repository, string milestone, GitReleaseManagerOpenMilestoneSettings settings);
}
public class Cake.Common.Tools.GitReleaseManager.Open.GitReleaseManagerOpenMilestoneSettings : GitReleaseManagerSettings {
}
public class Cake.Common.Tools.GitReleaseManager.Publish.GitReleaseManagerPublisher : GitReleaseManagerTool`1<GitReleaseManagerPublishSettings> {
    public GitReleaseManagerPublisher(IFileSystem fileSystem, ICakeEnvironment environment, IProcessRunner processRunner, IToolLocator tools);
    public void Publish(string userName, string password, string owner, string repository, string tagName, GitReleaseManagerPublishSettings settings);
    public void Publish(string token, string owner, string repository, string tagName, GitReleaseManagerPublishSettings settings);
    private ProcessArgumentBuilder GetArguments(string userName, string password, string owner, string repository, string tagName, GitReleaseManagerPublishSettings settings);
    private ProcessArgumentBuilder GetArguments(string token, string owner, string repository, string tagName, GitReleaseManagerPublishSettings settings);
    private void ParseCommonArguments(ProcessArgumentBuilder builder, string owner, string repository, string tagName);
}
public class Cake.Common.Tools.GitReleaseManager.Publish.GitReleaseManagerPublishSettings : GitReleaseManagerSettings {
}
[ExtensionAttribute]
[CakeAliasCategoryAttribute("GitReleaseNotes")]
public static class Cake.Common.Tools.GitReleaseNotes.GitReleaseNotesAliases : object {
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("GitReleaseNotes")]
public static void GitReleaseNotes(ICakeContext context, FilePath outputFile, GitReleaseNotesSettings settings);
}
public enum Cake.Common.Tools.GitReleaseNotes.GitReleaseNotesIssueTracker : Enum {
    public int value__;
    public static GitReleaseNotesIssueTracker BitBucket;
    public static GitReleaseNotesIssueTracker GitHub;
    public static GitReleaseNotesIssueTracker Jira;
    public static GitReleaseNotesIssueTracker YouTrack;
}
public class Cake.Common.Tools.GitReleaseNotes.GitReleaseNotesRunner : Tool`1<GitReleaseNotesSettings> {
    private ICakeEnvironment _environment;
    public GitReleaseNotesRunner(IFileSystem fileSystem, ICakeEnvironment environment, IProcessRunner processRunner, IToolLocator tools);
    public void Run(FilePath outputFile, GitReleaseNotesSettings settings);
    private ProcessArgumentBuilder GetArguments(FilePath outputFile, GitReleaseNotesSettings settings);
    protected virtual string GetToolName();
    protected virtual IEnumerable`1<string> GetToolExecutableNames();
}
public class Cake.Common.Tools.GitReleaseNotes.GitReleaseNotesSettings : ToolSettings {
    [CompilerGeneratedAttribute]
private bool <Verbose>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<GitReleaseNotesIssueTracker> <IssueTracker>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllTags>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RepoUserName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RepoPassword>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RepoToken>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RepoUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RepoBranch>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IssueTrackerUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IssueTrackerUserName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IssueTrackerPassword>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IssueTrackerToken>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IssueTrackerProjectId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IssueTrackerFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Categories>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllLabels>k__BackingField;
    public bool Verbose { get; public set; }
    public Nullable`1<GitReleaseNotesIssueTracker> IssueTracker { get; public set; }
    public bool AllTags { get; public set; }
    public string RepoUserName { get; public set; }
    public string RepoPassword { get; public set; }
    public string RepoToken { get; public set; }
    public string RepoUrl { get; public set; }
    public string RepoBranch { get; public set; }
    public string IssueTrackerUrl { get; public set; }
    public string IssueTrackerUserName { get; public set; }
    public string IssueTrackerPassword { get; public set; }
    public string IssueTrackerToken { get; public set; }
    public string IssueTrackerProjectId { get; public set; }
    public string IssueTrackerFilter { get; public set; }
    public string Categories { get; public set; }
    public string Version { get; public set; }
    public bool AllLabels { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Verbose();
    [CompilerGeneratedAttribute]
public void set_Verbose(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<GitReleaseNotesIssueTracker> get_IssueTracker();
    [CompilerGeneratedAttribute]
public void set_IssueTracker(Nullable`1<GitReleaseNotesIssueTracker> value);
    [CompilerGeneratedAttribute]
public bool get_AllTags();
    [CompilerGeneratedAttribute]
public void set_AllTags(bool value);
    [CompilerGeneratedAttribute]
public string get_RepoUserName();
    [CompilerGeneratedAttribute]
public void set_RepoUserName(string value);
    [CompilerGeneratedAttribute]
public string get_RepoPassword();
    [CompilerGeneratedAttribute]
public void set_RepoPassword(string value);
    [CompilerGeneratedAttribute]
public string get_RepoToken();
    [CompilerGeneratedAttribute]
public void set_RepoToken(string value);
    [CompilerGeneratedAttribute]
public string get_RepoUrl();
    [CompilerGeneratedAttribute]
public void set_RepoUrl(string value);
    [CompilerGeneratedAttribute]
public string get_RepoBranch();
    [CompilerGeneratedAttribute]
public void set_RepoBranch(string value);
    [CompilerGeneratedAttribute]
public string get_IssueTrackerUrl();
    [CompilerGeneratedAttribute]
public void set_IssueTrackerUrl(string value);
    [CompilerGeneratedAttribute]
public string get_IssueTrackerUserName();
    [CompilerGeneratedAttribute]
public void set_IssueTrackerUserName(string value);
    [CompilerGeneratedAttribute]
public string get_IssueTrackerPassword();
    [CompilerGeneratedAttribute]
public void set_IssueTrackerPassword(string value);
    [CompilerGeneratedAttribute]
public string get_IssueTrackerToken();
    [CompilerGeneratedAttribute]
public void set_IssueTrackerToken(string value);
    [CompilerGeneratedAttribute]
public string get_IssueTrackerProjectId();
    [CompilerGeneratedAttribute]
public void set_IssueTrackerProjectId(string value);
    [CompilerGeneratedAttribute]
public string get_IssueTrackerFilter();
    [CompilerGeneratedAttribute]
public void set_IssueTrackerFilter(string value);
    [CompilerGeneratedAttribute]
public string get_Categories();
    [CompilerGeneratedAttribute]
public void set_Categories(string value);
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(string value);
    [CompilerGeneratedAttribute]
public bool get_AllLabels();
    [CompilerGeneratedAttribute]
public void set_AllLabels(bool value);
}
public class Cake.Common.Tools.GitVersion.GitVersion : object {
    [CompilerGeneratedAttribute]
private int <Major>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Minor>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Patch>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PreReleaseTag>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PreReleaseTagWithDash>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PreReleaseLabel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PreReleaseLabelWithDash>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <PreReleaseNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <WeightedPreReleaseNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BuildMetaData>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BuildMetaDataPadded>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FullBuildMetaData>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MajorMinorPatch>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SemVer>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LegacySemVer>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LegacySemVerPadded>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssemblySemVer>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssemblySemFileVer>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FullSemVer>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InformationalVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BranchName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EscapedBranchName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Sha>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ShortSha>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NuGetVersionV2>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NuGetVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NuGetPreReleaseTagV2>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NuGetPreReleaseTag>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VersionSourceSha>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <CommitsSinceVersionSource>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CommitsSinceVersionSourcePadded>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <UncommittedChanges>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CommitDate>k__BackingField;
    public int Major { get; public set; }
    public int Minor { get; public set; }
    public int Patch { get; public set; }
    public string PreReleaseTag { get; public set; }
    public string PreReleaseTagWithDash { get; public set; }
    public string PreReleaseLabel { get; public set; }
    public string PreReleaseLabelWithDash { get; public set; }
    public Nullable`1<int> PreReleaseNumber { get; public set; }
    public Nullable`1<int> WeightedPreReleaseNumber { get; public set; }
    public string BuildMetaData { get; public set; }
    public string BuildMetaDataPadded { get; public set; }
    public string FullBuildMetaData { get; public set; }
    public string MajorMinorPatch { get; public set; }
    public string SemVer { get; public set; }
    public string LegacySemVer { get; public set; }
    public string LegacySemVerPadded { get; public set; }
    public string AssemblySemVer { get; public set; }
    public string AssemblySemFileVer { get; public set; }
    public string FullSemVer { get; public set; }
    public string InformationalVersion { get; public set; }
    public string BranchName { get; public set; }
    public string EscapedBranchName { get; public set; }
    public string Sha { get; public set; }
    public string ShortSha { get; public set; }
    public string NuGetVersionV2 { get; public set; }
    public string NuGetVersion { get; public set; }
    public string NuGetPreReleaseTagV2 { get; public set; }
    public string NuGetPreReleaseTag { get; public set; }
    public string VersionSourceSha { get; public set; }
    public Nullable`1<int> CommitsSinceVersionSource { get; public set; }
    public string CommitsSinceVersionSourcePadded { get; public set; }
    public Nullable`1<int> UncommittedChanges { get; public set; }
    public string CommitDate { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Major();
    [CompilerGeneratedAttribute]
public void set_Major(int value);
    [CompilerGeneratedAttribute]
public int get_Minor();
    [CompilerGeneratedAttribute]
public void set_Minor(int value);
    [CompilerGeneratedAttribute]
public int get_Patch();
    [CompilerGeneratedAttribute]
public void set_Patch(int value);
    [CompilerGeneratedAttribute]
public string get_PreReleaseTag();
    [CompilerGeneratedAttribute]
public void set_PreReleaseTag(string value);
    [CompilerGeneratedAttribute]
public string get_PreReleaseTagWithDash();
    [CompilerGeneratedAttribute]
public void set_PreReleaseTagWithDash(string value);
    [CompilerGeneratedAttribute]
public string get_PreReleaseLabel();
    [CompilerGeneratedAttribute]
public void set_PreReleaseLabel(string value);
    [CompilerGeneratedAttribute]
public string get_PreReleaseLabelWithDash();
    [CompilerGeneratedAttribute]
public void set_PreReleaseLabelWithDash(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_PreReleaseNumber();
    [CompilerGeneratedAttribute]
public void set_PreReleaseNumber(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_WeightedPreReleaseNumber();
    [CompilerGeneratedAttribute]
public void set_WeightedPreReleaseNumber(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_BuildMetaData();
    [CompilerGeneratedAttribute]
public void set_BuildMetaData(string value);
    [CompilerGeneratedAttribute]
public string get_BuildMetaDataPadded();
    [CompilerGeneratedAttribute]
public void set_BuildMetaDataPadded(string value);
    [CompilerGeneratedAttribute]
public string get_FullBuildMetaData();
    [CompilerGeneratedAttribute]
public void set_FullBuildMetaData(string value);
    [CompilerGeneratedAttribute]
public string get_MajorMinorPatch();
    [CompilerGeneratedAttribute]
public void set_MajorMinorPatch(string value);
    [CompilerGeneratedAttribute]
public string get_SemVer();
    [CompilerGeneratedAttribute]
public void set_SemVer(string value);
    [CompilerGeneratedAttribute]
public string get_LegacySemVer();
    [CompilerGeneratedAttribute]
public void set_LegacySemVer(string value);
    [CompilerGeneratedAttribute]
public string get_LegacySemVerPadded();
    [CompilerGeneratedAttribute]
public void set_LegacySemVerPadded(string value);
    [CompilerGeneratedAttribute]
public string get_AssemblySemVer();
    [CompilerGeneratedAttribute]
public void set_AssemblySemVer(string value);
    [CompilerGeneratedAttribute]
public string get_AssemblySemFileVer();
    [CompilerGeneratedAttribute]
public void set_AssemblySemFileVer(string value);
    [CompilerGeneratedAttribute]
public string get_FullSemVer();
    [CompilerGeneratedAttribute]
public void set_FullSemVer(string value);
    [CompilerGeneratedAttribute]
public string get_InformationalVersion();
    [CompilerGeneratedAttribute]
public void set_InformationalVersion(string value);
    [CompilerGeneratedAttribute]
public string get_BranchName();
    [CompilerGeneratedAttribute]
public void set_BranchName(string value);
    [CompilerGeneratedAttribute]
public string get_EscapedBranchName();
    [CompilerGeneratedAttribute]
public void set_EscapedBranchName(string value);
    [CompilerGeneratedAttribute]
public string get_Sha();
    [CompilerGeneratedAttribute]
public void set_Sha(string value);
    [CompilerGeneratedAttribute]
public string get_ShortSha();
    [CompilerGeneratedAttribute]
public void set_ShortSha(string value);
    [CompilerGeneratedAttribute]
public string get_NuGetVersionV2();
    [CompilerGeneratedAttribute]
public void set_NuGetVersionV2(string value);
    [CompilerGeneratedAttribute]
public string get_NuGetVersion();
    [CompilerGeneratedAttribute]
public void set_NuGetVersion(string value);
    [CompilerGeneratedAttribute]
public string get_NuGetPreReleaseTagV2();
    [CompilerGeneratedAttribute]
public void set_NuGetPreReleaseTagV2(string value);
    [CompilerGeneratedAttribute]
public string get_NuGetPreReleaseTag();
    [CompilerGeneratedAttribute]
public void set_NuGetPreReleaseTag(string value);
    [CompilerGeneratedAttribute]
public string get_VersionSourceSha();
    [CompilerGeneratedAttribute]
public void set_VersionSourceSha(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_CommitsSinceVersionSource();
    [CompilerGeneratedAttribute]
public void set_CommitsSinceVersionSource(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_CommitsSinceVersionSourcePadded();
    [CompilerGeneratedAttribute]
public void set_CommitsSinceVersionSourcePadded(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_UncommittedChanges();
    [CompilerGeneratedAttribute]
public void set_UncommittedChanges(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_CommitDate();
    [CompilerGeneratedAttribute]
public void set_CommitDate(string value);
}
[ExtensionAttribute]
[CakeAliasCategoryAttribute("GitVersion")]
public static class Cake.Common.Tools.GitVersion.GitVersionAliases : object {
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static GitVersion GitVersion(ICakeContext context);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static GitVersion GitVersion(ICakeContext context, GitVersionSettings settings);
}
[DataContractAttribute]
internal class Cake.Common.Tools.GitVersion.GitVersionInternal : object {
    private GitVersion _gitVersion;
    internal GitVersion GitVersion { get; }
    [DataMemberAttribute]
public string Major { get; public set; }
    [DataMemberAttribute]
public string Minor { get; public set; }
    [DataMemberAttribute]
public string Patch { get; public set; }
    [DataMemberAttribute]
public string PreReleaseTag { get; public set; }
    [DataMemberAttribute]
public string PreReleaseTagWithDash { get; public set; }
    [DataMemberAttribute]
public string PreReleaseLabel { get; public set; }
    [DataMemberAttribute]
public string PreReleaseLabelWithDash { get; public set; }
    [DataMemberAttribute]
public string PreReleaseNumber { get; public set; }
    [DataMemberAttribute]
public string WeightedPreReleaseNumber { get; public set; }
    [DataMemberAttribute]
public string BuildMetaData { get; public set; }
    [DataMemberAttribute]
public string BuildMetaDataPadded { get; public set; }
    [DataMemberAttribute]
public string FullBuildMetaData { get; public set; }
    [DataMemberAttribute]
public string MajorMinorPatch { get; public set; }
    [DataMemberAttribute]
public string SemVer { get; public set; }
    [DataMemberAttribute]
public string LegacySemVer { get; public set; }
    [DataMemberAttribute]
public string LegacySemVerPadded { get; public set; }
    [DataMemberAttribute]
public string AssemblySemVer { get; public set; }
    [DataMemberAttribute]
public string AssemblySemFileVer { get; public set; }
    [DataMemberAttribute]
public string FullSemVer { get; public set; }
    [DataMemberAttribute]
public string InformationalVersion { get; public set; }
    [DataMemberAttribute]
public string BranchName { get; public set; }
    [DataMemberAttribute]
public string EscapedBranchName { get; public set; }
    [DataMemberAttribute]
public string Sha { get; public set; }
    [DataMemberAttribute]
public string ShortSha { get; public set; }
    [DataMemberAttribute]
public string NuGetVersionV2 { get; public set; }
    [DataMemberAttribute]
public string NuGetVersion { get; public set; }
    [DataMemberAttribute]
public string NuGetPreReleaseTagV2 { get; public set; }
    [DataMemberAttribute]
public string NuGetPreReleaseTag { get; public set; }
    [DataMemberAttribute]
public string VersionSourceSha { get; public set; }
    [DataMemberAttribute]
public string CommitsSinceVersionSource { get; public set; }
    [DataMemberAttribute]
public string CommitsSinceVersionSourcePadded { get; public set; }
    [DataMemberAttribute]
public string UncommittedChanges { get; public set; }
    [DataMemberAttribute]
public string CommitDate { get; public set; }
    internal GitVersion get_GitVersion();
    public string get_Major();
    public void set_Major(string value);
    public string get_Minor();
    public void set_Minor(string value);
    public string get_Patch();
    public void set_Patch(string value);
    public string get_PreReleaseTag();
    public void set_PreReleaseTag(string value);
    public string get_PreReleaseTagWithDash();
    public void set_PreReleaseTagWithDash(string value);
    public string get_PreReleaseLabel();
    public void set_PreReleaseLabel(string value);
    public string get_PreReleaseLabelWithDash();
    public void set_PreReleaseLabelWithDash(string value);
    public string get_PreReleaseNumber();
    public void set_PreReleaseNumber(string value);
    public string get_WeightedPreReleaseNumber();
    public void set_WeightedPreReleaseNumber(string value);
    public string get_BuildMetaData();
    public void set_BuildMetaData(string value);
    public string get_BuildMetaDataPadded();
    public void set_BuildMetaDataPadded(string value);
    public string get_FullBuildMetaData();
    public void set_FullBuildMetaData(string value);
    public string get_MajorMinorPatch();
    public void set_MajorMinorPatch(string value);
    public string get_SemVer();
    public void set_SemVer(string value);
    public string get_LegacySemVer();
    public void set_LegacySemVer(string value);
    public string get_LegacySemVerPadded();
    public void set_LegacySemVerPadded(string value);
    public string get_AssemblySemVer();
    public void set_AssemblySemVer(string value);
    public string get_AssemblySemFileVer();
    public void set_AssemblySemFileVer(string value);
    public string get_FullSemVer();
    public void set_FullSemVer(string value);
    public string get_InformationalVersion();
    public void set_InformationalVersion(string value);
    public string get_BranchName();
    public void set_BranchName(string value);
    public string get_EscapedBranchName();
    public void set_EscapedBranchName(string value);
    public string get_Sha();
    public void set_Sha(string value);
    public string get_ShortSha();
    public void set_ShortSha(string value);
    public string get_NuGetVersionV2();
    public void set_NuGetVersionV2(string value);
    public string get_NuGetVersion();
    public void set_NuGetVersion(string value);
    public string get_NuGetPreReleaseTagV2();
    public void set_NuGetPreReleaseTagV2(string value);
    public string get_NuGetPreReleaseTag();
    public void set_NuGetPreReleaseTag(string value);
    public string get_VersionSourceSha();
    public void set_VersionSourceSha(string value);
    public string get_CommitsSinceVersionSource();
    public void set_CommitsSinceVersionSource(string value);
    public string get_CommitsSinceVersionSourcePadded();
    public void set_CommitsSinceVersionSourcePadded(string value);
    public string get_UncommittedChanges();
    public void set_UncommittedChanges(string value);
    public string get_CommitDate();
    public void set_CommitDate(string value);
    private static Nullable`1<int> ToNullableInt(string value);
    private static int ToInt(string value);
    private static string ToString(int value);
    private static string ToString(Nullable`1<int> value);
}
public enum Cake.Common.Tools.GitVersion.GitVersionOutput : Enum {
    public int value__;
    public static GitVersionOutput Json;
    public static GitVersionOutput BuildServer;
    public static GitVersionOutput File;
}
public class Cake.Common.Tools.GitVersion.GitVersionRunner : Tool`1<GitVersionSettings> {
    private ICakeLog _log;
    public GitVersionRunner(IFileSystem fileSystem, ICakeEnvironment environment, IProcessRunner processRunner, IToolLocator tools, ICakeLog log);
    public GitVersion Run(GitVersionSettings settings);
    private ProcessArgumentBuilder GetArguments(GitVersionSettings settings);
    protected virtual string GetToolName();
    protected virtual IEnumerable`1<string> GetToolExecutableNames();
}
public class Cake.Common.Tools.GitVersion.GitVersionSettings : ToolSettings {
    [CompilerGeneratedAttribute]
private DirectoryPath <RepositoryPath>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<GitVersionOutput> <OutputType>k__BackingField;
    [CompilerGeneratedAttribute]
private FilePath <OutputFile>k__BackingField;
    [CompilerGeneratedAttribute]
private FilePath <ConfigFile>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UpdateAssemblyInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private FilePath <UpdateAssemblyInfoFilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UpdateProjectFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnsureAssemblyInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UpdateWixVersionFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ShowVariable>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Password>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Branch>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Commit>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoFetch>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoCache>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoNormalize>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Diag>k__BackingField;
    [CompilerGeneratedAttribute]
private DirectoryPath <DynamicRepositoryPath>k__BackingField;
    [CompilerGeneratedAttribute]
private FilePath <LogFilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<GitVersionVerbosity> <Verbosity>k__BackingField;
    public DirectoryPath RepositoryPath { get; public set; }
    public Nullable`1<GitVersionOutput> OutputType { get; public set; }
    public FilePath OutputFile { get; public set; }
    public FilePath ConfigFile { get; public set; }
    public bool UpdateAssemblyInfo { get; public set; }
    public FilePath UpdateAssemblyInfoFilePath { get; public set; }
    public bool UpdateProjectFiles { get; public set; }
    public bool EnsureAssemblyInfo { get; public set; }
    public bool UpdateWixVersionFile { get; public set; }
    public string ShowVariable { get; public set; }
    public string UserName { get; public set; }
    public string Password { get; public set; }
    public string Url { get; public set; }
    public string Branch { get; public set; }
    public string Commit { get; public set; }
    public bool NoFetch { get; public set; }
    public bool NoCache { get; public set; }
    public bool NoNormalize { get; public set; }
    public bool Diag { get; public set; }
    public DirectoryPath DynamicRepositoryPath { get; public set; }
    public FilePath LogFilePath { get; public set; }
    public Nullable`1<GitVersionVerbosity> Verbosity { get; public set; }
    [CompilerGeneratedAttribute]
public DirectoryPath get_RepositoryPath();
    [CompilerGeneratedAttribute]
public void set_RepositoryPath(DirectoryPath value);
    [CompilerGeneratedAttribute]
public Nullable`1<GitVersionOutput> get_OutputType();
    [CompilerGeneratedAttribute]
public void set_OutputType(Nullable`1<GitVersionOutput> value);
    [CompilerGeneratedAttribute]
public FilePath get_OutputFile();
    [CompilerGeneratedAttribute]
public void set_OutputFile(FilePath value);
    [CompilerGeneratedAttribute]
public FilePath get_ConfigFile();
    [CompilerGeneratedAttribute]
public void set_ConfigFile(FilePath value);
    [CompilerGeneratedAttribute]
public bool get_UpdateAssemblyInfo();
    [CompilerGeneratedAttribute]
public void set_UpdateAssemblyInfo(bool value);
    [CompilerGeneratedAttribute]
public FilePath get_UpdateAssemblyInfoFilePath();
    [CompilerGeneratedAttribute]
public void set_UpdateAssemblyInfoFilePath(FilePath value);
    [CompilerGeneratedAttribute]
public bool get_UpdateProjectFiles();
    [CompilerGeneratedAttribute]
public void set_UpdateProjectFiles(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnsureAssemblyInfo();
    [CompilerGeneratedAttribute]
public void set_EnsureAssemblyInfo(bool value);
    [CompilerGeneratedAttribute]
public bool get_UpdateWixVersionFile();
    [CompilerGeneratedAttribute]
public void set_UpdateWixVersionFile(bool value);
    [CompilerGeneratedAttribute]
public string get_ShowVariable();
    [CompilerGeneratedAttribute]
public void set_ShowVariable(string value);
    [CompilerGeneratedAttribute]
public string get_UserName();
    [CompilerGeneratedAttribute]
public void set_UserName(string value);
    [CompilerGeneratedAttribute]
public string get_Password();
    [CompilerGeneratedAttribute]
public void set_Password(string value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
    [CompilerGeneratedAttribute]
public string get_Branch();
    [CompilerGeneratedAttribute]
public void set_Branch(string value);
    [CompilerGeneratedAttribute]
public string get_Commit();
    [CompilerGeneratedAttribute]
public void set_Commit(string value);
    [CompilerGeneratedAttribute]
public bool get_NoFetch();
    [CompilerGeneratedAttribute]
public void set_NoFetch(bool value);
    [CompilerGeneratedAttribute]
public bool get_NoCache();
    [CompilerGeneratedAttribute]
public void set_NoCache(bool value);
    [CompilerGeneratedAttribute]
public bool get_NoNormalize();
    [CompilerGeneratedAttribute]
public void set_NoNormalize(bool value);
    [CompilerGeneratedAttribute]
public bool get_Diag();
    [CompilerGeneratedAttribute]
public void set_Diag(bool value);
    [CompilerGeneratedAttribute]
public DirectoryPath get_DynamicRepositoryPath();
    [CompilerGeneratedAttribute]
public void set_DynamicRepositoryPath(DirectoryPath value);
    [CompilerGeneratedAttribute]
public FilePath get_LogFilePath();
    [CompilerGeneratedAttribute]
public void set_LogFilePath(FilePath value);
    [CompilerGeneratedAttribute]
public Nullable`1<GitVersionVerbosity> get_Verbosity();
    [CompilerGeneratedAttribute]
public void set_Verbosity(Nullable`1<GitVersionVerbosity> value);
}
public enum Cake.Common.Tools.GitVersion.GitVersionVerbosity : Enum {
    public int value__;
    public static GitVersionVerbosity Quiet;
    public static GitVersionVerbosity Minimal;
    public static GitVersionVerbosity Normal;
    public static GitVersionVerbosity Verbose;
    public static GitVersionVerbosity Diagnostic;
}
[ExtensionAttribute]
[CakeAliasCategoryAttribute("ILMerge")]
public static class Cake.Common.Tools.ILMerge.ILMergeAliases : object {
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void ILMerge(ICakeContext context, FilePath outputFile, FilePath primaryAssembly, IEnumerable`1<FilePath> assemblyPaths);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void ILMerge(ICakeContext context, FilePath outputFile, FilePath primaryAssembly, IEnumerable`1<FilePath> assemblyPaths, ILMergeSettings settings);
}
public class Cake.Common.Tools.ILMerge.ILMergeRunner : Tool`1<ILMergeSettings> {
    private ICakeEnvironment _environment;
    public ILMergeRunner(IFileSystem fileSystem, ICakeEnvironment environment, IProcessRunner processRunner, IToolLocator tools);
    public void Merge(FilePath outputAssemblyPath, FilePath primaryAssemblyPath, IEnumerable`1<FilePath> assemblyPaths, ILMergeSettings settings);
    protected virtual string GetToolName();
    protected virtual IEnumerable`1<string> GetToolExecutableNames();
    private ProcessArgumentBuilder GetArguments(FilePath outputAssemblyPath, FilePath primaryAssemblyFilePath, IEnumerable`1<FilePath> assemblyPaths, ILMergeSettings settings);
    private string GetOutputParameter(FilePath outputAssemblyPath);
    private static string GetTargetKindParameter(ILMergeSettings settings);
    private static string GetTargetPlatformParameter(ILMergeSettings settings);
    private static string GetTargetPlatformString(TargetPlatformVersion version);
    private static string GetTargetKindName(TargetKind kind);
}
public class Cake.Common.Tools.ILMerge.ILMergeSettings : ToolSettings {
    [CompilerGeneratedAttribute]
private bool <Internalize>k__BackingField;
    [CompilerGeneratedAttribute]
private TargetKind <TargetKind>k__BackingField;
    [CompilerGeneratedAttribute]
private TargetPlatform <TargetPlatform>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DelaySign>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Closed>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NDebug>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CopyAttributes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowMultiple>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <KeepFirst>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <XmlDocumentation>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseFullPublicKeyForReferences>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Wildcards>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ZeroPeKind>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Union>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Align>k__BackingField;
    [CompilerGeneratedAttribute]
private FilePath <AttributeFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Log>k__BackingField;
    [CompilerGeneratedAttribute]
private FilePath <LogFile>k__BackingField;
    [CompilerGeneratedAttribute]
private FilePath <KeyFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <KeyContainer>k__BackingField;
    [CompilerGeneratedAttribute]
private DirectoryPath[] <SearchDirectories>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowDuplicateTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <DuplicateTypes>k__BackingField;
    public bool Internalize { get; public set; }
    public TargetKind TargetKind { get; public set; }
    public TargetPlatform TargetPlatform { get; public set; }
    public bool DelaySign { get; public set; }
    public bool Closed { get; public set; }
    public bool NDebug { get; public set; }
    public bool CopyAttributes { get; public set; }
    public bool AllowMultiple { get; public set; }
    public bool KeepFirst { get; public set; }
    public bool XmlDocumentation { get; public set; }
    public bool UseFullPublicKeyForReferences { get; public set; }
    public bool Wildcards { get; public set; }
    public bool ZeroPeKind { get; public set; }
    public bool Union { get; public set; }
    public Nullable`1<int> Align { get; public set; }
    public FilePath AttributeFile { get; public set; }
    public string Version { get; public set; }
    public bool Log { get; public set; }
    public FilePath LogFile { get; public set; }
    public FilePath KeyFile { get; public set; }
    public string KeyContainer { get; public set; }
    public DirectoryPath[] SearchDirectories { get; public set; }
    public bool AllowDuplicateTypes { get; public set; }
    public String[] DuplicateTypes { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Internalize();
    [CompilerGeneratedAttribute]
public void set_Internalize(bool value);
    [CompilerGeneratedAttribute]
public TargetKind get_TargetKind();
    [CompilerGeneratedAttribute]
public void set_TargetKind(TargetKind value);
    [CompilerGeneratedAttribute]
public TargetPlatform get_TargetPlatform();
    [CompilerGeneratedAttribute]
public void set_TargetPlatform(TargetPlatform value);
    [CompilerGeneratedAttribute]
public bool get_DelaySign();
    [CompilerGeneratedAttribute]
public void set_DelaySign(bool value);
    [CompilerGeneratedAttribute]
public bool get_Closed();
    [CompilerGeneratedAttribute]
public void set_Closed(bool value);
    [CompilerGeneratedAttribute]
public bool get_NDebug();
    [CompilerGeneratedAttribute]
public void set_NDebug(bool value);
    [CompilerGeneratedAttribute]
public bool get_CopyAttributes();
    [CompilerGeneratedAttribute]
public void set_CopyAttributes(bool value);
    [CompilerGeneratedAttribute]
public bool get_AllowMultiple();
    [CompilerGeneratedAttribute]
public void set_AllowMultiple(bool value);
    [CompilerGeneratedAttribute]
public bool get_KeepFirst();
    [CompilerGeneratedAttribute]
public void set_KeepFirst(bool value);
    [CompilerGeneratedAttribute]
public bool get_XmlDocumentation();
    [CompilerGeneratedAttribute]
public void set_XmlDocumentation(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseFullPublicKeyForReferences();
    [CompilerGeneratedAttribute]
public void set_UseFullPublicKeyForReferences(bool value);
    [CompilerGeneratedAttribute]
public bool get_Wildcards();
    [CompilerGeneratedAttribute]
public void set_Wildcards(bool value);
    [CompilerGeneratedAttribute]
public bool get_ZeroPeKind();
    [CompilerGeneratedAttribute]
public void set_ZeroPeKind(bool value);
    [CompilerGeneratedAttribute]
public bool get_Union();
    [CompilerGeneratedAttribute]
public void set_Union(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Align();
    [CompilerGeneratedAttribute]
public void set_Align(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public FilePath get_AttributeFile();
    [CompilerGeneratedAttribute]
public void set_AttributeFile(FilePath value);
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(string value);
    [CompilerGeneratedAttribute]
public bool get_Log();
    [CompilerGeneratedAttribute]
public void set_Log(bool value);
    [CompilerGeneratedAttribute]
public FilePath get_LogFile();
    [CompilerGeneratedAttribute]
public void set_LogFile(FilePath value);
    [CompilerGeneratedAttribute]
public FilePath get_KeyFile();
    [CompilerGeneratedAttribute]
public void set_KeyFile(FilePath value);
    [CompilerGeneratedAttribute]
public string get_KeyContainer();
    [CompilerGeneratedAttribute]
public void set_KeyContainer(string value);
    [CompilerGeneratedAttribute]
public DirectoryPath[] get_SearchDirectories();
    [CompilerGeneratedAttribute]
public void set_SearchDirectories(DirectoryPath[] value);
    [CompilerGeneratedAttribute]
public bool get_AllowDuplicateTypes();
    [CompilerGeneratedAttribute]
public void set_AllowDuplicateTypes(bool value);
    [CompilerGeneratedAttribute]
public String[] get_DuplicateTypes();
    [CompilerGeneratedAttribute]
public void set_DuplicateTypes(String[] value);
}
[CompilerGeneratedAttribute]
internal class Cake.Common.Tools.ILMerge.NamespaceDoc : object {
}
public enum Cake.Common.Tools.ILMerge.TargetKind : Enum {
    public int value__;
    public static TargetKind Default;
    public static TargetKind Dll;
    public static TargetKind Exe;
    public static TargetKind WinExe;
}
public class Cake.Common.Tools.ILMerge.TargetPlatform : object {
    [CompilerGeneratedAttribute]
private TargetPlatformVersion <Platform>k__BackingField;
    [CompilerGeneratedAttribute]
private DirectoryPath <Path>k__BackingField;
    public TargetPlatformVersion Platform { get; }
    public DirectoryPath Path { get; }
    public TargetPlatform(TargetPlatformVersion platform);
    public TargetPlatform(TargetPlatformVersion platform, DirectoryPath path);
    [CompilerGeneratedAttribute]
public TargetPlatformVersion get_Platform();
    [CompilerGeneratedAttribute]
public DirectoryPath get_Path();
}
public enum Cake.Common.Tools.ILMerge.TargetPlatformVersion : Enum {
    public int value__;
    public static TargetPlatformVersion v1;
    public static TargetPlatformVersion v11;
    public static TargetPlatformVersion v2;
    public static TargetPlatformVersion v4;
}
[ExtensionAttribute]
[CakeAliasCategoryAttribute("ILRepack")]
public static class Cake.Common.Tools.ILRepack.ILRepackAliases : object {
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void ILRepack(ICakeContext context, FilePath outputFile, FilePath primaryAssembly, IEnumerable`1<FilePath> assemblyPaths);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void ILRepack(ICakeContext context, FilePath outputFile, FilePath primaryAssembly, IEnumerable`1<FilePath> assemblyPaths, ILRepackSettings settings);
}
public class Cake.Common.Tools.ILRepack.ILRepackRunner : Tool`1<ILRepackSettings> {
    private ICakeEnvironment _environment;
    public ILRepackRunner(IFileSystem fileSystem, ICakeEnvironment environment, IProcessRunner processRunner, IToolLocator tools);
    public void Merge(FilePath outputAssemblyPath, FilePath primaryAssemblyPath, IEnumerable`1<FilePath> assemblyPaths, ILRepackSettings settings);
    protected virtual string GetToolName();
    protected virtual IEnumerable`1<string> GetToolExecutableNames();
    private ProcessArgumentBuilder GetArguments(FilePath outputAssemblyPath, FilePath primaryAssemblyFilePath, IEnumerable`1<FilePath> assemblyPaths, ILRepackSettings settings);
    private string GetOutputParameter(FilePath outputAssemblyPath);
    private static string GetTargetKindParameter(ILRepackSettings settings);
    private static string GetTargetPlatformString(TargetPlatformVersion version);
    private static string GetTargetKindName(TargetKind kind);
}
public class Cake.Common.Tools.ILRepack.ILRepackSettings : ToolSettings {
    [CompilerGeneratedAttribute]
private FilePath <Keyfile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Log>k__BackingField;
    [CompilerGeneratedAttribute]
private Version <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Union>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NDebug>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CopyAttrs>k__BackingField;
    [CompilerGeneratedAttribute]
private FilePath <Attr>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowMultiple>k__BackingField;
    [CompilerGeneratedAttribute]
private TargetKind <TargetKind>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TargetPlatformVersion> <TargetPlatform>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <XmlDocs>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<DirectoryPath> <Libs>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Internalize>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DelaySign>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AllowDup>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowDuplicateResources>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ZeroPeKind>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Wildcards>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Parallel>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Pause>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Verbose>k__BackingField;
    public FilePath Keyfile { get; public set; }
    public string Log { get; public set; }
    public Version Version { get; public set; }
    public bool Union { get; public set; }
    public bool NDebug { get; public set; }
    public bool CopyAttrs { get; public set; }
    public FilePath Attr { get; public set; }
    public bool AllowMultiple { get; public set; }
    public TargetKind TargetKind { get; public set; }
    public Nullable`1<TargetPlatformVersion> TargetPlatform { get; public set; }
    public bool XmlDocs { get; public set; }
    public List`1<DirectoryPath> Libs { get; public set; }
    public bool Internalize { get; public set; }
    public bool DelaySign { get; public set; }
    public string AllowDup { get; public set; }
    public bool AllowDuplicateResources { get; public set; }
    public bool ZeroPeKind { get; public set; }
    public bool Wildcards { get; public set; }
    public bool Parallel { get; public set; }
    public bool Pause { get; public set; }
    public bool Verbose { get; public set; }
    [CompilerGeneratedAttribute]
public FilePath get_Keyfile();
    [CompilerGeneratedAttribute]
public void set_Keyfile(FilePath value);
    [CompilerGeneratedAttribute]
public string get_Log();
    [CompilerGeneratedAttribute]
public void set_Log(string value);
    [CompilerGeneratedAttribute]
public Version get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(Version value);
    [CompilerGeneratedAttribute]
public bool get_Union();
    [CompilerGeneratedAttribute]
public void set_Union(bool value);
    [CompilerGeneratedAttribute]
public bool get_NDebug();
    [CompilerGeneratedAttribute]
public void set_NDebug(bool value);
    [CompilerGeneratedAttribute]
public bool get_CopyAttrs();
    [CompilerGeneratedAttribute]
public void set_CopyAttrs(bool value);
    [CompilerGeneratedAttribute]
public FilePath get_Attr();
    [CompilerGeneratedAttribute]
public void set_Attr(FilePath value);
    [CompilerGeneratedAttribute]
public bool get_AllowMultiple();
    [CompilerGeneratedAttribute]
public void set_AllowMultiple(bool value);
    [CompilerGeneratedAttribute]
public TargetKind get_TargetKind();
    [CompilerGeneratedAttribute]
public void set_TargetKind(TargetKind value);
    [CompilerGeneratedAttribute]
public Nullable`1<TargetPlatformVersion> get_TargetPlatform();
    [CompilerGeneratedAttribute]
public void set_TargetPlatform(Nullable`1<TargetPlatformVersion> value);
    [CompilerGeneratedAttribute]
public bool get_XmlDocs();
    [CompilerGeneratedAttribute]
public void set_XmlDocs(bool value);
    [CompilerGeneratedAttribute]
public List`1<DirectoryPath> get_Libs();
    [CompilerGeneratedAttribute]
public void set_Libs(List`1<DirectoryPath> value);
    [CompilerGeneratedAttribute]
public bool get_Internalize();
    [CompilerGeneratedAttribute]
public void set_Internalize(bool value);
    [CompilerGeneratedAttribute]
public bool get_DelaySign();
    [CompilerGeneratedAttribute]
public void set_DelaySign(bool value);
    [CompilerGeneratedAttribute]
public string get_AllowDup();
    [CompilerGeneratedAttribute]
public void set_AllowDup(string value);
    [CompilerGeneratedAttribute]
public bool get_AllowDuplicateResources();
    [CompilerGeneratedAttribute]
public void set_AllowDuplicateResources(bool value);
    [CompilerGeneratedAttribute]
public bool get_ZeroPeKind();
    [CompilerGeneratedAttribute]
public void set_ZeroPeKind(bool value);
    [CompilerGeneratedAttribute]
public bool get_Wildcards();
    [CompilerGeneratedAttribute]
public void set_Wildcards(bool value);
    [CompilerGeneratedAttribute]
public bool get_Parallel();
    [CompilerGeneratedAttribute]
public void set_Parallel(bool value);
    [CompilerGeneratedAttribute]
public bool get_Pause();
    [CompilerGeneratedAttribute]
public void set_Pause(bool value);
    [CompilerGeneratedAttribute]
public bool get_Verbose();
    [CompilerGeneratedAttribute]
public void set_Verbose(bool value);
}
[ExtensionAttribute]
[CakeAliasCategoryAttribute("Inno Setup")]
public static class Cake.Common.Tools.InnoSetup.InnoSetupAliases : object {
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void InnoSetup(ICakeContext context, FilePath scriptFile);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void InnoSetup(ICakeContext context, FilePath scriptFile, InnoSetupSettings settings);
}
public enum Cake.Common.Tools.InnoSetup.InnoSetupQuietMode : Enum {
    public int value__;
    public static InnoSetupQuietMode Off;
    public static InnoSetupQuietMode Quiet;
    public static InnoSetupQuietMode QuietWithProgress;
}
public class Cake.Common.Tools.InnoSetup.InnoSetupRunner : Tool`1<InnoSetupSettings> {
    private IRegistry _registry;
    private ICakeEnvironment _environment;
    public InnoSetupRunner(IFileSystem fileSystem, IRegistry registry, ICakeEnvironment environment, IProcessRunner processRunner, IToolLocator tools);
    public void Run(FilePath scriptFile, InnoSetupSettings settings);
    protected virtual string GetToolName();
    protected virtual IEnumerable`1<string> GetToolExecutableNames();
    protected virtual IEnumerable`1<FilePath> GetAlternativeToolPaths(InnoSetupSettings settings);
    private IEnumerable`1<string> GetAlternativeRegistryKeyPathsForVersion(Nullable`1<InnoSetupVersion> version);
    private string GetRegistryKeyPathForVersion(InnoSetupVersion version);
    private ProcessArgumentBuilder GetArguments(FilePath scriptFile, InnoSetupSettings settings);
}
public class Cake.Common.Tools.InnoSetup.InnoSetupSettings : ToolSettings {
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <Defines>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <EnableOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private DirectoryPath <OutputDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputBaseFilename>k__BackingField;
    [CompilerGeneratedAttribute]
private InnoSetupQuietMode <QuietMode>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<InnoSetupVersion> <Version>k__BackingField;
    public IDictionary`2<string, string> Defines { get; public set; }
    public Nullable`1<bool> EnableOutput { get; public set; }
    public DirectoryPath OutputDirectory { get; public set; }
    public string OutputBaseFilename { get; public set; }
    public InnoSetupQuietMode QuietMode { get; public set; }
    public Nullable`1<InnoSetupVersion> Version { get; public set; }
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_Defines();
    [CompilerGeneratedAttribute]
public void set_Defines(IDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_EnableOutput();
    [CompilerGeneratedAttribute]
public void set_EnableOutput(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public DirectoryPath get_OutputDirectory();
    [CompilerGeneratedAttribute]
public void set_OutputDirectory(DirectoryPath value);
    [CompilerGeneratedAttribute]
public string get_OutputBaseFilename();
    [CompilerGeneratedAttribute]
public void set_OutputBaseFilename(string value);
    [CompilerGeneratedAttribute]
public InnoSetupQuietMode get_QuietMode();
    [CompilerGeneratedAttribute]
public void set_QuietMode(InnoSetupQuietMode value);
    [CompilerGeneratedAttribute]
public Nullable`1<InnoSetupVersion> get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(Nullable`1<InnoSetupVersion> value);
}
public enum Cake.Common.Tools.InnoSetup.InnoSetupVersion : Enum {
    public int value__;
    public static InnoSetupVersion InnoSetup5;
    public static InnoSetupVersion InnoSetup6;
}
[ExtensionAttribute]
[CakeAliasCategoryAttribute("ReSharper")]
public static class Cake.Common.Tools.InspectCode.InspectCodeAliases : object {
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("InspectCode")]
public static void InspectCode(ICakeContext context, FilePath solution);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("InspectCode")]
public static void InspectCode(ICakeContext context, FilePath solution, InspectCodeSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("InspectCode")]
public static void InspectCodeFromConfig(ICakeContext context, FilePath configFile);
}
public class Cake.Common.Tools.InspectCode.InspectCodeRunner : Tool`1<InspectCodeSettings> {
    private IFileSystem _fileSystem;
    private ICakeEnvironment _environment;
    private ICakeLog _log;
    public InspectCodeRunner(IFileSystem fileSystem, ICakeEnvironment environment, IProcessRunner processRunner, IToolLocator tools, ICakeLog log);
    public void Run(FilePath solution, InspectCodeSettings settings);
    public void RunFromConfig(FilePath configFile);
    private void AnalyseResultsFile(FilePath resultsFilePath, bool throwOnViolations);
    private ProcessArgumentBuilder GetConfigArgument(FilePath configFile);
    private ProcessArgumentBuilder GetArguments(InspectCodeSettings settings, FilePath solution);
    protected virtual string GetToolName();
    protected virtual IEnumerable`1<string> GetToolExecutableNames(InspectCodeSettings settings);
    protected virtual IEnumerable`1<string> GetToolExecutableNames();
}
public class Cake.Common.Tools.InspectCode.InspectCodeSettings : ToolSettings {
    [CompilerGeneratedAttribute]
private FilePath <OutputFile>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SolutionWideAnalysis>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoSolutionWideAnalysis>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProjectFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <MsBuildProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Extensions>k__BackingField;
    [CompilerGeneratedAttribute]
private DirectoryPath <CachesHome>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Debug>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoBuildinSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private SettingsLayer[] <DisabledSettingsLayers>k__BackingField;
    [CompilerGeneratedAttribute]
private FilePath <Profile>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ThrowExceptionOnFindingViolations>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseX86Tool>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<InspectCodeVerbosity> <Verbosity>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<InspectCodeSeverity> <Severity>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SkipOutputAnalysis>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Build>k__BackingField;
    public FilePath OutputFile { get; public set; }
    public bool SolutionWideAnalysis { get; public set; }
    public bool NoSolutionWideAnalysis { get; public set; }
    public string ProjectFilter { get; public set; }
    public Dictionary`2<string, string> MsBuildProperties { get; public set; }
    public String[] Extensions { get; public set; }
    public DirectoryPath CachesHome { get; public set; }
    public bool Debug { get; public set; }
    public bool NoBuildinSettings { get; public set; }
    public SettingsLayer[] DisabledSettingsLayers { get; public set; }
    public FilePath Profile { get; public set; }
    public bool ThrowExceptionOnFindingViolations { get; public set; }
    public bool UseX86Tool { get; public set; }
    public Nullable`1<InspectCodeVerbosity> Verbosity { get; public set; }
    public Nullable`1<InspectCodeSeverity> Severity { get; public set; }
    public bool SkipOutputAnalysis { get; public set; }
    public Nullable`1<bool> Build { get; public set; }
    [CompilerGeneratedAttribute]
public FilePath get_OutputFile();
    [CompilerGeneratedAttribute]
public void set_OutputFile(FilePath value);
    [CompilerGeneratedAttribute]
public bool get_SolutionWideAnalysis();
    [CompilerGeneratedAttribute]
public void set_SolutionWideAnalysis(bool value);
    [CompilerGeneratedAttribute]
public bool get_NoSolutionWideAnalysis();
    [CompilerGeneratedAttribute]
public void set_NoSolutionWideAnalysis(bool value);
    [CompilerGeneratedAttribute]
public string get_ProjectFilter();
    [CompilerGeneratedAttribute]
public void set_ProjectFilter(string value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_MsBuildProperties();
    [CompilerGeneratedAttribute]
public void set_MsBuildProperties(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public String[] get_Extensions();
    [CompilerGeneratedAttribute]
public void set_Extensions(String[] value);
    [CompilerGeneratedAttribute]
public DirectoryPath get_CachesHome();
    [CompilerGeneratedAttribute]
public void set_CachesHome(DirectoryPath value);
    [CompilerGeneratedAttribute]
public bool get_Debug();
    [CompilerGeneratedAttribute]
public void set_Debug(bool value);
    [CompilerGeneratedAttribute]
public bool get_NoBuildinSettings();
    [CompilerGeneratedAttribute]
public void set_NoBuildinSettings(bool value);
    [CompilerGeneratedAttribute]
public SettingsLayer[] get_DisabledSettingsLayers();
    [CompilerGeneratedAttribute]
public void set_DisabledSettingsLayers(SettingsLayer[] value);
    [CompilerGeneratedAttribute]
public FilePath get_Profile();
    [CompilerGeneratedAttribute]
public void set_Profile(FilePath value);
    [CompilerGeneratedAttribute]
public bool get_ThrowExceptionOnFindingViolations();
    [CompilerGeneratedAttribute]
public void set_ThrowExceptionOnFindingViolations(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseX86Tool();
    [CompilerGeneratedAttribute]
public void set_UseX86Tool(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<InspectCodeVerbosity> get_Verbosity();
    [CompilerGeneratedAttribute]
public void set_Verbosity(Nullable`1<InspectCodeVerbosity> value);
    [CompilerGeneratedAttribute]
public Nullable`1<InspectCodeSeverity> get_Severity();
    [CompilerGeneratedAttribute]
public void set_Severity(Nullable`1<InspectCodeSeverity> value);
    [CompilerGeneratedAttribute]
public bool get_SkipOutputAnalysis();
    [CompilerGeneratedAttribute]
public void set_SkipOutputAnalysis(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Build();
    [CompilerGeneratedAttribute]
public void set_Build(Nullable`1<bool> value);
}
public enum Cake.Common.Tools.InspectCode.InspectCodeSeverity : Enum {
    public int value__;
    public static InspectCodeSeverity Info;
    public static InspectCodeSeverity Hint;
    public static InspectCodeSeverity Suggestion;
    public static InspectCodeSeverity Warning;
    public static InspectCodeSeverity Error;
}
public enum Cake.Common.Tools.InspectCode.InspectCodeVerbosity : Enum {
    public int value__;
    public static InspectCodeVerbosity Off;
    public static InspectCodeVerbosity Fatal;
    public static InspectCodeVerbosity Error;
    public static InspectCodeVerbosity Warn;
    public static InspectCodeVerbosity Info;
    public static InspectCodeVerbosity Verbose;
    public static InspectCodeVerbosity Trace;
}
public enum Cake.Common.Tools.InspectCode.SettingsLayer : Enum {
    public int value__;
    public static SettingsLayer GlobalAll;
    public static SettingsLayer GlobalPerProduct;
    public static SettingsLayer SolutionShared;
    public static SettingsLayer SolutionPersonal;
    public static SettingsLayer ProjectShared;
    public static SettingsLayer ProjectPersonal;
}
[ExtensionAttribute]
[CakeAliasCategoryAttribute("MSBuild")]
public static class Cake.Common.Tools.MSBuild.MSBuildAliases : object {
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void MSBuild(ICakeContext context, FilePath solution);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void MSBuild(ICakeContext context, FilePath solution, Action`1<MSBuildSettings> configurator);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void MSBuild(ICakeContext context, FilePath solution, MSBuildSettings settings);
}
public enum Cake.Common.Tools.MSBuild.MSBuildBinaryLogImports : Enum {
    public int value__;
    public static MSBuildBinaryLogImports Unspecified;
    public static MSBuildBinaryLogImports None;
    public static MSBuildBinaryLogImports Embed;
    public static MSBuildBinaryLogImports ZipFile;
}
public class Cake.Common.Tools.MSBuild.MSBuildBinaryLogSettings : object {
    [CompilerGeneratedAttribute]
private bool <Enabled>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    [CompilerGeneratedAttribute]
private MSBuildBinaryLogImports <Imports>k__BackingField;
    public bool Enabled { get; public set; }
    public string FileName { get; public set; }
    public MSBuildBinaryLogImports Imports { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Enabled();
    [CompilerGeneratedAttribute]
public void set_Enabled(bool value);
    [CompilerGeneratedAttribute]
public string get_FileName();
    [CompilerGeneratedAttribute]
public void set_FileName(string value);
    [CompilerGeneratedAttribute]
public MSBuildBinaryLogImports get_Imports();
    [CompilerGeneratedAttribute]
public void set_Imports(MSBuildBinaryLogImports value);
}
public class Cake.Common.Tools.MSBuild.MSBuildFileLogger : object {
    [CompilerGeneratedAttribute]
private bool <PerformanceSummaryEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SummaryDisabled>k__BackingField;
    [CompilerGeneratedAttribute]
private MSBuildFileLoggerOutput <MSBuildFileLoggerOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HideVerboseItemAndPropertyList>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowCommandLine>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowTimestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowEventId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Verbosity> <Verbosity>k__BackingField;
    [CompilerGeneratedAttribute]
private FilePath <LogFile>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AppendToLogFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Encoding>k__BackingField;
    public bool PerformanceSummaryEnabled { get; public set; }
    public bool SummaryDisabled { get; public set; }
    public MSBuildFileLoggerOutput MSBuildFileLoggerOutput { get; public set; }
    public bool HideVerboseItemAndPropertyList { get; public set; }
    public bool ShowCommandLine { get; public set; }
    public bool ShowTimestamp { get; public set; }
    public bool ShowEventId { get; public set; }
    public Nullable`1<Verbosity> Verbosity { get; public set; }
    public FilePath LogFile { get; public set; }
    public bool AppendToLogFile { get; public set; }
    public string Encoding { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_PerformanceSummaryEnabled();
    [CompilerGeneratedAttribute]
public void set_PerformanceSummaryEnabled(bool value);
    [CompilerGeneratedAttribute]
public bool get_SummaryDisabled();
    [CompilerGeneratedAttribute]
public void set_SummaryDisabled(bool value);
    [CompilerGeneratedAttribute]
public MSBuildFileLoggerOutput get_MSBuildFileLoggerOutput();
    [CompilerGeneratedAttribute]
public void set_MSBuildFileLoggerOutput(MSBuildFileLoggerOutput value);
    [CompilerGeneratedAttribute]
public bool get_HideVerboseItemAndPropertyList();
    [CompilerGeneratedAttribute]
public void set_HideVerboseItemAndPropertyList(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShowCommandLine();
    [CompilerGeneratedAttribute]
public void set_ShowCommandLine(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShowTimestamp();
    [CompilerGeneratedAttribute]
public void set_ShowTimestamp(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShowEventId();
    [CompilerGeneratedAttribute]
public void set_ShowEventId(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<Verbosity> get_Verbosity();
    [CompilerGeneratedAttribute]
public void set_Verbosity(Nullable`1<Verbosity> value);
    [CompilerGeneratedAttribute]
public FilePath get_LogFile();
    [CompilerGeneratedAttribute]
public void set_LogFile(FilePath value);
    [CompilerGeneratedAttribute]
public bool get_AppendToLogFile();
    [CompilerGeneratedAttribute]
public void set_AppendToLogFile(bool value);
    [CompilerGeneratedAttribute]
public string get_Encoding();
    [CompilerGeneratedAttribute]
public void set_Encoding(string value);
    public string GetParameters(ICakeEnvironment environment);
}
public enum Cake.Common.Tools.MSBuild.MSBuildFileLoggerOutput : Enum {
    public int value__;
    public static MSBuildFileLoggerOutput All;
    public static MSBuildFileLoggerOutput ErrorsOnly;
    public static MSBuildFileLoggerOutput WarningsOnly;
}
public class Cake.Common.Tools.MSBuild.MSBuildLogger : object {
    [CompilerGeneratedAttribute]
private string <Assembly>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Class>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Parameters>k__BackingField;
    public string Assembly { get; public set; }
    public string Class { get; public set; }
    public string Parameters { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Assembly();
    [CompilerGeneratedAttribute]
public void set_Assembly(string value);
    [CompilerGeneratedAttribute]
public string get_Class();
    [CompilerGeneratedAttribute]
public void set_Class(string value);
    [CompilerGeneratedAttribute]
public string get_Parameters();
    [CompilerGeneratedAttribute]
public void set_Parameters(string value);
}
public enum Cake.Common.Tools.MSBuild.MSBuildPlatform : Enum {
    public int value__;
    public static MSBuildPlatform Automatic;
    public static MSBuildPlatform x86;
    public static MSBuildPlatform x64;
}
[ExtensionAttribute]
internal static class Cake.Common.Tools.MSBuild.MSBuildPropertyExtensions : object {
    private static IReadOnlyDictionary`2<char, string> _escapeLookup;
    private static HashSet`1<string> _propertiesNotEscapeSemicolons;
    private static MSBuildPropertyExtensions();
    [ExtensionAttribute]
internal static string BuildMSBuildPropertyParameterString(KeyValuePair`2<string, TValue> property);
    [ExtensionAttribute]
private static string EscapeMSBuildPropertySpecialCharacters(string value, bool escapeSemicolons);
    [ExtensionAttribute]
private static bool AllowEscapeSemicolon(string propertyName);
}
internal static class Cake.Common.Tools.MSBuild.MSBuildResolver : object {
    public static FilePath GetMSBuildPath(IFileSystem fileSystem, ICakeEnvironment environment, MSBuildPlatform buildPlatform, MSBuildSettings settings);
    private static DirectoryPath GetHighestAvailableMSBuildVersion(IFileSystem fileSystem, ICakeEnvironment environment, MSBuildPlatform buildPlatform, bool allowPreview);
    private static DirectoryPath GetMSBuildPath(IFileSystem fileSystem, ICakeEnvironment environment, MSBuildVersion version, MSBuildPlatform buildPlatform, string customVersion, bool allowPreview);
    private static DirectoryPath GetVisualStudioPath(ICakeEnvironment environment, MSBuildPlatform buildPlatform, string version);
    private static DirectoryPath GetVisualStudio2017Path(IFileSystem fileSystem, ICakeEnvironment environment, MSBuildPlatform buildPlatform, bool allowPreviewVersion);
    private static DirectoryPath GetVisualStudio2019Path(IFileSystem fileSystem, ICakeEnvironment environment, MSBuildPlatform buildPlatform, bool allowPreviewVersion);
    private static DirectoryPath GetVisualStudio2022Path(IFileSystem fileSystem, ICakeEnvironment environment, MSBuildPlatform buildPlatform, bool allowPreviewVersion);
    private static DirectoryPath GetFrameworkPath(ICakeEnvironment environment, MSBuildPlatform buildPlatform, string version);
}
public class Cake.Common.Tools.MSBuild.MSBuildRunner : Tool`1<MSBuildSettings> {
    private ICakeEnvironment _environment;
    private IFileSystem _fileSystem;
    public MSBuildRunner(IFileSystem fileSystem, ICakeEnvironment environment, IProcessRunner runner, IToolLocator tools);
    public void Run(FilePath solution, MSBuildSettings settings);
    private ProcessArgumentBuilder GetArguments(FilePath projectFile, MSBuildSettings settings);
    private string GetLoggerArgument(int index, MSBuildFileLogger logger);
    private static string GetLoggerArgument(MSBuildLogger logger);
    private static string GetPlatformName(PlatformTarget platform, bool isSolution);
    [IteratorStateMachineAttribute("Cake.Common.Tools.MSBuild.MSBuildRunner/<GetPropertyArguments>d__8")]
private static IEnumerable`1<string> GetPropertyArguments(IDictionary`2<string, IList`1<string>> properties);
    protected virtual string GetToolName();
    protected virtual IEnumerable`1<string> GetToolExecutableNames();
    protected virtual IEnumerable`1<FilePath> GetAlternativeToolPaths(MSBuildSettings settings);
    [CompilerGeneratedAttribute]
private string <GetArguments>b__4_0(MSBuildFileLogger logger, int index);
}
public class Cake.Common.Tools.MSBuild.MSBuildSettings : ToolSettings {
    private HashSet`1<string> _targets;
    private Dictionary`2<string, IList`1<string>> _properties;
    private List`1<MSBuildLogger> _loggers;
    private List`1<MSBuildFileLogger> _fileLoggers;
    private HashSet`1<string> _warningsAsErrorCodes;
    private HashSet`1<string> _warningsAsMessageCodes;
    private HashSet`1<string> _consoleLoggerParameters;
    [CompilerGeneratedAttribute]
private string <CustomVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<PlatformTarget> <PlatformTarget>k__BackingField;
    [CompilerGeneratedAttribute]
private MSBuildPlatform <MSBuildPlatform>k__BackingField;
    [CompilerGeneratedAttribute]
private MSBuildToolVersion <ToolVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Configuration>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxCpuCount>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <NodeReuse>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <DetailedSummary>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <NoConsoleLogger>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <NoLogo>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <ContinuousIntegrationBuild>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <NoImplicitTarget>k__BackingField;
    [CompilerGeneratedAttribute]
private Verbosity <Verbosity>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IncludeSymbols>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SymbolPackageFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private MSBuildBinaryLogSettings <BinaryLogger>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <WarningsAsError>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Restore>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <RestoreLockedMode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowPreviewVersion>k__BackingField;
    internal string CustomVersion { get; internal set; }
    public ISet`1<string> Targets { get; }
    public IDictionary`2<string, IList`1<string>> Properties { get; }
    public Nullable`1<PlatformTarget> PlatformTarget { get; public set; }
    public MSBuildPlatform MSBuildPlatform { get; public set; }
    public string Target { get; public set; }
    public MSBuildToolVersion ToolVersion { get; public set; }
    public string Configuration { get; public set; }
    public Nullable`1<int> MaxCpuCount { get; public set; }
    public Nullable`1<bool> NodeReuse { get; public set; }
    public Nullable`1<bool> DetailedSummary { get; public set; }
    public Nullable`1<bool> NoConsoleLogger { get; public set; }
    public Nullable`1<bool> NoLogo { get; public set; }
    public string Version { get; public set; }
    public string VersionPrefix { get; public set; }
    public string VersionSuffix { get; public set; }
    public string FileVersion { get; public set; }
    public string AssemblyVersion { get; public set; }
    public string InformationalVersion { get; public set; }
    public string PackageVersion { get; public set; }
    public string PackageReleaseNotes { get; public set; }
    public Nullable`1<bool> ContinuousIntegrationBuild { get; public set; }
    public Nullable`1<bool> NoImplicitTarget { get; public set; }
    public Verbosity Verbosity { get; public set; }
    public Nullable`1<bool> IncludeSymbols { get; public set; }
    public string SymbolPackageFormat { get; public set; }
    public ICollection`1<MSBuildLogger> Loggers { get; }
    public ICollection`1<MSBuildFileLogger> FileLoggers { get; }
    public MSBuildBinaryLogSettings BinaryLogger { get; public set; }
    public bool WarningsAsError { get; public set; }
    public ISet`1<string> WarningsAsErrorCodes { get; }
    public ISet`1<string> WarningsAsMessageCodes { get; }
    public bool Restore { get; public set; }
    public Nullable`1<bool> RestoreLockedMode { get; public set; }
    public ISet`1<string> ConsoleLoggerParameters { get; }
    public bool AllowPreviewVersion { get; public set; }
    [CompilerGeneratedAttribute]
internal string get_CustomVersion();
    [CompilerGeneratedAttribute]
internal void set_CustomVersion(string value);
    public ISet`1<string> get_Targets();
    public IDictionary`2<string, IList`1<string>> get_Properties();
    [CompilerGeneratedAttribute]
public Nullable`1<PlatformTarget> get_PlatformTarget();
    [CompilerGeneratedAttribute]
public void set_PlatformTarget(Nullable`1<PlatformTarget> value);
    [CompilerGeneratedAttribute]
public MSBuildPlatform get_MSBuildPlatform();
    [CompilerGeneratedAttribute]
public void set_MSBuildPlatform(MSBuildPlatform value);
    public string get_Target();
    public void set_Target(string value);
    [CompilerGeneratedAttribute]
public MSBuildToolVersion get_ToolVersion();
    [CompilerGeneratedAttribute]
public void set_ToolVersion(MSBuildToolVersion value);
    [CompilerGeneratedAttribute]
public string get_Configuration();
    [CompilerGeneratedAttribute]
public void set_Configuration(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaxCpuCount();
    [CompilerGeneratedAttribute]
public void set_MaxCpuCount(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_NodeReuse();
    [CompilerGeneratedAttribute]
public void set_NodeReuse(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_DetailedSummary();
    [CompilerGeneratedAttribute]
public void set_DetailedSummary(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_NoConsoleLogger();
    [CompilerGeneratedAttribute]
public void set_NoConsoleLogger(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_NoLogo();
    [CompilerGeneratedAttribute]
public void set_NoLogo(Nullable`1<bool> value);
    public string get_Version();
    public void set_Version(string value);
    public string get_VersionPrefix();
    public void set_VersionPrefix(string value);
    public string get_VersionSuffix();
    public void set_VersionSuffix(string value);
    public string get_FileVersion();
    public void set_FileVersion(string value);
    public string get_AssemblyVersion();
    public void set_AssemblyVersion(string value);
    public string get_InformationalVersion();
    public void set_InformationalVersion(string value);
    public string get_PackageVersion();
    public void set_PackageVersion(string value);
    public string get_PackageReleaseNotes();
    public void set_PackageReleaseNotes(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_ContinuousIntegrationBuild();
    [CompilerGeneratedAttribute]
public void set_ContinuousIntegrationBuild(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_NoImplicitTarget();
    [CompilerGeneratedAttribute]
public void set_NoImplicitTarget(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Verbosity get_Verbosity();
    [CompilerGeneratedAttribute]
public void set_Verbosity(Verbosity value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IncludeSymbols();
    [CompilerGeneratedAttribute]
public void set_IncludeSymbols(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_SymbolPackageFormat();
    [CompilerGeneratedAttribute]
public void set_SymbolPackageFormat(string value);
    public ICollection`1<MSBuildLogger> get_Loggers();
    public ICollection`1<MSBuildFileLogger> get_FileLoggers();
    [CompilerGeneratedAttribute]
public MSBuildBinaryLogSettings get_BinaryLogger();
    [CompilerGeneratedAttribute]
public void set_BinaryLogger(MSBuildBinaryLogSettings value);
    [CompilerGeneratedAttribute]
public bool get_WarningsAsError();
    [CompilerGeneratedAttribute]
public void set_WarningsAsError(bool value);
    public ISet`1<string> get_WarningsAsErrorCodes();
    public ISet`1<string> get_WarningsAsMessageCodes();
    [CompilerGeneratedAttribute]
public bool get_Restore();
    [CompilerGeneratedAttribute]
public void set_Restore(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_RestoreLockedMode();
    [CompilerGeneratedAttribute]
public void set_RestoreLockedMode(Nullable`1<bool> value);
    public ISet`1<string> get_ConsoleLoggerParameters();
    [CompilerGeneratedAttribute]
public bool get_AllowPreviewVersion();
    [CompilerGeneratedAttribute]
public void set_AllowPreviewVersion(bool value);
    private string GetPropertyValueOrDefault(string propertyName, string default);
}
[ExtensionAttribute]
public static class Cake.Common.Tools.MSBuild.MSBuildSettingsExtensions : object {
    [ExtensionAttribute]
public static MSBuildSettings WithTarget(MSBuildSettings settings, string target);
    [ExtensionAttribute]
public static MSBuildSettings UseToolVersion(MSBuildSettings settings, MSBuildToolVersion version);
    [ExtensionAttribute]
public static MSBuildSettings UseToolVersion(MSBuildSettings settings, string version);
    private static MSBuildToolVersion GetMSBuildToolVersionFromString(string version);
    [ExtensionAttribute]
public static MSBuildSettings SetPlatformTarget(MSBuildSettings settings, PlatformTarget target);
    [ExtensionAttribute]
public static MSBuildSettings SetPlatformTarget(MSBuildSettings settings, string target);
    [ExtensionAttribute]
public static MSBuildSettings SetMSBuildPlatform(MSBuildSettings settings, MSBuildPlatform platform);
    [ExtensionAttribute]
public static MSBuildSettings WithProperty(MSBuildSettings settings, string name, String[] values);
    [ExtensionAttribute]
public static MSBuildSettings SetConfiguration(MSBuildSettings settings, string configuration);
    [ExtensionAttribute]
public static MSBuildSettings SetMaxCpuCount(MSBuildSettings settings, Nullable`1<int> maxCpuCount);
    [ExtensionAttribute]
public static MSBuildSettings SetNodeReuse(MSBuildSettings settings, bool reuse);
    [ExtensionAttribute]
public static MSBuildSettings SetDetailedSummary(MSBuildSettings settings, bool detailedSummary);
    [ExtensionAttribute]
public static MSBuildSettings SetNoConsoleLogger(MSBuildSettings settings, bool noConsoleLog);
    [ExtensionAttribute]
public static MSBuildSettings SetNoLogo(MSBuildSettings settings, bool noLogo);
    [ExtensionAttribute]
public static MSBuildSettings SetVersion(MSBuildSettings settings, string version);
    [ExtensionAttribute]
public static MSBuildSettings SetVersionPrefix(MSBuildSettings settings, string versionPrefix);
    [ExtensionAttribute]
public static MSBuildSettings SetVersionSuffix(MSBuildSettings settings, string versionSuffix);
    [ExtensionAttribute]
public static MSBuildSettings SetFileVersion(MSBuildSettings settings, string fileVersion);
    [ExtensionAttribute]
public static MSBuildSettings SetAssemblyVersion(MSBuildSettings settings, string assemblyVersion);
    [ExtensionAttribute]
public static MSBuildSettings SetInformationalVersion(MSBuildSettings settings, string informationalVersion);
    [ExtensionAttribute]
public static MSBuildSettings SetPackageVersion(MSBuildSettings settings, string packageVersion);
    [ExtensionAttribute]
public static MSBuildSettings SetPackageReleaseNotes(MSBuildSettings settings, string packageReleaseNotes);
    [ExtensionAttribute]
public static MSBuildSettings SetContinuousIntegrationBuild(MSBuildSettings settings, Nullable`1<bool> continuousIntegrationBuild);
    [ExtensionAttribute]
public static MSBuildSettings SetNoImplicitTarget(MSBuildSettings settings, bool noImplicitTarget);
    [ExtensionAttribute]
public static MSBuildSettings SetIncludeSymbols(MSBuildSettings settings, bool includeSymbols);
    [ExtensionAttribute]
public static MSBuildSettings SetSymbolPackageFormat(MSBuildSettings settings, string symbolPackageFormat);
    [ExtensionAttribute]
public static MSBuildSettings SetVerbosity(MSBuildSettings settings, Verbosity verbosity);
    [ExtensionAttribute]
public static MSBuildSettings WithLogger(MSBuildSettings settings, string loggerAssembly, string loggerClass, string loggerParameters);
    [ExtensionAttribute]
public static MSBuildSettings AddFileLogger(MSBuildSettings settings);
    [ExtensionAttribute]
public static MSBuildSettings AddFileLogger(MSBuildSettings settings, MSBuildFileLogger fileLoggerParameters);
    [ExtensionAttribute]
public static MSBuildSettings EnableBinaryLogger(MSBuildSettings settings);
    [ExtensionAttribute]
public static MSBuildSettings EnableBinaryLogger(MSBuildSettings settings, MSBuildBinaryLogImports imports);
    [ExtensionAttribute]
public static MSBuildSettings EnableBinaryLogger(MSBuildSettings settings, string fileName);
    [ExtensionAttribute]
public static MSBuildSettings EnableBinaryLogger(MSBuildSettings settings, string fileName, MSBuildBinaryLogImports imports);
    [ExtensionAttribute]
public static MSBuildSettings WithWarningsAsError(MSBuildSettings settings, String[] codes);
    [ExtensionAttribute]
public static MSBuildSettings WithWarningsAsMessage(MSBuildSettings settings, String[] codes);
    [ExtensionAttribute]
public static MSBuildSettings WithRestore(MSBuildSettings settings);
    [ExtensionAttribute]
public static MSBuildSettings SetRestoreLockedMode(MSBuildSettings settings, bool restoreLockedMode);
    [ExtensionAttribute]
public static MSBuildSettings WithConsoleLoggerParameter(MSBuildSettings settings, string parameter);
}
public enum Cake.Common.Tools.MSBuild.MSBuildToolVersion : Enum {
    public int value__;
    public static MSBuildToolVersion Default;
    public static MSBuildToolVersion NET20;
    public static MSBuildToolVersion NET30;
    public static MSBuildToolVersion VS2005;
    public static MSBuildToolVersion NET35;
    public static MSBuildToolVersion VS2008;
    public static MSBuildToolVersion NET40;
    public static MSBuildToolVersion NET45;
    public static MSBuildToolVersion VS2010;
    public static MSBuildToolVersion VS2011;
    public static MSBuildToolVersion VS2012;
    public static MSBuildToolVersion NET451;
    public static MSBuildToolVersion NET452;
    public static MSBuildToolVersion VS2013;
    public static MSBuildToolVersion VS2015;
    public static MSBuildToolVersion NET46;
    public static MSBuildToolVersion VS2017;
    public static MSBuildToolVersion VS2019;
    public static MSBuildToolVersion VSCustom;
    public static MSBuildToolVersion NETCustom;
    public static MSBuildToolVersion VS2022;
}
[ExtensionAttribute]
public static class Cake.Common.Tools.MSBuild.MSBuildVerbosityExtensions : object {
    [ExtensionAttribute]
public static string GetMSBuildVerbosityName(Verbosity verbosity);
    [ExtensionAttribute]
public static Verbosity GetMSBuildVerbosity(string verbosity);
}
public enum Cake.Common.Tools.MSBuild.MSBuildVersion : Enum {
    public int value__;
    public static MSBuildVersion MSBuild20;
    public static MSBuildVersion MSBuild35;
    public static MSBuildVersion MSBuild4;
    public static MSBuildVersion MSBuild12;
    public static MSBuildVersion MSBuild14;
    public static MSBuildVersion MSBuild15;
    public static MSBuildVersion MSBuild16;
    public static MSBuildVersion MSBuildCustomVS;
    public static MSBuildVersion MSBuildNETCustom;
    public static MSBuildVersion MSBuild17;
}
[CompilerGeneratedAttribute]
internal class Cake.Common.Tools.MSBuild.NamespaceDoc : object {
}
public enum Cake.Common.Tools.MSBuild.PlatformTarget : Enum {
    public int value__;
    public static PlatformTarget MSIL;
    public static PlatformTarget x86;
    public static PlatformTarget x64;
    public static PlatformTarget ARM;
    public static PlatformTarget Win32;
    public static PlatformTarget ARM64;
    public static PlatformTarget ARMv6;
    public static PlatformTarget ARMv7;
    public static PlatformTarget ARMv7s;
}
[ExtensionAttribute]
[CakeAliasCategoryAttribute("MSpec")]
public static class Cake.Common.Tools.MSpec.MSpecAliases : object {
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void MSpec(ICakeContext context, GlobPattern pattern);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void MSpec(ICakeContext context, GlobPattern pattern, MSpecSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void MSpec(ICakeContext context, IEnumerable`1<string> assemblies);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void MSpec(ICakeContext context, IEnumerable`1<FilePath> assemblies);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void MSpec(ICakeContext context, IEnumerable`1<string> assemblies, MSpecSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void MSpec(ICakeContext context, IEnumerable`1<FilePath> assemblies, MSpecSettings settings);
}
public class Cake.Common.Tools.MSpec.MSpecRunner : Tool`1<MSpecSettings> {
    private ICakeEnvironment _environment;
    private bool _useX86;
    public MSpecRunner(IFileSystem fileSystem, ICakeEnvironment environment, IProcessRunner processRunner, IToolLocator tools);
    public void Run(IEnumerable`1<FilePath> assemblyPaths, MSpecSettings settings);
    private ProcessArgumentBuilder GetArguments(IReadOnlyList`1<FilePath> assemblyPaths, MSpecSettings settings);
    private static void GeneralSettings(MSpecSettings settings, ProcessArgumentBuilder builder);
    private static void BuildServerSettings(MSpecSettings settings, ProcessArgumentBuilder builder);
    private void FilterTests(MSpecSettings settings, ProcessArgumentBuilder builder);
    private void AssembliesToTest(IReadOnlyList`1<FilePath> assemblyPaths, ProcessArgumentBuilder builder);
    private void ReportSettings(IReadOnlyList`1<FilePath> assemblyPaths, MSpecSettings settings, ProcessArgumentBuilder builder);
    protected virtual string GetToolName();
    protected virtual IEnumerable`1<string> GetToolExecutableNames();
}
internal static class Cake.Common.Tools.MSpec.MSpecRunnerUtilities : object {
    internal static FilePath GetReportFileName(IReadOnlyList`1<FilePath> assemblyPaths, MSpecSettings settings);
}
public class Cake.Common.Tools.MSpec.MSpecSettings : ToolSettings {
    [CompilerGeneratedAttribute]
private FilePath <Filters>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TeamCity>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoColor>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <XmlReport>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HtmlReport>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReportName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Include>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Exclude>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TimeInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Silent>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Progress>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Wait>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoTeamCity>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AppVeyor>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoAppVeyor>k__BackingField;
    [CompilerGeneratedAttribute]
private DirectoryPath <OutputDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseX86>k__BackingField;
    public FilePath Filters { get; public set; }
    public bool TeamCity { get; public set; }
    public bool NoColor { get; public set; }
    public bool XmlReport { get; public set; }
    public bool HtmlReport { get; public set; }
    public string ReportName { get; public set; }
    public string Include { get; public set; }
    public string Exclude { get; public set; }
    public bool TimeInfo { get; public set; }
    public bool Silent { get; public set; }
    public bool Progress { get; public set; }
    public bool Wait { get; public set; }
    public bool NoTeamCity { get; public set; }
    public bool AppVeyor { get; public set; }
    public bool NoAppVeyor { get; public set; }
    public DirectoryPath OutputDirectory { get; public set; }
    public bool UseX86 { get; public set; }
    [CompilerGeneratedAttribute]
public FilePath get_Filters();
    [CompilerGeneratedAttribute]
public void set_Filters(FilePath value);
    [CompilerGeneratedAttribute]
public bool get_TeamCity();
    [CompilerGeneratedAttribute]
public void set_TeamCity(bool value);
    [CompilerGeneratedAttribute]
public bool get_NoColor();
    [CompilerGeneratedAttribute]
public void set_NoColor(bool value);
    [CompilerGeneratedAttribute]
public bool get_XmlReport();
    [CompilerGeneratedAttribute]
public void set_XmlReport(bool value);
    [CompilerGeneratedAttribute]
public bool get_HtmlReport();
    [CompilerGeneratedAttribute]
public void set_HtmlReport(bool value);
    [CompilerGeneratedAttribute]
public string get_ReportName();
    [CompilerGeneratedAttribute]
public void set_ReportName(string value);
    [CompilerGeneratedAttribute]
public string get_Include();
    [CompilerGeneratedAttribute]
public void set_Include(string value);
    [CompilerGeneratedAttribute]
public string get_Exclude();
    [CompilerGeneratedAttribute]
public void set_Exclude(string value);
    [CompilerGeneratedAttribute]
public bool get_TimeInfo();
    [CompilerGeneratedAttribute]
public void set_TimeInfo(bool value);
    [CompilerGeneratedAttribute]
public bool get_Silent();
    [CompilerGeneratedAttribute]
public void set_Silent(bool value);
    [CompilerGeneratedAttribute]
public bool get_Progress();
    [CompilerGeneratedAttribute]
public void set_Progress(bool value);
    [CompilerGeneratedAttribute]
public bool get_Wait();
    [CompilerGeneratedAttribute]
public void set_Wait(bool value);
    [CompilerGeneratedAttribute]
public bool get_NoTeamCity();
    [CompilerGeneratedAttribute]
public void set_NoTeamCity(bool value);
    [CompilerGeneratedAttribute]
public bool get_AppVeyor();
    [CompilerGeneratedAttribute]
public void set_AppVeyor(bool value);
    [CompilerGeneratedAttribute]
public bool get_NoAppVeyor();
    [CompilerGeneratedAttribute]
public void set_NoAppVeyor(bool value);
    [CompilerGeneratedAttribute]
public DirectoryPath get_OutputDirectory();
    [CompilerGeneratedAttribute]
public void set_OutputDirectory(DirectoryPath value);
    [CompilerGeneratedAttribute]
public bool get_UseX86();
    [CompilerGeneratedAttribute]
public void set_UseX86(bool value);
}
[ExtensionAttribute]
[CakeAliasCategoryAttribute("MSTest")]
public static class Cake.Common.Tools.MSTest.MSTestAliases : object {
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void MSTest(ICakeContext context, GlobPattern pattern);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void MSTest(ICakeContext context, GlobPattern pattern, MSTestSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void MSTest(ICakeContext context, IEnumerable`1<FilePath> assemblyPaths);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void MSTest(ICakeContext context, IEnumerable`1<FilePath> assemblyPaths, MSTestSettings settings);
}
public class Cake.Common.Tools.MSTest.MSTestRunner : Tool`1<MSTestSettings> {
    private IFileSystem _fileSystem;
    private ICakeEnvironment _environment;
    public MSTestRunner(IFileSystem fileSystem, ICakeEnvironment environment, IProcessRunner processRunner, IToolLocator tools);
    public void Run(IEnumerable`1<FilePath> assemblyPaths, MSTestSettings settings);
    private ProcessArgumentBuilder GetArguments(IEnumerable`1<FilePath> assemblyPaths, MSTestSettings settings);
    protected virtual string GetToolName();
    protected virtual IEnumerable`1<string> GetToolExecutableNames();
    [IteratorStateMachineAttribute("Cake.Common.Tools.MSTest.MSTestRunner/<GetAlternativeToolPaths>d__7")]
protected virtual IEnumerable`1<FilePath> GetAlternativeToolPaths(MSTestSettings settings);
    private FilePath GetCommonToolPath(string environmentVariable);
}
public class Cake.Common.Tools.MSTest.MSTestSettings : ToolSettings {
    [CompilerGeneratedAttribute]
private bool <NoIsolation>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Category>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ResultsFile>k__BackingField;
    [CompilerGeneratedAttribute]
private FilePath <TestSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowPreviewVersion>k__BackingField;
    public bool NoIsolation { get; public set; }
    public string Category { get; public set; }
    public string ResultsFile { get; public set; }
    public FilePath TestSettings { get; public set; }
    public bool AllowPreviewVersion { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_NoIsolation();
    [CompilerGeneratedAttribute]
public void set_NoIsolation(bool value);
    [CompilerGeneratedAttribute]
public string get_Category();
    [CompilerGeneratedAttribute]
public void set_Category(string value);
    [CompilerGeneratedAttribute]
public string get_ResultsFile();
    [CompilerGeneratedAttribute]
public void set_ResultsFile(string value);
    [CompilerGeneratedAttribute]
public FilePath get_TestSettings();
    [CompilerGeneratedAttribute]
public void set_TestSettings(FilePath value);
    [CompilerGeneratedAttribute]
public bool get_AllowPreviewVersion();
    [CompilerGeneratedAttribute]
public void set_AllowPreviewVersion(bool value);
}
[CompilerGeneratedAttribute]
internal class Cake.Common.Tools.MSTest.NamespaceDoc : object {
}
[CompilerGeneratedAttribute]
internal class Cake.Common.Tools.NamespaceDoc : object {
}
public class Cake.Common.Tools.NSIS.MakeNSISRunner : Tool`1<MakeNSISSettings> {
    private ICakeEnvironment _environment;
    public MakeNSISRunner(IFileSystem fileSystem, ICakeEnvironment environment, IProcessRunner processRunner, IToolLocator tools);
    public void Run(FilePath scriptFile, MakeNSISSettings settings);
    protected virtual string GetToolName();
    protected virtual IEnumerable`1<string> GetToolExecutableNames();
    private ProcessArgumentBuilder GetArguments(FilePath scriptFile, MakeNSISSettings settings);
}
public class Cake.Common.Tools.NSIS.MakeNSISSettings : ToolSettings {
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <Defines>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoChangeDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoConfig>k__BackingField;
    public IDictionary`2<string, string> Defines { get; public set; }
    public bool NoChangeDirectory { get; public set; }
    public bool NoConfig { get; public set; }
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_Defines();
    [CompilerGeneratedAttribute]
public void set_Defines(IDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public bool get_NoChangeDirectory();
    [CompilerGeneratedAttribute]
public void set_NoChangeDirectory(bool value);
    [CompilerGeneratedAttribute]
public bool get_NoConfig();
    [CompilerGeneratedAttribute]
public void set_NoConfig(bool value);
}
[ExtensionAttribute]
[CakeAliasCategoryAttribute("NSIS")]
public static class Cake.Common.Tools.NSIS.NSISAliases : object {
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("MakeNSIS")]
public static void MakeNSIS(ICakeContext context, FilePath scriptFile);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("MakeNSIS")]
public static void MakeNSIS(ICakeContext context, FilePath scriptFile, MakeNSISSettings settings);
}
public class Cake.Common.Tools.NuGet.Add.NuGetAdder : NuGetTool`1<NuGetAddSettings> {
    private ICakeEnvironment _environment;
    public NuGetAdder(IFileSystem fileSystem, ICakeEnvironment environment, IProcessRunner processRunner, IToolLocator tools, INuGetToolResolver resolver);
    public void Add(string packageId, NuGetAddSettings settings);
    private ProcessArgumentBuilder GetArguments(string packageId, NuGetAddSettings settings);
}
public class Cake.Common.Tools.NuGet.Add.NuGetAddSettings : ToolSettings {
    [CompilerGeneratedAttribute]
private string <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Expand>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<NuGetVerbosity> <Verbosity>k__BackingField;
    [CompilerGeneratedAttribute]
private FilePath <ConfigFile>k__BackingField;
    public string Source { get; public set; }
    public bool Expand { get; public set; }
    public Nullable`1<NuGetVerbosity> Verbosity { get; public set; }
    public FilePath ConfigFile { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Source();
    [CompilerGeneratedAttribute]
public void set_Source(string value);
    [CompilerGeneratedAttribute]
public bool get_Expand();
    [CompilerGeneratedAttribute]
public void set_Expand(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<NuGetVerbosity> get_Verbosity();
    [CompilerGeneratedAttribute]
public void set_Verbosity(Nullable`1<NuGetVerbosity> value);
    [CompilerGeneratedAttribute]
public FilePath get_ConfigFile();
    [CompilerGeneratedAttribute]
public void set_ConfigFile(FilePath value);
}
public class Cake.Common.Tools.NuGet.Delete.NuGetDeleter : NuGetTool`1<NuGetDeleteSettings> {
    private ICakeEnvironment _environment;
    private ICakeLog _log;
    public NuGetDeleter(IFileSystem fileSystem, ICakeEnvironment environment, IProcessRunner processRunner, IToolLocator tools, INuGetToolResolver resolver, ICakeLog log);
    public void Delete(string packageID, string packageVersion, NuGetDeleteSettings settings);
    private ProcessArgumentBuilder GetArguments(string packageID, string packageVersion, NuGetDeleteSettings settings);
}
public class Cake.Common.Tools.NuGet.Delete.NuGetDeleteSettings : ToolSettings {
    [CompilerGeneratedAttribute]
private string <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ApiKey>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<NuGetVerbosity> <Verbosity>k__BackingField;
    [CompilerGeneratedAttribute]
private FilePath <ConfigFile>k__BackingField;
    public string Source { get; public set; }
    public string ApiKey { get; public set; }
    public Nullable`1<NuGetVerbosity> Verbosity { get; public set; }
    public FilePath ConfigFile { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Source();
    [CompilerGeneratedAttribute]
public void set_Source(string value);
    [CompilerGeneratedAttribute]
public string get_ApiKey();
    [CompilerGeneratedAttribute]
public void set_ApiKey(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<NuGetVerbosity> get_Verbosity();
    [CompilerGeneratedAttribute]
public void set_Verbosity(Nullable`1<NuGetVerbosity> value);
    [CompilerGeneratedAttribute]
public FilePath get_ConfigFile();
    [CompilerGeneratedAttribute]
public void set_ConfigFile(FilePath value);
}
public class Cake.Common.Tools.NuGet.Init.NuGetIniter : NuGetTool`1<NuGetInitSettings> {
    private ICakeEnvironment _environment;
    public NuGetIniter(IFileSystem fileSystem, ICakeEnvironment environment, IProcessRunner processRunner, IToolLocator tools, INuGetToolResolver resolver);
    public void Init(string sourcePackageSourcePath, string destinationPackageSourcePath, NuGetInitSettings settings);
    private ProcessArgumentBuilder GetArguments(string sourcePackageSourcePath, string destinationPackageSourcePath, NuGetInitSettings settings);
}
public class Cake.Common.Tools.NuGet.Init.NuGetInitSettings : ToolSettings {
    [CompilerGeneratedAttribute]
private bool <Expand>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<NuGetVerbosity> <Verbosity>k__BackingField;
    [CompilerGeneratedAttribute]
private FilePath <ConfigFile>k__BackingField;
    public bool Expand { get; public set; }
    public Nullable`1<NuGetVerbosity> Verbosity { get; public set; }
    public FilePath ConfigFile { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Expand();
    [CompilerGeneratedAttribute]
public void set_Expand(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<NuGetVerbosity> get_Verbosity();
    [CompilerGeneratedAttribute]
public void set_Verbosity(Nullable`1<NuGetVerbosity> value);
    [CompilerGeneratedAttribute]
public FilePath get_ConfigFile();
    [CompilerGeneratedAttribute]
public void set_ConfigFile(FilePath value);
}
[CompilerGeneratedAttribute]
internal class Cake.Common.Tools.NuGet.Install.NamespaceDoc : object {
}
public class Cake.Common.Tools.NuGet.Install.NuGetInstaller : NuGetTool`1<NuGetInstallSettings> {
    private ICakeEnvironment _environment;
    public NuGetInstaller(IFileSystem fileSystem, ICakeEnvironment environment, IProcessRunner processRunner, IToolLocator tools, INuGetToolResolver resolver);
    public void InstallFromConfig(FilePath packageConfigPath, NuGetInstallSettings settings);
    public void Install(string packageId, NuGetInstallSettings settings);
    private ProcessArgumentBuilder GetArguments(string packageId, NuGetInstallSettings settings);
}
public class Cake.Common.Tools.NuGet.Install.NuGetInstallSettings : ToolSettings {
    [CompilerGeneratedAttribute]
private DirectoryPath <OutputDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ExcludeVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Prerelease>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RequireConsent>k__BackingField;
    [CompilerGeneratedAttribute]
private DirectoryPath <SolutionDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<string> <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoCache>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisableParallelProcessing>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<NuGetVerbosity> <Verbosity>k__BackingField;
    [CompilerGeneratedAttribute]
private FilePath <ConfigFile>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<string> <FallbackSource>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NonInteractive>k__BackingField;
    public DirectoryPath OutputDirectory { get; public set; }
    public string Version { get; public set; }
    public bool ExcludeVersion { get; public set; }
    public bool Prerelease { get; public set; }
    public bool RequireConsent { get; public set; }
    public DirectoryPath SolutionDirectory { get; public set; }
    public ICollection`1<string> Source { get; public set; }
    public bool NoCache { get; public set; }
    public bool DisableParallelProcessing { get; public set; }
    public Nullable`1<NuGetVerbosity> Verbosity { get; public set; }
    public FilePath ConfigFile { get; public set; }
    public ICollection`1<string> FallbackSource { get; public set; }
    public bool NonInteractive { get; public set; }
    [CompilerGeneratedAttribute]
public DirectoryPath get_OutputDirectory();
    [CompilerGeneratedAttribute]
public void set_OutputDirectory(DirectoryPath value);
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(string value);
    [CompilerGeneratedAttribute]
public bool get_ExcludeVersion();
    [CompilerGeneratedAttribute]
public void set_ExcludeVersion(bool value);
    [CompilerGeneratedAttribute]
public bool get_Prerelease();
    [CompilerGeneratedAttribute]
public void set_Prerelease(bool value);
    [CompilerGeneratedAttribute]
public bool get_RequireConsent();
    [CompilerGeneratedAttribute]
public void set_RequireConsent(bool value);
    [CompilerGeneratedAttribute]
public DirectoryPath get_SolutionDirectory();
    [CompilerGeneratedAttribute]
public void set_SolutionDirectory(DirectoryPath value);
    [CompilerGeneratedAttribute]
public ICollection`1<string> get_Source();
    [CompilerGeneratedAttribute]
public void set_Source(ICollection`1<string> value);
    [CompilerGeneratedAttribute]
public bool get_NoCache();
    [CompilerGeneratedAttribute]
public void set_NoCache(bool value);
    [CompilerGeneratedAttribute]
public bool get_DisableParallelProcessing();
    [CompilerGeneratedAttribute]
public void set_DisableParallelProcessing(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<NuGetVerbosity> get_Verbosity();
    [CompilerGeneratedAttribute]
public void set_Verbosity(Nullable`1<NuGetVerbosity> value);
    [CompilerGeneratedAttribute]
public FilePath get_ConfigFile();
    [CompilerGeneratedAttribute]
public void set_ConfigFile(FilePath value);
    [CompilerGeneratedAttribute]
public ICollection`1<string> get_FallbackSource();
    [CompilerGeneratedAttribute]
public void set_FallbackSource(ICollection`1<string> value);
    [CompilerGeneratedAttribute]
public bool get_NonInteractive();
    [CompilerGeneratedAttribute]
public void set_NonInteractive(bool value);
}
public class Cake.Common.Tools.NuGet.List.NuGetList : NuGetTool`1<NuGetListSettings> {
    private ICakeEnvironment _environment;
    public NuGetList(IFileSystem fileSystem, ICakeEnvironment environment, IProcessRunner processRunner, IToolLocator tools, INuGetToolResolver resolver);
    public IEnumerable`1<NuGetListItem> List(NuGetListSettings settings);
    public IEnumerable`1<NuGetListItem> List(string packageId, NuGetListSettings settings);
    private NuGetListItem ConvertToNuGetListItem(string line);
    private ProcessArgumentBuilder GetHasArguments(string packageId, NuGetListSettings settings);
}
public class Cake.Common.Tools.NuGet.List.NuGetListItem : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    public string Name { get; public set; }
    public string Version { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(string value);
}
public class Cake.Common.Tools.NuGet.List.NuGetListSettings : ToolSettings {
    [CompilerGeneratedAttribute]
private bool <AllVersions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Prerelease>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeDelisted>k__BackingField;
    [CompilerGeneratedAttribute]
private FilePath <ConfigFile>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<string> <Source>k__BackingField;
    public bool AllVersions { get; public set; }
    public bool Prerelease { get; public set; }
    public bool IncludeDelisted { get; public set; }
    public FilePath ConfigFile { get; public set; }
    public ICollection`1<string> Source { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_AllVersions();
    [CompilerGeneratedAttribute]
public void set_AllVersions(bool value);
    [CompilerGeneratedAttribute]
public bool get_Prerelease();
    [CompilerGeneratedAttribute]
public void set_Prerelease(bool value);
    [CompilerGeneratedAttribute]
public bool get_IncludeDelisted();
    [CompilerGeneratedAttribute]
public void set_IncludeDelisted(bool value);
    [CompilerGeneratedAttribute]
public FilePath get_ConfigFile();
    [CompilerGeneratedAttribute]
public void set_ConfigFile(FilePath value);
    [CompilerGeneratedAttribute]
public ICollection`1<string> get_Source();
    [CompilerGeneratedAttribute]
public void set_Source(ICollection`1<string> value);
}
[CompilerGeneratedAttribute]
internal class Cake.Common.Tools.NuGet.NamespaceDoc : object {
}
[ExtensionAttribute]
[CakeAliasCategoryAttribute("NuGet")]
public static class Cake.Common.Tools.NuGet.NuGetAliases : object {
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Pack")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.NuGet.Pack")]
public static void NuGetPack(ICakeContext context, FilePath filePath, NuGetPackSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Pack")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.NuGet.Pack")]
public static void NuGetPack(ICakeContext context, IEnumerable`1<FilePath> filePaths, NuGetPackSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Pack")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.NuGet.Pack")]
public static void NuGetPack(ICakeContext context, NuGetPackSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Restore")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.NuGet.Restore")]
public static void NuGetRestore(ICakeContext context, FilePath targetFilePath);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Restore")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.NuGet.Restore")]
public static void NuGetRestore(ICakeContext context, IEnumerable`1<FilePath> targetFilePaths);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Restore")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.NuGet.Restore")]
public static void NuGetRestore(ICakeContext context, FilePath targetFilePath, NuGetRestoreSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Restore")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.NuGet.Restore")]
public static void NuGetRestore(ICakeContext context, IEnumerable`1<FilePath> targetFilePaths, NuGetRestoreSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Push")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.NuGet.Push")]
public static void NuGetPush(ICakeContext context, FilePath packageFilePath, NuGetPushSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Push")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.NuGet.Push")]
public static void NuGetPush(ICakeContext context, IEnumerable`1<FilePath> packageFilePaths, NuGetPushSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("AddSource")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.NuGet.Sources")]
public static void NuGetAddSource(ICakeContext context, string name, string source);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("AddSource")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.NuGet.Sources")]
public static void NuGetAddSource(ICakeContext context, string name, string source, NuGetSourcesSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("RemoveSource")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.NuGet.Sources")]
public static void NuGetRemoveSource(ICakeContext context, string name, string source);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("RemoveSource")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.NuGet.Sources")]
public static void NuGetRemoveSource(ICakeContext context, string name, string source, NuGetSourcesSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("HasSource")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.NuGet.Sources")]
public static bool NuGetHasSource(ICakeContext context, string source);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("HasSource")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.NuGet.Sources")]
public static bool NuGetHasSource(ICakeContext context, string source, NuGetSourcesSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Install")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.NuGet.Install")]
public static void NuGetInstall(ICakeContext context, string packageId);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Install")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.NuGet.Install")]
public static void NuGetInstall(ICakeContext context, IEnumerable`1<string> packageIds);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Install")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.NuGet.Install")]
public static void NuGetInstall(ICakeContext context, string packageId, NuGetInstallSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Install")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.NuGet.Install")]
public static void NuGetInstall(ICakeContext context, IEnumerable`1<string> packageIds, NuGetInstallSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Install")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.NuGet.Install")]
public static void NuGetInstallFromConfig(ICakeContext context, FilePath packageConfigPath);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Install")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.NuGet.Install")]
public static void NuGetInstallFromConfig(ICakeContext context, IEnumerable`1<FilePath> packageConfigPaths);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Install")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.NuGet.Install")]
public static void NuGetInstallFromConfig(ICakeContext context, FilePath packageConfigPath, NuGetInstallSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Install")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.NuGet.Install")]
public static void NuGetInstallFromConfig(ICakeContext context, IEnumerable`1<FilePath> packageConfigPaths, NuGetInstallSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("SetApiKey")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.NuGet.SetApiKey")]
public static void NuGetSetApiKey(ICakeContext context, string apiKey, string source, NuGetSetApiKeySettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("SetApiKey")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.NuGet.SetApiKey")]
public static void NuGetSetApiKey(ICakeContext context, string apiKey, string source);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("SetProxy")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.NuGet.SetProxy")]
public static void NuGetSetProxy(ICakeContext context, string proxy, string username, string password, NuGetSetProxySettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("SetProxy")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.NuGet.SetProxy")]
public static void NuGetSetProxy(ICakeContext context, string proxy, string username, string password);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Update")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.NuGet.Update")]
public static void NuGetUpdate(ICakeContext context, FilePath targetFile);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Update")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.NuGet.Update")]
public static void NuGetUpdate(ICakeContext context, IEnumerable`1<FilePath> targetFiles);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Update")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.NuGet.Update")]
public static void NuGetUpdate(ICakeContext context, FilePath targetFile, NuGetUpdateSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Update")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.NuGet.Update")]
public static void NuGetUpdate(ICakeContext context, IEnumerable`1<FilePath> targetFiles, NuGetUpdateSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Add")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.NuGet.Add")]
public static void NuGetAdd(ICakeContext context, string packageId, string source);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Add")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.NuGet.Add")]
public static void NuGetAdd(ICakeContext context, string packageId, NuGetAddSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Init")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.NuGet.Init")]
public static void NuGetInit(ICakeContext context, string source, string destination);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Init")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.NuGet.Init")]
public static void NuGetInit(ICakeContext context, string source, string destination, NuGetInitSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("List")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.NuGet.List")]
public static IEnumerable`1<NuGetListItem> NuGetList(ICakeContext context, string packageId, NuGetListSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("List")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.NuGet.List")]
public static IEnumerable`1<NuGetListItem> NuGetList(ICakeContext context, string packageId);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("List")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.NuGet.List")]
public static IEnumerable`1<NuGetListItem> NuGetList(ICakeContext context, NuGetListSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Delete")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.NuGet.Delete")]
public static void NuGetDelete(ICakeContext context, string packageID, string packageVersion, NuGetDeleteSettings settings);
}
public enum Cake.Common.Tools.NuGet.NuGetMSBuildVersion : Enum {
    public int value__;
    public static NuGetMSBuildVersion MSBuild4;
    public static NuGetMSBuildVersion MSBuild12;
    public static NuGetMSBuildVersion MSBuild14;
    public static NuGetMSBuildVersion MSBuild15_1;
    public static NuGetMSBuildVersion MSBuild15_3;
    public static NuGetMSBuildVersion MSBuild15_4;
    public static NuGetMSBuildVersion MSBuild15_5;
    public static NuGetMSBuildVersion MSBuild15_6;
    public static NuGetMSBuildVersion MSBuild15_7;
    public static NuGetMSBuildVersion MSBuild15_8;
    public static NuGetMSBuildVersion MSBuild15_9;
    public static NuGetMSBuildVersion MSBuild16_0;
}
[ExtensionAttribute]
public static class Cake.Common.Tools.NuGet.NuGetMSBuildVersionExtensions : object {
    [ExtensionAttribute]
public static string GetNuGetMSBuildVersionString(NuGetMSBuildVersion nuGetMSBuildVersion);
}
public abstract class Cake.Common.Tools.NuGet.NuGetTool`1 : Tool`1<TSettings> {
    private INuGetToolResolver _resolver;
    protected NuGetTool`1(IFileSystem fileSystem, ICakeEnvironment environment, IProcessRunner processRunner, IToolLocator tools, INuGetToolResolver resolver);
    protected sealed virtual string GetToolName();
    protected sealed virtual IEnumerable`1<string> GetToolExecutableNames();
    protected sealed virtual IEnumerable`1<FilePath> GetAlternativeToolPaths(TSettings settings);
}
public enum Cake.Common.Tools.NuGet.NuGetVerbosity : Enum {
    public int value__;
    public static NuGetVerbosity Normal;
    public static NuGetVerbosity Quiet;
    public static NuGetVerbosity Detailed;
}
[CompilerGeneratedAttribute]
internal class Cake.Common.Tools.NuGet.Pack.NamespaceDoc : object {
}
public class Cake.Common.Tools.NuGet.Pack.NuGetPacker : NuGetTool`1<NuGetPackSettings> {
    private IFileSystem _fileSystem;
    private ICakeEnvironment _environment;
    private NuspecProcessor _processor;
    public NuGetPacker(IFileSystem fileSystem, ICakeEnvironment environment, IProcessRunner processRunner, ICakeLog log, IToolLocator tools, INuGetToolResolver resolver);
    public void Pack(NuGetPackSettings settings);
    public void Pack(FilePath filePath, NuGetPackSettings settings);
    private void Pack(NuGetPackSettings settings, Func`1<FilePath> process);
    private ProcessArgumentBuilder GetArguments(FilePath filePath, NuGetPackSettings settings);
}
public class Cake.Common.Tools.NuGet.Pack.NuGetPackSettings : ToolSettings {
    [CompilerGeneratedAttribute]
private DirectoryPath <BasePath>k__BackingField;
    [CompilerGeneratedAttribute]
private DirectoryPath <OutputDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoPackageAnalysis>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeReferencedProjects>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Symbols>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SymbolPackageFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Suffix>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<string> <Authors>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<string> <Owners>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Summary>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <ProjectUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Icon>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <IconUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <LicenseUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Copyright>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<string> <ReleaseNotes>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<string> <Tags>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Serviceable>k__BackingField;
    [CompilerGeneratedAttribute]
private NuGetRepository <Repository>k__BackingField;
    [CompilerGeneratedAttribute]
private NuSpecLicense <License>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<NuSpecPackageType> <PackageTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<NuSpecFrameworkAssembly> <FrameworkAssemblies>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <DevelopmentDependency>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <RequireLicenseAcceptance>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<NuSpecReference> <References>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<NuSpecContentFile> <ContentFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MinClientVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<NuSpecContent> <Files>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<NuSpecDependency> <Dependencies>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<NuGetVerbosity> <Verbosity>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<NuGetMSBuildVersion> <MSBuildVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <KeepTemporaryNuSpecFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Language>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OutputToToolFolder>k__BackingField;
    public DirectoryPath BasePath { get; public set; }
    public DirectoryPath OutputDirectory { get; public set; }
    public bool NoPackageAnalysis { get; public set; }
    public bool IncludeReferencedProjects { get; public set; }
    public bool Symbols { get; public set; }
    public string SymbolPackageFormat { get; public set; }
    public string Id { get; public set; }
    public string Version { get; public set; }
    public string Suffix { get; public set; }
    public string Title { get; public set; }
    public ICollection`1<string> Authors { get; public set; }
    public ICollection`1<string> Owners { get; public set; }
    public string Description { get; public set; }
    public string Summary { get; public set; }
    public Uri ProjectUrl { get; public set; }
    public string Icon { get; public set; }
    public Uri IconUrl { get; public set; }
    public Uri LicenseUrl { get; public set; }
    public string Copyright { get; public set; }
    public ICollection`1<string> ReleaseNotes { get; public set; }
    public ICollection`1<string> Tags { get; public set; }
    public Nullable`1<bool> Serviceable { get; public set; }
    public NuGetRepository Repository { get; public set; }
    public NuSpecLicense License { get; public set; }
    public ICollection`1<NuSpecPackageType> PackageTypes { get; public set; }
    public ICollection`1<NuSpecFrameworkAssembly> FrameworkAssemblies { get; public set; }
    public Nullable`1<bool> DevelopmentDependency { get; public set; }
    public Nullable`1<bool> RequireLicenseAcceptance { get; public set; }
    public ICollection`1<NuSpecReference> References { get; public set; }
    public ICollection`1<NuSpecContentFile> ContentFiles { get; public set; }
    public string MinClientVersion { get; public set; }
    public ICollection`1<NuSpecContent> Files { get; public set; }
    public ICollection`1<NuSpecDependency> Dependencies { get; public set; }
    public Nullable`1<NuGetVerbosity> Verbosity { get; public set; }
    public IDictionary`2<string, string> Properties { get; public set; }
    public Nullable`1<NuGetMSBuildVersion> MSBuildVersion { get; public set; }
    public bool KeepTemporaryNuSpecFile { get; public set; }
    public string Language { get; public set; }
    public bool OutputToToolFolder { get; public set; }
    [CompilerGeneratedAttribute]
public DirectoryPath get_BasePath();
    [CompilerGeneratedAttribute]
public void set_BasePath(DirectoryPath value);
    [CompilerGeneratedAttribute]
public DirectoryPath get_OutputDirectory();
    [CompilerGeneratedAttribute]
public void set_OutputDirectory(DirectoryPath value);
    [CompilerGeneratedAttribute]
public bool get_NoPackageAnalysis();
    [CompilerGeneratedAttribute]
public void set_NoPackageAnalysis(bool value);
    [CompilerGeneratedAttribute]
public bool get_IncludeReferencedProjects();
    [CompilerGeneratedAttribute]
public void set_IncludeReferencedProjects(bool value);
    [CompilerGeneratedAttribute]
public bool get_Symbols();
    [CompilerGeneratedAttribute]
public void set_Symbols(bool value);
    [CompilerGeneratedAttribute]
public string get_SymbolPackageFormat();
    [CompilerGeneratedAttribute]
public void set_SymbolPackageFormat(string value);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(string value);
    [CompilerGeneratedAttribute]
public string get_Suffix();
    [CompilerGeneratedAttribute]
public void set_Suffix(string value);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [CompilerGeneratedAttribute]
public ICollection`1<string> get_Authors();
    [CompilerGeneratedAttribute]
public void set_Authors(ICollection`1<string> value);
    [CompilerGeneratedAttribute]
public ICollection`1<string> get_Owners();
    [CompilerGeneratedAttribute]
public void set_Owners(ICollection`1<string> value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public string get_Summary();
    [CompilerGeneratedAttribute]
public void set_Summary(string value);
    [CompilerGeneratedAttribute]
public Uri get_ProjectUrl();
    [CompilerGeneratedAttribute]
public void set_ProjectUrl(Uri value);
    [CompilerGeneratedAttribute]
public string get_Icon();
    [CompilerGeneratedAttribute]
public void set_Icon(string value);
    [CompilerGeneratedAttribute]
public Uri get_IconUrl();
    [CompilerGeneratedAttribute]
public void set_IconUrl(Uri value);
    [CompilerGeneratedAttribute]
public Uri get_LicenseUrl();
    [CompilerGeneratedAttribute]
public void set_LicenseUrl(Uri value);
    [CompilerGeneratedAttribute]
public string get_Copyright();
    [CompilerGeneratedAttribute]
public void set_Copyright(string value);
    [CompilerGeneratedAttribute]
public ICollection`1<string> get_ReleaseNotes();
    [CompilerGeneratedAttribute]
public void set_ReleaseNotes(ICollection`1<string> value);
    [CompilerGeneratedAttribute]
public ICollection`1<string> get_Tags();
    [CompilerGeneratedAttribute]
public void set_Tags(ICollection`1<string> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Serviceable();
    [CompilerGeneratedAttribute]
public void set_Serviceable(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public NuGetRepository get_Repository();
    [CompilerGeneratedAttribute]
public void set_Repository(NuGetRepository value);
    [CompilerGeneratedAttribute]
public NuSpecLicense get_License();
    [CompilerGeneratedAttribute]
public void set_License(NuSpecLicense value);
    [CompilerGeneratedAttribute]
public ICollection`1<NuSpecPackageType> get_PackageTypes();
    [CompilerGeneratedAttribute]
public void set_PackageTypes(ICollection`1<NuSpecPackageType> value);
    [CompilerGeneratedAttribute]
public ICollection`1<NuSpecFrameworkAssembly> get_FrameworkAssemblies();
    [CompilerGeneratedAttribute]
public void set_FrameworkAssemblies(ICollection`1<NuSpecFrameworkAssembly> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_DevelopmentDependency();
    [CompilerGeneratedAttribute]
public void set_DevelopmentDependency(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_RequireLicenseAcceptance();
    [CompilerGeneratedAttribute]
public void set_RequireLicenseAcceptance(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public ICollection`1<NuSpecReference> get_References();
    [CompilerGeneratedAttribute]
public void set_References(ICollection`1<NuSpecReference> value);
    [CompilerGeneratedAttribute]
public ICollection`1<NuSpecContentFile> get_ContentFiles();
    [CompilerGeneratedAttribute]
public void set_ContentFiles(ICollection`1<NuSpecContentFile> value);
    [CompilerGeneratedAttribute]
public string get_MinClientVersion();
    [CompilerGeneratedAttribute]
public void set_MinClientVersion(string value);
    [CompilerGeneratedAttribute]
public ICollection`1<NuSpecContent> get_Files();
    [CompilerGeneratedAttribute]
public void set_Files(ICollection`1<NuSpecContent> value);
    [CompilerGeneratedAttribute]
public ICollection`1<NuSpecDependency> get_Dependencies();
    [CompilerGeneratedAttribute]
public void set_Dependencies(ICollection`1<NuSpecDependency> value);
    [CompilerGeneratedAttribute]
public Nullable`1<NuGetVerbosity> get_Verbosity();
    [CompilerGeneratedAttribute]
public void set_Verbosity(Nullable`1<NuGetVerbosity> value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_Properties();
    [CompilerGeneratedAttribute]
public void set_Properties(IDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public Nullable`1<NuGetMSBuildVersion> get_MSBuildVersion();
    [CompilerGeneratedAttribute]
public void set_MSBuildVersion(Nullable`1<NuGetMSBuildVersion> value);
    [CompilerGeneratedAttribute]
public bool get_KeepTemporaryNuSpecFile();
    [CompilerGeneratedAttribute]
public void set_KeepTemporaryNuSpecFile(bool value);
    [CompilerGeneratedAttribute]
public string get_Language();
    [CompilerGeneratedAttribute]
public void set_Language(string value);
    [CompilerGeneratedAttribute]
public bool get_OutputToToolFolder();
    [CompilerGeneratedAttribute]
public void set_OutputToToolFolder(bool value);
}
public class Cake.Common.Tools.NuGet.Pack.NuGetRepository : object {
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Branch>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Commit>k__BackingField;
    public string Type { get; public set; }
    public string Url { get; public set; }
    public string Branch { get; public set; }
    public string Commit { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(string value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
    [CompilerGeneratedAttribute]
public string get_Branch();
    [CompilerGeneratedAttribute]
public void set_Branch(string value);
    [CompilerGeneratedAttribute]
public string get_Commit();
    [CompilerGeneratedAttribute]
public void set_Commit(string value);
}
public class Cake.Common.Tools.NuGet.Pack.NuSpecContent : object {
    [CompilerGeneratedAttribute]
private string <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Target>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Exclude>k__BackingField;
    public string Source { get; public set; }
    public string Target { get; public set; }
    public string Exclude { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Source();
    [CompilerGeneratedAttribute]
public void set_Source(string value);
    [CompilerGeneratedAttribute]
public string get_Target();
    [CompilerGeneratedAttribute]
public void set_Target(string value);
    [CompilerGeneratedAttribute]
public string get_Exclude();
    [CompilerGeneratedAttribute]
public void set_Exclude(string value);
}
public class Cake.Common.Tools.NuGet.Pack.NuSpecContentFile : object {
    [CompilerGeneratedAttribute]
private string <Include>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Exclude>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BuildAction>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CopyToOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Flatten>k__BackingField;
    public string Include { get; public set; }
    public string Exclude { get; public set; }
    public string BuildAction { get; public set; }
    public bool CopyToOutput { get; public set; }
    public bool Flatten { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Include();
    [CompilerGeneratedAttribute]
public void set_Include(string value);
    [CompilerGeneratedAttribute]
public string get_Exclude();
    [CompilerGeneratedAttribute]
public void set_Exclude(string value);
    [CompilerGeneratedAttribute]
public string get_BuildAction();
    [CompilerGeneratedAttribute]
public void set_BuildAction(string value);
    [CompilerGeneratedAttribute]
public bool get_CopyToOutput();
    [CompilerGeneratedAttribute]
public void set_CopyToOutput(bool value);
    [CompilerGeneratedAttribute]
public bool get_Flatten();
    [CompilerGeneratedAttribute]
public void set_Flatten(bool value);
}
public class Cake.Common.Tools.NuGet.Pack.NuSpecDependency : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<string> <Include>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<string> <Exclude>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetFramework>k__BackingField;
    public string Id { get; public set; }
    public string Version { get; public set; }
    public ICollection`1<string> Include { get; public set; }
    public ICollection`1<string> Exclude { get; public set; }
    public string TargetFramework { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(string value);
    [CompilerGeneratedAttribute]
public ICollection`1<string> get_Include();
    [CompilerGeneratedAttribute]
public void set_Include(ICollection`1<string> value);
    [CompilerGeneratedAttribute]
public ICollection`1<string> get_Exclude();
    [CompilerGeneratedAttribute]
public void set_Exclude(ICollection`1<string> value);
    [CompilerGeneratedAttribute]
public string get_TargetFramework();
    [CompilerGeneratedAttribute]
public void set_TargetFramework(string value);
}
public class Cake.Common.Tools.NuGet.Pack.NuSpecFrameworkAssembly : object {
    [CompilerGeneratedAttribute]
private string <AssemblyName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetFramework>k__BackingField;
    public string AssemblyName { get; public set; }
    public string TargetFramework { get; public set; }
    [CompilerGeneratedAttribute]
public string get_AssemblyName();
    [CompilerGeneratedAttribute]
public void set_AssemblyName(string value);
    [CompilerGeneratedAttribute]
public string get_TargetFramework();
    [CompilerGeneratedAttribute]
public void set_TargetFramework(string value);
}
public class Cake.Common.Tools.NuGet.Pack.NuSpecLicense : object {
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public string Type { get; public set; }
    public string Version { get; public set; }
    public string Value { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(string value);
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
}
public class Cake.Common.Tools.NuGet.Pack.NuSpecPackageType : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    public string Name { get; public set; }
    public string Version { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(string value);
}
internal class Cake.Common.Tools.NuGet.Pack.NuspecProcessor : object {
    private IFileSystem _fileSystem;
    private ICakeEnvironment _environment;
    private ICakeLog _log;
    public NuspecProcessor(IFileSystem fileSystem, ICakeEnvironment environment, ICakeLog log);
    public FilePath Process(NuGetPackSettings settings);
    public FilePath Process(FilePath nuspecFilePath, NuGetPackSettings settings);
    private FilePath ProcessXml(FilePath nuspecFilePath, NuGetPackSettings settings, XmlDocument xml);
    private static XmlDocument LoadNuspecXml(IFile nuspecFile);
    private static XmlDocument LoadEmptyNuSpec();
    private FilePath SaveNuspecXml(FilePath nuspecFilePath, XmlDocument document);
}
public class Cake.Common.Tools.NuGet.Pack.NuSpecReference : object {
    [CompilerGeneratedAttribute]
private string <File>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetFramework>k__BackingField;
    public string File { get; public set; }
    public string TargetFramework { get; public set; }
    [CompilerGeneratedAttribute]
public string get_File();
    [CompilerGeneratedAttribute]
public void set_File(string value);
    [CompilerGeneratedAttribute]
public string get_TargetFramework();
    [CompilerGeneratedAttribute]
public void set_TargetFramework(string value);
}
[ExtensionAttribute]
internal static class Cake.Common.Tools.NuGet.Pack.NuspecTransformer : object {
    private static string NuSpecXsd;
    public static void Transform(XmlDocument document, NuGetPackSettings settings);
    private static void AddSimpleTypesToXmlDocument(XmlDocument document, NuGetPackSettings settings, XmlNamespaceManager namespaceManager);
    private static IDictionary`2<string, Func`2<NuGetPackSettings, string>> CreateMappings(NuGetPackSettings settings);
    private static void CreateSimpleTypeMetadataFromMappings(XmlDocument document, NuGetPackSettings settings, XmlNamespaceManager namespaceManager, IDictionary`2<string, Func`2<NuGetPackSettings, string>> mappings);
    private static void CreateReleaseNotes(XmlDocument document, NuGetPackSettings settings, XmlNamespaceManager namespaceManager);
    private static void CreateMinClientVersion(XmlDocument document, NuGetPackSettings settings, XmlNamespaceManager namespaceManager);
    private static void AddComplexTypesToXmlDocument(XmlDocument document, NuGetPackSettings settings, XmlNamespaceManager namespaceManager);
    private static void CreateFileElements(XmlDocument document, NuGetPackSettings settings, XmlNamespaceManager namespaceManager);
    private static void CreateContentFileElements(XmlDocument document, NuGetPackSettings settings, XmlNamespaceManager namespaceManager);
    private static void CreateReferenceElements(XmlDocument document, NuGetPackSettings settings, XmlNamespaceManager namespaceManager);
    private static void CreateDependencyElements(XmlDocument document, NuGetPackSettings settings, XmlNamespaceManager namespaceManager);
    private static void CreateReferenceGroup(XmlDocument document, XmlNode referencesElement, IGrouping`2<string, NuSpecReference> targetFrameworkReferences);
    private static void CreateDependencyGroup(XmlDocument document, XmlNode dependenciesElement, IGrouping`2<string, NuSpecDependency> targetFrameworkDependencies);
    private static void CreateFrameworkAssemblyElements(XmlDocument document, NuGetPackSettings settings, XmlNamespaceManager namespaceManager);
    private static void CreatePackageTypeElements(XmlDocument document, NuGetPackSettings settings, XmlNamespaceManager namespaceManager);
    private static void AddDependency(XmlDocument document, XmlNode groupElement, NuSpecDependency dependency);
    private static void AddReference(XmlDocument document, XmlNode groupElement, NuSpecReference reference);
    private static void CreateLicenseElement(XmlDocument document, NuGetPackSettings settings, XmlNamespaceManager namespaceManager);
    private static void CreateRepositoryElement(XmlDocument document, NuGetPackSettings settings, XmlNamespaceManager namespaceManager);
    private static XmlNode GetPackageElement(XmlDocument document);
    private static XmlNode FindOrCreateElement(XmlDocument document, XmlNamespaceManager ns, string name);
    [ExtensionAttribute]
private static XmlNode CreateAndAppendElement(XmlDocument document, XmlNode parent, string name);
    [ExtensionAttribute]
private static void AddAttributeIfSpecified(XmlNode element, string value, string name);
    private static string ToString(string value);
    private static string ToString(Uri value);
    private static string ToString(Nullable`1<bool> value);
    private static string ToCommaSeparatedString(ICollection`1<string> values);
    private static string ToMultiLineString(ICollection`1<string> values);
    private static string ToSpaceSeparatedString(ICollection`1<string> values);
}
[CompilerGeneratedAttribute]
internal class Cake.Common.Tools.NuGet.Push.NamespaceDoc : object {
}
public class Cake.Common.Tools.NuGet.Push.NuGetPusher : NuGetTool`1<NuGetPushSettings> {
    private ICakeEnvironment _environment;
    private ICakeLog _log;
    public NuGetPusher(IFileSystem fileSystem, ICakeEnvironment environment, IProcessRunner processRunner, IToolLocator tools, INuGetToolResolver resolver, ICakeLog log);
    public void Push(FilePath packageFilePath, NuGetPushSettings settings);
    private ProcessArgumentBuilder GetArguments(FilePath packageFilePath, NuGetPushSettings settings);
}
public class Cake.Common.Tools.NuGet.Push.NuGetPushSettings : ToolSettings {
    [CompilerGeneratedAttribute]
private string <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ApiKey>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <Timeout>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<NuGetVerbosity> <Verbosity>k__BackingField;
    [CompilerGeneratedAttribute]
private FilePath <ConfigFile>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SkipDuplicate>k__BackingField;
    public string Source { get; public set; }
    public string ApiKey { get; public set; }
    public Nullable`1<TimeSpan> Timeout { get; public set; }
    public Nullable`1<NuGetVerbosity> Verbosity { get; public set; }
    public FilePath ConfigFile { get; public set; }
    public bool SkipDuplicate { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Source();
    [CompilerGeneratedAttribute]
public void set_Source(string value);
    [CompilerGeneratedAttribute]
public string get_ApiKey();
    [CompilerGeneratedAttribute]
public void set_ApiKey(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public Nullable`1<NuGetVerbosity> get_Verbosity();
    [CompilerGeneratedAttribute]
public void set_Verbosity(Nullable`1<NuGetVerbosity> value);
    [CompilerGeneratedAttribute]
public FilePath get_ConfigFile();
    [CompilerGeneratedAttribute]
public void set_ConfigFile(FilePath value);
    [CompilerGeneratedAttribute]
public bool get_SkipDuplicate();
    [CompilerGeneratedAttribute]
public void set_SkipDuplicate(bool value);
}
[CompilerGeneratedAttribute]
internal class Cake.Common.Tools.NuGet.Restore.NamespaceDoc : object {
}
public class Cake.Common.Tools.NuGet.Restore.NuGetRestorer : NuGetTool`1<NuGetRestoreSettings> {
    private ICakeEnvironment _environment;
    public NuGetRestorer(IFileSystem fileSystem, ICakeEnvironment environment, IProcessRunner processRunner, IToolLocator tools, INuGetToolResolver resolver);
    public void Restore(FilePath targetFilePath, NuGetRestoreSettings settings);
    private ProcessArgumentBuilder GetArguments(FilePath targetFilePath, NuGetRestoreSettings settings);
}
public class Cake.Common.Tools.NuGet.Restore.NuGetRestoreSettings : ToolSettings {
    [CompilerGeneratedAttribute]
private bool <RequireConsent>k__BackingField;
    [CompilerGeneratedAttribute]
private DirectoryPath <PackagesDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<string> <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoCache>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisableParallelProcessing>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<NuGetVerbosity> <Verbosity>k__BackingField;
    [CompilerGeneratedAttribute]
private FilePath <ConfigFile>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<string> <FallbackSource>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<NuGetMSBuildVersion> <MSBuildVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private DirectoryPath <MSBuildPath>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NonInteractive>k__BackingField;
    public bool RequireConsent { get; public set; }
    public DirectoryPath PackagesDirectory { get; public set; }
    public ICollection`1<string> Source { get; public set; }
    public bool NoCache { get; public set; }
    public bool DisableParallelProcessing { get; public set; }
    public Nullable`1<NuGetVerbosity> Verbosity { get; public set; }
    public FilePath ConfigFile { get; public set; }
    public ICollection`1<string> FallbackSource { get; public set; }
    public Nullable`1<NuGetMSBuildVersion> MSBuildVersion { get; public set; }
    public DirectoryPath MSBuildPath { get; public set; }
    public bool NonInteractive { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_RequireConsent();
    [CompilerGeneratedAttribute]
public void set_RequireConsent(bool value);
    [CompilerGeneratedAttribute]
public DirectoryPath get_PackagesDirectory();
    [CompilerGeneratedAttribute]
public void set_PackagesDirectory(DirectoryPath value);
    [CompilerGeneratedAttribute]
public ICollection`1<string> get_Source();
    [CompilerGeneratedAttribute]
public void set_Source(ICollection`1<string> value);
    [CompilerGeneratedAttribute]
public bool get_NoCache();
    [CompilerGeneratedAttribute]
public void set_NoCache(bool value);
    [CompilerGeneratedAttribute]
public bool get_DisableParallelProcessing();
    [CompilerGeneratedAttribute]
public void set_DisableParallelProcessing(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<NuGetVerbosity> get_Verbosity();
    [CompilerGeneratedAttribute]
public void set_Verbosity(Nullable`1<NuGetVerbosity> value);
    [CompilerGeneratedAttribute]
public FilePath get_ConfigFile();
    [CompilerGeneratedAttribute]
public void set_ConfigFile(FilePath value);
    [CompilerGeneratedAttribute]
public ICollection`1<string> get_FallbackSource();
    [CompilerGeneratedAttribute]
public void set_FallbackSource(ICollection`1<string> value);
    [CompilerGeneratedAttribute]
public Nullable`1<NuGetMSBuildVersion> get_MSBuildVersion();
    [CompilerGeneratedAttribute]
public void set_MSBuildVersion(Nullable`1<NuGetMSBuildVersion> value);
    [CompilerGeneratedAttribute]
public DirectoryPath get_MSBuildPath();
    [CompilerGeneratedAttribute]
public void set_MSBuildPath(DirectoryPath value);
    [CompilerGeneratedAttribute]
public bool get_NonInteractive();
    [CompilerGeneratedAttribute]
public void set_NonInteractive(bool value);
}
[CompilerGeneratedAttribute]
internal class Cake.Common.Tools.NuGet.SetApiKey.NamespaceDoc : object {
}
public class Cake.Common.Tools.NuGet.SetApiKey.NuGetSetApiKey : NuGetTool`1<NuGetSetApiKeySettings> {
    private ICakeEnvironment _environment;
    public NuGetSetApiKey(IFileSystem fileSystem, ICakeEnvironment environment, IProcessRunner processRunner, IToolLocator tools, INuGetToolResolver resolver);
    public void SetApiKey(string apiKey, string source, NuGetSetApiKeySettings settings);
    private ProcessArgumentBuilder GetArguments(string apiKey, string source, NuGetSetApiKeySettings settings);
}
public class Cake.Common.Tools.NuGet.SetApiKey.NuGetSetApiKeySettings : ToolSettings {
    [CompilerGeneratedAttribute]
private Nullable`1<NuGetVerbosity> <Verbosity>k__BackingField;
    [CompilerGeneratedAttribute]
private FilePath <ConfigFile>k__BackingField;
    public Nullable`1<NuGetVerbosity> Verbosity { get; public set; }
    public FilePath ConfigFile { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<NuGetVerbosity> get_Verbosity();
    [CompilerGeneratedAttribute]
public void set_Verbosity(Nullable`1<NuGetVerbosity> value);
    [CompilerGeneratedAttribute]
public FilePath get_ConfigFile();
    [CompilerGeneratedAttribute]
public void set_ConfigFile(FilePath value);
}
[CompilerGeneratedAttribute]
internal class Cake.Common.Tools.NuGet.SetProxy.NamespaceDoc : object {
}
public class Cake.Common.Tools.NuGet.SetProxy.NuGetSetProxy : NuGetTool`1<NuGetSetProxySettings> {
    private ICakeEnvironment _environment;
    public NuGetSetProxy(IFileSystem fileSystem, ICakeEnvironment environment, IProcessRunner processRunner, IToolLocator tools, INuGetToolResolver resolver);
    public void SetProxy(string url, string username, string password, NuGetSetProxySettings settings);
    private ProcessArgumentBuilder GetArguments(string url, string username, string password, NuGetSetProxySettings settings);
}
public class Cake.Common.Tools.NuGet.SetProxy.NuGetSetProxySettings : ToolSettings {
    [CompilerGeneratedAttribute]
private Nullable`1<NuGetVerbosity> <Verbosity>k__BackingField;
    [CompilerGeneratedAttribute]
private FilePath <ConfigFile>k__BackingField;
    public Nullable`1<NuGetVerbosity> Verbosity { get; public set; }
    public FilePath ConfigFile { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<NuGetVerbosity> get_Verbosity();
    [CompilerGeneratedAttribute]
public void set_Verbosity(Nullable`1<NuGetVerbosity> value);
    [CompilerGeneratedAttribute]
public FilePath get_ConfigFile();
    [CompilerGeneratedAttribute]
public void set_ConfigFile(FilePath value);
}
[CompilerGeneratedAttribute]
internal class Cake.Common.Tools.NuGet.Sources.NamespaceDoc : object {
}
public class Cake.Common.Tools.NuGet.Sources.NuGetSources : NuGetTool`1<NuGetSourcesSettings> {
    public NuGetSources(IFileSystem fileSystem, ICakeEnvironment environment, IProcessRunner processRunner, IToolLocator tools, INuGetToolResolver resolver);
    public void AddSource(string name, string source, NuGetSourcesSettings settings);
    public void RemoveSource(string name, string source, NuGetSourcesSettings settings);
    public bool HasSource(string source, NuGetSourcesSettings settings);
    private static ProcessArgumentBuilder GetHasArguments(NuGetSourcesSettings settings);
    private static ProcessArgumentBuilder GetAddArguments(string name, string source, NuGetSourcesSettings settings);
    private static ProcessArgumentBuilder GetRemoveArguments(string name, string source, NuGetSourcesSettings settings);
    private static void AddCommonParameters(string name, string source, NuGetSourcesSettings settings, ProcessArgumentBuilder builder);
}
public class Cake.Common.Tools.NuGet.Sources.NuGetSourcesSettings : ToolSettings {
    [CompilerGeneratedAttribute]
private string <UserName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Password>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<NuGetVerbosity> <Verbosity>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSensitiveSource>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <StorePasswordInClearText>k__BackingField;
    [CompilerGeneratedAttribute]
private FilePath <ConfigFile>k__BackingField;
    public string UserName { get; public set; }
    public string Password { get; public set; }
    public Nullable`1<NuGetVerbosity> Verbosity { get; public set; }
    public bool IsSensitiveSource { get; public set; }
    public bool StorePasswordInClearText { get; public set; }
    public FilePath ConfigFile { get; public set; }
    [CompilerGeneratedAttribute]
public string get_UserName();
    [CompilerGeneratedAttribute]
public void set_UserName(string value);
    [CompilerGeneratedAttribute]
public string get_Password();
    [CompilerGeneratedAttribute]
public void set_Password(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<NuGetVerbosity> get_Verbosity();
    [CompilerGeneratedAttribute]
public void set_Verbosity(Nullable`1<NuGetVerbosity> value);
    [CompilerGeneratedAttribute]
public bool get_IsSensitiveSource();
    [CompilerGeneratedAttribute]
public void set_IsSensitiveSource(bool value);
    [CompilerGeneratedAttribute]
public bool get_StorePasswordInClearText();
    [CompilerGeneratedAttribute]
public void set_StorePasswordInClearText(bool value);
    [CompilerGeneratedAttribute]
public FilePath get_ConfigFile();
    [CompilerGeneratedAttribute]
public void set_ConfigFile(FilePath value);
}
[CompilerGeneratedAttribute]
internal class Cake.Common.Tools.NuGet.Update.NamespaceDoc : object {
}
public class Cake.Common.Tools.NuGet.Update.NuGetUpdater : NuGetTool`1<NuGetUpdateSettings> {
    private ICakeEnvironment _environment;
    public NuGetUpdater(IFileSystem fileSystem, ICakeEnvironment environment, IProcessRunner processRunner, IToolLocator tools, INuGetToolResolver resolver);
    public void Update(FilePath targetFile, NuGetUpdateSettings settings);
    private ProcessArgumentBuilder GetArguments(FilePath targetFile, NuGetUpdateSettings settings);
}
public class Cake.Common.Tools.NuGet.Update.NuGetUpdateSettings : ToolSettings {
    [CompilerGeneratedAttribute]
private ICollection`1<string> <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<string> <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Safe>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Prerelease>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<NuGetVerbosity> <Verbosity>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<NuGetMSBuildVersion> <MSBuildVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    public ICollection`1<string> Id { get; public set; }
    public ICollection`1<string> Source { get; public set; }
    public bool Safe { get; public set; }
    public bool Prerelease { get; public set; }
    public Nullable`1<NuGetVerbosity> Verbosity { get; public set; }
    public Nullable`1<NuGetMSBuildVersion> MSBuildVersion { get; public set; }
    public string Version { get; public set; }
    [CompilerGeneratedAttribute]
public ICollection`1<string> get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(ICollection`1<string> value);
    [CompilerGeneratedAttribute]
public ICollection`1<string> get_Source();
    [CompilerGeneratedAttribute]
public void set_Source(ICollection`1<string> value);
    [CompilerGeneratedAttribute]
public bool get_Safe();
    [CompilerGeneratedAttribute]
public void set_Safe(bool value);
    [CompilerGeneratedAttribute]
public bool get_Prerelease();
    [CompilerGeneratedAttribute]
public void set_Prerelease(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<NuGetVerbosity> get_Verbosity();
    [CompilerGeneratedAttribute]
public void set_Verbosity(Nullable`1<NuGetVerbosity> value);
    [CompilerGeneratedAttribute]
public Nullable`1<NuGetMSBuildVersion> get_MSBuildVersion();
    [CompilerGeneratedAttribute]
public void set_MSBuildVersion(Nullable`1<NuGetMSBuildVersion> value);
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(string value);
}
[CompilerGeneratedAttribute]
internal class Cake.Common.Tools.NUnit.NamespaceDoc : object {
}
[ExtensionAttribute]
[CakeAliasCategoryAttribute("NUnit v3")]
public static class Cake.Common.Tools.NUnit.NUnit3Aliases : object {
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void NUnit3(ICakeContext context, GlobPattern pattern);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void NUnit3(ICakeContext context, GlobPattern pattern, NUnit3Settings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void NUnit3(ICakeContext context, IEnumerable`1<string> assemblies);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void NUnit3(ICakeContext context, IEnumerable`1<FilePath> assemblies);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void NUnit3(ICakeContext context, IEnumerable`1<string> assemblies, NUnit3Settings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void NUnit3(ICakeContext context, IEnumerable`1<FilePath> assemblies, NUnit3Settings settings);
}
public enum Cake.Common.Tools.NUnit.NUnit3AppDomainUsage : Enum {
    public int value__;
    public static NUnit3AppDomainUsage Default;
    public static NUnit3AppDomainUsage None;
    public static NUnit3AppDomainUsage Single;
    public static NUnit3AppDomainUsage Multiple;
}
public enum Cake.Common.Tools.NUnit.NUnit3Labels : Enum {
    public int value__;
    public static NUnit3Labels Off;
    public static NUnit3Labels On;
    public static NUnit3Labels All;
    public static NUnit3Labels Before;
    public static NUnit3Labels After;
}
public enum Cake.Common.Tools.NUnit.NUnit3ProcessOption : Enum {
    public int value__;
    public static NUnit3ProcessOption Multiple;
    public static NUnit3ProcessOption Separate;
    public static NUnit3ProcessOption InProcess;
}
public class Cake.Common.Tools.NUnit.NUnit3Result : object {
    [CompilerGeneratedAttribute]
private FilePath <FileName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Format>k__BackingField;
    [CompilerGeneratedAttribute]
private FilePath <Transform>k__BackingField;
    public FilePath FileName { get; public set; }
    public string Format { get; public set; }
    public FilePath Transform { get; public set; }
    [CompilerGeneratedAttribute]
public FilePath get_FileName();
    [CompilerGeneratedAttribute]
public void set_FileName(FilePath value);
    [CompilerGeneratedAttribute]
public string get_Format();
    [CompilerGeneratedAttribute]
public void set_Format(string value);
    [CompilerGeneratedAttribute]
public FilePath get_Transform();
    [CompilerGeneratedAttribute]
public void set_Transform(FilePath value);
}
public class Cake.Common.Tools.NUnit.NUnit3Runner : Tool`1<NUnit3Settings> {
    private ICakeEnvironment _environment;
    public NUnit3Runner(IFileSystem fileSystem, ICakeEnvironment environment, IProcessRunner processRunner, IToolLocator tools);
    public void Run(IEnumerable`1<FilePath> assemblyPaths, NUnit3Settings settings);
    private ProcessArgumentBuilder GetArguments(IEnumerable`1<FilePath> assemblyPaths, NUnit3Settings settings);
    private bool HasResults(NUnit3Settings settings);
    protected virtual string GetToolName();
    protected virtual IEnumerable`1<string> GetToolExecutableNames();
    protected virtual void ProcessExitCode(int exitCode);
}
public class Cake.Common.Tools.NUnit.NUnit3Settings : ToolSettings {
    [CompilerGeneratedAttribute]
private string <Test>k__BackingField;
    [CompilerGeneratedAttribute]
private FilePath <TestList>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Where>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Timeout>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Seed>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Workers>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <StopOnError>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SkipNonTestAssemblies>k__BackingField;
    [CompilerGeneratedAttribute]
private DirectoryPath <Work>k__BackingField;
    [CompilerGeneratedAttribute]
private FilePath <OutputFile>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<NUnit3Result> <Results>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoResults>k__BackingField;
    [CompilerGeneratedAttribute]
private NUnit3Labels <Labels>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TeamCity>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoHeader>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoColor>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Configuration>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <X86>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisposeRunners>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShadowCopy>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Framework>k__BackingField;
    [CompilerGeneratedAttribute]
private NUnit3ProcessOption <Process>k__BackingField;
    [CompilerGeneratedAttribute]
private NUnit3AppDomainUsage <AppDomainUsage>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Agents>k__BackingField;
    [CompilerGeneratedAttribute]
private FilePath <ConfigFile>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <Params>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <TestParams>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<NUnitInternalTraceLevel> <TraceLevel>k__BackingField;
    public string Test { get; public set; }
    public FilePath TestList { get; public set; }
    public string Where { get; public set; }
    public Nullable`1<int> Timeout { get; public set; }
    public Nullable`1<int> Seed { get; public set; }
    public Nullable`1<int> Workers { get; public set; }
    public bool StopOnError { get; public set; }
    public bool SkipNonTestAssemblies { get; public set; }
    public DirectoryPath Work { get; public set; }
    public FilePath OutputFile { get; public set; }
    public ICollection`1<NUnit3Result> Results { get; public set; }
    public bool NoResults { get; public set; }
    public NUnit3Labels Labels { get; public set; }
    public bool TeamCity { get; public set; }
    public bool NoHeader { get; public set; }
    public bool NoColor { get; public set; }
    public string Configuration { get; public set; }
    public bool X86 { get; public set; }
    public bool DisposeRunners { get; public set; }
    public bool ShadowCopy { get; public set; }
    public string Framework { get; public set; }
    public NUnit3ProcessOption Process { get; public set; }
    public NUnit3AppDomainUsage AppDomainUsage { get; public set; }
    public Nullable`1<int> Agents { get; public set; }
    public FilePath ConfigFile { get; public set; }
    public IDictionary`2<string, string> Params { get; public set; }
    public IDictionary`2<string, string> TestParams { get; public set; }
    public Nullable`1<NUnitInternalTraceLevel> TraceLevel { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Test();
    [CompilerGeneratedAttribute]
public void set_Test(string value);
    [CompilerGeneratedAttribute]
public FilePath get_TestList();
    [CompilerGeneratedAttribute]
public void set_TestList(FilePath value);
    [CompilerGeneratedAttribute]
public string get_Where();
    [CompilerGeneratedAttribute]
public void set_Where(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Seed();
    [CompilerGeneratedAttribute]
public void set_Seed(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Workers();
    [CompilerGeneratedAttribute]
public void set_Workers(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public bool get_StopOnError();
    [CompilerGeneratedAttribute]
public void set_StopOnError(bool value);
    [CompilerGeneratedAttribute]
public bool get_SkipNonTestAssemblies();
    [CompilerGeneratedAttribute]
public void set_SkipNonTestAssemblies(bool value);
    [CompilerGeneratedAttribute]
public DirectoryPath get_Work();
    [CompilerGeneratedAttribute]
public void set_Work(DirectoryPath value);
    [CompilerGeneratedAttribute]
public FilePath get_OutputFile();
    [CompilerGeneratedAttribute]
public void set_OutputFile(FilePath value);
    [CompilerGeneratedAttribute]
public ICollection`1<NUnit3Result> get_Results();
    [CompilerGeneratedAttribute]
public void set_Results(ICollection`1<NUnit3Result> value);
    [CompilerGeneratedAttribute]
public bool get_NoResults();
    [CompilerGeneratedAttribute]
public void set_NoResults(bool value);
    [CompilerGeneratedAttribute]
public NUnit3Labels get_Labels();
    [CompilerGeneratedAttribute]
public void set_Labels(NUnit3Labels value);
    [CompilerGeneratedAttribute]
public bool get_TeamCity();
    [CompilerGeneratedAttribute]
public void set_TeamCity(bool value);
    [CompilerGeneratedAttribute]
public bool get_NoHeader();
    [CompilerGeneratedAttribute]
public void set_NoHeader(bool value);
    [CompilerGeneratedAttribute]
public bool get_NoColor();
    [CompilerGeneratedAttribute]
public void set_NoColor(bool value);
    [CompilerGeneratedAttribute]
public string get_Configuration();
    [CompilerGeneratedAttribute]
public void set_Configuration(string value);
    [CompilerGeneratedAttribute]
public bool get_X86();
    [CompilerGeneratedAttribute]
public void set_X86(bool value);
    [CompilerGeneratedAttribute]
public bool get_DisposeRunners();
    [CompilerGeneratedAttribute]
public void set_DisposeRunners(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShadowCopy();
    [CompilerGeneratedAttribute]
public void set_ShadowCopy(bool value);
    [CompilerGeneratedAttribute]
public string get_Framework();
    [CompilerGeneratedAttribute]
public void set_Framework(string value);
    [CompilerGeneratedAttribute]
public NUnit3ProcessOption get_Process();
    [CompilerGeneratedAttribute]
public void set_Process(NUnit3ProcessOption value);
    [CompilerGeneratedAttribute]
public NUnit3AppDomainUsage get_AppDomainUsage();
    [CompilerGeneratedAttribute]
public void set_AppDomainUsage(NUnit3AppDomainUsage value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Agents();
    [CompilerGeneratedAttribute]
public void set_Agents(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public FilePath get_ConfigFile();
    [CompilerGeneratedAttribute]
public void set_ConfigFile(FilePath value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_Params();
    [CompilerGeneratedAttribute]
public void set_Params(IDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_TestParams();
    [CompilerGeneratedAttribute]
public void set_TestParams(IDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public Nullable`1<NUnitInternalTraceLevel> get_TraceLevel();
    [CompilerGeneratedAttribute]
public void set_TraceLevel(Nullable`1<NUnitInternalTraceLevel> value);
}
[ExtensionAttribute]
[CakeAliasCategoryAttribute("NUnit")]
public static class Cake.Common.Tools.NUnit.NUnitAliases : object {
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void NUnit(ICakeContext context, GlobPattern pattern);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void NUnit(ICakeContext context, GlobPattern pattern, NUnitSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void NUnit(ICakeContext context, IEnumerable`1<string> assemblies);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void NUnit(ICakeContext context, IEnumerable`1<FilePath> assemblies);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void NUnit(ICakeContext context, IEnumerable`1<string> assemblies, NUnitSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void NUnit(ICakeContext context, IEnumerable`1<FilePath> assemblies, NUnitSettings settings);
}
public enum Cake.Common.Tools.NUnit.NUnitAppDomainUsage : Enum {
    public int value__;
    public static NUnitAppDomainUsage Default;
    public static NUnitAppDomainUsage None;
    public static NUnitAppDomainUsage Single;
}
public enum Cake.Common.Tools.NUnit.NUnitInternalTraceLevel : Enum {
    public int value__;
    public static NUnitInternalTraceLevel Off;
    public static NUnitInternalTraceLevel Error;
    public static NUnitInternalTraceLevel Warning;
    public static NUnitInternalTraceLevel Info;
    public static NUnitInternalTraceLevel Debug;
    public static NUnitInternalTraceLevel Verbose;
}
[ExtensionAttribute]
public static class Cake.Common.Tools.NUnit.NUnitInternalTraceLevelExtensions : object {
    [ExtensionAttribute]
public static string GetArgumentValue(NUnitInternalTraceLevel level);
}
public enum Cake.Common.Tools.NUnit.NUnitProcessOption : Enum {
    public int value__;
    public static NUnitProcessOption Single;
    public static NUnitProcessOption Separate;
    public static NUnitProcessOption Multiple;
}
public class Cake.Common.Tools.NUnit.NUnitRunner : Tool`1<NUnitSettings> {
    private ICakeEnvironment _environment;
    private bool _x86;
    public NUnitRunner(IFileSystem fileSystem, ICakeEnvironment environment, IProcessRunner processRunner, IToolLocator tools);
    public void Run(IEnumerable`1<FilePath> assemblyPaths, NUnitSettings settings);
    private ProcessArgumentBuilder GetArguments(IEnumerable`1<FilePath> assemblyPaths, NUnitSettings settings);
    protected virtual string GetToolName();
    protected virtual IEnumerable`1<string> GetToolExecutableNames();
    protected virtual void ProcessExitCode(int exitCode);
}
public class Cake.Common.Tools.NUnit.NUnitSettings : ToolSettings {
    [CompilerGeneratedAttribute]
private FilePath <ResultsFile>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoResults>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Framework>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Include>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Exclude>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Timeout>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShadowCopy>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoThread>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoLogo>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <StopOnError>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Trace>k__BackingField;
    [CompilerGeneratedAttribute]
private FilePath <OutputFile>k__BackingField;
    [CompilerGeneratedAttribute]
private FilePath <ErrorOutputFile>k__BackingField;
    [CompilerGeneratedAttribute]
private NUnitProcessOption <Process>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseSingleThreadedApartment>k__BackingField;
    [CompilerGeneratedAttribute]
private NUnitAppDomainUsage <AppDomainUsage>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <X86>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Labels>k__BackingField;
    public FilePath ResultsFile { get; public set; }
    public bool NoResults { get; public set; }
    public string Framework { get; public set; }
    public string Include { get; public set; }
    public string Exclude { get; public set; }
    public Nullable`1<int> Timeout { get; public set; }
    public bool ShadowCopy { get; public set; }
    public bool NoThread { get; public set; }
    public bool NoLogo { get; public set; }
    public bool StopOnError { get; public set; }
    public string Trace { get; public set; }
    public FilePath OutputFile { get; public set; }
    public FilePath ErrorOutputFile { get; public set; }
    public NUnitProcessOption Process { get; public set; }
    public bool UseSingleThreadedApartment { get; public set; }
    public NUnitAppDomainUsage AppDomainUsage { get; public set; }
    public bool X86 { get; public set; }
    public bool Labels { get; public set; }
    [CompilerGeneratedAttribute]
public FilePath get_ResultsFile();
    [CompilerGeneratedAttribute]
public void set_ResultsFile(FilePath value);
    [CompilerGeneratedAttribute]
public bool get_NoResults();
    [CompilerGeneratedAttribute]
public void set_NoResults(bool value);
    [CompilerGeneratedAttribute]
public string get_Framework();
    [CompilerGeneratedAttribute]
public void set_Framework(string value);
    [CompilerGeneratedAttribute]
public string get_Include();
    [CompilerGeneratedAttribute]
public void set_Include(string value);
    [CompilerGeneratedAttribute]
public string get_Exclude();
    [CompilerGeneratedAttribute]
public void set_Exclude(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public bool get_ShadowCopy();
    [CompilerGeneratedAttribute]
public void set_ShadowCopy(bool value);
    [CompilerGeneratedAttribute]
public bool get_NoThread();
    [CompilerGeneratedAttribute]
public void set_NoThread(bool value);
    [CompilerGeneratedAttribute]
public bool get_NoLogo();
    [CompilerGeneratedAttribute]
public void set_NoLogo(bool value);
    [CompilerGeneratedAttribute]
public bool get_StopOnError();
    [CompilerGeneratedAttribute]
public void set_StopOnError(bool value);
    [CompilerGeneratedAttribute]
public string get_Trace();
    [CompilerGeneratedAttribute]
public void set_Trace(string value);
    [CompilerGeneratedAttribute]
public FilePath get_OutputFile();
    [CompilerGeneratedAttribute]
public void set_OutputFile(FilePath value);
    [CompilerGeneratedAttribute]
public FilePath get_ErrorOutputFile();
    [CompilerGeneratedAttribute]
public void set_ErrorOutputFile(FilePath value);
    [CompilerGeneratedAttribute]
public NUnitProcessOption get_Process();
    [CompilerGeneratedAttribute]
public void set_Process(NUnitProcessOption value);
    [CompilerGeneratedAttribute]
public bool get_UseSingleThreadedApartment();
    [CompilerGeneratedAttribute]
public void set_UseSingleThreadedApartment(bool value);
    [CompilerGeneratedAttribute]
public NUnitAppDomainUsage get_AppDomainUsage();
    [CompilerGeneratedAttribute]
public void set_AppDomainUsage(NUnitAppDomainUsage value);
    [CompilerGeneratedAttribute]
public bool get_X86();
    [CompilerGeneratedAttribute]
public void set_X86(bool value);
    [CompilerGeneratedAttribute]
public bool get_Labels();
    [CompilerGeneratedAttribute]
public void set_Labels(bool value);
}
internal class Cake.Common.Tools.OctopusDeploy.CreateReleaseArgumentBuilder : OctopusDeployArgumentBuilder`1<CreateReleaseSettings> {
    private string _projectName;
    private CreateReleaseSettings _settings;
    private ICakeEnvironment _environment;
    public CreateReleaseArgumentBuilder(string projectName, CreateReleaseSettings settings, ICakeEnvironment environment);
    public ProcessArgumentBuilder Get();
    private void AppendDeploymnetArguments();
    private static void AppendPackages(CreateReleaseSettings settings, ProcessArgumentBuilder builder);
}
public class Cake.Common.Tools.OctopusDeploy.CreateReleaseSettings : OctopusDeployCommonToolSettings {
    [CompilerGeneratedAttribute]
private string <ReleaseNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultPackageVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Packages>k__BackingField;
    [CompilerGeneratedAttribute]
private FilePath <PackagesFolder>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReleaseNotes>k__BackingField;
    [CompilerGeneratedAttribute]
private FilePath <ReleaseNotesFile>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreExisting>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DeployTo>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <DeployToMultiple>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowProgress>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ForcePackageDownload>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <WaitForDeployment>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <DeploymentTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CancelOnTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <DeploymentChecksLeepCycle>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <GuidedFailure>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <SpecificMachines>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Force>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <SkipSteps>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoRawLog>k__BackingField;
    [CompilerGeneratedAttribute]
private FilePath <RawLogFile>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<KeyValuePair`2<string, string>> <Variables>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <DeployAt>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Tenant>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <TenantTags>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Channel>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreChannelRules>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DeploymentProgress>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExcludeMachines>k__BackingField;
    public string ReleaseNumber { get; public set; }
    public string DefaultPackageVersion { get; public set; }
    public Dictionary`2<string, string> Packages { get; public set; }
    public FilePath PackagesFolder { get; public set; }
    public string ReleaseNotes { get; public set; }
    public FilePath ReleaseNotesFile { get; public set; }
    public bool IgnoreExisting { get; public set; }
    public string DeployTo { get; public set; }
    public String[] DeployToMultiple { get; public set; }
    public bool ShowProgress { get; public set; }
    public bool ForcePackageDownload { get; public set; }
    public bool WaitForDeployment { get; public set; }
    public Nullable`1<TimeSpan> DeploymentTimeout { get; public set; }
    public bool CancelOnTimeout { get; public set; }
    public Nullable`1<TimeSpan> DeploymentChecksLeepCycle { get; public set; }
    public Nullable`1<bool> GuidedFailure { get; public set; }
    public String[] SpecificMachines { get; public set; }
    public bool Force { get; public set; }
    public String[] SkipSteps { get; public set; }
    public bool NoRawLog { get; public set; }
    public FilePath RawLogFile { get; public set; }
    public List`1<KeyValuePair`2<string, string>> Variables { get; public set; }
    public Nullable`1<DateTimeOffset> DeployAt { get; public set; }
    public String[] Tenant { get; public set; }
    public String[] TenantTags { get; public set; }
    public string Channel { get; public set; }
    public bool IgnoreChannelRules { get; public set; }
    public bool DeploymentProgress { get; public set; }
    public string ExcludeMachines { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ReleaseNumber();
    [CompilerGeneratedAttribute]
public void set_ReleaseNumber(string value);
    [CompilerGeneratedAttribute]
public string get_DefaultPackageVersion();
    [CompilerGeneratedAttribute]
public void set_DefaultPackageVersion(string value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_Packages();
    [CompilerGeneratedAttribute]
public void set_Packages(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public FilePath get_PackagesFolder();
    [CompilerGeneratedAttribute]
public void set_PackagesFolder(FilePath value);
    [CompilerGeneratedAttribute]
public string get_ReleaseNotes();
    [CompilerGeneratedAttribute]
public void set_ReleaseNotes(string value);
    [CompilerGeneratedAttribute]
public FilePath get_ReleaseNotesFile();
    [CompilerGeneratedAttribute]
public void set_ReleaseNotesFile(FilePath value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreExisting();
    [CompilerGeneratedAttribute]
public void set_IgnoreExisting(bool value);
    [CompilerGeneratedAttribute]
public string get_DeployTo();
    [CompilerGeneratedAttribute]
public void set_DeployTo(string value);
    [CompilerGeneratedAttribute]
public String[] get_DeployToMultiple();
    [CompilerGeneratedAttribute]
public void set_DeployToMultiple(String[] value);
    [CompilerGeneratedAttribute]
public bool get_ShowProgress();
    [CompilerGeneratedAttribute]
public void set_ShowProgress(bool value);
    [CompilerGeneratedAttribute]
public bool get_ForcePackageDownload();
    [CompilerGeneratedAttribute]
public void set_ForcePackageDownload(bool value);
    [CompilerGeneratedAttribute]
public bool get_WaitForDeployment();
    [CompilerGeneratedAttribute]
public void set_WaitForDeployment(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_DeploymentTimeout();
    [CompilerGeneratedAttribute]
public void set_DeploymentTimeout(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public bool get_CancelOnTimeout();
    [CompilerGeneratedAttribute]
public void set_CancelOnTimeout(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_DeploymentChecksLeepCycle();
    [CompilerGeneratedAttribute]
public void set_DeploymentChecksLeepCycle(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_GuidedFailure();
    [CompilerGeneratedAttribute]
public void set_GuidedFailure(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public String[] get_SpecificMachines();
    [CompilerGeneratedAttribute]
public void set_SpecificMachines(String[] value);
    [CompilerGeneratedAttribute]
public bool get_Force();
    [CompilerGeneratedAttribute]
public void set_Force(bool value);
    [CompilerGeneratedAttribute]
public String[] get_SkipSteps();
    [CompilerGeneratedAttribute]
public void set_SkipSteps(String[] value);
    [CompilerGeneratedAttribute]
public bool get_NoRawLog();
    [CompilerGeneratedAttribute]
public void set_NoRawLog(bool value);
    [CompilerGeneratedAttribute]
public FilePath get_RawLogFile();
    [CompilerGeneratedAttribute]
public void set_RawLogFile(FilePath value);
    [CompilerGeneratedAttribute]
public List`1<KeyValuePair`2<string, string>> get_Variables();
    [CompilerGeneratedAttribute]
public void set_Variables(List`1<KeyValuePair`2<string, string>> value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_DeployAt();
    [CompilerGeneratedAttribute]
public void set_DeployAt(Nullable`1<DateTimeOffset> value);
    [CompilerGeneratedAttribute]
public String[] get_Tenant();
    [CompilerGeneratedAttribute]
public void set_Tenant(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_TenantTags();
    [CompilerGeneratedAttribute]
public void set_TenantTags(String[] value);
    [CompilerGeneratedAttribute]
public string get_Channel();
    [CompilerGeneratedAttribute]
public void set_Channel(string value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreChannelRules();
    [CompilerGeneratedAttribute]
public void set_IgnoreChannelRules(bool value);
    [CompilerGeneratedAttribute]
public bool get_DeploymentProgress();
    [CompilerGeneratedAttribute]
public void set_DeploymentProgress(bool value);
    [CompilerGeneratedAttribute]
public string get_ExcludeMachines();
    [CompilerGeneratedAttribute]
public void set_ExcludeMachines(string value);
}
public class Cake.Common.Tools.OctopusDeploy.DeploymentQueryResultParser : object {
    public IEnumerable`1<OctopusDeployment> ParseResults(IEnumerable`1<string> output);
    protected virtual OctopusDeployment ParseSet(List`1<string> lineSet);
    private string getValueFromLine(string propName, string line);
}
internal class Cake.Common.Tools.OctopusDeploy.DeployReleaseArgumentBuilder : OctopusDeployArgumentBuilder`1<OctopusDeployReleaseDeploymentSettings> {
    private ICakeEnvironment _environment;
    private string _projectName;
    private String[] _deployTo;
    private string _releaseNumber;
    private OctopusDeployReleaseDeploymentSettings _settings;
    public DeployReleaseArgumentBuilder(string server, string apiKey, string projectName, String[] deployTo, string releaseNumber, OctopusDeployReleaseDeploymentSettings settings, ICakeEnvironment environment);
    public ProcessArgumentBuilder Get();
    private void AppendDeploymentParameters();
}
[CompilerGeneratedAttribute]
internal class Cake.Common.Tools.OctopusDeploy.NamespaceDoc : object {
}
[ExtensionAttribute]
[CakeAliasCategoryAttribute("Octopus Deploy")]
public static class Cake.Common.Tools.OctopusDeploy.OctopusDeployAliases : object {
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void OctoCreateRelease(ICakeContext context, string projectName, CreateReleaseSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void OctoPush(ICakeContext context, string server, string apiKey, FilePath packagePath, OctopusPushSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void OctoPush(ICakeContext context, string server, string apiKey, IEnumerable`1<FilePath> packagePaths, OctopusPushSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void OctoPack(ICakeContext context, string id);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void OctoPack(ICakeContext context, string id, OctopusPackSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void OctoDeployRelease(ICakeContext context, string server, string apiKey, string projectName, string deployTo, string releaseNumber, OctopusDeployReleaseDeploymentSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void OctoDeployRelease(ICakeContext context, string server, string apiKey, string projectName, String[] deployToMultiple, string releaseNumber, OctopusDeployReleaseDeploymentSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void OctoPromoteRelease(ICakeContext context, string server, string apiKey, string projectName, string deployFrom, string deployTo, OctopusDeployPromoteReleaseSettings settings);
}
internal abstract class Cake.Common.Tools.OctopusDeploy.OctopusDeployArgumentBuilder`1 : object {
    private string _serverUrl;
    private string _apiKey;
    [CompilerGeneratedAttribute]
private ICakeEnvironment <Environment>k__BackingField;
    [CompilerGeneratedAttribute]
private ProcessArgumentBuilder <Builder>k__BackingField;
    [CompilerGeneratedAttribute]
private T <Settings>k__BackingField;
    protected ICakeEnvironment Environment { get; }
    protected ProcessArgumentBuilder Builder { get; }
    protected T Settings { get; }
    protected OctopusDeployArgumentBuilder`1(ICakeEnvironment environment, T settings);
    protected OctopusDeployArgumentBuilder`1(string server, string apiKey, ICakeEnvironment environment, T settings);
    [CompilerGeneratedAttribute]
protected ICakeEnvironment get_Environment();
    [CompilerGeneratedAttribute]
protected ProcessArgumentBuilder get_Builder();
    [CompilerGeneratedAttribute]
protected T get_Settings();
    protected void AppendArgumentIfNotNull(string argumentName, string value);
    protected void AppendArgumentIfNotNull(string argumentName, FilePath value);
    protected void AppendMultipleTimes(string argumentName, String[] values);
    protected ProcessArgumentBuilder AppendConditionalFlag(bool condition, string flag);
    protected void AppendCommonArguments();
}
public abstract class Cake.Common.Tools.OctopusDeploy.OctopusDeployCommonToolSettings : OctopusDeployToolSettings {
    [CompilerGeneratedAttribute]
private string <Username>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Password>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Server>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ApiKey>k__BackingField;
    [CompilerGeneratedAttribute]
private FilePath <ConfigurationFile>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableDebugLogging>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreSslErrors>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableServiceMessages>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Space>k__BackingField;
    public string Username { get; public set; }
    public string Password { get; public set; }
    public string Server { get; public set; }
    public string ApiKey { get; public set; }
    public FilePath ConfigurationFile { get; public set; }
    public bool EnableDebugLogging { get; public set; }
    public bool IgnoreSslErrors { get; public set; }
    public bool EnableServiceMessages { get; public set; }
    public string Space { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Username();
    [CompilerGeneratedAttribute]
public void set_Username(string value);
    [CompilerGeneratedAttribute]
public string get_Password();
    [CompilerGeneratedAttribute]
public void set_Password(string value);
    [CompilerGeneratedAttribute]
public string get_Server();
    [CompilerGeneratedAttribute]
public void set_Server(string value);
    [CompilerGeneratedAttribute]
public string get_ApiKey();
    [CompilerGeneratedAttribute]
public void set_ApiKey(string value);
    [CompilerGeneratedAttribute]
public FilePath get_ConfigurationFile();
    [CompilerGeneratedAttribute]
public void set_ConfigurationFile(FilePath value);
    [CompilerGeneratedAttribute]
public bool get_EnableDebugLogging();
    [CompilerGeneratedAttribute]
public void set_EnableDebugLogging(bool value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreSslErrors();
    [CompilerGeneratedAttribute]
public void set_IgnoreSslErrors(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableServiceMessages();
    [CompilerGeneratedAttribute]
public void set_EnableServiceMessages(bool value);
    [CompilerGeneratedAttribute]
public string get_Space();
    [CompilerGeneratedAttribute]
public void set_Space(string value);
}
public class Cake.Common.Tools.OctopusDeploy.OctopusDeployDeploymentQuerier : OctopusDeployTool`1<OctopusDeploymentQuerySettings> {
    public OctopusDeployDeploymentQuerier(IFileSystem fileSystem, ICakeEnvironment environment, IProcessRunner processRunner, IToolLocator tools);
    public IEnumerable`1<OctopusDeployment> QueryOctopusDeployments(string server, string apiKey, OctopusDeploymentQuerySettings querySettings);
}
public class Cake.Common.Tools.OctopusDeploy.OctopusDeployment : object {
    [CompilerGeneratedAttribute]
private string <ProjectName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Environment>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Channel>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <Created>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <Assembled>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PackageVersions>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReleaseNotesHtml>k__BackingField;
    public string ProjectName { get; public set; }
    public string Environment { get; public set; }
    public string Channel { get; public set; }
    public DateTimeOffset Created { get; public set; }
    public DateTimeOffset Assembled { get; public set; }
    public string Version { get; public set; }
    public string PackageVersions { get; public set; }
    public string ReleaseNotesHtml { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ProjectName();
    [CompilerGeneratedAttribute]
public void set_ProjectName(string value);
    [CompilerGeneratedAttribute]
public string get_Environment();
    [CompilerGeneratedAttribute]
public void set_Environment(string value);
    [CompilerGeneratedAttribute]
public string get_Channel();
    [CompilerGeneratedAttribute]
public void set_Channel(string value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_Created();
    [CompilerGeneratedAttribute]
public void set_Created(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_Assembled();
    [CompilerGeneratedAttribute]
public void set_Assembled(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(string value);
    [CompilerGeneratedAttribute]
public string get_PackageVersions();
    [CompilerGeneratedAttribute]
public void set_PackageVersions(string value);
    [CompilerGeneratedAttribute]
public string get_ReleaseNotesHtml();
    [CompilerGeneratedAttribute]
public void set_ReleaseNotesHtml(string value);
}
internal class Cake.Common.Tools.OctopusDeploy.OctopusDeploymentQueryArgumentBuilder : OctopusDeployArgumentBuilder`1<OctopusDeploymentQuerySettings> {
    public OctopusDeploymentQueryArgumentBuilder(string server, string apiKey, ICakeEnvironment environment, OctopusDeploymentQuerySettings settings);
    public ProcessArgumentBuilder Get();
    private void AppendPackageArguments();
}
public class Cake.Common.Tools.OctopusDeploy.OctopusDeploymentQuerySettings : OctopusDeployCommonToolSettings {
    [CompilerGeneratedAttribute]
private string <EnvironmentName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProjectName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TenantName>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Count>k__BackingField;
    public string EnvironmentName { get; public set; }
    public string ProjectName { get; public set; }
    public string TenantName { get; public set; }
    public int Count { get; public set; }
    [CompilerGeneratedAttribute]
public string get_EnvironmentName();
    [CompilerGeneratedAttribute]
public void set_EnvironmentName(string value);
    [CompilerGeneratedAttribute]
public string get_ProjectName();
    [CompilerGeneratedAttribute]
public void set_ProjectName(string value);
    [CompilerGeneratedAttribute]
public string get_TenantName();
    [CompilerGeneratedAttribute]
public void set_TenantName(string value);
    [CompilerGeneratedAttribute]
public int get_Count();
    [CompilerGeneratedAttribute]
public void set_Count(int value);
}
public class Cake.Common.Tools.OctopusDeploy.OctopusDeployPacker : OctopusDeployTool`1<OctopusPackSettings> {
    public OctopusDeployPacker(IFileSystem fileSystem, ICakeEnvironment environment, IProcessRunner processRunner, IToolLocator tools);
    public void Pack(string id, OctopusPackSettings settings);
    private ProcessArgumentBuilder GetArguments(string id, OctopusPackSettings settings);
}
public class Cake.Common.Tools.OctopusDeploy.OctopusDeployPromoteReleaseSettings : OctopusDeployCommonToolSettings {
    [CompilerGeneratedAttribute]
private bool <UpdateVariables>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowProgress>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ForcePackageDownload>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <WaitForDeployment>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <DeploymentTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CancelOnTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <DeploymentChecksLeepCycle>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <GuidedFailure>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <SpecificMachines>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Force>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <SkipSteps>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoRawLog>k__BackingField;
    [CompilerGeneratedAttribute]
private FilePath <RawLogFile>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <Variables>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <DeployAt>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Tenant>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <TenantTags>k__BackingField;
    public bool UpdateVariables { get; public set; }
    public bool ShowProgress { get; public set; }
    public bool ForcePackageDownload { get; public set; }
    public bool WaitForDeployment { get; public set; }
    public Nullable`1<TimeSpan> DeploymentTimeout { get; public set; }
    public bool CancelOnTimeout { get; public set; }
    public Nullable`1<TimeSpan> DeploymentChecksLeepCycle { get; public set; }
    public Nullable`1<bool> GuidedFailure { get; public set; }
    public String[] SpecificMachines { get; public set; }
    public bool Force { get; public set; }
    public String[] SkipSteps { get; public set; }
    public bool NoRawLog { get; public set; }
    public FilePath RawLogFile { get; public set; }
    public IDictionary`2<string, string> Variables { get; public set; }
    public Nullable`1<DateTimeOffset> DeployAt { get; public set; }
    public String[] Tenant { get; public set; }
    public String[] TenantTags { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_UpdateVariables();
    [CompilerGeneratedAttribute]
public void set_UpdateVariables(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShowProgress();
    [CompilerGeneratedAttribute]
public void set_ShowProgress(bool value);
    [CompilerGeneratedAttribute]
public bool get_ForcePackageDownload();
    [CompilerGeneratedAttribute]
public void set_ForcePackageDownload(bool value);
    [CompilerGeneratedAttribute]
public bool get_WaitForDeployment();
    [CompilerGeneratedAttribute]
public void set_WaitForDeployment(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_DeploymentTimeout();
    [CompilerGeneratedAttribute]
public void set_DeploymentTimeout(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public bool get_CancelOnTimeout();
    [CompilerGeneratedAttribute]
public void set_CancelOnTimeout(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_DeploymentChecksLeepCycle();
    [CompilerGeneratedAttribute]
public void set_DeploymentChecksLeepCycle(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_GuidedFailure();
    [CompilerGeneratedAttribute]
public void set_GuidedFailure(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public String[] get_SpecificMachines();
    [CompilerGeneratedAttribute]
public void set_SpecificMachines(String[] value);
    [CompilerGeneratedAttribute]
public bool get_Force();
    [CompilerGeneratedAttribute]
public void set_Force(bool value);
    [CompilerGeneratedAttribute]
public String[] get_SkipSteps();
    [CompilerGeneratedAttribute]
public void set_SkipSteps(String[] value);
    [CompilerGeneratedAttribute]
public bool get_NoRawLog();
    [CompilerGeneratedAttribute]
public void set_NoRawLog(bool value);
    [CompilerGeneratedAttribute]
public FilePath get_RawLogFile();
    [CompilerGeneratedAttribute]
public void set_RawLogFile(FilePath value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_Variables();
    [CompilerGeneratedAttribute]
public void set_Variables(IDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_DeployAt();
    [CompilerGeneratedAttribute]
public void set_DeployAt(Nullable`1<DateTimeOffset> value);
    [CompilerGeneratedAttribute]
public String[] get_Tenant();
    [CompilerGeneratedAttribute]
public void set_Tenant(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_TenantTags();
    [CompilerGeneratedAttribute]
public void set_TenantTags(String[] value);
}
public class Cake.Common.Tools.OctopusDeploy.OctopusDeployPusher : OctopusDeployTool`1<OctopusPushSettings> {
    public OctopusDeployPusher(IFileSystem fileSystem, ICakeEnvironment environment, IProcessRunner processRunner, IToolLocator tools);
    public void PushPackage(string server, string apiKey, FilePath[] packagePaths, OctopusPushSettings settings);
}
public class Cake.Common.Tools.OctopusDeploy.OctopusDeployReleaseCreator : OctopusDeployTool`1<CreateReleaseSettings> {
    public OctopusDeployReleaseCreator(IFileSystem fileSystem, ICakeEnvironment environment, IProcessRunner processRunner, IToolLocator tools);
    public void CreateRelease(string projectName, CreateReleaseSettings settings);
}
public class Cake.Common.Tools.OctopusDeploy.OctopusDeployReleaseDeployer : OctopusDeployTool`1<OctopusDeployReleaseDeploymentSettings> {
    public OctopusDeployReleaseDeployer(IFileSystem fileSystem, ICakeEnvironment environment, IProcessRunner processRunner, IToolLocator tools);
    public void DeployRelease(string server, string apiKey, string projectName, String[] deployTo, string releaseNumber, OctopusDeployReleaseDeploymentSettings settings);
}
public class Cake.Common.Tools.OctopusDeploy.OctopusDeployReleaseDeploymentSettings : OctopusDeployCommonToolSettings {
    [CompilerGeneratedAttribute]
private bool <ShowProgress>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ForcePackageDownload>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <WaitForDeployment>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <DeploymentTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CancelOnTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <DeploymentChecksLeepCycle>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <GuidedFailure>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <SpecificMachines>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Force>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <SkipSteps>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoRawLog>k__BackingField;
    [CompilerGeneratedAttribute]
private FilePath <RawLogFile>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Variables>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <DeployAt>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Tenant>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <TenantTags>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Channel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExcludeMachines>k__BackingField;
    public bool ShowProgress { get; public set; }
    public bool ForcePackageDownload { get; public set; }
    public bool WaitForDeployment { get; public set; }
    public Nullable`1<TimeSpan> DeploymentTimeout { get; public set; }
    public bool CancelOnTimeout { get; public set; }
    public Nullable`1<TimeSpan> DeploymentChecksLeepCycle { get; public set; }
    public Nullable`1<bool> GuidedFailure { get; public set; }
    public String[] SpecificMachines { get; public set; }
    public bool Force { get; public set; }
    public String[] SkipSteps { get; public set; }
    public bool NoRawLog { get; public set; }
    public FilePath RawLogFile { get; public set; }
    public Dictionary`2<string, string> Variables { get; public set; }
    public Nullable`1<DateTimeOffset> DeployAt { get; public set; }
    public String[] Tenant { get; public set; }
    public String[] TenantTags { get; public set; }
    public string Channel { get; public set; }
    public string ExcludeMachines { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_ShowProgress();
    [CompilerGeneratedAttribute]
public void set_ShowProgress(bool value);
    [CompilerGeneratedAttribute]
public bool get_ForcePackageDownload();
    [CompilerGeneratedAttribute]
public void set_ForcePackageDownload(bool value);
    [CompilerGeneratedAttribute]
public bool get_WaitForDeployment();
    [CompilerGeneratedAttribute]
public void set_WaitForDeployment(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_DeploymentTimeout();
    [CompilerGeneratedAttribute]
public void set_DeploymentTimeout(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public bool get_CancelOnTimeout();
    [CompilerGeneratedAttribute]
public void set_CancelOnTimeout(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_DeploymentChecksLeepCycle();
    [CompilerGeneratedAttribute]
public void set_DeploymentChecksLeepCycle(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_GuidedFailure();
    [CompilerGeneratedAttribute]
public void set_GuidedFailure(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public String[] get_SpecificMachines();
    [CompilerGeneratedAttribute]
public void set_SpecificMachines(String[] value);
    [CompilerGeneratedAttribute]
public bool get_Force();
    [CompilerGeneratedAttribute]
public void set_Force(bool value);
    [CompilerGeneratedAttribute]
public String[] get_SkipSteps();
    [CompilerGeneratedAttribute]
public void set_SkipSteps(String[] value);
    [CompilerGeneratedAttribute]
public bool get_NoRawLog();
    [CompilerGeneratedAttribute]
public void set_NoRawLog(bool value);
    [CompilerGeneratedAttribute]
public FilePath get_RawLogFile();
    [CompilerGeneratedAttribute]
public void set_RawLogFile(FilePath value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_Variables();
    [CompilerGeneratedAttribute]
public void set_Variables(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_DeployAt();
    [CompilerGeneratedAttribute]
public void set_DeployAt(Nullable`1<DateTimeOffset> value);
    [CompilerGeneratedAttribute]
public String[] get_Tenant();
    [CompilerGeneratedAttribute]
public void set_Tenant(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_TenantTags();
    [CompilerGeneratedAttribute]
public void set_TenantTags(String[] value);
    [CompilerGeneratedAttribute]
public string get_Channel();
    [CompilerGeneratedAttribute]
public void set_Channel(string value);
    [CompilerGeneratedAttribute]
public string get_ExcludeMachines();
    [CompilerGeneratedAttribute]
public void set_ExcludeMachines(string value);
}
public class Cake.Common.Tools.OctopusDeploy.OctopusDeployReleasePromoter : OctopusDeployTool`1<OctopusDeployPromoteReleaseSettings> {
    public OctopusDeployReleasePromoter(IFileSystem fileSystem, ICakeEnvironment environment, IProcessRunner processRunner, IToolLocator tools);
    public void PromoteRelease(string server, string apiKey, string projectName, string deployFrom, string deployTo, OctopusDeployPromoteReleaseSettings settings);
}
public class Cake.Common.Tools.OctopusDeploy.OctopusDeployTool`1 : Tool`1<TSettings> {
    [CompilerGeneratedAttribute]
private ICakeEnvironment <Environment>k__BackingField;
    protected ICakeEnvironment Environment { get; }
    public OctopusDeployTool`1(IFileSystem fileSystem, ICakeEnvironment environment, IProcessRunner processRunner, IToolLocator tools);
    [CompilerGeneratedAttribute]
protected ICakeEnvironment get_Environment();
    protected virtual string GetToolName();
    protected virtual IEnumerable`1<string> GetToolExecutableNames();
}
public abstract class Cake.Common.Tools.OctopusDeploy.OctopusDeployToolSettings : ToolSettings {
}
public enum Cake.Common.Tools.OctopusDeploy.OctopusPackFormat : Enum {
    public int value__;
    public static OctopusPackFormat NuPkg;
    public static OctopusPackFormat Zip;
}
public class Cake.Common.Tools.OctopusDeploy.OctopusPackSettings : OctopusDeployToolSettings {
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private OctopusPackFormat <Format>k__BackingField;
    [CompilerGeneratedAttribute]
private DirectoryPath <OutFolder>k__BackingField;
    [CompilerGeneratedAttribute]
private DirectoryPath <BasePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Author>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReleaseNotes>k__BackingField;
    [CompilerGeneratedAttribute]
private FilePath <ReleaseNotesFile>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<string> <Include>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Overwrite>k__BackingField;
    public string Version { get; public set; }
    public OctopusPackFormat Format { get; public set; }
    public DirectoryPath OutFolder { get; public set; }
    public DirectoryPath BasePath { get; public set; }
    public string Author { get; public set; }
    public string Title { get; public set; }
    public string Description { get; public set; }
    public string ReleaseNotes { get; public set; }
    public FilePath ReleaseNotesFile { get; public set; }
    public ICollection`1<string> Include { get; public set; }
    public bool Overwrite { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(string value);
    [CompilerGeneratedAttribute]
public OctopusPackFormat get_Format();
    [CompilerGeneratedAttribute]
public void set_Format(OctopusPackFormat value);
    [CompilerGeneratedAttribute]
public DirectoryPath get_OutFolder();
    [CompilerGeneratedAttribute]
public void set_OutFolder(DirectoryPath value);
    [CompilerGeneratedAttribute]
public DirectoryPath get_BasePath();
    [CompilerGeneratedAttribute]
public void set_BasePath(DirectoryPath value);
    [CompilerGeneratedAttribute]
public string get_Author();
    [CompilerGeneratedAttribute]
public void set_Author(string value);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public string get_ReleaseNotes();
    [CompilerGeneratedAttribute]
public void set_ReleaseNotes(string value);
    [CompilerGeneratedAttribute]
public FilePath get_ReleaseNotesFile();
    [CompilerGeneratedAttribute]
public void set_ReleaseNotesFile(FilePath value);
    [CompilerGeneratedAttribute]
public ICollection`1<string> get_Include();
    [CompilerGeneratedAttribute]
public void set_Include(ICollection`1<string> value);
    [CompilerGeneratedAttribute]
public bool get_Overwrite();
    [CompilerGeneratedAttribute]
public void set_Overwrite(bool value);
}
internal class Cake.Common.Tools.OctopusDeploy.OctopusPushArgumentBuilder : OctopusDeployArgumentBuilder`1<OctopusPushSettings> {
    private List`1<FilePath> _packagePaths;
    public OctopusPushArgumentBuilder(IEnumerable`1<FilePath> packagePaths, string server, string apiKey, ICakeEnvironment environment, OctopusPushSettings settings);
    public ProcessArgumentBuilder Get();
    private void AppendPackageArguments();
}
public class Cake.Common.Tools.OctopusDeploy.OctopusPushSettings : OctopusDeployCommonToolSettings {
    [CompilerGeneratedAttribute]
private bool <ReplaceExisting>k__BackingField;
    public bool ReplaceExisting { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_ReplaceExisting();
    [CompilerGeneratedAttribute]
public void set_ReplaceExisting(bool value);
}
internal class Cake.Common.Tools.OctopusDeploy.PromoteReleaseArgumentBuilder : OctopusDeployArgumentBuilder`1<OctopusDeployPromoteReleaseSettings> {
    private string _projectName;
    private string _deployFrom;
    private string _deployTo;
    private OctopusDeployPromoteReleaseSettings _settings;
    private ICakeEnvironment _environment;
    public PromoteReleaseArgumentBuilder(string server, string apiKey, string projectName, string deployFrom, string deployTo, OctopusDeployPromoteReleaseSettings settings, ICakeEnvironment environment);
    public ProcessArgumentBuilder Get();
    private void AppendCommonAndDeploymentParameters();
    private void AppendDeploymentParameters();
}
[ExtensionAttribute]
[CakeAliasCategoryAttribute("OpenCover")]
public static class Cake.Common.Tools.OpenCover.OpenCoverAliases : object {
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void OpenCover(ICakeContext context, Action`1<ICakeContext> action, FilePath outputFile, OpenCoverSettings settings);
}
internal class Cake.Common.Tools.OpenCover.OpenCoverContext : CakeContextAdapter {
    private OpenCoverProcessRunner _runner;
    [CompilerGeneratedAttribute]
private ICakeLog <Log>k__BackingField;
    public ICakeLog Log { get; }
    public IProcessRunner ProcessRunner { get; }
    public FilePath FilePath { get; }
    public ProcessSettings Settings { get; }
    public OpenCoverContext(ICakeContext context);
    [CompilerGeneratedAttribute]
public virtual ICakeLog get_Log();
    public virtual IProcessRunner get_ProcessRunner();
    public FilePath get_FilePath();
    public ProcessSettings get_Settings();
}
[FlagsAttribute]
public enum Cake.Common.Tools.OpenCover.OpenCoverHideSkippedOption : Enum {
    public int value__;
    public static OpenCoverHideSkippedOption None;
    public static OpenCoverHideSkippedOption File;
    public static OpenCoverHideSkippedOption Filter;
    public static OpenCoverHideSkippedOption Attribute;
    public static OpenCoverHideSkippedOption MissingPdb;
    public static OpenCoverHideSkippedOption All;
}
[ExtensionAttribute]
public static class Cake.Common.Tools.OpenCover.OpenCoverHideSkippedOptionExtensions : object {
    [IteratorStateMachineAttribute("Cake.Common.Tools.OpenCover.OpenCoverHideSkippedOptionExtensions/<GetFlags>d__0")]
[ExtensionAttribute]
public static IEnumerable`1<OpenCoverHideSkippedOption> GetFlags(OpenCoverHideSkippedOption openCoverHideSkippedOption);
}
public enum Cake.Common.Tools.OpenCover.OpenCoverLogLevel : Enum {
    public int value__;
    public static OpenCoverLogLevel Info;
    public static OpenCoverLogLevel Off;
    public static OpenCoverLogLevel Fatal;
    public static OpenCoverLogLevel Error;
    public static OpenCoverLogLevel Warn;
    public static OpenCoverLogLevel Debug;
    public static OpenCoverLogLevel Verbose;
    public static OpenCoverLogLevel All;
}
internal class Cake.Common.Tools.OpenCover.OpenCoverProcessRunner : object {
    [CompilerGeneratedAttribute]
private FilePath <FilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private ProcessSettings <ProcessSettings>k__BackingField;
    public FilePath FilePath { get; public set; }
    public ProcessSettings ProcessSettings { get; public set; }
    [CompilerGeneratedAttribute]
public FilePath get_FilePath();
    [CompilerGeneratedAttribute]
public void set_FilePath(FilePath value);
    [CompilerGeneratedAttribute]
public ProcessSettings get_ProcessSettings();
    [CompilerGeneratedAttribute]
public void set_ProcessSettings(ProcessSettings value);
    public sealed virtual IProcess Start(FilePath filePath, ProcessSettings settings);
}
public abstract class Cake.Common.Tools.OpenCover.OpenCoverRegisterOption : object {
    private string commandLineValue;
    protected OpenCoverRegisterOption(string commandLineValue);
    public virtual string ToString();
    [ObsoleteAttribute("use new OpenCoverRegisterOption() instead.")]
public static OpenCoverRegisterOption op_Implicit(string option);
}
public class Cake.Common.Tools.OpenCover.OpenCoverRegisterOptionAdmin : OpenCoverRegisterOption {
}
public class Cake.Common.Tools.OpenCover.OpenCoverRegisterOptionDll : OpenCoverRegisterOption {
    public OpenCoverRegisterOptionDll(FilePath pathToDll);
}
public class Cake.Common.Tools.OpenCover.OpenCoverRegisterOptionUser : OpenCoverRegisterOption {
}
public class Cake.Common.Tools.OpenCover.OpenCoverRunner : Tool`1<OpenCoverSettings> {
    private static string HideSkippedConstant;
    private ICakeEnvironment _environment;
    public OpenCoverRunner(IFileSystem fileSystem, ICakeEnvironment environment, IProcessRunner processRunner, IToolLocator tools);
    public void Run(ICakeContext context, Action`1<ICakeContext> action, FilePath outputPath, OpenCoverSettings settings);
    private static OpenCoverContext InterceptAction(ICakeContext context, Action`1<ICakeContext> action);
    private ProcessArgumentBuilder GetArguments(OpenCoverContext context, OpenCoverSettings settings, FilePath outputPath);
    protected virtual string GetToolName();
    protected virtual IEnumerable`1<string> GetToolExecutableNames();
    [CompilerGeneratedAttribute]
private string <GetArguments>b__5_0(DirectoryPath d);
    [CompilerGeneratedAttribute]
private string <GetArguments>b__5_1(DirectoryPath d);
}
public class Cake.Common.Tools.OpenCover.OpenCoverSettings : ToolSettings {
    private HashSet`1<string> _filters;
    private HashSet`1<string> _excludedAttributeFilters;
    private HashSet`1<string> _excludedFileFilters;
    private HashSet`1<DirectoryPath> _excludeDirectories;
    private HashSet`1<DirectoryPath> _searchDirectories;
    [CompilerGeneratedAttribute]
private bool <SkipAutoProps>k__BackingField;
    [CompilerGeneratedAttribute]
private OpenCoverRegisterOption <Register>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <ReturnTargetCodeOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OldStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MergeOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private OpenCoverLogLevel <LogLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private OpenCoverHideSkippedOption <HideSkippedOption>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MergeByHash>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoDefaultFilters>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsService>k__BackingField;
    [CompilerGeneratedAttribute]
private DirectoryPath <TargetDirectory>k__BackingField;
    public ISet`1<string> Filters { get; }
    public ISet`1<string> ExcludedAttributeFilters { get; }
    public ISet`1<string> ExcludedFileFilters { get; }
    public bool SkipAutoProps { get; public set; }
    public OpenCoverRegisterOption Register { get; public set; }
    public Nullable`1<int> ReturnTargetCodeOffset { get; public set; }
    public bool OldStyle { get; public set; }
    public bool MergeOutput { get; public set; }
    public ISet`1<DirectoryPath> ExcludeDirectories { get; }
    public OpenCoverLogLevel LogLevel { get; public set; }
    public OpenCoverHideSkippedOption HideSkippedOption { get; public set; }
    public bool MergeByHash { get; public set; }
    public bool NoDefaultFilters { get; public set; }
    public ISet`1<DirectoryPath> SearchDirectories { get; }
    public bool IsService { get; public set; }
    public DirectoryPath TargetDirectory { get; public set; }
    public ISet`1<string> get_Filters();
    public ISet`1<string> get_ExcludedAttributeFilters();
    public ISet`1<string> get_ExcludedFileFilters();
    [CompilerGeneratedAttribute]
public bool get_SkipAutoProps();
    [CompilerGeneratedAttribute]
public void set_SkipAutoProps(bool value);
    [CompilerGeneratedAttribute]
public OpenCoverRegisterOption get_Register();
    [CompilerGeneratedAttribute]
public void set_Register(OpenCoverRegisterOption value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_ReturnTargetCodeOffset();
    [CompilerGeneratedAttribute]
public void set_ReturnTargetCodeOffset(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public bool get_OldStyle();
    [CompilerGeneratedAttribute]
public void set_OldStyle(bool value);
    [CompilerGeneratedAttribute]
public bool get_MergeOutput();
    [CompilerGeneratedAttribute]
public void set_MergeOutput(bool value);
    public ISet`1<DirectoryPath> get_ExcludeDirectories();
    [CompilerGeneratedAttribute]
public OpenCoverLogLevel get_LogLevel();
    [CompilerGeneratedAttribute]
public void set_LogLevel(OpenCoverLogLevel value);
    [CompilerGeneratedAttribute]
public OpenCoverHideSkippedOption get_HideSkippedOption();
    [CompilerGeneratedAttribute]
public void set_HideSkippedOption(OpenCoverHideSkippedOption value);
    [CompilerGeneratedAttribute]
public bool get_MergeByHash();
    [CompilerGeneratedAttribute]
public void set_MergeByHash(bool value);
    [CompilerGeneratedAttribute]
public bool get_NoDefaultFilters();
    [CompilerGeneratedAttribute]
public void set_NoDefaultFilters(bool value);
    public ISet`1<DirectoryPath> get_SearchDirectories();
    [CompilerGeneratedAttribute]
public bool get_IsService();
    [CompilerGeneratedAttribute]
public void set_IsService(bool value);
    [CompilerGeneratedAttribute]
public DirectoryPath get_TargetDirectory();
    [CompilerGeneratedAttribute]
public void set_TargetDirectory(DirectoryPath value);
}
[ExtensionAttribute]
public static class Cake.Common.Tools.OpenCover.OpenCoverSettingsExtensions : object {
    [ExtensionAttribute]
public static OpenCoverSettings WithFilter(OpenCoverSettings settings, string filter);
    [ExtensionAttribute]
public static OpenCoverSettings ExcludeByAttribute(OpenCoverSettings settings, string filter);
    [ExtensionAttribute]
public static OpenCoverSettings ExcludeByFile(OpenCoverSettings settings, string filter);
    [ExtensionAttribute]
public static OpenCoverSettings WithoutRegister(OpenCoverSettings settings);
    [ExtensionAttribute]
public static OpenCoverSettings WithRegisterAdmin(OpenCoverSettings settings);
    [ExtensionAttribute]
public static OpenCoverSettings WithRegisterUser(OpenCoverSettings settings);
    [ExtensionAttribute]
public static OpenCoverSettings WithRegisterDll(OpenCoverSettings settings, FilePath path);
}
[ExtensionAttribute]
[CakeAliasCategoryAttribute("ReportGenerator")]
public static class Cake.Common.Tools.ReportGenerator.ReportGeneratorAliases : object {
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void ReportGenerator(ICakeContext context, GlobPattern pattern, DirectoryPath targetDir);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void ReportGenerator(ICakeContext context, GlobPattern pattern, DirectoryPath targetDir, ReportGeneratorSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void ReportGenerator(ICakeContext context, FilePath report, DirectoryPath targetDir);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void ReportGenerator(ICakeContext context, FilePath report, DirectoryPath targetDir, ReportGeneratorSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void ReportGenerator(ICakeContext context, IEnumerable`1<FilePath> reports, DirectoryPath targetDir);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void ReportGenerator(ICakeContext context, IEnumerable`1<FilePath> reports, DirectoryPath targetDir, ReportGeneratorSettings settings);
}
public enum Cake.Common.Tools.ReportGenerator.ReportGeneratorReportType : Enum {
    public int value__;
    public static ReportGeneratorReportType Badges;
    public static ReportGeneratorReportType Html;
    public static ReportGeneratorReportType HtmlSummary;
    public static ReportGeneratorReportType Latex;
    public static ReportGeneratorReportType LatexSummary;
    public static ReportGeneratorReportType TextSummary;
    public static ReportGeneratorReportType Xml;
    public static ReportGeneratorReportType XmlSummary;
    public static ReportGeneratorReportType Cobertura;
    public static ReportGeneratorReportType CsvSummary;
    public static ReportGeneratorReportType HtmlChart;
    public static ReportGeneratorReportType HtmlInline;
    public static ReportGeneratorReportType HtmlInline_AzurePipelines;
    public static ReportGeneratorReportType PngChart;
    public static ReportGeneratorReportType MHtml;
    public static ReportGeneratorReportType SonarQube;
    public static ReportGeneratorReportType HtmlInline_AzurePipelines_Dark;
    public static ReportGeneratorReportType Clover;
    public static ReportGeneratorReportType JsonSummary;
    public static ReportGeneratorReportType lcov;
    public static ReportGeneratorReportType TeamCitySummary;
}
public class Cake.Common.Tools.ReportGenerator.ReportGeneratorRunner : Tool`1<ReportGeneratorSettings> {
    private ICakeEnvironment _environment;
    public ReportGeneratorRunner(IFileSystem fileSystem, ICakeEnvironment environment, IProcessRunner processRunner, IToolLocator tools);
    public void Run(IEnumerable`1<FilePath> reports, DirectoryPath targetDir, ReportGeneratorSettings settings);
    private ProcessArgumentBuilder GetArgument(ReportGeneratorSettings settings, IEnumerable`1<FilePath> reports, DirectoryPath targetDir);
    protected virtual string GetToolName();
    protected virtual IEnumerable`1<string> GetToolExecutableNames();
    private void AppendQuoted(ProcessArgumentBuilder builder, string key, string value);
    [CompilerGeneratedAttribute]
private string <GetArgument>b__3_0(FilePath r);
    [CompilerGeneratedAttribute]
private string <GetArgument>b__3_1(DirectoryPath d);
}
public class Cake.Common.Tools.ReportGenerator.ReportGeneratorSettings : ToolSettings {
    [CompilerGeneratedAttribute]
private ICollection`1<ReportGeneratorReportType> <ReportTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<DirectoryPath> <SourceDirectories>k__BackingField;
    [CompilerGeneratedAttribute]
private DirectoryPath <HistoryDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<string> <AssemblyFilters>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<string> <ClassFilters>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ReportGeneratorVerbosity> <Verbosity>k__BackingField;
    public ICollection`1<ReportGeneratorReportType> ReportTypes { get; public set; }
    public ICollection`1<DirectoryPath> SourceDirectories { get; public set; }
    public DirectoryPath HistoryDirectory { get; public set; }
    public ICollection`1<string> AssemblyFilters { get; public set; }
    public ICollection`1<string> ClassFilters { get; public set; }
    public Nullable`1<ReportGeneratorVerbosity> Verbosity { get; public set; }
    [CompilerGeneratedAttribute]
public ICollection`1<ReportGeneratorReportType> get_ReportTypes();
    [CompilerGeneratedAttribute]
public void set_ReportTypes(ICollection`1<ReportGeneratorReportType> value);
    [CompilerGeneratedAttribute]
public ICollection`1<DirectoryPath> get_SourceDirectories();
    [CompilerGeneratedAttribute]
public void set_SourceDirectories(ICollection`1<DirectoryPath> value);
    [CompilerGeneratedAttribute]
public DirectoryPath get_HistoryDirectory();
    [CompilerGeneratedAttribute]
public void set_HistoryDirectory(DirectoryPath value);
    [CompilerGeneratedAttribute]
public ICollection`1<string> get_AssemblyFilters();
    [CompilerGeneratedAttribute]
public void set_AssemblyFilters(ICollection`1<string> value);
    [CompilerGeneratedAttribute]
public ICollection`1<string> get_ClassFilters();
    [CompilerGeneratedAttribute]
public void set_ClassFilters(ICollection`1<string> value);
    [CompilerGeneratedAttribute]
public Nullable`1<ReportGeneratorVerbosity> get_Verbosity();
    [CompilerGeneratedAttribute]
public void set_Verbosity(Nullable`1<ReportGeneratorVerbosity> value);
}
public enum Cake.Common.Tools.ReportGenerator.ReportGeneratorVerbosity : Enum {
    public int value__;
    public static ReportGeneratorVerbosity Verbose;
    public static ReportGeneratorVerbosity Info;
    public static ReportGeneratorVerbosity Error;
}
[ExtensionAttribute]
[CakeAliasCategoryAttribute("ReportUnit")]
public static class Cake.Common.Tools.ReportUnit.ReportUnitAliases : object {
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void ReportUnit(ICakeContext context, DirectoryPath inputFolder);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void ReportUnit(ICakeContext context, DirectoryPath inputFolder, ReportUnitSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void ReportUnit(ICakeContext context, DirectoryPath inputFolder, DirectoryPath outputFolder, ReportUnitSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void ReportUnit(ICakeContext context, FilePath inputFile, FilePath outputFile);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void ReportUnit(ICakeContext context, FilePath inputFile, FilePath outputFile, ReportUnitSettings settings);
}
public class Cake.Common.Tools.ReportUnit.ReportUnitRunner : Tool`1<ReportUnitSettings> {
    private ICakeEnvironment _environment;
    public ReportUnitRunner(IFileSystem fileSystem, ICakeEnvironment environment, IProcessRunner processRunner, IToolLocator tools);
    public void Run(DirectoryPath inputFolder, DirectoryPath outputFolder, ReportUnitSettings settings);
    public void Run(FilePath inputFile, FilePath outputFile, ReportUnitSettings settings);
    private ProcessArgumentBuilder GetArguments(DirectoryPath inputFolder, DirectoryPath outputFolder);
    private ProcessArgumentBuilder GetArguments(FilePath inputFile, FilePath outputFile);
    protected virtual string GetToolName();
    protected virtual IEnumerable`1<string> GetToolExecutableNames();
}
public class Cake.Common.Tools.ReportUnit.ReportUnitSettings : ToolSettings {
}
[CompilerGeneratedAttribute]
internal class Cake.Common.Tools.Roundhouse.NamespaceDoc : object {
}
public enum Cake.Common.Tools.Roundhouse.RecoveryMode : Enum {
    public int value__;
    public static RecoveryMode NoChange;
    public static RecoveryMode Simple;
    public static RecoveryMode Full;
}
[ExtensionAttribute]
[CakeAliasCategoryAttribute("Roundhouse")]
public static class Cake.Common.Tools.Roundhouse.RoundhouseAliases : object {
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void RoundhouseMigrate(ICakeContext context, RoundhouseSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void RoundhouseDrop(ICakeContext context, RoundhouseSettings settings);
}
public class Cake.Common.Tools.Roundhouse.RoundhouseRunner : Tool`1<RoundhouseSettings> {
    public RoundhouseRunner(IFileSystem fileSystem, ICakeEnvironment environment, IProcessRunner processRunner, IToolLocator tools);
    public void Run(RoundhouseSettings settings, bool drop);
    private ProcessArgumentBuilder GetArguments(RoundhouseSettings settings);
    private static void AddFolderArguments(ProcessArgumentBuilder builder, RoundhouseSettings settings);
    private static void AddFlagArguments(ProcessArgumentBuilder builder, RoundhouseSettings settings);
    private static void AddDatabaseArguments(ProcessArgumentBuilder builder, RoundhouseSettings settings);
    private static void AddRoundhouseArguments(ProcessArgumentBuilder builder, RoundhouseSettings settings);
    private static void AppendFlag(ProcessArgumentBuilder builder, string key, bool value);
    private static void AppendQuotedIfExists(ProcessArgumentBuilder builder, string key, object value);
    private static void AppendQuotedSecretIfExists(ProcessArgumentBuilder builder, string key, object value);
    protected virtual string GetToolName();
    protected virtual IEnumerable`1<string> GetToolExecutableNames();
}
public class Cake.Common.Tools.Roundhouse.RoundhouseSettings : ToolSettings {
    [CompilerGeneratedAttribute]
private string <ServerName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DatabaseName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConnectionString>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConnectionStringAdmin>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <CommandTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <CommandTimeoutAdmin>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SqlFilesDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RepositoryPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VersionFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VersionXPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AlterDatabaseFolderName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RunAfterCreateDatabaseFolderName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RunBeforeUpFolderName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UpFolderName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RunFirstAfterUpFolderName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FunctionsFolderName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ViewsFolderName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SprocsFolderName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IndexesFolderName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RunAfterOtherAnyTimeScriptsFolderName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PermissionsFolderName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BeforeMigrationFolderName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AfterMigrationFolderName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SchemaName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Environment>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Restore>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RestoreFilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CreateDatabaseCustomScript>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputPath>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <WarnOnOneTimeScriptChanges>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Silent>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DatabaseType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Drop>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <WithTransaction>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<RecoveryMode> <RecoveryMode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DryRun>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DoNotCreateDatabase>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisableOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Baseline>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Debug>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RunAllAnyTimeScripts>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisableTokenReplacement>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SearchAllSubdirectoriesInsteadOfTraverse>k__BackingField;
    public string ServerName { get; public set; }
    public string DatabaseName { get; public set; }
    public string ConnectionString { get; public set; }
    public string ConnectionStringAdmin { get; public set; }
    public Nullable`1<int> CommandTimeout { get; public set; }
    public Nullable`1<int> CommandTimeoutAdmin { get; public set; }
    public string SqlFilesDirectory { get; public set; }
    public string RepositoryPath { get; public set; }
    public string VersionFile { get; public set; }
    public string VersionXPath { get; public set; }
    public string AlterDatabaseFolderName { get; public set; }
    public string RunAfterCreateDatabaseFolderName { get; public set; }
    public string RunBeforeUpFolderName { get; public set; }
    public string UpFolderName { get; public set; }
    public string RunFirstAfterUpFolderName { get; public set; }
    public string FunctionsFolderName { get; public set; }
    public string ViewsFolderName { get; public set; }
    public string SprocsFolderName { get; public set; }
    public string IndexesFolderName { get; public set; }
    public string RunAfterOtherAnyTimeScriptsFolderName { get; public set; }
    public string PermissionsFolderName { get; public set; }
    public string BeforeMigrationFolderName { get; public set; }
    public string AfterMigrationFolderName { get; public set; }
    public string SchemaName { get; public set; }
    public string Environment { get; public set; }
    public bool Restore { get; public set; }
    public string RestoreFilePath { get; public set; }
    public string CreateDatabaseCustomScript { get; public set; }
    public string OutputPath { get; public set; }
    public bool WarnOnOneTimeScriptChanges { get; public set; }
    public bool Silent { get; public set; }
    public string DatabaseType { get; public set; }
    public bool Drop { get; public set; }
    public bool WithTransaction { get; public set; }
    public Nullable`1<RecoveryMode> RecoveryMode { get; public set; }
    public bool DryRun { get; public set; }
    public bool DoNotCreateDatabase { get; public set; }
    public bool DisableOutput { get; public set; }
    public bool Baseline { get; public set; }
    public bool Debug { get; public set; }
    public bool RunAllAnyTimeScripts { get; public set; }
    public bool DisableTokenReplacement { get; public set; }
    public bool SearchAllSubdirectoriesInsteadOfTraverse { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ServerName();
    [CompilerGeneratedAttribute]
public void set_ServerName(string value);
    [CompilerGeneratedAttribute]
public string get_DatabaseName();
    [CompilerGeneratedAttribute]
public void set_DatabaseName(string value);
    [CompilerGeneratedAttribute]
public string get_ConnectionString();
    [CompilerGeneratedAttribute]
public void set_ConnectionString(string value);
    [CompilerGeneratedAttribute]
public string get_ConnectionStringAdmin();
    [CompilerGeneratedAttribute]
public void set_ConnectionStringAdmin(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_CommandTimeout();
    [CompilerGeneratedAttribute]
public void set_CommandTimeout(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_CommandTimeoutAdmin();
    [CompilerGeneratedAttribute]
public void set_CommandTimeoutAdmin(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_SqlFilesDirectory();
    [CompilerGeneratedAttribute]
public void set_SqlFilesDirectory(string value);
    [CompilerGeneratedAttribute]
public string get_RepositoryPath();
    [CompilerGeneratedAttribute]
public void set_RepositoryPath(string value);
    [CompilerGeneratedAttribute]
public string get_VersionFile();
    [CompilerGeneratedAttribute]
public void set_VersionFile(string value);
    [CompilerGeneratedAttribute]
public string get_VersionXPath();
    [CompilerGeneratedAttribute]
public void set_VersionXPath(string value);
    [CompilerGeneratedAttribute]
public string get_AlterDatabaseFolderName();
    [CompilerGeneratedAttribute]
public void set_AlterDatabaseFolderName(string value);
    [CompilerGeneratedAttribute]
public string get_RunAfterCreateDatabaseFolderName();
    [CompilerGeneratedAttribute]
public void set_RunAfterCreateDatabaseFolderName(string value);
    [CompilerGeneratedAttribute]
public string get_RunBeforeUpFolderName();
    [CompilerGeneratedAttribute]
public void set_RunBeforeUpFolderName(string value);
    [CompilerGeneratedAttribute]
public string get_UpFolderName();
    [CompilerGeneratedAttribute]
public void set_UpFolderName(string value);
    [CompilerGeneratedAttribute]
public string get_RunFirstAfterUpFolderName();
    [CompilerGeneratedAttribute]
public void set_RunFirstAfterUpFolderName(string value);
    [CompilerGeneratedAttribute]
public string get_FunctionsFolderName();
    [CompilerGeneratedAttribute]
public void set_FunctionsFolderName(string value);
    [CompilerGeneratedAttribute]
public string get_ViewsFolderName();
    [CompilerGeneratedAttribute]
public void set_ViewsFolderName(string value);
    [CompilerGeneratedAttribute]
public string get_SprocsFolderName();
    [CompilerGeneratedAttribute]
public void set_SprocsFolderName(string value);
    [CompilerGeneratedAttribute]
public string get_IndexesFolderName();
    [CompilerGeneratedAttribute]
public void set_IndexesFolderName(string value);
    [CompilerGeneratedAttribute]
public string get_RunAfterOtherAnyTimeScriptsFolderName();
    [CompilerGeneratedAttribute]
public void set_RunAfterOtherAnyTimeScriptsFolderName(string value);
    [CompilerGeneratedAttribute]
public string get_PermissionsFolderName();
    [CompilerGeneratedAttribute]
public void set_PermissionsFolderName(string value);
    [CompilerGeneratedAttribute]
public string get_BeforeMigrationFolderName();
    [CompilerGeneratedAttribute]
public void set_BeforeMigrationFolderName(string value);
    [CompilerGeneratedAttribute]
public string get_AfterMigrationFolderName();
    [CompilerGeneratedAttribute]
public void set_AfterMigrationFolderName(string value);
    [CompilerGeneratedAttribute]
public string get_SchemaName();
    [CompilerGeneratedAttribute]
public void set_SchemaName(string value);
    [CompilerGeneratedAttribute]
public string get_Environment();
    [CompilerGeneratedAttribute]
public void set_Environment(string value);
    [CompilerGeneratedAttribute]
public bool get_Restore();
    [CompilerGeneratedAttribute]
public void set_Restore(bool value);
    [CompilerGeneratedAttribute]
public string get_RestoreFilePath();
    [CompilerGeneratedAttribute]
public void set_RestoreFilePath(string value);
    [CompilerGeneratedAttribute]
public string get_CreateDatabaseCustomScript();
    [CompilerGeneratedAttribute]
public void set_CreateDatabaseCustomScript(string value);
    [CompilerGeneratedAttribute]
public string get_OutputPath();
    [CompilerGeneratedAttribute]
public void set_OutputPath(string value);
    [CompilerGeneratedAttribute]
public bool get_WarnOnOneTimeScriptChanges();
    [CompilerGeneratedAttribute]
public void set_WarnOnOneTimeScriptChanges(bool value);
    [CompilerGeneratedAttribute]
public bool get_Silent();
    [CompilerGeneratedAttribute]
public void set_Silent(bool value);
    [CompilerGeneratedAttribute]
public string get_DatabaseType();
    [CompilerGeneratedAttribute]
public void set_DatabaseType(string value);
    [CompilerGeneratedAttribute]
public bool get_Drop();
    [CompilerGeneratedAttribute]
public void set_Drop(bool value);
    [CompilerGeneratedAttribute]
public bool get_WithTransaction();
    [CompilerGeneratedAttribute]
public void set_WithTransaction(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<RecoveryMode> get_RecoveryMode();
    [CompilerGeneratedAttribute]
public void set_RecoveryMode(Nullable`1<RecoveryMode> value);
    [CompilerGeneratedAttribute]
public bool get_DryRun();
    [CompilerGeneratedAttribute]
public void set_DryRun(bool value);
    [CompilerGeneratedAttribute]
public bool get_DoNotCreateDatabase();
    [CompilerGeneratedAttribute]
public void set_DoNotCreateDatabase(bool value);
    [CompilerGeneratedAttribute]
public bool get_DisableOutput();
    [CompilerGeneratedAttribute]
public void set_DisableOutput(bool value);
    [CompilerGeneratedAttribute]
public bool get_Baseline();
    [CompilerGeneratedAttribute]
public void set_Baseline(bool value);
    [CompilerGeneratedAttribute]
public bool get_Debug();
    [CompilerGeneratedAttribute]
public void set_Debug(bool value);
    [CompilerGeneratedAttribute]
public bool get_RunAllAnyTimeScripts();
    [CompilerGeneratedAttribute]
public void set_RunAllAnyTimeScripts(bool value);
    [CompilerGeneratedAttribute]
public bool get_DisableTokenReplacement();
    [CompilerGeneratedAttribute]
public void set_DisableTokenReplacement(bool value);
    [CompilerGeneratedAttribute]
public bool get_SearchAllSubdirectoriesInsteadOfTraverse();
    [CompilerGeneratedAttribute]
public void set_SearchAllSubdirectoriesInsteadOfTraverse(bool value);
}
public interface Cake.Common.Tools.SignTool.ISignToolResolver {
    public abstract virtual FilePath GetPath();
}
[CompilerGeneratedAttribute]
internal class Cake.Common.Tools.SignTool.NamespaceDoc : object {
}
public enum Cake.Common.Tools.SignTool.SignToolDigestAlgorithm : Enum {
    public int value__;
    public static SignToolDigestAlgorithm Sha1;
    public static SignToolDigestAlgorithm Sha256;
}
internal class Cake.Common.Tools.SignTool.SignToolResolver : object {
    private IFileSystem _fileSystem;
    private ICakeEnvironment _environment;
    private IRegistry _registry;
    private FilePath _signToolPath;
    public SignToolResolver(IFileSystem fileSystem, ICakeEnvironment environment, IRegistry registry);
    public sealed virtual FilePath GetPath();
    private FilePath GetFromDisc();
    private FilePath GetFromRegistry();
    [CompilerGeneratedAttribute]
private bool <GetFromDisc>b__6_0(FilePath file);
    [CompilerGeneratedAttribute]
private bool <GetFromRegistry>b__7_0(FilePath file);
}
[ExtensionAttribute]
[CakeAliasCategoryAttribute("Signing")]
public static class Cake.Common.Tools.SignTool.SignToolSignAliases : object {
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void Sign(ICakeContext context, string assembly, SignToolSignSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void Sign(ICakeContext context, FilePath assembly, SignToolSignSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void Sign(ICakeContext context, IEnumerable`1<string> assemblies, SignToolSignSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void Sign(ICakeContext context, IEnumerable`1<FilePath> assemblies, SignToolSignSettings settings);
}
public class Cake.Common.Tools.SignTool.SignToolSignRunner : Tool`1<SignToolSignSettings> {
    private ISignToolResolver _resolver;
    private IFileSystem _fileSystem;
    private ICakeEnvironment _environment;
    public SignToolSignRunner(IFileSystem fileSystem, ICakeEnvironment environment, IProcessRunner processRunner, IToolLocator tools, IRegistry registry);
    internal SignToolSignRunner(IFileSystem fileSystem, ICakeEnvironment environment, IProcessRunner processRunner, IToolLocator tools, IRegistry registry, ISignToolResolver resolver);
    public void Run(IEnumerable`1<FilePath> assemblyPaths, SignToolSignSettings settings);
    private ProcessArgumentBuilder GetArguments(FilePath[] absoluteAssemblyPaths, SignToolSignSettings settings);
    protected virtual string GetToolName();
    protected virtual IEnumerable`1<string> GetToolExecutableNames();
    protected virtual IEnumerable`1<FilePath> GetAlternativeToolPaths(SignToolSignSettings settings);
    [CompilerGeneratedAttribute]
private FilePath <Run>b__5_0(FilePath p);
}
public class Cake.Common.Tools.SignTool.SignToolSignSettings : ToolSettings {
    [CompilerGeneratedAttribute]
private Uri <TimeStampUri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CertThumbprint>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CertSubjectName>k__BackingField;
    [CompilerGeneratedAttribute]
private FilePath <CertPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Password>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <DescriptionUri>k__BackingField;
    [CompilerGeneratedAttribute]
private SignToolDigestAlgorithm <DigestAlgorithm>k__BackingField;
    [CompilerGeneratedAttribute]
private SignToolDigestAlgorithm <TimeStampDigestAlgorithm>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AppendSignature>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseMachineStore>k__BackingField;
    [CompilerGeneratedAttribute]
private FilePath <AdditionalCertPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StoreName>k__BackingField;
    public Uri TimeStampUri { get; public set; }
    public string CertThumbprint { get; public set; }
    public string CertSubjectName { get; public set; }
    public FilePath CertPath { get; public set; }
    public string Password { get; public set; }
    public string Description { get; public set; }
    public Uri DescriptionUri { get; public set; }
    public SignToolDigestAlgorithm DigestAlgorithm { get; public set; }
    public SignToolDigestAlgorithm TimeStampDigestAlgorithm { get; public set; }
    public bool AppendSignature { get; public set; }
    public bool UseMachineStore { get; public set; }
    public FilePath AdditionalCertPath { get; public set; }
    public string StoreName { get; public set; }
    [CompilerGeneratedAttribute]
public Uri get_TimeStampUri();
    [CompilerGeneratedAttribute]
public void set_TimeStampUri(Uri value);
    [CompilerGeneratedAttribute]
public string get_CertThumbprint();
    [CompilerGeneratedAttribute]
public void set_CertThumbprint(string value);
    [CompilerGeneratedAttribute]
public string get_CertSubjectName();
    [CompilerGeneratedAttribute]
public void set_CertSubjectName(string value);
    [CompilerGeneratedAttribute]
public FilePath get_CertPath();
    [CompilerGeneratedAttribute]
public void set_CertPath(FilePath value);
    [CompilerGeneratedAttribute]
public string get_Password();
    [CompilerGeneratedAttribute]
public void set_Password(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public Uri get_DescriptionUri();
    [CompilerGeneratedAttribute]
public void set_DescriptionUri(Uri value);
    [CompilerGeneratedAttribute]
public SignToolDigestAlgorithm get_DigestAlgorithm();
    [CompilerGeneratedAttribute]
public void set_DigestAlgorithm(SignToolDigestAlgorithm value);
    [CompilerGeneratedAttribute]
public SignToolDigestAlgorithm get_TimeStampDigestAlgorithm();
    [CompilerGeneratedAttribute]
public void set_TimeStampDigestAlgorithm(SignToolDigestAlgorithm value);
    [CompilerGeneratedAttribute]
public bool get_AppendSignature();
    [CompilerGeneratedAttribute]
public void set_AppendSignature(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseMachineStore();
    [CompilerGeneratedAttribute]
public void set_UseMachineStore(bool value);
    [CompilerGeneratedAttribute]
public FilePath get_AdditionalCertPath();
    [CompilerGeneratedAttribute]
public void set_AdditionalCertPath(FilePath value);
    [CompilerGeneratedAttribute]
public string get_StoreName();
    [CompilerGeneratedAttribute]
public void set_StoreName(string value);
}
[ExtensionAttribute]
[CakeAliasCategoryAttribute("SpecFlow")]
public static class Cake.Common.Tools.SpecFlow.SpecFlowAliases : object {
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("StepDefinitionReport")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.SpecFlow.StepDefinitionReport")]
public static void SpecFlowStepDefinitionReport(ICakeContext context, FilePath projectFile);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("StepDefinitionReport")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.SpecFlow.StepDefinitionReport")]
public static void SpecFlowStepDefinitionReport(ICakeContext context, FilePath projectFile, SpecFlowStepDefinitionReportSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("TestExecutionReport")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.SpecFlow.TestExecutionReport")]
public static void SpecFlowTestExecutionReport(ICakeContext context, Action`1<ICakeContext> action, FilePath projectFile);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("TestExecutionReport")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.SpecFlow.TestExecutionReport")]
public static void SpecFlowTestExecutionReport(ICakeContext context, Action`1<ICakeContext> action, FilePath projectFile, SpecFlowTestExecutionReportSettings settings);
}
internal class Cake.Common.Tools.SpecFlow.SpecFlowContext : CakeContextAdapter {
    private SpecFlowProcessRunner _runner;
    [CompilerGeneratedAttribute]
private ICakeLog <Log>k__BackingField;
    public ICakeLog Log { get; }
    public IProcessRunner ProcessRunner { get; }
    public FilePath FilePath { get; }
    public ProcessSettings Settings { get; }
    public SpecFlowContext(ICakeContext context);
    [CompilerGeneratedAttribute]
public virtual ICakeLog get_Log();
    public virtual IProcessRunner get_ProcessRunner();
    public FilePath get_FilePath();
    public ProcessSettings get_Settings();
}
[ExtensionAttribute]
internal static class Cake.Common.Tools.SpecFlow.SpecFlowContextExtensions : object {
    [ExtensionAttribute]
internal static ProcessArgumentBuilder GetArguments(SpecFlowContext context, FilePath projectFile, ICakeEnvironment environment);
    [ExtensionAttribute]
internal static ProcessArgumentBuilder GetMSTestArguments(SpecFlowContext context, FilePath projectFile, ICakeEnvironment environment);
    [ExtensionAttribute]
internal static ProcessArgumentBuilder GetNUnitArguments(SpecFlowContext context, FilePath projectFile, ICakeEnvironment environment);
    [ExtensionAttribute]
internal static ProcessArgumentBuilder GetXUnitArguments(SpecFlowContext context, FilePath projectFile, ICakeEnvironment environment);
    [ExtensionAttribute]
private static string RenderArguments(SpecFlowContext context);
}
internal class Cake.Common.Tools.SpecFlow.SpecFlowProcessRunner : object {
    [CompilerGeneratedAttribute]
private FilePath <FilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private ProcessSettings <ProcessSettings>k__BackingField;
    public FilePath FilePath { get; public set; }
    public ProcessSettings ProcessSettings { get; public set; }
    [CompilerGeneratedAttribute]
public FilePath get_FilePath();
    [CompilerGeneratedAttribute]
public void set_FilePath(FilePath value);
    [CompilerGeneratedAttribute]
public ProcessSettings get_ProcessSettings();
    [CompilerGeneratedAttribute]
public void set_ProcessSettings(ProcessSettings value);
    public sealed virtual IProcess Start(FilePath filePath, ProcessSettings settings);
}
public abstract class Cake.Common.Tools.SpecFlow.SpecFlowSettings : ToolSettings {
    [CompilerGeneratedAttribute]
private FilePath <Out>k__BackingField;
    [CompilerGeneratedAttribute]
private FilePath <XsltFile>k__BackingField;
    public FilePath Out { get; public set; }
    public FilePath XsltFile { get; public set; }
    [CompilerGeneratedAttribute]
public FilePath get_Out();
    [CompilerGeneratedAttribute]
public void set_Out(FilePath value);
    [CompilerGeneratedAttribute]
public FilePath get_XsltFile();
    [CompilerGeneratedAttribute]
public void set_XsltFile(FilePath value);
}
public abstract class Cake.Common.Tools.SpecFlow.SpecFlowTool`1 : Tool`1<TSettings> {
    private ICakeEnvironment _environment;
    protected SpecFlowTool`1(IFileSystem fileSystem, ICakeEnvironment environment, IProcessRunner processRunner, IToolLocator tools);
    protected virtual string GetToolName();
    protected virtual IEnumerable`1<string> GetToolExecutableNames();
    protected void AppendArguments(SpecFlowSettings settings, ProcessArgumentBuilder builder);
}
public class Cake.Common.Tools.SpecFlow.StepDefinitionReport.SpecFlowStepDefinitionReporter : SpecFlowTool`1<SpecFlowStepDefinitionReportSettings> {
    private ICakeEnvironment _environment;
    public SpecFlowStepDefinitionReporter(IFileSystem fileSystem, ICakeEnvironment environment, IProcessRunner processRunner, IToolLocator tools);
    public void Run(FilePath projectFile, SpecFlowStepDefinitionReportSettings settings);
    private ProcessArgumentBuilder GetArguments(SpecFlowStepDefinitionReportSettings settings, FilePath projectFile);
}
public class Cake.Common.Tools.SpecFlow.StepDefinitionReport.SpecFlowStepDefinitionReportSettings : SpecFlowSettings {
    [CompilerGeneratedAttribute]
private DirectoryPath <BinFolder>k__BackingField;
    public DirectoryPath BinFolder { get; public set; }
    [CompilerGeneratedAttribute]
public DirectoryPath get_BinFolder();
    [CompilerGeneratedAttribute]
public void set_BinFolder(DirectoryPath value);
}
public class Cake.Common.Tools.SpecFlow.TestExecutionReport.SpecFlowTestExecutionReporter : SpecFlowTool`1<SpecFlowTestExecutionReportSettings> {
    private ICakeEnvironment _environment;
    public SpecFlowTestExecutionReporter(IFileSystem fileSystem, ICakeEnvironment environment, IProcessRunner processRunner, IToolLocator tools);
    public void Run(ICakeContext context, Action`1<ICakeContext> action, FilePath projectFile, SpecFlowTestExecutionReportSettings settings);
    private static SpecFlowContext InterceptAction(ICakeContext context, Action`1<ICakeContext> action);
    private ProcessArgumentBuilder GetArguments(SpecFlowContext context, SpecFlowTestExecutionReportSettings settings, FilePath projectFile);
}
public class Cake.Common.Tools.SpecFlow.TestExecutionReport.SpecFlowTestExecutionReportSettings : SpecFlowSettings {
    [CompilerGeneratedAttribute]
private bool <ThrowOnTestFailure>k__BackingField;
    public bool ThrowOnTestFailure { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_ThrowOnTestFailure();
    [CompilerGeneratedAttribute]
public void set_ThrowOnTestFailure(bool value);
}
[ExtensionAttribute]
[CakeAliasCategoryAttribute("Text")]
public static class Cake.Common.Tools.TextTransform.TextTransformAliases : object {
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("T4 Text Templating")]
public static void TransformTemplate(ICakeContext context, FilePath sourceFile);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("T4 Text Templating")]
public static void TransformTemplate(ICakeContext context, FilePath sourceFile, TextTransformSettings settings);
}
public class Cake.Common.Tools.TextTransform.TextTransformRunner : Tool`1<TextTransformSettings> {
    private ICakeEnvironment _environment;
    public TextTransformRunner(IFileSystem fileSystem, ICakeEnvironment environment, IProcessRunner processRunner, IToolLocator tools);
    public void Run(FilePath sourceFile, TextTransformSettings settings);
    private ProcessArgumentBuilder GetArguments(FilePath sourceFilePath, TextTransformSettings settings);
    protected virtual string GetToolName();
    protected virtual IEnumerable`1<string> GetToolExecutableNames();
}
public class Cake.Common.Tools.TextTransform.TextTransformSettings : ToolSettings {
    [CompilerGeneratedAttribute]
private string <Assembly>k__BackingField;
    [CompilerGeneratedAttribute]
private FilePath <OutputFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Namespace>k__BackingField;
    [CompilerGeneratedAttribute]
private DirectoryPath <IncludeDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private DirectoryPath <ReferencePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Class>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <Properties>k__BackingField;
    public string Assembly { get; public set; }
    public FilePath OutputFile { get; public set; }
    public string Namespace { get; public set; }
    public DirectoryPath IncludeDirectory { get; public set; }
    public DirectoryPath ReferencePath { get; public set; }
    public string Class { get; public set; }
    public IDictionary`2<string, string> Properties { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Assembly();
    [CompilerGeneratedAttribute]
public void set_Assembly(string value);
    [CompilerGeneratedAttribute]
public FilePath get_OutputFile();
    [CompilerGeneratedAttribute]
public void set_OutputFile(FilePath value);
    [CompilerGeneratedAttribute]
public string get_Namespace();
    [CompilerGeneratedAttribute]
public void set_Namespace(string value);
    [CompilerGeneratedAttribute]
public DirectoryPath get_IncludeDirectory();
    [CompilerGeneratedAttribute]
public void set_IncludeDirectory(DirectoryPath value);
    [CompilerGeneratedAttribute]
public DirectoryPath get_ReferencePath();
    [CompilerGeneratedAttribute]
public void set_ReferencePath(DirectoryPath value);
    [CompilerGeneratedAttribute]
public string get_Class();
    [CompilerGeneratedAttribute]
public void set_Class(string value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_Properties();
    [CompilerGeneratedAttribute]
public void set_Properties(IDictionary`2<string, string> value);
}
internal static class Cake.Common.Tools.VisualStudio : object {
    internal static FilePath GetYearAndEditionToolPath(ICakeEnvironment environment, string year, string edition, FilePath relativeFile);
    internal static DirectoryPath GetYearAndEditionRootPath(ICakeEnvironment environment, string year, string edition);
    internal static FilePath GetVersionNumberToolPath(ICakeEnvironment environment, string version, FilePath relativeFile);
    internal static DirectoryPath GetVersionNumberRootPath(ICakeEnvironment environment, string version);
}
[ExtensionAttribute]
[CakeAliasCategoryAttribute("VSTest")]
public static class Cake.Common.Tools.VSTest.VSTestAliases : object {
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void VSTest(ICakeContext context, GlobPattern pattern);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void VSTest(ICakeContext context, GlobPattern pattern, VSTestSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void VSTest(ICakeContext context, IEnumerable`1<FilePath> assemblyPaths);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void VSTest(ICakeContext context, IEnumerable`1<FilePath> assemblyPaths, VSTestSettings settings);
}
public enum Cake.Common.Tools.VSTest.VSTestFrameworkVersion : Enum {
    public int value__;
    public static VSTestFrameworkVersion Default;
    public static VSTestFrameworkVersion NET35;
    public static VSTestFrameworkVersion NET40;
    public static VSTestFrameworkVersion NET45;
}
public enum Cake.Common.Tools.VSTest.VSTestPlatform : Enum {
    public int value__;
    public static VSTestPlatform Default;
    public static VSTestPlatform x86;
    public static VSTestPlatform x64;
    public static VSTestPlatform ARM;
}
public class Cake.Common.Tools.VSTest.VSTestRunner : Tool`1<VSTestSettings> {
    private static string VSTestConsoleExecutableName;
    private IFileSystem _fileSystem;
    private ICakeEnvironment _environment;
    public VSTestRunner(IFileSystem fileSystem, ICakeEnvironment environment, IProcessRunner processRunner, IToolLocator toolLocator);
    public void Run(IEnumerable`1<FilePath> assemblyPaths, VSTestSettings settings);
    private ProcessArgumentBuilder GetArguments(IEnumerable`1<FilePath> assemblyPaths, VSTestSettings settings);
    protected virtual string GetToolName();
    protected virtual IEnumerable`1<string> GetToolExecutableNames();
    [IteratorStateMachineAttribute("Cake.Common.Tools.VSTest.VSTestRunner/<GetAlternativeToolPaths>d__8")]
protected virtual IEnumerable`1<FilePath> GetAlternativeToolPaths(VSTestSettings settings);
}
public class Cake.Common.Tools.VSTest.VSTestSettings : ToolSettings {
    [CompilerGeneratedAttribute]
private FilePath <SettingsFile>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Parallel>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableCodeCoverage>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <InIsolation>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <UseVsixExtensions>k__BackingField;
    [CompilerGeneratedAttribute]
private DirectoryPath <TestAdapterPath>k__BackingField;
    [CompilerGeneratedAttribute]
private VSTestPlatform <PlatformArchitecture>k__BackingField;
    [CompilerGeneratedAttribute]
private VSTestFrameworkVersion <FrameworkVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TestCaseFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private FilePath <Diag>k__BackingField;
    [CompilerGeneratedAttribute]
private DirectoryPath <ResultsDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowPreviewVersion>k__BackingField;
    public FilePath SettingsFile { get; public set; }
    public bool Parallel { get; public set; }
    public bool EnableCodeCoverage { get; public set; }
    public bool InIsolation { get; public set; }
    public Nullable`1<bool> UseVsixExtensions { get; public set; }
    public DirectoryPath TestAdapterPath { get; public set; }
    public VSTestPlatform PlatformArchitecture { get; public set; }
    public VSTestFrameworkVersion FrameworkVersion { get; public set; }
    public string TestCaseFilter { get; public set; }
    public FilePath Diag { get; public set; }
    public DirectoryPath ResultsDirectory { get; public set; }
    public string Logger { get; public set; }
    public bool AllowPreviewVersion { get; public set; }
    [CompilerGeneratedAttribute]
public FilePath get_SettingsFile();
    [CompilerGeneratedAttribute]
public void set_SettingsFile(FilePath value);
    [CompilerGeneratedAttribute]
public bool get_Parallel();
    [CompilerGeneratedAttribute]
public void set_Parallel(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableCodeCoverage();
    [CompilerGeneratedAttribute]
public void set_EnableCodeCoverage(bool value);
    [CompilerGeneratedAttribute]
public bool get_InIsolation();
    [CompilerGeneratedAttribute]
public void set_InIsolation(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_UseVsixExtensions();
    [CompilerGeneratedAttribute]
public void set_UseVsixExtensions(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public DirectoryPath get_TestAdapterPath();
    [CompilerGeneratedAttribute]
public void set_TestAdapterPath(DirectoryPath value);
    [CompilerGeneratedAttribute]
public VSTestPlatform get_PlatformArchitecture();
    [CompilerGeneratedAttribute]
public void set_PlatformArchitecture(VSTestPlatform value);
    [CompilerGeneratedAttribute]
public VSTestFrameworkVersion get_FrameworkVersion();
    [CompilerGeneratedAttribute]
public void set_FrameworkVersion(VSTestFrameworkVersion value);
    [CompilerGeneratedAttribute]
public string get_TestCaseFilter();
    [CompilerGeneratedAttribute]
public void set_TestCaseFilter(string value);
    [CompilerGeneratedAttribute]
public FilePath get_Diag();
    [CompilerGeneratedAttribute]
public void set_Diag(FilePath value);
    [CompilerGeneratedAttribute]
public DirectoryPath get_ResultsDirectory();
    [CompilerGeneratedAttribute]
public void set_ResultsDirectory(DirectoryPath value);
    [CompilerGeneratedAttribute]
public string get_Logger();
    [CompilerGeneratedAttribute]
public void set_Logger(string value);
    [CompilerGeneratedAttribute]
public bool get_AllowPreviewVersion();
    [CompilerGeneratedAttribute]
public void set_AllowPreviewVersion(bool value);
}
[ExtensionAttribute]
public static class Cake.Common.Tools.VSTest.VSTestSettingsExtensions : object {
    [ExtensionAttribute]
public static VSTestSettings WithoutAnyLogger(VSTestSettings settings);
    [ExtensionAttribute]
public static VSTestSettings WithVisualStudioLogger(VSTestSettings settings);
    [ExtensionAttribute]
public static VSTestSettings WithAppVeyorLogger(VSTestSettings settings);
    [ExtensionAttribute]
public static VSTestSettings WithLogger(VSTestSettings settings, string loggerName);
}
public class Cake.Common.Tools.VSWhere.All.VSWhereAll : VSWhereTool`1<VSWhereAllSettings> {
    public VSWhereAll(IFileSystem fileSystem, ICakeEnvironment environment, IProcessRunner processRunner, IToolLocator toolLocator);
    public DirectoryPathCollection All(VSWhereAllSettings settings);
    private ProcessArgumentBuilder GetArguments(VSWhereAllSettings settings);
}
public class Cake.Common.Tools.VSWhere.All.VSWhereAllSettings : VSWhereSettings {
}
public class Cake.Common.Tools.VSWhere.Latest.VSWhereLatest : VSWhereTool`1<VSWhereLatestSettings> {
    public VSWhereLatest(IFileSystem fileSystem, ICakeEnvironment environment, IProcessRunner processRunner, IToolLocator toolLocator);
    public DirectoryPath Latest(VSWhereLatestSettings settings);
    private ProcessArgumentBuilder GetArguments(VSWhereLatestSettings settings);
}
public class Cake.Common.Tools.VSWhere.Latest.VSWhereLatestSettings : VSWhereSettings {
    [CompilerGeneratedAttribute]
private string <Products>k__BackingField;
    public string Products { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Products();
    [CompilerGeneratedAttribute]
public void set_Products(string value);
}
public class Cake.Common.Tools.VSWhere.Legacy.VSWhereLegacy : VSWhereTool`1<VSWhereLegacySettings> {
    public VSWhereLegacy(IFileSystem fileSystem, ICakeEnvironment environment, IProcessRunner processRunner, IToolLocator toolLocator);
    public DirectoryPathCollection Legacy(VSWhereLegacySettings settings);
    private ProcessArgumentBuilder GetArguments(VSWhereLegacySettings settings);
}
public class Cake.Common.Tools.VSWhere.Legacy.VSWhereLegacySettings : VSWhereSettings {
    [CompilerGeneratedAttribute]
private bool <Latest>k__BackingField;
    public bool Latest { get; public set; }
    public string Requires { get; }
    [CompilerGeneratedAttribute]
public bool get_Latest();
    [CompilerGeneratedAttribute]
public void set_Latest(bool value);
    public string get_Requires();
}
public class Cake.Common.Tools.VSWhere.Product.VSWhereProduct : VSWhereTool`1<VSWhereProductSettings> {
    public VSWhereProduct(IFileSystem fileSystem, ICakeEnvironment environment, IProcessRunner processRunner, IToolLocator toolLocator);
    public DirectoryPathCollection Products(VSWhereProductSettings settings);
    private ProcessArgumentBuilder GetArguments(VSWhereProductSettings settings);
}
public class Cake.Common.Tools.VSWhere.Product.VSWhereProductSettings : VSWhereSettings {
    [CompilerGeneratedAttribute]
private string <Products>k__BackingField;
    internal string Products { get; internal set; }
    [CompilerGeneratedAttribute]
internal string get_Products();
    [CompilerGeneratedAttribute]
internal void set_Products(string value);
}
[ExtensionAttribute]
[CakeAliasCategoryAttribute("VSWhere")]
public static class Cake.Common.Tools.VSWhere.VSWhereAliases : object {
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Legacy")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.VSWhere.Legacy")]
public static DirectoryPath VSWhereLegacy(ICakeContext context, bool latest);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Legacy")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.VSWhere.Legacy")]
public static DirectoryPathCollection VSWhereLegacy(ICakeContext context, VSWhereLegacySettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Latest")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.VSWhere.Latest")]
public static DirectoryPath VSWhereLatest(ICakeContext context);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Latest")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.VSWhere.Latest")]
public static DirectoryPath VSWhereLatest(ICakeContext context, VSWhereLatestSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("All")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.VSWhere.All")]
public static DirectoryPathCollection VSWhereAll(ICakeContext context);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("All")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.VSWhere.All")]
public static DirectoryPathCollection VSWhereAll(ICakeContext context, VSWhereAllSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Product")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.VSWhere.Product")]
public static DirectoryPathCollection VSWhereProducts(ICakeContext context, string products);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Product")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.VSWhere.Product")]
public static DirectoryPathCollection VSWhereProducts(ICakeContext context, string products, VSWhereProductSettings settings);
}
public abstract class Cake.Common.Tools.VSWhere.VSWhereSettings : ToolSettings {
    [CompilerGeneratedAttribute]
private string <Requires>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReturnProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludePrerelease>k__BackingField;
    public string Requires { get; public set; }
    public string Version { get; public set; }
    public string ReturnProperty { get; public set; }
    public bool IncludePrerelease { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Requires();
    [CompilerGeneratedAttribute]
public void set_Requires(string value);
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(string value);
    [CompilerGeneratedAttribute]
public string get_ReturnProperty();
    [CompilerGeneratedAttribute]
public void set_ReturnProperty(string value);
    [CompilerGeneratedAttribute]
public bool get_IncludePrerelease();
    [CompilerGeneratedAttribute]
public void set_IncludePrerelease(bool value);
}
public abstract class Cake.Common.Tools.VSWhere.VSWhereTool`1 : Tool`1<TSettings> {
    private static string VSWhereExecutableName;
    private ICakeEnvironment _environment;
    protected VSWhereTool`1(IFileSystem fileSystem, ICakeEnvironment environment, IProcessRunner processRunner, IToolLocator toolLocator);
    protected virtual string GetToolName();
    protected virtual IEnumerable`1<string> GetToolExecutableNames();
    protected virtual IEnumerable`1<FilePath> GetAlternativeToolPaths(TSettings settings);
    protected DirectoryPathCollection RunVSWhere(TSettings settings, ProcessArgumentBuilder builder);
    protected ProcessArgumentBuilder AddCommonArguments(VSWhereSettings settings, ProcessArgumentBuilder builder);
}
public enum Cake.Common.Tools.WiX.Architecture : Enum {
    public int value__;
    public static Architecture X64;
    public static Architecture X86;
    public static Architecture IA64;
}
public class Cake.Common.Tools.WiX.CandleRunner : Tool`1<CandleSettings> {
    private ICakeEnvironment _environment;
    public CandleRunner(IFileSystem fileSystem, ICakeEnvironment environment, IProcessRunner processRunner, IToolLocator tools);
    public void Run(IEnumerable`1<FilePath> sourceFiles, CandleSettings settings);
    private ProcessArgumentBuilder GetArguments(IEnumerable`1<FilePath> sourceFiles, CandleSettings settings);
    private static string GetArchitectureName(Architecture arch);
    protected virtual string GetToolName();
    protected virtual IEnumerable`1<string> GetToolExecutableNames();
    [CompilerGeneratedAttribute]
private string <GetArguments>b__3_2(FilePath file);
}
public class Cake.Common.Tools.WiX.CandleSettings : ToolSettings {
    [CompilerGeneratedAttribute]
private Nullable`1<Architecture> <Architecture>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <Defines>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <Extensions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FIPS>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoLogo>k__BackingField;
    [CompilerGeneratedAttribute]
private DirectoryPath <OutputDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Pedantic>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowSourceTrace>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Verbose>k__BackingField;
    public Nullable`1<Architecture> Architecture { get; public set; }
    public IDictionary`2<string, string> Defines { get; public set; }
    public IEnumerable`1<string> Extensions { get; public set; }
    public bool FIPS { get; public set; }
    public bool NoLogo { get; public set; }
    public DirectoryPath OutputDirectory { get; public set; }
    public bool Pedantic { get; public set; }
    public bool ShowSourceTrace { get; public set; }
    public bool Verbose { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<Architecture> get_Architecture();
    [CompilerGeneratedAttribute]
public void set_Architecture(Nullable`1<Architecture> value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_Defines();
    [CompilerGeneratedAttribute]
public void set_Defines(IDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_Extensions();
    [CompilerGeneratedAttribute]
public void set_Extensions(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public bool get_FIPS();
    [CompilerGeneratedAttribute]
public void set_FIPS(bool value);
    [CompilerGeneratedAttribute]
public bool get_NoLogo();
    [CompilerGeneratedAttribute]
public void set_NoLogo(bool value);
    [CompilerGeneratedAttribute]
public DirectoryPath get_OutputDirectory();
    [CompilerGeneratedAttribute]
public void set_OutputDirectory(DirectoryPath value);
    [CompilerGeneratedAttribute]
public bool get_Pedantic();
    [CompilerGeneratedAttribute]
public void set_Pedantic(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShowSourceTrace();
    [CompilerGeneratedAttribute]
public void set_ShowSourceTrace(bool value);
    [CompilerGeneratedAttribute]
public bool get_Verbose();
    [CompilerGeneratedAttribute]
public void set_Verbose(bool value);
}
public class Cake.Common.Tools.WiX.Heat.HeatRunner : Tool`1<HeatSettings> {
    private ICakeEnvironment _environment;
    public HeatRunner(IFileSystem fileSystem, ICakeEnvironment environment, IProcessRunner processRunner, IToolLocator toolService);
    public void Run(DirectoryPath directoryPath, FilePath outputFile, WiXHarvestType harvestType, HeatSettings settings);
    public void Run(FilePath objectFile, FilePath outputFile, WiXHarvestType harvestType, HeatSettings settings);
    public void Run(string harvestTarget, FilePath outputFile, WiXHarvestType harvestType, HeatSettings settings);
    private ProcessArgumentBuilder GetArguments(FilePath objectFile, FilePath outputFile, WiXHarvestType harvestType, HeatSettings settings);
    private ProcessArgumentBuilder GetArguments(DirectoryPath directoryPath, FilePath outputFile, WiXHarvestType harvestType, HeatSettings settings);
    private ProcessArgumentBuilder GetArguments(string harvestTarget, FilePath outputFile, WiXHarvestType harvestType, HeatSettings settings);
    private ProcessArgumentBuilder GetArguments(FilePath outputFile, HeatSettings settings);
    private string GetHarvestType(WiXHarvestType harvestType);
    protected virtual string GetToolName();
    protected virtual IEnumerable`1<string> GetToolExecutableNames();
}
public class Cake.Common.Tools.WiX.Heat.HeatSettings : ToolSettings {
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <Extensions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoLogo>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <SuppressSpecificWarnings>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <TreatSpecificWarningsAsErrors>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Verbose>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AutogeneratedGuid>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <GenerateGuid>k__BackingField;
    [CompilerGeneratedAttribute]
private FilePath <OutputFile>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SuppressFragments>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SuppressUniqueIds>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Transform>k__BackingField;
    [CompilerGeneratedAttribute]
private FilePath <File>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ComponentGroupName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DirectoryReferenceId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PreprocessorVariable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <GenerateBinderVariables>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SuppressCom>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SuppressRegistry>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SuppressRootDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Configuration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DirectoryId>k__BackingField;
    [CompilerGeneratedAttribute]
private WiXGenerateType <Generate>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <GenerateGuidWithoutBraces>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <KeepEmptyDirectories>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Platform>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<WiXOutputGroupType> <OutputGroup>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProjectName>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<WiXTemplateType> <Template>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Indent>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SuppressVb6Com>k__BackingField;
    public IEnumerable`1<string> Extensions { get; public set; }
    public bool NoLogo { get; public set; }
    public IEnumerable`1<string> SuppressSpecificWarnings { get; public set; }
    public IEnumerable`1<string> TreatSpecificWarningsAsErrors { get; public set; }
    public bool Verbose { get; public set; }
    public bool AutogeneratedGuid { get; public set; }
    public bool GenerateGuid { get; public set; }
    public FilePath OutputFile { get; public set; }
    public bool SuppressFragments { get; public set; }
    public bool SuppressUniqueIds { get; public set; }
    public string Transform { get; public set; }
    public FilePath File { get; public set; }
    public string ComponentGroupName { get; public set; }
    public string DirectoryReferenceId { get; public set; }
    public string PreprocessorVariable { get; public set; }
    public bool GenerateBinderVariables { get; public set; }
    public bool SuppressCom { get; public set; }
    public bool SuppressRegistry { get; public set; }
    public bool SuppressRootDirectory { get; public set; }
    public string Configuration { get; public set; }
    public string DirectoryId { get; public set; }
    public WiXGenerateType Generate { get; public set; }
    public bool GenerateGuidWithoutBraces { get; public set; }
    public bool KeepEmptyDirectories { get; public set; }
    public string Platform { get; public set; }
    public Nullable`1<WiXOutputGroupType> OutputGroup { get; public set; }
    public string ProjectName { get; public set; }
    public Nullable`1<WiXTemplateType> Template { get; public set; }
    public Nullable`1<int> Indent { get; public set; }
    public bool SuppressVb6Com { get; public set; }
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_Extensions();
    [CompilerGeneratedAttribute]
public void set_Extensions(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public bool get_NoLogo();
    [CompilerGeneratedAttribute]
public void set_NoLogo(bool value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_SuppressSpecificWarnings();
    [CompilerGeneratedAttribute]
public void set_SuppressSpecificWarnings(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_TreatSpecificWarningsAsErrors();
    [CompilerGeneratedAttribute]
public void set_TreatSpecificWarningsAsErrors(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public bool get_Verbose();
    [CompilerGeneratedAttribute]
public void set_Verbose(bool value);
    [CompilerGeneratedAttribute]
public bool get_AutogeneratedGuid();
    [CompilerGeneratedAttribute]
public void set_AutogeneratedGuid(bool value);
    [CompilerGeneratedAttribute]
public bool get_GenerateGuid();
    [CompilerGeneratedAttribute]
public void set_GenerateGuid(bool value);
    [CompilerGeneratedAttribute]
public FilePath get_OutputFile();
    [CompilerGeneratedAttribute]
public void set_OutputFile(FilePath value);
    [CompilerGeneratedAttribute]
public bool get_SuppressFragments();
    [CompilerGeneratedAttribute]
public void set_SuppressFragments(bool value);
    [CompilerGeneratedAttribute]
public bool get_SuppressUniqueIds();
    [CompilerGeneratedAttribute]
public void set_SuppressUniqueIds(bool value);
    [CompilerGeneratedAttribute]
public string get_Transform();
    [CompilerGeneratedAttribute]
public void set_Transform(string value);
    [CompilerGeneratedAttribute]
public FilePath get_File();
    [CompilerGeneratedAttribute]
public void set_File(FilePath value);
    [CompilerGeneratedAttribute]
public string get_ComponentGroupName();
    [CompilerGeneratedAttribute]
public void set_ComponentGroupName(string value);
    [CompilerGeneratedAttribute]
public string get_DirectoryReferenceId();
    [CompilerGeneratedAttribute]
public void set_DirectoryReferenceId(string value);
    [CompilerGeneratedAttribute]
public string get_PreprocessorVariable();
    [CompilerGeneratedAttribute]
public void set_PreprocessorVariable(string value);
    [CompilerGeneratedAttribute]
public bool get_GenerateBinderVariables();
    [CompilerGeneratedAttribute]
public void set_GenerateBinderVariables(bool value);
    [CompilerGeneratedAttribute]
public bool get_SuppressCom();
    [CompilerGeneratedAttribute]
public void set_SuppressCom(bool value);
    [CompilerGeneratedAttribute]
public bool get_SuppressRegistry();
    [CompilerGeneratedAttribute]
public void set_SuppressRegistry(bool value);
    [CompilerGeneratedAttribute]
public bool get_SuppressRootDirectory();
    [CompilerGeneratedAttribute]
public void set_SuppressRootDirectory(bool value);
    [CompilerGeneratedAttribute]
public string get_Configuration();
    [CompilerGeneratedAttribute]
public void set_Configuration(string value);
    [CompilerGeneratedAttribute]
public string get_DirectoryId();
    [CompilerGeneratedAttribute]
public void set_DirectoryId(string value);
    [CompilerGeneratedAttribute]
public WiXGenerateType get_Generate();
    [CompilerGeneratedAttribute]
public void set_Generate(WiXGenerateType value);
    [CompilerGeneratedAttribute]
public bool get_GenerateGuidWithoutBraces();
    [CompilerGeneratedAttribute]
public void set_GenerateGuidWithoutBraces(bool value);
    [CompilerGeneratedAttribute]
public bool get_KeepEmptyDirectories();
    [CompilerGeneratedAttribute]
public void set_KeepEmptyDirectories(bool value);
    [CompilerGeneratedAttribute]
public string get_Platform();
    [CompilerGeneratedAttribute]
public void set_Platform(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<WiXOutputGroupType> get_OutputGroup();
    [CompilerGeneratedAttribute]
public void set_OutputGroup(Nullable`1<WiXOutputGroupType> value);
    [CompilerGeneratedAttribute]
public string get_ProjectName();
    [CompilerGeneratedAttribute]
public void set_ProjectName(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<WiXTemplateType> get_Template();
    [CompilerGeneratedAttribute]
public void set_Template(Nullable`1<WiXTemplateType> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Indent();
    [CompilerGeneratedAttribute]
public void set_Indent(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public bool get_SuppressVb6Com();
    [CompilerGeneratedAttribute]
public void set_SuppressVb6Com(bool value);
}
public enum Cake.Common.Tools.WiX.Heat.WiXGenerateType : Enum {
    public int value__;
    public static WiXGenerateType Components;
    public static WiXGenerateType Container;
    public static WiXGenerateType PayloadGroup;
    public static WiXGenerateType Layout;
}
public enum Cake.Common.Tools.WiX.Heat.WiXHarvestType : Enum {
    public int value__;
    public static WiXHarvestType Dir;
    public static WiXHarvestType File;
    public static WiXHarvestType Project;
    public static WiXHarvestType Website;
    public static WiXHarvestType Perf;
    public static WiXHarvestType Reg;
}
public enum Cake.Common.Tools.WiX.Heat.WiXOutputGroupType : Enum {
    public int value__;
    public static WiXOutputGroupType Binaries;
    public static WiXOutputGroupType Symbols;
    public static WiXOutputGroupType Documents;
    public static WiXOutputGroupType Satellites;
    public static WiXOutputGroupType Sources;
    public static WiXOutputGroupType Content;
}
public enum Cake.Common.Tools.WiX.Heat.WiXTemplateType : Enum {
    public int value__;
    public static WiXTemplateType Fragment;
    public static WiXTemplateType Module;
    public static WiXTemplateType Product;
}
public class Cake.Common.Tools.WiX.LightRunner : Tool`1<LightSettings> {
    private ICakeEnvironment _environment;
    public LightRunner(IFileSystem fileSystem, ICakeEnvironment environment, IProcessRunner processRunner, IToolLocator tools);
    public void Run(IEnumerable`1<FilePath> objectFiles, LightSettings settings);
    private ProcessArgumentBuilder GetArguments(IEnumerable`1<FilePath> objectFiles, LightSettings settings);
    protected virtual string GetToolName();
    protected virtual IEnumerable`1<string> GetToolExecutableNames();
    [CompilerGeneratedAttribute]
private string <GetArguments>b__3_2(FilePath file);
}
public class Cake.Common.Tools.WiX.LightSettings : ToolSettings {
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <Defines>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <Extensions>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RawArguments>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoLogo>k__BackingField;
    [CompilerGeneratedAttribute]
private FilePath <OutputFile>k__BackingField;
    public IDictionary`2<string, string> Defines { get; public set; }
    public IEnumerable`1<string> Extensions { get; public set; }
    public string RawArguments { get; public set; }
    public bool NoLogo { get; public set; }
    public FilePath OutputFile { get; public set; }
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_Defines();
    [CompilerGeneratedAttribute]
public void set_Defines(IDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_Extensions();
    [CompilerGeneratedAttribute]
public void set_Extensions(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public string get_RawArguments();
    [CompilerGeneratedAttribute]
public void set_RawArguments(string value);
    [CompilerGeneratedAttribute]
public bool get_NoLogo();
    [CompilerGeneratedAttribute]
public void set_NoLogo(bool value);
    [CompilerGeneratedAttribute]
public FilePath get_OutputFile();
    [CompilerGeneratedAttribute]
public void set_OutputFile(FilePath value);
}
[CompilerGeneratedAttribute]
internal class Cake.Common.Tools.WiX.NamespaceDoc : object {
}
[ExtensionAttribute]
[CakeAliasCategoryAttribute("WiX")]
public static class Cake.Common.Tools.WiX.WiXAliases : object {
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Candle")]
public static void WiXCandle(ICakeContext context, GlobPattern pattern, CandleSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Candle")]
public static void WiXCandle(ICakeContext context, IEnumerable`1<FilePath> sourceFiles, CandleSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Light")]
public static void WiXLight(ICakeContext context, GlobPattern pattern, LightSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Light")]
public static void WiXLight(ICakeContext context, IEnumerable`1<FilePath> objectFiles, LightSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Heat")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.WiX.Heat")]
public static void WiXHeat(ICakeContext context, DirectoryPath directoryPath, FilePath outputFile, WiXHarvestType harvestType);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Heat")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.WiX.Heat")]
public static void WiXHeat(ICakeContext context, DirectoryPath directoryPath, FilePath outputFile, WiXHarvestType harvestType, HeatSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Heat")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.WiX.Heat")]
public static void WiXHeat(ICakeContext context, FilePath objectFile, FilePath outputFile, WiXHarvestType harvestType);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Heat")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.WiX.Heat")]
public static void WiXHeat(ICakeContext context, FilePath objectFile, FilePath outputFile, WiXHarvestType harvestType, HeatSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Heat")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.WiX.Heat")]
public static void WiXHeat(ICakeContext context, string harvestTarget, FilePath outputFile, WiXHarvestType harvestType);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
[CakeAliasCategoryAttribute("Heat")]
[CakeNamespaceImportAttribute("Cake.Common.Tools.WiX.Heat")]
public static void WiXHeat(ICakeContext context, string harvestTarget, FilePath outputFile, WiXHarvestType harvestType, HeatSettings settings);
}
[CompilerGeneratedAttribute]
internal class Cake.Common.Tools.XBuild.NamespaceDoc : object {
}
[ExtensionAttribute]
[CakeAliasCategoryAttribute("XBuild")]
public static class Cake.Common.Tools.XBuild.XBuildAliases : object {
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void XBuild(ICakeContext context, FilePath solution);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void XBuild(ICakeContext context, FilePath solution, Action`1<XBuildSettings> configurator);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void XBuild(ICakeContext context, FilePath solution, XBuildSettings settings);
}
internal static class Cake.Common.Tools.XBuild.XBuildResolver : object {
    private static ICakeEnvironment _environment;
    private static IFileSystem _fileSystem;
    public static FilePath GetXBuildPath(IFileSystem fileSystem, ICakeEnvironment environment, XBuildToolVersion version);
    private static FilePath GetWindowsXBuild();
    private static FilePath GetWhichXBuild();
    private static FilePath GetWhereMono();
    private static DirectoryPath GetMonoPathWindows();
}
public class Cake.Common.Tools.XBuild.XBuildRunner : Tool`1<XBuildSettings> {
    private ICakeEnvironment _environment;
    private IFileSystem _fileSystem;
    public XBuildRunner(IFileSystem fileSystem, ICakeEnvironment environment, IProcessRunner runner, IToolLocator tools);
    public void Run(FilePath solution, XBuildSettings settings);
    private ProcessArgumentBuilder GetArguments(FilePath solution, XBuildSettings settings);
    private static string GetVerbosityName(Verbosity verbosity);
    [IteratorStateMachineAttribute("Cake.Common.Tools.XBuild.XBuildRunner/<GetPropertyArguments>d__6")]
private static IEnumerable`1<string> GetPropertyArguments(IDictionary`2<string, IList`1<string>> properties);
    protected virtual string GetToolName();
    protected virtual IEnumerable`1<string> GetToolExecutableNames();
    protected virtual IEnumerable`1<FilePath> GetAlternativeToolPaths(XBuildSettings settings);
}
public class Cake.Common.Tools.XBuild.XBuildSettings : ToolSettings {
    private HashSet`1<string> _targets;
    private Dictionary`2<string, IList`1<string>> _properties;
    [CompilerGeneratedAttribute]
private XBuildToolVersion <ToolVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Configuration>k__BackingField;
    [CompilerGeneratedAttribute]
private Verbosity <Verbosity>k__BackingField;
    public ISet`1<string> Targets { get; }
    public IDictionary`2<string, IList`1<string>> Properties { get; }
    public XBuildToolVersion ToolVersion { get; public set; }
    public string Configuration { get; public set; }
    public Verbosity Verbosity { get; public set; }
    public ISet`1<string> get_Targets();
    public IDictionary`2<string, IList`1<string>> get_Properties();
    [CompilerGeneratedAttribute]
public XBuildToolVersion get_ToolVersion();
    [CompilerGeneratedAttribute]
public void set_ToolVersion(XBuildToolVersion value);
    [CompilerGeneratedAttribute]
public string get_Configuration();
    [CompilerGeneratedAttribute]
public void set_Configuration(string value);
    [CompilerGeneratedAttribute]
public Verbosity get_Verbosity();
    [CompilerGeneratedAttribute]
public void set_Verbosity(Verbosity value);
}
[ExtensionAttribute]
public static class Cake.Common.Tools.XBuild.XBuildSettingsExtensions : object {
    [ExtensionAttribute]
public static XBuildSettings WithTarget(XBuildSettings settings, string target);
    [ExtensionAttribute]
public static XBuildSettings UseToolVersion(XBuildSettings settings, XBuildToolVersion version);
    [ExtensionAttribute]
public static XBuildSettings WithProperty(XBuildSettings settings, string name, String[] values);
    [ExtensionAttribute]
public static XBuildSettings SetConfiguration(XBuildSettings settings, string configuration);
    [ExtensionAttribute]
public static XBuildSettings SetVerbosity(XBuildSettings settings, Verbosity verbosity);
}
public enum Cake.Common.Tools.XBuild.XBuildToolVersion : Enum {
    public int value__;
    public static XBuildToolVersion Default;
    public static XBuildToolVersion NET20;
    public static XBuildToolVersion NET30;
    public static XBuildToolVersion NET35;
    public static XBuildToolVersion NET40;
}
internal enum Cake.Common.Tools.XBuild.XBuildVersion : Enum {
    public int value__;
    public static XBuildVersion XBuild20;
    public static XBuildVersion XBuild35;
    public static XBuildVersion XBuild45;
}
[CompilerGeneratedAttribute]
internal class Cake.Common.Tools.Xml.NamespaceDoc : object {
}
[CompilerGeneratedAttribute]
internal class Cake.Common.Tools.XUnit.NamespaceDoc : object {
}
public enum Cake.Common.Tools.XUnit.ParallelismOption : Enum {
    public int value__;
    public static ParallelismOption None;
    public static ParallelismOption Collections;
    public static ParallelismOption Assemblies;
    public static ParallelismOption All;
}
[ExtensionAttribute]
[CakeAliasCategoryAttribute("xUnit v2")]
public static class Cake.Common.Tools.XUnit.XUnit2Aliases : object {
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void XUnit2(ICakeContext context, GlobPattern pattern);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void XUnit2(ICakeContext context, GlobPattern pattern, XUnit2Settings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void XUnit2(ICakeContext context, IEnumerable`1<string> assemblies);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void XUnit2(ICakeContext context, IEnumerable`1<FilePath> assemblies);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void XUnit2(ICakeContext context, IEnumerable`1<string> assemblies, XUnit2Settings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void XUnit2(ICakeContext context, IEnumerable`1<FilePath> assemblies, XUnit2Settings settings);
}
public class Cake.Common.Tools.XUnit.XUnit2Runner : Tool`1<XUnit2Settings> {
    private ICakeEnvironment _environment;
    private bool _useX86;
    public XUnit2Runner(IFileSystem fileSystem, ICakeEnvironment environment, IProcessRunner runner, IToolLocator tools);
    public void Run(IEnumerable`1<FilePath> assemblyPaths, XUnit2Settings settings);
    private ProcessArgumentBuilder GetArguments(IReadOnlyList`1<FilePath> assemblyPaths, XUnit2Settings settings);
    protected virtual string GetToolName();
    protected virtual IEnumerable`1<string> GetToolExecutableNames();
}
public class Cake.Common.Tools.XUnit.XUnit2Settings : ToolSettings {
    private Nullable`1<int> _maxThreads;
    [CompilerGeneratedAttribute]
private bool <ShadowCopy>k__BackingField;
    [CompilerGeneratedAttribute]
private DirectoryPath <OutputDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NUnitReport>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <JUnitReport>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <XmlReport>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <XmlReportV1>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HtmlReport>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReportName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoAppDomain>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ParallelismOption> <Parallelism>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseX86>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, IList`1<string>> <TraitsToInclude>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, IList`1<string>> <TraitsToExclude>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<string> <NamespacesToInclude>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<string> <ClassesToInclude>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<string> <MethodsToInclude>k__BackingField;
    public bool ShadowCopy { get; public set; }
    public DirectoryPath OutputDirectory { get; public set; }
    public bool NUnitReport { get; public set; }
    public bool JUnitReport { get; public set; }
    public bool XmlReport { get; public set; }
    public bool XmlReportV1 { get; public set; }
    public bool HtmlReport { get; public set; }
    public string ReportName { get; public set; }
    public bool NoAppDomain { get; public set; }
    public Nullable`1<ParallelismOption> Parallelism { get; public set; }
    public bool UseX86 { get; public set; }
    public Nullable`1<int> MaxThreads { get; public set; }
    public IDictionary`2<string, IList`1<string>> TraitsToInclude { get; private set; }
    public IDictionary`2<string, IList`1<string>> TraitsToExclude { get; private set; }
    public ICollection`1<string> NamespacesToInclude { get; }
    public ICollection`1<string> ClassesToInclude { get; }
    public ICollection`1<string> MethodsToInclude { get; }
    [CompilerGeneratedAttribute]
public bool get_ShadowCopy();
    [CompilerGeneratedAttribute]
public void set_ShadowCopy(bool value);
    [CompilerGeneratedAttribute]
public DirectoryPath get_OutputDirectory();
    [CompilerGeneratedAttribute]
public void set_OutputDirectory(DirectoryPath value);
    [CompilerGeneratedAttribute]
public bool get_NUnitReport();
    [CompilerGeneratedAttribute]
public void set_NUnitReport(bool value);
    [CompilerGeneratedAttribute]
public bool get_JUnitReport();
    [CompilerGeneratedAttribute]
public void set_JUnitReport(bool value);
    [CompilerGeneratedAttribute]
public bool get_XmlReport();
    [CompilerGeneratedAttribute]
public void set_XmlReport(bool value);
    [CompilerGeneratedAttribute]
public bool get_XmlReportV1();
    [CompilerGeneratedAttribute]
public void set_XmlReportV1(bool value);
    [CompilerGeneratedAttribute]
public bool get_HtmlReport();
    [CompilerGeneratedAttribute]
public void set_HtmlReport(bool value);
    [CompilerGeneratedAttribute]
public string get_ReportName();
    [CompilerGeneratedAttribute]
public void set_ReportName(string value);
    [CompilerGeneratedAttribute]
public bool get_NoAppDomain();
    [CompilerGeneratedAttribute]
public void set_NoAppDomain(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<ParallelismOption> get_Parallelism();
    [CompilerGeneratedAttribute]
public void set_Parallelism(Nullable`1<ParallelismOption> value);
    [CompilerGeneratedAttribute]
public bool get_UseX86();
    [CompilerGeneratedAttribute]
public void set_UseX86(bool value);
    public Nullable`1<int> get_MaxThreads();
    public void set_MaxThreads(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, IList`1<string>> get_TraitsToInclude();
    [CompilerGeneratedAttribute]
private void set_TraitsToInclude(IDictionary`2<string, IList`1<string>> value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, IList`1<string>> get_TraitsToExclude();
    [CompilerGeneratedAttribute]
private void set_TraitsToExclude(IDictionary`2<string, IList`1<string>> value);
    [CompilerGeneratedAttribute]
public ICollection`1<string> get_NamespacesToInclude();
    [CompilerGeneratedAttribute]
public ICollection`1<string> get_ClassesToInclude();
    [CompilerGeneratedAttribute]
public ICollection`1<string> get_MethodsToInclude();
}
[ExtensionAttribute]
public static class Cake.Common.Tools.XUnit.XUnit2SettingsExtensions : object {
    [ExtensionAttribute]
public static XUnit2Settings IncludeTrait(XUnit2Settings settings, string name, String[] values);
    [ExtensionAttribute]
public static XUnit2Settings ExcludeTrait(XUnit2Settings settings, string name, String[] values);
    [ExtensionAttribute]
public static XUnit2Settings IncludeNamespace(XUnit2Settings settings, string namespaceToInclude);
    [ExtensionAttribute]
public static XUnit2Settings IncludeClass(XUnit2Settings settings, string classNameToInclude);
    [ExtensionAttribute]
public static XUnit2Settings IncludeMethod(XUnit2Settings settings, string methodNameToInclude);
}
[ExtensionAttribute]
[CakeAliasCategoryAttribute("xUnit")]
public static class Cake.Common.Tools.XUnit.XUnitAliases : object {
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void XUnit(ICakeContext context, GlobPattern pattern);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void XUnit(ICakeContext context, GlobPattern pattern, XUnitSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void XUnit(ICakeContext context, IEnumerable`1<string> assemblies);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void XUnit(ICakeContext context, IEnumerable`1<FilePath> assemblies);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void XUnit(ICakeContext context, IEnumerable`1<string> assemblies, XUnitSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void XUnit(ICakeContext context, IEnumerable`1<FilePath> assemblies, XUnitSettings settings);
}
public class Cake.Common.Tools.XUnit.XUnitRunner : Tool`1<XUnitSettings> {
    private ICakeEnvironment _environment;
    public XUnitRunner(IFileSystem fileSystem, ICakeEnvironment environment, IProcessRunner runner, IToolLocator tools);
    public void Run(FilePath assemblyPath, XUnitSettings settings);
    private ProcessArgumentBuilder GetArguments(FilePath assemblyPath, XUnitSettings settings);
    protected virtual string GetToolName();
    protected virtual IEnumerable`1<string> GetToolExecutableNames();
}
internal static class Cake.Common.Tools.XUnit.XUnitRunnerUtilities : object {
    internal static FilePath GetReportFileName(IReadOnlyList`1<FilePath> assemblyPaths, XUnit2Settings settings);
}
public class Cake.Common.Tools.XUnit.XUnitSettings : ToolSettings {
    [CompilerGeneratedAttribute]
private bool <ShadowCopy>k__BackingField;
    [CompilerGeneratedAttribute]
private DirectoryPath <OutputDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <XmlReport>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HtmlReport>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Silent>k__BackingField;
    public bool ShadowCopy { get; public set; }
    public DirectoryPath OutputDirectory { get; public set; }
    public bool XmlReport { get; public set; }
    public bool HtmlReport { get; public set; }
    public bool Silent { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_ShadowCopy();
    [CompilerGeneratedAttribute]
public void set_ShadowCopy(bool value);
    [CompilerGeneratedAttribute]
public DirectoryPath get_OutputDirectory();
    [CompilerGeneratedAttribute]
public void set_OutputDirectory(DirectoryPath value);
    [CompilerGeneratedAttribute]
public bool get_XmlReport();
    [CompilerGeneratedAttribute]
public void set_XmlReport(bool value);
    [CompilerGeneratedAttribute]
public bool get_HtmlReport();
    [CompilerGeneratedAttribute]
public void set_HtmlReport(bool value);
    [CompilerGeneratedAttribute]
public bool get_Silent();
    [CompilerGeneratedAttribute]
public void set_Silent(bool value);
}
public enum Cake.Common.Xml.XmlDtdProcessing : Enum {
    public int value__;
    public static XmlDtdProcessing Prohibit;
    public static XmlDtdProcessing Ignore;
    public static XmlDtdProcessing Parse;
}
[ExtensionAttribute]
[CakeAliasCategoryAttribute("XML")]
public static class Cake.Common.Xml.XmlPeekAliases : object {
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static string XmlPeek(ICakeContext context, FilePath filePath, string xpath);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static string XmlPeek(ICakeContext context, FilePath filePath, string xpath, XmlPeekSettings settings);
    private static string XmlPeek(XmlReader source, string xpath, XmlPeekSettings settings);
    private static XmlReaderSettings GetXmlReaderSettings(XmlPeekSettings settings);
}
public class Cake.Common.Xml.XmlPeekSettings : object {
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <Namespaces>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PreserveWhitespace>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SuppressWarning>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlDtdProcessing <DtdProcessing>k__BackingField;
    public IDictionary`2<string, string> Namespaces { get; public set; }
    public bool PreserveWhitespace { get; public set; }
    public bool SuppressWarning { get; public set; }
    public XmlDtdProcessing DtdProcessing { get; public set; }
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_Namespaces();
    [CompilerGeneratedAttribute]
public void set_Namespaces(IDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public bool get_PreserveWhitespace();
    [CompilerGeneratedAttribute]
public void set_PreserveWhitespace(bool value);
    [CompilerGeneratedAttribute]
public bool get_SuppressWarning();
    [CompilerGeneratedAttribute]
public void set_SuppressWarning(bool value);
    [CompilerGeneratedAttribute]
public XmlDtdProcessing get_DtdProcessing();
    [CompilerGeneratedAttribute]
public void set_DtdProcessing(XmlDtdProcessing value);
}
[ExtensionAttribute]
[CakeAliasCategoryAttribute("XML")]
public static class Cake.Common.Xml.XmlPokeAliases : object {
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void XmlPoke(ICakeContext context, FilePath filePath, string xpath, string value);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void XmlPoke(ICakeContext context, FilePath filePath, string xpath, string value, XmlPokeSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static string XmlPokeString(ICakeContext context, string sourceXml, string xpath, string value);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static string XmlPokeString(ICakeContext context, string sourceXml, string xpath, string value, XmlPokeSettings settings);
    private static void XmlPoke(Stream source, Stream destination, string xpath, string value, XmlPokeSettings settings);
    private static XmlReaderSettings GetXmlReaderSettings(XmlPokeSettings settings);
    private static XmlWriterSettings GetXmlWriterSettings(XmlPokeSettings settings);
}
public class Cake.Common.Xml.XmlPokeSettings : object {
    [CompilerGeneratedAttribute]
private bool <PreserveWhitespace>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <Namespaces>k__BackingField;
    [CompilerGeneratedAttribute]
private Encoding <Encoding>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlDtdProcessing <DtdProcessing>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NewLineOnAttributes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IndentChars>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Indent>k__BackingField;
    public bool PreserveWhitespace { get; public set; }
    public IDictionary`2<string, string> Namespaces { get; public set; }
    public Encoding Encoding { get; public set; }
    public XmlDtdProcessing DtdProcessing { get; public set; }
    public bool NewLineOnAttributes { get; public set; }
    public string IndentChars { get; public set; }
    public bool Indent { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_PreserveWhitespace();
    [CompilerGeneratedAttribute]
public void set_PreserveWhitespace(bool value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_Namespaces();
    [CompilerGeneratedAttribute]
public void set_Namespaces(IDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public Encoding get_Encoding();
    [CompilerGeneratedAttribute]
public void set_Encoding(Encoding value);
    [CompilerGeneratedAttribute]
public XmlDtdProcessing get_DtdProcessing();
    [CompilerGeneratedAttribute]
public void set_DtdProcessing(XmlDtdProcessing value);
    [CompilerGeneratedAttribute]
public bool get_NewLineOnAttributes();
    [CompilerGeneratedAttribute]
public void set_NewLineOnAttributes(bool value);
    [CompilerGeneratedAttribute]
public string get_IndentChars();
    [CompilerGeneratedAttribute]
public void set_IndentChars(string value);
    [CompilerGeneratedAttribute]
public bool get_Indent();
    [CompilerGeneratedAttribute]
public void set_Indent(bool value);
}
public static class Cake.Common.Xml.XmlTransformation : object {
    public static string Transform(string xsl, string xml);
    public static string Transform(string xsl, string xml, XmlTransformationSettings settings);
    public static void Transform(IFileSystem fileSystem, FilePath xslPath, FilePath xmlPath, FilePath resultPath);
    public static void Transform(IFileSystem fileSystem, FilePath xslPath, FilePath xmlPath, FilePath resultPath, XmlTransformationSettings settings);
    private static void Transform(TextReader xsl, XsltArgumentList arguments, TextReader xml, Stream result, XmlWriterSettings settings);
    private static void Transform(XmlReader xsl, XsltArgumentList arguments, XmlReader xml, XmlWriter result);
}
[ExtensionAttribute]
[CakeAliasCategoryAttribute("XML")]
public static class Cake.Common.Xml.XmlTransformationAlias : object {
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static string XmlTransform(ICakeContext context, string xsl, string xml);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static string XmlTransform(ICakeContext context, string xsl, string xml, XmlTransformationSettings settings);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void XmlTransform(ICakeContext context, FilePath xslPath, FilePath xmlPath, FilePath resultPath);
    [ExtensionAttribute]
[CakeMethodAliasAttribute]
public static void XmlTransform(ICakeContext context, FilePath xslPath, FilePath xmlPath, FilePath resultPath, XmlTransformationSettings settings);
}
public class Cake.Common.Xml.XmlTransformationSettings : object {
    [CompilerGeneratedAttribute]
private XmlWriterSettings <XmlWriterSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Overwrite>k__BackingField;
    [CompilerGeneratedAttribute]
private XsltArgumentList <XsltArgumentList>k__BackingField;
    internal XmlWriterSettings XmlWriterSettings { get; }
    public bool Overwrite { get; public set; }
    public bool CheckCharacters { get; public set; }
    public ConformanceLevel ConformanceLevel { get; public set; }
    public bool DoNotEscapeUriAttributes { get; public set; }
    public Encoding Encoding { get; public set; }
    public bool Indent { get; public set; }
    public string IndentChars { get; public set; }
    public NamespaceHandling NamespaceHandling { get; public set; }
    public string NewLineChars { get; public set; }
    public NewLineHandling NewLineHandling { get; public set; }
    public bool NewLineOnAttributes { get; public set; }
    public bool OmitXmlDeclaration { get; public set; }
    public bool WriteEndDocumentOnClose { get; public set; }
    public XsltArgumentList XsltArgumentList { get; public set; }
    [CompilerGeneratedAttribute]
internal XmlWriterSettings get_XmlWriterSettings();
    [CompilerGeneratedAttribute]
public bool get_Overwrite();
    [CompilerGeneratedAttribute]
public void set_Overwrite(bool value);
    public bool get_CheckCharacters();
    public void set_CheckCharacters(bool value);
    public ConformanceLevel get_ConformanceLevel();
    public void set_ConformanceLevel(ConformanceLevel value);
    public bool get_DoNotEscapeUriAttributes();
    public void set_DoNotEscapeUriAttributes(bool value);
    public Encoding get_Encoding();
    public void set_Encoding(Encoding value);
    public bool get_Indent();
    public void set_Indent(bool value);
    public string get_IndentChars();
    public void set_IndentChars(string value);
    public NamespaceHandling get_NamespaceHandling();
    public void set_NamespaceHandling(NamespaceHandling value);
    public string get_NewLineChars();
    public void set_NewLineChars(string value);
    public NewLineHandling get_NewLineHandling();
    public void set_NewLineHandling(NewLineHandling value);
    public bool get_NewLineOnAttributes();
    public void set_NewLineOnAttributes(bool value);
    public bool get_OmitXmlDeclaration();
    public void set_OmitXmlDeclaration(bool value);
    public bool get_WriteEndDocumentOnClose();
    public void set_WriteEndDocumentOnClose(bool value);
    [CompilerGeneratedAttribute]
public XsltArgumentList get_XsltArgumentList();
    [CompilerGeneratedAttribute]
public void set_XsltArgumentList(XsltArgumentList value);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
