public class Cake.Commands.DefaultCommand : Command`1<DefaultCommandSettings> {
    private IBuildFeature _builder;
    private IBootstrapFeature _bootstrapper;
    private ICakeVersionFeature _version;
    private ICakeInfoFeature _info;
    private IConsole _console;
    private ICakeLog _log;
    public DefaultCommand(IBuildFeature builder, IBootstrapFeature bootstrapper, ICakeVersionFeature version, ICakeInfoFeature info, IConsole console, ICakeLog log);
    public virtual int Execute(CommandContext context, DefaultCommandSettings settings);
    private BuildHostKind GetBuildHostKind(DefaultCommandSettings settings);
    private int PerformBootstrapping(CommandContext context, DefaultCommandSettings settings, BuildHostKind host);
    private static CakeArguments CreateCakeArguments(IRemainingArguments remainingArguments, DefaultCommandSettings settings);
}
public class Cake.Commands.DefaultCommandSettings : CommandSettings {
    [CompilerGeneratedAttribute]
private FilePath <Script>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Bootstrap>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SkipBootstrap>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Debug>k__BackingField;
    [CompilerGeneratedAttribute]
private Verbosity <Verbosity>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Tree>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DryRun>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Exclusive>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Recompile>k__BackingField;
    [CommandArgumentAttribute("0", "[SCRIPT]")]
[DescriptionAttribute("The Cake script. Defaults to [grey]build.cake[/]")]
[TypeConverterAttribute("Cake.Cli.FilePathConverter")]
[DefaultValueAttribute("build.cake")]
public FilePath Script { get; public set; }
    [CommandOptionAttribute("--bootstrap")]
[DescriptionAttribute("Download/install modules defined by [grey]#module[/] directives, but do not run build.")]
public bool Bootstrap { get; public set; }
    [CommandOptionAttribute("--skip-bootstrap")]
[DescriptionAttribute("Skips bootstrapping when running build.")]
public bool SkipBootstrap { get; public set; }
    [CommandOptionAttribute("--debug|-d")]
[DescriptionAttribute("Launches script in debug mode.")]
public bool Debug { get; public set; }
    [CommandOptionAttribute("--verbosity|-v <VERBOSITY>")]
[DescriptionAttribute("Specifies the amount of information to be displayed.
(Quiet, Minimal, Normal, Verbose, Diagnostic)")]
[TypeConverterAttribute("Cake.Cli.VerbosityConverter")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public Verbosity Verbosity { get; public set; }
    [CommandOptionAttribute("--description|--descriptions|--showdescription|--showdescriptions")]
[DescriptionAttribute("Shows description for each task.")]
public bool Description { get; public set; }
    [CommandOptionAttribute("--tree|--showtree")]
[DescriptionAttribute("Shows the task dependency tree.")]
public bool Tree { get; public set; }
    [CommandOptionAttribute("--dryrun|--noop|--whatif")]
[DescriptionAttribute("Performs a dry run.")]
public bool DryRun { get; public set; }
    [CommandOptionAttribute("--exclusive|-e")]
[DescriptionAttribute("Executes the target task without any dependencies.")]
public bool Exclusive { get; public set; }
    [CommandOptionAttribute("--version|--ver")]
[DescriptionAttribute("Displays version information.")]
public bool ShowVersion { get; public set; }
    [CommandOptionAttribute("--info")]
[DescriptionAttribute("Displays additional information about Cake.")]
public bool ShowInfo { get; public set; }
    [CommandOptionAttribute("--invalidate-script-cache")]
[DescriptionAttribute("Forces the script to be recompiled if caching is enabled.")]
public bool Recompile { get; public set; }
    [CompilerGeneratedAttribute]
public FilePath get_Script();
    [CompilerGeneratedAttribute]
public void set_Script(FilePath value);
    [CompilerGeneratedAttribute]
public bool get_Bootstrap();
    [CompilerGeneratedAttribute]
public void set_Bootstrap(bool value);
    [CompilerGeneratedAttribute]
public bool get_SkipBootstrap();
    [CompilerGeneratedAttribute]
public void set_SkipBootstrap(bool value);
    [CompilerGeneratedAttribute]
public bool get_Debug();
    [CompilerGeneratedAttribute]
public void set_Debug(bool value);
    [CompilerGeneratedAttribute]
public Verbosity get_Verbosity();
    [CompilerGeneratedAttribute]
public void set_Verbosity(Verbosity value);
    [CompilerGeneratedAttribute]
public bool get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(bool value);
    [CompilerGeneratedAttribute]
public bool get_Tree();
    [CompilerGeneratedAttribute]
public void set_Tree(bool value);
    [CompilerGeneratedAttribute]
public bool get_DryRun();
    [CompilerGeneratedAttribute]
public void set_DryRun(bool value);
    [CompilerGeneratedAttribute]
public bool get_Exclusive();
    [CompilerGeneratedAttribute]
public void set_Exclusive(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShowVersion();
    [CompilerGeneratedAttribute]
public void set_ShowVersion(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShowInfo();
    [CompilerGeneratedAttribute]
public void set_ShowInfo(bool value);
    [CompilerGeneratedAttribute]
public bool get_Recompile();
    [CompilerGeneratedAttribute]
public void set_Recompile(bool value);
}
public class Cake.Features.Bootstrapping.BootstrapFeature : Feature {
    private ICakeEnvironment _environment;
    public BootstrapFeature(IFileSystem fileSystem, ICakeEnvironment environment, IContainerConfigurator configurator);
    public sealed virtual int Run(ICakeArguments arguments, BootstrapFeatureSettings settings);
    private static ScriptAnalyzerResult PerformAnalysis(IScriptAnalyzer analyzer, DirectoryPath root, BootstrapFeatureSettings settings);
}
public class Cake.Features.Bootstrapping.BootstrapFeatureSettings : object {
    [CompilerGeneratedAttribute]
private FilePath <Script>k__BackingField;
    [CompilerGeneratedAttribute]
private Verbosity <Verbosity>k__BackingField;
    public FilePath Script { get; public set; }
    public Verbosity Verbosity { get; public set; }
    [CompilerGeneratedAttribute]
public FilePath get_Script();
    [CompilerGeneratedAttribute]
public void set_Script(FilePath value);
    [CompilerGeneratedAttribute]
public Verbosity get_Verbosity();
    [CompilerGeneratedAttribute]
public void set_Verbosity(Verbosity value);
}
public interface Cake.Features.Bootstrapping.IBootstrapFeature {
    public abstract virtual int Run(ICakeArguments arguments, BootstrapFeatureSettings settings);
}
public class Cake.Features.Building.BuildFeature : Feature {
    private ICakeEnvironment _environment;
    private IModuleSearcher _searcher;
    private ICakeLog _log;
    public BuildFeature(IFileSystem fileSystem, ICakeEnvironment environment, IContainerConfigurator configurator, IModuleSearcher searcher, ICakeLog log);
    public sealed virtual int Run(ICakeArguments arguments, BuildFeatureSettings settings);
    private int RunCore(ICakeArguments arguments, BuildFeatureSettings settings);
    private ScriptHost CreateScriptHost(BuildFeatureSettings settings, IContainer scope);
}
public class Cake.Features.Building.BuildFeatureSettings : object {
    [CompilerGeneratedAttribute]
private BuildHostKind <BuildHostKind>k__BackingField;
    [CompilerGeneratedAttribute]
private FilePath <Script>k__BackingField;
    [CompilerGeneratedAttribute]
private Verbosity <Verbosity>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Debug>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Exclusive>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoBootstrapping>k__BackingField;
    public BuildHostKind BuildHostKind { get; }
    public FilePath Script { get; public set; }
    public Verbosity Verbosity { get; public set; }
    public bool Debug { get; public set; }
    public bool Exclusive { get; public set; }
    public bool NoBootstrapping { get; public set; }
    public BuildFeatureSettings(BuildHostKind buildHostKind);
    [CompilerGeneratedAttribute]
public BuildHostKind get_BuildHostKind();
    [CompilerGeneratedAttribute]
public sealed virtual FilePath get_Script();
    [CompilerGeneratedAttribute]
public void set_Script(FilePath value);
    [CompilerGeneratedAttribute]
public Verbosity get_Verbosity();
    [CompilerGeneratedAttribute]
public void set_Verbosity(Verbosity value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Debug();
    [CompilerGeneratedAttribute]
public void set_Debug(bool value);
    [CompilerGeneratedAttribute]
public bool get_Exclusive();
    [CompilerGeneratedAttribute]
public void set_Exclusive(bool value);
    [CompilerGeneratedAttribute]
public bool get_NoBootstrapping();
    [CompilerGeneratedAttribute]
public void set_NoBootstrapping(bool value);
}
public enum Cake.Features.Building.BuildHostKind : Enum {
    public int value__;
    public static BuildHostKind Build;
    public static BuildHostKind DryRun;
    public static BuildHostKind Description;
    public static BuildHostKind Tree;
}
public interface Cake.Features.Building.IBuildFeature {
    public abstract virtual int Run(ICakeArguments arguments, BuildFeatureSettings settings);
}
public abstract class Cake.Features.Feature : object {
    private IFileSystem _fileSystem;
    private ICakeEnvironment _environment;
    private IContainerConfigurator _configurator;
    public Feature(IFileSystem fileSystem, ICakeEnvironment environment, IContainerConfigurator configurator);
    protected IContainer CreateScope(ICakeConfiguration configuration, ICakeArguments arguments, Action`1<ICakeContainerRegistrar> action);
    protected ICakeConfiguration ReadConfiguration(ICakeArguments arguments, DirectoryPath root);
}
[ExtensionAttribute]
internal static class Cake.Infrastructure.CakeConfigurationExtensions : object {
    [ExtensionAttribute]
public static DirectoryPath GetScriptCachePath(ICakeConfiguration configuration, DirectoryPath defaultRoot, ICakeEnvironment environment);
}
public class Cake.Infrastructure.Composition.AutofacTypeRegistrar : object {
    private ContainerBuilder _builder;
    public AutofacTypeRegistrar(ContainerBuilder builder);
    public void RegisterModule(ICakeModule module);
    public sealed virtual void Register(Type service, Type implementation);
    public sealed virtual ICakeRegistrationBuilder RegisterType(Type type);
    public sealed virtual void RegisterInstance(Type service, object implementation);
    public sealed virtual void RegisterLazy(Type service, Func`1<object> factory);
    public sealed virtual ICakeRegistrationBuilder RegisterInstance(TImplementation instance);
    public IContainer BuildContainer();
    public sealed virtual ITypeResolver Build();
}
public class Cake.Infrastructure.Composition.AutofacTypeResolver : object {
    private ILifetimeScope _scope;
    public AutofacTypeResolver(ILifetimeScope scope);
    public sealed virtual object Resolve(Type type);
}
public class Cake.Infrastructure.Composition.ContainerRegistrationBuilder`2 : object {
    private IRegistrationBuilder`3<T, TActivator, SingleRegistrationStyle> _registration;
    public ContainerRegistrationBuilder`2(IRegistrationBuilder`3<T, TActivator, SingleRegistrationStyle> registration);
    public sealed virtual ICakeRegistrationBuilder As(Type type);
    public sealed virtual ICakeRegistrationBuilder AsSelf();
    public sealed virtual ICakeRegistrationBuilder Singleton();
    public sealed virtual ICakeRegistrationBuilder Transient();
}
public interface Cake.Infrastructure.Composition.IModuleSearcher {
    public abstract virtual ICollection`1<Type> FindModuleTypes(DirectoryPath root, ICakeConfiguration configuration);
}
public class Cake.Infrastructure.Composition.ModuleLoader : object {
    private IContainer _container;
    public ModuleLoader(IContainer container);
    [IteratorStateMachineAttribute("Cake.Infrastructure.Composition.ModuleLoader/<LoadModules>d__2")]
public IEnumerable`1<ICakeModule> LoadModules(IEnumerable`1<Type> types);
    private ICakeModule LoadModule(Type type);
    private static ConstructorInfo GetGreediestConstructor(Type type);
}
public class Cake.Infrastructure.Composition.ModuleSearcher : object {
    private static Dictionary`2<string, string> _excludedModules;
    private IFileSystem _fileSystem;
    private ICakeEnvironment _environment;
    private ICakeLog _log;
    public ModuleSearcher(IFileSystem fileSystem, ICakeEnvironment environment, ICakeLog log);
    private static ModuleSearcher();
    public sealed virtual ICollection`1<Type> FindModuleTypes(DirectoryPath root, ICakeConfiguration configuration);
    private Type LoadModule(FilePath path, ICakeConfiguration configuration);
}
internal static class Cake.Infrastructure.Constants : object {
}
public class Cake.Infrastructure.ContainerConfigurator : object {
    public sealed virtual void Configure(ICakeContainerRegistrar registrar, ICakeConfiguration configuration, ICakeArguments arguments);
}
public interface Cake.Infrastructure.IContainerConfigurator {
    public abstract virtual void Configure(ICakeContainerRegistrar registrar, ICakeConfiguration configuration, ICakeArguments arguments);
}
public interface Cake.Infrastructure.IScriptHostSettings {
    public bool Debug { get; }
    public FilePath Script { get; }
    public abstract virtual bool get_Debug();
    public abstract virtual FilePath get_Script();
}
public class Cake.Infrastructure.Scripting.ReferenceAssemblyResolver : object {
    private static Version VersionZero;
    private ICakeLog _log;
    public ReferenceAssemblyResolver(ICakeLog log);
    private static ReferenceAssemblyResolver();
    public sealed virtual Assembly[] GetReferenceAssemblies();
    [IteratorStateMachineAttribute("Cake.Infrastructure.Scripting.ReferenceAssemblyResolver/<<GetReferenceAssemblies>g__TryGetReferenceAssemblies|3_0>d")]
[CompilerGeneratedAttribute]
private IEnumerable`1<Assembly> <GetReferenceAssemblies>g__TryGetReferenceAssemblies|3_0();
}
public class Cake.Infrastructure.Scripting.RoslynCodeGenerator : object {
    public string Generate(Script script);
    private static string GetAliasCode(Script context);
}
public class Cake.Infrastructure.Scripting.RoslynScriptEngine : object {
    private IAssemblyLoader _loader;
    private IScriptHostSettings _settings;
    private ICakeConfiguration _configuration;
    private ICakeLog _log;
    public RoslynScriptEngine(IAssemblyLoader loader, IScriptHostSettings settings, ICakeConfiguration configuration, ICakeLog log);
    public sealed virtual IScriptSession CreateSession(IScriptHost host);
}
public class Cake.Infrastructure.Scripting.RoslynScriptSession : object {
    private IScriptHost _host;
    private IFileSystem _fileSystem;
    private IAssemblyLoader _loader;
    private ICakeLog _log;
    private ICakeConfiguration _configuration;
    private IScriptHostSettings _settings;
    private bool _scriptCacheEnabled;
    private bool _regenerateCache;
    private DirectoryPath _scriptCachePath;
    [CompilerGeneratedAttribute]
private HashSet`1<FilePath> <ReferencePaths>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<Assembly> <References>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<string> <Namespaces>k__BackingField;
    public HashSet`1<FilePath> ReferencePaths { get; }
    public HashSet`1<Assembly> References { get; }
    public HashSet`1<string> Namespaces { get; }
    public RoslynScriptSession(IScriptHost host, IAssemblyLoader loader, ICakeConfiguration configuration, ICakeLog log, IScriptHostSettings settings);
    [CompilerGeneratedAttribute]
public HashSet`1<FilePath> get_ReferencePaths();
    [CompilerGeneratedAttribute]
public HashSet`1<Assembly> get_References();
    [CompilerGeneratedAttribute]
public HashSet`1<string> get_Namespaces();
    public sealed virtual void AddReference(Assembly assembly);
    public sealed virtual void AddReference(FilePath path);
    public sealed virtual void ImportNamespace(string namespace);
    public sealed virtual void Execute(Script script);
    private FilePath GetCachedAssemblyPath(Script script, FilePath scriptName);
    private void RunScriptAssembly(string assemblyPath);
}
public class Cake.Infrastructure.Scripting.ScriptAssemblyResolver : object {
    private static string AssemblyResourcesExtension;
    private static Version VersionZero;
    private ICakeEnvironment _environment;
    private ICakeLog _log;
    private Lazy`1<bool> _shouldTryResolveNeutral;
    private HashSet`1<string> _resolvedNames;
    public ScriptAssemblyResolver(ICakeEnvironment environment, ICakeLog log);
    private static ScriptAssemblyResolver();
    public sealed virtual void Dispose();
    private Assembly AssemblyResolve(object sender, ResolveEventArgs args);
    private Assembly AssemblyResolve(AssemblyName assemblyName);
    private bool GetShouldTryResolveNeutral();
}
internal static class Cake.Infrastructure.Utilities.FastHash : object {
    public static string GenerateHash(Byte[] input);
    public static string GenerateHash(IEnumerable`1<Byte[]> inputs);
    private static string ConvertBits(Byte[] hash);
}
public class Cake.Program : object {
    private Action`1<ContainerBuilder> _overrides;
    private bool _propagateExceptions;
    public Program(Action`1<ContainerBuilder> overrides, bool propagateExceptions);
    [AsyncStateMachineAttribute("Cake.Program/<Main>d__3")]
public static Task`1<int> Main(String[] args);
    [AsyncStateMachineAttribute("Cake.Program/<Run>d__4")]
public Task`1<int> Run(String[] args);
    private ITypeRegistrar BuildTypeRegistrar();
    private static int <Main>(String[] args);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <Run>b__4_0(IConfigurator config);
}
