[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class NuGet.NoAllocEnumerateExtensions : object {
    [ExtensionAttribute]
public static OptimisticallyNonAllocatingListEnumerable`1<T> NoAllocEnumerate(IList`1<T> list);
    [ExtensionAttribute]
public static OptimisticallyNonAllocatingEnumerable`1<T> NoAllocEnumerate(IEnumerable`1<T> source);
    [ExtensionAttribute]
public static OptimisticallyNonAllocatingDictionaryEnumerable`2<TKey, TValue> NoAllocEnumerate(IDictionary`2<TKey, TValue> dictionary);
}
internal static class NuGet.Shared.EncodingUtility : object {
    [NullableContextAttribute("1")]
internal static string ToHex(Byte[] bytes, int length);
    private static char ToHexChar(int input);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class NuGet.Shared.EqualityUtility : object {
    [ExtensionAttribute]
internal static bool OrderedEquals(IEnumerable`1<TSource> self, IEnumerable`1<TSource> other, Func`2<TSource, TKey> keySelector, IComparer`1<TKey> orderComparer, IEqualityComparer`1<TSource> sequenceComparer);
    [ExtensionAttribute]
internal static bool OrderedEquals(ICollection`1<TSource> self, ICollection`1<TSource> other, Func`2<TSource, TKey> keySelector, IComparer`1<TKey> orderComparer, IEqualityComparer`1<TSource> sequenceComparer);
    [ExtensionAttribute]
internal static bool OrderedEquals(IList`1<TSource> self, IList`1<TSource> other, Func`2<TSource, TKey> keySelector, IComparer`1<TKey> orderComparer, IEqualityComparer`1<TSource> sequenceComparer);
    [ExtensionAttribute]
internal static bool SequenceEqualWithNullCheck(IEnumerable`1<T> self, IEnumerable`1<T> other, IEqualityComparer`1<T> comparer);
    [ExtensionAttribute]
internal static bool SequenceEqualWithNullCheck(ICollection`1<T> self, ICollection`1<T> other, IEqualityComparer`1<T> comparer);
    [ExtensionAttribute]
internal static bool SequenceEqualWithNullCheck(IList`1<T> self, IList`1<T> other, IEqualityComparer`1<T> comparer);
    [ExtensionAttribute]
internal static bool SetEqualsWithNullCheck(ISet`1<T> self, ISet`1<T> other, IEqualityComparer`1<T> comparer);
    internal static bool DictionaryEquals(IDictionary`2<TKey, TValue> self, IDictionary`2<TKey, TValue> other, Func`3<TValue, TValue, bool> compareValues);
    internal static bool DictionaryOfSequenceEquals(IDictionary`2<TKey, IEnumerable`1<TValue>> self, IDictionary`2<TKey, IEnumerable`1<TValue>> other);
    internal static bool EqualsWithNullCheck(T self, T other);
    [ExtensionAttribute]
internal static bool EqualsFalse(string value);
    [NullableContextAttribute("2")]
private static bool TryIdentityEquals(T self, T other, Boolean& equals);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class NuGet.Shared.Extensions : object {
    [ExtensionAttribute]
public static List`1<T> AsList(IEnumerable`1<T> enumerable);
    [ExtensionAttribute]
public static HashSet`1<T> AsHashSet(ISet`1<T> enumerable, IEqualityComparer`1<T> comparer);
    [ExtensionAttribute]
public static void ForEach(IEnumerable`1<T> enumeration, Action`1<T> action);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class NuGet.Shared.HashCodeCombiner : ValueType {
    private static long Seed;
    private bool _initialized;
    private long _combinedHash;
    internal int CombinedHash { get; }
    internal int get_CombinedHash();
    private void AddHashCode(int i);
    internal void AddObject(int i);
    internal void AddObject(bool b);
    internal void AddObject(TValue o, IEqualityComparer`1<TValue> comparer);
    internal void AddObject(T o);
    [NullableContextAttribute("0")]
internal void AddStruct(Nullable`1<T> o);
    [NullableContextAttribute("0")]
internal void AddStruct(T o);
    internal void AddStringIgnoreCase(string s);
    internal void AddSequence(IEnumerable`1<T> sequence);
    internal void AddSequence(T[] array);
    internal void AddSequence(IList`1<T> list);
    internal void AddSequence(IReadOnlyList`1<T> list);
    internal void AddDictionary(IEnumerable`1<KeyValuePair`2<TKey, TValue>> dictionary);
    internal static int GetHashCode(T1 o1, T2 o2);
    internal static int GetHashCode(T1 o1, T2 o2, T3 o3);
    private void CheckInitialized();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class NuGet.Shared.XmlUtility : object {
    internal static XDocument Load(string path);
    internal static XDocument Load(string path, LoadOptions options);
    internal static XDocument Load(Stream input);
    internal static XDocument Load(Stream input, LoadOptions options);
    internal static string GetEncodedXMLName(string name);
    internal static XmlReaderSettings GetXmlReaderSettings(LoadOptions options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class NuGet.SimplePool`1 : object {
    private ConcurrentStack`1<T> _values;
    private Func`1<T> _allocate;
    public SimplePool`1(Func`1<T> allocate);
    public T Allocate();
    public void Free(T value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class NuGet.StringBuilderPool : object {
    private static int MaxPoolSize;
    private SimplePool`1<StringBuilder> _pool;
    public static StringBuilderPool Shared;
    private static StringBuilderPool();
    public StringBuilder Rent(int minimumCapacity);
    public string ToStringAndReturn(StringBuilder builder);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class NuGet.TaskResult : object {
    [CompilerGeneratedAttribute]
private static Task`1<bool> <True>k__BackingField;
    [CompilerGeneratedAttribute]
private static Task`1<bool> <False>k__BackingField;
    [CompilerGeneratedAttribute]
private static Task`1<int> <Zero>k__BackingField;
    [CompilerGeneratedAttribute]
private static Task`1<int> <One>k__BackingField;
    public static Task`1<bool> True { get; }
    public static Task`1<bool> False { get; }
    public static Task`1<int> Zero { get; }
    public static Task`1<int> One { get; }
    private static TaskResult();
    [CompilerGeneratedAttribute]
public static Task`1<bool> get_True();
    [CompilerGeneratedAttribute]
public static Task`1<bool> get_False();
    public static Task`1<bool> Boolean(bool b);
    [CompilerGeneratedAttribute]
public static Task`1<int> get_Zero();
    [CompilerGeneratedAttribute]
public static Task`1<int> get_One();
    public static Task`1<int> Integer(int i);
    public static Task`1<T> Null();
    public static Task`1<IEnumerable`1<T>> EmptyEnumerable();
    public static Task`1<T[]> EmptyArray();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NuGet.Versioning.FloatRange : object {
    private NuGetVersion _minVersion;
    private NuGetVersionFloatBehavior _floatBehavior;
    [NullableAttribute("2")]
private string _releasePrefix;
    public bool HasMinVersion { get; }
    public NuGetVersion MinVersion { get; }
    public NuGetVersionFloatBehavior FloatBehavior { get; }
    [NullableAttribute("2")]
public string OriginalReleasePrefix { get; }
    [MemberNotNullWhenAttribute("True", "OriginalReleasePrefix")]
[MemberNotNullWhenAttribute("True", "_releasePrefix")]
public bool IncludePrerelease { get; }
    public FloatRange(NuGetVersionFloatBehavior floatBehavior);
    public FloatRange(NuGetVersionFloatBehavior floatBehavior, NuGetVersion minVersion);
    public FloatRange(NuGetVersionFloatBehavior floatBehavior, NuGetVersion minVersion, string releasePrefix);
    public bool get_HasMinVersion();
    public NuGetVersion get_MinVersion();
    public NuGetVersionFloatBehavior get_FloatBehavior();
    [NullableContextAttribute("2")]
public string get_OriginalReleasePrefix();
    [MemberNotNullWhenAttribute("True", "OriginalReleasePrefix")]
[MemberNotNullWhenAttribute("True", "_releasePrefix")]
public bool get_IncludePrerelease();
    public bool Satisfies(NuGetVersion version);
    public static FloatRange Parse(string versionString);
    public static bool TryParse(string versionString, FloatRange& range);
    private static int CalculateVersionParts(string line);
    public virtual string ToString();
    public void ToString(StringBuilder sb);
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(FloatRange other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
internal static int <TryParse>g__IndexOf|18_0(string str, char c);
}
[NullableContextAttribute("1")]
public interface NuGet.Versioning.INuGetVersionable {
    public NuGetVersion Version { get; }
    public abstract virtual NuGetVersion get_Version();
}
public interface NuGet.Versioning.IVersionComparer {
}
public interface NuGet.Versioning.IVersionRangeComparer {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NuGet.Versioning.NuGetVersion : SemanticVersion {
    [NullableAttribute("2")]
private string _originalString;
    [CompilerGeneratedAttribute]
private Version <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Revision>k__BackingField;
    public Version Version { get; }
    public bool IsLegacyVersion { get; }
    public int Revision { get; }
    public bool IsSemVer2 { get; }
    [NullableAttribute("2")]
public string OriginalVersion { get; }
    public NuGetVersion(string version);
    public NuGetVersion(NuGetVersion version);
    [NullableContextAttribute("2")]
public NuGetVersion(Version version, string releaseLabel, string metadata);
    public NuGetVersion(int major, int minor, int patch);
    [NullableContextAttribute("2")]
public NuGetVersion(int major, int minor, int patch, string releaseLabel);
    [NullableContextAttribute("2")]
public NuGetVersion(int major, int minor, int patch, string releaseLabel, string metadata);
    [NullableContextAttribute("2")]
public NuGetVersion(int major, int minor, int patch, IEnumerable`1<string> releaseLabels, string metadata);
    public NuGetVersion(int major, int minor, int patch, int revision);
    public NuGetVersion(int major, int minor, int patch, int revision, string releaseLabel, string metadata);
    [NullableContextAttribute("2")]
public NuGetVersion(int major, int minor, int patch, int revision, IEnumerable`1<string> releaseLabels, string metadata);
    [NullableContextAttribute("2")]
public NuGetVersion(Version version, IEnumerable`1<string> releaseLabels, string metadata, string originalVersion);
    public virtual string ToString();
    [CompilerGeneratedAttribute]
public Version get_Version();
    public virtual bool get_IsLegacyVersion();
    [CompilerGeneratedAttribute]
public int get_Revision();
    public bool get_IsSemVer2();
    [NullableContextAttribute("2")]
public string get_OriginalVersion();
    public static NuGetVersion Parse(string value);
    [NullableContextAttribute("2")]
public static bool TryParse(string value, NuGetVersion& version);
    private static bool TryGetNormalizedVersion(string str, Version& version);
    public static bool TryParseStrict(string value, NuGetVersion& version);
    private static string GetLegacyString(Version version, IEnumerable`1<string> releaseLabels, string metadata);
    [NullableContextAttribute("2")]
private static IEnumerable`1<string> ParseReleaseLabels(string releaseLabels);
    [CompilerGeneratedAttribute]
internal static int <TryParse>g__IndexOf|26_0(string str, char c);
    [CompilerGeneratedAttribute]
internal static bool <TryGetNormalizedVersion>g__ParseSection|27_0(string str, int start, Int32& end, Int32& versionNumber);
    [CompilerGeneratedAttribute]
internal static bool <TryGetNormalizedVersion>g__IsDigit|27_1(char c);
}
public enum NuGet.Versioning.NuGetVersionFloatBehavior : Enum {
    public int value__;
    public static NuGetVersionFloatBehavior None;
    public static NuGetVersionFloatBehavior Prerelease;
    public static NuGetVersionFloatBehavior Revision;
    public static NuGetVersionFloatBehavior Patch;
    public static NuGetVersionFloatBehavior Minor;
    public static NuGetVersionFloatBehavior Major;
    public static NuGetVersionFloatBehavior AbsoluteLatest;
    public static NuGetVersionFloatBehavior PrereleaseRevision;
    public static NuGetVersionFloatBehavior PrereleasePatch;
    public static NuGetVersionFloatBehavior PrereleaseMinor;
    public static NuGetVersionFloatBehavior PrereleaseMajor;
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class NuGet.Versioning.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string Argument_Cannot_Be_Null_Or_Empty { get; }
    internal static string CannotBeNullWhenParameterIsNotNull { get; }
    internal static string InvalidFloatRangeValue { get; }
    internal static string Invalidvalue { get; }
    internal static string TypeNotSupported { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_Argument_Cannot_Be_Null_Or_Empty();
    internal static string get_CannotBeNullWhenParameterIsNotNull();
    internal static string get_InvalidFloatRangeValue();
    internal static string get_Invalidvalue();
    internal static string get_TypeNotSupported();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class NuGet.Versioning.ResourcesFormatter : object {
    internal static ArgumentException TypeNotSupported(Type type, string paramName);
    internal static ArgumentNullException CannotBeNullWhenParameterIsNull(string parameterThatIsNull, string parameterThisIsNotNull);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[TypeConverterAttribute("NuGet.Versioning.SemanticVersionConverter")]
public class NuGet.Versioning.SemanticVersion : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal String[] _releaseLabels;
    internal string _metadata;
    [CompilerGeneratedAttribute]
private int <Major>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Minor>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Patch>k__BackingField;
    [NullableAttribute("1")]
internal static String[] EmptyReleaseLabels;
    public int Major { get; }
    public int Minor { get; }
    public int Patch { get; }
    [NullableAttribute("1")]
public IEnumerable`1<string> ReleaseLabels { get; }
    [NullableAttribute("1")]
public string Release { get; }
    public bool IsPrerelease { get; }
    public bool HasMetadata { get; }
    public string Metadata { get; }
    [NullableContextAttribute("1")]
public SemanticVersion(SemanticVersion version);
    public SemanticVersion(int major, int minor, int patch);
    public SemanticVersion(int major, int minor, int patch, string releaseLabel);
    public SemanticVersion(int major, int minor, int patch, string releaseLabel, string metadata);
    public SemanticVersion(int major, int minor, int patch, IEnumerable`1<string> releaseLabels, string metadata);
    protected SemanticVersion(Version version, string releaseLabel, string metadata);
    protected SemanticVersion(int major, int minor, int patch, int revision, string releaseLabel, string metadata);
    protected SemanticVersion(int major, int minor, int patch, int revision, IEnumerable`1<string> releaseLabels, string metadata);
    [NullableContextAttribute("1")]
protected SemanticVersion(Version version, IEnumerable`1<string> releaseLabels, string metadata);
    private static SemanticVersion();
    [CompilerGeneratedAttribute]
public int get_Major();
    [CompilerGeneratedAttribute]
public int get_Minor();
    [CompilerGeneratedAttribute]
public int get_Patch();
    [NullableContextAttribute("1")]
public IEnumerable`1<string> get_ReleaseLabels();
    [NullableContextAttribute("1")]
public string get_Release();
    public virtual bool get_IsPrerelease();
    public virtual bool get_HasMetadata();
    public virtual string get_Metadata();
    [NullableContextAttribute("1")]
public virtual string ToNormalizedString();
    [NullableContextAttribute("1")]
public virtual string ToFullString();
    [NullableContextAttribute("1")]
public virtual string ToString();
    public virtual string ToString(string format, IFormatProvider formatProvider);
    protected bool TryFormatter(string format, IFormatProvider formatProvider, String& formattedString);
    public virtual int GetHashCode();
    public virtual int CompareTo(object obj);
    public virtual int CompareTo(SemanticVersion other);
    public virtual bool Equals(object obj);
    public virtual bool Equals(SemanticVersion other);
    public virtual bool Equals(SemanticVersion other, VersionComparison versionComparison);
    public virtual int CompareTo(SemanticVersion other, VersionComparison versionComparison);
    public static bool op_Equality(SemanticVersion version1, SemanticVersion version2);
    public static bool op_Inequality(SemanticVersion version1, SemanticVersion version2);
    [NullableContextAttribute("1")]
public static bool op_LessThan(SemanticVersion version1, SemanticVersion version2);
    [NullableContextAttribute("1")]
public static bool op_LessThanOrEqual(SemanticVersion version1, SemanticVersion version2);
    [NullableContextAttribute("1")]
public static bool op_GreaterThan(SemanticVersion version1, SemanticVersion version2);
    [NullableContextAttribute("1")]
public static bool op_GreaterThanOrEqual(SemanticVersion version1, SemanticVersion version2);
    private static int Compare(SemanticVersion version1, SemanticVersion version2);
    [NullableContextAttribute("1")]
public static SemanticVersion Parse(string value);
    [NullableContextAttribute("1")]
public static bool TryParse(string value, SemanticVersion& version);
    internal static bool IsLetterOrDigitOrDash(char c);
    internal static bool IsDigit(char c);
    [NullableContextAttribute("1")]
internal static bool IsValid(string s, bool allowLeadingZeros);
    [NullableContextAttribute("1")]
internal static bool IsValidPart(string s, bool allowLeadingZeros);
    internal static void ParseSections(string value, String& versionString, String[]& releaseLabels, String& buildMetadata);
    [NullableContextAttribute("1")]
internal static Version NormalizeVersionValue(Version version);
    private static String[] ParseReleaseLabels(string releaseLabels);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class NuGet.Versioning.SemanticVersionConverter : TypeConverter {
    [NullableContextAttribute("1")]
public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NuGet.Versioning.VersionComparer : object {
    private VersionComparison _mode;
    public static IVersionComparer Default;
    public static IVersionComparer Version;
    public static IVersionComparer VersionRelease;
    public static IVersionComparer VersionReleaseMetadata;
    public VersionComparer(VersionComparison versionComparison);
    private static VersionComparer();
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(SemanticVersion x, SemanticVersion y);
    [NullableContextAttribute("2")]
public static int Compare(SemanticVersion version1, SemanticVersion version2, VersionComparison versionComparison);
    public sealed virtual int GetHashCode(SemanticVersion version);
    [NullableContextAttribute("2")]
public sealed virtual int Compare(SemanticVersion x, SemanticVersion y);
    [NullableContextAttribute("2")]
private static int CompareLegacyVersion(NuGetVersion legacyX, NuGetVersion legacyY);
    private static int CompareReleaseLabels(String[] version1, String[] version2);
    private static int CompareRelease(string version1, string version2);
    private static String[] GetReleaseLabelsOrNull(SemanticVersion version);
    private static bool AreReleaseLabelsEqual(SemanticVersion x, SemanticVersion y);
    private static int GetRevisionOrZero(SemanticVersion version);
}
public enum NuGet.Versioning.VersionComparison : Enum {
    public int value__;
    public static VersionComparison Default;
    public static VersionComparison Version;
    public static VersionComparison VersionRelease;
    public static VersionComparison VersionReleaseMetadata;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class NuGet.Versioning.VersionExtensions : object {
    [ExtensionAttribute]
public static T FindBestMatch(IEnumerable`1<T> items, VersionRange ideal, Func`2<T, NuGetVersion> selector);
    [ExtensionAttribute]
public static INuGetVersionable FindBestMatch(IEnumerable`1<INuGetVersionable> items, VersionRange ideal);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NuGet.Versioning.VersionFormatter : object {
    public static VersionFormatter Instance;
    private static VersionFormatter();
    [NullableContextAttribute("2")]
public sealed virtual string Format(string format, object arg, IFormatProvider formatProvider);
    [NullableContextAttribute("2")]
public sealed virtual object GetFormat(Type formatType);
    private static void Format(StringBuilder builder, char c, SemanticVersion version);
    private static void AppendFull(StringBuilder builder, SemanticVersion version);
    private static void AppendNormalized(StringBuilder builder, SemanticVersion version);
    private static void AppendVersion(StringBuilder builder, SemanticVersion version);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NuGet.Versioning.VersionRange : VersionRangeBase {
    [NullableAttribute("2")]
private FloatRange _floatRange;
    [NullableAttribute("2")]
private string _originalString;
    public static VersionRange All;
    private static NuGetVersion V0;
    [ObsoleteAttribute("Consider not using this VersionRange. The lack of a proper normalized version means that it is not round trippable in an assets file.")]
public static VersionRange AllFloating;
    public static VersionRange AllStable;
    [ObsoleteAttribute("Consider not using this VersionRange. The lack of a proper normalized version means that it is not round trippable in an assets file.")]
public static VersionRange AllStableFloating;
    public static VersionRange None;
    [MemberNotNullWhenAttribute("True", "MinVersion")]
[MemberNotNullWhenAttribute("True", "Float")]
[MemberNotNullWhenAttribute("True", "_floatRange")]
public bool IsFloating { get; }
    [NullableAttribute("2")]
public NuGetVersion MinVersion { get; }
    [NullableAttribute("2")]
public NuGetVersion MaxVersion { get; }
    [MemberNotNullWhenAttribute("True", "MinVersion")]
public bool HasLowerBound { get; }
    [MemberNotNullWhenAttribute("True", "MinVersion")]
public bool IsMinInclusive { get; }
    [MemberNotNullWhenAttribute("True", "MaxVersion")]
public bool HasUpperBound { get; }
    [MemberNotNullWhenAttribute("True", "MaxVersion")]
public bool IsMaxInclusive { get; }
    [MemberNotNullWhenAttribute("True", "MinVersion")]
[MemberNotNullWhenAttribute("True", "MaxVersion")]
public bool HasLowerAndUpperBounds { get; }
    [NullableAttribute("2")]
public FloatRange Float { get; }
    [NullableAttribute("2")]
public string OriginalString { get; }
    public VersionRange(NuGetVersion minVersion);
    public VersionRange(NuGetVersion minVersion, FloatRange floatRange);
    public VersionRange(VersionRange range, FloatRange floatRange);
    [NullableContextAttribute("2")]
public VersionRange(NuGetVersion minVersion, bool includeMinVersion, NuGetVersion maxVersion, bool includeMaxVersion, FloatRange floatRange, string originalString);
    private static VersionRange();
    [MemberNotNullWhenAttribute("True", "MinVersion")]
[MemberNotNullWhenAttribute("True", "Float")]
[MemberNotNullWhenAttribute("True", "_floatRange")]
public bool get_IsFloating();
    [NullableContextAttribute("2")]
public NuGetVersion get_MinVersion();
    [NullableContextAttribute("2")]
public NuGetVersion get_MaxVersion();
    [MemberNotNullWhenAttribute("True", "MinVersion")]
public bool get_HasLowerBound();
    [MemberNotNullWhenAttribute("True", "MinVersion")]
public bool get_IsMinInclusive();
    [MemberNotNullWhenAttribute("True", "MaxVersion")]
public bool get_HasUpperBound();
    [MemberNotNullWhenAttribute("True", "MaxVersion")]
public bool get_IsMaxInclusive();
    [MemberNotNullWhenAttribute("True", "MinVersion")]
[MemberNotNullWhenAttribute("True", "MaxVersion")]
public bool get_HasLowerAndUpperBounds();
    [NullableContextAttribute("2")]
public FloatRange get_Float();
    [NullableContextAttribute("2")]
public string get_OriginalString();
    public virtual string ToString();
    public virtual string ToNormalizedString();
    public virtual string ToLegacyString();
    public virtual string ToLegacyShortString();
    [NullableContextAttribute("2")]
public sealed virtual string ToString(string format, IFormatProvider formatProvider);
    [NullableContextAttribute("2")]
protected bool TryFormatter(string format, IFormatProvider formatProvider, String& formattedString);
    public string PrettyPrint();
    [NullableContextAttribute("2")]
public NuGetVersion FindBestMatch(IEnumerable`1<NuGetVersion> versions);
    public bool IsBetter(NuGetVersion current, NuGetVersion considering);
    public VersionRange ToNonSnapshotRange();
    private static NuGetVersion GetNonSnapshotVersion(NuGetVersion version);
    public virtual string ToShortString();
    [NullableContextAttribute("2")]
public bool Equals(VersionRange other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static VersionRange Parse(string value);
    public static VersionRange Parse(string value, bool allowFloating);
    public static bool TryParse(string value, VersionRange& versionRange);
    public static bool TryParse(string value, bool allowFloating, VersionRange& versionRange);
    public static VersionRange Combine(IEnumerable`1<NuGetVersion> versions);
    public static VersionRange Combine(IEnumerable`1<NuGetVersion> versions, IVersionComparer comparer);
    public static VersionRange Combine(IEnumerable`1<VersionRange> ranges);
    public static VersionRange Combine(IEnumerable`1<VersionRange> ranges, IVersionComparer comparer);
    public static VersionRange CommonSubSet(IEnumerable`1<VersionRange> ranges);
    public static VersionRange CommonSubSet(IEnumerable`1<VersionRange> ranges, IVersionComparer comparer);
    private static bool HasValidRange(VersionRange range);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public abstract class NuGet.Versioning.VersionRangeBase : object {
    private bool _includeMinVersion;
    private bool _includeMaxVersion;
    private NuGetVersion _minVersion;
    private NuGetVersion _maxVersion;
    [MemberNotNullWhenAttribute("True", "MinVersion")]
public bool HasLowerBound { get; }
    [MemberNotNullWhenAttribute("True", "MaxVersion")]
public bool HasUpperBound { get; }
    [MemberNotNullWhenAttribute("True", "MinVersion")]
[MemberNotNullWhenAttribute("True", "MaxVersion")]
public bool HasLowerAndUpperBounds { get; }
    [MemberNotNullWhenAttribute("True", "MaxVersion")]
public bool IsMinInclusive { get; }
    [MemberNotNullWhenAttribute("True", "MaxVersion")]
public bool IsMaxInclusive { get; }
    public NuGetVersion MaxVersion { get; }
    public NuGetVersion MinVersion { get; }
    protected bool HasPrereleaseBounds { get; }
    public VersionRangeBase(NuGetVersion minVersion, bool includeMinVersion, NuGetVersion maxVersion, bool includeMaxVersion);
    [MemberNotNullWhenAttribute("True", "MinVersion")]
public bool get_HasLowerBound();
    [MemberNotNullWhenAttribute("True", "MaxVersion")]
public bool get_HasUpperBound();
    [MemberNotNullWhenAttribute("True", "MinVersion")]
[MemberNotNullWhenAttribute("True", "MaxVersion")]
public bool get_HasLowerAndUpperBounds();
    [MemberNotNullWhenAttribute("True", "MaxVersion")]
public bool get_IsMinInclusive();
    [MemberNotNullWhenAttribute("True", "MaxVersion")]
public bool get_IsMaxInclusive();
    public NuGetVersion get_MaxVersion();
    public NuGetVersion get_MinVersion();
    [NullableContextAttribute("1")]
public bool Satisfies(NuGetVersion version);
    [NullableContextAttribute("1")]
public bool Satisfies(NuGetVersion version, VersionComparison versionComparison);
    [NullableContextAttribute("1")]
public bool Satisfies(NuGetVersion version, IVersionComparer comparer);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual bool Equals(VersionRangeBase other);
    [NullableContextAttribute("1")]
public bool Equals(VersionRangeBase other, IVersionRangeComparer comparer);
    public bool Equals(VersionRangeBase other, VersionComparison versionComparison);
    [NullableContextAttribute("1")]
public bool Equals(VersionRangeBase other, IVersionComparer versionComparer);
    public bool IsSubSetOrEqualTo(VersionRangeBase possibleSuperSet);
    [NullableContextAttribute("1")]
public bool IsSubSetOrEqualTo(VersionRangeBase possibleSuperSet, IVersionComparer comparer);
    protected bool get_HasPrereleaseBounds();
    private static Nullable`1<bool> IsPrerelease(SemanticVersion version);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NuGet.Versioning.VersionRangeComparer : object {
    private IVersionComparer _versionComparer;
    [CompilerGeneratedAttribute]
private static IVersionRangeComparer <Default>k__BackingField;
    [CompilerGeneratedAttribute]
private static IVersionRangeComparer <VersionRelease>k__BackingField;
    public static IVersionRangeComparer Default { get; }
    public static IVersionRangeComparer VersionRelease { get; }
    public VersionRangeComparer(VersionComparison versionComparison);
    public VersionRangeComparer(IVersionComparer versionComparer);
    private static VersionRangeComparer();
    [CompilerGeneratedAttribute]
public static IVersionRangeComparer get_Default();
    [CompilerGeneratedAttribute]
public static IVersionRangeComparer get_VersionRelease();
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(VersionRangeBase x, VersionRangeBase y);
    public sealed virtual int GetHashCode(VersionRangeBase obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NuGet.Versioning.VersionRangeFormatter : object {
    private static string ZeroN;
    private static VersionFormatter VersionFormatter;
    public static VersionRangeFormatter Instance;
    private static VersionRangeFormatter();
    [NullableContextAttribute("2")]
public sealed virtual string Format(string format, object arg, IFormatProvider formatProvider);
    [NullableContextAttribute("2")]
public sealed virtual object GetFormat(Type formatType);
    private string Format(char c, VersionRange range);
    private string GetShortString(VersionRange range);
    private string GetNormalizedString(VersionRange range);
    private string GetToString(VersionRange range);
    private string GetLegacyShortString(VersionRangeBase range);
    private string GetLegacyString(VersionRangeBase range);
    private string PrettyPrint(VersionRange range, bool useParentheses);
    private void PrettyPrintBound(StringBuilder sb, NuGetVersion version, bool inclusive, string boundChar);
}
[ExtensionAttribute]
internal static class System.Collections.Generic.DeconstructionExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[DebuggerStepThroughAttribute]
public static void Deconstruct(KeyValuePair`2<TKey, TValue> pair, TKey& key, TValue& value);
}
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.AllowNullAttribute : Attribute {
}
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.DisallowNullAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ParameterValue>k__BackingField;
    public bool ParameterValue { get; }
    public DoesNotReturnIfAttribute(bool parameterValue);
    [CompilerGeneratedAttribute]
public bool get_ParameterValue();
}
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.MaybeNullAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public MaybeNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("192")]
internal class System.Diagnostics.CodeAnalysis.MemberNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private String[] <Members>k__BackingField;
    public String[] Members { get; }
    public MemberNotNullAttribute(string member);
    public MemberNotNullAttribute(String[] members);
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("192")]
internal class System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Members>k__BackingField;
    public bool ReturnValue { get; }
    public String[] Members { get; }
    public MemberNotNullWhenAttribute(bool returnValue, string member);
    public MemberNotNullWhenAttribute(bool returnValue, String[] members);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.NotNullAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("10368")]
internal class System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    public string ParameterName { get; }
    public NotNullIfNotNullAttribute(string parameterName);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.NotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public NotNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsByRefLikeAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
