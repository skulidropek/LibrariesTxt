public class Cake.Cli.BuildScriptHost : BuildScriptHost`1<ICakeContext> {
    public BuildScriptHost(ICakeEngine engine, IExecutionStrategy executionStrategy, ICakeContext context, ICakeReportPrinter reportPrinter, ICakeLog log);
}
public class Cake.Cli.BuildScriptHost`1 : ScriptHost {
    private ICakeReportPrinter _reportPrinter;
    private ICakeLog _log;
    private IExecutionStrategy _executionStrategy;
    private TContext _context;
    public BuildScriptHost`1(ICakeEngine engine, IExecutionStrategy executionStrategy, TContext context, ICakeReportPrinter reportPrinter, ICakeLog log);
    [AsyncStateMachineAttribute("Cake.Cli.BuildScriptHost`1/<RunTargetAsync>d__5")]
public virtual Task`1<CakeReport> RunTargetAsync(string target);
}
public class Cake.Cli.DescriptionScriptHost : ScriptHost {
    private IConsole _console;
    private Dictionary`2<string, string> _descriptions;
    public DescriptionScriptHost(ICakeEngine engine, ICakeContext context, IConsole console);
    public virtual Task`1<CakeReport> RunTargetAsync(string target);
}
public class Cake.Cli.DirectoryPathConverter : TypeConverter {
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
}
internal class Cake.Cli.DryRunExecutionStrategy : object {
    private ICakeLog _log;
    private int _counter;
    public DryRunExecutionStrategy(ICakeLog log);
    public sealed virtual void PerformSetup(Action`1<ISetupContext> action, ISetupContext context);
    public sealed virtual void PerformTeardown(Action`1<ITeardownContext> action, ITeardownContext teardownContext);
    public sealed virtual Task ExecuteAsync(CakeTask task, ICakeContext context);
    public sealed virtual void Skip(CakeTask task, CakeTaskCriteria critera);
    public sealed virtual Task ReportErrorsAsync(Func`2<Exception, Task> action, Exception exception);
    public sealed virtual Task HandleErrorsAsync(Func`3<Exception, ICakeContext, Task> action, Exception exception, ICakeContext context);
    public sealed virtual Task InvokeFinallyAsync(Func`1<Task> action);
    public sealed virtual void PerformTaskSetup(Action`1<ITaskSetupContext> action, ITaskSetupContext taskSetupContext);
    public sealed virtual void PerformTaskTeardown(Action`1<ITaskTeardownContext> action, ITaskTeardownContext taskTeardownContext);
}
public class Cake.Cli.DryRunScriptHost : DryRunScriptHost`1<ICakeContext> {
    public DryRunScriptHost(ICakeEngine engine, ICakeContext context, ICakeLog log);
}
public class Cake.Cli.DryRunScriptHost`1 : ScriptHost {
    private ICakeLog _log;
    public DryRunScriptHost`1(ICakeEngine engine, TContext context, ICakeLog log);
    [AsyncStateMachineAttribute("Cake.Cli.DryRunScriptHost`1/<RunTargetAsync>d__2")]
public virtual Task`1<CakeReport> RunTargetAsync(string target);
}
[ExtensionAttribute]
public static class Cake.Cli.ExceptionLogger : object {
    [ExtensionAttribute]
public static int LogException(ICakeLog log, T ex);
}
public class Cake.Cli.FilePathConverter : TypeConverter {
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
}
public interface Cake.Cli.ICakeInfoFeature {
    public abstract virtual void Run(IConsole console);
}
public interface Cake.Cli.ICakeVersionFeature {
    public abstract virtual void Run(IConsole console);
}
public class Cake.Cli.InfoFeature : object {
    private IVersionResolver _resolver;
    public InfoFeature(IVersionResolver resolver);
    public sealed virtual void Run(IConsole console);
}
public interface Cake.Cli.IVersionResolver {
    public abstract virtual string GetVersion();
    public abstract virtual string GetProductVersion();
}
public class Cake.Cli.TreeScriptHost : ScriptHost {
    private static int _maxDepth;
    private static string _cross;
    private static string _corner;
    private static string _vertical;
    private IConsole _console;
    public TreeScriptHost(ICakeEngine engine, ICakeContext context, IConsole console);
    public virtual Task`1<CakeReport> RunTargetAsync(string target);
    private List`1<ICakeTaskInfo> GetTopLevelTasks();
    private void PrintTask(ICakeTaskInfo task, string indent, bool isLast, int depth);
    private void PrintName(ICakeTaskInfo task, int depth);
}
public class Cake.Cli.VerbosityConverter : TypeConverter {
    private Dictionary`2<string, Verbosity> _lookup;
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
}
public class Cake.Cli.VersionFeature : object {
    private IVersionResolver _resolver;
    public VersionFeature(IVersionResolver resolver);
    public sealed virtual void Run(IConsole console);
}
public class Cake.Cli.VersionResolver : object {
    public sealed virtual string GetVersion();
    public sealed virtual string GetProductVersion();
}
