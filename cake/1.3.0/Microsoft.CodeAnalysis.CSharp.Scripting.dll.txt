public static class Microsoft.CodeAnalysis.CSharp.Scripting.CSharpScript : object {
    public static Script`1<T> Create(string code, ScriptOptions options, Type globalsType, InteractiveAssemblyLoader assemblyLoader);
    public static Script`1<T> Create(Stream code, ScriptOptions options, Type globalsType, InteractiveAssemblyLoader assemblyLoader);
    public static Script`1<object> Create(string code, ScriptOptions options, Type globalsType, InteractiveAssemblyLoader assemblyLoader);
    public static Script`1<object> Create(Stream code, ScriptOptions options, Type globalsType, InteractiveAssemblyLoader assemblyLoader);
    public static Task`1<ScriptState`1<T>> RunAsync(string code, ScriptOptions options, object globals, Type globalsType, CancellationToken cancellationToken);
    public static Task`1<ScriptState`1<object>> RunAsync(string code, ScriptOptions options, object globals, Type globalsType, CancellationToken cancellationToken);
    public static Task`1<T> EvaluateAsync(string code, ScriptOptions options, object globals, Type globalsType, CancellationToken cancellationToken);
    public static Task`1<object> EvaluateAsync(string code, ScriptOptions options, object globals, Type globalsType, CancellationToken cancellationToken);
}
internal class Microsoft.CodeAnalysis.CSharp.Scripting.CSharpScriptCompiler : ScriptCompiler {
    public static ScriptCompiler Instance;
    internal static CSharpParseOptions DefaultParseOptions;
    public DiagnosticFormatter DiagnosticFormatter { get; }
    public StringComparer IdentifierComparer { get; }
    private static CSharpScriptCompiler();
    public virtual DiagnosticFormatter get_DiagnosticFormatter();
    public virtual StringComparer get_IdentifierComparer();
    public virtual bool IsCompleteSubmission(SyntaxTree tree);
    public virtual SyntaxTree ParseSubmission(SourceText text, ParseOptions parseOptions, CancellationToken cancellationToken);
    public virtual Compilation CreateSubmission(Script script);
    internal static CSharpCompilationOptions WithTopLevelBinderFlags(CSharpCompilationOptions options);
}
internal static class Microsoft.CodeAnalysis.CSharp.Scripting.CSharpScriptingResources : object {
    private static ResourceManager s_resourceManager;
    [CompilerGeneratedAttribute]
private static CultureInfo <Culture>k__BackingField;
    internal static ResourceManager ResourceManager { get; }
    internal static CultureInfo Culture { get; internal set; }
    internal static string LogoLine1 { get; }
    internal static string LogoLine2 { get; }
    internal static string InteractiveHelp { get; }
    internal static ResourceManager get_ResourceManager();
    [CompilerGeneratedAttribute]
internal static CultureInfo get_Culture();
    [CompilerGeneratedAttribute]
internal static void set_Culture(CultureInfo value);
    internal static string GetResourceString(string resourceKey, string defaultValue);
    internal static string get_LogoLine1();
    internal static string get_LogoLine2();
    internal static string get_InteractiveHelp();
}
internal class Microsoft.CodeAnalysis.CSharp.Scripting.Hosting.CSharpInteractiveCompiler : CSharpCompiler {
    internal Type Type { get; }
    internal CSharpInteractiveCompiler(string responseFile, BuildPaths buildPaths, String[] args, IAnalyzerAssemblyLoader analyzerLoader);
    internal virtual Type get_Type();
    internal virtual MetadataReferenceResolver GetCommandLineMetadataReferenceResolver(TouchedFileLogger loggerOpt);
    public virtual void PrintLogo(TextWriter consoleOutput);
    public virtual void PrintHelp(TextWriter consoleOutput);
}
internal class Microsoft.CodeAnalysis.CSharp.Scripting.Hosting.CSharpMemberFilter : CommonMemberFilter {
    protected virtual bool IsGeneratedMemberName(string name);
}
public class Microsoft.CodeAnalysis.CSharp.Scripting.Hosting.CSharpObjectFormatter : ObjectFormatter {
    [CompilerGeneratedAttribute]
private static CSharpObjectFormatter <Instance>k__BackingField;
    private static ObjectFormatter s_impl;
    public static CSharpObjectFormatter Instance { get; }
    private static CSharpObjectFormatter();
    [CompilerGeneratedAttribute]
public static CSharpObjectFormatter get_Instance();
    public virtual string FormatObject(object obj, PrintOptions options);
    public virtual string FormatException(Exception e);
}
internal class Microsoft.CodeAnalysis.CSharp.Scripting.Hosting.CSharpObjectFormatterImpl : CommonObjectFormatter {
    [CompilerGeneratedAttribute]
private CommonTypeNameFormatter <TypeNameFormatter>k__BackingField;
    [CompilerGeneratedAttribute]
private CommonPrimitiveFormatter <PrimitiveFormatter>k__BackingField;
    [CompilerGeneratedAttribute]
private MemberFilter <Filter>k__BackingField;
    protected CommonTypeNameFormatter TypeNameFormatter { get; }
    protected CommonPrimitiveFormatter PrimitiveFormatter { get; }
    protected MemberFilter Filter { get; }
    [CompilerGeneratedAttribute]
protected virtual CommonTypeNameFormatter get_TypeNameFormatter();
    [CompilerGeneratedAttribute]
protected virtual CommonPrimitiveFormatter get_PrimitiveFormatter();
    [CompilerGeneratedAttribute]
protected virtual MemberFilter get_Filter();
    protected virtual string FormatRefKind(ParameterInfo parameter);
}
internal class Microsoft.CodeAnalysis.CSharp.Scripting.Hosting.CSharpPrimitiveFormatter : CommonPrimitiveFormatter {
    protected string NullLiteral { get; }
    protected virtual string get_NullLiteral();
    protected virtual string FormatLiteral(bool value);
    protected virtual string FormatLiteral(string value, bool useQuotes, bool escapeNonPrintable, int numberRadix);
    protected virtual string FormatLiteral(char c, bool useQuotes, bool escapeNonPrintable, bool includeCodePoints, int numberRadix);
    protected virtual string FormatLiteral(sbyte value, int numberRadix, CultureInfo cultureInfo);
    protected virtual string FormatLiteral(byte value, int numberRadix, CultureInfo cultureInfo);
    protected virtual string FormatLiteral(short value, int numberRadix, CultureInfo cultureInfo);
    protected virtual string FormatLiteral(ushort value, int numberRadix, CultureInfo cultureInfo);
    protected virtual string FormatLiteral(int value, int numberRadix, CultureInfo cultureInfo);
    protected virtual string FormatLiteral(UInt32 value, int numberRadix, CultureInfo cultureInfo);
    protected virtual string FormatLiteral(long value, int numberRadix, CultureInfo cultureInfo);
    protected virtual string FormatLiteral(ulong value, int numberRadix, CultureInfo cultureInfo);
    protected virtual string FormatLiteral(double value, CultureInfo cultureInfo);
    protected virtual string FormatLiteral(float value, CultureInfo cultureInfo);
    protected virtual string FormatLiteral(decimal value, CultureInfo cultureInfo);
    protected virtual string FormatLiteral(DateTime value, CultureInfo cultureInfo);
}
internal class Microsoft.CodeAnalysis.CSharp.Scripting.Hosting.CSharpReplServiceProvider : ReplServiceProvider {
    [CompilerGeneratedAttribute]
private ObjectFormatter <ObjectFormatter>k__BackingField;
    public ObjectFormatter ObjectFormatter { get; }
    public CommandLineParser CommandLineParser { get; }
    public DiagnosticFormatter DiagnosticFormatter { get; }
    public string Logo { get; }
    [CompilerGeneratedAttribute]
public virtual ObjectFormatter get_ObjectFormatter();
    public virtual CommandLineParser get_CommandLineParser();
    public virtual DiagnosticFormatter get_DiagnosticFormatter();
    public virtual string get_Logo();
    public virtual Script`1<T> CreateScript(string code, ScriptOptions options, Type globalsTypeOpt, InteractiveAssemblyLoader assemblyLoader);
}
internal class Microsoft.CodeAnalysis.CSharp.Scripting.Hosting.CSharpTypeNameFormatter : CommonTypeNameFormatter {
    [CompilerGeneratedAttribute]
private CommonPrimitiveFormatter <PrimitiveFormatter>k__BackingField;
    protected CommonPrimitiveFormatter PrimitiveFormatter { get; }
    protected string GenericParameterOpening { get; }
    protected string GenericParameterClosing { get; }
    protected string ArrayOpening { get; }
    protected string ArrayClosing { get; }
    public CSharpTypeNameFormatter(CommonPrimitiveFormatter primitiveFormatter);
    [CompilerGeneratedAttribute]
protected virtual CommonPrimitiveFormatter get_PrimitiveFormatter();
    protected virtual string get_GenericParameterOpening();
    protected virtual string get_GenericParameterClosing();
    protected virtual string get_ArrayOpening();
    protected virtual string get_ArrayClosing();
    protected virtual string GetPrimitiveTypeName(SpecialType type);
    public virtual string FormatTypeName(Type type, CommonTypeNameFormatterOptions options);
}
[ExtensionAttribute]
public static class Microsoft.CodeAnalysis.CSharp.Scripting.ScriptOptionsExtensions : object {
    [ExtensionAttribute]
public static ScriptOptions WithLanguageVersion(ScriptOptions options, LanguageVersion languageVersion);
}
