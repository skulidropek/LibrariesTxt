internal static class NuGet.Shared.EncodingUtility : object {
    internal static string ToHex(Byte[] bytes, int length);
    private static char ToHexChar(int input);
}
[ExtensionAttribute]
internal static class NuGet.Shared.EqualityUtility : object {
    [ExtensionAttribute]
internal static bool OrderedEquals(IEnumerable`1<TSource> self, IEnumerable`1<TSource> other, Func`2<TSource, TKey> keySelector, IComparer`1<TKey> orderComparer, IEqualityComparer`1<TSource> sequenceComparer);
    [ExtensionAttribute]
internal static bool SequenceEqualWithNullCheck(IEnumerable`1<T> self, IEnumerable`1<T> other, IEqualityComparer`1<T> comparer);
    [ExtensionAttribute]
internal static bool SetEqualsWithNullCheck(ISet`1<T> self, ISet`1<T> other, IEqualityComparer`1<T> comparer);
    internal static bool DictionaryEquals(IDictionary`2<TKey, TValue> self, IDictionary`2<TKey, TValue> other, Func`3<TValue, TValue, bool> compareValues);
    internal static bool DictionaryOfSequenceEquals(IDictionary`2<TKey, IEnumerable`1<TValue>> self, IDictionary`2<TKey, IEnumerable`1<TValue>> other);
    internal static bool EqualsWithNullCheck(T self, T other);
    private static bool TryIdentityEquals(T self, T other, Boolean& equals);
}
[ExtensionAttribute]
internal static class NuGet.Shared.Extensions : object {
    [ExtensionAttribute]
public static List`1<T> AsList(IEnumerable`1<T> enumerable);
    [ExtensionAttribute]
public static HashSet`1<T> AsHashSet(ISet`1<T> enumerable, IEqualityComparer`1<T> comparer);
    [ExtensionAttribute]
public static void ForEach(IEnumerable`1<T> enumeration, Action`1<T> action);
}
internal class NuGet.Shared.HashCodeCombiner : ValueType {
    private static long Seed;
    private bool _initialized;
    private long _combinedHash;
    internal int CombinedHash { get; }
    internal int get_CombinedHash();
    private void AddHashCode(int i);
    internal void AddObject(int i);
    internal void AddObject(TValue o, IEqualityComparer`1<TValue> comparer);
    internal void AddObject(T o);
    internal void AddStringIgnoreCase(string s);
    internal void AddSequence(IEnumerable`1<T> sequence);
    internal void AddSequence(T[] array);
    internal void AddSequence(IList`1<T> list);
    internal void AddSequence(IReadOnlyList`1<T> list);
    internal void AddDictionary(IEnumerable`1<KeyValuePair`2<TKey, TValue>> dictionary);
    internal static int GetHashCode(T1 o1, T2 o2);
    internal static int GetHashCode(T1 o1, T2 o2, T3 o3);
    private void CheckInitialized();
}
internal static class NuGet.Shared.XmlUtility : object {
    internal static XDocument Load(string inputUri);
    internal static XDocument Load(string inputUri, LoadOptions options);
    internal static XDocument Load(Stream input);
    internal static XDocument Load(Stream input, LoadOptions options);
    internal static string GetEncodedXMLName(string name);
    internal static XmlReaderSettings GetXmlReaderSettings(LoadOptions options);
}
public class NuGet.Versioning.FloatRange : object {
    private NuGetVersion _minVersion;
    private NuGetVersionFloatBehavior _floatBehavior;
    private string _releasePrefix;
    public bool HasMinVersion { get; }
    public NuGetVersion MinVersion { get; }
    public NuGetVersionFloatBehavior FloatBehavior { get; }
    public string OriginalReleasePrefix { get; }
    public FloatRange(NuGetVersionFloatBehavior floatBehavior);
    public FloatRange(NuGetVersionFloatBehavior floatBehavior, NuGetVersion minVersion);
    public FloatRange(NuGetVersionFloatBehavior floatBehavior, NuGetVersion minVersion, string releasePrefix);
    public bool get_HasMinVersion();
    public NuGetVersion get_MinVersion();
    public NuGetVersionFloatBehavior get_FloatBehavior();
    public string get_OriginalReleasePrefix();
    public bool Satisfies(NuGetVersion version);
    public static FloatRange Parse(string versionString);
    public static bool TryParse(string versionString, FloatRange& range);
    private static int CalculateVersionParts(string line);
    public virtual string ToString();
    public sealed virtual bool Equals(FloatRange other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public interface NuGet.Versioning.INuGetVersionable {
    public NuGetVersion Version { get; }
    public abstract virtual NuGetVersion get_Version();
}
public interface NuGet.Versioning.IVersionComparer {
}
public interface NuGet.Versioning.IVersionRangeComparer {
}
public class NuGet.Versioning.NuGetVersion : SemanticVersion {
    private string _originalString;
    [CompilerGeneratedAttribute]
private Version <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Revision>k__BackingField;
    public Version Version { get; }
    public bool IsLegacyVersion { get; }
    public int Revision { get; }
    public bool IsSemVer2 { get; }
    public string OriginalVersion { get; }
    public NuGetVersion(string version);
    public NuGetVersion(NuGetVersion version);
    public NuGetVersion(Version version, string releaseLabel, string metadata);
    public NuGetVersion(int major, int minor, int patch);
    public NuGetVersion(int major, int minor, int patch, string releaseLabel);
    public NuGetVersion(int major, int minor, int patch, string releaseLabel, string metadata);
    public NuGetVersion(int major, int minor, int patch, IEnumerable`1<string> releaseLabels, string metadata);
    public NuGetVersion(int major, int minor, int patch, int revision);
    public NuGetVersion(int major, int minor, int patch, int revision, string releaseLabel, string metadata);
    public NuGetVersion(int major, int minor, int patch, int revision, IEnumerable`1<string> releaseLabels, string metadata);
    public NuGetVersion(Version version, IEnumerable`1<string> releaseLabels, string metadata, string originalVersion);
    public virtual string ToString();
    [CompilerGeneratedAttribute]
public Version get_Version();
    public virtual bool get_IsLegacyVersion();
    [CompilerGeneratedAttribute]
public int get_Revision();
    public bool get_IsSemVer2();
    public string get_OriginalVersion();
    public static NuGetVersion Parse(string value);
    public static bool TryParse(string value, NuGetVersion& version);
    public static bool TryParseStrict(string value, NuGetVersion& version);
    private static string GetLegacyString(Version version, IEnumerable`1<string> releaseLabels, string metadata);
    private static IEnumerable`1<string> ParseReleaseLabels(string releaseLabels);
}
public enum NuGet.Versioning.NuGetVersionFloatBehavior : Enum {
    public int value__;
    public static NuGetVersionFloatBehavior None;
    public static NuGetVersionFloatBehavior Prerelease;
    public static NuGetVersionFloatBehavior Revision;
    public static NuGetVersionFloatBehavior Patch;
    public static NuGetVersionFloatBehavior Minor;
    public static NuGetVersionFloatBehavior Major;
    public static NuGetVersionFloatBehavior AbsoluteLatest;
    public static NuGetVersionFloatBehavior PrereleaseRevision;
    public static NuGetVersionFloatBehavior PrereleasePatch;
    public static NuGetVersionFloatBehavior PrereleaseMinor;
    public static NuGetVersionFloatBehavior PrereleaseMajor;
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class NuGet.Versioning.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string Argument_Cannot_Be_Null_Or_Empty { get; }
    internal static string Invalidvalue { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_Argument_Cannot_Be_Null_Or_Empty();
    internal static string get_Invalidvalue();
}
[TypeConverterAttribute("NuGet.Versioning.SemanticVersionConverter")]
public class NuGet.Versioning.SemanticVersion : object {
    internal String[] _releaseLabels;
    internal string _metadata;
    [CompilerGeneratedAttribute]
private int <Major>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Minor>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Patch>k__BackingField;
    internal static String[] EmptyReleaseLabels;
    public int Major { get; }
    public int Minor { get; }
    public int Patch { get; }
    public IEnumerable`1<string> ReleaseLabels { get; }
    public string Release { get; }
    public bool IsPrerelease { get; }
    public bool HasMetadata { get; }
    public string Metadata { get; }
    public SemanticVersion(SemanticVersion version);
    public SemanticVersion(int major, int minor, int patch);
    public SemanticVersion(int major, int minor, int patch, string releaseLabel);
    public SemanticVersion(int major, int minor, int patch, string releaseLabel, string metadata);
    public SemanticVersion(int major, int minor, int patch, IEnumerable`1<string> releaseLabels, string metadata);
    protected SemanticVersion(Version version, string releaseLabel, string metadata);
    protected SemanticVersion(int major, int minor, int patch, int revision, string releaseLabel, string metadata);
    protected SemanticVersion(int major, int minor, int patch, int revision, IEnumerable`1<string> releaseLabels, string metadata);
    protected SemanticVersion(Version version, IEnumerable`1<string> releaseLabels, string metadata);
    private static SemanticVersion();
    [CompilerGeneratedAttribute]
public int get_Major();
    [CompilerGeneratedAttribute]
public int get_Minor();
    [CompilerGeneratedAttribute]
public int get_Patch();
    public IEnumerable`1<string> get_ReleaseLabels();
    public string get_Release();
    public virtual bool get_IsPrerelease();
    public virtual bool get_HasMetadata();
    public virtual string get_Metadata();
    public virtual string ToNormalizedString();
    public virtual string ToFullString();
    public virtual string ToString();
    public virtual string ToString(string format, IFormatProvider formatProvider);
    protected bool TryFormatter(string format, IFormatProvider formatProvider, String& formattedString);
    public virtual int GetHashCode();
    public virtual int CompareTo(object obj);
    public virtual int CompareTo(SemanticVersion other);
    public virtual bool Equals(object obj);
    public virtual bool Equals(SemanticVersion other);
    public virtual bool Equals(SemanticVersion other, VersionComparison versionComparison);
    public virtual int CompareTo(SemanticVersion other, VersionComparison versionComparison);
    public static bool op_Equality(SemanticVersion version1, SemanticVersion version2);
    public static bool op_Inequality(SemanticVersion version1, SemanticVersion version2);
    public static bool op_LessThan(SemanticVersion version1, SemanticVersion version2);
    public static bool op_LessThanOrEqual(SemanticVersion version1, SemanticVersion version2);
    public static bool op_GreaterThan(SemanticVersion version1, SemanticVersion version2);
    public static bool op_GreaterThanOrEqual(SemanticVersion version1, SemanticVersion version2);
    private static int Compare(SemanticVersion version1, SemanticVersion version2);
    public static SemanticVersion Parse(string value);
    public static bool TryParse(string value, SemanticVersion& version);
    internal static bool IsLetterOrDigitOrDash(char c);
    internal static bool IsDigit(char c);
    internal static bool IsValid(string s, bool allowLeadingZeros);
    internal static bool IsValidPart(string s, bool allowLeadingZeros);
    internal static Tuple`3<string, String[], string> ParseSections(string value);
    internal static Version NormalizeVersionValue(Version version);
    private static String[] ParseReleaseLabels(string releaseLabels);
}
public class NuGet.Versioning.SemanticVersionConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
public class NuGet.Versioning.VersionComparer : object {
    private VersionComparison _mode;
    public static IVersionComparer Default;
    public static IVersionComparer Version;
    public static IVersionComparer VersionRelease;
    public static IVersionComparer VersionReleaseMetadata;
    public VersionComparer(VersionComparison versionComparison);
    private static VersionComparer();
    public sealed virtual bool Equals(SemanticVersion x, SemanticVersion y);
    public static int Compare(SemanticVersion version1, SemanticVersion version2, VersionComparison versionComparison);
    public sealed virtual int GetHashCode(SemanticVersion version);
    public sealed virtual int Compare(SemanticVersion x, SemanticVersion y);
    private static int CompareLegacyVersion(NuGetVersion legacyX, NuGetVersion legacyY);
    private static int CompareReleaseLabels(String[] version1, String[] version2);
    private static int CompareRelease(string version1, string version2);
    private static String[] GetReleaseLabelsOrNull(SemanticVersion version);
    private static bool AreReleaseLabelsEqual(SemanticVersion x, SemanticVersion y);
    private static int GetRevisionOrZero(SemanticVersion version);
}
public enum NuGet.Versioning.VersionComparison : Enum {
    public int value__;
    public static VersionComparison Default;
    public static VersionComparison Version;
    public static VersionComparison VersionRelease;
    public static VersionComparison VersionReleaseMetadata;
}
[ExtensionAttribute]
public static class NuGet.Versioning.VersionExtensions : object {
    [ExtensionAttribute]
public static T FindBestMatch(IEnumerable`1<T> items, VersionRange ideal, Func`2<T, NuGetVersion> selector);
    [ExtensionAttribute]
public static INuGetVersionable FindBestMatch(IEnumerable`1<INuGetVersionable> items, VersionRange ideal);
}
public class NuGet.Versioning.VersionFormatter : object {
    public static VersionFormatter Instance;
    private static VersionFormatter();
    public sealed virtual string Format(string format, object arg, IFormatProvider formatProvider);
    public sealed virtual object GetFormat(Type formatType);
    private static string GetNormalizedString(SemanticVersion version);
    private static string GetFullString(SemanticVersion version);
    private static string Format(char c, SemanticVersion version);
    private static string FormatVersion(SemanticVersion version);
}
public class NuGet.Versioning.VersionRange : VersionRangeBase {
    private FloatRange _floatRange;
    private string _originalString;
    public static VersionRange All;
    [ObsoleteAttribute("Consider not using this VersionRange. The lack of a proper normalized version means that it is not round trippable in an assets file.")]
public static VersionRange AllFloating;
    public static VersionRange AllStable;
    [ObsoleteAttribute("Consider not using this VersionRange. The lack of a proper normalized version means that it is not round trippable in an assets file.")]
public static VersionRange AllStableFloating;
    public static VersionRange None;
    public bool IsFloating { get; }
    public FloatRange Float { get; }
    public string OriginalString { get; }
    public VersionRange(NuGetVersion minVersion);
    public VersionRange(NuGetVersion minVersion, FloatRange floatRange);
    public VersionRange(VersionRange range, FloatRange floatRange);
    public VersionRange(NuGetVersion minVersion, bool includeMinVersion, NuGetVersion maxVersion, bool includeMaxVersion, FloatRange floatRange, string originalString);
    private static VersionRange();
    public bool get_IsFloating();
    public FloatRange get_Float();
    public string get_OriginalString();
    public virtual string ToString();
    public virtual string ToNormalizedString();
    public virtual string ToLegacyString();
    public virtual string ToLegacyShortString();
    public sealed virtual string ToString(string format, IFormatProvider formatProvider);
    protected bool TryFormatter(string format, IFormatProvider formatProvider, String& formattedString);
    public string PrettyPrint();
    public NuGetVersion FindBestMatch(IEnumerable`1<NuGetVersion> versions);
    public bool IsBetter(NuGetVersion current, NuGetVersion considering);
    public VersionRange ToNonSnapshotRange();
    private static NuGetVersion GetNonSnapshotVersion(NuGetVersion version);
    public virtual string ToShortString();
    public bool Equals(VersionRange other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static VersionRange Parse(string value);
    public static VersionRange Parse(string value, bool allowFloating);
    public static bool TryParse(string value, VersionRange& versionRange);
    public static bool TryParse(string value, bool allowFloating, VersionRange& versionRange);
    public static VersionRange Combine(IEnumerable`1<NuGetVersion> versions);
    public static VersionRange Combine(IEnumerable`1<NuGetVersion> versions, IVersionComparer comparer);
    public static VersionRange Combine(IEnumerable`1<VersionRange> ranges);
    public static VersionRange Combine(IEnumerable`1<VersionRange> ranges, IVersionComparer comparer);
    public static VersionRange CommonSubSet(IEnumerable`1<VersionRange> ranges);
    public static VersionRange CommonSubSet(IEnumerable`1<VersionRange> ranges, IVersionComparer comparer);
    private static bool HasValidRange(VersionRange range);
}
public abstract class NuGet.Versioning.VersionRangeBase : object {
    private bool _includeMinVersion;
    private bool _includeMaxVersion;
    private NuGetVersion _minVersion;
    private NuGetVersion _maxVersion;
    public bool HasLowerBound { get; }
    public bool HasUpperBound { get; }
    public bool HasLowerAndUpperBounds { get; }
    public bool IsMinInclusive { get; }
    public bool IsMaxInclusive { get; }
    public NuGetVersion MaxVersion { get; }
    public NuGetVersion MinVersion { get; }
    protected bool HasPrereleaseBounds { get; }
    public VersionRangeBase(NuGetVersion minVersion, bool includeMinVersion, NuGetVersion maxVersion, bool includeMaxVersion);
    public bool get_HasLowerBound();
    public bool get_HasUpperBound();
    public bool get_HasLowerAndUpperBounds();
    public bool get_IsMinInclusive();
    public bool get_IsMaxInclusive();
    public NuGetVersion get_MaxVersion();
    public NuGetVersion get_MinVersion();
    public bool Satisfies(NuGetVersion version);
    public bool Satisfies(NuGetVersion version, VersionComparison versionComparison);
    public bool Satisfies(NuGetVersion version, IVersionComparer comparer);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual bool Equals(VersionRangeBase other);
    public bool Equals(VersionRangeBase other, IVersionRangeComparer comparer);
    public bool Equals(VersionRangeBase other, VersionComparison versionComparison);
    public bool Equals(VersionRangeBase other, IVersionComparer versionComparer);
    public bool IsSubSetOrEqualTo(VersionRangeBase possibleSuperSet);
    public bool IsSubSetOrEqualTo(VersionRangeBase possibleSuperSet, IVersionComparer comparer);
    protected bool get_HasPrereleaseBounds();
    private static Nullable`1<bool> IsPrerelease(SemanticVersion version);
}
public class NuGet.Versioning.VersionRangeComparer : object {
    private IVersionComparer _versionComparer;
    [CompilerGeneratedAttribute]
private static IVersionRangeComparer <Default>k__BackingField;
    [CompilerGeneratedAttribute]
private static IVersionRangeComparer <VersionRelease>k__BackingField;
    public static IVersionRangeComparer Default { get; }
    public static IVersionRangeComparer VersionRelease { get; }
    public VersionRangeComparer(VersionComparison versionComparison);
    public VersionRangeComparer(IVersionComparer versionComparer);
    private static VersionRangeComparer();
    [CompilerGeneratedAttribute]
public static IVersionRangeComparer get_Default();
    [CompilerGeneratedAttribute]
public static IVersionRangeComparer get_VersionRelease();
    public sealed virtual bool Equals(VersionRangeBase x, VersionRangeBase y);
    public sealed virtual int GetHashCode(VersionRangeBase obj);
}
public class NuGet.Versioning.VersionRangeFormatter : object {
    private static string ZeroN;
    private static VersionFormatter VersionFormatter;
    public static VersionRangeFormatter Instance;
    private static VersionRangeFormatter();
    public sealed virtual string Format(string format, object arg, IFormatProvider formatProvider);
    public sealed virtual object GetFormat(Type formatType);
    private string Format(char c, VersionRange range);
    private string GetShortString(VersionRange range);
    private string GetNormalizedString(VersionRange range);
    private string GetToString(VersionRange range);
    private string GetLegacyShortString(VersionRangeBase range);
    private string GetLegacyString(VersionRangeBase range);
    private string PrettyPrint(VersionRange range, bool useParentheses);
    private void PrettyPrintBound(StringBuilder sb, NuGetVersion version, bool inclusive, string boundChar);
}
