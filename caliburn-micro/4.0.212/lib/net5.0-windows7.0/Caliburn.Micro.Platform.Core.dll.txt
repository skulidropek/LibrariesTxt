public static class Caliburn.Micro.AssemblySource : object {
    public static IObservableCollection`1<Assembly> Instance;
    public static Func`2<IEnumerable`1<string>, Type> FindTypeByNames;
    private static AssemblySource();
    public static void AddRange(IEnumerable`1<Assembly> assemblies);
}
public static class Caliburn.Micro.AssemblySourceCache : object {
    private static bool isInstalled;
    private static IDictionary`2<string, Type> TypeNameCache;
    public static Func`2<Assembly, IEnumerable`1<Type>> ExtractTypes;
    public static Action Install;
    private static AssemblySourceCache();
    private static void AddTypeAssembly(Type type);
}
[ExtensionAttribute]
public static class Caliburn.Micro.ExtensionMethods : object {
    [ExtensionAttribute]
public static string GetAssemblyName(Assembly assembly);
    [ExtensionAttribute]
public static TValue GetValueOrDefault(IDictionary`2<TKey, TValue> dictionary, TKey key);
}
public class Caliburn.Micro.NameTransformer : BindableCollection`1<Rule> {
    private static RegexOptions options;
    private bool useEagerRuleSelection;
    public bool UseEagerRuleSelection { get; public set; }
    public bool get_UseEagerRuleSelection();
    public void set_UseEagerRuleSelection(bool value);
    public void AddRule(string replacePattern, string replaceValue, string globalFilterPattern);
    public void AddRule(string replacePattern, IEnumerable`1<string> replaceValueList, string globalFilterPattern);
    public IEnumerable`1<string> Transform(string source);
    public IEnumerable`1<string> Transform(string source, Func`2<string, string> getReplaceString);
}
public static class Caliburn.Micro.RegExHelper : object {
    public static string NameRegEx;
    public static string SubNamespaceRegEx;
    public static string NamespaceRegEx;
    public static string GetCaptureGroup(string groupName, string regEx);
    public static string NamespaceToRegEx(string srcNamespace);
    public static string GetNameCaptureGroup(string groupName);
    public static string GetNamespaceCaptureGroup(string groupName);
}
public static class Caliburn.Micro.StringSplitter : object {
    public static String[] Split(string message, char separator);
    public static String[] SplitParameters(string parameters);
}
public class Caliburn.Micro.TypeMappingConfiguration : object {
    [CompilerGeneratedAttribute]
private string <DefaultSubNamespaceForViews>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultSubNamespaceForViewModels>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseNameSuffixesInMappings>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NameFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeViewSuffixInViewModelNames>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <ViewSuffixList>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ViewModelSuffix>k__BackingField;
    public string DefaultSubNamespaceForViews { get; public set; }
    public string DefaultSubNamespaceForViewModels { get; public set; }
    public bool UseNameSuffixesInMappings { get; public set; }
    public string NameFormat { get; public set; }
    public bool IncludeViewSuffixInViewModelNames { get; public set; }
    public List`1<string> ViewSuffixList { get; public set; }
    public string ViewModelSuffix { get; public set; }
    [CompilerGeneratedAttribute]
public string get_DefaultSubNamespaceForViews();
    [CompilerGeneratedAttribute]
public void set_DefaultSubNamespaceForViews(string value);
    [CompilerGeneratedAttribute]
public string get_DefaultSubNamespaceForViewModels();
    [CompilerGeneratedAttribute]
public void set_DefaultSubNamespaceForViewModels(string value);
    [CompilerGeneratedAttribute]
public bool get_UseNameSuffixesInMappings();
    [CompilerGeneratedAttribute]
public void set_UseNameSuffixesInMappings(bool value);
    [CompilerGeneratedAttribute]
public string get_NameFormat();
    [CompilerGeneratedAttribute]
public void set_NameFormat(string value);
    [CompilerGeneratedAttribute]
public bool get_IncludeViewSuffixInViewModelNames();
    [CompilerGeneratedAttribute]
public void set_IncludeViewSuffixInViewModelNames(bool value);
    [CompilerGeneratedAttribute]
public List`1<string> get_ViewSuffixList();
    [CompilerGeneratedAttribute]
public void set_ViewSuffixList(List`1<string> value);
    [CompilerGeneratedAttribute]
public string get_ViewModelSuffix();
    [CompilerGeneratedAttribute]
public void set_ViewModelSuffix(string value);
}
[GeneratedCodeAttribute("Nerdbank.GitVersioning.Tasks", "3.3.37.35081")]
[ExcludeFromCodeCoverageAttribute]
internal static class ThisAssembly : object {
    internal static string AssemblyVersion;
    internal static string AssemblyFileVersion;
    internal static string AssemblyInformationalVersion;
    internal static string AssemblyName;
    internal static string AssemblyTitle;
    internal static string AssemblyConfiguration;
    internal static string GitCommitId;
    internal static string PublicKey;
    internal static string PublicKeyToken;
    internal static bool IsPublicRelease;
    internal static bool IsPrerelease;
    internal static DateTime GitCommitDate;
    internal static string RootNamespace;
    private static ThisAssembly();
}
