public static class Caliburn.Micro.Action : object {
    private static ILog Log;
    public static DependencyProperty TargetProperty;
    public static DependencyProperty TargetWithoutContextProperty;
    private static Action();
    public static void SetTarget(DependencyObject d, object target);
    public static object GetTarget(DependencyObject d);
    public static void SetTargetWithoutContext(DependencyObject d, object target);
    public static object GetTargetWithoutContext(DependencyObject d);
    public static bool HasTargetSet(DependencyObject element);
    public static void Invoke(object target, string methodName, DependencyObject view, FrameworkElement source, object eventArgs, Object[] parameters);
    private static void OnTargetWithoutContextChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnTargetChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void SetTargetCore(DependencyPropertyChangedEventArgs e, DependencyObject d, bool setContext);
}
[DefaultMemberAttribute("Item")]
public class Caliburn.Micro.ActionExecutionContext : object {
    private WeakReference message;
    private WeakReference source;
    private WeakReference target;
    private WeakReference view;
    private Dictionary`2<string, object> values;
    public Func`1<bool> CanExecute;
    public object EventArgs;
    public MethodInfo Method;
    [CompilerGeneratedAttribute]
private EventHandler Disposing;
    public ActionMessage Message { get; public set; }
    public FrameworkElement Source { get; public set; }
    public object Target { get; public set; }
    public DependencyObject View { get; public set; }
    public object Item { get; public set; }
    public ActionMessage get_Message();
    public void set_Message(ActionMessage value);
    public FrameworkElement get_Source();
    public void set_Source(FrameworkElement value);
    public object get_Target();
    public void set_Target(object value);
    public DependencyObject get_View();
    public void set_View(DependencyObject value);
    public object get_Item(string key);
    public void set_Item(string key, object value);
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
public void add_Disposing(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Disposing(EventHandler value);
}
[ContentPropertyAttribute("Parameters")]
[DefaultTriggerAttribute("System.Windows.FrameworkElement", "Microsoft.Xaml.Behaviors.EventTrigger", "Mono.Cecil.CustomAttributeArgument")]
[DefaultTriggerAttribute("System.Windows.Controls.Primitives.ButtonBase", "Microsoft.Xaml.Behaviors.EventTrigger", "Mono.Cecil.CustomAttributeArgument")]
[TypeConstraintAttribute("System.Windows.FrameworkElement")]
public class Caliburn.Micro.ActionMessage : TriggerAction`1<FrameworkElement> {
    private static ILog Log;
    private ActionExecutionContext context;
    internal static DependencyProperty HandlerProperty;
    public static bool EnforceGuardsDuringInvocation;
    public static bool ThrowsExceptions;
    public static DependencyProperty MethodNameProperty;
    public static DependencyProperty ParametersProperty;
    [CompilerGeneratedAttribute]
private EventHandler Detaching;
    public static Action`1<ActionExecutionContext> InvokeAction;
    public static Func`2<ActionExecutionContext, bool> ApplyAvailabilityEffect;
    public static Func`3<ActionMessage, object, MethodInfo> GetTargetMethod;
    public static Action`1<ActionExecutionContext> SetMethodBinding;
    public static Action`1<ActionExecutionContext> PrepareContext;
    public static Func`2<MethodInfo, IEnumerable`1<string>> BuildPossibleGuardNames;
    [CategoryAttribute("Common Properties")]
public string MethodName { get; public set; }
    [CategoryAttribute("Common Properties")]
public AttachedCollection`1<Parameter> Parameters { get; }
    private static ActionMessage();
    public string get_MethodName();
    public void set_MethodName(string value);
    public sealed virtual AttachedCollection`1<Parameter> get_Parameters();
    [CompilerGeneratedAttribute]
public void add_Detaching(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Detaching(EventHandler value);
    protected virtual void OnAttached();
    private static void HandlerPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    protected virtual void OnDetaching();
    private void ElementLoaded(object sender, RoutedEventArgs e);
    private void UpdateContext();
    protected virtual void Invoke(object eventArgs);
    public virtual void UpdateAvailability();
    private bool UpdateAvailabilityCore();
    public virtual string ToString();
    private static MethodInfo TryFindGuardMethod(ActionExecutionContext context, IEnumerable`1<string> possibleGuardNames);
    private static MethodInfo GetMethodInfo(Type t, string methodName);
    [CompilerGeneratedAttribute]
private void <OnAttached>b__16_0(Parameter x);
    [CompilerGeneratedAttribute]
private bool <OnAttached>b__16_1(TriggerBase t);
}
public class Caliburn.Micro.AttachedCollection`1 : FreezableCollection`1<T> {
    private DependencyObject associatedObject;
    private DependencyObject Microsoft.Xaml.Behaviors.IAttachedObject.AssociatedObject { get; }
    public sealed virtual void Attach(DependencyObject dependencyObject);
    public sealed virtual void Detach();
    private sealed virtual override DependencyObject Microsoft.Xaml.Behaviors.IAttachedObject.get_AssociatedObject();
    protected virtual void OnItemAdded(T item);
    protected virtual void OnItemRemoved(T item);
    private void OnCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    [CompilerGeneratedAttribute]
private void <Attach>b__2_0(T x);
    [CompilerGeneratedAttribute]
private bool <OnCollectionChanged>b__8_0(T x);
    [CompilerGeneratedAttribute]
private bool <OnCollectionChanged>b__8_1(T x);
}
public static class Caliburn.Micro.Bind : object {
    public static DependencyProperty ModelProperty;
    public static DependencyProperty ModelWithoutContextProperty;
    internal static DependencyProperty NoContextProperty;
    public static DependencyProperty AtDesignTimeProperty;
    private static DependencyProperty DataContextProperty;
    private static Bind();
    public static object GetModelWithoutContext(DependencyObject dependencyObject);
    public static void SetModelWithoutContext(DependencyObject dependencyObject, object value);
    public static object GetModel(DependencyObject dependencyObject);
    public static void SetModel(DependencyObject dependencyObject, object value);
    private static void ModelChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void ModelWithoutContextChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    [AttachedPropertyBrowsableForTypeAttribute("System.Windows.DependencyObject")]
public static bool GetAtDesignTime(DependencyObject dependencyObject);
    public static void SetAtDesignTime(DependencyObject dependencyObject, bool value);
    private static void AtDesignTimeChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void DataContextChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
}
[ExtensionAttribute]
public static class Caliburn.Micro.BindingScope : object {
    private static List`1<ChildResolver> ChildResolvers;
    private static Dictionary`2<Type, object> NonResolvableChildTypes;
    public static Func`2<DependencyObject, IEnumerable`1<FrameworkElement>> GetNamedElements;
    public static Func`2<DependencyObject, DependencyObject> GetVisualParent;
    public static Func`2<ScopeNamingRoute, IEnumerable`1<FrameworkElement>> FindNamedDescendants;
    public static Func`2<DependencyObject, ScopeNamingRoute> FindScopeNamingRoute;
    private static BindingScope();
    [ExtensionAttribute]
public static FrameworkElement FindName(IEnumerable`1<FrameworkElement> elementsToSearch, string name);
    public static ChildResolver AddChildResolver(Func`2<Type, bool> filter, Func`2<DependencyObject, IEnumerable`1<DependencyObject>> resolver);
    public static ChildResolver AddChildResolver(Func`2<T, IEnumerable`1<DependencyObject>> resolver);
    public static bool RemoveChildResolver(ChildResolver resolver);
}
public abstract class Caliburn.Micro.BootstrapperBase : object {
    private bool useApplication;
    private bool isInitialized;
    [CompilerGeneratedAttribute]
private Application <Application>k__BackingField;
    protected Application Application { get; protected set; }
    protected BootstrapperBase(bool useApplication);
    [CompilerGeneratedAttribute]
protected Application get_Application();
    [CompilerGeneratedAttribute]
protected void set_Application(Application value);
    public void Initialize();
    protected virtual void StartDesignTime();
    protected virtual void StartRuntime();
    protected virtual void PrepareApplication();
    protected virtual void Configure();
    protected virtual IEnumerable`1<Assembly> SelectAssemblies();
    protected virtual object GetInstance(Type service, string key);
    protected virtual IEnumerable`1<object> GetAllInstances(Type service);
    protected virtual void BuildUp(object instance);
    protected virtual void OnStartup(object sender, StartupEventArgs e);
    protected virtual void OnExit(object sender, EventArgs e);
    protected virtual void OnUnhandledException(object sender, DispatcherUnhandledExceptionEventArgs e);
    [AsyncStateMachineAttribute("Caliburn.Micro.BootstrapperBase/<DisplayRootViewForAsync>d__19")]
protected Task DisplayRootViewForAsync(Type viewModelType, IDictionary`2<string, object> settings);
    protected Task DisplayRootViewForAsync(IDictionary`2<string, object> settings);
}
public class Caliburn.Micro.ChildResolver : object {
    private Func`2<Type, bool> filter;
    private Func`2<DependencyObject, IEnumerable`1<DependencyObject>> resolver;
    public ChildResolver(Func`2<Type, bool> filter, Func`2<DependencyObject, IEnumerable`1<DependencyObject>> resolver);
    public bool CanResolve(Type type);
    public IEnumerable`1<DependencyObject> Resolve(DependencyObject obj);
}
public class Caliburn.Micro.ChildResolver`1 : ChildResolver {
    public ChildResolver`1(Func`2<T, IEnumerable`1<DependencyObject>> resolver);
}
[ExtensionAttribute]
public static class Caliburn.Micro.ConventionManager : object {
    private static ILog Log;
    public static IValueConverter BooleanToVisibilityConverter;
    public static bool IncludeStaticProperties;
    public static bool OverwriteContent;
    public static DataTemplate DefaultItemTemplate;
    public static DataTemplate DefaultHeaderTemplate;
    private static Dictionary`2<Type, ElementConvention> ElementConventions;
    public static Func`2<string, string> Singularize;
    public static Func`2<string, IEnumerable`1<string>> DerivePotentialSelectionNames;
    public static Action`6<Type, string, PropertyInfo, FrameworkElement, ElementConvention, DependencyProperty> SetBinding;
    public static Action`2<Binding, PropertyInfo> ApplyBindingMode;
    public static Action`3<Binding, Type, PropertyInfo> ApplyValidation;
    public static Action`3<Binding, DependencyProperty, PropertyInfo> ApplyValueConverter;
    public static Action`3<Binding, ElementConvention, PropertyInfo> ApplyStringFormat;
    public static Action`4<DependencyProperty, DependencyObject, Binding, PropertyInfo> ApplyUpdateSourceTrigger;
    public static Action`4<FrameworkElement, DependencyProperty, Type, string> ConfigureSelectedItem;
    public static Func`6<FrameworkElement, DependencyProperty, Type, string, Binding, bool> ConfigureSelectedItemBinding;
    private static ConventionManager();
    public static ElementConvention AddElementConvention(DependencyProperty bindableProperty, string parameterProperty, string eventName);
    public static ElementConvention AddElementConvention(ElementConvention convention);
    public static ElementConvention GetElementConvention(Type elementType);
    public static bool HasBinding(FrameworkElement element, DependencyProperty property);
    public static bool SetBindingWithoutBindingOverwrite(Type viewModelType, string path, PropertyInfo property, FrameworkElement element, ElementConvention convention, DependencyProperty bindableProperty);
    public static bool SetBindingWithoutBindingOrValueOverwrite(Type viewModelType, string path, PropertyInfo property, FrameworkElement element, ElementConvention convention, DependencyProperty bindableProperty);
    public static void ApplyItemTemplate(ItemsControl itemsControl, PropertyInfo property);
    public static void ApplyHeaderTemplate(FrameworkElement element, DependencyProperty headerTemplateProperty, DependencyProperty headerTemplateSelectorProperty, Type viewModelType);
    [ExtensionAttribute]
public static PropertyInfo GetPropertyCaseInsensitive(Type type, string propertyName);
}
public static class Caliburn.Micro.DependencyPropertyHelper : object {
    public static DependencyProperty RegisterAttached(string name, Type propertyType, Type ownerType, object defaultValue, PropertyChangedCallback propertyChangedCallback);
    public static DependencyProperty Register(string name, Type propertyType, Type ownerType, object defaultValue, PropertyChangedCallback propertyChangedCallback);
}
public class Caliburn.Micro.ElementConvention : object {
    public Type ElementType;
    public Func`2<DependencyObject, DependencyProperty> GetBindableProperty;
    public Func`1<TriggerBase> CreateTrigger;
    public string ParameterProperty;
    public Func`6<Type, string, PropertyInfo, FrameworkElement, ElementConvention, bool> ApplyBinding;
}
public class Caliburn.Micro.FrameAdapter : object {
    private Frame frame;
    private bool treatViewAsLoaded;
    [CompilerGeneratedAttribute]
private NavigatingCancelEventHandler ExternalNavigatingHandler;
    public Uri Source { get; public set; }
    public bool CanGoBack { get; }
    public bool CanGoForward { get; }
    public Uri CurrentSource { get; }
    public object CurrentContent { get; }
    public FrameAdapter(Frame frame, bool treatViewAsLoaded);
    [CompilerGeneratedAttribute]
private void add_ExternalNavigatingHandler(NavigatingCancelEventHandler value);
    [CompilerGeneratedAttribute]
private void remove_ExternalNavigatingHandler(NavigatingCancelEventHandler value);
    [AsyncStateMachineAttribute("Caliburn.Micro.FrameAdapter/<OnNavigating>d__6")]
protected virtual void OnNavigating(object sender, NavigatingCancelEventArgs e);
    protected virtual bool CanCloseOnNavigating(object sender, NavigatingCancelEventArgs e);
    [AsyncStateMachineAttribute("Caliburn.Micro.FrameAdapter/<OnNavigated>d__8")]
protected virtual void OnNavigated(object sender, NavigationEventArgs e);
    protected virtual void TryInjectParameters(object viewModel, object parameter);
    public Uri get_Source();
    public void set_Source(Uri value);
    public sealed virtual bool get_CanGoBack();
    public sealed virtual bool get_CanGoForward();
    public Uri get_CurrentSource();
    public sealed virtual object get_CurrentContent();
    public sealed virtual void StopLoading();
    public sealed virtual void GoBack();
    public sealed virtual void GoForward();
    public sealed virtual void NavigateToViewModel(Type viewModel, object extraData);
    public sealed virtual void NavigateToViewModel(object extraData);
    public sealed virtual JournalEntry RemoveBackEntry();
    public sealed virtual void Dispose();
    public sealed virtual void add_Navigated(NavigatedEventHandler value);
    public sealed virtual void remove_Navigated(NavigatedEventHandler value);
    public sealed virtual void add_Navigating(NavigatingCancelEventHandler value);
    public sealed virtual void remove_Navigating(NavigatingCancelEventHandler value);
    public sealed virtual void add_NavigationFailed(NavigationFailedEventHandler value);
    public sealed virtual void remove_NavigationFailed(NavigationFailedEventHandler value);
    public sealed virtual void add_NavigationStopped(NavigationStoppedEventHandler value);
    public sealed virtual void remove_NavigationStopped(NavigationStoppedEventHandler value);
    public sealed virtual void add_FragmentNavigation(FragmentNavigationEventHandler value);
    public sealed virtual void remove_FragmentNavigation(FragmentNavigationEventHandler value);
}
public interface Caliburn.Micro.IHaveParameters {
    public AttachedCollection`1<Parameter> Parameters { get; }
    public abstract virtual AttachedCollection`1<Parameter> get_Parameters();
}
public interface Caliburn.Micro.INavigationService {
    public bool CanGoBack { get; }
    public bool CanGoForward { get; }
    public object CurrentContent { get; }
    public abstract virtual void NavigateToViewModel(Type viewModel, object extraData);
    public abstract virtual void NavigateToViewModel(object extraData);
    public abstract virtual bool get_CanGoBack();
    public abstract virtual bool get_CanGoForward();
    public abstract virtual object get_CurrentContent();
    public abstract virtual void StopLoading();
    public abstract virtual void GoBack();
    public abstract virtual void GoForward();
    public abstract virtual JournalEntry RemoveBackEntry();
    [CompilerGeneratedAttribute]
public abstract virtual void add_Navigated(NavigatedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Navigated(NavigatedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Navigating(NavigatingCancelEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Navigating(NavigatingCancelEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_NavigationFailed(NavigationFailedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_NavigationFailed(NavigationFailedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_NavigationStopped(NavigationStoppedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_NavigationStopped(NavigationStoppedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_FragmentNavigation(FragmentNavigationEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_FragmentNavigation(FragmentNavigationEventHandler value);
}
public interface Caliburn.Micro.IWindowManager {
    public abstract virtual Task`1<Nullable`1<bool>> ShowDialogAsync(object rootModel, object context, IDictionary`2<string, object> settings);
    public abstract virtual Task ShowWindowAsync(object rootModel, object context, IDictionary`2<string, object> settings);
    public abstract virtual Task ShowPopupAsync(object rootModel, object context, IDictionary`2<string, object> settings);
}
public static class Caliburn.Micro.Message : object {
    internal static DependencyProperty HandlerProperty;
    private static DependencyProperty MessageTriggersProperty;
    public static DependencyProperty AttachProperty;
    private static Message();
    public static void SetHandler(DependencyObject d, object value);
    public static object GetHandler(DependencyObject d);
    public static void SetAttach(DependencyObject d, string attachText);
    public static string GetAttach(DependencyObject d);
    private static void OnAttachChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
}
public static class Caliburn.Micro.MessageBinder : object {
    public static Dictionary`2<string, Func`2<ActionExecutionContext, object>> SpecialValues;
    public static Dictionary`2<Type, Func`3<object, object, object>> CustomConverters;
    public static Func`4<string, Type, ActionExecutionContext, object> EvaluateParameter;
    private static MessageBinder();
    public static Object[] DetermineParameters(ActionExecutionContext context, ParameterInfo[] requiredParameters);
    public static object CoerceValue(Type destinationType, object providedValue, object context);
    public static object GetDefaultValue(Type type);
}
[ExtensionAttribute]
public static class Caliburn.Micro.NavigationExtensions : object {
    [ExtensionAttribute]
public static NavigationHelper`1<TViewModel> For(INavigationService navigationService);
}
public class Caliburn.Micro.NavigationHelper`1 : object {
    private Dictionary`2<string, object> queryString;
    private INavigationService navigationService;
    public NavigationHelper`1<TViewModel> WithParam(Expression`1<Func`2<TViewModel, TValue>> property, TValue value);
    public NavigationHelper`1<TViewModel> AttachTo(INavigationService navigationService);
    public void Navigate();
}
public class Caliburn.Micro.Parameter : Freezable {
    public static DependencyProperty ValueProperty;
    private DependencyObject associatedObject;
    private WeakReference owner;
    [CategoryAttribute("Common Properties")]
public object Value { get; public set; }
    private DependencyObject Microsoft.Xaml.Behaviors.IAttachedObject.AssociatedObject { get; }
    protected ActionMessage Owner { get; protected set; }
    private static Parameter();
    public object get_Value();
    public void set_Value(object value);
    private sealed virtual override DependencyObject Microsoft.Xaml.Behaviors.IAttachedObject.get_AssociatedObject();
    protected ActionMessage get_Owner();
    protected void set_Owner(ActionMessage value);
    private sealed virtual override void Microsoft.Xaml.Behaviors.IAttachedObject.Attach(DependencyObject dependencyObject);
    private sealed virtual override void Microsoft.Xaml.Behaviors.IAttachedObject.Detach();
    protected virtual Freezable CreateInstanceCore();
    internal void MakeAwareOf(ActionMessage owner);
    private static void OnValueChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
}
public static class Caliburn.Micro.Parser : object {
    private static Regex LongFormatRegularExpression;
    private static ILog Log;
    public static Func`3<DependencyObject, string, TriggerBase> CreateTrigger;
    public static Func`3<DependencyObject, string, TriggerAction> InterpretMessageText;
    public static Func`3<DependencyObject, string, Parameter> CreateParameter;
    private static Parser();
    public static IEnumerable`1<TriggerBase> Parse(DependencyObject target, string text);
    public static TriggerAction CreateMessage(DependencyObject target, string messageText);
    public static void BindParameter(FrameworkElement target, Parameter parameter, string elementName, string path, BindingMode bindingMode);
}
public static class Caliburn.Micro.View : object {
    private static ILog Log;
    private static ContentPropertyAttribute DefaultContentProperty;
    public static DependencyProperty IsLoadedProperty;
    public static DependencyProperty IsScopeRootProperty;
    public static DependencyProperty ApplyConventionsProperty;
    public static DependencyProperty ContextProperty;
    public static DependencyProperty ModelProperty;
    public static DependencyProperty IsGeneratedProperty;
    public static Func`2<object, object> GetFirstNonGeneratedView;
    private static Nullable`1<bool> inDesignMode;
    public static bool InDesignMode { get; }
    private static View();
    public static bool ExecuteOnLoad(FrameworkElement element, RoutedEventHandler handler);
    public static void ExecuteOnUnload(FrameworkElement element, RoutedEventHandler handler);
    public static void ExecuteOnLayoutUpdated(FrameworkElement element, EventHandler handler);
    public static Nullable`1<bool> GetApplyConventions(DependencyObject d);
    public static void SetApplyConventions(DependencyObject d, Nullable`1<bool> value);
    public static void SetModel(DependencyObject d, object value);
    public static object GetModel(DependencyObject d);
    public static object GetContext(DependencyObject d);
    public static void SetContext(DependencyObject d, object value);
    private static void OnModelChanged(DependencyObject targetLocation, DependencyPropertyChangedEventArgs args);
    private static void OnContextChanged(DependencyObject targetLocation, DependencyPropertyChangedEventArgs e);
    private static bool SetContentProperty(object targetLocation, object view);
    private static bool SetContentPropertyCore(object targetLocation, object view);
    public static bool get_InDesignMode();
}
public static class Caliburn.Micro.ViewLocator : object {
    private static ILog Log;
    private static string defaultSubNsViews;
    private static string defaultSubNsViewModels;
    private static bool useNameSuffixesInMappings;
    private static string nameFormat;
    private static string viewModelSuffix;
    private static List`1<string> ViewSuffixList;
    private static bool includeViewSuffixInVmNames;
    public static NameTransformer NameTransformer;
    public static string ContextSeparator;
    public static Func`2<Type, UIElement> GetOrCreateViewType;
    public static Func`2<string, string> ModifyModelTypeAtDesignTime;
    public static Func`3<string, object, IEnumerable`1<string>> TransformName;
    public static Func`4<Type, DependencyObject, object, Type> LocateTypeForModelType;
    public static Func`4<Type, DependencyObject, object, UIElement> LocateForModelType;
    public static Func`4<object, DependencyObject, object, UIElement> LocateForModel;
    public static Func`3<Type, Type, string> DeterminePackUriFromType;
    private static ViewLocator();
    public static void ConfigureTypeMappings(TypeMappingConfiguration config);
    private static void SetAllDefaults();
    public static void AddDefaultTypeMapping(string viewSuffix);
    public static void RegisterViewSuffix(string viewSuffix);
    public static void AddTypeMapping(string nsSourceReplaceRegEx, string nsSourceFilterRegEx, String[] nsTargetsRegEx, string viewSuffix);
    public static void AddTypeMapping(string nsSourceReplaceRegEx, string nsSourceFilterRegEx, string nsTargetRegEx, string viewSuffix);
    public static void AddNamespaceMapping(string nsSource, String[] nsTargets, string viewSuffix);
    public static void AddNamespaceMapping(string nsSource, string nsTarget, string viewSuffix);
    public static void AddSubNamespaceMapping(string nsSource, String[] nsTargets, string viewSuffix);
    public static void AddSubNamespaceMapping(string nsSource, string nsTarget, string viewSuffix);
    public static void InitializeComponent(object element);
}
public static class Caliburn.Micro.ViewModelBinder : object {
    private static string AsyncSuffix;
    private static ILog Log;
    public static bool ApplyConventionsByDefault;
    public static DependencyProperty ConventionsAppliedProperty;
    public static Func`3<IEnumerable`1<FrameworkElement>, Type, IEnumerable`1<FrameworkElement>> BindProperties;
    public static Func`3<IEnumerable`1<FrameworkElement>, Type, IEnumerable`1<FrameworkElement>> BindActions;
    public static Action`2<IEnumerable`1<FrameworkElement>, Type> HandleUnmatchedElements;
    public static Action`3<object, DependencyObject, object> Bind;
    private static ViewModelBinder();
    public static bool ShouldApplyConventions(FrameworkElement view);
    private static bool IsAsyncMethod(MethodInfo method);
}
public static class Caliburn.Micro.ViewModelLocator : object {
    private static string DefaultViewSuffix;
    private static ILog Log;
    private static string defaultSubNsViews;
    private static string defaultSubNsViewModels;
    private static bool useNameSuffixesInMappings;
    private static string nameFormat;
    private static string viewModelSuffix;
    private static List`1<string> ViewSuffixList;
    private static bool includeViewSuffixInVmNames;
    public static NameTransformer NameTransformer;
    public static string InterfaceCaptureGroupName;
    public static Func`3<string, bool, IEnumerable`1<string>> TransformName;
    public static Func`3<Type, bool, Type> LocateTypeForViewType;
    public static Func`2<Type, object> LocateForViewType;
    public static Func`2<object, object> LocateForView;
    private static ViewModelLocator();
    public static void ConfigureTypeMappings(TypeMappingConfiguration config);
    private static void SetAllDefaults();
    public static void AddDefaultTypeMapping(string viewSuffix);
    public static void AddTypeMapping(string nsSourceReplaceRegEx, string nsSourceFilterRegEx, String[] nsTargetsRegEx, string viewSuffix);
    public static void AddTypeMapping(string nsSourceReplaceRegEx, string nsSourceFilterRegEx, string nsTargetRegEx, string viewSuffix);
    public static void AddNamespaceMapping(string nsSource, String[] nsTargets, string viewSuffix);
    public static void AddNamespaceMapping(string nsSource, string nsTarget, string viewSuffix);
    public static void AddSubNamespaceMapping(string nsSource, String[] nsTargets, string viewSuffix);
    public static void AddSubNamespaceMapping(string nsSource, string nsTarget, string viewSuffix);
    public static string MakeInterface(string typeName);
}
public class Caliburn.Micro.WindowConductor : object {
    private bool deactivatingFromView;
    private bool deactivateFromViewModel;
    private bool actuallyClosing;
    private Window view;
    private object model;
    public WindowConductor(object model, Window view);
    [AsyncStateMachineAttribute("Caliburn.Micro.WindowConductor/<InitialiseAsync>d__6")]
public Task InitialiseAsync();
    [AsyncStateMachineAttribute("Caliburn.Micro.WindowConductor/<Closed>d__7")]
private void Closed(object sender, EventArgs e);
    private Task Deactivated(object sender, DeactivationEventArgs e);
    [AsyncStateMachineAttribute("Caliburn.Micro.WindowConductor/<Closing>d__9")]
private void Closing(object sender, CancelEventArgs e);
}
public class Caliburn.Micro.WindowManager : object {
    [AsyncStateMachineAttribute("Caliburn.Micro.WindowManager/<ShowDialogAsync>d__0")]
public virtual Task`1<Nullable`1<bool>> ShowDialogAsync(object rootModel, object context, IDictionary`2<string, object> settings);
    [AsyncStateMachineAttribute("Caliburn.Micro.WindowManager/<ShowWindowAsync>d__1")]
public virtual Task ShowWindowAsync(object rootModel, object context, IDictionary`2<string, object> settings);
    [AsyncStateMachineAttribute("Caliburn.Micro.WindowManager/<ShowPopupAsync>d__2")]
public virtual Task ShowPopupAsync(object rootModel, object context, IDictionary`2<string, object> settings);
    protected virtual Popup CreatePopup(object rootModel, IDictionary`2<string, object> settings);
    [AsyncStateMachineAttribute("Caliburn.Micro.WindowManager/<CreateWindowAsync>d__4")]
protected virtual Task`1<Window> CreateWindowAsync(object rootModel, bool isDialog, object context, IDictionary`2<string, object> settings);
    protected virtual Window EnsureWindow(object model, object view, bool isDialog);
    protected virtual Window InferOwnerOf(Window window);
    [AsyncStateMachineAttribute("Caliburn.Micro.WindowManager/<CreatePageAsync>d__7")]
public virtual Task`1<Page> CreatePageAsync(object rootModel, object context, IDictionary`2<string, object> settings);
    protected virtual Page EnsurePage(object model, object view);
    private bool ApplySettings(object target, IEnumerable`1<KeyValuePair`2<string, object>> settings);
}
public class Caliburn.Micro.XamlPlatformProvider : object {
    private Dispatcher dispatcher;
    private static DependencyProperty PreviouslyAttachedProperty;
    public bool PropertyChangeNotificationsOnUIThread { get; }
    public bool InDesignMode { get; }
    private static XamlPlatformProvider();
    public virtual bool get_PropertyChangeNotificationsOnUIThread();
    public virtual bool get_InDesignMode();
    private void ValidateDispatcher();
    private bool CheckAccess();
    public virtual void BeginOnUIThread(Action action);
    public virtual Task OnUIThreadAsync(Func`1<Task> action);
    public virtual void OnUIThread(Action action);
    public virtual object GetFirstNonGeneratedView(object view);
    public virtual void ExecuteOnFirstLoad(object view, Action`1<object> handler);
    public virtual void ExecuteOnLayoutUpdated(object view, Action`1<object> handler);
    public virtual Func`2<CancellationToken, Task> GetViewCloseAction(object viewModel, ICollection`1<object> views, Nullable`1<bool> dialogResult);
}
[GeneratedCodeAttribute("Nerdbank.GitVersioning.Tasks", "3.3.37.35081")]
[ExcludeFromCodeCoverageAttribute]
internal static class ThisAssembly : object {
    internal static string AssemblyVersion;
    internal static string AssemblyFileVersion;
    internal static string AssemblyInformationalVersion;
    internal static string AssemblyName;
    internal static string AssemblyTitle;
    internal static string AssemblyConfiguration;
    internal static string GitCommitId;
    internal static string PublicKey;
    internal static string PublicKeyToken;
    internal static bool IsPublicRelease;
    internal static bool IsPrerelease;
    internal static DateTime GitCommitDate;
    internal static string RootNamespace;
    private static ThisAssembly();
}
