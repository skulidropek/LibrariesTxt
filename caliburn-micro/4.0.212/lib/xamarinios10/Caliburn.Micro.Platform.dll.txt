public class Caliburn.Micro.CaliburnApplicationDelegate : UIApplicationDelegate {
    private bool _isInitialized;
    public CaliburnApplicationDelegate(IntPtr handle);
    public CaliburnApplicationDelegate(NSObjectFlag t);
    protected virtual void StartDesignTime();
    protected virtual void StartRuntime();
    protected void Initialize();
    protected virtual void Configure();
    protected virtual IEnumerable`1<Assembly> SelectAssemblies();
    protected virtual object GetInstance(Type service, string key);
    protected virtual IEnumerable`1<object> GetAllInstances(Type service);
    protected virtual void BuildUp(object instance);
}
public class Caliburn.Micro.IOSPlatformProvider : object {
    public bool InDesignMode { get; }
    public bool PropertyChangeNotificationsOnUIThread { get; }
    private bool CheckAccess();
    public virtual bool get_InDesignMode();
    public virtual bool get_PropertyChangeNotificationsOnUIThread();
    public virtual void BeginOnUIThread(Action action);
    public virtual Task OnUIThreadAsync(Func`1<Task> action);
    public virtual void OnUIThread(Action action);
    public virtual object GetFirstNonGeneratedView(object view);
    public virtual void ExecuteOnFirstLoad(object view, Action`1<object> handler);
    public virtual void ExecuteOnLayoutUpdated(object view, Action`1<object> handler);
    public virtual Func`2<CancellationToken, Task> GetViewCloseAction(object viewModel, ICollection`1<object> views, Nullable`1<bool> dialogResult);
}
public interface Caliburn.Micro.IUIViewController {
    public bool IsViewLoaded { get; }
    public abstract virtual bool get_IsViewLoaded();
    [CompilerGeneratedAttribute]
public abstract virtual void add_ViewLoaded(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ViewLoaded(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ViewAppeared(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ViewAppeared(EventHandler value);
}
public static class Caliburn.Micro.ViewModelLocator : object {
    private static string DefaultViewSuffix;
    private static ILog Log;
    private static string defaultSubNsViews;
    private static string defaultSubNsViewModels;
    private static bool useNameSuffixesInMappings;
    private static string nameFormat;
    private static string viewModelSuffix;
    private static List`1<string> ViewSuffixList;
    private static bool includeViewSuffixInVmNames;
    public static NameTransformer NameTransformer;
    public static string InterfaceCaptureGroupName;
    public static Func`3<string, bool, IEnumerable`1<string>> TransformName;
    public static Func`3<Type, bool, Type> LocateTypeForViewType;
    public static Func`2<Type, object> LocateForViewType;
    public static Func`2<object, object> LocateForView;
    private static ViewModelLocator();
    public static void ConfigureTypeMappings(TypeMappingConfiguration config);
    private static void SetAllDefaults();
    public static void AddDefaultTypeMapping(string viewSuffix);
    public static void AddTypeMapping(string nsSourceReplaceRegEx, string nsSourceFilterRegEx, String[] nsTargetsRegEx, string viewSuffix);
    public static void AddTypeMapping(string nsSourceReplaceRegEx, string nsSourceFilterRegEx, string nsTargetRegEx, string viewSuffix);
    public static void AddNamespaceMapping(string nsSource, String[] nsTargets, string viewSuffix);
    public static void AddNamespaceMapping(string nsSource, string nsTarget, string viewSuffix);
    public static void AddSubNamespaceMapping(string nsSource, String[] nsTargets, string viewSuffix);
    public static void AddSubNamespaceMapping(string nsSource, string nsTarget, string viewSuffix);
    public static string MakeInterface(string typeName);
}
internal static class ThisAssembly : object {
    internal static string AssemblyVersion;
    internal static string AssemblyFileVersion;
    internal static string AssemblyInformationalVersion;
    internal static string AssemblyName;
    internal static string AssemblyTitle;
    internal static string AssemblyConfiguration;
    internal static string GitCommitId;
    internal static string PublicKey;
    internal static string PublicKeyToken;
    internal static bool IsPublicRelease;
    internal static bool IsPrerelease;
    internal static DateTime GitCommitDate;
    internal static string RootNamespace;
    private static ThisAssembly();
}
