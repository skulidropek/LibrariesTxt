public class CarouselView.FormsPlugin.Abstractions.AutoplayBehavior : Behavior`1<CarouselViewControl> {
    private CarouselViewControl attachedCarousel;
    private Timer timer;
    [CompilerGeneratedAttribute]
private int <Delay>k__BackingField;
    public int Delay { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Delay();
    [CompilerGeneratedAttribute]
public void set_Delay(int value);
    protected virtual void OnAttachedTo(CarouselViewControl bindable);
    public void StartTimer();
    public void StopTimer();
    protected virtual void OnDetachingFrom(CarouselViewControl bindable);
    private void Autoplay(object args);
    [CompilerGeneratedAttribute]
private void <Autoplay>b__10_0();
}
public class CarouselView.FormsPlugin.Abstractions.CarouselViewControl : View {
    public static BindableProperty OrientationProperty;
    public static BindableProperty ItemsSourceProperty;
    public static BindableProperty ItemTemplateProperty;
    public static BindableProperty PositionProperty;
    public static BindableProperty SelectedItemProperty;
    public static BindableProperty InterPageSpacingProperty;
    public static BindableProperty IsSwipeEnabledProperty;
    public static BindableProperty AnimateTransitionProperty;
    public static BindableProperty InfiniteScrollingProperty;
    public static BindableProperty AutoplayIntervalProperty;
    public static BindableProperty IndicatorsTintColorProperty;
    public static BindableProperty CurrentPageIndicatorTintColorProperty;
    public static BindableProperty IndicatorsShapeProperty;
    public static BindableProperty ShowIndicatorsProperty;
    public static BindableProperty HorizontalIndicatorsPositionProperty;
    public static BindableProperty VerticalIndicatorsPositionProperty;
    public static BindableProperty ShowArrowsProperty;
    public static BindableProperty ArrowsBackgroundColorProperty;
    public static BindableProperty ArrowsTintColorProperty;
    public static BindableProperty ArrowsTransparencyProperty;
    public static BindableProperty ArrowsSizeProperty;
    public static BindableProperty ArrowsParentMarginProperty;
    public static BindableProperty HorizontalArrowsPositionProperty;
    public static BindableProperty VerticalArrowsPositionProperty;
    public static BindableProperty PrevArrowTemplateProperty;
    public static BindableProperty NextArrowTemplateProperty;
    [CompilerGeneratedAttribute]
private EventHandler`1<PositionSelectedEventArgs> PositionSelected;
    public static BindableProperty PositionSelectedCommandProperty;
    [CompilerGeneratedAttribute]
private EventHandler`1<ScrolledEventArgs> Scrolled;
    public static BindableProperty ScrolledCommandProperty;
    [CompilerGeneratedAttribute]
private EventHandler`1<EventArgs> LoadMore;
    public static BindableProperty LoadMoreCommandProperty;
    public CarouselViewOrientation Orientation { get; public set; }
    public IEnumerable ItemsSource { get; public set; }
    public DataTemplate ItemTemplate { get; public set; }
    public int Position { get; public set; }
    public object SelectedItem { get; public set; }
    public int InterPageSpacing { get; public set; }
    public bool IsSwipeEnabled { get; public set; }
    public bool AnimateTransition { get; public set; }
    public bool InfiniteScrolling { get; public set; }
    public int AutoplayInterval { get; public set; }
    public Color IndicatorsTintColor { get; public set; }
    public Color CurrentPageIndicatorTintColor { get; public set; }
    public IndicatorsShape IndicatorsShape { get; public set; }
    public bool ShowIndicators { get; public set; }
    public HorizontalIndicatorsPosition HorizontalIndicatorsPosition { get; public set; }
    public VerticalIndicatorsPosition VerticalIndicatorsPosition { get; public set; }
    public bool ShowArrows { get; public set; }
    public Color ArrowsBackgroundColor { get; public set; }
    public Color ArrowsTintColor { get; public set; }
    public float ArrowsTransparency { get; public set; }
    public int ArrowsSize { get; public set; }
    public int ArrowsParentMargin { get; public set; }
    public HorizontalArrowsPosition HorizontalArrowsPosition { get; public set; }
    public VerticalArrowsPosition VerticalArrowsPosition { get; public set; }
    public DataTemplate PrevArrowTemplate { get; public set; }
    public DataTemplate NextArrowTemplate { get; public set; }
    public Command`1<PositionSelectedEventArgs> PositionSelectedCommand { get; public set; }
    public Command`1<ScrolledEventArgs> ScrolledCommand { get; public set; }
    public Command LoadMoreCommand { get; public set; }
    private static CarouselViewControl();
    public CarouselViewOrientation get_Orientation();
    public void set_Orientation(CarouselViewOrientation value);
    public IEnumerable get_ItemsSource();
    public void set_ItemsSource(IEnumerable value);
    public DataTemplate get_ItemTemplate();
    public void set_ItemTemplate(DataTemplate value);
    public int get_Position();
    public void set_Position(int value);
    public object get_SelectedItem();
    public void set_SelectedItem(object value);
    public int get_InterPageSpacing();
    public void set_InterPageSpacing(int value);
    public bool get_IsSwipeEnabled();
    public void set_IsSwipeEnabled(bool value);
    public bool get_AnimateTransition();
    public void set_AnimateTransition(bool value);
    public bool get_InfiniteScrolling();
    public void set_InfiniteScrolling(bool value);
    public int get_AutoplayInterval();
    public void set_AutoplayInterval(int value);
    public Color get_IndicatorsTintColor();
    public void set_IndicatorsTintColor(Color value);
    public Color get_CurrentPageIndicatorTintColor();
    public void set_CurrentPageIndicatorTintColor(Color value);
    public IndicatorsShape get_IndicatorsShape();
    public void set_IndicatorsShape(IndicatorsShape value);
    public bool get_ShowIndicators();
    public void set_ShowIndicators(bool value);
    public HorizontalIndicatorsPosition get_HorizontalIndicatorsPosition();
    public void set_HorizontalIndicatorsPosition(HorizontalIndicatorsPosition value);
    public VerticalIndicatorsPosition get_VerticalIndicatorsPosition();
    public void set_VerticalIndicatorsPosition(VerticalIndicatorsPosition value);
    public bool get_ShowArrows();
    public void set_ShowArrows(bool value);
    public Color get_ArrowsBackgroundColor();
    public void set_ArrowsBackgroundColor(Color value);
    public Color get_ArrowsTintColor();
    public void set_ArrowsTintColor(Color value);
    public float get_ArrowsTransparency();
    public void set_ArrowsTransparency(float value);
    public int get_ArrowsSize();
    public void set_ArrowsSize(int value);
    public int get_ArrowsParentMargin();
    public void set_ArrowsParentMargin(int value);
    public HorizontalArrowsPosition get_HorizontalArrowsPosition();
    public void set_HorizontalArrowsPosition(HorizontalArrowsPosition value);
    public VerticalArrowsPosition get_VerticalArrowsPosition();
    public void set_VerticalArrowsPosition(VerticalArrowsPosition value);
    public DataTemplate get_PrevArrowTemplate();
    public void set_PrevArrowTemplate(DataTemplate value);
    public DataTemplate get_NextArrowTemplate();
    public void set_NextArrowTemplate(DataTemplate value);
    [CompilerGeneratedAttribute]
public void add_PositionSelected(EventHandler`1<PositionSelectedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_PositionSelected(EventHandler`1<PositionSelectedEventArgs> value);
    [EditorBrowsableAttribute("1")]
public void SendPositionSelected();
    public Command`1<PositionSelectedEventArgs> get_PositionSelectedCommand();
    public void set_PositionSelectedCommand(Command`1<PositionSelectedEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_Scrolled(EventHandler`1<ScrolledEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_Scrolled(EventHandler`1<ScrolledEventArgs> value);
    [EditorBrowsableAttribute("1")]
public void SendScrolled(double percent, ScrollDirection direction);
    public Command`1<ScrolledEventArgs> get_ScrolledCommand();
    public void set_ScrolledCommand(Command`1<ScrolledEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_LoadMore(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_LoadMore(EventHandler`1<EventArgs> value);
    [EditorBrowsableAttribute("1")]
public void SendLoadMore();
    public Command get_LoadMoreCommand();
    public void set_LoadMoreCommand(Command value);
}
public enum CarouselView.FormsPlugin.Abstractions.CarouselViewOrientation : Enum {
    public int value__;
    public static CarouselViewOrientation Horizontal;
    public static CarouselViewOrientation Vertical;
}
public enum CarouselView.FormsPlugin.Abstractions.HorizontalArrowsPosition : Enum {
    public int value__;
    public static HorizontalArrowsPosition Center;
    public static HorizontalArrowsPosition Bottom;
    public static HorizontalArrowsPosition Top;
}
public enum CarouselView.FormsPlugin.Abstractions.HorizontalIndicatorsPosition : Enum {
    public int value__;
    public static HorizontalIndicatorsPosition Bottom;
    public static HorizontalIndicatorsPosition Top;
}
[ExtensionAttribute]
public static class CarouselView.FormsPlugin.Abstractions.IEnumerableExtensions : object {
    [ExtensionAttribute]
public static object GetItem(IEnumerable e, int index);
    [ExtensionAttribute]
public static int GetCount(IEnumerable e);
    [ExtensionAttribute]
public static List`1<object> GetList(IEnumerable e);
}
public enum CarouselView.FormsPlugin.Abstractions.IndicatorsAlignment : Enum {
    public int value__;
    public static IndicatorsAlignment Center;
    public static IndicatorsAlignment Right;
    public static IndicatorsAlignment Left;
}
public enum CarouselView.FormsPlugin.Abstractions.IndicatorsShape : Enum {
    public int value__;
    public static IndicatorsShape Circle;
    public static IndicatorsShape Square;
}
public class CarouselView.FormsPlugin.Abstractions.PositionSelectedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private int <NewValue>k__BackingField;
    public int NewValue { get; public set; }
    [CompilerGeneratedAttribute]
public int get_NewValue();
    [CompilerGeneratedAttribute]
public void set_NewValue(int value);
}
public enum CarouselView.FormsPlugin.Abstractions.ScrollDirection : Enum {
    public int value__;
    public static ScrollDirection Left;
    public static ScrollDirection Right;
    public static ScrollDirection Up;
    public static ScrollDirection Down;
}
public class CarouselView.FormsPlugin.Abstractions.ScrolledEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private double <NewValue>k__BackingField;
    [CompilerGeneratedAttribute]
private ScrollDirection <Direction>k__BackingField;
    public double NewValue { get; public set; }
    public ScrollDirection Direction { get; public set; }
    [CompilerGeneratedAttribute]
public double get_NewValue();
    [CompilerGeneratedAttribute]
public void set_NewValue(double value);
    [CompilerGeneratedAttribute]
public ScrollDirection get_Direction();
    [CompilerGeneratedAttribute]
public void set_Direction(ScrollDirection value);
}
public enum CarouselView.FormsPlugin.Abstractions.VerticalArrowsPosition : Enum {
    public int value__;
    public static VerticalArrowsPosition Center;
    public static VerticalArrowsPosition Left;
    public static VerticalArrowsPosition Right;
}
public enum CarouselView.FormsPlugin.Abstractions.VerticalIndicatorsPosition : Enum {
    public int value__;
    public static VerticalIndicatorsPosition Left;
    public static VerticalIndicatorsPosition Right;
}
public class CarouselView.FormsPlugin.Timer : CancellationTokenSource {
    public Timer(TimerCallback callback, object state, int dueTime, int period);
    public sealed virtual void Dispose();
}
public class CarouselView.FormsPlugin.TimerCallback : MulticastDelegate {
    public TimerCallback(object object, IntPtr method);
    public virtual void Invoke(object state);
    public virtual IAsyncResult BeginInvoke(object state, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
