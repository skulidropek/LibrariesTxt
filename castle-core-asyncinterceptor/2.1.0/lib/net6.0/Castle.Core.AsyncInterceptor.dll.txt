[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Castle.DynamicProxy.AsyncDeterminationInterceptor : object {
    private static MethodInfo HandleAsyncMethodInfo;
    private static ConcurrentDictionary`2<Type, GenericAsyncHandler> GenericAsyncHandlers;
    [CompilerGeneratedAttribute]
private IAsyncInterceptor <AsyncInterceptor>k__BackingField;
    public IAsyncInterceptor AsyncInterceptor { get; }
    public AsyncDeterminationInterceptor(IAsyncInterceptor asyncInterceptor);
    private static AsyncDeterminationInterceptor();
    [CompilerGeneratedAttribute]
public IAsyncInterceptor get_AsyncInterceptor();
    [DebuggerStepThroughAttribute]
public virtual void Intercept(IInvocation invocation);
    private static MethodType GetMethodType(Type returnType);
    private static GenericAsyncHandler GetHandler(Type returnType);
    private static GenericAsyncHandler CreateHandler(Type returnType);
    private static void HandleAsyncWithResult(IInvocation invocation, IAsyncInterceptor asyncInterceptor);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Castle.DynamicProxy.AsyncInterceptorBase : object {
    private static MethodInfo InterceptSynchronousMethodInfo;
    private static ConcurrentDictionary`2<Type, GenericSynchronousHandler> GenericSynchronousHandlers;
    private static AsyncInterceptorBase();
    public sealed virtual void InterceptSynchronous(IInvocation invocation);
    public sealed virtual void InterceptAsynchronous(IInvocation invocation);
    public sealed virtual void InterceptAsynchronous(IInvocation invocation);
    protected abstract virtual Task InterceptAsync(IInvocation invocation, IInvocationProceedInfo proceedInfo, Func`3<IInvocation, IInvocationProceedInfo, Task> proceed);
    protected abstract virtual Task`1<TResult> InterceptAsync(IInvocation invocation, IInvocationProceedInfo proceedInfo, Func`3<IInvocation, IInvocationProceedInfo, Task`1<TResult>> proceed);
    private static GenericSynchronousHandler CreateHandler(Type returnType);
    private static void InterceptSynchronousVoid(AsyncInterceptorBase me, IInvocation invocation);
    private static void InterceptSynchronousResult(AsyncInterceptorBase me, IInvocation invocation);
    private static Task ProceedSynchronous(IInvocation invocation, IInvocationProceedInfo proceedInfo);
    private static Task`1<TResult> ProceedSynchronous(IInvocation invocation, IInvocationProceedInfo proceedInfo);
    [AsyncStateMachineAttribute("Castle.DynamicProxy.AsyncInterceptorBase/<ProceedAsynchronous>d__13")]
private static Task ProceedAsynchronous(IInvocation invocation, IInvocationProceedInfo proceedInfo);
    [AsyncStateMachineAttribute("Castle.DynamicProxy.AsyncInterceptorBase/<ProceedAsynchronous>d__14`1")]
private static Task`1<TResult> ProceedAsynchronous(IInvocation invocation, IInvocationProceedInfo proceedInfo);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public abstract class Castle.DynamicProxy.AsyncTimingInterceptor : ProcessingAsyncInterceptor`1<Stopwatch> {
    protected sealed virtual Stopwatch StartingInvocation(IInvocation invocation);
    protected sealed virtual void CompletedInvocation(IInvocation invocation, Stopwatch state);
    protected abstract virtual void StartingTiming(IInvocation invocation);
    protected abstract virtual void CompletedTiming(IInvocation invocation, Stopwatch stopwatch);
}
[NullableContextAttribute("1")]
public interface Castle.DynamicProxy.IAsyncInterceptor {
    public abstract virtual void InterceptSynchronous(IInvocation invocation);
    public abstract virtual void InterceptAsynchronous(IInvocation invocation);
    public abstract virtual void InterceptAsynchronous(IInvocation invocation);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Castle.DynamicProxy.NoCoverage.RethrowHelper : object {
    [ExtensionAttribute]
public static void Rethrow(Exception exception);
    [ExtensionAttribute]
public static void RethrowInnerIfAggregate(Exception exception);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static void RethrowIfFaulted(Task task);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Castle.DynamicProxy.ProcessingAsyncInterceptor`1 : object {
    public sealed virtual void InterceptSynchronous(IInvocation invocation);
    public sealed virtual void InterceptAsynchronous(IInvocation invocation);
    public sealed virtual void InterceptAsynchronous(IInvocation invocation);
    protected abstract virtual TState StartingInvocation(IInvocation invocation);
    protected virtual void CompletedInvocation(IInvocation invocation, TState state);
    protected virtual void CompletedInvocation(IInvocation invocation, TState state, object returnValue);
    private TState Proceed(IInvocation invocation);
    [AsyncStateMachineAttribute("Castle.DynamicProxy.ProcessingAsyncInterceptor`1/<SignalWhenCompleteAsync>d__7")]
private Task SignalWhenCompleteAsync(IInvocation invocation, TState state);
    [AsyncStateMachineAttribute("Castle.DynamicProxy.ProcessingAsyncInterceptor`1/<SignalWhenCompleteAsync>d__8`1")]
private Task`1<TResult> SignalWhenCompleteAsync(IInvocation invocation, TState state);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Castle.DynamicProxy.ProxyGeneratorExtensions : object {
    [ExtensionAttribute]
public static IInterceptor ToInterceptor(IAsyncInterceptor interceptor);
    [ExtensionAttribute]
public static IInterceptor[] ToInterceptors(IEnumerable`1<IAsyncInterceptor> interceptors);
    [ExtensionAttribute]
public static TInterface CreateInterfaceProxyWithTarget(IProxyGenerator proxyGenerator, TInterface target, IAsyncInterceptor[] interceptors);
    [ExtensionAttribute]
public static TInterface CreateInterfaceProxyWithTarget(IProxyGenerator proxyGenerator, TInterface target, ProxyGenerationOptions options, IAsyncInterceptor[] interceptors);
    [ExtensionAttribute]
public static object CreateInterfaceProxyWithTarget(IProxyGenerator proxyGenerator, Type interfaceToProxy, object target, IAsyncInterceptor[] interceptors);
    [ExtensionAttribute]
public static object CreateInterfaceProxyWithTarget(IProxyGenerator proxyGenerator, Type interfaceToProxy, object target, ProxyGenerationOptions options, IAsyncInterceptor[] interceptors);
    [ExtensionAttribute]
public static object CreateInterfaceProxyWithTarget(IProxyGenerator proxyGenerator, Type interfaceToProxy, Type[] additionalInterfacesToProxy, object target, IAsyncInterceptor[] interceptors);
    [ExtensionAttribute]
public static object CreateInterfaceProxyWithTarget(IProxyGenerator proxyGenerator, Type interfaceToProxy, Type[] additionalInterfacesToProxy, object target, ProxyGenerationOptions options, IAsyncInterceptor[] interceptors);
    [ExtensionAttribute]
public static object CreateInterfaceProxyWithTargetInterface(IProxyGenerator proxyGenerator, Type interfaceToProxy, object target, IAsyncInterceptor[] interceptors);
    [ExtensionAttribute]
public static TInterface CreateInterfaceProxyWithTargetInterface(IProxyGenerator proxyGenerator, TInterface target, IAsyncInterceptor[] interceptors);
    [ExtensionAttribute]
public static TInterface CreateInterfaceProxyWithTargetInterface(IProxyGenerator proxyGenerator, TInterface target, ProxyGenerationOptions options, IAsyncInterceptor[] interceptors);
    [ExtensionAttribute]
public static object CreateInterfaceProxyWithTargetInterface(IProxyGenerator proxyGenerator, Type interfaceToProxy, Type[] additionalInterfacesToProxy, object target, IAsyncInterceptor[] interceptors);
    [ExtensionAttribute]
public static object CreateInterfaceProxyWithTargetInterface(IProxyGenerator proxyGenerator, Type interfaceToProxy, object target, ProxyGenerationOptions options, IAsyncInterceptor[] interceptors);
    [ExtensionAttribute]
public static object CreateInterfaceProxyWithTargetInterface(IProxyGenerator proxyGenerator, Type interfaceToProxy, Type[] additionalInterfacesToProxy, object target, ProxyGenerationOptions options, IAsyncInterceptor[] interceptors);
    [ExtensionAttribute]
public static TClass CreateClassProxyWithTarget(IProxyGenerator proxyGenerator, TClass target, IAsyncInterceptor[] interceptors);
    [ExtensionAttribute]
public static TClass CreateClassProxyWithTarget(IProxyGenerator proxyGenerator, TClass target, ProxyGenerationOptions options, IAsyncInterceptor[] interceptors);
    [ExtensionAttribute]
public static object CreateClassProxyWithTarget(IProxyGenerator proxyGenerator, Type classToProxy, Type[] additionalInterfacesToProxy, object target, IAsyncInterceptor[] interceptors);
    [ExtensionAttribute]
public static object CreateClassProxyWithTarget(IProxyGenerator proxyGenerator, Type classToProxy, object target, ProxyGenerationOptions options, Object[] constructorArguments, IAsyncInterceptor[] interceptors);
    [ExtensionAttribute]
public static object CreateClassProxyWithTarget(IProxyGenerator proxyGenerator, Type classToProxy, object target, Object[] constructorArguments, IAsyncInterceptor[] interceptors);
    [ExtensionAttribute]
public static object CreateClassProxyWithTarget(IProxyGenerator proxyGenerator, Type classToProxy, object target, IAsyncInterceptor[] interceptors);
    [ExtensionAttribute]
public static object CreateClassProxyWithTarget(IProxyGenerator proxyGenerator, Type classToProxy, object target, ProxyGenerationOptions options, IAsyncInterceptor[] interceptors);
    [ExtensionAttribute]
public static object CreateClassProxyWithTarget(IProxyGenerator proxyGenerator, Type classToProxy, Type[] additionalInterfacesToProxy, object target, ProxyGenerationOptions options, IAsyncInterceptor[] interceptors);
    [ExtensionAttribute]
public static object CreateClassProxyWithTarget(IProxyGenerator proxyGenerator, Type classToProxy, Type[] additionalInterfacesToProxy, object target, ProxyGenerationOptions options, Object[] constructorArguments, IAsyncInterceptor[] interceptors);
    [ExtensionAttribute]
public static TClass CreateClassProxy(IProxyGenerator proxyGenerator, IAsyncInterceptor[] interceptors);
    [ExtensionAttribute]
public static TClass CreateClassProxy(IProxyGenerator proxyGenerator, ProxyGenerationOptions options, IAsyncInterceptor[] interceptors);
    [ExtensionAttribute]
public static object CreateClassProxy(IProxyGenerator proxyGenerator, Type classToProxy, Type[] additionalInterfacesToProxy, IAsyncInterceptor[] interceptors);
    [ExtensionAttribute]
public static object CreateClassProxy(IProxyGenerator proxyGenerator, Type classToProxy, ProxyGenerationOptions options, Object[] constructorArguments, IAsyncInterceptor[] interceptors);
    [ExtensionAttribute]
public static object CreateClassProxy(IProxyGenerator proxyGenerator, Type classToProxy, Object[] constructorArguments, IAsyncInterceptor[] interceptors);
    [ExtensionAttribute]
public static object CreateClassProxy(IProxyGenerator proxyGenerator, Type classToProxy, IAsyncInterceptor[] interceptors);
    [ExtensionAttribute]
public static object CreateClassProxy(IProxyGenerator proxyGenerator, Type classToProxy, ProxyGenerationOptions options, IAsyncInterceptor[] interceptors);
    [ExtensionAttribute]
public static object CreateClassProxy(IProxyGenerator proxyGenerator, Type classToProxy, Type[] additionalInterfacesToProxy, ProxyGenerationOptions options, IAsyncInterceptor[] interceptors);
    [ExtensionAttribute]
public static object CreateClassProxy(IProxyGenerator proxyGenerator, Type classToProxy, Type[] additionalInterfacesToProxy, ProxyGenerationOptions options, Object[] constructorArguments, IAsyncInterceptor[] interceptors);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
