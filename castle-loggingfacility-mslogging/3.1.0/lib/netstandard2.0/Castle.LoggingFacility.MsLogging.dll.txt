[ExtensionAttribute]
public static class Castle.LoggingFacility.MsLogging.CastleLoggerExtensions : object {
    [ExtensionAttribute]
public static void Log(ILogger logger, LogLevel logLevel, string message);
    [ExtensionAttribute]
public static void Log(ILogger logger, LogLevel logLevel, string message, Exception exception);
    [ExtensionAttribute]
public static void Log(ILogger logger, LogLevel logLevel, Func`1<string> messageFactory);
}
public class Castle.LoggingFacility.MsLogging.CastleMsLoggerAdapter : object {
    private ILogger _castleLogger;
    public CastleMsLoggerAdapter(ILogger castleLogger);
    public sealed virtual void Log(LogLevel logLevel, EventId eventId, TState state, Exception exception, Func`3<TState, Exception, string> formatter);
    public sealed virtual bool IsEnabled(LogLevel logLevel);
    public sealed virtual IDisposable BeginScope(TState state);
}
[ExtensionAttribute]
public static class Castle.LoggingFacility.MsLogging.CastleMsLoggerFactoryExtensions : object {
    [ExtensionAttribute]
public static ILoggerFactory AddCastleLogger(ILoggerFactory factory, ILoggerFactory castleLoggerFactory);
}
public class Castle.LoggingFacility.MsLogging.CastleMsLoggerProvider : object {
    private ILoggerFactory _castleLoggerFactory;
    private ConcurrentDictionary`2<string, CastleMsLoggerAdapter> _loggers;
    public CastleMsLoggerProvider(ILoggerFactory castleLoggerFactory);
    public sealed virtual ILogger CreateLogger(string categoryName);
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
private CastleMsLoggerAdapter <CreateLogger>b__3_0(string name);
}
