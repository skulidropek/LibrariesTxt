[ExtensionAttribute]
public static class Castle.Facilities.Logging.BuiltInLoggingFactoryExtensions : object {
    [ExtensionAttribute]
public static LoggingFacility LogUsingNullLogger(LoggingFacility loggingFacility);
    [ExtensionAttribute]
public static LoggingFacility LogUsingConsoleLogger(LoggingFacility loggingFacility);
    [ExtensionAttribute]
public static LoggingFacility LogUsingDiagnosticsLogger(LoggingFacility loggingFacility);
    [ExtensionAttribute]
public static LoggingFacility LogUsingTraceLogger(LoggingFacility loggingFacility);
}
public class Castle.Facilities.Logging.LoggerResolver : object {
    private IExtendedLoggerFactory extendedLoggerFactory;
    private ILoggerFactory loggerFactory;
    private string logName;
    public LoggerResolver(ILoggerFactory loggerFactory);
    public LoggerResolver(IExtendedLoggerFactory extendedLoggerFactory);
    public LoggerResolver(ILoggerFactory loggerFactory, string name);
    public LoggerResolver(IExtendedLoggerFactory extendedLoggerFactory, string name);
    public sealed virtual bool CanResolve(CreationContext context, ISubDependencyResolver parentResolver, ComponentModel model, DependencyModel dependency);
    public sealed virtual object Resolve(CreationContext context, ISubDependencyResolver parentResolver, ComponentModel model, DependencyModel dependency);
}
public class Castle.Facilities.Logging.LoggingFacility : AbstractFacility {
    private string customLoggerFactoryTypeName;
    private string configFileName;
    private ITypeConverter converter;
    private Type loggerFactoryType;
    private Nullable`1<LoggerLevel> loggerLevel;
    private ILoggerFactory loggerFactory;
    private string logName;
    private bool configuredExternally;
    public LoggingFacility(string customLoggerFactory, string configFile);
    public LoggingFacility LogUsing();
    public LoggingFacility LogUsing(TLoggerFactory loggerFactory);
    public LoggingFacility ConfiguredExternally();
    public LoggingFacility WithConfig(string configFile);
    public LoggingFacility WithLevel(LoggerLevel level);
    public LoggingFacility ToLog(string name);
    public LoggingFacility WithAppConfig();
    protected virtual void Init();
    private void ReadConfigurationAndCreateLoggerFactory();
    private Type ReadCustomLoggerType();
    private void EnsureIsValidLoggerFactoryType();
    private void CreateProperLoggerFactory();
    private string GetConfigFile();
    private Object[] GetLoggingFactoryArguments();
    private bool IsConfiguredExternally();
    private Nullable`1<LoggerLevel> GetLoggingLevel();
    private void RegisterDefaultILogger(ILoggerFactory factory);
    private void RegisterLoggerFactory(ILoggerFactory factory);
    private void RegisterSubResolver(ILoggerFactory loggerFactory);
    private void SetUpTypeConverter();
}
