internal class Castle.Windsor.MsDependencyInjection.DisposeAction : object {
    private Action _action;
    public DisposeAction(Action action);
    public sealed virtual void Dispose();
}
public class Castle.Windsor.MsDependencyInjection.GlobalMsLifetimeScope : MsLifetimeScope {
    public GlobalMsLifetimeScope(IWindsorContainer container);
    protected virtual void DisposeInternal();
}
public class Castle.Windsor.MsDependencyInjection.GlobalScopedWindsorServiceProvider : ScopedWindsorServiceProvider {
    public GlobalScopedWindsorServiceProvider(IWindsorContainer container, MsLifetimeScopeProvider msLifetimeScopeProvider);
    public sealed virtual void Dispose();
}
public interface Castle.Windsor.MsDependencyInjection.IMsLifetimeScope {
    public ILifetimeScope WindsorLifeTimeScope { get; }
    public abstract virtual ILifetimeScope get_WindsorLifeTimeScope();
    public abstract virtual void AddInstance(object instance);
    public abstract virtual void AddChild(MsLifetimeScope lifetimeScope);
    public abstract virtual void RemoveChild(MsLifetimeScope lifetimeScope);
    public abstract virtual void Dispose();
}
public class Castle.Windsor.MsDependencyInjection.MsCompatibleCollectionResolver : CollectionResolver {
    public MsCompatibleCollectionResolver(IKernel kernel);
    public virtual bool CanResolve(CreationContext context, ISubDependencyResolver contextHandlerResolver, ComponentModel model, DependencyModel dependency);
    public virtual object Resolve(CreationContext context, ISubDependencyResolver contextHandlerResolver, ComponentModel model, DependencyModel dependency);
}
public class Castle.Windsor.MsDependencyInjection.MsLifetimeScope : object {
    private static AsyncLocal`1<IMsLifetimeScope> _current;
    [CompilerGeneratedAttribute]
private ILifetimeScope <WindsorLifeTimeScope>k__BackingField;
    [CompilerGeneratedAttribute]
private IWindsorContainer <Container>k__BackingField;
    private List`1<MsLifetimeScope> _children;
    private List`1<object> _resolvedInstances;
    private ThreadSafeFlag _disposed;
    public static IMsLifetimeScope Current { get; public set; }
    public ILifetimeScope WindsorLifeTimeScope { get; }
    protected IWindsorContainer Container { get; }
    public MsLifetimeScope(IWindsorContainer container);
    private static MsLifetimeScope();
    public static IMsLifetimeScope get_Current();
    public static void set_Current(IMsLifetimeScope value);
    [CompilerGeneratedAttribute]
public sealed virtual ILifetimeScope get_WindsorLifeTimeScope();
    [CompilerGeneratedAttribute]
protected IWindsorContainer get_Container();
    public sealed virtual void AddInstance(object instance);
    public sealed virtual void AddChild(MsLifetimeScope lifetimeScope);
    public sealed virtual void RemoveChild(MsLifetimeScope lifetimeScope);
    public sealed virtual void Dispose();
    protected virtual void DisposeInternal();
    public static IDisposable Using(IMsLifetimeScope newLifetimeScope);
}
public class Castle.Windsor.MsDependencyInjection.MsLifetimeScopeProvider : object {
    [CompilerGeneratedAttribute]
private IMsLifetimeScope <LifetimeScope>k__BackingField;
    public IMsLifetimeScope LifetimeScope { get; }
    [CompilerGeneratedAttribute]
public IMsLifetimeScope get_LifetimeScope();
}
public class Castle.Windsor.MsDependencyInjection.MsOptionsSubResolver : object {
    private IKernel _kernel;
    public MsOptionsSubResolver(IKernel kernel);
    public sealed virtual bool CanResolve(CreationContext context, ISubDependencyResolver contextHandlerResolver, ComponentModel model, DependencyModel dependency);
    public sealed virtual object Resolve(CreationContext context, ISubDependencyResolver contextHandlerResolver, ComponentModel model, DependencyModel dependency);
}
public class Castle.Windsor.MsDependencyInjection.MsScopedAccesor : object {
    public sealed virtual void Dispose();
    public sealed virtual ILifetimeScope GetScope(CreationContext context);
}
public class Castle.Windsor.MsDependencyInjection.MsScopedLifestyleManager : ScopedLifestyleManager {
    public virtual object Resolve(CreationContext context, IReleasePolicy releasePolicy);
}
public class Castle.Windsor.MsDependencyInjection.ScopedWindsorServiceProvider : object {
    private IWindsorContainer _container;
    [CompilerGeneratedAttribute]
private IMsLifetimeScope <OwnMsLifetimeScope>k__BackingField;
    private static AsyncLocal`1<bool> _isInResolving;
    protected IMsLifetimeScope OwnMsLifetimeScope { get; }
    public static bool IsInResolving { get; public set; }
    public ScopedWindsorServiceProvider(IWindsorContainer container, MsLifetimeScopeProvider msLifetimeScopeProvider);
    private static ScopedWindsorServiceProvider();
    [CompilerGeneratedAttribute]
protected IMsLifetimeScope get_OwnMsLifetimeScope();
    public static bool get_IsInResolving();
    public static void set_IsInResolving(bool value);
    public sealed virtual object GetService(Type serviceType);
    public sealed virtual object GetRequiredService(Type serviceType);
    private object GetServiceInternal(Type serviceType, bool isOptional);
    private object ResolveInstanceOrNull(Type serviceType, bool isOptional);
    public sealed virtual bool IsService(Type serviceType);
}
[ExtensionAttribute]
public static class Castle.Windsor.MsDependencyInjection.ServiceCollectionExtensions : object {
    [ExtensionAttribute]
public static T GetSingletonServiceOrNull(IServiceCollection services);
    [ExtensionAttribute]
public static T GetSingletonService(IServiceCollection services);
}
[ExtensionAttribute]
public static class Castle.Windsor.MsDependencyInjection.WindsorRegistrationHelper : object {
    public static IServiceProvider CreateServiceProvider(IWindsorContainer container, IServiceCollection services);
    [ExtensionAttribute]
public static void AddServices(IWindsorContainer container, IServiceCollection services);
    private static void AddBaseServices(IWindsorContainer container);
    private static void AddSubResolvers(IWindsorContainer container);
    private static void AddServicesCollection(IWindsorContainer container, IServiceCollection services);
    private static void RegisterServiceDescriptor(IWindsorContainer container, ServiceDescriptor serviceDescriptor);
    [ExtensionAttribute]
private static ComponentRegistration`1<object> ConfigureLifecycle(ComponentRegistration`1<object> registrationBuilder, ServiceLifetime serviceLifetime);
}
public class Castle.Windsor.MsDependencyInjection.WindsorServiceProviderFactory : object {
    public sealed virtual IWindsorContainer CreateBuilder(IServiceCollection services);
    public sealed virtual IServiceProvider CreateServiceProvider(IWindsorContainer containerBuilder);
}
public class Castle.Windsor.MsDependencyInjection.WindsorServiceScope : object {
    [CompilerGeneratedAttribute]
private IServiceProvider <ServiceProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private MsLifetimeScope <LifetimeScope>k__BackingField;
    private IWindsorContainer _container;
    private IMsLifetimeScope _parentLifetimeScope;
    public IServiceProvider ServiceProvider { get; }
    public MsLifetimeScope LifetimeScope { get; }
    public WindsorServiceScope(IWindsorContainer container, IMsLifetimeScope currentMsLifetimeScope);
    [CompilerGeneratedAttribute]
public sealed virtual IServiceProvider get_ServiceProvider();
    [CompilerGeneratedAttribute]
public MsLifetimeScope get_LifetimeScope();
    public sealed virtual void Dispose();
}
public class Castle.Windsor.MsDependencyInjection.WindsorServiceScopeFactory : object {
    private IWindsorContainer _container;
    private IMsLifetimeScope _msLifetimeScope;
    public WindsorServiceScopeFactory(IWindsorContainer container, MsLifetimeScopeProvider msLifetimeScopeProvider);
    public sealed virtual IServiceScope CreateScope();
}
