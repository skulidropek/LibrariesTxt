[NativeCppClassAttribute]
internal class __crt_fast_encoded_nullptr_t : ValueType {
}
[NativeCppClassAttribute]
internal class __crt_locale_data_public : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class __crt_locale_pointers : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal enum __MIDL___MIDL_itf_gchost_0000_0000_0001 : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum __MIDL___MIDL_itf_gchost_0000_0000_0002 : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum __MIDL___MIDL_itf_mscoree_0000_0000_0001 : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum __MIDL___MIDL_itf_mscoree_0000_0000_0002 : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum __MIDL___MIDL_itf_mscoree_0000_0000_0003 : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum __MIDL___MIDL_itf_mscoree_0000_0000_0004 : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum __MIDL___MIDL_itf_mscoree_0000_0000_0005 : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum __MIDL___MIDL_itf_mscoree_0000_0009_0001 : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum __MIDL___MIDL_itf_mscoree_0000_0009_0002 : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum __MIDL___MIDL_itf_mscoree_0000_0009_0003 : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum __MIDL___MIDL_itf_mscoree_0000_0011_0001 : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum __MIDL___MIDL_itf_mscoree_0000_0020_0001 : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum __MIDL___MIDL_itf_mscoree_0000_0021_0001 : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum __MIDL___MIDL_itf_mscoree_0000_0021_0002 : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum __MIDL___MIDL_itf_mscoree_0000_0028_0001 : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum __MIDL___MIDL_itf_mscoree_0000_0028_0002 : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum __MIDL___MIDL_itf_mscoree_0000_0028_0003 : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum __MIDL___MIDL_itf_mscoree_0000_0028_0004 : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum __MIDL___MIDL_itf_mscoree_0000_0030_0001 : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum __MIDL___MIDL_itf_mscoree_0000_0030_0002 : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum __MIDL___MIDL_itf_mscoree_0000_0040_0001 : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum __MIDL___MIDL_itf_mscoree_0000_0045_0001 : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum __MIDL___MIDL_itf_mscoree_0000_0046_0001 : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum __MIDL___MIDL_itf_mscoree_0000_0048_0001 : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum __MIDL_IAuthenticateEx_0001 : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum __MIDL_IBindStatusCallback_0001 : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum __MIDL_IBindStatusCallback_0002 : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum __MIDL_IBindStatusCallback_0003 : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum __MIDL_IBindStatusCallback_0004 : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum __MIDL_IBindStatusCallback_0005 : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum __MIDL_IBindStatusCallback_0006 : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum __MIDL_IBindStatusCallbackEx_0001 : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum __MIDL_ICodeInstall_0001 : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum __MIDL_IGetBindHandle_0001 : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum __MIDL_IInternetSecurityManager_0001 : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum __MIDL_IInternetSecurityManager_0002 : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum __MIDL_IInternetSecurityManager_0003 : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum __MIDL_IInternetZoneManager_0001 : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum __MIDL_IInternetZoneManager_0002 : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum __MIDL_IMonikerProp_0001 : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum __MIDL_IUri_0001 : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum __MIDL_IUri_0002 : Enum {
    public int value__;
}
[UnsafeValueTypeAttribute]
[NativeCppClassAttribute]
internal class __s_GUID : ValueType {
    private int <alignment member>;
}
[NativeCppClassAttribute]
internal enum __scrt_module_type : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum __scrt_native_startup_state : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal class __std_exception_data : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
[UnsafeValueTypeAttribute]
internal class __std_type_info_data : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class __type_info_node : ValueType {
}
[NativeCppClassAttribute]
internal enum __vcrt_lock_id : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _ACCESS_REASON_TYPE : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _ACL_INFORMATION_CLASS : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _ACTIVATION_CONTEXT_INFO_CLASS : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal class _AMD64_MXCSR_REG : ValueType {
    private int <alignment member>;
}
[NativeCppClassAttribute]
internal enum _APTTYPE : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _APTTYPEQUALIFIER : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal class _ARM64_FPCR_REG : ValueType {
    private int <alignment member>;
}
[NativeCppClassAttribute]
internal class _ARM64_FPSR_REG : ValueType {
    private int <alignment member>;
}
[NativeCppClassAttribute]
internal enum _AUDIT_EVENT_TYPE : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal class _cef_accelerated_paint_info_t : ValueType {
    private long <alignment member>;
}
[UnsafeValueTypeAttribute]
[NativeCppClassAttribute]
internal class _cef_audio_parameters_t : ValueType {
    private int <alignment member>;
}
[NativeCppClassAttribute]
internal class _cef_basetime_t : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
[UnsafeValueTypeAttribute]
internal class _cef_box_layout_settings_t : ValueType {
    private int <alignment member>;
}
[NativeCppClassAttribute]
internal class _cef_browser_settings_t : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
[UnsafeValueTypeAttribute]
internal class _cef_composition_underline_t : ValueType {
    private int <alignment member>;
}
[NativeCppClassAttribute]
internal class _cef_cookie_t : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class _cef_cursor_info_t : ValueType {
    private long <alignment member>;
}
[UnsafeValueTypeAttribute]
[NativeCppClassAttribute]
internal class _cef_draggable_region_t : ValueType {
    private int <alignment member>;
}
[UnsafeValueTypeAttribute]
[NativeCppClassAttribute]
internal class _cef_insets_t : ValueType {
    private int <alignment member>;
}
[NativeCppClassAttribute]
[UnsafeValueTypeAttribute]
internal class _cef_key_event_t : ValueType {
    private int <alignment member>;
}
[NativeCppClassAttribute]
internal class _cef_linux_window_properties_t : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class _cef_main_args_t : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class _cef_media_sink_device_info_t : ValueType {
    private long <alignment member>;
}
[UnsafeValueTypeAttribute]
[NativeCppClassAttribute]
internal class _cef_mouse_event_t : ValueType {
    private int <alignment member>;
}
[NativeCppClassAttribute]
internal class _cef_pdf_print_settings_t : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class _cef_point_t : ValueType {
    private int <alignment member>;
}
[NativeCppClassAttribute]
[UnsafeValueTypeAttribute]
internal class _cef_popup_features_t : ValueType {
    private int <alignment member>;
}
[NativeCppClassAttribute]
internal class _cef_range_t : ValueType {
    private int <alignment member>;
}
[UnsafeValueTypeAttribute]
[NativeCppClassAttribute]
internal class _cef_rect_t : ValueType {
    private int <alignment member>;
}
[NativeCppClassAttribute]
internal class _cef_request_context_settings_t : ValueType {
    private long <alignment member>;
}
[UnsafeValueTypeAttribute]
[NativeCppClassAttribute]
internal class _cef_screen_info_t : ValueType {
    private int <alignment member>;
}
[NativeCppClassAttribute]
internal class _cef_settings_t : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class _cef_size_t : ValueType {
    private int <alignment member>;
}
[NativeCppClassAttribute]
internal class _cef_string_utf16_t : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class _cef_string_utf8_t : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class _cef_string_wide_t : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class _cef_task_info_t : ValueType {
    private long <alignment member>;
}
[UnsafeValueTypeAttribute]
[NativeCppClassAttribute]
internal class _cef_time_t : ValueType {
    private int <alignment member>;
}
[UnsafeValueTypeAttribute]
[NativeCppClassAttribute]
internal class _cef_touch_event_t : ValueType {
    private int <alignment member>;
}
[NativeCppClassAttribute]
[UnsafeValueTypeAttribute]
internal class _cef_touch_handle_state_t : ValueType {
    private int <alignment member>;
}
[NativeCppClassAttribute]
internal class _cef_urlparts_t : ValueType {
    private long <alignment member>;
}
[UnsafeValueTypeAttribute]
[NativeCppClassAttribute]
internal class _cef_window_info_t : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal enum _CLRAssemblyIdentityFlags : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _CM_ERROR_CONTROL_TYPE : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _CM_SERVICE_LOAD_TYPE : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _CM_SERVICE_NODE_TYPE : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal class _Collvec : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal enum _COMPUTER_NAME_FORMAT : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _COPYFILE2_COPY_PHASE : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _COPYFILE2_MESSAGE_ACTION : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _COPYFILE2_MESSAGE_TYPE : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _CPU_SET_INFORMATION_TYPE : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _crt_app_type : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _crt_argv_mode : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _crt_exit_cleanup_mode : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _crt_exit_return_mode : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal class _Ctypevec : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
[UnsafeValueTypeAttribute]
internal class _Cvtvec : ValueType {
    private int <alignment member>;
}
[NativeCppClassAttribute]
internal enum _DEP_SYSTEM_POLICY_TYPE : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _DEVICE_POWER_STATE : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _DISPLAYCONFIG_COLOR_ENCODING : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _ENLISTMENT_INFORMATION_CLASS : Enum {
    public int value__;
}
[UnsafeValueTypeAttribute]
[NativeCppClassAttribute]
internal class _EVENT_DATA_DESCRIPTOR : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
[UnsafeValueTypeAttribute]
internal class _EVENT_DESCRIPTOR : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal enum _EVENT_INFO_CLASS : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _EXCEPTION_DISPOSITION : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal class _EXCEPTION_POINTERS : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal enum _FILE_ID_TYPE : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _FILE_INFO_BY_HANDLE_CLASS : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _FINDEX_INFO_LEVELS : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _FINDEX_SEARCH_OPS : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _FIRMWARE_TYPE : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _GET_FILEEX_INFO_LEVELS : Enum {
    public int value__;
}
[NativeCppClassAttribute]
[UnsafeValueTypeAttribute]
internal class _GUID : ValueType {
    private int <alignment member>;
}
[NativeCppClassAttribute]
internal enum _HARDWARE_COUNTER_TYPE : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _HEAP_INFORMATION_CLASS : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _HIBERFILE_BUCKET_SIZE : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _HostApplicationPolicy : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _hostBiningPolicyModifyFlags : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _IDL_CS_CONVERT : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _IMAGE_POLICY_ENTRY_TYPE : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _IMAGE_POLICY_ID : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal class _iobuf : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal enum _JOBOBJECT_RATE_CONTROL_TOLERANCE : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _JOBOBJECTINFOCLASS : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _KTMOBJECT_TYPE : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal class _ldiv_t : ValueType {
    private int <alignment member>;
}
[UnsafeValueTypeAttribute]
[NativeCppClassAttribute]
internal class _lldiv_t : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal enum _LOGICAL_PROCESSOR_RELATIONSHIP : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _LRPC_SYSTEM_HANDLE_MARSHAL_DIRECTION : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _MACHINE_ATTRIBUTES : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _MANDATORY_LEVEL : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal class _Mbstatet : ValueType {
    private int <alignment member>;
}
[NativeCppClassAttribute]
internal enum _MEM_DEDICATED_ATTRIBUTE_TYPE : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _MEMORY_RESOURCE_NOTIFICATION_TYPE : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _MONITOR_DISPLAY_STATE : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _NORM_FORM : Enum {
    public int value__;
}
[NativeCppClassAttribute]
[UnsafeValueTypeAttribute]
internal class _OSVERSIONINFOEXW : ValueType {
    private int <alignment member>;
}
[NativeCppClassAttribute]
internal enum _POWER_MONITOR_REQUEST_TYPE : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _POWER_PLATFORM_ROLE : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _POWER_REQUEST_TYPE : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _PRIORITY_HINT : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _PROC_THREAD_ATTRIBUTE_NUM : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _PROCESS_INFORMATION_CLASS : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _PROCESS_MEMORY_EXHAUSTION_TYPE : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _PROCESS_MITIGATION_POLICY : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _PROCESSOR_CACHE_TYPE : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _RESOURCEMANAGER_INFORMATION_CLASS : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _RPC_ASYNC_EVENT : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _RPC_HTTP_REDIRECTOR_STAGE : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _RPC_NOTIFICATION_TYPES : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _RPC_NOTIFICATIONS : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _RTL_UMS_SCHEDULER_REASON : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _RTL_UMS_THREAD_INFO_CLASS : Enum {
    public int value__;
}
[UnsafeValueTypeAttribute]
[NativeCppClassAttribute]
internal class _s__CatchableType : ValueType {
    private int <alignment member>;
}
[UnsafeValueTypeAttribute]
[NativeCppClassAttribute]
internal class _s__RTTIBaseClassDescriptor : ValueType {
    private int <alignment member>;
}
[NativeCppClassAttribute]
internal class _s__RTTIClassHierarchyDescriptor : ValueType {
    private int <alignment member>;
}
[NativeCppClassAttribute]
internal class _s__RTTICompleteObjectLocator2 : ValueType {
    private int <alignment member>;
}
[NativeCppClassAttribute]
internal class _s__ThrowInfo : ValueType {
    private int <alignment member>;
}
[NativeCppClassAttribute]
internal enum _SC_ACTION_TYPE : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _SC_ENUM_TYPE : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _SC_STATUS_TYPE : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _SE_IMAGE_SIGNATURE_TYPE : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _SE_LEARNING_MODE_DATA_TYPE : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal class _SECURITY_ATTRIBUTES : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal enum _SECURITY_IMPERSONATION_LEVEL : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _SERVERSILO_STATE : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _SID_NAME_USE : Enum {
    public int value__;
}
[UnsafeValueTypeAttribute]
[NativeCppClassAttribute]
internal class _stat64i32 : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal enum _STREAM_INFO_LEVELS : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _system_handle_t : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _SYSTEM_POWER_STATE : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _tagINTERNETFEATURELIST : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _tagOIBDG_FLAGS : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _tagPARSEACTION : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _tagPI_FLAGS : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _tagPSUACTION : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _tagQUERYOPTION : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _TAPE_DRIVE_PROBLEM_TYPE : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _THDTYPE : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _THREAD_INFORMATION_CLASS : Enum {
    public int value__;
}
[NativeCppClassAttribute]
[UnsafeValueTypeAttribute]
internal class _timespec64 : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal enum _TOKEN_ELEVATION_TYPE : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _TOKEN_INFORMATION_CLASS : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _TOKEN_TYPE : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal class _TP_CALLBACK_ENVIRON_V1 : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class _TP_CALLBACK_ENVIRON_V3 : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal enum _TP_CALLBACK_PRIORITY : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _TRANSACTION_INFORMATION_CLASS : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _TRANSACTION_OUTCOME : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _TRANSACTION_STATE : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _TRANSACTIONMANAGER_INFORMATION_CLASS : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _URLZONEREG : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _USER_ACTIVITY_PRESENCE : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum _USER_MARSHAL_CB_TYPE : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal class ?A0x02c29c6a.__clr_placement_new_t : ValueType {
}
[NativeCppClassAttribute]
internal class ?A0x05276581.__clr_placement_new_t : ValueType {
}
[NativeCppClassAttribute]
internal class ?A0x07c3809d.__clr_placement_new_t : ValueType {
}
[NativeCppClassAttribute]
internal class ?A0x0abdabff.__clr_placement_new_t : ValueType {
}
[NativeCppClassAttribute]
internal class ?A0x10d2dd13.__clr_placement_new_t : ValueType {
}
[NativeCppClassAttribute]
internal class ?A0x1824f149.__clr_placement_new_t : ValueType {
}
[NativeCppClassAttribute]
internal class ?A0x1d8e09cc.__clr_placement_new_t : ValueType {
}
[NativeCppClassAttribute]
internal class ?A0x226f0ffa.__clr_placement_new_t : ValueType {
}
[NativeCppClassAttribute]
internal class ?A0x35327bfc.__clr_placement_new_t : ValueType {
}
[NativeCppClassAttribute]
internal class ?A0x3ba4b134.__clr_placement_new_t : ValueType {
}
[NativeCppClassAttribute]
internal class ?A0x3fa0cce5.__clr_placement_new_t : ValueType {
}
[NativeCppClassAttribute]
internal class ?A0x4b2a9364.__clr_placement_new_t : ValueType {
}
[NativeCppClassAttribute]
internal class ?A0x64a869d6.__clr_placement_new_t : ValueType {
}
[NativeCppClassAttribute]
internal class ?A0x6c68587d.__clr_placement_new_t : ValueType {
}
[NativeCppClassAttribute]
internal class ?A0x71c43e0d.__clr_placement_new_t : ValueType {
}
[NativeCppClassAttribute]
internal class ?A0x7dd8e755.__clr_placement_new_t : ValueType {
}
[NativeCppClassAttribute]
internal class ?A0x8e9e6c2f.__clr_placement_new_t : ValueType {
}
[NativeCppClassAttribute]
internal class ?A0x939f73c7.__clr_placement_new_t : ValueType {
}
[NativeCppClassAttribute]
internal class ?A0x98947fd2.__clr_placement_new_t : ValueType {
}
[NativeCppClassAttribute]
internal class ?A0x9c669bbe.__clr_placement_new_t : ValueType {
}
[NativeCppClassAttribute]
internal class ?A0x9db2827c.__clr_placement_new_t : ValueType {
}
[NativeCppClassAttribute]
internal class ?A0xb70c1e49.__clr_placement_new_t : ValueType {
}
[NativeCppClassAttribute]
internal class ?A0xb8c102fd.__clr_placement_new_t : ValueType {
}
[NativeCppClassAttribute]
internal class ?A0xc9059d12.__clr_placement_new_t : ValueType {
}
[NativeCppClassAttribute]
internal class ?A0xc99a41ba.__clr_placement_new_t : ValueType {
}
[NativeCppClassAttribute]
internal class ?A0xd11d59d0.__clr_placement_new_t : ValueType {
}
[NativeCppClassAttribute]
internal class ?A0xd538153d.__clr_placement_new_t : ValueType {
}
[NativeCppClassAttribute]
internal class ?A0xd9fddc76.__clr_placement_new_t : ValueType {
}
[NativeCppClassAttribute]
internal class ?A0xe1c5f4c8.__clr_placement_new_t : ValueType {
}
[NativeCppClassAttribute]
internal class ?A0xed805051.__clr_placement_new_t : ValueType {
}
[NativeCppClassAttribute]
internal class $_s__CatchableTypeArray$_extraBytes_16 : ValueType {
    private int <alignment member>;
}
[NativeCppClassAttribute]
internal class $_s__CatchableTypeArray$_extraBytes_24 : ValueType {
    private int <alignment member>;
}
[NativeCppClassAttribute]
internal class $_s__CatchableTypeArray$_extraBytes_32 : ValueType {
    private int <alignment member>;
}
[NativeCppClassAttribute]
internal class $_s__CatchableTypeArray$_extraBytes_40 : ValueType {
    private int <alignment member>;
}
[NativeCppClassAttribute]
internal class $_s__RTTIBaseClassArray$_extraBytes_16 : ValueType {
    private int <alignment member>;
}
[NativeCppClassAttribute]
internal class $_s__RTTIBaseClassArray$_extraBytes_24 : ValueType {
    private int <alignment member>;
}
[NativeCppClassAttribute]
internal class $_s__RTTIBaseClassArray$_extraBytes_264 : ValueType {
    private int <alignment member>;
}
[NativeCppClassAttribute]
internal class $_s__RTTIBaseClassArray$_extraBytes_304 : ValueType {
    private int <alignment member>;
}
[NativeCppClassAttribute]
internal class $_s__RTTIBaseClassArray$_extraBytes_32 : ValueType {
    private int <alignment member>;
}
[NativeCppClassAttribute]
internal class $_s__RTTIBaseClassArray$_extraBytes_40 : ValueType {
    private int <alignment member>;
}
[NativeCppClassAttribute]
internal class $_s__RTTIBaseClassArray$_extraBytes_72 : ValueType {
    private int <alignment member>;
}
[NativeCppClassAttribute]
internal class $_s__RTTIBaseClassArray$_extraBytes_8 : ValueType {
    private int <alignment member>;
}
[NativeCppClassAttribute]
internal class $_s__RTTIBaseClassArray$_extraBytes_80 : ValueType {
    private int <alignment member>;
}
[NativeCppClassAttribute]
[UnsafeValueTypeAttribute]
internal class $_TypeDescriptor$_extraBytes_13 : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
[UnsafeValueTypeAttribute]
internal class $_TypeDescriptor$_extraBytes_14 : ValueType {
    private long <alignment member>;
}
[UnsafeValueTypeAttribute]
[NativeCppClassAttribute]
internal class $_TypeDescriptor$_extraBytes_16 : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
[UnsafeValueTypeAttribute]
internal class $_TypeDescriptor$_extraBytes_19 : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
[UnsafeValueTypeAttribute]
internal class $_TypeDescriptor$_extraBytes_20 : ValueType {
    private long <alignment member>;
}
[UnsafeValueTypeAttribute]
[NativeCppClassAttribute]
internal class $_TypeDescriptor$_extraBytes_21 : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
[UnsafeValueTypeAttribute]
internal class $_TypeDescriptor$_extraBytes_22 : ValueType {
    private long <alignment member>;
}
[UnsafeValueTypeAttribute]
[NativeCppClassAttribute]
internal class $_TypeDescriptor$_extraBytes_23 : ValueType {
    private long <alignment member>;
}
[UnsafeValueTypeAttribute]
[NativeCppClassAttribute]
internal class $_TypeDescriptor$_extraBytes_24 : ValueType {
    private long <alignment member>;
}
[UnsafeValueTypeAttribute]
[NativeCppClassAttribute]
internal class $_TypeDescriptor$_extraBytes_25 : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
[UnsafeValueTypeAttribute]
internal class $_TypeDescriptor$_extraBytes_26 : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
[UnsafeValueTypeAttribute]
internal class $_TypeDescriptor$_extraBytes_27 : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
[UnsafeValueTypeAttribute]
internal class $_TypeDescriptor$_extraBytes_28 : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
[UnsafeValueTypeAttribute]
internal class $_TypeDescriptor$_extraBytes_30 : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
[UnsafeValueTypeAttribute]
internal class $_TypeDescriptor$_extraBytes_31 : ValueType {
    private long <alignment member>;
}
[UnsafeValueTypeAttribute]
[NativeCppClassAttribute]
internal class $_TypeDescriptor$_extraBytes_32 : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
[UnsafeValueTypeAttribute]
internal class $_TypeDescriptor$_extraBytes_33 : ValueType {
    private long <alignment member>;
}
[UnsafeValueTypeAttribute]
[NativeCppClassAttribute]
internal class $_TypeDescriptor$_extraBytes_34 : ValueType {
    private long <alignment member>;
}
[UnsafeValueTypeAttribute]
[NativeCppClassAttribute]
internal class $_TypeDescriptor$_extraBytes_35 : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
[UnsafeValueTypeAttribute]
internal class $_TypeDescriptor$_extraBytes_36 : ValueType {
    private long <alignment member>;
}
[UnsafeValueTypeAttribute]
[NativeCppClassAttribute]
internal class $_TypeDescriptor$_extraBytes_37 : ValueType {
    private long <alignment member>;
}
[UnsafeValueTypeAttribute]
[NativeCppClassAttribute]
internal class $_TypeDescriptor$_extraBytes_38 : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
[UnsafeValueTypeAttribute]
internal class $_TypeDescriptor$_extraBytes_39 : ValueType {
    private long <alignment member>;
}
[UnsafeValueTypeAttribute]
[NativeCppClassAttribute]
internal class $_TypeDescriptor$_extraBytes_40 : ValueType {
    private long <alignment member>;
}
[UnsafeValueTypeAttribute]
[NativeCppClassAttribute]
internal class $_TypeDescriptor$_extraBytes_41 : ValueType {
    private long <alignment member>;
}
[UnsafeValueTypeAttribute]
[NativeCppClassAttribute]
internal class $_TypeDescriptor$_extraBytes_43 : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
[UnsafeValueTypeAttribute]
internal class $_TypeDescriptor$_extraBytes_45 : ValueType {
    private long <alignment member>;
}
[UnsafeValueTypeAttribute]
[NativeCppClassAttribute]
internal class $_TypeDescriptor$_extraBytes_46 : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
[UnsafeValueTypeAttribute]
internal class $_TypeDescriptor$_extraBytes_48 : ValueType {
    private long <alignment member>;
}
[UnsafeValueTypeAttribute]
[NativeCppClassAttribute]
internal class $_TypeDescriptor$_extraBytes_49 : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
[UnsafeValueTypeAttribute]
internal class $_TypeDescriptor$_extraBytes_50 : ValueType {
    private long <alignment member>;
}
[UnsafeValueTypeAttribute]
[NativeCppClassAttribute]
internal class $_TypeDescriptor$_extraBytes_51 : ValueType {
    private long <alignment member>;
}
[UnsafeValueTypeAttribute]
[NativeCppClassAttribute]
internal class $_TypeDescriptor$_extraBytes_52 : ValueType {
    private long <alignment member>;
}
[UnsafeValueTypeAttribute]
[NativeCppClassAttribute]
internal class $_TypeDescriptor$_extraBytes_53 : ValueType {
    private long <alignment member>;
}
[UnsafeValueTypeAttribute]
[NativeCppClassAttribute]
internal class $_TypeDescriptor$_extraBytes_54 : ValueType {
    private long <alignment member>;
}
[UnsafeValueTypeAttribute]
[NativeCppClassAttribute]
internal class $_TypeDescriptor$_extraBytes_56 : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
[UnsafeValueTypeAttribute]
internal class $_TypeDescriptor$_extraBytes_57 : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
[UnsafeValueTypeAttribute]
internal class $_TypeDescriptor$_extraBytes_58 : ValueType {
    private long <alignment member>;
}
[UnsafeValueTypeAttribute]
[NativeCppClassAttribute]
internal class $_TypeDescriptor$_extraBytes_59 : ValueType {
    private long <alignment member>;
}
[UnsafeValueTypeAttribute]
[NativeCppClassAttribute]
internal class $_TypeDescriptor$_extraBytes_69 : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
[UnsafeValueTypeAttribute]
internal class $_TypeDescriptor$_extraBytes_72 : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
[UnsafeValueTypeAttribute]
internal class $_TypeDescriptor$_extraBytes_73 : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
[UnsafeValueTypeAttribute]
internal class $_TypeDescriptor$_extraBytes_74 : ValueType {
    private long <alignment member>;
}
[UnsafeValueTypeAttribute]
[NativeCppClassAttribute]
internal class $_TypeDescriptor$_extraBytes_75 : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
[UnsafeValueTypeAttribute]
internal class $_TypeDescriptor$_extraBytes_77 : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal enum ARM64_FNPDATA_CR : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum ARM64_FNPDATA_FLAGS : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal class base.AtomicRefCount : ValueType {
    private int <alignment member>;
}
[NativeCppClassAttribute]
internal class base.cef_internal.AutoLock : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class base.cef_internal.AutoUnlock : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class base.cef_internal.Lock : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class base.cef_internal.LockImpl : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class base.cef_internal.ThreadCheckerDoNothing : ValueType {
}
[NativeCppClassAttribute]
internal class base.cef_internal.ThreadCheckerImpl : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal enum base.cef_subtle.AdoptRefTag : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal class base.cef_subtle.RefCountedBase : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class base.cef_subtle.RefCountedThreadSafeBase : ValueType {
    private int <alignment member>;
}
[NativeCppClassAttribute]
internal enum base.cef_subtle.StartRefCountFromOneTag : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum base.cef_subtle.StartRefCountFromZeroTag : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal class base.PlatformThreadRef : ValueType {
    private int <alignment member>;
}
[NativeCppClassAttribute]
internal class base.ThreadChecker : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal enum cef_alpha_type_t : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum cef_cert_status_t : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum cef_chrome_page_action_icon_type_t : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum cef_chrome_toolbar_button_type_t : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum cef_color_type_t : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum cef_context_menu_edit_state_flags_t : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum cef_context_menu_media_state_flags_t : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum cef_context_menu_media_type_t : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum cef_context_menu_type_flags_t : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum cef_cursor_type_t : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum cef_drag_operations_mask_t : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum cef_errorcode_t : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum cef_event_flags_t : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum cef_file_dialog_mode_t : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum cef_focus_source_t : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum cef_horizontal_alignment_t : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum cef_jsdialog_type_t : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum cef_json_parser_options_t : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum cef_log_severity_t : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum cef_menu_item_type_t : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum cef_mouse_button_type_t : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum cef_paint_element_type_t : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum cef_permission_request_result_t : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum cef_postdataelement_type_t : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum cef_preferences_type_t : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum cef_process_id_t : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum cef_quick_menu_edit_state_flags_t : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum cef_referrer_policy_t : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum cef_resource_type_t : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum cef_response_filter_status_t : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum cef_return_value_t : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum cef_ssl_content_status_t : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum cef_ssl_version_t : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum cef_state_t : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum cef_termination_status_t : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum cef_text_input_mode_t : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum cef_thread_id_t : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum cef_transition_type_t : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum cef_urlrequest_status_t : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum cef_value_type_t : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum cef_window_open_disposition_t : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal class cef.logging.LogMessage : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class cef.logging.LogMessageVoidify : ValueType {
}
[NativeCppClassAttribute]
internal class cef.logging.Win32ErrorLogMessage : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class CefAcceleratedPaintInfo : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal static class CefAccessibilityHandler : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal static class CefApp : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal static class CefAudioHandler : ValueType {
    private long <alignment member>;
}
[UnsafeValueTypeAttribute]
[NativeCppClassAttribute]
internal class CefAudioParameters : ValueType {
    private int <alignment member>;
}
[NativeCppClassAttribute]
internal static class CefAuthCallback : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal static class CefBaseRefCounted : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class CefBaseScoped : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class CefBaseTime : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal static class CefBeforeDownloadCallback : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal static class CefBinaryValue : ValueType {
    private long <alignment member>;
}
[UnsafeValueTypeAttribute]
[NativeCppClassAttribute]
internal class CefBoxLayoutSettings : ValueType {
    private int <alignment member>;
}
[NativeCppClassAttribute]
internal static class CefBrowser : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal static class CefBrowserHost : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal static class CefBrowserProcessHandler : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class CefBrowserSettingsTraits : ValueType {
}
[NativeCppClassAttribute]
internal static class CefCallback : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal static class CefClient : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal static class CefCommandHandler : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal static class CefCommandLine : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal static class CefCompletionCallback : ValueType {
    private long <alignment member>;
}
[UnsafeValueTypeAttribute]
[NativeCppClassAttribute]
internal class CefCompositionUnderline : ValueType {
    private int <alignment member>;
}
[NativeCppClassAttribute]
internal static class CefContextMenuHandler : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal static class CefContextMenuParams : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal static class CefCookieAccessFilter : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal static class CefCookieManager : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class CefCookieTraits : ValueType {
}
[NativeCppClassAttribute]
internal static class CefCookieVisitor : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class CefCursorInfo : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal static class CefDeleteCookiesCallback : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal static class CefDevToolsMessageObserver : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal static class CefDialogHandler : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal static class CefDictionaryValue : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal static class CefDisplayHandler : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal static class CefDOMNode : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal static class CefDownloadHandler : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal static class CefDownloadItem : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal static class CefDownloadItemCallback : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal static class CefDragData : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
[UnsafeValueTypeAttribute]
internal class CefDraggableRegion : ValueType {
    private int <alignment member>;
}
[NativeCppClassAttribute]
internal static class CefDragHandler : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal static class CefFileDialogCallback : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal static class CefFindHandler : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal static class CefFocusHandler : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal static class CefFrame : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal static class CefFrameHandler : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal static class CefImage : ValueType {
    private long <alignment member>;
}
[UnsafeValueTypeAttribute]
[NativeCppClassAttribute]
internal class CefInsets : ValueType {
    private int <alignment member>;
}
[NativeCppClassAttribute]
internal static class CefJSDialogCallback : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal static class CefJSDialogHandler : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal static class CefKeyboardHandler : ValueType {
    private long <alignment member>;
}
[UnsafeValueTypeAttribute]
[NativeCppClassAttribute]
internal class CefKeyEvent : ValueType {
    private int <alignment member>;
}
[NativeCppClassAttribute]
internal static class CefLifeSpanHandler : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal static class CefListValue : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal static class CefLoadHandler : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class CefMainArgs : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal static class CefMediaAccessCallback : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal static class CefMenuModel : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal static class CefMenuModelDelegate : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
[UnsafeValueTypeAttribute]
internal class CefMouseEvent : ValueType {
    private int <alignment member>;
}
[NativeCppClassAttribute]
internal static class CefNavigationEntry : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal static class CefNavigationEntryVisitor : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal static class CefPdfPrintCallback : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class CefPdfPrintSettingsTraits : ValueType {
}
[NativeCppClassAttribute]
internal static class CefPermissionHandler : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal static class CefPermissionPromptCallback : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class CefPoint : ValueType {
    private int <alignment member>;
}
[NativeCppClassAttribute]
[UnsafeValueTypeAttribute]
internal class CefPopupFeatures : ValueType {
    private int <alignment member>;
}
[NativeCppClassAttribute]
internal static class CefPostData : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal static class CefPostDataElement : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal static class CefPreferenceManager : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal static class CefPreferenceRegistrar : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal static class CefPrintHandler : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal static class CefProcessMessage : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class CefRange : ValueType {
    private int <alignment member>;
}
[UnsafeValueTypeAttribute]
[NativeCppClassAttribute]
internal class CefRect : ValueType {
    private int <alignment member>;
}
[NativeCppClassAttribute]
internal class CefRefCount : ValueType {
    private int <alignment member>;
}
[NativeCppClassAttribute]
internal class CefRefCountManaged : ValueType {
    private int <alignment member>;
}
[NativeCppClassAttribute]
internal static class CefRegistration : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal static class CefRenderHandler : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal static class CefRenderProcessHandler : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal static class CefRequest : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal static class CefRequestContext : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal static class CefRequestContextHandler : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class CefRequestContextSettingsTraits : ValueType {
}
[NativeCppClassAttribute]
internal static class CefRequestHandler : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal static class CefResolveCallback : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal static class CefResourceBundleHandler : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal static class CefResourceHandler : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal static class CefResourceReadCallback : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal static class CefResourceRequestHandler : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal static class CefResourceSkipCallback : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal static class CefResponse : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal static class CefResponseFilter : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal static class CefRunContextMenuCallback : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal static class CefRunFileDialogCallback : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal static class CefRunQuickMenuCallback : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal static class CefSchemeHandlerFactory : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal static class CefSchemeRegistrar : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
[UnsafeValueTypeAttribute]
internal class CefScreenInfo : ValueType {
    private int <alignment member>;
}
[NativeCppClassAttribute]
internal static class CefSelectClientCertificateCallback : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal static class CefSetCookieCallback : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class CefSettingsTraits : ValueType {
}
internal class CefSharp.CookieManager : object {
    private MCefRefPtr<CefCookieManager> modreq(System.Runtime.CompilerServices.IsByValue) _cookieManager;
    public bool IsDisposed { get; }
    internal CookieManager(scoped_refptr<CefCookieManager> modopt(System.Runtime.CompilerServices.IsConst)* modopt(System.Runtime.CompilerServices.IsImplicitlyDereferenced) cookieManager);
    private void ThrowIfDisposed();
    internal scoped_refptr<CefCookieManager>* modreq(System.Runtime.CompilerServices.IsUdtReturn) op_Implicit(scoped_refptr<CefCookieManager>* );
    private void !CookieManager();
    private void ~CookieManager();
    public virtual bool DeleteCookies(string url, string name, IDeleteCookiesCallback callback);
    public virtual bool SetCookie(string url, Cookie cookie, ISetCookieCallback callback);
    public virtual bool VisitAllCookies(ICookieVisitor visitor);
    public virtual bool VisitUrlCookies(string url, bool includeHttpOnly, ICookieVisitor visitor);
    public virtual bool FlushStore(ICompletionCallback callback);
    public virtual bool get_IsDisposed();
    [HandleProcessCorruptedStateExceptionsAttribute]
protected virtual void Dispose(bool A_0);
    public sealed virtual void Dispose();
    protected virtual void Finalize();
}
[EditorBrowsableAttribute("1")]
public class CefSharp.Core.BrowserSettings : object {
    private bool _isDisposed;
    private bool _ownsPointer;
    private bool _autoDispose;
    internal CefStructBase<CefBrowserSettingsTraits>* _browserSettings;
    public bool AutoDispose { get; }
    public bool IsDisposed { get; }
    public int WindowlessFrameRate { get; public set; }
    public UInt32 BackgroundColor { get; public set; }
    public CefState WebGl { get; public set; }
    public CefState Databases { get; public set; }
    public CefState LocalStorage { get; public set; }
    public CefState TabToLinks { get; public set; }
    public CefState TextAreaResize { get; public set; }
    public CefState ImageShrinkStandaloneToFit { get; public set; }
    public CefState ImageLoading { get; public set; }
    public CefState JavascriptDomPaste { get; public set; }
    public CefState JavascriptAccessClipboard { get; public set; }
    public CefState JavascriptCloseWindows { get; public set; }
    public CefState Javascript { get; public set; }
    public CefState RemoteFonts { get; public set; }
    public string DefaultEncoding { get; public set; }
    public int MinimumLogicalFontSize { get; public set; }
    public int MinimumFontSize { get; public set; }
    public int DefaultFixedFontSize { get; public set; }
    public int DefaultFontSize { get; public set; }
    public string FantasyFontFamily { get; public set; }
    public string CursiveFontFamily { get; public set; }
    public string SansSerifFontFamily { get; public set; }
    public string SerifFontFamily { get; public set; }
    public string FixedFontFamily { get; public set; }
    public string StandardFontFamily { get; public set; }
    public BrowserSettings(bool autoDispose);
    internal BrowserSettings(CefStructBase<CefBrowserSettingsTraits>* browserSettings);
    private void !BrowserSettings();
    private void ~BrowserSettings();
    public virtual string get_StandardFontFamily();
    public virtual void set_StandardFontFamily(string value);
    public virtual string get_FixedFontFamily();
    public virtual void set_FixedFontFamily(string value);
    public virtual string get_SerifFontFamily();
    public virtual void set_SerifFontFamily(string value);
    public virtual string get_SansSerifFontFamily();
    public virtual void set_SansSerifFontFamily(string value);
    public virtual string get_CursiveFontFamily();
    public virtual void set_CursiveFontFamily(string value);
    public virtual string get_FantasyFontFamily();
    public virtual void set_FantasyFontFamily(string value);
    public virtual int get_DefaultFontSize();
    public virtual void set_DefaultFontSize(int value);
    public virtual int get_DefaultFixedFontSize();
    public virtual void set_DefaultFixedFontSize(int value);
    public virtual int get_MinimumFontSize();
    public virtual void set_MinimumFontSize(int value);
    public virtual int get_MinimumLogicalFontSize();
    public virtual void set_MinimumLogicalFontSize(int value);
    public virtual string get_DefaultEncoding();
    public virtual void set_DefaultEncoding(string value);
    public virtual CefState get_RemoteFonts();
    public virtual void set_RemoteFonts(CefState value);
    public virtual CefState get_Javascript();
    public virtual void set_Javascript(CefState value);
    public virtual CefState get_JavascriptCloseWindows();
    public virtual void set_JavascriptCloseWindows(CefState value);
    public virtual CefState get_JavascriptAccessClipboard();
    public virtual void set_JavascriptAccessClipboard(CefState value);
    public virtual CefState get_JavascriptDomPaste();
    public virtual void set_JavascriptDomPaste(CefState value);
    public virtual CefState get_ImageLoading();
    public virtual void set_ImageLoading(CefState value);
    public virtual CefState get_ImageShrinkStandaloneToFit();
    public virtual void set_ImageShrinkStandaloneToFit(CefState value);
    public virtual CefState get_TextAreaResize();
    public virtual void set_TextAreaResize(CefState value);
    public virtual CefState get_TabToLinks();
    public virtual void set_TabToLinks(CefState value);
    public virtual CefState get_LocalStorage();
    public virtual void set_LocalStorage(CefState value);
    public virtual CefState get_Databases();
    public virtual void set_Databases(CefState value);
    public virtual CefState get_WebGl();
    public virtual void set_WebGl(CefState value);
    public virtual UInt32 get_BackgroundColor();
    public virtual void set_BackgroundColor(UInt32 value);
    public virtual int get_WindowlessFrameRate();
    public virtual void set_WindowlessFrameRate(int value);
    public virtual bool get_IsDisposed();
    public virtual bool get_AutoDispose();
    public virtual IBrowserSettings UnWrap();
    [HandleProcessCorruptedStateExceptionsAttribute]
protected virtual void Dispose(bool A_0);
    public sealed virtual void Dispose();
    protected virtual void Finalize();
}
[EditorBrowsableAttribute("1")]
public class CefSharp.Core.Cef : object {
    private static object _sync;
    private static Nullable`1<bool> _initialized;
    private static bool _hasShutdown;
    private static HashSet`1<IDisposable> _disposables;
    private static int _initializedThreadId;
    private static bool _multiThreadedMessageLoop;
    private static bool _waitForBrowsersToCloseEnabled;
    private static TaskFactory <backing_store>UIThreadTaskFactory;
    private static TaskFactory <backing_store>IOThreadTaskFactory;
    private static TaskFactory <backing_store>FileThreadTaskFactory;
    public static bool CrashReportingEnabled { get; }
    public static string CefCommitHash { get; }
    public static string ChromiumVersion { get; }
    public static string CefVersion { get; }
    public static string CefSharpVersion { get; }
    public static bool IsShutdown { get; }
    public static Nullable`1<bool> IsInitialized { get; }
    public static TaskFactory FileThreadTaskFactory { get; public set; }
    public static TaskFactory IOThreadTaskFactory { get; public set; }
    public static TaskFactory UIThreadTaskFactory { get; public set; }
    private static Cef();
    private static bool CurrentOnUiThread();
    public static TaskFactory get_UIThreadTaskFactory();
    public static void set_UIThreadTaskFactory(TaskFactory __set_formal);
    public static TaskFactory get_IOThreadTaskFactory();
    public static void set_IOThreadTaskFactory(TaskFactory __set_formal);
    public static TaskFactory get_FileThreadTaskFactory();
    public static void set_FileThreadTaskFactory(TaskFactory __set_formal);
    public static void AddDisposable(IDisposable item);
    public static void RemoveDisposable(IDisposable item);
    public static Nullable`1<bool> get_IsInitialized();
    public static bool get_IsShutdown();
    public static string get_CefSharpVersion();
    public static string get_CefVersion();
    public static string get_ChromiumVersion();
    public static string get_CefCommitHash();
    public static UrlParts ParseUrl(string url);
    public static bool Initialize(CefSettingsBase cefSettings, bool performDependencyCheck, IApp cefApp);
    public static bool Initialize(CefSettingsBase cefSettings, bool performDependencyCheck, IBrowserProcessHandler browserProcessHandler);
    public static bool Initialize(CefSettingsBase cefSettings, bool performDependencyCheck);
    public static bool Initialize(CefSettingsBase cefSettings);
    public static void RunMessageLoop();
    public static void QuitMessageLoop();
    public static void DoMessageLoopWork();
    public static int ExecuteProcess();
    public static bool AddCrossOriginWhitelistEntry(string sourceOrigin, string targetProtocol, string targetDomain, bool allowTargetSubdomains);
    public static bool RemoveCrossOriginWhitelistEntry(string sourceOrigin, string targetProtocol, string targetDomain, bool allowTargetSubdomains);
    public static bool ClearCrossOriginWhitelist();
    public static ICookieManager GetGlobalCookieManager(ICompletionCallback callback);
    public static ICookieManager GetGlobalCookieManager();
    public static void PreShutdown();
    public static void Shutdown();
    public static void ShutdownWithoutChecks();
    public static bool ClearSchemeHandlerFactories();
    public static bool CurrentlyOnThread(CefThreadIds threadId);
    public static IRequestContext GetGlobalRequestContext();
    public static UInt32 ColorSetARGB(UInt32 a, UInt32 r, UInt32 g, UInt32 b);
    public static bool get_CrashReportingEnabled();
    public static void SetCrashKeyValue(string key, string value);
    public static int GetMinLogLevel();
    public static string GetMimeType(string extension);
    public static void EnableWaitForBrowsersToClose();
    public static void WaitForBrowsersToClose(int timeoutInMiliseconds);
    public static void WaitForBrowsersToClose();
    public static bool PostDelayedAction(CefThreadIds threadId, Action action, int delayInMs);
    public static bool PostAction(CefThreadIds threadId, Action action);
    public static bool IsWindows10OrGreaterEx();
}
[EditorBrowsableAttribute("1")]
public class CefSharp.Core.CefSettingsBase : object {
    private CommandLineArgDictionary _cefCommandLineArgs;
    internal CefStructBase<CefSettingsTraits>* _cefSettings;
    internal List`1<CefCustomScheme> _cefCustomSchemes;
    public bool CookieableSchemesExcludeDefaults { get; public set; }
    public string CookieableSchemesList { get; public set; }
    public UInt32 BackgroundColor { get; public set; }
    public string AcceptLanguageList { get; public set; }
    public bool PersistSessionCookies { get; public set; }
    public bool WindowlessRenderingEnabled { get; public set; }
    public string UserAgent { get; public set; }
    public int UncaughtExceptionStackSize { get; public set; }
    public int RemoteDebuggingPort { get; public set; }
    public string UserAgentProduct { get; public set; }
    public string JavascriptFlags { get; public set; }
    public LogSeverity LogSeverity { get; public set; }
    public string LogFile { get; public set; }
    public string ResourcesDirPath { get; public set; }
    public string LocalesDirPath { get; public set; }
    public string Locale { get; public set; }
    public string RootCachePath { get; public set; }
    public string CachePath { get; public set; }
    public string BrowserSubprocessPath { get; public set; }
    public bool MultiThreadedMessageLoop { get; public set; }
    public bool ExternalMessagePump { get; public set; }
    public bool CommandLineArgsDisabled { get; public set; }
    public CommandLineArgDictionary CefCommandLineArgs { get; }
    public IEnumerable`1<CefCustomScheme> CefCustomSchemes { get; }
    private void !CefSettingsBase();
    private void ~CefSettingsBase();
    public IEnumerable`1<CefCustomScheme> get_CefCustomSchemes();
    public CommandLineArgDictionary get_CefCommandLineArgs();
    public bool get_CommandLineArgsDisabled();
    public void set_CommandLineArgsDisabled(bool value);
    public bool get_ExternalMessagePump();
    public void set_ExternalMessagePump(bool value);
    public bool get_MultiThreadedMessageLoop();
    public void set_MultiThreadedMessageLoop(bool value);
    public string get_BrowserSubprocessPath();
    public void set_BrowserSubprocessPath(string value);
    public string get_CachePath();
    public void set_CachePath(string value);
    public string get_RootCachePath();
    public void set_RootCachePath(string value);
    public string get_Locale();
    public void set_Locale(string value);
    public string get_LocalesDirPath();
    public void set_LocalesDirPath(string value);
    public string get_ResourcesDirPath();
    public void set_ResourcesDirPath(string value);
    public string get_LogFile();
    public void set_LogFile(string value);
    public LogSeverity get_LogSeverity();
    public void set_LogSeverity(LogSeverity value);
    public string get_JavascriptFlags();
    public void set_JavascriptFlags(string value);
    public string get_UserAgentProduct();
    public void set_UserAgentProduct(string value);
    public int get_RemoteDebuggingPort();
    public void set_RemoteDebuggingPort(int value);
    public int get_UncaughtExceptionStackSize();
    public void set_UncaughtExceptionStackSize(int value);
    public string get_UserAgent();
    public void set_UserAgent(string value);
    public bool get_WindowlessRenderingEnabled();
    public void set_WindowlessRenderingEnabled(bool value);
    public bool get_PersistSessionCookies();
    public void set_PersistSessionCookies(bool value);
    public string get_AcceptLanguageList();
    public void set_AcceptLanguageList(string value);
    public UInt32 get_BackgroundColor();
    public void set_BackgroundColor(UInt32 value);
    public string get_CookieableSchemesList();
    public void set_CookieableSchemesList(string value);
    public bool get_CookieableSchemesExcludeDefaults();
    public void set_CookieableSchemesExcludeDefaults(bool value);
    public void RegisterScheme(CefCustomScheme cefCustomScheme);
    [HandleProcessCorruptedStateExceptionsAttribute]
protected sealed virtual void Dispose(bool A_0);
    public sealed virtual void Dispose();
    protected sealed virtual void Finalize();
}
[EditorBrowsableAttribute("1")]
public class CefSharp.Core.DragData : CefWrapper {
    private MCefRefPtr<CefDragData> modreq(System.Runtime.CompilerServices.IsByValue) _wrappedDragData;
    private bool <backing_store>IsReadOnly;
    private string <backing_store>FileName;
    private bool <backing_store>IsFile;
    private bool <backing_store>IsFragment;
    private bool <backing_store>IsLink;
    public string LinkUrl { get; public set; }
    public string LinkTitle { get; public set; }
    public string LinkMetaData { get; public set; }
    public Point ImageHotspot { get; }
    public IImage Image { get; }
    public bool HasImage { get; }
    public string FragmentText { get; public set; }
    public string FragmentHtml { get; public set; }
    public string FragmentBaseUrl { get; public set; }
    public IList`1<string> FilePaths { get; }
    public IList`1<string> FileNames { get; }
    public bool IsLink { get; public set; }
    public bool IsFragment { get; public set; }
    public bool IsFile { get; public set; }
    public string FileName { get; public set; }
    public bool IsReadOnly { get; public set; }
    internal DragData(scoped_refptr<CefDragData>* modopt(System.Runtime.CompilerServices.IsImplicitlyDereferenced) dragData);
    private void !DragData();
    private void ~DragData();
    internal scoped_refptr<CefDragData>* modreq(System.Runtime.CompilerServices.IsUdtReturn) op_Implicit(scoped_refptr<CefDragData>* );
    public virtual bool get_IsReadOnly();
    public virtual void set_IsReadOnly(bool __set_formal);
    public virtual string get_FileName();
    public virtual void set_FileName(string __set_formal);
    public virtual bool get_IsFile();
    public virtual void set_IsFile(bool __set_formal);
    public virtual bool get_IsFragment();
    public virtual void set_IsFragment(bool __set_formal);
    public virtual bool get_IsLink();
    public virtual void set_IsLink(bool __set_formal);
    public virtual IDragData Clone();
    public static IDragData Create();
    public virtual IList`1<string> get_FileNames();
    public virtual IList`1<string> get_FilePaths();
    public virtual string get_FragmentBaseUrl();
    public virtual void set_FragmentBaseUrl(string fragmentBaseUrl);
    public virtual string get_FragmentHtml();
    public virtual void set_FragmentHtml(string fragmentHtml);
    public virtual string get_FragmentText();
    public virtual void set_FragmentText(string fragmentText);
    public virtual bool get_HasImage();
    public virtual IImage get_Image();
    public virtual Point get_ImageHotspot();
    public virtual string get_LinkMetaData();
    public virtual void set_LinkMetaData(string linkMetaData);
    public virtual string get_LinkTitle();
    public virtual void set_LinkTitle(string linkTitle);
    public virtual string get_LinkUrl();
    public virtual void set_LinkUrl(string linkUrl);
    public virtual void AddFile(string path, string displayName);
    public virtual void ResetFileContents();
    public virtual void ClearFilenames();
    public virtual long GetFileContents(Stream stream);
    [HandleProcessCorruptedStateExceptionsAttribute]
protected virtual void Dispose(bool A_0);
    public sealed virtual void Dispose();
    protected virtual void Finalize();
}
[EditorBrowsableAttribute("1")]
public class CefSharp.Core.ManagedCefBrowserAdapter : object {
    private MCefRefPtr<CefSharp::Internals::ClientAdapter> modreq(System.Runtime.CompilerServices.IsByValue) _clientAdapter;
    private BrowserProcessServiceHost _browserProcessServiceHost;
    private IWebBrowserInternal _webBrowserInternal;
    private IJavascriptObjectRepositoryInternal _javaScriptObjectRepository;
    private JavascriptCallbackFactory _javascriptCallbackFactory;
    private IMethodRunnerQueue _methodRunnerQueue;
    private IBrowser _browserWrapper;
    private bool _isDisposed;
    public IMethodRunnerQueue MethodRunnerQueue { get; }
    public IJavascriptObjectRepositoryInternal JavascriptObjectRepository { get; }
    public IJavascriptCallbackFactory JavascriptCallbackFactory { get; }
    public bool IsDisposed { get; }
    public ManagedCefBrowserAdapter(IWebBrowserInternal webBrowserInternal, bool offScreenRendering);
    private void MethodInvocationComplete(object sender, MethodInvocationCompleteArgs e);
    private void InitializeBrowserProcessServiceHost(IBrowser browser);
    private void DisposeBrowserProcessServiceHost();
    internal Void modreq(System.Runtime.CompilerServices.IsUdtReturn) GetClientAdapter(MCefRefPtr<CefSharp::Internals::ClientAdapter>& );
    private void !ManagedCefBrowserAdapter();
    private void ~ManagedCefBrowserAdapter();
    public virtual bool get_IsDisposed();
    public virtual void OnAfterBrowserCreated(IBrowser browser);
    public virtual void CreateBrowser(IWindowInfo windowInfo, IBrowserSettings browserSettings, IRequestContext requestContext, string address);
    public virtual void Resize(int width, int height);
    public virtual IBrowser GetBrowser(int browserId);
    public virtual IJavascriptCallbackFactory get_JavascriptCallbackFactory();
    public virtual IJavascriptObjectRepositoryInternal get_JavascriptObjectRepository();
    public virtual IMethodRunnerQueue get_MethodRunnerQueue();
    [HandleProcessCorruptedStateExceptionsAttribute]
protected virtual void Dispose(bool A_0);
    public sealed virtual void Dispose();
    protected virtual void Finalize();
}
[EditorBrowsableAttribute("1")]
public class CefSharp.Core.NativeMethodWrapper : object {
    public static void MemoryCopy(IntPtr dest, IntPtr src, int numberOfBytes);
    public static bool IsFocused(IntPtr handle);
    public static void SetWindowPosition(IntPtr handle, int x, int y, int width, int height);
    public static void SetWindowParent(IntPtr child, IntPtr newParent);
    public static void RemoveExNoActivateStyle(IntPtr browserHwnd);
    public static IntPtr LoadCursorFromLibCef(int resourceIdentifier);
}
[EditorBrowsableAttribute("1")]
public class CefSharp.Core.PopupFeatures : object {
    private CefPopupFeatures modopt(System.Runtime.CompilerServices.IsConst)* _popupFeatures;
    public bool IsPopup { get; }
    public Nullable`1<int> Height { get; }
    public Nullable`1<int> Width { get; }
    public Nullable`1<int> Y { get; }
    public Nullable`1<int> X { get; }
    internal PopupFeatures(CefPopupFeatures modopt(System.Runtime.CompilerServices.IsConst)* popupFeatures);
    private void !PopupFeatures();
    private void ~PopupFeatures();
    public virtual Nullable`1<int> get_X();
    public virtual Nullable`1<int> get_Y();
    public virtual Nullable`1<int> get_Width();
    public virtual Nullable`1<int> get_Height();
    public virtual bool get_IsPopup();
    [HandleProcessCorruptedStateExceptionsAttribute]
protected virtual void Dispose(bool A_0);
    public sealed virtual void Dispose();
    protected virtual void Finalize();
}
[EditorBrowsableAttribute("1")]
public class CefSharp.Core.PostData : CefWrapper {
    private MCefRefPtr<CefPostData> modreq(System.Runtime.CompilerServices.IsByValue) _postData;
    private List`1<IPostDataElement> _postDataElements;
    public bool HasExcludedElements { get; }
    public IList`1<IPostDataElement> Elements { get; }
    public bool IsReadOnly { get; }
    internal PostData(scoped_refptr<CefPostData>* modopt(System.Runtime.CompilerServices.IsImplicitlyDereferenced) postData);
    private void !PostData();
    private void ~PostData();
    internal void ThrowIfReadOnly();
    internal scoped_refptr<CefPostData>* modreq(System.Runtime.CompilerServices.IsUdtReturn) op_Implicit(scoped_refptr<CefPostData>* );
    public virtual bool get_IsReadOnly();
    public virtual IList`1<IPostDataElement> get_Elements();
    public virtual bool AddElement(IPostDataElement element);
    public virtual bool RemoveElement(IPostDataElement element);
    public virtual void RemoveElements();
    public virtual IPostDataElement CreatePostDataElement();
    public virtual bool get_HasExcludedElements();
    public virtual IPostData UnWrap();
    [HandleProcessCorruptedStateExceptionsAttribute]
protected virtual void Dispose(bool A_0);
    public sealed virtual void Dispose();
    protected virtual void Finalize();
}
[EditorBrowsableAttribute("1")]
public class CefSharp.Core.PostDataElement : CefWrapper {
    private MCefRefPtr<CefPostDataElement> modreq(System.Runtime.CompilerServices.IsByValue) _postDataElement;
    public Byte[] Bytes { get; public set; }
    public PostDataElementType Type { get; }
    public string File { get; public set; }
    public bool IsReadOnly { get; }
    internal PostDataElement(scoped_refptr<CefPostDataElement> modreq(System.Runtime.CompilerServices.IsCopyConstructed)* postDataElement);
    private void !PostDataElement();
    private void ~PostDataElement();
    internal scoped_refptr<CefPostDataElement>* modreq(System.Runtime.CompilerServices.IsUdtReturn) op_Implicit(scoped_refptr<CefPostDataElement>* );
    public virtual bool get_IsReadOnly();
    public virtual string get_File();
    public virtual void set_File(string val);
    public virtual void SetToEmpty();
    public virtual PostDataElementType get_Type();
    public virtual Byte[] get_Bytes();
    public virtual void set_Bytes(Byte[] val);
    public virtual IPostDataElement UnWrap();
    [HandleProcessCorruptedStateExceptionsAttribute]
protected virtual void Dispose(bool A_0);
    public sealed virtual void Dispose();
    protected virtual void Finalize();
}
[EditorBrowsableAttribute("1")]
public class CefSharp.Core.Request : CefWrapper {
    private MCefRefPtr<CefRequest> modreq(System.Runtime.CompilerServices.IsByValue) _request;
    private IPostData _postData;
    public bool IsReadOnly { get; }
    public IPostData PostData { get; public set; }
    public TransitionType TransitionType { get; }
    public NameValueCollection Headers { get; public set; }
    public ReferrerPolicy ReferrerPolicy { get; }
    public ResourceType ResourceType { get; }
    public string ReferrerUrl { get; }
    public ulong Identifier { get; }
    public string Method { get; public set; }
    public string Url { get; public set; }
    public UrlRequestFlags Flags { get; public set; }
    internal Request(scoped_refptr<CefRequest>* modopt(System.Runtime.CompilerServices.IsImplicitlyDereferenced) cefRequest);
    private void !Request();
    private void ~Request();
    internal scoped_refptr<CefRequest>* modreq(System.Runtime.CompilerServices.IsUdtReturn) op_Implicit(scoped_refptr<CefRequest>* );
    internal void ThrowIfReadOnly();
    public virtual UrlRequestFlags get_Flags();
    public virtual void set_Flags(UrlRequestFlags flags);
    public virtual string get_Url();
    public virtual void set_Url(string url);
    public virtual string get_Method();
    public virtual void set_Method(string method);
    public virtual ulong get_Identifier();
    public virtual void SetReferrer(string referrerUrl, ReferrerPolicy policy);
    public virtual string get_ReferrerUrl();
    public virtual ResourceType get_ResourceType();
    public virtual ReferrerPolicy get_ReferrerPolicy();
    public virtual NameValueCollection get_Headers();
    public virtual void set_Headers(NameValueCollection url);
    public virtual TransitionType get_TransitionType();
    public virtual IPostData get_PostData();
    public virtual void set_PostData(IPostData postData);
    public virtual bool get_IsReadOnly();
    public virtual void InitializePostData();
    public virtual string GetHeaderByName(string name);
    public virtual void SetHeaderByName(string name, string value, bool overwrite);
    public virtual IRequest UnWrap();
    [HandleProcessCorruptedStateExceptionsAttribute]
protected virtual void Dispose(bool A_0);
    public sealed virtual void Dispose();
    protected virtual void Finalize();
}
[EditorBrowsableAttribute("1")]
public class CefSharp.Core.RequestContext : CefWrapper {
    private MCefRefPtr<CefRequestContext> modreq(System.Runtime.CompilerServices.IsByValue) _requestContext;
    private RequestContextSettings _settings;
    public string CachePath { get; }
    public bool IsGlobal { get; }
    public RequestContext(IRequestContext otherRequestContext, IRequestContextHandler requestContextHandler);
    public RequestContext(IRequestContext otherRequestContext);
    public RequestContext(RequestContextSettings settings, IRequestContextHandler requestContextHandler);
    public RequestContext(IRequestContextHandler requestContextHandler);
    public RequestContext(RequestContextSettings settings);
    internal RequestContext(scoped_refptr<CefRequestContext>* modopt(System.Runtime.CompilerServices.IsImplicitlyDereferenced) context);
    internal scoped_refptr<CefRequestContext>* modreq(System.Runtime.CompilerServices.IsUdtReturn) op_Implicit(scoped_refptr<CefRequestContext>* );
    private void !RequestContext();
    private void ~RequestContext();
    public static IRequestContext CreateContext(IRequestContext other, IRequestContextHandler requestContextHandler);
    public virtual bool IsSame(IRequestContext context);
    public virtual bool IsSharingWith(IRequestContext context);
    public virtual ICookieManager GetCookieManager(ICompletionCallback callback);
    public virtual bool get_IsGlobal();
    public virtual bool RegisterSchemeHandlerFactory(string schemeName, string domainName, ISchemeHandlerFactory factory);
    public virtual bool ClearSchemeHandlerFactories();
    public virtual string get_CachePath();
    public virtual bool HasPreference(string name);
    public virtual object GetPreference(string name);
    public virtual IDictionary`2<string, object> GetAllPreferences(bool includeDefaults);
    public virtual bool CanSetPreference(string name);
    public virtual bool SetPreference(string name, object value, String& error);
    public virtual void ClearCertificateExceptions(ICompletionCallback callback);
    public virtual void ClearHttpAuthCredentials(ICompletionCallback callback);
    public virtual void CloseAllConnections(ICompletionCallback callback);
    public virtual Task`1<ResolveCallbackResult> ResolveHostAsync(Uri origin);
    public virtual IRequestContext UnWrap();
    [HandleProcessCorruptedStateExceptionsAttribute]
protected virtual void Dispose(bool A_0);
    public sealed virtual void Dispose();
    protected virtual void Finalize();
}
[EditorBrowsableAttribute("1")]
public class CefSharp.Core.RequestContextSettings : object {
    private CefStructBase<CefRequestContextSettingsTraits>* _settings;
    public bool CookieableSchemesExcludeDefaults { get; public set; }
    public string CookieableSchemesList { get; public set; }
    public string AcceptLanguageList { get; public set; }
    public string CachePath { get; public set; }
    public bool PersistSessionCookies { get; public set; }
    internal CefStructBase<CefRequestContextSettingsTraits>* modreq(System.Runtime.CompilerServices.IsUdtReturn) op_Implicit(CefStructBase<CefRequestContextSettingsTraits>* );
    private void !RequestContextSettings();
    private void ~RequestContextSettings();
    public bool get_PersistSessionCookies();
    public void set_PersistSessionCookies(bool value);
    public string get_CachePath();
    public void set_CachePath(string value);
    public string get_AcceptLanguageList();
    public void set_AcceptLanguageList(string value);
    public string get_CookieableSchemesList();
    public void set_CookieableSchemesList(string value);
    public bool get_CookieableSchemesExcludeDefaults();
    public void set_CookieableSchemesExcludeDefaults(bool value);
    [HandleProcessCorruptedStateExceptionsAttribute]
protected virtual void Dispose(bool A_0);
    public sealed virtual void Dispose();
    protected virtual void Finalize();
}
[EditorBrowsableAttribute("1")]
public class CefSharp.Core.UrlRequest : CefWrapper {
    private MCefRefPtr<CefURLRequest> modreq(System.Runtime.CompilerServices.IsByValue) _urlRequest;
    public UrlRequestStatus RequestStatus { get; }
    public IResponse Response { get; }
    public bool ResponseWasCached { get; }
    public UrlRequest(IRequest request, IUrlRequestClient urlRequestClient, IRequestContext requestContext);
    public UrlRequest(IRequest request, IUrlRequestClient urlRequestClient);
    internal UrlRequest(scoped_refptr<CefURLRequest>* modopt(System.Runtime.CompilerServices.IsImplicitlyDereferenced) urlRequest);
    private void !UrlRequest();
    private void ~UrlRequest();
    public virtual bool get_ResponseWasCached();
    public virtual IResponse get_Response();
    public virtual UrlRequestStatus get_RequestStatus();
    [HandleProcessCorruptedStateExceptionsAttribute]
protected virtual void Dispose(bool A_0);
    public sealed virtual void Dispose();
    protected virtual void Finalize();
}
[EditorBrowsableAttribute("1")]
public class CefSharp.Core.WindowInfo : object {
    private CefWindowInfo* _windowInfo;
    private bool _ownsPointer;
    public CefRuntimeStyle RuntimeStyle { get; public set; }
    public bool ExternalBeginFrameEnabled { get; public set; }
    public bool SharedTextureEnabled { get; public set; }
    public bool WindowlessRenderingEnabled { get; public set; }
    public string WindowName { get; public set; }
    public IntPtr WindowHandle { get; public set; }
    public IntPtr ParentWindowHandle { get; public set; }
    public UInt32 ExStyle { get; public set; }
    public UInt32 Style { get; public set; }
    public int Height { get; public set; }
    public int Width { get; public set; }
    public int Y { get; public set; }
    public int X { get; public set; }
    internal WindowInfo(CefWindowInfo* windowInfo);
    internal CefWindowInfo* GetWindowInfo();
    private void !WindowInfo();
    private void ~WindowInfo();
    public virtual int get_X();
    public virtual void set_X(int x);
    public virtual int get_Y();
    public virtual void set_Y(int y);
    public virtual int get_Width();
    public virtual void set_Width(int width);
    public virtual int get_Height();
    public virtual void set_Height(int height);
    public virtual UInt32 get_Style();
    public virtual void set_Style(UInt32 style);
    public virtual UInt32 get_ExStyle();
    public virtual void set_ExStyle(UInt32 ex_style);
    public virtual IntPtr get_ParentWindowHandle();
    public virtual void set_ParentWindowHandle(IntPtr parentWindowHandle);
    public virtual IntPtr get_WindowHandle();
    public virtual void set_WindowHandle(IntPtr windowHandle);
    public virtual string get_WindowName();
    public virtual void set_WindowName(string value);
    public virtual bool get_WindowlessRenderingEnabled();
    public virtual void set_WindowlessRenderingEnabled(bool windowlessRenderingEnabled);
    public virtual bool get_SharedTextureEnabled();
    public virtual void set_SharedTextureEnabled(bool sharedTextureEnabled);
    public virtual bool get_ExternalBeginFrameEnabled();
    public virtual void set_ExternalBeginFrameEnabled(bool externalBeginFrameEnabled);
    public virtual CefRuntimeStyle get_RuntimeStyle();
    public virtual void set_RuntimeStyle(CefRuntimeStyle style);
    public virtual void SetAsChild(IntPtr parentHandle, int left, int top, int right, int bottom);
    public virtual void SetAsChild(IntPtr parentHandle, Rect windowBounds);
    public virtual void SetAsChild(IntPtr parentHandle);
    public virtual void SetAsPopup(IntPtr parentHandle, string windowName);
    public virtual void SetAsWindowless(IntPtr parentHandle);
    public virtual IWindowInfo UnWrap();
    [HandleProcessCorruptedStateExceptionsAttribute]
protected virtual void Dispose(bool A_0);
    public sealed virtual void Dispose();
    protected virtual void Finalize();
}
internal class CefSharp.Internals.CefAuthCallbackWrapper : CefWrapper {
    private MCefRefPtr<CefAuthCallback> modreq(System.Runtime.CompilerServices.IsByValue) _callback;
    public CefAuthCallbackWrapper(scoped_refptr<CefAuthCallback>* modopt(System.Runtime.CompilerServices.IsImplicitlyDereferenced) callback);
    private void !CefAuthCallbackWrapper();
    private void ~CefAuthCallbackWrapper();
    public virtual void Cancel();
    public virtual void Continue(string username, string password);
    [HandleProcessCorruptedStateExceptionsAttribute]
protected virtual void Dispose(bool A_0);
    public sealed virtual void Dispose();
    protected virtual void Finalize();
}
internal class CefSharp.Internals.CefBeforeDownloadCallbackWrapper : CefWrapper {
    private MCefRefPtr<CefBeforeDownloadCallback> modreq(System.Runtime.CompilerServices.IsByValue) _callback;
    public CefBeforeDownloadCallbackWrapper(scoped_refptr<CefBeforeDownloadCallback>* modopt(System.Runtime.CompilerServices.IsImplicitlyDereferenced) callback);
    private void !CefBeforeDownloadCallbackWrapper();
    private void ~CefBeforeDownloadCallbackWrapper();
    public virtual void Continue(string downloadPath, bool showDialog);
    [HandleProcessCorruptedStateExceptionsAttribute]
protected virtual void Dispose(bool A_0);
    public sealed virtual void Dispose();
    protected virtual void Finalize();
}
internal class CefSharp.Internals.CefBrowserHostWrapper : CefWrapper {
    private MCefRefPtr<CefBrowserHost> modreq(System.Runtime.CompilerServices.IsByValue) _browserHost;
    private int _lastDevToolsMessageId;
    public IRequestContext RequestContext { get; }
    public bool IsAudioMuted { get; }
    public bool WindowRenderingDisabled { get; }
    public int WindowlessFrameRate { get; public set; }
    public bool HasDevTools { get; }
    internal CefBrowserHostWrapper(scoped_refptr<CefBrowserHost>* modopt(System.Runtime.CompilerServices.IsImplicitlyDereferenced) browserHost);
    private double GetZoomLevelOnUI();
    private void !CefBrowserHostWrapper();
    private void ~CefBrowserHostWrapper();
    public virtual void StartDownload(string url);
    public virtual void Print();
    public virtual void PrintToPdf(string path, PdfPrintSettings settings, IPrintToPdfCallback callback);
    public virtual void SetZoomLevel(double zoomLevel);
    public virtual double GetZoomLevel();
    public virtual Task`1<double> GetZoomLevelAsync();
    public virtual IntPtr GetWindowHandle();
    public virtual void CloseBrowser(bool forceClose);
    public virtual bool TryCloseBrowser();
    public virtual void DragTargetDragEnter(IDragData dragData, MouseEvent mouseEvent, DragOperationsMask allowedOperations);
    public virtual void DragTargetDragOver(MouseEvent mouseEvent, DragOperationsMask allowedOperations);
    public virtual void DragTargetDragDrop(MouseEvent mouseEvent);
    public virtual void DragSourceEndedAt(int x, int y, DragOperationsMask op);
    public virtual void DragTargetDragLeave();
    public virtual void DragSourceSystemDragEnded();
    public virtual void ShowDevTools(IWindowInfo windowInfo, int inspectElementAtX, int inspectElementAtY);
    public virtual void CloseDevTools();
    public virtual bool get_HasDevTools();
    public virtual bool SendDevToolsMessage(string messageAsJson);
    public virtual int ExecuteDevToolsMethod(int messageId, string method, IDictionary`2<string, object> paramaters);
    public virtual int ExecuteDevToolsMethod(int messageId, string method, string paramsAsJson);
    public virtual IRegistration AddDevToolsMessageObserver(IDevToolsMessageObserver observer);
    public virtual int GetNextDevToolsMessageId();
    public virtual void AddWordToDictionary(string word);
    public virtual void ReplaceMisspelling(string word);
    public virtual void RunFileDialog(CefFileDialogMode mode, string title, string defaultFilePath, IList`1<string> acceptFilters, IRunFileDialogCallback callback);
    public virtual void Find(string searchText, bool forward, bool matchCase, bool findNext);
    public virtual void StopFinding(bool clearSelection);
    public virtual void SetFocus(bool focus);
    public virtual void SendFocusEvent(bool setFocus);
    public virtual void SendKeyEvent(int message, int wParam, int lParam);
    public virtual void SendKeyEvent(KeyEvent keyEvent);
    public virtual void SendMouseWheelEvent(MouseEvent mouseEvent, int deltaX, int deltaY);
    public virtual void SendTouchEvent(TouchEvent evt);
    public virtual void Invalidate(PaintElementType type);
    public virtual void ImeSetComposition(string text, CompositionUnderline[] underlines, Nullable`1<Range> replacementRange, Nullable`1<Range> selectionRange);
    public virtual void ImeCommitText(string text, Nullable`1<Range> replacementRange, int relativeCursorPos);
    public virtual void ImeFinishComposingText(bool keepSelection);
    public virtual void ImeCancelComposition();
    public virtual void SendMouseClickEvent(MouseEvent mouseEvent, MouseButtonType mouseButtonType, bool mouseUp, int clickCount);
    public virtual void SendMouseMoveEvent(MouseEvent mouseEvent, bool mouseLeave);
    public virtual void SetAccessibilityState(CefState accessibilityState);
    public virtual void SetAutoResizeEnabled(bool enabled, Size minSize, Size maxSize);
    public virtual void NotifyMoveOrResizeStarted();
    public virtual void NotifyScreenInfoChanged();
    public virtual void WasResized();
    public virtual void WasHidden(bool hidden);
    public virtual void GetNavigationEntries(INavigationEntryVisitor visitor, bool currentOnly);
    public virtual NavigationEntry GetVisibleNavigationEntry();
    public virtual int get_WindowlessFrameRate();
    public virtual void set_WindowlessFrameRate(int val);
    public virtual bool get_WindowRenderingDisabled();
    public virtual bool get_IsAudioMuted();
    public virtual void SetAudioMuted(bool mute);
    public virtual IntPtr GetOpenerWindowHandle();
    public virtual void SendExternalBeginFrame();
    public virtual void SendCaptureLostEvent();
    public virtual IRequestContext get_RequestContext();
    public CefMouseEvent* modreq(System.Runtime.CompilerServices.IsUdtReturn) GetCefMouseEvent(CefMouseEvent* , MouseEvent mouseEvent);
    public int GetCefKeyboardModifiers(ulong wparam, long lparam);
    public bool IsKeyDown(ulong wparam);
    [HandleProcessCorruptedStateExceptionsAttribute]
protected virtual void Dispose(bool A_0);
    public sealed virtual void Dispose();
    protected virtual void Finalize();
}
internal class CefSharp.Internals.CefBrowserWrapper : CefWrapper {
    private MCefRefPtr<CefBrowser> modreq(System.Runtime.CompilerServices.IsByValue) _browser;
    private IBrowserHost _browserHost;
    public IFrame FocusedFrame { get; }
    public IFrame MainFrame { get; }
    public bool HasDocument { get; }
    public bool IsPopup { get; }
    public int Identifier { get; }
    public bool IsLoading { get; }
    public bool CanGoForward { get; }
    public bool CanGoBack { get; }
    public bool IsValid { get; }
    internal MCefRefPtr<CefBrowser> modreq(System.Runtime.CompilerServices.IsByValue) Browser { get; }
    internal CefBrowserWrapper(scoped_refptr<CefBrowser>* modopt(System.Runtime.CompilerServices.IsImplicitlyDereferenced) browser);
    private void !CefBrowserWrapper();
    private void ~CefBrowserWrapper();
    internal virtual Void modreq(System.Runtime.CompilerServices.IsUdtReturn) get_Browser(MCefRefPtr<CefBrowser>& );
    public virtual bool get_IsValid();
    public virtual IBrowserHost GetHost();
    public virtual bool get_CanGoBack();
    public virtual void GoBack();
    public virtual bool get_CanGoForward();
    public virtual void GoForward();
    public virtual bool get_IsLoading();
    public virtual void CloseBrowser(bool forceClose);
    public virtual void Reload(bool ignoreCache);
    public virtual void StopLoad();
    public virtual int get_Identifier();
    public virtual bool IsSame(IBrowser that);
    public virtual bool get_IsPopup();
    public virtual bool get_HasDocument();
    public virtual IFrame get_MainFrame();
    public virtual IFrame get_FocusedFrame();
    public virtual IFrame GetFrameByIdentifier(string identifier);
    public virtual IFrame GetFrameByName(string name);
    public virtual int GetFrameCount();
    public virtual List`1<string> GetFrameIdentifiers();
    public virtual List`1<string> GetFrameNames();
    public virtual IReadOnlyCollection`1<IFrame> GetAllFrames();
    [HandleProcessCorruptedStateExceptionsAttribute]
protected virtual void Dispose(bool A_0);
    public sealed virtual void Dispose();
    protected virtual void Finalize();
}
internal class CefSharp.Internals.CefCallbackWrapper : CefWrapper {
    private MCefRefPtr<CefCallback> modreq(System.Runtime.CompilerServices.IsByValue) _callback;
    public CefCallbackWrapper(scoped_refptr<CefCallback>* modopt(System.Runtime.CompilerServices.IsImplicitlyDereferenced) callback);
    private void !CefCallbackWrapper();
    private void ~CefCallbackWrapper();
    public virtual void Cancel();
    public virtual void Continue();
    [HandleProcessCorruptedStateExceptionsAttribute]
protected virtual void Dispose(bool A_0);
    public sealed virtual void Dispose();
    protected virtual void Finalize();
}
internal class CefSharp.Internals.CefCertificateCallbackWrapper : CefWrapper {
    private MCefRefPtr<CefSelectClientCertificateCallback> modreq(System.Runtime.CompilerServices.IsByValue) _callback;
    private vector<scoped_refptr<CefX509Certificate>,std::allocator<scoped_refptr<CefX509Certificate> > > modopt(System.Runtime.CompilerServices.IsConst)* modopt(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _certificateList;
    public CefCertificateCallbackWrapper(scoped_refptr<CefSelectClientCertificateCallback>* modopt(System.Runtime.CompilerServices.IsImplicitlyDereferenced) callback, vector<scoped_refptr<CefX509Certificate>,std::allocator<scoped_refptr<CefX509Certificate> > > modopt(System.Runtime.CompilerServices.IsConst)* modopt(System.Runtime.CompilerServices.IsImplicitlyDereferenced) certificates);
    private void !CefCertificateCallbackWrapper();
    private void ~CefCertificateCallbackWrapper();
    public virtual void Select(X509Certificate2 cert);
    [HandleProcessCorruptedStateExceptionsAttribute]
protected virtual void Dispose(bool A_0);
    public sealed virtual void Dispose();
    protected virtual void Finalize();
}
[NativeCppClassAttribute]
internal class CefSharp.Internals.CefCompletionCallbackAdapter : ValueType {
    private long <alignment member>;
}
internal class CefSharp.Internals.CefContextMenuParamsWrapper : CefWrapper {
    private MCefRefPtr<CefContextMenuParams> modreq(System.Runtime.CompilerServices.IsByValue) _wrappedInfo;
    public bool IsCustomMenu { get; }
    public ContextMenuEditState EditStateFlags { get; }
    public bool IsSpellCheckEnabled { get; }
    public bool IsEditable { get; }
    public List`1<string> DictionarySuggestions { get; }
    public string MisspelledWord { get; }
    public string SelectionText { get; }
    public ContextMenuMediaState MediaStateFlags { get; }
    public ContextMenuMediaType MediaType { get; }
    public string FrameCharset { get; }
    public string FrameUrl { get; }
    public string PageUrl { get; }
    public bool HasImageContents { get; }
    public string SourceUrl { get; }
    public string UnfilteredLinkUrl { get; }
    public string LinkUrl { get; }
    public ContextMenuType TypeFlags { get; }
    public int XCoord { get; }
    public int YCoord { get; }
    internal CefContextMenuParamsWrapper(scoped_refptr<CefContextMenuParams>* modopt(System.Runtime.CompilerServices.IsImplicitlyDereferenced) cefParams);
    private void !CefContextMenuParamsWrapper();
    private void ~CefContextMenuParamsWrapper();
    public virtual int get_YCoord();
    public virtual int get_XCoord();
    public virtual ContextMenuType get_TypeFlags();
    public virtual string get_LinkUrl();
    public virtual string get_UnfilteredLinkUrl();
    public virtual string get_SourceUrl();
    public virtual bool get_HasImageContents();
    public virtual string get_PageUrl();
    public virtual string get_FrameUrl();
    public virtual string get_FrameCharset();
    public virtual ContextMenuMediaType get_MediaType();
    public virtual ContextMenuMediaState get_MediaStateFlags();
    public virtual string get_SelectionText();
    public virtual string get_MisspelledWord();
    public virtual List`1<string> get_DictionarySuggestions();
    public virtual bool get_IsEditable();
    public virtual bool get_IsSpellCheckEnabled();
    public virtual ContextMenuEditState get_EditStateFlags();
    public virtual bool get_IsCustomMenu();
    [HandleProcessCorruptedStateExceptionsAttribute]
protected virtual void Dispose(bool A_0);
    public sealed virtual void Dispose();
    protected virtual void Finalize();
}
[NativeCppClassAttribute]
internal class CefSharp.Internals.CefCookieAccessFilterAdapter : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class CefSharp.Internals.CefCookieVisitorAdapter : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class CefSharp.Internals.CefDeleteCookiesCallbackAdapter : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class CefSharp.Internals.CefDevToolsMessageObserverAdapter : ValueType {
    private long <alignment member>;
}
internal class CefSharp.Internals.CefDownloadItemCallbackWrapper : CefWrapper {
    private MCefRefPtr<CefDownloadItemCallback> modreq(System.Runtime.CompilerServices.IsByValue) _callback;
    public CefDownloadItemCallbackWrapper(scoped_refptr<CefDownloadItemCallback>* modopt(System.Runtime.CompilerServices.IsImplicitlyDereferenced) callback);
    private void !CefDownloadItemCallbackWrapper();
    private void ~CefDownloadItemCallbackWrapper();
    public virtual void Cancel();
    public virtual void Pause();
    public virtual void Resume();
    [HandleProcessCorruptedStateExceptionsAttribute]
protected virtual void Dispose(bool A_0);
    public sealed virtual void Dispose();
    protected virtual void Finalize();
}
internal class CefSharp.Internals.CefFileDialogCallbackWrapper : CefWrapper {
    private MCefRefPtr<CefFileDialogCallback> modreq(System.Runtime.CompilerServices.IsByValue) _callback;
    public CefFileDialogCallbackWrapper(scoped_refptr<CefFileDialogCallback>* modopt(System.Runtime.CompilerServices.IsImplicitlyDereferenced) callback);
    private void !CefFileDialogCallbackWrapper();
    private void ~CefFileDialogCallbackWrapper();
    public virtual void Continue(List`1<string> filePaths);
    public virtual void Cancel();
    [HandleProcessCorruptedStateExceptionsAttribute]
protected virtual void Dispose(bool A_0);
    public sealed virtual void Dispose();
    protected virtual void Finalize();
}
internal class CefSharp.Internals.CefFrameWrapper : CefWrapper {
    private MCefRefPtr<CefFrame> modreq(System.Runtime.CompilerServices.IsByValue) _frame;
    private IFrame _parentFrame;
    private IBrowser _owningBrowser;
    private object _syncRoot;
    public IBrowser Browser { get; }
    public string Url { get; }
    public IFrame Parent { get; }
    public string Identifier { get; }
    public string Name { get; }
    public bool IsFocused { get; }
    public bool IsMain { get; }
    public bool IsValid { get; }
    internal CefFrameWrapper(scoped_refptr<CefFrame>* modopt(System.Runtime.CompilerServices.IsImplicitlyDereferenced) frame);
    private void !CefFrameWrapper();
    private void ~CefFrameWrapper();
    public virtual bool get_IsValid();
    public virtual void Undo();
    public virtual void Redo();
    public virtual void Cut();
    public virtual void Copy();
    public virtual void Paste();
    public virtual void Delete();
    public virtual void SelectAll();
    public virtual void ViewSource();
    public virtual Task`1<string> GetSourceAsync();
    public virtual void GetSource(IStringVisitor visitor);
    public virtual Task`1<string> GetTextAsync();
    public virtual void GetText(IStringVisitor visitor);
    public virtual void LoadRequest(IRequest request);
    public virtual void LoadUrl(string url);
    public virtual void ExecuteJavaScriptAsync(string code, string scriptUrl, int startLine);
    public virtual Task`1<JavascriptResponse> EvaluateScriptAsync(string script, string scriptUrl, int startLine, Nullable`1<TimeSpan> timeout, bool useImmediatelyInvokedFuncExpression);
    public virtual bool get_IsMain();
    public virtual bool get_IsFocused();
    public virtual string get_Name();
    public virtual string get_Identifier();
    public virtual IFrame get_Parent();
    public virtual string get_Url();
    public virtual IBrowser get_Browser();
    public virtual scoped_refptr<CefV8Context>* modreq(System.Runtime.CompilerServices.IsUdtReturn) GetV8Context(scoped_refptr<CefV8Context>* );
    public virtual IRequest CreateRequest(bool initializePostData);
    public virtual IUrlRequest CreateUrlRequest(IRequest request, IUrlRequestClient client);
    public void ThrowIfFrameInvalid();
    [HandleProcessCorruptedStateExceptionsAttribute]
protected virtual void Dispose(bool A_0);
    public sealed virtual void Dispose();
    protected virtual void Finalize();
}
internal class CefSharp.Internals.CefImageWrapper : CefWrapper {
    internal MCefRefPtr<CefImage> modreq(System.Runtime.CompilerServices.IsByValue) _image;
    public int Width { get; }
    public bool IsEmpty { get; }
    public int Height { get; }
    internal CefImageWrapper(scoped_refptr<CefImage>* modopt(System.Runtime.CompilerServices.IsImplicitlyDereferenced) image);
    private void !CefImageWrapper();
    private void ~CefImageWrapper();
    public virtual Byte[] GetAsBitmap(float scaleFactor, ColorType colorType, AlphaType alphaType, Int32& pixelWidth, Int32& pixelHeight);
    public virtual Byte[] GetAsJPEG(float scaleFactor, int quality, Int32& pixelWidth, Int32& pixelHeight);
    public virtual Byte[] GetAsPNG(float scaleFactor, bool withTransparency, Int32& pixelWidth, Int32& pixelHeight);
    public virtual bool GetRepresentationInfo(float scaleFactor, Single& actualScaleFactor, Int32& pixelWidth, Int32& pixelHeight);
    public virtual int get_Height();
    public virtual bool HasRepresentation(float scaleFactor);
    public virtual bool get_IsEmpty();
    public virtual bool IsSame(IImage that);
    public virtual bool RemoveRepresentation(float scaleFactor);
    public virtual int get_Width();
    [HandleProcessCorruptedStateExceptionsAttribute]
protected virtual void Dispose(bool A_0);
    public sealed virtual void Dispose();
    protected virtual void Finalize();
}
internal class CefSharp.Internals.CefJSDialogCallbackWrapper : CefWrapper {
    private MCefRefPtr<CefJSDialogCallback> modreq(System.Runtime.CompilerServices.IsByValue) _callback;
    internal CefJSDialogCallbackWrapper(scoped_refptr<CefJSDialogCallback>* modopt(System.Runtime.CompilerServices.IsImplicitlyDereferenced) callback);
    private void !CefJSDialogCallbackWrapper();
    private void ~CefJSDialogCallbackWrapper();
    public virtual void Continue(bool success);
    public virtual void Continue(bool success, string userInput);
    [HandleProcessCorruptedStateExceptionsAttribute]
protected virtual void Dispose(bool A_0);
    public sealed virtual void Dispose();
    protected virtual void Finalize();
}
internal class CefSharp.Internals.CefMediaAccessCallbackWrapper : CefWrapper {
    private MCefRefPtr<CefMediaAccessCallback> modreq(System.Runtime.CompilerServices.IsByValue) _callback;
    public CefMediaAccessCallbackWrapper(scoped_refptr<CefMediaAccessCallback>* modopt(System.Runtime.CompilerServices.IsImplicitlyDereferenced) callback);
    private void !CefMediaAccessCallbackWrapper();
    private void ~CefMediaAccessCallbackWrapper();
    public virtual void Cancel();
    public virtual void Continue(MediaAccessPermissionType allowedPermissions);
    [HandleProcessCorruptedStateExceptionsAttribute]
protected virtual void Dispose(bool A_0);
    public sealed virtual void Dispose();
    protected virtual void Finalize();
}
internal class CefSharp.Internals.CefMenuModelWrapper : CefWrapper {
    private MCefRefPtr<CefMenuModel> modreq(System.Runtime.CompilerServices.IsByValue) _menu;
    public int Count { get; }
    public CefMenuModelWrapper(scoped_refptr<CefMenuModel>* modopt(System.Runtime.CompilerServices.IsImplicitlyDereferenced) menu);
    private void !CefMenuModelWrapper();
    private void ~CefMenuModelWrapper();
    public virtual int get_Count();
    public virtual bool Clear();
    public virtual string GetLabelAt(int index);
    public virtual CefMenuCommand GetCommandIdAt(int index);
    public virtual bool Remove(CefMenuCommand commandId);
    public virtual bool AddSeparator();
    public virtual bool AddItem(CefMenuCommand commandId, string label);
    public virtual bool AddCheckItem(CefMenuCommand commandId, string label);
    public virtual bool AddRadioItem(CefMenuCommand commandId, string label, int groupId);
    public virtual IMenuModel AddSubMenu(CefMenuCommand commandId, string label);
    public virtual bool InsertSeparatorAt(int index);
    public virtual bool InsertItemAt(int index, CefMenuCommand commandId, string label);
    public virtual bool InsertCheckItemAt(int index, CefMenuCommand commandId, string label);
    public virtual bool InsertRadioItemAt(int index, CefMenuCommand commandId, string label, int groupId);
    public virtual IMenuModel InsertSubMenuAt(int index, CefMenuCommand commandId, string label);
    public virtual bool RemoveAt(int index);
    public virtual int GetIndexOf(CefMenuCommand commandId);
    public virtual bool SetCommandIdAt(int index, CefMenuCommand commandId);
    public virtual string GetLabel(CefMenuCommand commandId);
    public virtual bool SetLabel(CefMenuCommand commandId, string label);
    public virtual bool SetLabelAt(int index, string label);
    public virtual MenuItemType GetType(CefMenuCommand commandId);
    public virtual MenuItemType GetTypeAt(int index);
    public virtual int GetGroupId(CefMenuCommand commandId);
    public virtual int GetGroupIdAt(int index);
    public virtual bool SetGroupId(CefMenuCommand commandId, int groupId);
    public virtual bool SetGroupIdAt(int index, int groupId);
    public virtual IMenuModel GetSubMenu(CefMenuCommand commandId);
    public virtual IMenuModel GetSubMenuAt(int index);
    public virtual bool IsVisible(CefMenuCommand commandId);
    public virtual bool IsVisibleAt(int index);
    public virtual bool SetVisible(CefMenuCommand commandId, bool visible);
    public virtual bool SetVisibleAt(int index, bool visible);
    public virtual bool IsEnabled(CefMenuCommand commandId);
    public virtual bool IsEnabledAt(int index);
    public virtual bool SetEnabled(CefMenuCommand commandId, bool enabled);
    public virtual bool SetEnabledAt(int index, bool enabled);
    public virtual bool IsChecked(CefMenuCommand commandId);
    public virtual bool IsCheckedAt(int index);
    public virtual bool SetChecked(CefMenuCommand commandId, bool isChecked);
    public virtual bool SetCheckedAt(int index, bool isChecked);
    public virtual bool HasAccelerator(CefMenuCommand commandId);
    public virtual bool HasAcceleratorAt(int index);
    public virtual bool SetAccelerator(CefMenuCommand commandId, int keyCode, bool shiftPressed, bool ctrlPressed, bool altPressed);
    public virtual bool SetAcceleratorAt(int index, int keyCode, bool shiftPressed, bool ctrlPressed, bool altPressed);
    public virtual bool RemoveAccelerator(CefMenuCommand commandId);
    public virtual bool RemoveAcceleratorAt(int index);
    public virtual bool GetAccelerator(CefMenuCommand commandId, Int32& keyCode, Boolean& shiftPressed, Boolean& ctrlPressed, Boolean& altPressed);
    public virtual bool GetAcceleratorAt(int index, Int32& keyCode, Boolean& shiftPressed, Boolean& ctrlPressed, Boolean& altPressed);
    [HandleProcessCorruptedStateExceptionsAttribute]
protected virtual void Dispose(bool A_0);
    public sealed virtual void Dispose();
    protected virtual void Finalize();
}
[NativeCppClassAttribute]
internal class CefSharp.Internals.CefNavigationEntryVisitorAdapter : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class CefSharp.Internals.CefPdfPrintCallbackWrapper : ValueType {
    private long <alignment member>;
}
internal class CefSharp.Internals.CefPermissionPromptCallbackWrapper : CefWrapper {
    private MCefRefPtr<CefPermissionPromptCallback> modreq(System.Runtime.CompilerServices.IsByValue) _callback;
    public CefPermissionPromptCallbackWrapper(scoped_refptr<CefPermissionPromptCallback>* modopt(System.Runtime.CompilerServices.IsImplicitlyDereferenced) callback);
    private void !CefPermissionPromptCallbackWrapper();
    private void ~CefPermissionPromptCallbackWrapper();
    public virtual void Continue(PermissionRequestResult result);
    [HandleProcessCorruptedStateExceptionsAttribute]
protected virtual void Dispose(bool A_0);
    public sealed virtual void Dispose();
    protected virtual void Finalize();
}
internal class CefSharp.Internals.CefRegistrationWrapper : CefWrapper {
    private MCefRefPtr<CefRegistration> modreq(System.Runtime.CompilerServices.IsByValue) _callback;
    public CefRegistrationWrapper(scoped_refptr<CefRegistration>* modopt(System.Runtime.CompilerServices.IsImplicitlyDereferenced) callback);
    private void !CefRegistrationWrapper();
    private void ~CefRegistrationWrapper();
    [HandleProcessCorruptedStateExceptionsAttribute]
protected virtual void Dispose(bool A_0);
    public sealed virtual void Dispose();
    protected virtual void Finalize();
}
internal class CefSharp.Internals.CefRequestCallbackWrapper : CefWrapper {
    private MCefRefPtr<CefCallback> modreq(System.Runtime.CompilerServices.IsByValue) _callback;
    private IFrame _frame;
    private IRequest _request;
    internal CefRequestCallbackWrapper(scoped_refptr<CefCallback>* modopt(System.Runtime.CompilerServices.IsImplicitlyDereferenced) callback, IFrame frame, IRequest request);
    internal CefRequestCallbackWrapper(scoped_refptr<CefCallback>* modopt(System.Runtime.CompilerServices.IsImplicitlyDereferenced) callback);
    private void !CefRequestCallbackWrapper();
    private void ~CefRequestCallbackWrapper();
    public virtual void Continue(bool allow);
    public virtual void Cancel();
    [HandleProcessCorruptedStateExceptionsAttribute]
protected virtual void Dispose(bool A_0);
    public sealed virtual void Dispose();
    protected virtual void Finalize();
}
[NativeCppClassAttribute]
internal class CefSharp.Internals.CefRequestContextHandlerAdapter : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class CefSharp.Internals.CefResolveCallbackAdapter : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class CefSharp.Internals.CefResourceHandlerAdapter : ValueType {
    private long <alignment member>;
}
internal class CefSharp.Internals.CefResourceReadCallbackWrapper : CefWrapper {
    private MCefRefPtr<CefResourceReadCallback> modreq(System.Runtime.CompilerServices.IsByValue) _callback;
    public CefResourceReadCallbackWrapper(scoped_refptr<CefResourceReadCallback>* modopt(System.Runtime.CompilerServices.IsImplicitlyDereferenced) callback);
    private void !CefResourceReadCallbackWrapper();
    private void ~CefResourceReadCallbackWrapper();
    public virtual void Continue(int bytesRead);
    [HandleProcessCorruptedStateExceptionsAttribute]
protected virtual void Dispose(bool A_0);
    public sealed virtual void Dispose();
    protected virtual void Finalize();
}
[NativeCppClassAttribute]
internal class CefSharp.Internals.CefResourceRequestHandlerAdapter : ValueType {
    private long <alignment member>;
}
internal class CefSharp.Internals.CefResourceSkipCallbackWrapper : CefWrapper {
    private MCefRefPtr<CefResourceSkipCallback> modreq(System.Runtime.CompilerServices.IsByValue) _callback;
    public CefResourceSkipCallbackWrapper(scoped_refptr<CefResourceSkipCallback>* modopt(System.Runtime.CompilerServices.IsImplicitlyDereferenced) callback);
    private void !CefResourceSkipCallbackWrapper();
    private void ~CefResourceSkipCallbackWrapper();
    public virtual void Continue(long bytesSkipped);
    [HandleProcessCorruptedStateExceptionsAttribute]
protected virtual void Dispose(bool A_0);
    public sealed virtual void Dispose();
    protected virtual void Finalize();
}
[NativeCppClassAttribute]
internal class CefSharp.Internals.CefResponseFilterAdapter : ValueType {
    private long <alignment member>;
}
internal class CefSharp.Internals.CefResponseWrapper : CefWrapper {
    private MCefRefPtr<CefResponse> modreq(System.Runtime.CompilerServices.IsByValue) _response;
    public NameValueCollection ResponseHeaders { get; public set; }
    public NameValueCollection Headers { get; public set; }
    public string MimeType { get; public set; }
    public string StatusText { get; public set; }
    public int StatusCode { get; public set; }
    public CefErrorCode ErrorCode { get; public set; }
    public bool IsReadOnly { get; }
    public string Charset { get; public set; }
    internal CefResponseWrapper(scoped_refptr<CefResponse>* modopt(System.Runtime.CompilerServices.IsImplicitlyDereferenced) response);
    private void !CefResponseWrapper();
    private void ~CefResponseWrapper();
    public virtual string get_Charset();
    public virtual void set_Charset(string val);
    public virtual bool get_IsReadOnly();
    public virtual CefErrorCode get_ErrorCode();
    public virtual void set_ErrorCode(CefErrorCode val);
    public virtual int get_StatusCode();
    public virtual void set_StatusCode(int val);
    public virtual string get_StatusText();
    public virtual void set_StatusText(string val);
    public virtual string get_MimeType();
    public virtual void set_MimeType(string val);
    public virtual NameValueCollection get_Headers();
    public virtual void set_Headers(NameValueCollection headers);
    public virtual NameValueCollection get_ResponseHeaders();
    public virtual void set_ResponseHeaders(NameValueCollection headers);
    public virtual string GetHeaderByName(string name);
    public virtual void SetHeaderByName(string name, string value, bool overwrite);
    public void ThrowIfReadOnly();
    [HandleProcessCorruptedStateExceptionsAttribute]
protected virtual void Dispose(bool A_0);
    public sealed virtual void Dispose();
    protected virtual void Finalize();
}
internal class CefSharp.Internals.CefRunContextMenuCallbackWrapper : CefWrapper {
    private MCefRefPtr<CefRunContextMenuCallback> modreq(System.Runtime.CompilerServices.IsByValue) _callback;
    public CefRunContextMenuCallbackWrapper(scoped_refptr<CefRunContextMenuCallback>* modopt(System.Runtime.CompilerServices.IsImplicitlyDereferenced) callback);
    private void !CefRunContextMenuCallbackWrapper();
    private void ~CefRunContextMenuCallbackWrapper();
    public virtual void Cancel();
    public virtual void Continue(CefMenuCommand commandId, CefEventFlags eventFlags);
    [HandleProcessCorruptedStateExceptionsAttribute]
protected virtual void Dispose(bool A_0);
    public sealed virtual void Dispose();
    protected virtual void Finalize();
}
[NativeCppClassAttribute]
internal class CefSharp.Internals.CefRunFileDialogCallbackAdapter : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class CefSharp.Internals.CefSchemeHandlerFactoryAdapter : ValueType {
    private long <alignment member>;
}
internal class CefSharp.Internals.CefSchemeRegistrarWrapper : CefWrapper {
    private CefSchemeRegistrar* _registra;
    public CefSchemeRegistrarWrapper(CefSchemeRegistrar** modopt(System.Runtime.CompilerServices.IsImplicitlyDereferenced) registra);
    private void !CefSchemeRegistrarWrapper();
    private void ~CefSchemeRegistrarWrapper();
    public virtual bool AddCustomScheme(string schemeName, SchemeOptions schemeOptions);
    [HandleProcessCorruptedStateExceptionsAttribute]
protected virtual void Dispose(bool A_0);
    public sealed virtual void Dispose();
    protected virtual void Finalize();
}
[NativeCppClassAttribute]
internal class CefSharp.Internals.CefSetCookieCallbackAdapter : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class CefSharp.Internals.CefSharpApp : ValueType {
    private long <alignment member>;
}
internal class CefSharp.Internals.CefSslInfoWrapper : CefWrapper {
    private MCefRefPtr<CefSSLInfo> modreq(System.Runtime.CompilerServices.IsByValue) _sslInfo;
    public X509Certificate2 X509Certificate { get; }
    public CertStatus CertStatus { get; }
    public CefSslInfoWrapper(scoped_refptr<CefSSLInfo>* modopt(System.Runtime.CompilerServices.IsImplicitlyDereferenced) sslInfo);
    private void !CefSslInfoWrapper();
    private void ~CefSslInfoWrapper();
    public virtual CertStatus get_CertStatus();
    public virtual X509Certificate2 get_X509Certificate();
    [HandleProcessCorruptedStateExceptionsAttribute]
protected virtual void Dispose(bool A_0);
    public sealed virtual void Dispose();
    protected virtual void Finalize();
}
[NativeCppClassAttribute]
internal class CefSharp.Internals.CefStringVisitorAdapter : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class CefSharp.Internals.CefTaskDelegate : ValueType {
    private long <alignment member>;
}
internal class CefSharp.Internals.CefTaskScheduler : TaskScheduler {
    public cef_thread_id_t _thread;
    public CefTaskScheduler(cef_thread_id_t thread);
    public virtual void QueueTask(Task task);
    public virtual void ExecuteTask(Task task);
    public static bool CurrentlyOnThread(cef_thread_id_t threadId);
    public static void EnsureOn(CefThreadIds threadId, string context);
    public static void EnsureOn(cef_thread_id_t threadId, string context);
    protected virtual bool TryExecuteTaskInline(Task task, bool taskWasPreviouslyQueued);
    protected virtual IEnumerable`1<Task> GetScheduledTasks();
}
[NativeCppClassAttribute]
internal class CefSharp.Internals.CefTaskWrapper : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class CefSharp.Internals.CefUrlRequestClientAdapter : ValueType {
    private long <alignment member>;
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
internal class CefSharp.Internals.CefValueWrapper : CefWrapper {
    private MCefRefPtr<CefValue> modreq(System.Runtime.CompilerServices.IsByValue) _cefValue;
    public ValueType Type { get; }
    private string DebuggerDisplay { get; }
    internal CefValueWrapper(scoped_refptr<CefValue>* modopt(System.Runtime.CompilerServices.IsImplicitlyDereferenced) cefValue);
    private string get_DebuggerDisplay();
    private void !CefValueWrapper();
    private void ~CefValueWrapper();
    public virtual bool GetBool();
    public virtual double GetDouble();
    public virtual int GetInt();
    public virtual string GetString();
    public virtual IDictionary`2<string, IValue> GetDictionary();
    public virtual IList`1<IValue> GetList();
    public virtual object GetObject();
    public virtual ValueType get_Type();
    [HandleProcessCorruptedStateExceptionsAttribute]
protected virtual void Dispose(bool A_0);
    public sealed virtual void Dispose();
    protected virtual void Finalize();
}
public abstract class CefSharp.Internals.CefWrapper : object {
    protected bool _disposed;
    public bool IsDisposed { get; }
    protected void ThrowIfDisposed();
    protected void ThrowIfExecutedOnNonCefUiThread();
    public virtual bool get_IsDisposed();
}
[NativeCppClassAttribute]
internal class CefSharp.Internals.CefWriteHandlerWrapper : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class CefSharp.Internals.ClientAdapter : ValueType {
    private long <alignment member>;
}
internal class CefSharp.Internals.JavascriptCallbackFactory : object {
    private PendingTaskRepository`1<JavascriptResponse> _pendingTasks;
    private WeakReference`1<IBrowserAdapter> <backing_store>BrowserAdapter;
    public WeakReference`1<IBrowserAdapter> BrowserAdapter { get; public set; }
    public JavascriptCallbackFactory(PendingTaskRepository`1<JavascriptResponse> pendingTasks);
    public WeakReference`1<IBrowserAdapter> get_BrowserAdapter();
    public void set_BrowserAdapter(WeakReference`1<IBrowserAdapter> __set_formal);
    public virtual IJavascriptCallback Create(JavascriptCallback callback);
}
internal class CefSharp.Internals.JavascriptCallbackProxy : object {
    private WeakReference`1<IBrowserAdapter> _browserAdapter;
    private JavascriptCallback _callback;
    private PendingTaskRepository`1<JavascriptResponse> _pendingTasks;
    private bool _disposed;
    public bool CanExecute { get; }
    public bool IsDisposed { get; }
    public long Id { get; }
    public JavascriptCallbackProxy(JavascriptCallback callback, PendingTaskRepository`1<JavascriptResponse> pendingTasks, WeakReference`1<IBrowserAdapter> browserAdapter);
    private scoped_refptr<CefProcessMessage>* modreq(System.Runtime.CompilerServices.IsUdtReturn) CreateDestroyMessage(scoped_refptr<CefProcessMessage>* );
    private IBrowser GetBrowser();
    private IJavascriptNameConverter GetJavascriptNameConverter();
    private void DisposedGuard();
    private void ~JavascriptCallbackProxy();
    private void !JavascriptCallbackProxy();
    public virtual Task`1<JavascriptResponse> ExecuteAsync(Object[] parameters);
    public virtual Task`1<JavascriptResponse> ExecuteWithTimeoutAsync(Nullable`1<TimeSpan> timeout, Object[] parameters);
    public virtual long get_Id();
    public virtual bool get_IsDisposed();
    public virtual bool get_CanExecute();
    [HandleProcessCorruptedStateExceptionsAttribute]
protected virtual void Dispose(bool A_0);
    public sealed virtual void Dispose();
    protected virtual void Finalize();
}
internal class CefSharp.Internals.MCefRefPtr<CefAuthCallback> : object {
    private CefAuthCallback* _ptr;
    public MCefRefPtr<CefAuthCallback>(scoped_refptr<CefAuthCallback> modopt(System.Runtime.CompilerServices.IsConst)* modopt(System.Runtime.CompilerServices.IsImplicitlyDereferenced) r);
    private void !MCefRefPtr<CefAuthCallback>();
    private void ~MCefRefPtr<CefAuthCallback>();
    public CefAuthCallback* op_MemberSelection();
    public MCefRefPtr<CefAuthCallback> modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) op_Assign(CefAuthCallback* p);
    public sealed virtual bool Equals(object obj);
    public sealed virtual int GetHashCode();
    [HandleProcessCorruptedStateExceptionsAttribute]
protected sealed virtual void Dispose(bool A_0);
    public sealed virtual void Dispose();
    protected sealed virtual void Finalize();
}
internal class CefSharp.Internals.MCefRefPtr<CefBeforeDownloadCallback> : object {
    private CefBeforeDownloadCallback* _ptr;
    public MCefRefPtr<CefBeforeDownloadCallback>(scoped_refptr<CefBeforeDownloadCallback> modopt(System.Runtime.CompilerServices.IsConst)* modopt(System.Runtime.CompilerServices.IsImplicitlyDereferenced) r);
    private void !MCefRefPtr<CefBeforeDownloadCallback>();
    private void ~MCefRefPtr<CefBeforeDownloadCallback>();
    public CefBeforeDownloadCallback* op_MemberSelection();
    public MCefRefPtr<CefBeforeDownloadCallback> modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) op_Assign(CefBeforeDownloadCallback* p);
    public sealed virtual bool Equals(object obj);
    public sealed virtual int GetHashCode();
    [HandleProcessCorruptedStateExceptionsAttribute]
protected sealed virtual void Dispose(bool A_0);
    public sealed virtual void Dispose();
    protected sealed virtual void Finalize();
}
internal class CefSharp.Internals.MCefRefPtr<CefBrowser> : object {
    private CefBrowser* _ptr;
    public MCefRefPtr<CefBrowser>(scoped_refptr<CefBrowser> modopt(System.Runtime.CompilerServices.IsConst)* modopt(System.Runtime.CompilerServices.IsImplicitlyDereferenced) r);
    public MCefRefPtr<CefBrowser>(MCefRefPtr<CefBrowser> modopt(System.Runtime.CompilerServices.IsConst) modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) r);
    private void !MCefRefPtr<CefBrowser>();
    private void ~MCefRefPtr<CefBrowser>();
    public MCefRefPtr<CefBrowser> modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) op_Assign(CefBrowser* p);
    public sealed virtual bool Equals(object obj);
    public sealed virtual int GetHashCode();
    [HandleProcessCorruptedStateExceptionsAttribute]
protected sealed virtual void Dispose(bool A_0);
    public sealed virtual void Dispose();
    protected sealed virtual void Finalize();
    public CefBrowser* get();
    public CefBrowser* op_MemberSelection();
}
internal class CefSharp.Internals.MCefRefPtr<CefBrowserHost> : object {
    private CefBrowserHost* _ptr;
    public MCefRefPtr<CefBrowserHost>(scoped_refptr<CefBrowserHost> modopt(System.Runtime.CompilerServices.IsConst)* modopt(System.Runtime.CompilerServices.IsImplicitlyDereferenced) r);
    private void !MCefRefPtr<CefBrowserHost>();
    private void ~MCefRefPtr<CefBrowserHost>();
    public CefBrowserHost* get();
    public CefBrowserHost* op_MemberSelection();
    public MCefRefPtr<CefBrowserHost> modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) op_Assign(CefBrowserHost* p);
    public sealed virtual bool Equals(object obj);
    public sealed virtual int GetHashCode();
    [HandleProcessCorruptedStateExceptionsAttribute]
protected sealed virtual void Dispose(bool A_0);
    public sealed virtual void Dispose();
    protected sealed virtual void Finalize();
}
internal class CefSharp.Internals.MCefRefPtr<CefCallback> : object {
    private CefCallback* _ptr;
    public MCefRefPtr<CefCallback>(scoped_refptr<CefCallback> modopt(System.Runtime.CompilerServices.IsConst)* modopt(System.Runtime.CompilerServices.IsImplicitlyDereferenced) r);
    private void !MCefRefPtr<CefCallback>();
    private void ~MCefRefPtr<CefCallback>();
    public CefCallback* op_MemberSelection();
    public MCefRefPtr<CefCallback> modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) op_Assign(CefCallback* p);
    public sealed virtual bool Equals(object obj);
    public sealed virtual int GetHashCode();
    [HandleProcessCorruptedStateExceptionsAttribute]
protected sealed virtual void Dispose(bool A_0);
    public sealed virtual void Dispose();
    protected sealed virtual void Finalize();
}
internal class CefSharp.Internals.MCefRefPtr<CefContextMenuParams> : object {
    private CefContextMenuParams* _ptr;
    public MCefRefPtr<CefContextMenuParams>(scoped_refptr<CefContextMenuParams> modopt(System.Runtime.CompilerServices.IsConst)* modopt(System.Runtime.CompilerServices.IsImplicitlyDereferenced) r);
    private void !MCefRefPtr<CefContextMenuParams>();
    private void ~MCefRefPtr<CefContextMenuParams>();
    public CefContextMenuParams* op_MemberSelection();
    public MCefRefPtr<CefContextMenuParams> modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) op_Assign(CefContextMenuParams* p);
    public sealed virtual bool Equals(object obj);
    public sealed virtual int GetHashCode();
    [HandleProcessCorruptedStateExceptionsAttribute]
protected sealed virtual void Dispose(bool A_0);
    public sealed virtual void Dispose();
    protected sealed virtual void Finalize();
}
internal class CefSharp.Internals.MCefRefPtr<CefCookieManager> : object {
    private CefCookieManager* _ptr;
    public MCefRefPtr<CefCookieManager>(CefCookieManager* p);
    private void !MCefRefPtr<CefCookieManager>();
    private void ~MCefRefPtr<CefCookieManager>();
    public CefCookieManager* get();
    public CefCookieManager* op_MemberSelection();
    public MCefRefPtr<CefCookieManager> modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) op_Assign(CefCookieManager* p);
    public sealed virtual bool Equals(object obj);
    public sealed virtual int GetHashCode();
    [HandleProcessCorruptedStateExceptionsAttribute]
protected sealed virtual void Dispose(bool A_0);
    public sealed virtual void Dispose();
    protected sealed virtual void Finalize();
}
internal class CefSharp.Internals.MCefRefPtr<CefDownloadItemCallback> : object {
    private CefDownloadItemCallback* _ptr;
    public MCefRefPtr<CefDownloadItemCallback>(scoped_refptr<CefDownloadItemCallback> modopt(System.Runtime.CompilerServices.IsConst)* modopt(System.Runtime.CompilerServices.IsImplicitlyDereferenced) r);
    private void !MCefRefPtr<CefDownloadItemCallback>();
    private void ~MCefRefPtr<CefDownloadItemCallback>();
    public CefDownloadItemCallback* op_MemberSelection();
    public MCefRefPtr<CefDownloadItemCallback> modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) op_Assign(CefDownloadItemCallback* p);
    public sealed virtual bool Equals(object obj);
    public sealed virtual int GetHashCode();
    [HandleProcessCorruptedStateExceptionsAttribute]
protected sealed virtual void Dispose(bool A_0);
    public sealed virtual void Dispose();
    protected sealed virtual void Finalize();
}
internal class CefSharp.Internals.MCefRefPtr<CefDragData> : object {
    private CefDragData* _ptr;
    public MCefRefPtr<CefDragData>(scoped_refptr<CefDragData> modopt(System.Runtime.CompilerServices.IsConst)* modopt(System.Runtime.CompilerServices.IsImplicitlyDereferenced) r);
    private void !MCefRefPtr<CefDragData>();
    private void ~MCefRefPtr<CefDragData>();
    public CefDragData* get();
    public CefDragData* op_MemberSelection();
    public MCefRefPtr<CefDragData> modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) op_Assign(CefDragData* p);
    public sealed virtual bool Equals(object obj);
    public sealed virtual int GetHashCode();
    [HandleProcessCorruptedStateExceptionsAttribute]
protected sealed virtual void Dispose(bool A_0);
    public sealed virtual void Dispose();
    protected sealed virtual void Finalize();
}
internal class CefSharp.Internals.MCefRefPtr<CefFileDialogCallback> : object {
    private CefFileDialogCallback* _ptr;
    public MCefRefPtr<CefFileDialogCallback>(scoped_refptr<CefFileDialogCallback> modopt(System.Runtime.CompilerServices.IsConst)* modopt(System.Runtime.CompilerServices.IsImplicitlyDereferenced) r);
    private void !MCefRefPtr<CefFileDialogCallback>();
    private void ~MCefRefPtr<CefFileDialogCallback>();
    public CefFileDialogCallback* op_MemberSelection();
    public MCefRefPtr<CefFileDialogCallback> modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) op_Assign(CefFileDialogCallback* p);
    public sealed virtual bool Equals(object obj);
    public sealed virtual int GetHashCode();
    [HandleProcessCorruptedStateExceptionsAttribute]
protected sealed virtual void Dispose(bool A_0);
    public sealed virtual void Dispose();
    protected sealed virtual void Finalize();
}
internal class CefSharp.Internals.MCefRefPtr<CefFrame> : object {
    private CefFrame* _ptr;
    public MCefRefPtr<CefFrame>(scoped_refptr<CefFrame> modopt(System.Runtime.CompilerServices.IsConst)* modopt(System.Runtime.CompilerServices.IsImplicitlyDereferenced) r);
    private void !MCefRefPtr<CefFrame>();
    private void ~MCefRefPtr<CefFrame>();
    public CefFrame* op_MemberSelection();
    public MCefRefPtr<CefFrame> modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) op_Assign(CefFrame* p);
    public sealed virtual bool Equals(object obj);
    public sealed virtual int GetHashCode();
    [HandleProcessCorruptedStateExceptionsAttribute]
protected sealed virtual void Dispose(bool A_0);
    public sealed virtual void Dispose();
    protected sealed virtual void Finalize();
}
internal class CefSharp.Internals.MCefRefPtr<CefImage> : object {
    private CefImage* _ptr;
    public MCefRefPtr<CefImage>(scoped_refptr<CefImage> modopt(System.Runtime.CompilerServices.IsConst)* modopt(System.Runtime.CompilerServices.IsImplicitlyDereferenced) r);
    private void !MCefRefPtr<CefImage>();
    private void ~MCefRefPtr<CefImage>();
    public CefImage* get();
    public CefImage* op_MemberSelection();
    public MCefRefPtr<CefImage> modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) op_Assign(CefImage* p);
    public sealed virtual bool Equals(object obj);
    public sealed virtual int GetHashCode();
    [HandleProcessCorruptedStateExceptionsAttribute]
protected sealed virtual void Dispose(bool A_0);
    public sealed virtual void Dispose();
    protected sealed virtual void Finalize();
}
internal class CefSharp.Internals.MCefRefPtr<CefJSDialogCallback> : object {
    private CefJSDialogCallback* _ptr;
    public MCefRefPtr<CefJSDialogCallback>(scoped_refptr<CefJSDialogCallback> modopt(System.Runtime.CompilerServices.IsConst)* modopt(System.Runtime.CompilerServices.IsImplicitlyDereferenced) r);
    private void !MCefRefPtr<CefJSDialogCallback>();
    private void ~MCefRefPtr<CefJSDialogCallback>();
    public CefJSDialogCallback* op_MemberSelection();
    public MCefRefPtr<CefJSDialogCallback> modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) op_Assign(CefJSDialogCallback* p);
    public sealed virtual bool Equals(object obj);
    public sealed virtual int GetHashCode();
    [HandleProcessCorruptedStateExceptionsAttribute]
protected sealed virtual void Dispose(bool A_0);
    public sealed virtual void Dispose();
    protected sealed virtual void Finalize();
}
internal class CefSharp.Internals.MCefRefPtr<CefMediaAccessCallback> : object {
    private CefMediaAccessCallback* _ptr;
    public MCefRefPtr<CefMediaAccessCallback>(scoped_refptr<CefMediaAccessCallback> modopt(System.Runtime.CompilerServices.IsConst)* modopt(System.Runtime.CompilerServices.IsImplicitlyDereferenced) r);
    private void !MCefRefPtr<CefMediaAccessCallback>();
    private void ~MCefRefPtr<CefMediaAccessCallback>();
    public CefMediaAccessCallback* op_MemberSelection();
    public MCefRefPtr<CefMediaAccessCallback> modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) op_Assign(CefMediaAccessCallback* p);
    public sealed virtual bool Equals(object obj);
    public sealed virtual int GetHashCode();
    [HandleProcessCorruptedStateExceptionsAttribute]
protected sealed virtual void Dispose(bool A_0);
    public sealed virtual void Dispose();
    protected sealed virtual void Finalize();
}
internal class CefSharp.Internals.MCefRefPtr<CefMenuModel> : object {
    private CefMenuModel* _ptr;
    public MCefRefPtr<CefMenuModel>(scoped_refptr<CefMenuModel> modopt(System.Runtime.CompilerServices.IsConst)* modopt(System.Runtime.CompilerServices.IsImplicitlyDereferenced) r);
    private void !MCefRefPtr<CefMenuModel>();
    private void ~MCefRefPtr<CefMenuModel>();
    public CefMenuModel* op_MemberSelection();
    public MCefRefPtr<CefMenuModel> modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) op_Assign(CefMenuModel* p);
    public sealed virtual bool Equals(object obj);
    public sealed virtual int GetHashCode();
    [HandleProcessCorruptedStateExceptionsAttribute]
protected sealed virtual void Dispose(bool A_0);
    public sealed virtual void Dispose();
    protected sealed virtual void Finalize();
}
internal class CefSharp.Internals.MCefRefPtr<CefPermissionPromptCallback> : object {
    private CefPermissionPromptCallback* _ptr;
    public MCefRefPtr<CefPermissionPromptCallback>(scoped_refptr<CefPermissionPromptCallback> modopt(System.Runtime.CompilerServices.IsConst)* modopt(System.Runtime.CompilerServices.IsImplicitlyDereferenced) r);
    private void !MCefRefPtr<CefPermissionPromptCallback>();
    private void ~MCefRefPtr<CefPermissionPromptCallback>();
    public CefPermissionPromptCallback* op_MemberSelection();
    public MCefRefPtr<CefPermissionPromptCallback> modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) op_Assign(CefPermissionPromptCallback* p);
    public sealed virtual bool Equals(object obj);
    public sealed virtual int GetHashCode();
    [HandleProcessCorruptedStateExceptionsAttribute]
protected sealed virtual void Dispose(bool A_0);
    public sealed virtual void Dispose();
    protected sealed virtual void Finalize();
}
internal class CefSharp.Internals.MCefRefPtr<CefPostData> : object {
    private CefPostData* _ptr;
    public MCefRefPtr<CefPostData>(scoped_refptr<CefPostData> modopt(System.Runtime.CompilerServices.IsConst)* modopt(System.Runtime.CompilerServices.IsImplicitlyDereferenced) r);
    private void !MCefRefPtr<CefPostData>();
    private void ~MCefRefPtr<CefPostData>();
    public CefPostData* get();
    public CefPostData* op_MemberSelection();
    public MCefRefPtr<CefPostData> modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) op_Assign(CefPostData* p);
    public sealed virtual bool Equals(object obj);
    public sealed virtual int GetHashCode();
    [HandleProcessCorruptedStateExceptionsAttribute]
protected sealed virtual void Dispose(bool A_0);
    public sealed virtual void Dispose();
    protected sealed virtual void Finalize();
}
internal class CefSharp.Internals.MCefRefPtr<CefPostDataElement> : object {
    private CefPostDataElement* _ptr;
    public MCefRefPtr<CefPostDataElement>(scoped_refptr<CefPostDataElement> modopt(System.Runtime.CompilerServices.IsConst)* modopt(System.Runtime.CompilerServices.IsImplicitlyDereferenced) r);
    private void !MCefRefPtr<CefPostDataElement>();
    private void ~MCefRefPtr<CefPostDataElement>();
    public CefPostDataElement* get();
    public CefPostDataElement* op_MemberSelection();
    public MCefRefPtr<CefPostDataElement> modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) op_Assign(CefPostDataElement* p);
    public sealed virtual bool Equals(object obj);
    public sealed virtual int GetHashCode();
    [HandleProcessCorruptedStateExceptionsAttribute]
protected sealed virtual void Dispose(bool A_0);
    public sealed virtual void Dispose();
    protected sealed virtual void Finalize();
}
internal class CefSharp.Internals.MCefRefPtr<CefRegistration> : object {
    private CefRegistration* _ptr;
    public MCefRefPtr<CefRegistration>(scoped_refptr<CefRegistration> modopt(System.Runtime.CompilerServices.IsConst)* modopt(System.Runtime.CompilerServices.IsImplicitlyDereferenced) r);
    private void !MCefRefPtr<CefRegistration>();
    private void ~MCefRefPtr<CefRegistration>();
    public MCefRefPtr<CefRegistration> modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) op_Assign(CefRegistration* p);
    public sealed virtual bool Equals(object obj);
    public sealed virtual int GetHashCode();
    [HandleProcessCorruptedStateExceptionsAttribute]
protected sealed virtual void Dispose(bool A_0);
    public sealed virtual void Dispose();
    protected sealed virtual void Finalize();
}
internal class CefSharp.Internals.MCefRefPtr<CefRequest> : object {
    private CefRequest* _ptr;
    public MCefRefPtr<CefRequest>(scoped_refptr<CefRequest> modopt(System.Runtime.CompilerServices.IsConst)* modopt(System.Runtime.CompilerServices.IsImplicitlyDereferenced) r);
    private void !MCefRefPtr<CefRequest>();
    private void ~MCefRefPtr<CefRequest>();
    public CefRequest* get();
    public CefRequest* op_MemberSelection();
    public MCefRefPtr<CefRequest> modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) op_Assign(CefRequest* p);
    public sealed virtual bool Equals(object obj);
    public sealed virtual int GetHashCode();
    [HandleProcessCorruptedStateExceptionsAttribute]
protected sealed virtual void Dispose(bool A_0);
    public sealed virtual void Dispose();
    protected sealed virtual void Finalize();
}
internal class CefSharp.Internals.MCefRefPtr<CefRequestContext> : object {
    private CefRequestContext* _ptr;
    private void !MCefRefPtr<CefRequestContext>();
    private void ~MCefRefPtr<CefRequestContext>();
    public CefRequestContext* get();
    public CefRequestContext* op_MemberSelection();
    public MCefRefPtr<CefRequestContext> modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) op_Assign(CefRequestContext* p);
    public sealed virtual bool Equals(object obj);
    public sealed virtual int GetHashCode();
    [HandleProcessCorruptedStateExceptionsAttribute]
protected sealed virtual void Dispose(bool A_0);
    public sealed virtual void Dispose();
    protected sealed virtual void Finalize();
}
internal class CefSharp.Internals.MCefRefPtr<CefResourceReadCallback> : object {
    private CefResourceReadCallback* _ptr;
    public MCefRefPtr<CefResourceReadCallback>(scoped_refptr<CefResourceReadCallback> modopt(System.Runtime.CompilerServices.IsConst)* modopt(System.Runtime.CompilerServices.IsImplicitlyDereferenced) r);
    private void !MCefRefPtr<CefResourceReadCallback>();
    private void ~MCefRefPtr<CefResourceReadCallback>();
    public CefResourceReadCallback* op_MemberSelection();
    public MCefRefPtr<CefResourceReadCallback> modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) op_Assign(CefResourceReadCallback* p);
    public sealed virtual bool Equals(object obj);
    public sealed virtual int GetHashCode();
    [HandleProcessCorruptedStateExceptionsAttribute]
protected sealed virtual void Dispose(bool A_0);
    public sealed virtual void Dispose();
    protected sealed virtual void Finalize();
}
internal class CefSharp.Internals.MCefRefPtr<CefResourceSkipCallback> : object {
    private CefResourceSkipCallback* _ptr;
    public MCefRefPtr<CefResourceSkipCallback>(scoped_refptr<CefResourceSkipCallback> modopt(System.Runtime.CompilerServices.IsConst)* modopt(System.Runtime.CompilerServices.IsImplicitlyDereferenced) r);
    private void !MCefRefPtr<CefResourceSkipCallback>();
    private void ~MCefRefPtr<CefResourceSkipCallback>();
    public CefResourceSkipCallback* op_MemberSelection();
    public MCefRefPtr<CefResourceSkipCallback> modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) op_Assign(CefResourceSkipCallback* p);
    public sealed virtual bool Equals(object obj);
    public sealed virtual int GetHashCode();
    [HandleProcessCorruptedStateExceptionsAttribute]
protected sealed virtual void Dispose(bool A_0);
    public sealed virtual void Dispose();
    protected sealed virtual void Finalize();
}
internal class CefSharp.Internals.MCefRefPtr<CefResponse> : object {
    private CefResponse* _ptr;
    public MCefRefPtr<CefResponse>(scoped_refptr<CefResponse> modopt(System.Runtime.CompilerServices.IsConst)* modopt(System.Runtime.CompilerServices.IsImplicitlyDereferenced) r);
    private void !MCefRefPtr<CefResponse>();
    private void ~MCefRefPtr<CefResponse>();
    public CefResponse* op_MemberSelection();
    public MCefRefPtr<CefResponse> modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) op_Assign(CefResponse* p);
    public sealed virtual bool Equals(object obj);
    public sealed virtual int GetHashCode();
    [HandleProcessCorruptedStateExceptionsAttribute]
protected sealed virtual void Dispose(bool A_0);
    public sealed virtual void Dispose();
    protected sealed virtual void Finalize();
}
internal class CefSharp.Internals.MCefRefPtr<CefRunContextMenuCallback> : object {
    private CefRunContextMenuCallback* _ptr;
    public MCefRefPtr<CefRunContextMenuCallback>(scoped_refptr<CefRunContextMenuCallback> modopt(System.Runtime.CompilerServices.IsConst)* modopt(System.Runtime.CompilerServices.IsImplicitlyDereferenced) r);
    private void !MCefRefPtr<CefRunContextMenuCallback>();
    private void ~MCefRefPtr<CefRunContextMenuCallback>();
    public CefRunContextMenuCallback* op_MemberSelection();
    public MCefRefPtr<CefRunContextMenuCallback> modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) op_Assign(CefRunContextMenuCallback* p);
    public sealed virtual bool Equals(object obj);
    public sealed virtual int GetHashCode();
    [HandleProcessCorruptedStateExceptionsAttribute]
protected sealed virtual void Dispose(bool A_0);
    public sealed virtual void Dispose();
    protected sealed virtual void Finalize();
}
internal class CefSharp.Internals.MCefRefPtr<CefSelectClientCertificateCallback> : object {
    private CefSelectClientCertificateCallback* _ptr;
    public MCefRefPtr<CefSelectClientCertificateCallback>(scoped_refptr<CefSelectClientCertificateCallback> modopt(System.Runtime.CompilerServices.IsConst)* modopt(System.Runtime.CompilerServices.IsImplicitlyDereferenced) r);
    private void !MCefRefPtr<CefSelectClientCertificateCallback>();
    private void ~MCefRefPtr<CefSelectClientCertificateCallback>();
    public CefSelectClientCertificateCallback* op_MemberSelection();
    public MCefRefPtr<CefSelectClientCertificateCallback> modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) op_Assign(CefSelectClientCertificateCallback* p);
    public sealed virtual bool Equals(object obj);
    public sealed virtual int GetHashCode();
    [HandleProcessCorruptedStateExceptionsAttribute]
protected sealed virtual void Dispose(bool A_0);
    public sealed virtual void Dispose();
    protected sealed virtual void Finalize();
}
internal class CefSharp.Internals.MCefRefPtr<CefSharp::Internals::ClientAdapter> : object {
    private ClientAdapter* _ptr;
    public MCefRefPtr<CefSharp::Internals::ClientAdapter>(MCefRefPtr<CefSharp::Internals::ClientAdapter> modopt(System.Runtime.CompilerServices.IsConst) modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) r);
    private void !MCefRefPtr<CefSharp::Internals::ClientAdapter>();
    private void ~MCefRefPtr<CefSharp::Internals::ClientAdapter>();
    public ClientAdapter* get();
    public ClientAdapter* op_MemberSelection();
    public MCefRefPtr<CefSharp::Internals::ClientAdapter> modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) op_Assign(ClientAdapter* p);
    public sealed virtual bool Equals(object obj);
    public sealed virtual int GetHashCode();
    [HandleProcessCorruptedStateExceptionsAttribute]
protected sealed virtual void Dispose(bool A_0);
    public sealed virtual void Dispose();
    protected sealed virtual void Finalize();
}
internal class CefSharp.Internals.MCefRefPtr<CefSSLInfo> : object {
    private CefSSLInfo* _ptr;
    public MCefRefPtr<CefSSLInfo>(scoped_refptr<CefSSLInfo> modopt(System.Runtime.CompilerServices.IsConst)* modopt(System.Runtime.CompilerServices.IsImplicitlyDereferenced) r);
    private void !MCefRefPtr<CefSSLInfo>();
    private void ~MCefRefPtr<CefSSLInfo>();
    public CefSSLInfo* op_MemberSelection();
    public MCefRefPtr<CefSSLInfo> modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) op_Assign(CefSSLInfo* p);
    public sealed virtual bool Equals(object obj);
    public sealed virtual int GetHashCode();
    [HandleProcessCorruptedStateExceptionsAttribute]
protected sealed virtual void Dispose(bool A_0);
    public sealed virtual void Dispose();
    protected sealed virtual void Finalize();
}
internal class CefSharp.Internals.MCefRefPtr<CefURLRequest> : object {
    private CefURLRequest* _ptr;
    public MCefRefPtr<CefURLRequest>(scoped_refptr<CefURLRequest> modopt(System.Runtime.CompilerServices.IsConst)* modopt(System.Runtime.CompilerServices.IsImplicitlyDereferenced) r);
    private void !MCefRefPtr<CefURLRequest>();
    private void ~MCefRefPtr<CefURLRequest>();
    public MCefRefPtr<CefURLRequest> modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) op_Assign(CefURLRequest* p);
    public sealed virtual bool Equals(object obj);
    public sealed virtual int GetHashCode();
    [HandleProcessCorruptedStateExceptionsAttribute]
protected sealed virtual void Dispose(bool A_0);
    public sealed virtual void Dispose();
    protected sealed virtual void Finalize();
    public CefURLRequest* op_MemberSelection();
}
internal class CefSharp.Internals.MCefRefPtr<CefValue> : object {
    private CefValue* _ptr;
    public MCefRefPtr<CefValue>(scoped_refptr<CefValue> modopt(System.Runtime.CompilerServices.IsConst)* modopt(System.Runtime.CompilerServices.IsImplicitlyDereferenced) r);
    private void !MCefRefPtr<CefValue>();
    private void ~MCefRefPtr<CefValue>();
    public CefValue* get();
    public CefValue* op_MemberSelection();
    public MCefRefPtr<CefValue> modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) op_Assign(CefValue* p);
    public sealed virtual bool Equals(object obj);
    public sealed virtual int GetHashCode();
    [HandleProcessCorruptedStateExceptionsAttribute]
protected sealed virtual void Dispose(bool A_0);
    public sealed virtual void Dispose();
    protected sealed virtual void Finalize();
}
[NativeCppClassAttribute]
internal class CefSharp.Internals.RenderClientAdapter : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class CefSharp.Internals.ReportUnhandledExceptions : ValueType {
}
[NativeCppClassAttribute]
internal enum CefSharp.Internals.Serialization.PrimitiveType : Enum {
    public byte value__;
}
[NativeCppClassAttribute]
internal class CefSharp.Internals.StringUtils : ValueType {
}
internal static class CefSharp.Internals.TypeConversion : object {
    public static scoped_refptr<CefValue>* modreq(System.Runtime.CompilerServices.IsUdtReturn) ToNative(scoped_refptr<CefValue>* , object value);
    public static multimap<CefStringBase<CefStringTraitsUTF16>,CefStringBase<CefStringTraitsUTF16>,std::less<CefStringBase<CefStringTraitsUTF16> >,std::allocator<std::pair<CefStringBase<CefStringTraitsUTF16> const ,CefStringBase<CefStringTraitsUTF16> > > >* modreq(System.Runtime.CompilerServices.IsUdtReturn) ToNative(multimap<CefStringBase<CefStringTraitsUTF16>,CefStringBase<CefStringTraitsUTF16>,std::less<CefStringBase<CefStringTraitsUTF16> >,std::allocator<std::pair<CefStringBase<CefStringTraitsUTF16> const ,CefStringBase<CefStringTraitsUTF16> > > >* , NameValueCollection headers);
    public static NavigationEntry FromNative(scoped_refptr<CefNavigationEntry> modopt(System.Runtime.CompilerServices.IsConst) modreq(System.Runtime.CompilerServices.IsCopyConstructed)* entry, bool current);
    public static Cookie FromNative(CefStructBase<CefCookieTraits> modopt(System.Runtime.CompilerServices.IsConst)* modopt(System.Runtime.CompilerServices.IsImplicitlyDereferenced) cefCookie);
    public static List`1<object> FromNative(scoped_refptr<CefListValue> modopt(System.Runtime.CompilerServices.IsConst)* modopt(System.Runtime.CompilerServices.IsImplicitlyDereferenced) list);
    public static IDictionary`2<string, object> FromNative(scoped_refptr<CefDictionaryValue> modopt(System.Runtime.CompilerServices.IsConst)* modopt(System.Runtime.CompilerServices.IsImplicitlyDereferenced) dictionary);
    public static object FromNative(scoped_refptr<CefValue> modopt(System.Runtime.CompilerServices.IsConst)* modopt(System.Runtime.CompilerServices.IsImplicitlyDereferenced) value);
    public static IList`1<DraggableRegion> FromNative(vector<CefDraggableRegion,std::allocator<CefDraggableRegion> > modopt(System.Runtime.CompilerServices.IsConst)* modopt(System.Runtime.CompilerServices.IsImplicitlyDereferenced) regions);
    public static DownloadItem FromNative(scoped_refptr<CefDownloadItem> modreq(System.Runtime.CompilerServices.IsCopyConstructed)* downloadItem);
}
[NativeCppClassAttribute]
internal class CefSize : ValueType {
    private int <alignment member>;
}
[NativeCppClassAttribute]
internal static class CefSSLInfo : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal static class CefSSLStatus : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal static class CefStreamReader : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class CefStreamResourceHandler : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal static class CefStreamWriter : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class CefStringBase<CefStringTraitsUTF16> : ValueType {
    private long <alignment member>;
    public static void <MarshalCopy>(CefStringBase<CefStringTraitsUTF16>* A_0, CefStringBase<CefStringTraitsUTF16>* A_1);
    public static void <MarshalDestroy>(CefStringBase<CefStringTraitsUTF16>* A_0);
}
[NativeCppClassAttribute]
internal class CefStringTraitsUTF16 : ValueType {
}
[NativeCppClassAttribute]
internal class CefStringTraitsUTF8 : ValueType {
}
[NativeCppClassAttribute]
internal class CefStringTraitsWide : ValueType {
}
[NativeCppClassAttribute]
internal static class CefStringVisitor : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class CefStructBase<CefBrowserSettingsTraits> : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class CefStructBase<CefCookieTraits> : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class CefStructBase<CefPdfPrintSettingsTraits> : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class CefStructBase<CefRequestContextSettingsTraits> : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class CefStructBase<CefSettingsTraits> : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class CefStructBase<CefURLPartsTraits> : ValueType {
    private long <alignment member>;
}
[UnsafeValueTypeAttribute]
[NativeCppClassAttribute]
internal class CefStructBase<CefWindowInfoTraits> : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal static class CefTask : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
[UnsafeValueTypeAttribute]
internal class CefTime : ValueType {
    private int <alignment member>;
}
[NativeCppClassAttribute]
[UnsafeValueTypeAttribute]
internal class CefTouchEvent : ValueType {
    private int <alignment member>;
}
[NativeCppClassAttribute]
[UnsafeValueTypeAttribute]
internal class CefTouchHandleState : ValueType {
    private int <alignment member>;
}
[NativeCppClassAttribute]
internal static class CefUnresponsiveProcessCallback : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class CefURLPartsTraits : ValueType {
}
[NativeCppClassAttribute]
internal static class CefURLRequest : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal static class CefURLRequestClient : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal static class CefV8Context : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal static class CefV8Exception : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal static class CefV8StackTrace : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal static class CefValue : ValueType {
    private long <alignment member>;
}
[UnsafeValueTypeAttribute]
[NativeCppClassAttribute]
internal class CefWindowInfo : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class CefWindowInfoTraits : ValueType {
}
[NativeCppClassAttribute]
internal static class CefWriteHandler : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal static class CefX509Certificate : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal enum CO_MARSHALING_CONTEXT_ATTRIBUTES : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum CWMO_FLAGS : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum DIALOG_DPI_CHANGE_BEHAVIORS : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum DISPLAYCONFIG_TOPOLOGY_ID : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum DPI_AWARENESS : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum DPI_HOSTING_BEHAVIOR : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal class EHExceptionRecord : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal enum ETaskType : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal class gcroot<CefSharp::Callback::IDevToolsMessageObserver ^> : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class gcroot<CefSharp::Callback::IRunFileDialogCallback ^> : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class gcroot<CefSharp::IApp ^> : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class gcroot<CefSharp::IBrowser ^> : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class gcroot<CefSharp::ICompletionCallback ^> : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class gcroot<CefSharp::ICookieAccessFilter ^> : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class gcroot<CefSharp::ICookieVisitor ^> : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class gcroot<CefSharp::IDeleteCookiesCallback ^> : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class gcroot<CefSharp::INavigationEntryVisitor ^> : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class gcroot<CefSharp::Internals::CommandLineArgDictionary ^> : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class gcroot<CefSharp::Internals::IBrowserAdapter ^> : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class gcroot<CefSharp::Internals::IRenderWebBrowser ^> : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class gcroot<CefSharp::Internals::ITaskScheduler ^> : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class gcroot<CefSharp::Internals::IWebBrowserInternal ^> : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class gcroot<CefSharp::Internals::PendingTaskRepository<CefSharp::JavascriptResponse ^> ^> : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class gcroot<CefSharp::IPrintToPdfCallback ^> : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class gcroot<CefSharp::IRequest ^> : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class gcroot<CefSharp::IRequestContextHandler ^> : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class gcroot<CefSharp::IResolveCallback ^> : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class gcroot<CefSharp::IResourceHandler ^> : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class gcroot<CefSharp::IResourceRequestHandler ^> : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class gcroot<CefSharp::IResponseFilter ^> : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class gcroot<CefSharp::ISchemeHandlerFactory ^> : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class gcroot<CefSharp::ISetCookieCallback ^> : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class gcroot<CefSharp::IStringVisitor ^> : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class gcroot<CefSharp::IUrlRequestClient ^> : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class gcroot<CefSharp::IWebBrowser ^> : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class gcroot<System::Action ^> : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class gcroot<System::Collections::Generic::Dictionary<int,CefSharp::IBrowser ^> ^> : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class gcroot<System::Collections::Generic::IEnumerable<CefSharp::CefCustomScheme ^> ^> : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class gcroot<System::IO::Stream ^> : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class gcroot<System::String ^> : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class gcroot<System::Threading::Tasks::Task ^> : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class HDC__ : ValueType {
    private int <alignment member>;
}
[NativeCppClassAttribute]
internal class HICON__ : ValueType {
    private int <alignment member>;
}
[NativeCppClassAttribute]
internal class HINSTANCE__ : ValueType {
    private int <alignment member>;
}
[NativeCppClassAttribute]
internal class HKL__ : ValueType {
    private int <alignment member>;
}
[NativeCppClassAttribute]
internal class HWND__ : ValueType {
    private int <alignment member>;
}
[NativeCppClassAttribute]
internal static class ICLRRuntimeHost : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal static class ICorRuntimeHost : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal enum IMAGE_AUX_SYMBOL_TYPE : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum IMPORT_OBJECT_NAME_TYPE : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum IMPORT_OBJECT_TYPE : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum ISA_AVAILABILITY : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal static class IUnknown : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal enum JOB_OBJECT_IO_RATE_CONTROL_FLAGS : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum JOB_OBJECT_NET_RATE_CONTROL_FLAGS : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum JOBOBJECT_IO_ATTRIBUTION_CONTROL_FLAGS : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal class lconv : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal enum MEM_EXTENDED_PARAMETER_TYPE : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum MEM_SECTION_EXTENDED_PARAMETER_TYPE : Enum {
    public int value__;
}
internal class msclr._detail_class : ValueType {
    public static String modopt(System.Runtime.CompilerServices.IsConst) _safe_true;
    public static String modopt(System.Runtime.CompilerServices.IsConst) _safe_false;
    private static _detail_class();
}
internal class msclr.interop.context_node_base : object {
    public static Boolean modopt(System.Runtime.CompilerServices.IsConst) _Needs_Context;
    private static context_node_base();
}
internal class msclr.interop.context_node<char const *,System::String ^> : context_node_base {
    private SByte modopt(System.Runtime.CompilerServices.IsSignUnspecifiedByte)* _ptr;
    public context_node<char const *,System::String ^>(SByte modopt(System.Runtime.CompilerServices.IsSignUnspecifiedByte) modopt(System.Runtime.CompilerServices.IsConst)** modopt(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _to_object, string _from_object);
    private void ~context_node<char const *,System::String ^>();
    private void !context_node<char const *,System::String ^>();
    [HandleProcessCorruptedStateExceptionsAttribute]
protected virtual void Dispose(bool A_0);
    public sealed virtual void Dispose();
    protected virtual void Finalize();
}
internal class msclr.interop.context_node<wchar_t const *,System::String ^> : context_node_base {
    private IntPtr _ip;
    public context_node<wchar_t const *,System::String ^>(Char modopt(System.Runtime.CompilerServices.IsConst)** modopt(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _to_object, string _from_object);
    private void ~context_node<wchar_t const *,System::String ^>();
    private void !context_node<wchar_t const *,System::String ^>();
    [HandleProcessCorruptedStateExceptionsAttribute]
protected virtual void Dispose(bool A_0);
    public sealed virtual void Dispose();
    protected virtual void Finalize();
}
[NativeCppClassAttribute]
internal class msclr.interop.details.char_buffer<char> : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class msclr.interop.details.char_buffer<wchar_t> : ValueType {
    private long <alignment member>;
}
internal class msclr.interop.marshal_context : object {
    internal LinkedList`1 modreq(System.Runtime.CompilerServices.IsByValue) _clean_up_list;
    private void ~marshal_context();
    protected virtual void Dispose(bool A_0);
    public sealed virtual void Dispose();
}
internal class msclr.lock : object {
    private object m_object;
    private bool m_locked;
    public lock(object _object);
    private void ~lock();
    public bool is_locked();
    public string op_Implicit();
    public void acquire(TimeSpan _timeout);
    public void acquire();
    public void acquire(int _timeout);
    public bool try_acquire(TimeSpan _timeout);
    public bool try_acquire(int _timeout);
    public void release();
    protected virtual void Dispose(bool A_0);
    public sealed virtual void Dispose();
}
[NativeCppClassAttribute]
internal enum msclr.lock_when : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum ORIENTATION_PREFERENCE : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum PIDMSI_STATUS_VALUE : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum POWER_SETTING_ALTITUDE : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum ReplacesCorHdrNumericDefines : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum RPC_ADDRESS_CHANGE_TYPE : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum RpcProxyPerfCounters : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal class scoped_refptr<CefAccessibilityHandler> : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class scoped_refptr<CefApp> : ValueType {
    private long <alignment member>;
    public static void <MarshalCopy>(scoped_refptr<CefApp>* A_0, scoped_refptr<CefApp>* A_1);
    public static void <MarshalDestroy>(scoped_refptr<CefApp>* A_0);
}
[NativeCppClassAttribute]
internal class scoped_refptr<CefAudioHandler> : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class scoped_refptr<CefAuthCallback> : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class scoped_refptr<CefBeforeDownloadCallback> : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class scoped_refptr<CefBinaryValue> : ValueType {
    private long <alignment member>;
    public static void <MarshalCopy>(scoped_refptr<CefBinaryValue>* A_0, scoped_refptr<CefBinaryValue>* A_1);
    public static void <MarshalDestroy>(scoped_refptr<CefBinaryValue>* A_0);
}
[NativeCppClassAttribute]
internal class scoped_refptr<CefBrowser> : ValueType {
    private long <alignment member>;
    public static void <MarshalCopy>(scoped_refptr<CefBrowser>* A_0, scoped_refptr<CefBrowser>* A_1);
    public static void <MarshalDestroy>(scoped_refptr<CefBrowser>* A_0);
}
[NativeCppClassAttribute]
internal class scoped_refptr<CefBrowserHost> : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class scoped_refptr<CefBrowserProcessHandler> : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class scoped_refptr<CefCallback> : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class scoped_refptr<CefClient> : ValueType {
    private long <alignment member>;
    public static void <MarshalCopy>(scoped_refptr<CefClient>* A_0, scoped_refptr<CefClient>* A_1);
    public static void <MarshalDestroy>(scoped_refptr<CefClient>* A_0);
}
[NativeCppClassAttribute]
internal class scoped_refptr<CefCommandHandler> : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class scoped_refptr<CefCommandLine> : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class scoped_refptr<CefCompletionCallback> : ValueType {
    private long <alignment member>;
    public static void <MarshalCopy>(scoped_refptr<CefCompletionCallback>* A_0, scoped_refptr<CefCompletionCallback>* A_1);
    public static void <MarshalDestroy>(scoped_refptr<CefCompletionCallback>* A_0);
}
[NativeCppClassAttribute]
internal class scoped_refptr<CefContextMenuHandler> : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class scoped_refptr<CefContextMenuParams> : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class scoped_refptr<CefCookieAccessFilter> : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class scoped_refptr<CefCookieManager> : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class scoped_refptr<CefCookieVisitor> : ValueType {
    private long <alignment member>;
    public static void <MarshalCopy>(scoped_refptr<CefCookieVisitor>* A_0, scoped_refptr<CefCookieVisitor>* A_1);
    public static void <MarshalDestroy>(scoped_refptr<CefCookieVisitor>* A_0);
}
[NativeCppClassAttribute]
internal class scoped_refptr<CefDeleteCookiesCallback> : ValueType {
    private long <alignment member>;
    public static void <MarshalCopy>(scoped_refptr<CefDeleteCookiesCallback>* A_0, scoped_refptr<CefDeleteCookiesCallback>* A_1);
    public static void <MarshalDestroy>(scoped_refptr<CefDeleteCookiesCallback>* A_0);
}
[NativeCppClassAttribute]
internal class scoped_refptr<CefDevToolsMessageObserver> : ValueType {
    private long <alignment member>;
    public static void <MarshalCopy>(scoped_refptr<CefDevToolsMessageObserver>* A_0, scoped_refptr<CefDevToolsMessageObserver>* A_1);
    public static void <MarshalDestroy>(scoped_refptr<CefDevToolsMessageObserver>* A_0);
}
[NativeCppClassAttribute]
internal class scoped_refptr<CefDialogHandler> : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class scoped_refptr<CefDictionaryValue> : ValueType {
    private long <alignment member>;
    public static void <MarshalCopy>(scoped_refptr<CefDictionaryValue>* A_0, scoped_refptr<CefDictionaryValue>* A_1);
    public static void <MarshalDestroy>(scoped_refptr<CefDictionaryValue>* A_0);
}
[NativeCppClassAttribute]
internal class scoped_refptr<CefDisplayHandler> : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class scoped_refptr<CefDOMNode> : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class scoped_refptr<CefDownloadHandler> : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class scoped_refptr<CefDownloadItem> : ValueType {
    private long <alignment member>;
    public static void <MarshalCopy>(scoped_refptr<CefDownloadItem>* A_0, scoped_refptr<CefDownloadItem>* A_1);
    public static void <MarshalDestroy>(scoped_refptr<CefDownloadItem>* A_0);
}
[NativeCppClassAttribute]
internal class scoped_refptr<CefDownloadItemCallback> : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class scoped_refptr<CefDragData> : ValueType {
    private long <alignment member>;
    public static void <MarshalCopy>(scoped_refptr<CefDragData>* A_0, scoped_refptr<CefDragData>* A_1);
    public static void <MarshalDestroy>(scoped_refptr<CefDragData>* A_0);
}
[NativeCppClassAttribute]
internal class scoped_refptr<CefDragHandler> : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class scoped_refptr<CefFileDialogCallback> : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class scoped_refptr<CefFindHandler> : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class scoped_refptr<CefFocusHandler> : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class scoped_refptr<CefFrame> : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class scoped_refptr<CefFrameHandler> : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class scoped_refptr<CefImage> : ValueType {
    private long <alignment member>;
    public static void <MarshalCopy>(scoped_refptr<CefImage>* A_0, scoped_refptr<CefImage>* A_1);
    public static void <MarshalDestroy>(scoped_refptr<CefImage>* A_0);
}
[NativeCppClassAttribute]
internal class scoped_refptr<CefJSDialogCallback> : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class scoped_refptr<CefJSDialogHandler> : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class scoped_refptr<CefKeyboardHandler> : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class scoped_refptr<CefLifeSpanHandler> : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class scoped_refptr<CefListValue> : ValueType {
    private long <alignment member>;
    public static void <MarshalCopy>(scoped_refptr<CefListValue>* A_0, scoped_refptr<CefListValue>* A_1);
    public static void <MarshalDestroy>(scoped_refptr<CefListValue>* A_0);
}
[NativeCppClassAttribute]
internal class scoped_refptr<CefLoadHandler> : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class scoped_refptr<CefMediaAccessCallback> : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class scoped_refptr<CefMenuModel> : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class scoped_refptr<CefNavigationEntry> : ValueType {
    private long <alignment member>;
    public static void <MarshalCopy>(scoped_refptr<CefNavigationEntry>* A_0, scoped_refptr<CefNavigationEntry>* A_1);
    public static void <MarshalDestroy>(scoped_refptr<CefNavigationEntry>* A_0);
}
[NativeCppClassAttribute]
internal class scoped_refptr<CefNavigationEntryVisitor> : ValueType {
    private long <alignment member>;
    public static void <MarshalCopy>(scoped_refptr<CefNavigationEntryVisitor>* A_0, scoped_refptr<CefNavigationEntryVisitor>* A_1);
    public static void <MarshalDestroy>(scoped_refptr<CefNavigationEntryVisitor>* A_0);
}
[NativeCppClassAttribute]
internal class scoped_refptr<CefPdfPrintCallback> : ValueType {
    private long <alignment member>;
    public static void <MarshalCopy>(scoped_refptr<CefPdfPrintCallback>* A_0, scoped_refptr<CefPdfPrintCallback>* A_1);
    public static void <MarshalDestroy>(scoped_refptr<CefPdfPrintCallback>* A_0);
}
[NativeCppClassAttribute]
internal class scoped_refptr<CefPermissionHandler> : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class scoped_refptr<CefPermissionPromptCallback> : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class scoped_refptr<CefPostData> : ValueType {
    private long <alignment member>;
    public static void <MarshalCopy>(scoped_refptr<CefPostData>* A_0, scoped_refptr<CefPostData>* A_1);
    public static void <MarshalDestroy>(scoped_refptr<CefPostData>* A_0);
}
[NativeCppClassAttribute]
internal class scoped_refptr<CefPostDataElement> : ValueType {
    private long <alignment member>;
    public static void <MarshalCopy>(scoped_refptr<CefPostDataElement>* A_0, scoped_refptr<CefPostDataElement>* A_1);
    public static void <MarshalDestroy>(scoped_refptr<CefPostDataElement>* A_0);
}
[NativeCppClassAttribute]
internal class scoped_refptr<CefPrintHandler> : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class scoped_refptr<CefProcessMessage> : ValueType {
    private long <alignment member>;
    public static void <MarshalCopy>(scoped_refptr<CefProcessMessage>* A_0, scoped_refptr<CefProcessMessage>* A_1);
    public static void <MarshalDestroy>(scoped_refptr<CefProcessMessage>* A_0);
}
[NativeCppClassAttribute]
internal class scoped_refptr<CefRegistration> : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class scoped_refptr<CefRenderHandler> : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class scoped_refptr<CefRenderProcessHandler> : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class scoped_refptr<CefRequest> : ValueType {
    private long <alignment member>;
    public static void <MarshalCopy>(scoped_refptr<CefRequest>* A_0, scoped_refptr<CefRequest>* A_1);
    public static void <MarshalDestroy>(scoped_refptr<CefRequest>* A_0);
}
[NativeCppClassAttribute]
internal class scoped_refptr<CefRequestContext> : ValueType {
    private long <alignment member>;
    public static void <MarshalCopy>(scoped_refptr<CefRequestContext>* A_0, scoped_refptr<CefRequestContext>* A_1);
    public static void <MarshalDestroy>(scoped_refptr<CefRequestContext>* A_0);
}
[NativeCppClassAttribute]
internal class scoped_refptr<CefRequestContextHandler> : ValueType {
    private long <alignment member>;
    public static void <MarshalCopy>(scoped_refptr<CefRequestContextHandler>* A_0, scoped_refptr<CefRequestContextHandler>* A_1);
    public static void <MarshalDestroy>(scoped_refptr<CefRequestContextHandler>* A_0);
}
[NativeCppClassAttribute]
internal class scoped_refptr<CefRequestHandler> : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class scoped_refptr<CefResolveCallback> : ValueType {
    private long <alignment member>;
    public static void <MarshalCopy>(scoped_refptr<CefResolveCallback>* A_0, scoped_refptr<CefResolveCallback>* A_1);
    public static void <MarshalDestroy>(scoped_refptr<CefResolveCallback>* A_0);
}
[NativeCppClassAttribute]
internal class scoped_refptr<CefResourceBundleHandler> : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class scoped_refptr<CefResourceHandler> : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class scoped_refptr<CefResourceReadCallback> : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class scoped_refptr<CefResourceRequestHandler> : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class scoped_refptr<CefResourceSkipCallback> : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class scoped_refptr<CefResponse> : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class scoped_refptr<CefResponseFilter> : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class scoped_refptr<CefRunContextMenuCallback> : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class scoped_refptr<CefRunFileDialogCallback> : ValueType {
    private long <alignment member>;
    public static void <MarshalCopy>(scoped_refptr<CefRunFileDialogCallback>* A_0, scoped_refptr<CefRunFileDialogCallback>* A_1);
    public static void <MarshalDestroy>(scoped_refptr<CefRunFileDialogCallback>* A_0);
}
[NativeCppClassAttribute]
internal class scoped_refptr<CefRunQuickMenuCallback> : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class scoped_refptr<CefSchemeHandlerFactory> : ValueType {
    private long <alignment member>;
    public static void <MarshalCopy>(scoped_refptr<CefSchemeHandlerFactory>* A_0, scoped_refptr<CefSchemeHandlerFactory>* A_1);
    public static void <MarshalDestroy>(scoped_refptr<CefSchemeHandlerFactory>* A_0);
}
[NativeCppClassAttribute]
internal class scoped_refptr<CefSelectClientCertificateCallback> : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class scoped_refptr<CefSetCookieCallback> : ValueType {
    private long <alignment member>;
    public static void <MarshalCopy>(scoped_refptr<CefSetCookieCallback>* A_0, scoped_refptr<CefSetCookieCallback>* A_1);
    public static void <MarshalDestroy>(scoped_refptr<CefSetCookieCallback>* A_0);
}
[NativeCppClassAttribute]
internal class scoped_refptr<CefSharp::Internals::CefCookieVisitorAdapter> : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class scoped_refptr<CefSharp::Internals::CefSharpApp> : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class scoped_refptr<CefSSLInfo> : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class scoped_refptr<CefSSLStatus> : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class scoped_refptr<CefStreamReader> : ValueType {
    private long <alignment member>;
    public static void <MarshalCopy>(scoped_refptr<CefStreamReader>* A_0, scoped_refptr<CefStreamReader>* A_1);
    public static void <MarshalDestroy>(scoped_refptr<CefStreamReader>* A_0);
}
[NativeCppClassAttribute]
internal class scoped_refptr<CefStreamWriter> : ValueType {
    private long <alignment member>;
    public static void <MarshalCopy>(scoped_refptr<CefStreamWriter>* A_0, scoped_refptr<CefStreamWriter>* A_1);
    public static void <MarshalDestroy>(scoped_refptr<CefStreamWriter>* A_0);
}
[NativeCppClassAttribute]
internal class scoped_refptr<CefStringVisitor> : ValueType {
    private long <alignment member>;
    public static void <MarshalCopy>(scoped_refptr<CefStringVisitor>* A_0, scoped_refptr<CefStringVisitor>* A_1);
    public static void <MarshalDestroy>(scoped_refptr<CefStringVisitor>* A_0);
}
[NativeCppClassAttribute]
internal class scoped_refptr<CefTask> : ValueType {
    private long <alignment member>;
    public static void <MarshalCopy>(scoped_refptr<CefTask>* A_0, scoped_refptr<CefTask>* A_1);
    public static void <MarshalDestroy>(scoped_refptr<CefTask>* A_0);
}
[NativeCppClassAttribute]
internal class scoped_refptr<CefUnresponsiveProcessCallback> : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class scoped_refptr<CefURLRequest> : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class scoped_refptr<CefURLRequestClient> : ValueType {
    private long <alignment member>;
    public static void <MarshalCopy>(scoped_refptr<CefURLRequestClient>* A_0, scoped_refptr<CefURLRequestClient>* A_1);
    public static void <MarshalDestroy>(scoped_refptr<CefURLRequestClient>* A_0);
}
[NativeCppClassAttribute]
internal class scoped_refptr<CefV8Context> : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class scoped_refptr<CefV8Exception> : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class scoped_refptr<CefV8StackTrace> : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class scoped_refptr<CefValue> : ValueType {
    private long <alignment member>;
    public static void <MarshalCopy>(scoped_refptr<CefValue>* A_0, scoped_refptr<CefValue>* A_1);
    public static void <MarshalDestroy>(scoped_refptr<CefValue>* A_0);
}
[NativeCppClassAttribute]
internal class scoped_refptr<CefWriteHandler> : ValueType {
    private long <alignment member>;
    public static void <MarshalCopy>(scoped_refptr<CefWriteHandler>* A_0, scoped_refptr<CefWriteHandler>* A_1);
    public static void <MarshalDestroy>(scoped_refptr<CefWriteHandler>* A_0);
}
[NativeCppClassAttribute]
internal class scoped_refptr<CefX509Certificate> : ValueType {
    private long <alignment member>;
    public static void <MarshalCopy>(scoped_refptr<CefX509Certificate>* A_0, scoped_refptr<CefX509Certificate>* A_1);
    public static void <MarshalDestroy>(scoped_refptr<CefX509Certificate>* A_0);
}
[UnsafeValueTypeAttribute]
[NativeCppClassAttribute]
internal class stat : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class std.__non_rtti_object : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class std._Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<CefStringBase<CefStringTraitsUTF16> const ,CefStringBase<CefStringTraitsUTF16> >,void *> > > : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class std._Atomic_integral_facade<int> : ValueType {
    private int <alignment member>;
}
[NativeCppClassAttribute]
internal class std._Atomic_integral<int,4> : ValueType {
    private int <alignment member>;
}
[NativeCppClassAttribute]
internal class std._Atomic_padded<int> : ValueType {
    private int <alignment member>;
}
[NativeCppClassAttribute]
internal class std._Atomic_padded<long> : ValueType {
    private int <alignment member>;
}
[NativeCppClassAttribute]
internal class std._Atomic_padded<unsigned __int64> : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class std._Atomic_storage<int,4> : ValueType {
    private int <alignment member>;
}
[NativeCppClassAttribute]
internal class std._Atomic_storage<long,4> : ValueType {
    private int <alignment member>;
}
[NativeCppClassAttribute]
internal class std._Atomic_storage<unsigned __int64,8> : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class std._Basic_container_proxy_ptr12 : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal enum std._Case_sensitive : Enum {
    public bool value__;
}
[NativeCppClassAttribute]
internal class std._Char_traits<char,int> : ValueType {
}
[NativeCppClassAttribute]
internal class std._Char_traits<char16_t,unsigned short> : ValueType {
}
[NativeCppClassAttribute]
internal class std._Char_traits<char32_t,unsigned int> : ValueType {
}
[NativeCppClassAttribute]
internal class std._Char_traits<wchar_t,unsigned short> : ValueType {
}
[NativeCppClassAttribute]
internal enum std._Codecvt_mode : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal class std._Compressed_pair<std::allocator<CefCompositionUnderline>,std::_Vector_val<std::_Simple_types<CefCompositionUnderline> >,1> : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class std._Compressed_pair<std::allocator<CefStringBase<CefStringTraitsUTF16> >,std::_Vector_val<std::_Simple_types<CefStringBase<CefStringTraitsUTF16> > >,1> : ValueType {
    private long <alignment member>;
}
[UnsafeValueTypeAttribute]
[NativeCppClassAttribute]
internal class std._Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1> : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
[UnsafeValueTypeAttribute]
internal class std._Compressed_pair<std::allocator<char16_t>,std::_String_val<std::_Simple_types<char16_t> >,1> : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
[UnsafeValueTypeAttribute]
internal class std._Compressed_pair<std::allocator<char32_t>,std::_String_val<std::_Simple_types<char32_t> >,1> : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class std._Compressed_pair<std::allocator<scoped_refptr<CefPostDataElement> >,std::_Vector_val<std::_Simple_types<scoped_refptr<CefPostDataElement> > >,1> : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class std._Compressed_pair<std::allocator<scoped_refptr<CefX509Certificate> >,std::_Vector_val<std::_Simple_types<scoped_refptr<CefX509Certificate> > >,1> : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class std._Compressed_pair<std::allocator<std::_Tree_node<std::pair<CefStringBase<CefStringTraitsUTF16> const ,CefStringBase<CefStringTraitsUTF16> >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<CefStringBase<CefStringTraitsUTF16> const ,CefStringBase<CefStringTraitsUTF16> > > >,1> : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
[UnsafeValueTypeAttribute]
internal class std._Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1> : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class std._Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1> : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class std._Compressed_pair<std::less<CefStringBase<CefStringTraitsUTF16> >,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<CefStringBase<CefStringTraitsUTF16> const ,CefStringBase<CefStringTraitsUTF16> >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<CefStringBase<CefStringTraitsUTF16> const ,CefStringBase<CefStringTraitsUTF16> > > >,1>,1> : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class std._Conditionally_enabled_hash<int,1> : ValueType {
}
[NativeCppClassAttribute]
internal class std._Container_base0 : ValueType {
}
[NativeCppClassAttribute]
internal class std._Container_base12 : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class std._Container_proxy : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class std._Default_allocate_traits : ValueType {
}
[NativeCppClassAttribute]
internal class std._Default_allocator_traits<std::allocator<CefCompositionUnderline> > : ValueType {
}
[NativeCppClassAttribute]
internal class std._Default_allocator_traits<std::allocator<CefStringBase<CefStringTraitsUTF16> > > : ValueType {
}
[NativeCppClassAttribute]
internal class std._Default_allocator_traits<std::allocator<char> > : ValueType {
}
[NativeCppClassAttribute]
internal class std._Default_allocator_traits<std::allocator<char16_t> > : ValueType {
}
[NativeCppClassAttribute]
internal class std._Default_allocator_traits<std::allocator<char32_t> > : ValueType {
}
[NativeCppClassAttribute]
internal class std._Default_allocator_traits<std::allocator<scoped_refptr<CefPostDataElement> > > : ValueType {
}
[NativeCppClassAttribute]
internal class std._Default_allocator_traits<std::allocator<scoped_refptr<CefX509Certificate> > > : ValueType {
}
[NativeCppClassAttribute]
internal class std._Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<CefStringBase<CefStringTraitsUTF16> const ,CefStringBase<CefStringTraitsUTF16> >,void *> > > : ValueType {
}
[NativeCppClassAttribute]
internal class std._Default_allocator_traits<std::allocator<wchar_t> > : ValueType {
}
[NativeCppClassAttribute]
internal class std._Default_sentinel : ValueType {
}
[NativeCppClassAttribute]
internal class std._Distance_unknown : ValueType {
}
[NativeCppClassAttribute]
internal class std._Equal_allocators : ValueType {
}
[NativeCppClassAttribute]
internal static class std._Facet_base : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class std._Fake_allocator : ValueType {
}
[NativeCppClassAttribute]
internal class std._Fake_proxy_ptr_impl : ValueType {
}
[NativeCppClassAttribute]
internal class std._Generic_error_category : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal enum std._Invoker_strategy : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal class std._Iosb<int> : ValueType {
}
[NativeCppClassAttribute]
internal class std._Iostream_error_category2 : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class std._Iterator_base0 : ValueType {
}
[NativeCppClassAttribute]
internal class std._Iterator_base12 : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class std._Leave_proxy_unbound : ValueType {
}
[NativeCppClassAttribute]
internal class std._Locinfo : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class std._Lockit : ValueType {
    private int <alignment member>;
}
[NativeCppClassAttribute]
internal class std._Narrow_char_traits<char,int> : ValueType {
}
[NativeCppClassAttribute]
internal class std._Nontrivial_dummy_type : ValueType {
}
[NativeCppClassAttribute]
internal class std._One_then_variadic_args_t : ValueType {
}
[NativeCppClassAttribute]
internal static class std._Ref_count_base : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class std._Shared_ptr_spin_lock : ValueType {
}
[NativeCppClassAttribute]
[UnsafeValueTypeAttribute]
internal class std._String_val<std::_Simple_types<char> > : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
[UnsafeValueTypeAttribute]
internal class std._String_val<std::_Simple_types<char16_t> > : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
[UnsafeValueTypeAttribute]
internal class std._String_val<std::_Simple_types<char32_t> > : ValueType {
    private long <alignment member>;
}
[UnsafeValueTypeAttribute]
[NativeCppClassAttribute]
internal class std._String_val<std::_Simple_types<wchar_t> > : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class std._System_error : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class std._System_error_category : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class std._System_error_message : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class std._Tidy_guard<std::numpunct<char> > : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class std._Tidy_guard<std::numpunct<wchar_t> > : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class std._Timevec : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class std._Tmap_traits<CefStringBase<CefStringTraitsUTF16>,CefStringBase<CefStringTraitsUTF16>,std::less<CefStringBase<CefStringTraitsUTF16> >,std::allocator<std::pair<CefStringBase<CefStringTraitsUTF16> const ,CefStringBase<CefStringTraitsUTF16> > >,1> : ValueType {
}
[NativeCppClassAttribute]
internal enum std._Tree_child : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal class std._Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<CefStringBase<CefStringTraitsUTF16> const ,CefStringBase<CefStringTraitsUTF16> > > > > : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class std._Tree_find_result<std::_Tree_node<std::pair<CefStringBase<CefStringTraitsUTF16> const ,CefStringBase<CefStringTraitsUTF16> >,void *> *> : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class std._Tree_id<std::_Tree_node<std::pair<CefStringBase<CefStringTraitsUTF16> const ,CefStringBase<CefStringTraitsUTF16> >,void *> *> : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class std._Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<CefStringBase<CefStringTraitsUTF16> const ,CefStringBase<CefStringTraitsUTF16> > > > > : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class std._Tree_node<std::pair<CefStringBase<CefStringTraitsUTF16> const ,CefStringBase<CefStringTraitsUTF16> >,void *> : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class std._Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<CefStringBase<CefStringTraitsUTF16> const ,CefStringBase<CefStringTraitsUTF16> >,void *> > > : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class std._Tree_temp_node<std::allocator<std::_Tree_node<std::pair<CefStringBase<CefStringTraitsUTF16> const ,CefStringBase<CefStringTraitsUTF16> >,void *> > > : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class std._Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<CefStringBase<CefStringTraitsUTF16> const ,CefStringBase<CefStringTraitsUTF16> > > >,std::_Iterator_base0> : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class std._Tree_unchecked_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<CefStringBase<CefStringTraitsUTF16> const ,CefStringBase<CefStringTraitsUTF16> > > > > : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class std._Tree_val<std::_Tree_simple_types<std::pair<CefStringBase<CefStringTraitsUTF16> const ,CefStringBase<CefStringTraitsUTF16> > > > : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class std._Tree<std::_Tmap_traits<CefStringBase<CefStringTraitsUTF16>,CefStringBase<CefStringTraitsUTF16>,std::less<CefStringBase<CefStringTraitsUTF16> >,std::allocator<std::pair<CefStringBase<CefStringTraitsUTF16> const ,CefStringBase<CefStringTraitsUTF16> > >,0> > : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class std._Tree<std::_Tmap_traits<CefStringBase<CefStringTraitsUTF16>,CefStringBase<CefStringTraitsUTF16>,std::less<CefStringBase<CefStringTraitsUTF16> >,std::allocator<std::pair<CefStringBase<CefStringTraitsUTF16> const ,CefStringBase<CefStringTraitsUTF16> > >,1> > : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal enum std._Uninitialized : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal class std._Uninitialized_backout_al<std::allocator<CefCompositionUnderline> > : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class std._Uninitialized_backout_al<std::allocator<CefStringBase<CefStringTraitsUTF16> > > : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class std._Uninitialized_backout_al<std::allocator<scoped_refptr<CefX509Certificate> > > : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class std._Unused_parameter : ValueType {
}
[NativeCppClassAttribute]
internal class std._Vector_const_iterator<std::_Vector_val<std::_Simple_types<CefDraggableRegion> > > : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class std._Vector_const_iterator<std::_Vector_val<std::_Simple_types<CefRect> > > : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class std._Vector_const_iterator<std::_Vector_val<std::_Simple_types<CefStringBase<CefStringTraitsUTF16> > > > : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class std._Vector_const_iterator<std::_Vector_val<std::_Simple_types<scoped_refptr<CefPostDataElement> > > > : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class std._Vector_const_iterator<std::_Vector_val<std::_Simple_types<scoped_refptr<CefX509Certificate> > > > : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class std._Vector_iterator<std::_Vector_val<std::_Simple_types<scoped_refptr<CefPostDataElement> > > > : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class std._Vector_val<std::_Simple_types<CefCompositionUnderline> > : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class std._Vector_val<std::_Simple_types<CefDraggableRegion> > : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class std._Vector_val<std::_Simple_types<CefRect> > : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class std._Vector_val<std::_Simple_types<CefStringBase<CefStringTraitsUTF16> > > : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class std._Vector_val<std::_Simple_types<scoped_refptr<CefPostDataElement> > > : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class std._Vector_val<std::_Simple_types<scoped_refptr<CefX509Certificate> > > : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class std._WChar_traits<char16_t> : ValueType {
}
[NativeCppClassAttribute]
internal class std._WChar_traits<wchar_t> : ValueType {
}
[NativeCppClassAttribute]
internal class std._Yarn<char> : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class std._Yarn<wchar_t> : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class std._Zero_then_variadic_args_t : ValueType {
}
[NativeCppClassAttribute]
internal class std.?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@$$FQEAAAEAV12@QEB_W_K@Z.__l2.<lambda_3ca51f66a9d03df3cf21518bbff746cd> : ValueType {
}
[NativeCppClassAttribute]
internal class std.?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$$FQEAAAEAV12@_KD@Z.__l2.<lambda_59d344839e59d86dc9255728ed6d9dcb> : ValueType {
}
[NativeCppClassAttribute]
internal class std.?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$$FQEAAAEAV12@QEBD_K@Z.__l2.<lambda_f1129f3d98befd92b6d0e63ffb90e238> : ValueType {
}
[NativeCppClassAttribute]
internal class std.?assign@?$basic_string@_SU?$char_traits@_S@std@@V?$allocator@_S@2@@std@@$$FQEAAAEAV12@QEB_S_K@Z.__l2.<lambda_06a0775052695fda6f9a281fd6c7b3f4> : ValueType {
}
[NativeCppClassAttribute]
internal class std.?assign@?$basic_string@_UU?$char_traits@_U@std@@V?$allocator@_U@2@@std@@$$FQEAAAEAV12@QEB_U_K@Z.__l2.<lambda_9eedb5eb330347945ebb4e79503427df> : ValueType {
}
[NativeCppClassAttribute]
internal class std.?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@$$FQEAAAEAV12@_K_W@Z.__l2.<lambda_7469dba059193f9381e11ce5a8c82070> : ValueType {
}
[NativeCppClassAttribute]
internal class std.?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@$$FQEAAAEAV12@QEB_W_K@Z.__l2.<lambda_d4301fda4684ac16da26da6c6383f5f5> : ValueType {
}
[NativeCppClassAttribute]
internal class std.?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$$FQEAAAEAV12@_KD@Z.__l2.<lambda_4144d428e4664d8cfff53efbdfad4228> : ValueType {
}
[NativeCppClassAttribute]
internal class std.?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$$FQEAAAEAV12@QEBD_K@Z.__l2.<lambda_61f19ca81ede490286327871d07716e6> : ValueType {
}
[NativeCppClassAttribute]
internal class std.?insert@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@$$FQEAAAEAV12@_K0_W@Z.__l2.<lambda_27735b27f0d68eb29e046e0551b25780> : ValueType {
}
[NativeCppClassAttribute]
internal class std.?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$$FQEAAAEAV12@_K0D@Z.__l2.<lambda_e976210f1f792ffb0da9eba8c0b71432> : ValueType {
}
[NativeCppClassAttribute]
internal class std.?push_back@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@$$FQEAAX_W@Z.__l2.<lambda_94b5dcf1ef2e5769bf4885c9dfc60389> : ValueType {
}
[NativeCppClassAttribute]
internal class std.?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$$FQEAAXD@Z.__l2.<lambda_05ce15b91e616096a0701ad9dc50ae60> : ValueType {
}
[NativeCppClassAttribute]
internal enum std.align_val_t : Enum {
    public ulong value__;
}
[NativeCppClassAttribute]
internal class std.allocator<CefCompositionUnderline> : ValueType {
}
[NativeCppClassAttribute]
internal class std.allocator<CefStringBase<CefStringTraitsUTF16> > : ValueType {
}
[NativeCppClassAttribute]
internal class std.allocator<char> : ValueType {
}
[NativeCppClassAttribute]
internal class std.allocator<char16_t> : ValueType {
}
[NativeCppClassAttribute]
internal class std.allocator<char32_t> : ValueType {
}
[NativeCppClassAttribute]
internal class std.allocator<scoped_refptr<CefPostDataElement> > : ValueType {
}
[NativeCppClassAttribute]
internal class std.allocator<scoped_refptr<CefX509Certificate> > : ValueType {
}
[NativeCppClassAttribute]
internal class std.allocator<std::_Tree_node<std::pair<CefStringBase<CefStringTraitsUTF16> const ,CefStringBase<CefStringTraitsUTF16> >,void *> > : ValueType {
}
[NativeCppClassAttribute]
internal class std.allocator<wchar_t> : ValueType {
}
[NativeCppClassAttribute]
internal class std.atomic_flag : ValueType {
    private int <alignment member>;
}
[NativeCppClassAttribute]
internal class std.atomic<int> : ValueType {
    private int <alignment member>;
}
[NativeCppClassAttribute]
internal class std.atomic<long> : ValueType {
    private int <alignment member>;
}
[NativeCppClassAttribute]
internal class std.atomic<unsigned __int64> : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class std.bad_alloc : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class std.bad_array_new_length : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class std.bad_cast : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class std.bad_exception : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class std.bad_typeid : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class std.bad_weak_ptr : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class std.basic_ios<char,std::char_traits<char> > : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class std.basic_ios<wchar_t,std::char_traits<wchar_t> > : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class std.basic_iostream<char,std::char_traits<char> > : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class std.basic_iostream<wchar_t,std::char_traits<wchar_t> > : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class std.basic_istream<char,std::char_traits<char> > : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class std.basic_istream<wchar_t,std::char_traits<wchar_t> > : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class std.basic_ostream<char,std::char_traits<char> > : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class std.basic_ostream<wchar_t,std::char_traits<wchar_t> > : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class std.basic_ostringstream<char,std::char_traits<char>,std::allocator<char> > : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class std.basic_streambuf<char,std::char_traits<char> > : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class std.basic_streambuf<wchar_t,std::char_traits<wchar_t> > : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class std.basic_string_view<char,std::char_traits<char> > : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class std.basic_string_view<char16_t,std::char_traits<char16_t> > : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class std.basic_string_view<char32_t,std::char_traits<char32_t> > : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class std.basic_string_view<wchar_t,std::char_traits<wchar_t> > : ValueType {
    private long <alignment member>;
}
[UnsafeValueTypeAttribute]
[NativeCppClassAttribute]
internal class std.basic_string<char,std::char_traits<char>,std::allocator<char> > : ValueType {
    private long <alignment member>;
    public static void <MarshalCopy>(basic_string<char,std::char_traits<char>,std::allocator<char> >* A_0, basic_string<char,std::char_traits<char>,std::allocator<char> >* A_1);
    public static void <MarshalDestroy>(basic_string<char,std::char_traits<char>,std::allocator<char> >* A_0);
}
[NativeCppClassAttribute]
[UnsafeValueTypeAttribute]
internal class std.basic_string<char16_t,std::char_traits<char16_t>,std::allocator<char16_t> > : ValueType {
    private long <alignment member>;
}
[UnsafeValueTypeAttribute]
[NativeCppClassAttribute]
internal class std.basic_string<char32_t,std::char_traits<char32_t>,std::allocator<char32_t> > : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
[UnsafeValueTypeAttribute]
internal class std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class std.basic_stringbuf<char,std::char_traits<char>,std::allocator<char> > : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class std.basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class std.basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal enum std.byte : Enum {
    public byte value__;
}
[NativeCppClassAttribute]
internal class std.codecvt_base : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class std.codecvt<char,char,_Mbstatet> : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class std.codecvt<char16_t,char,_Mbstatet> : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class std.codecvt<char32_t,char,_Mbstatet> : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
[UnsafeValueTypeAttribute]
internal class std.codecvt<unsigned short,char,_Mbstatet> : ValueType {
    private long <alignment member>;
}
[UnsafeValueTypeAttribute]
[NativeCppClassAttribute]
internal class std.codecvt<wchar_t,char,_Mbstatet> : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class std.ctype_base : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class std.ctype<char> : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
[UnsafeValueTypeAttribute]
internal class std.ctype<unsigned short> : ValueType {
    private long <alignment member>;
}
[UnsafeValueTypeAttribute]
[NativeCppClassAttribute]
internal class std.ctype<wchar_t> : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class std.default_delete<std::_Facet_base> : ValueType {
}
[NativeCppClassAttribute]
internal class std.domain_error : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal enum std.errc : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal static class std.error_category : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class std.error_code : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class std.error_condition : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class std.exception : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class std.exception_ptr : ValueType {
    private long <alignment member>;
    public static void <MarshalCopy>(exception_ptr* A_0, exception_ptr* A_1);
    public static void <MarshalDestroy>(exception_ptr* A_0);
}
[NativeCppClassAttribute]
internal enum std.float_denorm_style : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum std.float_round_style : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal class std.fpos<_Mbstatet> : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class std.hash<double> : ValueType {
}
[NativeCppClassAttribute]
internal class std.hash<float> : ValueType {
}
[NativeCppClassAttribute]
internal class std.hash<int> : ValueType {
}
[NativeCppClassAttribute]
internal class std.hash<long double> : ValueType {
}
[NativeCppClassAttribute]
internal class std.hash<std::error_code> : ValueType {
}
[NativeCppClassAttribute]
internal class std.hash<std::error_condition> : ValueType {
}
[NativeCppClassAttribute]
internal class std.hash<std::nullptr_t> : ValueType {
}
[NativeCppClassAttribute]
internal class std.integral_constant<bool,0> : ValueType {
}
[NativeCppClassAttribute]
internal class std.integral_constant<bool,1> : ValueType {
}
[NativeCppClassAttribute]
internal class std.invalid_argument : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal enum std.io_errc : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal class std.ios_base : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class std.istreambuf_iterator<char,std::char_traits<char> > : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class std.istreambuf_iterator<wchar_t,std::char_traits<wchar_t> > : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class std.length_error : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class std.less<CefStringBase<CefStringTraitsUTF16> > : ValueType {
}
[NativeCppClassAttribute]
internal class std.locale : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class std.logic_error : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class std.map<CefStringBase<CefStringTraitsUTF16>,CefStringBase<CefStringTraitsUTF16>,std::less<CefStringBase<CefStringTraitsUTF16> >,std::allocator<std::pair<CefStringBase<CefStringTraitsUTF16> const ,CefStringBase<CefStringTraitsUTF16> > > > : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal enum std.memory_order : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal class std.multimap<CefStringBase<CefStringTraitsUTF16>,CefStringBase<CefStringTraitsUTF16>,std::less<CefStringBase<CefStringTraitsUTF16> >,std::allocator<std::pair<CefStringBase<CefStringTraitsUTF16> const ,CefStringBase<CefStringTraitsUTF16> > > > : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class std.nested_exception : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class std.num_get<char,std::istreambuf_iterator<char,std::char_traits<char> > > : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class std.num_get<wchar_t,std::istreambuf_iterator<wchar_t,std::char_traits<wchar_t> > > : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class std.num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class std.num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > > : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class std.numeric_limits<__int64> : ValueType {
}
[NativeCppClassAttribute]
internal class std.numeric_limits<bool> : ValueType {
}
[NativeCppClassAttribute]
internal class std.numeric_limits<char> : ValueType {
}
[NativeCppClassAttribute]
internal class std.numeric_limits<char16_t> : ValueType {
}
[NativeCppClassAttribute]
internal class std.numeric_limits<char32_t> : ValueType {
}
[NativeCppClassAttribute]
internal class std.numeric_limits<double> : ValueType {
}
[NativeCppClassAttribute]
internal class std.numeric_limits<float> : ValueType {
}
[NativeCppClassAttribute]
internal class std.numeric_limits<int> : ValueType {
}
[NativeCppClassAttribute]
internal class std.numeric_limits<long double> : ValueType {
}
[NativeCppClassAttribute]
internal class std.numeric_limits<long> : ValueType {
}
[NativeCppClassAttribute]
internal class std.numeric_limits<short> : ValueType {
}
[NativeCppClassAttribute]
internal class std.numeric_limits<signed char> : ValueType {
}
[NativeCppClassAttribute]
internal class std.numeric_limits<unsigned __int64> : ValueType {
}
[NativeCppClassAttribute]
internal class std.numeric_limits<unsigned char> : ValueType {
}
[NativeCppClassAttribute]
internal class std.numeric_limits<unsigned int> : ValueType {
}
[NativeCppClassAttribute]
internal class std.numeric_limits<unsigned long> : ValueType {
}
[NativeCppClassAttribute]
internal class std.numeric_limits<unsigned short> : ValueType {
}
[NativeCppClassAttribute]
internal class std.numeric_limits<wchar_t> : ValueType {
}
[NativeCppClassAttribute]
internal class std.numpunct<char> : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class std.numpunct<wchar_t> : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class std.once_flag : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class std.ostreambuf_iterator<char,std::char_traits<char> > : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class std.ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class std.out_of_range : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class std.overflow_error : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class std.pair<CefStringBase<CefStringTraitsUTF16> const ,CefStringBase<CefStringTraitsUTF16> > : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class std.pair<CefStringBase<CefStringTraitsUTF16>,CefStringBase<CefStringTraitsUTF16> > : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class std.pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<CefStringBase<CefStringTraitsUTF16> const ,CefStringBase<CefStringTraitsUTF16> > > > >,bool> : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class std.pair<std::_Tree_node<std::pair<CefStringBase<CefStringTraitsUTF16> const ,CefStringBase<CefStringTraitsUTF16> >,void *> *,bool> : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal static class std.pmr.memory_resource : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal enum std.pointer_safety : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal class std.pointer_traits<char *> : ValueType {
}
[NativeCppClassAttribute]
internal class std.pointer_traits<std::pair<CefStringBase<CefStringTraitsUTF16> const ,CefStringBase<CefStringTraitsUTF16> > *> : ValueType {
}
[NativeCppClassAttribute]
internal class std.pointer_traits<wchar_t *> : ValueType {
}
[NativeCppClassAttribute]
internal class std.random_access_iterator_tag : ValueType {
}
[NativeCppClassAttribute]
internal class std.range_error : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class std.runtime_error : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class std.system_error : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class std.underflow_error : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class std.unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> > : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class std.vector<CefCompositionUnderline,std::allocator<CefCompositionUnderline> > : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class std.vector<CefDraggableRegion,std::allocator<CefDraggableRegion> > : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class std.vector<CefRect,std::allocator<CefRect> > : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class std.vector<CefStringBase<CefStringTraitsUTF16>,std::allocator<CefStringBase<CefStringTraitsUTF16> > > : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class std.vector<scoped_refptr<CefPostDataElement>,std::allocator<scoped_refptr<CefPostDataElement> > > : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal class std.vector<scoped_refptr<CefX509Certificate>,std::allocator<scoped_refptr<CefX509Certificate> > > : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal enum SYSGEOCLASS : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum SYSGEOTYPE : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum SYSNLS_FUNCTION : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum tagACTIVATIONTYPE : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum tagADVF : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum tagApplicationType : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum tagAR_STATE : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum tagBIND_FLAGS : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum tagBINDSPEED : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum tagBINDSTATUS : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum tagBINDSTRING : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum tagCALLCONV : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum tagCALLTYPE : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum tagCHANGEKIND : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum tagCLSCTX : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum tagCOINIT : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum tagCOINITBASE : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum tagCOMSD : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum tagCOWAIT_FLAGS : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum tagDATADIR : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum tagDCOM_CALL_STATE : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum tagDESCKIND : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum tagDISCARDCACHE : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum tagDOMNodeType : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum tagDVASPECT : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum tagEOLE_AUTHENTICATION_CAPABILITIES : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum tagEXTCONN : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum tagExtendedErrorParamTypes : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum tagFEEDBACK_TYPE : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum tagFUNCFLAGS : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum tagFUNCKIND : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum tagGLOBALOPT_EH_VALUES : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum tagGLOBALOPT_PROPERTIES : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum tagGLOBALOPT_RO_FLAGS : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum tagGLOBALOPT_RPCTP_VALUES : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum tagGLOBALOPT_UNMARSHALING_POLICY_VALUES : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum tagINPUT_MESSAGE_DEVICE_TYPE : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum tagINPUT_MESSAGE_ORIGIN_ID : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum tagINVOKEKIND : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum tagLIBFLAGS : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum tagLOCKTYPE : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum tagMEMCTX : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum tagMKREDUCE : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum tagMKSYS : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal class tagMSG : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal enum tagMSHCTX : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum tagMSHLFLAGS : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum tagOLECLOSE : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum tagOLECONTF : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum tagOLEGETMONIKER : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum tagOLELINKBIND : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum tagOLEMISC : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum tagOLERENDER : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum tagOLEUPDATE : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum tagOLEVERBATTRIB : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum tagOLEWHICHMK : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum tagPENDINGMSG : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum tagPENDINGTYPE : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum tagPOINTER_BUTTON_CHANGE_TYPE : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum tagPOINTER_DEVICE_CURSOR_TYPE : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum tagPOINTER_DEVICE_TYPE : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum tagPOINTER_INPUT_TYPE : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal class tagPROPVARIANT : ValueType {
    private long <alignment member>;
}
[UnsafeValueTypeAttribute]
[NativeCppClassAttribute]
internal class tagRECT : ValueType {
    private int <alignment member>;
}
[NativeCppClassAttribute]
internal enum tagREGCLS : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum tagREGKIND : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum tagRpcCallClientLocality : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum tagRpcCallType : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum tagRpcLocalAddressFormat : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum tagRPCOPT_PROPERTIES : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum tagRPCOPT_SERVER_LOCALITY_VALUES : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum tagSERVERCALL : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum tagSF_TYPE : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum tagShutdownType : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum tagSTATFLAG : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum tagSTDMSHLFLAGS : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum tagSTGC : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum tagSTGMOVE : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum tagSTGTY : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum tagSTREAM_SEEK : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum tagSYSKIND : Enum {
    public int value__;
}
[UnsafeValueTypeAttribute]
[NativeCppClassAttribute]
internal class tagTEXTMETRICA : ValueType {
    private int <alignment member>;
}
[NativeCppClassAttribute]
[UnsafeValueTypeAttribute]
internal class tagTEXTMETRICW : ValueType {
    private int <alignment member>;
}
[NativeCppClassAttribute]
internal enum tagTYMED : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum tagTYPEFLAGS : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum tagTYPEKIND : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum tagTYSPEC : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum tagURLTEMPLATE : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum tagURLZONE : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum tagUSERCLASSTYPE : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum tagVARFLAGS : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal class tagVARIANT : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal enum tagVARKIND : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum tagXMLEMEM_TYPE : Enum {
    public int value__;
}
[UnsafeValueTypeAttribute]
[NativeCppClassAttribute]
internal class timespec : ValueType {
    private long <alignment member>;
}
[UnsafeValueTypeAttribute]
[NativeCppClassAttribute]
internal class tm : ValueType {
    private int <alignment member>;
}
[UnsafeValueTypeAttribute]
[NativeCppClassAttribute]
internal class type_info : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal enum ValidatorFlags : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal enum VARENUM : Enum {
    public int value__;
}
[AttributeUsageAttribute("1")]
internal class vc.cppcli.attributes.?A0x05276581.CppInlineNamespaceAttribute : Attribute {
    public CppInlineNamespaceAttribute(string A_0);
}
[AttributeUsageAttribute("1")]
internal class vc.cppcli.attributes.?A0x6c68587d.CppInlineNamespaceAttribute : Attribute {
    public CppInlineNamespaceAttribute(string A_0);
}
[AttributeUsageAttribute("1")]
internal class vc.cppcli.attributes.?A0x7dd8e755.CppInlineNamespaceAttribute : Attribute {
    public CppInlineNamespaceAttribute(string A_0);
}
[AttributeUsageAttribute("1")]
internal class vc.cppcli.attributes.?A0xc9059d12.CppInlineNamespaceAttribute : Attribute {
    public CppInlineNamespaceAttribute(string A_0);
}
[AttributeUsageAttribute("1")]
internal class vc.cppcli.attributes.?A0xd9fddc76.CppInlineNamespaceAttribute : Attribute {
    public CppInlineNamespaceAttribute(string A_0);
}
[AttributeUsageAttribute("1")]
internal class vc.cppcli.attributes.?A0xe1c5f4c8.CppInlineNamespaceAttribute : Attribute {
    public CppInlineNamespaceAttribute(string A_0);
}
[AttributeUsageAttribute("1")]
internal class vc.cppcli.attributes.?A0xed805051.CppInlineNamespaceAttribute : Attribute {
    public CppInlineNamespaceAttribute(string A_0);
}
