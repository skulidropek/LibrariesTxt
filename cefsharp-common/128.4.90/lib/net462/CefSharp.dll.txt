public class CefSharp.AcceleratedPaintInfo : object {
    [CompilerGeneratedAttribute]
private IntPtr <SharedTextureHandle>k__BackingField;
    [CompilerGeneratedAttribute]
private ColorType <Format>k__BackingField;
    public IntPtr SharedTextureHandle { get; }
    public ColorType Format { get; }
    public AcceleratedPaintInfo(IntPtr sharedTextureHandle, ColorType format);
    [CompilerGeneratedAttribute]
public IntPtr get_SharedTextureHandle();
    [CompilerGeneratedAttribute]
public ColorType get_Format();
}
public class CefSharp.AddressChangedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private IBrowser <Browser>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Address>k__BackingField;
    public IBrowser Browser { get; private set; }
    public string Address { get; private set; }
    public AddressChangedEventArgs(IBrowser browser, string address);
    [CompilerGeneratedAttribute]
public IBrowser get_Browser();
    [CompilerGeneratedAttribute]
private void set_Browser(IBrowser value);
    [CompilerGeneratedAttribute]
public string get_Address();
    [CompilerGeneratedAttribute]
private void set_Address(string value);
}
public static class CefSharp.AssemblyInfo : object {
    public static bool ClsCompliant;
    public static bool ComVisible;
    public static string AssemblyCompany;
    public static string AssemblyProduct;
    public static string AssemblyVersion;
    public static string AssemblyFileVersion;
    public static string AssemblyCopyright;
    public static string CefSharpCoreProject;
    public static string CefSharpBrowserSubprocessProject;
    public static string CefSharpBrowserSubprocessCoreProject;
    public static string CefSharpWpfProject;
    public static string CefSharpWinFormsProject;
    public static string CefSharpOffScreenProject;
    public static string CefSharpTestProject;
    public static string PublicKey;
}
[ExtensionAttribute]
public static class CefSharp.AsyncExtensions : object {
    [ExtensionAttribute]
public static Task`1<int> DeleteCookiesAsync(ICookieManager cookieManager, string url, string name);
    [ExtensionAttribute]
public static Task`1<bool> SetCookieAsync(ICookieManager cookieManager, string url, Cookie cookie);
    [ExtensionAttribute]
public static Task`1<List`1<Cookie>> VisitAllCookiesAsync(ICookieManager cookieManager);
    [ExtensionAttribute]
public static Task`1<List`1<Cookie>> VisitUrlCookiesAsync(ICookieManager cookieManager, string url, bool includeHttpOnly);
    [ExtensionAttribute]
public static Task`1<bool> FlushStoreAsync(ICookieManager cookieManager);
    [ExtensionAttribute]
public static Task`1<List`1<NavigationEntry>> GetNavigationEntriesAsync(IBrowserHost browserHost, bool currentOnly);
}
public class CefSharp.BindingOptions : object {
    [CompilerGeneratedAttribute]
private IBinder <Binder>k__BackingField;
    [CompilerGeneratedAttribute]
private IMethodInterceptor <MethodInterceptor>k__BackingField;
    [CompilerGeneratedAttribute]
private IPropertyInterceptor <PropertyInterceptor>k__BackingField;
    public static BindingOptions DefaultBinder { get; }
    public IBinder Binder { get; public set; }
    public IMethodInterceptor MethodInterceptor { get; public set; }
    public IPropertyInterceptor PropertyInterceptor { get; public set; }
    public static BindingOptions get_DefaultBinder();
    [CompilerGeneratedAttribute]
public IBinder get_Binder();
    [CompilerGeneratedAttribute]
public void set_Binder(IBinder value);
    [CompilerGeneratedAttribute]
public IMethodInterceptor get_MethodInterceptor();
    [CompilerGeneratedAttribute]
public void set_MethodInterceptor(IMethodInterceptor value);
    [CompilerGeneratedAttribute]
public IPropertyInterceptor get_PropertyInterceptor();
    [CompilerGeneratedAttribute]
public void set_PropertyInterceptor(IPropertyInterceptor value);
}
public class CefSharp.ByteArrayResourceHandler : object {
    [CompilerGeneratedAttribute]
private Byte[] <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MimeType>k__BackingField;
    public Byte[] Data { get; private set; }
    public string MimeType { get; public set; }
    public ByteArrayResourceHandler(string mimeType, Byte[] data);
    [CompilerGeneratedAttribute]
public Byte[] get_Data();
    [CompilerGeneratedAttribute]
private void set_Data(Byte[] value);
    [CompilerGeneratedAttribute]
public string get_MimeType();
    [CompilerGeneratedAttribute]
public void set_MimeType(string value);
    private sealed virtual override bool CefSharp.IResourceHandler.ProcessRequest(IRequest request, ICallback callback);
    private sealed virtual override void CefSharp.IResourceHandler.GetResponseHeaders(IResponse response, Int64& responseLength, String& redirectUrl);
    private sealed virtual override bool CefSharp.IResourceHandler.ReadResponse(Stream dataOut, Int32& bytesRead, ICallback callback);
    private sealed virtual override void CefSharp.IResourceHandler.Cancel();
    private sealed virtual override bool CefSharp.IResourceHandler.Open(IRequest request, Boolean& handleRequest, ICallback callback);
    private sealed virtual override bool CefSharp.IResourceHandler.Skip(long bytesToSkip, Int64& bytesSkipped, IResourceSkipCallback callback);
    private sealed virtual override bool CefSharp.IResourceHandler.Read(Stream dataOut, Int32& bytesRead, IResourceReadCallback callback);
    private sealed virtual override void System.IDisposable.Dispose();
}
public interface CefSharp.Callback.IDevToolsMessageObserver {
    public abstract virtual bool OnDevToolsMessage(IBrowser browser, Stream message);
    public abstract virtual void OnDevToolsMethodResult(IBrowser browser, int messageId, bool success, Stream result);
    public abstract virtual void OnDevToolsEvent(IBrowser browser, string method, Stream parameters);
    public abstract virtual void OnDevToolsAgentAttached(IBrowser browser);
    public abstract virtual void OnDevToolsAgentDetached(IBrowser browser);
}
public interface CefSharp.Callback.IResourceReadCallback {
    public bool IsDisposed { get; }
    public abstract virtual void Continue(int bytesRead);
    public abstract virtual bool get_IsDisposed();
}
public interface CefSharp.Callback.IResourceSkipCallback {
    public bool IsDisposed { get; }
    public abstract virtual void Continue(long bytesSkipped);
    public abstract virtual bool get_IsDisposed();
}
public interface CefSharp.Callback.IRunFileDialogCallback {
    public abstract virtual void OnFileDialogDismissed(IList`1<string> filePaths);
}
public class CefSharp.Callback.NoOpCompletionCallback : object {
    private bool CefSharp.ICompletionCallback.IsDisposed { get; }
    private sealed virtual override void CefSharp.ICompletionCallback.OnComplete();
    private sealed virtual override bool CefSharp.ICompletionCallback.get_IsDisposed();
    private sealed virtual override void System.IDisposable.Dispose();
}
public class CefSharp.CefCustomScheme : object {
    private SchemeOptions schemeOptions;
    [CompilerGeneratedAttribute]
private string <SchemeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DomainName>k__BackingField;
    [CompilerGeneratedAttribute]
private ISchemeHandlerFactory <SchemeHandlerFactory>k__BackingField;
    public string SchemeName { get; public set; }
    public string DomainName { get; public set; }
    public bool IsStandard { get; public set; }
    public bool IsLocal { get; public set; }
    public bool IsDisplayIsolated { get; public set; }
    public bool IsSecure { get; public set; }
    public bool IsCorsEnabled { get; public set; }
    public bool IsCSPBypassing { get; public set; }
    public bool IsFetchEnabled { get; public set; }
    public ISchemeHandlerFactory SchemeHandlerFactory { get; public set; }
    public SchemeOptions Options { get; }
    public CefCustomScheme(string schemeName, SchemeOptions options);
    [CompilerGeneratedAttribute]
public string get_SchemeName();
    [CompilerGeneratedAttribute]
public void set_SchemeName(string value);
    [CompilerGeneratedAttribute]
public string get_DomainName();
    [CompilerGeneratedAttribute]
public void set_DomainName(string value);
    public bool get_IsStandard();
    public void set_IsStandard(bool value);
    public bool get_IsLocal();
    public void set_IsLocal(bool value);
    public bool get_IsDisplayIsolated();
    public void set_IsDisplayIsolated(bool value);
    public bool get_IsSecure();
    public void set_IsSecure(bool value);
    public bool get_IsCorsEnabled();
    public void set_IsCorsEnabled(bool value);
    public bool get_IsCSPBypassing();
    public void set_IsCSPBypassing(bool value);
    public bool get_IsFetchEnabled();
    public void set_IsFetchEnabled(bool value);
    [CompilerGeneratedAttribute]
public ISchemeHandlerFactory get_SchemeHandlerFactory();
    [CompilerGeneratedAttribute]
public void set_SchemeHandlerFactory(ISchemeHandlerFactory value);
    public SchemeOptions get_Options();
    public static List`1<CefCustomScheme> ParseCommandLineArguments(IEnumerable`1<string> args);
}
public enum CefSharp.CefErrorCode : Enum {
    public int value__;
    public static CefErrorCode None;
    public static CefErrorCode IoPending;
    public static CefErrorCode Failed;
    public static CefErrorCode Aborted;
    public static CefErrorCode InvalidArgument;
    public static CefErrorCode InvalidHandle;
    public static CefErrorCode FileNotFound;
    public static CefErrorCode TimedOut;
    public static CefErrorCode FileTooBig;
    public static CefErrorCode Unexpected;
    public static CefErrorCode AccessDenied;
    public static CefErrorCode NotImplemented;
    public static CefErrorCode InsufficientResources;
    public static CefErrorCode OutOfMemory;
    public static CefErrorCode UploadFileChanged;
    public static CefErrorCode SocketNotConnected;
    public static CefErrorCode FileExists;
    public static CefErrorCode FilePathTooLong;
    public static CefErrorCode FileNoSpace;
    public static CefErrorCode FileVirusInfected;
    public static CefErrorCode BlockedByClient;
    public static CefErrorCode NetworkChanged;
    public static CefErrorCode BlockedByAdministrator;
    public static CefErrorCode SocketIsConnected;
    public static CefErrorCode UploadStreamRewindNotSupported;
    public static CefErrorCode ContextShutDown;
    public static CefErrorCode BlockedByResponse;
    public static CefErrorCode CleartextNotPermitted;
    public static CefErrorCode BlockedByCsp;
    public static CefErrorCode H2OrQuicRequired;
    public static CefErrorCode BlockedByOrb;
    public static CefErrorCode NetworkAccessRevoked;
    public static CefErrorCode ConnectionClosed;
    public static CefErrorCode ConnectionReset;
    public static CefErrorCode ConnectionRefused;
    public static CefErrorCode ConnectionAborted;
    public static CefErrorCode ConnectionFailed;
    public static CefErrorCode NameNotResolved;
    public static CefErrorCode InternetDisconnected;
    public static CefErrorCode SslProtocolError;
    public static CefErrorCode AddressInvalid;
    public static CefErrorCode AddressUnreachable;
    public static CefErrorCode SslClientAuthCertNeeded;
    public static CefErrorCode TunnelConnectionFailed;
    public static CefErrorCode NoSslVersionsEnabled;
    public static CefErrorCode SslVersionOrCipherMismatch;
    public static CefErrorCode SslRenegotiationRequested;
    public static CefErrorCode ProxyAuthUnsupported;
    public static CefErrorCode BadSslClientAuthCert;
    public static CefErrorCode ConnectionTimedOut;
    public static CefErrorCode HostResolverQueueTooLarge;
    public static CefErrorCode SocksConnectionFailed;
    public static CefErrorCode SocksConnectionHostUnreachable;
    public static CefErrorCode AlpnNegotiationFailed;
    public static CefErrorCode SslNoRenegotiation;
    public static CefErrorCode WinsockUnexpectedWrittenBytes;
    public static CefErrorCode SslDecompressionFailureAlert;
    public static CefErrorCode SslBadRecordMacAlert;
    public static CefErrorCode ProxyAuthRequested;
    public static CefErrorCode ProxyConnectionFailed;
    public static CefErrorCode MandatoryProxyConfigurationFailed;
    public static CefErrorCode PreconnectMaxSocketLimit;
    public static CefErrorCode SslClientAuthPrivateKeyAccessDenied;
    public static CefErrorCode SslClientAuthCertNoPrivateKey;
    public static CefErrorCode ProxyCertificateInvalid;
    public static CefErrorCode NameResolutionFailed;
    public static CefErrorCode NetworkAccessDenied;
    public static CefErrorCode TemporarilyThrottled;
    public static CefErrorCode HttpsProxyTunnelResponseRedirect;
    public static CefErrorCode SslClientAuthSignatureFailed;
    public static CefErrorCode MsgTooBig;
    public static CefErrorCode WsProtocolError;
    public static CefErrorCode AddressInUse;
    public static CefErrorCode SslHandshakeNotCompleted;
    public static CefErrorCode SslBadPeerPublicKey;
    public static CefErrorCode SslPinnedKeyNotInCertChain;
    public static CefErrorCode ClientAuthCertTypeUnsupported;
    public static CefErrorCode SslDecryptErrorAlert;
    public static CefErrorCode WsThrottleQueueTooLarge;
    public static CefErrorCode SslServerCertChanged;
    public static CefErrorCode SslUnrecognizedNameAlert;
    public static CefErrorCode SocketSetReceiveBufferSizeError;
    public static CefErrorCode SocketSetSendBufferSizeError;
    public static CefErrorCode SocketReceiveBufferSizeUnchangeable;
    public static CefErrorCode SocketSendBufferSizeUnchangeable;
    public static CefErrorCode SslClientAuthCertBadFormat;
    public static CefErrorCode ICANNNameCollision;
    public static CefErrorCode SslServerCertBadFormat;
    public static CefErrorCode CtSthParsingFailed;
    public static CefErrorCode CtSthIncomplete;
    public static CefErrorCode UnableToReuseConnectionForProxyAuth;
    public static CefErrorCode CtConsistencyProofParsingFailed;
    public static CefErrorCode SslObsoleteCipher;
    public static CefErrorCode WsUpgrade;
    public static CefErrorCode ReadIfReadyNotImplemented;
    public static CefErrorCode NoBufferSpace;
    public static CefErrorCode SslClientAuthNoCommonAlgorithms;
    public static CefErrorCode EarlyDataRejected;
    public static CefErrorCode WrongVersionOnEarlyData;
    public static CefErrorCode Tls13DowngradeDetected;
    public static CefErrorCode SslKeyUsageIncompatible;
    public static CefErrorCode InvalidEchConfigList;
    public static CefErrorCode EchNotNegotiated;
    public static CefErrorCode EchFallbackCertificateInvalid;
    public static CefErrorCode CertCommonNameInvalid;
    public static CefErrorCode CertDateInvalid;
    public static CefErrorCode CertAuthorityInvalid;
    public static CefErrorCode CertContainsErrors;
    public static CefErrorCode CertNoRevocationMechanism;
    public static CefErrorCode CertUnableToCheckRevocation;
    public static CefErrorCode CertRevoked;
    public static CefErrorCode CertInvalid;
    public static CefErrorCode CertWeakSignatureAlgorithm;
    public static CefErrorCode CertNonUniqueName;
    public static CefErrorCode CertWeakKey;
    public static CefErrorCode CertNameConstraintViolation;
    public static CefErrorCode CertValidityTooLong;
    public static CefErrorCode CertificateTransparencyRequired;
    public static CefErrorCode CertSymantecLegacy;
    public static CefErrorCode CertKnownInterceptionBlocked;
    public static CefErrorCode CertEnd;
    public static CefErrorCode InvalidUrl;
    public static CefErrorCode DisallowedUrlScheme;
    public static CefErrorCode UnknownUrlScheme;
    public static CefErrorCode InvalidRedirect;
    public static CefErrorCode TooManyRedirects;
    public static CefErrorCode UnsafeRedirect;
    public static CefErrorCode UnsafePort;
    public static CefErrorCode InvalidResponse;
    public static CefErrorCode InvalidChunkedEncoding;
    public static CefErrorCode MethodNotSupported;
    public static CefErrorCode UnexpectedProxyAuth;
    public static CefErrorCode EmptyResponse;
    public static CefErrorCode ResponseHeadersTooBig;
    public static CefErrorCode PacScriptFailed;
    public static CefErrorCode RequestRangeNotSatisfiable;
    public static CefErrorCode MalformedIdentity;
    public static CefErrorCode ContentDecodingFailed;
    public static CefErrorCode NetworkIoSuspended;
    public static CefErrorCode SynReplyNotReceived;
    public static CefErrorCode EncodingConversionFailed;
    public static CefErrorCode UnrecognizedFtpDirectoryListingFormat;
    public static CefErrorCode NoSupportedProxies;
    public static CefErrorCode Http2ProtocolError;
    public static CefErrorCode InvalidAuthCredentials;
    public static CefErrorCode UnsupportedAuthScheme;
    public static CefErrorCode EncodingDetectionFailed;
    public static CefErrorCode MissingAuthCredentials;
    public static CefErrorCode UnexpectedSecurityLibraryStatus;
    public static CefErrorCode MisconfiguredAuthEnvironment;
    public static CefErrorCode UndocumentedSecurityLibraryStatus;
    public static CefErrorCode ResponseBodyTooBigToDrain;
    public static CefErrorCode ResponseHeadersMultipleContentLength;
    public static CefErrorCode IncompleteHttp2Headers;
    public static CefErrorCode PacNotInDhcp;
    public static CefErrorCode ResponseHeadersMultipleContentDisposition;
    public static CefErrorCode ResponseHeadersMultipleLocation;
    public static CefErrorCode Http2ServerRefusedStream;
    public static CefErrorCode Http2PingFailed;
    public static CefErrorCode ContentLengthMismatch;
    public static CefErrorCode IncompleteChunkedEncoding;
    public static CefErrorCode QuicProtocolError;
    public static CefErrorCode ResponseHeadersTruncated;
    public static CefErrorCode QuicHandshakeFailed;
    public static CefErrorCode Http2InadequateTransportSecurity;
    public static CefErrorCode Http2FlowControlError;
    public static CefErrorCode Http2FrameSizeError;
    public static CefErrorCode Http2CompressionError;
    public static CefErrorCode ProxyAuthRequestedWithNoConnection;
    public static CefErrorCode Http11Required;
    public static CefErrorCode ProxyHttp11Required;
    public static CefErrorCode PacScriptTerminated;
    public static CefErrorCode InvalidHttpResponse;
    public static CefErrorCode ContentDecodingInitFailed;
    public static CefErrorCode Http2RstStreamNoErrorReceived;
    public static CefErrorCode TooManyRetries;
    public static CefErrorCode Http2StreamClosed;
    public static CefErrorCode HttpResponseCodeFailure;
    public static CefErrorCode QuicCertRootNotKnown;
    public static CefErrorCode QuicGoawayRequestCanBeRetried;
    public static CefErrorCode TooManyAcceptChRestarts;
    public static CefErrorCode InconsistentIpAddressSpace;
    public static CefErrorCode CachedIpAddressSpaceBlockedByPrivateNetworkAccessPolicy;
    public static CefErrorCode BlockedByPrivateNetworkAccessChecks;
    public static CefErrorCode ZstdWindowSizeTooBig;
    public static CefErrorCode DictionaryLoadFailed;
    public static CefErrorCode UnexpectedContentDictionaryHeader;
    public static CefErrorCode CacheMiss;
    public static CefErrorCode CacheReadFailure;
    public static CefErrorCode CacheWriteFailure;
    public static CefErrorCode CacheOperationNotSupported;
    public static CefErrorCode CacheOpenFailure;
    public static CefErrorCode CacheCreateFailure;
    public static CefErrorCode CacheRace;
    public static CefErrorCode CacheChecksumReadFailure;
    public static CefErrorCode CacheChecksumMismatch;
    public static CefErrorCode CacheLockTimeout;
    public static CefErrorCode CacheAuthFailureAfterRead;
    public static CefErrorCode CacheEntryNotSuitable;
    public static CefErrorCode CacheDoomFailure;
    public static CefErrorCode CacheOpenOrCreateFailure;
    public static CefErrorCode InsecureResponse;
    public static CefErrorCode NoPrivateKeyForCert;
    public static CefErrorCode AddUserCertFailed;
    public static CefErrorCode InvalidSignedExchange;
    public static CefErrorCode InvalidWebBundle;
    public static CefErrorCode TrustTokenOperationFailed;
    public static CefErrorCode TrustTokenOperationSuccessWithoutSendingRequest;
    public static CefErrorCode Pkcs12ImportBadPassword;
    public static CefErrorCode Pkcs12ImportFailed;
    public static CefErrorCode ImportCaCertNotCa;
    public static CefErrorCode ImportCertAlreadyExists;
    public static CefErrorCode ImportCaCertFailed;
    public static CefErrorCode ImportServerCertFailed;
    public static CefErrorCode Pkcs12ImportInvalidMac;
    public static CefErrorCode Pkcs12ImportInvalidFile;
    public static CefErrorCode Pkcs12ImportUnsupported;
    public static CefErrorCode KeyGenerationFailed;
    public static CefErrorCode PrivateKeyExportFailed;
    public static CefErrorCode SelfSignedCertGenerationFailed;
    public static CefErrorCode CertDatabaseChanged;
    public static CefErrorCode CertVerifierChanged;
    public static CefErrorCode DnsMalformedResponse;
    public static CefErrorCode DnsServerRequiresTcp;
    public static CefErrorCode DnsServerFailed;
    public static CefErrorCode DnsTimedOut;
    public static CefErrorCode DnsCacheMiss;
    public static CefErrorCode DnsSearchEmpty;
    public static CefErrorCode DnsSortError;
    public static CefErrorCode DnsSecureResolverHostnameResolutionFailed;
    public static CefErrorCode DnsNameHttpsOnly;
    public static CefErrorCode DnsRequestCancelled;
    public static CefErrorCode DnsNoMatchingSupportedAlpn;
    public static CefErrorCode DnsSecureProbeRecordInvalid;
}
[FlagsAttribute]
public enum CefSharp.CefEventFlags : Enum {
    public UInt32 value__;
    public static CefEventFlags None;
    public static CefEventFlags CapsLockOn;
    public static CefEventFlags ShiftDown;
    public static CefEventFlags ControlDown;
    public static CefEventFlags AltDown;
    public static CefEventFlags LeftMouseButton;
    public static CefEventFlags MiddleMouseButton;
    public static CefEventFlags RightMouseButton;
    public static CefEventFlags CommandDown;
    public static CefEventFlags NumLockOn;
    public static CefEventFlags IsKeyPad;
    public static CefEventFlags IsLeft;
    public static CefEventFlags IsRight;
    public static CefEventFlags AltGrDown;
    public static CefEventFlags IsRepeat;
}
public enum CefSharp.CefFileDialogMode : Enum {
    public int value__;
    public static CefFileDialogMode Open;
    public static CefFileDialogMode OpenMultiple;
    public static CefFileDialogMode OpenFolder;
    public static CefFileDialogMode Save;
}
public enum CefSharp.CefFocusSource : Enum {
    public int value__;
    public static CefFocusSource FocusSourceNavigation;
    public static CefFocusSource FocusSourceSystem;
}
public enum CefSharp.CefJsDialogType : Enum {
    public int value__;
    public static CefJsDialogType Alert;
    public static CefJsDialogType Confirm;
    public static CefJsDialogType Prompt;
}
public class CefSharp.CefLibraryHandle : SafeHandle {
    public bool IsInvalid { get; }
    public CefLibraryHandle(string path);
    public virtual bool get_IsInvalid();
    protected virtual bool ReleaseHandle();
    private static IntPtr LoadLibraryEx(string lpFileName, IntPtr hReservedNull, LoadLibraryFlags dwFlags);
    private static bool FreeLibrary(IntPtr hModule);
}
public enum CefSharp.CefMenuCommand : Enum {
    public int value__;
    public static CefMenuCommand NotFound;
    public static CefMenuCommand Back;
    public static CefMenuCommand Forward;
    public static CefMenuCommand Reload;
    public static CefMenuCommand ReloadNoCache;
    public static CefMenuCommand StopLoad;
    public static CefMenuCommand Undo;
    public static CefMenuCommand Redo;
    public static CefMenuCommand Cut;
    public static CefMenuCommand Copy;
    public static CefMenuCommand Paste;
    public static CefMenuCommand Delete;
    public static CefMenuCommand SelectAll;
    public static CefMenuCommand Find;
    public static CefMenuCommand Print;
    public static CefMenuCommand ViewSource;
    public static CefMenuCommand SpellCheckSuggestion0;
    public static CefMenuCommand SpellCheckSuggestion1;
    public static CefMenuCommand SpellCheckSuggestion2;
    public static CefMenuCommand SpellCheckSuggestion3;
    public static CefMenuCommand SpellCheckSuggestion4;
    public static CefMenuCommand SpellCheckLastSuggestion;
    public static CefMenuCommand SpellCheckNoSuggestions;
    public static CefMenuCommand AddToDictionary;
    public static CefMenuCommand CustomFirst;
    public static CefMenuCommand CustomLast;
    public static CefMenuCommand UserFirst;
    public static CefMenuCommand UserLast;
}
public enum CefSharp.CefPdfPrintMarginType : Enum {
    public int value__;
    public static CefPdfPrintMarginType Default;
    public static CefPdfPrintMarginType None;
    public static CefPdfPrintMarginType Custom;
}
public enum CefSharp.CefReturnValue : Enum {
    public int value__;
    public static CefReturnValue Cancel;
    public static CefReturnValue Continue;
    public static CefReturnValue ContinueAsync;
}
public static class CefSharp.CefRuntime : object {
    private static ResolveEventHandler currentDomainAssemblyResolveHandler;
    public static void SubscribeAnyCpuAssemblyResolver(string basePath);
    public static void UnsubscribeAnyCpuAssemblyResolver();
    public static void LoadCefSharpCoreRuntimeAnyCpu(string basePath);
}
public enum CefSharp.CefRuntimeStyle : Enum {
    public int value__;
    public static CefRuntimeStyle Default;
    public static CefRuntimeStyle Chrome;
    public static CefRuntimeStyle Alloy;
}
public static class CefSharp.CefSharpSettings : object {
    [CompilerGeneratedAttribute]
private static bool <WcfEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private static TimeSpan <WcfTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <ShutdownOnExit>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <SubprocessExitIfParentProcessClosed>k__BackingField;
    [CompilerGeneratedAttribute]
private static ProxyOptions <Proxy>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <ConcurrentTaskExecution>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <FocusedNodeChangedEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private static Nullable`1<CefRuntimeStyle> <RuntimeStyle>k__BackingField;
    public static bool WcfEnabled { get; public set; }
    public static TimeSpan WcfTimeout { get; public set; }
    public static bool ShutdownOnExit { get; public set; }
    public static bool SubprocessExitIfParentProcessClosed { get; public set; }
    public static ProxyOptions Proxy { get; public set; }
    public static bool ConcurrentTaskExecution { get; public set; }
    public static bool FocusedNodeChangedEnabled { get; public set; }
    public static Nullable`1<CefRuntimeStyle> RuntimeStyle { get; public set; }
    private static CefSharpSettings();
    [CompilerGeneratedAttribute]
public static bool get_WcfEnabled();
    [CompilerGeneratedAttribute]
public static void set_WcfEnabled(bool value);
    [CompilerGeneratedAttribute]
public static TimeSpan get_WcfTimeout();
    [CompilerGeneratedAttribute]
public static void set_WcfTimeout(TimeSpan value);
    [CompilerGeneratedAttribute]
public static bool get_ShutdownOnExit();
    [CompilerGeneratedAttribute]
public static void set_ShutdownOnExit(bool value);
    [CompilerGeneratedAttribute]
public static bool get_SubprocessExitIfParentProcessClosed();
    [CompilerGeneratedAttribute]
public static void set_SubprocessExitIfParentProcessClosed(bool value);
    [CompilerGeneratedAttribute]
public static ProxyOptions get_Proxy();
    [CompilerGeneratedAttribute]
public static void set_Proxy(ProxyOptions value);
    [CompilerGeneratedAttribute]
public static bool get_ConcurrentTaskExecution();
    [CompilerGeneratedAttribute]
public static void set_ConcurrentTaskExecution(bool value);
    [CompilerGeneratedAttribute]
public static bool get_FocusedNodeChangedEnabled();
    [CompilerGeneratedAttribute]
public static void set_FocusedNodeChangedEnabled(bool value);
    [CompilerGeneratedAttribute]
public static Nullable`1<CefRuntimeStyle> get_RuntimeStyle();
    [CompilerGeneratedAttribute]
public static void set_RuntimeStyle(Nullable`1<CefRuntimeStyle> value);
}
public enum CefSharp.CefState : Enum {
    public int value__;
    public static CefState Default;
    public static CefState Enabled;
    public static CefState Disabled;
}
public enum CefSharp.CefTerminationStatus : Enum {
    public int value__;
    public static CefTerminationStatus AbnormalTermination;
    public static CefTerminationStatus ProcessWasKilled;
    public static CefTerminationStatus ProcessCrashed;
    public static CefTerminationStatus OutOfMemory;
}
public enum CefSharp.CefThreadIds : Enum {
    public int value__;
    public static CefThreadIds TID_UI;
    public static CefThreadIds TID_FILE_BACKGROUND;
    public static CefThreadIds TID_FILE_USER_VISIBLE;
    public static CefThreadIds TID_FILE_USER_BLOCKING;
    public static CefThreadIds TID_PROCESS_LAUNCHER;
    public static CefThreadIds TID_IO;
    public static CefThreadIds TID_RENDERER;
}
[FlagsAttribute]
public enum CefSharp.CertStatus : Enum {
    public int value__;
    public static CertStatus None;
    public static CertStatus CommonNameInvalid;
    public static CertStatus DateInvalid;
    public static CertStatus AuthorityInvalid;
    public static CertStatus NoRevocation_Mechanism;
    public static CertStatus UnableToCheckRevocation;
    public static CertStatus Revoked;
    public static CertStatus Invalid;
    public static CertStatus WeakSignatureAlgorithm;
    public static CertStatus NonUniqueName;
    public static CertStatus WeakKey;
    public static CertStatus PinnedKeyMissing;
    public static CertStatus NameConstraintViolation;
    public static CertStatus ValidityTooLong;
    public static CertStatus IsEv;
    public static CertStatus RevCheckingEnabled;
    public static CertStatus Sha1SignaturePresent;
    public static CertStatus CtComplianceFailed;
}
public class CefSharp.ConsoleMessageEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private IBrowser <Browser>k__BackingField;
    [CompilerGeneratedAttribute]
private LogSeverity <Level>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Line>k__BackingField;
    public IBrowser Browser { get; private set; }
    public LogSeverity Level { get; private set; }
    public string Message { get; private set; }
    public string Source { get; private set; }
    public int Line { get; private set; }
    public ConsoleMessageEventArgs(IBrowser browser, LogSeverity level, string message, string source, int line);
    [CompilerGeneratedAttribute]
public IBrowser get_Browser();
    [CompilerGeneratedAttribute]
private void set_Browser(IBrowser value);
    [CompilerGeneratedAttribute]
public LogSeverity get_Level();
    [CompilerGeneratedAttribute]
private void set_Level(LogSeverity value);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
private void set_Message(string value);
    [CompilerGeneratedAttribute]
public string get_Source();
    [CompilerGeneratedAttribute]
private void set_Source(string value);
    [CompilerGeneratedAttribute]
public int get_Line();
    [CompilerGeneratedAttribute]
private void set_Line(int value);
}
[FlagsAttribute]
public enum CefSharp.ContextMenuEditState : Enum {
    public int value__;
    public static ContextMenuEditState None;
    public static ContextMenuEditState CanUndo;
    public static ContextMenuEditState CanRedo;
    public static ContextMenuEditState CanCut;
    public static ContextMenuEditState CanCopy;
    public static ContextMenuEditState CanPaste;
    public static ContextMenuEditState CanDelete;
    public static ContextMenuEditState CanSelectAll;
    public static ContextMenuEditState CanTranslate;
    public static ContextMenuEditState CanEditRichly;
}
[FlagsAttribute]
public enum CefSharp.ContextMenuMediaState : Enum {
    public int value__;
    public static ContextMenuMediaState None;
    public static ContextMenuMediaState Error;
    public static ContextMenuMediaState Paused;
    public static ContextMenuMediaState Muted;
    public static ContextMenuMediaState Loop;
    public static ContextMenuMediaState CanSave;
    public static ContextMenuMediaState HasAudio;
    public static ContextMenuMediaState CanToggleControls;
    public static ContextMenuMediaState Controls;
    public static ContextMenuMediaState CanPrint;
    public static ContextMenuMediaState CanRotate;
    public static ContextMenuMediaState CanPictureInPicture;
    public static ContextMenuMediaState PictureInPicture;
    public static ContextMenuMediaState CanLoop;
}
public enum CefSharp.ContextMenuMediaType : Enum {
    public int value__;
    public static ContextMenuMediaType None;
    public static ContextMenuMediaType Image;
    public static ContextMenuMediaType Video;
    public static ContextMenuMediaType Audio;
    public static ContextMenuMediaType Canvas;
    public static ContextMenuMediaType File;
    public static ContextMenuMediaType Plugin;
}
[FlagsAttribute]
public enum CefSharp.ContextMenuType : Enum {
    public int value__;
    public static ContextMenuType None;
    public static ContextMenuType Page;
    public static ContextMenuType Frame;
    public static ContextMenuType Link;
    public static ContextMenuType Media;
    public static ContextMenuType Selection;
    public static ContextMenuType Editable;
}
[DebuggerDisplayAttribute("Domain = {Domain}, Path = {Path}, Name = {Name}, Secure = {Secure}, HttpOnly = {HttpOnly},Creation = {Creation}, Expires = {Expires}, LastAccess = {LastAccess}")]
public class CefSharp.Cookie : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Domain>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Secure>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HttpOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <Expires>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <Creation>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <LastAccess>k__BackingField;
    [CompilerGeneratedAttribute]
private CookieSameSite <SameSite>k__BackingField;
    [CompilerGeneratedAttribute]
private CookiePriority <Priority>k__BackingField;
    public string Name { get; public set; }
    public string Value { get; public set; }
    public string Domain { get; public set; }
    public string Path { get; public set; }
    public bool Secure { get; public set; }
    public bool HttpOnly { get; public set; }
    public Nullable`1<DateTime> Expires { get; public set; }
    public DateTime Creation { get; private set; }
    public DateTime LastAccess { get; private set; }
    public CookieSameSite SameSite { get; public set; }
    public CookiePriority Priority { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
    [CompilerGeneratedAttribute]
public string get_Domain();
    [CompilerGeneratedAttribute]
public void set_Domain(string value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public bool get_Secure();
    [CompilerGeneratedAttribute]
public void set_Secure(bool value);
    [CompilerGeneratedAttribute]
public bool get_HttpOnly();
    [CompilerGeneratedAttribute]
public void set_HttpOnly(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_Expires();
    [CompilerGeneratedAttribute]
public void set_Expires(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public DateTime get_Creation();
    [CompilerGeneratedAttribute]
private void set_Creation(DateTime value);
    [CompilerGeneratedAttribute]
public DateTime get_LastAccess();
    [CompilerGeneratedAttribute]
private void set_LastAccess(DateTime value);
    [CompilerGeneratedAttribute]
public CookieSameSite get_SameSite();
    [CompilerGeneratedAttribute]
public void set_SameSite(CookieSameSite value);
    [CompilerGeneratedAttribute]
public CookiePriority get_Priority();
    [CompilerGeneratedAttribute]
public void set_Priority(CookiePriority value);
    [EditorBrowsableAttribute("1")]
public void SetCreationDate(long baseTime);
    [EditorBrowsableAttribute("1")]
public void SetLastAccessDate(long baseTime);
}
public class CefSharp.DefaultApp : object {
    private bool isDisposed;
    [CompilerGeneratedAttribute]
private IBrowserProcessHandler <BrowserProcessHandler>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<CefCustomScheme> <Schemes>k__BackingField;
    public IBrowserProcessHandler BrowserProcessHandler { get; private set; }
    public IEnumerable`1<CefCustomScheme> Schemes { get; private set; }
    public DefaultApp(IBrowserProcessHandler browserProcessHandler, IEnumerable`1<CefCustomScheme> schemes);
    [CompilerGeneratedAttribute]
public sealed virtual IBrowserProcessHandler get_BrowserProcessHandler();
    [CompilerGeneratedAttribute]
private void set_BrowserProcessHandler(IBrowserProcessHandler value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<CefCustomScheme> get_Schemes();
    [CompilerGeneratedAttribute]
private void set_Schemes(IEnumerable`1<CefCustomScheme> value);
    private sealed virtual override void CefSharp.IApp.OnRegisterCustomSchemes(ISchemeRegistrar registrar);
    protected virtual void OnRegisterCustomSchemes(ISchemeRegistrar registrar);
    protected virtual void Dispose(bool disposing);
    private sealed virtual override void System.IDisposable.Dispose();
}
public static class CefSharp.DependencyChecker : object {
    public static string LocalesPackFile;
    public static String[] CefDependencies;
    public static String[] CefResources;
    public static String[] CefOptionalDependencies;
    public static String[] CefSharpManagedDependencies;
    public static String[] CefSharpArchSpecificDependencies;
    public static String[] BrowserSubprocessDependencies;
    private static DependencyChecker();
    public static List`1<string> CheckDependencies(bool checkOptional, bool packLoadingDisabled, string path, string resourcesDirPath, string browserSubProcessPath, string localePackFile);
    public static List`1<string> CheckDependencies(bool checkOptional, bool packLoadingDisabled, string managedLibPath, string nativeLibPath, string resourcesDirPath, string browserSubProcessPath, string localePackFile);
    private static List`1<string> CheckDependencyList(string dir, IEnumerable`1<string> files);
    public static void AssertAllDependenciesPresent(string locale, string localesDirPath, string resourcesDirPath, bool packLoadingDisabled, string browserSubProcessPath);
}
[DefaultMemberAttribute("Item")]
public class CefSharp.DomNode : object {
    private IDictionary`2<string, string> attributes;
    [CompilerGeneratedAttribute]
private string <TagName>k__BackingField;
    public string Item { get; }
    public string TagName { get; private set; }
    public ReadOnlyCollection`1<string> AttributeNames { get; }
    public DomNode(string tagName, IDictionary`2<string, string> attributes);
    public virtual string ToString();
    public sealed virtual string get_Item(string name);
    [CompilerGeneratedAttribute]
public sealed virtual string get_TagName();
    [CompilerGeneratedAttribute]
private void set_TagName(string value);
    public sealed virtual ReadOnlyCollection`1<string> get_AttributeNames();
    public sealed virtual bool HasAttribute(string attributeName);
    public sealed virtual IEnumerator`1<KeyValuePair`2<string, string>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class CefSharp.DownloadItem : object {
    [CompilerGeneratedAttribute]
private bool <IsValid>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsInProgress>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsComplete>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsCancelled>k__BackingField;
    [CompilerGeneratedAttribute]
private long <CurrentSpeed>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PercentComplete>k__BackingField;
    [CompilerGeneratedAttribute]
private long <TotalBytes>k__BackingField;
    [CompilerGeneratedAttribute]
private long <ReceivedBytes>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <StartTime>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <EndTime>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FullPath>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OriginalUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SuggestedFileName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContentDisposition>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MimeType>k__BackingField;
    public bool IsValid { get; public set; }
    public bool IsInProgress { get; public set; }
    public bool IsComplete { get; public set; }
    public bool IsCancelled { get; public set; }
    public long CurrentSpeed { get; public set; }
    public int PercentComplete { get; public set; }
    public long TotalBytes { get; public set; }
    public long ReceivedBytes { get; public set; }
    public Nullable`1<DateTime> StartTime { get; public set; }
    public Nullable`1<DateTime> EndTime { get; public set; }
    public string FullPath { get; public set; }
    public int Id { get; public set; }
    public string Url { get; public set; }
    public string OriginalUrl { get; public set; }
    public string SuggestedFileName { get; public set; }
    public string ContentDisposition { get; public set; }
    public string MimeType { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_IsValid();
    [CompilerGeneratedAttribute]
public void set_IsValid(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsInProgress();
    [CompilerGeneratedAttribute]
public void set_IsInProgress(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsComplete();
    [CompilerGeneratedAttribute]
public void set_IsComplete(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsCancelled();
    [CompilerGeneratedAttribute]
public void set_IsCancelled(bool value);
    [CompilerGeneratedAttribute]
public long get_CurrentSpeed();
    [CompilerGeneratedAttribute]
public void set_CurrentSpeed(long value);
    [CompilerGeneratedAttribute]
public int get_PercentComplete();
    [CompilerGeneratedAttribute]
public void set_PercentComplete(int value);
    [CompilerGeneratedAttribute]
public long get_TotalBytes();
    [CompilerGeneratedAttribute]
public void set_TotalBytes(long value);
    [CompilerGeneratedAttribute]
public long get_ReceivedBytes();
    [CompilerGeneratedAttribute]
public void set_ReceivedBytes(long value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_StartTime();
    [CompilerGeneratedAttribute]
public void set_StartTime(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_EndTime();
    [CompilerGeneratedAttribute]
public void set_EndTime(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public string get_FullPath();
    [CompilerGeneratedAttribute]
public void set_FullPath(string value);
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(int value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
    [CompilerGeneratedAttribute]
public string get_OriginalUrl();
    [CompilerGeneratedAttribute]
public void set_OriginalUrl(string value);
    [CompilerGeneratedAttribute]
public string get_SuggestedFileName();
    [CompilerGeneratedAttribute]
public void set_SuggestedFileName(string value);
    [CompilerGeneratedAttribute]
public string get_ContentDisposition();
    [CompilerGeneratedAttribute]
public void set_ContentDisposition(string value);
    [CompilerGeneratedAttribute]
public string get_MimeType();
    [CompilerGeneratedAttribute]
public void set_MimeType(string value);
}
public class CefSharp.DraggableRegion : ValueType {
    [CompilerGeneratedAttribute]
private int <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Height>k__BackingField;
    [CompilerGeneratedAttribute]
private int <X>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Y>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Draggable>k__BackingField;
    public int Width { get; private set; }
    public int Height { get; private set; }
    public int X { get; private set; }
    public int Y { get; private set; }
    public bool Draggable { get; private set; }
    public DraggableRegion(int width, int height, int x, int y, bool draggable);
    [CompilerGeneratedAttribute]
public int get_Width();
    [CompilerGeneratedAttribute]
private void set_Width(int value);
    [CompilerGeneratedAttribute]
public int get_Height();
    [CompilerGeneratedAttribute]
private void set_Height(int value);
    [CompilerGeneratedAttribute]
public int get_X();
    [CompilerGeneratedAttribute]
private void set_X(int value);
    [CompilerGeneratedAttribute]
public int get_Y();
    [CompilerGeneratedAttribute]
private void set_Y(int value);
    [CompilerGeneratedAttribute]
public bool get_Draggable();
    [CompilerGeneratedAttribute]
private void set_Draggable(bool value);
}
public enum CefSharp.Enums.AlphaType : Enum {
    public int value__;
    public static AlphaType Opaque;
    public static AlphaType PreMultiplied;
    public static AlphaType PostMultiplied;
}
public enum CefSharp.Enums.ChannelLayout : Enum {
    public int value__;
    public static ChannelLayout LayoutNone;
    public static ChannelLayout LayoutUnsupported;
    public static ChannelLayout LayoutMono;
    public static ChannelLayout LayoutStereo;
    public static ChannelLayout Layout2_1;
    public static ChannelLayout LayoutSurround;
    public static ChannelLayout Layout4_0;
    public static ChannelLayout Layout2_2;
    public static ChannelLayout LayoutQuad;
    public static ChannelLayout Layout5_0;
    public static ChannelLayout Layout5_1;
    public static ChannelLayout Layout5_0Back;
    public static ChannelLayout Layout5_1Back;
    public static ChannelLayout Layout7_0;
    public static ChannelLayout Layout7_1;
    public static ChannelLayout Layout7_1Wide;
    public static ChannelLayout LayoutStereoDownMix;
    public static ChannelLayout Layout2Point1;
    public static ChannelLayout Layout3_1;
    public static ChannelLayout Layout4_1;
    public static ChannelLayout Layout6_0;
    public static ChannelLayout Layout6_0Front;
    public static ChannelLayout LayoutHexagonal;
    public static ChannelLayout Layout6_1;
    public static ChannelLayout Layout6_1Back;
    public static ChannelLayout Layout6_1Front;
    public static ChannelLayout Layout7_0Front;
    public static ChannelLayout Layout7_1WideBack;
    public static ChannelLayout LayoutOctagonal;
    public static ChannelLayout LayoutDiscrete;
    public static ChannelLayout LayoutStereoKeyboardAndMic;
    public static ChannelLayout Layout4_1QuadSize;
    public static ChannelLayout LayoutBitstream;
    public static ChannelLayout Layout5_1_4DownMix;
    public static ChannelLayout LayoutMax;
}
public enum CefSharp.Enums.ColorType : Enum {
    public int value__;
    public static ColorType Rgba8888;
    public static ColorType Bgra8888;
}
public enum CefSharp.Enums.CompositionUnderlineStyle : Enum {
    public int value__;
    public static CompositionUnderlineStyle Solid;
    public static CompositionUnderlineStyle Dot;
    public static CompositionUnderlineStyle Dash;
    public static CompositionUnderlineStyle None;
}
public enum CefSharp.Enums.CookiePriority : Enum {
    public int value__;
    public static CookiePriority Low;
    public static CookiePriority Medium;
    public static CookiePriority High;
}
public enum CefSharp.Enums.CookieSameSite : Enum {
    public int value__;
    public static CookieSameSite Unspecified;
    public static CookieSameSite NoRestriction;
    public static CookieSameSite LaxMode;
    public static CookieSameSite StrictMode;
}
public enum CefSharp.Enums.CursorType : Enum {
    public int value__;
    public static CursorType Pointer;
    public static CursorType Cross;
    public static CursorType Hand;
    public static CursorType IBeam;
    public static CursorType Wait;
    public static CursorType Help;
    public static CursorType EastResize;
    public static CursorType NorthResize;
    public static CursorType NortheastResize;
    public static CursorType NorthwestResize;
    public static CursorType SouthResize;
    public static CursorType SoutheastResize;
    public static CursorType SouthwestResize;
    public static CursorType WestResize;
    public static CursorType NorthSouthResize;
    public static CursorType EastWestResize;
    public static CursorType NortheastSouthwestResize;
    public static CursorType NorthwestSoutheastResize;
    public static CursorType ColumnResize;
    public static CursorType RowResize;
    public static CursorType MiddlePanning;
    public static CursorType EastPanning;
    public static CursorType NorthPanning;
    public static CursorType NortheastPanning;
    public static CursorType NorthwestPanning;
    public static CursorType SouthPanning;
    public static CursorType SoutheastPanning;
    public static CursorType SouthwestPanning;
    public static CursorType WestPanning;
    public static CursorType Move;
    public static CursorType VerticalText;
    public static CursorType Cell;
    public static CursorType ContextMenu;
    public static CursorType Alias;
    public static CursorType Progress;
    public static CursorType NoDrop;
    public static CursorType Copy;
    public static CursorType None;
    public static CursorType NotAllowed;
    public static CursorType ZoomIn;
    public static CursorType ZoomOut;
    public static CursorType Grab;
    public static CursorType Grabbing;
    public static CursorType MiddlePanningVertical;
    public static CursorType MiddlePanningHorizontal;
    public static CursorType Custom;
    public static CursorType DndNone;
    public static CursorType DndMove;
    public static CursorType DndCopy;
    public static CursorType DndLink;
}
[FlagsAttribute]
public enum CefSharp.Enums.DragOperationsMask : Enum {
    public UInt32 value__;
    public static DragOperationsMask None;
    public static DragOperationsMask Copy;
    public static DragOperationsMask Link;
    public static DragOperationsMask Generic;
    public static DragOperationsMask Private;
    public static DragOperationsMask Move;
    public static DragOperationsMask Delete;
    public static DragOperationsMask Every;
}
public enum CefSharp.Enums.PointerType : Enum {
    public int value__;
    public static PointerType Touch;
    public static PointerType Mouse;
    public static PointerType Pen;
    public static PointerType Eraser;
    public static PointerType Unknown;
}
[FlagsAttribute]
public enum CefSharp.Enums.SchemeOptions : Enum {
    public int value__;
    public static SchemeOptions None;
    public static SchemeOptions Standard;
    public static SchemeOptions Local;
    public static SchemeOptions DisplayIsolated;
    public static SchemeOptions Secure;
    public static SchemeOptions CorsEnabled;
    public static SchemeOptions CspBypassing;
    public static SchemeOptions FetchEnabled;
}
public enum CefSharp.Enums.TextInputMode : Enum {
    public int value__;
    public static TextInputMode Default;
    public static TextInputMode None;
    public static TextInputMode Text;
    public static TextInputMode Tel;
    public static TextInputMode Url;
    public static TextInputMode EMail;
    public static TextInputMode Numeric;
    public static TextInputMode Decimal;
    public static TextInputMode Search;
    public static TextInputMode Max;
}
public enum CefSharp.Enums.TouchEventType : Enum {
    public int value__;
    public static TouchEventType Released;
    public static TouchEventType Pressed;
    public static TouchEventType Moved;
    public static TouchEventType Cancelled;
}
public enum CefSharp.Enums.ValueType : Enum {
    public int value__;
    public static ValueType Invalid;
    public static ValueType Null;
    public static ValueType Bool;
    public static ValueType Int;
    public static ValueType Double;
    public static ValueType String;
    public static ValueType Binary;
    public static ValueType Dictionary;
    public static ValueType List;
}
public class CefSharp.Event.JavascriptBindingCompleteEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private IJavascriptObjectRepository <ObjectRepository>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ObjectName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AlreadyBound>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsCached>k__BackingField;
    public IJavascriptObjectRepository ObjectRepository { get; private set; }
    public string ObjectName { get; private set; }
    public bool AlreadyBound { get; private set; }
    public bool IsCached { get; private set; }
    public JavascriptBindingCompleteEventArgs(IJavascriptObjectRepository objectRepository, string name, bool alreadyBound, bool isCached);
    [CompilerGeneratedAttribute]
public IJavascriptObjectRepository get_ObjectRepository();
    [CompilerGeneratedAttribute]
private void set_ObjectRepository(IJavascriptObjectRepository value);
    [CompilerGeneratedAttribute]
public string get_ObjectName();
    [CompilerGeneratedAttribute]
private void set_ObjectName(string value);
    [CompilerGeneratedAttribute]
public bool get_AlreadyBound();
    [CompilerGeneratedAttribute]
private void set_AlreadyBound(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsCached();
    [CompilerGeneratedAttribute]
private void set_IsCached(bool value);
}
public class CefSharp.Event.JavascriptBindingEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private IJavascriptObjectRepository <ObjectRepository>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ObjectName>k__BackingField;
    public IJavascriptObjectRepository ObjectRepository { get; private set; }
    public string ObjectName { get; private set; }
    public JavascriptBindingEventArgs(IJavascriptObjectRepository objectRepository, string name);
    [CompilerGeneratedAttribute]
public IJavascriptObjectRepository get_ObjectRepository();
    [CompilerGeneratedAttribute]
private void set_ObjectRepository(IJavascriptObjectRepository value);
    [CompilerGeneratedAttribute]
public string get_ObjectName();
    [CompilerGeneratedAttribute]
private void set_ObjectName(string value);
}
public class CefSharp.Event.JavascriptBindingMultipleCompleteEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private IJavascriptObjectRepository <ObjectRepository>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <ObjectNames>k__BackingField;
    public IJavascriptObjectRepository ObjectRepository { get; private set; }
    public IList`1<string> ObjectNames { get; private set; }
    public JavascriptBindingMultipleCompleteEventArgs(IJavascriptObjectRepository objectRepository, IList`1<string> names);
    [CompilerGeneratedAttribute]
public IJavascriptObjectRepository get_ObjectRepository();
    [CompilerGeneratedAttribute]
private void set_ObjectRepository(IJavascriptObjectRepository value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_ObjectNames();
    [CompilerGeneratedAttribute]
private void set_ObjectNames(IList`1<string> value);
}
public class CefSharp.FileResourceHandler : object {
    [CompilerGeneratedAttribute]
private string <FilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MimeType>k__BackingField;
    public string FilePath { get; private set; }
    public string MimeType { get; public set; }
    public FileResourceHandler(string mimeType, string filePath);
    [CompilerGeneratedAttribute]
public string get_FilePath();
    [CompilerGeneratedAttribute]
private void set_FilePath(string value);
    [CompilerGeneratedAttribute]
public string get_MimeType();
    [CompilerGeneratedAttribute]
public void set_MimeType(string value);
    private sealed virtual override bool CefSharp.IResourceHandler.ProcessRequest(IRequest request, ICallback callback);
    private sealed virtual override void CefSharp.IResourceHandler.GetResponseHeaders(IResponse response, Int64& responseLength, String& redirectUrl);
    private sealed virtual override bool CefSharp.IResourceHandler.ReadResponse(Stream dataOut, Int32& bytesRead, ICallback callback);
    private sealed virtual override void CefSharp.IResourceHandler.Cancel();
    private sealed virtual override bool CefSharp.IResourceHandler.Open(IRequest request, Boolean& handleRequest, ICallback callback);
    private sealed virtual override bool CefSharp.IResourceHandler.Skip(long bytesToSkip, Int64& bytesSkipped, IResourceSkipCallback callback);
    private sealed virtual override bool CefSharp.IResourceHandler.Read(Stream dataOut, Int32& bytesRead, IResourceReadCallback callback);
    private sealed virtual override void System.IDisposable.Dispose();
}
public enum CefSharp.FilterStatus : Enum {
    public int value__;
    public static FilterStatus NeedMoreData;
    public static FilterStatus Done;
    public static FilterStatus Error;
}
public class CefSharp.FrameLoadEndEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private IBrowser <Browser>k__BackingField;
    [CompilerGeneratedAttribute]
private IFrame <Frame>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private int <HttpStatusCode>k__BackingField;
    public IBrowser Browser { get; private set; }
    public IFrame Frame { get; private set; }
    public string Url { get; private set; }
    public int HttpStatusCode { get; public set; }
    public FrameLoadEndEventArgs(IBrowser browser, IFrame frame, int httpStatusCode);
    [CompilerGeneratedAttribute]
public IBrowser get_Browser();
    [CompilerGeneratedAttribute]
private void set_Browser(IBrowser value);
    [CompilerGeneratedAttribute]
public IFrame get_Frame();
    [CompilerGeneratedAttribute]
private void set_Frame(IFrame value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
private void set_Url(string value);
    [CompilerGeneratedAttribute]
public int get_HttpStatusCode();
    [CompilerGeneratedAttribute]
public void set_HttpStatusCode(int value);
}
public class CefSharp.FrameLoadStartEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private IBrowser <Browser>k__BackingField;
    [CompilerGeneratedAttribute]
private IFrame <Frame>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private TransitionType <TransitionType>k__BackingField;
    public IBrowser Browser { get; private set; }
    public IFrame Frame { get; private set; }
    public string Url { get; private set; }
    public TransitionType TransitionType { get; private set; }
    public FrameLoadStartEventArgs(IBrowser browser, IFrame frame, TransitionType transitionType);
    [CompilerGeneratedAttribute]
public IBrowser get_Browser();
    [CompilerGeneratedAttribute]
private void set_Browser(IBrowser value);
    [CompilerGeneratedAttribute]
public IFrame get_Frame();
    [CompilerGeneratedAttribute]
private void set_Frame(IFrame value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
private void set_Url(string value);
    [CompilerGeneratedAttribute]
public TransitionType get_TransitionType();
    [CompilerGeneratedAttribute]
private void set_TransitionType(TransitionType value);
}
public class CefSharp.Handler.AccessibilityHandler : object {
    private sealed virtual override void CefSharp.IAccessibilityHandler.OnAccessibilityLocationChange(IValue value);
    protected virtual void OnAccessibilityLocationChange(IValue value);
    private sealed virtual override void CefSharp.IAccessibilityHandler.OnAccessibilityTreeChange(IValue value);
    protected virtual void OnAccessibilityTreeChange(IValue value);
}
public class CefSharp.Handler.AudioHandler : object {
    private bool isDisposed;
    public bool IsDisposed { get; }
    public bool get_IsDisposed();
    private sealed virtual override bool CefSharp.IAudioHandler.GetAudioParameters(IWebBrowser chromiumWebBrowser, IBrowser browser, AudioParameters& parameters);
    protected virtual bool GetAudioParameters(IWebBrowser chromiumWebBrowser, IBrowser browser, AudioParameters& parameters);
    private sealed virtual override void CefSharp.IAudioHandler.OnAudioStreamStarted(IWebBrowser chromiumWebBrowser, IBrowser browser, AudioParameters parameters, int channels);
    protected virtual void OnAudioStreamStarted(IWebBrowser chromiumWebBrowser, IBrowser browser, AudioParameters parameters, int channels);
    private sealed virtual override void CefSharp.IAudioHandler.OnAudioStreamPacket(IWebBrowser chromiumWebBrowser, IBrowser browser, IntPtr data, int noOfFrames, long pts);
    protected virtual void OnAudioStreamPacket(IWebBrowser chromiumWebBrowser, IBrowser browser, IntPtr data, int noOfFrames, long pts);
    private sealed virtual override void CefSharp.IAudioHandler.OnAudioStreamStopped(IWebBrowser chromiumWebBrowser, IBrowser browser);
    protected virtual void OnAudioStreamStopped(IWebBrowser chromiumWebBrowser, IBrowser browser);
    private sealed virtual override void CefSharp.IAudioHandler.OnAudioStreamError(IWebBrowser chromiumWebBrowser, IBrowser browser, string errorMessage);
    protected virtual void OnAudioStreamError(IWebBrowser chromiumWebBrowser, IBrowser browser, string errorMessage);
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
}
public class CefSharp.Handler.BrowserProcessHandler : object {
    private bool isDisposed;
    public bool IsDisposed { get; }
    private sealed virtual override void CefSharp.IBrowserProcessHandler.OnContextInitialized();
    protected virtual void OnContextInitialized();
    private sealed virtual override void CefSharp.IBrowserProcessHandler.OnScheduleMessagePumpWork(long delay);
    protected virtual void OnScheduleMessagePumpWork(long delay);
    private sealed virtual override bool CefSharp.IBrowserProcessHandler.OnAlreadyRunningAppRelaunch(IReadOnlyDictionary`2<string, string> commandLine, string currentDirectory);
    protected virtual bool OnAlreadyRunningAppRelaunch(IReadOnlyDictionary`2<string, string> commandLine, string currentDirectory);
    public bool get_IsDisposed();
    protected virtual void Dispose(bool disposing);
    private sealed virtual override void System.IDisposable.Dispose();
}
public class CefSharp.Handler.ContextMenuHandler : object {
    private sealed virtual override void CefSharp.IContextMenuHandler.OnBeforeContextMenu(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame, IContextMenuParams parameters, IMenuModel model);
    protected virtual void OnBeforeContextMenu(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame, IContextMenuParams parameters, IMenuModel model);
    private sealed virtual override bool CefSharp.IContextMenuHandler.OnContextMenuCommand(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame, IContextMenuParams parameters, CefMenuCommand commandId, CefEventFlags eventFlags);
    protected virtual bool OnContextMenuCommand(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame, IContextMenuParams parameters, CefMenuCommand commandId, CefEventFlags eventFlags);
    private sealed virtual override void CefSharp.IContextMenuHandler.OnContextMenuDismissed(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame);
    protected virtual void OnContextMenuDismissed(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame);
    private sealed virtual override bool CefSharp.IContextMenuHandler.RunContextMenu(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame, IContextMenuParams parameters, IMenuModel model, IRunContextMenuCallback callback);
    protected virtual bool RunContextMenu(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame, IContextMenuParams parameters, IMenuModel model, IRunContextMenuCallback callback);
}
public class CefSharp.Handler.CookieAccessFilter : object {
    private sealed virtual override bool CefSharp.ICookieAccessFilter.CanSendCookie(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame, IRequest request, Cookie cookie);
    protected virtual bool CanSendCookie(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame, IRequest request, Cookie cookie);
    private sealed virtual override bool CefSharp.ICookieAccessFilter.CanSaveCookie(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame, IRequest request, IResponse response, Cookie cookie);
    protected virtual bool CanSaveCookie(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame, IRequest request, IResponse response, Cookie cookie);
}
public class CefSharp.Handler.DialogHandler : object {
    private sealed virtual override bool CefSharp.IDialogHandler.OnFileDialog(IWebBrowser chromiumWebBrowser, IBrowser browser, CefFileDialogMode mode, string title, string defaultFilePath, IReadOnlyCollection`1<string> acceptFilters, IReadOnlyCollection`1<string> acceptExtensions, IReadOnlyCollection`1<string> acceptDescriptions, IFileDialogCallback callback);
    protected virtual bool OnFileDialog(IWebBrowser chromiumWebBrowser, IBrowser browser, CefFileDialogMode mode, string title, string defaultFilePath, IReadOnlyCollection`1<string> acceptFilters, IReadOnlyCollection`1<string> acceptExtensions, IReadOnlyCollection`1<string> acceptDescriptions, IFileDialogCallback callback);
}
public class CefSharp.Handler.DisplayHandler : object {
    private sealed virtual override void CefSharp.IDisplayHandler.OnAddressChanged(IWebBrowser chromiumWebBrowser, AddressChangedEventArgs addressChangedArgs);
    protected virtual void OnAddressChanged(IWebBrowser chromiumWebBrowser, AddressChangedEventArgs addressChangedArgs);
    private sealed virtual override bool CefSharp.IDisplayHandler.OnAutoResize(IWebBrowser chromiumWebBrowser, IBrowser browser, Size newSize);
    protected virtual bool OnAutoResize(IWebBrowser chromiumWebBrowser, IBrowser browser, Size newSize);
    private sealed virtual override bool CefSharp.IDisplayHandler.OnCursorChange(IWebBrowser chromiumWebBrowser, IBrowser browser, IntPtr cursor, CursorType type, CursorInfo customCursorInfo);
    protected virtual bool OnCursorChange(IWebBrowser chromiumWebBrowser, IBrowser browser, IntPtr cursor, CursorType type, CursorInfo customCursorInfo);
    private sealed virtual override void CefSharp.IDisplayHandler.OnTitleChanged(IWebBrowser chromiumWebBrowser, TitleChangedEventArgs titleChangedArgs);
    protected virtual void OnTitleChanged(IWebBrowser chromiumWebBrowser, TitleChangedEventArgs titleChangedArgs);
    private sealed virtual override void CefSharp.IDisplayHandler.OnFaviconUrlChange(IWebBrowser chromiumWebBrowser, IBrowser browser, IList`1<string> urls);
    protected virtual void OnFaviconUrlChange(IWebBrowser chromiumWebBrowser, IBrowser browser, IList`1<string> urls);
    private sealed virtual override void CefSharp.IDisplayHandler.OnFullscreenModeChange(IWebBrowser chromiumWebBrowser, IBrowser browser, bool fullscreen);
    protected virtual void OnFullscreenModeChange(IWebBrowser chromiumWebBrowser, IBrowser browser, bool fullscreen);
    private sealed virtual override void CefSharp.IDisplayHandler.OnLoadingProgressChange(IWebBrowser chromiumWebBrowser, IBrowser browser, double progress);
    protected virtual void OnLoadingProgressChange(IWebBrowser chromiumWebBrowser, IBrowser browser, double progress);
    private sealed virtual override bool CefSharp.IDisplayHandler.OnTooltipChanged(IWebBrowser chromiumWebBrowser, String& text);
    protected virtual bool OnTooltipChanged(IWebBrowser chromiumWebBrowser, String& text);
    private sealed virtual override void CefSharp.IDisplayHandler.OnStatusMessage(IWebBrowser chromiumWebBrowser, StatusMessageEventArgs statusMessageArgs);
    protected virtual void OnStatusMessage(IWebBrowser chromiumWebBrowser, StatusMessageEventArgs statusMessageArgs);
    private sealed virtual override bool CefSharp.IDisplayHandler.OnConsoleMessage(IWebBrowser chromiumWebBrowser, ConsoleMessageEventArgs consoleMessageArgs);
    protected virtual bool OnConsoleMessage(IWebBrowser chromiumWebBrowser, ConsoleMessageEventArgs consoleMessageArgs);
}
public class CefSharp.Handler.DownloadHandler : object {
    private sealed virtual override bool CefSharp.IDownloadHandler.CanDownload(IWebBrowser chromiumWebBrowser, IBrowser browser, string url, string requestMethod);
    protected virtual bool CanDownload(IWebBrowser chromiumWebBrowser, IBrowser browser, string url, string requestMethod);
    private sealed virtual override bool CefSharp.IDownloadHandler.OnBeforeDownload(IWebBrowser chromiumWebBrowser, IBrowser browser, DownloadItem downloadItem, IBeforeDownloadCallback callback);
    protected virtual bool OnBeforeDownload(IWebBrowser chromiumWebBrowser, IBrowser browser, DownloadItem downloadItem, IBeforeDownloadCallback callback);
    private sealed virtual override void CefSharp.IDownloadHandler.OnDownloadUpdated(IWebBrowser chromiumWebBrowser, IBrowser browser, DownloadItem downloadItem, IDownloadItemCallback callback);
    protected virtual void OnDownloadUpdated(IWebBrowser chromiumWebBrowser, IBrowser browser, DownloadItem downloadItem, IDownloadItemCallback callback);
}
public class CefSharp.Handler.DragHandler : object {
    private sealed virtual override bool CefSharp.IDragHandler.OnDragEnter(IWebBrowser chromiumWebBrowser, IBrowser browser, IDragData dragData, DragOperationsMask mask);
    protected virtual bool OnDragEnter(IWebBrowser chromiumWebBrowser, IBrowser browser, IDragData dragData, DragOperationsMask mask);
    private sealed virtual override void CefSharp.IDragHandler.OnDraggableRegionsChanged(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame, IList`1<DraggableRegion> regions);
    protected virtual void OnDraggableRegionsChanged(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame, IList`1<DraggableRegion> regions);
}
public class CefSharp.Handler.FindHandler : object {
    private sealed virtual override void CefSharp.IFindHandler.OnFindResult(IWebBrowser chromiumWebBrowser, IBrowser browser, int identifier, int count, Rect selectionRect, int activeMatchOrdinal, bool finalUpdate);
    protected virtual void OnFindResult(IWebBrowser chromiumWebBrowser, IBrowser browser, int identifier, int count, Rect selectionRect, int activeMatchOrdinal, bool finalUpdate);
}
public class CefSharp.Handler.FocusHandler : object {
    private sealed virtual override void CefSharp.IFocusHandler.OnGotFocus(IWebBrowser chromiumWebBrowser, IBrowser browser);
    protected virtual void OnGotFocus(IWebBrowser chromiumWebBrowser, IBrowser browser);
    private sealed virtual override bool CefSharp.IFocusHandler.OnSetFocus(IWebBrowser chromiumWebBrowser, IBrowser browser, CefFocusSource source);
    protected virtual bool OnSetFocus(IWebBrowser chromiumWebBrowser, IBrowser browser, CefFocusSource source);
    private sealed virtual override void CefSharp.IFocusHandler.OnTakeFocus(IWebBrowser chromiumWebBrowser, IBrowser browser, bool next);
    protected virtual void OnTakeFocus(IWebBrowser chromiumWebBrowser, IBrowser browser, bool next);
}
public class CefSharp.Handler.FrameHandler : object {
    private Dictionary`2<string, IFrame> frames;
    private sealed virtual override void CefSharp.IFrameHandler.OnFrameAttached(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame, bool reattached);
    protected virtual void OnFrameAttached(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame, bool reattached);
    private sealed virtual override void CefSharp.IFrameHandler.OnFrameCreated(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame);
    protected virtual void OnFrameCreated(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame);
    private sealed virtual override void CefSharp.IFrameHandler.OnFrameDetached(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame);
    protected virtual void OnFrameDetached(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame);
    private sealed virtual override void CefSharp.IFrameHandler.OnMainFrameChanged(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame oldFrame, IFrame newFrame);
    protected virtual void OnMainFrameChanged(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame oldFrame, IFrame newFrame);
    private IFrame GetFrameById(string frameId);
}
public class CefSharp.Handler.JsDialogHandler : object {
    private sealed virtual override bool CefSharp.IJsDialogHandler.OnJSDialog(IWebBrowser chromiumWebBrowser, IBrowser browser, string originUrl, CefJsDialogType dialogType, string messageText, string defaultPromptText, IJsDialogCallback callback, Boolean& suppressMessage);
    protected virtual bool OnJSDialog(IWebBrowser chromiumWebBrowser, IBrowser browser, string originUrl, CefJsDialogType dialogType, string messageText, string defaultPromptText, IJsDialogCallback callback, Boolean& suppressMessage);
    private sealed virtual override bool CefSharp.IJsDialogHandler.OnBeforeUnloadDialog(IWebBrowser chromiumWebBrowser, IBrowser browser, string messageText, bool isReload, IJsDialogCallback callback);
    protected virtual bool OnBeforeUnloadDialog(IWebBrowser chromiumWebBrowser, IBrowser browser, string messageText, bool isReload, IJsDialogCallback callback);
    private sealed virtual override void CefSharp.IJsDialogHandler.OnResetDialogState(IWebBrowser chromiumWebBrowser, IBrowser browser);
    protected virtual void OnResetDialogState(IWebBrowser chromiumWebBrowser, IBrowser browser);
    private sealed virtual override void CefSharp.IJsDialogHandler.OnDialogClosed(IWebBrowser chromiumWebBrowser, IBrowser browser);
    protected virtual void OnDialogClosed(IWebBrowser chromiumWebBrowser, IBrowser browser);
}
public class CefSharp.Handler.KeyboardHandler : object {
    private sealed virtual override bool CefSharp.IKeyboardHandler.OnPreKeyEvent(IWebBrowser chromiumWebBrowser, IBrowser browser, KeyType type, int windowsKeyCode, int nativeKeyCode, CefEventFlags modifiers, bool isSystemKey, Boolean& isKeyboardShortcut);
    protected virtual bool OnPreKeyEvent(IWebBrowser chromiumWebBrowser, IBrowser browser, KeyType type, int windowsKeyCode, int nativeKeyCode, CefEventFlags modifiers, bool isSystemKey, Boolean& isKeyboardShortcut);
    private sealed virtual override bool CefSharp.IKeyboardHandler.OnKeyEvent(IWebBrowser chromiumWebBrowser, IBrowser browser, KeyType type, int windowsKeyCode, int nativeKeyCode, CefEventFlags modifiers, bool isSystemKey);
    protected virtual bool OnKeyEvent(IWebBrowser chromiumWebBrowser, IBrowser browser, KeyType type, int windowsKeyCode, int nativeKeyCode, CefEventFlags modifiers, bool isSystemKey);
}
public class CefSharp.Handler.LifeSpanHandler : object {
    private sealed virtual override bool CefSharp.ILifeSpanHandler.DoClose(IWebBrowser chromiumWebBrowser, IBrowser browser);
    protected virtual bool DoClose(IWebBrowser chromiumWebBrowser, IBrowser browser);
    private sealed virtual override void CefSharp.ILifeSpanHandler.OnAfterCreated(IWebBrowser chromiumWebBrowser, IBrowser browser);
    protected virtual void OnAfterCreated(IWebBrowser chromiumWebBrowser, IBrowser browser);
    private sealed virtual override void CefSharp.ILifeSpanHandler.OnBeforeClose(IWebBrowser chromiumWebBrowser, IBrowser browser);
    protected virtual void OnBeforeClose(IWebBrowser chromiumWebBrowser, IBrowser browser);
    private sealed virtual override bool CefSharp.ILifeSpanHandler.OnBeforePopup(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame, string targetUrl, string targetFrameName, WindowOpenDisposition targetDisposition, bool userGesture, IPopupFeatures popupFeatures, IWindowInfo windowInfo, IBrowserSettings browserSettings, Boolean& noJavascriptAccess, IWebBrowser& newBrowser);
    protected virtual bool OnBeforePopup(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame, string targetUrl, string targetFrameName, WindowOpenDisposition targetDisposition, bool userGesture, IPopupFeatures popupFeatures, IWindowInfo windowInfo, IBrowserSettings browserSettings, Boolean& noJavascriptAccess, IWebBrowser& newBrowser);
}
public class CefSharp.Handler.LoadHandler : object {
    private sealed virtual override void CefSharp.ILoadHandler.OnLoadingStateChange(IWebBrowser chromiumWebBrowser, LoadingStateChangedEventArgs loadingStateChangedArgs);
    protected virtual void OnLoadingStateChange(IWebBrowser chromiumWebBrowser, LoadingStateChangedEventArgs loadingStateChangedArgs);
    private sealed virtual override void CefSharp.ILoadHandler.OnFrameLoadStart(IWebBrowser chromiumWebBrowser, FrameLoadStartEventArgs frameLoadStartArgs);
    protected virtual void OnFrameLoadStart(IWebBrowser chromiumWebBrowser, FrameLoadStartEventArgs frameLoadStartArgs);
    private sealed virtual override void CefSharp.ILoadHandler.OnFrameLoadEnd(IWebBrowser chromiumWebBrowser, FrameLoadEndEventArgs frameLoadEndArgs);
    protected virtual void OnFrameLoadEnd(IWebBrowser chromiumWebBrowser, FrameLoadEndEventArgs frameLoadEndArgs);
    private sealed virtual override void CefSharp.ILoadHandler.OnLoadError(IWebBrowser chromiumWebBrowser, LoadErrorEventArgs loadErrorArgs);
    protected virtual void OnLoadError(IWebBrowser chromiumWebBrowser, LoadErrorEventArgs loadErrorArgs);
}
public class CefSharp.Handler.PermissionHandler : object {
    private sealed virtual override bool CefSharp.IPermissionHandler.OnRequestMediaAccessPermission(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame, string requestingOrigin, MediaAccessPermissionType requestedPermissions, IMediaAccessCallback callback);
    protected virtual bool OnRequestMediaAccessPermission(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame, string requestingOrigin, MediaAccessPermissionType requestedPermissions, IMediaAccessCallback callback);
    private sealed virtual override bool CefSharp.IPermissionHandler.OnShowPermissionPrompt(IWebBrowser chromiumWebBrowser, IBrowser browser, ulong promptId, string requestingOrigin, PermissionRequestType requestedPermissions, IPermissionPromptCallback callback);
    protected virtual bool OnShowPermissionPrompt(IWebBrowser chromiumWebBrowser, IBrowser browser, ulong promptId, string requestingOrigin, PermissionRequestType requestedPermissions, IPermissionPromptCallback callback);
    private sealed virtual override void CefSharp.IPermissionHandler.OnDismissPermissionPrompt(IWebBrowser chromiumWebBrowser, IBrowser browser, ulong promptId, PermissionRequestResult result);
    protected virtual void OnDismissPermissionPrompt(IWebBrowser chromiumWebBrowser, IBrowser browser, ulong promptId, PermissionRequestResult result);
}
public class CefSharp.Handler.RequestContextHandler : object {
    private IList`1<KeyValuePair`2<string, object>> preferences;
    private bool requestContextInitialized;
    private Action`1<IRequestContext> onContextInitialziedAction;
    public RequestContextHandler OnInitialize(Action`1<IRequestContext> onContextInitialziedAction);
    public RequestContextHandler SetPreferenceOnContextInitialized(string name, object value);
    public RequestContextHandler SetProxyOnContextInitialized(string host, Nullable`1<int> port);
    public RequestContextHandler SetProxyOnContextInitialized(string scheme, string host, Nullable`1<int> port);
    private sealed virtual override IResourceRequestHandler CefSharp.IRequestContextHandler.GetResourceRequestHandler(IBrowser browser, IFrame frame, IRequest request, bool isNavigation, bool isDownload, string requestInitiator, Boolean& disableDefaultHandling);
    protected virtual IResourceRequestHandler GetResourceRequestHandler(IBrowser browser, IFrame frame, IRequest request, bool isNavigation, bool isDownload, string requestInitiator, Boolean& disableDefaultHandling);
    private sealed virtual override void CefSharp.IRequestContextHandler.OnRequestContextInitialized(IRequestContext requestContext);
    protected virtual void OnRequestContextInitialized(IRequestContext requestContext);
}
public class CefSharp.Handler.RequestHandler : object {
    private sealed virtual override bool CefSharp.IRequestHandler.OnBeforeBrowse(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame, IRequest request, bool userGesture, bool isRedirect);
    protected virtual bool OnBeforeBrowse(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame, IRequest request, bool userGesture, bool isRedirect);
    private sealed virtual override bool CefSharp.IRequestHandler.OnOpenUrlFromTab(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame, string targetUrl, WindowOpenDisposition targetDisposition, bool userGesture);
    protected virtual bool OnOpenUrlFromTab(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame, string targetUrl, WindowOpenDisposition targetDisposition, bool userGesture);
    private sealed virtual override IResourceRequestHandler CefSharp.IRequestHandler.GetResourceRequestHandler(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame, IRequest request, bool isNavigation, bool isDownload, string requestInitiator, Boolean& disableDefaultHandling);
    protected virtual IResourceRequestHandler GetResourceRequestHandler(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame, IRequest request, bool isNavigation, bool isDownload, string requestInitiator, Boolean& disableDefaultHandling);
    private sealed virtual override bool CefSharp.IRequestHandler.GetAuthCredentials(IWebBrowser chromiumWebBrowser, IBrowser browser, string originUrl, bool isProxy, string host, int port, string realm, string scheme, IAuthCallback callback);
    protected virtual bool GetAuthCredentials(IWebBrowser chromiumWebBrowser, IBrowser browser, string originUrl, bool isProxy, string host, int port, string realm, string scheme, IAuthCallback callback);
    private sealed virtual override bool CefSharp.IRequestHandler.OnCertificateError(IWebBrowser chromiumWebBrowser, IBrowser browser, CefErrorCode errorCode, string requestUrl, ISslInfo sslInfo, IRequestCallback callback);
    protected virtual bool OnCertificateError(IWebBrowser chromiumWebBrowser, IBrowser browser, CefErrorCode errorCode, string requestUrl, ISslInfo sslInfo, IRequestCallback callback);
    private sealed virtual override bool CefSharp.IRequestHandler.OnSelectClientCertificate(IWebBrowser chromiumWebBrowser, IBrowser browser, bool isProxy, string host, int port, X509Certificate2Collection certificates, ISelectClientCertificateCallback callback);
    protected virtual bool OnSelectClientCertificate(IWebBrowser chromiumWebBrowser, IBrowser browser, bool isProxy, string host, int port, X509Certificate2Collection certificates, ISelectClientCertificateCallback callback);
    private sealed virtual override void CefSharp.IRequestHandler.OnRenderViewReady(IWebBrowser chromiumWebBrowser, IBrowser browser);
    protected virtual void OnRenderViewReady(IWebBrowser chromiumWebBrowser, IBrowser browser);
    private sealed virtual override void CefSharp.IRequestHandler.OnRenderProcessTerminated(IWebBrowser chromiumWebBrowser, IBrowser browser, CefTerminationStatus status, int errorCode, string errorMessage);
    protected virtual void OnRenderProcessTerminated(IWebBrowser chromiumWebBrowser, IBrowser browser, CefTerminationStatus status, int errorCode, string errorMessage);
    private sealed virtual override void CefSharp.IRequestHandler.OnDocumentAvailableInMainFrame(IWebBrowser chromiumWebBrowser, IBrowser browser);
    protected virtual void OnDocumentAvailableInMainFrame(IWebBrowser chromiumWebBrowser, IBrowser browser);
}
public class CefSharp.Handler.ResourceRequestHandler : object {
    private sealed virtual override ICookieAccessFilter CefSharp.IResourceRequestHandler.GetCookieAccessFilter(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame, IRequest request);
    protected virtual ICookieAccessFilter GetCookieAccessFilter(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame, IRequest request);
    private sealed virtual override IResourceHandler CefSharp.IResourceRequestHandler.GetResourceHandler(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame, IRequest request);
    protected virtual IResourceHandler GetResourceHandler(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame, IRequest request);
    private sealed virtual override IResponseFilter CefSharp.IResourceRequestHandler.GetResourceResponseFilter(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame, IRequest request, IResponse response);
    protected virtual IResponseFilter GetResourceResponseFilter(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame, IRequest request, IResponse response);
    private sealed virtual override CefReturnValue CefSharp.IResourceRequestHandler.OnBeforeResourceLoad(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame, IRequest request, IRequestCallback callback);
    protected virtual CefReturnValue OnBeforeResourceLoad(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame, IRequest request, IRequestCallback callback);
    private sealed virtual override bool CefSharp.IResourceRequestHandler.OnProtocolExecution(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame, IRequest request);
    protected virtual bool OnProtocolExecution(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame, IRequest request);
    private sealed virtual override void CefSharp.IResourceRequestHandler.OnResourceLoadComplete(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame, IRequest request, IResponse response, UrlRequestStatus status, long receivedContentLength);
    protected virtual void OnResourceLoadComplete(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame, IRequest request, IResponse response, UrlRequestStatus status, long receivedContentLength);
    private sealed virtual override void CefSharp.IResourceRequestHandler.OnResourceRedirect(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame, IRequest request, IResponse response, String& newUrl);
    protected virtual void OnResourceRedirect(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame, IRequest request, IResponse response, String& newUrl);
    private sealed virtual override bool CefSharp.IResourceRequestHandler.OnResourceResponse(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame, IRequest request, IResponse response);
    protected virtual bool OnResourceResponse(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame, IRequest request, IResponse response);
    protected virtual void Dispose();
    private sealed virtual override void System.IDisposable.Dispose();
}
public interface CefSharp.IAccessibilityHandler {
    public abstract virtual void OnAccessibilityLocationChange(IValue value);
    public abstract virtual void OnAccessibilityTreeChange(IValue value);
}
public interface CefSharp.IApp {
    public IBrowserProcessHandler BrowserProcessHandler { get; }
    public abstract virtual IBrowserProcessHandler get_BrowserProcessHandler();
    public abstract virtual void OnRegisterCustomSchemes(ISchemeRegistrar registrar);
}
public interface CefSharp.IAudioHandler {
    public abstract virtual bool GetAudioParameters(IWebBrowser chromiumWebBrowser, IBrowser browser, AudioParameters& parameters);
    public abstract virtual void OnAudioStreamStarted(IWebBrowser chromiumWebBrowser, IBrowser browser, AudioParameters parameters, int channels);
    public abstract virtual void OnAudioStreamPacket(IWebBrowser chromiumWebBrowser, IBrowser browser, IntPtr data, int noOfFrames, long pts);
    public abstract virtual void OnAudioStreamStopped(IWebBrowser chromiumWebBrowser, IBrowser browser);
    public abstract virtual void OnAudioStreamError(IWebBrowser chromiumWebBrowser, IBrowser browser, string errorMessage);
}
public interface CefSharp.IAuthCallback {
    public bool IsDisposed { get; }
    public abstract virtual void Continue(string username, string password);
    public abstract virtual void Cancel();
    public abstract virtual bool get_IsDisposed();
}
public interface CefSharp.IBeforeDownloadCallback {
    public bool IsDisposed { get; }
    public abstract virtual void Continue(string downloadPath, bool showDialog);
    public abstract virtual bool get_IsDisposed();
}
public interface CefSharp.IBrowser {
    public bool IsValid { get; }
    public bool CanGoBack { get; }
    public bool CanGoForward { get; }
    public bool IsLoading { get; }
    public int Identifier { get; }
    public bool IsPopup { get; }
    public bool HasDocument { get; }
    public IFrame MainFrame { get; }
    public IFrame FocusedFrame { get; }
    public bool IsDisposed { get; }
    public abstract virtual bool get_IsValid();
    public abstract virtual IBrowserHost GetHost();
    public abstract virtual bool get_CanGoBack();
    public abstract virtual void GoBack();
    public abstract virtual bool get_CanGoForward();
    public abstract virtual void GoForward();
    public abstract virtual bool get_IsLoading();
    public abstract virtual void CloseBrowser(bool forceClose);
    public abstract virtual void Reload(bool ignoreCache);
    public abstract virtual void StopLoad();
    public abstract virtual int get_Identifier();
    public abstract virtual bool IsSame(IBrowser that);
    public abstract virtual bool get_IsPopup();
    public abstract virtual bool get_HasDocument();
    public abstract virtual IFrame get_MainFrame();
    public abstract virtual IFrame get_FocusedFrame();
    public abstract virtual IFrame GetFrameByIdentifier(string identifier);
    public abstract virtual IFrame GetFrameByName(string name);
    public abstract virtual int GetFrameCount();
    public abstract virtual List`1<string> GetFrameIdentifiers();
    public abstract virtual List`1<string> GetFrameNames();
    public abstract virtual bool get_IsDisposed();
    public abstract virtual IReadOnlyCollection`1<IFrame> GetAllFrames();
}
public interface CefSharp.IBrowserHost {
    public bool HasDevTools { get; }
    public IRequestContext RequestContext { get; }
    public int WindowlessFrameRate { get; public set; }
    public bool WindowRenderingDisabled { get; }
    public bool IsAudioMuted { get; }
    public bool IsDisposed { get; }
    public abstract virtual void AddWordToDictionary(string word);
    public abstract virtual void CloseBrowser(bool forceClose);
    public abstract virtual bool TryCloseBrowser();
    public abstract virtual void CloseDevTools();
    public abstract virtual bool get_HasDevTools();
    public abstract virtual bool SendDevToolsMessage(string messageAsJson);
    public abstract virtual int ExecuteDevToolsMethod(int messageId, string method, string paramsAsJson);
    public abstract virtual int ExecuteDevToolsMethod(int messageId, string method, IDictionary`2<string, object> parameters);
    public abstract virtual int GetNextDevToolsMessageId();
    public abstract virtual IRegistration AddDevToolsMessageObserver(IDevToolsMessageObserver observer);
    public abstract virtual void DragTargetDragEnter(IDragData dragData, MouseEvent mouseEvent, DragOperationsMask allowedOperations);
    public abstract virtual void DragTargetDragOver(MouseEvent mouseEvent, DragOperationsMask allowedOperations);
    public abstract virtual void DragTargetDragDrop(MouseEvent mouseEvent);
    public abstract virtual void DragSourceEndedAt(int x, int y, DragOperationsMask op);
    public abstract virtual void DragTargetDragLeave();
    public abstract virtual void DragSourceSystemDragEnded();
    public abstract virtual void Find(string searchText, bool forward, bool matchCase, bool findNext);
    public abstract virtual IntPtr GetOpenerWindowHandle();
    public abstract virtual IntPtr GetWindowHandle();
    public abstract virtual double GetZoomLevel();
    public abstract virtual Task`1<double> GetZoomLevelAsync();
    public abstract virtual void Invalidate(PaintElementType type);
    public abstract virtual void ImeSetComposition(string text, CompositionUnderline[] underlines, Nullable`1<Range> replacementRange, Nullable`1<Range> selectionRange);
    public abstract virtual void ImeCommitText(string text, Nullable`1<Range> replacementRange, int relativeCursorPos);
    public abstract virtual void ImeFinishComposingText(bool keepSelection);
    public abstract virtual void ImeCancelComposition();
    public abstract virtual void NotifyMoveOrResizeStarted();
    public abstract virtual void NotifyScreenInfoChanged();
    public abstract virtual void Print();
    public abstract virtual void PrintToPdf(string path, PdfPrintSettings settings, IPrintToPdfCallback callback);
    public abstract virtual void ReplaceMisspelling(string word);
    public abstract virtual void RunFileDialog(CefFileDialogMode mode, string title, string defaultFilePath, IList`1<string> acceptFilters, IRunFileDialogCallback callback);
    public abstract virtual IRequestContext get_RequestContext();
    public abstract virtual void SendExternalBeginFrame();
    public abstract virtual void SendCaptureLostEvent();
    public abstract virtual void SendFocusEvent(bool setFocus);
    public abstract virtual void SendKeyEvent(KeyEvent keyEvent);
    public abstract virtual void SendKeyEvent(int message, int wParam, int lParam);
    public abstract virtual void SendMouseClickEvent(MouseEvent mouseEvent, MouseButtonType mouseButtonType, bool mouseUp, int clickCount);
    public abstract virtual void SendMouseWheelEvent(MouseEvent mouseEvent, int deltaX, int deltaY);
    public abstract virtual void SendTouchEvent(TouchEvent evt);
    public abstract virtual void SetAccessibilityState(CefState accessibilityState);
    public abstract virtual void SetAutoResizeEnabled(bool enabled, Size minSize, Size maxSize);
    public abstract virtual void SetFocus(bool focus);
    public abstract virtual void SetZoomLevel(double zoomLevel);
    public abstract virtual void ShowDevTools(IWindowInfo windowInfo, int inspectElementAtX, int inspectElementAtY);
    public abstract virtual void StartDownload(string url);
    public abstract virtual void StopFinding(bool clearSelection);
    public abstract virtual void SendMouseMoveEvent(MouseEvent mouseEvent, bool mouseLeave);
    public abstract virtual void WasHidden(bool hidden);
    public abstract virtual void WasResized();
    public abstract virtual void GetNavigationEntries(INavigationEntryVisitor visitor, bool currentOnly);
    public abstract virtual NavigationEntry GetVisibleNavigationEntry();
    public abstract virtual int get_WindowlessFrameRate();
    public abstract virtual void set_WindowlessFrameRate(int value);
    public abstract virtual bool get_WindowRenderingDisabled();
    public abstract virtual void SetAudioMuted(bool mute);
    public abstract virtual bool get_IsAudioMuted();
    public abstract virtual bool get_IsDisposed();
}
public interface CefSharp.IBrowserProcessHandler {
    public abstract virtual void OnContextInitialized();
    public abstract virtual void OnScheduleMessagePumpWork(long delay);
    public abstract virtual bool OnAlreadyRunningAppRelaunch(IReadOnlyDictionary`2<string, string> commandLine, string currentDirectory);
}
public interface CefSharp.IBrowserSettings {
    public string StandardFontFamily { get; public set; }
    public string FixedFontFamily { get; public set; }
    public string SerifFontFamily { get; public set; }
    public string SansSerifFontFamily { get; public set; }
    public string CursiveFontFamily { get; public set; }
    public string FantasyFontFamily { get; public set; }
    public int DefaultFontSize { get; public set; }
    public int DefaultFixedFontSize { get; public set; }
    public int MinimumFontSize { get; public set; }
    public int MinimumLogicalFontSize { get; public set; }
    public string DefaultEncoding { get; public set; }
    public CefState RemoteFonts { get; public set; }
    public CefState Javascript { get; public set; }
    public CefState JavascriptCloseWindows { get; public set; }
    public CefState JavascriptAccessClipboard { get; public set; }
    public CefState JavascriptDomPaste { get; public set; }
    public CefState ImageLoading { get; public set; }
    public CefState ImageShrinkStandaloneToFit { get; public set; }
    public CefState TextAreaResize { get; public set; }
    public CefState TabToLinks { get; public set; }
    public CefState LocalStorage { get; public set; }
    public CefState Databases { get; public set; }
    public CefState WebGl { get; public set; }
    public UInt32 BackgroundColor { get; public set; }
    public int WindowlessFrameRate { get; public set; }
    public bool IsDisposed { get; }
    public bool AutoDispose { get; }
    public abstract virtual string get_StandardFontFamily();
    public abstract virtual void set_StandardFontFamily(string value);
    public abstract virtual string get_FixedFontFamily();
    public abstract virtual void set_FixedFontFamily(string value);
    public abstract virtual string get_SerifFontFamily();
    public abstract virtual void set_SerifFontFamily(string value);
    public abstract virtual string get_SansSerifFontFamily();
    public abstract virtual void set_SansSerifFontFamily(string value);
    public abstract virtual string get_CursiveFontFamily();
    public abstract virtual void set_CursiveFontFamily(string value);
    public abstract virtual string get_FantasyFontFamily();
    public abstract virtual void set_FantasyFontFamily(string value);
    public abstract virtual int get_DefaultFontSize();
    public abstract virtual void set_DefaultFontSize(int value);
    public abstract virtual int get_DefaultFixedFontSize();
    public abstract virtual void set_DefaultFixedFontSize(int value);
    public abstract virtual int get_MinimumFontSize();
    public abstract virtual void set_MinimumFontSize(int value);
    public abstract virtual int get_MinimumLogicalFontSize();
    public abstract virtual void set_MinimumLogicalFontSize(int value);
    public abstract virtual string get_DefaultEncoding();
    public abstract virtual void set_DefaultEncoding(string value);
    public abstract virtual CefState get_RemoteFonts();
    public abstract virtual void set_RemoteFonts(CefState value);
    public abstract virtual CefState get_Javascript();
    public abstract virtual void set_Javascript(CefState value);
    public abstract virtual CefState get_JavascriptCloseWindows();
    public abstract virtual void set_JavascriptCloseWindows(CefState value);
    public abstract virtual CefState get_JavascriptAccessClipboard();
    public abstract virtual void set_JavascriptAccessClipboard(CefState value);
    public abstract virtual CefState get_JavascriptDomPaste();
    public abstract virtual void set_JavascriptDomPaste(CefState value);
    public abstract virtual CefState get_ImageLoading();
    public abstract virtual void set_ImageLoading(CefState value);
    public abstract virtual CefState get_ImageShrinkStandaloneToFit();
    public abstract virtual void set_ImageShrinkStandaloneToFit(CefState value);
    public abstract virtual CefState get_TextAreaResize();
    public abstract virtual void set_TextAreaResize(CefState value);
    public abstract virtual CefState get_TabToLinks();
    public abstract virtual void set_TabToLinks(CefState value);
    public abstract virtual CefState get_LocalStorage();
    public abstract virtual void set_LocalStorage(CefState value);
    public abstract virtual CefState get_Databases();
    public abstract virtual void set_Databases(CefState value);
    public abstract virtual CefState get_WebGl();
    public abstract virtual void set_WebGl(CefState value);
    public abstract virtual UInt32 get_BackgroundColor();
    public abstract virtual void set_BackgroundColor(UInt32 value);
    public abstract virtual int get_WindowlessFrameRate();
    public abstract virtual void set_WindowlessFrameRate(int value);
    public abstract virtual bool get_IsDisposed();
    public abstract virtual bool get_AutoDispose();
    [EditorBrowsableAttribute("1")]
public abstract virtual IBrowserSettings UnWrap();
}
public interface CefSharp.ICallback {
    public bool IsDisposed { get; }
    public abstract virtual void Continue();
    public abstract virtual void Cancel();
    public abstract virtual bool get_IsDisposed();
}
public interface CefSharp.IChromiumWebBrowserBase {
    public bool IsBrowserInitialized { get; }
    public bool IsDisposed { get; }
    public bool IsLoading { get; }
    public bool CanGoBack { get; }
    public bool CanGoForward { get; }
    public string Address { get; }
    public IBrowser BrowserCore { get; }
    [CompilerGeneratedAttribute]
public abstract virtual void add_ConsoleMessage(EventHandler`1<ConsoleMessageEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ConsoleMessage(EventHandler`1<ConsoleMessageEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_StatusMessage(EventHandler`1<StatusMessageEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_StatusMessage(EventHandler`1<StatusMessageEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_FrameLoadStart(EventHandler`1<FrameLoadStartEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_FrameLoadStart(EventHandler`1<FrameLoadStartEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_FrameLoadEnd(EventHandler`1<FrameLoadEndEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_FrameLoadEnd(EventHandler`1<FrameLoadEndEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_LoadError(EventHandler`1<LoadErrorEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_LoadError(EventHandler`1<LoadErrorEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_LoadingStateChanged(EventHandler`1<LoadingStateChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_LoadingStateChanged(EventHandler`1<LoadingStateChangedEventArgs> value);
    public abstract virtual void LoadUrl(string url);
    public abstract virtual Task`1<LoadUrlAsyncResponse> LoadUrlAsync(string url);
    public abstract virtual Task`1<WaitForNavigationAsyncResponse> WaitForNavigationAsync(Nullable`1<TimeSpan> timeout, CancellationToken cancellationToken);
    public abstract virtual bool get_IsBrowserInitialized();
    public abstract virtual bool get_IsDisposed();
    public abstract virtual bool get_IsLoading();
    public abstract virtual bool get_CanGoBack();
    public abstract virtual bool get_CanGoForward();
    public abstract virtual string get_Address();
    public abstract virtual bool Focus();
    public abstract virtual IBrowser get_BrowserCore();
}
public interface CefSharp.ICompletionCallback {
    public bool IsDisposed { get; }
    public abstract virtual void OnComplete();
    public abstract virtual bool get_IsDisposed();
}
public interface CefSharp.IContextMenuHandler {
    public abstract virtual void OnBeforeContextMenu(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame, IContextMenuParams parameters, IMenuModel model);
    public abstract virtual bool OnContextMenuCommand(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame, IContextMenuParams parameters, CefMenuCommand commandId, CefEventFlags eventFlags);
    public abstract virtual void OnContextMenuDismissed(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame);
    public abstract virtual bool RunContextMenu(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame, IContextMenuParams parameters, IMenuModel model, IRunContextMenuCallback callback);
}
public interface CefSharp.IContextMenuParams {
    public int YCoord { get; }
    public int XCoord { get; }
    public ContextMenuType TypeFlags { get; }
    public string LinkUrl { get; }
    public string UnfilteredLinkUrl { get; }
    public string SourceUrl { get; }
    public bool HasImageContents { get; }
    public string PageUrl { get; }
    public string FrameUrl { get; }
    public string FrameCharset { get; }
    public ContextMenuMediaType MediaType { get; }
    public ContextMenuMediaState MediaStateFlags { get; }
    public string SelectionText { get; }
    public string MisspelledWord { get; }
    public List`1<string> DictionarySuggestions { get; }
    public bool IsEditable { get; }
    public bool IsSpellCheckEnabled { get; }
    public ContextMenuEditState EditStateFlags { get; }
    public bool IsCustomMenu { get; }
    public bool IsDisposed { get; }
    public abstract virtual int get_YCoord();
    public abstract virtual int get_XCoord();
    public abstract virtual ContextMenuType get_TypeFlags();
    public abstract virtual string get_LinkUrl();
    public abstract virtual string get_UnfilteredLinkUrl();
    public abstract virtual string get_SourceUrl();
    public abstract virtual bool get_HasImageContents();
    public abstract virtual string get_PageUrl();
    public abstract virtual string get_FrameUrl();
    public abstract virtual string get_FrameCharset();
    public abstract virtual ContextMenuMediaType get_MediaType();
    public abstract virtual ContextMenuMediaState get_MediaStateFlags();
    public abstract virtual string get_SelectionText();
    public abstract virtual string get_MisspelledWord();
    public abstract virtual List`1<string> get_DictionarySuggestions();
    public abstract virtual bool get_IsEditable();
    public abstract virtual bool get_IsSpellCheckEnabled();
    public abstract virtual ContextMenuEditState get_EditStateFlags();
    public abstract virtual bool get_IsCustomMenu();
    public abstract virtual bool get_IsDisposed();
}
public interface CefSharp.ICookieAccessFilter {
    public abstract virtual bool CanSendCookie(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame, IRequest request, Cookie cookie);
    public abstract virtual bool CanSaveCookie(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame, IRequest request, IResponse response, Cookie cookie);
}
public interface CefSharp.ICookieManager {
    public bool IsDisposed { get; }
    public abstract virtual bool DeleteCookies(string url, string name, IDeleteCookiesCallback callback);
    public abstract virtual bool SetCookie(string url, Cookie cookie, ISetCookieCallback callback);
    public abstract virtual bool VisitAllCookies(ICookieVisitor visitor);
    public abstract virtual bool VisitUrlCookies(string url, bool includeHttpOnly, ICookieVisitor visitor);
    public abstract virtual bool FlushStore(ICompletionCallback callback);
    public abstract virtual bool get_IsDisposed();
}
public interface CefSharp.ICookieVisitor {
    public abstract virtual bool Visit(Cookie cookie, int count, int total, Boolean& deleteCookie);
}
public interface CefSharp.IDeleteCookiesCallback {
    public bool IsDisposed { get; }
    public abstract virtual void OnComplete(int numDeleted);
    public abstract virtual bool get_IsDisposed();
}
public interface CefSharp.IDialogHandler {
    public abstract virtual bool OnFileDialog(IWebBrowser chromiumWebBrowser, IBrowser browser, CefFileDialogMode mode, string title, string defaultFilePath, IReadOnlyCollection`1<string> acceptFilters, IReadOnlyCollection`1<string> acceptExtensions, IReadOnlyCollection`1<string> acceptDescriptions, IFileDialogCallback callback);
}
public interface CefSharp.IDisplayHandler {
    public abstract virtual void OnAddressChanged(IWebBrowser chromiumWebBrowser, AddressChangedEventArgs addressChangedArgs);
    public abstract virtual bool OnAutoResize(IWebBrowser chromiumWebBrowser, IBrowser browser, Size newSize);
    public abstract virtual bool OnCursorChange(IWebBrowser chromiumWebBrowser, IBrowser browser, IntPtr cursor, CursorType type, CursorInfo customCursorInfo);
    public abstract virtual void OnTitleChanged(IWebBrowser chromiumWebBrowser, TitleChangedEventArgs titleChangedArgs);
    public abstract virtual void OnFaviconUrlChange(IWebBrowser chromiumWebBrowser, IBrowser browser, IList`1<string> urls);
    public abstract virtual void OnFullscreenModeChange(IWebBrowser chromiumWebBrowser, IBrowser browser, bool fullscreen);
    public abstract virtual void OnLoadingProgressChange(IWebBrowser chromiumWebBrowser, IBrowser browser, double progress);
    public abstract virtual bool OnTooltipChanged(IWebBrowser chromiumWebBrowser, String& text);
    public abstract virtual void OnStatusMessage(IWebBrowser chromiumWebBrowser, StatusMessageEventArgs statusMessageArgs);
    public abstract virtual bool OnConsoleMessage(IWebBrowser chromiumWebBrowser, ConsoleMessageEventArgs consoleMessageArgs);
}
[DefaultMemberAttribute("Item")]
public interface CefSharp.IDomNode {
    public string Item { get; }
    public string TagName { get; }
    public ReadOnlyCollection`1<string> AttributeNames { get; }
    public abstract virtual string get_Item(string attributeName);
    public abstract virtual string get_TagName();
    public abstract virtual ReadOnlyCollection`1<string> get_AttributeNames();
    public abstract virtual bool HasAttribute(string attributeName);
}
public interface CefSharp.IDownloadHandler {
    public abstract virtual bool CanDownload(IWebBrowser chromiumWebBrowser, IBrowser browser, string url, string requestMethod);
    public abstract virtual bool OnBeforeDownload(IWebBrowser chromiumWebBrowser, IBrowser browser, DownloadItem downloadItem, IBeforeDownloadCallback callback);
    public abstract virtual void OnDownloadUpdated(IWebBrowser chromiumWebBrowser, IBrowser browser, DownloadItem downloadItem, IDownloadItemCallback callback);
}
public interface CefSharp.IDownloadItemCallback {
    public bool IsDisposed { get; }
    public abstract virtual void Cancel();
    public abstract virtual void Pause();
    public abstract virtual void Resume();
    public abstract virtual bool get_IsDisposed();
}
public interface CefSharp.IDragData {
    public bool IsReadOnly { get; }
    public string FileName { get; public set; }
    public IList`1<string> FileNames { get; }
    public IList`1<string> FilePaths { get; }
    public string FragmentBaseUrl { get; public set; }
    public string FragmentHtml { get; public set; }
    public string FragmentText { get; public set; }
    public bool HasImage { get; }
    public IImage Image { get; }
    public Point ImageHotspot { get; }
    public string LinkMetaData { get; public set; }
    public string LinkTitle { get; public set; }
    public string LinkUrl { get; public set; }
    public bool IsFile { get; public set; }
    public bool IsFragment { get; public set; }
    public bool IsLink { get; public set; }
    public bool IsDisposed { get; }
    public abstract virtual IDragData Clone();
    public abstract virtual bool get_IsReadOnly();
    public abstract virtual string get_FileName();
    public abstract virtual void set_FileName(string value);
    public abstract virtual IList`1<string> get_FileNames();
    public abstract virtual IList`1<string> get_FilePaths();
    public abstract virtual string get_FragmentBaseUrl();
    public abstract virtual void set_FragmentBaseUrl(string value);
    public abstract virtual string get_FragmentHtml();
    public abstract virtual void set_FragmentHtml(string value);
    public abstract virtual string get_FragmentText();
    public abstract virtual void set_FragmentText(string value);
    public abstract virtual bool get_HasImage();
    public abstract virtual IImage get_Image();
    public abstract virtual Point get_ImageHotspot();
    public abstract virtual void set_LinkMetaData(string value);
    public abstract virtual string get_LinkMetaData();
    public abstract virtual void set_LinkTitle(string value);
    public abstract virtual string get_LinkTitle();
    public abstract virtual void set_LinkUrl(string value);
    public abstract virtual string get_LinkUrl();
    public abstract virtual bool get_IsFile();
    public abstract virtual void set_IsFile(bool value);
    public abstract virtual bool get_IsFragment();
    public abstract virtual void set_IsFragment(bool value);
    public abstract virtual bool get_IsLink();
    public abstract virtual void set_IsLink(bool value);
    public abstract virtual void AddFile(string path, string displayName);
    public abstract virtual void ResetFileContents();
    public abstract virtual long GetFileContents(Stream stream);
    public abstract virtual void ClearFilenames();
    public abstract virtual bool get_IsDisposed();
}
public interface CefSharp.IDragHandler {
    public abstract virtual bool OnDragEnter(IWebBrowser chromiumWebBrowser, IBrowser browser, IDragData dragData, DragOperationsMask mask);
    public abstract virtual void OnDraggableRegionsChanged(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame, IList`1<DraggableRegion> regions);
}
public interface CefSharp.IFileDialogCallback {
    public bool IsDisposed { get; }
    public abstract virtual void Continue(List`1<string> filePaths);
    public abstract virtual void Cancel();
    public abstract virtual bool get_IsDisposed();
}
public interface CefSharp.IFindHandler {
    public abstract virtual void OnFindResult(IWebBrowser chromiumWebBrowser, IBrowser browser, int identifier, int count, Rect selectionRect, int activeMatchOrdinal, bool finalUpdate);
}
public interface CefSharp.IFocusHandler {
    public abstract virtual void OnGotFocus(IWebBrowser chromiumWebBrowser, IBrowser browser);
    public abstract virtual bool OnSetFocus(IWebBrowser chromiumWebBrowser, IBrowser browser, CefFocusSource source);
    public abstract virtual void OnTakeFocus(IWebBrowser chromiumWebBrowser, IBrowser browser, bool next);
}
public interface CefSharp.IFrame {
    public bool IsValid { get; }
    public bool IsMain { get; }
    public bool IsFocused { get; }
    public string Name { get; }
    public string Identifier { get; }
    public IFrame Parent { get; }
    public string Url { get; }
    public IBrowser Browser { get; }
    public bool IsDisposed { get; }
    public abstract virtual bool get_IsValid();
    public abstract virtual void Undo();
    public abstract virtual void Redo();
    public abstract virtual void Cut();
    public abstract virtual void Copy();
    public abstract virtual void Paste();
    public abstract virtual void Delete();
    public abstract virtual void SelectAll();
    public abstract virtual void ViewSource();
    public abstract virtual Task`1<string> GetSourceAsync();
    public abstract virtual void GetSource(IStringVisitor visitor);
    public abstract virtual Task`1<string> GetTextAsync();
    public abstract virtual void GetText(IStringVisitor visitor);
    public abstract virtual void LoadRequest(IRequest request);
    public abstract virtual void LoadUrl(string url);
    public abstract virtual void ExecuteJavaScriptAsync(string code, string scriptUrl, int startLine);
    public abstract virtual Task`1<JavascriptResponse> EvaluateScriptAsync(string script, string scriptUrl, int startLine, Nullable`1<TimeSpan> timeout, bool useImmediatelyInvokedFuncExpression);
    public abstract virtual bool get_IsMain();
    public abstract virtual bool get_IsFocused();
    public abstract virtual string get_Name();
    public abstract virtual string get_Identifier();
    public abstract virtual IFrame get_Parent();
    public abstract virtual string get_Url();
    public abstract virtual IBrowser get_Browser();
    public abstract virtual bool get_IsDisposed();
    public abstract virtual IRequest CreateRequest(bool initializePostData);
    public abstract virtual IUrlRequest CreateUrlRequest(IRequest request, IUrlRequestClient client);
}
public interface CefSharp.IFrameHandler {
    public abstract virtual void OnFrameAttached(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame, bool reattached);
    public abstract virtual void OnFrameCreated(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame);
    public abstract virtual void OnFrameDetached(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame);
    public abstract virtual void OnMainFrameChanged(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame oldFrame, IFrame newFrame);
}
public interface CefSharp.IImage {
    public int Height { get; }
    public bool IsEmpty { get; }
    public int Width { get; }
    public abstract virtual Byte[] GetAsBitmap(float scaleFactor, ColorType colorType, AlphaType alphaType, Int32& pixelWidth, Int32& pixelHeight);
    public abstract virtual Byte[] GetAsJPEG(float scaleFactor, int quality, Int32& pixelWidth, Int32& pixelHeight);
    public abstract virtual Byte[] GetAsPNG(float scaleFactor, bool withTransparency, Int32& pixelWidth, Int32& pixelHeight);
    public abstract virtual bool GetRepresentationInfo(float scaleFactor, Single& actualScaleFactor, Int32& pixelWidth, Int32& pixelHeight);
    public abstract virtual int get_Height();
    public abstract virtual bool HasRepresentation(float scaleFactor);
    public abstract virtual bool get_IsEmpty();
    public abstract virtual bool IsSame(IImage that);
    public abstract virtual bool RemoveRepresentation(float scaleFactor);
    public abstract virtual int get_Width();
}
public interface CefSharp.IJavascriptCallback {
    public long Id { get; }
    public bool CanExecute { get; }
    public bool IsDisposed { get; }
    public abstract virtual long get_Id();
    public abstract virtual Task`1<JavascriptResponse> ExecuteAsync(Object[] parms);
    public abstract virtual Task`1<JavascriptResponse> ExecuteWithTimeoutAsync(Nullable`1<TimeSpan> timeout, Object[] parms);
    public abstract virtual bool get_CanExecute();
    public abstract virtual bool get_IsDisposed();
}
public interface CefSharp.IJavascriptObjectRepository {
    public JavascriptBindingSettings Settings { get; }
    public IJavascriptNameConverter NameConverter { get; public set; }
    public bool HasBoundObjects { get; }
    public abstract virtual JavascriptBindingSettings get_Settings();
    public abstract virtual IJavascriptNameConverter get_NameConverter();
    public abstract virtual void set_NameConverter(IJavascriptNameConverter value);
    public abstract virtual void Register(string name, object objectToBind, bool isAsync, BindingOptions options);
    public abstract virtual void UnRegisterAll();
    public abstract virtual bool UnRegister(string name);
    public abstract virtual bool get_HasBoundObjects();
    public abstract virtual bool IsBound(string name);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ResolveObject(EventHandler`1<JavascriptBindingEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ResolveObject(EventHandler`1<JavascriptBindingEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ObjectBoundInJavascript(EventHandler`1<JavascriptBindingCompleteEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ObjectBoundInJavascript(EventHandler`1<JavascriptBindingCompleteEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ObjectsBoundInJavascript(EventHandler`1<JavascriptBindingMultipleCompleteEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ObjectsBoundInJavascript(EventHandler`1<JavascriptBindingMultipleCompleteEventArgs> value);
}
public interface CefSharp.IJsDialogCallback {
    public bool IsDisposed { get; }
    public abstract virtual void Continue(bool success, string userInput);
    public abstract virtual void Continue(bool success);
    public abstract virtual bool get_IsDisposed();
}
public interface CefSharp.IJsDialogHandler {
    public abstract virtual bool OnJSDialog(IWebBrowser chromiumWebBrowser, IBrowser browser, string originUrl, CefJsDialogType dialogType, string messageText, string defaultPromptText, IJsDialogCallback callback, Boolean& suppressMessage);
    public abstract virtual bool OnBeforeUnloadDialog(IWebBrowser chromiumWebBrowser, IBrowser browser, string messageText, bool isReload, IJsDialogCallback callback);
    public abstract virtual void OnResetDialogState(IWebBrowser chromiumWebBrowser, IBrowser browser);
    public abstract virtual void OnDialogClosed(IWebBrowser chromiumWebBrowser, IBrowser browser);
}
public interface CefSharp.IKeyboardHandler {
    public abstract virtual bool OnPreKeyEvent(IWebBrowser chromiumWebBrowser, IBrowser browser, KeyType type, int windowsKeyCode, int nativeKeyCode, CefEventFlags modifiers, bool isSystemKey, Boolean& isKeyboardShortcut);
    public abstract virtual bool OnKeyEvent(IWebBrowser chromiumWebBrowser, IBrowser browser, KeyType type, int windowsKeyCode, int nativeKeyCode, CefEventFlags modifiers, bool isSystemKey);
}
public interface CefSharp.ILifeSpanHandler {
    public abstract virtual bool OnBeforePopup(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame, string targetUrl, string targetFrameName, WindowOpenDisposition targetDisposition, bool userGesture, IPopupFeatures popupFeatures, IWindowInfo windowInfo, IBrowserSettings browserSettings, Boolean& noJavascriptAccess, IWebBrowser& newBrowser);
    public abstract virtual void OnAfterCreated(IWebBrowser chromiumWebBrowser, IBrowser browser);
    public abstract virtual bool DoClose(IWebBrowser chromiumWebBrowser, IBrowser browser);
    public abstract virtual void OnBeforeClose(IWebBrowser chromiumWebBrowser, IBrowser browser);
}
public interface CefSharp.ILoadHandler {
    public abstract virtual void OnLoadingStateChange(IWebBrowser chromiumWebBrowser, LoadingStateChangedEventArgs loadingStateChangedArgs);
    public abstract virtual void OnFrameLoadStart(IWebBrowser chromiumWebBrowser, FrameLoadStartEventArgs frameLoadStartArgs);
    public abstract virtual void OnFrameLoadEnd(IWebBrowser chromiumWebBrowser, FrameLoadEndEventArgs frameLoadEndArgs);
    public abstract virtual void OnLoadError(IWebBrowser chromiumWebBrowser, LoadErrorEventArgs loadErrorArgs);
}
public interface CefSharp.IMediaAccessCallback {
    public abstract virtual void Continue(MediaAccessPermissionType allowedPermissions);
    public abstract virtual void Cancel();
}
public interface CefSharp.IMenuModel {
    public int Count { get; }
    public abstract virtual int get_Count();
    public abstract virtual bool Clear();
    public abstract virtual string GetLabelAt(int index);
    public abstract virtual CefMenuCommand GetCommandIdAt(int index);
    public abstract virtual bool Remove(CefMenuCommand commandId);
    public abstract virtual bool AddItem(CefMenuCommand commandId, string label);
    public abstract virtual bool AddSeparator();
    public abstract virtual bool AddCheckItem(CefMenuCommand commandId, string label);
    public abstract virtual bool AddRadioItem(CefMenuCommand commandId, string label, int groupId);
    public abstract virtual IMenuModel AddSubMenu(CefMenuCommand commandId, string label);
    public abstract virtual bool InsertSeparatorAt(int index);
    public abstract virtual bool InsertItemAt(int index, CefMenuCommand commandId, string label);
    public abstract virtual bool InsertCheckItemAt(int index, CefMenuCommand commandId, string label);
    public abstract virtual bool InsertRadioItemAt(int index, CefMenuCommand commandId, string label, int groupId);
    public abstract virtual IMenuModel InsertSubMenuAt(int index, CefMenuCommand commandId, string label);
    public abstract virtual bool RemoveAt(int index);
    public abstract virtual int GetIndexOf(CefMenuCommand commandId);
    public abstract virtual bool SetCommandIdAt(int index, CefMenuCommand commandId);
    public abstract virtual string GetLabel(CefMenuCommand commandId);
    public abstract virtual bool SetLabel(CefMenuCommand commandId, string label);
    public abstract virtual bool SetLabelAt(int index, string label);
    public abstract virtual MenuItemType GetType(CefMenuCommand commandId);
    public abstract virtual MenuItemType GetTypeAt(int index);
    public abstract virtual int GetGroupId(CefMenuCommand commandId);
    public abstract virtual int GetGroupIdAt(int index);
    public abstract virtual bool SetGroupId(CefMenuCommand commandId, int groupId);
    public abstract virtual bool SetGroupIdAt(int index, int groupId);
    public abstract virtual IMenuModel GetSubMenu(CefMenuCommand commandId);
    public abstract virtual IMenuModel GetSubMenuAt(int index);
    public abstract virtual bool IsVisible(CefMenuCommand commandId);
    public abstract virtual bool IsVisibleAt(int index);
    public abstract virtual bool SetVisible(CefMenuCommand commandId, bool visible);
    public abstract virtual bool SetVisibleAt(int index, bool visible);
    public abstract virtual bool IsEnabled(CefMenuCommand commandId);
    public abstract virtual bool IsEnabledAt(int index);
    public abstract virtual bool SetEnabled(CefMenuCommand commandId, bool enabled);
    public abstract virtual bool SetEnabledAt(int index, bool enabled);
    public abstract virtual bool IsChecked(CefMenuCommand commandId);
    public abstract virtual bool IsCheckedAt(int index);
    public abstract virtual bool SetChecked(CefMenuCommand commandId, bool isChecked);
    public abstract virtual bool SetCheckedAt(int index, bool isChecked);
    public abstract virtual bool HasAccelerator(CefMenuCommand commandId);
    public abstract virtual bool HasAcceleratorAt(int index);
    public abstract virtual bool SetAccelerator(CefMenuCommand commandId, int keyCode, bool shiftPressed, bool ctrlPressed, bool altPressed);
    public abstract virtual bool SetAcceleratorAt(int index, int keyCode, bool shiftPressed, bool ctrlPressed, bool altPressed);
    public abstract virtual bool RemoveAccelerator(CefMenuCommand commandId);
    public abstract virtual bool RemoveAcceleratorAt(int index);
    public abstract virtual bool GetAccelerator(CefMenuCommand commandId, Int32& keyCode, Boolean& shiftPressed, Boolean& ctrlPressed, Boolean& altPressed);
    public abstract virtual bool GetAcceleratorAt(int index, Int32& keyCode, Boolean& shiftPressed, Boolean& ctrlPressed, Boolean& altPressed);
}
public interface CefSharp.INavigationEntryVisitor {
    public abstract virtual bool Visit(NavigationEntry entry, bool current, int index, int total);
}
public class CefSharp.Internals.BaseTimeConverter : object {
    private static DateTime UtcWindowsEpoch;
    private static BaseTimeConverter();
    private sealed virtual override DateTime CefSharp.Internals.IBaseTimeConverter.FromBaseTimeToDateTime(long val);
    private sealed virtual override long CefSharp.Internals.IBaseTimeConverter.FromDateTimeToBaseTime(DateTime dateTime);
}
public class CefSharp.Internals.BrowserRefCounter : object {
    private Int32 modreq(System.Runtime.CompilerServices.IsVolatile) count;
    private ManualResetEventSlim manualResetEvent;
    private bool loggingEnabled;
    private StringBuilder logger;
    public static IBrowserRefCounter Instance;
    private int CefSharp.Internals.IBrowserRefCounter.Count { get; }
    private static BrowserRefCounter();
    public void AppendLineToLog(string line);
    private sealed virtual override void CefSharp.Internals.IBrowserRefCounter.Increment(Type type);
    private sealed virtual override bool CefSharp.Internals.IBrowserRefCounter.Decrement(Type type);
    private sealed virtual override int CefSharp.Internals.IBrowserRefCounter.get_Count();
    private sealed virtual override void CefSharp.Internals.IBrowserRefCounter.WaitForBrowsersToClose(int timeoutInMiliseconds);
    private sealed virtual override void CefSharp.Internals.IBrowserRefCounter.WaitForBrowsersToClose(int timeoutInMiliseconds, CancellationToken cancellationToken);
    private sealed virtual override void CefSharp.Internals.IBrowserRefCounter.EnableLogging();
    private sealed virtual override string CefSharp.Internals.IBrowserRefCounter.GetLog();
    public sealed virtual void Dispose();
}
public static class CefSharp.Internals.CefSharpArguments : object {
    public static string WcfEnabledArgument;
    public static string HostProcessIdArgument;
    public static string CustomSchemeArgument;
    public static string FocusedNodeChangedEnabledArgument;
    public static string SubProcessTypeArgument;
    public static string ExitIfParentProcessClosed;
}
public static class CefSharp.Internals.CefThread : object {
    private static object LockObj;
    [CompilerGeneratedAttribute]
private static TaskFactory <UiThreadTaskFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private static EventHandler Initialized;
    [CompilerGeneratedAttribute]
private static Func`1<bool> <CurrentOnUiThreadDelegate>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <HasShutdown>k__BackingField;
    public static TaskFactory UiThreadTaskFactory { get; private set; }
    public static Func`1<bool> CurrentOnUiThreadDelegate { get; private set; }
    public static bool CanExecuteOnUiThread { get; }
    public static bool CurrentlyOnUiThread { get; }
    public static bool HasShutdown { get; private set; }
    private static CefThread();
    [CompilerGeneratedAttribute]
public static TaskFactory get_UiThreadTaskFactory();
    [CompilerGeneratedAttribute]
private static void set_UiThreadTaskFactory(TaskFactory value);
    [CompilerGeneratedAttribute]
public static void add_Initialized(EventHandler value);
    [CompilerGeneratedAttribute]
public static void remove_Initialized(EventHandler value);
    [CompilerGeneratedAttribute]
public static Func`1<bool> get_CurrentOnUiThreadDelegate();
    [CompilerGeneratedAttribute]
private static void set_CurrentOnUiThreadDelegate(Func`1<bool> value);
    public static bool get_CanExecuteOnUiThread();
    public static bool get_CurrentlyOnUiThread();
    [CompilerGeneratedAttribute]
public static bool get_HasShutdown();
    [CompilerGeneratedAttribute]
private static void set_HasShutdown(bool value);
    public static Task`1<TResult> ExecuteOnUiThread(Func`1<TResult> function);
    public static Task ExecuteOnUiThread(Action action);
    private static Task QueueForExcutionWhenUiThreadCreated(Action action);
    private static Task`1<T> QueueForExcutionWhenUiThreadCreated(Func`1<T> func);
    public static void Initialize(TaskFactory uiThreadTaskFactory, Func`1<bool> currentOnUiThreadDelegate);
    public static void Shutdown();
}
public static class CefSharp.Internals.CefTimeUtils : object {
    private static IBaseTimeConverter BaseTimeConverter;
    private static CefTimeUtils();
    public static void UseBaseTimeConveter(IBaseTimeConverter converter);
    public static Nullable`1<DateTime> FromBaseTimeToNullableDateTime(long val);
    public static DateTime FromBaseTimeToDateTime(long val);
    public static long FromDateTimeToBaseTime(DateTime dateTime);
}
public class CefSharp.Internals.CommandLineArgDictionary : Dictionary`2<string, string> {
    public void Add(string arg);
}
[ExtensionAttribute]
public static class CefSharp.Internals.CommandLineArgsParser : object {
    [ExtensionAttribute]
public static bool HasArgument(IEnumerable`1<string> args, string arg);
    [ExtensionAttribute]
public static string GetArgumentValue(IEnumerable`1<string> args, string argumentName);
}
public class CefSharp.Internals.ConcurrentMethodRunnerQueue : object {
    private static Type VoidTaskResultType;
    private IJavascriptObjectRepositoryInternal repository;
    private CancellationTokenSource cancellationTokenSource;
    [CompilerGeneratedAttribute]
private EventHandler`1<MethodInvocationCompleteArgs> MethodInvocationComplete;
    public ConcurrentMethodRunnerQueue(IJavascriptObjectRepositoryInternal repository);
    private static ConcurrentMethodRunnerQueue();
    [CompilerGeneratedAttribute]
public sealed virtual void add_MethodInvocationComplete(EventHandler`1<MethodInvocationCompleteArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_MethodInvocationComplete(EventHandler`1<MethodInvocationCompleteArgs> value);
    public sealed virtual void Dispose();
    public sealed virtual void Enqueue(MethodInvocation methodInvocation);
    [AsyncStateMachineAttribute("CefSharp.Internals.ConcurrentMethodRunnerQueue/<ExecuteMethodInvocation>d__9")]
private Task`1<MethodInvocationResult> ExecuteMethodInvocation(MethodInvocation methodInvocation);
    private void OnMethodInvocationComplete(MethodInvocationResult e, CancellationToken token);
}
public class CefSharp.Internals.CookieManagerDecorator : object {
    private static string NotInitialziedExceptionMsg;
    private ICookieManager manager;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) managerReady;
    private bool CefSharp.ICookieManager.IsDisposed { get; }
    internal CookieManagerDecorator(ICookieManager manager, TaskCompletionCallback callback);
    private sealed virtual override bool CefSharp.ICookieManager.get_IsDisposed();
    private sealed virtual override bool CefSharp.ICookieManager.DeleteCookies(string url, string name, IDeleteCookiesCallback callback);
    private sealed virtual override void System.IDisposable.Dispose();
    private sealed virtual override bool CefSharp.ICookieManager.FlushStore(ICompletionCallback callback);
    private sealed virtual override bool CefSharp.ICookieManager.SetCookie(string url, Cookie cookie, ISetCookieCallback callback);
    private sealed virtual override bool CefSharp.ICookieManager.VisitAllCookies(ICookieVisitor visitor);
    private sealed virtual override bool CefSharp.ICookieManager.VisitUrlCookies(string url, bool includeHttpOnly, ICookieVisitor visitor);
    [CompilerGeneratedAttribute]
private void <.ctor>b__3_0(Task`1<bool> x);
}
public class CefSharp.Internals.FreezableBase : object {
    private bool frozen;
    public void Freeze();
    protected void ThrowIfFrozen(string memberName);
}
public static class CefSharp.Internals.GlobalContextInitialized : object {
    private static TaskCompletionSource`1<bool> TaskCompletionSource;
    public static Task`1<bool> Task { get; }
    private static GlobalContextInitialized();
    public static Task`1<bool> get_Task();
    public static void SetResult(bool success);
    public static void SetException(Exception ex);
    public static void ExecuteOrEnqueue(Action`1<bool> action);
}
public class CefSharp.Internals.HeaderNameValueCollection : NameValueCollection {
    public void SetReadOnly();
}
public interface CefSharp.Internals.IBaseTimeConverter {
    public abstract virtual DateTime FromBaseTimeToDateTime(long val);
    public abstract virtual long FromDateTimeToBaseTime(DateTime dateTime);
}
public interface CefSharp.Internals.IBrowserAdapter {
    public IMethodRunnerQueue MethodRunnerQueue { get; }
    public IJavascriptObjectRepositoryInternal JavascriptObjectRepository { get; }
    public IJavascriptCallbackFactory JavascriptCallbackFactory { get; }
    public bool IsDisposed { get; }
    public abstract virtual void CreateBrowser(IWindowInfo windowInfo, IBrowserSettings browserSettings, IRequestContext requestContext, string address);
    public abstract virtual IMethodRunnerQueue get_MethodRunnerQueue();
    public abstract virtual IJavascriptObjectRepositoryInternal get_JavascriptObjectRepository();
    public abstract virtual IJavascriptCallbackFactory get_JavascriptCallbackFactory();
    public abstract virtual void OnAfterBrowserCreated(IBrowser browser);
    public abstract virtual IBrowser GetBrowser(int browserId);
    public abstract virtual bool get_IsDisposed();
    public abstract virtual void Resize(int width, int height);
}
public interface CefSharp.Internals.IBrowserRefCounter {
    public int Count { get; }
    public abstract virtual void Increment(Type type);
    public abstract virtual bool Decrement(Type type);
    public abstract virtual int get_Count();
    public abstract virtual void EnableLogging();
    public abstract virtual string GetLog();
    public abstract virtual void WaitForBrowsersToClose(int timeoutInMiliseconds);
    public abstract virtual void WaitForBrowsersToClose(int timeoutInMiliseconds, CancellationToken cancellationToken);
}
public interface CefSharp.Internals.IJavascriptCallbackFactory {
    public abstract virtual IJavascriptCallback Create(JavascriptCallback callback);
}
public interface CefSharp.Internals.IJavascriptObjectRepositoryInternal {
    public bool IsBrowserInitialized { get; public set; }
    public abstract virtual TryCallMethodResult TryCallMethod(long objectId, string name, Object[] parameters);
    public abstract virtual Task`1<TryCallMethodResult> TryCallMethodAsync(long objectId, string name, Object[] parameters);
    public abstract virtual bool TryGetProperty(long objectId, string name, Object& result, String& exception);
    public abstract virtual bool TrySetProperty(long objectId, string name, object value, String& exception);
    public abstract virtual bool get_IsBrowserInitialized();
    public abstract virtual void set_IsBrowserInitialized(bool value);
    public abstract virtual List`1<JavascriptObject> GetObjects(List`1<string> names);
    public abstract virtual List`1<JavascriptObject> GetLegacyBoundObjects();
    public abstract virtual void ObjectsBound(List`1<Tuple`3<string, bool, bool>> objs);
}
public interface CefSharp.Internals.IMethodRunnerQueue {
    [CompilerGeneratedAttribute]
public abstract virtual void add_MethodInvocationComplete(EventHandler`1<MethodInvocationCompleteArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_MethodInvocationComplete(EventHandler`1<MethodInvocationCompleteArgs> value);
    public abstract virtual void Enqueue(MethodInvocation methodInvocation);
}
public class CefSharp.Internals.InitializeAsyncBrowserProcessHandler : BrowserProcessHandler {
    private TaskCompletionSource`1<bool> taskCompletionSource;
    public InitializeAsyncBrowserProcessHandler(TaskCompletionSource`1<bool> tcs);
    protected virtual void OnContextInitialized();
}
public class CefSharp.Internals.InMemoryResourceRequestHandler : object {
    private Byte[] data;
    private string mimeType;
    public InMemoryResourceRequestHandler(Byte[] data, string mimeType);
    public sealed virtual void Dispose();
    private sealed virtual override ICookieAccessFilter CefSharp.IResourceRequestHandler.GetCookieAccessFilter(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame, IRequest request);
    private sealed virtual override IResourceHandler CefSharp.IResourceRequestHandler.GetResourceHandler(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame, IRequest request);
    private sealed virtual override IResponseFilter CefSharp.IResourceRequestHandler.GetResourceResponseFilter(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame, IRequest request, IResponse response);
    private sealed virtual override CefReturnValue CefSharp.IResourceRequestHandler.OnBeforeResourceLoad(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame, IRequest request, IRequestCallback callback);
    private sealed virtual override bool CefSharp.IResourceRequestHandler.OnProtocolExecution(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame, IRequest request);
    private sealed virtual override void CefSharp.IResourceRequestHandler.OnResourceLoadComplete(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame, IRequest request, IResponse response, UrlRequestStatus status, long receivedContentLength);
    private sealed virtual override void CefSharp.IResourceRequestHandler.OnResourceRedirect(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame, IRequest request, IResponse response, String& newUrl);
    private sealed virtual override bool CefSharp.IResourceRequestHandler.OnResourceResponse(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame, IRequest request, IResponse response);
}
[ExtensionAttribute]
public static class CefSharp.Internals.IntPtrExtensions : object {
    [ExtensionAttribute]
public static int CastToInt32(IntPtr intPtr);
}
public interface CefSharp.Internals.IRenderWebBrowser {
    public IAccessibilityHandler AccessibilityHandler { get; public set; }
    public abstract virtual IAccessibilityHandler get_AccessibilityHandler();
    public abstract virtual void set_AccessibilityHandler(IAccessibilityHandler value);
    public abstract virtual Nullable`1<ScreenInfo> GetScreenInfo();
    public abstract virtual Rect GetViewRect();
    public abstract virtual bool GetScreenPoint(int viewX, int viewY, Int32& screenX, Int32& screenY);
    public abstract virtual void OnAcceleratedPaint(PaintElementType type, Rect dirtyRect, AcceleratedPaintInfo acceleratedPaintInfo);
    public abstract virtual void OnPaint(PaintElementType type, Rect dirtyRect, IntPtr buffer, int width, int height);
    public abstract virtual void OnCursorChange(IntPtr cursor, CursorType type, CursorInfo customCursorInfo);
    public abstract virtual bool StartDragging(IDragData dragData, DragOperationsMask mask, int x, int y);
    public abstract virtual void UpdateDragCursor(DragOperationsMask operation);
    public abstract virtual void OnPopupShow(bool show);
    public abstract virtual void OnPopupSize(Rect rect);
    public abstract virtual void OnImeCompositionRangeChanged(Range selectedRange, Rect[] characterBounds);
    public abstract virtual void OnVirtualKeyboardRequested(IBrowser browser, TextInputMode inputMode);
}
public interface CefSharp.Internals.ITaskScheduler {
    public abstract virtual void ExecuteTask(Task task);
}
public interface CefSharp.Internals.IWebBrowserInternal {
    public IBrowserAdapter BrowserAdapter { get; }
    public bool HasParent { get; public set; }
    public IDisposable DevToolsContext { get; public set; }
    public abstract virtual void OnAfterBrowserCreated(IBrowser browser);
    public abstract virtual void SetAddress(AddressChangedEventArgs args);
    public abstract virtual void SetLoadingStateChange(LoadingStateChangedEventArgs args);
    public abstract virtual void SetTitle(TitleChangedEventArgs args);
    public abstract virtual void SetTooltipText(string tooltipText);
    public abstract virtual void SetCanExecuteJavascriptOnMainFrame(string frameId, bool canExecute);
    public abstract virtual void SetJavascriptMessageReceived(JavascriptMessageReceivedEventArgs args);
    public abstract virtual void OnFrameLoadStart(FrameLoadStartEventArgs args);
    public abstract virtual void OnFrameLoadEnd(FrameLoadEndEventArgs args);
    public abstract virtual void OnConsoleMessage(ConsoleMessageEventArgs args);
    public abstract virtual void OnStatusMessage(StatusMessageEventArgs args);
    public abstract virtual void OnLoadError(LoadErrorEventArgs args);
    public abstract virtual IBrowserAdapter get_BrowserAdapter();
    public abstract virtual bool get_HasParent();
    public abstract virtual void set_HasParent(bool value);
    public abstract virtual IDisposable get_DevToolsContext();
    public abstract virtual void set_DevToolsContext(IDisposable value);
}
[DataContractAttribute]
public class CefSharp.Internals.JavascriptCallback : object {
    [CompilerGeneratedAttribute]
private long <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private int <BrowserId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FrameId>k__BackingField;
    [DataMemberAttribute]
public long Id { get; public set; }
    [DataMemberAttribute]
public int BrowserId { get; public set; }
    [DataMemberAttribute]
public string FrameId { get; public set; }
    [CompilerGeneratedAttribute]
public long get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(long value);
    [CompilerGeneratedAttribute]
public int get_BrowserId();
    [CompilerGeneratedAttribute]
public void set_BrowserId(int value);
    [CompilerGeneratedAttribute]
public string get_FrameId();
    [CompilerGeneratedAttribute]
public void set_FrameId(string value);
    public Byte[] ToByteArray(byte primitiveType);
    public static JavascriptCallback FromBytes(Byte[] bytes);
}
[DataContractAttribute]
public class CefSharp.Internals.JavascriptMethod : object {
    [CompilerGeneratedAttribute]
private Func`3<object, Object[], object> <Function>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ManagedName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <JavascriptName>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<MethodParameter> <Parameters>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasParamArray>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ParameterCount>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ReturnType>k__BackingField;
    public Func`3<object, Object[], object> Function { get; public set; }
    [DataMemberAttribute]
public long Id { get; public set; }
    [DataMemberAttribute]
public string ManagedName { get; public set; }
    [DataMemberAttribute]
public string JavascriptName { get; public set; }
    public List`1<MethodParameter> Parameters { get; public set; }
    public bool HasParamArray { get; public set; }
    public int ParameterCount { get; public set; }
    public Type ReturnType { get; public set; }
    [CompilerGeneratedAttribute]
public Func`3<object, Object[], object> get_Function();
    [CompilerGeneratedAttribute]
public void set_Function(Func`3<object, Object[], object> value);
    [CompilerGeneratedAttribute]
public long get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(long value);
    [CompilerGeneratedAttribute]
public string get_ManagedName();
    [CompilerGeneratedAttribute]
public void set_ManagedName(string value);
    [CompilerGeneratedAttribute]
public string get_JavascriptName();
    [CompilerGeneratedAttribute]
public void set_JavascriptName(string value);
    [CompilerGeneratedAttribute]
public List`1<MethodParameter> get_Parameters();
    [CompilerGeneratedAttribute]
public void set_Parameters(List`1<MethodParameter> value);
    [CompilerGeneratedAttribute]
public bool get_HasParamArray();
    [CompilerGeneratedAttribute]
public void set_HasParamArray(bool value);
    [CompilerGeneratedAttribute]
public int get_ParameterCount();
    [CompilerGeneratedAttribute]
public void set_ParameterCount(int value);
    [CompilerGeneratedAttribute]
public Type get_ReturnType();
    [CompilerGeneratedAttribute]
public void set_ReturnType(Type value);
    public virtual string ToString();
}
[DataContractAttribute]
public class CefSharp.Internals.JavascriptObject : object {
    [CompilerGeneratedAttribute]
private long <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <JavascriptName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAsync>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<JavascriptMethod> <Methods>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<JavascriptProperty> <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RootObject>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private IBinder <Binder>k__BackingField;
    [CompilerGeneratedAttribute]
private IMethodInterceptor <MethodInterceptor>k__BackingField;
    [CompilerGeneratedAttribute]
private IPropertyInterceptor <PropertyInterceptor>k__BackingField;
    [DataMemberAttribute]
public long Id { get; public set; }
    [DataMemberAttribute]
public string Name { get; public set; }
    [DataMemberAttribute]
public string JavascriptName { get; public set; }
    [DataMemberAttribute]
public bool IsAsync { get; public set; }
    [DataMemberAttribute]
public List`1<JavascriptMethod> Methods { get; private set; }
    [DataMemberAttribute]
public List`1<JavascriptProperty> Properties { get; private set; }
    public bool RootObject { get; public set; }
    public object Value { get; public set; }
    public IBinder Binder { get; public set; }
    public IMethodInterceptor MethodInterceptor { get; public set; }
    public IPropertyInterceptor PropertyInterceptor { get; public set; }
    [CompilerGeneratedAttribute]
public long get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(long value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_JavascriptName();
    [CompilerGeneratedAttribute]
public void set_JavascriptName(string value);
    [CompilerGeneratedAttribute]
public bool get_IsAsync();
    [CompilerGeneratedAttribute]
public void set_IsAsync(bool value);
    [CompilerGeneratedAttribute]
public List`1<JavascriptMethod> get_Methods();
    [CompilerGeneratedAttribute]
private void set_Methods(List`1<JavascriptMethod> value);
    [CompilerGeneratedAttribute]
public List`1<JavascriptProperty> get_Properties();
    [CompilerGeneratedAttribute]
private void set_Properties(List`1<JavascriptProperty> value);
    [CompilerGeneratedAttribute]
public bool get_RootObject();
    [CompilerGeneratedAttribute]
public void set_RootObject(bool value);
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(object value);
    [CompilerGeneratedAttribute]
public IBinder get_Binder();
    [CompilerGeneratedAttribute]
public void set_Binder(IBinder value);
    [CompilerGeneratedAttribute]
public IMethodInterceptor get_MethodInterceptor();
    [CompilerGeneratedAttribute]
public void set_MethodInterceptor(IMethodInterceptor value);
    [CompilerGeneratedAttribute]
public IPropertyInterceptor get_PropertyInterceptor();
    [CompilerGeneratedAttribute]
public void set_PropertyInterceptor(IPropertyInterceptor value);
    public virtual string ToString();
}
public class CefSharp.Internals.JavascriptObjectRepository : FreezableBase {
    public static string AllObjects;
    public static string LegacyObjects;
    private static long lastId;
    [CompilerGeneratedAttribute]
private EventHandler`1<JavascriptBindingEventArgs> ResolveObject;
    [CompilerGeneratedAttribute]
private EventHandler`1<JavascriptBindingCompleteEventArgs> ObjectBoundInJavascript;
    [CompilerGeneratedAttribute]
private EventHandler`1<JavascriptBindingMultipleCompleteEventArgs> ObjectsBoundInJavascript;
    protected ConcurrentDictionary`2<long, JavascriptObject> objects;
    private IJavascriptNameConverter nameConverter;
    [CompilerGeneratedAttribute]
private bool <IsBrowserInitialized>k__BackingField;
    [CompilerGeneratedAttribute]
private JavascriptBindingSettings <Settings>k__BackingField;
    public bool IsBrowserInitialized { get; public set; }
    public bool HasBoundObjects { get; }
    public JavascriptBindingSettings Settings { get; private set; }
    public IJavascriptNameConverter NameConverter { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual void add_ResolveObject(EventHandler`1<JavascriptBindingEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ResolveObject(EventHandler`1<JavascriptBindingEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ObjectBoundInJavascript(EventHandler`1<JavascriptBindingCompleteEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ObjectBoundInJavascript(EventHandler`1<JavascriptBindingCompleteEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ObjectsBoundInJavascript(EventHandler`1<JavascriptBindingMultipleCompleteEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ObjectsBoundInJavascript(EventHandler`1<JavascriptBindingMultipleCompleteEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsBrowserInitialized();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsBrowserInitialized(bool value);
    public sealed virtual void Dispose();
    public sealed virtual bool get_HasBoundObjects();
    [CompilerGeneratedAttribute]
public sealed virtual JavascriptBindingSettings get_Settings();
    [CompilerGeneratedAttribute]
private void set_Settings(JavascriptBindingSettings value);
    public sealed virtual IJavascriptNameConverter get_NameConverter();
    public sealed virtual void set_NameConverter(IJavascriptNameConverter value);
    public sealed virtual bool IsBound(string name);
    private sealed virtual override List`1<JavascriptObject> CefSharp.Internals.IJavascriptObjectRepositoryInternal.GetLegacyBoundObjects();
    private sealed virtual override List`1<JavascriptObject> CefSharp.Internals.IJavascriptObjectRepositoryInternal.GetObjects(List`1<string> names);
    private sealed virtual override void CefSharp.Internals.IJavascriptObjectRepositoryInternal.ObjectsBound(List`1<Tuple`3<string, bool, bool>> objs);
    private JavascriptObject CreateJavascriptObject(bool rootObject);
    public sealed virtual void Register(string name, object value, bool isAsync, BindingOptions options);
    public sealed virtual void UnRegisterAll();
    public sealed virtual bool UnRegister(string name);
    private sealed virtual override TryCallMethodResult CefSharp.Internals.IJavascriptObjectRepositoryInternal.TryCallMethod(long objectId, string name, Object[] parameters);
    protected virtual TryCallMethodResult TryCallMethod(long objectId, string name, Object[] parameters);
    private sealed virtual override Task`1<TryCallMethodResult> CefSharp.Internals.IJavascriptObjectRepositoryInternal.TryCallMethodAsync(long objectId, string name, Object[] parameters);
    [AsyncStateMachineAttribute("CefSharp.Internals.JavascriptObjectRepository/<TryCallMethodAsync>d__40")]
protected virtual Task`1<TryCallMethodResult> TryCallMethodAsync(long objectId, string name, Object[] parameters);
    private sealed virtual override bool CefSharp.Internals.IJavascriptObjectRepositoryInternal.TryGetProperty(long objectId, string name, Object& result, String& exception);
    protected virtual bool TryGetProperty(long objectId, string name, Object& result, String& exception);
    private sealed virtual override bool CefSharp.Internals.IJavascriptObjectRepositoryInternal.TrySetProperty(long objectId, string name, object value, String& exception);
    protected virtual bool TrySetProperty(long objectId, string name, object value, String& exception);
    private void AnalyseObjectForBinding(JavascriptObject obj, bool analyseMethods, bool analyseProperties, bool readPropertyValue);
    private void RaiseResolveObjectEvent(string name);
    private static JavascriptMethod CreateJavaScriptMethod(MethodInfo methodInfo, IJavascriptNameConverter nameConverter);
    private JavascriptProperty CreateJavaScriptProperty(PropertyInfo propertyInfo);
    private static bool IsComplexType(Type type);
}
[DataContractAttribute]
public class CefSharp.Internals.JavascriptProperty : object {
    [CompilerGeneratedAttribute]
private JavascriptObject <JsObject>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`2<object, object> <SetValue>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<object, object> <GetValue>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ManagedName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <JavascriptName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsComplexType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsReadOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private object <PropertyValue>k__BackingField;
    [DataMemberAttribute]
public JavascriptObject JsObject { get; public set; }
    public Action`2<object, object> SetValue { get; public set; }
    public Func`2<object, object> GetValue { get; public set; }
    [DataMemberAttribute]
public long Id { get; public set; }
    [DataMemberAttribute]
public string ManagedName { get; public set; }
    [DataMemberAttribute]
public string JavascriptName { get; public set; }
    [DataMemberAttribute]
public bool IsComplexType { get; public set; }
    [DataMemberAttribute]
public bool IsReadOnly { get; public set; }
    [DataMemberAttribute]
public object PropertyValue { get; public set; }
    [CompilerGeneratedAttribute]
public JavascriptObject get_JsObject();
    [CompilerGeneratedAttribute]
public void set_JsObject(JavascriptObject value);
    [CompilerGeneratedAttribute]
public Action`2<object, object> get_SetValue();
    [CompilerGeneratedAttribute]
public void set_SetValue(Action`2<object, object> value);
    [CompilerGeneratedAttribute]
public Func`2<object, object> get_GetValue();
    [CompilerGeneratedAttribute]
public void set_GetValue(Func`2<object, object> value);
    [CompilerGeneratedAttribute]
public long get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(long value);
    [CompilerGeneratedAttribute]
public string get_ManagedName();
    [CompilerGeneratedAttribute]
public void set_ManagedName(string value);
    [CompilerGeneratedAttribute]
public string get_JavascriptName();
    [CompilerGeneratedAttribute]
public void set_JavascriptName(string value);
    [CompilerGeneratedAttribute]
public bool get_IsComplexType();
    [CompilerGeneratedAttribute]
public void set_IsComplexType(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsReadOnly();
    [CompilerGeneratedAttribute]
public void set_IsReadOnly(bool value);
    [CompilerGeneratedAttribute]
public object get_PropertyValue();
    [CompilerGeneratedAttribute]
public void set_PropertyValue(object value);
    public virtual string ToString();
}
public class CefSharp.Internals.MethodInvocation : object {
    private List`1<object> parameters;
    [CompilerGeneratedAttribute]
private int <BrowserId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FrameId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <CallbackId>k__BackingField;
    [CompilerGeneratedAttribute]
private long <ObjectId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MethodName>k__BackingField;
    public int BrowserId { get; private set; }
    public string FrameId { get; private set; }
    public Nullable`1<long> CallbackId { get; private set; }
    public long ObjectId { get; private set; }
    public string MethodName { get; private set; }
    public List`1<object> Parameters { get; }
    public MethodInvocation(int browserId, string frameId, long objectId, string methodName, Nullable`1<long> callbackId);
    [CompilerGeneratedAttribute]
public int get_BrowserId();
    [CompilerGeneratedAttribute]
private void set_BrowserId(int value);
    [CompilerGeneratedAttribute]
public string get_FrameId();
    [CompilerGeneratedAttribute]
private void set_FrameId(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_CallbackId();
    [CompilerGeneratedAttribute]
private void set_CallbackId(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public long get_ObjectId();
    [CompilerGeneratedAttribute]
private void set_ObjectId(long value);
    [CompilerGeneratedAttribute]
public string get_MethodName();
    [CompilerGeneratedAttribute]
private void set_MethodName(string value);
    public List`1<object> get_Parameters();
}
public class CefSharp.Internals.MethodInvocationCompleteArgs : EventArgs {
    [CompilerGeneratedAttribute]
private MethodInvocationResult <Result>k__BackingField;
    public MethodInvocationResult Result { get; private set; }
    public MethodInvocationCompleteArgs(MethodInvocationResult result);
    [CompilerGeneratedAttribute]
public MethodInvocationResult get_Result();
    [CompilerGeneratedAttribute]
private void set_Result(MethodInvocationResult value);
}
public class CefSharp.Internals.MethodInvocationResult : object {
    [CompilerGeneratedAttribute]
private int <BrowserId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <CallbackId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FrameId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Success>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Result>k__BackingField;
    [CompilerGeneratedAttribute]
private IJavascriptNameConverter <NameConverter>k__BackingField;
    public int BrowserId { get; public set; }
    public Nullable`1<long> CallbackId { get; public set; }
    public string FrameId { get; public set; }
    public string Message { get; public set; }
    public bool Success { get; public set; }
    public object Result { get; public set; }
    public IJavascriptNameConverter NameConverter { get; public set; }
    [CompilerGeneratedAttribute]
public int get_BrowserId();
    [CompilerGeneratedAttribute]
public void set_BrowserId(int value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_CallbackId();
    [CompilerGeneratedAttribute]
public void set_CallbackId(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public string get_FrameId();
    [CompilerGeneratedAttribute]
public void set_FrameId(string value);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(string value);
    [CompilerGeneratedAttribute]
public bool get_Success();
    [CompilerGeneratedAttribute]
public void set_Success(bool value);
    [CompilerGeneratedAttribute]
public object get_Result();
    [CompilerGeneratedAttribute]
public void set_Result(object value);
    [CompilerGeneratedAttribute]
public IJavascriptNameConverter get_NameConverter();
    [CompilerGeneratedAttribute]
public void set_NameConverter(IJavascriptNameConverter value);
}
public class CefSharp.Internals.MethodParameter : object {
    [CompilerGeneratedAttribute]
private bool <IsParamArray>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    public bool IsParamArray { get; public set; }
    public Type Type { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_IsParamArray();
    [CompilerGeneratedAttribute]
public void set_IsParamArray(bool value);
    [CompilerGeneratedAttribute]
public Type get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(Type value);
}
public class CefSharp.Internals.MethodRunnerQueue : object {
    private LimitedConcurrencyLevelTaskScheduler taskScheduler;
    private IJavascriptObjectRepositoryInternal repository;
    private CancellationTokenSource cancellationTokenSource;
    [CompilerGeneratedAttribute]
private EventHandler`1<MethodInvocationCompleteArgs> MethodInvocationComplete;
    public MethodRunnerQueue(IJavascriptObjectRepositoryInternal repository);
    [CompilerGeneratedAttribute]
public sealed virtual void add_MethodInvocationComplete(EventHandler`1<MethodInvocationCompleteArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_MethodInvocationComplete(EventHandler`1<MethodInvocationCompleteArgs> value);
    public sealed virtual void Dispose();
    public sealed virtual void Enqueue(MethodInvocation methodInvocation);
    private MethodInvocationResult ExecuteMethodInvocation(MethodInvocation methodInvocation);
}
public static class CefSharp.Internals.MimeTypeMapping : object {
    public static IDictionary`2<string, string> CustomMappings;
    private static MimeTypeMapping();
    public static string GetCustomMapping(string extension);
}
public class CefSharp.Internals.NoFocusHandler : object {
    private sealed virtual override void CefSharp.IFocusHandler.OnGotFocus(IWebBrowser chromiumWebBrowser, IBrowser browser);
    private sealed virtual override bool CefSharp.IFocusHandler.OnSetFocus(IWebBrowser chromiumWebBrowser, IBrowser browser, CefFocusSource source);
    private sealed virtual override void CefSharp.IFocusHandler.OnTakeFocus(IWebBrowser chromiumWebBrowser, IBrowser browser, bool next);
}
public class CefSharp.Internals.NoOpBrowserRefCounter : object {
    private int CefSharp.Internals.IBrowserRefCounter.Count { get; }
    private sealed virtual override int CefSharp.Internals.IBrowserRefCounter.get_Count();
    public sealed virtual void Dispose();
    private sealed virtual override void CefSharp.Internals.IBrowserRefCounter.EnableLogging();
    private sealed virtual override string CefSharp.Internals.IBrowserRefCounter.GetLog();
    private sealed virtual override bool CefSharp.Internals.IBrowserRefCounter.Decrement(Type type);
    private sealed virtual override void CefSharp.Internals.IBrowserRefCounter.Increment(Type type);
    private sealed virtual override void CefSharp.Internals.IBrowserRefCounter.WaitForBrowsersToClose(int timeoutInMiliseconds);
    private sealed virtual override void CefSharp.Internals.IBrowserRefCounter.WaitForBrowsersToClose(int timeoutInMiliseconds, CancellationToken cancellationToken);
}
public static class CefSharp.Internals.ParentProcessMonitor : object {
    public static void StartMonitorTask(int parentProcessId);
    [AsyncStateMachineAttribute("CefSharp.Internals.ParentProcessMonitor/<AwaitParentProcessExit>d__1")]
private static void AwaitParentProcessExit(int parentProcessId);
}
public static class CefSharp.Internals.PathCheck : object {
    internal static char DirectorySeparatorChar;
    internal static char AltDirectorySeparatorChar;
    [ObsoleteAttribute("This will be removed after further testing.")]
public static bool EnableAssert;
    private static PathCheck();
    internal static int FindDriveLetter(string path);
    internal static bool IsDirectorySeparator(char c);
    public static void AssertAbsolute(string path, string settingName);
    public static bool IsAbsolute(string path);
}
public class CefSharp.Internals.PendingTaskRepository`1 : object {
    private ConcurrentDictionary`2<long, TaskCompletionSource`1<TResult>> pendingTasks;
    private ConcurrentDictionary`2<long, TaskCompletionSource`1<TResult>> callbackPendingTasks;
    private long lastId;
    public KeyValuePair`2<long, TaskCompletionSource`1<TResult>> CreatePendingTask(Nullable`1<TimeSpan> timeout);
    public KeyValuePair`2<long, TaskCompletionSource`1<TResult>> CreateJavascriptCallbackPendingTask(long id, Nullable`1<TimeSpan> timeout);
    public TaskCompletionSource`1<TResult> RemovePendingTask(long id);
    public TaskCompletionSource`1<TResult> RemoveJavascriptCallbackPendingTask(long id);
}
internal static class CefSharp.Internals.ReflectionUtils : object {
    public static string GetMethodName(Expression`1<Func`2<T, object>> expression);
}
public class CefSharp.Internals.RenderprocessClientFactory : object {
    private static string BaseAddress;
    private static string ServiceName;
    public static string GetServiceName(int parentProcessId, int browserId);
}
public static class CefSharp.Internals.StringCheck : object {
    public static bool IsLettersAndNumbers(string stringToCheck);
    public static bool IsFirstCharacterLowercase(string str);
}
[ExtensionAttribute]
public static class CefSharp.Internals.TaskExtensions : object {
    [ExtensionAttribute]
public static TaskCompletionSource`1<TResult> WithTimeout(TaskCompletionSource`1<TResult> taskCompletionSource, TimeSpan timeout, Action cancelled);
}
internal class CefSharp.Internals.Tasks.LimitedConcurrencyLevelTaskScheduler : TaskScheduler {
    [ThreadStaticAttribute]
private static bool _currentThreadIsProcessingItems;
    private LinkedList`1<Task> _tasks;
    private int _maxDegreeOfParallelism;
    private int _delegatesQueuedOrRunning;
    public int MaximumConcurrencyLevel { get; }
    public LimitedConcurrencyLevelTaskScheduler(int maxDegreeOfParallelism);
    protected sealed virtual void QueueTask(Task task);
    private void NotifyThreadPoolOfPendingWork();
    protected sealed virtual bool TryExecuteTaskInline(Task task, bool taskWasPreviouslyQueued);
    protected sealed virtual bool TryDequeue(Task task);
    public sealed virtual int get_MaximumConcurrencyLevel();
    protected sealed virtual IEnumerable`1<Task> GetScheduledTasks();
    [CompilerGeneratedAttribute]
private void <NotifyThreadPoolOfPendingWork>b__6_0(object _);
}
public class CefSharp.Internals.Tasks.SyncContextTaskCompletionSource`1 : TaskCompletionSource`1<TResult> {
    [CompilerGeneratedAttribute]
private SynchronizationContext <SyncContext>k__BackingField;
    public SynchronizationContext SyncContext { get; public set; }
    [CompilerGeneratedAttribute]
public SynchronizationContext get_SyncContext();
    [CompilerGeneratedAttribute]
public void set_SyncContext(SynchronizationContext value);
}
public static class CefSharp.Internals.TaskTimeoutExtensions : object {
    public static Task`1<TResult> WaitAsync(Task`1<TResult> task, int millisecondsTimeout);
    public static Task`1<TResult> WaitAsync(Task`1<TResult> task, TimeSpan timeout);
    public static Task`1<TResult> WaitAsync(Task`1<TResult> task, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("CefSharp.Internals.TaskTimeoutExtensions/<WaitAsync>d__3`1")]
public static Task`1<TResult> WaitAsync(Task`1<TResult> task, TimeSpan timeout, CancellationToken cancellationToken);
}
public class CefSharp.Internals.TryCallMethodResult : object {
    [CompilerGeneratedAttribute]
private string <Exception>k__BackingField;
    [CompilerGeneratedAttribute]
private object <ReturnValue>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Success>k__BackingField;
    public string Exception { get; private set; }
    public object ReturnValue { get; private set; }
    public bool Success { get; private set; }
    public TryCallMethodResult(bool success, object returnValue, string exception);
    [CompilerGeneratedAttribute]
public string get_Exception();
    [CompilerGeneratedAttribute]
private void set_Exception(string value);
    [CompilerGeneratedAttribute]
public object get_ReturnValue();
    [CompilerGeneratedAttribute]
private void set_ReturnValue(object value);
    [CompilerGeneratedAttribute]
public bool get_Success();
    [CompilerGeneratedAttribute]
private void set_Success(bool value);
}
[DataContractAttribute]
[KnownTypeAttribute("System.Boolean[]")]
[KnownTypeAttribute("System.Byte[]")]
[KnownTypeAttribute("System.Int16[]")]
[KnownTypeAttribute("System.Int32[]")]
[KnownTypeAttribute("System.Int64[]")]
[KnownTypeAttribute("System.UInt16[]")]
[KnownTypeAttribute("System.UInt32[]")]
[KnownTypeAttribute("System.UInt64[]")]
[KnownTypeAttribute("System.Single[]")]
[KnownTypeAttribute("System.Double[]")]
[KnownTypeAttribute("System.String[]")]
public class CefSharp.Internals.Wcf.BrowserProcessResponse : object {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Success>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Result>k__BackingField;
    [DataMemberAttribute]
public string Message { get; public set; }
    [DataMemberAttribute]
public bool Success { get; public set; }
    [DataMemberAttribute]
public object Result { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(string value);
    [CompilerGeneratedAttribute]
public bool get_Success();
    [CompilerGeneratedAttribute]
public void set_Success(bool value);
    [CompilerGeneratedAttribute]
public object get_Result();
    [CompilerGeneratedAttribute]
public void set_Result(object value);
}
[ServiceBehaviorAttribute]
internal class CefSharp.Internals.Wcf.BrowserProcessService : object {
    private IJavascriptObjectRepositoryInternal javascriptObjectRepository;
    private BrowserProcessServiceHost host;
    public sealed virtual BrowserProcessResponse CallMethod(long objectId, string name, Object[] parameters);
    public sealed virtual BrowserProcessResponse GetProperty(long objectId, string name);
    public sealed virtual BrowserProcessResponse SetProperty(long objectId, string name, object value);
}
public class CefSharp.Internals.Wcf.BrowserProcessServiceHost : ServiceHost {
    private static long OneHundredAndTwentyEightMegaBytesInBytes;
    [CompilerGeneratedAttribute]
private IJavascriptObjectRepositoryInternal <JavascriptObjectRepository>k__BackingField;
    public IJavascriptObjectRepositoryInternal JavascriptObjectRepository { get; private set; }
    public BrowserProcessServiceHost(IJavascriptObjectRepositoryInternal javascriptObjectRepository, int parentProcessId, int browserId, IJavascriptCallbackFactory callbackFactory);
    [CompilerGeneratedAttribute]
public IJavascriptObjectRepositoryInternal get_JavascriptObjectRepository();
    [CompilerGeneratedAttribute]
private void set_JavascriptObjectRepository(IJavascriptObjectRepositoryInternal value);
    protected virtual void OnClosed();
    public static CustomBinding CreateBinding();
}
[ServiceContractAttribute]
[ServiceKnownTypeAttribute("System.Object[]")]
[ServiceKnownTypeAttribute("System.Collections.Generic.Dictionary`2<System.String,System.Object>")]
[ServiceKnownTypeAttribute("CefSharp.Internals.JavascriptObject")]
[ServiceKnownTypeAttribute("CefSharp.Internals.JavascriptMethod")]
[ServiceKnownTypeAttribute("CefSharp.Internals.JavascriptProperty")]
[ServiceKnownTypeAttribute("CefSharp.Internals.JavascriptCallback")]
public interface CefSharp.Internals.Wcf.IBrowserProcess {
    [OperationContractAttribute]
public abstract virtual BrowserProcessResponse CallMethod(long objectId, string name, Object[] parameters);
    [OperationContractAttribute]
public abstract virtual BrowserProcessResponse GetProperty(long objectId, string name);
    [OperationContractAttribute]
public abstract virtual BrowserProcessResponse SetProperty(long objectId, string name, object value);
}
internal class CefSharp.Internals.Wcf.JavascriptCallbackEndpointBehavior : object {
    private static List`1<string> Methods;
    private IJavascriptCallbackFactory callbackFactory;
    public JavascriptCallbackEndpointBehavior(IJavascriptCallbackFactory callbackFactory);
    private static JavascriptCallbackEndpointBehavior();
    public sealed virtual void Validate(ServiceEndpoint endpoint);
    public sealed virtual void AddBindingParameters(ServiceEndpoint endpoint, BindingParameterCollection bindingParameters);
    public sealed virtual void ApplyDispatchBehavior(ServiceEndpoint endpoint, EndpointDispatcher endpointDispatcher);
    public sealed virtual void ApplyClientBehavior(ServiceEndpoint endpoint, ClientRuntime clientRuntime);
}
internal class CefSharp.Internals.Wcf.JavascriptCallbackSurrogate : object {
    private IJavascriptCallbackFactory callbackFactory;
    public JavascriptCallbackSurrogate(IJavascriptCallbackFactory callbackFactory);
    public sealed virtual Type GetDataContractType(Type type);
    public sealed virtual object GetObjectToSerialize(object obj, Type targetType);
    public sealed virtual object GetDeserializedObject(object obj, Type targetType);
    public sealed virtual object GetCustomDataToExport(MemberInfo memberInfo, Type dataContractType);
    public sealed virtual object GetCustomDataToExport(Type clrType, Type dataContractType);
    public sealed virtual void GetKnownCustomDataTypes(Collection`1<Type> customDataTypes);
    public sealed virtual Type GetReferencedTypeOnImport(string typeName, string typeNamespace, object customData);
    public sealed virtual CodeTypeDeclaration ProcessImportedType(CodeTypeDeclaration typeDeclaration, CodeCompileUnit compileUnit);
}
[ExtensionAttribute]
internal static class CefSharp.Internals.Wcf.WcfExtensions : object {
    [ExtensionAttribute]
public static void ApplyOperationBehavior(ServiceDescription description, Func`2<OperationDescription, T> behaviorFactory, Action`1<T> behaviorManipulation);
    [ExtensionAttribute]
public static void ApplyOperationBehavior(ServiceEndpoint endpoint, Func`2<OperationDescription, T> behaviorFactory, Action`1<T> behaviorManipulation);
    [ExtensionAttribute]
public static void ApplyServiceBehavior(ServiceDescription description, Func`1<T> behaviorFactory, Action`1<T> behaviorManipulation);
}
public interface CefSharp.IPermissionHandler {
    public abstract virtual bool OnRequestMediaAccessPermission(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame, string requestingOrigin, MediaAccessPermissionType requestedPermissions, IMediaAccessCallback callback);
    public abstract virtual bool OnShowPermissionPrompt(IWebBrowser chromiumWebBrowser, IBrowser browser, ulong promptId, string requestingOrigin, PermissionRequestType requestedPermissions, IPermissionPromptCallback callback);
    public abstract virtual void OnDismissPermissionPrompt(IWebBrowser chromiumWebBrowser, IBrowser browser, ulong promptId, PermissionRequestResult result);
}
public interface CefSharp.IPermissionPromptCallback {
    public abstract virtual void Continue(PermissionRequestResult result);
}
public interface CefSharp.IPopupFeatures {
    public Nullable`1<int> X { get; }
    public Nullable`1<int> Y { get; }
    public Nullable`1<int> Width { get; }
    public Nullable`1<int> Height { get; }
    public bool IsPopup { get; }
    public abstract virtual Nullable`1<int> get_X();
    public abstract virtual Nullable`1<int> get_Y();
    public abstract virtual Nullable`1<int> get_Width();
    public abstract virtual Nullable`1<int> get_Height();
    public abstract virtual bool get_IsPopup();
}
public interface CefSharp.IPostData {
    public IList`1<IPostDataElement> Elements { get; }
    public bool IsReadOnly { get; }
    public bool IsDisposed { get; }
    public bool HasExcludedElements { get; }
    public abstract virtual bool AddElement(IPostDataElement element);
    public abstract virtual bool RemoveElement(IPostDataElement element);
    public abstract virtual IList`1<IPostDataElement> get_Elements();
    public abstract virtual bool get_IsReadOnly();
    public abstract virtual void RemoveElements();
    public abstract virtual bool get_IsDisposed();
    public abstract virtual IPostDataElement CreatePostDataElement();
    public abstract virtual bool get_HasExcludedElements();
    [EditorBrowsableAttribute("1")]
public abstract virtual IPostData UnWrap();
}
public interface CefSharp.IPostDataElement {
    public string File { get; public set; }
    public bool IsReadOnly { get; }
    public PostDataElementType Type { get; }
    public Byte[] Bytes { get; public set; }
    public abstract virtual string get_File();
    public abstract virtual void set_File(string value);
    public abstract virtual bool get_IsReadOnly();
    public abstract virtual void SetToEmpty();
    public abstract virtual PostDataElementType get_Type();
    public abstract virtual Byte[] get_Bytes();
    public abstract virtual void set_Bytes(Byte[] value);
    [EditorBrowsableAttribute("1")]
public abstract virtual IPostDataElement UnWrap();
}
public interface CefSharp.IPrintToPdfCallback {
    public bool IsDisposed { get; }
    public abstract virtual void OnPdfPrintFinished(string path, bool ok);
    public abstract virtual bool get_IsDisposed();
}
public interface CefSharp.IRegistration {
}
public interface CefSharp.IRenderProcessMessageHandler {
    public abstract virtual void OnContextCreated(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame);
    public abstract virtual void OnContextReleased(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame);
    public abstract virtual void OnFocusedNodeChanged(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame, IDomNode node);
    public abstract virtual void OnUncaughtException(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame, JavascriptException exception);
}
public interface CefSharp.IRequest {
    public UrlRequestFlags Flags { get; public set; }
    public string Url { get; public set; }
    public ulong Identifier { get; }
    public string Method { get; public set; }
    public string ReferrerUrl { get; }
    public ResourceType ResourceType { get; }
    public ReferrerPolicy ReferrerPolicy { get; }
    public NameValueCollection Headers { get; public set; }
    public IPostData PostData { get; public set; }
    public TransitionType TransitionType { get; }
    public bool IsDisposed { get; }
    public bool IsReadOnly { get; }
    public abstract virtual UrlRequestFlags get_Flags();
    public abstract virtual void set_Flags(UrlRequestFlags value);
    public abstract virtual string get_Url();
    public abstract virtual void set_Url(string value);
    public abstract virtual ulong get_Identifier();
    public abstract virtual string get_Method();
    public abstract virtual void set_Method(string value);
    public abstract virtual void SetReferrer(string referrerUrl, ReferrerPolicy policy);
    public abstract virtual string get_ReferrerUrl();
    public abstract virtual ResourceType get_ResourceType();
    public abstract virtual ReferrerPolicy get_ReferrerPolicy();
    public abstract virtual NameValueCollection get_Headers();
    public abstract virtual void set_Headers(NameValueCollection value);
    public abstract virtual IPostData get_PostData();
    public abstract virtual void set_PostData(IPostData value);
    public abstract virtual TransitionType get_TransitionType();
    public abstract virtual bool get_IsDisposed();
    public abstract virtual bool get_IsReadOnly();
    public abstract virtual void InitializePostData();
    public abstract virtual string GetHeaderByName(string name);
    public abstract virtual void SetHeaderByName(string name, string value, bool overwrite);
    [EditorBrowsableAttribute("1")]
public abstract virtual IRequest UnWrap();
}
public interface CefSharp.IRequestCallback {
    public bool IsDisposed { get; }
    public abstract virtual void Continue(bool allow);
    public abstract virtual void Cancel();
    public abstract virtual bool get_IsDisposed();
}
public interface CefSharp.IRequestContext {
    public bool IsDisposed { get; }
    public bool IsGlobal { get; }
    public string CachePath { get; }
    public abstract virtual bool get_IsDisposed();
    public abstract virtual bool IsSame(IRequestContext context);
    public abstract virtual bool IsSharingWith(IRequestContext context);
    public abstract virtual bool get_IsGlobal();
    public abstract virtual ICookieManager GetCookieManager(ICompletionCallback callback);
    public abstract virtual bool RegisterSchemeHandlerFactory(string schemeName, string domainName, ISchemeHandlerFactory factory);
    public abstract virtual bool ClearSchemeHandlerFactories();
    public abstract virtual string get_CachePath();
    public abstract virtual bool HasPreference(string name);
    public abstract virtual object GetPreference(string name);
    public abstract virtual IDictionary`2<string, object> GetAllPreferences(bool includeDefaults);
    public abstract virtual bool CanSetPreference(string name);
    public abstract virtual bool SetPreference(string name, object value, String& error);
    public abstract virtual void ClearCertificateExceptions(ICompletionCallback callback);
    public abstract virtual void ClearHttpAuthCredentials(ICompletionCallback callback);
    public abstract virtual void CloseAllConnections(ICompletionCallback callback);
    public abstract virtual Task`1<ResolveCallbackResult> ResolveHostAsync(Uri origin);
    [EditorBrowsableAttribute("1")]
public abstract virtual IRequestContext UnWrap();
}
public interface CefSharp.IRequestContextHandler {
    public abstract virtual void OnRequestContextInitialized(IRequestContext requestContext);
    public abstract virtual IResourceRequestHandler GetResourceRequestHandler(IBrowser browser, IFrame frame, IRequest request, bool isNavigation, bool isDownload, string requestInitiator, Boolean& disableDefaultHandling);
}
public interface CefSharp.IRequestHandler {
    public abstract virtual bool OnBeforeBrowse(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame, IRequest request, bool userGesture, bool isRedirect);
    public abstract virtual void OnDocumentAvailableInMainFrame(IWebBrowser chromiumWebBrowser, IBrowser browser);
    public abstract virtual bool OnOpenUrlFromTab(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame, string targetUrl, WindowOpenDisposition targetDisposition, bool userGesture);
    public abstract virtual IResourceRequestHandler GetResourceRequestHandler(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame, IRequest request, bool isNavigation, bool isDownload, string requestInitiator, Boolean& disableDefaultHandling);
    public abstract virtual bool GetAuthCredentials(IWebBrowser chromiumWebBrowser, IBrowser browser, string originUrl, bool isProxy, string host, int port, string realm, string scheme, IAuthCallback callback);
    public abstract virtual bool OnCertificateError(IWebBrowser chromiumWebBrowser, IBrowser browser, CefErrorCode errorCode, string requestUrl, ISslInfo sslInfo, IRequestCallback callback);
    public abstract virtual bool OnSelectClientCertificate(IWebBrowser chromiumWebBrowser, IBrowser browser, bool isProxy, string host, int port, X509Certificate2Collection certificates, ISelectClientCertificateCallback callback);
    public abstract virtual void OnRenderViewReady(IWebBrowser chromiumWebBrowser, IBrowser browser);
    public abstract virtual void OnRenderProcessTerminated(IWebBrowser chromiumWebBrowser, IBrowser browser, CefTerminationStatus status, int errorCode, string errorMessage);
}
public interface CefSharp.IResolveCallback {
    public bool IsDisposed { get; }
    public abstract virtual void OnResolveCompleted(CefErrorCode result, IList`1<string> resolvedIpAddresses);
    public abstract virtual bool get_IsDisposed();
}
public interface CefSharp.IResourceHandler {
    public abstract virtual bool Open(IRequest request, Boolean& handleRequest, ICallback callback);
    [ObsoleteAttribute("This method is deprecated and will be removed in the next version. Use Open instead.")]
public abstract virtual bool ProcessRequest(IRequest request, ICallback callback);
    public abstract virtual void GetResponseHeaders(IResponse response, Int64& responseLength, String& redirectUrl);
    public abstract virtual bool Skip(long bytesToSkip, Int64& bytesSkipped, IResourceSkipCallback callback);
    public abstract virtual bool Read(Stream dataOut, Int32& bytesRead, IResourceReadCallback callback);
    [ObsoleteAttribute("This method is deprecated and will be removed in the next version. Use Skip and Read instead.")]
public abstract virtual bool ReadResponse(Stream dataOut, Int32& bytesRead, ICallback callback);
    public abstract virtual void Cancel();
}
public interface CefSharp.IResourceRequestHandler {
    public abstract virtual ICookieAccessFilter GetCookieAccessFilter(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame, IRequest request);
    public abstract virtual CefReturnValue OnBeforeResourceLoad(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame, IRequest request, IRequestCallback callback);
    public abstract virtual IResourceHandler GetResourceHandler(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame, IRequest request);
    public abstract virtual void OnResourceRedirect(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame, IRequest request, IResponse response, String& newUrl);
    public abstract virtual bool OnResourceResponse(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame, IRequest request, IResponse response);
    public abstract virtual IResponseFilter GetResourceResponseFilter(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame, IRequest request, IResponse response);
    public abstract virtual void OnResourceLoadComplete(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame, IRequest request, IResponse response, UrlRequestStatus status, long receivedContentLength);
    public abstract virtual bool OnProtocolExecution(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame, IRequest request);
}
public interface CefSharp.IResourceRequestHandlerFactory {
    public bool HasHandlers { get; }
    public abstract virtual bool get_HasHandlers();
    public abstract virtual IResourceRequestHandler GetResourceRequestHandler(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame, IRequest request, bool isNavigation, bool isDownload, string requestInitiator, Boolean& disableDefaultHandling);
}
public interface CefSharp.IResponse {
    public string Charset { get; public set; }
    public string MimeType { get; public set; }
    public NameValueCollection Headers { get; public set; }
    public bool IsReadOnly { get; }
    public CefErrorCode ErrorCode { get; public set; }
    public int StatusCode { get; public set; }
    public string StatusText { get; public set; }
    public abstract virtual string get_Charset();
    public abstract virtual void set_Charset(string value);
    public abstract virtual string get_MimeType();
    public abstract virtual void set_MimeType(string value);
    public abstract virtual NameValueCollection get_Headers();
    public abstract virtual void set_Headers(NameValueCollection value);
    public abstract virtual bool get_IsReadOnly();
    public abstract virtual CefErrorCode get_ErrorCode();
    public abstract virtual void set_ErrorCode(CefErrorCode value);
    public abstract virtual int get_StatusCode();
    public abstract virtual void set_StatusCode(int value);
    public abstract virtual string get_StatusText();
    public abstract virtual void set_StatusText(string value);
    public abstract virtual string GetHeaderByName(string name);
    public abstract virtual void SetHeaderByName(string name, string value, bool overwrite);
}
public interface CefSharp.IResponseFilter {
    public abstract virtual bool InitFilter();
    public abstract virtual FilterStatus Filter(Stream dataIn, Int64& dataInRead, Stream dataOut, Int64& dataOutWritten);
}
public interface CefSharp.IRunContextMenuCallback {
    public bool IsDisposed { get; }
    public abstract virtual void Continue(CefMenuCommand commandId, CefEventFlags eventFlags);
    public abstract virtual void Cancel();
    public abstract virtual bool get_IsDisposed();
}
public interface CefSharp.ISchemeHandlerFactory {
    public abstract virtual IResourceHandler Create(IBrowser browser, IFrame frame, string schemeName, IRequest request);
}
public interface CefSharp.ISchemeRegistrar {
    public abstract virtual bool AddCustomScheme(string schemeName, SchemeOptions schemeOptions);
}
public interface CefSharp.ISelectClientCertificateCallback {
    public bool IsDisposed { get; }
    public abstract virtual void Select(X509Certificate2 selectedCert);
    public abstract virtual bool get_IsDisposed();
}
public interface CefSharp.ISetCookieCallback {
    public bool IsDisposed { get; }
    public abstract virtual void OnComplete(bool success);
    public abstract virtual bool get_IsDisposed();
}
public interface CefSharp.ISslInfo {
    public CertStatus CertStatus { get; }
    public X509Certificate2 X509Certificate { get; }
    public abstract virtual CertStatus get_CertStatus();
    public abstract virtual X509Certificate2 get_X509Certificate();
}
public interface CefSharp.IStringVisitor {
    public abstract virtual void Visit(string str);
}
public interface CefSharp.IUrlRequest {
    public bool ResponseWasCached { get; }
    public IResponse Response { get; }
    public UrlRequestStatus RequestStatus { get; }
    public abstract virtual bool get_ResponseWasCached();
    public abstract virtual IResponse get_Response();
    public abstract virtual UrlRequestStatus get_RequestStatus();
}
public interface CefSharp.IUrlRequestClient {
    public abstract virtual bool GetAuthCredentials(bool isProxy, string host, int port, string realm, string scheme, IAuthCallback callback);
    public abstract virtual void OnDownloadData(IUrlRequest request, Stream data);
    public abstract virtual void OnDownloadProgress(IUrlRequest request, long current, long total);
    public abstract virtual void OnRequestComplete(IUrlRequest request);
    public abstract virtual void OnUploadProgress(IUrlRequest request, long current, long total);
}
public interface CefSharp.IValue {
    public ValueType Type { get; }
    public abstract virtual ValueType get_Type();
    public abstract virtual bool GetBool();
    public abstract virtual double GetDouble();
    public abstract virtual int GetInt();
    public abstract virtual string GetString();
    public abstract virtual IDictionary`2<string, IValue> GetDictionary();
    public abstract virtual IList`1<IValue> GetList();
    public abstract virtual object GetObject();
}
public interface CefSharp.IWebBrowser {
    public IJavascriptObjectRepository JavascriptObjectRepository { get; }
    public IDialogHandler DialogHandler { get; public set; }
    public IRequestHandler RequestHandler { get; public set; }
    public IDisplayHandler DisplayHandler { get; public set; }
    public ILoadHandler LoadHandler { get; public set; }
    public ILifeSpanHandler LifeSpanHandler { get; public set; }
    public IKeyboardHandler KeyboardHandler { get; public set; }
    public IJsDialogHandler JsDialogHandler { get; public set; }
    public IDragHandler DragHandler { get; public set; }
    public IDownloadHandler DownloadHandler { get; public set; }
    public IContextMenuHandler MenuHandler { get; public set; }
    public IFocusHandler FocusHandler { get; public set; }
    public IResourceRequestHandlerFactory ResourceRequestHandlerFactory { get; public set; }
    public IRenderProcessMessageHandler RenderProcessMessageHandler { get; public set; }
    public IFindHandler FindHandler { get; public set; }
    public IAudioHandler AudioHandler { get; public set; }
    public IFrameHandler FrameHandler { get; public set; }
    public IPermissionHandler PermissionHandler { get; public set; }
    public string TooltipText { get; }
    public bool CanExecuteJavascriptInMainFrame { get; }
    public IRequestContext RequestContext { get; }
    [CompilerGeneratedAttribute]
public abstract virtual void add_JavascriptMessageReceived(EventHandler`1<JavascriptMessageReceivedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_JavascriptMessageReceived(EventHandler`1<JavascriptMessageReceivedEventArgs> value);
    public abstract virtual void Load(string url);
    public abstract virtual Task`1<LoadUrlAsyncResponse> WaitForInitialLoadAsync();
    public abstract virtual IJavascriptObjectRepository get_JavascriptObjectRepository();
    public abstract virtual IDialogHandler get_DialogHandler();
    public abstract virtual void set_DialogHandler(IDialogHandler value);
    public abstract virtual IRequestHandler get_RequestHandler();
    public abstract virtual void set_RequestHandler(IRequestHandler value);
    public abstract virtual IDisplayHandler get_DisplayHandler();
    public abstract virtual void set_DisplayHandler(IDisplayHandler value);
    public abstract virtual ILoadHandler get_LoadHandler();
    public abstract virtual void set_LoadHandler(ILoadHandler value);
    public abstract virtual ILifeSpanHandler get_LifeSpanHandler();
    public abstract virtual void set_LifeSpanHandler(ILifeSpanHandler value);
    public abstract virtual IKeyboardHandler get_KeyboardHandler();
    public abstract virtual void set_KeyboardHandler(IKeyboardHandler value);
    public abstract virtual IJsDialogHandler get_JsDialogHandler();
    public abstract virtual void set_JsDialogHandler(IJsDialogHandler value);
    public abstract virtual IDragHandler get_DragHandler();
    public abstract virtual void set_DragHandler(IDragHandler value);
    public abstract virtual IDownloadHandler get_DownloadHandler();
    public abstract virtual void set_DownloadHandler(IDownloadHandler value);
    public abstract virtual IContextMenuHandler get_MenuHandler();
    public abstract virtual void set_MenuHandler(IContextMenuHandler value);
    public abstract virtual IFocusHandler get_FocusHandler();
    public abstract virtual void set_FocusHandler(IFocusHandler value);
    public abstract virtual IResourceRequestHandlerFactory get_ResourceRequestHandlerFactory();
    public abstract virtual void set_ResourceRequestHandlerFactory(IResourceRequestHandlerFactory value);
    public abstract virtual IRenderProcessMessageHandler get_RenderProcessMessageHandler();
    public abstract virtual void set_RenderProcessMessageHandler(IRenderProcessMessageHandler value);
    public abstract virtual IFindHandler get_FindHandler();
    public abstract virtual void set_FindHandler(IFindHandler value);
    public abstract virtual IAudioHandler get_AudioHandler();
    public abstract virtual void set_AudioHandler(IAudioHandler value);
    public abstract virtual IFrameHandler get_FrameHandler();
    public abstract virtual void set_FrameHandler(IFrameHandler value);
    public abstract virtual IPermissionHandler get_PermissionHandler();
    public abstract virtual void set_PermissionHandler(IPermissionHandler value);
    public abstract virtual string get_TooltipText();
    public abstract virtual bool get_CanExecuteJavascriptInMainFrame();
    public abstract virtual IRequestContext get_RequestContext();
    public abstract virtual IBrowser GetBrowser();
    public abstract virtual bool TryGetBrowserCoreById(int browserId, IBrowser& browser);
    public abstract virtual Task`1<DomRect> GetContentSizeAsync();
}
public interface CefSharp.IWindowInfo {
    public int X { get; public set; }
    public int Y { get; public set; }
    public int Width { get; public set; }
    public int Height { get; public set; }
    public UInt32 Style { get; public set; }
    public UInt32 ExStyle { get; public set; }
    public IntPtr ParentWindowHandle { get; public set; }
    public bool WindowlessRenderingEnabled { get; public set; }
    public bool SharedTextureEnabled { get; public set; }
    public bool ExternalBeginFrameEnabled { get; public set; }
    public IntPtr WindowHandle { get; public set; }
    public string WindowName { get; public set; }
    public CefRuntimeStyle RuntimeStyle { get; public set; }
    public abstract virtual int get_X();
    public abstract virtual void set_X(int value);
    public abstract virtual int get_Y();
    public abstract virtual void set_Y(int value);
    public abstract virtual int get_Width();
    public abstract virtual void set_Width(int value);
    public abstract virtual int get_Height();
    public abstract virtual void set_Height(int value);
    public abstract virtual UInt32 get_Style();
    public abstract virtual void set_Style(UInt32 value);
    public abstract virtual UInt32 get_ExStyle();
    public abstract virtual void set_ExStyle(UInt32 value);
    public abstract virtual IntPtr get_ParentWindowHandle();
    public abstract virtual void set_ParentWindowHandle(IntPtr value);
    public abstract virtual bool get_WindowlessRenderingEnabled();
    public abstract virtual void set_WindowlessRenderingEnabled(bool value);
    public abstract virtual bool get_SharedTextureEnabled();
    public abstract virtual void set_SharedTextureEnabled(bool value);
    public abstract virtual bool get_ExternalBeginFrameEnabled();
    public abstract virtual void set_ExternalBeginFrameEnabled(bool value);
    public abstract virtual IntPtr get_WindowHandle();
    public abstract virtual void set_WindowHandle(IntPtr value);
    public abstract virtual string get_WindowName();
    public abstract virtual void set_WindowName(string value);
    public abstract virtual CefRuntimeStyle get_RuntimeStyle();
    public abstract virtual void set_RuntimeStyle(CefRuntimeStyle value);
    public abstract virtual void SetAsChild(IntPtr parentHandle);
    public abstract virtual void SetAsChild(IntPtr parentHandle, Rect windowBounds);
    public abstract virtual void SetAsChild(IntPtr parentHandle, int left, int top, int right, int bottom);
    public abstract virtual void SetAsPopup(IntPtr parentHandle, string windowName);
    public abstract virtual void SetAsWindowless(IntPtr parentHandle);
    [EditorBrowsableAttribute("1")]
public abstract virtual IWindowInfo UnWrap();
}
public class CefSharp.JavascriptBinding.CamelCaseJavascriptNameConverter : object {
    private sealed virtual override string CefSharp.JavascriptBinding.IJavascriptNameConverter.ConvertToJavascript(MemberInfo memberInfo);
    protected virtual string ConvertToJavascript(MemberInfo memberInfo);
    private sealed virtual override string CefSharp.JavascriptBinding.IJavascriptNameConverter.ConvertReturnedObjectPropertyAndFieldToNameJavascript(MemberInfo memberInfo);
    protected virtual string ConvertReturnedObjectPropertyAndFieldToNameJavascript(MemberInfo memberInfo);
    protected static string ConvertMemberInfoNameToCamelCase(MemberInfo memberInfo);
}
public interface CefSharp.JavascriptBinding.IJavascriptNameConverter {
    public abstract virtual string ConvertToJavascript(MemberInfo memberInfo);
    public abstract virtual string ConvertReturnedObjectPropertyAndFieldToNameJavascript(MemberInfo memberInfo);
}
public class CefSharp.JavascriptBinding.JavascriptBindingSettings : FreezableBase {
    private bool alwaysInterceptAsynchronously;
    private bool legacyBindingEnabled;
    private string jsBindingGlobalObjectName;
    private bool jsBindingApiEnabled;
    public bool JavascriptBindingApiEnabled { get; public set; }
    public string JavascriptBindingApiGlobalObjectName { get; public set; }
    public bool LegacyBindingEnabled { get; public set; }
    public bool AlwaysInterceptAsynchronously { get; public set; }
    public bool get_JavascriptBindingApiEnabled();
    public void set_JavascriptBindingApiEnabled(bool value);
    public string get_JavascriptBindingApiGlobalObjectName();
    public void set_JavascriptBindingApiGlobalObjectName(string value);
    public bool get_LegacyBindingEnabled();
    public void set_LegacyBindingEnabled(bool value);
    public bool get_AlwaysInterceptAsynchronously();
    public void set_AlwaysInterceptAsynchronously(bool value);
}
public class CefSharp.JavascriptBinding.LegacyCamelCaseJavascriptNameConverter : object {
    private sealed virtual override string CefSharp.JavascriptBinding.IJavascriptNameConverter.ConvertReturnedObjectPropertyAndFieldToNameJavascript(MemberInfo memberInfo);
    private sealed virtual override string CefSharp.JavascriptBinding.IJavascriptNameConverter.ConvertToJavascript(MemberInfo memberInfo);
}
[ExtensionAttribute]
public static class CefSharp.JavascriptBindingExtensions : object {
    [ExtensionAttribute]
public static Task`1<IList`1<string>> EnsureObjectBoundAsync(IWebBrowser browser, String[] names);
}
public class CefSharp.JavascriptException : object {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private JavascriptStackFrame[] <StackTrace>k__BackingField;
    public string Message { get; public set; }
    public JavascriptStackFrame[] StackTrace { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(string value);
    [CompilerGeneratedAttribute]
public JavascriptStackFrame[] get_StackTrace();
    [CompilerGeneratedAttribute]
public void set_StackTrace(JavascriptStackFrame[] value);
}
[AttributeUsageAttribute("192")]
public class CefSharp.JavascriptIgnoreAttribute : Attribute {
}
public class CefSharp.JavascriptMessageReceivedEventArgs : EventArgs {
    private static IBinder Binder;
    [CompilerGeneratedAttribute]
private IFrame <Frame>k__BackingField;
    [CompilerGeneratedAttribute]
private IBrowser <Browser>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Message>k__BackingField;
    public IFrame Frame { get; private set; }
    public IBrowser Browser { get; private set; }
    public object Message { get; private set; }
    public JavascriptMessageReceivedEventArgs(IBrowser browser, IFrame frame, object message);
    private static JavascriptMessageReceivedEventArgs();
    [CompilerGeneratedAttribute]
public IFrame get_Frame();
    [CompilerGeneratedAttribute]
private void set_Frame(IFrame value);
    [CompilerGeneratedAttribute]
public IBrowser get_Browser();
    [CompilerGeneratedAttribute]
private void set_Browser(IBrowser value);
    [CompilerGeneratedAttribute]
public object get_Message();
    [CompilerGeneratedAttribute]
private void set_Message(object value);
    public T ConvertMessageTo();
    public static void SetBinder(IBinder binder);
}
[DataContractAttribute]
[KnownTypeAttribute("System.Object[]")]
[KnownTypeAttribute("CefSharp.Internals.JavascriptCallback")]
[KnownTypeAttribute("System.Collections.Generic.Dictionary`2<System.String,System.Object>")]
[DebuggerDisplayAttribute("Success = {Success}, Message = {Message}, Result = {Result}")]
public class CefSharp.JavascriptResponse : object {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Success>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Result>k__BackingField;
    [DataMemberAttribute]
public string Message { get; public set; }
    [DataMemberAttribute]
public bool Success { get; public set; }
    [DataMemberAttribute]
public object Result { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(string value);
    [CompilerGeneratedAttribute]
public bool get_Success();
    [CompilerGeneratedAttribute]
public void set_Success(bool value);
    [CompilerGeneratedAttribute]
public object get_Result();
    [CompilerGeneratedAttribute]
public void set_Result(object value);
}
public class CefSharp.JavascriptStackFrame : object {
    [CompilerGeneratedAttribute]
private string <FunctionName>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LineNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ColumnNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SourceName>k__BackingField;
    public string FunctionName { get; public set; }
    public int LineNumber { get; public set; }
    public int ColumnNumber { get; public set; }
    public string SourceName { get; public set; }
    [CompilerGeneratedAttribute]
public string get_FunctionName();
    [CompilerGeneratedAttribute]
public void set_FunctionName(string value);
    [CompilerGeneratedAttribute]
public int get_LineNumber();
    [CompilerGeneratedAttribute]
public void set_LineNumber(int value);
    [CompilerGeneratedAttribute]
public int get_ColumnNumber();
    [CompilerGeneratedAttribute]
public void set_ColumnNumber(int value);
    [CompilerGeneratedAttribute]
public string get_SourceName();
    [CompilerGeneratedAttribute]
public void set_SourceName(string value);
}
public class CefSharp.KeyEvent : ValueType {
    [CompilerGeneratedAttribute]
private KeyEventType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private CefEventFlags <Modifiers>k__BackingField;
    [CompilerGeneratedAttribute]
private int <WindowsKeyCode>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NativeKeyCode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSystemKey>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FocusOnEditableField>k__BackingField;
    public KeyEventType Type { get; public set; }
    public CefEventFlags Modifiers { get; public set; }
    public int WindowsKeyCode { get; public set; }
    public int NativeKeyCode { get; public set; }
    public bool IsSystemKey { get; public set; }
    public bool FocusOnEditableField { get; public set; }
    [CompilerGeneratedAttribute]
public KeyEventType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(KeyEventType value);
    [CompilerGeneratedAttribute]
public CefEventFlags get_Modifiers();
    [CompilerGeneratedAttribute]
public void set_Modifiers(CefEventFlags value);
    [CompilerGeneratedAttribute]
public int get_WindowsKeyCode();
    [CompilerGeneratedAttribute]
public void set_WindowsKeyCode(int value);
    [CompilerGeneratedAttribute]
public int get_NativeKeyCode();
    [CompilerGeneratedAttribute]
public void set_NativeKeyCode(int value);
    [CompilerGeneratedAttribute]
public bool get_IsSystemKey();
    [CompilerGeneratedAttribute]
public void set_IsSystemKey(bool value);
    [CompilerGeneratedAttribute]
public bool get_FocusOnEditableField();
    [CompilerGeneratedAttribute]
public void set_FocusOnEditableField(bool value);
}
public enum CefSharp.KeyEventType : Enum {
    public int value__;
    public static KeyEventType RawKeyDown;
    public static KeyEventType KeyDown;
    public static KeyEventType KeyUp;
    public static KeyEventType Char;
}
public enum CefSharp.KeyType : Enum {
    public int value__;
    public static KeyType RawKeyDown;
    public static KeyType KeyDown;
    public static KeyType KeyUp;
    public static KeyType Char;
}
public class CefSharp.Lagacy.ResourceHandler : object {
    [CompilerGeneratedAttribute]
private string <Charset>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MimeType>k__BackingField;
    [CompilerGeneratedAttribute]
private Stream <Stream>k__BackingField;
    [CompilerGeneratedAttribute]
private int <StatusCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StatusText>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <ResponseLength>k__BackingField;
    [CompilerGeneratedAttribute]
private NameValueCollection <Headers>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AutoDisposeStream>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<CefErrorCode> <ErrorCode>k__BackingField;
    public string Charset { get; public set; }
    public string MimeType { get; public set; }
    public Stream Stream { get; public set; }
    public int StatusCode { get; public set; }
    public string StatusText { get; public set; }
    public Nullable`1<long> ResponseLength { get; public set; }
    public NameValueCollection Headers { get; private set; }
    public bool AutoDisposeStream { get; public set; }
    public Nullable`1<CefErrorCode> ErrorCode { get; public set; }
    public ResourceHandler(string mimeType, Stream stream, bool autoDisposeStream, string charset);
    [CompilerGeneratedAttribute]
public string get_Charset();
    [CompilerGeneratedAttribute]
public void set_Charset(string value);
    [CompilerGeneratedAttribute]
public string get_MimeType();
    [CompilerGeneratedAttribute]
public void set_MimeType(string value);
    [CompilerGeneratedAttribute]
public Stream get_Stream();
    [CompilerGeneratedAttribute]
public void set_Stream(Stream value);
    [CompilerGeneratedAttribute]
public int get_StatusCode();
    [CompilerGeneratedAttribute]
public void set_StatusCode(int value);
    [CompilerGeneratedAttribute]
public string get_StatusText();
    [CompilerGeneratedAttribute]
public void set_StatusText(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_ResponseLength();
    [CompilerGeneratedAttribute]
public void set_ResponseLength(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public NameValueCollection get_Headers();
    [CompilerGeneratedAttribute]
private void set_Headers(NameValueCollection value);
    [CompilerGeneratedAttribute]
public bool get_AutoDisposeStream();
    [CompilerGeneratedAttribute]
public void set_AutoDisposeStream(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<CefErrorCode> get_ErrorCode();
    [CompilerGeneratedAttribute]
public void set_ErrorCode(Nullable`1<CefErrorCode> value);
    protected virtual bool ProcessRequestAsync(IRequest request, ICallback callback);
    protected virtual void Cancel();
    protected virtual void Dispose();
    protected virtual Stream GetResponse(IResponse response, Int64& responseLength, String& redirectUrl);
    private sealed virtual override void CefSharp.IResourceHandler.Cancel();
    private sealed virtual override void System.IDisposable.Dispose();
    private sealed virtual override void CefSharp.IResourceHandler.GetResponseHeaders(IResponse response, Int64& responseLength, String& redirectUrl);
    private sealed virtual override bool CefSharp.IResourceHandler.Open(IRequest request, Boolean& handleRequest, ICallback callback);
    private sealed virtual override bool CefSharp.IResourceHandler.ProcessRequest(IRequest request, ICallback callback);
    private sealed virtual override bool CefSharp.IResourceHandler.Read(Stream dataOut, Int32& bytesRead, IResourceReadCallback callback);
    private sealed virtual override bool CefSharp.IResourceHandler.ReadResponse(Stream dataOut, Int32& bytesRead, ICallback callback);
    private sealed virtual override bool CefSharp.IResourceHandler.Skip(long bytesToSkip, Int64& bytesSkipped, IResourceSkipCallback callback);
}
public class CefSharp.LoadErrorEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private IBrowser <Browser>k__BackingField;
    [CompilerGeneratedAttribute]
private IFrame <Frame>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FailedUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private CefErrorCode <ErrorCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorText>k__BackingField;
    public IBrowser Browser { get; private set; }
    public IFrame Frame { get; private set; }
    public string FailedUrl { get; private set; }
    public CefErrorCode ErrorCode { get; private set; }
    public string ErrorText { get; private set; }
    public LoadErrorEventArgs(IBrowser browser, IFrame frame, CefErrorCode errorCode, string errorText, string failedUrl);
    [CompilerGeneratedAttribute]
public IBrowser get_Browser();
    [CompilerGeneratedAttribute]
private void set_Browser(IBrowser value);
    [CompilerGeneratedAttribute]
public IFrame get_Frame();
    [CompilerGeneratedAttribute]
private void set_Frame(IFrame value);
    [CompilerGeneratedAttribute]
public string get_FailedUrl();
    [CompilerGeneratedAttribute]
private void set_FailedUrl(string value);
    [CompilerGeneratedAttribute]
public CefErrorCode get_ErrorCode();
    [CompilerGeneratedAttribute]
private void set_ErrorCode(CefErrorCode value);
    [CompilerGeneratedAttribute]
public string get_ErrorText();
    [CompilerGeneratedAttribute]
private void set_ErrorText(string value);
}
public class CefSharp.LoadingStateChangedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private bool <CanGoForward>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CanGoBack>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CanReload>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsLoading>k__BackingField;
    [CompilerGeneratedAttribute]
private IBrowser <Browser>k__BackingField;
    public bool CanGoForward { get; private set; }
    public bool CanGoBack { get; private set; }
    public bool CanReload { get; private set; }
    public bool IsLoading { get; private set; }
    public IBrowser Browser { get; private set; }
    public LoadingStateChangedEventArgs(IBrowser browser, bool canGoBack, bool canGoForward, bool isLoading);
    [CompilerGeneratedAttribute]
public bool get_CanGoForward();
    [CompilerGeneratedAttribute]
private void set_CanGoForward(bool value);
    [CompilerGeneratedAttribute]
public bool get_CanGoBack();
    [CompilerGeneratedAttribute]
private void set_CanGoBack(bool value);
    [CompilerGeneratedAttribute]
public bool get_CanReload();
    [CompilerGeneratedAttribute]
private void set_CanReload(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsLoading();
    [CompilerGeneratedAttribute]
private void set_IsLoading(bool value);
    [CompilerGeneratedAttribute]
public IBrowser get_Browser();
    [CompilerGeneratedAttribute]
private void set_Browser(IBrowser value);
}
public class CefSharp.LoadUrlAsyncResponse : object {
    [CompilerGeneratedAttribute]
private CefErrorCode <ErrorCode>k__BackingField;
    [CompilerGeneratedAttribute]
private int <HttpStatusCode>k__BackingField;
    public CefErrorCode ErrorCode { get; private set; }
    public int HttpStatusCode { get; private set; }
    public bool Success { get; }
    public LoadUrlAsyncResponse(CefErrorCode errorCode, int httpStatusCode);
    [CompilerGeneratedAttribute]
public CefErrorCode get_ErrorCode();
    [CompilerGeneratedAttribute]
private void set_ErrorCode(CefErrorCode value);
    [CompilerGeneratedAttribute]
public int get_HttpStatusCode();
    [CompilerGeneratedAttribute]
private void set_HttpStatusCode(int value);
    public bool get_Success();
}
public enum CefSharp.LogSeverity : Enum {
    public int value__;
    public static LogSeverity Default;
    public static LogSeverity Verbose;
    public static LogSeverity Info;
    public static LogSeverity Warning;
    public static LogSeverity Error;
    public static LogSeverity Fatal;
    public static LogSeverity Disable;
}
[FlagsAttribute]
public enum CefSharp.MediaAccessPermissionType : Enum {
    public UInt32 value__;
    public static MediaAccessPermissionType None;
    public static MediaAccessPermissionType AudioCapture;
    public static MediaAccessPermissionType VideoCapture;
    public static MediaAccessPermissionType DesktopAudioCapture;
    public static MediaAccessPermissionType DesktopVideoCapture;
}
public enum CefSharp.MenuItemType : Enum {
    public int value__;
    public static MenuItemType None;
    public static MenuItemType Command;
    public static MenuItemType Check;
    public static MenuItemType Radio;
    public static MenuItemType Separator;
    public static MenuItemType SubMenu;
}
public class CefSharp.ModelBinding.BindingMemberInfo : object {
    private MemberInfo memberInfo;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    public string Name { get; private set; }
    public Type Type { get; private set; }
    public BindingMemberInfo(PropertyInfo propertyInfo);
    public BindingMemberInfo(FieldInfo fieldInfo);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public Type get_Type();
    [CompilerGeneratedAttribute]
private void set_Type(Type value);
    public void SetValue(object destinationObject, object newValue);
    public static MemberInfo op_Implicit(BindingMemberInfo info);
    public static IEnumerable`1<BindingMemberInfo> Collect(Type type);
}
public class CefSharp.ModelBinding.DefaultBinder : object {
    private static MethodInfo ToArrayMethodInfo;
    private IJavascriptNameConverter javascriptNameConverter;
    public static IBinder Instance;
    public DefaultBinder(IJavascriptNameConverter javascriptNameConverter);
    private static DefaultBinder();
    public virtual object Bind(object obj, Type targetType);
    protected virtual object BindCollection(Type targetType, Type objType, object obj);
    protected virtual object BindObject(Type targetType, Type objType, object obj);
    private string GetPropertyName(BindingMemberInfo modelProperty);
}
public interface CefSharp.ModelBinding.IAsyncMethodInterceptor {
    public abstract virtual Task`1<object> InterceptAsync(Func`2<Object[], object> method, Object[] parameters, string methodName);
}
public interface CefSharp.ModelBinding.IBinder {
    public abstract virtual object Bind(object obj, Type targetParamType);
}
public interface CefSharp.ModelBinding.IMethodInterceptor {
    public abstract virtual object Intercept(Func`2<Object[], object> method, Object[] parameters, string methodName);
}
public interface CefSharp.ModelBinding.IPropertyInterceptor {
    public abstract virtual object InterceptGet(Func`1<object> propertyGetter, string propertName);
    public abstract virtual void InterceptSet(Action`1<object> propertySetter, object parameter, string propertName);
}
[ExtensionAttribute]
internal static class CefSharp.ModelBinding.ModelBindingExtensions : object {
    [ExtensionAttribute]
public static bool IsArray(Type source);
    [ExtensionAttribute]
public static bool IsCollection(Type source);
    [ExtensionAttribute]
public static bool IsEnumerable(Type source);
}
public enum CefSharp.MouseButtonType : Enum {
    public int value__;
    public static MouseButtonType Left;
    public static MouseButtonType Middle;
    public static MouseButtonType Right;
}
public class CefSharp.MouseEvent : ValueType {
    [CompilerGeneratedAttribute]
private int <X>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Y>k__BackingField;
    [CompilerGeneratedAttribute]
private CefEventFlags <Modifiers>k__BackingField;
    public int X { get; private set; }
    public int Y { get; private set; }
    public CefEventFlags Modifiers { get; private set; }
    public MouseEvent(int x, int y, CefEventFlags modifiers);
    [CompilerGeneratedAttribute]
public int get_X();
    [CompilerGeneratedAttribute]
private void set_X(int value);
    [CompilerGeneratedAttribute]
public int get_Y();
    [CompilerGeneratedAttribute]
private void set_Y(int value);
    [CompilerGeneratedAttribute]
public CefEventFlags get_Modifiers();
    [CompilerGeneratedAttribute]
private void set_Modifiers(CefEventFlags value);
}
public class CefSharp.NavigationEntry : object {
    [CompilerGeneratedAttribute]
private DateTime <CompletionTime>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private int <HttpStatusCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OriginalUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private TransitionType <TransitionType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasPostData>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsValid>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsCurrent>k__BackingField;
    [CompilerGeneratedAttribute]
private SslStatus <SslStatus>k__BackingField;
    public DateTime CompletionTime { get; private set; }
    public string DisplayUrl { get; private set; }
    public int HttpStatusCode { get; private set; }
    public string OriginalUrl { get; private set; }
    public string Title { get; private set; }
    public TransitionType TransitionType { get; private set; }
    public string Url { get; private set; }
    public bool HasPostData { get; private set; }
    public bool IsValid { get; private set; }
    public bool IsCurrent { get; private set; }
    public SslStatus SslStatus { get; private set; }
    public NavigationEntry(bool isCurrent, DateTime completionTime, string displayUrl, int httpStatusCode, string originalUrl, string title, TransitionType transitionType, string url, bool hasPostData, bool isValid, SslStatus sslStatus);
    [CompilerGeneratedAttribute]
public DateTime get_CompletionTime();
    [CompilerGeneratedAttribute]
private void set_CompletionTime(DateTime value);
    [CompilerGeneratedAttribute]
public string get_DisplayUrl();
    [CompilerGeneratedAttribute]
private void set_DisplayUrl(string value);
    [CompilerGeneratedAttribute]
public int get_HttpStatusCode();
    [CompilerGeneratedAttribute]
private void set_HttpStatusCode(int value);
    [CompilerGeneratedAttribute]
public string get_OriginalUrl();
    [CompilerGeneratedAttribute]
private void set_OriginalUrl(string value);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
private void set_Title(string value);
    [CompilerGeneratedAttribute]
public TransitionType get_TransitionType();
    [CompilerGeneratedAttribute]
private void set_TransitionType(TransitionType value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
private void set_Url(string value);
    [CompilerGeneratedAttribute]
public bool get_HasPostData();
    [CompilerGeneratedAttribute]
private void set_HasPostData(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsValid();
    [CompilerGeneratedAttribute]
private void set_IsValid(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsCurrent();
    [CompilerGeneratedAttribute]
private void set_IsCurrent(bool value);
    [CompilerGeneratedAttribute]
public SslStatus get_SslStatus();
    [CompilerGeneratedAttribute]
private void set_SslStatus(SslStatus value);
}
public enum CefSharp.PaintElementType : Enum {
    public int value__;
    public static PaintElementType View;
    public static PaintElementType Popup;
}
public class CefSharp.PdfPrintSettings : object {
    [CompilerGeneratedAttribute]
private bool <Landscape>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PrintBackground>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Scale>k__BackingField;
    [CompilerGeneratedAttribute]
private double <PaperWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private double <PaperHeight>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PreferCssPageSize>k__BackingField;
    [CompilerGeneratedAttribute]
private CefPdfPrintMarginType <MarginType>k__BackingField;
    [CompilerGeneratedAttribute]
private double <MarginLeft>k__BackingField;
    [CompilerGeneratedAttribute]
private double <MarginTop>k__BackingField;
    [CompilerGeneratedAttribute]
private double <MarginRight>k__BackingField;
    [CompilerGeneratedAttribute]
private double <MarginBottom>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PageRanges>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisplayHeaderFooter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HeaderTemplate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FooterTemplate>k__BackingField;
    public bool Landscape { get; public set; }
    public bool PrintBackground { get; public set; }
    public double Scale { get; public set; }
    public double PaperWidth { get; public set; }
    public double PaperHeight { get; public set; }
    public bool PreferCssPageSize { get; public set; }
    public CefPdfPrintMarginType MarginType { get; public set; }
    public double MarginLeft { get; public set; }
    public double MarginTop { get; public set; }
    public double MarginRight { get; public set; }
    public double MarginBottom { get; public set; }
    public string PageRanges { get; public set; }
    public bool DisplayHeaderFooter { get; public set; }
    public string HeaderTemplate { get; public set; }
    public string FooterTemplate { get; public set; }
    [ObsoleteAttribute("Use PrintBackground instead")]
public bool BackgroundsEnabled { get; public set; }
    [ObsoleteAttribute("Use DisplayHeaderFooter instead")]
public bool HeaderFooterEnabled { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Landscape();
    [CompilerGeneratedAttribute]
public void set_Landscape(bool value);
    [CompilerGeneratedAttribute]
public bool get_PrintBackground();
    [CompilerGeneratedAttribute]
public void set_PrintBackground(bool value);
    [CompilerGeneratedAttribute]
public double get_Scale();
    [CompilerGeneratedAttribute]
public void set_Scale(double value);
    [CompilerGeneratedAttribute]
public double get_PaperWidth();
    [CompilerGeneratedAttribute]
public void set_PaperWidth(double value);
    [CompilerGeneratedAttribute]
public double get_PaperHeight();
    [CompilerGeneratedAttribute]
public void set_PaperHeight(double value);
    [CompilerGeneratedAttribute]
public bool get_PreferCssPageSize();
    [CompilerGeneratedAttribute]
public void set_PreferCssPageSize(bool value);
    [CompilerGeneratedAttribute]
public CefPdfPrintMarginType get_MarginType();
    [CompilerGeneratedAttribute]
public void set_MarginType(CefPdfPrintMarginType value);
    [CompilerGeneratedAttribute]
public double get_MarginLeft();
    [CompilerGeneratedAttribute]
public void set_MarginLeft(double value);
    [CompilerGeneratedAttribute]
public double get_MarginTop();
    [CompilerGeneratedAttribute]
public void set_MarginTop(double value);
    [CompilerGeneratedAttribute]
public double get_MarginRight();
    [CompilerGeneratedAttribute]
public void set_MarginRight(double value);
    [CompilerGeneratedAttribute]
public double get_MarginBottom();
    [CompilerGeneratedAttribute]
public void set_MarginBottom(double value);
    [CompilerGeneratedAttribute]
public string get_PageRanges();
    [CompilerGeneratedAttribute]
public void set_PageRanges(string value);
    [CompilerGeneratedAttribute]
public bool get_DisplayHeaderFooter();
    [CompilerGeneratedAttribute]
public void set_DisplayHeaderFooter(bool value);
    [CompilerGeneratedAttribute]
public string get_HeaderTemplate();
    [CompilerGeneratedAttribute]
public void set_HeaderTemplate(string value);
    [CompilerGeneratedAttribute]
public string get_FooterTemplate();
    [CompilerGeneratedAttribute]
public void set_FooterTemplate(string value);
    public bool get_BackgroundsEnabled();
    public void set_BackgroundsEnabled(bool value);
    public bool get_HeaderFooterEnabled();
    public void set_HeaderFooterEnabled(bool value);
}
public enum CefSharp.PermissionRequestResult : Enum {
    public UInt32 value__;
    public static PermissionRequestResult Accept;
    public static PermissionRequestResult Deny;
    public static PermissionRequestResult Dismiss;
    public static PermissionRequestResult Ignore;
}
[FlagsAttribute]
public enum CefSharp.PermissionRequestType : Enum {
    public UInt32 value__;
    public static PermissionRequestType None;
    public static PermissionRequestType AccessibilityEvents;
    public static PermissionRequestType ArSession;
    public static PermissionRequestType CameraPanTiltZoom;
    public static PermissionRequestType CameraStream;
    public static PermissionRequestType Clipboard;
    public static PermissionRequestType DiskQuota;
    public static PermissionRequestType LocalFonts;
    public static PermissionRequestType Geolocation;
    public static PermissionRequestType IdleDetection;
    public static PermissionRequestType MicStream;
    public static PermissionRequestType MidiSysex;
    public static PermissionRequestType MultipleDownloads;
    public static PermissionRequestType Notifications;
    public static PermissionRequestType ProtectedMediaIdentifier;
    public static PermissionRequestType RegisterProtocolHandler;
    public static PermissionRequestType SecurityAttestation;
    public static PermissionRequestType StorageAccess;
    public static PermissionRequestType U2FApiRequest;
    public static PermissionRequestType VrSession;
    public static PermissionRequestType WindowPlacement;
}
public enum CefSharp.PostDataElementType : Enum {
    public int value__;
    public static PostDataElementType Empty;
    public static PostDataElementType Bytes;
    public static PostDataElementType File;
}
[ExtensionAttribute]
public static class CefSharp.PostDataExtensions : object {
    [ExtensionAttribute]
public static string GetCharSet(IRequest request);
    [ExtensionAttribute]
public static string GetBody(IPostDataElement postDataElement, string charSet);
    [ExtensionAttribute]
public static void AddFile(IPostData postData, string fileName);
    [ExtensionAttribute]
public static void AddData(IPostData postData, string data, Encoding encoding);
    [ExtensionAttribute]
public static void AddData(IPostData postData, Byte[] bytes);
}
public class CefSharp.Preferences.SetPreferenceResponse : object {
    [CompilerGeneratedAttribute]
private bool <Success>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorMessage>k__BackingField;
    public bool Success { get; private set; }
    public string ErrorMessage { get; private set; }
    public SetPreferenceResponse(bool success, string errorMessage);
    [CompilerGeneratedAttribute]
public bool get_Success();
    [CompilerGeneratedAttribute]
private void set_Success(bool value);
    [CompilerGeneratedAttribute]
public string get_ErrorMessage();
    [CompilerGeneratedAttribute]
private void set_ErrorMessage(string value);
}
public class CefSharp.Preferences.SetProxyResponse : SetPreferenceResponse {
    public SetProxyResponse(bool success, string errorMessage);
}
public class CefSharp.ProxyOptions : object {
    [CompilerGeneratedAttribute]
private string <IP>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Port>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Username>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Password>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BypassList>k__BackingField;
    public string IP { get; private set; }
    public string Port { get; private set; }
    public string Username { get; public set; }
    public string Password { get; public set; }
    public string BypassList { get; private set; }
    public ProxyOptions(string ip, string port, string username, string password, string bypassList);
    [CompilerGeneratedAttribute]
public string get_IP();
    [CompilerGeneratedAttribute]
private void set_IP(string value);
    [CompilerGeneratedAttribute]
public string get_Port();
    [CompilerGeneratedAttribute]
private void set_Port(string value);
    [CompilerGeneratedAttribute]
public string get_Username();
    [CompilerGeneratedAttribute]
public void set_Username(string value);
    [CompilerGeneratedAttribute]
public string get_Password();
    [CompilerGeneratedAttribute]
public void set_Password(string value);
    [CompilerGeneratedAttribute]
public string get_BypassList();
    [CompilerGeneratedAttribute]
private void set_BypassList(string value);
    public bool HasUsernameAndPassword();
}
public enum CefSharp.ReferrerPolicy : Enum {
    public int value__;
    public static ReferrerPolicy ClearReferrerOnTransitionFromSecureToInsecure;
    public static ReferrerPolicy Default;
    public static ReferrerPolicy ReduceReferrerGranularityOnTransitionCrossOrigin;
    public static ReferrerPolicy OriginOnlyOnTransitionCrossOrigin;
    public static ReferrerPolicy NeverClearReferrer;
    public static ReferrerPolicy Origin;
    public static ReferrerPolicy ClearReferrerOnTransitionCrossOrigin;
    public static ReferrerPolicy OriginClearOnTransitionFromSecureToInsecure;
    public static ReferrerPolicy NoReferrer;
    public static ReferrerPolicy LastValue;
}
public interface CefSharp.RenderProcess.IRenderProcessHandler {
    public abstract virtual void OnContextCreated(IBrowser browser, IFrame frame, IV8Context context);
    public abstract virtual void OnContextReleased(IBrowser browser, IFrame frame, IV8Context context);
    public abstract virtual void OnWebKitInitialized();
}
public interface CefSharp.RenderProcess.IV8Context {
    public abstract virtual bool Execute(string code, string scriptUrl, int startLine, V8Exception& exception);
}
public class CefSharp.RenderProcess.V8Exception : object {
    [CompilerGeneratedAttribute]
private int <EndColumn>k__BackingField;
    [CompilerGeneratedAttribute]
private int <EndPosition>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LineNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ScriptResourceName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SourceLine>k__BackingField;
    [CompilerGeneratedAttribute]
private int <StartColumn>k__BackingField;
    [CompilerGeneratedAttribute]
private int <StartPosition>k__BackingField;
    public int EndColumn { get; private set; }
    public int EndPosition { get; private set; }
    public int LineNumber { get; private set; }
    public string Message { get; private set; }
    public string ScriptResourceName { get; private set; }
    public string SourceLine { get; private set; }
    public int StartColumn { get; private set; }
    public int StartPosition { get; private set; }
    public V8Exception(int endColumn, int endPosition, int lineNumber, string message, string scriptResourceName, string sourceLine, int startColumn, int startPosition);
    [CompilerGeneratedAttribute]
public int get_EndColumn();
    [CompilerGeneratedAttribute]
private void set_EndColumn(int value);
    [CompilerGeneratedAttribute]
public int get_EndPosition();
    [CompilerGeneratedAttribute]
private void set_EndPosition(int value);
    [CompilerGeneratedAttribute]
public int get_LineNumber();
    [CompilerGeneratedAttribute]
private void set_LineNumber(int value);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
private void set_Message(string value);
    [CompilerGeneratedAttribute]
public string get_ScriptResourceName();
    [CompilerGeneratedAttribute]
private void set_ScriptResourceName(string value);
    [CompilerGeneratedAttribute]
public string get_SourceLine();
    [CompilerGeneratedAttribute]
private void set_SourceLine(string value);
    [CompilerGeneratedAttribute]
public int get_StartColumn();
    [CompilerGeneratedAttribute]
private void set_StartColumn(int value);
    [CompilerGeneratedAttribute]
public int get_StartPosition();
    [CompilerGeneratedAttribute]
private void set_StartPosition(int value);
}
[ExtensionAttribute]
public static class CefSharp.RequestContextExtensions : object {
    private static String[] ProxySchemes;
    private static RequestContextExtensions();
    [AsyncStateMachineAttribute("CefSharp.RequestContextExtensions/<GetCookieManagerAsync>d__1")]
[ExtensionAttribute]
public static Task`1<ICookieManager> GetCookieManagerAsync(IRequestContext requestContext);
    [ExtensionAttribute]
public static Task`1<SetPreferenceResponse> SetPreferenceAsync(IRequestContext requestContext, string name, object value);
    [ExtensionAttribute]
public static Task`1<SetProxyResponse> SetProxyAsync(IRequestContext requestContext, string host, Nullable`1<int> port);
    [ExtensionAttribute]
public static Task`1<SetProxyResponse> SetProxyAsync(IRequestContext requestContext, string scheme, string host, Nullable`1<int> port);
    [ExtensionAttribute]
public static bool SetProxy(IRequestContext requestContext, string scheme, string host, Nullable`1<int> port, String& errorMessage);
    [ExtensionAttribute]
public static bool SetProxy(IRequestContext requestContext, string host, Nullable`1<int> port, String& errorMessage);
    [ExtensionAttribute]
public static bool SetProxy(IRequestContext requestContext, string host, String& errorMessage);
    public static IDictionary`2<string, object> GetProxyDictionary(string scheme, string host, Nullable`1<int> port);
    [ExtensionAttribute]
public static Task`1<bool> ClearHttpAuthCredentialsAsync(IRequestContext requestContext);
    [ExtensionAttribute]
public static void RegisterOwinSchemeHandlerFactory(IRequestContext requestContext, string schemeName, string domainName, Func`2<IDictionary`2<string, object>, Task> appFunc);
}
public class CefSharp.ResolveCallbackResult : ValueType {
    [CompilerGeneratedAttribute]
private CefErrorCode <Result>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <ResolvedIpAddresses>k__BackingField;
    public CefErrorCode Result { get; private set; }
    public IList`1<string> ResolvedIpAddresses { get; private set; }
    public ResolveCallbackResult(CefErrorCode result, IList`1<string> resolvedIpAddresses);
    [CompilerGeneratedAttribute]
public CefErrorCode get_Result();
    [CompilerGeneratedAttribute]
private void set_Result(CefErrorCode value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_ResolvedIpAddresses();
    [CompilerGeneratedAttribute]
private void set_ResolvedIpAddresses(IList`1<string> value);
}
public class CefSharp.ResourceHandler : object {
    public static string DefaultMimeType;
    private Byte[] tempBuffer;
    [CompilerGeneratedAttribute]
private string <Charset>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MimeType>k__BackingField;
    [CompilerGeneratedAttribute]
private Stream <Stream>k__BackingField;
    [CompilerGeneratedAttribute]
private int <StatusCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StatusText>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <ResponseLength>k__BackingField;
    [CompilerGeneratedAttribute]
private NameValueCollection <Headers>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AutoDisposeStream>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<CefErrorCode> <ErrorCode>k__BackingField;
    private static IDictionary`2<string, string> Mappings;
    public string Charset { get; public set; }
    public string MimeType { get; public set; }
    public Stream Stream { get; public set; }
    public int StatusCode { get; public set; }
    public string StatusText { get; public set; }
    public Nullable`1<long> ResponseLength { get; public set; }
    public NameValueCollection Headers { get; private set; }
    public bool AutoDisposeStream { get; public set; }
    public Nullable`1<CefErrorCode> ErrorCode { get; public set; }
    public ResourceHandler(string mimeType, Stream stream, bool autoDisposeStream, string charset);
    private static ResourceHandler();
    [CompilerGeneratedAttribute]
public string get_Charset();
    [CompilerGeneratedAttribute]
public void set_Charset(string value);
    [CompilerGeneratedAttribute]
public string get_MimeType();
    [CompilerGeneratedAttribute]
public void set_MimeType(string value);
    [CompilerGeneratedAttribute]
public Stream get_Stream();
    [CompilerGeneratedAttribute]
public void set_Stream(Stream value);
    [CompilerGeneratedAttribute]
public int get_StatusCode();
    [CompilerGeneratedAttribute]
public void set_StatusCode(int value);
    [CompilerGeneratedAttribute]
public string get_StatusText();
    [CompilerGeneratedAttribute]
public void set_StatusText(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_ResponseLength();
    [CompilerGeneratedAttribute]
public void set_ResponseLength(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public NameValueCollection get_Headers();
    [CompilerGeneratedAttribute]
private void set_Headers(NameValueCollection value);
    [CompilerGeneratedAttribute]
public bool get_AutoDisposeStream();
    [CompilerGeneratedAttribute]
public void set_AutoDisposeStream(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<CefErrorCode> get_ErrorCode();
    [CompilerGeneratedAttribute]
public void set_ErrorCode(Nullable`1<CefErrorCode> value);
    private sealed virtual override bool CefSharp.IResourceHandler.Open(IRequest request, Boolean& handleRequest, ICallback callback);
    private sealed virtual override bool CefSharp.IResourceHandler.Skip(long bytesToSkip, Int64& bytesSkipped, IResourceSkipCallback callback);
    private sealed virtual override bool CefSharp.IResourceHandler.Read(Stream dataOut, Int32& bytesRead, IResourceReadCallback callback);
    private sealed virtual override void CefSharp.IResourceHandler.GetResponseHeaders(IResponse response, Int64& responseLength, String& redirectUrl);
    private sealed virtual override void CefSharp.IResourceHandler.Cancel();
    private sealed virtual override bool CefSharp.IResourceHandler.ProcessRequest(IRequest request, ICallback callback);
    private sealed virtual override bool CefSharp.IResourceHandler.ReadResponse(Stream dataOut, Int32& bytesRead, ICallback callback);
    public virtual CefReturnValue ProcessRequestAsync(IRequest request, ICallback callback);
    public static IResourceHandler FromFilePath(string filePath, string mimeType, bool autoDisposeStream);
    public static IResourceHandler FromByteArray(Byte[] data, string mimeType, string charSet);
    [ObsoleteAttribute("Use ResourceHandler.FromString(resource, mimeType: Cef.GetMimeType(fileExtension)); instead, this method will be removed")]
public static IResourceHandler FromString(string text, string fileExtension);
    public static IResourceHandler FromString(string text, Encoding encoding, bool includePreamble, string mimeType);
    public static IResourceHandler ForErrorMessage(string errorMessage, HttpStatusCode statusCode);
    public static ResourceHandler FromStream(Stream stream, string mimeType, bool autoDisposeStream, string charSet);
    public static MemoryStream GetMemoryStream(string text, Encoding encoding, bool includePreamble);
    public static Byte[] GetByteArray(string text, Encoding encoding, bool includePreamble);
    public static string GetMimeType(string extension);
    public virtual void Dispose();
}
public class CefSharp.ResourceRequestHandlerFactory : object {
    [CompilerGeneratedAttribute]
private ConcurrentDictionary`2<string, ResourceRequestHandlerFactoryItem> <Handlers>k__BackingField;
    public ConcurrentDictionary`2<string, ResourceRequestHandlerFactoryItem> Handlers { get; private set; }
    private bool CefSharp.IResourceRequestHandlerFactory.HasHandlers { get; }
    public ResourceRequestHandlerFactory(IEqualityComparer`1<string> comparer);
    [CompilerGeneratedAttribute]
public ConcurrentDictionary`2<string, ResourceRequestHandlerFactoryItem> get_Handlers();
    [CompilerGeneratedAttribute]
private void set_Handlers(ConcurrentDictionary`2<string, ResourceRequestHandlerFactoryItem> value);
    public virtual bool RegisterHandler(string url, Byte[] data, string mimeType, bool oneTimeUse);
    public virtual bool UnregisterHandler(string url);
    private sealed virtual override bool CefSharp.IResourceRequestHandlerFactory.get_HasHandlers();
    private sealed virtual override IResourceRequestHandler CefSharp.IResourceRequestHandlerFactory.GetResourceRequestHandler(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame, IRequest request, bool isNavigation, bool isDownload, string requestInitiator, Boolean& disableDefaultHandling);
    protected virtual IResourceRequestHandler GetResourceRequestHandler(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame, IRequest request, bool isNavigation, bool isDownload, string requestInitiator, Boolean& disableDefaultHandling);
}
public class CefSharp.ResourceRequestHandlerFactoryItem : object {
    [CompilerGeneratedAttribute]
private Byte[] <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MimeType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OneTimeUse>k__BackingField;
    public Byte[] Data { get; private set; }
    public string MimeType { get; private set; }
    public bool OneTimeUse { get; private set; }
    public ResourceRequestHandlerFactoryItem(Byte[] data, string mimeType, bool oneTimeUse);
    [CompilerGeneratedAttribute]
public Byte[] get_Data();
    [CompilerGeneratedAttribute]
private void set_Data(Byte[] value);
    [CompilerGeneratedAttribute]
public string get_MimeType();
    [CompilerGeneratedAttribute]
private void set_MimeType(string value);
    [CompilerGeneratedAttribute]
public bool get_OneTimeUse();
    [CompilerGeneratedAttribute]
private void set_OneTimeUse(bool value);
}
public enum CefSharp.ResourceType : Enum {
    public int value__;
    public static ResourceType MainFrame;
    public static ResourceType SubFrame;
    public static ResourceType Stylesheet;
    public static ResourceType Script;
    public static ResourceType Image;
    public static ResourceType FontResource;
    public static ResourceType SubResource;
    public static ResourceType Object;
    public static ResourceType Media;
    public static ResourceType Worker;
    public static ResourceType SharedWorker;
    public static ResourceType Prefetch;
    public static ResourceType Favicon;
    public static ResourceType Xhr;
    public static ResourceType Ping;
    public static ResourceType ServiceWorker;
    public static ResourceType CspReport;
    public static ResourceType PluginResource;
    public static ResourceType NavigationPreLoadMainFrame;
    public static ResourceType NavigationPreLoadSubFrame;
}
public class CefSharp.ResponseFilter.StreamResponseFilter : object {
    private Stream responseStream;
    public StreamResponseFilter(Stream stream);
    private sealed virtual override bool CefSharp.IResponseFilter.InitFilter();
    private sealed virtual override FilterStatus CefSharp.IResponseFilter.Filter(Stream dataIn, Int64& dataInRead, Stream dataOut, Int64& dataOutWritten);
    public sealed virtual void Dispose();
}
public class CefSharp.SchemeHandler.FolderSchemeHandlerFactory : object {
    private string rootFolder;
    private string defaultPage;
    private string schemeName;
    private string hostName;
    private FileShare resourceFileShare;
    public static Func`2<string, string> GetMimeTypeDelegate;
    public FolderSchemeHandlerFactory(string rootFolder, string schemeName, string hostName, string defaultPage, FileShare resourceFileShare);
    private static FolderSchemeHandlerFactory();
    private sealed virtual override IResourceHandler CefSharp.ISchemeHandlerFactory.Create(IBrowser browser, IFrame frame, string schemeName, IRequest request);
    protected virtual IResourceHandler Create(IBrowser browser, IFrame frame, string schemeName, IRequest request);
}
public class CefSharp.SchemeHandler.OwinResourceHandler : ResourceHandler {
    private static Dictionary`2<int, string> StatusCodeToStatusTextMapping;
    private Func`2<IDictionary`2<string, object>, Task> appFunc;
    public OwinResourceHandler(Func`2<IDictionary`2<string, object>, Task> appFunc);
    private static OwinResourceHandler();
    public virtual CefReturnValue ProcessRequestAsync(IRequest request, ICallback callback);
    private static IDictionary`2<string, String[]> ToDictionary(NameValueCollection nameValueCollection);
}
public class CefSharp.SchemeHandler.OwinSchemeHandlerFactory : object {
    private Func`2<IDictionary`2<string, object>, Task> appFunc;
    public OwinSchemeHandlerFactory(Func`2<IDictionary`2<string, object>, Task> appFunc);
    public sealed virtual IResourceHandler Create(IBrowser browser, IFrame frame, string schemeName, IRequest request);
}
public enum CefSharp.SslContentStatus : Enum {
    public int value__;
    public static SslContentStatus NormalContent;
    public static SslContentStatus DisplayedInsecureContent;
    public static SslContentStatus RanInsecureContent;
}
public class CefSharp.SslStatus : object {
    [CompilerGeneratedAttribute]
private bool <IsSecureConnection>k__BackingField;
    [CompilerGeneratedAttribute]
private CertStatus <CertStatus>k__BackingField;
    [CompilerGeneratedAttribute]
private SslVersion <SslVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private SslContentStatus <ContentStatus>k__BackingField;
    [CompilerGeneratedAttribute]
private X509Certificate2 <X509Certificate>k__BackingField;
    public bool IsSecureConnection { get; private set; }
    public CertStatus CertStatus { get; private set; }
    public SslVersion SslVersion { get; private set; }
    public SslContentStatus ContentStatus { get; private set; }
    public X509Certificate2 X509Certificate { get; private set; }
    public SslStatus(bool isSecureConnection, CertStatus certStatus, SslVersion sslVersion, SslContentStatus contentStatus, X509Certificate2 certificate);
    [CompilerGeneratedAttribute]
public bool get_IsSecureConnection();
    [CompilerGeneratedAttribute]
private void set_IsSecureConnection(bool value);
    [CompilerGeneratedAttribute]
public CertStatus get_CertStatus();
    [CompilerGeneratedAttribute]
private void set_CertStatus(CertStatus value);
    [CompilerGeneratedAttribute]
public SslVersion get_SslVersion();
    [CompilerGeneratedAttribute]
private void set_SslVersion(SslVersion value);
    [CompilerGeneratedAttribute]
public SslContentStatus get_ContentStatus();
    [CompilerGeneratedAttribute]
private void set_ContentStatus(SslContentStatus value);
    [CompilerGeneratedAttribute]
public X509Certificate2 get_X509Certificate();
    [CompilerGeneratedAttribute]
private void set_X509Certificate(X509Certificate2 value);
}
public enum CefSharp.SslVersion : Enum {
    public int value__;
    public static SslVersion Unknown;
    public static SslVersion Ssl2;
    public static SslVersion Ssl3;
    public static SslVersion Tls1;
    public static SslVersion Tls1_1;
    public static SslVersion Tls1_2;
    public static SslVersion Tls1_3;
    public static SslVersion Quic;
}
public class CefSharp.StatusMessageEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private IBrowser <Browser>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public IBrowser Browser { get; private set; }
    public string Value { get; private set; }
    public StatusMessageEventArgs(IBrowser browser, string value);
    [CompilerGeneratedAttribute]
public IBrowser get_Browser();
    [CompilerGeneratedAttribute]
private void set_Browser(IBrowser value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
private void set_Value(string value);
}
public class CefSharp.Structs.AudioParameters : ValueType {
    [CompilerGeneratedAttribute]
private ChannelLayout <ChannelLayout>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SampleRate>k__BackingField;
    [CompilerGeneratedAttribute]
private int <FramesPerBuffer>k__BackingField;
    public ChannelLayout ChannelLayout { get; public set; }
    public int SampleRate { get; public set; }
    public int FramesPerBuffer { get; public set; }
    public AudioParameters(ChannelLayout channelLayout, int sampleRate, int framesPerBuffer);
    [CompilerGeneratedAttribute]
public ChannelLayout get_ChannelLayout();
    [CompilerGeneratedAttribute]
public void set_ChannelLayout(ChannelLayout value);
    [CompilerGeneratedAttribute]
public int get_SampleRate();
    [CompilerGeneratedAttribute]
public void set_SampleRate(int value);
    [CompilerGeneratedAttribute]
public int get_FramesPerBuffer();
    [CompilerGeneratedAttribute]
public void set_FramesPerBuffer(int value);
}
public class CefSharp.Structs.CompositionUnderline : ValueType {
    [CompilerGeneratedAttribute]
private Range <Range>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <Color>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <BackgroundColor>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Thick>k__BackingField;
    [CompilerGeneratedAttribute]
private CompositionUnderlineStyle <Style>k__BackingField;
    public Range Range { get; private set; }
    public UInt32 Color { get; private set; }
    public UInt32 BackgroundColor { get; private set; }
    public bool Thick { get; private set; }
    public CompositionUnderlineStyle Style { get; private set; }
    public CompositionUnderline(Range range, UInt32 color, UInt32 backGroundColor, bool thick);
    public CompositionUnderline(Range range, UInt32 color, UInt32 backGroundColor, bool thick, CompositionUnderlineStyle style);
    [CompilerGeneratedAttribute]
public Range get_Range();
    [CompilerGeneratedAttribute]
private void set_Range(Range value);
    [CompilerGeneratedAttribute]
public UInt32 get_Color();
    [CompilerGeneratedAttribute]
private void set_Color(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_BackgroundColor();
    [CompilerGeneratedAttribute]
private void set_BackgroundColor(UInt32 value);
    [CompilerGeneratedAttribute]
public bool get_Thick();
    [CompilerGeneratedAttribute]
private void set_Thick(bool value);
    [CompilerGeneratedAttribute]
public CompositionUnderlineStyle get_Style();
    [CompilerGeneratedAttribute]
private void set_Style(CompositionUnderlineStyle value);
}
public class CefSharp.Structs.CursorInfo : ValueType {
    [CompilerGeneratedAttribute]
private IntPtr <Buffer>k__BackingField;
    [CompilerGeneratedAttribute]
private Point <Hotspot>k__BackingField;
    [CompilerGeneratedAttribute]
private float <ImageScaleFactor>k__BackingField;
    [CompilerGeneratedAttribute]
private Size <Size>k__BackingField;
    public IntPtr Buffer { get; public set; }
    public Point Hotspot { get; private set; }
    public float ImageScaleFactor { get; private set; }
    public Size Size { get; private set; }
    public CursorInfo(IntPtr buffer, Point hotspot, float imageScaleFactor, Size size);
    [CompilerGeneratedAttribute]
public IntPtr get_Buffer();
    [CompilerGeneratedAttribute]
public void set_Buffer(IntPtr value);
    [CompilerGeneratedAttribute]
public Point get_Hotspot();
    [CompilerGeneratedAttribute]
private void set_Hotspot(Point value);
    [CompilerGeneratedAttribute]
public float get_ImageScaleFactor();
    [CompilerGeneratedAttribute]
private void set_ImageScaleFactor(float value);
    [CompilerGeneratedAttribute]
public Size get_Size();
    [CompilerGeneratedAttribute]
private void set_Size(Size value);
}
public class CefSharp.Structs.DomRect : ValueType {
    [CompilerGeneratedAttribute]
private double <X>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Y>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Height>k__BackingField;
    public double X { get; private set; }
    public double Y { get; private set; }
    public double Width { get; private set; }
    public double Height { get; private set; }
    public DomRect(double x, double y, double width, double height);
    [CompilerGeneratedAttribute]
public double get_X();
    [CompilerGeneratedAttribute]
private void set_X(double value);
    [CompilerGeneratedAttribute]
public double get_Y();
    [CompilerGeneratedAttribute]
private void set_Y(double value);
    [CompilerGeneratedAttribute]
public double get_Width();
    [CompilerGeneratedAttribute]
private void set_Width(double value);
    [CompilerGeneratedAttribute]
public double get_Height();
    [CompilerGeneratedAttribute]
private void set_Height(double value);
}
public class CefSharp.Structs.Point : ValueType {
    [CompilerGeneratedAttribute]
private int <X>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Y>k__BackingField;
    public int X { get; private set; }
    public int Y { get; private set; }
    public Point(int x, int y);
    [CompilerGeneratedAttribute]
public int get_X();
    [CompilerGeneratedAttribute]
private void set_X(int value);
    [CompilerGeneratedAttribute]
public int get_Y();
    [CompilerGeneratedAttribute]
private void set_Y(int value);
}
public class CefSharp.Structs.Range : ValueType {
    [CompilerGeneratedAttribute]
private int <From>k__BackingField;
    [CompilerGeneratedAttribute]
private int <To>k__BackingField;
    public int From { get; private set; }
    public int To { get; private set; }
    public Range(int from, int to);
    [CompilerGeneratedAttribute]
public int get_From();
    [CompilerGeneratedAttribute]
private void set_From(int value);
    [CompilerGeneratedAttribute]
public int get_To();
    [CompilerGeneratedAttribute]
private void set_To(int value);
}
[DebuggerDisplayAttribute("X = {X}, Y = {Y}, Width = {Width}, Height = {Height}")]
public class CefSharp.Structs.Rect : ValueType {
    [CompilerGeneratedAttribute]
private int <X>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Y>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Height>k__BackingField;
    public int X { get; private set; }
    public int Y { get; private set; }
    public int Width { get; private set; }
    public int Height { get; private set; }
    public Rect(int x, int y, int width, int height);
    [CompilerGeneratedAttribute]
public int get_X();
    [CompilerGeneratedAttribute]
private void set_X(int value);
    [CompilerGeneratedAttribute]
public int get_Y();
    [CompilerGeneratedAttribute]
private void set_Y(int value);
    [CompilerGeneratedAttribute]
public int get_Width();
    [CompilerGeneratedAttribute]
private void set_Width(int value);
    [CompilerGeneratedAttribute]
public int get_Height();
    [CompilerGeneratedAttribute]
private void set_Height(int value);
    public Rect ScaleByDpi(float dpi);
}
public class CefSharp.Structs.ScreenInfo : ValueType {
    [CompilerGeneratedAttribute]
private float <DeviceScaleFactor>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Depth>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DepthPerComponent>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsMonochrome>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Rect> <Rect>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Rect> <AvailableRect>k__BackingField;
    public float DeviceScaleFactor { get; public set; }
    public int Depth { get; public set; }
    public int DepthPerComponent { get; public set; }
    public bool IsMonochrome { get; public set; }
    public Nullable`1<Rect> Rect { get; public set; }
    public Nullable`1<Rect> AvailableRect { get; public set; }
    [CompilerGeneratedAttribute]
public float get_DeviceScaleFactor();
    [CompilerGeneratedAttribute]
public void set_DeviceScaleFactor(float value);
    [CompilerGeneratedAttribute]
public int get_Depth();
    [CompilerGeneratedAttribute]
public void set_Depth(int value);
    [CompilerGeneratedAttribute]
public int get_DepthPerComponent();
    [CompilerGeneratedAttribute]
public void set_DepthPerComponent(int value);
    [CompilerGeneratedAttribute]
public bool get_IsMonochrome();
    [CompilerGeneratedAttribute]
public void set_IsMonochrome(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<Rect> get_Rect();
    [CompilerGeneratedAttribute]
public void set_Rect(Nullable`1<Rect> value);
    [CompilerGeneratedAttribute]
public Nullable`1<Rect> get_AvailableRect();
    [CompilerGeneratedAttribute]
public void set_AvailableRect(Nullable`1<Rect> value);
}
public class CefSharp.Structs.Size : ValueType {
    [CompilerGeneratedAttribute]
private int <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Height>k__BackingField;
    public int Width { get; private set; }
    public int Height { get; private set; }
    public Size(int width, int height);
    [CompilerGeneratedAttribute]
public int get_Width();
    [CompilerGeneratedAttribute]
private void set_Width(int value);
    [CompilerGeneratedAttribute]
public int get_Height();
    [CompilerGeneratedAttribute]
private void set_Height(int value);
}
public class CefSharp.Structs.TouchEvent : ValueType {
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private float <X>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Y>k__BackingField;
    [CompilerGeneratedAttribute]
private float <RadiusX>k__BackingField;
    [CompilerGeneratedAttribute]
private float <RadiusY>k__BackingField;
    [CompilerGeneratedAttribute]
private float <RotationAngle>k__BackingField;
    [CompilerGeneratedAttribute]
private PointerType <PointerType>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Pressure>k__BackingField;
    [CompilerGeneratedAttribute]
private TouchEventType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private CefEventFlags <Modifiers>k__BackingField;
    public int Id { get; public set; }
    public float X { get; public set; }
    public float Y { get; public set; }
    public float RadiusX { get; public set; }
    public float RadiusY { get; public set; }
    public float RotationAngle { get; public set; }
    public PointerType PointerType { get; public set; }
    public float Pressure { get; public set; }
    public TouchEventType Type { get; public set; }
    public CefEventFlags Modifiers { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(int value);
    [CompilerGeneratedAttribute]
public float get_X();
    [CompilerGeneratedAttribute]
public void set_X(float value);
    [CompilerGeneratedAttribute]
public float get_Y();
    [CompilerGeneratedAttribute]
public void set_Y(float value);
    [CompilerGeneratedAttribute]
public float get_RadiusX();
    [CompilerGeneratedAttribute]
public void set_RadiusX(float value);
    [CompilerGeneratedAttribute]
public float get_RadiusY();
    [CompilerGeneratedAttribute]
public void set_RadiusY(float value);
    [CompilerGeneratedAttribute]
public float get_RotationAngle();
    [CompilerGeneratedAttribute]
public void set_RotationAngle(float value);
    [CompilerGeneratedAttribute]
public PointerType get_PointerType();
    [CompilerGeneratedAttribute]
public void set_PointerType(PointerType value);
    [CompilerGeneratedAttribute]
public float get_Pressure();
    [CompilerGeneratedAttribute]
public void set_Pressure(float value);
    [CompilerGeneratedAttribute]
public TouchEventType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(TouchEventType value);
    [CompilerGeneratedAttribute]
public CefEventFlags get_Modifiers();
    [CompilerGeneratedAttribute]
public void set_Modifiers(CefEventFlags value);
}
public class CefSharp.TaskCompletionCallback : object {
    private TaskCompletionSource`1<bool> taskCompletionSource;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) isDisposed;
    private bool onComplete;
    public Task`1<bool> Task { get; }
    private bool CefSharp.ICompletionCallback.IsDisposed { get; }
    private sealed virtual override void CefSharp.ICompletionCallback.OnComplete();
    public Task`1<bool> get_Task();
    private sealed virtual override bool CefSharp.ICompletionCallback.get_IsDisposed();
    private sealed virtual override void System.IDisposable.Dispose();
}
public class CefSharp.TaskCookieVisitor : object {
    private TaskCompletionSource`1<List`1<Cookie>> taskCompletionSource;
    private List`1<Cookie> list;
    public Task`1<List`1<Cookie>> Task { get; }
    private sealed virtual override bool CefSharp.ICookieVisitor.Visit(Cookie cookie, int count, int total, Boolean& deleteCookie);
    private sealed virtual override void System.IDisposable.Dispose();
    public Task`1<List`1<Cookie>> get_Task();
}
public class CefSharp.TaskDeleteCookiesCallback : object {
    public static int InvalidNoOfCookiesDeleted;
    private TaskCompletionSource`1<int> taskCompletionSource;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) isDisposed;
    private bool onComplete;
    public Task`1<int> Task { get; }
    private bool CefSharp.IDeleteCookiesCallback.IsDisposed { get; }
    private sealed virtual override void CefSharp.IDeleteCookiesCallback.OnComplete(int numDeleted);
    public Task`1<int> get_Task();
    private sealed virtual override bool CefSharp.IDeleteCookiesCallback.get_IsDisposed();
    private sealed virtual override void System.IDisposable.Dispose();
}
public class CefSharp.TaskNavigationEntryVisitor : object {
    private TaskCompletionSource`1<List`1<NavigationEntry>> taskCompletionSource;
    private List`1<NavigationEntry> list;
    public Task`1<List`1<NavigationEntry>> Task { get; }
    private sealed virtual override bool CefSharp.INavigationEntryVisitor.Visit(NavigationEntry entry, bool current, int index, int total);
    private sealed virtual override void System.IDisposable.Dispose();
    public Task`1<List`1<NavigationEntry>> get_Task();
}
public class CefSharp.TaskPrintToPdfCallback : object {
    private TaskCompletionSource`1<bool> taskCompletionSource;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) isDisposed;
    private bool onComplete;
    public Task`1<bool> Task { get; }
    private bool CefSharp.IPrintToPdfCallback.IsDisposed { get; }
    public Task`1<bool> get_Task();
    private sealed virtual override void CefSharp.IPrintToPdfCallback.OnPdfPrintFinished(string path, bool ok);
    private sealed virtual override bool CefSharp.IPrintToPdfCallback.get_IsDisposed();
    private sealed virtual override void System.IDisposable.Dispose();
}
public class CefSharp.TaskResolveCallback : object {
    private TaskCompletionSource`1<ResolveCallbackResult> taskCompletionSource;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) isDisposed;
    private bool onComplete;
    private bool CefSharp.IResolveCallback.IsDisposed { get; }
    public Task`1<ResolveCallbackResult> Task { get; }
    private sealed virtual override void CefSharp.IResolveCallback.OnResolveCompleted(CefErrorCode result, IList`1<string> resolvedIpAddresses);
    private sealed virtual override bool CefSharp.IResolveCallback.get_IsDisposed();
    public Task`1<ResolveCallbackResult> get_Task();
    private sealed virtual override void System.IDisposable.Dispose();
}
public class CefSharp.TaskSetCookieCallback : object {
    private TaskCompletionSource`1<bool> taskCompletionSource;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) isDisposed;
    private bool onComplete;
    public Task`1<bool> Task { get; }
    private bool CefSharp.ISetCookieCallback.IsDisposed { get; }
    private sealed virtual override void CefSharp.ISetCookieCallback.OnComplete(bool success);
    public Task`1<bool> get_Task();
    private sealed virtual override bool CefSharp.ISetCookieCallback.get_IsDisposed();
    private sealed virtual override void System.IDisposable.Dispose();
}
public class CefSharp.TaskStringVisitor : object {
    private TaskCompletionSource`1<string> taskCompletionSource;
    public Task`1<string> Task { get; }
    private sealed virtual override void CefSharp.IStringVisitor.Visit(string str);
    public Task`1<string> get_Task();
    private sealed virtual override void System.IDisposable.Dispose();
}
public class CefSharp.TitleChangedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private IBrowser <Browser>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    public IBrowser Browser { get; private set; }
    public string Title { get; private set; }
    public TitleChangedEventArgs(IBrowser browser, string title);
    [CompilerGeneratedAttribute]
public IBrowser get_Browser();
    [CompilerGeneratedAttribute]
private void set_Browser(IBrowser value);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
private void set_Title(string value);
}
[FlagsAttribute]
public enum CefSharp.TransitionType : Enum {
    public UInt32 value__;
    public static TransitionType LinkClicked;
    public static TransitionType Explicit;
    public static TransitionType AutoBookmark;
    public static TransitionType AutoSubFrame;
    public static TransitionType ManualSubFrame;
    public static TransitionType Generated;
    public static TransitionType AutoToplevel;
    public static TransitionType FormSubmit;
    public static TransitionType Reload;
    public static TransitionType Keyword;
    public static TransitionType KeywordGenerated;
    public static TransitionType SourceMask;
    public static TransitionType Blocked;
    public static TransitionType ForwardBack;
    public static TransitionType DirectLoad;
    public static TransitionType HomePage;
    public static TransitionType FromApi;
    public static TransitionType ChainStart;
    public static TransitionType ChainEnd;
    public static TransitionType ClientRedirect;
    public static TransitionType ServerRedirect;
    public static TransitionType IsRedirect;
    public static TransitionType QualifierMask;
}
public class CefSharp.UrlParts : object {
    [CompilerGeneratedAttribute]
private string <Spec>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Scheme>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Username>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Password>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Host>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Port>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Origin>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Query>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Fragment>k__BackingField;
    public string Spec { get; public set; }
    public string Scheme { get; public set; }
    public string Username { get; public set; }
    public string Password { get; public set; }
    public string Host { get; public set; }
    public Nullable`1<int> Port { get; public set; }
    public string Origin { get; public set; }
    public string Path { get; public set; }
    public string Query { get; public set; }
    public string Fragment { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Spec();
    [CompilerGeneratedAttribute]
public void set_Spec(string value);
    [CompilerGeneratedAttribute]
public string get_Scheme();
    [CompilerGeneratedAttribute]
public void set_Scheme(string value);
    [CompilerGeneratedAttribute]
public string get_Username();
    [CompilerGeneratedAttribute]
public void set_Username(string value);
    [CompilerGeneratedAttribute]
public string get_Password();
    [CompilerGeneratedAttribute]
public void set_Password(string value);
    [CompilerGeneratedAttribute]
public string get_Host();
    [CompilerGeneratedAttribute]
public void set_Host(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Port();
    [CompilerGeneratedAttribute]
public void set_Port(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_Origin();
    [CompilerGeneratedAttribute]
public void set_Origin(string value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public string get_Query();
    [CompilerGeneratedAttribute]
public void set_Query(string value);
    [CompilerGeneratedAttribute]
public string get_Fragment();
    [CompilerGeneratedAttribute]
public void set_Fragment(string value);
}
public class CefSharp.UrlRequestClient : object {
    private sealed virtual override bool CefSharp.IUrlRequestClient.GetAuthCredentials(bool isProxy, string host, int port, string realm, string scheme, IAuthCallback callback);
    protected virtual bool GetAuthCredentials(bool isProxy, string host, int port, string realm, string scheme, IAuthCallback callback);
    private sealed virtual override void CefSharp.IUrlRequestClient.OnDownloadData(IUrlRequest request, Stream data);
    protected virtual void OnDownloadData(IUrlRequest request, Stream data);
    private sealed virtual override void CefSharp.IUrlRequestClient.OnDownloadProgress(IUrlRequest request, long current, long total);
    protected virtual void OnDownloadProgress(IUrlRequest request, long current, long total);
    private sealed virtual override void CefSharp.IUrlRequestClient.OnRequestComplete(IUrlRequest request);
    protected virtual void OnRequestComplete(IUrlRequest request);
    private sealed virtual override void CefSharp.IUrlRequestClient.OnUploadProgress(IUrlRequest request, long current, long total);
    protected virtual void OnUploadProgress(IUrlRequest request, long current, long total);
}
[FlagsAttribute]
public enum CefSharp.UrlRequestFlags : Enum {
    public int value__;
    public static UrlRequestFlags None;
    public static UrlRequestFlags SkipCache;
    public static UrlRequestFlags OnlyFromCache;
    public static UrlRequestFlags DisableCache;
    public static UrlRequestFlags AllowStoredCredentials;
    public static UrlRequestFlags ReportUploadProgress;
    public static UrlRequestFlags NoDownloadData;
    public static UrlRequestFlags NoRetryOn5XX;
    public static UrlRequestFlags StopOnRedirect;
}
public enum CefSharp.UrlRequestStatus : Enum {
    public int value__;
    public static UrlRequestStatus Unknown;
    public static UrlRequestStatus Success;
    public static UrlRequestStatus IoPending;
    public static UrlRequestStatus Canceled;
    public static UrlRequestStatus Failed;
}
public class CefSharp.WaitForNavigationAsyncResponse : object {
    [CompilerGeneratedAttribute]
private CefErrorCode <ErrorCode>k__BackingField;
    [CompilerGeneratedAttribute]
private int <HttpStatusCode>k__BackingField;
    public CefErrorCode ErrorCode { get; private set; }
    public int HttpStatusCode { get; private set; }
    public bool Success { get; }
    public WaitForNavigationAsyncResponse(CefErrorCode errorCode, int httpStatusCode);
    [CompilerGeneratedAttribute]
public CefErrorCode get_ErrorCode();
    [CompilerGeneratedAttribute]
private void set_ErrorCode(CefErrorCode value);
    [CompilerGeneratedAttribute]
public int get_HttpStatusCode();
    [CompilerGeneratedAttribute]
private void set_HttpStatusCode(int value);
    public bool get_Success();
}
public class CefSharp.WaitForSelectorAsyncResponse : object {
    [CompilerGeneratedAttribute]
private string <ElementId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TagName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Success>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ElementAdded>k__BackingField;
    public string ElementId { get; private set; }
    public string TagName { get; private set; }
    public bool Success { get; private set; }
    public string ErrorMessage { get; private set; }
    public bool ElementAdded { get; private set; }
    public WaitForSelectorAsyncResponse(bool success, string errorMessage);
    public WaitForSelectorAsyncResponse(string elementId, string tagName, bool elementAdded);
    [CompilerGeneratedAttribute]
public string get_ElementId();
    [CompilerGeneratedAttribute]
private void set_ElementId(string value);
    [CompilerGeneratedAttribute]
public string get_TagName();
    [CompilerGeneratedAttribute]
private void set_TagName(string value);
    [CompilerGeneratedAttribute]
public bool get_Success();
    [CompilerGeneratedAttribute]
private void set_Success(bool value);
    [CompilerGeneratedAttribute]
public string get_ErrorMessage();
    [CompilerGeneratedAttribute]
private void set_ErrorMessage(string value);
    [CompilerGeneratedAttribute]
public bool get_ElementAdded();
    [CompilerGeneratedAttribute]
private void set_ElementAdded(bool value);
}
public class CefSharp.Web.HtmlString : object {
    private string html;
    private bool base64Encode;
    private string charSet;
    public HtmlString(string html, bool base64Encode, string charSet);
    public string ToDataUriString();
    public static HtmlString op_Explicit(string html);
    public static HtmlString FromFile(string fileName);
}
public class CefSharp.Web.JsonString : object {
    [CompilerGeneratedAttribute]
private string <Json>k__BackingField;
    public string Json { get; private set; }
    public JsonString(string json);
    [CompilerGeneratedAttribute]
public string get_Json();
    [CompilerGeneratedAttribute]
private void set_Json(string value);
    public virtual string ToString();
    public static JsonString FromObject(object obj, DataContractJsonSerializerSettings settings);
}
[ExtensionAttribute]
public static class CefSharp.WebBrowserExtensions : object {
    public static string BrowserNullExceptionString;
    public static string BrowserHostNullExceptionString;
    public static string FrameNullExceptionString;
    [CompilerGeneratedAttribute]
private static Func`2<string, string> <EncodeScriptParam>k__BackingField;
    public static Func`2<string, string> EncodeScriptParam { get; public set; }
    private static WebBrowserExtensions();
    [ExtensionAttribute]
[ObsoleteAttribute("This method has been removed, see https://github.com/cefsharp/CefSharp/issues/2990 for details on migrating your code.")]
[EditorBrowsableAttribute("1")]
public static void RegisterJsObject(IWebBrowser webBrowser, string name, object objectToBind, BindingOptions options);
    [ExtensionAttribute]
[ObsoleteAttribute("This method has been removed, see https://github.com/cefsharp/CefSharp/issues/2990 for details on migrating your code.")]
[EditorBrowsableAttribute("1")]
public static void RegisterAsyncJsObject(IWebBrowser webBrowser, string name, object objectToBind, BindingOptions options);
    [ExtensionAttribute]
public static IFrame GetMainFrame(IChromiumWebBrowserBase browser);
    [ExtensionAttribute]
public static IFrame GetFocusedFrame(IChromiumWebBrowserBase browser);
    [ExtensionAttribute]
public static void Undo(IChromiumWebBrowserBase browser);
    [ExtensionAttribute]
public static void Undo(IBrowser browser);
    [ExtensionAttribute]
public static void Redo(IChromiumWebBrowserBase browser);
    [ExtensionAttribute]
public static void Redo(IBrowser browser);
    [ExtensionAttribute]
public static void Cut(IChromiumWebBrowserBase browser);
    [ExtensionAttribute]
public static void Cut(IBrowser browser);
    [ExtensionAttribute]
public static void Copy(IChromiumWebBrowserBase browser);
    [ExtensionAttribute]
public static void Copy(IBrowser browser);
    [ExtensionAttribute]
public static void Paste(IChromiumWebBrowserBase browser);
    [ExtensionAttribute]
public static void Paste(IBrowser browser);
    [ExtensionAttribute]
public static void Delete(IChromiumWebBrowserBase browser);
    [ExtensionAttribute]
public static void Delete(IBrowser browser);
    [ExtensionAttribute]
public static void SelectAll(IChromiumWebBrowserBase browser);
    [ExtensionAttribute]
public static void SelectAll(IBrowser browser);
    [ExtensionAttribute]
public static void ViewSource(IChromiumWebBrowserBase browser);
    [ExtensionAttribute]
public static void ViewSource(IBrowser browser);
    [ExtensionAttribute]
public static Task`1<string> GetSourceAsync(IChromiumWebBrowserBase browser);
    [ExtensionAttribute]
public static Task`1<string> GetSourceAsync(IBrowser browser);
    [ExtensionAttribute]
public static Task`1<string> GetTextAsync(IChromiumWebBrowserBase browser);
    [ExtensionAttribute]
public static Task`1<string> GetTextAsync(IBrowser browser);
    [ExtensionAttribute]
public static void StartDownload(IChromiumWebBrowserBase browser, string url);
    [ExtensionAttribute]
public static void StartDownload(IBrowser browser, string url);
    public static Task`1<LoadUrlAsyncResponse> LoadUrlAsync(IChromiumWebBrowserBase chromiumWebBrowser, string url);
    [AsyncStateMachineAttribute("CefSharp.WebBrowserExtensions/<WaitForNavigationAsync>d__30")]
public static Task`1<WaitForNavigationAsyncResponse> WaitForNavigationAsync(IChromiumWebBrowserBase chromiumWebBrowser, Nullable`1<TimeSpan> timeout, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("CefSharp.WebBrowserExtensions/<WaitForSelectorAsync>d__31")]
[ExtensionAttribute]
public static Task`1<WaitForSelectorAsyncResponse> WaitForSelectorAsync(IWebBrowser chromiumWebBrowser, string selector, Nullable`1<TimeSpan> timeout, bool removed);
    [ExtensionAttribute]
public static void ExecuteScriptAsync(IChromiumWebBrowserBase browser, string methodName, Object[] args);
    [ExtensionAttribute]
public static void ExecuteScriptAsync(IBrowser browser, string methodName, Object[] args);
    [ExtensionAttribute]
public static void ExecuteScriptAsync(IChromiumWebBrowserBase browser, string script);
    [ExtensionAttribute]
public static void ExecuteScriptAsync(IBrowser browser, string script);
    [ExtensionAttribute]
public static void ExecuteScriptAsyncWhenPageLoaded(IChromiumWebBrowserBase webBrowser, string script, bool oneTime);
    [ExtensionAttribute]
public static void LoadUrlWithPostData(IChromiumWebBrowserBase browser, string url, Byte[] postDataBytes, string contentType);
    [ExtensionAttribute]
public static void LoadUrlWithPostData(IBrowser browser, string url, Byte[] postDataBytes, string contentType);
    [ExtensionAttribute]
public static bool LoadHtml(IWebBrowser browser, string html, string url);
    [ExtensionAttribute]
public static void LoadHtml(IChromiumWebBrowserBase browser, string html, bool base64Encode);
    [ExtensionAttribute]
public static void LoadHtml(IFrame frame, string html, bool base64Encode);
    [ExtensionAttribute]
public static bool LoadHtml(IWebBrowser browser, string html, string url, Encoding encoding, bool oneTimeUse);
    [ExtensionAttribute]
public static void RegisterResourceHandler(IWebBrowser browser, string url, Stream stream, string mimeType, bool oneTimeUse);
    [ExtensionAttribute]
public static void UnRegisterResourceHandler(IWebBrowser browser, string url);
    [ExtensionAttribute]
public static void Stop(IChromiumWebBrowserBase browser);
    [ExtensionAttribute]
public static void Stop(IBrowser browser);
    [ExtensionAttribute]
public static void Back(IChromiumWebBrowserBase browser);
    [ExtensionAttribute]
public static void Back(IBrowser browser);
    [ExtensionAttribute]
public static void Forward(IChromiumWebBrowserBase browser);
    [ExtensionAttribute]
public static void Forward(IBrowser browser);
    [ExtensionAttribute]
public static void Reload(IChromiumWebBrowserBase browser);
    [ExtensionAttribute]
public static void Reload(IChromiumWebBrowserBase browser, bool ignoreCache);
    [ExtensionAttribute]
public static void Reload(IBrowser browser, bool ignoreCache);
    [ExtensionAttribute]
public static ICookieManager GetCookieManager(IChromiumWebBrowserBase browser, ICompletionCallback callback);
    [ExtensionAttribute]
public static IRequestContext GetRequestContext(IChromiumWebBrowserBase browser);
    [ExtensionAttribute]
public static Task`1<double> GetZoomLevelAsync(IBrowser browser);
    [ExtensionAttribute]
public static Task`1<double> GetZoomLevelAsync(IChromiumWebBrowserBase browser);
    [ExtensionAttribute]
public static void SetZoomLevel(IBrowser browser, double zoomLevel);
    [ExtensionAttribute]
public static void SetZoomLevel(IChromiumWebBrowserBase browser, double zoomLevel);
    [ExtensionAttribute]
public static void Find(IBrowser browser, string searchText, bool forward, bool matchCase, bool findNext);
    [ExtensionAttribute]
public static void Find(IChromiumWebBrowserBase browser, string searchText, bool forward, bool matchCase, bool findNext);
    [ExtensionAttribute]
public static void StopFinding(IBrowser browser, bool clearSelection);
    [ExtensionAttribute]
public static void StopFinding(IChromiumWebBrowserBase browser, bool clearSelection);
    [ExtensionAttribute]
public static void Print(IBrowser browser);
    [ExtensionAttribute]
public static void Print(IChromiumWebBrowserBase browser);
    [ExtensionAttribute]
public static Task`1<bool> PrintToPdfAsync(IBrowser browser, string path, PdfPrintSettings settings);
    [ExtensionAttribute]
public static Task`1<bool> PrintToPdfAsync(IChromiumWebBrowserBase browser, string path, PdfPrintSettings settings);
    [ExtensionAttribute]
public static void ShowDevTools(IBrowser browser, IWindowInfo windowInfo, int inspectElementAtX, int inspectElementAtY);
    [ExtensionAttribute]
public static void ShowDevTools(IChromiumWebBrowserBase browser, IWindowInfo windowInfo, int inspectElementAtX, int inspectElementAtY);
    [ExtensionAttribute]
public static void CloseDevTools(IBrowser browser);
    [ExtensionAttribute]
public static void CloseDevTools(IChromiumWebBrowserBase browser);
    [ExtensionAttribute]
public static void ReplaceMisspelling(IBrowser browser, string word);
    [ExtensionAttribute]
public static void ReplaceMisspelling(IChromiumWebBrowserBase browser, string word);
    [ExtensionAttribute]
public static void AddWordToDictionary(IBrowser browser, string word);
    [ExtensionAttribute]
public static void AddWordToDictionary(IChromiumWebBrowserBase browser, string word);
    [ExtensionAttribute]
public static IBrowserHost GetBrowserHost(IChromiumWebBrowserBase browser);
    [ExtensionAttribute]
public static void SendMouseWheelEvent(IChromiumWebBrowserBase browser, int x, int y, int deltaX, int deltaY, CefEventFlags modifiers);
    [ExtensionAttribute]
public static void SendMouseWheelEvent(IBrowser browser, int x, int y, int deltaX, int deltaY, CefEventFlags modifiers);
    [ExtensionAttribute]
public static void SendMouseWheelEvent(IBrowserHost host, int x, int y, int deltaX, int deltaY, CefEventFlags modifiers);
    [ExtensionAttribute]
public static void SendMouseClickEvent(IBrowserHost host, int x, int y, MouseButtonType mouseButtonType, bool mouseUp, int clickCount, CefEventFlags modifiers);
    [ExtensionAttribute]
public static void SendMouseMoveEvent(IBrowserHost host, int x, int y, bool mouseLeave, CefEventFlags modifiers);
    [ExtensionAttribute]
public static Task`1<JavascriptResponse> EvaluateScriptAsPromiseAsync(IWebBrowser chromiumWebBrowser, string script, Nullable`1<TimeSpan> timeout);
    [ExtensionAttribute]
public static Task`1<JavascriptResponse> EvaluateScriptAsPromiseAsync(IBrowser browser, string script, Nullable`1<TimeSpan> timeout);
    [ExtensionAttribute]
public static Task`1<JavascriptResponse> EvaluateScriptAsPromiseAsync(IFrame frame, string script, Nullable`1<TimeSpan> timeout, string javascriptBindingApiGlobalObjectName);
    private static string GetPromiseHandlerScript(string script, string javascriptBindingApiGlobalObjectName);
    [ExtensionAttribute]
public static Task`1<JavascriptResponse> EvaluateScriptAsync(IChromiumWebBrowserBase browser, string script, Nullable`1<TimeSpan> timeout, bool useImmediatelyInvokedFuncExpression);
    [ExtensionAttribute]
public static Task`1<JavascriptResponse> EvaluateScriptAsync(IBrowser browser, string script, Nullable`1<TimeSpan> timeout, bool useImmediatelyInvokedFuncExpression);
    [ExtensionAttribute]
public static Task`1<JavascriptResponse> EvaluateScriptAsync(IChromiumWebBrowserBase browser, string methodName, Object[] args);
    [ExtensionAttribute]
public static Task`1<JavascriptResponse> EvaluateScriptAsync(IChromiumWebBrowserBase browser, Nullable`1<TimeSpan> timeout, string methodName, Object[] args);
    [ExtensionAttribute]
public static void SetAsPopup(IWebBrowser browser);
    [ExtensionAttribute]
public static void DisposeDevToolsContext(IWebBrowserInternal webBrowserInternal);
    [ExtensionAttribute]
public static void FreeDevToolsContext(IWebBrowserInternal webBrowserInternal);
    [CompilerGeneratedAttribute]
public static Func`2<string, string> get_EncodeScriptParam();
    [CompilerGeneratedAttribute]
public static void set_EncodeScriptParam(Func`2<string, string> value);
    [ExtensionAttribute]
private static bool IsNumeric(object value);
    public static string GetScriptForJavascriptMethodWithArgs(string methodName, Object[] args);
    public static void ThrowExceptionIfChromiumWebBrowserDisposed(IChromiumWebBrowserBase browser);
    public static void ThrowExceptionIfFrameNull(IFrame frame);
    public static void ThrowExceptionIfBrowserNull(IBrowser browser);
    public static void ThrowExceptionIfBrowserHostNull(IBrowserHost browserHost);
    public static void ThrowExceptionIfCanExecuteJavascriptInMainFrameFalse();
}
public enum CefSharp.WindowOpenDisposition : Enum {
    public int value__;
    public static WindowOpenDisposition Unknown;
    public static WindowOpenDisposition CurrentTab;
    public static WindowOpenDisposition SingletonTab;
    public static WindowOpenDisposition NewForegroundTab;
    public static WindowOpenDisposition NewBackgroundTab;
    public static WindowOpenDisposition NewPopup;
    public static WindowOpenDisposition NewWindow;
    public static WindowOpenDisposition SaveToDisk;
    public static WindowOpenDisposition OffTheRecord;
    public static WindowOpenDisposition IgnoreAction;
    public static WindowOpenDisposition SwitchToTab;
    public static WindowOpenDisposition NewPictureInPicture;
}
