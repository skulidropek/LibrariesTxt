public class Chutzpah.VS.Common.DteHelpers : object {
    private static Regex s_regex_dteMoniker;
    private static DteHelpers();
    private static int CreateBindCtx(UInt32 reserved, IBindCtx& ppbc);
    public static Dictionary`2<int, DTE> GetAllDTEs();
    public static void DebugAttachToProcess(int subjectProcessId, string debugEngine);
}
public interface Chutzpah.VS.Common.ILogger {
    public abstract virtual void Log(string message, string source, LogType logType);
    public abstract virtual void Log(string message, string source, Exception e);
    public abstract virtual void MessageBox(string title, string message, LogType logType);
}
public interface Chutzpah.VS.Common.ISolutionEventsListener {
    [CompilerGeneratedAttribute]
public abstract virtual void add_SolutionProjectChanged(EventHandler`1<SolutionEventsListenerEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_SolutionProjectChanged(EventHandler`1<SolutionEventsListenerEventArgs> value);
    public abstract virtual void StartListeningForChanges();
    public abstract virtual void StopListeningForChanges();
    [CompilerGeneratedAttribute]
public abstract virtual void add_SolutionUnloaded(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_SolutionUnloaded(EventHandler value);
}
public class Chutzpah.VS.Common.Logger : object {
    private IServiceProvider serviceProvider;
    public Logger(IServiceProvider serviceProvider);
    public sealed virtual void Log(string message, string source, LogType logType);
    public sealed virtual void Log(string message, string source, Exception e);
    public sealed virtual void MessageBox(string title, string message, LogType logType);
    private __ACTIVITYLOG_ENTRYTYPE ToEntryType(LogType logType);
}
public enum Chutzpah.VS.Common.LogType : Enum {
    public int value__;
    public static LogType Information;
    public static LogType Warning;
    public static LogType Error;
}
[ExtensionAttribute]
public static class Chutzpah.VS.Common.ServiceProviderExtensions : object {
    [ExtensionAttribute]
public static T GetService(IServiceProvider serviceProvider);
    [ExtensionAttribute]
public static T GetService(IServiceProvider serviceProvider, Type serviceType);
}
[ComVisibleAttribute("True")]
[ClassInterfaceAttribute("2")]
[GuidAttribute("6C95E241-763D-4887-9F05-A6B95F36D031")]
public class Chutzpah.VS.Common.Settings.ChutzpahUTESettings : DialogPage {
    private int maxDegreeOfParallelism;
    private bool enableTracing;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    [BrowsableAttribute("True")]
[CategoryAttribute("UTE")]
[DisplayNameAttribute("Max degree of Parallelism")]
[DescriptionAttribute("The maximum amount of concurrency Chutzpah should use")]
public int MaxDegreeOfParallelism { get; public set; }
    [BrowsableAttribute("True")]
[CategoryAttribute("UTE")]
[DisplayNameAttribute("Enable Chutzpah Tracing")]
[DescriptionAttribute("Saves a trace of Chutzpah execution to %temp%\chutzpah.log")]
public bool EnabledTracing { get; public set; }
    public int get_MaxDegreeOfParallelism();
    public void set_MaxDegreeOfParallelism(int value);
    public bool get_EnabledTracing();
    public void set_EnabledTracing(bool value);
    public virtual void ResetSettings();
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    protected virtual void OnPropertyChanged(string propertyName);
}
public enum Chutzpah.VS.Common.SolutionChangedReason : Enum {
    public int value__;
    public static SolutionChangedReason None;
    public static SolutionChangedReason Load;
    public static SolutionChangedReason Unload;
}
[ExportAttribute("Chutzpah.VS.Common.ISolutionEventsListener")]
public class Chutzpah.VS.Common.SolutionEventsListener : object {
    private IVsSolution solution;
    private UInt32 cookie;
    [CompilerGeneratedAttribute]
private EventHandler`1<SolutionEventsListenerEventArgs> SolutionProjectChanged;
    [CompilerGeneratedAttribute]
private EventHandler SolutionUnloaded;
    [ImportingConstructorAttribute]
public SolutionEventsListener(IServiceProvider serviceProvider);
    [CompilerGeneratedAttribute]
public sealed virtual void add_SolutionProjectChanged(EventHandler`1<SolutionEventsListenerEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_SolutionProjectChanged(EventHandler`1<SolutionEventsListenerEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_SolutionUnloaded(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_SolutionUnloaded(EventHandler value);
    public sealed virtual void StartListeningForChanges();
    public sealed virtual void StopListeningForChanges();
    public void OnSolutionProjectUpdated(IVsProject project, SolutionChangedReason reason);
    public void OnSolutionUnloaded();
    private bool IsSolutionFullyLoaded();
    public sealed virtual int OnAfterLoadProject(IVsHierarchy pStubHierarchy, IVsHierarchy pRealHierarchy);
    public sealed virtual int OnAfterOpenProject(IVsHierarchy pHierarchy, int fAdded);
    public sealed virtual int OnBeforeUnloadProject(IVsHierarchy pRealHierarchy, IVsHierarchy pStubHierarchy);
    public sealed virtual int OnAfterCloseSolution(object pUnkReserved);
    public sealed virtual int OnAfterOpenSolution(object pUnkReserved, int fNewSolution);
    public sealed virtual int OnBeforeCloseProject(IVsHierarchy pHierarchy, int fRemoved);
    public sealed virtual int OnBeforeCloseSolution(object pUnkReserved);
    public sealed virtual int OnQueryCloseProject(IVsHierarchy pHierarchy, int fRemoving, Int32& pfCancel);
    public sealed virtual int OnQueryCloseSolution(object pUnkReserved, Int32& pfCancel);
    public sealed virtual int OnQueryUnloadProject(IVsHierarchy pRealHierarchy, Int32& pfCancel);
}
public class Chutzpah.VS.Common.SolutionEventsListenerEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private IVsProject <Project>k__BackingField;
    [CompilerGeneratedAttribute]
private SolutionChangedReason <ChangedReason>k__BackingField;
    public IVsProject Project { get; private set; }
    public SolutionChangedReason ChangedReason { get; private set; }
    public SolutionEventsListenerEventArgs(IVsProject project, SolutionChangedReason reason);
    [CompilerGeneratedAttribute]
public IVsProject get_Project();
    [CompilerGeneratedAttribute]
private void set_Project(IVsProject value);
    [CompilerGeneratedAttribute]
public SolutionChangedReason get_ChangedReason();
    [CompilerGeneratedAttribute]
private void set_ChangedReason(SolutionChangedReason value);
}
public class Chutzpah.VS.Common.VsDebuggerTestLauncher : object {
    private IUrlBuilder urlBuilder;
    [CompilerGeneratedAttribute]
private Process <DebuggingProcess>k__BackingField;
    public Process DebuggingProcess { get; public set; }
    public VsDebuggerTestLauncher(IUrlBuilder urlBuilder);
    [CompilerGeneratedAttribute]
public sealed virtual Process get_DebuggingProcess();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DebuggingProcess(Process value);
    public sealed virtual void LaunchTest(TestContext testContext);
}
public static class Chutzpah.VS2022.TestAdapter.AdapterConstants : object {
    public static string ExecutorUriString;
    public static Uri ExecutorUri;
    public static string SettingsName;
    private static AdapterConstants();
}
public static class Chutzpah.VS2022.TestAdapter.ChutzpahTracingHelper : object {
    public static void Toggle(bool enable);
}
[ExtensionAttribute]
public static class VS11.Plugin.VsSolutionHelper : object {
    [IteratorStateMachineAttribute("VS11.Plugin.VsSolutionHelper/<EnumerateLoadedProjects>d__0")]
[ExtensionAttribute]
public static IEnumerable`1<IVsHierarchy> EnumerateLoadedProjects(IVsSolution solution, __VSENUMPROJFLAGS enumFlags);
    public static string GetProjectPath(IVsProject project);
    public static IEnumerable`1<string> GetProjectItems(IVsProject project);
    [IteratorStateMachineAttribute("VS11.Plugin.VsSolutionHelper/<GetProjectItems>d__3")]
public static IEnumerable`1<string> GetProjectItems(IVsHierarchy project, UInt32 itemId);
    public static UInt32 GetItemId(object pvar);
    public static object GetPropertyValue(int propid, UInt32 itemId, IVsHierarchy vsHierarchy);
    public static string GetCanonicalName(UInt32 itemId, IVsHierarchy hierarchy);
}
