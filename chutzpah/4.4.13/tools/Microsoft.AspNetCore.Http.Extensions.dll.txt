[ExtensionAttribute]
public static class Microsoft.AspNetCore.Http.Extensions.HttpRequestMultipartExtensions : object {
    [ExtensionAttribute]
public static string GetMultipartBoundary(HttpRequest request);
}
public class Microsoft.AspNetCore.Http.Extensions.QueryBuilder : object {
    private IList`1<KeyValuePair`2<string, string>> _params;
    public QueryBuilder(IEnumerable`1<KeyValuePair`2<string, string>> parameters);
    public void Add(string key, IEnumerable`1<string> values);
    public void Add(string key, string value);
    public virtual string ToString();
    public QueryString ToQueryString();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public sealed virtual IEnumerator`1<KeyValuePair`2<string, string>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public static class Microsoft.AspNetCore.Http.Extensions.StreamCopyOperation : object {
    private static int DefaultBufferSize;
    public static Task CopyToAsync(Stream source, Stream destination, Nullable`1<long> count, CancellationToken cancel);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Http.Extensions.StreamCopyOperation/<CopyToAsync>d__2")]
public static Task CopyToAsync(Stream source, Stream destination, Nullable`1<long> count, int bufferSize, CancellationToken cancel);
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Http.Extensions.UriHelper : object {
    private static string ForwardSlash;
    private static string Pound;
    private static string QuestionMark;
    private static string SchemeDelimiter;
    public static string BuildRelative(PathString pathBase, PathString path, QueryString query, FragmentString fragment);
    public static string BuildAbsolute(string scheme, HostString host, PathString pathBase, PathString path, QueryString query, FragmentString fragment);
    public static void FromAbsolute(string uri, String& scheme, HostString& host, PathString& path, QueryString& query, FragmentString& fragment);
    public static string Encode(Uri uri);
    [ExtensionAttribute]
public static string GetEncodedUrl(HttpRequest request);
    [ExtensionAttribute]
public static string GetEncodedPathAndQuery(HttpRequest request);
    [ExtensionAttribute]
public static string GetDisplayUrl(HttpRequest request);
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Http.HeaderDictionaryTypeExtensions : object {
    private static IDictionary`2<Type, object> KnownParsers;
    private static IDictionary`2<Type, object> KnownListParsers;
    private static HeaderDictionaryTypeExtensions();
    [ExtensionAttribute]
public static RequestHeaders GetTypedHeaders(HttpRequest request);
    [ExtensionAttribute]
public static ResponseHeaders GetTypedHeaders(HttpResponse response);
    [ExtensionAttribute]
internal static Nullable`1<DateTimeOffset> GetDate(IHeaderDictionary headers, string name);
    [ExtensionAttribute]
internal static void Set(IHeaderDictionary headers, string name, object value);
    [ExtensionAttribute]
internal static void SetList(IHeaderDictionary headers, string name, IList`1<T> values);
    [ExtensionAttribute]
public static void AppendList(IHeaderDictionary Headers, string name, IList`1<T> values);
    [ExtensionAttribute]
internal static void SetDate(IHeaderDictionary headers, string name, Nullable`1<DateTimeOffset> value);
    [ExtensionAttribute]
internal static T Get(IHeaderDictionary headers, string name);
    [ExtensionAttribute]
internal static IList`1<T> GetList(IHeaderDictionary headers, string name);
    private static T GetViaReflection(string value);
    private static IList`1<T> GetListViaReflection(StringValues values);
}
public class Microsoft.AspNetCore.Http.Headers.RequestHeaders : object {
    [CompilerGeneratedAttribute]
private IHeaderDictionary <Headers>k__BackingField;
    public IHeaderDictionary Headers { get; }
    public IList`1<MediaTypeHeaderValue> Accept { get; public set; }
    public IList`1<StringWithQualityHeaderValue> AcceptCharset { get; public set; }
    public IList`1<StringWithQualityHeaderValue> AcceptEncoding { get; public set; }
    public IList`1<StringWithQualityHeaderValue> AcceptLanguage { get; public set; }
    public CacheControlHeaderValue CacheControl { get; public set; }
    public ContentDispositionHeaderValue ContentDisposition { get; public set; }
    public Nullable`1<long> ContentLength { get; public set; }
    public ContentRangeHeaderValue ContentRange { get; public set; }
    public MediaTypeHeaderValue ContentType { get; public set; }
    public IList`1<CookieHeaderValue> Cookie { get; public set; }
    public Nullable`1<DateTimeOffset> Date { get; public set; }
    public Nullable`1<DateTimeOffset> Expires { get; public set; }
    public HostString Host { get; public set; }
    public IList`1<EntityTagHeaderValue> IfMatch { get; public set; }
    public Nullable`1<DateTimeOffset> IfModifiedSince { get; public set; }
    public IList`1<EntityTagHeaderValue> IfNoneMatch { get; public set; }
    public RangeConditionHeaderValue IfRange { get; public set; }
    public Nullable`1<DateTimeOffset> IfUnmodifiedSince { get; public set; }
    public Nullable`1<DateTimeOffset> LastModified { get; public set; }
    public RangeHeaderValue Range { get; public set; }
    public Uri Referer { get; public set; }
    public RequestHeaders(IHeaderDictionary headers);
    [CompilerGeneratedAttribute]
public IHeaderDictionary get_Headers();
    public IList`1<MediaTypeHeaderValue> get_Accept();
    public void set_Accept(IList`1<MediaTypeHeaderValue> value);
    public IList`1<StringWithQualityHeaderValue> get_AcceptCharset();
    public void set_AcceptCharset(IList`1<StringWithQualityHeaderValue> value);
    public IList`1<StringWithQualityHeaderValue> get_AcceptEncoding();
    public void set_AcceptEncoding(IList`1<StringWithQualityHeaderValue> value);
    public IList`1<StringWithQualityHeaderValue> get_AcceptLanguage();
    public void set_AcceptLanguage(IList`1<StringWithQualityHeaderValue> value);
    public CacheControlHeaderValue get_CacheControl();
    public void set_CacheControl(CacheControlHeaderValue value);
    public ContentDispositionHeaderValue get_ContentDisposition();
    public void set_ContentDisposition(ContentDispositionHeaderValue value);
    public Nullable`1<long> get_ContentLength();
    public void set_ContentLength(Nullable`1<long> value);
    public ContentRangeHeaderValue get_ContentRange();
    public void set_ContentRange(ContentRangeHeaderValue value);
    public MediaTypeHeaderValue get_ContentType();
    public void set_ContentType(MediaTypeHeaderValue value);
    public IList`1<CookieHeaderValue> get_Cookie();
    public void set_Cookie(IList`1<CookieHeaderValue> value);
    public Nullable`1<DateTimeOffset> get_Date();
    public void set_Date(Nullable`1<DateTimeOffset> value);
    public Nullable`1<DateTimeOffset> get_Expires();
    public void set_Expires(Nullable`1<DateTimeOffset> value);
    public HostString get_Host();
    public void set_Host(HostString value);
    public IList`1<EntityTagHeaderValue> get_IfMatch();
    public void set_IfMatch(IList`1<EntityTagHeaderValue> value);
    public Nullable`1<DateTimeOffset> get_IfModifiedSince();
    public void set_IfModifiedSince(Nullable`1<DateTimeOffset> value);
    public IList`1<EntityTagHeaderValue> get_IfNoneMatch();
    public void set_IfNoneMatch(IList`1<EntityTagHeaderValue> value);
    public RangeConditionHeaderValue get_IfRange();
    public void set_IfRange(RangeConditionHeaderValue value);
    public Nullable`1<DateTimeOffset> get_IfUnmodifiedSince();
    public void set_IfUnmodifiedSince(Nullable`1<DateTimeOffset> value);
    public Nullable`1<DateTimeOffset> get_LastModified();
    public void set_LastModified(Nullable`1<DateTimeOffset> value);
    public RangeHeaderValue get_Range();
    public void set_Range(RangeHeaderValue value);
    public Uri get_Referer();
    public void set_Referer(Uri value);
    public T Get(string name);
    public IList`1<T> GetList(string name);
    public void Set(string name, object value);
    public void SetList(string name, IList`1<T> values);
    public void Append(string name, object value);
    public void AppendList(string name, IList`1<T> values);
}
public class Microsoft.AspNetCore.Http.Headers.ResponseHeaders : object {
    [CompilerGeneratedAttribute]
private IHeaderDictionary <Headers>k__BackingField;
    public IHeaderDictionary Headers { get; }
    public CacheControlHeaderValue CacheControl { get; public set; }
    public ContentDispositionHeaderValue ContentDisposition { get; public set; }
    public Nullable`1<long> ContentLength { get; public set; }
    public ContentRangeHeaderValue ContentRange { get; public set; }
    public MediaTypeHeaderValue ContentType { get; public set; }
    public Nullable`1<DateTimeOffset> Date { get; public set; }
    public EntityTagHeaderValue ETag { get; public set; }
    public Nullable`1<DateTimeOffset> Expires { get; public set; }
    public Nullable`1<DateTimeOffset> LastModified { get; public set; }
    public Uri Location { get; public set; }
    public IList`1<SetCookieHeaderValue> SetCookie { get; public set; }
    public ResponseHeaders(IHeaderDictionary headers);
    [CompilerGeneratedAttribute]
public IHeaderDictionary get_Headers();
    public CacheControlHeaderValue get_CacheControl();
    public void set_CacheControl(CacheControlHeaderValue value);
    public ContentDispositionHeaderValue get_ContentDisposition();
    public void set_ContentDisposition(ContentDispositionHeaderValue value);
    public Nullable`1<long> get_ContentLength();
    public void set_ContentLength(Nullable`1<long> value);
    public ContentRangeHeaderValue get_ContentRange();
    public void set_ContentRange(ContentRangeHeaderValue value);
    public MediaTypeHeaderValue get_ContentType();
    public void set_ContentType(MediaTypeHeaderValue value);
    public Nullable`1<DateTimeOffset> get_Date();
    public void set_Date(Nullable`1<DateTimeOffset> value);
    public EntityTagHeaderValue get_ETag();
    public void set_ETag(EntityTagHeaderValue value);
    public Nullable`1<DateTimeOffset> get_Expires();
    public void set_Expires(Nullable`1<DateTimeOffset> value);
    public Nullable`1<DateTimeOffset> get_LastModified();
    public void set_LastModified(Nullable`1<DateTimeOffset> value);
    public Uri get_Location();
    public void set_Location(Uri value);
    public IList`1<SetCookieHeaderValue> get_SetCookie();
    public void set_SetCookie(IList`1<SetCookieHeaderValue> value);
    public T Get(string name);
    public IList`1<T> GetList(string name);
    public void Set(string name, object value);
    public void SetList(string name, IList`1<T> values);
    public void Append(string name, object value);
    public void AppendList(string name, IList`1<T> values);
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Http.ResponseExtensions : object {
    [ExtensionAttribute]
public static void Clear(HttpResponse response);
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Http.SendFileResponseExtensions : object {
    [ExtensionAttribute]
public static Task SendFileAsync(HttpResponse response, IFileInfo file, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task SendFileAsync(HttpResponse response, IFileInfo file, long offset, Nullable`1<long> count, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task SendFileAsync(HttpResponse response, string fileName, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task SendFileAsync(HttpResponse response, string fileName, long offset, Nullable`1<long> count, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Http.SendFileResponseExtensions/<SendFileAsyncCore>d__4")]
private static Task SendFileAsyncCore(HttpResponse response, IFileInfo file, long offset, Nullable`1<long> count, CancellationToken cancellationToken);
    private static Task SendFileAsyncCore(HttpResponse response, string fileName, long offset, Nullable`1<long> count, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Http.SendFileResponseExtensions/<SendFileAsyncCore>d__6")]
private static Task SendFileAsyncCore(Stream outputStream, string fileName, long offset, Nullable`1<long> count, CancellationToken cancel);
    private static void CheckRange(long offset, Nullable`1<long> count, long fileLength);
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Http.SessionExtensions : object {
    [ExtensionAttribute]
public static void SetInt32(ISession session, string key, int value);
    [ExtensionAttribute]
public static Nullable`1<int> GetInt32(ISession session, string key);
    [ExtensionAttribute]
public static void SetString(ISession session, string key, string value);
    [ExtensionAttribute]
public static string GetString(ISession session, string key);
    [ExtensionAttribute]
public static Byte[] Get(ISession session, string key);
}
