public class Microsoft.AspNetCore.Http.CookieOptions : object {
    [CompilerGeneratedAttribute]
private string <Domain>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <Expires>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Secure>k__BackingField;
    [CompilerGeneratedAttribute]
private SameSiteMode <SameSite>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HttpOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <MaxAge>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsEssential>k__BackingField;
    public string Domain { get; public set; }
    public string Path { get; public set; }
    public Nullable`1<DateTimeOffset> Expires { get; public set; }
    public bool Secure { get; public set; }
    public SameSiteMode SameSite { get; public set; }
    public bool HttpOnly { get; public set; }
    public Nullable`1<TimeSpan> MaxAge { get; public set; }
    public bool IsEssential { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Domain();
    [CompilerGeneratedAttribute]
public void set_Domain(string value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_Expires();
    [CompilerGeneratedAttribute]
public void set_Expires(Nullable`1<DateTimeOffset> value);
    [CompilerGeneratedAttribute]
public bool get_Secure();
    [CompilerGeneratedAttribute]
public void set_Secure(bool value);
    [CompilerGeneratedAttribute]
public SameSiteMode get_SameSite();
    [CompilerGeneratedAttribute]
public void set_SameSite(SameSiteMode value);
    [CompilerGeneratedAttribute]
public bool get_HttpOnly();
    [CompilerGeneratedAttribute]
public void set_HttpOnly(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_MaxAge();
    [CompilerGeneratedAttribute]
public void set_MaxAge(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public bool get_IsEssential();
    [CompilerGeneratedAttribute]
public void set_IsEssential(bool value);
}
public class Microsoft.AspNetCore.Http.Features.Authentication.AuthenticateContext : object {
    [CompilerGeneratedAttribute]
private string <AuthenticationScheme>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Accepted>k__BackingField;
    [CompilerGeneratedAttribute]
private ClaimsPrincipal <Principal>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <Error>k__BackingField;
    public string AuthenticationScheme { get; }
    public bool Accepted { get; private set; }
    public ClaimsPrincipal Principal { get; private set; }
    public IDictionary`2<string, string> Properties { get; private set; }
    public IDictionary`2<string, object> Description { get; private set; }
    public Exception Error { get; private set; }
    public AuthenticateContext(string authenticationScheme);
    [CompilerGeneratedAttribute]
public string get_AuthenticationScheme();
    [CompilerGeneratedAttribute]
public bool get_Accepted();
    [CompilerGeneratedAttribute]
private void set_Accepted(bool value);
    [CompilerGeneratedAttribute]
public ClaimsPrincipal get_Principal();
    [CompilerGeneratedAttribute]
private void set_Principal(ClaimsPrincipal value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_Properties();
    [CompilerGeneratedAttribute]
private void set_Properties(IDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_Description();
    [CompilerGeneratedAttribute]
private void set_Description(IDictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public Exception get_Error();
    [CompilerGeneratedAttribute]
private void set_Error(Exception value);
    public virtual void Authenticated(ClaimsPrincipal principal, IDictionary`2<string, string> properties, IDictionary`2<string, object> description);
    public virtual void NotAuthenticated();
    public virtual void Failed(Exception error);
}
public enum Microsoft.AspNetCore.Http.Features.Authentication.ChallengeBehavior : Enum {
    public int value__;
    public static ChallengeBehavior Automatic;
    public static ChallengeBehavior Unauthorized;
    public static ChallengeBehavior Forbidden;
}
public class Microsoft.AspNetCore.Http.Features.Authentication.ChallengeContext : object {
    [CompilerGeneratedAttribute]
private string <AuthenticationScheme>k__BackingField;
    [CompilerGeneratedAttribute]
private ChallengeBehavior <Behavior>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Accepted>k__BackingField;
    public string AuthenticationScheme { get; }
    public ChallengeBehavior Behavior { get; }
    public IDictionary`2<string, string> Properties { get; }
    public bool Accepted { get; private set; }
    public ChallengeContext(string authenticationScheme);
    public ChallengeContext(string authenticationScheme, IDictionary`2<string, string> properties, ChallengeBehavior behavior);
    [CompilerGeneratedAttribute]
public string get_AuthenticationScheme();
    [CompilerGeneratedAttribute]
public ChallengeBehavior get_Behavior();
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_Properties();
    [CompilerGeneratedAttribute]
public bool get_Accepted();
    [CompilerGeneratedAttribute]
private void set_Accepted(bool value);
    public void Accept();
}
public class Microsoft.AspNetCore.Http.Features.Authentication.DescribeSchemesContext : object {
    private List`1<IDictionary`2<string, object>> _results;
    public IEnumerable`1<IDictionary`2<string, object>> Results { get; }
    public IEnumerable`1<IDictionary`2<string, object>> get_Results();
    public void Accept(IDictionary`2<string, object> description);
}
public interface Microsoft.AspNetCore.Http.Features.Authentication.IAuthenticationHandler {
    public abstract virtual void GetDescriptions(DescribeSchemesContext context);
    public abstract virtual Task AuthenticateAsync(AuthenticateContext context);
    public abstract virtual Task ChallengeAsync(ChallengeContext context);
    public abstract virtual Task SignInAsync(SignInContext context);
    public abstract virtual Task SignOutAsync(SignOutContext context);
}
public interface Microsoft.AspNetCore.Http.Features.Authentication.IHttpAuthenticationFeature {
    public ClaimsPrincipal User { get; public set; }
    [ObsoleteAttribute("This is obsolete and will be removed in a future version. See https://go.microsoft.com/fwlink/?linkid=845470.")]
public IAuthenticationHandler Handler { get; public set; }
    public abstract virtual ClaimsPrincipal get_User();
    public abstract virtual void set_User(ClaimsPrincipal value);
    public abstract virtual IAuthenticationHandler get_Handler();
    public abstract virtual void set_Handler(IAuthenticationHandler value);
}
public class Microsoft.AspNetCore.Http.Features.Authentication.SignInContext : object {
    [CompilerGeneratedAttribute]
private string <AuthenticationScheme>k__BackingField;
    [CompilerGeneratedAttribute]
private ClaimsPrincipal <Principal>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Accepted>k__BackingField;
    public string AuthenticationScheme { get; }
    public ClaimsPrincipal Principal { get; }
    public IDictionary`2<string, string> Properties { get; }
    public bool Accepted { get; private set; }
    public SignInContext(string authenticationScheme, ClaimsPrincipal principal, IDictionary`2<string, string> properties);
    [CompilerGeneratedAttribute]
public string get_AuthenticationScheme();
    [CompilerGeneratedAttribute]
public ClaimsPrincipal get_Principal();
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_Properties();
    [CompilerGeneratedAttribute]
public bool get_Accepted();
    [CompilerGeneratedAttribute]
private void set_Accepted(bool value);
    public void Accept();
}
public class Microsoft.AspNetCore.Http.Features.Authentication.SignOutContext : object {
    [CompilerGeneratedAttribute]
private string <AuthenticationScheme>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Accepted>k__BackingField;
    public string AuthenticationScheme { get; }
    public IDictionary`2<string, string> Properties { get; }
    public bool Accepted { get; private set; }
    public SignOutContext(string authenticationScheme, IDictionary`2<string, string> properties);
    [CompilerGeneratedAttribute]
public string get_AuthenticationScheme();
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_Properties();
    [CompilerGeneratedAttribute]
public bool get_Accepted();
    [CompilerGeneratedAttribute]
private void set_Accepted(bool value);
    public void Accept();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.AspNetCore.Http.Features.FeatureCollection : object {
    private static KeyComparer FeatureKeyComparer;
    private IFeatureCollection _defaults;
    private IDictionary`2<Type, object> _features;
    private Int32 modreq(System.Runtime.CompilerServices.IsVolatile) _containerRevision;
    public int Revision { get; }
    public bool IsReadOnly { get; }
    public object Item { get; public set; }
    public FeatureCollection(IFeatureCollection defaults);
    private static FeatureCollection();
    public virtual int get_Revision();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual object get_Item(Type key);
    public sealed virtual void set_Item(Type key, object value);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    [IteratorStateMachineAttribute("Microsoft.AspNetCore.Http.Features.FeatureCollection/<GetEnumerator>d__14")]
public sealed virtual IEnumerator`1<KeyValuePair`2<Type, object>> GetEnumerator();
    public sealed virtual TFeature Get();
    public sealed virtual void Set(TFeature instance);
}
public class Microsoft.AspNetCore.Http.Features.FeatureReference`1 : ValueType {
    private T _feature;
    private int _revision;
    public static FeatureReference`1<T> Default;
    private FeatureReference`1(T feature, int revision);
    private static FeatureReference`1();
    public T Fetch(IFeatureCollection features);
    public T Update(IFeatureCollection features, T feature);
}
public class Microsoft.AspNetCore.Http.Features.FeatureReferences`1 : ValueType {
    [CompilerGeneratedAttribute]
private IFeatureCollection <Collection>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Revision>k__BackingField;
    public TCache Cache;
    public IFeatureCollection Collection { get; private set; }
    public int Revision { get; private set; }
    public FeatureReferences`1(IFeatureCollection collection);
    [CompilerGeneratedAttribute]
public IFeatureCollection get_Collection();
    [CompilerGeneratedAttribute]
private void set_Collection(IFeatureCollection value);
    [CompilerGeneratedAttribute]
public int get_Revision();
    [CompilerGeneratedAttribute]
private void set_Revision(int value);
    public TFeature Fetch(TFeature& cached, TState state, Func`2<TState, TFeature> factory);
    private TFeature UpdateCached(TFeature& cached, TState state, Func`2<TState, TFeature> factory, int revision, bool flush);
    public TFeature Fetch(TFeature& cached, Func`2<IFeatureCollection, TFeature> factory);
}
[DefaultMemberAttribute("Item")]
public interface Microsoft.AspNetCore.Http.Features.IFeatureCollection {
    public bool IsReadOnly { get; }
    public int Revision { get; }
    public object Item { get; public set; }
    public abstract virtual bool get_IsReadOnly();
    public abstract virtual int get_Revision();
    public abstract virtual object get_Item(Type key);
    public abstract virtual void set_Item(Type key, object value);
    public abstract virtual TFeature Get();
    public abstract virtual void Set(TFeature instance);
}
public interface Microsoft.AspNetCore.Http.Features.IFormFeature {
    public bool HasFormContentType { get; }
    public IFormCollection Form { get; public set; }
    public abstract virtual bool get_HasFormContentType();
    public abstract virtual IFormCollection get_Form();
    public abstract virtual void set_Form(IFormCollection value);
    public abstract virtual IFormCollection ReadForm();
    public abstract virtual Task`1<IFormCollection> ReadFormAsync(CancellationToken cancellationToken);
}
public interface Microsoft.AspNetCore.Http.Features.IHttpBodyControlFeature {
    public bool AllowSynchronousIO { get; public set; }
    public abstract virtual bool get_AllowSynchronousIO();
    public abstract virtual void set_AllowSynchronousIO(bool value);
}
public interface Microsoft.AspNetCore.Http.Features.IHttpBufferingFeature {
    public abstract virtual void DisableRequestBuffering();
    public abstract virtual void DisableResponseBuffering();
}
public interface Microsoft.AspNetCore.Http.Features.IHttpConnectionFeature {
    public string ConnectionId { get; public set; }
    public IPAddress RemoteIpAddress { get; public set; }
    public IPAddress LocalIpAddress { get; public set; }
    public int RemotePort { get; public set; }
    public int LocalPort { get; public set; }
    public abstract virtual string get_ConnectionId();
    public abstract virtual void set_ConnectionId(string value);
    public abstract virtual IPAddress get_RemoteIpAddress();
    public abstract virtual void set_RemoteIpAddress(IPAddress value);
    public abstract virtual IPAddress get_LocalIpAddress();
    public abstract virtual void set_LocalIpAddress(IPAddress value);
    public abstract virtual int get_RemotePort();
    public abstract virtual void set_RemotePort(int value);
    public abstract virtual int get_LocalPort();
    public abstract virtual void set_LocalPort(int value);
}
public interface Microsoft.AspNetCore.Http.Features.IHttpMaxRequestBodySizeFeature {
    public bool IsReadOnly { get; }
    public Nullable`1<long> MaxRequestBodySize { get; public set; }
    public abstract virtual bool get_IsReadOnly();
    public abstract virtual Nullable`1<long> get_MaxRequestBodySize();
    public abstract virtual void set_MaxRequestBodySize(Nullable`1<long> value);
}
public interface Microsoft.AspNetCore.Http.Features.IHttpRequestFeature {
    public string Protocol { get; public set; }
    public string Scheme { get; public set; }
    public string Method { get; public set; }
    public string PathBase { get; public set; }
    public string Path { get; public set; }
    public string QueryString { get; public set; }
    public string RawTarget { get; public set; }
    public IHeaderDictionary Headers { get; public set; }
    public Stream Body { get; public set; }
    public abstract virtual string get_Protocol();
    public abstract virtual void set_Protocol(string value);
    public abstract virtual string get_Scheme();
    public abstract virtual void set_Scheme(string value);
    public abstract virtual string get_Method();
    public abstract virtual void set_Method(string value);
    public abstract virtual string get_PathBase();
    public abstract virtual void set_PathBase(string value);
    public abstract virtual string get_Path();
    public abstract virtual void set_Path(string value);
    public abstract virtual string get_QueryString();
    public abstract virtual void set_QueryString(string value);
    public abstract virtual string get_RawTarget();
    public abstract virtual void set_RawTarget(string value);
    public abstract virtual IHeaderDictionary get_Headers();
    public abstract virtual void set_Headers(IHeaderDictionary value);
    public abstract virtual Stream get_Body();
    public abstract virtual void set_Body(Stream value);
}
public interface Microsoft.AspNetCore.Http.Features.IHttpRequestIdentifierFeature {
    public string TraceIdentifier { get; public set; }
    public abstract virtual string get_TraceIdentifier();
    public abstract virtual void set_TraceIdentifier(string value);
}
public interface Microsoft.AspNetCore.Http.Features.IHttpRequestLifetimeFeature {
    public CancellationToken RequestAborted { get; public set; }
    public abstract virtual CancellationToken get_RequestAborted();
    public abstract virtual void set_RequestAborted(CancellationToken value);
    public abstract virtual void Abort();
}
public interface Microsoft.AspNetCore.Http.Features.IHttpResponseFeature {
    public int StatusCode { get; public set; }
    public string ReasonPhrase { get; public set; }
    public IHeaderDictionary Headers { get; public set; }
    public Stream Body { get; public set; }
    public bool HasStarted { get; }
    public abstract virtual int get_StatusCode();
    public abstract virtual void set_StatusCode(int value);
    public abstract virtual string get_ReasonPhrase();
    public abstract virtual void set_ReasonPhrase(string value);
    public abstract virtual IHeaderDictionary get_Headers();
    public abstract virtual void set_Headers(IHeaderDictionary value);
    public abstract virtual Stream get_Body();
    public abstract virtual void set_Body(Stream value);
    public abstract virtual bool get_HasStarted();
    public abstract virtual void OnStarting(Func`2<object, Task> callback, object state);
    public abstract virtual void OnCompleted(Func`2<object, Task> callback, object state);
}
public interface Microsoft.AspNetCore.Http.Features.IHttpResponseTrailersFeature {
    public IHeaderDictionary Trailers { get; public set; }
    public abstract virtual IHeaderDictionary get_Trailers();
    public abstract virtual void set_Trailers(IHeaderDictionary value);
}
public interface Microsoft.AspNetCore.Http.Features.IHttpSendFileFeature {
    public abstract virtual Task SendFileAsync(string path, long offset, Nullable`1<long> count, CancellationToken cancellation);
}
public interface Microsoft.AspNetCore.Http.Features.IHttpUpgradeFeature {
    public bool IsUpgradableRequest { get; }
    public abstract virtual bool get_IsUpgradableRequest();
    public abstract virtual Task`1<Stream> UpgradeAsync();
}
public interface Microsoft.AspNetCore.Http.Features.IHttpWebSocketFeature {
    public bool IsWebSocketRequest { get; }
    public abstract virtual bool get_IsWebSocketRequest();
    public abstract virtual Task`1<WebSocket> AcceptAsync(WebSocketAcceptContext context);
}
public interface Microsoft.AspNetCore.Http.Features.IItemsFeature {
    public IDictionary`2<object, object> Items { get; public set; }
    public abstract virtual IDictionary`2<object, object> get_Items();
    public abstract virtual void set_Items(IDictionary`2<object, object> value);
}
public interface Microsoft.AspNetCore.Http.Features.IQueryFeature {
    public IQueryCollection Query { get; public set; }
    public abstract virtual IQueryCollection get_Query();
    public abstract virtual void set_Query(IQueryCollection value);
}
public interface Microsoft.AspNetCore.Http.Features.IRequestCookiesFeature {
    public IRequestCookieCollection Cookies { get; public set; }
    public abstract virtual IRequestCookieCollection get_Cookies();
    public abstract virtual void set_Cookies(IRequestCookieCollection value);
}
public interface Microsoft.AspNetCore.Http.Features.IResponseCookiesFeature {
    public IResponseCookies Cookies { get; }
    public abstract virtual IResponseCookies get_Cookies();
}
public interface Microsoft.AspNetCore.Http.Features.IServiceProvidersFeature {
    public IServiceProvider RequestServices { get; public set; }
    public abstract virtual IServiceProvider get_RequestServices();
    public abstract virtual void set_RequestServices(IServiceProvider value);
}
public interface Microsoft.AspNetCore.Http.Features.ISessionFeature {
    public ISession Session { get; public set; }
    public abstract virtual ISession get_Session();
    public abstract virtual void set_Session(ISession value);
}
public interface Microsoft.AspNetCore.Http.Features.ITlsConnectionFeature {
    public X509Certificate2 ClientCertificate { get; public set; }
    public abstract virtual X509Certificate2 get_ClientCertificate();
    public abstract virtual void set_ClientCertificate(X509Certificate2 value);
    public abstract virtual Task`1<X509Certificate2> GetClientCertificateAsync(CancellationToken cancellationToken);
}
public interface Microsoft.AspNetCore.Http.Features.ITlsTokenBindingFeature {
    public abstract virtual Byte[] GetProvidedTokenBindingId();
    public abstract virtual Byte[] GetReferredTokenBindingId();
}
public interface Microsoft.AspNetCore.Http.Features.ITrackingConsentFeature {
    public bool IsConsentNeeded { get; }
    public bool HasConsent { get; }
    public bool CanTrack { get; }
    public abstract virtual bool get_IsConsentNeeded();
    public abstract virtual bool get_HasConsent();
    public abstract virtual bool get_CanTrack();
    public abstract virtual void GrantConsent();
    public abstract virtual void WithdrawConsent();
    public abstract virtual string CreateConsentCookie();
}
[DefaultMemberAttribute("Item")]
public interface Microsoft.AspNetCore.Http.IFormCollection {
    public int Count { get; }
    public ICollection`1<string> Keys { get; }
    public StringValues Item { get; }
    public IFormFileCollection Files { get; }
    public abstract virtual int get_Count();
    public abstract virtual ICollection`1<string> get_Keys();
    public abstract virtual bool ContainsKey(string key);
    public abstract virtual bool TryGetValue(string key, StringValues& value);
    public abstract virtual StringValues get_Item(string key);
    public abstract virtual IFormFileCollection get_Files();
}
public interface Microsoft.AspNetCore.Http.IFormFile {
    public string ContentType { get; }
    public string ContentDisposition { get; }
    public IHeaderDictionary Headers { get; }
    public long Length { get; }
    public string Name { get; }
    public string FileName { get; }
    public abstract virtual string get_ContentType();
    public abstract virtual string get_ContentDisposition();
    public abstract virtual IHeaderDictionary get_Headers();
    public abstract virtual long get_Length();
    public abstract virtual string get_Name();
    public abstract virtual string get_FileName();
    public abstract virtual Stream OpenReadStream();
    public abstract virtual void CopyTo(Stream target);
    public abstract virtual Task CopyToAsync(Stream target, CancellationToken cancellationToken);
}
[DefaultMemberAttribute("Item")]
public interface Microsoft.AspNetCore.Http.IFormFileCollection {
    public IFormFile Item { get; }
    public abstract virtual IFormFile get_Item(string name);
    public abstract virtual IFormFile GetFile(string name);
    public abstract virtual IReadOnlyList`1<IFormFile> GetFiles(string name);
}
[DefaultMemberAttribute("Item")]
public interface Microsoft.AspNetCore.Http.IHeaderDictionary {
    public StringValues Item { get; public set; }
    public Nullable`1<long> ContentLength { get; public set; }
    public abstract virtual StringValues get_Item(string key);
    public abstract virtual void set_Item(string key, StringValues value);
    public abstract virtual Nullable`1<long> get_ContentLength();
    public abstract virtual void set_ContentLength(Nullable`1<long> value);
}
[DefaultMemberAttribute("Item")]
public interface Microsoft.AspNetCore.Http.IQueryCollection {
    public int Count { get; }
    public ICollection`1<string> Keys { get; }
    public StringValues Item { get; }
    public abstract virtual int get_Count();
    public abstract virtual ICollection`1<string> get_Keys();
    public abstract virtual bool ContainsKey(string key);
    public abstract virtual bool TryGetValue(string key, StringValues& value);
    public abstract virtual StringValues get_Item(string key);
}
[DefaultMemberAttribute("Item")]
public interface Microsoft.AspNetCore.Http.IRequestCookieCollection {
    public int Count { get; }
    public ICollection`1<string> Keys { get; }
    public string Item { get; }
    public abstract virtual int get_Count();
    public abstract virtual ICollection`1<string> get_Keys();
    public abstract virtual bool ContainsKey(string key);
    public abstract virtual bool TryGetValue(string key, String& value);
    public abstract virtual string get_Item(string key);
}
public interface Microsoft.AspNetCore.Http.IResponseCookies {
    public abstract virtual void Append(string key, string value);
    public abstract virtual void Append(string key, string value, CookieOptions options);
    public abstract virtual void Delete(string key);
    public abstract virtual void Delete(string key, CookieOptions options);
}
public interface Microsoft.AspNetCore.Http.ISession {
    public bool IsAvailable { get; }
    public string Id { get; }
    public IEnumerable`1<string> Keys { get; }
    public abstract virtual bool get_IsAvailable();
    public abstract virtual string get_Id();
    public abstract virtual IEnumerable`1<string> get_Keys();
    public abstract virtual Task LoadAsync(CancellationToken cancellationToken);
    public abstract virtual Task CommitAsync(CancellationToken cancellationToken);
    public abstract virtual bool TryGetValue(string key, Byte[]& value);
    public abstract virtual void Set(string key, Byte[] value);
    public abstract virtual void Remove(string key);
    public abstract virtual void Clear();
}
public enum Microsoft.AspNetCore.Http.SameSiteMode : Enum {
    public int value__;
    public static SameSiteMode None;
    public static SameSiteMode Lax;
    public static SameSiteMode Strict;
}
public class Microsoft.AspNetCore.Http.WebSocketAcceptContext : object {
    [CompilerGeneratedAttribute]
private string <SubProtocol>k__BackingField;
    public string SubProtocol { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_SubProtocol();
    [CompilerGeneratedAttribute]
public virtual void set_SubProtocol(string value);
}
