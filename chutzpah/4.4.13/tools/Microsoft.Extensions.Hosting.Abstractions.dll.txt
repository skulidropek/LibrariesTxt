[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.ServiceCollectionHostedServiceExtensions : object {
    [ExtensionAttribute]
public static IServiceCollection AddHostedService(IServiceCollection services);
}
public abstract class Microsoft.Extensions.Hosting.BackgroundService : object {
    private Task _executingTask;
    private CancellationTokenSource _stoppingCts;
    protected abstract virtual Task ExecuteAsync(CancellationToken stoppingToken);
    public virtual Task StartAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Extensions.Hosting.BackgroundService/<StopAsync>d__4")]
public virtual Task StopAsync(CancellationToken cancellationToken);
    public virtual void Dispose();
}
public static class Microsoft.Extensions.Hosting.EnvironmentName : object {
    public static string Development;
    public static string Staging;
    public static string Production;
    private static EnvironmentName();
}
public class Microsoft.Extensions.Hosting.HostBuilderContext : object {
    [CompilerGeneratedAttribute]
private IHostingEnvironment <HostingEnvironment>k__BackingField;
    [CompilerGeneratedAttribute]
private IConfiguration <Configuration>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<object, object> <Properties>k__BackingField;
    public IHostingEnvironment HostingEnvironment { get; public set; }
    public IConfiguration Configuration { get; public set; }
    public IDictionary`2<object, object> Properties { get; }
    public HostBuilderContext(IDictionary`2<object, object> properties);
    [CompilerGeneratedAttribute]
public IHostingEnvironment get_HostingEnvironment();
    [CompilerGeneratedAttribute]
public void set_HostingEnvironment(IHostingEnvironment value);
    [CompilerGeneratedAttribute]
public IConfiguration get_Configuration();
    [CompilerGeneratedAttribute]
public void set_Configuration(IConfiguration value);
    [CompilerGeneratedAttribute]
public IDictionary`2<object, object> get_Properties();
}
public static class Microsoft.Extensions.Hosting.HostDefaults : object {
    public static string ApplicationKey;
    public static string EnvironmentKey;
    public static string ContentRootKey;
    private static HostDefaults();
}
[ExtensionAttribute]
public static class Microsoft.Extensions.Hosting.HostingAbstractionsHostBuilderExtensions : object {
    [ExtensionAttribute]
public static IHost Start(IHostBuilder hostBuilder);
}
[ExtensionAttribute]
public static class Microsoft.Extensions.Hosting.HostingAbstractionsHostExtensions : object {
    [ExtensionAttribute]
public static void Start(IHost host);
    [ExtensionAttribute]
public static Task StopAsync(IHost host, TimeSpan timeout);
    [ExtensionAttribute]
public static void WaitForShutdown(IHost host);
    [ExtensionAttribute]
public static void Run(IHost host);
    [AsyncStateMachineAttribute("Microsoft.Extensions.Hosting.HostingAbstractionsHostExtensions/<RunAsync>d__4")]
[ExtensionAttribute]
public static Task RunAsync(IHost host, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.Extensions.Hosting.HostingAbstractionsHostExtensions/<WaitForShutdownAsync>d__5")]
[ExtensionAttribute]
public static Task WaitForShutdownAsync(IHost host, CancellationToken token);
}
[ExtensionAttribute]
public static class Microsoft.Extensions.Hosting.HostingEnvironmentExtensions : object {
    [ExtensionAttribute]
public static bool IsDevelopment(IHostingEnvironment hostingEnvironment);
    [ExtensionAttribute]
public static bool IsStaging(IHostingEnvironment hostingEnvironment);
    [ExtensionAttribute]
public static bool IsProduction(IHostingEnvironment hostingEnvironment);
    [ExtensionAttribute]
public static bool IsEnvironment(IHostingEnvironment hostingEnvironment, string environmentName);
}
public interface Microsoft.Extensions.Hosting.IApplicationLifetime {
    public CancellationToken ApplicationStarted { get; }
    public CancellationToken ApplicationStopping { get; }
    public CancellationToken ApplicationStopped { get; }
    public abstract virtual CancellationToken get_ApplicationStarted();
    public abstract virtual CancellationToken get_ApplicationStopping();
    public abstract virtual CancellationToken get_ApplicationStopped();
    public abstract virtual void StopApplication();
}
public interface Microsoft.Extensions.Hosting.IHost {
    public IServiceProvider Services { get; }
    public abstract virtual IServiceProvider get_Services();
    public abstract virtual Task StartAsync(CancellationToken cancellationToken);
    public abstract virtual Task StopAsync(CancellationToken cancellationToken);
}
public interface Microsoft.Extensions.Hosting.IHostBuilder {
    public IDictionary`2<object, object> Properties { get; }
    public abstract virtual IDictionary`2<object, object> get_Properties();
    public abstract virtual IHostBuilder ConfigureHostConfiguration(Action`1<IConfigurationBuilder> configureDelegate);
    public abstract virtual IHostBuilder ConfigureAppConfiguration(Action`2<HostBuilderContext, IConfigurationBuilder> configureDelegate);
    public abstract virtual IHostBuilder ConfigureServices(Action`2<HostBuilderContext, IServiceCollection> configureDelegate);
    public abstract virtual IHostBuilder UseServiceProviderFactory(IServiceProviderFactory`1<TContainerBuilder> factory);
    public abstract virtual IHostBuilder ConfigureContainer(Action`2<HostBuilderContext, TContainerBuilder> configureDelegate);
    public abstract virtual IHost Build();
}
public interface Microsoft.Extensions.Hosting.IHostedService {
    public abstract virtual Task StartAsync(CancellationToken cancellationToken);
    public abstract virtual Task StopAsync(CancellationToken cancellationToken);
}
public interface Microsoft.Extensions.Hosting.IHostingEnvironment {
    public string EnvironmentName { get; public set; }
    public string ApplicationName { get; public set; }
    public string ContentRootPath { get; public set; }
    public IFileProvider ContentRootFileProvider { get; public set; }
    public abstract virtual string get_EnvironmentName();
    public abstract virtual void set_EnvironmentName(string value);
    public abstract virtual string get_ApplicationName();
    public abstract virtual void set_ApplicationName(string value);
    public abstract virtual string get_ContentRootPath();
    public abstract virtual void set_ContentRootPath(string value);
    public abstract virtual IFileProvider get_ContentRootFileProvider();
    public abstract virtual void set_ContentRootFileProvider(IFileProvider value);
}
public interface Microsoft.Extensions.Hosting.IHostLifetime {
    public abstract virtual Task WaitForStartAsync(CancellationToken cancellationToken);
    public abstract virtual Task StopAsync(CancellationToken cancellationToken);
}
