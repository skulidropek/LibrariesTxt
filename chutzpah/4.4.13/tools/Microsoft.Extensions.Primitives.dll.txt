[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
internal class Microsoft.Extensions.Internal.HashCodeCombiner : ValueType {
    private long _combinedHash64;
    public int CombinedHash { get; }
    private HashCodeCombiner(long seed);
    public int get_CombinedHash();
    public void Add(IEnumerable e);
    public static int op_Implicit(HashCodeCombiner self);
    public void Add(int i);
    public void Add(string s);
    public void Add(object o);
    public void Add(TValue value, IEqualityComparer`1<TValue> comparer);
    public static HashCodeCombiner Start();
}
public class Microsoft.Extensions.Primitives.CancellationChangeToken : object {
    [CompilerGeneratedAttribute]
private bool <ActiveChangeCallbacks>k__BackingField;
    [CompilerGeneratedAttribute]
private CancellationToken <Token>k__BackingField;
    public bool ActiveChangeCallbacks { get; private set; }
    public bool HasChanged { get; }
    private CancellationToken Token { get; }
    public CancellationChangeToken(CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ActiveChangeCallbacks();
    [CompilerGeneratedAttribute]
private void set_ActiveChangeCallbacks(bool value);
    public sealed virtual bool get_HasChanged();
    [CompilerGeneratedAttribute]
private CancellationToken get_Token();
    public sealed virtual IDisposable RegisterChangeCallback(Action`1<object> callback, object state);
}
public static class Microsoft.Extensions.Primitives.ChangeToken : object {
    public static IDisposable OnChange(Func`1<IChangeToken> changeTokenProducer, Action changeTokenConsumer);
    public static IDisposable OnChange(Func`1<IChangeToken> changeTokenProducer, Action`1<TState> changeTokenConsumer, TState state);
}
public class Microsoft.Extensions.Primitives.CompositeChangeToken : object {
    private static Action`1<object> _onChangeDelegate;
    private object _callbackLock;
    private CancellationTokenSource _cancellationTokenSource;
    private bool _registeredCallbackProxy;
    private List`1<IDisposable> _disposables;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<IChangeToken> <ChangeTokens>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ActiveChangeCallbacks>k__BackingField;
    public IReadOnlyList`1<IChangeToken> ChangeTokens { get; }
    public bool HasChanged { get; }
    public bool ActiveChangeCallbacks { get; }
    public CompositeChangeToken(IReadOnlyList`1<IChangeToken> changeTokens);
    private static CompositeChangeToken();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<IChangeToken> get_ChangeTokens();
    public sealed virtual IDisposable RegisterChangeCallback(Action`1<object> callback, object state);
    public sealed virtual bool get_HasChanged();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ActiveChangeCallbacks();
    private void EnsureCallbacksInitialized();
    private static void OnChange(object state);
}
internal enum Microsoft.Extensions.Primitives.ExceptionArgument : Enum {
    public int value__;
    public static ExceptionArgument buffer;
    public static ExceptionArgument offset;
    public static ExceptionArgument length;
    public static ExceptionArgument text;
    public static ExceptionArgument start;
    public static ExceptionArgument count;
    public static ExceptionArgument index;
    public static ExceptionArgument value;
    public static ExceptionArgument capacity;
    public static ExceptionArgument separators;
}
internal enum Microsoft.Extensions.Primitives.ExceptionResource : Enum {
    public int value__;
    public static ExceptionResource Argument_InvalidOffsetLength;
    public static ExceptionResource Capacity_CannotChangeAfterWriteStarted;
    public static ExceptionResource Capacity_NotEnough;
    public static ExceptionResource Capacity_NotUsedEntirely;
}
[ExtensionAttribute]
public static class Microsoft.Extensions.Primitives.Extensions : object {
    [ExtensionAttribute]
public static StringBuilder Append(StringBuilder builder, StringSegment segment);
}
public interface Microsoft.Extensions.Primitives.IChangeToken {
    public bool HasChanged { get; }
    public bool ActiveChangeCallbacks { get; }
    public abstract virtual bool get_HasChanged();
    public abstract virtual bool get_ActiveChangeCallbacks();
    public abstract virtual IDisposable RegisterChangeCallback(Action`1<object> callback, object state);
}
[DebuggerDisplayAttribute("Value = {_value}")]
public class Microsoft.Extensions.Primitives.InplaceStringBuilder : ValueType {
    private int _offset;
    private int _capacity;
    private string _value;
    public int Capacity { get; public set; }
    public InplaceStringBuilder(int capacity);
    public int get_Capacity();
    public void set_Capacity(int value);
    public void Append(string value);
    public void Append(StringSegment segment);
    public void Append(string value, int offset, int count);
    public void Append(char c);
    public virtual string ToString();
    private void EnsureValueIsInitialized();
    private void ThrowValidationError(string value, int offset, int count);
}
[CompilerGeneratedAttribute]
internal class Microsoft.Extensions.Primitives.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string Argument_InvalidOffsetLength { get; }
    internal static string Capacity_CannotChangeAfterWriteStarted { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_Argument_InvalidOffsetLength();
    internal static string get_Capacity_CannotChangeAfterWriteStarted();
}
[IsReadOnlyAttribute]
[DefaultMemberAttribute("Item")]
public class Microsoft.Extensions.Primitives.StringSegment : ValueType {
    public static StringSegment Empty;
    [CompilerGeneratedAttribute]
private string <Buffer>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Offset>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Length>k__BackingField;
    public string Buffer { get; }
    public int Offset { get; }
    public int Length { get; }
    public string Value { get; }
    public bool HasValue { get; }
    public char Item { get; }
    public StringSegment(string buffer);
    public StringSegment(string buffer, int offset, int length);
    private static StringSegment();
    private static void ThrowInvalidArguments(string buffer, int offset, int length);
    private static Exception GetInvalidArgumentException(string buffer, int offset, int length);
    [CompilerGeneratedAttribute]
public string get_Buffer();
    [CompilerGeneratedAttribute]
public int get_Offset();
    [CompilerGeneratedAttribute]
public int get_Length();
    public string get_Value();
    public bool get_HasValue();
    public char get_Item(int index);
    public ReadOnlySpan`1<char> AsSpan();
    public ReadOnlyMemory`1<char> AsMemory();
    public static int Compare(StringSegment a, StringSegment b, StringComparison comparisonType);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(StringSegment other);
    public bool Equals(StringSegment other, StringComparison comparisonType);
    public static bool Equals(StringSegment a, StringSegment b, StringComparison comparisonType);
    public sealed virtual bool Equals(string text);
    public bool Equals(string text, StringComparison comparisonType);
    public virtual int GetHashCode();
    public static bool op_Equality(StringSegment left, StringSegment right);
    public static bool op_Inequality(StringSegment left, StringSegment right);
    public static StringSegment op_Implicit(string value);
    public static ReadOnlySpan`1<char> op_Implicit(StringSegment segment);
    public static ReadOnlyMemory`1<char> op_Implicit(StringSegment segment);
    public bool StartsWith(string text, StringComparison comparisonType);
    public bool EndsWith(string text, StringComparison comparisonType);
    public string Substring(int offset);
    public string Substring(int offset, int length);
    public StringSegment Subsegment(int offset);
    public StringSegment Subsegment(int offset, int length);
    public int IndexOf(char c, int start, int count);
    public int IndexOf(char c, int start);
    public int IndexOf(char c);
    public int IndexOfAny(Char[] anyOf, int startIndex, int count);
    public int IndexOfAny(Char[] anyOf, int startIndex);
    public int IndexOfAny(Char[] anyOf);
    public int LastIndexOf(char value);
    public StringSegment Trim();
    public StringSegment TrimStart();
    public StringSegment TrimEnd();
    public StringTokenizer Split(Char[] chars);
    public static bool IsNullOrEmpty(StringSegment value);
    public virtual string ToString();
}
public class Microsoft.Extensions.Primitives.StringSegmentComparer : object {
    [CompilerGeneratedAttribute]
private static StringSegmentComparer <Ordinal>k__BackingField;
    [CompilerGeneratedAttribute]
private static StringSegmentComparer <OrdinalIgnoreCase>k__BackingField;
    [CompilerGeneratedAttribute]
private StringComparison <Comparison>k__BackingField;
    [CompilerGeneratedAttribute]
private StringComparer <Comparer>k__BackingField;
    public static StringSegmentComparer Ordinal { get; }
    public static StringSegmentComparer OrdinalIgnoreCase { get; }
    private StringComparison Comparison { get; }
    private StringComparer Comparer { get; }
    private StringSegmentComparer(StringComparison comparison, StringComparer comparer);
    private static StringSegmentComparer();
    [CompilerGeneratedAttribute]
public static StringSegmentComparer get_Ordinal();
    [CompilerGeneratedAttribute]
public static StringSegmentComparer get_OrdinalIgnoreCase();
    [CompilerGeneratedAttribute]
private StringComparison get_Comparison();
    [CompilerGeneratedAttribute]
private StringComparer get_Comparer();
    public sealed virtual int Compare(StringSegment x, StringSegment y);
    public sealed virtual bool Equals(StringSegment x, StringSegment y);
    public sealed virtual int GetHashCode(StringSegment obj);
}
[IsReadOnlyAttribute]
public class Microsoft.Extensions.Primitives.StringTokenizer : ValueType {
    private StringSegment _value;
    private Char[] _separators;
    public StringTokenizer(string value, Char[] separators);
    public StringTokenizer(StringSegment value, Char[] separators);
    public Enumerator GetEnumerator();
    private sealed virtual override IEnumerator`1<StringSegment> System.Collections.Generic.IEnumerable<Microsoft.Extensions.Primitives.StringSegment>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[IsReadOnlyAttribute]
[DefaultMemberAttribute("Item")]
public class Microsoft.Extensions.Primitives.StringValues : ValueType {
    private static String[] EmptyArray;
    public static StringValues Empty;
    private string _value;
    private String[] _values;
    public int Count { get; }
    private bool System.Collections.Generic.ICollection<System.String>.IsReadOnly { get; }
    private string System.Collections.Generic.IList<System.String>.Item { get; private set; }
    public string Item { get; }
    public StringValues(string value);
    public StringValues(String[] values);
    private static StringValues();
    public static StringValues op_Implicit(string value);
    public static StringValues op_Implicit(String[] values);
    public static string op_Implicit(StringValues values);
    public static String[] op_Implicit(StringValues value);
    public sealed virtual int get_Count();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.String>.get_IsReadOnly();
    private sealed virtual override string System.Collections.Generic.IList<System.String>.get_Item(int index);
    private sealed virtual override void System.Collections.Generic.IList<System.String>.set_Item(int index, string value);
    public sealed virtual string get_Item(int index);
    public virtual string ToString();
    private string GetStringValue();
    public String[] ToArray();
    private String[] GetArrayValue();
    private sealed virtual override int System.Collections.Generic.IList<System.String>.IndexOf(string item);
    private int IndexOf(string item);
    private sealed virtual override bool System.Collections.Generic.ICollection<System.String>.Contains(string item);
    private sealed virtual override void System.Collections.Generic.ICollection<System.String>.CopyTo(String[] array, int arrayIndex);
    private void CopyTo(String[] array, int arrayIndex);
    private sealed virtual override void System.Collections.Generic.ICollection<System.String>.Add(string item);
    private sealed virtual override void System.Collections.Generic.IList<System.String>.Insert(int index, string item);
    private sealed virtual override bool System.Collections.Generic.ICollection<System.String>.Remove(string item);
    private sealed virtual override void System.Collections.Generic.IList<System.String>.RemoveAt(int index);
    private sealed virtual override void System.Collections.Generic.ICollection<System.String>.Clear();
    public Enumerator GetEnumerator();
    private sealed virtual override IEnumerator`1<string> System.Collections.Generic.IEnumerable<System.String>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public static bool IsNullOrEmpty(StringValues value);
    public static StringValues Concat(StringValues values1, StringValues values2);
    public static StringValues Concat(StringValues& values, string value);
    public static StringValues Concat(string value, StringValues& values);
    public static bool Equals(StringValues left, StringValues right);
    public static bool op_Equality(StringValues left, StringValues right);
    public static bool op_Inequality(StringValues left, StringValues right);
    public sealed virtual bool Equals(StringValues other);
    public static bool Equals(string left, StringValues right);
    public static bool Equals(StringValues left, string right);
    public sealed virtual bool Equals(string other);
    public static bool Equals(String[] left, StringValues right);
    public static bool Equals(StringValues left, String[] right);
    public sealed virtual bool Equals(String[] other);
    public static bool op_Equality(StringValues left, string right);
    public static bool op_Inequality(StringValues left, string right);
    public static bool op_Equality(string left, StringValues right);
    public static bool op_Inequality(string left, StringValues right);
    public static bool op_Equality(StringValues left, String[] right);
    public static bool op_Inequality(StringValues left, String[] right);
    public static bool op_Equality(String[] left, StringValues right);
    public static bool op_Inequality(String[] left, StringValues right);
    public static bool op_Equality(StringValues left, object right);
    public static bool op_Inequality(StringValues left, object right);
    public static bool op_Equality(object left, StringValues right);
    public static bool op_Inequality(object left, StringValues right);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal static class Microsoft.Extensions.Primitives.ThrowHelper : object {
    internal static void ThrowArgumentNullException(ExceptionArgument argument);
    internal static void ThrowArgumentOutOfRangeException(ExceptionArgument argument);
    internal static void ThrowArgumentException(ExceptionResource resource);
    internal static void ThrowInvalidOperationException(ExceptionResource resource);
    internal static void ThrowInvalidOperationException(ExceptionResource resource, Object[] args);
    internal static ArgumentNullException GetArgumentNullException(ExceptionArgument argument);
    internal static ArgumentOutOfRangeException GetArgumentOutOfRangeException(ExceptionArgument argument);
    internal static ArgumentException GetArgumentException(ExceptionResource resource);
    private static string GetResourceText(ExceptionResource resource);
    private static string GetArgumentName(ExceptionArgument argument);
    private static string GetResourceName(ExceptionResource resource);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
