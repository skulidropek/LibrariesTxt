internal abstract class Microsoft.Net.Http.Headers.BaseHeaderParser`1 : HttpHeaderParser`1<T> {
    protected BaseHeaderParser`1(bool supportsMultipleValues);
    protected abstract virtual int GetParsedValueLength(StringSegment value, int startIndex, T& parsedValue);
    public sealed virtual bool TryParseValue(StringSegment value, Int32& index, T& parsedValue);
}
public class Microsoft.Net.Http.Headers.CacheControlHeaderValue : object {
    public static string PublicString;
    public static string PrivateString;
    public static string MaxAgeString;
    public static string SharedMaxAgeString;
    public static string NoCacheString;
    public static string NoStoreString;
    public static string MaxStaleString;
    public static string MinFreshString;
    public static string NoTransformString;
    public static string OnlyIfCachedString;
    public static string MustRevalidateString;
    public static string ProxyRevalidateString;
    private static HttpHeaderParser`1<CacheControlHeaderValue> Parser;
    private static Action`1<StringSegment> CheckIsValidTokenAction;
    private bool _noCache;
    private ICollection`1<StringSegment> _noCacheHeaders;
    private bool _noStore;
    private Nullable`1<TimeSpan> _maxAge;
    private Nullable`1<TimeSpan> _sharedMaxAge;
    private bool _maxStale;
    private Nullable`1<TimeSpan> _maxStaleLimit;
    private Nullable`1<TimeSpan> _minFresh;
    private bool _noTransform;
    private bool _onlyIfCached;
    private bool _public;
    private bool _private;
    private ICollection`1<StringSegment> _privateHeaders;
    private bool _mustRevalidate;
    private bool _proxyRevalidate;
    private IList`1<NameValueHeaderValue> _extensions;
    public bool NoCache { get; public set; }
    public ICollection`1<StringSegment> NoCacheHeaders { get; }
    public bool NoStore { get; public set; }
    public Nullable`1<TimeSpan> MaxAge { get; public set; }
    public Nullable`1<TimeSpan> SharedMaxAge { get; public set; }
    public bool MaxStale { get; public set; }
    public Nullable`1<TimeSpan> MaxStaleLimit { get; public set; }
    public Nullable`1<TimeSpan> MinFresh { get; public set; }
    public bool NoTransform { get; public set; }
    public bool OnlyIfCached { get; public set; }
    public bool Public { get; public set; }
    public bool Private { get; public set; }
    public ICollection`1<StringSegment> PrivateHeaders { get; }
    public bool MustRevalidate { get; public set; }
    public bool ProxyRevalidate { get; public set; }
    public IList`1<NameValueHeaderValue> Extensions { get; }
    private static CacheControlHeaderValue();
    public bool get_NoCache();
    public void set_NoCache(bool value);
    public ICollection`1<StringSegment> get_NoCacheHeaders();
    public bool get_NoStore();
    public void set_NoStore(bool value);
    public Nullable`1<TimeSpan> get_MaxAge();
    public void set_MaxAge(Nullable`1<TimeSpan> value);
    public Nullable`1<TimeSpan> get_SharedMaxAge();
    public void set_SharedMaxAge(Nullable`1<TimeSpan> value);
    public bool get_MaxStale();
    public void set_MaxStale(bool value);
    public Nullable`1<TimeSpan> get_MaxStaleLimit();
    public void set_MaxStaleLimit(Nullable`1<TimeSpan> value);
    public Nullable`1<TimeSpan> get_MinFresh();
    public void set_MinFresh(Nullable`1<TimeSpan> value);
    public bool get_NoTransform();
    public void set_NoTransform(bool value);
    public bool get_OnlyIfCached();
    public void set_OnlyIfCached(bool value);
    public bool get_Public();
    public void set_Public(bool value);
    public bool get_Private();
    public void set_Private(bool value);
    public ICollection`1<StringSegment> get_PrivateHeaders();
    public bool get_MustRevalidate();
    public void set_MustRevalidate(bool value);
    public bool get_ProxyRevalidate();
    public void set_ProxyRevalidate(bool value);
    public IList`1<NameValueHeaderValue> get_Extensions();
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static CacheControlHeaderValue Parse(StringSegment input);
    public static bool TryParse(StringSegment input, CacheControlHeaderValue& parsedValue);
    private static int GetCacheControlLength(StringSegment input, int startIndex, CacheControlHeaderValue& parsedValue);
    private static bool TrySetCacheControlValues(CacheControlHeaderValue cc, List`1<NameValueHeaderValue> nameValueList);
    private static bool TrySetTokenOnlyValue(NameValueHeaderValue nameValue, Boolean& boolField);
    private static bool TrySetOptionalTokenList(NameValueHeaderValue nameValue, Boolean& boolField, ICollection`1& destination);
    private static bool TrySetTimeSpan(NameValueHeaderValue nameValue, Nullable`1& timeSpan);
    private static void AppendValueIfRequired(StringBuilder sb, bool appendValue, string value);
    private static void AppendValueWithSeparatorIfRequired(StringBuilder sb, string value);
    private static void AppendValues(StringBuilder sb, IEnumerable`1<StringSegment> values);
    private static void CheckIsValidToken(StringSegment item);
}
public class Microsoft.Net.Http.Headers.ContentDispositionHeaderValue : object {
    private static string FileNameString;
    private static string NameString;
    private static string FileNameStarString;
    private static string CreationDateString;
    private static string ModificationDateString;
    private static string ReadDateString;
    private static string SizeString;
    private static Char[] QuestionMark;
    private static Char[] SingleQuote;
    private static HttpHeaderParser`1<ContentDispositionHeaderValue> Parser;
    private ObjectCollection`1<NameValueHeaderValue> _parameters;
    private StringSegment _dispositionType;
    private static Char[] HexUpperChars;
    public StringSegment DispositionType { get; public set; }
    public IList`1<NameValueHeaderValue> Parameters { get; }
    public StringSegment Name { get; public set; }
    public StringSegment FileName { get; public set; }
    public StringSegment FileNameStar { get; public set; }
    public Nullable`1<DateTimeOffset> CreationDate { get; public set; }
    public Nullable`1<DateTimeOffset> ModificationDate { get; public set; }
    public Nullable`1<DateTimeOffset> ReadDate { get; public set; }
    public Nullable`1<long> Size { get; public set; }
    public ContentDispositionHeaderValue(StringSegment dispositionType);
    private static ContentDispositionHeaderValue();
    public StringSegment get_DispositionType();
    public void set_DispositionType(StringSegment value);
    public IList`1<NameValueHeaderValue> get_Parameters();
    public StringSegment get_Name();
    public void set_Name(StringSegment value);
    public StringSegment get_FileName();
    public void set_FileName(StringSegment value);
    public StringSegment get_FileNameStar();
    public void set_FileNameStar(StringSegment value);
    public Nullable`1<DateTimeOffset> get_CreationDate();
    public void set_CreationDate(Nullable`1<DateTimeOffset> value);
    public Nullable`1<DateTimeOffset> get_ModificationDate();
    public void set_ModificationDate(Nullable`1<DateTimeOffset> value);
    public Nullable`1<DateTimeOffset> get_ReadDate();
    public void set_ReadDate(Nullable`1<DateTimeOffset> value);
    public Nullable`1<long> get_Size();
    public void set_Size(Nullable`1<long> value);
    public void SetHttpFileName(StringSegment fileName);
    public void SetMimeFileName(StringSegment fileName);
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static ContentDispositionHeaderValue Parse(StringSegment input);
    public static bool TryParse(StringSegment input, ContentDispositionHeaderValue& parsedValue);
    private static int GetDispositionTypeLength(StringSegment input, int startIndex, ContentDispositionHeaderValue& parsedValue);
    private static int GetDispositionTypeExpressionLength(StringSegment input, int startIndex, StringSegment& dispositionType);
    private static void CheckDispositionTypeFormat(StringSegment dispositionType, string parameterName);
    private Nullable`1<DateTimeOffset> GetDate(string parameter);
    private void SetDate(string parameter, Nullable`1<DateTimeOffset> date);
    private StringSegment GetName(string parameter);
    private void SetName(StringSegment parameter, StringSegment value);
    private StringSegment EncodeAndQuoteMime(StringSegment input);
    private StringSegment Sanitize(StringSegment input);
    private bool IsQuoted(StringSegment value);
    private bool RequiresEncoding(StringSegment input);
    private string EncodeMime(StringSegment input);
    private bool TryDecodeMime(StringSegment input, String& output);
    private string Encode5987(StringSegment input);
    private static void HexEscape(StringBuilder builder, char c);
    private bool TryDecode5987(StringSegment input, String& output);
    private static bool IsHexEncoding(StringSegment pattern, int index);
    private static bool IsEscapedAscii(char digit, char next);
    private static byte HexUnescape(StringSegment pattern, Int32& index);
    internal static byte UnEscapeAscii(char digit, char next);
}
[ExtensionAttribute]
public static class Microsoft.Net.Http.Headers.ContentDispositionHeaderValueIdentityExtensions : object {
    [ExtensionAttribute]
public static bool IsFileDisposition(ContentDispositionHeaderValue header);
    [ExtensionAttribute]
public static bool IsFormDisposition(ContentDispositionHeaderValue header);
}
public class Microsoft.Net.Http.Headers.ContentRangeHeaderValue : object {
    private static HttpHeaderParser`1<ContentRangeHeaderValue> Parser;
    private StringSegment _unit;
    private Nullable`1<long> _from;
    private Nullable`1<long> _to;
    private Nullable`1<long> _length;
    public StringSegment Unit { get; public set; }
    public Nullable`1<long> From { get; }
    public Nullable`1<long> To { get; }
    public Nullable`1<long> Length { get; }
    public bool HasLength { get; }
    public bool HasRange { get; }
    public ContentRangeHeaderValue(long from, long to, long length);
    public ContentRangeHeaderValue(long length);
    public ContentRangeHeaderValue(long from, long to);
    private static ContentRangeHeaderValue();
    public StringSegment get_Unit();
    public void set_Unit(StringSegment value);
    public Nullable`1<long> get_From();
    public Nullable`1<long> get_To();
    public Nullable`1<long> get_Length();
    public bool get_HasLength();
    public bool get_HasRange();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public static ContentRangeHeaderValue Parse(StringSegment input);
    public static bool TryParse(StringSegment input, ContentRangeHeaderValue& parsedValue);
    private static int GetContentRangeLength(StringSegment input, int startIndex, ContentRangeHeaderValue& parsedValue);
    private static bool TryGetLengthLength(StringSegment input, Int32& current, Int32& lengthLength);
    private static bool TryGetRangeLength(StringSegment input, Int32& current, Int32& fromLength, Int32& toStartIndex, Int32& toLength);
    private static bool TryCreateContentRange(StringSegment input, StringSegment unit, int fromStartIndex, int fromLength, int toStartIndex, int toLength, int lengthStartIndex, int lengthLength, ContentRangeHeaderValue& parsedValue);
}
internal class Microsoft.Net.Http.Headers.CookieHeaderParser : HttpHeaderParser`1<CookieHeaderValue> {
    internal CookieHeaderParser(bool supportsMultipleValues);
    public sealed virtual bool TryParseValue(StringSegment value, Int32& index, CookieHeaderValue& parsedValue);
    private static int GetNextNonEmptyOrWhitespaceIndex(StringSegment input, int startIndex, bool skipEmptyValues, Boolean& separatorFound);
}
public class Microsoft.Net.Http.Headers.CookieHeaderValue : object {
    private static CookieHeaderParser SingleValueParser;
    private static CookieHeaderParser MultipleValueParser;
    private StringSegment _name;
    private StringSegment _value;
    public StringSegment Name { get; public set; }
    public StringSegment Value { get; public set; }
    public CookieHeaderValue(StringSegment name);
    public CookieHeaderValue(StringSegment name, StringSegment value);
    private static CookieHeaderValue();
    public StringSegment get_Name();
    public void set_Name(StringSegment value);
    public StringSegment get_Value();
    public void set_Value(StringSegment value);
    public virtual string ToString();
    public static CookieHeaderValue Parse(StringSegment input);
    public static bool TryParse(StringSegment input, CookieHeaderValue& parsedValue);
    public static IList`1<CookieHeaderValue> ParseList(IList`1<string> inputs);
    public static IList`1<CookieHeaderValue> ParseStrictList(IList`1<string> inputs);
    public static bool TryParseList(IList`1<string> inputs, IList`1& parsedValues);
    public static bool TryParseStrictList(IList`1<string> inputs, IList`1& parsedValues);
    internal static bool TryGetCookieLength(StringSegment input, Int32& offset, CookieHeaderValue& parsedValue);
    internal static StringSegment GetCookieValue(StringSegment input, Int32& offset);
    private static bool ReadEqualsSign(StringSegment input, Int32& offset);
    private static bool IsCookieValueChar(char c);
    internal static void CheckNameFormat(StringSegment name, string parameterName);
    internal static void CheckValueFormat(StringSegment value, string parameterName);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[ExtensionAttribute]
internal static class Microsoft.Net.Http.Headers.DateTimeFormatter : object {
    private static DateTimeFormatInfo FormatInfo;
    private static String[] MonthNames;
    private static String[] DayNames;
    private static int Rfc1123DateLength;
    private static int QuotedRfc1123DateLength;
    private static int AsciiNumberOffset;
    private static string Gmt;
    private static char Comma;
    private static char Space;
    private static char Colon;
    private static char Quote;
    private static DateTimeFormatter();
    [ExtensionAttribute]
public static string ToRfc1123String(DateTimeOffset dateTime);
    [ExtensionAttribute]
public static string ToRfc1123String(DateTimeOffset dateTime, bool quoted);
    private static void AppendYear(InplaceStringBuilder& target, int year);
    private static void AppendTimeOfDay(InplaceStringBuilder& target, TimeSpan timeOfDay);
    private static void AppendNumber(InplaceStringBuilder& target, int number);
    private static char GetAsciiChar(int value);
}
public class Microsoft.Net.Http.Headers.EntityTagHeaderValue : object {
    private static HttpHeaderParser`1<EntityTagHeaderValue> SingleValueParser;
    private static HttpHeaderParser`1<EntityTagHeaderValue> MultipleValueParser;
    private static EntityTagHeaderValue AnyType;
    private StringSegment _tag;
    private bool _isWeak;
    public static EntityTagHeaderValue Any { get; }
    public StringSegment Tag { get; }
    public bool IsWeak { get; }
    public EntityTagHeaderValue(StringSegment tag);
    public EntityTagHeaderValue(StringSegment tag, bool isWeak);
    private static EntityTagHeaderValue();
    public static EntityTagHeaderValue get_Any();
    public StringSegment get_Tag();
    public bool get_IsWeak();
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public bool Compare(EntityTagHeaderValue other, bool useStrongComparison);
    public static EntityTagHeaderValue Parse(StringSegment input);
    public static bool TryParse(StringSegment input, EntityTagHeaderValue& parsedValue);
    public static IList`1<EntityTagHeaderValue> ParseList(IList`1<string> inputs);
    public static IList`1<EntityTagHeaderValue> ParseStrictList(IList`1<string> inputs);
    public static bool TryParseList(IList`1<string> inputs, IList`1& parsedValues);
    public static bool TryParseStrictList(IList`1<string> inputs, IList`1& parsedValues);
    internal static int GetEntityTagLength(StringSegment input, int startIndex, EntityTagHeaderValue& parsedValue);
}
internal class Microsoft.Net.Http.Headers.GenericHeaderParser`1 : BaseHeaderParser`1<T> {
    private GetParsedValueLengthDelegate<T> _getParsedValueLength;
    internal GenericHeaderParser`1(bool supportsMultipleValues, GetParsedValueLengthDelegate<T> getParsedValueLength);
    protected virtual int GetParsedValueLength(StringSegment value, int startIndex, T& parsedValue);
}
public static class Microsoft.Net.Http.Headers.HeaderNames : object {
    public static string Accept;
    public static string AcceptCharset;
    public static string AcceptEncoding;
    public static string AcceptLanguage;
    public static string AcceptRanges;
    public static string AccessControlAllowCredentials;
    public static string AccessControlAllowHeaders;
    public static string AccessControlAllowMethods;
    public static string AccessControlAllowOrigin;
    public static string AccessControlExposeHeaders;
    public static string AccessControlMaxAge;
    public static string AccessControlRequestHeaders;
    public static string AccessControlRequestMethod;
    public static string Age;
    public static string Allow;
    public static string Authority;
    public static string Authorization;
    public static string CacheControl;
    public static string Connection;
    public static string ContentDisposition;
    public static string ContentEncoding;
    public static string ContentLanguage;
    public static string ContentLength;
    public static string ContentLocation;
    public static string ContentMD5;
    public static string ContentRange;
    public static string ContentSecurityPolicy;
    public static string ContentSecurityPolicyReportOnly;
    public static string ContentType;
    public static string Cookie;
    public static string Date;
    public static string ETag;
    public static string Expires;
    public static string Expect;
    public static string From;
    public static string Host;
    public static string IfMatch;
    public static string IfModifiedSince;
    public static string IfNoneMatch;
    public static string IfRange;
    public static string IfUnmodifiedSince;
    public static string LastModified;
    public static string Location;
    public static string MaxForwards;
    public static string Method;
    public static string Origin;
    public static string Path;
    public static string Pragma;
    public static string ProxyAuthenticate;
    public static string ProxyAuthorization;
    public static string Range;
    public static string Referer;
    public static string RetryAfter;
    public static string Scheme;
    public static string Server;
    public static string SetCookie;
    public static string Status;
    public static string StrictTransportSecurity;
    public static string TE;
    public static string Trailer;
    public static string TransferEncoding;
    public static string Upgrade;
    public static string UserAgent;
    public static string Vary;
    public static string Via;
    public static string Warning;
    public static string WebSocketSubProtocols;
    public static string WWWAuthenticate;
}
public static class Microsoft.Net.Http.Headers.HeaderQuality : object {
    public static double Match;
    public static double NoMatch;
}
public static class Microsoft.Net.Http.Headers.HeaderUtilities : object {
    private static int _int64MaxStringLength;
    private static int _qualityValueMaxCharCount;
    private static string QualityName;
    internal static string BytesUnit;
    private static HeaderUtilities();
    internal static void SetQuality(IList`1<NameValueHeaderValue> parameters, Nullable`1<double> value);
    internal static Nullable`1<double> GetQuality(IList`1<NameValueHeaderValue> parameters);
    internal static void CheckValidToken(StringSegment value, string parameterName);
    internal static bool AreEqualCollections(ICollection`1<T> x, ICollection`1<T> y);
    internal static bool AreEqualCollections(ICollection`1<T> x, ICollection`1<T> y, IEqualityComparer`1<T> comparer);
    internal static int GetNextNonEmptyOrWhitespaceIndex(StringSegment input, int startIndex, bool skipEmptyValues, Boolean& separatorFound);
    private static int AdvanceCacheDirectiveIndex(int current, string headerValue);
    public static bool TryParseSeconds(StringValues headerValues, string targetValue, Nullable`1& value);
    public static bool ContainsCacheDirective(StringValues cacheControlDirectives, string targetDirectives);
    private static bool TryParseNonNegativeInt64FromHeaderValue(int startIndex, string headerValue, Int64& result);
    public static bool TryParseNonNegativeInt32(StringSegment value, Int32& result);
    public static bool TryParseNonNegativeInt64(StringSegment value, Int64& result);
    internal static bool TryParseQualityDouble(StringSegment input, int startIndex, Double& quality, Int32& length);
    public static string FormatNonNegativeInt64(long value);
    public static bool TryParseDate(StringSegment input, DateTimeOffset& result);
    public static string FormatDate(DateTimeOffset dateTime);
    public static string FormatDate(DateTimeOffset dateTime, bool quoted);
    public static StringSegment RemoveQuotes(StringSegment input);
    public static bool IsQuoted(StringSegment input);
    public static StringSegment UnescapeAsQuotedString(StringSegment input);
    private static int CountBackslashesForDecodingQuotedString(StringSegment input);
    public static StringSegment EscapeAsQuotedString(StringSegment input);
    private static int CountAndCheckCharactersNeedingBackslashesWhenEncoding(StringSegment input);
    internal static void ThrowIfReadOnly(bool isReadOnly);
}
internal abstract class Microsoft.Net.Http.Headers.HttpHeaderParser`1 : object {
    private bool _supportsMultipleValues;
    public bool SupportsMultipleValues { get; }
    protected HttpHeaderParser`1(bool supportsMultipleValues);
    public bool get_SupportsMultipleValues();
    public abstract virtual bool TryParseValue(StringSegment value, Int32& index, T& parsedValue);
    public T ParseValue(StringSegment value, Int32& index);
    public virtual bool TryParseValues(IList`1<string> values, IList`1& parsedValues);
    public virtual bool TryParseStrictValues(IList`1<string> values, IList`1& parsedValues);
    protected virtual bool TryParseValues(IList`1<string> values, bool strict, IList`1& parsedValues);
    public virtual IList`1<T> ParseValues(IList`1<string> values);
    public virtual IList`1<T> ParseStrictValues(IList`1<string> values);
    protected virtual IList`1<T> ParseValues(IList`1<string> values, bool strict);
    public virtual string ToString(object value);
}
internal enum Microsoft.Net.Http.Headers.HttpParseResult : Enum {
    public int value__;
    public static HttpParseResult Parsed;
    public static HttpParseResult NotParsed;
    public static HttpParseResult InvalidFormat;
}
internal static class Microsoft.Net.Http.Headers.HttpRuleParser : object {
    private static Boolean[] TokenChars;
    private static int MaxNestedCount;
    private static String[] DateFormats;
    internal static char CR;
    internal static char LF;
    internal static char SP;
    internal static char Tab;
    internal static int MaxInt64Digits;
    internal static int MaxInt32Digits;
    internal static Encoding DefaultHttpEncoding;
    private static HttpRuleParser();
    private static Boolean[] CreateTokenChars();
    internal static bool IsTokenChar(char character);
    internal static int GetTokenLength(StringSegment input, int startIndex);
    internal static int GetWhitespaceLength(StringSegment input, int startIndex);
    internal static int GetNumberLength(StringSegment input, int startIndex, bool allowDecimal);
    internal static HttpParseResult GetQuotedStringLength(StringSegment input, int startIndex, Int32& length);
    internal static HttpParseResult GetQuotedPairLength(StringSegment input, int startIndex, Int32& length);
    internal static bool TryStringToDate(StringSegment input, DateTimeOffset& result);
    private static HttpParseResult GetExpressionLength(StringSegment input, int startIndex, char openChar, char closeChar, bool supportsNesting, Int32& nestedCount, Int32& length);
}
public class Microsoft.Net.Http.Headers.MediaTypeHeaderValue : object {
    private static string BoundaryString;
    private static string CharsetString;
    private static string MatchesAllString;
    private static string QualityString;
    private static string WildcardString;
    private static char ForwardSlashCharacter;
    private static char PeriodCharacter;
    private static char PlusCharacter;
    private static Char[] PeriodCharacterArray;
    private static HttpHeaderParser`1<MediaTypeHeaderValue> SingleValueParser;
    private static HttpHeaderParser`1<MediaTypeHeaderValue> MultipleValueParser;
    private ObjectCollection`1<NameValueHeaderValue> _parameters;
    private StringSegment _mediaType;
    private bool _isReadOnly;
    public StringSegment Charset { get; public set; }
    public Encoding Encoding { get; public set; }
    public StringSegment Boundary { get; public set; }
    public IList`1<NameValueHeaderValue> Parameters { get; }
    public Nullable`1<double> Quality { get; public set; }
    public StringSegment MediaType { get; public set; }
    public StringSegment Type { get; }
    public StringSegment SubType { get; }
    public StringSegment SubTypeWithoutSuffix { get; }
    public StringSegment Suffix { get; }
    public IEnumerable`1<StringSegment> Facets { get; }
    public bool MatchesAllTypes { get; }
    public bool MatchesAllSubTypes { get; }
    public bool MatchesAllSubTypesWithoutSuffix { get; }
    public bool IsReadOnly { get; }
    public MediaTypeHeaderValue(StringSegment mediaType);
    public MediaTypeHeaderValue(StringSegment mediaType, double quality);
    private static MediaTypeHeaderValue();
    public StringSegment get_Charset();
    public void set_Charset(StringSegment value);
    public Encoding get_Encoding();
    public void set_Encoding(Encoding value);
    public StringSegment get_Boundary();
    public void set_Boundary(StringSegment value);
    public IList`1<NameValueHeaderValue> get_Parameters();
    public Nullable`1<double> get_Quality();
    public void set_Quality(Nullable`1<double> value);
    public StringSegment get_MediaType();
    public void set_MediaType(StringSegment value);
    public StringSegment get_Type();
    public StringSegment get_SubType();
    public StringSegment get_SubTypeWithoutSuffix();
    public StringSegment get_Suffix();
    public IEnumerable`1<StringSegment> get_Facets();
    public bool get_MatchesAllTypes();
    public bool get_MatchesAllSubTypes();
    public bool get_MatchesAllSubTypesWithoutSuffix();
    public bool get_IsReadOnly();
    public bool IsSubsetOf(MediaTypeHeaderValue otherMediaType);
    public MediaTypeHeaderValue Copy();
    public MediaTypeHeaderValue CopyAsReadOnly();
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static MediaTypeHeaderValue Parse(StringSegment input);
    public static bool TryParse(StringSegment input, MediaTypeHeaderValue& parsedValue);
    public static IList`1<MediaTypeHeaderValue> ParseList(IList`1<string> inputs);
    public static IList`1<MediaTypeHeaderValue> ParseStrictList(IList`1<string> inputs);
    public static bool TryParseList(IList`1<string> inputs, IList`1& parsedValues);
    public static bool TryParseStrictList(IList`1<string> inputs, IList`1& parsedValues);
    private static int GetMediaTypeLength(StringSegment input, int startIndex, MediaTypeHeaderValue& parsedValue);
    private static int GetMediaTypeExpressionLength(StringSegment input, int startIndex, StringSegment& mediaType);
    private static void CheckMediaTypeFormat(StringSegment mediaType, string parameterName);
    private bool MatchesType(MediaTypeHeaderValue set);
    private bool MatchesSubtype(MediaTypeHeaderValue set);
    private bool MatchesSubtypeWithoutSuffix(MediaTypeHeaderValue set);
    private bool MatchesEitherSubtypeOrSuffix(MediaTypeHeaderValue set);
    private bool MatchesParameters(MediaTypeHeaderValue set);
    private bool MatchesSubtypeSuffix(MediaTypeHeaderValue set);
}
public class Microsoft.Net.Http.Headers.MediaTypeHeaderValueComparer : object {
    private static MediaTypeHeaderValueComparer _mediaTypeComparer;
    public static MediaTypeHeaderValueComparer QualityComparer { get; }
    private static MediaTypeHeaderValueComparer();
    public static MediaTypeHeaderValueComparer get_QualityComparer();
    public sealed virtual int Compare(MediaTypeHeaderValue mediaType1, MediaTypeHeaderValue mediaType2);
    private static int CompareBasedOnQualityFactor(MediaTypeHeaderValue mediaType1, MediaTypeHeaderValue mediaType2);
}
public class Microsoft.Net.Http.Headers.NameValueHeaderValue : object {
    private static HttpHeaderParser`1<NameValueHeaderValue> SingleValueParser;
    internal static HttpHeaderParser`1<NameValueHeaderValue> MultipleValueParser;
    private StringSegment _name;
    private StringSegment _value;
    private bool _isReadOnly;
    public StringSegment Name { get; }
    public StringSegment Value { get; public set; }
    public bool IsReadOnly { get; }
    public NameValueHeaderValue(StringSegment name);
    public NameValueHeaderValue(StringSegment name, StringSegment value);
    private static NameValueHeaderValue();
    public StringSegment get_Name();
    public StringSegment get_Value();
    public void set_Value(StringSegment value);
    public bool get_IsReadOnly();
    public NameValueHeaderValue Copy();
    public NameValueHeaderValue CopyAsReadOnly();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public StringSegment GetUnescapedValue();
    public void SetAndEscapeValue(StringSegment value);
    public static NameValueHeaderValue Parse(StringSegment input);
    public static bool TryParse(StringSegment input, NameValueHeaderValue& parsedValue);
    public static IList`1<NameValueHeaderValue> ParseList(IList`1<string> input);
    public static IList`1<NameValueHeaderValue> ParseStrictList(IList`1<string> input);
    public static bool TryParseList(IList`1<string> input, IList`1& parsedValues);
    public static bool TryParseStrictList(IList`1<string> input, IList`1& parsedValues);
    public virtual string ToString();
    internal static void ToString(IList`1<NameValueHeaderValue> values, char separator, bool leadingSeparator, StringBuilder destination);
    internal static string ToString(IList`1<NameValueHeaderValue> values, char separator, bool leadingSeparator);
    internal static int GetHashCode(IList`1<NameValueHeaderValue> values);
    private static int GetNameValueLength(StringSegment input, int startIndex, NameValueHeaderValue& parsedValue);
    internal static int GetNameValueListLength(StringSegment input, int startIndex, char delimiter, IList`1<NameValueHeaderValue> nameValueCollection);
    public static NameValueHeaderValue Find(IList`1<NameValueHeaderValue> values, StringSegment name);
    internal static int GetValueLength(StringSegment input, int startIndex);
    private static void CheckNameValueFormat(StringSegment name, StringSegment value);
    private static void CheckValueFormat(StringSegment value);
    private static NameValueHeaderValue CreateNameValue();
}
internal class Microsoft.Net.Http.Headers.ObjectCollection`1 : Collection`1<T> {
    internal static Action`1<T> DefaultValidator;
    internal static ObjectCollection`1<T> EmptyReadOnlyCollection;
    private Action`1<T> _validator;
    public bool IsReadOnly { get; }
    public ObjectCollection`1(Action`1<T> validator, bool isReadOnly);
    public ObjectCollection`1(IEnumerable`1<T> other, bool isReadOnly);
    private static ObjectCollection`1();
    private static IList`1<T> CreateInnerList(bool isReadOnly, IEnumerable`1<T> other);
    public bool get_IsReadOnly();
    protected virtual void ClearItems();
    protected virtual void InsertItem(int index, T item);
    protected virtual void RemoveItem(int index);
    protected virtual void SetItem(int index, T item);
    private static void CheckNotNull(T item);
}
public class Microsoft.Net.Http.Headers.RangeConditionHeaderValue : object {
    private static HttpHeaderParser`1<RangeConditionHeaderValue> Parser;
    private Nullable`1<DateTimeOffset> _lastModified;
    private EntityTagHeaderValue _entityTag;
    public Nullable`1<DateTimeOffset> LastModified { get; }
    public EntityTagHeaderValue EntityTag { get; }
    public RangeConditionHeaderValue(DateTimeOffset lastModified);
    public RangeConditionHeaderValue(EntityTagHeaderValue entityTag);
    public RangeConditionHeaderValue(string entityTag);
    private static RangeConditionHeaderValue();
    public Nullable`1<DateTimeOffset> get_LastModified();
    public EntityTagHeaderValue get_EntityTag();
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static RangeConditionHeaderValue Parse(StringSegment input);
    public static bool TryParse(StringSegment input, RangeConditionHeaderValue& parsedValue);
    private static int GetRangeConditionLength(StringSegment input, int startIndex, RangeConditionHeaderValue& parsedValue);
}
public class Microsoft.Net.Http.Headers.RangeHeaderValue : object {
    private static HttpHeaderParser`1<RangeHeaderValue> Parser;
    private StringSegment _unit;
    private ICollection`1<RangeItemHeaderValue> _ranges;
    public StringSegment Unit { get; public set; }
    public ICollection`1<RangeItemHeaderValue> Ranges { get; }
    public RangeHeaderValue(Nullable`1<long> from, Nullable`1<long> to);
    private static RangeHeaderValue();
    public StringSegment get_Unit();
    public void set_Unit(StringSegment value);
    public ICollection`1<RangeItemHeaderValue> get_Ranges();
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static RangeHeaderValue Parse(StringSegment input);
    public static bool TryParse(StringSegment input, RangeHeaderValue& parsedValue);
    private static int GetRangeLength(StringSegment input, int startIndex, RangeHeaderValue& parsedValue);
}
public class Microsoft.Net.Http.Headers.RangeItemHeaderValue : object {
    private Nullable`1<long> _from;
    private Nullable`1<long> _to;
    public Nullable`1<long> From { get; }
    public Nullable`1<long> To { get; }
    public RangeItemHeaderValue(Nullable`1<long> from, Nullable`1<long> to);
    public Nullable`1<long> get_From();
    public Nullable`1<long> get_To();
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    internal static int GetRangeItemListLength(StringSegment input, int startIndex, ICollection`1<RangeItemHeaderValue> rangeCollection);
    internal static int GetRangeItemLength(StringSegment input, int startIndex, RangeItemHeaderValue& parsedValue);
}
public enum Microsoft.Net.Http.Headers.SameSiteMode : Enum {
    public int value__;
    public static SameSiteMode None;
    public static SameSiteMode Lax;
    public static SameSiteMode Strict;
}
public class Microsoft.Net.Http.Headers.SetCookieHeaderValue : object {
    private static string ExpiresToken;
    private static string MaxAgeToken;
    private static string DomainToken;
    private static string PathToken;
    private static string SecureToken;
    private static string SameSiteToken;
    private static string SameSiteLaxToken;
    private static string SameSiteStrictToken;
    private static string HttpOnlyToken;
    private static string SeparatorToken;
    private static string EqualsToken;
    private static string DefaultPath;
    private static HttpHeaderParser`1<SetCookieHeaderValue> SingleValueParser;
    private static HttpHeaderParser`1<SetCookieHeaderValue> MultipleValueParser;
    private StringSegment _name;
    private StringSegment _value;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <Expires>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <MaxAge>k__BackingField;
    [CompilerGeneratedAttribute]
private StringSegment <Domain>k__BackingField;
    [CompilerGeneratedAttribute]
private StringSegment <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Secure>k__BackingField;
    [CompilerGeneratedAttribute]
private SameSiteMode <SameSite>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HttpOnly>k__BackingField;
    public StringSegment Name { get; public set; }
    public StringSegment Value { get; public set; }
    public Nullable`1<DateTimeOffset> Expires { get; public set; }
    public Nullable`1<TimeSpan> MaxAge { get; public set; }
    public StringSegment Domain { get; public set; }
    public StringSegment Path { get; public set; }
    public bool Secure { get; public set; }
    public SameSiteMode SameSite { get; public set; }
    public bool HttpOnly { get; public set; }
    public SetCookieHeaderValue(StringSegment name);
    public SetCookieHeaderValue(StringSegment name, StringSegment value);
    private static SetCookieHeaderValue();
    public StringSegment get_Name();
    public void set_Name(StringSegment value);
    public StringSegment get_Value();
    public void set_Value(StringSegment value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_Expires();
    [CompilerGeneratedAttribute]
public void set_Expires(Nullable`1<DateTimeOffset> value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_MaxAge();
    [CompilerGeneratedAttribute]
public void set_MaxAge(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public StringSegment get_Domain();
    [CompilerGeneratedAttribute]
public void set_Domain(StringSegment value);
    [CompilerGeneratedAttribute]
public StringSegment get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(StringSegment value);
    [CompilerGeneratedAttribute]
public bool get_Secure();
    [CompilerGeneratedAttribute]
public void set_Secure(bool value);
    [CompilerGeneratedAttribute]
public SameSiteMode get_SameSite();
    [CompilerGeneratedAttribute]
public void set_SameSite(SameSiteMode value);
    [CompilerGeneratedAttribute]
public bool get_HttpOnly();
    [CompilerGeneratedAttribute]
public void set_HttpOnly(bool value);
    public virtual string ToString();
    private static void AppendSegment(InplaceStringBuilder& builder, StringSegment name, StringSegment value);
    public void AppendToStringBuilder(StringBuilder builder);
    private static void AppendSegment(StringBuilder builder, StringSegment name, StringSegment value);
    public static SetCookieHeaderValue Parse(StringSegment input);
    public static bool TryParse(StringSegment input, SetCookieHeaderValue& parsedValue);
    public static IList`1<SetCookieHeaderValue> ParseList(IList`1<string> inputs);
    public static IList`1<SetCookieHeaderValue> ParseStrictList(IList`1<string> inputs);
    public static bool TryParseList(IList`1<string> inputs, IList`1& parsedValues);
    public static bool TryParseStrictList(IList`1<string> inputs, IList`1& parsedValues);
    private static int GetSetCookieLength(StringSegment input, int startIndex, SetCookieHeaderValue& parsedValue);
    private static bool ReadEqualsSign(StringSegment input, Int32& offset);
    private static StringSegment ReadToSemicolonOrEnd(StringSegment input, Int32& offset);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class Microsoft.Net.Http.Headers.StringWithQualityHeaderValue : object {
    private static HttpHeaderParser`1<StringWithQualityHeaderValue> SingleValueParser;
    private static HttpHeaderParser`1<StringWithQualityHeaderValue> MultipleValueParser;
    private StringSegment _value;
    private Nullable`1<double> _quality;
    public StringSegment Value { get; }
    public Nullable`1<double> Quality { get; }
    public StringWithQualityHeaderValue(StringSegment value);
    public StringWithQualityHeaderValue(StringSegment value, double quality);
    private static StringWithQualityHeaderValue();
    public StringSegment get_Value();
    public Nullable`1<double> get_Quality();
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static StringWithQualityHeaderValue Parse(StringSegment input);
    public static bool TryParse(StringSegment input, StringWithQualityHeaderValue& parsedValue);
    public static IList`1<StringWithQualityHeaderValue> ParseList(IList`1<string> input);
    public static IList`1<StringWithQualityHeaderValue> ParseStrictList(IList`1<string> input);
    public static bool TryParseList(IList`1<string> input, IList`1& parsedValues);
    public static bool TryParseStrictList(IList`1<string> input, IList`1& parsedValues);
    private static int GetStringWithQualityLength(StringSegment input, int startIndex, StringWithQualityHeaderValue& parsedValue);
    private static bool TryReadQuality(StringSegment input, StringWithQualityHeaderValue result, Int32& index);
}
public class Microsoft.Net.Http.Headers.StringWithQualityHeaderValueComparer : object {
    private static StringWithQualityHeaderValueComparer _qualityComparer;
    public static StringWithQualityHeaderValueComparer QualityComparer { get; }
    private static StringWithQualityHeaderValueComparer();
    public static StringWithQualityHeaderValueComparer get_QualityComparer();
    public sealed virtual int Compare(StringWithQualityHeaderValue stringWithQuality1, StringWithQualityHeaderValue stringWithQuality2);
}
