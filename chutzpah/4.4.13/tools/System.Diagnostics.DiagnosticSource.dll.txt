public class System.Diagnostics.Activity : object {
    [CompilerGeneratedAttribute]
private string <OperationName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <StartTimeUtc>k__BackingField;
    [CompilerGeneratedAttribute]
private Activity <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ParentId>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <Duration>k__BackingField;
    private string _rootId;
    private int _currentChildId;
    private static string s_uniqSuffix;
    private static long s_currentRootId;
    private static int RequestIdMaxLength;
    private KeyValueListNode _tags;
    private KeyValueListNode _baggage;
    private bool isFinished;
    private static AsyncLocal`1<Activity> s_current;
    private static TimeSync timeSync;
    private static Timer syncTimeUpdater;
    public string OperationName { get; }
    public string Id { get; private set; }
    public DateTime StartTimeUtc { get; private set; }
    public Activity Parent { get; private set; }
    public string ParentId { get; private set; }
    public string RootId { get; }
    public IEnumerable`1<KeyValuePair`2<string, string>> Tags { get; }
    public IEnumerable`1<KeyValuePair`2<string, string>> Baggage { get; }
    public TimeSpan Duration { get; private set; }
    public static Activity Current { get; private set; }
    public Activity(string operationName);
    private static Activity();
    [CompilerGeneratedAttribute]
public string get_OperationName();
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(string value);
    [CompilerGeneratedAttribute]
public DateTime get_StartTimeUtc();
    [CompilerGeneratedAttribute]
private void set_StartTimeUtc(DateTime value);
    [CompilerGeneratedAttribute]
public Activity get_Parent();
    [CompilerGeneratedAttribute]
private void set_Parent(Activity value);
    [CompilerGeneratedAttribute]
public string get_ParentId();
    [CompilerGeneratedAttribute]
private void set_ParentId(string value);
    public string get_RootId();
    [IteratorStateMachineAttribute("System.Diagnostics.Activity/<get_Tags>d__22")]
public IEnumerable`1<KeyValuePair`2<string, string>> get_Tags();
    [IteratorStateMachineAttribute("System.Diagnostics.Activity/<get_Baggage>d__24")]
public IEnumerable`1<KeyValuePair`2<string, string>> get_Baggage();
    public string GetBaggageItem(string key);
    public Activity AddTag(string key, string value);
    public Activity AddBaggage(string key, string value);
    public Activity SetParentId(string parentId);
    public Activity SetStartTime(DateTime startTimeUtc);
    public Activity SetEndTime(DateTime endTimeUtc);
    [CompilerGeneratedAttribute]
public TimeSpan get_Duration();
    [CompilerGeneratedAttribute]
private void set_Duration(TimeSpan value);
    public Activity Start();
    public void Stop();
    private static void NotifyError(Exception exception);
    private string GenerateId();
    private string GetRootId(string id);
    private string AppendSuffix(string parentId, string suffix, char delimiter);
    private string GenerateRootId();
    [SecuritySafeCriticalAttribute]
private static long GetRandomNumber();
    public static Activity get_Current();
    private static void set_Current(Activity value);
    internal static DateTime GetUtcNow();
    private static void Sync();
    [SecuritySafeCriticalAttribute]
private static Timer InitalizeSyncTimer();
}
public class System.Diagnostics.DiagnosticListener : DiagnosticSource {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    private DiagnosticSubscription modreq(System.Runtime.CompilerServices.IsVolatile) _subscriptions;
    private DiagnosticListener _next;
    private bool _disposed;
    private static DiagnosticListener s_allListeners;
    private static AllListenerObservable s_allListenerObservable;
    private static object s_lock;
    public static IObservable`1<DiagnosticListener> AllListeners { get; }
    public string Name { get; private set; }
    public DiagnosticListener(string name);
    private static DiagnosticListener();
    public static IObservable`1<DiagnosticListener> get_AllListeners();
    public virtual IDisposable Subscribe(IObserver`1<KeyValuePair`2<string, object>> observer, Predicate`1<string> isEnabled);
    public virtual IDisposable Subscribe(IObserver`1<KeyValuePair`2<string, object>> observer, Func`4<string, object, object, bool> isEnabled);
    public virtual IDisposable Subscribe(IObserver`1<KeyValuePair`2<string, object>> observer);
    public virtual void Dispose();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    public virtual string ToString();
    public bool IsEnabled();
    public virtual bool IsEnabled(string name);
    public virtual bool IsEnabled(string name, object arg1, object arg2);
    public virtual void Write(string name, object value);
    private IDisposable SubscribeInternal(IObserver`1<KeyValuePair`2<string, object>> observer, Predicate`1<string> isEnabled1Arg, Func`4<string, object, object, bool> isEnabled3Arg);
    [CompilerGeneratedAttribute]
private bool <Subscribe>b__3_0(string name);
}
public abstract class System.Diagnostics.DiagnosticSource : object {
    public abstract virtual void Write(string name, object value);
    public abstract virtual bool IsEnabled(string name);
    public virtual bool IsEnabled(string name, object arg1, object arg2);
    public Activity StartActivity(Activity activity, object args);
    public void StopActivity(Activity activity, object args);
}
[EventSourceAttribute]
internal class System.Diagnostics.DiagnosticSourceEventSource : EventSource {
    public static DiagnosticSourceEventSource Logger;
    private string AspNetCoreHostingKeywordValue;
    private string EntityFrameworkCoreCommandsKeywordValue;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _false;
    private FilterAndTransform _specs;
    private static DiagnosticSourceEventSource();
    [EventAttribute("1")]
public void Message(string Message);
    [EventAttribute("2")]
private void Event(string SourceName, string EventName, IEnumerable`1<KeyValuePair`2<string, string>> Arguments);
    [EventAttribute("3")]
private void EventJson(string SourceName, string EventName, string ArgmentsJson);
    [EventAttribute("4")]
private void Activity1Start(string SourceName, string EventName, IEnumerable`1<KeyValuePair`2<string, string>> Arguments);
    [EventAttribute("5")]
private void Activity1Stop(string SourceName, string EventName, IEnumerable`1<KeyValuePair`2<string, string>> Arguments);
    [EventAttribute("6")]
private void Activity2Start(string SourceName, string EventName, IEnumerable`1<KeyValuePair`2<string, string>> Arguments);
    [EventAttribute("7")]
private void Activity2Stop(string SourceName, string EventName, IEnumerable`1<KeyValuePair`2<string, string>> Arguments);
    [EventAttribute("8")]
private void RecursiveActivity1Start(string SourceName, string EventName, IEnumerable`1<KeyValuePair`2<string, string>> Arguments);
    [EventAttribute("9")]
private void RecursiveActivity1Stop(string SourceName, string EventName, IEnumerable`1<KeyValuePair`2<string, string>> Arguments);
    [EventAttribute("10")]
private void NewDiagnosticListener(string SourceName);
    [NonEventAttribute]
protected virtual void OnEventCommand(EventCommandEventArgs command);
    private static string NewLineSeparate(string str1, string str2);
    [NonEventAttribute]
private void BreakPointWithDebuggerFuncEval();
}
internal class System.Diagnostics.HttpHandlerDiagnosticListener : DiagnosticListener {
    internal static HttpHandlerDiagnosticListener s_instance;
    private static string DiagnosticListenerName;
    private static string ActivityName;
    private static string RequestStartName;
    private static string RequestStopName;
    private static string RequestStopExName;
    private static string InitializationFailed;
    private static string RequestIdHeaderName;
    private static string CorrelationContextHeaderName;
    private bool initialized;
    private static FieldInfo s_connectionGroupListField;
    private static Type s_connectionGroupType;
    private static FieldInfo s_connectionListField;
    private static Type s_connectionType;
    private static FieldInfo s_writeListField;
    private static Func`2<HttpWebRequest, HttpWebResponse> s_httpResponseAccessor;
    private static Func`2<HttpWebRequest, int> s_autoRedirectsAccessor;
    private static Func`2<HttpWebRequest, object> s_coreResponseAccessor;
    private static Func`2<object, HttpStatusCode> s_coreStatusCodeAccessor;
    private static Func`2<object, WebHeaderCollection> s_coreHeadersAccessor;
    private static Type s_coreResponseDataType;
    private static HttpHandlerDiagnosticListener();
    public virtual IDisposable Subscribe(IObserver`1<KeyValuePair`2<string, object>> observer, Predicate`1<string> isEnabled);
    public virtual IDisposable Subscribe(IObserver`1<KeyValuePair`2<string, object>> observer, Func`4<string, object, object, bool> isEnabled);
    public virtual IDisposable Subscribe(IObserver`1<KeyValuePair`2<string, object>> observer);
    private void Initialize();
    private void RaiseRequestEvent(HttpWebRequest request);
    private void RaiseResponseEvent(HttpWebRequest request, HttpWebResponse response);
    private void RaiseResponseEvent(HttpWebRequest request, HttpStatusCode statusCode, WebHeaderCollection headers);
    private bool IsLastResponse(HttpWebRequest request, HttpStatusCode statusCode);
    private static void PrepareReflectionObjects();
    private static void PerformInjection();
    private static Func`2<TClass, TField> CreateFieldGetter(string fieldName, BindingFlags flags);
    private static Func`2<object, TField> CreateFieldGetter(Type classType, string fieldName, BindingFlags flags);
}
