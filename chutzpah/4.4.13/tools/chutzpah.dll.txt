public class Chutzpah.BatchProcessor.BatchCompilerService : object {
    private IProcessHelper processHelper;
    private IFileSystemWrapper fileSystem;
    private ISourceMapDiscoverer sourceMapDiscoverer;
    public BatchCompilerService(IProcessHelper processHelper, IFileSystemWrapper fileSystem, ISourceMapDiscoverer sourceMapDiscoverer);
    public sealed virtual void Compile(IEnumerable`1<TestContext> testContexts, ITestMethodRunnerCallback callback);
    private void RunBatchCompile(ChutzpahTestSettingsFile testSettings);
    private static bool CheckIfCompileIsNeeded(ChutzpahTestSettingsFile testSettings, List`1<SourceCompileInfo> filePropeties);
    private string GetOutputPath(string filePath, BatchCompileConfiguration compileConfiguration);
    private FileProperties GetFileProperties(string path);
    [CompilerGeneratedAttribute]
private <>f__AnonymousType0`2<ReferencedFile, FileProperties> <Compile>b__4_4(ReferencedFile file);
    [CompilerGeneratedAttribute]
private <>f__AnonymousType3`2<<>f__AnonymousType2`2<<>f__AnonymousType1`2<<>f__AnonymousType0`2<ReferencedFile, FileProperties>, bool>, string>, FileProperties> <Compile>b__4_7(<>f__AnonymousType2`2<<>f__AnonymousType1`2<<>f__AnonymousType0`2<ReferencedFile, FileProperties>, bool>, string> <>h__TransparentIdentifier2);
}
public interface Chutzpah.BatchProcessor.IBatchCompilerService {
    public abstract virtual void Compile(IEnumerable`1<TestContext> testContexts, ITestMethodRunnerCallback callback);
}
public class Chutzpah.Callbacks.ParallelRunnerCallbackAdapter : object {
    private static object sync;
    private ITestMethodRunnerCallback nestedCallback;
    public ParallelRunnerCallbackAdapter(ITestMethodRunnerCallback nestedCallback);
    private static ParallelRunnerCallbackAdapter();
    public sealed virtual void TestContextStarted(TestContext context);
    public sealed virtual void TestContextFinished(TestContext context);
    public sealed virtual void TestSuiteStarted(TestContext context);
    public sealed virtual void TestSuiteFinished(TestContext context, TestCaseSummary testResultsSummary);
    public sealed virtual void FileStarted(TestContext context);
    public sealed virtual void FileFinished(TestContext context, TestFileSummary testResultsSummary);
    public sealed virtual void TestStarted(TestContext context, TestCase testCase);
    public sealed virtual void TestFinished(TestContext context, TestCase testCase);
    public sealed virtual void ExceptionThrown(Exception exception, string fileName);
    public sealed virtual void FileError(TestContext context, TestError error);
    public sealed virtual void FileLog(TestContext context, TestLog log);
}
public class Chutzpah.ChutzpahContainer : object {
    private static IContainer container;
    public static IContainer Current { get; }
    private static ChutzpahContainer();
    private static bool TryLoadLibuv(string folder);
    public static IContainer get_Current();
    private static IContainer CreateContainer();
    public static T Get();
}
public static class Chutzpah.ChutzpahMsBuildProps : object {
    public static string Chutzpah_OutputPath;
    [IteratorStateMachineAttribute("Chutzpah.ChutzpahMsBuildProps/<GetProps>d__1")]
public static IEnumerable`1<string> GetProps();
}
public class Chutzpah.ChutzpahTestSettingsService : object {
    private ConcurrentDictionary`2<string, ChutzpahTestSettingsFile> ChutzpahSettingsFileCache;
    private IFileProbe fileProbe;
    private IJsonSerializer serializer;
    private IFileSystemWrapper fileSystem;
    public ChutzpahTestSettingsService(IFileProbe fileProbe, IJsonSerializer serializer, IFileSystemWrapper fileSystem);
    public sealed virtual ChutzpahTestSettingsFile FindSettingsFile(string filePath, ChutzpahSettingsFileEnvironments environments);
    public sealed virtual ChutzpahTestSettingsFile FindSettingsFileFromDirectory(string directory, ChutzpahSettingsFileEnvironments environments);
    private ChutzpahTestSettingsFile ProcessSettingsFile(string directory, ChutzpahSettingsFileEnvironment environment, bool forceFresh);
    private void ProcessServerSettings(ChutzpahTestSettingsFile settings, IDictionary`2<string, string> chutzpahVariables);
    private void ProcessTraceFilePath(ChutzpahTestSettingsFile settings, IDictionary`2<string, string> chutzpahVariables);
    private void ProcessProxy(ChutzpahTestSettingsFile settings, IDictionary`2<string, string> chutzpahVariables);
    private void ProcessInheritance(ChutzpahSettingsFileEnvironment environment, ChutzpahTestSettingsFile settings, IDictionary`2<string, string> chutzpahVariables);
    public sealed virtual void ClearCache();
    private void ResolveTestHarnessDirectory(ChutzpahTestSettingsFile settings, IDictionary`2<string, string> chutzpahVariables);
    private void ResolveAMDBaseUrl(ChutzpahTestSettingsFile settings, IDictionary`2<string, string> chutzpahVariables);
    private void ProcessEngine(ChutzpahTestSettingsFile settings, IDictionary`2<string, string> chutzpahVariables);
    private void ProcessPathSettings(ChutzpahTestSettingsFile settings, IDictionary`2<string, string> chutzpahVariables);
    private void ResolveBatchCompileConfiguration(ChutzpahTestSettingsFile settings, IDictionary`2<string, string> chutzpahVariables);
    private void ResolveCompilePathMap(ChutzpahTestSettingsFile settings, IDictionary`2<string, string> chutzpahVariables, CompilePathMap pathMap);
    private string ResolvePath(ChutzpahTestSettingsFile settings, string path, Nullable`1& isFile);
    private string ResolveFolderPath(ChutzpahTestSettingsFile settings, string path);
    private string ResolveFilePath(ChutzpahTestSettingsFile settings, string path);
    private string ExpandVariable(IDictionary`2<string, string> chutzpahCompileVariables, string str);
    private string ExpandChutzpahVariables(IDictionary`2<string, string> chutzpahCompileVariables, string str);
    private IDictionary`2<string, string> BuildChutzpahReplacementVariables(string settingsFilePath, ChutzpahSettingsFileEnvironment environment, ChutzpahTestSettingsFile settings);
    private void AddChutzpahVariable(IDictionary`2<string, string> chutzpahCompileVariables, string name, string value);
}
public class Chutzpah.ChutzpahTracer : object {
    [CompilerGeneratedAttribute]
private static bool <Enabled>k__BackingField;
    public static bool Enabled { get; public set; }
    private static ChutzpahTracer();
    [CompilerGeneratedAttribute]
public static bool get_Enabled();
    [CompilerGeneratedAttribute]
public static void set_Enabled(bool value);
    public static void AddConsoleListener();
    public static void AddFileListener(string path);
    public static void RemoveFileListener(string path);
    public static void TraceInformation(string messageFormat, Object[] args);
    public static void TraceWarning(string messageFormat, Object[] args);
    public static void TraceError(string messageFormat, Object[] args);
    public static void TraceError(Exception exception, string messageFormat, Object[] args);
    private static string BuildTraceMessage(string innerMessageFormat, Object[] args);
    private static string BuildTraceMessage(string innerMessageFormat, Exception exception, Object[] args);
}
public static class Chutzpah.Constants : object {
    public static string ChutzpahVersion;
    public static string TestFileFolder;
    public static string LogFileName;
    public static string SettingsFileName;
    public static int DefaultTestFileTimeout;
    public static int DefaultIEBrowserTabOpenTimeout;
    public static int DefaultFileSeachLimit;
    public static int DefaultCompilerCacheFileMaxSize;
    public static double DefaultCodeCoverageSuccessPercentage;
    public static string ChutzpahTemporaryFilePrefix;
    public static string ChutzpahTemporaryFileFormat;
    public static string CoverageHtmlFileName;
    public static string ChutzpahCoverageObjectReference;
    public static string PngExtension;
    public static string CssExtension;
    public static string JavaScriptExtension;
    public static string JavaScriptReactExtension;
    public static string TypeScriptExtension;
    public static string TypeScriptReactExtension;
    public static string TypeScriptDefExtension;
    public static string CoffeeScriptExtension;
    public static string HtmScriptExtension;
    public static string HtmlScriptExtension;
    public static string CSHtmlScriptExtension;
    public static string JsonExtension;
    public static string MochaBddInterface;
    public static string MochaQunitInterface;
    public static string MochaTddInterface;
    public static string MochaExportsInterface;
    public static string DefaultCoverageHtmlTransform;
    public static string DefaultCoverageJsonTransform;
    public static int DefaultWebServerPort;
    public static int WebServerCreationAttemptLimit;
    public static string ServerVirtualBuiltInFilesPath;
    public static string FileUrlShaKey;
}
public class Chutzpah.Coverage.BlanketJsCoverageEngine : object {
    private IFileSystemWrapper fileSystem;
    private IJsonSerializer jsonSerializer;
    private ILineCoverageMapper lineCoverageMapper;
    [CompilerGeneratedAttribute]
private List`1<string> <includePatterns>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <excludePatterns>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <ignorePatterns>k__BackingField;
    private IUrlBuilder urlBuilder;
    private List`1<string> includePatterns { get; private set; }
    private List`1<string> excludePatterns { get; private set; }
    private List`1<string> ignorePatterns { get; private set; }
    public BlanketJsCoverageEngine(IJsonSerializer jsonSerializer, IFileSystemWrapper fileSystem, ILineCoverageMapper lineCoverageMapper, IUrlBuilder urlBuilder);
    [CompilerGeneratedAttribute]
private List`1<string> get_includePatterns();
    [CompilerGeneratedAttribute]
private void set_includePatterns(List`1<string> value);
    [CompilerGeneratedAttribute]
private List`1<string> get_excludePatterns();
    [CompilerGeneratedAttribute]
private void set_excludePatterns(List`1<string> value);
    [CompilerGeneratedAttribute]
private List`1<string> get_ignorePatterns();
    [CompilerGeneratedAttribute]
private void set_ignorePatterns(List`1<string> value);
    [IteratorStateMachineAttribute("Chutzpah.Coverage.BlanketJsCoverageEngine/<GetFileDependencies>d__17")]
public sealed virtual IEnumerable`1<string> GetFileDependencies(IFrameworkDefinition definition, ChutzpahTestSettingsFile testSettingsFile);
    public sealed virtual void PrepareTestHarnessForCoverage(TestHarness harness, IFrameworkDefinition definition, ChutzpahTestSettingsFile testSettingsFile);
    private string ToRegex(string globPath, IDictionary`2<string, string> extensionMap);
    private bool IsScriptFile(ReferencedFile file);
    public sealed virtual CoverageData DeserializeCoverageObject(string json, TestContext testContext);
    public sealed virtual void ClearPatterns();
    public sealed virtual void AddIncludePatterns(IEnumerable`1<string> patterns);
    public sealed virtual void AddExcludePatterns(IEnumerable`1<string> patterns);
    public sealed virtual void AddIgnorePatterns(IEnumerable`1<string> patterns);
    private string PrependWildCard(string pattern);
    private bool IsFileEligibleForInstrumentation(string filePath);
    public sealed virtual bool IsIgnored(string filePath);
    private string GetBlanketScriptName(IFrameworkDefinition def, ChutzpahTestSettingsFile settingsFile);
}
public class Chutzpah.Coverage.CoverageEngineFactory : object {
    private IFileSystemWrapper fileSystem;
    private IJsonSerializer jsonSerializer;
    private ILineCoverageMapper lineCoverageMapper;
    private IUrlBuilder urlBuilder;
    public CoverageEngineFactory(IJsonSerializer jsonSerializer, IFileSystemWrapper fileSystem, ILineCoverageMapper lineCoverageMapper, IUrlBuilder urlBuilder);
    public sealed virtual ICoverageEngine CreateCoverageEngine();
}
public static class Chutzpah.Coverage.CoverageOutputGenerator : object {
    public static string WriteHtmlFile(string path, CoverageData coverage);
    public static string WriteJsonFile(string path, CoverageData coverage);
    public static void GenerateHtml(CoverageData coverage, Stream stream);
    private static void AppendResultLine(double successPercentage, int linesCovered, int totalSmts, string fileName, int fileNumber, String[] markup, StreamWriter writer);
    public static double FormatPercentage(int number, int total);
}
public interface Chutzpah.Coverage.ICoverageEngine {
    public abstract virtual IEnumerable`1<string> GetFileDependencies(IFrameworkDefinition definition, ChutzpahTestSettingsFile testSettings);
    public abstract virtual void PrepareTestHarnessForCoverage(TestHarness harness, IFrameworkDefinition definition, ChutzpahTestSettingsFile testSettings);
    public abstract virtual CoverageData DeserializeCoverageObject(string json, TestContext testContext);
    public abstract virtual void AddIncludePatterns(IEnumerable`1<string> includePatterns);
    public abstract virtual void AddExcludePatterns(IEnumerable`1<string> excludePatterns);
    public abstract virtual void AddIgnorePatterns(IEnumerable`1<string> ignorePatterns);
    public abstract virtual bool IsIgnored(string filePath);
    public abstract virtual void ClearPatterns();
}
public interface Chutzpah.Coverage.ICoverageEngineFactory {
    public abstract virtual ICoverageEngine CreateCoverageEngine();
}
public interface Chutzpah.Coverage.ILineCoverageMapper {
    public abstract virtual Nullable`1[] GetOriginalFileLineExecutionCounts(Nullable`1[] generatedSourceLineExecutionCounts, int sourceLineCount, ReferencedFile referencedFile);
}
public class Chutzpah.Coverage.SourceMapDotNetLineCoverageMapper : object {
    private IFileSystemWrapper fileSystem;
    public SourceMapDotNetLineCoverageMapper(IFileSystemWrapper fileSystem);
    public sealed virtual Nullable`1[] GetOriginalFileLineExecutionCounts(Nullable`1[] generatedSourceLineExecutionCounts, int sourceLineCount, ReferencedFile referencedFile);
    private bool IsCurrentFile(string relativePath, ReferencedFile referencedFile);
    protected virtual ISourceMapConsumer GetConsumer(string mapFileContents);
}
public class Chutzpah.CoverageOptions : object {
    [CompilerGeneratedAttribute]
private bool <Enabled>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<string> <IncludePatterns>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<string> <ExcludePatterns>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<string> <IgnorePatterns>k__BackingField;
    public bool Enabled { get; public set; }
    public ICollection`1<string> IncludePatterns { get; public set; }
    public ICollection`1<string> ExcludePatterns { get; public set; }
    public ICollection`1<string> IgnorePatterns { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Enabled();
    [CompilerGeneratedAttribute]
public void set_Enabled(bool value);
    [CompilerGeneratedAttribute]
public ICollection`1<string> get_IncludePatterns();
    [CompilerGeneratedAttribute]
public void set_IncludePatterns(ICollection`1<string> value);
    [CompilerGeneratedAttribute]
public ICollection`1<string> get_ExcludePatterns();
    [CompilerGeneratedAttribute]
public void set_ExcludePatterns(ICollection`1<string> value);
    [CompilerGeneratedAttribute]
public ICollection`1<string> get_IgnorePatterns();
    [CompilerGeneratedAttribute]
public void set_IgnorePatterns(ICollection`1<string> value);
    public bool ShouldRunCoverage(Nullable`1<CodeCoverageExecutionMode> coverageExecutionModeSetting);
}
public static class Chutzpah.EmbeddedManifestResourceReader : object {
    public static Stream GetEmbeddedResoureStream(string path);
    public static string GetEmbeddedResoureText(string path);
}
public class Chutzpah.Exceptions.ChutzpahCompilationFailedException : ChutzpahException {
    [CompilerGeneratedAttribute]
private string <SourceFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SettingsFile>k__BackingField;
    public string SourceFile { get; public set; }
    public string SettingsFile { get; public set; }
    public ChutzpahCompilationFailedException(string message);
    public ChutzpahCompilationFailedException(string message, string settingsFile);
    public ChutzpahCompilationFailedException(string message, string settingsFile, Exception e);
    [CompilerGeneratedAttribute]
public string get_SourceFile();
    [CompilerGeneratedAttribute]
public void set_SourceFile(string value);
    [CompilerGeneratedAttribute]
public string get_SettingsFile();
    [CompilerGeneratedAttribute]
public void set_SettingsFile(string value);
    public virtual string ToString();
}
public class Chutzpah.Exceptions.ChutzpahException : Exception {
    public ChutzpahException(string message);
    public ChutzpahException(string message, Exception e);
}
public class Chutzpah.Exceptions.ChutzpahTimeoutException : ChutzpahException {
    public ChutzpahTimeoutException(string message);
}
[ExtensionAttribute]
public static class Chutzpah.Extensions.EnumerableExtensions : object {
    [ExtensionAttribute]
public static void ForEach(IEnumerable`1<TSource> source, Action`1<TSource> body);
}
[ExtensionAttribute]
public static class Chutzpah.Extensions.TestingModeExtensions : object {
    [CompilerGeneratedAttribute]
private static Dictionary`2<TestingMode, List`1<string>> <ExtensionMap>k__BackingField;
    public static Dictionary`2<TestingMode, List`1<string>> ExtensionMap { get; private set; }
    private static TestingModeExtensions();
    [CompilerGeneratedAttribute]
public static Dictionary`2<TestingMode, List`1<string>> get_ExtensionMap();
    [CompilerGeneratedAttribute]
private static void set_ExtensionMap(Dictionary`2<TestingMode, List`1<string>> value);
    [ExtensionAttribute]
public static bool FileBelongsToTestingMode(TestingMode testingMode, string file);
}
[ExtensionAttribute]
public static class Chutzpah.Extensions.VSTSExtensions : object {
    [ExtensionAttribute]
public static T GetInstance(Object[] items, TestRunItemType type);
}
public class Chutzpah.ExternalStylesheet : TestHarnessItem {
    public ExternalStylesheet(ReferencedFile referencedFile);
}
public class Chutzpah.FileProbe : object {
    private IEnvironmentWrapper environment;
    private IFileSystemWrapper fileSystem;
    private IHasher hasher;
    private string builtInDependencyDirectory;
    private static Dictionary`2<string, PathType> ExtensionToPathTypeMap;
    public string BuiltInDependencyDirectory { get; }
    public FileProbe(IEnvironmentWrapper environment, IFileSystemWrapper fileSystem, IHasher hasher);
    private static FileProbe();
    public sealed virtual string FindTestSettingsFile(string currentDirectory);
    public sealed virtual string FindFilePath(string path);
    public sealed virtual string FindFolderPath(string path);
    public sealed virtual bool IsTemporaryChutzpahFile(string path);
    public sealed virtual bool IsChutzpahSettingsFile(string path);
    public sealed virtual IEnumerable`1<PathInfo> FindScriptFiles(string path);
    [IteratorStateMachineAttribute("Chutzpah.FileProbe/<FindScriptFiles>d__12")]
public sealed virtual IEnumerable`1<PathInfo> FindScriptFiles(IEnumerable`1<string> testPaths);
    public sealed virtual PathInfo GetPathInfo(string path);
    [IteratorStateMachineAttribute("Chutzpah.FileProbe/<FindScriptFiles>d__14")]
public sealed virtual IEnumerable`1<PathInfo> FindScriptFiles(ChutzpahTestSettingsFile chutzpahTestSettings);
    public static PathType GetFilePathType(string fileName);
    public sealed virtual string get_BuiltInDependencyDirectory();
    private string FindPath(string path, Predicate`1<string> pathExists);
    public sealed virtual string GetReferencedFileContent(ReferencedFile file, ChutzpahTestSettingsFile settings);
    public sealed virtual void SetReferencedFileHash(ReferencedFile file, ChutzpahTestSettingsFile settings);
    private string GetReferenceFileContentAndSetHash(ReferencedFile file, ChutzpahTestSettingsFile settings);
    [CompilerGeneratedAttribute]
private bool <FindScriptFiles>b__12_0(string file);
    [CompilerGeneratedAttribute]
private <>f__AnonymousType4`2<string, PathInfo> <FindScriptFiles>b__12_1(string file);
}
public interface Chutzpah.FileProcessors.IJasmineReferencedFileProcessor {
}
public interface Chutzpah.FileProcessors.IMochaReferencedFileProcessor {
}
public interface Chutzpah.FileProcessors.IQUnitReferencedFileProcessor {
}
public interface Chutzpah.FileProcessors.IReferencedFileProcessor {
    public abstract virtual void Process(IFrameworkDefinition frameworkDefinition, ReferencedFile referencedFile, string testFileText, ChutzpahTestSettingsFile settings);
}
public interface Chutzpah.FileProcessors.ISourceMapDiscoverer {
    public abstract virtual string FindSourceMap(string sourceFilePath);
}
public class Chutzpah.FileProcessors.JasmineLineNumberProcessor : LineNumberProcessor {
    public JasmineLineNumberProcessor(IFileSystemWrapper fileSystem);
    public virtual Regex GetTestPattern(ReferencedFile referencedFile, string testFileText, ChutzpahTestSettingsFile settings);
}
public abstract class Chutzpah.FileProcessors.LineNumberProcessor : object {
    private IFileSystemWrapper fileSystem;
    protected LineNumberProcessor(IFileSystemWrapper fileSystem);
    public abstract virtual Regex GetTestPattern(ReferencedFile referencedFile, string testFileText, ChutzpahTestSettingsFile settings);
    public sealed virtual void Process(IFrameworkDefinition frameworkDefinition, ReferencedFile referencedFile, string testFileText, ChutzpahTestSettingsFile settings);
}
public class Chutzpah.FileProcessors.MochaInterfaceDetectionProcessor : object {
    public sealed virtual void Process(IFrameworkDefinition frameworkDefinition, ReferencedFile referencedFile, string testFileText, ChutzpahTestSettingsFile settings);
}
public class Chutzpah.FileProcessors.MochaLineNumberProcessor : LineNumberProcessor {
    public MochaLineNumberProcessor(IFileSystemWrapper fileSystem);
    public virtual Regex GetTestPattern(ReferencedFile referencedFile, string testFileText, ChutzpahTestSettingsFile settings);
}
public class Chutzpah.FileProcessors.QUnitLineNumberProcessor : LineNumberProcessor {
    public QUnitLineNumberProcessor(IFileSystemWrapper fileSystem);
    public virtual Regex GetTestPattern(ReferencedFile referencedFile, string testFileText, ChutzpahTestSettingsFile settings);
}
public class Chutzpah.FileProcessors.SourceMapDiscoverer : object {
    private IFileSystemWrapper fileSystemWrapper;
    public SourceMapDiscoverer(IFileSystemWrapper fileSystemWrapper);
    public sealed virtual string FindSourceMap(string sourceFilePath);
}
public abstract class Chutzpah.FrameworkDefinitions.BaseFrameworkDefinition : object {
    private static Regex FrameworkReferenceRegex;
    public string FrameworkKey { get; }
    protected Regex FrameworkSignatureJavaScript { get; }
    protected Regex FrameworkSignatureCoffeeScript { get; }
    protected IEnumerable`1<IReferencedFileProcessor> FileProcessors { get; }
    private static BaseFrameworkDefinition();
    public virtual string GetBlanketScriptName(ChutzpahTestSettingsFile chutzpahTestSettings);
    public abstract virtual string get_FrameworkKey();
    protected virtual Regex get_FrameworkSignatureJavaScript();
    protected virtual Regex get_FrameworkSignatureCoffeeScript();
    protected abstract virtual IEnumerable`1<IReferencedFileProcessor> get_FileProcessors();
    public abstract virtual IEnumerable`1<string> GetFileDependencies(ChutzpahTestSettingsFile chutzpahTestSettings);
    public abstract virtual string GetTestHarness(ChutzpahTestSettingsFile chutzpahTestSettings);
    public virtual string GetTestRunner(ChutzpahTestSettingsFile chutzpahTestSettings, TestOptions options);
    protected string BuildTestRunnerPath(ChutzpahTestSettingsFile chutzpahTestSettings, TestOptions options, string runnerName);
    public virtual bool FileUsesFramework(string fileContents, bool bestGuess, PathType pathType);
    public virtual bool ReferenceIsDependency(string referenceFileName, ChutzpahTestSettingsFile testSettingsFile);
    public sealed virtual void Process(ReferencedFile referencedFile, string testFileText, ChutzpahTestSettingsFile settings);
    public virtual Dictionary`2<string, string> GetFrameworkReplacements(ChutzpahTestSettingsFile chutzpahTestSettings, string testFilePath, string testFileText);
}
public interface Chutzpah.FrameworkDefinitions.IFrameworkDefinition {
    public string FrameworkKey { get; }
    public abstract virtual IEnumerable`1<string> GetFileDependencies(ChutzpahTestSettingsFile chutzpahTestSettings);
    public abstract virtual string GetTestHarness(ChutzpahTestSettingsFile chutzpahTestSettings);
    public abstract virtual string GetTestRunner(ChutzpahTestSettingsFile chutzpahTestSettings, TestOptions options);
    public abstract virtual string GetBlanketScriptName(ChutzpahTestSettingsFile chutzpahTestSettings);
    public abstract virtual string get_FrameworkKey();
    public abstract virtual bool FileUsesFramework(string fileContents, bool bestGuess, PathType pathType);
    public abstract virtual bool ReferenceIsDependency(string referenceFileName, ChutzpahTestSettingsFile testSettingsFile);
    public abstract virtual void Process(ReferencedFile referencedFile, string testFileText, ChutzpahTestSettingsFile settings);
    public abstract virtual Dictionary`2<string, string> GetFrameworkReplacements(ChutzpahTestSettingsFile chutzpahTestSettings, string testFilePath, string testFileText);
}
public class Chutzpah.FrameworkDefinitions.JasmineDefinition : BaseFrameworkDefinition {
    private IEnumerable`1<IJasmineReferencedFileProcessor> fileProcessors;
    private IDictionary`2<string, IEnumerable`1<string>> fileDependencies;
    private IDictionary`2<string, string> testHarness;
    private IDictionary`2<string, string> testRunner;
    public string FrameworkKey { get; }
    protected Regex FrameworkSignatureJavaScript { get; }
    protected Regex FrameworkSignatureCoffeeScript { get; }
    protected IEnumerable`1<IReferencedFileProcessor> FileProcessors { get; }
    public JasmineDefinition(IJasmineReferencedFileProcessor[] fileProcessors);
    public virtual IEnumerable`1<string> GetFileDependencies(ChutzpahTestSettingsFile chutzpahTestSettings);
    public virtual string GetTestHarness(ChutzpahTestSettingsFile chutzpahTestSettings);
    public virtual string GetTestRunner(ChutzpahTestSettingsFile chutzpahTestSettings, TestOptions options);
    public virtual string GetBlanketScriptName(ChutzpahTestSettingsFile chutzpahTestSettings);
    public virtual string get_FrameworkKey();
    protected virtual Regex get_FrameworkSignatureJavaScript();
    protected virtual Regex get_FrameworkSignatureCoffeeScript();
    protected virtual IEnumerable`1<IReferencedFileProcessor> get_FileProcessors();
    private string GetVersion(ChutzpahTestSettingsFile testSettingsFile);
}
public class Chutzpah.FrameworkDefinitions.MochaDefinition : BaseFrameworkDefinition {
    private IEnumerable`1<IMochaReferencedFileProcessor> fileProcessors;
    private IEnumerable`1<string> fileDependencies;
    private static String[] knownInterfaces;
    public string FrameworkKey { get; }
    protected IEnumerable`1<IReferencedFileProcessor> FileProcessors { get; }
    public MochaDefinition(IMochaReferencedFileProcessor[] fileProcessors);
    private static MochaDefinition();
    public virtual IEnumerable`1<string> GetFileDependencies(ChutzpahTestSettingsFile chutzpahTestSettings);
    public virtual string GetTestHarness(ChutzpahTestSettingsFile chutzpahTestSettings);
    public virtual string get_FrameworkKey();
    protected virtual IEnumerable`1<IReferencedFileProcessor> get_FileProcessors();
    public static string GetInterfaceType(ChutzpahTestSettingsFile chutzpahTestSettings, string testFilePath, string testFileText);
    public virtual Dictionary`2<string, string> GetFrameworkReplacements(ChutzpahTestSettingsFile chutzpahTestSettings, string testFilePath, string testFileText);
}
public class Chutzpah.FrameworkDefinitions.QUnitDefinition : BaseFrameworkDefinition {
    private IEnumerable`1<IQUnitReferencedFileProcessor> fileProcessors;
    private IDictionary`2<string, IEnumerable`1<string>> fileDependencies;
    private IDictionary`2<string, string> testHarness;
    public string FrameworkKey { get; }
    protected Regex FrameworkSignatureJavaScript { get; }
    protected Regex FrameworkSignatureCoffeeScript { get; }
    protected IEnumerable`1<IReferencedFileProcessor> FileProcessors { get; }
    public QUnitDefinition(IQUnitReferencedFileProcessor[] fileProcessors);
    public virtual IEnumerable`1<string> GetFileDependencies(ChutzpahTestSettingsFile chutzpahTestSettings);
    public virtual string GetTestHarness(ChutzpahTestSettingsFile chutzpahTestSettings);
    public virtual string get_FrameworkKey();
    protected virtual Regex get_FrameworkSignatureJavaScript();
    protected virtual Regex get_FrameworkSignatureCoffeeScript();
    protected virtual IEnumerable`1<IReferencedFileProcessor> get_FileProcessors();
    private string GetVersion(ChutzpahTestSettingsFile testSettingsFile);
}
public class Chutzpah.Html : TestHarnessItem {
    private static string scriptTagWrapper;
    private string contents;
    public Html(ReferencedFile referencedFile, IFileSystemWrapper fileSystem);
    public virtual string ToString();
}
public interface Chutzpah.IChutzpahTestSettingsService {
    public abstract virtual ChutzpahTestSettingsFile FindSettingsFileFromDirectory(string directory, ChutzpahSettingsFileEnvironments environments);
    public abstract virtual ChutzpahTestSettingsFile FindSettingsFile(string filePath, ChutzpahSettingsFileEnvironments environments);
    public abstract virtual void ClearCache();
}
public interface Chutzpah.IFileProbe {
    public string BuiltInDependencyDirectory { get; }
    public abstract virtual string get_BuiltInDependencyDirectory();
    public abstract virtual string FindFilePath(string path);
    public abstract virtual string FindFolderPath(string path);
    public abstract virtual IEnumerable`1<PathInfo> FindScriptFiles(IEnumerable`1<string> testPaths);
    public abstract virtual PathInfo GetPathInfo(string path);
    public abstract virtual IEnumerable`1<PathInfo> FindScriptFiles(string path);
    public abstract virtual bool IsTemporaryChutzpahFile(string path);
    public abstract virtual string FindTestSettingsFile(string currentDirectory);
    public abstract virtual IEnumerable`1<PathInfo> FindScriptFiles(ChutzpahTestSettingsFile chutzpahTestSettings);
    public abstract virtual bool IsChutzpahSettingsFile(string path);
    public abstract virtual string GetReferencedFileContent(ReferencedFile file, ChutzpahTestSettingsFile settings);
    public abstract virtual void SetReferencedFileHash(ReferencedFile file, ChutzpahTestSettingsFile settings);
}
public interface Chutzpah.IProcessHelper {
    public abstract virtual void LaunchLocalFileInBrowser(string file);
    public abstract virtual void LaunchFileInBrowser(TestContext testContext, string file, string browserName, IDictionary`2<string, string> browserArgs);
    public abstract virtual ProcessResult`1<TestCaseStreamReadResult> RunExecutableAndProcessOutput(string exePath, string arguments, Func`2<ProcessStreamStringSource, TestCaseStreamReadResult> streamProcessor, int streamTimeout, IDictionary`2<string, string> environmentVars);
    public abstract virtual bool RunExecutableAndProcessOutput(string exePath, string arguments, IDictionary`2<string, string> environmentVars, String& standardOutput, String& standardError);
    public abstract virtual BatchCompileResult RunBatchCompileProcess(BatchCompileConfiguration compileConfiguration);
    public abstract virtual bool IsRunningElevated();
}
public interface Chutzpah.IReferenceProcessor {
    public abstract virtual void GetReferencedFiles(List`1<ReferencedFile> referencedFiles, IFrameworkDefinition definition, ChutzpahTestSettingsFile chutzpahTestSettings);
    public abstract virtual void SetupAmdFilePaths(List`1<ReferencedFile> referencedFiles, string testHarnessDirectory, ChutzpahTestSettingsFile testSettings);
    public abstract virtual void SetupPathsFormattedForTestHarness(TestContext testContext, List`1<ReferencedFile> referencedFiles);
}
public interface Chutzpah.ITestCaseStreamReader {
    public abstract virtual TestCaseStreamReadResult Read(TestCaseSource`1<string> testCaseSource, TestOptions testOptions, TestContext testContext, ITestMethodRunnerCallback callback);
}
public interface Chutzpah.ITestCaseStreamReaderFactory {
    public abstract virtual ITestCaseStreamReader Create();
}
public interface Chutzpah.ITestContextBuilder {
    public abstract virtual TestContext BuildContext(PathInfo file, TestOptions options);
    public abstract virtual TestContext BuildContext(string file, TestOptions options);
    public abstract virtual bool TryBuildContext(PathInfo file, TestOptions options, TestContext& context);
    public abstract virtual bool TryBuildContext(string file, TestOptions options, TestContext& context);
    public abstract virtual TestContext BuildContext(IEnumerable`1<PathInfo> files, TestOptions options);
    public abstract virtual TestContext BuildContext(IEnumerable`1<string> files, TestOptions options);
    public abstract virtual bool TryBuildContext(IEnumerable`1<PathInfo> files, TestOptions options, TestContext& context);
    public abstract virtual bool TryBuildContext(IEnumerable`1<string> files, TestOptions options, TestContext& context);
    public abstract virtual bool IsTestFile(string file, ChutzpahSettingsFileEnvironments environments);
    public abstract virtual void CleanupContext(TestContext context);
}
public interface Chutzpah.ITestExecutionProvider {
    public abstract virtual bool CanHandleBrowser(Engine browser);
    public abstract virtual IList`1<TestFileSummary> Execute(TestOptions testOptions, TestContext testContext, TestExecutionMode testExecutionMode, ITestMethodRunnerCallback callback);
    public abstract virtual void SetupEnvironment(TestOptions testOptions, TestContext testContext);
}
public interface Chutzpah.ITestHarnessBuilder {
    public abstract virtual void CreateTestHarness(TestContext testContext, TestOptions options);
}
public interface Chutzpah.ITestLauncher {
    public Process DebuggingProcess { get; public set; }
    public abstract virtual Process get_DebuggingProcess();
    public abstract virtual void set_DebuggingProcess(Process value);
    public abstract virtual void LaunchTest(TestContext testContext);
}
public interface Chutzpah.ITestMethodRunnerCallback {
    public abstract virtual void TestContextStarted(TestContext context);
    public abstract virtual void TestContextFinished(TestContext context);
    public abstract virtual void TestSuiteStarted(TestContext testContext);
    public abstract virtual void TestSuiteFinished(TestContext testContext, TestCaseSummary testResultsSummary);
    public abstract virtual void FileStarted(TestContext testContext);
    public abstract virtual void FileFinished(TestContext testContext, TestFileSummary testResultsSummary);
    public abstract virtual void TestStarted(TestContext testContext, TestCase testCase);
    public abstract virtual void TestFinished(TestContext testContext, TestCase testCase);
    public abstract virtual void ExceptionThrown(Exception exception, string fileName);
    public abstract virtual void FileError(TestContext testContext, TestError error);
    public abstract virtual void FileLog(TestContext testContext, TestLog log);
}
public interface Chutzpah.ITestRunner {
    public IChutzpahWebServerHost ActiveWebServerHost { get; public set; }
    public abstract virtual IChutzpahWebServerHost get_ActiveWebServerHost();
    public abstract virtual void set_ActiveWebServerHost(IChutzpahWebServerHost value);
    public abstract virtual TestContext GetTestContext(string testFile);
    public abstract virtual TestContext GetTestContext(string testFile, TestOptions options);
    public abstract virtual TestCaseSummary RunTests(string testPath, ITestMethodRunnerCallback callback);
    public abstract virtual TestCaseSummary RunTests(string testPath, TestOptions options, ITestMethodRunnerCallback callback);
    public abstract virtual TestCaseSummary RunTests(IEnumerable`1<string> testPaths, TestOptions options, ITestMethodRunnerCallback callback, TestContext testContext);
    public abstract virtual TestCaseSummary RunTests(IEnumerable`1<string> testPaths, ITestMethodRunnerCallback callback);
    public abstract virtual IEnumerable`1<TestCase> DiscoverTests(string testPath);
    public abstract virtual IEnumerable`1<TestCase> DiscoverTests(IEnumerable`1<string> testPaths);
    public abstract virtual IEnumerable`1<TestCase> DiscoverTests(IEnumerable`1<string> testPaths, TestOptions options, ITestMethodRunnerCallback callback);
    public abstract virtual bool IsTestFile(string testFile, ChutzpahSettingsFileEnvironments envionrments);
    public abstract virtual IEnumerable`1<TestCase> DiscoverTests(IEnumerable`1<string> testPaths, TestOptions options);
    public abstract virtual void CleanTestContext(TestContext context);
    public abstract virtual void EnableDebugMode();
    public abstract virtual IEnumerable`1<TestCase> DiscoverTests(IEnumerable`1<string> testPaths, TestOptions options, IList`1& errors);
}
public interface Chutzpah.IUrlBuilder {
    public abstract virtual string GenerateLocalFileUrl(string absolutePath);
    public abstract virtual string GenerateFileUrl(TestContext testContext, ReferencedFile referencedFile);
    public abstract virtual string GenerateFileUrl(TestContext testContext, string absolutePath, bool fullyQualified, bool isBuiltInDependency, string fileHash);
    public abstract virtual string GenerateAbsoluteServerUrl(TestContext testContext, ReferencedFile referencedFile);
    public abstract virtual string GenerateServerFileUrl(TestContext testContext, string absolutePath, bool fullyQualified, bool isBuiltInDependency, string fileHash);
}
public abstract class Chutzpah.Models.BaseTestCaseSummary : object {
    private List`1<TestCase> tests;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, IList`1<TestCase>> <TestGroups>k__BackingField;
    [CompilerGeneratedAttribute]
private ReadOnlyCollection`1<TestCase> <Tests>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<TestLog> <Logs>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<TestError> <Errors>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TimeTaken>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TotalRuntime>k__BackingField;
    public Dictionary`2<string, IList`1<TestCase>> TestGroups { get; private set; }
    public ReadOnlyCollection`1<TestCase> Tests { get; public set; }
    public IList`1<TestLog> Logs { get; public set; }
    public IList`1<TestError> Errors { get; public set; }
    public int TimeTaken { get; public set; }
    public int TotalRuntime { get; public set; }
    public int TotalCount { get; }
    public int PassedCount { get; }
    public int FailedCount { get; }
    public int SkippedCount { get; }
    [CompilerGeneratedAttribute]
public Dictionary`2<string, IList`1<TestCase>> get_TestGroups();
    [CompilerGeneratedAttribute]
private void set_TestGroups(Dictionary`2<string, IList`1<TestCase>> value);
    [CompilerGeneratedAttribute]
public ReadOnlyCollection`1<TestCase> get_Tests();
    [CompilerGeneratedAttribute]
public void set_Tests(ReadOnlyCollection`1<TestCase> value);
    [CompilerGeneratedAttribute]
public IList`1<TestLog> get_Logs();
    [CompilerGeneratedAttribute]
public void set_Logs(IList`1<TestLog> value);
    [CompilerGeneratedAttribute]
public IList`1<TestError> get_Errors();
    [CompilerGeneratedAttribute]
public void set_Errors(IList`1<TestError> value);
    [CompilerGeneratedAttribute]
public int get_TimeTaken();
    [CompilerGeneratedAttribute]
public void set_TimeTaken(int value);
    [CompilerGeneratedAttribute]
public int get_TotalRuntime();
    [CompilerGeneratedAttribute]
public void set_TotalRuntime(int value);
    public int get_TotalCount();
    public int get_PassedCount();
    public int get_FailedCount();
    public int get_SkippedCount();
    public void AddTestCase(TestCase testCase);
    public void AddTestCases(IEnumerable`1<TestCase> testCases);
}
public class Chutzpah.Models.BatchCompileConfiguration : object {
    [CompilerGeneratedAttribute]
private Nullable`1<BatchCompileMode> <Mode>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<string> <Extensions>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<string> <ExtensionsWithNoOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WorkingDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SourceDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<CompilePathMap> <Paths>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Executable>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Arguments>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Timeout>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <SkipIfUnchanged>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <UseSourceMaps>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IgnoreMissingFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SettingsFileDirectory>k__BackingField;
    public Nullable`1<BatchCompileMode> Mode { get; public set; }
    public ICollection`1<string> Extensions { get; public set; }
    public ICollection`1<string> ExtensionsWithNoOutput { get; public set; }
    public string WorkingDirectory { get; public set; }
    public string SourceDirectory { get; public set; }
    public string OutDirectory { get; public set; }
    public ICollection`1<CompilePathMap> Paths { get; public set; }
    public string Executable { get; public set; }
    public string Arguments { get; public set; }
    public Nullable`1<int> Timeout { get; public set; }
    public Nullable`1<bool> SkipIfUnchanged { get; public set; }
    public Nullable`1<bool> UseSourceMaps { get; public set; }
    public Nullable`1<bool> IgnoreMissingFiles { get; public set; }
    [JsonIgnoreAttribute]
public string SettingsFileDirectory { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<BatchCompileMode> get_Mode();
    [CompilerGeneratedAttribute]
public void set_Mode(Nullable`1<BatchCompileMode> value);
    [CompilerGeneratedAttribute]
public ICollection`1<string> get_Extensions();
    [CompilerGeneratedAttribute]
public void set_Extensions(ICollection`1<string> value);
    [CompilerGeneratedAttribute]
public ICollection`1<string> get_ExtensionsWithNoOutput();
    [CompilerGeneratedAttribute]
public void set_ExtensionsWithNoOutput(ICollection`1<string> value);
    [CompilerGeneratedAttribute]
public string get_WorkingDirectory();
    [CompilerGeneratedAttribute]
public void set_WorkingDirectory(string value);
    [CompilerGeneratedAttribute]
public string get_SourceDirectory();
    [CompilerGeneratedAttribute]
public void set_SourceDirectory(string value);
    [CompilerGeneratedAttribute]
public string get_OutDirectory();
    [CompilerGeneratedAttribute]
public void set_OutDirectory(string value);
    [CompilerGeneratedAttribute]
public ICollection`1<CompilePathMap> get_Paths();
    [CompilerGeneratedAttribute]
public void set_Paths(ICollection`1<CompilePathMap> value);
    [CompilerGeneratedAttribute]
public string get_Executable();
    [CompilerGeneratedAttribute]
public void set_Executable(string value);
    [CompilerGeneratedAttribute]
public string get_Arguments();
    [CompilerGeneratedAttribute]
public void set_Arguments(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_SkipIfUnchanged();
    [CompilerGeneratedAttribute]
public void set_SkipIfUnchanged(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_UseSourceMaps();
    [CompilerGeneratedAttribute]
public void set_UseSourceMaps(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IgnoreMissingFiles();
    [CompilerGeneratedAttribute]
public void set_IgnoreMissingFiles(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_SettingsFileDirectory();
    [CompilerGeneratedAttribute]
public void set_SettingsFileDirectory(string value);
}
public enum Chutzpah.Models.BatchCompileMode : Enum {
    public int value__;
    public static BatchCompileMode External;
    public static BatchCompileMode Executable;
}
public class Chutzpah.Models.BatchCompileResult : object {
    [CompilerGeneratedAttribute]
private string <StandardOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StandardError>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ExitCode>k__BackingField;
    public string StandardOutput { get; public set; }
    public string StandardError { get; public set; }
    public int ExitCode { get; public set; }
    [CompilerGeneratedAttribute]
public string get_StandardOutput();
    [CompilerGeneratedAttribute]
public void set_StandardOutput(string value);
    [CompilerGeneratedAttribute]
public string get_StandardError();
    [CompilerGeneratedAttribute]
public void set_StandardError(string value);
    [CompilerGeneratedAttribute]
public int get_ExitCode();
    [CompilerGeneratedAttribute]
public void set_ExitCode(int value);
}
[XmlTypeAttribute("Environment")]
public class Chutzpah.Models.ChutzpahSettingsFileEnvironment : object {
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private Collection`1<ChutzpahSettingsFileEnvironmentProperty> <Properties>k__BackingField;
    [XmlAttributeAttribute]
public string Path { get; public set; }
    public Collection`1<ChutzpahSettingsFileEnvironmentProperty> Properties { get; public set; }
    public ChutzpahSettingsFileEnvironment(string path);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public Collection`1<ChutzpahSettingsFileEnvironmentProperty> get_Properties();
    [CompilerGeneratedAttribute]
public void set_Properties(Collection`1<ChutzpahSettingsFileEnvironmentProperty> value);
}
[XmlTypeAttribute("Property")]
public class Chutzpah.Models.ChutzpahSettingsFileEnvironmentProperty : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public string Name { get; public set; }
    public string Value { get; public set; }
    public ChutzpahSettingsFileEnvironmentProperty(string name, string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
}
public class Chutzpah.Models.ChutzpahSettingsFileEnvironments : object {
    private Dictionary`2<string, ChutzpahSettingsFileEnvironment> environmentMap;
    public int Count { get; }
    public ChutzpahSettingsFileEnvironments(ICollection`1<ChutzpahSettingsFileEnvironment> environments);
    public int get_Count();
    public void AddEnvironment(ChutzpahSettingsFileEnvironment environment);
    public void RemoveEnvironment(string path);
    private static string ProcessEnvironmentPath(string path);
    public ChutzpahSettingsFileEnvironment GetSettingsFileEnvironment(string path);
}
public class Chutzpah.Models.ChutzpahTestSettingsFile : object {
    public static ChutzpahTestSettingsFile Default;
    public static bool ForceWebServerMode;
    private Regex testPatternRegex;
    [CompilerGeneratedAttribute]
private bool <IsDefaultSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <InheritFromParent>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InheritFromPath>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IgnoreResourceLoadingErrors>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <EnableTestFileBatching>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <TestFileTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Framework>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FrameworkVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MochaInterface>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TestHarnessReferenceMode> <TestHarnessReferenceMode>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TestHarnessLocationMode> <TestHarnessLocationMode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TestHarnessDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TestPattern>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CustomTestHarnessPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AMDBaseUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AMDAppDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AMDBasePath>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<RootReferencePathMode> <RootReferencePathMode>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<CodeCoverageExecutionMode> <CodeCoverageExecutionMode>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <CodeCoverageSuccessPercentage>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<string> <CodeCoverageIncludes>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<string> <CodeCoverageExcludes>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<string> <CodeCoverageIgnores>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <CodeCoverageTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Engine> <Engine>k__BackingField;
    [CompilerGeneratedAttribute]
private EngineOptions <EngineOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <BrowserArguments>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<SettingsFileTestPath> <Tests>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<SettingsFileReference> <References>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SettingsFileDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private BatchCompileConfiguration <Compile>k__BackingField;
    [CompilerGeneratedAttribute]
private ChutzpahWebServerConfiguration <Server>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserAgent>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<TransformConfig> <Transforms>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Parallelism>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <EnableTracing>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TraceFilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Proxy>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <CreateFailedTestForFileError>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <IEBrowserTabOpenTimeout>k__BackingField;
    public bool IsDefaultSettings { get; public set; }
    public bool InheritFromParent { get; public set; }
    public string InheritFromPath { get; public set; }
    public Nullable`1<bool> IgnoreResourceLoadingErrors { get; public set; }
    public Nullable`1<bool> EnableTestFileBatching { get; public set; }
    public Nullable`1<int> TestFileTimeout { get; public set; }
    public string Framework { get; public set; }
    public string FrameworkVersion { get; public set; }
    public string MochaInterface { get; public set; }
    public Nullable`1<TestHarnessReferenceMode> TestHarnessReferenceMode { get; public set; }
    public Nullable`1<TestHarnessLocationMode> TestHarnessLocationMode { get; public set; }
    public string TestHarnessDirectory { get; public set; }
    public string TestPattern { get; public set; }
    public string CustomTestHarnessPath { get; public set; }
    public string AMDBaseUrl { get; public set; }
    public string AMDAppDirectory { get; public set; }
    public string AMDBasePath { get; public set; }
    public Nullable`1<RootReferencePathMode> RootReferencePathMode { get; public set; }
    public Nullable`1<CodeCoverageExecutionMode> CodeCoverageExecutionMode { get; public set; }
    public Nullable`1<double> CodeCoverageSuccessPercentage { get; public set; }
    public ICollection`1<string> CodeCoverageIncludes { get; public set; }
    public ICollection`1<string> CodeCoverageExcludes { get; public set; }
    public ICollection`1<string> CodeCoverageIgnores { get; public set; }
    public Nullable`1<int> CodeCoverageTimeout { get; public set; }
    public Nullable`1<Engine> Engine { get; public set; }
    public EngineOptions EngineOptions { get; public set; }
    public IDictionary`2<string, string> BrowserArguments { get; public set; }
    public ICollection`1<SettingsFileTestPath> Tests { get; public set; }
    public ICollection`1<SettingsFileReference> References { get; public set; }
    [JsonIgnoreAttribute]
public string SettingsFileDirectory { get; public set; }
    public BatchCompileConfiguration Compile { get; public set; }
    public ChutzpahWebServerConfiguration Server { get; public set; }
    public string UserAgent { get; public set; }
    public ICollection`1<TransformConfig> Transforms { get; public set; }
    public Nullable`1<int> Parallelism { get; public set; }
    public Nullable`1<bool> EnableTracing { get; public set; }
    public string TraceFilePath { get; public set; }
    unknown Nullable`1<bool> EnableCodeCoverage {public set; }
    public string Proxy { get; public set; }
    public Nullable`1<bool> CreateFailedTestForFileError { get; public set; }
    public string SettingsFileName { get; }
    public Regex TestPatternRegex { get; }
    public Nullable`1<int> IEBrowserTabOpenTimeout { get; public set; }
    private ChutzpahTestSettingsFile(bool isDefaultSetings);
    private static ChutzpahTestSettingsFile();
    [CompilerGeneratedAttribute]
public bool get_IsDefaultSettings();
    [CompilerGeneratedAttribute]
public void set_IsDefaultSettings(bool value);
    [CompilerGeneratedAttribute]
public bool get_InheritFromParent();
    [CompilerGeneratedAttribute]
public void set_InheritFromParent(bool value);
    [CompilerGeneratedAttribute]
public string get_InheritFromPath();
    [CompilerGeneratedAttribute]
public void set_InheritFromPath(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IgnoreResourceLoadingErrors();
    [CompilerGeneratedAttribute]
public void set_IgnoreResourceLoadingErrors(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_EnableTestFileBatching();
    [CompilerGeneratedAttribute]
public void set_EnableTestFileBatching(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_TestFileTimeout();
    [CompilerGeneratedAttribute]
public void set_TestFileTimeout(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_Framework();
    [CompilerGeneratedAttribute]
public void set_Framework(string value);
    [CompilerGeneratedAttribute]
public string get_FrameworkVersion();
    [CompilerGeneratedAttribute]
public void set_FrameworkVersion(string value);
    [CompilerGeneratedAttribute]
public string get_MochaInterface();
    [CompilerGeneratedAttribute]
public void set_MochaInterface(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<TestHarnessReferenceMode> get_TestHarnessReferenceMode();
    [CompilerGeneratedAttribute]
public void set_TestHarnessReferenceMode(Nullable`1<TestHarnessReferenceMode> value);
    [CompilerGeneratedAttribute]
public Nullable`1<TestHarnessLocationMode> get_TestHarnessLocationMode();
    [CompilerGeneratedAttribute]
public void set_TestHarnessLocationMode(Nullable`1<TestHarnessLocationMode> value);
    [CompilerGeneratedAttribute]
public string get_TestHarnessDirectory();
    [CompilerGeneratedAttribute]
public void set_TestHarnessDirectory(string value);
    [CompilerGeneratedAttribute]
public string get_TestPattern();
    [CompilerGeneratedAttribute]
public void set_TestPattern(string value);
    [CompilerGeneratedAttribute]
public string get_CustomTestHarnessPath();
    [CompilerGeneratedAttribute]
public void set_CustomTestHarnessPath(string value);
    [CompilerGeneratedAttribute]
public string get_AMDBaseUrl();
    [CompilerGeneratedAttribute]
public void set_AMDBaseUrl(string value);
    [CompilerGeneratedAttribute]
public string get_AMDAppDirectory();
    [CompilerGeneratedAttribute]
public void set_AMDAppDirectory(string value);
    [CompilerGeneratedAttribute]
public string get_AMDBasePath();
    [CompilerGeneratedAttribute]
public void set_AMDBasePath(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<RootReferencePathMode> get_RootReferencePathMode();
    [CompilerGeneratedAttribute]
public void set_RootReferencePathMode(Nullable`1<RootReferencePathMode> value);
    [CompilerGeneratedAttribute]
public Nullable`1<CodeCoverageExecutionMode> get_CodeCoverageExecutionMode();
    [CompilerGeneratedAttribute]
public void set_CodeCoverageExecutionMode(Nullable`1<CodeCoverageExecutionMode> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_CodeCoverageSuccessPercentage();
    [CompilerGeneratedAttribute]
public void set_CodeCoverageSuccessPercentage(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public ICollection`1<string> get_CodeCoverageIncludes();
    [CompilerGeneratedAttribute]
public void set_CodeCoverageIncludes(ICollection`1<string> value);
    [CompilerGeneratedAttribute]
public ICollection`1<string> get_CodeCoverageExcludes();
    [CompilerGeneratedAttribute]
public void set_CodeCoverageExcludes(ICollection`1<string> value);
    [CompilerGeneratedAttribute]
public ICollection`1<string> get_CodeCoverageIgnores();
    [CompilerGeneratedAttribute]
public void set_CodeCoverageIgnores(ICollection`1<string> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_CodeCoverageTimeout();
    [CompilerGeneratedAttribute]
public void set_CodeCoverageTimeout(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<Engine> get_Engine();
    [CompilerGeneratedAttribute]
public void set_Engine(Nullable`1<Engine> value);
    [CompilerGeneratedAttribute]
public EngineOptions get_EngineOptions();
    [CompilerGeneratedAttribute]
public void set_EngineOptions(EngineOptions value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_BrowserArguments();
    [CompilerGeneratedAttribute]
public void set_BrowserArguments(IDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public ICollection`1<SettingsFileTestPath> get_Tests();
    [CompilerGeneratedAttribute]
public void set_Tests(ICollection`1<SettingsFileTestPath> value);
    [CompilerGeneratedAttribute]
public ICollection`1<SettingsFileReference> get_References();
    [CompilerGeneratedAttribute]
public void set_References(ICollection`1<SettingsFileReference> value);
    [CompilerGeneratedAttribute]
public string get_SettingsFileDirectory();
    [CompilerGeneratedAttribute]
public void set_SettingsFileDirectory(string value);
    [CompilerGeneratedAttribute]
public BatchCompileConfiguration get_Compile();
    [CompilerGeneratedAttribute]
public void set_Compile(BatchCompileConfiguration value);
    [CompilerGeneratedAttribute]
public ChutzpahWebServerConfiguration get_Server();
    [CompilerGeneratedAttribute]
public void set_Server(ChutzpahWebServerConfiguration value);
    [CompilerGeneratedAttribute]
public string get_UserAgent();
    [CompilerGeneratedAttribute]
public void set_UserAgent(string value);
    [CompilerGeneratedAttribute]
public ICollection`1<TransformConfig> get_Transforms();
    [CompilerGeneratedAttribute]
public void set_Transforms(ICollection`1<TransformConfig> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Parallelism();
    [CompilerGeneratedAttribute]
public void set_Parallelism(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_EnableTracing();
    [CompilerGeneratedAttribute]
public void set_EnableTracing(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_TraceFilePath();
    [CompilerGeneratedAttribute]
public void set_TraceFilePath(string value);
    public void set_EnableCodeCoverage(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_Proxy();
    [CompilerGeneratedAttribute]
public void set_Proxy(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_CreateFailedTestForFileError();
    [CompilerGeneratedAttribute]
public void set_CreateFailedTestForFileError(Nullable`1<bool> value);
    public string get_SettingsFileName();
    public Regex get_TestPatternRegex();
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_IEBrowserTabOpenTimeout();
    [CompilerGeneratedAttribute]
public void set_IEBrowserTabOpenTimeout(Nullable`1<int> value);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public ChutzpahTestSettingsFile InheritFromDefault();
    public ChutzpahTestSettingsFile InheritFrom(ChutzpahTestSettingsFile parent);
}
public class Chutzpah.Models.ChutzpahWebServerConfiguration : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Enabled>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <DefaultPort>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RootPath>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <FileCachingEnabled>k__BackingField;
    public Nullable`1<bool> Enabled { get; public set; }
    public Nullable`1<int> DefaultPort { get; public set; }
    public string RootPath { get; public set; }
    public Nullable`1<bool> FileCachingEnabled { get; public set; }
    public ChutzpahWebServerConfiguration(ChutzpahWebServerConfiguration configurationToCopy);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Enabled();
    [CompilerGeneratedAttribute]
public void set_Enabled(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_DefaultPort();
    [CompilerGeneratedAttribute]
public void set_DefaultPort(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_RootPath();
    [CompilerGeneratedAttribute]
public void set_RootPath(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_FileCachingEnabled();
    [CompilerGeneratedAttribute]
public void set_FileCachingEnabled(Nullable`1<bool> value);
}
public enum Chutzpah.Models.CodeCoverageExecutionMode : Enum {
    public int value__;
    public static CodeCoverageExecutionMode Manual;
    public static CodeCoverageExecutionMode Always;
    public static CodeCoverageExecutionMode Never;
}
public class Chutzpah.Models.CompilePathMap : object {
    [CompilerGeneratedAttribute]
private string <SourcePath>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SourcePathIsFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputPath>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OutputPathIsFile>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<CompilePathType> <OutputPathType>k__BackingField;
    public string SourcePath { get; public set; }
    [JsonIgnoreAttribute]
public bool SourcePathIsFile { get; public set; }
    public string OutputPath { get; public set; }
    [JsonIgnoreAttribute]
public bool OutputPathIsFile { get; public set; }
    public Nullable`1<CompilePathType> OutputPathType { get; public set; }
    [CompilerGeneratedAttribute]
public string get_SourcePath();
    [CompilerGeneratedAttribute]
public void set_SourcePath(string value);
    [CompilerGeneratedAttribute]
public bool get_SourcePathIsFile();
    [CompilerGeneratedAttribute]
public void set_SourcePathIsFile(bool value);
    [CompilerGeneratedAttribute]
public string get_OutputPath();
    [CompilerGeneratedAttribute]
public void set_OutputPath(string value);
    [CompilerGeneratedAttribute]
public bool get_OutputPathIsFile();
    [CompilerGeneratedAttribute]
public void set_OutputPathIsFile(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<CompilePathType> get_OutputPathType();
    [CompilerGeneratedAttribute]
public void set_OutputPathType(Nullable`1<CompilePathType> value);
}
public enum Chutzpah.Models.CompilePathType : Enum {
    public int value__;
    public static CompilePathType File;
    public static CompilePathType Folder;
}
public class Chutzpah.Models.CoverageData : Dictionary`2<string, CoverageFileData> {
    private Nullable`1<double> coveragePercentage;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <SuccessPercentage>k__BackingField;
    public Nullable`1<double> SuccessPercentage { get; public set; }
    public double CoveragePercentage { get; }
    public CoverageData(double successPercentage);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_SuccessPercentage();
    [CompilerGeneratedAttribute]
public void set_SuccessPercentage(Nullable`1<double> value);
    public double get_CoveragePercentage();
    public void Merge(CoverageData coverageData);
}
public class Chutzpah.Models.CoverageFileData : object {
    private Nullable`1<double> coveragePercentage;
    private Tuple`2<double, double> coveredCount;
    [CompilerGeneratedAttribute]
private string <FilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1[] <LineExecutionCounts>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <SourceLines>k__BackingField;
    public string FilePath { get; public set; }
    public Nullable`1[] LineExecutionCounts { get; public set; }
    public String[] SourceLines { get; public set; }
    public double CoveragePercentage { get; }
    public CoverageFileData(CoverageFileData coverageFileData);
    [CompilerGeneratedAttribute]
public string get_FilePath();
    [CompilerGeneratedAttribute]
public void set_FilePath(string value);
    [CompilerGeneratedAttribute]
public Nullable`1[] get_LineExecutionCounts();
    [CompilerGeneratedAttribute]
public void set_LineExecutionCounts(Nullable`1[] value);
    [CompilerGeneratedAttribute]
public String[] get_SourceLines();
    [CompilerGeneratedAttribute]
public void set_SourceLines(String[] value);
    public double get_CoveragePercentage();
    private double CalculateCoveragePercentage();
    public Tuple`2<double, double> GetCoveredCount();
    public void Merge(CoverageFileData coverageFileData);
}
public enum Chutzpah.Models.Engine : Enum {
    public int value__;
    public static Engine Phantom;
    public static Engine Chrome;
    public static Engine JsDom;
}
public class Chutzpah.Models.EngineOptions : object {
    [CompilerGeneratedAttribute]
private string <ChromeBrowserPath>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NodeInspect>k__BackingField;
    public string ChromeBrowserPath { get; public set; }
    public bool NodeInspect { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ChromeBrowserPath();
    [CompilerGeneratedAttribute]
public void set_ChromeBrowserPath(string value);
    [CompilerGeneratedAttribute]
public bool get_NodeInspect();
    [CompilerGeneratedAttribute]
public void set_NodeInspect(bool value);
}
public class Chutzpah.Models.FilePosition : object {
    [CompilerGeneratedAttribute]
private int <Line>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Column>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TestName>k__BackingField;
    public int Line { get; public set; }
    public int Column { get; public set; }
    public string TestName { get; public set; }
    public FilePosition(int line, int column, string testName);
    [CompilerGeneratedAttribute]
public int get_Line();
    [CompilerGeneratedAttribute]
public void set_Line(int value);
    [CompilerGeneratedAttribute]
public int get_Column();
    [CompilerGeneratedAttribute]
public void set_Column(int value);
    [CompilerGeneratedAttribute]
public string get_TestName();
    [CompilerGeneratedAttribute]
public void set_TestName(string value);
}
[DefaultMemberAttribute("Item")]
public class Chutzpah.Models.FilePositions : object {
    private List`1<FilePosition> positions;
    public FilePosition Item { get; }
    public FilePosition Item { get; }
    public FilePosition get_Item(int index);
    public FilePosition get_Item(string testName);
    public bool Contains(int index);
    public bool Contains(string testName);
    public void Add(int line, int column, string testName);
}
public class Chutzpah.Models.ForcedChutzpahWebServerConfiguration : ChutzpahWebServerConfiguration {
    public static ForcedChutzpahWebServerConfiguration Instance;
    private static ForcedChutzpahWebServerConfiguration();
}
public class Chutzpah.Models.JS.JsCoverage : JsRunnerOutput {
    [CompilerGeneratedAttribute]
private string <Object>k__BackingField;
    public string Object { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Object();
    [CompilerGeneratedAttribute]
public void set_Object(string value);
}
public class Chutzpah.Models.JS.JsError : JsRunnerOutput {
    [CompilerGeneratedAttribute]
private TestError <Error>k__BackingField;
    public TestError Error { get; public set; }
    [CompilerGeneratedAttribute]
public TestError get_Error();
    [CompilerGeneratedAttribute]
public void set_Error(TestError value);
}
public class Chutzpah.Models.JsFileDone : JsRunnerOutput {
    [CompilerGeneratedAttribute]
private int <TimeTaken>k__BackingField;
    public int TimeTaken { get; public set; }
    [CompilerGeneratedAttribute]
public int get_TimeTaken();
    [CompilerGeneratedAttribute]
public void set_TimeTaken(int value);
}
public class Chutzpah.Models.JsLog : JsRunnerOutput {
    [CompilerGeneratedAttribute]
private TestLog <Log>k__BackingField;
    public TestLog Log { get; public set; }
    [CompilerGeneratedAttribute]
public TestLog get_Log();
    [CompilerGeneratedAttribute]
public void set_Log(TestLog value);
}
public class Chutzpah.Models.JsRunnerOutput : object {
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    public string Type { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(string value);
}
public class Chutzpah.Models.JsTestCase : JsRunnerOutput {
    [CompilerGeneratedAttribute]
private TestCase <TestCase>k__BackingField;
    public TestCase TestCase { get; public set; }
    [CompilerGeneratedAttribute]
public TestCase get_TestCase();
    [CompilerGeneratedAttribute]
public void set_TestCase(TestCase value);
}
[DebuggerDisplayAttribute("{FullPath}")]
public class Chutzpah.Models.PathInfo : object {
    [CompilerGeneratedAttribute]
private PathType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FullPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    public PathType Type { get; public set; }
    public string FullPath { get; public set; }
    public string Path { get; public set; }
    [CompilerGeneratedAttribute]
public PathType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(PathType value);
    [CompilerGeneratedAttribute]
public string get_FullPath();
    [CompilerGeneratedAttribute]
public void set_FullPath(string value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
}
public enum Chutzpah.Models.PathType : Enum {
    public int value__;
    public static PathType Other;
    public static PathType JavaScript;
    public static PathType Html;
    public static PathType Folder;
    public static PathType Url;
}
public class Chutzpah.Models.ProcessResult`1 : object {
    [CompilerGeneratedAttribute]
private int <ExitCode>k__BackingField;
    [CompilerGeneratedAttribute]
private T <Model>k__BackingField;
    public int ExitCode { get; public set; }
    public T Model { get; public set; }
    public ProcessResult`1(int exitCode);
    public ProcessResult`1(int exitCode, T result);
    [CompilerGeneratedAttribute]
public int get_ExitCode();
    [CompilerGeneratedAttribute]
public void set_ExitCode(int value);
    [CompilerGeneratedAttribute]
public T get_Model();
    [CompilerGeneratedAttribute]
public void set_Model(T value);
}
public class Chutzpah.Models.ProcessStreamStringSource : TestCaseSource`1<string> {
    private IProcessWrapper process;
    [CompilerGeneratedAttribute]
private StreamReader <streamReader>k__BackingField;
    private StreamReader streamReader { get; }
    public ProcessStreamStringSource(IProcessWrapper process, StreamReader streamReader, int timeout);
    [CompilerGeneratedAttribute]
private StreamReader get_streamReader();
    public virtual void Dispose();
    [AsyncStateMachineAttribute("Chutzpah.Models.ProcessStreamStringSource/<Open>d__6")]
public virtual Task`1<object> Open();
}
public class Chutzpah.Models.ReferencedFile : object {
    [CompilerGeneratedAttribute]
private bool <IsFileUnderTest>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsLocal>k__BackingField;
    [CompilerGeneratedAttribute]
private FilePositions <FilePositions>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ReferencedFile> <ReferencedFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GeneratedFilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SourceMapFilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsTestFrameworkFile>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsCodeCoverageDependency>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeInTestHarness>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AmdFilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AmdGeneratedFilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ExpandReferenceComments>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <FrameworkReplacements>k__BackingField;
    [CompilerGeneratedAttribute]
private TemplateOptions <TemplateOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsBuiltInDependency>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PathForUseInTestHarness>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AbsoluteServerUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Hash>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PathFromTestSettingsDirectory>k__BackingField;
    public bool IsFileUnderTest { get; public set; }
    public string Path { get; public set; }
    public bool IsLocal { get; public set; }
    public FilePositions FilePositions { get; public set; }
    public IList`1<ReferencedFile> ReferencedFiles { get; public set; }
    public string GeneratedFilePath { get; public set; }
    public string SourceMapFilePath { get; public set; }
    public bool IsTestFrameworkFile { get; public set; }
    public bool IsCodeCoverageDependency { get; public set; }
    public bool IncludeInTestHarness { get; public set; }
    public string AmdFilePath { get; public set; }
    public string AmdGeneratedFilePath { get; public set; }
    public bool ExpandReferenceComments { get; public set; }
    public Dictionary`2<string, string> FrameworkReplacements { get; public set; }
    public TemplateOptions TemplateOptions { get; public set; }
    public bool IsBuiltInDependency { get; public set; }
    public string PathForUseInTestHarness { get; public set; }
    public string AbsoluteServerUrl { get; public set; }
    public string Hash { get; public set; }
    public string PathFromTestSettingsDirectory { get; internal set; }
    [CompilerGeneratedAttribute]
public bool get_IsFileUnderTest();
    [CompilerGeneratedAttribute]
public void set_IsFileUnderTest(bool value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public bool get_IsLocal();
    [CompilerGeneratedAttribute]
public void set_IsLocal(bool value);
    [CompilerGeneratedAttribute]
public FilePositions get_FilePositions();
    [CompilerGeneratedAttribute]
public void set_FilePositions(FilePositions value);
    [CompilerGeneratedAttribute]
public IList`1<ReferencedFile> get_ReferencedFiles();
    [CompilerGeneratedAttribute]
public void set_ReferencedFiles(IList`1<ReferencedFile> value);
    [CompilerGeneratedAttribute]
public string get_GeneratedFilePath();
    [CompilerGeneratedAttribute]
public void set_GeneratedFilePath(string value);
    [CompilerGeneratedAttribute]
public string get_SourceMapFilePath();
    [CompilerGeneratedAttribute]
public void set_SourceMapFilePath(string value);
    [CompilerGeneratedAttribute]
public bool get_IsTestFrameworkFile();
    [CompilerGeneratedAttribute]
public void set_IsTestFrameworkFile(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsCodeCoverageDependency();
    [CompilerGeneratedAttribute]
public void set_IsCodeCoverageDependency(bool value);
    [CompilerGeneratedAttribute]
public bool get_IncludeInTestHarness();
    [CompilerGeneratedAttribute]
public void set_IncludeInTestHarness(bool value);
    [CompilerGeneratedAttribute]
public string get_AmdFilePath();
    [CompilerGeneratedAttribute]
public void set_AmdFilePath(string value);
    [CompilerGeneratedAttribute]
public string get_AmdGeneratedFilePath();
    [CompilerGeneratedAttribute]
public void set_AmdGeneratedFilePath(string value);
    [CompilerGeneratedAttribute]
public bool get_ExpandReferenceComments();
    [CompilerGeneratedAttribute]
public void set_ExpandReferenceComments(bool value);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_FrameworkReplacements();
    [CompilerGeneratedAttribute]
public void set_FrameworkReplacements(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public TemplateOptions get_TemplateOptions();
    [CompilerGeneratedAttribute]
public void set_TemplateOptions(TemplateOptions value);
    [CompilerGeneratedAttribute]
public bool get_IsBuiltInDependency();
    [CompilerGeneratedAttribute]
public void set_IsBuiltInDependency(bool value);
    [CompilerGeneratedAttribute]
public string get_PathForUseInTestHarness();
    [CompilerGeneratedAttribute]
public void set_PathForUseInTestHarness(string value);
    [CompilerGeneratedAttribute]
public string get_AbsoluteServerUrl();
    [CompilerGeneratedAttribute]
public void set_AbsoluteServerUrl(string value);
    [CompilerGeneratedAttribute]
public string get_Hash();
    [CompilerGeneratedAttribute]
public void set_Hash(string value);
    [CompilerGeneratedAttribute]
public string get_PathFromTestSettingsDirectory();
    [CompilerGeneratedAttribute]
internal void set_PathFromTestSettingsDirectory(string value);
}
public enum Chutzpah.Models.RootReferencePathMode : Enum {
    public int value__;
    public static RootReferencePathMode DriveRoot;
    public static RootReferencePathMode SettingsFileDirectory;
}
public abstract class Chutzpah.Models.SettingsFilePath : object {
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <Includes>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <Excludes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SettingsFileDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ExpandReferenceComments>k__BackingField;
    public string Path { get; public set; }
    unknown string Include {public set; }
    unknown string Exclude {public set; }
    public IList`1<string> Includes { get; public set; }
    public IList`1<string> Excludes { get; public set; }
    public string SettingsFileDirectory { get; public set; }
    public bool ExpandReferenceComments { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    public void set_Include(string value);
    public void set_Exclude(string value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_Includes();
    [CompilerGeneratedAttribute]
public void set_Includes(IList`1<string> value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_Excludes();
    [CompilerGeneratedAttribute]
public void set_Excludes(IList`1<string> value);
    [CompilerGeneratedAttribute]
public string get_SettingsFileDirectory();
    [CompilerGeneratedAttribute]
public void set_SettingsFileDirectory(string value);
    [CompilerGeneratedAttribute]
public bool get_ExpandReferenceComments();
    [CompilerGeneratedAttribute]
public void set_ExpandReferenceComments(bool value);
}
public class Chutzpah.Models.SettingsFileReference : SettingsFilePath {
    [CompilerGeneratedAttribute]
private bool <IncludeInTestHarness>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsTestFrameworkFile>k__BackingField;
    [CompilerGeneratedAttribute]
private TemplateOptions <TemplateOptions>k__BackingField;
    public bool IncludeInTestHarness { get; public set; }
    public bool IsTestFrameworkFile { get; public set; }
    public TemplateOptions TemplateOptions { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_IncludeInTestHarness();
    [CompilerGeneratedAttribute]
public void set_IncludeInTestHarness(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsTestFrameworkFile();
    [CompilerGeneratedAttribute]
public void set_IsTestFrameworkFile(bool value);
    [CompilerGeneratedAttribute]
public TemplateOptions get_TemplateOptions();
    [CompilerGeneratedAttribute]
public void set_TemplateOptions(TemplateOptions value);
}
public class Chutzpah.Models.SettingsFileTestPath : SettingsFilePath {
}
public class Chutzpah.Models.Stack : object {
    [CompilerGeneratedAttribute]
private string <File>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Line>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Function>k__BackingField;
    public string File { get; public set; }
    public string Line { get; public set; }
    public string Function { get; public set; }
    [CompilerGeneratedAttribute]
public string get_File();
    [CompilerGeneratedAttribute]
public void set_File(string value);
    [CompilerGeneratedAttribute]
public string get_Line();
    [CompilerGeneratedAttribute]
public void set_Line(string value);
    [CompilerGeneratedAttribute]
public string get_Function();
    [CompilerGeneratedAttribute]
public void set_Function(string value);
}
public enum Chutzpah.Models.TemplateMode : Enum {
    public int value__;
    public static TemplateMode Raw;
    public static TemplateMode Script;
}
public class Chutzpah.Models.TemplateOptions : object {
    [CompilerGeneratedAttribute]
private TemplateMode <Mode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    public TemplateMode Mode { get; public set; }
    public string Id { get; public set; }
    public string Type { get; public set; }
    [CompilerGeneratedAttribute]
public TemplateMode get_Mode();
    [CompilerGeneratedAttribute]
public void set_Mode(TemplateMode value);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(string value);
}
public class Chutzpah.Models.TestCase : object {
    [CompilerGeneratedAttribute]
private string <HtmlTestFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InputTestFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PathFromTestSettingsDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ModuleName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TestName>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Line>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Column>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Skipped>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<TestResult> <TestResults>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TimeTaken>k__BackingField;
    public string HtmlTestFile { get; public set; }
    public string InputTestFile { get; public set; }
    public string PathFromTestSettingsDirectory { get; public set; }
    public string ModuleName { get; public set; }
    public string TestName { get; public set; }
    public int Line { get; public set; }
    public int Column { get; public set; }
    public bool Skipped { get; public set; }
    public IList`1<TestResult> TestResults { get; public set; }
    public int TimeTaken { get; public set; }
    public bool ResultsAllPassed { get; }
    public TestOutcome TestOutcome { get; }
    [CompilerGeneratedAttribute]
public string get_HtmlTestFile();
    [CompilerGeneratedAttribute]
public void set_HtmlTestFile(string value);
    [CompilerGeneratedAttribute]
public string get_InputTestFile();
    [CompilerGeneratedAttribute]
public void set_InputTestFile(string value);
    [CompilerGeneratedAttribute]
public string get_PathFromTestSettingsDirectory();
    [CompilerGeneratedAttribute]
public void set_PathFromTestSettingsDirectory(string value);
    [CompilerGeneratedAttribute]
public string get_ModuleName();
    [CompilerGeneratedAttribute]
public void set_ModuleName(string value);
    [CompilerGeneratedAttribute]
public string get_TestName();
    [CompilerGeneratedAttribute]
public void set_TestName(string value);
    [CompilerGeneratedAttribute]
public int get_Line();
    [CompilerGeneratedAttribute]
public void set_Line(int value);
    [CompilerGeneratedAttribute]
public int get_Column();
    [CompilerGeneratedAttribute]
public void set_Column(int value);
    [CompilerGeneratedAttribute]
public bool get_Skipped();
    [CompilerGeneratedAttribute]
public void set_Skipped(bool value);
    [CompilerGeneratedAttribute]
public IList`1<TestResult> get_TestResults();
    [CompilerGeneratedAttribute]
public void set_TestResults(IList`1<TestResult> value);
    [CompilerGeneratedAttribute]
public int get_TimeTaken();
    [CompilerGeneratedAttribute]
public void set_TimeTaken(int value);
    public bool get_ResultsAllPassed();
    public TestOutcome get_TestOutcome();
    public string GetDisplayName();
}
public abstract class Chutzpah.Models.TestCaseSource`1 : object {
    private Func`2<T, bool> subscriber;
    private int timeout;
    [CompilerGeneratedAttribute]
private DateTime <LastTestEvent>k__BackingField;
    public DateTime LastTestEvent { get; public set; }
    public bool IsAlive { get; }
    public TestCaseSource`1(int timeout);
    [CompilerGeneratedAttribute]
public DateTime get_LastTestEvent();
    [CompilerGeneratedAttribute]
public void set_LastTestEvent(DateTime value);
    public bool get_IsAlive();
    public void Subscribe(Func`2<T, bool> handler);
    public abstract virtual Task`1<object> Open();
    public virtual void Dispose();
    protected void Emit(T data);
}
public class Chutzpah.Models.TestCaseSummary : BaseTestCaseSummary {
    [CompilerGeneratedAttribute]
private CoverageData <CoverageObject>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<TestFileSummary> <TestFileSummaries>k__BackingField;
    [CompilerGeneratedAttribute]
private TransformResult <TransformResult>k__BackingField;
    public CoverageData CoverageObject { get; public set; }
    public IList`1<TestFileSummary> TestFileSummaries { get; private set; }
    public TransformResult TransformResult { get; public set; }
    [CompilerGeneratedAttribute]
public CoverageData get_CoverageObject();
    [CompilerGeneratedAttribute]
public void set_CoverageObject(CoverageData value);
    [CompilerGeneratedAttribute]
public IList`1<TestFileSummary> get_TestFileSummaries();
    [CompilerGeneratedAttribute]
private void set_TestFileSummaries(IList`1<TestFileSummary> value);
    public void Append(TestFileSummary summary);
    internal void AppendCoverageData(CoverageData fileCoverageObject);
    internal void AppendTests(IEnumerable`1<TestCase> tests);
    internal void AppendLogs(IEnumerable`1<TestLog> logs);
    internal void AppendErrors(IEnumerable`1<TestError> errors);
    public void SetTotalRunTime(int timeMs);
    [CompilerGeneratedAttribute]
public TransformResult get_TransformResult();
    [CompilerGeneratedAttribute]
public void set_TransformResult(TransformResult value);
}
public class Chutzpah.Models.TestContext : object {
    [CompilerGeneratedAttribute]
private ICollection`1<string> <InputTestFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FirstInputTestFile>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TaskId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TestRunner>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TestHarnessPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TestHarnessDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsRemoteHarness>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<ReferencedFile> <ReferencedFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<string> <TemporaryFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private ChutzpahTestSettingsFile <TestFileSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private IFrameworkDefinition <FrameworkDefinition>k__BackingField;
    [CompilerGeneratedAttribute]
private ICoverageEngine <CoverageEngine>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InputTestFilesString>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TestHarnessCreationFailed>k__BackingField;
    [CompilerGeneratedAttribute]
private IChutzpahWebServerHost <WebServerHost>k__BackingField;
    public ICollection`1<string> InputTestFiles { get; public set; }
    public string FirstInputTestFile { get; public set; }
    public int TaskId { get; public set; }
    public string TestRunner { get; public set; }
    public string TestHarnessPath { get; public set; }
    public string TestHarnessDirectory { get; public set; }
    public bool IsRemoteHarness { get; public set; }
    public ICollection`1<ReferencedFile> ReferencedFiles { get; public set; }
    public ICollection`1<string> TemporaryFiles { get; public set; }
    public ChutzpahTestSettingsFile TestFileSettings { get; public set; }
    public IFrameworkDefinition FrameworkDefinition { get; public set; }
    public ICoverageEngine CoverageEngine { get; public set; }
    public string InputTestFilesString { get; public set; }
    public bool TestHarnessCreationFailed { get; public set; }
    public IChutzpahWebServerHost WebServerHost { get; public set; }
    [CompilerGeneratedAttribute]
public ICollection`1<string> get_InputTestFiles();
    [CompilerGeneratedAttribute]
public void set_InputTestFiles(ICollection`1<string> value);
    [CompilerGeneratedAttribute]
public string get_FirstInputTestFile();
    [CompilerGeneratedAttribute]
public void set_FirstInputTestFile(string value);
    [CompilerGeneratedAttribute]
public int get_TaskId();
    [CompilerGeneratedAttribute]
public void set_TaskId(int value);
    [CompilerGeneratedAttribute]
public string get_TestRunner();
    [CompilerGeneratedAttribute]
public void set_TestRunner(string value);
    [CompilerGeneratedAttribute]
public string get_TestHarnessPath();
    [CompilerGeneratedAttribute]
public void set_TestHarnessPath(string value);
    [CompilerGeneratedAttribute]
public string get_TestHarnessDirectory();
    [CompilerGeneratedAttribute]
public void set_TestHarnessDirectory(string value);
    [CompilerGeneratedAttribute]
public bool get_IsRemoteHarness();
    [CompilerGeneratedAttribute]
public void set_IsRemoteHarness(bool value);
    [CompilerGeneratedAttribute]
public ICollection`1<ReferencedFile> get_ReferencedFiles();
    [CompilerGeneratedAttribute]
public void set_ReferencedFiles(ICollection`1<ReferencedFile> value);
    [CompilerGeneratedAttribute]
public ICollection`1<string> get_TemporaryFiles();
    [CompilerGeneratedAttribute]
public void set_TemporaryFiles(ICollection`1<string> value);
    [CompilerGeneratedAttribute]
public ChutzpahTestSettingsFile get_TestFileSettings();
    [CompilerGeneratedAttribute]
public void set_TestFileSettings(ChutzpahTestSettingsFile value);
    [CompilerGeneratedAttribute]
public IFrameworkDefinition get_FrameworkDefinition();
    [CompilerGeneratedAttribute]
public void set_FrameworkDefinition(IFrameworkDefinition value);
    [CompilerGeneratedAttribute]
public ICoverageEngine get_CoverageEngine();
    [CompilerGeneratedAttribute]
public void set_CoverageEngine(ICoverageEngine value);
    [CompilerGeneratedAttribute]
public string get_InputTestFilesString();
    [CompilerGeneratedAttribute]
public void set_InputTestFilesString(string value);
    [CompilerGeneratedAttribute]
public bool get_TestHarnessCreationFailed();
    [CompilerGeneratedAttribute]
public void set_TestHarnessCreationFailed(bool value);
    [CompilerGeneratedAttribute]
public IChutzpahWebServerHost get_WebServerHost();
    [CompilerGeneratedAttribute]
public void set_WebServerHost(IChutzpahWebServerHost value);
}
public class Chutzpah.Models.TestError : object {
    [CompilerGeneratedAttribute]
private string <InputTestFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<Stack> <Stack>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StackAsString>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PathFromTestSettingsDirectory>k__BackingField;
    public string InputTestFile { get; public set; }
    public string Message { get; public set; }
    public IList`1<Stack> Stack { get; public set; }
    public string StackAsString { get; public set; }
    public string PathFromTestSettingsDirectory { get; internal set; }
    [CompilerGeneratedAttribute]
public string get_InputTestFile();
    [CompilerGeneratedAttribute]
public void set_InputTestFile(string value);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(string value);
    [CompilerGeneratedAttribute]
public IList`1<Stack> get_Stack();
    [CompilerGeneratedAttribute]
public void set_Stack(IList`1<Stack> value);
    [CompilerGeneratedAttribute]
public string get_StackAsString();
    [CompilerGeneratedAttribute]
public void set_StackAsString(string value);
    [CompilerGeneratedAttribute]
public string get_PathFromTestSettingsDirectory();
    [CompilerGeneratedAttribute]
internal void set_PathFromTestSettingsDirectory(string value);
    public string GetFormattedStackTrace();
    public string FormatStackObject();
}
public enum Chutzpah.Models.TestExecutionMode : Enum {
    public int value__;
    public static TestExecutionMode Execution;
    public static TestExecutionMode Discovery;
}
public class Chutzpah.Models.TestFileSummary : BaseTestCaseSummary {
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private CoverageData <CoverageObject>k__BackingField;
    public string Path { get; public set; }
    public CoverageData CoverageObject { get; public set; }
    public TestFileSummary(string path);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public CoverageData get_CoverageObject();
    [CompilerGeneratedAttribute]
public void set_CoverageObject(CoverageData value);
}
public enum Chutzpah.Models.TestHarnessLocationMode : Enum {
    public int value__;
    public static TestHarnessLocationMode TestFileAdjacent;
    public static TestHarnessLocationMode SettingsFileAdjacent;
    public static TestHarnessLocationMode Custom;
}
public enum Chutzpah.Models.TestHarnessReferenceMode : Enum {
    public int value__;
    public static TestHarnessReferenceMode Normal;
    public static TestHarnessReferenceMode AMD;
}
[FlagsAttribute]
public enum Chutzpah.Models.TestingMode : Enum {
    public int value__;
    public static TestingMode JavaScript;
    public static TestingMode CoffeeScript;
    public static TestingMode TypeScript;
    public static TestingMode AllExceptHTML;
    public static TestingMode HTML;
    public static TestingMode All;
}
public enum Chutzpah.Models.TestLaunchMode : Enum {
    public int value__;
    public static TestLaunchMode HeadlessBrowser;
    public static TestLaunchMode FullBrowser;
    public static TestLaunchMode Custom;
}
public class Chutzpah.Models.TestLog : object {
    [CompilerGeneratedAttribute]
private string <InputTestFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PathFromTestSettingsDirectory>k__BackingField;
    public string InputTestFile { get; public set; }
    public string Message { get; public set; }
    public string PathFromTestSettingsDirectory { get; internal set; }
    [CompilerGeneratedAttribute]
public string get_InputTestFile();
    [CompilerGeneratedAttribute]
public void set_InputTestFile(string value);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(string value);
    [CompilerGeneratedAttribute]
public string get_PathFromTestSettingsDirectory();
    [CompilerGeneratedAttribute]
internal void set_PathFromTestSettingsDirectory(string value);
}
public enum Chutzpah.Models.TestOutcome : Enum {
    public int value__;
    public static TestOutcome None;
    public static TestOutcome Passed;
    public static TestOutcome Failed;
    public static TestOutcome Skipped;
}
public enum Chutzpah.Models.TestProcessExitCode : Enum {
    public int value__;
    public static TestProcessExitCode AllPassed;
    public static TestProcessExitCode SomeFailed;
    public static TestProcessExitCode Unknown;
    public static TestProcessExitCode Timeout;
}
public class Chutzpah.Models.TestResult : object {
    [CompilerGeneratedAttribute]
private bool <Passed>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Expected>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Actual>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StackTrace>k__BackingField;
    public bool Passed { get; public set; }
    public string Expected { get; public set; }
    public string Actual { get; public set; }
    public string Message { get; public set; }
    public string StackTrace { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Passed();
    [CompilerGeneratedAttribute]
public void set_Passed(bool value);
    [CompilerGeneratedAttribute]
public string get_Expected();
    [CompilerGeneratedAttribute]
public void set_Expected(string value);
    [CompilerGeneratedAttribute]
public string get_Actual();
    [CompilerGeneratedAttribute]
public void set_Actual(string value);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(string value);
    [CompilerGeneratedAttribute]
public string get_StackTrace();
    [CompilerGeneratedAttribute]
public void set_StackTrace(string value);
    public string GetFailureMessage();
}
public class Chutzpah.Models.TestRunConfiguration : object {
    [CompilerGeneratedAttribute]
private List`1<List`1<PathInfo>> <TestGroups>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxDegreeOfParallelism>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableTracing>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TraceFilePath>k__BackingField;
    public List`1<List`1<PathInfo>> TestGroups { get; public set; }
    public Nullable`1<int> MaxDegreeOfParallelism { get; public set; }
    public bool EnableTracing { get; public set; }
    public string TraceFilePath { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<List`1<PathInfo>> get_TestGroups();
    [CompilerGeneratedAttribute]
public void set_TestGroups(List`1<List`1<PathInfo>> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaxDegreeOfParallelism();
    [CompilerGeneratedAttribute]
public void set_MaxDegreeOfParallelism(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public bool get_EnableTracing();
    [CompilerGeneratedAttribute]
public void set_EnableTracing(bool value);
    [CompilerGeneratedAttribute]
public string get_TraceFilePath();
    [CompilerGeneratedAttribute]
public void set_TraceFilePath(string value);
}
public class Chutzpah.Models.TransformConfig : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SettingsFileDirectory>k__BackingField;
    public string Name { get; public set; }
    public string Path { get; public set; }
    public string SettingsFileDirectory { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public string get_SettingsFileDirectory();
    [CompilerGeneratedAttribute]
public void set_SettingsFileDirectory(string value);
}
public class Chutzpah.Models.VSTSTestCase : TestCase {
    [CompilerGeneratedAttribute]
private Guid <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <ExecutionId>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <exception>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Passed>k__BackingField;
    public Guid Id { get; private set; }
    public Guid ExecutionId { get; private set; }
    public Exception exception { get; public set; }
    public bool Passed { get; public set; }
    [CompilerGeneratedAttribute]
public Guid get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(Guid value);
    [CompilerGeneratedAttribute]
public Guid get_ExecutionId();
    [CompilerGeneratedAttribute]
private void set_ExecutionId(Guid value);
    [CompilerGeneratedAttribute]
public Exception get_exception();
    [CompilerGeneratedAttribute]
public void set_exception(Exception value);
    [CompilerGeneratedAttribute]
public bool get_Passed();
    [CompilerGeneratedAttribute]
public void set_Passed(bool value);
    public VSTSTestCase UpdateWith(TestCase that);
    public sealed virtual bool Equals(VSTSTestCase other);
}
public class Chutzpah.NativeImports : object {
    public static bool PathMatchSpec(string pszFileParam, string pszSpec);
    public static IntPtr LoadLibrary(string dllToLoad);
}
public class Chutzpah.NodeTestExecutionProvider : object {
    public static string HeadlessBrowserName;
    private static string PackagesPath;
    private IProcessHelper processTools;
    private IFileProbe fileProbe;
    private IUrlBuilder urlBuilder;
    private string headlessBrowserPath;
    private ITestCaseStreamReaderFactory readerFactory;
    private bool isRunningElevated;
    public NodeTestExecutionProvider(IProcessHelper process, IFileProbe fileProbe, IUrlBuilder urlBuilder, ITestCaseStreamReaderFactory readerFactory);
    private static NodeTestExecutionProvider();
    public sealed virtual bool CanHandleBrowser(Engine engine);
    public sealed virtual void SetupEnvironment(TestOptions testOptions, TestContext testContext);
    public sealed virtual IList`1<TestFileSummary> Execute(TestOptions testOptions, TestContext testContext, TestExecutionMode testExecutionMode, ITestMethodRunnerCallback callback);
    private IDictionary`2<string, string> BuildEnvironmentVariables();
    private static void HandleTestProcessExitCode(TestContext context, int exitCode, string inputTestFile, IList`1<TestError> errors, ITestMethodRunnerCallback callback);
    private static string BuildRunnerArgs(TestOptions options, TestContext context, string fileUrl, string runnerPath, TestExecutionMode testExecutionMode, bool isRunningElevated, string chromeBrowserPath);
    private string BuildHarnessUrl(TestContext testContext);
}
public class Chutzpah.PhantomTestExecutionProvider : object {
    public static string HeadlessBrowserName;
    private IProcessHelper processTools;
    private IFileProbe fileProbe;
    private IUrlBuilder urlBuilder;
    private string headlessBrowserPath;
    private ITestCaseStreamReaderFactory readerFactory;
    public PhantomTestExecutionProvider(IProcessHelper process, IFileProbe fileProbe, IUrlBuilder urlBuilder, ITestCaseStreamReaderFactory readerFactory);
    private static PhantomTestExecutionProvider();
    public sealed virtual bool CanHandleBrowser(Engine engine);
    public sealed virtual IList`1<TestFileSummary> Execute(TestOptions testOptions, TestContext testContext, TestExecutionMode testExecutionMode, ITestMethodRunnerCallback callback);
    private static void HandleTestProcessExitCode(TestContext context, int exitCode, string inputTestFile, IList`1<TestError> errors, ITestMethodRunnerCallback callback);
    private static string BuildRunnerArgs(TestOptions options, TestContext context, string fileUrl, string runnerPath, TestExecutionMode testExecutionMode);
    private string BuildHarnessUrl(TestContext testContext);
    public sealed virtual void SetupEnvironment(TestOptions testOptions, TestContext testContext);
}
public class Chutzpah.ProcessHelper : object {
    private IUrlBuilder urlBuilder;
    public ProcessHelper(IUrlBuilder urlBuilder);
    public sealed virtual ProcessResult`1<TestCaseStreamReadResult> RunExecutableAndProcessOutput(string exePath, string arguments, Func`2<ProcessStreamStringSource, TestCaseStreamReadResult> streamProcessor, int streamTimeout, IDictionary`2<string, string> environmentVars);
    public sealed virtual bool RunExecutableAndProcessOutput(string exePath, string arguments, IDictionary`2<string, string> environmentVars, String& standardOutput, String& standardError);
    private static Process InvokeProcess(string exePath, string arguments, IDictionary`2<string, string> environmentVars);
    public sealed virtual BatchCompileResult RunBatchCompileProcess(BatchCompileConfiguration compileConfiguration);
    public sealed virtual void LaunchFileInBrowser(TestContext testContext, string file, string browserName, IDictionary`2<string, string> browserArgs);
    public sealed virtual void LaunchLocalFileInBrowser(string file);
    public sealed virtual bool IsRunningElevated();
    private void OpenBrowser(string file, string browserName, IDictionary`2<string, string> browserArgs);
    private static string GetArguments(string browser, string file, IDictionary`2<string, string> browserArgs);
}
public class Chutzpah.ReferencePathSettings : object {
    [CompilerGeneratedAttribute]
private bool <ExpandReferenceComments>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<string> <Includes>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<string> <Excludes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeInTestHarness>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsTestFrameworkFile>k__BackingField;
    [CompilerGeneratedAttribute]
private TemplateOptions <TemplateOptions>k__BackingField;
    public bool ExpandReferenceComments { get; public set; }
    public ICollection`1<string> Includes { get; public set; }
    public ICollection`1<string> Excludes { get; public set; }
    public bool IncludeInTestHarness { get; public set; }
    public bool IsTestFrameworkFile { get; public set; }
    public TemplateOptions TemplateOptions { get; public set; }
    public ReferencePathSettings(SettingsFileReference settingsFileReference);
    [CompilerGeneratedAttribute]
public bool get_ExpandReferenceComments();
    [CompilerGeneratedAttribute]
public void set_ExpandReferenceComments(bool value);
    [CompilerGeneratedAttribute]
public ICollection`1<string> get_Includes();
    [CompilerGeneratedAttribute]
public void set_Includes(ICollection`1<string> value);
    [CompilerGeneratedAttribute]
public ICollection`1<string> get_Excludes();
    [CompilerGeneratedAttribute]
public void set_Excludes(ICollection`1<string> value);
    [CompilerGeneratedAttribute]
public bool get_IncludeInTestHarness();
    [CompilerGeneratedAttribute]
public void set_IncludeInTestHarness(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsTestFrameworkFile();
    [CompilerGeneratedAttribute]
public void set_IsTestFrameworkFile(bool value);
    [CompilerGeneratedAttribute]
public TemplateOptions get_TemplateOptions();
    [CompilerGeneratedAttribute]
public void set_TemplateOptions(TemplateOptions value);
}
public class Chutzpah.ReferenceProcessor : object {
    private IFileSystemWrapper fileSystem;
    private IFileProbe fileProbe;
    private IUrlBuilder urlBuilder;
    public ReferenceProcessor(IFileSystemWrapper fileSystem, IFileProbe fileProbe, IUrlBuilder urlBuilder);
    public sealed virtual void GetReferencedFiles(List`1<ReferencedFile> referencedFiles, IFrameworkDefinition definition, ChutzpahTestSettingsFile chutzpahTestSettings);
    public sealed virtual void SetupPathsFormattedForTestHarness(TestContext testContext, List`1<ReferencedFile> referencedFiles);
    public sealed virtual void SetupAmdFilePaths(List`1<ReferencedFile> referencedFiles, string testHarnessDirectory, ChutzpahTestSettingsFile testSettings);
    private static string GetAmdPath(string filePath, string amdAppRoot);
    private static string NormalizeAmdModulePath(string path);
    private void SetupLegacyAmdFilePaths(List`1<ReferencedFile> referencedFiles, string testHarnessDirectory, ChutzpahTestSettingsFile testSettings);
    private static string GetLegacyAmdPath(string testHarnessDirectory, string filePath, string relativeAmdRootPath);
    private IList`1<ReferencedFile> GetReferencedFiles(HashSet`1<string> discoveredPaths, IFrameworkDefinition definition, string textToParse, string currentFilePath, ChutzpahTestSettingsFile chutzpahTestSettings);
    private void ProcessFilePathAsReference(HashSet`1<string> discoveredPaths, IFrameworkDefinition definition, string relativeProcessingPath, ChutzpahTestSettingsFile chutzpahTestSettings, string referencePath, List`1<ReferencedFile> referencedFiles, ReferencePathSettings pathSettings);
    private static string AdjustPathIfRooted(ChutzpahTestSettingsFile chutzpahTestSettings, string referencePath);
    private ReferencedFile VisitReferencedFile(string absoluteFilePath, IFrameworkDefinition definition, HashSet`1<string> discoveredPaths, ICollection`1<ReferencedFile> referencedFiles, ChutzpahTestSettingsFile chutzpahTestSettings, ReferencePathSettings pathSettings);
    private IList`1<ReferencedFile> ExpandNestedReferences(HashSet`1<string> discoveredPaths, IFrameworkDefinition definition, string currentFilePath, ChutzpahTestSettingsFile chutzpahTestSettings);
    private static IEnumerable`1<ReferencedFile> FlattenReferenceGraph(ReferencedFile rootFile);
    private static bool ShouldIncludeReference(Match match);
}
public static class Chutzpah.RegexPatterns : object {
    public static Regex JsReferencePathRegex;
    public static Regex JsTemplatePathRegex;
    public static Regex QUnitTestRegexJavaScript;
    public static Regex QUnitTestRegexCoffeeScript;
    public static Regex JasmineTestAndModuleRegex;
    public static Regex JasmineTestRegexJavaScript;
    public static Regex JasmineTestRegexCoffeeScript;
    public static Regex SchemePrefixRegex;
    public static Regex InvalidPrefixedLocalFilePath;
    public static Regex IgnoreQueryPartFromUri;
    public static Regex IsJasmineFileName;
    public static Regex IsQUnitFileName;
    public static Regex IsRequireJsFileName;
    public static Regex MochaBddTestRegexCoffeeScript;
    public static Regex MochaBddTestRegexJavaScript;
    public static Regex MochaTddOrQunitTestRegexCoffeeScript;
    public static Regex MochaTddOrQunitTestRegexJavaScript;
    public static Regex MochaTddSuiteRegexCoffeeScript;
    public static Regex MochaTddSuiteRegexJavaScript;
    public static Regex MochaExportsTestRegexCoffeeScript;
    public static Regex MochaExportsTestRegexJavaScript;
    private static RegexPatterns();
}
public abstract class Chutzpah.RunnerCallback : object {
    public static ITestMethodRunnerCallback Empty;
    private static RunnerCallback();
    public virtual void TestContextStarted(TestContext context);
    public virtual void TestContextFinished(TestContext context);
    public virtual void TestSuiteStarted(TestContext context);
    public virtual void TestSuiteFinished(TestContext context, TestCaseSummary testResultsSummary);
    public virtual void FileStarted(TestContext context);
    public virtual void FileFinished(TestContext context, TestFileSummary testResultsSummary);
    public virtual void ExceptionThrown(Exception exception, string fileName);
    public virtual void FileError(TestContext context, TestError error);
    public virtual void FileLog(TestContext context, TestLog log);
    public virtual void TestStarted(TestContext context, TestCase testCase);
    public virtual void TestFinished(TestContext context, TestCase testCase);
    protected virtual void TestComplete(TestContext context, TestCase testCase);
    protected virtual void TestFailed(TestContext context, TestCase testCase);
    protected virtual void TestPassed(TestContext context, TestCase testCase);
    protected virtual void TestSkipped(TestContext context, TestCase testCase);
    protected virtual string GetCodeCoverageMessage(CoverageData coverageData);
    protected virtual string GetFileLogMessage(TestLog log);
    protected virtual string GetExceptionThrownMessage(Exception exception, string fileName);
    public static string FormatFileErrorMessage(TestError error);
    protected virtual string GetFileErrorMessage(TestError error);
    protected virtual string GetTestFailureMessage(TestCase testCase);
    protected virtual string GetTestFailureLocationString(TestCase testCase);
}
public class Chutzpah.Script : TestHarnessItem {
    public Script(ReferencedFile referencedFile);
    public Script(string scriptCode);
}
public class Chutzpah.Server.ChutzpahServerFileProvider : object {
    private PhysicalFileProvider fileProvider;
    private string builtInDependencyFolder;
    public ChutzpahServerFileProvider(string root, string builtInDependencyFolder);
    public sealed virtual IDirectoryContents GetDirectoryContents(string subpath);
    public sealed virtual IFileInfo GetFileInfo(string subpath);
    public sealed virtual IChangeToken Watch(string filter);
}
public class Chutzpah.Server.ChutzpahWebServerFactory : object {
    private IFileProbe fileProbe;
    public ChutzpahWebServerFactory(IFileProbe fileProbe);
    public sealed virtual IChutzpahWebServerHost CreateServer(ChutzpahWebServerConfiguration configuration, IChutzpahWebServerHost activeWebServerHost);
    private void AddFileCacheHeaders(StaticFileResponseContext context);
    private ChutzpahWebServerHost BuildHost(string rootPath, int defaultPort, string builtInDependencyFolder);
    public static int FindFreePort(int initialPort);
}
public interface Chutzpah.Server.IChutzpahWebServerFactory {
    public abstract virtual IChutzpahWebServerHost CreateServer(ChutzpahWebServerConfiguration configuration, IChutzpahWebServerHost activeWebServerHost);
}
public class Chutzpah.Server.Models.ChutzpahWebServerHost : object {
    [CompilerGeneratedAttribute]
private IWebHost <WebHost>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RootPath>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Port>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsRunning>k__BackingField;
    public IWebHost WebHost { get; public set; }
    public string RootPath { get; public set; }
    public int Port { get; public set; }
    public bool IsRunning { get; public set; }
    private ChutzpahWebServerHost(IWebHost webHost, string rootPath, int port);
    public static ChutzpahWebServerHost Create(IWebHost webHost, string rootPath, int port);
    [CompilerGeneratedAttribute]
public IWebHost get_WebHost();
    [CompilerGeneratedAttribute]
public void set_WebHost(IWebHost value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_RootPath();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RootPath(string value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Port();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Port(int value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsRunning();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsRunning(bool value);
    public sealed virtual void Dispose();
    public virtual string ToString();
}
public interface Chutzpah.Server.Models.IChutzpahWebServerHost {
    public string RootPath { get; public set; }
    public int Port { get; public set; }
    public bool IsRunning { get; public set; }
    public abstract virtual string get_RootPath();
    public abstract virtual void set_RootPath(string value);
    public abstract virtual int get_Port();
    public abstract virtual void set_Port(int value);
    public abstract virtual bool get_IsRunning();
    public abstract virtual void set_IsRunning(bool value);
}
public class Chutzpah.ShortcutIcon : TestHarnessItem {
    public ShortcutIcon(ReferencedFile referencedFile);
}
public class Chutzpah.TestCaseStreamReaderFactory : object {
    public sealed virtual ITestCaseStreamReader Create();
}
public class Chutzpah.TestCaseStreamReadResult : object {
    [CompilerGeneratedAttribute]
private IList`1<TestFileSummary> <TestFileSummaries>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TimedOut>k__BackingField;
    public IList`1<TestFileSummary> TestFileSummaries { get; public set; }
    public bool TimedOut { get; public set; }
    [CompilerGeneratedAttribute]
public IList`1<TestFileSummary> get_TestFileSummaries();
    [CompilerGeneratedAttribute]
public void set_TestFileSummaries(IList`1<TestFileSummary> value);
    [CompilerGeneratedAttribute]
public bool get_TimedOut();
    [CompilerGeneratedAttribute]
public void set_TimedOut(bool value);
}
public class Chutzpah.TestCaseStreamStringReader : object {
    private IJsonSerializer jsonSerializer;
    private Regex prefixRegex;
    private static string internalLogPrefix;
    private int testIndex;
    private StreamingTestFileContext currentTestFileContext;
    public sealed virtual TestCaseStreamReadResult Read(TestCaseSource`1<string> testCaseSource, TestOptions testOptions, TestContext testContext, ITestMethodRunnerCallback callback);
    private void FireTestFinished(TestContext testContext, ITestMethodRunnerCallback callback, StreamingTestFileContext testFileContext, JsRunnerOutput jsRunnerOutput, int testIndex);
    private void FireFileStarted(TestContext testContext, ITestMethodRunnerCallback callback);
    private void FireCoverageObject(ITestMethodRunnerCallback callback, StreamingTestFileContext testFileContext, JsRunnerOutput jsRunnerOutput);
    private void FireFileFinished(TestContext testContext, ITestMethodRunnerCallback callback, IEnumerable`1<StreamingTestFileContext> testFileContexts, JsRunnerOutput jsRunnerOutput);
    private void FireLogOutput(TestContext testContext, ITestMethodRunnerCallback callback, StreamingTestFileContext testFileContext, JsRunnerOutput jsRunnerOutput);
    private void FireErrorOutput(TestContext testContext, ITestMethodRunnerCallback callback, StreamingTestFileContext testFileContext, JsRunnerOutput jsRunnerOutput);
    private bool ProcessLine(string line, TestContext testContext, IList`1<StreamingTestFileContext> streamingTestFileContexts, IList`1<Action`1<StreamingTestFileContext>> deferredEvents, ITestMethodRunnerCallback callback, bool debugEnabled);
    private static void AddDeferredEvent(Action`1<StreamingTestFileContext> deferredEvent, IList`1<Action`1<StreamingTestFileContext>> deferredEvents);
    private static void PlayDeferredEvents(StreamingTestFileContext currentTestFileContext, IList`1<Action`1<StreamingTestFileContext>> deferredEvents);
    private static IList`1<StreamingTestFileContext> GetFileMatches(string testName, IEnumerable`1<StreamingTestFileContext> testFileContexts);
    private static void AddLineNumber(ReferencedFile referencedFile, int testIndex, JsTestCase jsTestCase);
}
public class Chutzpah.TestContextBuilder : object {
    private IFileProbe fileProbe;
    private IReferenceProcessor referenceProcessor;
    private IHttpWrapper httpClient;
    private IFileSystemWrapper fileSystem;
    private IEnumerable`1<IFrameworkDefinition> frameworkDefinitions;
    private IChutzpahTestSettingsService settingsService;
    private ICoverageEngineFactory coverageEngineFactory;
    public TestContextBuilder(IFileSystemWrapper fileSystem, IReferenceProcessor referenceProcessor, IHttpWrapper httpWrapper, IFileProbe fileProbe, ICoverageEngineFactory coverageEngineFactory, IFrameworkDefinition[] frameworkDefinitions, IChutzpahTestSettingsService settingsService);
    public sealed virtual TestContext BuildContext(string file, TestOptions options);
    public sealed virtual TestContext BuildContext(PathInfo file, TestOptions options);
    public sealed virtual bool TryBuildContext(string file, TestOptions options, TestContext& context);
    public sealed virtual bool TryBuildContext(PathInfo file, TestOptions options, TestContext& context);
    public sealed virtual TestContext BuildContext(IEnumerable`1<PathInfo> files, TestOptions options);
    public sealed virtual TestContext BuildContext(IEnumerable`1<string> files, TestOptions options);
    public sealed virtual bool TryBuildContext(IEnumerable`1<PathInfo> files, TestOptions options, TestContext& context);
    public sealed virtual bool TryBuildContext(IEnumerable`1<string> files, TestOptions options, TestContext& context);
    public sealed virtual bool IsTestFile(string file, ChutzpahSettingsFileEnvironments environments);
    public sealed virtual void CleanupContext(TestContext context);
    private bool IsTestPathIncluded(string testFilePath, ChutzpahTestSettingsFile chutzpahTestSettings);
    private bool IsTestPathIncluded(string testFilePath, ChutzpahTestSettingsFile chutzpahTestSettings, SettingsFileTestPath& matchingTestPath);
    private void AddTestFrameworkDependencies(IEnumerable`1<string> deps, List`1<ReferencedFile> referencedFiles);
    private ICoverageEngine SetupCodeCoverageEngine(TestOptions options, ChutzpahTestSettingsFile chutzpahTestSettings, IFrameworkDefinition definition, List`1<ReferencedFile> referencedFiles);
    private static bool IsValidTestPathType(PathType testFileKind);
    private ICoverageEngine GetConfiguredCoverageEngine(TestOptions options, ChutzpahTestSettingsFile chutzpahTestSettings);
    private IEnumerable`1<ReferencedFile> GetFilesUnderTest(IEnumerable`1<PathWithTestSetting> testFiles, ChutzpahTestSettingsFile chutzpahTestSettings);
    private bool TryDetectFramework(PathInfo path, ChutzpahTestSettingsFile chutzpahTestSettings, IFrameworkDefinition& definition);
    private static string GetTestHarnessDirectory(ChutzpahTestSettingsFile chutzpahTestSettings, string inputTestFileDir);
}
public class Chutzpah.TestHarness : object {
    private TestContext testContext;
    private ChutzpahTestSettingsFile chutzpahTestSettings;
    private TestOptions testOptions;
    private IEnumerable`1<ReferencedFile> referencedFiles;
    private IFileSystemWrapper fileSystem;
    private IUrlBuilder urlBuilder;
    [CompilerGeneratedAttribute]
private IList`1<TestHarnessItem> <CodeCoverageDependencies>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<TestHarnessItem> <TestFrameworkDependencies>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<TestHarnessItem> <ReferencedHtmlTemplates>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<TestHarnessItem> <ReferencedScripts>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<TestHarnessItem> <ReferencedStyles>k__BackingField;
    public IList`1<TestHarnessItem> CodeCoverageDependencies { get; private set; }
    public IList`1<TestHarnessItem> TestFrameworkDependencies { get; private set; }
    public IList`1<TestHarnessItem> ReferencedHtmlTemplates { get; private set; }
    public IList`1<TestHarnessItem> ReferencedScripts { get; private set; }
    public IList`1<TestHarnessItem> ReferencedStyles { get; private set; }
    public TestHarness(TestContext testContext, TestOptions testOptions, IEnumerable`1<ReferencedFile> referencedFiles, IFileSystemWrapper fileSystem, IUrlBuilder urlBuilder);
    [CompilerGeneratedAttribute]
public IList`1<TestHarnessItem> get_CodeCoverageDependencies();
    [CompilerGeneratedAttribute]
private void set_CodeCoverageDependencies(IList`1<TestHarnessItem> value);
    [CompilerGeneratedAttribute]
public IList`1<TestHarnessItem> get_TestFrameworkDependencies();
    [CompilerGeneratedAttribute]
private void set_TestFrameworkDependencies(IList`1<TestHarnessItem> value);
    [CompilerGeneratedAttribute]
public IList`1<TestHarnessItem> get_ReferencedHtmlTemplates();
    [CompilerGeneratedAttribute]
private void set_ReferencedHtmlTemplates(IList`1<TestHarnessItem> value);
    [CompilerGeneratedAttribute]
public IList`1<TestHarnessItem> get_ReferencedScripts();
    [CompilerGeneratedAttribute]
private void set_ReferencedScripts(IList`1<TestHarnessItem> value);
    [CompilerGeneratedAttribute]
public IList`1<TestHarnessItem> get_ReferencedStyles();
    [CompilerGeneratedAttribute]
private void set_ReferencedStyles(IList`1<TestHarnessItem> value);
    public string CreateHtmlText(string testHtmlTemplate, Dictionary`2<string, string> frameworkReplacements);
    private string BuildModuleMapForGeneratedFiles();
    private string BuildAmdTestFileArrayString();
    private void BuildTags(IEnumerable`1<ReferencedFile> referencedFilePaths);
    private IList`1<TestHarnessItem> ChooseRefList(ReferencedFile referencedFile, string referencePath);
    private void BuildReferenceHtml(StringBuilder testFrameworkDependencies, StringBuilder referenceCssReplacement, StringBuilder testJsReplacement, StringBuilder referenceJsReplacement, StringBuilder referenceHtmlTemplateReplacement, StringBuilder codeCoverageDependencies);
    private void CleanupTestHarness();
}
public class Chutzpah.TestHarnessBuilder : object {
    private IFileProbe fileProbe;
    private IReferenceProcessor referenceProcessor;
    private IFileSystemWrapper fileSystem;
    private IHasher hasher;
    private IUrlBuilder urlBuilder;
    public TestHarnessBuilder(IReferenceProcessor referenceProcessor, IFileSystemWrapper fileSystem, IFileProbe fileProbe, IHasher hasher, IUrlBuilder urlBuilder);
    public sealed virtual void CreateTestHarness(TestContext testContext, TestOptions options);
    private void SetupAmdPathsIfNeeded(ChutzpahTestSettingsFile chutzpahTestSettings, List`1<ReferencedFile> referencedFiles, string testHarnessDirectory);
    private string GetTestHarnessTemplatePath(IFrameworkDefinition definition, ChutzpahTestSettingsFile chutzpahTestSettings);
}
public class Chutzpah.TestHarnessItem : object {
    private bool explicitEndTag;
    private string contents;
    private string tagName;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <Attributes>k__BackingField;
    [CompilerGeneratedAttribute]
private ReferencedFile <ReferencedFile>k__BackingField;
    public IDictionary`2<string, string> Attributes { get; private set; }
    public ReferencedFile ReferencedFile { get; private set; }
    public bool HasFile { get; }
    internal TestHarnessItem(ReferencedFile referencedFile, string tagName, bool explicitEndTag);
    internal TestHarnessItem(string contents, string tagName, bool explicitEndTag);
    private TestHarnessItem(string tagName, bool explicitEndTag);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_Attributes();
    [CompilerGeneratedAttribute]
private void set_Attributes(IDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public ReferencedFile get_ReferencedFile();
    [CompilerGeneratedAttribute]
private void set_ReferencedFile(ReferencedFile value);
    public bool get_HasFile();
    public virtual string ToString();
}
public class Chutzpah.TestOptions : object {
    private int testFileTimeoutMilliseconds;
    private int maxDegreeOfParallelism;
    [CompilerGeneratedAttribute]
private TestLaunchMode <TestLaunchMode>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Engine> <Engine>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OpenInBrowserName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OpenInBrowserArgs>k__BackingField;
    [CompilerGeneratedAttribute]
private ITestLauncher <CustomTestLauncher>k__BackingField;
    [CompilerGeneratedAttribute]
private TestExecutionMode <TestExecutionMode>k__BackingField;
    [CompilerGeneratedAttribute]
private int <FileSearchLimit>k__BackingField;
    [CompilerGeneratedAttribute]
private CoverageOptions <CoverageOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private ChutzpahSettingsFileEnvironments <ChutzpahSettingsFileEnvironments>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Proxy>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DebugEnabled>k__BackingField;
    public TestLaunchMode TestLaunchMode { get; public set; }
    public Nullable`1<Engine> Engine { get; public set; }
    public string OpenInBrowserName { get; public set; }
    public string OpenInBrowserArgs { get; public set; }
    public ITestLauncher CustomTestLauncher { get; public set; }
    public Nullable`1<int> TestFileTimeoutMilliseconds { get; public set; }
    public TestExecutionMode TestExecutionMode { get; public set; }
    public int FileSearchLimit { get; public set; }
    public int MaxDegreeOfParallelism { get; public set; }
    public CoverageOptions CoverageOptions { get; public set; }
    public ChutzpahSettingsFileEnvironments ChutzpahSettingsFileEnvironments { get; public set; }
    public string Proxy { get; public set; }
    public bool DebugEnabled { get; internal set; }
    [CompilerGeneratedAttribute]
public TestLaunchMode get_TestLaunchMode();
    [CompilerGeneratedAttribute]
public void set_TestLaunchMode(TestLaunchMode value);
    [CompilerGeneratedAttribute]
public Nullable`1<Engine> get_Engine();
    [CompilerGeneratedAttribute]
public void set_Engine(Nullable`1<Engine> value);
    [CompilerGeneratedAttribute]
public string get_OpenInBrowserName();
    [CompilerGeneratedAttribute]
public void set_OpenInBrowserName(string value);
    [CompilerGeneratedAttribute]
public string get_OpenInBrowserArgs();
    [CompilerGeneratedAttribute]
public void set_OpenInBrowserArgs(string value);
    [CompilerGeneratedAttribute]
public ITestLauncher get_CustomTestLauncher();
    [CompilerGeneratedAttribute]
public void set_CustomTestLauncher(ITestLauncher value);
    public Nullable`1<int> get_TestFileTimeoutMilliseconds();
    public void set_TestFileTimeoutMilliseconds(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public TestExecutionMode get_TestExecutionMode();
    [CompilerGeneratedAttribute]
public void set_TestExecutionMode(TestExecutionMode value);
    [CompilerGeneratedAttribute]
public int get_FileSearchLimit();
    [CompilerGeneratedAttribute]
public void set_FileSearchLimit(int value);
    public int get_MaxDegreeOfParallelism();
    public void set_MaxDegreeOfParallelism(int value);
    private int GetDegreeOfParallelism(int value);
    [CompilerGeneratedAttribute]
public CoverageOptions get_CoverageOptions();
    [CompilerGeneratedAttribute]
public void set_CoverageOptions(CoverageOptions value);
    [CompilerGeneratedAttribute]
public ChutzpahSettingsFileEnvironments get_ChutzpahSettingsFileEnvironments();
    [CompilerGeneratedAttribute]
public void set_ChutzpahSettingsFileEnvironments(ChutzpahSettingsFileEnvironments value);
    [CompilerGeneratedAttribute]
public string get_Proxy();
    [CompilerGeneratedAttribute]
public void set_Proxy(string value);
    [CompilerGeneratedAttribute]
public bool get_DebugEnabled();
    [CompilerGeneratedAttribute]
internal void set_DebugEnabled(bool value);
}
public class Chutzpah.TestRunner : object {
    public static string TestRunnerJsName;
    private Stopwatch stopWatch;
    private IProcessHelper process;
    private ITestCaseStreamReaderFactory testCaseStreamReaderFactory;
    private IFileProbe fileProbe;
    private IBatchCompilerService batchCompilerService;
    private ITestHarnessBuilder testHarnessBuilder;
    private ITestContextBuilder testContextBuilder;
    private IChutzpahTestSettingsService testSettingsService;
    private ITransformProcessor transformProcessor;
    private IUrlBuilder urlBuilder;
    private IChutzpahWebServerFactory webServerFactory;
    private bool m_debugEnabled;
    private IChutzpahWebServerHost m_activeWebServerHost;
    private IList`1<ITestExecutionProvider> testExecutionProviders;
    public IChutzpahWebServerHost ActiveWebServerHost { get; public set; }
    public TestRunner(IProcessHelper process, ITestCaseStreamReaderFactory testCaseStreamReaderFactory, IFileProbe fileProbe, IBatchCompilerService batchCompilerService, ITestHarnessBuilder testHarnessBuilder, ITestContextBuilder htmlTestFileCreator, IChutzpahTestSettingsService testSettingsService, ITransformProcessor transformProcessor, IChutzpahWebServerFactory webServerFactory, IUrlBuilder urlBuilder, ITestExecutionProvider[] testExecutionProviders);
    private static TestRunner();
    public static ITestRunner Create(bool debugEnabled);
    public sealed virtual IChutzpahWebServerHost get_ActiveWebServerHost();
    public sealed virtual void set_ActiveWebServerHost(IChutzpahWebServerHost value);
    public sealed virtual void EnableDebugMode();
    public sealed virtual void CleanTestContext(TestContext context);
    public sealed virtual TestContext GetTestContext(string testFile, TestOptions options);
    public sealed virtual TestContext GetTestContext(string testFile);
    public sealed virtual bool IsTestFile(string testFile, ChutzpahSettingsFileEnvironments environments);
    public sealed virtual IEnumerable`1<TestCase> DiscoverTests(string testPath);
    public sealed virtual IEnumerable`1<TestCase> DiscoverTests(IEnumerable`1<string> testPaths);
    public sealed virtual IEnumerable`1<TestCase> DiscoverTests(IEnumerable`1<string> testPaths, TestOptions options);
    public sealed virtual IEnumerable`1<TestCase> DiscoverTests(IEnumerable`1<string> testPaths, TestOptions options, IList`1& errors);
    public sealed virtual IEnumerable`1<TestCase> DiscoverTests(IEnumerable`1<string> testPaths, TestOptions options, ITestMethodRunnerCallback callback);
    public sealed virtual TestCaseSummary RunTests(string testPath, ITestMethodRunnerCallback callback);
    public sealed virtual TestCaseSummary RunTests(string testPath, TestOptions options, ITestMethodRunnerCallback callback);
    public sealed virtual TestCaseSummary RunTests(IEnumerable`1<string> testPaths, ITestMethodRunnerCallback callback);
    public sealed virtual TestCaseSummary RunTests(IEnumerable`1<string> testPaths, TestOptions options, ITestMethodRunnerCallback callback, TestContext testContext);
    private TestCaseSummary ProcessTestPaths(IEnumerable`1<string> testPaths, TestOptions options, TestExecutionMode testExecutionMode, ITestMethodRunnerCallback callback, IChutzpahWebServerHost activeWebServerHost);
    private IChutzpahWebServerHost SetupWebServerHost(ConcurrentBag`1<TestContext> testContexts, TestOptions options);
    private void ConfigureTracing(TestRunConfiguration testRunConfiguration);
    private TestRunConfiguration BuildTestRunConfiguration(IEnumerable`1<PathInfo> scriptPaths, TestOptions testOptions);
    private bool PerformBatchCompile(ITestMethodRunnerCallback callback, IEnumerable`1<TestContext> testContexts);
    private void ExecuteTestContexts(TestOptions options, TestExecutionMode testExecutionMode, ITestMethodRunnerCallback callback, ConcurrentBag`1<TestContext> testContexts, ParallelOptions parallelOptions, ConcurrentQueue`1<TestFileSummary> testFileSummaries, TestCaseSummary overallSummary, IChutzpahWebServerHost webServerHost);
    private void BuildTestContexts(TestOptions options, List`1<List`1<PathInfo>> scriptPathGroups, ParallelOptions parallelOptions, CancellationTokenSource cancellationSource, int resultCount, ConcurrentBag`1<TestContext> testContexts, ITestMethodRunnerCallback callback, TestCaseSummary overallSummary);
    private IEnumerable`1<PathInfo> FindTestFiles(IEnumerable`1<string> testPaths, TestOptions options);
    private IList`1<TestFileSummary> InvokeTestRunner(TestOptions options, TestContext testContext, TestExecutionMode testExecutionMode, ITestMethodRunnerCallback callback);
}
public class Chutzpah.Transformers.CoverageHtmlTransformer : SummaryTransformer {
    public string Name { get; }
    public string Description { get; }
    public CoverageHtmlTransformer(IFileSystemWrapper fileSystem);
    public virtual string get_Name();
    public virtual string get_Description();
    public virtual void Transform(TestCaseSummary testFileSummary, string outFile);
    public virtual string Transform(TestCaseSummary testFileSummary);
}
public class Chutzpah.Transformers.CoverageJsonTransformer : SummaryTransformer {
    public string Name { get; }
    public string Description { get; }
    public CoverageJsonTransformer(IFileSystemWrapper fileSystem);
    public virtual string get_Name();
    public virtual string get_Description();
    public virtual void Transform(TestCaseSummary testFileSummary, string outFile);
    public virtual string Transform(TestCaseSummary testFileSummary);
}
public class Chutzpah.Transformers.EmmaXmlTransformer : SummaryTransformer {
    [CompilerGeneratedAttribute]
private int <TotalSourceFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TotalSourceLines>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TotalSourceLinesCovered>k__BackingField;
    private int TotalSourceFiles { get; private set; }
    private int TotalSourceLines { get; private set; }
    private int TotalSourceLinesCovered { get; private set; }
    public string Name { get; }
    public string Description { get; }
    public EmmaXmlTransformer(IFileSystemWrapper fileSystem);
    [CompilerGeneratedAttribute]
private int get_TotalSourceFiles();
    [CompilerGeneratedAttribute]
private void set_TotalSourceFiles(int value);
    [CompilerGeneratedAttribute]
private int get_TotalSourceLines();
    [CompilerGeneratedAttribute]
private void set_TotalSourceLines(int value);
    [CompilerGeneratedAttribute]
private int get_TotalSourceLinesCovered();
    [CompilerGeneratedAttribute]
private void set_TotalSourceLinesCovered(int value);
    public virtual string get_Name();
    public virtual string get_Description();
    public virtual string Transform(TestCaseSummary testFileSummary);
    private void AppendOverallStats(StringBuilder builder, CoverageData coverage);
    private void AppendCoverageBySourceFile(StringBuilder builder, CoverageData coverage);
    private void AppendCoverageForOneSourceFile(StringBuilder builder, string fileName, CoverageFileData fileData);
    private void GetOverallStats(CoverageData coverage);
    private void AppendLineCoverageForSourceFile(StringBuilder builder, int statementsCovered, int totalStatements);
    private void AppendOverallCoverage(StringBuilder builder);
    private static double FormatPercentage(int number, int total);
}
public interface Chutzpah.Transformers.ISummaryTransformerProvider {
    public abstract virtual IEnumerable`1<SummaryTransformer> GetTransformers(IFileSystemWrapper fileSystem);
}
public interface Chutzpah.Transformers.ITransformProcessor {
    public abstract virtual TransformResult ProcessTransforms(IEnumerable`1<TestContext> testContexts, TestCaseSummary overallSummary);
}
public class Chutzpah.Transformers.JacocoTransformer : SummaryTransformer {
    [CompilerGeneratedAttribute]
private int <TotalSourceFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TotalSourceLines>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TotalSourceLinesCovered>k__BackingField;
    private int TotalSourceFiles { get; private set; }
    private int TotalSourceLines { get; private set; }
    private int TotalSourceLinesCovered { get; private set; }
    public string Name { get; }
    public string Description { get; }
    public JacocoTransformer(IFileSystemWrapper fileSystem);
    [CompilerGeneratedAttribute]
private int get_TotalSourceFiles();
    [CompilerGeneratedAttribute]
private void set_TotalSourceFiles(int value);
    [CompilerGeneratedAttribute]
private int get_TotalSourceLines();
    [CompilerGeneratedAttribute]
private void set_TotalSourceLines(int value);
    [CompilerGeneratedAttribute]
private int get_TotalSourceLinesCovered();
    [CompilerGeneratedAttribute]
private void set_TotalSourceLinesCovered(int value);
    public virtual string get_Name();
    public virtual string get_Description();
    public virtual string Transform(TestCaseSummary testFileSummary);
    private void AppendCoverageBySourceFile(StringBuilder builder, CoverageData coverage);
    private void AppendCoverageForOneSourceFile(StringBuilder builder, string fileName, CoverageFileData fileData);
    private void GetOverallStats(CoverageData coverage);
    private void AppendLineCoverageForSourceFile(StringBuilder builder, int statementsCovered, int totalStatements);
    private void AppendOverallCoverage(StringBuilder builder);
}
public class Chutzpah.Transformers.JUnitXmlTransformer : SummaryTransformer {
    public string Name { get; }
    public string Description { get; }
    public JUnitXmlTransformer(IFileSystemWrapper fileSystem);
    public virtual string get_Name();
    public virtual string get_Description();
    public virtual string Transform(TestCaseSummary testFileSummary);
    private static string Encode(string str);
}
public class Chutzpah.Transformers.LcovTransformer : SummaryTransformer {
    private static string SOURCE_FILE_LINE_FORMAT;
    private static string LINE_FORMAT;
    private static string FILE_DELIMITER;
    public string Name { get; }
    public string Description { get; }
    public LcovTransformer(IFileSystemWrapper fileSystem);
    public virtual string get_Name();
    public virtual string get_Description();
    public virtual string Transform(TestCaseSummary testFileSummary);
    private void AppendCoverageForFile(StringBuilder builder, CoverageFileData data);
}
public class Chutzpah.Transformers.NUnit2XmlTransformer : SummaryTransformer {
    public string Name { get; }
    public string Description { get; }
    public NUnit2XmlTransformer(IFileSystemWrapper fileSystem);
    public virtual string get_Name();
    public virtual string get_Description();
    private XmlElement AddTestResultsRoot(TestCaseSummary summary, XmlDocument document);
    private void AddFailureToTestCase(TestCase test, XmlElement testCaseElement, XmlDocument document);
    private XmlElement AddTestCase(TestCase test, XmlNode results, XmlDocument document);
    private XmlElement AddTestSuite(XmlDocument document, XmlNode testResults, string name, decimal elapsedSeconds, bool executed, bool successful);
    private string GenerateReportXml(XmlDocument document);
    public virtual string Transform(TestCaseSummary testFileSummary);
    private static string Encode(string str);
}
public abstract class Chutzpah.Transformers.SummaryTransformer : object {
    private static Encoding UTF8NoIdentifier;
    private IFileSystemWrapper fileSystem;
    public Encoding Encoding { get; }
    public string Name { get; }
    public string Description { get; }
    public SummaryTransformer(IFileSystemWrapper fileSystem);
    private static SummaryTransformer();
    public virtual Encoding get_Encoding();
    public abstract virtual string get_Name();
    public abstract virtual string get_Description();
    public abstract virtual string Transform(TestCaseSummary testFileSummary);
    public virtual void Transform(TestCaseSummary testFileSummary, string outFile);
    protected decimal ConvertMillisecondsToSeconds(long millis);
}
public class Chutzpah.Transformers.SummaryTransformerProvider : object {
    public sealed virtual IEnumerable`1<SummaryTransformer> GetTransformers(IFileSystemWrapper fileSystem);
}
public class Chutzpah.Transformers.TransformProcessor : object {
    private ISummaryTransformerProvider transformerProvider;
    private IFileSystemWrapper fileSystem;
    public TransformProcessor(ISummaryTransformerProvider transformerProvider, IFileSystemWrapper fileSystem);
    public sealed virtual TransformResult ProcessTransforms(IEnumerable`1<TestContext> testContexts, TestCaseSummary overallSummary);
    private void ProcessTransforms(ChutzpahTestSettingsFile settings, TestCaseSummary overallSummary, TransformResult results);
}
public class Chutzpah.Transformers.TransformResult : Dictionary`2<string, ISet`1<string>> {
    public void AddResult(string transform, string path);
}
public class Chutzpah.Transformers.TrxXmlTransformer : SummaryTransformer {
    private TestRunType testRun;
    public Encoding Encoding { get; }
    public string Name { get; }
    public string Description { get; }
    public TrxXmlTransformer(IFileSystemWrapper fileSystem);
    public virtual Encoding get_Encoding();
    public virtual string get_Name();
    public virtual string get_Description();
    public virtual string Transform(TestCaseSummary testFileSummary);
}
public class Chutzpah.UrlBuilder : object {
    private IFileProbe fileProbe;
    public UrlBuilder(IFileProbe fileProbe);
    private static string EncodeFilePath(string path);
    public sealed virtual string GenerateFileUrl(TestContext testContext, ReferencedFile referencedFile);
    public sealed virtual string GenerateFileUrl(TestContext testContext, string absolutePath, bool fullyQualified, bool isBuiltInDependency, string fileHash);
    public sealed virtual string GenerateLocalFileUrl(string absolutePath);
    public sealed virtual string GenerateAbsoluteServerUrl(TestContext testContext, ReferencedFile referencedFile);
    public sealed virtual string GenerateServerFileUrl(TestContext testContext, string absolutePath, bool fullyQualified, bool isBuiltInDependency, string fileHash);
    public static string NormalizeFilePath(string path, bool lowerCase);
    public static string NormalizeUrlPath(string path);
    public static string GetRelativePath(string pathToStartFrom, string pathToGetTo, bool unescapeDateString);
}
public class Chutzpah.Utility.BrowserPathHelper : object {
    private static string BrowserIERegPath;
    private static string BrowserChromeRegPath;
    private static string BrowserFirefoxRegPath;
    private static string DefaultBrowserProdIdPath;
    public static string GetBrowserPath(string browserName);
    private static string GetBrowserPathFromRegistry(string browserName);
    private static string GetSystemDefaultBrowser();
    private static bool TryRetrieveRegistryKeyValue(RegistryKey parentKey, string registryKeyPath, string name, String& registryValue);
    private static bool TrimRegistryCommandPath(string commandFilePath, String& trimmedCommandFilePath);
}
public class Chutzpah.Utility.Hasher : object {
    private string versionSalt;
    private ThreadLocal`1<SHA1Managed> sha1;
    public sealed virtual string Hash(string input);
    private string BytesToString(Byte[] arr);
}
public interface Chutzpah.Utility.IHasher {
    public abstract virtual string Hash(string input);
}
[GuidAttribute("00000016-0000-0000-C000-000000000046")]
[InterfaceTypeAttribute("1")]
internal interface Chutzpah.Utility.IMessageFilter {
    public abstract virtual int HandleInComingCall(int dwCallType, IntPtr hTaskCaller, int dwTickCount, IntPtr lpInterfaceInfo);
    public abstract virtual int RetryRejectedCall(IntPtr hTaskCallee, int dwTickCount, int dwRejectType);
    public abstract virtual int MessagePending(IntPtr hTaskCallee, int dwTickCount, int dwPendingType);
}
[ExtensionAttribute]
public static class Chutzpah.Utility.ProcessExtensions : object {
    public static IntPtr OpenProcess(ProcessAccessFlags processAccess, bool bInheritHandle, int processId);
    private static IntPtr OpenThread(ThreadAccess dwDesiredAccess, bool bInheritHandle, UInt32 dwThreadId);
    private static bool CloseHandle(IntPtr hObject);
    private static UInt32 SuspendThread(IntPtr hThread);
    private static int ResumeThread(IntPtr hThread);
    private static int NtQueryInformationProcess(IntPtr hProcess, int processInformationClass, PROCESS_BASIC_INFORMATION& processBasicInformation, UInt32 processInformationLength, UInt32& returnLength);
    [ExtensionAttribute]
public static void Suspend(Process process);
    [ExtensionAttribute]
public static void Resume(Process process);
    public static Process FindFirstChildProcessOf(int subjectProcessId);
    public static Process FindFirstChildProcess(int parentProcessId);
    public static bool IsProcessAAncestorOfProcessB(int processId_A, int processId_B, bool matchSame, int maxHops);
}
public class Chutzpah.Utility.ResilientMessageFilter : object {
    private sealed virtual override int Chutzpah.Utility.IMessageFilter.HandleInComingCall(int dwCallType, IntPtr hTaskCaller, int dwTickCount, IntPtr lpInterfaceInfo);
    private sealed virtual override int Chutzpah.Utility.IMessageFilter.RetryRejectedCall(IntPtr hTaskCallee, int dwTickCount, int dwRejectType);
    private sealed virtual override int Chutzpah.Utility.IMessageFilter.MessagePending(IntPtr hTaskCallee, int dwTickCount, int dwPendingType);
}
public class Chutzpah.Utility.ResilientMessageFilterScope : object {
    private IMessageFilter orgFilter;
    private static int CoRegisterMessageFilter(IMessageFilter newFilter, IMessageFilter& orgFilter);
    public sealed virtual void Dispose();
}
public class Chutzpah.Utility.ValidationHelper : object {
    private static string ValidProxyPattern;
    public static bool IsValidProxySetting(string value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.AddressType : object {
    private string ipAddressField;
    private string ipMaskField;
    private ushort portBeginField;
    private ushort portEndField;
    [XmlElementAttribute]
public string IpAddress { get; public set; }
    [XmlElementAttribute]
public string IpMask { get; public set; }
    public ushort PortBegin { get; public set; }
    public ushort PortEnd { get; public set; }
    public string get_IpAddress();
    public void set_IpAddress(string value);
    public string get_IpMask();
    public void set_IpMask(string value);
    public ushort get_PortBegin();
    public void set_PortBegin(ushort value);
    public ushort get_PortEnd();
    public void set_PortEnd(ushort value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.AgentRuleCollectionType : object {
    private AgentRuleType[] agentRulesField;
    private bool enabledField;
    [XmlArrayItemAttribute("AgentRule")]
public AgentRuleType[] AgentRules { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool enabled { get; public set; }
    public AgentRuleType[] get_AgentRules();
    public void set_AgentRules(AgentRuleType[] value);
    public bool get_enabled();
    public void set_enabled(bool value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.AgentRuleType : object {
    private AgentRuleTypeSelectionCriteria selectionCriteriaField;
    private AgentRuleTypeDataCollector[] dataCollectorsField;
    private string nameField;
    public AgentRuleTypeSelectionCriteria SelectionCriteria { get; public set; }
    [XmlArrayItemAttribute("DataCollector")]
public AgentRuleTypeDataCollector[] DataCollectors { get; public set; }
    [XmlAttributeAttribute]
public string name { get; public set; }
    public AgentRuleTypeSelectionCriteria get_SelectionCriteria();
    public void set_SelectionCriteria(AgentRuleTypeSelectionCriteria value);
    public AgentRuleTypeDataCollector[] get_DataCollectors();
    public void set_DataCollectors(AgentRuleTypeDataCollector[] value);
    public string get_name();
    public void set_name(string value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.AgentRuleTypeDataCollector : object {
    private AgentRuleTypeDataCollectorConfiguration configurationField;
    private string uriField;
    private string friendlyNameField;
    private string assemblyQualifiedNameField;
    private bool enabledField;
    public AgentRuleTypeDataCollectorConfiguration Configuration { get; public set; }
    [XmlAttributeAttribute]
public string uri { get; public set; }
    [XmlAttributeAttribute]
public string friendlyName { get; public set; }
    [XmlAttributeAttribute]
public string assemblyQualifiedName { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool enabled { get; public set; }
    public AgentRuleTypeDataCollectorConfiguration get_Configuration();
    public void set_Configuration(AgentRuleTypeDataCollectorConfiguration value);
    public string get_uri();
    public void set_uri(string value);
    public string get_friendlyName();
    public void set_friendlyName(string value);
    public string get_assemblyQualifiedName();
    public void set_assemblyQualifiedName(string value);
    public bool get_enabled();
    public void set_enabled(bool value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.AgentRuleTypeDataCollectorConfiguration : object {
    private XmlElement[] anyField;
    [XmlAnyElementAttribute]
public XmlElement[] Any { get; public set; }
    public XmlElement[] get_Any();
    public void set_Any(XmlElement[] value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.AgentRuleTypeSelectionCriteria : object {
    private NameValuePropertyType[] agentPropertyField;
    private bool selectAllAgentsField;
    private bool selectAllAgentsFieldSpecified;
    [XmlElementAttribute("AgentProperty")]
public NameValuePropertyType[] AgentProperty { get; public set; }
    [XmlAttributeAttribute]
public bool selectAllAgents { get; public set; }
    [XmlIgnoreAttribute]
public bool selectAllAgentsSpecified { get; public set; }
    public NameValuePropertyType[] get_AgentProperty();
    public void set_AgentProperty(NameValuePropertyType[] value);
    public bool get_selectAllAgents();
    public void set_selectAllAgents(bool value);
    public bool get_selectAllAgentsSpecified();
    public void set_selectAllAgentsSpecified(bool value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute("TestExecution")]
public class Chutzpah.VSTS.AssemblyResolutionSettingsType : object {
    private AssemblyResolutionSettingsTypeAssemblyResolution assemblyResolutionField;
    private string testTypeIdField;
    public AssemblyResolutionSettingsTypeAssemblyResolution AssemblyResolution { get; public set; }
    [XmlAttributeAttribute]
public string testTypeId { get; public set; }
    public AssemblyResolutionSettingsTypeAssemblyResolution get_AssemblyResolution();
    public void set_AssemblyResolution(AssemblyResolutionSettingsTypeAssemblyResolution value);
    public string get_testTypeId();
    public void set_testTypeId(string value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.AssemblyResolutionSettingsTypeAssemblyResolution : object {
    private AssemblyResolutionSettingsTypeAssemblyResolutionTestDirectory testDirectoryField;
    private RuntimeResolutionDirectoryType[] runtimeResolutionField;
    private ResolutionDirectoryType[] discoveryResolutionField;
    private string applicationBaseDirectoryField;
    public AssemblyResolutionSettingsTypeAssemblyResolutionTestDirectory TestDirectory { get; public set; }
    [XmlArrayItemAttribute("Directory")]
public RuntimeResolutionDirectoryType[] RuntimeResolution { get; public set; }
    [XmlArrayItemAttribute("Directory")]
public ResolutionDirectoryType[] DiscoveryResolution { get; public set; }
    [XmlAttributeAttribute]
public string applicationBaseDirectory { get; public set; }
    public AssemblyResolutionSettingsTypeAssemblyResolutionTestDirectory get_TestDirectory();
    public void set_TestDirectory(AssemblyResolutionSettingsTypeAssemblyResolutionTestDirectory value);
    public RuntimeResolutionDirectoryType[] get_RuntimeResolution();
    public void set_RuntimeResolution(RuntimeResolutionDirectoryType[] value);
    public ResolutionDirectoryType[] get_DiscoveryResolution();
    public void set_DiscoveryResolution(ResolutionDirectoryType[] value);
    public string get_applicationBaseDirectory();
    public void set_applicationBaseDirectory(string value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.AssemblyResolutionSettingsTypeAssemblyResolutionTestDirectory : object {
    private bool useLoadContextField;
    [XmlAttributeAttribute]
public bool useLoadContext { get; public set; }
    public bool get_useLoadContext();
    public void set_useLoadContext(bool value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class Chutzpah.VSTS.BackgroundTraffic : object {
    private ConstantTrafficType itemField;
    [XmlElementAttribute("Constant", "Chutzpah.VSTS.ConstantTrafficType")]
[XmlElementAttribute("Exponential", "Chutzpah.VSTS.ExponentialTrafficType")]
[XmlElementAttribute("Pareto", "Chutzpah.VSTS.ParetoTrafficType")]
public ConstantTrafficType Item { get; public set; }
    public ConstantTrafficType get_Item();
    public void set_Item(ConstantTrafficType value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class Chutzpah.VSTS.Bandwidth : object {
    private SpeedType speedField;
    private BandwidthQueueManagement queueManagementField;
    public SpeedType Speed { get; public set; }
    public BandwidthQueueManagement QueueManagement { get; public set; }
    public SpeedType get_Speed();
    public void set_Speed(SpeedType value);
    public BandwidthQueueManagement get_QueueManagement();
    public void set_QueueManagement(BandwidthQueueManagement value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.BandwidthQueueManagement : object {
    private object itemField;
    [XmlElementAttribute("NormalQueue", "Chutzpah.VSTS.NormalQueueType")]
[XmlElementAttribute("RedQueue", "Chutzpah.VSTS.RedQueueType")]
public object Item { get; public set; }
    public object get_Item();
    public void set_Item(object value);
}
[XmlIncludeAttribute("Chutzpah.VSTS.GenericTestType")]
[XmlIncludeAttribute("Chutzpah.VSTS.OrderedTestType")]
[XmlIncludeAttribute("Chutzpah.VSTS.CodedWebTestElementType")]
[XmlIncludeAttribute("Chutzpah.VSTS.DeclarativeWebTestElementType")]
[XmlIncludeAttribute("Chutzpah.VSTS.PlainTextManualTestType")]
[XmlIncludeAttribute("Chutzpah.VSTS.UnitTestType")]
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public abstract class Chutzpah.VSTS.BaseTestType : object {
    private Object[] itemsField;
    private bool enabledField;
    private string idField;
    private string nameField;
    private bool isGroupableField;
    private int priorityField;
    private string namedCategoryField;
    private string storageField;
    [XmlElementAttribute("Agent", "Chutzpah.VSTS.BaseTestTypeAgent")]
[XmlElementAttribute("Css", "Chutzpah.VSTS.BaseTestTypeCss")]
[XmlElementAttribute("DeploymentItems", "Chutzpah.VSTS.BaseTestTypeDeploymentItems")]
[XmlElementAttribute("Description", "System.Object")]
[XmlElementAttribute("Execution", "Chutzpah.VSTS.BaseTestTypeExecution")]
[XmlElementAttribute("Owners", "Chutzpah.VSTS.BaseTestTypeOwners")]
[XmlElementAttribute("Properties", "Chutzpah.VSTS.BaseTestTypeProperties")]
[XmlElementAttribute("TcmInformation", "Chutzpah.VSTS.TcmInformationType")]
[XmlElementAttribute("TestCategory", "Chutzpah.VSTS.BaseTestTypeTestCategory")]
[XmlElementAttribute("WorkItemIDs", "Chutzpah.VSTS.WorkItemIDsType")]
public Object[] Items { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool enabled { get; public set; }
    [XmlAttributeAttribute]
public string id { get; public set; }
    [XmlAttributeAttribute]
public string name { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool isGroupable { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("2147483647")]
public int priority { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("")]
public string namedCategory { get; public set; }
    [XmlAttributeAttribute]
public string storage { get; public set; }
    public Object[] get_Items();
    public void set_Items(Object[] value);
    public bool get_enabled();
    public void set_enabled(bool value);
    public string get_id();
    public void set_id(string value);
    public string get_name();
    public void set_name(string value);
    public bool get_isGroupable();
    public void set_isGroupable(bool value);
    public int get_priority();
    public void set_priority(int value);
    public string get_namedCategory();
    public void set_namedCategory(string value);
    public string get_storage();
    public void set_storage(string value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.BaseTestTypeAgent : object {
    private BaseTestTypeAgentAgentAttribute[] agentAttributeField;
    private bool abortRunOnFailureField;
    [XmlElementAttribute("AgentAttribute")]
public BaseTestTypeAgentAgentAttribute[] AgentAttribute { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool abortRunOnFailure { get; public set; }
    public BaseTestTypeAgentAgentAttribute[] get_AgentAttribute();
    public void set_AgentAttribute(BaseTestTypeAgentAgentAttribute[] value);
    public bool get_abortRunOnFailure();
    public void set_abortRunOnFailure(bool value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.BaseTestTypeAgentAgentAttribute : object {
    private string nameField;
    private string valueField;
    [XmlAttributeAttribute]
public string name { get; public set; }
    [XmlAttributeAttribute]
public string value { get; public set; }
    public string get_name();
    public void set_name(string value);
    public string get_value();
    public void set_value(string value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.BaseTestTypeCss : object {
    private string projectStructureField;
    private string iterationField;
    [XmlAttributeAttribute]
public string projectStructure { get; public set; }
    [XmlAttributeAttribute]
public string iteration { get; public set; }
    public string get_projectStructure();
    public void set_projectStructure(string value);
    public string get_iteration();
    public void set_iteration(string value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.BaseTestTypeDeploymentItems : DeploymentItemsType {
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.BaseTestTypeExecution : object {
    private string idField;
    private string parentIdField;
    private bool isRunOnRestartField;
    private int timeOutField;
    [XmlAttributeAttribute]
[DefaultValueAttribute("00000000-0000-0000-0000-000000000000")]
public string id { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("00000000-0000-0000-0000-000000000000")]
public string parentId { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool isRunOnRestart { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("0")]
public int timeOut { get; public set; }
    public string get_id();
    public void set_id(string value);
    public string get_parentId();
    public void set_parentId(string value);
    public bool get_isRunOnRestart();
    public void set_isRunOnRestart(bool value);
    public int get_timeOut();
    public void set_timeOut(int value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.BaseTestTypeOwners : object {
    private BaseTestTypeOwnersOwner ownerField;
    public BaseTestTypeOwnersOwner Owner { get; public set; }
    public BaseTestTypeOwnersOwner get_Owner();
    public void set_Owner(BaseTestTypeOwnersOwner value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.BaseTestTypeOwnersOwner : object {
    private string nameField;
    [XmlAttributeAttribute]
public string name { get; public set; }
    public string get_name();
    public void set_name(string value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.BaseTestTypeProperties : object {
    private BaseTestTypePropertiesProperty[] propertyField;
    [XmlElementAttribute("Property")]
public BaseTestTypePropertiesProperty[] Property { get; public set; }
    public BaseTestTypePropertiesProperty[] get_Property();
    public void set_Property(BaseTestTypePropertiesProperty[] value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.BaseTestTypePropertiesProperty : object {
    private object keyField;
    private object valueField;
    public object Key { get; public set; }
    public object Value { get; public set; }
    public object get_Key();
    public void set_Key(object value);
    public object get_Value();
    public void set_Value(object value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.BaseTestTypeTestCategory : TestCategoryType {
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.BrowserType : object {
    private HeadersTypeHeader[] headersField;
    private string nameField;
    private int maxConnectionsField;
    private bool maxConnectionsFieldSpecified;
    [XmlArrayItemAttribute("Header")]
public HeadersTypeHeader[] Headers { get; public set; }
    [XmlAttributeAttribute]
public string name { get; public set; }
    [XmlAttributeAttribute]
public int MaxConnections { get; public set; }
    [XmlIgnoreAttribute]
public bool MaxConnectionsSpecified { get; public set; }
    public HeadersTypeHeader[] get_Headers();
    public void set_Headers(HeadersTypeHeader[] value);
    public string get_name();
    public void set_name(string value);
    public int get_MaxConnections();
    public void set_MaxConnections(int value);
    public bool get_MaxConnectionsSpecified();
    public void set_MaxConnectionsSpecified(bool value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.BurstLatencyType : object {
    private MsecType timeField;
    private SecType periodMinField;
    private SecType periodMaxField;
    private decimal probabilityField;
    public MsecType Time { get; public set; }
    public SecType PeriodMin { get; public set; }
    public SecType PeriodMax { get; public set; }
    public decimal Probability { get; public set; }
    public MsecType get_Time();
    public void set_Time(MsecType value);
    public SecType get_PeriodMin();
    public void set_PeriodMin(SecType value);
    public SecType get_PeriodMax();
    public void set_PeriodMax(SecType value);
    public decimal get_Probability();
    public void set_Probability(decimal value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.BurstLossType : object {
    private decimal rateField;
    private string minPacketField;
    private string maxPacketField;
    public decimal Rate { get; public set; }
    [XmlElementAttribute]
public string MinPacket { get; public set; }
    [XmlElementAttribute]
public string MaxPacket { get; public set; }
    public decimal get_Rate();
    public void set_Rate(decimal value);
    public string get_MinPacket();
    public void set_MinPacket(string value);
    public string get_MaxPacket();
    public void set_MaxPacket(string value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.CodedWebTestElementType : BaseTestType {
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.CodedWebTestElementTypeIncludedWebTests : object {
    private CodedWebTestElementTypeIncludedWebTestsIncludedWebTest[] includedWebTestField;
    [XmlElementAttribute("IncludedWebTest")]
public CodedWebTestElementTypeIncludedWebTestsIncludedWebTest[] IncludedWebTest { get; public set; }
    public CodedWebTestElementTypeIncludedWebTestsIncludedWebTest[] get_IncludedWebTest();
    public void set_IncludedWebTest(CodedWebTestElementTypeIncludedWebTestsIncludedWebTest[] value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.CodedWebTestElementTypeIncludedWebTestsIncludedWebTest : object {
    private string nameField;
    private string pathField;
    private string testIdField;
    private bool isCodedWebTestField;
    [XmlAttributeAttribute]
public string name { get; public set; }
    [XmlAttributeAttribute]
public string path { get; public set; }
    [XmlAttributeAttribute]
public string testId { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool isCodedWebTest { get; public set; }
    public string get_name();
    public void set_name(string value);
    public string get_path();
    public void set_path(string value);
    public string get_testId();
    public void set_testId(string value);
    public bool get_isCodedWebTest();
    public void set_isCodedWebTest(bool value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.CodedWebTestElementTypeWebTestClass : object {
    private string assemblyField;
    private string namespaceField;
    private string classField;
    [XmlAttributeAttribute]
public string assembly { get; public set; }
    [XmlAttributeAttribute]
public string namespace { get; public set; }
    [XmlAttributeAttribute]
public string class { get; public set; }
    public string get_assembly();
    public void set_assembly(string value);
    public string get_namespace();
    public void set_namespace(string value);
    public string get_class();
    public void set_class(string value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.CollectorDataEntriesType : object {
    private CollectorType[] collectorField;
    [XmlElementAttribute("Collector")]
public CollectorType[] Collector { get; public set; }
    public CollectorType[] get_Collector();
    public void set_Collector(CollectorType[] value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.CollectorType : object {
    private UriAttachmentType[] uriAttachmentsField;
    private string agentNameField;
    private string agentDisplayNameField;
    private string collectorDisplayNameField;
    private bool isFromRemoteAgentField;
    private string uriField;
    [XmlArrayItemAttribute("UriAttachment")]
public UriAttachmentType[] UriAttachments { get; public set; }
    [XmlAttributeAttribute]
public string agentName { get; public set; }
    [XmlAttributeAttribute]
public string agentDisplayName { get; public set; }
    [XmlAttributeAttribute]
public string collectorDisplayName { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool isFromRemoteAgent { get; public set; }
    [XmlAttributeAttribute]
public string uri { get; public set; }
    public UriAttachmentType[] get_UriAttachments();
    public void set_UriAttachments(UriAttachmentType[] value);
    public string get_agentName();
    public void set_agentName(string value);
    public string get_agentDisplayName();
    public void set_agentDisplayName(string value);
    public string get_collectorDisplayName();
    public void set_collectorDisplayName(string value);
    public bool get_isFromRemoteAgent();
    public void set_isFromRemoteAgent(bool value);
    public string get_uri();
    public void set_uri(string value);
}
[XmlIncludeAttribute("Chutzpah.VSTS.ExponentialTrafficType")]
[XmlIncludeAttribute("Chutzpah.VSTS.ParetoTrafficType")]
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.ConstantTrafficType : object {
    private SpeedType rateField;
    private SizeType packetSizeField;
    public SpeedType Rate { get; public set; }
    public SizeType PacketSize { get; public set; }
    public SpeedType get_Rate();
    public void set_Rate(SpeedType value);
    public SizeType get_PacketSize();
    public void set_PacketSize(SizeType value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.CounterDescriptorType : object {
    private string machineNameField;
    private string categoryNameField;
    private string counterNameField;
    private string instanceNameField;
    private string baseInstanceNameField;
    private int loadTestItemIdField;
    [XmlAttributeAttribute]
public string machineName { get; public set; }
    [XmlAttributeAttribute]
public string categoryName { get; public set; }
    [XmlAttributeAttribute]
public string counterName { get; public set; }
    [XmlAttributeAttribute]
public string instanceName { get; public set; }
    [XmlAttributeAttribute]
public string baseInstanceName { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("-1")]
public int loadTestItemId { get; public set; }
    public string get_machineName();
    public void set_machineName(string value);
    public string get_categoryName();
    public void set_categoryName(string value);
    public string get_counterName();
    public void set_counterName(string value);
    public string get_instanceName();
    public void set_instanceName(string value);
    public string get_baseInstanceName();
    public void set_baseInstanceName(string value);
    public int get_loadTestItemId();
    public void set_loadTestItemId(int value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.CounterSetType : object {
    private CounterSetTypeCounterCategory[] counterCategoriesField;
    private string nameField;
    private string counterSetTypeField;
    [XmlArrayItemAttribute("CounterCategory")]
public CounterSetTypeCounterCategory[] CounterCategories { get; public set; }
    [XmlAttributeAttribute]
public string name { get; public set; }
    [XmlAttributeAttribute]
public string counterSetType { get; public set; }
    public CounterSetTypeCounterCategory[] get_CounterCategories();
    public void set_CounterCategories(CounterSetTypeCounterCategory[] value);
    public string get_name();
    public void set_name(string value);
    public string get_counterSetType();
    public void set_counterSetType(string value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.CounterSetTypeCounterCategory : object {
    private CounterType[] countersField;
    private object instancesField;
    private string nameField;
    [XmlArrayItemAttribute("Counter")]
public CounterType[] Counters { get; public set; }
    public object Instances { get; public set; }
    [XmlAttributeAttribute]
public string name { get; public set; }
    public CounterType[] get_Counters();
    public void set_Counters(CounterType[] value);
    public object get_Instances();
    public void set_Instances(object value);
    public string get_name();
    public void set_name(string value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.CountersType : object {
    private int totalField;
    private bool totalFieldSpecified;
    private int errorField;
    private int failedField;
    private int timeoutField;
    private int abortedField;
    private int inconclusiveField;
    private int passedButRunAbortedField;
    private int notRunnableField;
    private int notExecutedField;
    private int executedField;
    private int disconnectedField;
    private int warningField;
    private int passedField;
    private int completedField;
    private int inProgressField;
    private int pendingField;
    private string valueField;
    [XmlAttributeAttribute]
public int total { get; public set; }
    [XmlIgnoreAttribute]
public bool totalSpecified { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("0")]
public int error { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("0")]
public int failed { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("0")]
public int timeout { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("0")]
public int aborted { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("0")]
public int inconclusive { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("0")]
public int passedButRunAborted { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("0")]
public int notRunnable { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("0")]
public int notExecuted { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("0")]
public int executed { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("0")]
public int disconnected { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("0")]
public int warning { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("0")]
public int passed { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("0")]
public int completed { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("0")]
public int inProgress { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("0")]
public int pending { get; public set; }
    [XmlAttributeAttribute]
public string value { get; public set; }
    public int get_total();
    public void set_total(int value);
    public bool get_totalSpecified();
    public void set_totalSpecified(bool value);
    public int get_error();
    public void set_error(int value);
    public int get_failed();
    public void set_failed(int value);
    public int get_timeout();
    public void set_timeout(int value);
    public int get_aborted();
    public void set_aborted(int value);
    public int get_inconclusive();
    public void set_inconclusive(int value);
    public int get_passedButRunAborted();
    public void set_passedButRunAborted(int value);
    public int get_notRunnable();
    public void set_notRunnable(int value);
    public int get_notExecuted();
    public void set_notExecuted(int value);
    public int get_executed();
    public void set_executed(int value);
    public int get_disconnected();
    public void set_disconnected(int value);
    public int get_warning();
    public void set_warning(int value);
    public int get_passed();
    public void set_passed(int value);
    public int get_completed();
    public void set_completed(int value);
    public int get_inProgress();
    public void set_inProgress(int value);
    public int get_pending();
    public void set_pending(int value);
    public string get_value();
    public void set_value(string value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.CounterType : object {
    private CounterTypeThresholdRule[] thresholdRulesField;
    private string nameField;
    [XmlArrayItemAttribute("ThresholdRule")]
public CounterTypeThresholdRule[] ThresholdRules { get; public set; }
    [XmlAttributeAttribute]
public string name { get; public set; }
    public CounterTypeThresholdRule[] get_ThresholdRules();
    public void set_ThresholdRules(CounterTypeThresholdRule[] value);
    public string get_name();
    public void set_name(string value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.CounterTypeThresholdRule : object {
    private CounterTypeThresholdRuleRuleParameter[] parametersField;
    private string classNameField;
    [XmlArrayItemAttribute("RuleParameter")]
public CounterTypeThresholdRuleRuleParameter[] Parameters { get; public set; }
    [XmlAttributeAttribute]
public string className { get; public set; }
    public CounterTypeThresholdRuleRuleParameter[] get_Parameters();
    public void set_Parameters(CounterTypeThresholdRuleRuleParameter[] value);
    public string get_className();
    public void set_className(string value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.CounterTypeThresholdRuleRuleParameter : object {
    private string nameField;
    private string valueField;
    [XmlAttributeAttribute]
public string name { get; public set; }
    [XmlAttributeAttribute]
public string value { get; public set; }
    public string get_name();
    public void set_name(string value);
    public string get_value();
    public void set_value(string value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute("DataCollectorConfiguration")]
public class Chutzpah.VSTS.DataCollectorConfigurationSection : object {
    private DataCollectorConfigurationSectionDataCollector[] dataCollectorField;
    [XmlElementAttribute("DataCollector")]
public DataCollectorConfigurationSectionDataCollector[] DataCollector { get; public set; }
    public DataCollectorConfigurationSectionDataCollector[] get_DataCollector();
    public void set_DataCollector(DataCollectorConfigurationSectionDataCollector[] value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.DataCollectorConfigurationSectionDataCollector : object {
    private DataCollectorConfigurationSectionDataCollectorDefaultConfiguration defaultConfigurationField;
    private string typeUriField;
    public DataCollectorConfigurationSectionDataCollectorDefaultConfiguration DefaultConfiguration { get; public set; }
    [XmlAttributeAttribute]
public string typeUri { get; public set; }
    public DataCollectorConfigurationSectionDataCollectorDefaultConfiguration get_DefaultConfiguration();
    public void set_DefaultConfiguration(DataCollectorConfigurationSectionDataCollectorDefaultConfiguration value);
    public string get_typeUri();
    public void set_typeUri(string value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.DataCollectorConfigurationSectionDataCollectorDefaultConfiguration : object {
    private XmlElement[] anyField;
    [XmlAnyElementAttribute]
public XmlElement[] Any { get; public set; }
    public XmlElement[] get_Any();
    public void set_Any(XmlElement[] value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.DataCollectorExceptionMessageType : DataCollectorMessageType {
    private string exceptionTypeField;
    private string exceptionMessageField;
    private string stackTraceField;
    public string ExceptionType { get; public set; }
    public string ExceptionMessage { get; public set; }
    public string StackTrace { get; public set; }
    public string get_ExceptionType();
    public void set_ExceptionType(string value);
    public string get_ExceptionMessage();
    public void set_ExceptionMessage(string value);
    public string get_StackTrace();
    public void set_StackTrace(string value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.DataCollectorInformationType : object {
    private DataCollectorInformationTypeDataCollector[] dataCollectorsField;
    private DataCollectorInformationTypeConfigurationEditor[] configurationEditorsField;
    [XmlArrayItemAttribute("DataCollector")]
public DataCollectorInformationTypeDataCollector[] DataCollectors { get; public set; }
    [XmlArrayItemAttribute("ConfigurationEditor")]
public DataCollectorInformationTypeConfigurationEditor[] ConfigurationEditors { get; public set; }
    public DataCollectorInformationTypeDataCollector[] get_DataCollectors();
    public void set_DataCollectors(DataCollectorInformationTypeDataCollector[] value);
    public DataCollectorInformationTypeConfigurationEditor[] get_ConfigurationEditors();
    public void set_ConfigurationEditors(DataCollectorInformationTypeConfigurationEditor[] value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.DataCollectorInformationTypeConfigurationEditor : object {
    private string typeUriField;
    private string assemblyQualifiedNameField;
    [XmlAttributeAttribute]
public string typeUri { get; public set; }
    [XmlAttributeAttribute]
public string assemblyQualifiedName { get; public set; }
    public string get_typeUri();
    public void set_typeUri(string value);
    public string get_assemblyQualifiedName();
    public void set_assemblyQualifiedName(string value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.DataCollectorInformationTypeDataCollector : object {
    private object friendlyNameField;
    private object descriptionField;
    private DataCollectorInformationTypeDataCollectorDefaultConfiguration defaultConfigurationField;
    private DataCollectorInformationTypeDataCollectorConfigurationEditor configurationEditorField;
    private string typeUriField;
    private bool requiresOutOfProcessCollectionField;
    private bool requiresOutOfProcessCollectionFieldSpecified;
    private string assemblyQualifiedNameField;
    private bool isEnabledByDefaultField;
    private bool enabledOnCollectionOnlyAgentsField;
    private string supportedTestClientsField;
    private string supportedLocationsField;
    private string supportedAgentRoleTypesField;
    private bool isEnabledByDefaultForTailoredApplicationsField;
    private bool supportsTailoredApplicationsField;
    public object FriendlyName { get; public set; }
    public object Description { get; public set; }
    public DataCollectorInformationTypeDataCollectorDefaultConfiguration DefaultConfiguration { get; public set; }
    public DataCollectorInformationTypeDataCollectorConfigurationEditor ConfigurationEditor { get; public set; }
    [XmlAttributeAttribute]
public string typeUri { get; public set; }
    [XmlAttributeAttribute]
public bool requiresOutOfProcessCollection { get; public set; }
    [XmlIgnoreAttribute]
public bool requiresOutOfProcessCollectionSpecified { get; public set; }
    [XmlAttributeAttribute]
public string assemblyQualifiedName { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool isEnabledByDefault { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool enabledOnCollectionOnlyAgents { get; public set; }
    [XmlAttributeAttribute]
public string supportedTestClients { get; public set; }
    [XmlAttributeAttribute]
public string supportedLocations { get; public set; }
    [XmlAttributeAttribute]
public string supportedAgentRoleTypes { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool isEnabledByDefaultForTailoredApplications { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool supportsTailoredApplications { get; public set; }
    public object get_FriendlyName();
    public void set_FriendlyName(object value);
    public object get_Description();
    public void set_Description(object value);
    public DataCollectorInformationTypeDataCollectorDefaultConfiguration get_DefaultConfiguration();
    public void set_DefaultConfiguration(DataCollectorInformationTypeDataCollectorDefaultConfiguration value);
    public DataCollectorInformationTypeDataCollectorConfigurationEditor get_ConfigurationEditor();
    public void set_ConfigurationEditor(DataCollectorInformationTypeDataCollectorConfigurationEditor value);
    public string get_typeUri();
    public void set_typeUri(string value);
    public bool get_requiresOutOfProcessCollection();
    public void set_requiresOutOfProcessCollection(bool value);
    public bool get_requiresOutOfProcessCollectionSpecified();
    public void set_requiresOutOfProcessCollectionSpecified(bool value);
    public string get_assemblyQualifiedName();
    public void set_assemblyQualifiedName(string value);
    public bool get_isEnabledByDefault();
    public void set_isEnabledByDefault(bool value);
    public bool get_enabledOnCollectionOnlyAgents();
    public void set_enabledOnCollectionOnlyAgents(bool value);
    public string get_supportedTestClients();
    public void set_supportedTestClients(string value);
    public string get_supportedLocations();
    public void set_supportedLocations(string value);
    public string get_supportedAgentRoleTypes();
    public void set_supportedAgentRoleTypes(string value);
    public bool get_isEnabledByDefaultForTailoredApplications();
    public void set_isEnabledByDefaultForTailoredApplications(bool value);
    public bool get_supportsTailoredApplications();
    public void set_supportsTailoredApplications(bool value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.DataCollectorInformationTypeDataCollectorConfigurationEditor : object {
    private DataCollectorInformationTypeDataCollectorConfigurationEditorConfiguration configurationField;
    private string typeUriField;
    private string helpUriField;
    public DataCollectorInformationTypeDataCollectorConfigurationEditorConfiguration Configuration { get; public set; }
    [XmlAttributeAttribute]
public string typeUri { get; public set; }
    [XmlAttributeAttribute]
public string helpUri { get; public set; }
    public DataCollectorInformationTypeDataCollectorConfigurationEditorConfiguration get_Configuration();
    public void set_Configuration(DataCollectorInformationTypeDataCollectorConfigurationEditorConfiguration value);
    public string get_typeUri();
    public void set_typeUri(string value);
    public string get_helpUri();
    public void set_helpUri(string value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.DataCollectorInformationTypeDataCollectorConfigurationEditorConfiguration : object {
    private XmlElement[] anyField;
    [XmlAnyElementAttribute]
public XmlElement[] Any { get; public set; }
    public XmlElement[] get_Any();
    public void set_Any(XmlElement[] value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.DataCollectorInformationTypeDataCollectorDefaultConfiguration : object {
    private XmlElement[] anyField;
    [XmlAnyElementAttribute]
public XmlElement[] Any { get; public set; }
    public XmlElement[] get_Any();
    public void set_Any(XmlElement[] value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[XmlTypeAttribute]
public enum Chutzpah.VSTS.DataCollectorMessageLevelType : Enum {
    public int value__;
    public static DataCollectorMessageLevelType Error;
    public static DataCollectorMessageLevelType Warning;
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.DataCollectorMessagesType : object {
    private DataCollectorMessageType[] itemsField;
    [XmlElementAttribute("DataCollectorExceptionMessage", "Chutzpah.VSTS.DataCollectorExceptionMessageType")]
[XmlElementAttribute("DataCollectorMessage", "Chutzpah.VSTS.DataCollectorMessageType")]
public DataCollectorMessageType[] Items { get; public set; }
    public DataCollectorMessageType[] get_Items();
    public void set_Items(DataCollectorMessageType[] value);
}
[XmlIncludeAttribute("Chutzpah.VSTS.DataCollectorExceptionMessageType")]
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.DataCollectorMessageType : object {
    private string textField;
    private DataCollectorMessageLevelType levelField;
    private string agentNameField;
    private string timestampField;
    private string dataCollectorUriField;
    private string dataCollectorFriendlyNameField;
    public string Text { get; public set; }
    [XmlAttributeAttribute]
public DataCollectorMessageLevelType level { get; public set; }
    [XmlAttributeAttribute]
public string agentName { get; public set; }
    [XmlAttributeAttribute]
public string timestamp { get; public set; }
    [XmlAttributeAttribute]
public string dataCollectorUri { get; public set; }
    [XmlAttributeAttribute]
public string dataCollectorFriendlyName { get; public set; }
    public string get_Text();
    public void set_Text(string value);
    public DataCollectorMessageLevelType get_level();
    public void set_level(DataCollectorMessageLevelType value);
    public string get_agentName();
    public void set_agentName(string value);
    public string get_timestamp();
    public void set_timestamp(string value);
    public string get_dataCollectorUri();
    public void set_dataCollectorUri(string value);
    public string get_dataCollectorFriendlyName();
    public void set_dataCollectorFriendlyName(string value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.DeclarativeWebTestElementType : BaseTestType {
    private string persistedWebTestField;
    [XmlAttributeAttribute]
public string persistedWebTest { get; public set; }
    public string get_persistedWebTest();
    public void set_persistedWebTest(string value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.DeploymentItemsType : object {
    private DeploymentItemsTypeDeploymentItem[] deploymentItemField;
    [XmlElementAttribute("DeploymentItem")]
public DeploymentItemsTypeDeploymentItem[] DeploymentItem { get; public set; }
    public DeploymentItemsTypeDeploymentItem[] get_DeploymentItem();
    public void set_DeploymentItem(DeploymentItemsTypeDeploymentItem[] value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.DeploymentItemsTypeDeploymentItem : object {
    private string filenameField;
    private string outputDirectoryField;
    [XmlAttributeAttribute]
public string filename { get; public set; }
    [XmlAttributeAttribute]
public string outputDirectory { get; public set; }
    public string get_filename();
    public void set_filename(string value);
    public string get_outputDirectory();
    public void set_outputDirectory(string value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.DevelopmentServerType : object {
    private string pathToWebSiteField;
    private string webApplicationRootField;
    private string nameField;
    [XmlAttributeAttribute]
public string pathToWebSite { get; public set; }
    [XmlAttributeAttribute]
public string webApplicationRoot { get; public set; }
    [XmlAttributeAttribute]
public string name { get; public set; }
    public string get_pathToWebSite();
    public void set_pathToWebSite(string value);
    public string get_webApplicationRoot();
    public void set_webApplicationRoot(string value);
    public string get_name();
    public void set_name(string value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class Chutzpah.VSTS.Disconnection : object {
    private PeriodicDisconnectionType itemField;
    [XmlElementAttribute("Periodic")]
public PeriodicDisconnectionType Item { get; public set; }
    public PeriodicDisconnectionType get_Item();
    public void set_Item(PeriodicDisconnectionType value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute("DiscoveryCache")]
public class Chutzpah.VSTS.DiscoveryCacheType : object {
    private DiscoveryCacheTypeController[] remoteAgentsField;
    [XmlArrayItemAttribute("Controller")]
public DiscoveryCacheTypeController[] RemoteAgents { get; public set; }
    public DiscoveryCacheTypeController[] get_RemoteAgents();
    public void set_RemoteAgents(DiscoveryCacheTypeController[] value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.DiscoveryCacheTypeController : object {
    private DiscoveryCacheTypeControllerAgent[] agentField;
    private string nameField;
    [XmlElementAttribute("Agent")]
public DiscoveryCacheTypeControllerAgent[] Agent { get; public set; }
    [XmlAttributeAttribute]
public string name { get; public set; }
    public DiscoveryCacheTypeControllerAgent[] get_Agent();
    public void set_Agent(DiscoveryCacheTypeControllerAgent[] value);
    public string get_name();
    public void set_name(string value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.DiscoveryCacheTypeControllerAgent : object {
    private DataCollectorInformationType dataCollectorInformationField;
    private NameValuePropertyType[] agentPropertiesField;
    private string nameField;
    public DataCollectorInformationType DataCollectorInformation { get; public set; }
    [XmlArrayItemAttribute("Property")]
public NameValuePropertyType[] AgentProperties { get; public set; }
    [XmlAttributeAttribute]
public string name { get; public set; }
    public DataCollectorInformationType get_DataCollectorInformation();
    public void set_DataCollectorInformation(DataCollectorInformationType value);
    public NameValuePropertyType[] get_AgentProperties();
    public void set_AgentProperties(NameValuePropertyType[] value);
    public string get_name();
    public void set_name(string value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[XmlTypeAttribute]
[XmlRootAttribute]
public enum Chutzpah.VSTS.DropType : Enum {
    public int value__;
    public static DropType DropTail;
    public static DropType DropHead;
    public static DropType DropRandom;
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.Empirical1Type : object {
    private decimal rateField;
    public decimal Rate { get; public set; }
    public decimal get_Rate();
    public void set_Rate(decimal value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.Empirical2Type : object {
    private decimal rateField;
    public decimal Rate { get; public set; }
    public decimal get_Rate();
    public void set_Rate(decimal value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class Chutzpah.VSTS.Emulation : object {
    private VirtualChannel virtualChannelField;
    private Timestamp[] timestampField;
    public VirtualChannel VirtualChannel { get; public set; }
    [XmlElementAttribute("Timestamp")]
public Timestamp[] Timestamp { get; public set; }
    public VirtualChannel get_VirtualChannel();
    public void set_VirtualChannel(VirtualChannel value);
    public Timestamp[] get_Timestamp();
    public void set_Timestamp(Timestamp[] value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class Chutzpah.VSTS.Error : object {
    private object itemField;
    [XmlElementAttribute("Random", "Chutzpah.VSTS.RandomErrorType")]
[XmlElementAttribute("Statistical", "Chutzpah.VSTS.StatisticalErrorType")]
public object Item { get; public set; }
    public object get_Item();
    public void set_Item(object value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[XmlTypeAttribute]
public enum Chutzpah.VSTS.ErrorUnitType : Enum {
    public int value__;
    public static ErrorUnitType packet;
    public static ErrorUnitType bit;
}
[XmlIncludeAttribute("Chutzpah.VSTS.ParetoTrafficType")]
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.ExponentialTrafficType : ConstantTrafficType {
    private SecType burstTimeField;
    private SecType idleTimeField;
    public SecType BurstTime { get; public set; }
    public SecType IdleTime { get; public set; }
    public SecType get_BurstTime();
    public void set_BurstTime(SecType value);
    public SecType get_IdleTime();
    public void set_IdleTime(SecType value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.FileUrisType : object {
    private FileUriType[] fileUriField;
    [XmlElementAttribute("FileUri")]
public FileUriType[] FileUri { get; public set; }
    public FileUriType[] get_FileUri();
    public void set_FileUri(FileUriType[] value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.FileUriType : object {
    private string fileField;
    private string uriField;
    [XmlAttributeAttribute]
public string file { get; public set; }
    [XmlAttributeAttribute]
public string uri { get; public set; }
    public string get_file();
    public void set_file(string value);
    public string get_uri();
    public void set_uri(string value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class Chutzpah.VSTS.Filter : object {
    private IpVersion ipVersionField;
    private bool ipVersionFieldSpecified;
    private Protocol protocolField;
    private bool protocolFieldSpecified;
    private string physicalAddressField;
    private AddressType localField;
    private AddressType remoteField;
    private string nameField;
    private bool notField;
    public IpVersion IpVersion { get; public set; }
    [XmlIgnoreAttribute]
public bool IpVersionSpecified { get; public set; }
    public Protocol Protocol { get; public set; }
    [XmlIgnoreAttribute]
public bool ProtocolSpecified { get; public set; }
    [XmlElementAttribute]
public string PhysicalAddress { get; public set; }
    public AddressType Local { get; public set; }
    public AddressType Remote { get; public set; }
    [XmlAttributeAttribute]
public string name { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool not { get; public set; }
    public IpVersion get_IpVersion();
    public void set_IpVersion(IpVersion value);
    public bool get_IpVersionSpecified();
    public void set_IpVersionSpecified(bool value);
    public Protocol get_Protocol();
    public void set_Protocol(Protocol value);
    public bool get_ProtocolSpecified();
    public void set_ProtocolSpecified(bool value);
    public string get_PhysicalAddress();
    public void set_PhysicalAddress(string value);
    public AddressType get_Local();
    public void set_Local(AddressType value);
    public AddressType get_Remote();
    public void set_Remote(AddressType value);
    public string get_name();
    public void set_name(string value);
    public bool get_not();
    public void set_not(bool value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class Chutzpah.VSTS.FilterList : object {
    private Filter[] itemsField;
    [XmlElementAttribute("Filter")]
public Filter[] Items { get; public set; }
    public Filter[] get_Items();
    public void set_Items(Filter[] value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.FixedLatencyType : object {
    private MsecType timeField;
    public MsecType Time { get; public set; }
    public MsecType get_Time();
    public void set_Time(MsecType value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute("GenericTest")]
public class Chutzpah.VSTS.GenericTestType : BaseTestType {
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.GenericTestTypeCommand : object {
    private GenericTestTypeCommandEnvironmentVariable[] environmentVariablesField;
    private string filenameField;
    private string argumentsField;
    private string workingDirectoryField;
    private int maxDurationField;
    private bool redirectStandardOutputAndErrorField;
    [XmlArrayItemAttribute("EnvironmentVariable")]
public GenericTestTypeCommandEnvironmentVariable[] EnvironmentVariables { get; public set; }
    [XmlAttributeAttribute]
public string filename { get; public set; }
    [XmlAttributeAttribute]
public string arguments { get; public set; }
    [XmlAttributeAttribute]
public string workingDirectory { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("3600000")]
public int maxDuration { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool redirectStandardOutputAndError { get; public set; }
    public GenericTestTypeCommandEnvironmentVariable[] get_EnvironmentVariables();
    public void set_EnvironmentVariables(GenericTestTypeCommandEnvironmentVariable[] value);
    public string get_filename();
    public void set_filename(string value);
    public string get_arguments();
    public void set_arguments(string value);
    public string get_workingDirectory();
    public void set_workingDirectory(string value);
    public int get_maxDuration();
    public void set_maxDuration(int value);
    public bool get_redirectStandardOutputAndError();
    public void set_redirectStandardOutputAndError(bool value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.GenericTestTypeCommandEnvironmentVariable : object {
    private string nameField;
    private string valueField;
    [XmlAttributeAttribute]
public string name { get; public set; }
    [XmlAttributeAttribute]
public string value { get; public set; }
    public string get_name();
    public void set_name(string value);
    public string get_value();
    public void set_value(string value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.GenericTestTypeSummaryXmlFile : object {
    private string pathField;
    private bool enabledField;
    [XmlAttributeAttribute]
public string path { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool enabled { get; public set; }
    public string get_path();
    public void set_path(string value);
    public bool get_enabled();
    public void set_enabled(bool value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.GraphDescriptorType : object {
    private RangeType horizontalZoomRangeField;
    private RangeType verticalZoomRangeField;
    private PlotDescriptorType[] plotDescriptorsField;
    private string graphNameField;
    public RangeType HorizontalZoomRange { get; public set; }
    public RangeType VerticalZoomRange { get; public set; }
    [XmlArrayItemAttribute("PlotDescriptor")]
public PlotDescriptorType[] PlotDescriptors { get; public set; }
    [XmlAttributeAttribute]
public string graphName { get; public set; }
    public RangeType get_HorizontalZoomRange();
    public void set_HorizontalZoomRange(RangeType value);
    public RangeType get_VerticalZoomRange();
    public void set_VerticalZoomRange(RangeType value);
    public PlotDescriptorType[] get_PlotDescriptors();
    public void set_PlotDescriptors(PlotDescriptorType[] value);
    public string get_graphName();
    public void set_graphName(string value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.HeadersTypeHeader : object {
    private string nameField;
    private string valueField;
    [XmlAttributeAttribute]
public string name { get; public set; }
    [XmlAttributeAttribute]
public string value { get; public set; }
    public string get_name();
    public void set_name(string value);
    public string get_value();
    public void set_value(string value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[XmlTypeAttribute]
public enum Chutzpah.VSTS.HostProcessPlatformTypeEnum : Enum {
    public int value__;
    public static HostProcessPlatformTypeEnum MSIL;
    public static HostProcessPlatformTypeEnum X86;
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.IDElementType : object {
    private string idField;
    [XmlAttributeAttribute]
public string id { get; public set; }
    public string get_id();
    public void set_id(string value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[XmlTypeAttribute]
[XmlRootAttribute]
public enum Chutzpah.VSTS.IpVersion : Enum {
    public int value__;
    public static IpVersion IPv4;
    public static IpVersion IPv6;
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[XmlTypeAttribute]
public enum Chutzpah.VSTS.Items1ChoiceType : Enum {
    public int value__;
    public static Items1ChoiceType ByteArrayCache;
    public static Items1ChoiceType TestRunConfiguration;
    public static Items1ChoiceType TestSettings;
    public static Items1ChoiceType WebRequestResults;
    public static Items1ChoiceType WebTestRecordedResultFilePath;
    public static Items1ChoiceType WebTestResultDetails;
    public static Items1ChoiceType WebTestResultFilePath;
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[XmlTypeAttribute]
public enum Chutzpah.VSTS.ItemsChoiceType : Enum {
    public int value__;
    [XmlEnumAttribute("##any:")]
public static ItemsChoiceType Item;
    public static ItemsChoiceType WebTestRunConfig;
    public static ItemsChoiceType WebTestRunConfiguration;
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[XmlTypeAttribute]
public enum Chutzpah.VSTS.ItemsChoiceType1 : Enum {
    public int value__;
    public static ItemsChoiceType1 Buckets;
    public static ItemsChoiceType1 CodeCoverage;
    public static ItemsChoiceType1 Constraints;
    public static ItemsChoiceType1 Deployment;
    public static ItemsChoiceType1 Description;
    public static ItemsChoiceType1 Execution;
    public static ItemsChoiceType1 ExecutionThread;
    public static ItemsChoiceType1 Hosts;
    public static ItemsChoiceType1 NamingScheme;
    public static ItemsChoiceType1 Plugins;
    public static ItemsChoiceType1 Remote;
    public static ItemsChoiceType1 Scripts;
    public static ItemsChoiceType1 TestTypeSpecific;
    public static ItemsChoiceType1 Timeouts;
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[XmlTypeAttribute]
public enum Chutzpah.VSTS.ItemsChoiceType2 : Enum {
    public int value__;
    [XmlEnumAttribute("##any:")]
public static ItemsChoiceType2 Item;
    public static ItemsChoiceType2 UnitTestRunConfig;
    public static ItemsChoiceType2 WebTestRunConfig;
    public static ItemsChoiceType2 WebTestRunConfiguration;
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[XmlTypeAttribute]
public enum Chutzpah.VSTS.ItemsChoiceType3 : Enum {
    public int value__;
    [XmlEnumAttribute("##any:")]
public static ItemsChoiceType3 Item;
    public static ItemsChoiceType3 GenericTestResult;
    public static ItemsChoiceType3 LoadTestResult;
    public static ItemsChoiceType3 ManualTestResult;
    public static ItemsChoiceType3 TestResult;
    public static ItemsChoiceType3 TestResultAggregation;
    public static ItemsChoiceType3 UnitTestResult;
    public static ItemsChoiceType3 WebTestResult;
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[XmlTypeAttribute]
public enum Chutzpah.VSTS.ItemsChoiceType4 : Enum {
    public int value__;
    [XmlEnumAttribute("##any:")]
public static ItemsChoiceType4 Item;
    public static ItemsChoiceType4 CodedWebTest;
    public static ItemsChoiceType4 GenericTest;
    public static ItemsChoiceType4 LoadTest;
    public static ItemsChoiceType4 ManualTest;
    public static ItemsChoiceType4 OrderedTest;
    public static ItemsChoiceType4 UnitTest;
    public static ItemsChoiceType4 UnitTestElement;
    public static ItemsChoiceType4 WebTest;
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class Chutzpah.VSTS.Latency : object {
    private object itemField;
    [XmlElementAttribute("Burst", "Chutzpah.VSTS.BurstLatencyType")]
[XmlElementAttribute("Fixed", "Chutzpah.VSTS.FixedLatencyType")]
[XmlElementAttribute("Linear", "Chutzpah.VSTS.LinearLatencyType")]
[XmlElementAttribute("Normal", "Chutzpah.VSTS.NormalLatencyType")]
[XmlElementAttribute("Uniform", "Chutzpah.VSTS.UniformLatencyType")]
public object Item { get; public set; }
    public object get_Item();
    public void set_Item(object value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.LinearLatencyType : UniformLatencyType {
    private SecType periodField;
    public SecType Period { get; public set; }
    public SecType get_Period();
    public void set_Period(SecType value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class Chutzpah.VSTS.LinkRule : object {
    private Latency latencyField;
    private Error errorField;
    private Loss lossField;
    private Bandwidth bandwidthField;
    private BackgroundTraffic backgroundTrafficField;
    private Reorder reorderField;
    private Disconnection disconnectionField;
    private LinkRuleDir dirField;
    public Latency Latency { get; public set; }
    public Error Error { get; public set; }
    public Loss Loss { get; public set; }
    public Bandwidth Bandwidth { get; public set; }
    public BackgroundTraffic BackgroundTraffic { get; public set; }
    public Reorder Reorder { get; public set; }
    public Disconnection Disconnection { get; public set; }
    [XmlAttributeAttribute]
public LinkRuleDir dir { get; public set; }
    public Latency get_Latency();
    public void set_Latency(Latency value);
    public Error get_Error();
    public void set_Error(Error value);
    public Loss get_Loss();
    public void set_Loss(Loss value);
    public Bandwidth get_Bandwidth();
    public void set_Bandwidth(Bandwidth value);
    public BackgroundTraffic get_BackgroundTraffic();
    public void set_BackgroundTraffic(BackgroundTraffic value);
    public Reorder get_Reorder();
    public void set_Reorder(Reorder value);
    public Disconnection get_Disconnection();
    public void set_Disconnection(Disconnection value);
    public LinkRuleDir get_dir();
    public void set_dir(LinkRuleDir value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[XmlTypeAttribute]
public enum Chutzpah.VSTS.LinkRuleDir : Enum {
    public int value__;
    public static LinkRuleDir upstream;
    public static LinkRuleDir downstream;
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.LinkType : object {
    private string idField;
    private string nameField;
    private string storageField;
    private bool enabledField;
    private string typeField;
    [XmlAttributeAttribute]
public string id { get; public set; }
    [XmlAttributeAttribute]
public string name { get; public set; }
    [XmlAttributeAttribute]
public string storage { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool enabled { get; public set; }
    [XmlAttributeAttribute]
public string type { get; public set; }
    public string get_id();
    public void set_id(string value);
    public string get_name();
    public void set_name(string value);
    public string get_storage();
    public void set_storage(string value);
    public bool get_enabled();
    public void set_enabled(bool value);
    public string get_type();
    public void set_type(string value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.LoadRunConfigurationType : object {
    private LoadRunConfigurationTypeCounterSetMapping[] counterSetMappingsField;
    private object contextParametersField;
    private string nameField;
    private string descriptionField;
    private int timingDetailsStorageField;
    private bool timingDetailsStorageFieldSpecified;
    private int resultsStoreTypeField;
    private bool saveTestLogsOnErrorField;
    private bool saveTestLogsOnErrorFieldSpecified;
    private int saveTestLogsFrequencyField;
    private int maxErrorDetailsField;
    private int maxErrorsPerTypeField;
    private int maxThresholdViolationsField;
    private int maxRequestUrlsReportedField;
    private bool useTestIterationsField;
    private bool useTestIterationsFieldSpecified;
    private int runDurationField;
    private int warmupTimeField;
    private int coolDownTimeField;
    private bool coolDownTimeFieldSpecified;
    private int testIterationsField;
    private bool testIterationsFieldSpecified;
    private string webTestConnectionModelField;
    private int webTestConnectionPoolSizeField;
    private bool webTestConnectionPoolSizeFieldSpecified;
    private int sampleRateField;
    private int validationLevelField;
    private string sqlTracingConnectStringField;
    private string sqlTracingConnectStringDisplayValueField;
    private string sqlTracingDirectoryField;
    private bool sqlTracingEnabledField;
    private bool sqlTracingEnabledFieldSpecified;
    private int sqlTracingFileCountField;
    private bool sqlTracingFileCountFieldSpecified;
    private bool sqlTracingRolloverEnabledField;
    private bool sqlTracingRolloverEnabledFieldSpecified;
    private int sqlTracingMinimumDurationField;
    private bool sqlTracingMinimumDurationFieldSpecified;
    private bool runUnitTestsInAppDomainField;
    private bool runUnitTestsInAppDomainFieldSpecified;
    [XmlArrayItemAttribute("CounterSetMapping")]
public LoadRunConfigurationTypeCounterSetMapping[] CounterSetMappings { get; public set; }
    public object ContextParameters { get; public set; }
    [XmlAttributeAttribute]
public string name { get; public set; }
    [XmlAttributeAttribute]
public string description { get; public set; }
    [XmlAttributeAttribute]
public int timingDetailsStorage { get; public set; }
    [XmlIgnoreAttribute]
public bool timingDetailsStorageSpecified { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("1")]
public int resultsStoreType { get; public set; }
    [XmlAttributeAttribute]
public bool saveTestLogsOnError { get; public set; }
    [XmlIgnoreAttribute]
public bool saveTestLogsOnErrorSpecified { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("0")]
public int saveTestLogsFrequency { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("100")]
public int maxErrorDetails { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("1000")]
public int maxErrorsPerType { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("1000")]
public int maxThresholdViolations { get; public set; }
    [XmlAttributeAttribute]
public int maxRequestUrlsReported { get; public set; }
    [XmlAttributeAttribute]
public bool useTestIterations { get; public set; }
    [XmlIgnoreAttribute]
public bool useTestIterationsSpecified { get; public set; }
    [XmlAttributeAttribute]
public int runDuration { get; public set; }
    [XmlAttributeAttribute]
public int warmupTime { get; public set; }
    [XmlAttributeAttribute]
public int coolDownTime { get; public set; }
    [XmlIgnoreAttribute]
public bool coolDownTimeSpecified { get; public set; }
    [XmlAttributeAttribute]
public int testIterations { get; public set; }
    [XmlIgnoreAttribute]
public bool testIterationsSpecified { get; public set; }
    [XmlAttributeAttribute]
public string webTestConnectionModel { get; public set; }
    [XmlAttributeAttribute]
public int webTestConnectionPoolSize { get; public set; }
    [XmlIgnoreAttribute]
public bool webTestConnectionPoolSizeSpecified { get; public set; }
    [XmlAttributeAttribute]
public int sampleRate { get; public set; }
    [XmlAttributeAttribute]
public int validationLevel { get; public set; }
    [XmlAttributeAttribute]
public string sqlTracingConnectString { get; public set; }
    [XmlAttributeAttribute]
public string sqlTracingConnectStringDisplayValue { get; public set; }
    [XmlAttributeAttribute]
public string sqlTracingDirectory { get; public set; }
    [XmlAttributeAttribute]
public bool sqlTracingEnabled { get; public set; }
    [XmlIgnoreAttribute]
public bool sqlTracingEnabledSpecified { get; public set; }
    [XmlAttributeAttribute]
public int sqlTracingFileCount { get; public set; }
    [XmlIgnoreAttribute]
public bool sqlTracingFileCountSpecified { get; public set; }
    [XmlAttributeAttribute]
public bool sqlTracingRolloverEnabled { get; public set; }
    [XmlIgnoreAttribute]
public bool sqlTracingRolloverEnabledSpecified { get; public set; }
    [XmlAttributeAttribute]
public int sqlTracingMinimumDuration { get; public set; }
    [XmlIgnoreAttribute]
public bool sqlTracingMinimumDurationSpecified { get; public set; }
    [XmlAttributeAttribute]
public bool runUnitTestsInAppDomain { get; public set; }
    [XmlIgnoreAttribute]
public bool runUnitTestsInAppDomainSpecified { get; public set; }
    public LoadRunConfigurationTypeCounterSetMapping[] get_CounterSetMappings();
    public void set_CounterSetMappings(LoadRunConfigurationTypeCounterSetMapping[] value);
    public object get_ContextParameters();
    public void set_ContextParameters(object value);
    public string get_name();
    public void set_name(string value);
    public string get_description();
    public void set_description(string value);
    public int get_timingDetailsStorage();
    public void set_timingDetailsStorage(int value);
    public bool get_timingDetailsStorageSpecified();
    public void set_timingDetailsStorageSpecified(bool value);
    public int get_resultsStoreType();
    public void set_resultsStoreType(int value);
    public bool get_saveTestLogsOnError();
    public void set_saveTestLogsOnError(bool value);
    public bool get_saveTestLogsOnErrorSpecified();
    public void set_saveTestLogsOnErrorSpecified(bool value);
    public int get_saveTestLogsFrequency();
    public void set_saveTestLogsFrequency(int value);
    public int get_maxErrorDetails();
    public void set_maxErrorDetails(int value);
    public int get_maxErrorsPerType();
    public void set_maxErrorsPerType(int value);
    public int get_maxThresholdViolations();
    public void set_maxThresholdViolations(int value);
    public int get_maxRequestUrlsReported();
    public void set_maxRequestUrlsReported(int value);
    public bool get_useTestIterations();
    public void set_useTestIterations(bool value);
    public bool get_useTestIterationsSpecified();
    public void set_useTestIterationsSpecified(bool value);
    public int get_runDuration();
    public void set_runDuration(int value);
    public int get_warmupTime();
    public void set_warmupTime(int value);
    public int get_coolDownTime();
    public void set_coolDownTime(int value);
    public bool get_coolDownTimeSpecified();
    public void set_coolDownTimeSpecified(bool value);
    public int get_testIterations();
    public void set_testIterations(int value);
    public bool get_testIterationsSpecified();
    public void set_testIterationsSpecified(bool value);
    public string get_webTestConnectionModel();
    public void set_webTestConnectionModel(string value);
    public int get_webTestConnectionPoolSize();
    public void set_webTestConnectionPoolSize(int value);
    public bool get_webTestConnectionPoolSizeSpecified();
    public void set_webTestConnectionPoolSizeSpecified(bool value);
    public int get_sampleRate();
    public void set_sampleRate(int value);
    public int get_validationLevel();
    public void set_validationLevel(int value);
    public string get_sqlTracingConnectString();
    public void set_sqlTracingConnectString(string value);
    public string get_sqlTracingConnectStringDisplayValue();
    public void set_sqlTracingConnectStringDisplayValue(string value);
    public string get_sqlTracingDirectory();
    public void set_sqlTracingDirectory(string value);
    public bool get_sqlTracingEnabled();
    public void set_sqlTracingEnabled(bool value);
    public bool get_sqlTracingEnabledSpecified();
    public void set_sqlTracingEnabledSpecified(bool value);
    public int get_sqlTracingFileCount();
    public void set_sqlTracingFileCount(int value);
    public bool get_sqlTracingFileCountSpecified();
    public void set_sqlTracingFileCountSpecified(bool value);
    public bool get_sqlTracingRolloverEnabled();
    public void set_sqlTracingRolloverEnabled(bool value);
    public bool get_sqlTracingRolloverEnabledSpecified();
    public void set_sqlTracingRolloverEnabledSpecified(bool value);
    public int get_sqlTracingMinimumDuration();
    public void set_sqlTracingMinimumDuration(int value);
    public bool get_sqlTracingMinimumDurationSpecified();
    public void set_sqlTracingMinimumDurationSpecified(bool value);
    public bool get_runUnitTestsInAppDomain();
    public void set_runUnitTestsInAppDomain(bool value);
    public bool get_runUnitTestsInAppDomainSpecified();
    public void set_runUnitTestsInAppDomainSpecified(bool value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.LoadRunConfigurationTypeCounterSetMapping : object {
    private LoadRunConfigurationTypeCounterSetMappingCounterSetReferences counterSetReferencesField;
    private string computerNameField;
    public LoadRunConfigurationTypeCounterSetMappingCounterSetReferences CounterSetReferences { get; public set; }
    [XmlAttributeAttribute]
public string computerName { get; public set; }
    public LoadRunConfigurationTypeCounterSetMappingCounterSetReferences get_CounterSetReferences();
    public void set_CounterSetReferences(LoadRunConfigurationTypeCounterSetMappingCounterSetReferences value);
    public string get_computerName();
    public void set_computerName(string value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.LoadRunConfigurationTypeCounterSetMappingCounterSetReferences : object {
    private LoadRunConfigurationTypeCounterSetMappingCounterSetReferencesCounterSetReference counterSetReferenceField;
    public LoadRunConfigurationTypeCounterSetMappingCounterSetReferencesCounterSetReference CounterSetReference { get; public set; }
    public LoadRunConfigurationTypeCounterSetMappingCounterSetReferencesCounterSetReference get_CounterSetReference();
    public void set_CounterSetReference(LoadRunConfigurationTypeCounterSetMappingCounterSetReferencesCounterSetReference value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.LoadRunConfigurationTypeCounterSetMappingCounterSetReferencesCounterSetReference : object {
    private string counterSetNameField;
    [XmlAttributeAttribute]
public string counterSetName { get; public set; }
    public string get_counterSetName();
    public void set_counterSetName(string value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[XmlTypeAttribute]
public enum Chutzpah.VSTS.LoadTestResultStoreType : Enum {
    public int value__;
    public static LoadTestResultStoreType None;
    public static LoadTestResultStoreType Database;
    public static LoadTestResultStoreType XmlResultFile;
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.LoadTestResultType : TestResultAggregationType {
    private LoadTestResultTypeAnalyzerViewState analyzerViewStateField;
    private LoadTestResultTypeSummary summaryField;
    private LoadTestRunStatusType runStatusField;
    private int runIdField;
    private string controllerStartTimeField;
    private int loadTestDurationField;
    private bool loadTestDurationFieldSpecified;
    private int loadTestWarmupTimeField;
    private bool loadTestWarmupTimeFieldSpecified;
    private bool previouslyViewedField;
    private string resultsRepositoryConnectStringField;
    private LoadTestResultStoreType resultsStoreTypeField;
    private bool resultsStoreTypeFieldSpecified;
    public LoadTestResultTypeAnalyzerViewState AnalyzerViewState { get; public set; }
    public LoadTestResultTypeSummary Summary { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public LoadTestRunStatusType runStatus { get; public set; }
    [XmlAttributeAttribute]
public int runId { get; public set; }
    [XmlAttributeAttribute]
public string controllerStartTime { get; public set; }
    [XmlAttributeAttribute]
public int loadTestDuration { get; public set; }
    [XmlIgnoreAttribute]
public bool loadTestDurationSpecified { get; public set; }
    [XmlAttributeAttribute]
public int loadTestWarmupTime { get; public set; }
    [XmlIgnoreAttribute]
public bool loadTestWarmupTimeSpecified { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool previouslyViewed { get; public set; }
    [XmlAttributeAttribute]
public string resultsRepositoryConnectString { get; public set; }
    [XmlAttributeAttribute]
public LoadTestResultStoreType resultsStoreType { get; public set; }
    [XmlIgnoreAttribute]
public bool resultsStoreTypeSpecified { get; public set; }
    public LoadTestResultTypeAnalyzerViewState get_AnalyzerViewState();
    public void set_AnalyzerViewState(LoadTestResultTypeAnalyzerViewState value);
    public LoadTestResultTypeSummary get_Summary();
    public void set_Summary(LoadTestResultTypeSummary value);
    public LoadTestRunStatusType get_runStatus();
    public void set_runStatus(LoadTestRunStatusType value);
    public int get_runId();
    public void set_runId(int value);
    public string get_controllerStartTime();
    public void set_controllerStartTime(string value);
    public int get_loadTestDuration();
    public void set_loadTestDuration(int value);
    public bool get_loadTestDurationSpecified();
    public void set_loadTestDurationSpecified(bool value);
    public int get_loadTestWarmupTime();
    public void set_loadTestWarmupTime(int value);
    public bool get_loadTestWarmupTimeSpecified();
    public void set_loadTestWarmupTimeSpecified(bool value);
    public bool get_previouslyViewed();
    public void set_previouslyViewed(bool value);
    public string get_resultsRepositoryConnectString();
    public void set_resultsRepositoryConnectString(string value);
    public LoadTestResultStoreType get_resultsStoreType();
    public void set_resultsStoreType(LoadTestResultStoreType value);
    public bool get_resultsStoreTypeSpecified();
    public void set_resultsStoreTypeSpecified(bool value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.LoadTestResultTypeAnalyzerViewState : object {
    private LoadTestRunDescriptorType loadTestRunDescriptorField;
    public LoadTestRunDescriptorType LoadTestRunDescriptor { get; public set; }
    public LoadTestRunDescriptorType get_LoadTestRunDescriptor();
    public void set_LoadTestRunDescriptor(LoadTestRunDescriptorType value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.LoadTestResultTypeSummary : object {
    private LoadTestResultTypeSummaryPerformanceCounterResult[] performanceCounterResultsField;
    private LoadTestResultTypeSummaryPageSummary[] pageSummariesField;
    private LoadTestResultTypeSummaryTestSummary[] testSummariesField;
    private LoadTestResultTypeSummaryTransactionSummary[] transactionSummariesField;
    [XmlArrayItemAttribute("PerformanceCounterResult")]
public LoadTestResultTypeSummaryPerformanceCounterResult[] PerformanceCounterResults { get; public set; }
    [XmlArrayItemAttribute("PageSummary")]
public LoadTestResultTypeSummaryPageSummary[] PageSummaries { get; public set; }
    [XmlArrayItemAttribute("TestSummary")]
public LoadTestResultTypeSummaryTestSummary[] TestSummaries { get; public set; }
    [XmlArrayItemAttribute("TransactionSummary")]
public LoadTestResultTypeSummaryTransactionSummary[] TransactionSummaries { get; public set; }
    public LoadTestResultTypeSummaryPerformanceCounterResult[] get_PerformanceCounterResults();
    public void set_PerformanceCounterResults(LoadTestResultTypeSummaryPerformanceCounterResult[] value);
    public LoadTestResultTypeSummaryPageSummary[] get_PageSummaries();
    public void set_PageSummaries(LoadTestResultTypeSummaryPageSummary[] value);
    public LoadTestResultTypeSummaryTestSummary[] get_TestSummaries();
    public void set_TestSummaries(LoadTestResultTypeSummaryTestSummary[] value);
    public LoadTestResultTypeSummaryTransactionSummary[] get_TransactionSummaries();
    public void set_TransactionSummaries(LoadTestResultTypeSummaryTransactionSummary[] value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.LoadTestResultTypeSummaryPageSummary : object {
    private string scenarioNameField;
    private string testNameField;
    private string urlField;
    private int pageCountField;
    private int responseTimeField;
    [XmlAttributeAttribute]
public string scenarioName { get; public set; }
    [XmlAttributeAttribute]
public string testName { get; public set; }
    [XmlAttributeAttribute]
public string url { get; public set; }
    [XmlAttributeAttribute]
public int pageCount { get; public set; }
    [XmlAttributeAttribute]
public int responseTime { get; public set; }
    public string get_scenarioName();
    public void set_scenarioName(string value);
    public string get_testName();
    public void set_testName(string value);
    public string get_url();
    public void set_url(string value);
    public int get_pageCount();
    public void set_pageCount(int value);
    public int get_responseTime();
    public void set_responseTime(int value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.LoadTestResultTypeSummaryPerformanceCounterResult : object {
    private string machineNameField;
    private string categoryNameField;
    private string instanceNameField;
    private string counterNameField;
    private double valueField;
    private bool isOverallResultCounterField;
    private bool higherIsBetterField;
    [XmlAttributeAttribute]
public string machineName { get; public set; }
    [XmlAttributeAttribute]
public string categoryName { get; public set; }
    [XmlAttributeAttribute]
public string instanceName { get; public set; }
    [XmlAttributeAttribute]
public string counterName { get; public set; }
    [XmlAttributeAttribute]
public double value { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool isOverallResultCounter { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool higherIsBetter { get; public set; }
    public string get_machineName();
    public void set_machineName(string value);
    public string get_categoryName();
    public void set_categoryName(string value);
    public string get_instanceName();
    public void set_instanceName(string value);
    public string get_counterName();
    public void set_counterName(string value);
    public double get_value();
    public void set_value(double value);
    public bool get_isOverallResultCounter();
    public void set_isOverallResultCounter(bool value);
    public bool get_higherIsBetter();
    public void set_higherIsBetter(bool value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.LoadTestResultTypeSummaryTestSummary : object {
    private string scenarioNameField;
    private string testNameField;
    private int totalTestsField;
    private int testsFailedField;
    private int averageDurationField;
    [XmlAttributeAttribute]
public string scenarioName { get; public set; }
    [XmlAttributeAttribute]
public string testName { get; public set; }
    [XmlAttributeAttribute]
public int totalTests { get; public set; }
    [XmlAttributeAttribute]
public int testsFailed { get; public set; }
    [XmlAttributeAttribute]
public int averageDuration { get; public set; }
    public string get_scenarioName();
    public void set_scenarioName(string value);
    public string get_testName();
    public void set_testName(string value);
    public int get_totalTests();
    public void set_totalTests(int value);
    public int get_testsFailed();
    public void set_testsFailed(int value);
    public int get_averageDuration();
    public void set_averageDuration(int value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.LoadTestResultTypeSummaryTransactionSummary : object {
    private string scenarioNameField;
    private string testNameField;
    private string transactionNameField;
    private int transactionCountField;
    private string elapsedTimeField;
    private string responseTimeField;
    [XmlAttributeAttribute]
public string scenarioName { get; public set; }
    [XmlAttributeAttribute]
public string testName { get; public set; }
    [XmlAttributeAttribute]
public string transactionName { get; public set; }
    [XmlAttributeAttribute]
public int transactionCount { get; public set; }
    [XmlAttributeAttribute]
public string elapsedTime { get; public set; }
    [XmlAttributeAttribute]
public string responseTime { get; public set; }
    public string get_scenarioName();
    public void set_scenarioName(string value);
    public string get_testName();
    public void set_testName(string value);
    public string get_transactionName();
    public void set_transactionName(string value);
    public int get_transactionCount();
    public void set_transactionCount(int value);
    public string get_elapsedTime();
    public void set_elapsedTime(string value);
    public string get_responseTime();
    public void set_responseTime(string value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.LoadTestRunDescriptorType : object {
    private GraphDescriptorType[] graphDescriptorsField;
    private bool isLegendPanelVisibleField;
    private bool isOverviewPanelVisibleField;
    private bool isCounterPanelVisibleField;
    private bool scrollingGraphField;
    private bool minMaxGraphField;
    private bool showHorizontalGridOnGraphField;
    private bool showThresholdsOnGraphField;
    private bool showComparisonField;
    private bool showZoomField;
    private bool lockZoomField;
    private LoadTestRunDescriptorViewType activeConsoleViewField;
    private string selectedGraphPanel1Field;
    private string selectedGraphPanel2Field;
    private string selectedGraphPanel3Field;
    private string selectedGraphPanel4Field;
    private PanelLayoutType graphPanelLayoutField;
    private PanelLayoutType tablePanelLayoutField;
    private string selectedTablePanel1Field;
    private string selectedTablePanel2Field;
    private string selectedTablePanel3Field;
    private string selectedTablePanel4Field;
    private string controllerNameField;
    private bool isLocalRunField;
    private string testRunIdField;
    private int repositoryRunIdField;
    [XmlArrayItemAttribute("GraphDescriptor")]
public GraphDescriptorType[] GraphDescriptors { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool isLegendPanelVisible { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool isOverviewPanelVisible { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool isCounterPanelVisible { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool scrollingGraph { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool minMaxGraph { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool showHorizontalGridOnGraph { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool showThresholdsOnGraph { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool showComparison { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool showZoom { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool lockZoom { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public LoadTestRunDescriptorViewType activeConsoleView { get; public set; }
    [XmlAttributeAttribute]
public string selectedGraphPanel1 { get; public set; }
    [XmlAttributeAttribute]
public string selectedGraphPanel2 { get; public set; }
    [XmlAttributeAttribute]
public string selectedGraphPanel3 { get; public set; }
    [XmlAttributeAttribute]
public string selectedGraphPanel4 { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public PanelLayoutType graphPanelLayout { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public PanelLayoutType tablePanelLayout { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("Tests")]
public string selectedTablePanel1 { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("Errors")]
public string selectedTablePanel2 { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("Thresholds")]
public string selectedTablePanel3 { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("Transactions")]
public string selectedTablePanel4 { get; public set; }
    [XmlAttributeAttribute]
public string controllerName { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool isLocalRun { get; public set; }
    [XmlAttributeAttribute]
public string testRunId { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("0")]
public int repositoryRunId { get; public set; }
    public GraphDescriptorType[] get_GraphDescriptors();
    public void set_GraphDescriptors(GraphDescriptorType[] value);
    public bool get_isLegendPanelVisible();
    public void set_isLegendPanelVisible(bool value);
    public bool get_isOverviewPanelVisible();
    public void set_isOverviewPanelVisible(bool value);
    public bool get_isCounterPanelVisible();
    public void set_isCounterPanelVisible(bool value);
    public bool get_scrollingGraph();
    public void set_scrollingGraph(bool value);
    public bool get_minMaxGraph();
    public void set_minMaxGraph(bool value);
    public bool get_showHorizontalGridOnGraph();
    public void set_showHorizontalGridOnGraph(bool value);
    public bool get_showThresholdsOnGraph();
    public void set_showThresholdsOnGraph(bool value);
    public bool get_showComparison();
    public void set_showComparison(bool value);
    public bool get_showZoom();
    public void set_showZoom(bool value);
    public bool get_lockZoom();
    public void set_lockZoom(bool value);
    public LoadTestRunDescriptorViewType get_activeConsoleView();
    public void set_activeConsoleView(LoadTestRunDescriptorViewType value);
    public string get_selectedGraphPanel1();
    public void set_selectedGraphPanel1(string value);
    public string get_selectedGraphPanel2();
    public void set_selectedGraphPanel2(string value);
    public string get_selectedGraphPanel3();
    public void set_selectedGraphPanel3(string value);
    public string get_selectedGraphPanel4();
    public void set_selectedGraphPanel4(string value);
    public PanelLayoutType get_graphPanelLayout();
    public void set_graphPanelLayout(PanelLayoutType value);
    public PanelLayoutType get_tablePanelLayout();
    public void set_tablePanelLayout(PanelLayoutType value);
    public string get_selectedTablePanel1();
    public void set_selectedTablePanel1(string value);
    public string get_selectedTablePanel2();
    public void set_selectedTablePanel2(string value);
    public string get_selectedTablePanel3();
    public void set_selectedTablePanel3(string value);
    public string get_selectedTablePanel4();
    public void set_selectedTablePanel4(string value);
    public string get_controllerName();
    public void set_controllerName(string value);
    public bool get_isLocalRun();
    public void set_isLocalRun(bool value);
    public string get_testRunId();
    public void set_testRunId(string value);
    public int get_repositoryRunId();
    public void set_repositoryRunId(int value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[XmlTypeAttribute]
public enum Chutzpah.VSTS.LoadTestRunDescriptorViewType : Enum {
    public int value__;
    public static LoadTestRunDescriptorViewType None;
    public static LoadTestRunDescriptorViewType Graph;
    public static LoadTestRunDescriptorViewType Summary;
    public static LoadTestRunDescriptorViewType Table;
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[XmlTypeAttribute]
public enum Chutzpah.VSTS.LoadTestRunStatusType : Enum {
    public int value__;
    public static LoadTestRunStatusType Connecting;
    public static LoadTestRunStatusType InitializingResultsCollection;
    public static LoadTestRunStatusType NotStarted;
    public static LoadTestRunStatusType Queued;
    public static LoadTestRunStatusType Starting;
    public static LoadTestRunStatusType Stopping;
    public static LoadTestRunStatusType Stopped;
    public static LoadTestRunStatusType WarmingUp;
    public static LoadTestRunStatusType WritingResults;
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute("LoadTest")]
public class Chutzpah.VSTS.LoadTestType : object {
    private LoadTestTypeScenarios[] scenariosField;
    private LoadTestTypeCounterSets[] counterSetsField;
    private LoadTestTypeRunConfigurations[] runConfigurationsField;
    private string idField;
    private string nameField;
    private string descriptionField;
    private string ownerField;
    private string storageField;
    private int priorityField;
    private bool priorityFieldSpecified;
    private bool enabledField;
    private bool enabledFieldSpecified;
    private string cssProjectStructureField;
    private string cssIterationField;
    private string deploymentItemsEditableField;
    private string workItemIdsField;
    private string traceLevelField;
    private string currentRunConfigField;
    private string loadTestPluginClassField;
    [XmlElementAttribute("Scenarios")]
public LoadTestTypeScenarios[] Scenarios { get; public set; }
    [XmlElementAttribute("CounterSets")]
public LoadTestTypeCounterSets[] CounterSets { get; public set; }
    [XmlElementAttribute("RunConfigurations")]
public LoadTestTypeRunConfigurations[] RunConfigurations { get; public set; }
    [XmlAttributeAttribute]
public string Id { get; public set; }
    [XmlAttributeAttribute]
public string Name { get; public set; }
    [XmlAttributeAttribute]
public string Description { get; public set; }
    [XmlAttributeAttribute]
public string Owner { get; public set; }
    [XmlAttributeAttribute]
public string storage { get; public set; }
    [XmlAttributeAttribute]
public int Priority { get; public set; }
    [XmlIgnoreAttribute]
public bool PrioritySpecified { get; public set; }
    [XmlAttributeAttribute]
public bool Enabled { get; public set; }
    [XmlIgnoreAttribute]
public bool EnabledSpecified { get; public set; }
    [XmlAttributeAttribute]
public string CssProjectStructure { get; public set; }
    [XmlAttributeAttribute]
public string CssIteration { get; public set; }
    [XmlAttributeAttribute]
public string DeploymentItemsEditable { get; public set; }
    [XmlAttributeAttribute]
public string WorkItemIds { get; public set; }
    [XmlAttributeAttribute]
public string TraceLevel { get; public set; }
    [XmlAttributeAttribute]
public string CurrentRunConfig { get; public set; }
    [XmlAttributeAttribute]
public string LoadTestPluginClass { get; public set; }
    public LoadTestTypeScenarios[] get_Scenarios();
    public void set_Scenarios(LoadTestTypeScenarios[] value);
    public LoadTestTypeCounterSets[] get_CounterSets();
    public void set_CounterSets(LoadTestTypeCounterSets[] value);
    public LoadTestTypeRunConfigurations[] get_RunConfigurations();
    public void set_RunConfigurations(LoadTestTypeRunConfigurations[] value);
    public string get_Id();
    public void set_Id(string value);
    public string get_Name();
    public void set_Name(string value);
    public string get_Description();
    public void set_Description(string value);
    public string get_Owner();
    public void set_Owner(string value);
    public string get_storage();
    public void set_storage(string value);
    public int get_Priority();
    public void set_Priority(int value);
    public bool get_PrioritySpecified();
    public void set_PrioritySpecified(bool value);
    public bool get_Enabled();
    public void set_Enabled(bool value);
    public bool get_EnabledSpecified();
    public void set_EnabledSpecified(bool value);
    public string get_CssProjectStructure();
    public void set_CssProjectStructure(string value);
    public string get_CssIteration();
    public void set_CssIteration(string value);
    public string get_DeploymentItemsEditable();
    public void set_DeploymentItemsEditable(string value);
    public string get_WorkItemIds();
    public void set_WorkItemIds(string value);
    public string get_TraceLevel();
    public void set_TraceLevel(string value);
    public string get_CurrentRunConfig();
    public void set_CurrentRunConfig(string value);
    public string get_LoadTestPluginClass();
    public void set_LoadTestPluginClass(string value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.LoadTestTypeCounterSets : object {
    private LoadTestTypeCounterSetsCounterSet[] counterSetField;
    [XmlElementAttribute("CounterSet")]
public LoadTestTypeCounterSetsCounterSet[] CounterSet { get; public set; }
    public LoadTestTypeCounterSetsCounterSet[] get_CounterSet();
    public void set_CounterSet(LoadTestTypeCounterSetsCounterSet[] value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.LoadTestTypeCounterSetsCounterSet : object {
    private LoadTestTypeCounterSetsCounterSetCounterCategories counterCategoriesField;
    private LoadTestTypeCounterSetsCounterSetDefaultCounter[] defaultCountersForAutomaticGraphsField;
    private string nameField;
    private string counterSetTypeField;
    private string locIdField;
    public LoadTestTypeCounterSetsCounterSetCounterCategories CounterCategories { get; public set; }
    [XmlArrayItemAttribute("DefaultCounter")]
public LoadTestTypeCounterSetsCounterSetDefaultCounter[] DefaultCountersForAutomaticGraphs { get; public set; }
    [XmlAttributeAttribute]
public string Name { get; public set; }
    [XmlAttributeAttribute]
public string CounterSetType { get; public set; }
    [XmlAttributeAttribute]
public string LocId { get; public set; }
    public LoadTestTypeCounterSetsCounterSetCounterCategories get_CounterCategories();
    public void set_CounterCategories(LoadTestTypeCounterSetsCounterSetCounterCategories value);
    public LoadTestTypeCounterSetsCounterSetDefaultCounter[] get_DefaultCountersForAutomaticGraphs();
    public void set_DefaultCountersForAutomaticGraphs(LoadTestTypeCounterSetsCounterSetDefaultCounter[] value);
    public string get_Name();
    public void set_Name(string value);
    public string get_CounterSetType();
    public void set_CounterSetType(string value);
    public string get_LocId();
    public void set_LocId(string value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.LoadTestTypeCounterSetsCounterSetCounterCategories : object {
    private LoadTestTypeCounterSetsCounterSetCounterCategoriesCounterCategory[] counterCategoryField;
    [XmlElementAttribute("CounterCategory")]
public LoadTestTypeCounterSetsCounterSetCounterCategoriesCounterCategory[] CounterCategory { get; public set; }
    public LoadTestTypeCounterSetsCounterSetCounterCategoriesCounterCategory[] get_CounterCategory();
    public void set_CounterCategory(LoadTestTypeCounterSetsCounterSetCounterCategoriesCounterCategory[] value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.LoadTestTypeCounterSetsCounterSetCounterCategoriesCounterCategory : object {
    private LoadTestTypeCounterSetsCounterSetCounterCategoriesCounterCategoryCounters countersField;
    private LoadTestTypeCounterSetsCounterSetCounterCategoriesCounterCategoryInstances instancesField;
    private string nameField;
    public LoadTestTypeCounterSetsCounterSetCounterCategoriesCounterCategoryCounters Counters { get; public set; }
    public LoadTestTypeCounterSetsCounterSetCounterCategoriesCounterCategoryInstances Instances { get; public set; }
    [XmlAttributeAttribute]
public string Name { get; public set; }
    public LoadTestTypeCounterSetsCounterSetCounterCategoriesCounterCategoryCounters get_Counters();
    public void set_Counters(LoadTestTypeCounterSetsCounterSetCounterCategoriesCounterCategoryCounters value);
    public LoadTestTypeCounterSetsCounterSetCounterCategoriesCounterCategoryInstances get_Instances();
    public void set_Instances(LoadTestTypeCounterSetsCounterSetCounterCategoriesCounterCategoryInstances value);
    public string get_Name();
    public void set_Name(string value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.LoadTestTypeCounterSetsCounterSetCounterCategoriesCounterCategoryCounters : object {
    private LoadTestTypeCounterSetsCounterSetCounterCategoriesCounterCategoryCountersCounter[] counterField;
    [XmlElementAttribute("Counter")]
public LoadTestTypeCounterSetsCounterSetCounterCategoriesCounterCategoryCountersCounter[] Counter { get; public set; }
    public LoadTestTypeCounterSetsCounterSetCounterCategoriesCounterCategoryCountersCounter[] get_Counter();
    public void set_Counter(LoadTestTypeCounterSetsCounterSetCounterCategoriesCounterCategoryCountersCounter[] value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.LoadTestTypeCounterSetsCounterSetCounterCategoriesCounterCategoryCountersCounter : object {
    private LoadTestTypeCounterSetsCounterSetCounterCategoriesCounterCategoryCountersCounterThresholdRules thresholdRulesField;
    private string nameField;
    private int rangeField;
    private bool rangeFieldSpecified;
    private string rangeGroupField;
    private bool higherIsBetterField;
    public LoadTestTypeCounterSetsCounterSetCounterCategoriesCounterCategoryCountersCounterThresholdRules ThresholdRules { get; public set; }
    [XmlAttributeAttribute]
public string Name { get; public set; }
    [XmlAttributeAttribute]
public int Range { get; public set; }
    [XmlIgnoreAttribute]
public bool RangeSpecified { get; public set; }
    [XmlAttributeAttribute]
public string RangeGroup { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool HigherIsBetter { get; public set; }
    public LoadTestTypeCounterSetsCounterSetCounterCategoriesCounterCategoryCountersCounterThresholdRules get_ThresholdRules();
    public void set_ThresholdRules(LoadTestTypeCounterSetsCounterSetCounterCategoriesCounterCategoryCountersCounterThresholdRules value);
    public string get_Name();
    public void set_Name(string value);
    public int get_Range();
    public void set_Range(int value);
    public bool get_RangeSpecified();
    public void set_RangeSpecified(bool value);
    public string get_RangeGroup();
    public void set_RangeGroup(string value);
    public bool get_HigherIsBetter();
    public void set_HigherIsBetter(bool value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.LoadTestTypeCounterSetsCounterSetCounterCategoriesCounterCategoryCountersCounterThresholdRules : object {
    private LoadTestTypeCounterSetsCounterSetCounterCategoriesCounterCategoryCountersCounterThresholdRulesThresholdRule[] thresholdRuleField;
    [XmlElementAttribute("ThresholdRule")]
public LoadTestTypeCounterSetsCounterSetCounterCategoriesCounterCategoryCountersCounterThresholdRulesThresholdRule[] ThresholdRule { get; public set; }
    public LoadTestTypeCounterSetsCounterSetCounterCategoriesCounterCategoryCountersCounterThresholdRulesThresholdRule[] get_ThresholdRule();
    public void set_ThresholdRule(LoadTestTypeCounterSetsCounterSetCounterCategoriesCounterCategoryCountersCounterThresholdRulesThresholdRule[] value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.LoadTestTypeCounterSetsCounterSetCounterCategoriesCounterCategoryCountersCounterThresholdRulesThresholdRule : object {
    private LoadTestTypeCounterSetsCounterSetCounterCategoriesCounterCategoryCountersCounterThresholdRulesThresholdRuleRuleParameters ruleParametersField;
    private string classnameField;
    public LoadTestTypeCounterSetsCounterSetCounterCategoriesCounterCategoryCountersCounterThresholdRulesThresholdRuleRuleParameters RuleParameters { get; public set; }
    [XmlAttributeAttribute]
public string Classname { get; public set; }
    public LoadTestTypeCounterSetsCounterSetCounterCategoriesCounterCategoryCountersCounterThresholdRulesThresholdRuleRuleParameters get_RuleParameters();
    public void set_RuleParameters(LoadTestTypeCounterSetsCounterSetCounterCategoriesCounterCategoryCountersCounterThresholdRulesThresholdRuleRuleParameters value);
    public string get_Classname();
    public void set_Classname(string value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.LoadTestTypeCounterSetsCounterSetCounterCategoriesCounterCategoryCountersCounterThresholdRulesThresholdRuleRuleParameters : object {
    private LoadTestTypeCounterSetsCounterSetCounterCategoriesCounterCategoryCountersCounterThresholdRulesThresholdRuleRuleParametersRuleParameter[] ruleParameterField;
    [XmlElementAttribute("RuleParameter")]
public LoadTestTypeCounterSetsCounterSetCounterCategoriesCounterCategoryCountersCounterThresholdRulesThresholdRuleRuleParametersRuleParameter[] RuleParameter { get; public set; }
    public LoadTestTypeCounterSetsCounterSetCounterCategoriesCounterCategoryCountersCounterThresholdRulesThresholdRuleRuleParametersRuleParameter[] get_RuleParameter();
    public void set_RuleParameter(LoadTestTypeCounterSetsCounterSetCounterCategoriesCounterCategoryCountersCounterThresholdRulesThresholdRuleRuleParametersRuleParameter[] value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.LoadTestTypeCounterSetsCounterSetCounterCategoriesCounterCategoryCountersCounterThresholdRulesThresholdRuleRuleParametersRuleParameter : object {
    private string nameField;
    private string valueField;
    [XmlAttributeAttribute]
public string Name { get; public set; }
    [XmlAttributeAttribute]
public string Value { get; public set; }
    public string get_Name();
    public void set_Name(string value);
    public string get_Value();
    public void set_Value(string value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.LoadTestTypeCounterSetsCounterSetCounterCategoriesCounterCategoryInstances : object {
    private LoadTestTypeCounterSetsCounterSetCounterCategoriesCounterCategoryInstancesInstance[] instanceField;
    [XmlElementAttribute("Instance")]
public LoadTestTypeCounterSetsCounterSetCounterCategoriesCounterCategoryInstancesInstance[] Instance { get; public set; }
    public LoadTestTypeCounterSetsCounterSetCounterCategoriesCounterCategoryInstancesInstance[] get_Instance();
    public void set_Instance(LoadTestTypeCounterSetsCounterSetCounterCategoriesCounterCategoryInstancesInstance[] value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.LoadTestTypeCounterSetsCounterSetCounterCategoriesCounterCategoryInstancesInstance : object {
    private string nameField;
    [XmlAttributeAttribute]
public string Name { get; public set; }
    public string get_Name();
    public void set_Name(string value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.LoadTestTypeCounterSetsCounterSetDefaultCounter : object {
    private string categoryNameField;
    private string counterNameField;
    private string instanceNameField;
    private string graphNameField;
    private int rangeField;
    private bool rangeFieldSpecified;
    private string runTypeField;
    [XmlAttributeAttribute]
public string CategoryName { get; public set; }
    [XmlAttributeAttribute]
public string CounterName { get; public set; }
    [XmlAttributeAttribute]
public string InstanceName { get; public set; }
    [XmlAttributeAttribute]
public string GraphName { get; public set; }
    [XmlAttributeAttribute]
public int Range { get; public set; }
    [XmlIgnoreAttribute]
public bool RangeSpecified { get; public set; }
    [XmlAttributeAttribute]
public string RunType { get; public set; }
    public string get_CategoryName();
    public void set_CategoryName(string value);
    public string get_CounterName();
    public void set_CounterName(string value);
    public string get_InstanceName();
    public void set_InstanceName(string value);
    public string get_GraphName();
    public void set_GraphName(string value);
    public int get_Range();
    public void set_Range(int value);
    public bool get_RangeSpecified();
    public void set_RangeSpecified(bool value);
    public string get_RunType();
    public void set_RunType(string value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.LoadTestTypeRunConfigurations : object {
    private LoadTestTypeRunConfigurationsRunConfiguration[] runConfigurationField;
    [XmlElementAttribute("RunConfiguration")]
public LoadTestTypeRunConfigurationsRunConfiguration[] RunConfiguration { get; public set; }
    public LoadTestTypeRunConfigurationsRunConfiguration[] get_RunConfiguration();
    public void set_RunConfiguration(LoadTestTypeRunConfigurationsRunConfiguration[] value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.LoadTestTypeRunConfigurationsRunConfiguration : object {
    private LoadTestTypeRunConfigurationsRunConfigurationCounterSetMappings counterSetMappingsField;
    private LoadTestTypeRunConfigurationsRunConfigurationContextParameters[] contextParametersField;
    private string nameField;
    private string descriptionField;
    private string resultsStoreTypeField;
    private string timingDetailsStorageField;
    private int maxErrorDetailsField;
    private int maxRequestUrlsReportedField;
    private int maxErrorsPerTypeField;
    private bool maxErrorsPerTypeFieldSpecified;
    private int maxThresholdViolationsField;
    private bool maxThresholdViolationsFieldSpecified;
    private bool useTestIterationsField;
    private bool useTestIterationsFieldSpecified;
    private int runDurationField;
    private int warmupTimeField;
    private int coolDownTimeField;
    private bool coolDownTimeFieldSpecified;
    private int testIterationsField;
    private bool testIterationsFieldSpecified;
    private WebTestConnectionModel webTestConnectionModelField;
    private int webTestConnectionPoolSizeField;
    private int sampleRateField;
    private LoadTestValidationLevel validationLevelField;
    private string sqlTracingConnectStringField;
    private string sqlTracingConnectStringDisplayValueField;
    private string sqlTracingDirectoryField;
    private bool sqlTracingEnabledField;
    private bool sqlTracingEnabledFieldSpecified;
    private int sqlTracingFileCountField;
    private bool sqlTracingFileCountFieldSpecified;
    private bool sqlTracingRolloverEnabledField;
    private bool sqlTracingRolloverEnabledFieldSpecified;
    private int sqlTracingMinimumDurationField;
    private bool sqlTracingMinimumDurationFieldSpecified;
    private bool runUnitTestsInAppDomainField;
    private bool runUnitTestsInAppDomainFieldSpecified;
    private bool saveTestLogsOnErrorField;
    private bool saveTestLogsOnErrorFieldSpecified;
    private int saveTestLogsFrequencyField;
    private bool saveTestLogsFrequencyFieldSpecified;
    public LoadTestTypeRunConfigurationsRunConfigurationCounterSetMappings CounterSetMappings { get; public set; }
    [XmlElementAttribute("ContextParameters")]
public LoadTestTypeRunConfigurationsRunConfigurationContextParameters[] ContextParameters { get; public set; }
    [XmlAttributeAttribute]
public string Name { get; public set; }
    [XmlAttributeAttribute]
public string Description { get; public set; }
    [XmlAttributeAttribute]
public string ResultsStoreType { get; public set; }
    [XmlAttributeAttribute]
public string TimingDetailsStorage { get; public set; }
    [XmlAttributeAttribute]
public int MaxErrorDetails { get; public set; }
    [XmlAttributeAttribute]
public int MaxRequestUrlsReported { get; public set; }
    [XmlAttributeAttribute]
public int MaxErrorsPerType { get; public set; }
    [XmlIgnoreAttribute]
public bool MaxErrorsPerTypeSpecified { get; public set; }
    [XmlAttributeAttribute]
public int MaxThresholdViolations { get; public set; }
    [XmlIgnoreAttribute]
public bool MaxThresholdViolationsSpecified { get; public set; }
    [XmlAttributeAttribute]
public bool UseTestIterations { get; public set; }
    [XmlIgnoreAttribute]
public bool UseTestIterationsSpecified { get; public set; }
    [XmlAttributeAttribute]
public int RunDuration { get; public set; }
    [XmlAttributeAttribute]
public int WarmupTime { get; public set; }
    [XmlAttributeAttribute]
public int CoolDownTime { get; public set; }
    [XmlIgnoreAttribute]
public bool CoolDownTimeSpecified { get; public set; }
    [XmlAttributeAttribute]
public int TestIterations { get; public set; }
    [XmlIgnoreAttribute]
public bool TestIterationsSpecified { get; public set; }
    [XmlAttributeAttribute]
public WebTestConnectionModel WebTestConnectionModel { get; public set; }
    [XmlAttributeAttribute]
public int WebTestConnectionPoolSize { get; public set; }
    [XmlAttributeAttribute]
public int SampleRate { get; public set; }
    [XmlAttributeAttribute]
public LoadTestValidationLevel ValidationLevel { get; public set; }
    [XmlAttributeAttribute]
public string SqlTracingConnectString { get; public set; }
    [XmlAttributeAttribute]
public string SqlTracingConnectStringDisplayValue { get; public set; }
    [XmlAttributeAttribute]
public string SqlTracingDirectory { get; public set; }
    [XmlAttributeAttribute]
public bool SqlTracingEnabled { get; public set; }
    [XmlIgnoreAttribute]
public bool SqlTracingEnabledSpecified { get; public set; }
    [XmlAttributeAttribute]
public int SqlTracingFileCount { get; public set; }
    [XmlIgnoreAttribute]
public bool SqlTracingFileCountSpecified { get; public set; }
    [XmlAttributeAttribute]
public bool SqlTracingRolloverEnabled { get; public set; }
    [XmlIgnoreAttribute]
public bool SqlTracingRolloverEnabledSpecified { get; public set; }
    [XmlAttributeAttribute]
public int SqlTracingMinimumDuration { get; public set; }
    [XmlIgnoreAttribute]
public bool SqlTracingMinimumDurationSpecified { get; public set; }
    [XmlAttributeAttribute]
public bool RunUnitTestsInAppDomain { get; public set; }
    [XmlIgnoreAttribute]
public bool RunUnitTestsInAppDomainSpecified { get; public set; }
    [XmlAttributeAttribute]
public bool SaveTestLogsOnError { get; public set; }
    [XmlIgnoreAttribute]
public bool SaveTestLogsOnErrorSpecified { get; public set; }
    [XmlAttributeAttribute]
public int SaveTestLogsFrequency { get; public set; }
    [XmlIgnoreAttribute]
public bool SaveTestLogsFrequencySpecified { get; public set; }
    public LoadTestTypeRunConfigurationsRunConfigurationCounterSetMappings get_CounterSetMappings();
    public void set_CounterSetMappings(LoadTestTypeRunConfigurationsRunConfigurationCounterSetMappings value);
    public LoadTestTypeRunConfigurationsRunConfigurationContextParameters[] get_ContextParameters();
    public void set_ContextParameters(LoadTestTypeRunConfigurationsRunConfigurationContextParameters[] value);
    public string get_Name();
    public void set_Name(string value);
    public string get_Description();
    public void set_Description(string value);
    public string get_ResultsStoreType();
    public void set_ResultsStoreType(string value);
    public string get_TimingDetailsStorage();
    public void set_TimingDetailsStorage(string value);
    public int get_MaxErrorDetails();
    public void set_MaxErrorDetails(int value);
    public int get_MaxRequestUrlsReported();
    public void set_MaxRequestUrlsReported(int value);
    public int get_MaxErrorsPerType();
    public void set_MaxErrorsPerType(int value);
    public bool get_MaxErrorsPerTypeSpecified();
    public void set_MaxErrorsPerTypeSpecified(bool value);
    public int get_MaxThresholdViolations();
    public void set_MaxThresholdViolations(int value);
    public bool get_MaxThresholdViolationsSpecified();
    public void set_MaxThresholdViolationsSpecified(bool value);
    public bool get_UseTestIterations();
    public void set_UseTestIterations(bool value);
    public bool get_UseTestIterationsSpecified();
    public void set_UseTestIterationsSpecified(bool value);
    public int get_RunDuration();
    public void set_RunDuration(int value);
    public int get_WarmupTime();
    public void set_WarmupTime(int value);
    public int get_CoolDownTime();
    public void set_CoolDownTime(int value);
    public bool get_CoolDownTimeSpecified();
    public void set_CoolDownTimeSpecified(bool value);
    public int get_TestIterations();
    public void set_TestIterations(int value);
    public bool get_TestIterationsSpecified();
    public void set_TestIterationsSpecified(bool value);
    public WebTestConnectionModel get_WebTestConnectionModel();
    public void set_WebTestConnectionModel(WebTestConnectionModel value);
    public int get_WebTestConnectionPoolSize();
    public void set_WebTestConnectionPoolSize(int value);
    public int get_SampleRate();
    public void set_SampleRate(int value);
    public LoadTestValidationLevel get_ValidationLevel();
    public void set_ValidationLevel(LoadTestValidationLevel value);
    public string get_SqlTracingConnectString();
    public void set_SqlTracingConnectString(string value);
    public string get_SqlTracingConnectStringDisplayValue();
    public void set_SqlTracingConnectStringDisplayValue(string value);
    public string get_SqlTracingDirectory();
    public void set_SqlTracingDirectory(string value);
    public bool get_SqlTracingEnabled();
    public void set_SqlTracingEnabled(bool value);
    public bool get_SqlTracingEnabledSpecified();
    public void set_SqlTracingEnabledSpecified(bool value);
    public int get_SqlTracingFileCount();
    public void set_SqlTracingFileCount(int value);
    public bool get_SqlTracingFileCountSpecified();
    public void set_SqlTracingFileCountSpecified(bool value);
    public bool get_SqlTracingRolloverEnabled();
    public void set_SqlTracingRolloverEnabled(bool value);
    public bool get_SqlTracingRolloverEnabledSpecified();
    public void set_SqlTracingRolloverEnabledSpecified(bool value);
    public int get_SqlTracingMinimumDuration();
    public void set_SqlTracingMinimumDuration(int value);
    public bool get_SqlTracingMinimumDurationSpecified();
    public void set_SqlTracingMinimumDurationSpecified(bool value);
    public bool get_RunUnitTestsInAppDomain();
    public void set_RunUnitTestsInAppDomain(bool value);
    public bool get_RunUnitTestsInAppDomainSpecified();
    public void set_RunUnitTestsInAppDomainSpecified(bool value);
    public bool get_SaveTestLogsOnError();
    public void set_SaveTestLogsOnError(bool value);
    public bool get_SaveTestLogsOnErrorSpecified();
    public void set_SaveTestLogsOnErrorSpecified(bool value);
    public int get_SaveTestLogsFrequency();
    public void set_SaveTestLogsFrequency(int value);
    public bool get_SaveTestLogsFrequencySpecified();
    public void set_SaveTestLogsFrequencySpecified(bool value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.LoadTestTypeRunConfigurationsRunConfigurationContextParameters : object {
    private LoadTestTypeRunConfigurationsRunConfigurationContextParametersContextParameter contextParameterField;
    public LoadTestTypeRunConfigurationsRunConfigurationContextParametersContextParameter ContextParameter { get; public set; }
    public LoadTestTypeRunConfigurationsRunConfigurationContextParametersContextParameter get_ContextParameter();
    public void set_ContextParameter(LoadTestTypeRunConfigurationsRunConfigurationContextParametersContextParameter value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.LoadTestTypeRunConfigurationsRunConfigurationContextParametersContextParameter : object {
    private string nameField;
    private string valueField;
    [XmlAttributeAttribute]
public string Name { get; public set; }
    [XmlAttributeAttribute]
public string Value { get; public set; }
    public string get_Name();
    public void set_Name(string value);
    public string get_Value();
    public void set_Value(string value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.LoadTestTypeRunConfigurationsRunConfigurationCounterSetMappings : object {
    private LoadTestTypeRunConfigurationsRunConfigurationCounterSetMappingsCounterSetMapping[] counterSetMappingField;
    [XmlElementAttribute("CounterSetMapping")]
public LoadTestTypeRunConfigurationsRunConfigurationCounterSetMappingsCounterSetMapping[] CounterSetMapping { get; public set; }
    public LoadTestTypeRunConfigurationsRunConfigurationCounterSetMappingsCounterSetMapping[] get_CounterSetMapping();
    public void set_CounterSetMapping(LoadTestTypeRunConfigurationsRunConfigurationCounterSetMappingsCounterSetMapping[] value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.LoadTestTypeRunConfigurationsRunConfigurationCounterSetMappingsCounterSetMapping : object {
    private LoadTestTypeRunConfigurationsRunConfigurationCounterSetMappingsCounterSetMappingCounterSetReferences counterSetReferencesField;
    private string computerNameField;
    public LoadTestTypeRunConfigurationsRunConfigurationCounterSetMappingsCounterSetMappingCounterSetReferences CounterSetReferences { get; public set; }
    [XmlAttributeAttribute]
public string ComputerName { get; public set; }
    public LoadTestTypeRunConfigurationsRunConfigurationCounterSetMappingsCounterSetMappingCounterSetReferences get_CounterSetReferences();
    public void set_CounterSetReferences(LoadTestTypeRunConfigurationsRunConfigurationCounterSetMappingsCounterSetMappingCounterSetReferences value);
    public string get_ComputerName();
    public void set_ComputerName(string value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.LoadTestTypeRunConfigurationsRunConfigurationCounterSetMappingsCounterSetMappingCounterSetReferences : object {
    private LoadTestTypeRunConfigurationsRunConfigurationCounterSetMappingsCounterSetMappingCounterSetReferencesCounterSetReference[] counterSetReferenceField;
    [XmlElementAttribute("CounterSetReference")]
public LoadTestTypeRunConfigurationsRunConfigurationCounterSetMappingsCounterSetMappingCounterSetReferencesCounterSetReference[] CounterSetReference { get; public set; }
    public LoadTestTypeRunConfigurationsRunConfigurationCounterSetMappingsCounterSetMappingCounterSetReferencesCounterSetReference[] get_CounterSetReference();
    public void set_CounterSetReference(LoadTestTypeRunConfigurationsRunConfigurationCounterSetMappingsCounterSetMappingCounterSetReferencesCounterSetReference[] value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.LoadTestTypeRunConfigurationsRunConfigurationCounterSetMappingsCounterSetMappingCounterSetReferencesCounterSetReference : object {
    private string counterSetNameField;
    [XmlAttributeAttribute]
public string CounterSetName { get; public set; }
    public string get_CounterSetName();
    public void set_CounterSetName(string value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.LoadTestTypeScenarios : object {
    private LoadTestTypeScenariosScenario[] scenarioField;
    [XmlElementAttribute("Scenario")]
public LoadTestTypeScenariosScenario[] Scenario { get; public set; }
    public LoadTestTypeScenariosScenario[] get_Scenario();
    public void set_Scenario(LoadTestTypeScenariosScenario[] value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.LoadTestTypeScenariosScenario : object {
    private LoadTestTypeScenariosScenarioThinkProfile thinkProfileField;
    private LoadTestTypeScenariosScenarioLoadProfile loadProfileField;
    private LoadTestTypeScenariosScenarioTestProfile[] testMixField;
    private LoadTestTypeScenariosScenarioBrowserMix browserMixField;
    private LoadTestTypeScenariosScenarioNetworkMix networkMixField;
    private string nameField;
    private string allowedAgentsField;
    private bool iPSwitchingField;
    private bool iPSwitchingFieldSpecified;
    private bool disableDuringWarmupField;
    private bool disableDuringWarmupFieldSpecified;
    private int delayStartTimeField;
    private bool delayStartTimeFieldSpecified;
    private int delayBetweenIterationsField;
    private bool delayBetweenIterationsFieldSpecified;
    private int maxTestIterationsField;
    private bool maxTestIterationsFieldSpecified;
    private int percentNewUsersField;
    private bool percentNewUsersFieldSpecified;
    private TestMixType testMixTypeField;
    private bool testMixTypeFieldSpecified;
    private bool applyDistributionToPacingDelayField;
    private bool applyDistributionToPacingDelayFieldSpecified;
    public LoadTestTypeScenariosScenarioThinkProfile ThinkProfile { get; public set; }
    public LoadTestTypeScenariosScenarioLoadProfile LoadProfile { get; public set; }
    [XmlArrayItemAttribute("TestProfile")]
public LoadTestTypeScenariosScenarioTestProfile[] TestMix { get; public set; }
    public LoadTestTypeScenariosScenarioBrowserMix BrowserMix { get; public set; }
    public LoadTestTypeScenariosScenarioNetworkMix NetworkMix { get; public set; }
    [XmlAttributeAttribute]
public string Name { get; public set; }
    [XmlAttributeAttribute]
public string AllowedAgents { get; public set; }
    [XmlAttributeAttribute]
public bool IPSwitching { get; public set; }
    [XmlIgnoreAttribute]
public bool IPSwitchingSpecified { get; public set; }
    [XmlAttributeAttribute]
public bool DisableDuringWarmup { get; public set; }
    [XmlIgnoreAttribute]
public bool DisableDuringWarmupSpecified { get; public set; }
    [XmlAttributeAttribute]
public int DelayStartTime { get; public set; }
    [XmlIgnoreAttribute]
public bool DelayStartTimeSpecified { get; public set; }
    [XmlAttributeAttribute]
public int DelayBetweenIterations { get; public set; }
    [XmlIgnoreAttribute]
public bool DelayBetweenIterationsSpecified { get; public set; }
    [XmlAttributeAttribute]
public int MaxTestIterations { get; public set; }
    [XmlIgnoreAttribute]
public bool MaxTestIterationsSpecified { get; public set; }
    [XmlAttributeAttribute]
public int PercentNewUsers { get; public set; }
    [XmlIgnoreAttribute]
public bool PercentNewUsersSpecified { get; public set; }
    [XmlAttributeAttribute]
public TestMixType TestMixType { get; public set; }
    [XmlIgnoreAttribute]
public bool TestMixTypeSpecified { get; public set; }
    [XmlAttributeAttribute]
public bool ApplyDistributionToPacingDelay { get; public set; }
    [XmlIgnoreAttribute]
public bool ApplyDistributionToPacingDelaySpecified { get; public set; }
    public LoadTestTypeScenariosScenarioThinkProfile get_ThinkProfile();
    public void set_ThinkProfile(LoadTestTypeScenariosScenarioThinkProfile value);
    public LoadTestTypeScenariosScenarioLoadProfile get_LoadProfile();
    public void set_LoadProfile(LoadTestTypeScenariosScenarioLoadProfile value);
    public LoadTestTypeScenariosScenarioTestProfile[] get_TestMix();
    public void set_TestMix(LoadTestTypeScenariosScenarioTestProfile[] value);
    public LoadTestTypeScenariosScenarioBrowserMix get_BrowserMix();
    public void set_BrowserMix(LoadTestTypeScenariosScenarioBrowserMix value);
    public LoadTestTypeScenariosScenarioNetworkMix get_NetworkMix();
    public void set_NetworkMix(LoadTestTypeScenariosScenarioNetworkMix value);
    public string get_Name();
    public void set_Name(string value);
    public string get_AllowedAgents();
    public void set_AllowedAgents(string value);
    public bool get_IPSwitching();
    public void set_IPSwitching(bool value);
    public bool get_IPSwitchingSpecified();
    public void set_IPSwitchingSpecified(bool value);
    public bool get_DisableDuringWarmup();
    public void set_DisableDuringWarmup(bool value);
    public bool get_DisableDuringWarmupSpecified();
    public void set_DisableDuringWarmupSpecified(bool value);
    public int get_DelayStartTime();
    public void set_DelayStartTime(int value);
    public bool get_DelayStartTimeSpecified();
    public void set_DelayStartTimeSpecified(bool value);
    public int get_DelayBetweenIterations();
    public void set_DelayBetweenIterations(int value);
    public bool get_DelayBetweenIterationsSpecified();
    public void set_DelayBetweenIterationsSpecified(bool value);
    public int get_MaxTestIterations();
    public void set_MaxTestIterations(int value);
    public bool get_MaxTestIterationsSpecified();
    public void set_MaxTestIterationsSpecified(bool value);
    public int get_PercentNewUsers();
    public void set_PercentNewUsers(int value);
    public bool get_PercentNewUsersSpecified();
    public void set_PercentNewUsersSpecified(bool value);
    public TestMixType get_TestMixType();
    public void set_TestMixType(TestMixType value);
    public bool get_TestMixTypeSpecified();
    public void set_TestMixTypeSpecified(bool value);
    public bool get_ApplyDistributionToPacingDelay();
    public void set_ApplyDistributionToPacingDelay(bool value);
    public bool get_ApplyDistributionToPacingDelaySpecified();
    public void set_ApplyDistributionToPacingDelaySpecified(bool value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.LoadTestTypeScenariosScenarioBrowserMix : object {
    private LoadTestTypeScenariosScenarioBrowserMixBrowserProfile[] browserProfileField;
    [XmlElementAttribute("BrowserProfile")]
public LoadTestTypeScenariosScenarioBrowserMixBrowserProfile[] BrowserProfile { get; public set; }
    public LoadTestTypeScenariosScenarioBrowserMixBrowserProfile[] get_BrowserProfile();
    public void set_BrowserProfile(LoadTestTypeScenariosScenarioBrowserMixBrowserProfile[] value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.LoadTestTypeScenariosScenarioBrowserMixBrowserProfile : object {
    private LoadTestTypeScenariosScenarioBrowserMixBrowserProfileBrowser browserField;
    private float percentageField;
    public LoadTestTypeScenariosScenarioBrowserMixBrowserProfileBrowser Browser { get; public set; }
    [XmlAttributeAttribute]
public float Percentage { get; public set; }
    public LoadTestTypeScenariosScenarioBrowserMixBrowserProfileBrowser get_Browser();
    public void set_Browser(LoadTestTypeScenariosScenarioBrowserMixBrowserProfileBrowser value);
    public float get_Percentage();
    public void set_Percentage(float value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.LoadTestTypeScenariosScenarioBrowserMixBrowserProfileBrowser : object {
    private LoadTestTypeScenariosScenarioBrowserMixBrowserProfileBrowserHeaders headersField;
    private string nameField;
    private int maxConnectionsField;
    private bool maxConnectionsFieldSpecified;
    public LoadTestTypeScenariosScenarioBrowserMixBrowserProfileBrowserHeaders Headers { get; public set; }
    [XmlAttributeAttribute]
public string Name { get; public set; }
    [XmlAttributeAttribute]
public int MaxConnections { get; public set; }
    [XmlIgnoreAttribute]
public bool MaxConnectionsSpecified { get; public set; }
    public LoadTestTypeScenariosScenarioBrowserMixBrowserProfileBrowserHeaders get_Headers();
    public void set_Headers(LoadTestTypeScenariosScenarioBrowserMixBrowserProfileBrowserHeaders value);
    public string get_Name();
    public void set_Name(string value);
    public int get_MaxConnections();
    public void set_MaxConnections(int value);
    public bool get_MaxConnectionsSpecified();
    public void set_MaxConnectionsSpecified(bool value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.LoadTestTypeScenariosScenarioBrowserMixBrowserProfileBrowserHeaders : object {
    private LoadTestTypeScenariosScenarioBrowserMixBrowserProfileBrowserHeadersHeader[] headerField;
    [XmlElementAttribute("Header")]
public LoadTestTypeScenariosScenarioBrowserMixBrowserProfileBrowserHeadersHeader[] Header { get; public set; }
    public LoadTestTypeScenariosScenarioBrowserMixBrowserProfileBrowserHeadersHeader[] get_Header();
    public void set_Header(LoadTestTypeScenariosScenarioBrowserMixBrowserProfileBrowserHeadersHeader[] value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.LoadTestTypeScenariosScenarioBrowserMixBrowserProfileBrowserHeadersHeader : object {
    private string nameField;
    private string valueField;
    [XmlAttributeAttribute]
public string Name { get; public set; }
    [XmlAttributeAttribute]
public string Value { get; public set; }
    public string get_Name();
    public void set_Name(string value);
    public string get_Value();
    public void set_Value(string value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.LoadTestTypeScenariosScenarioLoadProfile : object {
    private string patternField;
    private int initialUsersField;
    private int maxUsersField;
    private bool maxUsersFieldSpecified;
    private int stepUsersField;
    private bool stepUsersFieldSpecified;
    private int stepDurationField;
    private bool stepDurationFieldSpecified;
    private int stepRampTimeField;
    private bool stepRampTimeFieldSpecified;
    private string machineNameField;
    private string categoryNameField;
    private string counterNameField;
    private string instanceNameField;
    private int minUserCountField;
    private bool minUserCountFieldSpecified;
    private int maxUserCountField;
    private bool maxUserCountFieldSpecified;
    private int maxUserCountIncreaseField;
    private bool maxUserCountIncreaseFieldSpecified;
    private int maxUserCountDecreaseField;
    private bool maxUserCountDecreaseFieldSpecified;
    private int minTargetValueField;
    private bool minTargetValueFieldSpecified;
    private int maxTargetValueField;
    private bool maxTargetValueFieldSpecified;
    private bool higherValuesBetterField;
    private bool higherValuesBetterFieldSpecified;
    private bool stopAdjustingAtGoalField;
    private bool stopAdjustingAtGoalFieldSpecified;
    [XmlAttributeAttribute]
public string Pattern { get; public set; }
    [XmlAttributeAttribute]
public int InitialUsers { get; public set; }
    [XmlAttributeAttribute]
public int MaxUsers { get; public set; }
    [XmlIgnoreAttribute]
public bool MaxUsersSpecified { get; public set; }
    [XmlAttributeAttribute]
public int StepUsers { get; public set; }
    [XmlIgnoreAttribute]
public bool StepUsersSpecified { get; public set; }
    [XmlAttributeAttribute]
public int StepDuration { get; public set; }
    [XmlIgnoreAttribute]
public bool StepDurationSpecified { get; public set; }
    [XmlAttributeAttribute]
public int StepRampTime { get; public set; }
    [XmlIgnoreAttribute]
public bool StepRampTimeSpecified { get; public set; }
    [XmlAttributeAttribute]
public string MachineName { get; public set; }
    [XmlAttributeAttribute]
public string CategoryName { get; public set; }
    [XmlAttributeAttribute]
public string CounterName { get; public set; }
    [XmlAttributeAttribute]
public string InstanceName { get; public set; }
    [XmlAttributeAttribute]
public int MinUserCount { get; public set; }
    [XmlIgnoreAttribute]
public bool MinUserCountSpecified { get; public set; }
    [XmlAttributeAttribute]
public int MaxUserCount { get; public set; }
    [XmlIgnoreAttribute]
public bool MaxUserCountSpecified { get; public set; }
    [XmlAttributeAttribute]
public int MaxUserCountIncrease { get; public set; }
    [XmlIgnoreAttribute]
public bool MaxUserCountIncreaseSpecified { get; public set; }
    [XmlAttributeAttribute]
public int MaxUserCountDecrease { get; public set; }
    [XmlIgnoreAttribute]
public bool MaxUserCountDecreaseSpecified { get; public set; }
    [XmlAttributeAttribute]
public int MinTargetValue { get; public set; }
    [XmlIgnoreAttribute]
public bool MinTargetValueSpecified { get; public set; }
    [XmlAttributeAttribute]
public int MaxTargetValue { get; public set; }
    [XmlIgnoreAttribute]
public bool MaxTargetValueSpecified { get; public set; }
    [XmlAttributeAttribute]
public bool HigherValuesBetter { get; public set; }
    [XmlIgnoreAttribute]
public bool HigherValuesBetterSpecified { get; public set; }
    [XmlAttributeAttribute]
public bool StopAdjustingAtGoal { get; public set; }
    [XmlIgnoreAttribute]
public bool StopAdjustingAtGoalSpecified { get; public set; }
    public string get_Pattern();
    public void set_Pattern(string value);
    public int get_InitialUsers();
    public void set_InitialUsers(int value);
    public int get_MaxUsers();
    public void set_MaxUsers(int value);
    public bool get_MaxUsersSpecified();
    public void set_MaxUsersSpecified(bool value);
    public int get_StepUsers();
    public void set_StepUsers(int value);
    public bool get_StepUsersSpecified();
    public void set_StepUsersSpecified(bool value);
    public int get_StepDuration();
    public void set_StepDuration(int value);
    public bool get_StepDurationSpecified();
    public void set_StepDurationSpecified(bool value);
    public int get_StepRampTime();
    public void set_StepRampTime(int value);
    public bool get_StepRampTimeSpecified();
    public void set_StepRampTimeSpecified(bool value);
    public string get_MachineName();
    public void set_MachineName(string value);
    public string get_CategoryName();
    public void set_CategoryName(string value);
    public string get_CounterName();
    public void set_CounterName(string value);
    public string get_InstanceName();
    public void set_InstanceName(string value);
    public int get_MinUserCount();
    public void set_MinUserCount(int value);
    public bool get_MinUserCountSpecified();
    public void set_MinUserCountSpecified(bool value);
    public int get_MaxUserCount();
    public void set_MaxUserCount(int value);
    public bool get_MaxUserCountSpecified();
    public void set_MaxUserCountSpecified(bool value);
    public int get_MaxUserCountIncrease();
    public void set_MaxUserCountIncrease(int value);
    public bool get_MaxUserCountIncreaseSpecified();
    public void set_MaxUserCountIncreaseSpecified(bool value);
    public int get_MaxUserCountDecrease();
    public void set_MaxUserCountDecrease(int value);
    public bool get_MaxUserCountDecreaseSpecified();
    public void set_MaxUserCountDecreaseSpecified(bool value);
    public int get_MinTargetValue();
    public void set_MinTargetValue(int value);
    public bool get_MinTargetValueSpecified();
    public void set_MinTargetValueSpecified(bool value);
    public int get_MaxTargetValue();
    public void set_MaxTargetValue(int value);
    public bool get_MaxTargetValueSpecified();
    public void set_MaxTargetValueSpecified(bool value);
    public bool get_HigherValuesBetter();
    public void set_HigherValuesBetter(bool value);
    public bool get_HigherValuesBetterSpecified();
    public void set_HigherValuesBetterSpecified(bool value);
    public bool get_StopAdjustingAtGoal();
    public void set_StopAdjustingAtGoal(bool value);
    public bool get_StopAdjustingAtGoalSpecified();
    public void set_StopAdjustingAtGoalSpecified(bool value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.LoadTestTypeScenariosScenarioNetworkMix : object {
    private LoadTestTypeScenariosScenarioNetworkMixNetworkProfile[] networkProfileField;
    [XmlElementAttribute("NetworkProfile")]
public LoadTestTypeScenariosScenarioNetworkMixNetworkProfile[] NetworkProfile { get; public set; }
    public LoadTestTypeScenariosScenarioNetworkMixNetworkProfile[] get_NetworkProfile();
    public void set_NetworkProfile(LoadTestTypeScenariosScenarioNetworkMixNetworkProfile[] value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.LoadTestTypeScenariosScenarioNetworkMixNetworkProfile : object {
    private NetworkType networkField;
    private float percentageField;
    public NetworkType Network { get; public set; }
    [XmlAttributeAttribute]
public float Percentage { get; public set; }
    public NetworkType get_Network();
    public void set_Network(NetworkType value);
    public float get_Percentage();
    public void set_Percentage(float value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.LoadTestTypeScenariosScenarioTestProfile : object {
    private string nameField;
    private string pathField;
    private string idField;
    private float percentageField;
    private string typeField;
    [XmlAttributeAttribute]
public string Name { get; public set; }
    [XmlAttributeAttribute]
public string Path { get; public set; }
    [XmlAttributeAttribute]
public string Id { get; public set; }
    [XmlAttributeAttribute]
public float Percentage { get; public set; }
    [XmlAttributeAttribute]
public string Type { get; public set; }
    public string get_Name();
    public void set_Name(string value);
    public string get_Path();
    public void set_Path(string value);
    public string get_Id();
    public void set_Id(string value);
    public float get_Percentage();
    public void set_Percentage(float value);
    public string get_Type();
    public void set_Type(string value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.LoadTestTypeScenariosScenarioThinkProfile : object {
    private string patternField;
    private float valueField;
    [XmlAttributeAttribute]
public string Pattern { get; public set; }
    [XmlAttributeAttribute]
public float Value { get; public set; }
    public string get_Pattern();
    public void set_Pattern(string value);
    public float get_Value();
    public void set_Value(float value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[XmlTypeAttribute]
public enum Chutzpah.VSTS.LoadTestValidationLevel : Enum {
    public int value__;
    public static LoadTestValidationLevel Low;
    public static LoadTestValidationLevel Medium;
    public static LoadTestValidationLevel High;
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class Chutzpah.VSTS.Loss : object {
    private object itemField;
    [XmlElementAttribute("Burst", "Chutzpah.VSTS.BurstLossType")]
[XmlElementAttribute("Periodic", "Chutzpah.VSTS.PeriodicLossType")]
[XmlElementAttribute("Random", "Chutzpah.VSTS.RandomLossType")]
[XmlElementAttribute("Statistical", "Chutzpah.VSTS.StatisticalType")]
public object Item { get; public set; }
    public object get_Item();
    public void set_Item(object value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.ManualTestResultType : TestResultType {
    private object commentsField;
    private string testFileField;
    public object Comments { get; public set; }
    [XmlAttributeAttribute]
public string testFile { get; public set; }
    public object get_Comments();
    public void set_Comments(object value);
    public string get_testFile();
    public void set_testFile(string value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.MsecType : object {
    private MsecTypeUnit unitField;
    private bool unitFieldSpecified;
    private string valueField;
    [XmlAttributeAttribute]
public MsecTypeUnit unit { get; public set; }
    [XmlIgnoreAttribute]
public bool unitSpecified { get; public set; }
    [XmlTextAttribute]
public string Value { get; public set; }
    public MsecTypeUnit get_unit();
    public void set_unit(MsecTypeUnit value);
    public bool get_unitSpecified();
    public void set_unitSpecified(bool value);
    public string get_Value();
    public void set_Value(string value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[XmlTypeAttribute]
public enum Chutzpah.VSTS.MsecTypeUnit : Enum {
    public int value__;
    public static MsecTypeUnit msec;
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.NameValuePropertyType : object {
    private string nameField;
    private string valueField;
    [XmlAttributeAttribute]
public string name { get; public set; }
    [XmlAttributeAttribute]
public string value { get; public set; }
    public string get_name();
    public void set_name(string value);
    public string get_value();
    public void set_value(string value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute("NetworkEmulationProfile")]
public class Chutzpah.VSTS.NetworkEmulationProfileType : object {
    private NetworkEmulationProfileTypeEmulation emulationField;
    private string nameField;
    private string bandwidthInKbpsField;
    public NetworkEmulationProfileTypeEmulation Emulation { get; public set; }
    [XmlAttributeAttribute]
public string name { get; public set; }
    [XmlAttributeAttribute]
public string bandwidthInKbps { get; public set; }
    public NetworkEmulationProfileTypeEmulation get_Emulation();
    public void set_Emulation(NetworkEmulationProfileTypeEmulation value);
    public string get_name();
    public void set_name(string value);
    public string get_bandwidthInKbps();
    public void set_bandwidthInKbps(string value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.NetworkEmulationProfileTypeEmulation : object {
    private XmlElement[] anyField;
    [XmlAnyElementAttribute]
public XmlElement[] Any { get; public set; }
    public XmlElement[] get_Any();
    public void set_Any(XmlElement[] value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.NetworkType : object {
    private string nameField;
    private float bandwidthInKbpsField;
    private string networkProfileConfigurationXmlField;
    [XmlAttributeAttribute]
public string Name { get; public set; }
    [XmlAttributeAttribute]
public float BandwidthInKbps { get; public set; }
    [XmlAttributeAttribute]
public string NetworkProfileConfigurationXml { get; public set; }
    public string get_Name();
    public void set_Name(string value);
    public float get_BandwidthInKbps();
    public void set_BandwidthInKbps(float value);
    public string get_NetworkProfileConfigurationXml();
    public void set_NetworkProfileConfigurationXml(string value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.NormalLatencyType : object {
    private MsecType averageField;
    private MsecType deviationField;
    public MsecType Average { get; public set; }
    public MsecType Deviation { get; public set; }
    public MsecType get_Average();
    public void set_Average(MsecType value);
    public MsecType get_Deviation();
    public void set_Deviation(MsecType value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.NormalQueueType : object {
    private UnitType queueModeField;
    private string sizeField;
    private DropType dropTypeField;
    public UnitType QueueMode { get; public set; }
    [XmlElementAttribute]
public string Size { get; public set; }
    public DropType DropType { get; public set; }
    public UnitType get_QueueMode();
    public void set_QueueMode(UnitType value);
    public string get_Size();
    public void set_Size(string value);
    public DropType get_DropType();
    public void set_DropType(DropType value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.NormalReorderType : object {
    private decimal rateField;
    private double deviationField;
    private ushort maxPacketLagField;
    public decimal Rate { get; public set; }
    public double Deviation { get; public set; }
    public ushort MaxPacketLag { get; public set; }
    public decimal get_Rate();
    public void set_Rate(decimal value);
    public double get_Deviation();
    public void set_Deviation(double value);
    public ushort get_MaxPacketLag();
    public void set_MaxPacketLag(ushort value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute("OrderedTest")]
public class Chutzpah.VSTS.OrderedTestType : BaseTestType {
    private LinkType[] testLinksField;
    private bool continueAfterFailureField;
    [XmlArrayItemAttribute("TestLink")]
public LinkType[] TestLinks { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool continueAfterFailure { get; public set; }
    public LinkType[] get_TestLinks();
    public void set_TestLinks(LinkType[] value);
    public bool get_continueAfterFailure();
    public void set_continueAfterFailure(bool value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.OutputType : object {
    private object stdOutField;
    private object stdErrField;
    private object debugTraceField;
    private object traceInfoField;
    private OutputTypeErrorInfo errorInfoField;
    private object exceptionField;
    private Object[] textMessagesField;
    public object StdOut { get; public set; }
    public object StdErr { get; public set; }
    public object DebugTrace { get; public set; }
    public object TraceInfo { get; public set; }
    public OutputTypeErrorInfo ErrorInfo { get; public set; }
    public object Exception { get; public set; }
    [XmlArrayItemAttribute("Message")]
public Object[] TextMessages { get; public set; }
    public object get_StdOut();
    public void set_StdOut(object value);
    public object get_StdErr();
    public void set_StdErr(object value);
    public object get_DebugTrace();
    public void set_DebugTrace(object value);
    public object get_TraceInfo();
    public void set_TraceInfo(object value);
    public OutputTypeErrorInfo get_ErrorInfo();
    public void set_ErrorInfo(OutputTypeErrorInfo value);
    public object get_Exception();
    public void set_Exception(object value);
    public Object[] get_TextMessages();
    public void set_TextMessages(Object[] value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.OutputTypeErrorInfo : object {
    private object messageField;
    private object stackTraceField;
    public object Message { get; public set; }
    public object StackTrace { get; public set; }
    public object get_Message();
    public void set_Message(object value);
    public object get_StackTrace();
    public void set_StackTrace(object value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[XmlTypeAttribute]
public enum Chutzpah.VSTS.PanelLayoutType : Enum {
    public int value__;
    public static PanelLayoutType One;
    public static PanelLayoutType TwoHorizontal;
    public static PanelLayoutType TwoVertical;
    public static PanelLayoutType ThreeLeft;
    public static PanelLayoutType ThreeRight;
    public static PanelLayoutType ThreeTop;
    public static PanelLayoutType ThreeBottom;
    public static PanelLayoutType ThreeHorizontal;
    public static PanelLayoutType ThreeVertical;
    public static PanelLayoutType FourHorizontal;
    public static PanelLayoutType FourVertical;
    public static PanelLayoutType FourGrid;
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.ParetoTrafficType : ExponentialTrafficType {
    private double shapeField;
    public double Shape { get; public set; }
    public double get_Shape();
    public void set_Shape(double value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.PeriodicDisconnectionType : object {
    private decimal rateField;
    private SecType connectionTimeField;
    private SecType disconnectionTimeField;
    public decimal Rate { get; public set; }
    public SecType ConnectionTime { get; public set; }
    public SecType DisconnectionTime { get; public set; }
    public decimal get_Rate();
    public void set_Rate(decimal value);
    public SecType get_ConnectionTime();
    public void set_ConnectionTime(SecType value);
    public SecType get_DisconnectionTime();
    public void set_DisconnectionTime(SecType value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.PeriodicLossType : object {
    private string perPacketsField;
    [XmlElementAttribute]
public string PerPackets { get; public set; }
    public string get_PerPackets();
    public void set_PerPackets(string value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute("ManualTest")]
public class Chutzpah.VSTS.PlainTextManualTestType : BaseTestType {
    private PlainTextManualTestTypeBodyText bodyTextField;
    public PlainTextManualTestTypeBodyText BodyText { get; public set; }
    public PlainTextManualTestTypeBodyText get_BodyText();
    public void set_BodyText(PlainTextManualTestTypeBodyText value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.PlainTextManualTestTypeBodyText : object {
    private XmlNode[] anyField;
    [XmlTextAttribute]
[XmlAnyElementAttribute]
public XmlNode[] Any { get; public set; }
    public XmlNode[] get_Any();
    public void set_Any(XmlNode[] value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.PlotDescriptorType : object {
    private CounterDescriptorType counterDescriptorField;
    private int colorArgbField;
    private int lineStyleField;
    private double fixedRangeField;
    private bool showOnGraphField;
    private bool isSelectedField;
    private string counterMetadataField;
    private string rangeGroupField;
    public CounterDescriptorType CounterDescriptor { get; public set; }
    [XmlAttributeAttribute]
public int colorArgb { get; public set; }
    [XmlAttributeAttribute]
public int lineStyle { get; public set; }
    [XmlAttributeAttribute]
public double fixedRange { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool showOnGraph { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool isSelected { get; public set; }
    [XmlAttributeAttribute]
public string counterMetadata { get; public set; }
    [XmlAttributeAttribute]
public string rangeGroup { get; public set; }
    public CounterDescriptorType get_CounterDescriptor();
    public void set_CounterDescriptor(CounterDescriptorType value);
    public int get_colorArgb();
    public void set_colorArgb(int value);
    public int get_lineStyle();
    public void set_lineStyle(int value);
    public double get_fixedRange();
    public void set_fixedRange(double value);
    public bool get_showOnGraph();
    public void set_showOnGraph(bool value);
    public bool get_isSelected();
    public void set_isSelected(bool value);
    public string get_counterMetadata();
    public void set_counterMetadata(string value);
    public string get_rangeGroup();
    public void set_rangeGroup(string value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[XmlTypeAttribute]
[XmlRootAttribute]
public enum Chutzpah.VSTS.Protocol : Enum {
    public int value__;
    public static Protocol ICMP;
    public static Protocol TCP;
    public static Protocol UDP;
    public static Protocol ECP;
    public static Protocol ICMPv6;
    public static Protocol HTTP;
    public static Protocol FTP;
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.RandomErrorType : object {
    private ErrorUnitType errorUnitField;
    private decimal rateField;
    public ErrorUnitType ErrorUnit { get; public set; }
    public decimal Rate { get; public set; }
    public ErrorUnitType get_ErrorUnit();
    public void set_ErrorUnit(ErrorUnitType value);
    public decimal get_Rate();
    public void set_Rate(decimal value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.RandomLossType : object {
    private decimal rateField;
    public decimal Rate { get; public set; }
    public decimal get_Rate();
    public void set_Rate(decimal value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.RangeType : object {
    private string lowerField;
    private string upperField;
    [XmlAttributeAttribute]
public string lower { get; public set; }
    [XmlAttributeAttribute]
public string upper { get; public set; }
    public string get_lower();
    public void set_lower(string value);
    public string get_upper();
    public void set_upper(string value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.RedQueueType : object {
    private DropType dropTypeField;
    private UnitType queueModeField;
    private string minPacketField;
    private string maxPacketField;
    private string packetSizeField;
    public DropType DropType { get; public set; }
    public UnitType QueueMode { get; public set; }
    [XmlElementAttribute]
public string MinPacket { get; public set; }
    [XmlElementAttribute]
public string MaxPacket { get; public set; }
    [XmlElementAttribute]
public string PacketSize { get; public set; }
    public DropType get_DropType();
    public void set_DropType(DropType value);
    public UnitType get_QueueMode();
    public void set_QueueMode(UnitType value);
    public string get_MinPacket();
    public void set_MinPacket(string value);
    public string get_MaxPacket();
    public void set_MaxPacket(string value);
    public string get_PacketSize();
    public void set_PacketSize(string value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class Chutzpah.VSTS.Reorder : object {
    private object itemField;
    [XmlElementAttribute("Empirical1", "Chutzpah.VSTS.Empirical1Type")]
[XmlElementAttribute("Empirical2", "Chutzpah.VSTS.Empirical2Type")]
[XmlElementAttribute("Normal", "Chutzpah.VSTS.NormalReorderType")]
public object Item { get; public set; }
    public object get_Item();
    public void set_Item(object value);
}
[XmlIncludeAttribute("Chutzpah.VSTS.RuntimeResolutionDirectoryType")]
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.ResolutionDirectoryType : object {
    private string pathField;
    private bool includeSubDirectoriesField;
    [XmlAttributeAttribute]
public string path { get; public set; }
    [XmlAttributeAttribute]
public bool includeSubDirectories { get; public set; }
    public string get_path();
    public void set_path(string value);
    public bool get_includeSubDirectories();
    public void set_includeSubDirectories(bool value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.ResultFilesType : object {
    private ResultFilesTypeResultFile[] resultFileField;
    [XmlElementAttribute("ResultFile")]
public ResultFilesTypeResultFile[] ResultFile { get; public set; }
    public ResultFilesTypeResultFile[] get_ResultFile();
    public void set_ResultFile(ResultFilesTypeResultFile[] value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.ResultFilesTypeResultFile : object {
    private string pathField;
    [XmlAttributeAttribute]
public string path { get; public set; }
    public string get_path();
    public void set_path(string value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.ResultsType : object {
    private Object[] itemsField;
    private ItemsChoiceType3[] itemsElementNameField;
    [XmlAnyElementAttribute]
[XmlElementAttribute("LoadTestResult", "Chutzpah.VSTS.LoadTestResultType")]
[XmlElementAttribute("ManualTestResult", "Chutzpah.VSTS.ManualTestResultType")]
[XmlElementAttribute("TestResult", "Chutzpah.VSTS.TestResultType")]
[XmlElementAttribute("TestResultAggregation", "Chutzpah.VSTS.TestResultAggregationType")]
[XmlElementAttribute("UnitTestResult", "Chutzpah.VSTS.UnitTestResultType")]
[XmlChoiceIdentifierAttribute("ItemsElementName")]
public Object[] Items { get; public set; }
    [XmlElementAttribute("ItemsElementName")]
[XmlIgnoreAttribute]
public ItemsChoiceType3[] ItemsElementName { get; public set; }
    public Object[] get_Items();
    public void set_Items(Object[] value);
    public ItemsChoiceType3[] get_ItemsElementName();
    public void set_ItemsElementName(ItemsChoiceType3[] value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.RuleResultType : object {
    private RuleResultTypeRuleProperty[] rulePropertiesField;
    private string nameField;
    private string ruleTypeField;
    private bool successField;
    private string messageField;
    [XmlArrayItemAttribute("RuleProperty")]
public RuleResultTypeRuleProperty[] RuleProperties { get; public set; }
    [XmlAttributeAttribute]
public string name { get; public set; }
    [XmlAttributeAttribute]
public string ruleType { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool success { get; public set; }
    [XmlAttributeAttribute]
public string message { get; public set; }
    public RuleResultTypeRuleProperty[] get_RuleProperties();
    public void set_RuleProperties(RuleResultTypeRuleProperty[] value);
    public string get_name();
    public void set_name(string value);
    public string get_ruleType();
    public void set_ruleType(string value);
    public bool get_success();
    public void set_success(bool value);
    public string get_message();
    public void set_message(string value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.RuleResultTypeRuleProperty : object {
    private string nameField;
    private string valueField;
    [XmlAttributeAttribute]
public string name { get; public set; }
    [XmlAttributeAttribute]
public string value { get; public set; }
    public string get_name();
    public void set_name(string value);
    public string get_value();
    public void set_value(string value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.RuntimeResolutionDirectoryType : ResolutionDirectoryType {
    private bool useLoadContextField;
    private bool useLoadContextFieldSpecified;
    [XmlAttributeAttribute]
public bool useLoadContext { get; public set; }
    [XmlIgnoreAttribute]
public bool useLoadContextSpecified { get; public set; }
    public bool get_useLoadContext();
    public void set_useLoadContext(bool value);
    public bool get_useLoadContextSpecified();
    public void set_useLoadContextSpecified(bool value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.ScenarioType : object {
    private ScenarioTypeLoadProfile loadProfileField;
    private ScenarioTypeThinkProfile thinkProfileField;
    private ScenarioTypeTestProfile[] testMixField;
    private ScenarioTypeBrowserProfile[] browserMixField;
    private ScenarioTypeNetworkProfile[] networkMixField;
    private string testMixTypeField;
    private string nameField;
    private string allowedAgentsField;
    private bool ipSwitchingField;
    private bool disableDuringWarmupField;
    private int delayBetweenIterationsField;
    private int maxTestIterationsField;
    private int delayStartTimeField;
    private int percentNewUsersField;
    public ScenarioTypeLoadProfile LoadProfile { get; public set; }
    public ScenarioTypeThinkProfile ThinkProfile { get; public set; }
    [XmlArrayItemAttribute("TestProfile")]
public ScenarioTypeTestProfile[] TestMix { get; public set; }
    [XmlArrayItemAttribute("BrowserProfile")]
public ScenarioTypeBrowserProfile[] BrowserMix { get; public set; }
    [XmlArrayItemAttribute("NetworkProfile")]
public ScenarioTypeNetworkProfile[] NetworkMix { get; public set; }
    [XmlAttributeAttribute]
public string testMixType { get; public set; }
    [XmlAttributeAttribute]
public string name { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("")]
public string allowedAgents { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool ipSwitching { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool disableDuringWarmup { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("0")]
public int delayBetweenIterations { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("0")]
public int maxTestIterations { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("0")]
public int delayStartTime { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("100")]
public int percentNewUsers { get; public set; }
    public ScenarioTypeLoadProfile get_LoadProfile();
    public void set_LoadProfile(ScenarioTypeLoadProfile value);
    public ScenarioTypeThinkProfile get_ThinkProfile();
    public void set_ThinkProfile(ScenarioTypeThinkProfile value);
    public ScenarioTypeTestProfile[] get_TestMix();
    public void set_TestMix(ScenarioTypeTestProfile[] value);
    public ScenarioTypeBrowserProfile[] get_BrowserMix();
    public void set_BrowserMix(ScenarioTypeBrowserProfile[] value);
    public ScenarioTypeNetworkProfile[] get_NetworkMix();
    public void set_NetworkMix(ScenarioTypeNetworkProfile[] value);
    public string get_testMixType();
    public void set_testMixType(string value);
    public string get_name();
    public void set_name(string value);
    public string get_allowedAgents();
    public void set_allowedAgents(string value);
    public bool get_ipSwitching();
    public void set_ipSwitching(bool value);
    public bool get_disableDuringWarmup();
    public void set_disableDuringWarmup(bool value);
    public int get_delayBetweenIterations();
    public void set_delayBetweenIterations(int value);
    public int get_maxTestIterations();
    public void set_maxTestIterations(int value);
    public int get_delayStartTime();
    public void set_delayStartTime(int value);
    public int get_percentNewUsers();
    public void set_percentNewUsers(int value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.ScenarioTypeBrowserProfile : object {
    private BrowserType browserField;
    private int percentageField;
    private bool percentageFieldSpecified;
    public BrowserType Browser { get; public set; }
    [XmlAttributeAttribute]
public int percentage { get; public set; }
    [XmlIgnoreAttribute]
public bool percentageSpecified { get; public set; }
    public BrowserType get_Browser();
    public void set_Browser(BrowserType value);
    public int get_percentage();
    public void set_percentage(int value);
    public bool get_percentageSpecified();
    public void set_percentageSpecified(bool value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.ScenarioTypeLoadProfile : object {
    private int patternField;
    private int initialUsersField;
    [XmlAttributeAttribute]
[DefaultValueAttribute("0")]
public int pattern { get; public set; }
    [XmlAttributeAttribute]
public int initialUsers { get; public set; }
    public int get_pattern();
    public void set_pattern(int value);
    public int get_initialUsers();
    public void set_initialUsers(int value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.ScenarioTypeNetworkProfile : object {
    private NetworkType networkField;
    private int percentageField;
    private bool percentageFieldSpecified;
    public NetworkType Network { get; public set; }
    [XmlAttributeAttribute]
public int percentage { get; public set; }
    [XmlIgnoreAttribute]
public bool percentageSpecified { get; public set; }
    public NetworkType get_Network();
    public void set_Network(NetworkType value);
    public int get_percentage();
    public void set_percentage(int value);
    public bool get_percentageSpecified();
    public void set_percentageSpecified(bool value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.ScenarioTypeTestProfile : object {
    private ScenarioTypeTestProfilePercentage percentageField;
    private string percentageField1;
    private string nameField;
    private string pathField;
    private string typeField;
    private string idField;
    public ScenarioTypeTestProfilePercentage Percentage { get; public set; }
    [XmlAttributeAttribute]
public string percentage { get; public set; }
    [XmlAttributeAttribute]
public string name { get; public set; }
    [XmlAttributeAttribute]
public string path { get; public set; }
    [XmlAttributeAttribute]
public string type { get; public set; }
    [XmlAttributeAttribute]
public string id { get; public set; }
    public ScenarioTypeTestProfilePercentage get_Percentage();
    public void set_Percentage(ScenarioTypeTestProfilePercentage value);
    public string get_percentage();
    public void set_percentage(string value);
    public string get_name();
    public void set_name(string value);
    public string get_path();
    public void set_path(string value);
    public string get_type();
    public void set_type(string value);
    public string get_id();
    public void set_id(string value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.ScenarioTypeTestProfilePercentage : object {
    private int hiField;
    private int loField;
    private int midField;
    private int flagsField;
    [XmlAttributeAttribute]
[DefaultValueAttribute("0")]
public int hi { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("0")]
public int lo { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("0")]
public int mid { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("0")]
public int flags { get; public set; }
    public int get_hi();
    public void set_hi(int value);
    public int get_lo();
    public void set_lo(int value);
    public int get_mid();
    public void set_mid(int value);
    public int get_flags();
    public void set_flags(int value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.ScenarioTypeThinkProfile : object {
    private int patternField;
    private double valueField;
    [XmlAttributeAttribute]
[DefaultValueAttribute("0")]
public int pattern { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("0")]
public double value { get; public set; }
    public int get_pattern();
    public void set_pattern(int value);
    public double get_value();
    public void set_value(double value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.SecType : object {
    private SecTypeUnit unitField;
    private bool unitFieldSpecified;
    private string valueField;
    [XmlAttributeAttribute]
public SecTypeUnit unit { get; public set; }
    [XmlIgnoreAttribute]
public bool unitSpecified { get; public set; }
    [XmlTextAttribute]
public string Value { get; public set; }
    public SecTypeUnit get_unit();
    public void set_unit(SecTypeUnit value);
    public bool get_unitSpecified();
    public void set_unitSpecified(bool value);
    public string get_Value();
    public void set_Value(string value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[XmlTypeAttribute]
public enum Chutzpah.VSTS.SecTypeUnit : Enum {
    public int value__;
    public static SecTypeUnit sec;
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.SizeType : object {
    private SizeTypeUnit unitField;
    private string valueField;
    [XmlAttributeAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public SizeTypeUnit unit { get; public set; }
    [XmlTextAttribute]
public string Value { get; public set; }
    public SizeTypeUnit get_unit();
    public void set_unit(SizeTypeUnit value);
    public string get_Value();
    public void set_Value(string value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[XmlTypeAttribute]
public enum Chutzpah.VSTS.SizeTypeUnit : Enum {
    public int value__;
    public static SizeTypeUnit byte;
    public static SizeTypeUnit kb;
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.SpeedType : object {
    private SpeedTypeUnit unitField;
    private double valueField;
    [XmlAttributeAttribute]
public SpeedTypeUnit unit { get; public set; }
    [XmlTextAttribute]
public double Value { get; public set; }
    public SpeedTypeUnit get_unit();
    public void set_unit(SpeedTypeUnit value);
    public double get_Value();
    public void set_Value(double value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[XmlTypeAttribute]
public enum Chutzpah.VSTS.SpeedTypeUnit : Enum {
    public int value__;
    public static SpeedTypeUnit kbps;
    public static SpeedTypeUnit mbps;
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.StatisticalErrorType : StatisticalType {
    private ErrorUnitType errorUnitField;
    public ErrorUnitType ErrorUnit { get; public set; }
    public ErrorUnitType get_ErrorUnit();
    public void set_ErrorUnit(ErrorUnitType value);
}
[XmlIncludeAttribute("Chutzpah.VSTS.StatisticalErrorType")]
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.StatisticalType : object {
    private decimal goodField;
    private decimal goodToBadField;
    private decimal badField;
    private decimal badToGoodField;
    private SecType switchTimeField;
    public decimal Good { get; public set; }
    public decimal GoodToBad { get; public set; }
    public decimal Bad { get; public set; }
    public decimal BadToGood { get; public set; }
    public SecType SwitchTime { get; public set; }
    public decimal get_Good();
    public void set_Good(decimal value);
    public decimal get_GoodToBad();
    public void set_GoodToBad(decimal value);
    public decimal get_Bad();
    public void set_Bad(decimal value);
    public decimal get_BadToGood();
    public void set_BadToGood(decimal value);
    public SecType get_SwitchTime();
    public void set_SwitchTime(SecType value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.TcmInformationType : object {
    private int testCaseIdField;
    private int testRunIdField;
    private int testResultIdField;
    private string testIterationIdField;
    [XmlAttributeAttribute]
public int testCaseId { get; public set; }
    [XmlAttributeAttribute]
public int testRunId { get; public set; }
    [XmlAttributeAttribute]
public int testResultId { get; public set; }
    [XmlAttributeAttribute]
public string testIterationId { get; public set; }
    public int get_testCaseId();
    public void set_testCaseId(int value);
    public int get_testRunId();
    public void set_testRunId(int value);
    public int get_testResultId();
    public void set_testResultId(int value);
    public string get_testIterationId();
    public void set_testIterationId(string value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.TestCategoryType : object {
    private TestCategoryTypeTestCategoryItem[] testCategoryItemField;
    [XmlElementAttribute("TestCategoryItem")]
public TestCategoryTypeTestCategoryItem[] TestCategoryItem { get; public set; }
    public TestCategoryTypeTestCategoryItem[] get_TestCategoryItem();
    public void set_TestCategoryItem(TestCategoryTypeTestCategoryItem[] value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.TestCategoryTypeTestCategoryItem : object {
    private string testCategoryField;
    [XmlAttributeAttribute]
public string TestCategory { get; public set; }
    public string get_TestCategory();
    public void set_TestCategory(string value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.TestDefinitionType : object {
    private Object[] itemsField;
    private ItemsChoiceType4[] itemsElementNameField;
    [XmlAnyElementAttribute]
[XmlElementAttribute("CodedWebTest", "Chutzpah.VSTS.CodedWebTestElementType")]
[XmlElementAttribute("GenericTest", "Chutzpah.VSTS.GenericTestType")]
[XmlElementAttribute("LoadTest", "Chutzpah.VSTS.LoadTestType")]
[XmlElementAttribute("ManualTest", "Chutzpah.VSTS.PlainTextManualTestType")]
[XmlElementAttribute("OrderedTest", "Chutzpah.VSTS.OrderedTestType")]
[XmlElementAttribute("UnitTest", "Chutzpah.VSTS.UnitTestType")]
[XmlElementAttribute("UnitTestElement", "Chutzpah.VSTS.UnitTestType")]
[XmlElementAttribute("WebTest", "Chutzpah.VSTS.DeclarativeWebTestElementType")]
[XmlChoiceIdentifierAttribute("ItemsElementName")]
public Object[] Items { get; public set; }
    [XmlElementAttribute("ItemsElementName")]
[XmlIgnoreAttribute]
public ItemsChoiceType4[] ItemsElementName { get; public set; }
    public Object[] get_Items();
    public void set_Items(Object[] value);
    public ItemsChoiceType4[] get_ItemsElementName();
    public void set_ItemsElementName(ItemsChoiceType4[] value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.TestEntriesType1 : object {
    private TestEntryType[] testEntryField;
    [XmlElementAttribute("TestEntry")]
public TestEntryType[] TestEntry { get; public set; }
    public TestEntryType[] get_TestEntry();
    public void set_TestEntry(TestEntryType[] value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.TestEntryType : object {
    private TcmInformationType tcmInformationField;
    private TestEntryType[] testEntriesField;
    private string testIdField;
    private string executionIdField;
    private string parentExecutionIdField;
    private string testListIdField;
    private bool isTransparentField;
    public TcmInformationType TcmInformation { get; public set; }
    [XmlArrayItemAttribute("TestEntry")]
public TestEntryType[] TestEntries { get; public set; }
    [XmlAttributeAttribute]
public string testId { get; public set; }
    [XmlAttributeAttribute]
public string executionId { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("00000000-0000-0000-0000-000000000000")]
public string parentExecutionId { get; public set; }
    [XmlAttributeAttribute]
public string testListId { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool isTransparent { get; public set; }
    public TcmInformationType get_TcmInformation();
    public void set_TcmInformation(TcmInformationType value);
    public TestEntryType[] get_TestEntries();
    public void set_TestEntries(TestEntryType[] value);
    public string get_testId();
    public void set_testId(string value);
    public string get_executionId();
    public void set_executionId(string value);
    public string get_parentExecutionId();
    public void set_parentExecutionId(string value);
    public string get_testListId();
    public void set_testListId(string value);
    public bool get_isTransparent();
    public void set_isTransparent(bool value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class Chutzpah.VSTS.TestLists : object {
    private TestListType[] testListField;
    [XmlElementAttribute("TestList")]
public TestListType[] TestList { get; public set; }
    public TestListType[] get_TestList();
    public void set_TestList(TestListType[] value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.TestListType : object {
    private object descriptionField;
    private LinkType runConfigurationField;
    private LinkType[] testLinksField;
    private string idField;
    private string nameField;
    private bool enabledField;
    private string parentListIdField;
    public object Description { get; public set; }
    public LinkType RunConfiguration { get; public set; }
    [XmlArrayItemAttribute("TestLink")]
public LinkType[] TestLinks { get; public set; }
    [XmlAttributeAttribute]
public string id { get; public set; }
    [XmlAttributeAttribute]
public string name { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool enabled { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("00000000-0000-0000-0000-000000000000")]
public string parentListId { get; public set; }
    public object get_Description();
    public void set_Description(object value);
    public LinkType get_RunConfiguration();
    public void set_RunConfiguration(LinkType value);
    public LinkType[] get_TestLinks();
    public void set_TestLinks(LinkType[] value);
    public string get_id();
    public void set_id(string value);
    public string get_name();
    public void set_name(string value);
    public bool get_enabled();
    public void set_enabled(bool value);
    public string get_parentListId();
    public void set_parentListId(string value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[XmlTypeAttribute]
public enum Chutzpah.VSTS.TestMixType : Enum {
    public int value__;
    public static TestMixType Sequential;
    public static TestMixType PercentageOfTestsStarted;
    public static TestMixType PercentageOfUsersRunning;
    public static TestMixType UserPacing;
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[XmlTypeAttribute]
public enum Chutzpah.VSTS.TestOutcome : Enum {
    public int value__;
    public static TestOutcome Error;
    public static TestOutcome Failed;
    public static TestOutcome Timeout;
    public static TestOutcome Aborted;
    public static TestOutcome Inconclusive;
    public static TestOutcome PassedButRunAborted;
    public static TestOutcome NotRunnable;
    public static TestOutcome NotExecuted;
    public static TestOutcome Disconnected;
    public static TestOutcome Warning;
    public static TestOutcome Passed;
    public static TestOutcome Completed;
    public static TestOutcome InProgress;
    public static TestOutcome Pending;
}
[XmlIncludeAttribute("Chutzpah.VSTS.UnitTestResultType")]
[XmlIncludeAttribute("Chutzpah.VSTS.LoadTestResultType")]
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.TestResultAggregationType : TestResultType {
    private CountersType countersField;
    private ResultsType innerResultsField;
    public CountersType Counters { get; public set; }
    public ResultsType InnerResults { get; public set; }
    public CountersType get_Counters();
    public void set_Counters(CountersType value);
    public ResultsType get_InnerResults();
    public void set_InnerResults(ResultsType value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute("TestResultDetail")]
public class Chutzpah.VSTS.TestResultDetailType : object {
    private TestDefinitionType testDefinitionsField;
    private ResultsType resultField;
    private string runIdField;
    public TestDefinitionType TestDefinitions { get; public set; }
    public ResultsType Result { get; public set; }
    [XmlAttributeAttribute]
public string runId { get; public set; }
    public TestDefinitionType get_TestDefinitions();
    public void set_TestDefinitions(TestDefinitionType value);
    public ResultsType get_Result();
    public void set_Result(ResultsType value);
    public string get_runId();
    public void set_runId(string value);
}
[XmlIncludeAttribute("Chutzpah.VSTS.WebTestResultType")]
[XmlIncludeAttribute("Chutzpah.VSTS.TestResultAggregationType")]
[XmlIncludeAttribute("Chutzpah.VSTS.UnitTestResultType")]
[XmlIncludeAttribute("Chutzpah.VSTS.LoadTestResultType")]
[XmlIncludeAttribute("Chutzpah.VSTS.ManualTestResultType")]
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.TestResultType : object {
    private Object[] itemsField;
    private string testNameField;
    private string testTypeField;
    private string testIdField;
    private string executionIdField;
    private string parentExecutionIdField;
    private string testListIdField;
    private string outcomeField;
    private string computerNameField;
    private string relativeResultsDirectoryField;
    private string startTimeField;
    private string endTimeField;
    private string durationField;
    private bool spoolMessageField;
    private int processExitCodeField;
    private bool processExitCodeFieldSpecified;
    private bool isAbortedField;
    private bool isAbortedFieldSpecified;
    private string relativeTestOutputDirectoryField;
    [XmlElementAttribute("CollectorDataEntries", "Chutzpah.VSTS.CollectorDataEntriesType")]
[XmlElementAttribute("DataCollectorMessages", "Chutzpah.VSTS.DataCollectorMessagesType")]
[XmlElementAttribute("FileUris", "Chutzpah.VSTS.FileUrisType")]
[XmlElementAttribute("Output", "Chutzpah.VSTS.OutputType")]
[XmlElementAttribute("ResultFiles", "Chutzpah.VSTS.ResultFilesType")]
[XmlElementAttribute("TcmInformation", "Chutzpah.VSTS.TcmInformationType")]
[XmlElementAttribute("Timers", "Chutzpah.VSTS.TestResultTypeTimers")]
[XmlElementAttribute("WorkItems", "Chutzpah.VSTS.WorkItemIDsType")]
public Object[] Items { get; public set; }
    [XmlAttributeAttribute]
public string testName { get; public set; }
    [XmlAttributeAttribute]
public string testType { get; public set; }
    [XmlAttributeAttribute]
public string testId { get; public set; }
    [XmlAttributeAttribute]
public string executionId { get; public set; }
    [XmlAttributeAttribute]
public string parentExecutionId { get; public set; }
    [XmlAttributeAttribute]
public string testListId { get; public set; }
    [XmlAttributeAttribute]
public string outcome { get; public set; }
    [XmlAttributeAttribute]
public string computerName { get; public set; }
    [XmlAttributeAttribute]
public string relativeResultsDirectory { get; public set; }
    [XmlAttributeAttribute]
public string startTime { get; public set; }
    [XmlAttributeAttribute]
public string endTime { get; public set; }
    [XmlAttributeAttribute]
public string duration { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool spoolMessage { get; public set; }
    [XmlAttributeAttribute]
public int processExitCode { get; public set; }
    [XmlIgnoreAttribute]
public bool processExitCodeSpecified { get; public set; }
    [XmlAttributeAttribute]
public bool isAborted { get; public set; }
    [XmlIgnoreAttribute]
public bool isAbortedSpecified { get; public set; }
    [XmlAttributeAttribute]
public string relativeTestOutputDirectory { get; public set; }
    public Object[] get_Items();
    public void set_Items(Object[] value);
    public string get_testName();
    public void set_testName(string value);
    public string get_testType();
    public void set_testType(string value);
    public string get_testId();
    public void set_testId(string value);
    public string get_executionId();
    public void set_executionId(string value);
    public string get_parentExecutionId();
    public void set_parentExecutionId(string value);
    public string get_testListId();
    public void set_testListId(string value);
    public string get_outcome();
    public void set_outcome(string value);
    public string get_computerName();
    public void set_computerName(string value);
    public string get_relativeResultsDirectory();
    public void set_relativeResultsDirectory(string value);
    public string get_startTime();
    public void set_startTime(string value);
    public string get_endTime();
    public void set_endTime(string value);
    public string get_duration();
    public void set_duration(string value);
    public bool get_spoolMessage();
    public void set_spoolMessage(bool value);
    public int get_processExitCode();
    public void set_processExitCode(int value);
    public bool get_processExitCodeSpecified();
    public void set_processExitCodeSpecified(bool value);
    public bool get_isAborted();
    public void set_isAborted(bool value);
    public bool get_isAbortedSpecified();
    public void set_isAbortedSpecified(bool value);
    public string get_relativeTestOutputDirectory();
    public void set_relativeTestOutputDirectory(string value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.TestResultTypeTimers : object {
    private TestResultTypeTimersTimer[] timerField;
    [XmlElementAttribute("Timer")]
public TestResultTypeTimersTimer[] Timer { get; public set; }
    public TestResultTypeTimersTimer[] get_Timer();
    public void set_Timer(TestResultTypeTimersTimer[] value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.TestResultTypeTimersTimer : object {
    private string nameField;
    private string startTimeField;
    private int durationField;
    private bool durationFieldSpecified;
    [XmlAttributeAttribute]
public string name { get; public set; }
    [XmlAttributeAttribute]
public string startTime { get; public set; }
    [XmlAttributeAttribute]
public int duration { get; public set; }
    [XmlIgnoreAttribute]
public bool durationSpecified { get; public set; }
    public string get_name();
    public void set_name(string value);
    public string get_startTime();
    public void set_startTime(string value);
    public int get_duration();
    public void set_duration(int value);
    public bool get_durationSpecified();
    public void set_durationSpecified(bool value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class Chutzpah.VSTS.TestRunConfiguration : object {
    private Object[] itemsField;
    private ItemsChoiceType1[] itemsElementNameField;
    private string idField;
    private string nameField;
    private bool isExecutedRemotelyField;
    private bool abortRunOnErrorField;
    private bool autoSaveResultsField;
    private bool mapIPAddressesField;
    private bool traceExecutionSequenceField;
    [XmlElementAttribute("Buckets", "Chutzpah.VSTS.TestRunConfigurationBuckets")]
[XmlElementAttribute("CodeCoverage", "Chutzpah.VSTS.TestRunConfigurationCodeCoverage")]
[XmlElementAttribute("Constraints", "Chutzpah.VSTS.TestRunConfigurationConstraints")]
[XmlElementAttribute("Deployment", "Chutzpah.VSTS.TestRunConfigurationDeployment")]
[XmlElementAttribute("Description", "System.Object")]
[XmlElementAttribute("Execution", "Chutzpah.VSTS.TestRunConfigurationExecution")]
[XmlElementAttribute("ExecutionThread", "Chutzpah.VSTS.TestRunConfigurationExecutionThread")]
[XmlElementAttribute("Hosts", "Chutzpah.VSTS.TestRunConfigurationHosts")]
[XmlElementAttribute("NamingScheme", "Chutzpah.VSTS.TestRunConfigurationNamingScheme")]
[XmlElementAttribute("Plugins", "Chutzpah.VSTS.TestRunConfigurationPlugins")]
[XmlElementAttribute("Remote", "Chutzpah.VSTS.TestRunConfigurationRemote")]
[XmlElementAttribute("Scripts", "Chutzpah.VSTS.TestRunConfigurationScripts")]
[XmlElementAttribute("TestTypeSpecific", "Chutzpah.VSTS.TestRunConfigurationTestTypeSpecific")]
[XmlElementAttribute("Timeouts", "Chutzpah.VSTS.TestRunConfigurationTimeouts")]
[XmlChoiceIdentifierAttribute("ItemsElementName")]
public Object[] Items { get; public set; }
    [XmlElementAttribute("ItemsElementName")]
[XmlIgnoreAttribute]
public ItemsChoiceType1[] ItemsElementName { get; public set; }
    [XmlAttributeAttribute]
public string id { get; public set; }
    [XmlAttributeAttribute]
public string name { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool isExecutedRemotely { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool abortRunOnError { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool autoSaveResults { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool mapIPAddresses { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool traceExecutionSequence { get; public set; }
    public Object[] get_Items();
    public void set_Items(Object[] value);
    public ItemsChoiceType1[] get_ItemsElementName();
    public void set_ItemsElementName(ItemsChoiceType1[] value);
    public string get_id();
    public void set_id(string value);
    public string get_name();
    public void set_name(string value);
    public bool get_isExecutedRemotely();
    public void set_isExecutedRemotely(bool value);
    public bool get_abortRunOnError();
    public void set_abortRunOnError(bool value);
    public bool get_autoSaveResults();
    public void set_autoSaveResults(bool value);
    public bool get_mapIPAddresses();
    public void set_mapIPAddresses(bool value);
    public bool get_traceExecutionSequence();
    public void set_traceExecutionSequence(bool value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.TestRunConfigurationBuckets : object {
    private int sizeField;
    [XmlAttributeAttribute]
[DefaultValueAttribute("200")]
public int size { get; public set; }
    public int get_size();
    public void set_size(int value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.TestRunConfigurationCodeCoverage : object {
    private TestRunConfigurationCodeCoverageCodeCoverageItem[] regularField;
    private TestRunConfigurationCodeCoverageAspNetCodeCoverageItem[] aspNetField;
    private bool enabledField;
    private bool perTestField;
    private bool instrumentInPlaceField;
    private string keyFileField;
    [XmlArrayItemAttribute("CodeCoverageItem")]
public TestRunConfigurationCodeCoverageCodeCoverageItem[] Regular { get; public set; }
    [XmlArrayItemAttribute("AspNetCodeCoverageItem")]
public TestRunConfigurationCodeCoverageAspNetCodeCoverageItem[] AspNet { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool enabled { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool perTest { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool instrumentInPlace { get; public set; }
    [XmlAttributeAttribute]
public string keyFile { get; public set; }
    public TestRunConfigurationCodeCoverageCodeCoverageItem[] get_Regular();
    public void set_Regular(TestRunConfigurationCodeCoverageCodeCoverageItem[] value);
    public TestRunConfigurationCodeCoverageAspNetCodeCoverageItem[] get_AspNet();
    public void set_AspNet(TestRunConfigurationCodeCoverageAspNetCodeCoverageItem[] value);
    public bool get_enabled();
    public void set_enabled(bool value);
    public bool get_perTest();
    public void set_perTest(bool value);
    public bool get_instrumentInPlace();
    public void set_instrumentInPlace(bool value);
    public string get_keyFile();
    public void set_keyFile(string value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.TestRunConfigurationCodeCoverageAspNetCodeCoverageItem : object {
    private string idField;
    private string nameField;
    private string applicationRootField;
    private string urlField;
    private bool isIISField;
    private bool isIISFieldSpecified;
    [XmlAttributeAttribute]
public string id { get; public set; }
    [XmlAttributeAttribute]
public string name { get; public set; }
    [XmlAttributeAttribute]
public string applicationRoot { get; public set; }
    [XmlAttributeAttribute]
public string url { get; public set; }
    [XmlAttributeAttribute]
public bool isIIS { get; public set; }
    [XmlIgnoreAttribute]
public bool isIISSpecified { get; public set; }
    public string get_id();
    public void set_id(string value);
    public string get_name();
    public void set_name(string value);
    public string get_applicationRoot();
    public void set_applicationRoot(string value);
    public string get_url();
    public void set_url(string value);
    public bool get_isIIS();
    public void set_isIIS(bool value);
    public bool get_isIISSpecified();
    public void set_isIISSpecified(bool value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.TestRunConfigurationCodeCoverageCodeCoverageItem : object {
    private TestRunConfigurationCodeCoverageCodeCoverageItemKeyFile[] keyFileField;
    private string binaryFileField;
    private string pdbFileField;
    private string outputDirectoryField;
    private bool instrumentInPlaceField;
    [XmlElementAttribute("KeyFile")]
public TestRunConfigurationCodeCoverageCodeCoverageItemKeyFile[] KeyFile { get; public set; }
    [XmlAttributeAttribute]
public string binaryFile { get; public set; }
    [XmlAttributeAttribute]
public string pdbFile { get; public set; }
    [XmlAttributeAttribute]
public string outputDirectory { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool instrumentInPlace { get; public set; }
    public TestRunConfigurationCodeCoverageCodeCoverageItemKeyFile[] get_KeyFile();
    public void set_KeyFile(TestRunConfigurationCodeCoverageCodeCoverageItemKeyFile[] value);
    public string get_binaryFile();
    public void set_binaryFile(string value);
    public string get_pdbFile();
    public void set_pdbFile(string value);
    public string get_outputDirectory();
    public void set_outputDirectory(string value);
    public bool get_instrumentInPlace();
    public void set_instrumentInPlace(bool value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.TestRunConfigurationCodeCoverageCodeCoverageItemKeyFile : object {
    private string pathField;
    private bool isPublicKeyField;
    [XmlAttributeAttribute]
public string path { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool isPublicKey { get; public set; }
    public string get_path();
    public void set_path(string value);
    public bool get_isPublicKey();
    public void set_isPublicKey(bool value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.TestRunConfigurationConstraints : object {
    private Object[] agentField;
    [XmlElementAttribute("Agent")]
public Object[] Agent { get; public set; }
    public Object[] get_Agent();
    public void set_Agent(Object[] value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.TestRunConfigurationDeployment : DeploymentItemsType {
    private bool deploySatelliteAssembliesField;
    private string ignoredDependentAssembliesField;
    private string userDeploymentRootField;
    private string runDeploymentRootField;
    private bool useDefaultDeploymentRootField;
    private bool enabledField;
    private bool uploadDeploymentItemsField;
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool deploySatelliteAssemblies { get; public set; }
    [XmlAttributeAttribute]
public string ignoredDependentAssemblies { get; public set; }
    [XmlAttributeAttribute]
public string userDeploymentRoot { get; public set; }
    [XmlAttributeAttribute]
public string runDeploymentRoot { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool useDefaultDeploymentRoot { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool enabled { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool uploadDeploymentItems { get; public set; }
    public bool get_deploySatelliteAssemblies();
    public void set_deploySatelliteAssemblies(bool value);
    public string get_ignoredDependentAssemblies();
    public void set_ignoredDependentAssemblies(string value);
    public string get_userDeploymentRoot();
    public void set_userDeploymentRoot(string value);
    public string get_runDeploymentRoot();
    public void set_runDeploymentRoot(string value);
    public bool get_useDefaultDeploymentRoot();
    public void set_useDefaultDeploymentRoot(bool value);
    public bool get_enabled();
    public void set_enabled(bool value);
    public bool get_uploadDeploymentItems();
    public void set_uploadDeploymentItems(bool value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.TestRunConfigurationExecution : object {
    private int parallelTestCountField;
    [XmlAttributeAttribute]
[DefaultValueAttribute("1")]
public int parallelTestCount { get; public set; }
    public int get_parallelTestCount();
    public void set_parallelTestCount(int value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.TestRunConfigurationExecutionThread : object {
    private string apartmentStateField;
    [XmlAttributeAttribute]
[DefaultValueAttribute("0")]
public string apartmentState { get; public set; }
    public string get_apartmentState();
    public void set_apartmentState(string value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.TestRunConfigurationHosts : object {
    private Object[] itemsField;
    private string typeField;
    private bool skipUnhostableTestsField;
    [XmlAnyElementAttribute]
[XmlElementAttribute("AspNet", "Chutzpah.VSTS.TestRunConfigurationHostsAspNet")]
[XmlElementAttribute("DeviceHostRunConfigData", "Chutzpah.VSTS.TestRunConfigurationHostsDeviceHostRunConfigData")]
public Object[] Items { get; public set; }
    [XmlAttributeAttribute]
public string type { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool skipUnhostableTests { get; public set; }
    public Object[] get_Items();
    public void set_Items(Object[] value);
    public string get_type();
    public void set_type(string value);
    public bool get_skipUnhostableTests();
    public void set_skipUnhostableTests(bool value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.TestRunConfigurationHostsAspNet : object {
    private DevelopmentServerType developmentServerField;
    private string nameField;
    private string urlToTestField;
    private string executionTypeField;
    public DevelopmentServerType DevelopmentServer { get; public set; }
    [XmlAttributeAttribute]
public string name { get; public set; }
    [XmlAttributeAttribute]
public string urlToTest { get; public set; }
    [XmlAttributeAttribute]
public string executionType { get; public set; }
    public DevelopmentServerType get_DevelopmentServer();
    public void set_DevelopmentServer(DevelopmentServerType value);
    public string get_name();
    public void set_name(string value);
    public string get_urlToTest();
    public void set_urlToTest(string value);
    public string get_executionType();
    public void set_executionType(string value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.TestRunConfigurationHostsDeviceHostRunConfigData : object {
    private string nameField;
    private string deviceIdField;
    private string deviceNameField;
    private string platformIdField;
    private string platformNameField;
    private string uiPlatformIdField;
    [XmlAttributeAttribute]
public string name { get; public set; }
    [XmlAttributeAttribute]
public string deviceId { get; public set; }
    [XmlAttributeAttribute]
public string deviceName { get; public set; }
    [XmlAttributeAttribute]
public string platformId { get; public set; }
    [XmlAttributeAttribute]
public string platformName { get; public set; }
    [XmlAttributeAttribute]
public string uiPlatformId { get; public set; }
    public string get_name();
    public void set_name(string value);
    public string get_deviceId();
    public void set_deviceId(string value);
    public string get_deviceName();
    public void set_deviceName(string value);
    public string get_platformId();
    public void set_platformId(string value);
    public string get_platformName();
    public void set_platformName(string value);
    public string get_uiPlatformId();
    public void set_uiPlatformId(string value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.TestRunConfigurationNamingScheme : object {
    private string baseNameField;
    private bool appendTimeStampField;
    private bool useDefaultField;
    [XmlAttributeAttribute]
public string baseName { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool appendTimeStamp { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool useDefault { get; public set; }
    public string get_baseName();
    public void set_baseName(string value);
    public bool get_appendTimeStamp();
    public void set_appendTimeStamp(bool value);
    public bool get_useDefault();
    public void set_useDefault(bool value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.TestRunConfigurationPlugins : object {
    private Object[] pluginField;
    [XmlElementAttribute("Plugin")]
public Object[] Plugin { get; public set; }
    public Object[] get_Plugin();
    public void set_Plugin(Object[] value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.TestRunConfigurationRemote : object {
    private TestRunConfigurationRemoteAgent agentField;
    private string controllerNameField;
    public TestRunConfigurationRemoteAgent Agent { get; public set; }
    [XmlAttributeAttribute]
public string controllerName { get; public set; }
    public TestRunConfigurationRemoteAgent get_Agent();
    public void set_Agent(TestRunConfigurationRemoteAgent value);
    public string get_controllerName();
    public void set_controllerName(string value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.TestRunConfigurationRemoteAgent : object {
    private NameValuePropertyType[] requiredPropertiesField;
    [XmlArrayItemAttribute("Property")]
public NameValuePropertyType[] RequiredProperties { get; public set; }
    public NameValuePropertyType[] get_RequiredProperties();
    public void set_RequiredProperties(NameValuePropertyType[] value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.TestRunConfigurationScripts : object {
    private string cleanupScriptField;
    private string setupScriptField;
    [XmlAttributeAttribute]
public string cleanupScript { get; public set; }
    [XmlAttributeAttribute]
public string setupScript { get; public set; }
    public string get_cleanupScript();
    public void set_cleanupScript(string value);
    public string get_setupScript();
    public void set_setupScript(string value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.TestRunConfigurationTestTypeSpecific : object {
    private Object[] itemsField;
    private ItemsChoiceType[] itemsElementNameField;
    [XmlAnyElementAttribute]
[XmlElementAttribute("WebTestRunConfig", "Chutzpah.VSTS.WebTestRunConfigurationType")]
[XmlElementAttribute("WebTestRunConfiguration", "Chutzpah.VSTS.WebTestRunConfigurationType")]
[XmlChoiceIdentifierAttribute("ItemsElementName")]
public Object[] Items { get; public set; }
    [XmlElementAttribute("ItemsElementName")]
[XmlIgnoreAttribute]
public ItemsChoiceType[] ItemsElementName { get; public set; }
    public Object[] get_Items();
    public void set_Items(Object[] value);
    public ItemsChoiceType[] get_ItemsElementName();
    public void set_ItemsElementName(ItemsChoiceType[] value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.TestRunConfigurationTimeouts : object {
    private int runTimeoutField;
    private int testTimeoutField;
    private int agentNotRespondingTimeoutField;
    private int deploymentTimeoutField;
    private int scriptTimeoutField;
    [XmlAttributeAttribute]
[DefaultValueAttribute("0")]
public int runTimeout { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("1800000")]
public int testTimeout { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("300000")]
public int agentNotRespondingTimeout { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("300000")]
public int deploymentTimeout { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("300000")]
public int scriptTimeout { get; public set; }
    public int get_runTimeout();
    public void set_runTimeout(int value);
    public int get_testTimeout();
    public void set_testTimeout(int value);
    public int get_agentNotRespondingTimeout();
    public void set_agentNotRespondingTimeout(int value);
    public int get_deploymentTimeout();
    public void set_deploymentTimeout(int value);
    public int get_scriptTimeout();
    public void set_scriptTimeout(int value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.TestRunOutputType : object {
    private object stdOutField;
    private object stdErrField;
    private object debugTraceField;
    private object traceInfoField;
    public object StdOut { get; public set; }
    public object StdErr { get; public set; }
    public object DebugTrace { get; public set; }
    public object TraceInfo { get; public set; }
    public object get_StdOut();
    public void set_StdOut(object value);
    public object get_StdErr();
    public void set_StdErr(object value);
    public object get_DebugTrace();
    public void set_DebugTrace(object value);
    public object get_TraceInfo();
    public void set_TraceInfo(object value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute("TestRun")]
public class Chutzpah.VSTS.TestRunType : object {
    private Object[] itemsField;
    private string idField;
    private string nameField;
    private string runUserField;
    private int tcmPassIdField;
    private bool tcmPassIdFieldSpecified;
    [XmlElementAttribute("Build", "Chutzpah.VSTS.TestRunTypeBuild")]
[XmlElementAttribute("ResultSummary", "Chutzpah.VSTS.TestRunTypeResultSummary")]
[XmlElementAttribute("Results", "Chutzpah.VSTS.ResultsType")]
[XmlElementAttribute("TestDefinitions", "Chutzpah.VSTS.TestDefinitionType")]
[XmlElementAttribute("TestEntries", "Chutzpah.VSTS.TestEntriesType1")]
[XmlElementAttribute("TestLists", "Chutzpah.VSTS.TestRunTypeTestLists")]
[XmlElementAttribute("TestRunConfiguration", "Chutzpah.VSTS.TestRunConfiguration")]
[XmlElementAttribute("TestSettings", "Chutzpah.VSTS.TestSettingsType")]
[XmlElementAttribute("Times", "Chutzpah.VSTS.TestRunTypeTimes")]
[XmlElementAttribute("UserData", "System.Xml.XmlElement")]
public Object[] Items { get; public set; }
    [XmlAttributeAttribute]
public string id { get; public set; }
    [XmlAttributeAttribute]
public string name { get; public set; }
    [XmlAttributeAttribute]
public string runUser { get; public set; }
    [XmlAttributeAttribute]
public int tcmPassId { get; public set; }
    [XmlIgnoreAttribute]
public bool tcmPassIdSpecified { get; public set; }
    public Object[] get_Items();
    public void set_Items(Object[] value);
    public string get_id();
    public void set_id(string value);
    public string get_name();
    public void set_name(string value);
    public string get_runUser();
    public void set_runUser(string value);
    public int get_tcmPassId();
    public void set_tcmPassId(int value);
    public bool get_tcmPassIdSpecified();
    public void set_tcmPassIdSpecified(bool value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.TestRunTypeBuild : object {
    private string flavorField;
    private string platformField;
    [XmlAttributeAttribute]
public string flavor { get; public set; }
    [XmlAttributeAttribute]
public string platform { get; public set; }
    public string get_flavor();
    public void set_flavor(string value);
    public string get_platform();
    public void set_platform(string value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.TestRunTypeResultSummary : object {
    private Object[] itemsField;
    private ResultFilesTypeResultFile[] resultFilesField;
    private FileUriType[] fileUrisField;
    private CollectorType[] collectorDataEntriesField;
    private DataCollectorMessageType[] dataCollectorMessagesField;
    private string outcomeField;
    private bool isPartialRunField;
    [XmlElementAttribute("Counters", "Chutzpah.VSTS.CountersType")]
[XmlElementAttribute("Output", "Chutzpah.VSTS.TestRunOutputType")]
[XmlElementAttribute("RunInfos", "Chutzpah.VSTS.TestRunTypeResultSummaryRunInfos")]
public Object[] Items { get; public set; }
    [XmlArrayItemAttribute("ResultFile")]
public ResultFilesTypeResultFile[] ResultFiles { get; public set; }
    [XmlArrayItemAttribute("FileUri")]
public FileUriType[] FileUris { get; public set; }
    [XmlArrayItemAttribute("Collector")]
public CollectorType[] CollectorDataEntries { get; public set; }
    [XmlArrayItemAttribute("DataCollectorExceptionMessage", "Chutzpah.VSTS.DataCollectorExceptionMessageType")]
[XmlArrayItemAttribute("DataCollectorMessage")]
public DataCollectorMessageType[] DataCollectorMessages { get; public set; }
    [XmlAttributeAttribute]
public string outcome { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool isPartialRun { get; public set; }
    public Object[] get_Items();
    public void set_Items(Object[] value);
    public ResultFilesTypeResultFile[] get_ResultFiles();
    public void set_ResultFiles(ResultFilesTypeResultFile[] value);
    public FileUriType[] get_FileUris();
    public void set_FileUris(FileUriType[] value);
    public CollectorType[] get_CollectorDataEntries();
    public void set_CollectorDataEntries(CollectorType[] value);
    public DataCollectorMessageType[] get_DataCollectorMessages();
    public void set_DataCollectorMessages(DataCollectorMessageType[] value);
    public string get_outcome();
    public void set_outcome(string value);
    public bool get_isPartialRun();
    public void set_isPartialRun(bool value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.TestRunTypeResultSummaryRunInfos : object {
    private TestRunTypeResultSummaryRunInfosRunInfo[] runInfoField;
    [XmlElementAttribute("RunInfo")]
public TestRunTypeResultSummaryRunInfosRunInfo[] RunInfo { get; public set; }
    public TestRunTypeResultSummaryRunInfosRunInfo[] get_RunInfo();
    public void set_RunInfo(TestRunTypeResultSummaryRunInfosRunInfo[] value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.TestRunTypeResultSummaryRunInfosRunInfo : object {
    private object textField;
    private object exceptionField;
    private string computerNameField;
    private TestOutcome outcomeField;
    private string timestampField;
    public object Text { get; public set; }
    public object Exception { get; public set; }
    [XmlAttributeAttribute]
public string computerName { get; public set; }
    [XmlAttributeAttribute]
public TestOutcome outcome { get; public set; }
    [XmlAttributeAttribute]
public string timestamp { get; public set; }
    public object get_Text();
    public void set_Text(object value);
    public object get_Exception();
    public void set_Exception(object value);
    public string get_computerName();
    public void set_computerName(string value);
    public TestOutcome get_outcome();
    public void set_outcome(TestOutcome value);
    public string get_timestamp();
    public void set_timestamp(string value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.TestRunTypeTestLists : object {
    private TestListType[] testListField;
    [XmlElementAttribute("TestList")]
public TestListType[] TestList { get; public set; }
    public TestListType[] get_TestList();
    public void set_TestList(TestListType[] value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.TestRunTypeTimes : object {
    private string creationField;
    private string queuingField;
    private string startField;
    private string finishField;
    [XmlAttributeAttribute]
public string creation { get; public set; }
    [XmlAttributeAttribute]
public string queuing { get; public set; }
    [XmlAttributeAttribute]
public string start { get; public set; }
    [XmlAttributeAttribute]
public string finish { get; public set; }
    public string get_creation();
    public void set_creation(string value);
    public string get_queuing();
    public void set_queuing(string value);
    public string get_start();
    public void set_start(string value);
    public string get_finish();
    public void set_finish(string value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute("TestSettings")]
public class Chutzpah.VSTS.TestSettingsType : object {
    private object descriptionField;
    private TestSettingsTypeDeployment deploymentField;
    private NameValuePropertyType[] propertiesField;
    private TestSettingsTypeNamingScheme namingSchemeField;
    private TestSettingsTypeScripts scriptsField;
    private Object[] constraintsField;
    private TestSettingsTypeRemoteController remoteControllerField;
    private TestSettingsTypeExecution executionField;
    private AgentRuleCollectionType collectionOnlyAgentsField;
    private string idField;
    private string nameField;
    private bool abortRunOnErrorField;
    private bool autoSaveResultsField;
    private bool mapIPAddressesField;
    private bool traceExecutionSequenceField;
    private bool enableDefaultDataCollectorsField;
    public object Description { get; public set; }
    public TestSettingsTypeDeployment Deployment { get; public set; }
    [XmlArrayItemAttribute("Property")]
public NameValuePropertyType[] Properties { get; public set; }
    public TestSettingsTypeNamingScheme NamingScheme { get; public set; }
    public TestSettingsTypeScripts Scripts { get; public set; }
    [XmlArrayItemAttribute("Agent")]
public Object[] Constraints { get; public set; }
    public TestSettingsTypeRemoteController RemoteController { get; public set; }
    public TestSettingsTypeExecution Execution { get; public set; }
    public AgentRuleCollectionType CollectionOnlyAgents { get; public set; }
    [XmlAttributeAttribute]
public string id { get; public set; }
    [XmlAttributeAttribute]
public string name { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool abortRunOnError { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool autoSaveResults { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool mapIPAddresses { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool traceExecutionSequence { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool enableDefaultDataCollectors { get; public set; }
    public object get_Description();
    public void set_Description(object value);
    public TestSettingsTypeDeployment get_Deployment();
    public void set_Deployment(TestSettingsTypeDeployment value);
    public NameValuePropertyType[] get_Properties();
    public void set_Properties(NameValuePropertyType[] value);
    public TestSettingsTypeNamingScheme get_NamingScheme();
    public void set_NamingScheme(TestSettingsTypeNamingScheme value);
    public TestSettingsTypeScripts get_Scripts();
    public void set_Scripts(TestSettingsTypeScripts value);
    public Object[] get_Constraints();
    public void set_Constraints(Object[] value);
    public TestSettingsTypeRemoteController get_RemoteController();
    public void set_RemoteController(TestSettingsTypeRemoteController value);
    public TestSettingsTypeExecution get_Execution();
    public void set_Execution(TestSettingsTypeExecution value);
    public AgentRuleCollectionType get_CollectionOnlyAgents();
    public void set_CollectionOnlyAgents(AgentRuleCollectionType value);
    public string get_id();
    public void set_id(string value);
    public string get_name();
    public void set_name(string value);
    public bool get_abortRunOnError();
    public void set_abortRunOnError(bool value);
    public bool get_autoSaveResults();
    public void set_autoSaveResults(bool value);
    public bool get_mapIPAddresses();
    public void set_mapIPAddresses(bool value);
    public bool get_traceExecutionSequence();
    public void set_traceExecutionSequence(bool value);
    public bool get_enableDefaultDataCollectors();
    public void set_enableDefaultDataCollectors(bool value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.TestSettingsTypeDeployment : DeploymentItemsType {
    private bool deploySatelliteAssembliesField;
    private string ignoredDependentAssembliesField;
    private string userDeploymentRootField;
    private string runDeploymentRootField;
    private bool useDefaultDeploymentRootField;
    private bool enabledField;
    private bool uploadDeploymentItemsField;
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool deploySatelliteAssemblies { get; public set; }
    [XmlAttributeAttribute]
public string ignoredDependentAssemblies { get; public set; }
    [XmlAttributeAttribute]
public string userDeploymentRoot { get; public set; }
    [XmlAttributeAttribute]
public string runDeploymentRoot { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool useDefaultDeploymentRoot { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool enabled { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool uploadDeploymentItems { get; public set; }
    public bool get_deploySatelliteAssemblies();
    public void set_deploySatelliteAssemblies(bool value);
    public string get_ignoredDependentAssemblies();
    public void set_ignoredDependentAssemblies(string value);
    public string get_userDeploymentRoot();
    public void set_userDeploymentRoot(string value);
    public string get_runDeploymentRoot();
    public void set_runDeploymentRoot(string value);
    public bool get_useDefaultDeploymentRoot();
    public void set_useDefaultDeploymentRoot(bool value);
    public bool get_enabled();
    public void set_enabled(bool value);
    public bool get_uploadDeploymentItems();
    public void set_uploadDeploymentItems(bool value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.TestSettingsTypeExecution : object {
    private TestSettingsTypeExecutionBuckets bucketsField;
    private TestSettingsTypeExecutionExecutionThread executionThreadField;
    private TestSettingsTypeExecutionHosts hostsField;
    private TestSettingsTypeExecutionTestTypeSpecific testTypeSpecificField;
    private TestSettingsTypeExecutionTimeouts timeoutsField;
    private AgentRuleType agentRuleField;
    private TestSettingsTypeExecutionLocation locationField;
    private HostProcessPlatformTypeEnum hostProcessPlatformField;
    private int parallelTestCountField;
    public TestSettingsTypeExecutionBuckets Buckets { get; public set; }
    public TestSettingsTypeExecutionExecutionThread ExecutionThread { get; public set; }
    public TestSettingsTypeExecutionHosts Hosts { get; public set; }
    public TestSettingsTypeExecutionTestTypeSpecific TestTypeSpecific { get; public set; }
    public TestSettingsTypeExecutionTimeouts Timeouts { get; public set; }
    public AgentRuleType AgentRule { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public TestSettingsTypeExecutionLocation location { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public HostProcessPlatformTypeEnum hostProcessPlatform { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("1")]
public int parallelTestCount { get; public set; }
    public TestSettingsTypeExecutionBuckets get_Buckets();
    public void set_Buckets(TestSettingsTypeExecutionBuckets value);
    public TestSettingsTypeExecutionExecutionThread get_ExecutionThread();
    public void set_ExecutionThread(TestSettingsTypeExecutionExecutionThread value);
    public TestSettingsTypeExecutionHosts get_Hosts();
    public void set_Hosts(TestSettingsTypeExecutionHosts value);
    public TestSettingsTypeExecutionTestTypeSpecific get_TestTypeSpecific();
    public void set_TestTypeSpecific(TestSettingsTypeExecutionTestTypeSpecific value);
    public TestSettingsTypeExecutionTimeouts get_Timeouts();
    public void set_Timeouts(TestSettingsTypeExecutionTimeouts value);
    public AgentRuleType get_AgentRule();
    public void set_AgentRule(AgentRuleType value);
    public TestSettingsTypeExecutionLocation get_location();
    public void set_location(TestSettingsTypeExecutionLocation value);
    public HostProcessPlatformTypeEnum get_hostProcessPlatform();
    public void set_hostProcessPlatform(HostProcessPlatformTypeEnum value);
    public int get_parallelTestCount();
    public void set_parallelTestCount(int value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.TestSettingsTypeExecutionBuckets : object {
    private int thresholdField;
    private int sizeField;
    [XmlAttributeAttribute]
[DefaultValueAttribute("1000")]
public int threshold { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("200")]
public int size { get; public set; }
    public int get_threshold();
    public void set_threshold(int value);
    public int get_size();
    public void set_size(int value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.TestSettingsTypeExecutionExecutionThread : object {
    private string apartmentStateField;
    [XmlAttributeAttribute]
[DefaultValueAttribute("0")]
public string apartmentState { get; public set; }
    public string get_apartmentState();
    public void set_apartmentState(string value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.TestSettingsTypeExecutionHosts : object {
    private Object[] itemsField;
    private string typeField;
    private bool skipUnhostableTestsField;
    [XmlAnyElementAttribute]
[XmlElementAttribute("AspNet", "Chutzpah.VSTS.TestSettingsTypeExecutionHostsAspNet")]
[XmlElementAttribute("DeviceHostRunConfigData", "Chutzpah.VSTS.TestSettingsTypeExecutionHostsDeviceHostRunConfigData")]
public Object[] Items { get; public set; }
    [XmlAttributeAttribute]
public string type { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool skipUnhostableTests { get; public set; }
    public Object[] get_Items();
    public void set_Items(Object[] value);
    public string get_type();
    public void set_type(string value);
    public bool get_skipUnhostableTests();
    public void set_skipUnhostableTests(bool value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.TestSettingsTypeExecutionHostsAspNet : object {
    private DevelopmentServerType developmentServerField;
    private string nameField;
    private string urlToTestField;
    private string executionTypeField;
    public DevelopmentServerType DevelopmentServer { get; public set; }
    [XmlAttributeAttribute]
public string name { get; public set; }
    [XmlAttributeAttribute]
public string urlToTest { get; public set; }
    [XmlAttributeAttribute]
public string executionType { get; public set; }
    public DevelopmentServerType get_DevelopmentServer();
    public void set_DevelopmentServer(DevelopmentServerType value);
    public string get_name();
    public void set_name(string value);
    public string get_urlToTest();
    public void set_urlToTest(string value);
    public string get_executionType();
    public void set_executionType(string value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.TestSettingsTypeExecutionHostsDeviceHostRunConfigData : object {
    private string nameField;
    private string deviceIdField;
    private string deviceNameField;
    private string platformIdField;
    private string platformNameField;
    private string uiPlatformIdField;
    [XmlAttributeAttribute]
public string name { get; public set; }
    [XmlAttributeAttribute]
public string deviceId { get; public set; }
    [XmlAttributeAttribute]
public string deviceName { get; public set; }
    [XmlAttributeAttribute]
public string platformId { get; public set; }
    [XmlAttributeAttribute]
public string platformName { get; public set; }
    [XmlAttributeAttribute]
public string uiPlatformId { get; public set; }
    public string get_name();
    public void set_name(string value);
    public string get_deviceId();
    public void set_deviceId(string value);
    public string get_deviceName();
    public void set_deviceName(string value);
    public string get_platformId();
    public void set_platformId(string value);
    public string get_platformName();
    public void set_platformName(string value);
    public string get_uiPlatformId();
    public void set_uiPlatformId(string value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[XmlTypeAttribute]
public enum Chutzpah.VSTS.TestSettingsTypeExecutionLocation : Enum {
    public int value__;
    public static TestSettingsTypeExecutionLocation Local;
    public static TestSettingsTypeExecutionLocation Remote;
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.TestSettingsTypeExecutionTestTypeSpecific : object {
    private Object[] itemsField;
    private ItemsChoiceType2[] itemsElementNameField;
    [XmlAnyElementAttribute]
[XmlElementAttribute("UnitTestRunConfig", "Chutzpah.VSTS.AssemblyResolutionSettingsType")]
[XmlElementAttribute("WebTestRunConfig", "Chutzpah.VSTS.WebTestRunConfigurationType")]
[XmlElementAttribute("WebTestRunConfiguration", "Chutzpah.VSTS.WebTestRunConfigurationType")]
[XmlChoiceIdentifierAttribute("ItemsElementName")]
public Object[] Items { get; public set; }
    [XmlElementAttribute("ItemsElementName")]
[XmlIgnoreAttribute]
public ItemsChoiceType2[] ItemsElementName { get; public set; }
    public Object[] get_Items();
    public void set_Items(Object[] value);
    public ItemsChoiceType2[] get_ItemsElementName();
    public void set_ItemsElementName(ItemsChoiceType2[] value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.TestSettingsTypeExecutionTimeouts : object {
    private int runTimeoutField;
    private int testTimeoutField;
    private int agentNotRespondingTimeoutField;
    private int deploymentTimeoutField;
    private int scriptTimeoutField;
    [XmlAttributeAttribute]
[DefaultValueAttribute("0")]
public int runTimeout { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("1800000")]
public int testTimeout { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("300000")]
public int agentNotRespondingTimeout { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("300000")]
public int deploymentTimeout { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("300000")]
public int scriptTimeout { get; public set; }
    public int get_runTimeout();
    public void set_runTimeout(int value);
    public int get_testTimeout();
    public void set_testTimeout(int value);
    public int get_agentNotRespondingTimeout();
    public void set_agentNotRespondingTimeout(int value);
    public int get_deploymentTimeout();
    public void set_deploymentTimeout(int value);
    public int get_scriptTimeout();
    public void set_scriptTimeout(int value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.TestSettingsTypeNamingScheme : object {
    private string baseNameField;
    private bool appendTimeStampField;
    private bool useDefaultField;
    [XmlAttributeAttribute]
public string baseName { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool appendTimeStamp { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool useDefault { get; public set; }
    public string get_baseName();
    public void set_baseName(string value);
    public bool get_appendTimeStamp();
    public void set_appendTimeStamp(bool value);
    public bool get_useDefault();
    public void set_useDefault(bool value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.TestSettingsTypeRemoteController : object {
    private string nameField;
    [XmlAttributeAttribute]
public string name { get; public set; }
    public string get_name();
    public void set_name(string value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.TestSettingsTypeScripts : object {
    private string cleanupScriptField;
    private string setupScriptField;
    [XmlAttributeAttribute]
public string cleanupScript { get; public set; }
    [XmlAttributeAttribute]
public string setupScript { get; public set; }
    public string get_cleanupScript();
    public void set_cleanupScript(string value);
    public string get_setupScript();
    public void set_setupScript(string value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class Chutzpah.VSTS.Timestamp : object {
    private VirtualChannel[] virtualChannelField;
    private UInt32 valueField;
    private TimestampOperation operationField;
    [XmlElementAttribute("VirtualChannel")]
public VirtualChannel[] VirtualChannel { get; public set; }
    [XmlAttributeAttribute]
public UInt32 value { get; public set; }
    [XmlAttributeAttribute]
public TimestampOperation operation { get; public set; }
    public VirtualChannel[] get_VirtualChannel();
    public void set_VirtualChannel(VirtualChannel[] value);
    public UInt32 get_value();
    public void set_value(UInt32 value);
    public TimestampOperation get_operation();
    public void set_operation(TimestampOperation value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[XmlTypeAttribute]
public enum Chutzpah.VSTS.TimestampOperation : Enum {
    public int value__;
    public static TimestampOperation Add;
    public static TimestampOperation Modify;
    public static TimestampOperation Delete;
}
[XmlIncludeAttribute("Chutzpah.VSTS.LinearLatencyType")]
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.UniformLatencyType : object {
    private MsecType minField;
    private MsecType maxField;
    public MsecType Min { get; public set; }
    public MsecType Max { get; public set; }
    public MsecType get_Min();
    public void set_Min(MsecType value);
    public MsecType get_Max();
    public void set_Max(MsecType value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.UnitTestResultType : TestResultAggregationType {
    private XmlNode extensionResultField;
    private string resultTypeField;
    private string dataRowInfoField;
    private bool hasSufficientAccessField;
    public XmlNode ExtensionResult { get; public set; }
    [XmlAttributeAttribute]
public string resultType { get; public set; }
    [XmlAttributeAttribute]
public string dataRowInfo { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool hasSufficientAccess { get; public set; }
    public XmlNode get_ExtensionResult();
    public void set_ExtensionResult(XmlNode value);
    public string get_resultType();
    public void set_resultType(string value);
    public string get_dataRowInfo();
    public void set_dataRowInfo(string value);
    public bool get_hasSufficientAccess();
    public void set_hasSufficientAccess(bool value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.UnitTestType : BaseTestType {
    private UnitTestTypeTestMethod testMethodField;
    private UnitTestTypeDataSource dataSourceField;
    private UnitTestTypeAspNet aspNetField;
    private Object[] aspNetDevelopmentServersField;
    private XmlNode extensionField;
    public UnitTestTypeTestMethod TestMethod { get; public set; }
    public UnitTestTypeDataSource DataSource { get; public set; }
    public UnitTestTypeAspNet AspNet { get; public set; }
    [XmlArrayItemAttribute("DevelopmentServer")]
public Object[] AspNetDevelopmentServers { get; public set; }
    public XmlNode Extension { get; public set; }
    public UnitTestTypeTestMethod get_TestMethod();
    public void set_TestMethod(UnitTestTypeTestMethod value);
    public UnitTestTypeDataSource get_DataSource();
    public void set_DataSource(UnitTestTypeDataSource value);
    public UnitTestTypeAspNet get_AspNet();
    public void set_AspNet(UnitTestTypeAspNet value);
    public Object[] get_AspNetDevelopmentServers();
    public void set_AspNetDevelopmentServers(Object[] value);
    public XmlNode get_Extension();
    public void set_Extension(XmlNode value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.UnitTestTypeAspNet : object {
    private DevelopmentServerType[] developmentServerField;
    private string webSiteUrlField;
    [XmlElementAttribute("DevelopmentServer")]
public DevelopmentServerType[] DevelopmentServer { get; public set; }
    [XmlAttributeAttribute]
public string webSiteUrl { get; public set; }
    public DevelopmentServerType[] get_DevelopmentServer();
    public void set_DevelopmentServer(DevelopmentServerType[] value);
    public string get_webSiteUrl();
    public void set_webSiteUrl(string value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.UnitTestTypeDataSource : object {
    private string settingNameField;
    private string accessMethodField;
    private string connectionStringField;
    private string providerInvariantNameField;
    private string tableNameField;
    [XmlAttributeAttribute]
public string settingName { get; public set; }
    [XmlAttributeAttribute]
public string accessMethod { get; public set; }
    [XmlAttributeAttribute]
public string connectionString { get; public set; }
    [XmlAttributeAttribute]
public string providerInvariantName { get; public set; }
    [XmlAttributeAttribute]
public string tableName { get; public set; }
    public string get_settingName();
    public void set_settingName(string value);
    public string get_accessMethod();
    public void set_accessMethod(string value);
    public string get_connectionString();
    public void set_connectionString(string value);
    public string get_providerInvariantName();
    public void set_providerInvariantName(string value);
    public string get_tableName();
    public void set_tableName(string value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.UnitTestTypeTestMethod : object {
    private string codeBaseField;
    private string classNameField;
    private string nameField;
    private bool isValidField;
    private string adapterTypeNameField;
    [XmlAttributeAttribute]
public string codeBase { get; public set; }
    [XmlAttributeAttribute]
public string className { get; public set; }
    [XmlAttributeAttribute]
public string name { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool isValid { get; public set; }
    [XmlAttributeAttribute]
public string adapterTypeName { get; public set; }
    public string get_codeBase();
    public void set_codeBase(string value);
    public string get_className();
    public void set_className(string value);
    public string get_name();
    public void set_name(string value);
    public bool get_isValid();
    public void set_isValid(bool value);
    public string get_adapterTypeName();
    public void set_adapterTypeName(string value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[XmlTypeAttribute]
public enum Chutzpah.VSTS.UnitType : Enum {
    public int value__;
    public static UnitType byte;
    public static UnitType kb;
    public static UnitType packet;
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.UriAttachmentType : object {
    private UriAttachmentTypeA aField;
    public UriAttachmentTypeA A { get; public set; }
    public UriAttachmentTypeA get_A();
    public void set_A(UriAttachmentTypeA value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.UriAttachmentTypeA : object {
    private string hrefField;
    private string valueField;
    [XmlAttributeAttribute]
public string href { get; public set; }
    [XmlTextAttribute]
public string Value { get; public set; }
    public string get_href();
    public void set_href(string value);
    public string get_Value();
    public void set_Value(string value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class Chutzpah.VSTS.VirtualChannel : object {
    private FilterList filterListField;
    private VirtualLink[] virtualLinkField;
    private string nameField;
    private VirtualChannelDispatchType dispatchTypeField;
    private bool dispatchTypeFieldSpecified;
    public FilterList FilterList { get; public set; }
    [XmlElementAttribute("VirtualLink")]
public VirtualLink[] VirtualLink { get; public set; }
    [XmlAttributeAttribute]
public string name { get; public set; }
    [XmlAttributeAttribute]
public VirtualChannelDispatchType DispatchType { get; public set; }
    [XmlIgnoreAttribute]
public bool DispatchTypeSpecified { get; public set; }
    public FilterList get_FilterList();
    public void set_FilterList(FilterList value);
    public VirtualLink[] get_VirtualLink();
    public void set_VirtualLink(VirtualLink[] value);
    public string get_name();
    public void set_name(string value);
    public VirtualChannelDispatchType get_DispatchType();
    public void set_DispatchType(VirtualChannelDispatchType value);
    public bool get_DispatchTypeSpecified();
    public void set_DispatchTypeSpecified(bool value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[XmlTypeAttribute]
public enum Chutzpah.VSTS.VirtualChannelDispatchType : Enum {
    public int value__;
    public static VirtualChannelDispatchType packet;
    public static VirtualChannelDispatchType connection;
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class Chutzpah.VSTS.VirtualLink : object {
    private LinkRule[] linkRuleField;
    private string nameField;
    private ushort instancesField;
    private bool instancesFieldSpecified;
    [XmlElementAttribute("LinkRule")]
public LinkRule[] LinkRule { get; public set; }
    [XmlAttributeAttribute]
public string name { get; public set; }
    [XmlAttributeAttribute]
public ushort instances { get; public set; }
    [XmlIgnoreAttribute]
public bool instancesSpecified { get; public set; }
    public LinkRule[] get_LinkRule();
    public void set_LinkRule(LinkRule[] value);
    public string get_name();
    public void set_name(string value);
    public ushort get_instances();
    public void set_instances(ushort value);
    public bool get_instancesSpecified();
    public void set_instancesSpecified(bool value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.WebDataType : object {
    private WebDataTypeHeaders headersField;
    private string urlField;
    private string commandField;
    private string contentTypeField;
    private string encodingNameField;
    public WebDataTypeHeaders Headers { get; public set; }
    [XmlAttributeAttribute]
public string url { get; public set; }
    [XmlAttributeAttribute]
public string command { get; public set; }
    [XmlAttributeAttribute]
public string contentType { get; public set; }
    [XmlAttributeAttribute]
public string encodingName { get; public set; }
    public WebDataTypeHeaders get_Headers();
    public void set_Headers(WebDataTypeHeaders value);
    public string get_url();
    public void set_url(string value);
    public string get_command();
    public void set_command(string value);
    public string get_contentType();
    public void set_contentType(string value);
    public string get_encodingName();
    public void set_encodingName(string value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.WebDataTypeHeaders : object {
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.WebRequestResultsType1 : object {
    private WebRequestResultType[] webRequestResultField;
    [XmlElementAttribute("WebRequestResult")]
public WebRequestResultType[] WebRequestResult { get; public set; }
    public WebRequestResultType[] get_WebRequestResult();
    public void set_WebRequestResult(WebRequestResultType[] value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.WebRequestResultType : object {
    private WebRequestResultTypeRequest requestField;
    private WebRequestResultTypeResponse responseField;
    private WebRequestResultTypeEntry[] contextField;
    private WebRequestResultTypeError[] errorsField;
    private WebRequestResultType[] dependantResultsField;
    private RuleResultType[] validationRuleResultsField;
    private RuleResultType[] extractionRuleResultsField;
    private string redirectUrlField;
    private string exceptionMessageField;
    private int runField;
    private bool runFieldSpecified;
    private bool submittedField;
    private bool submittedFieldSpecified;
    private bool cachedField;
    private bool cachedFieldSpecified;
    private bool isRedirectFollowField;
    private bool isRedirectFollowFieldSpecified;
    private int requestBodyBytesHandleField;
    private bool requestBodyBytesHandleFieldSpecified;
    private int responseBytesHandleField;
    private bool responseBytesHandleFieldSpecified;
    private string resultsUrlField;
    private int httpStatusField;
    private bool recordResultField;
    private string scenarioNameField;
    private string testCaseNameField;
    private int failedValidationRuleCountField;
    private bool failedValidationRuleCountFieldSpecified;
    private int successfulExtractionRuleCountField;
    private bool successfulExtractionRuleCountFieldSpecified;
    private int failedExtractionRuleCountField;
    private bool failedExtractionRuleCountFieldSpecified;
    private bool requestPassedByCodeField;
    private bool requestPassedByCodeFieldSpecified;
    public WebRequestResultTypeRequest Request { get; public set; }
    public WebRequestResultTypeResponse Response { get; public set; }
    [XmlArrayItemAttribute("Entry")]
public WebRequestResultTypeEntry[] Context { get; public set; }
    [XmlArrayItemAttribute("Error")]
public WebRequestResultTypeError[] Errors { get; public set; }
    [XmlArrayItemAttribute("WebRequestResult")]
public WebRequestResultType[] DependantResults { get; public set; }
    [XmlArrayItemAttribute("ValidationRuleResult")]
public RuleResultType[] ValidationRuleResults { get; public set; }
    [XmlArrayItemAttribute("ExtractionRuleResult")]
public RuleResultType[] ExtractionRuleResults { get; public set; }
    [XmlAttributeAttribute]
public string redirectUrl { get; public set; }
    [XmlAttributeAttribute]
public string exceptionMessage { get; public set; }
    [XmlAttributeAttribute]
public int run { get; public set; }
    [XmlIgnoreAttribute]
public bool runSpecified { get; public set; }
    [XmlAttributeAttribute]
public bool submitted { get; public set; }
    [XmlIgnoreAttribute]
public bool submittedSpecified { get; public set; }
    [XmlAttributeAttribute]
public bool cached { get; public set; }
    [XmlIgnoreAttribute]
public bool cachedSpecified { get; public set; }
    [XmlAttributeAttribute]
public bool isRedirectFollow { get; public set; }
    [XmlIgnoreAttribute]
public bool isRedirectFollowSpecified { get; public set; }
    [XmlAttributeAttribute]
public int requestBodyBytesHandle { get; public set; }
    [XmlIgnoreAttribute]
public bool requestBodyBytesHandleSpecified { get; public set; }
    [XmlAttributeAttribute]
public int responseBytesHandle { get; public set; }
    [XmlIgnoreAttribute]
public bool responseBytesHandleSpecified { get; public set; }
    [XmlAttributeAttribute]
public string resultsUrl { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("200")]
public int httpStatus { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool recordResult { get; public set; }
    [XmlAttributeAttribute]
public string scenarioName { get; public set; }
    [XmlAttributeAttribute]
public string testCaseName { get; public set; }
    [XmlAttributeAttribute]
public int failedValidationRuleCount { get; public set; }
    [XmlIgnoreAttribute]
public bool failedValidationRuleCountSpecified { get; public set; }
    [XmlAttributeAttribute]
public int successfulExtractionRuleCount { get; public set; }
    [XmlIgnoreAttribute]
public bool successfulExtractionRuleCountSpecified { get; public set; }
    [XmlAttributeAttribute]
public int failedExtractionRuleCount { get; public set; }
    [XmlIgnoreAttribute]
public bool failedExtractionRuleCountSpecified { get; public set; }
    [XmlAttributeAttribute]
public bool requestPassedByCode { get; public set; }
    [XmlIgnoreAttribute]
public bool requestPassedByCodeSpecified { get; public set; }
    public WebRequestResultTypeRequest get_Request();
    public void set_Request(WebRequestResultTypeRequest value);
    public WebRequestResultTypeResponse get_Response();
    public void set_Response(WebRequestResultTypeResponse value);
    public WebRequestResultTypeEntry[] get_Context();
    public void set_Context(WebRequestResultTypeEntry[] value);
    public WebRequestResultTypeError[] get_Errors();
    public void set_Errors(WebRequestResultTypeError[] value);
    public WebRequestResultType[] get_DependantResults();
    public void set_DependantResults(WebRequestResultType[] value);
    public RuleResultType[] get_ValidationRuleResults();
    public void set_ValidationRuleResults(RuleResultType[] value);
    public RuleResultType[] get_ExtractionRuleResults();
    public void set_ExtractionRuleResults(RuleResultType[] value);
    public string get_redirectUrl();
    public void set_redirectUrl(string value);
    public string get_exceptionMessage();
    public void set_exceptionMessage(string value);
    public int get_run();
    public void set_run(int value);
    public bool get_runSpecified();
    public void set_runSpecified(bool value);
    public bool get_submitted();
    public void set_submitted(bool value);
    public bool get_submittedSpecified();
    public void set_submittedSpecified(bool value);
    public bool get_cached();
    public void set_cached(bool value);
    public bool get_cachedSpecified();
    public void set_cachedSpecified(bool value);
    public bool get_isRedirectFollow();
    public void set_isRedirectFollow(bool value);
    public bool get_isRedirectFollowSpecified();
    public void set_isRedirectFollowSpecified(bool value);
    public int get_requestBodyBytesHandle();
    public void set_requestBodyBytesHandle(int value);
    public bool get_requestBodyBytesHandleSpecified();
    public void set_requestBodyBytesHandleSpecified(bool value);
    public int get_responseBytesHandle();
    public void set_responseBytesHandle(int value);
    public bool get_responseBytesHandleSpecified();
    public void set_responseBytesHandleSpecified(bool value);
    public string get_resultsUrl();
    public void set_resultsUrl(string value);
    public int get_httpStatus();
    public void set_httpStatus(int value);
    public bool get_recordResult();
    public void set_recordResult(bool value);
    public string get_scenarioName();
    public void set_scenarioName(string value);
    public string get_testCaseName();
    public void set_testCaseName(string value);
    public int get_failedValidationRuleCount();
    public void set_failedValidationRuleCount(int value);
    public bool get_failedValidationRuleCountSpecified();
    public void set_failedValidationRuleCountSpecified(bool value);
    public int get_successfulExtractionRuleCount();
    public void set_successfulExtractionRuleCount(int value);
    public bool get_successfulExtractionRuleCountSpecified();
    public void set_successfulExtractionRuleCountSpecified(bool value);
    public int get_failedExtractionRuleCount();
    public void set_failedExtractionRuleCount(int value);
    public bool get_failedExtractionRuleCountSpecified();
    public void set_failedExtractionRuleCountSpecified(bool value);
    public bool get_requestPassedByCode();
    public void set_requestPassedByCode(bool value);
    public bool get_requestPassedByCodeSpecified();
    public void set_requestPassedByCodeSpecified(bool value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.WebRequestResultTypeEntry : object {
    private string nameField;
    private string valueField;
    [XmlAttributeAttribute]
public string name { get; public set; }
    [XmlAttributeAttribute]
public string value { get; public set; }
    public string get_name();
    public void set_name(string value);
    public string get_value();
    public void set_value(string value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.WebRequestResultTypeError : object {
    private object stackTraceField;
    private object exceptionTextField;
    private WebTestErrorType typeField;
    private bool typeFieldSpecified;
    private string subTypeField;
    private string textField;
    private string stackTraceField1;
    private string exceptionTextField1;
    private string timeField;
    public object StackTrace { get; public set; }
    public object ExceptionText { get; public set; }
    [XmlAttributeAttribute]
public WebTestErrorType type { get; public set; }
    [XmlIgnoreAttribute]
public bool typeSpecified { get; public set; }
    [XmlAttributeAttribute]
public string subType { get; public set; }
    [XmlAttributeAttribute]
public string text { get; public set; }
    [XmlAttributeAttribute]
public string stackTrace { get; public set; }
    [XmlAttributeAttribute]
public string exceptionText { get; public set; }
    [XmlAttributeAttribute]
public string time { get; public set; }
    public object get_StackTrace();
    public void set_StackTrace(object value);
    public object get_ExceptionText();
    public void set_ExceptionText(object value);
    public WebTestErrorType get_type();
    public void set_type(WebTestErrorType value);
    public bool get_typeSpecified();
    public void set_typeSpecified(bool value);
    public string get_subType();
    public void set_subType(string value);
    public string get_text();
    public void set_text(string value);
    public string get_stackTrace();
    public void set_stackTrace(string value);
    public string get_exceptionText();
    public void set_exceptionText(string value);
    public string get_time();
    public void set_time(string value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.WebRequestResultTypeRequest : object {
    private object headersField;
    private string urlField;
    private string commandField;
    private string contentTypeField;
    private string encodingField;
    public object Headers { get; public set; }
    [XmlAttributeAttribute]
public string url { get; public set; }
    [XmlAttributeAttribute]
public string command { get; public set; }
    [XmlAttributeAttribute]
public string contentType { get; public set; }
    [XmlAttributeAttribute]
public string encoding { get; public set; }
    public object get_Headers();
    public void set_Headers(object value);
    public string get_url();
    public void set_url(string value);
    public string get_command();
    public void set_command(string value);
    public string get_contentType();
    public void set_contentType(string value);
    public string get_encoding();
    public void set_encoding(string value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.WebRequestResultTypeResponse : object {
    private object headersField;
    private string urlField;
    private string contentTypeField;
    private string statusLineField;
    private string pageTimeField;
    private string timeField;
    private string statusCodeStringField;
    private string contentLengthField;
    public object Headers { get; public set; }
    [XmlAttributeAttribute]
public string url { get; public set; }
    [XmlAttributeAttribute]
public string contentType { get; public set; }
    [XmlAttributeAttribute]
public string statusLine { get; public set; }
    [XmlAttributeAttribute]
public string pageTime { get; public set; }
    [XmlAttributeAttribute]
public string time { get; public set; }
    [XmlAttributeAttribute]
public string statusCodeString { get; public set; }
    [XmlAttributeAttribute]
public string contentLength { get; public set; }
    public object get_Headers();
    public void set_Headers(object value);
    public string get_url();
    public void set_url(string value);
    public string get_contentType();
    public void set_contentType(string value);
    public string get_statusLine();
    public void set_statusLine(string value);
    public string get_pageTime();
    public void set_pageTime(string value);
    public string get_time();
    public void set_time(string value);
    public string get_statusCodeString();
    public void set_statusCodeString(string value);
    public string get_contentLength();
    public void set_contentLength(string value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[XmlTypeAttribute]
public enum Chutzpah.VSTS.WebTestConnectionModel : Enum {
    public int value__;
    public static WebTestConnectionModel ConnectionPerUser;
    public static WebTestConnectionModel ConnectionPool;
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[XmlTypeAttribute]
public enum Chutzpah.VSTS.WebTestErrorType : Enum {
    public int value__;
    public static WebTestErrorType TestError;
    public static WebTestErrorType Exception;
    public static WebTestErrorType HttpError;
    public static WebTestErrorType ValidationRuleError;
    public static WebTestErrorType ExtractionRuleError;
    public static WebTestErrorType Timeout;
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.WebTestItemsType : object {
    private Object[] itemsField;
    [XmlElementAttribute("Request", "Chutzpah.VSTS.WebTestRequestType")]
[XmlElementAttribute("TransactionTimer", "Chutzpah.VSTS.WebTestItemsTypeTransactionTimer")]
public Object[] Items { get; public set; }
    public Object[] get_Items();
    public void set_Items(Object[] value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.WebTestItemsTypeTransactionTimer : object {
    private WebTestItemsType itemsField;
    private string nameField;
    public WebTestItemsType Items { get; public set; }
    [XmlAttributeAttribute]
public string Name { get; public set; }
    public WebTestItemsType get_Items();
    public void set_Items(WebTestItemsType value);
    public string get_Name();
    public void set_Name(string value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.WebTestRequestType : object {
    private WebTestRequestTypeStringHttpBody stringHttpBodyField;
    private WebTestRequestType[] dependentRequestsField;
    private HeadersTypeHeader[] headersField;
    private WebTestRequestTypeExtractionRule[] extractionRulesField;
    private WebTestRequestTypeQueryStringParameter[] queryStringParametersField;
    private WebTestRequestTypeFormPostHttpBody formPostHttpBodyField;
    private string guidField;
    private string methodField;
    private decimal versionField;
    private bool versionFieldSpecified;
    private string urlField;
    private byte thinkTimeField;
    private bool thinkTimeFieldSpecified;
    private byte timeoutField;
    private bool timeoutFieldSpecified;
    private bool parseLinksField;
    private bool followRedirectsField;
    private bool cacheField;
    public WebTestRequestTypeStringHttpBody StringHttpBody { get; public set; }
    [XmlArrayItemAttribute("Request")]
public WebTestRequestType[] DependentRequests { get; public set; }
    [XmlArrayItemAttribute("Header")]
public HeadersTypeHeader[] Headers { get; public set; }
    [XmlArrayItemAttribute("ExtractionRule")]
public WebTestRequestTypeExtractionRule[] ExtractionRules { get; public set; }
    [XmlArrayItemAttribute("QueryStringParameter")]
public WebTestRequestTypeQueryStringParameter[] QueryStringParameters { get; public set; }
    public WebTestRequestTypeFormPostHttpBody FormPostHttpBody { get; public set; }
    [XmlAttributeAttribute]
public string Guid { get; public set; }
    [XmlAttributeAttribute]
public string method { get; public set; }
    [XmlAttributeAttribute]
public decimal version { get; public set; }
    [XmlIgnoreAttribute]
public bool versionSpecified { get; public set; }
    [XmlAttributeAttribute]
public string url { get; public set; }
    [XmlAttributeAttribute]
public byte thinkTime { get; public set; }
    [XmlIgnoreAttribute]
public bool thinkTimeSpecified { get; public set; }
    [XmlAttributeAttribute]
public byte timeout { get; public set; }
    [XmlIgnoreAttribute]
public bool timeoutSpecified { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool parseLinks { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool followRedirects { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool cache { get; public set; }
    public WebTestRequestTypeStringHttpBody get_StringHttpBody();
    public void set_StringHttpBody(WebTestRequestTypeStringHttpBody value);
    public WebTestRequestType[] get_DependentRequests();
    public void set_DependentRequests(WebTestRequestType[] value);
    public HeadersTypeHeader[] get_Headers();
    public void set_Headers(HeadersTypeHeader[] value);
    public WebTestRequestTypeExtractionRule[] get_ExtractionRules();
    public void set_ExtractionRules(WebTestRequestTypeExtractionRule[] value);
    public WebTestRequestTypeQueryStringParameter[] get_QueryStringParameters();
    public void set_QueryStringParameters(WebTestRequestTypeQueryStringParameter[] value);
    public WebTestRequestTypeFormPostHttpBody get_FormPostHttpBody();
    public void set_FormPostHttpBody(WebTestRequestTypeFormPostHttpBody value);
    public string get_Guid();
    public void set_Guid(string value);
    public string get_method();
    public void set_method(string value);
    public decimal get_version();
    public void set_version(decimal value);
    public bool get_versionSpecified();
    public void set_versionSpecified(bool value);
    public string get_url();
    public void set_url(string value);
    public byte get_thinkTime();
    public void set_thinkTime(byte value);
    public bool get_thinkTimeSpecified();
    public void set_thinkTimeSpecified(bool value);
    public byte get_timeout();
    public void set_timeout(byte value);
    public bool get_timeoutSpecified();
    public void set_timeoutSpecified(bool value);
    public bool get_parseLinks();
    public void set_parseLinks(bool value);
    public bool get_followRedirects();
    public void set_followRedirects(bool value);
    public bool get_cache();
    public void set_cache(bool value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.WebTestRequestTypeExtractionRule : object {
    private string classNameField;
    private string variableNameField;
    [XmlAttributeAttribute]
public string className { get; public set; }
    [XmlAttributeAttribute]
public string variableName { get; public set; }
    public string get_className();
    public void set_className(string value);
    public string get_variableName();
    public void set_variableName(string value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.WebTestRequestTypeFormPostHttpBody : object {
    private WebTestRequestTypeFormPostHttpBodyFormPostParameter[] formPostParameterField;
    private WebTestRequestTypeFormPostHttpBodyFileUploadParameter fileUploadParameterField;
    [XmlElementAttribute("FormPostParameter")]
public WebTestRequestTypeFormPostHttpBodyFormPostParameter[] FormPostParameter { get; public set; }
    public WebTestRequestTypeFormPostHttpBodyFileUploadParameter FileUploadParameter { get; public set; }
    public WebTestRequestTypeFormPostHttpBodyFormPostParameter[] get_FormPostParameter();
    public void set_FormPostParameter(WebTestRequestTypeFormPostHttpBodyFormPostParameter[] value);
    public WebTestRequestTypeFormPostHttpBodyFileUploadParameter get_FileUploadParameter();
    public void set_FileUploadParameter(WebTestRequestTypeFormPostHttpBodyFileUploadParameter value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.WebTestRequestTypeFormPostHttpBodyFileUploadParameter : object {
    private string nameField;
    private string fileNameField;
    private string contentTypeField;
    [XmlAttributeAttribute]
public string name { get; public set; }
    [XmlAttributeAttribute]
public string fileName { get; public set; }
    [XmlAttributeAttribute]
public string contentType { get; public set; }
    public string get_name();
    public void set_name(string value);
    public string get_fileName();
    public void set_fileName(string value);
    public string get_contentType();
    public void set_contentType(string value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.WebTestRequestTypeFormPostHttpBodyFormPostParameter : object {
    private string nameField;
    private string valueField;
    [XmlAttributeAttribute]
public string name { get; public set; }
    [XmlAttributeAttribute]
public string value { get; public set; }
    public string get_name();
    public void set_name(string value);
    public string get_value();
    public void set_value(string value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.WebTestRequestTypeQueryStringParameter : object {
    private string nameField;
    private string valueField;
    private bool useToGroupResultsField;
    [XmlAttributeAttribute]
public string name { get; public set; }
    [XmlAttributeAttribute]
public string value { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool useToGroupResults { get; public set; }
    public string get_name();
    public void set_name(string value);
    public string get_value();
    public void set_value(string value);
    public bool get_useToGroupResults();
    public void set_useToGroupResults(bool value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.WebTestRequestTypeStringHttpBody : object {
    private string contentTypeField;
    private string valueField;
    [XmlAttributeAttribute]
public string contentType { get; public set; }
    [XmlTextAttribute]
public string Value { get; public set; }
    public string get_contentType();
    public void set_contentType(string value);
    public string get_Value();
    public void set_Value(string value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.WebTestResultCommentType : object {
    private string commentField;
    [XmlAttributeAttribute]
public string comment { get; public set; }
    public string get_comment();
    public void set_comment(string value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.WebTestResultDetailsType : object {
    private WebTestResultDetailsTypeWebTestResultIteration[] webTestResultIterationsField;
    [XmlArrayItemAttribute("WebTestResultIteration")]
public WebTestResultDetailsTypeWebTestResultIteration[] WebTestResultIterations { get; public set; }
    public WebTestResultDetailsTypeWebTestResultIteration[] get_WebTestResultIterations();
    public void set_WebTestResultIterations(WebTestResultDetailsTypeWebTestResultIteration[] value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.WebTestResultDetailsTypeWebTestResultIteration : object {
    private Object[] webTestResultGroupField;
    private int iterationNumberField;
    [XmlArrayItemAttribute("WebTestResultComment", "Chutzpah.VSTS.WebTestResultCommentType")]
[XmlArrayItemAttribute("WebTestResultPage", "Chutzpah.VSTS.WebTestResultPageType")]
[XmlArrayItemAttribute("WebTestResultTransaction", "Chutzpah.VSTS.WebTestResultTransactionType")]
public Object[] WebTestResultGroup { get; public set; }
    [XmlAttributeAttribute]
public int iterationNumber { get; public set; }
    public Object[] get_WebTestResultGroup();
    public void set_WebTestResultGroup(Object[] value);
    public int get_iterationNumber();
    public void set_iterationNumber(int value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.WebTestResultPageType : object {
    private WebRequestResultType webRequestResultField;
    private WebTestResultRedirectedPageType[] redirectedPagesField;
    public WebRequestResultType WebRequestResult { get; public set; }
    [XmlArrayItemAttribute("RedirectedPage")]
public WebTestResultRedirectedPageType[] RedirectedPages { get; public set; }
    public WebRequestResultType get_WebRequestResult();
    public void set_WebRequestResult(WebRequestResultType value);
    public WebTestResultRedirectedPageType[] get_RedirectedPages();
    public void set_RedirectedPages(WebTestResultRedirectedPageType[] value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.WebTestResultRedirectedPageType : object {
    private WebRequestResultType webRequestResultField;
    public WebRequestResultType WebRequestResult { get; public set; }
    public WebRequestResultType get_WebRequestResult();
    public void set_WebRequestResult(WebRequestResultType value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.WebTestResultTransactionType : object {
    private Object[] webTestResultGroupField;
    private string nameField;
    private bool isIncludedTestField;
    private bool isIncludedTestFieldSpecified;
    private string responseTimeField;
    [XmlArrayItemAttribute("WebTestResultComment", "Chutzpah.VSTS.WebTestResultCommentType")]
[XmlArrayItemAttribute("WebTestResultPage", "Chutzpah.VSTS.WebTestResultPageType")]
[XmlArrayItemAttribute("WebTestResultTransaction", "Chutzpah.VSTS.WebTestResultTransactionType")]
public Object[] WebTestResultGroup { get; public set; }
    [XmlAttributeAttribute]
public string name { get; public set; }
    [XmlAttributeAttribute]
public bool isIncludedTest { get; public set; }
    [XmlIgnoreAttribute]
public bool isIncludedTestSpecified { get; public set; }
    [XmlAttributeAttribute]
public string responseTime { get; public set; }
    public Object[] get_WebTestResultGroup();
    public void set_WebTestResultGroup(Object[] value);
    public string get_name();
    public void set_name(string value);
    public bool get_isIncludedTest();
    public void set_isIncludedTest(bool value);
    public bool get_isIncludedTestSpecified();
    public void set_isIncludedTestSpecified(bool value);
    public string get_responseTime();
    public void set_responseTime(string value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.WebTestResultType : TestResultType {
    private Object[] items1Field;
    private Items1ChoiceType[] items1ElementNameField;
    private UInt32 dataRowCountField;
    [XmlElementAttribute("ByteArrayCache", "Chutzpah.VSTS.WebTestResultTypeByteArrayCache")]
[XmlElementAttribute("TestRunConfiguration", "Chutzpah.VSTS.TestRunConfiguration")]
[XmlElementAttribute("TestSettings", "Chutzpah.VSTS.TestSettingsType")]
[XmlElementAttribute("WebRequestResults", "Chutzpah.VSTS.WebRequestResultsType1")]
[XmlElementAttribute("WebTestRecordedResultFilePath", "System.String")]
[XmlElementAttribute("WebTestResultDetails", "Chutzpah.VSTS.WebTestResultDetailsType")]
[XmlElementAttribute("WebTestResultFilePath", "System.String")]
[XmlChoiceIdentifierAttribute("Items1ElementName")]
public Object[] Items1 { get; public set; }
    [XmlElementAttribute("Items1ElementName")]
[XmlIgnoreAttribute]
public Items1ChoiceType[] Items1ElementName { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("System.UInt32", "0")]
public UInt32 dataRowCount { get; public set; }
    public Object[] get_Items1();
    public void set_Items1(Object[] value);
    public Items1ChoiceType[] get_Items1ElementName();
    public void set_Items1ElementName(Items1ChoiceType[] value);
    public UInt32 get_dataRowCount();
    public void set_dataRowCount(UInt32 value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.WebTestResultTypeByteArrayCache : object {
    private WebTestResultTypeByteArrayCacheEntry[] entryField;
    private int nextHandleField;
    [XmlElementAttribute("Entry")]
public WebTestResultTypeByteArrayCacheEntry[] Entry { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("0")]
public int nextHandle { get; public set; }
    public WebTestResultTypeByteArrayCacheEntry[] get_Entry();
    public void set_Entry(WebTestResultTypeByteArrayCacheEntry[] value);
    public int get_nextHandle();
    public void set_nextHandle(int value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.WebTestResultTypeByteArrayCacheEntry : object {
    private int handleField;
    private string bytesField;
    [XmlAttributeAttribute]
public int handle { get; public set; }
    [XmlAttributeAttribute]
public string bytes { get; public set; }
    public int get_handle();
    public void set_handle(int value);
    public string get_bytes();
    public void set_bytes(string value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.WebTestRunConfigurationType : object {
    private BrowserType browserField;
    private NetworkType networkField;
    private bool simulateThinkTimesField;
    private bool useNewCookieDefaultPathField;
    private bool automaticallyDecompressResponseField;
    private bool steppingField;
    private bool runUntilDataExhaustedField;
    private int iterationCountField;
    private string testTypeIdField;
    public BrowserType Browser { get; public set; }
    public NetworkType Network { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool simulateThinkTimes { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool UseNewCookieDefaultPath { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("True")]
public bool AutomaticallyDecompressResponse { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool stepping { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("False")]
public bool runUntilDataExhausted { get; public set; }
    [XmlAttributeAttribute]
[DefaultValueAttribute("1")]
public int iterationCount { get; public set; }
    [XmlAttributeAttribute]
public string testTypeId { get; public set; }
    public BrowserType get_Browser();
    public void set_Browser(BrowserType value);
    public NetworkType get_Network();
    public void set_Network(NetworkType value);
    public bool get_simulateThinkTimes();
    public void set_simulateThinkTimes(bool value);
    public bool get_UseNewCookieDefaultPath();
    public void set_UseNewCookieDefaultPath(bool value);
    public bool get_AutomaticallyDecompressResponse();
    public void set_AutomaticallyDecompressResponse(bool value);
    public bool get_stepping();
    public void set_stepping(bool value);
    public bool get_runUntilDataExhausted();
    public void set_runUntilDataExhausted(bool value);
    public int get_iterationCount();
    public void set_iterationCount(int value);
    public string get_testTypeId();
    public void set_testTypeId(string value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17929")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Chutzpah.VSTS.WorkItemIDsType : object {
    private IDElementType[] workItemField;
    [XmlElementAttribute("WorkItem")]
public IDElementType[] WorkItem { get; public set; }
    public IDElementType[] get_WorkItem();
    public void set_WorkItem(IDElementType[] value);
}
public class Chutzpah.Wrappers.BinarySerializer : object {
    public sealed virtual T Deserialize(Stream stream);
    public sealed virtual void Serialize(Stream stream, object object);
}
public class Chutzpah.Wrappers.EnvironmentWrapper : object {
    public sealed virtual String[] GetCommandLineArgs();
    public sealed virtual string GetExeuctingAssemblyPath();
}
public class Chutzpah.Wrappers.FileSystemWrapper : object {
    public sealed virtual string GetRandomFileName();
    public sealed virtual string GetTemporaryFolder(string leaf);
    public sealed virtual void MoveFile(string sourceFilename, string destFilename);
    public sealed virtual void CopyFile(string sourceFilename, string destFilename, bool overwrite);
    public sealed virtual void SetFileAttributes(string fileName, FileAttributes attributes);
    public sealed virtual void MoveDirectory(string sourceDirectory, string destDirectory);
    public sealed virtual DateTime GetCreationTime(string path);
    public sealed virtual DateTime GetLastWriteTime(string path);
    public sealed virtual DateTime GetLastAccessTime(string path);
    public sealed virtual bool FileExists(string path);
    public sealed virtual bool FolderExists(string path);
    public sealed virtual void DeleteFile(string path);
    public sealed virtual void WriteAllText(string path, string text);
    public sealed virtual void WriteAllText(string path, string text, Encoding encoding);
    public sealed virtual void DeleteDirectory(string path, bool recursive);
    public sealed virtual string GetDirectoryName(string path);
    public sealed virtual void CreateDirectory(string path);
    public sealed virtual string GetFullPath(string path);
    public sealed virtual IEnumerable`1<string> GetDirectories(string directory);
    public sealed virtual String[] GetFiles(string path, string searchPattern, SearchOption searchOption);
    public sealed virtual string GetFileName(string path);
    public sealed virtual Stream Open(string path);
    public sealed virtual Stream Open(string path, FileMode mode, FileAccess access);
    public sealed virtual void Save(string path, Stream stream);
    public sealed virtual Byte[] GetContent(Stream stream);
    public sealed virtual string GetText(string path);
    public sealed virtual String[] GetLines(string path);
    public sealed virtual void Save(string path, string contents);
    private T Retry(Func`1<T> action, int maxCount);
    public sealed virtual bool IsPathRooted(string path);
}
public class Chutzpah.Wrappers.HtmlUtility : object {
    public sealed virtual string DecodeJavaScript(string text);
}
public class Chutzpah.Wrappers.HttpWrapper : object {
    public sealed virtual string GetContent(string url);
}
public interface Chutzpah.Wrappers.IBinarySerializer {
    public abstract virtual T Deserialize(Stream stream);
    public abstract virtual void Serialize(Stream stream, object object);
}
public interface Chutzpah.Wrappers.ICompilerEngineWrapper {
    public abstract virtual string Compile(string source, Object[] args);
}
public interface Chutzpah.Wrappers.IEnvironmentWrapper {
    public abstract virtual String[] GetCommandLineArgs();
    public abstract virtual string GetExeuctingAssemblyPath();
}
public interface Chutzpah.Wrappers.IFileSystemWrapper {
    public abstract virtual string GetTemporaryFolder(string leaf);
    public abstract virtual void MoveFile(string sourceFilename, string destFilename);
    public abstract virtual void CopyFile(string sourceFilename, string destFilename, bool overwrite);
    public abstract virtual void MoveDirectory(string sourceDirectory, string destDirectory);
    public abstract virtual void SetFileAttributes(string fileName, FileAttributes attributes);
    public abstract virtual DateTime GetCreationTime(string path);
    public abstract virtual DateTime GetLastAccessTime(string path);
    public abstract virtual bool FileExists(string path);
    public abstract virtual bool FolderExists(string path);
    public abstract virtual void DeleteFile(string path);
    public abstract virtual void DeleteDirectory(string path, bool recursive);
    public abstract virtual string GetDirectoryName(string path);
    public abstract virtual void CreateDirectory(string path);
    public abstract virtual string GetFullPath(string path);
    public abstract virtual IEnumerable`1<string> GetDirectories(string directory);
    public abstract virtual String[] GetFiles(string path, string searchPattern, SearchOption searchOption);
    public abstract virtual string GetFileName(string path);
    public abstract virtual Stream Open(string path);
    public abstract virtual Stream Open(string path, FileMode mode, FileAccess access);
    public abstract virtual void Save(string path, Stream stream);
    public abstract virtual Byte[] GetContent(Stream stream);
    public abstract virtual void Save(string path, string contents);
    public abstract virtual string GetText(string path);
    public abstract virtual String[] GetLines(string path);
    public abstract virtual string GetRandomFileName();
    public abstract virtual DateTime GetLastWriteTime(string path);
    public abstract virtual void WriteAllText(string path, string text);
    public abstract virtual void WriteAllText(string path, string text, Encoding encoding);
    public abstract virtual bool IsPathRooted(string path);
}
public interface Chutzpah.Wrappers.IHtmlUtility {
    public abstract virtual string DecodeJavaScript(string text);
}
public interface Chutzpah.Wrappers.IHttpWrapper {
    public abstract virtual string GetContent(string url);
}
public interface Chutzpah.Wrappers.IJsonSerializer {
    public abstract virtual T Deserialize(string json);
    public abstract virtual string Serialize(T object);
    public abstract virtual T DeserializeFromFile(string path);
}
public interface Chutzpah.Wrappers.IProcessWrapper {
    public ProcessStartInfo StartInfo { get; public set; }
    public StreamReader StandardOutput { get; }
    public StreamWriter StandardInput { get; }
    public StreamReader StandardError { get; }
    public abstract virtual ProcessStartInfo get_StartInfo();
    public abstract virtual void set_StartInfo(ProcessStartInfo value);
    public abstract virtual StreamReader get_StandardOutput();
    public abstract virtual StreamWriter get_StandardInput();
    public abstract virtual StreamReader get_StandardError();
    public abstract virtual bool Start();
    public abstract virtual void WaitForExit();
    public abstract virtual bool WaitForExit(int milliseconds);
    public abstract virtual void Kill();
}
public class Chutzpah.Wrappers.JsonSerializer : object {
    public sealed virtual T DeserializeFromFile(string path);
    public sealed virtual T Deserialize(string response);
    public sealed virtual string Serialize(T object);
}
public class Chutzpah.Wrappers.ProcessWrapper : object {
    private Process process;
    public ProcessStartInfo StartInfo { get; public set; }
    public StreamReader StandardOutput { get; }
    public StreamWriter StandardInput { get; }
    public StreamReader StandardError { get; }
    public ProcessWrapper(Process process);
    public sealed virtual ProcessStartInfo get_StartInfo();
    public sealed virtual void set_StartInfo(ProcessStartInfo value);
    public sealed virtual StreamReader get_StandardOutput();
    public sealed virtual StreamWriter get_StandardInput();
    public sealed virtual StreamReader get_StandardError();
    public sealed virtual bool Start();
    public sealed virtual void WaitForExit();
    public sealed virtual bool WaitForExit(int milliseconds);
    public sealed virtual void Kill();
}
