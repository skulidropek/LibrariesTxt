public abstract class CitizenFX.Core.BaseScript : object {
    protected internal EventHandlerDictionary EventHandlers { get; }
    protected ExportDictionary Exports { get; }
    protected StateBag GlobalState { get; }
    protected PlayerList Players { get; }
    [CompilerGeneratedAttribute]
protected internal EventHandlerDictionary get_EventHandlers();
    [CompilerGeneratedAttribute]
protected ExportDictionary get_Exports();
    [CompilerGeneratedAttribute]
protected StateBag get_GlobalState();
    [CompilerGeneratedAttribute]
protected PlayerList get_Players();
    protected void add_Tick(Func`1<Task> value);
    protected void remove_Tick(Func`1<Task> value);
    public static Task Delay(int msecs);
    public static void RegisterScript(BaseScript script);
    public static void TriggerClientEvent(Player player, string eventName, Object[] args);
    public static void TriggerClientEvent(string eventName, Object[] args);
    public static void TriggerEvent(string eventName, Object[] args);
    public static void TriggerLatentClientEvent(Player player, string eventName, int bytesPerSecond, Object[] args);
    public static void TriggerLatentClientEvent(string eventName, int bytesPerSecond, Object[] args);
    public static void UnregisterScript(BaseScript script);
}
public class CitizenFX.Core.CallbackDelegate : MulticastDelegate {
    public CallbackDelegate(object object, IntPtr method);
    public virtual object Invoke(Object[] args);
    public virtual IAsyncResult BeginInvoke(Object[] args, AsyncCallback callback, object object);
    public virtual object EndInvoke(IAsyncResult result);
}
[AttributeUsageAttribute("64")]
public class CitizenFX.Core.CommandAttribute : Attribute {
    public string Command;
    public bool Restricted;
    public CommandAttribute(string command);
}
public static class CitizenFX.Core.Debug : object {
    public static void Write(string data);
    public static void Write(string format, Object[] args);
    public static void WriteLine();
    public static void WriteLine(string data);
    public static void WriteLine(string format, Object[] args);
}
public abstract class CitizenFX.Core.Entity : PoolObject {
    public float Heading { get; public set; }
    unknown bool IsPositionFrozen {public set; }
    public int Model { get; }
    public int NetworkId { get; }
    public Player Owner { get; }
    public Vector3 Position { get; public set; }
    public Vector3 Rotation { get; public set; }
    public Vector3 RotationVelocity { get; }
    public StateBag State { get; }
    public int Type { get; }
    public Vector3 Velocity { get; public set; }
    public Entity(int handle);
    public float get_Heading();
    public void set_Heading(float value);
    public void set_IsPositionFrozen(bool value);
    public int get_Model();
    public int get_NetworkId();
    public Player get_Owner();
    public virtual Vector3 get_Position();
    public virtual void set_Position(Vector3 value);
    public virtual Vector3 get_Rotation();
    public virtual void set_Rotation(Vector3 value);
    public Vector3 get_RotationVelocity();
    public StateBag get_State();
    public int get_Type();
    public Vector3 get_Velocity();
    public void set_Velocity(Vector3 value);
    public sealed virtual bool Equals(Entity entity);
    public virtual bool Equals(object obj);
    public static Entity FromHandle(int handle);
    public static Entity FromNetworkId(int networkId);
    public virtual int GetHashCode();
    public static bool op_Equality(Entity left, Entity right);
    public static bool op_Inequality(Entity left, Entity right);
}
[AttributeUsageAttribute("64")]
public class CitizenFX.Core.EventHandlerAttribute : Attribute {
    public string Name;
    public EventHandlerAttribute(string name);
}
[DefaultMemberAttribute("Item")]
public class CitizenFX.Core.EventHandlerDictionary : Dictionary`2<string, EventHandlerEntry> {
    public EventHandlerEntry Item { get; public set; }
    public EventHandlerEntry get_Item(string key);
    public void set_Item(string key, EventHandlerEntry value);
    public void Add(string key, Delegate value);
}
public class CitizenFX.Core.EventHandlerEntry : object {
    public EventHandlerEntry(string eventName);
    public static EventHandlerEntry op_Addition(EventHandlerEntry entry, Delegate deleg);
    public static EventHandlerEntry op_Subtraction(EventHandlerEntry entry, Delegate deleg);
}
[DefaultMemberAttribute("Item")]
public class CitizenFX.Core.ExportDictionary : object {
    [DynamicAttribute]
public object Item { get; }
    public object get_Item(string resourceName);
    public void Add(string name, Delegate method);
}
public class CitizenFX.Core.ExportSet : DynamicObject {
    public virtual bool TryInvokeMember(InvokeMemberBinder binder, Object[] args, Object& result);
}
[AttributeUsageAttribute("2048")]
public class CitizenFX.Core.FromSourceAttribute : Attribute {
}
[GuidAttribute("82ec2441-dbb4-4512-81e9-3a98ce9ffcab")]
[InterfaceTypeAttribute("1")]
public interface CitizenFX.Core.fxIStream {
    public abstract virtual long GetLength();
    public abstract virtual int Read(Byte[] data, int size);
    public abstract virtual long Seek(long offset, int origin);
    public abstract virtual int Write(Byte[] data, int size);
}
public class CitizenFX.Core.FxStreamWrapper : Stream {
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public FxStreamWrapper(fxIStream stream);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    protected virtual void Dispose(bool disposing);
    protected virtual override void Finalize();
    public virtual void Flush();
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
}
public class CitizenFX.Core.GameMath : object {
    public static float DirectionToHeading(Vector3 dir);
    public static Vector3 DirectionToRotation(Vector3 direction, float roll);
    public static Vector3 HeadingToDirection(float heading);
    public static Vector3 RotationToDirection(Vector3 rotation);
}
public interface CitizenFX.Core.IDeletable {
    public abstract virtual void Delete();
}
[DefaultMemberAttribute("Item")]
public class CitizenFX.Core.IdentifierCollection : object {
    public string Item { get; }
    public string get_Item(string type);
    public sealed virtual IEnumerator`1<string> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public interface CitizenFX.Core.IExistable {
    public abstract virtual bool Exists();
}
[GuidAttribute("637140db-24e5-46bf-a8bd-08f2dbac519a")]
[InterfaceTypeAttribute("1")]
public interface CitizenFX.Core.IScriptEventRuntime {
    public abstract virtual void TriggerEvent(string eventName, Byte[] argsSerialized, int serializedSize, string sourceId);
}
[GuidAttribute("D98A35CF-D6EE-4B51-A1C3-99B70F4EC1E6")]
[InterfaceTypeAttribute("1")]
public interface CitizenFX.Core.IScriptMemInfoRuntime {
    public abstract virtual void GetMemoryUsage(UInt64& memoryUsage);
    public abstract virtual void RequestMemoryUsage();
}
[GuidAttribute("a2f1b24b-a29f-4121-8162-86901eca8097")]
[InterfaceTypeAttribute("1")]
public interface CitizenFX.Core.IScriptRefRuntime {
    public abstract virtual void CallRef(int refIndex, Byte[] argsSerialized, int argsSize, IntPtr& retval);
    public abstract virtual int DuplicateRef(int refIndex);
    public abstract virtual void RemoveRef(int refIndex);
}
[GuidAttribute("567D2FDA-610C-4FA0-AE3E-4F700AE5CE56")]
[InterfaceTypeAttribute("1")]
public interface CitizenFX.Core.IScriptStackWalkingRuntime {
    public abstract virtual void WalkStack(Byte[] boundaryStart, int boundaryStartLength, Byte[] boundaryEnd, int boundaryEndLength, IScriptStackWalkVisitor visitor);
}
[GuidAttribute("182CAAF3-E33D-474B-A6AF-33D59FF0E9ED")]
[InterfaceTypeAttribute("1")]
public interface CitizenFX.Core.IScriptStackWalkVisitor {
    public abstract virtual void SubmitStackFrame(Byte[] frameBlob, int frameBlobSize);
}
[GuidAttribute("91b203c7-f95a-4902-b463-722d55098366")]
[InterfaceTypeAttribute("1")]
public interface CitizenFX.Core.IScriptTickRuntime {
    public abstract virtual void Tick();
}
public interface CitizenFX.Core.ISpatial {
    public Vector3 Position { get; public set; }
    public Vector3 Rotation { get; public set; }
    public abstract virtual Vector3 get_Position();
    public abstract virtual void set_Position(Vector3 value);
    public abstract virtual Vector3 get_Rotation();
    public abstract virtual void set_Rotation(Vector3 value);
}
public static class CitizenFX.Core.MathUtil : object {
    public static float Pi;
    public static float PiOverFour;
    public static float PiOverTwo;
    public static float Tau;
    public static float TwoPi;
    public static float ZeroTolerance;
    public static int Clamp(int value, int min, int max);
    public static float Clamp(float value, float min, float max);
    public static float DegreesToRadians(float degree);
    public static float DegreesToRevolutions(float degree);
    public static double Gauss(double amplitude, double x, double y, double radX, double radY, double sigmaX, double sigmaY);
    public static float Gauss(float amplitude, float x, float y, float radX, float radY, float sigmaX, float sigmaY);
    public static float GradiansToDegrees(float gradian);
    public static float GradiansToRadians(float gradian);
    public static float GradiansToRevolutions(float gradian);
    public static bool IsOne(float a);
    public static bool IsZero(float a);
    public static byte Lerp(byte from, byte to, float amount);
    public static double Lerp(double from, double to, double amount);
    public static float Lerp(float from, float to, float amount);
    public static float Mod(float value, float modulo);
    public static float Mod2PI(float value);
    public static bool NearEqual(float a, float b);
    public static float RadiansToDegrees(float radian);
    public static float RadiansToGradians(float radian);
    public static float RadiansToRevolutions(float radian);
    public static float RevolutionsToDegrees(float revolution);
    public static float RevolutionsToGradians(float revolution);
    public static float RevolutionsToRadians(float revolution);
    public static float SmootherStep(float amount);
    public static float SmoothStep(float amount);
    public static bool WithinEpsilon(float a, float b, float epsilon);
    public static int Wrap(int value, int min, int max);
    public static float Wrap(float value, float min, float max);
}
[DefaultMemberAttribute("Item")]
public class CitizenFX.Core.Matrix : ValueType {
    public static Matrix Identity;
    public float M11;
    public float M12;
    public float M13;
    public float M14;
    public float M21;
    public float M22;
    public float M23;
    public float M24;
    public float M31;
    public float M32;
    public float M33;
    public float M34;
    public float M41;
    public float M42;
    public float M43;
    public float M44;
    public static Matrix Zero;
    public Vector3 Backward { get; public set; }
    public Vector4 Column1 { get; public set; }
    public Vector4 Column2 { get; public set; }
    public Vector4 Column3 { get; public set; }
    public Vector4 Column4 { get; public set; }
    public Vector3 Down { get; public set; }
    public Vector3 Forward { get; public set; }
    public bool IsIdentity { get; }
    public float Item { get; public set; }
    public float Item { get; public set; }
    public Vector3 Left { get; public set; }
    public Vector3 Right { get; public set; }
    public Vector4 Row1 { get; public set; }
    public Vector4 Row2 { get; public set; }
    public Vector4 Row3 { get; public set; }
    public Vector4 Row4 { get; public set; }
    public Vector3 ScaleVector { get; public set; }
    public Vector3 TranslationVector { get; public set; }
    public Vector3 Up { get; public set; }
    public Matrix(float value);
    public Matrix(float M11, float M12, float M13, float M14, float M21, float M22, float M23, float M24, float M31, float M32, float M33, float M34, float M41, float M42, float M43, float M44);
    public Matrix(Single[] values);
    public Vector3 get_Backward();
    public void set_Backward(Vector3 value);
    public Vector4 get_Column1();
    public void set_Column1(Vector4 value);
    public Vector4 get_Column2();
    public void set_Column2(Vector4 value);
    public Vector4 get_Column3();
    public void set_Column3(Vector4 value);
    public Vector4 get_Column4();
    public void set_Column4(Vector4 value);
    public Vector3 get_Down();
    public void set_Down(Vector3 value);
    public Vector3 get_Forward();
    public void set_Forward(Vector3 value);
    public bool get_IsIdentity();
    public float get_Item(int index);
    public void set_Item(int index, float value);
    public float get_Item(int row, int column);
    public void set_Item(int row, int column, float value);
    public Vector3 get_Left();
    public void set_Left(Vector3 value);
    public Vector3 get_Right();
    public void set_Right(Vector3 value);
    public Vector4 get_Row1();
    public void set_Row1(Vector4 value);
    public Vector4 get_Row2();
    public void set_Row2(Vector4 value);
    public Vector4 get_Row3();
    public void set_Row3(Vector4 value);
    public Vector4 get_Row4();
    public void set_Row4(Vector4 value);
    public Vector3 get_ScaleVector();
    public void set_ScaleVector(Vector3 value);
    public Vector3 get_TranslationVector();
    public void set_TranslationVector(Vector3 value);
    public Vector3 get_Up();
    public void set_Up(Vector3 value);
    public static Matrix Add(Matrix left, Matrix right);
    public static void Add(Matrix& left, Matrix& right, Matrix& result);
    public static Matrix AffineTransformation(float scaling, Quaternion rotation, Vector3 translation);
    public static void AffineTransformation(float scaling, Quaternion& rotation, Vector3& translation, Matrix& result);
    public static Matrix AffineTransformation(float scaling, Vector3 rotationCenter, Quaternion rotation, Vector3 translation);
    public static void AffineTransformation(float scaling, Vector3& rotationCenter, Quaternion& rotation, Vector3& translation, Matrix& result);
    public static Matrix AffineTransformation2D(float scaling, Vector2 rotationCenter, float rotation, Vector2 translation);
    public static void AffineTransformation2D(float scaling, Vector2& rotationCenter, float rotation, Vector2& translation, Matrix& result);
    public static Matrix AffineTransformation2D(float scaling, float rotation, Vector2 translation);
    public static void AffineTransformation2D(float scaling, float rotation, Vector2& translation, Matrix& result);
    public static Matrix BillboardLH(Vector3 objectPosition, Vector3 cameraPosition, Vector3 cameraUpVector, Vector3 cameraForwardVector);
    public static void BillboardLH(Vector3& objectPosition, Vector3& cameraPosition, Vector3& cameraUpVector, Vector3& cameraForwardVector, Matrix& result);
    public static Matrix BillboardRH(Vector3 objectPosition, Vector3 cameraPosition, Vector3 cameraUpVector, Vector3 cameraForwardVector);
    public static void BillboardRH(Vector3& objectPosition, Vector3& cameraPosition, Vector3& cameraUpVector, Vector3& cameraForwardVector, Matrix& result);
    public bool Decompose(Vector3& scale, Quaternion& rotation, Vector3& translation);
    public void DecomposeLQ(Matrix& L, Matrix& Q);
    public void DecomposeQR(Matrix& Q, Matrix& R);
    public bool DecomposeUniformScale(Single& scale, Quaternion& rotation, Vector3& translation);
    public float Determinant();
    public static Matrix Divide(Matrix left, Matrix right);
    public static Matrix Divide(Matrix left, float right);
    public static void Divide(Matrix& left, Matrix& right, Matrix& result);
    public static void Divide(Matrix& left, float right, Matrix& result);
    public sealed virtual bool Equals(Matrix other);
    public bool Equals(Matrix& other);
    public virtual bool Equals(object value);
    public void ExchangeColumns(int firstColumn, int secondColumn);
    public void ExchangeRows(int firstRow, int secondRow);
    public static Matrix Exponent(Matrix value, int exponent);
    public static void Exponent(Matrix& value, int exponent, Matrix& result);
    public virtual int GetHashCode();
    public void Invert();
    public static Matrix Invert(Matrix value);
    public static void Invert(Matrix& value, Matrix& result);
    public static Matrix Lerp(Matrix start, Matrix end, float amount);
    public static void Lerp(Matrix& start, Matrix& end, float amount, Matrix& result);
    public static Matrix LookAtLH(Vector3 eye, Vector3 target, Vector3 up);
    public static void LookAtLH(Vector3& eye, Vector3& target, Vector3& up, Matrix& result);
    public static Matrix LookAtRH(Vector3 eye, Vector3 target, Vector3 up);
    public static void LookAtRH(Vector3& eye, Vector3& target, Vector3& up, Matrix& result);
    public static Matrix LowerTriangularForm(Matrix value);
    public static void LowerTriangularForm(Matrix& value, Matrix& result);
    public static Matrix Multiply(Matrix left, Matrix right);
    public static Matrix Multiply(Matrix left, float right);
    public static void Multiply(Matrix& left, Matrix& right, Matrix& result);
    public static void Multiply(Matrix& left, float right, Matrix& result);
    public static Matrix Negate(Matrix value);
    public static void Negate(Matrix& value, Matrix& result);
    public static Matrix op_Addition(Matrix left, Matrix right);
    public static Matrix op_Division(Matrix left, Matrix right);
    public static Matrix op_Division(Matrix left, float right);
    public static bool op_Equality(Matrix left, Matrix right);
    public static bool op_Inequality(Matrix left, Matrix right);
    public static Matrix op_Multiply(Matrix left, Matrix right);
    public static Matrix op_Multiply(Matrix left, float right);
    public static Matrix op_Multiply(float left, Matrix right);
    public static Matrix op_Subtraction(Matrix left, Matrix right);
    public static Matrix op_UnaryNegation(Matrix value);
    public static Matrix op_UnaryPlus(Matrix value);
    public void Orthogonalize();
    public static Matrix Orthogonalize(Matrix value);
    public static void Orthogonalize(Matrix& value, Matrix& result);
    public static Matrix OrthoLH(float width, float height, float znear, float zfar);
    public static void OrthoLH(float width, float height, float znear, float zfar, Matrix& result);
    public void Orthonormalize();
    public static Matrix Orthonormalize(Matrix value);
    public static void Orthonormalize(Matrix& value, Matrix& result);
    public static Matrix OrthoOffCenterLH(float left, float right, float bottom, float top, float znear, float zfar);
    public static void OrthoOffCenterLH(float left, float right, float bottom, float top, float znear, float zfar, Matrix& result);
    public static Matrix OrthoOffCenterRH(float left, float right, float bottom, float top, float znear, float zfar);
    public static void OrthoOffCenterRH(float left, float right, float bottom, float top, float znear, float zfar, Matrix& result);
    public static Matrix OrthoRH(float width, float height, float znear, float zfar);
    public static void OrthoRH(float width, float height, float znear, float zfar, Matrix& result);
    public static Matrix PerspectiveFovLH(float fov, float aspect, float znear, float zfar);
    public static void PerspectiveFovLH(float fov, float aspect, float znear, float zfar, Matrix& result);
    public static Matrix PerspectiveFovRH(float fov, float aspect, float znear, float zfar);
    public static void PerspectiveFovRH(float fov, float aspect, float znear, float zfar, Matrix& result);
    public static Matrix PerspectiveLH(float width, float height, float znear, float zfar);
    public static void PerspectiveLH(float width, float height, float znear, float zfar, Matrix& result);
    public static Matrix PerspectiveOffCenterLH(float left, float right, float bottom, float top, float znear, float zfar);
    public static void PerspectiveOffCenterLH(float left, float right, float bottom, float top, float znear, float zfar, Matrix& result);
    public static Matrix PerspectiveOffCenterRH(float left, float right, float bottom, float top, float znear, float zfar);
    public static void PerspectiveOffCenterRH(float left, float right, float bottom, float top, float znear, float zfar, Matrix& result);
    public static Matrix PerspectiveRH(float width, float height, float znear, float zfar);
    public static void PerspectiveRH(float width, float height, float znear, float zfar, Matrix& result);
    public static void ReducedRowEchelonForm(Matrix& value, Vector4& augment, Matrix& result, Vector4& augmentResult);
    public static Matrix RotationAxis(Vector3 axis, float angle);
    public static void RotationAxis(Vector3& axis, float angle, Matrix& result);
    public static Matrix RotationQuaternion(Quaternion rotation);
    public static void RotationQuaternion(Quaternion& rotation, Matrix& result);
    public static Matrix RotationX(float angle);
    public static void RotationX(float angle, Matrix& result);
    public static Matrix RotationY(float angle);
    public static void RotationY(float angle, Matrix& result);
    public static Matrix RotationYawPitchRoll(float yaw, float pitch, float roll);
    public static void RotationYawPitchRoll(float yaw, float pitch, float roll, Matrix& result);
    public static Matrix RotationZ(float angle);
    public static void RotationZ(float angle, Matrix& result);
    public static Matrix RowEchelonForm(Matrix value);
    public static void RowEchelonForm(Matrix& value, Matrix& result);
    public static Matrix Scaling(Vector3 scale);
    public static void Scaling(Vector3& scale, Matrix& result);
    public static Matrix Scaling(float scale);
    public static void Scaling(float scale, Matrix& result);
    public static Matrix Scaling(float x, float y, float z);
    public static void Scaling(float x, float y, float z, Matrix& result);
    public static void Skew(float angle, Vector3& rotationVec, Vector3& transVec, Matrix& matrix);
    public static Matrix SmoothStep(Matrix start, Matrix end, float amount);
    public static void SmoothStep(Matrix& start, Matrix& end, float amount, Matrix& result);
    public static Matrix Subtract(Matrix left, Matrix right);
    public static void Subtract(Matrix& left, Matrix& right, Matrix& result);
    public Single[] ToArray();
    public virtual string ToString();
    public string ToString(IFormatProvider formatProvider);
    public string ToString(string format);
    public sealed virtual string ToString(string format, IFormatProvider formatProvider);
    public static Matrix Transformation(Vector3 scalingCenter, Quaternion scalingRotation, Vector3 scaling, Vector3 rotationCenter, Quaternion rotation, Vector3 translation);
    public static void Transformation(Vector3& scalingCenter, Quaternion& scalingRotation, Vector3& scaling, Vector3& rotationCenter, Quaternion& rotation, Vector3& translation, Matrix& result);
    public static Matrix Transformation2D(Vector2 scalingCenter, float scalingRotation, Vector2 scaling, Vector2 rotationCenter, float rotation, Vector2 translation);
    public static void Transformation2D(Vector2& scalingCenter, float scalingRotation, Vector2& scaling, Vector2& rotationCenter, float rotation, Vector2& translation, Matrix& result);
    public static Matrix Translation(Vector3 value);
    public static void Translation(Vector3& value, Matrix& result);
    public static Matrix Translation(float x, float y, float z);
    public static void Translation(float x, float y, float z, Matrix& result);
    public void Transpose();
    public static Matrix Transpose(Matrix value);
    public static void Transpose(Matrix& value, Matrix& result);
    public static void TransposeByRef(Matrix& value, Matrix& result);
    public static Matrix UpperTriangularForm(Matrix value);
    public static void UpperTriangularForm(Matrix& value, Matrix& result);
}
[DefaultMemberAttribute("Item")]
public class CitizenFX.Core.Matrix3x3 : ValueType {
    public static Matrix3x3 Identity;
    public float M11;
    public float M12;
    public float M13;
    public float M21;
    public float M22;
    public float M23;
    public float M31;
    public float M32;
    public float M33;
    public static Matrix3x3 Zero;
    public Vector3 Column1 { get; public set; }
    public Vector3 Column2 { get; public set; }
    public Vector3 Column3 { get; public set; }
    public bool IsIdentity { get; }
    public float Item { get; public set; }
    public float Item { get; public set; }
    public Vector3 Row1 { get; public set; }
    public Vector3 Row2 { get; public set; }
    public Vector3 Row3 { get; public set; }
    public Vector3 ScaleVector { get; public set; }
    public Matrix3x3(float value);
    public Matrix3x3(float M11, float M12, float M13, float M21, float M22, float M23, float M31, float M32, float M33);
    public Matrix3x3(Single[] values);
    public Vector3 get_Column1();
    public void set_Column1(Vector3 value);
    public Vector3 get_Column2();
    public void set_Column2(Vector3 value);
    public Vector3 get_Column3();
    public void set_Column3(Vector3 value);
    public bool get_IsIdentity();
    public float get_Item(int index);
    public void set_Item(int index, float value);
    public float get_Item(int row, int column);
    public void set_Item(int row, int column, float value);
    public Vector3 get_Row1();
    public void set_Row1(Vector3 value);
    public Vector3 get_Row2();
    public void set_Row2(Vector3 value);
    public Vector3 get_Row3();
    public void set_Row3(Vector3 value);
    public Vector3 get_ScaleVector();
    public void set_ScaleVector(Vector3 value);
    public static Matrix3x3 Add(Matrix3x3 left, Matrix3x3 right);
    public static void Add(Matrix3x3& left, Matrix3x3& right, Matrix3x3& result);
    public static Matrix3x3 BillboardLH(Vector3 objectPosition, Vector3 cameraPosition, Vector3 cameraUpVector, Vector3 cameraForwardVector);
    public static void BillboardLH(Vector3& objectPosition, Vector3& cameraPosition, Vector3& cameraUpVector, Vector3& cameraForwardVector, Matrix3x3& result);
    public static Matrix3x3 BillboardRH(Vector3 objectPosition, Vector3 cameraPosition, Vector3 cameraUpVector, Vector3 cameraForwardVector);
    public static void BillboardRH(Vector3& objectPosition, Vector3& cameraPosition, Vector3& cameraUpVector, Vector3& cameraForwardVector, Matrix3x3& result);
    public bool Decompose(Vector3& scale, Quaternion& rotation);
    public void DecomposeLQ(Matrix3x3& L, Matrix3x3& Q);
    public void DecomposeQR(Matrix3x3& Q, Matrix3x3& R);
    public bool DecomposeUniformScale(Single& scale, Quaternion& rotation);
    public float Determinant();
    public static Matrix3x3 Divide(Matrix3x3 left, Matrix3x3 right);
    public static Matrix3x3 Divide(Matrix3x3 left, float right);
    public static void Divide(Matrix3x3& left, Matrix3x3& right, Matrix3x3& result);
    public static void Divide(Matrix3x3& left, float right, Matrix3x3& result);
    public sealed virtual bool Equals(Matrix3x3 other);
    public bool Equals(Matrix3x3& other);
    public static bool Equals(Matrix3x3& a, Matrix3x3& b);
    public virtual bool Equals(object value);
    public void ExchangeColumns(int firstColumn, int secondColumn);
    public void ExchangeRows(int firstRow, int secondRow);
    public static Matrix3x3 Exponent(Matrix3x3 value, int exponent);
    public static void Exponent(Matrix3x3& value, int exponent, Matrix3x3& result);
    public virtual int GetHashCode();
    public void Invert();
    public static Matrix3x3 Invert(Matrix3x3 value);
    public static void Invert(Matrix3x3& value, Matrix3x3& result);
    public static Matrix3x3 Lerp(Matrix3x3 start, Matrix3x3 end, float amount);
    public static void Lerp(Matrix3x3& start, Matrix3x3& end, float amount, Matrix3x3& result);
    public static Matrix3x3 LookAtLH(Vector3 eye, Vector3 target, Vector3 up);
    public static void LookAtLH(Vector3& eye, Vector3& target, Vector3& up, Matrix3x3& result);
    public static Matrix3x3 LookAtRH(Vector3 eye, Vector3 target, Vector3 up);
    public static void LookAtRH(Vector3& eye, Vector3& target, Vector3& up, Matrix3x3& result);
    public static Matrix3x3 LowerTriangularForm(Matrix3x3 value);
    public static void LowerTriangularForm(Matrix3x3& value, Matrix3x3& result);
    public static Matrix3x3 Multiply(Matrix3x3 left, Matrix3x3 right);
    public static Matrix3x3 Multiply(Matrix3x3 left, float right);
    public static void Multiply(Matrix3x3& left, Matrix3x3& right, Matrix3x3& result);
    public static void Multiply(Matrix3x3& left, float right, Matrix3x3& result);
    public static Matrix3x3 Negate(Matrix3x3 value);
    public static void Negate(Matrix3x3& value, Matrix3x3& result);
    public static Matrix3x3 op_Addition(Matrix3x3 left, Matrix3x3 right);
    public static Matrix3x3 op_Division(Matrix3x3 left, Matrix3x3 right);
    public static Matrix3x3 op_Division(Matrix3x3 left, float right);
    public static bool op_Equality(Matrix3x3 left, Matrix3x3 right);
    public static Matrix3x3 op_Explicit(Matrix Value);
    public static Matrix op_Explicit(Matrix3x3 Value);
    public static bool op_Inequality(Matrix3x3 left, Matrix3x3 right);
    public static Matrix3x3 op_Multiply(Matrix3x3 left, Matrix3x3 right);
    public static Matrix3x3 op_Multiply(Matrix3x3 left, float right);
    public static Matrix3x3 op_Multiply(float left, Matrix3x3 right);
    public static Matrix3x3 op_Subtraction(Matrix3x3 left, Matrix3x3 right);
    public static Matrix3x3 op_UnaryNegation(Matrix3x3 value);
    public static Matrix3x3 op_UnaryPlus(Matrix3x3 value);
    public void Orthogonalize();
    public static Matrix3x3 Orthogonalize(Matrix3x3 value);
    public static void Orthogonalize(Matrix3x3& value, Matrix3x3& result);
    public void Orthonormalize();
    public static Matrix3x3 Orthonormalize(Matrix3x3 value);
    public static void Orthonormalize(Matrix3x3& value, Matrix3x3& result);
    public static Matrix3x3 RotationAxis(Vector3 axis, float angle);
    public static void RotationAxis(Vector3& axis, float angle, Matrix3x3& result);
    public static Matrix3x3 RotationQuaternion(Quaternion rotation);
    public static void RotationQuaternion(Quaternion& rotation, Matrix3x3& result);
    public static Matrix3x3 RotationX(float angle);
    public static void RotationX(float angle, Matrix3x3& result);
    public static Matrix3x3 RotationY(float angle);
    public static void RotationY(float angle, Matrix3x3& result);
    public static Matrix3x3 RotationYawPitchRoll(float yaw, float pitch, float roll);
    public static void RotationYawPitchRoll(float yaw, float pitch, float roll, Matrix3x3& result);
    public static Matrix3x3 RotationZ(float angle);
    public static void RotationZ(float angle, Matrix3x3& result);
    public static Matrix3x3 RowEchelonForm(Matrix3x3 value);
    public static void RowEchelonForm(Matrix3x3& value, Matrix3x3& result);
    public static Matrix3x3 Scaling(Vector3 scale);
    public static void Scaling(Vector3& scale, Matrix3x3& result);
    public static Matrix3x3 Scaling(float scale);
    public static void Scaling(float scale, Matrix3x3& result);
    public static Matrix3x3 Scaling(float x, float y, float z);
    public static void Scaling(float x, float y, float z, Matrix3x3& result);
    public static Matrix3x3 SmoothStep(Matrix3x3 start, Matrix3x3 end, float amount);
    public static void SmoothStep(Matrix3x3& start, Matrix3x3& end, float amount, Matrix3x3& result);
    public static Matrix3x3 Subtract(Matrix3x3 left, Matrix3x3 right);
    public static void Subtract(Matrix3x3& left, Matrix3x3& right, Matrix3x3& result);
    public Single[] ToArray();
    public virtual string ToString();
    public string ToString(IFormatProvider formatProvider);
    public string ToString(string format);
    public sealed virtual string ToString(string format, IFormatProvider formatProvider);
    public void Transpose();
    public static Matrix3x3 Transpose(Matrix3x3 value);
    public static void Transpose(Matrix3x3& value, Matrix3x3& result);
    public static void TransposeByRef(Matrix3x3& value, Matrix3x3& result);
    public static Matrix3x3 UpperTriangularForm(Matrix3x3 value);
    public static void UpperTriangularForm(Matrix3x3& value, Matrix3x3& result);
}
public static class CitizenFX.Core.Native.API : object {
    public static int AddBlipForArea(float x, float y, float z, float width, float height);
    public static int AddBlipForCoord(float x, float y, float z);
    public static int AddBlipForEntity(int entity);
    public static int AddBlipForRadius(float posX, float posY, float posZ, float radius);
    public static void AddPedDecorationFromHashes(int ped, UInt32 collection, UInt32 overlay);
    public static int AddStateBagChangeHandler(string keyFilter, string bagFilter, InputArgument handler);
    public static void ApplyForceToEntity(int entity, int forceType, float x, float y, float z, float offX, float offY, float offZ, int boneIndex, bool isDirectionRel, bool ignoreUpVec, bool isForceRel, bool p12, bool p13);
    public static void ApplyPedOverlay(int ped, UInt32 collection, UInt32 overlay);
    public static void CancelEvent();
    public static bool CanPlayerStartCommerceSession(string playerSrc);
    public static void ClearPedProp(int ped, int propId);
    public static void ClearPedSecondaryTask(int ped);
    public static void ClearPedTasks(int ped);
    public static void ClearPedTasksImmediately(int ped);
    public static void ClearPlayerWantedLevel(string player);
    public static int CreateObject(int modelHash, float x, float y, float z, bool isNetwork, bool netMissionEntity, bool doorFlag);
    public static int CreateObjectNoOffset(UInt32 modelHash, float x, float y, float z, bool isNetwork, bool netMissionEntity, bool doorFlag);
    public static int CreatePed(int pedType, UInt32 modelHash, float x, float y, float z, float heading, bool isNetwork, bool bScriptHostPed);
    public static int CreatePedInsideVehicle(int vehicle, int pedType, UInt32 modelHash, int seat, bool isNetwork, bool bScriptHostPed);
    public static int CreateVehicle(UInt32 modelHash, float x, float y, float z, float heading, bool isNetwork, bool netMissionEntity);
    public static int CreateVehicleServerSetter(UInt32 modelHash, string type, float x, float y, float z, float heading);
    public static void DeleteEntity(int entity);
    public static void DeleteFunctionReference(string referenceIdentity);
    public static void DeleteResourceKvp(string key);
    public static void DeleteResourceKvpNoSync(string key);
    public static bool DoesBoatSinkWhenWrecked(int vehicle);
    public static bool DoesEntityExist(int entity);
    public static bool DoesPlayerExist(string playerSrc);
    public static bool DoesPlayerOwnSku(string playerSrc, int skuId);
    public static bool DoesPlayerOwnSkuExt(string playerSrc, int skuId);
    public static void DropPlayer(string playerSrc, string reason);
    public static string DuplicateFunctionReference(string referenceIdentity);
    public static void EnableEnhancedHostSupport(bool enabled);
    public static void EndFindKvp(int handle);
    public static void EnsureEntityStateBag(int entity);
    public static void ExecuteCommand(string commandString);
    public static string FindKvp(int handle);
    public static void FlagServerAsPrivate(bool private_);
    public static void FlushResourceKvp();
    public static void FreezeEntityPosition(int entity, bool toggle);
    public static float GetAirDragMultiplierForPlayersVehicle(string playerSrc);
    public static object GetAllObjects();
    public static object GetAllPeds();
    public static object GetAllVehicles();
    public static int GetBlipSprite(int self);
    public static string GetConsoleBuffer();
    public static string GetConvar(string varName, string default_);
    public static int GetConvarInt(string varName, int default_);
    public static int GetCurrentPedWeapon(int ped);
    public static string GetCurrentResourceName();
    public static int GetEntityAttachedTo(int entity);
    public static bool GetEntityCollisionDisabled(int entity);
    public static Vector3 GetEntityCoords(int entity);
    public static int GetEntityFromStateBagName(string bagName);
    public static float GetEntityHeading(int entity);
    public static int GetEntityHealth(int entity);
    public static int GetEntityMaxHealth(int entity);
    public static int GetEntityModel(int entity);
    public static int GetEntityPopulationType(int entity);
    public static Vector3 GetEntityRotation(int entity);
    public static Vector3 GetEntityRotationVelocity(int entity);
    public static int GetEntityRoutingBucket(int entity);
    public static string GetEntityScript(int entity);
    public static float GetEntitySpeed(int entity);
    public static int GetEntityType(int entity);
    public static Vector3 GetEntityVelocity(int entity);
    public static int GetGameBuildNumber();
    public static string GetGameName();
    public static object GetGamePool(string poolName);
    public static long GetGameTimer();
    public static int GetHashKey(string model);
    public static int GetHeliBodyHealth(int heli);
    public static bool GetHeliDisableExplodeFromBodyDamage(int heli);
    public static int GetHeliEngineHealth(int heli);
    public static int GetHeliGasTankHealth(int heli);
    public static float GetHeliMainRotorDamageScale(int heli);
    public static float GetHeliMainRotorHealth(int vehicle);
    public static float GetHeliPitchControl(int heli);
    public static float GetHeliRearRotorDamageScale(int heli);
    public static float GetHeliRearRotorHealth(int vehicle);
    public static float GetHeliRollControl(int heli);
    public static float GetHeliTailRotorDamageScale(int heli);
    public static float GetHeliTailRotorHealth(int vehicle);
    public static float GetHeliThrottleControl(int heli);
    public static float GetHeliYawControl(int heli);
    public static string GetHostId();
    public static int GetInstanceId();
    public static string GetInvokingResource();
    public static bool GetIsHeliEngineRunning(int heli);
    public static bool GetIsVehicleEngineRunning(int vehicle);
    public static bool GetIsVehiclePrimaryColourCustom(int vehicle);
    public static bool GetIsVehicleSecondaryColourCustom(int vehicle);
    public static int GetLandingGearState(int vehicle);
    public static int GetLastPedInVehicleSeat(int vehicle, int seatIndex);
    public static int GetNumPlayerIdentifiers(string playerSrc);
    public static int GetNumPlayerIndices();
    public static int GetNumPlayerTokens(string playerSrc);
    public static int GetNumResourceMetadata(string resourceName, string metadataKey);
    public static int GetNumResources();
    public static string GetPasswordHash(string password);
    public static int GetPedArmour(int ped);
    public static int GetPedCauseOfDeath(int ped);
    public static float GetPedDesiredHeading(int ped);
    public static int GetPedInVehicleSeat(int vehicle, int seatIndex);
    public static int GetPedMaxHealth(int ped);
    public static int GetPedScriptTaskCommand(int ped);
    public static int GetPedScriptTaskStage(int ped);
    public static int GetPedSourceOfDamage(int ped);
    public static int GetPedSourceOfDeath(int ped);
    public static int GetPedSpecificTaskType(int ped, int index);
    public static bool GetPedStealthMovement(int ped);
    public static Vector3 GetPlayerCameraRotation(string playerSrc);
    public static string GetPlayerEndpoint(string playerSrc);
    public static int GetPlayerFakeWantedLevel(string playerSrc);
    public static string GetPlayerFromIndex(int index);
    public static int GetPlayerFromStateBagName(string bagName);
    public static string GetPlayerGuid(string playerSrc);
    public static string GetPlayerIdentifier(string playerSrc, int identifier);
    public static string GetPlayerIdentifierByType(string playerSrc, string identifierType);
    public static bool GetPlayerInvincible(string playerSrc);
    public static int GetPlayerLastMsg(string playerSrc);
    public static int GetPlayerMaxArmour(string playerSrc);
    public static int GetPlayerMaxHealth(string playerSrc);
    public static float GetPlayerMeleeWeaponDamageModifier(string playerId);
    public static string GetPlayerName(string playerSrc);
    public static int GetPlayerPed(string playerSrc);
    public static int GetPlayerPing(string playerSrc);
    public static int GetPlayerRoutingBucket(string playerSrc);
    public static int GetPlayerTeam(string playerSrc);
    public static int GetPlayerTimeInPursuit(string playerSrc, bool lastPursuit);
    public static int GetPlayerTimeOnline(string playerSrc);
    public static string GetPlayerToken(string playerSrc, int index);
    public static Vector3 GetPlayerWantedCentrePosition(string playerSrc);
    public static int GetPlayerWantedLevel(string playerSrc);
    public static float GetPlayerWeaponDamageModifier(string playerId);
    public static float GetPlayerWeaponDefenseModifier(string playerId);
    public static float GetPlayerWeaponDefenseModifier_2(string playerId);
    public static object GetRegisteredCommands();
    public static string GetResourceByFindIndex(int findIndex);
    public static float GetResourceKvpFloat(string key);
    public static int GetResourceKvpInt(string key);
    public static string GetResourceKvpString(string key);
    public static string GetResourceMetadata(string resourceName, string metadataKey, int index);
    public static string GetResourcePath(string resourceName);
    public static string GetResourceState(string resourceName);
    public static int GetSelectedPedWeapon(int ped);
    public static object GetStateBagKeys(string bagName);
    public static object GetStateBagValue(string bagName, string key);
    public static float GetThrusterSideRcsThrottle(int jetpack);
    public static float GetThrusterThrottle(int jetpack);
    public static int GetTrainCarriageEngine(int train);
    public static int GetTrainCarriageIndex(int train);
    public static float GetVehicleBodyHealth(int vehicle);
    public static void GetVehicleColours(int vehicle, Int32& colorPrimary, Int32& colorSecondary);
    public static void GetVehicleCustomPrimaryColour(int vehicle, Int32& r, Int32& g, Int32& b);
    public static void GetVehicleCustomSecondaryColour(int vehicle, Int32& r, Int32& g, Int32& b);
    public static void GetVehicleDashboardColour(int vehicle, Int32& color);
    public static float GetVehicleDirtLevel(int vehicle);
    public static int GetVehicleDoorLockStatus(int vehicle);
    public static int GetVehicleDoorsLockedForPlayer(int vehicle);
    public static int GetVehicleDoorStatus(int vehicle);
    public static float GetVehicleEngineHealth(int vehicle);
    public static void GetVehicleExtraColours(int vehicle, Int32& pearlescentColor, Int32& wheelColor);
    public static float GetVehicleFlightNozzlePosition(int vehicle);
    public static bool GetVehicleHandbrake(int vehicle);
    public static int GetVehicleHeadlightsColour(int vehicle);
    public static int GetVehicleHomingLockonState(int vehicle);
    public static int GetVehicleHornType(int vehicle);
    public static void GetVehicleInteriorColour(int vehicle, Int32& color);
    public static bool GetVehicleLightsState(int vehicle, Boolean& lightsOn, Boolean& highbeamsOn);
    public static int GetVehicleLivery(int vehicle);
    public static int GetVehicleLockOnTarget(int vehicle);
    public static string GetVehicleNumberPlateText(int vehicle);
    public static int GetVehicleNumberPlateTextIndex(int vehicle);
    public static int GetVehiclePedIsIn(int ped, bool lastVehicle);
    public static float GetVehiclePetrolTankHealth(int vehicle);
    public static int GetVehicleRadioStationIndex(int vehicle);
    public static int GetVehicleRoofLivery(int vehicle);
    public static float GetVehicleSteeringAngle(int vehicle);
    public static string GetVehicleType(int vehicle);
    public static void GetVehicleTyreSmokeColor(int vehicle, Int32& r, Int32& g, Int32& b);
    public static int GetVehicleWheelType(int vehicle);
    public static int GetVehicleWindowTint(int vehicle);
    public static void GiveWeaponComponentToPed(int ped, UInt32 weaponHash, UInt32 componentHash);
    public static void GiveWeaponToPed(int ped, UInt32 weaponHash, int ammoCount, bool isHidden, bool bForceInHand);
    public static bool HasEntityBeenMarkedAsNoLongerNeeded(int vehicle);
    public static bool HasVehicleBeenDamagedByBullets(int vehicle);
    public static bool HasVehicleBeenOwnedByPlayer(int vehicle);
    public static bool IsAceAllowed(string _object);
    public static bool IsBoatAnchoredAndFrozen(int vehicle);
    public static bool IsBoatWrecked(int vehicle);
    public static bool IsDuplicityVersion();
    public static bool IsEntityPositionFrozen(int entity);
    public static bool IsEntityVisible(int entity);
    public static bool IsFlashLightOn(int ped);
    public static bool IsHeliTailBoomBreakable(int heli);
    public static bool IsHeliTailBoomBroken(int heli);
    public static bool IsPedAPlayer(int ped);
    public static bool IsPedHandcuffed(int ped);
    public static bool IsPedRagdoll(int ped);
    public static bool IsPedStrafing(int ped);
    public static bool IsPedUsingActionMode(int ped);
    public static bool IsPlayerAceAllowed(string playerSrc, string _object);
    public static bool IsPlayerCommerceInfoLoaded(string playerSrc);
    public static bool IsPlayerCommerceInfoLoadedExt(string playerSrc);
    public static bool IsPlayerEvadingWantedLevel(string playerSrc);
    public static bool IsPlayerUsingSuperJump(string playerSrc);
    public static bool IsPrincipalAceAllowed(string principal, string _object);
    public static bool IsVehicleEngineStarting(int vehicle);
    public static bool IsVehicleExtraTurnedOn(int vehicle, int extraId);
    public static bool IsVehicleSirenOn(int vehicle);
    public static bool IsVehicleTyreBurst(int vehicle, int wheelID, bool completely);
    public static bool IsVehicleWindowIntact(int vehicle, int windowIndex);
    public static void LoadPlayerCommerceData(string playerSrc);
    public static void LoadPlayerCommerceDataExt(string playerSrc);
    public static string LoadResourceFile(string resourceName, string fileName);
    public static void MumbleCreateChannel(int id);
    public static bool MumbleIsPlayerMuted(int playerSrc);
    public static void MumbleSetPlayerMuted(int playerSrc, bool toggle);
    public static int NetworkGetEntityFromNetworkId(int netId);
    public static int NetworkGetEntityOwner(int entity);
    public static int NetworkGetFirstEntityOwner(int entity);
    public static int NetworkGetNetworkIdFromEntity(int entity);
    public static Vector3 NetworkGetVoiceProximityOverrideForPlayer(string playerSrc);
    public static int N_0xce5d0e5e315db238(float x, float y, float z, float width, float height);
    public static int PerformHttpRequestInternal(string requestData, int requestDataLength);
    public static int PerformHttpRequestInternalEx(object requestData);
    public static void PrintStructuredTrace(string jsonString);
    public static void ProfilerEnterScope(string scopeName);
    public static void ProfilerExitScope();
    public static bool ProfilerIsRecording();
    public static void RegisterCommand(string commandName, InputArgument handler, bool restricted);
    public static void RegisterConsoleListener(InputArgument listener);
    public static void RegisterResourceAsEventHandler(string eventName);
    public static string RegisterResourceAsset(string resourceName, string fileName);
    public static void RegisterResourceBuildTaskFactory(string factoryId, InputArgument factoryFn);
    public static void RemoveAllPedWeapons(int ped, bool p1);
    public static void RemoveBlip(Int32& blip);
    public static void RemoveStateBagChangeHandler(int cookie);
    public static void RemoveWeaponComponentFromPed(int ped, UInt32 weaponHash, UInt32 componentHash);
    public static void RemoveWeaponFromPed(int ped, UInt32 weaponHash);
    public static void RequestPlayerCommerceSession(string playerSrc, int skuId);
    public static bool SaveResourceFile(string resourceName, string fileName, string data, int dataLength);
    public static void ScanResourceRoot(string rootPath, InputArgument callback);
    public static void ScheduleResourceTick(string resourceName);
    public static void SetBlipSprite(int blip, int spriteId);
    public static void SetConvar(string varName, string _value);
    public static void SetConvarReplicated(string varName, string _value);
    public static void SetConvarServerInfo(string varName, string _value);
    public static void SetCurrentPedWeapon(int ped, UInt32 weaponHash, bool bForceInHand);
    public static void SetEntityCoords(int entity, float xPos, float yPos, float zPos, bool alive, bool deadFlag, bool ragdollFlag, bool clearArea);
    public static void SetEntityDistanceCullingRadius(int entity, float radius);
    public static void SetEntityHeading(int entity, float heading);
    public static void SetEntityIgnoreRequestControlFilter(int entity, bool ignore);
    public static void SetEntityRotation(int entity, float pitch, float roll, float yaw, int rotationOrder, bool bDeadCheck);
    public static void SetEntityRoutingBucket(int entity, int bucket);
    public static void SetEntityVelocity(int entity, float x, float y, float z);
    public static void SetGameType(string gametypeName);
    public static void SetHttpHandler(InputArgument handler);
    public static void SetMapName(string mapName);
    public static void SetPedAmmo(int ped, UInt32 weaponHash, int ammo);
    public static void SetPedArmour(int ped, int amount);
    public static void SetPedCanRagdoll(int ped, bool toggle);
    public static void SetPedComponentVariation(int ped, int componentId, int drawableId, int textureId, int paletteId);
    public static void SetPedConfigFlag(int ped, int flagId, bool _value);
    public static void SetPedDecoration(int ped, UInt32 collection, UInt32 overlay);
    public static void SetPedDefaultComponentVariation(int ped);
    public static void SetPedEyeColor(int ped, int index);
    public static void SetPedFaceFeature(int ped, int index, float scale);
    public static void SetPedHairColor(int ped, int colorID, int highlightColorID);
    public static void SetPedHairTint(int ped, int colorID, int highlightColorID);
    public static void SetPedHeadBlendData(int ped, int shapeFirstID, int shapeSecondID, int shapeThirdID, int skinFirstID, int skinSecondID, int skinThirdID, float shapeMix, float skinMix, float thirdMix, bool isParent);
    public static void SetPedHeadOverlay(int ped, int overlayID, int index, float opacity);
    public static void SetPedHeadOverlayColor(int ped, int overlayID, int colorType, int colorID, int secondColorID);
    public static void SetPedIntoVehicle(int ped, int vehicle, int seatIndex);
    public static void SetPedPropIndex(int ped, int componentId, int drawableId, int textureId, bool attach);
    public static void SetPedRandomComponentVariation(int ped, bool p1);
    public static void SetPedRandomProps(int ped);
    public static void SetPedResetFlag(int ped, int flagId, bool doReset);
    public static void SetPedToRagdoll(int ped, int time1, int time2, int ragdollType, bool p4, bool p5, bool p6);
    public static void SetPedToRagdollWithFall(int ped, int time, int p2, int ragdollType, float x, float y, float z, float p7, float p8, float p9, float p10, float p11, float p12, float p13);
    public static void SetPlayerControl(string player, bool bHasControl, int flags);
    public static void SetPlayerCullingRadius(string playerSrc, float radius);
    public static void SetPlayerInvincible(string player, bool bInvincible);
    public static void SetPlayerModel(string player, UInt32 model);
    public static void SetPlayerRoutingBucket(string playerSrc, int bucket);
    public static void SetPlayerWantedLevel(string player, int wantedLevel, bool delayedResponse);
    public static void SetResourceKvp(string key, string _value);
    public static void SetResourceKvpFloat(string key, float _value);
    public static void SetResourceKvpFloatNoSync(string key, float _value);
    public static void SetResourceKvpInt(string key, int _value);
    public static void SetResourceKvpIntNoSync(string key, int _value);
    public static void SetResourceKvpNoSync(string key, string _value);
    public static void SetRoutingBucketEntityLockdownMode(int bucketId, string mode);
    public static void SetRoutingBucketPopulationEnabled(int bucketId, bool mode);
    public static void SetStateBagValue(string bagName, string keyName, string valueData, int valueLength, bool replicated);
    public static void SetVehicleAlarm(int vehicle, bool state);
    public static void SetVehicleBodyHealth(int vehicle, float _value);
    public static void SetVehicleColourCombination(int vehicle, int colorCombination);
    public static void SetVehicleColours(int vehicle, int colorPrimary, int colorSecondary);
    public static void SetVehicleCustomPrimaryColour(int vehicle, int r, int g, int b);
    public static void SetVehicleCustomSecondaryColour(int vehicle, int r, int g, int b);
    public static void SetVehicleDirtLevel(int vehicle, float dirtLevel);
    public static void SetVehicleDoorBroken(int vehicle, int doorIndex, bool deleteDoor);
    public static void SetVehicleDoorsLocked(int vehicle, int doorLockStatus);
    public static void SetVehicleNumberPlateText(int vehicle, string plateText);
    public static int StartFindKvp(string prefix);
    public static bool StartResource(string resourceName);
    public static bool StateBagHasKey(string bagName, string key);
    public static bool StopResource(string resourceName);
    public static void TaskCombatPed(int ped, int targetPed, int p2, int p3);
    public static void TaskDriveBy(int driverPed, int targetPed, int targetVehicle, float targetX, float targetY, float targetZ, float distanceToShoot, int pedAccuracy, bool p8, UInt32 firingPattern);
    public static void TaskEnterVehicle(int ped, int vehicle, int timeout, int seatIndex, float speed, int flag, int p6);
    public static void TaskEveryoneLeaveVehicle(int vehicle);
    public static void TaskGoStraightToCoord(int ped, float x, float y, float z, float speed, int timeout, float targetHeading, float distanceToSlide);
    public static void TaskGoToCoordAnyMeans(int ped, float x, float y, float z, float fMoveBlendRatio, int vehicle, bool bUseLongRangeVehiclePathing, int drivingFlags, float fMaxRangeToShootTargets);
    public static void TaskGoToEntity(int entity, int target, int duration, float distance, float speed, float p5, int p6);
    public static void TaskHandsUp(int ped, int duration, int facingPed, int p3, bool p4);
    public static void TaskLeaveAnyVehicle(int ped, int p1, int flags);
    public static void TaskLeaveVehicle(int ped, int vehicle, int flags);
    public static void TaskPlayAnim(int ped, string animDictionary, string animationName, float blendInSpeed, float blendOutSpeed, int duration, int flag, float playbackRate, bool lockX, bool lockY, bool lockZ);
    public static void TaskPlayAnimAdvanced(int ped, string animDict, string animName, float posX, float posY, float posZ, float rotX, float rotY, float rotZ, float animEnterSpeed, float animExitSpeed, int duration, int flag, float animTime, int p14, int p15);
    public static void TaskReactAndFleePed(int ped, int fleeTarget);
    public static void TaskShootAtCoord(int ped, float x, float y, float z, int duration, UInt32 firingPattern);
    public static void TaskShootAtEntity(int entity, int target, int duration, UInt32 firingPattern);
    public static void TaskWarpPedIntoVehicle(int ped, int vehicle, int seatIndex);
    public static void TempBanPlayer(string playerSrc, string reason);
    public static void TriggerClientEventInternal(string eventName, string eventTarget, string eventPayload, int payloadLength);
    public static void TriggerEventInternal(string eventName, string eventPayload, int payloadLength);
    public static void TriggerLatentClientEventInternal(string eventName, string eventTarget, string eventPayload, int payloadLength, int bps);
    public static bool VerifyPasswordHash(string password, string hash);
    public static bool WasEventCanceled();
}
public static class CitizenFX.Core.Native.Function : object {
    public static void Call(Hash hash, InputArgument[] arguments);
    public static T Call(Hash hash, InputArgument[] arguments);
}
public enum CitizenFX.Core.Native.Hash : Enum {
    public ulong value__;
    public static Hash STATE_BAG_HAS_KEY;
    public static Hash GET_PLAYER_FAKE_WANTED_LEVEL;
    public static Hash GET_PLAYER_MAX_ARMOUR;
    public static Hash CREATE_PED;
    public static Hash DELETE_RESOURCE_KVP_NO_SYNC;
    public static Hash IS_VEHICLE_EXTRA_TURNED_ON;
    public static Hash SET_RESOURCE_KVP_INT;
    public static Hash SET_PED_INTO_VEHICLE;
    public static Hash GET_NUM_RESOURCE_METADATA;
    public static Hash SET_PED_PROP_INDEX;
    public static Hash GET_PED_SCRIPT_TASK_COMMAND;
    public static Hash GET_NUM_RESOURCES;
    public static Hash GET_VEHICLE_ROOF_LIVERY;
    public static Hash GET_TRAIN_CARRIAGE_ENGINE;
    public static Hash SET_ENTITY_ROTATION;
    public static Hash GET_ENTITY_TYPE;
    public static Hash GET_HELI_MAIN_ROTOR_DAMAGE_SCALE;
    public static Hash SET_RESOURCE_KVP_NO_SYNC;
    public static Hash GET_VEHICLE_DOOR_LOCK_STATUS;
    public static Hash DOES_PLAYER_EXIST;
    public static Hash IS_ENTITY_VISIBLE;
    public static Hash GET_HELI_ROLL_CONTROL;
    public static Hash GET_VEHICLE_STEERING_ANGLE;
    public static Hash FLAG_SERVER_AS_PRIVATE;
    public static Hash GET_VEHICLE_WINDOW_TINT;
    public static Hash GET_ENTITY_COORDS;
    public static Hash DOES_PLAYER_OWN_SKU;
    public static Hash GET_HELI_PITCH_CONTROL;
    public static Hash GET_VEHICLE_CUSTOM_PRIMARY_COLOUR;
    public static Hash GET_THRUSTER_SIDE_RCS_THROTTLE;
    public static Hash IS_PLAYER_COMMERCE_INFO_LOADED_EXT;
    public static Hash MUMBLE_IS_PLAYER_MUTED;
    public static Hash GET_VEHICLE_DOORS_LOCKED_FOR_PLAYER;
    public static Hash TEMP_BAN_PLAYER;
    public static Hash NETWORK_GET_FIRST_ENTITY_OWNER;
    public static Hash DELETE_FUNCTION_REFERENCE;
    public static Hash STOP_RESOURCE;
    public static Hash SET_RESOURCE_KVP;
    public static Hash GET_HELI_TAIL_ROTOR_DAMAGE_SCALE;
    public static Hash GET_PASSWORD_HASH;
    public static Hash IS_HELI_TAIL_BOOM_BREAKABLE;
    public static Hash SET_VEHICLE_ALARM;
    public static Hash IS_PED_HANDCUFFED;
    public static Hash IS_VEHICLE_SIREN_ON;
    public static Hash MUMBLE_CREATE_CHANNEL;
    public static Hash SET_RESOURCE_KVP_INT_NO_SYNC;
    public static Hash REGISTER_CONSOLE_LISTENER;
    public static Hash REGISTER_RESOURCE_BUILD_TASK_FACTORY;
    public static Hash GET_IS_VEHICLE_SECONDARY_COLOUR_CUSTOM;
    public static Hash START_RESOURCE;
    public static Hash GET_PLAYER_WEAPON_DAMAGE_MODIFIER;
    public static Hash GET_VEHICLE_BODY_HEALTH;
    public static Hash SET_VEHICLE_DIRT_LEVEL;
    public static Hash TASK_DRIVE_BY;
    public static Hash GET_GAME_POOL;
    public static Hash IS_HELI_TAIL_BOOM_BROKEN;
    public static Hash GET_PED_ARMOUR;
    public static Hash CLEAR_PED_PROP;
    public static Hash VERIFY_PASSWORD_HASH;
    public static Hash TRIGGER_CLIENT_EVENT_INTERNAL;
    public static Hash CREATE_OBJECT;
    public static Hash CREATE_PED_INSIDE_VEHICLE;
    public static Hash ADD_BLIP_FOR_ENTITY;
    public static Hash GET_ALL_VEHICLES;
    public static Hash GET_HELI_REAR_ROTOR_HEALTH;
    public static Hash SET_CONVAR;
    public static Hash SET_RESOURCE_KVP_FLOAT_NO_SYNC;
    public static Hash GET_RESOURCE_KVP_FLOAT;
    public static Hash TASK_GO_TO_ENTITY;
    public static Hash IS_PRINCIPAL_ACE_ALLOWED;
    public static Hash GET_RESOURCE_BY_FIND_INDEX;
    public static Hash GET_PED_IN_VEHICLE_SEAT;
    public static Hash DOES_ENTITY_EXIST;
    public static Hash ENSURE_ENTITY_STATE_BAG;
    public static Hash TASK_PLAY_ANIM_ADVANCED;
    public static Hash GIVE_WEAPON_COMPONENT_TO_PED;
    public static Hash GET_IS_HELI_ENGINE_RUNNING;
    public static Hash GET_VEHICLE_CUSTOM_SECONDARY_COLOUR;
    public static Hash SET_VEHICLE_NUMBER_PLATE_TEXT;
    public static Hash GET_PED_STEALTH_MOVEMENT;
    public static Hash GET_RESOURCE_STATE;
    public static Hash IS_PED_A_PLAYER;
    public static Hash GET_PLAYER_NAME;
    public static Hash GET_VEHICLE_COLOURS;
    public static Hash SET_PED_RANDOM_COMPONENT_VARIATION;
    public static Hash REMOVE_WEAPON_COMPONENT_FROM_PED;
    public static Hash GET_PLAYER_LAST_MSG;
    public static Hash CAN_PLAYER_START_COMMERCE_SESSION;
    public static Hash GET_PLAYER_CAMERA_ROTATION;
    public static Hash DOES_BOAT_SINK_WHEN_WRECKED;
    public static Hash GET_PED_SCRIPT_TASK_STAGE;
    public static Hash ADD_BLIP_FOR_RADIUS;
    public static Hash GET_VEHICLE_HANDBRAKE;
    public static Hash IS_VEHICLE_TYRE_BURST;
    public static Hash GET_VEHICLE_NUMBER_PLATE_TEXT_INDEX;
    public static Hash GET_VEHICLE_LOCK_ON_TARGET;
    public static Hash GET_TRAIN_CARRIAGE_INDEX;
    public static Hash GET_ENTITY_FROM_STATE_BAG_NAME;
    public static Hash SET_VEHICLE_DOORS_LOCKED;
    public static Hash GET_INVOKING_RESOURCE;
    public static Hash SET_PED_ARMOUR;
    public static Hash GET_RESOURCE_KVP_STRING;
    public static Hash GET_PLAYER_ROUTING_BUCKET;
    public static Hash NETWORK_GET_ENTITY_OWNER;
    public static Hash GET_PED_SOURCE_OF_DAMAGE;
    public static Hash GET_PLAYER_TOKEN;
    public static Hash CLEAR_PLAYER_WANTED_LEVEL;
    public static Hash GET_RESOURCE_KVP_INT;
    public static Hash EXECUTE_COMMAND;
    public static Hash GET_VEHICLE_RADIO_STATION_INDEX;
    public static Hash SET_VEHICLE_COLOURS;
    public static Hash CREATE_OBJECT_NO_OFFSET;
    public static Hash WAS_EVENT_CANCELED;
    public static Hash TASK_PLAY_ANIM;
    public static Hash IS_PED_USING_ACTION_MODE;
    public static Hash NETWORK_GET_ENTITY_FROM_NETWORK_ID;
    public static Hash ADD_STATE_BAG_CHANGE_HANDLER;
    public static Hash GET_HOST_ID;
    public static Hash REGISTER_COMMAND;
    public static Hash TASK_SHOOT_AT_COORD;
    public static Hash SET_PED_HEAD_BLEND_DATA;
    public static Hash GET_NUM_PLAYER_TOKENS;
    public static Hash GET_RESOURCE_PATH;
    public static Hash _ADD_BLIP_FOR_AREA;
    public static Hash GET_AIR_DRAG_MULTIPLIER_FOR_PLAYERS_VEHICLE;
    public static Hash GET_PED_CAUSE_OF_DEATH;
    public static Hash SET_ENTITY_ROUTING_BUCKET;
    public static Hash SCAN_RESOURCE_ROOT;
    public static Hash GET_STATE_BAG_VALUE;
    public static Hash GET_NUM_PLAYER_INDICES;
    public static Hash SET_PLAYER_ROUTING_BUCKET;
    public static Hash FREEZE_ENTITY_POSITION;
    public static Hash TASK_WARP_PED_INTO_VEHICLE;
    public static Hash GET_PLAYER_TIME_ONLINE;
    public static Hash GET_PLAYER_INVINCIBLE;
    public static Hash GET_ALL_OBJECTS;
    public static Hash CREATE_VEHICLE_SERVER_SETTER;
    public static Hash PERFORM_HTTP_REQUEST_INTERNAL_EX;
    public static Hash _SET_PED_FACE_FEATURE;
    public static Hash GET_CONVAR;
    public static Hash GET_PLAYER_PED;
    public static Hash GET_VEHICLE_DOOR_STATUS;
    public static Hash ADD_PED_DECORATION_FROM_HASHES;
    [ObsoleteAttribute("Deprecated name, use ADD_PED_DECORATION_FROM_HASHES instead")]
public static Hash _APPLY_PED_OVERLAY;
    [ObsoleteAttribute("Deprecated name, use ADD_PED_DECORATION_FROM_HASHES instead")]
public static Hash _SET_PED_DECORATION;
    public static Hash TRIGGER_LATENT_CLIENT_EVENT_INTERNAL;
    public static Hash GET_BLIP_SPRITE;
    public static Hash GET_PLAYER_IDENTIFIER;
    public static Hash DELETE_RESOURCE_KVP;
    public static Hash GET_VEHICLE_TYRE_SMOKE_COLOR;
    public static Hash IS_FLASH_LIGHT_ON;
    public static Hash LOAD_RESOURCE_FILE;
    public static Hash SET_PLAYER_MODEL;
    public static Hash _SET_PED_HEAD_OVERLAY_COLOR;
    public static Hash GET_STATE_BAG_KEYS;
    public static Hash LOAD_PLAYER_COMMERCE_DATA_EXT;
    public static Hash GET_PLAYER_TIME_IN_PURSUIT;
    public static Hash TASK_LEAVE_VEHICLE;
    public static Hash GET_VEHICLE_LIGHTS_STATE;
    public static Hash GET_IS_VEHICLE_ENGINE_RUNNING;
    public static Hash IS_ACE_ALLOWED;
    public static Hash GET_PED_SPECIFIC_TASK_TYPE;
    public static Hash GET_GAME_BUILD_NUMBER;
    public static Hash TASK_GO_STRAIGHT_TO_COORD;
    public static Hash GET_VEHICLE_EXTRA_COLOURS;
    public static Hash SET_VEHICLE_DOOR_BROKEN;
    public static Hash GET_PLAYER_MAX_HEALTH;
    public static Hash GET_PLAYER_WANTED_CENTRE_POSITION;
    public static Hash GET_HELI_DISABLE_EXPLODE_FROM_BODY_DAMAGE;
    public static Hash SET_PED_TO_RAGDOLL;
    public static Hash GET_PED_SOURCE_OF_DEATH;
    public static Hash GET_PLAYER_MELEE_WEAPON_DAMAGE_MODIFIER;
    public static Hash GET_VEHICLE_ENGINE_HEALTH;
    public static Hash IS_PLAYER_EVADING_WANTED_LEVEL;
    public static Hash SET_PLAYER_CULLING_RADIUS;
    public static Hash TASK_REACT_AND_FLEE_PED;
    public static Hash SET_STATE_BAG_VALUE;
    public static Hash SET_BLIP_SPRITE;
    public static Hash TASK_HANDS_UP;
    public static Hash SET_VEHICLE_CUSTOM_PRIMARY_COLOUR;
    public static Hash GET_ENTITY_HEALTH;
    public static Hash GET_HELI_THROTTLE_CONTROL;
    public static Hash PERFORM_HTTP_REQUEST_INTERNAL;
    public static Hash GET_HELI_YAW_CONTROL;
    public static Hash GET_ENTITY_ROTATION;
    public static Hash IS_BOAT_WRECKED;
    public static Hash PRINT_STRUCTURED_TRACE;
    public static Hash TRIGGER_EVENT_INTERNAL;
    public static Hash SET_VEHICLE_BODY_HEALTH;
    public static Hash SET_CONVAR_SERVER_INFO;
    public static Hash GET_CONVAR_INT;
    public static Hash GET_THRUSTER_THROTTLE;
    public static Hash GET_RESOURCE_METADATA;
    public static Hash REQUEST_PLAYER_COMMERCE_SESSION;
    public static Hash GET_ENTITY_HEADING;
    public static Hash REGISTER_RESOURCE_ASSET;
    public static Hash GET_PLAYER_WEAPON_DEFENSE_MODIFIER_2;
    public static Hash GET_PLAYER_TEAM;
    public static Hash GET_HASH_KEY;
    public static Hash SET_RESOURCE_KVP_FLOAT;
    public static Hash GET_ENTITY_ROTATION_VELOCITY;
    public static Hash REMOVE_WEAPON_FROM_PED;
    public static Hash HAS_ENTITY_BEEN_MARKED_AS_NO_LONGER_NEEDED;
    public static Hash SET_PED_CONFIG_FLAG;
    public static Hash SET_VEHICLE_CUSTOM_SECONDARY_COLOUR;
    public static Hash GET_ENTITY_SPEED;
    public static Hash NETWORK_GET_NETWORK_ID_FROM_ENTITY;
    public static Hash GET_INSTANCE_ID;
    public static Hash SET_ENTITY_IGNORE_REQUEST_CONTROL_FILTER;
    public static Hash SAVE_RESOURCE_FILE;
    public static Hash GET_VEHICLE_DASHBOARD_COLOUR;
    public static Hash SET_ROUTING_BUCKET_ENTITY_LOCKDOWN_MODE;
    public static Hash GET_HELI_ENGINE_HEALTH;
    public static Hash SET_PED_HAIR_TINT;
    [ObsoleteAttribute("Deprecated name, use SET_PED_HAIR_TINT instead")]
public static Hash _SET_PED_HAIR_COLOR;
    public static Hash GET_VEHICLE_TYPE;
    public static Hash GET_HELI_TAIL_ROTOR_HEALTH;
    public static Hash REMOVE_ALL_PED_WEAPONS;
    public static Hash GET_PED_MAX_HEALTH;
    public static Hash GET_GAME_TIMER;
    public static Hash SET_VEHICLE_COLOUR_COMBINATION;
    public static Hash GET_PLAYER_FROM_STATE_BAG_NAME;
    public static Hash GET_PLAYER_IDENTIFIER_BY_TYPE;
    public static Hash CLEAR_PED_SECONDARY_TASK;
    public static Hash GET_LANDING_GEAR_STATE;
    public static Hash GET_HELI_BODY_HEALTH;
    public static Hash LOAD_PLAYER_COMMERCE_DATA;
    public static Hash TASK_SHOOT_AT_ENTITY;
    public static Hash IS_VEHICLE_WINDOW_INTACT;
    public static Hash GET_VEHICLE_FLIGHT_NOZZLE_POSITION;
    public static Hash GET_VEHICLE_PED_IS_IN;
    public static Hash GET_CURRENT_PED_WEAPON;
    public static Hash END_FIND_KVP;
    public static Hash PROFILER_EXIT_SCOPE;
    public static Hash SET_PLAYER_WANTED_LEVEL;
    public static Hash SET_MAP_NAME;
    public static Hash GET_ENTITY_SCRIPT;
    public static Hash SET_CURRENT_PED_WEAPON;
    public static Hash GET_ALL_PEDS;
    public static Hash TASK_ENTER_VEHICLE;
    public static Hash SCHEDULE_RESOURCE_TICK;
    public static Hash HAS_VEHICLE_BEEN_DAMAGED_BY_BULLETS;
    public static Hash DROP_PLAYER;
    public static Hash IS_VEHICLE_ENGINE_STARTING;
    public static Hash CLEAR_PED_TASKS_IMMEDIATELY;
    public static Hash FIND_KVP;
    public static Hash GET_PLAYER_WANTED_LEVEL;
    public static Hash IS_PLAYER_COMMERCE_INFO_LOADED;
    public static Hash SET_PED_AMMO;
    public static Hash GET_ENTITY_VELOCITY;
    public static Hash GET_PED_DESIRED_HEADING;
    public static Hash TASK_EVERYONE_LEAVE_VEHICLE;
    public static Hash APPLY_FORCE_TO_ENTITY;
    public static Hash GET_HELI_REAR_ROTOR_DAMAGE_SCALE;
    public static Hash GIVE_WEAPON_TO_PED;
    public static Hash ADD_BLIP_FOR_COORD;
    public static Hash PROFILER_ENTER_SCOPE;
    public static Hash GET_ENTITY_MAX_HEALTH;
    public static Hash IS_PLAYER_USING_SUPER_JUMP;
    public static Hash IS_PED_RAGDOLL;
    public static Hash SET_PED_DEFAULT_COMPONENT_VARIATION;
    public static Hash GET_PLAYER_FROM_INDEX;
    public static Hash TASK_COMBAT_PED;
    public static Hash MUMBLE_SET_PLAYER_MUTED;
    public static Hash GET_VEHICLE_INTERIOR_COLOUR;
    public static Hash SET_ROUTING_BUCKET_POPULATION_ENABLED;
    public static Hash SET_PED_CAN_RAGDOLL;
    public static Hash IS_DUPLICITY_VERSION;
    public static Hash SET_PED_RESET_FLAG;
    public static Hash SET_PLAYER_CONTROL;
    public static Hash REGISTER_RESOURCE_AS_EVENT_HANDLER;
    public static Hash GET_SELECTED_PED_WEAPON;
    public static Hash SET_PED_HEAD_OVERLAY;
    public static Hash REMOVE_STATE_BAG_CHANGE_HANDLER;
    public static Hash SET_ENTITY_DISTANCE_CULLING_RADIUS;
    public static Hash GET_REGISTERED_COMMANDS;
    public static Hash GET_HELI_GAS_TANK_HEALTH;
    public static Hash SET_PED_COMPONENT_VARIATION;
    public static Hash IS_BOAT_ANCHORED_AND_FROZEN;
    public static Hash GET_VEHICLE_HEADLIGHTS_COLOUR;
    public static Hash GET_IS_VEHICLE_PRIMARY_COLOUR_CUSTOM;
    public static Hash REMOVE_BLIP;
    public static Hash GET_VEHICLE_WHEEL_TYPE;
    public static Hash GET_ENTITY_MODEL;
    public static Hash TASK_LEAVE_ANY_VEHICLE;
    public static Hash START_FIND_KVP;
    public static Hash CREATE_VEHICLE;
    public static Hash CLEAR_PED_TASKS;
    public static Hash GET_VEHICLE_HORN_TYPE;
    public static Hash IS_PLAYER_ACE_ALLOWED;
    public static Hash DOES_PLAYER_OWN_SKU_EXT;
    public static Hash SET_ENTITY_COORDS;
    public static Hash SET_PLAYER_INVINCIBLE;
    public static Hash SET_ENTITY_HEADING;
    public static Hash FLUSH_RESOURCE_KVP;
    public static Hash SET_PED_RANDOM_PROPS;
    public static Hash GET_VEHICLE_PETROL_TANK_HEALTH;
    public static Hash HAS_VEHICLE_BEEN_OWNED_BY_PLAYER;
    public static Hash GET_PLAYER_GUID;
    public static Hash GET_CONSOLE_BUFFER;
    public static Hash GET_CURRENT_RESOURCE_NAME;
    public static Hash GET_VEHICLE_NUMBER_PLATE_TEXT;
    public static Hash GET_ENTITY_COLLISION_DISABLED;
    public static Hash GET_GAME_NAME;
    public static Hash _SET_PED_EYE_COLOR;
    public static Hash GET_VEHICLE_LIVERY;
    public static Hash GET_ENTITY_ROUTING_BUCKET;
    public static Hash IS_ENTITY_POSITION_FROZEN;
    public static Hash IS_PED_STRAFING;
    public static Hash GET_HELI_MAIN_ROTOR_HEALTH;
    public static Hash GET_PLAYER_WEAPON_DEFENSE_MODIFIER;
    public static Hash SET_CONVAR_REPLICATED;
    public static Hash DUPLICATE_FUNCTION_REFERENCE;
    public static Hash SET_HTTP_HANDLER;
    public static Hash GET_LAST_PED_IN_VEHICLE_SEAT;
    public static Hash PROFILER_IS_RECORDING;
    public static Hash SET_GAME_TYPE;
    public static Hash TASK_GO_TO_COORD_ANY_MEANS;
    public static Hash ENABLE_ENHANCED_HOST_SUPPORT;
    public static Hash SET_PED_TO_RAGDOLL_WITH_FALL;
    public static Hash CANCEL_EVENT;
    public static Hash DELETE_ENTITY;
    public static Hash GET_VEHICLE_HOMING_LOCKON_STATE;
    public static Hash GET_ENTITY_POPULATION_TYPE;
    public static Hash GET_VEHICLE_DIRT_LEVEL;
    public static Hash GET_ENTITY_ATTACHED_TO;
    public static Hash GET_PLAYER_ENDPOINT;
    public static Hash GET_PLAYER_PING;
    public static Hash SET_ENTITY_VELOCITY;
    public static Hash GET_NUM_PLAYER_IDENTIFIERS;
    public static Hash NETWORK_GET_VOICE_PROXIMITY_OVERRIDE_FOR_PLAYER;
}
public abstract class CitizenFX.Core.Native.INativeValue : object {
    public ulong NativeValue { get; public set; }
    public abstract virtual ulong get_NativeValue();
    public abstract virtual void set_NativeValue(ulong value);
}
public class CitizenFX.Core.Native.InputArgument : object {
    protected object m_value;
    public static InputArgument op_Implicit(INativeValue value);
    public static InputArgument op_Implicit(Vector3 value);
    public static InputArgument op_Implicit(bool value);
    public static InputArgument op_Implicit(byte value);
    public static InputArgument op_Implicit(Delegate value);
    public static InputArgument op_Implicit(double value);
    public static InputArgument op_Implicit(Enum value);
    public static InputArgument op_Implicit(short value);
    public static InputArgument op_Implicit(int value);
    public static InputArgument op_Implicit(long value);
    public static InputArgument op_Implicit(IntPtr value);
    public static InputArgument op_Implicit(sbyte value);
    public static InputArgument op_Implicit(float value);
    public static InputArgument op_Implicit(string value);
    public static InputArgument op_Implicit(ushort value);
    public static InputArgument op_Implicit(UInt32 value);
    public static InputArgument op_Implicit(ulong value);
    public static InputArgument op_Implicit(Void* value);
    public virtual string ToString();
}
public class CitizenFX.Core.Native.OutputArgument : InputArgument {
    public OutputArgument(object arg);
    protected virtual override void Finalize();
    public T GetResult();
}
public class CitizenFX.Core.NetworkCallbackDelegate : MulticastDelegate {
    public NetworkCallbackDelegate(object object, IntPtr method);
    public virtual Task`1<object> Invoke(Object[] args);
    public virtual IAsyncResult BeginInvoke(Object[] args, AsyncCallback callback, object object);
    public virtual Task`1<object> EndInvoke(IAsyncResult result);
}
public class CitizenFX.Core.Ped : Entity {
    public Ped(int handle);
    public static Ped FromPlayerHandle(string handle);
}
public class CitizenFX.Core.Player : object {
    public Ped Character { get; }
    public string EndPoint { get; }
    public string Handle { get; }
    public IdentifierCollection Identifiers { get; }
    public int LastMsg { get; }
    public string Name { get; }
    public int Ping { get; }
    public StateBag State { get; }
    public Ped get_Character();
    public string get_EndPoint();
    public string get_Handle();
    public IdentifierCollection get_Identifiers();
    public int get_LastMsg();
    public string get_Name();
    public int get_Ping();
    public StateBag get_State();
    public void Drop(string reason);
    protected bool Equals(Player other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(Player left, Player right);
    public static bool op_Inequality(Player left, Player right);
    public void TriggerEvent(string eventName, Object[] args);
    public void TriggerLatentEvent(string eventName, int bytesPerSecond, Object[] args);
}
[DefaultMemberAttribute("Item")]
public class CitizenFX.Core.PlayerList : object {
    public Player Item { get; }
    public Player Item { get; }
    public Player get_Item(int netId);
    public Player get_Item(string name);
    public sealed virtual IEnumerator`1<Player> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public abstract class CitizenFX.Core.PoolObject : INativeValue {
    public int Handle { get; protected set; }
    public ulong NativeValue { get; public set; }
    protected PoolObject(int handle);
    [CompilerGeneratedAttribute]
public int get_Handle();
    [CompilerGeneratedAttribute]
protected void set_Handle(int value);
    public virtual ulong get_NativeValue();
    public virtual void set_NativeValue(ulong value);
}
public class CitizenFX.Core.Prop : Entity {
    public Prop(int handle);
}
[DefaultMemberAttribute("Item")]
public class CitizenFX.Core.Quaternion : ValueType {
    public static Quaternion Identity;
    public static Quaternion One;
    public float W;
    public float X;
    public float Y;
    public float Z;
    public static Quaternion Zero;
    public float Angle { get; }
    public Vector3 Axis { get; }
    public bool IsIdentity { get; }
    public bool IsNormalized { get; }
    public float Item { get; public set; }
    public Quaternion(Vector2 value, float z, float w);
    public Quaternion(Vector3 value, float w);
    public Quaternion(Vector4 value);
    public Quaternion(float value);
    public Quaternion(float x, float y, float z, float w);
    public Quaternion(Single[] values);
    public float get_Angle();
    public Vector3 get_Axis();
    public bool get_IsIdentity();
    public bool get_IsNormalized();
    public float get_Item(int index);
    public void set_Item(int index, float value);
    public static Quaternion Add(Quaternion left, Quaternion right);
    public static void Add(Quaternion& left, Quaternion& right, Quaternion& result);
    public static Quaternion Barycentric(Quaternion value1, Quaternion value2, Quaternion value3, float amount1, float amount2);
    public static void Barycentric(Quaternion& value1, Quaternion& value2, Quaternion& value3, float amount1, float amount2, Quaternion& result);
    public static Quaternion BillboardLH(Vector3 objectPosition, Vector3 cameraPosition, Vector3 cameraUpVector, Vector3 cameraForwardVector);
    public static void BillboardLH(Vector3& objectPosition, Vector3& cameraPosition, Vector3& cameraUpVector, Vector3& cameraForwardVector, Quaternion& result);
    public static Quaternion BillboardRH(Vector3 objectPosition, Vector3 cameraPosition, Vector3 cameraUpVector, Vector3 cameraForwardVector);
    public static void BillboardRH(Vector3& objectPosition, Vector3& cameraPosition, Vector3& cameraUpVector, Vector3& cameraForwardVector, Quaternion& result);
    public void Conjugate();
    public static Quaternion Conjugate(Quaternion value);
    public static void Conjugate(Quaternion& value, Quaternion& result);
    public static float Dot(Quaternion left, Quaternion right);
    public static void Dot(Quaternion& left, Quaternion& right, Single& result);
    public sealed virtual bool Equals(Quaternion other);
    public bool Equals(Quaternion& other);
    public virtual bool Equals(object value);
    public static Quaternion Exponential(Quaternion value);
    public static void Exponential(Quaternion& value, Quaternion& result);
    public virtual int GetHashCode();
    public void Invert();
    public static Quaternion Invert(Quaternion value);
    public static void Invert(Quaternion& value, Quaternion& result);
    public float Length();
    public float LengthSquared();
    public static Quaternion Lerp(Quaternion start, Quaternion end, float amount);
    public static void Lerp(Quaternion& start, Quaternion& end, float amount, Quaternion& result);
    public static Quaternion Logarithm(Quaternion value);
    public static void Logarithm(Quaternion& value, Quaternion& result);
    public static Quaternion LookAtLH(Vector3 eye, Vector3 target, Vector3 up);
    public static void LookAtLH(Vector3& eye, Vector3& target, Vector3& up, Quaternion& result);
    public static Quaternion LookAtRH(Vector3 eye, Vector3 target, Vector3 up);
    public static void LookAtRH(Vector3& eye, Vector3& target, Vector3& up, Quaternion& result);
    public static Quaternion Multiply(Quaternion left, Quaternion right);
    public static Quaternion Multiply(Quaternion value, float scale);
    public static void Multiply(Quaternion& left, Quaternion& right, Quaternion& result);
    public static void Multiply(Quaternion& value, float scale, Quaternion& result);
    public static Quaternion Negate(Quaternion value);
    public static void Negate(Quaternion& value, Quaternion& result);
    public void Normalize();
    public static Quaternion Normalize(Quaternion value);
    public static void Normalize(Quaternion& value, Quaternion& result);
    public static Quaternion op_Addition(Quaternion left, Quaternion right);
    public static bool op_Equality(Quaternion left, Quaternion right);
    public static bool op_Inequality(Quaternion left, Quaternion right);
    public static Quaternion op_Multiply(Quaternion left, Quaternion right);
    public static Quaternion op_Multiply(Quaternion value, float scale);
    public static Quaternion op_Multiply(float scale, Quaternion value);
    public static Quaternion op_Subtraction(Quaternion left, Quaternion right);
    public static Quaternion op_UnaryNegation(Quaternion value);
    public static Quaternion RotationAxis(Vector3 axis, float angle);
    public static void RotationAxis(Vector3& axis, float angle, Quaternion& result);
    public static Quaternion RotationLookAtLH(Vector3 forward, Vector3 up);
    public static void RotationLookAtLH(Vector3& forward, Vector3& up, Quaternion& result);
    public static Quaternion RotationLookAtRH(Vector3 forward, Vector3 up);
    public static void RotationLookAtRH(Vector3& forward, Vector3& up, Quaternion& result);
    public static Quaternion RotationMatrix(Matrix matrix);
    public static void RotationMatrix(Matrix3x3& matrix, Quaternion& result);
    public static void RotationMatrix(Matrix& matrix, Quaternion& result);
    public static Quaternion RotationYawPitchRoll(float yaw, float pitch, float roll);
    public static void RotationYawPitchRoll(float yaw, float pitch, float roll, Quaternion& result);
    public static Quaternion Slerp(Quaternion start, Quaternion end, float amount);
    public static void Slerp(Quaternion& start, Quaternion& end, float amount, Quaternion& result);
    public static Quaternion Squad(Quaternion value1, Quaternion value2, Quaternion value3, Quaternion value4, float amount);
    public static void Squad(Quaternion& value1, Quaternion& value2, Quaternion& value3, Quaternion& value4, float amount, Quaternion& result);
    public static Quaternion[] SquadSetup(Quaternion value1, Quaternion value2, Quaternion value3, Quaternion value4);
    public static Quaternion Subtract(Quaternion left, Quaternion right);
    public static void Subtract(Quaternion& left, Quaternion& right, Quaternion& result);
    public Single[] ToArray();
    public virtual string ToString();
    public string ToString(IFormatProvider formatProvider);
    public string ToString(string format);
    public sealed virtual string ToString(string format, IFormatProvider formatProvider);
}
public static class CitizenFX.Core.ScriptContext : object {
    public static object GetResult(Type type);
    public static T GetResult();
    public static void Push(object arg);
    public static void Reset();
}
public static class CitizenFX.Core.ScriptEnvironment : object {
    public static string ResourceName { get; }
    public static string get_ResourceName();
}
public abstract class CitizenFX.Core.ServerScript : BaseScript {
}
[DefaultMemberAttribute("Item")]
public class CitizenFX.Core.StateBag : object {
    [DynamicAttribute]
public object Item { get; public set; }
    public object get_Item(string key);
    public void set_Item(string key, object value);
    public object Get(string key);
    public void Set(string key, object data, bool replicated);
}
[AttributeUsageAttribute("64")]
public class CitizenFX.Core.TickAttribute : Attribute {
}
[DefaultMemberAttribute("Item")]
public class CitizenFX.Core.Vector2 : ValueType {
    public static Vector2 Empty;
    public static Vector2 One;
    public static Vector2 UnitX;
    public static Vector2 UnitY;
    public float X;
    public float Y;
    public static Vector2 Zero;
    public bool IsNormalized { get; }
    public bool IsZero { get; }
    public float Item { get; public set; }
    public Vector2(Vector2& value);
    public Vector2(float value);
    public Vector2(float x, float y);
    public Vector2(Single[] values);
    public bool get_IsNormalized();
    public bool get_IsZero();
    public float get_Item(int index);
    public void set_Item(int index, float value);
    public static Vector2 Add(Vector2 left, Vector2 right);
    public static Vector2 Add(Vector2 left, float right);
    public static void Add(Vector2& left, Vector2& right, Vector2& result);
    public static void Add(Vector2& left, Single& right, Vector2& result);
    public static Vector2 Barycentric(Vector2 value1, Vector2 value2, Vector2 value3, float amount1, float amount2);
    public static void Barycentric(Vector2& value1, Vector2& value2, Vector2& value3, float amount1, float amount2, Vector2& result);
    public static Vector2 CatmullRom(Vector2 value1, Vector2 value2, Vector2 value3, Vector2 value4, float amount);
    public static void CatmullRom(Vector2& value1, Vector2& value2, Vector2& value3, Vector2& value4, float amount, Vector2& result);
    public static Vector2 Clamp(Vector2 value, Vector2 min, Vector2 max);
    public static void Clamp(Vector2& value, Vector2& min, Vector2& max, Vector2& result);
    public static float Distance(Vector2 value1, Vector2 value2);
    public static void Distance(Vector2& value1, Vector2& value2, Single& result);
    public static float DistanceSquared(Vector2 value1, Vector2 value2);
    public static void DistanceSquared(Vector2& value1, Vector2& value2, Single& result);
    public static Vector2 Divide(Vector2 value, float scale);
    public static void Divide(Vector2& value, float scale, Vector2& result);
    public static Vector2 Divide(float scale, Vector2 value);
    public static void Divide(float scale, Vector2& value, Vector2& result);
    public static float Dot(Vector2 left, Vector2 right);
    public static void Dot(Vector2& left, Vector2& right, Single& result);
    public sealed virtual bool Equals(Vector2 other);
    public bool Equals(Vector2& other);
    public virtual bool Equals(object value);
    public virtual int GetHashCode();
    public static Vector2 Hermite(Vector2 value1, Vector2 tangent1, Vector2 value2, Vector2 tangent2, float amount);
    public static void Hermite(Vector2& value1, Vector2& tangent1, Vector2& value2, Vector2& tangent2, float amount, Vector2& result);
    public float Length();
    public float LengthSquared();
    public static Vector2 Lerp(Vector2 start, Vector2 end, float amount);
    public static void Lerp(Vector2& start, Vector2& end, float amount, Vector2& result);
    public static Vector2 Max(Vector2 left, Vector2 right);
    public static void Max(Vector2& left, Vector2& right, Vector2& result);
    public static Vector2 Min(Vector2 left, Vector2 right);
    public static void Min(Vector2& left, Vector2& right, Vector2& result);
    public static Vector2 Multiply(Vector2 left, Vector2 right);
    public static Vector2 Multiply(Vector2 value, float scale);
    public static void Multiply(Vector2& left, Vector2& right, Vector2& result);
    public static void Multiply(Vector2& value, float scale, Vector2& result);
    public static Vector2 Negate(Vector2 value);
    public static void Negate(Vector2& value, Vector2& result);
    public void Normalize();
    public static Vector2 Normalize(Vector2 value);
    public static void Normalize(Vector2& value, Vector2& result);
    public static Vector2 op_Addition(Vector2 left, Vector2 right);
    public static Vector2 op_Addition(Vector2 value, float scalar);
    public static Vector2 op_Addition(float scalar, Vector2 value);
    public static Vector2 op_Division(Vector2 value, Vector2 scale);
    public static Vector2 op_Division(Vector2 value, float scale);
    public static Vector2 op_Division(float scale, Vector2 value);
    public static bool op_Equality(Vector2 left, Vector2 right);
    public static Vector3 op_Explicit(Vector2 value);
    public static Vector4 op_Explicit(Vector2 value);
    public static bool op_Inequality(Vector2 left, Vector2 right);
    public static Vector2 op_Multiply(Vector2 left, Vector2 right);
    public static Vector2 op_Multiply(Vector2 value, float scale);
    public static Vector2 op_Multiply(float scale, Vector2 value);
    public static Vector2 op_Subtraction(Vector2 left, Vector2 right);
    public static Vector2 op_Subtraction(Vector2 value, float scalar);
    public static Vector2 op_Subtraction(float scalar, Vector2 value);
    public static Vector2 op_UnaryNegation(Vector2 value);
    public static Vector2 op_UnaryPlus(Vector2 value);
    public static void Orthogonalize(Vector2[] destination, Vector2[] source);
    public static void Orthonormalize(Vector2[] destination, Vector2[] source);
    public static Vector2 Reflect(Vector2 vector, Vector2 normal);
    public static void Reflect(Vector2& vector, Vector2& normal, Vector2& result);
    public void Saturate();
    public static Vector2 SmoothStep(Vector2 start, Vector2 end, float amount);
    public static void SmoothStep(Vector2& start, Vector2& end, float amount, Vector2& result);
    public static Vector2 Subtract(Vector2 left, Vector2 right);
    public static Vector2 Subtract(Vector2 left, float right);
    public static void Subtract(Vector2& left, Vector2& right, Vector2& result);
    public static void Subtract(Vector2& left, Single& right, Vector2& result);
    public static Vector2 Subtract(float left, Vector2 right);
    public static void Subtract(Single& left, Vector2& right, Vector2& result);
    public Single[] ToArray();
    public virtual string ToString();
    public string ToString(IFormatProvider formatProvider);
    public string ToString(string format);
    public sealed virtual string ToString(string format, IFormatProvider formatProvider);
    public static Vector4 Transform(Vector2 vector, Matrix transform);
    public static Vector2 Transform(Vector2 vector, Quaternion rotation);
    public static void Transform(Vector2& vector, Matrix& transform, Vector4& result);
    public static void Transform(Vector2& vector, Quaternion& rotation, Vector2& result);
    public static void Transform(Vector2[] source, Matrix& transform, Vector4[] destination);
    public static void Transform(Vector2[] source, Quaternion& rotation, Vector2[] destination);
    public static Vector2 TransformCoordinate(Vector2 coordinate, Matrix transform);
    public static void TransformCoordinate(Vector2& coordinate, Matrix& transform, Vector2& result);
    public static void TransformCoordinate(Vector2[] source, Matrix& transform, Vector2[] destination);
    public static Vector2 TransformNormal(Vector2 normal, Matrix transform);
    public static void TransformNormal(Vector2& normal, Matrix& transform, Vector2& result);
    public static void TransformNormal(Vector2[] source, Matrix& transform, Vector2[] destination);
}
[DefaultMemberAttribute("Item")]
public class CitizenFX.Core.Vector3 : ValueType {
    public static Vector3 Backward;
    public static Vector3 BackwardLH;
    public static Vector3 BackwardRH;
    public static Vector3 Down;
    public static Vector3 Forward;
    public static Vector3 ForwardLH;
    public static Vector3 ForwardRH;
    public static Vector3 Left;
    public static Vector3 One;
    public static Vector3 Right;
    public static Vector3 UnitX;
    public static Vector3 UnitY;
    public static Vector3 UnitZ;
    public static Vector3 Up;
    public float X;
    public float Y;
    public float Z;
    public static Vector3 Zero;
    public bool IsNormalized { get; }
    public bool IsZero { get; }
    public float Item { get; public set; }
    public Vector3(Vector2 value, float z);
    public Vector3(float value);
    public Vector3(float x, float y, float z);
    public Vector3(Single[] values);
    public bool get_IsNormalized();
    public bool get_IsZero();
    public float get_Item(int index);
    public void set_Item(int index, float value);
    public static Vector3 Add(Vector3 left, Vector3 right);
    public static Vector3 Add(Vector3 left, float right);
    public static void Add(Vector3& left, Vector3& right, Vector3& result);
    public static void Add(Vector3& left, Single& right, Vector3& result);
    public static Vector3 Barycentric(Vector3 value1, Vector3 value2, Vector3 value3, float amount1, float amount2);
    public static void Barycentric(Vector3& value1, Vector3& value2, Vector3& value3, float amount1, float amount2, Vector3& result);
    public static Vector3 CatmullRom(Vector3 value1, Vector3 value2, Vector3 value3, Vector3 value4, float amount);
    public static void CatmullRom(Vector3& value1, Vector3& value2, Vector3& value3, Vector3& value4, float amount, Vector3& result);
    public static Vector3 Clamp(Vector3 value, Vector3 min, Vector3 max);
    public static void Clamp(Vector3& value, Vector3& min, Vector3& max, Vector3& result);
    public static Vector3 Cross(Vector3 left, Vector3 right);
    public static void Cross(Vector3& left, Vector3& right, Vector3& result);
    public static float Distance(Vector3 value1, Vector3 value2);
    public static void Distance(Vector3& value1, Vector3& value2, Single& result);
    public static float DistanceSquared(Vector3 value1, Vector3 value2);
    public static void DistanceSquared(Vector3& value1, Vector3& value2, Single& result);
    public float DistanceToSquared(Vector3 other);
    public float DistanceToSquared2D(Vector3 other);
    public static Vector3 Divide(Vector3 value, float scale);
    public static void Divide(Vector3& value, float scale, Vector3& result);
    public static Vector3 Divide(float scale, Vector3 value);
    public static void Divide(float scale, Vector3& value, Vector3& result);
    public static float Dot(Vector3 left, Vector3 right);
    public static void Dot(Vector3& left, Vector3& right, Single& result);
    public sealed virtual bool Equals(Vector3 other);
    public bool Equals(Vector3& other);
    public virtual bool Equals(object value);
    public virtual int GetHashCode();
    public static Vector3 Hermite(Vector3 value1, Vector3 tangent1, Vector3 value2, Vector3 tangent2, float amount);
    public static void Hermite(Vector3& value1, Vector3& tangent1, Vector3& value2, Vector3& tangent2, float amount, Vector3& result);
    public float Length();
    public float LengthSquared();
    public static Vector3 Lerp(Vector3 start, Vector3 end, float amount);
    public static void Lerp(Vector3& start, Vector3& end, float amount, Vector3& result);
    public static Vector3 Max(Vector3 left, Vector3 right);
    public static void Max(Vector3& left, Vector3& right, Vector3& result);
    public static Vector3 Min(Vector3 left, Vector3 right);
    public static void Min(Vector3& left, Vector3& right, Vector3& result);
    public static Vector3 Multiply(Vector3 left, Vector3 right);
    public static Vector3 Multiply(Vector3 value, float scale);
    public static void Multiply(Vector3& left, Vector3& right, Vector3& result);
    public static void Multiply(Vector3& value, float scale, Vector3& result);
    public static bool NearEqual(Vector3 left, Vector3 right, Vector3 epsilon);
    public static bool NearEqual(Vector3& left, Vector3& right, Vector3& epsilon);
    public static Vector3 Negate(Vector3 value);
    public static void Negate(Vector3& value, Vector3& result);
    public void Normalize();
    public static Vector3 Normalize(Vector3 value);
    public static void Normalize(Vector3& value, Vector3& result);
    public static Vector3 op_Addition(Vector3 left, Vector3 right);
    public static Vector3 op_Addition(Vector3 value, float scalar);
    public static Vector3 op_Addition(float scalar, Vector3 value);
    public static Vector3 op_Division(Vector3 value, Vector3 scale);
    public static Vector3 op_Division(Vector3 value, float scale);
    public static Vector3 op_Division(float scale, Vector3 value);
    public static bool op_Equality(Vector3 left, Vector3 right);
    public static Vector2 op_Explicit(Vector3 value);
    public static Vector4 op_Explicit(Vector3 value);
    public static bool op_Inequality(Vector3 left, Vector3 right);
    public static Vector3 op_Multiply(Vector3 left, Vector3 right);
    public static Vector3 op_Multiply(Vector3 value, float scale);
    public static Vector3 op_Multiply(float scale, Vector3 value);
    public static Vector3 op_Subtraction(Vector3 left, Vector3 right);
    public static Vector3 op_Subtraction(Vector3 value, float scalar);
    public static Vector3 op_Subtraction(float scalar, Vector3 value);
    public static Vector3 op_UnaryNegation(Vector3 value);
    public static Vector3 op_UnaryPlus(Vector3 value);
    public static void Orthogonalize(Vector3[] destination, Vector3[] source);
    public static void Orthonormalize(Vector3[] destination, Vector3[] source);
    public static Vector3 Project(Vector3 vector, float x, float y, float width, float height, float minZ, float maxZ, Matrix worldViewProjection);
    public static void Project(Vector3& vector, float x, float y, float width, float height, float minZ, float maxZ, Matrix& worldViewProjection, Vector3& result);
    public static Vector3 Reflect(Vector3 vector, Vector3 normal);
    public static void Reflect(Vector3& vector, Vector3& normal, Vector3& result);
    public static Vector3 SmoothStep(Vector3 start, Vector3 end, float amount);
    public static void SmoothStep(Vector3& start, Vector3& end, float amount, Vector3& result);
    public static Vector3 Subtract(Vector3 left, Vector3 right);
    public static Vector3 Subtract(Vector3 left, float right);
    public static void Subtract(Vector3& left, Vector3& right, Vector3& result);
    public static void Subtract(Vector3& left, Single& right, Vector3& result);
    public static Vector3 Subtract(float left, Vector3 right);
    public static void Subtract(Single& left, Vector3& right, Vector3& result);
    public Single[] ToArray();
    public virtual string ToString();
    public string ToString(IFormatProvider formatProvider);
    public string ToString(string format);
    public sealed virtual string ToString(string format, IFormatProvider formatProvider);
    public static Vector4 Transform(Vector3 vector, Matrix transform);
    public static Vector3 Transform(Vector3 vector, Matrix3x3 transform);
    public static Vector3 Transform(Vector3 vector, Quaternion rotation);
    public static void Transform(Vector3& vector, Matrix3x3& transform, Vector3& result);
    public static void Transform(Vector3& vector, Matrix& transform, Vector3& result);
    public static void Transform(Vector3& vector, Matrix& transform, Vector4& result);
    public static void Transform(Vector3& vector, Quaternion& rotation, Vector3& result);
    public static void Transform(Vector3[] source, Matrix& transform, Vector4[] destination);
    public static void Transform(Vector3[] source, Quaternion& rotation, Vector3[] destination);
    public static Vector3 TransformCoordinate(Vector3 coordinate, Matrix transform);
    public static void TransformCoordinate(Vector3& coordinate, Matrix& transform, Vector3& result);
    public static void TransformCoordinate(Vector3[] source, Matrix& transform, Vector3[] destination);
    public static Vector3 TransformNormal(Vector3 normal, Matrix transform);
    public static void TransformNormal(Vector3& normal, Matrix& transform, Vector3& result);
    public static void TransformNormal(Vector3[] source, Matrix& transform, Vector3[] destination);
    public static Vector3 Unproject(Vector3 vector, float x, float y, float width, float height, float minZ, float maxZ, Matrix worldViewProjection);
    public static void Unproject(Vector3& vector, float x, float y, float width, float height, float minZ, float maxZ, Matrix& worldViewProjection, Vector3& result);
}
[DefaultMemberAttribute("Item")]
public class CitizenFX.Core.Vector4 : ValueType {
    public static Vector4 One;
    public static Vector4 UnitW;
    public static Vector4 UnitX;
    public static Vector4 UnitY;
    public static Vector4 UnitZ;
    public float W;
    public float X;
    public float Y;
    public float Z;
    public static Vector4 Zero;
    public bool IsNormalized { get; }
    public bool IsZero { get; }
    public float Item { get; public set; }
    public Vector4(Vector2 value, float z, float w);
    public Vector4(Vector3 value, float w);
    public Vector4(float value);
    public Vector4(float x, float y, float z, float w);
    public Vector4(Single[] values);
    public bool get_IsNormalized();
    public bool get_IsZero();
    public float get_Item(int index);
    public void set_Item(int index, float value);
    public static Vector4 Add(Vector4 left, Vector4 right);
    public static Vector4 Add(Vector4 left, float right);
    public static void Add(Vector4& left, Vector4& right, Vector4& result);
    public static void Add(Vector4& left, Single& right, Vector4& result);
    public static Vector4 Barycentric(Vector4 value1, Vector4 value2, Vector4 value3, float amount1, float amount2);
    public static void Barycentric(Vector4& value1, Vector4& value2, Vector4& value3, float amount1, float amount2, Vector4& result);
    public static Vector4 CatmullRom(Vector4 value1, Vector4 value2, Vector4 value3, Vector4 value4, float amount);
    public static void CatmullRom(Vector4& value1, Vector4& value2, Vector4& value3, Vector4& value4, float amount, Vector4& result);
    public static Vector4 Clamp(Vector4 value, Vector4 min, Vector4 max);
    public static void Clamp(Vector4& value, Vector4& min, Vector4& max, Vector4& result);
    public static float Distance(Vector4 value1, Vector4 value2);
    public static void Distance(Vector4& value1, Vector4& value2, Single& result);
    public static float DistanceSquared(Vector4 value1, Vector4 value2);
    public static void DistanceSquared(Vector4& value1, Vector4& value2, Single& result);
    public static Vector4 Divide(Vector4 value, float scale);
    public static void Divide(Vector4& value, float scale, Vector4& result);
    public static Vector4 Divide(float scale, Vector4 value);
    public static void Divide(float scale, Vector4& value, Vector4& result);
    public static float Dot(Vector4 left, Vector4 right);
    public static void Dot(Vector4& left, Vector4& right, Single& result);
    public sealed virtual bool Equals(Vector4 other);
    public bool Equals(Vector4& other);
    public virtual bool Equals(object value);
    public virtual int GetHashCode();
    public static Vector4 Hermite(Vector4 value1, Vector4 tangent1, Vector4 value2, Vector4 tangent2, float amount);
    public static void Hermite(Vector4& value1, Vector4& tangent1, Vector4& value2, Vector4& tangent2, float amount, Vector4& result);
    public float Length();
    public float LengthSquared();
    public static Vector4 Lerp(Vector4 start, Vector4 end, float amount);
    public static void Lerp(Vector4& start, Vector4& end, float amount, Vector4& result);
    public static Vector4 Max(Vector4 left, Vector4 right);
    public static void Max(Vector4& left, Vector4& right, Vector4& result);
    public static Vector4 Min(Vector4 left, Vector4 right);
    public static void Min(Vector4& left, Vector4& right, Vector4& result);
    public static Vector4 Multiply(Vector4 left, Vector4 right);
    public static Vector4 Multiply(Vector4 value, float scale);
    public static void Multiply(Vector4& left, Vector4& right, Vector4& result);
    public static void Multiply(Vector4& value, float scale, Vector4& result);
    public static Vector4 Negate(Vector4 value);
    public static void Negate(Vector4& value, Vector4& result);
    public void Normalize();
    public static Vector4 Normalize(Vector4 value);
    public static void Normalize(Vector4& value, Vector4& result);
    public static Vector4 op_Addition(Vector4 left, Vector4 right);
    public static Vector4 op_Addition(Vector4 value, float scalar);
    public static Vector4 op_Addition(float scalar, Vector4 value);
    public static Vector4 op_Division(Vector4 value, Vector4 scale);
    public static Vector4 op_Division(Vector4 value, float scale);
    public static Vector4 op_Division(float scale, Vector4 value);
    public static bool op_Equality(Vector4 left, Vector4 right);
    public static Vector2 op_Explicit(Vector4 value);
    public static Vector3 op_Explicit(Vector4 value);
    public static bool op_Inequality(Vector4 left, Vector4 right);
    public static Vector4 op_Multiply(Vector4 left, Vector4 right);
    public static Vector4 op_Multiply(Vector4 value, float scale);
    public static Vector4 op_Multiply(float scale, Vector4 value);
    public static Vector4 op_Subtraction(Vector4 left, Vector4 right);
    public static Vector4 op_Subtraction(Vector4 value, float scalar);
    public static Vector4 op_Subtraction(float scalar, Vector4 value);
    public static Vector4 op_UnaryNegation(Vector4 value);
    public static Vector4 op_UnaryPlus(Vector4 value);
    public static void Orthogonalize(Vector4[] destination, Vector4[] source);
    public static void Orthonormalize(Vector4[] destination, Vector4[] source);
    public static Vector4 SmoothStep(Vector4 start, Vector4 end, float amount);
    public static void SmoothStep(Vector4& start, Vector4& end, float amount, Vector4& result);
    public static Vector4 Subtract(Vector4 left, Vector4 right);
    public static Vector4 Subtract(Vector4 left, float right);
    public static void Subtract(Vector4& left, Vector4& right, Vector4& result);
    public static void Subtract(Vector4& left, Single& right, Vector4& result);
    public static Vector4 Subtract(float left, Vector4 right);
    public static void Subtract(Single& left, Vector4& right, Vector4& result);
    public Single[] ToArray();
    public virtual string ToString();
    public string ToString(IFormatProvider formatProvider);
    public string ToString(string format);
    public sealed virtual string ToString(string format, IFormatProvider formatProvider);
    public static Vector4 Transform(Vector4 vector, Matrix transform);
    public static Vector4 Transform(Vector4 vector, Quaternion rotation);
    public static void Transform(Vector4& vector, Matrix& transform, Vector4& result);
    public static void Transform(Vector4& vector, Quaternion& rotation, Vector4& result);
    public static void Transform(Vector4[] source, Matrix& transform, Vector4[] destination);
    public static void Transform(Vector4[] source, Quaternion& rotation, Vector4[] destination);
}
public class CitizenFX.Core.Vehicle : Entity {
    public Vehicle(int handle);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
