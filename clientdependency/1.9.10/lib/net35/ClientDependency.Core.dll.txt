public class ClientDependency.Core.BaseLoader : object {
    [CompilerGeneratedAttribute]
private HttpContextBase <CurrentContext>k__BackingField;
    [CompilerGeneratedAttribute]
private BaseFileRegistrationProvider <Provider>k__BackingField;
    internal List`1<ProviderDependencyList> Dependencies;
    internal HashSet`1<IClientDependencyPath> Paths;
    private List`1<BundleDefinition> _registeredBundles;
    protected HttpContextBase CurrentContext { get; private set; }
    public BaseFileRegistrationProvider Provider { get; public set; }
    public BaseLoader(HttpContextBase http);
    [CompilerGeneratedAttribute]
protected HttpContextBase get_CurrentContext();
    [CompilerGeneratedAttribute]
private void set_CurrentContext(HttpContextBase value);
    [CompilerGeneratedAttribute]
public BaseFileRegistrationProvider get_Provider();
    [CompilerGeneratedAttribute]
public void set_Provider(BaseFileRegistrationProvider value);
    public BaseLoader AddPath(string pathNameAlias, string path);
    public BaseLoader AddPath(IClientDependencyPath path);
    public void RegisterClientDependencies(BaseFileRegistrationProvider provider, IEnumerable`1<IClientDependencyFile> dependencies, IEnumerable`1<IClientDependencyPath> paths, ProviderCollection currProviders);
    public void RegisterClientDependencies(List`1<IClientDependencyFile> dependencies, IClientDependencyPath[] paths);
    public void RegisterClientDependencies(List`1<IClientDependencyFile> dependencies, IEnumerable`1<IClientDependencyPath> paths);
    public void RegisterDependency(IClientDependencyFile file);
    public void RegisterDependency(IClientDependencyFile file, object htmlAttributes);
    public void RegisterDependency(string filePath, ClientDependencyType type);
    public void RegisterDependency(string filePath, ClientDependencyType type, object htmlAttributes);
    public void RegisterDependency(int priority, string filePath, ClientDependencyType type);
    public void RegisterDependency(int group, int priority, string filePath, ClientDependencyType type);
    public void RegisterDependency(int priority, string filePath, ClientDependencyType type, object htmlAttributes);
    public void RegisterDependency(int group, int priority, string filePath, ClientDependencyType type, object htmlAttributes);
    public void RegisterDependency(string filePath, string pathNameAlias, ClientDependencyType type);
    public void RegisterDependency(string filePath, string pathNameAlias, ClientDependencyType type, object htmlAttributes);
    public void RegisterDependency(int priority, string filePath, string pathNameAlias, ClientDependencyType type);
    public void RegisterDependency(int priority, string filePath, string pathNameAlias, ClientDependencyType type, object htmlAttributes);
    public void RegisterDependency(int group, int priority, string filePath, string pathNameAlias, ClientDependencyType type);
    [ObsoleteAttribute("Use the overloaded RegisterDependency method instead")]
public void RegisterDependencyWithProvider(int group, int priority, string filePath, string pathNameAlias, ClientDependencyType type, string provider);
    public void RegisterDependency(int group, int priority, string filePath, string pathNameAlias, ClientDependencyType type, string provider);
    public void RegisterDependency(int group, int priority, string filePath, string pathNameAlias, ClientDependencyType type, string provider, bool forceBundle);
    public void RegisterDependency(int group, int priority, string filePath, string pathNameAlias, ClientDependencyType type, object htmlAttributes);
    public void RegisterDependency(int group, int priority, string filePath, string pathNameAlias, ClientDependencyType type, object htmlAttributes, string provider);
    public void RegisterDependency(int group, int priority, string filePath, string pathNameAlias, ClientDependencyType type, object htmlAttributes, string provider, bool forceBundle);
    internal void EnsureJsBundleRegistered(string bundleName);
    internal void EnsureCssBundleRegistered(string bundleName);
    private void EnsureBundleRegistered(BundleResult result);
}
[DebuggerDisplayAttribute("Type: {DependencyType}, File: {FilePath}")]
public class ClientDependency.Core.BasicFile : object {
    [CompilerGeneratedAttribute]
private string <FilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private ClientDependencyType <DependencyType>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Priority>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Group>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PathNameAlias>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ForceProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ForceBundle>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <HtmlAttributes>k__BackingField;
    public string FilePath { get; public set; }
    public ClientDependencyType DependencyType { get; private set; }
    public int Priority { get; public set; }
    public int Group { get; public set; }
    public string PathNameAlias { get; public set; }
    public string ForceProvider { get; public set; }
    public bool ForceBundle { get; public set; }
    public IDictionary`2<string, string> HtmlAttributes { get; private set; }
    public BasicFile(ClientDependencyType type);
    [CompilerGeneratedAttribute]
public sealed virtual string get_FilePath();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FilePath(string value);
    [CompilerGeneratedAttribute]
public sealed virtual ClientDependencyType get_DependencyType();
    [CompilerGeneratedAttribute]
private void set_DependencyType(ClientDependencyType value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Priority();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Priority(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Group();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Group(int value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_PathNameAlias();
    [CompilerGeneratedAttribute]
public sealed virtual void set_PathNameAlias(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ForceProvider();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ForceProvider(string value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ForceBundle();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ForceBundle(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<string, string> get_HtmlAttributes();
    [CompilerGeneratedAttribute]
private void set_HtmlAttributes(IDictionary`2<string, string> value);
    protected bool Equals(BasicFile other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class ClientDependency.Core.BasicPath : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ForceBundle>k__BackingField;
    public string Name { get; public set; }
    public string Path { get; public set; }
    public bool ForceBundle { get; public set; }
    public BasicPath(string name, string path);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Path();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Path(string value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ForceBundle();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ForceBundle(bool value);
    protected bool Equals(BasicPath other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal class ClientDependency.Core.BundleDefinition : object {
    [CompilerGeneratedAttribute]
private ClientDependencyType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public ClientDependencyType Type { get; private set; }
    public string Name { get; private set; }
    public BundleDefinition(ClientDependencyType type, string name);
    [CompilerGeneratedAttribute]
public ClientDependencyType get_Type();
    [CompilerGeneratedAttribute]
private void set_Type(ClientDependencyType value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    protected bool Equals(BundleDefinition other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public static class ClientDependency.Core.BundleManager : object {
    [CompilerGeneratedAttribute]
private static Func`1<HttpContextBase> <GetHttpContextDelegate>k__BackingField;
    private static Dictionary`2<BundleDefinition, IEnumerable`1<IClientDependencyFile>> Bundles;
    private static object DictionaryLocker;
    internal static Func`1<HttpContextBase> GetHttpContextDelegate { get; internal set; }
    private static BundleManager();
    [CompilerGeneratedAttribute]
internal static Func`1<HttpContextBase> get_GetHttpContextDelegate();
    [CompilerGeneratedAttribute]
internal static void set_GetHttpContextDelegate(Func`1<HttpContextBase> value);
    internal static void ClearBundles();
    internal static IDictionary`2<BundleDefinition, IEnumerable`1<IClientDependencyFile>> GetBundles();
    internal static IDictionary`2<BundleDefinition, IEnumerable`1<IClientDependencyFile>> GetCssBundles();
    internal static BundleResult GetCssBundle(string bundleName);
    internal static IDictionary`2<BundleDefinition, IEnumerable`1<IClientDependencyFile>> GetJsBundles();
    internal static BundleResult GetJsBundle(string bundleName);
    public static void CreateCssBundle(string name, CssFile[] files);
    public static void CreateCssBundle(string name, int priority, CssFile[] files);
    public static void CreateCssBundle(string name, int priority, int group, CssFile[] files);
    public static void CreateJsBundle(string name, JavascriptFile[] files);
    public static void CreateJsBundle(string name, int priority, JavascriptFile[] files);
    public static void CreateJsBundle(string name, int priority, int group, JavascriptFile[] files);
    private static IEnumerable`1<IClientDependencyFile> OrderFiles(IList`1<IClientDependencyFile> files);
}
internal class ClientDependency.Core.BundleResult : object {
    [CompilerGeneratedAttribute]
private BundleDefinition <Definition>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<IClientDependencyFile> <Files>k__BackingField;
    public BundleDefinition Definition { get; public set; }
    public IEnumerable`1<IClientDependencyFile> Files { get; public set; }
    [CompilerGeneratedAttribute]
public BundleDefinition get_Definition();
    [CompilerGeneratedAttribute]
public void set_Definition(BundleDefinition value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<IClientDependencyFile> get_Files();
    [CompilerGeneratedAttribute]
public void set_Files(IEnumerable`1<IClientDependencyFile> value);
}
[AttributeUsageAttribute("4")]
public class ClientDependency.Core.ClientDependencyAttribute : Attribute {
    [CompilerGeneratedAttribute]
private int <Priority>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Group>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ForceProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ForceBundle>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PathNameAlias>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HtmlAttributesAsString>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <HtmlAttributes>k__BackingField;
    [CompilerGeneratedAttribute]
private ClientDependencyType <DependencyType>k__BackingField;
    public int Priority { get; public set; }
    public int Group { get; public set; }
    public string ForceProvider { get; public set; }
    public bool ForceBundle { get; public set; }
    public string FilePath { get; public set; }
    public string PathNameAlias { get; public set; }
    public string HtmlAttributesAsString { get; public set; }
    public IDictionary`2<string, string> HtmlAttributes { get; private set; }
    public ClientDependencyType DependencyType { get; public set; }
    public ClientDependencyAttribute(ClientDependencyType dependencyType, string fullFilePath);
    public ClientDependencyAttribute(ClientDependencyType dependencyType, string fileName, string pathNameAlias);
    public ClientDependencyAttribute(int priority, ClientDependencyType dependencyType, string fullFilePath);
    public ClientDependencyAttribute(int priority, ClientDependencyType dependencyType, string fileName, string pathNameAlias);
    public ClientDependencyAttribute(int group, int priority, ClientDependencyType dependencyType, string fileName, string pathNameAlias, bool forceBundle);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Priority();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Priority(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Group();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Group(int value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ForceProvider();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ForceProvider(string value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ForceBundle();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ForceBundle(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_FilePath();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FilePath(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_PathNameAlias();
    [CompilerGeneratedAttribute]
public sealed virtual void set_PathNameAlias(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_HtmlAttributesAsString();
    [CompilerGeneratedAttribute]
public sealed virtual void set_HtmlAttributesAsString(string value);
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<string, string> get_HtmlAttributes();
    [CompilerGeneratedAttribute]
private void set_HtmlAttributes(IDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public sealed virtual ClientDependencyType get_DependencyType();
    [CompilerGeneratedAttribute]
public void set_DependencyType(ClientDependencyType value);
    protected bool Equals(ClientDependencyAttribute other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[ExtensionAttribute]
public static class ClientDependency.Core.ClientDependencyFileExtensions : object {
    [ExtensionAttribute]
public static string ResolveFilePath(IClientDependencyFile file, HttpContextBase http);
}
[ExtensionAttribute]
public static class ClientDependency.Core.ClientDependencyPathExtensions : object {
    [ExtensionAttribute]
public static string ResolvePath(IClientDependencyPath path, HttpContextBase http);
}
public enum ClientDependency.Core.ClientDependencyType : Enum {
    public int value__;
    public static ClientDependencyType Javascript;
    public static ClientDependencyType Css;
}
public class ClientDependency.Core.CompositeFiles.CompositeDependencyHandler : object {
    private static object Lock;
    public static int MaxHandlerUrlLength;
    private bool System.Web.IHttpHandler.IsReusable { get; }
    private static CompositeDependencyHandler();
    private sealed virtual override bool System.Web.IHttpHandler.get_IsReusable();
    private bool ValidateRequest(HttpContext context, String& fileKey, ClientDependencyType& type, Int32& version);
    private sealed virtual override void System.Web.IHttpHandler.ProcessRequest(HttpContext context);
    private Byte[] ProcessRequestInternal(HttpContextBase context, string fileset, ClientDependencyType type, int version, Byte[] outputBytes, OutputCachedPage page, Boolean& success);
    private ClientDependencyType ValidateTypeFromFileNames(HttpContextBase context, ClientDependencyType type, String[] filePaths);
    private Byte[] GetCombinedFiles(HttpContextBase context, string fileset, ClientDependencyType type, List`1& fDefs);
    private void ProcessFromFile(HttpContextBase context, CompositeFileMap map, String& compositeFileName, Byte[]& outputBytes);
    private void SetCaching(HttpContextBase context, string fileName, string fileset, CompressionType compressionType, OutputCachedPage page);
}
public class ClientDependency.Core.CompositeFiles.CompositeFileDefinition : object {
    [CompilerGeneratedAttribute]
private bool <IsLocalFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Uri>k__BackingField;
    public bool IsLocalFile { get; public set; }
    public string Uri { get; public set; }
    public CompositeFileDefinition(string uri, bool isLocalFile);
    [CompilerGeneratedAttribute]
public bool get_IsLocalFile();
    [CompilerGeneratedAttribute]
public void set_IsLocalFile(bool value);
    [CompilerGeneratedAttribute]
public string get_Uri();
    [CompilerGeneratedAttribute]
public void set_Uri(string value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class ClientDependency.Core.CompositeFiles.CompositeFileMap : object {
    [CompilerGeneratedAttribute]
private string <FileKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CompositeFileName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CompressionType>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <DependentFiles>k__BackingField;
    private Byte[] m_FileBytes;
    public string FileKey { get; private set; }
    public string CompositeFileName { get; private set; }
    public string CompressionType { get; private set; }
    public int Version { get; private set; }
    public IEnumerable`1<string> DependentFiles { get; private set; }
    public bool HasFileBytes { get; }
    public CompositeFileMap(string key, string compressionType, string file, IEnumerable`1<string> filePaths, int version);
    [CompilerGeneratedAttribute]
public string get_FileKey();
    [CompilerGeneratedAttribute]
private void set_FileKey(string value);
    [CompilerGeneratedAttribute]
public string get_CompositeFileName();
    [CompilerGeneratedAttribute]
private void set_CompositeFileName(string value);
    [CompilerGeneratedAttribute]
public string get_CompressionType();
    [CompilerGeneratedAttribute]
private void set_CompressionType(string value);
    [CompilerGeneratedAttribute]
public int get_Version();
    [CompilerGeneratedAttribute]
private void set_Version(int value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_DependentFiles();
    [CompilerGeneratedAttribute]
private void set_DependentFiles(IEnumerable`1<string> value);
    public bool get_HasFileBytes();
    public Byte[] GetCompositeFileBytes();
}
[ObsoleteAttribute("Use CssHelper instead")]
public class ClientDependency.Core.CompositeFiles.CssMin : object {
    public static string CompressCSS(string body);
}
public class ClientDependency.Core.CompositeFiles.CssMinifier : object {
    private static int Eof;
    private TextReader _tr;
    private StringBuilder _sb;
    private bool _inSelector;
    private int _theA;
    private int _theB;
    private int _theLookahead;
    public string Minify(TextReader reader);
    private void ExecuteCssMin();
    private void Action(int d);
    private int Next();
    private int Peek();
    private int Get();
    private void Put(int c);
}
public class ClientDependency.Core.CompositeFiles.DefaultFileWriter : object {
    private static String[] MinifiedExtensions;
    private static DefaultFileWriter();
    public sealed virtual bool WriteToStream(BaseCompositeFileProcessingProvider provider, StreamWriter sw, FileInfo fi, ClientDependencyType type, string origUrl, HttpContextBase http);
    public static void WriteContentToStream(BaseCompositeFileProcessingProvider provider, StreamWriter sw, string content, ClientDependencyType type, HttpContextBase context, string originalUrl);
    public static void WriteContentToStream(BaseCompositeFileProcessingProvider provider, StreamWriter sw, Stream stream, ClientDependencyType type, HttpContextBase context, string originalUrl);
    public static void WriteContentToStream(BaseCompositeFileProcessingProvider provider, StreamWriter sw, FileInfo inputFile, ClientDependencyType type, HttpContextBase context, string originalUrl);
    private static void WriteContentToStream(BaseCompositeFileProcessingProvider provider, StreamWriter sw, FileInfo inputFile, Stream stream, ClientDependencyType type, HttpContextBase context, string originalUrl);
    private static string GetMinifiedOutput(BaseCompositeFileProcessingProvider provider, ClientDependencyType type, FileInfo inputFile, Stream inputStream);
    private static bool ShouldMinify(FileInfo inputFile);
}
public interface ClientDependency.Core.CompositeFiles.IFileWriter {
    public abstract virtual bool WriteToStream(BaseCompositeFileProcessingProvider provider, StreamWriter sw, FileInfo fi, ClientDependencyType type, string origUrl, HttpContextBase http);
}
public interface ClientDependency.Core.CompositeFiles.IVirtualFile {
    public string Path { get; }
    public abstract virtual string get_Path();
    public abstract virtual Stream Open();
}
public interface ClientDependency.Core.CompositeFiles.IVirtualFileProvider {
    public abstract virtual bool FileExists(string virtualPath);
    public abstract virtual IVirtualFile GetFile(string virtualPath);
}
public interface ClientDependency.Core.CompositeFiles.IVirtualFileWriter {
    public IVirtualFileProvider FileProvider { get; }
    public abstract virtual IVirtualFileProvider get_FileProvider();
    public abstract virtual bool WriteToStream(BaseCompositeFileProcessingProvider provider, StreamWriter sw, IVirtualFile vf, ClientDependencyType type, string origUrl, HttpContextBase http);
}
public class ClientDependency.Core.CompositeFiles.JSMin : object {
    private static int Eof;
    private TextReader _sr;
    private TextWriter _sw;
    private int _theA;
    private int _theB;
    private int _theLookahead;
    private int _theX;
    private int _theY;
    private int _retStatement;
    private bool _start;
    [ObsoleteAttribute("Use the overloads specifying a Stream instead")]
public static string CompressJS(string body);
    public static string CompressJS(Stream stream);
    [ObsoleteAttribute("Use the overloads specifying a TextReader instead")]
public string Minify(string src);
    public string Minify(TextReader reader);
    private void ExecuteJsMin();
    private void Action(int d);
    private bool HandleUnaryOperator();
    private bool TrackReturnStatement();
    private bool HandleEndOfStatement();
    private bool HandleStringLiteral();
    private void HandleStringTemplateBlock();
    private bool HandleRegexLiteral();
    private int NextCharExcludingComments();
    private int Peek();
    private int Get(bool replaceCr);
    private void Put(int c);
    private bool IsAlphanum(int c);
    private bool IsLineSeparator(int c);
}
public abstract class ClientDependency.Core.CompositeFiles.Providers.BaseCompositeFileProcessingProvider : ProviderBase {
    private static bool _dynamicallyConfiguredPath;
    private static string _compositeFilePathDefaultFolder;
    public static CompositeUrlType UrlTypeDefault;
    [CompilerGeneratedAttribute]
private string <CompositeFilePathFolder>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PersistCompositeFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableCssMinify>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableJsMinify>k__BackingField;
    [CompilerGeneratedAttribute]
private CompositeUrlType <UrlType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PathBasedUrlFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private DirectoryInfo <CompositeFilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <BundleDomains>k__BackingField;
    public static string CompositeFilePathDefaultFolder { get; public set; }
    public string CompositeFilePathFolder { get; private set; }
    public bool PersistCompositeFiles { get; public set; }
    public bool EnableCssMinify { get; public set; }
    public bool EnableJsMinify { get; public set; }
    public CompositeUrlType UrlType { get; protected set; }
    public string PathBasedUrlFormat { get; protected set; }
    public DirectoryInfo CompositeFilePath { get; protected set; }
    public IList`1<string> BundleDomains { get; protected set; }
    private static BaseCompositeFileProcessingProvider();
    public static string get_CompositeFilePathDefaultFolder();
    public static void set_CompositeFilePathDefaultFolder(string value);
    [CompilerGeneratedAttribute]
public string get_CompositeFilePathFolder();
    [CompilerGeneratedAttribute]
private void set_CompositeFilePathFolder(string value);
    [CompilerGeneratedAttribute]
public bool get_PersistCompositeFiles();
    [CompilerGeneratedAttribute]
public void set_PersistCompositeFiles(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableCssMinify();
    [CompilerGeneratedAttribute]
public void set_EnableCssMinify(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableJsMinify();
    [CompilerGeneratedAttribute]
public void set_EnableJsMinify(bool value);
    [CompilerGeneratedAttribute]
public CompositeUrlType get_UrlType();
    [CompilerGeneratedAttribute]
protected void set_UrlType(CompositeUrlType value);
    [CompilerGeneratedAttribute]
public string get_PathBasedUrlFormat();
    [CompilerGeneratedAttribute]
protected void set_PathBasedUrlFormat(string value);
    [CompilerGeneratedAttribute]
public DirectoryInfo get_CompositeFilePath();
    [CompilerGeneratedAttribute]
protected void set_CompositeFilePath(DirectoryInfo value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_BundleDomains();
    [CompilerGeneratedAttribute]
protected void set_BundleDomains(IList`1<string> value);
    public sealed virtual void Initialize(HttpContextBase http);
    public abstract virtual FileInfo SaveCompositeFile(Byte[] fileContents, ClientDependencyType type, HttpServerUtilityBase server);
    public abstract virtual Byte[] CombineFiles(String[] filePaths, HttpContextBase context, ClientDependencyType type, List`1& fileDefs);
    public abstract virtual Byte[] CompressBytes(CompressionType type, Byte[] fileBytes);
    protected bool CanProcessLocally(HttpContextBase context, string filePath, IVirtualFileWriter& virtualFileWriter);
    protected virtual VirtualFile GetVirtualFile(HttpContextBase context, string filePath);
    public CompositeFileDefinition WritePathToStream(ClientDependencyType type, string path, HttpContextBase context, StreamWriter sw);
    protected virtual CompositeFileDefinition WriteFileToStream(StreamWriter sw, string url, ClientDependencyType type, HttpContextBase http);
    protected virtual CompositeFileDefinition WriteFileToStream(StreamWriter sw, FileInfo fi, ClientDependencyType type, string origUrl, HttpContextBase http);
    protected virtual CompositeFileDefinition WriteVirtualFileToStream(StreamWriter sw, IVirtualFile vf, IVirtualFileWriter virtualWriter, ClientDependencyType type, HttpContextBase http);
    public virtual String[] ProcessCompositeList(IEnumerable`1<IClientDependencyFile> dependencies, ClientDependencyType type, HttpContextBase http);
    internal IEnumerable`1<string> GetCompositeFileUrls(ClientDependencyType type, IClientDependencyFile[] dependencies, string compositeFileHandlerPath, HttpContextBase http, int maxLength, int version);
    public virtual String[] ProcessCompositeList(IEnumerable`1<IClientDependencyFile> dependencies, ClientDependencyType type, HttpContextBase http, string compositeFileHandlerPath);
    public virtual string GetCompositeFileUrl(string fileKey, ClientDependencyType type, HttpContextBase http, CompositeUrlType urlType, string compositeFileHandlerPath, int version);
    public virtual void Initialize(string name, NameValueCollection config);
    public virtual string MinifyFile(string fileContents, ClientDependencyType type);
    internal static string StreamToString(Stream stream);
    public virtual string MinifyFile(Stream fileStream, ClientDependencyType type);
    protected virtual string ParseCssFilePaths(string fileContents, ClientDependencyType type, string url, HttpContextBase http);
    [ObsoleteAttribute("This is no longer used in the codebase and will be removed in future versions")]
protected bool TryReadUri(string url, String& requestContents, HttpContextBase http);
}
public abstract class ClientDependency.Core.CompositeFiles.Providers.BaseFileMapProvider : ProviderBase {
    public abstract virtual CompositeFileMap GetCompositeFile(string fileKey, int version, string compression);
    public abstract virtual IEnumerable`1<string> GetDependentFiles(string fileKey, int version);
    public abstract virtual void CreateUpdateMap(string fileKey, string compressionType, IEnumerable`1<IClientDependencyFile> dependentFiles, string compositeFile, int version);
    public abstract virtual string CreateNewMap(HttpContextBase http, IEnumerable`1<IClientDependencyFile> dependentFiles, int version);
    public abstract virtual void Initialize(HttpContextBase http);
}
public class ClientDependency.Core.CompositeFiles.Providers.CompositeFileProcessingProvider : BaseCompositeFileProcessingProvider {
    public static string DefaultName;
    public virtual FileInfo SaveCompositeFile(Byte[] fileContents, ClientDependencyType type, HttpServerUtilityBase server);
    public virtual Byte[] CombineFiles(String[] filePaths, HttpContextBase context, ClientDependencyType type, List`1& fileDefs);
    public virtual Byte[] CompressBytes(CompressionType type, Byte[] fileBytes);
    [ObsoleteAttribute("Use the equivalent method without the 'ref' parameters")]
[EditorBrowsableAttribute("1")]
protected virtual void WriteFileToStream(StreamWriter& sw, string url, ClientDependencyType type, List`1& fileDefs, HttpContextBase http);
    [ObsoleteAttribute("Use the equivalent method without the 'ref' parameters")]
[EditorBrowsableAttribute("1")]
protected virtual void WriteFileToStream(StreamWriter& sw, FileInfo fi, ClientDependencyType type, string origUrl, List`1& fileDefs, HttpContextBase http);
}
[DefaultMemberAttribute("Item")]
public class ClientDependency.Core.CompositeFiles.Providers.CompositeFileProcessingProviderCollection : ProviderCollection {
    public BaseCompositeFileProcessingProvider Item { get; }
    public BaseCompositeFileProcessingProvider get_Item(string name);
    public virtual void Add(ProviderBase provider);
}
public enum ClientDependency.Core.CompositeFiles.Providers.CompositeUrlType : Enum {
    public int value__;
    public static CompositeUrlType Base64QueryStrings;
    public static CompositeUrlType Base64Paths;
    public static CompositeUrlType MappedId;
}
[DefaultMemberAttribute("Item")]
public class ClientDependency.Core.CompositeFiles.Providers.FileMapProviderCollection : ProviderCollection {
    public BaseFileMapProvider Item { get; }
    public BaseFileMapProvider get_Item(string name);
    public virtual void Add(ProviderBase provider);
}
internal static class ClientDependency.Core.CompositeFiles.Providers.PathBasedUrlFormatter : object {
    public static bool Parse(string pathBasedUrlFormat, string path, String& fileKey, ClientDependencyType& type, Int32& version);
    public static string CreatePath(string pathBasedUrlFormat, string fileKey, ClientDependencyType type, int version);
    public static void Validate(string pathBasedUrl);
}
public class ClientDependency.Core.CompositeFiles.Providers.XmlFileMapper : BaseFileMapProvider {
    public static string DefaultName;
    private static string MapFileName;
    private static string DefaultFileMapFolder;
    private XDocument _doc;
    private FileInfo _xmlFile;
    private static object Locker;
    private static string _fileMapFolder;
    private static bool _dynamicallyConfiguredPath;
    [ObsoleteAttribute("Use FileMapDefaultFolder instead")]
[EditorBrowsableAttribute("1")]
public static string FileMapVirtualFolder;
    [CompilerGeneratedAttribute]
private string <FileMapFolder>k__BackingField;
    private DirectoryInfo _xmlMapFolder;
    public static string FileMapDefaultFolder { get; public set; }
    public string FileMapFolder { get; private set; }
    private static XmlFileMapper();
    public static string get_FileMapDefaultFolder();
    public static void set_FileMapDefaultFolder(string value);
    [CompilerGeneratedAttribute]
public string get_FileMapFolder();
    [CompilerGeneratedAttribute]
private void set_FileMapFolder(string value);
    public virtual void Initialize(HttpContextBase http);
    public virtual void Initialize(string name, NameValueCollection config);
    public virtual CompositeFileMap GetCompositeFile(string fileKey, int version, string compression);
    public virtual IEnumerable`1<string> GetDependentFiles(string fileKey, int version);
    public virtual string CreateNewMap(HttpContextBase http, IEnumerable`1<IClientDependencyFile> dependentFiles, int version);
    public virtual void CreateUpdateMap(string fileKey, string compressionType, IEnumerable`1<IClientDependencyFile> dependentFiles, string compositeFile, int version);
    private XElement FindItem(string key, int version, string compression);
    private XElement FindItem(string key, int version);
    private XElement CreateFileNode(IEnumerable`1<IClientDependencyFile> dependentFiles);
    private string GetXmlMapPath();
    private void CreateNewXmlFile();
    private void EnsureXmlFile();
}
public enum ClientDependency.Core.CompressionType : Enum {
    public int value__;
    public static CompressionType deflate;
    public static CompressionType gzip;
    public static CompressionType none;
}
public class ClientDependency.Core.Config.ClientDependencySection : ConfigurationSection {
    private ProviderSettingsCollection _filters;
    [ConfigurationPropertyAttribute("version")]
public int Version { get; public set; }
    [ConfigurationPropertyAttribute("machineName")]
public string MachineName { get; public set; }
    [ConfigurationPropertyAttribute("compositeFiles")]
public CompositeFileSection CompositeFileElement { get; }
    [ConfigurationPropertyAttribute("fileRegistration")]
public FileRegistrationSection FileRegistrationElement { get; }
    [ConfigurationPropertyAttribute("mvc")]
public MvcSection MvcElement { get; }
    [ConfigurationPropertyAttribute("loggerType")]
public string LoggerType { get; }
    [ConfigurationPropertyAttribute("filters")]
public ProviderSettingsCollection Filters { get; }
    [ConfigurationPropertyAttribute("fileDependencyExtensions")]
public string FileBasedDepdendenyExtensions { get; public set; }
    [ConfigurationPropertyAttribute("htmlCompatibility")]
public string HtmlCompatibility { get; public set; }
    [ObsoleteAttribute("Use the built in .Net CryptoConfig.AllowOnlyFipsAlgorithms")]
[ConfigurationPropertyAttribute("allowOnlyFipsAlgorithms")]
public bool AllowOnlyFipsAlgorithms { get; public set; }
    public IEnumerable`1<string> FileBasedDependencyExtensionList { get; }
    public int get_Version();
    public void set_Version(int value);
    public string get_MachineName();
    public void set_MachineName(string value);
    public CompositeFileSection get_CompositeFileElement();
    public FileRegistrationSection get_FileRegistrationElement();
    public MvcSection get_MvcElement();
    public string get_LoggerType();
    public ProviderSettingsCollection get_Filters();
    public string get_FileBasedDepdendenyExtensions();
    public void set_FileBasedDepdendenyExtensions(string value);
    public string get_HtmlCompatibility();
    public void set_HtmlCompatibility(string value);
    public bool get_AllowOnlyFipsAlgorithms();
    public void set_AllowOnlyFipsAlgorithms(bool value);
    public IEnumerable`1<string> get_FileBasedDependencyExtensionList();
}
public class ClientDependency.Core.Config.ClientDependencySettings : object {
    private static ClientDependencySettings modreq(System.Runtime.CompilerServices.IsVolatile) _settings;
    private static object Lock;
    private static Action _loadProviders;
    private ClientDependencySection _configSection;
    private List`1<string> _fileBasedDependencyExtensionList;
    private Nullable`1<bool> _allowOnlyFipsAlgorithms;
    private Nullable`1<int> _version;
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private int <OutputCacheDays>k__BackingField;
    [CompilerGeneratedAttribute]
private BaseRenderer <DefaultMvcRenderer>k__BackingField;
    [CompilerGeneratedAttribute]
private RendererCollection <MvcRendererCollection>k__BackingField;
    [CompilerGeneratedAttribute]
private WebFormsFileRegistrationProvider <DefaultFileRegistrationProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private FileRegistrationProviderCollection <FileRegistrationProviderCollection>k__BackingField;
    [CompilerGeneratedAttribute]
private BaseCompositeFileProcessingProvider <DefaultCompositeFileProcessingProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private CompositeFileProcessingProviderCollection <CompositeFileProcessingProviderCollection>k__BackingField;
    [CompilerGeneratedAttribute]
private BaseFileMapProvider <DefaultFileMapProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private FileMapProviderCollection <FileMapProviderCollection>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CompositeFileHandlerPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HtmlCompatibility>k__BackingField;
    public static ClientDependencySettings Instance { get; }
    public ClientDependencySection ConfigSection { get; internal set; }
    public List`1<string> FileBasedDependencyExtensionList { get; public set; }
    [ObsoleteAttribute("Use the built in .Net CryptoConfig.AllowOnlyFipsAlgorithms")]
public bool AllowOnlyFipsAlgorithms { get; public set; }
    public int Version { get; public set; }
    public ILogger Logger { get; private set; }
    public int OutputCacheDays { get; public set; }
    public BaseRenderer DefaultMvcRenderer { get; private set; }
    public RendererCollection MvcRendererCollection { get; private set; }
    public WebFormsFileRegistrationProvider DefaultFileRegistrationProvider { get; private set; }
    public FileRegistrationProviderCollection FileRegistrationProviderCollection { get; private set; }
    public BaseCompositeFileProcessingProvider DefaultCompositeFileProcessingProvider { get; private set; }
    public CompositeFileProcessingProviderCollection CompositeFileProcessingProviderCollection { get; private set; }
    public BaseFileMapProvider DefaultFileMapProvider { get; private set; }
    public FileMapProviderCollection FileMapProviderCollection { get; private set; }
    public string CompositeFileHandlerPath { get; public set; }
    public string HtmlCompatibility { get; public set; }
    internal ClientDependencySettings(FileSystemInfo configFile, HttpContextBase ctx);
    internal ClientDependencySettings(ClientDependencySection section, HttpContextBase ctx);
    private static ClientDependencySettings();
    public static ClientDependencySettings get_Instance();
    internal static ClientDependencySection GetDefaultSection();
    public ClientDependencySection get_ConfigSection();
    internal void set_ConfigSection(ClientDependencySection value);
    public List`1<string> get_FileBasedDependencyExtensionList();
    public void set_FileBasedDependencyExtensionList(List`1<string> value);
    public bool get_AllowOnlyFipsAlgorithms();
    public void set_AllowOnlyFipsAlgorithms(bool value);
    public int get_Version();
    public void set_Version(int value);
    [CompilerGeneratedAttribute]
public ILogger get_Logger();
    [CompilerGeneratedAttribute]
private void set_Logger(ILogger value);
    [CompilerGeneratedAttribute]
public int get_OutputCacheDays();
    [CompilerGeneratedAttribute]
public void set_OutputCacheDays(int value);
    [CompilerGeneratedAttribute]
public BaseRenderer get_DefaultMvcRenderer();
    [CompilerGeneratedAttribute]
private void set_DefaultMvcRenderer(BaseRenderer value);
    [CompilerGeneratedAttribute]
public RendererCollection get_MvcRendererCollection();
    [CompilerGeneratedAttribute]
private void set_MvcRendererCollection(RendererCollection value);
    [CompilerGeneratedAttribute]
public WebFormsFileRegistrationProvider get_DefaultFileRegistrationProvider();
    [CompilerGeneratedAttribute]
private void set_DefaultFileRegistrationProvider(WebFormsFileRegistrationProvider value);
    [CompilerGeneratedAttribute]
public FileRegistrationProviderCollection get_FileRegistrationProviderCollection();
    [CompilerGeneratedAttribute]
private void set_FileRegistrationProviderCollection(FileRegistrationProviderCollection value);
    [CompilerGeneratedAttribute]
public BaseCompositeFileProcessingProvider get_DefaultCompositeFileProcessingProvider();
    [CompilerGeneratedAttribute]
private void set_DefaultCompositeFileProcessingProvider(BaseCompositeFileProcessingProvider value);
    [CompilerGeneratedAttribute]
public CompositeFileProcessingProviderCollection get_CompositeFileProcessingProviderCollection();
    [CompilerGeneratedAttribute]
private void set_CompositeFileProcessingProviderCollection(CompositeFileProcessingProviderCollection value);
    [CompilerGeneratedAttribute]
public BaseFileMapProvider get_DefaultFileMapProvider();
    [CompilerGeneratedAttribute]
private void set_DefaultFileMapProvider(BaseFileMapProvider value);
    [CompilerGeneratedAttribute]
public FileMapProviderCollection get_FileMapProviderCollection();
    [CompilerGeneratedAttribute]
private void set_FileMapProviderCollection(FileMapProviderCollection value);
    [CompilerGeneratedAttribute]
public string get_CompositeFileHandlerPath();
    [CompilerGeneratedAttribute]
public void set_CompositeFileHandlerPath(string value);
    [CompilerGeneratedAttribute]
public string get_HtmlCompatibility();
    [CompilerGeneratedAttribute]
public void set_HtmlCompatibility(string value);
    internal void LoadProviders(HttpContextBase http);
    private void LoadDefaultFileRegConfig(ClientDependencySection section);
    private void LoadDefaultFileMapConfig(ClientDependencySection section, HttpContextBase http);
    private void LoadDefaultCompositeFileConfig(ClientDependencySection section, HttpContextBase http);
    private void LoadDefaultMvcFileConfig(ClientDependencySection section);
    [CompilerGeneratedAttribute]
private void <.ctor>b__3_0();
}
public class ClientDependency.Core.Config.CompositeFileSection : ConfigurationElement {
    [ConfigurationPropertyAttribute("fileProcessingProviders")]
public ProviderSettingsCollection FileProcessingProviders { get; }
    [ObsoleteAttribute("Use FileProcessingProviders instead")]
[ConfigurationPropertyAttribute("providers")]
public ProviderSettingsCollection FileProcessingProvidersLegacy { get; }
    [ConfigurationPropertyAttribute("fileMapProviders")]
public ProviderSettingsCollection FileMapProviders { get; }
    [ConfigurationPropertyAttribute("outputCacheDays")]
public int OutputCacheDays { get; public set; }
    [StringValidatorAttribute]
[ConfigurationPropertyAttribute("defaultFileProcessingProvider")]
public string DefaultFileProcessingProvider { get; public set; }
    [ObsoleteAttribute("Use DefaultFileProcessingProvider instead")]
[ConfigurationPropertyAttribute("defaultProvider")]
public string DefaultFileProcessingProviderLegacy { get; public set; }
    [StringValidatorAttribute]
[ConfigurationPropertyAttribute("defaultFileMapProvider")]
public string DefaultFileMapProvider { get; public set; }
    [ConfigurationPropertyAttribute("compositeFileHandlerPath")]
public string CompositeFileHandlerPath { get; public set; }
    [ConfigurationPropertyAttribute("mimeTypeCompression")]
public MimeTypeCompressionCollection MimeTypeCompression { get; }
    [ConfigurationPropertyAttribute("rogueFileCompression")]
public RogueFileCompressionCollection RogueFileCompression { get; }
    public ProviderSettingsCollection get_FileProcessingProviders();
    public ProviderSettingsCollection get_FileProcessingProvidersLegacy();
    public ProviderSettingsCollection get_FileMapProviders();
    public int get_OutputCacheDays();
    public void set_OutputCacheDays(int value);
    public string get_DefaultFileProcessingProvider();
    public void set_DefaultFileProcessingProvider(string value);
    public string get_DefaultFileProcessingProviderLegacy();
    public void set_DefaultFileProcessingProviderLegacy(string value);
    public string get_DefaultFileMapProvider();
    public void set_DefaultFileMapProvider(string value);
    public string get_CompositeFileHandlerPath();
    public void set_CompositeFileHandlerPath(string value);
    public MimeTypeCompressionCollection get_MimeTypeCompression();
    public RogueFileCompressionCollection get_RogueFileCompression();
}
public class ClientDependency.Core.Config.FileRegistrationSection : ConfigurationElement {
    [ConfigurationPropertyAttribute("providers")]
public ProviderSettingsCollection Providers { get; }
    [StringValidatorAttribute]
[ConfigurationPropertyAttribute("defaultProvider")]
public string DefaultProvider { get; public set; }
    [ObsoleteAttribute("Use the ClientDependencySection.FileBasedDepdendenyExtensions instead")]
[ConfigurationPropertyAttribute("fileDependencyExtensions")]
public string FileBasedDependencyExtensions { get; public set; }
    [ObsoleteAttribute("Use the ClientDependencySection.FileBasedDependencyExtensionList instead")]
public IEnumerable`1<string> FileBasedDependencyExtensionList { get; }
    public ProviderSettingsCollection get_Providers();
    public string get_DefaultProvider();
    public void set_DefaultProvider(string value);
    public string get_FileBasedDependencyExtensions();
    public void set_FileBasedDependencyExtensions(string value);
    public IEnumerable`1<string> get_FileBasedDependencyExtensionList();
}
public class ClientDependency.Core.Config.MimeTypeCompressionCollection : ConfigurationElementCollection {
    protected bool ThrowOnDuplicate { get; }
    protected virtual bool get_ThrowOnDuplicate();
    protected virtual ConfigurationElement CreateNewElement();
    protected virtual object GetElementKey(ConfigurationElement element);
}
public class ClientDependency.Core.Config.MimeTypeCompressionElement : ConfigurationElement {
    [ConfigurationPropertyAttribute("type")]
public string MimeType { get; }
    [ConfigurationPropertyAttribute("path")]
public string FilePath { get; }
    public string get_MimeType();
    public string get_FilePath();
    public virtual int GetHashCode();
    public virtual bool Equals(object compareTo);
}
public class ClientDependency.Core.Config.MvcSection : ConfigurationElement {
    [ConfigurationPropertyAttribute("renderers")]
public ProviderSettingsCollection Renderers { get; }
    [StringValidatorAttribute]
[ConfigurationPropertyAttribute("defaultRenderer")]
public string DefaultRenderer { get; public set; }
    public ProviderSettingsCollection get_Renderers();
    public string get_DefaultRenderer();
    public void set_DefaultRenderer(string value);
}
public class ClientDependency.Core.Config.RogueFileCompressionCollection : ConfigurationElementCollection {
    protected bool ThrowOnDuplicate { get; }
    protected virtual bool get_ThrowOnDuplicate();
    protected virtual ConfigurationElement CreateNewElement();
    protected virtual object GetElementKey(ConfigurationElement element);
}
internal class ClientDependency.Core.Config.RogueFileCompressionElement : ConfigurationElement {
    [ConfigurationPropertyAttribute("compressJs")]
public bool CompressJs { get; }
    [ConfigurationPropertyAttribute("compressCss")]
public bool CompressCss { get; }
    [ConfigurationPropertyAttribute("path")]
public string FilePath { get; }
    [ConfigurationPropertyAttribute("jsExt")]
public string JsRequestExtension { get; }
    [ConfigurationPropertyAttribute("cssExt")]
public string CssRequestExtension { get; }
    [ConfigurationPropertyAttribute("exclusions")]
public RogueFileCompressionExcludeCollection ExcludePaths { get; }
    public bool get_CompressJs();
    public bool get_CompressCss();
    public string get_FilePath();
    public string get_JsRequestExtension();
    public string get_CssRequestExtension();
    public RogueFileCompressionExcludeCollection get_ExcludePaths();
    public virtual int GetHashCode();
}
public class ClientDependency.Core.Config.RogueFileCompressionExcludeCollection : ConfigurationElementCollection {
    protected bool ThrowOnDuplicate { get; }
    protected virtual bool get_ThrowOnDuplicate();
    protected virtual ConfigurationElement CreateNewElement();
    protected virtual object GetElementKey(ConfigurationElement element);
}
public class ClientDependency.Core.Config.RogueFileCompressionExcludeElement : ConfigurationElement {
    [ConfigurationPropertyAttribute("path")]
public string FilePath { get; }
    public string get_FilePath();
    public virtual int GetHashCode();
}
public static class ClientDependency.Core.Constants : object {
    public static int DefaultPriority;
    public static int DefaultGroup;
}
[ExtensionAttribute]
public static class ClientDependency.Core.ControlExtensions : object {
    [ExtensionAttribute]
public static IEnumerable`1<Control> FlattenChildren(Control control);
}
public abstract class ClientDependency.Core.Controls.ClientDependencyInclude : Control {
    [CompilerGeneratedAttribute]
private ClientDependencyType <DependencyType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PathNameAlias>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Priority>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Group>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ForceProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ForceBundle>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <HtmlAttributes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HtmlAttributesAsString>k__BackingField;
    public ClientDependencyType DependencyType { get; internal set; }
    public string FilePath { get; public set; }
    public string PathNameAlias { get; public set; }
    public int Priority { get; public set; }
    public int Group { get; public set; }
    public string ForceProvider { get; public set; }
    public bool ForceBundle { get; public set; }
    public IDictionary`2<string, string> HtmlAttributes { get; private set; }
    public string HtmlAttributesAsString { get; public set; }
    protected ClientDependencyInclude(IClientDependencyFile file);
    [CompilerGeneratedAttribute]
public sealed virtual ClientDependencyType get_DependencyType();
    [CompilerGeneratedAttribute]
internal void set_DependencyType(ClientDependencyType value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_FilePath();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FilePath(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_PathNameAlias();
    [CompilerGeneratedAttribute]
public sealed virtual void set_PathNameAlias(string value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Priority();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Priority(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Group();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Group(int value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ForceProvider();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ForceProvider(string value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ForceBundle();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ForceBundle(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<string, string> get_HtmlAttributes();
    [CompilerGeneratedAttribute]
private void set_HtmlAttributes(IDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_HtmlAttributesAsString();
    [CompilerGeneratedAttribute]
public sealed virtual void set_HtmlAttributesAsString(string value);
    protected virtual void OnPreRender(EventArgs e);
    protected bool Equals(ClientDependencyInclude other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[ParseChildrenAttribute("ClientDependency.Core.Controls.ClientDependencyPath")]
public class ClientDependency.Core.Controls.ClientDependencyLoader : Control {
    public static string ContextKey;
    private static object Locker;
    private BaseLoader _base;
    [CompilerGeneratedAttribute]
private ClientDependencyPathCollection <Paths>k__BackingField;
    public string ProviderName { get; public set; }
    [ObsoleteAttribute("Use the GetInstance() method instead to pass in an HttpContext object")]
public static ClientDependencyLoader Instance { get; }
    [PersistenceModeAttribute]
public ClientDependencyPathCollection Paths { get; private set; }
    private static ClientDependencyLoader();
    protected virtual void OnInit(EventArgs e);
    public string get_ProviderName();
    public void set_ProviderName(string value);
    public static ClientDependencyLoader get_Instance();
    public static ClientDependencyLoader GetInstance(HttpContextBase ctx);
    protected virtual void CreateChildControls();
    protected virtual void OnDataBinding(EventArgs e);
    protected virtual void OnPreRender(EventArgs e);
    private void RenderDependencies();
    [CompilerGeneratedAttribute]
public ClientDependencyPathCollection get_Paths();
    [CompilerGeneratedAttribute]
private void set_Paths(ClientDependencyPathCollection value);
    public static ClientDependencyLoader TryCreate(Control parent, HttpContextBase http, Boolean& isNew);
    public ClientDependencyLoader RegisterDependency(string filePath, ClientDependencyType type);
    public ClientDependencyLoader RegisterDependency(int priority, string filePath, ClientDependencyType type);
    public ClientDependencyLoader RegisterDependency(int group, int priority, string filePath, ClientDependencyType type);
    public ClientDependencyLoader RegisterDependency(int priority, string filePath, string pathNameAlias, ClientDependencyType type);
    public ClientDependencyLoader RegisterDependency(int group, int priority, string filePath, string pathNameAlias, ClientDependencyType type);
    public ClientDependencyLoader RegisterDependency(int group, int priority, string filePath, string pathNameAlias, ClientDependencyType type, string provider);
    public ClientDependencyLoader RegisterDependency(int group, int priority, string filePath, string pathNameAlias, ClientDependencyType type, string provider, bool forceBundle);
    public ClientDependencyLoader RegisterDependency(int group, int priority, string filePath, string pathNameAlias, ClientDependencyType type, object htmlAttributes, string provider, bool forceBundle);
    public ClientDependencyLoader RegisterDependency(int group, int priority, string filePath, string pathNameAlias, ClientDependencyType type, object htmlAttributes, string provider);
    public ClientDependencyLoader RegisterDependency(string filePath, string pathNameAlias, ClientDependencyType type);
    public ClientDependencyLoader AddPath(string pathNameAlias, string path);
    public ClientDependencyLoader AddPath(IClientDependencyPath path);
    public void RegisterClientDependencies(Control control, ClientDependencyPathCollection paths);
    public void RegisterClientDependencies(string providerName, Control control, IEnumerable`1<IClientDependencyPath> paths);
    public void RegisterClientDependencies(Control control, List`1<IClientDependencyPath> paths);
    public void RegisterClientDependencies(WebFormsFileRegistrationProvider provider, Control control, IEnumerable`1<IClientDependencyPath> paths);
    private static IEnumerable`1<IClientDependencyFile> FindDependencies(Control control);
    [CompilerGeneratedAttribute]
private void <RenderDependencies>b__14_0(ProviderDependencyList x);
}
[ParseChildrenAttribute("True")]
public class ClientDependency.Core.Controls.ClientDependencyPath : object {
    private string _name;
    private string _path;
    [CompilerGeneratedAttribute]
private bool <ForceBundle>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler DataBinding;
    [CompilerGeneratedAttribute]
private ClientDependencyLoader <Parent>k__BackingField;
    public string Name { get; public set; }
    public string Path { get; public set; }
    public bool ForceBundle { get; public set; }
    public Control BindingContainer { get; }
    public ClientDependencyLoader Parent { get; internal set; }
    public string ResolvedPath { get; }
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public sealed virtual string get_Path();
    public sealed virtual void set_Path(string value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ForceBundle();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ForceBundle(bool value);
    [CompilerGeneratedAttribute]
public void add_DataBinding(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_DataBinding(EventHandler value);
    public void DataBind();
    protected void OnDataBinding(EventArgs e);
    public Control get_BindingContainer();
    [CompilerGeneratedAttribute]
public ClientDependencyLoader get_Parent();
    [CompilerGeneratedAttribute]
internal void set_Parent(ClientDependencyLoader value);
    public string get_ResolvedPath();
    protected bool Equals(ClientDependencyPath other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class ClientDependency.Core.Controls.ClientDependencyPathCollection : List`1<ClientDependencyPath> {
}
public class ClientDependency.Core.Controls.CssFolderInclude : DependencyFolderInclude {
    private static string SearchPattern;
    protected ClientDependencyType DependencyType { get; }
    public CssFolderInclude(string folderVirtualPath);
    protected virtual ClientDependencyType get_DependencyType();
}
public class ClientDependency.Core.Controls.CssInclude : ClientDependencyInclude {
    private CssMediaType _cssMedia;
    [CompilerGeneratedAttribute]
private bool <EncodeImages>k__BackingField;
    internal bool EncodeImages { get; internal set; }
    public CssMediaType CssMedia { get; public set; }
    public CssInclude(IClientDependencyFile file);
    public CssInclude(IClientDependencyFile file, CssMediaType mediaType);
    [CompilerGeneratedAttribute]
internal bool get_EncodeImages();
    [CompilerGeneratedAttribute]
internal void set_EncodeImages(bool value);
    public CssMediaType get_CssMedia();
    public void set_CssMedia(CssMediaType value);
}
public abstract class ClientDependency.Core.Controls.DependencyFolderInclude : Control {
    [CompilerGeneratedAttribute]
private string <FolderVirtualPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ForceProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Priority>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Group>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FileSearchPattern>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HtmlAttributesAsString>k__BackingField;
    public string FolderVirtualPath { get; public set; }
    public string ForceProvider { get; public set; }
    public int Priority { get; public set; }
    public int Group { get; public set; }
    protected ClientDependencyType DependencyType { get; }
    protected string FileSearchPattern { get; protected set; }
    public string HtmlAttributesAsString { get; public set; }
    protected DependencyFolderInclude(string folderVirtualPath);
    [CompilerGeneratedAttribute]
public string get_FolderVirtualPath();
    [CompilerGeneratedAttribute]
public void set_FolderVirtualPath(string value);
    [CompilerGeneratedAttribute]
public string get_ForceProvider();
    [CompilerGeneratedAttribute]
public void set_ForceProvider(string value);
    [CompilerGeneratedAttribute]
public int get_Priority();
    [CompilerGeneratedAttribute]
public void set_Priority(int value);
    [CompilerGeneratedAttribute]
public int get_Group();
    [CompilerGeneratedAttribute]
public void set_Group(int value);
    protected abstract virtual ClientDependencyType get_DependencyType();
    [CompilerGeneratedAttribute]
protected string get_FileSearchPattern();
    [CompilerGeneratedAttribute]
protected void set_FileSearchPattern(string value);
    [CompilerGeneratedAttribute]
public string get_HtmlAttributesAsString();
    [CompilerGeneratedAttribute]
public void set_HtmlAttributesAsString(string value);
    protected virtual void OnLoad(EventArgs e);
}
[ToolboxDataAttribute("<{0}:HtmlInclude runat="server"></{0}:HtmlInclude>")]
public class ClientDependency.Core.Controls.HtmlInclude : Literal {
    public static string TagPattern;
    public static string AttributePattern;
    private static string MatchAllAttributes;
    [CompilerGeneratedAttribute]
private string <ForceProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Priority>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Group>k__BackingField;
    public string ForceProvider { get; public set; }
    public int Priority { get; public set; }
    public int Group { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ForceProvider();
    [CompilerGeneratedAttribute]
public void set_ForceProvider(string value);
    [CompilerGeneratedAttribute]
public int get_Priority();
    [CompilerGeneratedAttribute]
public void set_Priority(int value);
    [CompilerGeneratedAttribute]
public int get_Group();
    [CompilerGeneratedAttribute]
public void set_Group(int value);
    protected virtual void OnInit(EventArgs e);
    private void RegisterIncludes(string innerHtml, ClientDependencyLoader loader);
    private void RegisterIncludes(IEnumerable`1<BasicFile> files, ClientDependencyLoader loader, ClientDependencyType dependencyType);
    internal IEnumerable`1<BasicFile> GetIncludes(string innerHtml, ClientDependencyType dependencyType);
}
public class ClientDependency.Core.Controls.JsFolderInclude : DependencyFolderInclude {
    private static string SearchPattern;
    protected ClientDependencyType DependencyType { get; }
    public JsFolderInclude(string folderVirtualPath);
    protected virtual ClientDependencyType get_DependencyType();
}
public class ClientDependency.Core.Controls.JsInclude : ClientDependencyInclude {
    public JsInclude(IClientDependencyFile file);
}
public class ClientDependency.Core.CssFile : BasicFile {
    public CssFile(string filePath);
}
[ObsoleteAttribute("Use CssHelper instead")]
public class ClientDependency.Core.CssFileUrlFormatter : object {
    public static string TransformCssFile(string fileContent, Uri cssLocation);
}
internal static class ClientDependency.Core.CssHelper : object {
    private static Regex ImportCssRegex;
    private static Regex CssUrlRegex;
    private static CssHelper();
    public static string ParseImportStatements(string content, IEnumerable`1& importedPaths);
    public static long ParseImportStatements(Stream stream, IEnumerable`1& importedPaths, String& externalImportedPaths);
    public static string ReplaceUrlsWithAbsolutePaths(string fileContents, string url, HttpContextBase http);
    public static string ReplaceUrlsWithAbsolutePaths(string fileContent, Uri cssLocation);
    public static string MinifyCss(string body);
    public static string MinifyCss(Stream stream);
}
public enum ClientDependency.Core.CssMediaType : Enum {
    public int value__;
    public static CssMediaType All;
    public static CssMediaType Screen;
    public static CssMediaType Print;
}
public class ClientDependency.Core.DependencyHtmlElement : object {
    [CompilerGeneratedAttribute]
private string <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <HtmlAttributes>k__BackingField;
    public string Source { get; public set; }
    public IDictionary`2<string, string> HtmlAttributes { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Source();
    [CompilerGeneratedAttribute]
public void set_Source(string value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_HtmlAttributes();
    [CompilerGeneratedAttribute]
public void set_HtmlAttributes(IDictionary`2<string, string> value);
}
internal static class ClientDependency.Core.DependencySorter : object {
    public static IList`1<IClientDependencyFile> SortItems(IList`1<IClientDependencyFile> files);
}
[ExtensionAttribute]
public static class ClientDependency.Core.DictionaryExtensions : object {
    [ExtensionAttribute]
public static string ToHtmlAttributes(IDictionary`2<string, string> d);
    [ExtensionAttribute]
public static bool IsEqualTo(IDictionary`2<string, string> d, IDictionary`2<string, string> compareTo);
}
public abstract class ClientDependency.Core.FileRegistration.Providers.BaseFileRegistrationProvider : ProviderBase {
    [CompilerGeneratedAttribute]
private bool <EnableCompositeFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisableCompositeBundling>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableDebugVersionQueryString>k__BackingField;
    private string _compositeFileHandlerPath;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _compositeFileHandlerPathInitialized;
    public bool EnableCompositeFiles { get; public set; }
    public bool DisableCompositeBundling { get; public set; }
    public bool EnableDebugVersionQueryString { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_EnableCompositeFiles();
    [CompilerGeneratedAttribute]
public void set_EnableCompositeFiles(bool value);
    [CompilerGeneratedAttribute]
public bool get_DisableCompositeBundling();
    [CompilerGeneratedAttribute]
public void set_DisableCompositeBundling(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableDebugVersionQueryString();
    [CompilerGeneratedAttribute]
public void set_EnableDebugVersionQueryString(bool value);
    protected abstract virtual string RenderJsDependencies(IEnumerable`1<IClientDependencyFile> jsDependencies, HttpContextBase http, IDictionary`2<string, string> htmlAttributes);
    protected abstract virtual string RenderCssDependencies(IEnumerable`1<IClientDependencyFile> cssDependencies, HttpContextBase http, IDictionary`2<string, string> htmlAttributes);
    protected abstract virtual string RenderSingleJsFile(string js, IDictionary`2<string, string> htmlAttributes);
    protected abstract virtual string RenderSingleCssFile(string css, IDictionary`2<string, string> htmlAttributes);
    [ObsoleteAttribute("The GetCompositeFileHandlerPath should be retrieved from the compositeFiles element in config: ClientDependencySettings.Instance.CompositeFileHandlerPath")]
protected internal string GetCompositeFileHandlerPath(HttpContextBase http);
    public virtual void Initialize(string name, NameValueCollection config);
    private void StaggerOnDifferentAttributes(HttpContextBase http, StringBuilder builder, IEnumerable`1<IClientDependencyFile> list, Func`4<IEnumerable`1<IClientDependencyFile>, HttpContextBase, IDictionary`2<string, string>, string> renderCompositeFiles);
    protected void WriteStaggeredDependencies(IEnumerable`1<IClientDependencyFile> dependencies, HttpContextBase http, StringBuilder builder, Func`4<IEnumerable`1<IClientDependencyFile>, HttpContextBase, IDictionary`2<string, string>, string> renderCompositeFiles, Func`3<string, IDictionary`2<string, string>, string> renderSingle);
    protected virtual void UpdateFilePaths(IEnumerable`1<IClientDependencyFile> dependencies, HashSet`1<IClientDependencyPath> folderPaths, HttpContextBase http);
    protected virtual void EnsureNoDuplicates(List`1<IClientDependencyFile> dependencies, HashSet`1<IClientDependencyPath> folderPaths);
    private string AppendVersion(string url, HttpContextBase http);
    private static IDictionary`2<string, string> GetHtmlAttributes(IClientDependencyFile file);
    internal void WriteDependencies(List`1<IClientDependencyFile> allDependencies, HashSet`1<IClientDependencyPath> paths, String& jsOutput, String& cssOutput, HttpContextBase http);
    protected virtual void RenderJsComposites(HttpContextBase http, IDictionary`2<string, string> htmlAttributes, StringBuilder sb, IEnumerable`1<IClientDependencyFile> dependencies);
    protected virtual void RenderCssComposites(HttpContextBase http, IDictionary`2<string, string> htmlAttributes, StringBuilder sb, IEnumerable`1<IClientDependencyFile> dependencies);
}
public abstract class ClientDependency.Core.FileRegistration.Providers.BaseRenderer : BaseFileRegistrationProvider {
    public virtual void RegisterDependencies(List`1<IClientDependencyFile> allDependencies, HashSet`1<IClientDependencyPath> paths, String& jsOutput, String& cssOutput, HttpContextBase http);
}
[DefaultMemberAttribute("Item")]
public class ClientDependency.Core.FileRegistration.Providers.FileRegistrationProviderCollection : ProviderCollection {
    public WebFormsFileRegistrationProvider Item { get; }
    public WebFormsFileRegistrationProvider get_Item(string name);
    public virtual void Add(ProviderBase provider);
}
public class ClientDependency.Core.FileRegistration.Providers.HtmlEmbedContants : object {
    public static string ScriptEmbedWithSource;
    public static string CssEmbedWithSource;
    public static string ScriptEmbedWithCode;
}
public class ClientDependency.Core.FileRegistration.Providers.LazyLoadProvider : WebFormsFileRegistrationProvider {
    public static string DefaultName;
    protected static string DependencyLoaderResourceName;
    public virtual void Initialize(string name, NameValueCollection config);
    protected virtual string RenderJsDependencies(IEnumerable`1<IClientDependencyFile> jsDependencies, HttpContextBase http, IDictionary`2<string, string> htmlAttributes);
    protected virtual void RenderJsComposites(HttpContextBase http, IDictionary`2<string, string> htmlAttributes, StringBuilder sb, IEnumerable`1<IClientDependencyFile> dependencies);
    protected virtual string RenderSingleJsFile(string js, IDictionary`2<string, string> htmlAttributes);
    protected virtual string RenderCssDependencies(IEnumerable`1<IClientDependencyFile> cssDependencies, HttpContextBase http, IDictionary`2<string, string> htmlAttributes);
    protected virtual void RenderCssComposites(HttpContextBase http, IDictionary`2<string, string> htmlAttributes, StringBuilder sb, IEnumerable`1<IClientDependencyFile> dependencies);
    protected virtual string RenderSingleCssFile(string css, IDictionary`2<string, string> htmlAttributes);
    protected virtual void RegisterDependencies(HttpContextBase http, string js, string css);
    private void RegisterScript(string strScript, Page page);
}
public class ClientDependency.Core.FileRegistration.Providers.LazyLoadRenderer : BaseRenderer {
    private static string LazyLoadScriptPlaceholder;
    private static string PlaceholderReplacementProcessing;
    public static string DefaultName;
    protected static string DependencyLoaderResourceName;
    private static object Locker;
    private static LazyLoadRenderer();
    private static void PlaceholderParserPlaceholderReplaced(object sender, PlaceholderReplacementEventArgs e);
    private static void PlaceholdersReplaced(object sender, PlaceholdersReplacedEventArgs e);
    public virtual void Initialize(string name, NameValueCollection config);
    private static string GetWebResourceUrl(Type type, string resourceId);
    protected virtual string RenderJsDependencies(IEnumerable`1<IClientDependencyFile> jsDependencies, HttpContextBase http, IDictionary`2<string, string> htmlAttributes);
    protected virtual void RenderJsComposites(HttpContextBase http, IDictionary`2<string, string> htmlAttributes, StringBuilder sb, IEnumerable`1<IClientDependencyFile> dependencies);
    protected virtual string RenderCssDependencies(IEnumerable`1<IClientDependencyFile> cssDependencies, HttpContextBase http, IDictionary`2<string, string> htmlAttributes);
    protected virtual void RenderCssComposites(HttpContextBase http, IDictionary`2<string, string> htmlAttributes, StringBuilder sb, IEnumerable`1<IClientDependencyFile> dependencies);
    protected virtual string RenderSingleJsFile(string js, IDictionary`2<string, string> htmlAttributes);
    protected virtual string RenderSingleCssFile(string css, IDictionary`2<string, string> htmlAttributes);
}
public class ClientDependency.Core.FileRegistration.Providers.LoaderControlProvider : WebFormsFileRegistrationProvider {
    public static string DefaultName;
    public virtual void Initialize(string name, NameValueCollection config);
    protected virtual string RenderSingleJsFile(string js, IDictionary`2<string, string> htmlAttributes);
    protected virtual string RenderSingleCssFile(string css, IDictionary`2<string, string> htmlAttributes);
    protected virtual void RegisterDependencies(HttpContextBase http, string js, string css);
    private static void AddToControl(HttpContextBase http, string literal);
}
public class ClientDependency.Core.FileRegistration.Providers.PageHeaderProvider : WebFormsFileRegistrationProvider {
    public static string DefaultName;
    public virtual void Initialize(string name, NameValueCollection config);
    protected virtual string RenderSingleJsFile(string js, IDictionary`2<string, string> htmlAttributes);
    protected virtual string RenderSingleCssFile(string css, IDictionary`2<string, string> htmlAttributes);
    protected virtual void RegisterDependencies(HttpContextBase http, string js, string css);
}
public class ClientDependency.Core.FileRegistration.Providers.PlaceHolderProvider : LoaderControlProvider {
    public static string DefaultName;
    [CompilerGeneratedAttribute]
private string <JavaScriptPlaceHolderId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CssPlaceHolderId>k__BackingField;
    public string JavaScriptPlaceHolderId { get; public set; }
    public string CssPlaceHolderId { get; public set; }
    [CompilerGeneratedAttribute]
public string get_JavaScriptPlaceHolderId();
    [CompilerGeneratedAttribute]
public void set_JavaScriptPlaceHolderId(string value);
    [CompilerGeneratedAttribute]
public string get_CssPlaceHolderId();
    [CompilerGeneratedAttribute]
public void set_CssPlaceHolderId(string value);
    public virtual void Initialize(string name, NameValueCollection config);
    protected virtual void RegisterDependencies(HttpContextBase http, string js, string css);
    private static void AddToControl(HttpContextBase http, string literal, Control parent);
    [CompilerGeneratedAttribute]
private bool <RegisterDependencies>b__11_0(Control x);
    [CompilerGeneratedAttribute]
private bool <RegisterDependencies>b__11_1(Control x);
}
[DefaultMemberAttribute("Item")]
public class ClientDependency.Core.FileRegistration.Providers.RendererCollection : ProviderCollection {
    public BaseRenderer Item { get; }
    public BaseRenderer get_Item(string name);
    public virtual void Add(ProviderBase provider);
}
public class ClientDependency.Core.FileRegistration.Providers.StandardRenderer : BaseRenderer {
    public static string DefaultName;
    public virtual void Initialize(string name, NameValueCollection config);
    public virtual void RegisterDependencies(List`1<IClientDependencyFile> allDependencies, HashSet`1<IClientDependencyPath> paths, String& jsOutput, String& cssOutput, HttpContextBase http);
    protected virtual string RenderJsDependencies(IEnumerable`1<IClientDependencyFile> jsDependencies, HttpContextBase http, IDictionary`2<string, string> htmlAttributes);
    protected virtual string RenderCssDependencies(IEnumerable`1<IClientDependencyFile> cssDependencies, HttpContextBase http, IDictionary`2<string, string> htmlAttributes);
    protected virtual string RenderSingleJsFile(string js, IDictionary`2<string, string> htmlAttributes);
    protected virtual string RenderSingleCssFile(string css, IDictionary`2<string, string> htmlAttributes);
}
public abstract class ClientDependency.Core.FileRegistration.Providers.WebFormsFileRegistrationProvider : BaseFileRegistrationProvider {
    protected virtual string RenderJsDependencies(IEnumerable`1<IClientDependencyFile> jsDependencies, HttpContextBase http, IDictionary`2<string, string> htmlAttributes);
    protected virtual string RenderCssDependencies(IEnumerable`1<IClientDependencyFile> cssDependencies, HttpContextBase http, IDictionary`2<string, string> htmlAttributes);
    protected abstract virtual void RegisterDependencies(HttpContextBase http, string js, string css);
    public void RegisterDependencies(Control dependantControl, List`1<IClientDependencyFile> allDependencies, HashSet`1<IClientDependencyPath> paths, HttpContextBase http);
}
public class ClientDependency.Core.FileWriters : object {
    private static Dictionary`2<string, IFileWriter> ExtensionWriters;
    private static Dictionary`2<string, IFileWriter> PathWriters;
    private static Dictionary`2<string, IVirtualFileWriter> VirtualExtensionWriters;
    private static Dictionary`2<string, IVirtualFileWriter> VirtualPathWriters;
    private static object DictionaryLocker;
    private static IFileWriter DefaultFileWriter;
    private static FileWriters();
    public static IFileWriter GetDefault();
    internal static IEnumerable`1<string> GetRegisteredExtensions();
    public static void AddWriterForExtension(string fileExtension, IVirtualFileWriter writer);
    public static IVirtualFileWriter GetVirtualWriterForExtension(string fileExtension);
    public static void AddWriterForFile(string filePath, IVirtualFileWriter writer);
    public static IVirtualFileWriter GetVirtualWriterForFile(string filePath);
    public static void AddWriterForExtension(string fileExtension, IFileWriter writer);
    public static IFileWriter GetWriterForExtension(string fileExtension);
    public static void AddWriterForFile(string filePath, IFileWriter writer);
    public static IFileWriter GetWriterForFile(string filePath);
}
internal class ClientDependency.Core.HashCodeCombiner : object {
    private long _combinedHash;
    internal void AddInt(int i);
    internal void AddObject(object o);
    internal void AddDateTime(DateTime d);
    internal void AddCaseInsensitiveString(string s);
    internal void AddFileSystemItem(FileSystemInfo f);
    internal void AddFile(FileInfo f);
    internal void AddFolder(DirectoryInfo d);
    internal string GetCombinedHashCode();
}
internal static class ClientDependency.Core.HtmlAttributesStringParser : object {
    internal static void ParseIntoDictionary(string attributes, IDictionary`2<string, string> destination);
}
[ExtensionAttribute]
public static class ClientDependency.Core.HttpContextBaseExtensions : object {
    [ExtensionAttribute]
internal static string GetRawUrlSafe(HttpContextBase context);
    [ExtensionAttribute]
public static void AddCompressionResponseHeader(HttpContextBase context, CompressionType cType);
    [ExtensionAttribute]
public static void SetClientCachingResponse(HttpContextBase context, string etag, int fromDays, String[] varyByParams);
    [ExtensionAttribute]
public static CompressionType GetClientCompression(HttpContextBase context);
    [ExtensionAttribute]
public static bool IsAbsolute(HttpContextBase context, string virtualPath);
    [ExtensionAttribute]
public static string ResolveUrl(HttpContextBase context, string originalUrl);
    [ExtensionAttribute]
public static bool IsAbsolutePath(HttpContextBase context, string originalUrl);
}
public interface ClientDependency.Core.IClientDependencyFile {
    public string FilePath { get; public set; }
    public ClientDependencyType DependencyType { get; }
    public int Priority { get; public set; }
    public int Group { get; public set; }
    public string PathNameAlias { get; public set; }
    public string ForceProvider { get; public set; }
    public bool ForceBundle { get; public set; }
    public abstract virtual string get_FilePath();
    public abstract virtual void set_FilePath(string value);
    public abstract virtual ClientDependencyType get_DependencyType();
    public abstract virtual int get_Priority();
    public abstract virtual void set_Priority(int value);
    public abstract virtual int get_Group();
    public abstract virtual void set_Group(int value);
    public abstract virtual string get_PathNameAlias();
    public abstract virtual void set_PathNameAlias(string value);
    public abstract virtual string get_ForceProvider();
    public abstract virtual void set_ForceProvider(string value);
    public abstract virtual bool get_ForceBundle();
    public abstract virtual void set_ForceBundle(bool value);
}
public interface ClientDependency.Core.IClientDependencyPath {
    public string Name { get; public set; }
    public string Path { get; public set; }
    public bool ForceBundle { get; public set; }
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    public abstract virtual string get_Path();
    public abstract virtual void set_Path(string value);
    public abstract virtual bool get_ForceBundle();
    public abstract virtual void set_ForceBundle(bool value);
}
internal interface ClientDependency.Core.IFileReader {
    public abstract virtual string ReadFile(string filePath);
}
public interface ClientDependency.Core.IHaveHtmlAttributes {
    public IDictionary`2<string, string> HtmlAttributes { get; }
    public abstract virtual IDictionary`2<string, string> get_HtmlAttributes();
}
public interface ClientDependency.Core.IHttpProvider {
    public abstract virtual void Initialize(HttpContextBase http);
}
public interface ClientDependency.Core.IRequiresHtmlAttributesParsing {
    public string HtmlAttributesAsString { get; public set; }
    public abstract virtual string get_HtmlAttributesAsString();
    public abstract virtual void set_HtmlAttributesAsString(string value);
}
public class ClientDependency.Core.JavascriptFile : BasicFile {
    public JavascriptFile(string filePath);
}
public interface ClientDependency.Core.Logging.ILogger {
    public abstract virtual void Debug(string msg);
    public abstract virtual void Info(string msg);
    public abstract virtual void Warn(string msg);
    public abstract virtual void Error(string msg, Exception ex);
    public abstract virtual void Fatal(string msg, Exception ex);
}
internal class ClientDependency.Core.Logging.NullLogger : object {
    public sealed virtual void Debug(string msg);
    public sealed virtual void Info(string msg);
    public sealed virtual void Warn(string msg);
    public sealed virtual void Error(string msg, Exception ex);
    public sealed virtual void Fatal(string msg, Exception ex);
}
internal class ClientDependency.Core.Logging.TraceLogger : object {
    private HttpContextBase GetHttpContext();
    private void Trace(string msg, bool isWarn, string category);
    public sealed virtual void Debug(string msg);
    public sealed virtual void Info(string msg);
    public sealed virtual void Warn(string msg);
    public sealed virtual void Error(string msg, Exception ex);
    public sealed virtual void Fatal(string msg, Exception ex);
}
public class ClientDependency.Core.Module.ApplyingResponseFilterEventArgs : CancelEventArgs {
    [CompilerGeneratedAttribute]
private HttpContextBase <HttpContext>k__BackingField;
    public HttpContextBase HttpContext { get; private set; }
    public ApplyingResponseFilterEventArgs(HttpContextBase httpContext);
    [CompilerGeneratedAttribute]
public HttpContextBase get_HttpContext();
    [CompilerGeneratedAttribute]
private void set_HttpContext(HttpContextBase value);
}
public class ClientDependency.Core.Module.ClientDependencyModule : object {
    [CompilerGeneratedAttribute]
private static EventHandler`1<ApplyingResponseFilterEventArgs> ApplyingResponseFilter;
    private List`1<Type> m_FilterTypes;
    [CompilerGeneratedAttribute]
public static void add_ApplyingResponseFilter(EventHandler`1<ApplyingResponseFilterEventArgs> value);
    [CompilerGeneratedAttribute]
public static void remove_ApplyingResponseFilter(EventHandler`1<ApplyingResponseFilterEventArgs> value);
    private void OnApplyingResponseFilter(ApplyingResponseFilterEventArgs e);
    private sealed virtual override void System.Web.IHttpModule.Dispose();
    private sealed virtual override void System.Web.IHttpModule.Init(HttpApplication app);
    private void HandleRequest(object sender, EventArgs e);
    private void LoadFilterTypes();
    private IEnumerable`1<IFilter> LoadFilters(HttpContextBase http);
    private static bool ValidateCurrentHandler(IEnumerable`1<IFilter> filters);
    private void ExecuteFilter(HttpContextBase http, IEnumerable`1<IFilter> filters);
}
public interface ClientDependency.Core.Module.IFilter {
    public HttpContextBase CurrentContext { get; }
    public abstract virtual void SetHttpContext(HttpContextBase ctx);
    public abstract virtual string UpdateOutputHtml(string html);
    public abstract virtual HttpContextBase get_CurrentContext();
    public abstract virtual bool CanExecute();
    public abstract virtual bool ValidateCurrentHandler();
}
public class ClientDependency.Core.Module.MimeTypeCompressor : object {
    protected HttpContextBase Context;
    protected IEnumerable`1<MimeTypeCompressionElement> MatchedTypes;
    public MimeTypeCompressor(HttpContextBase ctx);
    public void AddCompression();
    internal static void PerformCompression(HttpContextBase context);
    protected MimeTypeCompressionElement GetSupportedPath();
    protected bool IsSupportedMimeType();
    [CompilerGeneratedAttribute]
private bool <.ctor>b__0_0(MimeTypeCompressionElement x);
}
public class ClientDependency.Core.Module.ResponseFilterStream : Stream {
    private Stream _stream;
    private HttpContextBase _http;
    private long _position;
    private MemoryStream _cacheStream;
    private int _cachePointer;
    [CompilerGeneratedAttribute]
private Action`1<MemoryStream> CaptureStream;
    [CompilerGeneratedAttribute]
private Action`1<string> CaptureString;
    [CompilerGeneratedAttribute]
private Func`2<Byte[], Byte[]> TransformWrite;
    [CompilerGeneratedAttribute]
private Func`2<string, string> TransformWriteString;
    [CompilerGeneratedAttribute]
private Func`2<MemoryStream, MemoryStream> TransformStream;
    [CompilerGeneratedAttribute]
private Func`2<string, string> TransformString;
    private bool IsCaptured { get; }
    private bool IsOutputDelayed { get; }
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public ResponseFilterStream(Stream responseStream, HttpContextBase http);
    private bool get_IsCaptured();
    private bool get_IsOutputDelayed();
    [CompilerGeneratedAttribute]
public void add_CaptureStream(Action`1<MemoryStream> value);
    [CompilerGeneratedAttribute]
public void remove_CaptureStream(Action`1<MemoryStream> value);
    [CompilerGeneratedAttribute]
public void add_CaptureString(Action`1<string> value);
    [CompilerGeneratedAttribute]
public void remove_CaptureString(Action`1<string> value);
    [CompilerGeneratedAttribute]
public void add_TransformWrite(Func`2<Byte[], Byte[]> value);
    [CompilerGeneratedAttribute]
public void remove_TransformWrite(Func`2<Byte[], Byte[]> value);
    [CompilerGeneratedAttribute]
public void add_TransformWriteString(Func`2<string, string> value);
    [CompilerGeneratedAttribute]
public void remove_TransformWriteString(Func`2<string, string> value);
    [CompilerGeneratedAttribute]
public void add_TransformStream(Func`2<MemoryStream, MemoryStream> value);
    [CompilerGeneratedAttribute]
public void remove_TransformStream(Func`2<MemoryStream, MemoryStream> value);
    [CompilerGeneratedAttribute]
public void add_TransformString(Func`2<string, string> value);
    [CompilerGeneratedAttribute]
public void remove_TransformString(Func`2<string, string> value);
    protected virtual void OnCaptureStream(MemoryStream ms);
    private void OnCaptureStringInternal(MemoryStream ms);
    protected virtual void OnCaptureString(string output);
    protected virtual Byte[] OnTransformWrite(Byte[] buffer);
    private Byte[] OnTransformWriteStringInternal(Byte[] buffer);
    private string OnTransformWriteString(string value);
    protected virtual MemoryStream OnTransformCompleteStream(MemoryStream ms);
    private string OnTransformCompleteString(string responseText);
    internal MemoryStream OnTransformCompleteStringInternal(MemoryStream ms);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual long Seek(long offset, SeekOrigin direction);
    public virtual void SetLength(long length);
    public virtual void Close();
    protected virtual void Dispose(bool disposing);
    public virtual void Flush();
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual void Write(Byte[] buffer, int offset, int count);
}
public class ClientDependency.Core.Module.RogueFileFilter : object {
    private Nullable`1<bool> m_Runnable;
    private string m_MatchScript;
    private string m_MatchLink;
    private RogueFileCompressionElement m_FoundPath;
    [CompilerGeneratedAttribute]
private HttpContextBase <CurrentContext>k__BackingField;
    public HttpContextBase CurrentContext { get; private set; }
    public sealed virtual void SetHttpContext(HttpContextBase ctx);
    public virtual bool ValidateCurrentHandler();
    public sealed virtual bool CanExecute();
    public sealed virtual string UpdateOutputHtml(string html);
    [CompilerGeneratedAttribute]
public sealed virtual HttpContextBase get_CurrentContext();
    [CompilerGeneratedAttribute]
private void set_CurrentContext(HttpContextBase value);
    private RogueFileCompressionElement GetSupportedPath();
    private string ReplaceScripts(string html);
    private string ReplaceStyles(string html);
    private static string ReplaceContent(string html, string namedGroup, String[] extensions, ClientDependencyType type, string regex, HttpContextBase http);
}
public class ClientDependency.Core.NetworkHelper : object {
    internal static Func`1<ClientDependencySection> GetConfigSection;
    public static string FileSafeMachineName { get; }
    public static string MachineName { get; }
    public static string get_FileSafeMachineName();
    public static string get_MachineName();
}
[ExtensionAttribute]
public static class ClientDependency.Core.ObjectExtensions : object {
    [ExtensionAttribute]
public static IDictionary`2<string, object> ToDictionary(object o);
}
internal class ClientDependency.Core.PathHelper : object {
    public static bool TryGetFileExtension(string filePath, String& extension);
    public static bool TryGetFileInfo(string path, HttpContextBase http, FileInfo& fileInfo);
    public static bool TryMapPath(string path, HttpContextBase http, String& mappedPath);
}
public static class ClientDependency.Core.PathsCollection : object {
    private static List`1<BasicPath> Paths;
    private static object Locker;
    private static PathsCollection();
    public static void AddPath(string name, string path, bool forceBundle);
    internal static IEnumerable`1<IClientDependencyPath> GetPaths();
}
internal class ClientDependency.Core.PhysicalFileReader : object {
    private HttpContextBase _httpContext;
    public PhysicalFileReader(HttpContextBase httpContext);
    public sealed virtual string ReadFile(string filePath);
}
internal class ClientDependency.Core.PlaceholderParser : object {
    [CompilerGeneratedAttribute]
private static EventHandler`1<PlaceholderReplacementEventArgs> PlaceholderReplaced;
    [CompilerGeneratedAttribute]
private static EventHandler`1<PlaceholdersReplacedEventArgs> AllPlaceholdersReplaced;
    [CompilerGeneratedAttribute]
internal static void add_PlaceholderReplaced(EventHandler`1<PlaceholderReplacementEventArgs> value);
    [CompilerGeneratedAttribute]
internal static void remove_PlaceholderReplaced(EventHandler`1<PlaceholderReplacementEventArgs> value);
    private static void OnPlaceholderReplaced(PlaceholderReplacementEventArgs e);
    [CompilerGeneratedAttribute]
internal static void add_AllPlaceholdersReplaced(EventHandler`1<PlaceholdersReplacedEventArgs> value);
    [CompilerGeneratedAttribute]
internal static void remove_AllPlaceholdersReplaced(EventHandler`1<PlaceholdersReplacedEventArgs> value);
    private static void OnAllPlaceholdersReplaced(PlaceholdersReplacedEventArgs e);
    public static string ParseHtmlPlaceholders(HttpContextBase currentContext, string html, string jsMarkupRegex, string cssMarkupRegex, RendererOutput[] output);
}
internal class ClientDependency.Core.PlaceholderReplacementEventArgs : PlaceholdersReplacedEventArgs {
    [CompilerGeneratedAttribute]
private ClientDependencyType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private Match <RegexMatch>k__BackingField;
    public ClientDependencyType Type { get; private set; }
    public Match RegexMatch { get; private set; }
    public PlaceholderReplacementEventArgs(HttpContextBase httpContext, ClientDependencyType type, string replacedText, Match regexMatch);
    [CompilerGeneratedAttribute]
public ClientDependencyType get_Type();
    [CompilerGeneratedAttribute]
private void set_Type(ClientDependencyType value);
    [CompilerGeneratedAttribute]
public Match get_RegexMatch();
    [CompilerGeneratedAttribute]
private void set_RegexMatch(Match value);
}
internal class ClientDependency.Core.PlaceholdersReplacedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private HttpContextBase <HttpContext>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReplacedText>k__BackingField;
    public HttpContextBase HttpContext { get; private set; }
    public string ReplacedText { get; public set; }
    public PlaceholdersReplacedEventArgs(HttpContextBase httpContext, string replacedText);
    [CompilerGeneratedAttribute]
public HttpContextBase get_HttpContext();
    [CompilerGeneratedAttribute]
private void set_HttpContext(HttpContextBase value);
    [CompilerGeneratedAttribute]
public string get_ReplacedText();
    [CompilerGeneratedAttribute]
public void set_ReplacedText(string value);
}
internal class ClientDependency.Core.ProviderDependencyList : object {
    [CompilerGeneratedAttribute]
private List`1<IClientDependencyFile> <Dependencies>k__BackingField;
    [CompilerGeneratedAttribute]
private BaseFileRegistrationProvider <Provider>k__BackingField;
    internal List`1<IClientDependencyFile> Dependencies { get; private set; }
    internal BaseFileRegistrationProvider Provider { get; private set; }
    internal ProviderDependencyList(BaseFileRegistrationProvider provider);
    internal bool ProviderIs(BaseFileRegistrationProvider provider);
    internal void AddDependencies(IEnumerable`1<IClientDependencyFile> list);
    internal void AddDependency(IClientDependencyFile file);
    [CompilerGeneratedAttribute]
internal List`1<IClientDependencyFile> get_Dependencies();
    [CompilerGeneratedAttribute]
private void set_Dependencies(List`1<IClientDependencyFile> value);
    [CompilerGeneratedAttribute]
internal BaseFileRegistrationProvider get_Provider();
    [CompilerGeneratedAttribute]
private void set_Provider(BaseFileRegistrationProvider value);
}
internal class ClientDependency.Core.RendererOutput : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputJs>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputCss>k__BackingField;
    public string Name { get; public set; }
    public string OutputJs { get; public set; }
    public string OutputCss { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_OutputJs();
    [CompilerGeneratedAttribute]
public void set_OutputJs(string value);
    [CompilerGeneratedAttribute]
public string get_OutputCss();
    [CompilerGeneratedAttribute]
public void set_OutputCss(string value);
}
internal class ClientDependency.Core.RequestHelper : object {
    private static string ByteOrderMarkUtf8;
    private static RequestHelper();
    internal static bool TryReadUri(string url, HttpContextBase http, IEnumerable`1<string> approvedDomains, String& requestContents, Uri& resultUri);
    internal static string GetXmlResponse(Uri resource);
}
public class ClientDependency.Core.SimpleCompressor : object {
    public static Byte[] CompressBytes(CompressionType type, Byte[] fileBytes);
    public static Byte[] DecompressBytes(CompressionType type, Byte[] compressedBytes);
}
[ExtensionAttribute]
public static class ClientDependency.Core.StringExtensions : object {
    internal static Func`1<ClientDependencySection> GetConfigSection;
    [ExtensionAttribute]
internal static string ReplaceNonAlphanumericChars(string input, char replacement);
    [ExtensionAttribute]
public static string ReverseString(string s);
    [ExtensionAttribute]
public static string ReplaceFirst(string text, string search, string replace);
    [ExtensionAttribute]
public static string EncodeTo64Url(string toEncode);
    [ExtensionAttribute]
public static string EncodeTo64(string toEncode);
    [ExtensionAttribute]
public static string DecodeFrom64Url(string toDecode);
    [ExtensionAttribute]
public static string DecodeFrom64(string toDecode);
    [ExtensionAttribute]
public static string GenerateHash(string str);
    [ExtensionAttribute]
public static string GenerateSha1Hash(string str);
    [ExtensionAttribute]
[ObsoleteAttribute("This is no longer used and will be removed in future versions")]
public static string GenerateSha256Hash(string str);
    [ExtensionAttribute]
public static string GenerateMd5(string str);
    [ExtensionAttribute]
private static string GenerateHash(string str, string hashType);
    [ExtensionAttribute]
public static bool EndsWithOneOf(string str, String[] ext);
    [ExtensionAttribute]
internal static string EnsureStartsWith(string input, string toStartWith);
    [ExtensionAttribute]
internal static string TrimStart(string value, string forRemoving);
}
[ExtensionAttribute]
public static class ClientDependency.Core.UriExtensions : object {
    [ExtensionAttribute]
public static bool IsWebUri(Uri uri);
    [ExtensionAttribute]
internal static string ToAbsolutePath(Uri originalUri, string path);
    [ExtensionAttribute]
public static Uri MakeAbsoluteUri(Uri uri, HttpContextBase http);
    [ExtensionAttribute]
public static bool IsLocalUri(Uri uri, HttpContextBase http);
}
internal class ClientDependency.Core.VirtualPathFileReader : object {
    public sealed virtual string ReadFile(string filePath);
}
