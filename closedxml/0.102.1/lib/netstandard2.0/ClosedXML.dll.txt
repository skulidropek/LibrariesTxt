internal class ClosedXML_ProcessedByFody : object {
    internal static string FodyVersion;
    internal static string Janitor;
}
[ExtensionAttribute]
public static class ClosedXML.AttributeExtensions : object {
    [ExtensionAttribute]
public static TAttribute[] GetAttributes(MemberInfo member);
    [ExtensionAttribute]
public static MethodInfo GetMethod(T instance, Expression`1<Func`2<T, object>> methodSelector);
    [ExtensionAttribute]
public static MethodInfo GetMethod(T instance, Expression`1<Action`1<T>> methodSelector);
    [ExtensionAttribute]
public static bool HasAttribute(MemberInfo member);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("384")]
public class ClosedXML.Attributes.XLColumnAttribute : Attribute {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Header>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Ignore>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Order>k__BackingField;
    [NullableAttribute("2")]
public string Header { get; public set; }
    public bool Ignore { get; public set; }
    public int Order { get; public set; }
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Header();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Header(string value);
    [CompilerGeneratedAttribute]
public bool get_Ignore();
    [CompilerGeneratedAttribute]
public void set_Ignore(bool value);
    [CompilerGeneratedAttribute]
public int get_Order();
    [CompilerGeneratedAttribute]
public void set_Order(int value);
    private static XLColumnAttribute GetXLColumnAttribute(MemberInfo mi);
    internal static string GetHeader(MemberInfo mi);
    internal static int GetOrder(MemberInfo mi);
    internal static bool IgnoreMember(MemberInfo mi);
}
internal abstract class ClosedXML.Excel.AbstractPivotFieldReference : object {
    [CompilerGeneratedAttribute]
private bool <DefaultSubtotal>k__BackingField;
    public bool DefaultSubtotal { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_DefaultSubtotal();
    [CompilerGeneratedAttribute]
public void set_DefaultSubtotal(bool value);
    internal abstract virtual UInt32Value GetFieldOffset();
    internal abstract virtual IEnumerable`1<int> Match(PivotSourceInfo psi, IXLPivotTable pt);
}
public class ClosedXML.Excel.Blank : object {
    public static Blank Value;
    private static Blank();
    public virtual string ToString();
}
internal interface ClosedXML.Excel.Caching.IXLRepository {
    public abstract virtual void Clear();
}
internal interface ClosedXML.Excel.Caching.IXLRepository`2 {
    public abstract virtual Tvalue Store(Tkey& key, Tvalue value);
}
internal class ClosedXML.Excel.Caching.XLAlignmentRepository : XLRepositoryBase`2<XLAlignmentKey, XLAlignmentValue> {
    public XLAlignmentRepository(Func`2<XLAlignmentKey, XLAlignmentValue> createNew);
    public XLAlignmentRepository(Func`2<XLAlignmentKey, XLAlignmentValue> createNew, IEqualityComparer`1<XLAlignmentKey> comparer);
}
internal class ClosedXML.Excel.Caching.XLBorderRepository : XLRepositoryBase`2<XLBorderKey, XLBorderValue> {
    public XLBorderRepository(Func`2<XLBorderKey, XLBorderValue> createNew);
    public XLBorderRepository(Func`2<XLBorderKey, XLBorderValue> createNew, IEqualityComparer`1<XLBorderKey> comparer);
}
internal class ClosedXML.Excel.Caching.XLColorRepository : XLRepositoryBase`2<XLColorKey, XLColor> {
    public XLColorRepository(Func`2<XLColorKey, XLColor> createNew);
    public XLColorRepository(Func`2<XLColorKey, XLColor> createNew, IEqualityComparer`1<XLColorKey> comparer);
}
internal class ClosedXML.Excel.Caching.XLFillRepository : XLRepositoryBase`2<XLFillKey, XLFillValue> {
    public XLFillRepository(Func`2<XLFillKey, XLFillValue> createNew);
    public XLFillRepository(Func`2<XLFillKey, XLFillValue> createNew, IEqualityComparer`1<XLFillKey> comparer);
}
internal class ClosedXML.Excel.Caching.XLFontRepository : XLRepositoryBase`2<XLFontKey, XLFontValue> {
    public XLFontRepository(Func`2<XLFontKey, XLFontValue> createNew);
    public XLFontRepository(Func`2<XLFontKey, XLFontValue> createNew, IEqualityComparer`1<XLFontKey> comparer);
}
internal class ClosedXML.Excel.Caching.XLNumberFormatRepository : XLRepositoryBase`2<XLNumberFormatKey, XLNumberFormatValue> {
    public XLNumberFormatRepository(Func`2<XLNumberFormatKey, XLNumberFormatValue> createNew);
    public XLNumberFormatRepository(Func`2<XLNumberFormatKey, XLNumberFormatValue> createNew, IEqualityComparer`1<XLNumberFormatKey> comparer);
}
internal class ClosedXML.Excel.Caching.XLProtectionRepository : XLRepositoryBase`2<XLProtectionKey, XLProtectionValue> {
    public XLProtectionRepository(Func`2<XLProtectionKey, XLProtectionValue> createNew);
    public XLProtectionRepository(Func`2<XLProtectionKey, XLProtectionValue> createNew, IEqualityComparer`1<XLProtectionKey> comparer);
}
internal class ClosedXML.Excel.Caching.XLRangeRepository : XLWorkbookElementRepositoryBase`2<XLRangeKey, XLRangeBase> {
    public XLRangeRepository(XLWorkbook workbook, Func`2<XLRangeKey, XLRangeBase> createNew);
    public XLRangeRepository(XLWorkbook workbook, Func`2<XLRangeKey, XLRangeBase> createNew, IEqualityComparer`1<XLRangeKey> comparer);
}
internal abstract class ClosedXML.Excel.Caching.XLRepositoryBase : object {
    public abstract virtual void Clear();
}
internal abstract class ClosedXML.Excel.Caching.XLRepositoryBase`2 : XLRepositoryBase {
    private static int CONCURRENCY_LEVEL;
    private static int INITIAL_CAPACITY;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ConcurrentDictionary`2<Tkey, WeakReference> _storage;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`2<Tkey, Tvalue> _createNew;
    protected XLRepositoryBase`2(Func`2<Tkey, Tvalue> createNew);
    protected XLRepositoryBase`2(Func`2<Tkey, Tvalue> createNew, IEqualityComparer`1<Tkey> comparer);
    public bool ContainsKey(Tkey& key, Tvalue& value);
    public sealed virtual Tvalue Store(Tkey& key, Tvalue value);
    public Tvalue GetOrCreate(Tkey& key);
    public Tvalue Replace(Tkey& oldKey, Tkey& newKey);
    public void Remove(Tkey& key);
    public virtual void Clear();
    [NullableContextAttribute("1")]
public sealed virtual IEnumerator`1<Tvalue> GetEnumerator();
    [NullableContextAttribute("1")]
private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    [CompilerGeneratedAttribute]
private Tvalue <GetEnumerator>b__12_0(KeyValuePair`2<Tkey, WeakReference> pair);
}
internal class ClosedXML.Excel.Caching.XLStyleRepository : XLRepositoryBase`2<XLStyleKey, XLStyleValue> {
    public XLStyleRepository(Func`2<XLStyleKey, XLStyleValue> createNew);
    public XLStyleRepository(Func`2<XLStyleKey, XLStyleValue> createNew, IEqualityComparer`1<XLStyleKey> comparer);
}
internal abstract class ClosedXML.Excel.Caching.XLWorkbookElementRepositoryBase`2 : XLRepositoryBase`2<Tkey, Tvalue> {
    [CompilerGeneratedAttribute]
private XLWorkbook <Workbook>k__BackingField;
    public XLWorkbook Workbook { get; private set; }
    public XLWorkbookElementRepositoryBase`2(XLWorkbook workbook, Func`2<Tkey, Tvalue> createNew);
    public XLWorkbookElementRepositoryBase`2(XLWorkbook workbook, Func`2<Tkey, Tvalue> createNew, IEqualityComparer`1<Tkey> comparer);
    [CompilerGeneratedAttribute]
public XLWorkbook get_Workbook();
    [CompilerGeneratedAttribute]
private void set_Workbook(XLWorkbook value);
}
internal enum ClosedXML.Excel.CalcEngine.AllowRange : Enum {
    public int value__;
    public static AllowRange None;
    public static AllowRange All;
    public static AllowRange Except;
    public static AllowRange Only;
}
[IsReadOnlyAttribute]
internal class ClosedXML.Excel.CalcEngine.AnyValue : ValueType {
    private static int BlankValue;
    private static int LogicalValue;
    private static int NumberValue;
    private static int TextValue;
    private static int ErrorValue;
    private static int ArrayValue;
    private static int ReferenceValue;
    private byte _index;
    private bool _logical;
    private double _number;
    private string _text;
    private XLError _error;
    private Array _array;
    private Reference _reference;
    public static AnyValue Blank;
    public bool IsBlank { get; }
    public bool IsLogical { get; }
    public bool IsNumber { get; }
    public bool IsText { get; }
    public bool IsError { get; }
    public bool IsArray { get; }
    public bool IsReference { get; }
    public bool IsScalarType { get; }
    private AnyValue(byte index, bool logical, double number, string text, XLError error, Array array, Reference reference);
    private static AnyValue();
    public static AnyValue From(bool logical);
    public static AnyValue From(double number);
    public static AnyValue From(string text);
    public static AnyValue From(XLError error);
    public static AnyValue From(Array array);
    public static AnyValue From(Reference reference);
    public static AnyValue op_Implicit(bool logical);
    public static AnyValue op_Implicit(double number);
    public static AnyValue op_Implicit(string text);
    public static AnyValue op_Implicit(XLError error);
    public static AnyValue op_Implicit(Array array);
    public static AnyValue op_Implicit(Reference reference);
    public bool get_IsBlank();
    public bool get_IsLogical();
    public bool get_IsNumber();
    public bool get_IsText();
    public bool get_IsError();
    public bool get_IsArray();
    public bool get_IsReference();
    public bool get_IsScalarType();
    public bool TryPickScalar(ScalarValue& scalar, OneOf`2& collection);
    public bool TryPickError(XLError& error);
    public bool TryPickArray(Array& array);
    public bool TryPickReference(Reference& reference, XLError& error);
    public bool TryPickArea(XLRangeAddress& area, XLError& error);
    internal bool TryPickSingleOrMultiValue(ScalarValue& scalar, Array& array, CalcContext ctx);
    public TResult Match(Func`1<TResult> transformBlank, Func`2<bool, TResult> transformLogical, Func`2<double, TResult> transformNumber, Func`2<string, TResult> transformText, Func`2<XLError, TResult> transformError, Func`2<Array, TResult> transformArray, Func`2<Reference, TResult> transformReference);
    public AnyValue ImplicitIntersection(CalcContext context);
    public static AnyValue ReferenceRange(AnyValue& left, AnyValue& right, CalcContext ctx);
    public static AnyValue ReferenceUnion(AnyValue& left, AnyValue& right);
    private static OneOf`2<Reference, XLError> ConvertToReference(AnyValue& value);
    public AnyValue UnaryPlus();
    public AnyValue UnaryMinus(CalcContext context);
    public AnyValue UnaryPercent(CalcContext context);
    private static AnyValue UnaryOperation(AnyValue& value, Func`2<double, double> operatorFn, CalcContext context);
    private static ScalarValue UnaryArithmeticOp(ScalarValue value, Func`2<double, double> op, CalcContext ctx);
    public static AnyValue BinaryPlus(AnyValue& left, AnyValue& right, CalcContext context);
    public static AnyValue BinaryMinus(AnyValue& left, AnyValue& right, CalcContext context);
    public static AnyValue BinaryMult(AnyValue& left, AnyValue& right, CalcContext context);
    public static AnyValue BinaryDiv(AnyValue& left, AnyValue& right, CalcContext context);
    public static AnyValue BinaryExp(AnyValue& left, AnyValue& right, CalcContext context);
    public static AnyValue IsEqual(AnyValue& left, AnyValue& right, CalcContext context);
    public static AnyValue IsNotEqual(AnyValue& left, AnyValue& right, CalcContext context);
    public static AnyValue IsGreaterThan(AnyValue& left, AnyValue& right, CalcContext context);
    public static AnyValue IsGreaterThanOrEqual(AnyValue& left, AnyValue& right, CalcContext context);
    public static AnyValue IsLessThan(AnyValue& left, AnyValue& right, CalcContext context);
    public static AnyValue IsLessThanOrEqual(AnyValue& left, AnyValue& right, CalcContext context);
    public static AnyValue Concat(AnyValue& left, AnyValue& right, CalcContext context);
    private static AnyValue BinaryOperation(AnyValue& left, AnyValue& right, BinaryFunc func, CalcContext context);
    private static ScalarValue BinaryArithmeticOp(ScalarValue& left, ScalarValue& right, BinaryNumberFunc func, CalcContext ctx);
    private static OneOf`2<int, XLError> CompareValues(ScalarValue left, ScalarValue right, CultureInfo culture);
    public virtual string ToString();
    public ValueTuple`2<int, int> GetArraySize();
    public Array GetArray();
}
[DefaultMemberAttribute("Item")]
internal abstract class ClosedXML.Excel.CalcEngine.Array : object {
    public int Width { get; }
    public int Height { get; }
    public ScalarValue Item { get; }
    public abstract virtual int get_Width();
    public abstract virtual int get_Height();
    public abstract virtual ScalarValue get_Item(int y, int x);
    public virtual IEnumerator`1<ScalarValue> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    [IteratorStateMachineAttribute("ClosedXML.Excel.CalcEngine.Array/<FlattenArray>d__8")]
protected IEnumerable`1<ScalarValue> FlattenArray();
    public Array Apply(Func`2<ScalarValue, ScalarValue> op);
    public Array Apply(Array rightArray, BinaryFunc func, CalcContext ctx);
    public Array Rescale(int rows, int columns);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class ClosedXML.Excel.CalcEngine.ArrayNode : ValueNode {
    [CompilerGeneratedAttribute]
private Array <Value>k__BackingField;
    public Array Value { get; }
    public ArrayNode(Array value);
    [CompilerGeneratedAttribute]
public Array get_Value();
    public virtual TResult Accept(TContext context, IFormulaVisitor`2<TContext, TResult> visitor);
}
internal abstract class ClosedXML.Excel.CalcEngine.AstNode : object {
    [NullableContextAttribute("1")]
public abstract virtual TResult Accept(TContext context, IFormulaVisitor`2<TContext, TResult> visitor);
}
internal class ClosedXML.Excel.CalcEngine.BinaryFunc : MulticastDelegate {
    public BinaryFunc(object object, IntPtr method);
    public virtual ScalarValue Invoke(ScalarValue& modreq(System.Runtime.InteropServices.InAttribute) lhs, ScalarValue& modreq(System.Runtime.InteropServices.InAttribute) rhs, CalcContext ctx);
    public virtual IAsyncResult BeginInvoke(ScalarValue& modreq(System.Runtime.InteropServices.InAttribute) lhs, ScalarValue& modreq(System.Runtime.InteropServices.InAttribute) rhs, CalcContext ctx, AsyncCallback callback, object object);
    public virtual ScalarValue EndInvoke(ScalarValue& modreq(System.Runtime.InteropServices.InAttribute) lhs, ScalarValue& modreq(System.Runtime.InteropServices.InAttribute) rhs, IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class ClosedXML.Excel.CalcEngine.BinaryNode : ValueNode {
    [CompilerGeneratedAttribute]
private BinaryOp <Operation>k__BackingField;
    [CompilerGeneratedAttribute]
private ValueNode <LeftExpression>k__BackingField;
    [CompilerGeneratedAttribute]
private ValueNode <RightExpression>k__BackingField;
    public BinaryOp Operation { get; }
    public ValueNode LeftExpression { get; }
    public ValueNode RightExpression { get; }
    public BinaryNode(BinaryOp operation, ValueNode exprLeft, ValueNode exprRight);
    [CompilerGeneratedAttribute]
public BinaryOp get_Operation();
    [CompilerGeneratedAttribute]
public ValueNode get_LeftExpression();
    [CompilerGeneratedAttribute]
public ValueNode get_RightExpression();
    public virtual TResult Accept(TContext context, IFormulaVisitor`2<TContext, TResult> visitor);
}
internal enum ClosedXML.Excel.CalcEngine.BinaryOp : Enum {
    public int value__;
    public static BinaryOp Concat;
    public static BinaryOp Add;
    public static BinaryOp Sub;
    public static BinaryOp Mult;
    public static BinaryOp Div;
    public static BinaryOp Exp;
    public static BinaryOp Lt;
    public static BinaryOp Lte;
    public static BinaryOp Eq;
    public static BinaryOp Neq;
    public static BinaryOp Gte;
    public static BinaryOp Gt;
    public static BinaryOp Range;
    public static BinaryOp Union;
    public static BinaryOp Intersection;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class ClosedXML.Excel.CalcEngine.CalcContext : object {
    private CalcEngine _calcEngine;
    [NullableAttribute("2")]
private XLWorkbook _workbook;
    [NullableAttribute("2")]
private XLWorksheet _worksheet;
    [NullableAttribute("2")]
private IXLAddress _formulaAddress;
    [CompilerGeneratedAttribute]
private CultureInfo <Culture>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsArrayCalculation>k__BackingField;
    internal CalcEngine CalcEngine { get; }
    public XLWorkbook Workbook { get; }
    public XLWorksheet Worksheet { get; }
    public IXLAddress FormulaAddress { get; }
    public CultureInfo Culture { get; }
    public bool UseImplicitIntersection { get; }
    public bool IsArrayCalculation { get; public set; }
    public CalcContext(CalcEngine calcEngine, CultureInfo culture, XLCell cell);
    [NullableContextAttribute("2")]
public CalcContext(CalcEngine calcEngine, CultureInfo culture, XLWorkbook workbook, XLWorksheet worksheet, IXLAddress formulaAddress);
    internal CalcEngine get_CalcEngine();
    public XLWorkbook get_Workbook();
    public XLWorksheet get_Worksheet();
    public IXLAddress get_FormulaAddress();
    [CompilerGeneratedAttribute]
public CultureInfo get_Culture();
    public bool get_UseImplicitIntersection();
    [CompilerGeneratedAttribute]
public bool get_IsArrayCalculation();
    [CompilerGeneratedAttribute]
public void set_IsArrayCalculation(bool value);
    [NullableContextAttribute("2")]
internal ScalarValue GetCellValue(XLWorksheet worksheet, int rowNumber, int columnNumber);
    internal IEnumerable`1<XLCell> GetNonBlankCells(Reference reference);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class ClosedXML.Excel.CalcEngine.CalcEngine : object {
    private CultureInfo _culture;
    private ExpressionCache _cache;
    private FormulaParser _parser;
    private CalculationVisitor _visitor;
    public CalcEngine(CultureInfo culture);
    public Formula Parse(string expression);
    [NullableContextAttribute("2")]
internal ScalarValue EvaluateFormula(string expression, XLWorkbook wb, XLWorksheet ws, IXLAddress address);
    internal Array EvaluateArrayFormula(string expression, XLCell masterCell);
    internal AnyValue EvaluateName(string nameFormula, XLWorksheet ws);
    private AnyValue EvaluateFormula(string expression, CalcContext ctx);
    private FunctionRegistry GetFunctionTable();
    private static ScalarValue ToCellContentValue(AnyValue value, CalcContext ctx);
}
internal class ClosedXML.Excel.CalcEngine.CalcEngineFunction : MulticastDelegate {
    public CalcEngineFunction(object object, IntPtr method);
    public virtual AnyValue Invoke(CalcContext ctx, Span`1<AnyValue> arg);
    public virtual IAsyncResult BeginInvoke(CalcContext ctx, Span`1<AnyValue> arg, AsyncCallback callback, object object);
    public virtual AnyValue EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class ClosedXML.Excel.CalcEngine.CalcEngineHelpers : object {
    private static Lazy`1<Dictionary`2<string, Tuple`2<string, string>>> patternReplacements;
    private static CalcEngineHelpers();
    internal static bool ValueSatisfiesCriteria(object value, object criteria, CalcEngine ce);
    [NullableContextAttribute("2")]
internal static bool ValueIsBlank(object value);
    [NullableContextAttribute("2")]
internal static long GetTotalCellsCount(XObjectExpression rangeExpression);
    [NullableContextAttribute("0")]
internal static ValueTuple`2<int, int> GetRangeDimensions(XObjectExpression rangeExpression);
    internal static bool TryExtractRange(Expression expression, IXLRange& range, XLError& calculationErrorType);
}
internal class ClosedXML.Excel.CalcEngine.CalculationVisitor : object {
    private FunctionRegistry _functions;
    private ArrayPool`1<AnyValue> _argsPool;
    public CalculationVisitor(FunctionRegistry functions);
    public sealed virtual AnyValue Visit(CalcContext context, ScalarNode node);
    public sealed virtual AnyValue Visit(CalcContext context, ArrayNode node);
    public sealed virtual AnyValue Visit(CalcContext context, UnaryNode node);
    public sealed virtual AnyValue Visit(CalcContext context, BinaryNode node);
    public sealed virtual AnyValue Visit(CalcContext context, FunctionNode functionNode);
    public sealed virtual AnyValue Visit(CalcContext context, ReferenceNode node);
    public sealed virtual AnyValue Visit(CalcContext context, NameNode node);
    public sealed virtual AnyValue Visit(CalcContext context, NotSupportedNode node);
    public sealed virtual AnyValue Visit(CalcContext context, StructuredReferenceNode node);
    public sealed virtual AnyValue Visit(CalcContext context, PrefixNode node);
    public sealed virtual AnyValue Visit(CalcContext context, FileNode node);
}
internal class ClosedXML.Excel.CalcEngine.CellRangeReference : object {
    [CompilerGeneratedAttribute]
private IXLRange <Range>k__BackingField;
    private bool _evaluating;
    public IXLRange Range { get; }
    public CellRangeReference(IXLRange range);
    [CompilerGeneratedAttribute]
public IXLRange get_Range();
    public sealed virtual object GetValue();
    [IteratorStateMachineAttribute("ClosedXML.Excel.CalcEngine.CellRangeReference/<GetEnumerator>d__5")]
public sealed virtual IEnumerator GetEnumerator();
    private object GetValue(IXLCell cell);
}
[DefaultMemberAttribute("Item")]
internal class ClosedXML.Excel.CalcEngine.ConstArray : Array {
    private ScalarValue[0...,0...] _data;
    public ScalarValue Item { get; }
    public int Width { get; }
    public int Height { get; }
    public ConstArray(ScalarValue[0...,0...] data);
    public virtual ScalarValue get_Item(int y, int x);
    public virtual int get_Width();
    public virtual int get_Height();
}
internal static class ClosedXML.Excel.CalcEngine.DateTimeParser : object {
    private static DateTimeStyles Style;
    private static ConcurrentDictionary`2<CultureInfo, String[]> CultureSpecificPatterns;
    private static String[] TimeOfDayPatterns;
    private static DateTimeParser();
    public static bool TryParseCultureDate(string s, CultureInfo culture, DateTime& date);
    public static bool TryParseTimeOfDay(string s, CultureInfo c, DateTime& timeOfDay);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class ClosedXML.Excel.CalcEngine.DefaultFormulaVisitor`1 : object {
    public virtual AstNode Visit(TContext context, UnaryNode node);
    public virtual AstNode Visit(TContext context, BinaryNode node);
    public virtual AstNode Visit(TContext context, FunctionNode node);
    public virtual AstNode Visit(TContext context, ScalarNode node);
    public virtual AstNode Visit(TContext context, ArrayNode node);
    public virtual AstNode Visit(TContext context, NotSupportedNode node);
    public virtual AstNode Visit(TContext context, ReferenceNode referenceNode);
    public virtual AstNode Visit(TContext context, NameNode nameNode);
    public virtual AstNode Visit(TContext context, StructuredReferenceNode node);
    public virtual AstNode Visit(TContext context, PrefixNode prefix);
    public virtual AstNode Visit(TContext context, FileNode node);
}
internal class ClosedXML.Excel.CalcEngine.EmptyValueExpression : Expression {
}
internal static class ClosedXML.Excel.CalcEngine.Engineering : object {
    public static void Register(FunctionRegistry ce);
}
internal class ClosedXML.Excel.CalcEngine.Exceptions.FormulaErrorException : Exception {
    [CompilerGeneratedAttribute]
private XLError <Error>k__BackingField;
    public XLError Error { get; }
    public FormulaErrorException(XLError error);
    [CompilerGeneratedAttribute]
public XLError get_Error();
}
internal class ClosedXML.Excel.CalcEngine.Exceptions.MissingContextException : InvalidOperationException {
}
internal class ClosedXML.Excel.CalcEngine.Expression : object {
    private object _value;
    public Expression(object value);
    public Expression(XLCellValue value);
    public virtual object Evaluate();
    public static string op_Implicit(Expression x);
    public static double op_Implicit(Expression x);
    public static bool op_Implicit(Expression x);
    public static DateTime op_Implicit(Expression x);
    public sealed virtual int CompareTo(Expression other);
}
[DefaultMemberAttribute("Item")]
internal class ClosedXML.Excel.CalcEngine.ExpressionCache : object {
    private ConditionalWeakTable`2<string, Formula> _cache;
    private CalcEngine _ce;
    public Formula Item { get; }
    public ExpressionCache(CalcEngine ce);
    public Formula get_Item(string expression);
}
public class ClosedXML.Excel.CalcEngine.ExpressionParseException : Exception {
    public ExpressionParseException(string message);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class ClosedXML.Excel.CalcEngine.FileNode : AstNode {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Numeric>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    public Nullable`1<int> Numeric { get; }
    public string Path { get; }
    [NullableContextAttribute("1")]
public FileNode(string path);
    public FileNode(int numeric);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Numeric();
    [CompilerGeneratedAttribute]
public string get_Path();
    [NullableContextAttribute("1")]
public virtual TResult Accept(TContext context, IFormulaVisitor`2<TContext, TResult> visitor);
}
internal static class ClosedXML.Excel.CalcEngine.Financial : object {
    public static void Register(FunctionRegistry ce);
    private static object Pmt(List`1<Expression> p);
}
internal class ClosedXML.Excel.CalcEngine.Formula : object {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private ValueNode <AstRoot>k__BackingField;
    [CompilerGeneratedAttribute]
private FormulaFlags <Flags>k__BackingField;
    public string Text { get; }
    public ValueNode AstRoot { get; }
    public FormulaFlags Flags { get; }
    public Formula(string text, ValueNode root, FormulaFlags flags);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public ValueNode get_AstRoot();
    [CompilerGeneratedAttribute]
public FormulaFlags get_Flags();
}
[FlagsAttribute]
internal enum ClosedXML.Excel.CalcEngine.FormulaFlags : Enum {
    public byte value__;
    public static FormulaFlags None;
    public static FormulaFlags Volatile;
    public static FormulaFlags SideEffect;
    public static FormulaFlags HasSubtotal;
}
internal class ClosedXML.Excel.CalcEngine.FormulaParser : object {
    private static string DefaultFunctionNameSpace;
    private static Dictionary`2<string, UnaryOp> PrefixOpMap;
    private static Dictionary`2<string, BinaryOp> BinaryOpMap;
    private static Dictionary`2<string, XLError> ErrorMap;
    private static Dictionary`2<string, ReferenceItemType> RangeTermMap;
    private static Func`2<AstNode, bool> IsErrorNode;
    private Parser _parser;
    private FunctionRegistry _fnTbl;
    public FormulaParser(FunctionRegistry functionRegistry);
    private static FormulaParser();
    internal ParseTree ParseCst(string formulaText);
    public Formula ConvertToAst(ParseTree cst);
    private ExcelFormulaGrammar GetGrammar();
    private void CreateNumberNode(AstContext context, ParseTreeNode parseNode);
    private void CreateBoolNode(AstContext context, ParseTreeNode parseNode);
    private void CreateTextNode(AstContext context, ParseTreeNode parseNode);
    private void CreateErrorNode(AstContext context, ParseTreeNode parseNode);
    private AstNodeFactory GetFunctionCallNodeFactory();
    private AstNodeFactory CreateReferenceNodeFactory();
    private AstNodeFactory CreateReferenceFunctionCallNodeFactory();
    private AstNodeFactory GetPrefixNodeCreator();
    private AstNodeFactory CreateFileNodeFactory();
    private void CreateUserDefinedFunctionNode(AstContext context, ParseTreeNode parseNode);
    private FunctionNode CreateExcelFunctionCallExpression(AstContext ctx, ParseTreeNode nameNode, ParseTreeNode argumentsNode);
    private static AstNodeCreator CreateCopyNode(int childIndex);
    private static AstNodeCreator CreateNotImplementedNode(string featureText);
    private void CreateUnionNode(AstContext context, ParseTreeNode parseNode);
    private void CreateEmptyArgumentNode(AstContext context, ParseTreeNode parseNode);
    private static void CreateArrayColumnsNode(AstContext context, ParseTreeNode parseNode);
    private static void CreateArrayConstantNode(AstContext context, ParseTreeNode parseNode);
    public void CreateStructuredReferenceNode(AstContext context, ParseTreeNode parseNode);
    private static string RemoveExclamationMark(string sheetName);
    private string StripBrackets(string fileName);
    private static NodePredicate[] For(NodePredicate[] conditions);
    [CompilerGeneratedAttribute]
private AstNode <GetFunctionCallNodeFactory>b__16_2(ParseTreeNode node, AstContext ctx);
    [CompilerGeneratedAttribute]
private AstNode <CreateReferenceFunctionCallNodeFactory>b__18_3(ParseTreeNode node, AstContext ctx);
    [CompilerGeneratedAttribute]
private AstNode <CreateFileNodeFactory>b__20_0(ParseTreeNode node);
    [CompilerGeneratedAttribute]
private AstNode <CreateFileNodeFactory>b__20_2(ParseTreeNode node);
}
internal static class ClosedXML.Excel.CalcEngine.FractionParser : object {
    private static Regex FractionRegex;
    private static FractionParser();
    public static bool TryParse(string s, Double& result);
    [CompilerGeneratedAttribute]
internal static int <TryParse>g__ParseInt|1_0(Capture capture);
}
internal class ClosedXML.Excel.CalcEngine.FunctionDefinition : object {
    [NullableAttribute("2")]
private CalcEngineFunction _function;
    [NullableAttribute("2")]
private LegacyCalcEngineFunction _legacyFunction;
    private FunctionFlags _flags;
    private AllowRange _allowRanges;
    [NullableAttribute("1")]
private IReadOnlyCollection`1<int> _markedParams;
    [CompilerGeneratedAttribute]
private int <MinParams>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxParams>k__BackingField;
    public int MinParams { get; }
    public int MaxParams { get; }
    [NullableContextAttribute("1")]
public FunctionDefinition(int minParams, int maxParams, CalcEngineFunction function, FunctionFlags flags, AllowRange allowRanges, IReadOnlyCollection`1<int> markedParams);
    [NullableContextAttribute("1")]
public FunctionDefinition(int minParams, int maxParams, LegacyCalcEngineFunction function, AllowRange allowRanges, IReadOnlyCollection`1<int> markedParams);
    [CompilerGeneratedAttribute]
public int get_MinParams();
    [CompilerGeneratedAttribute]
public int get_MaxParams();
    public AnyValue CallFunction(CalcContext ctx, Span`1<AnyValue> args);
    public AnyValue CallAsArray(CalcContext ctx, Span`1<AnyValue> args);
    private AnyValue EvaluateFunction(CalcContext ctx, Span`1<AnyValue> args);
    private void IntersectArguments(CalcContext ctx, Span`1<AnyValue> args);
    [NullableContextAttribute("1")]
private static AnyValue ConvertLegacyFormulaValueToAnyValue(object result);
    [NullableContextAttribute("1")]
private static Expression ConvertAnyValueToLegacyExpression(CalcContext context, AnyValue arg);
    private ValueTuple`2<int, int> GetScalarArgsMaxSize(Span`1<AnyValue> args);
    private bool IsParameterSingleValue(int paramIndex);
}
[FlagsAttribute]
internal enum ClosedXML.Excel.CalcEngine.FunctionFlags : Enum {
    public int value__;
    public static FunctionFlags Scalar;
    public static FunctionFlags Range;
    public static FunctionFlags SideEffect;
    public static FunctionFlags ReturnsArray;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class ClosedXML.Excel.CalcEngine.FunctionNode : ValueNode {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private PrefixNode <Prefix>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ValueNode> <Parameters>k__BackingField;
    [NullableAttribute("2")]
public PrefixNode Prefix { get; }
    public string Name { get; }
    public List`1<ValueNode> Parameters { get; }
    public FunctionNode(string name, List`1<ValueNode> parms);
    public FunctionNode(PrefixNode prefix, string name, List`1<ValueNode> parms);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public PrefixNode get_Prefix();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public List`1<ValueNode> get_Parameters();
    public virtual TResult Accept(TContext context, IFormulaVisitor`2<TContext, TResult> visitor);
}
internal class ClosedXML.Excel.CalcEngine.FunctionRegistry : object {
    private Dictionary`2<string, FunctionDefinition> _func;
    public bool TryGetFunc(string name, FunctionDefinition& func);
    public void RegisterFunction(string functionName, int minParams, int maxParams, CalcEngineFunction fn, FunctionFlags flags, AllowRange allowRanges, Int32[] markedParams);
    public void RegisterFunction(string functionName, int paramCount, LegacyCalcEngineFunction fn, AllowRange allowRanges, Int32[] markedParams);
    public void RegisterFunction(string functionName, int minParams, int maxParams, LegacyCalcEngineFunction fn, AllowRange allowRanges, Int32[] markedParams);
    public bool TryGetFunc(string name, Int32& paramMin, Int32& paramMax);
}
[ExtensionAttribute]
internal static class ClosedXML.Excel.CalcEngine.Functions.ArgumentsExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static OneOf`2<TValue, XLError> Aggregate(Span`1<AnyValue> args, CalcContext ctx, TValue initialValue, OneOf`2<TValue, XLError> noElementsResult, Func`3<TValue, TValue, TValue> aggregate, Func`3<ScalarValue, CalcContext, OneOf`2<TValue, XLError>> convert, Func`2<ScalarValue, bool> includeCollectionElement);
}
internal static class ClosedXML.Excel.CalcEngine.Functions.Database : object {
    public static void Register(FunctionRegistry ce);
    private static object Daverage(List`1<Expression> p);
}
internal static class ClosedXML.Excel.CalcEngine.Functions.DateAndTime : object {
    public static void Register(FunctionRegistry ce);
    private static int BusinessDaysUntil(DateTime firstDay, DateTime lastDay, IEnumerable`1<DateTime> bankHolidays);
    private static object Date(List`1<Expression> p);
    private static object Datedif(List`1<Expression> p);
    private static object Datevalue(List`1<Expression> p);
    private static object Day(List`1<Expression> p);
    private static object Days(List`1<Expression> p);
    private static object Days360(List`1<Expression> p);
    private static int Days360(DateTime date1, DateTime date2, bool isEuropean);
    private static object Edate(List`1<Expression> p);
    private static object Eomonth(List`1<Expression> p);
    private static double GetYearAverage(DateTime date1, DateTime date2);
    private static object Hour(List`1<Expression> p);
    private static object IsoWeekNum(List`1<Expression> p);
    private static object Minute(List`1<Expression> p);
    private static object Month(List`1<Expression> p);
    private static object Networkdays(List`1<Expression> p);
    private static object Now(List`1<Expression> p);
    private static object Second(List`1<Expression> p);
    private static object Time(List`1<Expression> p);
    private static object Timevalue(List`1<Expression> p);
    private static object Today(List`1<Expression> p);
    private static object Weekday(List`1<Expression> p);
    private static object Weeknum(List`1<Expression> p);
    private static object Workday(List`1<Expression> p);
    private static DateTime Workday(DateTime startDate, DateTime testDate, int daysRequired, IEnumerable`1<DateTime> bankHolidays);
    private static object Year(List`1<Expression> p);
    private static object Yearfrac(List`1<Expression> p);
}
internal static class ClosedXML.Excel.CalcEngine.Functions.Information : object {
    public static void Register(FunctionRegistry ce);
    private static AnyValue ErrorType(CalcContext ctx, ScalarValue value);
    private static AnyValue IsBlank(CalcContext ctx, ScalarValue value);
    private static AnyValue IsErr(CalcContext ctx, ScalarValue value);
    private static AnyValue IsError(CalcContext ctx, ScalarValue value);
    private static AnyValue IsEven(CalcContext ctx, AnyValue value);
    private static AnyValue IsLogical(CalcContext ctx, ScalarValue value);
    private static AnyValue IsNa(CalcContext ctx, ScalarValue value);
    private static AnyValue IsNonText(CalcContext ctx, ScalarValue value);
    private static AnyValue IsNumber(CalcContext ctx, ScalarValue value);
    private static AnyValue IsOdd(CalcContext ctx, AnyValue value);
    private static AnyValue IsRef(CalcContext ctx, AnyValue value);
    private static AnyValue IsText(CalcContext ctx, ScalarValue value);
    private static AnyValue N(CalcContext ctx, AnyValue value);
    private static AnyValue NA(CalcContext ctx, Span`1<AnyValue> value);
    private static AnyValue Type(CalcContext ctx, AnyValue value);
    private static AnyValue GetParity(CalcContext ctx, AnyValue value, Func`3<ScalarValue, CalcContext, ScalarValue> f);
    [CompilerGeneratedAttribute]
internal static ScalarValue <N>g__ToNumber|13_1(ScalarValue scalar);
}
internal static class ClosedXML.Excel.CalcEngine.Functions.Lookup : object {
    public static void Register(FunctionRegistry ce);
    private static AnyValue Column(CalcContext ctx, Span`1<AnyValue> p);
    private static AnyValue Columns(CalcContext _, AnyValue value);
    private static object Hlookup(List`1<Expression> p);
    private static AnyValue Hyperlink(CalcContext ctx, string linkLocation, Nullable`1<ScalarValue> friendlyName);
    private static object Index(List`1<Expression> p);
    private static object Match(List`1<Expression> p);
    private static AnyValue Row(CalcContext ctx, Span`1<AnyValue> p);
    private static AnyValue Rows(CalcContext _, AnyValue value);
    private static AnyValue Transpose(CalcContext ctx, AnyValue value);
    private static AnyValue Vlookup(CalcContext ctx, ScalarValue lookupValue, AnyValue rangeValue, ScalarValue columnIndex, ScalarValue flagValue);
    private static int Bisection(Array range, ScalarValue lookupValue);
    private static int FindMiddle(Array range, int low, int high, ScalarValue& lookupValue);
    private static int FindSameTypeRow(Array range, int limitRow, int delta, int startRow, ScalarValue& lookupValue);
    private static AnyValue RowsOrColumns(AnyValue value, bool rows);
}
internal static class ClosedXML.Excel.CalcEngine.Functions.SignatureAdapter : object {
    public static CalcEngineFunction Adapt(Func`1<AnyValue> f);
    public static CalcEngineFunction AdaptCoerced(Func`2<bool, AnyValue> f);
    public static CalcEngineFunction Adapt(Func`2<double, AnyValue> f);
    public static CalcEngineFunction Adapt(Func`4<CalcContext, string, Nullable`1<ScalarValue>, AnyValue> f);
    public static CalcEngineFunction Adapt(Func`3<CalcContext, AnyValue, AnyValue> f);
    public static CalcEngineFunction Adapt(Func`3<CalcContext, ScalarValue, AnyValue> f);
    public static CalcEngineFunction Adapt(Func`3<ScalarValue, ScalarValue, AnyValue> f);
    public static CalcEngineFunction AdaptLastOptional(Func`4<ScalarValue, AnyValue, AnyValue, AnyValue> f, AnyValue lastDefault);
    public static CalcEngineFunction Adapt(Func`4<CalcContext, double, List`1<Reference>, AnyValue> f);
    public static CalcEngineFunction AdaptLastOptional(Func`5<CalcContext, string, string, OneOf`2<double, Blank>, AnyValue> f);
    public static CalcEngineFunction AdaptLastOptional(Func`6<CalcContext, ScalarValue, AnyValue, ScalarValue, ScalarValue, AnyValue> f);
    private static OneOf`2<bool, XLError> CoerceToLogical(AnyValue& value, CalcContext ctx);
    private static OneOf`2<double, XLError> ToNumber(AnyValue& value, CalcContext ctx);
    private static OneOf`2<string, XLError> ToText(AnyValue& value, CalcContext ctx);
    private static OneOf`2<ScalarValue, XLError> ToScalarValue(AnyValue& value, CalcContext ctx);
}
public static class ClosedXML.Excel.CalcEngine.Functions.XLMath : object {
    public static double DegreesToRadians(double degrees);
    public static double RadiansToDegrees(double radians);
    public static double GradsToRadians(double grads);
    public static double RadiansToGrads(double radians);
    public static double DegreesToGrads(double degrees);
    public static double GradsToDegrees(double grads);
    public static double ASinh(double x);
    public static double ACosh(double x);
    public static double ATanh(double x);
    public static double ACoth(double x);
    public static double ASech(double x);
    public static double ACsch(double x);
    public static double Sech(double x);
    public static double Csch(double x);
    public static double Coth(double x);
    public static double Combin(int n, int k);
    public static bool IsEven(int value);
    public static bool IsOdd(int value);
    public static string ToRoman(int number);
    public static int RomanToArabic(string text);
    public static string ChangeBase(long number, int radix);
}
[DefaultMemberAttribute("Item")]
internal class ClosedXML.Excel.CalcEngine.Functions.XLMatrix : object {
    public XLMatrix L;
    public XLMatrix U;
    public int cols;
    private double detOfP;
    public Double[0...,0...] mat;
    private Int32[] pi;
    public int rows;
    public double Item { get; public set; }
    public XLMatrix(int iRows, int iCols);
    public XLMatrix(Double[0...,0...] arr);
    public double get_Item(int iRow, int iCol);
    public void set_Item(int iRow, int iCol, double value);
    public bool IsSquare();
    public XLMatrix GetCol(int k);
    public void SetCol(XLMatrix v, int k);
    public void MakeLU();
    public XLMatrix SolveWith(XLMatrix v);
    public XLMatrix Invert();
    public double Determinant();
    public XLMatrix GetP();
    public XLMatrix Duplicate();
    public static XLMatrix SubsForth(XLMatrix A, XLMatrix b);
    public static XLMatrix SubsBack(XLMatrix A, XLMatrix b);
    public static XLMatrix ZeroMatrix(int iRows, int iCols);
    public static XLMatrix IdentityMatrix(int iRows, int iCols);
    public static XLMatrix RandomMatrix(int iRows, int iCols, int dispersion);
    public static XLMatrix Parse(string ps);
    public virtual string ToString();
    public static XLMatrix Transpose(XLMatrix m);
    public static XLMatrix Power(XLMatrix m, int pow);
    private static void SafeAplusBintoC(XLMatrix A, int xa, int ya, XLMatrix B, int xb, int yb, XLMatrix C, int size);
    private static void SafeAminusBintoC(XLMatrix A, int xa, int ya, XLMatrix B, int xb, int yb, XLMatrix C, int size);
    private static void SafeACopytoC(XLMatrix A, int xa, int ya, XLMatrix C, int size);
    private static void AplusBintoC(XLMatrix A, int xa, int ya, XLMatrix B, int xb, int yb, XLMatrix C, int size);
    private static void AminusBintoC(XLMatrix A, int xa, int ya, XLMatrix B, int xb, int yb, XLMatrix C, int size);
    private static void ACopytoC(XLMatrix A, int xa, int ya, XLMatrix C, int size);
    private static XLMatrix StrassenMultiply(XLMatrix A, XLMatrix B);
    private static void StrassenMultiplyRun(XLMatrix A, XLMatrix B, XLMatrix C, int l, XLMatrix[0...,0...] f);
    public static XLMatrix StupidMultiply(XLMatrix m1, XLMatrix m2);
    private static XLMatrix Multiply(double n, XLMatrix m);
    private static XLMatrix Add(XLMatrix m1, XLMatrix m2);
    public static string NormalizeMatrixString(string matStr);
    public static XLMatrix op_UnaryNegation(XLMatrix m);
    public static XLMatrix op_Addition(XLMatrix m1, XLMatrix m2);
    public static XLMatrix op_Subtraction(XLMatrix m1, XLMatrix m2);
    public static XLMatrix op_Multiply(XLMatrix m1, XLMatrix m2);
    public static XLMatrix op_Multiply(double n, XLMatrix m);
}
internal interface ClosedXML.Excel.CalcEngine.IFormulaVisitor`2 {
    public abstract virtual TResult Visit(TContext context, ScalarNode node);
    public abstract virtual TResult Visit(TContext context, ArrayNode node);
    public abstract virtual TResult Visit(TContext context, UnaryNode node);
    public abstract virtual TResult Visit(TContext context, BinaryNode node);
    public abstract virtual TResult Visit(TContext context, FunctionNode node);
    public abstract virtual TResult Visit(TContext context, NotSupportedNode node);
    public abstract virtual TResult Visit(TContext context, ReferenceNode node);
    public abstract virtual TResult Visit(TContext context, NameNode node);
    public abstract virtual TResult Visit(TContext context, StructuredReferenceNode node);
    public abstract virtual TResult Visit(TContext context, PrefixNode node);
    public abstract virtual TResult Visit(TContext context, FileNode node);
}
public interface ClosedXML.Excel.CalcEngine.IValueObject {
    public abstract virtual object GetValue();
}
internal class ClosedXML.Excel.CalcEngine.LegacyCalcEngineFunction : MulticastDelegate {
    public LegacyCalcEngineFunction(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual object Invoke(List`1<Expression> parms);
    public virtual IAsyncResult BeginInvoke(List`1<Expression> parms, AsyncCallback callback, object object);
    public virtual object EndInvoke(IAsyncResult result);
}
internal static class ClosedXML.Excel.CalcEngine.Logical : object {
    public static void Register(FunctionRegistry ce);
    private static AnyValue And(CalcContext ctx, Span`1<AnyValue> args);
    private static AnyValue False();
    private static AnyValue If(ScalarValue condition, AnyValue valueIfTrue, AnyValue valueIfFalse);
    private static AnyValue IfError(ScalarValue potentialError, ScalarValue alternative);
    private static AnyValue Not(bool value);
    private static AnyValue Or(CalcContext ctx, Span`1<AnyValue> args);
    private static AnyValue True();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class ClosedXML.Excel.CalcEngine.MathTrig : object {
    private static Random _rnd;
    private static MathTrig();
    public static void Register(FunctionRegistry ce);
    public static double ASinh(double x);
    public static double DegreesToGrads(double degrees);
    public static double DegreesToRadians(double degrees);
    public static double GradsToDegrees(double grads);
    public static double GradsToRadians(double grads);
    public static double RadiansToDegrees(double radians);
    public static double RadiansToGrads(double radians);
    private static AnyValue Abs(double number);
    private static object Acos(List`1<Expression> p);
    private static object Acosh(List`1<Expression> p);
    private static object Acot(List`1<Expression> p);
    private static object Acoth(List`1<Expression> p);
    private static object Arabic(List`1<Expression> p);
    private static object Asin(List`1<Expression> p);
    private static object Asinh(List`1<Expression> p);
    private static object Atan(List`1<Expression> p);
    private static object Atan2(List`1<Expression> p);
    private static object Atanh(List`1<Expression> p);
    private static object Base(List`1<Expression> p);
    private static object Ceiling(List`1<Expression> p);
    private static object CeilingMath(List`1<Expression> p);
    private static object Combin(List`1<Expression> p);
    private static object CombinA(List`1<Expression> p);
    private static object Cos(List`1<Expression> p);
    private static object Cosh(List`1<Expression> p);
    private static object Cot(List`1<Expression> p);
    private static object Coth(List`1<Expression> p);
    private static object Csc(List`1<Expression> p);
    private static object Csch(List`1<Expression> p);
    private static object Decimal(List`1<Expression> p);
    private static object Degrees(List`1<Expression> p);
    private static object Even(List`1<Expression> p);
    private static object Exp(List`1<Expression> p);
    private static object Fact(List`1<Expression> p);
    private static object FactDouble(List`1<Expression> p);
    private static object Floor(List`1<Expression> p);
    private static object FloorMath(List`1<Expression> p);
    private static object Gcd(List`1<Expression> p);
    private static int Gcd(int a, int b);
    private static Double[0...,0...] GetArray(Expression expression);
    private static object Int(List`1<Expression> p);
    private static object Lcm(List`1<Expression> p);
    private static int Lcm(int a, int b);
    private static object Ln(List`1<Expression> p);
    private static object Log(List`1<Expression> p);
    private static object Log10(List`1<Expression> p);
    private static object MDeterm(List`1<Expression> p);
    private static object MInverse(List`1<Expression> p);
    private static object MMult(List`1<Expression> p);
    private static object Mod(List`1<Expression> p);
    private static object MRound(List`1<Expression> p);
    private static object Multinomial(List`1<Expression> p);
    private static double Multinomial(List`1<double> numbers);
    private static object Odd(List`1<Expression> p);
    private static object Pi(List`1<Expression> p);
    private static object Power(List`1<Expression> p);
    private static object Product(List`1<Expression> p);
    private static object Quotient(List`1<Expression> p);
    private static object Radians(List`1<Expression> p);
    private static object Rand(List`1<Expression> p);
    private static object RandBetween(List`1<Expression> p);
    private static object Roman(List`1<Expression> p);
    private static object Round(List`1<Expression> p);
    private static object RoundDown(List`1<Expression> p);
    private static object RoundUp(List`1<Expression> p);
    private static object Sec(List`1<Expression> p);
    private static object Sech(List`1<Expression> p);
    private static object SeriesSum(List`1<Expression> p);
    private static object Sign(List`1<Expression> p);
    private static object Sin(List`1<Expression> p);
    private static object Sinh(List`1<Expression> p);
    private static object Sqrt(List`1<Expression> p);
    private static object SqrtPi(List`1<Expression> p);
    private static AnyValue Subtotal(CalcContext ctx, double number, List`1<Reference> p);
    [NullableContextAttribute("0")]
private static AnyValue Sum(CalcContext ctx, Span`1<AnyValue> args);
    private static object SumIf(List`1<Expression> p);
    private static object SumIfs(List`1<Expression> p);
    private static object SumProduct(List`1<Expression> p);
    private static object SumSq(List`1<Expression> p);
    private static object Tan(List`1<Expression> p);
    private static object Tanh(List`1<Expression> p);
    private static object Trunc(List`1<Expression> p);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class ClosedXML.Excel.CalcEngine.NameNode : ValueNode {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private PrefixNode <Prefix>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [NullableAttribute("2")]
public PrefixNode Prefix { get; }
    public string Name { get; }
    public NameNode(PrefixNode prefix, string name);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public PrefixNode get_Prefix();
    [CompilerGeneratedAttribute]
public string get_Name();
    public virtual TResult Accept(TContext context, IFormulaVisitor`2<TContext, TResult> visitor);
    public AnyValue GetValue(XLWorksheet ctxWs, CalcEngine engine);
    internal bool TryGetNameRange(IXLWorksheet ws, IXLNamedRange& range);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class ClosedXML.Excel.CalcEngine.NotSupportedNode : ValueNode {
    [CompilerGeneratedAttribute]
private string <FeatureName>k__BackingField;
    public string FeatureName { get; }
    public NotSupportedNode(string featureName);
    [CompilerGeneratedAttribute]
public string get_FeatureName();
    public virtual TResult Accept(TContext context, IFormulaVisitor`2<TContext, TResult> visitor);
}
[DefaultMemberAttribute("Item")]
internal class ClosedXML.Excel.CalcEngine.NumberArray : Array {
    private Double[0...,0...] _data;
    public ScalarValue Item { get; }
    public int Width { get; }
    public int Height { get; }
    public NumberArray(Double[0...,0...] data);
    public virtual ScalarValue get_Item(int y, int x);
    public virtual int get_Width();
    public virtual int get_Height();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
internal class ClosedXML.Excel.CalcEngine.OneOf`2 : ValueType {
    private bool _isT0;
    private T0 _t0;
    private T1 _t1;
    private OneOf`2(bool isT0, T0 t0, T1 t1);
    public bool TryPickT0(T0& t0, T1& t1);
    [NullableContextAttribute("1")]
public static OneOf`2<T0, T1> FromT0(T0 t0);
    [NullableContextAttribute("1")]
public static OneOf`2<T0, T1> FromT1(T1 t1);
    [NullableContextAttribute("1")]
public static OneOf`2<T0, T1> op_Implicit(T0 t0);
    [NullableContextAttribute("1")]
public static OneOf`2<T0, T1> op_Implicit(T1 t1);
    [NullableContextAttribute("1")]
public TResult Match(Func`2<T0, TResult> transformT0, Func`2<T1, TResult> transformT1);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class ClosedXML.Excel.CalcEngine.PrefixNode : AstNode {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private FileNode <File>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Sheet>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FirstSheet>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LastSheet>k__BackingField;
    [NullableAttribute("2")]
public FileNode File { get; }
    public string Sheet { get; }
    public string FirstSheet { get; }
    public string LastSheet { get; }
    public PrefixNode(FileNode file, string sheet, string firstSheet, string lastSheet);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public FileNode get_File();
    [CompilerGeneratedAttribute]
public string get_Sheet();
    [CompilerGeneratedAttribute]
public string get_FirstSheet();
    [CompilerGeneratedAttribute]
public string get_LastSheet();
    public virtual TResult Accept(TContext context, IFormulaVisitor`2<TContext, TResult> visitor);
    internal OneOf`2<IXLWorksheet, XLError> GetWorksheet(XLWorkbook wb);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class ClosedXML.Excel.CalcEngine.Reference : object {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<XLRangeAddress> <Areas>k__BackingField;
    internal IReadOnlyList`1<XLRangeAddress> Areas { get; }
    public Reference(XLRangeAddress area);
    public Reference(List`1<XLRangeAddress> areas);
    public Reference(IXLRanges ranges);
    [CompilerGeneratedAttribute]
internal IReadOnlyList`1<XLRangeAddress> get_Areas();
    [IteratorStateMachineAttribute("ClosedXML.Excel.CalcEngine.Reference/<GetCellsValues>d__6")]
public IEnumerable`1<ScalarValue> GetCellsValues(CalcContext ctx);
    public static OneOf`2<Reference, XLError> RangeOp(Reference lhs, Reference rhs, XLWorksheet contextWorksheet);
    public static Reference UnionOp(Reference lhs, Reference rhs);
    public static OneOf`2<Reference, XLError> Intersect(Reference lhs, Reference rhs, CalcContext ctx);
    public OneOf`2<Reference, XLError> ImplicitIntersection(IXLAddress formulaAddress);
    internal bool IsSingleCell();
    internal bool TryGetSingleCellValue(ScalarValue& value, CalcContext ctx);
    internal OneOf`2<Array, XLError> ToArray(CalcContext context);
    public OneOf`2<Array, XLError> Apply(Func`2<ScalarValue, ScalarValue> op, CalcContext context);
}
[DefaultMemberAttribute("Item")]
internal class ClosedXML.Excel.CalcEngine.ReferenceArray : Array {
    private XLRangeAddress _area;
    private CalcContext _context;
    private int _offsetColumn;
    private int _offsetRow;
    public ScalarValue Item { get; }
    public int Width { get; }
    public int Height { get; }
    public ReferenceArray(XLRangeAddress area, CalcContext context);
    public virtual ScalarValue get_Item(int y, int x);
    public virtual int get_Width();
    public virtual int get_Height();
}
internal enum ClosedXML.Excel.CalcEngine.ReferenceItemType : Enum {
    public int value__;
    public static ReferenceItemType Cell;
    public static ReferenceItemType VRange;
    public static ReferenceItemType HRange;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class ClosedXML.Excel.CalcEngine.ReferenceNode : ValueNode {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private PrefixNode <Prefix>k__BackingField;
    [CompilerGeneratedAttribute]
private ReferenceItemType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Address>k__BackingField;
    [NullableAttribute("2")]
public PrefixNode Prefix { get; }
    public ReferenceItemType Type { get; }
    public string Address { get; }
    public ReferenceNode(PrefixNode prefix, ReferenceItemType type, string address);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public PrefixNode get_Prefix();
    [CompilerGeneratedAttribute]
public ReferenceItemType get_Type();
    [CompilerGeneratedAttribute]
public string get_Address();
    public virtual TResult Accept(TContext context, IFormulaVisitor`2<TContext, TResult> visitor);
    public AnyValue GetReference(CalcContext ctx);
}
[DefaultMemberAttribute("Item")]
internal class ClosedXML.Excel.CalcEngine.RepeatedColumnArray : Array {
    private Array _columnArray;
    [CompilerGeneratedAttribute]
private int <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Height>k__BackingField;
    public int Width { get; }
    public int Height { get; }
    public ScalarValue Item { get; }
    public RepeatedColumnArray(Array oneColumnArray, int rows, int columns);
    [CompilerGeneratedAttribute]
public virtual int get_Width();
    [CompilerGeneratedAttribute]
public virtual int get_Height();
    public virtual ScalarValue get_Item(int row, int column);
}
[DefaultMemberAttribute("Item")]
internal class ClosedXML.Excel.CalcEngine.RepeatedRowArray : Array {
    private Array _rowArray;
    [CompilerGeneratedAttribute]
private int <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Height>k__BackingField;
    public int Width { get; }
    public int Height { get; }
    public ScalarValue Item { get; }
    internal RepeatedRowArray(Array oneRowArray, int rows, int columns);
    [CompilerGeneratedAttribute]
public virtual int get_Width();
    [CompilerGeneratedAttribute]
public virtual int get_Height();
    public virtual ScalarValue get_Item(int row, int column);
}
[DefaultMemberAttribute("Item")]
internal class ClosedXML.Excel.CalcEngine.ResizedArray : Array {
    private Array _original;
    [CompilerGeneratedAttribute]
private int <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Height>k__BackingField;
    public int Width { get; }
    public int Height { get; }
    public ScalarValue Item { get; }
    public ResizedArray(Array original, int rows, int columns);
    [CompilerGeneratedAttribute]
public virtual int get_Width();
    [CompilerGeneratedAttribute]
public virtual int get_Height();
    public virtual ScalarValue get_Item(int y, int x);
}
[DefaultMemberAttribute("Item")]
internal class ClosedXML.Excel.CalcEngine.ScalarArray : Array {
    private ScalarValue _value;
    private int _columns;
    private int _rows;
    public int Width { get; }
    public int Height { get; }
    public ScalarValue Item { get; }
    public ScalarArray(ScalarValue value, int columns, int rows);
    public virtual int get_Width();
    public virtual int get_Height();
    public virtual ScalarValue get_Item(int y, int x);
    public virtual IEnumerator`1<ScalarValue> GetEnumerator();
    [CompilerGeneratedAttribute]
private ScalarValue <GetEnumerator>b__10_0(int _);
}
internal class ClosedXML.Excel.CalcEngine.ScalarNode : ValueNode {
    [CompilerGeneratedAttribute]
private ScalarValue <Value>k__BackingField;
    public ScalarValue Value { get; }
    public ScalarNode(ScalarValue value);
    [CompilerGeneratedAttribute]
public ScalarValue get_Value();
    [NullableContextAttribute("1")]
public virtual TResult Accept(TContext context, IFormulaVisitor`2<TContext, TResult> visitor);
}
[IsReadOnlyAttribute]
internal class ClosedXML.Excel.CalcEngine.ScalarValue : ValueType {
    private static int BlankValue;
    private static int LogicalValue;
    private static int NumberValue;
    private static int TextValue;
    private static int ErrorValue;
    private byte _index;
    private bool _logical;
    private double _number;
    private string _text;
    private XLError _error;
    public static ScalarValue Blank;
    public bool IsBlank { get; }
    public bool IsLogical { get; }
    public bool IsNumber { get; }
    public bool IsText { get; }
    public bool IsError { get; }
    private ScalarValue(byte index, bool logical, double number, string text, XLError error);
    private static ScalarValue();
    public bool get_IsBlank();
    public bool get_IsLogical();
    public bool get_IsNumber();
    public bool get_IsText();
    public bool get_IsError();
    public static ScalarValue From(bool logical);
    public static ScalarValue From(double number);
    public static ScalarValue From(string text);
    public static ScalarValue From(XLError error);
    public static ScalarValue op_Implicit(bool logical);
    public static ScalarValue op_Implicit(double number);
    public static ScalarValue op_Implicit(string text);
    public static ScalarValue op_Implicit(XLError error);
    public static ScalarValue op_Implicit(XLCellValue cellValue);
    public bool GetLogical();
    public double GetNumber();
    public string GetText();
    public XLError GetError();
    internal XLCellValue ToCellValue();
    public TResult Match(Func`1<TResult> transformBlank, Func`2<bool, TResult> transformLogical, Func`2<double, TResult> transformNumber, Func`2<string, TResult> transformText, Func`2<XLError, TResult> transformError);
    public TResult Match(TParam1 param, Func`2<TParam1, TResult> transformBlank, Func`3<bool, TParam1, TResult> transformLogical, Func`3<double, TParam1, TResult> transformNumber, Func`3<string, TParam1, TResult> transformText, Func`3<XLError, TParam1, TResult> transformError);
    public TResult Match(TParam1 param1, TParam2 param2, Func`3<TParam1, TParam2, TResult> transformBlank, Func`4<bool, TParam1, TParam2, TResult> transformLogical, Func`4<double, TParam1, TParam2, TResult> transformNumber, Func`4<string, TParam1, TParam2, TResult> transformText, Func`4<XLError, TParam1, TParam2, TResult> transformError);
    public AnyValue ToAnyValue();
    public OneOf`2<string, XLError> ToText(CultureInfo culture);
    public OneOf`2<double, XLError> ToNumber(CultureInfo culture);
    public static OneOf`2<double, XLError> TextToNumber(string text, CultureInfo culture);
    public bool TryPickLogical(Boolean& logical);
    public bool TryPickNumber(Double& number);
    public bool TryPickText(String& text, XLError& error);
    public bool TryPickError(XLError& error);
    public bool HaveSameType(ScalarValue other);
    public bool TryCoerceLogicalOrBlankOrNumberOrText(Boolean& value, XLError& error);
    public virtual string ToString();
    [CompilerGeneratedAttribute]
internal static OneOf`2<double, XLError> <TextToNumber>g__ParsePercent|42_0(string text, int start, int length, CultureInfo c);
    [CompilerGeneratedAttribute]
internal static OneOf`2<double, XLError> <TextToNumber>g__ToSerialDate|42_1(DateTime dateTime);
}
internal class ClosedXML.Excel.CalcEngine.ScalarValueComparer : object {
    private StringComparer _stringComparer;
    [CompilerGeneratedAttribute]
private static ScalarValueComparer <SortIgnoreCase>k__BackingField;
    public static ScalarValueComparer SortIgnoreCase { get; }
    private ScalarValueComparer(StringComparer stringComparer);
    private static ScalarValueComparer();
    [CompilerGeneratedAttribute]
public static ScalarValueComparer get_SortIgnoreCase();
    public sealed virtual int Compare(ScalarValue x, ScalarValue y);
    [CompilerGeneratedAttribute]
internal static int <Compare>g__GetTypeOrder|5_0(ScalarValue& value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class ClosedXML.Excel.CalcEngine.Statistical : object {
    public static void Register(FunctionRegistry ce);
    private static object Average(List`1<Expression> p);
    private static object AverageA(List`1<Expression> p);
    private static object Count(List`1<Expression> p);
    private static object CountA(List`1<Expression> p);
    private static object CountBlank(List`1<Expression> p);
    private static object CountIf(List`1<Expression> p);
    private static object CountIfs(List`1<Expression> p);
    private static object DevSq(List`1<Expression> p);
    private static object Fisher(List`1<Expression> p);
    private static object Geomean(List`1<Expression> p);
    private static object Max(List`1<Expression> p);
    private static object MaxA(List`1<Expression> p);
    private static object Median(List`1<Expression> p);
    private static object Min(List`1<Expression> p);
    private static object MinA(List`1<Expression> p);
    private static object StDev(List`1<Expression> p);
    private static object StDevA(List`1<Expression> p);
    private static object StDevP(List`1<Expression> p);
    private static object StDevPA(List`1<Expression> p);
    private static object Var(List`1<Expression> p);
    private static object VarA(List`1<Expression> p);
    private static object VarP(List`1<Expression> p);
    private static object VarPA(List`1<Expression> p);
    private static Tally GetTally(List`1<Expression> p, bool numbersOnly);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class ClosedXML.Excel.CalcEngine.StructuredReferenceNode : ValueNode {
    [CompilerGeneratedAttribute]
private PrefixNode <Prefix>k__BackingField;
    public PrefixNode Prefix { get; }
    public StructuredReferenceNode(PrefixNode prefix);
    [CompilerGeneratedAttribute]
public PrefixNode get_Prefix();
    public virtual TResult Accept(TContext context, IFormulaVisitor`2<TContext, TResult> visitor);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class ClosedXML.Excel.CalcEngine.Tally : object {
    private List`1<object> _list;
    private bool NumbersOnly;
    [NullableAttribute("2")]
private Double[] _numericValues;
    public Tally(bool numbersOnly);
    public Tally(IEnumerable`1<Expression> p);
    public Tally(IEnumerable`1<Expression> p, bool numbersOnly);
    public void Add(Expression e);
    public void AddValue(object v);
    public double Average();
    public double Median();
    public double Count();
    public double Count(bool numbersOnly);
    public object DevSq();
    public object GeoMean();
    public sealed virtual IEnumerator`1<object> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public double Max();
    public double Min();
    public IEnumerable`1<double> NumericValues();
    public double Product();
    public double Range();
    public double Std();
    public double StdP();
    public double Sum();
    public double Var();
    public double VarP();
    private static double Sum2(IEnumerable`1<double> nums);
    private bool HasNonPositiveNumbers();
    [IteratorStateMachineAttribute("ClosedXML.Excel.CalcEngine.Tally/<NumericValuesEnumerable>d__29")]
private IEnumerable`1<double> NumericValuesEnumerable();
    private Double[] NumericValuesInternal();
    private bool TryParseToDouble(object value, bool aggressiveConversion, Double& d);
    [CompilerGeneratedAttribute]
private double <DevSq>b__13_0(double x);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private Double[] <NumericValuesInternal>b__30_0();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class ClosedXML.Excel.CalcEngine.Text : object {
    public static void Register(FunctionRegistry ce);
    private static object _Char(List`1<Expression> p);
    private static object Code(List`1<Expression> p);
    private static object Concat(List`1<Expression> p);
    private static object Concatenate(List`1<Expression> p);
    private static AnyValue Find(CalcContext ctx, string findText, string withinText, OneOf`2<double, Blank> startNum);
    private static object Left(List`1<Expression> p);
    private static object Len(List`1<Expression> p);
    private static object Lower(List`1<Expression> p);
    private static object Mid(List`1<Expression> p);
    private static string MatchHandler(Match m);
    private static object Proper(List`1<Expression> p);
    private static object Replace(List`1<Expression> p);
    private static object Rept(List`1<Expression> p);
    private static object Right(List`1<Expression> p);
    private static AnyValue Search(CalcContext ctx, string findText, string withinText, OneOf`2<double, Blank> startNum);
    private static object Substitute(List`1<Expression> p);
    private static object T(List`1<Expression> p);
    private static object _Text(List`1<Expression> p);
    private static object TextJoin(List`1<Expression> p);
    private static object Trim(List`1<Expression> p);
    private static object Upper(List`1<Expression> p);
    private static AnyValue Value(CalcContext ctx, ScalarValue arg);
    private static object NumberValue(List`1<Expression> p);
    private static object Asc(List`1<Expression> p);
    private static object Clean(List`1<Expression> p);
    private static object Dollar(List`1<Expression> p);
    private static object Exact(List`1<Expression> p);
    private static object Fixed(List`1<Expression> p);
}
internal static class ClosedXML.Excel.CalcEngine.TimeSpanParser : object {
    public static bool TryParseTime(string s, CultureInfo ci, TimeSpan& result);
    [CompilerGeneratedAttribute]
internal static bool <TryParseTime>g__TryReadNumber|0_0(Int32& i, string t, Int32& num);
    [CompilerGeneratedAttribute]
internal static int <TryParseTime>g__ReadFractionInMs|0_1(Int32& i, string t);
    [CompilerGeneratedAttribute]
internal static void <TryParseTime>g__SkipWhitespace|0_2(Int32& i, string t);
    [CompilerGeneratedAttribute]
internal static bool <TryParseTime>g__InputMatches|0_3(Int32& i, string t, string expected);
}
[DefaultMemberAttribute("Item")]
internal class ClosedXML.Excel.CalcEngine.TransposedArray : Array {
    private Array _original;
    public ScalarValue Item { get; }
    public int Width { get; }
    public int Height { get; }
    public TransposedArray(Array original);
    public virtual ScalarValue get_Item(int y, int x);
    public virtual int get_Width();
    public virtual int get_Height();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class ClosedXML.Excel.CalcEngine.UnaryNode : ValueNode {
    [CompilerGeneratedAttribute]
private UnaryOp <Operation>k__BackingField;
    [CompilerGeneratedAttribute]
private ValueNode <Expression>k__BackingField;
    public UnaryOp Operation { get; }
    public ValueNode Expression { get; }
    public UnaryNode(UnaryOp operation, ValueNode expr);
    [CompilerGeneratedAttribute]
public UnaryOp get_Operation();
    [CompilerGeneratedAttribute]
public ValueNode get_Expression();
    public virtual TResult Accept(TContext context, IFormulaVisitor`2<TContext, TResult> visitor);
}
internal enum ClosedXML.Excel.CalcEngine.UnaryOp : Enum {
    public int value__;
    public static UnaryOp Add;
    public static UnaryOp Subtract;
    public static UnaryOp Percentage;
    public static UnaryOp SpillRange;
    public static UnaryOp ImplicitIntersection;
}
internal abstract class ClosedXML.Excel.CalcEngine.ValueNode : AstNode {
}
[IsReadOnlyAttribute]
internal class ClosedXML.Excel.CalcEngine.Wildcard : ValueType {
    private string _pattern;
    public Wildcard(string pattern);
    public int Search(ReadOnlySpan`1<char> text);
    private static int Search(ReadOnlySpan`1<char> pattern, ReadOnlySpan`1<char> text);
    private static ValueTuple`2<int, int> SearchSegment(ReadOnlySpan`1<char> segmentPattern, ReadOnlySpan`1<char> text);
}
internal class ClosedXML.Excel.CalcEngine.XLAddressComparer : object {
    private bool _ignoreFixed;
    public XLAddressComparer(bool ignoreFixed);
    public sealed virtual bool Equals(IXLAddress x, IXLAddress y);
    public sealed virtual int GetHashCode(IXLAddress obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class ClosedXML.Excel.CalcEngine.XLCalcEngine : CalcEngine {
    public XLCalcEngine(CultureInfo culture);
    public bool TryGetPrecedentCells(string expression, XLWorksheet worksheet, ICollection`1& uniqueCells);
    private bool TryGetPrecedentAreas(string expression, XLWorksheet worksheet, ICollection`1& precedentAreas);
}
internal class ClosedXML.Excel.CalcEngine.XLRangeAddressComparer : object {
    private XLAddressComparer _addressComparer;
    internal static XLRangeAddressComparer IgnoreFixed;
    private XLRangeAddressComparer(bool ignoreFixed);
    private static XLRangeAddressComparer();
    public sealed virtual bool Equals(IXLRangeAddress x, IXLRangeAddress y);
    public sealed virtual int GetHashCode(IXLRangeAddress obj);
}
internal class ClosedXML.Excel.CalcEngine.XObjectExpression : Expression {
    private object _value;
    public object Value { get; }
    internal XObjectExpression(object value);
    public object get_Value();
    public virtual object Evaluate();
    [IteratorStateMachineAttribute("ClosedXML.Excel.CalcEngine.XObjectExpression/<GetEnumerator>d__5")]
public sealed virtual IEnumerator GetEnumerator();
}
internal class ClosedXML.Excel.Cells.XLCellValueComparer : object {
    private StringComparer _textComparer;
    internal static XLCellValueComparer OrdinalIgnoreCase;
    private XLCellValueComparer(StringComparer textComparer);
    private static XLCellValueComparer();
    public sealed virtual bool Equals(XLCellValue x, XLCellValue y);
    public sealed virtual int GetHashCode(XLCellValue obj);
}
[ExtensionAttribute]
internal static class ClosedXML.Excel.ColorExtensions : object {
    private static Char[] hexDigits;
    private static ColorExtensions();
    [ExtensionAttribute]
public static string ToHex(Color color);
}
internal abstract class ClosedXML.Excel.ContentManagers.XLBaseContentManager : object {
}
internal abstract class ClosedXML.Excel.ContentManagers.XLBaseContentManager`1 : XLBaseContentManager {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
protected IDictionary`2<T, OpenXmlElement> contents;
    public OpenXmlElement GetPreviousElementFor(T content);
    public void SetElement(T content, OpenXmlElement element);
}
internal class ClosedXML.Excel.ContentManagers.XLSheetViewContentManager : XLBaseContentManager`1<XLSheetViewContents> {
    public XLSheetViewContentManager(SheetView sheetView);
}
internal enum ClosedXML.Excel.ContentManagers.XLSheetViewContents : Enum {
    public int value__;
    public static XLSheetViewContents Pane;
    public static XLSheetViewContents Selection;
    public static XLSheetViewContents PivotSelection;
    public static XLSheetViewContents ExtensionList;
}
internal class ClosedXML.Excel.ContentManagers.XLWorksheetContentManager : XLBaseContentManager`1<XLWorksheetContents> {
    public XLWorksheetContentManager(Worksheet opWorksheet);
}
internal enum ClosedXML.Excel.ContentManagers.XLWorksheetContents : Enum {
    public int value__;
    public static XLWorksheetContents SheetProperties;
    public static XLWorksheetContents SheetDimension;
    public static XLWorksheetContents SheetViews;
    public static XLWorksheetContents SheetFormatProperties;
    public static XLWorksheetContents Columns;
    public static XLWorksheetContents SheetData;
    public static XLWorksheetContents SheetCalculationProperties;
    public static XLWorksheetContents SheetProtection;
    public static XLWorksheetContents ProtectedRanges;
    public static XLWorksheetContents Scenarios;
    public static XLWorksheetContents AutoFilter;
    public static XLWorksheetContents SortState;
    public static XLWorksheetContents DataConsolidate;
    public static XLWorksheetContents CustomSheetViews;
    public static XLWorksheetContents MergeCells;
    public static XLWorksheetContents PhoneticProperties;
    public static XLWorksheetContents ConditionalFormatting;
    public static XLWorksheetContents DataValidations;
    public static XLWorksheetContents Hyperlinks;
    public static XLWorksheetContents PrintOptions;
    public static XLWorksheetContents PageMargins;
    public static XLWorksheetContents PageSetup;
    public static XLWorksheetContents HeaderFooter;
    public static XLWorksheetContents RowBreaks;
    public static XLWorksheetContents ColumnBreaks;
    public static XLWorksheetContents CustomProperties;
    public static XLWorksheetContents CellWatches;
    public static XLWorksheetContents IgnoredErrors;
    public static XLWorksheetContents SmartTags;
    public static XLWorksheetContents Drawing;
    public static XLWorksheetContents LegacyDrawing;
    public static XLWorksheetContents LegacyDrawingHeaderFooter;
    public static XLWorksheetContents DrawingHeaderFooter;
    public static XLWorksheetContents Picture;
    public static XLWorksheetContents OleObjects;
    public static XLWorksheetContents Controls;
    public static XLWorksheetContents AlternateContent;
    public static XLWorksheetContents WebPublishItems;
    public static XLWorksheetContents TableParts;
    public static XLWorksheetContents WorksheetExtensionList;
}
[ExtensionAttribute]
internal static class ClosedXML.Excel.DateTimeExtensions : object {
    public static double MaxOADate { get; }
    public static double get_MaxOADate();
    [ExtensionAttribute]
public static bool IsWorkDay(DateTime date, IEnumerable`1<DateTime> bankHolidays);
    [ExtensionAttribute]
public static DateTime NextWorkday(DateTime date, IEnumerable`1<DateTime> bankHolidays);
    [ExtensionAttribute]
public static DateTime PreviousWorkDay(DateTime date, IEnumerable`1<DateTime> bankHolidays);
    [ExtensionAttribute]
public static double ToSerialDateTime(DateTime dateTime);
}
internal class ClosedXML.Excel.DictionaryComparer`2 : object {
    private IEqualityComparer`1<TValue> _valueComparer;
    public DictionaryComparer`2(IEqualityComparer`1<TValue> valueComparer);
    public sealed virtual bool Equals(Dictionary`2<TKey, TValue> x, Dictionary`2<TKey, TValue> y);
    public sealed virtual int GetHashCode(Dictionary`2<TKey, TValue> obj);
}
[ExtensionAttribute]
internal static class ClosedXML.Excel.DictionaryExtensions : object {
    [ExtensionAttribute]
public static void RemoveAll(Dictionary`2<TKey, TValue> dic, Func`2<TValue, bool> predicate);
}
[ExtensionAttribute]
internal static class ClosedXML.Excel.DoubleExtensions : object {
    [ExtensionAttribute]
public static double SaveRound(double value);
    [ExtensionAttribute]
public static TimeSpan ToSerialTimeSpan(double value);
    [ExtensionAttribute]
public static DateTime ToSerialDateTime(double value);
    [ExtensionAttribute]
public static int RoundToInt(double value);
    [ExtensionAttribute]
public static double Round(double value, int digits);
}
[ExtensionAttribute]
internal static class ClosedXML.Excel.DoubleValueExtensions : object {
    [ExtensionAttribute]
public static DoubleValue SaveRound(DoubleValue value);
}
public interface ClosedXML.Excel.Drawings.IXLPicture {
    public IXLCell BottomRightCell { get; }
    public XLPictureFormat Format { get; }
    public int Width { get; public set; }
    public int Height { get; public set; }
    public int Id { get; }
    public MemoryStream ImageStream { get; }
    public int Left { get; public set; }
    public string Name { get; public set; }
    public int OriginalHeight { get; }
    public int OriginalWidth { get; }
    public XLPicturePlacement Placement { get; public set; }
    public int Top { get; public set; }
    public IXLCell TopLeftCell { get; }
    public IXLWorksheet Worksheet { get; }
    public abstract virtual IXLCell get_BottomRightCell();
    public abstract virtual XLPictureFormat get_Format();
    public abstract virtual int get_Width();
    public abstract virtual void set_Width(int value);
    public abstract virtual int get_Height();
    public abstract virtual void set_Height(int value);
    public abstract virtual int get_Id();
    public abstract virtual MemoryStream get_ImageStream();
    public abstract virtual int get_Left();
    public abstract virtual void set_Left(int value);
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    public abstract virtual int get_OriginalHeight();
    public abstract virtual int get_OriginalWidth();
    public abstract virtual XLPicturePlacement get_Placement();
    public abstract virtual void set_Placement(XLPicturePlacement value);
    public abstract virtual int get_Top();
    public abstract virtual void set_Top(int value);
    public abstract virtual IXLCell get_TopLeftCell();
    public abstract virtual IXLWorksheet get_Worksheet();
    public abstract virtual IXLPicture CopyTo(IXLWorksheet targetSheet);
    public abstract virtual void Delete();
    public abstract virtual IXLPicture Duplicate();
    public abstract virtual Point GetOffset(XLMarkerPosition position);
    public abstract virtual IXLPicture MoveTo(int left, int top);
    public abstract virtual IXLPicture MoveTo(IXLCell cell);
    public abstract virtual IXLPicture MoveTo(IXLCell cell, int xOffset, int yOffset);
    public abstract virtual IXLPicture MoveTo(IXLCell cell, Point offset);
    public abstract virtual IXLPicture MoveTo(IXLCell fromCell, IXLCell toCell);
    public abstract virtual IXLPicture MoveTo(IXLCell fromCell, int fromCellXOffset, int fromCellYOffset, IXLCell toCell, int toCellXOffset, int toCellYOffset);
    public abstract virtual IXLPicture MoveTo(IXLCell fromCell, Point fromOffset, IXLCell toCell, Point toOffset);
    public abstract virtual IXLPicture Scale(double factor, bool relativeToOriginal);
    public abstract virtual IXLPicture ScaleHeight(double factor, bool relativeToOriginal);
    public abstract virtual IXLPicture ScaleWidth(double factor, bool relativeToOriginal);
    public abstract virtual IXLPicture WithPlacement(XLPicturePlacement value);
    public abstract virtual IXLPicture WithSize(int width, int height);
}
public interface ClosedXML.Excel.Drawings.IXLPictures {
    public int Count { get; }
    public abstract virtual int get_Count();
    public abstract virtual IXLPicture Add(Stream stream);
    public abstract virtual IXLPicture Add(Stream stream, string name);
    public abstract virtual IXLPicture Add(Stream stream, XLPictureFormat format);
    public abstract virtual IXLPicture Add(Stream stream, XLPictureFormat format, string name);
    public abstract virtual IXLPicture Add(string imageFile);
    public abstract virtual IXLPicture Add(string imageFile, string name);
    public abstract virtual bool Contains(string pictureName);
    public abstract virtual void Delete(string pictureName);
    public abstract virtual void Delete(IXLPicture picture);
    public abstract virtual IXLPicture Picture(string pictureName);
    public abstract virtual bool TryGetPicture(string pictureName, IXLPicture& picture);
}
[DebuggerDisplayAttribute("{Address} {Offset}")]
internal class ClosedXML.Excel.Drawings.XLMarker : object {
    private IXLRange rangeCell;
    [CompilerGeneratedAttribute]
private Point <Offset>k__BackingField;
    public IXLCell Cell { get; }
    public int ColumnNumber { get; }
    public Point Offset { get; public set; }
    public int RowNumber { get; }
    internal XLMarker(IXLCell cell);
    internal XLMarker(IXLCell cell, Point offset);
    private XLMarker(IXLRange rangeCell, Point offset);
    public IXLCell get_Cell();
    public int get_ColumnNumber();
    [CompilerGeneratedAttribute]
public Point get_Offset();
    [CompilerGeneratedAttribute]
public void set_Offset(Point value);
    public int get_RowNumber();
}
public enum ClosedXML.Excel.Drawings.XLMarkerPosition : Enum {
    public int value__;
    public static XLMarkerPosition TopLeft;
    public static XLMarkerPosition BottomRight;
}
[DebuggerDisplayAttribute("{Name}")]
internal class ClosedXML.Excel.Drawings.XLPicture : object {
    private static string InvalidNameChars;
    private int _height;
    private int _id;
    private string _name;
    private int _width;
    [CompilerGeneratedAttribute]
private XLPictureFormat <Format>k__BackingField;
    [CompilerGeneratedAttribute]
private MemoryStream <ImageStream>k__BackingField;
    [CompilerGeneratedAttribute]
private int <OriginalHeight>k__BackingField;
    [CompilerGeneratedAttribute]
private int <OriginalWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private XLPicturePlacement <Placement>k__BackingField;
    [CompilerGeneratedAttribute]
private IXLWorksheet <Worksheet>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<XLMarkerPosition, XLMarker> <Markers>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RelId>k__BackingField;
    private int disposeSignaled;
    private bool disposed;
    public IXLCell BottomRightCell { get; private set; }
    public XLPictureFormat Format { get; private set; }
    public int Height { get; public set; }
    public int Id { get; internal set; }
    public MemoryStream ImageStream { get; private set; }
    public int Left { get; public set; }
    public string Name { get; public set; }
    public int OriginalHeight { get; private set; }
    public int OriginalWidth { get; private set; }
    public XLPicturePlacement Placement { get; public set; }
    public int Top { get; public set; }
    public IXLCell TopLeftCell { get; private set; }
    public int Width { get; public set; }
    public IXLWorksheet Worksheet { get; }
    internal IDictionary`2<XLMarkerPosition, XLMarker> Markers { get; private set; }
    internal string RelId { get; internal set; }
    internal XLPicture(XLWorksheet worksheet, Stream stream);
    internal XLPicture(IXLWorksheet worksheet, Stream stream, XLPictureFormat format);
    private XLPicture(IXLWorksheet worksheet);
    public sealed virtual IXLCell get_BottomRightCell();
    private void set_BottomRightCell(IXLCell value);
    [CompilerGeneratedAttribute]
public sealed virtual XLPictureFormat get_Format();
    [CompilerGeneratedAttribute]
private void set_Format(XLPictureFormat value);
    public sealed virtual int get_Height();
    public sealed virtual void set_Height(int value);
    public sealed virtual int get_Id();
    internal void set_Id(int value);
    [CompilerGeneratedAttribute]
public sealed virtual MemoryStream get_ImageStream();
    [CompilerGeneratedAttribute]
private void set_ImageStream(MemoryStream value);
    public sealed virtual int get_Left();
    public sealed virtual void set_Left(int value);
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_OriginalHeight();
    [CompilerGeneratedAttribute]
private void set_OriginalHeight(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_OriginalWidth();
    [CompilerGeneratedAttribute]
private void set_OriginalWidth(int value);
    [CompilerGeneratedAttribute]
public sealed virtual XLPicturePlacement get_Placement();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Placement(XLPicturePlacement value);
    public sealed virtual int get_Top();
    public sealed virtual void set_Top(int value);
    public sealed virtual IXLCell get_TopLeftCell();
    private void set_TopLeftCell(IXLCell value);
    public sealed virtual int get_Width();
    public sealed virtual void set_Width(int value);
    [CompilerGeneratedAttribute]
public sealed virtual IXLWorksheet get_Worksheet();
    [CompilerGeneratedAttribute]
internal IDictionary`2<XLMarkerPosition, XLMarker> get_Markers();
    [CompilerGeneratedAttribute]
private void set_Markers(IDictionary`2<XLMarkerPosition, XLMarker> value);
    [CompilerGeneratedAttribute]
internal string get_RelId();
    [CompilerGeneratedAttribute]
internal void set_RelId(string value);
    public sealed virtual IXLPicture CopyTo(IXLWorksheet targetSheet);
    public sealed virtual void Delete();
    private void DisposeManaged();
    public sealed virtual void Dispose();
    public sealed virtual IXLPicture Duplicate();
    public sealed virtual Point GetOffset(XLMarkerPosition position);
    public sealed virtual IXLPicture MoveTo(int left, int top);
    public sealed virtual IXLPicture MoveTo(IXLCell cell);
    public sealed virtual IXLPicture MoveTo(IXLCell cell, int xOffset, int yOffset);
    public sealed virtual IXLPicture MoveTo(IXLCell cell, Point offset);
    public sealed virtual IXLPicture MoveTo(IXLCell fromCell, IXLCell toCell);
    public sealed virtual IXLPicture MoveTo(IXLCell fromCell, int fromCellXOffset, int fromCellYOffset, IXLCell toCell, int toCellXOffset, int toCellYOffset);
    public sealed virtual IXLPicture MoveTo(IXLCell fromCell, Point fromOffset, IXLCell toCell, Point toOffset);
    public sealed virtual IXLPicture Scale(double factor, bool relativeToOriginal);
    public sealed virtual IXLPicture ScaleHeight(double factor, bool relativeToOriginal);
    public sealed virtual IXLPicture ScaleWidth(double factor, bool relativeToOriginal);
    public sealed virtual IXLPicture WithPlacement(XLPicturePlacement value);
    public sealed virtual IXLPicture WithSize(int width, int height);
    internal IXLPicture CopyTo(XLWorksheet targetSheet);
    internal void SetName(string value);
    private void Init(XLPictureInfo info);
    private void ThrowIfDisposed();
}
public enum ClosedXML.Excel.Drawings.XLPictureFormat : Enum {
    public int value__;
    public static XLPictureFormat Unknown;
    public static XLPictureFormat Bmp;
    public static XLPictureFormat Gif;
    public static XLPictureFormat Png;
    public static XLPictureFormat Tiff;
    public static XLPictureFormat Icon;
    public static XLPictureFormat Pcx;
    public static XLPictureFormat Jpeg;
    public static XLPictureFormat Emf;
    public static XLPictureFormat Wmf;
    public static XLPictureFormat Webp;
}
public enum ClosedXML.Excel.Drawings.XLPicturePlacement : Enum {
    public int value__;
    public static XLPicturePlacement MoveAndSize;
    public static XLPicturePlacement Move;
    public static XLPicturePlacement FreeFloating;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class ClosedXML.Excel.Drawings.XLPictures : object {
    private List`1<XLPicture> _pictures;
    private XLWorksheet _worksheet;
    [CompilerGeneratedAttribute]
private ICollection`1<string> <Deleted>k__BackingField;
    public int Count { get; }
    internal ICollection`1<string> Deleted { get; private set; }
    public XLPictures(XLWorksheet worksheet);
    [DebuggerStepThroughAttribute]
public sealed virtual int get_Count();
    [CompilerGeneratedAttribute]
internal ICollection`1<string> get_Deleted();
    [CompilerGeneratedAttribute]
private void set_Deleted(ICollection`1<string> value);
    public sealed virtual IXLPicture Add(Stream stream);
    public sealed virtual IXLPicture Add(Stream stream, string name);
    public sealed virtual IXLPicture Add(Stream stream, XLPictureFormat format);
    public sealed virtual IXLPicture Add(Stream stream, XLPictureFormat format, string name);
    public sealed virtual IXLPicture Add(string imageFile);
    public sealed virtual IXLPicture Add(string imageFile, string name);
    public sealed virtual bool Contains(string pictureName);
    public sealed virtual void Delete(IXLPicture picture);
    public sealed virtual void Delete(string pictureName);
    private sealed virtual override IEnumerator`1<IXLPicture> System.Collections.Generic.IEnumerable<ClosedXML.Excel.Drawings.IXLPicture>.GetEnumerator();
    public sealed virtual IEnumerator`1<XLPicture> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual IXLPicture Picture(string pictureName);
    public sealed virtual bool TryGetPicture(string pictureName, IXLPicture& picture);
    internal IXLPicture Add(Stream stream, string name, int Id);
    private string GetNextPictureName();
}
[ExtensionAttribute]
internal static class ClosedXML.Excel.EnumConverter : object {
    private static String[] XLFontUnderlineValuesStrings;
    private static String[] XLFontVerticalTextAlignmentValuesStrings;
    private static String[] XLFontSchemeStrings;
    private static String[] XLPhoneticAlignmentStrings;
    private static String[] XLPhoneticTypeStrings;
    private static EnumConverter();
    [ExtensionAttribute]
public static UnderlineValues ToOpenXml(XLFontUnderlineValues value);
    [ExtensionAttribute]
public static string ToOpenXmlString(XLFontUnderlineValues value);
    [ExtensionAttribute]
public static OrientationValues ToOpenXml(XLPageOrientation value);
    [ExtensionAttribute]
public static VerticalAlignmentRunValues ToOpenXml(XLFontVerticalTextAlignmentValues value);
    [ExtensionAttribute]
public static string ToOpenXmlString(XLFontVerticalTextAlignmentValues value);
    [ExtensionAttribute]
public static string ToOpenXml(XLFontScheme value);
    [ExtensionAttribute]
public static PatternValues ToOpenXml(XLFillPatternValues value);
    [ExtensionAttribute]
public static BorderStyleValues ToOpenXml(XLBorderStyleValues value);
    [ExtensionAttribute]
public static HorizontalAlignmentValues ToOpenXml(XLAlignmentHorizontalValues value);
    [ExtensionAttribute]
public static VerticalAlignmentValues ToOpenXml(XLAlignmentVerticalValues value);
    [ExtensionAttribute]
public static PageOrderValues ToOpenXml(XLPageOrderValues value);
    [ExtensionAttribute]
public static CellCommentsValues ToOpenXml(XLShowCommentsValues value);
    [ExtensionAttribute]
public static PrintErrorValues ToOpenXml(XLPrintErrorValues value);
    [ExtensionAttribute]
public static CalculateModeValues ToOpenXml(XLCalculateMode value);
    [ExtensionAttribute]
public static ReferenceModeValues ToOpenXml(XLReferenceStyle value);
    [ExtensionAttribute]
public static UInt32 ToOpenXml(XLAlignmentReadingOrderValues value);
    [ExtensionAttribute]
public static TotalsRowFunctionValues ToOpenXml(XLTotalsRowFunction value);
    [ExtensionAttribute]
public static DataValidationValues ToOpenXml(XLAllowedValues value);
    [ExtensionAttribute]
public static DataValidationErrorStyleValues ToOpenXml(XLErrorStyle value);
    [ExtensionAttribute]
public static DataValidationOperatorValues ToOpenXml(XLOperator value);
    [ExtensionAttribute]
public static SheetStateValues ToOpenXml(XLWorksheetVisibility value);
    [ExtensionAttribute]
public static string ToOpenXmlString(XLPhoneticAlignment value);
    [ExtensionAttribute]
public static PhoneticValues ToOpenXml(XLPhoneticType value);
    [ExtensionAttribute]
public static string ToOpenXmlString(XLPhoneticType value);
    [ExtensionAttribute]
public static DataConsolidateFunctionValues ToOpenXml(XLPivotSummary value);
    [ExtensionAttribute]
public static ShowDataAsValues ToOpenXml(XLPivotCalculation value);
    [ExtensionAttribute]
public static FilterOperatorValues ToOpenXml(XLFilterOperator value);
    [ExtensionAttribute]
public static DynamicFilterValues ToOpenXml(XLFilterDynamicType value);
    [ExtensionAttribute]
public static DateTimeGroupingValues ToOpenXml(XLDateTimeGrouping value);
    [ExtensionAttribute]
public static SheetViewValues ToOpenXml(XLSheetViewOptions value);
    [ExtensionAttribute]
public static StrokeLineStyleValues ToOpenXml(XLLineStyle value);
    [ExtensionAttribute]
public static ConditionalFormatValues ToOpenXml(XLConditionalFormatType value);
    [ExtensionAttribute]
public static ConditionalFormatValueObjectValues ToOpenXml(XLCFContentType value);
    [ExtensionAttribute]
public static ConditionalFormattingOperatorValues ToOpenXml(XLCFOperator value);
    [ExtensionAttribute]
public static IconSetValues ToOpenXml(XLIconSetStyle value);
    [ExtensionAttribute]
public static TimePeriodValues ToOpenXml(XLTimePeriod value);
    [ExtensionAttribute]
public static ImagePartType ToOpenXml(XLPictureFormat value);
    [ExtensionAttribute]
public static EditAsValues ToOpenXml(XLPicturePlacement value);
    [ExtensionAttribute]
public static PivotAreaValues ToOpenXml(XLPivotAreaValues value);
    [ExtensionAttribute]
public static SparklineTypeValues ToOpenXml(XLSparklineType value);
    [ExtensionAttribute]
public static SparklineAxisMinMaxValues ToOpenXml(XLSparklineAxisMinMax value);
    [ExtensionAttribute]
public static DisplayBlanksAsValues ToOpenXml(XLDisplayBlanksAsValues value);
    [ExtensionAttribute]
public static XLFontUnderlineValues ToClosedXml(UnderlineValues value);
    [ExtensionAttribute]
public static XLFontScheme ToClosedXml(FontSchemeValues value);
    [ExtensionAttribute]
public static XLPageOrientation ToClosedXml(OrientationValues value);
    [ExtensionAttribute]
public static XLFontVerticalTextAlignmentValues ToClosedXml(VerticalAlignmentRunValues value);
    [ExtensionAttribute]
public static XLFillPatternValues ToClosedXml(PatternValues value);
    [ExtensionAttribute]
public static XLBorderStyleValues ToClosedXml(BorderStyleValues value);
    [ExtensionAttribute]
public static XLAlignmentHorizontalValues ToClosedXml(HorizontalAlignmentValues value);
    [ExtensionAttribute]
public static XLAlignmentVerticalValues ToClosedXml(VerticalAlignmentValues value);
    [ExtensionAttribute]
public static XLPageOrderValues ToClosedXml(PageOrderValues value);
    [ExtensionAttribute]
public static XLShowCommentsValues ToClosedXml(CellCommentsValues value);
    [ExtensionAttribute]
public static XLPrintErrorValues ToClosedXml(PrintErrorValues value);
    [ExtensionAttribute]
public static XLCalculateMode ToClosedXml(CalculateModeValues value);
    [ExtensionAttribute]
public static XLReferenceStyle ToClosedXml(ReferenceModeValues value);
    [ExtensionAttribute]
public static XLAlignmentReadingOrderValues ToClosedXml(UInt32 value);
    [ExtensionAttribute]
public static XLTotalsRowFunction ToClosedXml(TotalsRowFunctionValues value);
    [ExtensionAttribute]
public static XLAllowedValues ToClosedXml(DataValidationValues value);
    [ExtensionAttribute]
public static XLErrorStyle ToClosedXml(DataValidationErrorStyleValues value);
    [ExtensionAttribute]
public static XLOperator ToClosedXml(DataValidationOperatorValues value);
    [ExtensionAttribute]
public static XLWorksheetVisibility ToClosedXml(SheetStateValues value);
    [ExtensionAttribute]
public static XLPhoneticAlignment ToClosedXml(PhoneticAlignmentValues value);
    [ExtensionAttribute]
public static XLPhoneticType ToClosedXml(PhoneticValues value);
    [ExtensionAttribute]
public static XLPivotSummary ToClosedXml(DataConsolidateFunctionValues value);
    [ExtensionAttribute]
public static XLPivotCalculation ToClosedXml(ShowDataAsValues value);
    [ExtensionAttribute]
public static XLFilterOperator ToClosedXml(FilterOperatorValues value);
    [ExtensionAttribute]
public static XLFilterDynamicType ToClosedXml(DynamicFilterValues value);
    [ExtensionAttribute]
public static XLDateTimeGrouping ToClosedXml(DateTimeGroupingValues value);
    [ExtensionAttribute]
public static XLSheetViewOptions ToClosedXml(SheetViewValues value);
    [ExtensionAttribute]
public static XLLineStyle ToClosedXml(StrokeLineStyleValues value);
    [ExtensionAttribute]
public static XLConditionalFormatType ToClosedXml(ConditionalFormatValues value);
    [ExtensionAttribute]
public static XLCFContentType ToClosedXml(ConditionalFormatValueObjectValues value);
    [ExtensionAttribute]
public static XLCFOperator ToClosedXml(ConditionalFormattingOperatorValues value);
    [ExtensionAttribute]
public static XLIconSetStyle ToClosedXml(IconSetValues value);
    [ExtensionAttribute]
public static XLTimePeriod ToClosedXml(TimePeriodValues value);
    [ExtensionAttribute]
public static XLPictureFormat ToClosedXml(ImagePartType value);
    [ExtensionAttribute]
public static XLPicturePlacement ToClosedXml(EditAsValues value);
    [ExtensionAttribute]
public static XLPivotAreaValues ToClosedXml(PivotAreaValues value);
    [ExtensionAttribute]
public static XLSparklineType ToClosedXml(SparklineTypeValues value);
    [ExtensionAttribute]
public static XLSparklineAxisMinMax ToClosedXml(SparklineAxisMinMaxValues value);
    [ExtensionAttribute]
public static XLDisplayBlanksAsValues ToClosedXml(DisplayBlanksAsValues value);
}
internal class ClosedXML.Excel.EnumerableComparer`1 : object {
    private IEqualityComparer`1<T> _valueComparer;
    public EnumerableComparer`1(IEqualityComparer`1<T> valueComparer);
    public sealed virtual bool Equals(IEnumerable`1<T> x, IEnumerable`1<T> y);
    public sealed virtual int GetHashCode(IEnumerable`1<T> obj);
    public static bool SetEquals(IEnumerable`1<T> first, IEnumerable`1<T> second, IEqualityComparer`1<T> comparer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class ClosedXML.Excel.EnumerableExtensions : object {
    [ExtensionAttribute]
public static void ForEach(IEnumerable`1<T> source, Action`1<T> action);
    [ExtensionAttribute]
public static Type GetItemType(IEnumerable source);
    [ExtensionAttribute]
public static HashSet`1<T> ToHashSet(IEnumerable`1<T> source);
    [ExtensionAttribute]
public static bool HasDuplicates(IEnumerable`1<T> source);
    [CompilerGeneratedAttribute]
internal static Type <GetItemType>g__GetGenericArgument|1_0(Type collectionType);
}
public abstract class ClosedXML.Excel.Exceptions.ClosedXMLException : Exception {
    protected ClosedXMLException(string message);
    protected ClosedXMLException(string message, Exception innerException);
}
public class ClosedXML.Excel.Exceptions.EmptyTableException : ClosedXMLException {
    public EmptyTableException(string message);
    public EmptyTableException(string message, Exception innerException);
}
[ExtensionAttribute]
internal static class ClosedXML.Excel.FontBaseExtensions : object {
    [ExtensionAttribute]
public static void CopyFont(IXLFontBase font, IXLFontBase sourceFont);
}
internal enum ClosedXML.Excel.FormulaConversionType : Enum {
    public int value__;
    public static FormulaConversionType A1ToR1C1;
    public static FormulaConversionType R1C1ToA1;
}
internal enum ClosedXML.Excel.FormulaType : Enum {
    public byte value__;
    public static FormulaType Normal;
    public static FormulaType Array;
    public static FormulaType DataTable;
    public static FormulaType Shared;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class ClosedXML.Excel.InsertData.ArrayReader : object {
    private IEnumerable`1<IEnumerable> _data;
    public ArrayReader(IEnumerable`1<IEnumerable> data);
    public sealed virtual IEnumerable`1<IEnumerable`1<object>> GetData();
    public sealed virtual int GetPropertiesCount();
    [NullableContextAttribute("2")]
public sealed virtual string GetPropertyName(int propertyIndex);
    public sealed virtual int GetRecordsCount();
}
internal class ClosedXML.Excel.InsertData.DataRecordReader : object {
    private IEnumerable`1[] _inMemoryData;
    private String[] _columns;
    public DataRecordReader(IEnumerable`1<IDataRecord> data);
    public sealed virtual IEnumerable`1<IEnumerable`1<object>> GetData();
    public sealed virtual int GetPropertiesCount();
    public sealed virtual string GetPropertyName(int propertyIndex);
    public sealed virtual int GetRecordsCount();
    [IteratorStateMachineAttribute("ClosedXML.Excel.InsertData.DataRecordReader/<ReadToEnd>d__7")]
private IEnumerable`1<IEnumerable`1<object>> ReadToEnd(IEnumerable`1<IDataRecord> data);
    [IteratorStateMachineAttribute("ClosedXML.Excel.InsertData.DataRecordReader/<ToEnumerable>d__8")]
private IEnumerable`1<object> ToEnumerable(IDataRecord dataRecord);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class ClosedXML.Excel.InsertData.DataTableReader : object {
    private IEnumerable`1<DataRow> _dataRows;
    [NullableAttribute("2")]
private DataTable _dataTable;
    public DataTableReader(DataTable dataTable);
    public DataTableReader(IEnumerable`1<DataRow> dataRows);
    public sealed virtual IEnumerable`1<IEnumerable`1<object>> GetData();
    public sealed virtual int GetPropertiesCount();
    [NullableContextAttribute("2")]
public sealed virtual string GetPropertyName(int propertyIndex);
    public sealed virtual int GetRecordsCount();
}
[NullableContextAttribute("2")]
internal interface ClosedXML.Excel.InsertData.IInsertDataReader {
    public abstract virtual IEnumerable`1<IEnumerable`1<object>> GetData();
    public abstract virtual int GetPropertiesCount();
    public abstract virtual string GetPropertyName(int propertyIndex);
    public abstract virtual int GetRecordsCount();
}
internal class ClosedXML.Excel.InsertData.InsertDataReaderFactory : object {
    private static Lazy`1<InsertDataReaderFactory> _instance;
    public static InsertDataReaderFactory Instance { get; }
    private static InsertDataReaderFactory();
    public static InsertDataReaderFactory get_Instance();
    public IInsertDataReader CreateReader(IEnumerable data);
    public IInsertDataReader CreateReader(IEnumerable`1<T[]> data);
    public IInsertDataReader CreateReader(IEnumerable`1<IEnumerable> data);
    public IInsertDataReader CreateReader(DataTable dataTable);
}
internal class ClosedXML.Excel.InsertData.NullDataReader : object {
    private int _count;
    [NullableContextAttribute("1")]
public NullDataReader(IEnumerable`1<object> nulls);
    [IteratorStateMachineAttribute("ClosedXML.Excel.InsertData.NullDataReader/<GetData>d__2")]
public sealed virtual IEnumerable`1<IEnumerable`1<object>> GetData();
    public sealed virtual int GetPropertiesCount();
    [NullableContextAttribute("2")]
public sealed virtual string GetPropertyName(int propertyIndex);
    public sealed virtual int GetRecordsCount();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class ClosedXML.Excel.InsertData.ObjectReader : object {
    private static BindingFlags MemberBindingFlags;
    private IEnumerable`1<object> _data;
    private MemberInfo[] _members;
    private Boolean[] _staticMembers;
    public ObjectReader(IEnumerable data);
    public sealed virtual IEnumerable`1<IEnumerable`1<object>> GetData();
    public sealed virtual int GetPropertiesCount();
    [NullableContextAttribute("2")]
public sealed virtual string GetPropertyName(int propertyIndex);
    public sealed virtual int GetRecordsCount();
    [IteratorStateMachineAttribute("ClosedXML.Excel.InsertData.ObjectReader/<GetItemData>d__9")]
private IEnumerable`1<object> GetItemData(object item);
}
internal class ClosedXML.Excel.InsertData.SimpleNullableTypeReader : object {
    private IEnumerable`1<object> _data;
    private Type _itemType;
    public SimpleNullableTypeReader(IEnumerable data);
    public sealed virtual IEnumerable`1<IEnumerable`1<object>> GetData();
    public sealed virtual int GetPropertiesCount();
    public sealed virtual string GetPropertyName(int propertyIndex);
    public sealed virtual int GetRecordsCount();
}
internal class ClosedXML.Excel.InsertData.SimpleTypeReader : object {
    private IEnumerable`1<object> _data;
    private Type _itemType;
    public SimpleTypeReader(IEnumerable data);
    public sealed virtual IEnumerable`1<IEnumerable`1<object>> GetData();
    public sealed virtual int GetPropertiesCount();
    public sealed virtual string GetPropertyName(int propertyIndex);
    public sealed virtual int GetRecordsCount();
}
internal class ClosedXML.Excel.InsertData.UntypedObjectReader : object {
    private IEnumerable`1<object> _data;
    private IEnumerable`1<IInsertDataReader> _readers;
    public UntypedObjectReader(IEnumerable data);
    [IteratorStateMachineAttribute("ClosedXML.Excel.InsertData.UntypedObjectReader/<GetData>d__3")]
public sealed virtual IEnumerable`1<IEnumerable`1<object>> GetData();
    public sealed virtual int GetPropertiesCount();
    public sealed virtual string GetPropertyName(int propertyIndex);
    public sealed virtual int GetRecordsCount();
    private IInsertDataReader GetFirstNonNullReader();
    [IteratorStateMachineAttribute("ClosedXML.Excel.InsertData.UntypedObjectReader/<<-ctor>g__CreateReaders|2_0>d")]
[CompilerGeneratedAttribute]
private IEnumerable`1<IInsertDataReader> <.ctor>g__CreateReaders|2_0();
    [CompilerGeneratedAttribute]
internal static IInsertDataReader <.ctor>g__CreateReader|2_1(List`1<object> itemsOfSameType, Type itemType);
}
[ExtensionAttribute]
internal static class ClosedXML.Excel.IntegerExtensions : object {
    [ExtensionAttribute]
public static bool Between(int val, int from, int to);
    [ExtensionAttribute]
internal static int GetHighestSetBitBelow(UInt32 value, int maximalIndex);
    [ExtensionAttribute]
internal static int GetLowestSetBitAbove(UInt32 value, int minimalIndex);
    [ExtensionAttribute]
internal static int GetHighestSetBit(UInt32 value);
}
internal class ClosedXML.Excel.IO.CommentPartWriter : object {
    internal static void GenerateWorksheetCommentsPartContent(WorksheetCommentsPart worksheetCommentsPart, XLWorksheet xlWorksheet);
}
internal static class ClosedXML.Excel.IO.OpenXmlConst : object {
    public static string Main2006SsNs;
    public static string X14Ac2009SsNs;
    public static string Xml1998Ns;
    public static string TrueValue;
    public static string FalseValue;
    private static OpenXmlConst();
}
internal class ClosedXML.Excel.IO.SharedStringTableWriter : object {
    internal static void GenerateSharedStringTablePartContent(XLWorkbook workbook, SharedStringTablePart sharedStringTablePart, SaveContext context);
    [CompilerGeneratedAttribute]
internal static bool <GenerateSharedStringTablePartContent>g__HasSharedString|0_1(XLCell c);
}
internal class ClosedXML.Excel.IO.TextSerializer : object {
    internal static void WriteRichTextElements(XmlWriter w, XLCell cell, SaveContext context);
    internal static void WriteRun(XmlWriter w, XLRichString rt);
    private static void WriteRunProperty(XmlWriter w, string elName, string val);
    private static void WriteRunProperty(XmlWriter w, string elName, int val);
    private static void WriteRunProperty(XmlWriter w, string elName, double val);
}
internal class ClosedXML.Excel.IO.WorksheetPartWriter : object {
    private static String[] FormulaDataType;
    private static String[] ValueDataType;
    private static WorksheetPartWriter();
    internal static void GenerateWorksheetPartContent(bool partIsEmpty, WorksheetPart worksheetPart, XLWorksheet xlWorksheet, SaveOptions options, SaveContext context);
    private static Worksheet GetWorksheetDom(bool partIsEmpty, WorksheetPart worksheetPart, XLWorksheet xlWorksheet, SaveOptions options, SaveContext context);
    private static void WriteCellValue(XmlWriter w, XLCell xlCell, SaveContext context);
    internal static void PopulateAutoFilter(XLAutoFilter xlAutoFilter, AutoFilter autoFilter);
    private static void CollapseColumns(Columns columns, Dictionary`2<UInt32, Column> sheetColumns);
    private static double GetColumnWidth(double columnWidth);
    private static void UpdateColumn(Column column, Columns columns, Dictionary`2<UInt32, Column> sheetColumnsByMin);
    private static bool ColumnsAreEqual(Column left, Column right);
    private static long ConvertToEnglishMetricUnits(int pixels, double resolution);
    private static void AddPictureAnchor(WorksheetPart worksheetPart, IXLPicture picture, SaveContext context);
    private static void RebaseNonVisualDrawingPropertiesIds(WorksheetPart worksheetPart);
    private static void PopulateTablePartReferences(XLTables xlTables, Worksheet worksheet, XLWorksheetContentManager cm);
    private static void StreamToPart(Worksheet worksheet, WorksheetPart worksheetPart, XLWorksheet xlWorksheet, SaveContext context, SaveOptions options);
    private static void StreamSheetData(OpenXmlWriter writer, XLWorksheet xlWorksheet, SaveContext context, SaveOptions options);
    private static string GetCellValueType(XLCell xlCell);
    private static int GetMaxColumn(XLWorksheet xlWorksheet);
    [CompilerGeneratedAttribute]
internal static void <WriteCellValue>g__WriteStringValue|2_0(XmlWriter w, string text);
    [CompilerGeneratedAttribute]
internal static void <WriteCellValue>g__WriteNumberValue|2_1(XmlWriter w, double value);
    [CompilerGeneratedAttribute]
internal static void <AddPictureAnchor>g__AttachAnchor|9_3(OpenXmlElement pictureAnchor, OpenXmlElement existingAnchor, <>c__DisplayClass9_0& );
    [CompilerGeneratedAttribute]
internal static bool <StreamSheetData>g__RowHasCustomProps|13_3(XLRow xlRow);
    [CompilerGeneratedAttribute]
internal static void <StreamSheetData>g__WriteStartRow|13_4(XmlWriter w, XLRow xlRow, int rowNumber, int maxColumn, SaveContext context);
    [CompilerGeneratedAttribute]
internal static void <StreamSheetData>g__WriteStartCell|13_5(XmlWriter w, XLCell xlCell, Char[] reference, int referenceLength, string dataType, UInt32 styleId);
    [CompilerGeneratedAttribute]
internal static void <StreamSheetData>g__WriteCell|13_6(XmlWriter xml, XLCell xlCell, Char[] cellRef, SaveContext context, SaveOptions options, HashSet`1<IXLAddress> tableTotalCells, UInt32 rowStyleId);
}
[NullableContextAttribute("1")]
internal interface ClosedXML.Excel.ISlice {
    public bool IsEmpty { get; }
    public int MaxColumn { get; }
    public int MaxRow { get; }
    public KeyCollection<int, int> UsedColumns { get; }
    public IEnumerable`1<int> UsedRows { get; }
    public abstract virtual bool get_IsEmpty();
    public abstract virtual int get_MaxColumn();
    public abstract virtual int get_MaxRow();
    public abstract virtual KeyCollection<int, int> get_UsedColumns();
    public abstract virtual IEnumerable`1<int> get_UsedRows();
    public abstract virtual void Clear(XLSheetRange range);
    public abstract virtual void DeleteAreaAndShiftLeft(XLSheetRange rangeToDelete);
    public abstract virtual void DeleteAreaAndShiftUp(XLSheetRange rangeToDelete);
    public abstract virtual void InsertAreaAndShiftDown(XLSheetRange range);
    public abstract virtual void InsertAreaAndShiftRight(XLSheetRange range);
    public abstract virtual bool IsUsed(XLSheetPoint address);
}
public interface ClosedXML.Excel.IXLAddress {
    public string ColumnLetter { get; }
    public int ColumnNumber { get; }
    public bool FixedColumn { get; }
    public bool FixedRow { get; }
    public int RowNumber { get; }
    public string UniqueId { get; }
    public IXLWorksheet Worksheet { get; }
    public abstract virtual string get_ColumnLetter();
    public abstract virtual int get_ColumnNumber();
    public abstract virtual bool get_FixedColumn();
    public abstract virtual bool get_FixedRow();
    public abstract virtual int get_RowNumber();
    public abstract virtual string get_UniqueId();
    public abstract virtual IXLWorksheet get_Worksheet();
    public abstract virtual string ToString(XLReferenceStyle referenceStyle);
    public abstract virtual string ToString(XLReferenceStyle referenceStyle, bool includeSheet);
    public abstract virtual string ToStringFixed();
    public abstract virtual string ToStringFixed(XLReferenceStyle referenceStyle);
    public abstract virtual string ToStringFixed(XLReferenceStyle referenceStyle, bool includeSheet);
    public abstract virtual string ToStringRelative();
    public abstract virtual string ToStringRelative(bool includeSheet);
}
public interface ClosedXML.Excel.IXLAddressable {
    public IXLRangeAddress RangeAddress { get; }
    public abstract virtual IXLRangeAddress get_RangeAddress();
}
public interface ClosedXML.Excel.IXLAlignment {
    public XLAlignmentHorizontalValues Horizontal { get; public set; }
    public XLAlignmentVerticalValues Vertical { get; public set; }
    public int Indent { get; public set; }
    public bool JustifyLastLine { get; public set; }
    public XLAlignmentReadingOrderValues ReadingOrder { get; public set; }
    public int RelativeIndent { get; public set; }
    public bool ShrinkToFit { get; public set; }
    public int TextRotation { get; public set; }
    public bool WrapText { get; public set; }
    public bool TopToBottom { get; public set; }
    public abstract virtual XLAlignmentHorizontalValues get_Horizontal();
    public abstract virtual void set_Horizontal(XLAlignmentHorizontalValues value);
    public abstract virtual XLAlignmentVerticalValues get_Vertical();
    public abstract virtual void set_Vertical(XLAlignmentVerticalValues value);
    public abstract virtual int get_Indent();
    public abstract virtual void set_Indent(int value);
    public abstract virtual bool get_JustifyLastLine();
    public abstract virtual void set_JustifyLastLine(bool value);
    public abstract virtual XLAlignmentReadingOrderValues get_ReadingOrder();
    public abstract virtual void set_ReadingOrder(XLAlignmentReadingOrderValues value);
    public abstract virtual int get_RelativeIndent();
    public abstract virtual void set_RelativeIndent(int value);
    public abstract virtual bool get_ShrinkToFit();
    public abstract virtual void set_ShrinkToFit(bool value);
    public abstract virtual int get_TextRotation();
    public abstract virtual void set_TextRotation(int value);
    public abstract virtual bool get_WrapText();
    public abstract virtual void set_WrapText(bool value);
    public abstract virtual bool get_TopToBottom();
    public abstract virtual void set_TopToBottom(bool value);
    public abstract virtual IXLStyle SetHorizontal(XLAlignmentHorizontalValues value);
    public abstract virtual IXLStyle SetVertical(XLAlignmentVerticalValues value);
    public abstract virtual IXLStyle SetIndent(int value);
    public abstract virtual IXLStyle SetJustifyLastLine();
    public abstract virtual IXLStyle SetJustifyLastLine(bool value);
    public abstract virtual IXLStyle SetReadingOrder(XLAlignmentReadingOrderValues value);
    public abstract virtual IXLStyle SetRelativeIndent(int value);
    public abstract virtual IXLStyle SetShrinkToFit();
    public abstract virtual IXLStyle SetShrinkToFit(bool value);
    public abstract virtual IXLStyle SetTextRotation(int value);
    public abstract virtual IXLStyle SetWrapText();
    public abstract virtual IXLStyle SetWrapText(bool value);
    public abstract virtual IXLStyle SetTopToBottom();
    public abstract virtual IXLStyle SetTopToBottom(bool value);
}
public interface ClosedXML.Excel.IXLAutoFilter {
    public IEnumerable`1<IXLRangeRow> HiddenRows { get; }
    public bool IsEnabled { get; public set; }
    public IXLRange Range { get; public set; }
    public int SortColumn { get; public set; }
    public bool Sorted { get; public set; }
    public XLSortOrder SortOrder { get; public set; }
    public IEnumerable`1<IXLRangeRow> VisibleRows { get; }
    public abstract virtual IEnumerable`1<IXLRangeRow> get_HiddenRows();
    public abstract virtual bool get_IsEnabled();
    public abstract virtual void set_IsEnabled(bool value);
    public abstract virtual IXLRange get_Range();
    public abstract virtual void set_Range(IXLRange value);
    public abstract virtual int get_SortColumn();
    public abstract virtual void set_SortColumn(int value);
    public abstract virtual bool get_Sorted();
    public abstract virtual void set_Sorted(bool value);
    public abstract virtual XLSortOrder get_SortOrder();
    public abstract virtual void set_SortOrder(XLSortOrder value);
    public abstract virtual IEnumerable`1<IXLRangeRow> get_VisibleRows();
    public abstract virtual IXLAutoFilter Clear();
    public abstract virtual IXLFilterColumn Column(string column);
    public abstract virtual IXLFilterColumn Column(int column);
    public abstract virtual IXLAutoFilter Reapply();
    public abstract virtual IXLAutoFilter Sort(int columnToSortBy, XLSortOrder sortOrder, bool matchCase, bool ignoreBlanks);
}
public interface ClosedXML.Excel.IXLBaseCollection`2 {
    public int Count { get; }
    public IXLStyle Style { get; public set; }
    unknown object Value {public set; }
    public abstract virtual int get_Count();
    public abstract virtual IXLStyle get_Style();
    public abstract virtual void set_Style(IXLStyle value);
    public abstract virtual IXLDataValidation SetDataValidation();
    public abstract virtual TMultiple AddToNamed(string rangeName);
    public abstract virtual TMultiple AddToNamed(string rangeName, XLScope scope);
    public abstract virtual TMultiple AddToNamed(string rangeName, XLScope scope, string comment);
    public abstract virtual void set_Value(object value);
    public abstract virtual TMultiple SetValue(T value);
    public abstract virtual IXLCells Cells();
    public abstract virtual IXLCells CellsUsed();
    public abstract virtual IXLCells CellsUsed(bool includeFormats);
    public abstract virtual TMultiple SetDataType(XLDataType dataType);
    public abstract virtual TMultiple Clear(XLClearOptions clearOptions);
}
public interface ClosedXML.Excel.IXLBorder {
    unknown XLBorderStyleValues OutsideBorder {public set; }
    unknown XLColor OutsideBorderColor {public set; }
    unknown XLBorderStyleValues InsideBorder {public set; }
    unknown XLColor InsideBorderColor {public set; }
    public XLBorderStyleValues LeftBorder { get; public set; }
    public XLColor LeftBorderColor { get; public set; }
    public XLBorderStyleValues RightBorder { get; public set; }
    public XLColor RightBorderColor { get; public set; }
    public XLBorderStyleValues TopBorder { get; public set; }
    public XLColor TopBorderColor { get; public set; }
    public XLBorderStyleValues BottomBorder { get; public set; }
    public XLColor BottomBorderColor { get; public set; }
    public bool DiagonalUp { get; public set; }
    public bool DiagonalDown { get; public set; }
    public XLBorderStyleValues DiagonalBorder { get; public set; }
    public XLColor DiagonalBorderColor { get; public set; }
    public abstract virtual void set_OutsideBorder(XLBorderStyleValues value);
    public abstract virtual void set_OutsideBorderColor(XLColor value);
    public abstract virtual void set_InsideBorder(XLBorderStyleValues value);
    public abstract virtual void set_InsideBorderColor(XLColor value);
    public abstract virtual XLBorderStyleValues get_LeftBorder();
    public abstract virtual void set_LeftBorder(XLBorderStyleValues value);
    public abstract virtual XLColor get_LeftBorderColor();
    public abstract virtual void set_LeftBorderColor(XLColor value);
    public abstract virtual XLBorderStyleValues get_RightBorder();
    public abstract virtual void set_RightBorder(XLBorderStyleValues value);
    public abstract virtual XLColor get_RightBorderColor();
    public abstract virtual void set_RightBorderColor(XLColor value);
    public abstract virtual XLBorderStyleValues get_TopBorder();
    public abstract virtual void set_TopBorder(XLBorderStyleValues value);
    public abstract virtual XLColor get_TopBorderColor();
    public abstract virtual void set_TopBorderColor(XLColor value);
    public abstract virtual XLBorderStyleValues get_BottomBorder();
    public abstract virtual void set_BottomBorder(XLBorderStyleValues value);
    public abstract virtual XLColor get_BottomBorderColor();
    public abstract virtual void set_BottomBorderColor(XLColor value);
    public abstract virtual bool get_DiagonalUp();
    public abstract virtual void set_DiagonalUp(bool value);
    public abstract virtual bool get_DiagonalDown();
    public abstract virtual void set_DiagonalDown(bool value);
    public abstract virtual XLBorderStyleValues get_DiagonalBorder();
    public abstract virtual void set_DiagonalBorder(XLBorderStyleValues value);
    public abstract virtual XLColor get_DiagonalBorderColor();
    public abstract virtual void set_DiagonalBorderColor(XLColor value);
    public abstract virtual IXLStyle SetOutsideBorder(XLBorderStyleValues value);
    public abstract virtual IXLStyle SetOutsideBorderColor(XLColor value);
    public abstract virtual IXLStyle SetInsideBorder(XLBorderStyleValues value);
    public abstract virtual IXLStyle SetInsideBorderColor(XLColor value);
    public abstract virtual IXLStyle SetLeftBorder(XLBorderStyleValues value);
    public abstract virtual IXLStyle SetLeftBorderColor(XLColor value);
    public abstract virtual IXLStyle SetRightBorder(XLBorderStyleValues value);
    public abstract virtual IXLStyle SetRightBorderColor(XLColor value);
    public abstract virtual IXLStyle SetTopBorder(XLBorderStyleValues value);
    public abstract virtual IXLStyle SetTopBorderColor(XLColor value);
    public abstract virtual IXLStyle SetBottomBorder(XLBorderStyleValues value);
    public abstract virtual IXLStyle SetBottomBorderColor(XLColor value);
    public abstract virtual IXLStyle SetDiagonalUp();
    public abstract virtual IXLStyle SetDiagonalUp(bool value);
    public abstract virtual IXLStyle SetDiagonalDown();
    public abstract virtual IXLStyle SetDiagonalDown(bool value);
    public abstract virtual IXLStyle SetDiagonalBorder(XLBorderStyleValues value);
    public abstract virtual IXLStyle SetDiagonalBorderColor(XLColor value);
}
public interface ClosedXML.Excel.IXLCell {
    public bool Active { get; public set; }
    public IXLAddress Address { get; }
    public XLCellValue CachedValue { get; }
    public IXLRange CurrentRegion { get; }
    public XLDataType DataType { get; }
    public string FormulaA1 { get; public set; }
    public string FormulaR1C1 { get; public set; }
    public IXLRangeAddress FormulaReference { get; public set; }
    public bool HasArrayFormula { get; }
    public bool HasComment { get; }
    public bool HasDataValidation { get; }
    public bool HasFormula { get; }
    public bool HasHyperlink { get; }
    public bool HasRichText { get; }
    public bool HasSparkline { get; }
    public bool NeedsRecalculation { get; }
    public bool ShareString { get; public set; }
    public IXLSparkline Sparkline { get; }
    public IXLStyle Style { get; public set; }
    public XLCellValue Value { get; public set; }
    public IXLWorksheet Worksheet { get; }
    public bool ShowPhonetic { get; public set; }
    public abstract virtual bool get_Active();
    public abstract virtual void set_Active(bool value);
    public abstract virtual IXLAddress get_Address();
    public abstract virtual XLCellValue get_CachedValue();
    public abstract virtual IXLRange get_CurrentRegion();
    public abstract virtual XLDataType get_DataType();
    public abstract virtual string get_FormulaA1();
    public abstract virtual void set_FormulaA1(string value);
    public abstract virtual string get_FormulaR1C1();
    public abstract virtual void set_FormulaR1C1(string value);
    public abstract virtual IXLRangeAddress get_FormulaReference();
    public abstract virtual void set_FormulaReference(IXLRangeAddress value);
    public abstract virtual bool get_HasArrayFormula();
    public abstract virtual bool get_HasComment();
    public abstract virtual bool get_HasDataValidation();
    public abstract virtual bool get_HasFormula();
    public abstract virtual bool get_HasHyperlink();
    public abstract virtual bool get_HasRichText();
    public abstract virtual bool get_HasSparkline();
    public abstract virtual bool get_NeedsRecalculation();
    public abstract virtual bool get_ShareString();
    public abstract virtual void set_ShareString(bool value);
    public abstract virtual IXLSparkline get_Sparkline();
    public abstract virtual IXLStyle get_Style();
    public abstract virtual void set_Style(IXLStyle value);
    public abstract virtual XLCellValue get_Value();
    public abstract virtual void set_Value(XLCellValue value);
    public abstract virtual IXLWorksheet get_Worksheet();
    public abstract virtual bool get_ShowPhonetic();
    public abstract virtual void set_ShowPhonetic(bool value);
    public abstract virtual IXLConditionalFormat AddConditionalFormat();
    public abstract virtual IXLCell AddToNamed(string rangeName);
    public abstract virtual IXLCell AddToNamed(string rangeName, XLScope scope);
    public abstract virtual IXLCell AddToNamed(string rangeName, XLScope scope, string comment);
    public abstract virtual IXLRange AsRange();
    public abstract virtual IXLCell CellAbove();
    public abstract virtual IXLCell CellAbove(int step);
    public abstract virtual IXLCell CellBelow();
    public abstract virtual IXLCell CellBelow(int step);
    public abstract virtual IXLCell CellLeft();
    public abstract virtual IXLCell CellLeft(int step);
    public abstract virtual IXLCell CellRight();
    public abstract virtual IXLCell CellRight(int step);
    public abstract virtual IXLCell Clear(XLClearOptions clearOptions);
    public abstract virtual IXLCell CopyFrom(IXLCell otherCell);
    public abstract virtual IXLCell CopyFrom(string otherCell);
    public abstract virtual IXLCell CopyFrom(IXLRangeBase rangeBase);
    public abstract virtual IXLCell CopyTo(IXLCell target);
    public abstract virtual IXLCell CopyTo(string target);
    public abstract virtual IXLComment CreateComment();
    public abstract virtual IXLDataValidation CreateDataValidation();
    public abstract virtual XLHyperlink CreateHyperlink();
    public abstract virtual IXLRichText CreateRichText();
    public abstract virtual void Delete(XLShiftDeletedCells shiftDeleteCells);
    public abstract virtual IXLComment GetComment();
    public abstract virtual IXLDataValidation GetDataValidation();
    public abstract virtual bool GetBoolean();
    public abstract virtual double GetDouble();
    public abstract virtual string GetText();
    public abstract virtual XLError GetError();
    public abstract virtual DateTime GetDateTime();
    public abstract virtual TimeSpan GetTimeSpan();
    public abstract virtual bool TryGetValue(T& value);
    public abstract virtual T GetValue();
    public abstract virtual string GetString();
    public abstract virtual string GetFormattedString();
    public abstract virtual XLHyperlink GetHyperlink();
    public abstract virtual IXLRichText GetRichText();
    public abstract virtual IXLCells InsertCellsAbove(int numberOfRows);
    public abstract virtual IXLCells InsertCellsAfter(int numberOfColumns);
    public abstract virtual IXLCells InsertCellsBefore(int numberOfColumns);
    public abstract virtual IXLCells InsertCellsBelow(int numberOfRows);
    public abstract virtual IXLRange InsertData(IEnumerable data);
    public abstract virtual IXLRange InsertData(IEnumerable data, bool transpose);
    public abstract virtual IXLRange InsertData(DataTable dataTable);
    public abstract virtual IXLTable InsertTable(IEnumerable`1<T> data);
    public abstract virtual IXLTable InsertTable(IEnumerable`1<T> data, bool createTable);
    public abstract virtual IXLTable InsertTable(IEnumerable`1<T> data, string tableName);
    public abstract virtual IXLTable InsertTable(IEnumerable`1<T> data, string tableName, bool createTable);
    public abstract virtual IXLTable InsertTable(DataTable data);
    public abstract virtual IXLTable InsertTable(DataTable data, bool createTable);
    public abstract virtual IXLTable InsertTable(DataTable data, string tableName);
    public abstract virtual IXLTable InsertTable(DataTable data, string tableName, bool createTable);
    public abstract virtual void InvalidateFormula();
    public abstract virtual bool IsEmpty();
    public abstract virtual bool IsEmpty(XLCellsUsedOptions options);
    public abstract virtual bool IsMerged();
    public abstract virtual IXLRange MergedRange();
    public abstract virtual void Select();
    public abstract virtual IXLCell SetActive(bool value);
    [ObsoleteAttribute("Use GetDataValidation to access the existing rule, or CreateDataValidation() to create a new one.")]
public abstract virtual IXLDataValidation SetDataValidation();
    public abstract virtual IXLCell SetFormulaA1(string formula);
    public abstract virtual IXLCell SetFormulaR1C1(string formula);
    public abstract virtual void SetHyperlink(XLHyperlink hyperlink);
    public abstract virtual IXLCell SetValue(XLCellValue value);
    public abstract virtual XLTableCellType TableCellType();
    public abstract virtual string ToString(string format);
    public abstract virtual IXLColumn WorksheetColumn();
    public abstract virtual IXLRow WorksheetRow();
}
public interface ClosedXML.Excel.IXLCells {
    unknown XLCellValue Value {public set; }
    unknown string FormulaA1 {public set; }
    unknown string FormulaR1C1 {public set; }
    public IXLStyle Style { get; public set; }
    public abstract virtual void set_Value(XLCellValue value);
    public abstract virtual IXLCells Clear(XLClearOptions clearOptions);
    public abstract virtual void DeleteComments();
    public abstract virtual void DeleteSparklines();
    public abstract virtual void set_FormulaA1(string value);
    public abstract virtual void set_FormulaR1C1(string value);
    public abstract virtual IXLStyle get_Style();
    public abstract virtual void set_Style(IXLStyle value);
    public abstract virtual void Select();
}
public interface ClosedXML.Excel.IXLCFColorScaleMax {
    public abstract virtual void Maximum(XLCFContentType type, string value, XLColor color);
    public abstract virtual void Maximum(XLCFContentType type, double value, XLColor color);
    public abstract virtual void HighestValue(XLColor color);
}
public interface ClosedXML.Excel.IXLCFColorScaleMid {
    public abstract virtual IXLCFColorScaleMax Midpoint(XLCFContentType type, string value, XLColor color);
    public abstract virtual IXLCFColorScaleMax Midpoint(XLCFContentType type, double value, XLColor color);
    public abstract virtual void Maximum(XLCFContentType type, string value, XLColor color);
    public abstract virtual void Maximum(XLCFContentType type, double value, XLColor color);
    public abstract virtual void HighestValue(XLColor color);
}
public interface ClosedXML.Excel.IXLCFColorScaleMin {
    public abstract virtual IXLCFColorScaleMid Minimum(XLCFContentType type, string value, XLColor color);
    public abstract virtual IXLCFColorScaleMid Minimum(XLCFContentType type, double value, XLColor color);
    public abstract virtual IXLCFColorScaleMid LowestValue(XLColor color);
}
[NullableContextAttribute("1")]
internal interface ClosedXML.Excel.IXLCFConverter {
    public abstract virtual ConditionalFormattingRule Convert(IXLConditionalFormat cf, int priority, SaveContext context);
}
internal interface ClosedXML.Excel.IXLCFConverterExtension {
    public abstract virtual ConditionalFormattingRule Convert(IXLConditionalFormat cf, SaveContext context);
}
public interface ClosedXML.Excel.IXLCFDataBarMax {
    public abstract virtual void Maximum(XLCFContentType type, string value);
    public abstract virtual void Maximum(XLCFContentType type, double value);
    public abstract virtual void HighestValue();
}
public interface ClosedXML.Excel.IXLCFDataBarMin {
    public abstract virtual IXLCFDataBarMax Minimum(XLCFContentType type, string value);
    public abstract virtual IXLCFDataBarMax Minimum(XLCFContentType type, double value);
    public abstract virtual IXLCFDataBarMax LowestValue();
}
public interface ClosedXML.Excel.IXLCFIconSet {
    public abstract virtual IXLCFIconSet AddValue(XLCFIconSetOperator setOperator, string value, XLCFContentType type);
    public abstract virtual IXLCFIconSet AddValue(XLCFIconSetOperator setOperator, double value, XLCFContentType type);
}
public interface ClosedXML.Excel.IXLChart {
    public bool RightAngleAxes { get; public set; }
    public XLChartType ChartType { get; public set; }
    public abstract virtual bool get_RightAngleAxes();
    public abstract virtual void set_RightAngleAxes(bool value);
    public abstract virtual IXLChart SetRightAngleAxes();
    public abstract virtual IXLChart SetRightAngleAxes(bool rightAngleAxes);
    public abstract virtual XLChartType get_ChartType();
    public abstract virtual void set_ChartType(XLChartType value);
    public abstract virtual IXLChart SetChartType(XLChartType chartType);
}
public interface ClosedXML.Excel.IXLCharts {
    public abstract virtual void Add(IXLChart chart);
}
public interface ClosedXML.Excel.IXLColumn {
    public double Width { get; public set; }
    public bool IsHidden { get; }
    public int OutlineLevel { get; public set; }
    public abstract virtual double get_Width();
    public abstract virtual void set_Width(double value);
    public abstract virtual void Delete();
    public abstract virtual int ColumnNumber();
    public abstract virtual string ColumnLetter();
    public abstract virtual IXLColumns InsertColumnsAfter(int numberOfColumns);
    public abstract virtual IXLColumns InsertColumnsBefore(int numberOfColumns);
    public abstract virtual IXLCell Cell(int rowNumber);
    public abstract virtual IXLCells Cells(string cellsInColumn);
    public abstract virtual IXLCells Cells(int firstRow, int lastRow);
    public abstract virtual IXLColumn AdjustToContents();
    public abstract virtual IXLColumn AdjustToContents(int startRow);
    public abstract virtual IXLColumn AdjustToContents(int startRow, int endRow);
    public abstract virtual IXLColumn AdjustToContents(double minWidth, double maxWidth);
    public abstract virtual IXLColumn AdjustToContents(int startRow, double minWidth, double maxWidth);
    public abstract virtual IXLColumn AdjustToContents(int startRow, int endRow, double minWidth, double maxWidth);
    public abstract virtual IXLColumn Hide();
    public abstract virtual IXLColumn Unhide();
    public abstract virtual bool get_IsHidden();
    public abstract virtual int get_OutlineLevel();
    public abstract virtual void set_OutlineLevel(int value);
    public abstract virtual IXLColumn Group();
    public abstract virtual IXLColumn Group(bool collapse);
    public abstract virtual IXLColumn Group(int outlineLevel);
    public abstract virtual IXLColumn Group(int outlineLevel, bool collapse);
    public abstract virtual IXLColumn Ungroup();
    public abstract virtual IXLColumn Ungroup(bool fromAll);
    public abstract virtual IXLColumn Collapse();
    public abstract virtual IXLColumn Expand();
    public abstract virtual int CellCount();
    public abstract virtual IXLRangeColumn CopyTo(IXLCell cell);
    public abstract virtual IXLRangeColumn CopyTo(IXLRangeBase range);
    public abstract virtual IXLColumn CopyTo(IXLColumn column);
    public abstract virtual IXLColumn Sort(XLSortOrder sortOrder, bool matchCase, bool ignoreBlanks);
    public abstract virtual IXLRangeColumn Column(int start, int end);
    public abstract virtual IXLRangeColumn Column(IXLCell start, IXLCell end);
    public abstract virtual IXLRangeColumns Columns(string columns);
    public abstract virtual IXLColumn AddVerticalPageBreak();
    public abstract virtual IXLColumn ColumnLeft();
    public abstract virtual IXLColumn ColumnLeft(int step);
    public abstract virtual IXLColumn ColumnRight();
    public abstract virtual IXLColumn ColumnRight(int step);
    public abstract virtual IXLColumn Clear(XLClearOptions clearOptions);
    public abstract virtual IXLRangeColumn ColumnUsed(XLCellsUsedOptions options);
}
public interface ClosedXML.Excel.IXLColumns {
    unknown double Width {public set; }
    public IXLStyle Style { get; public set; }
    public abstract virtual void set_Width(double value);
    public abstract virtual void Delete();
    public abstract virtual IXLColumns AdjustToContents();
    public abstract virtual IXLColumns AdjustToContents(int startRow);
    public abstract virtual IXLColumns AdjustToContents(int startRow, int endRow);
    public abstract virtual IXLColumns AdjustToContents(double minWidth, double maxWidth);
    public abstract virtual IXLColumns AdjustToContents(int startRow, double minWidth, double maxWidth);
    public abstract virtual IXLColumns AdjustToContents(int startRow, int endRow, double minWidth, double maxWidth);
    public abstract virtual void Hide();
    public abstract virtual void Unhide();
    public abstract virtual void Group();
    public abstract virtual void Group(bool collapse);
    public abstract virtual void Group(int outlineLevel);
    public abstract virtual void Group(int outlineLevel, bool collapse);
    public abstract virtual void Ungroup();
    public abstract virtual void Ungroup(bool fromAll);
    public abstract virtual void Collapse();
    public abstract virtual void Expand();
    public abstract virtual IXLCells Cells();
    public abstract virtual IXLCells CellsUsed();
    public abstract virtual IXLCells CellsUsed(bool includeFormats);
    public abstract virtual IXLStyle get_Style();
    public abstract virtual void set_Style(IXLStyle value);
    public abstract virtual IXLColumns AddVerticalPageBreaks();
    public abstract virtual IXLColumns Clear(XLClearOptions clearOptions);
    public abstract virtual void Select();
}
public interface ClosedXML.Excel.IXLComment {
    public string Author { get; public set; }
    public abstract virtual string get_Author();
    public abstract virtual void set_Author(string value);
    public abstract virtual IXLComment SetAuthor(string value);
    public abstract virtual IXLRichString AddSignature();
    public abstract virtual void Delete();
}
public interface ClosedXML.Excel.IXLConditionalFormat {
    public IXLStyle Style { get; public set; }
    public XLConditionalFormatType ConditionalFormatType { get; }
    public XLIconSetStyle IconSetStyle { get; }
    public XLTimePeriod TimePeriod { get; }
    public bool ReverseIconOrder { get; }
    public bool ShowIconOnly { get; }
    public bool ShowBarOnly { get; }
    public bool StopIfTrue { get; }
    public IXLRange Range { get; public set; }
    public IXLRanges Ranges { get; }
    public XLDictionary`1<XLFormula> Values { get; }
    public XLDictionary`1<XLColor> Colors { get; }
    public XLDictionary`1<XLCFContentType> ContentTypes { get; }
    public XLDictionary`1<XLCFIconSetOperator> IconSetOperators { get; }
    public XLCFOperator Operator { get; }
    public bool Bottom { get; }
    public bool Percent { get; }
    public abstract virtual IXLStyle get_Style();
    public abstract virtual void set_Style(IXLStyle value);
    public abstract virtual IXLStyle WhenIsBlank();
    public abstract virtual IXLStyle WhenNotBlank();
    public abstract virtual IXLStyle WhenIsError();
    public abstract virtual IXLStyle WhenNotError();
    public abstract virtual IXLStyle WhenDateIs(XLTimePeriod timePeriod);
    public abstract virtual IXLStyle WhenContains(string value);
    public abstract virtual IXLStyle WhenNotContains(string value);
    public abstract virtual IXLStyle WhenStartsWith(string value);
    public abstract virtual IXLStyle WhenEndsWith(string value);
    public abstract virtual IXLStyle WhenEquals(string value);
    public abstract virtual IXLStyle WhenNotEquals(string value);
    public abstract virtual IXLStyle WhenGreaterThan(string value);
    public abstract virtual IXLStyle WhenLessThan(string value);
    public abstract virtual IXLStyle WhenEqualOrGreaterThan(string value);
    public abstract virtual IXLStyle WhenEqualOrLessThan(string value);
    public abstract virtual IXLStyle WhenBetween(string minValue, string maxValue);
    public abstract virtual IXLStyle WhenNotBetween(string minValue, string maxValue);
    public abstract virtual IXLStyle WhenEquals(double value);
    public abstract virtual IXLStyle WhenNotEquals(double value);
    public abstract virtual IXLStyle WhenGreaterThan(double value);
    public abstract virtual IXLStyle WhenLessThan(double value);
    public abstract virtual IXLStyle WhenEqualOrGreaterThan(double value);
    public abstract virtual IXLStyle WhenEqualOrLessThan(double value);
    public abstract virtual IXLStyle WhenBetween(double minValue, double maxValue);
    public abstract virtual IXLStyle WhenNotBetween(double minValue, double maxValue);
    public abstract virtual IXLStyle WhenIsDuplicate();
    public abstract virtual IXLStyle WhenIsUnique();
    public abstract virtual IXLStyle WhenIsTrue(string formula);
    public abstract virtual IXLStyle WhenIsTop(int value, XLTopBottomType topBottomType);
    public abstract virtual IXLStyle WhenIsBottom(int value, XLTopBottomType topBottomType);
    public abstract virtual IXLCFColorScaleMin ColorScale();
    public abstract virtual IXLCFDataBarMin DataBar(XLColor color, bool showBarOnly);
    public abstract virtual IXLCFDataBarMin DataBar(XLColor positiveColor, XLColor negativeColor, bool showBarOnly);
    public abstract virtual IXLCFIconSet IconSet(XLIconSetStyle iconSetStyle, bool reverseIconOrder, bool showIconOnly);
    public abstract virtual XLConditionalFormatType get_ConditionalFormatType();
    public abstract virtual XLIconSetStyle get_IconSetStyle();
    public abstract virtual XLTimePeriod get_TimePeriod();
    public abstract virtual bool get_ReverseIconOrder();
    public abstract virtual bool get_ShowIconOnly();
    public abstract virtual bool get_ShowBarOnly();
    public abstract virtual bool get_StopIfTrue();
    public abstract virtual IXLRange get_Range();
    public abstract virtual void set_Range(IXLRange value);
    public abstract virtual IXLRanges get_Ranges();
    public abstract virtual XLDictionary`1<XLFormula> get_Values();
    public abstract virtual XLDictionary`1<XLColor> get_Colors();
    public abstract virtual XLDictionary`1<XLCFContentType> get_ContentTypes();
    public abstract virtual XLDictionary`1<XLCFIconSetOperator> get_IconSetOperators();
    public abstract virtual XLCFOperator get_Operator();
    public abstract virtual bool get_Bottom();
    public abstract virtual bool get_Percent();
    public abstract virtual IXLConditionalFormat SetStopIfTrue();
    public abstract virtual IXLConditionalFormat SetStopIfTrue(bool value);
    public abstract virtual IXLConditionalFormat CopyTo(IXLWorksheet targetSheet);
}
public interface ClosedXML.Excel.IXLConditionalFormats {
    public abstract virtual void Add(IXLConditionalFormat conditionalFormat);
    public abstract virtual void RemoveAll();
    public abstract virtual void Remove(Predicate`1<IXLConditionalFormat> predicate);
}
public interface ClosedXML.Excel.IXLCustomFilteredColumn {
    public abstract virtual void EqualTo(T value);
    public abstract virtual void NotEqualTo(T value);
    public abstract virtual void GreaterThan(T value);
    public abstract virtual void LessThan(T value);
    public abstract virtual void EqualOrGreaterThan(T value);
    public abstract virtual void EqualOrLessThan(T value);
    public abstract virtual void BeginsWith(string value);
    public abstract virtual void NotBeginsWith(string value);
    public abstract virtual void EndsWith(string value);
    public abstract virtual void NotEndsWith(string value);
    public abstract virtual void Contains(string value);
    public abstract virtual void NotContains(string value);
}
public interface ClosedXML.Excel.IXLCustomProperties {
    public abstract virtual void Add(IXLCustomProperty customProperty);
    public abstract virtual void Add(string name, T value);
    public abstract virtual void Delete(string name);
    public abstract virtual IXLCustomProperty CustomProperty(string name);
}
public interface ClosedXML.Excel.IXLCustomProperty {
    public string Name { get; public set; }
    public XLCustomPropertyType Type { get; }
    public object Value { get; public set; }
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    public abstract virtual XLCustomPropertyType get_Type();
    public abstract virtual object get_Value();
    public abstract virtual void set_Value(object value);
    public abstract virtual T GetValue();
}
public interface ClosedXML.Excel.IXLDataValidation {
    public XLAllowedValues AllowedValues { get; public set; }
    public XLDateCriteria Date { get; }
    public XLDecimalCriteria Decimal { get; }
    public string ErrorMessage { get; public set; }
    public XLErrorStyle ErrorStyle { get; public set; }
    public string ErrorTitle { get; public set; }
    public bool IgnoreBlanks { get; public set; }
    public bool InCellDropdown { get; public set; }
    public string InputMessage { get; public set; }
    public string InputTitle { get; public set; }
    public string MaxValue { get; public set; }
    public string MinValue { get; public set; }
    public XLOperator Operator { get; public set; }
    public IEnumerable`1<IXLRange> Ranges { get; }
    public bool ShowErrorMessage { get; public set; }
    public bool ShowInputMessage { get; public set; }
    public XLTextLengthCriteria TextLength { get; }
    public XLTimeCriteria Time { get; }
    public string Value { get; public set; }
    public XLWholeNumberCriteria WholeNumber { get; }
    public abstract virtual XLAllowedValues get_AllowedValues();
    public abstract virtual void set_AllowedValues(XLAllowedValues value);
    public abstract virtual XLDateCriteria get_Date();
    public abstract virtual XLDecimalCriteria get_Decimal();
    public abstract virtual string get_ErrorMessage();
    public abstract virtual void set_ErrorMessage(string value);
    public abstract virtual XLErrorStyle get_ErrorStyle();
    public abstract virtual void set_ErrorStyle(XLErrorStyle value);
    public abstract virtual string get_ErrorTitle();
    public abstract virtual void set_ErrorTitle(string value);
    public abstract virtual bool get_IgnoreBlanks();
    public abstract virtual void set_IgnoreBlanks(bool value);
    public abstract virtual bool get_InCellDropdown();
    public abstract virtual void set_InCellDropdown(bool value);
    public abstract virtual string get_InputMessage();
    public abstract virtual void set_InputMessage(string value);
    public abstract virtual string get_InputTitle();
    public abstract virtual void set_InputTitle(string value);
    public abstract virtual string get_MaxValue();
    public abstract virtual void set_MaxValue(string value);
    public abstract virtual string get_MinValue();
    public abstract virtual void set_MinValue(string value);
    public abstract virtual XLOperator get_Operator();
    public abstract virtual void set_Operator(XLOperator value);
    public abstract virtual IEnumerable`1<IXLRange> get_Ranges();
    public abstract virtual bool get_ShowErrorMessage();
    public abstract virtual void set_ShowErrorMessage(bool value);
    public abstract virtual bool get_ShowInputMessage();
    public abstract virtual void set_ShowInputMessage(bool value);
    public abstract virtual XLTextLengthCriteria get_TextLength();
    public abstract virtual XLTimeCriteria get_Time();
    public abstract virtual string get_Value();
    public abstract virtual void set_Value(string value);
    public abstract virtual XLWholeNumberCriteria get_WholeNumber();
    public abstract virtual void AddRange(IXLRange range);
    public abstract virtual void AddRanges(IEnumerable`1<IXLRange> ranges);
    public abstract virtual void Clear();
    public abstract virtual void ClearRanges();
    public abstract virtual void Custom(string customValidation);
    public abstract virtual bool IsDirty();
    public abstract virtual void List(string list);
    public abstract virtual void List(string list, bool inCellDropdown);
    public abstract virtual void List(IXLRange range);
    public abstract virtual void List(IXLRange range, bool inCellDropdown);
    public abstract virtual bool RemoveRange(IXLRange range);
}
public interface ClosedXML.Excel.IXLDataValidations {
    public IXLWorksheet Worksheet { get; }
    public abstract virtual IXLWorksheet get_Worksheet();
    public abstract virtual IXLDataValidation Add(IXLDataValidation dataValidation);
    public abstract virtual bool ContainsSingle(IXLRange range);
    public abstract virtual void Delete(Predicate`1<IXLDataValidation> predicate);
    public abstract virtual IEnumerable`1<IXLDataValidation> GetAllInRange(IXLRangeAddress rangeAddress);
    public abstract virtual bool TryGet(IXLRangeAddress rangeAddress, IXLDataValidation& dataValidation);
}
public interface ClosedXML.Excel.IXLDateTimeGroupFilteredColumn {
    public abstract virtual IXLDateTimeGroupFilteredColumn AddDateGroupFilter(DateTime date, XLDateTimeGrouping dateTimeGrouping);
}
public interface ClosedXML.Excel.IXLDrawing`1 {
    public int ShapeId { get; }
    public bool Visible { get; public set; }
    public IXLDrawingPosition Position { get; }
    public int ZOrder { get; public set; }
    public IXLDrawingStyle Style { get; }
    public abstract virtual int get_ShapeId();
    public abstract virtual bool get_Visible();
    public abstract virtual void set_Visible(bool value);
    public abstract virtual T SetVisible();
    public abstract virtual T SetVisible(bool hidden);
    public abstract virtual IXLDrawingPosition get_Position();
    public abstract virtual int get_ZOrder();
    public abstract virtual void set_ZOrder(int value);
    public abstract virtual T SetZOrder(int zOrder);
    public abstract virtual IXLDrawingStyle get_Style();
}
public interface ClosedXML.Excel.IXLDrawingAlignment {
    public XLDrawingHorizontalAlignment Horizontal { get; public set; }
    public XLDrawingVerticalAlignment Vertical { get; public set; }
    public bool AutomaticSize { get; public set; }
    public XLDrawingTextDirection Direction { get; public set; }
    public XLDrawingTextOrientation Orientation { get; public set; }
    public abstract virtual XLDrawingHorizontalAlignment get_Horizontal();
    public abstract virtual void set_Horizontal(XLDrawingHorizontalAlignment value);
    public abstract virtual XLDrawingVerticalAlignment get_Vertical();
    public abstract virtual void set_Vertical(XLDrawingVerticalAlignment value);
    public abstract virtual bool get_AutomaticSize();
    public abstract virtual void set_AutomaticSize(bool value);
    public abstract virtual XLDrawingTextDirection get_Direction();
    public abstract virtual void set_Direction(XLDrawingTextDirection value);
    public abstract virtual XLDrawingTextOrientation get_Orientation();
    public abstract virtual void set_Orientation(XLDrawingTextOrientation value);
    public abstract virtual IXLDrawingStyle SetHorizontal(XLDrawingHorizontalAlignment value);
    public abstract virtual IXLDrawingStyle SetVertical(XLDrawingVerticalAlignment value);
    public abstract virtual IXLDrawingStyle SetAutomaticSize();
    public abstract virtual IXLDrawingStyle SetAutomaticSize(bool value);
    public abstract virtual IXLDrawingStyle SetDirection(XLDrawingTextDirection value);
    public abstract virtual IXLDrawingStyle SetOrientation(XLDrawingTextOrientation value);
}
public interface ClosedXML.Excel.IXLDrawingColorsAndLines {
    public XLColor FillColor { get; public set; }
    public double FillTransparency { get; public set; }
    public XLColor LineColor { get; public set; }
    public double LineTransparency { get; public set; }
    public double LineWeight { get; public set; }
    public XLDashStyle LineDash { get; public set; }
    public XLLineStyle LineStyle { get; public set; }
    public abstract virtual XLColor get_FillColor();
    public abstract virtual void set_FillColor(XLColor value);
    public abstract virtual double get_FillTransparency();
    public abstract virtual void set_FillTransparency(double value);
    public abstract virtual XLColor get_LineColor();
    public abstract virtual void set_LineColor(XLColor value);
    public abstract virtual double get_LineTransparency();
    public abstract virtual void set_LineTransparency(double value);
    public abstract virtual double get_LineWeight();
    public abstract virtual void set_LineWeight(double value);
    public abstract virtual XLDashStyle get_LineDash();
    public abstract virtual void set_LineDash(XLDashStyle value);
    public abstract virtual XLLineStyle get_LineStyle();
    public abstract virtual void set_LineStyle(XLLineStyle value);
    public abstract virtual IXLDrawingStyle SetFillColor(XLColor value);
    public abstract virtual IXLDrawingStyle SetFillTransparency(double value);
    public abstract virtual IXLDrawingStyle SetLineColor(XLColor value);
    public abstract virtual IXLDrawingStyle SetLineTransparency(double value);
    public abstract virtual IXLDrawingStyle SetLineWeight(double value);
    public abstract virtual IXLDrawingStyle SetLineDash(XLDashStyle value);
    public abstract virtual IXLDrawingStyle SetLineStyle(XLLineStyle value);
}
public interface ClosedXML.Excel.IXLDrawingFont {
    public abstract virtual IXLDrawingStyle SetBold();
    public abstract virtual IXLDrawingStyle SetBold(bool value);
    public abstract virtual IXLDrawingStyle SetItalic();
    public abstract virtual IXLDrawingStyle SetItalic(bool value);
    public abstract virtual IXLDrawingStyle SetUnderline();
    public abstract virtual IXLDrawingStyle SetUnderline(XLFontUnderlineValues value);
    public abstract virtual IXLDrawingStyle SetStrikethrough();
    public abstract virtual IXLDrawingStyle SetStrikethrough(bool value);
    public abstract virtual IXLDrawingStyle SetVerticalAlignment(XLFontVerticalTextAlignmentValues value);
    public abstract virtual IXLDrawingStyle SetShadow();
    public abstract virtual IXLDrawingStyle SetShadow(bool value);
    public abstract virtual IXLDrawingStyle SetFontSize(double value);
    public abstract virtual IXLDrawingStyle SetFontColor(XLColor value);
    public abstract virtual IXLDrawingStyle SetFontName(string value);
    public abstract virtual IXLDrawingStyle SetFontFamilyNumbering(XLFontFamilyNumberingValues value);
    public abstract virtual IXLDrawingStyle SetFontCharSet(XLFontCharSet value);
}
public interface ClosedXML.Excel.IXLDrawingMargins {
    public bool Automatic { get; public set; }
    public double Left { get; public set; }
    public double Right { get; public set; }
    public double Top { get; public set; }
    public double Bottom { get; public set; }
    unknown double All {public set; }
    public abstract virtual bool get_Automatic();
    public abstract virtual void set_Automatic(bool value);
    public abstract virtual double get_Left();
    public abstract virtual void set_Left(double value);
    public abstract virtual double get_Right();
    public abstract virtual void set_Right(double value);
    public abstract virtual double get_Top();
    public abstract virtual void set_Top(double value);
    public abstract virtual double get_Bottom();
    public abstract virtual void set_Bottom(double value);
    public abstract virtual void set_All(double value);
    public abstract virtual IXLDrawingStyle SetAutomatic();
    public abstract virtual IXLDrawingStyle SetAutomatic(bool value);
    public abstract virtual IXLDrawingStyle SetLeft(double value);
    public abstract virtual IXLDrawingStyle SetRight(double value);
    public abstract virtual IXLDrawingStyle SetTop(double value);
    public abstract virtual IXLDrawingStyle SetBottom(double value);
    public abstract virtual IXLDrawingStyle SetAll(double value);
}
public interface ClosedXML.Excel.IXLDrawingPosition {
    public int Column { get; public set; }
    public double ColumnOffset { get; public set; }
    public int Row { get; public set; }
    public double RowOffset { get; public set; }
    public abstract virtual int get_Column();
    public abstract virtual void set_Column(int value);
    public abstract virtual IXLDrawingPosition SetColumn(int column);
    public abstract virtual double get_ColumnOffset();
    public abstract virtual void set_ColumnOffset(double value);
    public abstract virtual IXLDrawingPosition SetColumnOffset(double columnOffset);
    public abstract virtual int get_Row();
    public abstract virtual void set_Row(int value);
    public abstract virtual IXLDrawingPosition SetRow(int row);
    public abstract virtual double get_RowOffset();
    public abstract virtual void set_RowOffset(double value);
    public abstract virtual IXLDrawingPosition SetRowOffset(double rowOffset);
}
public interface ClosedXML.Excel.IXLDrawingProperties {
    public XLDrawingAnchor Positioning { get; public set; }
    public abstract virtual XLDrawingAnchor get_Positioning();
    public abstract virtual void set_Positioning(XLDrawingAnchor value);
    public abstract virtual IXLDrawingStyle SetPositioning(XLDrawingAnchor value);
}
public interface ClosedXML.Excel.IXLDrawingProtection {
    public bool Locked { get; public set; }
    public bool LockText { get; public set; }
    public abstract virtual bool get_Locked();
    public abstract virtual void set_Locked(bool value);
    public abstract virtual bool get_LockText();
    public abstract virtual void set_LockText(bool value);
    public abstract virtual IXLDrawingStyle SetLocked();
    public abstract virtual IXLDrawingStyle SetLocked(bool value);
    public abstract virtual IXLDrawingStyle SetLockText();
    public abstract virtual IXLDrawingStyle SetLockText(bool value);
}
public interface ClosedXML.Excel.IXLDrawingSize {
    public bool AutomaticSize { get; public set; }
    public double Height { get; public set; }
    public double Width { get; public set; }
    public abstract virtual bool get_AutomaticSize();
    public abstract virtual void set_AutomaticSize(bool value);
    public abstract virtual double get_Height();
    public abstract virtual void set_Height(double value);
    public abstract virtual double get_Width();
    public abstract virtual void set_Width(double value);
    public abstract virtual IXLDrawingStyle SetAutomaticSize();
    public abstract virtual IXLDrawingStyle SetAutomaticSize(bool value);
    public abstract virtual IXLDrawingStyle SetHeight(double value);
    public abstract virtual IXLDrawingStyle SetWidth(double value);
}
public interface ClosedXML.Excel.IXLDrawingStyle {
    public IXLDrawingAlignment Alignment { get; }
    public IXLDrawingColorsAndLines ColorsAndLines { get; }
    public IXLDrawingSize Size { get; }
    public IXLDrawingProtection Protection { get; }
    public IXLDrawingProperties Properties { get; }
    public IXLDrawingMargins Margins { get; }
    public IXLDrawingWeb Web { get; }
    public abstract virtual IXLDrawingAlignment get_Alignment();
    public abstract virtual IXLDrawingColorsAndLines get_ColorsAndLines();
    public abstract virtual IXLDrawingSize get_Size();
    public abstract virtual IXLDrawingProtection get_Protection();
    public abstract virtual IXLDrawingProperties get_Properties();
    public abstract virtual IXLDrawingMargins get_Margins();
    public abstract virtual IXLDrawingWeb get_Web();
}
[NullableContextAttribute("2")]
public interface ClosedXML.Excel.IXLDrawingWeb {
    public string AlternateText { get; public set; }
    public abstract virtual string get_AlternateText();
    public abstract virtual void set_AlternateText(string value);
    [NullableContextAttribute("1")]
public abstract virtual IXLDrawingStyle SetAlternateText(string value);
}
public interface ClosedXML.Excel.IXLElementProtection {
    public Algorithm Algorithm { get; }
    public bool IsPasswordProtected { get; }
    public bool IsProtected { get; }
    public abstract virtual Algorithm get_Algorithm();
    public abstract virtual bool get_IsPasswordProtected();
    public abstract virtual bool get_IsProtected();
}
public interface ClosedXML.Excel.IXLElementProtection`1 {
    public T AllowedElements { get; public set; }
    public abstract virtual T get_AllowedElements();
    public abstract virtual void set_AllowedElements(T value);
    public abstract virtual IXLElementProtection`1<T> AllowElement(T element, bool allowed);
    public abstract virtual IXLElementProtection`1<T> AllowEverything();
    public abstract virtual IXLElementProtection`1<T> AllowNone();
    public abstract virtual IXLElementProtection`1<T> CopyFrom(IXLElementProtection`1<T> protectable);
    public abstract virtual IXLElementProtection`1<T> DisallowElement(T element);
    public abstract virtual IXLElementProtection`1<T> Protect(Algorithm algorithm);
    public abstract virtual IXLElementProtection`1<T> Protect(string password, Algorithm algorithm);
    public abstract virtual IXLElementProtection`1<T> Unprotect();
    public abstract virtual IXLElementProtection`1<T> Unprotect(string password);
}
[NullableContextAttribute("2")]
public interface ClosedXML.Excel.IXLFileSharing {
    public bool ReadOnlyRecommended { get; public set; }
    public string UserName { get; public set; }
    public abstract virtual bool get_ReadOnlyRecommended();
    public abstract virtual void set_ReadOnlyRecommended(bool value);
    public abstract virtual string get_UserName();
    public abstract virtual void set_UserName(string value);
}
public interface ClosedXML.Excel.IXLFill {
    public XLColor BackgroundColor { get; public set; }
    public XLColor PatternColor { get; public set; }
    public XLFillPatternValues PatternType { get; public set; }
    public abstract virtual XLColor get_BackgroundColor();
    public abstract virtual void set_BackgroundColor(XLColor value);
    public abstract virtual XLColor get_PatternColor();
    public abstract virtual void set_PatternColor(XLColor value);
    public abstract virtual XLFillPatternValues get_PatternType();
    public abstract virtual void set_PatternType(XLFillPatternValues value);
    public abstract virtual IXLStyle SetBackgroundColor(XLColor value);
    public abstract virtual IXLStyle SetPatternColor(XLColor value);
    public abstract virtual IXLStyle SetPatternType(XLFillPatternValues value);
}
public interface ClosedXML.Excel.IXLFilterColumn {
    public XLFilterType FilterType { get; public set; }
    public int TopBottomValue { get; public set; }
    public XLTopBottomType TopBottomType { get; public set; }
    public XLTopBottomPart TopBottomPart { get; public set; }
    public XLFilterDynamicType DynamicType { get; public set; }
    public double DynamicValue { get; public set; }
    public abstract virtual void Clear();
    public abstract virtual IXLFilteredColumn AddFilter(T value);
    public abstract virtual IXLDateTimeGroupFilteredColumn AddDateGroupFilter(DateTime date, XLDateTimeGrouping dateTimeGrouping);
    public abstract virtual void Top(int value, XLTopBottomType type);
    public abstract virtual void Bottom(int value, XLTopBottomType type);
    public abstract virtual void AboveAverage();
    public abstract virtual void BelowAverage();
    public abstract virtual IXLFilterConnector EqualTo(T value);
    public abstract virtual IXLFilterConnector NotEqualTo(T value);
    public abstract virtual IXLFilterConnector GreaterThan(T value);
    public abstract virtual IXLFilterConnector LessThan(T value);
    public abstract virtual IXLFilterConnector EqualOrGreaterThan(T value);
    public abstract virtual IXLFilterConnector EqualOrLessThan(T value);
    public abstract virtual void Between(T minValue, T maxValue);
    public abstract virtual void NotBetween(T minValue, T maxValue);
    public abstract virtual IXLFilterConnector BeginsWith(string value);
    public abstract virtual IXLFilterConnector NotBeginsWith(string value);
    public abstract virtual IXLFilterConnector EndsWith(string value);
    public abstract virtual IXLFilterConnector NotEndsWith(string value);
    public abstract virtual IXLFilterConnector Contains(string value);
    public abstract virtual IXLFilterConnector NotContains(string value);
    public abstract virtual XLFilterType get_FilterType();
    public abstract virtual void set_FilterType(XLFilterType value);
    public abstract virtual int get_TopBottomValue();
    public abstract virtual void set_TopBottomValue(int value);
    public abstract virtual XLTopBottomType get_TopBottomType();
    public abstract virtual void set_TopBottomType(XLTopBottomType value);
    public abstract virtual XLTopBottomPart get_TopBottomPart();
    public abstract virtual void set_TopBottomPart(XLTopBottomPart value);
    public abstract virtual XLFilterDynamicType get_DynamicType();
    public abstract virtual void set_DynamicType(XLFilterDynamicType value);
    public abstract virtual double get_DynamicValue();
    public abstract virtual void set_DynamicValue(double value);
    public abstract virtual IXLFilterColumn SetFilterType(XLFilterType value);
    public abstract virtual IXLFilterColumn SetTopBottomValue(int value);
    public abstract virtual IXLFilterColumn SetTopBottomType(XLTopBottomType value);
    public abstract virtual IXLFilterColumn SetTopBottomPart(XLTopBottomPart value);
    public abstract virtual IXLFilterColumn SetDynamicType(XLFilterDynamicType value);
    public abstract virtual IXLFilterColumn SetDynamicValue(double value);
}
public interface ClosedXML.Excel.IXLFilterConnector {
    public IXLCustomFilteredColumn And { get; }
    public IXLCustomFilteredColumn Or { get; }
    public abstract virtual IXLCustomFilteredColumn get_And();
    public abstract virtual IXLCustomFilteredColumn get_Or();
}
public interface ClosedXML.Excel.IXLFilteredColumn {
    public abstract virtual IXLFilteredColumn AddFilter(T value);
}
public interface ClosedXML.Excel.IXLFont {
    public abstract virtual IXLStyle SetBold();
    public abstract virtual IXLStyle SetBold(bool value);
    public abstract virtual IXLStyle SetItalic();
    public abstract virtual IXLStyle SetItalic(bool value);
    public abstract virtual IXLStyle SetUnderline();
    public abstract virtual IXLStyle SetUnderline(XLFontUnderlineValues value);
    public abstract virtual IXLStyle SetStrikethrough();
    public abstract virtual IXLStyle SetStrikethrough(bool value);
    public abstract virtual IXLStyle SetVerticalAlignment(XLFontVerticalTextAlignmentValues value);
    public abstract virtual IXLStyle SetShadow();
    public abstract virtual IXLStyle SetShadow(bool value);
    public abstract virtual IXLStyle SetFontSize(double value);
    public abstract virtual IXLStyle SetFontColor(XLColor value);
    public abstract virtual IXLStyle SetFontName(string value);
    public abstract virtual IXLStyle SetFontFamilyNumbering(XLFontFamilyNumberingValues value);
    public abstract virtual IXLStyle SetFontCharSet(XLFontCharSet value);
}
public interface ClosedXML.Excel.IXLFontBase {
    public bool Bold { get; public set; }
    public bool Italic { get; public set; }
    public XLFontUnderlineValues Underline { get; public set; }
    public bool Strikethrough { get; public set; }
    public XLFontVerticalTextAlignmentValues VerticalAlignment { get; public set; }
    public bool Shadow { get; public set; }
    public double FontSize { get; public set; }
    public XLColor FontColor { get; public set; }
    public string FontName { get; public set; }
    public XLFontFamilyNumberingValues FontFamilyNumbering { get; public set; }
    public XLFontCharSet FontCharSet { get; public set; }
    public abstract virtual bool get_Bold();
    public abstract virtual void set_Bold(bool value);
    public abstract virtual bool get_Italic();
    public abstract virtual void set_Italic(bool value);
    public abstract virtual XLFontUnderlineValues get_Underline();
    public abstract virtual void set_Underline(XLFontUnderlineValues value);
    public abstract virtual bool get_Strikethrough();
    public abstract virtual void set_Strikethrough(bool value);
    public abstract virtual XLFontVerticalTextAlignmentValues get_VerticalAlignment();
    public abstract virtual void set_VerticalAlignment(XLFontVerticalTextAlignmentValues value);
    public abstract virtual bool get_Shadow();
    public abstract virtual void set_Shadow(bool value);
    public abstract virtual double get_FontSize();
    public abstract virtual void set_FontSize(double value);
    public abstract virtual XLColor get_FontColor();
    public abstract virtual void set_FontColor(XLColor value);
    public abstract virtual string get_FontName();
    public abstract virtual void set_FontName(string value);
    public abstract virtual XLFontFamilyNumberingValues get_FontFamilyNumbering();
    public abstract virtual void set_FontFamilyNumbering(XLFontFamilyNumberingValues value);
    public abstract virtual XLFontCharSet get_FontCharSet();
    public abstract virtual void set_FontCharSet(XLFontCharSet value);
}
public interface ClosedXML.Excel.IXLFormattedText`1 {
    unknown bool Bold {public set; }
    unknown bool Italic {public set; }
    unknown XLFontUnderlineValues Underline {public set; }
    unknown bool Strikethrough {public set; }
    unknown XLFontVerticalTextAlignmentValues VerticalAlignment {public set; }
    unknown bool Shadow {public set; }
    unknown double FontSize {public set; }
    unknown XLColor FontColor {public set; }
    unknown string FontName {public set; }
    unknown XLFontFamilyNumberingValues FontFamilyNumbering {public set; }
    public int Count { get; }
    public int Length { get; }
    public string Text { get; }
    public IXLPhonetics Phonetics { get; }
    public bool HasPhonetics { get; }
    public abstract virtual void set_Bold(bool value);
    public abstract virtual void set_Italic(bool value);
    public abstract virtual void set_Underline(XLFontUnderlineValues value);
    public abstract virtual void set_Strikethrough(bool value);
    public abstract virtual void set_VerticalAlignment(XLFontVerticalTextAlignmentValues value);
    public abstract virtual void set_Shadow(bool value);
    public abstract virtual void set_FontSize(double value);
    public abstract virtual void set_FontColor(XLColor value);
    public abstract virtual void set_FontName(string value);
    public abstract virtual void set_FontFamilyNumbering(XLFontFamilyNumberingValues value);
    public abstract virtual IXLFormattedText`1<T> SetBold();
    public abstract virtual IXLFormattedText`1<T> SetBold(bool value);
    public abstract virtual IXLFormattedText`1<T> SetItalic();
    public abstract virtual IXLFormattedText`1<T> SetItalic(bool value);
    public abstract virtual IXLFormattedText`1<T> SetUnderline();
    public abstract virtual IXLFormattedText`1<T> SetUnderline(XLFontUnderlineValues value);
    public abstract virtual IXLFormattedText`1<T> SetStrikethrough();
    public abstract virtual IXLFormattedText`1<T> SetStrikethrough(bool value);
    public abstract virtual IXLFormattedText`1<T> SetVerticalAlignment(XLFontVerticalTextAlignmentValues value);
    public abstract virtual IXLFormattedText`1<T> SetShadow();
    public abstract virtual IXLFormattedText`1<T> SetShadow(bool value);
    public abstract virtual IXLFormattedText`1<T> SetFontSize(double value);
    public abstract virtual IXLFormattedText`1<T> SetFontColor(XLColor value);
    public abstract virtual IXLFormattedText`1<T> SetFontName(string value);
    public abstract virtual IXLFormattedText`1<T> SetFontFamilyNumbering(XLFontFamilyNumberingValues value);
    public abstract virtual IXLRichString AddText(string text, IXLFontBase font);
    public abstract virtual IXLFormattedText`1<T> ClearText();
    public abstract virtual IXLFormattedText`1<T> ClearFont();
    public abstract virtual IXLFormattedText`1<T> Substring(int index);
    public abstract virtual IXLFormattedText`1<T> Substring(int index, int length);
    public abstract virtual IXLFormattedText`1<T> CopyFrom(IXLFormattedText`1<T> original);
    public abstract virtual int get_Count();
    public abstract virtual int get_Length();
    public abstract virtual string get_Text();
    public abstract virtual IXLPhonetics get_Phonetics();
    public abstract virtual bool get_HasPhonetics();
}
public interface ClosedXML.Excel.IXLHeaderFooter {
    public IXLHFItem Left { get; }
    public IXLHFItem Center { get; }
    public IXLHFItem Right { get; }
    public abstract virtual IXLHFItem get_Left();
    public abstract virtual IXLHFItem get_Center();
    public abstract virtual IXLHFItem get_Right();
    public abstract virtual string GetText(XLHFOccurrence occurrence);
    public abstract virtual IXLHeaderFooter Clear(XLHFOccurrence occurrence);
}
public interface ClosedXML.Excel.IXLHFItem {
    public abstract virtual string GetText(XLHFOccurrence occurrence);
    public abstract virtual IXLRichString AddText(XLHFPredefinedText predefinedText);
    public abstract virtual IXLRichString AddText(string text, XLHFOccurrence occurrence);
    public abstract virtual IXLRichString AddText(XLHFPredefinedText predefinedText, XLHFOccurrence occurrence);
    public abstract virtual void Clear(XLHFOccurrence occurrence);
    public abstract virtual IXLRichString AddImage(string imagePath, XLHFOccurrence occurrence);
}
public interface ClosedXML.Excel.IXLHyperlinks {
    public abstract virtual void Add(XLHyperlink hyperlink);
    public abstract virtual void Delete(XLHyperlink hyperlink);
    public abstract virtual void Delete(IXLAddress address);
    public abstract virtual bool TryDelete(IXLAddress address);
    public abstract virtual XLHyperlink Get(IXLAddress address);
    public abstract virtual bool TryGet(IXLAddress address, XLHyperlink& hyperlink);
}
public interface ClosedXML.Excel.IXLMargins {
    public double Left { get; public set; }
    public double Right { get; public set; }
    public double Top { get; public set; }
    public double Bottom { get; public set; }
    public double Header { get; public set; }
    public double Footer { get; public set; }
    public abstract virtual double get_Left();
    public abstract virtual void set_Left(double value);
    public abstract virtual double get_Right();
    public abstract virtual void set_Right(double value);
    public abstract virtual double get_Top();
    public abstract virtual void set_Top(double value);
    public abstract virtual double get_Bottom();
    public abstract virtual void set_Bottom(double value);
    public abstract virtual double get_Header();
    public abstract virtual void set_Header(double value);
    public abstract virtual double get_Footer();
    public abstract virtual void set_Footer(double value);
    public abstract virtual IXLMargins SetLeft(double value);
    public abstract virtual IXLMargins SetRight(double value);
    public abstract virtual IXLMargins SetTop(double value);
    public abstract virtual IXLMargins SetBottom(double value);
    public abstract virtual IXLMargins SetHeader(double value);
    public abstract virtual IXLMargins SetFooter(double value);
}
public interface ClosedXML.Excel.IXLNamedRange {
    public string Comment { get; public set; }
    public bool IsValid { get; }
    public string Name { get; public set; }
    public IXLRanges Ranges { get; }
    public string RefersTo { get; public set; }
    public XLNamedRangeScope Scope { get; }
    public bool Visible { get; public set; }
    public abstract virtual string get_Comment();
    public abstract virtual void set_Comment(string value);
    public abstract virtual bool get_IsValid();
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    public abstract virtual IXLRanges get_Ranges();
    public abstract virtual string get_RefersTo();
    public abstract virtual void set_RefersTo(string value);
    public abstract virtual XLNamedRangeScope get_Scope();
    public abstract virtual bool get_Visible();
    public abstract virtual void set_Visible(bool value);
    public abstract virtual IXLRanges Add(XLWorkbook workbook, string rangeAddress);
    public abstract virtual IXLRanges Add(IXLRange range);
    public abstract virtual IXLRanges Add(IXLRanges ranges);
    public abstract virtual void Clear();
    public abstract virtual IXLNamedRange CopyTo(IXLWorksheet targetSheet);
    public abstract virtual void Delete();
    public abstract virtual void Remove(string rangeAddress);
    public abstract virtual void Remove(IXLRange range);
    public abstract virtual void Remove(IXLRanges ranges);
    public abstract virtual IXLNamedRange SetRefersTo(string range);
    public abstract virtual IXLNamedRange SetRefersTo(IXLRangeBase range);
    public abstract virtual IXLNamedRange SetRefersTo(IXLRanges ranges);
}
public interface ClosedXML.Excel.IXLNamedRanges {
    public abstract virtual IXLNamedRange NamedRange(string rangeName);
    public abstract virtual IXLNamedRange Add(string rangeName, string rangeAddress);
    public abstract virtual IXLNamedRange Add(string rangeName, IXLRange range);
    public abstract virtual IXLNamedRange Add(string rangeName, IXLRanges ranges);
    public abstract virtual IXLNamedRange Add(string rangeName, string rangeAddress, string comment);
    public abstract virtual IXLNamedRange Add(string rangeName, IXLRange range, string comment);
    public abstract virtual IXLNamedRange Add(string rangeName, IXLRanges ranges, string comment);
    public abstract virtual void Delete(string rangeName);
    public abstract virtual void Delete(int rangeIndex);
    public abstract virtual void DeleteAll();
    public abstract virtual bool TryGetValue(string name, IXLNamedRange& range);
    public abstract virtual bool Contains(string name);
    public abstract virtual IEnumerable`1<IXLNamedRange> ValidNamedRanges();
    public abstract virtual IEnumerable`1<IXLNamedRange> InvalidNamedRanges();
}
public interface ClosedXML.Excel.IXLNumberFormat {
    public abstract virtual IXLStyle SetNumberFormatId(int value);
    public abstract virtual IXLStyle SetFormat(string value);
}
public interface ClosedXML.Excel.IXLNumberFormatBase {
    public int NumberFormatId { get; public set; }
    public string Format { get; public set; }
    public abstract virtual int get_NumberFormatId();
    public abstract virtual void set_NumberFormatId(int value);
    public abstract virtual string get_Format();
    public abstract virtual void set_Format(string value);
}
public interface ClosedXML.Excel.IXLOutline {
    public XLOutlineSummaryVLocation SummaryVLocation { get; public set; }
    public XLOutlineSummaryHLocation SummaryHLocation { get; public set; }
    public abstract virtual XLOutlineSummaryVLocation get_SummaryVLocation();
    public abstract virtual void set_SummaryVLocation(XLOutlineSummaryVLocation value);
    public abstract virtual XLOutlineSummaryHLocation get_SummaryHLocation();
    public abstract virtual void set_SummaryHLocation(XLOutlineSummaryHLocation value);
}
public interface ClosedXML.Excel.IXLPageSetup {
    public IXLPrintAreas PrintAreas { get; }
    public int FirstRowToRepeatAtTop { get; }
    public int LastRowToRepeatAtTop { get; }
    public int FirstColumnToRepeatAtLeft { get; }
    public int LastColumnToRepeatAtLeft { get; }
    public XLPageOrientation PageOrientation { get; public set; }
    public int PagesWide { get; public set; }
    public int PagesTall { get; public set; }
    public int Scale { get; public set; }
    public int HorizontalDpi { get; public set; }
    public int VerticalDpi { get; public set; }
    public Nullable`1<UInt32> FirstPageNumber { get; public set; }
    public bool CenterHorizontally { get; public set; }
    public bool CenterVertically { get; public set; }
    public XLPaperSize PaperSize { get; public set; }
    public IXLMargins Margins { get; }
    public IXLHeaderFooter Header { get; }
    public IXLHeaderFooter Footer { get; }
    public bool ScaleHFWithDocument { get; public set; }
    public bool AlignHFWithMargins { get; public set; }
    public bool ShowGridlines { get; public set; }
    public bool ShowRowAndColumnHeadings { get; public set; }
    public bool BlackAndWhite { get; public set; }
    public bool DraftQuality { get; public set; }
    public XLPageOrderValues PageOrder { get; public set; }
    public XLShowCommentsValues ShowComments { get; public set; }
    public List`1<int> RowBreaks { get; }
    public List`1<int> ColumnBreaks { get; }
    public XLPrintErrorValues PrintErrorValue { get; public set; }
    public bool DifferentFirstPageOnHF { get; public set; }
    public bool DifferentOddEvenPagesOnHF { get; public set; }
    public abstract virtual IXLPrintAreas get_PrintAreas();
    public abstract virtual int get_FirstRowToRepeatAtTop();
    public abstract virtual int get_LastRowToRepeatAtTop();
    public abstract virtual void SetRowsToRepeatAtTop(string range);
    public abstract virtual void SetRowsToRepeatAtTop(int firstRowToRepeatAtTop, int lastRowToRepeatAtTop);
    public abstract virtual int get_FirstColumnToRepeatAtLeft();
    public abstract virtual int get_LastColumnToRepeatAtLeft();
    public abstract virtual void SetColumnsToRepeatAtLeft(int firstColumnToRepeatAtLeft, int lastColumnToRepeatAtLeft);
    public abstract virtual void SetColumnsToRepeatAtLeft(string range);
    public abstract virtual XLPageOrientation get_PageOrientation();
    public abstract virtual void set_PageOrientation(XLPageOrientation value);
    public abstract virtual int get_PagesWide();
    public abstract virtual void set_PagesWide(int value);
    public abstract virtual int get_PagesTall();
    public abstract virtual void set_PagesTall(int value);
    public abstract virtual int get_Scale();
    public abstract virtual void set_Scale(int value);
    public abstract virtual int get_HorizontalDpi();
    public abstract virtual void set_HorizontalDpi(int value);
    public abstract virtual int get_VerticalDpi();
    public abstract virtual void set_VerticalDpi(int value);
    public abstract virtual Nullable`1<UInt32> get_FirstPageNumber();
    public abstract virtual void set_FirstPageNumber(Nullable`1<UInt32> value);
    public abstract virtual bool get_CenterHorizontally();
    public abstract virtual void set_CenterHorizontally(bool value);
    public abstract virtual bool get_CenterVertically();
    public abstract virtual void set_CenterVertically(bool value);
    public abstract virtual void AdjustTo(int percentageOfNormalSize);
    public abstract virtual void FitToPages(int pagesWide, int pagesTall);
    public abstract virtual XLPaperSize get_PaperSize();
    public abstract virtual void set_PaperSize(XLPaperSize value);
    public abstract virtual IXLMargins get_Margins();
    public abstract virtual IXLHeaderFooter get_Header();
    public abstract virtual IXLHeaderFooter get_Footer();
    public abstract virtual bool get_ScaleHFWithDocument();
    public abstract virtual void set_ScaleHFWithDocument(bool value);
    public abstract virtual bool get_AlignHFWithMargins();
    public abstract virtual void set_AlignHFWithMargins(bool value);
    public abstract virtual bool get_ShowGridlines();
    public abstract virtual void set_ShowGridlines(bool value);
    public abstract virtual bool get_ShowRowAndColumnHeadings();
    public abstract virtual void set_ShowRowAndColumnHeadings(bool value);
    public abstract virtual bool get_BlackAndWhite();
    public abstract virtual void set_BlackAndWhite(bool value);
    public abstract virtual bool get_DraftQuality();
    public abstract virtual void set_DraftQuality(bool value);
    public abstract virtual XLPageOrderValues get_PageOrder();
    public abstract virtual void set_PageOrder(XLPageOrderValues value);
    public abstract virtual XLShowCommentsValues get_ShowComments();
    public abstract virtual void set_ShowComments(XLShowCommentsValues value);
    public abstract virtual List`1<int> get_RowBreaks();
    public abstract virtual List`1<int> get_ColumnBreaks();
    public abstract virtual void AddHorizontalPageBreak(int row);
    public abstract virtual void AddVerticalPageBreak(int column);
    public abstract virtual XLPrintErrorValues get_PrintErrorValue();
    public abstract virtual void set_PrintErrorValue(XLPrintErrorValues value);
    public abstract virtual IXLPageSetup SetPageOrientation(XLPageOrientation value);
    public abstract virtual IXLPageSetup SetPagesWide(int value);
    public abstract virtual IXLPageSetup SetPagesTall(int value);
    public abstract virtual IXLPageSetup SetScale(int value);
    public abstract virtual IXLPageSetup SetHorizontalDpi(int value);
    public abstract virtual IXLPageSetup SetVerticalDpi(int value);
    public abstract virtual IXLPageSetup SetFirstPageNumber(Nullable`1<UInt32> value);
    public abstract virtual IXLPageSetup SetCenterHorizontally();
    public abstract virtual IXLPageSetup SetCenterHorizontally(bool value);
    public abstract virtual IXLPageSetup SetCenterVertically();
    public abstract virtual IXLPageSetup SetCenterVertically(bool value);
    public abstract virtual IXLPageSetup SetPaperSize(XLPaperSize value);
    public abstract virtual IXLPageSetup SetScaleHFWithDocument();
    public abstract virtual IXLPageSetup SetScaleHFWithDocument(bool value);
    public abstract virtual IXLPageSetup SetAlignHFWithMargins();
    public abstract virtual IXLPageSetup SetAlignHFWithMargins(bool value);
    public abstract virtual IXLPageSetup SetShowGridlines();
    public abstract virtual IXLPageSetup SetShowGridlines(bool value);
    public abstract virtual IXLPageSetup SetShowRowAndColumnHeadings();
    public abstract virtual IXLPageSetup SetShowRowAndColumnHeadings(bool value);
    public abstract virtual IXLPageSetup SetBlackAndWhite();
    public abstract virtual IXLPageSetup SetBlackAndWhite(bool value);
    public abstract virtual IXLPageSetup SetDraftQuality();
    public abstract virtual IXLPageSetup SetDraftQuality(bool value);
    public abstract virtual IXLPageSetup SetPageOrder(XLPageOrderValues value);
    public abstract virtual IXLPageSetup SetShowComments(XLShowCommentsValues value);
    public abstract virtual IXLPageSetup SetPrintErrorValue(XLPrintErrorValues value);
    public abstract virtual bool get_DifferentFirstPageOnHF();
    public abstract virtual void set_DifferentFirstPageOnHF(bool value);
    public abstract virtual IXLPageSetup SetDifferentFirstPageOnHF();
    public abstract virtual IXLPageSetup SetDifferentFirstPageOnHF(bool value);
    public abstract virtual bool get_DifferentOddEvenPagesOnHF();
    public abstract virtual void set_DifferentOddEvenPagesOnHF(bool value);
    public abstract virtual IXLPageSetup SetDifferentOddEvenPagesOnHF();
    public abstract virtual IXLPageSetup SetDifferentOddEvenPagesOnHF(bool value);
}
public interface ClosedXML.Excel.IXLPhonetic {
    public string Text { get; public set; }
    public int Start { get; public set; }
    public int End { get; public set; }
    public abstract virtual string get_Text();
    public abstract virtual void set_Text(string value);
    public abstract virtual int get_Start();
    public abstract virtual void set_Start(int value);
    public abstract virtual int get_End();
    public abstract virtual void set_End(int value);
}
public interface ClosedXML.Excel.IXLPhonetics {
    public int Count { get; }
    public XLPhoneticAlignment Alignment { get; public set; }
    public XLPhoneticType Type { get; public set; }
    public abstract virtual IXLPhonetics SetBold();
    public abstract virtual IXLPhonetics SetBold(bool value);
    public abstract virtual IXLPhonetics SetItalic();
    public abstract virtual IXLPhonetics SetItalic(bool value);
    public abstract virtual IXLPhonetics SetUnderline();
    public abstract virtual IXLPhonetics SetUnderline(XLFontUnderlineValues value);
    public abstract virtual IXLPhonetics SetStrikethrough();
    public abstract virtual IXLPhonetics SetStrikethrough(bool value);
    public abstract virtual IXLPhonetics SetVerticalAlignment(XLFontVerticalTextAlignmentValues value);
    public abstract virtual IXLPhonetics SetShadow();
    public abstract virtual IXLPhonetics SetShadow(bool value);
    public abstract virtual IXLPhonetics SetFontSize(double value);
    public abstract virtual IXLPhonetics SetFontColor(XLColor value);
    public abstract virtual IXLPhonetics SetFontName(string value);
    public abstract virtual IXLPhonetics SetFontFamilyNumbering(XLFontFamilyNumberingValues value);
    public abstract virtual IXLPhonetics SetFontCharSet(XLFontCharSet value);
    public abstract virtual IXLPhonetics Add(string text, int start, int end);
    public abstract virtual IXLPhonetics ClearText();
    public abstract virtual IXLPhonetics ClearFont();
    public abstract virtual int get_Count();
    public abstract virtual XLPhoneticAlignment get_Alignment();
    public abstract virtual void set_Alignment(XLPhoneticAlignment value);
    public abstract virtual XLPhoneticType get_Type();
    public abstract virtual void set_Type(XLPhoneticType value);
    public abstract virtual IXLPhonetics SetAlignment(XLPhoneticAlignment phoneticAlignment);
    public abstract virtual IXLPhonetics SetType(XLPhoneticType phoneticType);
}
[NullableContextAttribute("1")]
public interface ClosedXML.Excel.IXLPivotCache {
    public IReadOnlyList`1<string> FieldNames { get; }
    public XLItemsToRetain ItemsToRetainPerField { get; public set; }
    public bool RefreshDataOnOpen { get; public set; }
    public bool SaveSourceData { get; public set; }
    public abstract virtual IReadOnlyList`1<string> get_FieldNames();
    public abstract virtual XLItemsToRetain get_ItemsToRetainPerField();
    public abstract virtual void set_ItemsToRetainPerField(XLItemsToRetain value);
    public abstract virtual bool get_RefreshDataOnOpen();
    public abstract virtual void set_RefreshDataOnOpen(bool value);
    public abstract virtual bool get_SaveSourceData();
    public abstract virtual void set_SaveSourceData(bool value);
    public abstract virtual IXLPivotCache Refresh();
    public abstract virtual IXLPivotCache SetItemsToRetainPerField(XLItemsToRetain value);
    public abstract virtual IXLPivotCache SetRefreshDataOnOpen();
    public abstract virtual IXLPivotCache SetRefreshDataOnOpen(bool value);
    public abstract virtual IXLPivotCache SetSaveSourceData();
    public abstract virtual IXLPivotCache SetSaveSourceData(bool value);
}
public interface ClosedXML.Excel.IXLPivotCaches {
    [NullableContextAttribute("1")]
public abstract virtual IXLPivotCache Add(IXLRange range);
}
public interface ClosedXML.Excel.IXLPivotField {
    public string SourceName { get; }
    public string CustomName { get; public set; }
    public string SubtotalCaption { get; public set; }
    public List`1<XLSubtotalFunction> Subtotals { get; }
    public bool IncludeNewItemsInFilter { get; public set; }
    public bool Outline { get; public set; }
    public bool Compact { get; public set; }
    public Nullable`1<bool> SubtotalsAtTop { get; public set; }
    public bool RepeatItemLabels { get; public set; }
    public bool InsertBlankLines { get; public set; }
    public bool ShowBlankItems { get; public set; }
    public bool InsertPageBreaks { get; public set; }
    public bool Collapsed { get; public set; }
    public XLPivotSortType SortType { get; public set; }
    public IList`1<XLCellValue> SelectedValues { get; }
    public IXLPivotFieldStyleFormats StyleFormats { get; }
    public bool IsOnRowAxis { get; }
    public bool IsOnColumnAxis { get; }
    public bool IsInFilterList { get; }
    public int Offset { get; }
    public abstract virtual string get_SourceName();
    public abstract virtual string get_CustomName();
    public abstract virtual void set_CustomName(string value);
    public abstract virtual string get_SubtotalCaption();
    public abstract virtual void set_SubtotalCaption(string value);
    public abstract virtual List`1<XLSubtotalFunction> get_Subtotals();
    public abstract virtual bool get_IncludeNewItemsInFilter();
    public abstract virtual void set_IncludeNewItemsInFilter(bool value);
    public abstract virtual bool get_Outline();
    public abstract virtual void set_Outline(bool value);
    public abstract virtual bool get_Compact();
    public abstract virtual void set_Compact(bool value);
    public abstract virtual Nullable`1<bool> get_SubtotalsAtTop();
    public abstract virtual void set_SubtotalsAtTop(Nullable`1<bool> value);
    public abstract virtual bool get_RepeatItemLabels();
    public abstract virtual void set_RepeatItemLabels(bool value);
    public abstract virtual bool get_InsertBlankLines();
    public abstract virtual void set_InsertBlankLines(bool value);
    public abstract virtual bool get_ShowBlankItems();
    public abstract virtual void set_ShowBlankItems(bool value);
    public abstract virtual bool get_InsertPageBreaks();
    public abstract virtual void set_InsertPageBreaks(bool value);
    public abstract virtual bool get_Collapsed();
    public abstract virtual void set_Collapsed(bool value);
    public abstract virtual XLPivotSortType get_SortType();
    public abstract virtual void set_SortType(XLPivotSortType value);
    public abstract virtual IXLPivotField SetCustomName(string value);
    public abstract virtual IXLPivotField SetSubtotalCaption(string value);
    public abstract virtual IXLPivotField AddSubtotal(XLSubtotalFunction value);
    public abstract virtual IXLPivotField SetIncludeNewItemsInFilter();
    public abstract virtual IXLPivotField SetIncludeNewItemsInFilter(bool value);
    public abstract virtual IXLPivotField SetLayout(XLPivotLayout value);
    public abstract virtual IXLPivotField SetSubtotalsAtTop();
    public abstract virtual IXLPivotField SetSubtotalsAtTop(bool value);
    public abstract virtual IXLPivotField SetRepeatItemLabels();
    public abstract virtual IXLPivotField SetRepeatItemLabels(bool value);
    public abstract virtual IXLPivotField SetInsertBlankLines();
    public abstract virtual IXLPivotField SetInsertBlankLines(bool value);
    public abstract virtual IXLPivotField SetShowBlankItems();
    public abstract virtual IXLPivotField SetShowBlankItems(bool value);
    public abstract virtual IXLPivotField SetInsertPageBreaks();
    public abstract virtual IXLPivotField SetInsertPageBreaks(bool value);
    public abstract virtual IXLPivotField SetCollapsed();
    public abstract virtual IXLPivotField SetCollapsed(bool value);
    public abstract virtual IXLPivotField SetSort(XLPivotSortType value);
    public abstract virtual IList`1<XLCellValue> get_SelectedValues();
    public abstract virtual IXLPivotField AddSelectedValue(XLCellValue value);
    public abstract virtual IXLPivotField AddSelectedValues(IEnumerable`1<XLCellValue> values);
    public abstract virtual IXLPivotFieldStyleFormats get_StyleFormats();
    public abstract virtual bool get_IsOnRowAxis();
    public abstract virtual bool get_IsOnColumnAxis();
    public abstract virtual bool get_IsInFilterList();
    public abstract virtual int get_Offset();
}
public interface ClosedXML.Excel.IXLPivotFields {
    public abstract virtual IXLPivotField Add(string sourceName);
    public abstract virtual IXLPivotField Add(string sourceName, string customName);
    public abstract virtual void Clear();
    public abstract virtual bool Contains(string sourceName);
    public abstract virtual bool Contains(IXLPivotField pivotField);
    public abstract virtual IXLPivotField Get(string sourceName);
    public abstract virtual IXLPivotField Get(int index);
    public abstract virtual int IndexOf(string sourceName);
    public abstract virtual int IndexOf(IXLPivotField pf);
    public abstract virtual void Remove(string sourceName);
}
public interface ClosedXML.Excel.IXLPivotFieldStyleFormats {
    public IXLPivotValueStyleFormat DataValuesFormat { get; }
    public IXLPivotStyleFormat Header { get; }
    public IXLPivotStyleFormat Label { get; }
    public IXLPivotStyleFormat Subtotal { get; }
    public abstract virtual IXLPivotValueStyleFormat get_DataValuesFormat();
    public abstract virtual IXLPivotStyleFormat get_Header();
    public abstract virtual IXLPivotStyleFormat get_Label();
    public abstract virtual IXLPivotStyleFormat get_Subtotal();
}
[NullableContextAttribute("1")]
public interface ClosedXML.Excel.IXLPivotStyleFormat {
    public XLPivotStyleFormatElement AppliesTo { get; }
    [NullableAttribute("2")]
public IXLPivotField PivotField { get; }
    public IXLStyle Style { get; public set; }
    public abstract virtual XLPivotStyleFormatElement get_AppliesTo();
    [NullableContextAttribute("2")]
public abstract virtual IXLPivotField get_PivotField();
    public abstract virtual IXLStyle get_Style();
    public abstract virtual void set_Style(IXLStyle value);
}
public interface ClosedXML.Excel.IXLPivotStyleFormats {
    public abstract virtual IXLPivotStyleFormat ForElement(XLPivotStyleFormatElement element);
}
public interface ClosedXML.Excel.IXLPivotTable {
    public XLPivotTableTheme Theme { get; public set; }
    public IXLPivotFields ReportFilters { get; }
    public IXLPivotFields ColumnLabels { get; }
    public IXLPivotFields RowLabels { get; }
    public IXLPivotValues Values { get; }
    public string Name { get; public set; }
    public string Title { get; public set; }
    public string Description { get; public set; }
    public string ColumnHeaderCaption { get; public set; }
    public string RowHeaderCaption { get; public set; }
    public IXLCell TargetCell { get; public set; }
    public IXLPivotCache PivotCache { get; public set; }
    public bool MergeAndCenterWithLabels { get; public set; }
    public int RowLabelIndent { get; public set; }
    public XLFilterAreaOrder FilterAreaOrder { get; public set; }
    public int FilterFieldsPageWrap { get; public set; }
    public string ErrorValueReplacement { get; public set; }
    public string EmptyCellReplacement { get; public set; }
    public bool AutofitColumns { get; public set; }
    public bool PreserveCellFormatting { get; public set; }
    public bool ShowGrandTotalsRows { get; public set; }
    public bool ShowGrandTotalsColumns { get; public set; }
    public bool FilteredItemsInSubtotals { get; public set; }
    public bool AllowMultipleFilters { get; public set; }
    public bool UseCustomListsForSorting { get; public set; }
    public bool ShowExpandCollapseButtons { get; public set; }
    public bool ShowContextualTooltips { get; public set; }
    public bool ShowPropertiesInTooltips { get; public set; }
    public bool DisplayCaptionsAndDropdowns { get; public set; }
    public bool ClassicPivotTableLayout { get; public set; }
    public bool ShowValuesRow { get; public set; }
    public bool ShowEmptyItemsOnRows { get; public set; }
    public bool ShowEmptyItemsOnColumns { get; public set; }
    public bool DisplayItemLabels { get; public set; }
    public bool SortFieldsAtoZ { get; public set; }
    public bool PrintExpandCollapsedButtons { get; public set; }
    public bool RepeatRowLabels { get; public set; }
    public bool PrintTitles { get; public set; }
    public bool EnableShowDetails { get; public set; }
    public bool EnableCellEditing { get; public set; }
    public bool ShowRowHeaders { get; public set; }
    public bool ShowColumnHeaders { get; public set; }
    public bool ShowRowStripes { get; public set; }
    public bool ShowColumnStripes { get; public set; }
    public XLPivotSubtotals Subtotals { get; public set; }
    unknown XLPivotLayout Layout {public set; }
    unknown bool InsertBlankLines {public set; }
    public IXLWorksheet Worksheet { get; }
    public IXLPivotTableStyleFormats StyleFormats { get; }
    public abstract virtual XLPivotTableTheme get_Theme();
    public abstract virtual void set_Theme(XLPivotTableTheme value);
    public abstract virtual IXLPivotFields get_ReportFilters();
    public abstract virtual IXLPivotFields get_ColumnLabels();
    public abstract virtual IXLPivotFields get_RowLabels();
    public abstract virtual IXLPivotValues get_Values();
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    public abstract virtual string get_Title();
    public abstract virtual void set_Title(string value);
    public abstract virtual string get_Description();
    public abstract virtual void set_Description(string value);
    public abstract virtual string get_ColumnHeaderCaption();
    public abstract virtual void set_ColumnHeaderCaption(string value);
    public abstract virtual string get_RowHeaderCaption();
    public abstract virtual void set_RowHeaderCaption(string value);
    public abstract virtual IXLCell get_TargetCell();
    public abstract virtual void set_TargetCell(IXLCell value);
    public abstract virtual IXLPivotCache get_PivotCache();
    public abstract virtual void set_PivotCache(IXLPivotCache value);
    public abstract virtual bool get_MergeAndCenterWithLabels();
    public abstract virtual void set_MergeAndCenterWithLabels(bool value);
    public abstract virtual int get_RowLabelIndent();
    public abstract virtual void set_RowLabelIndent(int value);
    public abstract virtual XLFilterAreaOrder get_FilterAreaOrder();
    public abstract virtual void set_FilterAreaOrder(XLFilterAreaOrder value);
    public abstract virtual int get_FilterFieldsPageWrap();
    public abstract virtual void set_FilterFieldsPageWrap(int value);
    public abstract virtual string get_ErrorValueReplacement();
    public abstract virtual void set_ErrorValueReplacement(string value);
    public abstract virtual string get_EmptyCellReplacement();
    public abstract virtual void set_EmptyCellReplacement(string value);
    public abstract virtual bool get_AutofitColumns();
    public abstract virtual void set_AutofitColumns(bool value);
    public abstract virtual bool get_PreserveCellFormatting();
    public abstract virtual void set_PreserveCellFormatting(bool value);
    public abstract virtual bool get_ShowGrandTotalsRows();
    public abstract virtual void set_ShowGrandTotalsRows(bool value);
    public abstract virtual bool get_ShowGrandTotalsColumns();
    public abstract virtual void set_ShowGrandTotalsColumns(bool value);
    public abstract virtual bool get_FilteredItemsInSubtotals();
    public abstract virtual void set_FilteredItemsInSubtotals(bool value);
    public abstract virtual bool get_AllowMultipleFilters();
    public abstract virtual void set_AllowMultipleFilters(bool value);
    public abstract virtual bool get_UseCustomListsForSorting();
    public abstract virtual void set_UseCustomListsForSorting(bool value);
    public abstract virtual bool get_ShowExpandCollapseButtons();
    public abstract virtual void set_ShowExpandCollapseButtons(bool value);
    public abstract virtual bool get_ShowContextualTooltips();
    public abstract virtual void set_ShowContextualTooltips(bool value);
    public abstract virtual bool get_ShowPropertiesInTooltips();
    public abstract virtual void set_ShowPropertiesInTooltips(bool value);
    public abstract virtual bool get_DisplayCaptionsAndDropdowns();
    public abstract virtual void set_DisplayCaptionsAndDropdowns(bool value);
    public abstract virtual bool get_ClassicPivotTableLayout();
    public abstract virtual void set_ClassicPivotTableLayout(bool value);
    public abstract virtual bool get_ShowValuesRow();
    public abstract virtual void set_ShowValuesRow(bool value);
    public abstract virtual bool get_ShowEmptyItemsOnRows();
    public abstract virtual void set_ShowEmptyItemsOnRows(bool value);
    public abstract virtual bool get_ShowEmptyItemsOnColumns();
    public abstract virtual void set_ShowEmptyItemsOnColumns(bool value);
    public abstract virtual bool get_DisplayItemLabels();
    public abstract virtual void set_DisplayItemLabels(bool value);
    public abstract virtual bool get_SortFieldsAtoZ();
    public abstract virtual void set_SortFieldsAtoZ(bool value);
    public abstract virtual bool get_PrintExpandCollapsedButtons();
    public abstract virtual void set_PrintExpandCollapsedButtons(bool value);
    public abstract virtual bool get_RepeatRowLabels();
    public abstract virtual void set_RepeatRowLabels(bool value);
    public abstract virtual bool get_PrintTitles();
    public abstract virtual void set_PrintTitles(bool value);
    public abstract virtual bool get_EnableShowDetails();
    public abstract virtual void set_EnableShowDetails(bool value);
    public abstract virtual bool get_EnableCellEditing();
    public abstract virtual void set_EnableCellEditing(bool value);
    public abstract virtual IXLPivotTable CopyTo(IXLCell targetCell);
    public abstract virtual IXLPivotTable SetName(string value);
    public abstract virtual IXLPivotTable SetTitle(string value);
    public abstract virtual IXLPivotTable SetDescription(string value);
    public abstract virtual IXLPivotTable SetMergeAndCenterWithLabels();
    public abstract virtual IXLPivotTable SetMergeAndCenterWithLabels(bool value);
    public abstract virtual IXLPivotTable SetRowLabelIndent(int value);
    public abstract virtual IXLPivotTable SetFilterAreaOrder(XLFilterAreaOrder value);
    public abstract virtual IXLPivotTable SetFilterFieldsPageWrap(int value);
    public abstract virtual IXLPivotTable SetErrorValueReplacement(string value);
    public abstract virtual IXLPivotTable SetEmptyCellReplacement(string value);
    public abstract virtual IXLPivotTable SetAutofitColumns();
    public abstract virtual IXLPivotTable SetAutofitColumns(bool value);
    public abstract virtual IXLPivotTable SetPreserveCellFormatting();
    public abstract virtual IXLPivotTable SetPreserveCellFormatting(bool value);
    public abstract virtual IXLPivotTable SetShowGrandTotalsRows();
    public abstract virtual IXLPivotTable SetShowGrandTotalsRows(bool value);
    public abstract virtual IXLPivotTable SetShowGrandTotalsColumns();
    public abstract virtual IXLPivotTable SetShowGrandTotalsColumns(bool value);
    public abstract virtual IXLPivotTable SetFilteredItemsInSubtotals();
    public abstract virtual IXLPivotTable SetFilteredItemsInSubtotals(bool value);
    public abstract virtual IXLPivotTable SetAllowMultipleFilters();
    public abstract virtual IXLPivotTable SetAllowMultipleFilters(bool value);
    public abstract virtual IXLPivotTable SetUseCustomListsForSorting();
    public abstract virtual IXLPivotTable SetUseCustomListsForSorting(bool value);
    public abstract virtual IXLPivotTable SetShowExpandCollapseButtons();
    public abstract virtual IXLPivotTable SetShowExpandCollapseButtons(bool value);
    public abstract virtual IXLPivotTable SetShowContextualTooltips();
    public abstract virtual IXLPivotTable SetShowContextualTooltips(bool value);
    public abstract virtual IXLPivotTable SetShowPropertiesInTooltips();
    public abstract virtual IXLPivotTable SetShowPropertiesInTooltips(bool value);
    public abstract virtual IXLPivotTable SetDisplayCaptionsAndDropdowns();
    public abstract virtual IXLPivotTable SetDisplayCaptionsAndDropdowns(bool value);
    public abstract virtual IXLPivotTable SetClassicPivotTableLayout();
    public abstract virtual IXLPivotTable SetClassicPivotTableLayout(bool value);
    public abstract virtual IXLPivotTable SetShowValuesRow();
    public abstract virtual IXLPivotTable SetShowValuesRow(bool value);
    public abstract virtual IXLPivotTable SetShowEmptyItemsOnRows();
    public abstract virtual IXLPivotTable SetShowEmptyItemsOnRows(bool value);
    public abstract virtual IXLPivotTable SetShowEmptyItemsOnColumns();
    public abstract virtual IXLPivotTable SetShowEmptyItemsOnColumns(bool value);
    public abstract virtual IXLPivotTable SetDisplayItemLabels();
    public abstract virtual IXLPivotTable SetDisplayItemLabels(bool value);
    public abstract virtual IXLPivotTable SetSortFieldsAtoZ();
    public abstract virtual IXLPivotTable SetSortFieldsAtoZ(bool value);
    public abstract virtual IXLPivotTable SetPrintExpandCollapsedButtons();
    public abstract virtual IXLPivotTable SetPrintExpandCollapsedButtons(bool value);
    public abstract virtual IXLPivotTable SetRepeatRowLabels();
    public abstract virtual IXLPivotTable SetRepeatRowLabels(bool value);
    public abstract virtual IXLPivotTable SetPrintTitles();
    public abstract virtual IXLPivotTable SetPrintTitles(bool value);
    public abstract virtual IXLPivotTable SetEnableShowDetails();
    public abstract virtual IXLPivotTable SetEnableShowDetails(bool value);
    public abstract virtual IXLPivotTable SetEnableCellEditing();
    public abstract virtual IXLPivotTable SetEnableCellEditing(bool value);
    public abstract virtual IXLPivotTable SetColumnHeaderCaption(string value);
    public abstract virtual IXLPivotTable SetRowHeaderCaption(string value);
    public abstract virtual bool get_ShowRowHeaders();
    public abstract virtual void set_ShowRowHeaders(bool value);
    public abstract virtual bool get_ShowColumnHeaders();
    public abstract virtual void set_ShowColumnHeaders(bool value);
    public abstract virtual bool get_ShowRowStripes();
    public abstract virtual void set_ShowRowStripes(bool value);
    public abstract virtual bool get_ShowColumnStripes();
    public abstract virtual void set_ShowColumnStripes(bool value);
    public abstract virtual XLPivotSubtotals get_Subtotals();
    public abstract virtual void set_Subtotals(XLPivotSubtotals value);
    public abstract virtual void set_Layout(XLPivotLayout value);
    public abstract virtual void set_InsertBlankLines(bool value);
    public abstract virtual IXLPivotTable SetShowRowHeaders();
    public abstract virtual IXLPivotTable SetShowRowHeaders(bool value);
    public abstract virtual IXLPivotTable SetShowColumnHeaders();
    public abstract virtual IXLPivotTable SetShowColumnHeaders(bool value);
    public abstract virtual IXLPivotTable SetShowRowStripes();
    public abstract virtual IXLPivotTable SetShowRowStripes(bool value);
    public abstract virtual IXLPivotTable SetShowColumnStripes();
    public abstract virtual IXLPivotTable SetShowColumnStripes(bool value);
    public abstract virtual IXLPivotTable SetSubtotals(XLPivotSubtotals value);
    public abstract virtual IXLPivotTable SetLayout(XLPivotLayout value);
    public abstract virtual IXLPivotTable SetInsertBlankLines();
    public abstract virtual IXLPivotTable SetInsertBlankLines(bool value);
    public abstract virtual IXLWorksheet get_Worksheet();
    public abstract virtual IXLPivotTableStyleFormats get_StyleFormats();
}
public interface ClosedXML.Excel.IXLPivotTables {
    public abstract virtual IXLPivotTable Add(string name, IXLCell targetCell, IXLPivotCache pivotCache);
    public abstract virtual IXLPivotTable Add(string name, IXLCell targetCell, IXLRange range);
    public abstract virtual IXLPivotTable Add(string name, IXLCell targetCell, IXLTable table);
    public abstract virtual bool Contains(string name);
    public abstract virtual void Delete(string name);
    public abstract virtual void DeleteAll();
    public abstract virtual IXLPivotTable PivotTable(string name);
}
public interface ClosedXML.Excel.IXLPivotTableStyleFormats {
    public IXLPivotStyleFormats ColumnGrandTotalFormats { get; }
    public IXLPivotStyleFormats RowGrandTotalFormats { get; }
    public abstract virtual IXLPivotStyleFormats get_ColumnGrandTotalFormats();
    public abstract virtual IXLPivotStyleFormats get_RowGrandTotalFormats();
}
public interface ClosedXML.Excel.IXLPivotValue {
    public string BaseFieldName { get; public set; }
    public XLCellValue BaseItemValue { get; public set; }
    public XLPivotCalculation Calculation { get; public set; }
    public XLPivotCalculationItem CalculationItem { get; public set; }
    public string CustomName { get; public set; }
    public IXLPivotValueFormat NumberFormat { get; }
    public string SourceName { get; }
    public XLPivotSummary SummaryFormula { get; public set; }
    public abstract virtual string get_BaseFieldName();
    public abstract virtual void set_BaseFieldName(string value);
    public abstract virtual XLCellValue get_BaseItemValue();
    public abstract virtual void set_BaseItemValue(XLCellValue value);
    public abstract virtual XLPivotCalculation get_Calculation();
    public abstract virtual void set_Calculation(XLPivotCalculation value);
    public abstract virtual XLPivotCalculationItem get_CalculationItem();
    public abstract virtual void set_CalculationItem(XLPivotCalculationItem value);
    public abstract virtual string get_CustomName();
    public abstract virtual void set_CustomName(string value);
    public abstract virtual IXLPivotValueFormat get_NumberFormat();
    public abstract virtual string get_SourceName();
    public abstract virtual XLPivotSummary get_SummaryFormula();
    public abstract virtual void set_SummaryFormula(XLPivotSummary value);
    public abstract virtual IXLPivotValue SetBaseFieldName(string value);
    public abstract virtual IXLPivotValue SetBaseItemValue(XLCellValue value);
    public abstract virtual IXLPivotValue SetCalculation(XLPivotCalculation value);
    public abstract virtual IXLPivotValue SetCalculationItem(XLPivotCalculationItem value);
    public abstract virtual IXLPivotValue SetSummaryFormula(XLPivotSummary value);
    public abstract virtual IXLPivotValueCombination ShowAsDifferenceFrom(string fieldSourceName);
    public abstract virtual IXLPivotValue ShowAsIndex();
    public abstract virtual IXLPivotValue ShowAsNormal();
    public abstract virtual IXLPivotValueCombination ShowAsPercentageDifferenceFrom(string fieldSourceName);
    public abstract virtual IXLPivotValueCombination ShowAsPercentageFrom(string fieldSourceName);
    public abstract virtual IXLPivotValue ShowAsPercentageOfColumn();
    public abstract virtual IXLPivotValue ShowAsPercentageOfRow();
    public abstract virtual IXLPivotValue ShowAsPercentageOfTotal();
    public abstract virtual IXLPivotValue ShowAsRunningTotalIn(string fieldSourceName);
}
public interface ClosedXML.Excel.IXLPivotValueCombination {
    public abstract virtual IXLPivotValue And(XLCellValue item);
    public abstract virtual IXLPivotValue AndNext();
    public abstract virtual IXLPivotValue AndPrevious();
}
public interface ClosedXML.Excel.IXLPivotValueFormat {
    public abstract virtual IXLPivotValue SetNumberFormatId(int value);
    public abstract virtual IXLPivotValue SetFormat(string value);
}
public interface ClosedXML.Excel.IXLPivotValues {
    public abstract virtual IXLPivotValue Add(string sourceName);
    public abstract virtual IXLPivotValue Add(string sourceName, string customName);
    public abstract virtual void Clear();
    public abstract virtual bool Contains(string customName);
    public abstract virtual bool Contains(IXLPivotValue pivotValue);
    public abstract virtual IXLPivotValue Get(string customName);
    public abstract virtual IXLPivotValue Get(int index);
    public abstract virtual int IndexOf(string customName);
    public abstract virtual int IndexOf(IXLPivotValue pivotValue);
    public abstract virtual void Remove(string customName);
}
public interface ClosedXML.Excel.IXLPivotValueStyleFormat {
    public abstract virtual IXLPivotValueStyleFormat AndWith(IXLPivotField field);
    public abstract virtual IXLPivotValueStyleFormat AndWith(IXLPivotField field, Predicate`1<XLCellValue> predicate);
    public abstract virtual IXLPivotValueStyleFormat ForValueField(IXLPivotValue valueField);
}
public interface ClosedXML.Excel.IXLPrintAreas {
    public abstract virtual void Clear();
    public abstract virtual void Add(int firstCellRow, int firstCellColumn, int lastCellRow, int lastCellColumn);
    public abstract virtual void Add(string rangeAddress);
    public abstract virtual void Add(string firstCellAddress, string lastCellAddress);
    public abstract virtual void Add(IXLAddress firstCellAddress, IXLAddress lastCellAddress);
}
public interface ClosedXML.Excel.IXLProtectable {
    public bool IsPasswordProtected { get; }
    public bool IsProtected { get; }
    public abstract virtual bool get_IsPasswordProtected();
    public abstract virtual bool get_IsProtected();
    public abstract virtual IXLElementProtection Protect(Algorithm algorithm);
    public abstract virtual IXLElementProtection Protect(string password, Algorithm algorithm);
    public abstract virtual IXLElementProtection Unprotect();
    public abstract virtual IXLElementProtection Unprotect(string password);
}
public interface ClosedXML.Excel.IXLProtectable`2 {
    public TProtection Protection { get; public set; }
    public abstract virtual TProtection get_Protection();
    public abstract virtual void set_Protection(TProtection value);
    public abstract virtual TProtection Protect(TElement allowedElements);
    public abstract virtual TProtection Protect(Algorithm algorithm);
    public abstract virtual TProtection Protect(Algorithm algorithm, TElement allowedElements);
    public abstract virtual TProtection Protect(string password, Algorithm algorithm);
    public abstract virtual TProtection Protect(string password, Algorithm algorithm, TElement allowedElements);
    public abstract virtual TProtection Unprotect();
    public abstract virtual TProtection Unprotect(string password);
}
public interface ClosedXML.Excel.IXLProtection {
    public bool Locked { get; public set; }
    public bool Hidden { get; public set; }
    public abstract virtual bool get_Locked();
    public abstract virtual void set_Locked(bool value);
    public abstract virtual bool get_Hidden();
    public abstract virtual void set_Hidden(bool value);
    public abstract virtual IXLStyle SetLocked();
    public abstract virtual IXLStyle SetLocked(bool value);
    public abstract virtual IXLStyle SetHidden();
    public abstract virtual IXLStyle SetHidden(bool value);
}
public interface ClosedXML.Excel.IXLRange {
    public IXLSortElements SortRows { get; }
    public IXLSortElements SortColumns { get; }
    public abstract virtual IXLCell Cell(int row, int column);
    public abstract virtual IXLCell Cell(string cellAddressInRange);
    public abstract virtual IXLCell Cell(int row, string column);
    public abstract virtual IXLCell Cell(IXLAddress cellAddressInRange);
    public abstract virtual IXLRangeColumn Column(int columnNumber);
    public abstract virtual IXLRangeColumn Column(string columnLetter);
    public abstract virtual IXLRangeColumn FirstColumn(Func`2<IXLRangeColumn, bool> predicate);
    public abstract virtual IXLRangeColumn FirstColumnUsed(XLCellsUsedOptions options, Func`2<IXLRangeColumn, bool> predicate);
    public abstract virtual IXLRangeColumn FirstColumnUsed(Func`2<IXLRangeColumn, bool> predicate);
    public abstract virtual IXLRangeColumn LastColumn(Func`2<IXLRangeColumn, bool> predicate);
    public abstract virtual IXLRangeColumn LastColumnUsed(XLCellsUsedOptions options, Func`2<IXLRangeColumn, bool> predicate);
    public abstract virtual IXLRangeColumn LastColumnUsed(Func`2<IXLRangeColumn, bool> predicate);
    public abstract virtual IXLRangeColumns Columns(Func`2<IXLRangeColumn, bool> predicate);
    public abstract virtual IXLRangeColumns Columns(int firstColumn, int lastColumn);
    public abstract virtual IXLRangeColumns Columns(string firstColumn, string lastColumn);
    public abstract virtual IXLRangeColumns Columns(string columns);
    public abstract virtual IXLRangeColumn FindColumn(Func`2<IXLRangeColumn, bool> predicate);
    public abstract virtual IXLRangeRow FindRow(Func`2<IXLRangeRow, bool> predicate);
    public abstract virtual IXLRangeRow FirstRow(Func`2<IXLRangeRow, bool> predicate);
    public abstract virtual IXLRangeRow FirstRowUsed(XLCellsUsedOptions options, Func`2<IXLRangeRow, bool> predicate);
    public abstract virtual IXLRangeRow FirstRowUsed(Func`2<IXLRangeRow, bool> predicate);
    public abstract virtual IXLRangeRow LastRow(Func`2<IXLRangeRow, bool> predicate);
    public abstract virtual IXLRangeRow LastRowUsed(XLCellsUsedOptions options, Func`2<IXLRangeRow, bool> predicate);
    public abstract virtual IXLRangeRow LastRowUsed(Func`2<IXLRangeRow, bool> predicate);
    public abstract virtual IXLRangeRow Row(int row);
    public abstract virtual IXLRangeRows Rows(Func`2<IXLRangeRow, bool> predicate);
    public abstract virtual IXLRangeRows Rows(int firstRow, int lastRow);
    public abstract virtual IXLRangeRows Rows(string rows);
    public abstract virtual IXLRange Range(IXLRangeAddress rangeAddress);
    public abstract virtual IXLRange Range(string rangeAddress);
    public abstract virtual IXLRange Range(IXLCell firstCell, IXLCell lastCell);
    public abstract virtual IXLRange Range(string firstCellAddress, string lastCellAddress);
    public abstract virtual IXLRange Range(IXLAddress firstCellAddress, IXLAddress lastCellAddress);
    public abstract virtual IXLRanges Ranges(string ranges);
    public abstract virtual IXLRange Range(int firstCellRow, int firstCellColumn, int lastCellRow, int lastCellColumn);
    public abstract virtual int RowCount();
    public abstract virtual int ColumnCount();
    public abstract virtual IXLRangeColumns InsertColumnsAfter(int numberOfColumns);
    public abstract virtual IXLRangeColumns InsertColumnsAfter(int numberOfColumns, bool expandRange);
    public abstract virtual IXLRangeColumns InsertColumnsBefore(int numberOfColumns);
    public abstract virtual IXLRangeColumns InsertColumnsBefore(int numberOfColumns, bool expandRange);
    public abstract virtual IXLRangeRows InsertRowsAbove(int numberOfRows);
    public abstract virtual IXLRangeRows InsertRowsAbove(int numberOfRows, bool expandRange);
    public abstract virtual IXLRangeRows InsertRowsBelow(int numberOfRows);
    public abstract virtual IXLRangeRows InsertRowsBelow(int numberOfRows, bool expandRange);
    public abstract virtual void Delete(XLShiftDeletedCells shiftDeleteCells);
    public abstract virtual void Transpose(XLTransposeOptions transposeOption);
    public abstract virtual IXLTable AsTable();
    public abstract virtual IXLTable AsTable(string name);
    public abstract virtual IXLTable CreateTable();
    public abstract virtual IXLTable CreateTable(string name);
    public abstract virtual IXLRange RangeUsed();
    public abstract virtual IXLRange CopyTo(IXLCell target);
    public abstract virtual IXLRange CopyTo(IXLRangeBase target);
    public abstract virtual IXLSortElements get_SortRows();
    public abstract virtual IXLSortElements get_SortColumns();
    public abstract virtual IXLRange Sort();
    public abstract virtual IXLRange Sort(string columnsToSortBy, XLSortOrder sortOrder, bool matchCase, bool ignoreBlanks);
    public abstract virtual IXLRange Sort(int columnToSortBy, XLSortOrder sortOrder, bool matchCase, bool ignoreBlanks);
    public abstract virtual IXLRange SortLeftToRight(XLSortOrder sortOrder, bool matchCase, bool ignoreBlanks);
    public abstract virtual IXLRange Clear(XLClearOptions clearOptions);
    public abstract virtual IXLRangeRows RowsUsed(XLCellsUsedOptions options, Func`2<IXLRangeRow, bool> predicate);
    public abstract virtual IXLRangeRows RowsUsed(Func`2<IXLRangeRow, bool> predicate);
    public abstract virtual IXLRangeColumns ColumnsUsed(XLCellsUsedOptions options, Func`2<IXLRangeColumn, bool> predicate);
    public abstract virtual IXLRangeColumns ColumnsUsed(Func`2<IXLRangeColumn, bool> predicate);
}
[NullableContextAttribute("1")]
public interface ClosedXML.Excel.IXLRangeAddress {
    public int ColumnSpan { get; }
    public IXLAddress FirstAddress { get; }
    public bool IsValid { get; }
    public IXLAddress LastAddress { get; }
    public int NumberOfCells { get; }
    public int RowSpan { get; }
    [NullableAttribute("2")]
public IXLWorksheet Worksheet { get; }
    public abstract virtual int get_ColumnSpan();
    public abstract virtual IXLAddress get_FirstAddress();
    public abstract virtual bool get_IsValid();
    public abstract virtual IXLAddress get_LastAddress();
    public abstract virtual int get_NumberOfCells();
    public abstract virtual int get_RowSpan();
    [NullableContextAttribute("2")]
public abstract virtual IXLWorksheet get_Worksheet();
    [NullableContextAttribute("2")]
public abstract virtual IXLRange AsRange();
    public abstract virtual bool Contains(IXLAddress address);
    public abstract virtual IXLRangeAddress Intersection(IXLRangeAddress otherRangeAddress);
    public abstract virtual bool Intersects(IXLRangeAddress otherAddress);
    public abstract virtual bool IsEntireColumn();
    public abstract virtual bool IsEntireRow();
    public abstract virtual bool IsEntireSheet();
    public abstract virtual IXLRangeAddress Relative(IXLRangeAddress sourceRangeAddress, IXLRangeAddress targetRangeAddress);
    public abstract virtual string ToString(XLReferenceStyle referenceStyle);
    public abstract virtual string ToString(XLReferenceStyle referenceStyle, bool includeSheet);
    public abstract virtual string ToStringFixed();
    public abstract virtual string ToStringFixed(XLReferenceStyle referenceStyle);
    public abstract virtual string ToStringFixed(XLReferenceStyle referenceStyle, bool includeSheet);
    public abstract virtual string ToStringRelative();
    public abstract virtual string ToStringRelative(bool includeSheet);
}
public interface ClosedXML.Excel.IXLRangeBase {
    public IXLWorksheet Worksheet { get; }
    unknown XLCellValue Value {public set; }
    unknown string FormulaA1 {public set; }
    unknown string FormulaArrayA1 {public set; }
    unknown string FormulaR1C1 {public set; }
    public IXLStyle Style { get; public set; }
    unknown bool ShareString {public set; }
    public IXLHyperlinks Hyperlinks { get; }
    public abstract virtual IXLWorksheet get_Worksheet();
    public abstract virtual void set_Value(XLCellValue value);
    public abstract virtual void set_FormulaA1(string value);
    public abstract virtual void set_FormulaArrayA1(string value);
    public abstract virtual void set_FormulaR1C1(string value);
    public abstract virtual IXLStyle get_Style();
    public abstract virtual void set_Style(IXLStyle value);
    public abstract virtual void set_ShareString(bool value);
    public abstract virtual IXLHyperlinks get_Hyperlinks();
    public abstract virtual IXLCells Cells();
    public abstract virtual IXLCells Cells(bool usedCellsOnly);
    public abstract virtual IXLCells Cells(bool usedCellsOnly, XLCellsUsedOptions options);
    public abstract virtual IXLCells Cells(string cells);
    public abstract virtual IXLCells Cells(Func`2<IXLCell, bool> predicate);
    public abstract virtual IXLCells CellsUsed();
    public abstract virtual IXLCells CellsUsed(XLCellsUsedOptions options);
    public abstract virtual IXLCells CellsUsed(Func`2<IXLCell, bool> predicate);
    public abstract virtual IXLCells CellsUsed(XLCellsUsedOptions options, Func`2<IXLCell, bool> predicate);
    public abstract virtual IXLCells Search(string searchText, CompareOptions compareOptions, bool searchFormulae);
    public abstract virtual IXLCell FirstCell();
    public abstract virtual IXLCell FirstCellUsed();
    public abstract virtual IXLCell FirstCellUsed(XLCellsUsedOptions options);
    public abstract virtual IXLCell FirstCellUsed(Func`2<IXLCell, bool> predicate);
    public abstract virtual IXLCell FirstCellUsed(XLCellsUsedOptions options, Func`2<IXLCell, bool> predicate);
    public abstract virtual IXLCell LastCell();
    public abstract virtual IXLCell LastCellUsed();
    public abstract virtual IXLCell LastCellUsed(XLCellsUsedOptions options);
    public abstract virtual IXLCell LastCellUsed(Func`2<IXLCell, bool> predicate);
    public abstract virtual IXLCell LastCellUsed(XLCellsUsedOptions options, Func`2<IXLCell, bool> predicate);
    public abstract virtual bool Contains(string rangeAddress);
    public abstract virtual bool Contains(IXLRangeBase range);
    public abstract virtual bool Contains(IXLCell cell);
    public abstract virtual bool Intersects(string rangeAddress);
    public abstract virtual bool Intersects(IXLRangeBase range);
    public abstract virtual IXLRange Unmerge();
    public abstract virtual IXLRange Merge();
    public abstract virtual IXLRange Merge(bool checkIntersect);
    public abstract virtual IXLRange AddToNamed(string rangeName);
    public abstract virtual IXLRange AddToNamed(string rangeName, XLScope scope);
    public abstract virtual IXLRange AddToNamed(string rangeName, XLScope scope, string comment);
    public abstract virtual IXLRangeBase Clear(XLClearOptions clearOptions);
    public abstract virtual void DeleteComments();
    public abstract virtual IXLRangeBase SetValue(XLCellValue value);
    public abstract virtual IXLRange AsRange();
    public abstract virtual bool IsMerged();
    public abstract virtual bool IsEmpty();
    public abstract virtual bool IsEmpty(XLCellsUsedOptions options);
    public abstract virtual bool IsEntireColumn();
    public abstract virtual bool IsEntireRow();
    public abstract virtual bool IsEntireSheet();
    public abstract virtual IXLPivotTable CreatePivotTable(IXLCell targetCell, string name);
    public abstract virtual IXLAutoFilter SetAutoFilter();
    public abstract virtual IXLAutoFilter SetAutoFilter(bool value);
    public abstract virtual IXLDataValidation GetDataValidation();
    public abstract virtual IXLDataValidation CreateDataValidation();
    [ObsoleteAttribute("Use GetDataValidation() to access the existing rule, or CreateDataValidation() to create a new one.")]
public abstract virtual IXLDataValidation SetDataValidation();
    public abstract virtual IXLConditionalFormat AddConditionalFormat();
    public abstract virtual void Select();
    public abstract virtual IXLRangeBase Grow();
    public abstract virtual IXLRangeBase Grow(int growCount);
    public abstract virtual IXLRangeBase Shrink();
    public abstract virtual IXLRangeBase Shrink(int shrinkCount);
    public abstract virtual IXLRangeAddress Intersection(IXLRangeBase otherRange, Func`2<IXLCell, bool> thisRangePredicate, Func`2<IXLCell, bool> otherRangePredicate);
    public abstract virtual IXLCells SurroundingCells(Func`2<IXLCell, bool> predicate);
    public abstract virtual IXLCells Union(IXLRangeBase otherRange, Func`2<IXLCell, bool> thisRangePredicate, Func`2<IXLCell, bool> otherRangePredicate);
    public abstract virtual IXLCells Difference(IXLRangeBase otherRange, Func`2<IXLCell, bool> thisRangePredicate, Func`2<IXLCell, bool> otherRangePredicate);
    public abstract virtual IXLRangeBase Relative(IXLRangeBase sourceBaseRange, IXLRangeBase targetBaseRange);
}
public interface ClosedXML.Excel.IXLRangeColumn {
    public abstract virtual IXLCell Cell(int rowNumber);
    public abstract virtual IXLCells Cells(string cellsInColumn);
    public abstract virtual IXLCells Cells(int firstRow, int lastRow);
    public abstract virtual IXLRangeColumns InsertColumnsAfter(int numberOfColumns);
    public abstract virtual IXLRangeColumns InsertColumnsAfter(int numberOfColumns, bool expandRange);
    public abstract virtual IXLRangeColumns InsertColumnsBefore(int numberOfColumns);
    public abstract virtual IXLRangeColumns InsertColumnsBefore(int numberOfColumns, bool expandRange);
    public abstract virtual IXLCells InsertCellsAbove(int numberOfRows);
    public abstract virtual IXLCells InsertCellsAbove(int numberOfRows, bool expandRange);
    public abstract virtual IXLCells InsertCellsBelow(int numberOfRows);
    public abstract virtual IXLCells InsertCellsBelow(int numberOfRows, bool expandRange);
    public abstract virtual void Delete();
    public abstract virtual void Delete(XLShiftDeletedCells shiftDeleteCells);
    public abstract virtual int ColumnNumber();
    public abstract virtual string ColumnLetter();
    public abstract virtual int CellCount();
    public abstract virtual IXLRangeColumn CopyTo(IXLCell target);
    public abstract virtual IXLRangeColumn CopyTo(IXLRangeBase target);
    public abstract virtual IXLRangeColumn Sort(XLSortOrder sortOrder, bool matchCase, bool ignoreBlanks);
    public abstract virtual IXLRangeColumn Column(int start, int end);
    public abstract virtual IXLRangeColumn Column(IXLCell start, IXLCell end);
    public abstract virtual IXLRangeColumns Columns(string columns);
    public abstract virtual IXLRangeColumn ColumnLeft();
    public abstract virtual IXLRangeColumn ColumnLeft(int step);
    public abstract virtual IXLRangeColumn ColumnRight();
    public abstract virtual IXLRangeColumn ColumnRight(int step);
    public abstract virtual IXLColumn WorksheetColumn();
    public abstract virtual IXLTable AsTable();
    public abstract virtual IXLTable AsTable(string name);
    public abstract virtual IXLTable CreateTable();
    public abstract virtual IXLTable CreateTable(string name);
    public abstract virtual IXLRangeColumn Clear(XLClearOptions clearOptions);
    public abstract virtual IXLRangeColumn ColumnUsed(XLCellsUsedOptions options);
}
public interface ClosedXML.Excel.IXLRangeColumns {
    public IXLStyle Style { get; public set; }
    public abstract virtual void Add(IXLRangeColumn columRange);
    public abstract virtual IXLCells Cells();
    public abstract virtual IXLCells CellsUsed();
    public abstract virtual IXLCells CellsUsed(XLCellsUsedOptions options);
    public abstract virtual void Delete();
    public abstract virtual IXLStyle get_Style();
    public abstract virtual void set_Style(IXLStyle value);
    public abstract virtual IXLRangeColumns Clear(XLClearOptions clearOptions);
    public abstract virtual void Select();
}
public interface ClosedXML.Excel.IXLRangeRow {
    public abstract virtual IXLCell Cell(int columnNumber);
    public abstract virtual IXLCell Cell(string columnLetter);
    public abstract virtual IXLCells Cells(string cellsInRow);
    public abstract virtual IXLCells Cells(int firstColumn, int lastColumn);
    public abstract virtual IXLCells Cells(string firstColumn, string lastColumn);
    public abstract virtual IXLCells InsertCellsAfter(int numberOfColumns);
    public abstract virtual IXLCells InsertCellsAfter(int numberOfColumns, bool expandRange);
    public abstract virtual IXLCells InsertCellsBefore(int numberOfColumns);
    public abstract virtual IXLCells InsertCellsBefore(int numberOfColumns, bool expandRange);
    public abstract virtual IXLRangeRows InsertRowsAbove(int numberOfRows);
    public abstract virtual IXLRangeRows InsertRowsAbove(int numberOfRows, bool expandRange);
    public abstract virtual IXLRangeRows InsertRowsBelow(int numberOfRows);
    public abstract virtual IXLRangeRows InsertRowsBelow(int numberOfRows, bool expandRange);
    public abstract virtual void Delete();
    public abstract virtual void Delete(XLShiftDeletedCells shiftDeleteCells);
    public abstract virtual int RowNumber();
    public abstract virtual int CellCount();
    public abstract virtual IXLRangeRow CopyTo(IXLCell target);
    public abstract virtual IXLRangeRow CopyTo(IXLRangeBase target);
    public abstract virtual IXLRangeRow Sort();
    public abstract virtual IXLRangeRow SortLeftToRight(XLSortOrder sortOrder, bool matchCase, bool ignoreBlanks);
    public abstract virtual IXLRangeRow Row(int start, int end);
    public abstract virtual IXLRangeRow Row(IXLCell start, IXLCell end);
    public abstract virtual IXLRangeRows Rows(string rows);
    public abstract virtual IXLRangeRow RowAbove();
    public abstract virtual IXLRangeRow RowAbove(int step);
    public abstract virtual IXLRangeRow RowBelow();
    public abstract virtual IXLRangeRow RowBelow(int step);
    public abstract virtual IXLRow WorksheetRow();
    public abstract virtual IXLRangeRow Clear(XLClearOptions clearOptions);
    public abstract virtual IXLRangeRow RowUsed(XLCellsUsedOptions options);
}
public interface ClosedXML.Excel.IXLRangeRows {
    public IXLStyle Style { get; public set; }
    public abstract virtual void Add(IXLRangeRow rowRange);
    public abstract virtual IXLCells Cells();
    public abstract virtual IXLCells CellsUsed();
    public abstract virtual IXLCells CellsUsed(XLCellsUsedOptions options);
    public abstract virtual void Delete();
    public abstract virtual IXLStyle get_Style();
    public abstract virtual void set_Style(IXLStyle value);
    public abstract virtual IXLRangeRows Clear(XLClearOptions clearOptions);
    public abstract virtual void Select();
}
[NullableContextAttribute("1")]
public interface ClosedXML.Excel.IXLRanges {
    public int Count { get; }
    public IXLStyle Style { get; public set; }
    unknown XLCellValue Value {public set; }
    public abstract virtual void Add(IXLRangeBase range);
    public abstract virtual void Add(IXLCell range);
    public abstract virtual bool Remove(IXLRange range);
    public abstract virtual void RemoveAll(Predicate`1<IXLRange> match, bool releaseEventHandlers);
    public abstract virtual int get_Count();
    public abstract virtual bool Contains(IXLRange range);
    public abstract virtual IEnumerable`1<IXLRange> GetIntersectedRanges(IXLRangeAddress rangeAddress);
    public abstract virtual IEnumerable`1<IXLRange> GetIntersectedRanges(IXLAddress address);
    public abstract virtual IEnumerable`1<IXLRange> GetIntersectedRanges(IXLCell cell);
    public abstract virtual IXLStyle get_Style();
    public abstract virtual void set_Style(IXLStyle value);
    public abstract virtual IXLDataValidation CreateDataValidation();
    [ObsoleteAttribute("Use CreateDataValidation() instead.")]
public abstract virtual IXLDataValidation SetDataValidation();
    public abstract virtual IXLRanges AddToNamed(string rangeName);
    public abstract virtual IXLRanges AddToNamed(string rangeName, XLScope scope);
    public abstract virtual IXLRanges AddToNamed(string rangeName, XLScope scope, string comment);
    public abstract virtual void set_Value(XLCellValue value);
    public abstract virtual IXLRanges SetValue(XLCellValue value);
    public abstract virtual IXLCells Cells();
    public abstract virtual IXLCells CellsUsed();
    public abstract virtual IXLCells CellsUsed(XLCellsUsedOptions options);
    public abstract virtual IXLRanges Clear(XLClearOptions clearOptions);
    public abstract virtual IXLRanges Consolidate();
    public abstract virtual void Select();
}
public interface ClosedXML.Excel.IXLRichString {
    public string Text { get; public set; }
    public XLFontScheme FontScheme { get; public set; }
    public abstract virtual string get_Text();
    public abstract virtual void set_Text(string value);
    public abstract virtual XLFontScheme get_FontScheme();
    public abstract virtual void set_FontScheme(XLFontScheme value);
    public abstract virtual IXLRichString SetBold();
    public abstract virtual IXLRichString SetBold(bool value);
    public abstract virtual IXLRichString SetItalic();
    public abstract virtual IXLRichString SetItalic(bool value);
    public abstract virtual IXLRichString SetUnderline();
    public abstract virtual IXLRichString SetUnderline(XLFontUnderlineValues value);
    public abstract virtual IXLRichString SetStrikethrough();
    public abstract virtual IXLRichString SetStrikethrough(bool value);
    public abstract virtual IXLRichString SetVerticalAlignment(XLFontVerticalTextAlignmentValues value);
    public abstract virtual IXLRichString SetShadow();
    public abstract virtual IXLRichString SetShadow(bool value);
    public abstract virtual IXLRichString SetFontSize(double value);
    public abstract virtual IXLRichString SetFontColor(XLColor value);
    public abstract virtual IXLRichString SetFontName(string value);
    public abstract virtual IXLRichString SetFontFamilyNumbering(XLFontFamilyNumberingValues value);
    public abstract virtual IXLRichString SetFontCharSet(XLFontCharSet value);
    public abstract virtual IXLRichString SetFontScheme(XLFontScheme value);
}
public interface ClosedXML.Excel.IXLRichText {
}
public interface ClosedXML.Excel.IXLRow {
    public double Height { get; public set; }
    public bool IsHidden { get; }
    public int OutlineLevel { get; public set; }
    public abstract virtual double get_Height();
    public abstract virtual void set_Height(double value);
    public abstract virtual void ClearHeight();
    public abstract virtual void Delete();
    public abstract virtual int RowNumber();
    public abstract virtual IXLRows InsertRowsBelow(int numberOfRows);
    public abstract virtual IXLRows InsertRowsAbove(int numberOfRows);
    public abstract virtual IXLRow AdjustToContents();
    public abstract virtual IXLRow AdjustToContents(int startColumn);
    public abstract virtual IXLRow AdjustToContents(int startColumn, int endColumn);
    public abstract virtual IXLRow AdjustToContents(double minHeight, double maxHeight);
    public abstract virtual IXLRow AdjustToContents(int startColumn, double minHeight, double maxHeight);
    public abstract virtual IXLRow AdjustToContents(int startColumn, int endColumn, double minHeightPt, double maxHeightPt);
    public abstract virtual IXLRow Hide();
    public abstract virtual IXLRow Unhide();
    public abstract virtual bool get_IsHidden();
    public abstract virtual int get_OutlineLevel();
    public abstract virtual void set_OutlineLevel(int value);
    public abstract virtual IXLRow Group();
    public abstract virtual IXLRow Group(bool collapse);
    public abstract virtual IXLRow Group(int outlineLevel);
    public abstract virtual IXLRow Group(int outlineLevel, bool collapse);
    public abstract virtual IXLRow Ungroup();
    public abstract virtual IXLRow Ungroup(bool fromAll);
    public abstract virtual IXLRow Collapse();
    public abstract virtual IXLCell Cell(int columnNumber);
    public abstract virtual IXLCell Cell(string columnLetter);
    public abstract virtual IXLCells Cells(string cellsInRow);
    public abstract virtual IXLCells Cells(int firstColumn, int lastColumn);
    public abstract virtual IXLCells Cells(string firstColumn, string lastColumn);
    public abstract virtual IXLRow Expand();
    public abstract virtual int CellCount();
    public abstract virtual IXLRangeRow CopyTo(IXLCell cell);
    public abstract virtual IXLRangeRow CopyTo(IXLRangeBase range);
    public abstract virtual IXLRow CopyTo(IXLRow row);
    public abstract virtual IXLRow Sort();
    public abstract virtual IXLRow SortLeftToRight(XLSortOrder sortOrder, bool matchCase, bool ignoreBlanks);
    public abstract virtual IXLRangeRow Row(int start, int end);
    public abstract virtual IXLRangeRow Row(IXLCell start, IXLCell end);
    public abstract virtual IXLRangeRows Rows(string columns);
    public abstract virtual IXLRow AddHorizontalPageBreak();
    public abstract virtual IXLRow RowAbove();
    public abstract virtual IXLRow RowAbove(int step);
    public abstract virtual IXLRow RowBelow();
    public abstract virtual IXLRow RowBelow(int step);
    public abstract virtual IXLRow Clear(XLClearOptions clearOptions);
    public abstract virtual IXLRangeRow RowUsed(XLCellsUsedOptions options);
}
public interface ClosedXML.Excel.IXLRows {
    unknown double Height {public set; }
    public IXLStyle Style { get; public set; }
    public abstract virtual void set_Height(double value);
    public abstract virtual void Delete();
    public abstract virtual IXLRows AdjustToContents();
    public abstract virtual IXLRows AdjustToContents(int startColumn);
    public abstract virtual IXLRows AdjustToContents(int startColumn, int endColumn);
    public abstract virtual IXLRows AdjustToContents(double minHeight, double maxHeight);
    public abstract virtual IXLRows AdjustToContents(int startColumn, double minHeight, double maxHeight);
    public abstract virtual IXLRows AdjustToContents(int startColumn, int endColumn, double minHeight, double maxHeight);
    public abstract virtual void Hide();
    public abstract virtual void Unhide();
    public abstract virtual void Group();
    public abstract virtual void Group(bool collapse);
    public abstract virtual void Group(int outlineLevel);
    public abstract virtual void Group(int outlineLevel, bool collapse);
    public abstract virtual void Ungroup();
    public abstract virtual void Ungroup(bool fromAll);
    public abstract virtual void Collapse();
    public abstract virtual void Expand();
    public abstract virtual IXLCells Cells();
    public abstract virtual IXLCells CellsUsed();
    public abstract virtual IXLCells CellsUsed(XLCellsUsedOptions options);
    public abstract virtual IXLStyle get_Style();
    public abstract virtual void set_Style(IXLStyle value);
    public abstract virtual IXLRows AddHorizontalPageBreaks();
    public abstract virtual IXLRows Clear(XLClearOptions clearOptions);
    public abstract virtual void Select();
}
public interface ClosedXML.Excel.IXLSheetProtection {
    public abstract virtual IXLSheetProtection Protect(XLSheetProtectionElements allowedElements);
    public abstract virtual IXLSheetProtection Protect(Algorithm algorithm, XLSheetProtectionElements allowedElements);
    public abstract virtual IXLSheetProtection Protect(string password, Algorithm algorithm, XLSheetProtectionElements allowedElements);
}
public interface ClosedXML.Excel.IXLSheetView {
    public int SplitColumn { get; public set; }
    public int SplitRow { get; public set; }
    public IXLAddress TopLeftCellAddress { get; public set; }
    public XLSheetViewOptions View { get; public set; }
    public IXLWorksheet Worksheet { get; }
    public int ZoomScale { get; public set; }
    public int ZoomScaleNormal { get; public set; }
    public int ZoomScalePageLayoutView { get; public set; }
    public int ZoomScaleSheetLayoutView { get; public set; }
    public abstract virtual int get_SplitColumn();
    public abstract virtual void set_SplitColumn(int value);
    public abstract virtual int get_SplitRow();
    public abstract virtual void set_SplitRow(int value);
    public abstract virtual IXLAddress get_TopLeftCellAddress();
    public abstract virtual void set_TopLeftCellAddress(IXLAddress value);
    public abstract virtual XLSheetViewOptions get_View();
    public abstract virtual void set_View(XLSheetViewOptions value);
    public abstract virtual IXLWorksheet get_Worksheet();
    public abstract virtual int get_ZoomScale();
    public abstract virtual void set_ZoomScale(int value);
    public abstract virtual int get_ZoomScaleNormal();
    public abstract virtual void set_ZoomScaleNormal(int value);
    public abstract virtual int get_ZoomScalePageLayoutView();
    public abstract virtual void set_ZoomScalePageLayoutView(int value);
    public abstract virtual int get_ZoomScaleSheetLayoutView();
    public abstract virtual void set_ZoomScaleSheetLayoutView(int value);
    public abstract virtual void Freeze(int rows, int columns);
    public abstract virtual void FreezeColumns(int columns);
    public abstract virtual void FreezeRows(int rows);
    public abstract virtual IXLSheetView SetView(XLSheetViewOptions value);
}
public interface ClosedXML.Excel.IXLSortElement {
    public int ElementNumber { get; public set; }
    public XLSortOrder SortOrder { get; public set; }
    public bool IgnoreBlanks { get; public set; }
    public bool MatchCase { get; public set; }
    public abstract virtual int get_ElementNumber();
    public abstract virtual void set_ElementNumber(int value);
    public abstract virtual XLSortOrder get_SortOrder();
    public abstract virtual void set_SortOrder(XLSortOrder value);
    public abstract virtual bool get_IgnoreBlanks();
    public abstract virtual void set_IgnoreBlanks(bool value);
    public abstract virtual bool get_MatchCase();
    public abstract virtual void set_MatchCase(bool value);
}
public interface ClosedXML.Excel.IXLSortElements {
    public abstract virtual void Add(int elementNumber);
    public abstract virtual void Add(int elementNumber, XLSortOrder sortOrder);
    public abstract virtual void Add(int elementNumber, XLSortOrder sortOrder, bool ignoreBlanks);
    public abstract virtual void Add(int elementNumber, XLSortOrder sortOrder, bool ignoreBlanks, bool matchCase);
    public abstract virtual void Add(string elementNumber);
    public abstract virtual void Add(string elementNumber, XLSortOrder sortOrder);
    public abstract virtual void Add(string elementNumber, XLSortOrder sortOrder, bool ignoreBlanks);
    public abstract virtual void Add(string elementNumber, XLSortOrder sortOrder, bool ignoreBlanks, bool matchCase);
    public abstract virtual void Clear();
    public abstract virtual void Remove(int elementNumber);
}
public interface ClosedXML.Excel.IXLSparkline {
    public bool IsValid { get; }
    public IXLCell Location { get; public set; }
    public IXLRange SourceData { get; public set; }
    public IXLSparklineGroup SparklineGroup { get; }
    public abstract virtual bool get_IsValid();
    public abstract virtual IXLCell get_Location();
    public abstract virtual void set_Location(IXLCell value);
    public abstract virtual IXLRange get_SourceData();
    public abstract virtual void set_SourceData(IXLRange value);
    public abstract virtual IXLSparklineGroup get_SparklineGroup();
    public abstract virtual IXLSparkline SetLocation(IXLCell value);
    public abstract virtual IXLSparkline SetSourceData(IXLRange value);
}
public interface ClosedXML.Excel.IXLSparklineGroup {
    public IXLRange DateRange { get; public set; }
    public XLDisplayBlanksAsValues DisplayEmptyCellsAs { get; public set; }
    public bool DisplayHidden { get; public set; }
    public IXLSparklineHorizontalAxis HorizontalAxis { get; }
    public double LineWeight { get; public set; }
    public XLSparklineMarkers ShowMarkers { get; public set; }
    public IXLSparklineStyle Style { get; public set; }
    public XLSparklineType Type { get; public set; }
    public IXLSparklineVerticalAxis VerticalAxis { get; }
    public IXLWorksheet Worksheet { get; }
    public abstract virtual IXLRange get_DateRange();
    public abstract virtual void set_DateRange(IXLRange value);
    public abstract virtual XLDisplayBlanksAsValues get_DisplayEmptyCellsAs();
    public abstract virtual void set_DisplayEmptyCellsAs(XLDisplayBlanksAsValues value);
    public abstract virtual bool get_DisplayHidden();
    public abstract virtual void set_DisplayHidden(bool value);
    public abstract virtual IXLSparklineHorizontalAxis get_HorizontalAxis();
    public abstract virtual double get_LineWeight();
    public abstract virtual void set_LineWeight(double value);
    public abstract virtual XLSparklineMarkers get_ShowMarkers();
    public abstract virtual void set_ShowMarkers(XLSparklineMarkers value);
    public abstract virtual IXLSparklineStyle get_Style();
    public abstract virtual void set_Style(IXLSparklineStyle value);
    public abstract virtual XLSparklineType get_Type();
    public abstract virtual void set_Type(XLSparklineType value);
    public abstract virtual IXLSparklineVerticalAxis get_VerticalAxis();
    public abstract virtual IXLWorksheet get_Worksheet();
    public abstract virtual IXLSparkline Add(IXLCell location, IXLRange sourceData);
    public abstract virtual IEnumerable`1<IXLSparkline> Add(IXLRange locationRange, IXLRange sourceDataRange);
    public abstract virtual IEnumerable`1<IXLSparkline> Add(string locationRangeAddress, string sourceDataAddress);
    public abstract virtual void CopyFrom(IXLSparklineGroup sparklineGroup);
    public abstract virtual IXLSparklineGroup CopyTo(IXLWorksheet targetSheet);
    public abstract virtual IXLSparkline GetSparkline(IXLCell cell);
    public abstract virtual IEnumerable`1<IXLSparkline> GetSparklines(IXLRangeBase searchRange);
    public abstract virtual void Remove(IXLCell cell);
    public abstract virtual void Remove(IXLSparkline sparkline);
    public abstract virtual void RemoveAll();
    public abstract virtual IXLSparklineGroup SetDateRange(IXLRange value);
    public abstract virtual IXLSparklineGroup SetDisplayEmptyCellsAs(XLDisplayBlanksAsValues value);
    public abstract virtual IXLSparklineGroup SetDisplayHidden(bool value);
    public abstract virtual IXLSparklineGroup SetLineWeight(double value);
    public abstract virtual IXLSparklineGroup SetShowMarkers(XLSparklineMarkers value);
    public abstract virtual IXLSparklineGroup SetStyle(IXLSparklineStyle value);
    public abstract virtual IXLSparklineGroup SetType(XLSparklineType value);
}
public interface ClosedXML.Excel.IXLSparklineGroups {
    public IXLWorksheet Worksheet { get; }
    public abstract virtual IXLWorksheet get_Worksheet();
    public abstract virtual IXLSparklineGroup Add(IXLSparklineGroup sparklineGroup);
    public abstract virtual IXLSparklineGroup Add(string locationAddress, string sourceDataAddress);
    public abstract virtual IXLSparklineGroup Add(IXLCell location, IXLRange sourceData);
    public abstract virtual IXLSparklineGroup Add(IXLRange locationRange, IXLRange sourceDataRange);
    public abstract virtual void CopyTo(IXLWorksheet targetSheet);
    public abstract virtual IXLSparkline GetSparkline(IXLCell cell);
    public abstract virtual IEnumerable`1<IXLSparkline> GetSparklines(IXLRangeBase rangeBase);
    public abstract virtual void Remove(IXLCell cell);
    public abstract virtual void Remove(IXLRangeBase range);
    public abstract virtual void Remove(IXLSparklineGroup sparklineGroup);
    public abstract virtual void RemoveAll();
}
public interface ClosedXML.Excel.IXLSparklineHorizontalAxis {
    public XLColor Color { get; public set; }
    public bool DateAxis { get; }
    public bool IsVisible { get; public set; }
    public bool RightToLeft { get; public set; }
    public abstract virtual XLColor get_Color();
    public abstract virtual void set_Color(XLColor value);
    public abstract virtual bool get_DateAxis();
    public abstract virtual bool get_IsVisible();
    public abstract virtual void set_IsVisible(bool value);
    public abstract virtual bool get_RightToLeft();
    public abstract virtual void set_RightToLeft(bool value);
    public abstract virtual IXLSparklineHorizontalAxis SetColor(XLColor value);
    public abstract virtual IXLSparklineHorizontalAxis SetRightToLeft(bool value);
    public abstract virtual IXLSparklineHorizontalAxis SetVisible(bool value);
}
public interface ClosedXML.Excel.IXLSparklineStyle {
    public XLColor FirstMarkerColor { get; public set; }
    public XLColor HighMarkerColor { get; public set; }
    public XLColor LastMarkerColor { get; public set; }
    public XLColor LowMarkerColor { get; public set; }
    public XLColor MarkersColor { get; public set; }
    public XLColor NegativeColor { get; public set; }
    public XLColor SeriesColor { get; public set; }
    public abstract virtual XLColor get_FirstMarkerColor();
    public abstract virtual void set_FirstMarkerColor(XLColor value);
    public abstract virtual XLColor get_HighMarkerColor();
    public abstract virtual void set_HighMarkerColor(XLColor value);
    public abstract virtual XLColor get_LastMarkerColor();
    public abstract virtual void set_LastMarkerColor(XLColor value);
    public abstract virtual XLColor get_LowMarkerColor();
    public abstract virtual void set_LowMarkerColor(XLColor value);
    public abstract virtual XLColor get_MarkersColor();
    public abstract virtual void set_MarkersColor(XLColor value);
    public abstract virtual XLColor get_NegativeColor();
    public abstract virtual void set_NegativeColor(XLColor value);
    public abstract virtual XLColor get_SeriesColor();
    public abstract virtual void set_SeriesColor(XLColor value);
    public abstract virtual IXLSparklineStyle SetFirstMarkerColor(XLColor value);
    public abstract virtual IXLSparklineStyle SetHighMarkerColor(XLColor value);
    public abstract virtual IXLSparklineStyle SetLastMarkerColor(XLColor value);
    public abstract virtual IXLSparklineStyle SetLowMarkerColor(XLColor value);
    public abstract virtual IXLSparklineStyle SetMarkersColor(XLColor value);
    public abstract virtual IXLSparklineStyle SetNegativeColor(XLColor value);
    public abstract virtual IXLSparklineStyle SetSeriesColor(XLColor value);
}
public interface ClosedXML.Excel.IXLSparklineVerticalAxis {
    public Nullable`1<double> ManualMax { get; public set; }
    public Nullable`1<double> ManualMin { get; public set; }
    public XLSparklineAxisMinMax MaxAxisType { get; public set; }
    public XLSparklineAxisMinMax MinAxisType { get; public set; }
    public abstract virtual Nullable`1<double> get_ManualMax();
    public abstract virtual void set_ManualMax(Nullable`1<double> value);
    public abstract virtual Nullable`1<double> get_ManualMin();
    public abstract virtual void set_ManualMin(Nullable`1<double> value);
    public abstract virtual XLSparklineAxisMinMax get_MaxAxisType();
    public abstract virtual void set_MaxAxisType(XLSparklineAxisMinMax value);
    public abstract virtual XLSparklineAxisMinMax get_MinAxisType();
    public abstract virtual void set_MinAxisType(XLSparklineAxisMinMax value);
    public abstract virtual IXLSparklineVerticalAxis SetManualMax(Nullable`1<double> value);
    public abstract virtual IXLSparklineVerticalAxis SetManualMin(Nullable`1<double> value);
    public abstract virtual IXLSparklineVerticalAxis SetMaxAxisType(XLSparklineAxisMinMax value);
    public abstract virtual IXLSparklineVerticalAxis SetMinAxisType(XLSparklineAxisMinMax value);
}
public interface ClosedXML.Excel.IXLStyle {
    public IXLAlignment Alignment { get; public set; }
    public IXLBorder Border { get; public set; }
    public IXLNumberFormat DateFormat { get; }
    public IXLFill Fill { get; public set; }
    public IXLFont Font { get; public set; }
    public bool IncludeQuotePrefix { get; public set; }
    public IXLNumberFormat NumberFormat { get; public set; }
    public IXLProtection Protection { get; public set; }
    public abstract virtual IXLAlignment get_Alignment();
    public abstract virtual void set_Alignment(IXLAlignment value);
    public abstract virtual IXLBorder get_Border();
    public abstract virtual void set_Border(IXLBorder value);
    public abstract virtual IXLNumberFormat get_DateFormat();
    public abstract virtual IXLFill get_Fill();
    public abstract virtual void set_Fill(IXLFill value);
    public abstract virtual IXLFont get_Font();
    public abstract virtual void set_Font(IXLFont value);
    public abstract virtual bool get_IncludeQuotePrefix();
    public abstract virtual void set_IncludeQuotePrefix(bool value);
    public abstract virtual IXLNumberFormat get_NumberFormat();
    public abstract virtual void set_NumberFormat(IXLNumberFormat value);
    public abstract virtual IXLProtection get_Protection();
    public abstract virtual void set_Protection(IXLProtection value);
    public abstract virtual IXLStyle SetIncludeQuotePrefix(bool includeQuotePrefix);
}
internal interface ClosedXML.Excel.IXLStylized {
    public IXLStyle Style { get; public set; }
    public IEnumerable`1<IXLStyle> Styles { get; }
    public IXLStyle InnerStyle { get; public set; }
    public IXLRanges RangesUsed { get; }
    public XLStyleValue StyleValue { get; }
    public abstract virtual IXLStyle get_Style();
    public abstract virtual void set_Style(IXLStyle value);
    public abstract virtual IEnumerable`1<IXLStyle> get_Styles();
    public abstract virtual IXLStyle get_InnerStyle();
    public abstract virtual void set_InnerStyle(IXLStyle value);
    public abstract virtual IXLRanges get_RangesUsed();
    public abstract virtual XLStyleValue get_StyleValue();
    public abstract virtual void ModifyStyle(Func`2<XLStyleKey, XLStyleKey> modification);
}
public interface ClosedXML.Excel.IXLTable {
    public IXLAutoFilter AutoFilter { get; }
    public IXLTableRange DataRange { get; }
    public bool EmphasizeFirstColumn { get; public set; }
    public bool EmphasizeLastColumn { get; public set; }
    public IEnumerable`1<IXLTableField> Fields { get; }
    public string Name { get; public set; }
    public bool ShowAutoFilter { get; public set; }
    public bool ShowColumnStripes { get; public set; }
    public bool ShowHeaderRow { get; public set; }
    public bool ShowRowStripes { get; public set; }
    public bool ShowTotalsRow { get; public set; }
    public XLTableTheme Theme { get; public set; }
    public abstract virtual IXLAutoFilter get_AutoFilter();
    public abstract virtual IXLTableRange get_DataRange();
    public abstract virtual bool get_EmphasizeFirstColumn();
    public abstract virtual void set_EmphasizeFirstColumn(bool value);
    public abstract virtual bool get_EmphasizeLastColumn();
    public abstract virtual void set_EmphasizeLastColumn(bool value);
    public abstract virtual IEnumerable`1<IXLTableField> get_Fields();
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    public abstract virtual bool get_ShowAutoFilter();
    public abstract virtual void set_ShowAutoFilter(bool value);
    public abstract virtual bool get_ShowColumnStripes();
    public abstract virtual void set_ShowColumnStripes(bool value);
    public abstract virtual bool get_ShowHeaderRow();
    public abstract virtual void set_ShowHeaderRow(bool value);
    public abstract virtual bool get_ShowRowStripes();
    public abstract virtual void set_ShowRowStripes(bool value);
    public abstract virtual bool get_ShowTotalsRow();
    public abstract virtual void set_ShowTotalsRow(bool value);
    public abstract virtual XLTableTheme get_Theme();
    public abstract virtual void set_Theme(XLTableTheme value);
    public abstract virtual IXLTable Clear(XLClearOptions clearOptions);
    public abstract virtual IXLTableField Field(string fieldName);
    public abstract virtual IXLTableField Field(int fieldIndex);
    public abstract virtual IXLRangeRow HeadersRow();
    public abstract virtual IXLRange AppendData(IEnumerable data, bool propagateExtraColumns);
    public abstract virtual IXLRange AppendData(IEnumerable data, bool transpose, bool propagateExtraColumns);
    public abstract virtual IXLRange AppendData(DataTable dataTable, bool propagateExtraColumns);
    public abstract virtual IXLRange AppendData(IEnumerable`1<T> data, bool propagateExtraColumns);
    public abstract virtual IXLRange ReplaceData(IEnumerable data, bool propagateExtraColumns);
    public abstract virtual IXLRange ReplaceData(IEnumerable data, bool transpose, bool propagateExtraColumns);
    public abstract virtual IXLRange ReplaceData(DataTable dataTable, bool propagateExtraColumns);
    public abstract virtual IXLRange ReplaceData(IEnumerable`1<T> data, bool propagateExtraColumns);
    public abstract virtual IXLTable Resize(IXLRange range);
    public abstract virtual IXLTable Resize(IXLRangeAddress rangeAddress);
    public abstract virtual IXLTable Resize(string rangeAddress);
    public abstract virtual IXLTable Resize(IXLCell firstCell, IXLCell lastCell);
    public abstract virtual IXLTable Resize(string firstCellAddress, string lastCellAddress);
    public abstract virtual IXLTable Resize(IXLAddress firstCellAddress, IXLAddress lastCellAddress);
    public abstract virtual IXLTable Resize(int firstCellRow, int firstCellColumn, int lastCellRow, int lastCellColumn);
    public abstract virtual IXLAutoFilter SetAutoFilter();
    public abstract virtual IXLTable SetEmphasizeFirstColumn();
    public abstract virtual IXLTable SetEmphasizeFirstColumn(bool value);
    public abstract virtual IXLTable SetEmphasizeLastColumn();
    public abstract virtual IXLTable SetEmphasizeLastColumn(bool value);
    public abstract virtual IXLTable SetShowAutoFilter();
    public abstract virtual IXLTable SetShowAutoFilter(bool value);
    public abstract virtual IXLTable SetShowColumnStripes();
    public abstract virtual IXLTable SetShowColumnStripes(bool value);
    public abstract virtual IXLTable SetShowHeaderRow();
    public abstract virtual IXLTable SetShowHeaderRow(bool value);
    public abstract virtual IXLTable SetShowRowStripes();
    public abstract virtual IXLTable SetShowRowStripes(bool value);
    public abstract virtual IXLTable SetShowTotalsRow();
    public abstract virtual IXLTable SetShowTotalsRow(bool value);
    public abstract virtual IXLRangeRow TotalsRow();
    public abstract virtual IEnumerable`1<object> AsDynamicEnumerable();
    public abstract virtual DataTable AsNativeDataTable();
    public abstract virtual IXLTable CopyTo(IXLWorksheet targetSheet);
}
public interface ClosedXML.Excel.IXLTableField {
    public IXLRangeColumn Column { get; }
    public IXLCells DataCells { get; }
    public IXLCell TotalsCell { get; }
    public IXLCell HeaderCell { get; }
    public int Index { get; }
    public string Name { get; public set; }
    public IXLTable Table { get; }
    public string TotalsRowFormulaA1 { get; public set; }
    public string TotalsRowFormulaR1C1 { get; public set; }
    public XLTotalsRowFunction TotalsRowFunction { get; public set; }
    public string TotalsRowLabel { get; public set; }
    public abstract virtual IXLRangeColumn get_Column();
    public abstract virtual IXLCells get_DataCells();
    public abstract virtual IXLCell get_TotalsCell();
    public abstract virtual IXLCell get_HeaderCell();
    public abstract virtual int get_Index();
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    public abstract virtual IXLTable get_Table();
    public abstract virtual string get_TotalsRowFormulaA1();
    public abstract virtual void set_TotalsRowFormulaA1(string value);
    public abstract virtual string get_TotalsRowFormulaR1C1();
    public abstract virtual void set_TotalsRowFormulaR1C1(string value);
    public abstract virtual XLTotalsRowFunction get_TotalsRowFunction();
    public abstract virtual void set_TotalsRowFunction(XLTotalsRowFunction value);
    public abstract virtual string get_TotalsRowLabel();
    public abstract virtual void set_TotalsRowLabel(string value);
    public abstract virtual void Delete();
    public abstract virtual bool IsConsistentDataType();
    public abstract virtual bool IsConsistentFormula();
    public abstract virtual bool IsConsistentStyle();
}
public interface ClosedXML.Excel.IXLTableRange {
    public IXLTable Table { get; }
    public abstract virtual IXLTable get_Table();
    public abstract virtual IXLTableRow FirstRow(Func`2<IXLTableRow, bool> predicate);
    public abstract virtual IXLTableRow FirstRowUsed(XLCellsUsedOptions options, Func`2<IXLTableRow, bool> predicate);
    public abstract virtual IXLTableRow FirstRowUsed(Func`2<IXLTableRow, bool> predicate);
    public abstract virtual IXLTableRows InsertRowsAbove(int numberOfRows);
    public abstract virtual IXLTableRows InsertRowsBelow(int numberOfRows);
    public abstract virtual IXLTableRow LastRow(Func`2<IXLTableRow, bool> predicate);
    public abstract virtual IXLTableRow LastRowUsed(XLCellsUsedOptions options, Func`2<IXLTableRow, bool> predicate);
    public abstract virtual IXLTableRow LastRowUsed(Func`2<IXLTableRow, bool> predicate);
    public abstract virtual IXLTableRow Row(int row);
    public abstract virtual IXLTableRows Rows(Func`2<IXLTableRow, bool> predicate);
    public abstract virtual IXLTableRows Rows(int firstRow, int lastRow);
    public abstract virtual IXLTableRows Rows(string rows);
    public abstract virtual IXLTableRows RowsUsed(XLCellsUsedOptions options, Func`2<IXLTableRow, bool> predicate);
    public abstract virtual IXLTableRows RowsUsed(Func`2<IXLTableRow, bool> predicate);
}
public interface ClosedXML.Excel.IXLTableRow {
    public abstract virtual IXLCell Field(int index);
    public abstract virtual IXLCell Field(string name);
    public abstract virtual IXLTableRow Sort();
    public abstract virtual IXLTableRow SortLeftToRight(XLSortOrder sortOrder, bool matchCase, bool ignoreBlanks);
    public abstract virtual IXLTableRow RowAbove();
    public abstract virtual IXLTableRow RowAbove(int step);
    public abstract virtual IXLTableRow RowBelow();
    public abstract virtual IXLTableRow RowBelow(int step);
    public abstract virtual IXLTableRow Clear(XLClearOptions clearOptions);
    public abstract virtual IXLTableRows InsertRowsAbove(int numberOfRows);
    public abstract virtual IXLTableRows InsertRowsBelow(int numberOfRows);
}
public interface ClosedXML.Excel.IXLTableRows {
    public IXLStyle Style { get; public set; }
    public abstract virtual IXLStyle get_Style();
    public abstract virtual void set_Style(IXLStyle value);
    public abstract virtual void Add(IXLTableRow tableRow);
    public abstract virtual IXLCells Cells();
    public abstract virtual IXLCells CellsUsed();
    public abstract virtual IXLCells CellsUsed(XLCellsUsedOptions options);
    public abstract virtual IXLTableRows Clear(XLClearOptions clearOptions);
    public abstract virtual void Delete();
    public abstract virtual void Select();
}
public interface ClosedXML.Excel.IXLTables {
    public abstract virtual void Add(IXLTable table);
    public abstract virtual IXLTables Clear(XLClearOptions clearOptions);
    public abstract virtual bool Contains(string name);
    public abstract virtual void Remove(int index);
    public abstract virtual void Remove(string name);
    public abstract virtual IXLTable Table(int index);
    public abstract virtual IXLTable Table(string name);
    public abstract virtual bool TryGetTable(string tableName, IXLTable& table);
}
public interface ClosedXML.Excel.IXLTheme {
    public XLColor Background1 { get; public set; }
    public XLColor Text1 { get; public set; }
    public XLColor Background2 { get; public set; }
    public XLColor Text2 { get; public set; }
    public XLColor Accent1 { get; public set; }
    public XLColor Accent2 { get; public set; }
    public XLColor Accent3 { get; public set; }
    public XLColor Accent4 { get; public set; }
    public XLColor Accent5 { get; public set; }
    public XLColor Accent6 { get; public set; }
    public XLColor Hyperlink { get; public set; }
    public XLColor FollowedHyperlink { get; public set; }
    public abstract virtual XLColor get_Background1();
    public abstract virtual void set_Background1(XLColor value);
    public abstract virtual XLColor get_Text1();
    public abstract virtual void set_Text1(XLColor value);
    public abstract virtual XLColor get_Background2();
    public abstract virtual void set_Background2(XLColor value);
    public abstract virtual XLColor get_Text2();
    public abstract virtual void set_Text2(XLColor value);
    public abstract virtual XLColor get_Accent1();
    public abstract virtual void set_Accent1(XLColor value);
    public abstract virtual XLColor get_Accent2();
    public abstract virtual void set_Accent2(XLColor value);
    public abstract virtual XLColor get_Accent3();
    public abstract virtual void set_Accent3(XLColor value);
    public abstract virtual XLColor get_Accent4();
    public abstract virtual void set_Accent4(XLColor value);
    public abstract virtual XLColor get_Accent5();
    public abstract virtual void set_Accent5(XLColor value);
    public abstract virtual XLColor get_Accent6();
    public abstract virtual void set_Accent6(XLColor value);
    public abstract virtual XLColor get_Hyperlink();
    public abstract virtual void set_Hyperlink(XLColor value);
    public abstract virtual XLColor get_FollowedHyperlink();
    public abstract virtual void set_FollowedHyperlink(XLColor value);
    public abstract virtual XLColor ResolveThemeColor(XLThemeColor themeColor);
}
public interface ClosedXML.Excel.IXLValidationCriteria {
    public abstract virtual void Between(string minValue, string maxValue);
    public abstract virtual void Between(IXLCell minValue, IXLCell maxValue);
    public abstract virtual void EqualOrGreaterThan(string value);
    public abstract virtual void EqualOrGreaterThan(IXLCell cell);
    public abstract virtual void EqualOrLessThan(string value);
    public abstract virtual void EqualOrLessThan(IXLCell cell);
    public abstract virtual void EqualTo(string value);
    public abstract virtual void EqualTo(IXLCell cell);
    public abstract virtual void GreaterThan(string value);
    public abstract virtual void GreaterThan(IXLCell cell);
    public abstract virtual void LessThan(string value);
    public abstract virtual void LessThan(IXLCell cell);
    public abstract virtual void NotBetween(string minValue, string maxValue);
    public abstract virtual void NotBetween(IXLCell minValue, IXLCell maxValue);
    public abstract virtual void NotEqualTo(string value);
    public abstract virtual void NotEqualTo(IXLCell cell);
}
public interface ClosedXML.Excel.IXLWithRichString {
    public abstract virtual IXLRichString AddText(string text);
    public abstract virtual IXLRichString AddNewLine();
}
public interface ClosedXML.Excel.IXLWorkbook {
    public string Author { get; public set; }
    public XLCalculateMode CalculateMode { get; public set; }
    public bool CalculationOnSave { get; public set; }
    public double ColumnWidth { get; public set; }
    public IXLCustomProperties CustomProperties { get; }
    public bool DefaultRightToLeft { get; }
    public bool DefaultShowFormulas { get; }
    public bool DefaultShowGridLines { get; }
    public bool DefaultShowOutlineSymbols { get; }
    public bool DefaultShowRowColHeaders { get; }
    public bool DefaultShowRuler { get; }
    public bool DefaultShowWhiteSpace { get; }
    public bool DefaultShowZeros { get; }
    public IXLFileSharing FileSharing { get; }
    public bool ForceFullCalculation { get; public set; }
    public bool FullCalculationOnLoad { get; public set; }
    public bool FullPrecision { get; public set; }
    public bool LockStructure { get; public set; }
    public bool LockWindows { get; public set; }
    public IXLNamedRanges NamedRanges { get; }
    public IXLOutline Outline { get; public set; }
    public IXLPageSetup PageOptions { get; public set; }
    public IXLPivotCaches PivotCaches { get; }
    public XLWorkbookProperties Properties { get; public set; }
    public XLReferenceStyle ReferenceStyle { get; public set; }
    public bool RightToLeft { get; public set; }
    public double RowHeight { get; public set; }
    public bool ShowFormulas { get; public set; }
    public bool ShowGridLines { get; public set; }
    public bool ShowOutlineSymbols { get; public set; }
    public bool ShowRowColHeaders { get; public set; }
    public bool ShowRuler { get; public set; }
    public bool ShowWhiteSpace { get; public set; }
    public bool ShowZeros { get; public set; }
    public IXLStyle Style { get; public set; }
    public IXLTheme Theme { get; }
    public bool Use1904DateSystem { get; public set; }
    public IXLWorksheets Worksheets { get; }
    public abstract virtual string get_Author();
    public abstract virtual void set_Author(string value);
    public abstract virtual XLCalculateMode get_CalculateMode();
    public abstract virtual void set_CalculateMode(XLCalculateMode value);
    public abstract virtual bool get_CalculationOnSave();
    public abstract virtual void set_CalculationOnSave(bool value);
    public abstract virtual double get_ColumnWidth();
    public abstract virtual void set_ColumnWidth(double value);
    public abstract virtual IXLCustomProperties get_CustomProperties();
    public abstract virtual bool get_DefaultRightToLeft();
    public abstract virtual bool get_DefaultShowFormulas();
    public abstract virtual bool get_DefaultShowGridLines();
    public abstract virtual bool get_DefaultShowOutlineSymbols();
    public abstract virtual bool get_DefaultShowRowColHeaders();
    public abstract virtual bool get_DefaultShowRuler();
    public abstract virtual bool get_DefaultShowWhiteSpace();
    public abstract virtual bool get_DefaultShowZeros();
    public abstract virtual IXLFileSharing get_FileSharing();
    public abstract virtual bool get_ForceFullCalculation();
    public abstract virtual void set_ForceFullCalculation(bool value);
    public abstract virtual bool get_FullCalculationOnLoad();
    public abstract virtual void set_FullCalculationOnLoad(bool value);
    public abstract virtual bool get_FullPrecision();
    public abstract virtual void set_FullPrecision(bool value);
    public abstract virtual bool get_LockStructure();
    public abstract virtual void set_LockStructure(bool value);
    public abstract virtual bool get_LockWindows();
    public abstract virtual void set_LockWindows(bool value);
    public abstract virtual IXLNamedRanges get_NamedRanges();
    public abstract virtual IXLOutline get_Outline();
    public abstract virtual void set_Outline(IXLOutline value);
    public abstract virtual IXLPageSetup get_PageOptions();
    public abstract virtual void set_PageOptions(IXLPageSetup value);
    public abstract virtual IXLPivotCaches get_PivotCaches();
    public abstract virtual XLWorkbookProperties get_Properties();
    public abstract virtual void set_Properties(XLWorkbookProperties value);
    public abstract virtual XLReferenceStyle get_ReferenceStyle();
    public abstract virtual void set_ReferenceStyle(XLReferenceStyle value);
    public abstract virtual bool get_RightToLeft();
    public abstract virtual void set_RightToLeft(bool value);
    public abstract virtual double get_RowHeight();
    public abstract virtual void set_RowHeight(double value);
    public abstract virtual bool get_ShowFormulas();
    public abstract virtual void set_ShowFormulas(bool value);
    public abstract virtual bool get_ShowGridLines();
    public abstract virtual void set_ShowGridLines(bool value);
    public abstract virtual bool get_ShowOutlineSymbols();
    public abstract virtual void set_ShowOutlineSymbols(bool value);
    public abstract virtual bool get_ShowRowColHeaders();
    public abstract virtual void set_ShowRowColHeaders(bool value);
    public abstract virtual bool get_ShowRuler();
    public abstract virtual void set_ShowRuler(bool value);
    public abstract virtual bool get_ShowWhiteSpace();
    public abstract virtual void set_ShowWhiteSpace(bool value);
    public abstract virtual bool get_ShowZeros();
    public abstract virtual void set_ShowZeros(bool value);
    public abstract virtual IXLStyle get_Style();
    public abstract virtual void set_Style(IXLStyle value);
    public abstract virtual IXLTheme get_Theme();
    public abstract virtual bool get_Use1904DateSystem();
    public abstract virtual void set_Use1904DateSystem(bool value);
    public abstract virtual IXLWorksheets get_Worksheets();
    public abstract virtual IXLWorksheet AddWorksheet();
    public abstract virtual IXLWorksheet AddWorksheet(int position);
    public abstract virtual IXLWorksheet AddWorksheet(string sheetName);
    public abstract virtual IXLWorksheet AddWorksheet(string sheetName, int position);
    public abstract virtual void AddWorksheet(DataSet dataSet);
    public abstract virtual void AddWorksheet(IXLWorksheet worksheet);
    public abstract virtual IXLWorksheet AddWorksheet(DataTable dataTable);
    public abstract virtual IXLWorksheet AddWorksheet(DataTable dataTable, string sheetName);
    public abstract virtual IXLWorksheet AddWorksheet(DataTable dataTable, string sheetName, string tableName);
    public abstract virtual IXLCell Cell(string namedCell);
    public abstract virtual IXLCells Cells(string namedCells);
    public abstract virtual IXLCustomProperty CustomProperty(string name);
    public abstract virtual XLCellValue Evaluate(string expression);
    public abstract virtual IXLCells FindCells(Func`2<IXLCell, bool> predicate);
    public abstract virtual IXLColumns FindColumns(Func`2<IXLColumn, bool> predicate);
    public abstract virtual IXLRows FindRows(Func`2<IXLRow, bool> predicate);
    public abstract virtual IXLNamedRange NamedRange(string rangeName);
    public abstract virtual IXLRange Range(string range);
    public abstract virtual IXLRange RangeFromFullAddress(string rangeAddress, IXLWorksheet& ws);
    public abstract virtual IXLRanges Ranges(string ranges);
    public abstract virtual void RecalculateAllFormulas();
    public abstract virtual void Save();
    public abstract virtual void Save(bool validate, bool evaluateFormulae);
    public abstract virtual void Save(SaveOptions options);
    public abstract virtual void SaveAs(string file);
    public abstract virtual void SaveAs(string file, bool validate, bool evaluateFormulae);
    public abstract virtual void SaveAs(string file, SaveOptions options);
    public abstract virtual void SaveAs(Stream stream);
    public abstract virtual void SaveAs(Stream stream, bool validate, bool evaluateFormulae);
    public abstract virtual void SaveAs(Stream stream, SaveOptions options);
    public abstract virtual IEnumerable`1<IXLCell> Search(string searchText, CompareOptions compareOptions, bool searchFormulae);
    public abstract virtual XLWorkbook SetLockStructure(bool value);
    public abstract virtual XLWorkbook SetLockWindows(bool value);
    public abstract virtual XLWorkbook SetUse1904DateSystem();
    public abstract virtual XLWorkbook SetUse1904DateSystem(bool value);
    public abstract virtual IXLTable Table(string tableName, StringComparison comparisonType);
    public abstract virtual bool TryGetWorksheet(string name, IXLWorksheet& worksheet);
    public abstract virtual IXLWorksheet Worksheet(string name);
    public abstract virtual IXLWorksheet Worksheet(int position);
}
public interface ClosedXML.Excel.IXLWorkbookProtection {
    public abstract virtual IXLWorkbookProtection Protect(XLWorkbookProtectionElements allowedElements);
    public abstract virtual IXLWorkbookProtection Protect(Algorithm algorithm, XLWorkbookProtectionElements allowedElements);
    public abstract virtual IXLWorkbookProtection Protect(string password, Algorithm algorithm, XLWorkbookProtectionElements allowedElements);
}
public interface ClosedXML.Excel.IXLWorksheet {
    public XLWorkbook Workbook { get; }
    public double ColumnWidth { get; public set; }
    public double RowHeight { get; public set; }
    public string Name { get; public set; }
    public int Position { get; public set; }
    public IXLPageSetup PageSetup { get; }
    public IXLOutline Outline { get; }
    public IXLNamedRanges NamedRanges { get; }
    public IXLSheetView SheetView { get; }
    public IXLTables Tables { get; }
    public IXLDataValidations DataValidations { get; }
    public XLWorksheetVisibility Visibility { get; public set; }
    public IXLSortElements SortRows { get; }
    public IXLSortElements SortColumns { get; }
    public bool ShowFormulas { get; public set; }
    public bool ShowGridLines { get; public set; }
    public bool ShowOutlineSymbols { get; public set; }
    public bool ShowRowColHeaders { get; public set; }
    public bool ShowRuler { get; public set; }
    public bool ShowWhiteSpace { get; public set; }
    public bool ShowZeros { get; public set; }
    public XLColor TabColor { get; public set; }
    public bool TabSelected { get; public set; }
    public bool TabActive { get; public set; }
    public IXLPivotTables PivotTables { get; }
    public bool RightToLeft { get; public set; }
    public IXLAutoFilter AutoFilter { get; }
    public IXLRanges MergedRanges { get; }
    public IXLConditionalFormats ConditionalFormats { get; }
    public IXLSparklineGroups SparklineGroups { get; }
    public IXLRanges SelectedRanges { get; }
    public IXLCell ActiveCell { get; public set; }
    public string Author { get; public set; }
    public IXLPictures Pictures { get; }
    public abstract virtual XLWorkbook get_Workbook();
    public abstract virtual double get_ColumnWidth();
    public abstract virtual void set_ColumnWidth(double value);
    public abstract virtual double get_RowHeight();
    public abstract virtual void set_RowHeight(double value);
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    public abstract virtual int get_Position();
    public abstract virtual void set_Position(int value);
    public abstract virtual IXLPageSetup get_PageSetup();
    public abstract virtual IXLOutline get_Outline();
    public abstract virtual IXLRow FirstRow();
    public abstract virtual IXLRow FirstRowUsed();
    public abstract virtual IXLRow FirstRowUsed(XLCellsUsedOptions options);
    public abstract virtual IXLRow LastRow();
    public abstract virtual IXLRow LastRowUsed();
    public abstract virtual IXLRow LastRowUsed(XLCellsUsedOptions options);
    public abstract virtual IXLColumn FirstColumn();
    public abstract virtual IXLColumn FirstColumnUsed();
    public abstract virtual IXLColumn FirstColumnUsed(XLCellsUsedOptions options);
    public abstract virtual IXLColumn LastColumn();
    public abstract virtual IXLColumn LastColumnUsed();
    public abstract virtual IXLColumn LastColumnUsed(XLCellsUsedOptions options);
    public abstract virtual IXLColumns Columns();
    public abstract virtual IXLColumns Columns(string columns);
    public abstract virtual IXLColumns Columns(string firstColumn, string lastColumn);
    public abstract virtual IXLColumns Columns(int firstColumn, int lastColumn);
    public abstract virtual IXLRows Rows();
    public abstract virtual IXLRows Rows(string rows);
    public abstract virtual IXLRows Rows(int firstRow, int lastRow);
    public abstract virtual IXLRow Row(int row);
    public abstract virtual IXLColumn Column(int column);
    public abstract virtual IXLColumn Column(string column);
    public abstract virtual IXLCell Cell(int row, int column);
    public abstract virtual IXLCell Cell(string cellAddressInRange);
    public abstract virtual IXLCell Cell(int row, string column);
    public abstract virtual IXLCell Cell(IXLAddress cellAddressInRange);
    public abstract virtual IXLRange Range(IXLRangeAddress rangeAddress);
    public abstract virtual IXLRange Range(string rangeAddress);
    public abstract virtual IXLRange Range(IXLCell firstCell, IXLCell lastCell);
    public abstract virtual IXLRange Range(string firstCellAddress, string lastCellAddress);
    public abstract virtual IXLRange Range(IXLAddress firstCellAddress, IXLAddress lastCellAddress);
    public abstract virtual IXLRanges Ranges(string ranges);
    public abstract virtual IXLRange Range(int firstCellRow, int firstCellColumn, int lastCellRow, int lastCellColumn);
    public abstract virtual int RowCount();
    public abstract virtual int ColumnCount();
    public abstract virtual IXLWorksheet CollapseRows();
    public abstract virtual IXLWorksheet CollapseColumns();
    public abstract virtual IXLWorksheet ExpandRows();
    public abstract virtual IXLWorksheet ExpandColumns();
    public abstract virtual IXLWorksheet CollapseRows(int outlineLevel);
    public abstract virtual IXLWorksheet CollapseColumns(int outlineLevel);
    public abstract virtual IXLWorksheet ExpandRows(int outlineLevel);
    public abstract virtual IXLWorksheet ExpandColumns(int outlineLevel);
    public abstract virtual void Delete();
    public abstract virtual IXLNamedRanges get_NamedRanges();
    public abstract virtual IXLNamedRange NamedRange(string rangeName);
    public abstract virtual IXLSheetView get_SheetView();
    public abstract virtual IXLTable Table(int index);
    public abstract virtual IXLTable Table(string name);
    public abstract virtual IXLTables get_Tables();
    public abstract virtual IXLWorksheet CopyTo(string newSheetName);
    public abstract virtual IXLWorksheet CopyTo(string newSheetName, int position);
    public abstract virtual IXLWorksheet CopyTo(XLWorkbook workbook);
    public abstract virtual IXLWorksheet CopyTo(XLWorkbook workbook, string newSheetName);
    public abstract virtual IXLWorksheet CopyTo(XLWorkbook workbook, string newSheetName, int position);
    public abstract virtual IXLRange RangeUsed();
    public abstract virtual IXLRange RangeUsed(XLCellsUsedOptions options);
    public abstract virtual IXLDataValidations get_DataValidations();
    public abstract virtual XLWorksheetVisibility get_Visibility();
    public abstract virtual void set_Visibility(XLWorksheetVisibility value);
    public abstract virtual IXLWorksheet Hide();
    public abstract virtual IXLWorksheet Unhide();
    public abstract virtual IXLSortElements get_SortRows();
    public abstract virtual IXLSortElements get_SortColumns();
    public abstract virtual IXLRange Sort();
    public abstract virtual IXLRange Sort(string columnsToSortBy, XLSortOrder sortOrder, bool matchCase, bool ignoreBlanks);
    public abstract virtual IXLRange Sort(int columnToSortBy, XLSortOrder sortOrder, bool matchCase, bool ignoreBlanks);
    public abstract virtual IXLRange SortLeftToRight(XLSortOrder sortOrder, bool matchCase, bool ignoreBlanks);
    public abstract virtual bool get_ShowFormulas();
    public abstract virtual void set_ShowFormulas(bool value);
    public abstract virtual bool get_ShowGridLines();
    public abstract virtual void set_ShowGridLines(bool value);
    public abstract virtual bool get_ShowOutlineSymbols();
    public abstract virtual void set_ShowOutlineSymbols(bool value);
    public abstract virtual bool get_ShowRowColHeaders();
    public abstract virtual void set_ShowRowColHeaders(bool value);
    public abstract virtual bool get_ShowRuler();
    public abstract virtual void set_ShowRuler(bool value);
    public abstract virtual bool get_ShowWhiteSpace();
    public abstract virtual void set_ShowWhiteSpace(bool value);
    public abstract virtual bool get_ShowZeros();
    public abstract virtual void set_ShowZeros(bool value);
    public abstract virtual IXLWorksheet SetShowFormulas();
    public abstract virtual IXLWorksheet SetShowFormulas(bool value);
    public abstract virtual IXLWorksheet SetShowGridLines();
    public abstract virtual IXLWorksheet SetShowGridLines(bool value);
    public abstract virtual IXLWorksheet SetShowOutlineSymbols();
    public abstract virtual IXLWorksheet SetShowOutlineSymbols(bool value);
    public abstract virtual IXLWorksheet SetShowRowColHeaders();
    public abstract virtual IXLWorksheet SetShowRowColHeaders(bool value);
    public abstract virtual IXLWorksheet SetShowRuler();
    public abstract virtual IXLWorksheet SetShowRuler(bool value);
    public abstract virtual IXLWorksheet SetShowWhiteSpace();
    public abstract virtual IXLWorksheet SetShowWhiteSpace(bool value);
    public abstract virtual IXLWorksheet SetShowZeros();
    public abstract virtual IXLWorksheet SetShowZeros(bool value);
    public abstract virtual XLColor get_TabColor();
    public abstract virtual void set_TabColor(XLColor value);
    public abstract virtual IXLWorksheet SetTabColor(XLColor color);
    public abstract virtual bool get_TabSelected();
    public abstract virtual void set_TabSelected(bool value);
    public abstract virtual bool get_TabActive();
    public abstract virtual void set_TabActive(bool value);
    public abstract virtual IXLWorksheet SetTabSelected();
    public abstract virtual IXLWorksheet SetTabSelected(bool value);
    public abstract virtual IXLWorksheet SetTabActive();
    public abstract virtual IXLWorksheet SetTabActive(bool value);
    public abstract virtual IXLPivotTable PivotTable(string name);
    public abstract virtual IXLPivotTables get_PivotTables();
    public abstract virtual bool get_RightToLeft();
    public abstract virtual void set_RightToLeft(bool value);
    public abstract virtual IXLWorksheet SetRightToLeft();
    public abstract virtual IXLWorksheet SetRightToLeft(bool value);
    public abstract virtual IXLAutoFilter get_AutoFilter();
    public abstract virtual IXLRows RowsUsed(XLCellsUsedOptions options, Func`2<IXLRow, bool> predicate);
    public abstract virtual IXLRows RowsUsed(Func`2<IXLRow, bool> predicate);
    public abstract virtual IXLColumns ColumnsUsed(XLCellsUsedOptions options, Func`2<IXLColumn, bool> predicate);
    public abstract virtual IXLColumns ColumnsUsed(Func`2<IXLColumn, bool> predicate);
    public abstract virtual IXLRanges get_MergedRanges();
    public abstract virtual IXLConditionalFormats get_ConditionalFormats();
    public abstract virtual IXLSparklineGroups get_SparklineGroups();
    public abstract virtual IXLRanges get_SelectedRanges();
    public abstract virtual IXLCell get_ActiveCell();
    public abstract virtual void set_ActiveCell(IXLCell value);
    public abstract virtual XLCellValue Evaluate(string expression, string formulaAddress);
    public abstract virtual void RecalculateAllFormulas();
    public abstract virtual string get_Author();
    public abstract virtual void set_Author(string value);
    public abstract virtual IXLPictures get_Pictures();
    public abstract virtual IXLPicture Picture(string pictureName);
    public abstract virtual IXLPicture AddPicture(Stream stream);
    public abstract virtual IXLPicture AddPicture(Stream stream, string name);
    public abstract virtual IXLPicture AddPicture(Stream stream, XLPictureFormat format);
    public abstract virtual IXLPicture AddPicture(Stream stream, XLPictureFormat format, string name);
    public abstract virtual IXLPicture AddPicture(string imageFile);
    public abstract virtual IXLPicture AddPicture(string imageFile, string name);
}
public interface ClosedXML.Excel.IXLWorksheets {
    public int Count { get; }
    public abstract virtual int get_Count();
    public abstract virtual IXLWorksheet Add();
    public abstract virtual IXLWorksheet Add(int position);
    public abstract virtual IXLWorksheet Add(string sheetName);
    public abstract virtual IXLWorksheet Add(string sheetName, int position);
    public abstract virtual IXLWorksheet Add(DataTable dataTable);
    public abstract virtual IXLWorksheet Add(DataTable dataTable, string sheetName);
    public abstract virtual IXLWorksheet Add(DataTable dataTable, string sheetName, string tableName);
    public abstract virtual void Add(DataSet dataSet);
    public abstract virtual bool Contains(string sheetName);
    public abstract virtual void Delete(string sheetName);
    public abstract virtual void Delete(int position);
    public abstract virtual bool TryGetWorksheet(string sheetName, IXLWorksheet& worksheet);
    public abstract virtual IXLWorksheet Worksheet(string sheetName);
    public abstract virtual IXLWorksheet Worksheet(int position);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class ClosedXML.Excel.LoadOptions : object {
    private Point _dpi;
    [CompilerGeneratedAttribute]
private static IXLGraphicEngine <DefaultGraphicEngine>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RecalculateAllFormulas>k__BackingField;
    [CompilerGeneratedAttribute]
private IXLGraphicEngine <GraphicEngine>k__BackingField;
    internal static IXLGraphicEngine DefaultGraphicEngine { get; public set; }
    public bool RecalculateAllFormulas { get; public set; }
    public IXLGraphicEngine GraphicEngine { get; public set; }
    public Point Dpi { get; public set; }
    [CompilerGeneratedAttribute]
internal static IXLGraphicEngine get_DefaultGraphicEngine();
    [CompilerGeneratedAttribute]
public static void set_DefaultGraphicEngine(IXLGraphicEngine value);
    [CompilerGeneratedAttribute]
public bool get_RecalculateAllFormulas();
    [CompilerGeneratedAttribute]
public void set_RecalculateAllFormulas(bool value);
    [CompilerGeneratedAttribute]
public IXLGraphicEngine get_GraphicEngine();
    [CompilerGeneratedAttribute]
public void set_GraphicEngine(IXLGraphicEngine value);
    public Point get_Dpi();
    public void set_Dpi(Point value);
}
[ExtensionAttribute]
internal static class ClosedXML.Excel.ObjectExtensions : object {
    [ExtensionAttribute]
public static T CastTo(object o);
    [ExtensionAttribute]
public static bool IsNumber(object value);
    [ExtensionAttribute]
public static string ToInvariantString(T value);
    [ExtensionAttribute]
public static string ObjectToInvariantString(object value);
}
internal class ClosedXML.Excel.Patterns.Quadrant : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<Quadrant> <Children>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <Level>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MinimumColumn>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MinimumRow>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaximumColumn>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaximumRow>k__BackingField;
    [CompilerGeneratedAttribute]
private short <X>k__BackingField;
    [CompilerGeneratedAttribute]
private short <Y>k__BackingField;
    private static byte MAX_LEVEL;
    private Dictionary`2<IXLRangeAddress, IXLAddressable> _ranges;
    public IEnumerable`1<Quadrant> Children { get; private set; }
    public byte Level { get; }
    public int MinimumColumn { get; }
    public int MinimumRow { get; }
    public int MaximumColumn { get; }
    public int MaximumRow { get; }
    public IEnumerable`1<IXLAddressable> Ranges { get; }
    public short X { get; private set; }
    public short Y { get; private set; }
    private Quadrant(byte level, short x, short y);
    [CompilerGeneratedAttribute]
public IEnumerable`1<Quadrant> get_Children();
    [CompilerGeneratedAttribute]
private void set_Children(IEnumerable`1<Quadrant> value);
    [CompilerGeneratedAttribute]
public byte get_Level();
    [CompilerGeneratedAttribute]
public int get_MinimumColumn();
    [CompilerGeneratedAttribute]
public int get_MinimumRow();
    [CompilerGeneratedAttribute]
public int get_MaximumColumn();
    [CompilerGeneratedAttribute]
public int get_MaximumRow();
    public IEnumerable`1<IXLAddressable> get_Ranges();
    [CompilerGeneratedAttribute]
public short get_X();
    [CompilerGeneratedAttribute]
private void set_X(short value);
    [CompilerGeneratedAttribute]
public short get_Y();
    [CompilerGeneratedAttribute]
private void set_Y(short value);
    public bool Add(IXLAddressable range);
    [IteratorStateMachineAttribute("ClosedXML.Excel.Patterns.Quadrant/<GetAll>d__32")]
public IEnumerable`1<IXLAddressable> GetAll();
    [IteratorStateMachineAttribute("ClosedXML.Excel.Patterns.Quadrant/<GetIntersectedRanges>d__33")]
public IEnumerable`1<IXLAddressable> GetIntersectedRanges(IXLRangeAddress rangeAddress);
    [IteratorStateMachineAttribute("ClosedXML.Excel.Patterns.Quadrant/<GetIntersectedRanges>d__34")]
public IEnumerable`1<IXLAddressable> GetIntersectedRanges(IXLAddress address);
    public bool Remove(IXLRangeAddress rangeAddress);
    [IteratorStateMachineAttribute("ClosedXML.Excel.Patterns.Quadrant/<RemoveAll>d__36")]
public IEnumerable`1<IXLAddressable> RemoveAll(Predicate`1<IXLAddressable> predicate);
    private bool AddInternal(IXLAddressable range);
    private bool Covers(IXLRangeAddress& rangeAddress);
    private bool Covers(IXLAddress& address);
    private bool Intersects(IXLRangeAddress& rangeAddress);
    [IteratorStateMachineAttribute("ClosedXML.Excel.Patterns.Quadrant/<CreateChildren>d__43")]
private IEnumerable`1<Quadrant> CreateChildren();
}
internal class ClosedXML.Excel.Patterns.Quadrant`1 : Quadrant {
    public IEnumerable`1<T> Ranges { get; }
    public IEnumerable`1<T> get_Ranges();
    public bool Add(T range);
    public IEnumerable`1<T> GetAll();
    public IEnumerable`1<T> GetIntersectedRanges(IXLRangeAddress rangeAddress);
    public IEnumerable`1<T> GetIntersectedRanges(IXLAddress address);
    public bool Remove(T range);
    public IEnumerable`1<T> RemoveAll(Predicate`1<T> predicate);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class ClosedXML.Excel.PivotLabelFieldReference : AbstractPivotFieldReference {
    [NullableAttribute("2")]
private Predicate`1<XLCellValue> _predicate;
    [CompilerGeneratedAttribute]
private IXLPivotField <PivotField>k__BackingField;
    public IXLPivotField PivotField { get; public set; }
    public PivotLabelFieldReference(IXLPivotField pivotField);
    public PivotLabelFieldReference(IXLPivotField pivotField, Predicate`1<XLCellValue> predicate);
    [CompilerGeneratedAttribute]
public IXLPivotField get_PivotField();
    [CompilerGeneratedAttribute]
public void set_PivotField(IXLPivotField value);
    internal virtual UInt32Value GetFieldOffset();
    internal virtual IEnumerable`1<int> Match(PivotSourceInfo psi, IXLPivotTable pt);
}
internal class ClosedXML.Excel.PivotValueFieldReference : AbstractPivotFieldReference {
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public string Value { get; }
    public PivotValueFieldReference(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    internal virtual UInt32Value GetFieldOffset();
    internal virtual IEnumerable`1<int> Match(PivotSourceInfo psi, IXLPivotTable pt);
}
internal class ClosedXML.Excel.RangeEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private IXLRange <Range>k__BackingField;
    public IXLRange Range { get; }
    public RangeEventArgs(IXLRange range);
    [CompilerGeneratedAttribute]
public IXLRange get_Range();
}
[NullableContextAttribute("1")]
internal interface ClosedXML.Excel.Ranges.Index.IXLRangeIndex {
    public abstract virtual bool Add(IXLAddressable range);
    public abstract virtual bool Remove(IXLRangeAddress rangeAddress);
    public abstract virtual int RemoveAll(Predicate`1<IXLAddressable> predicate);
    public abstract virtual IEnumerable`1<IXLAddressable> GetIntersectedRanges(XLRangeAddress rangeAddress);
    public abstract virtual IEnumerable`1<IXLAddressable> GetIntersectedRanges(XLAddress address);
    public abstract virtual IEnumerable`1<IXLAddressable> GetAll();
    public abstract virtual bool Intersects(XLRangeAddress& modreq(System.Runtime.InteropServices.InAttribute) rangeAddress);
    public abstract virtual bool Contains(XLAddress& modreq(System.Runtime.InteropServices.InAttribute) address);
    public abstract virtual bool MatchesType(XLRangeType rangeType);
}
[NullableContextAttribute("1")]
internal interface ClosedXML.Excel.Ranges.Index.IXLRangeIndex`1 {
    public abstract virtual bool Add(T range);
    public abstract virtual int RemoveAll(Predicate`1<T> predicate);
    public abstract virtual IEnumerable`1<T> GetIntersectedRanges(XLRangeAddress rangeAddress);
    public abstract virtual IEnumerable`1<T> GetIntersectedRanges(XLAddress address);
    public abstract virtual IEnumerable`1<T> GetAll();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class ClosedXML.Excel.Ranges.Index.XLRangeIndex : object {
    private static int MinimumCountForIndexing;
    protected List`1<IXLAddressable> _rangeList;
    private IXLWorksheet _worksheet;
    private int _count;
    [NullableAttribute("2")]
protected Quadrant _quadTree;
    public XLRangeIndex(IXLWorksheet worksheet);
    public abstract virtual bool MatchesType(XLRangeType rangeType);
    public sealed virtual bool Add(IXLAddressable range);
    public bool Contains(XLAddress& address);
    public sealed virtual IEnumerable`1<IXLAddressable> GetAll();
    public sealed virtual IEnumerable`1<IXLAddressable> GetIntersectedRanges(XLRangeAddress rangeAddress);
    public sealed virtual IEnumerable`1<IXLAddressable> GetIntersectedRanges(XLAddress address);
    public bool Intersects(XLRangeAddress& rangeAddress);
    public sealed virtual bool Remove(IXLRangeAddress rangeAddress);
    public sealed virtual int RemoveAll(Predicate`1<IXLAddressable> predicate);
    [NullableContextAttribute("2")]
private void CheckWorksheet(IXLWorksheet worksheet);
    private void InitializeTree();
    protected virtual Quadrant CreateQuadTree();
    private sealed virtual override bool ClosedXML.Excel.Ranges.Index.IXLRangeIndex.Intersects(XLRangeAddress& modreq(System.Runtime.InteropServices.InAttribute) rangeAddress);
    private sealed virtual override bool ClosedXML.Excel.Ranges.Index.IXLRangeIndex.Contains(XLAddress& modreq(System.Runtime.InteropServices.InAttribute) address);
    [CompilerGeneratedAttribute]
private void <InitializeTree>b__16_0(IXLAddressable r);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class ClosedXML.Excel.Ranges.Index.XLRangeIndex`1 : XLRangeIndex {
    public XLRangeIndex`1(IXLWorksheet worksheet);
    public sealed virtual bool Add(T range);
    public sealed virtual int RemoveAll(Predicate`1<T> predicate);
    public sealed virtual IEnumerable`1<T> GetIntersectedRanges(XLRangeAddress rangeAddress);
    public sealed virtual IEnumerable`1<T> GetIntersectedRanges(XLAddress address);
    public virtual bool MatchesType(XLRangeType rangeType);
    public sealed virtual IEnumerable`1<T> GetAll();
    protected virtual Quadrant CreateQuadTree();
    private sealed virtual override bool ClosedXML.Excel.Ranges.Index.IXLRangeIndex.Intersects(XLRangeAddress& modreq(System.Runtime.InteropServices.InAttribute) rangeAddress);
    private sealed virtual override bool ClosedXML.Excel.Ranges.Index.IXLRangeIndex.Contains(XLAddress& modreq(System.Runtime.InteropServices.InAttribute) address);
}
public class ClosedXML.Excel.SaveOptions : object {
    [CompilerGeneratedAttribute]
private bool <ConsolidateConditionalFormatRanges>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ConsolidateDataValidationRanges>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EvaluateFormulasBeforeSaving>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <FilterPrivacy>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <GenerateCalculationChain>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ValidatePackage>k__BackingField;
    public bool ConsolidateConditionalFormatRanges { get; public set; }
    public bool ConsolidateDataValidationRanges { get; public set; }
    public bool EvaluateFormulasBeforeSaving { get; public set; }
    public Nullable`1<bool> FilterPrivacy { get; public set; }
    public bool GenerateCalculationChain { get; public set; }
    public bool ValidatePackage { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_ConsolidateConditionalFormatRanges();
    [CompilerGeneratedAttribute]
public void set_ConsolidateConditionalFormatRanges(bool value);
    [CompilerGeneratedAttribute]
public bool get_ConsolidateDataValidationRanges();
    [CompilerGeneratedAttribute]
public void set_ConsolidateDataValidationRanges(bool value);
    [CompilerGeneratedAttribute]
public bool get_EvaluateFormulasBeforeSaving();
    [CompilerGeneratedAttribute]
public void set_EvaluateFormulasBeforeSaving(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_FilterPrivacy();
    [CompilerGeneratedAttribute]
public void set_FilterPrivacy(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public bool get_GenerateCalculationChain();
    [CompilerGeneratedAttribute]
public void set_GenerateCalculationChain(bool value);
    [CompilerGeneratedAttribute]
public bool get_ValidatePackage();
    [CompilerGeneratedAttribute]
public void set_ValidatePackage(bool value);
}
[DefaultMemberAttribute("Item")]
internal class ClosedXML.Excel.Slice`1 : object {
    private static Lut`1<TElement, TElement> Dummy;
    private TElement _defaultValue;
    private Lut`1<TElement, Lut`1<TElement, TElement>> _data;
    private Dictionary`2<int, int> _columnUsage;
    [CompilerGeneratedAttribute]
private int <MaxColumn>k__BackingField;
    [IsReadOnlyAttribute]
internal TElement& modreq(System.Runtime.InteropServices.InAttribute) Item { get; }
    [IsReadOnlyAttribute]
internal TElement& modreq(System.Runtime.InteropServices.InAttribute) Item { get; }
    public bool IsEmpty { get; }
    public int MaxColumn { get; private set; }
    public int MaxRow { get; }
    public IEnumerable`1<int> UsedRows { get; }
    public KeyCollection<int, int> UsedColumns { get; }
    private static Slice`1();
    internal TElement& modreq(System.Runtime.InteropServices.InAttribute) get_Item(XLSheetPoint point);
    internal TElement& modreq(System.Runtime.InteropServices.InAttribute) get_Item(int row, int column);
    public sealed virtual bool get_IsEmpty();
    [CompilerGeneratedAttribute]
public sealed virtual int get_MaxColumn();
    [CompilerGeneratedAttribute]
private void set_MaxColumn(int value);
    public sealed virtual int get_MaxRow();
    [IteratorStateMachineAttribute("ClosedXML.Excel.Slice`1/<get_UsedRows>d__18")]
public sealed virtual IEnumerable`1<int> get_UsedRows();
    public sealed virtual KeyCollection<int, int> get_UsedColumns();
    public sealed virtual void Clear(XLSheetRange range);
    public sealed virtual void DeleteAreaAndShiftLeft(XLSheetRange rangeToDelete);
    public sealed virtual void DeleteAreaAndShiftUp(XLSheetRange rangeToDelete);
    internal IEnumerator`1<XLSheetPoint> GetEnumerator(XLSheetRange range, bool reverse);
    public sealed virtual void InsertAreaAndShiftDown(XLSheetRange range);
    public sealed virtual void InsertAreaAndShiftRight(XLSheetRange range);
    public sealed virtual bool IsUsed(XLSheetPoint address);
    internal void Set(XLSheetPoint point, TElement& value);
    internal void Set(int row, int column, TElement& value);
    private int CalculateMaxColumn();
    private int DecrementColumnUsage(int column);
    private void IncrementColumnUsage(int column);
}
[ExtensionAttribute]
internal static class ClosedXML.Excel.StringExtensions : object {
    private static Regex RegexNewLine;
    private static StringExtensions();
    [ExtensionAttribute]
public static int CharCount(string instance, char c);
    [ExtensionAttribute]
public static string RemoveSpecialCharacters(string str);
    [ExtensionAttribute]
internal static string EscapeSheetName(string sheetName);
    [ExtensionAttribute]
internal static string FixNewLines(string value);
    [ExtensionAttribute]
internal static bool PreserveSpaces(string value);
    [ExtensionAttribute]
internal static string ToCamel(string value);
    [ExtensionAttribute]
internal static string ToProper(string value);
    [ExtensionAttribute]
internal static string UnescapeSheetName(string sheetName);
    [ExtensionAttribute]
internal static string WithoutLast(string value, int length);
    [ExtensionAttribute]
internal static int ToCodePoints(ReadOnlySpan`1<char> text, Span`1<int> output);
    [ExtensionAttribute]
internal static bool TrySliceNewLine(ReadOnlySpan`1<char> text, Int32& length);
    [ExtensionAttribute]
internal static UInt32 ToMagicNumber(string magic);
}
internal class ClosedXML.Excel.TableNameGenerator : object {
    [NullableContextAttribute("1")]
internal static string GetNewTableName(IXLWorkbook workbook, string baseTableName);
}
[ExtensionAttribute]
internal static class ClosedXML.Excel.TimeSpanExtensions : object {
    [ExtensionAttribute]
public static double ToSerialDateTime(TimeSpan time);
    [ExtensionAttribute]
public static string ToExcelString(TimeSpan ts, CultureInfo culture);
}
[ExtensionAttribute]
internal static class ClosedXML.Excel.TypeExtensions : object {
    [ExtensionAttribute]
public static Type GetUnderlyingType(Type type);
    [ExtensionAttribute]
public static bool IsNullableType(Type type);
    [ExtensionAttribute]
public static bool IsNumber(Type type);
    [ExtensionAttribute]
public static bool IsSimpleType(Type type);
}
internal static class ClosedXML.Excel.XDocumentExtensions : object {
    [NullableContextAttribute("1")]
public static XDocument Load(Stream stream);
}
internal class ClosedXML.Excel.XLAddress : ValueType {
    [DebuggerBrowsableAttribute("0")]
private bool _fixedRow;
    [DebuggerBrowsableAttribute("0")]
private bool _fixedColumn;
    [DebuggerBrowsableAttribute("0")]
private int _rowNumber;
    [DebuggerBrowsableAttribute("0")]
private int _columnNumber;
    private string _trimmedAddress;
    [CompilerGeneratedAttribute]
private XLWorksheet <Worksheet>k__BackingField;
    public XLWorksheet Worksheet { get; internal set; }
    private IXLWorksheet ClosedXML.Excel.IXLAddress.Worksheet { get; }
    public bool HasWorksheet { get; }
    public bool FixedRow { get; }
    public bool FixedColumn { get; }
    public int RowNumber { get; }
    public int ColumnNumber { get; }
    public string ColumnLetter { get; }
    public string UniqueId { get; }
    public bool IsValid { get; }
    private bool WorksheetIsDeleted { get; }
    public XLAddress(int rowNumber, string columnLetter, bool fixedRow, bool fixedColumn);
    public XLAddress(XLWorksheet worksheet, int rowNumber, string columnLetter, bool fixedRow, bool fixedColumn);
    public XLAddress(int rowNumber, int columnNumber, bool fixedRow, bool fixedColumn);
    public XLAddress(XLWorksheet worksheet, int rowNumber, int columnNumber, bool fixedRow, bool fixedColumn);
    public static XLAddress Create(string cellAddressString);
    public static XLAddress Create(XLWorksheet worksheet, string cellAddressString);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public XLWorksheet get_Worksheet();
    [CompilerGeneratedAttribute]
internal void set_Worksheet(XLWorksheet value);
    [DebuggerStepThroughAttribute]
private sealed virtual override IXLWorksheet ClosedXML.Excel.IXLAddress.get_Worksheet();
    [DebuggerStepThroughAttribute]
public bool get_HasWorksheet();
    public sealed virtual bool get_FixedRow();
    public sealed virtual bool get_FixedColumn();
    public sealed virtual int get_RowNumber();
    public sealed virtual int get_ColumnNumber();
    public sealed virtual string get_ColumnLetter();
    public virtual string ToString();
    public sealed virtual string ToString(XLReferenceStyle referenceStyle);
    public sealed virtual string ToString(XLReferenceStyle referenceStyle, bool includeSheet);
    public string GetTrimmedAddress();
    public static XLAddress op_Addition(XLAddress left, XLAddress right);
    public static XLAddress op_Subtraction(XLAddress left, XLAddress right);
    public static XLAddress op_Addition(XLAddress left, int right);
    public static XLAddress op_Subtraction(XLAddress left, int right);
    public static bool op_Equality(XLAddress left, XLAddress right);
    public static bool op_Inequality(XLAddress left, XLAddress right);
    public sealed virtual bool Equals(IXLAddress x, IXLAddress y);
    public bool Equals(object x, object y);
    public sealed virtual bool Equals(IXLAddress other);
    public sealed virtual bool Equals(XLAddress other);
    public virtual bool Equals(object other);
    public virtual int GetHashCode();
    public sealed virtual int GetHashCode(IXLAddress obj);
    public sealed virtual string ToStringRelative();
    public sealed virtual string ToStringFixed();
    public sealed virtual string ToStringRelative(bool includeSheet);
    internal XLAddress WithoutWorksheet();
    internal XLAddress WithWorksheet(XLWorksheet worksheet);
    public sealed virtual string ToStringFixed(XLReferenceStyle referenceStyle);
    public sealed virtual string ToStringFixed(XLReferenceStyle referenceStyle, bool includeSheet);
    public sealed virtual string get_UniqueId();
    public bool get_IsValid();
    private bool get_WorksheetIsDeleted();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class ClosedXML.Excel.XLAlignment : object {
    private XLStyle _style;
    private XLAlignmentValue _value;
    internal XLAlignmentKey Key { get; private set; }
    public XLAlignmentHorizontalValues Horizontal { get; public set; }
    public XLAlignmentVerticalValues Vertical { get; public set; }
    public int Indent { get; public set; }
    public bool JustifyLastLine { get; public set; }
    public XLAlignmentReadingOrderValues ReadingOrder { get; public set; }
    public int RelativeIndent { get; public set; }
    public bool ShrinkToFit { get; public set; }
    public int TextRotation { get; public set; }
    public bool WrapText { get; public set; }
    public bool TopToBottom { get; public set; }
    public XLAlignment(XLStyle style, XLAlignmentValue value);
    [NullableContextAttribute("2")]
public XLAlignment(XLStyle style, XLAlignmentKey key);
    [NullableContextAttribute("2")]
public XLAlignment(XLStyle style, IXLAlignment d);
    [NullableContextAttribute("2")]
internal static XLAlignmentKey GenerateKey(IXLAlignment d);
    internal XLAlignmentKey get_Key();
    private void set_Key(XLAlignmentKey value);
    public sealed virtual XLAlignmentHorizontalValues get_Horizontal();
    public sealed virtual void set_Horizontal(XLAlignmentHorizontalValues value);
    public sealed virtual XLAlignmentVerticalValues get_Vertical();
    public sealed virtual void set_Vertical(XLAlignmentVerticalValues value);
    public sealed virtual int get_Indent();
    public sealed virtual void set_Indent(int value);
    public sealed virtual bool get_JustifyLastLine();
    public sealed virtual void set_JustifyLastLine(bool value);
    public sealed virtual XLAlignmentReadingOrderValues get_ReadingOrder();
    public sealed virtual void set_ReadingOrder(XLAlignmentReadingOrderValues value);
    public sealed virtual int get_RelativeIndent();
    public sealed virtual void set_RelativeIndent(int value);
    public sealed virtual bool get_ShrinkToFit();
    public sealed virtual void set_ShrinkToFit(bool value);
    public sealed virtual int get_TextRotation();
    public sealed virtual void set_TextRotation(int value);
    public sealed virtual bool get_WrapText();
    public sealed virtual void set_WrapText(bool value);
    public sealed virtual bool get_TopToBottom();
    public sealed virtual void set_TopToBottom(bool value);
    public sealed virtual IXLStyle SetHorizontal(XLAlignmentHorizontalValues value);
    public sealed virtual IXLStyle SetVertical(XLAlignmentVerticalValues value);
    public sealed virtual IXLStyle SetIndent(int value);
    public sealed virtual IXLStyle SetJustifyLastLine();
    public sealed virtual IXLStyle SetJustifyLastLine(bool value);
    public sealed virtual IXLStyle SetReadingOrder(XLAlignmentReadingOrderValues value);
    public sealed virtual IXLStyle SetRelativeIndent(int value);
    public sealed virtual IXLStyle SetShrinkToFit();
    public sealed virtual IXLStyle SetShrinkToFit(bool value);
    public sealed virtual IXLStyle SetTextRotation(int value);
    public sealed virtual IXLStyle SetWrapText();
    public sealed virtual IXLStyle SetWrapText(bool value);
    public sealed virtual IXLStyle SetTopToBottom();
    public sealed virtual IXLStyle SetTopToBottom(bool value);
    private void Modify(Func`2<XLAlignmentKey, XLAlignmentKey> modification);
    public virtual string ToString();
    public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(IXLAlignment other);
    public virtual int GetHashCode();
}
public enum ClosedXML.Excel.XLAlignmentHorizontalValues : Enum {
    public byte value__;
    public static XLAlignmentHorizontalValues Center;
    public static XLAlignmentHorizontalValues CenterContinuous;
    public static XLAlignmentHorizontalValues Distributed;
    public static XLAlignmentHorizontalValues Fill;
    public static XLAlignmentHorizontalValues General;
    public static XLAlignmentHorizontalValues Justify;
    public static XLAlignmentHorizontalValues Left;
    public static XLAlignmentHorizontalValues Right;
}
public class ClosedXML.Excel.XLAlignmentKey : ValueType {
    [CompilerGeneratedAttribute]
private XLAlignmentHorizontalValues <Horizontal>k__BackingField;
    [CompilerGeneratedAttribute]
private XLAlignmentVerticalValues <Vertical>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Indent>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <JustifyLastLine>k__BackingField;
    [CompilerGeneratedAttribute]
private XLAlignmentReadingOrderValues <ReadingOrder>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RelativeIndent>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShrinkToFit>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TextRotation>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <WrapText>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TopToBottom>k__BackingField;
    public XLAlignmentHorizontalValues Horizontal { get; public set; }
    public XLAlignmentVerticalValues Vertical { get; public set; }
    public int Indent { get; public set; }
    public bool JustifyLastLine { get; public set; }
    public XLAlignmentReadingOrderValues ReadingOrder { get; public set; }
    public int RelativeIndent { get; public set; }
    public bool ShrinkToFit { get; public set; }
    public int TextRotation { get; public set; }
    public bool WrapText { get; public set; }
    public bool TopToBottom { get; public set; }
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public XLAlignmentHorizontalValues get_Horizontal();
    [CompilerGeneratedAttribute]
public void set_Horizontal(XLAlignmentHorizontalValues value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public XLAlignmentVerticalValues get_Vertical();
    [CompilerGeneratedAttribute]
public void set_Vertical(XLAlignmentVerticalValues value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_Indent();
    [CompilerGeneratedAttribute]
public void set_Indent(int value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_JustifyLastLine();
    [CompilerGeneratedAttribute]
public void set_JustifyLastLine(bool value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public XLAlignmentReadingOrderValues get_ReadingOrder();
    [CompilerGeneratedAttribute]
public void set_ReadingOrder(XLAlignmentReadingOrderValues value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_RelativeIndent();
    [CompilerGeneratedAttribute]
public void set_RelativeIndent(int value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_ShrinkToFit();
    [CompilerGeneratedAttribute]
public void set_ShrinkToFit(bool value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_TextRotation();
    [CompilerGeneratedAttribute]
public void set_TextRotation(int value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_WrapText();
    [CompilerGeneratedAttribute]
public void set_WrapText(bool value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_TopToBottom();
    [CompilerGeneratedAttribute]
public void set_TopToBottom(bool value);
    public sealed virtual bool Equals(XLAlignmentKey other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public static bool op_Equality(XLAlignmentKey left, XLAlignmentKey right);
    public static bool op_Inequality(XLAlignmentKey left, XLAlignmentKey right);
}
public enum ClosedXML.Excel.XLAlignmentReadingOrderValues : Enum {
    public byte value__;
    public static XLAlignmentReadingOrderValues ContextDependent;
    public static XLAlignmentReadingOrderValues LeftToRight;
    public static XLAlignmentReadingOrderValues RightToLeft;
}
public class ClosedXML.Excel.XLAlignmentValue : object {
    private static XLAlignmentRepository Repository;
    private static XLAlignmentKey DefaultKey;
    internal static XLAlignmentValue Default;
    [CompilerGeneratedAttribute]
private XLAlignmentKey <Key>k__BackingField;
    public XLAlignmentKey Key { get; private set; }
    public XLAlignmentHorizontalValues Horizontal { get; }
    public XLAlignmentVerticalValues Vertical { get; }
    public int Indent { get; }
    public bool JustifyLastLine { get; }
    public XLAlignmentReadingOrderValues ReadingOrder { get; }
    public int RelativeIndent { get; }
    public bool ShrinkToFit { get; }
    public int TextRotation { get; }
    public bool WrapText { get; }
    public bool TopToBottom { get; }
    private XLAlignmentValue(XLAlignmentKey key);
    private static XLAlignmentValue();
    public static XLAlignmentValue FromKey(XLAlignmentKey& key);
    [CompilerGeneratedAttribute]
public XLAlignmentKey get_Key();
    [CompilerGeneratedAttribute]
private void set_Key(XLAlignmentKey value);
    public XLAlignmentHorizontalValues get_Horizontal();
    public XLAlignmentVerticalValues get_Vertical();
    public int get_Indent();
    public bool get_JustifyLastLine();
    public XLAlignmentReadingOrderValues get_ReadingOrder();
    public int get_RelativeIndent();
    public bool get_ShrinkToFit();
    public int get_TextRotation();
    public bool get_WrapText();
    public bool get_TopToBottom();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public enum ClosedXML.Excel.XLAlignmentVerticalValues : Enum {
    public byte value__;
    public static XLAlignmentVerticalValues Bottom;
    public static XLAlignmentVerticalValues Center;
    public static XLAlignmentVerticalValues Distributed;
    public static XLAlignmentVerticalValues Justify;
    public static XLAlignmentVerticalValues Top;
}
public enum ClosedXML.Excel.XLAllowedValues : Enum {
    public int value__;
    public static XLAllowedValues AnyValue;
    public static XLAllowedValues WholeNumber;
    public static XLAllowedValues Decimal;
    public static XLAllowedValues Date;
    public static XLAllowedValues Time;
    public static XLAllowedValues TextLength;
    public static XLAllowedValues List;
    public static XLAllowedValues Custom;
}
internal class ClosedXML.Excel.XLAutoFilter : object {
    private Dictionary`2<int, XLFilterColumn> _columns;
    [CompilerGeneratedAttribute]
private Dictionary`2<int, List`1<XLFilter>> <Filters>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private IXLRange <Range>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SortColumn>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Sorted>k__BackingField;
    [CompilerGeneratedAttribute]
private XLSortOrder <SortOrder>k__BackingField;
    public Dictionary`2<int, List`1<XLFilter>> Filters { get; private set; }
    public IEnumerable`1<IXLRangeRow> HiddenRows { get; }
    public bool IsEnabled { get; public set; }
    public IXLRange Range { get; public set; }
    public int SortColumn { get; public set; }
    public bool Sorted { get; public set; }
    public XLSortOrder SortOrder { get; public set; }
    public IEnumerable`1<IXLRangeRow> VisibleRows { get; }
    [CompilerGeneratedAttribute]
public Dictionary`2<int, List`1<XLFilter>> get_Filters();
    [CompilerGeneratedAttribute]
private void set_Filters(Dictionary`2<int, List`1<XLFilter>> value);
    public sealed virtual IEnumerable`1<IXLRangeRow> get_HiddenRows();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsEnabled();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsEnabled(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual IXLRange get_Range();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Range(IXLRange value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_SortColumn();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SortColumn(int value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Sorted();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Sorted(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual XLSortOrder get_SortOrder();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SortOrder(XLSortOrder value);
    public sealed virtual IEnumerable`1<IXLRangeRow> get_VisibleRows();
    private sealed virtual override IXLAutoFilter ClosedXML.Excel.IXLAutoFilter.Clear();
    public sealed virtual IXLFilterColumn Column(string column);
    public sealed virtual IXLFilterColumn Column(int column);
    public sealed virtual IXLAutoFilter Reapply();
    private sealed virtual override IXLAutoFilter ClosedXML.Excel.IXLAutoFilter.Sort(int columnToSortBy, XLSortOrder sortOrder, bool matchCase, bool ignoreBlanks);
    public XLAutoFilter Clear();
    public XLAutoFilter Set(IXLRangeBase range);
    public XLAutoFilter Sort(int columnToSortBy, XLSortOrder sortOrder, bool matchCase, bool ignoreBlanks);
}
internal enum ClosedXML.Excel.XLBarGrouping : Enum {
    public int value__;
    public static XLBarGrouping Clustered;
    public static XLBarGrouping Percent;
    public static XLBarGrouping Stacked;
    public static XLBarGrouping Standard;
}
internal enum ClosedXML.Excel.XLBarOrientation : Enum {
    public int value__;
    public static XLBarOrientation Vertical;
    public static XLBarOrientation Horizontal;
}
internal class ClosedXML.Excel.XLBorder : object {
    private XLStyle _style;
    private IXLStylized _container;
    private XLBorderValue _value;
    internal XLBorderKey Key { get; private set; }
    unknown XLBorderStyleValues OutsideBorder {public set; }
    unknown XLColor OutsideBorderColor {public set; }
    unknown XLBorderStyleValues InsideBorder {public set; }
    unknown XLColor InsideBorderColor {public set; }
    public XLBorderStyleValues LeftBorder { get; public set; }
    public XLColor LeftBorderColor { get; public set; }
    public XLBorderStyleValues RightBorder { get; public set; }
    public XLColor RightBorderColor { get; public set; }
    public XLBorderStyleValues TopBorder { get; public set; }
    public XLColor TopBorderColor { get; public set; }
    public XLBorderStyleValues BottomBorder { get; public set; }
    public XLColor BottomBorderColor { get; public set; }
    public XLBorderStyleValues DiagonalBorder { get; public set; }
    public XLColor DiagonalBorderColor { get; public set; }
    public bool DiagonalUp { get; public set; }
    public bool DiagonalDown { get; public set; }
    public XLBorder(IXLStylized container, XLStyle style, XLBorderValue value);
    public XLBorder(IXLStylized container, XLStyle style, XLBorderKey key);
    public XLBorder(IXLStylized container, XLStyle style, IXLBorder d);
    internal static XLBorderKey GenerateKey(IXLBorder defaultBorder);
    internal XLBorderKey get_Key();
    private void set_Key(XLBorderKey value);
    public sealed virtual void set_OutsideBorder(XLBorderStyleValues value);
    public sealed virtual void set_OutsideBorderColor(XLColor value);
    public sealed virtual void set_InsideBorder(XLBorderStyleValues value);
    public sealed virtual void set_InsideBorderColor(XLColor value);
    public sealed virtual XLBorderStyleValues get_LeftBorder();
    public sealed virtual void set_LeftBorder(XLBorderStyleValues value);
    public sealed virtual XLColor get_LeftBorderColor();
    public sealed virtual void set_LeftBorderColor(XLColor value);
    public sealed virtual XLBorderStyleValues get_RightBorder();
    public sealed virtual void set_RightBorder(XLBorderStyleValues value);
    public sealed virtual XLColor get_RightBorderColor();
    public sealed virtual void set_RightBorderColor(XLColor value);
    public sealed virtual XLBorderStyleValues get_TopBorder();
    public sealed virtual void set_TopBorder(XLBorderStyleValues value);
    public sealed virtual XLColor get_TopBorderColor();
    public sealed virtual void set_TopBorderColor(XLColor value);
    public sealed virtual XLBorderStyleValues get_BottomBorder();
    public sealed virtual void set_BottomBorder(XLBorderStyleValues value);
    public sealed virtual XLColor get_BottomBorderColor();
    public sealed virtual void set_BottomBorderColor(XLColor value);
    public sealed virtual XLBorderStyleValues get_DiagonalBorder();
    public sealed virtual void set_DiagonalBorder(XLBorderStyleValues value);
    public sealed virtual XLColor get_DiagonalBorderColor();
    public sealed virtual void set_DiagonalBorderColor(XLColor value);
    public sealed virtual bool get_DiagonalUp();
    public sealed virtual void set_DiagonalUp(bool value);
    public sealed virtual bool get_DiagonalDown();
    public sealed virtual void set_DiagonalDown(bool value);
    public sealed virtual IXLStyle SetOutsideBorder(XLBorderStyleValues value);
    public sealed virtual IXLStyle SetOutsideBorderColor(XLColor value);
    public sealed virtual IXLStyle SetInsideBorder(XLBorderStyleValues value);
    public sealed virtual IXLStyle SetInsideBorderColor(XLColor value);
    public sealed virtual IXLStyle SetLeftBorder(XLBorderStyleValues value);
    public sealed virtual IXLStyle SetLeftBorderColor(XLColor value);
    public sealed virtual IXLStyle SetRightBorder(XLBorderStyleValues value);
    public sealed virtual IXLStyle SetRightBorderColor(XLColor value);
    public sealed virtual IXLStyle SetTopBorder(XLBorderStyleValues value);
    public sealed virtual IXLStyle SetTopBorderColor(XLColor value);
    public sealed virtual IXLStyle SetBottomBorder(XLBorderStyleValues value);
    public sealed virtual IXLStyle SetBottomBorderColor(XLColor value);
    public sealed virtual IXLStyle SetDiagonalUp();
    public sealed virtual IXLStyle SetDiagonalUp(bool value);
    public sealed virtual IXLStyle SetDiagonalDown();
    public sealed virtual IXLStyle SetDiagonalDown(bool value);
    public sealed virtual IXLStyle SetDiagonalBorder(XLBorderStyleValues value);
    public sealed virtual IXLStyle SetDiagonalBorderColor(XLColor value);
    private void Modify(Func`2<XLBorderKey, XLBorderKey> modification);
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(IXLBorder other);
    public virtual int GetHashCode();
}
internal class ClosedXML.Excel.XLBorderKey : ValueType {
    [CompilerGeneratedAttribute]
private XLBorderStyleValues <LeftBorder>k__BackingField;
    [CompilerGeneratedAttribute]
private XLColorKey <LeftBorderColor>k__BackingField;
    [CompilerGeneratedAttribute]
private XLBorderStyleValues <RightBorder>k__BackingField;
    [CompilerGeneratedAttribute]
private XLColorKey <RightBorderColor>k__BackingField;
    [CompilerGeneratedAttribute]
private XLBorderStyleValues <TopBorder>k__BackingField;
    [CompilerGeneratedAttribute]
private XLColorKey <TopBorderColor>k__BackingField;
    [CompilerGeneratedAttribute]
private XLBorderStyleValues <BottomBorder>k__BackingField;
    [CompilerGeneratedAttribute]
private XLColorKey <BottomBorderColor>k__BackingField;
    [CompilerGeneratedAttribute]
private XLBorderStyleValues <DiagonalBorder>k__BackingField;
    [CompilerGeneratedAttribute]
private XLColorKey <DiagonalBorderColor>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DiagonalUp>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DiagonalDown>k__BackingField;
    public XLBorderStyleValues LeftBorder { get; public set; }
    public XLColorKey LeftBorderColor { get; public set; }
    public XLBorderStyleValues RightBorder { get; public set; }
    public XLColorKey RightBorderColor { get; public set; }
    public XLBorderStyleValues TopBorder { get; public set; }
    public XLColorKey TopBorderColor { get; public set; }
    public XLBorderStyleValues BottomBorder { get; public set; }
    public XLColorKey BottomBorderColor { get; public set; }
    public XLBorderStyleValues DiagonalBorder { get; public set; }
    public XLColorKey DiagonalBorderColor { get; public set; }
    public bool DiagonalUp { get; public set; }
    public bool DiagonalDown { get; public set; }
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public XLBorderStyleValues get_LeftBorder();
    [CompilerGeneratedAttribute]
public void set_LeftBorder(XLBorderStyleValues value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public XLColorKey get_LeftBorderColor();
    [CompilerGeneratedAttribute]
public void set_LeftBorderColor(XLColorKey value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public XLBorderStyleValues get_RightBorder();
    [CompilerGeneratedAttribute]
public void set_RightBorder(XLBorderStyleValues value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public XLColorKey get_RightBorderColor();
    [CompilerGeneratedAttribute]
public void set_RightBorderColor(XLColorKey value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public XLBorderStyleValues get_TopBorder();
    [CompilerGeneratedAttribute]
public void set_TopBorder(XLBorderStyleValues value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public XLColorKey get_TopBorderColor();
    [CompilerGeneratedAttribute]
public void set_TopBorderColor(XLColorKey value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public XLBorderStyleValues get_BottomBorder();
    [CompilerGeneratedAttribute]
public void set_BottomBorder(XLBorderStyleValues value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public XLColorKey get_BottomBorderColor();
    [CompilerGeneratedAttribute]
public void set_BottomBorderColor(XLColorKey value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public XLBorderStyleValues get_DiagonalBorder();
    [CompilerGeneratedAttribute]
public void set_DiagonalBorder(XLBorderStyleValues value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public XLColorKey get_DiagonalBorderColor();
    [CompilerGeneratedAttribute]
public void set_DiagonalBorderColor(XLColorKey value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_DiagonalUp();
    [CompilerGeneratedAttribute]
public void set_DiagonalUp(bool value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_DiagonalDown();
    [CompilerGeneratedAttribute]
public void set_DiagonalDown(bool value);
    public virtual int GetHashCode();
    public sealed virtual bool Equals(XLBorderKey other);
    private bool AreEquivalent(XLBorderStyleValues borderStyle1, XLColorKey color1, XLBorderStyleValues borderStyle2, XLColorKey color2);
    public virtual bool Equals(object obj);
    public virtual string ToString();
    public static bool op_Equality(XLBorderKey left, XLBorderKey right);
    public static bool op_Inequality(XLBorderKey left, XLBorderKey right);
}
public enum ClosedXML.Excel.XLBorderStyleValues : Enum {
    public int value__;
    public static XLBorderStyleValues DashDot;
    public static XLBorderStyleValues DashDotDot;
    public static XLBorderStyleValues Dashed;
    public static XLBorderStyleValues Dotted;
    public static XLBorderStyleValues Double;
    public static XLBorderStyleValues Hair;
    public static XLBorderStyleValues Medium;
    public static XLBorderStyleValues MediumDashDot;
    public static XLBorderStyleValues MediumDashDotDot;
    public static XLBorderStyleValues MediumDashed;
    public static XLBorderStyleValues None;
    public static XLBorderStyleValues SlantDashDot;
    public static XLBorderStyleValues Thick;
    public static XLBorderStyleValues Thin;
}
internal class ClosedXML.Excel.XLBorderValue : object {
    private static XLBorderRepository Repository;
    private static XLBorderKey DefaultKey;
    internal static XLBorderValue Default;
    [CompilerGeneratedAttribute]
private XLBorderKey <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private XLColor <LeftBorderColor>k__BackingField;
    [CompilerGeneratedAttribute]
private XLColor <RightBorderColor>k__BackingField;
    [CompilerGeneratedAttribute]
private XLColor <TopBorderColor>k__BackingField;
    [CompilerGeneratedAttribute]
private XLColor <BottomBorderColor>k__BackingField;
    [CompilerGeneratedAttribute]
private XLColor <DiagonalBorderColor>k__BackingField;
    public XLBorderKey Key { get; private set; }
    public XLBorderStyleValues LeftBorder { get; }
    public XLColor LeftBorderColor { get; private set; }
    public XLBorderStyleValues RightBorder { get; }
    public XLColor RightBorderColor { get; private set; }
    public XLBorderStyleValues TopBorder { get; }
    public XLColor TopBorderColor { get; private set; }
    public XLBorderStyleValues BottomBorder { get; }
    public XLColor BottomBorderColor { get; private set; }
    public XLBorderStyleValues DiagonalBorder { get; }
    public XLColor DiagonalBorderColor { get; private set; }
    public bool DiagonalUp { get; }
    public bool DiagonalDown { get; }
    private XLBorderValue(XLBorderKey key);
    private static XLBorderValue();
    public static XLBorderValue FromKey(XLBorderKey& key);
    [CompilerGeneratedAttribute]
public XLBorderKey get_Key();
    [CompilerGeneratedAttribute]
private void set_Key(XLBorderKey value);
    public XLBorderStyleValues get_LeftBorder();
    [CompilerGeneratedAttribute]
public XLColor get_LeftBorderColor();
    [CompilerGeneratedAttribute]
private void set_LeftBorderColor(XLColor value);
    public XLBorderStyleValues get_RightBorder();
    [CompilerGeneratedAttribute]
public XLColor get_RightBorderColor();
    [CompilerGeneratedAttribute]
private void set_RightBorderColor(XLColor value);
    public XLBorderStyleValues get_TopBorder();
    [CompilerGeneratedAttribute]
public XLColor get_TopBorderColor();
    [CompilerGeneratedAttribute]
private void set_TopBorderColor(XLColor value);
    public XLBorderStyleValues get_BottomBorder();
    [CompilerGeneratedAttribute]
public XLColor get_BottomBorderColor();
    [CompilerGeneratedAttribute]
private void set_BottomBorderColor(XLColor value);
    public XLBorderStyleValues get_DiagonalBorder();
    [CompilerGeneratedAttribute]
public XLColor get_DiagonalBorderColor();
    [CompilerGeneratedAttribute]
private void set_DiagonalBorderColor(XLColor value);
    public bool get_DiagonalUp();
    public bool get_DiagonalDown();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public enum ClosedXML.Excel.XLCalculateMode : Enum {
    public int value__;
    public static XLCalculateMode Auto;
    public static XLCalculateMode AutoNoTable;
    public static XLCalculateMode Manual;
    public static XLCalculateMode Default;
}
[DebuggerDisplayAttribute("{Address}")]
internal class ClosedXML.Excel.XLCell : XLStylizedBase {
    public static Regex A1SimpleRegex;
    private static Regex A1RowRegex;
    private static Regex A1ColumnRegex;
    private static Regex utfPattern;
    private XLCellsCollection _cellsCollection;
    private int _rowNumber;
    private int _columnNumber;
    public XLWorksheet Worksheet { get; }
    public XLAddress Address { get; }
    internal XLSheetPoint SheetPoint { get; }
    public bool ShareString { get; public set; }
    internal XLStyleValue StyleValue { get; private protected set; }
    internal int SharedStringId { get; internal set; }
    private XLCellValue SliceCellValue { get; private set; }
    private XLRichText SliceRichText { get; private set; }
    private XLComment SliceComment { get; private set; }
    private XLHyperlink SliceHyperlink { get; private set; }
    internal bool SettingHyperlink { get; internal set; }
    internal Nullable`1<UInt32> CellMetaIndex { get; internal set; }
    internal Nullable`1<UInt32> ValueMetaIndex { get; internal set; }
    internal XLCellFormula Formula { get; internal set; }
    internal long ModifiedAtVersion { get; private set; }
    private IXLWorksheet ClosedXML.Excel.IXLCell.Worksheet { get; }
    private IXLAddress ClosedXML.Excel.IXLCell.Address { get; }
    internal bool IsEvaluating { get; }
    public XLCellValue Value { get; public set; }
    public XLDataType DataType { get; }
    public string FormulaA1 { get; public set; }
    public string FormulaR1C1 { get; public set; }
    public bool NeedsRecalculation { get; }
    public XLCellValue CachedValue { get; }
    public bool HasRichText { get; }
    public bool HasComment { get; }
    public bool HasSparkline { get; }
    public IXLSparkline Sparkline { get; }
    public bool HasDataValidation { get; }
    public bool Active { get; public set; }
    public bool HasHyperlink { get; }
    public bool ShowPhonetic { get; public set; }
    public IEnumerable`1<IXLStyle> Styles { get; }
    protected IEnumerable`1<XLStylizedBase> Children { get; }
    public IXLRanges RangesUsed { get; }
    public bool HasFormula { get; }
    public bool HasArrayFormula { get; }
    public IXLRangeAddress FormulaReference { get; public set; }
    public IXLRange CurrentRegion { get; }
    internal XLCell(XLWorksheet worksheet, int row, int column);
    internal XLCell(XLWorksheet worksheet, XLSheetPoint point);
    private static XLCell();
    public XLWorksheet get_Worksheet();
    public XLAddress get_Address();
    internal XLSheetPoint get_SheetPoint();
    public sealed virtual bool get_ShareString();
    public sealed virtual void set_ShareString(bool value);
    internal virtual XLStyleValue get_StyleValue();
    private protected virtual void set_StyleValue(XLStyleValue value);
    internal int get_SharedStringId();
    internal void set_SharedStringId(int value);
    private XLCellValue get_SliceCellValue();
    private void set_SliceCellValue(XLCellValue value);
    private XLRichText get_SliceRichText();
    private void set_SliceRichText(XLRichText value);
    private XLComment get_SliceComment();
    private void set_SliceComment(XLComment value);
    private XLHyperlink get_SliceHyperlink();
    private void set_SliceHyperlink(XLHyperlink value);
    internal bool get_SettingHyperlink();
    internal void set_SettingHyperlink(bool value);
    internal Nullable`1<UInt32> get_CellMetaIndex();
    internal void set_CellMetaIndex(Nullable`1<UInt32> value);
    internal Nullable`1<UInt32> get_ValueMetaIndex();
    internal void set_ValueMetaIndex(Nullable`1<UInt32> value);
    internal XLCellFormula get_Formula();
    internal void set_Formula(XLCellFormula value);
    internal long get_ModifiedAtVersion();
    private void set_ModifiedAtVersion(long value);
    internal XLComment GetComment();
    internal XLComment CreateComment(Nullable`1<int> shapeId);
    public XLRichText GetRichText();
    public XLRichText CreateRichText();
    private sealed virtual override IXLWorksheet ClosedXML.Excel.IXLCell.get_Worksheet();
    private sealed virtual override IXLAddress ClosedXML.Excel.IXLCell.get_Address();
    private sealed virtual override IXLRange ClosedXML.Excel.IXLCell.AsRange();
    internal IXLCell SetValue(XLCellValue value, bool setTableHeader, bool checkMergedRanges);
    public sealed virtual bool GetBoolean();
    public sealed virtual double GetDouble();
    public sealed virtual string GetText();
    public sealed virtual XLError GetError();
    public sealed virtual DateTime GetDateTime();
    public sealed virtual TimeSpan GetTimeSpan();
    public sealed virtual bool TryGetValue(T& value);
    private static bool TryGetStringValue(T& value, XLCellValue currentValue);
    public sealed virtual T GetValue();
    public sealed virtual string GetString();
    public sealed virtual string GetFormattedString();
    internal bool get_IsEvaluating();
    public sealed virtual void InvalidateFormula();
    public void Evaluate(bool force);
    internal void SetOnlyValue(XLCellValue value);
    public sealed virtual IXLCell SetValue(XLCellValue value);
    public virtual string ToString();
    public sealed virtual string ToString(string format);
    public sealed virtual XLCellValue get_Value();
    public sealed virtual void set_Value(XLCellValue value);
    public sealed virtual IXLTable InsertTable(IEnumerable`1<T> data);
    public sealed virtual IXLTable InsertTable(IEnumerable`1<T> data, bool createTable);
    public sealed virtual IXLTable InsertTable(IEnumerable`1<T> data, string tableName);
    public sealed virtual IXLTable InsertTable(IEnumerable`1<T> data, string tableName, bool createTable);
    public IXLTable InsertTable(IEnumerable`1<T> data, string tableName, bool createTable, bool addHeadings, bool transpose);
    private IXLTable InsertTableInternal(IInsertDataReader reader, string tableName, bool createTable, bool addHeadings, bool transpose);
    public sealed virtual IXLTable InsertTable(DataTable data);
    public sealed virtual IXLTable InsertTable(DataTable data, bool createTable);
    public sealed virtual IXLTable InsertTable(DataTable data, string tableName);
    public sealed virtual IXLTable InsertTable(DataTable data, string tableName, bool createTable);
    internal XLRange InsertDataInternal(IInsertDataReader reader, bool addHeadings, bool transpose);
    public sealed virtual XLTableCellType TableCellType();
    public sealed virtual IXLRange InsertData(IEnumerable data);
    public sealed virtual IXLRange InsertData(IEnumerable data, bool transpose);
    public sealed virtual IXLRange InsertData(DataTable dataTable);
    public sealed virtual XLDataType get_DataType();
    public sealed virtual IXLCell Clear(XLClearOptions clearOptions);
    internal IXLCell Clear(XLClearOptions clearOptions, bool calledFromRange);
    public sealed virtual void Delete(XLShiftDeletedCells shiftDeleteCells);
    public sealed virtual string get_FormulaA1();
    public sealed virtual void set_FormulaA1(string value);
    public sealed virtual string get_FormulaR1C1();
    public sealed virtual void set_FormulaR1C1(string value);
    public sealed virtual XLHyperlink GetHyperlink();
    public sealed virtual void SetHyperlink(XLHyperlink hyperlink);
    public sealed virtual XLHyperlink CreateHyperlink();
    public sealed virtual IXLCells InsertCellsAbove(int numberOfRows);
    public sealed virtual IXLCells InsertCellsBelow(int numberOfRows);
    public sealed virtual IXLCells InsertCellsAfter(int numberOfColumns);
    public sealed virtual IXLCells InsertCellsBefore(int numberOfColumns);
    public sealed virtual IXLCell AddToNamed(string rangeName);
    public sealed virtual IXLCell AddToNamed(string rangeName, XLScope scope);
    public sealed virtual IXLCell AddToNamed(string rangeName, XLScope scope, string comment);
    public sealed virtual bool get_NeedsRecalculation();
    public sealed virtual XLCellValue get_CachedValue();
    private sealed virtual override IXLRichText ClosedXML.Excel.IXLCell.GetRichText();
    public sealed virtual bool get_HasRichText();
    private sealed virtual override IXLRichText ClosedXML.Excel.IXLCell.CreateRichText();
    private sealed virtual override IXLComment ClosedXML.Excel.IXLCell.GetComment();
    public sealed virtual bool get_HasComment();
    private sealed virtual override IXLComment ClosedXML.Excel.IXLCell.CreateComment();
    public sealed virtual bool IsMerged();
    public sealed virtual IXLRange MergedRange();
    public sealed virtual bool IsEmpty();
    public sealed virtual bool IsEmpty(XLCellsUsedOptions options);
    public sealed virtual IXLColumn WorksheetColumn();
    public sealed virtual IXLRow WorksheetRow();
    public sealed virtual IXLCell CopyTo(IXLCell target);
    public sealed virtual IXLCell CopyTo(string target);
    public sealed virtual IXLCell CopyFrom(IXLCell otherCell);
    public sealed virtual IXLCell CopyFrom(string otherCell);
    public sealed virtual IXLCell SetFormulaA1(string formula);
    public sealed virtual IXLCell SetFormulaR1C1(string formula);
    public sealed virtual bool get_HasSparkline();
    public sealed virtual IXLSparkline get_Sparkline();
    public sealed virtual IXLDataValidation GetDataValidation();
    public sealed virtual bool get_HasDataValidation();
    private IXLDataValidation FindDataValidation();
    public sealed virtual IXLDataValidation CreateDataValidation();
    [ObsoleteAttribute("Use GetDataValidation() to access the existing rule, or CreateDataValidation() to create a new one.")]
public sealed virtual IXLDataValidation SetDataValidation();
    public sealed virtual void Select();
    public sealed virtual IXLConditionalFormat AddConditionalFormat();
    public sealed virtual bool get_Active();
    public sealed virtual void set_Active(bool value);
    public sealed virtual IXLCell SetActive(bool value);
    public sealed virtual bool get_HasHyperlink();
    public sealed virtual bool get_ShowPhonetic();
    public sealed virtual void set_ShowPhonetic(bool value);
    [IteratorStateMachineAttribute("ClosedXML.Excel.XLCell/<get_Styles>d__165")]
public virtual IEnumerable`1<IXLStyle> get_Styles();
    private sealed virtual override void ClosedXML.Excel.IXLStylized.ModifyStyle(Func`2<XLStyleKey, XLStyleKey> modification);
    [IteratorStateMachineAttribute("ClosedXML.Excel.XLCell/<get_Children>d__168")]
protected virtual IEnumerable`1<XLStylizedBase> get_Children();
    public virtual IXLRanges get_RangesUsed();
    internal void PingStyle();
    public XLRange AsRange();
    private XLStyleValue GetStyleForRead();
    private void SetStyle(IXLStyle styleToUse);
    public bool IsDefaultWorksheetStyle();
    public void DeleteComment();
    public void DeleteSparkline();
    private string GetFormat();
    public sealed virtual IXLCell CopyFrom(IXLRangeBase rangeObject);
    private void CopyConditionalFormatsFrom(XLCell otherCell);
    private void CopyConditionalFormatsFrom(XLRangeBase fromRange);
    private bool SetDataTable(object o);
    private bool SetEnumerable(object collectionObject);
    private void ClearMerged();
    private void SetDateTimeFormat(XLStyleValue style, bool onlyDatePart);
    private void SetTimeSpanFormat(XLStyleValue style);
    internal string GetFormulaR1C1(string value);
    internal string GetFormulaA1(string value);
    internal void CopyValuesFrom(XLCell source);
    private IXLCell GetTargetCell(string target, XLWorksheet defaultWorksheet);
    internal IXLCell CopyFromInternal(XLCell otherCell, XLCellCopyOptions options);
    private void CopySparklineFrom(XLCell otherCell);
    public IXLCell CopyFrom(IXLCell otherCell, XLCellCopyOptions options);
    private void CopyDataValidationFrom(XLCell otherCell);
    internal void CopyDataValidation(XLCell otherCell, IXLDataValidation otherDv);
    internal void ShiftFormulaRows(XLRange shiftedRange, int rowsShifted);
    internal static string ShiftFormulaRows(string formulaA1, XLWorksheet worksheetInAction, XLRange shiftedRange, int rowsShifted);
    internal void ShiftFormulaColumns(XLRange shiftedRange, int columnsShifted);
    internal static string ShiftFormulaColumns(string formulaA1, XLWorksheet worksheetInAction, XLRange shiftedRange, int columnsShifted);
    private XLCell CellShift(int rowsToShift, int columnsToShift);
    private sealed virtual override IXLCell ClosedXML.Excel.IXLCell.CellAbove();
    private sealed virtual override IXLCell ClosedXML.Excel.IXLCell.CellAbove(int step);
    public XLCell CellAbove();
    public XLCell CellAbove(int step);
    private sealed virtual override IXLCell ClosedXML.Excel.IXLCell.CellBelow();
    private sealed virtual override IXLCell ClosedXML.Excel.IXLCell.CellBelow(int step);
    public XLCell CellBelow();
    public XLCell CellBelow(int step);
    private sealed virtual override IXLCell ClosedXML.Excel.IXLCell.CellLeft();
    private sealed virtual override IXLCell ClosedXML.Excel.IXLCell.CellLeft(int step);
    public XLCell CellLeft();
    public XLCell CellLeft(int step);
    private sealed virtual override IXLCell ClosedXML.Excel.IXLCell.CellRight();
    private sealed virtual override IXLCell ClosedXML.Excel.IXLCell.CellRight(int step);
    public XLCell CellRight();
    public XLCell CellRight(int step);
    public sealed virtual bool get_HasFormula();
    public sealed virtual bool get_HasArrayFormula();
    public sealed virtual IXLRangeAddress get_FormulaReference();
    public sealed virtual void set_FormulaReference(IXLRangeAddress value);
    public sealed virtual IXLRange get_CurrentRegion();
    private IXLRangeAddress FindCurrentRegion();
    internal bool IsInferiorMergedCell();
    internal bool IsSuperiorMergedCell();
    internal void GetGlyphBoxes(IXLGraphicEngine engine, Dpi dpi, List`1<GlyphBox> output);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
private bool <SetValue>g__SetTableHeaderValue|60_0(XLCellValue newFieldName);
    [CompilerGeneratedAttribute]
private bool <SetValue>g__SetTableTotalsRowLabel|60_1(XLCellValue value);
    [CompilerGeneratedAttribute]
private bool <SetValue>g__TryGetField|60_2(IXLTableField& field, IXLTable table, int rowNumber);
    [CompilerGeneratedAttribute]
private bool <InsertTableInternal>b__88_0(IXLTable t);
    [CompilerGeneratedAttribute]
private bool <InsertTable>b__92_0(IXLTable t);
    [CompilerGeneratedAttribute]
private void <InsertDataInternal>g__incrementFieldPosition|93_0(<>c__DisplayClass93_0& );
    [CompilerGeneratedAttribute]
private void <InsertDataInternal>g__incrementRecordPosition|93_1(<>c__DisplayClass93_0& );
    [CompilerGeneratedAttribute]
private void <InsertDataInternal>g__resetRecordPosition|93_2(<>c__DisplayClass93_0& );
    [CompilerGeneratedAttribute]
private bool <TableCellType>b__94_0(IXLTable t);
    [CompilerGeneratedAttribute]
private bool <IsEmpty>b__134_1(IXLRange range);
    [CompilerGeneratedAttribute]
private void <ClearMerged>b__184_0(IXLRange m);
    [CompilerGeneratedAttribute]
internal static bool <FindCurrentRegion>g__IsVerticalBorderBlank|226_0(XLWorksheet sheet, int borderColumn, int borderMinRow, int borderMaxRow);
    [CompilerGeneratedAttribute]
internal static bool <FindCurrentRegion>g__IsHorizontalBorderBlank|226_1(XLWorksheet sheet, int borderRow, int borderMinColumn, int borderMaxColumn);
    [CompilerGeneratedAttribute]
internal static void <GetGlyphBoxes>g__AddGlyphs|229_0(string text, IXLFontBase font, IXLGraphicEngine engine, Dpi dpi, List`1<GlyphBox> output);
}
[FlagsAttribute]
internal enum ClosedXML.Excel.XLCellCopyOptions : Enum {
    public int value__;
    public static XLCellCopyOptions None;
    public static XLCellCopyOptions Values;
    public static XLCellCopyOptions Styles;
    public static XLCellCopyOptions ConditionalFormats;
    public static XLCellCopyOptions DataValidations;
    public static XLCellCopyOptions Sparklines;
    public static XLCellCopyOptions All;
}
[DebuggerDisplayAttribute("{Type}:{A1}")]
internal class ClosedXML.Excel.XLCellFormula : object {
    private static string DataTableFormulaFormat;
    private static Regex A1Regex;
    private static Regex R1C1Regex;
    private XLSheetPoint _input1;
    private XLSheetPoint _input2;
    private FormulaFlags _flags;
    private FormulaType _type;
    private RecalculationStatus _lastStatus;
    private long _evaluatedAtVersion;
    [CompilerGeneratedAttribute]
private bool <IsEvaluating>k__BackingField;
    [CompilerGeneratedAttribute]
private string <A1>k__BackingField;
    [CompilerGeneratedAttribute]
private string <R1C1>k__BackingField;
    [CompilerGeneratedAttribute]
private XLSheetRange <Range>k__BackingField;
    internal bool IsEvaluating { get; private set; }
    private string A1 { get; private set; }
    private string R1C1 { get; private set; }
    internal FormulaType Type { get; }
    internal XLSheetRange Range { get; internal set; }
    internal bool IsRowDataTable { get; }
    internal bool Is2DDataTable { get; }
    internal XLSheetPoint Input1 { get; }
    internal XLSheetPoint Input2 { get; }
    internal bool Input1Deleted { get; }
    internal bool Input2Deleted { get; }
    private static XLCellFormula();
    [CompilerGeneratedAttribute]
internal bool get_IsEvaluating();
    [CompilerGeneratedAttribute]
private void set_IsEvaluating(bool value);
    [CompilerGeneratedAttribute]
private string get_A1();
    [CompilerGeneratedAttribute]
private void set_A1(string value);
    [CompilerGeneratedAttribute]
private string get_R1C1();
    [CompilerGeneratedAttribute]
private void set_R1C1(string value);
    internal FormulaType get_Type();
    [CompilerGeneratedAttribute]
internal XLSheetRange get_Range();
    [CompilerGeneratedAttribute]
internal void set_Range(XLSheetRange value);
    internal bool get_IsRowDataTable();
    internal bool get_Is2DDataTable();
    internal XLSheetPoint get_Input1();
    internal XLSheetPoint get_Input2();
    internal bool get_Input1Deleted();
    internal bool get_Input2Deleted();
    internal bool NeedsRecalculation(XLCell cell);
    private bool EvaluateStatus(XLCell cell);
    internal void Invalidate(XLWorksheet worksheet);
    public string GetFormulaA1(XLSheetPoint cellAddress);
    public string GetFormulaR1C1(XLSheetPoint cellAddress);
    internal static string GetFormula(string strValue, FormulaConversionType conversionType, XLSheetPoint cellAddress);
    private static string GetA1Address(string r1C1Address, XLSheetPoint cellAddress);
    private static string GetA1Column(string columnPartRC, int cellColumn);
    private static string GetA1Row(string rowPartRC, int cellRow);
    private static string GetR1C1Address(string a1Address, XLSheetPoint cellAddress);
    private static string GetR1C1Row(int rowNumber, bool fixedRow, int cellRow);
    private static string GetR1C1Column(int columnNumber, bool fixedColumn, int cellColumn);
    internal void ApplyFormula(XLCell cell);
    private ScalarValue CalculateNormalFormula(string fA1, XLCell cell);
    private Array CalculateArrayFormula(XLCell masterCell);
    internal static XLCellFormula NormalA1(string formulaA1);
    internal static XLCellFormula NormalR1C1(string formulaR1C1);
    internal static XLCellFormula Array(string arrayFormulaA1, XLSheetRange range, bool aca);
    internal static XLCellFormula DataTable1D(XLSheetRange range, XLSheetPoint input1Address, bool input1Deleted, bool isRowDataTable);
    internal static XLCellFormula DataTable2D(XLSheetRange range, XLSheetPoint input1Address, bool input1Deleted, XLSheetPoint input2Address, bool input2Deleted);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class ClosedXML.Excel.XLCells : XLStylizedBase {
    private List`1<XLRangeAddress> _rangeAddresses;
    private bool _usedCellsOnly;
    private Func`2<IXLCell, bool> _predicate;
    private XLCellsUsedOptions _options;
    private bool _styleInitialized;
    unknown XLCellValue Value {public set; }
    unknown string FormulaA1 {public set; }
    unknown string FormulaR1C1 {public set; }
    public IEnumerable`1<IXLStyle> Styles { get; }
    protected IEnumerable`1<XLStylizedBase> Children { get; }
    public IXLRanges RangesUsed { get; }
    public XLCells(bool usedCellsOnly, XLCellsUsedOptions options, Func`2<IXLCell, bool> predicate);
    [IteratorStateMachineAttribute("ClosedXML.Excel.XLCells/<GetAllCells>d__6")]
private IEnumerable`1<XLCell> GetAllCells();
    [IteratorStateMachineAttribute("ClosedXML.Excel.XLCells/<GetAllCellsInRange>d__7")]
private IEnumerable`1<XLSheetPoint> GetAllCellsInRange(IXLRangeAddress rangeAddress);
    [IteratorStateMachineAttribute("ClosedXML.Excel.XLCells/<GetUsedCells>d__8")]
private IEnumerable`1<XLCell> GetUsedCells();
    [IteratorStateMachineAttribute("ClosedXML.Excel.XLCells/<GetUsedCellsInRange>d__9")]
private IEnumerable`1<XLCell> GetUsedCellsInRange(XLRangeAddress rangeAddress, XLWorksheet worksheet, IEnumerable`1<XLSheetPoint> usedCellsCandidates);
    private IEnumerable`1<XLSheetPoint> GetUsedCellsCandidates(XLWorksheet worksheet);
    public sealed virtual IEnumerator`1<XLCell> GetEnumerator();
    private IEnumerable`1<XLCell> GetCells();
    private sealed virtual override IEnumerator`1<IXLCell> System.Collections.Generic.IEnumerable<ClosedXML.Excel.IXLCell>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual void set_Value(XLCellValue value);
    public sealed virtual IXLCells Clear(XLClearOptions clearOptions);
    public sealed virtual void DeleteComments();
    public sealed virtual void DeleteSparklines();
    public sealed virtual void set_FormulaA1(string value);
    public sealed virtual void set_FormulaR1C1(string value);
    [IteratorStateMachineAttribute("ClosedXML.Excel.XLCells/<get_Styles>d__25")]
public virtual IEnumerable`1<IXLStyle> get_Styles();
    [IteratorStateMachineAttribute("ClosedXML.Excel.XLCells/<get_Children>d__27")]
protected virtual IEnumerable`1<XLStylizedBase> get_Children();
    public virtual IXLRanges get_RangesUsed();
    public void Add(XLRangeAddress rangeAddress);
    public void Add(XLCell cell);
    public sealed virtual void Select();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private IEnumerable`1<XLSheetPoint> <GetAllCells>b__6_1(XLRangeAddress addr);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private IEnumerable`1<XLSheetPoint> <GetUsedCellsCandidates>b__10_0(IXLRange r);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private IEnumerable`1<XLSheetPoint> <GetUsedCellsCandidates>b__10_1(IXLConditionalFormat cf);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private IEnumerable`1<XLSheetPoint> <GetUsedCellsCandidates>b__10_5(IXLRange r);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private IEnumerable`1<XLSheetPoint> <GetUsedCellsCandidates>b__10_2(IXLDataValidation dv);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private IEnumerable`1<XLSheetPoint> <GetUsedCellsCandidates>b__10_6(IXLRange r);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class ClosedXML.Excel.XLCellsCollection : object {
    private XLWorksheet _ws;
    private List`1<ISlice> _slices;
    [CompilerGeneratedAttribute]
private Slice`1<XLValueSliceContent> <ValueSlice>k__BackingField;
    [CompilerGeneratedAttribute]
private Slice`1<XLCellFormula> <FormulaSlice>k__BackingField;
    [CompilerGeneratedAttribute]
private Slice`1<XLStyleValue> <StyleSlice>k__BackingField;
    [CompilerGeneratedAttribute]
private Slice`1<XLMiscSliceContent> <MiscSlice>k__BackingField;
    internal HashSet`1<int> ColumnsUsedKeys { get; }
    internal bool IsEmpty { get; }
    internal int MaxColumnUsed { get; }
    internal int MaxRowUsed { get; }
    internal HashSet`1<int> RowsUsedKeys { get; }
    internal Slice`1<XLValueSliceContent> ValueSlice { get; }
    internal Slice`1<XLCellFormula> FormulaSlice { get; }
    internal Slice`1<XLStyleValue> StyleSlice { get; }
    internal Slice`1<XLMiscSliceContent> MiscSlice { get; }
    internal XLWorksheet Worksheet { get; }
    public XLCellsCollection(XLWorksheet ws);
    internal HashSet`1<int> get_ColumnsUsedKeys();
    internal bool get_IsEmpty();
    internal int get_MaxColumnUsed();
    internal int get_MaxRowUsed();
    internal HashSet`1<int> get_RowsUsedKeys();
    [CompilerGeneratedAttribute]
internal Slice`1<XLValueSliceContent> get_ValueSlice();
    [CompilerGeneratedAttribute]
internal Slice`1<XLCellFormula> get_FormulaSlice();
    [CompilerGeneratedAttribute]
internal Slice`1<XLStyleValue> get_StyleSlice();
    [CompilerGeneratedAttribute]
internal Slice`1<XLMiscSliceContent> get_MiscSlice();
    internal XLWorksheet get_Worksheet();
    internal void Clear();
    internal void Clear(XLSheetRange clearRange);
    internal void DeleteAreaAndShiftLeft(XLSheetRange rangeToDelete);
    internal void DeleteAreaAndShiftUp(XLSheetRange rangeToDelete);
    internal XLCell GetCell(XLSheetPoint address);
    internal IEnumerable`1<XLCell> GetCells();
    internal IEnumerable`1<XLCell> GetCells(Func`2<XLCell, bool> predicate);
    internal IEnumerable`1<XLCell> GetCells(int rowStart, int columnStart, int rowEnd, int columnEnd, Func`2<XLCell, bool> predicate);
    [IteratorStateMachineAttribute("ClosedXML.Excel.XLCellsCollection/<GetCells>d__35")]
internal IEnumerable`1<XLCell> GetCells(XLSheetRange range, Func`2<XLCell, bool> predicate);
    internal IEnumerable`1<XLCell> GetCellsInColumn(int column);
    internal IEnumerable`1<XLCell> GetCellsInRow(int row);
    [NullableContextAttribute("2")]
internal XLCell GetUsedCell(XLSheetPoint address);
    internal int FirstColumnUsed(XLSheetRange searchRange, XLCellsUsedOptions options, Func`2<IXLCell, bool> predicate);
    internal int FirstRowUsed(XLSheetRange searchRange, XLCellsUsedOptions options, Func`2<IXLCell, bool> predicate);
    internal void InsertAreaAndShiftDown(XLSheetRange insertedRange);
    internal void InsertAreaAndShiftRight(XLSheetRange insertedRange);
    internal int LastColumnUsed(XLSheetRange searchRange, XLCellsUsedOptions options, Func`2<IXLCell, bool> predicate);
    internal int LastRowUsed(XLSheetRange searchRange, XLCellsUsedOptions options, Func`2<IXLCell, bool> predicate);
    internal void SwapRanges(XLSheetRange sheetRange1, XLSheetRange sheetRange2);
    private int FindUsedColumn(XLSheetRange range, XLCellsUsedOptions options, Func`2<IXLCell, bool> predicate, bool descending);
    private int FindUsedRow(XLSheetRange searchRange, XLCellsUsedOptions options, Func`2<IXLCell, bool> predicate, bool reverse);
    private bool IsUsed(XLSheetPoint address);
    internal void SwapCellsContent(XLSheetPoint sp1, XLSheetPoint sp2);
    private static void SwapSliceValue(Slice`1<TElement> slice, XLSheetPoint sp1, XLSheetPoint sp2);
}
public enum ClosedXML.Excel.XLCellSetValueBehavior : Enum {
    public int value__;
    public static XLCellSetValueBehavior Smart;
    public static XLCellSetValueBehavior Simple;
}
[FlagsAttribute]
public enum ClosedXML.Excel.XLCellsUsedOptions : Enum {
    public int value__;
    public static XLCellsUsedOptions None;
    public static XLCellsUsedOptions NoConstraints;
    public static XLCellsUsedOptions Contents;
    public static XLCellsUsedOptions DataType;
    public static XLCellsUsedOptions NormalFormats;
    public static XLCellsUsedOptions ConditionalFormats;
    public static XLCellsUsedOptions Comments;
    public static XLCellsUsedOptions DataValidation;
    public static XLCellsUsedOptions MergedRanges;
    public static XLCellsUsedOptions Sparklines;
    public static XLCellsUsedOptions AllFormats;
    public static XLCellsUsedOptions AllContents;
    public static XLCellsUsedOptions All;
}
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{Type} {_text != null ? (object)_text : (object)_value}")]
public class ClosedXML.Excel.XLCellValue : ValueType {
    private double _value;
    private string _text;
    [CompilerGeneratedAttribute]
private XLDataType <Type>k__BackingField;
    public XLDataType Type { get; }
    public bool IsBlank { get; }
    public bool IsBoolean { get; }
    public bool IsNumber { get; }
    public bool IsText { get; }
    public bool IsError { get; }
    public bool IsDateTime { get; }
    public bool IsTimeSpan { get; }
    public bool IsUnifiedNumber { get; }
    private XLCellValue(Blank _);
    private XLCellValue(bool logical);
    private XLCellValue(double number);
    private XLCellValue(string text);
    private XLCellValue(XLError error);
    private XLCellValue(DateTime dateTime);
    private XLCellValue(TimeSpan timeSpan);
    private XLCellValue(XLDataType type, double value);
    [CompilerGeneratedAttribute]
public XLDataType get_Type();
    public bool get_IsBlank();
    public bool get_IsBoolean();
    public bool get_IsNumber();
    public bool get_IsText();
    public bool get_IsError();
    public bool get_IsDateTime();
    public bool get_IsTimeSpan();
    public bool get_IsUnifiedNumber();
    public static XLCellValue op_Implicit(Blank blank);
    public static XLCellValue op_Implicit(bool logical);
    public static XLCellValue op_Implicit(string text);
    public static XLCellValue op_Implicit(XLError error);
    public static XLCellValue op_Implicit(DateTime dateTime);
    public static XLCellValue op_Implicit(TimeSpan timeSpan);
    public static XLCellValue op_Implicit(sbyte number);
    public static XLCellValue op_Implicit(byte number);
    public static XLCellValue op_Implicit(short number);
    public static XLCellValue op_Implicit(ushort number);
    public static XLCellValue op_Implicit(int number);
    public static XLCellValue op_Implicit(UInt32 number);
    public static XLCellValue op_Implicit(long number);
    public static XLCellValue op_Implicit(ulong number);
    public static XLCellValue op_Implicit(float number);
    public static XLCellValue op_Implicit(double number);
    public static XLCellValue op_Implicit(decimal number);
    public static XLCellValue op_Implicit(Nullable`1<sbyte> numberOrBlank);
    public static XLCellValue op_Implicit(Nullable`1<byte> numberOrBlank);
    public static XLCellValue op_Implicit(Nullable`1<short> numberOrBlank);
    public static XLCellValue op_Implicit(Nullable`1<ushort> numberOrBlank);
    public static XLCellValue op_Implicit(Nullable`1<int> numberOrBlank);
    public static XLCellValue op_Implicit(Nullable`1<UInt32> numberOrBlank);
    public static XLCellValue op_Implicit(Nullable`1<long> numberOrBlank);
    public static XLCellValue op_Implicit(Nullable`1<ulong> numberOrBlank);
    public static XLCellValue op_Implicit(Nullable`1<float> numberOrBlank);
    public static XLCellValue op_Implicit(Nullable`1<double> numberOrBlank);
    public static XLCellValue op_Implicit(Nullable`1<decimal> numberOrBlank);
    public static XLCellValue op_Implicit(Nullable`1<DateTime> dateTimeOrBlank);
    public static XLCellValue op_Implicit(Nullable`1<TimeSpan> timeSpanOrBlank);
    public static XLCellValue FromObject(object obj, IFormatProvider provider);
    public static Blank op_Explicit(XLCellValue value);
    public static bool op_Explicit(XLCellValue value);
    public static double op_Explicit(XLCellValue value);
    public static string op_Explicit(XLCellValue value);
    public static XLError op_Explicit(XLCellValue value);
    public static DateTime op_Implicit(XLCellValue value);
    public static TimeSpan op_Implicit(XLCellValue value);
    public Blank GetBlank();
    public bool GetBoolean();
    public double GetNumber();
    public string GetText();
    public XLError GetError();
    public DateTime GetDateTime();
    public TimeSpan GetTimeSpan();
    internal static XLCellValue FromSerialDateTime(double serialDateTime);
    internal static XLCellValue FromSerialTimeSpan(double serialTimeSpan);
    public double GetUnifiedNumber();
    internal object ToObject();
    public virtual string ToString();
    public string ToString(CultureInfo culture);
    public sealed virtual bool Equals(XLCellValue other);
    public sealed virtual bool Equals(Blank other);
    public sealed virtual bool Equals(bool other);
    public sealed virtual bool Equals(double other);
    public sealed virtual bool Equals(string other);
    public sealed virtual bool Equals(XLError other);
    public sealed virtual bool Equals(DateTime other);
    public sealed virtual bool Equals(TimeSpan other);
    public sealed virtual bool Equals(int other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public bool TryGetText(String& value);
    public bool TryConvert(Blank& value);
    public bool TryConvert(Boolean& value);
    public bool TryConvert(Double& value, CultureInfo culture);
    public bool TryConvert(DateTime& value);
    public bool TryConvert(TimeSpan& value, CultureInfo culture);
}
internal static class ClosedXML.Excel.XLCFBaseConverter : object {
    public static ConditionalFormattingRule Convert(IXLConditionalFormat cf, int priority);
}
internal class ClosedXML.Excel.XLCFCellIsConverter : object {
    [NullableContextAttribute("1")]
public sealed virtual ConditionalFormattingRule Convert(IXLConditionalFormat cf, int priority, SaveContext context);
    [NullableContextAttribute("1")]
private string GetQuoted(XLFormula formula);
}
internal class ClosedXML.Excel.XLCFColorScaleConverter : object {
    public sealed virtual ConditionalFormattingRule Convert(IXLConditionalFormat cf, int priority, SaveContext context);
}
internal class ClosedXML.Excel.XLCFColorScaleMax : object {
    private XLConditionalFormat _conditionalFormat;
    public XLCFColorScaleMax(XLConditionalFormat conditionalFormat);
    public sealed virtual void Maximum(XLCFContentType type, string value, XLColor color);
    public sealed virtual void Maximum(XLCFContentType type, double value, XLColor color);
    public sealed virtual void HighestValue(XLColor color);
}
internal class ClosedXML.Excel.XLCFColorScaleMid : object {
    private XLConditionalFormat _conditionalFormat;
    public XLCFColorScaleMid(XLConditionalFormat conditionalFormat);
    public sealed virtual IXLCFColorScaleMax Midpoint(XLCFContentType type, string value, XLColor color);
    public sealed virtual IXLCFColorScaleMax Midpoint(XLCFContentType type, double value, XLColor color);
    public sealed virtual void Maximum(XLCFContentType type, string value, XLColor color);
    public sealed virtual void Maximum(XLCFContentType type, double value, XLColor color);
    public sealed virtual void HighestValue(XLColor color);
}
internal class ClosedXML.Excel.XLCFColorScaleMin : object {
    private XLConditionalFormat _conditionalFormat;
    public XLCFColorScaleMin(XLConditionalFormat conditionalFormat);
    public sealed virtual IXLCFColorScaleMid Minimum(XLCFContentType type, string value, XLColor color);
    public sealed virtual IXLCFColorScaleMid Minimum(XLCFContentType type, double value, XLColor color);
    public sealed virtual IXLCFColorScaleMid LowestValue(XLColor color);
}
internal class ClosedXML.Excel.XLCFContainsConverter : object {
    [NullableContextAttribute("1")]
public sealed virtual ConditionalFormattingRule Convert(IXLConditionalFormat cf, int priority, SaveContext context);
}
public enum ClosedXML.Excel.XLCFContentType : Enum {
    public int value__;
    public static XLCFContentType Number;
    public static XLCFContentType Percent;
    public static XLCFContentType Formula;
    public static XLCFContentType Percentile;
    public static XLCFContentType Minimum;
    public static XLCFContentType Maximum;
}
internal class ClosedXML.Excel.XLCFConverters : object {
    private static Dictionary`2<XLConditionalFormatType, IXLCFConverter> Converters;
    private static XLCFConverters();
    public static ConditionalFormattingRule Convert(IXLConditionalFormat conditionalFormat, int priority, SaveContext context);
}
internal class ClosedXML.Excel.XLCFConvertersExtension : object {
    private static Dictionary`2<XLConditionalFormatType, IXLCFConverterExtension> Converters;
    private static XLCFConvertersExtension();
    public static ConditionalFormattingRule Convert(IXLConditionalFormat conditionalFormat, SaveContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class ClosedXML.Excel.XLCFDataBarConverter : object {
    public sealed virtual ConditionalFormattingRule Convert(IXLConditionalFormat cf, int priority, SaveContext context);
    private ConditionalFormattingRuleExtension BuildRuleExtension(IXLConditionalFormat cf);
    private ConditionalFormatValueObject GetConditionalFormatValueObjectByIndex(IXLConditionalFormat cf, int index, ConditionalFormatValueObjectValues defaultType);
}
internal class ClosedXML.Excel.XLCFDataBarConverterExtension : object {
    [NullableContextAttribute("1")]
public sealed virtual ConditionalFormattingRule Convert(IXLConditionalFormat cf, SaveContext context);
    private ConditionalFormattingValueObjectTypeValues Convert(ConditionalFormatValueObjectValues obj);
}
internal class ClosedXML.Excel.XLCFDataBarMax : object {
    private XLConditionalFormat _conditionalFormat;
    public XLCFDataBarMax(XLConditionalFormat conditionalFormat);
    public sealed virtual void Maximum(XLCFContentType type, string value);
    public sealed virtual void Maximum(XLCFContentType type, double value);
    public sealed virtual void HighestValue();
}
internal class ClosedXML.Excel.XLCFDataBarMin : object {
    private XLConditionalFormat _conditionalFormat;
    public XLCFDataBarMin(XLConditionalFormat conditionalFormat);
    public sealed virtual IXLCFDataBarMax Minimum(XLCFContentType type, string value);
    public sealed virtual IXLCFDataBarMax Minimum(XLCFContentType type, double value);
    public sealed virtual IXLCFDataBarMax LowestValue();
}
internal class ClosedXML.Excel.XLCFDatesOccurringConverter : object {
    [NullableAttribute("1")]
private static IDictionary`2<XLTimePeriod, string> formulaTemplates;
    private static XLCFDatesOccurringConverter();
    [NullableContextAttribute("1")]
public sealed virtual ConditionalFormattingRule Convert(IXLConditionalFormat cf, int priority, SaveContext context);
}
internal class ClosedXML.Excel.XLCFEndsWithConverter : object {
    [NullableContextAttribute("1")]
public sealed virtual ConditionalFormattingRule Convert(IXLConditionalFormat cf, int priority, SaveContext context);
}
internal class ClosedXML.Excel.XLCFIconSet : object {
    private XLConditionalFormat _conditionalFormat;
    public XLCFIconSet(XLConditionalFormat conditionalFormat);
    public sealed virtual IXLCFIconSet AddValue(XLCFIconSetOperator setOperator, string value, XLCFContentType type);
    public sealed virtual IXLCFIconSet AddValue(XLCFIconSetOperator setOperator, double value, XLCFContentType type);
}
internal class ClosedXML.Excel.XLCFIconSetConverter : object {
    public sealed virtual ConditionalFormattingRule Convert(IXLConditionalFormat cf, int priority, SaveContext context);
}
public enum ClosedXML.Excel.XLCFIconSetOperator : Enum {
    public int value__;
    public static XLCFIconSetOperator GreaterThan;
    public static XLCFIconSetOperator EqualOrGreaterThan;
}
internal class ClosedXML.Excel.XLCFIsBlankConverter : object {
    [NullableContextAttribute("1")]
public sealed virtual ConditionalFormattingRule Convert(IXLConditionalFormat cf, int priority, SaveContext context);
}
internal class ClosedXML.Excel.XLCFIsErrorConverter : object {
    [NullableContextAttribute("1")]
public sealed virtual ConditionalFormattingRule Convert(IXLConditionalFormat cf, int priority, SaveContext context);
}
internal class ClosedXML.Excel.XLCFNotBlankConverter : object {
    [NullableContextAttribute("1")]
public sealed virtual ConditionalFormattingRule Convert(IXLConditionalFormat cf, int priority, SaveContext context);
}
internal class ClosedXML.Excel.XLCFNotContainsConverter : object {
    [NullableContextAttribute("1")]
public sealed virtual ConditionalFormattingRule Convert(IXLConditionalFormat cf, int priority, SaveContext context);
}
internal class ClosedXML.Excel.XLCFNotErrorConverter : object {
    [NullableContextAttribute("1")]
public sealed virtual ConditionalFormattingRule Convert(IXLConditionalFormat cf, int priority, SaveContext context);
}
public enum ClosedXML.Excel.XLCFOperator : Enum {
    public int value__;
    public static XLCFOperator Equal;
    public static XLCFOperator NotEqual;
    public static XLCFOperator GreaterThan;
    public static XLCFOperator LessThan;
    public static XLCFOperator EqualOrGreaterThan;
    public static XLCFOperator EqualOrLessThan;
    public static XLCFOperator Between;
    public static XLCFOperator NotBetween;
    public static XLCFOperator Contains;
    public static XLCFOperator NotContains;
    public static XLCFOperator StartsWith;
    public static XLCFOperator EndsWith;
}
internal class ClosedXML.Excel.XLCFStartsWithConverter : object {
    [NullableContextAttribute("1")]
public sealed virtual ConditionalFormattingRule Convert(IXLConditionalFormat cf, int priority, SaveContext context);
}
internal class ClosedXML.Excel.XLCFTopConverter : object {
    [NullableContextAttribute("1")]
public sealed virtual ConditionalFormattingRule Convert(IXLConditionalFormat cf, int priority, SaveContext context);
}
internal class ClosedXML.Excel.XLCFUniqueConverter : object {
    [NullableContextAttribute("1")]
public sealed virtual ConditionalFormattingRule Convert(IXLConditionalFormat cf, int priority, SaveContext context);
}
internal class ClosedXML.Excel.XLChart : XLDrawing`1<IXLChart> {
    internal IXLWorksheet worksheet;
    [CompilerGeneratedAttribute]
private bool <RightAngleAxes>k__BackingField;
    [CompilerGeneratedAttribute]
private XLChartType <ChartType>k__BackingField;
    private HashSet`1<XLChartType> Bar3DCharts;
    private HashSet`1<XLChartType> HorizontalCharts;
    public HashSet`1<XLChartType> ClusteredCharts;
    public HashSet`1<XLChartType> PercentCharts;
    public HashSet`1<XLChartType> StackedCharts;
    public bool RightAngleAxes { get; public set; }
    public XLChartType ChartType { get; public set; }
    public XLChartTypeCategory ChartTypeCategory { get; }
    public XLBarOrientation BarOrientation { get; }
    public XLBarGrouping BarGrouping { get; }
    public XLChart(XLWorksheet worksheet);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_RightAngleAxes();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RightAngleAxes(bool value);
    public sealed virtual IXLChart SetRightAngleAxes();
    public sealed virtual IXLChart SetRightAngleAxes(bool rightAngleAxes);
    [CompilerGeneratedAttribute]
public sealed virtual XLChartType get_ChartType();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ChartType(XLChartType value);
    public sealed virtual IXLChart SetChartType(XLChartType chartType);
    public XLChartTypeCategory get_ChartTypeCategory();
    public XLBarOrientation get_BarOrientation();
    public XLBarGrouping get_BarGrouping();
}
internal class ClosedXML.Excel.XLCharts : object {
    private List`1<IXLChart> charts;
    public sealed virtual IEnumerator`1<IXLChart> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual void Add(IXLChart chart);
}
public enum ClosedXML.Excel.XLChartType : Enum {
    public int value__;
    public static XLChartType Area;
    public static XLChartType Area3D;
    public static XLChartType AreaStacked;
    public static XLChartType AreaStacked100Percent;
    public static XLChartType AreaStacked100Percent3D;
    public static XLChartType AreaStacked3D;
    public static XLChartType BarClustered;
    public static XLChartType BarClustered3D;
    public static XLChartType BarStacked;
    public static XLChartType BarStacked100Percent;
    public static XLChartType BarStacked100Percent3D;
    public static XLChartType BarStacked3D;
    public static XLChartType Bubble;
    public static XLChartType Bubble3D;
    public static XLChartType Column3D;
    public static XLChartType ColumnClustered;
    public static XLChartType ColumnClustered3D;
    public static XLChartType ColumnStacked;
    public static XLChartType ColumnStacked100Percent;
    public static XLChartType ColumnStacked100Percent3D;
    public static XLChartType ColumnStacked3D;
    public static XLChartType Cone;
    public static XLChartType ConeClustered;
    public static XLChartType ConeHorizontalClustered;
    public static XLChartType ConeHorizontalStacked;
    public static XLChartType ConeHorizontalStacked100Percent;
    public static XLChartType ConeStacked;
    public static XLChartType ConeStacked100Percent;
    public static XLChartType Cylinder;
    public static XLChartType CylinderClustered;
    public static XLChartType CylinderHorizontalClustered;
    public static XLChartType CylinderHorizontalStacked;
    public static XLChartType CylinderHorizontalStacked100Percent;
    public static XLChartType CylinderStacked;
    public static XLChartType CylinderStacked100Percent;
    public static XLChartType Doughnut;
    public static XLChartType DoughnutExploded;
    public static XLChartType Line;
    public static XLChartType Line3D;
    public static XLChartType LineStacked;
    public static XLChartType LineStacked100Percent;
    public static XLChartType LineWithMarkers;
    public static XLChartType LineWithMarkersStacked;
    public static XLChartType LineWithMarkersStacked100Percent;
    public static XLChartType Pie;
    public static XLChartType Pie3D;
    public static XLChartType PieExploded;
    public static XLChartType PieExploded3D;
    public static XLChartType PieToBar;
    public static XLChartType PieToPie;
    public static XLChartType Pyramid;
    public static XLChartType PyramidClustered;
    public static XLChartType PyramidHorizontalClustered;
    public static XLChartType PyramidHorizontalStacked;
    public static XLChartType PyramidHorizontalStacked100Percent;
    public static XLChartType PyramidStacked;
    public static XLChartType PyramidStacked100Percent;
    public static XLChartType Radar;
    public static XLChartType RadarFilled;
    public static XLChartType RadarWithMarkers;
    public static XLChartType StockHighLowClose;
    public static XLChartType StockOpenHighLowClose;
    public static XLChartType StockVolumeHighLowClose;
    public static XLChartType StockVolumeOpenHighLowClose;
    public static XLChartType Surface;
    public static XLChartType SurfaceContour;
    public static XLChartType SurfaceContourWireframe;
    public static XLChartType SurfaceWireframe;
    public static XLChartType XYScatterMarkers;
    public static XLChartType XYScatterSmoothLinesNoMarkers;
    public static XLChartType XYScatterSmoothLinesWithMarkers;
    public static XLChartType XYScatterStraightLinesNoMarkers;
    public static XLChartType XYScatterStraightLinesWithMarkers;
}
internal enum ClosedXML.Excel.XLChartTypeCategory : Enum {
    public int value__;
    public static XLChartTypeCategory Bar3D;
}
[FlagsAttribute]
public enum ClosedXML.Excel.XLClearOptions : Enum {
    public int value__;
    public static XLClearOptions Contents;
    public static XLClearOptions NormalFormats;
    public static XLClearOptions ConditionalFormats;
    public static XLClearOptions Comments;
    public static XLClearOptions DataValidation;
    public static XLClearOptions MergedRanges;
    public static XLClearOptions Sparklines;
    public static XLClearOptions AllFormats;
    public static XLClearOptions AllContents;
    public static XLClearOptions All;
}
[ExtensionAttribute]
internal static class ClosedXML.Excel.XLClearOptionsExtensions : object {
    [ExtensionAttribute]
public static XLCellsUsedOptions ToCellsUsedOptions(XLClearOptions options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ClosedXML.Excel.XLColor : object {
    [CompilerGeneratedAttribute]
private XLColorKey <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasValue>k__BackingField;
    private static XLColorRepository Repository;
    private static Lazy`1<Dictionary`2<string, XLColor>> _paletteEntries;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Dictionary`2<int, XLColor> _indexedColors;
    [CompilerGeneratedAttribute]
private static XLColor <NoColor>k__BackingField;
    internal XLColorKey Key { get; private set; }
    public bool HasValue { get; private set; }
    public XLColorType ColorType { get; }
    public Color Color { get; }
    public int Indexed { get; }
    public XLThemeColor ThemeColor { get; }
    public double ThemeTint { get; }
    public static Dictionary`2<int, XLColor> IndexedColors { get; }
    public static XLColor NoColor { get; }
    public static XLColor AliceBlue { get; }
    public static XLColor AntiqueWhite { get; }
    public static XLColor Aqua { get; }
    public static XLColor Aquamarine { get; }
    public static XLColor Azure { get; }
    public static XLColor Beige { get; }
    public static XLColor Bisque { get; }
    public static XLColor Black { get; }
    public static XLColor BlanchedAlmond { get; }
    public static XLColor Blue { get; }
    public static XLColor BlueViolet { get; }
    public static XLColor Brown { get; }
    public static XLColor BurlyWood { get; }
    public static XLColor CadetBlue { get; }
    public static XLColor Chartreuse { get; }
    public static XLColor Chocolate { get; }
    public static XLColor Coral { get; }
    public static XLColor CornflowerBlue { get; }
    public static XLColor Cornsilk { get; }
    public static XLColor Crimson { get; }
    public static XLColor Cyan { get; }
    public static XLColor DarkBlue { get; }
    public static XLColor DarkCyan { get; }
    public static XLColor DarkGoldenrod { get; }
    public static XLColor DarkGray { get; }
    public static XLColor DarkGreen { get; }
    public static XLColor DarkKhaki { get; }
    public static XLColor DarkMagenta { get; }
    public static XLColor DarkOliveGreen { get; }
    public static XLColor DarkOrange { get; }
    public static XLColor DarkOrchid { get; }
    public static XLColor DarkRed { get; }
    public static XLColor DarkSalmon { get; }
    public static XLColor DarkSeaGreen { get; }
    public static XLColor DarkSlateBlue { get; }
    public static XLColor DarkSlateGray { get; }
    public static XLColor DarkTurquoise { get; }
    public static XLColor DarkViolet { get; }
    public static XLColor DeepPink { get; }
    public static XLColor DeepSkyBlue { get; }
    public static XLColor DimGray { get; }
    public static XLColor DodgerBlue { get; }
    public static XLColor Firebrick { get; }
    public static XLColor FloralWhite { get; }
    public static XLColor ForestGreen { get; }
    public static XLColor Fuchsia { get; }
    public static XLColor Gainsboro { get; }
    public static XLColor GhostWhite { get; }
    public static XLColor Gold { get; }
    public static XLColor Goldenrod { get; }
    public static XLColor Gray { get; }
    public static XLColor Green { get; }
    public static XLColor GreenYellow { get; }
    public static XLColor Honeydew { get; }
    public static XLColor HotPink { get; }
    public static XLColor IndianRed { get; }
    public static XLColor Indigo { get; }
    public static XLColor Ivory { get; }
    public static XLColor Khaki { get; }
    public static XLColor Lavender { get; }
    public static XLColor LavenderBlush { get; }
    public static XLColor LawnGreen { get; }
    public static XLColor LemonChiffon { get; }
    public static XLColor LightBlue { get; }
    public static XLColor LightCoral { get; }
    public static XLColor LightCyan { get; }
    public static XLColor LightGoldenrodYellow { get; }
    public static XLColor LightGray { get; }
    public static XLColor LightGreen { get; }
    public static XLColor LightPink { get; }
    public static XLColor LightSalmon { get; }
    public static XLColor LightSeaGreen { get; }
    public static XLColor LightSkyBlue { get; }
    public static XLColor LightSlateGray { get; }
    public static XLColor LightSteelBlue { get; }
    public static XLColor LightYellow { get; }
    public static XLColor Lime { get; }
    public static XLColor LimeGreen { get; }
    public static XLColor Linen { get; }
    public static XLColor Magenta { get; }
    public static XLColor Maroon { get; }
    public static XLColor MediumAquamarine { get; }
    public static XLColor MediumBlue { get; }
    public static XLColor MediumOrchid { get; }
    public static XLColor MediumPurple { get; }
    public static XLColor MediumSeaGreen { get; }
    public static XLColor MediumSlateBlue { get; }
    public static XLColor MediumSpringGreen { get; }
    public static XLColor MediumTurquoise { get; }
    public static XLColor MediumVioletRed { get; }
    public static XLColor MidnightBlue { get; }
    public static XLColor MintCream { get; }
    public static XLColor MistyRose { get; }
    public static XLColor Moccasin { get; }
    public static XLColor NavajoWhite { get; }
    public static XLColor Navy { get; }
    public static XLColor OldLace { get; }
    public static XLColor Olive { get; }
    public static XLColor OliveDrab { get; }
    public static XLColor Orange { get; }
    public static XLColor OrangeRed { get; }
    public static XLColor Orchid { get; }
    public static XLColor PaleGoldenrod { get; }
    public static XLColor PaleGreen { get; }
    public static XLColor PaleTurquoise { get; }
    public static XLColor PaleVioletRed { get; }
    public static XLColor PapayaWhip { get; }
    public static XLColor PeachPuff { get; }
    public static XLColor Peru { get; }
    public static XLColor Pink { get; }
    public static XLColor Plum { get; }
    public static XLColor PowderBlue { get; }
    public static XLColor Purple { get; }
    public static XLColor Red { get; }
    public static XLColor RosyBrown { get; }
    public static XLColor RoyalBlue { get; }
    public static XLColor SaddleBrown { get; }
    public static XLColor Salmon { get; }
    public static XLColor SandyBrown { get; }
    public static XLColor SeaGreen { get; }
    public static XLColor SeaShell { get; }
    public static XLColor Sienna { get; }
    public static XLColor Silver { get; }
    public static XLColor SkyBlue { get; }
    public static XLColor SlateBlue { get; }
    public static XLColor SlateGray { get; }
    public static XLColor Snow { get; }
    public static XLColor SpringGreen { get; }
    public static XLColor SteelBlue { get; }
    public static XLColor Tan { get; }
    public static XLColor Teal { get; }
    public static XLColor Thistle { get; }
    public static XLColor Tomato { get; }
    public static XLColor Turquoise { get; }
    public static XLColor Violet { get; }
    public static XLColor Wheat { get; }
    public static XLColor White { get; }
    public static XLColor WhiteSmoke { get; }
    public static XLColor Yellow { get; }
    public static XLColor YellowGreen { get; }
    public static XLColor AirForceBlue { get; }
    public static XLColor Alizarin { get; }
    public static XLColor Almond { get; }
    public static XLColor Amaranth { get; }
    public static XLColor Amber { get; }
    public static XLColor AmberSaeEce { get; }
    public static XLColor AmericanRose { get; }
    public static XLColor Amethyst { get; }
    public static XLColor AntiFlashWhite { get; }
    public static XLColor AntiqueBrass { get; }
    public static XLColor AntiqueFuchsia { get; }
    public static XLColor AppleGreen { get; }
    public static XLColor Apricot { get; }
    public static XLColor Aquamarine1 { get; }
    public static XLColor ArmyGreen { get; }
    public static XLColor Arsenic { get; }
    public static XLColor ArylideYellow { get; }
    public static XLColor AshGrey { get; }
    public static XLColor Asparagus { get; }
    public static XLColor AtomicTangerine { get; }
    public static XLColor Auburn { get; }
    public static XLColor Aureolin { get; }
    public static XLColor Aurometalsaurus { get; }
    public static XLColor Awesome { get; }
    public static XLColor AzureColorWheel { get; }
    public static XLColor BabyBlue { get; }
    public static XLColor BabyBlueEyes { get; }
    public static XLColor BabyPink { get; }
    public static XLColor BallBlue { get; }
    public static XLColor BananaMania { get; }
    public static XLColor BattleshipGrey { get; }
    public static XLColor Bazaar { get; }
    public static XLColor BeauBlue { get; }
    public static XLColor Beaver { get; }
    public static XLColor Bistre { get; }
    public static XLColor Bittersweet { get; }
    public static XLColor BleuDeFrance { get; }
    public static XLColor BlizzardBlue { get; }
    public static XLColor Blond { get; }
    public static XLColor BlueBell { get; }
    public static XLColor BlueGray { get; }
    public static XLColor BlueGreen { get; }
    public static XLColor BluePigment { get; }
    public static XLColor BlueRyb { get; }
    public static XLColor Blush { get; }
    public static XLColor Bole { get; }
    public static XLColor BondiBlue { get; }
    public static XLColor BostonUniversityRed { get; }
    public static XLColor BrandeisBlue { get; }
    public static XLColor Brass { get; }
    public static XLColor BrickRed { get; }
    public static XLColor BrightCerulean { get; }
    public static XLColor BrightGreen { get; }
    public static XLColor BrightLavender { get; }
    public static XLColor BrightMaroon { get; }
    public static XLColor BrightPink { get; }
    public static XLColor BrightTurquoise { get; }
    public static XLColor BrightUbe { get; }
    public static XLColor BrilliantLavender { get; }
    public static XLColor BrilliantRose { get; }
    public static XLColor BrinkPink { get; }
    public static XLColor BritishRacingGreen { get; }
    public static XLColor Bronze { get; }
    public static XLColor BrownTraditional { get; }
    public static XLColor BubbleGum { get; }
    public static XLColor Bubbles { get; }
    public static XLColor Buff { get; }
    public static XLColor BulgarianRose { get; }
    public static XLColor Burgundy { get; }
    public static XLColor BurntOrange { get; }
    public static XLColor BurntSienna { get; }
    public static XLColor BurntUmber { get; }
    public static XLColor Byzantine { get; }
    public static XLColor Byzantium { get; }
    public static XLColor Cadet { get; }
    public static XLColor CadetGrey { get; }
    public static XLColor CadmiumGreen { get; }
    public static XLColor CadmiumOrange { get; }
    public static XLColor CadmiumRed { get; }
    public static XLColor CadmiumYellow { get; }
    public static XLColor CalPolyPomonaGreen { get; }
    public static XLColor CambridgeBlue { get; }
    public static XLColor Camel { get; }
    public static XLColor CamouflageGreen { get; }
    public static XLColor CanaryYellow { get; }
    public static XLColor CandyAppleRed { get; }
    public static XLColor CandyPink { get; }
    public static XLColor CaputMortuum { get; }
    public static XLColor Cardinal { get; }
    public static XLColor CaribbeanGreen { get; }
    public static XLColor Carmine { get; }
    public static XLColor CarminePink { get; }
    public static XLColor CarmineRed { get; }
    public static XLColor CarnationPink { get; }
    public static XLColor Carnelian { get; }
    public static XLColor CarolinaBlue { get; }
    public static XLColor CarrotOrange { get; }
    public static XLColor Ceil { get; }
    public static XLColor Celadon { get; }
    public static XLColor CelestialBlue { get; }
    public static XLColor Cerise { get; }
    public static XLColor CerisePink { get; }
    public static XLColor Cerulean { get; }
    public static XLColor CeruleanBlue { get; }
    public static XLColor Chamoisee { get; }
    public static XLColor Champagne { get; }
    public static XLColor Charcoal { get; }
    public static XLColor ChartreuseTraditional { get; }
    public static XLColor CherryBlossomPink { get; }
    public static XLColor Chocolate1 { get; }
    public static XLColor ChromeYellow { get; }
    public static XLColor Cinereous { get; }
    public static XLColor Cinnabar { get; }
    public static XLColor Citrine { get; }
    public static XLColor ClassicRose { get; }
    public static XLColor Cobalt { get; }
    public static XLColor ColumbiaBlue { get; }
    public static XLColor CoolBlack { get; }
    public static XLColor CoolGrey { get; }
    public static XLColor Copper { get; }
    public static XLColor CopperRose { get; }
    public static XLColor Coquelicot { get; }
    public static XLColor CoralPink { get; }
    public static XLColor CoralRed { get; }
    public static XLColor Cordovan { get; }
    public static XLColor Corn { get; }
    public static XLColor CornellRed { get; }
    public static XLColor CosmicLatte { get; }
    public static XLColor CottonCandy { get; }
    public static XLColor Cream { get; }
    public static XLColor CrimsonGlory { get; }
    public static XLColor CyanProcess { get; }
    public static XLColor Daffodil { get; }
    public static XLColor Dandelion { get; }
    public static XLColor DarkBrown { get; }
    public static XLColor DarkByzantium { get; }
    public static XLColor DarkCandyAppleRed { get; }
    public static XLColor DarkCerulean { get; }
    public static XLColor DarkChampagne { get; }
    public static XLColor DarkChestnut { get; }
    public static XLColor DarkCoral { get; }
    public static XLColor DarkElectricBlue { get; }
    public static XLColor DarkGreen1 { get; }
    public static XLColor DarkJungleGreen { get; }
    public static XLColor DarkLava { get; }
    public static XLColor DarkLavender { get; }
    public static XLColor DarkMidnightBlue { get; }
    public static XLColor DarkPastelBlue { get; }
    public static XLColor DarkPastelGreen { get; }
    public static XLColor DarkPastelPurple { get; }
    public static XLColor DarkPastelRed { get; }
    public static XLColor DarkPink { get; }
    public static XLColor DarkPowderBlue { get; }
    public static XLColor DarkRaspberry { get; }
    public static XLColor DarkScarlet { get; }
    public static XLColor DarkSienna { get; }
    public static XLColor DarkSpringGreen { get; }
    public static XLColor DarkTan { get; }
    public static XLColor DarkTangerine { get; }
    public static XLColor DarkTaupe { get; }
    public static XLColor DarkTerraCotta { get; }
    public static XLColor DartmouthGreen { get; }
    public static XLColor DavysGrey { get; }
    public static XLColor DebianRed { get; }
    public static XLColor DeepCarmine { get; }
    public static XLColor DeepCarminePink { get; }
    public static XLColor DeepCarrotOrange { get; }
    public static XLColor DeepCerise { get; }
    public static XLColor DeepChampagne { get; }
    public static XLColor DeepChestnut { get; }
    public static XLColor DeepFuchsia { get; }
    public static XLColor DeepJungleGreen { get; }
    public static XLColor DeepLilac { get; }
    public static XLColor DeepMagenta { get; }
    public static XLColor DeepPeach { get; }
    public static XLColor DeepSaffron { get; }
    public static XLColor Denim { get; }
    public static XLColor Desert { get; }
    public static XLColor DesertSand { get; }
    public static XLColor DogwoodRose { get; }
    public static XLColor DollarBill { get; }
    public static XLColor Drab { get; }
    public static XLColor DukeBlue { get; }
    public static XLColor EarthYellow { get; }
    public static XLColor Ecru { get; }
    public static XLColor Eggplant { get; }
    public static XLColor Eggshell { get; }
    public static XLColor EgyptianBlue { get; }
    public static XLColor ElectricBlue { get; }
    public static XLColor ElectricCrimson { get; }
    public static XLColor ElectricIndigo { get; }
    public static XLColor ElectricLavender { get; }
    public static XLColor ElectricLime { get; }
    public static XLColor ElectricPurple { get; }
    public static XLColor ElectricUltramarine { get; }
    public static XLColor ElectricViolet { get; }
    public static XLColor Emerald { get; }
    public static XLColor EtonBlue { get; }
    public static XLColor Fallow { get; }
    public static XLColor FaluRed { get; }
    public static XLColor Fandango { get; }
    public static XLColor FashionFuchsia { get; }
    public static XLColor Fawn { get; }
    public static XLColor Feldgrau { get; }
    public static XLColor FernGreen { get; }
    public static XLColor FerrariRed { get; }
    public static XLColor FieldDrab { get; }
    public static XLColor FireEngineRed { get; }
    public static XLColor Flame { get; }
    public static XLColor FlamingoPink { get; }
    public static XLColor Flavescent { get; }
    public static XLColor Flax { get; }
    public static XLColor FluorescentOrange { get; }
    public static XLColor FluorescentYellow { get; }
    public static XLColor Folly { get; }
    public static XLColor ForestGreenTraditional { get; }
    public static XLColor FrenchBeige { get; }
    public static XLColor FrenchBlue { get; }
    public static XLColor FrenchLilac { get; }
    public static XLColor FrenchRose { get; }
    public static XLColor FuchsiaPink { get; }
    public static XLColor Fulvous { get; }
    public static XLColor FuzzyWuzzy { get; }
    public static XLColor Gamboge { get; }
    public static XLColor Ginger { get; }
    public static XLColor Glaucous { get; }
    public static XLColor GoldenBrown { get; }
    public static XLColor GoldenPoppy { get; }
    public static XLColor GoldenYellow { get; }
    public static XLColor GoldMetallic { get; }
    public static XLColor GrannySmithApple { get; }
    public static XLColor GrayAsparagus { get; }
    public static XLColor GreenPigment { get; }
    public static XLColor GreenRyb { get; }
    public static XLColor Grullo { get; }
    public static XLColor HalayaUbe { get; }
    public static XLColor HanBlue { get; }
    public static XLColor HanPurple { get; }
    public static XLColor HansaYellow { get; }
    public static XLColor Harlequin { get; }
    public static XLColor HarvardCrimson { get; }
    public static XLColor HarvestGold { get; }
    public static XLColor Heliotrope { get; }
    public static XLColor HollywoodCerise { get; }
    public static XLColor HookersGreen { get; }
    public static XLColor HotMagenta { get; }
    public static XLColor HunterGreen { get; }
    public static XLColor Iceberg { get; }
    public static XLColor Icterine { get; }
    public static XLColor Inchworm { get; }
    public static XLColor IndiaGreen { get; }
    public static XLColor IndianYellow { get; }
    public static XLColor IndigoDye { get; }
    public static XLColor InternationalKleinBlue { get; }
    public static XLColor InternationalOrange { get; }
    public static XLColor Iris { get; }
    public static XLColor Isabelline { get; }
    public static XLColor IslamicGreen { get; }
    public static XLColor Jade { get; }
    public static XLColor Jasper { get; }
    public static XLColor JazzberryJam { get; }
    public static XLColor Jonquil { get; }
    public static XLColor JuneBud { get; }
    public static XLColor JungleGreen { get; }
    public static XLColor KellyGreen { get; }
    public static XLColor KhakiHtmlCssKhaki { get; }
    public static XLColor LanguidLavender { get; }
    public static XLColor LapisLazuli { get; }
    public static XLColor LaSalleGreen { get; }
    public static XLColor LaserLemon { get; }
    public static XLColor Lava { get; }
    public static XLColor LavenderBlue { get; }
    public static XLColor LavenderFloral { get; }
    public static XLColor LavenderGray { get; }
    public static XLColor LavenderIndigo { get; }
    public static XLColor LavenderPink { get; }
    public static XLColor LavenderPurple { get; }
    public static XLColor LavenderRose { get; }
    public static XLColor Lemon { get; }
    public static XLColor LightApricot { get; }
    public static XLColor LightBrown { get; }
    public static XLColor LightCarminePink { get; }
    public static XLColor LightCornflowerBlue { get; }
    public static XLColor LightFuchsiaPink { get; }
    public static XLColor LightMauve { get; }
    public static XLColor LightPastelPurple { get; }
    public static XLColor LightSalmonPink { get; }
    public static XLColor LightTaupe { get; }
    public static XLColor LightThulianPink { get; }
    public static XLColor LightYellow1 { get; }
    public static XLColor Lilac { get; }
    public static XLColor LimeColorWheel { get; }
    public static XLColor LincolnGreen { get; }
    public static XLColor Liver { get; }
    public static XLColor Lust { get; }
    public static XLColor MacaroniAndCheese { get; }
    public static XLColor MagentaDye { get; }
    public static XLColor MagentaProcess { get; }
    public static XLColor MagicMint { get; }
    public static XLColor Magnolia { get; }
    public static XLColor Mahogany { get; }
    public static XLColor Maize { get; }
    public static XLColor MajorelleBlue { get; }
    public static XLColor Malachite { get; }
    public static XLColor Manatee { get; }
    public static XLColor MangoTango { get; }
    public static XLColor MaroonX11 { get; }
    public static XLColor Mauve { get; }
    public static XLColor Mauvelous { get; }
    public static XLColor MauveTaupe { get; }
    public static XLColor MayaBlue { get; }
    public static XLColor MeatBrown { get; }
    public static XLColor MediumAquamarine1 { get; }
    public static XLColor MediumCandyAppleRed { get; }
    public static XLColor MediumCarmine { get; }
    public static XLColor MediumChampagne { get; }
    public static XLColor MediumElectricBlue { get; }
    public static XLColor MediumJungleGreen { get; }
    public static XLColor MediumPersianBlue { get; }
    public static XLColor MediumRedViolet { get; }
    public static XLColor MediumSpringBud { get; }
    public static XLColor MediumTaupe { get; }
    public static XLColor Melon { get; }
    public static XLColor MidnightGreenEagleGreen { get; }
    public static XLColor MikadoYellow { get; }
    public static XLColor Mint { get; }
    public static XLColor MintGreen { get; }
    public static XLColor ModeBeige { get; }
    public static XLColor MoonstoneBlue { get; }
    public static XLColor MordantRed19 { get; }
    public static XLColor MossGreen { get; }
    public static XLColor MountainMeadow { get; }
    public static XLColor MountbattenPink { get; }
    public static XLColor MsuGreen { get; }
    public static XLColor Mulberry { get; }
    public static XLColor Mustard { get; }
    public static XLColor Myrtle { get; }
    public static XLColor NadeshikoPink { get; }
    public static XLColor NapierGreen { get; }
    public static XLColor NaplesYellow { get; }
    public static XLColor NeonCarrot { get; }
    public static XLColor NeonFuchsia { get; }
    public static XLColor NeonGreen { get; }
    public static XLColor NonPhotoBlue { get; }
    public static XLColor OceanBoatBlue { get; }
    public static XLColor Ochre { get; }
    public static XLColor OldGold { get; }
    public static XLColor OldLavender { get; }
    public static XLColor OldMauve { get; }
    public static XLColor OldRose { get; }
    public static XLColor OliveDrab7 { get; }
    public static XLColor Olivine { get; }
    public static XLColor Onyx { get; }
    public static XLColor OperaMauve { get; }
    public static XLColor OrangeColorWheel { get; }
    public static XLColor OrangePeel { get; }
    public static XLColor OrangeRyb { get; }
    public static XLColor OtterBrown { get; }
    public static XLColor OuCrimsonRed { get; }
    public static XLColor OuterSpace { get; }
    public static XLColor OutrageousOrange { get; }
    public static XLColor OxfordBlue { get; }
    public static XLColor PakistanGreen { get; }
    public static XLColor PalatinateBlue { get; }
    public static XLColor PalatinatePurple { get; }
    public static XLColor PaleAqua { get; }
    public static XLColor PaleBrown { get; }
    public static XLColor PaleCarmine { get; }
    public static XLColor PaleCerulean { get; }
    public static XLColor PaleChestnut { get; }
    public static XLColor PaleCopper { get; }
    public static XLColor PaleCornflowerBlue { get; }
    public static XLColor PaleGold { get; }
    public static XLColor PaleMagenta { get; }
    public static XLColor PalePink { get; }
    public static XLColor PaleRobinEggBlue { get; }
    public static XLColor PaleSilver { get; }
    public static XLColor PaleSpringBud { get; }
    public static XLColor PaleTaupe { get; }
    public static XLColor PansyPurple { get; }
    public static XLColor ParisGreen { get; }
    public static XLColor PastelBlue { get; }
    public static XLColor PastelBrown { get; }
    public static XLColor PastelGray { get; }
    public static XLColor PastelGreen { get; }
    public static XLColor PastelMagenta { get; }
    public static XLColor PastelOrange { get; }
    public static XLColor PastelPink { get; }
    public static XLColor PastelPurple { get; }
    public static XLColor PastelRed { get; }
    public static XLColor PastelViolet { get; }
    public static XLColor PastelYellow { get; }
    public static XLColor PaynesGrey { get; }
    public static XLColor Peach { get; }
    public static XLColor PeachOrange { get; }
    public static XLColor PeachYellow { get; }
    public static XLColor Pear { get; }
    public static XLColor Pearl { get; }
    public static XLColor Peridot { get; }
    public static XLColor Periwinkle { get; }
    public static XLColor PersianBlue { get; }
    public static XLColor PersianGreen { get; }
    public static XLColor PersianIndigo { get; }
    public static XLColor PersianOrange { get; }
    public static XLColor PersianPink { get; }
    public static XLColor PersianPlum { get; }
    public static XLColor PersianRed { get; }
    public static XLColor PersianRose { get; }
    public static XLColor Persimmon { get; }
    public static XLColor Phlox { get; }
    public static XLColor PhthaloBlue { get; }
    public static XLColor PhthaloGreen { get; }
    public static XLColor PiggyPink { get; }
    public static XLColor PineGreen { get; }
    public static XLColor PinkOrange { get; }
    public static XLColor PinkPearl { get; }
    public static XLColor PinkSherbet { get; }
    public static XLColor Pistachio { get; }
    public static XLColor Platinum { get; }
    public static XLColor PlumTraditional { get; }
    public static XLColor PortlandOrange { get; }
    public static XLColor PrincetonOrange { get; }
    public static XLColor Prune { get; }
    public static XLColor PrussianBlue { get; }
    public static XLColor PsychedelicPurple { get; }
    public static XLColor Puce { get; }
    public static XLColor Pumpkin { get; }
    public static XLColor PurpleHeart { get; }
    public static XLColor PurpleMountainMajesty { get; }
    public static XLColor PurpleMunsell { get; }
    public static XLColor PurplePizzazz { get; }
    public static XLColor PurpleTaupe { get; }
    public static XLColor PurpleX11 { get; }
    public static XLColor RadicalRed { get; }
    public static XLColor Raspberry { get; }
    public static XLColor RaspberryGlace { get; }
    public static XLColor RaspberryPink { get; }
    public static XLColor RaspberryRose { get; }
    public static XLColor RawUmber { get; }
    public static XLColor RazzleDazzleRose { get; }
    public static XLColor Razzmatazz { get; }
    public static XLColor RedMunsell { get; }
    public static XLColor RedNcs { get; }
    public static XLColor RedPigment { get; }
    public static XLColor RedRyb { get; }
    public static XLColor Redwood { get; }
    public static XLColor Regalia { get; }
    public static XLColor RichBlack { get; }
    public static XLColor RichBrilliantLavender { get; }
    public static XLColor RichCarmine { get; }
    public static XLColor RichElectricBlue { get; }
    public static XLColor RichLavender { get; }
    public static XLColor RichLilac { get; }
    public static XLColor RichMaroon { get; }
    public static XLColor RifleGreen { get; }
    public static XLColor RobinEggBlue { get; }
    public static XLColor Rose { get; }
    public static XLColor RoseBonbon { get; }
    public static XLColor RoseEbony { get; }
    public static XLColor RoseGold { get; }
    public static XLColor RoseMadder { get; }
    public static XLColor RosePink { get; }
    public static XLColor RoseQuartz { get; }
    public static XLColor RoseTaupe { get; }
    public static XLColor RoseVale { get; }
    public static XLColor Rosewood { get; }
    public static XLColor RossoCorsa { get; }
    public static XLColor RoyalAzure { get; }
    public static XLColor RoyalBlueTraditional { get; }
    public static XLColor RoyalFuchsia { get; }
    public static XLColor RoyalPurple { get; }
    public static XLColor Ruby { get; }
    public static XLColor Ruddy { get; }
    public static XLColor RuddyBrown { get; }
    public static XLColor RuddyPink { get; }
    public static XLColor Rufous { get; }
    public static XLColor Russet { get; }
    public static XLColor Rust { get; }
    public static XLColor SacramentoStateGreen { get; }
    public static XLColor SafetyOrangeBlazeOrange { get; }
    public static XLColor Saffron { get; }
    public static XLColor Salmon1 { get; }
    public static XLColor SalmonPink { get; }
    public static XLColor Sand { get; }
    public static XLColor SandDune { get; }
    public static XLColor Sandstorm { get; }
    public static XLColor SandyTaupe { get; }
    public static XLColor Sangria { get; }
    public static XLColor SapGreen { get; }
    public static XLColor Sapphire { get; }
    public static XLColor SatinSheenGold { get; }
    public static XLColor Scarlet { get; }
    public static XLColor SchoolBusYellow { get; }
    public static XLColor ScreaminGreen { get; }
    public static XLColor SealBrown { get; }
    public static XLColor SelectiveYellow { get; }
    public static XLColor Sepia { get; }
    public static XLColor Shadow { get; }
    public static XLColor ShamrockGreen { get; }
    public static XLColor ShockingPink { get; }
    public static XLColor Sienna1 { get; }
    public static XLColor Sinopia { get; }
    public static XLColor Skobeloff { get; }
    public static XLColor SkyMagenta { get; }
    public static XLColor SmaltDarkPowderBlue { get; }
    public static XLColor SmokeyTopaz { get; }
    public static XLColor SmokyBlack { get; }
    public static XLColor SpiroDiscoBall { get; }
    public static XLColor SplashedWhite { get; }
    public static XLColor SpringBud { get; }
    public static XLColor StPatricksBlue { get; }
    public static XLColor StilDeGrainYellow { get; }
    public static XLColor Straw { get; }
    public static XLColor Sunglow { get; }
    public static XLColor Sunset { get; }
    public static XLColor Tangelo { get; }
    public static XLColor Tangerine { get; }
    public static XLColor TangerineYellow { get; }
    public static XLColor Taupe { get; }
    public static XLColor TaupeGray { get; }
    public static XLColor TeaGreen { get; }
    public static XLColor TealBlue { get; }
    public static XLColor TealGreen { get; }
    public static XLColor TeaRoseOrange { get; }
    public static XLColor TeaRoseRose { get; }
    public static XLColor TennéTawny { get; }
    public static XLColor TerraCotta { get; }
    public static XLColor ThulianPink { get; }
    public static XLColor TickleMePink { get; }
    public static XLColor TiffanyBlue { get; }
    public static XLColor TigersEye { get; }
    public static XLColor Timberwolf { get; }
    public static XLColor TitaniumYellow { get; }
    public static XLColor Toolbox { get; }
    public static XLColor TractorRed { get; }
    public static XLColor TropicalRainForest { get; }
    public static XLColor TuftsBlue { get; }
    public static XLColor Tumbleweed { get; }
    public static XLColor TurkishRose { get; }
    public static XLColor Turquoise1 { get; }
    public static XLColor TurquoiseBlue { get; }
    public static XLColor TurquoiseGreen { get; }
    public static XLColor TuscanRed { get; }
    public static XLColor TwilightLavender { get; }
    public static XLColor TyrianPurple { get; }
    public static XLColor UaBlue { get; }
    public static XLColor UaRed { get; }
    public static XLColor Ube { get; }
    public static XLColor UclaBlue { get; }
    public static XLColor UclaGold { get; }
    public static XLColor UfoGreen { get; }
    public static XLColor Ultramarine { get; }
    public static XLColor UltramarineBlue { get; }
    public static XLColor UltraPink { get; }
    public static XLColor Umber { get; }
    public static XLColor UnitedNationsBlue { get; }
    public static XLColor UnmellowYellow { get; }
    public static XLColor UpForestGreen { get; }
    public static XLColor UpMaroon { get; }
    public static XLColor UpsdellRed { get; }
    public static XLColor Urobilin { get; }
    public static XLColor UscCardinal { get; }
    public static XLColor UscGold { get; }
    public static XLColor UtahCrimson { get; }
    public static XLColor Vanilla { get; }
    public static XLColor VegasGold { get; }
    public static XLColor VenetianRed { get; }
    public static XLColor Verdigris { get; }
    public static XLColor Vermilion { get; }
    public static XLColor Veronica { get; }
    public static XLColor Violet1 { get; }
    public static XLColor VioletColorWheel { get; }
    public static XLColor VioletRyb { get; }
    public static XLColor Viridian { get; }
    public static XLColor VividAuburn { get; }
    public static XLColor VividBurgundy { get; }
    public static XLColor VividCerise { get; }
    public static XLColor VividTangerine { get; }
    public static XLColor VividViolet { get; }
    public static XLColor WarmBlack { get; }
    public static XLColor Wenge { get; }
    public static XLColor WildBlueYonder { get; }
    public static XLColor WildStrawberry { get; }
    public static XLColor WildWatermelon { get; }
    public static XLColor Wisteria { get; }
    public static XLColor Xanadu { get; }
    public static XLColor YaleBlue { get; }
    public static XLColor YellowMunsell { get; }
    public static XLColor YellowNcs { get; }
    public static XLColor YellowProcess { get; }
    public static XLColor YellowRyb { get; }
    public static XLColor Zaffre { get; }
    public static XLColor ZinnwalditeBrown { get; }
    public static XLColor Transparent { get; }
    [NullableContextAttribute("0")]
private XLColor(XLColor defaultColor);
    private XLColor(Color color);
    private XLColor(int index);
    private XLColor(XLThemeColor themeColor);
    private XLColor(XLThemeColor themeColor, double themeTint);
    internal XLColor(XLColorKey key);
    private static XLColor();
    [CompilerGeneratedAttribute]
internal XLColorKey get_Key();
    [CompilerGeneratedAttribute]
private void set_Key(XLColorKey value);
    [CompilerGeneratedAttribute]
public bool get_HasValue();
    [CompilerGeneratedAttribute]
private void set_HasValue(bool value);
    public XLColorType get_ColorType();
    public Color get_Color();
    public int get_Indexed();
    public XLThemeColor get_ThemeColor();
    public double get_ThemeTint();
    public sealed virtual bool Equals(XLColor other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    [NullableContextAttribute("2")]
public static bool op_Equality(XLColor left, XLColor right);
    [NullableContextAttribute("2")]
public static bool op_Inequality(XLColor left, XLColor right);
    internal static XLColor FromKey(XLColorKey& key);
    public static XLColor FromColor(Color color);
    public static XLColor FromArgb(int argb);
    public static XLColor FromArgb(int r, int g, int b);
    public static XLColor FromArgb(int a, int r, int g, int b);
    internal static XLColor FromRgb(int rgb);
    public static XLColor FromName(string name);
    public static XLColor FromHtml(string htmlColor);
    public static XLColor FromIndex(int index);
    public static XLColor FromTheme(XLThemeColor themeColor);
    public static XLColor FromTheme(XLThemeColor themeColor, double themeTint);
    internal static XLColor FromVmlColor(string colorType);
    public static Dictionary`2<int, XLColor> get_IndexedColors();
    internal static bool IsNullOrTransparent(XLColor color);
    internal static bool IsTransparent(XLColorKey& colorKey);
    [CompilerGeneratedAttribute]
public static XLColor get_NoColor();
    public static XLColor get_AliceBlue();
    public static XLColor get_AntiqueWhite();
    public static XLColor get_Aqua();
    public static XLColor get_Aquamarine();
    public static XLColor get_Azure();
    public static XLColor get_Beige();
    public static XLColor get_Bisque();
    public static XLColor get_Black();
    public static XLColor get_BlanchedAlmond();
    public static XLColor get_Blue();
    public static XLColor get_BlueViolet();
    public static XLColor get_Brown();
    public static XLColor get_BurlyWood();
    public static XLColor get_CadetBlue();
    public static XLColor get_Chartreuse();
    public static XLColor get_Chocolate();
    public static XLColor get_Coral();
    public static XLColor get_CornflowerBlue();
    public static XLColor get_Cornsilk();
    public static XLColor get_Crimson();
    public static XLColor get_Cyan();
    public static XLColor get_DarkBlue();
    public static XLColor get_DarkCyan();
    public static XLColor get_DarkGoldenrod();
    public static XLColor get_DarkGray();
    public static XLColor get_DarkGreen();
    public static XLColor get_DarkKhaki();
    public static XLColor get_DarkMagenta();
    public static XLColor get_DarkOliveGreen();
    public static XLColor get_DarkOrange();
    public static XLColor get_DarkOrchid();
    public static XLColor get_DarkRed();
    public static XLColor get_DarkSalmon();
    public static XLColor get_DarkSeaGreen();
    public static XLColor get_DarkSlateBlue();
    public static XLColor get_DarkSlateGray();
    public static XLColor get_DarkTurquoise();
    public static XLColor get_DarkViolet();
    public static XLColor get_DeepPink();
    public static XLColor get_DeepSkyBlue();
    public static XLColor get_DimGray();
    public static XLColor get_DodgerBlue();
    public static XLColor get_Firebrick();
    public static XLColor get_FloralWhite();
    public static XLColor get_ForestGreen();
    public static XLColor get_Fuchsia();
    public static XLColor get_Gainsboro();
    public static XLColor get_GhostWhite();
    public static XLColor get_Gold();
    public static XLColor get_Goldenrod();
    public static XLColor get_Gray();
    public static XLColor get_Green();
    public static XLColor get_GreenYellow();
    public static XLColor get_Honeydew();
    public static XLColor get_HotPink();
    public static XLColor get_IndianRed();
    public static XLColor get_Indigo();
    public static XLColor get_Ivory();
    public static XLColor get_Khaki();
    public static XLColor get_Lavender();
    public static XLColor get_LavenderBlush();
    public static XLColor get_LawnGreen();
    public static XLColor get_LemonChiffon();
    public static XLColor get_LightBlue();
    public static XLColor get_LightCoral();
    public static XLColor get_LightCyan();
    public static XLColor get_LightGoldenrodYellow();
    public static XLColor get_LightGray();
    public static XLColor get_LightGreen();
    public static XLColor get_LightPink();
    public static XLColor get_LightSalmon();
    public static XLColor get_LightSeaGreen();
    public static XLColor get_LightSkyBlue();
    public static XLColor get_LightSlateGray();
    public static XLColor get_LightSteelBlue();
    public static XLColor get_LightYellow();
    public static XLColor get_Lime();
    public static XLColor get_LimeGreen();
    public static XLColor get_Linen();
    public static XLColor get_Magenta();
    public static XLColor get_Maroon();
    public static XLColor get_MediumAquamarine();
    public static XLColor get_MediumBlue();
    public static XLColor get_MediumOrchid();
    public static XLColor get_MediumPurple();
    public static XLColor get_MediumSeaGreen();
    public static XLColor get_MediumSlateBlue();
    public static XLColor get_MediumSpringGreen();
    public static XLColor get_MediumTurquoise();
    public static XLColor get_MediumVioletRed();
    public static XLColor get_MidnightBlue();
    public static XLColor get_MintCream();
    public static XLColor get_MistyRose();
    public static XLColor get_Moccasin();
    public static XLColor get_NavajoWhite();
    public static XLColor get_Navy();
    public static XLColor get_OldLace();
    public static XLColor get_Olive();
    public static XLColor get_OliveDrab();
    public static XLColor get_Orange();
    public static XLColor get_OrangeRed();
    public static XLColor get_Orchid();
    public static XLColor get_PaleGoldenrod();
    public static XLColor get_PaleGreen();
    public static XLColor get_PaleTurquoise();
    public static XLColor get_PaleVioletRed();
    public static XLColor get_PapayaWhip();
    public static XLColor get_PeachPuff();
    public static XLColor get_Peru();
    public static XLColor get_Pink();
    public static XLColor get_Plum();
    public static XLColor get_PowderBlue();
    public static XLColor get_Purple();
    public static XLColor get_Red();
    public static XLColor get_RosyBrown();
    public static XLColor get_RoyalBlue();
    public static XLColor get_SaddleBrown();
    public static XLColor get_Salmon();
    public static XLColor get_SandyBrown();
    public static XLColor get_SeaGreen();
    public static XLColor get_SeaShell();
    public static XLColor get_Sienna();
    public static XLColor get_Silver();
    public static XLColor get_SkyBlue();
    public static XLColor get_SlateBlue();
    public static XLColor get_SlateGray();
    public static XLColor get_Snow();
    public static XLColor get_SpringGreen();
    public static XLColor get_SteelBlue();
    public static XLColor get_Tan();
    public static XLColor get_Teal();
    public static XLColor get_Thistle();
    public static XLColor get_Tomato();
    public static XLColor get_Turquoise();
    public static XLColor get_Violet();
    public static XLColor get_Wheat();
    public static XLColor get_White();
    public static XLColor get_WhiteSmoke();
    public static XLColor get_Yellow();
    public static XLColor get_YellowGreen();
    public static XLColor get_AirForceBlue();
    public static XLColor get_Alizarin();
    public static XLColor get_Almond();
    public static XLColor get_Amaranth();
    public static XLColor get_Amber();
    public static XLColor get_AmberSaeEce();
    public static XLColor get_AmericanRose();
    public static XLColor get_Amethyst();
    public static XLColor get_AntiFlashWhite();
    public static XLColor get_AntiqueBrass();
    public static XLColor get_AntiqueFuchsia();
    public static XLColor get_AppleGreen();
    public static XLColor get_Apricot();
    public static XLColor get_Aquamarine1();
    public static XLColor get_ArmyGreen();
    public static XLColor get_Arsenic();
    public static XLColor get_ArylideYellow();
    public static XLColor get_AshGrey();
    public static XLColor get_Asparagus();
    public static XLColor get_AtomicTangerine();
    public static XLColor get_Auburn();
    public static XLColor get_Aureolin();
    public static XLColor get_Aurometalsaurus();
    public static XLColor get_Awesome();
    public static XLColor get_AzureColorWheel();
    public static XLColor get_BabyBlue();
    public static XLColor get_BabyBlueEyes();
    public static XLColor get_BabyPink();
    public static XLColor get_BallBlue();
    public static XLColor get_BananaMania();
    public static XLColor get_BattleshipGrey();
    public static XLColor get_Bazaar();
    public static XLColor get_BeauBlue();
    public static XLColor get_Beaver();
    public static XLColor get_Bistre();
    public static XLColor get_Bittersweet();
    public static XLColor get_BleuDeFrance();
    public static XLColor get_BlizzardBlue();
    public static XLColor get_Blond();
    public static XLColor get_BlueBell();
    public static XLColor get_BlueGray();
    public static XLColor get_BlueGreen();
    public static XLColor get_BluePigment();
    public static XLColor get_BlueRyb();
    public static XLColor get_Blush();
    public static XLColor get_Bole();
    public static XLColor get_BondiBlue();
    public static XLColor get_BostonUniversityRed();
    public static XLColor get_BrandeisBlue();
    public static XLColor get_Brass();
    public static XLColor get_BrickRed();
    public static XLColor get_BrightCerulean();
    public static XLColor get_BrightGreen();
    public static XLColor get_BrightLavender();
    public static XLColor get_BrightMaroon();
    public static XLColor get_BrightPink();
    public static XLColor get_BrightTurquoise();
    public static XLColor get_BrightUbe();
    public static XLColor get_BrilliantLavender();
    public static XLColor get_BrilliantRose();
    public static XLColor get_BrinkPink();
    public static XLColor get_BritishRacingGreen();
    public static XLColor get_Bronze();
    public static XLColor get_BrownTraditional();
    public static XLColor get_BubbleGum();
    public static XLColor get_Bubbles();
    public static XLColor get_Buff();
    public static XLColor get_BulgarianRose();
    public static XLColor get_Burgundy();
    public static XLColor get_BurntOrange();
    public static XLColor get_BurntSienna();
    public static XLColor get_BurntUmber();
    public static XLColor get_Byzantine();
    public static XLColor get_Byzantium();
    public static XLColor get_Cadet();
    public static XLColor get_CadetGrey();
    public static XLColor get_CadmiumGreen();
    public static XLColor get_CadmiumOrange();
    public static XLColor get_CadmiumRed();
    public static XLColor get_CadmiumYellow();
    public static XLColor get_CalPolyPomonaGreen();
    public static XLColor get_CambridgeBlue();
    public static XLColor get_Camel();
    public static XLColor get_CamouflageGreen();
    public static XLColor get_CanaryYellow();
    public static XLColor get_CandyAppleRed();
    public static XLColor get_CandyPink();
    public static XLColor get_CaputMortuum();
    public static XLColor get_Cardinal();
    public static XLColor get_CaribbeanGreen();
    public static XLColor get_Carmine();
    public static XLColor get_CarminePink();
    public static XLColor get_CarmineRed();
    public static XLColor get_CarnationPink();
    public static XLColor get_Carnelian();
    public static XLColor get_CarolinaBlue();
    public static XLColor get_CarrotOrange();
    public static XLColor get_Ceil();
    public static XLColor get_Celadon();
    public static XLColor get_CelestialBlue();
    public static XLColor get_Cerise();
    public static XLColor get_CerisePink();
    public static XLColor get_Cerulean();
    public static XLColor get_CeruleanBlue();
    public static XLColor get_Chamoisee();
    public static XLColor get_Champagne();
    public static XLColor get_Charcoal();
    public static XLColor get_ChartreuseTraditional();
    public static XLColor get_CherryBlossomPink();
    public static XLColor get_Chocolate1();
    public static XLColor get_ChromeYellow();
    public static XLColor get_Cinereous();
    public static XLColor get_Cinnabar();
    public static XLColor get_Citrine();
    public static XLColor get_ClassicRose();
    public static XLColor get_Cobalt();
    public static XLColor get_ColumbiaBlue();
    public static XLColor get_CoolBlack();
    public static XLColor get_CoolGrey();
    public static XLColor get_Copper();
    public static XLColor get_CopperRose();
    public static XLColor get_Coquelicot();
    public static XLColor get_CoralPink();
    public static XLColor get_CoralRed();
    public static XLColor get_Cordovan();
    public static XLColor get_Corn();
    public static XLColor get_CornellRed();
    public static XLColor get_CosmicLatte();
    public static XLColor get_CottonCandy();
    public static XLColor get_Cream();
    public static XLColor get_CrimsonGlory();
    public static XLColor get_CyanProcess();
    public static XLColor get_Daffodil();
    public static XLColor get_Dandelion();
    public static XLColor get_DarkBrown();
    public static XLColor get_DarkByzantium();
    public static XLColor get_DarkCandyAppleRed();
    public static XLColor get_DarkCerulean();
    public static XLColor get_DarkChampagne();
    public static XLColor get_DarkChestnut();
    public static XLColor get_DarkCoral();
    public static XLColor get_DarkElectricBlue();
    public static XLColor get_DarkGreen1();
    public static XLColor get_DarkJungleGreen();
    public static XLColor get_DarkLava();
    public static XLColor get_DarkLavender();
    public static XLColor get_DarkMidnightBlue();
    public static XLColor get_DarkPastelBlue();
    public static XLColor get_DarkPastelGreen();
    public static XLColor get_DarkPastelPurple();
    public static XLColor get_DarkPastelRed();
    public static XLColor get_DarkPink();
    public static XLColor get_DarkPowderBlue();
    public static XLColor get_DarkRaspberry();
    public static XLColor get_DarkScarlet();
    public static XLColor get_DarkSienna();
    public static XLColor get_DarkSpringGreen();
    public static XLColor get_DarkTan();
    public static XLColor get_DarkTangerine();
    public static XLColor get_DarkTaupe();
    public static XLColor get_DarkTerraCotta();
    public static XLColor get_DartmouthGreen();
    public static XLColor get_DavysGrey();
    public static XLColor get_DebianRed();
    public static XLColor get_DeepCarmine();
    public static XLColor get_DeepCarminePink();
    public static XLColor get_DeepCarrotOrange();
    public static XLColor get_DeepCerise();
    public static XLColor get_DeepChampagne();
    public static XLColor get_DeepChestnut();
    public static XLColor get_DeepFuchsia();
    public static XLColor get_DeepJungleGreen();
    public static XLColor get_DeepLilac();
    public static XLColor get_DeepMagenta();
    public static XLColor get_DeepPeach();
    public static XLColor get_DeepSaffron();
    public static XLColor get_Denim();
    public static XLColor get_Desert();
    public static XLColor get_DesertSand();
    public static XLColor get_DogwoodRose();
    public static XLColor get_DollarBill();
    public static XLColor get_Drab();
    public static XLColor get_DukeBlue();
    public static XLColor get_EarthYellow();
    public static XLColor get_Ecru();
    public static XLColor get_Eggplant();
    public static XLColor get_Eggshell();
    public static XLColor get_EgyptianBlue();
    public static XLColor get_ElectricBlue();
    public static XLColor get_ElectricCrimson();
    public static XLColor get_ElectricIndigo();
    public static XLColor get_ElectricLavender();
    public static XLColor get_ElectricLime();
    public static XLColor get_ElectricPurple();
    public static XLColor get_ElectricUltramarine();
    public static XLColor get_ElectricViolet();
    public static XLColor get_Emerald();
    public static XLColor get_EtonBlue();
    public static XLColor get_Fallow();
    public static XLColor get_FaluRed();
    public static XLColor get_Fandango();
    public static XLColor get_FashionFuchsia();
    public static XLColor get_Fawn();
    public static XLColor get_Feldgrau();
    public static XLColor get_FernGreen();
    public static XLColor get_FerrariRed();
    public static XLColor get_FieldDrab();
    public static XLColor get_FireEngineRed();
    public static XLColor get_Flame();
    public static XLColor get_FlamingoPink();
    public static XLColor get_Flavescent();
    public static XLColor get_Flax();
    public static XLColor get_FluorescentOrange();
    public static XLColor get_FluorescentYellow();
    public static XLColor get_Folly();
    public static XLColor get_ForestGreenTraditional();
    public static XLColor get_FrenchBeige();
    public static XLColor get_FrenchBlue();
    public static XLColor get_FrenchLilac();
    public static XLColor get_FrenchRose();
    public static XLColor get_FuchsiaPink();
    public static XLColor get_Fulvous();
    public static XLColor get_FuzzyWuzzy();
    public static XLColor get_Gamboge();
    public static XLColor get_Ginger();
    public static XLColor get_Glaucous();
    public static XLColor get_GoldenBrown();
    public static XLColor get_GoldenPoppy();
    public static XLColor get_GoldenYellow();
    public static XLColor get_GoldMetallic();
    public static XLColor get_GrannySmithApple();
    public static XLColor get_GrayAsparagus();
    public static XLColor get_GreenPigment();
    public static XLColor get_GreenRyb();
    public static XLColor get_Grullo();
    public static XLColor get_HalayaUbe();
    public static XLColor get_HanBlue();
    public static XLColor get_HanPurple();
    public static XLColor get_HansaYellow();
    public static XLColor get_Harlequin();
    public static XLColor get_HarvardCrimson();
    public static XLColor get_HarvestGold();
    public static XLColor get_Heliotrope();
    public static XLColor get_HollywoodCerise();
    public static XLColor get_HookersGreen();
    public static XLColor get_HotMagenta();
    public static XLColor get_HunterGreen();
    public static XLColor get_Iceberg();
    public static XLColor get_Icterine();
    public static XLColor get_Inchworm();
    public static XLColor get_IndiaGreen();
    public static XLColor get_IndianYellow();
    public static XLColor get_IndigoDye();
    public static XLColor get_InternationalKleinBlue();
    public static XLColor get_InternationalOrange();
    public static XLColor get_Iris();
    public static XLColor get_Isabelline();
    public static XLColor get_IslamicGreen();
    public static XLColor get_Jade();
    public static XLColor get_Jasper();
    public static XLColor get_JazzberryJam();
    public static XLColor get_Jonquil();
    public static XLColor get_JuneBud();
    public static XLColor get_JungleGreen();
    public static XLColor get_KellyGreen();
    public static XLColor get_KhakiHtmlCssKhaki();
    public static XLColor get_LanguidLavender();
    public static XLColor get_LapisLazuli();
    public static XLColor get_LaSalleGreen();
    public static XLColor get_LaserLemon();
    public static XLColor get_Lava();
    public static XLColor get_LavenderBlue();
    public static XLColor get_LavenderFloral();
    public static XLColor get_LavenderGray();
    public static XLColor get_LavenderIndigo();
    public static XLColor get_LavenderPink();
    public static XLColor get_LavenderPurple();
    public static XLColor get_LavenderRose();
    public static XLColor get_Lemon();
    public static XLColor get_LightApricot();
    public static XLColor get_LightBrown();
    public static XLColor get_LightCarminePink();
    public static XLColor get_LightCornflowerBlue();
    public static XLColor get_LightFuchsiaPink();
    public static XLColor get_LightMauve();
    public static XLColor get_LightPastelPurple();
    public static XLColor get_LightSalmonPink();
    public static XLColor get_LightTaupe();
    public static XLColor get_LightThulianPink();
    public static XLColor get_LightYellow1();
    public static XLColor get_Lilac();
    public static XLColor get_LimeColorWheel();
    public static XLColor get_LincolnGreen();
    public static XLColor get_Liver();
    public static XLColor get_Lust();
    public static XLColor get_MacaroniAndCheese();
    public static XLColor get_MagentaDye();
    public static XLColor get_MagentaProcess();
    public static XLColor get_MagicMint();
    public static XLColor get_Magnolia();
    public static XLColor get_Mahogany();
    public static XLColor get_Maize();
    public static XLColor get_MajorelleBlue();
    public static XLColor get_Malachite();
    public static XLColor get_Manatee();
    public static XLColor get_MangoTango();
    public static XLColor get_MaroonX11();
    public static XLColor get_Mauve();
    public static XLColor get_Mauvelous();
    public static XLColor get_MauveTaupe();
    public static XLColor get_MayaBlue();
    public static XLColor get_MeatBrown();
    public static XLColor get_MediumAquamarine1();
    public static XLColor get_MediumCandyAppleRed();
    public static XLColor get_MediumCarmine();
    public static XLColor get_MediumChampagne();
    public static XLColor get_MediumElectricBlue();
    public static XLColor get_MediumJungleGreen();
    public static XLColor get_MediumPersianBlue();
    public static XLColor get_MediumRedViolet();
    public static XLColor get_MediumSpringBud();
    public static XLColor get_MediumTaupe();
    public static XLColor get_Melon();
    public static XLColor get_MidnightGreenEagleGreen();
    public static XLColor get_MikadoYellow();
    public static XLColor get_Mint();
    public static XLColor get_MintGreen();
    public static XLColor get_ModeBeige();
    public static XLColor get_MoonstoneBlue();
    public static XLColor get_MordantRed19();
    public static XLColor get_MossGreen();
    public static XLColor get_MountainMeadow();
    public static XLColor get_MountbattenPink();
    public static XLColor get_MsuGreen();
    public static XLColor get_Mulberry();
    public static XLColor get_Mustard();
    public static XLColor get_Myrtle();
    public static XLColor get_NadeshikoPink();
    public static XLColor get_NapierGreen();
    public static XLColor get_NaplesYellow();
    public static XLColor get_NeonCarrot();
    public static XLColor get_NeonFuchsia();
    public static XLColor get_NeonGreen();
    public static XLColor get_NonPhotoBlue();
    public static XLColor get_OceanBoatBlue();
    public static XLColor get_Ochre();
    public static XLColor get_OldGold();
    public static XLColor get_OldLavender();
    public static XLColor get_OldMauve();
    public static XLColor get_OldRose();
    public static XLColor get_OliveDrab7();
    public static XLColor get_Olivine();
    public static XLColor get_Onyx();
    public static XLColor get_OperaMauve();
    public static XLColor get_OrangeColorWheel();
    public static XLColor get_OrangePeel();
    public static XLColor get_OrangeRyb();
    public static XLColor get_OtterBrown();
    public static XLColor get_OuCrimsonRed();
    public static XLColor get_OuterSpace();
    public static XLColor get_OutrageousOrange();
    public static XLColor get_OxfordBlue();
    public static XLColor get_PakistanGreen();
    public static XLColor get_PalatinateBlue();
    public static XLColor get_PalatinatePurple();
    public static XLColor get_PaleAqua();
    public static XLColor get_PaleBrown();
    public static XLColor get_PaleCarmine();
    public static XLColor get_PaleCerulean();
    public static XLColor get_PaleChestnut();
    public static XLColor get_PaleCopper();
    public static XLColor get_PaleCornflowerBlue();
    public static XLColor get_PaleGold();
    public static XLColor get_PaleMagenta();
    public static XLColor get_PalePink();
    public static XLColor get_PaleRobinEggBlue();
    public static XLColor get_PaleSilver();
    public static XLColor get_PaleSpringBud();
    public static XLColor get_PaleTaupe();
    public static XLColor get_PansyPurple();
    public static XLColor get_ParisGreen();
    public static XLColor get_PastelBlue();
    public static XLColor get_PastelBrown();
    public static XLColor get_PastelGray();
    public static XLColor get_PastelGreen();
    public static XLColor get_PastelMagenta();
    public static XLColor get_PastelOrange();
    public static XLColor get_PastelPink();
    public static XLColor get_PastelPurple();
    public static XLColor get_PastelRed();
    public static XLColor get_PastelViolet();
    public static XLColor get_PastelYellow();
    public static XLColor get_PaynesGrey();
    public static XLColor get_Peach();
    public static XLColor get_PeachOrange();
    public static XLColor get_PeachYellow();
    public static XLColor get_Pear();
    public static XLColor get_Pearl();
    public static XLColor get_Peridot();
    public static XLColor get_Periwinkle();
    public static XLColor get_PersianBlue();
    public static XLColor get_PersianGreen();
    public static XLColor get_PersianIndigo();
    public static XLColor get_PersianOrange();
    public static XLColor get_PersianPink();
    public static XLColor get_PersianPlum();
    public static XLColor get_PersianRed();
    public static XLColor get_PersianRose();
    public static XLColor get_Persimmon();
    public static XLColor get_Phlox();
    public static XLColor get_PhthaloBlue();
    public static XLColor get_PhthaloGreen();
    public static XLColor get_PiggyPink();
    public static XLColor get_PineGreen();
    public static XLColor get_PinkOrange();
    public static XLColor get_PinkPearl();
    public static XLColor get_PinkSherbet();
    public static XLColor get_Pistachio();
    public static XLColor get_Platinum();
    public static XLColor get_PlumTraditional();
    public static XLColor get_PortlandOrange();
    public static XLColor get_PrincetonOrange();
    public static XLColor get_Prune();
    public static XLColor get_PrussianBlue();
    public static XLColor get_PsychedelicPurple();
    public static XLColor get_Puce();
    public static XLColor get_Pumpkin();
    public static XLColor get_PurpleHeart();
    public static XLColor get_PurpleMountainMajesty();
    public static XLColor get_PurpleMunsell();
    public static XLColor get_PurplePizzazz();
    public static XLColor get_PurpleTaupe();
    public static XLColor get_PurpleX11();
    public static XLColor get_RadicalRed();
    public static XLColor get_Raspberry();
    public static XLColor get_RaspberryGlace();
    public static XLColor get_RaspberryPink();
    public static XLColor get_RaspberryRose();
    public static XLColor get_RawUmber();
    public static XLColor get_RazzleDazzleRose();
    public static XLColor get_Razzmatazz();
    public static XLColor get_RedMunsell();
    public static XLColor get_RedNcs();
    public static XLColor get_RedPigment();
    public static XLColor get_RedRyb();
    public static XLColor get_Redwood();
    public static XLColor get_Regalia();
    public static XLColor get_RichBlack();
    public static XLColor get_RichBrilliantLavender();
    public static XLColor get_RichCarmine();
    public static XLColor get_RichElectricBlue();
    public static XLColor get_RichLavender();
    public static XLColor get_RichLilac();
    public static XLColor get_RichMaroon();
    public static XLColor get_RifleGreen();
    public static XLColor get_RobinEggBlue();
    public static XLColor get_Rose();
    public static XLColor get_RoseBonbon();
    public static XLColor get_RoseEbony();
    public static XLColor get_RoseGold();
    public static XLColor get_RoseMadder();
    public static XLColor get_RosePink();
    public static XLColor get_RoseQuartz();
    public static XLColor get_RoseTaupe();
    public static XLColor get_RoseVale();
    public static XLColor get_Rosewood();
    public static XLColor get_RossoCorsa();
    public static XLColor get_RoyalAzure();
    public static XLColor get_RoyalBlueTraditional();
    public static XLColor get_RoyalFuchsia();
    public static XLColor get_RoyalPurple();
    public static XLColor get_Ruby();
    public static XLColor get_Ruddy();
    public static XLColor get_RuddyBrown();
    public static XLColor get_RuddyPink();
    public static XLColor get_Rufous();
    public static XLColor get_Russet();
    public static XLColor get_Rust();
    public static XLColor get_SacramentoStateGreen();
    public static XLColor get_SafetyOrangeBlazeOrange();
    public static XLColor get_Saffron();
    public static XLColor get_Salmon1();
    public static XLColor get_SalmonPink();
    public static XLColor get_Sand();
    public static XLColor get_SandDune();
    public static XLColor get_Sandstorm();
    public static XLColor get_SandyTaupe();
    public static XLColor get_Sangria();
    public static XLColor get_SapGreen();
    public static XLColor get_Sapphire();
    public static XLColor get_SatinSheenGold();
    public static XLColor get_Scarlet();
    public static XLColor get_SchoolBusYellow();
    public static XLColor get_ScreaminGreen();
    public static XLColor get_SealBrown();
    public static XLColor get_SelectiveYellow();
    public static XLColor get_Sepia();
    public static XLColor get_Shadow();
    public static XLColor get_ShamrockGreen();
    public static XLColor get_ShockingPink();
    public static XLColor get_Sienna1();
    public static XLColor get_Sinopia();
    public static XLColor get_Skobeloff();
    public static XLColor get_SkyMagenta();
    public static XLColor get_SmaltDarkPowderBlue();
    public static XLColor get_SmokeyTopaz();
    public static XLColor get_SmokyBlack();
    public static XLColor get_SpiroDiscoBall();
    public static XLColor get_SplashedWhite();
    public static XLColor get_SpringBud();
    public static XLColor get_StPatricksBlue();
    public static XLColor get_StilDeGrainYellow();
    public static XLColor get_Straw();
    public static XLColor get_Sunglow();
    public static XLColor get_Sunset();
    public static XLColor get_Tangelo();
    public static XLColor get_Tangerine();
    public static XLColor get_TangerineYellow();
    public static XLColor get_Taupe();
    public static XLColor get_TaupeGray();
    public static XLColor get_TeaGreen();
    public static XLColor get_TealBlue();
    public static XLColor get_TealGreen();
    public static XLColor get_TeaRoseOrange();
    public static XLColor get_TeaRoseRose();
    public static XLColor get_TennéTawny();
    public static XLColor get_TerraCotta();
    public static XLColor get_ThulianPink();
    public static XLColor get_TickleMePink();
    public static XLColor get_TiffanyBlue();
    public static XLColor get_TigersEye();
    public static XLColor get_Timberwolf();
    public static XLColor get_TitaniumYellow();
    public static XLColor get_Toolbox();
    public static XLColor get_TractorRed();
    public static XLColor get_TropicalRainForest();
    public static XLColor get_TuftsBlue();
    public static XLColor get_Tumbleweed();
    public static XLColor get_TurkishRose();
    public static XLColor get_Turquoise1();
    public static XLColor get_TurquoiseBlue();
    public static XLColor get_TurquoiseGreen();
    public static XLColor get_TuscanRed();
    public static XLColor get_TwilightLavender();
    public static XLColor get_TyrianPurple();
    public static XLColor get_UaBlue();
    public static XLColor get_UaRed();
    public static XLColor get_Ube();
    public static XLColor get_UclaBlue();
    public static XLColor get_UclaGold();
    public static XLColor get_UfoGreen();
    public static XLColor get_Ultramarine();
    public static XLColor get_UltramarineBlue();
    public static XLColor get_UltraPink();
    public static XLColor get_Umber();
    public static XLColor get_UnitedNationsBlue();
    public static XLColor get_UnmellowYellow();
    public static XLColor get_UpForestGreen();
    public static XLColor get_UpMaroon();
    public static XLColor get_UpsdellRed();
    public static XLColor get_Urobilin();
    public static XLColor get_UscCardinal();
    public static XLColor get_UscGold();
    public static XLColor get_UtahCrimson();
    public static XLColor get_Vanilla();
    public static XLColor get_VegasGold();
    public static XLColor get_VenetianRed();
    public static XLColor get_Verdigris();
    public static XLColor get_Vermilion();
    public static XLColor get_Veronica();
    public static XLColor get_Violet1();
    public static XLColor get_VioletColorWheel();
    public static XLColor get_VioletRyb();
    public static XLColor get_Viridian();
    public static XLColor get_VividAuburn();
    public static XLColor get_VividBurgundy();
    public static XLColor get_VividCerise();
    public static XLColor get_VividTangerine();
    public static XLColor get_VividViolet();
    public static XLColor get_WarmBlack();
    public static XLColor get_Wenge();
    public static XLColor get_WildBlueYonder();
    public static XLColor get_WildStrawberry();
    public static XLColor get_WildWatermelon();
    public static XLColor get_Wisteria();
    public static XLColor get_Xanadu();
    public static XLColor get_YaleBlue();
    public static XLColor get_YellowMunsell();
    public static XLColor get_YellowNcs();
    public static XLColor get_YellowProcess();
    public static XLColor get_YellowRyb();
    public static XLColor get_Zaffre();
    public static XLColor get_ZinnwalditeBrown();
    public static XLColor get_Transparent();
}
internal class ClosedXML.Excel.XLColorKey : ValueType {
    [CompilerGeneratedAttribute]
private XLColorType <ColorType>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <Color>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Indexed>k__BackingField;
    [CompilerGeneratedAttribute]
private XLThemeColor <ThemeColor>k__BackingField;
    [CompilerGeneratedAttribute]
private double <ThemeTint>k__BackingField;
    public XLColorType ColorType { get; public set; }
    public Color Color { get; public set; }
    public int Indexed { get; public set; }
    public XLThemeColor ThemeColor { get; public set; }
    public double ThemeTint { get; public set; }
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public XLColorType get_ColorType();
    [CompilerGeneratedAttribute]
public void set_ColorType(XLColorType value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public Color get_Color();
    [CompilerGeneratedAttribute]
public void set_Color(Color value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_Indexed();
    [CompilerGeneratedAttribute]
public void set_Indexed(int value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public XLThemeColor get_ThemeColor();
    [CompilerGeneratedAttribute]
public void set_ThemeColor(XLThemeColor value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public double get_ThemeTint();
    [CompilerGeneratedAttribute]
public void set_ThemeTint(double value);
    public virtual int GetHashCode();
    public sealed virtual bool Equals(XLColorKey other);
    public virtual bool Equals(object obj);
    public virtual string ToString();
    public static bool op_Equality(XLColorKey left, XLColorKey right);
    public static bool op_Inequality(XLColorKey left, XLColorKey right);
}
public enum ClosedXML.Excel.XLColorType : Enum {
    public int value__;
    public static XLColorType Color;
    public static XLColorType Theme;
    public static XLColorType Indexed;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class ClosedXML.Excel.XLColumn : XLRangeBase {
    private int _outlineLevel;
    [CompilerGeneratedAttribute]
private bool <Collapsed>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsHidden>k__BackingField;
    public XLRangeType RangeType { get; }
    public IEnumerable`1<IXLStyle> Styles { get; }
    protected IEnumerable`1<XLStylizedBase> Children { get; }
    public bool Collapsed { get; public set; }
    public double Width { get; public set; }
    public bool IsHidden { get; public set; }
    public int OutlineLevel { get; public set; }
    public XLColumn(XLWorksheet worksheet, int column);
    public virtual XLRangeType get_RangeType();
    [IteratorStateMachineAttribute("ClosedXML.Excel.XLColumn/<get_Styles>d__5")]
public virtual IEnumerable`1<IXLStyle> get_Styles();
    [IteratorStateMachineAttribute("ClosedXML.Excel.XLColumn/<get_Children>d__7")]
protected virtual IEnumerable`1<XLStylizedBase> get_Children();
    [CompilerGeneratedAttribute]
public bool get_Collapsed();
    [CompilerGeneratedAttribute]
public void set_Collapsed(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual double get_Width();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Width(double value);
    private sealed virtual override IXLCells ClosedXML.Excel.IXLColumn.Cells(string cellsInColumn);
    private sealed virtual override IXLCells ClosedXML.Excel.IXLColumn.Cells(int firstRow, int lastRow);
    public sealed virtual void Delete();
    public sealed virtual IXLColumn Clear(XLClearOptions clearOptions);
    public sealed virtual IXLCell Cell(int rowNumber);
    public virtual XLCells Cells(string cellsInColumn);
    public virtual IXLCells Cells();
    public virtual XLCells Cells(bool usedCellsOnly);
    public XLCells Cells(int firstRow, int lastRow);
    public sealed virtual IXLColumns InsertColumnsAfter(int numberOfColumns);
    public sealed virtual IXLColumns InsertColumnsBefore(int numberOfColumns);
    private void CopyColumns(IXLColumns newColumns);
    public sealed virtual IXLColumn AdjustToContents();
    public sealed virtual IXLColumn AdjustToContents(int startRow);
    public sealed virtual IXLColumn AdjustToContents(int startRow, int endRow);
    public sealed virtual IXLColumn AdjustToContents(double minWidth, double maxWidth);
    public sealed virtual IXLColumn AdjustToContents(int startRow, double minWidth, double maxWidth);
    public sealed virtual IXLColumn AdjustToContents(int startRow, int endRow, double minWidthNoC, double maxWidthNoC);
    private int CalculateMinColumnWidth(int startRow, int endRow, IXLGraphicEngine engine, Dpi dpi);
    private static double GetContentWidth(int textRotationDeg, List`1<GlyphBox> glyphs);
    public sealed virtual IXLColumn Hide();
    public sealed virtual IXLColumn Unhide();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsHidden();
    [CompilerGeneratedAttribute]
public void set_IsHidden(bool value);
    public sealed virtual int get_OutlineLevel();
    public sealed virtual void set_OutlineLevel(int value);
    public sealed virtual IXLColumn Group();
    public sealed virtual IXLColumn Group(bool collapse);
    public sealed virtual IXLColumn Group(int outlineLevel);
    public sealed virtual IXLColumn Group(int outlineLevel, bool collapse);
    public sealed virtual IXLColumn Ungroup();
    public sealed virtual IXLColumn Ungroup(bool ungroupFromAll);
    public sealed virtual IXLColumn Collapse();
    public sealed virtual IXLColumn Expand();
    public sealed virtual int CellCount();
    public sealed virtual IXLColumn Sort(XLSortOrder sortOrder, bool matchCase, bool ignoreBlanks);
    private sealed virtual override IXLRangeColumn ClosedXML.Excel.IXLColumn.Column(int start, int end);
    private sealed virtual override IXLRangeColumn ClosedXML.Excel.IXLColumn.CopyTo(IXLCell target);
    private sealed virtual override IXLRangeColumn ClosedXML.Excel.IXLColumn.CopyTo(IXLRangeBase target);
    public sealed virtual IXLColumn CopyTo(IXLColumn column);
    public XLRangeColumn Column(int start, int end);
    public sealed virtual IXLRangeColumn Column(IXLCell start, IXLCell end);
    public sealed virtual IXLRangeColumns Columns(string columns);
    public sealed virtual IXLColumn AddVerticalPageBreak();
    public sealed virtual IXLRangeColumn ColumnUsed(XLCellsUsedOptions options);
    public virtual XLRange AsRange();
    internal virtual void WorksheetRangeShiftedColumns(XLRange range, int columnsShifted);
    internal virtual void WorksheetRangeShiftedRows(XLRange range, int rowsShifted);
    internal void SetColumnNumber(int column);
    public virtual XLRange Range(string rangeAddressStr);
    public IXLRangeColumn Range(int firstRow, int lastRow);
    private XLColumn ColumnShift(int columnsToShift);
    private sealed virtual override IXLColumn ClosedXML.Excel.IXLColumn.ColumnLeft();
    private sealed virtual override IXLColumn ClosedXML.Excel.IXLColumn.ColumnLeft(int step);
    public XLColumn ColumnLeft();
    public XLColumn ColumnLeft(int step);
    private sealed virtual override IXLColumn ClosedXML.Excel.IXLColumn.ColumnRight();
    private sealed virtual override IXLColumn ClosedXML.Excel.IXLColumn.ColumnRight(int step);
    public XLColumn ColumnRight();
    public XLColumn ColumnRight(int step);
    public virtual bool IsEmpty();
    public virtual bool IsEmpty(XLCellsUsedOptions options);
    public virtual bool IsEntireRow();
    public virtual bool IsEntireColumn();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class ClosedXML.Excel.XLColumns : XLStylizedBase {
    private List`1<XLColumn> _columnsCollection;
    [NullableAttribute("2")]
private XLWorksheet _worksheet;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IEnumerable`1<XLColumn> _lazyEnumerable;
    private bool IsMaterialized { get; }
    private IEnumerable`1<XLColumn> Columns { get; }
    unknown double Width {public set; }
    public IEnumerable`1<IXLStyle> Styles { get; }
    protected IEnumerable`1<XLStylizedBase> Children { get; }
    public IXLRanges RangesUsed { get; }
    [NullableContextAttribute("2")]
public XLColumns(XLWorksheet worksheet, XLStyleValue defaultStyle, IEnumerable`1<XLColumn> lazyEnumerable);
    private bool get_IsMaterialized();
    private IEnumerable`1<XLColumn> get_Columns();
    public sealed virtual IEnumerator`1<IXLColumn> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual void set_Width(double value);
    public sealed virtual void Delete();
    public sealed virtual IXLColumns AdjustToContents();
    public sealed virtual IXLColumns AdjustToContents(int startRow);
    public sealed virtual IXLColumns AdjustToContents(int startRow, int endRow);
    public sealed virtual IXLColumns AdjustToContents(double minWidth, double maxWidth);
    public sealed virtual IXLColumns AdjustToContents(int startRow, double minWidth, double maxWidth);
    public sealed virtual IXLColumns AdjustToContents(int startRow, int endRow, double minWidth, double maxWidth);
    public sealed virtual void Hide();
    public sealed virtual void Unhide();
    public sealed virtual void Group();
    public sealed virtual void Group(int outlineLevel);
    public sealed virtual void Ungroup();
    public sealed virtual void Group(bool collapse);
    public sealed virtual void Group(int outlineLevel, bool collapse);
    public sealed virtual void Ungroup(bool ungroupFromAll);
    public sealed virtual void Collapse();
    public sealed virtual void Expand();
    public sealed virtual IXLCells Cells();
    public sealed virtual IXLCells CellsUsed();
    public sealed virtual IXLCells CellsUsed(bool includeFormats);
    public IXLCells CellsUsed(XLCellsUsedOptions options);
    public sealed virtual IXLColumns AddVerticalPageBreaks();
    [IteratorStateMachineAttribute("ClosedXML.Excel.XLColumns/<get_Styles>d__35")]
public virtual IEnumerable`1<IXLStyle> get_Styles();
    [IteratorStateMachineAttribute("ClosedXML.Excel.XLColumns/<get_Children>d__37")]
protected virtual IEnumerable`1<XLStylizedBase> get_Children();
    public virtual IXLRanges get_RangesUsed();
    public void Add(XLColumn column);
    public void CollapseOnly();
    public sealed virtual IXLColumns Clear(XLClearOptions clearOptions);
    public sealed virtual void Select();
    private void Materialize();
}
[DefaultMemberAttribute("Item")]
internal class ClosedXML.Excel.XLColumnsCollection : object {
    private Dictionary`2<int, XLColumn> _dictionary;
    public ICollection`1<int> Keys { get; }
    public ICollection`1<XLColumn> Values { get; }
    public XLColumn Item { get; public set; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public void ShiftColumnsRight(int startingColumn, int columnsToShift);
    public sealed virtual void Add(int key, XLColumn value);
    public sealed virtual bool ContainsKey(int key);
    public sealed virtual ICollection`1<int> get_Keys();
    public sealed virtual bool Remove(int key);
    public sealed virtual bool TryGetValue(int key, XLColumn& value);
    public sealed virtual ICollection`1<XLColumn> get_Values();
    public sealed virtual XLColumn get_Item(int key);
    public sealed virtual void set_Item(int key, XLColumn value);
    public sealed virtual void Add(KeyValuePair`2<int, XLColumn> item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(KeyValuePair`2<int, XLColumn> item);
    public sealed virtual void CopyTo(KeyValuePair`2[] array, int arrayIndex);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool Remove(KeyValuePair`2<int, XLColumn> item);
    public sealed virtual IEnumerator`1<KeyValuePair`2<int, XLColumn>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public void RemoveAll(Func`2<XLColumn, bool> predicate);
}
internal class ClosedXML.Excel.XLComment : XLFormattedText`1<IXLComment> {
    private XLCell _cell;
    [CompilerGeneratedAttribute]
private string <Author>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private XLDrawingAnchor <Anchor>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HorizontalFlip>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <VerticalFlip>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Rotation>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ExtentLength>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ExtentWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ShapeId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Visible>k__BackingField;
    [CompilerGeneratedAttribute]
private IXLDrawingPosition <Position>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ZOrder>k__BackingField;
    [CompilerGeneratedAttribute]
private IXLDrawingStyle <Style>k__BackingField;
    public string Author { get; public set; }
    public string Name { get; public set; }
    public string Description { get; public set; }
    public XLDrawingAnchor Anchor { get; public set; }
    public bool HorizontalFlip { get; public set; }
    public bool VerticalFlip { get; public set; }
    public int Rotation { get; public set; }
    public int ExtentLength { get; public set; }
    public int ExtentWidth { get; public set; }
    public int ShapeId { get; internal set; }
    public bool Visible { get; public set; }
    public IXLDrawingPosition Position { get; private set; }
    public int ZOrder { get; public set; }
    public IXLDrawingStyle Style { get; private set; }
    public XLComment(XLCell cell, IXLFontBase defaultFont, Nullable`1<int> shapeId);
    public XLComment(XLCell cell, XLFormattedText`1<IXLComment> defaultComment, IXLFontBase defaultFont, IXLDrawingStyle style);
    public XLComment(XLCell cell, string text, IXLFontBase defaultFont);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Author();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Author(string value);
    public sealed virtual IXLComment SetAuthor(string value);
    public sealed virtual IXLRichString AddSignature();
    public sealed virtual void Delete();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public XLDrawingAnchor get_Anchor();
    [CompilerGeneratedAttribute]
public void set_Anchor(XLDrawingAnchor value);
    [CompilerGeneratedAttribute]
public bool get_HorizontalFlip();
    [CompilerGeneratedAttribute]
public void set_HorizontalFlip(bool value);
    [CompilerGeneratedAttribute]
public bool get_VerticalFlip();
    [CompilerGeneratedAttribute]
public void set_VerticalFlip(bool value);
    [CompilerGeneratedAttribute]
public int get_Rotation();
    [CompilerGeneratedAttribute]
public void set_Rotation(int value);
    [CompilerGeneratedAttribute]
public int get_ExtentLength();
    [CompilerGeneratedAttribute]
public void set_ExtentLength(int value);
    [CompilerGeneratedAttribute]
public int get_ExtentWidth();
    [CompilerGeneratedAttribute]
public void set_ExtentWidth(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_ShapeId();
    [CompilerGeneratedAttribute]
internal void set_ShapeId(int value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Visible();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Visible(bool value);
    public sealed virtual IXLComment SetVisible();
    public sealed virtual IXLComment SetVisible(bool hidden);
    [CompilerGeneratedAttribute]
public sealed virtual IXLDrawingPosition get_Position();
    [CompilerGeneratedAttribute]
private void set_Position(IXLDrawingPosition value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_ZOrder();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ZOrder(int value);
    public sealed virtual IXLComment SetZOrder(int zOrder);
    [CompilerGeneratedAttribute]
public sealed virtual IXLDrawingStyle get_Style();
    [CompilerGeneratedAttribute]
private void set_Style(IXLDrawingStyle value);
    public IXLComment SetName(string name);
    public IXLComment SetDescription(string description);
    public IXLComment SetHorizontalFlip();
    public IXLComment SetHorizontalFlip(bool horizontalFlip);
    public IXLComment SetVerticalFlip();
    public IXLComment SetVerticalFlip(bool verticalFlip);
    public IXLComment SetRotation(int rotation);
    public IXLComment SetExtentLength(int extentLength);
    public IXLComment SetExtentWidth(int extentWidth);
    private void Initialize(XLCell cell, IXLDrawingStyle style, Nullable`1<int> shapeId);
}
internal class ClosedXML.Excel.XLConditionalFormat : XLStylizedBase {
    private static IEqualityComparer`1<IXLConditionalFormat> FullComparerInstance;
    private static IEqualityComparer`1<IXLConditionalFormat> NoRangeComparerInstance;
    [CompilerGeneratedAttribute]
private Guid <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private int <OriginalPriority>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CopyDefaultModify>k__BackingField;
    [CompilerGeneratedAttribute]
private XLDictionary`1<XLFormula> <Values>k__BackingField;
    [CompilerGeneratedAttribute]
private XLDictionary`1<XLColor> <Colors>k__BackingField;
    [CompilerGeneratedAttribute]
private XLDictionary`1<XLCFContentType> <ContentTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private XLDictionary`1<XLCFIconSetOperator> <IconSetOperators>k__BackingField;
    [CompilerGeneratedAttribute]
private IXLRanges <Ranges>k__BackingField;
    [CompilerGeneratedAttribute]
private XLConditionalFormatType <ConditionalFormatType>k__BackingField;
    [CompilerGeneratedAttribute]
private XLTimePeriod <TimePeriod>k__BackingField;
    [CompilerGeneratedAttribute]
private XLIconSetStyle <IconSetStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private XLCFOperator <Operator>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Bottom>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Percent>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ReverseIconOrder>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowIconOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowBarOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <StopIfTrue>k__BackingField;
    public static IEqualityComparer`1<IXLConditionalFormat> FullComparer { get; }
    public static IEqualityComparer`1<IXLConditionalFormat> NoRangeComparer { get; }
    public Guid Id { get; internal set; }
    internal int OriginalPriority { get; internal set; }
    public bool CopyDefaultModify { get; public set; }
    public IEnumerable`1<IXLStyle> Styles { get; }
    protected IEnumerable`1<XLStylizedBase> Children { get; }
    public IXLRanges RangesUsed { get; }
    public XLDictionary`1<XLFormula> Values { get; private set; }
    public XLDictionary`1<XLColor> Colors { get; private set; }
    public XLDictionary`1<XLCFContentType> ContentTypes { get; private set; }
    public XLDictionary`1<XLCFIconSetOperator> IconSetOperators { get; private set; }
    public IXLRange Range { get; public set; }
    public IXLRanges Ranges { get; private set; }
    public XLConditionalFormatType ConditionalFormatType { get; public set; }
    public XLTimePeriod TimePeriod { get; public set; }
    public XLIconSetStyle IconSetStyle { get; public set; }
    public XLCFOperator Operator { get; public set; }
    public bool Bottom { get; public set; }
    public bool Percent { get; public set; }
    public bool ReverseIconOrder { get; public set; }
    public bool ShowIconOnly { get; public set; }
    public bool ShowBarOnly { get; public set; }
    public bool StopIfTrue { get; public set; }
    private XLConditionalFormat(XLStyleValue style);
    public XLConditionalFormat(XLRange range, bool copyDefaultModify);
    public XLConditionalFormat(IEnumerable`1<XLRange> ranges, bool copyDefaultModify);
    public XLConditionalFormat(XLConditionalFormat conditionalFormat, IXLRange targetRange);
    public XLConditionalFormat(XLConditionalFormat conditionalFormat, IEnumerable`1<IXLRange> targetRanges);
    private static XLConditionalFormat();
    internal void AdjustFormulas(XLCell baseCell, XLCell targetCell);
    public static IEqualityComparer`1<IXLConditionalFormat> get_FullComparer();
    public static IEqualityComparer`1<IXLConditionalFormat> get_NoRangeComparer();
    [CompilerGeneratedAttribute]
public Guid get_Id();
    [CompilerGeneratedAttribute]
internal void set_Id(Guid value);
    [CompilerGeneratedAttribute]
internal int get_OriginalPriority();
    [CompilerGeneratedAttribute]
internal void set_OriginalPriority(int value);
    [CompilerGeneratedAttribute]
public bool get_CopyDefaultModify();
    [CompilerGeneratedAttribute]
public void set_CopyDefaultModify(bool value);
    [IteratorStateMachineAttribute("ClosedXML.Excel.XLConditionalFormat/<get_Styles>d__26")]
public virtual IEnumerable`1<IXLStyle> get_Styles();
    [IteratorStateMachineAttribute("ClosedXML.Excel.XLConditionalFormat/<get_Children>d__28")]
protected virtual IEnumerable`1<XLStylizedBase> get_Children();
    public virtual IXLRanges get_RangesUsed();
    [CompilerGeneratedAttribute]
public sealed virtual XLDictionary`1<XLFormula> get_Values();
    [CompilerGeneratedAttribute]
private void set_Values(XLDictionary`1<XLFormula> value);
    [CompilerGeneratedAttribute]
public sealed virtual XLDictionary`1<XLColor> get_Colors();
    [CompilerGeneratedAttribute]
private void set_Colors(XLDictionary`1<XLColor> value);
    [CompilerGeneratedAttribute]
public sealed virtual XLDictionary`1<XLCFContentType> get_ContentTypes();
    [CompilerGeneratedAttribute]
private void set_ContentTypes(XLDictionary`1<XLCFContentType> value);
    [CompilerGeneratedAttribute]
public sealed virtual XLDictionary`1<XLCFIconSetOperator> get_IconSetOperators();
    [CompilerGeneratedAttribute]
private void set_IconSetOperators(XLDictionary`1<XLCFIconSetOperator> value);
    public sealed virtual IXLRange get_Range();
    public sealed virtual void set_Range(IXLRange value);
    [CompilerGeneratedAttribute]
public sealed virtual IXLRanges get_Ranges();
    [CompilerGeneratedAttribute]
private void set_Ranges(IXLRanges value);
    [CompilerGeneratedAttribute]
public sealed virtual XLConditionalFormatType get_ConditionalFormatType();
    [CompilerGeneratedAttribute]
public void set_ConditionalFormatType(XLConditionalFormatType value);
    [CompilerGeneratedAttribute]
public sealed virtual XLTimePeriod get_TimePeriod();
    [CompilerGeneratedAttribute]
public void set_TimePeriod(XLTimePeriod value);
    [CompilerGeneratedAttribute]
public sealed virtual XLIconSetStyle get_IconSetStyle();
    [CompilerGeneratedAttribute]
public void set_IconSetStyle(XLIconSetStyle value);
    [CompilerGeneratedAttribute]
public sealed virtual XLCFOperator get_Operator();
    [CompilerGeneratedAttribute]
public void set_Operator(XLCFOperator value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Bottom();
    [CompilerGeneratedAttribute]
public void set_Bottom(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Percent();
    [CompilerGeneratedAttribute]
public void set_Percent(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ReverseIconOrder();
    [CompilerGeneratedAttribute]
public void set_ReverseIconOrder(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ShowIconOnly();
    [CompilerGeneratedAttribute]
public void set_ShowIconOnly(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ShowBarOnly();
    [CompilerGeneratedAttribute]
public void set_ShowBarOnly(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_StopIfTrue();
    [CompilerGeneratedAttribute]
public void set_StopIfTrue(bool value);
    public sealed virtual IXLConditionalFormat SetStopIfTrue();
    public sealed virtual IXLConditionalFormat SetStopIfTrue(bool value);
    public sealed virtual IXLConditionalFormat CopyTo(IXLWorksheet targetSheet);
    public void CopyFrom(IXLConditionalFormat other);
    private void CopyDictionary(XLDictionary`1<T> target, XLDictionary`1<T> source);
    public sealed virtual IXLStyle WhenIsBlank();
    public sealed virtual IXLStyle WhenNotBlank();
    public sealed virtual IXLStyle WhenIsError();
    public sealed virtual IXLStyle WhenNotError();
    public sealed virtual IXLStyle WhenDateIs(XLTimePeriod timePeriod);
    public sealed virtual IXLStyle WhenContains(string value);
    public sealed virtual IXLStyle WhenNotContains(string value);
    public sealed virtual IXLStyle WhenStartsWith(string value);
    public sealed virtual IXLStyle WhenEndsWith(string value);
    public sealed virtual IXLStyle WhenEquals(string value);
    public sealed virtual IXLStyle WhenNotEquals(string value);
    public sealed virtual IXLStyle WhenGreaterThan(string value);
    public sealed virtual IXLStyle WhenLessThan(string value);
    public sealed virtual IXLStyle WhenEqualOrGreaterThan(string value);
    public sealed virtual IXLStyle WhenEqualOrLessThan(string value);
    public sealed virtual IXLStyle WhenBetween(string minValue, string maxValue);
    public sealed virtual IXLStyle WhenNotBetween(string minValue, string maxValue);
    public sealed virtual IXLStyle WhenEquals(double value);
    public sealed virtual IXLStyle WhenNotEquals(double value);
    public sealed virtual IXLStyle WhenGreaterThan(double value);
    public sealed virtual IXLStyle WhenLessThan(double value);
    public sealed virtual IXLStyle WhenEqualOrGreaterThan(double value);
    public sealed virtual IXLStyle WhenEqualOrLessThan(double value);
    public sealed virtual IXLStyle WhenBetween(double minValue, double maxValue);
    public sealed virtual IXLStyle WhenNotBetween(double minValue, double maxValue);
    public sealed virtual IXLStyle WhenIsDuplicate();
    public sealed virtual IXLStyle WhenIsUnique();
    public sealed virtual IXLStyle WhenIsTrue(string formula);
    public sealed virtual IXLStyle WhenIsTop(int value, XLTopBottomType topBottomType);
    public sealed virtual IXLStyle WhenIsBottom(int value, XLTopBottomType topBottomType);
    public sealed virtual IXLCFColorScaleMin ColorScale();
    public sealed virtual IXLCFDataBarMin DataBar(XLColor color, bool showBarOnly);
    public sealed virtual IXLCFDataBarMin DataBar(XLColor positiveColor, XLColor negativeColor, bool showBarOnly);
    public sealed virtual IXLCFIconSet IconSet(XLIconSetStyle iconSetStyle, bool reverseIconOrder, bool showIconOnly);
    [CompilerGeneratedAttribute]
private void <.ctor>b__10_0(XLRange range);
    [CompilerGeneratedAttribute]
private void <.ctor>b__12_0(IXLRange range);
    [CompilerGeneratedAttribute]
private void <CopyFrom>b__97_0(KeyValuePair`2<int, XLFormula> kp);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class ClosedXML.Excel.XLConditionalFormats : object {
    private List`1<IXLConditionalFormat> _conditionalFormats;
    private static List`1<XLConditionalFormatType> _conditionalFormatTypesExcludedFromConsolidation;
    private static XLConditionalFormats();
    public sealed virtual void Add(IXLConditionalFormat conditionalFormat);
    public sealed virtual IEnumerator`1<IXLConditionalFormat> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual void Remove(Predicate`1<IXLConditionalFormat> predicate);
    internal void Consolidate();
    public sealed virtual void RemoveAll();
    public void ReorderAccordingToOriginalPriority();
}
public enum ClosedXML.Excel.XLConditionalFormatType : Enum {
    public int value__;
    public static XLConditionalFormatType Expression;
    public static XLConditionalFormatType CellIs;
    public static XLConditionalFormatType ColorScale;
    public static XLConditionalFormatType DataBar;
    public static XLConditionalFormatType IconSet;
    public static XLConditionalFormatType Top10;
    public static XLConditionalFormatType IsUnique;
    public static XLConditionalFormatType IsDuplicate;
    public static XLConditionalFormatType ContainsText;
    public static XLConditionalFormatType NotContainsText;
    public static XLConditionalFormatType StartsWith;
    public static XLConditionalFormatType EndsWith;
    public static XLConditionalFormatType IsBlank;
    public static XLConditionalFormatType NotBlank;
    public static XLConditionalFormatType IsError;
    public static XLConditionalFormatType NotError;
    public static XLConditionalFormatType TimePeriod;
    public static XLConditionalFormatType AboveAverage;
}
internal enum ClosedXML.Excel.XLConnector : Enum {
    public int value__;
    public static XLConnector And;
    public static XLConnector Or;
}
public static class ClosedXML.Excel.XLConstants : object {
    internal static int NumberOfBuiltInStyles;
    internal static int MaxFunctionArguments;
    internal static double ColumnWidthOffset;
}
internal class ClosedXML.Excel.XLCustomFilteredColumn : object {
    private XLAutoFilter _autoFilter;
    private int _column;
    private XLConnector _connector;
    public XLCustomFilteredColumn(XLAutoFilter autoFilter, int column, XLConnector connector);
    public sealed virtual void EqualTo(T value);
    public sealed virtual void NotEqualTo(T value);
    public sealed virtual void GreaterThan(T value);
    public sealed virtual void LessThan(T value);
    public sealed virtual void EqualOrGreaterThan(T value);
    public sealed virtual void EqualOrLessThan(T value);
    public sealed virtual void BeginsWith(string value);
    public sealed virtual void NotBeginsWith(string value);
    public sealed virtual void EndsWith(string value);
    public sealed virtual void NotEndsWith(string value);
    public sealed virtual void Contains(string value);
    public sealed virtual void NotContains(string value);
    private void ApplyCustomFilter(T value, XLFilterOperator op, Func`2<object, bool> condition);
}
internal class ClosedXML.Excel.XLCustomProperties : object {
    private XLWorkbook workbook;
    private Dictionary`2<string, IXLCustomProperty> customProperties;
    public XLCustomProperties(XLWorkbook workbook);
    public sealed virtual void Add(IXLCustomProperty customProperty);
    public sealed virtual void Add(string name, T value);
    public sealed virtual void Delete(string name);
    public sealed virtual IXLCustomProperty CustomProperty(string name);
    public sealed virtual IEnumerator`1<IXLCustomProperty> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal class ClosedXML.Excel.XLCustomProperty : object {
    private XLWorkbook _workbook;
    private string name;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    public string Name { get; public set; }
    public XLCustomPropertyType Type { get; }
    public object Value { get; public set; }
    public XLCustomProperty(XLWorkbook workbook);
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public sealed virtual XLCustomPropertyType get_Type();
    [CompilerGeneratedAttribute]
public sealed virtual object get_Value();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Value(object value);
    public sealed virtual T GetValue();
}
public enum ClosedXML.Excel.XLCustomPropertyType : Enum {
    public int value__;
    public static XLCustomPropertyType Text;
    public static XLCustomPropertyType Number;
    public static XLCustomPropertyType Date;
    public static XLCustomPropertyType Boolean;
}
public enum ClosedXML.Excel.XLDashStyle : Enum {
    public int value__;
    public static XLDashStyle Solid;
    public static XLDashStyle RoundDot;
    public static XLDashStyle SquareDot;
    public static XLDashStyle Dash;
    public static XLDashStyle DashDot;
    public static XLDashStyle LongDash;
    public static XLDashStyle LongDashDot;
    public static XLDashStyle LongDashDotDot;
}
public enum ClosedXML.Excel.XLDataType : Enum {
    public int value__;
    public static XLDataType Blank;
    public static XLDataType Boolean;
    public static XLDataType Number;
    public static XLDataType Text;
    public static XLDataType Error;
    public static XLDataType DateTime;
    public static XLDataType TimeSpan;
}
internal class ClosedXML.Excel.XLDataValidation : object {
    private XLRanges _ranges;
    private XLWorksheet _worksheet;
    [CompilerGeneratedAttribute]
private EventHandler`1<RangeEventArgs> RangeAdded;
    [CompilerGeneratedAttribute]
private EventHandler`1<RangeEventArgs> RangeRemoved;
    private string maxValue;
    private string minValue;
    [CompilerGeneratedAttribute]
private XLAllowedValues <AllowedValues>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private XLErrorStyle <ErrorStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorTitle>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreBlanks>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <InCellDropdown>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InputMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InputTitle>k__BackingField;
    [CompilerGeneratedAttribute]
private XLOperator <Operator>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowErrorMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowInputMessage>k__BackingField;
    internal XLWorksheet Worksheet { get; }
    public XLAllowedValues AllowedValues { get; public set; }
    public XLDateCriteria Date { get; }
    public XLDecimalCriteria Decimal { get; }
    public string ErrorMessage { get; public set; }
    public XLErrorStyle ErrorStyle { get; public set; }
    public string ErrorTitle { get; public set; }
    public bool IgnoreBlanks { get; public set; }
    public bool InCellDropdown { get; public set; }
    public string InputMessage { get; public set; }
    public string InputTitle { get; public set; }
    public string MaxValue { get; public set; }
    public string MinValue { get; public set; }
    public XLOperator Operator { get; public set; }
    public IEnumerable`1<IXLRange> Ranges { get; }
    public bool ShowErrorMessage { get; public set; }
    public bool ShowInputMessage { get; public set; }
    public XLTextLengthCriteria TextLength { get; }
    public XLTimeCriteria Time { get; }
    public string Value { get; public set; }
    public XLWholeNumberCriteria WholeNumber { get; }
    public XLDataValidation(IXLRange range);
    public XLDataValidation(IXLDataValidation dataValidation, XLWorksheet worksheet);
    private XLDataValidation(XLWorksheet worksheet);
    [CompilerGeneratedAttribute]
internal void add_RangeAdded(EventHandler`1<RangeEventArgs> value);
    [CompilerGeneratedAttribute]
internal void remove_RangeAdded(EventHandler`1<RangeEventArgs> value);
    [CompilerGeneratedAttribute]
internal void add_RangeRemoved(EventHandler`1<RangeEventArgs> value);
    [CompilerGeneratedAttribute]
internal void remove_RangeRemoved(EventHandler`1<RangeEventArgs> value);
    internal XLWorksheet get_Worksheet();
    public sealed virtual void Clear();
    public void CopyFrom(IXLDataValidation dataValidation);
    public sealed virtual bool IsDirty();
    internal void SplitBy(IXLRangeAddress rangeAddress);
    private void Initialize();
    [CompilerGeneratedAttribute]
public sealed virtual XLAllowedValues get_AllowedValues();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AllowedValues(XLAllowedValues value);
    public sealed virtual XLDateCriteria get_Date();
    public sealed virtual XLDecimalCriteria get_Decimal();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ErrorMessage();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ErrorMessage(string value);
    [CompilerGeneratedAttribute]
public sealed virtual XLErrorStyle get_ErrorStyle();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ErrorStyle(XLErrorStyle value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ErrorTitle();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ErrorTitle(string value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IgnoreBlanks();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IgnoreBlanks(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_InCellDropdown();
    [CompilerGeneratedAttribute]
public sealed virtual void set_InCellDropdown(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_InputMessage();
    [CompilerGeneratedAttribute]
public sealed virtual void set_InputMessage(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_InputTitle();
    [CompilerGeneratedAttribute]
public sealed virtual void set_InputTitle(string value);
    public sealed virtual string get_MaxValue();
    public sealed virtual void set_MaxValue(string value);
    public sealed virtual string get_MinValue();
    public sealed virtual void set_MinValue(string value);
    [CompilerGeneratedAttribute]
public sealed virtual XLOperator get_Operator();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Operator(XLOperator value);
    public sealed virtual IEnumerable`1<IXLRange> get_Ranges();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ShowErrorMessage();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ShowErrorMessage(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ShowInputMessage();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ShowInputMessage(bool value);
    public sealed virtual XLTextLengthCriteria get_TextLength();
    public sealed virtual XLTimeCriteria get_Time();
    public sealed virtual string get_Value();
    public sealed virtual void set_Value(string value);
    public sealed virtual XLWholeNumberCriteria get_WholeNumber();
    public sealed virtual void AddRange(IXLRange range);
    public sealed virtual void AddRanges(IEnumerable`1<IXLRange> ranges);
    public sealed virtual void ClearRanges();
    public sealed virtual void Custom(string customValidation);
    public sealed virtual void List(string list);
    public sealed virtual void List(string list, bool inCellDropdown);
    public sealed virtual void List(IXLRange range);
    public sealed virtual void List(IXLRange range, bool inCellDropdown);
    public sealed virtual bool RemoveRange(IXLRange range);
    private void Validate(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class ClosedXML.Excel.XLDataValidations : object {
    private XLRangeIndex`1<XLDataValidationIndexEntry> _dataValidationIndex;
    private List`1<IXLDataValidation> _dataValidations;
    private XLWorksheet _worksheet;
    private bool _skipSplittingExistingRanges;
    internal XLWorksheet Worksheet { get; }
    private IXLWorksheet ClosedXML.Excel.IXLDataValidations.Worksheet { get; }
    public XLDataValidations(XLWorksheet worksheet);
    internal XLWorksheet get_Worksheet();
    private sealed virtual override IXLWorksheet ClosedXML.Excel.IXLDataValidations.get_Worksheet();
    public sealed virtual IXLDataValidation Add(IXLDataValidation dataValidation);
    public sealed virtual bool ContainsSingle(IXLRange range);
    public sealed virtual void Delete(Predicate`1<IXLDataValidation> predicate);
    public void Delete(IXLDataValidation dataValidation);
    public void Delete(IXLRange range);
    public sealed virtual IEnumerable`1<IXLDataValidation> GetAllInRange(IXLRangeAddress rangeAddress);
    public sealed virtual IEnumerator`1<IXLDataValidation> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual bool TryGet(IXLRangeAddress rangeAddress, IXLDataValidation& dataValidation);
    internal IXLDataValidation Add(IXLDataValidation dataValidation, bool skipIntersectionsCheck);
    public void Consolidate();
    private void OnRangeAdded(object sender, RangeEventArgs e);
    private void OnRangeRemoved(object sender, RangeEventArgs e);
    private void ProcessRangeAdded(IXLRange range, XLDataValidation dataValidation, bool skipIntersectionCheck);
    private void ProcessRangeRemoved(IXLRange range);
    private void SplitExistingRanges(IXLRangeAddress rangeAddress);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool <Add>b__18_0(IXLRange r);
}
public class ClosedXML.Excel.XLDateCriteria : XLValidationCriteria {
    public XLDateCriteria(IXLDataValidation dataValidation);
    public void Between(DateTime minValue, DateTime maxValue);
    public void EqualOrGreaterThan(DateTime value);
    public void EqualOrLessThan(DateTime value);
    public void EqualTo(DateTime value);
    public void GreaterThan(DateTime value);
    public void LessThan(DateTime value);
    public void NotBetween(DateTime minValue, DateTime maxValue);
    public void NotEqualTo(DateTime value);
}
internal class ClosedXML.Excel.XLDateTimeGroupFilteredColumn : object {
    private XLAutoFilter _autoFilter;
    private int _column;
    public XLDateTimeGroupFilteredColumn(XLAutoFilter autoFilter, int column);
    public sealed virtual IXLDateTimeGroupFilteredColumn AddDateGroupFilter(DateTime date, XLDateTimeGrouping dateTimeGrouping);
    internal static bool IsMatch(DateTime date1, DateTime date2, XLDateTimeGrouping dateTimeGrouping);
}
public enum ClosedXML.Excel.XLDateTimeGrouping : Enum {
    public int value__;
    public static XLDateTimeGrouping Year;
    public static XLDateTimeGrouping Month;
    public static XLDateTimeGrouping Day;
    public static XLDateTimeGrouping Hour;
    public static XLDateTimeGrouping Minute;
    public static XLDateTimeGrouping Second;
}
public class ClosedXML.Excel.XLDecimalCriteria : XLValidationCriteria {
    public XLDecimalCriteria(IXLDataValidation dataValidation);
    public void Between(double minValue, double maxValue);
    public void EqualOrGreaterThan(double value);
    public void EqualOrLessThan(double value);
    public void EqualTo(double value);
    public void GreaterThan(double value);
    public void LessThan(double value);
    public void NotBetween(double minValue, double maxValue);
    public void NotEqualTo(double value);
}
public class ClosedXML.Excel.XLDictionary`1 : Dictionary`2<int, T> {
    public XLDictionary`1(XLDictionary`1<T> other);
    public void Initialize(T value);
    public void Add(T value);
}
public enum ClosedXML.Excel.XLDisplayBlanksAsValues : Enum {
    public int value__;
    public static XLDisplayBlanksAsValues Interpolate;
    public static XLDisplayBlanksAsValues NotPlotted;
    public static XLDisplayBlanksAsValues Zero;
}
internal class ClosedXML.Excel.XLDrawing`1 : object {
    internal T Container;
    [CompilerGeneratedAttribute]
private int <ShapeId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Visible>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private IXLDrawingPosition <Position>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ZOrder>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HorizontalFlip>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <VerticalFlip>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Rotation>k__BackingField;
    [CompilerGeneratedAttribute]
private int <OffsetX>k__BackingField;
    [CompilerGeneratedAttribute]
private int <OffsetY>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ExtentLength>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ExtentWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private IXLDrawingStyle <Style>k__BackingField;
    public int ShapeId { get; internal set; }
    public bool Visible { get; public set; }
    public string Name { get; public set; }
    public string Description { get; public set; }
    public IXLDrawingPosition Position { get; private set; }
    public int ZOrder { get; public set; }
    public bool HorizontalFlip { get; public set; }
    public bool VerticalFlip { get; public set; }
    public int Rotation { get; public set; }
    public int OffsetX { get; public set; }
    public int OffsetY { get; public set; }
    public int ExtentLength { get; public set; }
    public int ExtentWidth { get; public set; }
    public IXLDrawingStyle Style { get; private set; }
    [CompilerGeneratedAttribute]
public sealed virtual int get_ShapeId();
    [CompilerGeneratedAttribute]
internal void set_ShapeId(int value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Visible();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Visible(bool value);
    public sealed virtual T SetVisible();
    public sealed virtual T SetVisible(bool hidden);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    public T SetName(string name);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    public T SetDescription(string description);
    [CompilerGeneratedAttribute]
public sealed virtual IXLDrawingPosition get_Position();
    [CompilerGeneratedAttribute]
private void set_Position(IXLDrawingPosition value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_ZOrder();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ZOrder(int value);
    public sealed virtual T SetZOrder(int zOrder);
    [CompilerGeneratedAttribute]
public bool get_HorizontalFlip();
    [CompilerGeneratedAttribute]
public void set_HorizontalFlip(bool value);
    public T SetHorizontalFlip();
    public T SetHorizontalFlip(bool horizontalFlip);
    [CompilerGeneratedAttribute]
public bool get_VerticalFlip();
    [CompilerGeneratedAttribute]
public void set_VerticalFlip(bool value);
    public T SetVerticalFlip();
    public T SetVerticalFlip(bool verticalFlip);
    [CompilerGeneratedAttribute]
public int get_Rotation();
    [CompilerGeneratedAttribute]
public void set_Rotation(int value);
    public T SetRotation(int rotation);
    [CompilerGeneratedAttribute]
public int get_OffsetX();
    [CompilerGeneratedAttribute]
public void set_OffsetX(int value);
    public T SetOffsetX(int offsetX);
    [CompilerGeneratedAttribute]
public int get_OffsetY();
    [CompilerGeneratedAttribute]
public void set_OffsetY(int value);
    public T SetOffsetY(int offsetY);
    [CompilerGeneratedAttribute]
public int get_ExtentLength();
    [CompilerGeneratedAttribute]
public void set_ExtentLength(int value);
    public T SetExtentLength(int extentLength);
    [CompilerGeneratedAttribute]
public int get_ExtentWidth();
    [CompilerGeneratedAttribute]
public void set_ExtentWidth(int value);
    public T SetExtentWidth(int extentWidth);
    [CompilerGeneratedAttribute]
public sealed virtual IXLDrawingStyle get_Style();
    [CompilerGeneratedAttribute]
private void set_Style(IXLDrawingStyle value);
}
internal class ClosedXML.Excel.XLDrawingAlignment : object {
    private IXLDrawingStyle _style;
    [CompilerGeneratedAttribute]
private XLDrawingHorizontalAlignment <Horizontal>k__BackingField;
    [CompilerGeneratedAttribute]
private XLDrawingVerticalAlignment <Vertical>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AutomaticSize>k__BackingField;
    [CompilerGeneratedAttribute]
private XLDrawingTextDirection <Direction>k__BackingField;
    [CompilerGeneratedAttribute]
private XLDrawingTextOrientation <Orientation>k__BackingField;
    public XLDrawingHorizontalAlignment Horizontal { get; public set; }
    public XLDrawingVerticalAlignment Vertical { get; public set; }
    public bool AutomaticSize { get; public set; }
    public XLDrawingTextDirection Direction { get; public set; }
    public XLDrawingTextOrientation Orientation { get; public set; }
    public XLDrawingAlignment(IXLDrawingStyle style);
    [CompilerGeneratedAttribute]
public sealed virtual XLDrawingHorizontalAlignment get_Horizontal();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Horizontal(XLDrawingHorizontalAlignment value);
    public sealed virtual IXLDrawingStyle SetHorizontal(XLDrawingHorizontalAlignment value);
    [CompilerGeneratedAttribute]
public sealed virtual XLDrawingVerticalAlignment get_Vertical();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Vertical(XLDrawingVerticalAlignment value);
    public sealed virtual IXLDrawingStyle SetVertical(XLDrawingVerticalAlignment value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_AutomaticSize();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AutomaticSize(bool value);
    public sealed virtual IXLDrawingStyle SetAutomaticSize();
    public sealed virtual IXLDrawingStyle SetAutomaticSize(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual XLDrawingTextDirection get_Direction();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Direction(XLDrawingTextDirection value);
    public sealed virtual IXLDrawingStyle SetDirection(XLDrawingTextDirection value);
    [CompilerGeneratedAttribute]
public sealed virtual XLDrawingTextOrientation get_Orientation();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Orientation(XLDrawingTextOrientation value);
    public sealed virtual IXLDrawingStyle SetOrientation(XLDrawingTextOrientation value);
}
public enum ClosedXML.Excel.XLDrawingAnchor : Enum {
    public int value__;
    public static XLDrawingAnchor MoveAndSizeWithCells;
    public static XLDrawingAnchor MoveWithCells;
    public static XLDrawingAnchor Absolute;
}
internal class ClosedXML.Excel.XLDrawingColorsAndLines : object {
    private IXLDrawingStyle _style;
    [CompilerGeneratedAttribute]
private XLColor <FillColor>k__BackingField;
    [CompilerGeneratedAttribute]
private double <FillTransparency>k__BackingField;
    [CompilerGeneratedAttribute]
private XLColor <LineColor>k__BackingField;
    [CompilerGeneratedAttribute]
private double <LineTransparency>k__BackingField;
    [CompilerGeneratedAttribute]
private double <LineWeight>k__BackingField;
    [CompilerGeneratedAttribute]
private XLDashStyle <LineDash>k__BackingField;
    [CompilerGeneratedAttribute]
private XLLineStyle <LineStyle>k__BackingField;
    public XLColor FillColor { get; public set; }
    public double FillTransparency { get; public set; }
    public XLColor LineColor { get; public set; }
    public double LineTransparency { get; public set; }
    public double LineWeight { get; public set; }
    public XLDashStyle LineDash { get; public set; }
    public XLLineStyle LineStyle { get; public set; }
    public XLDrawingColorsAndLines(IXLDrawingStyle style);
    [CompilerGeneratedAttribute]
public sealed virtual XLColor get_FillColor();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FillColor(XLColor value);
    public sealed virtual IXLDrawingStyle SetFillColor(XLColor value);
    [CompilerGeneratedAttribute]
public sealed virtual double get_FillTransparency();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FillTransparency(double value);
    public sealed virtual IXLDrawingStyle SetFillTransparency(double value);
    [CompilerGeneratedAttribute]
public sealed virtual XLColor get_LineColor();
    [CompilerGeneratedAttribute]
public sealed virtual void set_LineColor(XLColor value);
    public sealed virtual IXLDrawingStyle SetLineColor(XLColor value);
    [CompilerGeneratedAttribute]
public sealed virtual double get_LineTransparency();
    [CompilerGeneratedAttribute]
public sealed virtual void set_LineTransparency(double value);
    public sealed virtual IXLDrawingStyle SetLineTransparency(double value);
    [CompilerGeneratedAttribute]
public sealed virtual double get_LineWeight();
    [CompilerGeneratedAttribute]
public sealed virtual void set_LineWeight(double value);
    public sealed virtual IXLDrawingStyle SetLineWeight(double value);
    [CompilerGeneratedAttribute]
public sealed virtual XLDashStyle get_LineDash();
    [CompilerGeneratedAttribute]
public sealed virtual void set_LineDash(XLDashStyle value);
    public sealed virtual IXLDrawingStyle SetLineDash(XLDashStyle value);
    [CompilerGeneratedAttribute]
public sealed virtual XLLineStyle get_LineStyle();
    [CompilerGeneratedAttribute]
public sealed virtual void set_LineStyle(XLLineStyle value);
    public sealed virtual IXLDrawingStyle SetLineStyle(XLLineStyle value);
}
internal class ClosedXML.Excel.XLDrawingFont : object {
    private IXLDrawingStyle _style;
    [CompilerGeneratedAttribute]
private bool <Bold>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Italic>k__BackingField;
    [CompilerGeneratedAttribute]
private XLFontUnderlineValues <Underline>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Strikethrough>k__BackingField;
    [CompilerGeneratedAttribute]
private XLFontVerticalTextAlignmentValues <VerticalAlignment>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Shadow>k__BackingField;
    [CompilerGeneratedAttribute]
private double <FontSize>k__BackingField;
    [CompilerGeneratedAttribute]
private XLColor <FontColor>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FontName>k__BackingField;
    [CompilerGeneratedAttribute]
private XLFontFamilyNumberingValues <FontFamilyNumbering>k__BackingField;
    [CompilerGeneratedAttribute]
private XLFontCharSet <FontCharSet>k__BackingField;
    public bool Bold { get; public set; }
    public bool Italic { get; public set; }
    public XLFontUnderlineValues Underline { get; public set; }
    public bool Strikethrough { get; public set; }
    public XLFontVerticalTextAlignmentValues VerticalAlignment { get; public set; }
    public bool Shadow { get; public set; }
    public double FontSize { get; public set; }
    public XLColor FontColor { get; public set; }
    public string FontName { get; public set; }
    public XLFontFamilyNumberingValues FontFamilyNumbering { get; public set; }
    public XLFontCharSet FontCharSet { get; public set; }
    public XLDrawingFont(IXLDrawingStyle style);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Bold();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Bold(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Italic();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Italic(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual XLFontUnderlineValues get_Underline();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Underline(XLFontUnderlineValues value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Strikethrough();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Strikethrough(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual XLFontVerticalTextAlignmentValues get_VerticalAlignment();
    [CompilerGeneratedAttribute]
public sealed virtual void set_VerticalAlignment(XLFontVerticalTextAlignmentValues value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Shadow();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Shadow(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual double get_FontSize();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FontSize(double value);
    [CompilerGeneratedAttribute]
public sealed virtual XLColor get_FontColor();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FontColor(XLColor value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_FontName();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FontName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual XLFontFamilyNumberingValues get_FontFamilyNumbering();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FontFamilyNumbering(XLFontFamilyNumberingValues value);
    [CompilerGeneratedAttribute]
public sealed virtual XLFontCharSet get_FontCharSet();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FontCharSet(XLFontCharSet value);
    public sealed virtual IXLDrawingStyle SetBold();
    public sealed virtual IXLDrawingStyle SetBold(bool value);
    public sealed virtual IXLDrawingStyle SetItalic();
    public sealed virtual IXLDrawingStyle SetItalic(bool value);
    public sealed virtual IXLDrawingStyle SetUnderline();
    public sealed virtual IXLDrawingStyle SetUnderline(XLFontUnderlineValues value);
    public sealed virtual IXLDrawingStyle SetStrikethrough();
    public sealed virtual IXLDrawingStyle SetStrikethrough(bool value);
    public sealed virtual IXLDrawingStyle SetVerticalAlignment(XLFontVerticalTextAlignmentValues value);
    public sealed virtual IXLDrawingStyle SetShadow();
    public sealed virtual IXLDrawingStyle SetShadow(bool value);
    public sealed virtual IXLDrawingStyle SetFontSize(double value);
    public sealed virtual IXLDrawingStyle SetFontColor(XLColor value);
    public sealed virtual IXLDrawingStyle SetFontName(string value);
    public sealed virtual IXLDrawingStyle SetFontFamilyNumbering(XLFontFamilyNumberingValues value);
    public sealed virtual IXLDrawingStyle SetFontCharSet(XLFontCharSet value);
}
public enum ClosedXML.Excel.XLDrawingHorizontalAlignment : Enum {
    public int value__;
    public static XLDrawingHorizontalAlignment Left;
    public static XLDrawingHorizontalAlignment Justify;
    public static XLDrawingHorizontalAlignment Center;
    public static XLDrawingHorizontalAlignment Right;
    public static XLDrawingHorizontalAlignment Distributed;
}
internal class ClosedXML.Excel.XLDrawingMargins : object {
    private IXLDrawingStyle _style;
    [CompilerGeneratedAttribute]
private bool <Automatic>k__BackingField;
    private double _left;
    private double _right;
    private double _top;
    private double _bottom;
    public bool Automatic { get; public set; }
    public double Left { get; public set; }
    public double Right { get; public set; }
    public double Top { get; public set; }
    public double Bottom { get; public set; }
    unknown double All {public set; }
    public XLDrawingMargins(IXLDrawingStyle style);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Automatic();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Automatic(bool value);
    public sealed virtual IXLDrawingStyle SetAutomatic();
    public sealed virtual IXLDrawingStyle SetAutomatic(bool value);
    public sealed virtual double get_Left();
    public sealed virtual void set_Left(double value);
    public sealed virtual IXLDrawingStyle SetLeft(double value);
    public sealed virtual double get_Right();
    public sealed virtual void set_Right(double value);
    public sealed virtual IXLDrawingStyle SetRight(double value);
    public sealed virtual double get_Top();
    public sealed virtual void set_Top(double value);
    public sealed virtual IXLDrawingStyle SetTop(double value);
    public sealed virtual double get_Bottom();
    public sealed virtual void set_Bottom(double value);
    public sealed virtual IXLDrawingStyle SetBottom(double value);
    public sealed virtual void set_All(double value);
    public sealed virtual IXLDrawingStyle SetAll(double value);
}
internal class ClosedXML.Excel.XLDrawingPosition : object {
    [CompilerGeneratedAttribute]
private int <Column>k__BackingField;
    [CompilerGeneratedAttribute]
private double <ColumnOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Row>k__BackingField;
    [CompilerGeneratedAttribute]
private double <RowOffset>k__BackingField;
    public int Column { get; public set; }
    public double ColumnOffset { get; public set; }
    public int Row { get; public set; }
    public double RowOffset { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual int get_Column();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Column(int value);
    public sealed virtual IXLDrawingPosition SetColumn(int column);
    [CompilerGeneratedAttribute]
public sealed virtual double get_ColumnOffset();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ColumnOffset(double value);
    public sealed virtual IXLDrawingPosition SetColumnOffset(double columnOffset);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Row();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Row(int value);
    public sealed virtual IXLDrawingPosition SetRow(int row);
    [CompilerGeneratedAttribute]
public sealed virtual double get_RowOffset();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RowOffset(double value);
    public sealed virtual IXLDrawingPosition SetRowOffset(double rowOffset);
}
internal class ClosedXML.Excel.XLDrawingProperties : object {
    private IXLDrawingStyle _style;
    [CompilerGeneratedAttribute]
private XLDrawingAnchor <Positioning>k__BackingField;
    public XLDrawingAnchor Positioning { get; public set; }
    public XLDrawingProperties(IXLDrawingStyle style);
    [CompilerGeneratedAttribute]
public sealed virtual XLDrawingAnchor get_Positioning();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Positioning(XLDrawingAnchor value);
    public sealed virtual IXLDrawingStyle SetPositioning(XLDrawingAnchor value);
}
internal class ClosedXML.Excel.XLDrawingProtection : object {
    private IXLDrawingStyle _style;
    [CompilerGeneratedAttribute]
private bool <Locked>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <LockText>k__BackingField;
    public bool Locked { get; public set; }
    public bool LockText { get; public set; }
    public XLDrawingProtection(IXLDrawingStyle style);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Locked();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Locked(bool value);
    public sealed virtual IXLDrawingStyle SetLocked();
    public sealed virtual IXLDrawingStyle SetLocked(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_LockText();
    [CompilerGeneratedAttribute]
public sealed virtual void set_LockText(bool value);
    public sealed virtual IXLDrawingStyle SetLockText();
    public sealed virtual IXLDrawingStyle SetLockText(bool value);
}
internal class ClosedXML.Excel.XLDrawingSize : object {
    private IXLDrawingStyle _style;
    [CompilerGeneratedAttribute]
private double <Height>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Width>k__BackingField;
    public bool AutomaticSize { get; public set; }
    public double Height { get; public set; }
    public double Width { get; public set; }
    public XLDrawingSize(IXLDrawingStyle style);
    public sealed virtual bool get_AutomaticSize();
    public sealed virtual void set_AutomaticSize(bool value);
    public sealed virtual IXLDrawingStyle SetAutomaticSize();
    public sealed virtual IXLDrawingStyle SetAutomaticSize(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual double get_Height();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Height(double value);
    public sealed virtual IXLDrawingStyle SetHeight(double value);
    [CompilerGeneratedAttribute]
public sealed virtual double get_Width();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Width(double value);
    public sealed virtual IXLDrawingStyle SetWidth(double value);
}
internal class ClosedXML.Excel.XLDrawingStyle : object {
    [CompilerGeneratedAttribute]
private IXLDrawingAlignment <Alignment>k__BackingField;
    [CompilerGeneratedAttribute]
private IXLDrawingColorsAndLines <ColorsAndLines>k__BackingField;
    [CompilerGeneratedAttribute]
private IXLDrawingSize <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private IXLDrawingProtection <Protection>k__BackingField;
    [CompilerGeneratedAttribute]
private IXLDrawingProperties <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private IXLDrawingMargins <Margins>k__BackingField;
    [CompilerGeneratedAttribute]
private IXLDrawingWeb <Web>k__BackingField;
    public IXLDrawingAlignment Alignment { get; private set; }
    public IXLDrawingColorsAndLines ColorsAndLines { get; private set; }
    public IXLDrawingSize Size { get; private set; }
    public IXLDrawingProtection Protection { get; private set; }
    public IXLDrawingProperties Properties { get; private set; }
    public IXLDrawingMargins Margins { get; private set; }
    public IXLDrawingWeb Web { get; private set; }
    public static IXLDrawingStyle DefaultCommentStyle { get; }
    [CompilerGeneratedAttribute]
public sealed virtual IXLDrawingAlignment get_Alignment();
    [CompilerGeneratedAttribute]
private void set_Alignment(IXLDrawingAlignment value);
    [CompilerGeneratedAttribute]
public sealed virtual IXLDrawingColorsAndLines get_ColorsAndLines();
    [CompilerGeneratedAttribute]
private void set_ColorsAndLines(IXLDrawingColorsAndLines value);
    [CompilerGeneratedAttribute]
public sealed virtual IXLDrawingSize get_Size();
    [CompilerGeneratedAttribute]
private void set_Size(IXLDrawingSize value);
    [CompilerGeneratedAttribute]
public sealed virtual IXLDrawingProtection get_Protection();
    [CompilerGeneratedAttribute]
private void set_Protection(IXLDrawingProtection value);
    [CompilerGeneratedAttribute]
public sealed virtual IXLDrawingProperties get_Properties();
    [CompilerGeneratedAttribute]
private void set_Properties(IXLDrawingProperties value);
    [CompilerGeneratedAttribute]
public sealed virtual IXLDrawingMargins get_Margins();
    [CompilerGeneratedAttribute]
private void set_Margins(IXLDrawingMargins value);
    [CompilerGeneratedAttribute]
public sealed virtual IXLDrawingWeb get_Web();
    [CompilerGeneratedAttribute]
private void set_Web(IXLDrawingWeb value);
    public static IXLDrawingStyle get_DefaultCommentStyle();
}
public enum ClosedXML.Excel.XLDrawingTextDirection : Enum {
    public int value__;
    public static XLDrawingTextDirection Context;
    public static XLDrawingTextDirection LeftToRight;
    public static XLDrawingTextDirection RightToLeft;
}
public enum ClosedXML.Excel.XLDrawingTextOrientation : Enum {
    public int value__;
    public static XLDrawingTextOrientation LeftToRight;
    public static XLDrawingTextOrientation Vertical;
    public static XLDrawingTextOrientation BottomToTop;
    public static XLDrawingTextOrientation TopToBottom;
}
public enum ClosedXML.Excel.XLDrawingVerticalAlignment : Enum {
    public int value__;
    public static XLDrawingVerticalAlignment Top;
    public static XLDrawingVerticalAlignment Justify;
    public static XLDrawingVerticalAlignment Center;
    public static XLDrawingVerticalAlignment Bottom;
    public static XLDrawingVerticalAlignment Distributed;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class ClosedXML.Excel.XLDrawingWeb : object {
    [NullableAttribute("1")]
private IXLDrawingStyle _style;
    [CompilerGeneratedAttribute]
private string <AlternateText>k__BackingField;
    public string AlternateText { get; public set; }
    [NullableContextAttribute("1")]
public XLDrawingWeb(IXLDrawingStyle style);
    [CompilerGeneratedAttribute]
public sealed virtual string get_AlternateText();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AlternateText(string value);
    [NullableContextAttribute("1")]
public sealed virtual IXLDrawingStyle SetAlternateText(string value);
}
public enum ClosedXML.Excel.XLError : Enum {
    public int value__;
    public static XLError NullValue;
    public static XLError DivisionByZero;
    public static XLError IncompatibleValue;
    public static XLError CellReference;
    public static XLError NameNotRecognized;
    public static XLError NumberInvalid;
    public static XLError NoValueAvailable;
}
public enum ClosedXML.Excel.XLErrorStyle : Enum {
    public int value__;
    public static XLErrorStyle Stop;
    public static XLErrorStyle Warning;
    public static XLErrorStyle Information;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class ClosedXML.Excel.XLFileSharing : object {
    [CompilerGeneratedAttribute]
private bool <ReadOnlyRecommended>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserName>k__BackingField;
    public bool ReadOnlyRecommended { get; public set; }
    public string UserName { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ReadOnlyRecommended();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ReadOnlyRecommended(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_UserName();
    [CompilerGeneratedAttribute]
public sealed virtual void set_UserName(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class ClosedXML.Excel.XLFill : object {
    private XLStyle _style;
    private XLFillValue _value;
    internal XLFillKey Key { get; private set; }
    public XLColor BackgroundColor { get; public set; }
    public XLColor PatternColor { get; public set; }
    public XLFillPatternValues PatternType { get; public set; }
    public XLFill(XLStyle style, XLFillValue value);
    [NullableContextAttribute("2")]
public XLFill(XLStyle style, XLFillKey key);
    [NullableContextAttribute("2")]
public XLFill(XLStyle style, IXLFill d);
    [NullableContextAttribute("2")]
internal static XLFillKey GenerateKey(IXLFill defaultFill);
    internal XLFillKey get_Key();
    private void set_Key(XLFillKey value);
    private void Modify(Func`2<XLFillKey, XLFillKey> modification);
    public sealed virtual XLColor get_BackgroundColor();
    public sealed virtual void set_BackgroundColor(XLColor value);
    public sealed virtual XLColor get_PatternColor();
    public sealed virtual void set_PatternColor(XLColor value);
    public sealed virtual XLFillPatternValues get_PatternType();
    public sealed virtual void set_PatternType(XLFillPatternValues value);
    public sealed virtual IXLStyle SetBackgroundColor(XLColor value);
    public sealed virtual IXLStyle SetPatternColor(XLColor value);
    public sealed virtual IXLStyle SetPatternType(XLFillPatternValues value);
    public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(IXLFill other);
    public virtual string ToString();
    public virtual int GetHashCode();
}
internal class ClosedXML.Excel.XLFillKey : ValueType {
    [CompilerGeneratedAttribute]
private XLColorKey <BackgroundColor>k__BackingField;
    [CompilerGeneratedAttribute]
private XLColorKey <PatternColor>k__BackingField;
    [CompilerGeneratedAttribute]
private XLFillPatternValues <PatternType>k__BackingField;
    public XLColorKey BackgroundColor { get; public set; }
    public XLColorKey PatternColor { get; public set; }
    public XLFillPatternValues PatternType { get; public set; }
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public XLColorKey get_BackgroundColor();
    [CompilerGeneratedAttribute]
public void set_BackgroundColor(XLColorKey value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public XLColorKey get_PatternColor();
    [CompilerGeneratedAttribute]
public void set_PatternColor(XLColorKey value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public XLFillPatternValues get_PatternType();
    [CompilerGeneratedAttribute]
public void set_PatternType(XLFillPatternValues value);
    public virtual int GetHashCode();
    public sealed virtual bool Equals(XLFillKey other);
    private bool HasNoFill();
    private bool HasNoForeground();
    public virtual bool Equals(object obj);
    public virtual string ToString();
    public static bool op_Equality(XLFillKey left, XLFillKey right);
    public static bool op_Inequality(XLFillKey left, XLFillKey right);
}
public enum ClosedXML.Excel.XLFillPatternValues : Enum {
    public int value__;
    public static XLFillPatternValues DarkDown;
    public static XLFillPatternValues DarkGray;
    public static XLFillPatternValues DarkGrid;
    public static XLFillPatternValues DarkHorizontal;
    public static XLFillPatternValues DarkTrellis;
    public static XLFillPatternValues DarkUp;
    public static XLFillPatternValues DarkVertical;
    public static XLFillPatternValues Gray0625;
    public static XLFillPatternValues Gray125;
    public static XLFillPatternValues LightDown;
    public static XLFillPatternValues LightGray;
    public static XLFillPatternValues LightGrid;
    public static XLFillPatternValues LightHorizontal;
    public static XLFillPatternValues LightTrellis;
    public static XLFillPatternValues LightUp;
    public static XLFillPatternValues LightVertical;
    public static XLFillPatternValues MediumGray;
    public static XLFillPatternValues None;
    public static XLFillPatternValues Solid;
}
internal class ClosedXML.Excel.XLFillValue : object {
    private static XLFillRepository Repository;
    private static XLFillKey DefaultKey;
    internal static XLFillValue Default;
    [CompilerGeneratedAttribute]
private XLFillKey <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private XLColor <BackgroundColor>k__BackingField;
    [CompilerGeneratedAttribute]
private XLColor <PatternColor>k__BackingField;
    public XLFillKey Key { get; private set; }
    public XLColor BackgroundColor { get; private set; }
    public XLColor PatternColor { get; private set; }
    public XLFillPatternValues PatternType { get; }
    private XLFillValue(XLFillKey key);
    private static XLFillValue();
    public static XLFillValue FromKey(XLFillKey& key);
    [CompilerGeneratedAttribute]
public XLFillKey get_Key();
    [CompilerGeneratedAttribute]
private void set_Key(XLFillKey value);
    [CompilerGeneratedAttribute]
public XLColor get_BackgroundColor();
    [CompilerGeneratedAttribute]
private void set_BackgroundColor(XLColor value);
    [CompilerGeneratedAttribute]
public XLColor get_PatternColor();
    [CompilerGeneratedAttribute]
private void set_PatternColor(XLColor value);
    public XLFillPatternValues get_PatternType();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal class ClosedXML.Excel.XLFilter : object {
    [CompilerGeneratedAttribute]
private Func`2<object, bool> <Condition>k__BackingField;
    [CompilerGeneratedAttribute]
private XLConnector <Connector>k__BackingField;
    [CompilerGeneratedAttribute]
private XLDateTimeGrouping <DateTimeGrouping>k__BackingField;
    [CompilerGeneratedAttribute]
private XLFilterOperator <Operator>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    public Func`2<object, bool> Condition { get; public set; }
    public XLConnector Connector { get; public set; }
    public XLDateTimeGrouping DateTimeGrouping { get; public set; }
    public XLFilterOperator Operator { get; public set; }
    public object Value { get; public set; }
    public XLFilter(XLFilterOperator op);
    [CompilerGeneratedAttribute]
public Func`2<object, bool> get_Condition();
    [CompilerGeneratedAttribute]
public void set_Condition(Func`2<object, bool> value);
    [CompilerGeneratedAttribute]
public XLConnector get_Connector();
    [CompilerGeneratedAttribute]
public void set_Connector(XLConnector value);
    [CompilerGeneratedAttribute]
public XLDateTimeGrouping get_DateTimeGrouping();
    [CompilerGeneratedAttribute]
public void set_DateTimeGrouping(XLDateTimeGrouping value);
    [CompilerGeneratedAttribute]
public XLFilterOperator get_Operator();
    [CompilerGeneratedAttribute]
public void set_Operator(XLFilterOperator value);
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(object value);
}
public enum ClosedXML.Excel.XLFilterAreaOrder : Enum {
    public int value__;
    public static XLFilterAreaOrder DownThenOver;
    public static XLFilterAreaOrder OverThenDown;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class ClosedXML.Excel.XLFilterColumn : object {
    private XLAutoFilter _autoFilter;
    private int _column;
    [CompilerGeneratedAttribute]
private static Func`3<string, object, bool> <BeginsWithFunction>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`3<string, object, bool> <EndsWithFunction>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`3<string, object, bool> <ContainsFunction>k__BackingField;
    [CompilerGeneratedAttribute]
private XLFilterType <FilterType>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TopBottomValue>k__BackingField;
    [CompilerGeneratedAttribute]
private XLTopBottomType <TopBottomType>k__BackingField;
    [CompilerGeneratedAttribute]
private XLTopBottomPart <TopBottomPart>k__BackingField;
    [CompilerGeneratedAttribute]
private XLFilterDynamicType <DynamicType>k__BackingField;
    [CompilerGeneratedAttribute]
private double <DynamicValue>k__BackingField;
    public static Func`3<string, object, bool> BeginsWithFunction { get; }
    public static Func`3<string, object, bool> EndsWithFunction { get; }
    public static Func`3<string, object, bool> ContainsFunction { get; }
    public XLFilterType FilterType { get; public set; }
    public int TopBottomValue { get; public set; }
    public XLTopBottomType TopBottomType { get; public set; }
    public XLTopBottomPart TopBottomPart { get; public set; }
    public XLFilterDynamicType DynamicType { get; public set; }
    public double DynamicValue { get; public set; }
    public XLFilterColumn(XLAutoFilter autoFilter, int column);
    private static XLFilterColumn();
    public sealed virtual void Clear();
    public sealed virtual IXLFilteredColumn AddFilter(T value);
    public sealed virtual IXLDateTimeGroupFilteredColumn AddDateGroupFilter(DateTime date, XLDateTimeGrouping dateTimeGrouping);
    public sealed virtual void Top(int value, XLTopBottomType type);
    public sealed virtual void Bottom(int value, XLTopBottomType type);
    public sealed virtual void AboveAverage();
    public sealed virtual void BelowAverage();
    public sealed virtual IXLFilterConnector EqualTo(T value);
    public sealed virtual IXLFilterConnector NotEqualTo(T value);
    public sealed virtual IXLFilterConnector GreaterThan(T value);
    public sealed virtual IXLFilterConnector LessThan(T value);
    public sealed virtual IXLFilterConnector EqualOrGreaterThan(T value);
    public sealed virtual IXLFilterConnector EqualOrLessThan(T value);
    public sealed virtual void Between(T minValue, T maxValue);
    public sealed virtual void NotBetween(T minValue, T maxValue);
    [CompilerGeneratedAttribute]
public static Func`3<string, object, bool> get_BeginsWithFunction();
    public sealed virtual IXLFilterConnector BeginsWith(string value);
    public sealed virtual IXLFilterConnector NotBeginsWith(string value);
    [CompilerGeneratedAttribute]
public static Func`3<string, object, bool> get_EndsWithFunction();
    public sealed virtual IXLFilterConnector EndsWith(string value);
    public sealed virtual IXLFilterConnector NotEndsWith(string value);
    [CompilerGeneratedAttribute]
public static Func`3<string, object, bool> get_ContainsFunction();
    public sealed virtual IXLFilterConnector Contains(string value);
    public sealed virtual IXLFilterConnector NotContains(string value);
    [CompilerGeneratedAttribute]
public sealed virtual XLFilterType get_FilterType();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FilterType(XLFilterType value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_TopBottomValue();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TopBottomValue(int value);
    [CompilerGeneratedAttribute]
public sealed virtual XLTopBottomType get_TopBottomType();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TopBottomType(XLTopBottomType value);
    [CompilerGeneratedAttribute]
public sealed virtual XLTopBottomPart get_TopBottomPart();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TopBottomPart(XLTopBottomPart value);
    [CompilerGeneratedAttribute]
public sealed virtual XLFilterDynamicType get_DynamicType();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DynamicType(XLFilterDynamicType value);
    [CompilerGeneratedAttribute]
public sealed virtual double get_DynamicValue();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DynamicValue(double value);
    private void SetTopBottom(int value, XLTopBottomType type, bool takeTop);
    private IEnumerable`1<double> GetValues(int value, XLTopBottomType type, bool takeTop);
    private void ShowAverage(bool aboveAverage);
    private IEnumerable`1<double> GetAverageValues(bool aboveAverage);
    private IXLFilterConnector ApplyCustomFilter(T value, XLFilterOperator op, Func`2<object, bool> condition, XLFilterType filterType);
    public sealed virtual IXLFilterColumn SetFilterType(XLFilterType value);
    public sealed virtual IXLFilterColumn SetTopBottomValue(int value);
    public sealed virtual IXLFilterColumn SetTopBottomType(XLTopBottomType value);
    public sealed virtual IXLFilterColumn SetTopBottomPart(XLTopBottomPart value);
    public sealed virtual IXLFilterColumn SetDynamicType(XLFilterDynamicType value);
    public sealed virtual IXLFilterColumn SetDynamicValue(double value);
}
internal class ClosedXML.Excel.XLFilterConnector : object {
    private XLAutoFilter _autoFilter;
    private int _column;
    public IXLCustomFilteredColumn And { get; }
    public IXLCustomFilteredColumn Or { get; }
    public XLFilterConnector(XLAutoFilter autoFilter, int column);
    public sealed virtual IXLCustomFilteredColumn get_And();
    public sealed virtual IXLCustomFilteredColumn get_Or();
}
public enum ClosedXML.Excel.XLFilterDynamicType : Enum {
    public int value__;
    public static XLFilterDynamicType AboveAverage;
    public static XLFilterDynamicType BelowAverage;
}
internal class ClosedXML.Excel.XLFilteredColumn : object {
    private XLAutoFilter _autoFilter;
    private int _column;
    public XLFilteredColumn(XLAutoFilter autoFilter, int column);
    public sealed virtual IXLFilteredColumn AddFilter(T value);
}
internal enum ClosedXML.Excel.XLFilterOperator : Enum {
    public int value__;
    public static XLFilterOperator Equal;
    public static XLFilterOperator NotEqual;
    public static XLFilterOperator GreaterThan;
    public static XLFilterOperator LessThan;
    public static XLFilterOperator EqualOrGreaterThan;
    public static XLFilterOperator EqualOrLessThan;
}
public enum ClosedXML.Excel.XLFilterType : Enum {
    public int value__;
    public static XLFilterType Regular;
    public static XLFilterType Custom;
    public static XLFilterType TopBottom;
    public static XLFilterType Dynamic;
    public static XLFilterType DateTimeGrouping;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class ClosedXML.Excel.XLFont : object {
    private XLStyle _style;
    private XLFontValue _value;
    public static IXLFontBase DefaultCommentFont { get; }
    internal XLFontKey Key { get; private set; }
    public bool Bold { get; public set; }
    public bool Italic { get; public set; }
    public XLFontUnderlineValues Underline { get; public set; }
    public bool Strikethrough { get; public set; }
    public XLFontVerticalTextAlignmentValues VerticalAlignment { get; public set; }
    public bool Shadow { get; public set; }
    public double FontSize { get; public set; }
    public XLColor FontColor { get; public set; }
    public string FontName { get; public set; }
    public XLFontFamilyNumberingValues FontFamilyNumbering { get; public set; }
    public XLFontCharSet FontCharSet { get; public set; }
    public XLFont(XLStyle style, XLFontValue value);
    [NullableContextAttribute("2")]
public XLFont(XLStyle style, XLFontKey key);
    [NullableContextAttribute("2")]
public XLFont(XLStyle style, IXLFont d);
    public static IXLFontBase get_DefaultCommentFont();
    [NullableContextAttribute("2")]
internal static XLFontKey GenerateKey(IXLFontBase defaultFont);
    internal XLFontKey get_Key();
    private void set_Key(XLFontKey value);
    private void Modify(Func`2<XLFontKey, XLFontKey> modification);
    public sealed virtual bool get_Bold();
    public sealed virtual void set_Bold(bool value);
    public sealed virtual bool get_Italic();
    public sealed virtual void set_Italic(bool value);
    public sealed virtual XLFontUnderlineValues get_Underline();
    public sealed virtual void set_Underline(XLFontUnderlineValues value);
    public sealed virtual bool get_Strikethrough();
    public sealed virtual void set_Strikethrough(bool value);
    public sealed virtual XLFontVerticalTextAlignmentValues get_VerticalAlignment();
    public sealed virtual void set_VerticalAlignment(XLFontVerticalTextAlignmentValues value);
    public sealed virtual bool get_Shadow();
    public sealed virtual void set_Shadow(bool value);
    public sealed virtual double get_FontSize();
    public sealed virtual void set_FontSize(double value);
    public sealed virtual XLColor get_FontColor();
    public sealed virtual void set_FontColor(XLColor value);
    public sealed virtual string get_FontName();
    public sealed virtual void set_FontName(string value);
    public sealed virtual XLFontFamilyNumberingValues get_FontFamilyNumbering();
    public sealed virtual void set_FontFamilyNumbering(XLFontFamilyNumberingValues value);
    public sealed virtual XLFontCharSet get_FontCharSet();
    public sealed virtual void set_FontCharSet(XLFontCharSet value);
    public sealed virtual IXLStyle SetBold();
    public sealed virtual IXLStyle SetBold(bool value);
    public sealed virtual IXLStyle SetItalic();
    public sealed virtual IXLStyle SetItalic(bool value);
    public sealed virtual IXLStyle SetUnderline();
    public sealed virtual IXLStyle SetUnderline(XLFontUnderlineValues value);
    public sealed virtual IXLStyle SetStrikethrough();
    public sealed virtual IXLStyle SetStrikethrough(bool value);
    public sealed virtual IXLStyle SetVerticalAlignment(XLFontVerticalTextAlignmentValues value);
    public sealed virtual IXLStyle SetShadow();
    public sealed virtual IXLStyle SetShadow(bool value);
    public sealed virtual IXLStyle SetFontSize(double value);
    public sealed virtual IXLStyle SetFontColor(XLColor value);
    public sealed virtual IXLStyle SetFontName(string value);
    public sealed virtual IXLStyle SetFontFamilyNumbering(XLFontFamilyNumberingValues value);
    public sealed virtual IXLStyle SetFontCharSet(XLFontCharSet value);
    public virtual string ToString();
    public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(IXLFont other);
    public virtual int GetHashCode();
}
public enum ClosedXML.Excel.XLFontCharSet : Enum {
    public int value__;
    public static XLFontCharSet Ansi;
    public static XLFontCharSet Default;
    public static XLFontCharSet Symbol;
    public static XLFontCharSet Mac;
    public static XLFontCharSet ShiftJIS;
    public static XLFontCharSet Hangul;
    public static XLFontCharSet Hangeul;
    public static XLFontCharSet Johab;
    public static XLFontCharSet GB2312;
    public static XLFontCharSet ChineseBig5;
    public static XLFontCharSet Greek;
    public static XLFontCharSet Turkish;
    public static XLFontCharSet Vietnamese;
    public static XLFontCharSet Hebrew;
    public static XLFontCharSet Arabic;
    public static XLFontCharSet Baltic;
    public static XLFontCharSet Russian;
    public static XLFontCharSet Thai;
    public static XLFontCharSet EastEurope;
    public static XLFontCharSet Oem;
}
public enum ClosedXML.Excel.XLFontFamilyNumberingValues : Enum {
    public int value__;
    public static XLFontFamilyNumberingValues NotApplicable;
    public static XLFontFamilyNumberingValues Roman;
    public static XLFontFamilyNumberingValues Swiss;
    public static XLFontFamilyNumberingValues Modern;
    public static XLFontFamilyNumberingValues Script;
    public static XLFontFamilyNumberingValues Decorative;
}
internal class ClosedXML.Excel.XLFontKey : ValueType {
    [CompilerGeneratedAttribute]
private bool <Bold>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Italic>k__BackingField;
    [CompilerGeneratedAttribute]
private XLFontUnderlineValues <Underline>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Strikethrough>k__BackingField;
    [CompilerGeneratedAttribute]
private XLFontVerticalTextAlignmentValues <VerticalAlignment>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Shadow>k__BackingField;
    [CompilerGeneratedAttribute]
private double <FontSize>k__BackingField;
    [CompilerGeneratedAttribute]
private XLColorKey <FontColor>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FontName>k__BackingField;
    [CompilerGeneratedAttribute]
private XLFontFamilyNumberingValues <FontFamilyNumbering>k__BackingField;
    [CompilerGeneratedAttribute]
private XLFontCharSet <FontCharSet>k__BackingField;
    public bool Bold { get; public set; }
    public bool Italic { get; public set; }
    public XLFontUnderlineValues Underline { get; public set; }
    public bool Strikethrough { get; public set; }
    public XLFontVerticalTextAlignmentValues VerticalAlignment { get; public set; }
    public bool Shadow { get; public set; }
    public double FontSize { get; public set; }
    public XLColorKey FontColor { get; public set; }
    public string FontName { get; public set; }
    public XLFontFamilyNumberingValues FontFamilyNumbering { get; public set; }
    public XLFontCharSet FontCharSet { get; public set; }
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_Bold();
    [CompilerGeneratedAttribute]
public void set_Bold(bool value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_Italic();
    [CompilerGeneratedAttribute]
public void set_Italic(bool value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public XLFontUnderlineValues get_Underline();
    [CompilerGeneratedAttribute]
public void set_Underline(XLFontUnderlineValues value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_Strikethrough();
    [CompilerGeneratedAttribute]
public void set_Strikethrough(bool value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public XLFontVerticalTextAlignmentValues get_VerticalAlignment();
    [CompilerGeneratedAttribute]
public void set_VerticalAlignment(XLFontVerticalTextAlignmentValues value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_Shadow();
    [CompilerGeneratedAttribute]
public void set_Shadow(bool value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public double get_FontSize();
    [CompilerGeneratedAttribute]
public void set_FontSize(double value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public XLColorKey get_FontColor();
    [CompilerGeneratedAttribute]
public void set_FontColor(XLColorKey value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_FontName();
    [CompilerGeneratedAttribute]
public void set_FontName(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public XLFontFamilyNumberingValues get_FontFamilyNumbering();
    [CompilerGeneratedAttribute]
public void set_FontFamilyNumbering(XLFontFamilyNumberingValues value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public XLFontCharSet get_FontCharSet();
    [CompilerGeneratedAttribute]
public void set_FontCharSet(XLFontCharSet value);
    public sealed virtual bool Equals(XLFontKey other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public static bool op_Equality(XLFontKey left, XLFontKey right);
    public static bool op_Inequality(XLFontKey left, XLFontKey right);
}
public enum ClosedXML.Excel.XLFontScheme : Enum {
    public int value__;
    public static XLFontScheme None;
    public static XLFontScheme Major;
    public static XLFontScheme Minor;
}
public enum ClosedXML.Excel.XLFontUnderlineValues : Enum {
    public int value__;
    public static XLFontUnderlineValues Double;
    public static XLFontUnderlineValues DoubleAccounting;
    public static XLFontUnderlineValues None;
    public static XLFontUnderlineValues Single;
    public static XLFontUnderlineValues SingleAccounting;
}
internal class ClosedXML.Excel.XLFontValue : object {
    private static XLFontRepository Repository;
    private static XLFontKey DefaultKey;
    internal static XLFontValue Default;
    [CompilerGeneratedAttribute]
private XLFontKey <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private XLColor <FontColor>k__BackingField;
    public XLFontKey Key { get; private set; }
    public bool Bold { get; }
    public bool Italic { get; }
    public XLFontUnderlineValues Underline { get; }
    public bool Strikethrough { get; }
    public XLFontVerticalTextAlignmentValues VerticalAlignment { get; }
    public bool Shadow { get; }
    public double FontSize { get; }
    public XLColor FontColor { get; private set; }
    public string FontName { get; }
    public XLFontFamilyNumberingValues FontFamilyNumbering { get; }
    public XLFontCharSet FontCharSet { get; }
    private XLFontValue(XLFontKey key);
    private static XLFontValue();
    public static XLFontValue FromKey(XLFontKey& key);
    [CompilerGeneratedAttribute]
public XLFontKey get_Key();
    [CompilerGeneratedAttribute]
private void set_Key(XLFontKey value);
    public bool get_Bold();
    public bool get_Italic();
    public XLFontUnderlineValues get_Underline();
    public bool get_Strikethrough();
    public XLFontVerticalTextAlignmentValues get_VerticalAlignment();
    public bool get_Shadow();
    public double get_FontSize();
    [CompilerGeneratedAttribute]
public XLColor get_FontColor();
    [CompilerGeneratedAttribute]
private void set_FontColor(XLColor value);
    public string get_FontName();
    public XLFontFamilyNumberingValues get_FontFamilyNumbering();
    public XLFontCharSet get_FontCharSet();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public enum ClosedXML.Excel.XLFontVerticalTextAlignmentValues : Enum {
    public int value__;
    public static XLFontVerticalTextAlignmentValues Baseline;
    public static XLFontVerticalTextAlignmentValues Subscript;
    public static XLFontVerticalTextAlignmentValues Superscript;
}
internal class ClosedXML.Excel.XLFormattedText`1 : object {
    private IXLFontBase _defaultFont;
    private List`1<XLRichString> _richTexts;
    [CompilerGeneratedAttribute]
private EventHandler ContentChanged;
    protected T Container;
    [CompilerGeneratedAttribute]
private int <Length>k__BackingField;
    private IXLPhonetics _phonetics;
    public int Count { get; }
    public int Length { get; private set; }
    unknown bool Bold {public set; }
    unknown bool Italic {public set; }
    unknown XLFontUnderlineValues Underline {public set; }
    unknown bool Strikethrough {public set; }
    unknown XLFontVerticalTextAlignmentValues VerticalAlignment {public set; }
    unknown bool Shadow {public set; }
    unknown double FontSize {public set; }
    unknown XLColor FontColor {public set; }
    unknown string FontName {public set; }
    unknown XLFontFamilyNumberingValues FontFamilyNumbering {public set; }
    public string Text { get; }
    public IXLPhonetics Phonetics { get; }
    public bool HasPhonetics { get; }
    public XLFormattedText`1(IXLFontBase defaultFont);
    public XLFormattedText`1(IXLFormattedText`1<T> defaultRichText, IXLFontBase defaultFont);
    public XLFormattedText`1(string text, IXLFontBase defaultFont);
    [CompilerGeneratedAttribute]
protected void add_ContentChanged(EventHandler value);
    [CompilerGeneratedAttribute]
protected void remove_ContentChanged(EventHandler value);
    public sealed virtual int get_Count();
    [CompilerGeneratedAttribute]
public sealed virtual int get_Length();
    [CompilerGeneratedAttribute]
private void set_Length(int value);
    public sealed virtual IXLRichString AddText(string text);
    public sealed virtual IXLRichString AddText(string text, IXLFontBase font);
    public IXLRichString AddText(XLRichString richText);
    public sealed virtual IXLRichString AddNewLine();
    public sealed virtual IXLFormattedText`1<T> ClearText();
    public sealed virtual IXLFormattedText`1<T> ClearFont();
    public virtual string ToString();
    public sealed virtual IXLFormattedText`1<T> Substring(int index);
    public sealed virtual IXLFormattedText`1<T> Substring(int index, int length);
    public sealed virtual IXLFormattedText`1<T> CopyFrom(IXLFormattedText`1<T> original);
    public Enumerator<XLRichString> GetEnumerator();
    private sealed virtual override IEnumerator`1<IXLRichString> System.Collections.Generic.IEnumerable<ClosedXML.Excel.IXLRichString>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual void set_Bold(bool value);
    public sealed virtual void set_Italic(bool value);
    public sealed virtual void set_Underline(XLFontUnderlineValues value);
    public sealed virtual void set_Strikethrough(bool value);
    public sealed virtual void set_VerticalAlignment(XLFontVerticalTextAlignmentValues value);
    public sealed virtual void set_Shadow(bool value);
    public sealed virtual void set_FontSize(double value);
    public sealed virtual void set_FontColor(XLColor value);
    public sealed virtual void set_FontName(string value);
    public sealed virtual void set_FontFamilyNumbering(XLFontFamilyNumberingValues value);
    public sealed virtual IXLFormattedText`1<T> SetBold();
    public sealed virtual IXLFormattedText`1<T> SetBold(bool value);
    public sealed virtual IXLFormattedText`1<T> SetItalic();
    public sealed virtual IXLFormattedText`1<T> SetItalic(bool value);
    public sealed virtual IXLFormattedText`1<T> SetUnderline();
    public sealed virtual IXLFormattedText`1<T> SetUnderline(XLFontUnderlineValues value);
    public sealed virtual IXLFormattedText`1<T> SetStrikethrough();
    public sealed virtual IXLFormattedText`1<T> SetStrikethrough(bool value);
    public sealed virtual IXLFormattedText`1<T> SetVerticalAlignment(XLFontVerticalTextAlignmentValues value);
    public sealed virtual IXLFormattedText`1<T> SetShadow();
    public sealed virtual IXLFormattedText`1<T> SetShadow(bool value);
    public sealed virtual IXLFormattedText`1<T> SetFontSize(double value);
    public sealed virtual IXLFormattedText`1<T> SetFontColor(XLColor value);
    public sealed virtual IXLFormattedText`1<T> SetFontName(string value);
    public sealed virtual IXLFormattedText`1<T> SetFontFamilyNumbering(XLFontFamilyNumberingValues value);
    public sealed virtual bool Equals(IXLFormattedText`1<T> other);
    public sealed virtual string get_Text();
    public sealed virtual IXLPhonetics get_Phonetics();
    public sealed virtual bool get_HasPhonetics();
}
public class ClosedXML.Excel.XLFormula : object {
    internal string _value;
    [CompilerGeneratedAttribute]
private bool <IsFormula>k__BackingField;
    public string Value { get; public set; }
    public bool IsFormula { get; internal set; }
    public XLFormula(XLFormula defaultFormula);
    public XLFormula(string value);
    public XLFormula(double value);
    public XLFormula(int value);
    public string get_Value();
    public void set_Value(string value);
    [CompilerGeneratedAttribute]
public bool get_IsFormula();
    [CompilerGeneratedAttribute]
internal void set_IsFormula(bool value);
}
internal class ClosedXML.Excel.XLHeaderFooter : object {
    internal IXLWorksheet Worksheet;
    [CompilerGeneratedAttribute]
private IXLHFItem <Left>k__BackingField;
    [CompilerGeneratedAttribute]
private IXLHFItem <Center>k__BackingField;
    [CompilerGeneratedAttribute]
private IXLHFItem <Right>k__BackingField;
    private Dictionary`2<XLHFOccurrence, string> innerTexts;
    private Dictionary`2<XLHFOccurrence, string> _initialTexts;
    private bool _changed;
    public IXLHFItem Left { get; private set; }
    public IXLHFItem Center { get; private set; }
    public IXLHFItem Right { get; private set; }
    internal bool Changed { get; internal set; }
    public XLHeaderFooter(XLWorksheet worksheet);
    public XLHeaderFooter(XLHeaderFooter defaultHF, XLWorksheet worksheet);
    [CompilerGeneratedAttribute]
public sealed virtual IXLHFItem get_Left();
    [CompilerGeneratedAttribute]
private void set_Left(IXLHFItem value);
    [CompilerGeneratedAttribute]
public sealed virtual IXLHFItem get_Center();
    [CompilerGeneratedAttribute]
private void set_Center(IXLHFItem value);
    [CompilerGeneratedAttribute]
public sealed virtual IXLHFItem get_Right();
    [CompilerGeneratedAttribute]
private void set_Right(IXLHFItem value);
    public sealed virtual string GetText(XLHFOccurrence occurrence);
    internal void SetInnerText(XLHFOccurrence occurrence, string text);
    private static IEnumerable`1<ParsedHeaderFooterElement> ParseFormattedHeaderFooterText(string text);
    internal bool get_Changed();
    internal void set_Changed(bool value);
    internal void SetAsInitial();
    public sealed virtual IXLHeaderFooter Clear(XLHFOccurrence occurrence);
    [CompilerGeneratedAttribute]
private void <.ctor>b__1_0(KeyValuePair`2<XLHFOccurrence, string> kp);
    [CompilerGeneratedAttribute]
private bool <get_Changed>b__23_0(KeyValuePair`2<XLHFOccurrence, string> it);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class ClosedXML.Excel.XLHelper : object {
    public static int MinRowNumber;
    public static int MinColumnNumber;
    public static int MaxRowNumber;
    public static int MaxColumnNumber;
    public static string MaxColumnLetter;
    public static double Epsilon;
    public static Encoding NoBomUTF8;
    internal static NumberStyles NumberStyle;
    internal static CultureInfo ParseCulture;
    internal static Regex RCSimpleRegex;
    internal static Regex A1SimpleRegex;
    internal static Regex NamedRangeReferenceRegex;
    private static String[] letters;
    private static String[] allLetters;
    private static Dictionary`2<string, int> letterIndexes;
    private static Regex A1RegexRelative;
    private static int MaxWorksheetNameCharsCount;
    [NullableAttribute("0")]
private static Char[] illegalWorksheetCharacters;
    public static string LastCell { get; }
    private static XLHelper();
    public static string get_LastCell();
    public static int GetColumnNumberFromLetter(string columnLetter);
    public static string GetColumnLetterFromNumber(int columnNumber, bool trimToAllowed);
    internal static int TrimColumnNumber(int columnNumber);
    internal static int TrimRowNumber(int rowNumber);
    public static bool IsValidColumn(string column);
    public static bool IsValidRow(string rowString);
    public static bool IsValidA1Address(string address);
    public static bool IsValidRCAddress(string address);
    public static bool IsValidRangeAddress(string rangeAddress);
    public static bool IsValidRangeAddress(IXLRangeAddress rangeAddress);
    public static int GetColumnNumberFromAddress(string cellAddressString);
    internal static String[] SplitRange(string range);
    internal static IXLTableRows InsertRowsWithoutEvents(Func`3<int, bool, IXLRangeRows> insertFunc, XLTableRange tableRange, int numberOfRows, bool expandTable);
    private static string Evaluator(Match match, int row, string column);
    private static string ReplaceGroup(string value, string item);
    internal static string ReplaceRelative(string value, int row, string column);
    public static bool AreEqual(double d1, double d2);
    public static DateTime GetDate(object v);
    [ExtensionAttribute]
internal static bool IsValidOADateNumber(double d);
    internal static TimeSpan GetTimeSpan(double totalDays);
    public static bool ValidateName(string objectType, string newName, string oldName, IEnumerable`1<string> existingNames, String& message);
    internal static double PixelsToPoints(double pixels, double dpi);
    internal static double PointsToPixels(double points, double dpi);
    internal static double PixelToNoC(int px, int mdw);
    internal static double NoCToPixels(double noc, int mdw);
    internal static int NoCToPixels(double noc, IXLFont font, XLWorkbook workbook);
    internal static int WidthToPixels(double width, int mdw);
    internal static double PixelsToWidth(double width, int mdw);
    internal static double ConvertWidthToNoC(double width, IXLFont font, XLWorkbook workbook);
    internal static double DegToRad(double angle);
    [NullableContextAttribute("0")]
public static string CreateSafeSheetName(string nameProposal, char replaceChar);
    [NullableContextAttribute("0")]
public static void ValidateSheetName(string sheetName);
}
internal class ClosedXML.Excel.XLHFItem : object {
    internal XLHeaderFooter HeaderFooter;
    private Dictionary`2<XLHFOccurrence, List`1<XLHFText>> texts;
    public XLHFItem(XLHeaderFooter headerFooter);
    public XLHFItem(XLHFItem defaultHFItem, XLHeaderFooter headerFooter);
    public sealed virtual string GetText(XLHFOccurrence occurrence);
    public sealed virtual IXLRichString AddText(string text);
    public sealed virtual IXLRichString AddText(XLHFPredefinedText predefinedText);
    public sealed virtual IXLRichString AddText(string text, XLHFOccurrence occurrence);
    public sealed virtual IXLRichString AddNewLine();
    public sealed virtual IXLRichString AddImage(string imagePath, XLHFOccurrence occurrence);
    private void AddTextToOccurrence(XLHFText hfText, XLHFOccurrence occurrence);
    public sealed virtual IXLRichString AddText(XLHFPredefinedText predefinedText, XLHFOccurrence occurrence);
    public sealed virtual void Clear(XLHFOccurrence occurrence);
    private void ClearOccurrence(XLHFOccurrence occurrence);
    [CompilerGeneratedAttribute]
private void <.ctor>b__2_0(KeyValuePair`2<XLHFOccurrence, List`1<XLHFText>> kp);
}
public enum ClosedXML.Excel.XLHFMode : Enum {
    public int value__;
    public static XLHFMode OddPagesOnly;
    public static XLHFMode OddAndEvenPages;
    public static XLHFMode Odd;
}
public enum ClosedXML.Excel.XLHFOccurrence : Enum {
    public int value__;
    public static XLHFOccurrence AllPages;
    public static XLHFOccurrence OddPages;
    public static XLHFOccurrence EvenPages;
    public static XLHFOccurrence FirstPage;
}
public enum ClosedXML.Excel.XLHFPredefinedText : Enum {
    public int value__;
    public static XLHFPredefinedText PageNumber;
    public static XLHFPredefinedText NumberOfPages;
    public static XLHFPredefinedText Date;
    public static XLHFPredefinedText Time;
    public static XLHFPredefinedText FullPath;
    public static XLHFPredefinedText Path;
    public static XLHFPredefinedText File;
    public static XLHFPredefinedText SheetName;
}
internal class ClosedXML.Excel.XLHFText : object {
    private XLHFItem _hfItem;
    [CompilerGeneratedAttribute]
private XLRichString <RichText>k__BackingField;
    public XLRichString RichText { get; private set; }
    public XLHFText(XLRichString richText, XLHFItem hfItem);
    [CompilerGeneratedAttribute]
public XLRichString get_RichText();
    [CompilerGeneratedAttribute]
private void set_RichText(XLRichString value);
    public string GetHFText(string prevText);
}
public class ClosedXML.Excel.XLHyperlink : object {
    [CompilerGeneratedAttribute]
private XLWorksheet <Worksheet>k__BackingField;
    private Uri _externalAddress;
    private string _internalAddress;
    [CompilerGeneratedAttribute]
private bool <IsExternal>k__BackingField;
    [CompilerGeneratedAttribute]
private IXLCell <Cell>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Tooltip>k__BackingField;
    internal XLWorksheet Worksheet { get; internal set; }
    public bool IsExternal { get; public set; }
    public Uri ExternalAddress { get; public set; }
    public IXLCell Cell { get; internal set; }
    public string InternalAddress { get; public set; }
    public string Tooltip { get; public set; }
    internal XLHyperlink(XLHyperlink hyperlink);
    public XLHyperlink(string address);
    public XLHyperlink(string address, string tooltip);
    public XLHyperlink(IXLCell cell);
    public XLHyperlink(IXLCell cell, string tooltip);
    public XLHyperlink(IXLRangeBase range);
    public XLHyperlink(IXLRangeBase range, string tooltip);
    public XLHyperlink(Uri uri);
    public XLHyperlink(Uri uri, string tooltip);
    internal void SetValues(string address, string tooltip);
    internal void SetValues(Uri uri, string tooltip);
    internal void SetValues(IXLCell cell, string tooltip);
    internal void SetValues(IXLRangeBase range, string tooltip);
    [CompilerGeneratedAttribute]
internal XLWorksheet get_Worksheet();
    [CompilerGeneratedAttribute]
internal void set_Worksheet(XLWorksheet value);
    [CompilerGeneratedAttribute]
public bool get_IsExternal();
    [CompilerGeneratedAttribute]
public void set_IsExternal(bool value);
    public Uri get_ExternalAddress();
    public void set_ExternalAddress(Uri value);
    [CompilerGeneratedAttribute]
public IXLCell get_Cell();
    [CompilerGeneratedAttribute]
internal void set_Cell(IXLCell value);
    public string get_InternalAddress();
    public void set_InternalAddress(string value);
    [CompilerGeneratedAttribute]
public string get_Tooltip();
    [CompilerGeneratedAttribute]
public void set_Tooltip(string value);
    public void Delete();
}
internal class ClosedXML.Excel.XLHyperlinks : object {
    private Dictionary`2<IXLAddress, XLHyperlink> _hyperlinks;
    public sealed virtual IEnumerator`1<XLHyperlink> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual void Add(XLHyperlink hyperlink);
    public sealed virtual void Delete(XLHyperlink hyperlink);
    public sealed virtual void Delete(IXLAddress address);
    public sealed virtual bool TryDelete(IXLAddress address);
    public sealed virtual XLHyperlink Get(IXLAddress address);
    public sealed virtual bool TryGet(IXLAddress address, XLHyperlink& hyperlink);
}
public enum ClosedXML.Excel.XLIconSetStyle : Enum {
    public int value__;
    public static XLIconSetStyle ThreeArrows;
    public static XLIconSetStyle ThreeArrowsGray;
    public static XLIconSetStyle ThreeFlags;
    public static XLIconSetStyle ThreeTrafficLights1;
    public static XLIconSetStyle ThreeTrafficLights2;
    public static XLIconSetStyle ThreeSigns;
    public static XLIconSetStyle ThreeSymbols;
    public static XLIconSetStyle ThreeSymbols2;
    public static XLIconSetStyle FourArrows;
    public static XLIconSetStyle FourArrowsGray;
    public static XLIconSetStyle FourRedToBlack;
    public static XLIconSetStyle FourRating;
    public static XLIconSetStyle FourTrafficLights;
    public static XLIconSetStyle FiveArrows;
    public static XLIconSetStyle FiveArrowsGray;
    public static XLIconSetStyle FiveRating;
    public static XLIconSetStyle FiveQuarters;
}
internal class ClosedXML.Excel.XLIdManager : object {
    private HashSet`1<int> _hash;
    public int GetNext();
    public void Add(int value);
    public void Add(IEnumerable`1<int> values);
    [CompilerGeneratedAttribute]
private void <Add>b__3_0(int v);
}
public enum ClosedXML.Excel.XLItemsToRetain : Enum {
    public int value__;
    public static XLItemsToRetain Automatic;
    public static XLItemsToRetain None;
    public static XLItemsToRetain Max;
}
public enum ClosedXML.Excel.XLLineStyle : Enum {
    public int value__;
    public static XLLineStyle Single;
    public static XLLineStyle ThinThin;
    public static XLLineStyle ThinThick;
    public static XLLineStyle ThickThin;
    public static XLLineStyle ThickBetweenThin;
}
internal class ClosedXML.Excel.XLMargins : object {
    [CompilerGeneratedAttribute]
private double <Left>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Right>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Top>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Bottom>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Header>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Footer>k__BackingField;
    public double Left { get; public set; }
    public double Right { get; public set; }
    public double Top { get; public set; }
    public double Bottom { get; public set; }
    public double Header { get; public set; }
    public double Footer { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual double get_Left();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Left(double value);
    [CompilerGeneratedAttribute]
public sealed virtual double get_Right();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Right(double value);
    [CompilerGeneratedAttribute]
public sealed virtual double get_Top();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Top(double value);
    [CompilerGeneratedAttribute]
public sealed virtual double get_Bottom();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Bottom(double value);
    [CompilerGeneratedAttribute]
public sealed virtual double get_Header();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Header(double value);
    [CompilerGeneratedAttribute]
public sealed virtual double get_Footer();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Footer(double value);
    public sealed virtual IXLMargins SetLeft(double value);
    public sealed virtual IXLMargins SetRight(double value);
    public sealed virtual IXLMargins SetTop(double value);
    public sealed virtual IXLMargins SetBottom(double value);
    public sealed virtual IXLMargins SetHeader(double value);
    public sealed virtual IXLMargins SetFooter(double value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class ClosedXML.Excel.XLMiscSliceContent : ValueType {
    private bool _inlineString;
    [CompilerGeneratedAttribute]
private XLRichText <RichText>k__BackingField;
    [CompilerGeneratedAttribute]
private XLComment <Comment>k__BackingField;
    [CompilerGeneratedAttribute]
private XLHyperlink <Hyperlink>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<UInt32> <CellMetaIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<UInt32> <ValueMetaIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SettingHyperlink>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasPhonetic>k__BackingField;
    internal XLRichText RichText { get; internal set; }
    internal bool ShareString { get; internal set; }
    internal XLComment Comment { get; internal set; }
    internal XLHyperlink Hyperlink { get; internal set; }
    internal Nullable`1<UInt32> CellMetaIndex { get; internal set; }
    internal Nullable`1<UInt32> ValueMetaIndex { get; internal set; }
    internal bool SettingHyperlink { get; internal set; }
    internal bool HasPhonetic { get; internal set; }
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
internal XLRichText get_RichText();
    [CompilerGeneratedAttribute]
internal void set_RichText(XLRichText value);
    internal bool get_ShareString();
    internal void set_ShareString(bool value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
internal XLComment get_Comment();
    [CompilerGeneratedAttribute]
internal void set_Comment(XLComment value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
internal XLHyperlink get_Hyperlink();
    [CompilerGeneratedAttribute]
internal void set_Hyperlink(XLHyperlink value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
internal Nullable`1<UInt32> get_CellMetaIndex();
    [CompilerGeneratedAttribute]
internal void set_CellMetaIndex(Nullable`1<UInt32> value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
internal Nullable`1<UInt32> get_ValueMetaIndex();
    [CompilerGeneratedAttribute]
internal void set_ValueMetaIndex(Nullable`1<UInt32> value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
internal bool get_SettingHyperlink();
    [CompilerGeneratedAttribute]
internal void set_SettingHyperlink(bool value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
internal bool get_HasPhonetic();
    [CompilerGeneratedAttribute]
internal void set_HasPhonetic(bool value);
}
internal class ClosedXML.Excel.XLNamedRange : object {
    private string _name;
    private XLNamedRanges _namedRanges;
    [CompilerGeneratedAttribute]
private string <Comment>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Visible>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <RangeList>k__BackingField;
    internal XLWorkbook Workbook { get; }
    public bool IsValid { get; }
    public string Name { get; public set; }
    public IXLRanges Ranges { get; }
    public string Comment { get; public set; }
    public bool Visible { get; public set; }
    public XLNamedRangeScope Scope { get; }
    public string RefersTo { get; public set; }
    internal IList`1<string> RangeList { get; internal set; }
    public XLNamedRange(XLNamedRanges namedRanges, string rangeName, string range, string comment);
    public XLNamedRange(XLNamedRanges namedRanges, string rangeName, IXLRanges ranges, string comment);
    internal XLNamedRange(XLNamedRanges namedRanges, string rangeName, bool validateName, string range, string comment);
    internal XLNamedRange(XLNamedRanges namedRanges, string rangeName, bool validateName, string comment);
    internal XLWorkbook get_Workbook();
    public sealed virtual bool get_IsValid();
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    private void SetNameWithoutValidation(string value);
    public sealed virtual IXLRanges get_Ranges();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Comment();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Comment(string value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Visible();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Visible(bool value);
    public sealed virtual XLNamedRangeScope get_Scope();
    public sealed virtual IXLRanges Add(XLWorkbook workbook, string rangeAddress);
    public sealed virtual IXLRanges Add(IXLRange range);
    public sealed virtual IXLRanges Add(IXLRanges ranges);
    public sealed virtual void Delete();
    public sealed virtual void Clear();
    public sealed virtual void Remove(string rangeAddress);
    public sealed virtual void Remove(IXLRange range);
    public sealed virtual void Remove(IXLRanges ranges);
    public virtual string ToString();
    public sealed virtual string get_RefersTo();
    public sealed virtual void set_RefersTo(string value);
    public sealed virtual IXLNamedRange CopyTo(IXLWorksheet targetSheet);
    [CompilerGeneratedAttribute]
internal IList`1<string> get_RangeList();
    [CompilerGeneratedAttribute]
internal void set_RangeList(IList`1<string> value);
    public sealed virtual IXLNamedRange SetRefersTo(string range);
    public sealed virtual IXLNamedRange SetRefersTo(IXLRangeBase range);
    public sealed virtual IXLNamedRange SetRefersTo(IXLRanges ranges);
    internal void OnWorksheetDeleted(string worksheetName);
    [CompilerGeneratedAttribute]
private void <.ctor>b__5_0(IXLRange r);
    [CompilerGeneratedAttribute]
private void <.ctor>b__6_0(string r);
    [CompilerGeneratedAttribute]
private IXLRangeBase <get_Ranges>b__15_3(<>f__AnonymousType4`2<string, Match> <>h__TransparentIdentifier0);
    [CompilerGeneratedAttribute]
private void <Add>b__28_0(IXLRange r);
    [CompilerGeneratedAttribute]
private void <Remove>b__33_0(IXLRange r);
    [CompilerGeneratedAttribute]
private void <SetRefersTo>b__45_0(IXLRange r);
}
internal class ClosedXML.Excel.XLNamedRanges : object {
    private Dictionary`2<string, IXLNamedRange> _namedRanges;
    [CompilerGeneratedAttribute]
private XLWorkbook <Workbook>k__BackingField;
    [CompilerGeneratedAttribute]
private XLWorksheet <Worksheet>k__BackingField;
    [CompilerGeneratedAttribute]
private XLNamedRangeScope <Scope>k__BackingField;
    internal XLWorkbook Workbook { get; internal set; }
    internal XLWorksheet Worksheet { get; internal set; }
    internal XLNamedRangeScope Scope { get; }
    public XLNamedRanges(XLWorksheet worksheet);
    public XLNamedRanges(XLWorkbook workbook);
    [CompilerGeneratedAttribute]
internal XLWorkbook get_Workbook();
    [CompilerGeneratedAttribute]
internal void set_Workbook(XLWorkbook value);
    [CompilerGeneratedAttribute]
internal XLWorksheet get_Worksheet();
    [CompilerGeneratedAttribute]
internal void set_Worksheet(XLWorksheet value);
    [CompilerGeneratedAttribute]
internal XLNamedRangeScope get_Scope();
    public sealed virtual IXLNamedRange NamedRange(string rangeName);
    public sealed virtual IXLNamedRange Add(string rangeName, string rangeAddress);
    public sealed virtual IXLNamedRange Add(string rangeName, IXLRange range);
    public sealed virtual IXLNamedRange Add(string rangeName, IXLRanges ranges);
    public sealed virtual IXLNamedRange Add(string rangeName, string rangeAddress, string comment);
    internal IXLNamedRange Add(string rangeName, string rangeAddress, string comment, bool validateName, bool validateRangeAddress);
    public sealed virtual IXLNamedRange Add(string rangeName, IXLRange range, string comment);
    public sealed virtual IXLNamedRange Add(string rangeName, IXLRanges ranges, string comment);
    public IXLNamedRange Add(string rangeName, IXLNamedRange namedRange);
    public sealed virtual void Delete(string rangeName);
    public sealed virtual void Delete(int rangeIndex);
    public sealed virtual void DeleteAll();
    public sealed virtual IEnumerable`1<IXLNamedRange> ValidNamedRanges();
    public sealed virtual IEnumerable`1<IXLNamedRange> InvalidNamedRanges();
    public sealed virtual IEnumerator`1<IXLNamedRange> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual bool TryGetValue(string name, IXLNamedRange& range);
    public sealed virtual bool Contains(string name);
    internal void OnWorksheetDeleted(string worksheetName);
}
public enum ClosedXML.Excel.XLNamedRangeScope : Enum {
    public int value__;
    public static XLNamedRangeScope Worksheet;
    public static XLNamedRangeScope Workbook;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class ClosedXML.Excel.XLNumberFormat : object {
    private XLStyle _style;
    private XLNumberFormatValue _value;
    internal XLNumberFormatKey Key { get; private set; }
    public int NumberFormatId { get; public set; }
    public string Format { get; public set; }
    public XLNumberFormat(XLStyle style, XLNumberFormatValue value);
    [NullableContextAttribute("2")]
public XLNumberFormat(XLStyle style, XLNumberFormatKey key);
    [NullableContextAttribute("2")]
public XLNumberFormat(XLStyle style, IXLNumberFormat d);
    [NullableContextAttribute("2")]
internal static XLNumberFormatKey GenerateKey(IXLNumberFormat defaultNumberFormat);
    internal XLNumberFormatKey get_Key();
    private void set_Key(XLNumberFormatKey value);
    public sealed virtual int get_NumberFormatId();
    public sealed virtual void set_NumberFormatId(int value);
    public sealed virtual string get_Format();
    public sealed virtual void set_Format(string value);
    public sealed virtual IXLStyle SetNumberFormatId(int value);
    public sealed virtual IXLStyle SetFormat(string value);
    private void Modify(Func`2<XLNumberFormatKey, XLNumberFormatKey> modification);
    public virtual string ToString();
    public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(IXLNumberFormatBase other);
    public virtual int GetHashCode();
}
internal class ClosedXML.Excel.XLNumberFormatKey : ValueType {
    [CompilerGeneratedAttribute]
private int <NumberFormatId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Format>k__BackingField;
    public int NumberFormatId { get; public set; }
    public string Format { get; public set; }
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_NumberFormatId();
    [CompilerGeneratedAttribute]
public void set_NumberFormatId(int value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_Format();
    [CompilerGeneratedAttribute]
public void set_Format(string value);
    public virtual int GetHashCode();
    public sealed virtual bool Equals(XLNumberFormatKey other);
    public virtual bool Equals(object obj);
    public virtual string ToString();
    public static bool op_Equality(XLNumberFormatKey left, XLNumberFormatKey right);
    public static bool op_Inequality(XLNumberFormatKey left, XLNumberFormatKey right);
}
internal class ClosedXML.Excel.XLNumberFormatValue : object {
    private static XLNumberFormatRepository Repository;
    private static XLNumberFormatKey DefaultKey;
    internal static XLNumberFormatValue Default;
    [CompilerGeneratedAttribute]
private XLNumberFormatKey <Key>k__BackingField;
    public XLNumberFormatKey Key { get; private set; }
    public int NumberFormatId { get; }
    public string Format { get; }
    private XLNumberFormatValue(XLNumberFormatKey key);
    private static XLNumberFormatValue();
    public static XLNumberFormatValue FromKey(XLNumberFormatKey& key);
    [CompilerGeneratedAttribute]
public XLNumberFormatKey get_Key();
    [CompilerGeneratedAttribute]
private void set_Key(XLNumberFormatKey value);
    public int get_NumberFormatId();
    public string get_Format();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public enum ClosedXML.Excel.XLOperator : Enum {
    public int value__;
    public static XLOperator EqualTo;
    public static XLOperator NotEqualTo;
    public static XLOperator GreaterThan;
    public static XLOperator LessThan;
    public static XLOperator EqualOrGreaterThan;
    public static XLOperator EqualOrLessThan;
    public static XLOperator Between;
    public static XLOperator NotBetween;
}
internal class ClosedXML.Excel.XLOutline : object {
    [CompilerGeneratedAttribute]
private XLOutlineSummaryVLocation <SummaryVLocation>k__BackingField;
    [CompilerGeneratedAttribute]
private XLOutlineSummaryHLocation <SummaryHLocation>k__BackingField;
    public XLOutlineSummaryVLocation SummaryVLocation { get; public set; }
    public XLOutlineSummaryHLocation SummaryHLocation { get; public set; }
    public XLOutline(IXLOutline outline);
    [CompilerGeneratedAttribute]
public sealed virtual XLOutlineSummaryVLocation get_SummaryVLocation();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SummaryVLocation(XLOutlineSummaryVLocation value);
    [CompilerGeneratedAttribute]
public sealed virtual XLOutlineSummaryHLocation get_SummaryHLocation();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SummaryHLocation(XLOutlineSummaryHLocation value);
}
public enum ClosedXML.Excel.XLOutlineSummaryHLocation : Enum {
    public int value__;
    public static XLOutlineSummaryHLocation Left;
    public static XLOutlineSummaryHLocation Right;
}
public enum ClosedXML.Excel.XLOutlineSummaryVLocation : Enum {
    public int value__;
    public static XLOutlineSummaryVLocation Top;
    public static XLOutlineSummaryVLocation Bottom;
}
public enum ClosedXML.Excel.XLPageOrderValues : Enum {
    public int value__;
    public static XLPageOrderValues DownThenOver;
    public static XLPageOrderValues OverThenDown;
}
public enum ClosedXML.Excel.XLPageOrientation : Enum {
    public int value__;
    public static XLPageOrientation Default;
    public static XLPageOrientation Portrait;
    public static XLPageOrientation Landscape;
}
internal class ClosedXML.Excel.XLPageSetup : object {
    [CompilerGeneratedAttribute]
private IXLPrintAreas <PrintAreas>k__BackingField;
    [CompilerGeneratedAttribute]
private int <FirstRowToRepeatAtTop>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LastRowToRepeatAtTop>k__BackingField;
    [CompilerGeneratedAttribute]
private int <FirstColumnToRepeatAtLeft>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LastColumnToRepeatAtLeft>k__BackingField;
    [CompilerGeneratedAttribute]
private XLPageOrientation <PageOrientation>k__BackingField;
    [CompilerGeneratedAttribute]
private XLPaperSize <PaperSize>k__BackingField;
    [CompilerGeneratedAttribute]
private int <HorizontalDpi>k__BackingField;
    [CompilerGeneratedAttribute]
private int <VerticalDpi>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<UInt32> <FirstPageNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CenterHorizontally>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CenterVertically>k__BackingField;
    [CompilerGeneratedAttribute]
private XLPrintErrorValues <PrintErrorValue>k__BackingField;
    [CompilerGeneratedAttribute]
private IXLMargins <Margins>k__BackingField;
    private int _pagesWide;
    private int _pagesTall;
    private int _scale;
    [CompilerGeneratedAttribute]
private IXLHeaderFooter <Header>k__BackingField;
    [CompilerGeneratedAttribute]
private IXLHeaderFooter <Footer>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ScaleHFWithDocument>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AlignHFWithMargins>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowGridlines>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowRowAndColumnHeadings>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <BlackAndWhite>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DraftQuality>k__BackingField;
    [CompilerGeneratedAttribute]
private XLPageOrderValues <PageOrder>k__BackingField;
    [CompilerGeneratedAttribute]
private XLShowCommentsValues <ShowComments>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<int> <RowBreaks>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<int> <ColumnBreaks>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DifferentFirstPageOnHF>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DifferentOddEvenPagesOnHF>k__BackingField;
    public IXLPrintAreas PrintAreas { get; private set; }
    public int FirstRowToRepeatAtTop { get; private set; }
    public int LastRowToRepeatAtTop { get; private set; }
    public int FirstColumnToRepeatAtLeft { get; private set; }
    public int LastColumnToRepeatAtLeft { get; private set; }
    public XLPageOrientation PageOrientation { get; public set; }
    public XLPaperSize PaperSize { get; public set; }
    public int HorizontalDpi { get; public set; }
    public int VerticalDpi { get; public set; }
    public Nullable`1<UInt32> FirstPageNumber { get; public set; }
    public bool CenterHorizontally { get; public set; }
    public bool CenterVertically { get; public set; }
    public XLPrintErrorValues PrintErrorValue { get; public set; }
    public IXLMargins Margins { get; public set; }
    public int PagesWide { get; public set; }
    public int PagesTall { get; public set; }
    public int Scale { get; public set; }
    public IXLHeaderFooter Header { get; private set; }
    public IXLHeaderFooter Footer { get; private set; }
    public bool ScaleHFWithDocument { get; public set; }
    public bool AlignHFWithMargins { get; public set; }
    public bool ShowGridlines { get; public set; }
    public bool ShowRowAndColumnHeadings { get; public set; }
    public bool BlackAndWhite { get; public set; }
    public bool DraftQuality { get; public set; }
    public XLPageOrderValues PageOrder { get; public set; }
    public XLShowCommentsValues ShowComments { get; public set; }
    public List`1<int> RowBreaks { get; private set; }
    public List`1<int> ColumnBreaks { get; private set; }
    public bool DifferentFirstPageOnHF { get; public set; }
    public bool DifferentOddEvenPagesOnHF { get; public set; }
    public XLPageSetup(XLPageSetup defaultPageOptions, XLWorksheet worksheet);
    [CompilerGeneratedAttribute]
public sealed virtual IXLPrintAreas get_PrintAreas();
    [CompilerGeneratedAttribute]
private void set_PrintAreas(IXLPrintAreas value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_FirstRowToRepeatAtTop();
    [CompilerGeneratedAttribute]
private void set_FirstRowToRepeatAtTop(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_LastRowToRepeatAtTop();
    [CompilerGeneratedAttribute]
private void set_LastRowToRepeatAtTop(int value);
    public sealed virtual void SetRowsToRepeatAtTop(string range);
    public sealed virtual void SetRowsToRepeatAtTop(int firstRowToRepeatAtTop, int lastRowToRepeatAtTop);
    [CompilerGeneratedAttribute]
public sealed virtual int get_FirstColumnToRepeatAtLeft();
    [CompilerGeneratedAttribute]
private void set_FirstColumnToRepeatAtLeft(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_LastColumnToRepeatAtLeft();
    [CompilerGeneratedAttribute]
private void set_LastColumnToRepeatAtLeft(int value);
    public sealed virtual void SetColumnsToRepeatAtLeft(string range);
    public void SetColumnsToRepeatAtLeft(string firstColumnToRepeatAtLeft, string lastColumnToRepeatAtLeft);
    public sealed virtual void SetColumnsToRepeatAtLeft(int firstColumnToRepeatAtLeft, int lastColumnToRepeatAtLeft);
    [CompilerGeneratedAttribute]
public sealed virtual XLPageOrientation get_PageOrientation();
    [CompilerGeneratedAttribute]
public sealed virtual void set_PageOrientation(XLPageOrientation value);
    [CompilerGeneratedAttribute]
public sealed virtual XLPaperSize get_PaperSize();
    [CompilerGeneratedAttribute]
public sealed virtual void set_PaperSize(XLPaperSize value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_HorizontalDpi();
    [CompilerGeneratedAttribute]
public sealed virtual void set_HorizontalDpi(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_VerticalDpi();
    [CompilerGeneratedAttribute]
public sealed virtual void set_VerticalDpi(int value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<UInt32> get_FirstPageNumber();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FirstPageNumber(Nullable`1<UInt32> value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_CenterHorizontally();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CenterHorizontally(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_CenterVertically();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CenterVertically(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual XLPrintErrorValues get_PrintErrorValue();
    [CompilerGeneratedAttribute]
public sealed virtual void set_PrintErrorValue(XLPrintErrorValues value);
    [CompilerGeneratedAttribute]
public sealed virtual IXLMargins get_Margins();
    [CompilerGeneratedAttribute]
public void set_Margins(IXLMargins value);
    public sealed virtual int get_PagesWide();
    public sealed virtual void set_PagesWide(int value);
    public sealed virtual int get_PagesTall();
    public sealed virtual void set_PagesTall(int value);
    public sealed virtual int get_Scale();
    public sealed virtual void set_Scale(int value);
    public sealed virtual void AdjustTo(int percentageOfNormalSize);
    public sealed virtual void FitToPages(int pagesWide, int pagesTall);
    [CompilerGeneratedAttribute]
public sealed virtual IXLHeaderFooter get_Header();
    [CompilerGeneratedAttribute]
private void set_Header(IXLHeaderFooter value);
    [CompilerGeneratedAttribute]
public sealed virtual IXLHeaderFooter get_Footer();
    [CompilerGeneratedAttribute]
private void set_Footer(IXLHeaderFooter value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ScaleHFWithDocument();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ScaleHFWithDocument(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_AlignHFWithMargins();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AlignHFWithMargins(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ShowGridlines();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ShowGridlines(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ShowRowAndColumnHeadings();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ShowRowAndColumnHeadings(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_BlackAndWhite();
    [CompilerGeneratedAttribute]
public sealed virtual void set_BlackAndWhite(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_DraftQuality();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DraftQuality(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual XLPageOrderValues get_PageOrder();
    [CompilerGeneratedAttribute]
public sealed virtual void set_PageOrder(XLPageOrderValues value);
    [CompilerGeneratedAttribute]
public sealed virtual XLShowCommentsValues get_ShowComments();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ShowComments(XLShowCommentsValues value);
    [CompilerGeneratedAttribute]
public sealed virtual List`1<int> get_RowBreaks();
    [CompilerGeneratedAttribute]
private void set_RowBreaks(List`1<int> value);
    [CompilerGeneratedAttribute]
public sealed virtual List`1<int> get_ColumnBreaks();
    [CompilerGeneratedAttribute]
private void set_ColumnBreaks(List`1<int> value);
    public sealed virtual void AddHorizontalPageBreak(int row);
    public sealed virtual void AddVerticalPageBreak(int column);
    public sealed virtual IXLPageSetup SetPageOrientation(XLPageOrientation value);
    public sealed virtual IXLPageSetup SetPagesWide(int value);
    public sealed virtual IXLPageSetup SetPagesTall(int value);
    public sealed virtual IXLPageSetup SetScale(int value);
    public sealed virtual IXLPageSetup SetHorizontalDpi(int value);
    public sealed virtual IXLPageSetup SetVerticalDpi(int value);
    public sealed virtual IXLPageSetup SetFirstPageNumber(Nullable`1<UInt32> value);
    public sealed virtual IXLPageSetup SetCenterHorizontally();
    public sealed virtual IXLPageSetup SetCenterHorizontally(bool value);
    public sealed virtual IXLPageSetup SetCenterVertically();
    public sealed virtual IXLPageSetup SetCenterVertically(bool value);
    public sealed virtual IXLPageSetup SetPaperSize(XLPaperSize value);
    public sealed virtual IXLPageSetup SetScaleHFWithDocument();
    public sealed virtual IXLPageSetup SetScaleHFWithDocument(bool value);
    public sealed virtual IXLPageSetup SetAlignHFWithMargins();
    public sealed virtual IXLPageSetup SetAlignHFWithMargins(bool value);
    public sealed virtual IXLPageSetup SetShowGridlines();
    public sealed virtual IXLPageSetup SetShowGridlines(bool value);
    public sealed virtual IXLPageSetup SetShowRowAndColumnHeadings();
    public sealed virtual IXLPageSetup SetShowRowAndColumnHeadings(bool value);
    public sealed virtual IXLPageSetup SetBlackAndWhite();
    public sealed virtual IXLPageSetup SetBlackAndWhite(bool value);
    public sealed virtual IXLPageSetup SetDraftQuality();
    public sealed virtual IXLPageSetup SetDraftQuality(bool value);
    public sealed virtual IXLPageSetup SetPageOrder(XLPageOrderValues value);
    public sealed virtual IXLPageSetup SetShowComments(XLShowCommentsValues value);
    public sealed virtual IXLPageSetup SetPrintErrorValue(XLPrintErrorValues value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_DifferentFirstPageOnHF();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DifferentFirstPageOnHF(bool value);
    public sealed virtual IXLPageSetup SetDifferentFirstPageOnHF();
    public sealed virtual IXLPageSetup SetDifferentFirstPageOnHF(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_DifferentOddEvenPagesOnHF();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DifferentOddEvenPagesOnHF(bool value);
    public sealed virtual IXLPageSetup SetDifferentOddEvenPagesOnHF();
    public sealed virtual IXLPageSetup SetDifferentOddEvenPagesOnHF(bool value);
}
public enum ClosedXML.Excel.XLPaperSize : Enum {
    public int value__;
    public static XLPaperSize LetterPaper;
    public static XLPaperSize LetterSmallPaper;
    public static XLPaperSize TabloidPaper;
    public static XLPaperSize LedgerPaper;
    public static XLPaperSize LegalPaper;
    public static XLPaperSize StatementPaper;
    public static XLPaperSize ExecutivePaper;
    public static XLPaperSize A3Paper;
    public static XLPaperSize A4Paper;
    public static XLPaperSize A4SmallPaper;
    public static XLPaperSize A5Paper;
    public static XLPaperSize B4Paper;
    public static XLPaperSize B5Paper;
    public static XLPaperSize FolioPaper;
    public static XLPaperSize QuartoPaper;
    public static XLPaperSize StandardPaper;
    public static XLPaperSize StandardPaper1;
    public static XLPaperSize NotePaper;
    public static XLPaperSize No9Envelope;
    public static XLPaperSize No10Envelope;
    public static XLPaperSize No11Envelope;
    public static XLPaperSize No12Envelope;
    public static XLPaperSize No14Envelope;
    public static XLPaperSize CPaper;
    public static XLPaperSize DPaper;
    public static XLPaperSize EPaper;
    public static XLPaperSize DlEnvelope;
    public static XLPaperSize C5Envelope;
    public static XLPaperSize C3Envelope;
    public static XLPaperSize C4Envelope;
    public static XLPaperSize C6Envelope;
    public static XLPaperSize C65Envelope;
    public static XLPaperSize B4Envelope;
    public static XLPaperSize B5Envelope;
    public static XLPaperSize B6Envelope;
    public static XLPaperSize ItalyEnvelope;
    public static XLPaperSize MonarchEnvelope;
    public static XLPaperSize No634Envelope;
    public static XLPaperSize UsStandardFanfold;
    public static XLPaperSize GermanStandardFanfold;
    public static XLPaperSize GermanLegalFanfold;
    public static XLPaperSize IsoB4;
    public static XLPaperSize JapaneseDoublePostcard;
    public static XLPaperSize StandardPaper2;
    public static XLPaperSize StandardPaper3;
    public static XLPaperSize StandardPaper4;
    public static XLPaperSize InviteEnvelope;
    public static XLPaperSize LetterExtraPaper;
    public static XLPaperSize LegalExtraPaper;
    public static XLPaperSize TabloidExtraPaper;
    public static XLPaperSize A4ExtraPaper;
    public static XLPaperSize LetterTransversePaper;
    public static XLPaperSize A4TransversePaper;
    public static XLPaperSize LetterExtraTransversePaper;
    public static XLPaperSize SuperaSuperaA4Paper;
    public static XLPaperSize SuperbSuperbA3Paper;
    public static XLPaperSize LetterPlusPaper;
    public static XLPaperSize A4PlusPaper;
    public static XLPaperSize A5TransversePaper;
    public static XLPaperSize JisB5TransversePaper;
    public static XLPaperSize A3ExtraPaper;
    public static XLPaperSize A5ExtraPaper;
    public static XLPaperSize IsoB5ExtraPaper;
    public static XLPaperSize A2Paper;
    public static XLPaperSize A3TransversePaper;
    public static XLPaperSize A3ExtraTransversePaper;
}
internal class ClosedXML.Excel.XLPhonetic : object {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Start>k__BackingField;
    [CompilerGeneratedAttribute]
private int <End>k__BackingField;
    public string Text { get; public set; }
    public int Start { get; public set; }
    public int End { get; public set; }
    public XLPhonetic(string text, int start, int end);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Text();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Text(string value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Start();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Start(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_End();
    [CompilerGeneratedAttribute]
public sealed virtual void set_End(int value);
    public sealed virtual bool Equals(IXLPhonetic other);
}
public enum ClosedXML.Excel.XLPhoneticAlignment : Enum {
    public int value__;
    public static XLPhoneticAlignment Center;
    public static XLPhoneticAlignment Distributed;
    public static XLPhoneticAlignment Left;
    public static XLPhoneticAlignment NoControl;
}
internal class ClosedXML.Excel.XLPhonetics : object {
    private List`1<IXLPhonetic> _phonetics;
    private IXLFontBase _defaultFont;
    [CompilerGeneratedAttribute]
private bool <Bold>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Italic>k__BackingField;
    [CompilerGeneratedAttribute]
private XLFontUnderlineValues <Underline>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Strikethrough>k__BackingField;
    [CompilerGeneratedAttribute]
private XLFontVerticalTextAlignmentValues <VerticalAlignment>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Shadow>k__BackingField;
    [CompilerGeneratedAttribute]
private double <FontSize>k__BackingField;
    [CompilerGeneratedAttribute]
private XLColor <FontColor>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FontName>k__BackingField;
    [CompilerGeneratedAttribute]
private XLFontFamilyNumberingValues <FontFamilyNumbering>k__BackingField;
    [CompilerGeneratedAttribute]
private XLFontCharSet <FontCharSet>k__BackingField;
    [CompilerGeneratedAttribute]
private XLPhoneticAlignment <Alignment>k__BackingField;
    [CompilerGeneratedAttribute]
private XLPhoneticType <Type>k__BackingField;
    public bool Bold { get; public set; }
    public bool Italic { get; public set; }
    public XLFontUnderlineValues Underline { get; public set; }
    public bool Strikethrough { get; public set; }
    public XLFontVerticalTextAlignmentValues VerticalAlignment { get; public set; }
    public bool Shadow { get; public set; }
    public double FontSize { get; public set; }
    public XLColor FontColor { get; public set; }
    public string FontName { get; public set; }
    public XLFontFamilyNumberingValues FontFamilyNumbering { get; public set; }
    public XLFontCharSet FontCharSet { get; public set; }
    public int Count { get; }
    public XLPhoneticAlignment Alignment { get; public set; }
    public XLPhoneticType Type { get; public set; }
    public XLPhonetics(IXLFontBase defaultFont);
    public XLPhonetics(IXLPhonetics defaultPhonetics, IXLFontBase defaultFont);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Bold();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Bold(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Italic();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Italic(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual XLFontUnderlineValues get_Underline();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Underline(XLFontUnderlineValues value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Strikethrough();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Strikethrough(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual XLFontVerticalTextAlignmentValues get_VerticalAlignment();
    [CompilerGeneratedAttribute]
public sealed virtual void set_VerticalAlignment(XLFontVerticalTextAlignmentValues value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Shadow();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Shadow(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual double get_FontSize();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FontSize(double value);
    [CompilerGeneratedAttribute]
public sealed virtual XLColor get_FontColor();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FontColor(XLColor value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_FontName();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FontName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual XLFontFamilyNumberingValues get_FontFamilyNumbering();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FontFamilyNumbering(XLFontFamilyNumberingValues value);
    [CompilerGeneratedAttribute]
public sealed virtual XLFontCharSet get_FontCharSet();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FontCharSet(XLFontCharSet value);
    public sealed virtual IXLPhonetics SetBold();
    public sealed virtual IXLPhonetics SetBold(bool value);
    public sealed virtual IXLPhonetics SetItalic();
    public sealed virtual IXLPhonetics SetItalic(bool value);
    public sealed virtual IXLPhonetics SetUnderline();
    public sealed virtual IXLPhonetics SetUnderline(XLFontUnderlineValues value);
    public sealed virtual IXLPhonetics SetStrikethrough();
    public sealed virtual IXLPhonetics SetStrikethrough(bool value);
    public sealed virtual IXLPhonetics SetVerticalAlignment(XLFontVerticalTextAlignmentValues value);
    public sealed virtual IXLPhonetics SetShadow();
    public sealed virtual IXLPhonetics SetShadow(bool value);
    public sealed virtual IXLPhonetics SetFontSize(double value);
    public sealed virtual IXLPhonetics SetFontColor(XLColor value);
    public sealed virtual IXLPhonetics SetFontName(string value);
    public sealed virtual IXLPhonetics SetFontFamilyNumbering(XLFontFamilyNumberingValues value);
    public sealed virtual IXLPhonetics SetFontCharSet(XLFontCharSet value);
    public sealed virtual IXLPhonetics Add(string text, int start, int end);
    public sealed virtual IXLPhonetics ClearText();
    public sealed virtual IXLPhonetics ClearFont();
    public sealed virtual int get_Count();
    [CompilerGeneratedAttribute]
public sealed virtual XLPhoneticAlignment get_Alignment();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Alignment(XLPhoneticAlignment value);
    [CompilerGeneratedAttribute]
public sealed virtual XLPhoneticType get_Type();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Type(XLPhoneticType value);
    public sealed virtual IXLPhonetics SetAlignment(XLPhoneticAlignment phoneticAlignment);
    public sealed virtual IXLPhonetics SetType(XLPhoneticType phoneticType);
    public sealed virtual IEnumerator`1<IXLPhonetic> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual bool Equals(IXLPhonetics other);
}
public enum ClosedXML.Excel.XLPhoneticType : Enum {
    public int value__;
    public static XLPhoneticType FullWidthKatakana;
    public static XLPhoneticType HalfWidthKatakana;
    public static XLPhoneticType Hiragana;
    public static XLPhoneticType NoConversion;
}
internal enum ClosedXML.Excel.XLPivotAreaValues : Enum {
    public int value__;
    public static XLPivotAreaValues None;
    public static XLPivotAreaValues Normal;
    public static XLPivotAreaValues Data;
    public static XLPivotAreaValues All;
    public static XLPivotAreaValues Origin;
    public static XLPivotAreaValues Button;
    public static XLPivotAreaValues TopRight;
    public static XLPivotAreaValues TopEnd;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class ClosedXML.Excel.XLPivotCache : object {
    private Dictionary`2<string, int> _fieldIndexes;
    private List`1<string> _fieldNames;
    private List`1<List`1<XLCellValue>> _fieldValues;
    [CompilerGeneratedAttribute]
private XLItemsToRetain <ItemsToRetainPerField>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RefreshDataOnOpen>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SaveSourceData>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<UInt32> <CacheId>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <Guid>k__BackingField;
    [CompilerGeneratedAttribute]
private XLPivotSourceReference <PivotSourceReference>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <WorkbookCacheRelId>k__BackingField;
    public IReadOnlyList`1<string> FieldNames { get; }
    public XLItemsToRetain ItemsToRetainPerField { get; public set; }
    public bool RefreshDataOnOpen { get; public set; }
    public bool SaveSourceData { get; public set; }
    internal IList`1<string> SourceRangeFields { get; }
    internal Nullable`1<UInt32> CacheId { get; internal set; }
    internal Guid Guid { get; }
    internal XLPivotSourceReference PivotSourceReference { get; internal set; }
    [NullableAttribute("2")]
internal string WorkbookCacheRelId { get; internal set; }
    public XLPivotCache(IXLRange sourceRange);
    public XLPivotCache(IXLTable table);
    private XLPivotCache(XLPivotSourceReference reference);
    public sealed virtual IReadOnlyList`1<string> get_FieldNames();
    [CompilerGeneratedAttribute]
public sealed virtual XLItemsToRetain get_ItemsToRetainPerField();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ItemsToRetainPerField(XLItemsToRetain value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_RefreshDataOnOpen();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RefreshDataOnOpen(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_SaveSourceData();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SaveSourceData(bool value);
    public sealed virtual IXLPivotCache Refresh();
    public sealed virtual IXLPivotCache SetItemsToRetainPerField(XLItemsToRetain value);
    public sealed virtual IXLPivotCache SetRefreshDataOnOpen();
    public sealed virtual IXLPivotCache SetRefreshDataOnOpen(bool value);
    public sealed virtual IXLPivotCache SetSaveSourceData();
    public sealed virtual IXLPivotCache SetSaveSourceData(bool value);
    internal IList`1<string> get_SourceRangeFields();
    [CompilerGeneratedAttribute]
internal Nullable`1<UInt32> get_CacheId();
    [CompilerGeneratedAttribute]
internal void set_CacheId(Nullable`1<UInt32> value);
    [CompilerGeneratedAttribute]
internal Guid get_Guid();
    [CompilerGeneratedAttribute]
internal XLPivotSourceReference get_PivotSourceReference();
    [CompilerGeneratedAttribute]
internal void set_PivotSourceReference(XLPivotSourceReference value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal string get_WorkbookCacheRelId();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal void set_WorkbookCacheRelId(string value);
    internal XLPivotCache AddCachedField(string fieldName, List`1<XLCellValue> items);
    internal bool TryGetFieldIndex(string fieldName, Int32& index);
    internal bool ContainsField(string fieldName);
    internal IReadOnlyList`1<XLCellValue> GetFieldValues(string fieldName);
    internal IList`1<XLCellValue> GetFieldValues(int fieldIndex);
    private string AdjustedFieldName(string header);
    private void AddField(string fieldName, List`1<XLCellValue> items);
    private void SetExcelDefaults();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class ClosedXML.Excel.XLPivotCaches : object {
    private List`1<XLPivotCache> _caches;
    private sealed virtual override IXLPivotCache ClosedXML.Excel.IXLPivotCaches.Add(IXLRange range);
    private sealed virtual override IEnumerator`1<IXLPivotCache> System.Collections.Generic.IEnumerable<ClosedXML.Excel.IXLPivotCache>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    internal XLPivotCache Add(IXLRange range);
    internal XLPivotCache Add(XLPivotSourceReference pivotSourceReference);
    public sealed virtual IEnumerator`1<XLPivotCache> GetEnumerator();
    internal IEnumerable`1<XLPivotCache> GetAll(IXLRange range);
}
public enum ClosedXML.Excel.XLPivotCalculation : Enum {
    public int value__;
    public static XLPivotCalculation Normal;
    public static XLPivotCalculation DifferenceFrom;
    public static XLPivotCalculation PercentageOf;
    public static XLPivotCalculation PercentageDifferenceFrom;
    public static XLPivotCalculation RunningTotal;
    public static XLPivotCalculation PercentageOfRow;
    public static XLPivotCalculation PercentageOfColumn;
    public static XLPivotCalculation PercentageOfTotal;
    public static XLPivotCalculation Index;
}
public enum ClosedXML.Excel.XLPivotCalculationItem : Enum {
    public int value__;
    public static XLPivotCalculationItem Value;
    public static XLPivotCalculationItem Previous;
    public static XLPivotCalculationItem Next;
}
[DebuggerDisplayAttribute("{SourceName}")]
internal class ClosedXML.Excel.XLPivotField : object {
    private List`1<XLCellValue> _selectedValues;
    private XLPivotTable _pivotTable;
    [CompilerGeneratedAttribute]
private string <SourceName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CustomName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SubtotalCaption>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<XLSubtotalFunction> <Subtotals>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeNewItemsInFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Outline>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Compact>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <SubtotalsAtTop>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RepeatItemLabels>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <InsertBlankLines>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowBlankItems>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <InsertPageBreaks>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Collapsed>k__BackingField;
    [CompilerGeneratedAttribute]
private XLPivotSortType <SortType>k__BackingField;
    [CompilerGeneratedAttribute]
private IXLPivotFieldStyleFormats <StyleFormats>k__BackingField;
    public string SourceName { get; private set; }
    public string CustomName { get; public set; }
    public string SubtotalCaption { get; public set; }
    public List`1<XLSubtotalFunction> Subtotals { get; private set; }
    public bool IncludeNewItemsInFilter { get; public set; }
    public bool Outline { get; public set; }
    public bool Compact { get; public set; }
    public Nullable`1<bool> SubtotalsAtTop { get; public set; }
    public bool RepeatItemLabels { get; public set; }
    public bool InsertBlankLines { get; public set; }
    public bool ShowBlankItems { get; public set; }
    public bool InsertPageBreaks { get; public set; }
    public bool Collapsed { get; public set; }
    public XLPivotSortType SortType { get; public set; }
    public IList`1<XLCellValue> SelectedValues { get; }
    public IXLPivotFieldStyleFormats StyleFormats { get; public set; }
    public bool IsOnRowAxis { get; }
    public bool IsOnColumnAxis { get; }
    public bool IsInFilterList { get; }
    public int Offset { get; }
    public XLPivotField(XLPivotTable pivotTable, string sourceName);
    [CompilerGeneratedAttribute]
public sealed virtual string get_SourceName();
    [CompilerGeneratedAttribute]
private void set_SourceName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_CustomName();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CustomName(string value);
    public sealed virtual IXLPivotField SetCustomName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_SubtotalCaption();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SubtotalCaption(string value);
    public sealed virtual IXLPivotField SetSubtotalCaption(string value);
    [CompilerGeneratedAttribute]
public sealed virtual List`1<XLSubtotalFunction> get_Subtotals();
    [CompilerGeneratedAttribute]
private void set_Subtotals(List`1<XLSubtotalFunction> value);
    public sealed virtual IXLPivotField AddSubtotal(XLSubtotalFunction value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IncludeNewItemsInFilter();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IncludeNewItemsInFilter(bool value);
    public sealed virtual IXLPivotField SetIncludeNewItemsInFilter();
    public sealed virtual IXLPivotField SetIncludeNewItemsInFilter(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Outline();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Outline(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Compact();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Compact(bool value);
    public sealed virtual IXLPivotField SetLayout(XLPivotLayout value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<bool> get_SubtotalsAtTop();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SubtotalsAtTop(Nullable`1<bool> value);
    public sealed virtual IXLPivotField SetSubtotalsAtTop();
    public sealed virtual IXLPivotField SetSubtotalsAtTop(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_RepeatItemLabels();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RepeatItemLabels(bool value);
    public sealed virtual IXLPivotField SetRepeatItemLabels();
    public sealed virtual IXLPivotField SetRepeatItemLabels(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_InsertBlankLines();
    [CompilerGeneratedAttribute]
public sealed virtual void set_InsertBlankLines(bool value);
    public sealed virtual IXLPivotField SetInsertBlankLines();
    public sealed virtual IXLPivotField SetInsertBlankLines(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ShowBlankItems();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ShowBlankItems(bool value);
    public sealed virtual IXLPivotField SetShowBlankItems();
    public sealed virtual IXLPivotField SetShowBlankItems(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_InsertPageBreaks();
    [CompilerGeneratedAttribute]
public sealed virtual void set_InsertPageBreaks(bool value);
    public sealed virtual IXLPivotField SetInsertPageBreaks();
    public sealed virtual IXLPivotField SetInsertPageBreaks(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Collapsed();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Collapsed(bool value);
    public sealed virtual IXLPivotField SetCollapsed();
    public sealed virtual IXLPivotField SetCollapsed(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual XLPivotSortType get_SortType();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SortType(XLPivotSortType value);
    public sealed virtual IXLPivotField SetSort(XLPivotSortType value);
    public sealed virtual IList`1<XLCellValue> get_SelectedValues();
    public sealed virtual IXLPivotField AddSelectedValue(XLCellValue value);
    public sealed virtual IXLPivotField AddSelectedValues(IEnumerable`1<XLCellValue> values);
    private void SetExcelDefaults();
    [CompilerGeneratedAttribute]
public sealed virtual IXLPivotFieldStyleFormats get_StyleFormats();
    [CompilerGeneratedAttribute]
public void set_StyleFormats(IXLPivotFieldStyleFormats value);
    public sealed virtual bool get_IsOnRowAxis();
    public sealed virtual bool get_IsOnColumnAxis();
    public sealed virtual bool get_IsInFilterList();
    public sealed virtual int get_Offset();
}
internal class ClosedXML.Excel.XLPivotFields : object {
    private Dictionary`2<string, IXLPivotField> _pivotFields;
    private XLPivotTable _pivotTable;
    internal XLPivotFields(XLPivotTable pivotTable);
    public sealed virtual IXLPivotField Add(string sourceName);
    public sealed virtual IXLPivotField Add(string sourceName, string customName);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(string sourceName);
    public sealed virtual bool Contains(IXLPivotField pivotField);
    public sealed virtual IXLPivotField Get(string sourceName);
    public sealed virtual IXLPivotField Get(int index);
    public sealed virtual IEnumerator`1<IXLPivotField> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual int IndexOf(string sourceName);
    public sealed virtual int IndexOf(IXLPivotField pf);
    public sealed virtual void Remove(string sourceName);
}
internal class ClosedXML.Excel.XLPivotFieldStyleFormats : object {
    private IXLPivotValueStyleFormat dataValuesFormat;
    private IXLPivotStyleFormat headerFormat;
    private IXLPivotStyleFormat labelFormat;
    private IXLPivotStyleFormat subtotalFormat;
    [CompilerGeneratedAttribute]
private IXLPivotField <PivotField>k__BackingField;
    public IXLPivotField PivotField { get; }
    public IXLPivotValueStyleFormat DataValuesFormat { get; public set; }
    public IXLPivotStyleFormat Header { get; public set; }
    public IXLPivotStyleFormat Label { get; public set; }
    public IXLPivotStyleFormat Subtotal { get; public set; }
    public XLPivotFieldStyleFormats(IXLPivotField field);
    [CompilerGeneratedAttribute]
public IXLPivotField get_PivotField();
    public sealed virtual IXLPivotValueStyleFormat get_DataValuesFormat();
    public void set_DataValuesFormat(IXLPivotValueStyleFormat value);
    public sealed virtual IXLPivotStyleFormat get_Header();
    public void set_Header(IXLPivotStyleFormat value);
    public sealed virtual IXLPivotStyleFormat get_Label();
    public void set_Label(IXLPivotStyleFormat value);
    public sealed virtual IXLPivotStyleFormat get_Subtotal();
    public void set_Subtotal(IXLPivotStyleFormat value);
}
public enum ClosedXML.Excel.XLPivotLayout : Enum {
    public int value__;
    public static XLPivotLayout Outline;
    public static XLPivotLayout Tabular;
    public static XLPivotLayout Compact;
}
public enum ClosedXML.Excel.XLPivotSortType : Enum {
    public int value__;
    public static XLPivotSortType Default;
    public static XLPivotSortType Ascending;
    public static XLPivotSortType Descending;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class ClosedXML.Excel.XLPivotSourceReference : object {
    [CompilerGeneratedAttribute]
private IXLRange <SourceRange>k__BackingField;
    [CompilerGeneratedAttribute]
private XLPivotTableSourceType <SourceType>k__BackingField;
    public IXLRange SourceRange { get; }
    [NullableAttribute("2")]
public IXLTable SourceTable { get; }
    public XLPivotTableSourceType SourceType { get; }
    public XLPivotSourceReference(IXLRange range);
    public XLPivotSourceReference(IXLTable table);
    [CompilerGeneratedAttribute]
public IXLRange get_SourceRange();
    [NullableContextAttribute("2")]
public IXLTable get_SourceTable();
    [CompilerGeneratedAttribute]
public XLPivotTableSourceType get_SourceType();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(XLPivotSourceReference other);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class ClosedXML.Excel.XLPivotStyleFormat : object {
    [CompilerGeneratedAttribute]
private XLPivotStyleFormatElement <AppliesTo>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IXLPivotField <PivotField>k__BackingField;
    [CompilerGeneratedAttribute]
private IXLStyle <Style>k__BackingField;
    [CompilerGeneratedAttribute]
private XLPivotAreaValues <AreaType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CollapsedLevelsAreSubtotals>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<AbstractPivotFieldReference> <FieldReferences>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Outline>k__BackingField;
    public XLPivotStyleFormatElement AppliesTo { get; public set; }
    [NullableAttribute("2")]
public IXLPivotField PivotField { get; public set; }
    public IXLStyle Style { get; public set; }
    internal XLPivotAreaValues AreaType { get; internal set; }
    internal bool CollapsedLevelsAreSubtotals { get; internal set; }
    internal IList`1<AbstractPivotFieldReference> FieldReferences { get; }
    internal bool Outline { get; internal set; }
    [NullableContextAttribute("2")]
public XLPivotStyleFormat(IXLPivotField field, IXLStyle style);
    [CompilerGeneratedAttribute]
public sealed virtual XLPivotStyleFormatElement get_AppliesTo();
    [CompilerGeneratedAttribute]
public void set_AppliesTo(XLPivotStyleFormatElement value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual IXLPivotField get_PivotField();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_PivotField(IXLPivotField value);
    [CompilerGeneratedAttribute]
public sealed virtual IXLStyle get_Style();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Style(IXLStyle value);
    [CompilerGeneratedAttribute]
internal XLPivotAreaValues get_AreaType();
    [CompilerGeneratedAttribute]
internal void set_AreaType(XLPivotAreaValues value);
    [CompilerGeneratedAttribute]
internal bool get_CollapsedLevelsAreSubtotals();
    [CompilerGeneratedAttribute]
internal void set_CollapsedLevelsAreSubtotals(bool value);
    [CompilerGeneratedAttribute]
internal IList`1<AbstractPivotFieldReference> get_FieldReferences();
    [CompilerGeneratedAttribute]
internal bool get_Outline();
    [CompilerGeneratedAttribute]
internal void set_Outline(bool value);
}
[FlagsAttribute]
public enum ClosedXML.Excel.XLPivotStyleFormatElement : Enum {
    public int value__;
    public static XLPivotStyleFormatElement None;
    public static XLPivotStyleFormatElement Label;
    public static XLPivotStyleFormatElement Data;
    public static XLPivotStyleFormatElement All;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class ClosedXML.Excel.XLPivotStyleFormats : object {
    [NullableAttribute("2")]
private IXLPivotField _pivotField;
    private Dictionary`2<XLPivotStyleFormatElement, IXLPivotStyleFormat> _styleFormats;
    [NullableContextAttribute("2")]
public XLPivotStyleFormats(IXLPivotField pivotField);
    public sealed virtual IXLPivotStyleFormat ForElement(XLPivotStyleFormatElement element);
    public sealed virtual IEnumerator`1<IXLPivotStyleFormat> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public void Add(IXLPivotStyleFormat styleFormat);
    public void AddRange(IEnumerable`1<IXLPivotStyleFormat> styleFormats);
}
internal enum ClosedXML.Excel.XLPivotStyleFormatTarget : Enum {
    public int value__;
    public static XLPivotStyleFormatTarget PivotTable;
    public static XLPivotStyleFormatTarget GrandTotal;
    public static XLPivotStyleFormatTarget Subtotal;
    public static XLPivotStyleFormatTarget Header;
    public static XLPivotStyleFormatTarget Label;
    public static XLPivotStyleFormatTarget Data;
}
public enum ClosedXML.Excel.XLPivotSubtotals : Enum {
    public int value__;
    public static XLPivotSubtotals DoNotShow;
    public static XLPivotSubtotals AtTop;
    public static XLPivotSubtotals AtBottom;
}
public enum ClosedXML.Excel.XLPivotSummary : Enum {
    public int value__;
    public static XLPivotSummary Sum;
    public static XLPivotSummary Count;
    public static XLPivotSummary Average;
    public static XLPivotSummary Minimum;
    public static XLPivotSummary Maximum;
    public static XLPivotSummary Product;
    public static XLPivotSummary CountNumbers;
    public static XLPivotSummary StandardDeviation;
    public static XLPivotSummary PopulationStandardDeviation;
    public static XLPivotSummary Variance;
    public static XLPivotSummary PopulationVariance;
}
[DebuggerDisplayAttribute("{Name}")]
internal class ClosedXML.Excel.XLPivotTable : object {
    private string _name;
    [CompilerGeneratedAttribute]
private Guid <Guid>k__BackingField;
    [CompilerGeneratedAttribute]
private IXLCell <TargetCell>k__BackingField;
    [CompilerGeneratedAttribute]
private XLPivotCache <PivotCache>k__BackingField;
    [CompilerGeneratedAttribute]
private IXLPivotFields <ReportFilters>k__BackingField;
    [CompilerGeneratedAttribute]
private IXLPivotFields <ColumnLabels>k__BackingField;
    [CompilerGeneratedAttribute]
private IXLPivotFields <RowLabels>k__BackingField;
    [CompilerGeneratedAttribute]
private IXLPivotValues <Values>k__BackingField;
    [CompilerGeneratedAttribute]
private XLPivotTableTheme <Theme>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ColumnHeaderCaption>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RowHeaderCaption>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MergeAndCenterWithLabels>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RowLabelIndent>k__BackingField;
    [CompilerGeneratedAttribute]
private XLFilterAreaOrder <FilterAreaOrder>k__BackingField;
    [CompilerGeneratedAttribute]
private int <FilterFieldsPageWrap>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorValueReplacement>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EmptyCellReplacement>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AutofitColumns>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PreserveCellFormatting>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowGrandTotalsRows>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowGrandTotalsColumns>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FilteredItemsInSubtotals>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowMultipleFilters>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseCustomListsForSorting>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowExpandCollapseButtons>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowContextualTooltips>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowPropertiesInTooltips>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisplayCaptionsAndDropdowns>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ClassicPivotTableLayout>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowValuesRow>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowEmptyItemsOnRows>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowEmptyItemsOnColumns>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisplayItemLabels>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SortFieldsAtoZ>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PrintExpandCollapsedButtons>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RepeatRowLabels>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PrintTitles>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableShowDetails>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableCellEditing>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowRowHeaders>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowColumnHeaders>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowRowStripes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowColumnStripes>k__BackingField;
    [CompilerGeneratedAttribute]
private XLPivotSubtotals <Subtotals>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RelId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CacheDefinitionRelId>k__BackingField;
    [CompilerGeneratedAttribute]
private IXLWorksheet <Worksheet>k__BackingField;
    [CompilerGeneratedAttribute]
private IXLPivotTableStyleFormats <StyleFormats>k__BackingField;
    public Guid Guid { get; }
    private IXLPivotCache ClosedXML.Excel.IXLPivotTable.PivotCache { get; private set; }
    public IXLCell TargetCell { get; public set; }
    public XLPivotCache PivotCache { get; public set; }
    public IXLPivotFields ReportFilters { get; private set; }
    public IXLPivotFields ColumnLabels { get; private set; }
    public IXLPivotFields RowLabels { get; private set; }
    public IXLPivotValues Values { get; private set; }
    public IEnumerable`1<IXLPivotField> ImplementedFields { get; }
    public XLPivotTableTheme Theme { get; public set; }
    public string Name { get; public set; }
    public string Title { get; public set; }
    public string Description { get; public set; }
    public string ColumnHeaderCaption { get; public set; }
    public string RowHeaderCaption { get; public set; }
    public bool MergeAndCenterWithLabels { get; public set; }
    public int RowLabelIndent { get; public set; }
    public XLFilterAreaOrder FilterAreaOrder { get; public set; }
    public int FilterFieldsPageWrap { get; public set; }
    public string ErrorValueReplacement { get; public set; }
    public string EmptyCellReplacement { get; public set; }
    public bool AutofitColumns { get; public set; }
    public bool PreserveCellFormatting { get; public set; }
    public bool ShowGrandTotalsRows { get; public set; }
    public bool ShowGrandTotalsColumns { get; public set; }
    public bool FilteredItemsInSubtotals { get; public set; }
    public bool AllowMultipleFilters { get; public set; }
    public bool UseCustomListsForSorting { get; public set; }
    public bool ShowExpandCollapseButtons { get; public set; }
    public bool ShowContextualTooltips { get; public set; }
    public bool ShowPropertiesInTooltips { get; public set; }
    public bool DisplayCaptionsAndDropdowns { get; public set; }
    public bool ClassicPivotTableLayout { get; public set; }
    public bool ShowValuesRow { get; public set; }
    public bool ShowEmptyItemsOnRows { get; public set; }
    public bool ShowEmptyItemsOnColumns { get; public set; }
    public bool DisplayItemLabels { get; public set; }
    public bool SortFieldsAtoZ { get; public set; }
    public bool PrintExpandCollapsedButtons { get; public set; }
    public bool RepeatRowLabels { get; public set; }
    public bool PrintTitles { get; public set; }
    public bool EnableShowDetails { get; public set; }
    public bool EnableCellEditing { get; public set; }
    public bool ShowRowHeaders { get; public set; }
    public bool ShowColumnHeaders { get; public set; }
    public bool ShowRowStripes { get; public set; }
    public bool ShowColumnStripes { get; public set; }
    public XLPivotSubtotals Subtotals { get; public set; }
    unknown XLPivotLayout Layout {public set; }
    unknown bool InsertBlankLines {public set; }
    internal string RelId { get; internal set; }
    internal string CacheDefinitionRelId { get; internal set; }
    public IXLWorksheet Worksheet { get; }
    public IXLPivotTableStyleFormats StyleFormats { get; }
    public IEnumerable`1<IXLPivotStyleFormat> AllStyleFormats { get; }
    public XLPivotTable(IXLWorksheet worksheet);
    [CompilerGeneratedAttribute]
public Guid get_Guid();
    private sealed virtual override IXLPivotCache ClosedXML.Excel.IXLPivotTable.get_PivotCache();
    private sealed virtual override void ClosedXML.Excel.IXLPivotTable.set_PivotCache(IXLPivotCache value);
    [CompilerGeneratedAttribute]
public sealed virtual IXLCell get_TargetCell();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TargetCell(IXLCell value);
    [CompilerGeneratedAttribute]
public XLPivotCache get_PivotCache();
    [CompilerGeneratedAttribute]
public void set_PivotCache(XLPivotCache value);
    [CompilerGeneratedAttribute]
public sealed virtual IXLPivotFields get_ReportFilters();
    [CompilerGeneratedAttribute]
private void set_ReportFilters(IXLPivotFields value);
    [CompilerGeneratedAttribute]
public sealed virtual IXLPivotFields get_ColumnLabels();
    [CompilerGeneratedAttribute]
private void set_ColumnLabels(IXLPivotFields value);
    [CompilerGeneratedAttribute]
public sealed virtual IXLPivotFields get_RowLabels();
    [CompilerGeneratedAttribute]
private void set_RowLabels(IXLPivotFields value);
    [CompilerGeneratedAttribute]
public sealed virtual IXLPivotValues get_Values();
    [CompilerGeneratedAttribute]
private void set_Values(IXLPivotValues value);
    [IteratorStateMachineAttribute("ClosedXML.Excel.XLPivotTable/<get_ImplementedFields>d__33")]
public IEnumerable`1<IXLPivotField> get_ImplementedFields();
    [CompilerGeneratedAttribute]
public sealed virtual XLPivotTableTheme get_Theme();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Theme(XLPivotTableTheme value);
    public sealed virtual IXLPivotTable CopyTo(IXLCell targetCell);
    public IXLPivotTable SetTheme(XLPivotTableTheme value);
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public sealed virtual IXLPivotTable SetName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Title();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Title(string value);
    public sealed virtual IXLPivotTable SetTitle(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Description();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Description(string value);
    public sealed virtual IXLPivotTable SetDescription(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ColumnHeaderCaption();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ColumnHeaderCaption(string value);
    public sealed virtual IXLPivotTable SetColumnHeaderCaption(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_RowHeaderCaption();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RowHeaderCaption(string value);
    public sealed virtual IXLPivotTable SetRowHeaderCaption(string value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_MergeAndCenterWithLabels();
    [CompilerGeneratedAttribute]
public sealed virtual void set_MergeAndCenterWithLabels(bool value);
    public sealed virtual IXLPivotTable SetMergeAndCenterWithLabels();
    public sealed virtual IXLPivotTable SetMergeAndCenterWithLabels(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_RowLabelIndent();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RowLabelIndent(int value);
    public sealed virtual IXLPivotTable SetRowLabelIndent(int value);
    [CompilerGeneratedAttribute]
public sealed virtual XLFilterAreaOrder get_FilterAreaOrder();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FilterAreaOrder(XLFilterAreaOrder value);
    public sealed virtual IXLPivotTable SetFilterAreaOrder(XLFilterAreaOrder value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_FilterFieldsPageWrap();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FilterFieldsPageWrap(int value);
    public sealed virtual IXLPivotTable SetFilterFieldsPageWrap(int value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ErrorValueReplacement();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ErrorValueReplacement(string value);
    public sealed virtual IXLPivotTable SetErrorValueReplacement(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_EmptyCellReplacement();
    [CompilerGeneratedAttribute]
public sealed virtual void set_EmptyCellReplacement(string value);
    public sealed virtual IXLPivotTable SetEmptyCellReplacement(string value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_AutofitColumns();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AutofitColumns(bool value);
    public sealed virtual IXLPivotTable SetAutofitColumns();
    public sealed virtual IXLPivotTable SetAutofitColumns(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_PreserveCellFormatting();
    [CompilerGeneratedAttribute]
public sealed virtual void set_PreserveCellFormatting(bool value);
    public sealed virtual IXLPivotTable SetPreserveCellFormatting();
    public sealed virtual IXLPivotTable SetPreserveCellFormatting(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ShowGrandTotalsRows();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ShowGrandTotalsRows(bool value);
    public sealed virtual IXLPivotTable SetShowGrandTotalsRows();
    public sealed virtual IXLPivotTable SetShowGrandTotalsRows(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ShowGrandTotalsColumns();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ShowGrandTotalsColumns(bool value);
    public sealed virtual IXLPivotTable SetShowGrandTotalsColumns();
    public sealed virtual IXLPivotTable SetShowGrandTotalsColumns(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_FilteredItemsInSubtotals();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FilteredItemsInSubtotals(bool value);
    public sealed virtual IXLPivotTable SetFilteredItemsInSubtotals();
    public sealed virtual IXLPivotTable SetFilteredItemsInSubtotals(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_AllowMultipleFilters();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AllowMultipleFilters(bool value);
    public sealed virtual IXLPivotTable SetAllowMultipleFilters();
    public sealed virtual IXLPivotTable SetAllowMultipleFilters(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_UseCustomListsForSorting();
    [CompilerGeneratedAttribute]
public sealed virtual void set_UseCustomListsForSorting(bool value);
    public sealed virtual IXLPivotTable SetUseCustomListsForSorting();
    public sealed virtual IXLPivotTable SetUseCustomListsForSorting(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ShowExpandCollapseButtons();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ShowExpandCollapseButtons(bool value);
    public sealed virtual IXLPivotTable SetShowExpandCollapseButtons();
    public sealed virtual IXLPivotTable SetShowExpandCollapseButtons(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ShowContextualTooltips();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ShowContextualTooltips(bool value);
    public sealed virtual IXLPivotTable SetShowContextualTooltips();
    public sealed virtual IXLPivotTable SetShowContextualTooltips(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ShowPropertiesInTooltips();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ShowPropertiesInTooltips(bool value);
    public sealed virtual IXLPivotTable SetShowPropertiesInTooltips();
    public sealed virtual IXLPivotTable SetShowPropertiesInTooltips(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_DisplayCaptionsAndDropdowns();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DisplayCaptionsAndDropdowns(bool value);
    public sealed virtual IXLPivotTable SetDisplayCaptionsAndDropdowns();
    public sealed virtual IXLPivotTable SetDisplayCaptionsAndDropdowns(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ClassicPivotTableLayout();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ClassicPivotTableLayout(bool value);
    public sealed virtual IXLPivotTable SetClassicPivotTableLayout();
    public sealed virtual IXLPivotTable SetClassicPivotTableLayout(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ShowValuesRow();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ShowValuesRow(bool value);
    public sealed virtual IXLPivotTable SetShowValuesRow();
    public sealed virtual IXLPivotTable SetShowValuesRow(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ShowEmptyItemsOnRows();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ShowEmptyItemsOnRows(bool value);
    public sealed virtual IXLPivotTable SetShowEmptyItemsOnRows();
    public sealed virtual IXLPivotTable SetShowEmptyItemsOnRows(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ShowEmptyItemsOnColumns();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ShowEmptyItemsOnColumns(bool value);
    public sealed virtual IXLPivotTable SetShowEmptyItemsOnColumns();
    public sealed virtual IXLPivotTable SetShowEmptyItemsOnColumns(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_DisplayItemLabels();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DisplayItemLabels(bool value);
    public sealed virtual IXLPivotTable SetDisplayItemLabels();
    public sealed virtual IXLPivotTable SetDisplayItemLabels(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_SortFieldsAtoZ();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SortFieldsAtoZ(bool value);
    public sealed virtual IXLPivotTable SetSortFieldsAtoZ();
    public sealed virtual IXLPivotTable SetSortFieldsAtoZ(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_PrintExpandCollapsedButtons();
    [CompilerGeneratedAttribute]
public sealed virtual void set_PrintExpandCollapsedButtons(bool value);
    public sealed virtual IXLPivotTable SetPrintExpandCollapsedButtons();
    public sealed virtual IXLPivotTable SetPrintExpandCollapsedButtons(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_RepeatRowLabels();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RepeatRowLabels(bool value);
    public sealed virtual IXLPivotTable SetRepeatRowLabels();
    public sealed virtual IXLPivotTable SetRepeatRowLabels(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_PrintTitles();
    [CompilerGeneratedAttribute]
public sealed virtual void set_PrintTitles(bool value);
    public sealed virtual IXLPivotTable SetPrintTitles();
    public sealed virtual IXLPivotTable SetPrintTitles(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_EnableShowDetails();
    [CompilerGeneratedAttribute]
public sealed virtual void set_EnableShowDetails(bool value);
    public sealed virtual IXLPivotTable SetEnableShowDetails();
    public sealed virtual IXLPivotTable SetEnableShowDetails(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_EnableCellEditing();
    [CompilerGeneratedAttribute]
public sealed virtual void set_EnableCellEditing(bool value);
    public sealed virtual IXLPivotTable SetEnableCellEditing();
    public sealed virtual IXLPivotTable SetEnableCellEditing(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ShowRowHeaders();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ShowRowHeaders(bool value);
    public sealed virtual IXLPivotTable SetShowRowHeaders();
    public sealed virtual IXLPivotTable SetShowRowHeaders(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ShowColumnHeaders();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ShowColumnHeaders(bool value);
    public sealed virtual IXLPivotTable SetShowColumnHeaders();
    public sealed virtual IXLPivotTable SetShowColumnHeaders(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ShowRowStripes();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ShowRowStripes(bool value);
    public sealed virtual IXLPivotTable SetShowRowStripes();
    public sealed virtual IXLPivotTable SetShowRowStripes(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ShowColumnStripes();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ShowColumnStripes(bool value);
    public sealed virtual IXLPivotTable SetShowColumnStripes();
    public sealed virtual IXLPivotTable SetShowColumnStripes(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual XLPivotSubtotals get_Subtotals();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Subtotals(XLPivotSubtotals value);
    public sealed virtual IXLPivotTable SetSubtotals(XLPivotSubtotals value);
    public sealed virtual void set_Layout(XLPivotLayout value);
    public sealed virtual IXLPivotTable SetLayout(XLPivotLayout value);
    public sealed virtual void set_InsertBlankLines(bool value);
    public sealed virtual IXLPivotTable SetInsertBlankLines();
    public sealed virtual IXLPivotTable SetInsertBlankLines(bool value);
    [CompilerGeneratedAttribute]
internal string get_RelId();
    [CompilerGeneratedAttribute]
internal void set_RelId(string value);
    [CompilerGeneratedAttribute]
internal string get_CacheDefinitionRelId();
    [CompilerGeneratedAttribute]
internal void set_CacheDefinitionRelId(string value);
    private void SetExcelDefaults();
    [CompilerGeneratedAttribute]
public sealed virtual IXLWorksheet get_Worksheet();
    [CompilerGeneratedAttribute]
public sealed virtual IXLPivotTableStyleFormats get_StyleFormats();
    [IteratorStateMachineAttribute("ClosedXML.Excel.XLPivotTable/<get_AllStyleFormats>d__279")]
public IEnumerable`1<IXLPivotStyleFormat> get_AllStyleFormats();
    [CompilerGeneratedAttribute]
internal static void <CopyTo>g__CopyPivotField|38_1(IXLPivotField originalPivotField, IXLPivotField newPivotField);
}
internal class ClosedXML.Excel.XLPivotTables : object {
    private Dictionary`2<string, XLPivotTable> _pivotTables;
    [CompilerGeneratedAttribute]
private XLWorksheet <Worksheet>k__BackingField;
    internal XLWorksheet Worksheet { get; }
    public XLPivotTables(XLWorksheet worksheet);
    [CompilerGeneratedAttribute]
internal XLWorksheet get_Worksheet();
    public sealed virtual IXLPivotTable Add(string name, IXLCell targetCell, IXLPivotCache pivotCache);
    public sealed virtual IXLPivotTable Add(string name, IXLCell targetCell, IXLRange range);
    public sealed virtual IXLPivotTable Add(string name, IXLCell targetCell, IXLTable table);
    public sealed virtual bool Contains(string name);
    public sealed virtual void Delete(string name);
    public sealed virtual void DeleteAll();
    private sealed virtual override IXLPivotTable ClosedXML.Excel.IXLPivotTables.PivotTable(string name);
    public sealed virtual IEnumerator`1<IXLPivotTable> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    internal void Add(string name, IXLPivotTable pivotTable);
    internal XLPivotTable PivotTable(string name);
}
internal enum ClosedXML.Excel.XLPivotTableSourceType : Enum {
    public int value__;
    public static XLPivotTableSourceType Range;
    public static XLPivotTableSourceType Table;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class ClosedXML.Excel.XLPivotTableStyleFormats : object {
    [NullableAttribute("2")]
private IXLPivotStyleFormats columnGrandTotalFormats;
    [NullableAttribute("2")]
private IXLPivotStyleFormats rowGrandTotalFormats;
    public IXLPivotStyleFormats ColumnGrandTotalFormats { get; public set; }
    public IXLPivotStyleFormats RowGrandTotalFormats { get; public set; }
    public sealed virtual IXLPivotStyleFormats get_ColumnGrandTotalFormats();
    public void set_ColumnGrandTotalFormats(IXLPivotStyleFormats value);
    public sealed virtual IXLPivotStyleFormats get_RowGrandTotalFormats();
    public void set_RowGrandTotalFormats(IXLPivotStyleFormats value);
}
public enum ClosedXML.Excel.XLPivotTableTheme : Enum {
    public int value__;
    public static XLPivotTableTheme None;
    public static XLPivotTableTheme PivotStyleDark1;
    public static XLPivotTableTheme PivotStyleDark10;
    public static XLPivotTableTheme PivotStyleDark11;
    public static XLPivotTableTheme PivotStyleDark12;
    public static XLPivotTableTheme PivotStyleDark13;
    public static XLPivotTableTheme PivotStyleDark14;
    public static XLPivotTableTheme PivotStyleDark15;
    public static XLPivotTableTheme PivotStyleDark16;
    public static XLPivotTableTheme PivotStyleDark17;
    public static XLPivotTableTheme PivotStyleDark18;
    public static XLPivotTableTheme PivotStyleDark19;
    public static XLPivotTableTheme PivotStyleDark2;
    public static XLPivotTableTheme PivotStyleDark20;
    public static XLPivotTableTheme PivotStyleDark21;
    public static XLPivotTableTheme PivotStyleDark22;
    public static XLPivotTableTheme PivotStyleDark23;
    public static XLPivotTableTheme PivotStyleDark24;
    public static XLPivotTableTheme PivotStyleDark25;
    public static XLPivotTableTheme PivotStyleDark26;
    public static XLPivotTableTheme PivotStyleDark27;
    public static XLPivotTableTheme PivotStyleDark28;
    public static XLPivotTableTheme PivotStyleDark3;
    public static XLPivotTableTheme PivotStyleDark4;
    public static XLPivotTableTheme PivotStyleDark5;
    public static XLPivotTableTheme PivotStyleDark6;
    public static XLPivotTableTheme PivotStyleDark7;
    public static XLPivotTableTheme PivotStyleDark8;
    public static XLPivotTableTheme PivotStyleDark9;
    public static XLPivotTableTheme PivotStyleLight1;
    public static XLPivotTableTheme PivotStyleLight10;
    public static XLPivotTableTheme PivotStyleLight11;
    public static XLPivotTableTheme PivotStyleLight12;
    public static XLPivotTableTheme PivotStyleLight13;
    public static XLPivotTableTheme PivotStyleLight14;
    public static XLPivotTableTheme PivotStyleLight15;
    public static XLPivotTableTheme PivotStyleLight16;
    public static XLPivotTableTheme PivotStyleLight17;
    public static XLPivotTableTheme PivotStyleLight18;
    public static XLPivotTableTheme PivotStyleLight19;
    public static XLPivotTableTheme PivotStyleLight2;
    public static XLPivotTableTheme PivotStyleLight20;
    public static XLPivotTableTheme PivotStyleLight21;
    public static XLPivotTableTheme PivotStyleLight22;
    public static XLPivotTableTheme PivotStyleLight23;
    public static XLPivotTableTheme PivotStyleLight24;
    public static XLPivotTableTheme PivotStyleLight25;
    public static XLPivotTableTheme PivotStyleLight26;
    public static XLPivotTableTheme PivotStyleLight27;
    public static XLPivotTableTheme PivotStyleLight28;
    public static XLPivotTableTheme PivotStyleLight3;
    public static XLPivotTableTheme PivotStyleLight4;
    public static XLPivotTableTheme PivotStyleLight5;
    public static XLPivotTableTheme PivotStyleLight6;
    public static XLPivotTableTheme PivotStyleLight7;
    public static XLPivotTableTheme PivotStyleLight8;
    public static XLPivotTableTheme PivotStyleLight9;
    public static XLPivotTableTheme PivotStyleMedium1;
    public static XLPivotTableTheme PivotStyleMedium10;
    public static XLPivotTableTheme PivotStyleMedium11;
    public static XLPivotTableTheme PivotStyleMedium12;
    public static XLPivotTableTheme PivotStyleMedium13;
    public static XLPivotTableTheme PivotStyleMedium14;
    public static XLPivotTableTheme PivotStyleMedium15;
    public static XLPivotTableTheme PivotStyleMedium16;
    public static XLPivotTableTheme PivotStyleMedium17;
    public static XLPivotTableTheme PivotStyleMedium18;
    public static XLPivotTableTheme PivotStyleMedium19;
    public static XLPivotTableTheme PivotStyleMedium2;
    public static XLPivotTableTheme PivotStyleMedium20;
    public static XLPivotTableTheme PivotStyleMedium21;
    public static XLPivotTableTheme PivotStyleMedium22;
    public static XLPivotTableTheme PivotStyleMedium23;
    public static XLPivotTableTheme PivotStyleMedium24;
    public static XLPivotTableTheme PivotStyleMedium25;
    public static XLPivotTableTheme PivotStyleMedium26;
    public static XLPivotTableTheme PivotStyleMedium27;
    public static XLPivotTableTheme PivotStyleMedium28;
    public static XLPivotTableTheme PivotStyleMedium3;
    public static XLPivotTableTheme PivotStyleMedium4;
    public static XLPivotTableTheme PivotStyleMedium5;
    public static XLPivotTableTheme PivotStyleMedium6;
    public static XLPivotTableTheme PivotStyleMedium7;
    public static XLPivotTableTheme PivotStyleMedium8;
    public static XLPivotTableTheme PivotStyleMedium9;
}
internal class ClosedXML.Excel.XLPivotValue : object {
    [CompilerGeneratedAttribute]
private string <BaseFieldName>k__BackingField;
    [CompilerGeneratedAttribute]
private XLCellValue <BaseItemValue>k__BackingField;
    [CompilerGeneratedAttribute]
private XLPivotCalculation <Calculation>k__BackingField;
    [CompilerGeneratedAttribute]
private XLPivotCalculationItem <CalculationItem>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CustomName>k__BackingField;
    [CompilerGeneratedAttribute]
private IXLPivotValueFormat <NumberFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SourceName>k__BackingField;
    [CompilerGeneratedAttribute]
private XLPivotSummary <SummaryFormula>k__BackingField;
    public string BaseFieldName { get; public set; }
    public XLCellValue BaseItemValue { get; public set; }
    public XLPivotCalculation Calculation { get; public set; }
    public XLPivotCalculationItem CalculationItem { get; public set; }
    public string CustomName { get; public set; }
    public IXLPivotValueFormat NumberFormat { get; private set; }
    public string SourceName { get; private set; }
    public XLPivotSummary SummaryFormula { get; public set; }
    public XLPivotValue(string sourceName);
    [CompilerGeneratedAttribute]
public sealed virtual string get_BaseFieldName();
    [CompilerGeneratedAttribute]
public sealed virtual void set_BaseFieldName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual XLCellValue get_BaseItemValue();
    [CompilerGeneratedAttribute]
public sealed virtual void set_BaseItemValue(XLCellValue value);
    [CompilerGeneratedAttribute]
public sealed virtual XLPivotCalculation get_Calculation();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Calculation(XLPivotCalculation value);
    [CompilerGeneratedAttribute]
public sealed virtual XLPivotCalculationItem get_CalculationItem();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CalculationItem(XLPivotCalculationItem value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_CustomName();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CustomName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual IXLPivotValueFormat get_NumberFormat();
    [CompilerGeneratedAttribute]
private void set_NumberFormat(IXLPivotValueFormat value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_SourceName();
    [CompilerGeneratedAttribute]
private void set_SourceName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual XLPivotSummary get_SummaryFormula();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SummaryFormula(XLPivotSummary value);
    public sealed virtual IXLPivotValue SetBaseFieldName(string value);
    public sealed virtual IXLPivotValue SetBaseItemValue(XLCellValue value);
    public sealed virtual IXLPivotValue SetCalculation(XLPivotCalculation value);
    public sealed virtual IXLPivotValue SetCalculationItem(XLPivotCalculationItem value);
    public IXLPivotValue SetCustomName(string value);
    public sealed virtual IXLPivotValue SetSummaryFormula(XLPivotSummary value);
    public sealed virtual IXLPivotValueCombination ShowAsDifferenceFrom(string fieldSourceName);
    public sealed virtual IXLPivotValue ShowAsIndex();
    public sealed virtual IXLPivotValue ShowAsNormal();
    public sealed virtual IXLPivotValueCombination ShowAsPercentageDifferenceFrom(string fieldSourceName);
    public sealed virtual IXLPivotValueCombination ShowAsPercentageFrom(string fieldSourceName);
    public sealed virtual IXLPivotValue ShowAsPercentageOfColumn();
    public sealed virtual IXLPivotValue ShowAsPercentageOfRow();
    public sealed virtual IXLPivotValue ShowAsPercentageOfTotal();
    public sealed virtual IXLPivotValue ShowAsRunningTotalIn(string fieldSourceName);
}
internal class ClosedXML.Excel.XLPivotValueCombination : object {
    private IXLPivotValue _pivotValue;
    public XLPivotValueCombination(IXLPivotValue pivotValue);
    public sealed virtual IXLPivotValue And(XLCellValue item);
    public sealed virtual IXLPivotValue AndNext();
    public sealed virtual IXLPivotValue AndPrevious();
}
internal class ClosedXML.Excel.XLPivotValueFormat : object {
    private XLPivotValue _pivotValue;
    private int _numberFormatId;
    private string _format;
    public int NumberFormatId { get; public set; }
    public string Format { get; public set; }
    public XLPivotValueFormat(XLPivotValue pivotValue);
    public sealed virtual int get_NumberFormatId();
    public sealed virtual void set_NumberFormatId(int value);
    public sealed virtual string get_Format();
    public sealed virtual void set_Format(string value);
    public sealed virtual IXLPivotValue SetNumberFormatId(int value);
    public sealed virtual IXLPivotValue SetFormat(string value);
    public sealed virtual bool Equals(IXLNumberFormatBase other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal class ClosedXML.Excel.XLPivotValues : object {
    private XLPivotTable _pivotTable;
    private Dictionary`2<string, IXLPivotValue> _pivotValues;
    internal XLPivotValues(XLPivotTable pivotTable);
    public sealed virtual IXLPivotValue Add(string sourceName);
    public sealed virtual IXLPivotValue Add(string sourceName, string customName);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(string customName);
    public sealed virtual bool Contains(IXLPivotValue pivotValue);
    public sealed virtual IXLPivotValue Get(string customName);
    public sealed virtual IXLPivotValue Get(int index);
    public sealed virtual IEnumerator`1<IXLPivotValue> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual int IndexOf(string customName);
    public sealed virtual int IndexOf(IXLPivotValue pivotValue);
    public sealed virtual void Remove(string customName);
}
internal class ClosedXML.Excel.XLPivotValueStyleFormat : XLPivotStyleFormat {
    [NullableContextAttribute("2")]
public XLPivotValueStyleFormat(IXLPivotField field, IXLStyle style);
    [NullableContextAttribute("1")]
public sealed virtual IXLPivotValueStyleFormat AndWith(IXLPivotField field);
    [NullableContextAttribute("1")]
public sealed virtual IXLPivotValueStyleFormat AndWith(IXLPivotField field, Predicate`1<XLCellValue> predicate);
    [NullableContextAttribute("1")]
public sealed virtual IXLPivotValueStyleFormat ForValueField(IXLPivotValue valueField);
}
public static class ClosedXML.Excel.XLPredefinedFormat : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static IDictionary`2<int, string> _formatCodes;
    public static int General { get; }
    [NullableAttribute("1")]
internal static IDictionary`2<int, string> FormatCodes { get; }
    public static int get_General();
    [NullableContextAttribute("1")]
internal static IDictionary`2<int, string> get_FormatCodes();
}
internal class ClosedXML.Excel.XLPrintAreas : object {
    private List`1<IXLRange> ranges;
    private XLWorksheet worksheet;
    public XLPrintAreas(XLWorksheet worksheet);
    public XLPrintAreas(XLPrintAreas defaultPrintAreas, XLWorksheet worksheet);
    public sealed virtual void Clear();
    public sealed virtual void Add(int firstCellRow, int firstCellColumn, int lastCellRow, int lastCellColumn);
    public sealed virtual void Add(string rangeAddress);
    public sealed virtual void Add(string firstCellAddress, string lastCellAddress);
    public sealed virtual void Add(IXLAddress firstCellAddress, IXLAddress lastCellAddress);
    public sealed virtual IEnumerator`1<IXLRange> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public enum ClosedXML.Excel.XLPrintErrorValues : Enum {
    public int value__;
    public static XLPrintErrorValues Blank;
    public static XLPrintErrorValues Dash;
    public static XLPrintErrorValues Displayed;
    public static XLPrintErrorValues NA;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class ClosedXML.Excel.XLProtection : object {
    private XLStyle _style;
    private XLProtectionValue _value;
    internal XLProtectionKey Key { get; private set; }
    public bool Locked { get; public set; }
    public bool Hidden { get; public set; }
    public XLProtection(XLStyle style, XLProtectionValue value);
    [NullableContextAttribute("2")]
public XLProtection(XLStyle style, XLProtectionKey key);
    [NullableContextAttribute("2")]
public XLProtection(XLStyle style, IXLProtection d);
    [NullableContextAttribute("2")]
internal static XLProtectionKey GenerateKey(IXLProtection defaultProtection);
    internal XLProtectionKey get_Key();
    private void set_Key(XLProtectionKey value);
    public sealed virtual bool get_Locked();
    public sealed virtual void set_Locked(bool value);
    public sealed virtual bool get_Hidden();
    public sealed virtual void set_Hidden(bool value);
    public sealed virtual IXLStyle SetLocked();
    public sealed virtual IXLStyle SetLocked(bool value);
    public sealed virtual IXLStyle SetHidden();
    public sealed virtual IXLStyle SetHidden(bool value);
    private void Modify(Func`2<XLProtectionKey, XLProtectionKey> modification);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(IXLProtection other);
    public virtual string ToString();
    public virtual int GetHashCode();
}
public static class ClosedXML.Excel.XLProtectionAlgorithm : object {
    public static Algorithm DefaultProtectionAlgorithm;
}
internal class ClosedXML.Excel.XLProtectionKey : ValueType {
    [CompilerGeneratedAttribute]
private bool <Locked>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Hidden>k__BackingField;
    public bool Locked { get; public set; }
    public bool Hidden { get; public set; }
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_Locked();
    [CompilerGeneratedAttribute]
public void set_Locked(bool value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_Hidden();
    [CompilerGeneratedAttribute]
public void set_Hidden(bool value);
    public virtual int GetHashCode();
    public sealed virtual bool Equals(XLProtectionKey other);
    public virtual bool Equals(object obj);
    public virtual string ToString();
    public static bool op_Equality(XLProtectionKey left, XLProtectionKey right);
    public static bool op_Inequality(XLProtectionKey left, XLProtectionKey right);
}
internal class ClosedXML.Excel.XLProtectionValue : object {
    private static XLProtectionRepository Repository;
    private static XLProtectionKey DefaultKey;
    internal static XLProtectionValue Default;
    [CompilerGeneratedAttribute]
private XLProtectionKey <Key>k__BackingField;
    public XLProtectionKey Key { get; private set; }
    public bool Locked { get; }
    public bool Hidden { get; }
    private XLProtectionValue(XLProtectionKey key);
    private static XLProtectionValue();
    public static XLProtectionValue FromKey(XLProtectionKey& key);
    [CompilerGeneratedAttribute]
public XLProtectionKey get_Key();
    [CompilerGeneratedAttribute]
private void set_Key(XLProtectionKey value);
    public bool get_Locked();
    public bool get_Hidden();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal class ClosedXML.Excel.XLRange : XLRangeBase {
    public XLRangeType RangeType { get; }
    public XLRange(XLRangeParameters xlRangeParameters);
    public virtual XLRangeType get_RangeType();
    private sealed virtual override IXLRangeRow ClosedXML.Excel.IXLRange.Row(int row);
    private sealed virtual override IXLRangeColumn ClosedXML.Excel.IXLRange.Column(int columnNumber);
    private sealed virtual override IXLRangeColumn ClosedXML.Excel.IXLRange.Column(string columnLetter);
    public virtual IXLRangeColumns Columns(Func`2<IXLRangeColumn, bool> predicate);
    public virtual IXLRangeColumns Columns(int firstColumn, int lastColumn);
    public virtual IXLRangeColumns Columns(string firstColumn, string lastColumn);
    public virtual IXLRangeColumns Columns(string columns);
    private sealed virtual override IXLCell ClosedXML.Excel.IXLRange.Cell(int row, int column);
    private sealed virtual override IXLCell ClosedXML.Excel.IXLRange.Cell(string cellAddressInRange);
    private sealed virtual override IXLCell ClosedXML.Excel.IXLRange.Cell(int row, string column);
    private sealed virtual override IXLCell ClosedXML.Excel.IXLRange.Cell(IXLAddress cellAddressInRange);
    private sealed virtual override IXLRange ClosedXML.Excel.IXLRange.Range(IXLRangeAddress rangeAddress);
    private sealed virtual override IXLRange ClosedXML.Excel.IXLRange.Range(string rangeAddress);
    private sealed virtual override IXLRange ClosedXML.Excel.IXLRange.Range(IXLCell firstCell, IXLCell lastCell);
    private sealed virtual override IXLRange ClosedXML.Excel.IXLRange.Range(string firstCellAddress, string lastCellAddress);
    private sealed virtual override IXLRange ClosedXML.Excel.IXLRange.Range(IXLAddress firstCellAddress, IXLAddress lastCellAddress);
    private sealed virtual override IXLRange ClosedXML.Excel.IXLRange.Range(int firstCellRow, int firstCellColumn, int lastCellRow, int lastCellColumn);
    private sealed virtual override IXLRanges ClosedXML.Excel.IXLRange.Ranges(string ranges);
    public sealed virtual IXLRangeRows Rows(Func`2<IXLRangeRow, bool> predicate);
    public sealed virtual IXLRangeRows Rows(int firstRow, int lastRow);
    public sealed virtual IXLRangeRows Rows(string rows);
    public sealed virtual void Transpose(XLTransposeOptions transposeOption);
    public sealed virtual IXLTable AsTable();
    public sealed virtual IXLTable AsTable(string name);
    private sealed virtual override IXLTable ClosedXML.Excel.IXLRange.CreateTable();
    public XLTable CreateTable();
    private sealed virtual override IXLTable ClosedXML.Excel.IXLRange.CreateTable(string name);
    public XLTable CreateTable(string name);
    public IXLTable CreateTable(string name, bool setAutofilter);
    public sealed virtual IXLRange CopyTo(IXLCell target);
    public sealed virtual IXLRange CopyTo(IXLRangeBase target);
    public sealed virtual IXLRange Sort();
    public sealed virtual IXLRange Sort(string columnsToSortBy, XLSortOrder sortOrder, bool matchCase, bool ignoreBlanks);
    public sealed virtual IXLRange Sort(int columnToSortBy, XLSortOrder sortOrder, bool matchCase, bool ignoreBlanks);
    public sealed virtual IXLRange SortLeftToRight(XLSortOrder sortOrder, bool matchCase, bool ignoreBlanks);
    internal virtual void WorksheetRangeShiftedColumns(XLRange range, int columnsShifted);
    internal virtual void WorksheetRangeShiftedRows(XLRange range, int rowsShifted);
    private sealed virtual override IXLRangeColumn ClosedXML.Excel.IXLRange.FirstColumn(Func`2<IXLRangeColumn, bool> predicate);
    internal XLRangeColumn FirstColumn(Func`2<IXLRangeColumn, bool> predicate);
    private sealed virtual override IXLRangeColumn ClosedXML.Excel.IXLRange.LastColumn(Func`2<IXLRangeColumn, bool> predicate);
    internal XLRangeColumn LastColumn(Func`2<IXLRangeColumn, bool> predicate);
    private sealed virtual override IXLRangeColumn ClosedXML.Excel.IXLRange.FirstColumnUsed(Func`2<IXLRangeColumn, bool> predicate);
    internal XLRangeColumn FirstColumnUsed(Func`2<IXLRangeColumn, bool> predicate);
    private sealed virtual override IXLRangeColumn ClosedXML.Excel.IXLRange.FirstColumnUsed(XLCellsUsedOptions options, Func`2<IXLRangeColumn, bool> predicate);
    internal XLRangeColumn FirstColumnUsed(XLCellsUsedOptions options, Func`2<IXLRangeColumn, bool> predicate);
    private sealed virtual override IXLRangeColumn ClosedXML.Excel.IXLRange.LastColumnUsed(Func`2<IXLRangeColumn, bool> predicate);
    internal XLRangeColumn LastColumnUsed(Func`2<IXLRangeColumn, bool> predicate);
    private sealed virtual override IXLRangeColumn ClosedXML.Excel.IXLRange.LastColumnUsed(XLCellsUsedOptions options, Func`2<IXLRangeColumn, bool> predicate);
    internal XLRangeColumn LastColumnUsed(XLCellsUsedOptions options, Func`2<IXLRangeColumn, bool> predicate);
    private sealed virtual override IXLRangeRow ClosedXML.Excel.IXLRange.FirstRow(Func`2<IXLRangeRow, bool> predicate);
    public XLRangeRow FirstRow(Func`2<IXLRangeRow, bool> predicate);
    private sealed virtual override IXLRangeRow ClosedXML.Excel.IXLRange.LastRow(Func`2<IXLRangeRow, bool> predicate);
    public XLRangeRow LastRow(Func`2<IXLRangeRow, bool> predicate);
    private sealed virtual override IXLRangeRow ClosedXML.Excel.IXLRange.FirstRowUsed(Func`2<IXLRangeRow, bool> predicate);
    internal XLRangeRow FirstRowUsed(Func`2<IXLRangeRow, bool> predicate);
    private sealed virtual override IXLRangeRow ClosedXML.Excel.IXLRange.FirstRowUsed(XLCellsUsedOptions options, Func`2<IXLRangeRow, bool> predicate);
    internal XLRangeRow FirstRowUsed(XLCellsUsedOptions options, Func`2<IXLRangeRow, bool> predicate);
    private sealed virtual override IXLRangeRow ClosedXML.Excel.IXLRange.LastRowUsed(Func`2<IXLRangeRow, bool> predicate);
    internal XLRangeRow LastRowUsed(Func`2<IXLRangeRow, bool> predicate);
    private sealed virtual override IXLRangeRow ClosedXML.Excel.IXLRange.LastRowUsed(XLCellsUsedOptions options, Func`2<IXLRangeRow, bool> predicate);
    internal XLRangeRow LastRowUsed(XLCellsUsedOptions options, Func`2<IXLRangeRow, bool> predicate);
    private sealed virtual override IXLRangeRows ClosedXML.Excel.IXLRange.RowsUsed(XLCellsUsedOptions options, Func`2<IXLRangeRow, bool> predicate);
    internal XLRangeRows RowsUsed(XLCellsUsedOptions options, Func`2<IXLRangeRow, bool> predicate);
    private sealed virtual override IXLRangeRows ClosedXML.Excel.IXLRange.RowsUsed(Func`2<IXLRangeRow, bool> predicate);
    internal XLRangeRows RowsUsed(Func`2<IXLRangeRow, bool> predicate);
    private sealed virtual override IXLRangeColumns ClosedXML.Excel.IXLRange.ColumnsUsed(XLCellsUsedOptions options, Func`2<IXLRangeColumn, bool> predicate);
    internal virtual XLRangeColumns ColumnsUsed(XLCellsUsedOptions options, Func`2<IXLRangeColumn, bool> predicate);
    private sealed virtual override IXLRangeColumns ClosedXML.Excel.IXLRange.ColumnsUsed(Func`2<IXLRangeColumn, bool> predicate);
    internal virtual XLRangeColumns ColumnsUsed(Func`2<IXLRangeColumn, bool> predicate);
    public XLRangeRow Row(int row);
    public virtual XLRangeColumn Column(int columnNumber);
    public virtual XLRangeColumn Column(string columnLetter);
    [IteratorStateMachineAttribute("ClosedXML.Excel.XLRange/<Split>d__75")]
internal IEnumerable`1<XLRange> Split(IXLRangeAddress anotherRange, bool includeIntersection);
    private void TransposeRange(int squareSide);
    private void TransposeMerged(int squareSide);
    private void MoveOrClearForTranspose(XLTransposeOptions transposeOption, int rowCount, int columnCount);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual IXLRange Clear(XLClearOptions clearOptions);
    public sealed virtual IXLRangeColumn FindColumn(Func`2<IXLRangeColumn, bool> predicate);
    public sealed virtual IXLRangeRow FindRow(Func`2<IXLRangeRow, bool> predicate);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
internal class ClosedXML.Excel.XLRangeAddress : ValueType {
    public static XLRangeAddress Invalid;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private XLWorksheet <Worksheet>k__BackingField;
    [CompilerGeneratedAttribute]
private XLAddress <FirstAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private XLAddress <LastAddress>k__BackingField;
    [NullableAttribute("2")]
public XLWorksheet Worksheet { get; }
    public XLAddress FirstAddress { get; }
    public XLAddress LastAddress { get; }
    [NullableAttribute("2")]
private IXLWorksheet ClosedXML.Excel.IXLRangeAddress.Worksheet { get; }
    private IXLAddress ClosedXML.Excel.IXLRangeAddress.FirstAddress { get; }
    private IXLAddress ClosedXML.Excel.IXLRangeAddress.LastAddress { get; }
    public bool IsValid { get; }
    public int ColumnSpan { get; }
    public int NumberOfCells { get; }
    public int RowSpan { get; }
    private bool WorksheetIsDeleted { get; }
    public bool IsNormalized { get; }
    public XLRangeAddress(XLAddress firstAddress, XLAddress lastAddress);
    public XLRangeAddress(XLWorksheet worksheet, string rangeAddress);
    private static XLRangeAddress();
    public static XLRangeAddress EntireColumn(XLWorksheet worksheet, int column);
    public static XLRangeAddress EntireRow(XLWorksheet worksheet, int row);
    internal static XLRangeAddress FromSheetRange(XLWorksheet worksheet, XLSheetRange range);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public XLWorksheet get_Worksheet();
    [CompilerGeneratedAttribute]
public XLAddress get_FirstAddress();
    [CompilerGeneratedAttribute]
public XLAddress get_LastAddress();
    [NullableContextAttribute("2")]
private sealed virtual override IXLWorksheet ClosedXML.Excel.IXLRangeAddress.get_Worksheet();
    [DebuggerStepThroughAttribute]
private sealed virtual override IXLAddress ClosedXML.Excel.IXLRangeAddress.get_FirstAddress();
    [DebuggerStepThroughAttribute]
private sealed virtual override IXLAddress ClosedXML.Excel.IXLRangeAddress.get_LastAddress();
    public sealed virtual bool get_IsValid();
    public sealed virtual int get_ColumnSpan();
    public sealed virtual int get_NumberOfCells();
    public sealed virtual int get_RowSpan();
    private bool get_WorksheetIsDeleted();
    public bool get_IsNormalized();
    public XLRangeAddress Normalize();
    public sealed virtual bool Intersects(IXLRangeAddress otherAddress);
    internal bool Intersects(XLRangeAddress& otherAddress);
    public sealed virtual bool Contains(IXLAddress address);
    public bool ContainsWhole(IXLRangeAddress range);
    internal IXLRangeAddress WithoutWorksheet();
    internal XLRangeAddress WithWorksheet(XLWorksheet worksheet);
    internal bool Contains(XLAddress& address);
    public sealed virtual string ToStringRelative();
    public sealed virtual string ToStringFixed();
    public sealed virtual string ToStringRelative(bool includeSheet);
    public sealed virtual string ToStringFixed(XLReferenceStyle referenceStyle);
    public sealed virtual string ToStringFixed(XLReferenceStyle referenceStyle, bool includeSheet);
    public virtual string ToString();
    public sealed virtual string ToString(XLReferenceStyle referenceStyle);
    public sealed virtual string ToString(XLReferenceStyle referenceStyle, bool includeSheet);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual bool Equals(XLRangeAddress other);
    public bool IsSingleCell();
    public sealed virtual bool IsEntireColumn();
    public sealed virtual bool IsEntireRow();
    public sealed virtual bool IsEntireSheet();
    public sealed virtual IXLRangeAddress Relative(IXLRangeAddress sourceRangeAddress, IXLRangeAddress targetRangeAddress);
    internal XLRangeAddress Relative(XLRangeAddress& sourceRangeAddress, XLRangeAddress& targetRangeAddress);
    public sealed virtual IXLRangeAddress Intersection(IXLRangeAddress otherRangeAddress);
    internal XLRangeAddress Intersection(XLRangeAddress& otherRangeAddress);
    [NullableContextAttribute("2")]
public sealed virtual IXLRange AsRange();
    public static bool op_Equality(XLRangeAddress left, XLRangeAddress right);
    public static bool op_Inequality(XLRangeAddress left, XLRangeAddress right);
}
internal abstract class ClosedXML.Excel.XLRangeBase : XLStylizedBase {
    private XLSortElements _sortRows;
    private XLSortElements _sortColumns;
    private static int IdCounter;
    private int Id;
    private XLRangeAddress _rangeAddress;
    public XLRangeAddress RangeAddress { get; protected set; }
    public XLWorksheet Worksheet { get; }
    private IXLRangeAddress ClosedXML.Excel.IXLAddressable.RangeAddress { get; }
    private IXLWorksheet ClosedXML.Excel.IXLRangeBase.Worksheet { get; }
    unknown string FormulaA1 {public set; }
    unknown string FormulaArrayA1 {public set; }
    unknown string FormulaR1C1 {public set; }
    unknown bool ShareString {public set; }
    public IXLHyperlinks Hyperlinks { get; }
    unknown XLCellValue Value {public set; }
    public IXLRanges RangesUsed { get; }
    protected IEnumerable`1<XLStylizedBase> Children { get; }
    public IEnumerable`1<IXLStyle> Styles { get; }
    public XLRangeType RangeType { get; }
    public IXLSortElements SortRows { get; }
    public IXLSortElements SortColumns { get; }
    protected XLRangeBase(XLRangeAddress rangeAddress, XLStyleValue styleValue);
    protected IXLStyle GetStyle();
    protected virtual void OnRangeAddressChanged(XLRangeAddress oldAddress, XLRangeAddress newAddress);
    public XLRangeAddress get_RangeAddress();
    protected void set_RangeAddress(XLRangeAddress value);
    public XLWorksheet get_Worksheet();
    public sealed virtual IXLDataValidation CreateDataValidation();
    public sealed virtual IXLDataValidation GetDataValidation();
    private sealed virtual override IXLRangeAddress ClosedXML.Excel.IXLAddressable.get_RangeAddress();
    private sealed virtual override IXLWorksheet ClosedXML.Excel.IXLRangeBase.get_Worksheet();
    public sealed virtual void set_FormulaA1(string value);
    public sealed virtual void set_FormulaArrayA1(string value);
    public sealed virtual void set_FormulaR1C1(string value);
    public sealed virtual void set_ShareString(bool value);
    public sealed virtual IXLHyperlinks get_Hyperlinks();
    public sealed virtual void set_Value(XLCellValue value);
    public virtual IXLRanges get_RangesUsed();
    [IteratorStateMachineAttribute("ClosedXML.Excel.XLRangeBase/<get_Children>d__34")]
protected virtual IEnumerable`1<XLStylizedBase> get_Children();
    [IteratorStateMachineAttribute("ClosedXML.Excel.XLRangeBase/<get_Styles>d__36")]
public virtual IEnumerable`1<IXLStyle> get_Styles();
    private sealed virtual override IXLCells ClosedXML.Excel.IXLRangeBase.Cells(string cells);
    private sealed virtual override IXLCells ClosedXML.Excel.IXLRangeBase.Cells(bool usedCellsOnly);
    private sealed virtual override IXLCells ClosedXML.Excel.IXLRangeBase.Cells(bool usedCellsOnly, XLCellsUsedOptions options);
    private sealed virtual override IXLCells ClosedXML.Excel.IXLRangeBase.CellsUsed();
    private sealed virtual override IXLCell ClosedXML.Excel.IXLRangeBase.FirstCell();
    private sealed virtual override IXLCell ClosedXML.Excel.IXLRangeBase.LastCell();
    private sealed virtual override IXLCell ClosedXML.Excel.IXLRangeBase.FirstCellUsed();
    private sealed virtual override IXLCell ClosedXML.Excel.IXLRangeBase.FirstCellUsed(XLCellsUsedOptions options);
    private sealed virtual override IXLCell ClosedXML.Excel.IXLRangeBase.FirstCellUsed(Func`2<IXLCell, bool> predicate);
    private sealed virtual override IXLCell ClosedXML.Excel.IXLRangeBase.FirstCellUsed(XLCellsUsedOptions options, Func`2<IXLCell, bool> predicate);
    private sealed virtual override IXLCell ClosedXML.Excel.IXLRangeBase.LastCellUsed();
    private sealed virtual override IXLCell ClosedXML.Excel.IXLRangeBase.LastCellUsed(XLCellsUsedOptions options);
    private sealed virtual override IXLCell ClosedXML.Excel.IXLRangeBase.LastCellUsed(Func`2<IXLCell, bool> predicate);
    private sealed virtual override IXLCell ClosedXML.Excel.IXLRangeBase.LastCellUsed(XLCellsUsedOptions options, Func`2<IXLCell, bool> predicate);
    public virtual IXLCells Cells();
    public virtual XLCells Cells(bool usedCellsOnly);
    public XLCells Cells(bool usedCellsOnly, XLCellsUsedOptions options);
    public virtual XLCells Cells(string cells);
    public sealed virtual IXLCells Cells(Func`2<IXLCell, bool> predicate);
    public XLCells CellsUsed();
    [IteratorStateMachineAttribute("ClosedXML.Excel.XLRangeBase/<CellValues>d__57")]
public IEnumerable`1<XLCellValue> CellValues();
    public sealed virtual IXLRange Merge();
    public sealed virtual IXLRange Merge(bool checkIntersect);
    public sealed virtual IXLRange Unmerge();
    public sealed virtual IXLRangeBase Clear(XLClearOptions clearOptions);
    public sealed virtual IXLRangeBase Relative(IXLRangeBase sourceBaseRange, IXLRangeBase targetBaseRange);
    internal void RemoveConditionalFormatting();
    internal void RemoveSparklines();
    public sealed virtual void DeleteComments();
    public sealed virtual bool Contains(string rangeAddress);
    public sealed virtual bool Contains(IXLRangeBase range);
    public sealed virtual bool Intersects(string rangeAddress);
    public sealed virtual bool Intersects(IXLRangeBase range);
    private sealed virtual override IXLRange ClosedXML.Excel.IXLRangeBase.AsRange();
    public virtual XLRange AsRange();
    public sealed virtual IXLRange AddToNamed(string rangeName);
    public sealed virtual IXLRange AddToNamed(string rangeName, XLScope scope);
    public sealed virtual IXLRange AddToNamed(string rangeName, XLScope scope, string comment);
    public sealed virtual IXLRangeBase SetValue(XLCellValue value);
    public sealed virtual bool IsMerged();
    public virtual bool IsEmpty();
    public virtual bool IsEmpty(XLCellsUsedOptions options);
    public virtual bool IsEntireRow();
    public virtual bool IsEntireColumn();
    public sealed virtual bool IsEntireSheet();
    public sealed virtual IXLCells Search(string searchText, CompareOptions compareOptions, bool searchFormulae);
    internal XLCell FirstCell();
    internal XLCell LastCell();
    internal XLCell FirstCellUsed();
    internal XLCell FirstCellUsed(Func`2<IXLCell, bool> predicate);
    internal XLCell FirstCellUsed(XLCellsUsedOptions options, Func`2<IXLCell, bool> predicate);
    internal XLCell LastCellUsed();
    internal XLCell LastCellUsed(Func`2<IXLCell, bool> predicate);
    internal XLCell LastCellUsed(XLCellsUsedOptions options, Func`2<IXLCell, bool> predicate);
    public XLCell Cell(int row, int column);
    public virtual XLCell Cell(string cellAddressInRange);
    public XLCell Cell(int row, string column);
    public XLCell Cell(IXLAddress cellAddressInRange);
    public XLCell Cell(XLAddress& cellAddressInRange);
    public sealed virtual int RowCount();
    public int RowCount(XLCellsUsedOptions cellsUsedOptions);
    public sealed virtual int RowNumber();
    public sealed virtual int ColumnCount();
    public int ColumnCount(XLCellsUsedOptions cellsUsedOptions);
    public sealed virtual int ColumnNumber();
    public sealed virtual string ColumnLetter();
    public virtual XLRange Range(string rangeAddressStr);
    internal abstract virtual void WorksheetRangeShiftedColumns(XLRange range, int columnsShifted);
    internal abstract virtual void WorksheetRangeShiftedRows(XLRange range, int rowsShifted);
    public abstract virtual XLRangeType get_RangeType();
    public XLRange Range(IXLCell firstCell, IXLCell lastCell);
    private XLRange GetRange(XLAddress newFirstCellAddress, XLAddress newLastCellAddress);
    public XLRange Range(string firstCellAddress, string lastCellAddress);
    public XLRange Range(int firstCellRow, int firstCellColumn, int lastCellRow, int lastCellColumn);
    public XLRange Range(IXLAddress firstCellAddress, IXLAddress lastCellAddress);
    public XLRange Range(IXLRangeAddress rangeAddress);
    internal XLRange Range(XLRangeAddress& rangeAddress);
    public virtual XLRanges Ranges(string ranges);
    public IXLRanges Ranges(String[] ranges);
    protected string FixColumnAddress(string address);
    protected string FixRowAddress(string address);
    public sealed virtual IXLCells CellsUsed(XLCellsUsedOptions options);
    public sealed virtual IXLCells CellsUsed(Func`2<IXLCell, bool> predicate);
    public sealed virtual IXLCells CellsUsed(XLCellsUsedOptions options, Func`2<IXLCell, bool> predicate);
    public sealed virtual IXLRangeColumns InsertColumnsAfter(int numberOfColumns);
    public sealed virtual IXLRangeColumns InsertColumnsAfter(int numberOfColumns, bool expandRange);
    public IXLRangeColumns InsertColumnsAfter(bool onlyUsedCells, int numberOfColumns, bool formatFromLeft);
    public void InsertColumnsAfterVoid(bool onlyUsedCells, int numberOfColumns, bool formatFromLeft);
    private IXLRangeColumns InsertColumnsAfterInternal(bool onlyUsedCells, int numberOfColumns, bool formatFromLeft, bool nullReturn);
    public sealed virtual IXLRangeColumns InsertColumnsBefore(int numberOfColumns);
    public sealed virtual IXLRangeColumns InsertColumnsBefore(int numberOfColumns, bool expandRange);
    public IXLRangeColumns InsertColumnsBefore(bool onlyUsedCells, int numberOfColumns, bool formatFromLeft);
    public void InsertColumnsBeforeVoid(bool onlyUsedCells, int numberOfColumns, bool formatFromLeft);
    private IXLRangeColumns InsertColumnsBeforeInternal(bool onlyUsedCells, int numberOfColumns, bool formatFromLeft, bool nullReturn);
    public sealed virtual IXLRangeRows InsertRowsBelow(int numberOfRows);
    public sealed virtual IXLRangeRows InsertRowsBelow(int numberOfRows, bool expandRange);
    public IXLRangeRows InsertRowsBelow(bool onlyUsedCells, int numberOfRows, bool formatFromAbove);
    public void InsertRowsBelowVoid(bool onlyUsedCells, int numberOfRows, bool formatFromAbove);
    private IXLRangeRows InsertRowsBelowInternal(bool onlyUsedCells, int numberOfRows, bool formatFromAbove, bool nullReturn);
    public sealed virtual IXLRangeRows InsertRowsAbove(int numberOfRows);
    public sealed virtual IXLRangeRows InsertRowsAbove(int numberOfRows, bool expandRange);
    public void InsertRowsAboveVoid(bool onlyUsedCells, int numberOfRows, bool formatFromAbove);
    public IXLRangeRows InsertRowsAbove(bool onlyUsedCells, int numberOfRows, bool formatFromAbove);
    private IXLRangeRows InsertRowsAboveInternal(bool onlyUsedCells, int numberOfRows, bool formatFromAbove, bool nullReturn);
    private void ClearMerged();
    public sealed virtual bool Contains(IXLCell cell);
    public bool Contains(XLAddress first, XLAddress last);
    public bool Contains(XLAddress address);
    public sealed virtual void Delete(XLShiftDeletedCells shiftDeleteCells);
    public virtual string ToString();
    protected IXLRangeAddress ShiftColumns(IXLRangeAddress thisRangeAddress, XLRange shiftedRange, int columnsShifted);
    protected IXLRangeAddress ShiftRows(IXLRangeAddress thisRangeAddress, XLRange shiftedRange, int rowsShifted);
    public sealed virtual IXLRange RangeUsed();
    public sealed virtual IXLRange RangeUsed(XLCellsUsedOptions options);
    public virtual void CopyTo(IXLRangeBase target);
    internal void CopyTo(XLCell target);
    private sealed virtual override IXLPivotTable ClosedXML.Excel.IXLRangeBase.CreatePivotTable(IXLCell targetCell, string name);
    public XLPivotTable CreatePivotTable(IXLCell targetCell, string name);
    public virtual IXLAutoFilter SetAutoFilter();
    public sealed virtual IXLAutoFilter SetAutoFilter(bool value);
    public sealed virtual IXLSortElements get_SortRows();
    public sealed virtual IXLSortElements get_SortColumns();
    private string DefaultSortString();
    public IXLRangeBase Sort();
    public IXLRangeBase Sort(string columnsToSortBy, XLSortOrder sortOrder, bool matchCase, bool ignoreBlanks);
    public IXLRangeBase Sort(int columnToSortBy, XLSortOrder sortOrder, bool matchCase, bool ignoreBlanks);
    public IXLRangeBase SortLeftToRight(XLSortOrder sortOrder, bool matchCase, bool ignoreBlanks);
    private void SortRangeRows();
    private void SwapRows(int row1, int row2);
    private int SortRangeRows(int begPoint, int endPoint);
    private void SortingRangeRows(int beg, int end);
    private void SortRangeColumns();
    private void SwapColumns(int column1, int column2);
    private int SortRangeColumns(int begPoint, int endPoint);
    private void SortingRangeColumns(int beg, int end);
    public XLRangeColumn ColumnQuick(int column);
    public XLRangeRow RowQuick(int row);
    [ObsoleteAttribute("Use GetDataValidation() to access the existing rule, or CreateDataValidation() to create a new one.")]
public sealed virtual IXLDataValidation SetDataValidation();
    public sealed virtual IXLConditionalFormat AddConditionalFormat();
    internal IXLConditionalFormat AddConditionalFormat(IXLConditionalFormat source);
    public sealed virtual void Select();
    public sealed virtual IXLRangeBase Grow();
    public sealed virtual IXLRangeBase Grow(int growCount);
    public sealed virtual IXLRangeBase Shrink();
    public sealed virtual IXLRangeBase Shrink(int shrinkCount);
    public sealed virtual IXLRangeAddress Intersection(IXLRangeBase otherRange, Func`2<IXLCell, bool> thisRangePredicate, Func`2<IXLCell, bool> otherRangePredicate);
    public sealed virtual IXLCells SurroundingCells(Func`2<IXLCell, bool> predicate);
    public sealed virtual IXLCells Union(IXLRangeBase otherRange, Func`2<IXLCell, bool> thisRangePredicate, Func`2<IXLCell, bool> otherRangePredicate);
    public sealed virtual IXLCells Difference(IXLRangeBase otherRange, Func`2<IXLCell, bool> thisRangePredicate, Func`2<IXLCell, bool> otherRangePredicate);
    private IEnumerable`1<IXLCell> CellsUsedInternal(XLCellsUsedOptions options, Func`2<IXLRange, IXLCell> selector, Func`2<IXLCell, bool> predicate);
    [CompilerGeneratedAttribute]
private bool <set_FormulaArrayA1>b__22_0(IXLRange mr);
    [CompilerGeneratedAttribute]
private bool <set_FormulaArrayA1>b__22_1(IXLTable t);
    [CompilerGeneratedAttribute]
private bool <set_FormulaArrayA1>b__22_2(XLCell c);
    [CompilerGeneratedAttribute]
private bool <get_Hyperlinks>b__28_0(XLHyperlink hl);
    [CompilerGeneratedAttribute]
private bool <RemoveConditionalFormatting>b__63_0(IXLConditionalFormat x);
    [CompilerGeneratedAttribute]
private void <RemoveSparklines>b__64_0(IXLSparkline sl);
    [CompilerGeneratedAttribute]
private void <ClearMerged>b__142_0(IXLRange m);
    [CompilerGeneratedAttribute]
private void <Delete>b__146_0(IXLRange r);
    [CompilerGeneratedAttribute]
private bool <Delete>b__146_1(XLHyperlink hl);
    [CompilerGeneratedAttribute]
private void <Delete>b__146_2(XLHyperlink hl);
    [CompilerGeneratedAttribute]
private bool <SetDataValidation>b__177_0(IXLRange r);
    [CompilerGeneratedAttribute]
private IEnumerable`1<IXLRange> <CellsUsedInternal>b__189_1(IXLConditionalFormat cf);
}
internal class ClosedXML.Excel.XLRangeColumn : XLRangeBase {
    [CompilerGeneratedAttribute]
private IXLTable <Table>k__BackingField;
    public XLRangeType RangeType { get; }
    internal IXLTable Table { get; internal set; }
    public XLRangeColumn(XLRangeParameters rangeParameters);
    private sealed virtual override IXLCell ClosedXML.Excel.IXLRangeColumn.Cell(int rowNumber);
    private sealed virtual override IXLCells ClosedXML.Excel.IXLRangeColumn.Cells(string cellsInColumn);
    public virtual XLCells Cells(string cellsInColumn);
    public sealed virtual IXLCells Cells(int firstRow, int lastRow);
    public sealed virtual void Delete();
    internal void Delete(bool deleteTableField);
    public sealed virtual IXLCells InsertCellsAbove(int numberOfRows);
    public sealed virtual IXLCells InsertCellsAbove(int numberOfRows, bool expandRange);
    public sealed virtual IXLCells InsertCellsBelow(int numberOfRows);
    public sealed virtual IXLCells InsertCellsBelow(int numberOfRows, bool expandRange);
    public sealed virtual int CellCount();
    public sealed virtual IXLRangeColumn Sort(XLSortOrder sortOrder, bool matchCase, bool ignoreBlanks);
    public sealed virtual IXLRangeColumn CopyTo(IXLCell target);
    public sealed virtual IXLRangeColumn CopyTo(IXLRangeBase target);
    public sealed virtual IXLRangeColumn Column(int start, int end);
    public sealed virtual IXLRangeColumn Column(IXLCell start, IXLCell end);
    public sealed virtual IXLRangeColumns Columns(string columns);
    public sealed virtual IXLColumn WorksheetColumn();
    public virtual XLRangeType get_RangeType();
    public XLCell Cell(int row);
    internal virtual void WorksheetRangeShiftedColumns(XLRange range, int columnsShifted);
    internal virtual void WorksheetRangeShiftedRows(XLRange range, int rowsShifted);
    public XLRange Range(int firstRow, int lastRow);
    public virtual XLRange Range(string rangeAddressStr);
    public int CompareTo(XLRangeColumn otherColumn, IXLSortElements rowsToSort);
    private XLRangeColumn ColumnShift(int columnsToShift);
    private sealed virtual override IXLRangeColumn ClosedXML.Excel.IXLRangeColumn.ColumnLeft();
    private sealed virtual override IXLRangeColumn ClosedXML.Excel.IXLRangeColumn.ColumnLeft(int step);
    public XLRangeColumn ColumnLeft();
    public XLRangeColumn ColumnLeft(int step);
    private sealed virtual override IXLRangeColumn ClosedXML.Excel.IXLRangeColumn.ColumnRight();
    private sealed virtual override IXLRangeColumn ClosedXML.Excel.IXLRangeColumn.ColumnRight(int step);
    public XLRangeColumn ColumnRight();
    public XLRangeColumn ColumnRight(int step);
    public sealed virtual IXLTable AsTable();
    public sealed virtual IXLTable AsTable(string name);
    public sealed virtual IXLTable CreateTable();
    public sealed virtual IXLTable CreateTable(string name);
    public sealed virtual IXLRangeColumn Clear(XLClearOptions clearOptions);
    public sealed virtual IXLRangeColumn ColumnUsed(XLCellsUsedOptions options);
    [CompilerGeneratedAttribute]
internal IXLTable get_Table();
    [CompilerGeneratedAttribute]
internal void set_Table(IXLTable value);
    public bool IsTableColumn();
}
internal class ClosedXML.Excel.XLRangeColumns : XLStylizedBase {
    private List`1<XLRangeColumn> _ranges;
    public IEnumerable`1<IXLStyle> Styles { get; }
    protected IEnumerable`1<XLStylizedBase> Children { get; }
    public IXLRanges RangesUsed { get; }
    public sealed virtual IXLRangeColumns Clear(XLClearOptions clearOptions);
    public sealed virtual void Delete();
    public sealed virtual void Add(IXLRangeColumn range);
    public sealed virtual IEnumerator`1<IXLRangeColumn> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual IXLCells Cells();
    public sealed virtual IXLCells CellsUsed();
    public sealed virtual IXLCells CellsUsed(XLCellsUsedOptions options);
    [IteratorStateMachineAttribute("ClosedXML.Excel.XLRangeColumns/<get_Styles>d__11")]
public virtual IEnumerable`1<IXLStyle> get_Styles();
    [IteratorStateMachineAttribute("ClosedXML.Excel.XLRangeColumns/<get_Children>d__13")]
protected virtual IEnumerable`1<XLStylizedBase> get_Children();
    public virtual IXLRanges get_RangesUsed();
    public sealed virtual void Select();
}
internal class ClosedXML.Excel.XLRangeConsolidationEngine : object {
    private IXLRanges _allRanges;
    public XLRangeConsolidationEngine(IXLRanges ranges);
    public IXLRanges Consolidate();
}
internal class ClosedXML.Excel.XLRangeFactory : object {
    [CompilerGeneratedAttribute]
private XLWorksheet <Worksheet>k__BackingField;
    public XLWorksheet Worksheet { get; private set; }
    public XLRangeFactory(XLWorksheet worksheet);
    [CompilerGeneratedAttribute]
public XLWorksheet get_Worksheet();
    [CompilerGeneratedAttribute]
private void set_Worksheet(XLWorksheet value);
    public XLRangeBase Create(XLRangeKey key);
    public XLRange CreateRange(XLRangeAddress rangeAddress);
    public XLColumn CreateColumn(int columnNumber);
    public XLRow CreateRow(int rowNumber);
    public XLRangeColumn CreateRangeColumn(XLRangeAddress rangeAddress);
    public XLRangeRow CreateRangeRow(XLRangeAddress rangeAddress);
    public XLTable CreateTable(XLRangeAddress rangeAddress);
}
[DebuggerDisplayAttribute("{RangeType} {RangeAddress}")]
internal class ClosedXML.Excel.XLRangeKey : ValueType {
    [CompilerGeneratedAttribute]
private XLRangeType <RangeType>k__BackingField;
    [CompilerGeneratedAttribute]
private XLRangeAddress <RangeAddress>k__BackingField;
    public XLRangeType RangeType { get; private set; }
    public XLRangeAddress RangeAddress { get; private set; }
    public XLRangeKey(XLRangeType rangeType, XLRangeAddress address);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public XLRangeType get_RangeType();
    [CompilerGeneratedAttribute]
private void set_RangeType(XLRangeType value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public XLRangeAddress get_RangeAddress();
    [CompilerGeneratedAttribute]
private void set_RangeAddress(XLRangeAddress value);
    public sealed virtual bool Equals(XLRangeKey other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(XLRangeKey left, XLRangeKey right);
    public static bool op_Inequality(XLRangeKey left, XLRangeKey right);
}
internal class ClosedXML.Excel.XLRangeParameters : object {
    [CompilerGeneratedAttribute]
private XLRangeAddress <RangeAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private IXLStyle <DefaultStyle>k__BackingField;
    public XLRangeAddress RangeAddress { get; private set; }
    public IXLStyle DefaultStyle { get; private set; }
    public XLRangeParameters(XLRangeAddress rangeAddress, IXLStyle defaultStyle);
    [CompilerGeneratedAttribute]
public XLRangeAddress get_RangeAddress();
    [CompilerGeneratedAttribute]
private void set_RangeAddress(XLRangeAddress value);
    [CompilerGeneratedAttribute]
public IXLStyle get_DefaultStyle();
    [CompilerGeneratedAttribute]
private void set_DefaultStyle(IXLStyle value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class ClosedXML.Excel.XLRangeRow : XLRangeBase {
    public XLRangeType RangeType { get; }
    public XLRangeRow(XLRangeParameters rangeParameters);
    private sealed virtual override IXLCells ClosedXML.Excel.IXLRangeRow.Cells(string cellsInRow);
    public sealed virtual IXLCell Cell(int column);
    public virtual XLCell Cell(string columnLetter);
    private sealed virtual override IXLCell ClosedXML.Excel.IXLRangeRow.Cell(string columnLetter);
    public sealed virtual void Delete();
    public sealed virtual IXLCells InsertCellsAfter(int numberOfColumns);
    public sealed virtual IXLCells InsertCellsAfter(int numberOfColumns, bool expandRange);
    public sealed virtual IXLCells InsertCellsBefore(int numberOfColumns);
    public sealed virtual IXLCells InsertCellsBefore(int numberOfColumns, bool expandRange);
    public virtual XLCells Cells(string cellsInRow);
    public sealed virtual IXLCells Cells(int firstColumn, int lastColumn);
    public sealed virtual IXLCells Cells(string firstColumn, string lastColumn);
    public sealed virtual int CellCount();
    public sealed virtual IXLRangeRow Sort();
    public sealed virtual IXLRangeRow SortLeftToRight(XLSortOrder sortOrder, bool matchCase, bool ignoreBlanks);
    public sealed virtual IXLRangeRow CopyTo(IXLCell target);
    public sealed virtual IXLRangeRow CopyTo(IXLRangeBase target);
    public sealed virtual IXLRangeRow Row(int start, int end);
    public sealed virtual IXLRangeRow Row(IXLCell start, IXLCell end);
    public sealed virtual IXLRangeRows Rows(string rows);
    public sealed virtual IXLRow WorksheetRow();
    public virtual XLRangeType get_RangeType();
    internal virtual void WorksheetRangeShiftedColumns(XLRange range, int columnsShifted);
    internal virtual void WorksheetRangeShiftedRows(XLRange range, int rowsShifted);
    public IXLRange Range(int firstColumn, int lastColumn);
    public virtual XLRange Range(string rangeAddressStr);
    public int CompareTo(XLRangeRow otherRow, IXLSortElements columnsToSort);
    private XLRangeRow RowShift(int rowsToShift);
    private sealed virtual override IXLRangeRow ClosedXML.Excel.IXLRangeRow.RowAbove();
    private sealed virtual override IXLRangeRow ClosedXML.Excel.IXLRangeRow.RowAbove(int step);
    public XLRangeRow RowAbove();
    public XLRangeRow RowAbove(int step);
    private sealed virtual override IXLRangeRow ClosedXML.Excel.IXLRangeRow.RowBelow();
    private sealed virtual override IXLRangeRow ClosedXML.Excel.IXLRangeRow.RowBelow(int step);
    public XLRangeRow RowBelow();
    public XLRangeRow RowBelow(int step);
    public sealed virtual IXLRangeRow Clear(XLClearOptions clearOptions);
    public sealed virtual IXLRangeRow RowUsed(XLCellsUsedOptions options);
}
internal class ClosedXML.Excel.XLRangeRows : XLStylizedBase {
    private List`1<XLRangeRow> _ranges;
    public IEnumerable`1<IXLStyle> Styles { get; }
    protected IEnumerable`1<XLStylizedBase> Children { get; }
    public IXLRanges RangesUsed { get; }
    public sealed virtual IXLRangeRows Clear(XLClearOptions clearOptions);
    public sealed virtual void Delete();
    public sealed virtual void Add(IXLRangeRow range);
    public sealed virtual IEnumerator`1<IXLRangeRow> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual IXLCells Cells();
    public sealed virtual IXLCells CellsUsed();
    public sealed virtual IXLCells CellsUsed(XLCellsUsedOptions options);
    [IteratorStateMachineAttribute("ClosedXML.Excel.XLRangeRows/<get_Styles>d__11")]
public virtual IEnumerable`1<IXLStyle> get_Styles();
    [IteratorStateMachineAttribute("ClosedXML.Excel.XLRangeRows/<get_Children>d__13")]
protected virtual IEnumerable`1<XLStylizedBase> get_Children();
    public virtual IXLRanges get_RangesUsed();
    public sealed virtual void Select();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class ClosedXML.Excel.XLRanges : XLStylizedBase {
    private Dictionary`2<IXLWorksheet, IXLRangeIndex`1<XLRange>> _indexes;
    private bool _styleInitialized;
    [CompilerGeneratedAttribute]
private int <Count>k__BackingField;
    private IEnumerable`1<XLRange> Ranges { get; }
    public int Count { get; private set; }
    public IEnumerable`1<IXLDataValidation> DataValidation { get; }
    unknown XLCellValue Value {public set; }
    public IEnumerable`1<IXLStyle> Styles { get; }
    protected IEnumerable`1<XLStylizedBase> Children { get; }
    public IXLRanges RangesUsed { get; }
    private IEnumerable`1<XLRange> get_Ranges();
    private IXLRangeIndex`1<XLRange> GetRangeIndex(IXLWorksheet worksheet);
    private sealed virtual override IXLCells ClosedXML.Excel.IXLRanges.Cells();
    public sealed virtual IXLRanges Clear(XLClearOptions clearOptions);
    public void Add(XLRange range);
    public sealed virtual void Add(IXLRangeBase range);
    public sealed virtual void Add(IXLCell cell);
    public sealed virtual bool Remove(IXLRange range);
    public sealed virtual void RemoveAll(Predicate`1<IXLRange> match, bool releaseEventHandlers);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Count();
    [CompilerGeneratedAttribute]
private void set_Count(int value);
    public sealed virtual IEnumerator`1<IXLRange> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public bool Contains(IXLCell cell);
    public sealed virtual bool Contains(IXLRange range);
    public sealed virtual IEnumerable`1<IXLRange> GetIntersectedRanges(IXLRangeAddress rangeAddress);
    internal IEnumerable`1<IXLRange> GetIntersectedRanges(XLRangeAddress& rangeAddress);
    public sealed virtual IEnumerable`1<IXLRange> GetIntersectedRanges(IXLAddress address);
    internal IEnumerable`1<IXLRange> GetIntersectedRanges(XLAddress& address);
    public sealed virtual IEnumerable`1<IXLRange> GetIntersectedRanges(IXLCell cell);
    public IEnumerable`1<IXLDataValidation> get_DataValidation();
    public sealed virtual IXLRanges AddToNamed(string rangeName);
    public sealed virtual IXLRanges AddToNamed(string rangeName, XLScope scope);
    public sealed virtual IXLRanges AddToNamed(string rangeName, XLScope scope, string comment);
    public sealed virtual void set_Value(XLCellValue value);
    public sealed virtual IXLRanges SetValue(XLCellValue value);
    public XLCells Cells();
    public sealed virtual IXLCells CellsUsed();
    public sealed virtual IXLCells CellsUsed(XLCellsUsedOptions options);
    [IteratorStateMachineAttribute("ClosedXML.Excel.XLRanges/<get_Styles>d__38")]
public virtual IEnumerable`1<IXLStyle> get_Styles();
    [IteratorStateMachineAttribute("ClosedXML.Excel.XLRanges/<get_Children>d__40")]
protected virtual IEnumerable`1<XLStylizedBase> get_Children();
    public virtual IXLRanges get_RangesUsed();
    public virtual string ToString();
    public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
public bool Equals(XLRanges other);
    public virtual int GetHashCode();
    public sealed virtual IXLDataValidation CreateDataValidation();
    [ObsoleteAttribute("Use CreateDataValidation() instead.")]
public sealed virtual IXLDataValidation SetDataValidation();
    public sealed virtual void Select();
    public sealed virtual IXLRanges Consolidate();
}
internal enum ClosedXML.Excel.XLRangeType : Enum {
    public byte value__;
    public static XLRangeType Range;
    public static XLRangeType Column;
    public static XLRangeType Row;
    public static XLRangeType RangeColumn;
    public static XLRangeType RangeRow;
    public static XLRangeType Table;
    public static XLRangeType Worksheet;
}
public enum ClosedXML.Excel.XLReferenceStyle : Enum {
    public int value__;
    public static XLReferenceStyle R1C1;
    public static XLReferenceStyle A1;
    public static XLReferenceStyle Default;
}
[DebuggerDisplayAttribute("{Text}")]
internal class ClosedXML.Excel.XLRichString : object {
    private IXLWithRichString _withRichString;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private XLFontScheme <FontScheme>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Bold>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Italic>k__BackingField;
    [CompilerGeneratedAttribute]
private XLFontUnderlineValues <Underline>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Strikethrough>k__BackingField;
    [CompilerGeneratedAttribute]
private XLFontVerticalTextAlignmentValues <VerticalAlignment>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Shadow>k__BackingField;
    [CompilerGeneratedAttribute]
private double <FontSize>k__BackingField;
    [CompilerGeneratedAttribute]
private XLColor <FontColor>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FontName>k__BackingField;
    [CompilerGeneratedAttribute]
private XLFontFamilyNumberingValues <FontFamilyNumbering>k__BackingField;
    [CompilerGeneratedAttribute]
private XLFontCharSet <FontCharSet>k__BackingField;
    public string Text { get; public set; }
    public XLFontScheme FontScheme { get; public set; }
    public bool Bold { get; public set; }
    public bool Italic { get; public set; }
    public XLFontUnderlineValues Underline { get; public set; }
    public bool Strikethrough { get; public set; }
    public XLFontVerticalTextAlignmentValues VerticalAlignment { get; public set; }
    public bool Shadow { get; public set; }
    public double FontSize { get; public set; }
    public XLColor FontColor { get; public set; }
    public string FontName { get; public set; }
    public XLFontFamilyNumberingValues FontFamilyNumbering { get; public set; }
    public XLFontCharSet FontCharSet { get; public set; }
    public XLRichString(string text, IXLFontBase font, IXLWithRichString withRichString);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Text();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Text(string value);
    [CompilerGeneratedAttribute]
public sealed virtual XLFontScheme get_FontScheme();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FontScheme(XLFontScheme value);
    public sealed virtual IXLRichString AddText(string text);
    public sealed virtual IXLRichString AddNewLine();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Bold();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Bold(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Italic();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Italic(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual XLFontUnderlineValues get_Underline();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Underline(XLFontUnderlineValues value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Strikethrough();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Strikethrough(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual XLFontVerticalTextAlignmentValues get_VerticalAlignment();
    [CompilerGeneratedAttribute]
public sealed virtual void set_VerticalAlignment(XLFontVerticalTextAlignmentValues value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Shadow();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Shadow(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual double get_FontSize();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FontSize(double value);
    [CompilerGeneratedAttribute]
public sealed virtual XLColor get_FontColor();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FontColor(XLColor value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_FontName();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FontName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual XLFontFamilyNumberingValues get_FontFamilyNumbering();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FontFamilyNumbering(XLFontFamilyNumberingValues value);
    [CompilerGeneratedAttribute]
public sealed virtual XLFontCharSet get_FontCharSet();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FontCharSet(XLFontCharSet value);
    public sealed virtual IXLRichString SetBold();
    public sealed virtual IXLRichString SetBold(bool value);
    public sealed virtual IXLRichString SetItalic();
    public sealed virtual IXLRichString SetItalic(bool value);
    public sealed virtual IXLRichString SetUnderline();
    public sealed virtual IXLRichString SetUnderline(XLFontUnderlineValues value);
    public sealed virtual IXLRichString SetStrikethrough();
    public sealed virtual IXLRichString SetStrikethrough(bool value);
    public sealed virtual IXLRichString SetVerticalAlignment(XLFontVerticalTextAlignmentValues value);
    public sealed virtual IXLRichString SetShadow();
    public sealed virtual IXLRichString SetShadow(bool value);
    public sealed virtual IXLRichString SetFontSize(double value);
    public sealed virtual IXLRichString SetFontColor(XLColor value);
    public sealed virtual IXLRichString SetFontName(string value);
    public sealed virtual IXLRichString SetFontFamilyNumbering(XLFontFamilyNumberingValues value);
    public sealed virtual IXLRichString SetFontCharSet(XLFontCharSet value);
    public sealed virtual IXLRichString SetFontScheme(XLFontScheme value);
    public sealed virtual bool Equals(IXLRichString other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal class ClosedXML.Excel.XLRichText : XLFormattedText`1<IXLRichText> {
    private XLCell _cell;
    public XLRichText(XLCell cell, IXLFontBase defaultFont);
    public XLRichText(XLCell cell, XLFormattedText`1<IXLRichText> defaultRichText, IXLFontBase defaultFont);
    public XLRichText(XLCell cell, string text, IXLFontBase defaultFont);
    private void OnContentChanged(object sender, EventArgs e);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class ClosedXML.Excel.XLRow : XLRangeBase {
    private XlRowFlags _flags;
    private double _height;
    private int _outlineLevel;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <DyDescent>k__BackingField;
    public XLRangeType RangeType { get; }
    public IEnumerable`1<IXLStyle> Styles { get; }
    protected IEnumerable`1<XLStylizedBase> Children { get; }
    public bool Collapsed { get; public set; }
    public Nullable`1<double> DyDescent { get; public set; }
    public bool ShowPhonetic { get; public set; }
    public bool Loading { get; public set; }
    public bool HeightChanged { get; private set; }
    public double Height { get; public set; }
    public bool IsHidden { get; public set; }
    public int OutlineLevel { get; public set; }
    public XLRow(XLWorksheet worksheet, int row);
    public virtual XLRangeType get_RangeType();
    [IteratorStateMachineAttribute("ClosedXML.Excel.XLRow/<get_Styles>d__7")]
public virtual IEnumerable`1<IXLStyle> get_Styles();
    [IteratorStateMachineAttribute("ClosedXML.Excel.XLRow/<get_Children>d__9")]
protected virtual IEnumerable`1<XLStylizedBase> get_Children();
    public bool get_Collapsed();
    public void set_Collapsed(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_DyDescent();
    [CompilerGeneratedAttribute]
public void set_DyDescent(Nullable`1<double> value);
    public bool get_ShowPhonetic();
    public void set_ShowPhonetic(bool value);
    public bool get_Loading();
    public void set_Loading(bool value);
    public bool get_HeightChanged();
    private void set_HeightChanged(bool value);
    public sealed virtual double get_Height();
    public sealed virtual void set_Height(double value);
    private sealed virtual override IXLCells ClosedXML.Excel.IXLRow.Cells(string cellsInRow);
    private sealed virtual override IXLCells ClosedXML.Excel.IXLRow.Cells(int firstColumn, int lastColumn);
    public sealed virtual void ClearHeight();
    public sealed virtual void Delete();
    public sealed virtual IXLRows InsertRowsBelow(int numberOfRows);
    private void CopyRows(IXLRows newRows);
    public sealed virtual IXLRows InsertRowsAbove(int numberOfRows);
    public sealed virtual IXLRow Clear(XLClearOptions clearOptions);
    public sealed virtual IXLCell Cell(int columnNumber);
    public virtual XLCell Cell(string columnLetter);
    private sealed virtual override IXLCell ClosedXML.Excel.IXLRow.Cell(string columnLetter);
    public virtual IXLCells Cells();
    public virtual XLCells Cells(bool usedCellsOnly);
    public virtual XLCells Cells(string cellsInRow);
    public XLCells Cells(int firstColumn, int lastColumn);
    public sealed virtual IXLCells Cells(string firstColumn, string lastColumn);
    public sealed virtual IXLRow AdjustToContents(int startColumn);
    public sealed virtual IXLRow AdjustToContents(int startColumn, int endColumn);
    public sealed virtual IXLRow AdjustToContents(double minHeight, double maxHeight);
    public sealed virtual IXLRow AdjustToContents(int startColumn, double minHeight, double maxHeight);
    public sealed virtual IXLRow AdjustToContents(int startColumn, int endColumn, double minHeightPt, double maxHeightPt);
    private int CalculateMinRowHeight(int startColumn, int endColumn, IXLGraphicEngine engine, Dpi dpi);
    private static double GetContentHeight(int textRotationDeg, List`1<GlyphBox> glyphs);
    public sealed virtual IXLRow Hide();
    public sealed virtual IXLRow Unhide();
    public sealed virtual bool get_IsHidden();
    public void set_IsHidden(bool value);
    public sealed virtual int get_OutlineLevel();
    public sealed virtual void set_OutlineLevel(int value);
    public sealed virtual IXLRow Group();
    public sealed virtual IXLRow Group(int outlineLevel);
    public sealed virtual IXLRow Ungroup();
    public sealed virtual IXLRow Group(bool collapse);
    public sealed virtual IXLRow Group(int outlineLevel, bool collapse);
    public sealed virtual IXLRow Ungroup(bool ungroupFromAll);
    public sealed virtual IXLRow Collapse();
    public sealed virtual IXLRow Expand();
    public sealed virtual int CellCount();
    public sealed virtual IXLRow Sort();
    public sealed virtual IXLRow SortLeftToRight(XLSortOrder sortOrder, bool matchCase, bool ignoreBlanks);
    private sealed virtual override IXLRangeRow ClosedXML.Excel.IXLRow.CopyTo(IXLCell target);
    private sealed virtual override IXLRangeRow ClosedXML.Excel.IXLRow.CopyTo(IXLRangeBase target);
    public sealed virtual IXLRow CopyTo(IXLRow row);
    public sealed virtual IXLRangeRow Row(int start, int end);
    public sealed virtual IXLRangeRow Row(IXLCell start, IXLCell end);
    public sealed virtual IXLRangeRows Rows(string rows);
    public sealed virtual IXLRow AddHorizontalPageBreak();
    public sealed virtual IXLRangeRow RowUsed(XLCellsUsedOptions options);
    public virtual XLRange AsRange();
    internal virtual void WorksheetRangeShiftedColumns(XLRange range, int columnsShifted);
    internal virtual void WorksheetRangeShiftedRows(XLRange range, int rowsShifted);
    internal void SetRowNumber(int row);
    public virtual XLRange Range(string rangeAddressStr);
    public sealed virtual IXLRow AdjustToContents();
    internal void SetStyleNoColumns(IXLStyle value);
    private XLRow RowShift(int rowsToShift);
    private sealed virtual override IXLRow ClosedXML.Excel.IXLRow.RowAbove();
    private sealed virtual override IXLRow ClosedXML.Excel.IXLRow.RowAbove(int step);
    public XLRow RowAbove();
    public XLRow RowAbove(int step);
    private sealed virtual override IXLRow ClosedXML.Excel.IXLRow.RowBelow();
    private sealed virtual override IXLRow ClosedXML.Excel.IXLRow.RowBelow(int step);
    public XLRow RowBelow();
    public XLRow RowBelow(int step);
    public virtual bool IsEmpty();
    public virtual bool IsEmpty(XLCellsUsedOptions options);
    public virtual bool IsEntireRow();
    public virtual bool IsEntireColumn();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class ClosedXML.Excel.XLRows : XLStylizedBase {
    private List`1<XLRow> _rowsCollection;
    [NullableAttribute("2")]
private XLWorksheet _worksheet;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IEnumerable`1<XLRow> _lazyEnumerable;
    private bool IsMaterialized { get; }
    private IEnumerable`1<XLRow> Rows { get; }
    unknown double Height {public set; }
    protected IEnumerable`1<XLStylizedBase> Children { get; }
    public IEnumerable`1<IXLStyle> Styles { get; }
    public IXLRanges RangesUsed { get; }
    [NullableContextAttribute("2")]
public XLRows(XLWorksheet worksheet, XLStyleValue defaultStyle, IEnumerable`1<XLRow> lazyEnumerable);
    private bool get_IsMaterialized();
    private IEnumerable`1<XLRow> get_Rows();
    public sealed virtual IEnumerator`1<IXLRow> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual void set_Height(double value);
    public sealed virtual void Delete();
    public sealed virtual IXLRows AdjustToContents();
    public sealed virtual IXLRows AdjustToContents(int startColumn);
    public sealed virtual IXLRows AdjustToContents(int startColumn, int endColumn);
    public sealed virtual IXLRows AdjustToContents(double minHeight, double maxHeight);
    public sealed virtual IXLRows AdjustToContents(int startColumn, double minHeight, double maxHeight);
    public sealed virtual IXLRows AdjustToContents(int startColumn, int endColumn, double minHeight, double maxHeight);
    public sealed virtual void Hide();
    public sealed virtual void Unhide();
    public sealed virtual void Group();
    public sealed virtual void Group(int outlineLevel);
    public sealed virtual void Ungroup();
    public sealed virtual void Group(bool collapse);
    public sealed virtual void Group(int outlineLevel, bool collapse);
    public sealed virtual void Ungroup(bool ungroupFromAll);
    public sealed virtual void Collapse();
    public sealed virtual void Expand();
    public sealed virtual IXLCells Cells();
    public sealed virtual IXLCells CellsUsed();
    public sealed virtual IXLCells CellsUsed(XLCellsUsedOptions options);
    public sealed virtual IXLRows AddHorizontalPageBreaks();
    [IteratorStateMachineAttribute("ClosedXML.Excel.XLRows/<get_Children>d__34")]
protected virtual IEnumerable`1<XLStylizedBase> get_Children();
    [IteratorStateMachineAttribute("ClosedXML.Excel.XLRows/<get_Styles>d__36")]
public virtual IEnumerable`1<IXLStyle> get_Styles();
    public virtual IXLRanges get_RangesUsed();
    public void Add(XLRow row);
    public sealed virtual IXLRows Clear(XLClearOptions clearOptions);
    public sealed virtual void Select();
    private void Materialize();
}
[DefaultMemberAttribute("Item")]
internal class ClosedXML.Excel.XLRowsCollection : object {
    private Dictionary`2<int, XLRow> _dictionary;
    [CompilerGeneratedAttribute]
private Dictionary`2<int, XLRow> <Deleted>k__BackingField;
    public int MaxRowUsed;
    public Dictionary`2<int, XLRow> Deleted { get; }
    public ICollection`1<int> Keys { get; }
    public ICollection`1<XLRow> Values { get; }
    public XLRow Item { get; public set; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    [CompilerGeneratedAttribute]
public Dictionary`2<int, XLRow> get_Deleted();
    public sealed virtual void Add(int key, XLRow value);
    public sealed virtual bool ContainsKey(int key);
    public sealed virtual ICollection`1<int> get_Keys();
    public sealed virtual bool Remove(int key);
    public sealed virtual bool TryGetValue(int key, XLRow& value);
    public sealed virtual ICollection`1<XLRow> get_Values();
    public sealed virtual XLRow get_Item(int key);
    public sealed virtual void set_Item(int key, XLRow value);
    public sealed virtual void Add(KeyValuePair`2<int, XLRow> item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(KeyValuePair`2<int, XLRow> item);
    public sealed virtual void CopyTo(KeyValuePair`2[] array, int arrayIndex);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool Remove(KeyValuePair`2<int, XLRow> item);
    public sealed virtual IEnumerator`1<KeyValuePair`2<int, XLRow>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public void ShiftRowsDown(int startingRow, int rowsToShift);
    public void RemoveAll(Func`2<XLRow, bool> predicate);
    [CompilerGeneratedAttribute]
private bool <RemoveAll>b__28_0(XLRow row1);
}
public enum ClosedXML.Excel.XLScope : Enum {
    public int value__;
    public static XLScope Workbook;
    public static XLScope Worksheet;
}
public enum ClosedXML.Excel.XLSearchContents : Enum {
    public int value__;
    public static XLSearchContents Values;
    public static XLSearchContents Formulas;
    public static XLSearchContents ValuesAndFormulas;
}
[IsReadOnlyAttribute]
internal class ClosedXML.Excel.XLSheetPoint : ValueType {
    public int Row;
    public int Column;
    public XLSheetPoint(int row, int column);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(XLSheetPoint other);
    public virtual int GetHashCode();
    public static bool op_Equality(XLSheetPoint a, XLSheetPoint b);
    public static bool op_Inequality(XLSheetPoint a, XLSheetPoint b);
    public static XLSheetPoint Parse(string text);
    public static XLSheetPoint Parse(ReadOnlySpan`1<char> input);
    public int Format(Span`1<char> output);
    public virtual string ToString();
    private static int GetDigitCount(int n);
    public static XLSheetPoint FromAddress(IXLAddress address);
    public sealed virtual int CompareTo(XLSheetPoint other);
    internal bool InRangeOrBelow(XLSheetRange& range);
    internal bool InRangeOrToLeft(XLSheetRange& range);
    [CompilerGeneratedAttribute]
internal static bool <Parse>g__IsLetter|9_0(char c);
    [CompilerGeneratedAttribute]
internal static bool <Parse>g__IsDigit|9_1(char c);
}
internal class ClosedXML.Excel.XLSheetProtection : object {
    [CompilerGeneratedAttribute]
private Algorithm <Algorithm>k__BackingField;
    [CompilerGeneratedAttribute]
private XLSheetProtectionElements <AllowedElements>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsProtected>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Base64EncodedSalt>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PasswordHash>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <SpinCount>k__BackingField;
    public Algorithm Algorithm { get; internal set; }
    public XLSheetProtectionElements AllowedElements { get; public set; }
    public bool IsPasswordProtected { get; }
    public bool IsProtected { get; internal set; }
    internal string Base64EncodedSalt { get; internal set; }
    internal string PasswordHash { get; internal set; }
    internal UInt32 SpinCount { get; internal set; }
    public XLSheetProtection(Algorithm algorithm);
    [CompilerGeneratedAttribute]
public sealed virtual Algorithm get_Algorithm();
    [CompilerGeneratedAttribute]
internal void set_Algorithm(Algorithm value);
    [CompilerGeneratedAttribute]
public sealed virtual XLSheetProtectionElements get_AllowedElements();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AllowedElements(XLSheetProtectionElements value);
    public sealed virtual bool get_IsPasswordProtected();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsProtected();
    [CompilerGeneratedAttribute]
internal void set_IsProtected(bool value);
    [CompilerGeneratedAttribute]
internal string get_Base64EncodedSalt();
    [CompilerGeneratedAttribute]
internal void set_Base64EncodedSalt(string value);
    [CompilerGeneratedAttribute]
internal string get_PasswordHash();
    [CompilerGeneratedAttribute]
internal void set_PasswordHash(string value);
    [CompilerGeneratedAttribute]
internal UInt32 get_SpinCount();
    [CompilerGeneratedAttribute]
internal void set_SpinCount(UInt32 value);
    public IXLSheetProtection AllowElement(XLSheetProtectionElements element, bool allowed);
    public IXLSheetProtection AllowEverything();
    public IXLSheetProtection AllowNone();
    public sealed virtual object Clone();
    public XLSheetProtection CopyFrom(IXLElementProtection`1<XLSheetProtectionElements> sheetProtection);
    public IXLSheetProtection DisallowElement(XLSheetProtectionElements element);
    public IXLSheetProtection Protect(Algorithm algorithm);
    public IXLSheetProtection Protect(XLSheetProtectionElements allowedElements);
    public IXLSheetProtection Protect(Algorithm algorithm, XLSheetProtectionElements allowedElements);
    public IXLSheetProtection Protect(string password, Algorithm algorithm, XLSheetProtectionElements allowedElements);
    public IXLSheetProtection Unprotect();
    public IXLSheetProtection Unprotect(string password);
    private sealed virtual override IXLElementProtection`1<XLSheetProtectionElements> ClosedXML.Excel.IXLElementProtection<ClosedXML.Excel.XLSheetProtectionElements>.AllowElement(XLSheetProtectionElements element, bool allowed);
    private sealed virtual override IXLElementProtection`1<XLSheetProtectionElements> ClosedXML.Excel.IXLElementProtection<ClosedXML.Excel.XLSheetProtectionElements>.AllowEverything();
    private sealed virtual override IXLElementProtection`1<XLSheetProtectionElements> ClosedXML.Excel.IXLElementProtection<ClosedXML.Excel.XLSheetProtectionElements>.AllowNone();
    private sealed virtual override IXLElementProtection`1<XLSheetProtectionElements> ClosedXML.Excel.IXLElementProtection<ClosedXML.Excel.XLSheetProtectionElements>.CopyFrom(IXLElementProtection`1<XLSheetProtectionElements> protectable);
    private sealed virtual override IXLElementProtection`1<XLSheetProtectionElements> ClosedXML.Excel.IXLElementProtection<ClosedXML.Excel.XLSheetProtectionElements>.DisallowElement(XLSheetProtectionElements element);
    private sealed virtual override IXLElementProtection`1<XLSheetProtectionElements> ClosedXML.Excel.IXLElementProtection<ClosedXML.Excel.XLSheetProtectionElements>.Protect(Algorithm algorithm);
    private sealed virtual override IXLElementProtection`1<XLSheetProtectionElements> ClosedXML.Excel.IXLElementProtection<ClosedXML.Excel.XLSheetProtectionElements>.Protect(string password, Algorithm algorithm);
    private sealed virtual override IXLSheetProtection ClosedXML.Excel.IXLSheetProtection.Protect(XLSheetProtectionElements allowedElements);
    private sealed virtual override IXLSheetProtection ClosedXML.Excel.IXLSheetProtection.Protect(Algorithm algorithm, XLSheetProtectionElements allowedElements);
    private sealed virtual override IXLSheetProtection ClosedXML.Excel.IXLSheetProtection.Protect(string password, Algorithm algorithm, XLSheetProtectionElements allowedElements);
    private sealed virtual override IXLElementProtection`1<XLSheetProtectionElements> ClosedXML.Excel.IXLElementProtection<ClosedXML.Excel.XLSheetProtectionElements>.Unprotect();
    private sealed virtual override IXLElementProtection`1<XLSheetProtectionElements> ClosedXML.Excel.IXLElementProtection<ClosedXML.Excel.XLSheetProtectionElements>.Unprotect(string password);
}
[FlagsAttribute]
public enum ClosedXML.Excel.XLSheetProtectionElements : Enum {
    public int value__;
    public static XLSheetProtectionElements None;
    public static XLSheetProtectionElements AutoFilter;
    public static XLSheetProtectionElements DeleteColumns;
    public static XLSheetProtectionElements DeleteRows;
    public static XLSheetProtectionElements EditObjects;
    public static XLSheetProtectionElements EditScenarios;
    public static XLSheetProtectionElements FormatCells;
    public static XLSheetProtectionElements FormatColumns;
    public static XLSheetProtectionElements FormatRows;
    public static XLSheetProtectionElements InsertColumns;
    public static XLSheetProtectionElements InsertHyperlinks;
    public static XLSheetProtectionElements InsertRows;
    public static XLSheetProtectionElements PivotTables;
    public static XLSheetProtectionElements SelectLockedCells;
    public static XLSheetProtectionElements SelectUnlockedCells;
    public static XLSheetProtectionElements Sort;
    public static XLSheetProtectionElements DeleteEverything;
    public static XLSheetProtectionElements FormatEverything;
    public static XLSheetProtectionElements InsertEverything;
    public static XLSheetProtectionElements SelectEverything;
    public static XLSheetProtectionElements Everything;
}
[IsReadOnlyAttribute]
internal class ClosedXML.Excel.XLSheetRange : ValueType {
    public static XLSheetRange Full;
    public XLSheetPoint FirstPoint;
    public XLSheetPoint LastPoint;
    public int Width { get; }
    public int Height { get; }
    public XLSheetRange(XLSheetPoint firstPoint, XLSheetPoint lastPoint);
    public XLSheetRange(int rowStart, int columnStart, int rowEnd, int columnEnd);
    private static XLSheetRange();
    public int get_Width();
    public int get_Height();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(XLSheetRange other);
    public virtual int GetHashCode();
    public static bool op_Equality(XLSheetRange left, XLSheetRange right);
    public static bool op_Inequality(XLSheetRange left, XLSheetRange right);
    public static XLSheetRange Parse(string input);
    public static XLSheetRange Parse(ReadOnlySpan`1<char> input);
    public int Format(Span`1<char> output);
    public virtual string ToString();
    internal XLSheetRange BelowRange();
    internal XLSheetRange BelowRange(int rows);
    internal XLSheetRange RightRange();
    internal static XLSheetRange FromRangeAddress(T address);
    public bool Contains(XLSheetPoint point);
}
internal class ClosedXML.Excel.XLSheetView : object {
    private XLAddress _topLeftCellAddress;
    private int _zoomScale;
    [CompilerGeneratedAttribute]
private bool <FreezePanes>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SplitColumn>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SplitRow>k__BackingField;
    [CompilerGeneratedAttribute]
private XLSheetViewOptions <View>k__BackingField;
    [CompilerGeneratedAttribute]
private XLWorksheet <Worksheet>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ZoomScaleNormal>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ZoomScalePageLayoutView>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ZoomScaleSheetLayoutView>k__BackingField;
    public bool FreezePanes { get; public set; }
    public int SplitColumn { get; public set; }
    public int SplitRow { get; public set; }
    private IXLAddress ClosedXML.Excel.IXLSheetView.TopLeftCellAddress { get; private set; }
    public XLAddress TopLeftCellAddress { get; public set; }
    public XLSheetViewOptions View { get; public set; }
    private IXLWorksheet ClosedXML.Excel.IXLSheetView.Worksheet { get; }
    public XLWorksheet Worksheet { get; internal set; }
    public int ZoomScale { get; public set; }
    public int ZoomScaleNormal { get; public set; }
    public int ZoomScalePageLayoutView { get; public set; }
    public int ZoomScaleSheetLayoutView { get; public set; }
    public XLSheetView(XLWorksheet worksheet);
    public XLSheetView(XLWorksheet worksheet, XLSheetView sheetView);
    [CompilerGeneratedAttribute]
public bool get_FreezePanes();
    [CompilerGeneratedAttribute]
public void set_FreezePanes(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_SplitColumn();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SplitColumn(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_SplitRow();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SplitRow(int value);
    private sealed virtual override IXLAddress ClosedXML.Excel.IXLSheetView.get_TopLeftCellAddress();
    private sealed virtual override void ClosedXML.Excel.IXLSheetView.set_TopLeftCellAddress(IXLAddress value);
    public XLAddress get_TopLeftCellAddress();
    public void set_TopLeftCellAddress(XLAddress value);
    [CompilerGeneratedAttribute]
public sealed virtual XLSheetViewOptions get_View();
    [CompilerGeneratedAttribute]
public sealed virtual void set_View(XLSheetViewOptions value);
    private sealed virtual override IXLWorksheet ClosedXML.Excel.IXLSheetView.get_Worksheet();
    [CompilerGeneratedAttribute]
public XLWorksheet get_Worksheet();
    [CompilerGeneratedAttribute]
internal void set_Worksheet(XLWorksheet value);
    public sealed virtual int get_ZoomScale();
    public sealed virtual void set_ZoomScale(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_ZoomScaleNormal();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ZoomScaleNormal(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_ZoomScalePageLayoutView();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ZoomScalePageLayoutView(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_ZoomScaleSheetLayoutView();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ZoomScaleSheetLayoutView(int value);
    public sealed virtual void Freeze(int rows, int columns);
    public sealed virtual void FreezeColumns(int columns);
    public sealed virtual void FreezeRows(int rows);
    public sealed virtual IXLSheetView SetView(XLSheetViewOptions value);
}
public enum ClosedXML.Excel.XLSheetViewOptions : Enum {
    public int value__;
    public static XLSheetViewOptions Normal;
    public static XLSheetViewOptions PageBreakPreview;
    public static XLSheetViewOptions PageLayout;
}
public enum ClosedXML.Excel.XLShiftDeletedCells : Enum {
    public int value__;
    public static XLShiftDeletedCells ShiftCellsUp;
    public static XLShiftDeletedCells ShiftCellsLeft;
}
public enum ClosedXML.Excel.XLShowCommentsValues : Enum {
    public int value__;
    public static XLShowCommentsValues None;
    public static XLShowCommentsValues AtEnd;
    public static XLShowCommentsValues AsDisplayed;
}
internal class ClosedXML.Excel.XLSortElement : object {
    [CompilerGeneratedAttribute]
private int <ElementNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private XLSortOrder <SortOrder>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreBlanks>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MatchCase>k__BackingField;
    public int ElementNumber { get; public set; }
    public XLSortOrder SortOrder { get; public set; }
    public bool IgnoreBlanks { get; public set; }
    public bool MatchCase { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual int get_ElementNumber();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ElementNumber(int value);
    [CompilerGeneratedAttribute]
public sealed virtual XLSortOrder get_SortOrder();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SortOrder(XLSortOrder value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IgnoreBlanks();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IgnoreBlanks(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_MatchCase();
    [CompilerGeneratedAttribute]
public sealed virtual void set_MatchCase(bool value);
}
internal class ClosedXML.Excel.XLSortElements : object {
    private List`1<IXLSortElement> elements;
    public sealed virtual void Add(int elementNumber);
    public sealed virtual void Add(int elementNumber, XLSortOrder sortOrder);
    public sealed virtual void Add(int elementNumber, XLSortOrder sortOrder, bool ignoreBlanks);
    public sealed virtual void Add(int elementNumber, XLSortOrder sortOrder, bool ignoreBlanks, bool matchCase);
    public sealed virtual void Add(string elementNumber);
    public sealed virtual void Add(string elementNumber, XLSortOrder sortOrder);
    public sealed virtual void Add(string elementNumber, XLSortOrder sortOrder, bool ignoreBlanks);
    public sealed virtual void Add(string elementNumber, XLSortOrder sortOrder, bool ignoreBlanks, bool matchCase);
    public sealed virtual IEnumerator`1<IXLSortElement> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual void Clear();
    public sealed virtual void Remove(int elementNumber);
}
public enum ClosedXML.Excel.XLSortOrder : Enum {
    public int value__;
    public static XLSortOrder Ascending;
    public static XLSortOrder Descending;
}
public enum ClosedXML.Excel.XLSortOrientation : Enum {
    public int value__;
    public static XLSortOrientation TopToBottom;
    public static XLSortOrientation LeftToRight;
}
internal class ClosedXML.Excel.XLSparkline : object {
    private IXLCell _location;
    private IXLRange _sourceData;
    [CompilerGeneratedAttribute]
private IXLSparklineGroup <SparklineGroup>k__BackingField;
    public bool IsValid { get; }
    public IXLCell Location { get; public set; }
    public IXLRange SourceData { get; public set; }
    public IXLSparklineGroup SparklineGroup { get; }
    public XLSparkline(IXLSparklineGroup sparklineGroup, IXLCell cell, IXLRange sourceData);
    public sealed virtual bool get_IsValid();
    public sealed virtual IXLCell get_Location();
    public sealed virtual void set_Location(IXLCell value);
    public sealed virtual IXLRange get_SourceData();
    public sealed virtual void set_SourceData(IXLRange value);
    [CompilerGeneratedAttribute]
public sealed virtual IXLSparklineGroup get_SparklineGroup();
    public sealed virtual IXLSparkline SetLocation(IXLCell cell);
    public sealed virtual IXLSparkline SetSourceData(IXLRange range);
}
public enum ClosedXML.Excel.XLSparklineAxisMinMax : Enum {
    public int value__;
    public static XLSparklineAxisMinMax Automatic;
    public static XLSparklineAxisMinMax SameForAll;
    public static XLSparklineAxisMinMax Custom;
}
internal class ClosedXML.Excel.XLSparklineGroup : object {
    [CompilerGeneratedAttribute]
private XLDisplayBlanksAsValues <DisplayEmptyCellsAs>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisplayHidden>k__BackingField;
    [CompilerGeneratedAttribute]
private IXLSparklineHorizontalAxis <HorizontalAxis>k__BackingField;
    [CompilerGeneratedAttribute]
private double <LineWeight>k__BackingField;
    [CompilerGeneratedAttribute]
private XLSparklineMarkers <ShowMarkers>k__BackingField;
    [CompilerGeneratedAttribute]
private XLSparklineType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private IXLSparklineVerticalAxis <VerticalAxis>k__BackingField;
    [CompilerGeneratedAttribute]
private IXLWorksheet <Worksheet>k__BackingField;
    private IXLRange _dateRange;
    private IXLSparklineStyle _style;
    private Dictionary`2<IXLCell, IXLSparkline> _sparklines;
    public IXLRange DateRange { get; public set; }
    public XLDisplayBlanksAsValues DisplayEmptyCellsAs { get; public set; }
    public bool DisplayHidden { get; public set; }
    public IXLSparklineHorizontalAxis HorizontalAxis { get; }
    public double LineWeight { get; public set; }
    public XLSparklineMarkers ShowMarkers { get; public set; }
    private IXLSparklineGroups SparklineGroups { get; }
    public IXLSparklineStyle Style { get; public set; }
    public XLSparklineType Type { get; public set; }
    public IXLSparklineVerticalAxis VerticalAxis { get; }
    public IXLWorksheet Worksheet { get; }
    public XLSparklineGroup(IXLWorksheet targetWorksheet, IXLSparklineGroup copyFrom);
    public XLSparklineGroup(IXLWorksheet targetWorksheet, string locationAddress, string sourceDataAddress);
    public XLSparklineGroup(IXLCell location, IXLRange sourceData);
    public XLSparklineGroup(IXLRange locationRange, IXLRange sourceDataRange);
    internal XLSparklineGroup(IXLWorksheet targetWorksheet);
    public sealed virtual IXLRange get_DateRange();
    public sealed virtual void set_DateRange(IXLRange value);
    [CompilerGeneratedAttribute]
public sealed virtual XLDisplayBlanksAsValues get_DisplayEmptyCellsAs();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DisplayEmptyCellsAs(XLDisplayBlanksAsValues value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_DisplayHidden();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DisplayHidden(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual IXLSparklineHorizontalAxis get_HorizontalAxis();
    [CompilerGeneratedAttribute]
public sealed virtual double get_LineWeight();
    [CompilerGeneratedAttribute]
public sealed virtual void set_LineWeight(double value);
    [CompilerGeneratedAttribute]
public sealed virtual XLSparklineMarkers get_ShowMarkers();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ShowMarkers(XLSparklineMarkers value);
    private IXLSparklineGroups get_SparklineGroups();
    public sealed virtual IXLSparklineStyle get_Style();
    public sealed virtual void set_Style(IXLSparklineStyle value);
    [CompilerGeneratedAttribute]
public sealed virtual XLSparklineType get_Type();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Type(XLSparklineType value);
    [CompilerGeneratedAttribute]
public sealed virtual IXLSparklineVerticalAxis get_VerticalAxis();
    [CompilerGeneratedAttribute]
public sealed virtual IXLWorksheet get_Worksheet();
    public sealed virtual IEnumerable`1<IXLSparkline> Add(IXLRange locationRange, IXLRange sourceDataRange);
    public sealed virtual IXLSparkline Add(IXLCell location, IXLRange sourceData);
    public sealed virtual IEnumerable`1<IXLSparkline> Add(string locationRangeAddress, string sourceDataAddress);
    public sealed virtual void CopyFrom(IXLSparklineGroup sparklineGroup);
    public sealed virtual IXLSparklineGroup CopyTo(IXLWorksheet targetSheet);
    public sealed virtual IEnumerator`1<IXLSparkline> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual IXLSparkline GetSparkline(IXLCell cell);
    [IteratorStateMachineAttribute("ClosedXML.Excel.XLSparklineGroup/<GetSparklines>d__51")]
public sealed virtual IEnumerable`1<IXLSparkline> GetSparklines(IXLRangeBase searchRange);
    public sealed virtual void Remove(IXLCell cell);
    public sealed virtual void Remove(IXLSparkline sparkline);
    public sealed virtual void RemoveAll();
    public sealed virtual IXLSparklineGroup SetDateRange(IXLRange value);
    public sealed virtual IXLSparklineGroup SetDisplayEmptyCellsAs(XLDisplayBlanksAsValues displayEmptyCellsAs);
    public sealed virtual IXLSparklineGroup SetDisplayHidden(bool displayHidden);
    public sealed virtual IXLSparklineGroup SetLineWeight(double lineWeight);
    public sealed virtual IXLSparklineGroup SetShowMarkers(XLSparklineMarkers value);
    public sealed virtual IXLSparklineGroup SetStyle(IXLSparklineStyle value);
    public sealed virtual IXLSparklineGroup SetType(XLSparklineType type);
    internal IXLSparkline Add(IXLSparkline sparkline);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class ClosedXML.Excel.XLSparklineGroups : object {
    private XLWorksheet _worksheet;
    private List`1<IXLSparklineGroup> _sparklineGroups;
    public IXLWorksheet Worksheet { get; }
    public XLSparklineGroups(XLWorksheet worksheet);
    public sealed virtual IXLWorksheet get_Worksheet();
    internal IXLSparklineGroup Add();
    public sealed virtual IXLSparklineGroup Add(IXLSparklineGroup sparklineGroup);
    public sealed virtual IXLSparklineGroup Add(string locationAddress, string sourceDataAddress);
    public sealed virtual IXLSparklineGroup Add(IXLCell location, IXLRange sourceData);
    public sealed virtual IXLSparklineGroup Add(IXLRange locationRange, IXLRange sourceDataRange);
    public IXLSparklineGroup AddCopy(IXLSparklineGroup sparklineGroupToCopy, IXLWorksheet targetWorksheet);
    public sealed virtual void CopyTo(IXLWorksheet targetSheet);
    public sealed virtual IXLSparkline GetSparkline(IXLCell cell);
    public sealed virtual IEnumerable`1<IXLSparkline> GetSparklines(IXLRangeBase searchRange);
    public sealed virtual IEnumerator`1<IXLSparklineGroup> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual void Remove(IXLCell cell);
    public sealed virtual void Remove(IXLRangeBase range);
    public sealed virtual void Remove(IXLSparklineGroup sparklineGroup);
    private void Remove(IXLSparkline sparkline);
    public sealed virtual void RemoveAll();
    internal void ShiftColumns(XLSheetRange shiftedRange, int numberOfColumns);
    internal void ShiftRows(XLSheetRange shiftedRange, int numberOfRows);
}
internal class ClosedXML.Excel.XLSparklineHorizontalAxis : object {
    [CompilerGeneratedAttribute]
private XLColor <Color>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsVisible>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RightToLeft>k__BackingField;
    [CompilerGeneratedAttribute]
private IXLSparklineGroup <SparklineGroup>k__BackingField;
    public XLColor Color { get; public set; }
    public bool DateAxis { get; }
    public bool IsVisible { get; public set; }
    public bool RightToLeft { get; public set; }
    public IXLSparklineGroup SparklineGroup { get; }
    public XLSparklineHorizontalAxis(IXLSparklineGroup sparklineGroup);
    [CompilerGeneratedAttribute]
public sealed virtual XLColor get_Color();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Color(XLColor value);
    public sealed virtual bool get_DateAxis();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsVisible();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsVisible(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_RightToLeft();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RightToLeft(bool value);
    [CompilerGeneratedAttribute]
public IXLSparklineGroup get_SparklineGroup();
    public sealed virtual IXLSparklineHorizontalAxis SetColor(XLColor value);
    public sealed virtual IXLSparklineHorizontalAxis SetRightToLeft(bool value);
    public sealed virtual IXLSparklineHorizontalAxis SetVisible(bool value);
    public static void Copy(IXLSparklineHorizontalAxis from, IXLSparklineHorizontalAxis to);
}
[FlagsAttribute]
public enum ClosedXML.Excel.XLSparklineMarkers : Enum {
    public int value__;
    public static XLSparklineMarkers None;
    public static XLSparklineMarkers HighPoint;
    public static XLSparklineMarkers LowPoint;
    public static XLSparklineMarkers FirstPoint;
    public static XLSparklineMarkers LastPoint;
    public static XLSparklineMarkers NegativePoints;
    public static XLSparklineMarkers Markers;
    public static XLSparklineMarkers All;
}
internal class ClosedXML.Excel.XLSparklineStyle : object {
    [CompilerGeneratedAttribute]
private XLColor <FirstMarkerColor>k__BackingField;
    [CompilerGeneratedAttribute]
private XLColor <HighMarkerColor>k__BackingField;
    [CompilerGeneratedAttribute]
private XLColor <LastMarkerColor>k__BackingField;
    [CompilerGeneratedAttribute]
private XLColor <LowMarkerColor>k__BackingField;
    [CompilerGeneratedAttribute]
private XLColor <MarkersColor>k__BackingField;
    [CompilerGeneratedAttribute]
private XLColor <NegativeColor>k__BackingField;
    [CompilerGeneratedAttribute]
private XLColor <SeriesColor>k__BackingField;
    public XLColor FirstMarkerColor { get; public set; }
    public XLColor HighMarkerColor { get; public set; }
    public XLColor LastMarkerColor { get; public set; }
    public XLColor LowMarkerColor { get; public set; }
    public XLColor MarkersColor { get; public set; }
    public XLColor NegativeColor { get; public set; }
    public XLColor SeriesColor { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual XLColor get_FirstMarkerColor();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FirstMarkerColor(XLColor value);
    [CompilerGeneratedAttribute]
public sealed virtual XLColor get_HighMarkerColor();
    [CompilerGeneratedAttribute]
public sealed virtual void set_HighMarkerColor(XLColor value);
    [CompilerGeneratedAttribute]
public sealed virtual XLColor get_LastMarkerColor();
    [CompilerGeneratedAttribute]
public sealed virtual void set_LastMarkerColor(XLColor value);
    [CompilerGeneratedAttribute]
public sealed virtual XLColor get_LowMarkerColor();
    [CompilerGeneratedAttribute]
public sealed virtual void set_LowMarkerColor(XLColor value);
    [CompilerGeneratedAttribute]
public sealed virtual XLColor get_MarkersColor();
    [CompilerGeneratedAttribute]
public sealed virtual void set_MarkersColor(XLColor value);
    [CompilerGeneratedAttribute]
public sealed virtual XLColor get_NegativeColor();
    [CompilerGeneratedAttribute]
public sealed virtual void set_NegativeColor(XLColor value);
    [CompilerGeneratedAttribute]
public sealed virtual XLColor get_SeriesColor();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SeriesColor(XLColor value);
    public sealed virtual IXLSparklineStyle SetFirstMarkerColor(XLColor value);
    public sealed virtual IXLSparklineStyle SetHighMarkerColor(XLColor value);
    public sealed virtual IXLSparklineStyle SetLastMarkerColor(XLColor value);
    public sealed virtual IXLSparklineStyle SetLowMarkerColor(XLColor value);
    public sealed virtual IXLSparklineStyle SetMarkersColor(XLColor value);
    public sealed virtual IXLSparklineStyle SetNegativeColor(XLColor value);
    public sealed virtual IXLSparklineStyle SetSeriesColor(XLColor value);
    public static void Copy(IXLSparklineStyle from, IXLSparklineStyle to);
    public static bool op_Inequality(XLSparklineStyle left, XLSparklineStyle right);
    public static bool op_Equality(XLSparklineStyle left, XLSparklineStyle right);
    public sealed virtual bool Equals(XLSparklineStyle other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public static class ClosedXML.Excel.XLSparklineTheme : object {
    public static IXLSparklineStyle Default { get; }
    public static IXLSparklineStyle Dark1 { get; }
    public static IXLSparklineStyle Dark2 { get; }
    public static IXLSparklineStyle Dark3 { get; }
    public static IXLSparklineStyle Dark4 { get; }
    public static IXLSparklineStyle Dark5 { get; }
    public static IXLSparklineStyle Dark6 { get; }
    public static IXLSparklineStyle Colorful1 { get; }
    public static IXLSparklineStyle Colorful2 { get; }
    public static IXLSparklineStyle Colorful3 { get; }
    public static IXLSparklineStyle Colorful4 { get; }
    public static IXLSparklineStyle Colorful5 { get; }
    public static IXLSparklineStyle Colorful6 { get; }
    public static IXLSparklineStyle Accent1 { get; }
    public static IXLSparklineStyle Accent2 { get; }
    public static IXLSparklineStyle Accent3 { get; }
    public static IXLSparklineStyle Accent4 { get; }
    public static IXLSparklineStyle Accent5 { get; }
    public static IXLSparklineStyle Accent6 { get; }
    public static IXLSparklineStyle Accent1Darker25 { get; }
    public static IXLSparklineStyle Accent2Darker25 { get; }
    public static IXLSparklineStyle Accent3Darker25 { get; }
    public static IXLSparklineStyle Accent4Darker25 { get; }
    public static IXLSparklineStyle Accent5Darker25 { get; }
    public static IXLSparklineStyle Accent6Darker25 { get; }
    public static IXLSparklineStyle Accent1Darker50 { get; }
    public static IXLSparklineStyle Accent2Darker50 { get; }
    public static IXLSparklineStyle Accent3Darker50 { get; }
    public static IXLSparklineStyle Accent4Darker50 { get; }
    public static IXLSparklineStyle Accent5Darker50 { get; }
    public static IXLSparklineStyle Accent6Darker50 { get; }
    public static IXLSparklineStyle Accent1Lighter40 { get; }
    public static IXLSparklineStyle Accent2Lighter40 { get; }
    public static IXLSparklineStyle Accent3Lighter40 { get; }
    public static IXLSparklineStyle Accent4Lighter40 { get; }
    public static IXLSparklineStyle Accent5Lighter40 { get; }
    public static IXLSparklineStyle Accent6Lighter40 { get; }
    public static IXLSparklineStyle get_Default();
    public static IXLSparklineStyle get_Dark1();
    public static IXLSparklineStyle get_Dark2();
    public static IXLSparklineStyle get_Dark3();
    public static IXLSparklineStyle get_Dark4();
    public static IXLSparklineStyle get_Dark5();
    public static IXLSparklineStyle get_Dark6();
    public static IXLSparklineStyle get_Colorful1();
    public static IXLSparklineStyle get_Colorful2();
    public static IXLSparklineStyle get_Colorful3();
    public static IXLSparklineStyle get_Colorful4();
    public static IXLSparklineStyle get_Colorful5();
    public static IXLSparklineStyle get_Colorful6();
    public static IXLSparklineStyle get_Accent1();
    public static IXLSparklineStyle get_Accent2();
    public static IXLSparklineStyle get_Accent3();
    public static IXLSparklineStyle get_Accent4();
    public static IXLSparklineStyle get_Accent5();
    public static IXLSparklineStyle get_Accent6();
    public static IXLSparklineStyle get_Accent1Darker25();
    public static IXLSparklineStyle get_Accent2Darker25();
    public static IXLSparklineStyle get_Accent3Darker25();
    public static IXLSparklineStyle get_Accent4Darker25();
    public static IXLSparklineStyle get_Accent5Darker25();
    public static IXLSparklineStyle get_Accent6Darker25();
    public static IXLSparklineStyle get_Accent1Darker50();
    public static IXLSparklineStyle get_Accent2Darker50();
    public static IXLSparklineStyle get_Accent3Darker50();
    public static IXLSparklineStyle get_Accent4Darker50();
    public static IXLSparklineStyle get_Accent5Darker50();
    public static IXLSparklineStyle get_Accent6Darker50();
    public static IXLSparklineStyle get_Accent1Lighter40();
    public static IXLSparklineStyle get_Accent2Lighter40();
    public static IXLSparklineStyle get_Accent3Lighter40();
    public static IXLSparklineStyle get_Accent4Lighter40();
    public static IXLSparklineStyle get_Accent5Lighter40();
    public static IXLSparklineStyle get_Accent6Lighter40();
}
public enum ClosedXML.Excel.XLSparklineType : Enum {
    public int value__;
    public static XLSparklineType Line;
    public static XLSparklineType Column;
    public static XLSparklineType Stacked;
}
internal class ClosedXML.Excel.XLSparklineVerticalAxis : object {
    private Nullable`1<double> _manualMax;
    private Nullable`1<double> _manualMin;
    private XLSparklineAxisMinMax _maxAxisType;
    private XLSparklineAxisMinMax _minAxisType;
    [CompilerGeneratedAttribute]
private IXLSparklineGroup <SparklineGroup>k__BackingField;
    public Nullable`1<double> ManualMax { get; public set; }
    public Nullable`1<double> ManualMin { get; public set; }
    public XLSparklineAxisMinMax MaxAxisType { get; public set; }
    public XLSparklineAxisMinMax MinAxisType { get; public set; }
    public IXLSparklineGroup SparklineGroup { get; }
    public XLSparklineVerticalAxis(IXLSparklineGroup sparklineGroup);
    public sealed virtual Nullable`1<double> get_ManualMax();
    public sealed virtual void set_ManualMax(Nullable`1<double> value);
    public sealed virtual Nullable`1<double> get_ManualMin();
    public sealed virtual void set_ManualMin(Nullable`1<double> value);
    public sealed virtual XLSparklineAxisMinMax get_MaxAxisType();
    public sealed virtual void set_MaxAxisType(XLSparklineAxisMinMax value);
    public sealed virtual XLSparklineAxisMinMax get_MinAxisType();
    public sealed virtual void set_MinAxisType(XLSparklineAxisMinMax value);
    public sealed virtual IXLSparklineVerticalAxis SetManualMax(Nullable`1<double> manualMax);
    public sealed virtual IXLSparklineVerticalAxis SetManualMin(Nullable`1<double> manualMin);
    public sealed virtual IXLSparklineVerticalAxis SetMaxAxisType(XLSparklineAxisMinMax maxAxisType);
    public sealed virtual IXLSparklineVerticalAxis SetMinAxisType(XLSparklineAxisMinMax minAxisType);
    [CompilerGeneratedAttribute]
public IXLSparklineGroup get_SparklineGroup();
    public static void Copy(IXLSparklineVerticalAxis from, IXLSparklineVerticalAxis to);
}
internal class ClosedXML.Excel.XLStyle : object {
    private IXLStylized _container;
    [CompilerGeneratedAttribute]
private XLStyleValue <Value>k__BackingField;
    public static XLStyle Default { get; }
    internal XLStyleValue Value { get; private set; }
    internal XLStyleKey Key { get; private set; }
    public IXLFont Font { get; public set; }
    public IXLAlignment Alignment { get; public set; }
    public IXLBorder Border { get; public set; }
    public IXLFill Fill { get; public set; }
    public bool IncludeQuotePrefix { get; public set; }
    public IXLNumberFormat NumberFormat { get; public set; }
    public IXLProtection Protection { get; public set; }
    public IXLNumberFormat DateFormat { get; }
    public XLStyle(IXLStylized container, IXLStyle initialStyle, bool useDefaultModify);
    public XLStyle(IXLStylized container, XLStyleKey key);
    internal XLStyle(IXLStylized container, XLStyleValue value);
    private XLStyle(XLStyleValue value);
    public static XLStyle get_Default();
    internal static XLStyleKey GenerateKey(IXLStyle initialStyle);
    internal static XLStyle CreateEmptyStyle();
    [CompilerGeneratedAttribute]
internal XLStyleValue get_Value();
    [CompilerGeneratedAttribute]
private void set_Value(XLStyleValue value);
    internal XLStyleKey get_Key();
    private void set_Key(XLStyleKey value);
    internal void Modify(Func`2<XLStyleKey, XLStyleKey> modification);
    public sealed virtual IXLFont get_Font();
    public sealed virtual void set_Font(IXLFont value);
    public sealed virtual IXLAlignment get_Alignment();
    public sealed virtual void set_Alignment(IXLAlignment value);
    public sealed virtual IXLBorder get_Border();
    public sealed virtual void set_Border(IXLBorder value);
    public sealed virtual IXLFill get_Fill();
    public sealed virtual void set_Fill(IXLFill value);
    public sealed virtual bool get_IncludeQuotePrefix();
    public sealed virtual void set_IncludeQuotePrefix(bool value);
    public sealed virtual IXLStyle SetIncludeQuotePrefix(bool includeQuotePrefix);
    public sealed virtual IXLNumberFormat get_NumberFormat();
    public sealed virtual void set_NumberFormat(IXLNumberFormat value);
    public sealed virtual IXLProtection get_Protection();
    public sealed virtual void set_Protection(IXLProtection value);
    public sealed virtual IXLNumberFormat get_DateFormat();
    public virtual string ToString();
    public sealed virtual bool Equals(IXLStyle other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal class ClosedXML.Excel.XLStyleKey : ValueType {
    [CompilerGeneratedAttribute]
private XLAlignmentKey <Alignment>k__BackingField;
    [CompilerGeneratedAttribute]
private XLBorderKey <Border>k__BackingField;
    [CompilerGeneratedAttribute]
private XLFillKey <Fill>k__BackingField;
    [CompilerGeneratedAttribute]
private XLFontKey <Font>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeQuotePrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private XLNumberFormatKey <NumberFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private XLProtectionKey <Protection>k__BackingField;
    public XLAlignmentKey Alignment { get; public set; }
    public XLBorderKey Border { get; public set; }
    public XLFillKey Fill { get; public set; }
    public XLFontKey Font { get; public set; }
    public bool IncludeQuotePrefix { get; public set; }
    public XLNumberFormatKey NumberFormat { get; public set; }
    public XLProtectionKey Protection { get; public set; }
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public XLAlignmentKey get_Alignment();
    [CompilerGeneratedAttribute]
public void set_Alignment(XLAlignmentKey value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public XLBorderKey get_Border();
    [CompilerGeneratedAttribute]
public void set_Border(XLBorderKey value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public XLFillKey get_Fill();
    [CompilerGeneratedAttribute]
public void set_Fill(XLFillKey value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public XLFontKey get_Font();
    [CompilerGeneratedAttribute]
public void set_Font(XLFontKey value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_IncludeQuotePrefix();
    [CompilerGeneratedAttribute]
public void set_IncludeQuotePrefix(bool value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public XLNumberFormatKey get_NumberFormat();
    [CompilerGeneratedAttribute]
public void set_NumberFormat(XLNumberFormatKey value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public XLProtectionKey get_Protection();
    [CompilerGeneratedAttribute]
public void set_Protection(XLProtectionKey value);
    public virtual int GetHashCode();
    public sealed virtual bool Equals(XLStyleKey other);
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public static bool op_Equality(XLStyleKey left, XLStyleKey right);
    public static bool op_Inequality(XLStyleKey left, XLStyleKey right);
    public void Deconstruct(XLAlignmentKey& alignment, XLBorderKey& border, XLFillKey& fill, XLFontKey& font, Boolean& includeQuotePrefix, XLNumberFormatKey& numberFormat, XLProtectionKey& protection);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class ClosedXML.Excel.XLStyleValue : object {
    private static XLStyleRepository Repository;
    private static XLStyleKey DefaultKey;
    internal static XLStyleValue Default;
    [CompilerGeneratedAttribute]
private XLStyleKey <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private XLAlignmentValue <Alignment>k__BackingField;
    [CompilerGeneratedAttribute]
private XLBorderValue <Border>k__BackingField;
    [CompilerGeneratedAttribute]
private XLFillValue <Fill>k__BackingField;
    [CompilerGeneratedAttribute]
private XLFontValue <Font>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeQuotePrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private XLNumberFormatValue <NumberFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private XLProtectionValue <Protection>k__BackingField;
    private Nullable`1<int> _hashCode;
    public XLStyleKey Key { get; private set; }
    public XLAlignmentValue Alignment { get; private set; }
    public XLBorderValue Border { get; private set; }
    public XLFillValue Fill { get; private set; }
    public XLFontValue Font { get; private set; }
    public bool IncludeQuotePrefix { get; private set; }
    public XLNumberFormatValue NumberFormat { get; private set; }
    public XLProtectionValue Protection { get; private set; }
    internal XLStyleValue(XLStyleKey key);
    private static XLStyleValue();
    public static XLStyleValue FromKey(XLStyleKey& key);
    [CompilerGeneratedAttribute]
public XLStyleKey get_Key();
    [CompilerGeneratedAttribute]
private void set_Key(XLStyleKey value);
    [CompilerGeneratedAttribute]
public XLAlignmentValue get_Alignment();
    [CompilerGeneratedAttribute]
private void set_Alignment(XLAlignmentValue value);
    [CompilerGeneratedAttribute]
public XLBorderValue get_Border();
    [CompilerGeneratedAttribute]
private void set_Border(XLBorderValue value);
    [CompilerGeneratedAttribute]
public XLFillValue get_Fill();
    [CompilerGeneratedAttribute]
private void set_Fill(XLFillValue value);
    [CompilerGeneratedAttribute]
public XLFontValue get_Font();
    [CompilerGeneratedAttribute]
private void set_Font(XLFontValue value);
    [CompilerGeneratedAttribute]
public bool get_IncludeQuotePrefix();
    [CompilerGeneratedAttribute]
private void set_IncludeQuotePrefix(bool value);
    [CompilerGeneratedAttribute]
public XLNumberFormatValue get_NumberFormat();
    [CompilerGeneratedAttribute]
private void set_NumberFormat(XLNumberFormatValue value);
    [CompilerGeneratedAttribute]
public XLProtectionValue get_Protection();
    [CompilerGeneratedAttribute]
private void set_Protection(XLProtectionValue value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    [NullableContextAttribute("2")]
public static bool op_Equality(XLStyleValue left, XLStyleValue right);
    [NullableContextAttribute("2")]
public static bool op_Inequality(XLStyleValue left, XLStyleValue right);
}
internal abstract class ClosedXML.Excel.XLStylizedBase : object {
    [CompilerGeneratedAttribute]
private XLStyleValue <StyleValue>k__BackingField;
    private static ReferenceEqualityComparer`1<XLStyleValue> _comparer;
    internal XLStyleValue StyleValue { get; private protected set; }
    private XLStyleValue ClosedXML.Excel.IXLStylized.StyleValue { get; }
    public IXLStyle Style { get; public set; }
    public IXLStyle InnerStyle { get; public set; }
    protected IEnumerable`1<XLStylizedBase> Children { get; }
    public IXLRanges RangesUsed { get; }
    public IEnumerable`1<IXLStyle> Styles { get; }
    protected XLStylizedBase(XLStyleValue styleValue);
    private static XLStylizedBase();
    [CompilerGeneratedAttribute]
internal virtual XLStyleValue get_StyleValue();
    [CompilerGeneratedAttribute]
private protected virtual void set_StyleValue(XLStyleValue value);
    private sealed virtual override XLStyleValue ClosedXML.Excel.IXLStylized.get_StyleValue();
    public sealed virtual IXLStyle get_Style();
    public sealed virtual void set_Style(IXLStyle value);
    public sealed virtual IXLStyle get_InnerStyle();
    public sealed virtual void set_InnerStyle(IXLStyle value);
    protected abstract virtual IEnumerable`1<XLStylizedBase> get_Children();
    public abstract virtual IXLRanges get_RangesUsed();
    public abstract virtual IEnumerable`1<IXLStyle> get_Styles();
    private void SetStyle(IXLStyle style, bool propagate);
    private void SetStyle(XLStyleValue value, bool propagate);
    private sealed virtual override void ClosedXML.Excel.IXLStylized.ModifyStyle(Func`2<XLStyleKey, XLStyleKey> modification);
    private static HashSet`1<XLStylizedBase> GetChildrenRecursively(XLStylizedBase parent);
    [CompilerGeneratedAttribute]
private void <SetStyle>b__21_0(XLStylizedBase child);
    [CompilerGeneratedAttribute]
internal static void <GetChildrenRecursively>g__Collect|24_0(XLStylizedBase root, HashSet`1<XLStylizedBase> collector);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class ClosedXML.Excel.XLStylizedEmpty : XLStylizedBase {
    public IEnumerable`1<IXLStyle> Styles { get; }
    public IXLRanges RangesUsed { get; }
    protected IEnumerable`1<XLStylizedBase> Children { get; }
    [NullableContextAttribute("2")]
public XLStylizedEmpty(IXLStyle defaultStyle);
    [IteratorStateMachineAttribute("ClosedXML.Excel.XLStylizedEmpty/<get_Styles>d__2")]
public virtual IEnumerable`1<IXLStyle> get_Styles();
    public virtual IXLRanges get_RangesUsed();
    [IteratorStateMachineAttribute("ClosedXML.Excel.XLStylizedEmpty/<get_Children>d__6")]
protected virtual IEnumerable`1<XLStylizedBase> get_Children();
}
public enum ClosedXML.Excel.XLSubtotalFunction : Enum {
    public int value__;
    public static XLSubtotalFunction Automatic;
    public static XLSubtotalFunction None;
    public static XLSubtotalFunction Sum;
    public static XLSubtotalFunction Count;
    public static XLSubtotalFunction Average;
    public static XLSubtotalFunction Minimum;
    public static XLSubtotalFunction Maximum;
    public static XLSubtotalFunction Product;
    public static XLSubtotalFunction CountNumbers;
    public static XLSubtotalFunction StandardDeviation;
    public static XLSubtotalFunction PopulationStandardDeviation;
    public static XLSubtotalFunction Variance;
    public static XLSubtotalFunction PopulationVariance;
}
[DebuggerDisplayAttribute("{Name}")]
internal class ClosedXML.Excel.XLTable : XLRange {
    private string _name;
    internal bool _showTotalsRow;
    internal HashSet`1<string> _uniqueNames;
    private IXLRangeAddress _lastRangeAddress;
    private Dictionary`2<string, IXLTableField> _fieldNames;
    [CompilerGeneratedAttribute]
private string <RelId>k__BackingField;
    private XLAutoFilter _autoFilter;
    [CompilerGeneratedAttribute]
private bool <EmphasizeFirstColumn>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EmphasizeLastColumn>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowRowStripes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowColumnStripes>k__BackingField;
    private bool _showAutoFilter;
    [CompilerGeneratedAttribute]
private XLTableTheme <Theme>k__BackingField;
    internal bool _showHeaderRow;
    public XLRangeType RangeType { get; }
    public Dictionary`2<string, IXLTableField> FieldNames { get; }
    internal string RelId { get; internal set; }
    public IXLTableRange DataRange { get; }
    public XLAutoFilter AutoFilter { get; }
    public bool EmphasizeFirstColumn { get; public set; }
    public bool EmphasizeLastColumn { get; public set; }
    public bool ShowRowStripes { get; public set; }
    public bool ShowColumnStripes { get; public set; }
    public bool ShowAutoFilter { get; public set; }
    public XLTableTheme Theme { get; public set; }
    public string Name { get; public set; }
    public bool ShowTotalsRow { get; public set; }
    public IEnumerable`1<IXLTableField> Fields { get; }
    private IXLAutoFilter ClosedXML.Excel.IXLTable.AutoFilter { get; }
    public bool ShowHeaderRow { get; public set; }
    public XLTable(XLRangeParameters xlRangeParameters);
    public virtual XLRangeType get_RangeType();
    public Dictionary`2<string, IXLTableField> get_FieldNames();
    private void RescanFieldNames();
    internal void AddFields(IEnumerable`1<string> fieldNames);
    internal void RenameField(string oldName, string newName);
    [CompilerGeneratedAttribute]
internal string get_RelId();
    [CompilerGeneratedAttribute]
internal void set_RelId(string value);
    public sealed virtual IXLTableRange get_DataRange();
    public XLAutoFilter get_AutoFilter();
    public virtual IXLAutoFilter SetAutoFilter();
    protected virtual void OnRangeAddressChanged(XLRangeAddress oldAddress, XLRangeAddress newAddress);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_EmphasizeFirstColumn();
    [CompilerGeneratedAttribute]
public sealed virtual void set_EmphasizeFirstColumn(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_EmphasizeLastColumn();
    [CompilerGeneratedAttribute]
public sealed virtual void set_EmphasizeLastColumn(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ShowRowStripes();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ShowRowStripes(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ShowColumnStripes();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ShowColumnStripes(bool value);
    public sealed virtual bool get_ShowAutoFilter();
    public sealed virtual void set_ShowAutoFilter(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual XLTableTheme get_Theme();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Theme(XLTableTheme value);
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public sealed virtual bool get_ShowTotalsRow();
    public sealed virtual void set_ShowTotalsRow(bool value);
    public sealed virtual IXLRangeRow HeadersRow();
    internal IXLRangeRow HeadersRow(bool scanForNewFieldsNames);
    public sealed virtual IXLRangeRow TotalsRow();
    public sealed virtual IXLTableField Field(string fieldName);
    public sealed virtual IXLTableField Field(int fieldIndex);
    [IteratorStateMachineAttribute("ClosedXML.Excel.XLTable/<get_Fields>d__60")]
public sealed virtual IEnumerable`1<IXLTableField> get_Fields();
    public sealed virtual IXLTable Resize(IXLRangeAddress rangeAddress);
    public sealed virtual IXLTable Resize(string rangeAddress);
    public sealed virtual IXLTable Resize(IXLCell firstCell, IXLCell lastCell);
    public sealed virtual IXLTable Resize(string firstCellAddress, string lastCellAddress);
    public sealed virtual IXLTable Resize(IXLAddress firstCellAddress, IXLAddress lastCellAddress);
    public sealed virtual IXLTable Resize(int firstCellRow, int firstCellColumn, int lastCellRow, int lastCellColumn);
    public sealed virtual IXLTable Resize(IXLRange range);
    public sealed virtual IXLTable SetEmphasizeFirstColumn();
    public sealed virtual IXLTable SetEmphasizeFirstColumn(bool value);
    public sealed virtual IXLTable SetEmphasizeLastColumn();
    public sealed virtual IXLTable SetEmphasizeLastColumn(bool value);
    public sealed virtual IXLTable SetShowRowStripes();
    public sealed virtual IXLTable SetShowRowStripes(bool value);
    public sealed virtual IXLTable SetShowColumnStripes();
    public sealed virtual IXLTable SetShowColumnStripes(bool value);
    public sealed virtual IXLTable SetShowTotalsRow();
    public sealed virtual IXLTable SetShowTotalsRow(bool value);
    public sealed virtual IXLTable SetShowAutoFilter();
    public sealed virtual IXLTable SetShowAutoFilter(bool value);
    public sealed virtual IXLRange Sort(string columnsToSortBy, XLSortOrder sortOrder, bool matchCase, bool ignoreBlanks);
    public sealed virtual IXLTable Clear(XLClearOptions clearOptions);
    private sealed virtual override IXLAutoFilter ClosedXML.Excel.IXLTable.get_AutoFilter();
    private void InitializeValues(bool setAutofilter);
    public void InitializeAutoFilter();
    internal void OnAddedToTables();
    private string GetUniqueName(string originalName, int initialOffset, bool enforceOffset);
    public int GetFieldIndex(string name);
    public sealed virtual bool get_ShowHeaderRow();
    public sealed virtual void set_ShowHeaderRow(bool value);
    public sealed virtual IXLTable SetShowHeaderRow();
    public sealed virtual IXLTable SetShowHeaderRow(bool value);
    public void ExpandTableRows(int rows);
    public virtual XLRangeColumn Column(int columnNumber);
    public virtual XLRangeColumn Column(string columnName);
    public virtual IXLRangeColumns Columns(int firstColumn, int lastColumn);
    public virtual IXLRangeColumns Columns(Func`2<IXLRangeColumn, bool> predicate);
    public virtual IXLRangeColumns Columns(string columns);
    public virtual IXLRangeColumns Columns(string firstColumn, string lastColumn);
    internal virtual XLRangeColumns ColumnsUsed(XLCellsUsedOptions options, Func`2<IXLRangeColumn, bool> predicate);
    internal virtual XLRangeColumns ColumnsUsed(Func`2<IXLRangeColumn, bool> predicate);
    private sealed virtual override IXLPivotTable ClosedXML.Excel.IXLRangeBase.CreatePivotTable(IXLCell targetCell, string name);
    internal XLPivotTable CreatePivotTable(IXLCell targetCell, string name);
    [IteratorStateMachineAttribute("ClosedXML.Excel.XLTable/<AsDynamicEnumerable>d__106")]
public sealed virtual IEnumerable`1<object> AsDynamicEnumerable();
    public sealed virtual DataTable AsNativeDataTable();
    public sealed virtual IXLTable CopyTo(IXLWorksheet targetSheet);
    internal IXLTable CopyTo(XLWorksheet targetSheet, bool copyData);
    public sealed virtual IXLRange AppendData(IEnumerable data, bool propagateExtraColumns);
    public sealed virtual IXLRange AppendData(IEnumerable data, bool transpose, bool propagateExtraColumns);
    public sealed virtual IXLRange AppendData(DataTable dataTable, bool propagateExtraColumns);
    public sealed virtual IXLRange AppendData(IEnumerable`1<T> data, bool propagateExtraColumns);
    public sealed virtual IXLRange ReplaceData(IEnumerable data, bool propagateExtraColumns);
    public sealed virtual IXLRange ReplaceData(IEnumerable data, bool transpose, bool propagateExtraColumns);
    public sealed virtual IXLRange ReplaceData(DataTable dataTable, bool propagateExtraColumns);
    public sealed virtual IXLRange ReplaceData(IEnumerable`1<T> data, bool propagateExtraColumns);
    private void PropagateExtraColumns(int numberOfNonExtraColumns, int previousLastDataRow);
    [CompilerGeneratedAttribute]
private void <Columns>b__98_0(XLRangeColumn column);
    [CompilerGeneratedAttribute]
private void <Columns>b__99_0(XLRangeColumn column);
    [CompilerGeneratedAttribute]
private void <Columns>b__100_0(XLRangeColumn column);
    [CompilerGeneratedAttribute]
private void <Columns>b__101_0(XLRangeColumn column);
    [CompilerGeneratedAttribute]
private void <ColumnsUsed>b__102_0(XLRangeColumn column);
    [CompilerGeneratedAttribute]
private void <ColumnsUsed>b__103_0(XLRangeColumn column);
}
public enum ClosedXML.Excel.XLTableCellType : Enum {
    public int value__;
    public static XLTableCellType None;
    public static XLTableCellType Header;
    public static XLTableCellType Data;
    public static XLTableCellType Total;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("{Name}")]
internal class ClosedXML.Excel.XLTableField : object {
    internal XLTotalsRowFunction totalsRowFunction;
    [NullableAttribute("2")]
internal string totalsRowLabel;
    private XLTable table;
    [NullableAttribute("2")]
private IXLRangeColumn _column;
    private int index;
    private string name;
    private static IEnumerable`1<string> QuotedTableFieldCharacters;
    public IXLRangeColumn Column { get; internal set; }
    public IXLCells DataCells { get; }
    [NullableAttribute("2")]
public IXLCell HeaderCell { get; }
    public int Index { get; internal set; }
    public string Name { get; public set; }
    public IXLTable Table { get; }
    [NullableAttribute("2")]
public IXLCell TotalsCell { get; }
    public string TotalsRowFormulaA1 { get; public set; }
    public string TotalsRowFormulaR1C1 { get; public set; }
    public XLTotalsRowFunction TotalsRowFunction { get; public set; }
    [NullableAttribute("2")]
public string TotalsRowLabel { get; public set; }
    public XLTableField(XLTable table, string name);
    private static XLTableField();
    public sealed virtual IXLRangeColumn get_Column();
    internal void set_Column(IXLRangeColumn value);
    public sealed virtual IXLCells get_DataCells();
    [NullableContextAttribute("2")]
public sealed virtual IXLCell get_HeaderCell();
    public sealed virtual int get_Index();
    internal void set_Index(int value);
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public sealed virtual IXLTable get_Table();
    [NullableContextAttribute("2")]
public sealed virtual IXLCell get_TotalsCell();
    public sealed virtual string get_TotalsRowFormulaA1();
    public sealed virtual void set_TotalsRowFormulaA1(string value);
    public sealed virtual string get_TotalsRowFormulaR1C1();
    public sealed virtual void set_TotalsRowFormulaR1C1(string value);
    public sealed virtual XLTotalsRowFunction get_TotalsRowFunction();
    public sealed virtual void set_TotalsRowFunction(XLTotalsRowFunction value);
    [NullableContextAttribute("2")]
public sealed virtual string get_TotalsRowLabel();
    [NullableContextAttribute("2")]
public sealed virtual void set_TotalsRowLabel(string value);
    public sealed virtual void Delete();
    internal void Delete(bool deleteUnderlyingRangeColumn);
    public sealed virtual bool IsConsistentDataType();
    public sealed virtual bool IsConsistentFormula();
    public sealed virtual bool IsConsistentStyle();
    internal void UpdateTableFieldTotalsRowFormula();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool <get_DataCells>b__11_0(IXLCell c);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool <Delete>b__37_0(XLTableField f);
}
internal class ClosedXML.Excel.XLTableRange : XLRange {
    private XLTable _table;
    private XLRange _range;
    private IXLTable ClosedXML.Excel.IXLTableRange.Table { get; }
    public XLTable Table { get; }
    public XLTableRange(XLRange range, XLTable table);
    private sealed virtual override IXLTableRow ClosedXML.Excel.IXLTableRange.FirstRow(Func`2<IXLTableRow, bool> predicate);
    public XLTableRow FirstRow(Func`2<IXLTableRow, bool> predicate);
    private sealed virtual override IXLTableRow ClosedXML.Excel.IXLTableRange.FirstRowUsed(Func`2<IXLTableRow, bool> predicate);
    public XLTableRow FirstRowUsed(Func`2<IXLTableRow, bool> predicate);
    private sealed virtual override IXLTableRow ClosedXML.Excel.IXLTableRange.FirstRowUsed(XLCellsUsedOptions options, Func`2<IXLTableRow, bool> predicate);
    internal XLTableRow FirstRowUsed(XLCellsUsedOptions options, Func`2<IXLTableRow, bool> predicate);
    private sealed virtual override IXLTableRow ClosedXML.Excel.IXLTableRange.LastRow(Func`2<IXLTableRow, bool> predicate);
    public XLTableRow LastRow(Func`2<IXLTableRow, bool> predicate);
    private sealed virtual override IXLTableRow ClosedXML.Excel.IXLTableRange.LastRowUsed(Func`2<IXLTableRow, bool> predicate);
    public XLTableRow LastRowUsed(Func`2<IXLTableRow, bool> predicate);
    private sealed virtual override IXLTableRow ClosedXML.Excel.IXLTableRange.LastRowUsed(XLCellsUsedOptions options, Func`2<IXLTableRow, bool> predicate);
    internal XLTableRow LastRowUsed(XLCellsUsedOptions options, Func`2<IXLTableRow, bool> predicate);
    private sealed virtual override IXLTableRow ClosedXML.Excel.IXLTableRange.Row(int row);
    public XLTableRow Row(int row);
    public sealed virtual IXLTableRows Rows(Func`2<IXLTableRow, bool> predicate);
    public sealed virtual IXLTableRows Rows(int firstRow, int lastRow);
    public sealed virtual IXLTableRows Rows(string rows);
    private sealed virtual override IXLTableRows ClosedXML.Excel.IXLTableRange.RowsUsed(XLCellsUsedOptions options, Func`2<IXLTableRow, bool> predicate);
    internal XLTableRows RowsUsed(XLCellsUsedOptions options, Func`2<IXLTableRow, bool> predicate);
    private sealed virtual override IXLTableRows ClosedXML.Excel.IXLTableRange.RowsUsed(Func`2<IXLTableRow, bool> predicate);
    public IXLTableRows RowsUsed(Func`2<IXLTableRow, bool> predicate);
    private sealed virtual override IXLTable ClosedXML.Excel.IXLTableRange.get_Table();
    public XLTable get_Table();
    public sealed virtual IXLTableRows InsertRowsAbove(int numberOfRows);
    public sealed virtual IXLTableRows InsertRowsBelow(int numberOfRows);
    public sealed virtual IXLRangeColumn Column(string column);
}
internal class ClosedXML.Excel.XLTableRow : XLRangeRow {
    private XLTableRange _tableRange;
    public XLTableRow(XLTableRange tableRange, XLRangeRow rangeRow);
    public sealed virtual IXLCell Field(int index);
    public sealed virtual IXLCell Field(string name);
    public sealed virtual IXLTableRow Sort();
    public sealed virtual IXLTableRow SortLeftToRight(XLSortOrder sortOrder, bool matchCase, bool ignoreBlanks);
    private XLTableRow RowShift(int rowsToShift);
    private sealed virtual override IXLTableRow ClosedXML.Excel.IXLTableRow.RowAbove();
    private sealed virtual override IXLTableRow ClosedXML.Excel.IXLTableRow.RowAbove(int step);
    public XLTableRow RowAbove();
    public XLTableRow RowAbove(int step);
    private sealed virtual override IXLTableRow ClosedXML.Excel.IXLTableRow.RowBelow();
    private sealed virtual override IXLTableRow ClosedXML.Excel.IXLTableRow.RowBelow(int step);
    public XLTableRow RowBelow();
    public XLTableRow RowBelow(int step);
    public sealed virtual IXLTableRow Clear(XLClearOptions clearOptions);
    public sealed virtual IXLTableRows InsertRowsAbove(int numberOfRows);
    public sealed virtual IXLTableRows InsertRowsBelow(int numberOfRows);
    public sealed virtual void Delete();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class ClosedXML.Excel.XLTableRows : XLStylizedBase {
    private List`1<XLTableRow> _ranges;
    public IEnumerable`1<IXLStyle> Styles { get; }
    protected IEnumerable`1<XLStylizedBase> Children { get; }
    public IXLRanges RangesUsed { get; }
    public XLTableRows(IXLStyle defaultStyle);
    [IteratorStateMachineAttribute("ClosedXML.Excel.XLTableRows/<get_Styles>d__3")]
public virtual IEnumerable`1<IXLStyle> get_Styles();
    [IteratorStateMachineAttribute("ClosedXML.Excel.XLTableRows/<get_Children>d__5")]
protected virtual IEnumerable`1<XLStylizedBase> get_Children();
    public virtual IXLRanges get_RangesUsed();
    public sealed virtual IXLTableRows Clear(XLClearOptions clearOptions);
    public sealed virtual void Delete();
    public sealed virtual void Add(IXLTableRow tableRow);
    public sealed virtual IEnumerator`1<IXLTableRow> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual IXLCells Cells();
    public sealed virtual IXLCells CellsUsed();
    public IXLCells CellsUsed(bool includeFormats);
    public sealed virtual IXLCells CellsUsed(XLCellsUsedOptions options);
    public sealed virtual void Select();
}
internal class ClosedXML.Excel.XLTables : object {
    private Dictionary`2<string, IXLTable> _tables;
    [CompilerGeneratedAttribute]
private ICollection`1<string> <Deleted>k__BackingField;
    internal ICollection`1<string> Deleted { get; private set; }
    [CompilerGeneratedAttribute]
internal ICollection`1<string> get_Deleted();
    [CompilerGeneratedAttribute]
private void set_Deleted(ICollection`1<string> value);
    public sealed virtual void Add(IXLTable table);
    public sealed virtual IXLTables Clear(XLClearOptions clearOptions);
    public sealed virtual bool Contains(string name);
    public sealed virtual IEnumerator`1<IXLTable> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual void Remove(int index);
    public sealed virtual void Remove(string name);
    public sealed virtual IXLTable Table(int index);
    public sealed virtual IXLTable Table(string name);
    public sealed virtual bool TryGetTable(string tableName, IXLTable& table);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ClosedXML.Excel.XLTableTheme : object {
    public static XLTableTheme None;
    public static XLTableTheme TableStyleMedium28;
    public static XLTableTheme TableStyleMedium27;
    public static XLTableTheme TableStyleMedium26;
    public static XLTableTheme TableStyleMedium25;
    public static XLTableTheme TableStyleMedium24;
    public static XLTableTheme TableStyleMedium23;
    public static XLTableTheme TableStyleMedium22;
    public static XLTableTheme TableStyleMedium21;
    public static XLTableTheme TableStyleMedium20;
    public static XLTableTheme TableStyleMedium19;
    public static XLTableTheme TableStyleMedium18;
    public static XLTableTheme TableStyleMedium17;
    public static XLTableTheme TableStyleMedium16;
    public static XLTableTheme TableStyleMedium15;
    public static XLTableTheme TableStyleMedium14;
    public static XLTableTheme TableStyleMedium13;
    public static XLTableTheme TableStyleMedium12;
    public static XLTableTheme TableStyleMedium11;
    public static XLTableTheme TableStyleMedium10;
    public static XLTableTheme TableStyleMedium9;
    public static XLTableTheme TableStyleMedium8;
    public static XLTableTheme TableStyleMedium7;
    public static XLTableTheme TableStyleMedium6;
    public static XLTableTheme TableStyleMedium5;
    public static XLTableTheme TableStyleMedium4;
    public static XLTableTheme TableStyleMedium3;
    public static XLTableTheme TableStyleMedium2;
    public static XLTableTheme TableStyleMedium1;
    public static XLTableTheme TableStyleLight21;
    public static XLTableTheme TableStyleLight20;
    public static XLTableTheme TableStyleLight19;
    public static XLTableTheme TableStyleLight18;
    public static XLTableTheme TableStyleLight17;
    public static XLTableTheme TableStyleLight16;
    public static XLTableTheme TableStyleLight15;
    public static XLTableTheme TableStyleLight14;
    public static XLTableTheme TableStyleLight13;
    public static XLTableTheme TableStyleLight12;
    public static XLTableTheme TableStyleLight11;
    public static XLTableTheme TableStyleLight10;
    public static XLTableTheme TableStyleLight9;
    public static XLTableTheme TableStyleLight8;
    public static XLTableTheme TableStyleLight7;
    public static XLTableTheme TableStyleLight6;
    public static XLTableTheme TableStyleLight5;
    public static XLTableTheme TableStyleLight4;
    public static XLTableTheme TableStyleLight3;
    public static XLTableTheme TableStyleLight2;
    public static XLTableTheme TableStyleLight1;
    public static XLTableTheme TableStyleDark11;
    public static XLTableTheme TableStyleDark10;
    public static XLTableTheme TableStyleDark9;
    public static XLTableTheme TableStyleDark8;
    public static XLTableTheme TableStyleDark7;
    public static XLTableTheme TableStyleDark6;
    public static XLTableTheme TableStyleDark5;
    public static XLTableTheme TableStyleDark4;
    public static XLTableTheme TableStyleDark3;
    public static XLTableTheme TableStyleDark2;
    public static XLTableTheme TableStyleDark1;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static IEnumerable`1<XLTableTheme> allThemes;
    public string Name { get; }
    public XLTableTheme(string name);
    private static XLTableTheme();
    [CompilerGeneratedAttribute]
public string get_Name();
    public static IEnumerable`1<XLTableTheme> GetAllThemes();
    public static XLTableTheme FromName(string name);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class ClosedXML.Excel.XLTextLengthCriteria : XLWholeNumberCriteriaBase {
    public XLTextLengthCriteria(IXLDataValidation dataValidation);
}
internal class ClosedXML.Excel.XLTheme : object {
    [CompilerGeneratedAttribute]
private XLColor <Background1>k__BackingField;
    [CompilerGeneratedAttribute]
private XLColor <Text1>k__BackingField;
    [CompilerGeneratedAttribute]
private XLColor <Background2>k__BackingField;
    [CompilerGeneratedAttribute]
private XLColor <Text2>k__BackingField;
    [CompilerGeneratedAttribute]
private XLColor <Accent1>k__BackingField;
    [CompilerGeneratedAttribute]
private XLColor <Accent2>k__BackingField;
    [CompilerGeneratedAttribute]
private XLColor <Accent3>k__BackingField;
    [CompilerGeneratedAttribute]
private XLColor <Accent4>k__BackingField;
    [CompilerGeneratedAttribute]
private XLColor <Accent5>k__BackingField;
    [CompilerGeneratedAttribute]
private XLColor <Accent6>k__BackingField;
    [CompilerGeneratedAttribute]
private XLColor <Hyperlink>k__BackingField;
    [CompilerGeneratedAttribute]
private XLColor <FollowedHyperlink>k__BackingField;
    public XLColor Background1 { get; public set; }
    public XLColor Text1 { get; public set; }
    public XLColor Background2 { get; public set; }
    public XLColor Text2 { get; public set; }
    public XLColor Accent1 { get; public set; }
    public XLColor Accent2 { get; public set; }
    public XLColor Accent3 { get; public set; }
    public XLColor Accent4 { get; public set; }
    public XLColor Accent5 { get; public set; }
    public XLColor Accent6 { get; public set; }
    public XLColor Hyperlink { get; public set; }
    public XLColor FollowedHyperlink { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual XLColor get_Background1();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Background1(XLColor value);
    [CompilerGeneratedAttribute]
public sealed virtual XLColor get_Text1();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Text1(XLColor value);
    [CompilerGeneratedAttribute]
public sealed virtual XLColor get_Background2();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Background2(XLColor value);
    [CompilerGeneratedAttribute]
public sealed virtual XLColor get_Text2();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Text2(XLColor value);
    [CompilerGeneratedAttribute]
public sealed virtual XLColor get_Accent1();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Accent1(XLColor value);
    [CompilerGeneratedAttribute]
public sealed virtual XLColor get_Accent2();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Accent2(XLColor value);
    [CompilerGeneratedAttribute]
public sealed virtual XLColor get_Accent3();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Accent3(XLColor value);
    [CompilerGeneratedAttribute]
public sealed virtual XLColor get_Accent4();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Accent4(XLColor value);
    [CompilerGeneratedAttribute]
public sealed virtual XLColor get_Accent5();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Accent5(XLColor value);
    [CompilerGeneratedAttribute]
public sealed virtual XLColor get_Accent6();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Accent6(XLColor value);
    [CompilerGeneratedAttribute]
public sealed virtual XLColor get_Hyperlink();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Hyperlink(XLColor value);
    [CompilerGeneratedAttribute]
public sealed virtual XLColor get_FollowedHyperlink();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FollowedHyperlink(XLColor value);
    public sealed virtual XLColor ResolveThemeColor(XLThemeColor themeColor);
}
public enum ClosedXML.Excel.XLThemeColor : Enum {
    public int value__;
    public static XLThemeColor Background1;
    public static XLThemeColor Text1;
    public static XLThemeColor Background2;
    public static XLThemeColor Text2;
    public static XLThemeColor Accent1;
    public static XLThemeColor Accent2;
    public static XLThemeColor Accent3;
    public static XLThemeColor Accent4;
    public static XLThemeColor Accent5;
    public static XLThemeColor Accent6;
    public static XLThemeColor Hyperlink;
    public static XLThemeColor FollowedHyperlink;
}
public class ClosedXML.Excel.XLTimeCriteria : XLValidationCriteria {
    public XLTimeCriteria(IXLDataValidation dataValidation);
    public void Between(TimeSpan minValue, TimeSpan maxValue);
    public void EqualOrGreaterThan(TimeSpan value);
    public void EqualOrLessThan(TimeSpan value);
    public void EqualTo(TimeSpan value);
    public void GreaterThan(TimeSpan value);
    public void LessThan(TimeSpan value);
    public void NotBetween(TimeSpan minValue, TimeSpan maxValue);
    public void NotEqualTo(TimeSpan value);
    private static string GetXLTime(TimeSpan value);
}
public enum ClosedXML.Excel.XLTimePeriod : Enum {
    public int value__;
    public static XLTimePeriod Yesterday;
    public static XLTimePeriod Today;
    public static XLTimePeriod Tomorrow;
    public static XLTimePeriod InTheLast7Days;
    public static XLTimePeriod LastWeek;
    public static XLTimePeriod ThisWeek;
    public static XLTimePeriod NextWeek;
    public static XLTimePeriod LastMonth;
    public static XLTimePeriod ThisMonth;
    public static XLTimePeriod NextMonth;
}
public enum ClosedXML.Excel.XLTopBottomPart : Enum {
    public int value__;
    public static XLTopBottomPart Top;
    public static XLTopBottomPart Bottom;
}
public enum ClosedXML.Excel.XLTopBottomType : Enum {
    public int value__;
    public static XLTopBottomType Items;
    public static XLTopBottomType Percent;
}
public enum ClosedXML.Excel.XLTotalsRowFunction : Enum {
    public int value__;
    public static XLTotalsRowFunction None;
    public static XLTotalsRowFunction Sum;
    public static XLTotalsRowFunction Minimum;
    public static XLTotalsRowFunction Maximum;
    public static XLTotalsRowFunction Average;
    public static XLTotalsRowFunction Count;
    public static XLTotalsRowFunction CountNumbers;
    public static XLTotalsRowFunction StandardDeviation;
    public static XLTotalsRowFunction Variance;
    public static XLTotalsRowFunction Custom;
}
public enum ClosedXML.Excel.XLTransposeOptions : Enum {
    public int value__;
    public static XLTransposeOptions MoveCells;
    public static XLTransposeOptions ReplaceCells;
}
public abstract class ClosedXML.Excel.XLValidationCriteria : object {
    protected IXLDataValidation dataValidation;
    protected XLValidationCriteria(IXLDataValidation dataValidation);
    public sealed virtual void Between(string minValue, string maxValue);
    public sealed virtual void Between(IXLCell minValue, IXLCell maxValue);
    public sealed virtual void EqualOrGreaterThan(string value);
    public sealed virtual void EqualOrGreaterThan(IXLCell cell);
    public sealed virtual void EqualOrLessThan(string value);
    public sealed virtual void EqualOrLessThan(IXLCell cell);
    public sealed virtual void EqualTo(string value);
    public sealed virtual void EqualTo(IXLCell cell);
    public sealed virtual void GreaterThan(string value);
    public sealed virtual void GreaterThan(IXLCell cell);
    public sealed virtual void LessThan(string value);
    public sealed virtual void LessThan(IXLCell cell);
    public sealed virtual void NotBetween(string minValue, string maxValue);
    public sealed virtual void NotBetween(IXLCell minValue, IXLCell maxValue);
    public sealed virtual void NotEqualTo(string value);
    public sealed virtual void NotEqualTo(IXLCell cell);
}
[IsReadOnlyAttribute]
internal class ClosedXML.Excel.XLValueSliceContent : ValueType {
    public XLCellValue Value;
    public long ModifiedAtVersion;
    public int SharedStringId;
    public XLValueSliceContent(XLCellValue value, long modifiedAtVersion, int sharedStringId);
}
public class ClosedXML.Excel.XLWholeNumberCriteria : XLWholeNumberCriteriaBase {
    public XLWholeNumberCriteria(IXLDataValidation dataValidation);
}
public abstract class ClosedXML.Excel.XLWholeNumberCriteriaBase : XLValidationCriteria {
    protected XLWholeNumberCriteriaBase(IXLDataValidation dataValidation);
    public void Between(int minValue, int maxValue);
    public void EqualOrGreaterThan(int value);
    public void EqualOrLessThan(int value);
    public void EqualTo(int value);
    public void GreaterThan(int value);
    public void LessThan(int value);
    public void NotBetween(int minValue, int maxValue);
    public void NotEqualTo(int value);
}
public class ClosedXML.Excel.XLWorkbook : object {
    [CompilerGeneratedAttribute]
private static double <DefaultRowHeight>k__BackingField;
    [CompilerGeneratedAttribute]
private static double <DefaultColumnWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private static XLCellSetValueBehavior <CellSetValueBehavior>k__BackingField;
    internal List`1<UnsupportedSheet> UnsupportedSheets;
    [CompilerGeneratedAttribute]
private long <RecalculationCounter>k__BackingField;
    [CompilerGeneratedAttribute]
private IXLGraphicEngine <GraphicEngine>k__BackingField;
    [CompilerGeneratedAttribute]
private double <DpiX>k__BackingField;
    [CompilerGeneratedAttribute]
private double <DpiY>k__BackingField;
    [CompilerGeneratedAttribute]
private XLPivotCaches <PivotCachesInternal>k__BackingField;
    [CompilerGeneratedAttribute]
private XLWorksheets <WorksheetsInternal>k__BackingField;
    [CompilerGeneratedAttribute]
private IXLNamedRanges <NamedRanges>k__BackingField;
    [CompilerGeneratedAttribute]
private IXLTheme <Theme>k__BackingField;
    [CompilerGeneratedAttribute]
private IXLStyle <Style>k__BackingField;
    [CompilerGeneratedAttribute]
private double <RowHeight>k__BackingField;
    [CompilerGeneratedAttribute]
private double <ColumnWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private IXLPageSetup <PageOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private IXLOutline <Outline>k__BackingField;
    [CompilerGeneratedAttribute]
private XLWorkbookProperties <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private XLCalculateMode <CalculateMode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CalculationOnSave>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ForceFullCalculation>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FullCalculationOnLoad>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FullPrecision>k__BackingField;
    [CompilerGeneratedAttribute]
private XLReferenceStyle <ReferenceStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private IXLCustomProperties <CustomProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowFormulas>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowGridLines>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowOutlineSymbols>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowRowColHeaders>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowRuler>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowWhiteSpace>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowZeros>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RightToLeft>k__BackingField;
    [CompilerGeneratedAttribute]
private IXLFileSharing <FileSharing>k__BackingField;
    private XLLoadSource _loadSource;
    private string _originalFile;
    private Stream _originalStream;
    private XLWorkbookProtection _workbookProtection;
    [CompilerGeneratedAttribute]
private XLIdManager <ShapeIdManager>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Use1904DateSystem>k__BackingField;
    private XLCalcEngine _calcEngine;
    private static XLCalcEngine _calcEngineExpr;
    private SpreadsheetDocumentType _spreadsheetDocumentType;
    [CompilerGeneratedAttribute]
private string <Author>k__BackingField;
    private Dictionary`2<string, Color> _colorList;
    private Dictionary`2<string, double> knownUnits;
    private static Regex definedNameRegex;
    private int lastColumnNumber;
    private static String[] DateCellFormats;
    private int lastRow;
    private int disposeSignaled;
    private bool disposed;
    public static IXLStyle DefaultStyle { get; }
    internal static XLStyleValue DefaultStyleValue { get; }
    public static double DefaultRowHeight { get; private set; }
    public static double DefaultColumnWidth { get; private set; }
    public static IXLPageSetup DefaultPageOptions { get; }
    public static IXLOutline DefaultOutline { get; }
    public static XLCellSetValueBehavior CellSetValueBehavior { get; public set; }
    internal long RecalculationCounter { get; private set; }
    internal IXLGraphicEngine GraphicEngine { get; }
    internal double DpiX { get; }
    internal double DpiY { get; }
    internal XLPivotCaches PivotCachesInternal { get; }
    internal XLWorksheets WorksheetsInternal { get; private set; }
    public IXLWorksheets Worksheets { get; }
    public IXLNamedRanges NamedRanges { get; private set; }
    public IXLTheme Theme { get; private set; }
    public IXLPivotCaches PivotCaches { get; }
    public IXLStyle Style { get; public set; }
    public double RowHeight { get; public set; }
    public double ColumnWidth { get; public set; }
    public IXLPageSetup PageOptions { get; public set; }
    public IXLOutline Outline { get; public set; }
    public XLWorkbookProperties Properties { get; public set; }
    public XLCalculateMode CalculateMode { get; public set; }
    public bool CalculationOnSave { get; public set; }
    public bool ForceFullCalculation { get; public set; }
    public bool FullCalculationOnLoad { get; public set; }
    public bool FullPrecision { get; public set; }
    public XLReferenceStyle ReferenceStyle { get; public set; }
    public IXLCustomProperties CustomProperties { get; private set; }
    public bool ShowFormulas { get; public set; }
    public bool ShowGridLines { get; public set; }
    public bool ShowOutlineSymbols { get; public set; }
    public bool ShowRowColHeaders { get; public set; }
    public bool ShowRuler { get; public set; }
    public bool ShowWhiteSpace { get; public set; }
    public bool ShowZeros { get; public set; }
    public bool RightToLeft { get; public set; }
    public bool DefaultShowFormulas { get; }
    public bool DefaultShowGridLines { get; }
    public bool DefaultShowOutlineSymbols { get; }
    public bool DefaultShowRowColHeaders { get; }
    public bool DefaultShowRuler { get; }
    public bool DefaultShowWhiteSpace { get; }
    public bool DefaultShowZeros { get; }
    public IXLFileSharing FileSharing { get; }
    public bool DefaultRightToLeft { get; }
    internal XLIdManager ShapeIdManager { get; private set; }
    public bool Use1904DateSystem { get; public set; }
    internal XLCalcEngine CalcEngine { get; }
    private static XLCalcEngine CalcEngineExpr { get; }
    public string Author { get; public set; }
    public bool LockStructure { get; public set; }
    public bool LockWindows { get; public set; }
    public bool IsPasswordProtected { get; }
    public bool IsProtected { get; }
    private IXLWorkbookProtection ClosedXML.Excel.IXLProtectable<ClosedXML.Excel.IXLWorkbookProtection,ClosedXML.Excel.XLWorkbookProtectionElements>.Protection { get; private set; }
    internal XLWorkbookProtection Protection { get; internal set; }
    internal XLWorkbook(string file, bool asTemplate);
    public XLWorkbook(string file);
    public XLWorkbook(string file, LoadOptions loadOptions);
    public XLWorkbook(Stream stream);
    public XLWorkbook(Stream stream, LoadOptions loadOptions);
    public XLWorkbook(LoadOptions loadOptions);
    private static XLWorkbook();
    public static IXLStyle get_DefaultStyle();
    internal static XLStyleValue get_DefaultStyleValue();
    [CompilerGeneratedAttribute]
public static double get_DefaultRowHeight();
    [CompilerGeneratedAttribute]
private static void set_DefaultRowHeight(double value);
    [CompilerGeneratedAttribute]
public static double get_DefaultColumnWidth();
    [CompilerGeneratedAttribute]
private static void set_DefaultColumnWidth(double value);
    public static IXLPageSetup get_DefaultPageOptions();
    public static IXLOutline get_DefaultOutline();
    [CompilerGeneratedAttribute]
public static XLCellSetValueBehavior get_CellSetValueBehavior();
    [CompilerGeneratedAttribute]
public static void set_CellSetValueBehavior(XLCellSetValueBehavior value);
    public static XLWorkbook OpenFromTemplate(string path);
    [CompilerGeneratedAttribute]
internal long get_RecalculationCounter();
    [CompilerGeneratedAttribute]
private void set_RecalculationCounter(long value);
    [CompilerGeneratedAttribute]
internal IXLGraphicEngine get_GraphicEngine();
    [CompilerGeneratedAttribute]
internal double get_DpiX();
    [CompilerGeneratedAttribute]
internal double get_DpiY();
    [CompilerGeneratedAttribute]
internal XLPivotCaches get_PivotCachesInternal();
    internal void InvalidateFormulas();
    [CompilerGeneratedAttribute]
internal XLWorksheets get_WorksheetsInternal();
    [CompilerGeneratedAttribute]
private void set_WorksheetsInternal(XLWorksheets value);
    public sealed virtual IXLWorksheets get_Worksheets();
    [CompilerGeneratedAttribute]
public sealed virtual IXLNamedRanges get_NamedRanges();
    [CompilerGeneratedAttribute]
private void set_NamedRanges(IXLNamedRanges value);
    [CompilerGeneratedAttribute]
public sealed virtual IXLTheme get_Theme();
    [CompilerGeneratedAttribute]
private void set_Theme(IXLTheme value);
    public sealed virtual IXLPivotCaches get_PivotCaches();
    [CompilerGeneratedAttribute]
public sealed virtual IXLStyle get_Style();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Style(IXLStyle value);
    [CompilerGeneratedAttribute]
public sealed virtual double get_RowHeight();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RowHeight(double value);
    [CompilerGeneratedAttribute]
public sealed virtual double get_ColumnWidth();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ColumnWidth(double value);
    [CompilerGeneratedAttribute]
public sealed virtual IXLPageSetup get_PageOptions();
    [CompilerGeneratedAttribute]
public sealed virtual void set_PageOptions(IXLPageSetup value);
    [CompilerGeneratedAttribute]
public sealed virtual IXLOutline get_Outline();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Outline(IXLOutline value);
    [CompilerGeneratedAttribute]
public sealed virtual XLWorkbookProperties get_Properties();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Properties(XLWorkbookProperties value);
    [CompilerGeneratedAttribute]
public sealed virtual XLCalculateMode get_CalculateMode();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CalculateMode(XLCalculateMode value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_CalculationOnSave();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CalculationOnSave(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ForceFullCalculation();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ForceFullCalculation(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_FullCalculationOnLoad();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FullCalculationOnLoad(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_FullPrecision();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FullPrecision(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual XLReferenceStyle get_ReferenceStyle();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ReferenceStyle(XLReferenceStyle value);
    [CompilerGeneratedAttribute]
public sealed virtual IXLCustomProperties get_CustomProperties();
    [CompilerGeneratedAttribute]
private void set_CustomProperties(IXLCustomProperties value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ShowFormulas();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ShowFormulas(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ShowGridLines();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ShowGridLines(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ShowOutlineSymbols();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ShowOutlineSymbols(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ShowRowColHeaders();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ShowRowColHeaders(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ShowRuler();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ShowRuler(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ShowWhiteSpace();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ShowWhiteSpace(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ShowZeros();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ShowZeros(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_RightToLeft();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RightToLeft(bool value);
    public sealed virtual bool get_DefaultShowFormulas();
    public sealed virtual bool get_DefaultShowGridLines();
    public sealed virtual bool get_DefaultShowOutlineSymbols();
    public sealed virtual bool get_DefaultShowRowColHeaders();
    public sealed virtual bool get_DefaultShowRuler();
    public sealed virtual bool get_DefaultShowWhiteSpace();
    public sealed virtual bool get_DefaultShowZeros();
    [CompilerGeneratedAttribute]
public sealed virtual IXLFileSharing get_FileSharing();
    public sealed virtual bool get_DefaultRightToLeft();
    private void InitializeTheme();
    public sealed virtual IXLNamedRange NamedRange(string rangeName);
    public sealed virtual bool TryGetWorksheet(string name, IXLWorksheet& worksheet);
    public sealed virtual IXLRange RangeFromFullAddress(string rangeAddress, IXLWorksheet& ws);
    public IXLCell CellFromFullAddress(string cellAddress, IXLWorksheet& ws);
    public sealed virtual void Save();
    public sealed virtual void Save(bool validate, bool evaluateFormulae);
    public sealed virtual void Save(SaveOptions options);
    public sealed virtual void SaveAs(string file);
    public sealed virtual void SaveAs(string file, bool validate, bool evaluateFormulae);
    public sealed virtual void SaveAs(string file, SaveOptions options);
    private static SpreadsheetDocumentType GetSpreadsheetDocumentType(string filePath);
    private void checkForWorksheetsPresent();
    public sealed virtual void SaveAs(Stream stream);
    public sealed virtual void SaveAs(Stream stream, bool validate, bool evaluateFormulae);
    public sealed virtual void SaveAs(Stream stream, SaveOptions options);
    internal static void CopyStream(Stream input, Stream output);
    public sealed virtual IXLTable Table(string tableName, StringComparison comparisonType);
    public sealed virtual IXLWorksheet Worksheet(string name);
    public sealed virtual IXLWorksheet Worksheet(int position);
    public sealed virtual IXLCustomProperty CustomProperty(string name);
    public sealed virtual IXLCells FindCells(Func`2<IXLCell, bool> predicate);
    public sealed virtual IXLRows FindRows(Func`2<IXLRow, bool> predicate);
    public sealed virtual IXLColumns FindColumns(Func`2<IXLColumn, bool> predicate);
    [IteratorStateMachineAttribute("ClosedXML.Excel.XLWorkbook/<Search>d__183")]
public sealed virtual IEnumerable`1<IXLCell> Search(string searchText, CompareOptions compareOptions, bool searchFormulae);
    public sealed virtual IXLCell Cell(string namedCell);
    public sealed virtual IXLCells Cells(string namedCells);
    public sealed virtual IXLRange Range(string range);
    public sealed virtual IXLRanges Ranges(string ranges);
    [CompilerGeneratedAttribute]
internal XLIdManager get_ShapeIdManager();
    [CompilerGeneratedAttribute]
private void set_ShapeIdManager(XLIdManager value);
    private void DisposeManaged();
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Use1904DateSystem();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Use1904DateSystem(bool value);
    public sealed virtual XLWorkbook SetUse1904DateSystem();
    public sealed virtual XLWorkbook SetUse1904DateSystem(bool value);
    public sealed virtual IXLWorksheet AddWorksheet();
    public sealed virtual IXLWorksheet AddWorksheet(int position);
    public sealed virtual IXLWorksheet AddWorksheet(string sheetName);
    public sealed virtual IXLWorksheet AddWorksheet(string sheetName, int position);
    public sealed virtual void AddWorksheet(DataSet dataSet);
    public sealed virtual void AddWorksheet(IXLWorksheet worksheet);
    public sealed virtual IXLWorksheet AddWorksheet(DataTable dataTable);
    public sealed virtual IXLWorksheet AddWorksheet(DataTable dataTable, string sheetName);
    public sealed virtual IXLWorksheet AddWorksheet(DataTable dataTable, string sheetName, string tableName);
    internal XLCalcEngine get_CalcEngine();
    public sealed virtual XLCellValue Evaluate(string expression);
    public sealed virtual void RecalculateAllFormulas();
    private static XLCalcEngine get_CalcEngineExpr();
    public static XLCellValue EvaluateExpr(string expression);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Author();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Author(string value);
    public sealed virtual bool get_LockStructure();
    public sealed virtual void set_LockStructure(bool value);
    public sealed virtual XLWorkbook SetLockStructure(bool value);
    public sealed virtual bool get_LockWindows();
    public sealed virtual void set_LockWindows(bool value);
    public sealed virtual XLWorkbook SetLockWindows(bool value);
    public sealed virtual bool get_IsPasswordProtected();
    public sealed virtual bool get_IsProtected();
    private sealed virtual override IXLWorkbookProtection ClosedXML.Excel.IXLProtectable<ClosedXML.Excel.IXLWorkbookProtection,ClosedXML.Excel.XLWorkbookProtectionElements>.get_Protection();
    private sealed virtual override void ClosedXML.Excel.IXLProtectable<ClosedXML.Excel.IXLWorkbookProtection,ClosedXML.Excel.XLWorkbookProtectionElements>.set_Protection(IXLWorkbookProtection value);
    internal XLWorkbookProtection get_Protection();
    internal void set_Protection(XLWorkbookProtection value);
    public sealed virtual IXLWorkbookProtection Protect(Algorithm algorithm);
    public IXLWorkbookProtection Protect(XLWorkbookProtectionElements allowedElements);
    public IXLWorkbookProtection Protect(Algorithm algorithm, XLWorkbookProtectionElements allowedElements);
    public sealed virtual IXLWorkbookProtection Protect(string password, Algorithm algorithm);
    public IXLWorkbookProtection Protect(string password, Algorithm algorithm, XLWorkbookProtectionElements allowedElements);
    private sealed virtual override IXLElementProtection ClosedXML.Excel.IXLProtectable.Protect(Algorithm algorithm);
    private sealed virtual override IXLElementProtection ClosedXML.Excel.IXLProtectable.Protect(string password, Algorithm algorithm);
    private sealed virtual override IXLWorkbookProtection ClosedXML.Excel.IXLProtectable<ClosedXML.Excel.IXLWorkbookProtection,ClosedXML.Excel.XLWorkbookProtectionElements>.Protect(XLWorkbookProtectionElements allowedElements);
    private sealed virtual override IXLWorkbookProtection ClosedXML.Excel.IXLProtectable<ClosedXML.Excel.IXLWorkbookProtection,ClosedXML.Excel.XLWorkbookProtectionElements>.Protect(Algorithm algorithm, XLWorkbookProtectionElements allowedElements);
    private sealed virtual override IXLWorkbookProtection ClosedXML.Excel.IXLProtectable<ClosedXML.Excel.IXLWorkbookProtection,ClosedXML.Excel.XLWorkbookProtectionElements>.Protect(string password, Algorithm algorithm, XLWorkbookProtectionElements allowedElements);
    public sealed virtual IXLWorkbookProtection Unprotect();
    public sealed virtual IXLWorkbookProtection Unprotect(string password);
    private sealed virtual override IXLElementProtection ClosedXML.Excel.IXLProtectable.Unprotect();
    private sealed virtual override IXLElementProtection ClosedXML.Excel.IXLProtectable.Unprotect(string password);
    public virtual string ToString();
    public static OpenXmlElement GetAnchorFromImageId(DrawingsPart drawingsPart, string relId);
    public static OpenXmlElement GetAnchorFromImageIndex(WorksheetPart worksheetPart, int index);
    public static NonVisualDrawingProperties GetPropertiesFromAnchor(OpenXmlElement anchor);
    public static string GetImageRelIdFromAnchor(OpenXmlElement anchor);
    private static bool IsAllowedAnchor(OpenXmlElement anchor);
    private void Load(string file);
    private void Load(Stream stream);
    private void LoadSheets(string fileName);
    private void LoadSheets(Stream stream);
    private void LoadSheetsFromTemplate(string fileName);
    private void ResetAllRelIds();
    private void LoadSpreadsheetDocument(SpreadsheetDocument dSpreadsheet);
    private XLPivotSourceReference ParsePivotSourceReference(PivotTableCacheDefinitionPart pivotTableCacheDefinitionPart);
    internal static double CalculateColumnWidth(double charWidth, IXLFont font, XLWorkbook workbook);
    private void LoadPivotStyleFormats(XLPivotTable pt, PivotTableDefinition ptd, Dictionary`2<int, DifferentialFormat> differentialFormats);
    private static void LoadFieldOptions(PivotField pf, IXLPivotField pivotField);
    private static void LoadSubtotals(PivotField pf, IXLPivotField pivotField);
    private void LoadDrawings(WorksheetPart wsPart, XLWorksheet ws);
    private static int ConvertFromEnglishMetricUnits(long emu, double resolution);
    private static XLMarker LoadMarker(XLWorksheet ws, MarkerType marker);
    private static IList`1<XElement> GetCommentShapes(WorksheetPart worksheetPart);
    private string GetTableColumnName(string name);
    private void LoadColorsAndLines(IXLDrawing`1<T> drawing, XElement shape);
    private void LoadTextBox(IXLDrawing`1<T> xlDrawing, XElement textBox);
    private void LoadTextBoxInset(IXLDrawing`1<T> xlDrawing, XAttribute attInset);
    private double GetInsetValue(string value);
    private static void LoadTextBoxStyle(IXLDrawing`1<T> xlDrawing, XAttribute attStyle);
    private void LoadClientData(IXLDrawing`1<T> drawing, XElement clientData);
    private void LoadDrawingHAlignment(IXLDrawing`1<T> drawing, XElement clientData);
    private void LoadDrawingVAlignment(IXLDrawing`1<T> drawing, XElement clientData);
    private void LoadDrawingProtection(IXLDrawing`1<T> drawing, XElement clientData);
    private static void LoadDrawingPositioning(IXLDrawing`1<T> drawing, XElement clientData);
    private static void LoadClientDataAnchor(IXLDrawing`1<T> drawing, XElement anchor);
    private void LoadShapeProperties(IXLDrawing`1<T> xlDrawing, XElement shape);
    private bool TryGetPtValue(string value, Double& result);
    private void LoadDefinedNames(Workbook workbook);
    [IteratorStateMachineAttribute("ClosedXML.Excel.XLWorkbook/<validateDefinedNames>d__307")]
private IEnumerable`1<string> validateDefinedNames(IEnumerable`1<string> definedNames);
    private void LoadPrintTitles(DefinedName definedName);
    private void SetColumnsOrRowsToRepeat(string area);
    private static bool IsColReference(string sheetArea);
    private static bool IsRowReference(string sheetArea);
    private static void ParseReference(string item, String& sheetName, String& sheetArea);
    private void LoadCells(SharedStringItem[] sharedStrings, Stylesheet s, NumberingFormats numberingFormats, Fills fills, Borders borders, Fonts fonts, Dictionary`2<UInt32, string> sharedFormulasR1C1, XLWorksheet ws, Dictionary`2<int, IXLStyle> styleList, Cell cell, int rowIndex);
    private void SetCellText(XLCell xlCell, RstType element);
    private void LoadNumberFormat(NumberingFormat nfSource, IXLNumberFormat nf);
    private void LoadBorder(Border borderSource, IXLBorder border);
    private void LoadBorderValues(BorderPropertiesType source, Func`2<XLBorderStyleValues, IXLStyle> setBorder, Func`2<XLColor, IXLStyle> setColor);
    private void LoadFill(Fill openXMLFill, IXLFill closedXMLFill, bool differentialFillFormat);
    private void LoadFont(OpenXmlElement fontSource, IXLFontBase fontBase);
    private void LoadRows(Stylesheet s, NumberingFormats numberingFormats, Fills fills, Borders borders, Fonts fonts, XLWorksheet ws, SharedStringItem[] sharedStrings, Dictionary`2<UInt32, string> sharedFormulasR1C1, Dictionary`2<int, IXLStyle> styleList, Row row);
    private void LoadColumns(Stylesheet s, NumberingFormats numberingFormats, Fills fills, Borders borders, Fonts fonts, XLWorksheet ws, Columns columns);
    private static XLDataType GetNumberDataType(XLNumberFormatValue numberFormat);
    private static Nullable`1<XLDataType> GetDataTypeFromFormat(string format);
    private static void LoadAutoFilter(AutoFilter af, XLWorksheet ws);
    private static void LoadAutoFilterColumns(AutoFilter af, XLAutoFilter autoFilter);
    private static void LoadAutoFilterSort(AutoFilter af, XLWorksheet ws, IXLAutoFilter autoFilter);
    private static void LoadSheetProtection(SheetProtection sp, XLWorksheet ws);
    private static void LoadDataValidations(DataValidations dataValidations, XLWorksheet ws);
    private void LoadConditionalFormatting(ConditionalFormatting conditionalFormatting, XLWorksheet ws, Dictionary`2<int, DifferentialFormat> differentialFormats);
    private void LoadExtensions(WorksheetExtensionList extensions, XLWorksheet ws);
    private static void LoadWorkbookProtection(WorkbookProtection wp, XLWorkbook wb);
    private static XLFormula GetFormula(string value);
    private void ExtractConditionalFormatValueObjects(XLConditionalFormat conditionalFormat, OpenXmlElement element);
    private static void LoadHyperlinks(Hyperlinks hyperlinks, WorksheetPart worksheetPart, XLWorksheet ws);
    private static void LoadColumnBreaks(ColumnBreaks columnBreaks, XLWorksheet ws);
    private static void LoadRowBreaks(RowBreaks rowBreaks, XLWorksheet ws);
    private void LoadSheetProperties(SheetProperties sheetProperty, XLWorksheet ws, PageSetupProperties& pageSetupProperties);
    private static void LoadHeaderFooter(HeaderFooter headerFooter, XLWorksheet ws);
    private static void LoadPageSetup(PageSetup pageSetup, XLWorksheet ws, PageSetupProperties pageSetupProperties);
    private static void LoadPageMargins(PageMargins pageMargins, XLWorksheet ws);
    private static void LoadPrintOptions(PrintOptions printOptions, XLWorksheet ws);
    private static void LoadSheetViews(SheetViews sheetViews, XLWorksheet ws);
    private void SetProperties(SpreadsheetDocument dSpreadsheet);
    private void ApplyStyle(IXLStylized xlStylized, int styleIndex, Stylesheet s, Fills fills, Borders borders, Fonts fonts, NumberingFormats numberingFormats);
    private void LoadStyle(XLStyleKey& xlStyle, int styleIndex, Stylesheet s, Fills fills, Borders borders, Fonts fonts, NumberingFormats numberingFormats);
    private static bool UInt32HasValue(UInt32Value value);
    private static bool GetBoolean(BooleanPropertyType property);
    private bool Validate(SpreadsheetDocument package);
    private void CreatePackage(string filePath, SpreadsheetDocumentType spreadsheetDocumentType, SaveOptions options);
    private void CreatePackage(Stream stream, bool newStream, SpreadsheetDocumentType spreadsheetDocumentType, SaveOptions options);
    private void DeleteSheetAndDependencies(WorkbookPart wbPart, string sheetId);
    private void CreateParts(SpreadsheetDocument document, SaveOptions options);
    private bool DeleteExistingCommentsShapes(VmlDrawingPart vmlDrawingPart);
    private static void SynchronizeTableParts(XLTables tables, WorksheetPart worksheetPart, SaveContext context);
    private static void GenerateTableParts(XLTables tables, WorksheetPart worksheetPart, SaveContext context);
    private void GenerateExtendedFilePropertiesPartContent(ExtendedFilePropertiesPart extendedFilePropertiesPart);
    private static void InsertOnVtVector(VTVector vTVector, string property, int index, string text);
    private List`1<string> GetModifiedNamedRanges();
    private void GenerateWorkbookPartContent(WorkbookPart workbookPart, SaveOptions options, SaveContext context);
    private void DeleteCalculationChainPartContent(WorkbookPart workbookPart, SaveContext context);
    private void GenerateCalculationChainPartContent(WorkbookPart workbookPart, SaveContext context);
    private void GenerateThemePartContent(ThemePart themePart);
    private void GenerateCustomFilePropertiesPartContent(CustomFilePropertiesPart customFilePropertiesPart);
    private void SetPackageProperties(OpenXmlPackage document);
    private static string GetTableName(string originalTableName, SaveContext context);
    private static void GenerateTableDefinitionPartContent(TableDefinitionPart tableDefinitionPart, XLTable xlTable, SaveContext context);
    private static void SynchronizePivotTableParts(WorkbookPart workbookPart, IReadOnlyList`1<IXLPivotTable> allPivotTables, SaveContext context);
    private void GeneratePivotCaches(WorkbookPart workbookPart, SaveContext context);
    private static void GeneratePivotTables(WorkbookPart workbookPart, WorksheetPart worksheetPart, XLWorksheet xlWorksheet, SaveContext context);
    private void GeneratePivotTableCacheDefinitionPartContent(WorkbookPart workbookPart, XLPivotCache pivotCache, SaveContext context);
    private static void GeneratePivotTablePartContent(WorkbookPart workbookPart, PivotTablePart pivotTablePart, XLPivotTable pt, SaveContext context);
    private static void GeneratePivotTableFormat(bool isRow, XLPivotStyleFormat styleFormat, PivotTableDefinition pivotTableDefinition, SaveContext context);
    private static void GeneratePivotFieldFormat(XLPivotStyleFormatTarget target, XLPivotTable pt, XLPivotField pivotField, XLPivotStyleFormat styleFormat, PivotTableDefinition pivotTableDefinition, SaveContext context);
    private static PivotArea GenerateDefaultPivotArea(XLPivotStyleFormatTarget target);
    private static void GeneratePivotAreaReference(XLPivotTable pt, PivotAreaReferences pivotAreaReferences, AbstractPivotFieldReference fieldReference, SaveContext context);
    private static bool GenerateVmlDrawingPartContent(VmlDrawingPart vmlDrawingPart, XLWorksheet xlWorksheet);
    private static Shape GenerateCommentShape(XLCell c);
    private static Stroke GetStroke(XLCell c);
    private static TextBox GetTextBox(IXLDrawingStyle ds);
    private static Anchor GetAnchor(XLCell cell);
    private static StringValue GetCommentStyle(XLCell cell);
    private void GenerateWorkbookStylesPartContent(WorkbookStylesPart workbookStylesPart, SaveContext context);
    private void AddDifferentialFormats(WorkbookStylesPart workbookStylesPart, SaveContext context);
    private void FillDifferentialFormatsCollection(DifferentialFormats differentialFormats, Dictionary`2<XLStyleValue, int> dictionary);
    private static void AddConditionalDifferentialFormat(DifferentialFormats differentialFormats, IXLConditionalFormat cf, SaveContext context);
    private static void AddStyleAsDifferentialFormat(DifferentialFormats differentialFormats, XLStyleValue style, SaveContext context);
    private static void ResolveRest(WorkbookStylesPart workbookStylesPart, SaveContext context);
    private static void ResolveCellStyleFormats(WorkbookStylesPart workbookStylesPart, SaveContext context);
    private static bool ApplyFill(StyleInfo styleInfo);
    private static bool ApplyBorder(StyleInfo styleInfo);
    private static bool ApplyProtection(StyleInfo styleInfo);
    private static CellFormat GetCellFormat(StyleInfo styleInfo);
    private static Protection GetProtection(StyleInfo styleInfo);
    private static bool CellFormatsAreEqual(CellFormat f, StyleInfo styleInfo, bool compareAlignment);
    private static bool ProtectionsAreEqual(Protection protection, XLProtectionValue xlProtection);
    private static bool QuotePrefixesAreEqual(BooleanValue quotePrefix, bool includeQuotePrefix);
    private static bool AlignmentsAreEqual(Alignment alignment, XLAlignmentValue xlAlignment);
    private Dictionary`2<XLBorderValue, BorderInfo> ResolveBorders(WorkbookStylesPart workbookStylesPart, Dictionary`2<XLBorderValue, BorderInfo> sharedBorders);
    private static Border GetNewBorder(BorderInfo borderInfo, bool ignoreMod);
    private bool BordersAreEqual(Border b, XLBorderValue xlBorder);
    private Dictionary`2<XLFillValue, FillInfo> ResolveFills(WorkbookStylesPart workbookStylesPart, Dictionary`2<XLFillValue, FillInfo> sharedFills);
    private static void ResolveFillWithPattern(Fills fills, int index, PatternValues patternValues);
    private static Fill GetNewFill(FillInfo fillInfo, bool differentialFillFormat, bool ignoreMod);
    private bool FillsAreEqual(Fill f, XLFillValue xlFill, bool fromDifferentialFormat);
    private void ResolveFonts(WorkbookStylesPart workbookStylesPart, SaveContext context);
    private static Font GetNewFont(FontInfo fontInfo, bool ignoreMod);
    private bool FontsAreEqual(Font f, XLFontValue xlFont);
    private static Dictionary`2<XLNumberFormatValue, NumberFormatInfo> ResolveNumberFormats(WorkbookStylesPart workbookStylesPart, HashSet`1<XLNumberFormatValue> customNumberFormats, UInt32 defaultFormatId);
    private static bool CustomNumberFormatsAreEqual(NumberingFormat nf, XLNumberFormatValue xlNumberFormat);
    [CompilerGeneratedAttribute]
private IXLRange <Ranges>b__199_0(string r);
    [CompilerGeneratedAttribute]
internal static void <SynchronizePivotTableParts>g__RemoveUnusedPivotCacheDefinitionParts|370_1(WorkbookPart workbookPart, IReadOnlyList`1<IXLPivotTable> allPivotTables);
    [CompilerGeneratedAttribute]
internal static void <SynchronizePivotTableParts>g__AddUsedPivotCacheDefinitionParts|370_2(WorkbookPart workbookPart, IReadOnlyList`1<IXLPivotTable> allPivotTables, SaveContext context);
    [CompilerGeneratedAttribute]
internal static int <ResolveRest>g__GetOpenXmlTextRotation|390_0(XLAlignmentValue alignment);
    private void ThrowIfDisposed();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class ClosedXML.Excel.XLWorkbookProperties : object {
    [CompilerGeneratedAttribute]
private string <Author>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Subject>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Category>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Keywords>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Comments>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <Created>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <Modified>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LastModifiedBy>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Company>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Manager>k__BackingField;
    public string Author { get; public set; }
    public string Title { get; public set; }
    public string Subject { get; public set; }
    public string Category { get; public set; }
    public string Keywords { get; public set; }
    public string Comments { get; public set; }
    public string Status { get; public set; }
    public DateTime Created { get; public set; }
    public DateTime Modified { get; public set; }
    public string LastModifiedBy { get; public set; }
    public string Company { get; public set; }
    public string Manager { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Author();
    [CompilerGeneratedAttribute]
public void set_Author(string value);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [CompilerGeneratedAttribute]
public string get_Subject();
    [CompilerGeneratedAttribute]
public void set_Subject(string value);
    [CompilerGeneratedAttribute]
public string get_Category();
    [CompilerGeneratedAttribute]
public void set_Category(string value);
    [CompilerGeneratedAttribute]
public string get_Keywords();
    [CompilerGeneratedAttribute]
public void set_Keywords(string value);
    [CompilerGeneratedAttribute]
public string get_Comments();
    [CompilerGeneratedAttribute]
public void set_Comments(string value);
    [CompilerGeneratedAttribute]
public string get_Status();
    [CompilerGeneratedAttribute]
public void set_Status(string value);
    [CompilerGeneratedAttribute]
public DateTime get_Created();
    [CompilerGeneratedAttribute]
public void set_Created(DateTime value);
    [CompilerGeneratedAttribute]
public DateTime get_Modified();
    [CompilerGeneratedAttribute]
public void set_Modified(DateTime value);
    [CompilerGeneratedAttribute]
public string get_LastModifiedBy();
    [CompilerGeneratedAttribute]
public void set_LastModifiedBy(string value);
    [CompilerGeneratedAttribute]
public string get_Company();
    [CompilerGeneratedAttribute]
public void set_Company(string value);
    [CompilerGeneratedAttribute]
public string get_Manager();
    [CompilerGeneratedAttribute]
public void set_Manager(string value);
}
internal class ClosedXML.Excel.XLWorkbookProtection : object {
    [CompilerGeneratedAttribute]
private Algorithm <Algorithm>k__BackingField;
    [CompilerGeneratedAttribute]
private XLWorkbookProtectionElements <AllowedElements>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsProtected>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Base64EncodedSalt>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PasswordHash>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <SpinCount>k__BackingField;
    public Algorithm Algorithm { get; internal set; }
    public XLWorkbookProtectionElements AllowedElements { get; public set; }
    public bool IsPasswordProtected { get; }
    public bool IsProtected { get; internal set; }
    internal string Base64EncodedSalt { get; internal set; }
    internal string PasswordHash { get; internal set; }
    internal UInt32 SpinCount { get; internal set; }
    public XLWorkbookProtection(Algorithm algorithm);
    public XLWorkbookProtection(Algorithm algorithm, XLWorkbookProtectionElements allowedElements);
    [CompilerGeneratedAttribute]
public sealed virtual Algorithm get_Algorithm();
    [CompilerGeneratedAttribute]
internal void set_Algorithm(Algorithm value);
    [CompilerGeneratedAttribute]
public sealed virtual XLWorkbookProtectionElements get_AllowedElements();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AllowedElements(XLWorkbookProtectionElements value);
    public sealed virtual bool get_IsPasswordProtected();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsProtected();
    [CompilerGeneratedAttribute]
internal void set_IsProtected(bool value);
    [CompilerGeneratedAttribute]
internal string get_Base64EncodedSalt();
    [CompilerGeneratedAttribute]
internal void set_Base64EncodedSalt(string value);
    [CompilerGeneratedAttribute]
internal string get_PasswordHash();
    [CompilerGeneratedAttribute]
internal void set_PasswordHash(string value);
    [CompilerGeneratedAttribute]
internal UInt32 get_SpinCount();
    [CompilerGeneratedAttribute]
internal void set_SpinCount(UInt32 value);
    public IXLWorkbookProtection AllowElement(XLWorkbookProtectionElements element, bool allowed);
    public IXLWorkbookProtection AllowEverything();
    public IXLWorkbookProtection AllowNone();
    public sealed virtual object Clone();
    public IXLWorkbookProtection CopyFrom(IXLElementProtection`1<XLWorkbookProtectionElements> workbookProtection);
    public IXLWorkbookProtection DisallowElement(XLWorkbookProtectionElements element);
    public IXLWorkbookProtection Protect(Algorithm algorithm);
    public IXLWorkbookProtection Protect(XLWorkbookProtectionElements allowedElements);
    public IXLWorkbookProtection Protect(Algorithm algorithm, XLWorkbookProtectionElements allowedElements);
    public IXLWorkbookProtection Protect(string password, Algorithm algorithm, XLWorkbookProtectionElements allowedElements);
    public IXLWorkbookProtection Unprotect();
    public IXLWorkbookProtection Unprotect(string password);
    private sealed virtual override IXLElementProtection`1<XLWorkbookProtectionElements> ClosedXML.Excel.IXLElementProtection<ClosedXML.Excel.XLWorkbookProtectionElements>.AllowElement(XLWorkbookProtectionElements element, bool allowed);
    private sealed virtual override IXLElementProtection`1<XLWorkbookProtectionElements> ClosedXML.Excel.IXLElementProtection<ClosedXML.Excel.XLWorkbookProtectionElements>.AllowEverything();
    private sealed virtual override IXLElementProtection`1<XLWorkbookProtectionElements> ClosedXML.Excel.IXLElementProtection<ClosedXML.Excel.XLWorkbookProtectionElements>.AllowNone();
    private sealed virtual override IXLElementProtection`1<XLWorkbookProtectionElements> ClosedXML.Excel.IXLElementProtection<ClosedXML.Excel.XLWorkbookProtectionElements>.DisallowElement(XLWorkbookProtectionElements element);
    private sealed virtual override IXLElementProtection`1<XLWorkbookProtectionElements> ClosedXML.Excel.IXLElementProtection<ClosedXML.Excel.XLWorkbookProtectionElements>.Protect(Algorithm algorithm);
    private sealed virtual override IXLElementProtection`1<XLWorkbookProtectionElements> ClosedXML.Excel.IXLElementProtection<ClosedXML.Excel.XLWorkbookProtectionElements>.Protect(string password, Algorithm algorithm);
    private sealed virtual override IXLWorkbookProtection ClosedXML.Excel.IXLWorkbookProtection.Protect(XLWorkbookProtectionElements allowedElements);
    private sealed virtual override IXLWorkbookProtection ClosedXML.Excel.IXLWorkbookProtection.Protect(Algorithm algorithm, XLWorkbookProtectionElements allowedElements);
    private sealed virtual override IXLWorkbookProtection ClosedXML.Excel.IXLWorkbookProtection.Protect(string password, Algorithm algorithm, XLWorkbookProtectionElements allowedElements);
    private sealed virtual override IXLElementProtection`1<XLWorkbookProtectionElements> ClosedXML.Excel.IXLElementProtection<ClosedXML.Excel.XLWorkbookProtectionElements>.Unprotect();
    private sealed virtual override IXLElementProtection`1<XLWorkbookProtectionElements> ClosedXML.Excel.IXLElementProtection<ClosedXML.Excel.XLWorkbookProtectionElements>.Unprotect(string password);
    private sealed virtual override IXLElementProtection`1<XLWorkbookProtectionElements> ClosedXML.Excel.IXLElementProtection<ClosedXML.Excel.XLWorkbookProtectionElements>.CopyFrom(IXLElementProtection`1<XLWorkbookProtectionElements> protectable);
}
[FlagsAttribute]
public enum ClosedXML.Excel.XLWorkbookProtectionElements : Enum {
    public int value__;
    public static XLWorkbookProtectionElements None;
    public static XLWorkbookProtectionElements Structure;
    public static XLWorkbookProtectionElements Windows;
    public static XLWorkbookProtectionElements Everything;
}
internal class ClosedXML.Excel.XLWorksheet : XLRangeBase {
    private Dictionary`2<int, int> _columnOutlineCount;
    private Dictionary`2<int, int> _rowOutlineCount;
    private XLRangeFactory _rangeFactory;
    private XLRangeRepository _rangeRepository;
    private List`1<IXLRangeIndex> _rangeIndices;
    internal int ZOrder;
    private string _name;
    internal int _position;
    private double _rowHeight;
    private bool _tabActive;
    private XLSheetProtection _protection;
    internal XLAddress InvalidAddress;
    public string LegacyDrawingId;
    private double _columnWidth;
    [CompilerGeneratedAttribute]
private XLWorksheetInternals <Internals>k__BackingField;
    [CompilerGeneratedAttribute]
private XLSparklineGroups <SparklineGroupsInternal>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RowHeightChanged>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ColumnWidthChanged>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SheetId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RelId>k__BackingField;
    [CompilerGeneratedAttribute]
private XLDataValidations <DataValidations>k__BackingField;
    [CompilerGeneratedAttribute]
private IXLCharts <Charts>k__BackingField;
    [CompilerGeneratedAttribute]
private XLAutoFilter <AutoFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDeleted>k__BackingField;
    [CompilerGeneratedAttribute]
private XLWorkbook <Workbook>k__BackingField;
    [CompilerGeneratedAttribute]
private IXLPageSetup <PageSetup>k__BackingField;
    [CompilerGeneratedAttribute]
private IXLOutline <Outline>k__BackingField;
    [CompilerGeneratedAttribute]
private IXLNamedRanges <NamedRanges>k__BackingField;
    [CompilerGeneratedAttribute]
private XLSheetView <SheetView>k__BackingField;
    [CompilerGeneratedAttribute]
private IXLTables <Tables>k__BackingField;
    [CompilerGeneratedAttribute]
private IXLHyperlinks <Hyperlinks>k__BackingField;
    private XLWorksheetVisibility _visibility;
    [CompilerGeneratedAttribute]
private bool <ShowFormulas>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowGridLines>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowOutlineSymbols>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowRowColHeaders>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowRuler>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowWhiteSpace>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowZeros>k__BackingField;
    [CompilerGeneratedAttribute]
private XLColor <TabColor>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TabSelected>k__BackingField;
    [CompilerGeneratedAttribute]
private IXLPivotTables <PivotTables>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RightToLeft>k__BackingField;
    [CompilerGeneratedAttribute]
private IXLConditionalFormats <ConditionalFormats>k__BackingField;
    private IXLRanges _selectedRanges;
    [CompilerGeneratedAttribute]
private IXLCell <ActiveCell>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Author>k__BackingField;
    [CompilerGeneratedAttribute]
private IXLPictures <Pictures>k__BackingField;
    public XLRangeType RangeType { get; }
    public XLWorksheetInternals Internals { get; private set; }
    internal XLSparklineGroups SparklineGroupsInternal { get; }
    public XLRangeFactory RangeFactory { get; }
    public IEnumerable`1<IXLStyle> Styles { get; }
    protected IEnumerable`1<XLStylizedBase> Children { get; }
    internal bool RowHeightChanged { get; internal set; }
    internal bool ColumnWidthChanged { get; internal set; }
    public int SheetId { get; public set; }
    internal string RelId { get; internal set; }
    public XLDataValidations DataValidations { get; private set; }
    public IXLCharts Charts { get; private set; }
    public XLSheetProtection Protection { get; public set; }
    public XLAutoFilter AutoFilter { get; private set; }
    public bool IsDeleted { get; private set; }
    public XLWorkbook Workbook { get; private set; }
    public double ColumnWidth { get; public set; }
    public double RowHeight { get; public set; }
    public string Name { get; public set; }
    public int Position { get; public set; }
    public IXLPageSetup PageSetup { get; private set; }
    public IXLOutline Outline { get; private set; }
    public IXLNamedRanges NamedRanges { get; private set; }
    private IXLSheetView ClosedXML.Excel.IXLWorksheet.SheetView { get; }
    public XLSheetView SheetView { get; private set; }
    public IXLTables Tables { get; private set; }
    public IXLHyperlinks Hyperlinks { get; private set; }
    private IXLDataValidations ClosedXML.Excel.IXLWorksheet.DataValidations { get; }
    public XLWorksheetVisibility Visibility { get; public set; }
    private IXLSheetProtection ClosedXML.Excel.IXLProtectable<ClosedXML.Excel.IXLSheetProtection,ClosedXML.Excel.XLSheetProtectionElements>.Protection { get; private set; }
    public bool ShowFormulas { get; public set; }
    public bool ShowGridLines { get; public set; }
    public bool ShowOutlineSymbols { get; public set; }
    public bool ShowRowColHeaders { get; public set; }
    public bool ShowRuler { get; public set; }
    public bool ShowWhiteSpace { get; public set; }
    public bool ShowZeros { get; public set; }
    public XLColor TabColor { get; public set; }
    public bool TabSelected { get; public set; }
    public bool TabActive { get; public set; }
    public IXLPivotTables PivotTables { get; private set; }
    public bool RightToLeft { get; public set; }
    private IXLAutoFilter ClosedXML.Excel.IXLWorksheet.AutoFilter { get; }
    public IXLRanges MergedRanges { get; }
    public IXLConditionalFormats ConditionalFormats { get; private set; }
    public IXLSparklineGroups SparklineGroups { get; }
    public IXLRanges SelectedRanges { get; internal set; }
    public IXLCell ActiveCell { get; public set; }
    internal XLCalcEngine CalcEngine { get; }
    public string Author { get; public set; }
    public IXLPictures Pictures { get; private set; }
    public bool IsPasswordProtected { get; }
    public bool IsProtected { get; }
    public XLWorksheet(string sheetName, XLWorkbook workbook);
    public virtual XLRangeType get_RangeType();
    [CompilerGeneratedAttribute]
public XLWorksheetInternals get_Internals();
    [CompilerGeneratedAttribute]
private void set_Internals(XLWorksheetInternals value);
    [CompilerGeneratedAttribute]
internal XLSparklineGroups get_SparklineGroupsInternal();
    public XLRangeFactory get_RangeFactory();
    [IteratorStateMachineAttribute("ClosedXML.Excel.XLWorksheet/<get_Styles>d__27")]
public virtual IEnumerable`1<IXLStyle> get_Styles();
    [IteratorStateMachineAttribute("ClosedXML.Excel.XLWorksheet/<get_Children>d__29")]
protected virtual IEnumerable`1<XLStylizedBase> get_Children();
    [CompilerGeneratedAttribute]
internal bool get_RowHeightChanged();
    [CompilerGeneratedAttribute]
internal void set_RowHeightChanged(bool value);
    [CompilerGeneratedAttribute]
internal bool get_ColumnWidthChanged();
    [CompilerGeneratedAttribute]
internal void set_ColumnWidthChanged(bool value);
    [CompilerGeneratedAttribute]
public int get_SheetId();
    [CompilerGeneratedAttribute]
public void set_SheetId(int value);
    [CompilerGeneratedAttribute]
internal string get_RelId();
    [CompilerGeneratedAttribute]
internal void set_RelId(string value);
    [CompilerGeneratedAttribute]
public XLDataValidations get_DataValidations();
    [CompilerGeneratedAttribute]
private void set_DataValidations(XLDataValidations value);
    [CompilerGeneratedAttribute]
public IXLCharts get_Charts();
    [CompilerGeneratedAttribute]
private void set_Charts(IXLCharts value);
    public XLSheetProtection get_Protection();
    public void set_Protection(XLSheetProtection value);
    [CompilerGeneratedAttribute]
public XLAutoFilter get_AutoFilter();
    [CompilerGeneratedAttribute]
private void set_AutoFilter(XLAutoFilter value);
    [CompilerGeneratedAttribute]
public bool get_IsDeleted();
    [CompilerGeneratedAttribute]
private void set_IsDeleted(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual XLWorkbook get_Workbook();
    [CompilerGeneratedAttribute]
private void set_Workbook(XLWorkbook value);
    public sealed virtual double get_ColumnWidth();
    public sealed virtual void set_ColumnWidth(double value);
    public sealed virtual double get_RowHeight();
    public sealed virtual void set_RowHeight(double value);
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public sealed virtual int get_Position();
    public sealed virtual void set_Position(int value);
    [CompilerGeneratedAttribute]
public sealed virtual IXLPageSetup get_PageSetup();
    [CompilerGeneratedAttribute]
private void set_PageSetup(IXLPageSetup value);
    [CompilerGeneratedAttribute]
public sealed virtual IXLOutline get_Outline();
    [CompilerGeneratedAttribute]
private void set_Outline(IXLOutline value);
    private sealed virtual override IXLRow ClosedXML.Excel.IXLWorksheet.FirstRowUsed();
    private sealed virtual override IXLRow ClosedXML.Excel.IXLWorksheet.FirstRowUsed(XLCellsUsedOptions options);
    private sealed virtual override IXLRow ClosedXML.Excel.IXLWorksheet.LastRowUsed();
    private sealed virtual override IXLRow ClosedXML.Excel.IXLWorksheet.LastRowUsed(XLCellsUsedOptions options);
    private sealed virtual override IXLColumn ClosedXML.Excel.IXLWorksheet.LastColumn();
    private sealed virtual override IXLColumn ClosedXML.Excel.IXLWorksheet.FirstColumn();
    private sealed virtual override IXLRow ClosedXML.Excel.IXLWorksheet.FirstRow();
    private sealed virtual override IXLRow ClosedXML.Excel.IXLWorksheet.LastRow();
    private sealed virtual override IXLColumn ClosedXML.Excel.IXLWorksheet.FirstColumnUsed();
    private sealed virtual override IXLColumn ClosedXML.Excel.IXLWorksheet.FirstColumnUsed(XLCellsUsedOptions options);
    private sealed virtual override IXLColumn ClosedXML.Excel.IXLWorksheet.LastColumnUsed();
    private sealed virtual override IXLColumn ClosedXML.Excel.IXLWorksheet.LastColumnUsed(XLCellsUsedOptions options);
    public sealed virtual IXLColumns Columns();
    public sealed virtual IXLColumns Columns(string columns);
    public sealed virtual IXLColumns Columns(string firstColumn, string lastColumn);
    public sealed virtual IXLColumns Columns(int firstColumn, int lastColumn);
    public sealed virtual IXLRows Rows();
    public sealed virtual IXLRows Rows(string rows);
    public sealed virtual IXLRows Rows(int firstRow, int lastRow);
    private sealed virtual override IXLRow ClosedXML.Excel.IXLWorksheet.Row(int row);
    private sealed virtual override IXLColumn ClosedXML.Excel.IXLWorksheet.Column(int column);
    private sealed virtual override IXLColumn ClosedXML.Excel.IXLWorksheet.Column(string column);
    private sealed virtual override IXLCell ClosedXML.Excel.IXLWorksheet.Cell(int row, int column);
    private sealed virtual override IXLCell ClosedXML.Excel.IXLWorksheet.Cell(string cellAddressInRange);
    private sealed virtual override IXLCell ClosedXML.Excel.IXLWorksheet.Cell(int row, string column);
    private sealed virtual override IXLCell ClosedXML.Excel.IXLWorksheet.Cell(IXLAddress cellAddressInRange);
    private sealed virtual override IXLRange ClosedXML.Excel.IXLWorksheet.Range(IXLRangeAddress rangeAddress);
    private sealed virtual override IXLRange ClosedXML.Excel.IXLWorksheet.Range(string rangeAddress);
    private sealed virtual override IXLRange ClosedXML.Excel.IXLWorksheet.Range(IXLCell firstCell, IXLCell lastCell);
    private sealed virtual override IXLRange ClosedXML.Excel.IXLWorksheet.Range(string firstCellAddress, string lastCellAddress);
    private sealed virtual override IXLRange ClosedXML.Excel.IXLWorksheet.Range(IXLAddress firstCellAddress, IXLAddress lastCellAddress);
    private sealed virtual override IXLRange ClosedXML.Excel.IXLWorksheet.Range(int firstCellRow, int firstCellColumn, int lastCellRow, int lastCellColumn);
    private sealed virtual override IXLRanges ClosedXML.Excel.IXLWorksheet.Ranges(string ranges);
    public sealed virtual IXLWorksheet CollapseRows();
    public sealed virtual IXLWorksheet CollapseColumns();
    public sealed virtual IXLWorksheet ExpandRows();
    public sealed virtual IXLWorksheet ExpandColumns();
    public sealed virtual IXLWorksheet CollapseRows(int outlineLevel);
    public sealed virtual IXLWorksheet CollapseColumns(int outlineLevel);
    public sealed virtual IXLWorksheet ExpandRows(int outlineLevel);
    public sealed virtual IXLWorksheet ExpandColumns(int outlineLevel);
    public sealed virtual void Delete();
    [CompilerGeneratedAttribute]
public sealed virtual IXLNamedRanges get_NamedRanges();
    [CompilerGeneratedAttribute]
private void set_NamedRanges(IXLNamedRanges value);
    public sealed virtual IXLNamedRange NamedRange(string rangeName);
    private sealed virtual override IXLSheetView ClosedXML.Excel.IXLWorksheet.get_SheetView();
    [CompilerGeneratedAttribute]
public XLSheetView get_SheetView();
    [CompilerGeneratedAttribute]
private void set_SheetView(XLSheetView value);
    [CompilerGeneratedAttribute]
public sealed virtual IXLTables get_Tables();
    [CompilerGeneratedAttribute]
private void set_Tables(IXLTables value);
    public sealed virtual IXLTable Table(int index);
    public sealed virtual IXLTable Table(string name);
    public sealed virtual IXLWorksheet CopyTo(string newSheetName);
    public sealed virtual IXLWorksheet CopyTo(string newSheetName, int position);
    public sealed virtual IXLWorksheet CopyTo(XLWorkbook workbook);
    public sealed virtual IXLWorksheet CopyTo(XLWorkbook workbook, string newSheetName);
    public sealed virtual IXLWorksheet CopyTo(XLWorkbook workbook, string newSheetName, int position);
    [CompilerGeneratedAttribute]
public sealed virtual IXLHyperlinks get_Hyperlinks();
    [CompilerGeneratedAttribute]
private void set_Hyperlinks(IXLHyperlinks value);
    private sealed virtual override IXLDataValidations ClosedXML.Excel.IXLWorksheet.get_DataValidations();
    public sealed virtual XLWorksheetVisibility get_Visibility();
    public sealed virtual void set_Visibility(XLWorksheetVisibility value);
    public sealed virtual IXLWorksheet Hide();
    public sealed virtual IXLWorksheet Unhide();
    private sealed virtual override IXLSheetProtection ClosedXML.Excel.IXLProtectable<ClosedXML.Excel.IXLSheetProtection,ClosedXML.Excel.XLSheetProtectionElements>.get_Protection();
    private sealed virtual override void ClosedXML.Excel.IXLProtectable<ClosedXML.Excel.IXLSheetProtection,ClosedXML.Excel.XLSheetProtectionElements>.set_Protection(IXLSheetProtection value);
    public sealed virtual IXLSheetProtection Protect(Algorithm algorithm);
    public sealed virtual IXLSheetProtection Protect(XLSheetProtectionElements allowedElements);
    public sealed virtual IXLSheetProtection Protect(Algorithm algorithm, XLSheetProtectionElements allowedElements);
    public sealed virtual IXLSheetProtection Protect(string password, Algorithm algorithm);
    public sealed virtual IXLSheetProtection Protect(string password, Algorithm algorithm, XLSheetProtectionElements allowedElements);
    private sealed virtual override IXLElementProtection ClosedXML.Excel.IXLProtectable.Protect(Algorithm algorithm);
    private sealed virtual override IXLElementProtection ClosedXML.Excel.IXLProtectable.Protect(string password, Algorithm algorithm);
    public sealed virtual IXLSheetProtection Unprotect();
    public sealed virtual IXLSheetProtection Unprotect(string password);
    private sealed virtual override IXLElementProtection ClosedXML.Excel.IXLProtectable.Unprotect();
    private sealed virtual override IXLElementProtection ClosedXML.Excel.IXLProtectable.Unprotect(string password);
    public sealed virtual IXLRange Sort();
    public sealed virtual IXLRange Sort(string columnsToSortBy, XLSortOrder sortOrder, bool matchCase, bool ignoreBlanks);
    public sealed virtual IXLRange Sort(int columnToSortBy, XLSortOrder sortOrder, bool matchCase, bool ignoreBlanks);
    public sealed virtual IXLRange SortLeftToRight(XLSortOrder sortOrder, bool matchCase, bool ignoreBlanks);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ShowFormulas();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ShowFormulas(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ShowGridLines();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ShowGridLines(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ShowOutlineSymbols();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ShowOutlineSymbols(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ShowRowColHeaders();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ShowRowColHeaders(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ShowRuler();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ShowRuler(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ShowWhiteSpace();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ShowWhiteSpace(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ShowZeros();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ShowZeros(bool value);
    public sealed virtual IXLWorksheet SetShowFormulas();
    public sealed virtual IXLWorksheet SetShowFormulas(bool value);
    public sealed virtual IXLWorksheet SetShowGridLines();
    public sealed virtual IXLWorksheet SetShowGridLines(bool value);
    public sealed virtual IXLWorksheet SetShowOutlineSymbols();
    public sealed virtual IXLWorksheet SetShowOutlineSymbols(bool value);
    public sealed virtual IXLWorksheet SetShowRowColHeaders();
    public sealed virtual IXLWorksheet SetShowRowColHeaders(bool value);
    public sealed virtual IXLWorksheet SetShowRuler();
    public sealed virtual IXLWorksheet SetShowRuler(bool value);
    public sealed virtual IXLWorksheet SetShowWhiteSpace();
    public sealed virtual IXLWorksheet SetShowWhiteSpace(bool value);
    public sealed virtual IXLWorksheet SetShowZeros();
    public sealed virtual IXLWorksheet SetShowZeros(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual XLColor get_TabColor();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TabColor(XLColor value);
    public sealed virtual IXLWorksheet SetTabColor(XLColor color);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_TabSelected();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TabSelected(bool value);
    public sealed virtual bool get_TabActive();
    public sealed virtual void set_TabActive(bool value);
    public sealed virtual IXLWorksheet SetTabSelected();
    public sealed virtual IXLWorksheet SetTabSelected(bool value);
    public sealed virtual IXLWorksheet SetTabActive();
    public sealed virtual IXLWorksheet SetTabActive(bool value);
    private sealed virtual override IXLPivotTable ClosedXML.Excel.IXLWorksheet.PivotTable(string name);
    [CompilerGeneratedAttribute]
public sealed virtual IXLPivotTables get_PivotTables();
    [CompilerGeneratedAttribute]
private void set_PivotTables(IXLPivotTables value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_RightToLeft();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RightToLeft(bool value);
    public sealed virtual IXLWorksheet SetRightToLeft();
    public sealed virtual IXLWorksheet SetRightToLeft(bool value);
    public virtual XLRanges Ranges(string ranges);
    private sealed virtual override IXLAutoFilter ClosedXML.Excel.IXLWorksheet.get_AutoFilter();
    public sealed virtual IXLRows RowsUsed(XLCellsUsedOptions options, Func`2<IXLRow, bool> predicate);
    public sealed virtual IXLRows RowsUsed(Func`2<IXLRow, bool> predicate);
    public sealed virtual IXLColumns ColumnsUsed(XLCellsUsedOptions options, Func`2<IXLColumn, bool> predicate);
    public sealed virtual IXLColumns ColumnsUsed(Func`2<IXLColumn, bool> predicate);
    internal void RegisterRangeIndex(IXLRangeIndex rangeIndex);
    internal void Cleanup();
    public void IncrementColumnOutline(int level);
    public void DecrementColumnOutline(int level);
    public int GetMaxColumnOutline();
    public void IncrementRowOutline(int level);
    public void DecrementRowOutline(int level);
    public int GetMaxRowOutline();
    public XLRow FirstRowUsed();
    public XLRow FirstRowUsed(XLCellsUsedOptions options);
    public XLRow LastRowUsed();
    public XLRow LastRowUsed(XLCellsUsedOptions options);
    public XLColumn LastColumn();
    public XLColumn FirstColumn();
    public XLRow FirstRow();
    public XLRow LastRow();
    public XLColumn FirstColumnUsed();
    public XLColumn FirstColumnUsed(XLCellsUsedOptions options);
    public XLColumn LastColumnUsed();
    public XLColumn LastColumnUsed(XLCellsUsedOptions options);
    public XLRow Row(int row);
    public XLColumn Column(int columnNumber);
    public IXLColumn Column(string column);
    public virtual XLRange AsRange();
    internal virtual void WorksheetRangeShiftedColumns(XLRange range, int columnsShifted);
    private void ShiftPageBreaksColumns(XLRange range, int columnsShifted);
    private void ShiftConditionalFormattingColumns(XLRange range, int columnsShifted);
    private void ShiftDataValidationColumns(XLRange range, int columnsShifted);
    internal virtual void WorksheetRangeShiftedRows(XLRange range, int rowsShifted);
    private void ShiftPageBreaksRows(XLRange range, int rowsShifted);
    private void ShiftConditionalFormattingRows(XLRange range, int rowsShifted);
    private void ShiftDataValidationRows(XLRange range, int rowsShifted);
    private void RemoveInvalidSparklines();
    private void MoveNamedRangesRows(XLRange range, int rowsShifted, IXLNamedRanges namedRanges);
    private void MoveNamedRangesColumns(XLRange range, int columnsShifted, IXLNamedRanges namedRanges);
    public void NotifyRangeShiftedRows(XLRange range, int rowsShifted);
    public void NotifyRangeShiftedColumns(XLRange range, int columnsShifted);
    public XLRow Row(int rowNumber, bool pingCells);
    public IXLTable Table(XLRange range, bool addToTables, bool setAutofilter);
    public IXLTable Table(XLRange range, string name, bool addToTables, bool setAutofilter);
    private void CheckRangeNotOverlappingOtherEntities(XLRange range);
    private IXLRange GetRangeForSort();
    public XLPivotTable PivotTable(string name);
    public virtual IXLCells Cells();
    public virtual XLCells Cells(bool usedCellsOnly);
    public virtual XLCell Cell(string cellAddressInRange);
    public virtual XLRange Range(string rangeAddressStr);
    public sealed virtual IXLRanges get_MergedRanges();
    [CompilerGeneratedAttribute]
public sealed virtual IXLConditionalFormats get_ConditionalFormats();
    [CompilerGeneratedAttribute]
private void set_ConditionalFormats(IXLConditionalFormats value);
    public sealed virtual IXLSparklineGroups get_SparklineGroups();
    public sealed virtual IXLRanges get_SelectedRanges();
    internal void set_SelectedRanges(IXLRanges value);
    [CompilerGeneratedAttribute]
public sealed virtual IXLCell get_ActiveCell();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ActiveCell(IXLCell value);
    internal XLCalcEngine get_CalcEngine();
    public sealed virtual XLCellValue Evaluate(string expression, string formulaAddress);
    public sealed virtual void RecalculateAllFormulas();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Author();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Author(string value);
    public virtual string ToString();
    [CompilerGeneratedAttribute]
public sealed virtual IXLPictures get_Pictures();
    [CompilerGeneratedAttribute]
private void set_Pictures(IXLPictures value);
    public sealed virtual bool get_IsPasswordProtected();
    public sealed virtual bool get_IsProtected();
    public sealed virtual IXLPicture Picture(string pictureName);
    public sealed virtual IXLPicture AddPicture(Stream stream);
    public sealed virtual IXLPicture AddPicture(Stream stream, string name);
    internal IXLPicture AddPicture(Stream stream, string name, int Id);
    public sealed virtual IXLPicture AddPicture(Stream stream, XLPictureFormat format);
    public sealed virtual IXLPicture AddPicture(Stream stream, XLPictureFormat format, string name);
    public sealed virtual IXLPicture AddPicture(string imageFile);
    public sealed virtual IXLPicture AddPicture(string imageFile, string name);
    public virtual bool IsEntireRow();
    public virtual bool IsEntireColumn();
    internal void SetValue(T value, int ro, int co);
    internal XLCellValue GetCellValue(int ro, int co);
    internal XLCell GetCell(int ro, int co);
    public XLRange GetOrCreateRange(XLRangeParameters xlRangeParameters);
    public XLRangeRow RangeRow(XLRangeAddress address, IXLStyle defaultStyle);
    public XLRangeColumn RangeColumn(XLRangeAddress address, IXLStyle defaultStyle);
    protected virtual void OnRangeAddressChanged(XLRangeAddress oldAddress, XLRangeAddress newAddress);
    public void RelocateRange(XLRangeType rangeType, XLRangeAddress oldAddress, XLRangeAddress newAddress);
    internal void DeleteColumn(int columnNumber);
    internal void DeleteRow(int rowNumber);
    internal void DeleteRange(XLRangeAddress rangeAddress);
    [CompilerGeneratedAttribute]
private void <CollapseRows>b__122_0(int i);
    [CompilerGeneratedAttribute]
private void <CollapseColumns>b__123_0(int i);
    [CompilerGeneratedAttribute]
private void <ExpandRows>b__124_0(int i);
    [CompilerGeneratedAttribute]
private void <ExpandColumns>b__125_0(int i);
}
internal class ClosedXML.Excel.XLWorksheetInternals : object {
    [CompilerGeneratedAttribute]
private XLCellsCollection <CellsCollection>k__BackingField;
    [CompilerGeneratedAttribute]
private XLColumnsCollection <ColumnsCollection>k__BackingField;
    [CompilerGeneratedAttribute]
private XLRowsCollection <RowsCollection>k__BackingField;
    [CompilerGeneratedAttribute]
private XLRanges <MergedRanges>k__BackingField;
    private int disposeSignaled;
    private bool disposed;
    public XLCellsCollection CellsCollection { get; }
    public XLColumnsCollection ColumnsCollection { get; }
    public XLRowsCollection RowsCollection { get; }
    public XLRanges MergedRanges { get; internal set; }
    public XLWorksheetInternals(XLCellsCollection cellsCollection, XLColumnsCollection columnsCollection, XLRowsCollection rowsCollection, XLRanges mergedRanges);
    [CompilerGeneratedAttribute]
public XLCellsCollection get_CellsCollection();
    [CompilerGeneratedAttribute]
public XLColumnsCollection get_ColumnsCollection();
    [CompilerGeneratedAttribute]
public XLRowsCollection get_RowsCollection();
    [CompilerGeneratedAttribute]
public XLRanges get_MergedRanges();
    [CompilerGeneratedAttribute]
internal void set_MergedRanges(XLRanges value);
    private void DisposeManaged();
    public sealed virtual void Dispose();
    private void ThrowIfDisposed();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class ClosedXML.Excel.XLWorksheets : object {
    private XLWorkbook _workbook;
    private Dictionary`2<string, XLWorksheet> _worksheets;
    [CompilerGeneratedAttribute]
private ICollection`1<string> <Deleted>k__BackingField;
    internal ICollection`1<string> Deleted { get; private set; }
    public int Count { get; }
    public XLWorksheets(XLWorkbook workbook);
    [CompilerGeneratedAttribute]
internal ICollection`1<string> get_Deleted();
    [CompilerGeneratedAttribute]
private void set_Deleted(ICollection`1<string> value);
    public sealed virtual IEnumerator`1<XLWorksheet> GetEnumerator();
    [DebuggerStepThroughAttribute]
public sealed virtual int get_Count();
    public sealed virtual bool Contains(string sheetName);
    public sealed virtual bool TryGetWorksheet(string sheetName, IXLWorksheet& worksheet);
    public sealed virtual IXLWorksheet Worksheet(string sheetName);
    public sealed virtual IXLWorksheet Worksheet(int position);
    public sealed virtual IXLWorksheet Add();
    public sealed virtual IXLWorksheet Add(int position);
    public sealed virtual IXLWorksheet Add(string sheetName);
    public sealed virtual IXLWorksheet Add(string sheetName, int position);
    private void Add(string sheetName, XLWorksheet sheet);
    public sealed virtual void Delete(string sheetName);
    public sealed virtual void Delete(int position);
    private sealed virtual override IEnumerator`1<IXLWorksheet> System.Collections.Generic.IEnumerable<ClosedXML.Excel.IXLWorksheet>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual IXLWorksheet Add(DataTable dataTable);
    public sealed virtual IXLWorksheet Add(DataTable dataTable, string sheetName);
    public sealed virtual IXLWorksheet Add(DataTable dataTable, string sheetName, string tableName);
    public sealed virtual void Add(DataSet dataSet);
    public void Rename(string oldSheetName, string newSheetName);
    private string GetNextWorksheetName();
}
public enum ClosedXML.Excel.XLWorksheetVisibility : Enum {
    public int value__;
    public static XLWorksheetVisibility Visible;
    public static XLWorksheetVisibility Hidden;
    public static XLWorksheetVisibility VeryHidden;
}
[ExtensionAttribute]
internal static class ClosedXML.Extensions.FormatExtensions : object {
    [ExtensionAttribute]
public static string ToExcelFormat(object o, string format);
}
[ExtensionAttribute]
internal static class ClosedXML.Extensions.GuidExtensions : object {
    [ExtensionAttribute]
internal static string WrapInBraces(Guid guid);
}
[ExtensionAttribute]
internal static class ClosedXML.Extensions.OpenXmlPartContainerExtensions : object {
    [ExtensionAttribute]
public static bool HasPartWithId(OpenXmlPartContainer container, string relId);
}
[ExtensionAttribute]
internal static class ClosedXML.Extensions.ReadOnlyListExtensions : object {
    [ExtensionAttribute]
public static int IndexOf(IReadOnlyList`1<T> source, T item, IEqualityComparer`1<T> comparer);
}
[ExtensionAttribute]
internal static class ClosedXML.Extensions.ReflectionExtensions : object {
    [ExtensionAttribute]
public static bool IsStatic(MemberInfo memberInfo);
}
[ExtensionAttribute]
internal static class ClosedXML.Extensions.XLErrorExtensions : object {
    [ExtensionAttribute]
public static string ToDisplayString(XLError error);
}
internal static class ClosedXML.Extensions.XLErrorParser : object {
    private static Dictionary`2<string, XLError> ErrorMap;
    private static XLErrorParser();
    public static bool TryParseError(string input, XLError& error);
}
[ExtensionAttribute]
internal static class ClosedXML.Extensions.XmlWriterExtensions : object {
    [ExtensionAttribute]
public static void WriteAttribute(XmlWriter w, string attrName, int value);
    [ExtensionAttribute]
public static void WriteAttribute(XmlWriter w, string attrName, UInt32 value);
    [ExtensionAttribute]
public static void WriteAttribute(XmlWriter w, string attrName, double value);
    [ExtensionAttribute]
public static void WriteAttribute(XmlWriter w, string attrName, string ns, double value);
    [ExtensionAttribute]
public static void WriteNumberValue(XmlWriter w, double value);
    [ExtensionAttribute]
public static void WritePreserveSpaceAttr(XmlWriter w);
    [ExtensionAttribute]
public static void WriteEmptyElement(XmlWriter w, string elName);
    [ExtensionAttribute]
public static void WriteColor(XmlWriter w, string elName, XLColor xlColor, bool isDifferential);
}
internal class ClosedXML.Graphics.BmpInfoReader : ImageInfoReader {
    protected virtual bool CheckHeader(Stream stream);
    protected virtual XLPictureInfo ReadInfo(Stream stream);
    private static XLPictureInfo ReadBmpV1X(Stream stream);
    private static XLPictureInfo ReadBmpV2X(Stream stream);
    private static double PixelsPerMeterToDpi(UInt32 pixelsPerMeter);
}
public class ClosedXML.Graphics.DefaultGraphicEngine : object {
    private static string EmbeddedFontName;
    private static float FontMetricSize;
    private ImageInfoReader[] _imageReaders;
    private Lazy`1<IReadOnlyFontCollection> _fontCollection;
    private string _fallbackFont;
    private ConcurrentDictionary`2<MetricId, Font> _fonts;
    private Func`2<MetricId, Font> _loadFont;
    private ConcurrentDictionary`2<MetricId, double> _maxDigitWidths;
    private Func`2<MetricId, double> _calculateMaxDigitWidth;
    [CompilerGeneratedAttribute]
private static Lazy`1<DefaultGraphicEngine> <Instance>k__BackingField;
    public static Lazy`1<DefaultGraphicEngine> Instance { get; }
    public DefaultGraphicEngine(string fallbackFont);
    private DefaultGraphicEngine(Stream fallbackFontStream, bool useSystemFonts, Stream[] fontStreams);
    private static DefaultGraphicEngine();
    [CompilerGeneratedAttribute]
public static Lazy`1<DefaultGraphicEngine> get_Instance();
    public static IXLGraphicEngine CreateOnlyWithFonts(Stream fallbackFontStream, Stream[] fontStreams);
    public static IXLGraphicEngine CreateWithFontsAndSystemFonts(Stream fallbackFontStream, Stream[] fontStreams);
    public sealed virtual XLPictureInfo GetPictureInfo(Stream stream, XLPictureFormat expectedFormat);
    public sealed virtual double GetDescent(IXLFontBase font, double dpiY);
    private double GetDescent(IXLFontBase font, double dpiY, FontMetrics metrics);
    public sealed virtual double GetMaxDigitWidth(IXLFontBase fontBase, double dpiX);
    public sealed virtual double GetTextHeight(IXLFontBase font, double dpiY);
    public sealed virtual double GetTextWidth(string text, IXLFontBase fontBase, double dpiX);
    public sealed virtual GlyphBox GetGlyphBox(ReadOnlySpan`1<int> graphemeCluster, IXLFontBase font, Dpi dpi);
    private FontMetrics GetMetrics(IXLFontBase fontBase);
    private Font GetFont(IXLFontBase fontBase);
    private Font GetFont(MetricId metricId);
    private Font LoadFont(MetricId metricId);
    private void AddEmbeddedFont(FontCollection fontCollection);
    private double CalculateMaxDigitWidth(MetricId metricId);
    private static double PointsToPixels(double points, double dpi);
}
[IsReadOnlyAttribute]
public class ClosedXML.Graphics.Dpi : ValueType {
    [CompilerGeneratedAttribute]
private double <X>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Y>k__BackingField;
    public double X { get; }
    public double Y { get; }
    public Dpi(double dpiX, double dpiY);
    [CompilerGeneratedAttribute]
public double get_X();
    [CompilerGeneratedAttribute]
public double get_Y();
}
internal class ClosedXML.Graphics.EmfInfoReader : ImageInfoReader {
    private static UInt32 EmfSignature;
    protected virtual bool CheckHeader(Stream stream);
    protected virtual XLPictureInfo ReadInfo(Stream stream);
    private static Rectangle ReadRectL(Stream stream);
}
internal class ClosedXML.Graphics.GifInfoReader : ImageInfoReader {
    protected virtual bool CheckHeader(Stream stream);
    protected virtual XLPictureInfo ReadInfo(Stream stream);
}
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{AdvanceWidth}x{LineHeight}")]
public class ClosedXML.Graphics.GlyphBox : ValueType {
    [CompilerGeneratedAttribute]
private float <AdvanceWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private float <EmSize>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Descent>k__BackingField;
    internal static GlyphBox LineBreak { get; }
    public float AdvanceWidth { get; }
    public float EmSize { get; }
    public float Descent { get; }
    internal bool IsLineBreak { get; }
    internal float LineHeight { get; }
    public GlyphBox(float advanceWidth, float emSize, float descent);
    internal static GlyphBox get_LineBreak();
    [CompilerGeneratedAttribute]
public float get_AdvanceWidth();
    [CompilerGeneratedAttribute]
public float get_EmSize();
    [CompilerGeneratedAttribute]
public float get_Descent();
    internal bool get_IsLineBreak();
    internal float get_LineHeight();
}
internal abstract class ClosedXML.Graphics.ImageInfoReader : object {
    public bool TryGetInfo(Stream stream, XLPictureInfo& info);
    protected abstract virtual bool CheckHeader(Stream stream);
    protected abstract virtual XLPictureInfo ReadInfo(Stream stream);
}
public interface ClosedXML.Graphics.IXLGraphicEngine {
    public abstract virtual XLPictureInfo GetPictureInfo(Stream imageStream, XLPictureFormat expectedFormat);
    public abstract virtual double GetTextHeight(IXLFontBase font, double dpiY);
    public abstract virtual double GetTextWidth(string text, IXLFontBase font, double dpiX);
    public abstract virtual double GetMaxDigitWidth(IXLFontBase font, double dpiX);
    public abstract virtual double GetDescent(IXLFontBase font, double dpiY);
    public abstract virtual GlyphBox GetGlyphBox(ReadOnlySpan`1<int> graphemeCluster, IXLFontBase font, Dpi dpi);
}
internal class ClosedXML.Graphics.JpegInfoReader : ImageInfoReader {
    private static Byte[] APP0Identifer;
    private static Byte[] APP1Identifer;
    private static JpegInfoReader();
    protected virtual bool CheckHeader(Stream stream);
    protected virtual XLPictureInfo ReadInfo(Stream stream);
    private bool TryGetMarker(Stream stream, UInt16& marker);
    private bool TryGetLength(Stream stream, UInt16& length);
    private double ConvertToDpi(int density, byte units);
    [CompilerGeneratedAttribute]
internal static bool <CheckHeader>g__IsIdentifier|2_0(Stream stream, Byte[] identifer);
}
internal class ClosedXML.Graphics.PcxInfoReader : ImageInfoReader {
    protected virtual bool CheckHeader(Stream stream);
    protected virtual XLPictureInfo ReadInfo(Stream stream);
}
internal class ClosedXML.Graphics.PngInfoReader : ImageInfoReader {
    private static int CrcLength;
    private static int SkippedHeaderLength;
    [CompilerGeneratedAttribute]
private Int32[] <MagicBytes>k__BackingField;
    private static int HeaderType;
    private static int PhysicalDimensionType;
    private Int32[] MagicBytes { get; }
    [CompilerGeneratedAttribute]
private Int32[] get_MagicBytes();
    protected virtual bool CheckHeader(Stream stream);
    protected virtual XLPictureInfo ReadInfo(Stream stream);
    private static UInt32 ReadType(Stream stream);
    private static ArgumentException CorruptedException(string text);
    private static double PixelsPerMeterToDpi(UInt32 ppm);
}
internal class ClosedXML.Graphics.TiffInfoReader : ImageInfoReader {
    protected virtual bool CheckHeader(Stream stream);
    protected virtual XLPictureInfo ReadInfo(Stream stream);
    private static UInt32 ReadShortOrLone(Stream stream, ushort entryType, Func`2<Stream, ushort> readU16, Func`2<Stream, UInt32> readU32);
    private static double ReadRational(Stream stream, Func`2<Stream, UInt32> readU32);
    private static double ToDpi(double resolution, UInt32 resolutionUnit);
}
internal class ClosedXML.Graphics.WebpInfoReader : ImageInfoReader {
    private static int Vp8ChunkMagicBytes;
    private static int Vp8LChunkMagicByte;
    private static UInt32 LossyVp8Code;
    private static UInt32 LosslessVp8Code;
    private static UInt32 ExtendedV8Code;
    private static WebpInfoReader();
    protected virtual bool CheckHeader(Stream stream);
    protected virtual XLPictureInfo ReadInfo(Stream stream);
    [CompilerGeneratedAttribute]
internal static int <ReadInfo>g__GetSize|6_0(ushort sizeAndScale);
}
internal class ClosedXML.Graphics.WmfInfoReader : ImageInfoReader {
    protected virtual bool CheckHeader(Stream stream);
    protected virtual XLPictureInfo ReadInfo(Stream stream);
    private static UInt32 GetU32LE(Span`1<byte> s, int i);
    private static ushort GetU16LE(Span`1<byte> s, int i);
    private static short GetS16LE(Span`1<byte> s, int i);
    private static int ToHiMetric(int size, double unitsPerInch);
}
[IsReadOnlyAttribute]
public class ClosedXML.Graphics.XLPictureInfo : ValueType {
    [CompilerGeneratedAttribute]
private XLPictureFormat <Format>k__BackingField;
    [CompilerGeneratedAttribute]
private Size <SizePx>k__BackingField;
    [CompilerGeneratedAttribute]
private Size <SizePhys>k__BackingField;
    [CompilerGeneratedAttribute]
private double <DpiX>k__BackingField;
    [CompilerGeneratedAttribute]
private double <DpiY>k__BackingField;
    public XLPictureFormat Format { get; }
    public Size SizePx { get; }
    public Size SizePhys { get; }
    public double DpiX { get; }
    public double DpiY { get; }
    public XLPictureInfo(XLPictureFormat format, UInt32 width, UInt32 height, double dpiX, double dpiY);
    public XLPictureInfo(XLPictureFormat format, Size sizePx, Size sizePhys);
    public XLPictureInfo(XLPictureFormat format, Size sizePx, Size sizePhys, double dpiX, double dpiY);
    [CompilerGeneratedAttribute]
public XLPictureFormat get_Format();
    [CompilerGeneratedAttribute]
public Size get_SizePx();
    [CompilerGeneratedAttribute]
public Size get_SizePhys();
    [CompilerGeneratedAttribute]
public double get_DpiX();
    [CompilerGeneratedAttribute]
public double get_DpiY();
    internal Size GetSizePx(double dpiX, double dpiY);
}
internal static class ClosedXML.Utils.ColorStringParser : object {
    public static Color ParseFromArgb(string argbColor);
    private static int ReadHex(string text, int start, int length);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class ClosedXML.Utils.ColorTypeAdapter : object {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private ColorType <ColorType>k__BackingField;
    [NullableAttribute("1")]
public ColorType ColorType { get; }
    public BooleanValue Auto { get; public set; }
    public UInt32Value Indexed { get; public set; }
    public HexBinaryValue Rgb { get; public set; }
    public UInt32Value Theme { get; public set; }
    public DoubleValue Tint { get; public set; }
    [NullableContextAttribute("1")]
public ColorTypeAdapter(ColorType colorType);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public ColorType get_ColorType();
    public sealed virtual BooleanValue get_Auto();
    public sealed virtual void set_Auto(BooleanValue value);
    public sealed virtual UInt32Value get_Indexed();
    public sealed virtual void set_Indexed(UInt32Value value);
    public sealed virtual HexBinaryValue get_Rgb();
    public sealed virtual void set_Rgb(HexBinaryValue value);
    public sealed virtual UInt32Value get_Theme();
    public sealed virtual void set_Theme(UInt32Value value);
    public sealed virtual DoubleValue get_Tint();
    public sealed virtual void set_Tint(DoubleValue value);
}
internal static class ClosedXML.Utils.CryptographicAlgorithms : object {
    public static string Base64Decode(string base64EncodedData);
    public static string Base64Encode(string plainText);
    public static string GenerateNewSalt(Algorithm algorithm);
    public static string GetPasswordHash(Algorithm algorithm, string password, string salt, UInt32 spinCount);
    public static string GetSalt(int length);
    public static bool RequiresSalt(Algorithm algorithm);
    private static string GetDefaultPasswordHash(string password);
    private static string GetSha512PasswordHash(string password, string salt, UInt32 spinCount);
}
internal static class ClosedXML.Utils.DescribedEnumParser`1 : object {
    private static Lazy`1<IDictionary`2<string, T>> fromDescriptions;
    private static Lazy`1<IDictionary`2<T, string>> toDescriptions;
    private static DescribedEnumParser`1();
    public static T FromDescription(string value);
    public static bool IsValidDescription(string value);
    public static string ToDescription(T value);
    private static IEnumerable`1<Tuple`2<T, string>> ParseEnumDescriptions();
}
[NullableContextAttribute("2")]
internal interface ClosedXML.Utils.IColorTypeAdapter {
    public BooleanValue Auto { get; public set; }
    public UInt32Value Indexed { get; public set; }
    public HexBinaryValue Rgb { get; public set; }
    public UInt32Value Theme { get; public set; }
    public DoubleValue Tint { get; public set; }
    public abstract virtual BooleanValue get_Auto();
    public abstract virtual void set_Auto(BooleanValue value);
    public abstract virtual UInt32Value get_Indexed();
    public abstract virtual void set_Indexed(UInt32Value value);
    public abstract virtual HexBinaryValue get_Rgb();
    public abstract virtual void set_Rgb(HexBinaryValue value);
    public abstract virtual UInt32Value get_Theme();
    public abstract virtual void set_Theme(UInt32Value value);
    public abstract virtual DoubleValue get_Tint();
    public abstract virtual void set_Tint(DoubleValue value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class ClosedXML.Utils.OpenXmlHelper : object {
    [ExtensionAttribute]
public static T FromClosedXMLColor(ColorType openXMLColor, XLColor xlColor, bool isDifferential);
    [ExtensionAttribute]
public static T FromClosedXMLColor(ColorType openXMLColor, XLColor xlColor, bool isDifferential);
    [NullableContextAttribute("2")]
public static BooleanValue GetBooleanValue(bool value, Nullable`1<bool> defaultValue);
    public static bool GetBooleanValueAsBool(BooleanValue value, bool defaultValue);
    [ExtensionAttribute]
public static XLColor ToClosedXMLColor(ColorType openXMLColor, IDictionary`2<string, Color> colorCache);
    [ExtensionAttribute]
public static XLColor ToClosedXMLColor(ColorType openXMLColor, IDictionary`2<string, Color> colorCache);
    private static XLColor ConvertToClosedXMLColor(IColorTypeAdapter openXMLColor, IDictionary`2<string, Color> colorCache);
    private static void FillFromClosedXMLColor(IColorTypeAdapter openXMLColor, XLColor xlColor, bool isDifferential);
    internal static int GetClosedXmlTextRotation(Alignment alignment);
}
[ExtensionAttribute]
internal static class ClosedXML.Utils.StreamExtensions : object {
    [ExtensionAttribute]
public static int ReadS32LE(Stream stream);
    [ExtensionAttribute]
public static short ReadS16LE(Stream stream);
    [ExtensionAttribute]
public static ushort ReadU16BE(Stream stream);
    [ExtensionAttribute]
public static UInt32 ReadU32BE(Stream stream);
    [ExtensionAttribute]
public static UInt32 ReadU32LE(Stream stream);
    [ExtensionAttribute]
public static bool TryReadU32LE(Stream stream, UInt32& number);
    [ExtensionAttribute]
public static ushort ReadU16LE(Stream stream);
    [ExtensionAttribute]
public static bool TryReadU16LE(Stream stream, UInt16& number);
    [ExtensionAttribute]
public static int ReadU24BE(Stream stream);
    [ExtensionAttribute]
public static int ReadU24LE(Stream stream);
    [ExtensionAttribute]
public static byte ReadU8(Stream stream);
    [ExtensionAttribute]
public static bool TryReadU32BE(Stream stream, UInt32& number);
    [ExtensionAttribute]
public static bool TryReadU16BE(Stream stream, UInt16& number);
    private static bool TryReadLE(Stream stream, int size, Int32& number);
    private static bool TryReadBE(Stream stream, int size, Int32& number);
    private static ArgumentException EndOfStreamException();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class ClosedXML.Utils.X14ColorTypeAdapter : object {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private ColorType <ColorType>k__BackingField;
    [NullableAttribute("1")]
public ColorType ColorType { get; }
    public BooleanValue Auto { get; public set; }
    public UInt32Value Indexed { get; public set; }
    public HexBinaryValue Rgb { get; public set; }
    public UInt32Value Theme { get; public set; }
    public DoubleValue Tint { get; public set; }
    [NullableContextAttribute("1")]
public X14ColorTypeAdapter(ColorType colorType);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public ColorType get_ColorType();
    public sealed virtual BooleanValue get_Auto();
    public sealed virtual void set_Auto(BooleanValue value);
    public sealed virtual UInt32Value get_Indexed();
    public sealed virtual void set_Indexed(UInt32Value value);
    public sealed virtual HexBinaryValue get_Rgb();
    public sealed virtual void set_Rgb(HexBinaryValue value);
    public sealed virtual UInt32Value get_Theme();
    public sealed virtual void set_Theme(UInt32Value value);
    public sealed virtual DoubleValue get_Tint();
    public sealed virtual void set_Tint(DoubleValue value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class ClosedXML.Utils.XmlEncoder : object {
    private static Regex xHHHHRegex;
    private static Regex Uppercase_X_HHHHRegex;
    private static XmlEncoder();
    [NullableContextAttribute("2")]
public static string EncodeString(string encodeStr);
    public static string DecodeString(string decodeStr);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[ExtensionAttribute]
internal static class System.IO.StreamCompatibilityExtensions : object {
    [ExtensionAttribute]
public static int Read(Stream stream, Span`1<byte> span);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[ExtensionAttribute]
public static class System.StringCompatibilityExtensions : object {
    [ExtensionAttribute]
public static bool Contains(string s, char c);
}
