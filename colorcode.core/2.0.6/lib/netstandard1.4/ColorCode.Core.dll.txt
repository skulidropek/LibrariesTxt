public abstract class ColorCode.CodeColorizerBase : object {
    protected ILanguageParser languageParser;
    public StyleDictionary Styles;
    public CodeColorizerBase(StyleDictionary Styles, ILanguageParser languageParser);
    protected abstract virtual void Write(string parsedSourceCode, IList`1<Scope> scopes);
}
[ExtensionAttribute]
public static class ColorCode.Common.ExtensionMethods : object {
    [ExtensionAttribute]
public static void SortStable(IList`1<T> list, Comparison`1<T> comparison);
}
public static class ColorCode.Common.Guard : object {
    public static void ArgNotNull(object arg, string paramName);
    public static void ArgNotNullAndNotEmpty(string arg, string paramName);
    public static void EnsureParameterIsNotNullAndNotEmpty(IDictionary`2<TKey, TValue> parameter, string parameterName);
    public static void ArgNotNullAndNotEmpty(IList`1<T> arg, string paramName);
}
public interface ColorCode.Common.ILanguageRepository {
    public IEnumerable`1<ILanguage> All { get; }
    public abstract virtual IEnumerable`1<ILanguage> get_All();
    public abstract virtual ILanguage FindById(string languageId);
    public abstract virtual void Load(ILanguage language);
}
public static class ColorCode.Common.LanguageId : object {
    public static string Asax;
    public static string Ashx;
    public static string Aspx;
    public static string AspxCs;
    public static string AspxVb;
    public static string CSharp;
    public static string Cpp;
    public static string Css;
    public static string FSharp;
    public static string Html;
    public static string Java;
    public static string JavaScript;
    public static string TypeScript;
    public static string Php;
    public static string PowerShell;
    public static string Sql;
    public static string VbDotNet;
    public static string Xml;
    public static string Koka;
    public static string Haskell;
    public static string Markdown;
    public static string Fortran;
}
public class ColorCode.Common.LanguageRepository : object {
    private Dictionary`2<string, ILanguage> loadedLanguages;
    private ReaderWriterLockSlim loadLock;
    public IEnumerable`1<ILanguage> All { get; }
    public LanguageRepository(Dictionary`2<string, ILanguage> loadedLanguages);
    public sealed virtual IEnumerable`1<ILanguage> get_All();
    public sealed virtual ILanguage FindById(string languageId);
    public sealed virtual void Load(ILanguage language);
}
public class ColorCode.Common.ScopeName : object {
    public static string ClassName;
    public static string Comment;
    public static string CssPropertyName;
    public static string CssPropertyValue;
    public static string CssSelector;
    public static string HtmlAttributeName;
    public static string HtmlAttributeValue;
    public static string HtmlComment;
    public static string HtmlElementName;
    public static string HtmlEntity;
    public static string HtmlOperator;
    public static string HtmlServerSideScript;
    public static string HtmlTagDelimiter;
    public static string Keyword;
    public static string LanguagePrefix;
    public static string PlainText;
    public static string PowerShellAttribute;
    public static string PowerShellOperator;
    public static string PowerShellType;
    public static string PowerShellVariable;
    public static string PreprocessorKeyword;
    public static string SqlSystemFunction;
    public static string String;
    public static string StringCSharpVerbatim;
    public static string XmlAttribute;
    public static string XmlAttributeQuotes;
    public static string XmlAttributeValue;
    public static string XmlCDataSection;
    public static string XmlComment;
    public static string XmlDelimiter;
    public static string XmlDocComment;
    public static string XmlDocTag;
    public static string XmlName;
    public static string Type;
    public static string TypeVariable;
    public static string NameSpace;
    public static string Constructor;
    public static string Predefined;
    public static string PseudoKeyword;
    public static string StringEscape;
    public static string ControlKeyword;
    public static string Number;
    public static string Operator;
    public static string Delimiter;
    public static string MarkdownHeader;
    public static string MarkdownCode;
    public static string MarkdownListItem;
    public static string MarkdownEmph;
    public static string MarkdownBold;
    public static string BuiltinFunction;
    public static string BuiltinValue;
    public static string Attribute;
    public static string SpecialCharacter;
    public static string Intrinsic;
    public static string Brackets;
    public static string Continuation;
}
public class ColorCode.Common.TextInsertion : object {
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private Scope <Scope>k__BackingField;
    public int Index { get; public set; }
    public string Text { get; public set; }
    public Scope Scope { get; public set; }
    [CompilerGeneratedAttribute]
public virtual int get_Index();
    [CompilerGeneratedAttribute]
public virtual void set_Index(int value);
    [CompilerGeneratedAttribute]
public virtual string get_Text();
    [CompilerGeneratedAttribute]
public virtual void set_Text(string value);
    [CompilerGeneratedAttribute]
public virtual Scope get_Scope();
    [CompilerGeneratedAttribute]
public virtual void set_Scope(Scope value);
}
public class ColorCode.Compilation.CompiledLanguage : object {
    [CompilerGeneratedAttribute]
private IList`1<string> <Captures>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <Regex>k__BackingField;
    public IList`1<string> Captures { get; public set; }
    public string Id { get; public set; }
    public string Name { get; public set; }
    public Regex Regex { get; public set; }
    public CompiledLanguage(string id, string name, Regex regex, IList`1<string> captures);
    [CompilerGeneratedAttribute]
public IList`1<string> get_Captures();
    [CompilerGeneratedAttribute]
public void set_Captures(IList`1<string> value);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public Regex get_Regex();
    [CompilerGeneratedAttribute]
public void set_Regex(Regex value);
    public virtual string ToString();
}
public interface ColorCode.Compilation.ILanguageCompiler {
    public abstract virtual CompiledLanguage Compile(ILanguage language);
}
public class ColorCode.Compilation.LanguageCompiler : object {
    private static Regex numberOfCapturesRegex;
    private Dictionary`2<string, CompiledLanguage> compiledLanguages;
    private ReaderWriterLockSlim compileLock;
    public LanguageCompiler(Dictionary`2<string, CompiledLanguage> compiledLanguages);
    private static LanguageCompiler();
    public sealed virtual CompiledLanguage Compile(ILanguage language);
    private static CompiledLanguage CompileLanguage(ILanguage language);
    private static void CompileRules(IList`1<LanguageRule> rules, Regex& regex, IList`1& captures);
    private static void CompileRule(LanguageRule languageRule, StringBuilder regex, ICollection`1<string> captures, bool isFirstRule);
    private static int GetNumberOfCaptures(string regex);
}
public class ColorCode.Compilation.Languages.Asax : object {
    public string Id { get; }
    public string Name { get; }
    public string CssClassName { get; }
    public string FirstLinePattern { get; }
    public IList`1<LanguageRule> Rules { get; }
    public sealed virtual string get_Id();
    public sealed virtual string get_Name();
    public sealed virtual string get_CssClassName();
    public sealed virtual string get_FirstLinePattern();
    public sealed virtual IList`1<LanguageRule> get_Rules();
    public sealed virtual bool HasAlias(string lang);
    public virtual string ToString();
}
public class ColorCode.Compilation.Languages.Ashx : object {
    public string Id { get; }
    public string Name { get; }
    public string CssClassName { get; }
    public string FirstLinePattern { get; }
    public IList`1<LanguageRule> Rules { get; }
    public sealed virtual string get_Id();
    public sealed virtual string get_Name();
    public sealed virtual string get_CssClassName();
    public sealed virtual string get_FirstLinePattern();
    public sealed virtual IList`1<LanguageRule> get_Rules();
    public sealed virtual bool HasAlias(string lang);
    public virtual string ToString();
}
public class ColorCode.Compilation.Languages.Aspx : object {
    public string Id { get; }
    public string Name { get; }
    public string CssClassName { get; }
    public string FirstLinePattern { get; }
    public IList`1<LanguageRule> Rules { get; }
    public sealed virtual string get_Id();
    public sealed virtual string get_Name();
    public sealed virtual string get_CssClassName();
    public sealed virtual string get_FirstLinePattern();
    public sealed virtual IList`1<LanguageRule> get_Rules();
    public sealed virtual bool HasAlias(string lang);
    public virtual string ToString();
}
public class ColorCode.Compilation.Languages.AspxCs : object {
    public string Id { get; }
    public string Name { get; }
    public string CssClassName { get; }
    public string FirstLinePattern { get; }
    public IList`1<LanguageRule> Rules { get; }
    public sealed virtual string get_Id();
    public sealed virtual string get_Name();
    public sealed virtual string get_CssClassName();
    public sealed virtual string get_FirstLinePattern();
    public sealed virtual IList`1<LanguageRule> get_Rules();
    public sealed virtual bool HasAlias(string lang);
    public virtual string ToString();
}
public class ColorCode.Compilation.Languages.AspxVb : object {
    public string Id { get; }
    public string Name { get; }
    public string CssClassName { get; }
    public string FirstLinePattern { get; }
    public IList`1<LanguageRule> Rules { get; }
    public sealed virtual string get_Id();
    public sealed virtual string get_Name();
    public sealed virtual string get_CssClassName();
    public sealed virtual string get_FirstLinePattern();
    public sealed virtual IList`1<LanguageRule> get_Rules();
    public sealed virtual bool HasAlias(string lang);
    public virtual string ToString();
}
public class ColorCode.Compilation.Languages.Cpp : object {
    public string Id { get; }
    public string Name { get; }
    public string CssClassName { get; }
    public string FirstLinePattern { get; }
    public IList`1<LanguageRule> Rules { get; }
    public sealed virtual string get_Id();
    public sealed virtual string get_Name();
    public sealed virtual string get_CssClassName();
    public sealed virtual string get_FirstLinePattern();
    public sealed virtual IList`1<LanguageRule> get_Rules();
    public sealed virtual bool HasAlias(string lang);
    public virtual string ToString();
}
public class ColorCode.Compilation.Languages.CSharp : object {
    public string Id { get; }
    public string Name { get; }
    public string CssClassName { get; }
    public string FirstLinePattern { get; }
    public IList`1<LanguageRule> Rules { get; }
    public sealed virtual string get_Id();
    public sealed virtual string get_Name();
    public sealed virtual string get_CssClassName();
    public sealed virtual string get_FirstLinePattern();
    public sealed virtual IList`1<LanguageRule> get_Rules();
    public sealed virtual bool HasAlias(string lang);
    public virtual string ToString();
}
public class ColorCode.Compilation.Languages.Css : object {
    public string Id { get; }
    public string Name { get; }
    public string CssClassName { get; }
    public string FirstLinePattern { get; }
    public IList`1<LanguageRule> Rules { get; }
    public sealed virtual string get_Id();
    public sealed virtual string get_Name();
    public sealed virtual string get_CssClassName();
    public sealed virtual string get_FirstLinePattern();
    public sealed virtual IList`1<LanguageRule> get_Rules();
    public sealed virtual bool HasAlias(string lang);
    public virtual string ToString();
}
public class ColorCode.Compilation.Languages.Fortran : object {
    public string Id { get; }
    public string Name { get; }
    public string CssClassName { get; }
    public string FirstLinePattern { get; }
    public IList`1<LanguageRule> Rules { get; }
    public sealed virtual string get_Id();
    public sealed virtual string get_Name();
    public sealed virtual string get_CssClassName();
    public sealed virtual string get_FirstLinePattern();
    public sealed virtual IList`1<LanguageRule> get_Rules();
    public sealed virtual bool HasAlias(string lang);
    public virtual string ToString();
}
public class ColorCode.Compilation.Languages.FSharp : object {
    public string Id { get; }
    public string Name { get; }
    public string CssClassName { get; }
    public string FirstLinePattern { get; }
    public IList`1<LanguageRule> Rules { get; }
    public sealed virtual string get_Id();
    public sealed virtual string get_Name();
    public sealed virtual string get_CssClassName();
    public sealed virtual string get_FirstLinePattern();
    public sealed virtual IList`1<LanguageRule> get_Rules();
    public sealed virtual bool HasAlias(string lang);
    public virtual string ToString();
}
public class ColorCode.Compilation.Languages.Haskell : object {
    private static string nonnestComment;
    private static string incomment;
    private static string keywords;
    private static string opKeywords;
    private static string vsymbol;
    private static string symbol;
    private static string varop;
    private static string conop;
    private static string conid;
    private static string varid;
    private static string qconid;
    private static string qvarid;
    private static string qconidop;
    private static string intype;
    private static string toptype;
    private static string nestedtype;
    private static string datatype;
    private static string inexports;
    public string Id { get; }
    public string Name { get; }
    public string CssClassName { get; }
    public string FirstLinePattern { get; }
    public IList`1<LanguageRule> Rules { get; }
    public sealed virtual string get_Id();
    public sealed virtual string get_Name();
    public sealed virtual string get_CssClassName();
    public sealed virtual string get_FirstLinePattern();
    public sealed virtual IList`1<LanguageRule> get_Rules();
    public sealed virtual bool HasAlias(string lang);
    public virtual string ToString();
}
public class ColorCode.Compilation.Languages.Html : object {
    public string Id { get; }
    public string Name { get; }
    public string CssClassName { get; }
    public string FirstLinePattern { get; }
    public IList`1<LanguageRule> Rules { get; }
    public sealed virtual string get_Id();
    public sealed virtual string get_Name();
    public sealed virtual string get_CssClassName();
    public sealed virtual string get_FirstLinePattern();
    public sealed virtual IList`1<LanguageRule> get_Rules();
    public sealed virtual bool HasAlias(string lang);
    public virtual string ToString();
}
public class ColorCode.Compilation.Languages.Java : object {
    public string Id { get; }
    public string Name { get; }
    public string CssClassName { get; }
    public string FirstLinePattern { get; }
    public IList`1<LanguageRule> Rules { get; }
    public sealed virtual string get_Id();
    public sealed virtual string get_Name();
    public sealed virtual string get_CssClassName();
    public sealed virtual string get_FirstLinePattern();
    public sealed virtual IList`1<LanguageRule> get_Rules();
    public sealed virtual bool HasAlias(string lang);
    public virtual string ToString();
}
public class ColorCode.Compilation.Languages.JavaScript : object {
    public string Id { get; }
    public string Name { get; }
    public string CssClassName { get; }
    public string FirstLinePattern { get; }
    public IList`1<LanguageRule> Rules { get; }
    public sealed virtual string get_Id();
    public sealed virtual string get_Name();
    public sealed virtual string get_CssClassName();
    public sealed virtual string get_FirstLinePattern();
    public sealed virtual IList`1<LanguageRule> get_Rules();
    public sealed virtual bool HasAlias(string lang);
    public virtual string ToString();
}
public class ColorCode.Compilation.Languages.Koka : object {
    private static string incomment;
    private static string plainKeywords;
    private static string controlKeywords;
    private static string typeKeywords;
    private static string pseudoKeywords;
    private static string opkeywords;
    private static string intype;
    private static string toptype;
    private static string nestedtype;
    private static string symbol;
    private static string symbols;
    private static string escape;
    public string Id { get; }
    public string Name { get; }
    public string CssClassName { get; }
    public string FirstLinePattern { get; }
    public IList`1<LanguageRule> Rules { get; }
    public sealed virtual string get_Id();
    public sealed virtual string get_Name();
    public sealed virtual string get_CssClassName();
    public sealed virtual string get_FirstLinePattern();
    public sealed virtual IList`1<LanguageRule> get_Rules();
    public sealed virtual bool HasAlias(string lang);
    public virtual string ToString();
}
public class ColorCode.Compilation.Languages.Markdown : object {
    public string Id { get; }
    public string Name { get; }
    public string CssClassName { get; }
    public string FirstLinePattern { get; }
    public IList`1<LanguageRule> Rules { get; }
    public sealed virtual string get_Id();
    public sealed virtual string get_Name();
    public sealed virtual string get_CssClassName();
    public sealed virtual string get_FirstLinePattern();
    private string link(string content);
    public sealed virtual IList`1<LanguageRule> get_Rules();
    public sealed virtual bool HasAlias(string lang);
    public virtual string ToString();
}
public class ColorCode.Compilation.Languages.Php : object {
    public string Id { get; }
    public string Name { get; }
    public string CssClassName { get; }
    public string FirstLinePattern { get; }
    public IList`1<LanguageRule> Rules { get; }
    public sealed virtual string get_Id();
    public sealed virtual string get_Name();
    public sealed virtual string get_CssClassName();
    public sealed virtual string get_FirstLinePattern();
    public sealed virtual IList`1<LanguageRule> get_Rules();
    public sealed virtual bool HasAlias(string lang);
    public virtual string ToString();
}
public class ColorCode.Compilation.Languages.PowerShell : object {
    public string Id { get; }
    public string Name { get; }
    public string CssClassName { get; }
    public string FirstLinePattern { get; }
    public IList`1<LanguageRule> Rules { get; }
    public sealed virtual string get_Id();
    public sealed virtual string get_Name();
    public sealed virtual string get_CssClassName();
    public sealed virtual string get_FirstLinePattern();
    public sealed virtual IList`1<LanguageRule> get_Rules();
    public sealed virtual bool HasAlias(string lang);
}
public class ColorCode.Compilation.Languages.Sql : object {
    public string Id { get; }
    public string Name { get; }
    public string CssClassName { get; }
    public string FirstLinePattern { get; }
    public IList`1<LanguageRule> Rules { get; }
    public sealed virtual string get_Id();
    public sealed virtual string get_Name();
    public sealed virtual string get_CssClassName();
    public sealed virtual string get_FirstLinePattern();
    public sealed virtual IList`1<LanguageRule> get_Rules();
    public sealed virtual bool HasAlias(string lang);
    public virtual string ToString();
}
public class ColorCode.Compilation.Languages.Typescript : object {
    public string Id { get; }
    public string Name { get; }
    public string CssClassName { get; }
    public string FirstLinePattern { get; }
    public IList`1<LanguageRule> Rules { get; }
    public sealed virtual string get_Id();
    public sealed virtual string get_Name();
    public sealed virtual string get_CssClassName();
    public sealed virtual string get_FirstLinePattern();
    public sealed virtual IList`1<LanguageRule> get_Rules();
    public sealed virtual bool HasAlias(string lang);
    public virtual string ToString();
}
public class ColorCode.Compilation.Languages.VbDotNet : object {
    public string Id { get; }
    public string Name { get; }
    public string CssClassName { get; }
    public string FirstLinePattern { get; }
    public IList`1<LanguageRule> Rules { get; }
    public sealed virtual string get_Id();
    public sealed virtual string get_Name();
    public sealed virtual string get_CssClassName();
    public sealed virtual string get_FirstLinePattern();
    public sealed virtual IList`1<LanguageRule> get_Rules();
    public sealed virtual bool HasAlias(string lang);
    public virtual string ToString();
}
public class ColorCode.Compilation.Languages.Xml : object {
    public string Id { get; }
    public string Name { get; }
    public string CssClassName { get; }
    public string FirstLinePattern { get; }
    public IList`1<LanguageRule> Rules { get; }
    public sealed virtual string get_Id();
    public sealed virtual string get_Name();
    public sealed virtual string get_CssClassName();
    public sealed virtual string get_FirstLinePattern();
    public sealed virtual IList`1<LanguageRule> get_Rules();
    public sealed virtual bool HasAlias(string lang);
    public virtual string ToString();
}
public static class ColorCode.Compilation.RuleCaptures : object {
    public static IDictionary`2<int, string> JavaScript;
    public static IDictionary`2<int, string> CSharpScript;
    public static IDictionary`2<int, string> VbDotNetScript;
    private static RuleCaptures();
    private static IDictionary`2<int, string> BuildCaptures(string languageId);
}
public static class ColorCode.Compilation.RuleFormats : object {
    public static string JavaScript;
    public static string ServerScript;
    private static RuleFormats();
}
public interface ColorCode.ILanguage {
    public string Id { get; }
    public string FirstLinePattern { get; }
    public string Name { get; }
    public IList`1<LanguageRule> Rules { get; }
    public string CssClassName { get; }
    public abstract virtual string get_Id();
    public abstract virtual string get_FirstLinePattern();
    public abstract virtual string get_Name();
    public abstract virtual IList`1<LanguageRule> get_Rules();
    public abstract virtual string get_CssClassName();
    public abstract virtual bool HasAlias(string lang);
}
public class ColorCode.LanguageRule : object {
    [CompilerGeneratedAttribute]
private string <Regex>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<int, string> <Captures>k__BackingField;
    public string Regex { get; private set; }
    public IDictionary`2<int, string> Captures { get; private set; }
    public LanguageRule(string regex, IDictionary`2<int, string> captures);
    [CompilerGeneratedAttribute]
public string get_Regex();
    [CompilerGeneratedAttribute]
private void set_Regex(string value);
    [CompilerGeneratedAttribute]
public IDictionary`2<int, string> get_Captures();
    [CompilerGeneratedAttribute]
private void set_Captures(IDictionary`2<int, string> value);
}
public static class ColorCode.Languages : object {
    internal static LanguageRepository LanguageRepository;
    internal static Dictionary`2<string, ILanguage> LoadedLanguages;
    internal static Dictionary`2<string, CompiledLanguage> CompiledLanguages;
    public static IEnumerable`1<ILanguage> All { get; }
    public static ILanguage Ashx { get; }
    public static ILanguage Asax { get; }
    public static ILanguage Aspx { get; }
    public static ILanguage AspxCs { get; }
    public static ILanguage AspxVb { get; }
    public static ILanguage CSharp { get; }
    public static ILanguage Html { get; }
    public static ILanguage Java { get; }
    public static ILanguage JavaScript { get; }
    public static ILanguage PowerShell { get; }
    public static ILanguage Sql { get; }
    public static ILanguage VbDotNet { get; }
    public static ILanguage Xml { get; }
    public static ILanguage Php { get; }
    public static ILanguage Css { get; }
    public static ILanguage Cpp { get; }
    public static ILanguage Typescript { get; }
    public static ILanguage FSharp { get; }
    public static ILanguage Koka { get; }
    public static ILanguage Haskell { get; }
    public static ILanguage Markdown { get; }
    public static ILanguage Fortran { get; }
    private static Languages();
    public static IEnumerable`1<ILanguage> get_All();
    public static ILanguage get_Ashx();
    public static ILanguage get_Asax();
    public static ILanguage get_Aspx();
    public static ILanguage get_AspxCs();
    public static ILanguage get_AspxVb();
    public static ILanguage get_CSharp();
    public static ILanguage get_Html();
    public static ILanguage get_Java();
    public static ILanguage get_JavaScript();
    public static ILanguage get_PowerShell();
    public static ILanguage get_Sql();
    public static ILanguage get_VbDotNet();
    public static ILanguage get_Xml();
    public static ILanguage get_Php();
    public static ILanguage get_Css();
    public static ILanguage get_Cpp();
    public static ILanguage get_Typescript();
    public static ILanguage get_FSharp();
    public static ILanguage get_Koka();
    public static ILanguage get_Haskell();
    public static ILanguage get_Markdown();
    public static ILanguage get_Fortran();
    public static ILanguage FindById(string id);
    private static void Load();
    public static void Load(ILanguage language);
}
public interface ColorCode.Parsing.ILanguageParser {
    public abstract virtual void Parse(string sourceCode, ILanguage language, Action`2<string, IList`1<Scope>> parseHandler);
}
public class ColorCode.Parsing.LanguageParser : object {
    private ILanguageCompiler languageCompiler;
    private ILanguageRepository languageRepository;
    public LanguageParser(ILanguageCompiler languageCompiler, ILanguageRepository languageRepository);
    public sealed virtual void Parse(string sourceCode, ILanguage language, Action`2<string, IList`1<Scope>> parseHandler);
    private void Parse(string sourceCode, CompiledLanguage compiledLanguage, Action`2<string, IList`1<Scope>> parseHandler);
    private static List`1<Scope> CreateCapturedStyleTree(IList`1<Scope> capturedStyles);
    private static void AddScopeToNestedScopes(Scope scope, Scope& currentScope, ICollection`1<Scope> capturedStyleTree);
    private List`1<Scope> GetCapturedStyles(Match regexMatch, int currentIndex, CompiledLanguage compiledLanguage);
    private void AppendCapturedStylesForRegexCapture(Capture regexCapture, int currentIndex, string styleName, ICollection`1<Scope> capturedStyles);
    private void AppendCapturedStylesForNestedLanguage(Capture regexCapture, int offset, string nestedLanguageId, ICollection`1<Scope> capturedStyles);
    private static void IncreaseCapturedStyleIndicies(IList`1<Scope> capturedStyles, int amountToIncrease);
}
public class ColorCode.Parsing.Scope : object {
    [CompilerGeneratedAttribute]
private IList`1<Scope> <Children>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Length>k__BackingField;
    [CompilerGeneratedAttribute]
private Scope <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public IList`1<Scope> Children { get; public set; }
    public int Index { get; public set; }
    public int Length { get; public set; }
    public Scope Parent { get; public set; }
    public string Name { get; public set; }
    public Scope(string name, int index, int length);
    [CompilerGeneratedAttribute]
public IList`1<Scope> get_Children();
    [CompilerGeneratedAttribute]
public void set_Children(IList`1<Scope> value);
    [CompilerGeneratedAttribute]
public int get_Index();
    [CompilerGeneratedAttribute]
public void set_Index(int value);
    [CompilerGeneratedAttribute]
public int get_Length();
    [CompilerGeneratedAttribute]
public void set_Length(int value);
    [CompilerGeneratedAttribute]
public Scope get_Parent();
    [CompilerGeneratedAttribute]
public void set_Parent(Scope value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    public void AddChild(Scope childScope);
}
public class ColorCode.Styling.Style : object {
    [CompilerGeneratedAttribute]
private string <Background>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Foreground>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ScopeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReferenceName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Italic>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Bold>k__BackingField;
    public string Background { get; public set; }
    public string Foreground { get; public set; }
    public string ScopeName { get; public set; }
    public string ReferenceName { get; public set; }
    public bool Italic { get; public set; }
    public bool Bold { get; public set; }
    public Style(string scopeName);
    [CompilerGeneratedAttribute]
public string get_Background();
    [CompilerGeneratedAttribute]
public void set_Background(string value);
    [CompilerGeneratedAttribute]
public string get_Foreground();
    [CompilerGeneratedAttribute]
public void set_Foreground(string value);
    [CompilerGeneratedAttribute]
public string get_ScopeName();
    [CompilerGeneratedAttribute]
public void set_ScopeName(string value);
    [CompilerGeneratedAttribute]
public string get_ReferenceName();
    [CompilerGeneratedAttribute]
public void set_ReferenceName(string value);
    [CompilerGeneratedAttribute]
public bool get_Italic();
    [CompilerGeneratedAttribute]
public void set_Italic(bool value);
    [CompilerGeneratedAttribute]
public bool get_Bold();
    [CompilerGeneratedAttribute]
public void set_Bold(bool value);
    public virtual string ToString();
}
public class ColorCode.Styling.StyleDictionary : KeyedCollection`2<string, Style> {
    public static string Blue;
    public static string White;
    public static string Black;
    public static string DullRed;
    public static string Yellow;
    public static string Green;
    public static string PowderBlue;
    public static string Teal;
    public static string Gray;
    public static string Navy;
    public static string OrangeRed;
    public static string Purple;
    public static string Red;
    public static string MediumTurqoise;
    public static string Magenta;
    public static string OliveDrab;
    public static string DarkOliveGreen;
    public static string DarkCyan;
    private static string VSDarkBackground;
    private static string VSDarkPlainText;
    private static string VSDarkXMLDelimeter;
    private static string VSDarkXMLName;
    private static string VSDarkXMLAttribute;
    private static string VSDarkXAMLCData;
    private static string VSDarkXMLComment;
    private static string VSDarkComment;
    private static string VSDarkKeyword;
    private static string VSDarkGray;
    private static string VSDarkNumber;
    private static string VSDarkClass;
    private static string VSDarkString;
    public static StyleDictionary DefaultDark { get; }
    public static StyleDictionary DefaultLight { get; }
    protected virtual string GetKeyForItem(Style item);
    public static StyleDictionary get_DefaultDark();
    public static StyleDictionary get_DefaultLight();
}
internal class ThisAssembly : object {
    internal static string AssemblyVersion;
    internal static string AssemblyFileVersion;
    internal static string AssemblyInformationalVersion;
    internal static string AssemblyName;
    internal static string AssemblyTitle;
    internal static string AssemblyConfiguration;
    internal static string RootNamespace;
}
