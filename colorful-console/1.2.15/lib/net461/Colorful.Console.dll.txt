public abstract class Colorful.ColorAlternator : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Color[] <Colors>k__BackingField;
    protected int nextColorIndex;
    public Color[] Colors { get; public set; }
    public ColorAlternator(Color[] colors);
    [CompilerGeneratedAttribute]
public Color[] get_Colors();
    [CompilerGeneratedAttribute]
public void set_Colors(Color[] value);
    public sealed virtual ColorAlternator Prototype();
    protected abstract virtual ColorAlternator PrototypeCore();
    public abstract virtual Color GetNextColor(string input);
    protected abstract virtual void TryIncrementColorIndex();
}
public class Colorful.ColorAlternatorFactory : object {
    public ColorAlternator GetAlternator(String[] patterns, Color[] colors);
    public ColorAlternator GetAlternator(int frequency, Color[] colors);
}
[ExtensionAttribute]
public static class Colorful.ColorExtensions : object {
    [ExtensionAttribute]
public static ConsoleColor ToNearestConsoleColor(Color color);
}
public class Colorful.ColorManager : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsInCompatibilityMode>k__BackingField;
    private ColorMapper colorMapper;
    private ColorStore colorStore;
    private int colorChangeCount;
    private int maxColorChanges;
    public bool IsInCompatibilityMode { get; private set; }
    public ColorManager(ColorStore colorStore, ColorMapper colorMapper, int maxColorChanges, int initialColorChangeCountValue, bool isInCompatibilityMode);
    [CompilerGeneratedAttribute]
public bool get_IsInCompatibilityMode();
    [CompilerGeneratedAttribute]
private void set_IsInCompatibilityMode(bool value);
    public Color GetColor(ConsoleColor color);
    public void ReplaceColor(Color oldColor, Color newColor);
    public ConsoleColor GetConsoleColor(Color color);
    public static bool IsWindows();
    private ConsoleColor GetConsoleColorNative(Color color);
    private bool CanChangeColor();
}
public class Colorful.ColorManagerFactory : object {
    public ColorManager GetManager(ColorStore colorStore, int maxColorChanges, int initialColorChangeCountValue, bool isInCompatibilityMode);
    public ColorManager GetManager(ConcurrentDictionary`2<Color, ConsoleColor> colorMap, ConcurrentDictionary`2<ConsoleColor, Color> consoleColorMap, int maxColorChanges, int initialColorChangeCountValue, bool isInCompatibilityMode);
    private ColorMapper GetColorMapperSafe(bool isWindows);
}
public class Colorful.ColorMapper : object {
    private static int STD_OUTPUT_HANDLE;
    private static IntPtr INVALID_HANDLE_VALUE;
    private static ColorMapper();
    private static IntPtr GetStdHandle(int nStdHandle);
    private static bool GetConsoleScreenBufferInfoEx(IntPtr hConsoleOutput, CONSOLE_SCREEN_BUFFER_INFO_EX& csbe);
    private static bool SetConsoleScreenBufferInfoEx(IntPtr hConsoleOutput, CONSOLE_SCREEN_BUFFER_INFO_EX& csbe);
    public void MapColor(ConsoleColor oldColor, Color newColor);
    public Dictionary`2<string, COLORREF> GetBufferColors();
    public void SetBatchBufferColors(Dictionary`2<string, COLORREF> colors);
    private CONSOLE_SCREEN_BUFFER_INFO_EX GetBufferInfo(IntPtr hConsoleOutput);
    private void MapColor(ConsoleColor color, UInt32 r, UInt32 g, UInt32 b);
    private void SetBufferInfo(IntPtr hConsoleOutput, CONSOLE_SCREEN_BUFFER_INFO_EX csbe);
    private Exception CreateException(int errorCode);
}
public class Colorful.ColorMappingException : Exception {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <ErrorCode>k__BackingField;
    public int ErrorCode { get; private set; }
    public ColorMappingException(int errorCode);
    [CompilerGeneratedAttribute]
public int get_ErrorCode();
    [CompilerGeneratedAttribute]
private void set_ErrorCode(int value);
}
public class Colorful.COLORREF : ValueType {
    private UInt32 ColorDWORD;
    internal COLORREF(Color color);
    internal COLORREF(UInt32 r, UInt32 g, UInt32 b);
    public virtual string ToString();
}
public class Colorful.ColorStore : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ConcurrentDictionary`2<Color, ConsoleColor> <Colors>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ConcurrentDictionary`2<ConsoleColor, Color> <ConsoleColors>k__BackingField;
    public ConcurrentDictionary`2<Color, ConsoleColor> Colors { get; private set; }
    public ConcurrentDictionary`2<ConsoleColor, Color> ConsoleColors { get; private set; }
    public ColorStore(ConcurrentDictionary`2<Color, ConsoleColor> colorMap, ConcurrentDictionary`2<ConsoleColor, Color> consoleColorMap);
    [CompilerGeneratedAttribute]
public ConcurrentDictionary`2<Color, ConsoleColor> get_Colors();
    [CompilerGeneratedAttribute]
private void set_Colors(ConcurrentDictionary`2<Color, ConsoleColor> value);
    [CompilerGeneratedAttribute]
public ConcurrentDictionary`2<ConsoleColor, Color> get_ConsoleColors();
    [CompilerGeneratedAttribute]
private void set_ConsoleColors(ConcurrentDictionary`2<ConsoleColor, Color> value);
    public void Update(ConsoleColor oldColor, Color newColor);
    public ConsoleColor Replace(Color oldColor, Color newColor);
    public bool RequiresUpdate(Color color);
}
public static class Colorful.Console : object {
    private static ColorStore colorStore;
    private static ColorManagerFactory colorManagerFactory;
    private static ColorManager colorManager;
    private static Dictionary`2<string, COLORREF> defaultColorMap;
    private static bool isInCompatibilityMode;
    private static bool isWindows;
    private static int MAX_COLOR_CHANGES;
    private static int INITIAL_COLOR_CHANGE_COUNT_VALUE;
    private static string WRITELINE_TRAILER;
    private static string WRITE_TRAILER;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private static TaskQueue <Queue>k__BackingField;
    private static Color blackEquivalent;
    private static Color blueEquivalent;
    private static Color cyanEquivalent;
    private static Color darkBlueEquivalent;
    private static Color darkCyanEquivalent;
    private static Color darkGrayEquivalent;
    private static Color darkGreenEquivalent;
    private static Color darkMagentaEquivalent;
    private static Color darkRedEquivalent;
    private static Color darkYellowEquivalent;
    private static Color grayEquivalent;
    private static Color greenEquivalent;
    private static Color magentaEquivalent;
    private static Color redEquivalent;
    private static Color whiteEquivalent;
    private static Color yellowEquivalent;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private static ConsoleCancelEventHandler CancelKeyPress;
    private static TaskQueue Queue { get; }
    public static Color BackgroundColor { get; public set; }
    public static int BufferHeight { get; public set; }
    public static int BufferWidth { get; public set; }
    public static bool CapsLock { get; }
    public static int CursorLeft { get; public set; }
    public static int CursorSize { get; public set; }
    public static int CursorTop { get; public set; }
    public static bool CursorVisible { get; public set; }
    public static TextWriter Error { get; }
    public static Color ForegroundColor { get; public set; }
    public static TextReader In { get; }
    public static Encoding InputEncoding { get; public set; }
    public static bool IsErrorRedirected { get; }
    public static bool IsInputRedirected { get; }
    public static bool IsOutputRedirected { get; }
    public static bool KeyAvailable { get; }
    public static int LargestWindowHeight { get; }
    public static int LargestWindowWidth { get; }
    public static bool NumberLock { get; }
    public static TextWriter Out { get; }
    public static Encoding OutputEncoding { get; public set; }
    public static string Title { get; public set; }
    public static bool TreatControlCAsInput { get; public set; }
    public static int WindowHeight { get; public set; }
    public static int WindowLeft { get; public set; }
    public static int WindowTop { get; public set; }
    public static int WindowWidth { get; public set; }
    private static Console();
    [CompilerGeneratedAttribute]
private static TaskQueue get_Queue();
    private static void MapToScreen(IEnumerable`1<KeyValuePair`2<string, Color>> styleMap, string trailer);
    private static void MapToScreen(StyledString styledString, string trailer);
    private static void WriteInColor(Action`1<T> action, T target, Color color);
    private static void WriteChunkInColor(Action`1<string> action, Char[] buffer, int index, int count, Color color);
    private static void WriteInColorAlternating(Action`1<T> action, T target, ColorAlternator alternator);
    private static void WriteChunkInColorAlternating(Action`1<string> action, Char[] buffer, int index, int count, ColorAlternator alternator);
    private static void WriteInColorStyled(string trailer, T target, StyleSheet styleSheet);
    private static void WriteAsciiInColorStyled(string trailer, StyledString target, StyleSheet styleSheet);
    private static void PopulateColorGeometry(IEnumerable`1<KeyValuePair`2<string, Color>> annotationMap, StyledString target);
    private static void WriteChunkInColorStyled(string trailer, Char[] buffer, int index, int count, StyleSheet styleSheet);
    private static void WriteInColor(Action`2<T, U> action, T target0, U target1, Color color);
    private static void WriteInColorAlternating(Action`2<T, U> action, T target0, U target1, ColorAlternator alternator);
    private static void WriteInColorStyled(string trailer, T target0, U target1, StyleSheet styleSheet);
    private static void WriteInColorFormatted(string trailer, T target0, U target1, Color styledColor, Color defaultColor);
    private static void WriteInColorFormatted(string trailer, T target0, Formatter target1, Color defaultColor);
    private static void WriteInColor(Action`3<T, U, U> action, T target0, U target1, U target2, Color color);
    private static void WriteInColorAlternating(Action`3<T, U, U> action, T target0, U target1, U target2, ColorAlternator alternator);
    private static void WriteInColorStyled(string trailer, T target0, U target1, U target2, StyleSheet styleSheet);
    private static void WriteInColorFormatted(string trailer, T target0, U target1, U target2, Color styledColor, Color defaultColor);
    private static void WriteInColorFormatted(string trailer, T target0, Formatter target1, Formatter target2, Color defaultColor);
    private static void WriteInColor(Action`4<T, U, U, U> action, T target0, U target1, U target2, U target3, Color color);
    private static void WriteInColorAlternating(Action`4<T, U, U, U> action, T target0, U target1, U target2, U target3, ColorAlternator alternator);
    private static void WriteInColorStyled(string trailer, T target0, U target1, U target2, U target3, StyleSheet styleSheet);
    private static void WriteInColorFormatted(string trailer, T target0, U target1, U target2, U target3, Color styledColor, Color defaultColor);
    private static void WriteInColorFormatted(string trailer, T target0, Formatter target1, Formatter target2, Formatter target3, Color defaultColor);
    private static void WriteInColorFormatted(string trailer, T target0, Formatter[] targets, Color defaultColor);
    private static void DoWithGradient(Action`2<object, Color> writeAction, IEnumerable`1<T> input, Color startColor, Color endColor, int maxColorsInGradient);
    private static Figlet GetFiglet(FigletFont font);
    private static ColorStore GetColorStore();
    public static Color get_BackgroundColor();
    public static void set_BackgroundColor(Color value);
    public static int get_BufferHeight();
    public static void set_BufferHeight(int value);
    public static int get_BufferWidth();
    public static void set_BufferWidth(int value);
    public static bool get_CapsLock();
    public static int get_CursorLeft();
    public static void set_CursorLeft(int value);
    public static int get_CursorSize();
    public static void set_CursorSize(int value);
    public static int get_CursorTop();
    public static void set_CursorTop(int value);
    public static bool get_CursorVisible();
    public static void set_CursorVisible(bool value);
    public static TextWriter get_Error();
    public static Color get_ForegroundColor();
    public static void set_ForegroundColor(Color value);
    public static TextReader get_In();
    public static Encoding get_InputEncoding();
    public static void set_InputEncoding(Encoding value);
    public static bool get_IsErrorRedirected();
    public static bool get_IsInputRedirected();
    public static bool get_IsOutputRedirected();
    public static bool get_KeyAvailable();
    public static int get_LargestWindowHeight();
    public static int get_LargestWindowWidth();
    public static bool get_NumberLock();
    public static TextWriter get_Out();
    public static Encoding get_OutputEncoding();
    public static void set_OutputEncoding(Encoding value);
    public static string get_Title();
    public static void set_Title(string value);
    public static bool get_TreatControlCAsInput();
    public static void set_TreatControlCAsInput(bool value);
    public static int get_WindowHeight();
    public static void set_WindowHeight(int value);
    public static int get_WindowLeft();
    public static void set_WindowLeft(int value);
    public static int get_WindowTop();
    public static void set_WindowTop(int value);
    public static int get_WindowWidth();
    public static void set_WindowWidth(int value);
    [CompilerGeneratedAttribute]
public static void add_CancelKeyPress(ConsoleCancelEventHandler value);
    [CompilerGeneratedAttribute]
public static void remove_CancelKeyPress(ConsoleCancelEventHandler value);
    public static void Write(bool value);
    public static void Write(bool value, Color color);
    public static void WriteAlternating(bool value, ColorAlternator alternator);
    public static void WriteStyled(bool value, StyleSheet styleSheet);
    public static void Write(char value);
    public static void Write(char value, Color color);
    public static void WriteAlternating(char value, ColorAlternator alternator);
    public static void WriteStyled(char value, StyleSheet styleSheet);
    public static void Write(Char[] value);
    public static void Write(Char[] value, Color color);
    public static void WriteAlternating(Char[] value, ColorAlternator alternator);
    public static void WriteStyled(Char[] value, StyleSheet styleSheet);
    public static void Write(decimal value);
    public static void Write(decimal value, Color color);
    public static void WriteAlternating(decimal value, ColorAlternator alternator);
    public static void WriteStyled(decimal value, StyleSheet styleSheet);
    public static void Write(double value);
    public static void Write(double value, Color color);
    public static void WriteAlternating(double value, ColorAlternator alternator);
    public static void WriteStyled(double value, StyleSheet styleSheet);
    public static void Write(float value);
    public static void Write(float value, Color color);
    public static void WriteAlternating(float value, ColorAlternator alternator);
    public static void WriteStyled(float value, StyleSheet styleSheet);
    public static void Write(int value);
    public static void Write(int value, Color color);
    public static void WriteAlternating(int value, ColorAlternator alternator);
    public static void WriteStyled(int value, StyleSheet styleSheet);
    public static void Write(long value);
    public static void Write(long value, Color color);
    public static void WriteAlternating(long value, ColorAlternator alternator);
    public static void WriteStyled(long value, StyleSheet styleSheet);
    public static void Write(object value);
    public static void Write(object value, Color color);
    public static void WriteAlternating(object value, ColorAlternator alternator);
    public static void WriteStyled(object value, StyleSheet styleSheet);
    public static void Write(string value);
    public static void Write(string value, Color color);
    public static void WriteAlternating(string value, ColorAlternator alternator);
    public static void WriteStyled(string value, StyleSheet styleSheet);
    public static void Write(UInt32 value);
    public static void Write(UInt32 value, Color color);
    public static void WriteAlternating(UInt32 value, ColorAlternator alternator);
    public static void WriteStyled(UInt32 value, StyleSheet styleSheet);
    public static void Write(ulong value);
    public static void Write(ulong value, Color color);
    public static void WriteAlternating(ulong value, ColorAlternator alternator);
    public static void WriteStyled(ulong value, StyleSheet styleSheet);
    public static void Write(string format, object arg0);
    public static void Write(string format, object arg0, Color color);
    public static void WriteAlternating(string format, object arg0, ColorAlternator alternator);
    public static void WriteStyled(string format, object arg0, StyleSheet styleSheet);
    public static void WriteFormatted(string format, object arg0, Color styledColor, Color defaultColor);
    public static void WriteFormatted(string format, Formatter arg0, Color defaultColor);
    public static void Write(string format, Object[] args);
    public static void Write(string format, Color color, Object[] args);
    public static void WriteAlternating(string format, ColorAlternator alternator, Object[] args);
    public static void WriteStyled(StyleSheet styleSheet, string format, Object[] args);
    public static void WriteFormatted(string format, Color styledColor, Color defaultColor, Object[] args);
    public static void WriteFormatted(string format, Color defaultColor, Formatter[] args);
    public static void Write(Char[] buffer, int index, int count);
    public static void Write(Char[] buffer, int index, int count, Color color);
    public static void WriteAlternating(Char[] buffer, int index, int count, ColorAlternator alternator);
    public static void WriteStyled(Char[] buffer, int index, int count, StyleSheet styleSheet);
    public static void Write(string format, object arg0, object arg1);
    public static void Write(string format, object arg0, object arg1, Color color);
    public static void WriteAlternating(string format, object arg0, object arg1, ColorAlternator alternator);
    public static void WriteStyled(string format, object arg0, object arg1, StyleSheet styleSheet);
    public static void WriteFormatted(string format, object arg0, object arg1, Color styledColor, Color defaultColor);
    public static void WriteFormatted(string format, Formatter arg0, Formatter arg1, Color defaultColor);
    public static void Write(string format, object arg0, object arg1, object arg2);
    public static void Write(string format, object arg0, object arg1, object arg2, Color color);
    public static void WriteAlternating(string format, object arg0, object arg1, object arg2, ColorAlternator alternator);
    public static void WriteStyled(string format, object arg0, object arg1, object arg2, StyleSheet styleSheet);
    public static void WriteFormatted(string format, object arg0, object arg1, object arg2, Color styledColor, Color defaultColor);
    public static void WriteFormatted(string format, Formatter arg0, Formatter arg1, Formatter arg2, Color defaultColor);
    public static void Write(string format, object arg0, object arg1, object arg2, object arg3);
    public static void Write(string format, object arg0, object arg1, object arg2, object arg3, Color color);
    public static void WriteAlternating(string format, object arg0, object arg1, object arg2, object arg3, ColorAlternator alternator);
    public static void WriteStyled(string format, object arg0, object arg1, object arg2, object arg3, StyleSheet styleSheet);
    public static void WriteFormatted(string format, object arg0, object arg1, object arg2, object arg3, Color styledColor, Color defaultColor);
    public static void WriteFormatted(string format, Formatter arg0, Formatter arg1, Formatter arg2, Formatter arg3, Color defaultColor);
    public static void WriteLine();
    public static void WriteLineAlternating(ColorAlternator alternator);
    public static void WriteLineStyled(StyleSheet styleSheet);
    public static void WriteLine(bool value);
    public static void WriteLine(bool value, Color color);
    public static void WriteLineAlternating(bool value, ColorAlternator alternator);
    public static void WriteLineStyled(bool value, StyleSheet styleSheet);
    public static void WriteLine(char value);
    public static void WriteLine(char value, Color color);
    public static void WriteLineAlternating(char value, ColorAlternator alternator);
    public static void WriteLineStyled(char value, StyleSheet styleSheet);
    public static void WriteLine(Char[] value);
    public static void WriteLine(Char[] value, Color color);
    public static void WriteLineAlternating(Char[] value, ColorAlternator alternator);
    public static void WriteLineStyled(Char[] value, StyleSheet styleSheet);
    public static void WriteLine(decimal value);
    public static void WriteLine(decimal value, Color color);
    public static void WriteLineAlternating(decimal value, ColorAlternator alternator);
    public static void WriteLineStyled(decimal value, StyleSheet styleSheet);
    public static void WriteLine(double value);
    public static void WriteLine(double value, Color color);
    public static void WriteLineAlternating(double value, ColorAlternator alternator);
    public static void WriteLineStyled(double value, StyleSheet styleSheet);
    public static void WriteLine(float value);
    public static void WriteLine(float value, Color color);
    public static void WriteLineAlternating(float value, ColorAlternator alternator);
    public static void WriteLineStyled(float value, StyleSheet styleSheet);
    public static void WriteLine(int value);
    public static void WriteLine(int value, Color color);
    public static void WriteLineAlternating(int value, ColorAlternator alternator);
    public static void WriteLineStyled(int value, StyleSheet styleSheet);
    public static void WriteLine(long value);
    public static void WriteLine(long value, Color color);
    public static void WriteLineAlternating(long value, ColorAlternator alternator);
    public static void WriteLineStyled(long value, StyleSheet styleSheet);
    public static void WriteLine(object value);
    public static void WriteLine(object value, Color color);
    public static void WriteLineAlternating(object value, ColorAlternator alternator);
    public static void WriteLineStyled(StyledString value, StyleSheet styleSheet);
    public static void WriteLine(string value);
    public static void WriteLine(string value, Color color);
    public static void WriteLineAlternating(string value, ColorAlternator alternator);
    public static void WriteLineStyled(string value, StyleSheet styleSheet);
    public static void WriteLine(UInt32 value);
    public static void WriteLine(UInt32 value, Color color);
    public static void WriteLineAlternating(UInt32 value, ColorAlternator alternator);
    public static void WriteLineStyled(UInt32 value, StyleSheet styleSheet);
    public static void WriteLine(ulong value);
    public static void WriteLine(ulong value, Color color);
    public static void WriteLineAlternating(ulong value, ColorAlternator alternator);
    public static void WriteLineStyled(ulong value, StyleSheet styleSheet);
    public static void WriteLine(string format, object arg0);
    public static void WriteLine(string format, object arg0, Color color);
    public static void WriteLineAlternating(string format, object arg0, ColorAlternator alternator);
    public static void WriteLineStyled(string format, object arg0, StyleSheet styleSheet);
    public static void WriteLineFormatted(string format, object arg0, Color styledColor, Color defaultColor);
    public static void WriteLineFormatted(string format, Formatter arg0, Color defaultColor);
    public static void WriteLine(string format, Object[] args);
    public static void WriteLine(string format, Color color, Object[] args);
    public static void WriteLineAlternating(string format, ColorAlternator alternator, Object[] args);
    public static void WriteLineStyled(StyleSheet styleSheet, string format, Object[] args);
    public static void WriteLineFormatted(string format, Color styledColor, Color defaultColor, Object[] args);
    public static void WriteLineFormatted(string format, Color styledColor, Color defaultColor, IEnumerable`1<object> args);
    public static void WriteLineFormatted(string format, Color defaultColor, Formatter[] args);
    public static void WriteLineFormatted(FormattableString format, object arg0, Color styledColor, Color defaultColor);
    public static void WriteLineFormatted(FormattableString format, Formatter arg0, Color defaultColor);
    public static void WriteLineFormatted(FormattableString format, Color styledColor, Color defaultColor, Object[] args);
    public static void WriteLineFormatted(FormattableString format, Color styledColor, Color defaultColor, IEnumerable`1<object> args);
    public static void WriteLineFormatted(FormattableString format, Color defaultColor, Formatter[] args);
    public static void WriteLine(Char[] buffer, int index, int count);
    public static void WriteLine(Char[] buffer, int index, int count, Color color);
    public static void WriteLineAlternating(Char[] buffer, int index, int count, ColorAlternator alternator);
    public static void WriteLineStyled(Char[] buffer, int index, int count, StyleSheet styleSheet);
    public static void WriteLine(string format, object arg0, object arg1);
    public static void WriteLine(string format, object arg0, object arg1, Color color);
    public static void WriteLineAlternating(string format, object arg0, object arg1, ColorAlternator alternator);
    public static void WriteLineStyled(string format, object arg0, object arg1, StyleSheet styleSheet);
    public static void WriteLineFormatted(string format, object arg0, object arg1, Color styledColor, Color defaultColor);
    public static void WriteLineFormatted(string format, Formatter arg0, Formatter arg1, Color defaultColor);
    public static void WriteLine(string format, object arg0, object arg1, object arg2);
    public static void WriteLine(string format, object arg0, object arg1, object arg2, Color color);
    public static void WriteLineAlternating(string format, object arg0, object arg1, object arg2, ColorAlternator alternator);
    public static void WriteLineStyled(string format, object arg0, object arg1, object arg2, StyleSheet styleSheet);
    public static void WriteLineFormatted(string format, object arg0, object arg1, object arg2, Color styledColor, Color defaultColor);
    public static void WriteLineFormatted(string format, Formatter arg0, Formatter arg1, Formatter arg2, Color defaultColor);
    public static void WriteLine(string format, object arg0, object arg1, object arg2, object arg3);
    public static void WriteLine(string format, object arg0, object arg1, object arg2, object arg3, Color color);
    public static void WriteLineAlternating(string format, object arg0, object arg1, object arg2, object arg3, ColorAlternator alternator);
    public static void WriteLineStyled(string format, object arg0, object arg1, object arg2, object arg3, StyleSheet styleSheet);
    public static void WriteLineFormatted(string format, object arg0, object arg1, object arg2, object arg3, Color styledColor, Color defaultColor);
    public static void WriteLineFormatted(string format, Formatter arg0, Formatter arg1, Formatter arg2, Formatter arg3, Color defaultColor);
    public static void WriteAscii(string value);
    public static void WriteAscii(string value, FigletFont font);
    public static void WriteAscii(string value, Color color);
    public static void WriteAscii(string value, FigletFont font, Color color);
    public static void WriteAsciiAlternating(string value, ColorAlternator alternator);
    public static void WriteAsciiAlternating(string value, FigletFont font, ColorAlternator alternator);
    public static void WriteAsciiStyled(string value, StyleSheet styleSheet);
    public static void WriteAsciiStyled(string value, FigletFont font, StyleSheet styleSheet);
    public static void WriteWithGradient(IEnumerable`1<T> input, Color startColor, Color endColor, int maxColorsInGradient);
    public static void WriteLineWithGradient(IEnumerable`1<T> input, Color startColor, Color endColor, int maxColorsInGradient);
    public static int Read();
    public static ConsoleKeyInfo ReadKey();
    public static ConsoleKeyInfo ReadKey(bool intercept);
    public static string ReadLine();
    public static void ResetColor();
    public static void SetBufferSize(int width, int height);
    public static void SetCursorPosition(int left, int top);
    public static void SetError(TextWriter newError);
    public static void SetIn(TextReader newIn);
    public static void SetOut(TextWriter newOut);
    public static void SetWindowPosition(int left, int top);
    public static void SetWindowSize(int width, int height);
    public static Stream OpenStandardError();
    public static Stream OpenStandardError(int bufferSize);
    public static Stream OpenStandardInput();
    public static Stream OpenStandardInput(int bufferSize);
    public static Stream OpenStandardOutput();
    public static Stream OpenStandardOutput(int bufferSize);
    public static void MoveBufferArea(int sourceLeft, int sourceTop, int sourceWidth, int sourceHeight, int targetLeft, int targetTop);
    public static void MoveBufferArea(int sourceLeft, int sourceTop, int sourceWidth, int sourceHeight, int targetLeft, int targetTop, char sourceChar, ConsoleColor sourceForeColor, ConsoleColor sourceBackColor);
    public static void Clear();
    public static void ReplaceColor(Color oldColor, Color newColor);
    public static void ReplaceAllColorsWithDefaults();
    public static void Beep(int frequency, int duration);
    private static void Console_CancelKeyPress(object sender, ConsoleCancelEventArgs e);
}
public class Colorful.ConsoleAccessException : Exception {
}
public class Colorful.DefaultFonts : object {
    public static string SmallSlant;
    private static DefaultFonts();
}
[ExtensionAttribute]
internal static class Colorful.ExtensionMethods : object {
    [IteratorStateMachineAttribute("Colorful.ExtensionMethods/<Prototype>d__0`1")]
[ExtensionAttribute]
internal static IEnumerable`1<T> Prototype(IEnumerable`1<T> input);
    [IteratorStateMachineAttribute("Colorful.ExtensionMethods/<DeepCopy>d__1`1")]
[ExtensionAttribute]
internal static IEnumerable`1<T> DeepCopy(IEnumerable`1<T> input);
    [ExtensionAttribute]
internal static string AsString(T input);
    [ExtensionAttribute]
internal static object Normalize(T input);
}
public class Colorful.Figlet : object {
    private FigletFont font;
    public Figlet(FigletFont font);
    public StyledString ToAscii(string value);
    private static void CalculateCharacterGeometries(string fragment, int characterIndex, int runningWidthTotal, int line, Char[0...,0...] charGeometry, Int32[0...,0...] indexGeometry);
    private static int GetStringWidth(FigletFont font, string value);
    private static string GetCharacter(FigletFont font, char character, int line);
}
public class Colorful.FigletFont : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <BaseLine>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <CodeTagCount>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <CommentLines>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <FullLayout>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <HardBlank>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <Height>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <Kerning>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private String[] <Lines>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <MaxLength>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <OldLayout>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <PrintDirection>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Signature>k__BackingField;
    public static FigletFont Default { get; }
    public int BaseLine { get; private set; }
    public int CodeTagCount { get; private set; }
    public int CommentLines { get; private set; }
    public int FullLayout { get; private set; }
    public string HardBlank { get; private set; }
    public int Height { get; private set; }
    public int Kerning { get; private set; }
    public String[] Lines { get; private set; }
    public int MaxLength { get; private set; }
    public int OldLayout { get; private set; }
    public int PrintDirection { get; private set; }
    public string Signature { get; private set; }
    public static FigletFont get_Default();
    [CompilerGeneratedAttribute]
public int get_BaseLine();
    [CompilerGeneratedAttribute]
private void set_BaseLine(int value);
    [CompilerGeneratedAttribute]
public int get_CodeTagCount();
    [CompilerGeneratedAttribute]
private void set_CodeTagCount(int value);
    [CompilerGeneratedAttribute]
public int get_CommentLines();
    [CompilerGeneratedAttribute]
private void set_CommentLines(int value);
    [CompilerGeneratedAttribute]
public int get_FullLayout();
    [CompilerGeneratedAttribute]
private void set_FullLayout(int value);
    [CompilerGeneratedAttribute]
public string get_HardBlank();
    [CompilerGeneratedAttribute]
private void set_HardBlank(string value);
    [CompilerGeneratedAttribute]
public int get_Height();
    [CompilerGeneratedAttribute]
private void set_Height(int value);
    [CompilerGeneratedAttribute]
public int get_Kerning();
    [CompilerGeneratedAttribute]
private void set_Kerning(int value);
    [CompilerGeneratedAttribute]
public String[] get_Lines();
    [CompilerGeneratedAttribute]
private void set_Lines(String[] value);
    [CompilerGeneratedAttribute]
public int get_MaxLength();
    [CompilerGeneratedAttribute]
private void set_MaxLength(int value);
    [CompilerGeneratedAttribute]
public int get_OldLayout();
    [CompilerGeneratedAttribute]
private void set_OldLayout(int value);
    [CompilerGeneratedAttribute]
public int get_PrintDirection();
    [CompilerGeneratedAttribute]
private void set_PrintDirection(int value);
    [CompilerGeneratedAttribute]
public string get_Signature();
    [CompilerGeneratedAttribute]
private void set_Signature(string value);
    public static FigletFont Load(Byte[] bytes);
    public static FigletFont Load(Stream stream);
    public static FigletFont Load(string filePath);
    public static FigletFont Parse(string fontContent);
    public static FigletFont Parse(IEnumerable`1<string> fontLines);
    private static int ParseIntValue(String[] values, int index);
}
public class Colorful.Formatter : object {
    private StyleClass`1<object> backingClass;
    public object Target { get; }
    public Color Color { get; }
    public Formatter(object target, Color color);
    public object get_Target();
    public Color get_Color();
}
public class Colorful.FrequencyBasedColorAlternator : ColorAlternator {
    private int alternationFrequency;
    private int writeCount;
    public FrequencyBasedColorAlternator(int alternationFrequency, Color[] colors);
    public sealed virtual FrequencyBasedColorAlternator Prototype();
    protected virtual ColorAlternator PrototypeCore();
    public virtual Color GetNextColor(string input);
    protected virtual void TryIncrementColorIndex();
}
public class Colorful.GradientGenerator : object {
    public List`1<StyleClass`1<T>> GenerateGradient(IEnumerable`1<T> input, Color startColor, Color endColor, int maxColorsInGradient);
    private Color GetGradientColor(int index, Color startColor, Color endColor, int numberOfGrades);
    [CompilerGeneratedAttribute]
internal static int <GenerateGradient>g__SetProgressSymmetrically|0_0(int remainder);
    [CompilerGeneratedAttribute]
internal static int <GenerateGradient>g__ResetProgressSymmetrically|0_1(int progress);
    [CompilerGeneratedAttribute]
internal static bool <GenerateGradient>g__IsFirstRun|0_2(int index);
    [CompilerGeneratedAttribute]
internal static bool <GenerateGradient>g__ShouldChangeColor|0_3(int index, int progress, T current, T previous, <>c__DisplayClass0_0`1& );
    [CompilerGeneratedAttribute]
internal static bool <GenerateGradient>g__CanChangeColor|0_4(int changeCount, <>c__DisplayClass0_0`1& );
}
public interface Colorful.IPrototypable`1 {
    public abstract virtual T Prototype();
}
public class Colorful.MatchLocation : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <Beginning>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <End>k__BackingField;
    public int Beginning { get; }
    public int End { get; }
    public MatchLocation(int beginning, int end);
    [CompilerGeneratedAttribute]
public int get_Beginning();
    [CompilerGeneratedAttribute]
public int get_End();
    public sealed virtual MatchLocation Prototype();
    public sealed virtual bool Equals(MatchLocation other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual int CompareTo(MatchLocation other);
    public virtual string ToString();
}
public abstract class Colorful.Pattern`1 : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T <Value>k__BackingField;
    public T Value { get; }
    public Pattern`1(T pattern);
    [CompilerGeneratedAttribute]
public T get_Value();
    public abstract virtual IEnumerable`1<MatchLocation> GetMatchLocations(T input);
    public abstract virtual IEnumerable`1<T> GetMatches(T input);
    public sealed virtual bool Equals(Pattern`1<T> other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class Colorful.PatternBasedColorAlternator`1 : ColorAlternator {
    private PatternCollection`1<T> patternMatcher;
    private bool isFirstRun;
    public PatternBasedColorAlternator`1(PatternCollection`1<T> patternMatcher, Color[] colors);
    public sealed virtual PatternBasedColorAlternator`1<T> Prototype();
    protected virtual ColorAlternator PrototypeCore();
    public virtual Color GetNextColor(string input);
    protected virtual void TryIncrementColorIndex();
}
public abstract class Colorful.PatternCollection`1 : object {
    protected List`1<Pattern`1<T>> patterns;
    public sealed virtual PatternCollection`1<T> Prototype();
    protected abstract virtual PatternCollection`1<T> PrototypeCore();
    public abstract virtual bool MatchFound(string input);
}
public class Colorful.StyleClass`1 : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T <Target>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Color <Color>k__BackingField;
    public T Target { get; public set; }
    public Color Color { get; public set; }
    public StyleClass`1(T target, Color color);
    [CompilerGeneratedAttribute]
public T get_Target();
    [CompilerGeneratedAttribute]
public void set_Target(T value);
    [CompilerGeneratedAttribute]
public Color get_Color();
    [CompilerGeneratedAttribute]
public void set_Color(Color value);
    public sealed virtual bool Equals(StyleClass`1<T> other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class Colorful.StyledString : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <AbstractValue>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <ConcreteValue>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Color[0...,0...] <ColorGeometry>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Char[0...,0...] <CharacterGeometry>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Int32[0...,0...] <CharacterIndexGeometry>k__BackingField;
    public string AbstractValue { get; }
    public string ConcreteValue { get; }
    public Color[0...,0...] ColorGeometry { get; public set; }
    public Char[0...,0...] CharacterGeometry { get; public set; }
    public Int32[0...,0...] CharacterIndexGeometry { get; public set; }
    public StyledString(string oneDimensionalRepresentation);
    public StyledString(string oneDimensionalRepresentation, string twoDimensionalRepresentation);
    [CompilerGeneratedAttribute]
public string get_AbstractValue();
    [CompilerGeneratedAttribute]
public string get_ConcreteValue();
    [CompilerGeneratedAttribute]
public Color[0...,0...] get_ColorGeometry();
    [CompilerGeneratedAttribute]
public void set_ColorGeometry(Color[0...,0...] value);
    [CompilerGeneratedAttribute]
public Char[0...,0...] get_CharacterGeometry();
    [CompilerGeneratedAttribute]
public void set_CharacterGeometry(Char[0...,0...] value);
    [CompilerGeneratedAttribute]
public Int32[0...,0...] get_CharacterIndexGeometry();
    [CompilerGeneratedAttribute]
public void set_CharacterIndexGeometry(Int32[0...,0...] value);
    public sealed virtual bool Equals(StyledString other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class Colorful.Styler : StyleClass`1<TextPattern> {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private MatchFound <MatchFoundHandler>k__BackingField;
    public MatchFound MatchFoundHandler { get; private set; }
    public Styler(string target, Color color, MatchFound matchHandler);
    [CompilerGeneratedAttribute]
public MatchFound get_MatchFoundHandler();
    [CompilerGeneratedAttribute]
private void set_MatchFoundHandler(MatchFound value);
    public sealed virtual bool Equals(Styler other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class Colorful.StyleSheet : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private List`1<StyleClass`1<TextPattern>> <Styles>k__BackingField;
    public Color UnstyledColor;
    public List`1<StyleClass`1<TextPattern>> Styles { get; private set; }
    public StyleSheet(Color defaultColor);
    [CompilerGeneratedAttribute]
public List`1<StyleClass`1<TextPattern>> get_Styles();
    [CompilerGeneratedAttribute]
private void set_Styles(List`1<StyleClass`1<TextPattern>> value);
    public void AddStyle(string target, Color color, MatchFound matchHandler);
    public void AddStyle(string target, Color color, MatchFoundLite matchHandler);
    public void AddStyle(string target, Color color);
}
public class Colorful.TaskQueue : object {
    private SemaphoreSlim _semaphore;
    [AsyncStateMachineAttribute("Colorful.TaskQueue/<Enqueue>d__2`1")]
[DebuggerStepThroughAttribute]
public Task`1<T> Enqueue(Func`1<Task`1<T>> taskGenerator);
    [AsyncStateMachineAttribute("Colorful.TaskQueue/<Enqueue>d__3")]
[DebuggerStepThroughAttribute]
public Task Enqueue(Func`1<Task> taskGenerator);
}
public class Colorful.TextAnnotator : object {
    private StyleSheet styleSheet;
    private Dictionary`2<StyleClass`1<TextPattern>, MatchFound> matchFoundHandlers;
    public TextAnnotator(StyleSheet styleSheet);
    public List`1<KeyValuePair`2<string, Color>> GetAnnotationMap(string input);
    private List`1<KeyValuePair`2<StyleClass`1<TextPattern>, MatchLocation>> GetStyleTargets(string input);
    private List`1<KeyValuePair`2<string, Color>> GenerateStyleMap(IEnumerable`1<KeyValuePair`2<StyleClass`1<TextPattern>, MatchLocation>> targets, string input);
}
public class Colorful.TextFormatter : object {
    private Color defaultColor;
    private TextPattern textPattern;
    private string defaultFormatToken;
    public TextFormatter(Color defaultColor);
    public TextFormatter(Color defaultColor, string formatToken);
    public List`1<KeyValuePair`2<string, Color>> GetFormatMap(string input, Object[] args, Color[] colors);
    private void TryExtendColors(Object[]& args, Color[]& colors);
}
public class Colorful.TextPattern : Pattern`1<string> {
    private Regex regexPattern;
    public TextPattern(string pattern);
    [IteratorStateMachineAttribute("Colorful.TextPattern/<GetMatchLocations>d__2")]
public virtual IEnumerable`1<MatchLocation> GetMatchLocations(string input);
    [IteratorStateMachineAttribute("Colorful.TextPattern/<GetMatches>d__3")]
public virtual IEnumerable`1<string> GetMatches(string input);
}
public class Colorful.TextPatternCollection : PatternCollection`1<string> {
    public TextPatternCollection(String[] patterns);
    public TextPatternCollection Prototype();
    protected virtual PatternCollection`1<string> PrototypeCore();
    public virtual bool MatchFound(string input);
}
