public class CommonServiceLocator.ActivationException : Exception {
    public ActivationException(string message);
    public ActivationException(string message, Exception innerException);
    protected ActivationException(SerializationInfo info, StreamingContext context);
}
public static class CommonServiceLocator.Constants : object {
    public static string ActivateAllExceptionMessage;
    public static string ActivationExceptionMessage;
    public static string ServiceLocationProviderNotSetMessage;
}
public interface CommonServiceLocator.IServiceLocator {
    public abstract virtual object GetInstance(Type serviceType);
    public abstract virtual object GetInstance(Type serviceType, string key);
    public abstract virtual IEnumerable`1<object> GetAllInstances(Type serviceType);
    public abstract virtual TService GetInstance();
    public abstract virtual TService GetInstance(string key);
    public abstract virtual IEnumerable`1<TService> GetAllInstances();
}
public static class CommonServiceLocator.ServiceLocator : object {
    private static ServiceLocatorProvider _currentProvider;
    public static IServiceLocator Current { get; }
    public static bool IsLocationProviderSet { get; }
    public static IServiceLocator get_Current();
    public static void SetLocatorProvider(ServiceLocatorProvider newProvider);
    public static bool get_IsLocationProviderSet();
}
public abstract class CommonServiceLocator.ServiceLocatorImplBase : object {
    public virtual object GetService(Type serviceType);
    public virtual object GetInstance(Type serviceType);
    public virtual object GetInstance(Type serviceType, string key);
    public virtual IEnumerable`1<object> GetAllInstances(Type serviceType);
    public virtual TService GetInstance();
    public virtual TService GetInstance(string key);
    public virtual IEnumerable`1<TService> GetAllInstances();
    protected abstract virtual object DoGetInstance(Type serviceType, string key);
    protected abstract virtual IEnumerable`1<object> DoGetAllInstances(Type serviceType);
    protected virtual string FormatActivationExceptionMessage(Exception actualException, Type serviceType, string key);
    protected virtual string FormatActivateAllExceptionMessage(Exception actualException, Type serviceType);
}
public class CommonServiceLocator.ServiceLocatorProvider : MulticastDelegate {
    public ServiceLocatorProvider(object object, IntPtr method);
    public virtual IServiceLocator Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual IServiceLocator EndInvoke(IAsyncResult result);
}
[ExtensionAttribute]
internal static class System.Reflection.IntrospectionExtensions : object {
    [ExtensionAttribute]
public static TypeInfo GetTypeInfo(Type type);
}
internal class System.Reflection.TypeInfo : object {
    private static BindingFlags DeclaredOnlyLookup;
    private Type _type;
    public Assembly Assembly { get; }
    public bool IsGenericTypeDefinition { get; }
    public Type[] GenericTypeArguments { get; }
    public Type[] GenericTypeParameters { get; }
    public string Name { get; }
    public Type BaseType { get; }
    public bool IsGenericType { get; }
    public bool IsGenericParameter { get; }
    public bool IsInterface { get; }
    public bool IsAbstract { get; }
    public bool IsValueType { get; }
    public bool ContainsGenericParameters { get; }
    public IEnumerable`1<ConstructorInfo> DeclaredConstructors { get; }
    public IEnumerable`1<EventInfo> DeclaredEvents { get; }
    public IEnumerable`1<FieldInfo> DeclaredFields { get; }
    public IEnumerable`1<MemberInfo> DeclaredMembers { get; }
    public IEnumerable`1<MethodInfo> DeclaredMethods { get; }
    public IEnumerable`1<TypeInfo> DeclaredNestedTypes { get; }
    public IEnumerable`1<PropertyInfo> DeclaredProperties { get; }
    public IEnumerable`1<Type> ImplementedInterfaces { get; }
    internal TypeInfo(Type type);
    public Assembly get_Assembly();
    public bool get_IsGenericTypeDefinition();
    public Type[] get_GenericTypeArguments();
    public Type[] get_GenericTypeParameters();
    public string get_Name();
    public Type get_BaseType();
    public bool get_IsGenericType();
    public Type AsType();
    public bool IsAssignableFrom(TypeInfo typeInfo);
    public bool get_IsGenericParameter();
    public bool get_IsInterface();
    public bool get_IsAbstract();
    public bool IsSubclassOf(Type type);
    public bool get_IsValueType();
    public bool get_ContainsGenericParameters();
    public virtual EventInfo GetDeclaredEvent(string name);
    public virtual FieldInfo GetDeclaredField(string name);
    public virtual MethodInfo GetDeclaredMethod(string name);
    public virtual IEnumerable`1<MethodInfo> GetDeclaredMethods(string name);
    public virtual TypeInfo GetDeclaredNestedType(string name);
    public virtual PropertyInfo GetDeclaredProperty(string name);
    public virtual IEnumerable`1<ConstructorInfo> get_DeclaredConstructors();
    public virtual IEnumerable`1<EventInfo> get_DeclaredEvents();
    public virtual IEnumerable`1<FieldInfo> get_DeclaredFields();
    public virtual IEnumerable`1<MemberInfo> get_DeclaredMembers();
    public virtual IEnumerable`1<MethodInfo> get_DeclaredMethods();
    public virtual IEnumerable`1<TypeInfo> get_DeclaredNestedTypes();
    public virtual IEnumerable`1<PropertyInfo> get_DeclaredProperties();
    public virtual IEnumerable`1<Type> get_ImplementedInterfaces();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public static bool op_Equality(TypeInfo left, TypeInfo right);
    public static bool op_Inequality(TypeInfo left, TypeInfo right);
}
