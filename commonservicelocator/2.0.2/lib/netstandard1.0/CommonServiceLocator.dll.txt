public class CommonServiceLocator.ActivationException : Exception {
    public ActivationException(string message);
    public ActivationException(string message, Exception innerException);
}
public static class CommonServiceLocator.Constants : object {
    public static string ActivateAllExceptionMessage;
    public static string ActivationExceptionMessage;
    public static string ServiceLocationProviderNotSetMessage;
}
public interface CommonServiceLocator.IServiceLocator {
    public abstract virtual object GetInstance(Type serviceType);
    public abstract virtual object GetInstance(Type serviceType, string key);
    public abstract virtual IEnumerable`1<object> GetAllInstances(Type serviceType);
    public abstract virtual TService GetInstance();
    public abstract virtual TService GetInstance(string key);
    public abstract virtual IEnumerable`1<TService> GetAllInstances();
}
public static class CommonServiceLocator.ServiceLocator : object {
    private static ServiceLocatorProvider _currentProvider;
    public static IServiceLocator Current { get; }
    public static bool IsLocationProviderSet { get; }
    public static IServiceLocator get_Current();
    public static void SetLocatorProvider(ServiceLocatorProvider newProvider);
    public static bool get_IsLocationProviderSet();
}
public abstract class CommonServiceLocator.ServiceLocatorImplBase : object {
    public virtual object GetService(Type serviceType);
    public virtual object GetInstance(Type serviceType);
    public virtual object GetInstance(Type serviceType, string key);
    public virtual IEnumerable`1<object> GetAllInstances(Type serviceType);
    public virtual TService GetInstance();
    public virtual TService GetInstance(string key);
    [IteratorStateMachineAttribute("CommonServiceLocator.ServiceLocatorImplBase/<GetAllInstances>d__6`1")]
public virtual IEnumerable`1<TService> GetAllInstances();
    protected abstract virtual object DoGetInstance(Type serviceType, string key);
    protected abstract virtual IEnumerable`1<object> DoGetAllInstances(Type serviceType);
    protected virtual string FormatActivationExceptionMessage(Exception actualException, Type serviceType, string key);
    protected virtual string FormatActivateAllExceptionMessage(Exception actualException, Type serviceType);
}
public class CommonServiceLocator.ServiceLocatorProvider : MulticastDelegate {
    public ServiceLocatorProvider(object object, IntPtr method);
    public virtual IServiceLocator Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual IServiceLocator EndInvoke(IAsyncResult result);
}
