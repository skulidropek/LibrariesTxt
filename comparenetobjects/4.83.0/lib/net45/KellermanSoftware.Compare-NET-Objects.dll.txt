internal static class KellermanSoftware.CompareNetObjects.Cache : object {
    private static Dictionary`2<Type, PropertyInfo[]> _propertyCache;
    private static Dictionary`2<Type, FieldInfo[]> _fieldCache;
    private static Dictionary`2<Type, MethodInfo[]> _methodList;
    private static Cache();
    public static void ClearCache();
    public static IEnumerable`1<FieldInfo> GetFieldInfo(ComparisonConfig config, Type type);
    public static object GetPropertyValue(ComparisonConfig config, Type type, object objectValue, string propertyName);
    public static IEnumerable`1<PropertyInfo> GetPropertyInfo(ComparisonConfig config, Type type);
    public static MethodInfo GetMethod(Type type, string methodName);
    public static IEnumerable`1<MethodInfo> GetMethods(Type type);
}
public class KellermanSoftware.CompareNetObjects.CompareException : Exception {
    [CompilerGeneratedAttribute]
private ComparisonResult <Result>k__BackingField;
    public ComparisonResult Result { get; private set; }
    public CompareException(ComparisonResult result, string message);
    [CompilerGeneratedAttribute]
public ComparisonResult get_Result();
    [CompilerGeneratedAttribute]
private void set_Result(ComparisonResult value);
}
[ExtensionAttribute]
public static class KellermanSoftware.CompareNetObjects.CompareExtensions : object {
    [CompilerGeneratedAttribute]
private static ComparisonConfig <Config>k__BackingField;
    public static ComparisonConfig Config { get; public set; }
    private static CompareExtensions();
    [CompilerGeneratedAttribute]
public static ComparisonConfig get_Config();
    [CompilerGeneratedAttribute]
public static void set_Config(ComparisonConfig value);
    [ExtensionAttribute]
public static void ShouldCompare(T actual, T expected, string message, ComparisonConfig compareConfig);
    [ExtensionAttribute]
public static void ShouldNotCompare(T actual, T expected, string message, ComparisonConfig compareConfig);
    private static string BuildExpectedEqualMessage(string message, ComparisonResult result);
    private static string BuildExpectedNotEqualMessage(string message, ComparisonResult result);
}
public class KellermanSoftware.CompareNetObjects.CompareLogic : object {
    private ComparisonConfig _config;
    public ComparisonConfig Config { get; public set; }
    public CompareLogic(ComparisonConfig config);
    public CompareLogic(bool useAppConfigSettings);
    public sealed virtual ComparisonConfig get_Config();
    public sealed virtual void set_Config(ComparisonConfig value);
    private void SetupWithAppConfigSettings();
    public sealed virtual ComparisonResult Compare(object expectedObject, object actualObject);
    public sealed virtual void ClearCache();
    public void SaveConfiguration(Stream stream);
    public void LoadConfiguration(Stream stream);
    public void LoadConfiguration(string filePath);
    public void SaveConfiguration(string filePath);
}
[ObsoleteAttribute("Use CompareLogic instead", "True")]
public class KellermanSoftware.CompareNetObjects.CompareObjects : object {
    private CompareLogic _logic;
    private ComparisonResult _result;
    [CompilerGeneratedAttribute]
private Func`2<Type, bool> <IsUseCustomTypeComparer>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`4<CompareObjects, object, object, string> <CustomComparer>k__BackingField;
    [ObsoleteAttribute("Use the ComparisonResult.ElapsedMilliseconds returned from CompareLogic.Compare", "True")]
public long ElapsedMilliseconds { get; }
    [ObsoleteAttribute("Use CompareLogic.Config.ShowBreadcrumb instead", "True")]
public bool ShowBreadcrumb { get; public set; }
    [ObsoleteAttribute("Use CompareLogic.Config.MembersToIgnore for members or CompareLogic.Config.ClassTypesToIgnore instead", "True")]
public List`1<string> ElementsToIgnore { get; public set; }
    [ObsoleteAttribute("Use CompareLogic.Config.MembersToInclude or CompareLogic.Config.ClassTypesToInclude instead", "True")]
public List`1<string> ElementsToInclude { get; public set; }
    [ObsoleteAttribute("Use CompareLogic.Config.ComparePrivateProperties instead", "True")]
public bool ComparePrivateProperties { get; public set; }
    [ObsoleteAttribute("Use CompareLogic.Config.ComparePrivateFields instead", "True")]
public bool ComparePrivateFields { get; public set; }
    [ObsoleteAttribute("Use CompareLogic.Config.CompareStaticProperties instead", "True")]
public bool CompareStaticProperties { get; public set; }
    [ObsoleteAttribute("Use CompareLogic.Config.CompareStaticFields instead", "True")]
public bool CompareStaticFields { get; public set; }
    [ObsoleteAttribute("Use CompareLogic.Config.CompareChildren instead", "True")]
public bool CompareChildren { get; public set; }
    [ObsoleteAttribute("Use CompareLogic.Config.CompareReadOnly instead", "True")]
public bool CompareReadOnly { get; public set; }
    [ObsoleteAttribute("Use CompareLogic.Config.CompareFields instead", "True")]
public bool CompareFields { get; public set; }
    [ObsoleteAttribute("Use CompareLogic.Config.IgnoreCollectionOrder instead", "True")]
public bool IgnoreCollectionOrder { get; public set; }
    [ObsoleteAttribute("Use CompareLogic.Config.CompareProperties instead", "True")]
public bool CompareProperties { get; public set; }
    [ObsoleteAttribute("Use CompareLogic.Config.MaxDifferences instead", "True")]
public int MaxDifferences { get; public set; }
    [ObsoleteAttribute("Use the ComparisonResult.Differences returned from CompareLogic.Compare", "True")]
public List`1<Difference> Differences { get; public set; }
    [ObsoleteAttribute("Use the ComparisonResult.DifferencesString returned from CompareLogic.Compare", "True")]
public string DifferencesString { get; }
    [ObsoleteAttribute("Use CompareLogic.Config.AutoClearCache instead", "True")]
public bool AutoClearCache { get; public set; }
    [ObsoleteAttribute("Use CompareLogic.Config.Caching instead", "True")]
public bool Caching { get; public set; }
    [ObsoleteAttribute("Use CompareLogic.Config.AttributesToIgnore instead", "True")]
public List`1<Type> AttributesToIgnore { get; public set; }
    [ObsoleteAttribute("Use CompareLogic.Config.IgnoreObjectTypes instead", "True")]
public bool IgnoreObjectTypes { get; public set; }
    [ObsoleteAttribute("Use CompareLogic.Config.CustomComparers", "True")]
public Func`2<Type, bool> IsUseCustomTypeComparer { get; public set; }
    [ObsoleteAttribute("Use CompareLogic.Config.CustomComparers", "True")]
public Action`4<CompareObjects, object, object, string> CustomComparer { get; public set; }
    [ObsoleteAttribute("Use CompareLogic.Config.ExpectedName instead", "True")]
public string ExpectedName { get; public set; }
    [ObsoleteAttribute("Use CompareLogic.Config.ActualName instead", "True")]
public string ActualName { get; public set; }
    [ObsoleteAttribute("Use CompareLogic.Config.DifferenceCallback instead", "True")]
public Action`1<Difference> DifferenceCallback { get; public set; }
    [ObsoleteAttribute("Use CompareLogic.Config.CollectionMatchingSpec instead", "True")]
public Dictionary`2<Type, IEnumerable`1<string>> CollectionMatchingSpec { get; public set; }
    [ObsoleteAttribute("Use CompareLogic instead", "True")]
public CompareObjects(bool useAppConfigSettings);
    public long get_ElapsedMilliseconds();
    public bool get_ShowBreadcrumb();
    public void set_ShowBreadcrumb(bool value);
    public List`1<string> get_ElementsToIgnore();
    public void set_ElementsToIgnore(List`1<string> value);
    public List`1<string> get_ElementsToInclude();
    public void set_ElementsToInclude(List`1<string> value);
    public bool get_ComparePrivateProperties();
    public void set_ComparePrivateProperties(bool value);
    public bool get_ComparePrivateFields();
    public void set_ComparePrivateFields(bool value);
    public bool get_CompareStaticProperties();
    public void set_CompareStaticProperties(bool value);
    public bool get_CompareStaticFields();
    public void set_CompareStaticFields(bool value);
    public bool get_CompareChildren();
    public void set_CompareChildren(bool value);
    public bool get_CompareReadOnly();
    public void set_CompareReadOnly(bool value);
    public bool get_CompareFields();
    public void set_CompareFields(bool value);
    public bool get_IgnoreCollectionOrder();
    public void set_IgnoreCollectionOrder(bool value);
    public bool get_CompareProperties();
    public void set_CompareProperties(bool value);
    public int get_MaxDifferences();
    public void set_MaxDifferences(int value);
    public List`1<Difference> get_Differences();
    public void set_Differences(List`1<Difference> value);
    public string get_DifferencesString();
    public bool get_AutoClearCache();
    public void set_AutoClearCache(bool value);
    public bool get_Caching();
    public void set_Caching(bool value);
    public List`1<Type> get_AttributesToIgnore();
    public void set_AttributesToIgnore(List`1<Type> value);
    public bool get_IgnoreObjectTypes();
    public void set_IgnoreObjectTypes(bool value);
    [CompilerGeneratedAttribute]
public Func`2<Type, bool> get_IsUseCustomTypeComparer();
    [CompilerGeneratedAttribute]
public void set_IsUseCustomTypeComparer(Func`2<Type, bool> value);
    [CompilerGeneratedAttribute]
public Action`4<CompareObjects, object, object, string> get_CustomComparer();
    [CompilerGeneratedAttribute]
public void set_CustomComparer(Action`4<CompareObjects, object, object, string> value);
    public string get_ExpectedName();
    public void set_ExpectedName(string value);
    public string get_ActualName();
    public void set_ActualName(string value);
    public Action`1<Difference> get_DifferenceCallback();
    public void set_DifferenceCallback(Action`1<Difference> value);
    public Dictionary`2<Type, IEnumerable`1<string>> get_CollectionMatchingSpec();
    public void set_CollectionMatchingSpec(Dictionary`2<Type, IEnumerable`1<string>> value);
    [ObsoleteAttribute("Use CompareLogic.Compare instead", "True")]
public bool Compare(object object1, object object2);
    [ObsoleteAttribute("Use CompareLogic.ClearCache instead", "True")]
public void ClearCache();
}
public class KellermanSoftware.CompareNetObjects.CompareParms : object {
    [CompilerGeneratedAttribute]
private ComparisonConfig <Config>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <Object1Type>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <Object2Type>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <Object1DeclaredType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <Object2DeclaredType>k__BackingField;
    [CompilerGeneratedAttribute]
private ComparisonResult <Result>k__BackingField;
    [CompilerGeneratedAttribute]
private object <ParentObject1>k__BackingField;
    [CompilerGeneratedAttribute]
private object <ParentObject2>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Object1>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Object2>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BreadCrumb>k__BackingField;
    [CompilerGeneratedAttribute]
private BaseTypeComparer <CustomPropertyComparer>k__BackingField;
    public ComparisonConfig Config { get; public set; }
    public Type Object1Type { get; public set; }
    public Type Object2Type { get; public set; }
    public Type Object1DeclaredType { get; public set; }
    public Type Object2DeclaredType { get; public set; }
    public ComparisonResult Result { get; public set; }
    public object ParentObject1 { get; public set; }
    public object ParentObject2 { get; public set; }
    public object Object1 { get; public set; }
    public object Object2 { get; public set; }
    public string BreadCrumb { get; public set; }
    public BaseTypeComparer CustomPropertyComparer { get; public set; }
    [CompilerGeneratedAttribute]
public ComparisonConfig get_Config();
    [CompilerGeneratedAttribute]
public void set_Config(ComparisonConfig value);
    [CompilerGeneratedAttribute]
public Type get_Object1Type();
    [CompilerGeneratedAttribute]
public void set_Object1Type(Type value);
    [CompilerGeneratedAttribute]
public Type get_Object2Type();
    [CompilerGeneratedAttribute]
public void set_Object2Type(Type value);
    [CompilerGeneratedAttribute]
public Type get_Object1DeclaredType();
    [CompilerGeneratedAttribute]
public void set_Object1DeclaredType(Type value);
    [CompilerGeneratedAttribute]
public Type get_Object2DeclaredType();
    [CompilerGeneratedAttribute]
public void set_Object2DeclaredType(Type value);
    [CompilerGeneratedAttribute]
public ComparisonResult get_Result();
    [CompilerGeneratedAttribute]
public void set_Result(ComparisonResult value);
    [CompilerGeneratedAttribute]
public object get_ParentObject1();
    [CompilerGeneratedAttribute]
public void set_ParentObject1(object value);
    [CompilerGeneratedAttribute]
public object get_ParentObject2();
    [CompilerGeneratedAttribute]
public void set_ParentObject2(object value);
    [CompilerGeneratedAttribute]
public object get_Object1();
    [CompilerGeneratedAttribute]
public void set_Object1(object value);
    [CompilerGeneratedAttribute]
public object get_Object2();
    [CompilerGeneratedAttribute]
public void set_Object2(object value);
    [CompilerGeneratedAttribute]
public string get_BreadCrumb();
    [CompilerGeneratedAttribute]
public void set_BreadCrumb(string value);
    [CompilerGeneratedAttribute]
public BaseTypeComparer get_CustomPropertyComparer();
    [CompilerGeneratedAttribute]
public void set_CustomPropertyComparer(BaseTypeComparer value);
}
[DataContractAttribute]
public class KellermanSoftware.CompareNetObjects.ComparisonConfig : object {
    private Action`1<Difference> _differenceCallback;
    private int _maxStructDepth;
    [CompilerGeneratedAttribute]
private HashSet`1<Type> <AttributesToIgnoreSet>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<string> <MembersToIgnoreSet>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<string> <MembersToIncludeSet>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<Type> <ClassTypesToIgnoreSet>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<Type> <ClassTypesToIncludeSet>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<Type> <TypesToIgnoreSet>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<Type> <TypesToIncludeSet>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<Type> <RequiredAttributesToCompareSet>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseHashCodeIdentifier>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CaseSensitive>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreObjectDisposedException>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxMillisecondsDateDifference>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CompareDateTimeOffsetWithOffsets>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreDateTimeOffsetTimezones>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreUnknownObjectTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SkipInvalidIndexers>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Type> <InterfaceMembers>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowBreadcrumb>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Type> <ClassTypesToIgnore>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Type> <ClassTypesToInclude>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Type> <TypesToIgnore>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Type> <TypesToInclude>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <MembersToIgnore>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <MembersToInclude>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ComparePrivateProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ComparePrivateFields>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CompareBackingFields>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CompareStaticProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CompareStaticFields>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CompareChildren>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CompareReadOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CompareFields>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreCollectionOrder>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowCollectionKeyName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CompareProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxDifferences>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxByteArrayDifferences>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AutoClearCache>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Caching>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Type> <AttributesToIgnore>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Type> <RequiredAttributesToCompare>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreObjectTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExpectedName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ActualName>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<Type, IEnumerable`1<string>> <CollectionMatchingSpec>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<BaseTypeComparer> <CustomComparers>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, BaseTypeComparer> <CustomPropertyComparers>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TreatStringEmptyAndNullTheSame>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreStringLeadingTrailingWhitespace>k__BackingField;
    [CompilerGeneratedAttribute]
private double <DoublePrecision>k__BackingField;
    [CompilerGeneratedAttribute]
private decimal <DecimalPrecision>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreConcreteTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreMissingProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreMissingFields>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeKind> <DateTimeKindToUseWhenUnspecified>k__BackingField;
    private Nullable`1<bool> _hasWildcardInMembersToIgnore;
    internal HashSet`1<Type> AttributesToIgnoreSet { get; internal set; }
    internal HashSet`1<string> MembersToIgnoreSet { get; internal set; }
    internal HashSet`1<string> MembersToIncludeSet { get; internal set; }
    internal HashSet`1<Type> ClassTypesToIgnoreSet { get; internal set; }
    internal HashSet`1<Type> ClassTypesToIncludeSet { get; internal set; }
    internal HashSet`1<Type> TypesToIgnoreSet { get; internal set; }
    internal HashSet`1<Type> TypesToIncludeSet { get; internal set; }
    internal HashSet`1<Type> RequiredAttributesToCompareSet { get; internal set; }
    public bool UseHashCodeIdentifier { get; public set; }
    [DataMemberAttribute]
public bool CaseSensitive { get; public set; }
    [DataMemberAttribute]
public bool IgnoreObjectDisposedException { get; public set; }
    [DataMemberAttribute]
public int MaxMillisecondsDateDifference { get; public set; }
    [DataMemberAttribute]
public bool CompareDateTimeOffsetWithOffsets { get; public set; }
    [DataMemberAttribute]
public bool IgnoreDateTimeOffsetTimezones { get; public set; }
    [DataMemberAttribute]
public int MaxStructDepth { get; public set; }
    [DataMemberAttribute]
public bool IgnoreUnknownObjectTypes { get; public set; }
    [DataMemberAttribute]
public bool SkipInvalidIndexers { get; public set; }
    public List`1<Type> InterfaceMembers { get; public set; }
    [DataMemberAttribute]
private List`1<string> InterfaceMembersSerializer { get; private set; }
    [DataMemberAttribute]
public bool ShowBreadcrumb { get; public set; }
    public List`1<Type> ClassTypesToIgnore { get; public set; }
    [DataMemberAttribute]
private List`1<string> ClassTypesToIgnoreSerializer { get; private set; }
    public List`1<Type> ClassTypesToInclude { get; public set; }
    [DataMemberAttribute]
private List`1<string> ClassTypesToIncludeSerializer { get; private set; }
    public List`1<Type> TypesToIgnore { get; public set; }
    [DataMemberAttribute]
private List`1<string> TypesToIgnoreSerializer { get; private set; }
    public List`1<Type> TypesToInclude { get; public set; }
    [DataMemberAttribute]
private List`1<string> TypesToIncludeSerializer { get; private set; }
    [DataMemberAttribute]
public List`1<string> MembersToIgnore { get; public set; }
    [DataMemberAttribute]
public List`1<string> MembersToInclude { get; public set; }
    [DataMemberAttribute]
public bool ComparePrivateProperties { get; public set; }
    [DataMemberAttribute]
public bool ComparePrivateFields { get; public set; }
    [DataMemberAttribute]
public bool CompareBackingFields { get; public set; }
    [DataMemberAttribute]
public bool CompareStaticProperties { get; public set; }
    [DataMemberAttribute]
public bool CompareStaticFields { get; public set; }
    [DataMemberAttribute]
public bool CompareChildren { get; public set; }
    [DataMemberAttribute]
public bool CompareReadOnly { get; public set; }
    [DataMemberAttribute]
public bool CompareFields { get; public set; }
    [DataMemberAttribute]
public bool IgnoreCollectionOrder { get; public set; }
    [DataMemberAttribute]
public bool ShowCollectionKeyName { get; public set; }
    [DataMemberAttribute]
public bool CompareProperties { get; public set; }
    [DataMemberAttribute]
public int MaxDifferences { get; public set; }
    [DataMemberAttribute]
public int MaxByteArrayDifferences { get; public set; }
    [DataMemberAttribute]
public bool AutoClearCache { get; public set; }
    [DataMemberAttribute]
public bool Caching { get; public set; }
    public List`1<Type> AttributesToIgnore { get; public set; }
    [DataMemberAttribute]
private List`1<string> AttributesToIgnoreSerializer { get; private set; }
    public List`1<Type> RequiredAttributesToCompare { get; public set; }
    [DataMemberAttribute]
private List`1<string> RequiredAttributesToCompareSerializer { get; private set; }
    [DataMemberAttribute]
public bool IgnoreObjectTypes { get; public set; }
    [DataMemberAttribute]
public string ExpectedName { get; public set; }
    [DataMemberAttribute]
public string ActualName { get; public set; }
    public Action`1<Difference> DifferenceCallback { get; public set; }
    [DataMemberAttribute]
public Dictionary`2<Type, IEnumerable`1<string>> CollectionMatchingSpec { get; public set; }
    [DataMemberAttribute]
public List`1<BaseTypeComparer> CustomComparers { get; public set; }
    [DataMemberAttribute]
public Dictionary`2<string, BaseTypeComparer> CustomPropertyComparers { get; public set; }
    [DataMemberAttribute]
public bool TreatStringEmptyAndNullTheSame { get; public set; }
    [DataMemberAttribute]
public bool IgnoreStringLeadingTrailingWhitespace { get; public set; }
    [DataMemberAttribute]
public double DoublePrecision { get; public set; }
    [DataMemberAttribute]
public decimal DecimalPrecision { get; public set; }
    [DataMemberAttribute]
public bool IgnoreConcreteTypes { get; public set; }
    [DataMemberAttribute]
public bool IgnoreMissingProperties { get; public set; }
    [DataMemberAttribute]
public bool IgnoreMissingFields { get; public set; }
    [DataMemberAttribute]
public Nullable`1<DateTimeKind> DateTimeKindToUseWhenUnspecified { get; public set; }
    [CompilerGeneratedAttribute]
internal HashSet`1<Type> get_AttributesToIgnoreSet();
    [CompilerGeneratedAttribute]
internal void set_AttributesToIgnoreSet(HashSet`1<Type> value);
    [CompilerGeneratedAttribute]
internal HashSet`1<string> get_MembersToIgnoreSet();
    [CompilerGeneratedAttribute]
internal void set_MembersToIgnoreSet(HashSet`1<string> value);
    [CompilerGeneratedAttribute]
internal HashSet`1<string> get_MembersToIncludeSet();
    [CompilerGeneratedAttribute]
internal void set_MembersToIncludeSet(HashSet`1<string> value);
    [CompilerGeneratedAttribute]
internal HashSet`1<Type> get_ClassTypesToIgnoreSet();
    [CompilerGeneratedAttribute]
internal void set_ClassTypesToIgnoreSet(HashSet`1<Type> value);
    [CompilerGeneratedAttribute]
internal HashSet`1<Type> get_ClassTypesToIncludeSet();
    [CompilerGeneratedAttribute]
internal void set_ClassTypesToIncludeSet(HashSet`1<Type> value);
    [CompilerGeneratedAttribute]
internal HashSet`1<Type> get_TypesToIgnoreSet();
    [CompilerGeneratedAttribute]
internal void set_TypesToIgnoreSet(HashSet`1<Type> value);
    [CompilerGeneratedAttribute]
internal HashSet`1<Type> get_TypesToIncludeSet();
    [CompilerGeneratedAttribute]
internal void set_TypesToIncludeSet(HashSet`1<Type> value);
    [CompilerGeneratedAttribute]
internal HashSet`1<Type> get_RequiredAttributesToCompareSet();
    [CompilerGeneratedAttribute]
internal void set_RequiredAttributesToCompareSet(HashSet`1<Type> value);
    [CompilerGeneratedAttribute]
public bool get_UseHashCodeIdentifier();
    [CompilerGeneratedAttribute]
public void set_UseHashCodeIdentifier(bool value);
    [CompilerGeneratedAttribute]
public bool get_CaseSensitive();
    [CompilerGeneratedAttribute]
public void set_CaseSensitive(bool value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreObjectDisposedException();
    [CompilerGeneratedAttribute]
public void set_IgnoreObjectDisposedException(bool value);
    [CompilerGeneratedAttribute]
public int get_MaxMillisecondsDateDifference();
    [CompilerGeneratedAttribute]
public void set_MaxMillisecondsDateDifference(int value);
    [CompilerGeneratedAttribute]
public bool get_CompareDateTimeOffsetWithOffsets();
    [CompilerGeneratedAttribute]
public void set_CompareDateTimeOffsetWithOffsets(bool value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreDateTimeOffsetTimezones();
    [CompilerGeneratedAttribute]
public void set_IgnoreDateTimeOffsetTimezones(bool value);
    public int get_MaxStructDepth();
    public void set_MaxStructDepth(int value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreUnknownObjectTypes();
    [CompilerGeneratedAttribute]
public void set_IgnoreUnknownObjectTypes(bool value);
    [CompilerGeneratedAttribute]
public bool get_SkipInvalidIndexers();
    [CompilerGeneratedAttribute]
public void set_SkipInvalidIndexers(bool value);
    [CompilerGeneratedAttribute]
public List`1<Type> get_InterfaceMembers();
    [CompilerGeneratedAttribute]
public void set_InterfaceMembers(List`1<Type> value);
    private List`1<string> get_InterfaceMembersSerializer();
    private void set_InterfaceMembersSerializer(List`1<string> value);
    [CompilerGeneratedAttribute]
public bool get_ShowBreadcrumb();
    [CompilerGeneratedAttribute]
public void set_ShowBreadcrumb(bool value);
    [CompilerGeneratedAttribute]
public List`1<Type> get_ClassTypesToIgnore();
    [CompilerGeneratedAttribute]
public void set_ClassTypesToIgnore(List`1<Type> value);
    private List`1<string> get_ClassTypesToIgnoreSerializer();
    private void set_ClassTypesToIgnoreSerializer(List`1<string> value);
    [CompilerGeneratedAttribute]
public List`1<Type> get_ClassTypesToInclude();
    [CompilerGeneratedAttribute]
public void set_ClassTypesToInclude(List`1<Type> value);
    private List`1<string> get_ClassTypesToIncludeSerializer();
    private void set_ClassTypesToIncludeSerializer(List`1<string> value);
    [CompilerGeneratedAttribute]
public List`1<Type> get_TypesToIgnore();
    [CompilerGeneratedAttribute]
public void set_TypesToIgnore(List`1<Type> value);
    private List`1<string> get_TypesToIgnoreSerializer();
    private void set_TypesToIgnoreSerializer(List`1<string> value);
    [CompilerGeneratedAttribute]
public List`1<Type> get_TypesToInclude();
    [CompilerGeneratedAttribute]
public void set_TypesToInclude(List`1<Type> value);
    private List`1<string> get_TypesToIncludeSerializer();
    private void set_TypesToIncludeSerializer(List`1<string> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_MembersToIgnore();
    [CompilerGeneratedAttribute]
public void set_MembersToIgnore(List`1<string> value);
    public void IgnoreProperty(Expression`1<Func`2<TClass, object>> ignoredProperty);
    public void CustomPropertyComparer(Expression`1<Func`2<TClass, object>> customProperty, BaseTypeComparer validator);
    [CompilerGeneratedAttribute]
public List`1<string> get_MembersToInclude();
    [CompilerGeneratedAttribute]
public void set_MembersToInclude(List`1<string> value);
    [CompilerGeneratedAttribute]
public bool get_ComparePrivateProperties();
    [CompilerGeneratedAttribute]
public void set_ComparePrivateProperties(bool value);
    [CompilerGeneratedAttribute]
public bool get_ComparePrivateFields();
    [CompilerGeneratedAttribute]
public void set_ComparePrivateFields(bool value);
    [CompilerGeneratedAttribute]
public bool get_CompareBackingFields();
    [CompilerGeneratedAttribute]
public void set_CompareBackingFields(bool value);
    [CompilerGeneratedAttribute]
public bool get_CompareStaticProperties();
    [CompilerGeneratedAttribute]
public void set_CompareStaticProperties(bool value);
    [CompilerGeneratedAttribute]
public bool get_CompareStaticFields();
    [CompilerGeneratedAttribute]
public void set_CompareStaticFields(bool value);
    [CompilerGeneratedAttribute]
public bool get_CompareChildren();
    [CompilerGeneratedAttribute]
public void set_CompareChildren(bool value);
    [CompilerGeneratedAttribute]
public bool get_CompareReadOnly();
    [CompilerGeneratedAttribute]
public void set_CompareReadOnly(bool value);
    [CompilerGeneratedAttribute]
public bool get_CompareFields();
    [CompilerGeneratedAttribute]
public void set_CompareFields(bool value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreCollectionOrder();
    [CompilerGeneratedAttribute]
public void set_IgnoreCollectionOrder(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShowCollectionKeyName();
    [CompilerGeneratedAttribute]
public void set_ShowCollectionKeyName(bool value);
    [CompilerGeneratedAttribute]
public bool get_CompareProperties();
    [CompilerGeneratedAttribute]
public void set_CompareProperties(bool value);
    [CompilerGeneratedAttribute]
public int get_MaxDifferences();
    [CompilerGeneratedAttribute]
public void set_MaxDifferences(int value);
    [CompilerGeneratedAttribute]
public int get_MaxByteArrayDifferences();
    [CompilerGeneratedAttribute]
public void set_MaxByteArrayDifferences(int value);
    [CompilerGeneratedAttribute]
public bool get_AutoClearCache();
    [CompilerGeneratedAttribute]
public void set_AutoClearCache(bool value);
    [CompilerGeneratedAttribute]
public bool get_Caching();
    [CompilerGeneratedAttribute]
public void set_Caching(bool value);
    [CompilerGeneratedAttribute]
public List`1<Type> get_AttributesToIgnore();
    [CompilerGeneratedAttribute]
public void set_AttributesToIgnore(List`1<Type> value);
    private List`1<string> get_AttributesToIgnoreSerializer();
    private void set_AttributesToIgnoreSerializer(List`1<string> value);
    [CompilerGeneratedAttribute]
public List`1<Type> get_RequiredAttributesToCompare();
    [CompilerGeneratedAttribute]
public void set_RequiredAttributesToCompare(List`1<Type> value);
    private List`1<string> get_RequiredAttributesToCompareSerializer();
    private void set_RequiredAttributesToCompareSerializer(List`1<string> value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreObjectTypes();
    [CompilerGeneratedAttribute]
public void set_IgnoreObjectTypes(bool value);
    [CompilerGeneratedAttribute]
public string get_ExpectedName();
    [CompilerGeneratedAttribute]
public void set_ExpectedName(string value);
    [CompilerGeneratedAttribute]
public string get_ActualName();
    [CompilerGeneratedAttribute]
public void set_ActualName(string value);
    public Action`1<Difference> get_DifferenceCallback();
    public void set_DifferenceCallback(Action`1<Difference> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<Type, IEnumerable`1<string>> get_CollectionMatchingSpec();
    [CompilerGeneratedAttribute]
public void set_CollectionMatchingSpec(Dictionary`2<Type, IEnumerable`1<string>> value);
    [CompilerGeneratedAttribute]
public List`1<BaseTypeComparer> get_CustomComparers();
    [CompilerGeneratedAttribute]
public void set_CustomComparers(List`1<BaseTypeComparer> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, BaseTypeComparer> get_CustomPropertyComparers();
    [CompilerGeneratedAttribute]
public void set_CustomPropertyComparers(Dictionary`2<string, BaseTypeComparer> value);
    [CompilerGeneratedAttribute]
public bool get_TreatStringEmptyAndNullTheSame();
    [CompilerGeneratedAttribute]
public void set_TreatStringEmptyAndNullTheSame(bool value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreStringLeadingTrailingWhitespace();
    [CompilerGeneratedAttribute]
public void set_IgnoreStringLeadingTrailingWhitespace(bool value);
    [CompilerGeneratedAttribute]
public double get_DoublePrecision();
    [CompilerGeneratedAttribute]
public void set_DoublePrecision(double value);
    [CompilerGeneratedAttribute]
public decimal get_DecimalPrecision();
    [CompilerGeneratedAttribute]
public void set_DecimalPrecision(decimal value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreConcreteTypes();
    [CompilerGeneratedAttribute]
public void set_IgnoreConcreteTypes(bool value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreMissingProperties();
    [CompilerGeneratedAttribute]
public void set_IgnoreMissingProperties(bool value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreMissingFields();
    [CompilerGeneratedAttribute]
public void set_IgnoreMissingFields(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeKind> get_DateTimeKindToUseWhenUnspecified();
    [CompilerGeneratedAttribute]
public void set_DateTimeKindToUseWhenUnspecified(Nullable`1<DateTimeKind> value);
    internal void PopulateHashSets();
    public bool HasWildcardMembersToExclude();
    public void Reset();
}
public class KellermanSoftware.CompareNetObjects.ComparisonResult : object {
    private string _differencesString;
    private Dictionary`2<object, int> _referenceParents;
    private Dictionary`2<int, int> _hashParents;
    [CompilerGeneratedAttribute]
private int <CurrentStructDepth>k__BackingField;
    [CompilerGeneratedAttribute]
private ComparisonConfig <Config>k__BackingField;
    [CompilerGeneratedAttribute]
private Stopwatch <Watch>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Difference> <Differences>k__BackingField;
    internal int CurrentStructDepth { get; internal set; }
    public ComparisonConfig Config { get; private set; }
    internal Stopwatch Watch { get; internal set; }
    public long ElapsedMilliseconds { get; }
    public List`1<Difference> Differences { get; public set; }
    public string DifferencesString { get; public set; }
    public bool AreEqual { get; }
    public bool ExceededDifferences { get; }
    public ComparisonResult(ComparisonConfig config);
    [CompilerGeneratedAttribute]
internal int get_CurrentStructDepth();
    [CompilerGeneratedAttribute]
internal void set_CurrentStructDepth(int value);
    [CompilerGeneratedAttribute]
public ComparisonConfig get_Config();
    [CompilerGeneratedAttribute]
private void set_Config(ComparisonConfig value);
    [CompilerGeneratedAttribute]
internal Stopwatch get_Watch();
    [CompilerGeneratedAttribute]
internal void set_Watch(Stopwatch value);
    public long get_ElapsedMilliseconds();
    [CompilerGeneratedAttribute]
public List`1<Difference> get_Differences();
    [CompilerGeneratedAttribute]
public void set_Differences(List`1<Difference> value);
    public string get_DifferencesString();
    public void set_DifferencesString(string value);
    public bool get_AreEqual();
    public bool get_ExceededDifferences();
    public void AddParent(object objectReference);
    public void RemoveParent(object objectReference);
    protected internal bool IsParent(object objectReference);
}
public static class KellermanSoftware.CompareNetObjects.CustomValidationLogic : object {
    public static BaseTypeComparer CustomValidatorForDynamicMember(ComparisonConfig config, string name, Type type);
    public static BaseTypeComparer CustomValidatorForMember(ComparisonConfig config, MemberInfo info, Type objectType);
    private static BaseTypeComparer GetValidatorByName(ComparisonConfig config, string name);
}
public class KellermanSoftware.CompareNetObjects.Difference : object {
    [CompilerGeneratedAttribute]
private string <ExpectedName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ActualName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PropertyName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ChildPropertyName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Object1Value>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Object2Value>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Object1TypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Object2TypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private object <ParentObject1>k__BackingField;
    [CompilerGeneratedAttribute]
private object <ParentObject2>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Object1>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Object2>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MessagePrefix>k__BackingField;
    public string ExpectedName { get; public set; }
    public string ActualName { get; public set; }
    public string ParentPropertyName { get; }
    public string PropertyName { get; public set; }
    public string ChildPropertyName { get; public set; }
    public string Object1Value { get; public set; }
    public string Object2Value { get; public set; }
    public string Object1TypeName { get; public set; }
    public string Object2TypeName { get; public set; }
    public object ParentObject1 { get; public set; }
    public object ParentObject2 { get; public set; }
    public object Object1 { get; public set; }
    public object Object2 { get; public set; }
    public string MessagePrefix { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ExpectedName();
    [CompilerGeneratedAttribute]
public void set_ExpectedName(string value);
    [CompilerGeneratedAttribute]
public string get_ActualName();
    [CompilerGeneratedAttribute]
public void set_ActualName(string value);
    public string get_ParentPropertyName();
    [CompilerGeneratedAttribute]
public string get_PropertyName();
    [CompilerGeneratedAttribute]
public void set_PropertyName(string value);
    [CompilerGeneratedAttribute]
public string get_ChildPropertyName();
    [CompilerGeneratedAttribute]
public void set_ChildPropertyName(string value);
    [CompilerGeneratedAttribute]
public string get_Object1Value();
    [CompilerGeneratedAttribute]
public void set_Object1Value(string value);
    [CompilerGeneratedAttribute]
public string get_Object2Value();
    [CompilerGeneratedAttribute]
public void set_Object2Value(string value);
    [CompilerGeneratedAttribute]
public string get_Object1TypeName();
    [CompilerGeneratedAttribute]
public void set_Object1TypeName(string value);
    [CompilerGeneratedAttribute]
public string get_Object2TypeName();
    [CompilerGeneratedAttribute]
public void set_Object2TypeName(string value);
    [CompilerGeneratedAttribute]
public object get_ParentObject1();
    [CompilerGeneratedAttribute]
public void set_ParentObject1(object value);
    [CompilerGeneratedAttribute]
public object get_ParentObject2();
    [CompilerGeneratedAttribute]
public void set_ParentObject2(object value);
    [CompilerGeneratedAttribute]
public object get_Object1();
    [CompilerGeneratedAttribute]
public void set_Object1(object value);
    [CompilerGeneratedAttribute]
public object get_Object2();
    [CompilerGeneratedAttribute]
public void set_Object2(object value);
    [CompilerGeneratedAttribute]
public string get_MessagePrefix();
    [CompilerGeneratedAttribute]
public void set_MessagePrefix(string value);
    public string GetShortItem();
    public string GetWhatIsCompared();
    public virtual string ToString();
}
public static class KellermanSoftware.CompareNetObjects.EnvironmentHelper : object {
    public static bool IsWindows();
}
public static class KellermanSoftware.CompareNetObjects.ExcludeLogic : object {
    public static bool ShouldExcludeDynamicMember(ComparisonConfig config, string name, Type type);
    public static bool ShouldExcludeMember(ComparisonConfig config, MemberInfo info, Type objectType);
    public static bool ExcludedByWildcard(ComparisonConfig config, string name);
    public static bool ShouldExcludeClass(ComparisonConfig config, Type t1, Type t2);
    public static bool ShouldExcludeType(ComparisonConfig config, Type t1, Type t2);
    public static bool IgnoredByAttribute(ComparisonConfig config, MemberInfo info);
    public static bool IgnoredByLackOfAttribute(ComparisonConfig config, MemberInfo info);
}
public static class KellermanSoftware.CompareNetObjects.FileHelper : object {
    public static string GetCurrentDirectory();
    public static string PathSlash(string path);
}
public class KellermanSoftware.CompareNetObjects.HtmlConfig : object {
    [CompilerGeneratedAttribute]
private string <BreadCrumbColumName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExpectedColumnName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ActualColumnName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <GenerateFullHtml>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HtmlFooter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HtmlTitle>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Style>k__BackingField;
    private string _htmlHeader;
    private static string _header;
    private static string _footer;
    private static string _css;
    public string BreadCrumbColumName { get; public set; }
    public string ExpectedColumnName { get; public set; }
    public string ActualColumnName { get; public set; }
    public bool GenerateFullHtml { get; public set; }
    public string HtmlHeader { get; public set; }
    public string HtmlFooter { get; public set; }
    public string HtmlTitle { get; public set; }
    public string Style { get; public set; }
    [CompilerGeneratedAttribute]
public string get_BreadCrumbColumName();
    [CompilerGeneratedAttribute]
public void set_BreadCrumbColumName(string value);
    [CompilerGeneratedAttribute]
public string get_ExpectedColumnName();
    [CompilerGeneratedAttribute]
public void set_ExpectedColumnName(string value);
    [CompilerGeneratedAttribute]
public string get_ActualColumnName();
    [CompilerGeneratedAttribute]
public void set_ActualColumnName(string value);
    [CompilerGeneratedAttribute]
public bool get_GenerateFullHtml();
    [CompilerGeneratedAttribute]
public void set_GenerateFullHtml(bool value);
    public string get_HtmlHeader();
    public void set_HtmlHeader(string value);
    [CompilerGeneratedAttribute]
public string get_HtmlFooter();
    [CompilerGeneratedAttribute]
public void set_HtmlFooter(string value);
    [CompilerGeneratedAttribute]
public string get_HtmlTitle();
    [CompilerGeneratedAttribute]
public void set_HtmlTitle(string value);
    [CompilerGeneratedAttribute]
public string get_Style();
    [CompilerGeneratedAttribute]
public void set_Style(string value);
    public void IncludeCustomCSS(string css);
    public void ReplaceCSS(string css);
}
public interface KellermanSoftware.CompareNetObjects.ICompareLogic {
    public ComparisonConfig Config { get; public set; }
    public abstract virtual ComparisonConfig get_Config();
    public abstract virtual void set_Config(ComparisonConfig value);
    public abstract virtual ComparisonResult Compare(object expectedObject, object actualObject);
    public abstract virtual void ClearCache();
}
public class KellermanSoftware.CompareNetObjects.IgnoreOrderTypes.IgnoreOrderLogic : BaseComparer {
    private RootComparer _rootComparer;
    public IgnoreOrderLogic(RootComparer rootComparer);
    public void CompareEnumeratorIgnoreOrder(CompareParms parms, bool countsDifferent);
    private void CompareOutOfOrder(CompareParms parms, bool reverseCompare);
    private string GetMatchIndex(ComparisonResult result, List`1<string> spec, object currentObject);
    private static string RespectNumberToString(object o);
    private List`1<string> GetMatchingSpec(ComparisonResult result, Type type);
}
internal class KellermanSoftware.CompareNetObjects.IgnoreOrderTypes.IndexerCollectionLooper : object {
    private object _indexer;
    private PropertyInfo _info;
    private int _cnt;
    public IndexerCollectionLooper(object obj, PropertyInfo info, int cnt);
    [IteratorStateMachineAttribute("KellermanSoftware.CompareNetObjects.IgnoreOrderTypes.IndexerCollectionLooper/<GetEnumerator>d__4")]
public sealed virtual IEnumerator GetEnumerator();
}
public class KellermanSoftware.CompareNetObjects.LogicEqualityComparer : LogicEqualityComparer`1<object> {
}
public class KellermanSoftware.CompareNetObjects.LogicEqualityComparer`1 : object {
    private CompareLogic _comparer;
    [CompilerGeneratedAttribute]
private bool <UseObjectHashes>k__BackingField;
    public CompareLogic CompareLogic { get; }
    public bool UseObjectHashes { get; public set; }
    public CompareLogic get_CompareLogic();
    [CompilerGeneratedAttribute]
public bool get_UseObjectHashes();
    [CompilerGeneratedAttribute]
public void set_UseObjectHashes(bool value);
    public sealed virtual bool Equals(T x, T y);
    public sealed virtual int GetHashCode(T obj);
}
public static class KellermanSoftware.CompareNetObjects.ProcessHelper : object {
    public static int Shell(string executablePath, string arguments, ProcessWindowStyle windowStyle, bool waitUntilFinished);
}
[CompilerGeneratedAttribute]
[GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "15.1.0.0")]
internal class KellermanSoftware.CompareNetObjects.Properties.Settings : ApplicationSettingsBase {
    private static Settings defaultInstance;
    public static Settings Default { get; }
    [UserScopedSettingAttribute]
[DebuggerNonUserCodeAttribute]
public StringCollection MembersToIgnore { get; public set; }
    [UserScopedSettingAttribute]
[DebuggerNonUserCodeAttribute]
public StringCollection AttributesToIgnore { get; public set; }
    [UserScopedSettingAttribute]
[DebuggerNonUserCodeAttribute]
[DefaultSettingValueAttribute("True")]
public bool CompareStaticFields { get; public set; }
    [UserScopedSettingAttribute]
[DebuggerNonUserCodeAttribute]
[DefaultSettingValueAttribute("True")]
public bool CompareStaticProperties { get; public set; }
    [UserScopedSettingAttribute]
[DebuggerNonUserCodeAttribute]
[DefaultSettingValueAttribute("False")]
public bool ComparePrivateProperties { get; public set; }
    [UserScopedSettingAttribute]
[DebuggerNonUserCodeAttribute]
[DefaultSettingValueAttribute("False")]
public bool ComparePrivateFields { get; public set; }
    [UserScopedSettingAttribute]
[DebuggerNonUserCodeAttribute]
[DefaultSettingValueAttribute("True")]
public bool CompareChildren { get; public set; }
    [UserScopedSettingAttribute]
[DebuggerNonUserCodeAttribute]
[DefaultSettingValueAttribute("True")]
public bool CompareReadOnly { get; public set; }
    [UserScopedSettingAttribute]
[DebuggerNonUserCodeAttribute]
[DefaultSettingValueAttribute("True")]
public bool CompareFields { get; public set; }
    [UserScopedSettingAttribute]
[DebuggerNonUserCodeAttribute]
[DefaultSettingValueAttribute("True")]
public bool CompareProperties { get; public set; }
    [UserScopedSettingAttribute]
[DebuggerNonUserCodeAttribute]
[DefaultSettingValueAttribute("True")]
public bool Caching { get; public set; }
    [UserScopedSettingAttribute]
[DebuggerNonUserCodeAttribute]
[DefaultSettingValueAttribute("True")]
public bool AutoClearCache { get; public set; }
    [UserScopedSettingAttribute]
[DebuggerNonUserCodeAttribute]
[DefaultSettingValueAttribute("1")]
public int MaxDifferences { get; public set; }
    [UserScopedSettingAttribute]
[DebuggerNonUserCodeAttribute]
[DefaultSettingValueAttribute("False")]
public bool IgnoreCollectionOrder { get; public set; }
    [UserScopedSettingAttribute]
[DebuggerNonUserCodeAttribute]
[DefaultSettingValueAttribute("False")]
public bool IgnoreUnknownObjectTypes { get; public set; }
    [UserScopedSettingAttribute]
[DebuggerNonUserCodeAttribute]
[DefaultSettingValueAttribute("False")]
public bool IgnoreObjectDisposedException { get; public set; }
    private static Settings();
    public static Settings get_Default();
    public StringCollection get_MembersToIgnore();
    public void set_MembersToIgnore(StringCollection value);
    public StringCollection get_AttributesToIgnore();
    public void set_AttributesToIgnore(StringCollection value);
    public bool get_CompareStaticFields();
    public void set_CompareStaticFields(bool value);
    public bool get_CompareStaticProperties();
    public void set_CompareStaticProperties(bool value);
    public bool get_ComparePrivateProperties();
    public void set_ComparePrivateProperties(bool value);
    public bool get_ComparePrivateFields();
    public void set_ComparePrivateFields(bool value);
    public bool get_CompareChildren();
    public void set_CompareChildren(bool value);
    public bool get_CompareReadOnly();
    public void set_CompareReadOnly(bool value);
    public bool get_CompareFields();
    public void set_CompareFields(bool value);
    public bool get_CompareProperties();
    public void set_CompareProperties(bool value);
    public bool get_Caching();
    public void set_Caching(bool value);
    public bool get_AutoClearCache();
    public void set_AutoClearCache(bool value);
    public int get_MaxDifferences();
    public void set_MaxDifferences(int value);
    public bool get_IgnoreCollectionOrder();
    public void set_IgnoreCollectionOrder(bool value);
    public bool get_IgnoreUnknownObjectTypes();
    public void set_IgnoreUnknownObjectTypes(bool value);
    public bool get_IgnoreObjectDisposedException();
    public void set_IgnoreObjectDisposedException(bool value);
}
public class KellermanSoftware.CompareNetObjects.PropertyEntity : object {
    [CompilerGeneratedAttribute]
private bool <IsDynamic>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ReflectedType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <DeclaringType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <PropertyType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CanRead>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CanWrite>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ParameterInfo> <Indexers>k__BackingField;
    [CompilerGeneratedAttribute]
private PropertyInfo <PropertyInfo>k__BackingField;
    public bool IsDynamic { get; public set; }
    public string Name { get; public set; }
    public object Value { get; public set; }
    public Type ReflectedType { get; public set; }
    public Type DeclaringType { get; public set; }
    public Type PropertyType { get; public set; }
    public bool CanRead { get; public set; }
    public bool CanWrite { get; public set; }
    public List`1<ParameterInfo> Indexers { get; public set; }
    public PropertyInfo PropertyInfo { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_IsDynamic();
    [CompilerGeneratedAttribute]
public void set_IsDynamic(bool value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(object value);
    [CompilerGeneratedAttribute]
public Type get_ReflectedType();
    [CompilerGeneratedAttribute]
public void set_ReflectedType(Type value);
    [CompilerGeneratedAttribute]
public Type get_DeclaringType();
    [CompilerGeneratedAttribute]
public void set_DeclaringType(Type value);
    [CompilerGeneratedAttribute]
public Type get_PropertyType();
    [CompilerGeneratedAttribute]
public void set_PropertyType(Type value);
    [CompilerGeneratedAttribute]
public bool get_CanRead();
    [CompilerGeneratedAttribute]
public void set_CanRead(bool value);
    [CompilerGeneratedAttribute]
public bool get_CanWrite();
    [CompilerGeneratedAttribute]
public void set_CanWrite(bool value);
    [CompilerGeneratedAttribute]
public List`1<ParameterInfo> get_Indexers();
    [CompilerGeneratedAttribute]
public void set_Indexers(List`1<ParameterInfo> value);
    [CompilerGeneratedAttribute]
public PropertyInfo get_PropertyInfo();
    [CompilerGeneratedAttribute]
public void set_PropertyInfo(PropertyInfo value);
}
public abstract class KellermanSoftware.CompareNetObjects.Reports.BaseDualFileReport : object {
    public virtual void OutputFiles(List`1<Difference> differences, string expectedFilePath, string actualFilePath);
    public abstract virtual void LaunchApplication(string expectedFilePath, string actualFilePath);
}
public class KellermanSoftware.CompareNetObjects.Reports.BeyondCompareReport : BaseDualFileReport {
    private static string APPLICATION_NAME;
    public virtual void LaunchApplication(string expectedFilePath, string actualFilePath);
    public string FindBeyondCompare();
}
public class KellermanSoftware.CompareNetObjects.Reports.CsvReport : object {
    public sealed virtual void OutputFile(List`1<Difference> differences, string filePath);
    private void WriteItOut(List`1<Difference> differences, TextWriter writer);
    public sealed virtual void OutputStream(List`1<Difference> differences, Stream stream);
    public sealed virtual string OutputString(List`1<Difference> differences);
    public sealed virtual void LaunchApplication(string filePath);
    private string EscapeString(object value);
}
public class KellermanSoftware.CompareNetObjects.Reports.HtmlReport : object {
    [CompilerGeneratedAttribute]
private HtmlConfig <Config>k__BackingField;
    public HtmlConfig Config { get; public set; }
    [CompilerGeneratedAttribute]
public HtmlConfig get_Config();
    [CompilerGeneratedAttribute]
public void set_Config(HtmlConfig value);
    public sealed virtual void OutputFile(List`1<Difference> differences, string filePath);
    private void WriteItOut(List`1<Difference> differences, TextWriter writer);
    public sealed virtual void LaunchApplication(string filePath);
    public sealed virtual void OutputStream(List`1<Difference> differences, Stream stream);
    public sealed virtual string OutputString(List`1<Difference> differences);
    private string EscapeString(object value);
}
public interface KellermanSoftware.CompareNetObjects.Reports.IDualFileReport {
    public abstract virtual void OutputFiles(List`1<Difference> differences, string expectedFilePath, string actualFilePath);
    public abstract virtual void LaunchApplication(string expectedFilePath, string actualFilePath);
}
public interface KellermanSoftware.CompareNetObjects.Reports.ISingleFileReport {
    public abstract virtual void OutputFile(List`1<Difference> differences, string filePath);
    public abstract virtual void OutputStream(List`1<Difference> differences, Stream stream);
    public abstract virtual string OutputString(List`1<Difference> differences);
    public abstract virtual void LaunchApplication(string filePath);
}
public class KellermanSoftware.CompareNetObjects.Reports.UserFriendlyReport : object {
    [CompilerGeneratedAttribute]
private string <ChangedToText>k__BackingField;
    public string ChangedToText { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ChangedToText();
    [CompilerGeneratedAttribute]
public void set_ChangedToText(string value);
    public sealed virtual void OutputFile(List`1<Difference> differences, string filePath);
    private string FormatProperty(Difference difference);
    private void WriteItOut(List`1<Difference> differences, TextWriter writer);
    public sealed virtual void OutputStream(List`1<Difference> differences, Stream stream);
    public sealed virtual string OutputString(List`1<Difference> differences);
    public sealed virtual void LaunchApplication(string filePath);
}
public class KellermanSoftware.CompareNetObjects.Reports.WinMergeReport : BaseDualFileReport {
    private static string APPLICATION_NAME;
    public virtual void LaunchApplication(string expectedFilePath, string actualFilePath);
    public string FindWinMerge();
}
public class KellermanSoftware.CompareNetObjects.RootComparer : BaseComparer {
    [CompilerGeneratedAttribute]
private List`1<BaseTypeComparer> <TypeComparers>k__BackingField;
    internal List`1<BaseTypeComparer> TypeComparers { get; internal set; }
    [CompilerGeneratedAttribute]
internal List`1<BaseTypeComparer> get_TypeComparers();
    [CompilerGeneratedAttribute]
internal void set_TypeComparers(List`1<BaseTypeComparer> value);
    public bool Compare(CompareParms parms);
    private bool PerformBaseTypeComparison(CompareParms parms, Type t1, Type t2);
    private bool TypesDifferent(CompareParms parms, Type t1, Type t2);
    private bool EitherObjectIsNull(CompareParms parms);
}
public static class KellermanSoftware.CompareNetObjects.RootComparerFactory : object {
    private static object _locker;
    private static RootComparer _rootComparer;
    private static RootComparerFactory();
    public static RootComparer GetRootComparer();
    private static RootComparer BuildRootComparer();
}
public static class KellermanSoftware.CompareNetObjects.StringHelper : object {
    public static string InsertSpaces(string input);
}
[ExtensionAttribute]
internal static class KellermanSoftware.CompareNetObjects.TypeBackwardsCompatibilityExtensions : object {
    [ExtensionAttribute]
public static Type GetTypeInfo(Type type);
}
public class KellermanSoftware.CompareNetObjects.TypeComparers.BaseComparer : object {
    protected string AddBreadCrumb(ComparisonConfig config, string existing, string name);
    protected string AddBreadCrumb(ComparisonConfig config, string existing, string name, string extra, int index);
    protected string AddBreadCrumb(ComparisonConfig config, string existing, string name, string extra, string index);
    protected void AddDifference(CompareParms parameters);
    protected void AddDifference(ComparisonResult result, Difference difference);
    protected string NiceString(object value);
}
public abstract class KellermanSoftware.CompareNetObjects.TypeComparers.BaseTypeComparer : BaseComparer {
    [CompilerGeneratedAttribute]
private RootComparer <RootComparer>k__BackingField;
    public RootComparer RootComparer { get; public set; }
    protected BaseTypeComparer(RootComparer rootComparer);
    [CompilerGeneratedAttribute]
public RootComparer get_RootComparer();
    [CompilerGeneratedAttribute]
public void set_RootComparer(RootComparer value);
    public abstract virtual bool IsTypeMatch(Type type1, Type type2);
    public abstract virtual void CompareType(CompareParms parms);
}
public class KellermanSoftware.CompareNetObjects.TypeComparers.ByteArrayComparer : BaseTypeComparer {
    public ByteArrayComparer(RootComparer rootComparer);
    public virtual bool IsTypeMatch(Type type1, Type type2);
    public virtual void CompareType(CompareParms parms);
    private bool ListsHaveDifferentCounts(CompareParms parms);
    private void CompareItems(CompareParms parms);
}
public class KellermanSoftware.CompareNetObjects.TypeComparers.ClassComparer : BaseTypeComparer {
    private PropertyComparer _propertyComparer;
    private FieldComparer _fieldComparer;
    public ClassComparer(RootComparer rootComparer);
    public virtual bool IsTypeMatch(Type type1, Type type2);
    public virtual void CompareType(CompareParms parms);
}
public class KellermanSoftware.CompareNetObjects.TypeComparers.CollectionComparer : BaseTypeComparer {
    public CollectionComparer(RootComparer rootComparer);
    public virtual bool IsTypeMatch(Type type1, Type type2);
    public virtual void CompareType(CompareParms parms);
    private void CompareItems(CompareParms parms);
    private bool CollectionsDifferentCount(CompareParms parms);
}
public class KellermanSoftware.CompareNetObjects.TypeComparers.CustomComparer`2 : BaseTypeComparer {
    public Func`3<T1, T2, bool> Compare;
    public CustomComparer`2(RootComparer rootComparer);
    public CustomComparer`2(Func`3<T1, T2, bool> compare);
    public CustomComparer`2(RootComparer rootComparer, Func`3<T1, T2, bool> compare);
    public virtual void CompareType(CompareParms parms);
    public virtual bool IsTypeMatch(Type type1, Type type2);
}
public class KellermanSoftware.CompareNetObjects.TypeComparers.DataColumnComparer : BaseTypeComparer {
    public DataColumnComparer(RootComparer rootComparer);
    public virtual bool IsTypeMatch(Type type1, Type type2);
    public virtual void CompareType(CompareParms parms);
    private void CompareProp(CompareParms parms, DataColumn col1, DataColumn col2, T prop1, T prop2, string propName);
}
public class KellermanSoftware.CompareNetObjects.TypeComparers.DataRowComparer : BaseTypeComparer {
    public DataRowComparer(RootComparer rootComparer);
    public virtual bool IsTypeMatch(Type type1, Type type2);
    public virtual void CompareType(CompareParms parms);
}
public class KellermanSoftware.CompareNetObjects.TypeComparers.DatasetComparer : BaseTypeComparer {
    public DatasetComparer(RootComparer rootComparer);
    public virtual bool IsTypeMatch(Type type1, Type type2);
    public virtual void CompareType(CompareParms parms);
    private bool TableCountsDifferent(CompareParms parms, DataSet dataSet2, DataSet dataSet1);
    private void CompareEachTable(CompareParms parms, DataSet dataSet1, DataSet dataSet2);
}
public class KellermanSoftware.CompareNetObjects.TypeComparers.DataTableComparer : BaseTypeComparer {
    public DataTableComparer(RootComparer rootComparer);
    public virtual bool IsTypeMatch(Type type1, Type type2);
    public virtual void CompareType(CompareParms parms);
    private bool ColumnsDifferent(CompareParms parms);
    private void CompareEachRow(CompareParms parms);
}
public class KellermanSoftware.CompareNetObjects.TypeComparers.DateTimeComparer : BaseTypeComparer {
    public DateTimeComparer(RootComparer rootComparer);
    public virtual bool IsTypeMatch(Type type1, Type type2);
    public virtual void CompareType(CompareParms parms);
}
public class KellermanSoftware.CompareNetObjects.TypeComparers.DateTimeOffSetComparer : BaseTypeComparer {
    public DateTimeOffSetComparer(RootComparer rootComparer);
    public virtual bool IsTypeMatch(Type type1, Type type2);
    public virtual void CompareType(CompareParms parms);
}
public class KellermanSoftware.CompareNetObjects.TypeComparers.DecimalComparer : BaseTypeComparer {
    public DecimalComparer(RootComparer rootComparer);
    public virtual bool IsTypeMatch(Type type1, Type type2);
    public virtual void CompareType(CompareParms parms);
}
public class KellermanSoftware.CompareNetObjects.TypeComparers.DictionaryComparer : BaseTypeComparer {
    public DictionaryComparer(RootComparer rootComparer);
    public virtual bool IsTypeMatch(Type type1, Type type2);
    public virtual void CompareType(CompareParms parms);
    private static bool ShouldCompareByKeys(CompareParms parms);
    private void CompareByKeys(CompareParms parms);
    private void CompareByEnumerator(CompareParms parms);
    private bool DictionaryCountsDifferent(CompareParms parms);
}
public class KellermanSoftware.CompareNetObjects.TypeComparers.DoubleComparer : BaseTypeComparer {
    public DoubleComparer(RootComparer rootComparer);
    public virtual bool IsTypeMatch(Type type1, Type type2);
    public virtual void CompareType(CompareParms parms);
}
public class KellermanSoftware.CompareNetObjects.TypeComparers.EnumComparer : BaseTypeComparer {
    public EnumComparer(RootComparer rootComparer);
    public virtual bool IsTypeMatch(Type type1, Type type2);
    public virtual void CompareType(CompareParms parms);
}
public class KellermanSoftware.CompareNetObjects.TypeComparers.EnumerableComparer : BaseTypeComparer {
    private ListComparer _compareIList;
    public EnumerableComparer(RootComparer rootComparer);
    public virtual bool IsTypeMatch(Type type1, Type type2);
    public virtual void CompareType(CompareParms parms);
    private object ConvertEnumerableToList(object source);
}
public class KellermanSoftware.CompareNetObjects.TypeComparers.FieldComparer : BaseComparer {
    private RootComparer _rootComparer;
    public FieldComparer(RootComparer rootComparer);
    public void PerformCompareFields(CompareParms parms);
    private void CompareField(CompareParms parms, FieldInfo item);
    private static FieldInfo GetSecondFieldInfo(CompareParms parms, FieldInfo item);
    private static IEnumerable`1<FieldInfo> GetCurrentFields(CompareParms parms);
}
public class KellermanSoftware.CompareNetObjects.TypeComparers.FontComparer : BaseTypeComparer {
    public FontComparer(RootComparer rootComparer);
    public virtual bool IsTypeMatch(Type type1, Type type2);
    public virtual void CompareType(CompareParms parms);
    private void CompareProp(CompareParms parms, object prop1, object prop2, string propName);
}
public class KellermanSoftware.CompareNetObjects.TypeComparers.HashSetComparer : BaseTypeComparer {
    public HashSetComparer(RootComparer rootComparer);
    public virtual bool IsTypeMatch(Type type1, Type type2);
    public virtual void CompareType(CompareParms parms);
    private void CompareItems(CompareParms parms);
    private bool HashSetsDifferentCount(CompareParms parms);
}
public class KellermanSoftware.CompareNetObjects.TypeComparers.ImmutableArrayComparer : BaseTypeComparer {
    private ListComparer _listComparer;
    public ImmutableArrayComparer(RootComparer rootComparer);
    public virtual bool IsTypeMatch(Type type1, Type type2);
    public virtual void CompareType(CompareParms parms);
}
public class KellermanSoftware.CompareNetObjects.TypeComparers.IndexerComparer : BaseComparer {
    private RootComparer _rootComparer;
    public IndexerComparer(RootComparer rootComparer);
    public void CompareIndexer(CompareParms parms, PropertyEntity info, PropertyEntity secondObjectInfo);
    private bool IndexersHaveDifferentLength(CompareParms parms, PropertyEntity info, int indexerCount1, int indexerCount2);
}
public class KellermanSoftware.CompareNetObjects.TypeComparers.IpEndPointComparer : BaseTypeComparer {
    public IpEndPointComparer(RootComparer rootComparer);
    public virtual bool IsTypeMatch(Type type1, Type type2);
    public virtual void CompareType(CompareParms parms);
    private void ComparePort(CompareParms parms, IPEndPoint ipEndPoint1, IPEndPoint ipEndPoint2);
    private void CompareAddress(CompareParms parms, IPEndPoint ipEndPoint1, IPEndPoint ipEndPoint2);
}
public class KellermanSoftware.CompareNetObjects.TypeComparers.ListComparer : BaseTypeComparer {
    private PropertyComparer _propertyComparer;
    private FieldComparer _fieldComparer;
    public ListComparer(RootComparer rootComparer);
    public virtual bool IsTypeMatch(Type type1, Type type2);
    public virtual void CompareType(CompareParms parms);
    private void CompareFields(CompareParms parms);
    private void CompareProperties(CompareParms parms);
    private bool ListsHaveDifferentCounts(CompareParms parms);
    private bool ChildShouldBeComparedWithoutOrder(CompareParms parms);
    private void CompareItems(CompareParms parms);
}
public class KellermanSoftware.CompareNetObjects.TypeComparers.PointerComparer : BaseTypeComparer {
    public PointerComparer(RootComparer rootComparer);
    public virtual bool IsTypeMatch(Type type1, Type type2);
    public virtual void CompareType(CompareParms parms);
}
public class KellermanSoftware.CompareNetObjects.TypeComparers.PropertyComparer : BaseComparer {
    private RootComparer _rootComparer;
    private IndexerComparer _indexerComparer;
    private static String[] _baseList;
    public PropertyComparer(RootComparer rootComparer);
    private static PropertyComparer();
    public void PerformCompareProperties(CompareParms parms, bool ignoreBaseList);
    private void CompareProperty(CompareParms parms, PropertyEntity info, List`1<PropertyEntity> object2Properties);
    private static List`1<PropertyEntity> GetCurrentProperties(CompareParms parms, object objectValue, Type objectType);
    private static List`1<PropertyEntity> HandleNormalProperties(CompareParms parms, object objectValue, Type objectType);
    private static List`1<PropertyEntity> AddPropertyInfos(CompareParms parms, object objectValue, Type objectType, IEnumerable`1<PropertyInfo> properties);
    private static List`1<PropertyEntity> HandleInterfaceMembers(CompareParms parms, object objectValue, Type objectType);
    private static List`1<PropertyEntity> HandleDynamicObject(object objectValue, Type objectType);
    private static List`1<PropertyEntity> AddExpandoPropertyValues(object objectValue, Type objectType);
    private bool IsValidIndexer(ComparisonConfig config, PropertyEntity info, string breadCrumb);
}
public class KellermanSoftware.CompareNetObjects.TypeComparers.ReadOnlyCollectionComparer : BaseTypeComparer {
    public ReadOnlyCollectionComparer(RootComparer rootComparer);
    public virtual bool IsTypeMatch(Type type1, Type type2);
    public virtual void CompareType(CompareParms parms);
    private void CompareItems(CompareParms parms);
    private bool CollectionsDifferentCount(CompareParms parms);
}
public class KellermanSoftware.CompareNetObjects.TypeComparers.RuntimeTypeComparer : BaseTypeComparer {
    public RuntimeTypeComparer(RootComparer rootComparer);
    public virtual bool IsTypeMatch(Type type1, Type type2);
    public virtual void CompareType(CompareParms parms);
}
public class KellermanSoftware.CompareNetObjects.TypeComparers.SimpleTypeComparer : BaseTypeComparer {
    public SimpleTypeComparer(RootComparer rootComparer);
    public virtual bool IsTypeMatch(Type type1, Type type2);
    public virtual void CompareType(CompareParms parms);
}
public class KellermanSoftware.CompareNetObjects.TypeComparers.StringBuilderComparer : BaseTypeComparer {
    public StringBuilderComparer(RootComparer rootComparer);
    public virtual bool IsTypeMatch(Type type1, Type type2);
    public virtual void CompareType(CompareParms parms);
}
public class KellermanSoftware.CompareNetObjects.TypeComparers.StringComparer : BaseTypeComparer {
    public StringComparer(RootComparer rootComparer);
    public virtual bool IsTypeMatch(Type type1, Type type2);
    public virtual void CompareType(CompareParms parms);
    private bool OneOfTheStringsIsNull(CompareParms parms);
}
public class KellermanSoftware.CompareNetObjects.TypeComparers.StructComparer : BaseTypeComparer {
    private PropertyComparer _propertyComparer;
    private FieldComparer _fieldComparer;
    public StructComparer(RootComparer rootComparer);
    public virtual bool IsTypeMatch(Type type1, Type type2);
    public virtual void CompareType(CompareParms parms);
}
public class KellermanSoftware.CompareNetObjects.TypeComparers.TimespanComparer : BaseTypeComparer {
    public TimespanComparer(RootComparer rootComparer);
    public virtual bool IsTypeMatch(Type type1, Type type2);
    public virtual void CompareType(CompareParms parms);
}
public class KellermanSoftware.CompareNetObjects.TypeComparers.UriComparer : BaseTypeComparer {
    public UriComparer(RootComparer rootComparer);
    public virtual bool IsTypeMatch(Type type1, Type type2);
    public virtual void CompareType(CompareParms parms);
}
public static class KellermanSoftware.CompareNetObjects.TypeHelper : object {
    public static bool IsDynamicObject(Type type);
    public static bool IsExpandoObject(object objectValue);
    public static bool IsByteArray(Type type);
    public static bool CanHaveChildren(Type type);
    public static bool IsArray(Type type);
    public static bool IsImmutableArray(Type type);
    public static bool IsReadOnlyCollection(Type type);
    public static bool IsStruct(Type type);
    public static bool IsTimespan(Type type);
    public static bool IsClass(Type type);
    public static bool IsInterface(Type type);
    public static bool IsUri(Type type);
    public static bool IsPointer(Type type);
    public static bool IsEnum(Type type);
    public static bool IsIDictionary(Type type);
    public static bool IsHashSet(Type type);
    public static bool IsIList(Type type);
    public static bool IsEnumerable(Type type);
    public static bool IsDouble(Type type);
    public static bool IsDecimal(Type type);
    public static bool IsDecimal(object value);
    public static bool IsDateTime(Type type);
    public static bool IsDateOnly(Type type);
    public static bool IsTimeOnly(Type type);
    public static bool IsDateTimeOffset(Type type);
    public static bool IsStringBuilder(Type type);
    public static bool IsString(Type type);
    public static bool IsSimpleType(Type type);
    public static bool IsRuntimeType(Type type);
    public static bool IsGenericType(Type type);
    public static bool IsIpEndPoint(Type type);
    public static bool IsDataset(Type type);
    public static bool IsDataTable(Type type);
    public static bool IsDataRow(Type type);
    public static bool IsDataColumn(Type type);
    public static bool IsFont(Type type);
    public static List`1<string> ListOfTypesSerializer(List`1<Type> types);
    public static List`1<Type> ListOfTypesDeserializer(List`1<string> stringList);
}
public class KellermanSoftware.CompareNetObjects.VerifyConfig : object {
    public void Verify(ComparisonConfig config);
    public void VerifySpec(ComparisonConfig config);
}
public static class KellermanSoftware.CompareNetObjects.WebHelper : object {
    public static string HtmlEncode(string text);
}
