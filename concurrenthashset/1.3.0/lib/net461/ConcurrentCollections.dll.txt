[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("Count = {Count}")]
public class ConcurrentCollections.ConcurrentHashSet`1 : object {
    private static int DefaultCapacity;
    private static int MaxLockNumber;
    private IEqualityComparer`1<T> _comparer;
    private bool _growLockArray;
    private int _budget;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Tables modreq(System.Runtime.CompilerServices.IsVolatile) _tables;
    private static int DefaultConcurrencyLevel { get; }
    public IEqualityComparer`1<T> Comparer { get; }
    public int Count { get; }
    public bool IsEmpty { get; }
    private bool System.Collections.Generic.ICollection<T>.IsReadOnly { get; }
    public ConcurrentHashSet`1(int concurrencyLevel, int capacity);
    public ConcurrentHashSet`1(IEnumerable`1<T> collection);
    public ConcurrentHashSet`1(IEqualityComparer`1<T> comparer);
    public ConcurrentHashSet`1(IEnumerable`1<T> collection, IEqualityComparer`1<T> comparer);
    public ConcurrentHashSet`1(int concurrencyLevel, IEnumerable`1<T> collection, IEqualityComparer`1<T> comparer);
    public ConcurrentHashSet`1(int concurrencyLevel, int capacity, IEqualityComparer`1<T> comparer);
    private ConcurrentHashSet`1(int concurrencyLevel, int capacity, bool growLockArray, IEqualityComparer`1<T> comparer);
    private static int get_DefaultConcurrencyLevel();
    public IEqualityComparer`1<T> get_Comparer();
    public sealed virtual int get_Count();
    public bool get_IsEmpty();
    public bool Add(T item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(T item);
    public bool TryGetValue(T equalValue, T& actualValue);
    public bool TryRemove(T item);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override IEnumerator`1<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator();
    [NullableContextAttribute("0")]
public Enumerator<T> GetEnumerator();
    private sealed virtual override void System.Collections.Generic.ICollection<T>.Add(T item);
    private sealed virtual override bool System.Collections.Generic.ICollection<T>.get_IsReadOnly();
    private sealed virtual override void System.Collections.Generic.ICollection<T>.CopyTo(T[] array, int arrayIndex);
    private sealed virtual override bool System.Collections.Generic.ICollection<T>.Remove(T item);
    private void InitializeFromCollection(IEnumerable`1<T> collection);
    private bool AddInternal(T item, int hashcode, bool acquireLock);
    private static int GetBucket(int hashcode, int bucketCount);
    private static void GetBucketAndLockNo(int hashcode, Int32& bucketNo, Int32& lockNo, int bucketCount, int lockCount);
    private bool AreAllBucketsEmpty();
    private void GrowTable(Tables<T> tables);
    private void AcquireAllLocks(Int32& locksAcquired);
    private void AcquireLocks(int fromInclusive, int toExclusive, Int32& locksAcquired);
    private void ReleaseLocks(int fromInclusive, int toExclusive);
    private void CopyToItems(T[] array, int index);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public MaybeNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
