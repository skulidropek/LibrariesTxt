[ExtensionAttribute]
internal static class AttributeCleaner : object {
    public static void Run(ModuleDefinition module);
    [ExtensionAttribute]
private static void RemoveAllCustomAttributes(ICustomAttributeProvider definition);
}
[ExtensionAttribute]
internal static class CecilExtensions : object {
    [ExtensionAttribute]
public static bool IsIAsyncStateMachine(TypeDefinition type);
    [ExtensionAttribute]
public static MethodDefinition Method(TypeDefinition type, MethodReference reference);
    [ExtensionAttribute]
public static bool IsCompilerGenerated(ICustomAttributeProvider provider);
    [ExtensionAttribute]
public static void InsertBefore(ILProcessor processor, Instruction target, Instruction[] instructions);
    [ExtensionAttribute]
public static bool IsAsyncStateMachineType(ICustomAttributeProvider provider);
    [ExtensionAttribute]
public static TypeDefinition GetAsyncStateMachineType(ICustomAttributeProvider provider);
    [ExtensionAttribute]
public static CustomAttribute GetConfigureAwaitAttribute(ICustomAttributeProvider value);
    [ExtensionAttribute]
public static Nullable`1<bool> GetConfigureAwaitConfig(ICustomAttributeProvider value, Nullable`1<bool> defaultValue);
    [ExtensionAttribute]
public static GenericInstanceType MakeGenericInstanceType(TypeReference self, IEnumerable`1<TypeReference> arguments);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public class ModuleWeaver : BaseModuleWeaver {
    private Nullable`1<bool> continueOnCapturedContext;
    private TypeReference configuredTaskAwaitableTypeRef;
    private TypeReference configuredValueTaskAwaitableTypeRef;
    private TypeReference configuredTaskAwaiterTypeRef;
    private TypeReference configuredValueTaskAwaiterTypeRef;
    private TypeDefinition genericConfiguredTaskAwaiterTypeDef;
    private TypeDefinition genericConfiguredValueTaskAwaiterTypeDef;
    private TypeDefinition genericConfiguredTaskAwaitableTypeDef;
    private TypeDefinition genericConfiguredValueTaskAwaitableTypeDef;
    private TypeDefinition configuredTaskAwaitableTypeDef;
    private TypeDefinition configuredValueTaskAwaitableTypeDef;
    private TypeDefinition configuredTaskAwaiterTypeDef;
    private TypeDefinition configuredValueTaskAwaiterTypeDef;
    private TypeReference genericConfiguredTaskAwaiterTypeRef;
    private TypeReference genericConfiguredValueTaskAwaiterTypeRef;
    private MethodDefinition genericTaskConfigureAwaitMethodDef;
    private MethodDefinition genericValueTaskConfigureAwaitMethodDef;
    private TypeDefinition taskDef;
    private TypeDefinition valueTaskDef;
    private MethodReference taskConfigureAwaitMethod;
    private MethodReference valueTaskConfigureAwaitMethod;
    private TypeReference genericConfiguredTaskAwaitableTypeRef;
    private TypeReference genericConfiguredValueTaskAwaitableTypeRef;
    private TypeReference genericTaskType;
    private TypeReference genericValueTaskType;
    public bool ShouldCleanReference { get; }
    public virtual void Execute();
    private void ReadConfig();
    public virtual bool get_ShouldCleanReference();
    private void ProcessType(Nullable`1<bool> assemblyConfigureAwaitValue, TypeDefinition type);
    [IteratorStateMachineAttribute("ModuleWeaver/<GetAssembliesForScanning>d__6")]
public virtual IEnumerable`1<string> GetAssembliesForScanning();
    private void AddAwaitConfigToAsyncMethod(TypeDefinition type, bool configureAwaitValue);
    private void TryRedirectMethodInstruction(MethodReference method, Instruction instruction);
    private void TryRedirectTypeInstruction(TypeReference type, Instruction instruction);
    private void ProcessFields(TypeDefinition type);
    private void ProcessField(FieldDefinition field);
    private void TryRedirectFieldInstruction(FieldReference field);
    private void FindTypes();
    private void ProcessVariables(bool configureAwaitValue, MethodDefinition method);
    private bool IsAwaiterVariable(VariableDefinition variable, VariableDefinition& awaitableVar, MethodReference& localConfigAwait);
    private static bool GetAwaiterSearch(Instruction instruction);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
