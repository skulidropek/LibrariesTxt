public class ConfigureAwaitChecker.Lib.Checker : object {
    public static string ConfigureAwaitIdentifier;
    private MetadataReference[] _references;
    private LanguageVersion _languageVersion;
    public Checker(LanguageVersion languageVersion, MetadataReference[] references);
    private static Checker();
    [IteratorStateMachineAttribute("ConfigureAwaitChecker.Lib.Checker/<Check>d__4")]
public IEnumerable`1<CheckerResult> Check(Stream file);
    public static CheckerResult CheckNode(AwaitExpressionSyntax awaitNode, SemanticModel semanticModel);
    public static ValueTuple`2<InvocationExpressionSyntax, ExpressionSyntax> FindNodeFor(AwaitExpressionSyntax awaitNode);
    public static CheckerResult CheckNode(UsingStatementSyntax usingNode, SemanticModel semanticModel);
    public static ValueTuple`2<InvocationExpressionSyntax, ExpressionSyntax> FindNodeFor(UsingStatementSyntax usingNode);
    public static CheckerResult CheckNode(LocalDeclarationStatementSyntax localDeclarationNode, SemanticModel semanticModel);
    public static ValueTuple`2<InvocationExpressionSyntax, ExpressionSyntax> FindNodeFor(LocalDeclarationStatementSyntax localDeclarationNode);
    public static CheckerResult CheckNode(ForEachStatementSyntax forEachNode, SemanticModel semanticModel);
    public static ValueTuple`2<InvocationExpressionSyntax, ExpressionSyntax> FindNodeFor(ForEachStatementSyntax forEachNode);
    public static bool CanHaveConfigureAwait(ExpressionSyntax expression, SemanticModel semanticModel);
    public static bool IsConfigureAwait(ExpressionSyntax expression);
    public static bool HasFalseArgument(ArgumentListSyntax argumentList);
    [CompilerGeneratedAttribute]
internal static SyntaxTree <Check>g__ParseFile|4_0(Stream file, LanguageVersion languageVersion);
    [CompilerGeneratedAttribute]
internal static ValueTuple`2<InvocationExpressionSyntax, ExpressionSyntax> <FindNodeFor>g__Helper|6_0(SyntaxNode node, AwaitExpressionSyntax awaitNode);
}
public enum ConfigureAwaitChecker.Lib.CheckerProblem : Enum {
    public int value__;
    public static CheckerProblem NoProblem;
    public static CheckerProblem MissingConfigureAwaitFalse;
    public static CheckerProblem ConfigureAwaitWithTrue;
}
public class ConfigureAwaitChecker.Lib.CheckerResult : object {
    [CompilerGeneratedAttribute]
private CheckerProblem <Problem>k__BackingField;
    [CompilerGeneratedAttribute]
private Location <Location>k__BackingField;
    public CheckerProblem Problem { get; }
    public Location Location { get; }
    public bool NeedsFix { get; }
    public CheckerResult(CheckerProblem problem, Location location);
    [CompilerGeneratedAttribute]
public CheckerProblem get_Problem();
    [CompilerGeneratedAttribute]
public Location get_Location();
    public bool get_NeedsFix();
}
