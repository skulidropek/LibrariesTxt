public class Confluent.SchemaRegistry.Serdes.AvroDeserializer`1 : object {
    private ISchemaRegistryClient schemaRegistryClient;
    private AvroDeserializerConfig config;
    private IList`1<IRuleExecutor> ruleExecutors;
    private IAsyncDeserializer`1<T> deserializerImpl;
    public AvroDeserializer`1(ISchemaRegistryClient schemaRegistryClient);
    public AvroDeserializer`1(ISchemaRegistryClient schemaRegistryClient, IEnumerable`1<KeyValuePair`2<string, string>> config);
    public AvroDeserializer`1(ISchemaRegistryClient schemaRegistryClient, AvroDeserializerConfig config, IList`1<IRuleExecutor> ruleExecutors);
    [AsyncStateMachineAttribute("Confluent.SchemaRegistry.Serdes.AvroDeserializer`1/<DeserializeAsync>d__7")]
public sealed virtual Task`1<T> DeserializeAsync(ReadOnlyMemory`1<byte> data, bool isNull, SerializationContext context);
}
public class Confluent.SchemaRegistry.Serdes.AvroDeserializerConfig : SerdeConfig {
    public Nullable`1<bool> UseLatestVersion { get; public set; }
    public IDictionary`2<string, string> UseLatestWithMetadata { get; public set; }
    public Nullable`1<SubjectNameStrategy> SubjectNameStrategy { get; public set; }
    public AvroDeserializerConfig(IEnumerable`1<KeyValuePair`2<string, string>> config);
    public Nullable`1<bool> get_UseLatestVersion();
    public void set_UseLatestVersion(Nullable`1<bool> value);
    public IDictionary`2<string, string> get_UseLatestWithMetadata();
    public void set_UseLatestWithMetadata(IDictionary`2<string, string> value);
    public Nullable`1<SubjectNameStrategy> get_SubjectNameStrategy();
    public void set_SubjectNameStrategy(Nullable`1<SubjectNameStrategy> value);
}
public class Confluent.SchemaRegistry.Serdes.AvroSerializer`1 : object {
    private ISchemaRegistryClient schemaRegistryClient;
    private AvroSerializerConfig config;
    private IList`1<IRuleExecutor> ruleExecutors;
    private IAsyncSerializer`1<T> serializerImpl;
    public static int DefaultInitialBufferSize;
    [ObsoleteAttribute("Superseded by AvroSerializer(ISchemaRegistryClient, AvroSerializerConfig)")]
public AvroSerializer`1(ISchemaRegistryClient schemaRegistryClient, IEnumerable`1<KeyValuePair`2<string, string>> config);
    public AvroSerializer`1(ISchemaRegistryClient schemaRegistryClient, AvroSerializerConfig config, IList`1<IRuleExecutor> ruleExecutors);
    [AsyncStateMachineAttribute("Confluent.SchemaRegistry.Serdes.AvroSerializer`1/<SerializeAsync>d__7")]
public sealed virtual Task`1<Byte[]> SerializeAsync(T value, SerializationContext context);
}
public class Confluent.SchemaRegistry.Serdes.AvroSerializerConfig : SerdeConfig {
    public Nullable`1<int> BufferBytes { get; public set; }
    public Nullable`1<bool> AutoRegisterSchemas { get; public set; }
    public Nullable`1<bool> NormalizeSchemas { get; public set; }
    public Nullable`1<bool> UseLatestVersion { get; public set; }
    public IDictionary`2<string, string> UseLatestWithMetadata { get; public set; }
    public Nullable`1<SubjectNameStrategy> SubjectNameStrategy { get; public set; }
    public AvroSerializerConfig(IEnumerable`1<KeyValuePair`2<string, string>> config);
    public Nullable`1<int> get_BufferBytes();
    public void set_BufferBytes(Nullable`1<int> value);
    public Nullable`1<bool> get_AutoRegisterSchemas();
    public void set_AutoRegisterSchemas(Nullable`1<bool> value);
    public Nullable`1<bool> get_NormalizeSchemas();
    public void set_NormalizeSchemas(Nullable`1<bool> value);
    public Nullable`1<bool> get_UseLatestVersion();
    public void set_UseLatestVersion(Nullable`1<bool> value);
    public IDictionary`2<string, string> get_UseLatestWithMetadata();
    public void set_UseLatestWithMetadata(IDictionary`2<string, string> value);
    public Nullable`1<SubjectNameStrategy> get_SubjectNameStrategy();
    public void set_SubjectNameStrategy(Nullable`1<SubjectNameStrategy> value);
}
public static class Confluent.SchemaRegistry.Serdes.AvroUtils : object {
    [AsyncStateMachineAttribute("Confluent.SchemaRegistry.Serdes.AvroUtils/<Transform>d__0")]
public static Task`1<object> Transform(RuleContext ctx, Schema schema, object message, IFieldTransform fieldTransform);
    private static Type GetType(Schema schema);
    private static ISet`1<string> GetInlineTags(Field field);
    private static IUnionResolver GetResolver(Schema schema, object message);
}
internal static class Confluent.SchemaRegistry.Serdes.Constants : object {
    public static byte MagicByte;
}
internal class Confluent.SchemaRegistry.Serdes.GenericDeserializerImpl : AsyncDeserializer`2<GenericRecord, Schema> {
    private Dictionary`2<ValueTuple`2<Schema, Schema>, DatumReader`1<GenericRecord>> datumReaderBySchema;
    public GenericDeserializerImpl(ISchemaRegistryClient schemaRegistryClient, AvroDeserializerConfig config, IList`1<IRuleExecutor> ruleExecutors);
    [AsyncStateMachineAttribute("Confluent.SchemaRegistry.Serdes.GenericDeserializerImpl/<DeserializeAsync>d__2")]
public virtual Task`1<GenericRecord> DeserializeAsync(ReadOnlyMemory`1<byte> data, bool isNull, SerializationContext context);
    [AsyncStateMachineAttribute("Confluent.SchemaRegistry.Serdes.GenericDeserializerImpl/<Deserialize>d__3")]
public Task`1<GenericRecord> Deserialize(string topic, Headers headers, Byte[] array, bool isKey);
    protected virtual Task`1<Schema> ParseSchema(Schema schema);
    [AsyncStateMachineAttribute("Confluent.SchemaRegistry.Serdes.GenericDeserializerImpl/<GetDatumReader>d__5")]
private Task`1<DatumReader`1<GenericRecord>> GetDatumReader(Schema writerSchema, Schema readerSchema);
}
internal class Confluent.SchemaRegistry.Serdes.GenericSerializerImpl : AsyncSerializer`2<GenericRecord, Schema> {
    private Dictionary`2<RecordSchema, string> knownSchemas;
    private HashSet`1<KeyValuePair`2<string, string>> registeredSchemas;
    private Dictionary`2<string, int> schemaIds;
    public GenericSerializerImpl(ISchemaRegistryClient schemaRegistryClient, AvroSerializerConfig config, IList`1<IRuleExecutor> ruleExecutors);
    [AsyncStateMachineAttribute("Confluent.SchemaRegistry.Serdes.GenericSerializerImpl/<SerializeAsync>d__4")]
public virtual Task`1<Byte[]> SerializeAsync(GenericRecord value, SerializationContext context);
    [AsyncStateMachineAttribute("Confluent.SchemaRegistry.Serdes.GenericSerializerImpl/<Serialize>d__5")]
public Task`1<Byte[]> Serialize(string topic, Headers headers, GenericRecord data, bool isKey);
    protected virtual Task`1<Schema> ParseSchema(Schema schema);
}
public enum Confluent.SchemaRegistry.Serdes.SerdeType : Enum {
    public int value__;
    public static SerdeType Regular;
    public static SerdeType Avro;
}
internal class Confluent.SchemaRegistry.Serdes.SpecificDeserializerImpl`1 : AsyncDeserializer`2<T, Schema> {
    private Dictionary`2<ValueTuple`2<Schema, Schema>, DatumReader`1<T>> datumReaderBySchema;
    [CompilerGeneratedAttribute]
private Schema <ReaderSchema>k__BackingField;
    public Schema ReaderSchema { get; private set; }
    public SpecificDeserializerImpl`1(ISchemaRegistryClient schemaRegistryClient, AvroDeserializerConfig config, IList`1<IRuleExecutor> ruleExecutors);
    [CompilerGeneratedAttribute]
public Schema get_ReaderSchema();
    [CompilerGeneratedAttribute]
private void set_ReaderSchema(Schema value);
    [AsyncStateMachineAttribute("Confluent.SchemaRegistry.Serdes.SpecificDeserializerImpl`1/<DeserializeAsync>d__6")]
public virtual Task`1<T> DeserializeAsync(ReadOnlyMemory`1<byte> data, bool isNull, SerializationContext context);
    [AsyncStateMachineAttribute("Confluent.SchemaRegistry.Serdes.SpecificDeserializerImpl`1/<Deserialize>d__7")]
public Task`1<T> Deserialize(string topic, Headers headers, Byte[] array, bool isKey);
    protected virtual Task`1<Schema> ParseSchema(Schema schema);
    [AsyncStateMachineAttribute("Confluent.SchemaRegistry.Serdes.SpecificDeserializerImpl`1/<GetDatumReader>d__9")]
private Task`1<DatumReader`1<T>> GetDatumReader(Schema writerSchema, Schema readerSchema);
    private static object Read(DatumReader`1<T> datumReader, Decoder decoder);
}
internal class Confluent.SchemaRegistry.Serdes.SpecificSerializerImpl`1 : AsyncSerializer`2<T, Schema> {
    private Dictionary`2<Type, SerializerSchemaData<T>> multiSchemaData;
    private SerializerSchemaData<T> singleSchemaData;
    public SpecificSerializerImpl`1(ISchemaRegistryClient schemaRegistryClient, AvroSerializerConfig config, IList`1<IRuleExecutor> ruleExecutors);
    private static SerializerSchemaData<T> ExtractSchemaData(Type writerType);
    [AsyncStateMachineAttribute("Confluent.SchemaRegistry.Serdes.SpecificSerializerImpl`1/<SerializeAsync>d__5")]
public virtual Task`1<Byte[]> SerializeAsync(T value, SerializationContext context);
    [AsyncStateMachineAttribute("Confluent.SchemaRegistry.Serdes.SpecificSerializerImpl`1/<Serialize>d__6")]
public Task`1<Byte[]> Serialize(string topic, Headers headers, T data, bool isKey);
    protected virtual Task`1<Schema> ParseSchema(Schema schema);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
