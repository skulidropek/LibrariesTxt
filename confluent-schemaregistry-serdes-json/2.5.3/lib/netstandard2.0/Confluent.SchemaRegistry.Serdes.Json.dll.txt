internal static class Confluent.SchemaRegistry.Serdes.Constants : object {
    public static byte MagicByte;
}
public class Confluent.SchemaRegistry.Serdes.JsonDeserializer`1 : AsyncDeserializer`2<T, JsonSchema> {
    private JsonSchemaGeneratorSettings jsonSchemaGeneratorSettings;
    private JsonSchemaValidator validator;
    private JsonSchema schema;
    public JsonDeserializer`1(IEnumerable`1<KeyValuePair`2<string, string>> config, JsonSchemaGeneratorSettings jsonSchemaGeneratorSettings);
    public JsonDeserializer`1(ISchemaRegistryClient schemaRegistryClient, IEnumerable`1<KeyValuePair`2<string, string>> config, JsonSchemaGeneratorSettings jsonSchemaGeneratorSettings);
    public JsonDeserializer`1(ISchemaRegistryClient schemaRegistryClient, JsonDeserializerConfig config, JsonSchemaGeneratorSettings jsonSchemaGeneratorSettings, IList`1<IRuleExecutor> ruleExecutors);
    public JsonDeserializer`1(ISchemaRegistryClient schemaRegistryClient, Schema schema, IEnumerable`1<KeyValuePair`2<string, string>> config, JsonSchemaGeneratorSettings jsonSchemaGeneratorSettings);
    [AsyncStateMachineAttribute("Confluent.SchemaRegistry.Serdes.JsonDeserializer`1/<DeserializeAsync>d__7")]
public virtual Task`1<T> DeserializeAsync(ReadOnlyMemory`1<byte> data, bool isNull, SerializationContext context);
    [AsyncStateMachineAttribute("Confluent.SchemaRegistry.Serdes.JsonDeserializer`1/<ParseSchema>d__8")]
protected virtual Task`1<JsonSchema> ParseSchema(Schema schema);
}
public class Confluent.SchemaRegistry.Serdes.JsonDeserializerConfig : SerdeConfig {
    public Nullable`1<bool> UseLatestVersion { get; public set; }
    public IDictionary`2<string, string> UseLatestWithMetadata { get; public set; }
    public Nullable`1<SubjectNameStrategy> SubjectNameStrategy { get; public set; }
    public JsonDeserializerConfig(IEnumerable`1<KeyValuePair`2<string, string>> config);
    public Nullable`1<bool> get_UseLatestVersion();
    public void set_UseLatestVersion(Nullable`1<bool> value);
    public IDictionary`2<string, string> get_UseLatestWithMetadata();
    public void set_UseLatestWithMetadata(IDictionary`2<string, string> value);
    public Nullable`1<SubjectNameStrategy> get_SubjectNameStrategy();
    public void set_SubjectNameStrategy(Nullable`1<SubjectNameStrategy> value);
}
public class Confluent.SchemaRegistry.Serdes.JsonSchemaResolver : object {
    private JsonSchema resolvedJsonSchema;
    private Schema root;
    private ISchemaRegistryClient schemaRegistryClient;
    private JsonSchemaGeneratorSettings jsonSchemaGeneratorSettings;
    private Dictionary`2<string, Schema> dictSchemaNameToSchema;
    private Dictionary`2<string, JsonSchema> dictSchemaNameToJsonSchema;
    public JsonSchemaResolver(ISchemaRegistryClient schemaRegistryClient, Schema schema, JsonSchemaGeneratorSettings jsonSchemaGeneratorSettings);
    [AsyncStateMachineAttribute("Confluent.SchemaRegistry.Serdes.JsonSchemaResolver/<GetResolvedSchema>d__7")]
public Task`1<JsonSchema> GetResolvedSchema();
    [AsyncStateMachineAttribute("Confluent.SchemaRegistry.Serdes.JsonSchemaResolver/<CreateSchemaDictUtil>d__8")]
private Task CreateSchemaDictUtil(Schema root);
    [AsyncStateMachineAttribute("Confluent.SchemaRegistry.Serdes.JsonSchemaResolver/<GetSchemaUtil>d__9")]
private Task`1<JsonSchema> GetSchemaUtil(Schema root);
}
public class Confluent.SchemaRegistry.Serdes.JsonSerializer`1 : AsyncSerializer`2<T, JsonSchema> {
    private JsonSchemaGeneratorSettings jsonSchemaGeneratorSettings;
    private List`1<SchemaReference> ReferenceList;
    private JsonSchemaValidator validator;
    private Nullable`1<int> schemaId;
    private JsonSchema schema;
    private string schemaText;
    private string schemaFullname;
    public JsonSerializer`1(ISchemaRegistryClient schemaRegistryClient, JsonSerializerConfig config, JsonSchemaGeneratorSettings jsonSchemaGeneratorSettings, IList`1<IRuleExecutor> ruleExecutors);
    public JsonSerializer`1(ISchemaRegistryClient schemaRegistryClient, Schema schema, JsonSerializerConfig config, JsonSchemaGeneratorSettings jsonSchemaGeneratorSettings, IList`1<IRuleExecutor> ruleExecutors);
    [AsyncStateMachineAttribute("Confluent.SchemaRegistry.Serdes.JsonSerializer`1/<SerializeAsync>d__9")]
public virtual Task`1<Byte[]> SerializeAsync(T value, SerializationContext context);
    [AsyncStateMachineAttribute("Confluent.SchemaRegistry.Serdes.JsonSerializer`1/<ParseSchema>d__10")]
protected virtual Task`1<JsonSchema> ParseSchema(Schema schema);
}
public class Confluent.SchemaRegistry.Serdes.JsonSerializerConfig : SerdeConfig {
    public Nullable`1<int> BufferBytes { get; public set; }
    public Nullable`1<bool> AutoRegisterSchemas { get; public set; }
    public Nullable`1<bool> NormalizeSchemas { get; public set; }
    public Nullable`1<bool> UseLatestVersion { get; public set; }
    public Nullable`1<bool> LatestCompatibilityStrict { get; public set; }
    public IDictionary`2<string, string> UseLatestWithMetadata { get; public set; }
    public Nullable`1<SubjectNameStrategy> SubjectNameStrategy { get; public set; }
    public JsonSerializerConfig(IEnumerable`1<KeyValuePair`2<string, string>> config);
    public Nullable`1<int> get_BufferBytes();
    public void set_BufferBytes(Nullable`1<int> value);
    public Nullable`1<bool> get_AutoRegisterSchemas();
    public void set_AutoRegisterSchemas(Nullable`1<bool> value);
    public Nullable`1<bool> get_NormalizeSchemas();
    public void set_NormalizeSchemas(Nullable`1<bool> value);
    public Nullable`1<bool> get_UseLatestVersion();
    public void set_UseLatestVersion(Nullable`1<bool> value);
    public Nullable`1<bool> get_LatestCompatibilityStrict();
    public void set_LatestCompatibilityStrict(Nullable`1<bool> value);
    public IDictionary`2<string, string> get_UseLatestWithMetadata();
    public void set_UseLatestWithMetadata(IDictionary`2<string, string> value);
    public Nullable`1<SubjectNameStrategy> get_SubjectNameStrategy();
    public void set_SubjectNameStrategy(Nullable`1<SubjectNameStrategy> value);
}
public static class Confluent.SchemaRegistry.Serdes.JsonUtils : object {
    [AsyncStateMachineAttribute("Confluent.SchemaRegistry.Serdes.JsonUtils/<Transform>d__0")]
public static Task`1<object> Transform(RuleContext ctx, JsonSchema schema, string path, object message, IFieldTransform fieldTransform);
    private static Type GetType(JsonSchema schema);
    private static ISet`1<string> GetInlineTags(JsonSchema schema);
}
