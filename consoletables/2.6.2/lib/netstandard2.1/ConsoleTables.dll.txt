public enum ConsoleTables.Alignment : Enum {
    public int value__;
    public static Alignment Left;
    public static Alignment Right;
}
public class ConsoleTables.ConsoleTable : object {
    [CompilerGeneratedAttribute]
private IList`1<object> <Columns>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<Object[]> <Rows>k__BackingField;
    [CompilerGeneratedAttribute]
private ConsoleTableOptions <Options>k__BackingField;
    [CompilerGeneratedAttribute]
private Type[] <ColumnTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <Formats>k__BackingField;
    public static HashSet`1<Type> NumericTypes;
    public IList`1<object> Columns { get; }
    public IList`1<Object[]> Rows { get; }
    public ConsoleTableOptions Options { get; }
    public Type[] ColumnTypes { get; private set; }
    public IList`1<string> Formats { get; private set; }
    public ConsoleTable(String[] columns);
    public ConsoleTable(ConsoleTableOptions options);
    private static ConsoleTable();
    [CompilerGeneratedAttribute]
public IList`1<object> get_Columns();
    [CompilerGeneratedAttribute]
public IList`1<Object[]> get_Rows();
    [CompilerGeneratedAttribute]
public ConsoleTableOptions get_Options();
    [CompilerGeneratedAttribute]
public Type[] get_ColumnTypes();
    [CompilerGeneratedAttribute]
private void set_ColumnTypes(Type[] value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_Formats();
    [CompilerGeneratedAttribute]
private void set_Formats(IList`1<string> value);
    public ConsoleTable AddColumn(IEnumerable`1<string> names);
    public ConsoleTable AddRow(Object[] values);
    public ConsoleTable Configure(Action`1<ConsoleTableOptions> action);
    public static ConsoleTable FromDictionary(Dictionary`2<string, Dictionary`2<string, object>> values);
    public static ConsoleTable From(IEnumerable`1<T> values);
    public static ConsoleTable From(DataTable dataTable);
    public virtual string ToString();
    private void SetFormats(List`1<int> columnLengths, List`1<string> columnAlignment);
    public static int GetTextWidth(string value);
    public string ToMarkDownString();
    private string ToMarkDownString(char delimiter);
    public string ToMinimalString();
    public string ToStringAlternative();
    private string Format(List`1<int> columnLengths, char delimiter);
    private string GetNumberAlignment(int i);
    private List`1<int> ColumnLengths();
    public void Write(Format format);
    private static IEnumerable`1<string> GetColumns();
    private static object GetColumnValue(object target, string column);
    private static IEnumerable`1<Type> GetColumnsType();
    [CompilerGeneratedAttribute]
private string <ToStringAlternative>b__32_0(Object[] row, int i);
    [CompilerGeneratedAttribute]
private int <ColumnLengths>b__35_0(object t, int i);
}
public class ConsoleTables.ConsoleTableOptions : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <Columns>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableCount>k__BackingField;
    [CompilerGeneratedAttribute]
private Alignment <NumberAlignment>k__BackingField;
    [CompilerGeneratedAttribute]
private TextWriter <OutputTo>k__BackingField;
    public IEnumerable`1<string> Columns { get; public set; }
    public bool EnableCount { get; public set; }
    public Alignment NumberAlignment { get; public set; }
    public TextWriter OutputTo { get; public set; }
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_Columns();
    [CompilerGeneratedAttribute]
public void set_Columns(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public bool get_EnableCount();
    [CompilerGeneratedAttribute]
public void set_EnableCount(bool value);
    [CompilerGeneratedAttribute]
public Alignment get_NumberAlignment();
    [CompilerGeneratedAttribute]
public void set_NumberAlignment(Alignment value);
    [CompilerGeneratedAttribute]
public TextWriter get_OutputTo();
    [CompilerGeneratedAttribute]
public void set_OutputTo(TextWriter value);
}
public enum ConsoleTables.Format : Enum {
    public int value__;
    public static Format Default;
    public static Format MarkDown;
    public static Format Alternative;
    public static Format Minimal;
}
