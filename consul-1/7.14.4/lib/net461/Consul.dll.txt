public class Consul.AccessLogsConfig : object {
    [CompilerGeneratedAttribute]
private bool <Enabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisableListenerLogs>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <JSONFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TextFormat>k__BackingField;
    [JsonPropertyAttribute]
public bool Enabled { get; public set; }
    [JsonPropertyAttribute]
public bool DisableListenerLogs { get; public set; }
    [JsonPropertyAttribute]
public string Type { get; public set; }
    [JsonPropertyAttribute]
public string Path { get; public set; }
    [JsonPropertyAttribute]
public string JSONFormat { get; public set; }
    [JsonPropertyAttribute]
public string TextFormat { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Enabled();
    [CompilerGeneratedAttribute]
public void set_Enabled(bool value);
    [CompilerGeneratedAttribute]
public bool get_DisableListenerLogs();
    [CompilerGeneratedAttribute]
public void set_DisableListenerLogs(bool value);
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(string value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public string get_JSONFormat();
    [CompilerGeneratedAttribute]
public void set_JSONFormat(string value);
    [CompilerGeneratedAttribute]
public string get_TextFormat();
    [CompilerGeneratedAttribute]
public void set_TextFormat(string value);
}
[ObsoleteAttribute("The Legacy ACL system has been deprecated, please use Token, Role and Policy instead.")]
public class Consul.ACL : object {
    private ConsulClient _client;
    internal ACL(ConsulClient c);
    [ObsoleteAttribute("The Legacy ACL system has been deprecated, please use Token, Role and Policy instead.")]
public sealed virtual Task`1<WriteResult`1<string>> Create(ACLEntry acl, CancellationToken ct);
    [AsyncStateMachineAttribute("Consul.ACL/<Create>d__4")]
[ObsoleteAttribute("The Legacy ACL system has been deprecated, please use Token, Role and Policy instead.")]
public sealed virtual Task`1<WriteResult`1<string>> Create(ACLEntry acl, WriteOptions q, CancellationToken ct);
    [ObsoleteAttribute("The Legacy ACL system has been deprecated, please use Token, Role and Policy instead.")]
public sealed virtual Task`1<WriteResult> Update(ACLEntry acl, CancellationToken ct);
    [ObsoleteAttribute("The Legacy ACL system has been deprecated, please use Token, Role and Policy instead.")]
public sealed virtual Task`1<WriteResult> Update(ACLEntry acl, WriteOptions q, CancellationToken ct);
    [ObsoleteAttribute("The Legacy ACL system has been deprecated, please use Token, Role and Policy instead.")]
public sealed virtual Task`1<WriteResult`1<bool>> Destroy(string id, CancellationToken ct);
    [ObsoleteAttribute("The Legacy ACL system has been deprecated, please use Token, Role and Policy instead.")]
public sealed virtual Task`1<WriteResult`1<bool>> Destroy(string id, WriteOptions q, CancellationToken ct);
    [ObsoleteAttribute("The Legacy ACL system has been deprecated, please use Token, Role and Policy instead.")]
public sealed virtual Task`1<WriteResult`1<string>> Clone(string id, CancellationToken ct);
    [ObsoleteAttribute("The Legacy ACL system has been deprecated, please use Token, Role and Policy instead.")]
[AsyncStateMachineAttribute("Consul.ACL/<Clone>d__10")]
public sealed virtual Task`1<WriteResult`1<string>> Clone(string id, WriteOptions q, CancellationToken ct);
    [ObsoleteAttribute("The Legacy ACL system has been deprecated, please use Token, Role and Policy instead.")]
public sealed virtual Task`1<QueryResult`1<ACLEntry>> Info(string id, CancellationToken ct);
    [ObsoleteAttribute("The Legacy ACL system has been deprecated, please use Token, Role and Policy instead.")]
[AsyncStateMachineAttribute("Consul.ACL/<Info>d__12")]
public sealed virtual Task`1<QueryResult`1<ACLEntry>> Info(string id, QueryOptions q, CancellationToken ct);
    [ObsoleteAttribute("The Legacy ACL system has been deprecated, please use Token, Role and Policy instead.")]
public sealed virtual Task`1<QueryResult`1<ACLEntry[]>> List(CancellationToken ct);
    [ObsoleteAttribute("The Legacy ACL system has been deprecated, please use Token, Role and Policy instead.")]
public sealed virtual Task`1<QueryResult`1<ACLEntry[]>> List(QueryOptions q, CancellationToken ct);
    [ObsoleteAttribute("The Legacy ACL system has been deprecated, please use Token, Role and Policy instead.")]
public sealed virtual Task`1<WriteResult`1<string>> TranslateRules(string rules, CancellationToken ct);
    [AsyncStateMachineAttribute("Consul.ACL/<TranslateRules>d__16")]
[ObsoleteAttribute("The Legacy ACL system has been deprecated, please use Token, Role and Policy instead.")]
public sealed virtual Task`1<WriteResult`1<string>> TranslateRules(string rules, WriteOptions q, CancellationToken ct);
    [ObsoleteAttribute("The Legacy ACL system has been deprecated, please use Token, Role and Policy instead.")]
public sealed virtual Task`1<QueryResult`1<string>> TranslateLegacyTokenRules(string id, CancellationToken ct);
    [ObsoleteAttribute("The Legacy ACL system has been deprecated, please use Token, Role and Policy instead.")]
[AsyncStateMachineAttribute("Consul.ACL/<TranslateLegacyTokenRules>d__18")]
public sealed virtual Task`1<QueryResult`1<string>> TranslateLegacyTokenRules(string id, QueryOptions q, CancellationToken ct);
}
[ObsoleteAttribute("The Legacy ACL system has been deprecated, please use Token, Role and Policy instead.")]
public class Consul.ACLEntry : object {
    [CompilerGeneratedAttribute]
private ulong <CreateIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <ModifyIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ID>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private ACLType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Rules>k__BackingField;
    [ObsoleteAttribute("The Legacy ACL system has been deprecated, please use Token, Role and Policy instead.")]
public ulong CreateIndex { get; public set; }
    [ObsoleteAttribute("The Legacy ACL system has been deprecated, please use Token, Role and Policy instead.")]
public ulong ModifyIndex { get; public set; }
    [ObsoleteAttribute("The Legacy ACL system has been deprecated, please use Token, Role and Policy instead.")]
public string ID { get; public set; }
    [ObsoleteAttribute("The Legacy ACL system has been deprecated, please use Token, Role and Policy instead.")]
public string Name { get; public set; }
    [JsonPropertyAttribute]
[ObsoleteAttribute("The Legacy ACL system has been deprecated, please use Token, Role and Policy instead.")]
[JsonConverterAttribute("Consul.ACLTypeConverter")]
public ACLType Type { get; public set; }
    [ObsoleteAttribute("The Legacy ACL system has been deprecated, please use Token, Role and Policy instead.")]
public string Rules { get; public set; }
    [ObsoleteAttribute("The Legacy ACL system has been deprecated, please use Token, Role and Policy instead.")]
public ACLEntry(string name, string rules);
    [ObsoleteAttribute("The Legacy ACL system has been deprecated, please use Token, Role and Policy instead.")]
public ACLEntry(string id, string name, string rules);
    [CompilerGeneratedAttribute]
public ulong get_CreateIndex();
    [CompilerGeneratedAttribute]
public void set_CreateIndex(ulong value);
    [CompilerGeneratedAttribute]
public ulong get_ModifyIndex();
    [CompilerGeneratedAttribute]
public void set_ModifyIndex(ulong value);
    [CompilerGeneratedAttribute]
public string get_ID();
    [CompilerGeneratedAttribute]
public void set_ID(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public ACLType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(ACLType value);
    [CompilerGeneratedAttribute]
public string get_Rules();
    [CompilerGeneratedAttribute]
public void set_Rules(string value);
    [ObsoleteAttribute("The Legacy ACL system has been deprecated, please use Token, Role and Policy instead.")]
public bool ShouldSerializeCreateIndex();
    [ObsoleteAttribute("The Legacy ACL system has been deprecated, please use Token, Role and Policy instead.")]
public bool ShouldSerializeModifyIndex();
}
public class Consul.ACLRateLimit : object {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <ReadRate>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <WriteRate>k__BackingField;
    [JsonPropertyAttribute]
public Nullable`1<int> ReadRate { get; public set; }
    [JsonPropertyAttribute]
public Nullable`1<int> WriteRate { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_ReadRate();
    [CompilerGeneratedAttribute]
public void set_ReadRate(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_WriteRate();
    [CompilerGeneratedAttribute]
public void set_WriteRate(Nullable`1<int> value);
}
public class Consul.ACLReplication : object {
    private ConsulClient _client;
    internal ACLReplication(ConsulClient c);
    public sealed virtual Task`1<QueryResult`1<ACLReplicationEntry>> Status(CancellationToken ct);
    [AsyncStateMachineAttribute("Consul.ACLReplication/<Status>d__3")]
public sealed virtual Task`1<QueryResult`1<ACLReplicationEntry>> Status(QueryOptions queryOptions, CancellationToken ct);
}
public class Consul.ACLReplicationEntry : object {
    [CompilerGeneratedAttribute]
private bool <Enabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Running>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SourceDatacenter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReplicationType>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <ReplicatedIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <ReplicatedRoleIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <ReplicatedTokenIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <LastSuccess>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <LastError>k__BackingField;
    public bool Enabled { get; public set; }
    public bool Running { get; public set; }
    public string SourceDatacenter { get; public set; }
    public string ReplicationType { get; public set; }
    public ulong ReplicatedIndex { get; public set; }
    public ulong ReplicatedRoleIndex { get; public set; }
    public ulong ReplicatedTokenIndex { get; public set; }
    public DateTime LastSuccess { get; public set; }
    public DateTime LastError { get; public set; }
    public ACLReplicationEntry(bool enabled, bool running);
    [JsonConstructorAttribute]
public ACLReplicationEntry(bool enabled, bool running, string sourceDatacenter, string replicationType, ulong replicatedIndex, ulong replicatedRoleIndex, ulong replicatedTokenIndex, DateTime lastSuccess, DateTime lastError);
    [CompilerGeneratedAttribute]
public bool get_Enabled();
    [CompilerGeneratedAttribute]
public void set_Enabled(bool value);
    [CompilerGeneratedAttribute]
public bool get_Running();
    [CompilerGeneratedAttribute]
public void set_Running(bool value);
    [CompilerGeneratedAttribute]
public string get_SourceDatacenter();
    [CompilerGeneratedAttribute]
public void set_SourceDatacenter(string value);
    [CompilerGeneratedAttribute]
public string get_ReplicationType();
    [CompilerGeneratedAttribute]
public void set_ReplicationType(string value);
    [CompilerGeneratedAttribute]
public ulong get_ReplicatedIndex();
    [CompilerGeneratedAttribute]
public void set_ReplicatedIndex(ulong value);
    [CompilerGeneratedAttribute]
public ulong get_ReplicatedRoleIndex();
    [CompilerGeneratedAttribute]
public void set_ReplicatedRoleIndex(ulong value);
    [CompilerGeneratedAttribute]
public ulong get_ReplicatedTokenIndex();
    [CompilerGeneratedAttribute]
public void set_ReplicatedTokenIndex(ulong value);
    [CompilerGeneratedAttribute]
public DateTime get_LastSuccess();
    [CompilerGeneratedAttribute]
public void set_LastSuccess(DateTime value);
    [CompilerGeneratedAttribute]
public DateTime get_LastError();
    [CompilerGeneratedAttribute]
public void set_LastError(DateTime value);
}
[ObsoleteAttribute("The Legacy ACL system has been deprecated, please use Token, Role and Policy instead.")]
public class Consul.ACLType : object {
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    public string Type { get; private set; }
    [ObsoleteAttribute("The Legacy ACL system has been deprecated, please use Token, Role and Policy instead.")]
public static ACLType Client { get; }
    [ObsoleteAttribute("The Legacy ACL system has been deprecated, please use Token, Role and Policy instead.")]
public static ACLType Management { get; }
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
private void set_Type(string value);
    public static ACLType get_Client();
    public static ACLType get_Management();
    [ObsoleteAttribute("The Legacy ACL system has been deprecated, please use Token, Role and Policy instead.")]
public sealed virtual bool Equals(ACLType other);
    [ObsoleteAttribute("The Legacy ACL system has been deprecated, please use Token, Role and Policy instead.")]
public virtual bool Equals(object other);
    [ObsoleteAttribute("The Legacy ACL system has been deprecated, please use Token, Role and Policy instead.")]
public virtual int GetHashCode();
}
[ObsoleteAttribute("The Legacy ACL system has been deprecated, please use Token, Role and Policy instead.")]
public class Consul.ACLTypeConverter : JsonConverter {
    [ObsoleteAttribute("The Legacy ACL system has been deprecated, please use Token, Role and Policy instead.")]
public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    [ObsoleteAttribute("The Legacy ACL system has been deprecated, please use Token, Role and Policy instead.")]
public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    [ObsoleteAttribute("The Legacy ACL system has been deprecated, please use Token, Role and Policy instead.")]
public virtual bool CanConvert(Type objectType);
}
public class Consul.AddressDetails : object {
    [CompilerGeneratedAttribute]
private string <Address>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Port>k__BackingField;
    public string Address { get; public set; }
    public int Port { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Address();
    [CompilerGeneratedAttribute]
public void set_Address(string value);
    [CompilerGeneratedAttribute]
public int get_Port();
    [CompilerGeneratedAttribute]
public void set_Port(int value);
}
public class Consul.Agent : object {
    private ConsulClient _client;
    private string _nodeName;
    private AsyncLock _nodeNameLock;
    [ObsoleteAttribute("This property will be removed in a future version. Replace uses of it with a call to 'await GetNodeName()'")]
public string NodeName { get; }
    internal Agent(ConsulClient c);
    public sealed virtual Task`1<QueryResult`1<Dictionary`2<string, Dictionary`2<string, object>>>> Self(CancellationToken ct);
    public sealed virtual string get_NodeName();
    [AsyncStateMachineAttribute("Consul.Agent/<GetNodeName>d__8")]
public sealed virtual Task`1<string> GetNodeName(CancellationToken ct);
    public sealed virtual Task`1<QueryResult`1<Dictionary`2<string, AgentCheck>>> Checks(CancellationToken ct);
    public sealed virtual Task`1<QueryResult`1<Dictionary`2<string, AgentCheck>>> Checks(Filter filter, CancellationToken ct);
    [AsyncStateMachineAttribute("Consul.Agent/<Services>d__11")]
public sealed virtual Task`1<QueryResult`1<Dictionary`2<string, AgentService>>> Services(CancellationToken ct);
    [AsyncStateMachineAttribute("Consul.Agent/<Services>d__12")]
public sealed virtual Task`1<QueryResult`1<Dictionary`2<string, AgentService>>> Services(Filter filter, CancellationToken ct);
    public sealed virtual Task`1<QueryResult`1<AgentMember[]>> Members(bool wan, CancellationToken ct);
    public sealed virtual Task`1<WriteResult> ServiceRegister(AgentServiceRegistration service, CancellationToken ct);
    public sealed virtual Task`1<WriteResult> ServiceRegister(AgentServiceRegistration service, bool replaceExistingChecks, CancellationToken ct);
    public sealed virtual Task`1<WriteResult> ServiceDeregister(string serviceID, CancellationToken ct);
    public sealed virtual Task PassTTL(string checkID, string note, CancellationToken ct);
    public sealed virtual Task WarnTTL(string checkID, string note, CancellationToken ct);
    public sealed virtual Task FailTTL(string checkID, string note, CancellationToken ct);
    public sealed virtual Task`1<WriteResult> UpdateTTL(string checkID, string output, TTLStatus status, CancellationToken ct);
    private Task`1<WriteResult> LegacyUpdateTTL(string checkID, string note, TTLStatus status, CancellationToken ct);
    public sealed virtual Task`1<WriteResult> CheckRegister(AgentCheckRegistration check, CancellationToken ct);
    public sealed virtual Task`1<WriteResult> CheckDeregister(string checkID, CancellationToken ct);
    public sealed virtual Task`1<WriteResult> Join(string addr, bool wan, CancellationToken ct);
    public sealed virtual Task`1<WriteResult> ForceLeave(string node, CancellationToken ct);
    public sealed virtual Task`1<WriteResult> Leave(string node, CancellationToken ct);
    public sealed virtual Task`1<WriteResult> Reload(CancellationToken ct);
    [ObsoleteAttribute]
public sealed virtual Task`1<WriteResult> Reload(string node, CancellationToken ct);
    public sealed virtual Task`1<WriteResult> EnableServiceMaintenance(string serviceID, string reason, CancellationToken ct);
    public sealed virtual Task`1<WriteResult> DisableServiceMaintenance(string serviceID, CancellationToken ct);
    public sealed virtual Task`1<WriteResult> EnableNodeMaintenance(string reason, CancellationToken ct);
    public sealed virtual Task`1<WriteResult> DisableNodeMaintenance(CancellationToken ct);
    [AsyncStateMachineAttribute("Consul.Agent/<Monitor>d__33")]
public sealed virtual Task`1<LogStream> Monitor(LogLevel level, CancellationToken ct);
    [AsyncStateMachineAttribute("Consul.Agent/<MonitorJSON>d__34")]
public sealed virtual Task`1<LogStream> MonitorJSON(LogLevel level, CancellationToken ct);
    [AsyncStateMachineAttribute("Consul.Agent/<GetLocalServiceHealth>d__35")]
public sealed virtual Task`1<QueryResult`1<LocalServiceHealth[]>> GetLocalServiceHealth(string serviceName, QueryOptions q, CancellationToken ct);
    [AsyncStateMachineAttribute("Consul.Agent/<GetLocalServiceHealth>d__36")]
public sealed virtual Task`1<QueryResult`1<LocalServiceHealth[]>> GetLocalServiceHealth(string serviceName, CancellationToken ct);
    [AsyncStateMachineAttribute("Consul.Agent/<GetWorstLocalServiceHealth>d__37")]
public sealed virtual Task`1<QueryResult`1<string>> GetWorstLocalServiceHealth(string serviceName, QueryOptions q, CancellationToken ct);
    [AsyncStateMachineAttribute("Consul.Agent/<GetWorstLocalServiceHealth>d__38")]
public sealed virtual Task`1<QueryResult`1<string>> GetWorstLocalServiceHealth(string serviceName, CancellationToken ct);
    [AsyncStateMachineAttribute("Consul.Agent/<GetLocalServiceHealthByID>d__39")]
public sealed virtual Task`1<QueryResult`1<LocalServiceHealth>> GetLocalServiceHealthByID(string serviceID, QueryOptions q, CancellationToken ct);
    [AsyncStateMachineAttribute("Consul.Agent/<GetLocalServiceHealthByID>d__40")]
public sealed virtual Task`1<QueryResult`1<LocalServiceHealth>> GetLocalServiceHealthByID(string serviceID, CancellationToken ct);
    [AsyncStateMachineAttribute("Consul.Agent/<GetAgentHostInfo>d__41")]
public sealed virtual Task`1<QueryResult`1<AgentHostInfo>> GetAgentHostInfo(CancellationToken ct);
    [AsyncStateMachineAttribute("Consul.Agent/<GetAgentVersion>d__42")]
public sealed virtual Task`1<QueryResult`1<AgentVersion>> GetAgentVersion(CancellationToken ct);
    [AsyncStateMachineAttribute("Consul.Agent/<GetServiceConfiguration>d__43")]
public sealed virtual Task`1<QueryResult`1<ServiceConfiguration>> GetServiceConfiguration(string serviceId, CancellationToken ct);
    [AsyncStateMachineAttribute("Consul.Agent/<GetServiceConfiguration>d__44")]
public sealed virtual Task`1<QueryResult`1<ServiceConfiguration>> GetServiceConfiguration(string serviceId, QueryOptions q, CancellationToken ct);
    [AsyncStateMachineAttribute("Consul.Agent/<ConnectAuthorize>d__45")]
public sealed virtual Task`1<WriteResult`1<AgentAuthorizeResponse>> ConnectAuthorize(AgentAuthorizeParameters parameters, CancellationToken ct);
    [AsyncStateMachineAttribute("Consul.Agent/<ConnectAuthorize>d__46")]
public sealed virtual Task`1<WriteResult`1<AgentAuthorizeResponse>> ConnectAuthorize(AgentAuthorizeParameters parameters, WriteOptions w, CancellationToken ct);
    [AsyncStateMachineAttribute("Consul.Agent/<GetCARoots>d__47")]
public sealed virtual Task`1<QueryResult`1<CARoots>> GetCARoots(CancellationToken ct);
    [AsyncStateMachineAttribute("Consul.Agent/<GetCARoots>d__48")]
public sealed virtual Task`1<QueryResult`1<CARoots>> GetCARoots(QueryOptions q, CancellationToken ct);
    [AsyncStateMachineAttribute("Consul.Agent/<GetCALeaf>d__49")]
public sealed virtual Task`1<QueryResult`1<CALeaf>> GetCALeaf(string serviceId, CancellationToken ct);
    [AsyncStateMachineAttribute("Consul.Agent/<GetCALeaf>d__50")]
public sealed virtual Task`1<QueryResult`1<CALeaf>> GetCALeaf(string serviceId, QueryOptions q, CancellationToken ct);
    [AsyncStateMachineAttribute("Consul.Agent/<GetAgentMetrics>d__52")]
public sealed virtual Task`1<QueryResult`1<Metrics>> GetAgentMetrics(CancellationToken ct);
}
public class Consul.AgentAuthorizeParameters : object {
    [CompilerGeneratedAttribute]
private string <Target>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClientCertURI>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClientCertSerial>k__BackingField;
    public string Target { get; public set; }
    public string ClientCertURI { get; public set; }
    public string ClientCertSerial { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Target();
    [CompilerGeneratedAttribute]
public void set_Target(string value);
    [CompilerGeneratedAttribute]
public string get_ClientCertURI();
    [CompilerGeneratedAttribute]
public void set_ClientCertURI(string value);
    [CompilerGeneratedAttribute]
public string get_ClientCertSerial();
    [CompilerGeneratedAttribute]
public void set_ClientCertSerial(string value);
}
public class Consul.AgentAuthorizeResponse : object {
    [CompilerGeneratedAttribute]
private bool <Authorized>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Reason>k__BackingField;
    public bool Authorized { get; public set; }
    public string Reason { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Authorized();
    [CompilerGeneratedAttribute]
public void set_Authorized(bool value);
    [CompilerGeneratedAttribute]
public string get_Reason();
    [CompilerGeneratedAttribute]
public void set_Reason(string value);
}
public class Consul.AgentCheck : object {
    [CompilerGeneratedAttribute]
private string <Node>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CheckID>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private HealthStatus <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Notes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Output>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServiceID>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServiceName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    public string Node { get; public set; }
    public string CheckID { get; public set; }
    public string Name { get; public set; }
    [JsonConverterAttribute("Consul.HealthStatusConverter")]
public HealthStatus Status { get; public set; }
    public string Notes { get; public set; }
    public string Output { get; public set; }
    public string ServiceID { get; public set; }
    public string ServiceName { get; public set; }
    public string Type { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Node();
    [CompilerGeneratedAttribute]
public void set_Node(string value);
    [CompilerGeneratedAttribute]
public string get_CheckID();
    [CompilerGeneratedAttribute]
public void set_CheckID(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public HealthStatus get_Status();
    [CompilerGeneratedAttribute]
public void set_Status(HealthStatus value);
    [CompilerGeneratedAttribute]
public string get_Notes();
    [CompilerGeneratedAttribute]
public void set_Notes(string value);
    [CompilerGeneratedAttribute]
public string get_Output();
    [CompilerGeneratedAttribute]
public void set_Output(string value);
    [CompilerGeneratedAttribute]
public string get_ServiceID();
    [CompilerGeneratedAttribute]
public void set_ServiceID(string value);
    [CompilerGeneratedAttribute]
public string get_ServiceName();
    [CompilerGeneratedAttribute]
public void set_ServiceName(string value);
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(string value);
}
public class Consul.AgentCheckRegistration : AgentServiceCheck {
    [CompilerGeneratedAttribute]
private string <ServiceID>k__BackingField;
    [JsonPropertyAttribute]
public string ServiceID { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ServiceID();
    [CompilerGeneratedAttribute]
public void set_ServiceID(string value);
}
public class Consul.AgentHostInfo : object {
    [CompilerGeneratedAttribute]
private MemoryInfo <Memory>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<CPUInfo> <CPU>k__BackingField;
    [CompilerGeneratedAttribute]
private HostInfo <Host>k__BackingField;
    [CompilerGeneratedAttribute]
private DiskInfo <Disk>k__BackingField;
    [CompilerGeneratedAttribute]
private long <CollectionTime>k__BackingField;
    public MemoryInfo Memory { get; public set; }
    public List`1<CPUInfo> CPU { get; public set; }
    public HostInfo Host { get; public set; }
    public DiskInfo Disk { get; public set; }
    public long CollectionTime { get; public set; }
    [CompilerGeneratedAttribute]
public MemoryInfo get_Memory();
    [CompilerGeneratedAttribute]
public void set_Memory(MemoryInfo value);
    [CompilerGeneratedAttribute]
public List`1<CPUInfo> get_CPU();
    [CompilerGeneratedAttribute]
public void set_CPU(List`1<CPUInfo> value);
    [CompilerGeneratedAttribute]
public HostInfo get_Host();
    [CompilerGeneratedAttribute]
public void set_Host(HostInfo value);
    [CompilerGeneratedAttribute]
public DiskInfo get_Disk();
    [CompilerGeneratedAttribute]
public void set_Disk(DiskInfo value);
    [CompilerGeneratedAttribute]
public long get_CollectionTime();
    [CompilerGeneratedAttribute]
public void set_CollectionTime(long value);
}
public class Consul.AgentMember : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Addr>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <Port>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Tags>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <ProtocolMin>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <ProtocolMax>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <ProtocolCur>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <DelegateMin>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <DelegateMax>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <DelegateCur>k__BackingField;
    public string Name { get; public set; }
    public string Addr { get; public set; }
    public ushort Port { get; public set; }
    public Dictionary`2<string, string> Tags { get; public set; }
    public int Status { get; public set; }
    public byte ProtocolMin { get; public set; }
    public byte ProtocolMax { get; public set; }
    public byte ProtocolCur { get; public set; }
    public byte DelegateMin { get; public set; }
    public byte DelegateMax { get; public set; }
    public byte DelegateCur { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Addr();
    [CompilerGeneratedAttribute]
public void set_Addr(string value);
    [CompilerGeneratedAttribute]
public ushort get_Port();
    [CompilerGeneratedAttribute]
public void set_Port(ushort value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_Tags();
    [CompilerGeneratedAttribute]
public void set_Tags(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public int get_Status();
    [CompilerGeneratedAttribute]
public void set_Status(int value);
    [CompilerGeneratedAttribute]
public byte get_ProtocolMin();
    [CompilerGeneratedAttribute]
public void set_ProtocolMin(byte value);
    [CompilerGeneratedAttribute]
public byte get_ProtocolMax();
    [CompilerGeneratedAttribute]
public void set_ProtocolMax(byte value);
    [CompilerGeneratedAttribute]
public byte get_ProtocolCur();
    [CompilerGeneratedAttribute]
public void set_ProtocolCur(byte value);
    [CompilerGeneratedAttribute]
public byte get_DelegateMin();
    [CompilerGeneratedAttribute]
public void set_DelegateMin(byte value);
    [CompilerGeneratedAttribute]
public byte get_DelegateMax();
    [CompilerGeneratedAttribute]
public void set_DelegateMax(byte value);
    [CompilerGeneratedAttribute]
public byte get_DelegateCur();
    [CompilerGeneratedAttribute]
public void set_DelegateCur(byte value);
}
public class Consul.AgentService : object {
    [CompilerGeneratedAttribute]
private string <ID>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Service>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Tags>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Port>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Address>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, ServiceTaggedAddress> <TaggedAddresses>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableTagOverride>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <Meta>k__BackingField;
    [CompilerGeneratedAttribute]
private AgentServiceProxy <Proxy>k__BackingField;
    [CompilerGeneratedAttribute]
private ServiceKind <Kind>k__BackingField;
    public string ID { get; public set; }
    public string Service { get; public set; }
    public String[] Tags { get; public set; }
    public int Port { get; public set; }
    public string Address { get; public set; }
    public IDictionary`2<string, ServiceTaggedAddress> TaggedAddresses { get; public set; }
    public bool EnableTagOverride { get; public set; }
    public IDictionary`2<string, string> Meta { get; public set; }
    [JsonPropertyAttribute]
public AgentServiceProxy Proxy { get; public set; }
    [JsonPropertyAttribute]
public ServiceKind Kind { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ID();
    [CompilerGeneratedAttribute]
public void set_ID(string value);
    [CompilerGeneratedAttribute]
public string get_Service();
    [CompilerGeneratedAttribute]
public void set_Service(string value);
    [CompilerGeneratedAttribute]
public String[] get_Tags();
    [CompilerGeneratedAttribute]
public void set_Tags(String[] value);
    [CompilerGeneratedAttribute]
public int get_Port();
    [CompilerGeneratedAttribute]
public void set_Port(int value);
    [CompilerGeneratedAttribute]
public string get_Address();
    [CompilerGeneratedAttribute]
public void set_Address(string value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, ServiceTaggedAddress> get_TaggedAddresses();
    [CompilerGeneratedAttribute]
public void set_TaggedAddresses(IDictionary`2<string, ServiceTaggedAddress> value);
    [CompilerGeneratedAttribute]
public bool get_EnableTagOverride();
    [CompilerGeneratedAttribute]
public void set_EnableTagOverride(bool value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_Meta();
    [CompilerGeneratedAttribute]
public void set_Meta(IDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public AgentServiceProxy get_Proxy();
    [CompilerGeneratedAttribute]
public void set_Proxy(AgentServiceProxy value);
    [CompilerGeneratedAttribute]
public ServiceKind get_Kind();
    [CompilerGeneratedAttribute]
public void set_Kind(ServiceKind value);
}
public class Consul.AgentServiceCheck : object {
    [CompilerGeneratedAttribute]
private string <ID>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CheckID>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Notes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Script>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Args>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DockerContainerID>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Shell>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <Interval>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <Timeout>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <TTL>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HTTP>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, List`1<string>> <Header>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Method>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Body>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TCP>k__BackingField;
    [CompilerGeneratedAttribute]
private HealthStatus <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TLSSkipVerify>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GRPC>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <GRPCUseTLS>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AliasService>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AliasNode>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <DeregisterCriticalServiceAfter>k__BackingField;
    [JsonPropertyAttribute]
[ObsoleteAttribute("Use CheckId instead")]
public string ID { get; public set; }
    [JsonPropertyAttribute]
public string CheckID { get; public set; }
    [JsonPropertyAttribute]
public string Name { get; public set; }
    [JsonPropertyAttribute]
public string Notes { get; public set; }
    [JsonPropertyAttribute]
public string Script { get; public set; }
    [JsonPropertyAttribute]
public String[] Args { get; public set; }
    [JsonPropertyAttribute]
public string DockerContainerID { get; public set; }
    [JsonPropertyAttribute]
public string Shell { get; public set; }
    [JsonPropertyAttribute]
[JsonConverterAttribute("Consul.DurationTimespanConverter")]
public Nullable`1<TimeSpan> Interval { get; public set; }
    [JsonPropertyAttribute]
[JsonConverterAttribute("Consul.DurationTimespanConverter")]
public Nullable`1<TimeSpan> Timeout { get; public set; }
    [JsonPropertyAttribute]
[JsonConverterAttribute("Consul.DurationTimespanConverter")]
public Nullable`1<TimeSpan> TTL { get; public set; }
    [JsonPropertyAttribute]
public string HTTP { get; public set; }
    [JsonPropertyAttribute]
public Dictionary`2<string, List`1<string>> Header { get; public set; }
    [JsonPropertyAttribute]
public string Method { get; public set; }
    [JsonPropertyAttribute]
public string Body { get; public set; }
    [JsonPropertyAttribute]
public string TCP { get; public set; }
    [JsonConverterAttribute("Consul.HealthStatusConverter")]
[JsonPropertyAttribute]
public HealthStatus Status { get; public set; }
    [JsonPropertyAttribute]
public bool TLSSkipVerify { get; public set; }
    [JsonPropertyAttribute]
public string GRPC { get; public set; }
    [JsonPropertyAttribute]
public bool GRPCUseTLS { get; public set; }
    [JsonPropertyAttribute]
public string AliasService { get; public set; }
    [JsonPropertyAttribute]
public string AliasNode { get; public set; }
    [JsonPropertyAttribute]
[JsonConverterAttribute("Consul.DurationTimespanConverter")]
public Nullable`1<TimeSpan> DeregisterCriticalServiceAfter { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ID();
    [CompilerGeneratedAttribute]
public void set_ID(string value);
    [CompilerGeneratedAttribute]
public string get_CheckID();
    [CompilerGeneratedAttribute]
public void set_CheckID(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Notes();
    [CompilerGeneratedAttribute]
public void set_Notes(string value);
    [CompilerGeneratedAttribute]
public string get_Script();
    [CompilerGeneratedAttribute]
public void set_Script(string value);
    [CompilerGeneratedAttribute]
public String[] get_Args();
    [CompilerGeneratedAttribute]
public void set_Args(String[] value);
    [CompilerGeneratedAttribute]
public string get_DockerContainerID();
    [CompilerGeneratedAttribute]
public void set_DockerContainerID(string value);
    [CompilerGeneratedAttribute]
public string get_Shell();
    [CompilerGeneratedAttribute]
public void set_Shell(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_Interval();
    [CompilerGeneratedAttribute]
public void set_Interval(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_TTL();
    [CompilerGeneratedAttribute]
public void set_TTL(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public string get_HTTP();
    [CompilerGeneratedAttribute]
public void set_HTTP(string value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, List`1<string>> get_Header();
    [CompilerGeneratedAttribute]
public void set_Header(Dictionary`2<string, List`1<string>> value);
    [CompilerGeneratedAttribute]
public string get_Method();
    [CompilerGeneratedAttribute]
public void set_Method(string value);
    [CompilerGeneratedAttribute]
public string get_Body();
    [CompilerGeneratedAttribute]
public void set_Body(string value);
    [CompilerGeneratedAttribute]
public string get_TCP();
    [CompilerGeneratedAttribute]
public void set_TCP(string value);
    [CompilerGeneratedAttribute]
public HealthStatus get_Status();
    [CompilerGeneratedAttribute]
public void set_Status(HealthStatus value);
    [CompilerGeneratedAttribute]
public bool get_TLSSkipVerify();
    [CompilerGeneratedAttribute]
public void set_TLSSkipVerify(bool value);
    [CompilerGeneratedAttribute]
public string get_GRPC();
    [CompilerGeneratedAttribute]
public void set_GRPC(string value);
    [CompilerGeneratedAttribute]
public bool get_GRPCUseTLS();
    [CompilerGeneratedAttribute]
public void set_GRPCUseTLS(bool value);
    [CompilerGeneratedAttribute]
public string get_AliasService();
    [CompilerGeneratedAttribute]
public void set_AliasService(string value);
    [CompilerGeneratedAttribute]
public string get_AliasNode();
    [CompilerGeneratedAttribute]
public void set_AliasNode(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_DeregisterCriticalServiceAfter();
    [CompilerGeneratedAttribute]
public void set_DeregisterCriticalServiceAfter(Nullable`1<TimeSpan> value);
}
public class Consul.AgentServiceConnect : object {
    [CompilerGeneratedAttribute]
private AgentServiceRegistration <SidecarService>k__BackingField;
    [JsonPropertyAttribute]
public AgentServiceRegistration SidecarService { get; public set; }
    [CompilerGeneratedAttribute]
public AgentServiceRegistration get_SidecarService();
    [CompilerGeneratedAttribute]
public void set_SidecarService(AgentServiceRegistration value);
}
public class Consul.AgentServiceProxy : object {
    [CompilerGeneratedAttribute]
private string <DestinationServiceID>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LocalServicePort>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LocalServiceAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DestinationServiceName>k__BackingField;
    [CompilerGeneratedAttribute]
private AgentServiceProxyUpstream[] <Upstreams>k__BackingField;
    [JsonPropertyAttribute]
public string DestinationServiceID { get; public set; }
    [JsonPropertyAttribute]
public int LocalServicePort { get; public set; }
    [JsonPropertyAttribute]
public string LocalServiceAddress { get; public set; }
    [JsonPropertyAttribute]
public string DestinationServiceName { get; public set; }
    [JsonPropertyAttribute]
public AgentServiceProxyUpstream[] Upstreams { get; public set; }
    [CompilerGeneratedAttribute]
public string get_DestinationServiceID();
    [CompilerGeneratedAttribute]
public void set_DestinationServiceID(string value);
    [CompilerGeneratedAttribute]
public int get_LocalServicePort();
    [CompilerGeneratedAttribute]
public void set_LocalServicePort(int value);
    [CompilerGeneratedAttribute]
public string get_LocalServiceAddress();
    [CompilerGeneratedAttribute]
public void set_LocalServiceAddress(string value);
    [CompilerGeneratedAttribute]
public string get_DestinationServiceName();
    [CompilerGeneratedAttribute]
public void set_DestinationServiceName(string value);
    [CompilerGeneratedAttribute]
public AgentServiceProxyUpstream[] get_Upstreams();
    [CompilerGeneratedAttribute]
public void set_Upstreams(AgentServiceProxyUpstream[] value);
}
public class Consul.AgentServiceProxyUpstream : object {
    [CompilerGeneratedAttribute]
private string <DestinationName>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LocalBindPort>k__BackingField;
    [JsonPropertyAttribute]
public string DestinationName { get; public set; }
    [JsonPropertyAttribute]
public int LocalBindPort { get; public set; }
    [CompilerGeneratedAttribute]
public string get_DestinationName();
    [CompilerGeneratedAttribute]
public void set_DestinationName(string value);
    [CompilerGeneratedAttribute]
public int get_LocalBindPort();
    [CompilerGeneratedAttribute]
public void set_LocalBindPort(int value);
}
public class Consul.AgentServiceRegistration : object {
    [CompilerGeneratedAttribute]
private string <ID>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Tags>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Port>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Address>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableTagOverride>k__BackingField;
    [CompilerGeneratedAttribute]
private AgentServiceCheck <Check>k__BackingField;
    [CompilerGeneratedAttribute]
private AgentServiceCheck[] <Checks>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <Meta>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, ServiceTaggedAddress> <TaggedAddresses>k__BackingField;
    [CompilerGeneratedAttribute]
private AgentServiceConnect <Connect>k__BackingField;
    [CompilerGeneratedAttribute]
private AgentServiceProxy <Proxy>k__BackingField;
    [CompilerGeneratedAttribute]
private ServiceKind <Kind>k__BackingField;
    [JsonPropertyAttribute]
public string ID { get; public set; }
    [JsonPropertyAttribute]
public string Name { get; public set; }
    [JsonPropertyAttribute]
public String[] Tags { get; public set; }
    [JsonPropertyAttribute]
public int Port { get; public set; }
    [JsonPropertyAttribute]
public string Address { get; public set; }
    [JsonPropertyAttribute]
public bool EnableTagOverride { get; public set; }
    [JsonPropertyAttribute]
public AgentServiceCheck Check { get; public set; }
    [JsonPropertyAttribute]
public AgentServiceCheck[] Checks { get; public set; }
    [JsonPropertyAttribute]
public IDictionary`2<string, string> Meta { get; public set; }
    [JsonPropertyAttribute]
public IDictionary`2<string, ServiceTaggedAddress> TaggedAddresses { get; public set; }
    [JsonPropertyAttribute]
public AgentServiceConnect Connect { get; public set; }
    [JsonPropertyAttribute]
public AgentServiceProxy Proxy { get; public set; }
    [JsonPropertyAttribute]
public ServiceKind Kind { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ID();
    [CompilerGeneratedAttribute]
public void set_ID(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public String[] get_Tags();
    [CompilerGeneratedAttribute]
public void set_Tags(String[] value);
    [CompilerGeneratedAttribute]
public int get_Port();
    [CompilerGeneratedAttribute]
public void set_Port(int value);
    [CompilerGeneratedAttribute]
public string get_Address();
    [CompilerGeneratedAttribute]
public void set_Address(string value);
    [CompilerGeneratedAttribute]
public bool get_EnableTagOverride();
    [CompilerGeneratedAttribute]
public void set_EnableTagOverride(bool value);
    [CompilerGeneratedAttribute]
public AgentServiceCheck get_Check();
    [CompilerGeneratedAttribute]
public void set_Check(AgentServiceCheck value);
    [CompilerGeneratedAttribute]
public AgentServiceCheck[] get_Checks();
    [CompilerGeneratedAttribute]
public void set_Checks(AgentServiceCheck[] value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_Meta();
    [CompilerGeneratedAttribute]
public void set_Meta(IDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, ServiceTaggedAddress> get_TaggedAddresses();
    [CompilerGeneratedAttribute]
public void set_TaggedAddresses(IDictionary`2<string, ServiceTaggedAddress> value);
    [CompilerGeneratedAttribute]
public AgentServiceConnect get_Connect();
    [CompilerGeneratedAttribute]
public void set_Connect(AgentServiceConnect value);
    [CompilerGeneratedAttribute]
public AgentServiceProxy get_Proxy();
    [CompilerGeneratedAttribute]
public void set_Proxy(AgentServiceProxy value);
    [CompilerGeneratedAttribute]
public ServiceKind get_Kind();
    [CompilerGeneratedAttribute]
public void set_Kind(ServiceKind value);
}
public class Consul.AgentVersion : object {
    [CompilerGeneratedAttribute]
private string <SHA>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <BuildDate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HumanVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FIPS>k__BackingField;
    public string SHA { get; public set; }
    public DateTime BuildDate { get; public set; }
    public string HumanVersion { get; public set; }
    public string FIPS { get; public set; }
    [CompilerGeneratedAttribute]
public string get_SHA();
    [CompilerGeneratedAttribute]
public void set_SHA(string value);
    [CompilerGeneratedAttribute]
public DateTime get_BuildDate();
    [CompilerGeneratedAttribute]
public void set_BuildDate(DateTime value);
    [CompilerGeneratedAttribute]
public string get_HumanVersion();
    [CompilerGeneratedAttribute]
public void set_HumanVersion(string value);
    [CompilerGeneratedAttribute]
public string get_FIPS();
    [CompilerGeneratedAttribute]
public void set_FIPS(string value);
}
public class Consul.ApiGatewayCertificate : object {
    [CompilerGeneratedAttribute]
private string <Kind>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Namespace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Partition>k__BackingField;
    [JsonPropertyAttribute]
public string Kind { get; public set; }
    [JsonPropertyAttribute]
public string Name { get; public set; }
    [JsonPropertyAttribute]
public string Namespace { get; public set; }
    [JsonPropertyAttribute]
public string Partition { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Kind();
    [CompilerGeneratedAttribute]
public void set_Kind(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Namespace();
    [CompilerGeneratedAttribute]
public void set_Namespace(string value);
    [CompilerGeneratedAttribute]
public string get_Partition();
    [CompilerGeneratedAttribute]
public void set_Partition(string value);
}
public class Consul.ApiGatewayEntry : object {
    [CompilerGeneratedAttribute]
private string <Kind>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Namespace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Partition>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Meta>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ApiGatewayListener> <Listeners>k__BackingField;
    [JsonPropertyAttribute]
public string Kind { get; public set; }
    [JsonPropertyAttribute]
public string Name { get; public set; }
    [JsonPropertyAttribute]
public string Namespace { get; public set; }
    [JsonPropertyAttribute]
public string Partition { get; public set; }
    [JsonPropertyAttribute]
public Dictionary`2<string, string> Meta { get; public set; }
    [JsonPropertyAttribute]
public List`1<ApiGatewayListener> Listeners { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_Kind();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Kind(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Namespace();
    [CompilerGeneratedAttribute]
public void set_Namespace(string value);
    [CompilerGeneratedAttribute]
public string get_Partition();
    [CompilerGeneratedAttribute]
public void set_Partition(string value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_Meta();
    [CompilerGeneratedAttribute]
public void set_Meta(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public List`1<ApiGatewayListener> get_Listeners();
    [CompilerGeneratedAttribute]
public void set_Listeners(List`1<ApiGatewayListener> value);
}
public class Consul.ApiGatewayJWTProvider : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private ApiGatewayVerifyClaims <VerifyClaims>k__BackingField;
    [JsonPropertyAttribute]
public string Name { get; public set; }
    [JsonPropertyAttribute]
public ApiGatewayVerifyClaims VerifyClaims { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public ApiGatewayVerifyClaims get_VerifyClaims();
    [CompilerGeneratedAttribute]
public void set_VerifyClaims(ApiGatewayVerifyClaims value);
}
public class Consul.ApiGatewayJWTSettings : object {
    [CompilerGeneratedAttribute]
private List`1<ApiGatewayJWTProvider> <Providers>k__BackingField;
    [JsonPropertyAttribute]
public List`1<ApiGatewayJWTProvider> Providers { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<ApiGatewayJWTProvider> get_Providers();
    [CompilerGeneratedAttribute]
public void set_Providers(List`1<ApiGatewayJWTProvider> value);
}
public class Consul.ApiGatewayListener : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Port>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Protocol>k__BackingField;
    [CompilerGeneratedAttribute]
private ApiGatewayTLS <TLS>k__BackingField;
    [CompilerGeneratedAttribute]
private ApiGatewayOverrideSettings <Default>k__BackingField;
    [CompilerGeneratedAttribute]
private ApiGatewayOverrideSettings <Override>k__BackingField;
    [JsonPropertyAttribute]
public string Name { get; public set; }
    [JsonPropertyAttribute]
public Nullable`1<int> Port { get; public set; }
    [JsonPropertyAttribute]
public string Protocol { get; public set; }
    [JsonPropertyAttribute]
public ApiGatewayTLS TLS { get; public set; }
    [JsonPropertyAttribute("default")]
public ApiGatewayOverrideSettings Default { get; public set; }
    [JsonPropertyAttribute("override")]
public ApiGatewayOverrideSettings Override { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Port();
    [CompilerGeneratedAttribute]
public void set_Port(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_Protocol();
    [CompilerGeneratedAttribute]
public void set_Protocol(string value);
    [CompilerGeneratedAttribute]
public ApiGatewayTLS get_TLS();
    [CompilerGeneratedAttribute]
public void set_TLS(ApiGatewayTLS value);
    [CompilerGeneratedAttribute]
public ApiGatewayOverrideSettings get_Default();
    [CompilerGeneratedAttribute]
public void set_Default(ApiGatewayOverrideSettings value);
    [CompilerGeneratedAttribute]
public ApiGatewayOverrideSettings get_Override();
    [CompilerGeneratedAttribute]
public void set_Override(ApiGatewayOverrideSettings value);
}
public class Consul.ApiGatewayOverrideSettings : object {
    [CompilerGeneratedAttribute]
private ApiGatewayJWTSettings <JWT>k__BackingField;
    [JsonPropertyAttribute]
public ApiGatewayJWTSettings JWT { get; public set; }
    [CompilerGeneratedAttribute]
public ApiGatewayJWTSettings get_JWT();
    [CompilerGeneratedAttribute]
public void set_JWT(ApiGatewayJWTSettings value);
}
public class Consul.ApiGatewayReference : object {
    [CompilerGeneratedAttribute]
private string <Kind>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Namespace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Partition>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SectionName>k__BackingField;
    [JsonPropertyAttribute]
public string Kind { get; public set; }
    [JsonPropertyAttribute]
public string Name { get; public set; }
    [JsonPropertyAttribute]
public string Namespace { get; public set; }
    [JsonPropertyAttribute]
public string Partition { get; public set; }
    [JsonPropertyAttribute]
public string SectionName { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Kind();
    [CompilerGeneratedAttribute]
public void set_Kind(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Namespace();
    [CompilerGeneratedAttribute]
public void set_Namespace(string value);
    [CompilerGeneratedAttribute]
public string get_Partition();
    [CompilerGeneratedAttribute]
public void set_Partition(string value);
    [CompilerGeneratedAttribute]
public string get_SectionName();
    [CompilerGeneratedAttribute]
public void set_SectionName(string value);
}
public class Consul.ApiGatewayTLS : object {
    [CompilerGeneratedAttribute]
private string <MaxVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MinVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <CipherSuites>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ApiGatewayCertificate> <Certificates>k__BackingField;
    [JsonPropertyAttribute]
public string MaxVersion { get; public set; }
    [JsonPropertyAttribute]
public string MinVersion { get; public set; }
    [JsonPropertyAttribute]
public List`1<string> CipherSuites { get; public set; }
    [JsonPropertyAttribute]
public List`1<ApiGatewayCertificate> Certificates { get; public set; }
    [CompilerGeneratedAttribute]
public string get_MaxVersion();
    [CompilerGeneratedAttribute]
public void set_MaxVersion(string value);
    [CompilerGeneratedAttribute]
public string get_MinVersion();
    [CompilerGeneratedAttribute]
public void set_MinVersion(string value);
    [CompilerGeneratedAttribute]
public List`1<string> get_CipherSuites();
    [CompilerGeneratedAttribute]
public void set_CipherSuites(List`1<string> value);
    [CompilerGeneratedAttribute]
public List`1<ApiGatewayCertificate> get_Certificates();
    [CompilerGeneratedAttribute]
public void set_Certificates(List`1<ApiGatewayCertificate> value);
}
public class Consul.ApiGatewayVerifyClaims : object {
    [CompilerGeneratedAttribute]
private List`1<string> <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [JsonPropertyAttribute]
public List`1<string> Path { get; public set; }
    [JsonPropertyAttribute]
public string Value { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<string> get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(List`1<string> value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
}
internal class Consul.AsyncLock : object {
    private SemaphoreSlim _semaphore;
    private Task`1<Releaser> _releaser;
    public Task`1<Releaser> LockAsync();
}
internal class Consul.AsyncReaderWriterLock : object {
    private Task`1<Releaser> _readerReleaser;
    private Task`1<Releaser> _writerReleaser;
    private Queue`1<TaskCompletionSource`1<Releaser>> _waitingWriters;
    private TaskCompletionSource`1<Releaser> _waitingReader;
    private int _readersWaiting;
    private int _status;
    public Task`1<Releaser> ReaderLockAsync();
    public Task`1<Releaser> WriterLockAsync();
    private void ReaderRelease();
    private void WriterRelease();
}
public class Consul.AuthMethod : object {
    private ConsulClient _client;
    internal AuthMethod(ConsulClient c);
    public sealed virtual Task`1<WriteResult`1<AuthMethodEntry>> Create(AuthMethodEntry authMethod, CancellationToken ct);
    [AsyncStateMachineAttribute("Consul.AuthMethod/<Create>d__4")]
public sealed virtual Task`1<WriteResult`1<AuthMethodEntry>> Create(AuthMethodEntry authMethod, WriteOptions writeOptions, CancellationToken ct);
    public sealed virtual Task`1<WriteResult`1<AuthMethodEntry>> Update(AuthMethodEntry authMethod, CancellationToken ct);
    [AsyncStateMachineAttribute("Consul.AuthMethod/<Update>d__6")]
public sealed virtual Task`1<WriteResult`1<AuthMethodEntry>> Update(AuthMethodEntry authMethod, WriteOptions writeOptions, CancellationToken ct);
    public sealed virtual Task`1<WriteResult`1<bool>> Delete(string name, CancellationToken ct);
    public sealed virtual Task`1<WriteResult`1<bool>> Delete(string name, WriteOptions writeOptions, CancellationToken ct);
    public sealed virtual Task`1<QueryResult`1<AuthMethodEntry>> Read(string name, CancellationToken ct);
    [AsyncStateMachineAttribute("Consul.AuthMethod/<Read>d__10")]
public sealed virtual Task`1<QueryResult`1<AuthMethodEntry>> Read(string name, QueryOptions queryOptions, CancellationToken ct);
    public sealed virtual Task`1<QueryResult`1<AuthMethodEntry[]>> List(CancellationToken ct);
    public sealed virtual Task`1<QueryResult`1<AuthMethodEntry[]>> List(QueryOptions queryOptions, CancellationToken ct);
    public sealed virtual Task`1<WriteResult`1<TokenEntry>> Login(CancellationToken ct);
    [AsyncStateMachineAttribute("Consul.AuthMethod/<Login>d__14")]
public sealed virtual Task`1<WriteResult`1<TokenEntry>> Login(WriteOptions writeOptions, CancellationToken ct);
    public sealed virtual Task`1<WriteResult> Logout(CancellationToken ct);
    [AsyncStateMachineAttribute("Consul.AuthMethod/<Logout>d__16")]
public sealed virtual Task`1<WriteResult> Logout(WriteOptions writeOptions, CancellationToken ct);
}
public class Consul.AuthMethodEntry : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Config>k__BackingField;
    public string Name { get; public set; }
    public string Type { get; public set; }
    [JsonPropertyAttribute]
public string Description { get; public set; }
    [JsonPropertyAttribute]
public Dictionary`2<string, string> Config { get; public set; }
    public AuthMethodEntry(string name, string type, Dictionary`2<string, string> config);
    public AuthMethodEntry(string name, string type, string description, Dictionary`2<string, string> config);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_Config();
    [CompilerGeneratedAttribute]
public void set_Config(Dictionary`2<string, string> value);
    public bool ShouldSerializeCreateIndex();
    public bool ShouldSerializeModifyIndex();
}
public class Consul.CaCertificateProviderInstanceConfig : object {
    [CompilerGeneratedAttribute]
private string <InstanceName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CertificateName>k__BackingField;
    [JsonPropertyAttribute]
public string InstanceName { get; public set; }
    [JsonPropertyAttribute]
public string CertificateName { get; public set; }
    [CompilerGeneratedAttribute]
public string get_InstanceName();
    [CompilerGeneratedAttribute]
public void set_InstanceName(string value);
    [CompilerGeneratedAttribute]
public string get_CertificateName();
    [CompilerGeneratedAttribute]
public void set_CertificateName(string value);
}
public class Consul.CacheConfig : object {
    [CompilerGeneratedAttribute]
private string <Size>k__BackingField;
    [JsonPropertyAttribute]
public string Size { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Size();
    [CompilerGeneratedAttribute]
public void set_Size(string value);
}
public class Consul.CALeaf : object {
    [CompilerGeneratedAttribute]
private string <SerialNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CertPEM>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PrivateKeyPEM>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Service>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServiceURI>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <ValidAfter>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <ValidBefore>k__BackingField;
    [CompilerGeneratedAttribute]
private long <CreateIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private long <ModifyIndex>k__BackingField;
    public string SerialNumber { get; public set; }
    public string CertPEM { get; public set; }
    public string PrivateKeyPEM { get; public set; }
    public string Service { get; public set; }
    public string ServiceURI { get; public set; }
    public DateTime ValidAfter { get; public set; }
    public DateTime ValidBefore { get; public set; }
    public long CreateIndex { get; public set; }
    public long ModifyIndex { get; public set; }
    [CompilerGeneratedAttribute]
public string get_SerialNumber();
    [CompilerGeneratedAttribute]
public void set_SerialNumber(string value);
    [CompilerGeneratedAttribute]
public string get_CertPEM();
    [CompilerGeneratedAttribute]
public void set_CertPEM(string value);
    [CompilerGeneratedAttribute]
public string get_PrivateKeyPEM();
    [CompilerGeneratedAttribute]
public void set_PrivateKeyPEM(string value);
    [CompilerGeneratedAttribute]
public string get_Service();
    [CompilerGeneratedAttribute]
public void set_Service(string value);
    [CompilerGeneratedAttribute]
public string get_ServiceURI();
    [CompilerGeneratedAttribute]
public void set_ServiceURI(string value);
    [CompilerGeneratedAttribute]
public DateTime get_ValidAfter();
    [CompilerGeneratedAttribute]
public void set_ValidAfter(DateTime value);
    [CompilerGeneratedAttribute]
public DateTime get_ValidBefore();
    [CompilerGeneratedAttribute]
public void set_ValidBefore(DateTime value);
    [CompilerGeneratedAttribute]
public long get_CreateIndex();
    [CompilerGeneratedAttribute]
public void set_CreateIndex(long value);
    [CompilerGeneratedAttribute]
public long get_ModifyIndex();
    [CompilerGeneratedAttribute]
public void set_ModifyIndex(long value);
}
public class Consul.CARoots : object {
    [CompilerGeneratedAttribute]
private string <ActiveRootID>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TrustDomain>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Root> <Roots>k__BackingField;
    public string ActiveRootID { get; public set; }
    public string TrustDomain { get; public set; }
    public List`1<Root> Roots { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ActiveRootID();
    [CompilerGeneratedAttribute]
public void set_ActiveRootID(string value);
    [CompilerGeneratedAttribute]
public string get_TrustDomain();
    [CompilerGeneratedAttribute]
public void set_TrustDomain(string value);
    [CompilerGeneratedAttribute]
public List`1<Root> get_Roots();
    [CompilerGeneratedAttribute]
public void set_Roots(List`1<Root> value);
}
public class Consul.Catalog : object {
    private ConsulClient _client;
    internal Catalog(ConsulClient c);
    public sealed virtual Task`1<WriteResult> Register(CatalogRegistration reg, CancellationToken ct);
    public sealed virtual Task`1<WriteResult> Register(CatalogRegistration reg, WriteOptions q, CancellationToken ct);
    public sealed virtual Task`1<WriteResult> Deregister(CatalogDeregistration reg, CancellationToken ct);
    public sealed virtual Task`1<WriteResult> Deregister(CatalogDeregistration reg, WriteOptions q, CancellationToken ct);
    public sealed virtual Task`1<QueryResult`1<String[]>> Datacenters(CancellationToken ct);
    public sealed virtual Task`1<QueryResult`1<String[]>> Datacenters(QueryOptions q, CancellationToken ct);
    public sealed virtual Task`1<QueryResult`1<Node[]>> Nodes(CancellationToken ct);
    public sealed virtual Task`1<QueryResult`1<Node[]>> Nodes(QueryOptions q, CancellationToken ct);
    public sealed virtual Task`1<QueryResult`1<Dictionary`2<string, String[]>>> Services(CancellationToken ct);
    public sealed virtual Task`1<QueryResult`1<Dictionary`2<string, String[]>>> Services(QueryOptions q, CancellationToken ct);
    public sealed virtual Task`1<QueryResult`1<CatalogService[]>> Service(string service, CancellationToken ct);
    public sealed virtual Task`1<QueryResult`1<CatalogService[]>> Service(string service, string tag, CancellationToken ct);
    public sealed virtual Task`1<QueryResult`1<CatalogService[]>> Service(string service, string tag, QueryOptions q, CancellationToken ct);
    public sealed virtual Task`1<QueryResult`1<CatalogService[]>> NodesForMeshCapableService(string service, CancellationToken ct);
    public sealed virtual Task`1<QueryResult`1<CatalogService[]>> NodesForMeshCapableService(string service, Filter filter, CancellationToken ct);
    public sealed virtual Task`1<QueryResult`1<CatalogService[]>> NodesForMeshCapableService(string service, QueryOptions q, Filter filter, CancellationToken ct);
    public sealed virtual Task`1<QueryResult`1<CatalogNode>> Node(string node, CancellationToken ct);
    public sealed virtual Task`1<QueryResult`1<CatalogNode>> Node(string node, QueryOptions q, CancellationToken ct);
    public sealed virtual Task`1<QueryResult`1<NodeService>> ServicesForNode(string node, CancellationToken ct);
    public sealed virtual Task`1<QueryResult`1<NodeService>> ServicesForNode(string node, QueryOptions q, CancellationToken ct);
    public sealed virtual Task`1<QueryResult`1<GatewayService[]>> GatewayService(string gateway, QueryOptions q, CancellationToken ct);
    public sealed virtual Task`1<QueryResult`1<GatewayService[]>> GatewayService(string gateway, CancellationToken ct);
}
public class Consul.CatalogDeregistration : object {
    [CompilerGeneratedAttribute]
private string <Node>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Address>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Datacenter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServiceID>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CheckID>k__BackingField;
    public string Node { get; public set; }
    public string Address { get; public set; }
    public string Datacenter { get; public set; }
    public string ServiceID { get; public set; }
    public string CheckID { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Node();
    [CompilerGeneratedAttribute]
public void set_Node(string value);
    [CompilerGeneratedAttribute]
public string get_Address();
    [CompilerGeneratedAttribute]
public void set_Address(string value);
    [CompilerGeneratedAttribute]
public string get_Datacenter();
    [CompilerGeneratedAttribute]
public void set_Datacenter(string value);
    [CompilerGeneratedAttribute]
public string get_ServiceID();
    [CompilerGeneratedAttribute]
public void set_ServiceID(string value);
    [CompilerGeneratedAttribute]
public string get_CheckID();
    [CompilerGeneratedAttribute]
public void set_CheckID(string value);
}
public class Consul.CatalogNode : object {
    [CompilerGeneratedAttribute]
private Node <Node>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, AgentService> <Services>k__BackingField;
    public Node Node { get; public set; }
    public Dictionary`2<string, AgentService> Services { get; public set; }
    [CompilerGeneratedAttribute]
public Node get_Node();
    [CompilerGeneratedAttribute]
public void set_Node(Node value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, AgentService> get_Services();
    [CompilerGeneratedAttribute]
public void set_Services(Dictionary`2<string, AgentService> value);
}
public class Consul.CatalogRateLimit : object {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <ReadRate>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <WriteRate>k__BackingField;
    [JsonPropertyAttribute]
public Nullable`1<int> ReadRate { get; public set; }
    [JsonPropertyAttribute]
public Nullable`1<int> WriteRate { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_ReadRate();
    [CompilerGeneratedAttribute]
public void set_ReadRate(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_WriteRate();
    [CompilerGeneratedAttribute]
public void set_WriteRate(Nullable`1<int> value);
}
public class Consul.CatalogRegistration : object {
    [CompilerGeneratedAttribute]
private string <Node>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Address>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Datacenter>k__BackingField;
    [CompilerGeneratedAttribute]
private AgentService <Service>k__BackingField;
    [CompilerGeneratedAttribute]
private AgentCheck <Check>k__BackingField;
    public string Node { get; public set; }
    public string Address { get; public set; }
    public string Datacenter { get; public set; }
    public AgentService Service { get; public set; }
    public AgentCheck Check { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Node();
    [CompilerGeneratedAttribute]
public void set_Node(string value);
    [CompilerGeneratedAttribute]
public string get_Address();
    [CompilerGeneratedAttribute]
public void set_Address(string value);
    [CompilerGeneratedAttribute]
public string get_Datacenter();
    [CompilerGeneratedAttribute]
public void set_Datacenter(string value);
    [CompilerGeneratedAttribute]
public AgentService get_Service();
    [CompilerGeneratedAttribute]
public void set_Service(AgentService value);
    [CompilerGeneratedAttribute]
public AgentCheck get_Check();
    [CompilerGeneratedAttribute]
public void set_Check(AgentCheck value);
}
public class Consul.CatalogService : object {
    [CompilerGeneratedAttribute]
private string <Node>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Address>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServiceID>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServiceName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServiceAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <ServiceTags>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ServicePort>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, ServiceTaggedAddress> <ServiceTaggedAddresses>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ServiceEnableTagOverride>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <ServiceMeta>k__BackingField;
    public string Node { get; public set; }
    public string Address { get; public set; }
    public string ServiceID { get; public set; }
    public string ServiceName { get; public set; }
    public string ServiceAddress { get; public set; }
    public String[] ServiceTags { get; public set; }
    public int ServicePort { get; public set; }
    public Dictionary`2<string, ServiceTaggedAddress> ServiceTaggedAddresses { get; public set; }
    public bool ServiceEnableTagOverride { get; public set; }
    public IDictionary`2<string, string> ServiceMeta { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Node();
    [CompilerGeneratedAttribute]
public void set_Node(string value);
    [CompilerGeneratedAttribute]
public string get_Address();
    [CompilerGeneratedAttribute]
public void set_Address(string value);
    [CompilerGeneratedAttribute]
public string get_ServiceID();
    [CompilerGeneratedAttribute]
public void set_ServiceID(string value);
    [CompilerGeneratedAttribute]
public string get_ServiceName();
    [CompilerGeneratedAttribute]
public void set_ServiceName(string value);
    [CompilerGeneratedAttribute]
public string get_ServiceAddress();
    [CompilerGeneratedAttribute]
public void set_ServiceAddress(string value);
    [CompilerGeneratedAttribute]
public String[] get_ServiceTags();
    [CompilerGeneratedAttribute]
public void set_ServiceTags(String[] value);
    [CompilerGeneratedAttribute]
public int get_ServicePort();
    [CompilerGeneratedAttribute]
public void set_ServicePort(int value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, ServiceTaggedAddress> get_ServiceTaggedAddresses();
    [CompilerGeneratedAttribute]
public void set_ServiceTaggedAddresses(Dictionary`2<string, ServiceTaggedAddress> value);
    [CompilerGeneratedAttribute]
public bool get_ServiceEnableTagOverride();
    [CompilerGeneratedAttribute]
public void set_ServiceEnableTagOverride(bool value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_ServiceMeta();
    [CompilerGeneratedAttribute]
public void set_ServiceMeta(IDictionary`2<string, string> value);
}
public class Consul.CompoundServiceName : object {
    [CompilerGeneratedAttribute]
private string <Namespace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Partition>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Namespace { get; public set; }
    public string Partition { get; public set; }
    public string Name { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Namespace();
    [CompilerGeneratedAttribute]
public void set_Namespace(string value);
    [CompilerGeneratedAttribute]
public string get_Partition();
    [CompilerGeneratedAttribute]
public void set_Partition(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
}
public class Consul.Configuration : object {
    private ConsulClient _client;
    internal Configuration(ConsulClient c);
    public sealed virtual Task`1<WriteResult> ApplyConfig(WriteOptions q, TConfig configurationEntry, CancellationToken ct);
    public sealed virtual Task`1<WriteResult> ApplyConfig(TConfig configurationEntry, CancellationToken ct);
    public sealed virtual Task`1<QueryResult`1<TConfig>> GetConfig(string kind, string name, QueryOptions q, CancellationToken ct);
    public sealed virtual Task`1<QueryResult`1<TConfig>> GetConfig(string kind, string name, CancellationToken ct);
    public sealed virtual Task`1<QueryResult`1<List`1<TConfig>>> ListConfig(string kind, QueryOptions q, CancellationToken ct);
    public sealed virtual Task`1<QueryResult`1<List`1<TConfig>>> ListConfig(string kind, CancellationToken ct);
    public sealed virtual Task`1<WriteResult> DeleteConfig(string kind, string name, WriteOptions q, CancellationToken ct);
    public sealed virtual Task`1<WriteResult> DeleteConfig(string kind, string name, CancellationToken ct);
}
public enum Consul.ConsistencyMode : Enum {
    public int value__;
    public static ConsistencyMode Default;
    public static ConsistencyMode Consistent;
    public static ConsistencyMode Stale;
}
public class Consul.ConsulClient : object {
    private Lazy`1<ACL> _acl;
    private Lazy`1<ACLReplication> _aclReplication;
    private Lazy`1<Agent> _agent;
    private Lazy`1<AuthMethod> _authMethod;
    private Lazy`1<Catalog> _catalog;
    private ConsulClientConfigurationContainer _configContainer;
    private bool _disposedValue;
    private Lazy`1<Configuration> _configuration;
    private Lazy`1<Coordinate> _coordinate;
    private Lazy`1<Event> _event;
    private Lazy`1<Health> _health;
    private Lazy`1<KV> _kv;
    private Lazy`1<Namespaces> _namespaces;
    private Lazy`1<Operator> _operator;
    private Lazy`1<Policy> _policy;
    private Lazy`1<PreparedQuery> _preparedquery;
    private Lazy`1<Raw> _raw;
    private Lazy`1<Role> _role;
    private Lazy`1<Session> _session;
    private Lazy`1<Snapshot> _snapshot;
    private Lazy`1<Status> _status;
    private Lazy`1<Token> _token;
    [ObsoleteAttribute("The Legacy ACL system has been deprecated, please use Token, Role and Policy instead.")]
public IACLEndpoint ACL { get; }
    public IACLReplicationEndpoint ACLReplication { get; }
    public IAgentEndpoint Agent { get; }
    public IAuthMethodEndpoint AuthMethod { get; }
    public ICatalogEndpoint Catalog { get; }
    internal HttpClient HttpClient { get; }
    internal WebRequestHandler HttpHandler { get; }
    public ConsulClientConfiguration Config { get; }
    public IConfigurationEndpoint Configuration { get; }
    public ICoordinateEndpoint Coordinate { get; }
    public IEventEndpoint Event { get; }
    public IHealthEndpoint Health { get; }
    public IKVEndpoint KV { get; }
    public INamespacesEndpoint Namespaces { get; }
    public IOperatorEndpoint Operator { get; }
    public IPolicyEndpoint Policy { get; }
    public IPreparedQueryEndpoint PreparedQuery { get; }
    public IRawEndpoint Raw { get; }
    public IRoleEndpoint Role { get; }
    public ISessionEndpoint Session { get; }
    public ISnapshotEndpoint Snapshot { get; }
    public IStatusEndpoint Status { get; }
    public ITokenEndpoint Token { get; }
    public ConsulClient(Action`1<ConsulClientConfiguration> configOverride);
    public ConsulClient(Action`1<ConsulClientConfiguration> configOverride, Action`1<HttpClient> clientOverride);
    public ConsulClient(Action`1<ConsulClientConfiguration> configOverride, Action`1<HttpClient> clientOverride, Action`1<WebRequestHandler> handlerOverride);
    public ConsulClient(ConsulClientConfiguration config);
    public ConsulClient(ConsulClientConfiguration config, HttpClient client);
    public sealed virtual IACLEndpoint get_ACL();
    public IACLReplicationEndpoint get_ACLReplication();
    public sealed virtual IAgentEndpoint get_Agent();
    public IAuthMethodEndpoint get_AuthMethod();
    public sealed virtual ICatalogEndpoint get_Catalog();
    internal HttpClient get_HttpClient();
    internal WebRequestHandler get_HttpHandler();
    public ConsulClientConfiguration get_Config();
    private void InitializeEndpoints();
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
    public void CheckDisposed();
    private void HandleConfigUpdateEvent(object sender, EventArgs e);
    private void ApplyConfig(ConsulClientConfiguration config, WebRequestHandler handler, HttpClient client);
    internal GetRequest`1<TOut> Get(string path, QueryOptions opts, IEncodable filter);
    internal GetRequest Get(string path, QueryOptions opts);
    internal DeleteReturnRequest`1<TOut> DeleteReturning(string path, WriteOptions opts);
    internal DeleteRequest Delete(string path, WriteOptions opts);
    internal DeleteAcceptingRequest`1<TIn> DeleteAccepting(string path, TIn body, WriteOptions opts);
    internal PutReturningRequest`1<TOut> PutReturning(string path, WriteOptions opts);
    internal PutRequest`1<TIn> Put(string path, TIn body, WriteOptions opts);
    internal PutNothingRequest PutNothing(string path, WriteOptions opts);
    internal PutRequest`2<TIn, TOut> Put(string path, TIn body, WriteOptions opts);
    internal PostReturningRequest`1<TOut> PostReturning(string path, WriteOptions opts);
    internal PostRequest`1<TIn> Post(string path, TIn body, WriteOptions opts);
    internal PostRequest`2<TIn, TOut> Post(string path, TIn body, WriteOptions opts);
    internal PostRequest Post(string path, string body, WriteOptions opts);
    public sealed virtual IConfigurationEndpoint get_Configuration();
    public sealed virtual ICoordinateEndpoint get_Coordinate();
    public sealed virtual IEventEndpoint get_Event();
    public sealed virtual IHealthEndpoint get_Health();
    public sealed virtual IKVEndpoint get_KV();
    public sealed virtual IDistributedLock CreateLock(string key);
    public sealed virtual IDistributedLock CreateLock(LockOptions opts);
    public sealed virtual Task`1<IDistributedLock> AcquireLock(string key, CancellationToken ct);
    [AsyncStateMachineAttribute("Consul.ConsulClient/<AcquireLock>d__67")]
public sealed virtual Task`1<IDistributedLock> AcquireLock(LockOptions opts, CancellationToken ct);
    public sealed virtual Task ExecuteLocked(string key, Action action, CancellationToken ct);
    [AsyncStateMachineAttribute("Consul.ConsulClient/<ExecuteLocked>d__69")]
public sealed virtual Task ExecuteLocked(LockOptions opts, Action action, CancellationToken ct);
    [ObsoleteAttribute("This method will be removed in a future release. Replace calls with the method signature ExecuteLocked(string, Action, CancellationToken)")]
public sealed virtual Task ExecuteLocked(string key, CancellationToken ct, Action action);
    [ObsoleteAttribute("This method will be removed in a future release. Replace calls with the method signature ExecuteLocked(LockOptions, Action, CancellationToken)")]
public sealed virtual Task ExecuteLocked(LockOptions opts, CancellationToken ct, Action action);
    public INamespacesEndpoint get_Namespaces();
    public sealed virtual IOperatorEndpoint get_Operator();
    public sealed virtual IPolicyEndpoint get_Policy();
    public sealed virtual IPreparedQueryEndpoint get_PreparedQuery();
    public sealed virtual IRawEndpoint get_Raw();
    public sealed virtual IRoleEndpoint get_Role();
    public sealed virtual IDistributedSemaphore Semaphore(string prefix, int limit);
    public sealed virtual IDistributedSemaphore Semaphore(SemaphoreOptions opts);
    public sealed virtual Task`1<IDistributedSemaphore> AcquireSemaphore(string prefix, int limit, CancellationToken ct);
    [AsyncStateMachineAttribute("Consul.ConsulClient/<AcquireSemaphore>d__93")]
public sealed virtual Task`1<IDistributedSemaphore> AcquireSemaphore(SemaphoreOptions opts, CancellationToken ct);
    public sealed virtual Task ExecuteInSemaphore(string prefix, int limit, Action a, CancellationToken ct);
    [AsyncStateMachineAttribute("Consul.ConsulClient/<ExecuteInSemaphore>d__95")]
public sealed virtual Task ExecuteInSemaphore(SemaphoreOptions opts, Action a, CancellationToken ct);
    public sealed virtual ISessionEndpoint get_Session();
    public sealed virtual ISnapshotEndpoint get_Snapshot();
    public sealed virtual IStatusEndpoint get_Status();
    public sealed virtual ITokenEndpoint get_Token();
    [CompilerGeneratedAttribute]
private ACL <InitializeEndpoints>b__29_0();
    [CompilerGeneratedAttribute]
private Agent <InitializeEndpoints>b__29_1();
    [CompilerGeneratedAttribute]
private Catalog <InitializeEndpoints>b__29_2();
    [CompilerGeneratedAttribute]
private Coordinate <InitializeEndpoints>b__29_3();
    [CompilerGeneratedAttribute]
private Configuration <InitializeEndpoints>b__29_4();
    [CompilerGeneratedAttribute]
private Event <InitializeEndpoints>b__29_5();
    [CompilerGeneratedAttribute]
private Health <InitializeEndpoints>b__29_6();
    [CompilerGeneratedAttribute]
private KV <InitializeEndpoints>b__29_7();
    [CompilerGeneratedAttribute]
private Operator <InitializeEndpoints>b__29_8();
    [CompilerGeneratedAttribute]
private Policy <InitializeEndpoints>b__29_9();
    [CompilerGeneratedAttribute]
private PreparedQuery <InitializeEndpoints>b__29_10();
    [CompilerGeneratedAttribute]
private Raw <InitializeEndpoints>b__29_11();
    [CompilerGeneratedAttribute]
private Role <InitializeEndpoints>b__29_12();
    [CompilerGeneratedAttribute]
private Session <InitializeEndpoints>b__29_13();
    [CompilerGeneratedAttribute]
private Snapshot <InitializeEndpoints>b__29_14();
    [CompilerGeneratedAttribute]
private Status <InitializeEndpoints>b__29_15();
    [CompilerGeneratedAttribute]
private Token <InitializeEndpoints>b__29_16();
    [CompilerGeneratedAttribute]
private ACLReplication <InitializeEndpoints>b__29_17();
    [CompilerGeneratedAttribute]
private AuthMethod <InitializeEndpoints>b__29_18();
    [CompilerGeneratedAttribute]
private Namespaces <InitializeEndpoints>b__29_19();
}
public class Consul.ConsulClientConfiguration : object {
    private NetworkCredential _httpauth;
    private bool _disableServerCertificateValidation;
    private X509Certificate2 _clientCertificate;
    [CompilerGeneratedAttribute]
private EventHandler _updated;
    internal static Lazy`1<bool> ClientCertSupport;
    [CompilerGeneratedAttribute]
private Uri <Address>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Namespace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Datacenter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Token>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <WaitTime>k__BackingField;
    internal static bool ClientCertificateSupported { get; }
    [ObsoleteAttribute("Use of DisableServerCertificateValidation should be converted to setting the WebRequestHandler's ServerCertificateValidationCallback in the ConsulClient constructorThis property will be removed in a future release.", "False")]
internal bool DisableServerCertificateValidation { get; internal set; }
    public Uri Address { get; public set; }
    public string Namespace { get; public set; }
    public string Datacenter { get; public set; }
    [ObsoleteAttribute("Use of HttpAuth should be converted to setting the WebRequestHandler's Credential property in the ConsulClient constructorThis property will be removed in a future release.", "False")]
internal NetworkCredential HttpAuth { get; public set; }
    [ObsoleteAttribute("Use of ClientCertificate should be converted to adding to the WebRequestHandler's ClientCertificates list in the ConsulClient constructor.This property will be removed in a future release.", "False")]
internal X509Certificate2 ClientCertificate { get; public set; }
    public string Token { get; public set; }
    public Nullable`1<TimeSpan> WaitTime { get; public set; }
    private static ConsulClientConfiguration();
    [CompilerGeneratedAttribute]
internal void add__updated(EventHandler value);
    [CompilerGeneratedAttribute]
internal void remove__updated(EventHandler value);
    internal static bool get_ClientCertificateSupported();
    internal bool get_DisableServerCertificateValidation();
    internal void set_DisableServerCertificateValidation(bool value);
    [CompilerGeneratedAttribute]
public Uri get_Address();
    [CompilerGeneratedAttribute]
public void set_Address(Uri value);
    [CompilerGeneratedAttribute]
public string get_Namespace();
    [CompilerGeneratedAttribute]
public void set_Namespace(string value);
    [CompilerGeneratedAttribute]
public string get_Datacenter();
    [CompilerGeneratedAttribute]
public void set_Datacenter(string value);
    internal NetworkCredential get_HttpAuth();
    public void set_HttpAuth(NetworkCredential value);
    internal X509Certificate2 get_ClientCertificate();
    public void set_ClientCertificate(X509Certificate2 value);
    [CompilerGeneratedAttribute]
public string get_Token();
    [CompilerGeneratedAttribute]
public void set_Token(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_WaitTime();
    [CompilerGeneratedAttribute]
public void set_WaitTime(Nullable`1<TimeSpan> value);
    private void ConfigureFromEnvironment(UriBuilder consulAddress);
    internal virtual void OnUpdated(EventArgs e);
}
public class Consul.ConsulConfigurationException : Exception {
    public ConsulConfigurationException(string message);
    public ConsulConfigurationException(string message, Exception inner);
    protected ConsulConfigurationException(SerializationInfo info, StreamingContext context);
}
public class Consul.ConsulLicense : object {
    [CompilerGeneratedAttribute]
private bool <Valid>k__BackingField;
    [CompilerGeneratedAttribute]
private License <License>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Warnings>k__BackingField;
    public bool Valid { get; public set; }
    public License License { get; public set; }
    public String[] Warnings { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Valid();
    [CompilerGeneratedAttribute]
public void set_Valid(bool value);
    [CompilerGeneratedAttribute]
public License get_License();
    [CompilerGeneratedAttribute]
public void set_License(License value);
    [CompilerGeneratedAttribute]
public String[] get_Warnings();
    [CompilerGeneratedAttribute]
public void set_Warnings(String[] value);
}
public abstract class Consul.ConsulRequest : object {
    [CompilerGeneratedAttribute]
private ConsulClient <Client>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpMethod <Method>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Params>k__BackingField;
    [CompilerGeneratedAttribute]
private Stream <ResponseStream>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Endpoint>k__BackingField;
    internal JsonSerializer _serializer;
    internal ConsulClient Client { get; internal set; }
    internal HttpMethod Method { get; internal set; }
    internal Dictionary`2<string, string> Params { get; internal set; }
    internal Stream ResponseStream { get; internal set; }
    internal string Endpoint { get; internal set; }
    internal ConsulRequest(ConsulClient client, string url, HttpMethod method);
    [CompilerGeneratedAttribute]
internal ConsulClient get_Client();
    [CompilerGeneratedAttribute]
internal void set_Client(ConsulClient value);
    [CompilerGeneratedAttribute]
internal HttpMethod get_Method();
    [CompilerGeneratedAttribute]
internal void set_Method(HttpMethod value);
    [CompilerGeneratedAttribute]
internal Dictionary`2<string, string> get_Params();
    [CompilerGeneratedAttribute]
internal void set_Params(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
internal Stream get_ResponseStream();
    [CompilerGeneratedAttribute]
internal void set_ResponseStream(Stream value);
    [CompilerGeneratedAttribute]
internal string get_Endpoint();
    [CompilerGeneratedAttribute]
internal void set_Endpoint(string value);
    protected abstract virtual void ApplyOptions(ConsulClientConfiguration clientConfig);
    protected abstract virtual void ApplyHeaders(HttpRequestMessage message, ConsulClientConfiguration clientConfig);
    protected internal Uri BuildConsulUri(string url, Dictionary`2<string, string> p);
    protected TOut Deserialize(Stream stream);
    protected static Byte[] Serialize(object value);
}
public class Consul.ConsulRequestException : Exception {
    [CompilerGeneratedAttribute]
private HttpStatusCode <StatusCode>k__BackingField;
    public HttpStatusCode StatusCode { get; public set; }
    public ConsulRequestException(string message, HttpStatusCode statusCode);
    public ConsulRequestException(string message, HttpStatusCode statusCode, Exception inner);
    protected ConsulRequestException(SerializationInfo info, StreamingContext context);
    [CompilerGeneratedAttribute]
public HttpStatusCode get_StatusCode();
    [CompilerGeneratedAttribute]
public void set_StatusCode(HttpStatusCode value);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public abstract class Consul.ConsulResult : object {
    [CompilerGeneratedAttribute]
private TimeSpan <RequestTime>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpStatusCode <StatusCode>k__BackingField;
    public TimeSpan RequestTime { get; public set; }
    public HttpStatusCode StatusCode { get; public set; }
    public ConsulResult(ConsulResult other);
    [CompilerGeneratedAttribute]
public TimeSpan get_RequestTime();
    [CompilerGeneratedAttribute]
public void set_RequestTime(TimeSpan value);
    [CompilerGeneratedAttribute]
public HttpStatusCode get_StatusCode();
    [CompilerGeneratedAttribute]
public void set_StatusCode(HttpStatusCode value);
}
public class Consul.ConsumerDefinition : object {
    [CompilerGeneratedAttribute]
private string <Peer>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Partition>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SamenessGroup>k__BackingField;
    [JsonPropertyAttribute]
public string Peer { get; public set; }
    [JsonPropertyAttribute]
public string Partition { get; public set; }
    [JsonPropertyAttribute]
public string SamenessGroup { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Peer();
    [CompilerGeneratedAttribute]
public void set_Peer(string value);
    [CompilerGeneratedAttribute]
public string get_Partition();
    [CompilerGeneratedAttribute]
public void set_Partition(string value);
    [CompilerGeneratedAttribute]
public string get_SamenessGroup();
    [CompilerGeneratedAttribute]
public void set_SamenessGroup(string value);
}
public class Consul.ControlPlaneRequestLimitEntry : object {
    [CompilerGeneratedAttribute]
private string <Kind>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Mode>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <ReadRate>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <WriteRate>k__BackingField;
    [CompilerGeneratedAttribute]
private KVRateLimit <KV>k__BackingField;
    [CompilerGeneratedAttribute]
private ACLRateLimit <ACL>k__BackingField;
    [CompilerGeneratedAttribute]
private CatalogRateLimit <Catalog>k__BackingField;
    [JsonPropertyAttribute]
public string Kind { get; public set; }
    [JsonPropertyAttribute]
public string Name { get; public set; }
    [JsonPropertyAttribute]
public string Mode { get; public set; }
    [JsonPropertyAttribute]
public Nullable`1<int> ReadRate { get; public set; }
    [JsonPropertyAttribute]
public Nullable`1<int> WriteRate { get; public set; }
    [JsonPropertyAttribute]
public KVRateLimit KV { get; public set; }
    [JsonPropertyAttribute]
public ACLRateLimit ACL { get; public set; }
    [JsonPropertyAttribute]
public CatalogRateLimit Catalog { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_Kind();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Kind(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Mode();
    [CompilerGeneratedAttribute]
public void set_Mode(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_ReadRate();
    [CompilerGeneratedAttribute]
public void set_ReadRate(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_WriteRate();
    [CompilerGeneratedAttribute]
public void set_WriteRate(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public KVRateLimit get_KV();
    [CompilerGeneratedAttribute]
public void set_KV(KVRateLimit value);
    [CompilerGeneratedAttribute]
public ACLRateLimit get_ACL();
    [CompilerGeneratedAttribute]
public void set_ACL(ACLRateLimit value);
    [CompilerGeneratedAttribute]
public CatalogRateLimit get_Catalog();
    [CompilerGeneratedAttribute]
public void set_Catalog(CatalogRateLimit value);
}
public class Consul.CookieConfig : object {
    [CompilerGeneratedAttribute]
private bool <Session>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TTL>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SourceIP>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Terminal>k__BackingField;
    [JsonPropertyAttribute]
public bool Session { get; public set; }
    [JsonPropertyAttribute]
public string TTL { get; public set; }
    [JsonPropertyAttribute]
public string Path { get; public set; }
    [JsonPropertyAttribute]
public bool SourceIP { get; public set; }
    [JsonPropertyAttribute]
public bool Terminal { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Session();
    [CompilerGeneratedAttribute]
public void set_Session(bool value);
    [CompilerGeneratedAttribute]
public string get_TTL();
    [CompilerGeneratedAttribute]
public void set_TTL(string value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public bool get_SourceIP();
    [CompilerGeneratedAttribute]
public void set_SourceIP(bool value);
    [CompilerGeneratedAttribute]
public bool get_Terminal();
    [CompilerGeneratedAttribute]
public void set_Terminal(bool value);
}
public class Consul.CookieLocation : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [JsonPropertyAttribute]
public string Name { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
}
public class Consul.Coordinate : object {
    private ConsulClient _client;
    internal Coordinate(ConsulClient c);
    public sealed virtual Task`1<QueryResult`1<CoordinateDatacenterMap[]>> Datacenters(CancellationToken ct);
    public sealed virtual Task`1<QueryResult`1<CoordinateEntry[]>> Nodes(CancellationToken ct);
    public sealed virtual Task`1<QueryResult`1<CoordinateEntry[]>> Nodes(QueryOptions q, CancellationToken ct);
    public sealed virtual Task`1<QueryResult`1<CoordinateEntry[]>> Node(string node, QueryOptions q, CancellationToken ct);
    public sealed virtual Task`1<QueryResult`1<CoordinateEntry[]>> Node(string node, CancellationToken ct);
    public sealed virtual Task`1<WriteResult> Update(CoordinateEntry entry, WriteOptions q, CancellationToken ct);
    public sealed virtual Task`1<WriteResult> Update(CoordinateEntry entry, CancellationToken ct);
}
public class Consul.CoordinateDatacenterMap : object {
    [CompilerGeneratedAttribute]
private string <Datacenter>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<CoordinateEntry> <Coordinates>k__BackingField;
    public string Datacenter { get; public set; }
    public List`1<CoordinateEntry> Coordinates { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Datacenter();
    [CompilerGeneratedAttribute]
public void set_Datacenter(string value);
    [CompilerGeneratedAttribute]
public List`1<CoordinateEntry> get_Coordinates();
    [CompilerGeneratedAttribute]
public void set_Coordinates(List`1<CoordinateEntry> value);
}
public class Consul.CoordinateEntry : object {
    [CompilerGeneratedAttribute]
private string <Node>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Segment>k__BackingField;
    [CompilerGeneratedAttribute]
private SerfCoordinate <Coord>k__BackingField;
    public string Node { get; public set; }
    public string Segment { get; public set; }
    public SerfCoordinate Coord { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Node();
    [CompilerGeneratedAttribute]
public void set_Node(string value);
    [CompilerGeneratedAttribute]
public string get_Segment();
    [CompilerGeneratedAttribute]
public void set_Segment(string value);
    [CompilerGeneratedAttribute]
public SerfCoordinate get_Coord();
    [CompilerGeneratedAttribute]
public void set_Coord(SerfCoordinate value);
}
public class Consul.Counter : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Count>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Sum>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Min>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Max>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Mean>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Stddev>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Labels>k__BackingField;
    public string Name { get; public set; }
    public long Count { get; public set; }
    public double Sum { get; public set; }
    public double Min { get; public set; }
    public double Max { get; public set; }
    public double Mean { get; public set; }
    public double Stddev { get; public set; }
    public Dictionary`2<string, string> Labels { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public long get_Count();
    [CompilerGeneratedAttribute]
public void set_Count(long value);
    [CompilerGeneratedAttribute]
public double get_Sum();
    [CompilerGeneratedAttribute]
public void set_Sum(double value);
    [CompilerGeneratedAttribute]
public double get_Min();
    [CompilerGeneratedAttribute]
public void set_Min(double value);
    [CompilerGeneratedAttribute]
public double get_Max();
    [CompilerGeneratedAttribute]
public void set_Max(double value);
    [CompilerGeneratedAttribute]
public double get_Mean();
    [CompilerGeneratedAttribute]
public void set_Mean(double value);
    [CompilerGeneratedAttribute]
public double get_Stddev();
    [CompilerGeneratedAttribute]
public void set_Stddev(double value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_Labels();
    [CompilerGeneratedAttribute]
public void set_Labels(Dictionary`2<string, string> value);
}
public class Consul.CPUInfo : object {
    [CompilerGeneratedAttribute]
private int <Cpu>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VendorId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Family>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Model>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Stepping>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PhysicalId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CoreId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Cores>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ModelName>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Mhz>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CacheSize>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <Flags>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Microcode>k__BackingField;
    public int Cpu { get; public set; }
    public string VendorId { get; public set; }
    public string Family { get; public set; }
    public string Model { get; public set; }
    public int Stepping { get; public set; }
    public string PhysicalId { get; public set; }
    public string CoreId { get; public set; }
    public int Cores { get; public set; }
    public string ModelName { get; public set; }
    public long Mhz { get; public set; }
    public int CacheSize { get; public set; }
    public List`1<string> Flags { get; public set; }
    public string Microcode { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Cpu();
    [CompilerGeneratedAttribute]
public void set_Cpu(int value);
    [CompilerGeneratedAttribute]
public string get_VendorId();
    [CompilerGeneratedAttribute]
public void set_VendorId(string value);
    [CompilerGeneratedAttribute]
public string get_Family();
    [CompilerGeneratedAttribute]
public void set_Family(string value);
    [CompilerGeneratedAttribute]
public string get_Model();
    [CompilerGeneratedAttribute]
public void set_Model(string value);
    [CompilerGeneratedAttribute]
public int get_Stepping();
    [CompilerGeneratedAttribute]
public void set_Stepping(int value);
    [CompilerGeneratedAttribute]
public string get_PhysicalId();
    [CompilerGeneratedAttribute]
public void set_PhysicalId(string value);
    [CompilerGeneratedAttribute]
public string get_CoreId();
    [CompilerGeneratedAttribute]
public void set_CoreId(string value);
    [CompilerGeneratedAttribute]
public int get_Cores();
    [CompilerGeneratedAttribute]
public void set_Cores(int value);
    [CompilerGeneratedAttribute]
public string get_ModelName();
    [CompilerGeneratedAttribute]
public void set_ModelName(string value);
    [CompilerGeneratedAttribute]
public long get_Mhz();
    [CompilerGeneratedAttribute]
public void set_Mhz(long value);
    [CompilerGeneratedAttribute]
public int get_CacheSize();
    [CompilerGeneratedAttribute]
public void set_CacheSize(int value);
    [CompilerGeneratedAttribute]
public List`1<string> get_Flags();
    [CompilerGeneratedAttribute]
public void set_Flags(List`1<string> value);
    [CompilerGeneratedAttribute]
public string get_Microcode();
    [CompilerGeneratedAttribute]
public void set_Microcode(string value);
}
public class Consul.DefaultsConfig : object {
    [CompilerGeneratedAttribute]
private string <Protocol>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <ConnectTimeoutMs>k__BackingField;
    [CompilerGeneratedAttribute]
private MeshGatewayConfig <MeshGateway>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BalanceOutboundConnections>k__BackingField;
    [CompilerGeneratedAttribute]
private LimitsConfig <Limits>k__BackingField;
    [CompilerGeneratedAttribute]
private PassiveHealthCheckConfig <PassiveHealthCheck>k__BackingField;
    [JsonPropertyAttribute]
public string Protocol { get; public set; }
    [JsonPropertyAttribute]
public Nullable`1<int> ConnectTimeoutMs { get; public set; }
    [JsonPropertyAttribute]
public MeshGatewayConfig MeshGateway { get; public set; }
    [JsonPropertyAttribute]
public string BalanceOutboundConnections { get; public set; }
    [JsonPropertyAttribute]
public LimitsConfig Limits { get; public set; }
    [JsonPropertyAttribute]
public PassiveHealthCheckConfig PassiveHealthCheck { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Protocol();
    [CompilerGeneratedAttribute]
public void set_Protocol(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_ConnectTimeoutMs();
    [CompilerGeneratedAttribute]
public void set_ConnectTimeoutMs(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public MeshGatewayConfig get_MeshGateway();
    [CompilerGeneratedAttribute]
public void set_MeshGateway(MeshGatewayConfig value);
    [CompilerGeneratedAttribute]
public string get_BalanceOutboundConnections();
    [CompilerGeneratedAttribute]
public void set_BalanceOutboundConnections(string value);
    [CompilerGeneratedAttribute]
public LimitsConfig get_Limits();
    [CompilerGeneratedAttribute]
public void set_Limits(LimitsConfig value);
    [CompilerGeneratedAttribute]
public PassiveHealthCheckConfig get_PassiveHealthCheck();
    [CompilerGeneratedAttribute]
public void set_PassiveHealthCheck(PassiveHealthCheckConfig value);
}
public class Consul.DeleteAcceptingRequest`1 : ConsulRequest {
    [CompilerGeneratedAttribute]
private WriteOptions <Options>k__BackingField;
    private TIn _body;
    public WriteOptions Options { get; public set; }
    public DeleteAcceptingRequest`1(ConsulClient client, string url, TIn body, WriteOptions options);
    [CompilerGeneratedAttribute]
public WriteOptions get_Options();
    [CompilerGeneratedAttribute]
public void set_Options(WriteOptions value);
    [AsyncStateMachineAttribute("Consul.DeleteAcceptingRequest`1/<Execute>d__6")]
public Task`1<WriteResult> Execute(CancellationToken ct);
    protected virtual void ApplyOptions(ConsulClientConfiguration clientConfig);
    protected virtual void ApplyHeaders(HttpRequestMessage message, ConsulClientConfiguration clientConfig);
}
public class Consul.DeleteRequest : ConsulRequest {
    [CompilerGeneratedAttribute]
private WriteOptions <Options>k__BackingField;
    public WriteOptions Options { get; public set; }
    public DeleteRequest(ConsulClient client, string url, WriteOptions options);
    [CompilerGeneratedAttribute]
public WriteOptions get_Options();
    [CompilerGeneratedAttribute]
public void set_Options(WriteOptions value);
    [AsyncStateMachineAttribute("Consul.DeleteRequest/<Execute>d__5")]
public Task`1<WriteResult> Execute(CancellationToken ct);
    protected virtual void ApplyOptions(ConsulClientConfiguration clientConfig);
    protected virtual void ApplyHeaders(HttpRequestMessage message, ConsulClientConfiguration clientConfig);
}
public class Consul.DeleteReturnRequest`1 : ConsulRequest {
    [CompilerGeneratedAttribute]
private WriteOptions <Options>k__BackingField;
    public WriteOptions Options { get; public set; }
    public DeleteReturnRequest`1(ConsulClient client, string url, WriteOptions options);
    [CompilerGeneratedAttribute]
public WriteOptions get_Options();
    [CompilerGeneratedAttribute]
public void set_Options(WriteOptions value);
    [AsyncStateMachineAttribute("Consul.DeleteReturnRequest`1/<Execute>d__5")]
public Task`1<WriteResult`1<TOut>> Execute(CancellationToken ct);
    protected virtual void ApplyOptions(ConsulClientConfiguration clientConfig);
    protected virtual void ApplyHeaders(HttpRequestMessage message, ConsulClientConfiguration clientConfig);
}
public class Consul.DestinationConfig : object {
    [CompilerGeneratedAttribute]
private List`1<string> <Addresses>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Port>k__BackingField;
    [JsonPropertyAttribute]
public List`1<string> Addresses { get; public set; }
    [JsonPropertyAttribute]
public Nullable`1<int> Port { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<string> get_Addresses();
    [CompilerGeneratedAttribute]
public void set_Addresses(List`1<string> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Port();
    [CompilerGeneratedAttribute]
public void set_Port(Nullable`1<int> value);
}
public class Consul.DiskInfo : object {
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Fstype>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Total>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Free>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Used>k__BackingField;
    [CompilerGeneratedAttribute]
private double <UsedPercent>k__BackingField;
    [CompilerGeneratedAttribute]
private long <InodesTotal>k__BackingField;
    [CompilerGeneratedAttribute]
private long <InodesUsed>k__BackingField;
    [CompilerGeneratedAttribute]
private long <InodesFree>k__BackingField;
    [CompilerGeneratedAttribute]
private double <InodesUsedPercent>k__BackingField;
    public string Path { get; public set; }
    public string Fstype { get; public set; }
    public long Total { get; public set; }
    public long Free { get; public set; }
    public long Used { get; public set; }
    public double UsedPercent { get; public set; }
    public long InodesTotal { get; public set; }
    public long InodesUsed { get; public set; }
    public long InodesFree { get; public set; }
    public double InodesUsedPercent { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public string get_Fstype();
    [CompilerGeneratedAttribute]
public void set_Fstype(string value);
    [CompilerGeneratedAttribute]
public long get_Total();
    [CompilerGeneratedAttribute]
public void set_Total(long value);
    [CompilerGeneratedAttribute]
public long get_Free();
    [CompilerGeneratedAttribute]
public void set_Free(long value);
    [CompilerGeneratedAttribute]
public long get_Used();
    [CompilerGeneratedAttribute]
public void set_Used(long value);
    [CompilerGeneratedAttribute]
public double get_UsedPercent();
    [CompilerGeneratedAttribute]
public void set_UsedPercent(double value);
    [CompilerGeneratedAttribute]
public long get_InodesTotal();
    [CompilerGeneratedAttribute]
public void set_InodesTotal(long value);
    [CompilerGeneratedAttribute]
public long get_InodesUsed();
    [CompilerGeneratedAttribute]
public void set_InodesUsed(long value);
    [CompilerGeneratedAttribute]
public long get_InodesFree();
    [CompilerGeneratedAttribute]
public void set_InodesFree(long value);
    [CompilerGeneratedAttribute]
public double get_InodesUsedPercent();
    [CompilerGeneratedAttribute]
public void set_InodesUsedPercent(double value);
}
public class Consul.DurationTimespanConverter : JsonConverter {
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual bool CanConvert(Type objectType);
}
public class Consul.EnvoyExtension : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Required>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Arguments>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConsulVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EnvoyVersion>k__BackingField;
    [JsonPropertyAttribute]
public string Name { get; public set; }
    [JsonPropertyAttribute]
public string Required { get; public set; }
    [JsonPropertyAttribute]
public string Arguments { get; public set; }
    [JsonPropertyAttribute]
public string ConsulVersion { get; public set; }
    [JsonPropertyAttribute]
public string EnvoyVersion { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Required();
    [CompilerGeneratedAttribute]
public void set_Required(string value);
    [CompilerGeneratedAttribute]
public string get_Arguments();
    [CompilerGeneratedAttribute]
public void set_Arguments(string value);
    [CompilerGeneratedAttribute]
public string get_ConsulVersion();
    [CompilerGeneratedAttribute]
public void set_ConsulVersion(string value);
    [CompilerGeneratedAttribute]
public string get_EnvoyVersion();
    [CompilerGeneratedAttribute]
public void set_EnvoyVersion(string value);
}
public class Consul.EnvoyExtensionConfig : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Required>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Arguments>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConsulVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EnvoyVersion>k__BackingField;
    [JsonPropertyAttribute]
public string Name { get; public set; }
    [JsonPropertyAttribute]
public bool Required { get; public set; }
    [JsonPropertyAttribute]
public Dictionary`2<string, string> Arguments { get; public set; }
    [JsonPropertyAttribute]
public string ConsulVersion { get; public set; }
    [JsonPropertyAttribute]
public string EnvoyVersion { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public bool get_Required();
    [CompilerGeneratedAttribute]
public void set_Required(bool value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_Arguments();
    [CompilerGeneratedAttribute]
public void set_Arguments(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public string get_ConsulVersion();
    [CompilerGeneratedAttribute]
public void set_ConsulVersion(string value);
    [CompilerGeneratedAttribute]
public string get_EnvoyVersion();
    [CompilerGeneratedAttribute]
public void set_EnvoyVersion(string value);
}
public class Consul.Event : object {
    private ConsulClient _client;
    internal Event(ConsulClient c);
    public sealed virtual Task`1<WriteResult`1<string>> Fire(UserEvent ue, CancellationToken ct);
    [AsyncStateMachineAttribute("Consul.Event/<Fire>d__4")]
public sealed virtual Task`1<WriteResult`1<string>> Fire(UserEvent ue, WriteOptions q, CancellationToken ct);
    public sealed virtual Task`1<QueryResult`1<UserEvent[]>> List(CancellationToken ct);
    public sealed virtual Task`1<QueryResult`1<UserEvent[]>> List(string name, CancellationToken ct);
    public sealed virtual Task`1<QueryResult`1<UserEvent[]>> List(string name, QueryOptions q, CancellationToken ct);
    public sealed virtual ulong IDToIndex(string uuid);
}
public class Consul.ExportedServiceEntry : object {
    [CompilerGeneratedAttribute]
private string <Kind>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Partition>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ServiceDefinition> <Services>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Meta>k__BackingField;
    [JsonPropertyAttribute]
public string Kind { get; public set; }
    [JsonPropertyAttribute]
public string Partition { get; public set; }
    [JsonPropertyAttribute]
public string Name { get; public set; }
    [JsonPropertyAttribute]
public List`1<ServiceDefinition> Services { get; public set; }
    [JsonPropertyAttribute]
public Dictionary`2<string, string> Meta { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_Kind();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Kind(string value);
    [CompilerGeneratedAttribute]
public string get_Partition();
    [CompilerGeneratedAttribute]
public void set_Partition(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public List`1<ServiceDefinition> get_Services();
    [CompilerGeneratedAttribute]
public void set_Services(List`1<ServiceDefinition> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_Meta();
    [CompilerGeneratedAttribute]
public void set_Meta(Dictionary`2<string, string> value);
}
public class Consul.ExposeConfig : object {
    [CompilerGeneratedAttribute]
private bool <Checks>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<PathConfig> <Paths>k__BackingField;
    [JsonPropertyAttribute]
public bool Checks { get; public set; }
    [JsonPropertyAttribute]
public List`1<PathConfig> Paths { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Checks();
    [CompilerGeneratedAttribute]
public void set_Checks(bool value);
    [CompilerGeneratedAttribute]
public List`1<PathConfig> get_Paths();
    [CompilerGeneratedAttribute]
public void set_Paths(List`1<PathConfig> value);
}
[ExtensionAttribute]
internal static class Consul.Extensions : object {
    internal static double Nanosecond;
    internal static double Microsecond;
    internal static double Millisecond;
    internal static double Second;
    internal static double Minute;
    internal static double Hour;
    internal static Dictionary`2<string, double> UnitMap;
    private static Extensions();
    [ExtensionAttribute]
internal static string ToGoDuration(TimeSpan ts);
    internal static TimeSpan FromGoDuration(string value);
}
public class Consul.ExternalService : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Namespace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Partition>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <Hosts>k__BackingField;
    [CompilerGeneratedAttribute]
private HeaderModification <RequestHeaders>k__BackingField;
    [CompilerGeneratedAttribute]
private HeaderModification <ResponseHeaders>k__BackingField;
    [CompilerGeneratedAttribute]
private TLSConfig <TLS>k__BackingField;
    [CompilerGeneratedAttribute]
private GatewayDefaults <Defaults>k__BackingField;
    [JsonPropertyAttribute]
public string Name { get; public set; }
    [JsonPropertyAttribute]
public string Namespace { get; public set; }
    [JsonPropertyAttribute]
public string Partition { get; public set; }
    [JsonPropertyAttribute]
public List`1<string> Hosts { get; public set; }
    [JsonPropertyAttribute]
public HeaderModification RequestHeaders { get; public set; }
    [JsonPropertyAttribute]
public HeaderModification ResponseHeaders { get; public set; }
    [JsonPropertyAttribute]
public TLSConfig TLS { get; public set; }
    [JsonPropertyAttribute]
public GatewayDefaults Defaults { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Namespace();
    [CompilerGeneratedAttribute]
public void set_Namespace(string value);
    [CompilerGeneratedAttribute]
public string get_Partition();
    [CompilerGeneratedAttribute]
public void set_Partition(string value);
    [CompilerGeneratedAttribute]
public List`1<string> get_Hosts();
    [CompilerGeneratedAttribute]
public void set_Hosts(List`1<string> value);
    [CompilerGeneratedAttribute]
public HeaderModification get_RequestHeaders();
    [CompilerGeneratedAttribute]
public void set_RequestHeaders(HeaderModification value);
    [CompilerGeneratedAttribute]
public HeaderModification get_ResponseHeaders();
    [CompilerGeneratedAttribute]
public void set_ResponseHeaders(HeaderModification value);
    [CompilerGeneratedAttribute]
public TLSConfig get_TLS();
    [CompilerGeneratedAttribute]
public void set_TLS(TLSConfig value);
    [CompilerGeneratedAttribute]
public GatewayDefaults get_Defaults();
    [CompilerGeneratedAttribute]
public void set_Defaults(GatewayDefaults value);
}
internal class Consul.Filtering.AndFilter : Filter {
    [CompilerGeneratedAttribute]
private Filter <LeftFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private Filter <RightFilter>k__BackingField;
    public Filter LeftFilter { get; public set; }
    public Filter RightFilter { get; public set; }
    [CompilerGeneratedAttribute]
public Filter get_LeftFilter();
    [CompilerGeneratedAttribute]
public void set_LeftFilter(Filter value);
    [CompilerGeneratedAttribute]
public Filter get_RightFilter();
    [CompilerGeneratedAttribute]
public void set_RightFilter(Filter value);
    public virtual string Encode();
}
internal class Consul.Filtering.ContainsFilter`1 : Filter {
    [CompilerGeneratedAttribute]
private TSelector <Selector>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public TSelector Selector { get; public set; }
    public string Value { get; public set; }
    [CompilerGeneratedAttribute]
public TSelector get_Selector();
    [CompilerGeneratedAttribute]
public void set_Selector(TSelector value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
    public virtual string Encode();
}
internal class Consul.Filtering.EmptyFilter`1 : Filter {
    [CompilerGeneratedAttribute]
private TSelector <Selector>k__BackingField;
    public TSelector Selector { get; public set; }
    [CompilerGeneratedAttribute]
public TSelector get_Selector();
    [CompilerGeneratedAttribute]
public void set_Selector(TSelector value);
    public virtual string Encode();
}
internal class Consul.Filtering.EqualsFilter`1 : Filter {
    [CompilerGeneratedAttribute]
private TSelector <Selector>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public TSelector Selector { get; public set; }
    public string Value { get; public set; }
    [CompilerGeneratedAttribute]
public TSelector get_Selector();
    [CompilerGeneratedAttribute]
public void set_Selector(TSelector value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
    public virtual string Encode();
}
public abstract class Consul.Filtering.Filter : object {
    public abstract virtual string Encode();
    public static Filter op_BitwiseAnd(Filter left, Filter right);
    public static Filter op_BitwiseOr(Filter left, Filter right);
    public static Filter op_LogicalNot(Filter filter);
    protected static string Quote(string s);
}
public static class Consul.Filtering.Filters : object {
    internal static Filter And(Filter left, Filter right);
    internal static Filter Or(Filter left, Filter right);
    internal static Filter Not(Filter filter);
    internal static Filter Empty(TSelector selector);
    internal static Filter Contains(TSelector selector, string value);
    internal static Filter Eq(TSelector selector, string value);
    internal static Filter NotEq(TSelector selector, string value);
}
internal interface Consul.Filtering.IContainsApplicableConstraint {
}
internal interface Consul.Filtering.IEmptyApplicableConstraint {
}
public interface Consul.Filtering.IEncodable {
    public abstract virtual string Encode();
}
internal interface Consul.Filtering.IEqualsApplicableConstraint {
}
[DefaultMemberAttribute("Item")]
public class Consul.Filtering.MetaSelector : Selector {
    private static string Self;
    [CompilerGeneratedAttribute]
private string <Prefix>k__BackingField;
    public string Prefix { get; }
    public ServiceMetaEntrySelector Item { get; }
    public MetaSelector(string prefix);
    private static MetaSelector();
    [CompilerGeneratedAttribute]
public string get_Prefix();
    public virtual string Encode();
    public ServiceMetaEntrySelector get_Item(string name);
    public Filter IsEmpty();
}
public class Consul.Filtering.NodeSelector : Selector {
    private static string Self;
    [CompilerGeneratedAttribute]
private StringFieldSelector <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private StringFieldSelector <Node>k__BackingField;
    [CompilerGeneratedAttribute]
private MetaSelector <Meta>k__BackingField;
    public StringFieldSelector Id { get; }
    public StringFieldSelector Node { get; }
    public MetaSelector Meta { get; }
    private static NodeSelector();
    [CompilerGeneratedAttribute]
public StringFieldSelector get_Id();
    [CompilerGeneratedAttribute]
public StringFieldSelector get_Node();
    [CompilerGeneratedAttribute]
public MetaSelector get_Meta();
    public virtual string Encode();
}
internal class Consul.Filtering.NotEqualsFilter`1 : Filter {
    [CompilerGeneratedAttribute]
private TSelector <Selector>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public TSelector Selector { get; public set; }
    public string Value { get; public set; }
    [CompilerGeneratedAttribute]
public TSelector get_Selector();
    [CompilerGeneratedAttribute]
public void set_Selector(TSelector value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
    public virtual string Encode();
}
internal class Consul.Filtering.NotFilter : Filter {
    [CompilerGeneratedAttribute]
private Filter <Filter>k__BackingField;
    public Filter Filter { get; public set; }
    [CompilerGeneratedAttribute]
public Filter get_Filter();
    [CompilerGeneratedAttribute]
public void set_Filter(Filter value);
    public virtual string Encode();
}
internal class Consul.Filtering.OrFilter : Filter {
    [CompilerGeneratedAttribute]
private Filter <LeftFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private Filter <RightFilter>k__BackingField;
    public Filter LeftFilter { get; public set; }
    public Filter RightFilter { get; public set; }
    [CompilerGeneratedAttribute]
public Filter get_LeftFilter();
    [CompilerGeneratedAttribute]
public void set_LeftFilter(Filter value);
    [CompilerGeneratedAttribute]
public Filter get_RightFilter();
    [CompilerGeneratedAttribute]
public void set_RightFilter(Filter value);
    public virtual string Encode();
}
public abstract class Consul.Filtering.Selector : object {
    public abstract virtual string Encode();
    protected static string Combine(string prefix, string self);
}
public static class Consul.Filtering.Selectors : object {
    [CompilerGeneratedAttribute]
private static ServiceSelector <Service>k__BackingField;
    [CompilerGeneratedAttribute]
private static StringFieldSelector <ServiceName>k__BackingField;
    public static ServiceSelector Service { get; }
    public static StringFieldSelector ServiceName { get; }
    private static Selectors();
    [CompilerGeneratedAttribute]
public static ServiceSelector get_Service();
    [CompilerGeneratedAttribute]
public static StringFieldSelector get_ServiceName();
}
public class Consul.Filtering.ServiceMetaEntrySelector : Selector {
    [CompilerGeneratedAttribute]
private string <Prefix>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Prefix { get; }
    public string Name { get; }
    public ServiceMetaEntrySelector(string prefix, string name);
    [CompilerGeneratedAttribute]
public string get_Prefix();
    [CompilerGeneratedAttribute]
public string get_Name();
    public virtual string Encode();
    public Filter Contains(string value);
    public static Filter op_Equality(ServiceMetaEntrySelector selector, string value);
    public static Filter op_Inequality(ServiceMetaEntrySelector selector, string value);
}
public class Consul.Filtering.ServiceSelector : Selector {
    private static string Self;
    [CompilerGeneratedAttribute]
private StringFieldSelector <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private TagsSelector <Tags>k__BackingField;
    [CompilerGeneratedAttribute]
private MetaSelector <Meta>k__BackingField;
    public StringFieldSelector Id { get; }
    public TagsSelector Tags { get; }
    public MetaSelector Meta { get; }
    private static ServiceSelector();
    [CompilerGeneratedAttribute]
public StringFieldSelector get_Id();
    [CompilerGeneratedAttribute]
public TagsSelector get_Tags();
    [CompilerGeneratedAttribute]
public MetaSelector get_Meta();
    public virtual string Encode();
    public static Filter op_Equality(ServiceSelector selector, string value);
    public static Filter op_Inequality(ServiceSelector selector, string value);
}
public class Consul.Filtering.StringFieldSelector : Selector {
    [CompilerGeneratedAttribute]
private string <Prefix>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Prefix { get; }
    public string Name { get; }
    public StringFieldSelector(string name);
    public StringFieldSelector(string prefix, string name);
    [CompilerGeneratedAttribute]
public string get_Prefix();
    [CompilerGeneratedAttribute]
public string get_Name();
    public virtual string Encode();
    public Filter IsEmpty();
    public Filter Contains(string value);
    public static Filter op_Equality(StringFieldSelector selector, string value);
    public static Filter op_Inequality(StringFieldSelector selector, string value);
}
public class Consul.Filtering.TagsSelector : Selector {
    private static string Self;
    [CompilerGeneratedAttribute]
private string <Prefix>k__BackingField;
    public string Prefix { get; }
    public TagsSelector(string prefix);
    private static TagsSelector();
    [CompilerGeneratedAttribute]
public string get_Prefix();
    public virtual string Encode();
    public Filter IsEmpty();
    public Filter Contains(string value);
}
public class Consul.Flags : object {
    [CompilerGeneratedAttribute]
private string <Package>k__BackingField;
    public string Package { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Package();
    [CompilerGeneratedAttribute]
public void set_Package(string value);
}
public class Consul.ForwardingConfig : object {
    [CompilerGeneratedAttribute]
private string <HeaderName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PadForwardPayloadHeader>k__BackingField;
    [JsonPropertyAttribute]
public string HeaderName { get; public set; }
    [JsonPropertyAttribute]
public bool PadForwardPayloadHeader { get; public set; }
    [CompilerGeneratedAttribute]
public string get_HeaderName();
    [CompilerGeneratedAttribute]
public void set_HeaderName(string value);
    [CompilerGeneratedAttribute]
public bool get_PadForwardPayloadHeader();
    [CompilerGeneratedAttribute]
public void set_PadForwardPayloadHeader(bool value);
}
public class Consul.GatewayDefaults : object {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxConnections>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxPendingRequests>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxConcurrentRequests>k__BackingField;
    [CompilerGeneratedAttribute]
private PassiveHealthCheckConfig <PassiveHealthCheck>k__BackingField;
    [JsonPropertyAttribute]
public Nullable`1<int> MaxConnections { get; public set; }
    [JsonPropertyAttribute]
public Nullable`1<int> MaxPendingRequests { get; public set; }
    [JsonPropertyAttribute]
public Nullable`1<int> MaxConcurrentRequests { get; public set; }
    [JsonPropertyAttribute]
public PassiveHealthCheckConfig PassiveHealthCheck { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaxConnections();
    [CompilerGeneratedAttribute]
public void set_MaxConnections(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaxPendingRequests();
    [CompilerGeneratedAttribute]
public void set_MaxPendingRequests(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaxConcurrentRequests();
    [CompilerGeneratedAttribute]
public void set_MaxConcurrentRequests(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public PassiveHealthCheckConfig get_PassiveHealthCheck();
    [CompilerGeneratedAttribute]
public void set_PassiveHealthCheck(PassiveHealthCheckConfig value);
}
public class Consul.GatewayListener : object {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Port>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Protocol>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ExternalService> <Services>k__BackingField;
    [CompilerGeneratedAttribute]
private TLSConfig <TLS>k__BackingField;
    [JsonPropertyAttribute]
public Nullable`1<int> Port { get; public set; }
    [JsonPropertyAttribute]
public string Protocol { get; public set; }
    [JsonPropertyAttribute]
public List`1<ExternalService> Services { get; public set; }
    [JsonPropertyAttribute]
public TLSConfig TLS { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Port();
    [CompilerGeneratedAttribute]
public void set_Port(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_Protocol();
    [CompilerGeneratedAttribute]
public void set_Protocol(string value);
    [CompilerGeneratedAttribute]
public List`1<ExternalService> get_Services();
    [CompilerGeneratedAttribute]
public void set_Services(List`1<ExternalService> value);
    [CompilerGeneratedAttribute]
public TLSConfig get_TLS();
    [CompilerGeneratedAttribute]
public void set_TLS(TLSConfig value);
}
public class Consul.GatewayService : object {
    [CompilerGeneratedAttribute]
private CompoundServiceName <Gateway>k__BackingField;
    [CompilerGeneratedAttribute]
private CompoundServiceName <Service>k__BackingField;
    [CompilerGeneratedAttribute]
private ServiceKind <GatewayKind>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Port>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Protocol>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <Hosts>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CAFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CertFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <KeyFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SNI>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FromWildcard>k__BackingField;
    public CompoundServiceName Gateway { get; public set; }
    public CompoundServiceName Service { get; public set; }
    public ServiceKind GatewayKind { get; public set; }
    public int Port { get; public set; }
    public string Protocol { get; public set; }
    public List`1<string> Hosts { get; public set; }
    public string CAFile { get; public set; }
    public string CertFile { get; public set; }
    public string KeyFile { get; public set; }
    public string SNI { get; public set; }
    public bool FromWildcard { get; public set; }
    [CompilerGeneratedAttribute]
public CompoundServiceName get_Gateway();
    [CompilerGeneratedAttribute]
public void set_Gateway(CompoundServiceName value);
    [CompilerGeneratedAttribute]
public CompoundServiceName get_Service();
    [CompilerGeneratedAttribute]
public void set_Service(CompoundServiceName value);
    [CompilerGeneratedAttribute]
public ServiceKind get_GatewayKind();
    [CompilerGeneratedAttribute]
public void set_GatewayKind(ServiceKind value);
    [CompilerGeneratedAttribute]
public int get_Port();
    [CompilerGeneratedAttribute]
public void set_Port(int value);
    [CompilerGeneratedAttribute]
public string get_Protocol();
    [CompilerGeneratedAttribute]
public void set_Protocol(string value);
    [CompilerGeneratedAttribute]
public List`1<string> get_Hosts();
    [CompilerGeneratedAttribute]
public void set_Hosts(List`1<string> value);
    [CompilerGeneratedAttribute]
public string get_CAFile();
    [CompilerGeneratedAttribute]
public void set_CAFile(string value);
    [CompilerGeneratedAttribute]
public string get_CertFile();
    [CompilerGeneratedAttribute]
public void set_CertFile(string value);
    [CompilerGeneratedAttribute]
public string get_KeyFile();
    [CompilerGeneratedAttribute]
public void set_KeyFile(string value);
    [CompilerGeneratedAttribute]
public string get_SNI();
    [CompilerGeneratedAttribute]
public void set_SNI(string value);
    [CompilerGeneratedAttribute]
public bool get_FromWildcard();
    [CompilerGeneratedAttribute]
public void set_FromWildcard(bool value);
}
public class Consul.Gauge : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Labels>k__BackingField;
    public string Name { get; public set; }
    public double Value { get; public set; }
    public Dictionary`2<string, string> Labels { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public double get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(double value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_Labels();
    [CompilerGeneratedAttribute]
public void set_Labels(Dictionary`2<string, string> value);
}
public class Consul.GetRequest : ConsulRequest {
    [CompilerGeneratedAttribute]
private QueryOptions <Options>k__BackingField;
    public QueryOptions Options { get; public set; }
    public GetRequest(ConsulClient client, string url, QueryOptions options);
    [CompilerGeneratedAttribute]
public QueryOptions get_Options();
    [CompilerGeneratedAttribute]
public void set_Options(QueryOptions value);
    [AsyncStateMachineAttribute("Consul.GetRequest/<Execute>d__5")]
public Task`1<QueryResult`1<string>> Execute(CancellationToken ct);
    protected virtual void ApplyOptions(ConsulClientConfiguration clientConfig);
    protected virtual void ApplyHeaders(HttpRequestMessage message, ConsulClientConfiguration clientConfig);
}
public class Consul.GetRequest`1 : ConsulRequest {
    [CompilerGeneratedAttribute]
private QueryOptions <Options>k__BackingField;
    [CompilerGeneratedAttribute]
private IEncodable <Filter>k__BackingField;
    public QueryOptions Options { get; public set; }
    public IEncodable Filter { get; }
    public GetRequest`1(ConsulClient client, string url);
    public GetRequest`1(ConsulClient client, string url, QueryOptions options);
    public GetRequest`1(ConsulClient client, string url, QueryOptions options, IEncodable filter);
    [CompilerGeneratedAttribute]
public QueryOptions get_Options();
    [CompilerGeneratedAttribute]
public void set_Options(QueryOptions value);
    [CompilerGeneratedAttribute]
public IEncodable get_Filter();
    [AsyncStateMachineAttribute("Consul.GetRequest`1/<Execute>d__10")]
public Task`1<QueryResult`1<TOut>> Execute(CancellationToken ct);
    [AsyncStateMachineAttribute("Consul.GetRequest`1/<ExecuteStreaming>d__11")]
public Task`1<QueryResult`1<Stream>> ExecuteStreaming(CancellationToken ct);
    protected virtual void ApplyOptions(ConsulClientConfiguration clientConfig);
    protected void ParseQueryHeaders(HttpResponseMessage res, QueryResult`1<TOut> meta);
    protected virtual void ApplyHeaders(HttpRequestMessage message, ConsulClientConfiguration clientConfig);
}
public class Consul.Header : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Present>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Exact>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Prefix>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Suffix>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Regex>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Invert>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Precedence>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LegacyID>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <LegacyMeta>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LegacyCreateTime>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LegacyUpdateTime>k__BackingField;
    [JsonPropertyAttribute]
public string Name { get; public set; }
    [JsonPropertyAttribute]
public bool Present { get; public set; }
    [JsonPropertyAttribute]
public string Exact { get; public set; }
    [JsonPropertyAttribute]
public string Prefix { get; public set; }
    [JsonPropertyAttribute]
public string Suffix { get; public set; }
    [JsonPropertyAttribute]
public string Regex { get; public set; }
    [JsonPropertyAttribute]
public bool Invert { get; public set; }
    [JsonPropertyAttribute]
public Nullable`1<int> Precedence { get; public set; }
    [JsonPropertyAttribute]
public string Type { get; public set; }
    [JsonPropertyAttribute]
public string Description { get; public set; }
    [JsonPropertyAttribute]
public string LegacyID { get; public set; }
    [JsonPropertyAttribute]
public Dictionary`2<string, string> LegacyMeta { get; public set; }
    [JsonPropertyAttribute]
public string LegacyCreateTime { get; public set; }
    [JsonPropertyAttribute]
public string LegacyUpdateTime { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public bool get_Present();
    [CompilerGeneratedAttribute]
public void set_Present(bool value);
    [CompilerGeneratedAttribute]
public string get_Exact();
    [CompilerGeneratedAttribute]
public void set_Exact(string value);
    [CompilerGeneratedAttribute]
public string get_Prefix();
    [CompilerGeneratedAttribute]
public void set_Prefix(string value);
    [CompilerGeneratedAttribute]
public string get_Suffix();
    [CompilerGeneratedAttribute]
public void set_Suffix(string value);
    [CompilerGeneratedAttribute]
public string get_Regex();
    [CompilerGeneratedAttribute]
public void set_Regex(string value);
    [CompilerGeneratedAttribute]
public bool get_Invert();
    [CompilerGeneratedAttribute]
public void set_Invert(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Precedence();
    [CompilerGeneratedAttribute]
public void set_Precedence(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public string get_LegacyID();
    [CompilerGeneratedAttribute]
public void set_LegacyID(string value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_LegacyMeta();
    [CompilerGeneratedAttribute]
public void set_LegacyMeta(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public string get_LegacyCreateTime();
    [CompilerGeneratedAttribute]
public void set_LegacyCreateTime(string value);
    [CompilerGeneratedAttribute]
public string get_LegacyUpdateTime();
    [CompilerGeneratedAttribute]
public void set_LegacyUpdateTime(string value);
}
public class Consul.HeaderConfig : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Present>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Exact>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Prefix>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Suffix>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Regex>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Invert>k__BackingField;
    [JsonPropertyAttribute]
public string Name { get; public set; }
    [JsonPropertyAttribute]
public bool Present { get; public set; }
    [JsonPropertyAttribute]
public string Exact { get; public set; }
    [JsonPropertyAttribute]
public string Prefix { get; public set; }
    [JsonPropertyAttribute]
public string Suffix { get; public set; }
    [JsonPropertyAttribute]
public string Regex { get; public set; }
    [JsonPropertyAttribute]
public bool Invert { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public bool get_Present();
    [CompilerGeneratedAttribute]
public void set_Present(bool value);
    [CompilerGeneratedAttribute]
public string get_Exact();
    [CompilerGeneratedAttribute]
public void set_Exact(string value);
    [CompilerGeneratedAttribute]
public string get_Prefix();
    [CompilerGeneratedAttribute]
public void set_Prefix(string value);
    [CompilerGeneratedAttribute]
public string get_Suffix();
    [CompilerGeneratedAttribute]
public void set_Suffix(string value);
    [CompilerGeneratedAttribute]
public string get_Regex();
    [CompilerGeneratedAttribute]
public void set_Regex(string value);
    [CompilerGeneratedAttribute]
public bool get_Invert();
    [CompilerGeneratedAttribute]
public void set_Invert(bool value);
}
public class Consul.HeaderKeyValuePair : object {
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [JsonPropertyAttribute]
public string Key { get; public set; }
    [JsonPropertyAttribute]
public string Value { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
public void set_Key(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
}
public class Consul.HeaderLocation : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ValuePrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Forward>k__BackingField;
    [JsonPropertyAttribute]
public string Name { get; public set; }
    [JsonPropertyAttribute]
public string ValuePrefix { get; public set; }
    [JsonPropertyAttribute]
public bool Forward { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_ValuePrefix();
    [CompilerGeneratedAttribute]
public void set_ValuePrefix(string value);
    [CompilerGeneratedAttribute]
public bool get_Forward();
    [CompilerGeneratedAttribute]
public void set_Forward(bool value);
}
public class Consul.HeaderModification : object {
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Add>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Set>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <Remove>k__BackingField;
    [JsonPropertyAttribute("Add")]
public Dictionary`2<string, string> Add { get; public set; }
    [JsonPropertyAttribute("Set")]
public Dictionary`2<string, string> Set { get; public set; }
    [JsonPropertyAttribute("Remove")]
public List`1<string> Remove { get; public set; }
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_Add();
    [CompilerGeneratedAttribute]
public void set_Add(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_Set();
    [CompilerGeneratedAttribute]
public void set_Set(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_Remove();
    [CompilerGeneratedAttribute]
public void set_Remove(List`1<string> value);
}
public class Consul.Health : object {
    private ConsulClient _client;
    internal Health(ConsulClient c);
    public sealed virtual Task`1<QueryResult`1<HealthCheck[]>> Checks(string service, CancellationToken ct);
    public sealed virtual Task`1<QueryResult`1<HealthCheck[]>> Checks(string service, QueryOptions q, CancellationToken ct);
    public sealed virtual Task`1<QueryResult`1<HealthCheck[]>> Node(string node, CancellationToken ct);
    public sealed virtual Task`1<QueryResult`1<HealthCheck[]>> Node(string node, QueryOptions q, CancellationToken ct);
    public sealed virtual Task`1<QueryResult`1<ServiceEntry[]>> Service(string service, CancellationToken ct);
    public sealed virtual Task`1<QueryResult`1<ServiceEntry[]>> Service(string service, string tag, CancellationToken ct);
    public sealed virtual Task`1<QueryResult`1<ServiceEntry[]>> Service(string service, string tag, bool passingOnly, CancellationToken ct);
    public sealed virtual Task`1<QueryResult`1<ServiceEntry[]>> Service(string service, string tag, bool passingOnly, QueryOptions q, CancellationToken ct);
    public sealed virtual Task`1<QueryResult`1<ServiceEntry[]>> Service(string service, string tag, bool passingOnly, QueryOptions q, Filter filter, CancellationToken ct);
    public sealed virtual Task`1<QueryResult`1<ServiceEntry[]>> Connect(string service, string tag, bool passingOnly, QueryOptions q, Filter filter, CancellationToken ct);
    public sealed virtual Task`1<QueryResult`1<ServiceEntry[]>> Connect(string service, string tag, bool passingOnly, QueryOptions q, CancellationToken ct);
    public sealed virtual Task`1<QueryResult`1<HealthCheck[]>> State(HealthStatus status, CancellationToken ct);
    public sealed virtual Task`1<QueryResult`1<HealthCheck[]>> State(HealthStatus status, QueryOptions q, CancellationToken ct);
}
public class Consul.HealthCheck : object {
    [CompilerGeneratedAttribute]
private string <Node>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CheckID>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private HealthStatus <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Notes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Output>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServiceID>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServiceName>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <ServiceTags>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    public string Node { get; public set; }
    public string CheckID { get; public set; }
    public string Name { get; public set; }
    [JsonConverterAttribute("Consul.HealthStatusConverter")]
public HealthStatus Status { get; public set; }
    public string Notes { get; public set; }
    public string Output { get; public set; }
    public string ServiceID { get; public set; }
    public string ServiceName { get; public set; }
    public String[] ServiceTags { get; public set; }
    public string Type { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Node();
    [CompilerGeneratedAttribute]
public void set_Node(string value);
    [CompilerGeneratedAttribute]
public string get_CheckID();
    [CompilerGeneratedAttribute]
public void set_CheckID(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public HealthStatus get_Status();
    [CompilerGeneratedAttribute]
public void set_Status(HealthStatus value);
    [CompilerGeneratedAttribute]
public string get_Notes();
    [CompilerGeneratedAttribute]
public void set_Notes(string value);
    [CompilerGeneratedAttribute]
public string get_Output();
    [CompilerGeneratedAttribute]
public void set_Output(string value);
    [CompilerGeneratedAttribute]
public string get_ServiceID();
    [CompilerGeneratedAttribute]
public void set_ServiceID(string value);
    [CompilerGeneratedAttribute]
public string get_ServiceName();
    [CompilerGeneratedAttribute]
public void set_ServiceName(string value);
    [CompilerGeneratedAttribute]
public String[] get_ServiceTags();
    [CompilerGeneratedAttribute]
public void set_ServiceTags(String[] value);
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(string value);
}
[ExtensionAttribute]
public static class Consul.HealthCheckExtension : object {
    [ExtensionAttribute]
public static HealthStatus AggregatedStatus(IEnumerable`1<HealthCheck> checks);
}
public class Consul.HealthStatus : object {
    public static string NodeMaintenance;
    public static string ServiceMaintenancePrefix;
    [CompilerGeneratedAttribute]
private string <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private static HealthStatus <Passing>k__BackingField;
    [CompilerGeneratedAttribute]
private static HealthStatus <Warning>k__BackingField;
    [CompilerGeneratedAttribute]
private static HealthStatus <Critical>k__BackingField;
    [CompilerGeneratedAttribute]
private static HealthStatus <Maintenance>k__BackingField;
    [CompilerGeneratedAttribute]
private static HealthStatus <Any>k__BackingField;
    public string Status { get; private set; }
    public static HealthStatus Passing { get; }
    public static HealthStatus Warning { get; }
    public static HealthStatus Critical { get; }
    public static HealthStatus Maintenance { get; }
    public static HealthStatus Any { get; }
    private static HealthStatus();
    [CompilerGeneratedAttribute]
public string get_Status();
    [CompilerGeneratedAttribute]
private void set_Status(string value);
    [CompilerGeneratedAttribute]
public static HealthStatus get_Passing();
    [CompilerGeneratedAttribute]
public static HealthStatus get_Warning();
    [CompilerGeneratedAttribute]
public static HealthStatus get_Critical();
    [CompilerGeneratedAttribute]
public static HealthStatus get_Maintenance();
    [CompilerGeneratedAttribute]
public static HealthStatus get_Any();
    public static HealthStatus Parse(string status);
    public sealed virtual bool Equals(HealthStatus other);
    public virtual bool Equals(object other);
    public virtual int GetHashCode();
}
public class Consul.HealthStatusConverter : JsonConverter {
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual bool CanConvert(Type objectType);
}
public class Consul.HostInfo : object {
    [CompilerGeneratedAttribute]
private string <Hostname>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Uptime>k__BackingField;
    [CompilerGeneratedAttribute]
private long <BootTime>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Procs>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Os>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Platform>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PlatformFamily>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PlatformVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <KernelVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <KernelArch>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VirtualizationSystem>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VirtualizationRole>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HostId>k__BackingField;
    public string Hostname { get; public set; }
    public long Uptime { get; public set; }
    public long BootTime { get; public set; }
    public int Procs { get; public set; }
    public string Os { get; public set; }
    public string Platform { get; public set; }
    public string PlatformFamily { get; public set; }
    public string PlatformVersion { get; public set; }
    public string KernelVersion { get; public set; }
    public string KernelArch { get; public set; }
    public string VirtualizationSystem { get; public set; }
    public string VirtualizationRole { get; public set; }
    public string HostId { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Hostname();
    [CompilerGeneratedAttribute]
public void set_Hostname(string value);
    [CompilerGeneratedAttribute]
public long get_Uptime();
    [CompilerGeneratedAttribute]
public void set_Uptime(long value);
    [CompilerGeneratedAttribute]
public long get_BootTime();
    [CompilerGeneratedAttribute]
public void set_BootTime(long value);
    [CompilerGeneratedAttribute]
public int get_Procs();
    [CompilerGeneratedAttribute]
public void set_Procs(int value);
    [CompilerGeneratedAttribute]
public string get_Os();
    [CompilerGeneratedAttribute]
public void set_Os(string value);
    [CompilerGeneratedAttribute]
public string get_Platform();
    [CompilerGeneratedAttribute]
public void set_Platform(string value);
    [CompilerGeneratedAttribute]
public string get_PlatformFamily();
    [CompilerGeneratedAttribute]
public void set_PlatformFamily(string value);
    [CompilerGeneratedAttribute]
public string get_PlatformVersion();
    [CompilerGeneratedAttribute]
public void set_PlatformVersion(string value);
    [CompilerGeneratedAttribute]
public string get_KernelVersion();
    [CompilerGeneratedAttribute]
public void set_KernelVersion(string value);
    [CompilerGeneratedAttribute]
public string get_KernelArch();
    [CompilerGeneratedAttribute]
public void set_KernelArch(string value);
    [CompilerGeneratedAttribute]
public string get_VirtualizationSystem();
    [CompilerGeneratedAttribute]
public void set_VirtualizationSystem(string value);
    [CompilerGeneratedAttribute]
public string get_VirtualizationRole();
    [CompilerGeneratedAttribute]
public void set_VirtualizationRole(string value);
    [CompilerGeneratedAttribute]
public string get_HostId();
    [CompilerGeneratedAttribute]
public void set_HostId(string value);
}
public class Consul.HTTPConfig : object {
    [CompilerGeneratedAttribute]
private string <PrefixRewrite>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <RequestTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <IdleTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <NumRetries>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RetryOnConnectFailure>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <RetryOn>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Nullable`1<int>> <RetryOnStatusCodes>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <RequestHeaders>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <ResponseHeaders>k__BackingField;
    [JsonPropertyAttribute]
public string PrefixRewrite { get; public set; }
    [JsonPropertyAttribute]
public Nullable`1<int> RequestTimeout { get; public set; }
    [JsonPropertyAttribute]
public Nullable`1<int> IdleTimeout { get; public set; }
    [JsonPropertyAttribute]
public Nullable`1<int> NumRetries { get; public set; }
    [JsonPropertyAttribute]
public bool RetryOnConnectFailure { get; public set; }
    [JsonPropertyAttribute]
public List`1<string> RetryOn { get; public set; }
    [JsonPropertyAttribute]
public List`1<Nullable`1<int>> RetryOnStatusCodes { get; public set; }
    [JsonPropertyAttribute]
public Dictionary`2<string, string> RequestHeaders { get; public set; }
    [JsonPropertyAttribute]
public Dictionary`2<string, string> ResponseHeaders { get; public set; }
    [CompilerGeneratedAttribute]
public string get_PrefixRewrite();
    [CompilerGeneratedAttribute]
public void set_PrefixRewrite(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_RequestTimeout();
    [CompilerGeneratedAttribute]
public void set_RequestTimeout(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_IdleTimeout();
    [CompilerGeneratedAttribute]
public void set_IdleTimeout(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_NumRetries();
    [CompilerGeneratedAttribute]
public void set_NumRetries(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public bool get_RetryOnConnectFailure();
    [CompilerGeneratedAttribute]
public void set_RetryOnConnectFailure(bool value);
    [CompilerGeneratedAttribute]
public List`1<string> get_RetryOn();
    [CompilerGeneratedAttribute]
public void set_RetryOn(List`1<string> value);
    [CompilerGeneratedAttribute]
public List`1<Nullable`1<int>> get_RetryOnStatusCodes();
    [CompilerGeneratedAttribute]
public void set_RetryOnStatusCodes(List`1<Nullable`1<int>> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_RequestHeaders();
    [CompilerGeneratedAttribute]
public void set_RequestHeaders(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_ResponseHeaders();
    [CompilerGeneratedAttribute]
public void set_ResponseHeaders(Dictionary`2<string, string> value);
}
public class Consul.HttpHeaderMatch : object {
    [CompilerGeneratedAttribute]
private string <Match>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [JsonPropertyAttribute]
public string Match { get; public set; }
    [JsonPropertyAttribute]
public string Name { get; public set; }
    [JsonPropertyAttribute]
public string Value { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Match();
    [CompilerGeneratedAttribute]
public void set_Match(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
}
public class Consul.HttpHeaderOperation : object {
    [CompilerGeneratedAttribute]
private List`1<HeaderKeyValuePair> <Add>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <Remove>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<HeaderKeyValuePair> <Set>k__BackingField;
    [JsonPropertyAttribute]
public List`1<HeaderKeyValuePair> Add { get; public set; }
    [JsonPropertyAttribute]
public List`1<string> Remove { get; public set; }
    [JsonPropertyAttribute]
public List`1<HeaderKeyValuePair> Set { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<HeaderKeyValuePair> get_Add();
    [CompilerGeneratedAttribute]
public void set_Add(List`1<HeaderKeyValuePair> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_Remove();
    [CompilerGeneratedAttribute]
public void set_Remove(List`1<string> value);
    [CompilerGeneratedAttribute]
public List`1<HeaderKeyValuePair> get_Set();
    [CompilerGeneratedAttribute]
public void set_Set(List`1<HeaderKeyValuePair> value);
}
public class Consul.HttpPathMatch : object {
    [CompilerGeneratedAttribute]
private string <Match>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [JsonPropertyAttribute]
public string Match { get; public set; }
    [JsonPropertyAttribute]
public string Value { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Match();
    [CompilerGeneratedAttribute]
public void set_Match(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
}
public class Consul.HttpQueryMatch : object {
    [CompilerGeneratedAttribute]
private string <Match>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [JsonPropertyAttribute]
public string Match { get; public set; }
    [JsonPropertyAttribute]
public string Name { get; public set; }
    [JsonPropertyAttribute]
public string Value { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Match();
    [CompilerGeneratedAttribute]
public void set_Match(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
}
public class Consul.HttpRouteEntry : object {
    [CompilerGeneratedAttribute]
private string <Kind>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Namespace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Partition>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Meta>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <Hostnames>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ApiGatewayReference> <Parents>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<HttpRouteRule> <Rules>k__BackingField;
    [JsonPropertyAttribute]
public string Kind { get; public set; }
    [JsonPropertyAttribute]
public string Name { get; public set; }
    [JsonPropertyAttribute]
public string Namespace { get; public set; }
    [JsonPropertyAttribute]
public string Partition { get; public set; }
    [JsonPropertyAttribute]
public Dictionary`2<string, string> Meta { get; public set; }
    [JsonPropertyAttribute]
public List`1<string> Hostnames { get; public set; }
    [JsonPropertyAttribute]
public List`1<ApiGatewayReference> Parents { get; public set; }
    [JsonPropertyAttribute]
public List`1<HttpRouteRule> Rules { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_Kind();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Kind(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Namespace();
    [CompilerGeneratedAttribute]
public void set_Namespace(string value);
    [CompilerGeneratedAttribute]
public string get_Partition();
    [CompilerGeneratedAttribute]
public void set_Partition(string value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_Meta();
    [CompilerGeneratedAttribute]
public void set_Meta(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_Hostnames();
    [CompilerGeneratedAttribute]
public void set_Hostnames(List`1<string> value);
    [CompilerGeneratedAttribute]
public List`1<ApiGatewayReference> get_Parents();
    [CompilerGeneratedAttribute]
public void set_Parents(List`1<ApiGatewayReference> value);
    [CompilerGeneratedAttribute]
public List`1<HttpRouteRule> get_Rules();
    [CompilerGeneratedAttribute]
public void set_Rules(List`1<HttpRouteRule> value);
}
public class Consul.HttpRouteFilter : object {
    [CompilerGeneratedAttribute]
private List`1<HttpHeaderOperation> <Headers>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<HttpURLRewriteOperation> <URLRewrite>k__BackingField;
    [CompilerGeneratedAttribute]
private JWTSettings <JWT>k__BackingField;
    [JsonPropertyAttribute]
public List`1<HttpHeaderOperation> Headers { get; public set; }
    [JsonPropertyAttribute]
public List`1<HttpURLRewriteOperation> URLRewrite { get; public set; }
    [JsonPropertyAttribute]
public JWTSettings JWT { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<HttpHeaderOperation> get_Headers();
    [CompilerGeneratedAttribute]
public void set_Headers(List`1<HttpHeaderOperation> value);
    [CompilerGeneratedAttribute]
public List`1<HttpURLRewriteOperation> get_URLRewrite();
    [CompilerGeneratedAttribute]
public void set_URLRewrite(List`1<HttpURLRewriteOperation> value);
    [CompilerGeneratedAttribute]
public JWTSettings get_JWT();
    [CompilerGeneratedAttribute]
public void set_JWT(JWTSettings value);
}
public class Consul.HttpRouteMatch : object {
    [CompilerGeneratedAttribute]
private List`1<HttpHeaderMatch> <Headers>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Method>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<HttpPathMatch> <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<HttpQueryMatch> <Query>k__BackingField;
    [JsonPropertyAttribute]
public List`1<HttpHeaderMatch> Headers { get; public set; }
    [JsonPropertyAttribute]
public string Method { get; public set; }
    [JsonPropertyAttribute]
public List`1<HttpPathMatch> Path { get; public set; }
    [JsonPropertyAttribute]
public List`1<HttpQueryMatch> Query { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<HttpHeaderMatch> get_Headers();
    [CompilerGeneratedAttribute]
public void set_Headers(List`1<HttpHeaderMatch> value);
    [CompilerGeneratedAttribute]
public string get_Method();
    [CompilerGeneratedAttribute]
public void set_Method(string value);
    [CompilerGeneratedAttribute]
public List`1<HttpPathMatch> get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(List`1<HttpPathMatch> value);
    [CompilerGeneratedAttribute]
public List`1<HttpQueryMatch> get_Query();
    [CompilerGeneratedAttribute]
public void set_Query(List`1<HttpQueryMatch> value);
}
public class Consul.HttpRouteRule : object {
    [CompilerGeneratedAttribute]
private List`1<HttpRouteFilter> <Filters>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<HttpRouteMatch> <Matches>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<HttpRouteService> <Services>k__BackingField;
    [JsonPropertyAttribute]
public List`1<HttpRouteFilter> Filters { get; public set; }
    [JsonPropertyAttribute]
public List`1<HttpRouteMatch> Matches { get; public set; }
    [JsonPropertyAttribute]
public List`1<HttpRouteService> Services { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<HttpRouteFilter> get_Filters();
    [CompilerGeneratedAttribute]
public void set_Filters(List`1<HttpRouteFilter> value);
    [CompilerGeneratedAttribute]
public List`1<HttpRouteMatch> get_Matches();
    [CompilerGeneratedAttribute]
public void set_Matches(List`1<HttpRouteMatch> value);
    [CompilerGeneratedAttribute]
public List`1<HttpRouteService> get_Services();
    [CompilerGeneratedAttribute]
public void set_Services(List`1<HttpRouteService> value);
}
public class Consul.HttpRouteService : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Namespace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Partition>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Weight>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<HttpRouteFilter> <Filters>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<HttpRouteFilter> <ResponseFilters>k__BackingField;
    [JsonPropertyAttribute]
public string Name { get; public set; }
    [JsonPropertyAttribute]
public string Namespace { get; public set; }
    [JsonPropertyAttribute]
public string Partition { get; public set; }
    [JsonPropertyAttribute]
public Nullable`1<int> Weight { get; public set; }
    [JsonPropertyAttribute]
public List`1<HttpRouteFilter> Filters { get; public set; }
    [JsonPropertyAttribute]
public List`1<HttpRouteFilter> ResponseFilters { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Namespace();
    [CompilerGeneratedAttribute]
public void set_Namespace(string value);
    [CompilerGeneratedAttribute]
public string get_Partition();
    [CompilerGeneratedAttribute]
public void set_Partition(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Weight();
    [CompilerGeneratedAttribute]
public void set_Weight(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public List`1<HttpRouteFilter> get_Filters();
    [CompilerGeneratedAttribute]
public void set_Filters(List`1<HttpRouteFilter> value);
    [CompilerGeneratedAttribute]
public List`1<HttpRouteFilter> get_ResponseFilters();
    [CompilerGeneratedAttribute]
public void set_ResponseFilters(List`1<HttpRouteFilter> value);
}
public class Consul.HttpURLRewriteOperation : object {
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [JsonPropertyAttribute]
public string Path { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
}
[ObsoleteAttribute("The Legacy ACL system has been deprecated, please use Token, Role and Policy instead.")]
public interface Consul.IACLEndpoint {
    [ObsoleteAttribute("The Legacy ACL system has been deprecated, please use Token, Role and Policy instead.")]
public abstract virtual Task`1<WriteResult`1<string>> Clone(string id, CancellationToken ct);
    [ObsoleteAttribute("The Legacy ACL system has been deprecated, please use Token, Role and Policy instead.")]
public abstract virtual Task`1<WriteResult`1<string>> Clone(string id, WriteOptions q, CancellationToken ct);
    [ObsoleteAttribute("The Legacy ACL system has been deprecated, please use Token, Role and Policy instead.")]
public abstract virtual Task`1<WriteResult`1<string>> Create(ACLEntry acl, CancellationToken ct);
    [ObsoleteAttribute("The Legacy ACL system has been deprecated, please use Token, Role and Policy instead.")]
public abstract virtual Task`1<WriteResult`1<string>> Create(ACLEntry acl, WriteOptions q, CancellationToken ct);
    [ObsoleteAttribute("The Legacy ACL system has been deprecated, please use Token, Role and Policy instead.")]
public abstract virtual Task`1<WriteResult`1<bool>> Destroy(string id, CancellationToken ct);
    [ObsoleteAttribute("The Legacy ACL system has been deprecated, please use Token, Role and Policy instead.")]
public abstract virtual Task`1<WriteResult`1<bool>> Destroy(string id, WriteOptions q, CancellationToken ct);
    [ObsoleteAttribute("The Legacy ACL system has been deprecated, please use Token, Role and Policy instead.")]
public abstract virtual Task`1<QueryResult`1<ACLEntry>> Info(string id, CancellationToken ct);
    [ObsoleteAttribute("The Legacy ACL system has been deprecated, please use Token, Role and Policy instead.")]
public abstract virtual Task`1<QueryResult`1<ACLEntry>> Info(string id, QueryOptions q, CancellationToken ct);
    [ObsoleteAttribute("The Legacy ACL system has been deprecated, please use Token, Role and Policy instead.")]
public abstract virtual Task`1<QueryResult`1<ACLEntry[]>> List(CancellationToken ct);
    [ObsoleteAttribute("The Legacy ACL system has been deprecated, please use Token, Role and Policy instead.")]
public abstract virtual Task`1<QueryResult`1<ACLEntry[]>> List(QueryOptions q, CancellationToken ct);
    [ObsoleteAttribute("The Legacy ACL system has been deprecated, please use Token, Role and Policy instead.")]
public abstract virtual Task`1<WriteResult> Update(ACLEntry acl, CancellationToken ct);
    [ObsoleteAttribute("The Legacy ACL system has been deprecated, please use Token, Role and Policy instead.")]
public abstract virtual Task`1<WriteResult> Update(ACLEntry acl, WriteOptions q, CancellationToken ct);
    [ObsoleteAttribute("The Legacy ACL system has been deprecated, please use Token, Role and Policy instead.")]
public abstract virtual Task`1<WriteResult`1<string>> TranslateRules(string rules, CancellationToken ct);
    [ObsoleteAttribute("The Legacy ACL system has been deprecated, please use Token, Role and Policy instead.")]
public abstract virtual Task`1<WriteResult`1<string>> TranslateRules(string rules, WriteOptions q, CancellationToken ct);
    [ObsoleteAttribute("The Legacy ACL system has been deprecated, please use Token, Role and Policy instead.")]
public abstract virtual Task`1<QueryResult`1<string>> TranslateLegacyTokenRules(string id, CancellationToken ct);
    [ObsoleteAttribute("The Legacy ACL system has been deprecated, please use Token, Role and Policy instead.")]
public abstract virtual Task`1<QueryResult`1<string>> TranslateLegacyTokenRules(string id, QueryOptions q, CancellationToken ct);
}
public interface Consul.IACLReplicationEndpoint {
    public abstract virtual Task`1<QueryResult`1<ACLReplicationEntry>> Status(CancellationToken ct);
    public abstract virtual Task`1<QueryResult`1<ACLReplicationEntry>> Status(QueryOptions q, CancellationToken ct);
}
public interface Consul.IAgentEndpoint {
    [ObsoleteAttribute("This property will be removed in a future release. Replace uses of it with a call to GetNodeName()")]
public string NodeName { get; }
    public abstract virtual Task`1<WriteResult> CheckDeregister(string checkID, CancellationToken ct);
    public abstract virtual Task`1<WriteResult> CheckRegister(AgentCheckRegistration check, CancellationToken ct);
    public abstract virtual Task`1<QueryResult`1<Dictionary`2<string, AgentCheck>>> Checks(CancellationToken ct);
    public abstract virtual Task`1<QueryResult`1<Dictionary`2<string, AgentCheck>>> Checks(Filter filter, CancellationToken ct);
    public abstract virtual Task`1<WriteResult> DisableNodeMaintenance(CancellationToken ct);
    public abstract virtual Task`1<WriteResult> DisableServiceMaintenance(string serviceID, CancellationToken ct);
    public abstract virtual Task`1<WriteResult> EnableNodeMaintenance(string reason, CancellationToken ct);
    public abstract virtual Task`1<WriteResult> EnableServiceMaintenance(string serviceID, string reason, CancellationToken ct);
    public abstract virtual Task FailTTL(string checkID, string note, CancellationToken ct);
    public abstract virtual Task`1<WriteResult> ForceLeave(string node, CancellationToken ct);
    public abstract virtual Task`1<WriteResult> Join(string addr, bool wan, CancellationToken ct);
    public abstract virtual Task`1<QueryResult`1<AgentMember[]>> Members(bool wan, CancellationToken ct);
    public abstract virtual string get_NodeName();
    public abstract virtual Task`1<string> GetNodeName(CancellationToken ct);
    public abstract virtual Task PassTTL(string checkID, string note, CancellationToken ct);
    public abstract virtual Task`1<QueryResult`1<Dictionary`2<string, Dictionary`2<string, object>>>> Self(CancellationToken ct);
    public abstract virtual Task`1<WriteResult> ServiceDeregister(string serviceID, CancellationToken ct);
    public abstract virtual Task`1<WriteResult> ServiceRegister(AgentServiceRegistration service, CancellationToken ct);
    public abstract virtual Task`1<WriteResult> ServiceRegister(AgentServiceRegistration service, bool replaceExistingChecks, CancellationToken ct);
    public abstract virtual Task`1<QueryResult`1<Dictionary`2<string, AgentService>>> Services(CancellationToken ct);
    public abstract virtual Task`1<QueryResult`1<Dictionary`2<string, AgentService>>> Services(Filter filter, CancellationToken ct);
    public abstract virtual Task`1<WriteResult> UpdateTTL(string checkID, string output, TTLStatus status, CancellationToken ct);
    public abstract virtual Task WarnTTL(string checkID, string note, CancellationToken ct);
    public abstract virtual Task`1<LogStream> Monitor(LogLevel level, CancellationToken ct);
    public abstract virtual Task`1<LogStream> MonitorJSON(LogLevel level, CancellationToken ct);
    public abstract virtual Task`1<QueryResult`1<LocalServiceHealth[]>> GetLocalServiceHealth(string serviceName, QueryOptions q, CancellationToken ct);
    public abstract virtual Task`1<QueryResult`1<LocalServiceHealth[]>> GetLocalServiceHealth(string serviceName, CancellationToken ct);
    public abstract virtual Task`1<QueryResult`1<string>> GetWorstLocalServiceHealth(string serviceName, QueryOptions q, CancellationToken ct);
    public abstract virtual Task`1<QueryResult`1<string>> GetWorstLocalServiceHealth(string serviceName, CancellationToken ct);
    public abstract virtual Task`1<QueryResult`1<LocalServiceHealth>> GetLocalServiceHealthByID(string serviceID, QueryOptions q, CancellationToken ct);
    public abstract virtual Task`1<QueryResult`1<LocalServiceHealth>> GetLocalServiceHealthByID(string serviceID, CancellationToken ct);
    public abstract virtual Task`1<QueryResult`1<Metrics>> GetAgentMetrics(CancellationToken ct);
    public abstract virtual Task`1<WriteResult`1<AgentAuthorizeResponse>> ConnectAuthorize(AgentAuthorizeParameters parameters, CancellationToken ct);
    public abstract virtual Task`1<WriteResult`1<AgentAuthorizeResponse>> ConnectAuthorize(AgentAuthorizeParameters parameters, WriteOptions w, CancellationToken ct);
    public abstract virtual Task`1<QueryResult`1<CARoots>> GetCARoots(CancellationToken ct);
    public abstract virtual Task`1<QueryResult`1<CARoots>> GetCARoots(QueryOptions q, CancellationToken ct);
    public abstract virtual Task`1<QueryResult`1<CALeaf>> GetCALeaf(string serviceId, CancellationToken ct);
    public abstract virtual Task`1<QueryResult`1<CALeaf>> GetCALeaf(string serviceId, QueryOptions q, CancellationToken ct);
    public abstract virtual Task`1<QueryResult`1<AgentVersion>> GetAgentVersion(CancellationToken ct);
    public abstract virtual Task`1<WriteResult> Reload(CancellationToken ct);
    [ObsoleteAttribute]
public abstract virtual Task`1<WriteResult> Reload(string node, CancellationToken ct);
    public abstract virtual Task`1<QueryResult`1<AgentHostInfo>> GetAgentHostInfo(CancellationToken ct);
    public abstract virtual Task`1<WriteResult> Leave(string node, CancellationToken ct);
    public abstract virtual Task`1<QueryResult`1<ServiceConfiguration>> GetServiceConfiguration(string serviceID, QueryOptions q, CancellationToken ct);
    public abstract virtual Task`1<QueryResult`1<ServiceConfiguration>> GetServiceConfiguration(string serviceID, CancellationToken ct);
}
public interface Consul.IAuthMethodEndpoint {
    public abstract virtual Task`1<WriteResult`1<AuthMethodEntry>> Create(AuthMethodEntry authMethod, CancellationToken ct);
    public abstract virtual Task`1<WriteResult`1<AuthMethodEntry>> Create(AuthMethodEntry authMethod, WriteOptions q, CancellationToken ct);
    public abstract virtual Task`1<WriteResult`1<bool>> Delete(string id, CancellationToken ct);
    public abstract virtual Task`1<WriteResult`1<bool>> Delete(string id, WriteOptions q, CancellationToken ct);
    public abstract virtual Task`1<QueryResult`1<AuthMethodEntry>> Read(string id, CancellationToken ct);
    public abstract virtual Task`1<QueryResult`1<AuthMethodEntry>> Read(string id, QueryOptions q, CancellationToken ct);
    public abstract virtual Task`1<QueryResult`1<AuthMethodEntry[]>> List(CancellationToken ct);
    public abstract virtual Task`1<QueryResult`1<AuthMethodEntry[]>> List(QueryOptions q, CancellationToken ct);
    public abstract virtual Task`1<WriteResult`1<TokenEntry>> Login(CancellationToken ct);
    public abstract virtual Task`1<WriteResult`1<TokenEntry>> Login(WriteOptions q, CancellationToken ct);
    public abstract virtual Task`1<WriteResult> Logout(CancellationToken ct);
    public abstract virtual Task`1<WriteResult> Logout(WriteOptions q, CancellationToken ct);
    public abstract virtual Task`1<WriteResult`1<AuthMethodEntry>> Update(AuthMethodEntry authMethod, CancellationToken ct);
    public abstract virtual Task`1<WriteResult`1<AuthMethodEntry>> Update(AuthMethodEntry authMethod, WriteOptions q, CancellationToken ct);
}
public interface Consul.ICatalogEndpoint {
    public abstract virtual Task`1<QueryResult`1<String[]>> Datacenters(CancellationToken ct);
    public abstract virtual Task`1<QueryResult`1<String[]>> Datacenters(QueryOptions q, CancellationToken ct);
    public abstract virtual Task`1<WriteResult> Deregister(CatalogDeregistration reg, CancellationToken ct);
    public abstract virtual Task`1<WriteResult> Deregister(CatalogDeregistration reg, WriteOptions q, CancellationToken ct);
    public abstract virtual Task`1<QueryResult`1<CatalogNode>> Node(string node, CancellationToken ct);
    public abstract virtual Task`1<QueryResult`1<CatalogNode>> Node(string node, QueryOptions q, CancellationToken ct);
    public abstract virtual Task`1<QueryResult`1<Node[]>> Nodes(CancellationToken ct);
    public abstract virtual Task`1<QueryResult`1<Node[]>> Nodes(QueryOptions q, CancellationToken ct);
    public abstract virtual Task`1<WriteResult> Register(CatalogRegistration reg, CancellationToken ct);
    public abstract virtual Task`1<WriteResult> Register(CatalogRegistration reg, WriteOptions q, CancellationToken ct);
    public abstract virtual Task`1<QueryResult`1<CatalogService[]>> Service(string service, CancellationToken ct);
    public abstract virtual Task`1<QueryResult`1<CatalogService[]>> Service(string service, string tag, CancellationToken ct);
    public abstract virtual Task`1<QueryResult`1<CatalogService[]>> Service(string service, string tag, QueryOptions q, CancellationToken ct);
    public abstract virtual Task`1<QueryResult`1<Dictionary`2<string, String[]>>> Services(CancellationToken ct);
    public abstract virtual Task`1<QueryResult`1<Dictionary`2<string, String[]>>> Services(QueryOptions q, CancellationToken ct);
    public abstract virtual Task`1<QueryResult`1<CatalogService[]>> NodesForMeshCapableService(string service, Filter filter, CancellationToken ct);
    public abstract virtual Task`1<QueryResult`1<CatalogService[]>> NodesForMeshCapableService(string service, QueryOptions q, Filter filter, CancellationToken ct);
    public abstract virtual Task`1<QueryResult`1<CatalogService[]>> NodesForMeshCapableService(string service, CancellationToken ct);
    public abstract virtual Task`1<QueryResult`1<NodeService>> ServicesForNode(string node, QueryOptions q, CancellationToken ct);
    public abstract virtual Task`1<QueryResult`1<NodeService>> ServicesForNode(string node, CancellationToken ct);
    public abstract virtual Task`1<QueryResult`1<GatewayService[]>> GatewayService(string gateway, QueryOptions q, CancellationToken ct);
    public abstract virtual Task`1<QueryResult`1<GatewayService[]>> GatewayService(string gateway, CancellationToken ct);
}
public interface Consul.IConfigurationEntry {
    public string Kind { get; public set; }
    public abstract virtual string get_Kind();
    public abstract virtual void set_Kind(string value);
}
public interface Consul.IConsulClient {
    public IACLEndpoint ACL { get; }
    public IPolicyEndpoint Policy { get; }
    public IRoleEndpoint Role { get; }
    public ITokenEndpoint Token { get; }
    public IAgentEndpoint Agent { get; }
    public ICatalogEndpoint Catalog { get; }
    public IConfigurationEndpoint Configuration { get; }
    public IEventEndpoint Event { get; }
    public IHealthEndpoint Health { get; }
    public IKVEndpoint KV { get; }
    public IRawEndpoint Raw { get; }
    public ISessionEndpoint Session { get; }
    public IStatusEndpoint Status { get; }
    public IOperatorEndpoint Operator { get; }
    public IPreparedQueryEndpoint PreparedQuery { get; }
    public ICoordinateEndpoint Coordinate { get; }
    public ISnapshotEndpoint Snapshot { get; }
    public abstract virtual IACLEndpoint get_ACL();
    public abstract virtual IPolicyEndpoint get_Policy();
    public abstract virtual IRoleEndpoint get_Role();
    public abstract virtual ITokenEndpoint get_Token();
    public abstract virtual Task`1<IDistributedLock> AcquireLock(LockOptions opts, CancellationToken ct);
    public abstract virtual Task`1<IDistributedLock> AcquireLock(string key, CancellationToken ct);
    public abstract virtual Task`1<IDistributedSemaphore> AcquireSemaphore(SemaphoreOptions opts, CancellationToken ct);
    public abstract virtual Task`1<IDistributedSemaphore> AcquireSemaphore(string prefix, int limit, CancellationToken ct);
    public abstract virtual IAgentEndpoint get_Agent();
    public abstract virtual ICatalogEndpoint get_Catalog();
    public abstract virtual IConfigurationEndpoint get_Configuration();
    public abstract virtual IDistributedLock CreateLock(LockOptions opts);
    public abstract virtual IDistributedLock CreateLock(string key);
    public abstract virtual IEventEndpoint get_Event();
    public abstract virtual Task ExecuteInSemaphore(SemaphoreOptions opts, Action a, CancellationToken ct);
    public abstract virtual Task ExecuteInSemaphore(string prefix, int limit, Action a, CancellationToken ct);
    public abstract virtual Task ExecuteLocked(LockOptions opts, Action action, CancellationToken ct);
    [ObsoleteAttribute("This method will be removed in a future release. Replace calls with the method signature ExecuteLocked(LockOptions, Action, CancellationToken)")]
public abstract virtual Task ExecuteLocked(LockOptions opts, CancellationToken ct, Action action);
    public abstract virtual Task ExecuteLocked(string key, Action action, CancellationToken ct);
    [ObsoleteAttribute("This method will be removed in a future release. Replace calls with the method signature ExecuteLocked(string, Action, CancellationToken)")]
public abstract virtual Task ExecuteLocked(string key, CancellationToken ct, Action action);
    public abstract virtual IHealthEndpoint get_Health();
    public abstract virtual IKVEndpoint get_KV();
    public abstract virtual IRawEndpoint get_Raw();
    public abstract virtual IDistributedSemaphore Semaphore(SemaphoreOptions opts);
    public abstract virtual IDistributedSemaphore Semaphore(string prefix, int limit);
    public abstract virtual ISessionEndpoint get_Session();
    public abstract virtual IStatusEndpoint get_Status();
    public abstract virtual IOperatorEndpoint get_Operator();
    public abstract virtual IPreparedQueryEndpoint get_PreparedQuery();
    public abstract virtual ICoordinateEndpoint get_Coordinate();
    public abstract virtual ISnapshotEndpoint get_Snapshot();
}
public interface Consul.ICoordinateEndpoint {
    public abstract virtual Task`1<QueryResult`1<CoordinateDatacenterMap[]>> Datacenters(CancellationToken ct);
    public abstract virtual Task`1<QueryResult`1<CoordinateEntry[]>> Nodes(CancellationToken ct);
    public abstract virtual Task`1<QueryResult`1<CoordinateEntry[]>> Node(string node, QueryOptions q, CancellationToken ct);
    public abstract virtual Task`1<QueryResult`1<CoordinateEntry[]>> Node(string node, CancellationToken ct);
    public abstract virtual Task`1<QueryResult`1<CoordinateEntry[]>> Nodes(QueryOptions q, CancellationToken ct);
    public abstract virtual Task`1<WriteResult> Update(CoordinateEntry entry, WriteOptions q, CancellationToken ct);
    public abstract virtual Task`1<WriteResult> Update(CoordinateEntry entry, CancellationToken ct);
}
public interface Consul.IDistributedLock {
    public bool IsHeld { get; }
    public abstract virtual bool get_IsHeld();
    public abstract virtual Task`1<CancellationToken> Acquire(CancellationToken ct);
    public abstract virtual Task Destroy(CancellationToken ct);
    public abstract virtual Task Release(CancellationToken ct);
}
public interface Consul.IDistributedSemaphore {
    public bool IsHeld { get; }
    public abstract virtual bool get_IsHeld();
    public abstract virtual Task`1<CancellationToken> Acquire(CancellationToken ct);
    public abstract virtual Task Destroy(CancellationToken ct);
    public abstract virtual Task Release(CancellationToken ct);
}
public interface Consul.IEventEndpoint {
    public abstract virtual Task`1<WriteResult`1<string>> Fire(UserEvent ue, CancellationToken ct);
    public abstract virtual Task`1<WriteResult`1<string>> Fire(UserEvent ue, WriteOptions q, CancellationToken ct);
    public abstract virtual ulong IDToIndex(string uuid);
    public abstract virtual Task`1<QueryResult`1<UserEvent[]>> List(CancellationToken ct);
    public abstract virtual Task`1<QueryResult`1<UserEvent[]>> List(string name, CancellationToken ct);
    public abstract virtual Task`1<QueryResult`1<UserEvent[]>> List(string name, QueryOptions q, CancellationToken ct);
}
public interface Consul.IHealthEndpoint {
    public abstract virtual Task`1<QueryResult`1<HealthCheck[]>> Checks(string service, CancellationToken ct);
    public abstract virtual Task`1<QueryResult`1<HealthCheck[]>> Checks(string service, QueryOptions q, CancellationToken ct);
    public abstract virtual Task`1<QueryResult`1<HealthCheck[]>> Node(string node, CancellationToken ct);
    public abstract virtual Task`1<QueryResult`1<HealthCheck[]>> Node(string node, QueryOptions q, CancellationToken ct);
    public abstract virtual Task`1<QueryResult`1<ServiceEntry[]>> Service(string service, CancellationToken ct);
    public abstract virtual Task`1<QueryResult`1<ServiceEntry[]>> Service(string service, string tag, CancellationToken ct);
    public abstract virtual Task`1<QueryResult`1<ServiceEntry[]>> Service(string service, string tag, bool passingOnly, CancellationToken ct);
    public abstract virtual Task`1<QueryResult`1<ServiceEntry[]>> Service(string service, string tag, bool passingOnly, QueryOptions q, CancellationToken ct);
    public abstract virtual Task`1<QueryResult`1<ServiceEntry[]>> Service(string service, string tag, bool passingOnly, QueryOptions q, Filter filter, CancellationToken ct);
    public abstract virtual Task`1<QueryResult`1<ServiceEntry[]>> Connect(string service, string tag, bool passingOnly, QueryOptions q, Filter filter, CancellationToken ct);
    public abstract virtual Task`1<QueryResult`1<ServiceEntry[]>> Connect(string service, string tag, bool passingOnly, QueryOptions q, CancellationToken ct);
    public abstract virtual Task`1<QueryResult`1<HealthCheck[]>> State(HealthStatus status, CancellationToken ct);
    public abstract virtual Task`1<QueryResult`1<HealthCheck[]>> State(HealthStatus status, QueryOptions q, CancellationToken ct);
}
public interface Consul.IKVEndpoint {
    public abstract virtual Task`1<WriteResult`1<bool>> Acquire(KVPair p, CancellationToken ct);
    public abstract virtual Task`1<WriteResult`1<bool>> Acquire(KVPair p, WriteOptions q, CancellationToken ct);
    public abstract virtual Task`1<WriteResult`1<bool>> CAS(KVPair p, CancellationToken ct);
    public abstract virtual Task`1<WriteResult`1<bool>> CAS(KVPair p, WriteOptions q, CancellationToken ct);
    public abstract virtual Task`1<WriteResult`1<bool>> Delete(string key, CancellationToken ct);
    public abstract virtual Task`1<WriteResult`1<bool>> Delete(string key, WriteOptions q, CancellationToken ct);
    public abstract virtual Task`1<WriteResult`1<bool>> DeleteCAS(KVPair p, CancellationToken ct);
    public abstract virtual Task`1<WriteResult`1<bool>> DeleteCAS(KVPair p, WriteOptions q, CancellationToken ct);
    public abstract virtual Task`1<WriteResult`1<bool>> DeleteTree(string prefix, CancellationToken ct);
    public abstract virtual Task`1<WriteResult`1<bool>> DeleteTree(string prefix, WriteOptions q, CancellationToken ct);
    public abstract virtual Task`1<QueryResult`1<KVPair>> Get(string key, CancellationToken ct);
    public abstract virtual Task`1<QueryResult`1<KVPair>> Get(string key, QueryOptions q, CancellationToken ct);
    public abstract virtual Task`1<QueryResult`1<String[]>> Keys(string prefix, CancellationToken ct);
    public abstract virtual Task`1<QueryResult`1<String[]>> Keys(string prefix, string separator, CancellationToken ct);
    public abstract virtual Task`1<QueryResult`1<String[]>> Keys(string prefix, string separator, QueryOptions q, CancellationToken ct);
    public abstract virtual Task`1<QueryResult`1<KVPair[]>> List(string prefix, CancellationToken ct);
    public abstract virtual Task`1<QueryResult`1<KVPair[]>> List(string prefix, QueryOptions q, CancellationToken ct);
    public abstract virtual Task`1<WriteResult`1<bool>> Put(KVPair p, CancellationToken ct);
    public abstract virtual Task`1<WriteResult`1<bool>> Put(KVPair p, WriteOptions q, CancellationToken ct);
    public abstract virtual Task`1<WriteResult`1<bool>> Release(KVPair p, CancellationToken ct);
    public abstract virtual Task`1<WriteResult`1<bool>> Release(KVPair p, WriteOptions q, CancellationToken ct);
    public abstract virtual Task`1<WriteResult`1<KVTxnResponse>> Txn(List`1<KVTxnOp> txn, CancellationToken ct);
    public abstract virtual Task`1<WriteResult`1<KVTxnResponse>> Txn(List`1<KVTxnOp> txn, WriteOptions q, CancellationToken ct);
}
public interface Consul.INamespacesEndpoint {
    public abstract virtual Task`1<WriteResult`1<NamespaceResponse>> Create(Namespace ns, WriteOptions q, CancellationToken ct);
    public abstract virtual Task`1<WriteResult`1<NamespaceResponse>> Create(Namespace ns, CancellationToken ct);
    public abstract virtual Task`1<WriteResult`1<NamespaceResponse>> Update(Namespace ns, WriteOptions q, CancellationToken ct);
    public abstract virtual Task`1<WriteResult`1<NamespaceResponse>> Update(Namespace ns, CancellationToken ct);
    public abstract virtual Task`1<QueryResult`1<NamespaceResponse>> Read(string name, QueryOptions q, CancellationToken ct);
    public abstract virtual Task`1<QueryResult`1<NamespaceResponse>> Read(string name, CancellationToken ct);
    public abstract virtual Task`1<QueryResult`1<NamespaceResponse[]>> List(QueryOptions q, CancellationToken ct);
    public abstract virtual Task`1<QueryResult`1<NamespaceResponse[]>> List(CancellationToken ct);
    public abstract virtual Task`1<WriteResult> Delete(string name, WriteOptions q, CancellationToken ct);
    public abstract virtual Task`1<WriteResult> Delete(string name, CancellationToken ct);
}
public class Consul.IngressGatewayEntry : object {
    [CompilerGeneratedAttribute]
private string <Kind>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Namespace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Partition>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Meta>k__BackingField;
    [CompilerGeneratedAttribute]
private TLSConfig <TLS>k__BackingField;
    [CompilerGeneratedAttribute]
private GatewayDefaults <Defaults>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<GatewayListener> <Listeners>k__BackingField;
    [JsonPropertyAttribute]
public string Kind { get; public set; }
    [JsonPropertyAttribute]
public string Name { get; public set; }
    [JsonPropertyAttribute]
public string Namespace { get; public set; }
    [JsonPropertyAttribute]
public string Partition { get; public set; }
    [JsonPropertyAttribute]
public Dictionary`2<string, string> Meta { get; public set; }
    [JsonPropertyAttribute]
public TLSConfig TLS { get; public set; }
    [JsonPropertyAttribute]
public GatewayDefaults Defaults { get; public set; }
    [JsonPropertyAttribute]
public List`1<GatewayListener> Listeners { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_Kind();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Kind(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Namespace();
    [CompilerGeneratedAttribute]
public void set_Namespace(string value);
    [CompilerGeneratedAttribute]
public string get_Partition();
    [CompilerGeneratedAttribute]
public void set_Partition(string value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_Meta();
    [CompilerGeneratedAttribute]
public void set_Meta(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public TLSConfig get_TLS();
    [CompilerGeneratedAttribute]
public void set_TLS(TLSConfig value);
    [CompilerGeneratedAttribute]
public GatewayDefaults get_Defaults();
    [CompilerGeneratedAttribute]
public void set_Defaults(GatewayDefaults value);
    [CompilerGeneratedAttribute]
public List`1<GatewayListener> get_Listeners();
    [CompilerGeneratedAttribute]
public void set_Listeners(List`1<GatewayListener> value);
}
public class Consul.InlineCertificateEntry : object {
    [CompilerGeneratedAttribute]
private string <Kind>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Meta>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Certificate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PrivateKey>k__BackingField;
    [JsonPropertyAttribute]
public string Kind { get; public set; }
    [JsonPropertyAttribute]
public string Name { get; public set; }
    [JsonPropertyAttribute]
public Dictionary`2<string, string> Meta { get; public set; }
    [JsonPropertyAttribute]
public string Certificate { get; public set; }
    [JsonPropertyAttribute]
public string PrivateKey { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_Kind();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Kind(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_Meta();
    [CompilerGeneratedAttribute]
public void set_Meta(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public string get_Certificate();
    [CompilerGeneratedAttribute]
public void set_Certificate(string value);
    [CompilerGeneratedAttribute]
public string get_PrivateKey();
    [CompilerGeneratedAttribute]
public void set_PrivateKey(string value);
}
public class Consul.InstanceLevelConfig : object {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <RequestsPerSecond>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <RequestsMaxBurst>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<RouteConfig> <Routes>k__BackingField;
    [JsonPropertyAttribute]
public Nullable`1<int> RequestsPerSecond { get; public set; }
    [JsonPropertyAttribute]
public Nullable`1<int> RequestsMaxBurst { get; public set; }
    [JsonPropertyAttribute]
public List`1<RouteConfig> Routes { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_RequestsPerSecond();
    [CompilerGeneratedAttribute]
public void set_RequestsPerSecond(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_RequestsMaxBurst();
    [CompilerGeneratedAttribute]
public void set_RequestsMaxBurst(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public List`1<RouteConfig> get_Routes();
    [CompilerGeneratedAttribute]
public void set_Routes(List`1<RouteConfig> value);
}
public interface Consul.Interfaces.IConfigurationEndpoint {
    public abstract virtual Task`1<WriteResult> ApplyConfig(WriteOptions q, TConfig configurationEntry, CancellationToken ct);
    public abstract virtual Task`1<WriteResult> ApplyConfig(TConfig configurationEntry, CancellationToken ct);
    public abstract virtual Task`1<QueryResult`1<TConfig>> GetConfig(string kind, string name, QueryOptions q, CancellationToken ct);
    public abstract virtual Task`1<QueryResult`1<TConfig>> GetConfig(string kind, string name, CancellationToken ct);
    public abstract virtual Task`1<QueryResult`1<List`1<TConfig>>> ListConfig(string kind, QueryOptions q, CancellationToken ct);
    public abstract virtual Task`1<QueryResult`1<List`1<TConfig>>> ListConfig(string kind, CancellationToken ct);
    public abstract virtual Task`1<WriteResult> DeleteConfig(string kind, string name, WriteOptions q, CancellationToken ct);
    public abstract virtual Task`1<WriteResult> DeleteConfig(string kind, string name, CancellationToken ct);
}
public class Consul.InvalidKeyPairException : Exception {
    public InvalidKeyPairException(string message);
    public InvalidKeyPairException(string message, Exception inner);
    protected InvalidKeyPairException(SerializationInfo info, StreamingContext context);
}
public interface Consul.IOperatorEndpoint {
    public abstract virtual Task`1<QueryResult`1<RaftConfiguration>> RaftGetConfiguration(CancellationToken ct);
    public abstract virtual Task`1<QueryResult`1<RaftConfiguration>> RaftGetConfiguration(QueryOptions q, CancellationToken ct);
    public abstract virtual Task`1<WriteResult> RaftRemovePeerByAddress(string address, CancellationToken ct);
    public abstract virtual Task`1<WriteResult> RaftRemovePeerByAddress(string address, WriteOptions q, CancellationToken ct);
    public abstract virtual Task`1<WriteResult> KeyringInstall(string key, CancellationToken ct);
    public abstract virtual Task`1<WriteResult> KeyringInstall(string key, WriteOptions q, CancellationToken ct);
    public abstract virtual Task`1<QueryResult`1<KeyringResponse[]>> KeyringList(CancellationToken ct);
    public abstract virtual Task`1<QueryResult`1<KeyringResponse[]>> KeyringList(QueryOptions q, CancellationToken ct);
    public abstract virtual Task`1<WriteResult> KeyringRemove(string key, CancellationToken ct);
    public abstract virtual Task`1<WriteResult> KeyringRemove(string key, WriteOptions q, CancellationToken ct);
    public abstract virtual Task`1<WriteResult> KeyringUse(string key, CancellationToken ct);
    public abstract virtual Task`1<WriteResult> KeyringUse(string key, WriteOptions q, CancellationToken ct);
    public abstract virtual Task`1<QueryResult`1<ConsulLicense>> GetConsulLicense(string datacenter, CancellationToken ct);
}
public interface Consul.IPolicyEndpoint {
    public abstract virtual Task`1<WriteResult`1<PolicyEntry>> Create(PolicyEntry policy, CancellationToken ct);
    public abstract virtual Task`1<WriteResult`1<PolicyEntry>> Create(PolicyEntry policy, WriteOptions q, CancellationToken ct);
    public abstract virtual Task`1<WriteResult`1<bool>> Delete(string id, CancellationToken ct);
    public abstract virtual Task`1<WriteResult`1<bool>> Delete(string id, WriteOptions q, CancellationToken ct);
    public abstract virtual Task`1<QueryResult`1<PolicyEntry[]>> List(CancellationToken ct);
    public abstract virtual Task`1<QueryResult`1<PolicyEntry[]>> List(QueryOptions q, CancellationToken ct);
    public abstract virtual Task`1<QueryResult`1<PolicyEntry>> Read(string id, CancellationToken ct);
    public abstract virtual Task`1<QueryResult`1<PolicyEntry>> Read(string id, QueryOptions q, CancellationToken ct);
    public abstract virtual Task`1<WriteResult`1<PolicyEntry>> Update(PolicyEntry policy, CancellationToken ct);
    public abstract virtual Task`1<WriteResult`1<PolicyEntry>> Update(PolicyEntry policy, WriteOptions q, CancellationToken ct);
}
public interface Consul.IPreparedQueryEndpoint {
    public abstract virtual Task`1<WriteResult`1<string>> Create(PreparedQueryDefinition query, CancellationToken ct);
    public abstract virtual Task`1<WriteResult`1<string>> Create(PreparedQueryDefinition query, WriteOptions q, CancellationToken ct);
    public abstract virtual Task`1<WriteResult> Update(PreparedQueryDefinition query, CancellationToken ct);
    public abstract virtual Task`1<WriteResult> Update(PreparedQueryDefinition query, WriteOptions q, CancellationToken ct);
    public abstract virtual Task`1<QueryResult`1<PreparedQueryDefinition[]>> List(CancellationToken ct);
    public abstract virtual Task`1<QueryResult`1<PreparedQueryDefinition[]>> List(QueryOptions q, CancellationToken ct);
    public abstract virtual Task`1<QueryResult`1<PreparedQueryDefinition[]>> Get(string queryID, CancellationToken ct);
    public abstract virtual Task`1<QueryResult`1<PreparedQueryDefinition[]>> Get(string queryID, QueryOptions q, CancellationToken ct);
    public abstract virtual Task`1<WriteResult> Delete(string queryID, CancellationToken ct);
    public abstract virtual Task`1<WriteResult> Delete(string queryID, WriteOptions q, CancellationToken ct);
    public abstract virtual Task`1<QueryResult`1<PreparedQueryExecuteResponse>> Execute(string queryIDOrName, CancellationToken ct);
    public abstract virtual Task`1<QueryResult`1<PreparedQueryExecuteResponse>> Execute(string queryIDOrName, QueryOptions q, CancellationToken ct);
}
public interface Consul.IRawEndpoint {
    public abstract virtual Task`1<QueryResult`1<object>> Query(string endpoint, QueryOptions q, CancellationToken ct);
    public abstract virtual Task`1<WriteResult`1<object>> Write(string endpoint, object obj, WriteOptions q, CancellationToken ct);
}
public interface Consul.IRoleEndpoint {
    public abstract virtual Task`1<WriteResult`1<RoleEntry>> Create(RoleEntry role, CancellationToken ct);
    public abstract virtual Task`1<WriteResult`1<RoleEntry>> Create(RoleEntry role, WriteOptions q, CancellationToken ct);
    public abstract virtual Task`1<WriteResult`1<bool>> Delete(string id, CancellationToken ct);
    public abstract virtual Task`1<WriteResult`1<bool>> Delete(string id, WriteOptions q, CancellationToken ct);
    public abstract virtual Task`1<QueryResult`1<RoleEntry[]>> List(CancellationToken ct);
    public abstract virtual Task`1<QueryResult`1<RoleEntry[]>> List(QueryOptions q, CancellationToken ct);
    public abstract virtual Task`1<QueryResult`1<RoleEntry>> Read(string id, CancellationToken ct);
    public abstract virtual Task`1<QueryResult`1<RoleEntry>> Read(string id, QueryOptions q, CancellationToken ct);
    public abstract virtual Task`1<QueryResult`1<RoleEntry>> ReadByName(string name, CancellationToken ct);
    public abstract virtual Task`1<QueryResult`1<RoleEntry>> ReadByName(string name, QueryOptions q, CancellationToken ct);
    public abstract virtual Task`1<WriteResult`1<RoleEntry>> Update(RoleEntry role, CancellationToken ct);
    public abstract virtual Task`1<WriteResult`1<RoleEntry>> Update(RoleEntry role, WriteOptions q, CancellationToken ct);
}
public interface Consul.ISessionEndpoint {
    public abstract virtual Task`1<WriteResult`1<string>> Create(CancellationToken ct);
    public abstract virtual Task`1<WriteResult`1<string>> Create(SessionEntry se, CancellationToken ct);
    public abstract virtual Task`1<WriteResult`1<string>> Create(SessionEntry se, WriteOptions q, CancellationToken ct);
    public abstract virtual Task`1<WriteResult`1<string>> CreateNoChecks(CancellationToken ct);
    public abstract virtual Task`1<WriteResult`1<string>> CreateNoChecks(SessionEntry se, CancellationToken ct);
    public abstract virtual Task`1<WriteResult`1<string>> CreateNoChecks(SessionEntry se, WriteOptions q, CancellationToken ct);
    public abstract virtual Task`1<WriteResult`1<bool>> Destroy(string id, CancellationToken ct);
    public abstract virtual Task`1<WriteResult`1<bool>> Destroy(string id, WriteOptions q, CancellationToken ct);
    public abstract virtual Task`1<QueryResult`1<SessionEntry>> Info(string id, CancellationToken ct);
    public abstract virtual Task`1<QueryResult`1<SessionEntry>> Info(string id, QueryOptions q, CancellationToken ct);
    public abstract virtual Task`1<QueryResult`1<SessionEntry[]>> List(CancellationToken ct);
    public abstract virtual Task`1<QueryResult`1<SessionEntry[]>> List(QueryOptions q, CancellationToken ct);
    public abstract virtual Task`1<QueryResult`1<SessionEntry[]>> Node(string node, CancellationToken ct);
    public abstract virtual Task`1<QueryResult`1<SessionEntry[]>> Node(string node, QueryOptions q, CancellationToken ct);
    public abstract virtual Task`1<WriteResult`1<SessionEntry>> Renew(string id, CancellationToken ct);
    public abstract virtual Task`1<WriteResult`1<SessionEntry>> Renew(string id, WriteOptions q, CancellationToken ct);
    public abstract virtual Task RenewPeriodic(TimeSpan initialTTL, string id, CancellationToken ct);
    public abstract virtual Task RenewPeriodic(TimeSpan initialTTL, string id, WriteOptions q, CancellationToken ct);
}
public interface Consul.ISnapshotEndpoint {
    public abstract virtual Task`1<QueryResult`1<Stream>> Save(CancellationToken ct);
    public abstract virtual Task`1<QueryResult`1<Stream>> Save(QueryOptions q, CancellationToken ct);
    public abstract virtual Task`1<WriteResult> Restore(Stream s, CancellationToken ct);
    public abstract virtual Task`1<WriteResult> Restore(Stream s, WriteOptions q, CancellationToken ct);
}
public interface Consul.IStatusEndpoint {
    public abstract virtual Task`1<string> Leader(CancellationToken ct);
    public abstract virtual Task`1<String[]> Peers(CancellationToken ct);
}
public interface Consul.ITokenEndpoint {
    public abstract virtual Task`1<WriteResult`1<TokenEntry>> Bootstrap(CancellationToken ct);
    public abstract virtual Task`1<WriteResult`1<TokenEntry>> Bootstrap(WriteOptions q, CancellationToken ct);
    public abstract virtual Task`1<WriteResult`1<TokenEntry>> Clone(string id, CancellationToken ct);
    public abstract virtual Task`1<WriteResult`1<TokenEntry>> Clone(string id, WriteOptions q, CancellationToken ct);
    public abstract virtual Task`1<WriteResult`1<TokenEntry>> Create(TokenEntry token, CancellationToken ct);
    public abstract virtual Task`1<WriteResult`1<TokenEntry>> Create(TokenEntry token, WriteOptions q, CancellationToken ct);
    public abstract virtual Task`1<WriteResult`1<bool>> Delete(string id, CancellationToken ct);
    public abstract virtual Task`1<WriteResult`1<bool>> Delete(string id, WriteOptions q, CancellationToken ct);
    public abstract virtual Task`1<QueryResult`1<TokenEntry>> Read(string id, CancellationToken ct);
    public abstract virtual Task`1<QueryResult`1<TokenEntry>> Read(string id, QueryOptions q, CancellationToken ct);
    public abstract virtual Task`1<QueryResult`1<TokenEntry[]>> List(CancellationToken ct);
    public abstract virtual Task`1<QueryResult`1<TokenEntry[]>> List(QueryOptions q, CancellationToken ct);
    public abstract virtual Task`1<WriteResult`1<TokenEntry>> Update(TokenEntry token, CancellationToken ct);
    public abstract virtual Task`1<WriteResult`1<TokenEntry>> Update(TokenEntry token, WriteOptions q, CancellationToken ct);
}
public class Consul.JSONWebKeySetConfig : object {
    [CompilerGeneratedAttribute]
private LocalJSONWebKeySet <Local>k__BackingField;
    [CompilerGeneratedAttribute]
private RemoteJSONWebKeySet <Remote>k__BackingField;
    [JsonPropertyAttribute]
public LocalJSONWebKeySet Local { get; public set; }
    [JsonPropertyAttribute]
public RemoteJSONWebKeySet Remote { get; public set; }
    [CompilerGeneratedAttribute]
public LocalJSONWebKeySet get_Local();
    [CompilerGeneratedAttribute]
public void set_Local(LocalJSONWebKeySet value);
    [CompilerGeneratedAttribute]
public RemoteJSONWebKeySet get_Remote();
    [CompilerGeneratedAttribute]
public void set_Remote(RemoteJSONWebKeySet value);
}
public class Consul.JWKSClusterConfig : object {
    [CompilerGeneratedAttribute]
private string <DiscoveryType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConnectTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private TLSCertificatesConfig <TLSCertificates>k__BackingField;
    [JsonPropertyAttribute]
public string DiscoveryType { get; public set; }
    [JsonPropertyAttribute]
public string ConnectTimeout { get; public set; }
    [JsonPropertyAttribute]
public TLSCertificatesConfig TLSCertificates { get; public set; }
    [CompilerGeneratedAttribute]
public string get_DiscoveryType();
    [CompilerGeneratedAttribute]
public void set_DiscoveryType(string value);
    [CompilerGeneratedAttribute]
public string get_ConnectTimeout();
    [CompilerGeneratedAttribute]
public void set_ConnectTimeout(string value);
    [CompilerGeneratedAttribute]
public TLSCertificatesConfig get_TLSCertificates();
    [CompilerGeneratedAttribute]
public void set_TLSCertificates(TLSCertificatesConfig value);
}
public class Consul.JWTProvider : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private VerifyClaims <VerifyClaims>k__BackingField;
    [JsonPropertyAttribute]
public string Name { get; public set; }
    [JsonPropertyAttribute]
public VerifyClaims VerifyClaims { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public VerifyClaims get_VerifyClaims();
    [CompilerGeneratedAttribute]
public void set_VerifyClaims(VerifyClaims value);
}
public class Consul.JWTProviderEntry : object {
    [CompilerGeneratedAttribute]
private string <Kind>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Issuer>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<JSONWebKeySetConfig> <JSONWebKeySet>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <Audiences>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ProviderLocation> <Locations>k__BackingField;
    [CompilerGeneratedAttribute]
private ForwardingConfig <Forwarding>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClockSkewSeconds>k__BackingField;
    [CompilerGeneratedAttribute]
private CacheConfig <CacheConfig>k__BackingField;
    [JsonPropertyAttribute]
public string Kind { get; public set; }
    [JsonPropertyAttribute]
public string Name { get; public set; }
    [JsonPropertyAttribute]
public string Issuer { get; public set; }
    [JsonPropertyAttribute]
public List`1<JSONWebKeySetConfig> JSONWebKeySet { get; public set; }
    [JsonPropertyAttribute]
public List`1<string> Audiences { get; public set; }
    [JsonPropertyAttribute]
public List`1<ProviderLocation> Locations { get; public set; }
    [JsonPropertyAttribute]
public ForwardingConfig Forwarding { get; public set; }
    [JsonPropertyAttribute]
public string ClockSkewSeconds { get; public set; }
    [JsonPropertyAttribute]
public CacheConfig CacheConfig { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Kind();
    [CompilerGeneratedAttribute]
public void set_Kind(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Issuer();
    [CompilerGeneratedAttribute]
public void set_Issuer(string value);
    [CompilerGeneratedAttribute]
public List`1<JSONWebKeySetConfig> get_JSONWebKeySet();
    [CompilerGeneratedAttribute]
public void set_JSONWebKeySet(List`1<JSONWebKeySetConfig> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_Audiences();
    [CompilerGeneratedAttribute]
public void set_Audiences(List`1<string> value);
    [CompilerGeneratedAttribute]
public List`1<ProviderLocation> get_Locations();
    [CompilerGeneratedAttribute]
public void set_Locations(List`1<ProviderLocation> value);
    [CompilerGeneratedAttribute]
public ForwardingConfig get_Forwarding();
    [CompilerGeneratedAttribute]
public void set_Forwarding(ForwardingConfig value);
    [CompilerGeneratedAttribute]
public string get_ClockSkewSeconds();
    [CompilerGeneratedAttribute]
public void set_ClockSkewSeconds(string value);
    [CompilerGeneratedAttribute]
public CacheConfig get_CacheConfig();
    [CompilerGeneratedAttribute]
public void set_CacheConfig(CacheConfig value);
}
public class Consul.JWTSettings : object {
    [CompilerGeneratedAttribute]
private List`1<JWTProvider> <Providers>k__BackingField;
    [JsonPropertyAttribute]
public List`1<JWTProvider> Providers { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<JWTProvider> get_Providers();
    [CompilerGeneratedAttribute]
public void set_Providers(List`1<JWTProvider> value);
}
public class Consul.KeyringResponse : object {
    [CompilerGeneratedAttribute]
private bool <WAN>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Datacenter>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, int> <Keys>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NumNodes>k__BackingField;
    public bool WAN { get; public set; }
    public string Datacenter { get; public set; }
    public IDictionary`2<string, int> Keys { get; public set; }
    public int NumNodes { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_WAN();
    [CompilerGeneratedAttribute]
public void set_WAN(bool value);
    [CompilerGeneratedAttribute]
public string get_Datacenter();
    [CompilerGeneratedAttribute]
public void set_Datacenter(string value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, int> get_Keys();
    [CompilerGeneratedAttribute]
public void set_Keys(IDictionary`2<string, int> value);
    [CompilerGeneratedAttribute]
public int get_NumNodes();
    [CompilerGeneratedAttribute]
public void set_NumNodes(int value);
}
public class Consul.KV : object {
    private ConsulClient _client;
    public KV(ConsulClient c);
    public sealed virtual Task`1<WriteResult`1<bool>> Acquire(KVPair p, CancellationToken ct);
    public sealed virtual Task`1<WriteResult`1<bool>> Acquire(KVPair p, WriteOptions q, CancellationToken ct);
    public sealed virtual Task`1<WriteResult`1<bool>> CAS(KVPair p, CancellationToken ct);
    public sealed virtual Task`1<WriteResult`1<bool>> CAS(KVPair p, WriteOptions q, CancellationToken ct);
    public sealed virtual Task`1<WriteResult`1<bool>> Delete(string key, CancellationToken ct);
    public sealed virtual Task`1<WriteResult`1<bool>> Delete(string key, WriteOptions q, CancellationToken ct);
    public sealed virtual Task`1<WriteResult`1<bool>> DeleteCAS(KVPair p, CancellationToken ct);
    public sealed virtual Task`1<WriteResult`1<bool>> DeleteCAS(KVPair p, WriteOptions q, CancellationToken ct);
    public sealed virtual Task`1<WriteResult`1<bool>> DeleteTree(string prefix, CancellationToken ct);
    public sealed virtual Task`1<WriteResult`1<bool>> DeleteTree(string prefix, WriteOptions q, CancellationToken ct);
    public sealed virtual Task`1<QueryResult`1<KVPair>> Get(string key, CancellationToken ct);
    [AsyncStateMachineAttribute("Consul.KV/<Get>d__13")]
public sealed virtual Task`1<QueryResult`1<KVPair>> Get(string key, QueryOptions q, CancellationToken ct);
    public sealed virtual Task`1<QueryResult`1<String[]>> Keys(string prefix, CancellationToken ct);
    public sealed virtual Task`1<QueryResult`1<String[]>> Keys(string prefix, string separator, CancellationToken ct);
    public sealed virtual Task`1<QueryResult`1<String[]>> Keys(string prefix, string separator, QueryOptions q, CancellationToken ct);
    public sealed virtual Task`1<QueryResult`1<KVPair[]>> List(string prefix, CancellationToken ct);
    public sealed virtual Task`1<QueryResult`1<KVPair[]>> List(string prefix, QueryOptions q, CancellationToken ct);
    public sealed virtual Task`1<WriteResult`1<bool>> Put(KVPair p, CancellationToken ct);
    public sealed virtual Task`1<WriteResult`1<bool>> Put(KVPair p, WriteOptions q, CancellationToken ct);
    public sealed virtual Task`1<WriteResult`1<bool>> Release(KVPair p, CancellationToken ct);
    public sealed virtual Task`1<WriteResult`1<bool>> Release(KVPair p, WriteOptions q, CancellationToken ct);
    public sealed virtual Task`1<WriteResult`1<KVTxnResponse>> Txn(List`1<KVTxnOp> txn, CancellationToken ct);
    [AsyncStateMachineAttribute("Consul.KV/<Txn>d__24")]
public sealed virtual Task`1<WriteResult`1<KVTxnResponse>> Txn(List`1<KVTxnOp> txn, WriteOptions q, CancellationToken ct);
}
[JsonConverterAttribute("Consul.KVPairConverter")]
public class Consul.KVPair : object {
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <CreateIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <ModifyIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <LockIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <Flags>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Session>k__BackingField;
    public string Key { get; public set; }
    public ulong CreateIndex { get; public set; }
    public ulong ModifyIndex { get; public set; }
    public ulong LockIndex { get; public set; }
    public ulong Flags { get; public set; }
    public Byte[] Value { get; public set; }
    public string Session { get; public set; }
    public KVPair(string key);
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
public void set_Key(string value);
    [CompilerGeneratedAttribute]
public ulong get_CreateIndex();
    [CompilerGeneratedAttribute]
public void set_CreateIndex(ulong value);
    [CompilerGeneratedAttribute]
public ulong get_ModifyIndex();
    [CompilerGeneratedAttribute]
public void set_ModifyIndex(ulong value);
    [CompilerGeneratedAttribute]
public ulong get_LockIndex();
    [CompilerGeneratedAttribute]
public void set_LockIndex(ulong value);
    [CompilerGeneratedAttribute]
public ulong get_Flags();
    [CompilerGeneratedAttribute]
public void set_Flags(ulong value);
    [CompilerGeneratedAttribute]
public Byte[] get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(Byte[] value);
    [CompilerGeneratedAttribute]
public string get_Session();
    [CompilerGeneratedAttribute]
public void set_Session(string value);
    internal void Validate();
    internal static void ValidatePath(string path);
}
public class Consul.KVPairConverter : JsonConverter {
    private static Lazy`1<String[]> ObjProps;
    public bool CanWrite { get; }
    private static KVPairConverter();
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual bool CanConvert(Type objectType);
    public virtual bool get_CanWrite();
}
public class Consul.KVRateLimit : object {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <ReadRate>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <WriteRate>k__BackingField;
    [JsonPropertyAttribute]
public Nullable`1<int> ReadRate { get; public set; }
    [JsonPropertyAttribute]
public Nullable`1<int> WriteRate { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_ReadRate();
    [CompilerGeneratedAttribute]
public void set_ReadRate(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_WriteRate();
    [CompilerGeneratedAttribute]
public void set_WriteRate(Nullable`1<int> value);
}
public class Consul.KVTxnOp : object {
    [CompilerGeneratedAttribute]
private KVTxnVerb <Verb>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <Flags>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <Index>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Session>k__BackingField;
    public KVTxnVerb Verb { get; public set; }
    public string Key { get; public set; }
    public Byte[] Value { get; public set; }
    public ulong Flags { get; public set; }
    public ulong Index { get; public set; }
    public string Session { get; public set; }
    public KVTxnOp(string key, KVTxnVerb verb);
    [CompilerGeneratedAttribute]
public KVTxnVerb get_Verb();
    [CompilerGeneratedAttribute]
public void set_Verb(KVTxnVerb value);
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
public void set_Key(string value);
    [CompilerGeneratedAttribute]
public Byte[] get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(Byte[] value);
    [CompilerGeneratedAttribute]
public ulong get_Flags();
    [CompilerGeneratedAttribute]
public void set_Flags(ulong value);
    [CompilerGeneratedAttribute]
public ulong get_Index();
    [CompilerGeneratedAttribute]
public void set_Index(ulong value);
    [CompilerGeneratedAttribute]
public string get_Session();
    [CompilerGeneratedAttribute]
public void set_Session(string value);
}
public class Consul.KVTxnResponse : object {
    [CompilerGeneratedAttribute]
private bool <Success>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<TxnError> <Errors>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<KVPair> <Results>k__BackingField;
    [JsonIgnoreAttribute]
public bool Success { get; internal set; }
    [JsonPropertyAttribute]
public List`1<TxnError> Errors { get; internal set; }
    [JsonPropertyAttribute]
public List`1<KVPair> Results { get; internal set; }
    internal KVTxnResponse(TxnResponse txnRes);
    [CompilerGeneratedAttribute]
public bool get_Success();
    [CompilerGeneratedAttribute]
internal void set_Success(bool value);
    [CompilerGeneratedAttribute]
public List`1<TxnError> get_Errors();
    [CompilerGeneratedAttribute]
internal void set_Errors(List`1<TxnError> value);
    [CompilerGeneratedAttribute]
public List`1<KVPair> get_Results();
    [CompilerGeneratedAttribute]
internal void set_Results(List`1<KVPair> value);
}
[JsonConverterAttribute("Consul.KVTxnVerbTypeConverter")]
public class Consul.KVTxnVerb : object {
    [CompilerGeneratedAttribute]
private static KVTxnVerb <Set>k__BackingField;
    [CompilerGeneratedAttribute]
private static KVTxnVerb <Delete>k__BackingField;
    [CompilerGeneratedAttribute]
private static KVTxnVerb <DeleteCAS>k__BackingField;
    [CompilerGeneratedAttribute]
private static KVTxnVerb <DeleteTree>k__BackingField;
    [CompilerGeneratedAttribute]
private static KVTxnVerb <CAS>k__BackingField;
    [CompilerGeneratedAttribute]
private static KVTxnVerb <Lock>k__BackingField;
    [CompilerGeneratedAttribute]
private static KVTxnVerb <Unlock>k__BackingField;
    [CompilerGeneratedAttribute]
private static KVTxnVerb <Get>k__BackingField;
    [CompilerGeneratedAttribute]
private static KVTxnVerb <GetTree>k__BackingField;
    [CompilerGeneratedAttribute]
private static KVTxnVerb <CheckSession>k__BackingField;
    [CompilerGeneratedAttribute]
private static KVTxnVerb <CheckIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Operation>k__BackingField;
    public static KVTxnVerb Set { get; }
    public static KVTxnVerb Delete { get; }
    public static KVTxnVerb DeleteCAS { get; }
    public static KVTxnVerb DeleteTree { get; }
    public static KVTxnVerb CAS { get; }
    public static KVTxnVerb Lock { get; }
    public static KVTxnVerb Unlock { get; }
    public static KVTxnVerb Get { get; }
    public static KVTxnVerb GetTree { get; }
    public static KVTxnVerb CheckSession { get; }
    public static KVTxnVerb CheckIndex { get; }
    public string Operation { get; private set; }
    private static KVTxnVerb();
    [CompilerGeneratedAttribute]
public static KVTxnVerb get_Set();
    [CompilerGeneratedAttribute]
public static KVTxnVerb get_Delete();
    [CompilerGeneratedAttribute]
public static KVTxnVerb get_DeleteCAS();
    [CompilerGeneratedAttribute]
public static KVTxnVerb get_DeleteTree();
    [CompilerGeneratedAttribute]
public static KVTxnVerb get_CAS();
    [CompilerGeneratedAttribute]
public static KVTxnVerb get_Lock();
    [CompilerGeneratedAttribute]
public static KVTxnVerb get_Unlock();
    [CompilerGeneratedAttribute]
public static KVTxnVerb get_Get();
    [CompilerGeneratedAttribute]
public static KVTxnVerb get_GetTree();
    [CompilerGeneratedAttribute]
public static KVTxnVerb get_CheckSession();
    [CompilerGeneratedAttribute]
public static KVTxnVerb get_CheckIndex();
    [CompilerGeneratedAttribute]
public string get_Operation();
    [CompilerGeneratedAttribute]
private void set_Operation(string value);
    public sealed virtual bool Equals(KVTxnVerb other);
    public virtual bool Equals(object other);
    public virtual int GetHashCode();
}
public class Consul.KVTxnVerbTypeConverter : JsonConverter {
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual bool CanConvert(Type objectType);
}
public class Consul.LeastRequestConfig : object {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <ChoiceCount>k__BackingField;
    [JsonPropertyAttribute]
public Nullable`1<int> ChoiceCount { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_ChoiceCount();
    [CompilerGeneratedAttribute]
public void set_ChoiceCount(Nullable`1<int> value);
}
public class Consul.License : object {
    [CompilerGeneratedAttribute]
private string <LicenseId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CustomerId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InstallationId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IssueTime>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StartTime>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExpirationTime>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Product>k__BackingField;
    [CompilerGeneratedAttribute]
private Flags <Flags>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Features>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Temporary>k__BackingField;
    [JsonPropertyAttribute("license_id")]
public string LicenseId { get; public set; }
    [JsonPropertyAttribute("customer_id")]
public string CustomerId { get; public set; }
    [JsonPropertyAttribute("installation_id")]
public string InstallationId { get; public set; }
    [JsonPropertyAttribute("issue_time")]
public string IssueTime { get; public set; }
    [JsonPropertyAttribute("start_time")]
public string StartTime { get; public set; }
    [JsonPropertyAttribute("expiration_time")]
public string ExpirationTime { get; public set; }
    public string Product { get; public set; }
    public Flags Flags { get; public set; }
    public String[] Features { get; public set; }
    public bool Temporary { get; public set; }
    [CompilerGeneratedAttribute]
public string get_LicenseId();
    [CompilerGeneratedAttribute]
public void set_LicenseId(string value);
    [CompilerGeneratedAttribute]
public string get_CustomerId();
    [CompilerGeneratedAttribute]
public void set_CustomerId(string value);
    [CompilerGeneratedAttribute]
public string get_InstallationId();
    [CompilerGeneratedAttribute]
public void set_InstallationId(string value);
    [CompilerGeneratedAttribute]
public string get_IssueTime();
    [CompilerGeneratedAttribute]
public void set_IssueTime(string value);
    [CompilerGeneratedAttribute]
public string get_StartTime();
    [CompilerGeneratedAttribute]
public void set_StartTime(string value);
    [CompilerGeneratedAttribute]
public string get_ExpirationTime();
    [CompilerGeneratedAttribute]
public void set_ExpirationTime(string value);
    [CompilerGeneratedAttribute]
public string get_Product();
    [CompilerGeneratedAttribute]
public void set_Product(string value);
    [CompilerGeneratedAttribute]
public Flags get_Flags();
    [CompilerGeneratedAttribute]
public void set_Flags(Flags value);
    [CompilerGeneratedAttribute]
public String[] get_Features();
    [CompilerGeneratedAttribute]
public void set_Features(String[] value);
    [CompilerGeneratedAttribute]
public bool get_Temporary();
    [CompilerGeneratedAttribute]
public void set_Temporary(bool value);
}
public class Consul.LimitsConfig : object {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxConnections>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxPendingRequests>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxConcurrentRequests>k__BackingField;
    [JsonPropertyAttribute]
public Nullable`1<int> MaxConnections { get; public set; }
    [JsonPropertyAttribute]
public Nullable`1<int> MaxPendingRequests { get; public set; }
    [JsonPropertyAttribute]
public Nullable`1<int> MaxConcurrentRequests { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaxConnections();
    [CompilerGeneratedAttribute]
public void set_MaxConnections(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaxPendingRequests();
    [CompilerGeneratedAttribute]
public void set_MaxPendingRequests(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaxConcurrentRequests();
    [CompilerGeneratedAttribute]
public void set_MaxConcurrentRequests(Nullable`1<int> value);
}
public class Consul.LinkedService : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Namespace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CAFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CertFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <KeyFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SNI>k__BackingField;
    [JsonPropertyAttribute]
public string Name { get; public set; }
    [JsonPropertyAttribute]
public string Namespace { get; public set; }
    [JsonPropertyAttribute]
public string CAFile { get; public set; }
    [JsonPropertyAttribute]
public string CertFile { get; public set; }
    [JsonPropertyAttribute]
public string KeyFile { get; public set; }
    [JsonPropertyAttribute]
public string SNI { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Namespace();
    [CompilerGeneratedAttribute]
public void set_Namespace(string value);
    [CompilerGeneratedAttribute]
public string get_CAFile();
    [CompilerGeneratedAttribute]
public void set_CAFile(string value);
    [CompilerGeneratedAttribute]
public string get_CertFile();
    [CompilerGeneratedAttribute]
public void set_CertFile(string value);
    [CompilerGeneratedAttribute]
public string get_KeyFile();
    [CompilerGeneratedAttribute]
public void set_KeyFile(string value);
    [CompilerGeneratedAttribute]
public string get_SNI();
    [CompilerGeneratedAttribute]
public void set_SNI(string value);
}
public class Consul.LoadBalancerConfig : object {
    [CompilerGeneratedAttribute]
private string <Policy>k__BackingField;
    [CompilerGeneratedAttribute]
private LeastRequestConfig <LeastRequestConfig>k__BackingField;
    [CompilerGeneratedAttribute]
private RingHashConfig <RingHashConfig>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <HashPolicies>k__BackingField;
    [CompilerGeneratedAttribute]
private CookieConfig <CookieConfig>k__BackingField;
    [JsonPropertyAttribute]
public string Policy { get; public set; }
    [JsonPropertyAttribute]
public LeastRequestConfig LeastRequestConfig { get; public set; }
    [JsonPropertyAttribute]
public RingHashConfig RingHashConfig { get; public set; }
    [JsonPropertyAttribute]
public Dictionary`2<string, string> HashPolicies { get; public set; }
    [JsonPropertyAttribute]
public CookieConfig CookieConfig { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Policy();
    [CompilerGeneratedAttribute]
public void set_Policy(string value);
    [CompilerGeneratedAttribute]
public LeastRequestConfig get_LeastRequestConfig();
    [CompilerGeneratedAttribute]
public void set_LeastRequestConfig(LeastRequestConfig value);
    [CompilerGeneratedAttribute]
public RingHashConfig get_RingHashConfig();
    [CompilerGeneratedAttribute]
public void set_RingHashConfig(RingHashConfig value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_HashPolicies();
    [CompilerGeneratedAttribute]
public void set_HashPolicies(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public CookieConfig get_CookieConfig();
    [CompilerGeneratedAttribute]
public void set_CookieConfig(CookieConfig value);
}
public class Consul.LocalJSONWebKeySet : object {
    [CompilerGeneratedAttribute]
private string <JWKS>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Filename>k__BackingField;
    [JsonPropertyAttribute]
public string JWKS { get; public set; }
    [JsonPropertyAttribute]
public string Filename { get; public set; }
    [CompilerGeneratedAttribute]
public string get_JWKS();
    [CompilerGeneratedAttribute]
public void set_JWKS(string value);
    [CompilerGeneratedAttribute]
public string get_Filename();
    [CompilerGeneratedAttribute]
public void set_Filename(string value);
}
public class Consul.LocalServiceHealth : object {
    [CompilerGeneratedAttribute]
private HealthStatus <AggregatedStatus>k__BackingField;
    [CompilerGeneratedAttribute]
private AgentService <Service>k__BackingField;
    [CompilerGeneratedAttribute]
private AgentCheck[] <Checks>k__BackingField;
    [JsonConverterAttribute("Consul.HealthStatusConverter")]
public HealthStatus AggregatedStatus { get; public set; }
    public AgentService Service { get; public set; }
    public AgentCheck[] Checks { get; public set; }
    [CompilerGeneratedAttribute]
public HealthStatus get_AggregatedStatus();
    [CompilerGeneratedAttribute]
public void set_AggregatedStatus(HealthStatus value);
    [CompilerGeneratedAttribute]
public AgentService get_Service();
    [CompilerGeneratedAttribute]
public void set_Service(AgentService value);
    [CompilerGeneratedAttribute]
public AgentCheck[] get_Checks();
    [CompilerGeneratedAttribute]
public void set_Checks(AgentCheck[] value);
}
public class Consul.Lock : object {
    public static TimeSpan DefaultLockWaitTime;
    public static TimeSpan DefaultLockRetryTime;
    public static TimeSpan DefaultMonitorRetryTime;
    private static ulong LockFlagValue;
    private AsyncLock _mutex;
    private bool _isheld;
    private int _retries;
    private CancellationTokenSource _cts;
    private Task _sessionRenewTask;
    private Task _monitorTask;
    private ConsulClient _client;
    [CompilerGeneratedAttribute]
private LockOptions <Opts>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LockSession>k__BackingField;
    internal LockOptions Opts { get; internal set; }
    internal string LockSession { get; internal set; }
    public bool IsHeld { get; private set; }
    internal Lock(ConsulClient c);
    private static Lock();
    [CompilerGeneratedAttribute]
internal LockOptions get_Opts();
    [CompilerGeneratedAttribute]
internal void set_Opts(LockOptions value);
    [CompilerGeneratedAttribute]
internal string get_LockSession();
    [CompilerGeneratedAttribute]
internal void set_LockSession(string value);
    public sealed virtual bool get_IsHeld();
    private void set_IsHeld(bool value);
    public Task`1<CancellationToken> Acquire();
    [AsyncStateMachineAttribute("Consul.Lock/<Acquire>d__24")]
public sealed virtual Task`1<CancellationToken> Acquire(CancellationToken ct);
    [AsyncStateMachineAttribute("Consul.Lock/<Release>d__25")]
public sealed virtual Task Release(CancellationToken ct);
    [AsyncStateMachineAttribute("Consul.Lock/<Destroy>d__26")]
public sealed virtual Task Destroy(CancellationToken ct);
    private void DisposeCancellationTokenSource();
    private Task MonitorLock();
    [AsyncStateMachineAttribute("Consul.Lock/<CreateSession>d__29")]
private Task`1<string> CreateSession();
    private KVPair LockEntry(string session);
    [CompilerGeneratedAttribute]
[AsyncStateMachineAttribute("Consul.Lock/<<MonitorLock>b__28_0>d")]
private Task <MonitorLock>b__28_0();
}
public class Consul.LockConflictException : Exception {
    public LockConflictException(string message);
    public LockConflictException(string message, Exception inner);
    protected LockConflictException(SerializationInfo info, StreamingContext context);
}
public class Consul.LockHeldException : Exception {
    public LockHeldException(string message);
    public LockHeldException(string message, Exception inner);
    protected LockHeldException(SerializationInfo info, StreamingContext context);
}
public class Consul.LockInUseException : Exception {
    public LockInUseException(string message);
    public LockInUseException(string message, Exception inner);
    protected LockInUseException(SerializationInfo info, StreamingContext context);
}
public class Consul.LockMaxAttemptsReachedException : Exception {
    public LockMaxAttemptsReachedException(string message);
    public LockMaxAttemptsReachedException(string message, Exception inner);
    protected LockMaxAttemptsReachedException(SerializationInfo info, StreamingContext context);
}
public class Consul.LockNotHeldException : Exception {
    public LockNotHeldException(string message);
    public LockNotHeldException(string message, Exception inner);
    protected LockNotHeldException(SerializationInfo info, StreamingContext context);
}
public class Consul.LockOptions : object {
    private static string DefaultLockSessionName;
    private static TimeSpan LockRetryTimeMin;
    private static TimeSpan DefaultLockSessionTTL;
    private TimeSpan _lockRetryTime;
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Session>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SessionName>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <SessionTTL>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MonitorRetries>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <LockWaitTime>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <MonitorRetryTime>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <LockTryOnce>k__BackingField;
    public string Key { get; public set; }
    public Byte[] Value { get; public set; }
    public string Session { get; public set; }
    public string SessionName { get; public set; }
    public TimeSpan SessionTTL { get; public set; }
    public int MonitorRetries { get; public set; }
    public TimeSpan LockRetryTime { get; public set; }
    public TimeSpan LockWaitTime { get; public set; }
    public TimeSpan MonitorRetryTime { get; public set; }
    public bool LockTryOnce { get; public set; }
    public LockOptions(string key);
    private static LockOptions();
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
public void set_Key(string value);
    [CompilerGeneratedAttribute]
public Byte[] get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(Byte[] value);
    [CompilerGeneratedAttribute]
public string get_Session();
    [CompilerGeneratedAttribute]
public void set_Session(string value);
    [CompilerGeneratedAttribute]
public string get_SessionName();
    [CompilerGeneratedAttribute]
public void set_SessionName(string value);
    [CompilerGeneratedAttribute]
public TimeSpan get_SessionTTL();
    [CompilerGeneratedAttribute]
public void set_SessionTTL(TimeSpan value);
    [CompilerGeneratedAttribute]
public int get_MonitorRetries();
    [CompilerGeneratedAttribute]
public void set_MonitorRetries(int value);
    public TimeSpan get_LockRetryTime();
    public void set_LockRetryTime(TimeSpan value);
    [CompilerGeneratedAttribute]
public TimeSpan get_LockWaitTime();
    [CompilerGeneratedAttribute]
public void set_LockWaitTime(TimeSpan value);
    [CompilerGeneratedAttribute]
public TimeSpan get_MonitorRetryTime();
    [CompilerGeneratedAttribute]
public void set_MonitorRetryTime(TimeSpan value);
    [CompilerGeneratedAttribute]
public bool get_LockTryOnce();
    [CompilerGeneratedAttribute]
public void set_LockTryOnce(bool value);
}
public enum Consul.LogLevel : Enum {
    public int value__;
    public static LogLevel Info;
    public static LogLevel Trace;
    public static LogLevel Debug;
    public static LogLevel Warn;
    public static LogLevel Err;
}
public class Consul.MapConfig : object {
    [CompilerGeneratedAttribute]
private string <PathExact>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PathPrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PathRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <Methods>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<HeaderConfig> <Header>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<QueryParamConfig> <QueryParam>k__BackingField;
    [JsonPropertyAttribute]
public string PathExact { get; public set; }
    [JsonPropertyAttribute]
public string PathPrefix { get; public set; }
    [JsonPropertyAttribute]
public string PathRegex { get; public set; }
    [JsonPropertyAttribute]
public List`1<string> Methods { get; public set; }
    [JsonPropertyAttribute]
public List`1<HeaderConfig> Header { get; public set; }
    [JsonPropertyAttribute]
public List`1<QueryParamConfig> QueryParam { get; public set; }
    [CompilerGeneratedAttribute]
public string get_PathExact();
    [CompilerGeneratedAttribute]
public void set_PathExact(string value);
    [CompilerGeneratedAttribute]
public string get_PathPrefix();
    [CompilerGeneratedAttribute]
public void set_PathPrefix(string value);
    [CompilerGeneratedAttribute]
public string get_PathRegex();
    [CompilerGeneratedAttribute]
public void set_PathRegex(string value);
    [CompilerGeneratedAttribute]
public List`1<string> get_Methods();
    [CompilerGeneratedAttribute]
public void set_Methods(List`1<string> value);
    [CompilerGeneratedAttribute]
public List`1<HeaderConfig> get_Header();
    [CompilerGeneratedAttribute]
public void set_Header(List`1<HeaderConfig> value);
    [CompilerGeneratedAttribute]
public List`1<QueryParamConfig> get_QueryParam();
    [CompilerGeneratedAttribute]
public void set_QueryParam(List`1<QueryParamConfig> value);
}
public class Consul.MemoryInfo : object {
    [CompilerGeneratedAttribute]
private long <Total>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Available>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Used>k__BackingField;
    [CompilerGeneratedAttribute]
private double <UsedPercent>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Free>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Active>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Inactive>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Wired>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Laundry>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Buffers>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Cached>k__BackingField;
    [CompilerGeneratedAttribute]
private long <WriteBack>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Dirty>k__BackingField;
    [CompilerGeneratedAttribute]
private long <WriteBackTmp>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Shared>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Slab>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Sreclaimable>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Sunreclaim>k__BackingField;
    [CompilerGeneratedAttribute]
private long <PageTables>k__BackingField;
    [CompilerGeneratedAttribute]
private long <SwapCached>k__BackingField;
    [CompilerGeneratedAttribute]
private long <CommitLimit>k__BackingField;
    [CompilerGeneratedAttribute]
private long <CommittedAS>k__BackingField;
    [CompilerGeneratedAttribute]
private long <HighTotal>k__BackingField;
    [CompilerGeneratedAttribute]
private long <HighFree>k__BackingField;
    [CompilerGeneratedAttribute]
private long <LowTotal>k__BackingField;
    [CompilerGeneratedAttribute]
private long <LowFree>k__BackingField;
    [CompilerGeneratedAttribute]
private long <SwapTotal>k__BackingField;
    [CompilerGeneratedAttribute]
private long <SwapFree>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Mapped>k__BackingField;
    [CompilerGeneratedAttribute]
private long <VmallocTotal>k__BackingField;
    [CompilerGeneratedAttribute]
private long <VmallocUsed>k__BackingField;
    [CompilerGeneratedAttribute]
private long <VmallocChunk>k__BackingField;
    [CompilerGeneratedAttribute]
private long <HugePagesTotal>k__BackingField;
    [CompilerGeneratedAttribute]
private long <HugePagesFree>k__BackingField;
    [CompilerGeneratedAttribute]
private long <HugePageSize>k__BackingField;
    public long Total { get; public set; }
    public long Available { get; public set; }
    public long Used { get; public set; }
    public double UsedPercent { get; public set; }
    public long Free { get; public set; }
    public long Active { get; public set; }
    public long Inactive { get; public set; }
    public long Wired { get; public set; }
    public long Laundry { get; public set; }
    public long Buffers { get; public set; }
    public long Cached { get; public set; }
    public long WriteBack { get; public set; }
    public long Dirty { get; public set; }
    public long WriteBackTmp { get; public set; }
    public long Shared { get; public set; }
    public long Slab { get; public set; }
    public long Sreclaimable { get; public set; }
    public long Sunreclaim { get; public set; }
    public long PageTables { get; public set; }
    public long SwapCached { get; public set; }
    public long CommitLimit { get; public set; }
    public long CommittedAS { get; public set; }
    public long HighTotal { get; public set; }
    public long HighFree { get; public set; }
    public long LowTotal { get; public set; }
    public long LowFree { get; public set; }
    public long SwapTotal { get; public set; }
    public long SwapFree { get; public set; }
    public long Mapped { get; public set; }
    public long VmallocTotal { get; public set; }
    public long VmallocUsed { get; public set; }
    public long VmallocChunk { get; public set; }
    public long HugePagesTotal { get; public set; }
    public long HugePagesFree { get; public set; }
    public long HugePageSize { get; public set; }
    [CompilerGeneratedAttribute]
public long get_Total();
    [CompilerGeneratedAttribute]
public void set_Total(long value);
    [CompilerGeneratedAttribute]
public long get_Available();
    [CompilerGeneratedAttribute]
public void set_Available(long value);
    [CompilerGeneratedAttribute]
public long get_Used();
    [CompilerGeneratedAttribute]
public void set_Used(long value);
    [CompilerGeneratedAttribute]
public double get_UsedPercent();
    [CompilerGeneratedAttribute]
public void set_UsedPercent(double value);
    [CompilerGeneratedAttribute]
public long get_Free();
    [CompilerGeneratedAttribute]
public void set_Free(long value);
    [CompilerGeneratedAttribute]
public long get_Active();
    [CompilerGeneratedAttribute]
public void set_Active(long value);
    [CompilerGeneratedAttribute]
public long get_Inactive();
    [CompilerGeneratedAttribute]
public void set_Inactive(long value);
    [CompilerGeneratedAttribute]
public long get_Wired();
    [CompilerGeneratedAttribute]
public void set_Wired(long value);
    [CompilerGeneratedAttribute]
public long get_Laundry();
    [CompilerGeneratedAttribute]
public void set_Laundry(long value);
    [CompilerGeneratedAttribute]
public long get_Buffers();
    [CompilerGeneratedAttribute]
public void set_Buffers(long value);
    [CompilerGeneratedAttribute]
public long get_Cached();
    [CompilerGeneratedAttribute]
public void set_Cached(long value);
    [CompilerGeneratedAttribute]
public long get_WriteBack();
    [CompilerGeneratedAttribute]
public void set_WriteBack(long value);
    [CompilerGeneratedAttribute]
public long get_Dirty();
    [CompilerGeneratedAttribute]
public void set_Dirty(long value);
    [CompilerGeneratedAttribute]
public long get_WriteBackTmp();
    [CompilerGeneratedAttribute]
public void set_WriteBackTmp(long value);
    [CompilerGeneratedAttribute]
public long get_Shared();
    [CompilerGeneratedAttribute]
public void set_Shared(long value);
    [CompilerGeneratedAttribute]
public long get_Slab();
    [CompilerGeneratedAttribute]
public void set_Slab(long value);
    [CompilerGeneratedAttribute]
public long get_Sreclaimable();
    [CompilerGeneratedAttribute]
public void set_Sreclaimable(long value);
    [CompilerGeneratedAttribute]
public long get_Sunreclaim();
    [CompilerGeneratedAttribute]
public void set_Sunreclaim(long value);
    [CompilerGeneratedAttribute]
public long get_PageTables();
    [CompilerGeneratedAttribute]
public void set_PageTables(long value);
    [CompilerGeneratedAttribute]
public long get_SwapCached();
    [CompilerGeneratedAttribute]
public void set_SwapCached(long value);
    [CompilerGeneratedAttribute]
public long get_CommitLimit();
    [CompilerGeneratedAttribute]
public void set_CommitLimit(long value);
    [CompilerGeneratedAttribute]
public long get_CommittedAS();
    [CompilerGeneratedAttribute]
public void set_CommittedAS(long value);
    [CompilerGeneratedAttribute]
public long get_HighTotal();
    [CompilerGeneratedAttribute]
public void set_HighTotal(long value);
    [CompilerGeneratedAttribute]
public long get_HighFree();
    [CompilerGeneratedAttribute]
public void set_HighFree(long value);
    [CompilerGeneratedAttribute]
public long get_LowTotal();
    [CompilerGeneratedAttribute]
public void set_LowTotal(long value);
    [CompilerGeneratedAttribute]
public long get_LowFree();
    [CompilerGeneratedAttribute]
public void set_LowFree(long value);
    [CompilerGeneratedAttribute]
public long get_SwapTotal();
    [CompilerGeneratedAttribute]
public void set_SwapTotal(long value);
    [CompilerGeneratedAttribute]
public long get_SwapFree();
    [CompilerGeneratedAttribute]
public void set_SwapFree(long value);
    [CompilerGeneratedAttribute]
public long get_Mapped();
    [CompilerGeneratedAttribute]
public void set_Mapped(long value);
    [CompilerGeneratedAttribute]
public long get_VmallocTotal();
    [CompilerGeneratedAttribute]
public void set_VmallocTotal(long value);
    [CompilerGeneratedAttribute]
public long get_VmallocUsed();
    [CompilerGeneratedAttribute]
public void set_VmallocUsed(long value);
    [CompilerGeneratedAttribute]
public long get_VmallocChunk();
    [CompilerGeneratedAttribute]
public void set_VmallocChunk(long value);
    [CompilerGeneratedAttribute]
public long get_HugePagesTotal();
    [CompilerGeneratedAttribute]
public void set_HugePagesTotal(long value);
    [CompilerGeneratedAttribute]
public long get_HugePagesFree();
    [CompilerGeneratedAttribute]
public void set_HugePagesFree(long value);
    [CompilerGeneratedAttribute]
public long get_HugePageSize();
    [CompilerGeneratedAttribute]
public void set_HugePageSize(long value);
}
public class Consul.MeshEntry : object {
    [CompilerGeneratedAttribute]
private string <Kind>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Namespace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Partition>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Meta>k__BackingField;
    [CompilerGeneratedAttribute]
private TransparentProxyConfig <TransparentProxy>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MeshDestinationsOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowEnablingPermissiveMutualTLS>k__BackingField;
    [CompilerGeneratedAttribute]
private TLSConfig <TLS>k__BackingField;
    [CompilerGeneratedAttribute]
private TLSDirectionConfig <Incoming>k__BackingField;
    [CompilerGeneratedAttribute]
private TLSDirectionConfig <Outgoing>k__BackingField;
    [CompilerGeneratedAttribute]
private HTTPConfig <HTTP>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SanitizeXForwardedClientCert>k__BackingField;
    [CompilerGeneratedAttribute]
private PeeringMeshConfig <Peering>k__BackingField;
    [JsonPropertyAttribute]
public string Kind { get; public set; }
    [JsonPropertyAttribute]
public string Namespace { get; public set; }
    [JsonPropertyAttribute]
public string Partition { get; public set; }
    [JsonPropertyAttribute]
public Dictionary`2<string, string> Meta { get; public set; }
    [JsonPropertyAttribute]
public TransparentProxyConfig TransparentProxy { get; public set; }
    [JsonPropertyAttribute]
public bool MeshDestinationsOnly { get; public set; }
    [JsonPropertyAttribute]
public bool AllowEnablingPermissiveMutualTLS { get; public set; }
    [JsonPropertyAttribute]
public TLSConfig TLS { get; public set; }
    [JsonPropertyAttribute]
public TLSDirectionConfig Incoming { get; public set; }
    [JsonPropertyAttribute]
public TLSDirectionConfig Outgoing { get; public set; }
    [JsonPropertyAttribute]
public HTTPConfig HTTP { get; public set; }
    [JsonPropertyAttribute]
public bool SanitizeXForwardedClientCert { get; public set; }
    [JsonPropertyAttribute]
public PeeringMeshConfig Peering { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_Kind();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Kind(string value);
    [CompilerGeneratedAttribute]
public string get_Namespace();
    [CompilerGeneratedAttribute]
public void set_Namespace(string value);
    [CompilerGeneratedAttribute]
public string get_Partition();
    [CompilerGeneratedAttribute]
public void set_Partition(string value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_Meta();
    [CompilerGeneratedAttribute]
public void set_Meta(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public TransparentProxyConfig get_TransparentProxy();
    [CompilerGeneratedAttribute]
public void set_TransparentProxy(TransparentProxyConfig value);
    [CompilerGeneratedAttribute]
public bool get_MeshDestinationsOnly();
    [CompilerGeneratedAttribute]
public void set_MeshDestinationsOnly(bool value);
    [CompilerGeneratedAttribute]
public bool get_AllowEnablingPermissiveMutualTLS();
    [CompilerGeneratedAttribute]
public void set_AllowEnablingPermissiveMutualTLS(bool value);
    [CompilerGeneratedAttribute]
public TLSConfig get_TLS();
    [CompilerGeneratedAttribute]
public void set_TLS(TLSConfig value);
    [CompilerGeneratedAttribute]
public TLSDirectionConfig get_Incoming();
    [CompilerGeneratedAttribute]
public void set_Incoming(TLSDirectionConfig value);
    [CompilerGeneratedAttribute]
public TLSDirectionConfig get_Outgoing();
    [CompilerGeneratedAttribute]
public void set_Outgoing(TLSDirectionConfig value);
    [CompilerGeneratedAttribute]
public HTTPConfig get_HTTP();
    [CompilerGeneratedAttribute]
public void set_HTTP(HTTPConfig value);
    [CompilerGeneratedAttribute]
public bool get_SanitizeXForwardedClientCert();
    [CompilerGeneratedAttribute]
public void set_SanitizeXForwardedClientCert(bool value);
    [CompilerGeneratedAttribute]
public PeeringMeshConfig get_Peering();
    [CompilerGeneratedAttribute]
public void set_Peering(PeeringMeshConfig value);
}
public class Consul.MeshGatewayConfig : object {
    [CompilerGeneratedAttribute]
private string <Mode>k__BackingField;
    [JsonPropertyAttribute]
public string Mode { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Mode();
    [CompilerGeneratedAttribute]
public void set_Mode(string value);
}
public class Consul.Metrics : object {
    [CompilerGeneratedAttribute]
private string <Timestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Gauge> <Gauges>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Point> <Points>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Counter> <Counters>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Sample> <Samples>k__BackingField;
    public string Timestamp { get; public set; }
    public List`1<Gauge> Gauges { get; public set; }
    public List`1<Point> Points { get; public set; }
    public List`1<Counter> Counters { get; public set; }
    public List`1<Sample> Samples { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Timestamp();
    [CompilerGeneratedAttribute]
public void set_Timestamp(string value);
    [CompilerGeneratedAttribute]
public List`1<Gauge> get_Gauges();
    [CompilerGeneratedAttribute]
public void set_Gauges(List`1<Gauge> value);
    [CompilerGeneratedAttribute]
public List`1<Point> get_Points();
    [CompilerGeneratedAttribute]
public void set_Points(List`1<Point> value);
    [CompilerGeneratedAttribute]
public List`1<Counter> get_Counters();
    [CompilerGeneratedAttribute]
public void set_Counters(List`1<Counter> value);
    [CompilerGeneratedAttribute]
public List`1<Sample> get_Samples();
    [CompilerGeneratedAttribute]
public void set_Samples(List`1<Sample> value);
}
public class Consul.Namespace : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private NamespaceACLConfig <ACLs>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Meta>k__BackingField;
    public string Name { get; public set; }
    public string Description { get; public set; }
    [JsonPropertyAttribute]
public NamespaceACLConfig ACLs { get; public set; }
    [JsonPropertyAttribute]
public Dictionary`2<string, string> Meta { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public NamespaceACLConfig get_ACLs();
    [CompilerGeneratedAttribute]
public void set_ACLs(NamespaceACLConfig value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_Meta();
    [CompilerGeneratedAttribute]
public void set_Meta(Dictionary`2<string, string> value);
}
public class Consul.NamespaceACLConfig : object {
    [CompilerGeneratedAttribute]
private List`1<AuthMethodEntry> <PolicyDefaults>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<AuthMethodEntry> <RoleDefaults>k__BackingField;
    public List`1<AuthMethodEntry> PolicyDefaults { get; public set; }
    public List`1<AuthMethodEntry> RoleDefaults { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<AuthMethodEntry> get_PolicyDefaults();
    [CompilerGeneratedAttribute]
public void set_PolicyDefaults(List`1<AuthMethodEntry> value);
    [CompilerGeneratedAttribute]
public List`1<AuthMethodEntry> get_RoleDefaults();
    [CompilerGeneratedAttribute]
public void set_RoleDefaults(List`1<AuthMethodEntry> value);
}
public class Consul.NamespaceResponse : Namespace {
    [CompilerGeneratedAttribute]
private ulong <CreateIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <ModifyIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <DeletedAt>k__BackingField;
    public ulong CreateIndex { get; public set; }
    public ulong ModifyIndex { get; public set; }
    public Nullable`1<DateTime> DeletedAt { get; public set; }
    [CompilerGeneratedAttribute]
public ulong get_CreateIndex();
    [CompilerGeneratedAttribute]
public void set_CreateIndex(ulong value);
    [CompilerGeneratedAttribute]
public ulong get_ModifyIndex();
    [CompilerGeneratedAttribute]
public void set_ModifyIndex(ulong value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_DeletedAt();
    [CompilerGeneratedAttribute]
public void set_DeletedAt(Nullable`1<DateTime> value);
}
public class Consul.Namespaces : object {
    private ConsulClient _client;
    internal Namespaces(ConsulClient c);
    [AsyncStateMachineAttribute("Consul.Namespaces/<Create>d__2")]
public sealed virtual Task`1<WriteResult`1<NamespaceResponse>> Create(Namespace ns, WriteOptions q, CancellationToken ct);
    [AsyncStateMachineAttribute("Consul.Namespaces/<Create>d__3")]
public sealed virtual Task`1<WriteResult`1<NamespaceResponse>> Create(Namespace ns, CancellationToken ct);
    [AsyncStateMachineAttribute("Consul.Namespaces/<Update>d__4")]
public sealed virtual Task`1<WriteResult`1<NamespaceResponse>> Update(Namespace ns, WriteOptions q, CancellationToken ct);
    [AsyncStateMachineAttribute("Consul.Namespaces/<Update>d__5")]
public sealed virtual Task`1<WriteResult`1<NamespaceResponse>> Update(Namespace ns, CancellationToken ct);
    [AsyncStateMachineAttribute("Consul.Namespaces/<Read>d__6")]
public sealed virtual Task`1<QueryResult`1<NamespaceResponse>> Read(string name, QueryOptions q, CancellationToken ct);
    [AsyncStateMachineAttribute("Consul.Namespaces/<Read>d__7")]
public sealed virtual Task`1<QueryResult`1<NamespaceResponse>> Read(string name, CancellationToken ct);
    [AsyncStateMachineAttribute("Consul.Namespaces/<List>d__8")]
public sealed virtual Task`1<QueryResult`1<NamespaceResponse[]>> List(QueryOptions q, CancellationToken ct);
    [AsyncStateMachineAttribute("Consul.Namespaces/<List>d__9")]
public sealed virtual Task`1<QueryResult`1<NamespaceResponse[]>> List(CancellationToken ct);
    [AsyncStateMachineAttribute("Consul.Namespaces/<Delete>d__10")]
public sealed virtual Task`1<WriteResult> Delete(string name, WriteOptions q, CancellationToken ct);
    [AsyncStateMachineAttribute("Consul.Namespaces/<Delete>d__11")]
public sealed virtual Task`1<WriteResult> Delete(string name, CancellationToken ct);
}
public class Consul.NanoSecTimespanConverter : JsonConverter {
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual bool CanConvert(Type objectType);
}
public class Consul.Node : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Address>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <TaggedAddresses>k__BackingField;
    [JsonPropertyAttribute]
public string Name { get; public set; }
    public string Address { get; public set; }
    public Dictionary`2<string, string> TaggedAddresses { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Address();
    [CompilerGeneratedAttribute]
public void set_Address(string value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_TaggedAddresses();
    [CompilerGeneratedAttribute]
public void set_TaggedAddresses(Dictionary`2<string, string> value);
}
public class Consul.NodeInfo : object {
    [CompilerGeneratedAttribute]
private string <ID>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Node>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Address>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Datacenter>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <TaggedAddresses>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Meta>k__BackingField;
    public string ID { get; public set; }
    public string Node { get; public set; }
    public string Address { get; public set; }
    public string Datacenter { get; public set; }
    public Dictionary`2<string, string> TaggedAddresses { get; public set; }
    public Dictionary`2<string, string> Meta { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ID();
    [CompilerGeneratedAttribute]
public void set_ID(string value);
    [CompilerGeneratedAttribute]
public string get_Node();
    [CompilerGeneratedAttribute]
public void set_Node(string value);
    [CompilerGeneratedAttribute]
public string get_Address();
    [CompilerGeneratedAttribute]
public void set_Address(string value);
    [CompilerGeneratedAttribute]
public string get_Datacenter();
    [CompilerGeneratedAttribute]
public void set_Datacenter(string value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_TaggedAddresses();
    [CompilerGeneratedAttribute]
public void set_TaggedAddresses(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_Meta();
    [CompilerGeneratedAttribute]
public void set_Meta(Dictionary`2<string, string> value);
}
public class Consul.NodeService : object {
    [CompilerGeneratedAttribute]
private NodeInfo <Node>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ServiceInfo> <Services>k__BackingField;
    public NodeInfo Node { get; public set; }
    public List`1<ServiceInfo> Services { get; public set; }
    [CompilerGeneratedAttribute]
public NodeInfo get_Node();
    [CompilerGeneratedAttribute]
public void set_Node(NodeInfo value);
    [CompilerGeneratedAttribute]
public List`1<ServiceInfo> get_Services();
    [CompilerGeneratedAttribute]
public void set_Services(List`1<ServiceInfo> value);
}
public class Consul.Operator : object {
    private ConsulClient _client;
    internal Operator(ConsulClient c);
    public sealed virtual Task`1<QueryResult`1<RaftConfiguration>> RaftGetConfiguration(CancellationToken ct);
    public sealed virtual Task`1<QueryResult`1<RaftConfiguration>> RaftGetConfiguration(QueryOptions q, CancellationToken ct);
    public sealed virtual Task`1<WriteResult> RaftRemovePeerByAddress(string address, CancellationToken ct);
    public sealed virtual Task`1<WriteResult> RaftRemovePeerByAddress(string address, WriteOptions q, CancellationToken ct);
    public sealed virtual Task`1<WriteResult> KeyringInstall(string key, CancellationToken ct);
    public sealed virtual Task`1<WriteResult> KeyringInstall(string key, WriteOptions q, CancellationToken ct);
    public sealed virtual Task`1<QueryResult`1<KeyringResponse[]>> KeyringList(CancellationToken ct);
    public sealed virtual Task`1<QueryResult`1<KeyringResponse[]>> KeyringList(QueryOptions q, CancellationToken ct);
    public sealed virtual Task`1<WriteResult> KeyringRemove(string key, CancellationToken ct);
    public sealed virtual Task`1<WriteResult> KeyringRemove(string key, WriteOptions q, CancellationToken ct);
    public sealed virtual Task`1<WriteResult> KeyringUse(string key, CancellationToken ct);
    public sealed virtual Task`1<WriteResult> KeyringUse(string key, WriteOptions q, CancellationToken ct);
    public sealed virtual Task`1<QueryResult`1<ConsulLicense>> GetConsulLicense(string datacenter, CancellationToken ct);
}
public class Consul.OverrideConfig : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Namespace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Peer>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Protocol>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <ConnectTimeoutMs>k__BackingField;
    [CompilerGeneratedAttribute]
private MeshGatewayConfig <MeshGateway>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BalanceOutboundConnections>k__BackingField;
    [CompilerGeneratedAttribute]
private LimitsConfig <Limits>k__BackingField;
    [CompilerGeneratedAttribute]
private PassiveHealthCheckConfig <PassiveHealthCheck>k__BackingField;
    [JsonPropertyAttribute]
public string Name { get; public set; }
    [JsonPropertyAttribute]
public string Namespace { get; public set; }
    [JsonPropertyAttribute]
public string Peer { get; public set; }
    [JsonPropertyAttribute]
public string Protocol { get; public set; }
    [JsonPropertyAttribute]
public Nullable`1<int> ConnectTimeoutMs { get; public set; }
    [JsonPropertyAttribute]
public MeshGatewayConfig MeshGateway { get; public set; }
    [JsonPropertyAttribute]
public string BalanceOutboundConnections { get; public set; }
    [JsonPropertyAttribute]
public LimitsConfig Limits { get; public set; }
    [JsonPropertyAttribute]
public PassiveHealthCheckConfig PassiveHealthCheck { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Namespace();
    [CompilerGeneratedAttribute]
public void set_Namespace(string value);
    [CompilerGeneratedAttribute]
public string get_Peer();
    [CompilerGeneratedAttribute]
public void set_Peer(string value);
    [CompilerGeneratedAttribute]
public string get_Protocol();
    [CompilerGeneratedAttribute]
public void set_Protocol(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_ConnectTimeoutMs();
    [CompilerGeneratedAttribute]
public void set_ConnectTimeoutMs(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public MeshGatewayConfig get_MeshGateway();
    [CompilerGeneratedAttribute]
public void set_MeshGateway(MeshGatewayConfig value);
    [CompilerGeneratedAttribute]
public string get_BalanceOutboundConnections();
    [CompilerGeneratedAttribute]
public void set_BalanceOutboundConnections(string value);
    [CompilerGeneratedAttribute]
public LimitsConfig get_Limits();
    [CompilerGeneratedAttribute]
public void set_Limits(LimitsConfig value);
    [CompilerGeneratedAttribute]
public PassiveHealthCheckConfig get_PassiveHealthCheck();
    [CompilerGeneratedAttribute]
public void set_PassiveHealthCheck(PassiveHealthCheckConfig value);
}
public class Consul.PassiveHealthCheckConfig : object {
    [CompilerGeneratedAttribute]
private string <Interval>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxFailures>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <EnforcingConsecutive5xx>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxEjectionPercent>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BaseEjectionTime>k__BackingField;
    [JsonPropertyAttribute]
public string Interval { get; public set; }
    [JsonPropertyAttribute]
public Nullable`1<int> MaxFailures { get; public set; }
    [JsonPropertyAttribute]
public Nullable`1<int> EnforcingConsecutive5xx { get; public set; }
    [JsonPropertyAttribute]
public Nullable`1<int> MaxEjectionPercent { get; public set; }
    [JsonPropertyAttribute]
public string BaseEjectionTime { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Interval();
    [CompilerGeneratedAttribute]
public void set_Interval(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaxFailures();
    [CompilerGeneratedAttribute]
public void set_MaxFailures(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_EnforcingConsecutive5xx();
    [CompilerGeneratedAttribute]
public void set_EnforcingConsecutive5xx(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaxEjectionPercent();
    [CompilerGeneratedAttribute]
public void set_MaxEjectionPercent(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_BaseEjectionTime();
    [CompilerGeneratedAttribute]
public void set_BaseEjectionTime(string value);
}
public class Consul.PathConfig : object {
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <LocalPathPort>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <ListenerPort>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Protocol>k__BackingField;
    [JsonPropertyAttribute]
public string Path { get; public set; }
    [JsonPropertyAttribute]
public Nullable`1<int> LocalPathPort { get; public set; }
    [JsonPropertyAttribute]
public Nullable`1<int> ListenerPort { get; public set; }
    [JsonPropertyAttribute]
public string Protocol { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_LocalPathPort();
    [CompilerGeneratedAttribute]
public void set_LocalPathPort(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_ListenerPort();
    [CompilerGeneratedAttribute]
public void set_ListenerPort(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_Protocol();
    [CompilerGeneratedAttribute]
public void set_Protocol(string value);
}
public class Consul.PeeringMeshConfig : object {
    [CompilerGeneratedAttribute]
private bool <PeerThroughMeshGateways>k__BackingField;
    [JsonPropertyAttribute]
public bool PeerThroughMeshGateways { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_PeerThroughMeshGateways();
    [CompilerGeneratedAttribute]
public void set_PeerThroughMeshGateways(bool value);
}
public class Consul.Point : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Labels>k__BackingField;
    public string Name { get; public set; }
    public double Value { get; public set; }
    public Dictionary`2<string, string> Labels { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public double get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(double value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_Labels();
    [CompilerGeneratedAttribute]
public void set_Labels(Dictionary`2<string, string> value);
}
public class Consul.Policy : object {
    private ConsulClient _client;
    internal Policy(ConsulClient c);
    public sealed virtual Task`1<WriteResult`1<PolicyEntry>> Create(PolicyEntry policy, CancellationToken ct);
    [AsyncStateMachineAttribute("Consul.Policy/<Create>d__4")]
public sealed virtual Task`1<WriteResult`1<PolicyEntry>> Create(PolicyEntry policy, WriteOptions writeOptions, CancellationToken ct);
    public sealed virtual Task`1<WriteResult`1<bool>> Delete(string id, CancellationToken ct);
    [AsyncStateMachineAttribute("Consul.Policy/<Delete>d__6")]
public sealed virtual Task`1<WriteResult`1<bool>> Delete(string id, WriteOptions writeOptions, CancellationToken ct);
    public sealed virtual Task`1<QueryResult`1<PolicyEntry[]>> List(CancellationToken ct);
    [AsyncStateMachineAttribute("Consul.Policy/<List>d__8")]
public sealed virtual Task`1<QueryResult`1<PolicyEntry[]>> List(QueryOptions queryOptions, CancellationToken ct);
    public sealed virtual Task`1<QueryResult`1<PolicyEntry>> Read(string id, CancellationToken ct);
    [AsyncStateMachineAttribute("Consul.Policy/<Read>d__10")]
public sealed virtual Task`1<QueryResult`1<PolicyEntry>> Read(string id, QueryOptions queryOptions, CancellationToken ct);
    public sealed virtual Task`1<WriteResult`1<PolicyEntry>> Update(PolicyEntry policy, CancellationToken ct);
    [AsyncStateMachineAttribute("Consul.Policy/<Update>d__12")]
public sealed virtual Task`1<WriteResult`1<PolicyEntry>> Update(PolicyEntry policy, WriteOptions writeOptions, CancellationToken ct);
}
public class Consul.PolicyEntry : object {
    [CompilerGeneratedAttribute]
private string <ID>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Rules>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Datacenters>k__BackingField;
    public string ID { get; public set; }
    public string Name { get; public set; }
    public string Description { get; public set; }
    public string Rules { get; public set; }
    [JsonPropertyAttribute]
public String[] Datacenters { get; public set; }
    public PolicyEntry(string id);
    public PolicyEntry(string id, string name);
    public PolicyEntry(string id, string name, string description, string rules, String[] datacenters);
    [CompilerGeneratedAttribute]
public string get_ID();
    [CompilerGeneratedAttribute]
public void set_ID(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public string get_Rules();
    [CompilerGeneratedAttribute]
public void set_Rules(string value);
    [CompilerGeneratedAttribute]
public String[] get_Datacenters();
    [CompilerGeneratedAttribute]
public void set_Datacenters(String[] value);
    public static bool ShouldSerializeCreateIndex();
    public static bool ShouldSerializeModifyIndex();
    public static PolicyLink op_Implicit(PolicyEntry p);
}
public class Consul.PolicyLink : object {
    [CompilerGeneratedAttribute]
private string <ID>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string ID { get; public set; }
    public string Name { get; public set; }
    public PolicyLink(string id);
    public PolicyLink(string id, string name);
    [CompilerGeneratedAttribute]
public string get_ID();
    [CompilerGeneratedAttribute]
public void set_ID(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
}
public class Consul.PostRequest : ConsulRequest {
    [CompilerGeneratedAttribute]
private WriteOptions <Options>k__BackingField;
    private string _body;
    public WriteOptions Options { get; public set; }
    public PostRequest(ConsulClient client, string url, string body, WriteOptions options);
    [CompilerGeneratedAttribute]
public WriteOptions get_Options();
    [CompilerGeneratedAttribute]
public void set_Options(WriteOptions value);
    [AsyncStateMachineAttribute("Consul.PostRequest/<Execute>d__6")]
public Task`1<WriteResult`1<string>> Execute(CancellationToken ct);
    protected virtual void ApplyOptions(ConsulClientConfiguration clientConfig);
    protected virtual void ApplyHeaders(HttpRequestMessage message, ConsulClientConfiguration clientConfig);
}
public class Consul.PostRequest`1 : ConsulRequest {
    [CompilerGeneratedAttribute]
private WriteOptions <Options>k__BackingField;
    private TIn _body;
    public WriteOptions Options { get; public set; }
    public PostRequest`1(ConsulClient client, string url, TIn body, WriteOptions options);
    [CompilerGeneratedAttribute]
public WriteOptions get_Options();
    [CompilerGeneratedAttribute]
public void set_Options(WriteOptions value);
    [AsyncStateMachineAttribute("Consul.PostRequest`1/<Execute>d__6")]
public Task`1<WriteResult> Execute(CancellationToken ct);
    protected virtual void ApplyOptions(ConsulClientConfiguration clientConfig);
    protected virtual void ApplyHeaders(HttpRequestMessage message, ConsulClientConfiguration clientConfig);
}
public class Consul.PostRequest`2 : ConsulRequest {
    [CompilerGeneratedAttribute]
private WriteOptions <Options>k__BackingField;
    private TIn _body;
    public WriteOptions Options { get; public set; }
    public PostRequest`2(ConsulClient client, string url, TIn body, WriteOptions options);
    [CompilerGeneratedAttribute]
public WriteOptions get_Options();
    [CompilerGeneratedAttribute]
public void set_Options(WriteOptions value);
    [AsyncStateMachineAttribute("Consul.PostRequest`2/<Execute>d__6")]
public Task`1<WriteResult`1<TOut>> Execute(CancellationToken ct);
    protected virtual void ApplyOptions(ConsulClientConfiguration clientConfig);
    protected virtual void ApplyHeaders(HttpRequestMessage message, ConsulClientConfiguration clientConfig);
}
public class Consul.PostReturningRequest`1 : ConsulRequest {
    [CompilerGeneratedAttribute]
private WriteOptions <Options>k__BackingField;
    public WriteOptions Options { get; public set; }
    public PostReturningRequest`1(ConsulClient client, string url, WriteOptions options);
    [CompilerGeneratedAttribute]
public WriteOptions get_Options();
    [CompilerGeneratedAttribute]
public void set_Options(WriteOptions value);
    [AsyncStateMachineAttribute("Consul.PostReturningRequest`1/<Execute>d__5")]
public Task`1<WriteResult`1<TOut>> Execute(CancellationToken ct);
    protected virtual void ApplyOptions(ConsulClientConfiguration clientConfig);
    protected virtual void ApplyHeaders(HttpRequestMessage message, ConsulClientConfiguration clientConfig);
}
public class Consul.PreparedQuery : object {
    private ConsulClient _client;
    internal PreparedQuery(ConsulClient c);
    public sealed virtual Task`1<WriteResult`1<string>> Create(PreparedQueryDefinition query, CancellationToken ct);
    [AsyncStateMachineAttribute("Consul.PreparedQuery/<Create>d__4")]
public sealed virtual Task`1<WriteResult`1<string>> Create(PreparedQueryDefinition query, WriteOptions q, CancellationToken ct);
    public sealed virtual Task`1<WriteResult> Delete(string queryID, CancellationToken ct);
    [AsyncStateMachineAttribute("Consul.PreparedQuery/<Delete>d__6")]
public sealed virtual Task`1<WriteResult> Delete(string queryID, WriteOptions q, CancellationToken ct);
    public sealed virtual Task`1<QueryResult`1<PreparedQueryExecuteResponse>> Execute(string queryIDOrName, CancellationToken ct);
    public sealed virtual Task`1<QueryResult`1<PreparedQueryExecuteResponse>> Execute(string queryIDOrName, QueryOptions q, CancellationToken ct);
    public sealed virtual Task`1<QueryResult`1<PreparedQueryDefinition[]>> Get(string queryID, CancellationToken ct);
    public sealed virtual Task`1<QueryResult`1<PreparedQueryDefinition[]>> Get(string queryID, QueryOptions q, CancellationToken ct);
    public sealed virtual Task`1<QueryResult`1<PreparedQueryDefinition[]>> List(CancellationToken ct);
    public sealed virtual Task`1<QueryResult`1<PreparedQueryDefinition[]>> List(QueryOptions q, CancellationToken ct);
    public sealed virtual Task`1<WriteResult> Update(PreparedQueryDefinition query, CancellationToken ct);
    public sealed virtual Task`1<WriteResult> Update(PreparedQueryDefinition query, WriteOptions q, CancellationToken ct);
}
public class Consul.PreparedQueryDefinition : object {
    [CompilerGeneratedAttribute]
private string <ID>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Session>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Token>k__BackingField;
    [CompilerGeneratedAttribute]
private ServiceQuery <Service>k__BackingField;
    [CompilerGeneratedAttribute]
private QueryDNSOptions <DNS>k__BackingField;
    [CompilerGeneratedAttribute]
private QueryTemplate <Template>k__BackingField;
    public string ID { get; public set; }
    public string Name { get; public set; }
    [JsonPropertyAttribute]
public string Session { get; public set; }
    [JsonPropertyAttribute]
public string Token { get; public set; }
    [JsonPropertyAttribute]
public ServiceQuery Service { get; public set; }
    [JsonPropertyAttribute]
public QueryDNSOptions DNS { get; public set; }
    [JsonPropertyAttribute]
public QueryTemplate Template { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ID();
    [CompilerGeneratedAttribute]
public void set_ID(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Session();
    [CompilerGeneratedAttribute]
public void set_Session(string value);
    [CompilerGeneratedAttribute]
public string get_Token();
    [CompilerGeneratedAttribute]
public void set_Token(string value);
    [CompilerGeneratedAttribute]
public ServiceQuery get_Service();
    [CompilerGeneratedAttribute]
public void set_Service(ServiceQuery value);
    [CompilerGeneratedAttribute]
public QueryDNSOptions get_DNS();
    [CompilerGeneratedAttribute]
public void set_DNS(QueryDNSOptions value);
    [CompilerGeneratedAttribute]
public QueryTemplate get_Template();
    [CompilerGeneratedAttribute]
public void set_Template(QueryTemplate value);
}
public class Consul.PreparedQueryExecuteResponse : object {
    [CompilerGeneratedAttribute]
private string <Service>k__BackingField;
    [CompilerGeneratedAttribute]
private ServiceEntry[] <Nodes>k__BackingField;
    [CompilerGeneratedAttribute]
private QueryDNSOptions <DNS>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Datacenter>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Failovers>k__BackingField;
    public string Service { get; public set; }
    public ServiceEntry[] Nodes { get; public set; }
    public QueryDNSOptions DNS { get; public set; }
    public string Datacenter { get; public set; }
    public int Failovers { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Service();
    [CompilerGeneratedAttribute]
public void set_Service(string value);
    [CompilerGeneratedAttribute]
public ServiceEntry[] get_Nodes();
    [CompilerGeneratedAttribute]
public void set_Nodes(ServiceEntry[] value);
    [CompilerGeneratedAttribute]
public QueryDNSOptions get_DNS();
    [CompilerGeneratedAttribute]
public void set_DNS(QueryDNSOptions value);
    [CompilerGeneratedAttribute]
public string get_Datacenter();
    [CompilerGeneratedAttribute]
public void set_Datacenter(string value);
    [CompilerGeneratedAttribute]
public int get_Failovers();
    [CompilerGeneratedAttribute]
public void set_Failovers(int value);
}
public class Consul.Provider : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<VerifyClaim> <VerifyClaims>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <Sources>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Peer>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Namespace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Partition>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SamenessGroup>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Action>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <Permissions>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, object> <HTTP>k__BackingField;
    [JsonPropertyAttribute]
public string Name { get; public set; }
    [JsonPropertyAttribute]
public List`1<VerifyClaim> VerifyClaims { get; public set; }
    [JsonPropertyAttribute]
public List`1<string> Sources { get; public set; }
    [JsonPropertyAttribute]
public string Peer { get; public set; }
    [JsonPropertyAttribute]
public string Namespace { get; public set; }
    [JsonPropertyAttribute]
public string Partition { get; public set; }
    [JsonPropertyAttribute]
public string SamenessGroup { get; public set; }
    [JsonPropertyAttribute]
public string Action { get; public set; }
    [JsonPropertyAttribute]
public List`1<string> Permissions { get; public set; }
    [JsonPropertyAttribute]
public Dictionary`2<string, object> HTTP { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public List`1<VerifyClaim> get_VerifyClaims();
    [CompilerGeneratedAttribute]
public void set_VerifyClaims(List`1<VerifyClaim> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_Sources();
    [CompilerGeneratedAttribute]
public void set_Sources(List`1<string> value);
    [CompilerGeneratedAttribute]
public string get_Peer();
    [CompilerGeneratedAttribute]
public void set_Peer(string value);
    [CompilerGeneratedAttribute]
public string get_Namespace();
    [CompilerGeneratedAttribute]
public void set_Namespace(string value);
    [CompilerGeneratedAttribute]
public string get_Partition();
    [CompilerGeneratedAttribute]
public void set_Partition(string value);
    [CompilerGeneratedAttribute]
public string get_SamenessGroup();
    [CompilerGeneratedAttribute]
public void set_SamenessGroup(string value);
    [CompilerGeneratedAttribute]
public string get_Action();
    [CompilerGeneratedAttribute]
public void set_Action(string value);
    [CompilerGeneratedAttribute]
public List`1<string> get_Permissions();
    [CompilerGeneratedAttribute]
public void set_Permissions(List`1<string> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, object> get_HTTP();
    [CompilerGeneratedAttribute]
public void set_HTTP(Dictionary`2<string, object> value);
}
public class Consul.ProviderLocation : object {
    [CompilerGeneratedAttribute]
private HeaderLocation <Header>k__BackingField;
    [CompilerGeneratedAttribute]
private QueryParamLocation <QueryParam>k__BackingField;
    [CompilerGeneratedAttribute]
private CookieLocation <Cookie>k__BackingField;
    [JsonPropertyAttribute]
public HeaderLocation Header { get; public set; }
    [JsonPropertyAttribute]
public QueryParamLocation QueryParam { get; public set; }
    [JsonPropertyAttribute]
public CookieLocation Cookie { get; public set; }
    [CompilerGeneratedAttribute]
public HeaderLocation get_Header();
    [CompilerGeneratedAttribute]
public void set_Header(HeaderLocation value);
    [CompilerGeneratedAttribute]
public QueryParamLocation get_QueryParam();
    [CompilerGeneratedAttribute]
public void set_QueryParam(QueryParamLocation value);
    [CompilerGeneratedAttribute]
public CookieLocation get_Cookie();
    [CompilerGeneratedAttribute]
public void set_Cookie(CookieLocation value);
}
public class Consul.Proxy : object {
    [CompilerGeneratedAttribute]
private string <DestinationServiceName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DestinationServiceID>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LocalServiceAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LocalServicePort>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Mode>k__BackingField;
    [CompilerGeneratedAttribute]
private TransparentProxy <TransparentProxy>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Config>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Upstream> <Upstreams>k__BackingField;
    public string DestinationServiceName { get; public set; }
    public string DestinationServiceID { get; public set; }
    public string LocalServiceAddress { get; public set; }
    public int LocalServicePort { get; public set; }
    public string Mode { get; public set; }
    public TransparentProxy TransparentProxy { get; public set; }
    public Dictionary`2<string, string> Config { get; public set; }
    public List`1<Upstream> Upstreams { get; public set; }
    [CompilerGeneratedAttribute]
public string get_DestinationServiceName();
    [CompilerGeneratedAttribute]
public void set_DestinationServiceName(string value);
    [CompilerGeneratedAttribute]
public string get_DestinationServiceID();
    [CompilerGeneratedAttribute]
public void set_DestinationServiceID(string value);
    [CompilerGeneratedAttribute]
public string get_LocalServiceAddress();
    [CompilerGeneratedAttribute]
public void set_LocalServiceAddress(string value);
    [CompilerGeneratedAttribute]
public int get_LocalServicePort();
    [CompilerGeneratedAttribute]
public void set_LocalServicePort(int value);
    [CompilerGeneratedAttribute]
public string get_Mode();
    [CompilerGeneratedAttribute]
public void set_Mode(string value);
    [CompilerGeneratedAttribute]
public TransparentProxy get_TransparentProxy();
    [CompilerGeneratedAttribute]
public void set_TransparentProxy(TransparentProxy value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_Config();
    [CompilerGeneratedAttribute]
public void set_Config(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public List`1<Upstream> get_Upstreams();
    [CompilerGeneratedAttribute]
public void set_Upstreams(List`1<Upstream> value);
}
public class Consul.ProxyDefaultEntry : object {
    [CompilerGeneratedAttribute]
private string <Kind>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Namespace>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Meta>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, object> <Config>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<EnvoyExtension> <EnvoyExtensions>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Mode>k__BackingField;
    [CompilerGeneratedAttribute]
private TransparentProxyConfig <TransparentProxy>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MutualTLSMode>k__BackingField;
    [CompilerGeneratedAttribute]
private MeshGatewayConfig <MeshGateway>k__BackingField;
    [CompilerGeneratedAttribute]
private ExposeConfig <Expose>k__BackingField;
    [CompilerGeneratedAttribute]
private AccessLogsConfig <AccessLogs>k__BackingField;
    [JsonPropertyAttribute]
public string Kind { get; public set; }
    [JsonPropertyAttribute]
public string Name { get; public set; }
    [JsonPropertyAttribute]
public string Namespace { get; public set; }
    [JsonPropertyAttribute]
public Dictionary`2<string, string> Meta { get; public set; }
    [JsonPropertyAttribute]
public Dictionary`2<string, object> Config { get; public set; }
    [JsonPropertyAttribute]
public List`1<EnvoyExtension> EnvoyExtensions { get; public set; }
    [JsonPropertyAttribute]
public string Mode { get; public set; }
    [JsonPropertyAttribute]
public TransparentProxyConfig TransparentProxy { get; public set; }
    [JsonPropertyAttribute]
public string MutualTLSMode { get; public set; }
    [JsonPropertyAttribute]
public MeshGatewayConfig MeshGateway { get; public set; }
    [JsonPropertyAttribute]
public ExposeConfig Expose { get; public set; }
    [JsonPropertyAttribute]
public AccessLogsConfig AccessLogs { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_Kind();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Kind(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Namespace();
    [CompilerGeneratedAttribute]
public void set_Namespace(string value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_Meta();
    [CompilerGeneratedAttribute]
public void set_Meta(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, object> get_Config();
    [CompilerGeneratedAttribute]
public void set_Config(Dictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public List`1<EnvoyExtension> get_EnvoyExtensions();
    [CompilerGeneratedAttribute]
public void set_EnvoyExtensions(List`1<EnvoyExtension> value);
    [CompilerGeneratedAttribute]
public string get_Mode();
    [CompilerGeneratedAttribute]
public void set_Mode(string value);
    [CompilerGeneratedAttribute]
public TransparentProxyConfig get_TransparentProxy();
    [CompilerGeneratedAttribute]
public void set_TransparentProxy(TransparentProxyConfig value);
    [CompilerGeneratedAttribute]
public string get_MutualTLSMode();
    [CompilerGeneratedAttribute]
public void set_MutualTLSMode(string value);
    [CompilerGeneratedAttribute]
public MeshGatewayConfig get_MeshGateway();
    [CompilerGeneratedAttribute]
public void set_MeshGateway(MeshGatewayConfig value);
    [CompilerGeneratedAttribute]
public ExposeConfig get_Expose();
    [CompilerGeneratedAttribute]
public void set_Expose(ExposeConfig value);
    [CompilerGeneratedAttribute]
public AccessLogsConfig get_AccessLogs();
    [CompilerGeneratedAttribute]
public void set_AccessLogs(AccessLogsConfig value);
}
public class Consul.PutNothingRequest : ConsulRequest {
    [CompilerGeneratedAttribute]
private WriteOptions <Options>k__BackingField;
    public WriteOptions Options { get; public set; }
    public PutNothingRequest(ConsulClient client, string url, WriteOptions options);
    [CompilerGeneratedAttribute]
public WriteOptions get_Options();
    [CompilerGeneratedAttribute]
public void set_Options(WriteOptions value);
    [AsyncStateMachineAttribute("Consul.PutNothingRequest/<Execute>d__5")]
public Task`1<WriteResult> Execute(CancellationToken ct);
    protected virtual void ApplyOptions(ConsulClientConfiguration clientConfig);
    protected virtual void ApplyHeaders(HttpRequestMessage message, ConsulClientConfiguration clientConfig);
}
public class Consul.PutRequest`1 : ConsulRequest {
    [CompilerGeneratedAttribute]
private WriteOptions <Options>k__BackingField;
    private TIn _body;
    public WriteOptions Options { get; public set; }
    public PutRequest`1(ConsulClient client, string url, TIn body, WriteOptions options);
    [CompilerGeneratedAttribute]
public WriteOptions get_Options();
    [CompilerGeneratedAttribute]
public void set_Options(WriteOptions value);
    [AsyncStateMachineAttribute("Consul.PutRequest`1/<Execute>d__6")]
public Task`1<WriteResult> Execute(CancellationToken ct);
    protected virtual void ApplyOptions(ConsulClientConfiguration clientConfig);
    protected virtual void ApplyHeaders(HttpRequestMessage message, ConsulClientConfiguration clientConfig);
}
public class Consul.PutRequest`2 : ConsulRequest {
    [CompilerGeneratedAttribute]
private WriteOptions <Options>k__BackingField;
    private TIn _body;
    public WriteOptions Options { get; public set; }
    public PutRequest`2(ConsulClient client, string url, TIn body, WriteOptions options);
    [CompilerGeneratedAttribute]
public WriteOptions get_Options();
    [CompilerGeneratedAttribute]
public void set_Options(WriteOptions value);
    [AsyncStateMachineAttribute("Consul.PutRequest`2/<Execute>d__6")]
public Task`1<WriteResult`1<TOut>> Execute(CancellationToken ct);
    protected virtual void ApplyOptions(ConsulClientConfiguration clientConfig);
    protected virtual void ApplyHeaders(HttpRequestMessage message, ConsulClientConfiguration clientConfig);
}
public class Consul.PutReturningRequest`1 : ConsulRequest {
    [CompilerGeneratedAttribute]
private WriteOptions <Options>k__BackingField;
    public WriteOptions Options { get; public set; }
    public PutReturningRequest`1(ConsulClient client, string url, WriteOptions options);
    [CompilerGeneratedAttribute]
public WriteOptions get_Options();
    [CompilerGeneratedAttribute]
public void set_Options(WriteOptions value);
    [AsyncStateMachineAttribute("Consul.PutReturningRequest`1/<Execute>d__5")]
public Task`1<WriteResult`1<TOut>> Execute(CancellationToken ct);
    protected virtual void ApplyOptions(ConsulClientConfiguration clientConfig);
    protected virtual void ApplyHeaders(HttpRequestMessage message, ConsulClientConfiguration clientConfig);
}
public class Consul.QueryDatacenterOptions : object {
    [CompilerGeneratedAttribute]
private int <NearestN>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <Datacenters>k__BackingField;
    public int NearestN { get; public set; }
    [JsonPropertyAttribute]
public List`1<string> Datacenters { get; public set; }
    [CompilerGeneratedAttribute]
public int get_NearestN();
    [CompilerGeneratedAttribute]
public void set_NearestN(int value);
    [CompilerGeneratedAttribute]
public List`1<string> get_Datacenters();
    [CompilerGeneratedAttribute]
public void set_Datacenters(List`1<string> value);
}
public class Consul.QueryDNSOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <TTL>k__BackingField;
    [JsonPropertyAttribute]
[JsonConverterAttribute("Consul.DurationTimespanConverter")]
public Nullable`1<TimeSpan> TTL { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_TTL();
    [CompilerGeneratedAttribute]
public void set_TTL(Nullable`1<TimeSpan> value);
}
public class Consul.QueryOptions : object {
    public static QueryOptions Default;
    [CompilerGeneratedAttribute]
private string <Namespace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Datacenter>k__BackingField;
    [CompilerGeneratedAttribute]
private ConsistencyMode <Consistency>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseCache>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <MaxAge>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <StaleIfError>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <WaitIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <WaitTime>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Token>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Near>k__BackingField;
    public string Namespace { get; public set; }
    public string Datacenter { get; public set; }
    public ConsistencyMode Consistency { get; public set; }
    public bool UseCache { get; public set; }
    public Nullable`1<TimeSpan> MaxAge { get; public set; }
    public Nullable`1<TimeSpan> StaleIfError { get; public set; }
    public ulong WaitIndex { get; public set; }
    public Nullable`1<TimeSpan> WaitTime { get; public set; }
    public string Token { get; public set; }
    public string Near { get; public set; }
    private static QueryOptions();
    [CompilerGeneratedAttribute]
public string get_Namespace();
    [CompilerGeneratedAttribute]
public void set_Namespace(string value);
    [CompilerGeneratedAttribute]
public string get_Datacenter();
    [CompilerGeneratedAttribute]
public void set_Datacenter(string value);
    [CompilerGeneratedAttribute]
public ConsistencyMode get_Consistency();
    [CompilerGeneratedAttribute]
public void set_Consistency(ConsistencyMode value);
    [CompilerGeneratedAttribute]
public bool get_UseCache();
    [CompilerGeneratedAttribute]
public void set_UseCache(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_MaxAge();
    [CompilerGeneratedAttribute]
public void set_MaxAge(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_StaleIfError();
    [CompilerGeneratedAttribute]
public void set_StaleIfError(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public ulong get_WaitIndex();
    [CompilerGeneratedAttribute]
public void set_WaitIndex(ulong value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_WaitTime();
    [CompilerGeneratedAttribute]
public void set_WaitTime(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public string get_Token();
    [CompilerGeneratedAttribute]
public void set_Token(string value);
    [CompilerGeneratedAttribute]
public string get_Near();
    [CompilerGeneratedAttribute]
public void set_Near(string value);
}
public class Consul.QueryParamConfig : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Present>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Exact>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Regex>k__BackingField;
    [JsonPropertyAttribute]
public string Name { get; public set; }
    [JsonPropertyAttribute]
public bool Present { get; public set; }
    [JsonPropertyAttribute]
public string Exact { get; public set; }
    [JsonPropertyAttribute]
public string Regex { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public bool get_Present();
    [CompilerGeneratedAttribute]
public void set_Present(bool value);
    [CompilerGeneratedAttribute]
public string get_Exact();
    [CompilerGeneratedAttribute]
public void set_Exact(string value);
    [CompilerGeneratedAttribute]
public string get_Regex();
    [CompilerGeneratedAttribute]
public void set_Regex(string value);
}
public class Consul.QueryParamLocation : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [JsonPropertyAttribute]
public string Name { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
}
public class Consul.QueryResult : ConsulResult {
    [CompilerGeneratedAttribute]
private Nullable`1<CacheResult> <XCache>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <Age>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <LastIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <LastContact>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <KnownLeader>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AddressTranslationEnabled>k__BackingField;
    public Nullable`1<CacheResult> XCache { get; public set; }
    public TimeSpan Age { get; public set; }
    public ulong LastIndex { get; public set; }
    public TimeSpan LastContact { get; public set; }
    public bool KnownLeader { get; public set; }
    public bool AddressTranslationEnabled { get; public set; }
    public QueryResult(QueryResult other);
    [CompilerGeneratedAttribute]
public Nullable`1<CacheResult> get_XCache();
    [CompilerGeneratedAttribute]
public void set_XCache(Nullable`1<CacheResult> value);
    [CompilerGeneratedAttribute]
public TimeSpan get_Age();
    [CompilerGeneratedAttribute]
public void set_Age(TimeSpan value);
    [CompilerGeneratedAttribute]
public ulong get_LastIndex();
    [CompilerGeneratedAttribute]
public void set_LastIndex(ulong value);
    [CompilerGeneratedAttribute]
public TimeSpan get_LastContact();
    [CompilerGeneratedAttribute]
public void set_LastContact(TimeSpan value);
    [CompilerGeneratedAttribute]
public bool get_KnownLeader();
    [CompilerGeneratedAttribute]
public void set_KnownLeader(bool value);
    [CompilerGeneratedAttribute]
public bool get_AddressTranslationEnabled();
    [CompilerGeneratedAttribute]
public void set_AddressTranslationEnabled(bool value);
}
public class Consul.QueryResult`1 : QueryResult {
    [CompilerGeneratedAttribute]
private T <Response>k__BackingField;
    public T Response { get; public set; }
    public QueryResult`1(QueryResult other);
    public QueryResult`1(QueryResult other, T value);
    [CompilerGeneratedAttribute]
public T get_Response();
    [CompilerGeneratedAttribute]
public void set_Response(T value);
}
public class Consul.QueryTemplate : object {
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Regexp>k__BackingField;
    [JsonPropertyAttribute]
public string Type { get; public set; }
    [JsonPropertyAttribute]
public string Regexp { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(string value);
    [CompilerGeneratedAttribute]
public string get_Regexp();
    [CompilerGeneratedAttribute]
public void set_Regexp(string value);
}
public class Consul.RaftConfiguration : object {
    [CompilerGeneratedAttribute]
private List`1<RaftServer> <Servers>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <Index>k__BackingField;
    public List`1<RaftServer> Servers { get; public set; }
    public ulong Index { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<RaftServer> get_Servers();
    [CompilerGeneratedAttribute]
public void set_Servers(List`1<RaftServer> value);
    [CompilerGeneratedAttribute]
public ulong get_Index();
    [CompilerGeneratedAttribute]
public void set_Index(ulong value);
}
public class Consul.RaftServer : object {
    [CompilerGeneratedAttribute]
private string <ID>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Node>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Address>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Leader>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Voter>k__BackingField;
    public string ID { get; public set; }
    public string Node { get; public set; }
    public string Address { get; public set; }
    public bool Leader { get; public set; }
    public bool Voter { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ID();
    [CompilerGeneratedAttribute]
public void set_ID(string value);
    [CompilerGeneratedAttribute]
public string get_Node();
    [CompilerGeneratedAttribute]
public void set_Node(string value);
    [CompilerGeneratedAttribute]
public string get_Address();
    [CompilerGeneratedAttribute]
public void set_Address(string value);
    [CompilerGeneratedAttribute]
public bool get_Leader();
    [CompilerGeneratedAttribute]
public void set_Leader(bool value);
    [CompilerGeneratedAttribute]
public bool get_Voter();
    [CompilerGeneratedAttribute]
public void set_Voter(bool value);
}
public class Consul.RateLimitsConfig : object {
    [CompilerGeneratedAttribute]
private InstanceLevelConfig <InstanceLevel>k__BackingField;
    [JsonPropertyAttribute]
public InstanceLevelConfig InstanceLevel { get; public set; }
    [CompilerGeneratedAttribute]
public InstanceLevelConfig get_InstanceLevel();
    [CompilerGeneratedAttribute]
public void set_InstanceLevel(InstanceLevelConfig value);
}
public class Consul.Raw : object {
    private ConsulClient _client;
    internal Raw(ConsulClient c);
    public sealed virtual Task`1<QueryResult`1<object>> Query(string endpoint, QueryOptions q, CancellationToken ct);
    public sealed virtual Task`1<WriteResult`1<object>> Write(string endpoint, object obj, WriteOptions q, CancellationToken ct);
}
public class Consul.RemoteJSONWebKeySet : object {
    [CompilerGeneratedAttribute]
private string <URI>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RequestTimeoutMs>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CacheDuration>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FetchAsynchronously>k__BackingField;
    [CompilerGeneratedAttribute]
private RetryPolicyConfig <RetryPolicy>k__BackingField;
    [CompilerGeneratedAttribute]
private JWKSClusterConfig <JWKSCluster>k__BackingField;
    [JsonPropertyAttribute]
public string URI { get; public set; }
    [JsonPropertyAttribute]
public string RequestTimeoutMs { get; public set; }
    [JsonPropertyAttribute]
public string CacheDuration { get; public set; }
    [JsonPropertyAttribute]
public bool FetchAsynchronously { get; public set; }
    [JsonPropertyAttribute]
public RetryPolicyConfig RetryPolicy { get; public set; }
    [JsonPropertyAttribute]
public JWKSClusterConfig JWKSCluster { get; public set; }
    [CompilerGeneratedAttribute]
public string get_URI();
    [CompilerGeneratedAttribute]
public void set_URI(string value);
    [CompilerGeneratedAttribute]
public string get_RequestTimeoutMs();
    [CompilerGeneratedAttribute]
public void set_RequestTimeoutMs(string value);
    [CompilerGeneratedAttribute]
public string get_CacheDuration();
    [CompilerGeneratedAttribute]
public void set_CacheDuration(string value);
    [CompilerGeneratedAttribute]
public bool get_FetchAsynchronously();
    [CompilerGeneratedAttribute]
public void set_FetchAsynchronously(bool value);
    [CompilerGeneratedAttribute]
public RetryPolicyConfig get_RetryPolicy();
    [CompilerGeneratedAttribute]
public void set_RetryPolicy(RetryPolicyConfig value);
    [CompilerGeneratedAttribute]
public JWKSClusterConfig get_JWKSCluster();
    [CompilerGeneratedAttribute]
public void set_JWKSCluster(JWKSClusterConfig value);
}
public class Consul.RetryPolicyBackOffConfig : object {
    [CompilerGeneratedAttribute]
private string <BaseInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MaxInterval>k__BackingField;
    [JsonPropertyAttribute]
public string BaseInterval { get; public set; }
    [JsonPropertyAttribute]
public string MaxInterval { get; public set; }
    [CompilerGeneratedAttribute]
public string get_BaseInterval();
    [CompilerGeneratedAttribute]
public void set_BaseInterval(string value);
    [CompilerGeneratedAttribute]
public string get_MaxInterval();
    [CompilerGeneratedAttribute]
public void set_MaxInterval(string value);
}
public class Consul.RetryPolicyConfig : object {
    [CompilerGeneratedAttribute]
private string <NumRetries>k__BackingField;
    [CompilerGeneratedAttribute]
private RetryPolicyBackOffConfig <RetryPolicyBackOff>k__BackingField;
    [JsonPropertyAttribute]
public string NumRetries { get; public set; }
    [JsonPropertyAttribute]
public RetryPolicyBackOffConfig RetryPolicyBackOff { get; public set; }
    [CompilerGeneratedAttribute]
public string get_NumRetries();
    [CompilerGeneratedAttribute]
public void set_NumRetries(string value);
    [CompilerGeneratedAttribute]
public RetryPolicyBackOffConfig get_RetryPolicyBackOff();
    [CompilerGeneratedAttribute]
public void set_RetryPolicyBackOff(RetryPolicyBackOffConfig value);
}
public class Consul.RingHashConfig : object {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MinimumRingSize>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaximumRingSize>k__BackingField;
    [JsonPropertyAttribute]
public Nullable`1<int> MinimumRingSize { get; public set; }
    [JsonPropertyAttribute]
public Nullable`1<int> MaximumRingSize { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MinimumRingSize();
    [CompilerGeneratedAttribute]
public void set_MinimumRingSize(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaximumRingSize();
    [CompilerGeneratedAttribute]
public void set_MaximumRingSize(Nullable`1<int> value);
}
public class Consul.Role : object {
    private ConsulClient _client;
    internal Role(ConsulClient c);
    public sealed virtual Task`1<WriteResult`1<RoleEntry>> Create(RoleEntry policy, CancellationToken ct);
    [AsyncStateMachineAttribute("Consul.Role/<Create>d__4")]
public sealed virtual Task`1<WriteResult`1<RoleEntry>> Create(RoleEntry policy, WriteOptions writeOptions, CancellationToken ct);
    public sealed virtual Task`1<WriteResult`1<bool>> Delete(string id, CancellationToken ct);
    [AsyncStateMachineAttribute("Consul.Role/<Delete>d__6")]
public sealed virtual Task`1<WriteResult`1<bool>> Delete(string id, WriteOptions writeOptions, CancellationToken ct);
    public sealed virtual Task`1<QueryResult`1<RoleEntry[]>> List(CancellationToken ct);
    [AsyncStateMachineAttribute("Consul.Role/<List>d__8")]
public sealed virtual Task`1<QueryResult`1<RoleEntry[]>> List(QueryOptions queryOptions, CancellationToken ct);
    public sealed virtual Task`1<QueryResult`1<RoleEntry>> Read(string id, CancellationToken ct);
    [AsyncStateMachineAttribute("Consul.Role/<Read>d__10")]
public sealed virtual Task`1<QueryResult`1<RoleEntry>> Read(string id, QueryOptions queryOptions, CancellationToken ct);
    public sealed virtual Task`1<QueryResult`1<RoleEntry>> ReadByName(string name, CancellationToken ct);
    [AsyncStateMachineAttribute("Consul.Role/<ReadByName>d__12")]
public sealed virtual Task`1<QueryResult`1<RoleEntry>> ReadByName(string name, QueryOptions queryOptions, CancellationToken ct);
    public sealed virtual Task`1<WriteResult`1<RoleEntry>> Update(RoleEntry role, CancellationToken ct);
    [AsyncStateMachineAttribute("Consul.Role/<Update>d__14")]
public sealed virtual Task`1<WriteResult`1<RoleEntry>> Update(RoleEntry role, WriteOptions writeOptions, CancellationToken ct);
}
public class Consul.RoleEntry : object {
    [CompilerGeneratedAttribute]
private string <ID>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private PolicyLink[] <Policies>k__BackingField;
    [CompilerGeneratedAttribute]
private ServiceIdentity[] <ServiceIdentities>k__BackingField;
    public string ID { get; public set; }
    public string Name { get; public set; }
    public string Description { get; public set; }
    [JsonPropertyAttribute]
public PolicyLink[] Policies { get; public set; }
    [JsonPropertyAttribute]
public ServiceIdentity[] ServiceIdentities { get; public set; }
    public RoleEntry(string name);
    public RoleEntry(string name, string description);
    public RoleEntry(string id, string name, string description);
    public RoleEntry(string id, string name, string description, PolicyLink[] policies);
    public RoleEntry(string id, string name, string description, ServiceIdentity[] serviceIdentities);
    public RoleEntry(string id, string name, string description, PolicyLink[] policies, ServiceIdentity[] serviceIdentities);
    [CompilerGeneratedAttribute]
public string get_ID();
    [CompilerGeneratedAttribute]
public void set_ID(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public PolicyLink[] get_Policies();
    [CompilerGeneratedAttribute]
public void set_Policies(PolicyLink[] value);
    [CompilerGeneratedAttribute]
public ServiceIdentity[] get_ServiceIdentities();
    [CompilerGeneratedAttribute]
public void set_ServiceIdentities(ServiceIdentity[] value);
    public static bool ShouldSerializeCreateIndex();
    public static bool ShouldSerializeModifyIndex();
    public static RoleLink op_Implicit(RoleEntry r);
}
public class Consul.RoleLink : object {
    [CompilerGeneratedAttribute]
private string <ID>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string ID { get; public set; }
    public string Name { get; public set; }
    public RoleLink(string id);
    public RoleLink(string id, string name);
    [CompilerGeneratedAttribute]
public string get_ID();
    [CompilerGeneratedAttribute]
public void set_ID(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
}
public class Consul.Root : object {
    [CompilerGeneratedAttribute]
private string <ID>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private long <SerialNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SigningKeyID>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExternalTrustDomain>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NotBefore>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NotAfter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RootCert>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <IntermediateCerts>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Active>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PrivateKeyType>k__BackingField;
    [CompilerGeneratedAttribute]
private long <PrivateKeyBits>k__BackingField;
    [CompilerGeneratedAttribute]
private long <CreateIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private long <ModifyIndex>k__BackingField;
    public string ID { get; public set; }
    public string Name { get; public set; }
    public long SerialNumber { get; public set; }
    public string SigningKeyID { get; public set; }
    public string ExternalTrustDomain { get; public set; }
    public string NotBefore { get; public set; }
    public string NotAfter { get; public set; }
    public string RootCert { get; public set; }
    public List`1<string> IntermediateCerts { get; public set; }
    public bool Active { get; public set; }
    public string PrivateKeyType { get; public set; }
    public long PrivateKeyBits { get; public set; }
    public long CreateIndex { get; public set; }
    public long ModifyIndex { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ID();
    [CompilerGeneratedAttribute]
public void set_ID(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public long get_SerialNumber();
    [CompilerGeneratedAttribute]
public void set_SerialNumber(long value);
    [CompilerGeneratedAttribute]
public string get_SigningKeyID();
    [CompilerGeneratedAttribute]
public void set_SigningKeyID(string value);
    [CompilerGeneratedAttribute]
public string get_ExternalTrustDomain();
    [CompilerGeneratedAttribute]
public void set_ExternalTrustDomain(string value);
    [CompilerGeneratedAttribute]
public string get_NotBefore();
    [CompilerGeneratedAttribute]
public void set_NotBefore(string value);
    [CompilerGeneratedAttribute]
public string get_NotAfter();
    [CompilerGeneratedAttribute]
public void set_NotAfter(string value);
    [CompilerGeneratedAttribute]
public string get_RootCert();
    [CompilerGeneratedAttribute]
public void set_RootCert(string value);
    [CompilerGeneratedAttribute]
public List`1<string> get_IntermediateCerts();
    [CompilerGeneratedAttribute]
public void set_IntermediateCerts(List`1<string> value);
    [CompilerGeneratedAttribute]
public bool get_Active();
    [CompilerGeneratedAttribute]
public void set_Active(bool value);
    [CompilerGeneratedAttribute]
public string get_PrivateKeyType();
    [CompilerGeneratedAttribute]
public void set_PrivateKeyType(string value);
    [CompilerGeneratedAttribute]
public long get_PrivateKeyBits();
    [CompilerGeneratedAttribute]
public void set_PrivateKeyBits(long value);
    [CompilerGeneratedAttribute]
public long get_CreateIndex();
    [CompilerGeneratedAttribute]
public void set_CreateIndex(long value);
    [CompilerGeneratedAttribute]
public long get_ModifyIndex();
    [CompilerGeneratedAttribute]
public void set_ModifyIndex(long value);
}
public class Consul.RouteConfig : object {
    [CompilerGeneratedAttribute]
private string <PathExact>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PathPrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PathRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <RequestsPerSecond>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <RequestMaxBurst>k__BackingField;
    [JsonPropertyAttribute]
public string PathExact { get; public set; }
    [JsonPropertyAttribute]
public string PathPrefix { get; public set; }
    [JsonPropertyAttribute]
public string PathRegex { get; public set; }
    [JsonPropertyAttribute]
public Nullable`1<int> RequestsPerSecond { get; public set; }
    [JsonPropertyAttribute]
public Nullable`1<int> RequestMaxBurst { get; public set; }
    [CompilerGeneratedAttribute]
public string get_PathExact();
    [CompilerGeneratedAttribute]
public void set_PathExact(string value);
    [CompilerGeneratedAttribute]
public string get_PathPrefix();
    [CompilerGeneratedAttribute]
public void set_PathPrefix(string value);
    [CompilerGeneratedAttribute]
public string get_PathRegex();
    [CompilerGeneratedAttribute]
public void set_PathRegex(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_RequestsPerSecond();
    [CompilerGeneratedAttribute]
public void set_RequestsPerSecond(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_RequestMaxBurst();
    [CompilerGeneratedAttribute]
public void set_RequestMaxBurst(Nullable`1<int> value);
}
public class Consul.Routes : object {
    [CompilerGeneratedAttribute]
private MapConfig <Match>k__BackingField;
    [CompilerGeneratedAttribute]
private HTTPConfig <HTTP>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Destination>k__BackingField;
    [JsonPropertyAttribute]
public MapConfig Match { get; public set; }
    [JsonPropertyAttribute]
public HTTPConfig HTTP { get; public set; }
    [JsonPropertyAttribute]
public Dictionary`2<string, string> Destination { get; public set; }
    [CompilerGeneratedAttribute]
public MapConfig get_Match();
    [CompilerGeneratedAttribute]
public void set_Match(MapConfig value);
    [CompilerGeneratedAttribute]
public HTTPConfig get_HTTP();
    [CompilerGeneratedAttribute]
public void set_HTTP(HTTPConfig value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_Destination();
    [CompilerGeneratedAttribute]
public void set_Destination(Dictionary`2<string, string> value);
}
public class Consul.SamenessGroupEntry : object {
    [CompilerGeneratedAttribute]
private string <Kind>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Partition>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DefaultForFailover>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeLocal>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<SamenessGroupMember> <Members>k__BackingField;
    [JsonPropertyAttribute]
public string Kind { get; public set; }
    [JsonPropertyAttribute]
public string Name { get; public set; }
    [JsonPropertyAttribute]
public string Partition { get; public set; }
    [JsonPropertyAttribute]
public bool DefaultForFailover { get; public set; }
    [JsonPropertyAttribute]
public bool IncludeLocal { get; public set; }
    [JsonPropertyAttribute]
public List`1<SamenessGroupMember> Members { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_Kind();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Kind(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Partition();
    [CompilerGeneratedAttribute]
public void set_Partition(string value);
    [CompilerGeneratedAttribute]
public bool get_DefaultForFailover();
    [CompilerGeneratedAttribute]
public void set_DefaultForFailover(bool value);
    [CompilerGeneratedAttribute]
public bool get_IncludeLocal();
    [CompilerGeneratedAttribute]
public void set_IncludeLocal(bool value);
    [CompilerGeneratedAttribute]
public List`1<SamenessGroupMember> get_Members();
    [CompilerGeneratedAttribute]
public void set_Members(List`1<SamenessGroupMember> value);
}
public class Consul.SamenessGroupMember : object {
    [CompilerGeneratedAttribute]
private string <Partition>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Peer>k__BackingField;
    [JsonPropertyAttribute]
public string Partition { get; public set; }
    [JsonPropertyAttribute]
public string Peer { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Partition();
    [CompilerGeneratedAttribute]
public void set_Partition(string value);
    [CompilerGeneratedAttribute]
public string get_Peer();
    [CompilerGeneratedAttribute]
public void set_Peer(string value);
}
public class Consul.Sample : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Count>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Sum>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Min>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Max>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Mean>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Stddev>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Labels>k__BackingField;
    public string Name { get; public set; }
    public long Count { get; public set; }
    public double Sum { get; public set; }
    public double Min { get; public set; }
    public double Max { get; public set; }
    public double Mean { get; public set; }
    public double Stddev { get; public set; }
    public Dictionary`2<string, string> Labels { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public long get_Count();
    [CompilerGeneratedAttribute]
public void set_Count(long value);
    [CompilerGeneratedAttribute]
public double get_Sum();
    [CompilerGeneratedAttribute]
public void set_Sum(double value);
    [CompilerGeneratedAttribute]
public double get_Min();
    [CompilerGeneratedAttribute]
public void set_Min(double value);
    [CompilerGeneratedAttribute]
public double get_Max();
    [CompilerGeneratedAttribute]
public void set_Max(double value);
    [CompilerGeneratedAttribute]
public double get_Mean();
    [CompilerGeneratedAttribute]
public void set_Mean(double value);
    [CompilerGeneratedAttribute]
public double get_Stddev();
    [CompilerGeneratedAttribute]
public void set_Stddev(double value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_Labels();
    [CompilerGeneratedAttribute]
public void set_Labels(Dictionary`2<string, string> value);
}
public class Consul.SDSConfig : object {
    [CompilerGeneratedAttribute]
private string <ClusterName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CertResource>k__BackingField;
    [JsonPropertyAttribute]
public string ClusterName { get; public set; }
    [JsonPropertyAttribute]
public string CertResource { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ClusterName();
    [CompilerGeneratedAttribute]
public void set_ClusterName(string value);
    [CompilerGeneratedAttribute]
public string get_CertResource();
    [CompilerGeneratedAttribute]
public void set_CertResource(string value);
}
public class Consul.Semaphore : object {
    public static TimeSpan DefaultSemaphoreWaitTime;
    public static TimeSpan DefaultSemaphoreRetryTime;
    public static TimeSpan DefaultMonitorRetryTime;
    public static string DefaultSemaphoreKey;
    private static ulong SemaphoreFlagValue;
    private AsyncLock _mutex;
    private object _heldLock;
    private bool _isheld;
    private int _retries;
    private CancellationTokenSource _cts;
    private ConsulClient _client;
    private Task _sessionRenewTask;
    private Task _monitorTask;
    [CompilerGeneratedAttribute]
private SemaphoreOptions <Opts>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LockSession>k__BackingField;
    internal SemaphoreOptions Opts { get; internal set; }
    public bool IsHeld { get; private set; }
    internal string LockSession { get; internal set; }
    internal Semaphore(ConsulClient c);
    private static Semaphore();
    [CompilerGeneratedAttribute]
internal SemaphoreOptions get_Opts();
    [CompilerGeneratedAttribute]
internal void set_Opts(SemaphoreOptions value);
    public sealed virtual bool get_IsHeld();
    private void set_IsHeld(bool value);
    [CompilerGeneratedAttribute]
internal string get_LockSession();
    [CompilerGeneratedAttribute]
internal void set_LockSession(string value);
    public Task`1<CancellationToken> Acquire();
    [AsyncStateMachineAttribute("Consul.Semaphore/<Acquire>d__27")]
public sealed virtual Task`1<CancellationToken> Acquire(CancellationToken ct);
    [AsyncStateMachineAttribute("Consul.Semaphore/<Release>d__28")]
public sealed virtual Task Release(CancellationToken ct);
    [AsyncStateMachineAttribute("Consul.Semaphore/<Destroy>d__29")]
public sealed virtual Task Destroy(CancellationToken ct);
    private Task MonitorLock(string lockSession);
    [AsyncStateMachineAttribute("Consul.Semaphore/<CreateSession>d__31")]
private Task`1<string> CreateSession();
    private KVPair ContenderEntry(string session);
    private KVPair FindLock(KVPair[] pairs);
    private SemaphoreLock DecodeLock(KVPair pair);
    private KVPair EncodeLock(SemaphoreLock l, ulong oldIndex);
    private static void PruneDeadHolders(SemaphoreLock l, IEnumerable`1<KVPair> pairs);
    private void DisposeCancellationTokenSource();
}
public class Consul.SemaphoreConflictException : Exception {
    public SemaphoreConflictException(string message);
    public SemaphoreConflictException(string message, Exception inner);
    protected SemaphoreConflictException(SerializationInfo info, StreamingContext context);
}
public class Consul.SemaphoreHeldException : Exception {
    public SemaphoreHeldException(string message);
    public SemaphoreHeldException(string message, Exception inner);
    protected SemaphoreHeldException(SerializationInfo info, StreamingContext context);
}
public class Consul.SemaphoreInUseException : Exception {
    public SemaphoreInUseException(string message);
    public SemaphoreInUseException(string message, Exception inner);
    protected SemaphoreInUseException(SerializationInfo info, StreamingContext context);
}
public class Consul.SemaphoreLimitConflictException : Exception {
    [CompilerGeneratedAttribute]
private int <RemoteLimit>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LocalLimit>k__BackingField;
    public int RemoteLimit { get; private set; }
    public int LocalLimit { get; private set; }
    public SemaphoreLimitConflictException(string message, int remoteLimit, int localLimit);
    public SemaphoreLimitConflictException(string message, int remoteLimit, int localLimit, Exception inner);
    protected SemaphoreLimitConflictException(SerializationInfo info, StreamingContext context);
    [CompilerGeneratedAttribute]
public int get_RemoteLimit();
    [CompilerGeneratedAttribute]
private void set_RemoteLimit(int value);
    [CompilerGeneratedAttribute]
public int get_LocalLimit();
    [CompilerGeneratedAttribute]
private void set_LocalLimit(int value);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class Consul.SemaphoreMaxAttemptsReachedException : Exception {
    public SemaphoreMaxAttemptsReachedException(string message);
    public SemaphoreMaxAttemptsReachedException(string message, Exception inner);
    protected SemaphoreMaxAttemptsReachedException(SerializationInfo info, StreamingContext context);
}
public class Consul.SemaphoreNotHeldException : Exception {
    public SemaphoreNotHeldException(string message);
    public SemaphoreNotHeldException(string message, Exception inner);
    protected SemaphoreNotHeldException(SerializationInfo info, StreamingContext context);
}
public class Consul.SemaphoreOptions : object {
    private static string DefaultLockSessionName;
    private TimeSpan _defaultLockSessionTTL;
    private string _prefix;
    private int _limit;
    [CompilerGeneratedAttribute]
private Byte[] <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Session>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SessionName>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <SessionTTL>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MonitorRetries>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <MonitorRetryTime>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <SemaphoreWaitTime>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SemaphoreTryOnce>k__BackingField;
    public string Prefix { get; public set; }
    public int Limit { get; public set; }
    public Byte[] Value { get; public set; }
    public string Session { get; public set; }
    public string SessionName { get; public set; }
    public TimeSpan SessionTTL { get; public set; }
    public int MonitorRetries { get; public set; }
    public TimeSpan MonitorRetryTime { get; public set; }
    public TimeSpan SemaphoreWaitTime { get; public set; }
    public bool SemaphoreTryOnce { get; public set; }
    public SemaphoreOptions(string prefix, int limit);
    public string get_Prefix();
    public void set_Prefix(string value);
    public int get_Limit();
    public void set_Limit(int value);
    [CompilerGeneratedAttribute]
public Byte[] get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(Byte[] value);
    [CompilerGeneratedAttribute]
public string get_Session();
    [CompilerGeneratedAttribute]
public void set_Session(string value);
    [CompilerGeneratedAttribute]
public string get_SessionName();
    [CompilerGeneratedAttribute]
public void set_SessionName(string value);
    [CompilerGeneratedAttribute]
public TimeSpan get_SessionTTL();
    [CompilerGeneratedAttribute]
public void set_SessionTTL(TimeSpan value);
    [CompilerGeneratedAttribute]
public int get_MonitorRetries();
    [CompilerGeneratedAttribute]
public void set_MonitorRetries(int value);
    [CompilerGeneratedAttribute]
public TimeSpan get_MonitorRetryTime();
    [CompilerGeneratedAttribute]
public void set_MonitorRetryTime(TimeSpan value);
    [CompilerGeneratedAttribute]
public TimeSpan get_SemaphoreWaitTime();
    [CompilerGeneratedAttribute]
public void set_SemaphoreWaitTime(TimeSpan value);
    [CompilerGeneratedAttribute]
public bool get_SemaphoreTryOnce();
    [CompilerGeneratedAttribute]
public void set_SemaphoreTryOnce(bool value);
}
public class Consul.SerfCoordinate : object {
    [CompilerGeneratedAttribute]
private List`1<double> <Vec>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Error>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Adjustment>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Height>k__BackingField;
    public List`1<double> Vec { get; public set; }
    public double Error { get; public set; }
    public double Adjustment { get; public set; }
    public double Height { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<double> get_Vec();
    [CompilerGeneratedAttribute]
public void set_Vec(List`1<double> value);
    [CompilerGeneratedAttribute]
public double get_Error();
    [CompilerGeneratedAttribute]
public void set_Error(double value);
    [CompilerGeneratedAttribute]
public double get_Adjustment();
    [CompilerGeneratedAttribute]
public void set_Adjustment(double value);
    [CompilerGeneratedAttribute]
public double get_Height();
    [CompilerGeneratedAttribute]
public void set_Height(double value);
}
public class Consul.ServiceAddress : object {
    [CompilerGeneratedAttribute]
private string <Address>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Port>k__BackingField;
    public string Address { get; public set; }
    public int Port { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Address();
    [CompilerGeneratedAttribute]
public void set_Address(string value);
    [CompilerGeneratedAttribute]
public int get_Port();
    [CompilerGeneratedAttribute]
public void set_Port(int value);
}
public class Consul.ServiceConfiguration : object {
    [CompilerGeneratedAttribute]
private string <Kind>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ID>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Service>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Tags>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Meta>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Namespace>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Port>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Address>k__BackingField;
    [CompilerGeneratedAttribute]
private TaggedAddresses <TaggedAddresses>k__BackingField;
    [CompilerGeneratedAttribute]
private Weights <Weights>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableTagOverride>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Datacenter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContentHash>k__BackingField;
    [CompilerGeneratedAttribute]
private Proxy <Proxy>k__BackingField;
    public string Kind { get; public set; }
    public string ID { get; public set; }
    public string Service { get; public set; }
    public object Tags { get; public set; }
    public object Meta { get; public set; }
    public string Namespace { get; public set; }
    public int Port { get; public set; }
    public string Address { get; public set; }
    public TaggedAddresses TaggedAddresses { get; public set; }
    public Weights Weights { get; public set; }
    public bool EnableTagOverride { get; public set; }
    public string Datacenter { get; public set; }
    public string ContentHash { get; public set; }
    public Proxy Proxy { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Kind();
    [CompilerGeneratedAttribute]
public void set_Kind(string value);
    [CompilerGeneratedAttribute]
public string get_ID();
    [CompilerGeneratedAttribute]
public void set_ID(string value);
    [CompilerGeneratedAttribute]
public string get_Service();
    [CompilerGeneratedAttribute]
public void set_Service(string value);
    [CompilerGeneratedAttribute]
public object get_Tags();
    [CompilerGeneratedAttribute]
public void set_Tags(object value);
    [CompilerGeneratedAttribute]
public object get_Meta();
    [CompilerGeneratedAttribute]
public void set_Meta(object value);
    [CompilerGeneratedAttribute]
public string get_Namespace();
    [CompilerGeneratedAttribute]
public void set_Namespace(string value);
    [CompilerGeneratedAttribute]
public int get_Port();
    [CompilerGeneratedAttribute]
public void set_Port(int value);
    [CompilerGeneratedAttribute]
public string get_Address();
    [CompilerGeneratedAttribute]
public void set_Address(string value);
    [CompilerGeneratedAttribute]
public TaggedAddresses get_TaggedAddresses();
    [CompilerGeneratedAttribute]
public void set_TaggedAddresses(TaggedAddresses value);
    [CompilerGeneratedAttribute]
public Weights get_Weights();
    [CompilerGeneratedAttribute]
public void set_Weights(Weights value);
    [CompilerGeneratedAttribute]
public bool get_EnableTagOverride();
    [CompilerGeneratedAttribute]
public void set_EnableTagOverride(bool value);
    [CompilerGeneratedAttribute]
public string get_Datacenter();
    [CompilerGeneratedAttribute]
public void set_Datacenter(string value);
    [CompilerGeneratedAttribute]
public string get_ContentHash();
    [CompilerGeneratedAttribute]
public void set_ContentHash(string value);
    [CompilerGeneratedAttribute]
public Proxy get_Proxy();
    [CompilerGeneratedAttribute]
public void set_Proxy(Proxy value);
}
public class Consul.ServiceDefaultsEntry : object {
    [CompilerGeneratedAttribute]
private string <Kind>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Namespace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Partition>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Meta>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Protocol>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BalanceInboundConnections>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Mode>k__BackingField;
    [CompilerGeneratedAttribute]
private RateLimitsConfig <RateLimits>k__BackingField;
    [CompilerGeneratedAttribute]
private UpstreamConfig <UpstreamConfig>k__BackingField;
    [CompilerGeneratedAttribute]
private DefaultsConfig <Defaults>k__BackingField;
    [CompilerGeneratedAttribute]
private TransparentProxyConfig <TransparentProxy>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MutualTLSMode>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<EnvoyExtensionConfig> <EnvoyExtensions>k__BackingField;
    [CompilerGeneratedAttribute]
private DestinationConfig <Destination>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxInboundConnections>k__BackingField;
    [CompilerGeneratedAttribute]
private MeshGatewayConfig <MeshGateway>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExternalSNI>k__BackingField;
    [CompilerGeneratedAttribute]
private ExposeConfig <Expose>k__BackingField;
    [JsonPropertyAttribute]
public string Kind { get; public set; }
    [JsonPropertyAttribute]
public string Name { get; public set; }
    [JsonPropertyAttribute]
public string Namespace { get; public set; }
    [JsonPropertyAttribute]
public string Partition { get; public set; }
    [JsonPropertyAttribute]
public Dictionary`2<string, string> Meta { get; public set; }
    [JsonPropertyAttribute]
public string Protocol { get; public set; }
    [JsonPropertyAttribute]
public string BalanceInboundConnections { get; public set; }
    [JsonPropertyAttribute]
public string Mode { get; public set; }
    [JsonPropertyAttribute]
public RateLimitsConfig RateLimits { get; public set; }
    [JsonPropertyAttribute]
public UpstreamConfig UpstreamConfig { get; public set; }
    [JsonPropertyAttribute]
public DefaultsConfig Defaults { get; public set; }
    [JsonPropertyAttribute]
public TransparentProxyConfig TransparentProxy { get; public set; }
    [JsonPropertyAttribute]
public string MutualTLSMode { get; public set; }
    [JsonPropertyAttribute]
public List`1<EnvoyExtensionConfig> EnvoyExtensions { get; public set; }
    [JsonPropertyAttribute]
public DestinationConfig Destination { get; public set; }
    [JsonPropertyAttribute]
public Nullable`1<int> MaxInboundConnections { get; public set; }
    [JsonPropertyAttribute]
public MeshGatewayConfig MeshGateway { get; public set; }
    [JsonPropertyAttribute]
public string ExternalSNI { get; public set; }
    [JsonPropertyAttribute]
public ExposeConfig Expose { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_Kind();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Kind(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Namespace();
    [CompilerGeneratedAttribute]
public void set_Namespace(string value);
    [CompilerGeneratedAttribute]
public string get_Partition();
    [CompilerGeneratedAttribute]
public void set_Partition(string value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_Meta();
    [CompilerGeneratedAttribute]
public void set_Meta(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public string get_Protocol();
    [CompilerGeneratedAttribute]
public void set_Protocol(string value);
    [CompilerGeneratedAttribute]
public string get_BalanceInboundConnections();
    [CompilerGeneratedAttribute]
public void set_BalanceInboundConnections(string value);
    [CompilerGeneratedAttribute]
public string get_Mode();
    [CompilerGeneratedAttribute]
public void set_Mode(string value);
    [CompilerGeneratedAttribute]
public RateLimitsConfig get_RateLimits();
    [CompilerGeneratedAttribute]
public void set_RateLimits(RateLimitsConfig value);
    [CompilerGeneratedAttribute]
public UpstreamConfig get_UpstreamConfig();
    [CompilerGeneratedAttribute]
public void set_UpstreamConfig(UpstreamConfig value);
    [CompilerGeneratedAttribute]
public DefaultsConfig get_Defaults();
    [CompilerGeneratedAttribute]
public void set_Defaults(DefaultsConfig value);
    [CompilerGeneratedAttribute]
public TransparentProxyConfig get_TransparentProxy();
    [CompilerGeneratedAttribute]
public void set_TransparentProxy(TransparentProxyConfig value);
    [CompilerGeneratedAttribute]
public string get_MutualTLSMode();
    [CompilerGeneratedAttribute]
public void set_MutualTLSMode(string value);
    [CompilerGeneratedAttribute]
public List`1<EnvoyExtensionConfig> get_EnvoyExtensions();
    [CompilerGeneratedAttribute]
public void set_EnvoyExtensions(List`1<EnvoyExtensionConfig> value);
    [CompilerGeneratedAttribute]
public DestinationConfig get_Destination();
    [CompilerGeneratedAttribute]
public void set_Destination(DestinationConfig value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaxInboundConnections();
    [CompilerGeneratedAttribute]
public void set_MaxInboundConnections(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public MeshGatewayConfig get_MeshGateway();
    [CompilerGeneratedAttribute]
public void set_MeshGateway(MeshGatewayConfig value);
    [CompilerGeneratedAttribute]
public string get_ExternalSNI();
    [CompilerGeneratedAttribute]
public void set_ExternalSNI(string value);
    [CompilerGeneratedAttribute]
public ExposeConfig get_Expose();
    [CompilerGeneratedAttribute]
public void set_Expose(ExposeConfig value);
}
public class Consul.ServiceDefinition : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Namespace>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ConsumerDefinition> <Consumers>k__BackingField;
    [JsonPropertyAttribute]
public string Name { get; public set; }
    [JsonPropertyAttribute]
public string Namespace { get; public set; }
    [JsonPropertyAttribute]
public List`1<ConsumerDefinition> Consumers { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Namespace();
    [CompilerGeneratedAttribute]
public void set_Namespace(string value);
    [CompilerGeneratedAttribute]
public List`1<ConsumerDefinition> get_Consumers();
    [CompilerGeneratedAttribute]
public void set_Consumers(List`1<ConsumerDefinition> value);
}
public class Consul.ServiceEntry : object {
    [CompilerGeneratedAttribute]
private Node <Node>k__BackingField;
    [CompilerGeneratedAttribute]
private AgentService <Service>k__BackingField;
    [CompilerGeneratedAttribute]
private HealthCheck[] <Checks>k__BackingField;
    public Node Node { get; public set; }
    public AgentService Service { get; public set; }
    public HealthCheck[] Checks { get; public set; }
    [CompilerGeneratedAttribute]
public Node get_Node();
    [CompilerGeneratedAttribute]
public void set_Node(Node value);
    [CompilerGeneratedAttribute]
public AgentService get_Service();
    [CompilerGeneratedAttribute]
public void set_Service(AgentService value);
    [CompilerGeneratedAttribute]
public HealthCheck[] get_Checks();
    [CompilerGeneratedAttribute]
public void set_Checks(HealthCheck[] value);
}
public class Consul.ServiceIdentity : object {
    [CompilerGeneratedAttribute]
private string <ServiceName>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Datacenters>k__BackingField;
    public string ServiceName { get; public set; }
    public String[] Datacenters { get; public set; }
    public ServiceIdentity(string serviceName, String[] datacenters);
    [CompilerGeneratedAttribute]
public string get_ServiceName();
    [CompilerGeneratedAttribute]
public void set_ServiceName(string value);
    [CompilerGeneratedAttribute]
public String[] get_Datacenters();
    [CompilerGeneratedAttribute]
public void set_Datacenters(String[] value);
}
public class Consul.ServiceInfo : object {
    [CompilerGeneratedAttribute]
private string <ID>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Service>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Tags>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Meta>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Port>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Namespace>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, ServiceAddress> <TaggedAddresses>k__BackingField;
    public string ID { get; public set; }
    public string Service { get; public set; }
    public String[] Tags { get; public set; }
    public Dictionary`2<string, string> Meta { get; public set; }
    public int Port { get; public set; }
    public string Namespace { get; public set; }
    public Dictionary`2<string, ServiceAddress> TaggedAddresses { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ID();
    [CompilerGeneratedAttribute]
public void set_ID(string value);
    [CompilerGeneratedAttribute]
public string get_Service();
    [CompilerGeneratedAttribute]
public void set_Service(string value);
    [CompilerGeneratedAttribute]
public String[] get_Tags();
    [CompilerGeneratedAttribute]
public void set_Tags(String[] value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_Meta();
    [CompilerGeneratedAttribute]
public void set_Meta(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public int get_Port();
    [CompilerGeneratedAttribute]
public void set_Port(int value);
    [CompilerGeneratedAttribute]
public string get_Namespace();
    [CompilerGeneratedAttribute]
public void set_Namespace(string value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, ServiceAddress> get_TaggedAddresses();
    [CompilerGeneratedAttribute]
public void set_TaggedAddresses(Dictionary`2<string, ServiceAddress> value);
}
public class Consul.ServiceIntentionsEntry : object {
    [CompilerGeneratedAttribute]
private string <Kind>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Namespace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Partition>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Meta>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, object> <JWT>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Provider> <Providers>k__BackingField;
    [JsonPropertyAttribute]
public string Kind { get; public set; }
    [JsonPropertyAttribute]
public string Name { get; public set; }
    [JsonPropertyAttribute]
public string Namespace { get; public set; }
    [JsonPropertyAttribute]
public string Partition { get; public set; }
    [JsonPropertyAttribute]
public Dictionary`2<string, string> Meta { get; public set; }
    [JsonPropertyAttribute]
public Dictionary`2<string, object> JWT { get; public set; }
    [JsonPropertyAttribute]
public List`1<Provider> Providers { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_Kind();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Kind(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Namespace();
    [CompilerGeneratedAttribute]
public void set_Namespace(string value);
    [CompilerGeneratedAttribute]
public string get_Partition();
    [CompilerGeneratedAttribute]
public void set_Partition(string value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_Meta();
    [CompilerGeneratedAttribute]
public void set_Meta(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, object> get_JWT();
    [CompilerGeneratedAttribute]
public void set_JWT(Dictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public List`1<Provider> get_Providers();
    [CompilerGeneratedAttribute]
public void set_Providers(List`1<Provider> value);
}
[TypeConverterAttribute("Consul.ServiceKindTypeConverter")]
public class Consul.ServiceKind : object {
    [CompilerGeneratedAttribute]
private static IReadOnlyDictionary`2<string, ServiceKind> <Map>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    private static IReadOnlyDictionary`2<string, ServiceKind> Map { get; }
    public static ServiceKind ConnectProxy { get; }
    public static ServiceKind MeshGateway { get; }
    public static ServiceKind TerminatingGateway { get; }
    public static ServiceKind IngressGateway { get; }
    private string Value { get; }
    private ServiceKind(string value);
    private static ServiceKind();
    [CompilerGeneratedAttribute]
private static IReadOnlyDictionary`2<string, ServiceKind> get_Map();
    public static ServiceKind get_ConnectProxy();
    public static ServiceKind get_MeshGateway();
    public static ServiceKind get_TerminatingGateway();
    public static ServiceKind get_IngressGateway();
    [CompilerGeneratedAttribute]
private string get_Value();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(ServiceKind other);
    public virtual int GetHashCode();
    public virtual string ToString();
    public static bool TryParse(string value, ServiceKind& result);
}
internal class Consul.ServiceKindTypeConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
public class Consul.ServiceQuery : object {
    [CompilerGeneratedAttribute]
private string <Service>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Near>k__BackingField;
    [CompilerGeneratedAttribute]
private QueryDatacenterOptions <Failover>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OnlyPassing>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <Tags>k__BackingField;
    [JsonPropertyAttribute]
public string Service { get; public set; }
    [JsonPropertyAttribute]
public string Near { get; public set; }
    [JsonPropertyAttribute]
public QueryDatacenterOptions Failover { get; public set; }
    [JsonPropertyAttribute]
public bool OnlyPassing { get; public set; }
    [JsonPropertyAttribute]
public List`1<string> Tags { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Service();
    [CompilerGeneratedAttribute]
public void set_Service(string value);
    [CompilerGeneratedAttribute]
public string get_Near();
    [CompilerGeneratedAttribute]
public void set_Near(string value);
    [CompilerGeneratedAttribute]
public QueryDatacenterOptions get_Failover();
    [CompilerGeneratedAttribute]
public void set_Failover(QueryDatacenterOptions value);
    [CompilerGeneratedAttribute]
public bool get_OnlyPassing();
    [CompilerGeneratedAttribute]
public void set_OnlyPassing(bool value);
    [CompilerGeneratedAttribute]
public List`1<string> get_Tags();
    [CompilerGeneratedAttribute]
public void set_Tags(List`1<string> value);
}
public class Consul.ServiceResolverEntry : object {
    [CompilerGeneratedAttribute]
private string <Kind>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Namespace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Partition>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Meta>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConnectTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RequestTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Subsets>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Filter>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OnlyPassing>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultSubset>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Redirect>k__BackingField;
    [CompilerGeneratedAttribute]
private LoadBalancerConfig <LoadBalancer>k__BackingField;
    [JsonPropertyAttribute]
public string Kind { get; public set; }
    [JsonPropertyAttribute]
public string Name { get; public set; }
    [JsonPropertyAttribute]
public string Namespace { get; public set; }
    [JsonPropertyAttribute]
public string Partition { get; public set; }
    [JsonPropertyAttribute]
public Dictionary`2<string, string> Meta { get; public set; }
    [JsonPropertyAttribute]
public string ConnectTimeout { get; public set; }
    [JsonPropertyAttribute]
public string RequestTimeout { get; public set; }
    [JsonPropertyAttribute]
public Dictionary`2<string, string> Subsets { get; public set; }
    [JsonPropertyAttribute]
public string Filter { get; public set; }
    [JsonPropertyAttribute]
public bool OnlyPassing { get; public set; }
    [JsonPropertyAttribute]
public string DefaultSubset { get; public set; }
    [JsonPropertyAttribute]
public Dictionary`2<string, string> Redirect { get; public set; }
    [JsonPropertyAttribute]
public LoadBalancerConfig LoadBalancer { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_Kind();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Kind(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Namespace();
    [CompilerGeneratedAttribute]
public void set_Namespace(string value);
    [CompilerGeneratedAttribute]
public string get_Partition();
    [CompilerGeneratedAttribute]
public void set_Partition(string value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_Meta();
    [CompilerGeneratedAttribute]
public void set_Meta(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public string get_ConnectTimeout();
    [CompilerGeneratedAttribute]
public void set_ConnectTimeout(string value);
    [CompilerGeneratedAttribute]
public string get_RequestTimeout();
    [CompilerGeneratedAttribute]
public void set_RequestTimeout(string value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_Subsets();
    [CompilerGeneratedAttribute]
public void set_Subsets(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public string get_Filter();
    [CompilerGeneratedAttribute]
public void set_Filter(string value);
    [CompilerGeneratedAttribute]
public bool get_OnlyPassing();
    [CompilerGeneratedAttribute]
public void set_OnlyPassing(bool value);
    [CompilerGeneratedAttribute]
public string get_DefaultSubset();
    [CompilerGeneratedAttribute]
public void set_DefaultSubset(string value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_Redirect();
    [CompilerGeneratedAttribute]
public void set_Redirect(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public LoadBalancerConfig get_LoadBalancer();
    [CompilerGeneratedAttribute]
public void set_LoadBalancer(LoadBalancerConfig value);
}
public class Consul.ServiceRouterEntry : object {
    [CompilerGeneratedAttribute]
private string <Kind>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Namespace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Partition>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Meta>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Routes> <Routes>k__BackingField;
    [JsonPropertyAttribute]
public string Kind { get; public set; }
    [JsonPropertyAttribute]
public string Name { get; public set; }
    [JsonPropertyAttribute]
public string Namespace { get; public set; }
    [JsonPropertyAttribute]
public string Partition { get; public set; }
    [JsonPropertyAttribute]
public Dictionary`2<string, string> Meta { get; public set; }
    [JsonPropertyAttribute]
public List`1<Routes> Routes { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_Kind();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Kind(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Namespace();
    [CompilerGeneratedAttribute]
public void set_Namespace(string value);
    [CompilerGeneratedAttribute]
public string get_Partition();
    [CompilerGeneratedAttribute]
public void set_Partition(string value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_Meta();
    [CompilerGeneratedAttribute]
public void set_Meta(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public List`1<Routes> get_Routes();
    [CompilerGeneratedAttribute]
public void set_Routes(List`1<Routes> value);
}
public class Consul.ServiceSplitterEntry : object {
    [CompilerGeneratedAttribute]
private string <Kind>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Namespace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Partition>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Meta>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<SplitConfig> <Splits>k__BackingField;
    [JsonPropertyAttribute]
public string Kind { get; public set; }
    [JsonPropertyAttribute]
public string Name { get; public set; }
    [JsonPropertyAttribute]
public string Namespace { get; public set; }
    [JsonPropertyAttribute]
public string Partition { get; public set; }
    [JsonPropertyAttribute]
public Dictionary`2<string, string> Meta { get; public set; }
    [JsonPropertyAttribute]
public List`1<SplitConfig> Splits { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_Kind();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Kind(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Namespace();
    [CompilerGeneratedAttribute]
public void set_Namespace(string value);
    [CompilerGeneratedAttribute]
public string get_Partition();
    [CompilerGeneratedAttribute]
public void set_Partition(string value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_Meta();
    [CompilerGeneratedAttribute]
public void set_Meta(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public List`1<SplitConfig> get_Splits();
    [CompilerGeneratedAttribute]
public void set_Splits(List`1<SplitConfig> value);
}
public class Consul.ServiceTaggedAddress : object {
    [CompilerGeneratedAttribute]
private string <Address>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Port>k__BackingField;
    public string Address { get; public set; }
    public int Port { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Address();
    [CompilerGeneratedAttribute]
public void set_Address(string value);
    [CompilerGeneratedAttribute]
public int get_Port();
    [CompilerGeneratedAttribute]
public void set_Port(int value);
}
public class Consul.Session : object {
    private ConsulClient _client;
    internal Session(ConsulClient c);
    public sealed virtual Task RenewPeriodic(TimeSpan initialTTL, string id, CancellationToken ct);
    public sealed virtual Task RenewPeriodic(TimeSpan initialTTL, string id, WriteOptions q, CancellationToken ct);
    public sealed virtual Task`1<WriteResult`1<string>> Create(CancellationToken ct);
    public sealed virtual Task`1<WriteResult`1<string>> Create(SessionEntry se, CancellationToken ct);
    [AsyncStateMachineAttribute("Consul.Session/<Create>d__7")]
public sealed virtual Task`1<WriteResult`1<string>> Create(SessionEntry se, WriteOptions q, CancellationToken ct);
    public sealed virtual Task`1<WriteResult`1<string>> CreateNoChecks(CancellationToken ct);
    public sealed virtual Task`1<WriteResult`1<string>> CreateNoChecks(SessionEntry se, CancellationToken ct);
    public sealed virtual Task`1<WriteResult`1<string>> CreateNoChecks(SessionEntry se, WriteOptions q, CancellationToken ct);
    public sealed virtual Task`1<WriteResult`1<bool>> Destroy(string id, CancellationToken ct);
    public sealed virtual Task`1<WriteResult`1<bool>> Destroy(string id, WriteOptions q, CancellationToken ct);
    public sealed virtual Task`1<QueryResult`1<SessionEntry>> Info(string id, CancellationToken ct);
    [AsyncStateMachineAttribute("Consul.Session/<Info>d__14")]
public sealed virtual Task`1<QueryResult`1<SessionEntry>> Info(string id, QueryOptions q, CancellationToken ct);
    public sealed virtual Task`1<QueryResult`1<SessionEntry[]>> List(CancellationToken ct);
    public sealed virtual Task`1<QueryResult`1<SessionEntry[]>> List(QueryOptions q, CancellationToken ct);
    public sealed virtual Task`1<QueryResult`1<SessionEntry[]>> Node(string node, CancellationToken ct);
    public sealed virtual Task`1<QueryResult`1<SessionEntry[]>> Node(string node, QueryOptions q, CancellationToken ct);
    public sealed virtual Task`1<WriteResult`1<SessionEntry>> Renew(string id, CancellationToken ct);
    [AsyncStateMachineAttribute("Consul.Session/<Renew>d__20")]
public sealed virtual Task`1<WriteResult`1<SessionEntry>> Renew(string id, WriteOptions q, CancellationToken ct);
}
public class Consul.SessionBehavior : object {
    [CompilerGeneratedAttribute]
private string <Behavior>k__BackingField;
    [CompilerGeneratedAttribute]
private static SessionBehavior <Release>k__BackingField;
    [CompilerGeneratedAttribute]
private static SessionBehavior <Delete>k__BackingField;
    public string Behavior { get; private set; }
    public static SessionBehavior Release { get; }
    public static SessionBehavior Delete { get; }
    private static SessionBehavior();
    [CompilerGeneratedAttribute]
public string get_Behavior();
    [CompilerGeneratedAttribute]
private void set_Behavior(string value);
    [CompilerGeneratedAttribute]
public static SessionBehavior get_Release();
    [CompilerGeneratedAttribute]
public static SessionBehavior get_Delete();
    public sealed virtual bool Equals(SessionBehavior other);
    public virtual bool Equals(object other);
    public virtual int GetHashCode();
}
public class Consul.SessionBehaviorConverter : JsonConverter {
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual bool CanConvert(Type objectType);
}
public class Consul.SessionCreationException : Exception {
    public SessionCreationException(string message);
    public SessionCreationException(string message, Exception inner);
    protected SessionCreationException(SerializationInfo info, StreamingContext context);
}
public class Consul.SessionEntry : object {
    [CompilerGeneratedAttribute]
private ulong <CreateIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ID>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Node>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <Checks>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <LockDelay>k__BackingField;
    [CompilerGeneratedAttribute]
private SessionBehavior <Behavior>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <TTL>k__BackingField;
    public ulong CreateIndex { get; public set; }
    public string ID { get; public set; }
    [JsonPropertyAttribute]
public string Name { get; public set; }
    [JsonPropertyAttribute]
public string Node { get; public set; }
    public List`1<string> Checks { get; public set; }
    [JsonConverterAttribute("Consul.NanoSecTimespanConverter")]
[JsonPropertyAttribute]
public Nullable`1<TimeSpan> LockDelay { get; public set; }
    [JsonPropertyAttribute]
[JsonConverterAttribute("Consul.SessionBehaviorConverter")]
public SessionBehavior Behavior { get; public set; }
    [JsonPropertyAttribute]
[JsonConverterAttribute("Consul.DurationTimespanConverter")]
public Nullable`1<TimeSpan> TTL { get; public set; }
    [CompilerGeneratedAttribute]
public ulong get_CreateIndex();
    [CompilerGeneratedAttribute]
public void set_CreateIndex(ulong value);
    [CompilerGeneratedAttribute]
public string get_ID();
    [CompilerGeneratedAttribute]
public void set_ID(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Node();
    [CompilerGeneratedAttribute]
public void set_Node(string value);
    [CompilerGeneratedAttribute]
public List`1<string> get_Checks();
    [CompilerGeneratedAttribute]
public void set_Checks(List`1<string> value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_LockDelay();
    [CompilerGeneratedAttribute]
public void set_LockDelay(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public SessionBehavior get_Behavior();
    [CompilerGeneratedAttribute]
public void set_Behavior(SessionBehavior value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_TTL();
    [CompilerGeneratedAttribute]
public void set_TTL(Nullable`1<TimeSpan> value);
    public static bool ShouldSerializeID();
    public static bool ShouldSerializeCreateIndex();
    public bool ShouldSerializeChecks();
}
public class Consul.SessionExpiredException : Exception {
    public SessionExpiredException(string message);
    public SessionExpiredException(string message, Exception inner);
    protected SessionExpiredException(SerializationInfo info, StreamingContext context);
}
public class Consul.Snapshot : object {
    private ConsulClient _client;
    internal Snapshot(ConsulClient c);
    public sealed virtual Task`1<WriteResult> Restore(Stream s, CancellationToken ct);
    public sealed virtual Task`1<WriteResult> Restore(Stream s, WriteOptions q, CancellationToken ct);
    public sealed virtual Task`1<QueryResult`1<Stream>> Save(CancellationToken ct);
    public sealed virtual Task`1<QueryResult`1<Stream>> Save(QueryOptions q, CancellationToken ct);
}
public class Consul.SplitConfig : object {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Weight>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Service>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServiceSubset>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Namespace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Partition>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, Dictionary`2<string, string>> <RequestHeaders>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, Dictionary`2<string, string>> <ResponseHeaders>k__BackingField;
    [JsonPropertyAttribute]
public Nullable`1<int> Weight { get; public set; }
    [JsonPropertyAttribute]
public string Service { get; public set; }
    [JsonPropertyAttribute]
public string ServiceSubset { get; public set; }
    [JsonPropertyAttribute]
public string Namespace { get; public set; }
    [JsonPropertyAttribute]
public string Partition { get; public set; }
    [JsonPropertyAttribute]
public Dictionary`2<string, Dictionary`2<string, string>> RequestHeaders { get; public set; }
    [JsonPropertyAttribute]
public Dictionary`2<string, Dictionary`2<string, string>> ResponseHeaders { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Weight();
    [CompilerGeneratedAttribute]
public void set_Weight(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_Service();
    [CompilerGeneratedAttribute]
public void set_Service(string value);
    [CompilerGeneratedAttribute]
public string get_ServiceSubset();
    [CompilerGeneratedAttribute]
public void set_ServiceSubset(string value);
    [CompilerGeneratedAttribute]
public string get_Namespace();
    [CompilerGeneratedAttribute]
public void set_Namespace(string value);
    [CompilerGeneratedAttribute]
public string get_Partition();
    [CompilerGeneratedAttribute]
public void set_Partition(string value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, Dictionary`2<string, string>> get_RequestHeaders();
    [CompilerGeneratedAttribute]
public void set_RequestHeaders(Dictionary`2<string, Dictionary`2<string, string>> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, Dictionary`2<string, string>> get_ResponseHeaders();
    [CompilerGeneratedAttribute]
public void set_ResponseHeaders(Dictionary`2<string, Dictionary`2<string, string>> value);
}
public class Consul.Status : object {
    private ConsulClient _client;
    internal Status(ConsulClient c);
    [AsyncStateMachineAttribute("Consul.Status/<Leader>d__2")]
public sealed virtual Task`1<string> Leader(CancellationToken ct);
    [AsyncStateMachineAttribute("Consul.Status/<Peers>d__3")]
public sealed virtual Task`1<String[]> Peers(CancellationToken ct);
}
public class Consul.TaggedAddresses : object {
    [CompilerGeneratedAttribute]
private AddressDetails <Lan>k__BackingField;
    [CompilerGeneratedAttribute]
private AddressDetails <Wan>k__BackingField;
    public AddressDetails Lan { get; public set; }
    public AddressDetails Wan { get; public set; }
    [CompilerGeneratedAttribute]
public AddressDetails get_Lan();
    [CompilerGeneratedAttribute]
public void set_Lan(AddressDetails value);
    [CompilerGeneratedAttribute]
public AddressDetails get_Wan();
    [CompilerGeneratedAttribute]
public void set_Wan(AddressDetails value);
}
public class Consul.TcpRouteEntry : object {
    [CompilerGeneratedAttribute]
private string <Kind>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Namespace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Partition>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Meta>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<TcpRouteService> <Services>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ApiGatewayReference> <Parents>k__BackingField;
    [JsonPropertyAttribute]
public string Kind { get; public set; }
    [JsonPropertyAttribute]
public string Name { get; public set; }
    [JsonPropertyAttribute]
public string Namespace { get; public set; }
    [JsonPropertyAttribute]
public string Partition { get; public set; }
    [JsonPropertyAttribute]
public Dictionary`2<string, string> Meta { get; public set; }
    [JsonPropertyAttribute]
public List`1<TcpRouteService> Services { get; public set; }
    [JsonPropertyAttribute]
public List`1<ApiGatewayReference> Parents { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Kind();
    [CompilerGeneratedAttribute]
public void set_Kind(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Namespace();
    [CompilerGeneratedAttribute]
public void set_Namespace(string value);
    [CompilerGeneratedAttribute]
public string get_Partition();
    [CompilerGeneratedAttribute]
public void set_Partition(string value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_Meta();
    [CompilerGeneratedAttribute]
public void set_Meta(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public List`1<TcpRouteService> get_Services();
    [CompilerGeneratedAttribute]
public void set_Services(List`1<TcpRouteService> value);
    [CompilerGeneratedAttribute]
public List`1<ApiGatewayReference> get_Parents();
    [CompilerGeneratedAttribute]
public void set_Parents(List`1<ApiGatewayReference> value);
}
public class Consul.TcpRouteService : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Namespace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Partition>k__BackingField;
    [JsonPropertyAttribute]
public string Name { get; public set; }
    [JsonPropertyAttribute]
public string Namespace { get; public set; }
    [JsonPropertyAttribute]
public string Partition { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Namespace();
    [CompilerGeneratedAttribute]
public void set_Namespace(string value);
    [CompilerGeneratedAttribute]
public string get_Partition();
    [CompilerGeneratedAttribute]
public void set_Partition(string value);
}
public class Consul.TerminatingGatewayEntry : object {
    [CompilerGeneratedAttribute]
private string <Kind>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Namespace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Partition>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Meta>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<LinkedService> <Services>k__BackingField;
    [JsonPropertyAttribute]
public string Kind { get; public set; }
    [JsonPropertyAttribute]
public string Name { get; public set; }
    [JsonPropertyAttribute]
public string Namespace { get; public set; }
    [JsonPropertyAttribute]
public string Partition { get; public set; }
    [JsonPropertyAttribute]
public Dictionary`2<string, string> Meta { get; public set; }
    [JsonPropertyAttribute]
public List`1<LinkedService> Services { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_Kind();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Kind(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Namespace();
    [CompilerGeneratedAttribute]
public void set_Namespace(string value);
    [CompilerGeneratedAttribute]
public string get_Partition();
    [CompilerGeneratedAttribute]
public void set_Partition(string value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_Meta();
    [CompilerGeneratedAttribute]
public void set_Meta(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public List`1<LinkedService> get_Services();
    [CompilerGeneratedAttribute]
public void set_Services(List`1<LinkedService> value);
}
public class Consul.TLSCertificatesConfig : object {
    [CompilerGeneratedAttribute]
private TrustedCAConfig <TrustedCA>k__BackingField;
    [CompilerGeneratedAttribute]
private CaCertificateProviderInstanceConfig <CaCertificateProviderInstance>k__BackingField;
    [JsonPropertyAttribute]
public TrustedCAConfig TrustedCA { get; public set; }
    [JsonPropertyAttribute]
public CaCertificateProviderInstanceConfig CaCertificateProviderInstance { get; public set; }
    [CompilerGeneratedAttribute]
public TrustedCAConfig get_TrustedCA();
    [CompilerGeneratedAttribute]
public void set_TrustedCA(TrustedCAConfig value);
    [CompilerGeneratedAttribute]
public CaCertificateProviderInstanceConfig get_CaCertificateProviderInstance();
    [CompilerGeneratedAttribute]
public void set_CaCertificateProviderInstance(CaCertificateProviderInstanceConfig value);
}
public class Consul.TLSConfig : object {
    [CompilerGeneratedAttribute]
private bool <Enabled>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TLSMinVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TLSMaxVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <CipherSuites>k__BackingField;
    [CompilerGeneratedAttribute]
private SDSConfig <SDS>k__BackingField;
    [JsonPropertyAttribute]
public bool Enabled { get; public set; }
    [JsonPropertyAttribute]
public string TLSMinVersion { get; public set; }
    [JsonPropertyAttribute]
public string TLSMaxVersion { get; public set; }
    [JsonPropertyAttribute]
public List`1<string> CipherSuites { get; public set; }
    [JsonPropertyAttribute]
public SDSConfig SDS { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Enabled();
    [CompilerGeneratedAttribute]
public void set_Enabled(bool value);
    [CompilerGeneratedAttribute]
public string get_TLSMinVersion();
    [CompilerGeneratedAttribute]
public void set_TLSMinVersion(string value);
    [CompilerGeneratedAttribute]
public string get_TLSMaxVersion();
    [CompilerGeneratedAttribute]
public void set_TLSMaxVersion(string value);
    [CompilerGeneratedAttribute]
public List`1<string> get_CipherSuites();
    [CompilerGeneratedAttribute]
public void set_CipherSuites(List`1<string> value);
    [CompilerGeneratedAttribute]
public SDSConfig get_SDS();
    [CompilerGeneratedAttribute]
public void set_SDS(SDSConfig value);
}
public class Consul.TLSDirectionConfig : object {
    [CompilerGeneratedAttribute]
private string <TLSMinVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TLSMaxVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <CipherSuites>k__BackingField;
    [JsonPropertyAttribute]
public string TLSMinVersion { get; public set; }
    [JsonPropertyAttribute]
public string TLSMaxVersion { get; public set; }
    [JsonPropertyAttribute]
public List`1<string> CipherSuites { get; public set; }
    [CompilerGeneratedAttribute]
public string get_TLSMinVersion();
    [CompilerGeneratedAttribute]
public void set_TLSMinVersion(string value);
    [CompilerGeneratedAttribute]
public string get_TLSMaxVersion();
    [CompilerGeneratedAttribute]
public void set_TLSMaxVersion(string value);
    [CompilerGeneratedAttribute]
public List`1<string> get_CipherSuites();
    [CompilerGeneratedAttribute]
public void set_CipherSuites(List`1<string> value);
}
public class Consul.Token : object {
    private ConsulClient _client;
    internal Token(ConsulClient c);
    public sealed virtual Task`1<WriteResult`1<TokenEntry>> Bootstrap(CancellationToken ct);
    [AsyncStateMachineAttribute("Consul.Token/<Bootstrap>d__4")]
public sealed virtual Task`1<WriteResult`1<TokenEntry>> Bootstrap(WriteOptions writeOptions, CancellationToken ct);
    public sealed virtual Task`1<WriteResult`1<TokenEntry>> Create(TokenEntry token, CancellationToken ct);
    [AsyncStateMachineAttribute("Consul.Token/<Create>d__6")]
public sealed virtual Task`1<WriteResult`1<TokenEntry>> Create(TokenEntry token, WriteOptions writeOptions, CancellationToken ct);
    public sealed virtual Task`1<WriteResult`1<TokenEntry>> Update(TokenEntry token, CancellationToken ct);
    [AsyncStateMachineAttribute("Consul.Token/<Update>d__8")]
public sealed virtual Task`1<WriteResult`1<TokenEntry>> Update(TokenEntry token, WriteOptions writeOptions, CancellationToken ct);
    public sealed virtual Task`1<WriteResult`1<bool>> Delete(string id, CancellationToken ct);
    public sealed virtual Task`1<WriteResult`1<bool>> Delete(string id, WriteOptions writeOptions, CancellationToken ct);
    public sealed virtual Task`1<WriteResult`1<TokenEntry>> Clone(string id, CancellationToken ct);
    public sealed virtual Task`1<WriteResult`1<TokenEntry>> Clone(string id, WriteOptions writeOptions, CancellationToken ct);
    [AsyncStateMachineAttribute("Consul.Token/<Clone>d__13")]
public Task`1<WriteResult`1<TokenEntry>> Clone(string id, string description, WriteOptions writeOptions, CancellationToken ct);
    public sealed virtual Task`1<QueryResult`1<TokenEntry>> Read(string id, CancellationToken ct);
    [AsyncStateMachineAttribute("Consul.Token/<Read>d__15")]
public sealed virtual Task`1<QueryResult`1<TokenEntry>> Read(string id, QueryOptions queryOptions, CancellationToken ct);
    public sealed virtual Task`1<QueryResult`1<TokenEntry[]>> List(CancellationToken ct);
    public sealed virtual Task`1<QueryResult`1<TokenEntry[]>> List(QueryOptions queryOptions, CancellationToken ct);
}
public class Consul.TokenEntry : object {
    [CompilerGeneratedAttribute]
private string <AccessorID>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SecretID>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private PolicyLink[] <Policies>k__BackingField;
    [CompilerGeneratedAttribute]
private RoleLink[] <Roles>k__BackingField;
    [CompilerGeneratedAttribute]
private ServiceIdentity[] <ServiceIdentities>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Local>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AuthMethod>k__BackingField;
    [JsonPropertyAttribute]
public string AccessorID { get; public set; }
    [JsonPropertyAttribute]
public string SecretID { get; public set; }
    public string Description { get; public set; }
    [JsonPropertyAttribute]
public PolicyLink[] Policies { get; public set; }
    [JsonPropertyAttribute]
public RoleLink[] Roles { get; public set; }
    [JsonPropertyAttribute]
public ServiceIdentity[] ServiceIdentities { get; public set; }
    public bool Local { get; public set; }
    [JsonPropertyAttribute]
public string AuthMethod { get; public set; }
    public TokenEntry(string description, PolicyLink[] policies);
    public TokenEntry(string description, RoleLink[] roles);
    public TokenEntry(string description, ServiceIdentity[] serviceIdentities);
    public TokenEntry(string accessorId, string description);
    public TokenEntry(string accessorId, string description, PolicyLink[] policies, RoleLink[] roles, ServiceIdentity[] serviceIdentities);
    [CompilerGeneratedAttribute]
public string get_AccessorID();
    [CompilerGeneratedAttribute]
public void set_AccessorID(string value);
    [CompilerGeneratedAttribute]
public string get_SecretID();
    [CompilerGeneratedAttribute]
public void set_SecretID(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public PolicyLink[] get_Policies();
    [CompilerGeneratedAttribute]
public void set_Policies(PolicyLink[] value);
    [CompilerGeneratedAttribute]
public RoleLink[] get_Roles();
    [CompilerGeneratedAttribute]
public void set_Roles(RoleLink[] value);
    [CompilerGeneratedAttribute]
public ServiceIdentity[] get_ServiceIdentities();
    [CompilerGeneratedAttribute]
public void set_ServiceIdentities(ServiceIdentity[] value);
    [CompilerGeneratedAttribute]
public bool get_Local();
    [CompilerGeneratedAttribute]
public void set_Local(bool value);
    [CompilerGeneratedAttribute]
public string get_AuthMethod();
    [CompilerGeneratedAttribute]
public void set_AuthMethod(string value);
    public static bool ShouldSerializeCreateIndex();
    public static bool ShouldSerializeModifyIndex();
}
public class Consul.TransparentProxy : object {
    [CompilerGeneratedAttribute]
private int <OutboundListenerPort>k__BackingField;
    public int OutboundListenerPort { get; public set; }
    [CompilerGeneratedAttribute]
public int get_OutboundListenerPort();
    [CompilerGeneratedAttribute]
public void set_OutboundListenerPort(int value);
}
public class Consul.TransparentProxyConfig : object {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <OutboundListenerPort>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DialedDirectly>k__BackingField;
    [JsonPropertyAttribute]
public Nullable`1<int> OutboundListenerPort { get; public set; }
    [JsonPropertyAttribute]
public bool DialedDirectly { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_OutboundListenerPort();
    [CompilerGeneratedAttribute]
public void set_OutboundListenerPort(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public bool get_DialedDirectly();
    [CompilerGeneratedAttribute]
public void set_DialedDirectly(bool value);
}
public class Consul.TrustedCAConfig : object {
    [CompilerGeneratedAttribute]
private string <Filename>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EnvironmentVariable>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InlineString>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InlineBytes>k__BackingField;
    [JsonPropertyAttribute]
public string Filename { get; public set; }
    [JsonPropertyAttribute]
public string EnvironmentVariable { get; public set; }
    [JsonPropertyAttribute]
public string InlineString { get; public set; }
    [JsonPropertyAttribute]
public string InlineBytes { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Filename();
    [CompilerGeneratedAttribute]
public void set_Filename(string value);
    [CompilerGeneratedAttribute]
public string get_EnvironmentVariable();
    [CompilerGeneratedAttribute]
public void set_EnvironmentVariable(string value);
    [CompilerGeneratedAttribute]
public string get_InlineString();
    [CompilerGeneratedAttribute]
public void set_InlineString(string value);
    [CompilerGeneratedAttribute]
public string get_InlineBytes();
    [CompilerGeneratedAttribute]
public void set_InlineBytes(string value);
}
public class Consul.TTLStatus : object {
    [CompilerGeneratedAttribute]
private string <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LegacyStatus>k__BackingField;
    [CompilerGeneratedAttribute]
private static TTLStatus <Pass>k__BackingField;
    [CompilerGeneratedAttribute]
private static TTLStatus <Warn>k__BackingField;
    [CompilerGeneratedAttribute]
private static TTLStatus <Critical>k__BackingField;
    public string Status { get; private set; }
    internal string LegacyStatus { get; private set; }
    public static TTLStatus Pass { get; }
    public static TTLStatus Warn { get; }
    public static TTLStatus Critical { get; }
    [ObsoleteAttribute("Use TTLStatus.Critical instead. This status will be an error in 0.7.0+", "True")]
public static TTLStatus Fail { get; }
    private static TTLStatus();
    [CompilerGeneratedAttribute]
public string get_Status();
    [CompilerGeneratedAttribute]
private void set_Status(string value);
    [CompilerGeneratedAttribute]
internal string get_LegacyStatus();
    [CompilerGeneratedAttribute]
private void set_LegacyStatus(string value);
    [CompilerGeneratedAttribute]
public static TTLStatus get_Pass();
    [CompilerGeneratedAttribute]
public static TTLStatus get_Warn();
    [CompilerGeneratedAttribute]
public static TTLStatus get_Critical();
    public static TTLStatus get_Fail();
    public sealed virtual bool Equals(TTLStatus other);
    public virtual bool Equals(object other);
    public virtual int GetHashCode();
}
public class Consul.TTLStatusConverter : JsonConverter {
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual bool CanConvert(Type objectType);
}
public class Consul.TxnError : object {
    [CompilerGeneratedAttribute]
private int <OpIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private string <What>k__BackingField;
    [JsonPropertyAttribute]
public int OpIndex { get; private set; }
    [JsonPropertyAttribute]
public string What { get; private set; }
    [CompilerGeneratedAttribute]
public int get_OpIndex();
    [CompilerGeneratedAttribute]
private void set_OpIndex(int value);
    [CompilerGeneratedAttribute]
public string get_What();
    [CompilerGeneratedAttribute]
private void set_What(string value);
}
internal class Consul.TxnOp : object {
    [CompilerGeneratedAttribute]
private KVTxnOp <KV>k__BackingField;
    public KVTxnOp KV { get; public set; }
    [CompilerGeneratedAttribute]
public KVTxnOp get_KV();
    [CompilerGeneratedAttribute]
public void set_KV(KVTxnOp value);
}
internal class Consul.TxnResponse : object {
    [CompilerGeneratedAttribute]
private List`1<TxnResult> <Results>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<TxnError> <Errors>k__BackingField;
    [JsonPropertyAttribute]
internal List`1<TxnResult> Results { get; internal set; }
    [JsonPropertyAttribute]
internal List`1<TxnError> Errors { get; internal set; }
    [CompilerGeneratedAttribute]
internal List`1<TxnResult> get_Results();
    [CompilerGeneratedAttribute]
internal void set_Results(List`1<TxnResult> value);
    [CompilerGeneratedAttribute]
internal List`1<TxnError> get_Errors();
    [CompilerGeneratedAttribute]
internal void set_Errors(List`1<TxnError> value);
}
internal class Consul.TxnResult : object {
    [CompilerGeneratedAttribute]
private KVPair <KV>k__BackingField;
    public KVPair KV { get; public set; }
    [CompilerGeneratedAttribute]
public KVPair get_KV();
    [CompilerGeneratedAttribute]
public void set_KV(KVPair value);
}
public class Consul.Upstream : object {
    [CompilerGeneratedAttribute]
private string <DestinationType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DestinationName>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LocalBindPort>k__BackingField;
    public string DestinationType { get; public set; }
    public string DestinationName { get; public set; }
    public int LocalBindPort { get; public set; }
    [CompilerGeneratedAttribute]
public string get_DestinationType();
    [CompilerGeneratedAttribute]
public void set_DestinationType(string value);
    [CompilerGeneratedAttribute]
public string get_DestinationName();
    [CompilerGeneratedAttribute]
public void set_DestinationName(string value);
    [CompilerGeneratedAttribute]
public int get_LocalBindPort();
    [CompilerGeneratedAttribute]
public void set_LocalBindPort(int value);
}
public class Consul.UpstreamConfig : object {
    [CompilerGeneratedAttribute]
private List`1<OverrideConfig> <Overrides>k__BackingField;
    [JsonPropertyAttribute]
public List`1<OverrideConfig> Overrides { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<OverrideConfig> get_Overrides();
    [CompilerGeneratedAttribute]
public void set_Overrides(List`1<OverrideConfig> value);
}
public class Consul.UserEvent : object {
    [CompilerGeneratedAttribute]
private string <ID>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <Payload>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NodeFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServiceFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TagFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <LTime>k__BackingField;
    public string ID { get; public set; }
    public string Name { get; public set; }
    public Byte[] Payload { get; public set; }
    public string NodeFilter { get; public set; }
    public string ServiceFilter { get; public set; }
    public string TagFilter { get; public set; }
    public int Version { get; public set; }
    public ulong LTime { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ID();
    [CompilerGeneratedAttribute]
public void set_ID(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public Byte[] get_Payload();
    [CompilerGeneratedAttribute]
public void set_Payload(Byte[] value);
    [CompilerGeneratedAttribute]
public string get_NodeFilter();
    [CompilerGeneratedAttribute]
public void set_NodeFilter(string value);
    [CompilerGeneratedAttribute]
public string get_ServiceFilter();
    [CompilerGeneratedAttribute]
public void set_ServiceFilter(string value);
    [CompilerGeneratedAttribute]
public string get_TagFilter();
    [CompilerGeneratedAttribute]
public void set_TagFilter(string value);
    [CompilerGeneratedAttribute]
public int get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(int value);
    [CompilerGeneratedAttribute]
public ulong get_LTime();
    [CompilerGeneratedAttribute]
public void set_LTime(ulong value);
}
public class Consul.VerifyClaim : object {
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [JsonPropertyAttribute]
public string Path { get; public set; }
    [JsonPropertyAttribute]
public string Value { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
}
public class Consul.VerifyClaims : object {
    [CompilerGeneratedAttribute]
private List`1<string> <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [JsonPropertyAttribute]
public List`1<string> Path { get; public set; }
    [JsonPropertyAttribute]
public string Value { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<string> get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(List`1<string> value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
}
public class Consul.Weights : object {
    [CompilerGeneratedAttribute]
private int <Passing>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Warning>k__BackingField;
    public int Passing { get; public set; }
    public int Warning { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Passing();
    [CompilerGeneratedAttribute]
public void set_Passing(int value);
    [CompilerGeneratedAttribute]
public int get_Warning();
    [CompilerGeneratedAttribute]
public void set_Warning(int value);
}
public class Consul.WriteOptions : object {
    public static WriteOptions Default;
    [CompilerGeneratedAttribute]
private string <Namespace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Datacenter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Token>k__BackingField;
    public string Namespace { get; public set; }
    public string Datacenter { get; public set; }
    public string Token { get; public set; }
    private static WriteOptions();
    [CompilerGeneratedAttribute]
public string get_Namespace();
    [CompilerGeneratedAttribute]
public void set_Namespace(string value);
    [CompilerGeneratedAttribute]
public string get_Datacenter();
    [CompilerGeneratedAttribute]
public void set_Datacenter(string value);
    [CompilerGeneratedAttribute]
public string get_Token();
    [CompilerGeneratedAttribute]
public void set_Token(string value);
}
public class Consul.WriteResult : ConsulResult {
    public WriteResult(WriteResult other);
}
public class Consul.WriteResult`1 : WriteResult {
    [CompilerGeneratedAttribute]
private T <Response>k__BackingField;
    public T Response { get; public set; }
    public WriteResult`1(WriteResult other);
    public WriteResult`1(WriteResult other, T value);
    [CompilerGeneratedAttribute]
public T get_Response();
    [CompilerGeneratedAttribute]
public void set_Response(T value);
}
[EmbeddedAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
internal class Newtonsoft.Json.Bson.BsonArray : BsonToken {
    private List`1<BsonToken> _children;
    public BsonType Type { get; }
    public void Add(BsonToken token);
    public virtual BsonType get_Type();
    public sealed virtual IEnumerator`1<BsonToken> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal class Newtonsoft.Json.Bson.BsonBinary : BsonValue {
    [CompilerGeneratedAttribute]
private BsonBinaryType <BinaryType>k__BackingField;
    public BsonBinaryType BinaryType { get; public set; }
    public BsonBinary(Byte[] value, BsonBinaryType binaryType);
    [CompilerGeneratedAttribute]
public BsonBinaryType get_BinaryType();
    [CompilerGeneratedAttribute]
public void set_BinaryType(BsonBinaryType value);
}
internal enum Newtonsoft.Json.Bson.BsonBinaryType : Enum {
    public byte value__;
    public static BsonBinaryType Binary;
    public static BsonBinaryType Function;
    [ObsoleteAttribute("This type has been deprecated in the BSON specification. Use Binary instead.")]
public static BsonBinaryType BinaryOld;
    [ObsoleteAttribute("This type has been deprecated in the BSON specification. Use Uuid instead.")]
public static BsonBinaryType UuidOld;
    public static BsonBinaryType Uuid;
    public static BsonBinaryType Md5;
    public static BsonBinaryType UserDefined;
}
internal class Newtonsoft.Json.Bson.BsonBinaryWriter : object {
    private static Encoding Encoding;
    private BinaryWriter _writer;
    private Byte[] _largeByteBuffer;
    [CompilerGeneratedAttribute]
private DateTimeKind <DateTimeKindHandling>k__BackingField;
    public DateTimeKind DateTimeKindHandling { get; public set; }
    public BsonBinaryWriter(BinaryWriter writer);
    private static BsonBinaryWriter();
    [CompilerGeneratedAttribute]
public DateTimeKind get_DateTimeKindHandling();
    [CompilerGeneratedAttribute]
public void set_DateTimeKindHandling(DateTimeKind value);
    public void Flush();
    public void Close();
    public void WriteToken(BsonToken t);
    private void WriteTokenInternal(BsonToken t);
    private void WriteString(string s, int byteCount, Nullable`1<int> calculatedlengthPrefix);
    public void WriteUtf8Bytes(string s, int byteCount);
    private int CalculateSize(int stringByteCount);
    private int CalculateSizeWithLength(int stringByteCount, bool includeSize);
    private int CalculateSize(BsonToken t);
}
internal class Newtonsoft.Json.Bson.BsonBoolean : BsonValue {
    public static BsonBoolean False;
    public static BsonBoolean True;
    private BsonBoolean(bool value);
    private static BsonBoolean();
}
internal class Newtonsoft.Json.Bson.BsonEmpty : BsonToken {
    public static BsonToken Null;
    public static BsonToken Undefined;
    [CompilerGeneratedAttribute]
private BsonType <Type>k__BackingField;
    public BsonType Type { get; }
    private BsonEmpty(BsonType type);
    private static BsonEmpty();
    [CompilerGeneratedAttribute]
public virtual BsonType get_Type();
}
internal class Newtonsoft.Json.Bson.BsonObject : BsonToken {
    private List`1<BsonProperty> _children;
    public BsonType Type { get; }
    public void Add(string name, BsonToken token);
    public virtual BsonType get_Type();
    public sealed virtual IEnumerator`1<BsonProperty> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[ObsoleteAttribute("BSON reading and writing has been moved to its own package. See https://www.nuget.org/packages/Newtonsoft.Json.Bson for more details.")]
internal class Newtonsoft.Json.Bson.BsonObjectId : object {
    [CompilerGeneratedAttribute]
private Byte[] <Value>k__BackingField;
    public Byte[] Value { get; }
    public BsonObjectId(Byte[] value);
    [CompilerGeneratedAttribute]
public Byte[] get_Value();
}
internal class Newtonsoft.Json.Bson.BsonProperty : object {
    [CompilerGeneratedAttribute]
private BsonString <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private BsonToken <Value>k__BackingField;
    public BsonString Name { get; public set; }
    public BsonToken Value { get; public set; }
    [CompilerGeneratedAttribute]
public BsonString get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(BsonString value);
    [CompilerGeneratedAttribute]
public BsonToken get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(BsonToken value);
}
[ObsoleteAttribute("BSON reading and writing has been moved to its own package. See https://www.nuget.org/packages/Newtonsoft.Json.Bson for more details.")]
internal class Newtonsoft.Json.Bson.BsonReader : JsonReader {
    private static int MaxCharBytesSize;
    private static Byte[] SeqRange1;
    private static Byte[] SeqRange2;
    private static Byte[] SeqRange3;
    private static Byte[] SeqRange4;
    private BinaryReader _reader;
    private List`1<ContainerContext> _stack;
    private Byte[] _byteBuffer;
    private Char[] _charBuffer;
    private BsonType _currentElementType;
    private BsonReaderState _bsonReaderState;
    private ContainerContext _currentContext;
    private bool _readRootValueAsArray;
    private bool _jsonNet35BinaryCompatibility;
    private DateTimeKind _dateTimeKindHandling;
    [ObsoleteAttribute("JsonNet35BinaryCompatibility will be removed in a future version of Json.NET.")]
public bool JsonNet35BinaryCompatibility { get; public set; }
    public bool ReadRootValueAsArray { get; public set; }
    public DateTimeKind DateTimeKindHandling { get; public set; }
    public BsonReader(Stream stream);
    public BsonReader(BinaryReader reader);
    public BsonReader(Stream stream, bool readRootValueAsArray, DateTimeKind dateTimeKindHandling);
    public BsonReader(BinaryReader reader, bool readRootValueAsArray, DateTimeKind dateTimeKindHandling);
    private static BsonReader();
    public bool get_JsonNet35BinaryCompatibility();
    public void set_JsonNet35BinaryCompatibility(bool value);
    public bool get_ReadRootValueAsArray();
    public void set_ReadRootValueAsArray(bool value);
    public DateTimeKind get_DateTimeKindHandling();
    public void set_DateTimeKindHandling(DateTimeKind value);
    private string ReadElement();
    public virtual bool Read();
    public virtual void Close();
    private bool ReadCodeWScope();
    private bool ReadReference();
    private bool ReadNormal();
    private void PopContext();
    private void PushContext(ContainerContext newContext);
    private byte ReadByte();
    private void ReadType(BsonType type);
    private Byte[] ReadBinary(BsonBinaryType& binaryType);
    private string ReadString();
    private string ReadLengthString();
    private string GetString(int length);
    private int GetLastFullCharStop(int start);
    private int BytesInSequence(byte b);
    private void EnsureBuffers();
    private double ReadDouble();
    private int ReadInt32();
    private long ReadInt64();
    private BsonType ReadType();
    private void MovePosition(int count);
    private Byte[] ReadBytes(int count);
}
internal class Newtonsoft.Json.Bson.BsonRegex : BsonToken {
    [CompilerGeneratedAttribute]
private BsonString <Pattern>k__BackingField;
    [CompilerGeneratedAttribute]
private BsonString <Options>k__BackingField;
    public BsonString Pattern { get; public set; }
    public BsonString Options { get; public set; }
    public BsonType Type { get; }
    public BsonRegex(string pattern, string options);
    [CompilerGeneratedAttribute]
public BsonString get_Pattern();
    [CompilerGeneratedAttribute]
public void set_Pattern(BsonString value);
    [CompilerGeneratedAttribute]
public BsonString get_Options();
    [CompilerGeneratedAttribute]
public void set_Options(BsonString value);
    public virtual BsonType get_Type();
}
internal class Newtonsoft.Json.Bson.BsonString : BsonValue {
    [CompilerGeneratedAttribute]
private int <ByteCount>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeLength>k__BackingField;
    public int ByteCount { get; public set; }
    public bool IncludeLength { get; }
    public BsonString(object value, bool includeLength);
    [CompilerGeneratedAttribute]
public int get_ByteCount();
    [CompilerGeneratedAttribute]
public void set_ByteCount(int value);
    [CompilerGeneratedAttribute]
public bool get_IncludeLength();
}
internal abstract class Newtonsoft.Json.Bson.BsonToken : object {
    [CompilerGeneratedAttribute]
private BsonToken <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CalculatedSize>k__BackingField;
    public BsonType Type { get; }
    public BsonToken Parent { get; public set; }
    public int CalculatedSize { get; public set; }
    public abstract virtual BsonType get_Type();
    [CompilerGeneratedAttribute]
public BsonToken get_Parent();
    [CompilerGeneratedAttribute]
public void set_Parent(BsonToken value);
    [CompilerGeneratedAttribute]
public int get_CalculatedSize();
    [CompilerGeneratedAttribute]
public void set_CalculatedSize(int value);
}
internal enum Newtonsoft.Json.Bson.BsonType : Enum {
    public sbyte value__;
    public static BsonType Number;
    public static BsonType String;
    public static BsonType Object;
    public static BsonType Array;
    public static BsonType Binary;
    public static BsonType Undefined;
    public static BsonType Oid;
    public static BsonType Boolean;
    public static BsonType Date;
    public static BsonType Null;
    public static BsonType Regex;
    public static BsonType Reference;
    public static BsonType Code;
    public static BsonType Symbol;
    public static BsonType CodeWScope;
    public static BsonType Integer;
    public static BsonType TimeStamp;
    public static BsonType Long;
    public static BsonType MinKey;
    public static BsonType MaxKey;
}
internal class Newtonsoft.Json.Bson.BsonValue : BsonToken {
    private object _value;
    private BsonType _type;
    public object Value { get; }
    public BsonType Type { get; }
    public BsonValue(object value, BsonType type);
    public object get_Value();
    public virtual BsonType get_Type();
}
[ObsoleteAttribute("BSON reading and writing has been moved to its own package. See https://www.nuget.org/packages/Newtonsoft.Json.Bson for more details.")]
internal class Newtonsoft.Json.Bson.BsonWriter : JsonWriter {
    private BsonBinaryWriter _writer;
    private BsonToken _root;
    private BsonToken _parent;
    private string _propertyName;
    public DateTimeKind DateTimeKindHandling { get; public set; }
    public BsonWriter(Stream stream);
    public BsonWriter(BinaryWriter writer);
    public DateTimeKind get_DateTimeKindHandling();
    public void set_DateTimeKindHandling(DateTimeKind value);
    public virtual void Flush();
    protected virtual void WriteEnd(JsonToken token);
    public virtual void WriteComment(string text);
    public virtual void WriteStartConstructor(string name);
    public virtual void WriteRaw(string json);
    public virtual void WriteRawValue(string json);
    public virtual void WriteStartArray();
    public virtual void WriteStartObject();
    public virtual void WritePropertyName(string name);
    public virtual void Close();
    private void AddParent(BsonToken container);
    private void RemoveParent();
    private void AddValue(object value, BsonType type);
    internal void AddToken(BsonToken token);
    public virtual void WriteValue(object value);
    public virtual void WriteNull();
    public virtual void WriteUndefined();
    public virtual void WriteValue(string value);
    public virtual void WriteValue(int value);
    [CLSCompliantAttribute("False")]
public virtual void WriteValue(UInt32 value);
    public virtual void WriteValue(long value);
    [CLSCompliantAttribute("False")]
public virtual void WriteValue(ulong value);
    public virtual void WriteValue(float value);
    public virtual void WriteValue(double value);
    public virtual void WriteValue(bool value);
    public virtual void WriteValue(short value);
    [CLSCompliantAttribute("False")]
public virtual void WriteValue(ushort value);
    public virtual void WriteValue(char value);
    public virtual void WriteValue(byte value);
    [CLSCompliantAttribute("False")]
public virtual void WriteValue(sbyte value);
    public virtual void WriteValue(decimal value);
    public virtual void WriteValue(DateTime value);
    public virtual void WriteValue(DateTimeOffset value);
    public virtual void WriteValue(Byte[] value);
    public virtual void WriteValue(Guid value);
    public virtual void WriteValue(TimeSpan value);
    public virtual void WriteValue(Uri value);
    public void WriteObjectId(Byte[] value);
    public void WriteRegex(string pattern, string options);
}
internal enum Newtonsoft.Json.ConstructorHandling : Enum {
    public int value__;
    public static ConstructorHandling Default;
    public static ConstructorHandling AllowNonPublicDefaultConstructor;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Newtonsoft.Json.Converters.BinaryConverter : JsonConverter {
    private static string BinaryTypeName;
    private static string BinaryToArrayName;
    [NullableAttribute("2")]
private static ReflectionObject _reflectionObject;
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    private Byte[] GetByteArray(object value);
    private static void EnsureReflectionObject(Type t);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    private Byte[] ReadByteArray(JsonReader reader);
    public virtual bool CanConvert(Type objectType);
}
[ObsoleteAttribute("BSON reading and writing has been moved to its own package. See https://www.nuget.org/packages/Newtonsoft.Json.Bson for more details.")]
internal class Newtonsoft.Json.Converters.BsonObjectIdConverter : JsonConverter {
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual bool CanConvert(Type objectType);
}
[NullableAttribute("0")]
[NullableContextAttribute("1")]
internal abstract class Newtonsoft.Json.Converters.CustomCreationConverter`1 : JsonConverter {
    public bool CanWrite { get; }
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public abstract virtual T Create(Type objectType);
    public virtual bool CanConvert(Type objectType);
    public virtual bool get_CanWrite();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Newtonsoft.Json.Converters.DataSetConverter : JsonConverter {
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual bool CanConvert(Type valueType);
}
[NullableAttribute("0")]
[NullableContextAttribute("1")]
internal class Newtonsoft.Json.Converters.DataTableConverter : JsonConverter {
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    private static void CreateRow(JsonReader reader, DataTable dt, JsonSerializer serializer);
    private static Type GetColumnDataType(JsonReader reader);
    public virtual bool CanConvert(Type valueType);
}
internal abstract class Newtonsoft.Json.Converters.DateTimeConverterBase : JsonConverter {
    [NullableContextAttribute("1")]
public virtual bool CanConvert(Type objectType);
}
[NullableAttribute("0")]
[NullableContextAttribute("1")]
internal class Newtonsoft.Json.Converters.DiscriminatedUnionConverter : JsonConverter {
    private static string CasePropertyName;
    private static string FieldsPropertyName;
    private static ThreadSafeStore`2<Type, Union> UnionCache;
    private static ThreadSafeStore`2<Type, Type> UnionTypeLookupCache;
    private static DiscriminatedUnionConverter();
    private static Type CreateUnionTypeLookup(Type t);
    private static Union CreateUnion(Type t);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual bool CanConvert(Type objectType);
}
[NullableAttribute("0")]
[NullableContextAttribute("1")]
internal class Newtonsoft.Json.Converters.EntityKeyMemberConverter : JsonConverter {
    private static string EntityKeyMemberFullTypeName;
    private static string KeyPropertyName;
    private static string TypePropertyName;
    private static string ValuePropertyName;
    [NullableAttribute("2")]
private static ReflectionObject _reflectionObject;
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    private static void ReadAndAssertProperty(JsonReader reader, string propertyName);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    private static void EnsureReflectionObject(Type objectType);
    public virtual bool CanConvert(Type objectType);
}
[NullableAttribute("0")]
[NullableContextAttribute("1")]
internal class Newtonsoft.Json.Converters.ExpandoObjectConverter : JsonConverter {
    public bool CanWrite { get; }
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    private object ReadValue(JsonReader reader);
    private object ReadList(JsonReader reader);
    private object ReadObject(JsonReader reader);
    public virtual bool CanConvert(Type objectType);
    public virtual bool get_CanWrite();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Newtonsoft.Json.Converters.IsoDateTimeConverter : DateTimeConverterBase {
    private static string DefaultDateTimeFormat;
    private DateTimeStyles _dateTimeStyles;
    [NullableAttribute("2")]
private string _dateTimeFormat;
    [NullableAttribute("2")]
private CultureInfo _culture;
    public DateTimeStyles DateTimeStyles { get; public set; }
    [NullableAttribute("2")]
public string DateTimeFormat { get; public set; }
    public CultureInfo Culture { get; public set; }
    public DateTimeStyles get_DateTimeStyles();
    public void set_DateTimeStyles(DateTimeStyles value);
    [NullableContextAttribute("2")]
public string get_DateTimeFormat();
    [NullableContextAttribute("2")]
public void set_DateTimeFormat(string value);
    public CultureInfo get_Culture();
    public void set_Culture(CultureInfo value);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
}
[NullableContextAttribute("1")]
internal interface Newtonsoft.Json.Converters.IXmlDeclaration {
    public string Version { get; }
    public string Encoding { get; public set; }
    public string Standalone { get; public set; }
    public abstract virtual string get_Version();
    public abstract virtual string get_Encoding();
    public abstract virtual void set_Encoding(string value);
    public abstract virtual string get_Standalone();
    public abstract virtual void set_Standalone(string value);
}
[NullableContextAttribute("1")]
internal interface Newtonsoft.Json.Converters.IXmlDocument {
    [NullableAttribute("2")]
public IXmlElement DocumentElement { get; }
    public abstract virtual IXmlNode CreateComment(string text);
    public abstract virtual IXmlNode CreateTextNode(string text);
    public abstract virtual IXmlNode CreateCDataSection(string data);
    public abstract virtual IXmlNode CreateWhitespace(string text);
    public abstract virtual IXmlNode CreateSignificantWhitespace(string text);
    [NullableContextAttribute("2")]
public abstract virtual IXmlNode CreateXmlDeclaration(string version, string encoding, string standalone);
    [NullableContextAttribute("2")]
public abstract virtual IXmlNode CreateXmlDocumentType(string name, string publicId, string systemId, string internalSubset);
    public abstract virtual IXmlNode CreateProcessingInstruction(string target, string data);
    public abstract virtual IXmlElement CreateElement(string elementName);
    public abstract virtual IXmlElement CreateElement(string qualifiedName, string namespaceUri);
    public abstract virtual IXmlNode CreateAttribute(string name, string value);
    public abstract virtual IXmlNode CreateAttribute(string qualifiedName, string namespaceUri, string value);
    [NullableContextAttribute("2")]
public abstract virtual IXmlElement get_DocumentElement();
}
[NullableContextAttribute("1")]
internal interface Newtonsoft.Json.Converters.IXmlDocumentType {
    public string Name { get; }
    public string System { get; }
    public string Public { get; }
    public string InternalSubset { get; }
    public abstract virtual string get_Name();
    public abstract virtual string get_System();
    public abstract virtual string get_Public();
    public abstract virtual string get_InternalSubset();
}
[NullableContextAttribute("1")]
internal interface Newtonsoft.Json.Converters.IXmlElement {
    public bool IsEmpty { get; }
    public abstract virtual void SetAttributeNode(IXmlNode attribute);
    public abstract virtual string GetPrefixOfNamespace(string namespaceUri);
    public abstract virtual bool get_IsEmpty();
}
[NullableContextAttribute("2")]
internal interface Newtonsoft.Json.Converters.IXmlNode {
    public XmlNodeType NodeType { get; }
    public string LocalName { get; }
    [NullableAttribute("1")]
public List`1<IXmlNode> ChildNodes { get; }
    [NullableAttribute("1")]
public List`1<IXmlNode> Attributes { get; }
    public IXmlNode ParentNode { get; }
    public string Value { get; public set; }
    public string NamespaceUri { get; }
    public object WrappedNode { get; }
    public abstract virtual XmlNodeType get_NodeType();
    public abstract virtual string get_LocalName();
    [NullableContextAttribute("1")]
public abstract virtual List`1<IXmlNode> get_ChildNodes();
    [NullableContextAttribute("1")]
public abstract virtual List`1<IXmlNode> get_Attributes();
    public abstract virtual IXmlNode get_ParentNode();
    public abstract virtual string get_Value();
    public abstract virtual void set_Value(string value);
    [NullableContextAttribute("1")]
public abstract virtual IXmlNode AppendChild(IXmlNode newChild);
    public abstract virtual string get_NamespaceUri();
    public abstract virtual object get_WrappedNode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Newtonsoft.Json.Converters.JavaScriptDateTimeConverter : DateTimeConverterBase {
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
}
[NullableAttribute("0")]
[NullableContextAttribute("1")]
internal class Newtonsoft.Json.Converters.KeyValuePairConverter : JsonConverter {
    private static string KeyName;
    private static string ValueName;
    private static ThreadSafeStore`2<Type, ReflectionObject> ReflectionObjectPerType;
    private static KeyValuePairConverter();
    private static ReflectionObject InitializeReflectionObject(Type t);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual bool CanConvert(Type objectType);
}
[NullableAttribute("0")]
[NullableContextAttribute("1")]
internal class Newtonsoft.Json.Converters.RegexConverter : JsonConverter {
    private static string PatternName;
    private static string OptionsName;
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    private bool HasFlag(RegexOptions options, RegexOptions flag);
    private void WriteBson(BsonWriter writer, Regex regex);
    private void WriteJson(JsonWriter writer, Regex regex, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    private object ReadRegexString(JsonReader reader);
    private Regex ReadRegexObject(JsonReader reader, JsonSerializer serializer);
    public virtual bool CanConvert(Type objectType);
    private bool IsRegex(Type objectType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Newtonsoft.Json.Converters.StringEnumConverter : JsonConverter {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private NamingStrategy <NamingStrategy>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowIntegerValues>k__BackingField;
    [ObsoleteAttribute("StringEnumConverter.CamelCaseText is obsolete. Set StringEnumConverter.NamingStrategy with CamelCaseNamingStrategy instead.")]
public bool CamelCaseText { get; public set; }
    [NullableAttribute("2")]
public NamingStrategy NamingStrategy { get; public set; }
    public bool AllowIntegerValues { get; public set; }
    [ObsoleteAttribute("StringEnumConverter(bool) is obsolete. Create a converter with StringEnumConverter(NamingStrategy, bool) instead.")]
public StringEnumConverter(bool camelCaseText);
    public StringEnumConverter(NamingStrategy namingStrategy, bool allowIntegerValues);
    public StringEnumConverter(Type namingStrategyType);
    public StringEnumConverter(Type namingStrategyType, Object[] namingStrategyParameters);
    public StringEnumConverter(Type namingStrategyType, Object[] namingStrategyParameters, bool allowIntegerValues);
    public bool get_CamelCaseText();
    public void set_CamelCaseText(bool value);
    [CompilerGeneratedAttribute]
[NullableContextAttribute("2")]
public NamingStrategy get_NamingStrategy();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_NamingStrategy(NamingStrategy value);
    [CompilerGeneratedAttribute]
public bool get_AllowIntegerValues();
    [CompilerGeneratedAttribute]
public void set_AllowIntegerValues(bool value);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual bool CanConvert(Type objectType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Newtonsoft.Json.Converters.UnixDateTimeConverter : DateTimeConverterBase {
    internal static DateTime UnixEpoch;
    private static UnixDateTimeConverter();
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Newtonsoft.Json.Converters.VersionConverter : JsonConverter {
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual bool CanConvert(Type objectType);
}
[NullableAttribute("0")]
[NullableContextAttribute("2")]
internal class Newtonsoft.Json.Converters.XAttributeWrapper : XObjectWrapper {
    [NullableAttribute("1")]
private XAttribute Attribute { get; }
    public string Value { get; public set; }
    public string LocalName { get; }
    public string NamespaceUri { get; }
    public IXmlNode ParentNode { get; }
    [NullableContextAttribute("1")]
public XAttributeWrapper(XAttribute attribute);
    [NullableContextAttribute("1")]
private XAttribute get_Attribute();
    public virtual string get_Value();
    public virtual void set_Value(string value);
    public virtual string get_LocalName();
    public virtual string get_NamespaceUri();
    public virtual IXmlNode get_ParentNode();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Newtonsoft.Json.Converters.XCommentWrapper : XObjectWrapper {
    [NullableAttribute("1")]
private XComment Text { get; }
    public string Value { get; public set; }
    public IXmlNode ParentNode { get; }
    [NullableContextAttribute("1")]
public XCommentWrapper(XComment text);
    [NullableContextAttribute("1")]
private XComment get_Text();
    public virtual string get_Value();
    public virtual void set_Value(string value);
    public virtual IXmlNode get_ParentNode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Newtonsoft.Json.Converters.XContainerWrapper : XObjectWrapper {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<IXmlNode> _childNodes;
    private XContainer Container { get; }
    public List`1<IXmlNode> ChildNodes { get; }
    protected bool HasChildNodes { get; }
    [NullableAttribute("2")]
public IXmlNode ParentNode { get; }
    public XContainerWrapper(XContainer container);
    private XContainer get_Container();
    public virtual List`1<IXmlNode> get_ChildNodes();
    protected virtual bool get_HasChildNodes();
    [NullableContextAttribute("2")]
public virtual IXmlNode get_ParentNode();
    internal static IXmlNode WrapNode(XObject node);
    public virtual IXmlNode AppendChild(IXmlNode newChild);
}
[NullableAttribute("0")]
[NullableContextAttribute("1")]
internal class Newtonsoft.Json.Converters.XDeclarationWrapper : XObjectWrapper {
    [CompilerGeneratedAttribute]
private XDeclaration <Declaration>k__BackingField;
    internal XDeclaration Declaration { get; }
    public XmlNodeType NodeType { get; }
    public string Version { get; }
    public string Encoding { get; public set; }
    public string Standalone { get; public set; }
    public XDeclarationWrapper(XDeclaration declaration);
    [CompilerGeneratedAttribute]
internal XDeclaration get_Declaration();
    public virtual XmlNodeType get_NodeType();
    public sealed virtual string get_Version();
    public sealed virtual string get_Encoding();
    public sealed virtual void set_Encoding(string value);
    public sealed virtual string get_Standalone();
    public sealed virtual void set_Standalone(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Newtonsoft.Json.Converters.XDocumentTypeWrapper : XObjectWrapper {
    private XDocumentType _documentType;
    public string Name { get; }
    public string System { get; }
    public string Public { get; }
    public string InternalSubset { get; }
    [NullableAttribute("2")]
public string LocalName { get; }
    public XDocumentTypeWrapper(XDocumentType documentType);
    public sealed virtual string get_Name();
    public sealed virtual string get_System();
    public sealed virtual string get_Public();
    public sealed virtual string get_InternalSubset();
    [NullableContextAttribute("2")]
public virtual string get_LocalName();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Newtonsoft.Json.Converters.XDocumentWrapper : XContainerWrapper {
    private XDocument Document { get; }
    public List`1<IXmlNode> ChildNodes { get; }
    protected bool HasChildNodes { get; }
    [NullableAttribute("2")]
public IXmlElement DocumentElement { get; }
    public XDocumentWrapper(XDocument document);
    private XDocument get_Document();
    public virtual List`1<IXmlNode> get_ChildNodes();
    protected virtual bool get_HasChildNodes();
    public sealed virtual IXmlNode CreateComment(string text);
    public sealed virtual IXmlNode CreateTextNode(string text);
    public sealed virtual IXmlNode CreateCDataSection(string data);
    public sealed virtual IXmlNode CreateWhitespace(string text);
    public sealed virtual IXmlNode CreateSignificantWhitespace(string text);
    [NullableContextAttribute("2")]
public sealed virtual IXmlNode CreateXmlDeclaration(string version, string encoding, string standalone);
    [NullableContextAttribute("2")]
public sealed virtual IXmlNode CreateXmlDocumentType(string name, string publicId, string systemId, string internalSubset);
    public sealed virtual IXmlNode CreateProcessingInstruction(string target, string data);
    public sealed virtual IXmlElement CreateElement(string elementName);
    public sealed virtual IXmlElement CreateElement(string qualifiedName, string namespaceUri);
    public sealed virtual IXmlNode CreateAttribute(string name, string value);
    public sealed virtual IXmlNode CreateAttribute(string qualifiedName, string namespaceUri, string value);
    [NullableContextAttribute("2")]
public sealed virtual IXmlElement get_DocumentElement();
    public virtual IXmlNode AppendChild(IXmlNode newChild);
}
[NullableAttribute("0")]
[NullableContextAttribute("1")]
internal class Newtonsoft.Json.Converters.XElementWrapper : XContainerWrapper {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<IXmlNode> _attributes;
    private XElement Element { get; }
    public List`1<IXmlNode> Attributes { get; }
    [NullableAttribute("2")]
public string Value { get; public set; }
    [NullableAttribute("2")]
public string LocalName { get; }
    [NullableAttribute("2")]
public string NamespaceUri { get; }
    public bool IsEmpty { get; }
    public XElementWrapper(XElement element);
    private XElement get_Element();
    public sealed virtual void SetAttributeNode(IXmlNode attribute);
    public virtual List`1<IXmlNode> get_Attributes();
    private bool HasImplicitNamespaceAttribute(string namespaceUri);
    public virtual IXmlNode AppendChild(IXmlNode newChild);
    [NullableContextAttribute("2")]
public virtual string get_Value();
    [NullableContextAttribute("2")]
public virtual void set_Value(string value);
    [NullableContextAttribute("2")]
public virtual string get_LocalName();
    [NullableContextAttribute("2")]
public virtual string get_NamespaceUri();
    public sealed virtual string GetPrefixOfNamespace(string namespaceUri);
    public sealed virtual bool get_IsEmpty();
}
[NullableAttribute("0")]
[NullableContextAttribute("1")]
internal class Newtonsoft.Json.Converters.XmlDeclarationWrapper : XmlNodeWrapper {
    private XmlDeclaration _declaration;
    public string Version { get; }
    public string Encoding { get; public set; }
    public string Standalone { get; public set; }
    public XmlDeclarationWrapper(XmlDeclaration declaration);
    public sealed virtual string get_Version();
    public sealed virtual string get_Encoding();
    public sealed virtual void set_Encoding(string value);
    public sealed virtual string get_Standalone();
    public sealed virtual void set_Standalone(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Newtonsoft.Json.Converters.XmlDocumentTypeWrapper : XmlNodeWrapper {
    private XmlDocumentType _documentType;
    public string Name { get; }
    public string System { get; }
    public string Public { get; }
    public string InternalSubset { get; }
    [NullableAttribute("2")]
public string LocalName { get; }
    public XmlDocumentTypeWrapper(XmlDocumentType documentType);
    public sealed virtual string get_Name();
    public sealed virtual string get_System();
    public sealed virtual string get_Public();
    public sealed virtual string get_InternalSubset();
    [NullableContextAttribute("2")]
public virtual string get_LocalName();
}
[NullableAttribute("0")]
[NullableContextAttribute("1")]
internal class Newtonsoft.Json.Converters.XmlDocumentWrapper : XmlNodeWrapper {
    private XmlDocument _document;
    [NullableAttribute("2")]
public IXmlElement DocumentElement { get; }
    public XmlDocumentWrapper(XmlDocument document);
    public sealed virtual IXmlNode CreateComment(string data);
    public sealed virtual IXmlNode CreateTextNode(string text);
    public sealed virtual IXmlNode CreateCDataSection(string data);
    public sealed virtual IXmlNode CreateWhitespace(string text);
    public sealed virtual IXmlNode CreateSignificantWhitespace(string text);
    [NullableContextAttribute("2")]
public sealed virtual IXmlNode CreateXmlDeclaration(string version, string encoding, string standalone);
    [NullableContextAttribute("2")]
public sealed virtual IXmlNode CreateXmlDocumentType(string name, string publicId, string systemId, string internalSubset);
    public sealed virtual IXmlNode CreateProcessingInstruction(string target, string data);
    public sealed virtual IXmlElement CreateElement(string elementName);
    public sealed virtual IXmlElement CreateElement(string qualifiedName, string namespaceUri);
    public sealed virtual IXmlNode CreateAttribute(string name, string value);
    public sealed virtual IXmlNode CreateAttribute(string qualifiedName, string namespaceUri, string value);
    [NullableContextAttribute("2")]
public sealed virtual IXmlElement get_DocumentElement();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Newtonsoft.Json.Converters.XmlElementWrapper : XmlNodeWrapper {
    private XmlElement _element;
    public bool IsEmpty { get; }
    public XmlElementWrapper(XmlElement element);
    public sealed virtual void SetAttributeNode(IXmlNode attribute);
    public sealed virtual string GetPrefixOfNamespace(string namespaceUri);
    public sealed virtual bool get_IsEmpty();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Newtonsoft.Json.Converters.XmlNodeConverter : JsonConverter {
    internal static List`1<IXmlNode> EmptyChildNodes;
    private static string TextName;
    private static string CommentName;
    private static string CDataName;
    private static string WhitespaceName;
    private static string SignificantWhitespaceName;
    private static string DeclarationName;
    private static string JsonNamespaceUri;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <DeserializeRootElementName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <WriteArrayAttribute>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OmitRootObject>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EncodeSpecialCharacters>k__BackingField;
    [NullableAttribute("2")]
public string DeserializeRootElementName { get; public set; }
    public bool WriteArrayAttribute { get; public set; }
    public bool OmitRootObject { get; public set; }
    public bool EncodeSpecialCharacters { get; public set; }
    private static XmlNodeConverter();
    [CompilerGeneratedAttribute]
[NullableContextAttribute("2")]
public string get_DeserializeRootElementName();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_DeserializeRootElementName(string value);
    [CompilerGeneratedAttribute]
public bool get_WriteArrayAttribute();
    [CompilerGeneratedAttribute]
public void set_WriteArrayAttribute(bool value);
    [CompilerGeneratedAttribute]
public bool get_OmitRootObject();
    [CompilerGeneratedAttribute]
public void set_OmitRootObject(bool value);
    [CompilerGeneratedAttribute]
public bool get_EncodeSpecialCharacters();
    [CompilerGeneratedAttribute]
public void set_EncodeSpecialCharacters(bool value);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    private IXmlNode WrapXml(object value);
    private void PushParentNamespaces(IXmlNode node, XmlNamespaceManager manager);
    private string ResolveFullName(IXmlNode node, XmlNamespaceManager manager);
    private string GetPropertyName(IXmlNode node, XmlNamespaceManager manager);
    private bool IsArray(IXmlNode node);
    private void SerializeGroupedNodes(JsonWriter writer, IXmlNode node, XmlNamespaceManager manager, bool writePropertyName);
    private void WriteGroupedNodes(JsonWriter writer, XmlNamespaceManager manager, bool writePropertyName, List`1<IXmlNode> groupedNodes, string elementNames);
    private void WriteGroupedNodes(JsonWriter writer, XmlNamespaceManager manager, bool writePropertyName, IXmlNode node, string elementNames);
    private void SerializeNode(JsonWriter writer, IXmlNode node, XmlNamespaceManager manager, bool writePropertyName);
    private static bool AllSameName(IXmlNode node);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    private void DeserializeValue(JsonReader reader, IXmlDocument document, XmlNamespaceManager manager, string propertyName, IXmlNode currentNode);
    private void ReadElement(JsonReader reader, IXmlDocument document, IXmlNode currentNode, string propertyName, XmlNamespaceManager manager);
    private void CreateElement(JsonReader reader, IXmlDocument document, IXmlNode currentNode, string elementName, XmlNamespaceManager manager, string elementPrefix, Dictionary`2<string, string> attributeNameValues);
    private static void AddAttribute(JsonReader reader, IXmlDocument document, IXmlNode currentNode, string propertyName, string attributeName, XmlNamespaceManager manager, string attributePrefix);
    private static string ConvertTokenToXmlValue(JsonReader reader);
    private void ReadArrayElements(JsonReader reader, IXmlDocument document, string propertyName, IXmlNode currentNode, XmlNamespaceManager manager);
    private void AddJsonArrayAttribute(IXmlElement element, IXmlDocument document);
    private bool ShouldReadInto(JsonReader reader);
    private Dictionary`2<string, string> ReadAttributeElements(JsonReader reader, XmlNamespaceManager manager);
    private void CreateInstruction(JsonReader reader, IXmlDocument document, IXmlNode currentNode, string propertyName);
    private void CreateDocumentType(JsonReader reader, IXmlDocument document, IXmlNode currentNode);
    private IXmlElement CreateElement(string elementName, IXmlDocument document, string elementPrefix, XmlNamespaceManager manager);
    private void DeserializeNode(JsonReader reader, IXmlDocument document, XmlNamespaceManager manager, IXmlNode currentNode);
    private bool IsNamespaceAttribute(string attributeName, String& prefix);
    private bool ValueAttributes(List`1<IXmlNode> c);
    public virtual bool CanConvert(Type valueType);
    private bool IsXObject(Type valueType);
    private bool IsXmlNode(Type valueType);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Newtonsoft.Json.Converters.XmlNodeWrapper : object {
    [NullableAttribute("1")]
private XmlNode _node;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<IXmlNode> _childNodes;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<IXmlNode> _attributes;
    public object WrappedNode { get; }
    public XmlNodeType NodeType { get; }
    public string LocalName { get; }
    [NullableAttribute("1")]
public List`1<IXmlNode> ChildNodes { get; }
    protected bool HasChildNodes { get; }
    [NullableAttribute("1")]
public List`1<IXmlNode> Attributes { get; }
    private bool HasAttributes { get; }
    public IXmlNode ParentNode { get; }
    public string Value { get; public set; }
    public string NamespaceUri { get; }
    [NullableContextAttribute("1")]
public XmlNodeWrapper(XmlNode node);
    public sealed virtual object get_WrappedNode();
    public sealed virtual XmlNodeType get_NodeType();
    public virtual string get_LocalName();
    [NullableContextAttribute("1")]
public sealed virtual List`1<IXmlNode> get_ChildNodes();
    protected virtual bool get_HasChildNodes();
    [NullableContextAttribute("1")]
internal static IXmlNode WrapNode(XmlNode node);
    [NullableContextAttribute("1")]
public sealed virtual List`1<IXmlNode> get_Attributes();
    private bool get_HasAttributes();
    public sealed virtual IXmlNode get_ParentNode();
    public sealed virtual string get_Value();
    public sealed virtual void set_Value(string value);
    [NullableContextAttribute("1")]
public sealed virtual IXmlNode AppendChild(IXmlNode newChild);
    public sealed virtual string get_NamespaceUri();
}
[NullableAttribute("0")]
[NullableContextAttribute("2")]
internal class Newtonsoft.Json.Converters.XObjectWrapper : object {
    private XObject _xmlObject;
    public object WrappedNode { get; }
    public XmlNodeType NodeType { get; }
    public string LocalName { get; }
    [NullableAttribute("1")]
public List`1<IXmlNode> ChildNodes { get; }
    [NullableAttribute("1")]
public List`1<IXmlNode> Attributes { get; }
    public IXmlNode ParentNode { get; }
    public string Value { get; public set; }
    public string NamespaceUri { get; }
    public XObjectWrapper(XObject xmlObject);
    public sealed virtual object get_WrappedNode();
    public virtual XmlNodeType get_NodeType();
    public virtual string get_LocalName();
    [NullableContextAttribute("1")]
public virtual List`1<IXmlNode> get_ChildNodes();
    [NullableContextAttribute("1")]
public virtual List`1<IXmlNode> get_Attributes();
    public virtual IXmlNode get_ParentNode();
    public virtual string get_Value();
    public virtual void set_Value(string value);
    [NullableContextAttribute("1")]
public virtual IXmlNode AppendChild(IXmlNode newChild);
    public virtual string get_NamespaceUri();
}
[NullableAttribute("0")]
[NullableContextAttribute("2")]
internal class Newtonsoft.Json.Converters.XProcessingInstructionWrapper : XObjectWrapper {
    [NullableAttribute("1")]
private XProcessingInstruction ProcessingInstruction { get; }
    public string LocalName { get; }
    public string Value { get; public set; }
    [NullableContextAttribute("1")]
public XProcessingInstructionWrapper(XProcessingInstruction processingInstruction);
    [NullableContextAttribute("1")]
private XProcessingInstruction get_ProcessingInstruction();
    public virtual string get_LocalName();
    public virtual string get_Value();
    public virtual void set_Value(string value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Newtonsoft.Json.Converters.XTextWrapper : XObjectWrapper {
    [NullableAttribute("1")]
private XText Text { get; }
    public string Value { get; public set; }
    public IXmlNode ParentNode { get; }
    [NullableContextAttribute("1")]
public XTextWrapper(XText text);
    [NullableContextAttribute("1")]
private XText get_Text();
    public virtual string get_Value();
    public virtual void set_Value(string value);
    public virtual IXmlNode get_ParentNode();
}
internal enum Newtonsoft.Json.DateFormatHandling : Enum {
    public int value__;
    public static DateFormatHandling IsoDateFormat;
    public static DateFormatHandling MicrosoftDateFormat;
}
internal enum Newtonsoft.Json.DateParseHandling : Enum {
    public int value__;
    public static DateParseHandling None;
    public static DateParseHandling DateTime;
    public static DateParseHandling DateTimeOffset;
}
internal enum Newtonsoft.Json.DateTimeZoneHandling : Enum {
    public int value__;
    public static DateTimeZoneHandling Local;
    public static DateTimeZoneHandling Utc;
    public static DateTimeZoneHandling Unspecified;
    public static DateTimeZoneHandling RoundtripKind;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Newtonsoft.Json.DefaultJsonNameTable : JsonNameTable {
    private static int HashCodeRandomizer;
    private int _count;
    private Entry[] _entries;
    private int _mask;
    private static DefaultJsonNameTable();
    public virtual string Get(Char[] key, int start, int length);
    public string Add(string key);
    private string AddEntry(string str, int hashCode);
    private void Grow();
    private static bool TextEquals(string str1, Char[] str2, int str2Start, int str2Length);
}
[FlagsAttribute]
internal enum Newtonsoft.Json.DefaultValueHandling : Enum {
    public int value__;
    public static DefaultValueHandling Include;
    public static DefaultValueHandling Ignore;
    public static DefaultValueHandling Populate;
    public static DefaultValueHandling IgnoreAndPopulate;
}
internal enum Newtonsoft.Json.FloatFormatHandling : Enum {
    public int value__;
    public static FloatFormatHandling String;
    public static FloatFormatHandling Symbol;
    public static FloatFormatHandling DefaultValue;
}
internal enum Newtonsoft.Json.FloatParseHandling : Enum {
    public int value__;
    public static FloatParseHandling Double;
    public static FloatParseHandling Decimal;
}
internal enum Newtonsoft.Json.Formatting : Enum {
    public int value__;
    public static Formatting None;
    public static Formatting Indented;
}
[NullableContextAttribute("1")]
internal interface Newtonsoft.Json.IArrayPool`1 {
    public abstract virtual T[] Rent(int minimumLength);
    public abstract virtual void Return(T[] array);
}
internal interface Newtonsoft.Json.IJsonLineInfo {
    public int LineNumber { get; }
    public int LinePosition { get; }
    public abstract virtual bool HasLineInfo();
    public abstract virtual int get_LineNumber();
    public abstract virtual int get_LinePosition();
}
[AttributeUsageAttribute("1028")]
internal class Newtonsoft.Json.JsonArrayAttribute : JsonContainerAttribute {
    private bool _allowNullItems;
    public bool AllowNullItems { get; public set; }
    public JsonArrayAttribute(bool allowNullItems);
    [NullableContextAttribute("1")]
public JsonArrayAttribute(string id);
    public bool get_AllowNullItems();
    public void set_AllowNullItems(bool value);
}
[AttributeUsageAttribute("32")]
internal class Newtonsoft.Json.JsonConstructorAttribute : Attribute {
}
[NullableContextAttribute("2")]
[AttributeUsageAttribute("1028")]
[NullableAttribute("0")]
internal abstract class Newtonsoft.Json.JsonContainerAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ItemConverterType>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Object[] <ItemConverterParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private NamingStrategy <NamingStrategyInstance>k__BackingField;
    internal Nullable`1<bool> _isReference;
    internal Nullable`1<bool> _itemIsReference;
    internal Nullable`1<ReferenceLoopHandling> _itemReferenceLoopHandling;
    internal Nullable`1<TypeNameHandling> _itemTypeNameHandling;
    private Type _namingStrategyType;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Object[] _namingStrategyParameters;
    public string Id { get; public set; }
    public string Title { get; public set; }
    public string Description { get; public set; }
    public Type ItemConverterType { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Object[] ItemConverterParameters { get; public set; }
    public Type NamingStrategyType { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Object[] NamingStrategyParameters { get; public set; }
    internal NamingStrategy NamingStrategyInstance { get; internal set; }
    public bool IsReference { get; public set; }
    public bool ItemIsReference { get; public set; }
    public ReferenceLoopHandling ItemReferenceLoopHandling { get; public set; }
    public TypeNameHandling ItemTypeNameHandling { get; public set; }
    [NullableContextAttribute("1")]
protected JsonContainerAttribute(string id);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public Type get_ItemConverterType();
    [CompilerGeneratedAttribute]
public void set_ItemConverterType(Type value);
    [CompilerGeneratedAttribute]
public Object[] get_ItemConverterParameters();
    [CompilerGeneratedAttribute]
public void set_ItemConverterParameters(Object[] value);
    public Type get_NamingStrategyType();
    public void set_NamingStrategyType(Type value);
    public Object[] get_NamingStrategyParameters();
    public void set_NamingStrategyParameters(Object[] value);
    [CompilerGeneratedAttribute]
internal NamingStrategy get_NamingStrategyInstance();
    [CompilerGeneratedAttribute]
internal void set_NamingStrategyInstance(NamingStrategy value);
    public bool get_IsReference();
    public void set_IsReference(bool value);
    public bool get_ItemIsReference();
    public void set_ItemIsReference(bool value);
    public ReferenceLoopHandling get_ItemReferenceLoopHandling();
    public void set_ItemReferenceLoopHandling(ReferenceLoopHandling value);
    public TypeNameHandling get_ItemTypeNameHandling();
    public void set_ItemTypeNameHandling(TypeNameHandling value);
}
internal enum Newtonsoft.Json.JsonContainerType : Enum {
    public int value__;
    public static JsonContainerType None;
    public static JsonContainerType Object;
    public static JsonContainerType Array;
    public static JsonContainerType Constructor;
}
[NullableAttribute("0")]
[NullableContextAttribute("1")]
internal static class Newtonsoft.Json.JsonConvert : object {
    [CompilerGeneratedAttribute]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Func`1<JsonSerializerSettings> <DefaultSettings>k__BackingField;
    public static string True;
    public static string False;
    public static string Null;
    public static string Undefined;
    public static string PositiveInfinity;
    public static string NegativeInfinity;
    public static string NaN;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static Func`1<JsonSerializerSettings> DefaultSettings { get; public set; }
    private static JsonConvert();
    [CompilerGeneratedAttribute]
public static Func`1<JsonSerializerSettings> get_DefaultSettings();
    [CompilerGeneratedAttribute]
public static void set_DefaultSettings(Func`1<JsonSerializerSettings> value);
    public static string ToString(DateTime value);
    public static string ToString(DateTime value, DateFormatHandling format, DateTimeZoneHandling timeZoneHandling);
    public static string ToString(DateTimeOffset value);
    public static string ToString(DateTimeOffset value, DateFormatHandling format);
    public static string ToString(bool value);
    public static string ToString(char value);
    public static string ToString(Enum value);
    public static string ToString(int value);
    public static string ToString(short value);
    [CLSCompliantAttribute("False")]
public static string ToString(ushort value);
    [CLSCompliantAttribute("False")]
public static string ToString(UInt32 value);
    public static string ToString(long value);
    private static string ToStringInternal(BigInteger value);
    [CLSCompliantAttribute("False")]
public static string ToString(ulong value);
    public static string ToString(float value);
    internal static string ToString(float value, FloatFormatHandling floatFormatHandling, char quoteChar, bool nullable);
    private static string EnsureFloatFormat(double value, string text, FloatFormatHandling floatFormatHandling, char quoteChar, bool nullable);
    public static string ToString(double value);
    internal static string ToString(double value, FloatFormatHandling floatFormatHandling, char quoteChar, bool nullable);
    private static string EnsureDecimalPlace(double value, string text);
    private static string EnsureDecimalPlace(string text);
    public static string ToString(byte value);
    [CLSCompliantAttribute("False")]
public static string ToString(sbyte value);
    public static string ToString(decimal value);
    public static string ToString(Guid value);
    internal static string ToString(Guid value, char quoteChar);
    public static string ToString(TimeSpan value);
    internal static string ToString(TimeSpan value, char quoteChar);
    public static string ToString(Uri value);
    internal static string ToString(Uri value, char quoteChar);
    public static string ToString(string value);
    public static string ToString(string value, char delimiter);
    public static string ToString(string value, char delimiter, StringEscapeHandling stringEscapeHandling);
    public static string ToString(object value);
    [DebuggerStepThroughAttribute]
public static string SerializeObject(object value);
    [DebuggerStepThroughAttribute]
public static string SerializeObject(object value, Formatting formatting);
    [DebuggerStepThroughAttribute]
public static string SerializeObject(object value, JsonConverter[] converters);
    [DebuggerStepThroughAttribute]
public static string SerializeObject(object value, Formatting formatting, JsonConverter[] converters);
    [DebuggerStepThroughAttribute]
[NullableContextAttribute("2")]
public static string SerializeObject(object value, JsonSerializerSettings settings);
    [DebuggerStepThroughAttribute]
[NullableContextAttribute("2")]
public static string SerializeObject(object value, Type type, JsonSerializerSettings settings);
    [NullableContextAttribute("2")]
[DebuggerStepThroughAttribute]
public static string SerializeObject(object value, Formatting formatting, JsonSerializerSettings settings);
    [NullableContextAttribute("2")]
[DebuggerStepThroughAttribute]
public static string SerializeObject(object value, Type type, Formatting formatting, JsonSerializerSettings settings);
    private static string SerializeObjectInternal(object value, Type type, JsonSerializer jsonSerializer);
    [DebuggerStepThroughAttribute]
public static object DeserializeObject(string value);
    [DebuggerStepThroughAttribute]
public static object DeserializeObject(string value, JsonSerializerSettings settings);
    [DebuggerStepThroughAttribute]
public static object DeserializeObject(string value, Type type);
    [DebuggerStepThroughAttribute]
[NullableContextAttribute("2")]
public static T DeserializeObject(string value);
    [DebuggerStepThroughAttribute]
public static T DeserializeAnonymousType(string value, T anonymousTypeObject);
    [DebuggerStepThroughAttribute]
public static T DeserializeAnonymousType(string value, T anonymousTypeObject, JsonSerializerSettings settings);
    [DebuggerStepThroughAttribute]
public static T DeserializeObject(string value, JsonConverter[] converters);
    [NullableContextAttribute("2")]
[DebuggerStepThroughAttribute]
public static T DeserializeObject(string value, JsonSerializerSettings settings);
    [DebuggerStepThroughAttribute]
public static object DeserializeObject(string value, Type type, JsonConverter[] converters);
    [NullableContextAttribute("2")]
public static object DeserializeObject(string value, Type type, JsonSerializerSettings settings);
    [DebuggerStepThroughAttribute]
public static void PopulateObject(string value, object target);
    public static void PopulateObject(string value, object target, JsonSerializerSettings settings);
    public static string SerializeXmlNode(XmlNode node);
    public static string SerializeXmlNode(XmlNode node, Formatting formatting);
    public static string SerializeXmlNode(XmlNode node, Formatting formatting, bool omitRootObject);
    public static XmlDocument DeserializeXmlNode(string value);
    [NullableContextAttribute("2")]
public static XmlDocument DeserializeXmlNode(string value, string deserializeRootElementName);
    [NullableContextAttribute("2")]
public static XmlDocument DeserializeXmlNode(string value, string deserializeRootElementName, bool writeArrayAttribute);
    [NullableContextAttribute("2")]
public static XmlDocument DeserializeXmlNode(string value, string deserializeRootElementName, bool writeArrayAttribute, bool encodeSpecialCharacters);
    public static string SerializeXNode(XObject node);
    public static string SerializeXNode(XObject node, Formatting formatting);
    public static string SerializeXNode(XObject node, Formatting formatting, bool omitRootObject);
    public static XDocument DeserializeXNode(string value);
    [NullableContextAttribute("2")]
public static XDocument DeserializeXNode(string value, string deserializeRootElementName);
    [NullableContextAttribute("2")]
public static XDocument DeserializeXNode(string value, string deserializeRootElementName, bool writeArrayAttribute);
    [NullableContextAttribute("2")]
public static XDocument DeserializeXNode(string value, string deserializeRootElementName, bool writeArrayAttribute, bool encodeSpecialCharacters);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class Newtonsoft.Json.JsonConverter : object {
    public bool CanRead { get; }
    public bool CanWrite { get; }
    public abstract virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public abstract virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public abstract virtual bool CanConvert(Type objectType);
    public virtual bool get_CanRead();
    public virtual bool get_CanWrite();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class Newtonsoft.Json.JsonConverter`1 : JsonConverter {
    public sealed virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public abstract virtual void WriteJson(JsonWriter writer, T value, JsonSerializer serializer);
    public sealed virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public abstract virtual T ReadJson(JsonReader reader, Type objectType, T existingValue, bool hasExistingValue, JsonSerializer serializer);
    public sealed virtual bool CanConvert(Type objectType);
}
[NullableAttribute("0")]
[AttributeUsageAttribute("3484")]
[NullableContextAttribute("1")]
internal class Newtonsoft.Json.JsonConverterAttribute : Attribute {
    private Type _converterType;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Object[] <ConverterParameters>k__BackingField;
    public Type ConverterType { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Object[] ConverterParameters { get; }
    public JsonConverterAttribute(Type converterType);
    public JsonConverterAttribute(Type converterType, Object[] converterParameters);
    public Type get_ConverterType();
    [CompilerGeneratedAttribute]
public Object[] get_ConverterParameters();
}
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Newtonsoft.Json.JsonConverterCollection : Collection`1<JsonConverter> {
}
[AttributeUsageAttribute("1028")]
internal class Newtonsoft.Json.JsonDictionaryAttribute : JsonContainerAttribute {
    [NullableContextAttribute("1")]
public JsonDictionaryAttribute(string id);
}
[NullableAttribute("0")]
[NullableContextAttribute("1")]
internal class Newtonsoft.Json.JsonException : Exception {
    public JsonException(string message);
    public JsonException(string message, Exception innerException);
    public JsonException(SerializationInfo info, StreamingContext context);
    internal static JsonException Create(IJsonLineInfo lineInfo, string path, string message);
}
[AttributeUsageAttribute("384")]
internal class Newtonsoft.Json.JsonExtensionDataAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <WriteData>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ReadData>k__BackingField;
    public bool WriteData { get; public set; }
    public bool ReadData { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_WriteData();
    [CompilerGeneratedAttribute]
public void set_WriteData(bool value);
    [CompilerGeneratedAttribute]
public bool get_ReadData();
    [CompilerGeneratedAttribute]
public void set_ReadData(bool value);
}
[AttributeUsageAttribute("384")]
internal class Newtonsoft.Json.JsonIgnoreAttribute : Attribute {
}
internal abstract class Newtonsoft.Json.JsonNameTable : object {
    [NullableContextAttribute("1")]
public abstract virtual string Get(Char[] key, int start, int length);
}
[AttributeUsageAttribute("1036")]
internal class Newtonsoft.Json.JsonObjectAttribute : JsonContainerAttribute {
    private MemberSerialization _memberSerialization;
    internal Nullable`1<MissingMemberHandling> _missingMemberHandling;
    internal Nullable`1<Required> _itemRequired;
    internal Nullable`1<NullValueHandling> _itemNullValueHandling;
    public MemberSerialization MemberSerialization { get; public set; }
    public MissingMemberHandling MissingMemberHandling { get; public set; }
    public NullValueHandling ItemNullValueHandling { get; public set; }
    public Required ItemRequired { get; public set; }
    public JsonObjectAttribute(MemberSerialization memberSerialization);
    [NullableContextAttribute("1")]
public JsonObjectAttribute(string id);
    public MemberSerialization get_MemberSerialization();
    public void set_MemberSerialization(MemberSerialization value);
    public MissingMemberHandling get_MissingMemberHandling();
    public void set_MissingMemberHandling(MissingMemberHandling value);
    public NullValueHandling get_ItemNullValueHandling();
    public void set_ItemNullValueHandling(NullValueHandling value);
    public Required get_ItemRequired();
    public void set_ItemRequired(Required value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Newtonsoft.Json.JsonPosition : ValueType {
    private static Char[] SpecialCharacters;
    internal JsonContainerType Type;
    internal int Position;
    [NullableAttribute("2")]
internal string PropertyName;
    internal bool HasIndex;
    public JsonPosition(JsonContainerType type);
    private static JsonPosition();
    internal int CalculateLength();
    [NullableContextAttribute("2")]
internal void WriteTo(StringBuilder sb, StringWriter& writer, Char[]& buffer);
    internal static bool TypeHasIndex(JsonContainerType type);
    internal static string BuildPath(List`1<JsonPosition> positions, Nullable`1<JsonPosition> currentPosition);
    internal static string FormatMessage(IJsonLineInfo lineInfo, string path, string message);
}
[NullableAttribute("0")]
[NullableContextAttribute("2")]
[AttributeUsageAttribute("2432")]
internal class Newtonsoft.Json.JsonPropertyAttribute : Attribute {
    internal Nullable`1<NullValueHandling> _nullValueHandling;
    internal Nullable`1<DefaultValueHandling> _defaultValueHandling;
    internal Nullable`1<ReferenceLoopHandling> _referenceLoopHandling;
    internal Nullable`1<ObjectCreationHandling> _objectCreationHandling;
    internal Nullable`1<TypeNameHandling> _typeNameHandling;
    internal Nullable`1<bool> _isReference;
    internal Nullable`1<int> _order;
    internal Nullable`1<Required> _required;
    internal Nullable`1<bool> _itemIsReference;
    internal Nullable`1<ReferenceLoopHandling> _itemReferenceLoopHandling;
    internal Nullable`1<TypeNameHandling> _itemTypeNameHandling;
    [CompilerGeneratedAttribute]
private Type <ItemConverterType>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Object[] <ItemConverterParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <NamingStrategyType>k__BackingField;
    [CompilerGeneratedAttribute]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Object[] <NamingStrategyParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PropertyName>k__BackingField;
    public Type ItemConverterType { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Object[] ItemConverterParameters { get; public set; }
    public Type NamingStrategyType { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Object[] NamingStrategyParameters { get; public set; }
    public NullValueHandling NullValueHandling { get; public set; }
    public DefaultValueHandling DefaultValueHandling { get; public set; }
    public ReferenceLoopHandling ReferenceLoopHandling { get; public set; }
    public ObjectCreationHandling ObjectCreationHandling { get; public set; }
    public TypeNameHandling TypeNameHandling { get; public set; }
    public bool IsReference { get; public set; }
    public int Order { get; public set; }
    public Required Required { get; public set; }
    public string PropertyName { get; public set; }
    public ReferenceLoopHandling ItemReferenceLoopHandling { get; public set; }
    public TypeNameHandling ItemTypeNameHandling { get; public set; }
    public bool ItemIsReference { get; public set; }
    [NullableContextAttribute("1")]
public JsonPropertyAttribute(string propertyName);
    [CompilerGeneratedAttribute]
public Type get_ItemConverterType();
    [CompilerGeneratedAttribute]
public void set_ItemConverterType(Type value);
    [CompilerGeneratedAttribute]
public Object[] get_ItemConverterParameters();
    [CompilerGeneratedAttribute]
public void set_ItemConverterParameters(Object[] value);
    [CompilerGeneratedAttribute]
public Type get_NamingStrategyType();
    [CompilerGeneratedAttribute]
public void set_NamingStrategyType(Type value);
    [CompilerGeneratedAttribute]
public Object[] get_NamingStrategyParameters();
    [CompilerGeneratedAttribute]
public void set_NamingStrategyParameters(Object[] value);
    public NullValueHandling get_NullValueHandling();
    public void set_NullValueHandling(NullValueHandling value);
    public DefaultValueHandling get_DefaultValueHandling();
    public void set_DefaultValueHandling(DefaultValueHandling value);
    public ReferenceLoopHandling get_ReferenceLoopHandling();
    public void set_ReferenceLoopHandling(ReferenceLoopHandling value);
    public ObjectCreationHandling get_ObjectCreationHandling();
    public void set_ObjectCreationHandling(ObjectCreationHandling value);
    public TypeNameHandling get_TypeNameHandling();
    public void set_TypeNameHandling(TypeNameHandling value);
    public bool get_IsReference();
    public void set_IsReference(bool value);
    public int get_Order();
    public void set_Order(int value);
    public Required get_Required();
    public void set_Required(Required value);
    [CompilerGeneratedAttribute]
public string get_PropertyName();
    [CompilerGeneratedAttribute]
public void set_PropertyName(string value);
    public ReferenceLoopHandling get_ItemReferenceLoopHandling();
    public void set_ItemReferenceLoopHandling(ReferenceLoopHandling value);
    public TypeNameHandling get_ItemTypeNameHandling();
    public void set_ItemTypeNameHandling(TypeNameHandling value);
    public bool get_ItemIsReference();
    public void set_ItemIsReference(bool value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal abstract class Newtonsoft.Json.JsonReader : object {
    private JsonToken _tokenType;
    private object _value;
    internal char _quoteChar;
    internal State _currentState;
    private JsonPosition _currentPosition;
    private CultureInfo _culture;
    private DateTimeZoneHandling _dateTimeZoneHandling;
    private Nullable`1<int> _maxDepth;
    private bool _hasExceededMaxDepth;
    internal DateParseHandling _dateParseHandling;
    internal FloatParseHandling _floatParseHandling;
    private string _dateFormatString;
    private List`1<JsonPosition> _stack;
    [CompilerGeneratedAttribute]
private bool <CloseInput>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SupportMultipleContent>k__BackingField;
    protected State CurrentState { get; }
    public bool CloseInput { get; public set; }
    public bool SupportMultipleContent { get; public set; }
    public char QuoteChar { get; protected internal set; }
    public DateTimeZoneHandling DateTimeZoneHandling { get; public set; }
    public DateParseHandling DateParseHandling { get; public set; }
    public FloatParseHandling FloatParseHandling { get; public set; }
    public string DateFormatString { get; public set; }
    public Nullable`1<int> MaxDepth { get; public set; }
    public JsonToken TokenType { get; }
    public object Value { get; }
    public Type ValueType { get; }
    public int Depth { get; }
    [NullableAttribute("1")]
public string Path { get; }
    [NullableAttribute("1")]
public CultureInfo Culture { get; public set; }
    [NullableContextAttribute("1")]
public virtual Task`1<bool> ReadAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.JsonReader/<SkipAsync>d__1")]
[NullableContextAttribute("1")]
public Task SkipAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.JsonReader/<ReaderReadAndAssertAsync>d__2")]
[NullableContextAttribute("1")]
internal Task ReaderReadAndAssertAsync(CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
public virtual Task`1<Nullable`1<bool>> ReadAsBooleanAsync(CancellationToken cancellationToken);
    public virtual Task`1<Byte[]> ReadAsBytesAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.JsonReader/<ReadArrayIntoByteArrayAsync>d__5")]
internal Task`1<Byte[]> ReadArrayIntoByteArrayAsync(CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
public virtual Task`1<Nullable`1<DateTime>> ReadAsDateTimeAsync(CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
public virtual Task`1<Nullable`1<DateTimeOffset>> ReadAsDateTimeOffsetAsync(CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
public virtual Task`1<Nullable`1<decimal>> ReadAsDecimalAsync(CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
public virtual Task`1<Nullable`1<double>> ReadAsDoubleAsync(CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
public virtual Task`1<Nullable`1<int>> ReadAsInt32Async(CancellationToken cancellationToken);
    public virtual Task`1<string> ReadAsStringAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.JsonReader/<ReadAndMoveToContentAsync>d__12")]
[NullableContextAttribute("1")]
internal Task`1<bool> ReadAndMoveToContentAsync(CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
internal Task`1<bool> MoveToContentAsync(CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Newtonsoft.Json.JsonReader/<MoveToContentFromNonContentAsync>d__14")]
private Task`1<bool> MoveToContentFromNonContentAsync(CancellationToken cancellationToken);
    protected State get_CurrentState();
    [CompilerGeneratedAttribute]
public bool get_CloseInput();
    [CompilerGeneratedAttribute]
public void set_CloseInput(bool value);
    [CompilerGeneratedAttribute]
public bool get_SupportMultipleContent();
    [CompilerGeneratedAttribute]
public void set_SupportMultipleContent(bool value);
    public virtual char get_QuoteChar();
    protected internal virtual void set_QuoteChar(char value);
    public DateTimeZoneHandling get_DateTimeZoneHandling();
    public void set_DateTimeZoneHandling(DateTimeZoneHandling value);
    public DateParseHandling get_DateParseHandling();
    public void set_DateParseHandling(DateParseHandling value);
    public FloatParseHandling get_FloatParseHandling();
    public void set_FloatParseHandling(FloatParseHandling value);
    public string get_DateFormatString();
    public void set_DateFormatString(string value);
    public Nullable`1<int> get_MaxDepth();
    public void set_MaxDepth(Nullable`1<int> value);
    public virtual JsonToken get_TokenType();
    public virtual object get_Value();
    public virtual Type get_ValueType();
    public virtual int get_Depth();
    [NullableContextAttribute("1")]
public virtual string get_Path();
    [NullableContextAttribute("1")]
public CultureInfo get_Culture();
    [NullableContextAttribute("1")]
public void set_Culture(CultureInfo value);
    internal JsonPosition GetPosition(int depth);
    private void Push(JsonContainerType value);
    private JsonContainerType Pop();
    private JsonContainerType Peek();
    public abstract virtual bool Read();
    public virtual Nullable`1<int> ReadAsInt32();
    internal Nullable`1<int> ReadInt32String(string s);
    public virtual string ReadAsString();
    public virtual Byte[] ReadAsBytes();
    [NullableContextAttribute("1")]
internal Byte[] ReadArrayIntoByteArray();
    [NullableContextAttribute("1")]
private bool ReadArrayElementIntoByteArrayReportDone(List`1<byte> buffer);
    public virtual Nullable`1<double> ReadAsDouble();
    internal Nullable`1<double> ReadDoubleString(string s);
    public virtual Nullable`1<bool> ReadAsBoolean();
    internal Nullable`1<bool> ReadBooleanString(string s);
    public virtual Nullable`1<decimal> ReadAsDecimal();
    internal Nullable`1<decimal> ReadDecimalString(string s);
    public virtual Nullable`1<DateTime> ReadAsDateTime();
    internal Nullable`1<DateTime> ReadDateTimeString(string s);
    public virtual Nullable`1<DateTimeOffset> ReadAsDateTimeOffset();
    internal Nullable`1<DateTimeOffset> ReadDateTimeOffsetString(string s);
    internal void ReaderReadAndAssert();
    [NullableContextAttribute("1")]
internal JsonReaderException CreateUnexpectedEndException();
    internal void ReadIntoWrappedTypeObject();
    public void Skip();
    protected void SetToken(JsonToken newToken);
    protected void SetToken(JsonToken newToken, object value);
    protected void SetToken(JsonToken newToken, object value, bool updateIndex);
    internal void SetPostValueState(bool updateIndex);
    private void UpdateScopeWithFinishedValue();
    private void ValidateEnd(JsonToken endToken);
    protected void SetStateBasedOnCurrent();
    private void SetFinished();
    private JsonContainerType GetTypeForCloseToken(JsonToken token);
    private sealed virtual override void System.IDisposable.Dispose();
    protected virtual void Dispose(bool disposing);
    public virtual void Close();
    internal void ReadAndAssert();
    internal void ReadForTypeAndAssert(JsonContract contract, bool hasConverter);
    internal bool ReadForType(JsonContract contract, bool hasConverter);
    internal bool ReadAndMoveToContent();
    internal bool MoveToContent();
    private JsonToken GetContentToken();
}
[NullableAttribute("0")]
[NullableContextAttribute("1")]
internal class Newtonsoft.Json.JsonReaderException : JsonException {
    [CompilerGeneratedAttribute]
private int <LineNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LinePosition>k__BackingField;
    [CompilerGeneratedAttribute]
[NullableAttribute("2")]
private string <Path>k__BackingField;
    public int LineNumber { get; }
    public int LinePosition { get; }
    [NullableAttribute("2")]
public string Path { get; }
    public JsonReaderException(string message);
    public JsonReaderException(string message, Exception innerException);
    public JsonReaderException(SerializationInfo info, StreamingContext context);
    public JsonReaderException(string message, string path, int lineNumber, int linePosition, Exception innerException);
    [CompilerGeneratedAttribute]
public int get_LineNumber();
    [CompilerGeneratedAttribute]
public int get_LinePosition();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Path();
    internal static JsonReaderException Create(JsonReader reader, string message);
    internal static JsonReaderException Create(JsonReader reader, string message, Exception ex);
    internal static JsonReaderException Create(IJsonLineInfo lineInfo, string path, string message, Exception ex);
}
[AttributeUsageAttribute("384")]
internal class Newtonsoft.Json.JsonRequiredAttribute : Attribute {
}
[NullableAttribute("0")]
[NullableContextAttribute("1")]
internal class Newtonsoft.Json.JsonSerializationException : JsonException {
    [CompilerGeneratedAttribute]
private int <LineNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LinePosition>k__BackingField;
    [CompilerGeneratedAttribute]
[NullableAttribute("2")]
private string <Path>k__BackingField;
    public int LineNumber { get; }
    public int LinePosition { get; }
    [NullableAttribute("2")]
public string Path { get; }
    public JsonSerializationException(string message);
    public JsonSerializationException(string message, Exception innerException);
    public JsonSerializationException(SerializationInfo info, StreamingContext context);
    public JsonSerializationException(string message, string path, int lineNumber, int linePosition, Exception innerException);
    [CompilerGeneratedAttribute]
public int get_LineNumber();
    [CompilerGeneratedAttribute]
public int get_LinePosition();
    [CompilerGeneratedAttribute]
[NullableContextAttribute("2")]
public string get_Path();
    internal static JsonSerializationException Create(JsonReader reader, string message);
    internal static JsonSerializationException Create(JsonReader reader, string message, Exception ex);
    internal static JsonSerializationException Create(IJsonLineInfo lineInfo, string path, string message, Exception ex);
}
[NullableAttribute("0")]
[NullableContextAttribute("1")]
internal class Newtonsoft.Json.JsonSerializer : object {
    internal TypeNameHandling _typeNameHandling;
    internal TypeNameAssemblyFormatHandling _typeNameAssemblyFormatHandling;
    internal PreserveReferencesHandling _preserveReferencesHandling;
    internal ReferenceLoopHandling _referenceLoopHandling;
    internal MissingMemberHandling _missingMemberHandling;
    internal ObjectCreationHandling _objectCreationHandling;
    internal NullValueHandling _nullValueHandling;
    internal DefaultValueHandling _defaultValueHandling;
    internal ConstructorHandling _constructorHandling;
    internal MetadataPropertyHandling _metadataPropertyHandling;
    [NullableAttribute("2")]
internal JsonConverterCollection _converters;
    internal IContractResolver _contractResolver;
    [NullableAttribute("2")]
internal ITraceWriter _traceWriter;
    [NullableAttribute("2")]
internal IEqualityComparer _equalityComparer;
    internal ISerializationBinder _serializationBinder;
    internal StreamingContext _context;
    [NullableAttribute("2")]
private IReferenceResolver _referenceResolver;
    private Nullable`1<Formatting> _formatting;
    private Nullable`1<DateFormatHandling> _dateFormatHandling;
    private Nullable`1<DateTimeZoneHandling> _dateTimeZoneHandling;
    private Nullable`1<DateParseHandling> _dateParseHandling;
    private Nullable`1<FloatFormatHandling> _floatFormatHandling;
    private Nullable`1<FloatParseHandling> _floatParseHandling;
    private Nullable`1<StringEscapeHandling> _stringEscapeHandling;
    private CultureInfo _culture;
    private Nullable`1<int> _maxDepth;
    private bool _maxDepthSet;
    private Nullable`1<bool> _checkAdditionalContent;
    [NullableAttribute("2")]
private string _dateFormatString;
    private bool _dateFormatStringSet;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<ErrorEventArgs> Error;
    [NullableAttribute("2")]
public IReferenceResolver ReferenceResolver { get; public set; }
    [ObsoleteAttribute("Binder is obsolete. Use SerializationBinder instead.")]
public SerializationBinder Binder { get; public set; }
    public ISerializationBinder SerializationBinder { get; public set; }
    [NullableAttribute("2")]
public ITraceWriter TraceWriter { get; public set; }
    [NullableAttribute("2")]
public IEqualityComparer EqualityComparer { get; public set; }
    public TypeNameHandling TypeNameHandling { get; public set; }
    [ObsoleteAttribute("TypeNameAssemblyFormat is obsolete. Use TypeNameAssemblyFormatHandling instead.")]
public FormatterAssemblyStyle TypeNameAssemblyFormat { get; public set; }
    public TypeNameAssemblyFormatHandling TypeNameAssemblyFormatHandling { get; public set; }
    public PreserveReferencesHandling PreserveReferencesHandling { get; public set; }
    public ReferenceLoopHandling ReferenceLoopHandling { get; public set; }
    public MissingMemberHandling MissingMemberHandling { get; public set; }
    public NullValueHandling NullValueHandling { get; public set; }
    public DefaultValueHandling DefaultValueHandling { get; public set; }
    public ObjectCreationHandling ObjectCreationHandling { get; public set; }
    public ConstructorHandling ConstructorHandling { get; public set; }
    public MetadataPropertyHandling MetadataPropertyHandling { get; public set; }
    public JsonConverterCollection Converters { get; }
    public IContractResolver ContractResolver { get; public set; }
    public StreamingContext Context { get; public set; }
    public Formatting Formatting { get; public set; }
    public DateFormatHandling DateFormatHandling { get; public set; }
    public DateTimeZoneHandling DateTimeZoneHandling { get; public set; }
    public DateParseHandling DateParseHandling { get; public set; }
    public FloatParseHandling FloatParseHandling { get; public set; }
    public FloatFormatHandling FloatFormatHandling { get; public set; }
    public StringEscapeHandling StringEscapeHandling { get; public set; }
    public string DateFormatString { get; public set; }
    public CultureInfo Culture { get; public set; }
    public Nullable`1<int> MaxDepth { get; public set; }
    public bool CheckAdditionalContent { get; public set; }
    [CompilerGeneratedAttribute]
public virtual void add_Error(EventHandler`1<ErrorEventArgs> value);
    [CompilerGeneratedAttribute]
public virtual void remove_Error(EventHandler`1<ErrorEventArgs> value);
    [NullableContextAttribute("2")]
public virtual IReferenceResolver get_ReferenceResolver();
    [NullableContextAttribute("2")]
public virtual void set_ReferenceResolver(IReferenceResolver value);
    public virtual SerializationBinder get_Binder();
    public virtual void set_Binder(SerializationBinder value);
    public virtual ISerializationBinder get_SerializationBinder();
    public virtual void set_SerializationBinder(ISerializationBinder value);
    [NullableContextAttribute("2")]
public virtual ITraceWriter get_TraceWriter();
    [NullableContextAttribute("2")]
public virtual void set_TraceWriter(ITraceWriter value);
    [NullableContextAttribute("2")]
public virtual IEqualityComparer get_EqualityComparer();
    [NullableContextAttribute("2")]
public virtual void set_EqualityComparer(IEqualityComparer value);
    public virtual TypeNameHandling get_TypeNameHandling();
    public virtual void set_TypeNameHandling(TypeNameHandling value);
    public virtual FormatterAssemblyStyle get_TypeNameAssemblyFormat();
    public virtual void set_TypeNameAssemblyFormat(FormatterAssemblyStyle value);
    public virtual TypeNameAssemblyFormatHandling get_TypeNameAssemblyFormatHandling();
    public virtual void set_TypeNameAssemblyFormatHandling(TypeNameAssemblyFormatHandling value);
    public virtual PreserveReferencesHandling get_PreserveReferencesHandling();
    public virtual void set_PreserveReferencesHandling(PreserveReferencesHandling value);
    public virtual ReferenceLoopHandling get_ReferenceLoopHandling();
    public virtual void set_ReferenceLoopHandling(ReferenceLoopHandling value);
    public virtual MissingMemberHandling get_MissingMemberHandling();
    public virtual void set_MissingMemberHandling(MissingMemberHandling value);
    public virtual NullValueHandling get_NullValueHandling();
    public virtual void set_NullValueHandling(NullValueHandling value);
    public virtual DefaultValueHandling get_DefaultValueHandling();
    public virtual void set_DefaultValueHandling(DefaultValueHandling value);
    public virtual ObjectCreationHandling get_ObjectCreationHandling();
    public virtual void set_ObjectCreationHandling(ObjectCreationHandling value);
    public virtual ConstructorHandling get_ConstructorHandling();
    public virtual void set_ConstructorHandling(ConstructorHandling value);
    public virtual MetadataPropertyHandling get_MetadataPropertyHandling();
    public virtual void set_MetadataPropertyHandling(MetadataPropertyHandling value);
    public virtual JsonConverterCollection get_Converters();
    public virtual IContractResolver get_ContractResolver();
    public virtual void set_ContractResolver(IContractResolver value);
    public virtual StreamingContext get_Context();
    public virtual void set_Context(StreamingContext value);
    public virtual Formatting get_Formatting();
    public virtual void set_Formatting(Formatting value);
    public virtual DateFormatHandling get_DateFormatHandling();
    public virtual void set_DateFormatHandling(DateFormatHandling value);
    public virtual DateTimeZoneHandling get_DateTimeZoneHandling();
    public virtual void set_DateTimeZoneHandling(DateTimeZoneHandling value);
    public virtual DateParseHandling get_DateParseHandling();
    public virtual void set_DateParseHandling(DateParseHandling value);
    public virtual FloatParseHandling get_FloatParseHandling();
    public virtual void set_FloatParseHandling(FloatParseHandling value);
    public virtual FloatFormatHandling get_FloatFormatHandling();
    public virtual void set_FloatFormatHandling(FloatFormatHandling value);
    public virtual StringEscapeHandling get_StringEscapeHandling();
    public virtual void set_StringEscapeHandling(StringEscapeHandling value);
    public virtual string get_DateFormatString();
    public virtual void set_DateFormatString(string value);
    public virtual CultureInfo get_Culture();
    public virtual void set_Culture(CultureInfo value);
    public virtual Nullable`1<int> get_MaxDepth();
    public virtual void set_MaxDepth(Nullable`1<int> value);
    public virtual bool get_CheckAdditionalContent();
    public virtual void set_CheckAdditionalContent(bool value);
    internal bool IsCheckAdditionalContentSet();
    public static JsonSerializer Create();
    public static JsonSerializer Create(JsonSerializerSettings settings);
    public static JsonSerializer CreateDefault();
    public static JsonSerializer CreateDefault(JsonSerializerSettings settings);
    private static void ApplySerializerSettings(JsonSerializer serializer, JsonSerializerSettings settings);
    [DebuggerStepThroughAttribute]
public void Populate(TextReader reader, object target);
    [DebuggerStepThroughAttribute]
public void Populate(JsonReader reader, object target);
    internal virtual void PopulateInternal(JsonReader reader, object target);
    [DebuggerStepThroughAttribute]
public object Deserialize(JsonReader reader);
    [DebuggerStepThroughAttribute]
public object Deserialize(TextReader reader, Type objectType);
    [NullableContextAttribute("2")]
[DebuggerStepThroughAttribute]
public T Deserialize(JsonReader reader);
    [NullableContextAttribute("2")]
[DebuggerStepThroughAttribute]
public object Deserialize(JsonReader reader, Type objectType);
    [NullableContextAttribute("2")]
internal virtual object DeserializeInternal(JsonReader reader, Type objectType);
    [NullableContextAttribute("2")]
private void SetupReader(JsonReader reader, CultureInfo& previousCulture, Nullable`1& previousDateTimeZoneHandling, Nullable`1& previousDateParseHandling, Nullable`1& previousFloatParseHandling, Nullable`1& previousMaxDepth, String& previousDateFormatString);
    [NullableContextAttribute("2")]
private void ResetReader(JsonReader reader, CultureInfo previousCulture, Nullable`1<DateTimeZoneHandling> previousDateTimeZoneHandling, Nullable`1<DateParseHandling> previousDateParseHandling, Nullable`1<FloatParseHandling> previousFloatParseHandling, Nullable`1<int> previousMaxDepth, string previousDateFormatString);
    public void Serialize(TextWriter textWriter, object value);
    [NullableContextAttribute("2")]
public void Serialize(JsonWriter jsonWriter, object value, Type objectType);
    public void Serialize(TextWriter textWriter, object value, Type objectType);
    public void Serialize(JsonWriter jsonWriter, object value);
    private TraceJsonReader CreateTraceJsonReader(JsonReader reader);
    [NullableContextAttribute("2")]
internal virtual void SerializeInternal(JsonWriter jsonWriter, object value, Type objectType);
    internal IReferenceResolver GetReferenceResolver();
    internal JsonConverter GetMatchingConverter(Type type);
    internal static JsonConverter GetMatchingConverter(IList`1<JsonConverter> converters, Type objectType);
    internal void OnError(ErrorEventArgs e);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Newtonsoft.Json.JsonSerializerSettings : object {
    internal static ReferenceLoopHandling DefaultReferenceLoopHandling;
    internal static MissingMemberHandling DefaultMissingMemberHandling;
    internal static NullValueHandling DefaultNullValueHandling;
    internal static DefaultValueHandling DefaultDefaultValueHandling;
    internal static ObjectCreationHandling DefaultObjectCreationHandling;
    internal static PreserveReferencesHandling DefaultPreserveReferencesHandling;
    internal static ConstructorHandling DefaultConstructorHandling;
    internal static TypeNameHandling DefaultTypeNameHandling;
    internal static MetadataPropertyHandling DefaultMetadataPropertyHandling;
    internal static StreamingContext DefaultContext;
    internal static Formatting DefaultFormatting;
    internal static DateFormatHandling DefaultDateFormatHandling;
    internal static DateTimeZoneHandling DefaultDateTimeZoneHandling;
    internal static DateParseHandling DefaultDateParseHandling;
    internal static FloatParseHandling DefaultFloatParseHandling;
    internal static FloatFormatHandling DefaultFloatFormatHandling;
    internal static StringEscapeHandling DefaultStringEscapeHandling;
    internal static TypeNameAssemblyFormatHandling DefaultTypeNameAssemblyFormatHandling;
    [NullableAttribute("1")]
internal static CultureInfo DefaultCulture;
    internal static bool DefaultCheckAdditionalContent;
    [NullableAttribute("1")]
internal static string DefaultDateFormatString;
    internal static int DefaultMaxDepth;
    internal Nullable`1<Formatting> _formatting;
    internal Nullable`1<DateFormatHandling> _dateFormatHandling;
    internal Nullable`1<DateTimeZoneHandling> _dateTimeZoneHandling;
    internal Nullable`1<DateParseHandling> _dateParseHandling;
    internal Nullable`1<FloatFormatHandling> _floatFormatHandling;
    internal Nullable`1<FloatParseHandling> _floatParseHandling;
    internal Nullable`1<StringEscapeHandling> _stringEscapeHandling;
    internal CultureInfo _culture;
    internal Nullable`1<bool> _checkAdditionalContent;
    internal Nullable`1<int> _maxDepth;
    internal bool _maxDepthSet;
    internal string _dateFormatString;
    internal bool _dateFormatStringSet;
    internal Nullable`1<TypeNameAssemblyFormatHandling> _typeNameAssemblyFormatHandling;
    internal Nullable`1<DefaultValueHandling> _defaultValueHandling;
    internal Nullable`1<PreserveReferencesHandling> _preserveReferencesHandling;
    internal Nullable`1<NullValueHandling> _nullValueHandling;
    internal Nullable`1<ObjectCreationHandling> _objectCreationHandling;
    internal Nullable`1<MissingMemberHandling> _missingMemberHandling;
    internal Nullable`1<ReferenceLoopHandling> _referenceLoopHandling;
    internal Nullable`1<StreamingContext> _context;
    internal Nullable`1<ConstructorHandling> _constructorHandling;
    internal Nullable`1<TypeNameHandling> _typeNameHandling;
    internal Nullable`1<MetadataPropertyHandling> _metadataPropertyHandling;
    [CompilerGeneratedAttribute]
[NullableAttribute("1")]
private IList`1<JsonConverter> <Converters>k__BackingField;
    [CompilerGeneratedAttribute]
private IContractResolver <ContractResolver>k__BackingField;
    [CompilerGeneratedAttribute]
private IEqualityComparer <EqualityComparer>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`1<IReferenceResolver> <ReferenceResolverProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private ITraceWriter <TraceWriter>k__BackingField;
    [CompilerGeneratedAttribute]
private ISerializationBinder <SerializationBinder>k__BackingField;
    [CompilerGeneratedAttribute]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private EventHandler`1<ErrorEventArgs> <Error>k__BackingField;
    public ReferenceLoopHandling ReferenceLoopHandling { get; public set; }
    public MissingMemberHandling MissingMemberHandling { get; public set; }
    public ObjectCreationHandling ObjectCreationHandling { get; public set; }
    public NullValueHandling NullValueHandling { get; public set; }
    public DefaultValueHandling DefaultValueHandling { get; public set; }
    [NullableAttribute("1")]
public IList`1<JsonConverter> Converters { get; public set; }
    public PreserveReferencesHandling PreserveReferencesHandling { get; public set; }
    public TypeNameHandling TypeNameHandling { get; public set; }
    public MetadataPropertyHandling MetadataPropertyHandling { get; public set; }
    [ObsoleteAttribute("TypeNameAssemblyFormat is obsolete. Use TypeNameAssemblyFormatHandling instead.")]
public FormatterAssemblyStyle TypeNameAssemblyFormat { get; public set; }
    public TypeNameAssemblyFormatHandling TypeNameAssemblyFormatHandling { get; public set; }
    public ConstructorHandling ConstructorHandling { get; public set; }
    public IContractResolver ContractResolver { get; public set; }
    public IEqualityComparer EqualityComparer { get; public set; }
    [ObsoleteAttribute("ReferenceResolver property is obsolete. Use the ReferenceResolverProvider property to set the IReferenceResolver: settings.ReferenceResolverProvider = () => resolver")]
public IReferenceResolver ReferenceResolver { get; public set; }
    public Func`1<IReferenceResolver> ReferenceResolverProvider { get; public set; }
    public ITraceWriter TraceWriter { get; public set; }
    [ObsoleteAttribute("Binder is obsolete. Use SerializationBinder instead.")]
public SerializationBinder Binder { get; public set; }
    public ISerializationBinder SerializationBinder { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public EventHandler`1<ErrorEventArgs> Error { get; public set; }
    public StreamingContext Context { get; public set; }
    [NullableAttribute("1")]
public string DateFormatString { get; public set; }
    public Nullable`1<int> MaxDepth { get; public set; }
    public Formatting Formatting { get; public set; }
    public DateFormatHandling DateFormatHandling { get; public set; }
    public DateTimeZoneHandling DateTimeZoneHandling { get; public set; }
    public DateParseHandling DateParseHandling { get; public set; }
    public FloatFormatHandling FloatFormatHandling { get; public set; }
    public FloatParseHandling FloatParseHandling { get; public set; }
    public StringEscapeHandling StringEscapeHandling { get; public set; }
    [NullableAttribute("1")]
public CultureInfo Culture { get; public set; }
    public bool CheckAdditionalContent { get; public set; }
    private static JsonSerializerSettings();
    public ReferenceLoopHandling get_ReferenceLoopHandling();
    public void set_ReferenceLoopHandling(ReferenceLoopHandling value);
    public MissingMemberHandling get_MissingMemberHandling();
    public void set_MissingMemberHandling(MissingMemberHandling value);
    public ObjectCreationHandling get_ObjectCreationHandling();
    public void set_ObjectCreationHandling(ObjectCreationHandling value);
    public NullValueHandling get_NullValueHandling();
    public void set_NullValueHandling(NullValueHandling value);
    public DefaultValueHandling get_DefaultValueHandling();
    public void set_DefaultValueHandling(DefaultValueHandling value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public IList`1<JsonConverter> get_Converters();
    [CompilerGeneratedAttribute]
[NullableContextAttribute("1")]
public void set_Converters(IList`1<JsonConverter> value);
    public PreserveReferencesHandling get_PreserveReferencesHandling();
    public void set_PreserveReferencesHandling(PreserveReferencesHandling value);
    public TypeNameHandling get_TypeNameHandling();
    public void set_TypeNameHandling(TypeNameHandling value);
    public MetadataPropertyHandling get_MetadataPropertyHandling();
    public void set_MetadataPropertyHandling(MetadataPropertyHandling value);
    public FormatterAssemblyStyle get_TypeNameAssemblyFormat();
    public void set_TypeNameAssemblyFormat(FormatterAssemblyStyle value);
    public TypeNameAssemblyFormatHandling get_TypeNameAssemblyFormatHandling();
    public void set_TypeNameAssemblyFormatHandling(TypeNameAssemblyFormatHandling value);
    public ConstructorHandling get_ConstructorHandling();
    public void set_ConstructorHandling(ConstructorHandling value);
    [CompilerGeneratedAttribute]
public IContractResolver get_ContractResolver();
    [CompilerGeneratedAttribute]
public void set_ContractResolver(IContractResolver value);
    [CompilerGeneratedAttribute]
public IEqualityComparer get_EqualityComparer();
    [CompilerGeneratedAttribute]
public void set_EqualityComparer(IEqualityComparer value);
    public IReferenceResolver get_ReferenceResolver();
    public void set_ReferenceResolver(IReferenceResolver value);
    [CompilerGeneratedAttribute]
public Func`1<IReferenceResolver> get_ReferenceResolverProvider();
    [CompilerGeneratedAttribute]
public void set_ReferenceResolverProvider(Func`1<IReferenceResolver> value);
    [CompilerGeneratedAttribute]
public ITraceWriter get_TraceWriter();
    [CompilerGeneratedAttribute]
public void set_TraceWriter(ITraceWriter value);
    public SerializationBinder get_Binder();
    public void set_Binder(SerializationBinder value);
    [CompilerGeneratedAttribute]
public ISerializationBinder get_SerializationBinder();
    [CompilerGeneratedAttribute]
public void set_SerializationBinder(ISerializationBinder value);
    [CompilerGeneratedAttribute]
public EventHandler`1<ErrorEventArgs> get_Error();
    [CompilerGeneratedAttribute]
public void set_Error(EventHandler`1<ErrorEventArgs> value);
    public StreamingContext get_Context();
    public void set_Context(StreamingContext value);
    [NullableContextAttribute("1")]
public string get_DateFormatString();
    [NullableContextAttribute("1")]
public void set_DateFormatString(string value);
    public Nullable`1<int> get_MaxDepth();
    public void set_MaxDepth(Nullable`1<int> value);
    public Formatting get_Formatting();
    public void set_Formatting(Formatting value);
    public DateFormatHandling get_DateFormatHandling();
    public void set_DateFormatHandling(DateFormatHandling value);
    public DateTimeZoneHandling get_DateTimeZoneHandling();
    public void set_DateTimeZoneHandling(DateTimeZoneHandling value);
    public DateParseHandling get_DateParseHandling();
    public void set_DateParseHandling(DateParseHandling value);
    public FloatFormatHandling get_FloatFormatHandling();
    public void set_FloatFormatHandling(FloatFormatHandling value);
    public FloatParseHandling get_FloatParseHandling();
    public void set_FloatParseHandling(FloatParseHandling value);
    public StringEscapeHandling get_StringEscapeHandling();
    public void set_StringEscapeHandling(StringEscapeHandling value);
    [NullableContextAttribute("1")]
public CultureInfo get_Culture();
    [NullableContextAttribute("1")]
public void set_Culture(CultureInfo value);
    public bool get_CheckAdditionalContent();
    public void set_CheckAdditionalContent(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Newtonsoft.Json.JsonTextReader : JsonReader {
    private bool _safeAsync;
    private static char UnicodeReplacementChar;
    private static int MaximumJavascriptIntegerCharacterLength;
    private static int LargeBufferLength;
    private TextReader _reader;
    [NullableAttribute("2")]
private Char[] _chars;
    private int _charsUsed;
    private int _charPos;
    private int _lineStartPos;
    private int _lineNumber;
    private bool _isEndOfFile;
    private StringBuffer _stringBuffer;
    private StringReference _stringReference;
    [NullableAttribute("2")]
private IArrayPool`1<char> _arrayPool;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private JsonNameTable <PropertyNameTable>k__BackingField;
    [NullableAttribute("2")]
public JsonNameTable PropertyNameTable { get; public set; }
    [NullableAttribute("2")]
public IArrayPool`1<char> ArrayPool { get; public set; }
    public int LineNumber { get; }
    public int LinePosition { get; }
    public JsonTextReader(TextReader reader);
    public virtual Task`1<bool> ReadAsync(CancellationToken cancellationToken);
    internal Task`1<bool> DoReadAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.JsonTextReader/<DoReadAsync>d__3")]
private Task`1<bool> DoReadAsync(Task`1<bool> task, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.JsonTextReader/<ParsePostValueAsync>d__4")]
private Task`1<bool> ParsePostValueAsync(bool ignoreComments, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.JsonTextReader/<ReadFromFinishedAsync>d__5")]
private Task`1<bool> ReadFromFinishedAsync(CancellationToken cancellationToken);
    private Task`1<int> ReadDataAsync(bool append, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.JsonTextReader/<ReadDataAsync>d__7")]
private Task`1<int> ReadDataAsync(bool append, int charsRequired, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.JsonTextReader/<ParseValueAsync>d__8")]
private Task`1<bool> ParseValueAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.JsonTextReader/<ReadStringIntoBufferAsync>d__9")]
private Task ReadStringIntoBufferAsync(char quote, CancellationToken cancellationToken);
    private Task ProcessCarriageReturnAsync(bool append, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.JsonTextReader/<ProcessCarriageReturnAsync>d__11")]
private Task ProcessCarriageReturnAsync(Task`1<bool> task);
    [AsyncStateMachineAttribute("Newtonsoft.Json.JsonTextReader/<ParseUnicodeAsync>d__12")]
private Task`1<char> ParseUnicodeAsync(CancellationToken cancellationToken);
    private Task`1<bool> EnsureCharsAsync(int relativePosition, bool append, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.JsonTextReader/<ReadCharsAsync>d__14")]
private Task`1<bool> ReadCharsAsync(int relativePosition, bool append, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.JsonTextReader/<ParseObjectAsync>d__15")]
private Task`1<bool> ParseObjectAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.JsonTextReader/<ParseCommentAsync>d__16")]
private Task ParseCommentAsync(bool setToken, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.JsonTextReader/<EatWhitespaceAsync>d__17")]
private Task EatWhitespaceAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.JsonTextReader/<ParseStringAsync>d__18")]
private Task ParseStringAsync(char quote, ReadType readType, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.JsonTextReader/<MatchValueAsync>d__19")]
private Task`1<bool> MatchValueAsync(string value, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.JsonTextReader/<MatchValueWithTrailingSeparatorAsync>d__20")]
private Task`1<bool> MatchValueWithTrailingSeparatorAsync(string value, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.JsonTextReader/<MatchAndSetAsync>d__21")]
private Task MatchAndSetAsync(string value, JsonToken newToken, object tokenValue, CancellationToken cancellationToken);
    private Task ParseTrueAsync(CancellationToken cancellationToken);
    private Task ParseFalseAsync(CancellationToken cancellationToken);
    private Task ParseNullAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.JsonTextReader/<ParseConstructorAsync>d__25")]
private Task ParseConstructorAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.JsonTextReader/<ParseNumberNaNAsync>d__26")]
private Task`1<object> ParseNumberNaNAsync(ReadType readType, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.JsonTextReader/<ParseNumberPositiveInfinityAsync>d__27")]
private Task`1<object> ParseNumberPositiveInfinityAsync(ReadType readType, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.JsonTextReader/<ParseNumberNegativeInfinityAsync>d__28")]
private Task`1<object> ParseNumberNegativeInfinityAsync(ReadType readType, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.JsonTextReader/<ParseNumberAsync>d__29")]
private Task ParseNumberAsync(ReadType readType, CancellationToken cancellationToken);
    private Task ParseUndefinedAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.JsonTextReader/<ParsePropertyAsync>d__31")]
private Task`1<bool> ParsePropertyAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.JsonTextReader/<ReadNumberIntoBufferAsync>d__32")]
private Task ReadNumberIntoBufferAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.JsonTextReader/<ParseUnquotedPropertyAsync>d__33")]
private Task ParseUnquotedPropertyAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.JsonTextReader/<ReadNullCharAsync>d__34")]
private Task`1<bool> ReadNullCharAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.JsonTextReader/<HandleNullAsync>d__35")]
private Task HandleNullAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.JsonTextReader/<ReadFinishedAsync>d__36")]
private Task ReadFinishedAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.JsonTextReader/<ReadStringValueAsync>d__37")]
private Task`1<object> ReadStringValueAsync(ReadType readType, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.JsonTextReader/<ReadNumberValueAsync>d__38")]
private Task`1<object> ReadNumberValueAsync(ReadType readType, CancellationToken cancellationToken);
    public virtual Task`1<Nullable`1<bool>> ReadAsBooleanAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.JsonTextReader/<DoReadAsBooleanAsync>d__40")]
internal Task`1<Nullable`1<bool>> DoReadAsBooleanAsync(CancellationToken cancellationToken);
    public virtual Task`1<Byte[]> ReadAsBytesAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.JsonTextReader/<DoReadAsBytesAsync>d__42")]
internal Task`1<Byte[]> DoReadAsBytesAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.JsonTextReader/<ReadIntoWrappedTypeObjectAsync>d__43")]
private Task ReadIntoWrappedTypeObjectAsync(CancellationToken cancellationToken);
    public virtual Task`1<Nullable`1<DateTime>> ReadAsDateTimeAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.JsonTextReader/<DoReadAsDateTimeAsync>d__45")]
internal Task`1<Nullable`1<DateTime>> DoReadAsDateTimeAsync(CancellationToken cancellationToken);
    public virtual Task`1<Nullable`1<DateTimeOffset>> ReadAsDateTimeOffsetAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.JsonTextReader/<DoReadAsDateTimeOffsetAsync>d__47")]
internal Task`1<Nullable`1<DateTimeOffset>> DoReadAsDateTimeOffsetAsync(CancellationToken cancellationToken);
    public virtual Task`1<Nullable`1<decimal>> ReadAsDecimalAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.JsonTextReader/<DoReadAsDecimalAsync>d__49")]
internal Task`1<Nullable`1<decimal>> DoReadAsDecimalAsync(CancellationToken cancellationToken);
    public virtual Task`1<Nullable`1<double>> ReadAsDoubleAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.JsonTextReader/<DoReadAsDoubleAsync>d__51")]
internal Task`1<Nullable`1<double>> DoReadAsDoubleAsync(CancellationToken cancellationToken);
    public virtual Task`1<Nullable`1<int>> ReadAsInt32Async(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.JsonTextReader/<DoReadAsInt32Async>d__53")]
internal Task`1<Nullable`1<int>> DoReadAsInt32Async(CancellationToken cancellationToken);
    public virtual Task`1<string> ReadAsStringAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.JsonTextReader/<DoReadAsStringAsync>d__55")]
internal Task`1<string> DoReadAsStringAsync(CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
[NullableContextAttribute("2")]
public JsonNameTable get_PropertyNameTable();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_PropertyNameTable(JsonNameTable value);
    [NullableContextAttribute("2")]
public IArrayPool`1<char> get_ArrayPool();
    [NullableContextAttribute("2")]
public void set_ArrayPool(IArrayPool`1<char> value);
    private void EnsureBufferNotEmpty();
    private void SetNewLine(bool hasNextChar);
    private void OnNewLine(int pos);
    private void ParseString(char quote, ReadType readType);
    private void ParseReadString(char quote, ReadType readType);
    private static void BlockCopyChars(Char[] src, int srcOffset, Char[] dst, int dstOffset, int count);
    private void ShiftBufferIfNeeded();
    private int ReadData(bool append);
    private void PrepareBufferForReadData(bool append, int charsRequired);
    private int ReadData(bool append, int charsRequired);
    private bool EnsureChars(int relativePosition, bool append);
    private bool ReadChars(int relativePosition, bool append);
    public virtual bool Read();
    public virtual Nullable`1<int> ReadAsInt32();
    public virtual Nullable`1<DateTime> ReadAsDateTime();
    [NullableContextAttribute("2")]
public virtual string ReadAsString();
    [NullableContextAttribute("2")]
public virtual Byte[] ReadAsBytes();
    [NullableContextAttribute("2")]
private object ReadStringValue(ReadType readType);
    [NullableContextAttribute("2")]
private object FinishReadQuotedStringValue(ReadType readType);
    private JsonReaderException CreateUnexpectedCharacterException(char c);
    public virtual Nullable`1<bool> ReadAsBoolean();
    private void ProcessValueComma();
    [NullableContextAttribute("2")]
private object ReadNumberValue(ReadType readType);
    [NullableContextAttribute("2")]
private object FinishReadQuotedNumber(ReadType readType);
    public virtual Nullable`1<DateTimeOffset> ReadAsDateTimeOffset();
    public virtual Nullable`1<decimal> ReadAsDecimal();
    public virtual Nullable`1<double> ReadAsDouble();
    private void HandleNull();
    private void ReadFinished();
    private bool ReadNullChar();
    private void EnsureBuffer();
    private void ReadStringIntoBuffer(char quote);
    private void FinishReadStringIntoBuffer(int charPos, int initialPosition, int lastWritePosition);
    private void WriteCharToBuffer(char writeChar, int lastWritePosition, int writeToPosition);
    private char ConvertUnicode(bool enoughChars);
    private char ParseUnicode();
    private void ReadNumberIntoBuffer();
    private bool ReadNumberCharIntoBuffer(char currentChar, int charPos);
    private void ClearRecentString();
    private bool ParsePostValue(bool ignoreComments);
    private bool ParseObject();
    private bool ParseProperty();
    private bool ValidIdentifierChar(char value);
    private void ParseUnquotedProperty();
    private bool ReadUnquotedPropertyReportIfDone(char currentChar, int initialPosition);
    private bool ParseValue();
    private void ProcessLineFeed();
    private void ProcessCarriageReturn(bool append);
    private void EatWhitespace();
    private void ParseConstructor();
    private void ParseNumber(ReadType readType);
    private void ParseReadNumber(ReadType readType, char firstChar, int initialPosition);
    private JsonReaderException ThrowReaderError(string message, Exception ex);
    private static object BigIntegerParse(string number, CultureInfo culture);
    private void ParseComment(bool setToken);
    private void EndComment(bool setToken, int initialPosition, int endPosition);
    private bool MatchValue(string value);
    private bool MatchValue(bool enoughChars, string value);
    private bool MatchValueWithTrailingSeparator(string value);
    private bool IsSeparator(char c);
    private void ParseTrue();
    private void ParseNull();
    private void ParseUndefined();
    private void ParseFalse();
    private object ParseNumberNegativeInfinity(ReadType readType);
    private object ParseNumberNegativeInfinity(ReadType readType, bool matched);
    private object ParseNumberPositiveInfinity(ReadType readType);
    private object ParseNumberPositiveInfinity(ReadType readType, bool matched);
    private object ParseNumberNaN(ReadType readType);
    private object ParseNumberNaN(ReadType readType, bool matched);
    public virtual void Close();
    public sealed virtual bool HasLineInfo();
    public sealed virtual int get_LineNumber();
    public sealed virtual int get_LinePosition();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Newtonsoft.Json.JsonTextWriter : JsonWriter {
    private bool _safeAsync;
    private static int IndentCharBufferSize;
    private TextWriter _writer;
    [NullableAttribute("2")]
private Base64Encoder _base64Encoder;
    private char _indentChar;
    private int _indentation;
    private char _quoteChar;
    private bool _quoteName;
    [NullableAttribute("2")]
private Boolean[] _charEscapeFlags;
    [NullableAttribute("2")]
private Char[] _writeBuffer;
    [NullableAttribute("2")]
private IArrayPool`1<char> _arrayPool;
    [NullableAttribute("2")]
private Char[] _indentChars;
    private Base64Encoder Base64Encoder { get; }
    [NullableAttribute("2")]
public IArrayPool`1<char> ArrayPool { get; public set; }
    public int Indentation { get; public set; }
    public char QuoteChar { get; public set; }
    public char IndentChar { get; public set; }
    public bool QuoteName { get; public set; }
    public JsonTextWriter(TextWriter textWriter);
    public virtual Task FlushAsync(CancellationToken cancellationToken);
    internal Task DoFlushAsync(CancellationToken cancellationToken);
    protected virtual Task WriteValueDelimiterAsync(CancellationToken cancellationToken);
    internal Task DoWriteValueDelimiterAsync(CancellationToken cancellationToken);
    protected virtual Task WriteEndAsync(JsonToken token, CancellationToken cancellationToken);
    internal Task DoWriteEndAsync(JsonToken token, CancellationToken cancellationToken);
    public virtual Task CloseAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.JsonTextWriter/<DoCloseAsync>d__8")]
internal Task DoCloseAsync(CancellationToken cancellationToken);
    public virtual Task WriteEndAsync(CancellationToken cancellationToken);
    protected virtual Task WriteIndentAsync(CancellationToken cancellationToken);
    internal Task DoWriteIndentAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.JsonTextWriter/<WriteIndentAsync>d__12")]
private Task WriteIndentAsync(int currentIndentCount, int newLineLen, CancellationToken cancellationToken);
    private Task WriteValueInternalAsync(JsonToken token, string value, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.JsonTextWriter/<WriteValueInternalAsync>d__14")]
private Task WriteValueInternalAsync(Task task, string value, CancellationToken cancellationToken);
    protected virtual Task WriteIndentSpaceAsync(CancellationToken cancellationToken);
    internal Task DoWriteIndentSpaceAsync(CancellationToken cancellationToken);
    public virtual Task WriteRawAsync(string json, CancellationToken cancellationToken);
    internal Task DoWriteRawAsync(string json, CancellationToken cancellationToken);
    public virtual Task WriteNullAsync(CancellationToken cancellationToken);
    internal Task DoWriteNullAsync(CancellationToken cancellationToken);
    private Task WriteDigitsAsync(ulong uvalue, bool negative, CancellationToken cancellationToken);
    private Task WriteIntegerValueAsync(ulong uvalue, bool negative, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.JsonTextWriter/<WriteIntegerValueAsync>d__23")]
private Task WriteIntegerValueAsync(Task task, ulong uvalue, bool negative, CancellationToken cancellationToken);
    internal Task WriteIntegerValueAsync(long value, CancellationToken cancellationToken);
    internal Task WriteIntegerValueAsync(ulong uvalue, CancellationToken cancellationToken);
    private Task WriteEscapedStringAsync(string value, bool quote, CancellationToken cancellationToken);
    public virtual Task WritePropertyNameAsync(string name, CancellationToken cancellationToken);
    internal Task DoWritePropertyNameAsync(string name, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.JsonTextWriter/<DoWritePropertyNameAsync>d__29")]
private Task DoWritePropertyNameAsync(Task task, string name, CancellationToken cancellationToken);
    public virtual Task WritePropertyNameAsync(string name, bool escape, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.JsonTextWriter/<DoWritePropertyNameAsync>d__31")]
internal Task DoWritePropertyNameAsync(string name, bool escape, CancellationToken cancellationToken);
    public virtual Task WriteStartArrayAsync(CancellationToken cancellationToken);
    internal Task DoWriteStartArrayAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.JsonTextWriter/<DoWriteStartArrayAsync>d__34")]
internal Task DoWriteStartArrayAsync(Task task, CancellationToken cancellationToken);
    public virtual Task WriteStartObjectAsync(CancellationToken cancellationToken);
    internal Task DoWriteStartObjectAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.JsonTextWriter/<DoWriteStartObjectAsync>d__37")]
internal Task DoWriteStartObjectAsync(Task task, CancellationToken cancellationToken);
    public virtual Task WriteStartConstructorAsync(string name, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.JsonTextWriter/<DoWriteStartConstructorAsync>d__39")]
internal Task DoWriteStartConstructorAsync(string name, CancellationToken cancellationToken);
    public virtual Task WriteUndefinedAsync(CancellationToken cancellationToken);
    internal Task DoWriteUndefinedAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.JsonTextWriter/<DoWriteUndefinedAsync>d__42")]
private Task DoWriteUndefinedAsync(Task task, CancellationToken cancellationToken);
    public virtual Task WriteWhitespaceAsync(string ws, CancellationToken cancellationToken);
    internal Task DoWriteWhitespaceAsync(string ws, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(bool value, CancellationToken cancellationToken);
    internal Task DoWriteValueAsync(bool value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Nullable`1<bool> value, CancellationToken cancellationToken);
    internal Task DoWriteValueAsync(Nullable`1<bool> value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(byte value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Nullable`1<byte> value, CancellationToken cancellationToken);
    internal Task DoWriteValueAsync(Nullable`1<byte> value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Byte[] value, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.JsonTextWriter/<WriteValueNonNullAsync>d__53")]
internal Task WriteValueNonNullAsync(Byte[] value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(char value, CancellationToken cancellationToken);
    internal Task DoWriteValueAsync(char value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Nullable`1<char> value, CancellationToken cancellationToken);
    internal Task DoWriteValueAsync(Nullable`1<char> value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(DateTime value, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.JsonTextWriter/<DoWriteValueAsync>d__59")]
internal Task DoWriteValueAsync(DateTime value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Nullable`1<DateTime> value, CancellationToken cancellationToken);
    internal Task DoWriteValueAsync(Nullable`1<DateTime> value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(DateTimeOffset value, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.JsonTextWriter/<DoWriteValueAsync>d__63")]
internal Task DoWriteValueAsync(DateTimeOffset value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Nullable`1<DateTimeOffset> value, CancellationToken cancellationToken);
    internal Task DoWriteValueAsync(Nullable`1<DateTimeOffset> value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(decimal value, CancellationToken cancellationToken);
    internal Task DoWriteValueAsync(decimal value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Nullable`1<decimal> value, CancellationToken cancellationToken);
    internal Task DoWriteValueAsync(Nullable`1<decimal> value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(double value, CancellationToken cancellationToken);
    internal Task WriteValueAsync(double value, bool nullable, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Nullable`1<double> value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(float value, CancellationToken cancellationToken);
    internal Task WriteValueAsync(float value, bool nullable, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Nullable`1<float> value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Guid value, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.JsonTextWriter/<DoWriteValueAsync>d__77")]
internal Task DoWriteValueAsync(Guid value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Nullable`1<Guid> value, CancellationToken cancellationToken);
    internal Task DoWriteValueAsync(Nullable`1<Guid> value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(int value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Nullable`1<int> value, CancellationToken cancellationToken);
    internal Task DoWriteValueAsync(Nullable`1<int> value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(long value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Nullable`1<long> value, CancellationToken cancellationToken);
    internal Task DoWriteValueAsync(Nullable`1<long> value, CancellationToken cancellationToken);
    internal Task WriteValueAsync(BigInteger value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(object value, CancellationToken cancellationToken);
    [CLSCompliantAttribute("False")]
public virtual Task WriteValueAsync(sbyte value, CancellationToken cancellationToken);
    [CLSCompliantAttribute("False")]
public virtual Task WriteValueAsync(Nullable`1<sbyte> value, CancellationToken cancellationToken);
    internal Task DoWriteValueAsync(Nullable`1<sbyte> value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(short value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Nullable`1<short> value, CancellationToken cancellationToken);
    internal Task DoWriteValueAsync(Nullable`1<short> value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(string value, CancellationToken cancellationToken);
    internal Task DoWriteValueAsync(string value, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.JsonTextWriter/<DoWriteValueAsync>d__96")]
private Task DoWriteValueAsync(Task task, string value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(TimeSpan value, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.JsonTextWriter/<DoWriteValueAsync>d__98")]
internal Task DoWriteValueAsync(TimeSpan value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Nullable`1<TimeSpan> value, CancellationToken cancellationToken);
    internal Task DoWriteValueAsync(Nullable`1<TimeSpan> value, CancellationToken cancellationToken);
    [CLSCompliantAttribute("False")]
public virtual Task WriteValueAsync(UInt32 value, CancellationToken cancellationToken);
    [CLSCompliantAttribute("False")]
public virtual Task WriteValueAsync(Nullable`1<UInt32> value, CancellationToken cancellationToken);
    internal Task DoWriteValueAsync(Nullable`1<UInt32> value, CancellationToken cancellationToken);
    [CLSCompliantAttribute("False")]
public virtual Task WriteValueAsync(ulong value, CancellationToken cancellationToken);
    [CLSCompliantAttribute("False")]
public virtual Task WriteValueAsync(Nullable`1<ulong> value, CancellationToken cancellationToken);
    internal Task DoWriteValueAsync(Nullable`1<ulong> value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Uri value, CancellationToken cancellationToken);
    internal Task WriteValueNotNullAsync(Uri value, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.JsonTextWriter/<WriteValueNotNullAsync>d__109")]
internal Task WriteValueNotNullAsync(Task task, Uri value, CancellationToken cancellationToken);
    [CLSCompliantAttribute("False")]
public virtual Task WriteValueAsync(ushort value, CancellationToken cancellationToken);
    [CLSCompliantAttribute("False")]
public virtual Task WriteValueAsync(Nullable`1<ushort> value, CancellationToken cancellationToken);
    internal Task DoWriteValueAsync(Nullable`1<ushort> value, CancellationToken cancellationToken);
    public virtual Task WriteCommentAsync(string text, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.JsonTextWriter/<DoWriteCommentAsync>d__114")]
internal Task DoWriteCommentAsync(string text, CancellationToken cancellationToken);
    public virtual Task WriteEndArrayAsync(CancellationToken cancellationToken);
    public virtual Task WriteEndConstructorAsync(CancellationToken cancellationToken);
    public virtual Task WriteEndObjectAsync(CancellationToken cancellationToken);
    public virtual Task WriteRawValueAsync(string json, CancellationToken cancellationToken);
    internal Task DoWriteRawValueAsync(string json, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.JsonTextWriter/<DoWriteRawValueAsync>d__120")]
private Task DoWriteRawValueAsync(Task task, string json, CancellationToken cancellationToken);
    internal Char[] EnsureWriteBuffer(int length, int copyTo);
    private Base64Encoder get_Base64Encoder();
    [NullableContextAttribute("2")]
public IArrayPool`1<char> get_ArrayPool();
    [NullableContextAttribute("2")]
public void set_ArrayPool(IArrayPool`1<char> value);
    public int get_Indentation();
    public void set_Indentation(int value);
    public char get_QuoteChar();
    public void set_QuoteChar(char value);
    public char get_IndentChar();
    public void set_IndentChar(char value);
    public bool get_QuoteName();
    public void set_QuoteName(bool value);
    public virtual void Flush();
    public virtual void Close();
    private void CloseBufferAndWriter();
    public virtual void WriteStartObject();
    public virtual void WriteStartArray();
    public virtual void WriteStartConstructor(string name);
    protected virtual void WriteEnd(JsonToken token);
    public virtual void WritePropertyName(string name);
    public virtual void WritePropertyName(string name, bool escape);
    internal virtual void OnStringEscapeHandlingChanged();
    private void UpdateCharEscapeFlags();
    protected virtual void WriteIndent();
    private int SetIndentChars();
    protected virtual void WriteValueDelimiter();
    protected virtual void WriteIndentSpace();
    private void WriteValueInternal(string value, JsonToken token);
    [NullableContextAttribute("2")]
public virtual void WriteValue(object value);
    public virtual void WriteNull();
    public virtual void WriteUndefined();
    [NullableContextAttribute("2")]
public virtual void WriteRaw(string json);
    [NullableContextAttribute("2")]
public virtual void WriteValue(string value);
    private void WriteEscapedString(string value, bool quote);
    public virtual void WriteValue(int value);
    [CLSCompliantAttribute("False")]
public virtual void WriteValue(UInt32 value);
    public virtual void WriteValue(long value);
    [CLSCompliantAttribute("False")]
public virtual void WriteValue(ulong value);
    public virtual void WriteValue(float value);
    public virtual void WriteValue(Nullable`1<float> value);
    public virtual void WriteValue(double value);
    public virtual void WriteValue(Nullable`1<double> value);
    public virtual void WriteValue(bool value);
    public virtual void WriteValue(short value);
    [CLSCompliantAttribute("False")]
public virtual void WriteValue(ushort value);
    public virtual void WriteValue(char value);
    public virtual void WriteValue(byte value);
    [CLSCompliantAttribute("False")]
public virtual void WriteValue(sbyte value);
    public virtual void WriteValue(decimal value);
    public virtual void WriteValue(DateTime value);
    private int WriteValueToBuffer(DateTime value);
    [NullableContextAttribute("2")]
public virtual void WriteValue(Byte[] value);
    public virtual void WriteValue(DateTimeOffset value);
    private int WriteValueToBuffer(DateTimeOffset value);
    public virtual void WriteValue(Guid value);
    public virtual void WriteValue(TimeSpan value);
    [NullableContextAttribute("2")]
public virtual void WriteValue(Uri value);
    [NullableContextAttribute("2")]
public virtual void WriteComment(string text);
    public virtual void WriteWhitespace(string ws);
    private void EnsureWriteBuffer();
    private void WriteIntegerValue(long value);
    private void WriteIntegerValue(ulong value, bool negative);
    private int WriteNumberToBuffer(ulong value, bool negative);
    private void WriteIntegerValue(int value);
    private void WriteIntegerValue(UInt32 value, bool negative);
    private int WriteNumberToBuffer(UInt32 value, bool negative);
}
internal enum Newtonsoft.Json.JsonToken : Enum {
    public int value__;
    public static JsonToken None;
    public static JsonToken StartObject;
    public static JsonToken StartArray;
    public static JsonToken StartConstructor;
    public static JsonToken PropertyName;
    public static JsonToken Comment;
    public static JsonToken Raw;
    public static JsonToken Integer;
    public static JsonToken Float;
    public static JsonToken String;
    public static JsonToken Boolean;
    public static JsonToken Null;
    public static JsonToken Undefined;
    public static JsonToken EndObject;
    public static JsonToken EndArray;
    public static JsonToken EndConstructor;
    public static JsonToken Date;
    public static JsonToken Bytes;
}
[ObsoleteAttribute("JSON Schema validation has been moved to its own package. See https://www.newtonsoft.com/jsonschema for more details.")]
internal class Newtonsoft.Json.JsonValidatingReader : JsonReader {
    private JsonReader _reader;
    private Stack`1<SchemaScope> _stack;
    private JsonSchema _schema;
    private JsonSchemaModel _model;
    private SchemaScope _currentScope;
    [CompilerGeneratedAttribute]
private ValidationEventHandler ValidationEventHandler;
    private static IList`1<JsonSchemaModel> EmptySchemaList;
    public object Value { get; }
    public int Depth { get; }
    public string Path { get; }
    public char QuoteChar { get; protected internal set; }
    public JsonToken TokenType { get; }
    public Type ValueType { get; }
    private IList`1<JsonSchemaModel> CurrentSchemas { get; }
    private IList`1<JsonSchemaModel> CurrentMemberSchemas { get; }
    public JsonSchema Schema { get; public set; }
    public JsonReader Reader { get; }
    private int Newtonsoft.Json.IJsonLineInfo.LineNumber { get; }
    private int Newtonsoft.Json.IJsonLineInfo.LinePosition { get; }
    public JsonValidatingReader(JsonReader reader);
    private static JsonValidatingReader();
    [CompilerGeneratedAttribute]
public void add_ValidationEventHandler(ValidationEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ValidationEventHandler(ValidationEventHandler value);
    public virtual object get_Value();
    public virtual int get_Depth();
    public virtual string get_Path();
    public virtual char get_QuoteChar();
    protected internal virtual void set_QuoteChar(char value);
    public virtual JsonToken get_TokenType();
    public virtual Type get_ValueType();
    private void Push(SchemaScope scope);
    private SchemaScope Pop();
    private IList`1<JsonSchemaModel> get_CurrentSchemas();
    private IList`1<JsonSchemaModel> get_CurrentMemberSchemas();
    private void RaiseError(string message, JsonSchemaModel schema);
    private void OnValidationEvent(JsonSchemaException exception);
    public JsonSchema get_Schema();
    public void set_Schema(JsonSchema value);
    public JsonReader get_Reader();
    public virtual void Close();
    private void ValidateNotDisallowed(JsonSchemaModel schema);
    private Nullable`1<JsonSchemaType> GetCurrentNodeSchemaType();
    public virtual Nullable`1<int> ReadAsInt32();
    public virtual Byte[] ReadAsBytes();
    public virtual Nullable`1<decimal> ReadAsDecimal();
    public virtual Nullable`1<double> ReadAsDouble();
    public virtual Nullable`1<bool> ReadAsBoolean();
    public virtual string ReadAsString();
    public virtual Nullable`1<DateTime> ReadAsDateTime();
    public virtual Nullable`1<DateTimeOffset> ReadAsDateTimeOffset();
    public virtual bool Read();
    private void ValidateCurrentToken();
    private void WriteToken(IList`1<JsonSchemaModel> schemas);
    private void ValidateEndObject(JsonSchemaModel schema);
    private void ValidateEndArray(JsonSchemaModel schema);
    private void ValidateNull(JsonSchemaModel schema);
    private void ValidateBoolean(JsonSchemaModel schema);
    private void ValidateString(JsonSchemaModel schema);
    private void ValidateInteger(JsonSchemaModel schema);
    private void ProcessValue();
    private void ValidateFloat(JsonSchemaModel schema);
    private static double FloatingPointRemainder(double dividend, double divisor);
    private static bool IsZero(double value);
    private void ValidatePropertyName(JsonSchemaModel schema);
    private bool IsPropertyDefinied(JsonSchemaModel schema, string propertyName);
    private bool ValidateArray(JsonSchemaModel schema);
    private bool ValidateObject(JsonSchemaModel schema);
    private bool TestType(JsonSchemaModel currentSchema, JsonSchemaType currentType);
    private sealed virtual override bool Newtonsoft.Json.IJsonLineInfo.HasLineInfo();
    private sealed virtual override int Newtonsoft.Json.IJsonLineInfo.get_LineNumber();
    private sealed virtual override int Newtonsoft.Json.IJsonLineInfo.get_LinePosition();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class Newtonsoft.Json.JsonWriter : object {
    private static State[][] StateArray;
    internal static State[][] StateArrayTemplate;
    [NullableAttribute("2")]
private List`1<JsonPosition> _stack;
    private JsonPosition _currentPosition;
    private State _currentState;
    private Formatting _formatting;
    [CompilerGeneratedAttribute]
private bool <CloseOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AutoCompleteOnClose>k__BackingField;
    private DateFormatHandling _dateFormatHandling;
    private DateTimeZoneHandling _dateTimeZoneHandling;
    private StringEscapeHandling _stringEscapeHandling;
    private FloatFormatHandling _floatFormatHandling;
    [NullableAttribute("2")]
private string _dateFormatString;
    [NullableAttribute("2")]
private CultureInfo _culture;
    public bool CloseOutput { get; public set; }
    public bool AutoCompleteOnClose { get; public set; }
    protected internal int Top { get; }
    public WriteState WriteState { get; }
    internal string ContainerPath { get; }
    public string Path { get; }
    public Formatting Formatting { get; public set; }
    public DateFormatHandling DateFormatHandling { get; public set; }
    public DateTimeZoneHandling DateTimeZoneHandling { get; public set; }
    public StringEscapeHandling StringEscapeHandling { get; public set; }
    public FloatFormatHandling FloatFormatHandling { get; public set; }
    [NullableAttribute("2")]
public string DateFormatString { get; public set; }
    public CultureInfo Culture { get; public set; }
    private static JsonWriter();
    internal Task AutoCompleteAsync(JsonToken tokenBeingWritten, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.JsonWriter/<AutoCompleteAsync>d__1")]
private Task AutoCompleteAsync(CancellationToken cancellationToken);
    public virtual Task CloseAsync(CancellationToken cancellationToken);
    public virtual Task FlushAsync(CancellationToken cancellationToken);
    protected virtual Task WriteEndAsync(JsonToken token, CancellationToken cancellationToken);
    protected virtual Task WriteIndentAsync(CancellationToken cancellationToken);
    protected virtual Task WriteValueDelimiterAsync(CancellationToken cancellationToken);
    protected virtual Task WriteIndentSpaceAsync(CancellationToken cancellationToken);
    public virtual Task WriteRawAsync(string json, CancellationToken cancellationToken);
    public virtual Task WriteEndAsync(CancellationToken cancellationToken);
    internal Task WriteEndInternalAsync(CancellationToken cancellationToken);
    internal Task InternalWriteEndAsync(JsonContainerType type, CancellationToken cancellationToken);
    public virtual Task WriteEndArrayAsync(CancellationToken cancellationToken);
    public virtual Task WriteEndConstructorAsync(CancellationToken cancellationToken);
    public virtual Task WriteEndObjectAsync(CancellationToken cancellationToken);
    public virtual Task WriteNullAsync(CancellationToken cancellationToken);
    public virtual Task WritePropertyNameAsync(string name, CancellationToken cancellationToken);
    public virtual Task WritePropertyNameAsync(string name, bool escape, CancellationToken cancellationToken);
    internal Task InternalWritePropertyNameAsync(string name, CancellationToken cancellationToken);
    public virtual Task WriteStartArrayAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.JsonWriter/<InternalWriteStartAsync>d__20")]
internal Task InternalWriteStartAsync(JsonToken token, JsonContainerType container, CancellationToken cancellationToken);
    public virtual Task WriteCommentAsync(string text, CancellationToken cancellationToken);
    internal Task InternalWriteCommentAsync(CancellationToken cancellationToken);
    public virtual Task WriteRawValueAsync(string json, CancellationToken cancellationToken);
    public virtual Task WriteStartConstructorAsync(string name, CancellationToken cancellationToken);
    public virtual Task WriteStartObjectAsync(CancellationToken cancellationToken);
    public Task WriteTokenAsync(JsonReader reader, CancellationToken cancellationToken);
    public Task WriteTokenAsync(JsonReader reader, bool writeChildren, CancellationToken cancellationToken);
    public Task WriteTokenAsync(JsonToken token, CancellationToken cancellationToken);
    public Task WriteTokenAsync(JsonToken token, object value, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.JsonWriter/<WriteTokenAsync>d__30")]
internal virtual Task WriteTokenAsync(JsonReader reader, bool writeChildren, bool writeDateConstructorAsDate, bool writeComments, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.JsonWriter/<WriteTokenSyncReadingAsync>d__31")]
internal Task WriteTokenSyncReadingAsync(JsonReader reader, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.JsonWriter/<WriteConstructorDateAsync>d__32")]
private Task WriteConstructorDateAsync(JsonReader reader, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(bool value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Nullable`1<bool> value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(byte value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Nullable`1<byte> value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Byte[] value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(char value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Nullable`1<char> value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(DateTime value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Nullable`1<DateTime> value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(DateTimeOffset value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Nullable`1<DateTimeOffset> value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(decimal value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Nullable`1<decimal> value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(double value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Nullable`1<double> value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(float value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Nullable`1<float> value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Guid value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Nullable`1<Guid> value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(int value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Nullable`1<int> value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(long value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Nullable`1<long> value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(object value, CancellationToken cancellationToken);
    [CLSCompliantAttribute("False")]
public virtual Task WriteValueAsync(sbyte value, CancellationToken cancellationToken);
    [CLSCompliantAttribute("False")]
public virtual Task WriteValueAsync(Nullable`1<sbyte> value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(short value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Nullable`1<short> value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(string value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(TimeSpan value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Nullable`1<TimeSpan> value, CancellationToken cancellationToken);
    [CLSCompliantAttribute("False")]
public virtual Task WriteValueAsync(UInt32 value, CancellationToken cancellationToken);
    [CLSCompliantAttribute("False")]
public virtual Task WriteValueAsync(Nullable`1<UInt32> value, CancellationToken cancellationToken);
    [CLSCompliantAttribute("False")]
public virtual Task WriteValueAsync(ulong value, CancellationToken cancellationToken);
    [CLSCompliantAttribute("False")]
public virtual Task WriteValueAsync(Nullable`1<ulong> value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Uri value, CancellationToken cancellationToken);
    [CLSCompliantAttribute("False")]
public virtual Task WriteValueAsync(ushort value, CancellationToken cancellationToken);
    [CLSCompliantAttribute("False")]
public virtual Task WriteValueAsync(Nullable`1<ushort> value, CancellationToken cancellationToken);
    public virtual Task WriteUndefinedAsync(CancellationToken cancellationToken);
    public virtual Task WriteWhitespaceAsync(string ws, CancellationToken cancellationToken);
    internal Task InternalWriteValueAsync(JsonToken token, CancellationToken cancellationToken);
    protected Task SetWriteStateAsync(JsonToken token, object value, CancellationToken cancellationToken);
    internal static Task WriteValueAsync(JsonWriter writer, PrimitiveTypeCode typeCode, object value, CancellationToken cancellationToken);
    internal static State[][] BuildStateArray();
    [CompilerGeneratedAttribute]
public bool get_CloseOutput();
    [CompilerGeneratedAttribute]
public void set_CloseOutput(bool value);
    [CompilerGeneratedAttribute]
public bool get_AutoCompleteOnClose();
    [CompilerGeneratedAttribute]
public void set_AutoCompleteOnClose(bool value);
    protected internal int get_Top();
    public WriteState get_WriteState();
    internal string get_ContainerPath();
    public string get_Path();
    public Formatting get_Formatting();
    public void set_Formatting(Formatting value);
    public DateFormatHandling get_DateFormatHandling();
    public void set_DateFormatHandling(DateFormatHandling value);
    public DateTimeZoneHandling get_DateTimeZoneHandling();
    public void set_DateTimeZoneHandling(DateTimeZoneHandling value);
    public StringEscapeHandling get_StringEscapeHandling();
    public void set_StringEscapeHandling(StringEscapeHandling value);
    internal virtual void OnStringEscapeHandlingChanged();
    public FloatFormatHandling get_FloatFormatHandling();
    public void set_FloatFormatHandling(FloatFormatHandling value);
    [NullableContextAttribute("2")]
public string get_DateFormatString();
    [NullableContextAttribute("2")]
public void set_DateFormatString(string value);
    public CultureInfo get_Culture();
    public void set_Culture(CultureInfo value);
    internal void UpdateScopeWithFinishedValue();
    private void Push(JsonContainerType value);
    private JsonContainerType Pop();
    private JsonContainerType Peek();
    public abstract virtual void Flush();
    public virtual void Close();
    public virtual void WriteStartObject();
    public virtual void WriteEndObject();
    public virtual void WriteStartArray();
    public virtual void WriteEndArray();
    public virtual void WriteStartConstructor(string name);
    public virtual void WriteEndConstructor();
    public virtual void WritePropertyName(string name);
    public virtual void WritePropertyName(string name, bool escape);
    public virtual void WriteEnd();
    public void WriteToken(JsonReader reader);
    public void WriteToken(JsonReader reader, bool writeChildren);
    [NullableContextAttribute("2")]
public void WriteToken(JsonToken token, object value);
    public void WriteToken(JsonToken token);
    internal virtual void WriteToken(JsonReader reader, bool writeChildren, bool writeDateConstructorAsDate, bool writeComments);
    private bool IsWriteTokenIncomplete(JsonReader reader, bool writeChildren, int initialDepth);
    private int CalculateWriteTokenInitialDepth(JsonReader reader);
    private int CalculateWriteTokenFinalDepth(JsonReader reader);
    private void WriteConstructorDate(JsonReader reader);
    private void WriteEnd(JsonContainerType type);
    private void AutoCompleteAll();
    private JsonToken GetCloseTokenForType(JsonContainerType type);
    private void AutoCompleteClose(JsonContainerType type);
    private int CalculateLevelsToComplete(JsonContainerType type);
    private void UpdateCurrentState();
    protected virtual void WriteEnd(JsonToken token);
    protected virtual void WriteIndent();
    protected virtual void WriteValueDelimiter();
    protected virtual void WriteIndentSpace();
    internal void AutoComplete(JsonToken tokenBeingWritten);
    public virtual void WriteNull();
    public virtual void WriteUndefined();
    [NullableContextAttribute("2")]
public virtual void WriteRaw(string json);
    [NullableContextAttribute("2")]
public virtual void WriteRawValue(string json);
    [NullableContextAttribute("2")]
public virtual void WriteValue(string value);
    public virtual void WriteValue(int value);
    [CLSCompliantAttribute("False")]
public virtual void WriteValue(UInt32 value);
    public virtual void WriteValue(long value);
    [CLSCompliantAttribute("False")]
public virtual void WriteValue(ulong value);
    public virtual void WriteValue(float value);
    public virtual void WriteValue(double value);
    public virtual void WriteValue(bool value);
    public virtual void WriteValue(short value);
    [CLSCompliantAttribute("False")]
public virtual void WriteValue(ushort value);
    public virtual void WriteValue(char value);
    public virtual void WriteValue(byte value);
    [CLSCompliantAttribute("False")]
public virtual void WriteValue(sbyte value);
    public virtual void WriteValue(decimal value);
    public virtual void WriteValue(DateTime value);
    public virtual void WriteValue(DateTimeOffset value);
    public virtual void WriteValue(Guid value);
    public virtual void WriteValue(TimeSpan value);
    public virtual void WriteValue(Nullable`1<int> value);
    [CLSCompliantAttribute("False")]
public virtual void WriteValue(Nullable`1<UInt32> value);
    public virtual void WriteValue(Nullable`1<long> value);
    [CLSCompliantAttribute("False")]
public virtual void WriteValue(Nullable`1<ulong> value);
    public virtual void WriteValue(Nullable`1<float> value);
    public virtual void WriteValue(Nullable`1<double> value);
    public virtual void WriteValue(Nullable`1<bool> value);
    public virtual void WriteValue(Nullable`1<short> value);
    [CLSCompliantAttribute("False")]
public virtual void WriteValue(Nullable`1<ushort> value);
    public virtual void WriteValue(Nullable`1<char> value);
    public virtual void WriteValue(Nullable`1<byte> value);
    [CLSCompliantAttribute("False")]
public virtual void WriteValue(Nullable`1<sbyte> value);
    public virtual void WriteValue(Nullable`1<decimal> value);
    public virtual void WriteValue(Nullable`1<DateTime> value);
    public virtual void WriteValue(Nullable`1<DateTimeOffset> value);
    public virtual void WriteValue(Nullable`1<Guid> value);
    public virtual void WriteValue(Nullable`1<TimeSpan> value);
    [NullableContextAttribute("2")]
public virtual void WriteValue(Byte[] value);
    [NullableContextAttribute("2")]
public virtual void WriteValue(Uri value);
    [NullableContextAttribute("2")]
public virtual void WriteValue(object value);
    [NullableContextAttribute("2")]
public virtual void WriteComment(string text);
    public virtual void WriteWhitespace(string ws);
    private sealed virtual override void System.IDisposable.Dispose();
    protected virtual void Dispose(bool disposing);
    internal static void WriteValue(JsonWriter writer, PrimitiveTypeCode typeCode, object value);
    private static void ResolveConvertibleValue(IConvertible convertible, PrimitiveTypeCode& typeCode, Object& value);
    private static JsonWriterException CreateUnsupportedTypeException(JsonWriter writer, object value);
    protected void SetWriteState(JsonToken token, object value);
    internal void InternalWriteEnd(JsonContainerType container);
    internal void InternalWritePropertyName(string name);
    internal void InternalWriteRaw();
    internal void InternalWriteStart(JsonToken token, JsonContainerType container);
    internal void InternalWriteValue(JsonToken token);
    internal void InternalWriteWhitespace(string ws);
    internal void InternalWriteComment();
    [CompilerGeneratedAttribute]
[AsyncStateMachineAttribute("Newtonsoft.Json.JsonWriter/<<InternalWriteEndAsync>g__AwaitProperty|11_0>d")]
private Task <InternalWriteEndAsync>g__AwaitProperty|11_0(Task task, int LevelsToComplete, JsonToken token, CancellationToken CancellationToken);
    [CompilerGeneratedAttribute]
[AsyncStateMachineAttribute("Newtonsoft.Json.JsonWriter/<<InternalWriteEndAsync>g__AwaitIndent|11_1>d")]
private Task <InternalWriteEndAsync>g__AwaitIndent|11_1(Task task, int LevelsToComplete, JsonToken token, CancellationToken CancellationToken);
    [CompilerGeneratedAttribute]
[AsyncStateMachineAttribute("Newtonsoft.Json.JsonWriter/<<InternalWriteEndAsync>g__AwaitEnd|11_2>d")]
private Task <InternalWriteEndAsync>g__AwaitEnd|11_2(Task task, int LevelsToComplete, CancellationToken CancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.JsonWriter/<<InternalWriteEndAsync>g__AwaitRemaining|11_3>d")]
[CompilerGeneratedAttribute]
private Task <InternalWriteEndAsync>g__AwaitRemaining|11_3(int LevelsToComplete, CancellationToken CancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Newtonsoft.Json.JsonWriterException : JsonException {
    [CompilerGeneratedAttribute]
[NullableAttribute("2")]
private string <Path>k__BackingField;
    [NullableAttribute("2")]
public string Path { get; }
    public JsonWriterException(string message);
    public JsonWriterException(string message, Exception innerException);
    public JsonWriterException(SerializationInfo info, StreamingContext context);
    public JsonWriterException(string message, string path, Exception innerException);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Path();
    internal static JsonWriterException Create(JsonWriter writer, string message, Exception ex);
    internal static JsonWriterException Create(string path, string message, Exception ex);
}
internal enum Newtonsoft.Json.Linq.CommentHandling : Enum {
    public int value__;
    public static CommentHandling Ignore;
    public static CommentHandling Load;
}
internal enum Newtonsoft.Json.Linq.DuplicatePropertyNameHandling : Enum {
    public int value__;
    public static DuplicatePropertyNameHandling Replace;
    public static DuplicatePropertyNameHandling Ignore;
    public static DuplicatePropertyNameHandling Error;
}
[ExtensionAttribute]
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Newtonsoft.Json.Linq.Extensions : object {
    [ExtensionAttribute]
public static IJEnumerable`1<JToken> Ancestors(IEnumerable`1<T> source);
    [ExtensionAttribute]
public static IJEnumerable`1<JToken> AncestorsAndSelf(IEnumerable`1<T> source);
    [ExtensionAttribute]
public static IJEnumerable`1<JToken> Descendants(IEnumerable`1<T> source);
    [ExtensionAttribute]
public static IJEnumerable`1<JToken> DescendantsAndSelf(IEnumerable`1<T> source);
    [ExtensionAttribute]
public static IJEnumerable`1<JProperty> Properties(IEnumerable`1<JObject> source);
    [ExtensionAttribute]
public static IJEnumerable`1<JToken> Values(IEnumerable`1<JToken> source, object key);
    [ExtensionAttribute]
public static IJEnumerable`1<JToken> Values(IEnumerable`1<JToken> source);
    [ExtensionAttribute]
public static IEnumerable`1<U> Values(IEnumerable`1<JToken> source, object key);
    [ExtensionAttribute]
public static IEnumerable`1<U> Values(IEnumerable`1<JToken> source);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static U Value(IEnumerable`1<JToken> value);
    [ExtensionAttribute]
public static U Value(IEnumerable`1<T> value);
    [IteratorStateMachineAttribute("Newtonsoft.Json.Linq.Extensions/<Values>d__11`2")]
[ExtensionAttribute]
internal static IEnumerable`1<U> Values(IEnumerable`1<T> source, object key);
    [ExtensionAttribute]
public static IJEnumerable`1<JToken> Children(IEnumerable`1<T> source);
    [ExtensionAttribute]
public static IEnumerable`1<U> Children(IEnumerable`1<T> source);
    [ExtensionAttribute]
[IteratorStateMachineAttribute("Newtonsoft.Json.Linq.Extensions/<Convert>d__14`2")]
internal static IEnumerable`1<U> Convert(IEnumerable`1<T> source);
    [ExtensionAttribute]
[NullableContextAttribute("2")]
internal static U Convert(T token);
    [ExtensionAttribute]
public static IJEnumerable`1<JToken> AsJEnumerable(IEnumerable`1<JToken> source);
    [ExtensionAttribute]
public static IJEnumerable`1<T> AsJEnumerable(IEnumerable`1<T> source);
}
[NullableContextAttribute("1")]
[DefaultMemberAttribute("Item")]
internal interface Newtonsoft.Json.Linq.IJEnumerable`1 {
    public IJEnumerable`1<JToken> Item { get; }
    public abstract virtual IJEnumerable`1<JToken> get_Item(object key);
}
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
[NullableContextAttribute("1")]
internal class Newtonsoft.Json.Linq.JArray : JContainer {
    private List`1<JToken> _values;
    protected IList`1<JToken> ChildrenTokens { get; }
    public JTokenType Type { get; }
    [NullableAttribute("2")]
public JToken Item { get; public set; }
    public JToken Item { get; public set; }
    public bool IsReadOnly { get; }
    public JArray(JArray other);
    public JArray(Object[] content);
    public JArray(object content);
    [AsyncStateMachineAttribute("Newtonsoft.Json.Linq.JArray/<WriteToAsync>d__0")]
public virtual Task WriteToAsync(JsonWriter writer, CancellationToken cancellationToken, JsonConverter[] converters);
    public static Task`1<JArray> LoadAsync(JsonReader reader, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.Linq.JArray/<LoadAsync>d__2")]
public static Task`1<JArray> LoadAsync(JsonReader reader, JsonLoadSettings settings, CancellationToken cancellationToken);
    protected virtual IList`1<JToken> get_ChildrenTokens();
    public virtual JTokenType get_Type();
    internal virtual bool DeepEquals(JToken node);
    internal virtual JToken CloneToken();
    public static JArray Load(JsonReader reader);
    public static JArray Load(JsonReader reader, JsonLoadSettings settings);
    public static JArray Parse(string json);
    public static JArray Parse(string json, JsonLoadSettings settings);
    public static JArray FromObject(object o);
    public static JArray FromObject(object o, JsonSerializer jsonSerializer);
    public virtual void WriteTo(JsonWriter writer, JsonConverter[] converters);
    public virtual JToken get_Item(object key);
    public virtual void set_Item(object key, JToken value);
    public sealed virtual JToken get_Item(int index);
    public sealed virtual void set_Item(int index, JToken value);
    [NullableContextAttribute("2")]
internal virtual int IndexOfItem(JToken item);
    internal virtual void MergeItem(object content, JsonMergeSettings settings);
    public sealed virtual int IndexOf(JToken item);
    public sealed virtual void Insert(int index, JToken item);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual IEnumerator`1<JToken> GetEnumerator();
    public sealed virtual void Add(JToken item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(JToken item);
    public sealed virtual void CopyTo(JToken[] array, int arrayIndex);
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool Remove(JToken item);
    internal virtual int GetDeepHashCode();
}
[DefaultMemberAttribute("Item")]
[NullableAttribute("0")]
[NullableContextAttribute("1")]
internal class Newtonsoft.Json.Linq.JConstructor : JContainer {
    [NullableAttribute("2")]
private string _name;
    private List`1<JToken> _values;
    protected IList`1<JToken> ChildrenTokens { get; }
    [NullableAttribute("2")]
public string Name { get; public set; }
    public JTokenType Type { get; }
    [NullableAttribute("2")]
public JToken Item { get; public set; }
    public JConstructor(JConstructor other);
    public JConstructor(string name, Object[] content);
    public JConstructor(string name, object content);
    public JConstructor(string name);
    [AsyncStateMachineAttribute("Newtonsoft.Json.Linq.JConstructor/<WriteToAsync>d__0")]
public virtual Task WriteToAsync(JsonWriter writer, CancellationToken cancellationToken, JsonConverter[] converters);
    public static Task`1<JConstructor> LoadAsync(JsonReader reader, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.Linq.JConstructor/<LoadAsync>d__2")]
public static Task`1<JConstructor> LoadAsync(JsonReader reader, JsonLoadSettings settings, CancellationToken cancellationToken);
    protected virtual IList`1<JToken> get_ChildrenTokens();
    [NullableContextAttribute("2")]
internal virtual int IndexOfItem(JToken item);
    internal virtual void MergeItem(object content, JsonMergeSettings settings);
    [NullableContextAttribute("2")]
public string get_Name();
    [NullableContextAttribute("2")]
public void set_Name(string value);
    public virtual JTokenType get_Type();
    internal virtual bool DeepEquals(JToken node);
    internal virtual JToken CloneToken();
    public virtual void WriteTo(JsonWriter writer, JsonConverter[] converters);
    public virtual JToken get_Item(object key);
    public virtual void set_Item(object key, JToken value);
    internal virtual int GetDeepHashCode();
    public static JConstructor Load(JsonReader reader);
    public static JConstructor Load(JsonReader reader, JsonLoadSettings settings);
}
[NullableAttribute("0")]
[NullableContextAttribute("1")]
internal abstract class Newtonsoft.Json.Linq.JContainer : JToken {
    [NullableAttribute("2")]
internal ListChangedEventHandler _listChanged;
    [NullableAttribute("2")]
internal AddingNewEventHandler _addingNew;
    [NullableAttribute("2")]
internal NotifyCollectionChangedEventHandler _collectionChanged;
    [NullableAttribute("2")]
private object _syncRoot;
    private bool _busy;
    protected IList`1<JToken> ChildrenTokens { get; }
    public bool HasValues { get; }
    [NullableAttribute("2")]
public JToken First { get; }
    [NullableAttribute("2")]
public JToken Last { get; }
    private JToken System.Collections.Generic.IList<Newtonsoft.Json.Linq.JToken>.Item { get; private set; }
    private bool System.Collections.Generic.ICollection<Newtonsoft.Json.Linq.JToken>.IsReadOnly { get; }
    private bool System.Collections.IList.IsFixedSize { get; }
    private bool System.Collections.IList.IsReadOnly { get; }
    private object System.Collections.IList.Item { get; private set; }
    public int Count { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    private bool System.ComponentModel.IBindingList.AllowEdit { get; }
    private bool System.ComponentModel.IBindingList.AllowNew { get; }
    private bool System.ComponentModel.IBindingList.AllowRemove { get; }
    private bool System.ComponentModel.IBindingList.IsSorted { get; }
    private ListSortDirection System.ComponentModel.IBindingList.SortDirection { get; }
    [NullableAttribute("2")]
private PropertyDescriptor System.ComponentModel.IBindingList.SortProperty { get; }
    private bool System.ComponentModel.IBindingList.SupportsChangeNotification { get; }
    private bool System.ComponentModel.IBindingList.SupportsSearching { get; }
    private bool System.ComponentModel.IBindingList.SupportsSorting { get; }
    internal JContainer(JContainer other);
    [AsyncStateMachineAttribute("Newtonsoft.Json.Linq.JContainer/<ReadTokenFromAsync>d__0")]
internal Task ReadTokenFromAsync(JsonReader reader, JsonLoadSettings options, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.Linq.JContainer/<ReadContentFromAsync>d__1")]
private Task ReadContentFromAsync(JsonReader reader, JsonLoadSettings settings, CancellationToken cancellationToken);
    public sealed virtual void add_ListChanged(ListChangedEventHandler value);
    public sealed virtual void remove_ListChanged(ListChangedEventHandler value);
    public void add_AddingNew(AddingNewEventHandler value);
    public void remove_AddingNew(AddingNewEventHandler value);
    public sealed virtual void add_CollectionChanged(NotifyCollectionChangedEventHandler value);
    public sealed virtual void remove_CollectionChanged(NotifyCollectionChangedEventHandler value);
    protected abstract virtual IList`1<JToken> get_ChildrenTokens();
    internal void CheckReentrancy();
    internal virtual IList`1<JToken> CreateChildrenCollection();
    protected virtual void OnAddingNew(AddingNewEventArgs e);
    protected virtual void OnListChanged(ListChangedEventArgs e);
    protected virtual void OnCollectionChanged(NotifyCollectionChangedEventArgs e);
    public virtual bool get_HasValues();
    internal bool ContentsEqual(JContainer container);
    [NullableContextAttribute("2")]
public virtual JToken get_First();
    [NullableContextAttribute("2")]
public virtual JToken get_Last();
    public virtual JEnumerable`1<JToken> Children();
    [NullableContextAttribute("2")]
public virtual IEnumerable`1<T> Values();
    public IEnumerable`1<JToken> Descendants();
    public IEnumerable`1<JToken> DescendantsAndSelf();
    [IteratorStateMachineAttribute("Newtonsoft.Json.Linq.JContainer/<GetDescendants>d__36")]
internal IEnumerable`1<JToken> GetDescendants(bool self);
    [NullableContextAttribute("2")]
internal bool IsMultiContent(object content);
    internal JToken EnsureParentToken(JToken item, bool skipParentCheck);
    [NullableContextAttribute("2")]
internal abstract virtual int IndexOfItem(JToken item);
    [NullableContextAttribute("2")]
internal virtual bool InsertItem(int index, JToken item, bool skipParentCheck);
    internal virtual void RemoveItemAt(int index);
    [NullableContextAttribute("2")]
internal virtual bool RemoveItem(JToken item);
    internal virtual JToken GetItem(int index);
    [NullableContextAttribute("2")]
internal virtual void SetItem(int index, JToken item);
    internal virtual void ClearItems();
    internal virtual void ReplaceItem(JToken existing, JToken replacement);
    [NullableContextAttribute("2")]
internal virtual bool ContainsItem(JToken item);
    internal virtual void CopyItemsTo(Array array, int arrayIndex);
    internal static bool IsTokenUnchanged(JToken currentValue, JToken newValue);
    internal virtual void ValidateToken(JToken o, JToken existing);
    [NullableContextAttribute("2")]
public virtual void Add(object content);
    [NullableContextAttribute("2")]
internal bool TryAdd(object content);
    internal void AddAndSkipParentCheck(JToken token);
    [NullableContextAttribute("2")]
public void AddFirst(object content);
    [NullableContextAttribute("2")]
internal bool TryAddInternal(int index, object content, bool skipParentCheck);
    internal static JToken CreateFromContent(object content);
    public JsonWriter CreateWriter();
    public void ReplaceAll(object content);
    public void RemoveAll();
    internal abstract virtual void MergeItem(object content, JsonMergeSettings settings);
    public void Merge(object content);
    public void Merge(object content, JsonMergeSettings settings);
    internal void ReadTokenFrom(JsonReader reader, JsonLoadSettings options);
    internal void ReadContentFrom(JsonReader r, JsonLoadSettings settings);
    [NullableContextAttribute("2")]
private static JProperty ReadProperty(JsonReader r, JsonLoadSettings settings, IJsonLineInfo lineInfo, JContainer parent);
    internal int ContentsHashCode();
    private sealed virtual override string System.ComponentModel.ITypedList.GetListName(PropertyDescriptor[] listAccessors);
    private sealed virtual override PropertyDescriptorCollection System.ComponentModel.ITypedList.GetItemProperties(PropertyDescriptor[] listAccessors);
    private sealed virtual override int System.Collections.Generic.IList<Newtonsoft.Json.Linq.JToken>.IndexOf(JToken item);
    private sealed virtual override void System.Collections.Generic.IList<Newtonsoft.Json.Linq.JToken>.Insert(int index, JToken item);
    private sealed virtual override void System.Collections.Generic.IList<Newtonsoft.Json.Linq.JToken>.RemoveAt(int index);
    private sealed virtual override JToken System.Collections.Generic.IList<Newtonsoft.Json.Linq.JToken>.get_Item(int index);
    private sealed virtual override void System.Collections.Generic.IList<Newtonsoft.Json.Linq.JToken>.set_Item(int index, JToken value);
    private sealed virtual override void System.Collections.Generic.ICollection<Newtonsoft.Json.Linq.JToken>.Add(JToken item);
    private sealed virtual override void System.Collections.Generic.ICollection<Newtonsoft.Json.Linq.JToken>.Clear();
    private sealed virtual override bool System.Collections.Generic.ICollection<Newtonsoft.Json.Linq.JToken>.Contains(JToken item);
    private sealed virtual override void System.Collections.Generic.ICollection<Newtonsoft.Json.Linq.JToken>.CopyTo(JToken[] array, int arrayIndex);
    private sealed virtual override bool System.Collections.Generic.ICollection<Newtonsoft.Json.Linq.JToken>.get_IsReadOnly();
    private sealed virtual override bool System.Collections.Generic.ICollection<Newtonsoft.Json.Linq.JToken>.Remove(JToken item);
    private JToken EnsureValue(object value);
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override void System.Collections.IList.Clear();
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    private sealed virtual override void System.Collections.IList.Remove(object value);
    private sealed virtual override void System.Collections.IList.RemoveAt(int index);
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    public sealed virtual int get_Count();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override void System.ComponentModel.IBindingList.AddIndex(PropertyDescriptor property);
    private sealed virtual override object System.ComponentModel.IBindingList.AddNew();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_AllowEdit();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_AllowNew();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_AllowRemove();
    private sealed virtual override void System.ComponentModel.IBindingList.ApplySort(PropertyDescriptor property, ListSortDirection direction);
    private sealed virtual override int System.ComponentModel.IBindingList.Find(PropertyDescriptor property, object key);
    private sealed virtual override bool System.ComponentModel.IBindingList.get_IsSorted();
    private sealed virtual override void System.ComponentModel.IBindingList.RemoveIndex(PropertyDescriptor property);
    private sealed virtual override void System.ComponentModel.IBindingList.RemoveSort();
    private sealed virtual override ListSortDirection System.ComponentModel.IBindingList.get_SortDirection();
    [NullableContextAttribute("2")]
private sealed virtual override PropertyDescriptor System.ComponentModel.IBindingList.get_SortProperty();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_SupportsChangeNotification();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_SupportsSearching();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_SupportsSorting();
    internal static void MergeEnumerableContent(JContainer target, IEnumerable content, JsonMergeSettings settings);
}
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
[NullableContextAttribute("1")]
[IsReadOnlyAttribute]
internal class Newtonsoft.Json.Linq.JEnumerable`1 : ValueType {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static JEnumerable`1<T> Empty;
    private IEnumerable`1<T> _enumerable;
    public IJEnumerable`1<JToken> Item { get; }
    public JEnumerable`1(IEnumerable`1<T> enumerable);
    private static JEnumerable`1();
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual IJEnumerable`1<JToken> get_Item(object key);
    public sealed virtual bool Equals(JEnumerable`1<T> other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
[NullableContextAttribute("1")]
internal class Newtonsoft.Json.Linq.JObject : JContainer {
    private JPropertyKeyedCollection _properties;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private PropertyChangingEventHandler PropertyChanging;
    protected IList`1<JToken> ChildrenTokens { get; }
    public JTokenType Type { get; }
    [NullableAttribute("2")]
public JToken Item { get; public set; }
    [NullableAttribute("2")]
public JToken Item { get; public set; }
    private ICollection`1<string> System.Collections.Generic.IDictionary<System.String,Newtonsoft.Json.Linq.JToken>.Keys { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ICollection`1<JToken> System.Collections.Generic.IDictionary<System.String,Newtonsoft.Json.Linq.JToken>.Values { get; }
    private bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,Newtonsoft.Json.Linq.JToken>>.IsReadOnly { get; }
    public JObject(JObject other);
    public JObject(Object[] content);
    public JObject(object content);
    public virtual Task WriteToAsync(JsonWriter writer, CancellationToken cancellationToken, JsonConverter[] converters);
    public static Task`1<JObject> LoadAsync(JsonReader reader, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.Linq.JObject/<LoadAsync>d__2")]
public static Task`1<JObject> LoadAsync(JsonReader reader, JsonLoadSettings settings, CancellationToken cancellationToken);
    protected virtual IList`1<JToken> get_ChildrenTokens();
    [CompilerGeneratedAttribute]
[NullableContextAttribute("2")]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanging(PropertyChangingEventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanging(PropertyChangingEventHandler value);
    internal virtual bool DeepEquals(JToken node);
    [NullableContextAttribute("2")]
internal virtual int IndexOfItem(JToken item);
    [NullableContextAttribute("2")]
internal virtual bool InsertItem(int index, JToken item, bool skipParentCheck);
    internal virtual void ValidateToken(JToken o, JToken existing);
    internal virtual void MergeItem(object content, JsonMergeSettings settings);
    private static bool IsNull(JToken token);
    internal void InternalPropertyChanged(JProperty childProperty);
    internal void InternalPropertyChanging(JProperty childProperty);
    internal virtual JToken CloneToken();
    public virtual JTokenType get_Type();
    public IEnumerable`1<JProperty> Properties();
    public JProperty Property(string name);
    public JProperty Property(string name, StringComparison comparison);
    public JEnumerable`1<JToken> PropertyValues();
    public virtual JToken get_Item(object key);
    public virtual void set_Item(object key, JToken value);
    public sealed virtual JToken get_Item(string propertyName);
    public sealed virtual void set_Item(string propertyName, JToken value);
    public static JObject Load(JsonReader reader);
    public static JObject Load(JsonReader reader, JsonLoadSettings settings);
    public static JObject Parse(string json);
    public static JObject Parse(string json, JsonLoadSettings settings);
    public static JObject FromObject(object o);
    public static JObject FromObject(object o, JsonSerializer jsonSerializer);
    public virtual void WriteTo(JsonWriter writer, JsonConverter[] converters);
    [NullableContextAttribute("2")]
public JToken GetValue(string propertyName);
    [NullableContextAttribute("2")]
public JToken GetValue(string propertyName, StringComparison comparison);
    public bool TryGetValue(string propertyName, StringComparison comparison, JToken& value);
    public sealed virtual void Add(string propertyName, JToken value);
    public sealed virtual bool ContainsKey(string propertyName);
    private sealed virtual override ICollection`1<string> System.Collections.Generic.IDictionary<System.String,Newtonsoft.Json.Linq.JToken>.get_Keys();
    public sealed virtual bool Remove(string propertyName);
    public sealed virtual bool TryGetValue(string propertyName, JToken& value);
    private sealed virtual override ICollection`1<JToken> System.Collections.Generic.IDictionary<System.String,Newtonsoft.Json.Linq.JToken>.get_Values();
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,Newtonsoft.Json.Linq.JToken>>.Add(KeyValuePair`2<string, JToken> item);
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,Newtonsoft.Json.Linq.JToken>>.Clear();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,Newtonsoft.Json.Linq.JToken>>.Contains(KeyValuePair`2<string, JToken> item);
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,Newtonsoft.Json.Linq.JToken>>.CopyTo(KeyValuePair`2[] array, int arrayIndex);
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,Newtonsoft.Json.Linq.JToken>>.get_IsReadOnly();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,Newtonsoft.Json.Linq.JToken>>.Remove(KeyValuePair`2<string, JToken> item);
    internal virtual int GetDeepHashCode();
    [IteratorStateMachineAttribute("Newtonsoft.Json.Linq.JObject/<GetEnumerator>d__63")]
public sealed virtual IEnumerator`1<KeyValuePair`2<string, JToken>> GetEnumerator();
    protected virtual void OnPropertyChanged(string propertyName);
    protected virtual void OnPropertyChanging(string propertyName);
    private sealed virtual override PropertyDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetProperties();
    private sealed virtual override PropertyDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetProperties(Attribute[] attributes);
    private sealed virtual override AttributeCollection System.ComponentModel.ICustomTypeDescriptor.GetAttributes();
    [NullableContextAttribute("2")]
private sealed virtual override string System.ComponentModel.ICustomTypeDescriptor.GetClassName();
    [NullableContextAttribute("2")]
private sealed virtual override string System.ComponentModel.ICustomTypeDescriptor.GetComponentName();
    private sealed virtual override TypeConverter System.ComponentModel.ICustomTypeDescriptor.GetConverter();
    [NullableContextAttribute("2")]
private sealed virtual override EventDescriptor System.ComponentModel.ICustomTypeDescriptor.GetDefaultEvent();
    [NullableContextAttribute("2")]
private sealed virtual override PropertyDescriptor System.ComponentModel.ICustomTypeDescriptor.GetDefaultProperty();
    private sealed virtual override object System.ComponentModel.ICustomTypeDescriptor.GetEditor(Type editorBaseType);
    private sealed virtual override EventDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetEvents(Attribute[] attributes);
    private sealed virtual override EventDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetEvents();
    private sealed virtual override object System.ComponentModel.ICustomTypeDescriptor.GetPropertyOwner(PropertyDescriptor pd);
    protected virtual DynamicMetaObject GetMetaObject(Expression parameter);
    [AsyncStateMachineAttribute("Newtonsoft.Json.Linq.JObject/<<WriteToAsync>g__AwaitProperties|0_0>d")]
[CompilerGeneratedAttribute]
private Task <WriteToAsync>g__AwaitProperties|0_0(Task task, int i, JsonWriter Writer, CancellationToken CancellationToken, JsonConverter[] Converters);
}
[NullableAttribute("0")]
[NullableContextAttribute("1")]
internal class Newtonsoft.Json.Linq.JProperty : JContainer {
    private JPropertyList _content;
    private string _name;
    protected IList`1<JToken> ChildrenTokens { get; }
    public string Name { get; }
    public JToken Value { get; public set; }
    public JTokenType Type { get; }
    public JProperty(JProperty other);
    internal JProperty(string name);
    public JProperty(string name, Object[] content);
    public JProperty(string name, object content);
    public virtual Task WriteToAsync(JsonWriter writer, CancellationToken cancellationToken, JsonConverter[] converters);
    [AsyncStateMachineAttribute("Newtonsoft.Json.Linq.JProperty/<WriteToAsync>d__1")]
private Task WriteToAsync(Task task, JsonWriter writer, CancellationToken cancellationToken, JsonConverter[] converters);
    private Task WriteValueAsync(JsonWriter writer, CancellationToken cancellationToken, JsonConverter[] converters);
    public static Task`1<JProperty> LoadAsync(JsonReader reader, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.Linq.JProperty/<LoadAsync>d__4")]
public static Task`1<JProperty> LoadAsync(JsonReader reader, JsonLoadSettings settings, CancellationToken cancellationToken);
    protected virtual IList`1<JToken> get_ChildrenTokens();
    [DebuggerStepThroughAttribute]
public string get_Name();
    [DebuggerStepThroughAttribute]
public JToken get_Value();
    public void set_Value(JToken value);
    internal virtual JToken GetItem(int index);
    [NullableContextAttribute("2")]
internal virtual void SetItem(int index, JToken item);
    [NullableContextAttribute("2")]
internal virtual bool RemoveItem(JToken item);
    internal virtual void RemoveItemAt(int index);
    [NullableContextAttribute("2")]
internal virtual int IndexOfItem(JToken item);
    [NullableContextAttribute("2")]
internal virtual bool InsertItem(int index, JToken item, bool skipParentCheck);
    [NullableContextAttribute("2")]
internal virtual bool ContainsItem(JToken item);
    internal virtual void MergeItem(object content, JsonMergeSettings settings);
    internal virtual void ClearItems();
    internal virtual bool DeepEquals(JToken node);
    internal virtual JToken CloneToken();
    [DebuggerStepThroughAttribute]
public virtual JTokenType get_Type();
    public virtual void WriteTo(JsonWriter writer, JsonConverter[] converters);
    internal virtual int GetDeepHashCode();
    public static JProperty Load(JsonReader reader);
    public static JProperty Load(JsonReader reader, JsonLoadSettings settings);
}
[NullableAttribute("0")]
[NullableContextAttribute("1")]
internal class Newtonsoft.Json.Linq.JPropertyDescriptor : PropertyDescriptor {
    public Type ComponentType { get; }
    public bool IsReadOnly { get; }
    public Type PropertyType { get; }
    protected int NameHashCode { get; }
    public JPropertyDescriptor(string name);
    private static JObject CastInstance(object instance);
    public virtual bool CanResetValue(object component);
    public virtual object GetValue(object component);
    public virtual void ResetValue(object component);
    public virtual void SetValue(object component, object value);
    public virtual bool ShouldSerializeValue(object component);
    public virtual Type get_ComponentType();
    public virtual bool get_IsReadOnly();
    public virtual Type get_PropertyType();
    protected virtual int get_NameHashCode();
}
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableContextAttribute("1")]
[DefaultMemberAttribute("Item")]
internal class Newtonsoft.Json.Linq.JPropertyKeyedCollection : Collection`1<JToken> {
    private static IEqualityComparer`1<string> Comparer;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<string, JToken> _dictionary;
    public JToken Item { get; }
    public ICollection`1<string> Keys { get; }
    public ICollection`1<JToken> Values { get; }
    private static JPropertyKeyedCollection();
    private void AddKey(string key, JToken item);
    protected void ChangeItemKey(JToken item, string newKey);
    protected virtual void ClearItems();
    public bool Contains(string key);
    private bool ContainsItem(JToken item);
    private void EnsureDictionary();
    private string GetKeyForItem(JToken item);
    protected virtual void InsertItem(int index, JToken item);
    public bool Remove(string key);
    protected virtual void RemoveItem(int index);
    private void RemoveKey(string key);
    protected virtual void SetItem(int index, JToken item);
    public JToken get_Item(string key);
    public bool TryGetValue(string key, JToken& value);
    public ICollection`1<string> get_Keys();
    public ICollection`1<JToken> get_Values();
    public int IndexOfReference(JToken t);
    public bool Compare(JPropertyKeyedCollection other);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Newtonsoft.Json.Linq.JRaw : JValue {
    public JRaw(JRaw other);
    [NullableContextAttribute("2")]
public JRaw(object rawJson);
    [AsyncStateMachineAttribute("Newtonsoft.Json.Linq.JRaw/<CreateAsync>d__0")]
public static Task`1<JRaw> CreateAsync(JsonReader reader, CancellationToken cancellationToken);
    public static JRaw Create(JsonReader reader);
    internal virtual JToken CloneToken();
}
internal class Newtonsoft.Json.Linq.JsonLoadSettings : object {
    private CommentHandling _commentHandling;
    private LineInfoHandling _lineInfoHandling;
    private DuplicatePropertyNameHandling _duplicatePropertyNameHandling;
    public CommentHandling CommentHandling { get; public set; }
    public LineInfoHandling LineInfoHandling { get; public set; }
    public DuplicatePropertyNameHandling DuplicatePropertyNameHandling { get; public set; }
    public CommentHandling get_CommentHandling();
    public void set_CommentHandling(CommentHandling value);
    public LineInfoHandling get_LineInfoHandling();
    public void set_LineInfoHandling(LineInfoHandling value);
    public DuplicatePropertyNameHandling get_DuplicatePropertyNameHandling();
    public void set_DuplicatePropertyNameHandling(DuplicatePropertyNameHandling value);
}
internal class Newtonsoft.Json.Linq.JsonMergeSettings : object {
    private MergeArrayHandling _mergeArrayHandling;
    private MergeNullValueHandling _mergeNullValueHandling;
    private StringComparison _propertyNameComparison;
    public MergeArrayHandling MergeArrayHandling { get; public set; }
    public MergeNullValueHandling MergeNullValueHandling { get; public set; }
    public StringComparison PropertyNameComparison { get; public set; }
    public MergeArrayHandling get_MergeArrayHandling();
    public void set_MergeArrayHandling(MergeArrayHandling value);
    public MergeNullValueHandling get_MergeNullValueHandling();
    public void set_MergeNullValueHandling(MergeNullValueHandling value);
    public StringComparison get_PropertyNameComparison();
    public void set_PropertyNameComparison(StringComparison value);
}
internal class Newtonsoft.Json.Linq.JsonPath.ArrayIndexFilter : PathFilter {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Index>k__BackingField;
    public Nullable`1<int> Index { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Index();
    [CompilerGeneratedAttribute]
public void set_Index(Nullable`1<int> value);
    [IteratorStateMachineAttribute("Newtonsoft.Json.Linq.JsonPath.ArrayIndexFilter/<ExecuteFilter>d__4")]
[NullableContextAttribute("1")]
public virtual IEnumerable`1<JToken> ExecuteFilter(JToken root, IEnumerable`1<JToken> current, JsonSelectSettings settings);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Newtonsoft.Json.Linq.JsonPath.ArrayMultipleIndexFilter : PathFilter {
    internal List`1<int> Indexes;
    public ArrayMultipleIndexFilter(List`1<int> indexes);
    [IteratorStateMachineAttribute("Newtonsoft.Json.Linq.JsonPath.ArrayMultipleIndexFilter/<ExecuteFilter>d__2")]
public virtual IEnumerable`1<JToken> ExecuteFilter(JToken root, IEnumerable`1<JToken> current, JsonSelectSettings settings);
}
internal class Newtonsoft.Json.Linq.JsonPath.ArraySliceFilter : PathFilter {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Start>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <End>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Step>k__BackingField;
    public Nullable`1<int> Start { get; public set; }
    public Nullable`1<int> End { get; public set; }
    public Nullable`1<int> Step { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Start();
    [CompilerGeneratedAttribute]
public void set_Start(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_End();
    [CompilerGeneratedAttribute]
public void set_End(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Step();
    [CompilerGeneratedAttribute]
public void set_Step(Nullable`1<int> value);
    [NullableContextAttribute("1")]
[IteratorStateMachineAttribute("Newtonsoft.Json.Linq.JsonPath.ArraySliceFilter/<ExecuteFilter>d__12")]
public virtual IEnumerable`1<JToken> ExecuteFilter(JToken root, IEnumerable`1<JToken> current, JsonSelectSettings settings);
    private bool IsValid(int index, int stopIndex, bool positiveStep);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Newtonsoft.Json.Linq.JsonPath.BooleanQueryExpression : QueryExpression {
    public object Left;
    [NullableAttribute("2")]
public object Right;
    public BooleanQueryExpression(QueryOperator operator, object left, object right);
    private IEnumerable`1<JToken> GetResult(JToken root, JToken t, object o);
    public virtual bool IsMatch(JToken root, JToken t, JsonSelectSettings settings);
    private bool MatchTokens(JToken leftResult, JToken rightResult, JsonSelectSettings settings);
    private static bool RegexEquals(JValue input, JValue pattern, JsonSelectSettings settings);
    internal static bool EqualsWithStringCoercion(JValue value, JValue queryValue);
    internal static bool EqualsWithStrictMatch(JValue value, JValue queryValue);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Newtonsoft.Json.Linq.JsonPath.CompositeExpression : QueryExpression {
    [CompilerGeneratedAttribute]
private List`1<QueryExpression> <Expressions>k__BackingField;
    public List`1<QueryExpression> Expressions { get; public set; }
    public CompositeExpression(QueryOperator operator);
    [CompilerGeneratedAttribute]
public List`1<QueryExpression> get_Expressions();
    [CompilerGeneratedAttribute]
public void set_Expressions(List`1<QueryExpression> value);
    public virtual bool IsMatch(JToken root, JToken t, JsonSelectSettings settings);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Newtonsoft.Json.Linq.JsonPath.FieldFilter : PathFilter {
    internal string Name;
    public FieldFilter(string name);
    [NullableContextAttribute("1")]
[IteratorStateMachineAttribute("Newtonsoft.Json.Linq.JsonPath.FieldFilter/<ExecuteFilter>d__2")]
public virtual IEnumerable`1<JToken> ExecuteFilter(JToken root, IEnumerable`1<JToken> current, JsonSelectSettings settings);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Newtonsoft.Json.Linq.JsonPath.FieldMultipleFilter : PathFilter {
    internal List`1<string> Names;
    public FieldMultipleFilter(List`1<string> names);
    [IteratorStateMachineAttribute("Newtonsoft.Json.Linq.JsonPath.FieldMultipleFilter/<ExecuteFilter>d__2")]
public virtual IEnumerable`1<JToken> ExecuteFilter(JToken root, IEnumerable`1<JToken> current, JsonSelectSettings settings);
}
[NullableAttribute("0")]
[NullableContextAttribute("1")]
internal class Newtonsoft.Json.Linq.JsonPath.JPath : object {
    private static Char[] FloatCharacters;
    private string _expression;
    [CompilerGeneratedAttribute]
private List`1<PathFilter> <Filters>k__BackingField;
    private int _currentIndex;
    public List`1<PathFilter> Filters { get; }
    public JPath(string expression);
    private static JPath();
    [CompilerGeneratedAttribute]
public List`1<PathFilter> get_Filters();
    private void ParseMain();
    private bool ParsePath(List`1<PathFilter> filters, int currentPartStartIndex, bool query);
    private static PathFilter CreatePathFilter(string member, bool scan);
    private PathFilter ParseIndexer(char indexerOpenChar, bool scan);
    private PathFilter ParseArrayIndexer(char indexerCloseChar);
    private void EatWhitespace();
    private PathFilter ParseQuery(char indexerCloseChar, bool scan);
    private bool TryParseExpression(List`1& expressionPath);
    private JsonException CreateUnexpectedCharacterException();
    private object ParseSide();
    private QueryExpression ParseExpression();
    [NullableContextAttribute("2")]
private bool TryParseValue(Object& value);
    private string ReadQuotedString();
    private string ReadRegexString();
    private bool Match(string s);
    private QueryOperator ParseOperator();
    private PathFilter ParseQuotedField(char indexerCloseChar, bool scan);
    private void EnsureLength(string message);
    internal IEnumerable`1<JToken> Evaluate(JToken root, JToken t, JsonSelectSettings settings);
    internal static IEnumerable`1<JToken> Evaluate(List`1<PathFilter> filters, JToken root, JToken t, JsonSelectSettings settings);
}
[NullableAttribute("0")]
[NullableContextAttribute("2")]
internal abstract class Newtonsoft.Json.Linq.JsonPath.PathFilter : object {
    [NullableContextAttribute("1")]
public abstract virtual IEnumerable`1<JToken> ExecuteFilter(JToken root, IEnumerable`1<JToken> current, JsonSelectSettings settings);
    protected static JToken GetTokenIndex(JToken t, JsonSelectSettings settings, int index);
    protected static JToken GetNextScanValue(JToken originalParent, JToken container, JToken value);
}
[NullableAttribute("0")]
[NullableContextAttribute("1")]
internal abstract class Newtonsoft.Json.Linq.JsonPath.QueryExpression : object {
    internal QueryOperator Operator;
    public QueryExpression(QueryOperator operator);
    public bool IsMatch(JToken root, JToken t);
    public abstract virtual bool IsMatch(JToken root, JToken t, JsonSelectSettings settings);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Newtonsoft.Json.Linq.JsonPath.QueryFilter : PathFilter {
    internal QueryExpression Expression;
    public QueryFilter(QueryExpression expression);
    [IteratorStateMachineAttribute("Newtonsoft.Json.Linq.JsonPath.QueryFilter/<ExecuteFilter>d__2")]
public virtual IEnumerable`1<JToken> ExecuteFilter(JToken root, IEnumerable`1<JToken> current, JsonSelectSettings settings);
}
internal enum Newtonsoft.Json.Linq.JsonPath.QueryOperator : Enum {
    public int value__;
    public static QueryOperator None;
    public static QueryOperator Equals;
    public static QueryOperator NotEquals;
    public static QueryOperator Exists;
    public static QueryOperator LessThan;
    public static QueryOperator LessThanOrEquals;
    public static QueryOperator GreaterThan;
    public static QueryOperator GreaterThanOrEquals;
    public static QueryOperator And;
    public static QueryOperator Or;
    public static QueryOperator RegexEquals;
    public static QueryOperator StrictEquals;
    public static QueryOperator StrictNotEquals;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Newtonsoft.Json.Linq.JsonPath.QueryScanFilter : PathFilter {
    internal QueryExpression Expression;
    public QueryScanFilter(QueryExpression expression);
    [IteratorStateMachineAttribute("Newtonsoft.Json.Linq.JsonPath.QueryScanFilter/<ExecuteFilter>d__2")]
public virtual IEnumerable`1<JToken> ExecuteFilter(JToken root, IEnumerable`1<JToken> current, JsonSelectSettings settings);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Newtonsoft.Json.Linq.JsonPath.RootFilter : PathFilter {
    public static RootFilter Instance;
    private static RootFilter();
    public virtual IEnumerable`1<JToken> ExecuteFilter(JToken root, IEnumerable`1<JToken> current, JsonSelectSettings settings);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Newtonsoft.Json.Linq.JsonPath.ScanFilter : PathFilter {
    internal string Name;
    public ScanFilter(string name);
    [IteratorStateMachineAttribute("Newtonsoft.Json.Linq.JsonPath.ScanFilter/<ExecuteFilter>d__2")]
[NullableContextAttribute("1")]
public virtual IEnumerable`1<JToken> ExecuteFilter(JToken root, IEnumerable`1<JToken> current, JsonSelectSettings settings);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Newtonsoft.Json.Linq.JsonPath.ScanMultipleFilter : PathFilter {
    private List`1<string> _names;
    public ScanMultipleFilter(List`1<string> names);
    [IteratorStateMachineAttribute("Newtonsoft.Json.Linq.JsonPath.ScanMultipleFilter/<ExecuteFilter>d__2")]
public virtual IEnumerable`1<JToken> ExecuteFilter(JToken root, IEnumerable`1<JToken> current, JsonSelectSettings settings);
}
internal class Newtonsoft.Json.Linq.JsonSelectSettings : object {
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <RegexMatchTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ErrorWhenNoMatch>k__BackingField;
    public Nullable`1<TimeSpan> RegexMatchTimeout { get; public set; }
    public bool ErrorWhenNoMatch { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_RegexMatchTimeout();
    [CompilerGeneratedAttribute]
public void set_RegexMatchTimeout(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public bool get_ErrorWhenNoMatch();
    [CompilerGeneratedAttribute]
public void set_ErrorWhenNoMatch(bool value);
}
[NullableContextAttribute("1")]
[DefaultMemberAttribute("Item")]
[NullableAttribute("0")]
internal abstract class Newtonsoft.Json.Linq.JToken : object {
    [NullableAttribute("2")]
private static JTokenEqualityComparer _equalityComparer;
    [NullableAttribute("2")]
private JContainer _parent;
    [NullableAttribute("2")]
private JToken _previous;
    [NullableAttribute("2")]
private JToken _next;
    [NullableAttribute("2")]
private object _annotations;
    private static JTokenType[] BooleanTypes;
    private static JTokenType[] NumberTypes;
    private static JTokenType[] BigIntegerTypes;
    private static JTokenType[] StringTypes;
    private static JTokenType[] GuidTypes;
    private static JTokenType[] TimeSpanTypes;
    private static JTokenType[] UriTypes;
    private static JTokenType[] CharTypes;
    private static JTokenType[] DateTimeTypes;
    private static JTokenType[] BytesTypes;
    public static JTokenEqualityComparer EqualityComparer { get; }
    [NullableAttribute("2")]
public JContainer Parent { get; internal set; }
    public JToken Root { get; }
    public JTokenType Type { get; }
    public bool HasValues { get; }
    [NullableAttribute("2")]
public JToken Next { get; internal set; }
    [NullableAttribute("2")]
public JToken Previous { get; internal set; }
    public string Path { get; }
    [NullableAttribute("2")]
public JToken Item { get; public set; }
    [NullableAttribute("2")]
public JToken First { get; }
    [NullableAttribute("2")]
public JToken Last { get; }
    private IJEnumerable`1<JToken> Newtonsoft.Json.Linq.IJEnumerable<Newtonsoft.Json.Linq.JToken>.Item { get; }
    private int Newtonsoft.Json.IJsonLineInfo.LineNumber { get; }
    private int Newtonsoft.Json.IJsonLineInfo.LinePosition { get; }
    private static JToken();
    public virtual Task WriteToAsync(JsonWriter writer, CancellationToken cancellationToken, JsonConverter[] converters);
    public Task WriteToAsync(JsonWriter writer, JsonConverter[] converters);
    public static Task`1<JToken> ReadFromAsync(JsonReader reader, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.Linq.JToken/<ReadFromAsync>d__3")]
public static Task`1<JToken> ReadFromAsync(JsonReader reader, JsonLoadSettings settings, CancellationToken cancellationToken);
    public static Task`1<JToken> LoadAsync(JsonReader reader, CancellationToken cancellationToken);
    public static Task`1<JToken> LoadAsync(JsonReader reader, JsonLoadSettings settings, CancellationToken cancellationToken);
    public static JTokenEqualityComparer get_EqualityComparer();
    [NullableContextAttribute("2")]
[DebuggerStepThroughAttribute]
public JContainer get_Parent();
    [NullableContextAttribute("2")]
internal void set_Parent(JContainer value);
    public JToken get_Root();
    internal abstract virtual JToken CloneToken();
    internal abstract virtual bool DeepEquals(JToken node);
    public abstract virtual JTokenType get_Type();
    public abstract virtual bool get_HasValues();
    [NullableContextAttribute("2")]
public static bool DeepEquals(JToken t1, JToken t2);
    [NullableContextAttribute("2")]
public JToken get_Next();
    [NullableContextAttribute("2")]
internal void set_Next(JToken value);
    [NullableContextAttribute("2")]
public JToken get_Previous();
    [NullableContextAttribute("2")]
internal void set_Previous(JToken value);
    public string get_Path();
    [NullableContextAttribute("2")]
public void AddAfterSelf(object content);
    [NullableContextAttribute("2")]
public void AddBeforeSelf(object content);
    public IEnumerable`1<JToken> Ancestors();
    public IEnumerable`1<JToken> AncestorsAndSelf();
    [IteratorStateMachineAttribute("Newtonsoft.Json.Linq.JToken/<GetAncestors>d__48")]
internal IEnumerable`1<JToken> GetAncestors(bool self);
    [IteratorStateMachineAttribute("Newtonsoft.Json.Linq.JToken/<AfterSelf>d__49")]
public IEnumerable`1<JToken> AfterSelf();
    [IteratorStateMachineAttribute("Newtonsoft.Json.Linq.JToken/<BeforeSelf>d__50")]
public IEnumerable`1<JToken> BeforeSelf();
    public virtual JToken get_Item(object key);
    public virtual void set_Item(object key, JToken value);
    [NullableContextAttribute("2")]
public virtual T Value(object key);
    [NullableContextAttribute("2")]
public virtual JToken get_First();
    [NullableContextAttribute("2")]
public virtual JToken get_Last();
    public virtual JEnumerable`1<JToken> Children();
    [NullableContextAttribute("0")]
public JEnumerable`1<T> Children();
    [NullableContextAttribute("2")]
public virtual IEnumerable`1<T> Values();
    public void Remove();
    public void Replace(JToken value);
    public abstract virtual void WriteTo(JsonWriter writer, JsonConverter[] converters);
    public virtual string ToString();
    public string ToString(Formatting formatting, JsonConverter[] converters);
    private static JValue EnsureValue(JToken value);
    private static string GetType(JToken token);
    private static bool ValidateToken(JToken o, JTokenType[] validTypes, bool nullable);
    public static bool op_Explicit(JToken value);
    public static DateTimeOffset op_Explicit(JToken value);
    [NullableContextAttribute("2")]
public static Nullable`1<bool> op_Explicit(JToken value);
    public static long op_Explicit(JToken value);
    [NullableContextAttribute("2")]
public static Nullable`1<DateTime> op_Explicit(JToken value);
    [NullableContextAttribute("2")]
public static Nullable`1<DateTimeOffset> op_Explicit(JToken value);
    [NullableContextAttribute("2")]
public static Nullable`1<decimal> op_Explicit(JToken value);
    [NullableContextAttribute("2")]
public static Nullable`1<double> op_Explicit(JToken value);
    [NullableContextAttribute("2")]
public static Nullable`1<char> op_Explicit(JToken value);
    public static int op_Explicit(JToken value);
    public static short op_Explicit(JToken value);
    [CLSCompliantAttribute("False")]
public static ushort op_Explicit(JToken value);
    [CLSCompliantAttribute("False")]
public static char op_Explicit(JToken value);
    public static byte op_Explicit(JToken value);
    [CLSCompliantAttribute("False")]
public static sbyte op_Explicit(JToken value);
    [NullableContextAttribute("2")]
public static Nullable`1<int> op_Explicit(JToken value);
    [NullableContextAttribute("2")]
public static Nullable`1<short> op_Explicit(JToken value);
    [NullableContextAttribute("2")]
[CLSCompliantAttribute("False")]
public static Nullable`1<ushort> op_Explicit(JToken value);
    [NullableContextAttribute("2")]
public static Nullable`1<byte> op_Explicit(JToken value);
    [CLSCompliantAttribute("False")]
[NullableContextAttribute("2")]
public static Nullable`1<sbyte> op_Explicit(JToken value);
    public static DateTime op_Explicit(JToken value);
    [NullableContextAttribute("2")]
public static Nullable`1<long> op_Explicit(JToken value);
    [NullableContextAttribute("2")]
public static Nullable`1<float> op_Explicit(JToken value);
    public static decimal op_Explicit(JToken value);
    [CLSCompliantAttribute("False")]
[NullableContextAttribute("2")]
public static Nullable`1<UInt32> op_Explicit(JToken value);
    [NullableContextAttribute("2")]
[CLSCompliantAttribute("False")]
public static Nullable`1<ulong> op_Explicit(JToken value);
    public static double op_Explicit(JToken value);
    public static float op_Explicit(JToken value);
    [NullableContextAttribute("2")]
public static string op_Explicit(JToken value);
    [CLSCompliantAttribute("False")]
public static UInt32 op_Explicit(JToken value);
    [CLSCompliantAttribute("False")]
public static ulong op_Explicit(JToken value);
    [NullableContextAttribute("2")]
public static Byte[] op_Explicit(JToken value);
    public static Guid op_Explicit(JToken value);
    [NullableContextAttribute("2")]
public static Nullable`1<Guid> op_Explicit(JToken value);
    public static TimeSpan op_Explicit(JToken value);
    [NullableContextAttribute("2")]
public static Nullable`1<TimeSpan> op_Explicit(JToken value);
    [NullableContextAttribute("2")]
public static Uri op_Explicit(JToken value);
    private static BigInteger ToBigInteger(JToken value);
    private static Nullable`1<BigInteger> ToBigIntegerNullable(JToken value);
    public static JToken op_Implicit(bool value);
    public static JToken op_Implicit(DateTimeOffset value);
    public static JToken op_Implicit(byte value);
    public static JToken op_Implicit(Nullable`1<byte> value);
    [CLSCompliantAttribute("False")]
public static JToken op_Implicit(sbyte value);
    [CLSCompliantAttribute("False")]
public static JToken op_Implicit(Nullable`1<sbyte> value);
    public static JToken op_Implicit(Nullable`1<bool> value);
    public static JToken op_Implicit(long value);
    public static JToken op_Implicit(Nullable`1<DateTime> value);
    public static JToken op_Implicit(Nullable`1<DateTimeOffset> value);
    public static JToken op_Implicit(Nullable`1<decimal> value);
    public static JToken op_Implicit(Nullable`1<double> value);
    [CLSCompliantAttribute("False")]
public static JToken op_Implicit(short value);
    [CLSCompliantAttribute("False")]
public static JToken op_Implicit(ushort value);
    public static JToken op_Implicit(int value);
    public static JToken op_Implicit(Nullable`1<int> value);
    public static JToken op_Implicit(DateTime value);
    public static JToken op_Implicit(Nullable`1<long> value);
    public static JToken op_Implicit(Nullable`1<float> value);
    public static JToken op_Implicit(decimal value);
    [CLSCompliantAttribute("False")]
public static JToken op_Implicit(Nullable`1<short> value);
    [CLSCompliantAttribute("False")]
public static JToken op_Implicit(Nullable`1<ushort> value);
    [CLSCompliantAttribute("False")]
public static JToken op_Implicit(Nullable`1<UInt32> value);
    [CLSCompliantAttribute("False")]
public static JToken op_Implicit(Nullable`1<ulong> value);
    public static JToken op_Implicit(double value);
    public static JToken op_Implicit(float value);
    public static JToken op_Implicit(string value);
    [CLSCompliantAttribute("False")]
public static JToken op_Implicit(UInt32 value);
    [CLSCompliantAttribute("False")]
public static JToken op_Implicit(ulong value);
    public static JToken op_Implicit(Byte[] value);
    public static JToken op_Implicit(Uri value);
    public static JToken op_Implicit(TimeSpan value);
    public static JToken op_Implicit(Nullable`1<TimeSpan> value);
    public static JToken op_Implicit(Guid value);
    public static JToken op_Implicit(Nullable`1<Guid> value);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override IEnumerator`1<JToken> System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>.GetEnumerator();
    internal abstract virtual int GetDeepHashCode();
    private sealed virtual override IJEnumerable`1<JToken> Newtonsoft.Json.Linq.IJEnumerable<Newtonsoft.Json.Linq.JToken>.get_Item(object key);
    public JsonReader CreateReader();
    internal static JToken FromObjectInternal(object o, JsonSerializer jsonSerializer);
    public static JToken FromObject(object o);
    public static JToken FromObject(object o, JsonSerializer jsonSerializer);
    [NullableContextAttribute("2")]
public T ToObject();
    public object ToObject(Type objectType);
    [NullableContextAttribute("2")]
public T ToObject(JsonSerializer jsonSerializer);
    public object ToObject(Type objectType, JsonSerializer jsonSerializer);
    public static JToken ReadFrom(JsonReader reader);
    public static JToken ReadFrom(JsonReader reader, JsonLoadSettings settings);
    public static JToken Parse(string json);
    public static JToken Parse(string json, JsonLoadSettings settings);
    public static JToken Load(JsonReader reader, JsonLoadSettings settings);
    public static JToken Load(JsonReader reader);
    [NullableContextAttribute("2")]
internal void SetLineInfo(IJsonLineInfo lineInfo, JsonLoadSettings settings);
    internal void SetLineInfo(int lineNumber, int linePosition);
    private sealed virtual override bool Newtonsoft.Json.IJsonLineInfo.HasLineInfo();
    private sealed virtual override int Newtonsoft.Json.IJsonLineInfo.get_LineNumber();
    private sealed virtual override int Newtonsoft.Json.IJsonLineInfo.get_LinePosition();
    public JToken SelectToken(string path);
    public JToken SelectToken(string path, bool errorWhenNoMatch);
    [NullableContextAttribute("2")]
public JToken SelectToken(string path, JsonSelectSettings settings);
    public IEnumerable`1<JToken> SelectTokens(string path);
    public IEnumerable`1<JToken> SelectTokens(string path, bool errorWhenNoMatch);
    public IEnumerable`1<JToken> SelectTokens(string path, JsonSelectSettings settings);
    protected virtual DynamicMetaObject GetMetaObject(Expression parameter);
    private sealed virtual override DynamicMetaObject System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(Expression parameter);
    private sealed virtual override object System.ICloneable.Clone();
    public JToken DeepClone();
    public void AddAnnotation(object annotation);
    public T Annotation();
    public object Annotation(Type type);
    [IteratorStateMachineAttribute("Newtonsoft.Json.Linq.JToken/<Annotations>d__184`1")]
public IEnumerable`1<T> Annotations();
    [IteratorStateMachineAttribute("Newtonsoft.Json.Linq.JToken/<Annotations>d__185")]
public IEnumerable`1<object> Annotations(Type type);
    public void RemoveAnnotations();
    public void RemoveAnnotations(Type type);
    internal void CopyAnnotations(JToken target, JToken source);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Newtonsoft.Json.Linq.JTokenEqualityComparer : object {
    public sealed virtual bool Equals(JToken x, JToken y);
    public sealed virtual int GetHashCode(JToken obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Newtonsoft.Json.Linq.JTokenReader : JsonReader {
    private JToken _root;
    [NullableAttribute("2")]
private string _initialPath;
    [NullableAttribute("2")]
private JToken _parent;
    [NullableAttribute("2")]
private JToken _current;
    [NullableAttribute("2")]
public JToken CurrentToken { get; }
    private int Newtonsoft.Json.IJsonLineInfo.LineNumber { get; }
    private int Newtonsoft.Json.IJsonLineInfo.LinePosition { get; }
    public string Path { get; }
    public JTokenReader(JToken token);
    public JTokenReader(JToken token, string initialPath);
    [NullableContextAttribute("2")]
public JToken get_CurrentToken();
    public virtual bool Read();
    private bool ReadOver(JToken t);
    private bool ReadToEnd();
    private Nullable`1<JsonToken> GetEndToken(JContainer c);
    private bool ReadInto(JContainer c);
    private bool SetEnd(JContainer c);
    private void SetToken(JToken token);
    [NullableContextAttribute("2")]
private string SafeToString(object value);
    private sealed virtual override bool Newtonsoft.Json.IJsonLineInfo.HasLineInfo();
    private sealed virtual override int Newtonsoft.Json.IJsonLineInfo.get_LineNumber();
    private sealed virtual override int Newtonsoft.Json.IJsonLineInfo.get_LinePosition();
    public virtual string get_Path();
}
internal enum Newtonsoft.Json.Linq.JTokenType : Enum {
    public int value__;
    public static JTokenType None;
    public static JTokenType Object;
    public static JTokenType Array;
    public static JTokenType Constructor;
    public static JTokenType Property;
    public static JTokenType Comment;
    public static JTokenType Integer;
    public static JTokenType Float;
    public static JTokenType String;
    public static JTokenType Boolean;
    public static JTokenType Null;
    public static JTokenType Undefined;
    public static JTokenType Date;
    public static JTokenType Raw;
    public static JTokenType Bytes;
    public static JTokenType Guid;
    public static JTokenType Uri;
    public static JTokenType TimeSpan;
}
[NullableAttribute("0")]
[NullableContextAttribute("2")]
internal class Newtonsoft.Json.Linq.JTokenWriter : JsonWriter {
    private JContainer _token;
    private JContainer _parent;
    private JValue _value;
    private JToken _current;
    public JToken CurrentToken { get; }
    public JToken Token { get; }
    [NullableContextAttribute("1")]
public JTokenWriter(JContainer container);
    [NullableContextAttribute("1")]
internal virtual Task WriteTokenAsync(JsonReader reader, bool writeChildren, bool writeDateConstructorAsDate, bool writeComments, CancellationToken cancellationToken);
    public JToken get_CurrentToken();
    public JToken get_Token();
    public virtual void Flush();
    public virtual void Close();
    public virtual void WriteStartObject();
    [NullableContextAttribute("1")]
private void AddParent(JContainer container);
    private void RemoveParent();
    public virtual void WriteStartArray();
    [NullableContextAttribute("1")]
public virtual void WriteStartConstructor(string name);
    protected virtual void WriteEnd(JsonToken token);
    [NullableContextAttribute("1")]
public virtual void WritePropertyName(string name);
    private void AddValue(object value, JsonToken token);
    internal void AddValue(JValue value, JsonToken token);
    public virtual void WriteValue(object value);
    public virtual void WriteNull();
    public virtual void WriteUndefined();
    public virtual void WriteRaw(string json);
    public virtual void WriteComment(string text);
    public virtual void WriteValue(string value);
    public virtual void WriteValue(int value);
    [CLSCompliantAttribute("False")]
public virtual void WriteValue(UInt32 value);
    public virtual void WriteValue(long value);
    [CLSCompliantAttribute("False")]
public virtual void WriteValue(ulong value);
    public virtual void WriteValue(float value);
    public virtual void WriteValue(double value);
    public virtual void WriteValue(bool value);
    public virtual void WriteValue(short value);
    [CLSCompliantAttribute("False")]
public virtual void WriteValue(ushort value);
    public virtual void WriteValue(char value);
    public virtual void WriteValue(byte value);
    [CLSCompliantAttribute("False")]
public virtual void WriteValue(sbyte value);
    public virtual void WriteValue(decimal value);
    public virtual void WriteValue(DateTime value);
    public virtual void WriteValue(DateTimeOffset value);
    public virtual void WriteValue(Byte[] value);
    public virtual void WriteValue(TimeSpan value);
    public virtual void WriteValue(Guid value);
    public virtual void WriteValue(Uri value);
    [NullableContextAttribute("1")]
internal virtual void WriteToken(JsonReader reader, bool writeChildren, bool writeDateConstructorAsDate, bool writeComments);
}
[NullableAttribute("0")]
[NullableContextAttribute("1")]
internal class Newtonsoft.Json.Linq.JValue : JToken {
    private JTokenType _valueType;
    [NullableAttribute("2")]
private object _value;
    public bool HasValues { get; }
    public JTokenType Type { get; }
    [NullableAttribute("2")]
public object Value { get; public set; }
    [NullableContextAttribute("2")]
internal JValue(object value, JTokenType type);
    public JValue(JValue other);
    public JValue(long value);
    public JValue(decimal value);
    public JValue(char value);
    [CLSCompliantAttribute("False")]
public JValue(ulong value);
    public JValue(double value);
    public JValue(float value);
    public JValue(DateTime value);
    public JValue(DateTimeOffset value);
    public JValue(bool value);
    [NullableContextAttribute("2")]
public JValue(string value);
    public JValue(Guid value);
    [NullableContextAttribute("2")]
public JValue(Uri value);
    public JValue(TimeSpan value);
    [NullableContextAttribute("2")]
public JValue(object value);
    public virtual Task WriteToAsync(JsonWriter writer, CancellationToken cancellationToken, JsonConverter[] converters);
    internal virtual bool DeepEquals(JToken node);
    public virtual bool get_HasValues();
    private static int CompareBigInteger(BigInteger i1, object i2);
    [NullableContextAttribute("2")]
internal static int Compare(JTokenType valueType, object objA, object objB);
    private static int CompareFloat(object objA, object objB);
    [NullableContextAttribute("2")]
private static bool Operation(ExpressionType operation, object objA, object objB, Object& result);
    internal virtual JToken CloneToken();
    public static JValue CreateComment(string value);
    public static JValue CreateString(string value);
    public static JValue CreateNull();
    public static JValue CreateUndefined();
    [NullableContextAttribute("2")]
private static JTokenType GetValueType(Nullable`1<JTokenType> current, object value);
    private static JTokenType GetStringValueType(Nullable`1<JTokenType> current);
    public virtual JTokenType get_Type();
    [NullableContextAttribute("2")]
public object get_Value();
    [NullableContextAttribute("2")]
public void set_Value(object value);
    public virtual void WriteTo(JsonWriter writer, JsonConverter[] converters);
    internal virtual int GetDeepHashCode();
    private static bool ValuesEquals(JValue v1, JValue v2);
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(JValue other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public string ToString(string format);
    public sealed virtual string ToString(IFormatProvider formatProvider);
    public sealed virtual string ToString(string format, IFormatProvider formatProvider);
    protected virtual DynamicMetaObject GetMetaObject(Expression parameter);
    private sealed virtual override int System.IComparable.CompareTo(object obj);
    public sealed virtual int CompareTo(JValue obj);
    private sealed virtual override TypeCode System.IConvertible.GetTypeCode();
    private sealed virtual override bool System.IConvertible.ToBoolean(IFormatProvider provider);
    private sealed virtual override char System.IConvertible.ToChar(IFormatProvider provider);
    private sealed virtual override sbyte System.IConvertible.ToSByte(IFormatProvider provider);
    private sealed virtual override byte System.IConvertible.ToByte(IFormatProvider provider);
    private sealed virtual override short System.IConvertible.ToInt16(IFormatProvider provider);
    private sealed virtual override ushort System.IConvertible.ToUInt16(IFormatProvider provider);
    private sealed virtual override int System.IConvertible.ToInt32(IFormatProvider provider);
    private sealed virtual override UInt32 System.IConvertible.ToUInt32(IFormatProvider provider);
    private sealed virtual override long System.IConvertible.ToInt64(IFormatProvider provider);
    private sealed virtual override ulong System.IConvertible.ToUInt64(IFormatProvider provider);
    private sealed virtual override float System.IConvertible.ToSingle(IFormatProvider provider);
    private sealed virtual override double System.IConvertible.ToDouble(IFormatProvider provider);
    private sealed virtual override decimal System.IConvertible.ToDecimal(IFormatProvider provider);
    private sealed virtual override DateTime System.IConvertible.ToDateTime(IFormatProvider provider);
    private sealed virtual override object System.IConvertible.ToType(Type conversionType, IFormatProvider provider);
}
internal enum Newtonsoft.Json.Linq.LineInfoHandling : Enum {
    public int value__;
    public static LineInfoHandling Ignore;
    public static LineInfoHandling Load;
}
internal enum Newtonsoft.Json.Linq.MergeArrayHandling : Enum {
    public int value__;
    public static MergeArrayHandling Concat;
    public static MergeArrayHandling Union;
    public static MergeArrayHandling Replace;
    public static MergeArrayHandling Merge;
}
[FlagsAttribute]
internal enum Newtonsoft.Json.Linq.MergeNullValueHandling : Enum {
    public int value__;
    public static MergeNullValueHandling Ignore;
    public static MergeNullValueHandling Merge;
}
internal enum Newtonsoft.Json.MemberSerialization : Enum {
    public int value__;
    public static MemberSerialization OptOut;
    public static MemberSerialization OptIn;
    public static MemberSerialization Fields;
}
internal enum Newtonsoft.Json.MetadataPropertyHandling : Enum {
    public int value__;
    public static MetadataPropertyHandling Default;
    public static MetadataPropertyHandling ReadAhead;
    public static MetadataPropertyHandling Ignore;
}
internal enum Newtonsoft.Json.MissingMemberHandling : Enum {
    public int value__;
    public static MissingMemberHandling Ignore;
    public static MissingMemberHandling Error;
}
internal enum Newtonsoft.Json.NullValueHandling : Enum {
    public int value__;
    public static NullValueHandling Include;
    public static NullValueHandling Ignore;
}
internal enum Newtonsoft.Json.ObjectCreationHandling : Enum {
    public int value__;
    public static ObjectCreationHandling Auto;
    public static ObjectCreationHandling Reuse;
    public static ObjectCreationHandling Replace;
}
[FlagsAttribute]
internal enum Newtonsoft.Json.PreserveReferencesHandling : Enum {
    public int value__;
    public static PreserveReferencesHandling None;
    public static PreserveReferencesHandling Objects;
    public static PreserveReferencesHandling Arrays;
    public static PreserveReferencesHandling All;
}
internal enum Newtonsoft.Json.ReadType : Enum {
    public int value__;
    public static ReadType Read;
    public static ReadType ReadAsInt32;
    public static ReadType ReadAsInt64;
    public static ReadType ReadAsBytes;
    public static ReadType ReadAsString;
    public static ReadType ReadAsDecimal;
    public static ReadType ReadAsDateTime;
    public static ReadType ReadAsDateTimeOffset;
    public static ReadType ReadAsDouble;
    public static ReadType ReadAsBoolean;
}
internal enum Newtonsoft.Json.ReferenceLoopHandling : Enum {
    public int value__;
    public static ReferenceLoopHandling Error;
    public static ReferenceLoopHandling Ignore;
    public static ReferenceLoopHandling Serialize;
}
internal enum Newtonsoft.Json.Required : Enum {
    public int value__;
    public static Required Default;
    public static Required AllowNull;
    public static Required Always;
    public static Required DisallowNull;
}
[ObsoleteAttribute("JSON Schema validation has been moved to its own package. See https://www.newtonsoft.com/jsonschema for more details.")]
[ExtensionAttribute]
internal static class Newtonsoft.Json.Schema.Extensions : object {
    [ExtensionAttribute]
[ObsoleteAttribute("JSON Schema validation has been moved to its own package. See https://www.newtonsoft.com/jsonschema for more details.")]
public static bool IsValid(JToken source, JsonSchema schema);
    [ObsoleteAttribute("JSON Schema validation has been moved to its own package. See https://www.newtonsoft.com/jsonschema for more details.")]
[ExtensionAttribute]
public static bool IsValid(JToken source, JsonSchema schema, IList`1& errorMessages);
    [ObsoleteAttribute("JSON Schema validation has been moved to its own package. See https://www.newtonsoft.com/jsonschema for more details.")]
[ExtensionAttribute]
public static void Validate(JToken source, JsonSchema schema);
    [ExtensionAttribute]
[ObsoleteAttribute("JSON Schema validation has been moved to its own package. See https://www.newtonsoft.com/jsonschema for more details.")]
public static void Validate(JToken source, JsonSchema schema, ValidationEventHandler validationEventHandler);
}
[ObsoleteAttribute("JSON Schema validation has been moved to its own package. See https://www.newtonsoft.com/jsonschema for more details.")]
internal class Newtonsoft.Json.Schema.JsonSchema : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Required>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <ReadOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Hidden>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Transient>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<JsonSchemaType> <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Pattern>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MinimumLength>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaximumLength>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <DivisibleBy>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Minimum>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Maximum>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <ExclusiveMinimum>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <ExclusiveMaximum>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MinimumItems>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaximumItems>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<JsonSchema> <Items>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PositionalItemsValidation>k__BackingField;
    [CompilerGeneratedAttribute]
private JsonSchema <AdditionalItems>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowAdditionalItems>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UniqueItems>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, JsonSchema> <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private JsonSchema <AdditionalProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, JsonSchema> <PatternProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowAdditionalProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Requires>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<JToken> <Enum>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<JsonSchemaType> <Disallow>k__BackingField;
    [CompilerGeneratedAttribute]
private JToken <Default>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<JsonSchema> <Extends>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Format>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Location>k__BackingField;
    private string _internalId;
    [CompilerGeneratedAttribute]
private string <DeferredReference>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ReferencesResolved>k__BackingField;
    public string Id { get; public set; }
    public string Title { get; public set; }
    public Nullable`1<bool> Required { get; public set; }
    public Nullable`1<bool> ReadOnly { get; public set; }
    public Nullable`1<bool> Hidden { get; public set; }
    public Nullable`1<bool> Transient { get; public set; }
    public string Description { get; public set; }
    public Nullable`1<JsonSchemaType> Type { get; public set; }
    public string Pattern { get; public set; }
    public Nullable`1<int> MinimumLength { get; public set; }
    public Nullable`1<int> MaximumLength { get; public set; }
    public Nullable`1<double> DivisibleBy { get; public set; }
    public Nullable`1<double> Minimum { get; public set; }
    public Nullable`1<double> Maximum { get; public set; }
    public Nullable`1<bool> ExclusiveMinimum { get; public set; }
    public Nullable`1<bool> ExclusiveMaximum { get; public set; }
    public Nullable`1<int> MinimumItems { get; public set; }
    public Nullable`1<int> MaximumItems { get; public set; }
    public IList`1<JsonSchema> Items { get; public set; }
    public bool PositionalItemsValidation { get; public set; }
    public JsonSchema AdditionalItems { get; public set; }
    public bool AllowAdditionalItems { get; public set; }
    public bool UniqueItems { get; public set; }
    public IDictionary`2<string, JsonSchema> Properties { get; public set; }
    public JsonSchema AdditionalProperties { get; public set; }
    public IDictionary`2<string, JsonSchema> PatternProperties { get; public set; }
    public bool AllowAdditionalProperties { get; public set; }
    public string Requires { get; public set; }
    public IList`1<JToken> Enum { get; public set; }
    public Nullable`1<JsonSchemaType> Disallow { get; public set; }
    public JToken Default { get; public set; }
    public IList`1<JsonSchema> Extends { get; public set; }
    public string Format { get; public set; }
    internal string Location { get; internal set; }
    internal string InternalId { get; }
    internal string DeferredReference { get; internal set; }
    internal bool ReferencesResolved { get; internal set; }
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Required();
    [CompilerGeneratedAttribute]
public void set_Required(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_ReadOnly();
    [CompilerGeneratedAttribute]
public void set_ReadOnly(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Hidden();
    [CompilerGeneratedAttribute]
public void set_Hidden(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Transient();
    [CompilerGeneratedAttribute]
public void set_Transient(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<JsonSchemaType> get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(Nullable`1<JsonSchemaType> value);
    [CompilerGeneratedAttribute]
public string get_Pattern();
    [CompilerGeneratedAttribute]
public void set_Pattern(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MinimumLength();
    [CompilerGeneratedAttribute]
public void set_MinimumLength(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaximumLength();
    [CompilerGeneratedAttribute]
public void set_MaximumLength(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_DivisibleBy();
    [CompilerGeneratedAttribute]
public void set_DivisibleBy(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Minimum();
    [CompilerGeneratedAttribute]
public void set_Minimum(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Maximum();
    [CompilerGeneratedAttribute]
public void set_Maximum(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_ExclusiveMinimum();
    [CompilerGeneratedAttribute]
public void set_ExclusiveMinimum(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_ExclusiveMaximum();
    [CompilerGeneratedAttribute]
public void set_ExclusiveMaximum(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MinimumItems();
    [CompilerGeneratedAttribute]
public void set_MinimumItems(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaximumItems();
    [CompilerGeneratedAttribute]
public void set_MaximumItems(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public IList`1<JsonSchema> get_Items();
    [CompilerGeneratedAttribute]
public void set_Items(IList`1<JsonSchema> value);
    [CompilerGeneratedAttribute]
public bool get_PositionalItemsValidation();
    [CompilerGeneratedAttribute]
public void set_PositionalItemsValidation(bool value);
    [CompilerGeneratedAttribute]
public JsonSchema get_AdditionalItems();
    [CompilerGeneratedAttribute]
public void set_AdditionalItems(JsonSchema value);
    [CompilerGeneratedAttribute]
public bool get_AllowAdditionalItems();
    [CompilerGeneratedAttribute]
public void set_AllowAdditionalItems(bool value);
    [CompilerGeneratedAttribute]
public bool get_UniqueItems();
    [CompilerGeneratedAttribute]
public void set_UniqueItems(bool value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, JsonSchema> get_Properties();
    [CompilerGeneratedAttribute]
public void set_Properties(IDictionary`2<string, JsonSchema> value);
    [CompilerGeneratedAttribute]
public JsonSchema get_AdditionalProperties();
    [CompilerGeneratedAttribute]
public void set_AdditionalProperties(JsonSchema value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, JsonSchema> get_PatternProperties();
    [CompilerGeneratedAttribute]
public void set_PatternProperties(IDictionary`2<string, JsonSchema> value);
    [CompilerGeneratedAttribute]
public bool get_AllowAdditionalProperties();
    [CompilerGeneratedAttribute]
public void set_AllowAdditionalProperties(bool value);
    [CompilerGeneratedAttribute]
public string get_Requires();
    [CompilerGeneratedAttribute]
public void set_Requires(string value);
    [CompilerGeneratedAttribute]
public IList`1<JToken> get_Enum();
    [CompilerGeneratedAttribute]
public void set_Enum(IList`1<JToken> value);
    [CompilerGeneratedAttribute]
public Nullable`1<JsonSchemaType> get_Disallow();
    [CompilerGeneratedAttribute]
public void set_Disallow(Nullable`1<JsonSchemaType> value);
    [CompilerGeneratedAttribute]
public JToken get_Default();
    [CompilerGeneratedAttribute]
public void set_Default(JToken value);
    [CompilerGeneratedAttribute]
public IList`1<JsonSchema> get_Extends();
    [CompilerGeneratedAttribute]
public void set_Extends(IList`1<JsonSchema> value);
    [CompilerGeneratedAttribute]
public string get_Format();
    [CompilerGeneratedAttribute]
public void set_Format(string value);
    [CompilerGeneratedAttribute]
internal string get_Location();
    [CompilerGeneratedAttribute]
internal void set_Location(string value);
    internal string get_InternalId();
    [CompilerGeneratedAttribute]
internal string get_DeferredReference();
    [CompilerGeneratedAttribute]
internal void set_DeferredReference(string value);
    [CompilerGeneratedAttribute]
internal bool get_ReferencesResolved();
    [CompilerGeneratedAttribute]
internal void set_ReferencesResolved(bool value);
    public static JsonSchema Read(JsonReader reader);
    public static JsonSchema Read(JsonReader reader, JsonSchemaResolver resolver);
    public static JsonSchema Parse(string json);
    public static JsonSchema Parse(string json, JsonSchemaResolver resolver);
    public void WriteTo(JsonWriter writer);
    public void WriteTo(JsonWriter writer, JsonSchemaResolver resolver);
    public virtual string ToString();
}
[ObsoleteAttribute("JSON Schema validation has been moved to its own package. See https://www.newtonsoft.com/jsonschema for more details.")]
internal class Newtonsoft.Json.Schema.JsonSchemaBuilder : object {
    private IList`1<JsonSchema> _stack;
    private JsonSchemaResolver _resolver;
    private IDictionary`2<string, JsonSchema> _documentSchemas;
    private JsonSchema _currentSchema;
    private JObject _rootSchema;
    private JsonSchema CurrentSchema { get; }
    public JsonSchemaBuilder(JsonSchemaResolver resolver);
    private void Push(JsonSchema value);
    private JsonSchema Pop();
    private JsonSchema get_CurrentSchema();
    internal JsonSchema Read(JsonReader reader);
    private string UnescapeReference(string reference);
    private JsonSchema ResolveReferences(JsonSchema schema);
    private JsonSchema BuildSchema(JToken token);
    private void ProcessSchemaProperties(JObject schemaObject);
    private void ProcessExtends(JToken token);
    private void ProcessEnum(JToken token);
    private void ProcessAdditionalProperties(JToken token);
    private void ProcessAdditionalItems(JToken token);
    private IDictionary`2<string, JsonSchema> ProcessProperties(JToken token);
    private void ProcessItems(JToken token);
    private Nullable`1<JsonSchemaType> ProcessType(JToken token);
    internal static JsonSchemaType MapType(string type);
    internal static string MapType(JsonSchemaType type);
}
[ObsoleteAttribute("JSON Schema validation has been moved to its own package. See https://www.newtonsoft.com/jsonschema for more details.")]
internal static class Newtonsoft.Json.Schema.JsonSchemaConstants : object {
    public static string TypePropertyName;
    public static string PropertiesPropertyName;
    public static string ItemsPropertyName;
    public static string AdditionalItemsPropertyName;
    public static string RequiredPropertyName;
    public static string PatternPropertiesPropertyName;
    public static string AdditionalPropertiesPropertyName;
    public static string RequiresPropertyName;
    public static string MinimumPropertyName;
    public static string MaximumPropertyName;
    public static string ExclusiveMinimumPropertyName;
    public static string ExclusiveMaximumPropertyName;
    public static string MinimumItemsPropertyName;
    public static string MaximumItemsPropertyName;
    public static string PatternPropertyName;
    public static string MaximumLengthPropertyName;
    public static string MinimumLengthPropertyName;
    public static string EnumPropertyName;
    public static string ReadOnlyPropertyName;
    public static string TitlePropertyName;
    public static string DescriptionPropertyName;
    public static string FormatPropertyName;
    public static string DefaultPropertyName;
    public static string TransientPropertyName;
    public static string DivisibleByPropertyName;
    public static string HiddenPropertyName;
    public static string DisallowPropertyName;
    public static string ExtendsPropertyName;
    public static string IdPropertyName;
    public static string UniqueItemsPropertyName;
    public static string OptionValuePropertyName;
    public static string OptionLabelPropertyName;
    public static IDictionary`2<string, JsonSchemaType> JsonSchemaTypeMapping;
    private static JsonSchemaConstants();
}
[ObsoleteAttribute("JSON Schema validation has been moved to its own package. See https://www.newtonsoft.com/jsonschema for more details.")]
internal class Newtonsoft.Json.Schema.JsonSchemaException : JsonException {
    [CompilerGeneratedAttribute]
private int <LineNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LinePosition>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    public int LineNumber { get; }
    public int LinePosition { get; }
    public string Path { get; }
    public JsonSchemaException(string message);
    public JsonSchemaException(string message, Exception innerException);
    public JsonSchemaException(SerializationInfo info, StreamingContext context);
    internal JsonSchemaException(string message, Exception innerException, string path, int lineNumber, int linePosition);
    [CompilerGeneratedAttribute]
public int get_LineNumber();
    [CompilerGeneratedAttribute]
public int get_LinePosition();
    [CompilerGeneratedAttribute]
public string get_Path();
}
[ObsoleteAttribute("JSON Schema validation has been moved to its own package. See https://www.newtonsoft.com/jsonschema for more details.")]
internal class Newtonsoft.Json.Schema.JsonSchemaGenerator : object {
    [CompilerGeneratedAttribute]
private UndefinedSchemaIdHandling <UndefinedSchemaIdHandling>k__BackingField;
    private IContractResolver _contractResolver;
    private JsonSchemaResolver _resolver;
    private IList`1<TypeSchema> _stack;
    private JsonSchema _currentSchema;
    public UndefinedSchemaIdHandling UndefinedSchemaIdHandling { get; public set; }
    public IContractResolver ContractResolver { get; public set; }
    private JsonSchema CurrentSchema { get; }
    [CompilerGeneratedAttribute]
public UndefinedSchemaIdHandling get_UndefinedSchemaIdHandling();
    [CompilerGeneratedAttribute]
public void set_UndefinedSchemaIdHandling(UndefinedSchemaIdHandling value);
    public IContractResolver get_ContractResolver();
    public void set_ContractResolver(IContractResolver value);
    private JsonSchema get_CurrentSchema();
    private void Push(TypeSchema typeSchema);
    private TypeSchema Pop();
    public JsonSchema Generate(Type type);
    public JsonSchema Generate(Type type, JsonSchemaResolver resolver);
    public JsonSchema Generate(Type type, bool rootSchemaNullable);
    public JsonSchema Generate(Type type, JsonSchemaResolver resolver, bool rootSchemaNullable);
    private string GetTitle(Type type);
    private string GetDescription(Type type);
    private string GetTypeId(Type type, bool explicitOnly);
    private JsonSchema GenerateInternal(Type type, Required valueRequired, bool required);
    private JsonSchemaType AddNullType(JsonSchemaType type, Required valueRequired);
    private bool HasFlag(DefaultValueHandling value, DefaultValueHandling flag);
    private void GenerateObjectSchema(Type type, JsonObjectContract contract);
    private void GenerateISerializableContract(Type type, JsonISerializableContract contract);
    internal static bool HasFlag(Nullable`1<JsonSchemaType> value, JsonSchemaType flag);
    private JsonSchemaType GetJsonSchemaType(Type type, Required valueRequired);
}
[ObsoleteAttribute("JSON Schema validation has been moved to its own package. See https://www.newtonsoft.com/jsonschema for more details.")]
internal class Newtonsoft.Json.Schema.JsonSchemaModel : object {
    [CompilerGeneratedAttribute]
private bool <Required>k__BackingField;
    [CompilerGeneratedAttribute]
private JsonSchemaType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MinimumLength>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaximumLength>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <DivisibleBy>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Minimum>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Maximum>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ExclusiveMinimum>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ExclusiveMaximum>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MinimumItems>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaximumItems>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <Patterns>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<JsonSchemaModel> <Items>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, JsonSchemaModel> <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, JsonSchemaModel> <PatternProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private JsonSchemaModel <AdditionalProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private JsonSchemaModel <AdditionalItems>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PositionalItemsValidation>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowAdditionalProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowAdditionalItems>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UniqueItems>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<JToken> <Enum>k__BackingField;
    [CompilerGeneratedAttribute]
private JsonSchemaType <Disallow>k__BackingField;
    public bool Required { get; public set; }
    public JsonSchemaType Type { get; public set; }
    public Nullable`1<int> MinimumLength { get; public set; }
    public Nullable`1<int> MaximumLength { get; public set; }
    public Nullable`1<double> DivisibleBy { get; public set; }
    public Nullable`1<double> Minimum { get; public set; }
    public Nullable`1<double> Maximum { get; public set; }
    public bool ExclusiveMinimum { get; public set; }
    public bool ExclusiveMaximum { get; public set; }
    public Nullable`1<int> MinimumItems { get; public set; }
    public Nullable`1<int> MaximumItems { get; public set; }
    public IList`1<string> Patterns { get; public set; }
    public IList`1<JsonSchemaModel> Items { get; public set; }
    public IDictionary`2<string, JsonSchemaModel> Properties { get; public set; }
    public IDictionary`2<string, JsonSchemaModel> PatternProperties { get; public set; }
    public JsonSchemaModel AdditionalProperties { get; public set; }
    public JsonSchemaModel AdditionalItems { get; public set; }
    public bool PositionalItemsValidation { get; public set; }
    public bool AllowAdditionalProperties { get; public set; }
    public bool AllowAdditionalItems { get; public set; }
    public bool UniqueItems { get; public set; }
    public IList`1<JToken> Enum { get; public set; }
    public JsonSchemaType Disallow { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Required();
    [CompilerGeneratedAttribute]
public void set_Required(bool value);
    [CompilerGeneratedAttribute]
public JsonSchemaType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(JsonSchemaType value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MinimumLength();
    [CompilerGeneratedAttribute]
public void set_MinimumLength(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaximumLength();
    [CompilerGeneratedAttribute]
public void set_MaximumLength(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_DivisibleBy();
    [CompilerGeneratedAttribute]
public void set_DivisibleBy(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Minimum();
    [CompilerGeneratedAttribute]
public void set_Minimum(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Maximum();
    [CompilerGeneratedAttribute]
public void set_Maximum(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public bool get_ExclusiveMinimum();
    [CompilerGeneratedAttribute]
public void set_ExclusiveMinimum(bool value);
    [CompilerGeneratedAttribute]
public bool get_ExclusiveMaximum();
    [CompilerGeneratedAttribute]
public void set_ExclusiveMaximum(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MinimumItems();
    [CompilerGeneratedAttribute]
public void set_MinimumItems(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaximumItems();
    [CompilerGeneratedAttribute]
public void set_MaximumItems(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_Patterns();
    [CompilerGeneratedAttribute]
public void set_Patterns(IList`1<string> value);
    [CompilerGeneratedAttribute]
public IList`1<JsonSchemaModel> get_Items();
    [CompilerGeneratedAttribute]
public void set_Items(IList`1<JsonSchemaModel> value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, JsonSchemaModel> get_Properties();
    [CompilerGeneratedAttribute]
public void set_Properties(IDictionary`2<string, JsonSchemaModel> value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, JsonSchemaModel> get_PatternProperties();
    [CompilerGeneratedAttribute]
public void set_PatternProperties(IDictionary`2<string, JsonSchemaModel> value);
    [CompilerGeneratedAttribute]
public JsonSchemaModel get_AdditionalProperties();
    [CompilerGeneratedAttribute]
public void set_AdditionalProperties(JsonSchemaModel value);
    [CompilerGeneratedAttribute]
public JsonSchemaModel get_AdditionalItems();
    [CompilerGeneratedAttribute]
public void set_AdditionalItems(JsonSchemaModel value);
    [CompilerGeneratedAttribute]
public bool get_PositionalItemsValidation();
    [CompilerGeneratedAttribute]
public void set_PositionalItemsValidation(bool value);
    [CompilerGeneratedAttribute]
public bool get_AllowAdditionalProperties();
    [CompilerGeneratedAttribute]
public void set_AllowAdditionalProperties(bool value);
    [CompilerGeneratedAttribute]
public bool get_AllowAdditionalItems();
    [CompilerGeneratedAttribute]
public void set_AllowAdditionalItems(bool value);
    [CompilerGeneratedAttribute]
public bool get_UniqueItems();
    [CompilerGeneratedAttribute]
public void set_UniqueItems(bool value);
    [CompilerGeneratedAttribute]
public IList`1<JToken> get_Enum();
    [CompilerGeneratedAttribute]
public void set_Enum(IList`1<JToken> value);
    [CompilerGeneratedAttribute]
public JsonSchemaType get_Disallow();
    [CompilerGeneratedAttribute]
public void set_Disallow(JsonSchemaType value);
    public static JsonSchemaModel Create(IList`1<JsonSchema> schemata);
    private static void Combine(JsonSchemaModel model, JsonSchema schema);
}
[ObsoleteAttribute("JSON Schema validation has been moved to its own package. See https://www.newtonsoft.com/jsonschema for more details.")]
internal class Newtonsoft.Json.Schema.JsonSchemaModelBuilder : object {
    private JsonSchemaNodeCollection _nodes;
    private Dictionary`2<JsonSchemaNode, JsonSchemaModel> _nodeModels;
    private JsonSchemaNode _node;
    public JsonSchemaModel Build(JsonSchema schema);
    public JsonSchemaNode AddSchema(JsonSchemaNode existingNode, JsonSchema schema);
    public void AddProperties(IDictionary`2<string, JsonSchema> source, IDictionary`2<string, JsonSchemaNode> target);
    public void AddProperty(IDictionary`2<string, JsonSchemaNode> target, string propertyName, JsonSchema schema);
    public void AddItem(JsonSchemaNode parentNode, int index, JsonSchema schema);
    public void AddAdditionalProperties(JsonSchemaNode parentNode, JsonSchema schema);
    public void AddAdditionalItems(JsonSchemaNode parentNode, JsonSchema schema);
    private JsonSchemaModel BuildNodeModel(JsonSchemaNode node);
}
[ObsoleteAttribute("JSON Schema validation has been moved to its own package. See https://www.newtonsoft.com/jsonschema for more details.")]
internal class Newtonsoft.Json.Schema.JsonSchemaNode : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private ReadOnlyCollection`1<JsonSchema> <Schemas>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, JsonSchemaNode> <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, JsonSchemaNode> <PatternProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<JsonSchemaNode> <Items>k__BackingField;
    [CompilerGeneratedAttribute]
private JsonSchemaNode <AdditionalProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private JsonSchemaNode <AdditionalItems>k__BackingField;
    public string Id { get; }
    public ReadOnlyCollection`1<JsonSchema> Schemas { get; }
    public Dictionary`2<string, JsonSchemaNode> Properties { get; }
    public Dictionary`2<string, JsonSchemaNode> PatternProperties { get; }
    public List`1<JsonSchemaNode> Items { get; }
    public JsonSchemaNode AdditionalProperties { get; public set; }
    public JsonSchemaNode AdditionalItems { get; public set; }
    public JsonSchemaNode(JsonSchema schema);
    private JsonSchemaNode(JsonSchemaNode source, JsonSchema schema);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public ReadOnlyCollection`1<JsonSchema> get_Schemas();
    [CompilerGeneratedAttribute]
public Dictionary`2<string, JsonSchemaNode> get_Properties();
    [CompilerGeneratedAttribute]
public Dictionary`2<string, JsonSchemaNode> get_PatternProperties();
    [CompilerGeneratedAttribute]
public List`1<JsonSchemaNode> get_Items();
    [CompilerGeneratedAttribute]
public JsonSchemaNode get_AdditionalProperties();
    [CompilerGeneratedAttribute]
public void set_AdditionalProperties(JsonSchemaNode value);
    [CompilerGeneratedAttribute]
public JsonSchemaNode get_AdditionalItems();
    [CompilerGeneratedAttribute]
public void set_AdditionalItems(JsonSchemaNode value);
    public JsonSchemaNode Combine(JsonSchema schema);
    public static string GetId(IEnumerable`1<JsonSchema> schemata);
}
[ObsoleteAttribute("JSON Schema validation has been moved to its own package. See https://www.newtonsoft.com/jsonschema for more details.")]
internal class Newtonsoft.Json.Schema.JsonSchemaNodeCollection : KeyedCollection`2<string, JsonSchemaNode> {
    protected virtual string GetKeyForItem(JsonSchemaNode item);
}
[ObsoleteAttribute("JSON Schema validation has been moved to its own package. See https://www.newtonsoft.com/jsonschema for more details.")]
internal class Newtonsoft.Json.Schema.JsonSchemaResolver : object {
    [CompilerGeneratedAttribute]
private IList`1<JsonSchema> <LoadedSchemas>k__BackingField;
    public IList`1<JsonSchema> LoadedSchemas { get; protected set; }
    [CompilerGeneratedAttribute]
public IList`1<JsonSchema> get_LoadedSchemas();
    [CompilerGeneratedAttribute]
protected void set_LoadedSchemas(IList`1<JsonSchema> value);
    public virtual JsonSchema GetSchema(string reference);
}
[ObsoleteAttribute("JSON Schema validation has been moved to its own package. See https://www.newtonsoft.com/jsonschema for more details.")]
[FlagsAttribute]
internal enum Newtonsoft.Json.Schema.JsonSchemaType : Enum {
    public int value__;
    public static JsonSchemaType None;
    public static JsonSchemaType String;
    public static JsonSchemaType Float;
    public static JsonSchemaType Integer;
    public static JsonSchemaType Boolean;
    public static JsonSchemaType Object;
    public static JsonSchemaType Array;
    public static JsonSchemaType Null;
    public static JsonSchemaType Any;
}
[ObsoleteAttribute("JSON Schema validation has been moved to its own package. See https://www.newtonsoft.com/jsonschema for more details.")]
internal class Newtonsoft.Json.Schema.JsonSchemaWriter : object {
    private JsonWriter _writer;
    private JsonSchemaResolver _resolver;
    public JsonSchemaWriter(JsonWriter writer, JsonSchemaResolver resolver);
    private void ReferenceOrWriteSchema(JsonSchema schema);
    public void WriteSchema(JsonSchema schema);
    private void WriteSchemaDictionaryIfNotNull(JsonWriter writer, string propertyName, IDictionary`2<string, JsonSchema> properties);
    private void WriteItems(JsonSchema schema);
    private void WriteType(string propertyName, JsonWriter writer, JsonSchemaType type);
    private void WritePropertyIfNotNull(JsonWriter writer, string propertyName, object value);
}
[ObsoleteAttribute("JSON Schema validation has been moved to its own package. See https://www.newtonsoft.com/jsonschema for more details.")]
internal enum Newtonsoft.Json.Schema.UndefinedSchemaIdHandling : Enum {
    public int value__;
    public static UndefinedSchemaIdHandling None;
    public static UndefinedSchemaIdHandling UseTypeName;
    public static UndefinedSchemaIdHandling UseAssemblyQualifiedName;
}
[ObsoleteAttribute("JSON Schema validation has been moved to its own package. See https://www.newtonsoft.com/jsonschema for more details.")]
internal class Newtonsoft.Json.Schema.ValidationEventArgs : EventArgs {
    private JsonSchemaException _ex;
    public JsonSchemaException Exception { get; }
    public string Path { get; }
    public string Message { get; }
    internal ValidationEventArgs(JsonSchemaException ex);
    public JsonSchemaException get_Exception();
    public string get_Path();
    public string get_Message();
}
[ObsoleteAttribute("JSON Schema validation has been moved to its own package. See https://www.newtonsoft.com/jsonschema for more details.")]
internal class Newtonsoft.Json.Schema.ValidationEventHandler : MulticastDelegate {
    public ValidationEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ValidationEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ValidationEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal static class Newtonsoft.Json.Serialization.CachedAttributeGetter`1 : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static ThreadSafeStore`2<object, T> TypeAttributeCache;
    private static CachedAttributeGetter`1();
    [NullableContextAttribute("1")]
public static T GetAttribute(object type);
}
internal class Newtonsoft.Json.Serialization.CamelCaseNamingStrategy : NamingStrategy {
    public CamelCaseNamingStrategy(bool processDictionaryKeys, bool overrideSpecifiedNames);
    public CamelCaseNamingStrategy(bool processDictionaryKeys, bool overrideSpecifiedNames, bool processExtensionDataNames);
    [NullableContextAttribute("1")]
protected virtual string ResolvePropertyName(string name);
}
[NullableAttribute("0")]
[NullableContextAttribute("1")]
internal class Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver : DefaultContractResolver {
    private static object TypeContractCacheLock;
    private static DefaultJsonNameTable NameTable;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Dictionary`2<StructMultiKey`2<Type, Type>, JsonContract> _contractCache;
    private static CamelCasePropertyNamesContractResolver();
    public virtual JsonContract ResolveContract(Type type);
    internal virtual DefaultJsonNameTable GetNameTable();
}
[NullableAttribute("0")]
[NullableContextAttribute("1")]
internal class Newtonsoft.Json.Serialization.DefaultContractResolver : object {
    private static IContractResolver _instance;
    private static String[] BlacklistedTypeNames;
    private static JsonConverter[] BuiltInConverters;
    private DefaultJsonNameTable _nameTable;
    private ThreadSafeStore`2<Type, JsonContract> _contractCache;
    [CompilerGeneratedAttribute]
private BindingFlags <DefaultMembersSearchFlags>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SerializeCompilerGeneratedMembers>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreSerializableInterface>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreSerializableAttribute>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreIsSpecifiedMembers>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreShouldSerializeMembers>k__BackingField;
    [CompilerGeneratedAttribute]
[NullableAttribute("2")]
private NamingStrategy <NamingStrategy>k__BackingField;
    internal static IContractResolver Instance { get; }
    public bool DynamicCodeGeneration { get; }
    [ObsoleteAttribute("DefaultMembersSearchFlags is obsolete. To modify the members serialized inherit from DefaultContractResolver and override the GetSerializableMembers method instead.")]
public BindingFlags DefaultMembersSearchFlags { get; public set; }
    public bool SerializeCompilerGeneratedMembers { get; public set; }
    public bool IgnoreSerializableInterface { get; public set; }
    public bool IgnoreSerializableAttribute { get; public set; }
    public bool IgnoreIsSpecifiedMembers { get; public set; }
    public bool IgnoreShouldSerializeMembers { get; public set; }
    [NullableAttribute("2")]
public NamingStrategy NamingStrategy { get; public set; }
    private static DefaultContractResolver();
    internal static IContractResolver get_Instance();
    public bool get_DynamicCodeGeneration();
    [CompilerGeneratedAttribute]
public BindingFlags get_DefaultMembersSearchFlags();
    [CompilerGeneratedAttribute]
public void set_DefaultMembersSearchFlags(BindingFlags value);
    [CompilerGeneratedAttribute]
public bool get_SerializeCompilerGeneratedMembers();
    [CompilerGeneratedAttribute]
public void set_SerializeCompilerGeneratedMembers(bool value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreSerializableInterface();
    [CompilerGeneratedAttribute]
public void set_IgnoreSerializableInterface(bool value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreSerializableAttribute();
    [CompilerGeneratedAttribute]
public void set_IgnoreSerializableAttribute(bool value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreIsSpecifiedMembers();
    [CompilerGeneratedAttribute]
public void set_IgnoreIsSpecifiedMembers(bool value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreShouldSerializeMembers();
    [CompilerGeneratedAttribute]
public void set_IgnoreShouldSerializeMembers(bool value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public NamingStrategy get_NamingStrategy();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_NamingStrategy(NamingStrategy value);
    public virtual JsonContract ResolveContract(Type type);
    private static bool FilterMembers(MemberInfo member);
    protected virtual List`1<MemberInfo> GetSerializableMembers(Type objectType);
    private bool ShouldSerializeEntityMember(MemberInfo memberInfo);
    protected virtual JsonObjectContract CreateObjectContract(Type objectType);
    private static void ThrowUnableToSerializeError(object o, StreamingContext context);
    private MemberInfo GetExtensionDataMemberForType(Type type);
    private static void SetExtensionDataDelegates(JsonObjectContract contract, MemberInfo member);
    private ConstructorInfo GetAttributeConstructor(Type objectType);
    private ConstructorInfo GetImmutableConstructor(Type objectType, JsonPropertyCollection memberProperties);
    private ConstructorInfo GetParameterizedConstructor(Type objectType);
    protected virtual IList`1<JsonProperty> CreateConstructorParameters(ConstructorInfo constructor, JsonPropertyCollection memberProperties);
    private JsonProperty MatchProperty(JsonPropertyCollection properties, string name, Type type);
    protected virtual JsonProperty CreatePropertyFromConstructorParameter(JsonProperty matchingMemberProperty, ParameterInfo parameterInfo);
    protected virtual JsonConverter ResolveContractConverter(Type objectType);
    private Func`1<object> GetDefaultCreator(Type createdType);
    private void InitializeContract(JsonContract contract);
    private void ResolveCallbackMethods(JsonContract contract, Type t);
    private void GetCallbackMethodsForType(Type type, List`1& onSerializing, List`1& onSerialized, List`1& onDeserializing, List`1& onDeserialized, List`1& onError);
    private static bool IsConcurrentOrObservableCollection(Type t);
    private static bool ShouldSkipDeserialized(Type t);
    private static bool ShouldSkipSerializing(Type t);
    private List`1<Type> GetClassHierarchyForType(Type type);
    protected virtual JsonDictionaryContract CreateDictionaryContract(Type objectType);
    protected virtual JsonArrayContract CreateArrayContract(Type objectType);
    protected virtual JsonPrimitiveContract CreatePrimitiveContract(Type objectType);
    protected virtual JsonLinqContract CreateLinqContract(Type objectType);
    protected virtual JsonISerializableContract CreateISerializableContract(Type objectType);
    protected virtual JsonDynamicContract CreateDynamicContract(Type objectType);
    protected virtual JsonStringContract CreateStringContract(Type objectType);
    protected virtual JsonContract CreateContract(Type objectType);
    internal static bool IsJsonPrimitiveType(Type t);
    internal static bool IsIConvertible(Type t);
    internal static bool CanConvertToString(Type type);
    private static bool IsValidCallback(MethodInfo method, ParameterInfo[] parameters, Type attributeType, MethodInfo currentCallback, Type& prevAttributeType);
    internal static string GetClrTypeFullName(Type type);
    protected virtual IList`1<JsonProperty> CreateProperties(Type type, MemberSerialization memberSerialization);
    internal virtual DefaultJsonNameTable GetNameTable();
    protected virtual IValueProvider CreateMemberValueProvider(MemberInfo member);
    protected virtual JsonProperty CreateProperty(MemberInfo member, MemberSerialization memberSerialization);
    private void SetPropertySettingsFromAttributes(JsonProperty property, object attributeProvider, string name, Type declaringType, MemberSerialization memberSerialization, Boolean& allowNonPublicAccess);
    private Predicate`1<object> CreateShouldSerializeTest(MemberInfo member);
    private void SetIsSpecifiedActions(JsonProperty property, MemberInfo member, bool allowNonPublicAccess);
    protected virtual string ResolvePropertyName(string propertyName);
    protected virtual string ResolveExtensionDataName(string extensionDataName);
    protected virtual string ResolveDictionaryKey(string dictionaryKey);
    public string GetResolvedPropertyName(string propertyName);
}
internal class Newtonsoft.Json.Serialization.DefaultNamingStrategy : NamingStrategy {
    [NullableContextAttribute("1")]
protected virtual string ResolvePropertyName(string name);
}
[NullableAttribute("0")]
[NullableContextAttribute("1")]
internal class Newtonsoft.Json.Serialization.DefaultReferenceResolver : object {
    private int _referenceCount;
    private BidirectionalDictionary`2<string, object> GetMappings(object context);
    public sealed virtual object ResolveReference(object context, string reference);
    public sealed virtual string GetReference(object context, object value);
    public sealed virtual void AddReference(object context, string reference, object value);
    public sealed virtual bool IsReferenced(object context, object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Newtonsoft.Json.Serialization.DefaultSerializationBinder : SerializationBinder {
    internal static DefaultSerializationBinder Instance;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ThreadSafeStore`2<StructMultiKey`2<string, string>, Type> _typeCache;
    private static DefaultSerializationBinder();
    private Type GetTypeFromTypeNameKey(StructMultiKey`2<string, string> typeNameKey);
    private Type GetGenericTypeFromTypeName(string typeName, Assembly assembly);
    private Type GetTypeByName(StructMultiKey`2<string, string> typeNameKey);
    public virtual Type BindToType(string assemblyName, string typeName);
    [NullableContextAttribute("2")]
public virtual void BindToName(Type serializedType, String& assemblyName, String& typeName);
}
internal class Newtonsoft.Json.Serialization.DiagnosticsTraceWriter : object {
    [CompilerGeneratedAttribute]
private TraceLevel <LevelFilter>k__BackingField;
    public TraceLevel LevelFilter { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual TraceLevel get_LevelFilter();
    [CompilerGeneratedAttribute]
public void set_LevelFilter(TraceLevel value);
    private TraceEventType GetTraceEventType(TraceLevel level);
    [NullableContextAttribute("1")]
public sealed virtual void Trace(TraceLevel level, string message, Exception ex);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Newtonsoft.Json.Serialization.DynamicValueProvider : object {
    private MemberInfo _memberInfo;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`2<object, object> _getter;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Action`2<object, object> _setter;
    public DynamicValueProvider(MemberInfo memberInfo);
    public sealed virtual void SetValue(object target, object value);
    public sealed virtual object GetValue(object target);
}
[NullableAttribute("0")]
[NullableContextAttribute("1")]
internal class Newtonsoft.Json.Serialization.ErrorContext : object {
    [CompilerGeneratedAttribute]
private bool <Traced>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <Error>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private object <OriginalObject>k__BackingField;
    [CompilerGeneratedAttribute]
[NullableAttribute("2")]
private object <Member>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Handled>k__BackingField;
    internal bool Traced { get; internal set; }
    public Exception Error { get; }
    [NullableAttribute("2")]
public object OriginalObject { get; }
    [NullableAttribute("2")]
public object Member { get; }
    public string Path { get; }
    public bool Handled { get; public set; }
    internal ErrorContext(object originalObject, object member, string path, Exception error);
    [CompilerGeneratedAttribute]
internal bool get_Traced();
    [CompilerGeneratedAttribute]
internal void set_Traced(bool value);
    [CompilerGeneratedAttribute]
public Exception get_Error();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public object get_OriginalObject();
    [CompilerGeneratedAttribute]
[NullableContextAttribute("2")]
public object get_Member();
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public bool get_Handled();
    [CompilerGeneratedAttribute]
public void set_Handled(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Newtonsoft.Json.Serialization.ErrorEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
[NullableAttribute("2")]
private object <CurrentObject>k__BackingField;
    [CompilerGeneratedAttribute]
private ErrorContext <ErrorContext>k__BackingField;
    [NullableAttribute("2")]
public object CurrentObject { get; }
    public ErrorContext ErrorContext { get; }
    public ErrorEventArgs(object currentObject, ErrorContext errorContext);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public object get_CurrentObject();
    [CompilerGeneratedAttribute]
public ErrorContext get_ErrorContext();
}
[NullableAttribute("0")]
[NullableContextAttribute("1")]
internal class Newtonsoft.Json.Serialization.ExpressionValueProvider : object {
    private MemberInfo _memberInfo;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`2<object, object> _getter;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Action`2<object, object> _setter;
    public ExpressionValueProvider(MemberInfo memberInfo);
    public sealed virtual void SetValue(object target, object value);
    public sealed virtual object GetValue(object target);
}
internal class Newtonsoft.Json.Serialization.ExtensionDataGetter : MulticastDelegate {
    public ExtensionDataGetter(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual IEnumerable`1<KeyValuePair`2<object, object>> Invoke(object o);
    public virtual IAsyncResult BeginInvoke(object o, AsyncCallback callback, object object);
    public virtual IEnumerable`1<KeyValuePair`2<object, object>> EndInvoke(IAsyncResult result);
}
internal class Newtonsoft.Json.Serialization.ExtensionDataSetter : MulticastDelegate {
    public ExtensionDataSetter(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object o, string key, object value);
    public virtual IAsyncResult BeginInvoke(object o, string key, object value, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
internal interface Newtonsoft.Json.Serialization.IAttributeProvider {
    public abstract virtual IList`1<Attribute> GetAttributes(bool inherit);
    public abstract virtual IList`1<Attribute> GetAttributes(Type attributeType, bool inherit);
}
[NullableContextAttribute("1")]
internal interface Newtonsoft.Json.Serialization.IContractResolver {
    public abstract virtual JsonContract ResolveContract(Type type);
}
[NullableContextAttribute("1")]
internal interface Newtonsoft.Json.Serialization.IReferenceResolver {
    public abstract virtual object ResolveReference(object context, string reference);
    public abstract virtual string GetReference(object context, object value);
    public abstract virtual bool IsReferenced(object context, object value);
    public abstract virtual void AddReference(object context, string reference, object value);
}
[NullableContextAttribute("1")]
internal interface Newtonsoft.Json.Serialization.ISerializationBinder {
    public abstract virtual Type BindToType(string assemblyName, string typeName);
    [NullableContextAttribute("2")]
public abstract virtual void BindToName(Type serializedType, String& assemblyName, String& typeName);
}
[NullableContextAttribute("1")]
internal interface Newtonsoft.Json.Serialization.ITraceWriter {
    public TraceLevel LevelFilter { get; }
    public abstract virtual TraceLevel get_LevelFilter();
    public abstract virtual void Trace(TraceLevel level, string message, Exception ex);
}
[NullableContextAttribute("1")]
internal interface Newtonsoft.Json.Serialization.IValueProvider {
    public abstract virtual void SetValue(object target, object value);
    public abstract virtual object GetValue(object target);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Newtonsoft.Json.Serialization.JsonArrayContract : JsonContainerContract {
    [CompilerGeneratedAttribute]
private Type <CollectionItemType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsMultidimensionalArray>k__BackingField;
    private Type _genericCollectionDefinitionType;
    private Type _genericWrapperType;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ObjectConstructor`1<object> _genericWrapperCreator;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`1<object> _genericTemporaryCollectionCreator;
    [CompilerGeneratedAttribute]
private bool <IsArray>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShouldCreateWrapper>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CanDeserialize>k__BackingField;
    private ConstructorInfo _parameterizedConstructor;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ObjectConstructor`1<object> _parameterizedCreator;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ObjectConstructor`1<object> _overrideCreator;
    [CompilerGeneratedAttribute]
private bool <HasParameterizedCreator>k__BackingField;
    public Type CollectionItemType { get; }
    public bool IsMultidimensionalArray { get; }
    internal bool IsArray { get; }
    internal bool ShouldCreateWrapper { get; }
    internal bool CanDeserialize { get; private set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal ObjectConstructor`1<object> ParameterizedCreator { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ObjectConstructor`1<object> OverrideCreator { get; public set; }
    public bool HasParameterizedCreator { get; public set; }
    internal bool HasParameterizedCreatorInternal { get; }
    [NullableContextAttribute("1")]
public JsonArrayContract(Type underlyingType);
    [CompilerGeneratedAttribute]
public Type get_CollectionItemType();
    [CompilerGeneratedAttribute]
public bool get_IsMultidimensionalArray();
    [CompilerGeneratedAttribute]
internal bool get_IsArray();
    [CompilerGeneratedAttribute]
internal bool get_ShouldCreateWrapper();
    [CompilerGeneratedAttribute]
internal bool get_CanDeserialize();
    [CompilerGeneratedAttribute]
private void set_CanDeserialize(bool value);
    internal ObjectConstructor`1<object> get_ParameterizedCreator();
    public ObjectConstructor`1<object> get_OverrideCreator();
    public void set_OverrideCreator(ObjectConstructor`1<object> value);
    [CompilerGeneratedAttribute]
public bool get_HasParameterizedCreator();
    [CompilerGeneratedAttribute]
public void set_HasParameterizedCreator(bool value);
    internal bool get_HasParameterizedCreatorInternal();
    [NullableContextAttribute("1")]
internal IWrappedCollection CreateWrapper(object list);
    [NullableContextAttribute("1")]
internal IList CreateTemporaryCollection();
    [NullableContextAttribute("1")]
private void StoreFSharpListCreatorIfNecessary(Type underlyingType);
}
[NullableAttribute("0")]
[NullableContextAttribute("2")]
internal class Newtonsoft.Json.Serialization.JsonContainerContract : JsonContract {
    private JsonContract _itemContract;
    private JsonContract _finalItemContract;
    [CompilerGeneratedAttribute]
private JsonConverter <ItemConverter>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <ItemIsReference>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ReferenceLoopHandling> <ItemReferenceLoopHandling>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TypeNameHandling> <ItemTypeNameHandling>k__BackingField;
    internal JsonContract ItemContract { get; internal set; }
    internal JsonContract FinalItemContract { get; }
    public JsonConverter ItemConverter { get; public set; }
    public Nullable`1<bool> ItemIsReference { get; public set; }
    public Nullable`1<ReferenceLoopHandling> ItemReferenceLoopHandling { get; public set; }
    public Nullable`1<TypeNameHandling> ItemTypeNameHandling { get; public set; }
    [NullableContextAttribute("1")]
internal JsonContainerContract(Type underlyingType);
    internal JsonContract get_ItemContract();
    internal void set_ItemContract(JsonContract value);
    internal JsonContract get_FinalItemContract();
    [CompilerGeneratedAttribute]
public JsonConverter get_ItemConverter();
    [CompilerGeneratedAttribute]
public void set_ItemConverter(JsonConverter value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_ItemIsReference();
    [CompilerGeneratedAttribute]
public void set_ItemIsReference(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<ReferenceLoopHandling> get_ItemReferenceLoopHandling();
    [CompilerGeneratedAttribute]
public void set_ItemReferenceLoopHandling(Nullable`1<ReferenceLoopHandling> value);
    [CompilerGeneratedAttribute]
public Nullable`1<TypeNameHandling> get_ItemTypeNameHandling();
    [CompilerGeneratedAttribute]
public void set_ItemTypeNameHandling(Nullable`1<TypeNameHandling> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class Newtonsoft.Json.Serialization.JsonContract : object {
    internal bool IsNullable;
    internal bool IsConvertable;
    internal bool IsEnum;
    internal Type NonNullableUnderlyingType;
    internal ReadType InternalReadType;
    internal JsonContractType ContractType;
    internal bool IsReadOnlyOrFixedSize;
    internal bool IsSealed;
    internal bool IsInstantiable;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<SerializationCallback> _onDeserializedCallbacks;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<SerializationCallback> _onDeserializingCallbacks;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<SerializationCallback> _onSerializedCallbacks;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<SerializationCallback> _onSerializingCallbacks;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<SerializationErrorCallback> _onErrorCallbacks;
    private Type _createdType;
    [CompilerGeneratedAttribute]
private Type <UnderlyingType>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsReference>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private JsonConverter <Converter>k__BackingField;
    [CompilerGeneratedAttribute]
[NullableAttribute("2")]
private JsonConverter <InternalConverter>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`1<object> <DefaultCreator>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DefaultCreatorNonPublic>k__BackingField;
    public Type UnderlyingType { get; }
    public Type CreatedType { get; public set; }
    public Nullable`1<bool> IsReference { get; public set; }
    [NullableAttribute("2")]
public JsonConverter Converter { get; public set; }
    [NullableAttribute("2")]
public JsonConverter InternalConverter { get; internal set; }
    public IList`1<SerializationCallback> OnDeserializedCallbacks { get; }
    public IList`1<SerializationCallback> OnDeserializingCallbacks { get; }
    public IList`1<SerializationCallback> OnSerializedCallbacks { get; }
    public IList`1<SerializationCallback> OnSerializingCallbacks { get; }
    public IList`1<SerializationErrorCallback> OnErrorCallbacks { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`1<object> DefaultCreator { get; public set; }
    public bool DefaultCreatorNonPublic { get; public set; }
    internal JsonContract(Type underlyingType);
    [CompilerGeneratedAttribute]
public Type get_UnderlyingType();
    public Type get_CreatedType();
    public void set_CreatedType(Type value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsReference();
    [CompilerGeneratedAttribute]
public void set_IsReference(Nullable`1<bool> value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public JsonConverter get_Converter();
    [CompilerGeneratedAttribute]
[NullableContextAttribute("2")]
public void set_Converter(JsonConverter value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public JsonConverter get_InternalConverter();
    [CompilerGeneratedAttribute]
[NullableContextAttribute("2")]
internal void set_InternalConverter(JsonConverter value);
    public IList`1<SerializationCallback> get_OnDeserializedCallbacks();
    public IList`1<SerializationCallback> get_OnDeserializingCallbacks();
    public IList`1<SerializationCallback> get_OnSerializedCallbacks();
    public IList`1<SerializationCallback> get_OnSerializingCallbacks();
    public IList`1<SerializationErrorCallback> get_OnErrorCallbacks();
    [CompilerGeneratedAttribute]
public Func`1<object> get_DefaultCreator();
    [CompilerGeneratedAttribute]
public void set_DefaultCreator(Func`1<object> value);
    [CompilerGeneratedAttribute]
public bool get_DefaultCreatorNonPublic();
    [CompilerGeneratedAttribute]
public void set_DefaultCreatorNonPublic(bool value);
    internal void InvokeOnSerializing(object o, StreamingContext context);
    internal void InvokeOnSerialized(object o, StreamingContext context);
    internal void InvokeOnDeserializing(object o, StreamingContext context);
    internal void InvokeOnDeserialized(object o, StreamingContext context);
    internal void InvokeOnError(object o, StreamingContext context, ErrorContext errorContext);
    internal static SerializationCallback CreateSerializationCallback(MethodInfo callbackMethodInfo);
    internal static SerializationErrorCallback CreateSerializationErrorCallback(MethodInfo callbackMethodInfo);
}
internal enum Newtonsoft.Json.Serialization.JsonContractType : Enum {
    public int value__;
    public static JsonContractType None;
    public static JsonContractType Object;
    public static JsonContractType Array;
    public static JsonContractType Primitive;
    public static JsonContractType String;
    public static JsonContractType Dictionary;
    public static JsonContractType Dynamic;
    public static JsonContractType Serializable;
    public static JsonContractType Linq;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Newtonsoft.Json.Serialization.JsonDictionaryContract : JsonContainerContract {
    [CompilerGeneratedAttribute]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`2<string, string> <DictionaryKeyResolver>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <DictionaryKeyType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <DictionaryValueType>k__BackingField;
    [CompilerGeneratedAttribute]
private JsonContract <KeyContract>k__BackingField;
    private Type _genericCollectionDefinitionType;
    private Type _genericWrapperType;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ObjectConstructor`1<object> _genericWrapperCreator;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`1<object> _genericTemporaryDictionaryCreator;
    [CompilerGeneratedAttribute]
private bool <ShouldCreateWrapper>k__BackingField;
    private ConstructorInfo _parameterizedConstructor;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ObjectConstructor`1<object> _overrideCreator;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ObjectConstructor`1<object> _parameterizedCreator;
    [CompilerGeneratedAttribute]
private bool <HasParameterizedCreator>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<string, string> DictionaryKeyResolver { get; public set; }
    public Type DictionaryKeyType { get; }
    public Type DictionaryValueType { get; }
    internal JsonContract KeyContract { get; internal set; }
    internal bool ShouldCreateWrapper { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal ObjectConstructor`1<object> ParameterizedCreator { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ObjectConstructor`1<object> OverrideCreator { get; public set; }
    public bool HasParameterizedCreator { get; public set; }
    internal bool HasParameterizedCreatorInternal { get; }
    [NullableContextAttribute("1")]
public JsonDictionaryContract(Type underlyingType);
    [CompilerGeneratedAttribute]
public Func`2<string, string> get_DictionaryKeyResolver();
    [CompilerGeneratedAttribute]
public void set_DictionaryKeyResolver(Func`2<string, string> value);
    [CompilerGeneratedAttribute]
public Type get_DictionaryKeyType();
    [CompilerGeneratedAttribute]
public Type get_DictionaryValueType();
    [CompilerGeneratedAttribute]
internal JsonContract get_KeyContract();
    [CompilerGeneratedAttribute]
internal void set_KeyContract(JsonContract value);
    [CompilerGeneratedAttribute]
internal bool get_ShouldCreateWrapper();
    internal ObjectConstructor`1<object> get_ParameterizedCreator();
    public ObjectConstructor`1<object> get_OverrideCreator();
    public void set_OverrideCreator(ObjectConstructor`1<object> value);
    [CompilerGeneratedAttribute]
public bool get_HasParameterizedCreator();
    [CompilerGeneratedAttribute]
public void set_HasParameterizedCreator(bool value);
    internal bool get_HasParameterizedCreatorInternal();
    [NullableContextAttribute("1")]
internal IWrappedDictionary CreateWrapper(object dictionary);
    [NullableContextAttribute("1")]
internal IDictionary CreateTemporaryDictionary();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Newtonsoft.Json.Serialization.JsonDynamicContract : JsonContainerContract {
    [CompilerGeneratedAttribute]
private JsonPropertyCollection <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`2<string, string> <PropertyNameResolver>k__BackingField;
    private ThreadSafeStore`2<string, CallSite`1<Func`3<CallSite, object, object>>> _callSiteGetters;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ThreadSafeStore`2<string, CallSite`1<Func`4<CallSite, object, object, object>>> _callSiteSetters;
    public JsonPropertyCollection Properties { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<string, string> PropertyNameResolver { get; public set; }
    public JsonDynamicContract(Type underlyingType);
    [CompilerGeneratedAttribute]
public JsonPropertyCollection get_Properties();
    [CompilerGeneratedAttribute]
public Func`2<string, string> get_PropertyNameResolver();
    [CompilerGeneratedAttribute]
public void set_PropertyNameResolver(Func`2<string, string> value);
    private static CallSite`1<Func`3<CallSite, object, object>> CreateCallSiteGetter(string name);
    private static CallSite`1<Func`4<CallSite, object, object, object>> CreateCallSiteSetter(string name);
    internal bool TryGetMember(IDynamicMetaObjectProvider dynamicProvider, string name, Object& value);
    internal bool TrySetMember(IDynamicMetaObjectProvider dynamicProvider, string name, object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Newtonsoft.Json.Serialization.JsonFormatterConverter : object {
    private JsonSerializerInternalReader _reader;
    private JsonISerializableContract _contract;
    [NullableAttribute("2")]
private JsonProperty _member;
    public JsonFormatterConverter(JsonSerializerInternalReader reader, JsonISerializableContract contract, JsonProperty member);
    private T GetTokenValue(object value);
    public sealed virtual object Convert(object value, Type type);
    public sealed virtual object Convert(object value, TypeCode typeCode);
    public sealed virtual bool ToBoolean(object value);
    public sealed virtual byte ToByte(object value);
    public sealed virtual char ToChar(object value);
    public sealed virtual DateTime ToDateTime(object value);
    public sealed virtual decimal ToDecimal(object value);
    public sealed virtual double ToDouble(object value);
    public sealed virtual short ToInt16(object value);
    public sealed virtual int ToInt32(object value);
    public sealed virtual long ToInt64(object value);
    public sealed virtual sbyte ToSByte(object value);
    public sealed virtual float ToSingle(object value);
    public sealed virtual string ToString(object value);
    public sealed virtual ushort ToUInt16(object value);
    public sealed virtual UInt32 ToUInt32(object value);
    public sealed virtual ulong ToUInt64(object value);
}
internal class Newtonsoft.Json.Serialization.JsonISerializableContract : JsonContainerContract {
    [CompilerGeneratedAttribute]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ObjectConstructor`1<object> <ISerializableCreator>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ObjectConstructor`1<object> ISerializableCreator { get; public set; }
    [NullableContextAttribute("1")]
public JsonISerializableContract(Type underlyingType);
    [CompilerGeneratedAttribute]
public ObjectConstructor`1<object> get_ISerializableCreator();
    [CompilerGeneratedAttribute]
public void set_ISerializableCreator(ObjectConstructor`1<object> value);
}
internal class Newtonsoft.Json.Serialization.JsonLinqContract : JsonContract {
    [NullableContextAttribute("1")]
public JsonLinqContract(Type underlyingType);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Newtonsoft.Json.Serialization.JsonObjectContract : JsonContainerContract {
    [CompilerGeneratedAttribute]
private MemberSerialization <MemberSerialization>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<MissingMemberHandling> <MissingMemberHandling>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Required> <ItemRequired>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<NullValueHandling> <ItemNullValueHandling>k__BackingField;
    [CompilerGeneratedAttribute]
[NullableAttribute("1")]
private JsonPropertyCollection <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private ExtensionDataSetter <ExtensionDataSetter>k__BackingField;
    [CompilerGeneratedAttribute]
private ExtensionDataGetter <ExtensionDataGetter>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<string, string> <ExtensionDataNameResolver>k__BackingField;
    internal bool ExtensionDataIsJToken;
    private Nullable`1<bool> _hasRequiredOrDefaultValueProperties;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ObjectConstructor`1<object> _overrideCreator;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ObjectConstructor`1<object> _parameterizedCreator;
    private JsonPropertyCollection _creatorParameters;
    private Type _extensionDataValueType;
    public MemberSerialization MemberSerialization { get; public set; }
    public Nullable`1<MissingMemberHandling> MissingMemberHandling { get; public set; }
    public Nullable`1<Required> ItemRequired { get; public set; }
    public Nullable`1<NullValueHandling> ItemNullValueHandling { get; public set; }
    [NullableAttribute("1")]
public JsonPropertyCollection Properties { get; }
    [NullableAttribute("1")]
public JsonPropertyCollection CreatorParameters { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ObjectConstructor`1<object> OverrideCreator { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal ObjectConstructor`1<object> ParameterizedCreator { get; internal set; }
    public ExtensionDataSetter ExtensionDataSetter { get; public set; }
    public ExtensionDataGetter ExtensionDataGetter { get; public set; }
    public Type ExtensionDataValueType { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<string, string> ExtensionDataNameResolver { get; public set; }
    internal bool HasRequiredOrDefaultValueProperties { get; }
    [NullableContextAttribute("1")]
public JsonObjectContract(Type underlyingType);
    [CompilerGeneratedAttribute]
public MemberSerialization get_MemberSerialization();
    [CompilerGeneratedAttribute]
public void set_MemberSerialization(MemberSerialization value);
    [CompilerGeneratedAttribute]
public Nullable`1<MissingMemberHandling> get_MissingMemberHandling();
    [CompilerGeneratedAttribute]
public void set_MissingMemberHandling(Nullable`1<MissingMemberHandling> value);
    [CompilerGeneratedAttribute]
public Nullable`1<Required> get_ItemRequired();
    [CompilerGeneratedAttribute]
public void set_ItemRequired(Nullable`1<Required> value);
    [CompilerGeneratedAttribute]
public Nullable`1<NullValueHandling> get_ItemNullValueHandling();
    [CompilerGeneratedAttribute]
public void set_ItemNullValueHandling(Nullable`1<NullValueHandling> value);
    [CompilerGeneratedAttribute]
[NullableContextAttribute("1")]
public JsonPropertyCollection get_Properties();
    [NullableContextAttribute("1")]
public JsonPropertyCollection get_CreatorParameters();
    public ObjectConstructor`1<object> get_OverrideCreator();
    public void set_OverrideCreator(ObjectConstructor`1<object> value);
    internal ObjectConstructor`1<object> get_ParameterizedCreator();
    internal void set_ParameterizedCreator(ObjectConstructor`1<object> value);
    [CompilerGeneratedAttribute]
public ExtensionDataSetter get_ExtensionDataSetter();
    [CompilerGeneratedAttribute]
public void set_ExtensionDataSetter(ExtensionDataSetter value);
    [CompilerGeneratedAttribute]
public ExtensionDataGetter get_ExtensionDataGetter();
    [CompilerGeneratedAttribute]
public void set_ExtensionDataGetter(ExtensionDataGetter value);
    public Type get_ExtensionDataValueType();
    public void set_ExtensionDataValueType(Type value);
    [CompilerGeneratedAttribute]
public Func`2<string, string> get_ExtensionDataNameResolver();
    [CompilerGeneratedAttribute]
public void set_ExtensionDataNameResolver(Func`2<string, string> value);
    internal bool get_HasRequiredOrDefaultValueProperties();
    [SecuritySafeCriticalAttribute]
[NullableContextAttribute("1")]
internal object GetUninitializedObject();
}
[NullableAttribute("0")]
[NullableContextAttribute("1")]
internal class Newtonsoft.Json.Serialization.JsonPrimitiveContract : JsonContract {
    [CompilerGeneratedAttribute]
private PrimitiveTypeCode <TypeCode>k__BackingField;
    private static Dictionary`2<Type, ReadType> ReadTypeMap;
    internal PrimitiveTypeCode TypeCode { get; internal set; }
    public JsonPrimitiveContract(Type underlyingType);
    private static JsonPrimitiveContract();
    [CompilerGeneratedAttribute]
internal PrimitiveTypeCode get_TypeCode();
    [CompilerGeneratedAttribute]
internal void set_TypeCode(PrimitiveTypeCode value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Newtonsoft.Json.Serialization.JsonProperty : object {
    internal Nullable`1<Required> _required;
    internal bool _hasExplicitDefaultValue;
    private object _defaultValue;
    private bool _hasGeneratedDefaultValue;
    private string _propertyName;
    internal bool _skipPropertyNameEscape;
    private Type _propertyType;
    [CompilerGeneratedAttribute]
private JsonContract <PropertyContract>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <DeclaringType>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Order>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UnderlyingName>k__BackingField;
    [CompilerGeneratedAttribute]
private IValueProvider <ValueProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private IAttributeProvider <AttributeProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private JsonConverter <Converter>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Ignored>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Readable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Writable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasMemberAttribute>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsReference>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<NullValueHandling> <NullValueHandling>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DefaultValueHandling> <DefaultValueHandling>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ReferenceLoopHandling> <ReferenceLoopHandling>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ObjectCreationHandling> <ObjectCreationHandling>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TypeNameHandling> <TypeNameHandling>k__BackingField;
    [CompilerGeneratedAttribute]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Predicate`1<object> <ShouldSerialize>k__BackingField;
    [CompilerGeneratedAttribute]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Predicate`1<object> <ShouldDeserialize>k__BackingField;
    [CompilerGeneratedAttribute]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Predicate`1<object> <GetIsSpecified>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`2<object, object> <SetIsSpecified>k__BackingField;
    [CompilerGeneratedAttribute]
private JsonConverter <ItemConverter>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <ItemIsReference>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TypeNameHandling> <ItemTypeNameHandling>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ReferenceLoopHandling> <ItemReferenceLoopHandling>k__BackingField;
    internal JsonContract PropertyContract { get; internal set; }
    public string PropertyName { get; public set; }
    public Type DeclaringType { get; public set; }
    public Nullable`1<int> Order { get; public set; }
    public string UnderlyingName { get; public set; }
    public IValueProvider ValueProvider { get; public set; }
    public IAttributeProvider AttributeProvider { get; public set; }
    public Type PropertyType { get; public set; }
    public JsonConverter Converter { get; public set; }
    [ObsoleteAttribute("MemberConverter is obsolete. Use Converter instead.")]
public JsonConverter MemberConverter { get; public set; }
    public bool Ignored { get; public set; }
    public bool Readable { get; public set; }
    public bool Writable { get; public set; }
    public bool HasMemberAttribute { get; public set; }
    public object DefaultValue { get; public set; }
    public Required Required { get; public set; }
    public bool IsRequiredSpecified { get; }
    public Nullable`1<bool> IsReference { get; public set; }
    public Nullable`1<NullValueHandling> NullValueHandling { get; public set; }
    public Nullable`1<DefaultValueHandling> DefaultValueHandling { get; public set; }
    public Nullable`1<ReferenceLoopHandling> ReferenceLoopHandling { get; public set; }
    public Nullable`1<ObjectCreationHandling> ObjectCreationHandling { get; public set; }
    public Nullable`1<TypeNameHandling> TypeNameHandling { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Predicate`1<object> ShouldSerialize { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Predicate`1<object> ShouldDeserialize { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Predicate`1<object> GetIsSpecified { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Action`2<object, object> SetIsSpecified { get; public set; }
    public JsonConverter ItemConverter { get; public set; }
    public Nullable`1<bool> ItemIsReference { get; public set; }
    public Nullable`1<TypeNameHandling> ItemTypeNameHandling { get; public set; }
    public Nullable`1<ReferenceLoopHandling> ItemReferenceLoopHandling { get; public set; }
    [CompilerGeneratedAttribute]
internal JsonContract get_PropertyContract();
    [CompilerGeneratedAttribute]
internal void set_PropertyContract(JsonContract value);
    public string get_PropertyName();
    public void set_PropertyName(string value);
    [CompilerGeneratedAttribute]
public Type get_DeclaringType();
    [CompilerGeneratedAttribute]
public void set_DeclaringType(Type value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Order();
    [CompilerGeneratedAttribute]
public void set_Order(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_UnderlyingName();
    [CompilerGeneratedAttribute]
public void set_UnderlyingName(string value);
    [CompilerGeneratedAttribute]
public IValueProvider get_ValueProvider();
    [CompilerGeneratedAttribute]
public void set_ValueProvider(IValueProvider value);
    [CompilerGeneratedAttribute]
public IAttributeProvider get_AttributeProvider();
    [CompilerGeneratedAttribute]
public void set_AttributeProvider(IAttributeProvider value);
    public Type get_PropertyType();
    public void set_PropertyType(Type value);
    [CompilerGeneratedAttribute]
public JsonConverter get_Converter();
    [CompilerGeneratedAttribute]
public void set_Converter(JsonConverter value);
    public JsonConverter get_MemberConverter();
    public void set_MemberConverter(JsonConverter value);
    [CompilerGeneratedAttribute]
public bool get_Ignored();
    [CompilerGeneratedAttribute]
public void set_Ignored(bool value);
    [CompilerGeneratedAttribute]
public bool get_Readable();
    [CompilerGeneratedAttribute]
public void set_Readable(bool value);
    [CompilerGeneratedAttribute]
public bool get_Writable();
    [CompilerGeneratedAttribute]
public void set_Writable(bool value);
    [CompilerGeneratedAttribute]
public bool get_HasMemberAttribute();
    [CompilerGeneratedAttribute]
public void set_HasMemberAttribute(bool value);
    public object get_DefaultValue();
    public void set_DefaultValue(object value);
    internal object GetResolvedDefaultValue();
    public Required get_Required();
    public void set_Required(Required value);
    public bool get_IsRequiredSpecified();
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsReference();
    [CompilerGeneratedAttribute]
public void set_IsReference(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<NullValueHandling> get_NullValueHandling();
    [CompilerGeneratedAttribute]
public void set_NullValueHandling(Nullable`1<NullValueHandling> value);
    [CompilerGeneratedAttribute]
public Nullable`1<DefaultValueHandling> get_DefaultValueHandling();
    [CompilerGeneratedAttribute]
public void set_DefaultValueHandling(Nullable`1<DefaultValueHandling> value);
    [CompilerGeneratedAttribute]
public Nullable`1<ReferenceLoopHandling> get_ReferenceLoopHandling();
    [CompilerGeneratedAttribute]
public void set_ReferenceLoopHandling(Nullable`1<ReferenceLoopHandling> value);
    [CompilerGeneratedAttribute]
public Nullable`1<ObjectCreationHandling> get_ObjectCreationHandling();
    [CompilerGeneratedAttribute]
public void set_ObjectCreationHandling(Nullable`1<ObjectCreationHandling> value);
    [CompilerGeneratedAttribute]
public Nullable`1<TypeNameHandling> get_TypeNameHandling();
    [CompilerGeneratedAttribute]
public void set_TypeNameHandling(Nullable`1<TypeNameHandling> value);
    [CompilerGeneratedAttribute]
public Predicate`1<object> get_ShouldSerialize();
    [CompilerGeneratedAttribute]
public void set_ShouldSerialize(Predicate`1<object> value);
    [CompilerGeneratedAttribute]
public Predicate`1<object> get_ShouldDeserialize();
    [CompilerGeneratedAttribute]
public void set_ShouldDeserialize(Predicate`1<object> value);
    [CompilerGeneratedAttribute]
public Predicate`1<object> get_GetIsSpecified();
    [CompilerGeneratedAttribute]
public void set_GetIsSpecified(Predicate`1<object> value);
    [CompilerGeneratedAttribute]
public Action`2<object, object> get_SetIsSpecified();
    [CompilerGeneratedAttribute]
public void set_SetIsSpecified(Action`2<object, object> value);
    [NullableContextAttribute("1")]
public virtual string ToString();
    [CompilerGeneratedAttribute]
public JsonConverter get_ItemConverter();
    [CompilerGeneratedAttribute]
public void set_ItemConverter(JsonConverter value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_ItemIsReference();
    [CompilerGeneratedAttribute]
public void set_ItemIsReference(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<TypeNameHandling> get_ItemTypeNameHandling();
    [CompilerGeneratedAttribute]
public void set_ItemTypeNameHandling(Nullable`1<TypeNameHandling> value);
    [CompilerGeneratedAttribute]
public Nullable`1<ReferenceLoopHandling> get_ItemReferenceLoopHandling();
    [CompilerGeneratedAttribute]
public void set_ItemReferenceLoopHandling(Nullable`1<ReferenceLoopHandling> value);
    [NullableContextAttribute("1")]
internal void WritePropertyName(JsonWriter writer);
}
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableContextAttribute("1")]
internal class Newtonsoft.Json.Serialization.JsonPropertyCollection : KeyedCollection`2<string, JsonProperty> {
    private Type _type;
    private List`1<JsonProperty> _list;
    public JsonPropertyCollection(Type type);
    protected virtual string GetKeyForItem(JsonProperty item);
    public void AddProperty(JsonProperty property);
    public JsonProperty GetClosestMatchProperty(string propertyName);
    private bool TryGetValue(string key, JsonProperty& item);
    public JsonProperty GetProperty(string propertyName, StringComparison comparisonType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class Newtonsoft.Json.Serialization.JsonSerializerInternalBase : object {
    [NullableAttribute("2")]
private ErrorContext _currentErrorContext;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private BidirectionalDictionary`2<string, object> _mappings;
    internal JsonSerializer Serializer;
    [NullableAttribute("2")]
internal ITraceWriter TraceWriter;
    [NullableAttribute("2")]
protected JsonSerializerProxy InternalSerializer;
    internal BidirectionalDictionary`2<string, object> DefaultReferenceMappings { get; }
    protected JsonSerializerInternalBase(JsonSerializer serializer);
    internal BidirectionalDictionary`2<string, object> get_DefaultReferenceMappings();
    protected NullValueHandling ResolvedNullValueHandling(JsonObjectContract containerContract, JsonProperty property);
    private ErrorContext GetErrorContext(object currentObject, object member, string path, Exception error);
    protected void ClearErrorContext();
    [NullableContextAttribute("2")]
protected bool IsErrorHandled(object currentObject, JsonContract contract, object keyValue, IJsonLineInfo lineInfo, string path, Exception ex);
}
[NullableAttribute("0")]
[NullableContextAttribute("1")]
internal class Newtonsoft.Json.Serialization.JsonSerializerInternalReader : JsonSerializerInternalBase {
    public JsonSerializerInternalReader(JsonSerializer serializer);
    public void Populate(JsonReader reader, object target);
    [NullableContextAttribute("2")]
private JsonContract GetContractSafe(Type type);
    private JsonContract GetContract(Type type);
    [NullableContextAttribute("2")]
public object Deserialize(JsonReader reader, Type objectType, bool checkAdditionalContent);
    private JsonSerializerProxy GetInternalSerializer();
    [NullableContextAttribute("2")]
private JToken CreateJToken(JsonReader reader, JsonContract contract);
    private JToken CreateJObject(JsonReader reader);
    [NullableContextAttribute("2")]
private object CreateValueInternal(JsonReader reader, Type objectType, JsonContract contract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerMember, object existingValue);
    [NullableContextAttribute("2")]
private static bool CoerceEmptyStringToNull(Type objectType, JsonContract contract, string s);
    internal string GetExpectedDescription(JsonContract contract);
    [NullableContextAttribute("2")]
private JsonConverter GetConverter(JsonContract contract, JsonConverter memberConverter, JsonContainerContract containerContract, JsonProperty containerProperty);
    [NullableContextAttribute("2")]
private object CreateObject(JsonReader reader, Type objectType, JsonContract contract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerMember, object existingValue);
    [NullableContextAttribute("2")]
private bool ReadMetadataPropertiesToken(JTokenReader reader, Type& objectType, JsonContract& contract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerMember, object existingValue, Object& newValue, String& id);
    [NullableContextAttribute("2")]
private bool ReadMetadataProperties(JsonReader reader, Type& objectType, JsonContract& contract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerMember, object existingValue, Object& newValue, String& id);
    [NullableContextAttribute("2")]
private void ResolveTypeName(JsonReader reader, Type& objectType, JsonContract& contract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerMember, string qualifiedTypeName);
    private JsonArrayContract EnsureArrayContract(JsonReader reader, Type objectType, JsonContract contract);
    [NullableContextAttribute("2")]
private object CreateList(JsonReader reader, Type objectType, JsonContract contract, JsonProperty member, object existingValue, string id);
    [NullableContextAttribute("2")]
private bool HasNoDefinedType(JsonContract contract);
    [NullableContextAttribute("2")]
private object EnsureType(JsonReader reader, object value, CultureInfo culture, JsonContract contract, Type targetType);
    private bool SetPropertyValue(JsonProperty property, JsonConverter propertyConverter, JsonContainerContract containerContract, JsonProperty containerProperty, JsonReader reader, object target);
    [NullableContextAttribute("2")]
private bool CalculatePropertyDetails(JsonProperty property, JsonConverter& propertyConverter, JsonContainerContract containerContract, JsonProperty containerProperty, JsonReader reader, object target, Boolean& useExistingValue, Object& currentValue, JsonContract& propertyContract, Boolean& gottenCurrentValue, Boolean& ignoredValue);
    private void AddReference(JsonReader reader, string id, object value);
    private bool HasFlag(DefaultValueHandling value, DefaultValueHandling flag);
    [NullableContextAttribute("2")]
private bool ShouldSetPropertyValue(JsonProperty property, JsonObjectContract contract, object value);
    private IList CreateNewList(JsonReader reader, JsonArrayContract contract, Boolean& createdFromNonDefaultCreator);
    private IDictionary CreateNewDictionary(JsonReader reader, JsonDictionaryContract contract, Boolean& createdFromNonDefaultCreator);
    private void OnDeserializing(JsonReader reader, JsonContract contract, object value);
    private void OnDeserialized(JsonReader reader, JsonContract contract, object value);
    private object PopulateDictionary(IDictionary dictionary, JsonReader reader, JsonDictionaryContract contract, JsonProperty containerProperty, string id);
    private object PopulateMultidimensionalArray(IList list, JsonReader reader, JsonArrayContract contract, JsonProperty containerProperty, string id);
    private void ThrowUnexpectedEndException(JsonReader reader, JsonContract contract, object currentObject, string message);
    private object PopulateList(IList list, JsonReader reader, JsonArrayContract contract, JsonProperty containerProperty, string id);
    private object CreateISerializable(JsonReader reader, JsonISerializableContract contract, JsonProperty member, string id);
    internal object CreateISerializableItem(JToken token, Type type, JsonISerializableContract contract, JsonProperty member);
    private object CreateDynamic(JsonReader reader, JsonDynamicContract contract, JsonProperty member, string id);
    private object CreateObjectUsingCreatorWithParameters(JsonReader reader, JsonObjectContract contract, JsonProperty containerProperty, ObjectConstructor`1<object> creator, string id);
    private object DeserializeConvertable(JsonConverter converter, JsonReader reader, Type objectType, object existingValue);
    private List`1<CreatorPropertyContext> ResolvePropertyAndCreatorValues(JsonObjectContract contract, JsonProperty containerProperty, JsonReader reader, Type objectType);
    public object CreateNewObject(JsonReader reader, JsonObjectContract objectContract, JsonProperty containerMember, JsonProperty containerProperty, string id, Boolean& createdFromNonDefaultCreator);
    private object PopulateObject(object newObject, JsonReader reader, JsonObjectContract contract, JsonProperty member, string id);
    private bool ShouldDeserialize(JsonReader reader, JsonProperty property, object target);
    private bool CheckPropertyName(JsonReader reader, string memberName);
    private void SetExtensionData(JsonObjectContract contract, JsonProperty member, JsonReader reader, string memberName, object o);
    private object ReadExtensionDataValue(JsonObjectContract contract, JsonProperty member, JsonReader reader);
    private void EndProcessProperty(object newObject, JsonReader reader, JsonObjectContract contract, int initialDepth, JsonProperty property, PropertyPresence presence, bool setDefaultValue);
    private void SetPropertyPresence(JsonReader reader, JsonProperty property, Dictionary`2<JsonProperty, PropertyPresence> requiredProperties);
    private void HandleError(JsonReader reader, bool readPastError, int initialDepth);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Newtonsoft.Json.Serialization.JsonSerializerInternalWriter : JsonSerializerInternalBase {
    [NullableAttribute("2")]
private Type _rootType;
    private int _rootLevel;
    private List`1<object> _serializeStack;
    public JsonSerializerInternalWriter(JsonSerializer serializer);
    [NullableContextAttribute("2")]
public void Serialize(JsonWriter jsonWriter, object value, Type objectType);
    private JsonSerializerProxy GetInternalSerializer();
    [NullableContextAttribute("2")]
private JsonContract GetContractSafe(object value);
    private JsonContract GetContract(object value);
    private void SerializePrimitive(JsonWriter writer, object value, JsonPrimitiveContract contract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerProperty);
    [NullableContextAttribute("2")]
private void SerializeValue(JsonWriter writer, object value, JsonContract valueContract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerProperty);
    [NullableContextAttribute("2")]
private Nullable`1<bool> ResolveIsReference(JsonContract contract, JsonProperty property, JsonContainerContract collectionContract, JsonProperty containerProperty);
    [NullableContextAttribute("2")]
private bool ShouldWriteReference(object value, JsonProperty property, JsonContract valueContract, JsonContainerContract collectionContract, JsonProperty containerProperty);
    [NullableContextAttribute("2")]
private bool ShouldWriteProperty(object memberValue, JsonObjectContract containerContract, JsonProperty property);
    [NullableContextAttribute("2")]
private bool CheckForCircularReference(JsonWriter writer, object value, JsonProperty property, JsonContract contract, JsonContainerContract containerContract, JsonProperty containerProperty);
    private void WriteReference(JsonWriter writer, object value);
    private string GetReference(JsonWriter writer, object value);
    internal static bool TryConvertToString(object value, Type type, String& s);
    private void SerializeString(JsonWriter writer, object value, JsonStringContract contract);
    private void OnSerializing(JsonWriter writer, JsonContract contract, object value);
    private void OnSerialized(JsonWriter writer, JsonContract contract, object value);
    private void SerializeObject(JsonWriter writer, object value, JsonObjectContract contract, JsonProperty member, JsonContainerContract collectionContract, JsonProperty containerProperty);
    private bool CalculatePropertyValues(JsonWriter writer, object value, JsonContainerContract contract, JsonProperty member, JsonProperty property, JsonContract& memberContract, Object& memberValue);
    private void WriteObjectStart(JsonWriter writer, object value, JsonContract contract, JsonProperty member, JsonContainerContract collectionContract, JsonProperty containerProperty);
    private bool HasCreatorParameter(JsonContainerContract contract, JsonProperty property);
    private void WriteReferenceIdProperty(JsonWriter writer, Type type, object value);
    private void WriteTypeProperty(JsonWriter writer, Type type);
    private bool HasFlag(DefaultValueHandling value, DefaultValueHandling flag);
    private bool HasFlag(PreserveReferencesHandling value, PreserveReferencesHandling flag);
    private bool HasFlag(TypeNameHandling value, TypeNameHandling flag);
    private void SerializeConvertable(JsonWriter writer, JsonConverter converter, object value, JsonContract contract, JsonContainerContract collectionContract, JsonProperty containerProperty);
    private void SerializeList(JsonWriter writer, IEnumerable values, JsonArrayContract contract, JsonProperty member, JsonContainerContract collectionContract, JsonProperty containerProperty);
    private void SerializeMultidimensionalArray(JsonWriter writer, Array values, JsonArrayContract contract, JsonProperty member, JsonContainerContract collectionContract, JsonProperty containerProperty);
    private void SerializeMultidimensionalArray(JsonWriter writer, Array values, JsonArrayContract contract, JsonProperty member, int initialDepth, Int32[] indices);
    private bool WriteStartArray(JsonWriter writer, object values, JsonArrayContract contract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerProperty);
    [SecuritySafeCriticalAttribute]
private void SerializeISerializable(JsonWriter writer, ISerializable value, JsonISerializableContract contract, JsonProperty member, JsonContainerContract collectionContract, JsonProperty containerProperty);
    private void SerializeDynamic(JsonWriter writer, IDynamicMetaObjectProvider value, JsonDynamicContract contract, JsonProperty member, JsonContainerContract collectionContract, JsonProperty containerProperty);
    [NullableContextAttribute("2")]
private bool ShouldWriteDynamicProperty(object memberValue);
    [NullableContextAttribute("2")]
private bool ShouldWriteType(TypeNameHandling typeNameHandlingFlag, JsonContract contract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerProperty);
    private void SerializeDictionary(JsonWriter writer, IDictionary values, JsonDictionaryContract contract, JsonProperty member, JsonContainerContract collectionContract, JsonProperty containerProperty);
    private string GetPropertyName(JsonWriter writer, object name, JsonContract contract, Boolean& escape);
    private void HandleError(JsonWriter writer, int initialDepth);
    private bool ShouldSerialize(JsonWriter writer, JsonProperty property, object target);
    private bool IsSpecified(JsonWriter writer, JsonProperty property, object target);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Newtonsoft.Json.Serialization.JsonSerializerProxy : JsonSerializer {
    [NullableAttribute("2")]
private JsonSerializerInternalReader _serializerReader;
    [NullableAttribute("2")]
private JsonSerializerInternalWriter _serializerWriter;
    private JsonSerializer _serializer;
    [NullableAttribute("2")]
public IReferenceResolver ReferenceResolver { get; public set; }
    [NullableAttribute("2")]
public ITraceWriter TraceWriter { get; public set; }
    [NullableAttribute("2")]
public IEqualityComparer EqualityComparer { get; public set; }
    public JsonConverterCollection Converters { get; }
    public DefaultValueHandling DefaultValueHandling { get; public set; }
    public IContractResolver ContractResolver { get; public set; }
    public MissingMemberHandling MissingMemberHandling { get; public set; }
    public NullValueHandling NullValueHandling { get; public set; }
    public ObjectCreationHandling ObjectCreationHandling { get; public set; }
    public ReferenceLoopHandling ReferenceLoopHandling { get; public set; }
    public PreserveReferencesHandling PreserveReferencesHandling { get; public set; }
    public TypeNameHandling TypeNameHandling { get; public set; }
    public MetadataPropertyHandling MetadataPropertyHandling { get; public set; }
    [ObsoleteAttribute("TypeNameAssemblyFormat is obsolete. Use TypeNameAssemblyFormatHandling instead.")]
public FormatterAssemblyStyle TypeNameAssemblyFormat { get; public set; }
    public TypeNameAssemblyFormatHandling TypeNameAssemblyFormatHandling { get; public set; }
    public ConstructorHandling ConstructorHandling { get; public set; }
    [ObsoleteAttribute("Binder is obsolete. Use SerializationBinder instead.")]
public SerializationBinder Binder { get; public set; }
    public ISerializationBinder SerializationBinder { get; public set; }
    public StreamingContext Context { get; public set; }
    public Formatting Formatting { get; public set; }
    public DateFormatHandling DateFormatHandling { get; public set; }
    public DateTimeZoneHandling DateTimeZoneHandling { get; public set; }
    public DateParseHandling DateParseHandling { get; public set; }
    public FloatFormatHandling FloatFormatHandling { get; public set; }
    public FloatParseHandling FloatParseHandling { get; public set; }
    public StringEscapeHandling StringEscapeHandling { get; public set; }
    public string DateFormatString { get; public set; }
    public CultureInfo Culture { get; public set; }
    public Nullable`1<int> MaxDepth { get; public set; }
    public bool CheckAdditionalContent { get; public set; }
    public JsonSerializerProxy(JsonSerializerInternalReader serializerReader);
    public JsonSerializerProxy(JsonSerializerInternalWriter serializerWriter);
    public virtual void add_Error(EventHandler`1<ErrorEventArgs> value);
    public virtual void remove_Error(EventHandler`1<ErrorEventArgs> value);
    [NullableContextAttribute("2")]
public virtual IReferenceResolver get_ReferenceResolver();
    [NullableContextAttribute("2")]
public virtual void set_ReferenceResolver(IReferenceResolver value);
    [NullableContextAttribute("2")]
public virtual ITraceWriter get_TraceWriter();
    [NullableContextAttribute("2")]
public virtual void set_TraceWriter(ITraceWriter value);
    [NullableContextAttribute("2")]
public virtual IEqualityComparer get_EqualityComparer();
    [NullableContextAttribute("2")]
public virtual void set_EqualityComparer(IEqualityComparer value);
    public virtual JsonConverterCollection get_Converters();
    public virtual DefaultValueHandling get_DefaultValueHandling();
    public virtual void set_DefaultValueHandling(DefaultValueHandling value);
    public virtual IContractResolver get_ContractResolver();
    public virtual void set_ContractResolver(IContractResolver value);
    public virtual MissingMemberHandling get_MissingMemberHandling();
    public virtual void set_MissingMemberHandling(MissingMemberHandling value);
    public virtual NullValueHandling get_NullValueHandling();
    public virtual void set_NullValueHandling(NullValueHandling value);
    public virtual ObjectCreationHandling get_ObjectCreationHandling();
    public virtual void set_ObjectCreationHandling(ObjectCreationHandling value);
    public virtual ReferenceLoopHandling get_ReferenceLoopHandling();
    public virtual void set_ReferenceLoopHandling(ReferenceLoopHandling value);
    public virtual PreserveReferencesHandling get_PreserveReferencesHandling();
    public virtual void set_PreserveReferencesHandling(PreserveReferencesHandling value);
    public virtual TypeNameHandling get_TypeNameHandling();
    public virtual void set_TypeNameHandling(TypeNameHandling value);
    public virtual MetadataPropertyHandling get_MetadataPropertyHandling();
    public virtual void set_MetadataPropertyHandling(MetadataPropertyHandling value);
    public virtual FormatterAssemblyStyle get_TypeNameAssemblyFormat();
    public virtual void set_TypeNameAssemblyFormat(FormatterAssemblyStyle value);
    public virtual TypeNameAssemblyFormatHandling get_TypeNameAssemblyFormatHandling();
    public virtual void set_TypeNameAssemblyFormatHandling(TypeNameAssemblyFormatHandling value);
    public virtual ConstructorHandling get_ConstructorHandling();
    public virtual void set_ConstructorHandling(ConstructorHandling value);
    public virtual SerializationBinder get_Binder();
    public virtual void set_Binder(SerializationBinder value);
    public virtual ISerializationBinder get_SerializationBinder();
    public virtual void set_SerializationBinder(ISerializationBinder value);
    public virtual StreamingContext get_Context();
    public virtual void set_Context(StreamingContext value);
    public virtual Formatting get_Formatting();
    public virtual void set_Formatting(Formatting value);
    public virtual DateFormatHandling get_DateFormatHandling();
    public virtual void set_DateFormatHandling(DateFormatHandling value);
    public virtual DateTimeZoneHandling get_DateTimeZoneHandling();
    public virtual void set_DateTimeZoneHandling(DateTimeZoneHandling value);
    public virtual DateParseHandling get_DateParseHandling();
    public virtual void set_DateParseHandling(DateParseHandling value);
    public virtual FloatFormatHandling get_FloatFormatHandling();
    public virtual void set_FloatFormatHandling(FloatFormatHandling value);
    public virtual FloatParseHandling get_FloatParseHandling();
    public virtual void set_FloatParseHandling(FloatParseHandling value);
    public virtual StringEscapeHandling get_StringEscapeHandling();
    public virtual void set_StringEscapeHandling(StringEscapeHandling value);
    public virtual string get_DateFormatString();
    public virtual void set_DateFormatString(string value);
    public virtual CultureInfo get_Culture();
    public virtual void set_Culture(CultureInfo value);
    public virtual Nullable`1<int> get_MaxDepth();
    public virtual void set_MaxDepth(Nullable`1<int> value);
    public virtual bool get_CheckAdditionalContent();
    public virtual void set_CheckAdditionalContent(bool value);
    internal JsonSerializerInternalBase GetInternalSerializer();
    [NullableContextAttribute("2")]
internal virtual object DeserializeInternal(JsonReader reader, Type objectType);
    internal virtual void PopulateInternal(JsonReader reader, object target);
    [NullableContextAttribute("2")]
internal virtual void SerializeInternal(JsonWriter jsonWriter, object value, Type rootType);
}
internal class Newtonsoft.Json.Serialization.JsonStringContract : JsonPrimitiveContract {
    [NullableContextAttribute("1")]
public JsonStringContract(Type underlyingType);
}
[NullableAttribute("0")]
[NullableContextAttribute("1")]
internal static class Newtonsoft.Json.Serialization.JsonTypeReflector : object {
    private static Nullable`1<bool> _dynamicCodeGeneration;
    private static Nullable`1<bool> _fullyTrusted;
    public static string IdPropertyName;
    public static string RefPropertyName;
    public static string TypePropertyName;
    public static string ValuePropertyName;
    public static string ArrayValuesPropertyName;
    public static string ShouldSerializePrefix;
    public static string SpecifiedPostfix;
    public static string ConcurrentDictionaryTypeName;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static ThreadSafeStore`2<Type, Func`2<Object[], object>> CreatorCache;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static ThreadSafeStore`2<Type, Type> AssociatedMetadataTypesCache;
    [NullableAttribute("2")]
private static ReflectionObject _metadataTypeAttributeReflectionObject;
    public static bool DynamicCodeGeneration { get; }
    public static bool FullyTrusted { get; }
    public static ReflectionDelegateFactory ReflectionDelegateFactory { get; }
    private static JsonTypeReflector();
    public static T GetCachedAttribute(object attributeProvider);
    public static bool CanTypeDescriptorConvertString(Type type, TypeConverter& typeConverter);
    public static DataContractAttribute GetDataContractAttribute(Type type);
    public static DataMemberAttribute GetDataMemberAttribute(MemberInfo memberInfo);
    public static MemberSerialization GetObjectMemberSerialization(Type objectType, bool ignoreSerializableAttribute);
    public static JsonConverter GetJsonConverter(object attributeProvider);
    public static JsonConverter CreateJsonConverterInstance(Type converterType, Object[] args);
    public static NamingStrategy CreateNamingStrategyInstance(Type namingStrategyType, Object[] args);
    public static NamingStrategy GetContainerNamingStrategy(JsonContainerAttribute containerAttribute);
    private static Func`2<Object[], object> GetCreator(Type type);
    private static Type GetAssociatedMetadataType(Type type);
    private static Type GetAssociateMetadataTypeFromAttribute(Type type);
    private static T GetAttribute(Type type);
    private static T GetAttribute(MemberInfo memberInfo);
    public static bool IsNonSerializable(object provider);
    public static bool IsSerializable(object provider);
    public static T GetAttribute(object provider);
    [SecuritySafeCriticalAttribute]
public static bool get_DynamicCodeGeneration();
    public static bool get_FullyTrusted();
    public static ReflectionDelegateFactory get_ReflectionDelegateFactory();
}
internal class Newtonsoft.Json.Serialization.KebabCaseNamingStrategy : NamingStrategy {
    public KebabCaseNamingStrategy(bool processDictionaryKeys, bool overrideSpecifiedNames);
    public KebabCaseNamingStrategy(bool processDictionaryKeys, bool overrideSpecifiedNames, bool processExtensionDataNames);
    [NullableContextAttribute("1")]
protected virtual string ResolvePropertyName(string name);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Newtonsoft.Json.Serialization.MemoryTraceWriter : object {
    private Queue`1<string> _traceMessages;
    private object _lock;
    [CompilerGeneratedAttribute]
private TraceLevel <LevelFilter>k__BackingField;
    public TraceLevel LevelFilter { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual TraceLevel get_LevelFilter();
    [CompilerGeneratedAttribute]
public void set_LevelFilter(TraceLevel value);
    public sealed virtual void Trace(TraceLevel level, string message, Exception ex);
    public IEnumerable`1<string> GetTraceMessages();
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class Newtonsoft.Json.Serialization.NamingStrategy : object {
    [CompilerGeneratedAttribute]
private bool <ProcessDictionaryKeys>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ProcessExtensionDataNames>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OverrideSpecifiedNames>k__BackingField;
    public bool ProcessDictionaryKeys { get; public set; }
    public bool ProcessExtensionDataNames { get; public set; }
    public bool OverrideSpecifiedNames { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_ProcessDictionaryKeys();
    [CompilerGeneratedAttribute]
public void set_ProcessDictionaryKeys(bool value);
    [CompilerGeneratedAttribute]
public bool get_ProcessExtensionDataNames();
    [CompilerGeneratedAttribute]
public void set_ProcessExtensionDataNames(bool value);
    [CompilerGeneratedAttribute]
public bool get_OverrideSpecifiedNames();
    [CompilerGeneratedAttribute]
public void set_OverrideSpecifiedNames(bool value);
    public virtual string GetPropertyName(string name, bool hasSpecifiedName);
    public virtual string GetExtensionDataName(string name);
    public virtual string GetDictionaryKey(string key);
    protected abstract virtual string ResolvePropertyName(string name);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
protected bool Equals(NamingStrategy other);
}
internal class Newtonsoft.Json.Serialization.ObjectConstructor`1 : MulticastDelegate {
    public ObjectConstructor`1(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual object Invoke(Object[] args);
    public virtual IAsyncResult BeginInvoke(Object[] args, AsyncCallback callback, object object);
    public virtual object EndInvoke(IAsyncResult result);
}
[AttributeUsageAttribute("64")]
internal class Newtonsoft.Json.Serialization.OnErrorAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Newtonsoft.Json.Serialization.ReflectionAttributeProvider : object {
    private object _attributeProvider;
    public ReflectionAttributeProvider(object attributeProvider);
    public sealed virtual IList`1<Attribute> GetAttributes(bool inherit);
    public sealed virtual IList`1<Attribute> GetAttributes(Type attributeType, bool inherit);
}
[NullableAttribute("0")]
[NullableContextAttribute("1")]
internal class Newtonsoft.Json.Serialization.ReflectionValueProvider : object {
    private MemberInfo _memberInfo;
    public ReflectionValueProvider(MemberInfo memberInfo);
    public sealed virtual void SetValue(object target, object value);
    public sealed virtual object GetValue(object target);
}
[NullableAttribute("0")]
[NullableContextAttribute("1")]
internal class Newtonsoft.Json.Serialization.SerializationBinderAdapter : object {
    public SerializationBinder SerializationBinder;
    public SerializationBinderAdapter(SerializationBinder serializationBinder);
    public sealed virtual Type BindToType(string assemblyName, string typeName);
    [NullableContextAttribute("2")]
public sealed virtual void BindToName(Type serializedType, String& assemblyName, String& typeName);
}
internal class Newtonsoft.Json.Serialization.SerializationCallback : MulticastDelegate {
    public SerializationCallback(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object o, StreamingContext context);
    public virtual IAsyncResult BeginInvoke(object o, StreamingContext context, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class Newtonsoft.Json.Serialization.SerializationErrorCallback : MulticastDelegate {
    public SerializationErrorCallback(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object o, StreamingContext context, ErrorContext errorContext);
    public virtual IAsyncResult BeginInvoke(object o, StreamingContext context, ErrorContext errorContext, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class Newtonsoft.Json.Serialization.SnakeCaseNamingStrategy : NamingStrategy {
    public SnakeCaseNamingStrategy(bool processDictionaryKeys, bool overrideSpecifiedNames);
    public SnakeCaseNamingStrategy(bool processDictionaryKeys, bool overrideSpecifiedNames, bool processExtensionDataNames);
    [NullableContextAttribute("1")]
protected virtual string ResolvePropertyName(string name);
}
[NullableAttribute("0")]
[NullableContextAttribute("1")]
internal class Newtonsoft.Json.Serialization.TraceJsonReader : JsonReader {
    private JsonReader _innerReader;
    private JsonTextWriter _textWriter;
    private StringWriter _sw;
    public int Depth { get; }
    public string Path { get; }
    public char QuoteChar { get; protected internal set; }
    public JsonToken TokenType { get; }
    [NullableAttribute("2")]
public object Value { get; }
    [NullableAttribute("2")]
public Type ValueType { get; }
    private int Newtonsoft.Json.IJsonLineInfo.LineNumber { get; }
    private int Newtonsoft.Json.IJsonLineInfo.LinePosition { get; }
    public TraceJsonReader(JsonReader innerReader);
    public string GetDeserializedJsonMessage();
    public virtual bool Read();
    public virtual Nullable`1<int> ReadAsInt32();
    [NullableContextAttribute("2")]
public virtual string ReadAsString();
    [NullableContextAttribute("2")]
public virtual Byte[] ReadAsBytes();
    public virtual Nullable`1<decimal> ReadAsDecimal();
    public virtual Nullable`1<double> ReadAsDouble();
    public virtual Nullable`1<bool> ReadAsBoolean();
    public virtual Nullable`1<DateTime> ReadAsDateTime();
    public virtual Nullable`1<DateTimeOffset> ReadAsDateTimeOffset();
    public void WriteCurrentToken();
    public virtual int get_Depth();
    public virtual string get_Path();
    public virtual char get_QuoteChar();
    protected internal virtual void set_QuoteChar(char value);
    public virtual JsonToken get_TokenType();
    [NullableContextAttribute("2")]
public virtual object get_Value();
    [NullableContextAttribute("2")]
public virtual Type get_ValueType();
    public virtual void Close();
    private sealed virtual override bool Newtonsoft.Json.IJsonLineInfo.HasLineInfo();
    private sealed virtual override int Newtonsoft.Json.IJsonLineInfo.get_LineNumber();
    private sealed virtual override int Newtonsoft.Json.IJsonLineInfo.get_LinePosition();
}
[NullableAttribute("0")]
[NullableContextAttribute("1")]
internal class Newtonsoft.Json.Serialization.TraceJsonWriter : JsonWriter {
    private JsonWriter _innerWriter;
    private JsonTextWriter _textWriter;
    private StringWriter _sw;
    public TraceJsonWriter(JsonWriter innerWriter);
    public string GetSerializedJsonMessage();
    public virtual void WriteValue(decimal value);
    public virtual void WriteValue(Nullable`1<decimal> value);
    public virtual void WriteValue(bool value);
    public virtual void WriteValue(Nullable`1<bool> value);
    public virtual void WriteValue(byte value);
    public virtual void WriteValue(Nullable`1<byte> value);
    public virtual void WriteValue(char value);
    public virtual void WriteValue(Nullable`1<char> value);
    [NullableContextAttribute("2")]
public virtual void WriteValue(Byte[] value);
    public virtual void WriteValue(DateTime value);
    public virtual void WriteValue(Nullable`1<DateTime> value);
    public virtual void WriteValue(DateTimeOffset value);
    public virtual void WriteValue(Nullable`1<DateTimeOffset> value);
    public virtual void WriteValue(double value);
    public virtual void WriteValue(Nullable`1<double> value);
    public virtual void WriteUndefined();
    public virtual void WriteNull();
    public virtual void WriteValue(float value);
    public virtual void WriteValue(Nullable`1<float> value);
    public virtual void WriteValue(Guid value);
    public virtual void WriteValue(Nullable`1<Guid> value);
    public virtual void WriteValue(int value);
    public virtual void WriteValue(Nullable`1<int> value);
    public virtual void WriteValue(long value);
    public virtual void WriteValue(Nullable`1<long> value);
    [NullableContextAttribute("2")]
public virtual void WriteValue(object value);
    public virtual void WriteValue(sbyte value);
    public virtual void WriteValue(Nullable`1<sbyte> value);
    public virtual void WriteValue(short value);
    public virtual void WriteValue(Nullable`1<short> value);
    [NullableContextAttribute("2")]
public virtual void WriteValue(string value);
    public virtual void WriteValue(TimeSpan value);
    public virtual void WriteValue(Nullable`1<TimeSpan> value);
    public virtual void WriteValue(UInt32 value);
    public virtual void WriteValue(Nullable`1<UInt32> value);
    public virtual void WriteValue(ulong value);
    public virtual void WriteValue(Nullable`1<ulong> value);
    [NullableContextAttribute("2")]
public virtual void WriteValue(Uri value);
    public virtual void WriteValue(ushort value);
    public virtual void WriteValue(Nullable`1<ushort> value);
    public virtual void WriteWhitespace(string ws);
    [NullableContextAttribute("2")]
public virtual void WriteComment(string text);
    public virtual void WriteStartArray();
    public virtual void WriteEndArray();
    public virtual void WriteStartConstructor(string name);
    public virtual void WriteEndConstructor();
    public virtual void WritePropertyName(string name);
    public virtual void WritePropertyName(string name, bool escape);
    public virtual void WriteStartObject();
    public virtual void WriteEndObject();
    [NullableContextAttribute("2")]
public virtual void WriteRawValue(string json);
    [NullableContextAttribute("2")]
public virtual void WriteRaw(string json);
    public virtual void Close();
    public virtual void Flush();
}
internal enum Newtonsoft.Json.StringEscapeHandling : Enum {
    public int value__;
    public static StringEscapeHandling Default;
    public static StringEscapeHandling EscapeNonAscii;
    public static StringEscapeHandling EscapeHtml;
}
internal enum Newtonsoft.Json.TypeNameAssemblyFormatHandling : Enum {
    public int value__;
    public static TypeNameAssemblyFormatHandling Simple;
    public static TypeNameAssemblyFormatHandling Full;
}
[FlagsAttribute]
internal enum Newtonsoft.Json.TypeNameHandling : Enum {
    public int value__;
    public static TypeNameHandling None;
    public static TypeNameHandling Objects;
    public static TypeNameHandling Arrays;
    public static TypeNameHandling All;
    public static TypeNameHandling Auto;
}
[ExtensionAttribute]
[NullableAttribute("0")]
[NullableContextAttribute("1")]
internal static class Newtonsoft.Json.Utilities.AsyncUtils : object {
    public static Task`1<bool> False;
    public static Task`1<bool> True;
    internal static Task CompletedTask;
    private static AsyncUtils();
    [ExtensionAttribute]
internal static Task`1<bool> ToAsync(bool value);
    [ExtensionAttribute]
[NullableContextAttribute("2")]
public static Task CancelIfRequestedAsync(CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Task`1<T> CancelIfRequestedAsync(CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task FromCanceled(CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<T> FromCanceled(CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task WriteAsync(TextWriter writer, char value, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task WriteAsync(TextWriter writer, string value, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task WriteAsync(TextWriter writer, Char[] value, int start, int count, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<int> ReadAsync(TextReader reader, Char[] buffer, int index, int count, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static bool IsCompletedSucessfully(Task task);
}
[NullableAttribute("0")]
[NullableContextAttribute("1")]
internal class Newtonsoft.Json.Utilities.Base64Encoder : object {
    private static int Base64LineSize;
    private static int LineSizeInBytes;
    private Char[] _charsLine;
    private TextWriter _writer;
    [NullableAttribute("2")]
private Byte[] _leftOverBytes;
    private int _leftOverBytesCount;
    public Base64Encoder(TextWriter writer);
    private void ValidateEncode(Byte[] buffer, int index, int count);
    public void Encode(Byte[] buffer, int index, int count);
    private void StoreLeftOverBytes(Byte[] buffer, int index, Int32& count);
    private bool FulfillFromLeftover(Byte[] buffer, int index, Int32& count);
    public void Flush();
    private void WriteChars(Char[] chars, int index, int count);
    [AsyncStateMachineAttribute("Newtonsoft.Json.Utilities.Base64Encoder/<EncodeAsync>d__13")]
public Task EncodeAsync(Byte[] buffer, int index, int count, CancellationToken cancellationToken);
    private Task WriteCharsAsync(Char[] chars, int index, int count, CancellationToken cancellationToken);
    public Task FlushAsync(CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Newtonsoft.Json.Utilities.BidirectionalDictionary`2 : object {
    private IDictionary`2<TFirst, TSecond> _firstToSecond;
    private IDictionary`2<TSecond, TFirst> _secondToFirst;
    private string _duplicateFirstErrorMessage;
    private string _duplicateSecondErrorMessage;
    public BidirectionalDictionary`2(IEqualityComparer`1<TFirst> firstEqualityComparer, IEqualityComparer`1<TSecond> secondEqualityComparer);
    public BidirectionalDictionary`2(IEqualityComparer`1<TFirst> firstEqualityComparer, IEqualityComparer`1<TSecond> secondEqualityComparer, string duplicateFirstErrorMessage, string duplicateSecondErrorMessage);
    public void Set(TFirst first, TSecond second);
    public bool TryGetByFirst(TFirst first, TSecond& second);
    public bool TryGetBySecond(TSecond second, TFirst& first);
}
[NullableAttribute("0")]
[NullableContextAttribute("2")]
internal static class Newtonsoft.Json.Utilities.BufferUtils : object {
    [NullableContextAttribute("1")]
public static Char[] RentBuffer(IArrayPool`1<char> bufferPool, int minSize);
    public static void ReturnBuffer(IArrayPool`1<char> bufferPool, Char[] buffer);
    public static Char[] EnsureBufferSize(IArrayPool`1<char> bufferPool, int size, Char[] buffer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Newtonsoft.Json.Utilities.CollectionUtils : object {
    public static bool IsNullOrEmpty(ICollection`1<T> collection);
    [ExtensionAttribute]
public static void AddRange(IList`1<T> initial, IEnumerable`1<T> collection);
    public static bool IsDictionaryType(Type type);
    public static ConstructorInfo ResolveEnumerableCollectionConstructor(Type collectionType, Type collectionItemType);
    public static ConstructorInfo ResolveEnumerableCollectionConstructor(Type collectionType, Type collectionItemType, Type constructorArgumentType);
    [ExtensionAttribute]
public static bool AddDistinct(IList`1<T> list, T value);
    [ExtensionAttribute]
public static bool AddDistinct(IList`1<T> list, T value, IEqualityComparer`1<T> comparer);
    [ExtensionAttribute]
public static bool ContainsValue(IEnumerable`1<TSource> source, TSource value, IEqualityComparer`1<TSource> comparer);
    [ExtensionAttribute]
public static bool AddRangeDistinct(IList`1<T> list, IEnumerable`1<T> values, IEqualityComparer`1<T> comparer);
    [ExtensionAttribute]
public static int IndexOf(IEnumerable`1<T> collection, Func`2<T, bool> predicate);
    [ExtensionAttribute]
public static bool Contains(List`1<T> list, T value, IEqualityComparer comparer);
    [ExtensionAttribute]
public static int IndexOfReference(List`1<T> list, T item);
    [ExtensionAttribute]
public static void FastReverse(List`1<T> list);
    private static IList`1<int> GetDimensions(IList values, int dimensionsCount);
    private static void CopyFromJaggedToMultidimensionalArray(IList values, Array multidimensionalArray, Int32[] indices);
    private static object JaggedArrayGetValue(IList values, Int32[] indices);
    public static Array ToMultidimensionalArray(IList values, Type type, int rank);
    public static T[] ArrayEmpty();
}
[NullableAttribute("0")]
[NullableContextAttribute("1")]
internal class Newtonsoft.Json.Utilities.CollectionWrapper`1 : object {
    [NullableAttribute("2")]
private IList _list;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ICollection`1<T> _genericCollection;
    [NullableAttribute("2")]
private object _syncRoot;
    public int Count { get; }
    public bool IsReadOnly { get; }
    private bool System.Collections.IList.IsFixedSize { get; }
    private object System.Collections.IList.Item { get; private set; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    public object UnderlyingCollection { get; }
    public CollectionWrapper`1(IList list);
    public CollectionWrapper`1(ICollection`1<T> list);
    public virtual void Add(T item);
    public virtual void Clear();
    public virtual bool Contains(T item);
    public virtual void CopyTo(T[] array, int arrayIndex);
    public virtual int get_Count();
    public virtual bool get_IsReadOnly();
    public virtual bool Remove(T item);
    public virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    private sealed virtual override void System.Collections.IList.RemoveAt(int index);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override void System.Collections.IList.Remove(object value);
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int arrayIndex);
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private static void VerifyValueType(object value);
    private static bool IsCompatibleObject(object value);
    public sealed virtual object get_UnderlyingCollection();
}
[NullableAttribute("0")]
[NullableContextAttribute("1")]
internal static class Newtonsoft.Json.Utilities.ConvertUtils : object {
    private static Dictionary`2<Type, PrimitiveTypeCode> TypeCodeMap;
    private static TypeInformation[] PrimitiveTypeCodes;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static ThreadSafeStore`2<StructMultiKey`2<Type, Type>, Func`2<object, object>> CastConverters;
    private static ConvertUtils();
    public static PrimitiveTypeCode GetTypeCode(Type t);
    public static PrimitiveTypeCode GetTypeCode(Type t, Boolean& isEnum);
    public static TypeInformation GetTypeInformation(IConvertible convertable);
    public static bool IsConvertible(Type t);
    public static TimeSpan ParseTimeSpan(string input);
    [NullableContextAttribute("2")]
private static Func`2<object, object> CreateCastConverter(StructMultiKey`2<Type, Type> t);
    internal static BigInteger ToBigInteger(object value);
    public static object FromBigInteger(BigInteger i, Type targetType);
    public static object Convert(object initialValue, CultureInfo culture, Type targetType);
    private static bool TryConvert(object initialValue, CultureInfo culture, Type targetType, Object& value);
    private static ConvertResult TryConvertInternal(object initialValue, CultureInfo culture, Type targetType, Object& value);
    public static object ConvertOrCast(object initialValue, CultureInfo culture, Type targetType);
    private static object EnsureTypeAssignable(object value, Type initialType, Type targetType);
    public static bool VersionTryParse(string input, Version& result);
    public static bool IsInteger(object value);
    public static ParseResult Int32TryParse(Char[] chars, int start, int length, Int32& value);
    public static ParseResult Int64TryParse(Char[] chars, int start, int length, Int64& value);
    public static ParseResult DecimalTryParse(Char[] chars, int start, int length, Decimal& value);
    public static bool TryConvertGuid(string s, Guid& g);
    public static bool TryHexTextToInt(Char[] text, int start, int end, Int32& value);
}
internal class Newtonsoft.Json.Utilities.Creator`1 : MulticastDelegate {
    public Creator`1(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual T Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual T EndInvoke(IAsyncResult result);
}
[NullableAttribute("0")]
[NullableContextAttribute("1")]
internal class Newtonsoft.Json.Utilities.DateTimeParser : ValueType {
    public int Year;
    public int Month;
    public int Day;
    public int Hour;
    public int Minute;
    public int Second;
    public int Fraction;
    public int ZoneHour;
    public int ZoneMinute;
    public ParserTimeZone Zone;
    private Char[] _text;
    private int _end;
    private static Int32[] Power10;
    private static int Lzyyyy;
    private static int Lzyyyy_;
    private static int Lzyyyy_MM;
    private static int Lzyyyy_MM_;
    private static int Lzyyyy_MM_dd;
    private static int Lzyyyy_MM_ddT;
    private static int LzHH;
    private static int LzHH_;
    private static int LzHH_mm;
    private static int LzHH_mm_;
    private static int LzHH_mm_ss;
    private static int Lz_;
    private static int Lz_zz;
    private static short MaxFractionDigits;
    private static DateTimeParser();
    public bool Parse(Char[] text, int startIndex, int length);
    private bool ParseDate(int start);
    private bool ParseTimeAndZoneAndWhitespace(int start);
    private bool ParseTime(Int32& start);
    private bool ParseZone(int start);
    private bool Parse4Digit(int start, Int32& num);
    private bool Parse2Digit(int start, Int32& num);
    private bool ParseChar(int start, char ch);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Newtonsoft.Json.Utilities.DateTimeUtils : object {
    internal static long InitialJavaScriptDateTicks;
    private static string IsoDateFormat;
    private static int DaysPer100Years;
    private static int DaysPer400Years;
    private static int DaysPer4Years;
    private static int DaysPerYear;
    private static long TicksPerDay;
    private static Int32[] DaysToMonth365;
    private static Int32[] DaysToMonth366;
    private static DateTimeUtils();
    [ExtensionAttribute]
public static TimeSpan GetUtcOffset(DateTime d);
    public static XmlDateTimeSerializationMode ToSerializationMode(DateTimeKind kind);
    internal static DateTime EnsureDateTime(DateTime value, DateTimeZoneHandling timeZone);
    private static DateTime SwitchToLocalTime(DateTime value);
    private static DateTime SwitchToUtcTime(DateTime value);
    private static long ToUniversalTicks(DateTime dateTime);
    private static long ToUniversalTicks(DateTime dateTime, TimeSpan offset);
    internal static long ConvertDateTimeToJavaScriptTicks(DateTime dateTime, TimeSpan offset);
    internal static long ConvertDateTimeToJavaScriptTicks(DateTime dateTime);
    internal static long ConvertDateTimeToJavaScriptTicks(DateTime dateTime, bool convertToUtc);
    private static long UniversalTicksToJavaScriptTicks(long universalTicks);
    internal static DateTime ConvertJavaScriptTicksToDateTime(long javaScriptTicks);
    internal static bool TryParseDateTimeIso(StringReference text, DateTimeZoneHandling dateTimeZoneHandling, DateTime& dt);
    internal static bool TryParseDateTimeOffsetIso(StringReference text, DateTimeOffset& dt);
    private static DateTime CreateDateTime(DateTimeParser dateTimeParser);
    internal static bool TryParseDateTime(StringReference s, DateTimeZoneHandling dateTimeZoneHandling, string dateFormatString, CultureInfo culture, DateTime& dt);
    internal static bool TryParseDateTime(string s, DateTimeZoneHandling dateTimeZoneHandling, string dateFormatString, CultureInfo culture, DateTime& dt);
    internal static bool TryParseDateTimeOffset(StringReference s, string dateFormatString, CultureInfo culture, DateTimeOffset& dt);
    internal static bool TryParseDateTimeOffset(string s, string dateFormatString, CultureInfo culture, DateTimeOffset& dt);
    private static bool TryParseMicrosoftDate(StringReference text, Int64& ticks, TimeSpan& offset, DateTimeKind& kind);
    private static bool TryParseDateTimeMicrosoft(StringReference text, DateTimeZoneHandling dateTimeZoneHandling, DateTime& dt);
    private static bool TryParseDateTimeExact(string text, DateTimeZoneHandling dateTimeZoneHandling, string dateFormatString, CultureInfo culture, DateTime& dt);
    private static bool TryParseDateTimeOffsetMicrosoft(StringReference text, DateTimeOffset& dt);
    private static bool TryParseDateTimeOffsetExact(string text, string dateFormatString, CultureInfo culture, DateTimeOffset& dt);
    private static bool TryReadOffset(StringReference offsetText, int startIndex, TimeSpan& offset);
    internal static void WriteDateTimeString(TextWriter writer, DateTime value, DateFormatHandling format, string formatString, CultureInfo culture);
    internal static int WriteDateTimeString(Char[] chars, int start, DateTime value, Nullable`1<TimeSpan> offset, DateTimeKind kind, DateFormatHandling format);
    internal static int WriteDefaultIsoDate(Char[] chars, int start, DateTime dt);
    private static void CopyIntToCharArray(Char[] chars, int start, int value, int digits);
    internal static int WriteDateTimeOffset(Char[] chars, int start, TimeSpan offset, DateFormatHandling format);
    internal static void WriteDateTimeOffsetString(TextWriter writer, DateTimeOffset value, DateFormatHandling format, string formatString, CultureInfo culture);
    private static void GetDateValues(DateTime td, Int32& year, Int32& month, Int32& day);
}
[DefaultMemberAttribute("Item")]
[NullableAttribute("0")]
[NullableContextAttribute("1")]
internal class Newtonsoft.Json.Utilities.DictionaryWrapper`2 : object {
    [NullableAttribute("2")]
private IDictionary _dictionary;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IDictionary`2<TKey, TValue> _genericDictionary;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IReadOnlyDictionary`2<TKey, TValue> _readOnlyDictionary;
    [NullableAttribute("2")]
private object _syncRoot;
    internal IDictionary`2<TKey, TValue> GenericDictionary { get; }
    public ICollection`1<TKey> Keys { get; }
    public ICollection`1<TValue> Values { get; }
    public TValue Item { get; public set; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    [NullableAttribute("2")]
private object System.Collections.IDictionary.Item { get; private set; }
    private bool System.Collections.IDictionary.IsFixedSize { get; }
    private ICollection System.Collections.IDictionary.Keys { get; }
    private ICollection System.Collections.IDictionary.Values { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    public object UnderlyingDictionary { get; }
    public DictionaryWrapper`2(IDictionary dictionary);
    public DictionaryWrapper`2(IDictionary`2<TKey, TValue> dictionary);
    public DictionaryWrapper`2(IReadOnlyDictionary`2<TKey, TValue> dictionary);
    internal IDictionary`2<TKey, TValue> get_GenericDictionary();
    public sealed virtual void Add(TKey key, TValue value);
    public sealed virtual bool ContainsKey(TKey key);
    public sealed virtual ICollection`1<TKey> get_Keys();
    public sealed virtual bool Remove(TKey key);
    public sealed virtual bool TryGetValue(TKey key, TValue& value);
    public sealed virtual ICollection`1<TValue> get_Values();
    public sealed virtual TValue get_Item(TKey key);
    public sealed virtual void set_Item(TKey key, TValue value);
    public sealed virtual void Add(KeyValuePair`2<TKey, TValue> item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(KeyValuePair`2<TKey, TValue> item);
    public sealed virtual void CopyTo(KeyValuePair`2[] array, int arrayIndex);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool Remove(KeyValuePair`2<TKey, TValue> item);
    public sealed virtual IEnumerator`1<KeyValuePair`2<TKey, TValue>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override void System.Collections.IDictionary.Add(object key, object value);
    private sealed virtual override object System.Collections.IDictionary.get_Item(object key);
    private sealed virtual override void System.Collections.IDictionary.set_Item(object key, object value);
    private sealed virtual override IDictionaryEnumerator System.Collections.IDictionary.GetEnumerator();
    private sealed virtual override bool System.Collections.IDictionary.Contains(object key);
    private sealed virtual override bool System.Collections.IDictionary.get_IsFixedSize();
    private sealed virtual override ICollection System.Collections.IDictionary.get_Keys();
    public sealed virtual void Remove(object key);
    private sealed virtual override ICollection System.Collections.IDictionary.get_Values();
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    public sealed virtual object get_UnderlyingDictionary();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Newtonsoft.Json.Utilities.DynamicProxy`1 : object {
    public virtual IEnumerable`1<string> GetDynamicMemberNames(T instance);
    public virtual bool TryBinaryOperation(T instance, BinaryOperationBinder binder, object arg, Object& result);
    public virtual bool TryConvert(T instance, ConvertBinder binder, Object& result);
    public virtual bool TryCreateInstance(T instance, CreateInstanceBinder binder, Object[] args, Object& result);
    public virtual bool TryDeleteIndex(T instance, DeleteIndexBinder binder, Object[] indexes);
    public virtual bool TryDeleteMember(T instance, DeleteMemberBinder binder);
    public virtual bool TryGetIndex(T instance, GetIndexBinder binder, Object[] indexes, Object& result);
    public virtual bool TryGetMember(T instance, GetMemberBinder binder, Object& result);
    public virtual bool TryInvoke(T instance, InvokeBinder binder, Object[] args, Object& result);
    public virtual bool TryInvokeMember(T instance, InvokeMemberBinder binder, Object[] args, Object& result);
    public virtual bool TrySetIndex(T instance, SetIndexBinder binder, Object[] indexes, object value);
    public virtual bool TrySetMember(T instance, SetMemberBinder binder, object value);
    public virtual bool TryUnaryOperation(T instance, UnaryOperationBinder binder, Object& result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Newtonsoft.Json.Utilities.DynamicProxyMetaObject`1 : DynamicMetaObject {
    private DynamicProxy`1<T> _proxy;
    private static Expression[] NoArgs { get; }
    internal DynamicProxyMetaObject`1(Expression expression, T value, DynamicProxy`1<T> proxy);
    private bool IsOverridden(string method);
    public virtual DynamicMetaObject BindGetMember(GetMemberBinder binder);
    public virtual DynamicMetaObject BindSetMember(SetMemberBinder binder, DynamicMetaObject value);
    public virtual DynamicMetaObject BindDeleteMember(DeleteMemberBinder binder);
    public virtual DynamicMetaObject BindConvert(ConvertBinder binder);
    public virtual DynamicMetaObject BindInvokeMember(InvokeMemberBinder binder, DynamicMetaObject[] args);
    public virtual DynamicMetaObject BindCreateInstance(CreateInstanceBinder binder, DynamicMetaObject[] args);
    public virtual DynamicMetaObject BindInvoke(InvokeBinder binder, DynamicMetaObject[] args);
    public virtual DynamicMetaObject BindBinaryOperation(BinaryOperationBinder binder, DynamicMetaObject arg);
    public virtual DynamicMetaObject BindUnaryOperation(UnaryOperationBinder binder);
    public virtual DynamicMetaObject BindGetIndex(GetIndexBinder binder, DynamicMetaObject[] indexes);
    public virtual DynamicMetaObject BindSetIndex(SetIndexBinder binder, DynamicMetaObject[] indexes, DynamicMetaObject value);
    public virtual DynamicMetaObject BindDeleteIndex(DeleteIndexBinder binder, DynamicMetaObject[] indexes);
    private static Expression[] get_NoArgs();
    private static IEnumerable`1<Expression> GetArgs(DynamicMetaObject[] args);
    private static Expression[] GetArgArray(DynamicMetaObject[] args);
    private static Expression[] GetArgArray(DynamicMetaObject[] args, DynamicMetaObject value);
    private static ConstantExpression Constant(DynamicMetaObjectBinder binder);
    private DynamicMetaObject CallMethodWithResult(string methodName, DynamicMetaObjectBinder binder, IEnumerable`1<Expression> args, Fallback<T> fallback, Fallback<T> fallbackInvoke);
    private DynamicMetaObject BuildCallMethodWithResult(string methodName, DynamicMetaObjectBinder binder, IEnumerable`1<Expression> args, DynamicMetaObject fallbackResult, Fallback<T> fallbackInvoke);
    private DynamicMetaObject CallMethodReturnLast(string methodName, DynamicMetaObjectBinder binder, IEnumerable`1<Expression> args, Fallback<T> fallback);
    private DynamicMetaObject CallMethodNoResult(string methodName, DynamicMetaObjectBinder binder, Expression[] args, Fallback<T> fallback);
    private BindingRestrictions GetRestrictions();
    public virtual IEnumerable`1<string> GetDynamicMemberNames();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Newtonsoft.Json.Utilities.DynamicReflectionDelegateFactory : ReflectionDelegateFactory {
    [CompilerGeneratedAttribute]
private static DynamicReflectionDelegateFactory <Instance>k__BackingField;
    internal static DynamicReflectionDelegateFactory Instance { get; }
    private static DynamicReflectionDelegateFactory();
    [CompilerGeneratedAttribute]
internal static DynamicReflectionDelegateFactory get_Instance();
    private static DynamicMethod CreateDynamicMethod(string name, Type returnType, Type[] parameterTypes, Type owner);
    public virtual ObjectConstructor`1<object> CreateParameterizedConstructor(MethodBase method);
    public virtual MethodCall`2<T, object> CreateMethodCall(MethodBase method);
    private void GenerateCreateMethodCallIL(MethodBase method, ILGenerator generator, int argsIndex);
    public virtual Func`1<T> CreateDefaultConstructor(Type type);
    private void GenerateCreateDefaultConstructorIL(Type type, ILGenerator generator, Type delegateType);
    public virtual Func`2<T, object> CreateGet(PropertyInfo propertyInfo);
    private void GenerateCreateGetPropertyIL(PropertyInfo propertyInfo, ILGenerator generator);
    public virtual Func`2<T, object> CreateGet(FieldInfo fieldInfo);
    private void GenerateCreateGetFieldIL(FieldInfo fieldInfo, ILGenerator generator);
    public virtual Action`2<T, object> CreateSet(FieldInfo fieldInfo);
    internal static void GenerateCreateSetFieldIL(FieldInfo fieldInfo, ILGenerator generator);
    public virtual Action`2<T, object> CreateSet(PropertyInfo propertyInfo);
    internal static void GenerateCreateSetPropertyIL(PropertyInfo propertyInfo, ILGenerator generator);
}
[ExtensionAttribute]
[NullableAttribute("0")]
[NullableContextAttribute("1")]
internal static class Newtonsoft.Json.Utilities.DynamicUtils : object {
    [ExtensionAttribute]
public static IEnumerable`1<string> GetDynamicMemberNames(IDynamicMetaObjectProvider dynamicProvider);
}
[NullableAttribute("0")]
[NullableContextAttribute("1")]
internal class Newtonsoft.Json.Utilities.EnumInfo : object {
    public bool IsFlags;
    public UInt64[] Values;
    public String[] Names;
    public String[] ResolvedNames;
    public EnumInfo(bool isFlags, UInt64[] values, String[] names, String[] resolvedNames);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Newtonsoft.Json.Utilities.EnumUtils : object {
    private static char EnumSeparatorChar;
    private static string EnumSeparatorString;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static ThreadSafeStore`2<StructMultiKey`2<Type, NamingStrategy>, EnumInfo> ValuesAndNamesPerEnum;
    private static CamelCaseNamingStrategy _camelCaseNamingStrategy;
    private static EnumUtils();
    private static EnumInfo InitializeValuesAndNames(StructMultiKey`2<Type, NamingStrategy> key);
    [NullableContextAttribute("0")]
public static IList`1<T> GetFlagsValues(T value);
    public static bool TryToString(Type enumType, object value, bool camelCase, String& name);
    public static bool TryToString(Type enumType, object value, NamingStrategy namingStrategy, String& name);
    private static string InternalFlagsFormat(EnumInfo entry, ulong result);
    public static EnumInfo GetEnumValuesAndNames(Type enumType);
    private static ulong ToUInt64(object value);
    public static object ParseEnum(Type enumType, NamingStrategy namingStrategy, string value, bool disallowNumber);
    private static Nullable`1<int> MatchName(string value, String[] enumNames, String[] resolvedNames, int valueIndex, int valueSubstringLength, StringComparison comparison);
    private static Nullable`1<int> FindIndexByName(String[] enumNames, string value, int valueIndex, int valueSubstringLength, StringComparison comparison);
}
[NullableAttribute("0")]
[NullableContextAttribute("1")]
internal class Newtonsoft.Json.Utilities.ExpressionReflectionDelegateFactory : ReflectionDelegateFactory {
    private static ExpressionReflectionDelegateFactory _instance;
    internal static ReflectionDelegateFactory Instance { get; }
    private static ExpressionReflectionDelegateFactory();
    internal static ReflectionDelegateFactory get_Instance();
    public virtual ObjectConstructor`1<object> CreateParameterizedConstructor(MethodBase method);
    public virtual MethodCall`2<T, object> CreateMethodCall(MethodBase method);
    private Expression BuildMethodCall(MethodBase method, Type type, ParameterExpression targetParameterExpression, ParameterExpression argsParameterExpression);
    public virtual Func`1<T> CreateDefaultConstructor(Type type);
    public virtual Func`2<T, object> CreateGet(PropertyInfo propertyInfo);
    public virtual Func`2<T, object> CreateGet(FieldInfo fieldInfo);
    public virtual Action`2<T, object> CreateSet(FieldInfo fieldInfo);
    public virtual Action`2<T, object> CreateSet(PropertyInfo propertyInfo);
    private Expression EnsureCastExpression(Expression expression, Type targetType, bool allowWidening);
}
[NullableAttribute("0")]
[NullableContextAttribute("2")]
internal class Newtonsoft.Json.Utilities.FSharpFunction : object {
    private object _instance;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private MethodCall`2<object, object> _invoker;
    public FSharpFunction(object instance, MethodCall`2<object, object> invoker);
    [NullableContextAttribute("1")]
public object Invoke(Object[] args);
}
[NullableAttribute("0")]
[NullableContextAttribute("1")]
internal class Newtonsoft.Json.Utilities.FSharpUtils : object {
    private static object Lock;
    [NullableAttribute("2")]
private static FSharpUtils _instance;
    private MethodInfo _ofSeq;
    private Type _mapType;
    [CompilerGeneratedAttribute]
private Assembly <FSharpCoreAssembly>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private MethodCall`2<object, object> <IsUnion>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private MethodCall`2<object, object> <GetUnionCases>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private MethodCall`2<object, object> <PreComputeUnionTagReader>k__BackingField;
    [CompilerGeneratedAttribute]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private MethodCall`2<object, object> <PreComputeUnionReader>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private MethodCall`2<object, object> <PreComputeUnionConstructor>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<object, object> <GetUnionCaseInfoDeclaringType>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<object, object> <GetUnionCaseInfoName>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<object, object> <GetUnionCaseInfoTag>k__BackingField;
    [CompilerGeneratedAttribute]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private MethodCall`2<object, object> <GetUnionCaseInfoFields>k__BackingField;
    public static string FSharpSetTypeName;
    public static string FSharpListTypeName;
    public static string FSharpMapTypeName;
    public static FSharpUtils Instance { get; }
    public Assembly FSharpCoreAssembly { get; private set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public MethodCall`2<object, object> IsUnion { get; private set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public MethodCall`2<object, object> GetUnionCases { get; private set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public MethodCall`2<object, object> PreComputeUnionTagReader { get; private set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public MethodCall`2<object, object> PreComputeUnionReader { get; private set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public MethodCall`2<object, object> PreComputeUnionConstructor { get; private set; }
    public Func`2<object, object> GetUnionCaseInfoDeclaringType { get; private set; }
    public Func`2<object, object> GetUnionCaseInfoName { get; private set; }
    public Func`2<object, object> GetUnionCaseInfoTag { get; private set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public MethodCall`2<object, object> GetUnionCaseInfoFields { get; private set; }
    private FSharpUtils(Assembly fsharpCoreAssembly);
    private static FSharpUtils();
    public static FSharpUtils get_Instance();
    [CompilerGeneratedAttribute]
public Assembly get_FSharpCoreAssembly();
    [CompilerGeneratedAttribute]
private void set_FSharpCoreAssembly(Assembly value);
    [CompilerGeneratedAttribute]
public MethodCall`2<object, object> get_IsUnion();
    [CompilerGeneratedAttribute]
private void set_IsUnion(MethodCall`2<object, object> value);
    [CompilerGeneratedAttribute]
public MethodCall`2<object, object> get_GetUnionCases();
    [CompilerGeneratedAttribute]
private void set_GetUnionCases(MethodCall`2<object, object> value);
    [CompilerGeneratedAttribute]
public MethodCall`2<object, object> get_PreComputeUnionTagReader();
    [CompilerGeneratedAttribute]
private void set_PreComputeUnionTagReader(MethodCall`2<object, object> value);
    [CompilerGeneratedAttribute]
public MethodCall`2<object, object> get_PreComputeUnionReader();
    [CompilerGeneratedAttribute]
private void set_PreComputeUnionReader(MethodCall`2<object, object> value);
    [CompilerGeneratedAttribute]
public MethodCall`2<object, object> get_PreComputeUnionConstructor();
    [CompilerGeneratedAttribute]
private void set_PreComputeUnionConstructor(MethodCall`2<object, object> value);
    [CompilerGeneratedAttribute]
public Func`2<object, object> get_GetUnionCaseInfoDeclaringType();
    [CompilerGeneratedAttribute]
private void set_GetUnionCaseInfoDeclaringType(Func`2<object, object> value);
    [CompilerGeneratedAttribute]
public Func`2<object, object> get_GetUnionCaseInfoName();
    [CompilerGeneratedAttribute]
private void set_GetUnionCaseInfoName(Func`2<object, object> value);
    [CompilerGeneratedAttribute]
public Func`2<object, object> get_GetUnionCaseInfoTag();
    [CompilerGeneratedAttribute]
private void set_GetUnionCaseInfoTag(Func`2<object, object> value);
    [CompilerGeneratedAttribute]
public MethodCall`2<object, object> get_GetUnionCaseInfoFields();
    [CompilerGeneratedAttribute]
private void set_GetUnionCaseInfoFields(MethodCall`2<object, object> value);
    public static void EnsureInitialized(Assembly fsharpCoreAssembly);
    private static MethodInfo GetMethodWithNonPublicFallback(Type type, string methodName, BindingFlags bindingFlags);
    private static MethodCall`2<object, object> CreateFSharpFuncCall(Type type, string methodName);
    public ObjectConstructor`1<object> CreateSeq(Type t);
    public ObjectConstructor`1<object> CreateMap(Type keyType, Type valueType);
    [NullableContextAttribute("2")]
public ObjectConstructor`1<object> BuildMapCreator();
}
[NullableAttribute("0")]
[NullableContextAttribute("1")]
[ExtensionAttribute]
internal static class Newtonsoft.Json.Utilities.ILGeneratorExtensions : object {
    [ExtensionAttribute]
public static void PushInstance(ILGenerator generator, Type type);
    [ExtensionAttribute]
public static void PushArrayInstance(ILGenerator generator, int argsIndex, int arrayIndex);
    [ExtensionAttribute]
public static void BoxIfNeeded(ILGenerator generator, Type type);
    [ExtensionAttribute]
public static void UnboxIfNeeded(ILGenerator generator, Type type);
    [ExtensionAttribute]
public static void CallMethod(ILGenerator generator, MethodInfo methodInfo);
    [ExtensionAttribute]
public static void Return(ILGenerator generator);
}
[NullableAttribute("0")]
[NullableContextAttribute("1")]
internal static class Newtonsoft.Json.Utilities.ImmutableCollectionsUtils : object {
    private static string ImmutableListGenericInterfaceTypeName;
    private static string ImmutableQueueGenericInterfaceTypeName;
    private static string ImmutableStackGenericInterfaceTypeName;
    private static string ImmutableSetGenericInterfaceTypeName;
    private static string ImmutableArrayTypeName;
    private static string ImmutableArrayGenericTypeName;
    private static string ImmutableListTypeName;
    private static string ImmutableListGenericTypeName;
    private static string ImmutableQueueTypeName;
    private static string ImmutableQueueGenericTypeName;
    private static string ImmutableStackTypeName;
    private static string ImmutableStackGenericTypeName;
    private static string ImmutableSortedSetTypeName;
    private static string ImmutableSortedSetGenericTypeName;
    private static string ImmutableHashSetTypeName;
    private static string ImmutableHashSetGenericTypeName;
    private static IList`1<ImmutableCollectionTypeInfo> ArrayContractImmutableCollectionDefinitions;
    private static string ImmutableDictionaryGenericInterfaceTypeName;
    private static string ImmutableDictionaryTypeName;
    private static string ImmutableDictionaryGenericTypeName;
    private static string ImmutableSortedDictionaryTypeName;
    private static string ImmutableSortedDictionaryGenericTypeName;
    private static IList`1<ImmutableCollectionTypeInfo> DictionaryContractImmutableCollectionDefinitions;
    private static ImmutableCollectionsUtils();
    internal static bool TryBuildImmutableForArrayContract(Type underlyingType, Type collectionItemType, Type& createdType, ObjectConstructor`1& parameterizedCreator);
    internal static bool TryBuildImmutableForDictionaryContract(Type underlyingType, Type keyItemType, Type valueItemType, Type& createdType, ObjectConstructor`1& parameterizedCreator);
}
internal interface Newtonsoft.Json.Utilities.IWrappedCollection {
    [NullableAttribute("1")]
public object UnderlyingCollection { get; }
    [NullableContextAttribute("1")]
public abstract virtual object get_UnderlyingCollection();
}
internal interface Newtonsoft.Json.Utilities.IWrappedDictionary {
    [NullableAttribute("1")]
public object UnderlyingDictionary { get; }
    [NullableContextAttribute("1")]
public abstract virtual object get_UnderlyingDictionary();
}
[NullableAttribute("0")]
[NullableContextAttribute("1")]
internal static class Newtonsoft.Json.Utilities.JavaScriptUtils : object {
    internal static Boolean[] SingleQuoteCharEscapeFlags;
    internal static Boolean[] DoubleQuoteCharEscapeFlags;
    internal static Boolean[] HtmlCharEscapeFlags;
    private static int UnicodeTextLength;
    private static string EscapedUnicodeText;
    private static JavaScriptUtils();
    public static Boolean[] GetCharEscapeFlags(StringEscapeHandling stringEscapeHandling, char quoteChar);
    public static bool ShouldEscapeJavaScriptString(string s, Boolean[] charEscapeFlags);
    [NullableContextAttribute("2")]
public static void WriteEscapedJavaScriptString(TextWriter writer, string s, char delimiter, bool appendDelimiters, Boolean[] charEscapeFlags, StringEscapeHandling stringEscapeHandling, IArrayPool`1<char> bufferPool, Char[]& writeBuffer);
    public static string ToEscapedJavaScriptString(string value, char delimiter, bool appendDelimiters, StringEscapeHandling stringEscapeHandling);
    private static int FirstCharToEscape(string s, Boolean[] charEscapeFlags, StringEscapeHandling stringEscapeHandling);
    public static Task WriteEscapedJavaScriptStringAsync(TextWriter writer, string s, char delimiter, bool appendDelimiters, Boolean[] charEscapeFlags, StringEscapeHandling stringEscapeHandling, JsonTextWriter client, Char[] writeBuffer, CancellationToken cancellationToken);
    private static Task WriteEscapedJavaScriptStringWithDelimitersAsync(TextWriter writer, string s, char delimiter, Boolean[] charEscapeFlags, StringEscapeHandling stringEscapeHandling, JsonTextWriter client, Char[] writeBuffer, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.Utilities.JavaScriptUtils/<WriteEscapedJavaScriptStringWithDelimitersAsync>d__13")]
private static Task WriteEscapedJavaScriptStringWithDelimitersAsync(Task task, TextWriter writer, string s, char delimiter, Boolean[] charEscapeFlags, StringEscapeHandling stringEscapeHandling, JsonTextWriter client, Char[] writeBuffer, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.Utilities.JavaScriptUtils/<WriteCharAsync>d__14")]
public static Task WriteCharAsync(Task task, TextWriter writer, char c, CancellationToken cancellationToken);
    private static Task WriteEscapedJavaScriptStringWithoutDelimitersAsync(TextWriter writer, string s, Boolean[] charEscapeFlags, StringEscapeHandling stringEscapeHandling, JsonTextWriter client, Char[] writeBuffer, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Newtonsoft.Json.Utilities.JavaScriptUtils/<WriteDefinitelyEscapedJavaScriptStringWithoutDelimitersAsync>d__16")]
private static Task WriteDefinitelyEscapedJavaScriptStringWithoutDelimitersAsync(TextWriter writer, string s, int lastWritePosition, Boolean[] charEscapeFlags, StringEscapeHandling stringEscapeHandling, JsonTextWriter client, Char[] writeBuffer, CancellationToken cancellationToken);
    public static bool TryGetDateFromConstructorJson(JsonReader reader, DateTime& dateTime, String& errorMessage);
    private static bool TryGetDateConstructorValue(JsonReader reader, Nullable`1& integer, String& errorMessage);
}
internal static class Newtonsoft.Json.Utilities.JsonTokenUtils : object {
    internal static bool IsEndToken(JsonToken token);
    internal static bool IsStartToken(JsonToken token);
    internal static bool IsPrimitiveToken(JsonToken token);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Newtonsoft.Json.Utilities.LateBoundReflectionDelegateFactory : ReflectionDelegateFactory {
    private static LateBoundReflectionDelegateFactory _instance;
    internal static ReflectionDelegateFactory Instance { get; }
    private static LateBoundReflectionDelegateFactory();
    internal static ReflectionDelegateFactory get_Instance();
    public virtual ObjectConstructor`1<object> CreateParameterizedConstructor(MethodBase method);
    public virtual MethodCall`2<T, object> CreateMethodCall(MethodBase method);
    public virtual Func`1<T> CreateDefaultConstructor(Type type);
    public virtual Func`2<T, object> CreateGet(PropertyInfo propertyInfo);
    public virtual Func`2<T, object> CreateGet(FieldInfo fieldInfo);
    public virtual Action`2<T, object> CreateSet(FieldInfo fieldInfo);
    public virtual Action`2<T, object> CreateSet(PropertyInfo propertyInfo);
}
internal static class Newtonsoft.Json.Utilities.MathUtils : object {
    public static int IntLength(ulong i);
    public static char IntToHex(int n);
    public static Nullable`1<int> Min(Nullable`1<int> val1, Nullable`1<int> val2);
    public static Nullable`1<int> Max(Nullable`1<int> val1, Nullable`1<int> val2);
    public static Nullable`1<double> Max(Nullable`1<double> val1, Nullable`1<double> val2);
    public static bool ApproxEquals(double d1, double d2);
}
internal class Newtonsoft.Json.Utilities.MethodCall`2 : MulticastDelegate {
    public MethodCall`2(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual TResult Invoke(T target, Object[] args);
    public virtual IAsyncResult BeginInvoke(T target, Object[] args, AsyncCallback callback, object object);
    public virtual TResult EndInvoke(IAsyncResult result);
}
[NullableAttribute("0")]
[NullableContextAttribute("1")]
internal static class Newtonsoft.Json.Utilities.MiscellaneousUtils : object {
    [ConditionalAttribute("DEBUG")]
[NullableContextAttribute("2")]
public static void Assert(bool condition, string message);
    [NullableContextAttribute("2")]
public static bool ValueEquals(object objA, object objB);
    public static ArgumentOutOfRangeException CreateArgumentOutOfRangeException(string paramName, object actualValue, string message);
    public static string ToString(object value);
    public static int ByteArrayCompare(Byte[] a1, Byte[] a2);
    public static string GetPrefix(string qualifiedName);
    public static string GetLocalName(string qualifiedName);
    public static void GetQualifiedNameParts(string qualifiedName, String& prefix, String& localName);
    internal static RegexOptions GetRegexOptions(string optionsText);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Newtonsoft.Json.Utilities.NoThrowExpressionVisitor : ExpressionVisitor {
    internal static object ErrorResult;
    private static NoThrowExpressionVisitor();
    protected virtual Expression VisitConditional(ConditionalExpression node);
}
[NullableAttribute("0")]
[NullableContextAttribute("1")]
internal class Newtonsoft.Json.Utilities.NoThrowGetBinderMember : GetMemberBinder {
    private GetMemberBinder _innerBinder;
    public NoThrowGetBinderMember(GetMemberBinder innerBinder);
    public virtual DynamicMetaObject FallbackGetMember(DynamicMetaObject target, DynamicMetaObject errorSuggestion);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Newtonsoft.Json.Utilities.NoThrowSetBinderMember : SetMemberBinder {
    private SetMemberBinder _innerBinder;
    public NoThrowSetBinderMember(SetMemberBinder innerBinder);
    public virtual DynamicMetaObject FallbackSetMember(DynamicMetaObject target, DynamicMetaObject value, DynamicMetaObject errorSuggestion);
}
internal enum Newtonsoft.Json.Utilities.ParseResult : Enum {
    public int value__;
    public static ParseResult None;
    public static ParseResult Success;
    public static ParseResult Overflow;
    public static ParseResult Invalid;
}
internal enum Newtonsoft.Json.Utilities.ParserTimeZone : Enum {
    public int value__;
    public static ParserTimeZone Unspecified;
    public static ParserTimeZone Utc;
    public static ParserTimeZone LocalWestOfUtc;
    public static ParserTimeZone LocalEastOfUtc;
}
internal enum Newtonsoft.Json.Utilities.PrimitiveTypeCode : Enum {
    public int value__;
    public static PrimitiveTypeCode Empty;
    public static PrimitiveTypeCode Object;
    public static PrimitiveTypeCode Char;
    public static PrimitiveTypeCode CharNullable;
    public static PrimitiveTypeCode Boolean;
    public static PrimitiveTypeCode BooleanNullable;
    public static PrimitiveTypeCode SByte;
    public static PrimitiveTypeCode SByteNullable;
    public static PrimitiveTypeCode Int16;
    public static PrimitiveTypeCode Int16Nullable;
    public static PrimitiveTypeCode UInt16;
    public static PrimitiveTypeCode UInt16Nullable;
    public static PrimitiveTypeCode Int32;
    public static PrimitiveTypeCode Int32Nullable;
    public static PrimitiveTypeCode Byte;
    public static PrimitiveTypeCode ByteNullable;
    public static PrimitiveTypeCode UInt32;
    public static PrimitiveTypeCode UInt32Nullable;
    public static PrimitiveTypeCode Int64;
    public static PrimitiveTypeCode Int64Nullable;
    public static PrimitiveTypeCode UInt64;
    public static PrimitiveTypeCode UInt64Nullable;
    public static PrimitiveTypeCode Single;
    public static PrimitiveTypeCode SingleNullable;
    public static PrimitiveTypeCode Double;
    public static PrimitiveTypeCode DoubleNullable;
    public static PrimitiveTypeCode DateTime;
    public static PrimitiveTypeCode DateTimeNullable;
    public static PrimitiveTypeCode DateTimeOffset;
    public static PrimitiveTypeCode DateTimeOffsetNullable;
    public static PrimitiveTypeCode Decimal;
    public static PrimitiveTypeCode DecimalNullable;
    public static PrimitiveTypeCode Guid;
    public static PrimitiveTypeCode GuidNullable;
    public static PrimitiveTypeCode TimeSpan;
    public static PrimitiveTypeCode TimeSpanNullable;
    public static PrimitiveTypeCode BigInteger;
    public static PrimitiveTypeCode BigIntegerNullable;
    public static PrimitiveTypeCode Uri;
    public static PrimitiveTypeCode String;
    public static PrimitiveTypeCode Bytes;
    public static PrimitiveTypeCode DBNull;
}
[NullableAttribute("0")]
[NullableContextAttribute("1")]
internal abstract class Newtonsoft.Json.Utilities.ReflectionDelegateFactory : object {
    public Func`2<T, object> CreateGet(MemberInfo memberInfo);
    public Action`2<T, object> CreateSet(MemberInfo memberInfo);
    public abstract virtual MethodCall`2<T, object> CreateMethodCall(MethodBase method);
    public abstract virtual ObjectConstructor`1<object> CreateParameterizedConstructor(MethodBase method);
    public abstract virtual Func`1<T> CreateDefaultConstructor(Type type);
    public abstract virtual Func`2<T, object> CreateGet(PropertyInfo propertyInfo);
    public abstract virtual Func`2<T, object> CreateGet(FieldInfo fieldInfo);
    public abstract virtual Action`2<T, object> CreateSet(FieldInfo fieldInfo);
    public abstract virtual Action`2<T, object> CreateSet(PropertyInfo propertyInfo);
}
[NullableAttribute("0")]
[NullableContextAttribute("2")]
internal class Newtonsoft.Json.Utilities.ReflectionMember : object {
    [CompilerGeneratedAttribute]
private Type <MemberType>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<object, object> <Getter>k__BackingField;
    [CompilerGeneratedAttribute]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Action`2<object, object> <Setter>k__BackingField;
    public Type MemberType { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<object, object> Getter { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Action`2<object, object> Setter { get; public set; }
    [CompilerGeneratedAttribute]
public Type get_MemberType();
    [CompilerGeneratedAttribute]
public void set_MemberType(Type value);
    [CompilerGeneratedAttribute]
public Func`2<object, object> get_Getter();
    [CompilerGeneratedAttribute]
public void set_Getter(Func`2<object, object> value);
    [CompilerGeneratedAttribute]
public Action`2<object, object> get_Setter();
    [CompilerGeneratedAttribute]
public void set_Setter(Action`2<object, object> value);
}
[NullableAttribute("0")]
[NullableContextAttribute("1")]
internal class Newtonsoft.Json.Utilities.ReflectionObject : object {
    [CompilerGeneratedAttribute]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ObjectConstructor`1<object> <Creator>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, ReflectionMember> <Members>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ObjectConstructor`1<object> Creator { get; }
    public IDictionary`2<string, ReflectionMember> Members { get; }
    private ReflectionObject(ObjectConstructor`1<object> creator);
    [CompilerGeneratedAttribute]
public ObjectConstructor`1<object> get_Creator();
    [CompilerGeneratedAttribute]
public IDictionary`2<string, ReflectionMember> get_Members();
    public object GetValue(object target, string member);
    public void SetValue(object target, string member, object value);
    public Type GetType(string member);
    public static ReflectionObject Create(Type t, String[] memberNames);
    public static ReflectionObject Create(Type t, MethodBase creator, String[] memberNames);
}
[NullableAttribute("0")]
[NullableContextAttribute("1")]
[ExtensionAttribute]
internal static class Newtonsoft.Json.Utilities.ReflectionUtils : object {
    public static Type[] EmptyTypes;
    private static ReflectionUtils();
    [ExtensionAttribute]
public static bool IsVirtual(PropertyInfo propertyInfo);
    [ExtensionAttribute]
public static MethodInfo GetBaseDefinition(PropertyInfo propertyInfo);
    public static bool IsPublic(PropertyInfo property);
    [NullableContextAttribute("2")]
public static Type GetObjectType(object v);
    public static string GetTypeName(Type t, TypeNameAssemblyFormatHandling assemblyFormat, ISerializationBinder binder);
    private static string GetFullyQualifiedTypeName(Type t, ISerializationBinder binder);
    private static string RemoveAssemblyDetails(string fullyQualifiedTypeName);
    public static bool HasDefaultConstructor(Type t, bool nonPublic);
    public static ConstructorInfo GetDefaultConstructor(Type t);
    public static ConstructorInfo GetDefaultConstructor(Type t, bool nonPublic);
    public static bool IsNullable(Type t);
    public static bool IsNullableType(Type t);
    public static Type EnsureNotNullableType(Type t);
    public static Type EnsureNotByRefType(Type t);
    public static bool IsGenericDefinition(Type type, Type genericInterfaceDefinition);
    public static bool ImplementsGenericDefinition(Type type, Type genericInterfaceDefinition);
    public static bool ImplementsGenericDefinition(Type type, Type genericInterfaceDefinition, Type& implementingType);
    public static bool InheritsGenericDefinition(Type type, Type genericClassDefinition);
    public static bool InheritsGenericDefinition(Type type, Type genericClassDefinition, Type& implementingType);
    private static bool InheritsGenericDefinitionInternal(Type currentType, Type genericClassDefinition, Type& implementingType);
    public static Type GetCollectionItemType(Type type);
    [NullableContextAttribute("2")]
public static void GetDictionaryKeyValueTypes(Type dictionaryType, Type& keyType, Type& valueType);
    public static Type GetMemberUnderlyingType(MemberInfo member);
    public static bool IsByRefLikeType(Type type);
    public static bool IsIndexedProperty(PropertyInfo property);
    public static object GetMemberValue(MemberInfo member, object target);
    public static void SetMemberValue(MemberInfo member, object target, object value);
    public static bool CanReadMemberValue(MemberInfo member, bool nonPublic);
    public static bool CanSetMemberValue(MemberInfo member, bool nonPublic, bool canSetReadOnly);
    public static List`1<MemberInfo> GetFieldsAndProperties(Type type, BindingFlags bindingAttr);
    private static bool IsOverridenGenericMember(MemberInfo memberInfo, BindingFlags bindingAttr);
    public static T GetAttribute(object attributeProvider);
    public static T GetAttribute(object attributeProvider, bool inherit);
    public static T[] GetAttributes(object attributeProvider, bool inherit);
    public static Attribute[] GetAttributes(object attributeProvider, Type attributeType, bool inherit);
    public static StructMultiKey`2<string, string> SplitFullyQualifiedTypeName(string fullyQualifiedTypeName);
    private static Nullable`1<int> GetAssemblyDelimiterIndex(string fullyQualifiedTypeName);
    public static MemberInfo GetMemberInfoFromType(Type targetType, MemberInfo memberInfo);
    public static IEnumerable`1<FieldInfo> GetFields(Type targetType, BindingFlags bindingAttr);
    private static void GetChildPrivateFields(IList`1<MemberInfo> initialFields, Type targetType, BindingFlags bindingAttr);
    public static IEnumerable`1<PropertyInfo> GetProperties(Type targetType, BindingFlags bindingAttr);
    [ExtensionAttribute]
public static BindingFlags RemoveFlag(BindingFlags bindingAttr, BindingFlags flag);
    private static void GetChildPrivateProperties(IList`1<PropertyInfo> initialProperties, Type targetType, BindingFlags bindingAttr);
    public static bool IsMethodOverridden(Type currentType, Type methodDeclaringType, string method);
    public static object GetDefaultValue(Type type);
}
[NullableAttribute("0")]
[NullableContextAttribute("2")]
internal class Newtonsoft.Json.Utilities.StringBuffer : ValueType {
    private Char[] _buffer;
    private int _position;
    public int Position { get; public set; }
    public bool IsEmpty { get; }
    public Char[] InternalBuffer { get; }
    public StringBuffer(IArrayPool`1<char> bufferPool, int initalSize);
    [NullableContextAttribute("1")]
private StringBuffer(Char[] buffer);
    public int get_Position();
    public void set_Position(int value);
    public bool get_IsEmpty();
    public void Append(IArrayPool`1<char> bufferPool, char value);
    [NullableContextAttribute("1")]
public void Append(IArrayPool`1<char> bufferPool, Char[] buffer, int startIndex, int count);
    public void Clear(IArrayPool`1<char> bufferPool);
    private void EnsureSize(IArrayPool`1<char> bufferPool, int appendLength);
    [NullableContextAttribute("1")]
public virtual string ToString();
    [NullableContextAttribute("1")]
public string ToString(int start, int length);
    public Char[] get_InternalBuffer();
}
[IsReadOnlyAttribute]
[NullableContextAttribute("1")]
[DefaultMemberAttribute("Item")]
[NullableAttribute("0")]
internal class Newtonsoft.Json.Utilities.StringReference : ValueType {
    private Char[] _chars;
    private int _startIndex;
    private int _length;
    public char Item { get; }
    public Char[] Chars { get; }
    public int StartIndex { get; }
    public int Length { get; }
    public StringReference(Char[] chars, int startIndex, int length);
    public char get_Item(int i);
    public Char[] get_Chars();
    public int get_StartIndex();
    public int get_Length();
    public virtual string ToString();
}
[NullableAttribute("0")]
[NullableContextAttribute("1")]
[ExtensionAttribute]
internal static class Newtonsoft.Json.Utilities.StringReferenceExtensions : object {
    [ExtensionAttribute]
public static int IndexOf(StringReference s, char c, int startIndex, int length);
    [ExtensionAttribute]
public static bool StartsWith(StringReference s, string text);
    [ExtensionAttribute]
public static bool EndsWith(StringReference s, string text);
}
[ExtensionAttribute]
[NullableAttribute("0")]
[NullableContextAttribute("1")]
internal static class Newtonsoft.Json.Utilities.StringUtils : object {
    public static string CarriageReturnLineFeed;
    public static string Empty;
    public static char CarriageReturn;
    public static char LineFeed;
    public static char Tab;
    [NullableContextAttribute("2")]
public static bool IsNullOrEmpty(string value);
    [ExtensionAttribute]
public static string FormatWith(string format, IFormatProvider provider, object arg0);
    [ExtensionAttribute]
public static string FormatWith(string format, IFormatProvider provider, object arg0, object arg1);
    [ExtensionAttribute]
public static string FormatWith(string format, IFormatProvider provider, object arg0, object arg1, object arg2);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static string FormatWith(string format, IFormatProvider provider, object arg0, object arg1, object arg2, object arg3);
    [ExtensionAttribute]
private static string FormatWith(string format, IFormatProvider provider, Object[] args);
    public static bool IsWhiteSpace(string s);
    public static StringWriter CreateStringWriter(int capacity);
    public static void ToCharAsUnicode(char c, Char[] buffer);
    [ExtensionAttribute]
public static TSource ForgivingCaseSensitiveFind(IEnumerable`1<TSource> source, Func`2<TSource, string> valueSelector, string testValue);
    public static string ToCamelCase(string s);
    private static char ToLower(char c);
    public static string ToSnakeCase(string s);
    public static string ToKebabCase(string s);
    private static string ToSeparatedCase(string s, char separator);
    public static bool IsHighSurrogate(char c);
    public static bool IsLowSurrogate(char c);
    [ExtensionAttribute]
public static bool StartsWith(string source, char value);
    [ExtensionAttribute]
public static bool EndsWith(string source, char value);
    [ExtensionAttribute]
public static string Trim(string s, int start, int length);
}
[NullableContextAttribute("1")]
[IsReadOnlyAttribute]
[NullableAttribute("0")]
internal class Newtonsoft.Json.Utilities.StructMultiKey`2 : ValueType {
    public T1 Value1;
    public T2 Value2;
    public StructMultiKey`2(T1 v1, T2 v2);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(StructMultiKey`2<T1, T2> other);
}
[NullableAttribute("0")]
[NullableContextAttribute("1")]
internal class Newtonsoft.Json.Utilities.ThreadSafeStore`2 : object {
    private ConcurrentDictionary`2<TKey, TValue> _concurrentStore;
    private Func`2<TKey, TValue> _creator;
    public ThreadSafeStore`2(Func`2<TKey, TValue> creator);
    public TValue Get(TKey key);
}
[ExtensionAttribute]
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Newtonsoft.Json.Utilities.TypeExtensions : object {
    [ExtensionAttribute]
public static MethodInfo Method(Delegate d);
    [ExtensionAttribute]
public static MemberTypes MemberType(MemberInfo memberInfo);
    [ExtensionAttribute]
public static bool ContainsGenericParameters(Type type);
    [ExtensionAttribute]
public static bool IsInterface(Type type);
    [ExtensionAttribute]
public static bool IsGenericType(Type type);
    [ExtensionAttribute]
public static bool IsGenericTypeDefinition(Type type);
    [ExtensionAttribute]
public static Type BaseType(Type type);
    [ExtensionAttribute]
public static Assembly Assembly(Type type);
    [ExtensionAttribute]
public static bool IsEnum(Type type);
    [ExtensionAttribute]
public static bool IsClass(Type type);
    [ExtensionAttribute]
public static bool IsSealed(Type type);
    [ExtensionAttribute]
public static bool IsAbstract(Type type);
    [ExtensionAttribute]
public static bool IsVisible(Type type);
    [ExtensionAttribute]
public static bool IsValueType(Type type);
    [ExtensionAttribute]
public static bool IsPrimitive(Type type);
    [ExtensionAttribute]
public static bool AssignableToTypeName(Type type, string fullTypeName, bool searchInterfaces, Type& match);
    [ExtensionAttribute]
public static bool AssignableToTypeName(Type type, string fullTypeName, bool searchInterfaces);
    [ExtensionAttribute]
public static bool ImplementInterface(Type type, Type interfaceType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Newtonsoft.Json.Utilities.TypeInformation : object {
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private PrimitiveTypeCode <TypeCode>k__BackingField;
    public Type Type { get; }
    public PrimitiveTypeCode TypeCode { get; }
    public TypeInformation(Type type, PrimitiveTypeCode typeCode);
    [CompilerGeneratedAttribute]
public Type get_Type();
    [CompilerGeneratedAttribute]
public PrimitiveTypeCode get_TypeCode();
}
internal static class Newtonsoft.Json.Utilities.ValidationUtils : object {
    [NullableContextAttribute("1")]
public static void ArgumentNotNull(object value, string parameterName);
}
internal enum Newtonsoft.Json.WriteState : Enum {
    public int value__;
    public static WriteState Error;
    public static WriteState Closed;
    public static WriteState Object;
    public static WriteState Array;
    public static WriteState Constructor;
    public static WriteState Property;
    public static WriteState Start;
}
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.AllowNullAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ParameterValue>k__BackingField;
    public bool ParameterValue { get; }
    public DoesNotReturnIfAttribute(bool parameterValue);
    [CompilerGeneratedAttribute]
public bool get_ParameterValue();
}
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.MaybeNullAttribute : Attribute {
}
[AttributeUsageAttribute("10688")]
internal class System.Diagnostics.CodeAnalysis.NotNullAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.NotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public NotNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[AttributeUsageAttribute("5196")]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
