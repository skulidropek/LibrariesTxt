[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ControlzEx.Automation.Peers.TabControlExAutomationPeer : TabControlAutomationPeer {
    public TabControlExAutomationPeer(TabControl owner);
    protected virtual ItemAutomationPeer CreateItemAutomationPeer(object item);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ControlzEx.Automation.Peers.TabItemExAutomationPeer : TabItemAutomationPeer {
    public TabItemExAutomationPeer(object owner, TabControlAutomationPeer tabControlAutomationPeer);
    protected virtual List`1<AutomationPeer> GetChildrenCore();
    [NullableContextAttribute("2")]
private UIElement GetWrapper();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[TemplatePartAttribute]
public class ControlzEx.BadgedEx : ContentControl {
    public static string BadgeContainerPartName;
    [NullableAttribute("2")]
[CLSCompliantAttribute("False")]
protected FrameworkElement _badgeContainer;
    public static DependencyProperty BadgeProperty;
    public static DependencyProperty BadgeFontFamilyProperty;
    public static DependencyProperty BadgeFontStyleProperty;
    public static DependencyProperty BadgeFontWeightProperty;
    public static DependencyProperty BadgeFontStretchProperty;
    public static DependencyProperty BadgeFontSizeProperty;
    public static DependencyProperty BadgeBackgroundProperty;
    public static DependencyProperty BadgeForegroundProperty;
    public static DependencyProperty BadgeBorderBrushProperty;
    public static DependencyProperty BadgeBorderThicknessProperty;
    public static DependencyProperty BadgePlacementModeProperty;
    public static DependencyProperty BadgeMarginProperty;
    public static DependencyProperty BadgeTemplateProperty;
    public static DependencyProperty BadgeTemplateSelectorProperty;
    public static DependencyProperty BadgeStringFormatProperty;
    public static RoutedEvent BadgeChangedEvent;
    private static DependencyPropertyKey IsBadgeSetPropertyKey;
    public static DependencyProperty IsBadgeSetProperty;
    public object Badge { get; public set; }
    [BindableAttribute("True")]
[LocalizabilityAttribute]
public FontFamily BadgeFontFamily { get; public set; }
    [BindableAttribute("True")]
public FontStyle BadgeFontStyle { get; public set; }
    [BindableAttribute("True")]
public FontWeight BadgeFontWeight { get; public set; }
    [BindableAttribute("True")]
public FontStretch BadgeFontStretch { get; public set; }
    [TypeConverterAttribute("System.Windows.FontSizeConverter")]
[LocalizabilityAttribute]
public double BadgeFontSize { get; public set; }
    [NullableAttribute("2")]
public Brush BadgeBackground { get; public set; }
    [NullableAttribute("2")]
public Brush BadgeForeground { get; public set; }
    [NullableAttribute("2")]
public Brush BadgeBorderBrush { get; public set; }
    public Thickness BadgeBorderThickness { get; public set; }
    public BadgePlacementMode BadgePlacementMode { get; public set; }
    public Thickness BadgeMargin { get; public set; }
    [NullableAttribute("2")]
public DataTemplate BadgeTemplate { get; public set; }
    [NullableAttribute("2")]
public DataTemplateSelector BadgeTemplateSelector { get; public set; }
    [NullableAttribute("2")]
public string BadgeStringFormat { get; public set; }
    public bool IsBadgeSet { get; private set; }
    private static BadgedEx();
    public object get_Badge();
    public void set_Badge(object value);
    public FontFamily get_BadgeFontFamily();
    public void set_BadgeFontFamily(FontFamily value);
    public FontStyle get_BadgeFontStyle();
    public void set_BadgeFontStyle(FontStyle value);
    public FontWeight get_BadgeFontWeight();
    public void set_BadgeFontWeight(FontWeight value);
    public FontStretch get_BadgeFontStretch();
    public void set_BadgeFontStretch(FontStretch value);
    public double get_BadgeFontSize();
    public void set_BadgeFontSize(double value);
    [NullableContextAttribute("2")]
public Brush get_BadgeBackground();
    [NullableContextAttribute("2")]
public void set_BadgeBackground(Brush value);
    [NullableContextAttribute("2")]
public Brush get_BadgeForeground();
    [NullableContextAttribute("2")]
public void set_BadgeForeground(Brush value);
    [NullableContextAttribute("2")]
public Brush get_BadgeBorderBrush();
    [NullableContextAttribute("2")]
public void set_BadgeBorderBrush(Brush value);
    public Thickness get_BadgeBorderThickness();
    public void set_BadgeBorderThickness(Thickness value);
    public BadgePlacementMode get_BadgePlacementMode();
    public void set_BadgePlacementMode(BadgePlacementMode value);
    public Thickness get_BadgeMargin();
    public void set_BadgeMargin(Thickness value);
    [NullableContextAttribute("2")]
public DataTemplate get_BadgeTemplate();
    [NullableContextAttribute("2")]
public void set_BadgeTemplate(DataTemplate value);
    [NullableContextAttribute("2")]
public DataTemplateSelector get_BadgeTemplateSelector();
    [NullableContextAttribute("2")]
public void set_BadgeTemplateSelector(DataTemplateSelector value);
    [NullableContextAttribute("2")]
public string get_BadgeStringFormat();
    [NullableContextAttribute("2")]
public void set_BadgeStringFormat(string value);
    public void add_BadgeChanged(RoutedPropertyChangedEventHandler`1<object> value);
    public void remove_BadgeChanged(RoutedPropertyChangedEventHandler`1<object> value);
    public bool get_IsBadgeSet();
    private void set_IsBadgeSet(bool value);
    private static void OnBadgeChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public virtual void OnApplyTemplate();
    protected virtual Size ArrangeOverride(Size arrangeBounds);
}
public enum ControlzEx.BadgePlacementMode : Enum {
    public int value__;
    public static BadgePlacementMode TopLeft;
    public static BadgePlacementMode Top;
    public static BadgePlacementMode TopRight;
    public static BadgePlacementMode Right;
    public static BadgePlacementMode BottomRight;
    public static BadgePlacementMode Bottom;
    public static BadgePlacementMode BottomLeft;
    public static BadgePlacementMode Left;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ControlzEx.Behaviors.ChangeScope : DisposableObject {
    private GlowWindowBehavior behavior;
    public ChangeScope(GlowWindowBehavior behavior);
    protected virtual void DisposeManagedResources();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class ControlzEx.Behaviors.GlowWindowBehavior : Behavior`1<Window> {
    private static TimeSpan glowTimerDelay;
    [NullableAttribute("2")]
private DispatcherTimer makeGlowVisibleTimer;
    [NullableAttribute("2")]
private WindowInteropHelper windowHelper;
    private HWND windowHandle;
    [NullableAttribute("2")]
private HwndSource hwndSource;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IGlowWindow[] glowWindows;
    public static DependencyProperty GlowColorProperty;
    public static DependencyProperty NonActiveGlowColorProperty;
    public static DependencyProperty IsGlowTransitionEnabledProperty;
    public static DependencyProperty GlowDepthProperty;
    public static DependencyProperty UseRadialGradientForCornersProperty;
    public static DependencyProperty PreferDWMBorderColorProperty;
    private static DependencyPropertyKey DWMSupportsBorderColorPropertyKey;
    public static DependencyProperty DWMSupportsBorderColorProperty;
    public int DeferGlowChangesCount;
    private bool positionUpdateRequired;
    private bool parentWindowWasClosed;
    private bool isGlowVisible;
    private bool updateVisibilityOnWMSIZE;
    public Nullable`1<Color> GlowColor { get; public set; }
    public Nullable`1<Color> NonActiveGlowColor { get; public set; }
    public bool IsGlowTransitionEnabled { get; public set; }
    public int GlowDepth { get; public set; }
    public bool UseRadialGradientForCorners { get; public set; }
    public bool PreferDWMBorderColor { get; public set; }
    public bool DWMSupportsBorderColor { get; private set; }
    public bool IsUsingDWMBorder { get; }
    private bool IsGlowVisible { get; private set; }
    protected bool ShouldShowGlow { get; }
    private static GlowWindowBehavior();
    private static void OnGlowColorChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public Nullable`1<Color> get_GlowColor();
    public void set_GlowColor(Nullable`1<Color> value);
    private static void OnNonActiveGlowColorChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public Nullable`1<Color> get_NonActiveGlowColor();
    public void set_NonActiveGlowColor(Nullable`1<Color> value);
    public bool get_IsGlowTransitionEnabled();
    public void set_IsGlowTransitionEnabled(bool value);
    private static void OnGlowDepthChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public int get_GlowDepth();
    public void set_GlowDepth(int value);
    public bool get_UseRadialGradientForCorners();
    public void set_UseRadialGradientForCorners(bool value);
    private static void OnUseRadialGradientForCornersChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnPreferDWMBorderColorChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public bool get_PreferDWMBorderColor();
    public void set_PreferDWMBorderColor(bool value);
    public bool get_DWMSupportsBorderColor();
    private void set_DWMSupportsBorderColor(bool value);
    public bool get_IsUsingDWMBorder();
    protected virtual void OnAttached();
    protected virtual void OnDetaching();
    private void AssociatedObjectActivatedOrDeactivated(object sender, EventArgs e);
    private void Initialize();
    private void AssociatedObjectOnClosed(object o, EventArgs args);
    private IntPtr AssociatedObjectWindowProc(IntPtr hwnd, int msg, IntPtr wParam, IntPtr lParam, Boolean& handled);
    private void DestroyGlowWindows();
    public void EndDeferGlowChanges();
    private IGlowWindow GetOrCreateGlowWindow(int index);
    private IGlowWindow GetOrCreateGlowWindow(Dock orientation);
    protected virtual IGlowWindow CreateGlowWindow(Dock orientation);
    protected virtual IGlowWindow SetupGlowWindow(IGlowWindow glowWindow);
    private void CreateGlowWindowHandles();
    private bool get_IsGlowVisible();
    private void set_IsGlowVisible(bool value);
    protected virtual bool get_ShouldShowGlow();
    private void UpdateGlowWindowPositions();
    private void UpdateGlowWindowPositions(bool delayIfNecessary);
    private void UpdateGlowColors();
    private void UpdateGlowActiveState();
    private bool UpdateDWMBorder();
    private void UpdateGlowDepth();
    private void UpdateUseRadialGradientForCorners();
    private IDisposable DeferGlowChanges();
    private void UpdateGlowVisibility(bool delayIfNecessary);
    private void StopTimer();
    private void OnDelayedVisibilityTimerTick(object sender, EventArgs e);
}
public enum ControlzEx.Behaviors.NonClientControlClickStrategy : Enum {
    public int value__;
    public static NonClientControlClickStrategy None;
    public static NonClientControlClickStrategy MouseEvent;
    public static NonClientControlClickStrategy AutomationPeer;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ControlzEx.Behaviors.NonClientControlManager : object {
    [NullableAttribute("2")]
private DependencyObject trackedControl;
    [CompilerGeneratedAttribute]
private Window <Owner>k__BackingField;
    [CompilerGeneratedAttribute]
private IntPtr <OwnerHandle>k__BackingField;
    private Window Owner { get; }
    private IntPtr OwnerHandle { get; }
    public NonClientControlManager(Window window);
    [CompilerGeneratedAttribute]
private Window get_Owner();
    [CompilerGeneratedAttribute]
private IntPtr get_OwnerHandle();
    public void ClearTrackedControl();
    public bool HoverTrackedControl(IntPtr lParam);
    public bool PressTrackedControl(IntPtr lParam);
    public bool ClickTrackedControl(IntPtr lParam);
    [NullableContextAttribute("2")]
public DependencyObject GetControlUnderMouse(IntPtr lParam);
    public static DependencyObject GetControlUnderMouse(Window owner, IntPtr lParam);
    public static DependencyObject GetControlUnderMouse(Window owner, IntPtr lParam, HT& hitTestResult);
    [NullableContextAttribute("2")]
private static DependencyObject GetVisualOrLogicalParent(DependencyObject sourceElement);
    [CompilerGeneratedAttribute]
internal static Point <GetControlUnderMouse>g__LogicalPointFromLParam|14_0(Window owner, IntPtr lParam);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class ControlzEx.Behaviors.NonClientControlProperties : object {
    public static DependencyProperty HitTestResultProperty;
    public static DependencyProperty IsNCPressedProperty;
    public static DependencyProperty IsNCMouseOverProperty;
    public static DependencyProperty ClickStrategyProperty;
    private static NonClientControlProperties();
    public static void SetHitTestResult(DependencyObject element, HT value);
    public static HT GetHitTestResult(DependencyObject element);
    public static void SetIsNCPressed(DependencyObject element, bool value);
    public static bool GetIsNCPressed(DependencyObject element);
    public static void SetIsNCMouseOver(DependencyObject element, bool value);
    public static bool GetIsNCMouseOver(DependencyObject element);
    public static void SetClickStrategy(DependencyObject element, NonClientControlClickStrategy value);
    public static NonClientControlClickStrategy GetClickStrategy(DependencyObject element);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class ControlzEx.Behaviors.TextBoxInputMaskBehavior : Behavior`1<TextBox> {
    [NullableAttribute("2")]
private PropertyChangeNotifier textPropertyNotifier;
    public static DependencyProperty InputMaskProperty;
    public static DependencyProperty PromptCharProperty;
    public static DependencyProperty ResetOnSpaceProperty;
    public static DependencyProperty IgnoreSpaceProperty;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private MaskedTextProvider <Provider>k__BackingField;
    public string InputMask { get; public set; }
    public char PromptChar { get; public set; }
    public bool ResetOnSpace { get; public set; }
    public bool IgnoreSpace { get; public set; }
    [NullableAttribute("2")]
public MaskedTextProvider Provider { get; private set; }
    private static TextBoxInputMaskBehavior();
    public string get_InputMask();
    public void set_InputMask(string value);
    public char get_PromptChar();
    public void set_PromptChar(char value);
    public bool get_ResetOnSpace();
    public void set_ResetOnSpace(bool value);
    public bool get_IgnoreSpace();
    public void set_IgnoreSpace(bool value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public MaskedTextProvider get_Provider();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_Provider(MaskedTextProvider value);
    protected virtual void OnAttached();
    protected virtual void OnDetaching();
    private void AssociatedObjectLoaded(object sender, RoutedEventArgs e);
    private void AssociatedObjectPreviewTextInput(object sender, TextCompositionEventArgs e);
    private void AssociatedObjectPreviewKeyDown(object sender, KeyEventArgs e);
    private void Pasting(object sender, DataObjectPastingEventArgs e);
    private void UpdateText(object sender, EventArgs eventArgs);
    private string HandleCharacterCasing(string text);
    private bool TreatSelectedText();
    private void RefreshText(int position);
    [NullableContextAttribute("2")]
private void SetText(string text);
    private int GetNextCharacterPosition(int caretIndex);
    [NullableContextAttribute("2")]
private string GetProviderText();
    private int GetAnzahlIncludeLiterals(int index);
    private void Debug(string name);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class ControlzEx.Behaviors.WindowChromeBehavior : Behavior`1<Window> {
    [SecurityCriticalAttribute]
private HWND windowHandle;
    [NullableAttribute("2")]
[SecurityCriticalAttribute]
private HwndSource hwndSource;
    [NullableAttribute("2")]
private PropertyChangeNotifier borderThicknessChangeNotifier;
    [NullableAttribute("2")]
private PropertyChangeNotifier windowStyleChangeNotifier;
    private Nullable`1<Thickness> savedBorderThickness;
    private bool isCleanedUp;
    private Thickness cornerGripThickness;
    public static DependencyProperty ResizeBorderThicknessProperty;
    public static DependencyProperty IgnoreTaskbarOnMaximizeProperty;
    public static DependencyProperty KeepBorderOnMaximizeProperty;
    private static DependencyPropertyKey IsNCActivePropertyKey;
    public static DependencyProperty IsNCActiveProperty;
    public static DependencyProperty EnableMinimizeProperty;
    public static DependencyProperty EnableMaxRestoreProperty;
    public static DependencyProperty CornerPreferenceProperty;
    public static DependencyProperty UseNativeCaptionButtonsProperty;
    public static DependencyProperty CaptionButtonsSizeProperty;
    public static DependencyProperty GlassFrameThicknessProperty;
    public static DependencyProperty NCPaddingProperty;
    private static List`1<SystemParameterBoundProperty> boundProperties;
    private static SET_WINDOW_POS_FLAGS SwpFlags;
    private WindowState lastMenuState;
    private WINDOWPOS lastWindowpos;
    private bool isDragging;
    [NullableAttribute("2")]
private NonClientControlManager nonClientControlManager;
    private bool isTrackingMouseEvents;
    private static HT[0...,0...] hitTestBorders;
    public Thickness ResizeBorderThickness { get; public set; }
    public bool IgnoreTaskbarOnMaximize { get; public set; }
    public bool KeepBorderOnMaximize { get; public set; }
    public bool IsNCActive { get; private set; }
    public bool EnableMinimize { get; public set; }
    public bool EnableMaxRestore { get; public set; }
    public WindowCornerPreference CornerPreference { get; public set; }
    public bool UseNativeCaptionButtons { get; public set; }
    public Size CaptionButtonsSize { get; public set; }
    public Thickness GlassFrameThickness { get; public set; }
    public Thickness NCPadding { get; public set; }
    private static WindowChromeBehavior();
    public Thickness get_ResizeBorderThickness();
    public void set_ResizeBorderThickness(Thickness value);
    private static void OnResizeBorderThicknessChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public bool get_IgnoreTaskbarOnMaximize();
    public void set_IgnoreTaskbarOnMaximize(bool value);
    public bool get_KeepBorderOnMaximize();
    public void set_KeepBorderOnMaximize(bool value);
    public bool get_IsNCActive();
    private void set_IsNCActive(bool value);
    private static void OnEnableMinimizeChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private void UpdateMinimizeSystemMenu(bool isVisible);
    public bool get_EnableMinimize();
    public void set_EnableMinimize(bool value);
    private static void OnEnableMaxRestoreChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private void UpdateMaxRestoreSystemMenu(bool isVisible);
    public bool get_EnableMaxRestore();
    public void set_EnableMaxRestore(bool value);
    public WindowCornerPreference get_CornerPreference();
    public void set_CornerPreference(WindowCornerPreference value);
    private static void OnCornerPreferenceChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public bool get_UseNativeCaptionButtons();
    public void set_UseNativeCaptionButtons(bool value);
    private static void OnUseNativeCaptionButtonsChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public Size get_CaptionButtonsSize();
    public void set_CaptionButtonsSize(Size value);
    public Thickness get_GlassFrameThickness();
    public void set_GlassFrameThickness(Thickness value);
    private static void OnGlassFrameThicknessChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private void UpdateGlassFrameThickness();
    public Thickness get_NCPadding();
    public void set_NCPadding(Thickness value);
    private static void OnNCPaddingChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    protected virtual void OnAttached();
    public static Thickness GetDefaultResizeBorderThickness();
    private void BorderThicknessChangeNotifierOnValueChanged(object sender, EventArgs e);
    private void WindowStyleChangeNotifierOnValueChanged(object sender, EventArgs e);
    private static void OnIgnoreTaskbarOnMaximizeChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnKeepBorderOnMaximizeChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    [SecuritySafeCriticalAttribute]
private void Cleanup(bool isClosing);
    protected virtual void OnCleanup();
    protected virtual void OnDetaching();
    private void Initialize();
    private void UpdateCaptionButtonsSize();
    private void AssociatedObject_Closed(object sender, EventArgs e);
    private void AssociatedObject_StateChanged(object sender, EventArgs e);
    private void HandleStateChanged();
    private void ForceNativeWindowRedraw();
    private void HandleBorderThicknessDuringMaximize();
    private bool UpdateDWMCornerPreference(WindowCornerPreference cornerPreference);
    private bool UpdateDWMCornerPreference(DWM_WINDOW_CORNER_PREFERENCE cornerPreference);
    private static void Invoke(DispatcherObject dispatcherObject, Action invokeAction);
    [SecuritySafeCriticalAttribute]
private void _OnChromePropertyChangedThatRequiresRepaint();
    [SecurityCriticalAttribute]
private void _ApplyNewCustomChrome();
    private IntPtr WindowProc(IntPtr hwnd, int msg, IntPtr wparam, IntPtr lparam, Boolean& handled);
    [SecurityCriticalAttribute]
private IntPtr WindowProc(IntPtr hwnd, int msg, UIntPtr wParam, IntPtr lParam, Boolean& handled);
    [SecurityCriticalAttribute]
private IntPtr _HandleNCUAHDRAWCAPTION(WM uMsg, UIntPtr wParam, IntPtr lParam, Boolean& handled);
    private IntPtr _HandleSETICONOrSETTEXT(WM uMsg, UIntPtr wParam, IntPtr lParam, Boolean& handled);
    [SecurityCriticalAttribute]
private IntPtr _HandleSYSCOMMAND(WM uMsg, UIntPtr wParam, IntPtr lParam, Boolean& handled);
    [SecurityCriticalAttribute]
private IntPtr _HandleNCACTIVATE(WM uMsg, UIntPtr wParam, IntPtr lParam, Boolean& handled);
    [SecurityCriticalAttribute]
private static RECT AdjustWorkingAreaForAutoHide(IntPtr monitorContainingApplication, RECT area);
    [SecurityCriticalAttribute]
private IntPtr _HandleNCCALCSIZE(WM uMsg, UIntPtr wParam, IntPtr lParam, Boolean& handled);
    private HT _GetHTFromResizeGripDirection(ResizeGripDirection direction);
    [SecurityCriticalAttribute]
private IntPtr _HandleNCPAINT(WM uMsg, UIntPtr wParam, IntPtr lParam, Boolean& handled);
    [SecurityCriticalAttribute]
private IntPtr _HandleNCHITTEST(WM uMsg, UIntPtr wParam, IntPtr lParam, Boolean& handled);
    private HT GetHitTestResult(WM uMsg, UIntPtr wParam, IntPtr lParam);
    [SecurityCriticalAttribute]
private IntPtr _HandleNCRBUTTONUP(WM uMsg, UIntPtr wParam, IntPtr lParam, Boolean& handled);
    [SecurityCriticalAttribute]
private IntPtr _HandleSIZE(WM uMsg, UIntPtr wParam, IntPtr lParam, Boolean& handled);
    [SecurityCriticalAttribute]
private IntPtr _HandleWINDOWPOSCHANGING(WM uMsg, UIntPtr wParam, IntPtr lParam, Boolean& handled);
    [SecurityCriticalAttribute]
private IntPtr _HandleWINDOWPOSCHANGED(WM uMsg, UIntPtr wParam, IntPtr lParam, Boolean& handled);
    [SecurityCriticalAttribute]
private IntPtr _HandleGETMINMAXINFO(WM uMsg, UIntPtr wParam, IntPtr lParam, Boolean& handled);
    [SecurityCriticalAttribute]
private IntPtr _HandleMOVEForRealSize(WM uMsg, UIntPtr wParam, IntPtr lParam, Boolean& handled);
    private IntPtr _HandleNCMOUSEMOVE(WM uMsg, UIntPtr wParam, IntPtr lParam, Boolean& handled);
    private IntPtr _HandleMOUSEMOVE(WM uMsg, UIntPtr wParam, IntPtr lParam, Boolean& handled);
    private IntPtr _HandleNCMOUSELEAVE(WM uMsg, UIntPtr wParam, IntPtr lParam, Boolean& handled);
    private IntPtr _HandleMOUSELEAVE(WM uMsg, UIntPtr wParam, IntPtr lParam, Boolean& handled);
    private IntPtr _HandleStyleChanging(WM uMsg, UIntPtr wParam, IntPtr lParam, Boolean& handled);
    private IntPtr _HandleDestroy(WM uMsg, UIntPtr wParam, IntPtr lParam, Boolean& handled);
    private IntPtr _HandleNCLBUTTONDOWN(WM uMsg, UIntPtr wParam, IntPtr lParam, Boolean& handled);
    private IntPtr _HandleNCLBUTTONUP(WM uMsg, UIntPtr wParam, IntPtr lParam, Boolean& handled);
    private IntPtr _HandleNCRBUTTONMessages(WM uMsg, UIntPtr wParam, IntPtr lParam, Boolean& handled);
    [SecurityCriticalAttribute]
private bool _ModifyStyle(WINDOW_STYLE removeStyle, WINDOW_STYLE addStyle);
    [SecurityCriticalAttribute]
private WindowState _GetHwndState();
    [SecurityCriticalAttribute]
private Rect _GetWindowRect();
    [SecurityCriticalAttribute]
private void _UpdateSystemMenu(Nullable`1<WindowState> assumeState);
    private void UpdateWindowStyle();
    private HT _HitTestNca(Rect windowRect, Point mousePosition);
    [CompilerGeneratedAttribute]
private void <Initialize>b__72_0();
    [CompilerGeneratedAttribute]
internal static int <_HitTestNca>g__GetHTRow|125_0(Rect windowRect, Point mousePosition, Thickness resizeBorderThickness);
    [CompilerGeneratedAttribute]
internal static int <_HitTestNca>g__GetHTColumn|125_1(Rect windowRect, Point mousePosition, Thickness resizeBorderThickness);
}
public enum ControlzEx.Behaviors.WindowCornerPreference : Enum {
    public int value__;
    public static WindowCornerPreference Default;
    public static WindowCornerPreference DoNotRound;
    public static WindowCornerPreference Round;
    public static WindowCornerPreference RoundSmall;
}
public interface ControlzEx.Controls.IGlowWindow {
    public IntPtr Handle { get; }
    public bool IsVisible { get; public set; }
    public bool IsActive { get; public set; }
    public Color ActiveGlowColor { get; public set; }
    public Color InactiveGlowColor { get; public set; }
    public int GlowDepth { get; public set; }
    public bool UseRadialGradientForCorners { get; public set; }
    public abstract virtual IntPtr get_Handle();
    public abstract virtual bool get_IsVisible();
    public abstract virtual void set_IsVisible(bool value);
    public abstract virtual bool get_IsActive();
    public abstract virtual void set_IsActive(bool value);
    public abstract virtual Color get_ActiveGlowColor();
    public abstract virtual void set_ActiveGlowColor(Color value);
    public abstract virtual Color get_InactiveGlowColor();
    public abstract virtual void set_InactiveGlowColor(Color value);
    public abstract virtual int get_GlowDepth();
    public abstract virtual void set_GlowDepth(int value);
    public abstract virtual bool get_UseRadialGradientForCorners();
    public abstract virtual void set_UseRadialGradientForCorners(bool value);
    public abstract virtual IntPtr EnsureHandle();
    public abstract virtual void CommitChanges(IntPtr windowPosInfo);
    public abstract virtual void UpdateWindowPos();
}
[IsReadOnlyAttribute]
internal class ControlzEx.Controls.Internal.CachedBitmapInfoKey : ValueType {
    [CompilerGeneratedAttribute]
private int <GlowDepth>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseRadialGradientForCorners>k__BackingField;
    public int GlowDepth { get; }
    public bool UseRadialGradientForCorners { get; }
    public CachedBitmapInfoKey(int glowDepth, bool useRadialGradientForCorners);
    [CompilerGeneratedAttribute]
public int get_GlowDepth();
    [CompilerGeneratedAttribute]
public bool get_UseRadialGradientForCorners();
    public sealed virtual bool Equals(CachedBitmapInfoKey other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(CachedBitmapInfoKey left, CachedBitmapInfoKey right);
    public static bool op_Inequality(CachedBitmapInfoKey left, CachedBitmapInfoKey right);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ControlzEx.Controls.Internal.DisposableObject : object {
    [NullableAttribute("2")]
private EventHandler disposingEventHandlers;
    [CompilerGeneratedAttribute]
private bool <IsDisposing>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDisposed>k__BackingField;
    public bool IsDisposing { get; private set; }
    public bool IsDisposed { get; private set; }
    [CompilerGeneratedAttribute]
public bool get_IsDisposing();
    [CompilerGeneratedAttribute]
private void set_IsDisposing(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsDisposed();
    [CompilerGeneratedAttribute]
private void set_IsDisposed(bool value);
    public void add_Disposing(EventHandler value);
    public void remove_Disposing(EventHandler value);
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    protected void ThrowIfDisposed();
    protected virtual void Dispose(bool disposing);
    protected virtual void DisposeManagedResources();
    protected virtual void DisposeNativeResources();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ControlzEx.Controls.Internal.GlowBitmap : DisposableObject {
    public static int GlowBitmapPartCount;
    private static int BytesPerPixelBgra32;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Dictionary`2<CachedBitmapInfoKey, CachedBitmapInfo[]> transparencyMasks;
    private IntPtr pbits;
    private BITMAPINFO bitmapInfo;
    [CompilerGeneratedAttribute]
private SafeHandle <Handle>k__BackingField;
    public SafeHandle Handle { get; }
    public IntPtr DiBits { get; }
    public int Width { get; }
    public int Height { get; }
    public GlowBitmap(SafeHandle hdcScreen, int width, int height);
    private static GlowBitmap();
    [CompilerGeneratedAttribute]
public SafeHandle get_Handle();
    public IntPtr get_DiBits();
    public int get_Width();
    public int get_Height();
    protected virtual void DisposeNativeResources();
    private static byte PremultiplyAlpha(byte channel, byte alpha);
    public static GlowBitmap Create(GlowDrawingContext drawingContext, GlowBitmapPart bitmapPart, Color color, int glowDepth, bool useRadialGradientForCorners);
    private static CachedBitmapInfo GetOrCreateAlphaMask(GlowBitmapPart bitmapPart, int glowDepth, bool useRadialGradientForCorners);
}
public enum ControlzEx.Controls.Internal.GlowBitmapPart : Enum {
    public int value__;
    public static GlowBitmapPart CornerTopLeft;
    public static GlowBitmapPart CornerTopRight;
    public static GlowBitmapPart CornerBottomLeft;
    public static GlowBitmapPart CornerBottomRight;
    public static GlowBitmapPart TopLeft;
    public static GlowBitmapPart Top;
    public static GlowBitmapPart TopRight;
    public static GlowBitmapPart LeftTop;
    public static GlowBitmapPart Left;
    public static GlowBitmapPart LeftBottom;
    public static GlowBitmapPart BottomLeft;
    public static GlowBitmapPart Bottom;
    public static GlowBitmapPart BottomRight;
    public static GlowBitmapPart RightTop;
    public static GlowBitmapPart Right;
    public static GlowBitmapPart RightBottom;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class ControlzEx.Controls.Internal.GlowDrawingContext : DisposableObject {
    internal BLENDFUNCTION Blend;
    private GlowBitmap windowBitmap;
    [CompilerGeneratedAttribute]
private SafeHandle <ScreenDc>k__BackingField;
    [CompilerGeneratedAttribute]
private SafeHandle <WindowDc>k__BackingField;
    [CompilerGeneratedAttribute]
private SafeHandle <BackgroundDc>k__BackingField;
    private static SafeHandle desktopDC;
    [MemberNotNullWhenAttribute("True", "ScreenDc")]
[MemberNotNullWhenAttribute("True", "WindowDc")]
[MemberNotNullWhenAttribute("True", "BackgroundDc")]
[MemberNotNullWhenAttribute("True", "windowBitmap")]
public bool IsInitialized { get; }
    public SafeHandle ScreenDc { get; private set; }
    public SafeHandle WindowDc { get; }
    public SafeHandle BackgroundDc { get; }
    public int Width { get; }
    public int Height { get; }
    public GlowDrawingContext(int width, int height);
    [MemberNotNullWhenAttribute("True", "ScreenDc")]
[MemberNotNullWhenAttribute("True", "WindowDc")]
[MemberNotNullWhenAttribute("True", "BackgroundDc")]
[MemberNotNullWhenAttribute("True", "windowBitmap")]
public bool get_IsInitialized();
    [CompilerGeneratedAttribute]
public SafeHandle get_ScreenDc();
    [CompilerGeneratedAttribute]
private void set_ScreenDc(SafeHandle value);
    [CompilerGeneratedAttribute]
public SafeHandle get_WindowDc();
    [CompilerGeneratedAttribute]
public SafeHandle get_BackgroundDc();
    public int get_Width();
    public int get_Height();
    private void SetupDesktopDC();
    protected virtual void DisposeManagedResources();
    protected virtual void DisposeNativeResources();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[CLSCompliantAttribute("False")]
public class ControlzEx.Controls.Internal.GlowWindow : HwndWrapper {
    private Window targetWindow;
    private GlowWindowBehavior behavior;
    private Dock orientation;
    private GlowBitmap[] activeGlowBitmaps;
    private GlowBitmap[] inactiveGlowBitmaps;
    private static ushort sharedWindowClassAtom;
    [NullableAttribute("2")]
private static WNDPROC sharedWndProc;
    private int left;
    private int top;
    private int width;
    private int height;
    private int glowDepth;
    private int cornerGripThickness;
    private bool useRadialGradientForCorners;
    private bool isVisible;
    private bool isActive;
    private Color activeGlowColor;
    private Color inactiveGlowColor;
    private FieldInvalidationTypes invalidatedValues;
    private bool pendingDelayRender;
    private string title;
    private static LPARAM SW_PARENTCLOSING;
    private static LPARAM SW_PARENTOPENING;
    [CompilerGeneratedAttribute]
private string <ClassName>k__BackingField;
    [CompilerGeneratedAttribute]
private HWND <TargetWindowHandle>k__BackingField;
    private bool IsDeferringChanges { get; }
    private ushort SharedWindowClassAtom { get; }
    public string ClassName { get; }
    public bool IsVisible { get; public set; }
    public int Left { get; public set; }
    public int Top { get; public set; }
    public int Width { get; public set; }
    public int Height { get; public set; }
    public int GlowDepth { get; public set; }
    public bool UseRadialGradientForCorners { get; public set; }
    public bool IsActive { get; public set; }
    public Color ActiveGlowColor { get; public set; }
    public Color InactiveGlowColor { get; public set; }
    private HWND TargetWindowHandle { get; }
    protected bool IsWindowSubClassed { get; }
    private bool IsPositionValid { get; }
    public GlowWindow(Window owner, GlowWindowBehavior behavior, Dock orientation);
    private static GlowWindow();
    private bool get_IsDeferringChanges();
    private ushort get_SharedWindowClassAtom();
    [CompilerGeneratedAttribute]
public virtual string get_ClassName();
    public sealed virtual bool get_IsVisible();
    public sealed virtual void set_IsVisible(bool value);
    public int get_Left();
    public void set_Left(int value);
    public int get_Top();
    public void set_Top(int value);
    public int get_Width();
    public void set_Width(int value);
    public int get_Height();
    public void set_Height(int value);
    public sealed virtual int get_GlowDepth();
    public sealed virtual void set_GlowDepth(int value);
    public sealed virtual bool get_UseRadialGradientForCorners();
    public sealed virtual void set_UseRadialGradientForCorners(bool value);
    public sealed virtual bool get_IsActive();
    public sealed virtual void set_IsActive(bool value);
    public sealed virtual Color get_ActiveGlowColor();
    public sealed virtual void set_ActiveGlowColor(Color value);
    public sealed virtual Color get_InactiveGlowColor();
    public sealed virtual void set_InactiveGlowColor(Color value);
    [CompilerGeneratedAttribute]
private HWND get_TargetWindowHandle();
    protected virtual bool get_IsWindowSubClassed();
    private bool get_IsPositionValid();
    [NullableContextAttribute("0")]
private void UpdateProperty(T& field, T value, FieldInvalidationTypes invalidation);
    protected virtual ushort CreateWindowClassCore();
    protected virtual void DestroyWindowClassCore();
    protected virtual IntPtr CreateWindowCore();
    protected virtual IntPtr WndProc(IntPtr hwnd, UInt32 msg, UIntPtr wParam, IntPtr lParam);
    private HT WmNcHitTest(IntPtr lParam);
    public sealed virtual void CommitChanges(IntPtr windowPosInfo);
    private bool InvalidatedValuesHasFlag(FieldInvalidationTypes flag);
    private void InvalidateCachedBitmaps();
    private void UpdateWindowPosCore(IntPtr windowPosInfo);
    private void UpdateLayeredWindowCore();
    private void BeginDelayedRender();
    private void CancelDelayedRender();
    private void CommitDelayedRender(object sender, EventArgs e);
    private void RenderLayeredWindow();
    private GlowBitmap GetOrCreateBitmap(GlowDrawingContext drawingContext, GlowBitmapPart bitmapPart);
    private static void ClearCache(GlowBitmap[] cache);
    protected virtual void DisposeManagedResources();
    private void DrawLeft(GlowDrawingContext drawingContext);
    private void DrawRight(GlowDrawingContext drawingContext);
    private void DrawTop(GlowDrawingContext drawingContext);
    private void DrawBottom(GlowDrawingContext drawingContext);
    public sealed virtual void UpdateWindowPos();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class ControlzEx.Controls.Internal.HwndWrapper : DisposableObject {
    private HWND hwnd;
    private bool isHandleCreationAllowed;
    [NullableAttribute("2")]
private WNDPROC wndProc;
    [CompilerGeneratedAttribute]
private static int <LastDestroyWindowError>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <WindowClassAtom>k__BackingField;
    public string ClassName { get; }
    public static int LastDestroyWindowError { get; private set; }
    [CLSCompliantAttribute("False")]
protected ushort WindowClassAtom { get; private set; }
    public IntPtr Handle { get; }
    internal HWND Hwnd { get; }
    protected bool IsWindowSubClassed { get; }
    public abstract virtual string get_ClassName();
    [CompilerGeneratedAttribute]
public static int get_LastDestroyWindowError();
    [CompilerGeneratedAttribute]
private static void set_LastDestroyWindowError(int value);
    [CompilerGeneratedAttribute]
protected ushort get_WindowClassAtom();
    [CompilerGeneratedAttribute]
private void set_WindowClassAtom(ushort value);
    public sealed virtual IntPtr get_Handle();
    internal HWND get_Hwnd();
    protected virtual bool get_IsWindowSubClassed();
    [CLSCompliantAttribute("False")]
protected virtual ushort CreateWindowClassCore();
    protected virtual void DestroyWindowClassCore();
    [CLSCompliantAttribute("False")]
protected ushort RegisterClass(string className);
    private void SubclassWndProc();
    protected abstract virtual IntPtr CreateWindowCore();
    protected virtual void DestroyWindowCore();
    private LRESULT WndProcWrapper(HWND hwnd, UInt32 msg, WPARAM wParam, LPARAM lParam);
    [CLSCompliantAttribute("False")]
protected virtual IntPtr WndProc(IntPtr hwnd, UInt32 msg, UIntPtr wParam, IntPtr lParam);
    public sealed virtual IntPtr EnsureHandle();
    protected virtual void DisposeNativeResources();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[TemplatePartAttribute]
[TemplatePartAttribute]
public class ControlzEx.Controls.TabControlEx : TabControl {
    [NullableAttribute("2")]
private static MethodInfo updateSelectedContentMethodInfo;
    [NullableAttribute("2")]
private Panel itemsHolder;
    public static DependencyProperty ChildContentVisibilityProperty;
    public static DependencyProperty TabPanelVisibilityProperty;
    public static DependencyProperty OwningTabItemProperty;
    public static DependencyProperty OwningItemProperty;
    public static DependencyProperty MoveFocusToContentWhenSelectionChangesProperty;
    public bool MoveFocusToContentWhenSelectionChanges { get; public set; }
    public Visibility TabPanelVisibility { get; public set; }
    public Visibility ChildContentVisibility { get; public set; }
    private static TabControlEx();
    [AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.ContentPresenter")]
public static TabItem GetOwningTabItem(DependencyObject element);
    public static void SetOwningTabItem(DependencyObject element, TabItem value);
    public static void SetOwningItem(DependencyObject element, object value);
    [AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.ContentPresenter")]
public static object GetOwningItem(DependencyObject element);
    public bool get_MoveFocusToContentWhenSelectionChanges();
    public void set_MoveFocusToContentWhenSelectionChanges(bool value);
    public Visibility get_TabPanelVisibility();
    public void set_TabPanelVisibility(Visibility value);
    public Visibility get_ChildContentVisibility();
    public void set_ChildContentVisibility(Visibility value);
    public virtual void OnApplyTemplate();
    protected virtual void OnInitialized(EventArgs e);
    protected virtual void OnItemsChanged(NotifyCollectionChangedEventArgs e);
    protected virtual void OnSelectionChanged(SelectionChangedEventArgs e);
    private void RaiseSelectionChangedEvent(SelectionChangedEventArgs e);
    protected virtual void OnKeyDown(KeyEventArgs e);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    [NullableContextAttribute("2")]
public TabItem GetSelectedTabItem();
    private void ClearItemsHolder();
    private void RefreshItemsHolder();
    private void HandleTabControlExLoaded(object sender, RoutedEventArgs e);
    private void HandleTabControlExUnloaded(object sender, RoutedEventArgs e);
    private void OnGeneratorStatusChanged(object sender, EventArgs e);
    private void OnGeneratorItemsChanged(object sender, ItemsChangedEventArgs e);
    private void UpdateSelectedContent();
    private void CreateChildContentPresenterIfRequired(object item, TabItem tabItem);
    protected virtual ContentPresenter CreateChildContentPresenter(object item, TabItem tabItem);
    [NullableContextAttribute("2")]
public ContentPresenter FindChildContentPresenter(object item, TabItem tabItem);
    private void MoveFocusToContent(ContentPresenter contentPresenter, TabItem tabItem);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class ControlzEx.DesignerConstants : object {
    public static string LibraryName;
    public static string Win32ElementWarning;
}
public static class ControlzEx.FeatureSupport : object {
    [CompilerGeneratedAttribute]
private static bool <IsPopupBackdropSupported>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <IsWindowBackdropSupported>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <IsWindowCaptionColorSupported>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <IsWindowBorderColorSupported>k__BackingField;
    public static bool IsPopupBackdropSupported { get; }
    public static bool IsWindowBackdropSupported { get; }
    public static bool IsWindowCaptionColorSupported { get; }
    public static bool IsWindowBorderColorSupported { get; }
    private static FeatureSupport();
    [CompilerGeneratedAttribute]
public static bool get_IsPopupBackdropSupported();
    [CompilerGeneratedAttribute]
public static bool get_IsWindowBackdropSupported();
    [CompilerGeneratedAttribute]
public static bool get_IsWindowCaptionColorSupported();
    [CompilerGeneratedAttribute]
public static bool get_IsWindowBorderColorSupported();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class ControlzEx.Helpers.GlowWindowBitmapGenerator : object {
    public static RenderTargetBitmap GenerateBitmapSource(GlowBitmapPart part, int glowDepth, bool useRadialGradientForCorners);
    private static Rect GetBlackRect(GlowBitmapPart part, int glowDepth);
    private static Size GetSize(GlowBitmapPart part, int glowDepth);
    private static GradientBrush CreateGradientBrush(GlowBitmapPart part, bool useRadialGradientForCorners);
    private static StartAndEndPoint GetStartAndEndPoint(GlowBitmapPart part);
    [IteratorStateMachineAttribute("ControlzEx.Helpers.GlowWindowBitmapGenerator/<GetGradientStops>d__5")]
private static IEnumerable`1<GradientStop> GetGradientStops(GlowBitmapPart part, bool useRadialGradientForCorners);
    private static Color ColorFromString(string input);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class ControlzEx.Helpers.OSVersionHelper : object {
    public static Version OSVersion;
    [CompilerGeneratedAttribute]
private static bool <IsWindowsNT>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <IsWindows10_OrGreater>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <IsWindows10_1903_OrGreater>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <IsWindows11_OrGreater>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <IsWindows11_22H2_OrGreater>k__BackingField;
    public static bool IsWindowsNT { get; }
    public static bool IsWindows10_OrGreater { get; }
    public static bool IsWindows10_1903_OrGreater { get; }
    public static bool IsWindows11_OrGreater { get; }
    public static bool IsWindows11_22H2_OrGreater { get; }
    private static OSVersionHelper();
    [CompilerGeneratedAttribute]
public static bool get_IsWindowsNT();
    [CompilerGeneratedAttribute]
public static bool get_IsWindows10_OrGreater();
    [CompilerGeneratedAttribute]
public static bool get_IsWindows10_1903_OrGreater();
    [CompilerGeneratedAttribute]
public static bool get_IsWindows11_OrGreater();
    [CompilerGeneratedAttribute]
public static bool get_IsWindows11_22H2_OrGreater();
    public static Version GetOSVersion();
}
[ExtensionAttribute]
internal static class ControlzEx.Internal.DoubleUtilities : object {
    private static double Epsilon;
    [ExtensionAttribute]
public static bool AreClose(double value1, double value2);
    [ExtensionAttribute]
public static bool IsCloseTo(double value1, double value2);
    [ExtensionAttribute]
public static bool IsStrictlyLessThan(double value1, double value2);
    [ExtensionAttribute]
public static bool IsStrictlyGreaterThan(double value1, double value2);
    [ExtensionAttribute]
public static bool IsLessThanOrCloseTo(double value1, double value2);
    [ExtensionAttribute]
public static bool IsGreaterThanOrCloseTo(double value1, double value2);
    [ExtensionAttribute]
public static bool IsFinite(double value);
    [ExtensionAttribute]
public static bool IsValidSize(double value);
    [ExtensionAttribute]
public static bool IsFiniteAndNonNegative(double d);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class ControlzEx.Internal.DpiHelper : object {
    [ThreadStaticAttribute]
private static Matrix transformToDevice;
    [ThreadStaticAttribute]
private static Matrix transformToDip;
    public static Point LogicalPixelsToDevice(Point logicalPoint, double dpiScaleX, double dpiScaleY);
    public static Point DevicePixelsToLogical(Point devicePoint, double dpiX, double dpiY);
    public static Rect LogicalRectToDevice(Rect logicalRectangle, double dpiX, double dpiY);
    public static Rect DeviceRectToLogical(Rect deviceRectangle, double dpiX, double dpiY);
    public static Size LogicalSizeToDevice(Size logicalSize, double dpiX, double dpiY);
    public static Size DeviceSizeToLogical(Size deviceSize, double dpiX, double dpiY);
    public static Thickness LogicalThicknessToDevice(Thickness logicalThickness, DpiScale dpiScale);
    public static Thickness LogicalThicknessToDevice(Thickness logicalThickness, double dpiScaleX, double dpiScaleY);
    public static double TransformToDeviceY(Visual visual, double y, double dpiY);
    public static double TransformToDeviceX(Visual visual, double x, double dpiX);
    public static double TransformToDeviceY(double y, double dpiY);
    public static double TransformToDeviceX(double x, double dpiX);
    [ExtensionAttribute]
public static DpiScale GetDpi(Visual visual);
    [ExtensionAttribute]
internal static DpiScale GetDpi(Window window);
}
internal static class ControlzEx.Internal.DwmHelper : object {
    public static bool SetWindowAttributeValue(IntPtr hWnd, DWMWINDOWATTRIBUTE attribute, int attributeValue);
    public static bool SetWindowAttribute(IntPtr hWnd, DWMWINDOWATTRIBUTE attribute, Int32& attributeValue);
    public static bool SetWindowAttributeValue(IntPtr hWnd, DWMWINDOWATTRIBUTE attribute, UInt32 attributeValue);
    public static bool SetWindowAttribute(IntPtr hWnd, DWMWINDOWATTRIBUTE attribute, UInt32& attributeValue);
    public static bool ExtendFrameIntoClientArea(IntPtr hWnd, Thickness margins);
    [NullableContextAttribute("1")]
public static bool HasDarkTheme(FrameworkElement target);
    public static bool SetImmersiveDarkMode(IntPtr hWnd, bool isDarkTheme);
    public static bool SetBackdropType(IntPtr hWnd, WindowBackdropType windowBackdropType);
}
internal static class ControlzEx.Internal.FrameworkAppContextSwitches : object {
    [NullableAttribute("2")]
private static PropertyInfo SelectionPropertiesCanLagBehindSelectionChangedEventPropertyInfo;
    private static bool SelectionPropertiesCanLagBehindSelectionChangedEventDefaultValue;
    internal static bool SelectionPropertiesCanLagBehindSelectionChangedEvent { get; }
    private static FrameworkAppContextSwitches();
    internal static bool get_SelectionPropertiesCanLagBehindSelectionChangedEvent();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class ControlzEx.Internal.KnownBoxes.BooleanBoxes : object {
    internal static object TrueBox;
    internal static object FalseBox;
    private static BooleanBoxes();
    internal static object Box(bool value);
    [NullableContextAttribute("2")]
internal static object Box(Nullable`1<bool> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class ControlzEx.Internal.KnownBoxes.DoubleBoxes : object {
    internal static object Zero;
    internal static object NaN;
    internal static object MaxValue;
    internal static object One;
    private static DoubleBoxes();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class ControlzEx.Internal.KnownBoxes.IntBoxes : object {
    internal static object Zero;
    internal static object One;
    internal static object MaxValue;
    private static IntBoxes();
}
internal static class ControlzEx.Internal.KnownBoxes.StringBoxes : object {
    [NullableAttribute("1")]
internal static object Empty;
    private static StringBoxes();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class ControlzEx.Internal.KnownBoxes.VisibilityBoxes : object {
    internal static object Visible;
    internal static object Hidden;
    internal static object Collapsed;
    private static VisibilityBoxes();
    internal static object Box(Visibility value);
}
internal static class ControlzEx.Internal.MonitorHelper : object {
    public static Rect GetOnScreenPosition(Rect rect, IntPtr windowHandle, bool ignoreTaskbar);
    private static void FindMaximumSingleMonitorRectangle(Rect windowRect, Rect& screenSubRect, Rect& monitorRect);
    private static void FindMaximumSingleMonitorRectangle(RECT windowRect, RECT& screenSubRect, RECT& monitorRect);
    public static IntPtr MonitorFromWindowPosOrWindow(WINDOWPOS windowpos, IntPtr hwnd);
    public static IntPtr MonitorFromRectOrWindow(RECT windowRect, IntPtr hwnd);
    public static MONITORINFO MonitorInfoFromWindow(IntPtr hWnd);
    public static bool TryGetMonitorInfoFromPoint(MONITORINFO& monitorInfo);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class ControlzEx.Internal.ResourceDictionaryHelper : object {
    public static object GetValueFromKey(ResourceDictionary resourceDictionary, object key);
    public static bool ContainsKey(ResourceDictionary resourceDictionary, object key);
}
[ExtensionAttribute]
internal static class ControlzEx.Internal.SelectorAutomationPeerExtensions : object {
    [NullableAttribute("2")]
private static MethodInfo RaiseSelectionEventsMethodInfo;
    private static SelectorAutomationPeerExtensions();
    [NullableContextAttribute("1")]
[ExtensionAttribute]
internal static void RaiseSelectionEvents(SelectorAutomationPeer selectorAutomationPeer, SelectionChangedEventArgs e);
}
[ExtensionAttribute]
internal static class ControlzEx.Internal.TabItemExtensions : object {
    [NullableAttribute("2")]
private static MethodInfo SetFocusMethodInfo;
    private static TabItemExtensions();
    [NullableContextAttribute("1")]
[ExtensionAttribute]
internal static bool SetFocus(TabItem tabItem);
}
[ExtensionAttribute]
internal static class ControlzEx.Internal.Utility : object {
    public static Point GetPoint(IntPtr ptr);
    public static int GET_X_LPARAM(IntPtr lParam);
    public static int GET_Y_LPARAM(IntPtr lParam);
    public static int HIWORD(int i);
    public static int LOWORD(int i);
    public static bool IsFlagSet(int value, int mask);
    [NullableContextAttribute("1")]
public static void SafeDispose(T& disposable);
    public static Color ColorFromArgbDword(UInt32 color);
    [ExtensionAttribute]
public static bool IsNonNegative(Thickness thickness);
    [ExtensionAttribute]
public static bool IsValid(CornerRadius cornerRadius);
}
internal static class ControlzEx.Internal.WindowHelper : object {
    public static bool IsWindowHandleValid(IntPtr windowHandle);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ControlzEx.KeyboardNavigationEx : object {
    [NullableAttribute("2")]
private static KeyboardNavigationEx instance;
    [NullableAttribute("2")]
private PropertyInfo alwaysShowFocusVisual;
    [NullableAttribute("2")]
private MethodInfo showFocusVisual;
    public static DependencyProperty AlwaysShowFocusVisualProperty;
    internal static KeyboardNavigationEx Instance { get; }
    internal bool AlwaysShowFocusVisualInternal { get; internal set; }
    private static KeyboardNavigationEx();
    internal static KeyboardNavigationEx get_Instance();
    internal void ShowFocusVisualInternal();
    internal bool get_AlwaysShowFocusVisualInternal();
    internal void set_AlwaysShowFocusVisualInternal(bool value);
    [NullableContextAttribute("2")]
public static void Focus(UIElement element);
    private static void OnAlwaysShowFocusVisualChanged(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs args);
    private static void FrameworkElementGotFocus(object sender, RoutedEventArgs e);
    [AttachedPropertyBrowsableForTypeAttribute("System.Windows.UIElement")]
public static bool GetAlwaysShowFocusVisual(UIElement element);
    [AttachedPropertyBrowsableForTypeAttribute("System.Windows.UIElement")]
public static void SetAlwaysShowFocusVisual(UIElement element, bool value);
}
[ObsoleteAttribute("Use this element with caution and only if you know what you are doing. It's only meant to be used internally by MahApps.Metro and Fluent.Ribbon. Breaking changes might occur anytime without prior warning.")]
public static class ControlzEx.Native.Constants : object {
    public static int ResizeCornerGripThickness;
    private static Constants();
}
[CLSCompliantAttribute("False")]
public static class ControlzEx.Native.DWMAttributeValues : object {
    public static int False;
    public static int True;
    public static UInt32 DWMWA_COLOR_DEFAULT;
    public static UInt32 DWMWA_COLOR_NONE;
}
internal enum ControlzEx.Native.DWMSBT : Enum {
    public UInt32 value__;
    public static DWMSBT DWMSBT_AUTO;
    public static DWMSBT DWMSBT_DISABLE;
    public static DWMSBT DWMSBT_MAINWINDOW;
    public static DWMSBT DWMSBT_TRANSIENTWINDOW;
    public static DWMSBT DWMSBT_TABBEDWINDOW;
}
public enum ControlzEx.Native.HT : Enum {
    public int value__;
    public static HT ERROR;
    public static HT TRANSPARENT;
    public static HT NOWHERE;
    public static HT CLIENT;
    public static HT CAPTION;
    public static HT SYSMENU;
    public static HT GROWBOX;
    public static HT MENU;
    public static HT HSCROLL;
    public static HT VSCROLL;
    public static HT MINBUTTON;
    public static HT MAXBUTTON;
    public static HT LEFT;
    public static HT RIGHT;
    public static HT TOP;
    public static HT TOPLEFT;
    public static HT TOPRIGHT;
    public static HT BOTTOM;
    public static HT BOTTOMLEFT;
    public static HT BOTTOMRIGHT;
    public static HT BORDER;
    public static HT OBJECT;
    public static HT CLOSE;
    public static HT HELP;
}
public abstract class ControlzEx.PackIconBase : Control {
    internal abstract virtual void UpdateData();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class ControlzEx.PackIconBase`1 : PackIconBase {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Lazy`1<IDictionary`2<TKind, string>> dataIndex;
    public static DependencyProperty KindProperty;
    private static DependencyPropertyKey DataPropertyKey;
    public static DependencyProperty DataProperty;
    public TKind Kind { get; public set; }
    [NullableAttribute("2")]
[TypeConverterAttribute("System.Windows.Media.GeometryConverter")]
public string Data { get; private set; }
    protected PackIconBase`1(Func`1<IDictionary`2<TKind, string>> dataIndexFactory);
    private static PackIconBase`1();
    private static void OnKindChanged(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs dependencyPropertyChangedEventArgs);
    public TKind get_Kind();
    public void set_Kind(TKind value);
    [NullableContextAttribute("2")]
public string get_Data();
    [NullableContextAttribute("2")]
private void set_Data(string value);
    public virtual void OnApplyTemplate();
    internal virtual void UpdateData();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ControlzEx.PopupEx : Popup {
    public static DependencyProperty CloseOnMouseLeftButtonDownProperty;
    public static DependencyProperty AllowTopMostProperty;
    [NullableAttribute("2")]
private Window hostWindow;
    private Nullable`1<bool> appliedTopMost;
    public bool CloseOnMouseLeftButtonDown { get; public set; }
    public bool AllowTopMost { get; public set; }
    private static PopupEx();
    public bool get_CloseOnMouseLeftButtonDown();
    public void set_CloseOnMouseLeftButtonDown(bool value);
    public bool get_AllowTopMost();
    public void set_AllowTopMost(bool value);
    public void RefreshPosition();
    private void PopupEx_Loaded(object sender, RoutedEventArgs e);
    private void PopupEx_Opened(object sender, EventArgs e);
    private void HostWindow_Activated(object sender, EventArgs e);
    private void HostWindow_Deactivated(object sender, EventArgs e);
    private void PopupEx_Unloaded(object sender, RoutedEventArgs e);
    private void HostWindow_StateChanged(object sender, EventArgs e);
    private void HostWindow_SizeOrLocationChanged(object sender, EventArgs e);
    private void SetTopmostState(bool isTop);
    protected virtual void OnPreviewMouseLeftButtonDown(MouseButtonEventArgs e);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class ControlzEx.PropertyChangeNotifier : DependencyObject {
    [NullableAttribute("1")]
private WeakReference propertySource;
    [NullableAttribute("1")]
public static DependencyProperty ValueProperty;
    [CompilerGeneratedAttribute]
private EventHandler ValueChanged;
    [CompilerGeneratedAttribute]
private bool <RaiseValueChanged>k__BackingField;
    public DependencyObject PropertySource { get; }
    [DescriptionAttribute("Gets or sets the value of the watched property.")]
[CategoryAttribute("Behavior")]
[BindableAttribute("True")]
public object Value { get; public set; }
    public bool RaiseValueChanged { get; public set; }
    [NullableContextAttribute("1")]
public PropertyChangeNotifier(DependencyObject propertySource, string path);
    [NullableContextAttribute("1")]
public PropertyChangeNotifier(DependencyObject propertySource, DependencyProperty property);
    [NullableContextAttribute("1")]
public PropertyChangeNotifier(DependencyObject propertySource, PropertyPath property);
    private static PropertyChangeNotifier();
    public DependencyObject get_PropertySource();
    public object get_Value();
    public void set_Value(object value);
    [NullableContextAttribute("1")]
private static void OnValueChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
public void add_ValueChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ValueChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public bool get_RaiseValueChanged();
    [CompilerGeneratedAttribute]
public void set_RaiseValueChanged(bool value);
    public sealed virtual void Dispose();
}
public enum ControlzEx.ResizeGripDirection : Enum {
    public int value__;
    public static ResizeGripDirection None;
    public static ResizeGripDirection TopLeft;
    public static ResizeGripDirection Top;
    public static ResizeGripDirection TopRight;
    public static ResizeGripDirection Right;
    public static ResizeGripDirection BottomRight;
    public static ResizeGripDirection Bottom;
    public static ResizeGripDirection BottomLeft;
    public static ResizeGripDirection Left;
    public static ResizeGripDirection Caption;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ObsoleteAttribute("Use this element with caution and only if you know what you are doing. It's only meant to be used internally by MahApps.Metro and Fluent.Ribbon. Breaking changes might occur anytime without prior warning.")]
public static class ControlzEx.SystemCommands : object {
    [CompilerGeneratedAttribute]
private static RoutedCommand <CloseWindowCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private static RoutedCommand <MaximizeWindowCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private static RoutedCommand <MinimizeWindowCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private static RoutedCommand <RestoreWindowCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private static RoutedCommand <ShowSystemMenuCommand>k__BackingField;
    public static RoutedCommand CloseWindowCommand { get; }
    public static RoutedCommand MaximizeWindowCommand { get; }
    public static RoutedCommand MinimizeWindowCommand { get; }
    public static RoutedCommand RestoreWindowCommand { get; }
    public static RoutedCommand ShowSystemMenuCommand { get; }
    private static SystemCommands();
    [CompilerGeneratedAttribute]
public static RoutedCommand get_CloseWindowCommand();
    [CompilerGeneratedAttribute]
public static RoutedCommand get_MaximizeWindowCommand();
    [CompilerGeneratedAttribute]
public static RoutedCommand get_MinimizeWindowCommand();
    [CompilerGeneratedAttribute]
public static RoutedCommand get_RestoreWindowCommand();
    [CompilerGeneratedAttribute]
public static RoutedCommand get_ShowSystemMenuCommand();
    [SecurityCriticalAttribute]
private static void PostSystemCommand(Window window, SC command);
    [SecuritySafeCriticalAttribute]
public static void CloseWindow(Window window);
    [SecuritySafeCriticalAttribute]
public static void MaximizeWindow(Window window);
    [SecuritySafeCriticalAttribute]
public static void MinimizeWindow(Window window);
    [SecuritySafeCriticalAttribute]
public static void RestoreWindow(Window window);
    [SecuritySafeCriticalAttribute]
public static void ShowSystemMenu(Window window, MouseButtonEventArgs e);
    [SecuritySafeCriticalAttribute]
public static void ShowSystemMenu(Visual visual, Point elementPoint);
    [SecuritySafeCriticalAttribute]
public static void ShowSystemMenuPhysicalCoordinates(Visual visual, Point physicalScreenLocation);
    [SecuritySafeCriticalAttribute]
public static void ShowSystemMenuPhysicalCoordinates(HwndSource source, Point physicalScreenLocation);
}
[ObsoleteAttribute("This class uses undocumented OS theming methods. Thus this might break at any time.")]
public static class ControlzEx.Theming.AppModeHelper : object {
    public static void SyncAppMode();
    public static void AllowDarkAppMode();
    public static void SetAppMode(bool isDark);
}
public class ControlzEx.Theming.HSLColor : ValueType {
    [CompilerGeneratedAttribute]
private double <A>k__BackingField;
    [CompilerGeneratedAttribute]
private double <H>k__BackingField;
    [CompilerGeneratedAttribute]
private double <S>k__BackingField;
    [CompilerGeneratedAttribute]
private double <L>k__BackingField;
    public double A { get; public set; }
    public double H { get; public set; }
    public double S { get; public set; }
    public double L { get; public set; }
    public HSLColor(Color color);
    public HSLColor(double a, double h, double s, double l);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public double get_A();
    [CompilerGeneratedAttribute]
public void set_A(double value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public double get_H();
    [CompilerGeneratedAttribute]
public void set_H(double value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public double get_S();
    [CompilerGeneratedAttribute]
public void set_S(double value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public double get_L();
    [CompilerGeneratedAttribute]
public void set_L(double value);
    public Color ToColor();
    public Color GetTintedColor(double tint);
    public static Color GetTintedColor(Color color, double tint);
    private byte GetColorComponent(int n);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(HSLColor x, HSLColor y);
    public static bool op_Inequality(HSLColor x, HSLColor y);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ControlzEx.Theming.LibraryTheme : object {
    public static string LibraryThemeInstanceKey;
    public static string LibraryThemeAlternativeColorSchemeKey;
    public static string RuntimeThemeColorValuesKey;
    [CompilerGeneratedAttribute]
private bool <IsRuntimeGenerated>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsHighContrast>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Origin>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BaseColorScheme>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ColorScheme>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <PrimaryAccentColor>k__BackingField;
    [CompilerGeneratedAttribute]
private Brush <ShowcaseBrush>k__BackingField;
    [CompilerGeneratedAttribute]
private ResourceDictionary <Resources>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AlternativeColorScheme>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Theme <ParentTheme>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private LibraryThemeProvider <LibraryThemeProvider>k__BackingField;
    public bool IsRuntimeGenerated { get; }
    public bool IsHighContrast { get; }
    public string Name { get; }
    [NullableAttribute("2")]
public string Origin { get; }
    public string DisplayName { get; }
    public string BaseColorScheme { get; }
    public string ColorScheme { get; }
    public Color PrimaryAccentColor { get; public set; }
    public Brush ShowcaseBrush { get; }
    public ResourceDictionary Resources { get; }
    public string AlternativeColorScheme { get; public set; }
    [NullableAttribute("2")]
public Theme ParentTheme { get; internal set; }
    [NullableAttribute("2")]
public LibraryThemeProvider LibraryThemeProvider { get; }
    public LibraryTheme(Uri resourceAddress, LibraryThemeProvider libraryThemeProvider);
    public LibraryTheme(ResourceDictionary resourceDictionary, LibraryThemeProvider libraryThemeProvider);
    [CompilerGeneratedAttribute]
public bool get_IsRuntimeGenerated();
    [CompilerGeneratedAttribute]
public bool get_IsHighContrast();
    [CompilerGeneratedAttribute]
public string get_Name();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Origin();
    [CompilerGeneratedAttribute]
public string get_DisplayName();
    [CompilerGeneratedAttribute]
public string get_BaseColorScheme();
    [CompilerGeneratedAttribute]
public string get_ColorScheme();
    [CompilerGeneratedAttribute]
public Color get_PrimaryAccentColor();
    [CompilerGeneratedAttribute]
public void set_PrimaryAccentColor(Color value);
    [CompilerGeneratedAttribute]
public Brush get_ShowcaseBrush();
    [CompilerGeneratedAttribute]
public ResourceDictionary get_Resources();
    [CompilerGeneratedAttribute]
public string get_AlternativeColorScheme();
    [CompilerGeneratedAttribute]
public void set_AlternativeColorScheme(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Theme get_ParentTheme();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal void set_ParentTheme(Theme value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public LibraryThemeProvider get_LibraryThemeProvider();
    public virtual bool Matches(LibraryTheme libraryTheme);
    public virtual bool MatchesSecondTry(LibraryTheme libraryTheme);
    public virtual bool MatchesThirdTry(LibraryTheme libraryTheme);
    public LibraryTheme AddResource(ResourceDictionary resourceDictionary);
    public virtual string ToString();
    public static string GetThemeName(ResourceDictionary resourceDictionary);
    public static bool IsThemeDictionary(ResourceDictionary resourceDictionary);
    public static bool IsRuntimeGeneratedThemeDictionary(ResourceDictionary resourceDictionary);
    private static ResourceDictionary CreateResourceDictionary(Uri resourceAddress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class ControlzEx.Theming.LibraryThemeProvider : DependencyObject {
    private Assembly assembly;
    private string assemblyName;
    private String[] resourceNames;
    [CompilerGeneratedAttribute]
private string <GeneratorParametersResourceName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ThemeTemplateResourceName>k__BackingField;
    public string GeneratorParametersResourceName { get; protected set; }
    public string ThemeTemplateResourceName { get; protected set; }
    protected LibraryThemeProvider(bool registerAtThemeManager);
    [CompilerGeneratedAttribute]
public string get_GeneratorParametersResourceName();
    [CompilerGeneratedAttribute]
protected void set_GeneratorParametersResourceName(string value);
    [CompilerGeneratedAttribute]
public string get_ThemeTemplateResourceName();
    [CompilerGeneratedAttribute]
protected void set_ThemeTemplateResourceName(string value);
    public abstract virtual void FillColorSchemeValues(Dictionary`2<string, string> values, RuntimeThemeColorValues colorValues);
    [NullableContextAttribute("2")]
public virtual string GetThemeGeneratorParametersContent();
    [NullableContextAttribute("2")]
public virtual string GetThemeTemplateContent();
    [NullableContextAttribute("2")]
public virtual LibraryTheme GetLibraryTheme(DictionaryEntry dictionaryEntry);
    [IteratorStateMachineAttribute("ControlzEx.Theming.LibraryThemeProvider/<GetLibraryThemes>d__16")]
public virtual IEnumerable`1<LibraryTheme> GetLibraryThemes();
    public virtual LibraryTheme ProvideMissingLibraryTheme(Theme themeToProvideNewLibraryThemeFor);
    protected virtual bool IsPotentialThemeResourceDictionary(DictionaryEntry dictionaryEntry);
    protected virtual bool ResourceNamesMatch(string resourceName, string value);
    public virtual string PrepareXamlContent(RuntimeThemeGenerator runtimeThemeGenerator, string xamlContent, RuntimeThemeColorValues runtimeThemeColorValues);
    public virtual void PrepareRuntimeThemeResourceDictionary(RuntimeThemeGenerator runtimeThemeGenerator, ResourceDictionary resourceDictionary, RuntimeThemeColorValues runtimeThemeColorValues);
    public LibraryTheme CreateRuntimeLibraryTheme(ResourceDictionary resourceDictionary, RuntimeThemeColorValues runtimeThemeColorValues);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ObsoleteAttribute("This class uses undocumented OS theming methods. Thus this might break at any time.")]
public class ControlzEx.Theming.PopupBackdropManager : DependencyObject {
    public static DependencyProperty BackdropTypeProperty;
    private static DependencyPropertyKey CurrentBackdropTypePropertyKey;
    public static DependencyProperty CurrentBackdropTypeProperty;
    public static DependencyProperty LightTintColorProperty;
    public static DependencyProperty DarkTintColorProperty;
    private static PopupBackdropManager();
    public static void SetBackdropType(Popup element, PopupBackdropType value);
    [AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.Primitives.Popup")]
public static PopupBackdropType GetBackdropType(Popup element);
    private static void OnBackdropTypeChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void SetCurrentBackdropType(Popup element, PopupBackdropType value);
    [AttachedPropertyBrowsableForTypeAttribute("System.Windows.Window")]
[AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.Primitives.Popup")]
public static PopupBackdropType GetCurrentBackdropType(Popup element);
    public static void SetLightTintColor(DependencyObject element, Color value);
    public static Color GetLightTintColor(DependencyObject element);
    public static void SetDarkTintColor(DependencyObject element, Color value);
    public static Color GetDarkTintColor(DependencyObject element);
    private static Color ToColor(UInt32 value);
    private static UInt32 FromColor(Color value);
    public static bool UpdateBackdrop(Popup target);
    public static bool UpdateBackdrop(Popup target, bool isDarkTheme);
    public static bool UpdateBackdrop(Popup target, PopupBackdropType popupBackdropType, bool isDarkTheme);
    private static void HandlePopupOpened(object sender, EventArgs e);
    private static void HandlePopupClosed(object sender, EventArgs e);
    public static bool UpdateBackdrop(IntPtr handle, Popup target, PopupBackdropType popupBackdropType, bool isDarkTheme);
    private static bool SetBackdropType(IntPtr handle, Popup target, PopupBackdropType popupBackdropType, bool isDarkTheme);
    private static HRESULT SetWindowCompositionAttribute(IntPtr hwnd, WindowCompositionAttributeData& data);
    private static bool SetAccentPolicy(IntPtr handle, PopupBackdropType popupBackdropType, UInt32 gradienColor);
}
[ObsoleteAttribute("This class uses undocumented OS theming methods. Thus this might break at any time.")]
public enum ControlzEx.Theming.PopupBackdropType : Enum {
    public int value__;
    public static PopupBackdropType None;
    public static PopupBackdropType Gradient;
    public static PopupBackdropType TransparentGradient;
    public static PopupBackdropType Blurbehind;
    public static PopupBackdropType AcrylicBlurbehind;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ControlzEx.Theming.RuntimeThemeColorValues : object {
    private Color accentBaseColor;
    private Color accentColor;
    private Color accentColor20;
    private Color accentColor40;
    private Color accentColor60;
    private Color accentColor80;
    private Color highlightColor;
    private Color idealForegroundColor;
    private Color primaryAccentColor;
    [CompilerGeneratedAttribute]
private RuntimeThemeOptions <Options>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    public RuntimeThemeOptions Options { get; }
    public Color AccentColor { get; public set; }
    public Color AccentBaseColor { get; public set; }
    public Color PrimaryAccentColor { get; public set; }
    public Color AccentColor80 { get; public set; }
    public Color AccentColor60 { get; public set; }
    public Color AccentColor40 { get; public set; }
    public Color AccentColor20 { get; public set; }
    public Color HighlightColor { get; public set; }
    public Color IdealForegroundColor { get; public set; }
    public RuntimeThemeColorValues(RuntimeThemeOptions options);
    [CompilerGeneratedAttribute]
public RuntimeThemeOptions get_Options();
    public Color get_AccentColor();
    public void set_AccentColor(Color value);
    public Color get_AccentBaseColor();
    public void set_AccentBaseColor(Color value);
    public Color get_PrimaryAccentColor();
    public void set_PrimaryAccentColor(Color value);
    public Color get_AccentColor80();
    public void set_AccentColor80(Color value);
    public Color get_AccentColor60();
    public void set_AccentColor60(Color value);
    public Color get_AccentColor40();
    public void set_AccentColor40(Color value);
    public Color get_AccentColor20();
    public void set_AccentColor20(Color value);
    public Color get_HighlightColor();
    public void set_HighlightColor(Color value);
    public Color get_IdealForegroundColor();
    public void set_IdealForegroundColor(Color value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    [NullableContextAttribute("2")]
protected virtual void OnPropertyChanged(string propertyName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ControlzEx.Theming.RuntimeThemeGenerator : object {
    [CompilerGeneratedAttribute]
private static RuntimeThemeGenerator <Current>k__BackingField;
    [CompilerGeneratedAttribute]
private RuntimeThemeGeneratorOptions <Options>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    public static RuntimeThemeGenerator Current { get; public set; }
    public RuntimeThemeGeneratorOptions Options { get; }
    private static RuntimeThemeGenerator();
    [CompilerGeneratedAttribute]
public static RuntimeThemeGenerator get_Current();
    [CompilerGeneratedAttribute]
public static void set_Current(RuntimeThemeGenerator value);
    [CompilerGeneratedAttribute]
public RuntimeThemeGeneratorOptions get_Options();
    public Theme GenerateRuntimeThemeFromWindowsSettings(string baseColor, bool isHighContrast, LibraryThemeProvider[] libraryThemeProviders);
    public virtual Theme GenerateRuntimeThemeFromWindowsSettings(string baseColor, bool isHighContrast, IEnumerable`1<LibraryThemeProvider> libraryThemeProviders);
    public Theme GenerateRuntimeTheme(string baseColor, Color accentColor);
    public virtual Theme GenerateRuntimeTheme(string baseColor, Color accentColor, bool isHighContrast);
    public Theme GenerateRuntimeTheme(string baseColor, Color accentColor, bool isHighContrast, LibraryThemeProvider[] libraryThemeProviders);
    public virtual Theme GenerateRuntimeTheme(string baseColor, Color accentColor, bool isHighContrast, IEnumerable`1<LibraryThemeProvider> libraryThemeProviders);
    public virtual LibraryTheme GenerateRuntimeLibraryTheme(string baseColor, Color accentColor, bool isHighContrast, LibraryThemeProvider libraryThemeProvider);
    public virtual LibraryTheme GenerateRuntimeLibraryTheme(LibraryThemeProvider libraryThemeProvider, Dictionary`2<string, string> values, RuntimeThemeColorValues runtimeThemeColorValues, string themeTemplateContent, string themeName, string themeDisplayName, ThemeGeneratorBaseColorScheme baseColorScheme, ThemeGeneratorColorScheme colorScheme, ThemeGeneratorParameters generatorParameters);
    public virtual RuntimeThemeColorValues GetColors(Color accentColor, RuntimeThemeOptions options);
    public static Color GetIdealTextColor(Color color);
    public static Color GetHighlightColor(Color color, int highlightFactor);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    [NullableContextAttribute("2")]
protected virtual void OnPropertyChanged(string propertyName);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class ControlzEx.Theming.RuntimeThemeGeneratorOptions : object {
    private bool useHSL;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    public bool UseHSL { get; public set; }
    public bool get_UseHSL();
    public void set_UseHSL(bool value);
    public virtual RuntimeThemeOptions CreateRuntimeThemeOptions(bool isHighContrast, ThemeGeneratorParameters generatorParameters, ThemeGeneratorBaseColorScheme baseColorScheme);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    protected virtual void OnPropertyChanged(string propertyName);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class ControlzEx.Theming.RuntimeThemeOptions : object {
    [CompilerGeneratedAttribute]
private bool <UseHSL>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsHighContrast>k__BackingField;
    [CompilerGeneratedAttribute]
private ThemeGeneratorParameters <GeneratorParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private ThemeGeneratorBaseColorScheme <BaseColorScheme>k__BackingField;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    public bool UseHSL { get; }
    public bool IsHighContrast { get; }
    public ThemeGeneratorParameters GeneratorParameters { get; }
    public ThemeGeneratorBaseColorScheme BaseColorScheme { get; }
    public RuntimeThemeOptions(bool useHSL, bool isHighContrast, ThemeGeneratorParameters generatorParameters, ThemeGeneratorBaseColorScheme baseColorScheme);
    [CompilerGeneratedAttribute]
public bool get_UseHSL();
    [CompilerGeneratedAttribute]
public bool get_IsHighContrast();
    [CompilerGeneratedAttribute]
public ThemeGeneratorParameters get_GeneratorParameters();
    [CompilerGeneratedAttribute]
public ThemeGeneratorBaseColorScheme get_BaseColorScheme();
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    protected virtual void OnPropertyChanged(string propertyName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ControlzEx.Theming.Theme : object {
    public static string ThemeNameKey;
    public static string ThemeOriginKey;
    public static string ThemeDisplayNameKey;
    public static string ThemeBaseColorSchemeKey;
    public static string ThemeColorSchemeKey;
    public static string ThemePrimaryAccentColorKey;
    public static string ThemeShowcaseBrushKey;
    public static string ThemeIsRuntimeGeneratedKey;
    public static string ThemeIsHighContrastKey;
    public static string ThemeInstanceKey;
    public static Dictionary`2<Uri, bool> ThemeDictionaryCache;
    [CompilerGeneratedAttribute]
private bool <IsRuntimeGenerated>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsHighContrast>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BaseColorScheme>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <PrimaryAccentColor>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ColorScheme>k__BackingField;
    [CompilerGeneratedAttribute]
private Brush <ShowcaseBrush>k__BackingField;
    [CompilerGeneratedAttribute]
private ResourceDictionary <Resources>k__BackingField;
    [CompilerGeneratedAttribute]
private ReadOnlyObservableCollection`1<LibraryTheme> <LibraryThemes>k__BackingField;
    [CompilerGeneratedAttribute]
private ObservableCollection`1<LibraryTheme> <LibraryThemesInternal>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    public bool IsRuntimeGenerated { get; }
    public bool IsHighContrast { get; }
    public string Name { get; }
    public string DisplayName { get; }
    public string BaseColorScheme { get; }
    public Color PrimaryAccentColor { get; public set; }
    public string ColorScheme { get; }
    public Brush ShowcaseBrush { get; }
    public ResourceDictionary Resources { get; }
    public ReadOnlyObservableCollection`1<LibraryTheme> LibraryThemes { get; }
    private ObservableCollection`1<LibraryTheme> LibraryThemesInternal { get; }
    public Theme(LibraryTheme libraryTheme);
    public Theme(string name, string displayName, string baseColorScheme, string colorScheme, Color primaryAccentColor, Brush showcaseBrush, bool isRuntimeGenerated, bool isHighContrast);
    private static Theme();
    [CompilerGeneratedAttribute]
public bool get_IsRuntimeGenerated();
    [CompilerGeneratedAttribute]
public bool get_IsHighContrast();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public string get_DisplayName();
    [CompilerGeneratedAttribute]
public string get_BaseColorScheme();
    [CompilerGeneratedAttribute]
public Color get_PrimaryAccentColor();
    [CompilerGeneratedAttribute]
public void set_PrimaryAccentColor(Color value);
    [CompilerGeneratedAttribute]
public string get_ColorScheme();
    [CompilerGeneratedAttribute]
public Brush get_ShowcaseBrush();
    [CompilerGeneratedAttribute]
public ResourceDictionary get_Resources();
    [CompilerGeneratedAttribute]
public ReadOnlyObservableCollection`1<LibraryTheme> get_LibraryThemes();
    [CompilerGeneratedAttribute]
private ObservableCollection`1<LibraryTheme> get_LibraryThemesInternal();
    public Theme EnsureAllLibraryThemeProvidersProvided();
    [IteratorStateMachineAttribute("ControlzEx.Theming.Theme/<GetAllResources>d__48")]
public IEnumerable`1<ResourceDictionary> GetAllResources();
    public Theme AddLibraryTheme(LibraryTheme libraryTheme);
    public virtual string ToString();
    public static string GetThemeName(ResourceDictionary resourceDictionary);
    public static Theme GetThemeInstance(ResourceDictionary resourceDictionary);
    public static bool IsThemeDictionary(ResourceDictionary resourceDictionary);
    public static bool IsRuntimeGeneratedThemeDictionary(ResourceDictionary resourceDictionary);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    [NullableContextAttribute("2")]
protected virtual void OnPropertyChanged(string propertyName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ControlzEx.Theming.ThemeChangedEventArgs : EventArgs {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private object <Target>k__BackingField;
    [CompilerGeneratedAttribute]
private ResourceDictionary <TargetResourceDictionary>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Theme <OldTheme>k__BackingField;
    [CompilerGeneratedAttribute]
private Theme <NewTheme>k__BackingField;
    [NullableAttribute("2")]
public object Target { get; }
    public ResourceDictionary TargetResourceDictionary { get; }
    [NullableAttribute("2")]
public Theme OldTheme { get; public set; }
    public Theme NewTheme { get; public set; }
    public ThemeChangedEventArgs(object target, ResourceDictionary targetResourceDictionary, Theme oldTheme, Theme newTheme);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public object get_Target();
    [CompilerGeneratedAttribute]
public ResourceDictionary get_TargetResourceDictionary();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Theme get_OldTheme();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_OldTheme(Theme value);
    [CompilerGeneratedAttribute]
public Theme get_NewTheme();
    [CompilerGeneratedAttribute]
public void set_NewTheme(Theme value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ControlzEx.Theming.ThemeGenerator : object {
    [CompilerGeneratedAttribute]
private static ThemeGenerator <Current>k__BackingField;
    public static ThemeGenerator Current { get; public set; }
    private static ThemeGenerator();
    [CompilerGeneratedAttribute]
public static ThemeGenerator get_Current();
    [CompilerGeneratedAttribute]
public static void set_Current(ThemeGenerator value);
    public virtual ThemeGeneratorParameters GetParametersFromString(string input);
    public virtual string GenerateColorSchemeFileContent(string templateContent, string themeName, string themeDisplayName, string baseColorScheme, string colorScheme, string alternativeColorScheme, bool isHighContrast, Dictionary`2[] valueSources);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ControlzEx.Theming.ThemeManager : object {
    public static string BaseColorLight;
    public static string BaseColorLightConst;
    public static string BaseColorDark;
    public static string BaseColorDarkConst;
    private bool isEnsuringThemesOrRegisteringProvider;
    private ObservableCollection`1<LibraryThemeProvider> libraryThemeProvidersInternal;
    private ObservableCollection`1<Theme> themesInternal;
    private ReadOnlyObservableCollection`1<Theme> themes;
    private ObservableCollection`1<string> baseColorsInternal;
    private ReadOnlyObservableCollection`1<string> baseColors;
    private ObservableCollection`1<string> colorSchemesInternal;
    private ReadOnlyObservableCollection`1<string> colorSchemes;
    [CompilerGeneratedAttribute]
private static ThemeManager <Current>k__BackingField;
    [CompilerGeneratedAttribute]
private ReadOnlyObservableCollection`1<LibraryThemeProvider> <LibraryThemeProviders>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<ThemeChangedEventArgs> ThemeChanged;
    private ThemeSyncMode themeSyncMode;
    private bool isSyncScheduled;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    public static ThemeManager Current { get; public set; }
    public ReadOnlyObservableCollection`1<LibraryThemeProvider> LibraryThemeProviders { get; }
    public ReadOnlyObservableCollection`1<Theme> Themes { get; }
    public ReadOnlyObservableCollection`1<string> BaseColors { get; }
    public ReadOnlyObservableCollection`1<string> ColorSchemes { get; }
    public ThemeSyncMode ThemeSyncMode { get; public set; }
    private static ThemeManager();
    [CompilerGeneratedAttribute]
public static ThemeManager get_Current();
    [CompilerGeneratedAttribute]
public static void set_Current(ThemeManager value);
    [CompilerGeneratedAttribute]
public ReadOnlyObservableCollection`1<LibraryThemeProvider> get_LibraryThemeProviders();
    public ReadOnlyObservableCollection`1<Theme> get_Themes();
    public ReadOnlyObservableCollection`1<string> get_BaseColors();
    public ReadOnlyObservableCollection`1<string> get_ColorSchemes();
    private void EnsureThemes();
    public void RegisterLibraryThemeProvider(LibraryThemeProvider libraryThemeProvider);
    private void ThemesInternalCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    public void ClearThemes();
    public Theme AddLibraryTheme(LibraryTheme libraryTheme);
    public Theme AddTheme(Theme theme);
    public Theme GetTheme(string name, bool highContrast);
    public Theme GetTheme(string baseColorScheme, string colorScheme, bool highContrast);
    public Theme GetTheme(ResourceDictionary resourceDictionary);
    public Theme GetInverseTheme(Theme theme);
    public bool IsThemeDictionary(ResourceDictionary resourceDictionary);
    public bool IsRuntimeGeneratedThemeDictionary(ResourceDictionary resourceDictionary);
    [SecurityCriticalAttribute]
public Theme ChangeTheme(Application app, string themeName, bool highContrast);
    [SecurityCriticalAttribute]
public Theme ChangeTheme(FrameworkElement frameworkElement, string themeName, bool highContrast);
    [SecurityCriticalAttribute]
public Theme ChangeTheme(Application app, Theme newTheme);
    [SecurityCriticalAttribute]
public Theme ChangeTheme(FrameworkElement frameworkElement, Theme newTheme);
    [SecurityCriticalAttribute]
public Theme ChangeTheme(object target, ResourceDictionary resourceDictionary, Theme newTheme);
    [SecurityCriticalAttribute]
private Theme ChangeTheme(object target, ResourceDictionary resourceDictionary, Theme oldTheme, Theme newTheme);
    [SecurityCriticalAttribute]
public Theme ChangeTheme(Application app, string baseColorScheme, string colorScheme);
    [SecurityCriticalAttribute]
public Theme ChangeTheme(FrameworkElement frameworkElement, string baseColorScheme, string colorScheme);
    [SecurityCriticalAttribute]
public Theme ChangeTheme(object target, ResourceDictionary resourceDictionary, Theme oldTheme, string baseColorScheme, string colorScheme);
    [SecurityCriticalAttribute]
public Theme ChangeThemeBaseColor(Application app, string baseColorScheme);
    [SecurityCriticalAttribute]
public Theme ChangeThemeBaseColor(FrameworkElement frameworkElement, string baseColorScheme);
    [NullableContextAttribute("2")]
[SecurityCriticalAttribute]
public Theme ChangeThemeBaseColor(object target, ResourceDictionary resourceDictionary, Theme oldTheme, string baseColorScheme);
    [SecurityCriticalAttribute]
public Theme ChangeThemeColorScheme(Application app, string colorScheme);
    [SecurityCriticalAttribute]
public Theme ChangeThemeColorScheme(FrameworkElement frameworkElement, string colorScheme);
    [NullableContextAttribute("2")]
[SecurityCriticalAttribute]
public Theme ChangeThemeColorScheme(object target, ResourceDictionary resourceDictionary, Theme oldTheme, string colorScheme);
    [SecurityCriticalAttribute]
public void ApplyThemeResourcesFromTheme(ResourceDictionary resourceDictionary, Theme newTheme);
    [SecurityCriticalAttribute]
private void ApplyResourceDictionary(ResourceDictionary oldRd, ResourceDictionary newRd);
    private void ApplyResourceDictionaryEntries(ResourceDictionary oldRd, ResourceDictionary newRd);
    [NullableContextAttribute("2")]
public Theme DetectTheme();
    public Theme DetectTheme(Application app);
    public Theme DetectTheme(FrameworkElement frameworkElement);
    public Theme DetectTheme(ResourceDictionary resourceDictionary);
    private bool DetectThemeFromResources(ResourceDictionary dict, Theme& detectedTheme);
    [CompilerGeneratedAttribute]
public void add_ThemeChanged(EventHandler`1<ThemeChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_ThemeChanged(EventHandler`1<ThemeChangedEventArgs> value);
    [SecurityCriticalAttribute]
private void OnThemeChanged(object target, ResourceDictionary targetResourceDictionary, Theme oldTheme, Theme newTheme);
    public void SyncTheme();
    public void SyncTheme(Nullable`1<ThemeSyncMode> syncMode);
    public ThemeSyncMode get_ThemeSyncMode();
    public void set_ThemeSyncMode(ThemeSyncMode value);
    private void HandleUserPreferenceChanged(object sender, UserPreferenceChangedEventArgs e);
    private void HandleStaticPropertyChanged(object sender, PropertyChangedEventArgs e);
    private static bool TryConvertColorFromString(string colorScheme, Color& color);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    [NullableContextAttribute("2")]
protected virtual void OnPropertyChanged(string propertyName);
    [CompilerGeneratedAttribute]
private void <HandleUserPreferenceChanged>b__72_0();
    [CompilerGeneratedAttribute]
private void <HandleStaticPropertyChanged>b__73_0();
}
[FlagsAttribute]
public enum ControlzEx.Theming.ThemeSyncMode : Enum {
    public int value__;
    public static ThemeSyncMode DoNotSync;
    public static ThemeSyncMode SyncWithAppMode;
    public static ThemeSyncMode SyncWithAccent;
    public static ThemeSyncMode SyncWithHighContrast;
    public static ThemeSyncMode SyncAll;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ControlzEx.Theming.WindowBackdropManager : DependencyObject {
    public static DependencyProperty BackdropTypeProperty;
    private static DependencyPropertyKey CurrentBackdropTypePropertyKey;
    public static DependencyProperty CurrentBackdropTypeProperty;
    private static WindowBackdropManager();
    public static void SetBackdropType(Window element, WindowBackdropType value);
    [AttachedPropertyBrowsableForTypeAttribute("System.Windows.Window")]
public static WindowBackdropType GetBackdropType(Window element);
    private static void OnBackdropTypeChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void SetCurrentBackdropType(Window element, WindowBackdropType value);
    [AttachedPropertyBrowsableForTypeAttribute("System.Windows.Window")]
public static WindowBackdropType GetCurrentBackdropType(Window element);
    public static bool UpdateBackdrop(Window target);
    public static bool UpdateBackdrop(Window target, WindowBackdropType windowBackdropType);
    public static bool UpdateBackdrop(IntPtr handle, WindowBackdropType windowBackdropType);
}
public enum ControlzEx.Theming.WindowBackdropType : Enum {
    public int value__;
    public static WindowBackdropType None;
    public static WindowBackdropType Auto;
    public static WindowBackdropType Mica;
    public static WindowBackdropType Acrylic;
    public static WindowBackdropType Tabbed;
}
public static class ControlzEx.Theming.WindowsThemeHelper : object {
    private static Color baseGrayColor;
    private static WindowsThemeHelper();
    public static bool IsHighContrastEnabled();
    public static bool AppsUseLightTheme();
    public static bool ShowAccentColorOnTitleBarsAndWindowBorders();
    [NullableContextAttribute("1")]
public static string GetWindowsBaseColor();
    public static Nullable`1<Color> GetWindowsAccentColor();
    public static Nullable`1<Color> GetWindowsAccentColorFromAccentPalette();
    public static Nullable`1<Color> GetWindowsColorizationColor();
    public static Nullable`1<Color> GetBlendedWindowsAccentColor();
    public static Nullable`1<Color> GetBlendedColor(Color color);
    public static Color GetBlendedColor(Color color, double colorBalance);
    public static Color GetBlendedColor(Color color, Color baseColor, double colorBalance);
    private static Color BlendColor(Color color1, Color color2, double color2Percentage);
    private static byte BlendColorChannel(double channel1, double channel2, double channel2Percentage);
}
public static class ControlzEx.Theming.XamlThemeHelper : object {
    [NullableContextAttribute("1")]
public static string FixXamlReaderXmlNsIssue(string xamlContent);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class ControlzEx.ToolTipAssist : object {
    public static DependencyProperty AutoMoveProperty;
    public static DependencyProperty AutoMoveHorizontalOffsetProperty;
    public static DependencyProperty AutoMoveVerticalOffsetProperty;
    private static ToolTipAssist();
    [AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.ToolTip")]
public static bool GetAutoMove(ToolTip element);
    [AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.ToolTip")]
public static void SetAutoMove(ToolTip element, bool value);
    [AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.ToolTip")]
public static double GetAutoMoveHorizontalOffset(ToolTip element);
    [AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.ToolTip")]
public static void SetAutoMoveHorizontalOffset(ToolTip element, double value);
    [AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.ToolTip")]
public static double GetAutoMoveVerticalOffset(ToolTip element);
    [AttachedPropertyBrowsableForTypeAttribute("System.Windows.Controls.ToolTip")]
public static void SetAutoMoveVerticalOffset(ToolTip element, double value);
    private static void OnAutoMoveChanged(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs eventArgs);
    private static void ToolTip_Opened(object sender, RoutedEventArgs e);
    private static void ToolTip_Closed(object sender, RoutedEventArgs e);
    private static void ToolTipTargetPreviewMouseMove(object sender, MouseEventArgs e);
    [NullableContextAttribute("2")]
private static void MoveToolTip(IInputElement target, ToolTip toolTip);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class ControlzEx.WindowChrome : object {
    public static DependencyProperty IsHitTestVisibleInChromeProperty;
    public static DependencyProperty ResizeGripDirectionProperty;
    private static WindowChrome();
    [CategoryAttribute("ControlzEx")]
public static bool GetIsHitTestVisibleInChrome(IInputElement inputElement);
    public static void SetIsHitTestVisibleInChrome(IInputElement inputElement, bool hitTestVisible);
    [CategoryAttribute("ControlzEx")]
public static ResizeGripDirection GetResizeGripDirection(IInputElement inputElement);
    public static void SetResizeGripDirection(IInputElement inputElement, ResizeGripDirection direction);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ControlzEx.WindowChromeWindow : Window {
    private static object defaultContentPadding;
    private static object emptyContentPadding;
    public static DependencyProperty ResizeBorderThicknessProperty;
    public static DependencyProperty GlowDepthProperty;
    public static DependencyProperty UseRadialGradientForCornersProperty;
    public static DependencyProperty IsGlowTransitionEnabledProperty;
    public static DependencyProperty IgnoreTaskbarOnMaximizeProperty;
    public static DependencyProperty KeepBorderOnMaximizeProperty;
    public static DependencyProperty ShowMinButtonProperty;
    public static DependencyProperty ShowMaxRestoreButtonProperty;
    public static DependencyProperty GlowColorProperty;
    public static DependencyProperty NonActiveGlowColorProperty;
    public static DependencyProperty CaptionColorProperty;
    public static DependencyProperty UseNativeCaptionButtonsProperty;
    public static DependencyProperty GlassFrameThicknessProperty;
    public static DependencyProperty NCPaddingProperty;
    public static DependencyProperty CaptionButtonsSizeProperty;
    public static DependencyProperty IsNCActiveProperty;
    public static DependencyProperty NCActiveBrushProperty;
    public static DependencyProperty NCNonActiveBrushProperty;
    public static DependencyPropertyKey NCCurrentBrushPropertyKey;
    public static DependencyProperty NCCurrentBrushProperty;
    public static DependencyProperty PreferDWMBorderColorProperty;
    public static DependencyProperty DWMSupportsBorderColorProperty;
    public static DependencyProperty CornerPreferenceProperty;
    public static DependencyProperty MitigateWhiteFlashDuringShowProperty;
    private bool handleERASEBKGND;
    [NullableAttribute("2")]
private HwndSource hwndSource;
    private bool isHandlingERASEBKGND;
    private HWND windowHandle;
    public Thickness ResizeBorderThickness { get; public set; }
    public int GlowDepth { get; public set; }
    public bool UseRadialGradientForCorners { get; public set; }
    public bool IsGlowTransitionEnabled { get; public set; }
    public bool IgnoreTaskbarOnMaximize { get; public set; }
    public bool KeepBorderOnMaximize { get; public set; }
    public bool ShowMinButton { get; public set; }
    public bool ShowMaxRestoreButton { get; public set; }
    public Nullable`1<Color> GlowColor { get; public set; }
    public Nullable`1<Color> NonActiveGlowColor { get; public set; }
    public Nullable`1<Color> CaptionColor { get; public set; }
    public bool UseNativeCaptionButtons { get; public set; }
    public Thickness GlassFrameThickness { get; public set; }
    public Thickness NCPadding { get; public set; }
    public Size CaptionButtonsSize { get; public set; }
    public bool IsNCActive { get; private set; }
    [NullableAttribute("2")]
public Brush NCActiveBrush { get; public set; }
    [NullableAttribute("2")]
public Brush NCNonActiveBrush { get; public set; }
    [NullableAttribute("2")]
public Brush NCCurrentBrush { get; private set; }
    public bool PreferDWMBorderColor { get; public set; }
    public bool DWMSupportsBorderColor { get; private set; }
    public WindowCornerPreference CornerPreference { get; public set; }
    public bool MitigateWhiteFlashDuringShow { get; public set; }
    private static WindowChromeWindow();
    protected virtual void OnSourceInitialized(EventArgs e);
    protected virtual void InitializeBehaviors();
    protected virtual void InitializeWindowChromeBehavior();
    protected virtual void InitializeGlowWindowBehavior();
    protected virtual void OnThemeManagerThemeChanged(object sender, ThemeChangedEventArgs e);
    public Thickness get_ResizeBorderThickness();
    public void set_ResizeBorderThickness(Thickness value);
    public int get_GlowDepth();
    public void set_GlowDepth(int value);
    public bool get_UseRadialGradientForCorners();
    public void set_UseRadialGradientForCorners(bool value);
    public bool get_IsGlowTransitionEnabled();
    public void set_IsGlowTransitionEnabled(bool value);
    public bool get_IgnoreTaskbarOnMaximize();
    public void set_IgnoreTaskbarOnMaximize(bool value);
    public bool get_KeepBorderOnMaximize();
    public void set_KeepBorderOnMaximize(bool value);
    public bool get_ShowMinButton();
    public void set_ShowMinButton(bool value);
    public bool get_ShowMaxRestoreButton();
    public void set_ShowMaxRestoreButton(bool value);
    private static void OnGlowColorChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public Nullable`1<Color> get_GlowColor();
    public void set_GlowColor(Nullable`1<Color> value);
    private static void OnNonActiveGlowColorChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public Nullable`1<Color> get_NonActiveGlowColor();
    public void set_NonActiveGlowColor(Nullable`1<Color> value);
    public Nullable`1<Color> get_CaptionColor();
    public void set_CaptionColor(Nullable`1<Color> value);
    private static void OnCaptionColorChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private void UpdateCaptionColor();
    private static void OnUseNativeCaptionButtonsChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public bool get_UseNativeCaptionButtons();
    public void set_UseNativeCaptionButtons(bool value);
    public Thickness get_GlassFrameThickness();
    public void set_GlassFrameThickness(Thickness value);
    public Thickness get_NCPadding();
    public void set_NCPadding(Thickness value);
    public Size get_CaptionButtonsSize();
    public void set_CaptionButtonsSize(Size value);
    public bool get_IsNCActive();
    private void set_IsNCActive(bool value);
    private static void OnPropertyChangedThatAffectsNCCurrentBrush(DependencyObject d, DependencyPropertyChangedEventArgs e);
    [NullableContextAttribute("2")]
public Brush get_NCActiveBrush();
    [NullableContextAttribute("2")]
public void set_NCActiveBrush(Brush value);
    [NullableContextAttribute("2")]
public Brush get_NCNonActiveBrush();
    [NullableContextAttribute("2")]
public void set_NCNonActiveBrush(Brush value);
    [NullableContextAttribute("2")]
public Brush get_NCCurrentBrush();
    [NullableContextAttribute("2")]
private void set_NCCurrentBrush(Brush value);
    public bool get_PreferDWMBorderColor();
    public void set_PreferDWMBorderColor(bool value);
    public bool get_DWMSupportsBorderColor();
    private void set_DWMSupportsBorderColor(bool value);
    public WindowCornerPreference get_CornerPreference();
    public void set_CornerPreference(WindowCornerPreference value);
    protected virtual void OnActivated(EventArgs e);
    protected virtual void OnDeactivated(EventArgs e);
    protected virtual void OnStateChanged(EventArgs e);
    protected virtual void UpdatePadding();
    public bool get_MitigateWhiteFlashDuringShow();
    public void set_MitigateWhiteFlashDuringShow(bool value);
    private void InitializeMessageHandling();
    protected virtual void OnClosed(EventArgs e);
    private IntPtr WindowProc(IntPtr hwnd, int msg, IntPtr wparam, IntPtr lparam, Boolean& handled);
    private IntPtr WindowProc(IntPtr hwnd, int msg, UIntPtr wParam, IntPtr lParam, Boolean& handled);
    [SecurityCriticalAttribute]
private IntPtr HandleERASEBKGND(WM uMsg, UIntPtr wParam, IntPtr lParam, Boolean& handled);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.AllowNullAttribute : Attribute {
}
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.DisallowNullAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ParameterValue>k__BackingField;
    public bool ParameterValue { get; }
    public DoesNotReturnIfAttribute(bool parameterValue);
    [CompilerGeneratedAttribute]
public bool get_ParameterValue();
}
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.MaybeNullAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public MaybeNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[AttributeUsageAttribute("192")]
internal class System.Diagnostics.CodeAnalysis.MemberNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private String[] <Members>k__BackingField;
    public String[] Members { get; }
    public MemberNotNullAttribute(string member);
    public MemberNotNullAttribute(String[] members);
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[AttributeUsageAttribute("192")]
internal class System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Members>k__BackingField;
    public bool ReturnValue { get; }
    public String[] Members { get; }
    public MemberNotNullWhenAttribute(bool returnValue, string member);
    public MemberNotNullWhenAttribute(bool returnValue, String[] members);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.NotNullAttribute : Attribute {
}
[AttributeUsageAttribute("10368")]
internal class System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    public string ParameterName { get; }
    public NotNullIfNotNullAttribute(string parameterName);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.NotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public NotNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NativeIntegerAttribute : Attribute {
    public Boolean[] TransformFlags;
    public NativeIntegerAttribute(Boolean[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
internal class Windows.Win32.COLORREF : ValueType {
    public UInt32 dwColor;
    public COLORREF(UInt32 dwColor);
    public COLORREF(Color color);
    public Color GetMediaColor();
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.2.63-beta+89e7e0c43f")]
internal class Windows.Win32.DeleteDCSafeHandle : SafeHandle {
    private static IntPtr INVALID_HANDLE_VALUE;
    public bool IsInvalid { get; }
    internal DeleteDCSafeHandle(IntPtr preexistingHandle, bool ownsHandle);
    private static DeleteDCSafeHandle();
    public virtual bool get_IsInvalid();
    protected virtual bool ReleaseHandle();
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.2.63-beta+89e7e0c43f")]
internal class Windows.Win32.DeleteObjectSafeHandle : SafeHandle {
    private static IntPtr INVALID_HANDLE_VALUE;
    public bool IsInvalid { get; }
    internal DeleteObjectSafeHandle(IntPtr preexistingHandle, bool ownsHandle);
    private static DeleteObjectSafeHandle();
    public virtual bool get_IsInvalid();
    protected virtual bool ReleaseHandle();
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.2.63-beta+89e7e0c43f")]
internal class Windows.Win32.DestroyMenuSafeHandle : SafeHandle {
    private static IntPtr INVALID_HANDLE_VALUE;
    public bool IsInvalid { get; }
    internal DestroyMenuSafeHandle(IntPtr preexistingHandle, bool ownsHandle);
    private static DestroyMenuSafeHandle();
    public virtual bool get_IsInvalid();
    protected virtual bool ReleaseHandle();
}
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{Value}")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.2.63-beta+89e7e0c43f")]
internal class Windows.Win32.Foundation.BOOL : ValueType {
    internal int Value;
    internal BOOL(int value);
    internal BOOL(bool value);
    public static int op_Implicit(BOOL value);
    public static BOOL op_Explicit(int value);
    public static bool op_Equality(BOOL left, BOOL right);
    public static bool op_Inequality(BOOL left, BOOL right);
    public sealed virtual bool Equals(BOOL other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Implicit(BOOL value);
    public static BOOL op_Implicit(bool value);
}
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{Value}")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.2.63-beta+89e7e0c43f")]
internal class Windows.Win32.Foundation.COLORREF : ValueType {
    internal UInt32 Value;
    internal COLORREF(UInt32 value);
    public static UInt32 op_Implicit(COLORREF value);
    public static COLORREF op_Explicit(UInt32 value);
    public static bool op_Equality(COLORREF left, COLORREF right);
    public static bool op_Inequality(COLORREF left, COLORREF right);
    public sealed virtual bool Equals(COLORREF other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{Value}")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.2.63-beta+89e7e0c43f")]
internal class Windows.Win32.Foundation.HANDLE : ValueType {
    internal IntPtr Value;
    internal static HANDLE Null { get; }
    internal bool IsNull { get; }
    internal HANDLE(IntPtr value);
    internal static HANDLE get_Null();
    internal bool get_IsNull();
    public static IntPtr op_Implicit(HANDLE value);
    public static HANDLE op_Explicit(IntPtr value);
    public static bool op_Equality(HANDLE left, HANDLE right);
    public static bool op_Inequality(HANDLE left, HANDLE right);
    public sealed virtual bool Equals(HANDLE other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{Value}")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.2.63-beta+89e7e0c43f")]
internal class Windows.Win32.Foundation.HINSTANCE : ValueType {
    internal IntPtr Value;
    internal static HINSTANCE Null { get; }
    internal bool IsNull { get; }
    internal HINSTANCE(IntPtr value);
    internal static HINSTANCE get_Null();
    internal bool get_IsNull();
    public static IntPtr op_Implicit(HINSTANCE value);
    public static HINSTANCE op_Explicit(IntPtr value);
    public static bool op_Equality(HINSTANCE left, HINSTANCE right);
    public static bool op_Inequality(HINSTANCE left, HINSTANCE right);
    public sealed virtual bool Equals(HINSTANCE other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{Value}")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.2.63-beta+89e7e0c43f")]
internal class Windows.Win32.Foundation.HRESULT : ValueType {
    internal int Value;
    [DebuggerBrowsableAttribute("0")]
internal bool Succeeded { get; }
    [DebuggerBrowsableAttribute("0")]
internal bool Failed { get; }
    internal HRESULT(int value);
    public static int op_Implicit(HRESULT value);
    public static HRESULT op_Explicit(int value);
    public static bool op_Equality(HRESULT left, HRESULT right);
    public static bool op_Inequality(HRESULT left, HRESULT right);
    public sealed virtual bool Equals(HRESULT other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static UInt32 op_Implicit(HRESULT value);
    public static HRESULT op_Explicit(UInt32 value);
    internal bool get_Succeeded();
    internal bool get_Failed();
    internal HRESULT ThrowOnFailure(IntPtr errorInfo);
    public virtual string ToString();
    internal string ToString(string format, IFormatProvider formatProvider);
}
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{Value}")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.2.63-beta+89e7e0c43f")]
internal class Windows.Win32.Foundation.HWND : ValueType {
    internal IntPtr Value;
    internal static HWND HWND_MESSAGE;
    internal static HWND HWND_DESKTOP;
    internal static HWND HWND_TOP;
    internal static HWND HWND_BOTTOM;
    internal static HWND HWND_TOPMOST;
    internal static HWND HWND_NOTOPMOST;
    internal static HWND Null { get; }
    internal bool IsNull { get; }
    internal HWND(IntPtr value);
    private static HWND();
    internal static HWND get_Null();
    internal bool get_IsNull();
    public static IntPtr op_Implicit(HWND value);
    public static HWND op_Explicit(IntPtr value);
    public static bool op_Equality(HWND left, HWND right);
    public static bool op_Inequality(HWND left, HWND right);
    public sealed virtual bool Equals(HWND other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{Value}")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.2.63-beta+89e7e0c43f")]
internal class Windows.Win32.Foundation.LPARAM : ValueType {
    [NativeIntegerAttribute]
internal IntPtr Value;
    internal LPARAM(IntPtr value);
    public static IntPtr op_Implicit(LPARAM value);
    public static LPARAM op_Implicit(IntPtr value);
    public static bool op_Equality(LPARAM left, LPARAM right);
    public static bool op_Inequality(LPARAM left, LPARAM right);
    public sealed virtual bool Equals(LPARAM other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{Value}")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.2.63-beta+89e7e0c43f")]
internal class Windows.Win32.Foundation.LRESULT : ValueType {
    [NativeIntegerAttribute]
internal IntPtr Value;
    internal LRESULT(IntPtr value);
    public static IntPtr op_Implicit(LRESULT value);
    public static LRESULT op_Explicit(IntPtr value);
    public static bool op_Equality(LRESULT left, LRESULT right);
    public static bool op_Inequality(LRESULT left, LRESULT right);
    public sealed virtual bool Equals(LRESULT other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{DebuggerDisplay}")]
internal class Windows.Win32.Foundation.PCWSTR : ValueType {
    internal Char* Value;
    internal int Length { get; }
    private string DebuggerDisplay { get; }
    internal PCWSTR(Char* value);
    public static Char* op_Explicit(PCWSTR value);
    public static PCWSTR op_Implicit(Char* value);
    public static PCWSTR op_Implicit(PWSTR value);
    public sealed virtual bool Equals(PCWSTR other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    internal int get_Length();
    public virtual string ToString();
    private string get_DebuggerDisplay();
}
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{Value}")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.2.63-beta+89e7e0c43f")]
internal class Windows.Win32.Foundation.PWSTR : ValueType {
    internal Char* Value;
    internal int Length { get; }
    internal PWSTR(Char* value);
    public static Char* op_Implicit(PWSTR value);
    public static PWSTR op_Implicit(Char* value);
    public static bool op_Equality(PWSTR left, PWSTR right);
    public static bool op_Inequality(PWSTR left, PWSTR right);
    public sealed virtual bool Equals(PWSTR other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    internal int get_Length();
    public virtual string ToString();
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.2.63-beta+89e7e0c43f")]
internal class Windows.Win32.Foundation.RECT : ValueType {
    internal int left;
    internal int top;
    internal int right;
    internal int bottom;
    internal int Width { get; }
    internal int Height { get; }
    internal bool IsEmpty { get; }
    internal int X { get; }
    internal int Y { get; }
    internal Size Size { get; }
    internal RECT(Rectangle value);
    internal RECT(Point location, Size size);
    internal RECT(int left, int top, int right, int bottom);
    internal static RECT FromXYWH(int x, int y, int width, int height);
    [IsReadOnlyAttribute]
internal int get_Width();
    [IsReadOnlyAttribute]
internal int get_Height();
    [IsReadOnlyAttribute]
internal bool get_IsEmpty();
    [IsReadOnlyAttribute]
internal int get_X();
    [IsReadOnlyAttribute]
internal int get_Y();
    [IsReadOnlyAttribute]
internal Size get_Size();
    public static Rectangle op_Implicit(RECT value);
    public static RectangleF op_Implicit(RECT value);
    public static RECT op_Implicit(Rectangle value);
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.2.63-beta+89e7e0c43f")]
internal class Windows.Win32.Foundation.SIZE : ValueType {
    internal int cx;
    internal int cy;
    internal int Width { get; }
    internal int Height { get; }
    internal bool IsEmpty { get; }
    internal SIZE(Size value);
    internal SIZE(int width, int height);
    [IsReadOnlyAttribute]
internal int get_Width();
    [IsReadOnlyAttribute]
internal int get_Height();
    [IsReadOnlyAttribute]
internal bool get_IsEmpty();
    public static Size op_Implicit(SIZE value);
    public static SIZE op_Implicit(Size value);
}
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{Value}")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.2.63-beta+89e7e0c43f")]
internal class Windows.Win32.Foundation.WPARAM : ValueType {
    [NativeIntegerAttribute]
internal UIntPtr Value;
    internal WPARAM(UIntPtr value);
    public static UIntPtr op_Implicit(WPARAM value);
    public static WPARAM op_Implicit(UIntPtr value);
    public static bool op_Equality(WPARAM left, WPARAM right);
    public static bool op_Inequality(WPARAM left, WPARAM right);
    public sealed virtual bool Equals(WPARAM other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.2.63-beta+89e7e0c43f")]
internal class Windows.Win32.FreeLibrarySafeHandle : SafeHandle {
    private static IntPtr INVALID_HANDLE_VALUE;
    public bool IsInvalid { get; }
    internal FreeLibrarySafeHandle(IntPtr preexistingHandle, bool ownsHandle);
    private static FreeLibrarySafeHandle();
    public virtual bool get_IsInvalid();
    protected virtual bool ReleaseHandle();
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.2.63-beta+89e7e0c43f")]
internal enum Windows.Win32.Graphics.Dwm.DWM_WINDOW_CORNER_PREFERENCE : Enum {
    public int value__;
    public static DWM_WINDOW_CORNER_PREFERENCE DWMWCP_DEFAULT;
    public static DWM_WINDOW_CORNER_PREFERENCE DWMWCP_DONOTROUND;
    public static DWM_WINDOW_CORNER_PREFERENCE DWMWCP_ROUND;
    public static DWM_WINDOW_CORNER_PREFERENCE DWMWCP_ROUNDSMALL;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.2.63-beta+89e7e0c43f")]
internal enum Windows.Win32.Graphics.Dwm.DWMWINDOWATTRIBUTE : Enum {
    public int value__;
    public static DWMWINDOWATTRIBUTE DWMWA_NCRENDERING_ENABLED;
    public static DWMWINDOWATTRIBUTE DWMWA_NCRENDERING_POLICY;
    public static DWMWINDOWATTRIBUTE DWMWA_TRANSITIONS_FORCEDISABLED;
    public static DWMWINDOWATTRIBUTE DWMWA_ALLOW_NCPAINT;
    public static DWMWINDOWATTRIBUTE DWMWA_CAPTION_BUTTON_BOUNDS;
    public static DWMWINDOWATTRIBUTE DWMWA_NONCLIENT_RTL_LAYOUT;
    public static DWMWINDOWATTRIBUTE DWMWA_FORCE_ICONIC_REPRESENTATION;
    public static DWMWINDOWATTRIBUTE DWMWA_FLIP3D_POLICY;
    public static DWMWINDOWATTRIBUTE DWMWA_EXTENDED_FRAME_BOUNDS;
    public static DWMWINDOWATTRIBUTE DWMWA_HAS_ICONIC_BITMAP;
    public static DWMWINDOWATTRIBUTE DWMWA_DISALLOW_PEEK;
    public static DWMWINDOWATTRIBUTE DWMWA_EXCLUDED_FROM_PEEK;
    public static DWMWINDOWATTRIBUTE DWMWA_CLOAK;
    public static DWMWINDOWATTRIBUTE DWMWA_CLOAKED;
    public static DWMWINDOWATTRIBUTE DWMWA_FREEZE_REPRESENTATION;
    public static DWMWINDOWATTRIBUTE DWMWA_PASSIVE_UPDATE_MODE;
    public static DWMWINDOWATTRIBUTE DWMWA_USE_HOSTBACKDROPBRUSH;
    public static DWMWINDOWATTRIBUTE DWMWA_USE_IMMERSIVE_DARK_MODE;
    public static DWMWINDOWATTRIBUTE DWMWA_WINDOW_CORNER_PREFERENCE;
    public static DWMWINDOWATTRIBUTE DWMWA_BORDER_COLOR;
    public static DWMWINDOWATTRIBUTE DWMWA_CAPTION_COLOR;
    public static DWMWINDOWATTRIBUTE DWMWA_TEXT_COLOR;
    public static DWMWINDOWATTRIBUTE DWMWA_VISIBLE_FRAME_BORDER_THICKNESS;
    public static DWMWINDOWATTRIBUTE DWMWA_LAST;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.2.63-beta+89e7e0c43f")]
internal enum Windows.Win32.Graphics.Gdi.BI_COMPRESSION : Enum {
    public int value__;
    public static BI_COMPRESSION BI_RGB;
    public static BI_COMPRESSION BI_RLE8;
    public static BI_COMPRESSION BI_RLE4;
    public static BI_COMPRESSION BI_BITFIELDS;
    public static BI_COMPRESSION BI_JPEG;
    public static BI_COMPRESSION BI_PNG;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.2.63-beta+89e7e0c43f")]
internal class Windows.Win32.Graphics.Gdi.BITMAPINFO : ValueType {
    internal BITMAPINFOHEADER bmiHeader;
    internal __winmdroot_Graphics_Gdi_RGBQUAD_1 bmiColors;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.2.63-beta+89e7e0c43f")]
internal class Windows.Win32.Graphics.Gdi.BITMAPINFOHEADER : ValueType {
    internal UInt32 biSize;
    internal int biWidth;
    internal int biHeight;
    internal ushort biPlanes;
    internal ushort biBitCount;
    internal BI_COMPRESSION biCompression;
    internal UInt32 biSizeImage;
    internal int biXPelsPerMeter;
    internal int biYPelsPerMeter;
    internal UInt32 biClrUsed;
    internal UInt32 biClrImportant;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.2.63-beta+89e7e0c43f")]
internal class Windows.Win32.Graphics.Gdi.BLENDFUNCTION : ValueType {
    internal byte BlendOp;
    internal byte BlendFlags;
    internal byte SourceConstantAlpha;
    internal byte AlphaFormat;
}
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{Value}")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.2.63-beta+89e7e0c43f")]
internal class Windows.Win32.Graphics.Gdi.CreatedHDC : ValueType {
    internal IntPtr Value;
    internal static CreatedHDC Null { get; }
    internal bool IsNull { get; }
    internal CreatedHDC(IntPtr value);
    internal static CreatedHDC get_Null();
    internal bool get_IsNull();
    public static IntPtr op_Implicit(CreatedHDC value);
    public static CreatedHDC op_Explicit(IntPtr value);
    public static bool op_Equality(CreatedHDC left, CreatedHDC right);
    public static bool op_Inequality(CreatedHDC left, CreatedHDC right);
    public sealed virtual bool Equals(CreatedHDC other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.2.63-beta+89e7e0c43f")]
internal enum Windows.Win32.Graphics.Gdi.DIB_USAGE : Enum {
    public UInt32 value__;
    public static DIB_USAGE DIB_RGB_COLORS;
    public static DIB_USAGE DIB_PAL_COLORS;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.2.63-beta+89e7e0c43f")]
internal enum Windows.Win32.Graphics.Gdi.GET_DEVICE_CAPS_INDEX : Enum {
    public UInt32 value__;
    public static GET_DEVICE_CAPS_INDEX DRIVERVERSION;
    public static GET_DEVICE_CAPS_INDEX TECHNOLOGY;
    public static GET_DEVICE_CAPS_INDEX HORZSIZE;
    public static GET_DEVICE_CAPS_INDEX VERTSIZE;
    public static GET_DEVICE_CAPS_INDEX HORZRES;
    public static GET_DEVICE_CAPS_INDEX VERTRES;
    public static GET_DEVICE_CAPS_INDEX BITSPIXEL;
    public static GET_DEVICE_CAPS_INDEX PLANES;
    public static GET_DEVICE_CAPS_INDEX NUMBRUSHES;
    public static GET_DEVICE_CAPS_INDEX NUMPENS;
    public static GET_DEVICE_CAPS_INDEX NUMMARKERS;
    public static GET_DEVICE_CAPS_INDEX NUMFONTS;
    public static GET_DEVICE_CAPS_INDEX NUMCOLORS;
    public static GET_DEVICE_CAPS_INDEX PDEVICESIZE;
    public static GET_DEVICE_CAPS_INDEX CURVECAPS;
    public static GET_DEVICE_CAPS_INDEX LINECAPS;
    public static GET_DEVICE_CAPS_INDEX POLYGONALCAPS;
    public static GET_DEVICE_CAPS_INDEX TEXTCAPS;
    public static GET_DEVICE_CAPS_INDEX CLIPCAPS;
    public static GET_DEVICE_CAPS_INDEX RASTERCAPS;
    public static GET_DEVICE_CAPS_INDEX ASPECTX;
    public static GET_DEVICE_CAPS_INDEX ASPECTY;
    public static GET_DEVICE_CAPS_INDEX ASPECTXY;
    public static GET_DEVICE_CAPS_INDEX LOGPIXELSX;
    public static GET_DEVICE_CAPS_INDEX LOGPIXELSY;
    public static GET_DEVICE_CAPS_INDEX SIZEPALETTE;
    public static GET_DEVICE_CAPS_INDEX NUMRESERVED;
    public static GET_DEVICE_CAPS_INDEX COLORRES;
    public static GET_DEVICE_CAPS_INDEX PHYSICALWIDTH;
    public static GET_DEVICE_CAPS_INDEX PHYSICALHEIGHT;
    public static GET_DEVICE_CAPS_INDEX PHYSICALOFFSETX;
    public static GET_DEVICE_CAPS_INDEX PHYSICALOFFSETY;
    public static GET_DEVICE_CAPS_INDEX SCALINGFACTORX;
    public static GET_DEVICE_CAPS_INDEX SCALINGFACTORY;
    public static GET_DEVICE_CAPS_INDEX VREFRESH;
    public static GET_DEVICE_CAPS_INDEX DESKTOPVERTRES;
    public static GET_DEVICE_CAPS_INDEX DESKTOPHORZRES;
    public static GET_DEVICE_CAPS_INDEX BLTALIGNMENT;
    public static GET_DEVICE_CAPS_INDEX SHADEBLENDCAPS;
    public static GET_DEVICE_CAPS_INDEX COLORMGMTCAPS;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.2.63-beta+89e7e0c43f")]
internal enum Windows.Win32.Graphics.Gdi.GET_STOCK_OBJECT_FLAGS : Enum {
    public UInt32 value__;
    public static GET_STOCK_OBJECT_FLAGS BLACK_BRUSH;
    public static GET_STOCK_OBJECT_FLAGS DKGRAY_BRUSH;
    public static GET_STOCK_OBJECT_FLAGS DC_BRUSH;
    public static GET_STOCK_OBJECT_FLAGS GRAY_BRUSH;
    public static GET_STOCK_OBJECT_FLAGS HOLLOW_BRUSH;
    public static GET_STOCK_OBJECT_FLAGS LTGRAY_BRUSH;
    public static GET_STOCK_OBJECT_FLAGS NULL_BRUSH;
    public static GET_STOCK_OBJECT_FLAGS WHITE_BRUSH;
    public static GET_STOCK_OBJECT_FLAGS BLACK_PEN;
    public static GET_STOCK_OBJECT_FLAGS DC_PEN;
    public static GET_STOCK_OBJECT_FLAGS NULL_PEN;
    public static GET_STOCK_OBJECT_FLAGS WHITE_PEN;
    public static GET_STOCK_OBJECT_FLAGS ANSI_FIXED_FONT;
    public static GET_STOCK_OBJECT_FLAGS ANSI_VAR_FONT;
    public static GET_STOCK_OBJECT_FLAGS DEVICE_DEFAULT_FONT;
    public static GET_STOCK_OBJECT_FLAGS DEFAULT_GUI_FONT;
    public static GET_STOCK_OBJECT_FLAGS OEM_FIXED_FONT;
    public static GET_STOCK_OBJECT_FLAGS SYSTEM_FONT;
    public static GET_STOCK_OBJECT_FLAGS SYSTEM_FIXED_FONT;
    public static GET_STOCK_OBJECT_FLAGS DEFAULT_PALETTE;
}
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{Value}")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.2.63-beta+89e7e0c43f")]
internal class Windows.Win32.Graphics.Gdi.HBITMAP : ValueType {
    internal IntPtr Value;
    internal static HBITMAP Null { get; }
    internal bool IsNull { get; }
    internal HBITMAP(IntPtr value);
    internal static HBITMAP get_Null();
    internal bool get_IsNull();
    public static IntPtr op_Implicit(HBITMAP value);
    public static HBITMAP op_Explicit(IntPtr value);
    public static bool op_Equality(HBITMAP left, HBITMAP right);
    public static bool op_Inequality(HBITMAP left, HBITMAP right);
    public sealed virtual bool Equals(HBITMAP other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{Value}")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.2.63-beta+89e7e0c43f")]
internal class Windows.Win32.Graphics.Gdi.HBRUSH : ValueType {
    internal IntPtr Value;
    internal static HBRUSH Null { get; }
    internal bool IsNull { get; }
    internal HBRUSH(IntPtr value);
    internal static HBRUSH get_Null();
    internal bool get_IsNull();
    public static IntPtr op_Implicit(HBRUSH value);
    public static HBRUSH op_Explicit(IntPtr value);
    public static bool op_Equality(HBRUSH left, HBRUSH right);
    public static bool op_Inequality(HBRUSH left, HBRUSH right);
    public sealed virtual bool Equals(HBRUSH other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{Value}")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.2.63-beta+89e7e0c43f")]
internal class Windows.Win32.Graphics.Gdi.HDC : ValueType {
    internal IntPtr Value;
    internal static HDC Null { get; }
    internal bool IsNull { get; }
    internal HDC(IntPtr value);
    internal static HDC get_Null();
    internal bool get_IsNull();
    public static IntPtr op_Implicit(HDC value);
    public static HDC op_Explicit(IntPtr value);
    public static bool op_Equality(HDC left, HDC right);
    public static bool op_Inequality(HDC left, HDC right);
    public sealed virtual bool Equals(HDC other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{Value}")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.2.63-beta+89e7e0c43f")]
internal class Windows.Win32.Graphics.Gdi.HGDIOBJ : ValueType {
    internal IntPtr Value;
    internal static HGDIOBJ Null { get; }
    internal bool IsNull { get; }
    internal HGDIOBJ(IntPtr value);
    internal static HGDIOBJ get_Null();
    internal bool get_IsNull();
    public static IntPtr op_Implicit(HGDIOBJ value);
    public static HGDIOBJ op_Explicit(IntPtr value);
    public static bool op_Equality(HGDIOBJ left, HGDIOBJ right);
    public static bool op_Inequality(HGDIOBJ left, HGDIOBJ right);
    public sealed virtual bool Equals(HGDIOBJ other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{Value}")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.2.63-beta+89e7e0c43f")]
internal class Windows.Win32.Graphics.Gdi.HMONITOR : ValueType {
    [NativeIntegerAttribute]
internal IntPtr Value;
    internal HMONITOR(IntPtr value);
    public static IntPtr op_Implicit(HMONITOR value);
    public static HMONITOR op_Explicit(IntPtr value);
    public static bool op_Equality(HMONITOR left, HMONITOR right);
    public static bool op_Inequality(HMONITOR left, HMONITOR right);
    public sealed virtual bool Equals(HMONITOR other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{Value}")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.2.63-beta+89e7e0c43f")]
internal class Windows.Win32.Graphics.Gdi.HRGN : ValueType {
    internal IntPtr Value;
    internal static HRGN Null { get; }
    internal bool IsNull { get; }
    internal HRGN(IntPtr value);
    internal static HRGN get_Null();
    internal bool get_IsNull();
    public static IntPtr op_Implicit(HRGN value);
    public static HRGN op_Explicit(IntPtr value);
    public static bool op_Equality(HRGN left, HRGN right);
    public static bool op_Inequality(HRGN left, HRGN right);
    public sealed virtual bool Equals(HRGN other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.2.63-beta+89e7e0c43f")]
internal enum Windows.Win32.Graphics.Gdi.MONITOR_FROM_FLAGS : Enum {
    public UInt32 value__;
    public static MONITOR_FROM_FLAGS MONITOR_DEFAULTTONEAREST;
    public static MONITOR_FROM_FLAGS MONITOR_DEFAULTTONULL;
    public static MONITOR_FROM_FLAGS MONITOR_DEFAULTTOPRIMARY;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.2.63-beta+89e7e0c43f")]
internal class Windows.Win32.Graphics.Gdi.MONITORINFO : ValueType {
    internal UInt32 cbSize;
    internal RECT rcMonitor;
    internal RECT rcWork;
    internal UInt32 dwFlags;
}
[FlagsAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.2.63-beta+89e7e0c43f")]
internal enum Windows.Win32.Graphics.Gdi.REDRAW_WINDOW_FLAGS : Enum {
    public UInt32 value__;
    public static REDRAW_WINDOW_FLAGS RDW_INVALIDATE;
    public static REDRAW_WINDOW_FLAGS RDW_INTERNALPAINT;
    public static REDRAW_WINDOW_FLAGS RDW_ERASE;
    public static REDRAW_WINDOW_FLAGS RDW_VALIDATE;
    public static REDRAW_WINDOW_FLAGS RDW_NOINTERNALPAINT;
    public static REDRAW_WINDOW_FLAGS RDW_NOERASE;
    public static REDRAW_WINDOW_FLAGS RDW_NOCHILDREN;
    public static REDRAW_WINDOW_FLAGS RDW_ALLCHILDREN;
    public static REDRAW_WINDOW_FLAGS RDW_UPDATENOW;
    public static REDRAW_WINDOW_FLAGS RDW_ERASENOW;
    public static REDRAW_WINDOW_FLAGS RDW_FRAME;
    public static REDRAW_WINDOW_FLAGS RDW_NOFRAME;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.2.63-beta+89e7e0c43f")]
internal class Windows.Win32.Graphics.Gdi.RGBQUAD : ValueType {
    internal byte rgbBlue;
    internal byte rgbGreen;
    internal byte rgbRed;
    internal byte rgbReserved;
}
[ExtensionAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.2.63-beta+89e7e0c43f")]
internal static class Windows.Win32.InlineArrayIndexerExtensions : object {
    [ExtensionAttribute]
internal static RGBQUAD& modreq(System.Runtime.InteropServices.InAttribute) ReadOnlyItemRef(__winmdroot_Graphics_Gdi_RGBQUAD_1& this, int index);
    [ExtensionAttribute]
internal static RGBQUAD& ItemRef(__winmdroot_Graphics_Gdi_RGBQUAD_1& this, int index);
}
[ExtensionAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.2.63-beta+89e7e0c43f")]
internal static class Windows.Win32.PInvoke : object {
    [NativeIntegerAttribute]
private static UIntPtr PressedMouseButtons { get; }
    public static bool GetMappedClientRect(HWND hwnd, RECT& rectResult);
    [DefaultDllImportSearchPathsAttribute("2048")]
private static int MapWindowPoints(HWND hWndFrom, HWND hWndTo, RECT* lpPoints, UInt32 cPoints);
    [NullableContextAttribute("1")]
public static void SelectObject(SafeHandle hdc, SafeHandle handle);
    public static void SendMessage(IntPtr hWnd, WM msg, UIntPtr wParam, IntPtr lParam);
    public static BOOL PostMessage(IntPtr hWnd, WM msg, UIntPtr wParam, IntPtr lParam);
    public static MONITORINFO GetMonitorInfo(IntPtr monitor);
    public static UInt32 SHAppBarMessage(int dwMessage, APPBARDATA& pData);
    public static int RtlGetVersion(RTL_OSVERSIONINFOEX& lpVersionInformation);
    [DefaultDllImportSearchPathsAttribute("2048")]
public static HBITMAP CreateDIBSection(HDC hdc, BITMAPINFO* pbmi, DIB_USAGE usage, IntPtr& ppvBits, HANDLE hSection, UInt32 offset);
    public static RECT GetWindowRect(HWND hWnd);
    public static Point GetCursorPos();
    public static IntPtr GetTaskBarHandleForMonitor(HMONITOR monitor);
    public static void RaiseNonClientMouseMessageAsClient(IntPtr hWnd, WM msg, UIntPtr wParam, IntPtr lParam);
    public static void RaiseMouseMessage(IntPtr hWnd, WM msg, UIntPtr wParam, IntPtr lParam, bool send);
    private static UIntPtr get_PressedMouseButtons();
    public static bool IsKeyPressed(int vKey);
    [ExtensionAttribute]
public static int ToInt32Unchecked(IntPtr value);
    public static IntPtr MakeParam(int lowWord, int highWord);
    public static IntPtr MakeParam(Point pt);
    public static int GetXLParam(int lParam);
    public static int GetYLParam(int lParam);
    public static int HiWord(int value);
    public static int HiWord(long value);
    public static int HiWord(IntPtr value);
    public static int LoWord(int value);
    public static int LoWord(long value);
    public static int LoWord(IntPtr value);
    public static WINDOW_STYLE GetWindowStyle(HWND hWnd);
    public static WINDOW_EX_STYLE GetWindowStyleEx(HWND hWnd);
    public static WINDOW_STYLE SetWindowStyle(HWND hWnd, WINDOW_STYLE dwNewLong);
    public static WINDOW_EX_STYLE SetWindowStyleEx(HWND hWnd, WINDOW_EX_STYLE dwNewLong);
    private static IntPtr GetWindowLongPtr32(IntPtr hWnd, WINDOW_LONG_PTR_INDEX nIndex);
    private static IntPtr GetWindowLongPtr64(IntPtr hWnd, WINDOW_LONG_PTR_INDEX nIndex);
    public static IntPtr GetWindowLongPtr(IntPtr hwnd, WINDOW_LONG_PTR_INDEX nIndex);
    private static int SetWindowLongPtr32(IntPtr hWnd, WINDOW_LONG_PTR_INDEX nIndex, int dwNewLong);
    private static IntPtr SetWindowLongPtr64(IntPtr hWnd, WINDOW_LONG_PTR_INDEX nIndex, IntPtr dwNewLong);
    public static IntPtr SetWindowLongPtr(IntPtr hwnd, WINDOW_LONG_PTR_INDEX nIndex, IntPtr dwNewLong);
    public static WINDOWPLACEMENT GetWindowPlacement(HWND hWnd);
    public static int SetPreferredAppMode(PreferredAppMode preferredAppMode);
    public static void FlushMenuThemes();
    [DefaultDllImportSearchPathsAttribute("2048")]
internal static BOOL DwmDefWindowProc(HWND hWnd, UInt32 msg, WPARAM wParam, LPARAM lParam, LRESULT* plResult);
    [DefaultDllImportSearchPathsAttribute("2048")]
internal static HRESULT DwmExtendFrameIntoClientArea(HWND hWnd, MARGINS* pMarInset);
    [DefaultDllImportSearchPathsAttribute("2048")]
internal static HRESULT DwmGetWindowAttribute(HWND hwnd, DWMWINDOWATTRIBUTE dwAttribute, Void* pvAttribute, UInt32 cbAttribute);
    [DefaultDllImportSearchPathsAttribute("2048")]
internal static HRESULT DwmSetWindowAttribute(HWND hwnd, DWMWINDOWATTRIBUTE dwAttribute, Void* pvAttribute, UInt32 cbAttribute);
    [DefaultDllImportSearchPathsAttribute("2048")]
internal static BOOL DeleteDC(CreatedHDC hdc);
    internal static DeleteDCSafeHandle CreateCompatibleDC(SafeHandle hdc);
    [DefaultDllImportSearchPathsAttribute("2048")]
internal static CreatedHDC CreateCompatibleDC(HDC hdc);
    [DefaultDllImportSearchPathsAttribute("2048")]
internal static BOOL DeleteObject(HGDIOBJ ho);
    internal static DeleteObjectSafeHandle CreateDIBSection(SafeHandle hdc, BITMAPINFO* pbmi, DIB_USAGE usage, Void** ppvBits, SafeHandle hSection, UInt32 offset);
    [DefaultDllImportSearchPathsAttribute("2048")]
internal static HBITMAP CreateDIBSection(HDC hdc, BITMAPINFO* pbmi, DIB_USAGE usage, Void** ppvBits, HANDLE hSection, UInt32 offset);
    internal static int GetDeviceCaps(SafeHandle hdc, GET_DEVICE_CAPS_INDEX index);
    [DefaultDllImportSearchPathsAttribute("2048")]
internal static int GetDeviceCaps(HDC hdc, GET_DEVICE_CAPS_INDEX index);
    internal static HGDIOBJ SelectObject(SafeHandle hdc, HGDIOBJ h);
    [DefaultDllImportSearchPathsAttribute("2048")]
internal static HGDIOBJ SelectObject(HDC hdc, HGDIOBJ h);
    [DefaultDllImportSearchPathsAttribute("2048")]
internal static HGDIOBJ GetStockObject(GET_STOCK_OBJECT_FLAGS i);
    [DefaultDllImportSearchPathsAttribute("2048")]
internal static BOOL CloseHandle(HANDLE hObject);
    [DefaultDllImportSearchPathsAttribute("2048")]
internal static BOOL FreeLibrary(HINSTANCE hLibModule);
    internal static FreeLibrarySafeHandle GetModuleHandle(string lpModuleName);
    [DefaultDllImportSearchPathsAttribute("2048")]
internal static HINSTANCE GetModuleHandle(PCWSTR lpModuleName);
    internal static BOOL AlphaBlend(SafeHandle hdcDest, int xoriginDest, int yoriginDest, int wDest, int hDest, SafeHandle hdcSrc, int xoriginSrc, int yoriginSrc, int wSrc, int hSrc, BLENDFUNCTION ftn);
    [DefaultDllImportSearchPathsAttribute("2048")]
internal static BOOL AlphaBlend(HDC hdcDest, int xoriginDest, int yoriginDest, int wDest, int hDest, HDC hdcSrc, int xoriginSrc, int yoriginSrc, int wSrc, int hSrc, BLENDFUNCTION ftn);
    [DefaultDllImportSearchPathsAttribute("2048")]
internal static int ReleaseDC(HWND hWnd, HDC hDC);
    [DefaultDllImportSearchPathsAttribute("2048")]
internal static BOOL AdjustWindowRect(RECT* lpRect, WINDOW_STYLE dwStyle, BOOL bMenu);
    [DefaultDllImportSearchPathsAttribute("2048")]
internal static IntPtr BeginDeferWindowPos(int nNumWindows);
    [DefaultDllImportSearchPathsAttribute("2048")]
internal static BOOL DestroyMenu(HMENU hMenu);
    internal static HWND CreateWindowEx(WINDOW_EX_STYLE dwExStyle, string lpClassName, string lpWindowName, WINDOW_STYLE dwStyle, int X, int Y, int nWidth, int nHeight, HWND hWndParent, SafeHandle hMenu, SafeHandle hInstance, Void* lpParam);
    [DefaultDllImportSearchPathsAttribute("2048")]
internal static HWND CreateWindowEx(WINDOW_EX_STYLE dwExStyle, PCWSTR lpClassName, PCWSTR lpWindowName, WINDOW_STYLE dwStyle, int X, int Y, int nWidth, int nHeight, HWND hWndParent, HMENU hMenu, HINSTANCE hInstance, Void* lpParam);
    [DefaultDllImportSearchPathsAttribute("2048")]
internal static LRESULT DefWindowProc(HWND hWnd, UInt32 Msg, WPARAM wParam, LPARAM lParam);
    [DefaultDllImportSearchPathsAttribute("2048")]
internal static IntPtr DeferWindowPos(IntPtr hWinPosInfo, HWND hWnd, HWND hWndInsertAfter, int x, int y, int cx, int cy, SET_WINDOW_POS_FLAGS uFlags);
    [DefaultDllImportSearchPathsAttribute("2048")]
internal static BOOL DestroyWindow(HWND hWnd);
    internal static BOOL EnableMenuItem(SafeHandle hMenu, UInt32 uIDEnableItem, MENU_ITEM_FLAGS uEnable);
    [DefaultDllImportSearchPathsAttribute("2048")]
internal static BOOL EnableMenuItem(HMENU hMenu, UInt32 uIDEnableItem, MENU_ITEM_FLAGS uEnable);
    [DefaultDllImportSearchPathsAttribute("2048")]
internal static BOOL EndDeferWindowPos(IntPtr hWinPosInfo);
    internal static HWND FindWindow(string lpClassName, string lpWindowName);
    [DefaultDllImportSearchPathsAttribute("2048")]
internal static HWND FindWindow(PCWSTR lpClassName, PCWSTR lpWindowName);
    [DefaultDllImportSearchPathsAttribute("2048")]
internal static BOOL GetClientRect(HWND hWnd, RECT* lpRect);
    [DefaultDllImportSearchPathsAttribute("2048")]
internal static BOOL GetCursorPos(Point* lpPoint);
    [DefaultDllImportSearchPathsAttribute("2048")]
internal static HDC GetDC(HWND hWnd);
    [DefaultDllImportSearchPathsAttribute("2048")]
internal static short GetKeyState(int nVirtKey);
    [DefaultDllImportSearchPathsAttribute("2048")]
internal static BOOL GetMonitorInfo(HMONITOR hMonitor, MONITORINFO* lpmi);
    internal static DestroyMenuSafeHandle GetSystemMenu_SafeHandle(HWND hWnd, BOOL bRevert);
    [DefaultDllImportSearchPathsAttribute("2048")]
internal static HMENU GetSystemMenu(HWND hWnd, BOOL bRevert);
    [DefaultDllImportSearchPathsAttribute("2048")]
internal static int GetSystemMetrics(SYSTEM_METRICS_INDEX nIndex);
    [DefaultDllImportSearchPathsAttribute("2048")]
internal static BOOL GetWindowPlacement(HWND hWnd, WINDOWPLACEMENT* lpwndpl);
    [DefaultDllImportSearchPathsAttribute("2048")]
internal static BOOL GetWindowRect(HWND hWnd, RECT* lpRect);
    [DefaultDllImportSearchPathsAttribute("2048")]
internal static BOOL IntersectRect(RECT* lprcDst, RECT* lprcSrc1, RECT* lprcSrc2);
    [DefaultDllImportSearchPathsAttribute("2048")]
internal static BOOL IsIconic(HWND hWnd);
    [DefaultDllImportSearchPathsAttribute("2048")]
internal static BOOL IsWindow(HWND hWnd);
    [DefaultDllImportSearchPathsAttribute("2048")]
internal static BOOL IsWindowVisible(HWND hWnd);
    [DefaultDllImportSearchPathsAttribute("2048")]
internal static BOOL IsZoomed(HWND hWnd);
    [DefaultDllImportSearchPathsAttribute("2048")]
internal static HMONITOR MonitorFromPoint(Point pt, MONITOR_FROM_FLAGS dwFlags);
    [DefaultDllImportSearchPathsAttribute("2048")]
internal static HMONITOR MonitorFromRect(RECT* lprc, MONITOR_FROM_FLAGS dwFlags);
    [DefaultDllImportSearchPathsAttribute("2048")]
internal static HMONITOR MonitorFromWindow(HWND hwnd, MONITOR_FROM_FLAGS dwFlags);
    [DefaultDllImportSearchPathsAttribute("2048")]
internal static BOOL PostMessage(HWND hWnd, UInt32 Msg, WPARAM wParam, LPARAM lParam);
    internal static BOOL RedrawWindow(HWND hWnd, RECT* lprcUpdate, SafeHandle hrgnUpdate, REDRAW_WINDOW_FLAGS flags);
    [DefaultDllImportSearchPathsAttribute("2048")]
internal static BOOL RedrawWindow(HWND hWnd, RECT* lprcUpdate, HRGN hrgnUpdate, REDRAW_WINDOW_FLAGS flags);
    [DefaultDllImportSearchPathsAttribute("2048")]
internal static BOOL DestroyIcon(HICON hIcon);
    [DefaultDllImportSearchPathsAttribute("2048")]
internal static BOOL DestroyCursor(HCURSOR hCursor);
    [DefaultDllImportSearchPathsAttribute("2048")]
internal static ushort RegisterClassEx(WNDCLASSEXW& param0);
    [DefaultDllImportSearchPathsAttribute("2048")]
internal static BOOL ScreenToClient(HWND hWnd, Point* lpPoint);
    [DefaultDllImportSearchPathsAttribute("2048")]
internal static LRESULT SendMessage(HWND hWnd, UInt32 Msg, WPARAM wParam, LPARAM lParam);
    [DefaultDllImportSearchPathsAttribute("2048")]
internal static HWND SetFocus(HWND hWnd);
    [DefaultDllImportSearchPathsAttribute("2048")]
internal static BOOL SetWindowPos(HWND hWnd, HWND hWndInsertAfter, int X, int Y, int cx, int cy, SET_WINDOW_POS_FLAGS uFlags);
    [DefaultDllImportSearchPathsAttribute("2048")]
internal static BOOL TrackMouseEvent(TRACKMOUSEEVENT* lpEventTrack);
    internal static BOOL TrackPopupMenuEx(SafeHandle hMenu, UInt32 uFlags, int x, int y, HWND hwnd, TPMPARAMS* lptpm);
    [DefaultDllImportSearchPathsAttribute("2048")]
internal static BOOL TrackPopupMenuEx(HMENU hMenu, UInt32 uFlags, int x, int y, HWND hwnd, TPMPARAMS* lptpm);
    internal static BOOL UnregisterClass(string lpClassName, SafeHandle hInstance);
    [DefaultDllImportSearchPathsAttribute("2048")]
internal static BOOL UnregisterClass(PCWSTR lpClassName, HINSTANCE hInstance);
    internal static BOOL UpdateLayeredWindow(HWND hWnd, SafeHandle hdcDst, Point* pptDst, SIZE* psize, SafeHandle hdcSrc, Point* pptSrc, COLORREF crKey, BLENDFUNCTION* pblend, UPDATE_LAYERED_WINDOW_FLAGS dwFlags);
    [DefaultDllImportSearchPathsAttribute("2048")]
internal static BOOL UpdateLayeredWindow(HWND hWnd, HDC hdcDst, Point* pptDst, SIZE* psize, HDC hdcSrc, Point* pptSrc, COLORREF crKey, BLENDFUNCTION* pblend, UPDATE_LAYERED_WINDOW_FLAGS dwFlags);
    internal static int FillRect(SafeHandle hDC, RECT* lprc, SafeHandle hbr);
    [DefaultDllImportSearchPathsAttribute("2048")]
internal static int FillRect(HDC hDC, RECT* lprc, HBRUSH hbr);
}
[ExtensionAttribute]
internal static class Windows.Win32.PInvokeExtensions : object {
    [ExtensionAttribute]
public static bool IsEmpty(RECT rect);
    [ExtensionAttribute]
public static int GetWidth(RECT rect);
    [ExtensionAttribute]
public static int GetHeight(RECT rect);
    [ExtensionAttribute]
public static Point GetPosition(RECT rect);
    [ExtensionAttribute]
public static Size GetSize(RECT rect);
    [ExtensionAttribute]
public static RECT ToRECT(Rect rect);
    [ExtensionAttribute]
public static RECT ToRECT(WINDOWPOS windowpos);
}
internal enum Windows.Win32.SC : Enum {
    public UInt32 value__;
    public static SC SIZE;
    public static SC MOVE;
    public static SC MOUSEMOVE;
    public static SC MINIMIZE;
    public static SC MAXIMIZE;
    public static SC NEXTWINDOW;
    public static SC PREVWINDOW;
    public static SC CLOSE;
    public static SC VSCROLL;
    public static SC HSCROLL;
    public static SC MOUSEMENU;
    public static SC KEYMENU;
    public static SC ARRANGE;
    public static SC RESTORE;
    public static SC TASKLIST;
    public static SC SCREENSAVE;
    public static SC HOTKEY;
    public static SC DEFAULT;
    public static SC MONITORPOWER;
    public static SC CONTEXTHELP;
    public static SC SEPARATOR;
    public static SC F_ISSECURE;
    public static SC ICON;
    public static SC ZOOM;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.2.63-beta+89e7e0c43f")]
internal class Windows.Win32.UI.Controls.MARGINS : ValueType {
    internal int cxLeftWidth;
    internal int cxRightWidth;
    internal int cyTopHeight;
    internal int cyBottomHeight;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.2.63-beta+89e7e0c43f")]
internal class Windows.Win32.UI.Input.KeyboardAndMouse.TRACKMOUSEEVENT : ValueType {
    internal UInt32 cbSize;
    internal TRACKMOUSEEVENT_FLAGS dwFlags;
    internal HWND hwndTrack;
    internal UInt32 dwHoverTime;
}
[FlagsAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.2.63-beta+89e7e0c43f")]
internal enum Windows.Win32.UI.Input.KeyboardAndMouse.TRACKMOUSEEVENT_FLAGS : Enum {
    public UInt32 value__;
    public static TRACKMOUSEEVENT_FLAGS TME_CANCEL;
    public static TRACKMOUSEEVENT_FLAGS TME_HOVER;
    public static TRACKMOUSEEVENT_FLAGS TME_LEAVE;
    public static TRACKMOUSEEVENT_FLAGS TME_NONCLIENT;
    public static TRACKMOUSEEVENT_FLAGS TME_QUERY;
}
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{Value}")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.2.63-beta+89e7e0c43f")]
internal class Windows.Win32.UI.WindowsAndMessaging.HCURSOR : ValueType {
    internal IntPtr Value;
    internal static HCURSOR Null { get; }
    internal bool IsNull { get; }
    internal HCURSOR(IntPtr value);
    internal static HCURSOR get_Null();
    internal bool get_IsNull();
    public static IntPtr op_Implicit(HCURSOR value);
    public static HCURSOR op_Explicit(IntPtr value);
    public static bool op_Equality(HCURSOR left, HCURSOR right);
    public static bool op_Inequality(HCURSOR left, HCURSOR right);
    public sealed virtual bool Equals(HCURSOR other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{Value}")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.2.63-beta+89e7e0c43f")]
internal class Windows.Win32.UI.WindowsAndMessaging.HICON : ValueType {
    internal IntPtr Value;
    internal static HICON Null { get; }
    internal bool IsNull { get; }
    internal HICON(IntPtr value);
    internal static HICON get_Null();
    internal bool get_IsNull();
    public static IntPtr op_Implicit(HICON value);
    public static HICON op_Explicit(IntPtr value);
    public static bool op_Equality(HICON left, HICON right);
    public static bool op_Inequality(HICON left, HICON right);
    public sealed virtual bool Equals(HICON other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{Value}")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.2.63-beta+89e7e0c43f")]
internal class Windows.Win32.UI.WindowsAndMessaging.HMENU : ValueType {
    internal IntPtr Value;
    internal static HMENU Null { get; }
    internal bool IsNull { get; }
    internal HMENU(IntPtr value);
    internal static HMENU get_Null();
    internal bool get_IsNull();
    public static IntPtr op_Implicit(HMENU value);
    public static HMENU op_Explicit(IntPtr value);
    public static bool op_Equality(HMENU left, HMENU right);
    public static bool op_Inequality(HMENU left, HMENU right);
    public sealed virtual bool Equals(HMENU other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[FlagsAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.2.63-beta+89e7e0c43f")]
internal enum Windows.Win32.UI.WindowsAndMessaging.MENU_ITEM_FLAGS : Enum {
    public UInt32 value__;
    public static MENU_ITEM_FLAGS MF_BYCOMMAND;
    public static MENU_ITEM_FLAGS MF_BYPOSITION;
    public static MENU_ITEM_FLAGS MF_BITMAP;
    public static MENU_ITEM_FLAGS MF_CHECKED;
    public static MENU_ITEM_FLAGS MF_DISABLED;
    public static MENU_ITEM_FLAGS MF_ENABLED;
    public static MENU_ITEM_FLAGS MF_GRAYED;
    public static MENU_ITEM_FLAGS MF_MENUBARBREAK;
    public static MENU_ITEM_FLAGS MF_MENUBREAK;
    public static MENU_ITEM_FLAGS MF_OWNERDRAW;
    public static MENU_ITEM_FLAGS MF_POPUP;
    public static MENU_ITEM_FLAGS MF_SEPARATOR;
    public static MENU_ITEM_FLAGS MF_STRING;
    public static MENU_ITEM_FLAGS MF_UNCHECKED;
    public static MENU_ITEM_FLAGS MF_INSERT;
    public static MENU_ITEM_FLAGS MF_CHANGE;
    public static MENU_ITEM_FLAGS MF_APPEND;
    public static MENU_ITEM_FLAGS MF_DELETE;
    public static MENU_ITEM_FLAGS MF_REMOVE;
    public static MENU_ITEM_FLAGS MF_USECHECKBITMAPS;
    public static MENU_ITEM_FLAGS MF_UNHILITE;
    public static MENU_ITEM_FLAGS MF_HILITE;
    public static MENU_ITEM_FLAGS MF_DEFAULT;
    public static MENU_ITEM_FLAGS MF_SYSMENU;
    public static MENU_ITEM_FLAGS MF_HELP;
    public static MENU_ITEM_FLAGS MF_RIGHTJUSTIFY;
    public static MENU_ITEM_FLAGS MF_MOUSESELECT;
    public static MENU_ITEM_FLAGS MF_END;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.2.63-beta+89e7e0c43f")]
internal class Windows.Win32.UI.WindowsAndMessaging.MINMAXINFO : ValueType {
    internal Point ptReserved;
    internal Point ptMaxSize;
    internal Point ptMaxPosition;
    internal Point ptMinTrackSize;
    internal Point ptMaxTrackSize;
}
[FlagsAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.2.63-beta+89e7e0c43f")]
internal enum Windows.Win32.UI.WindowsAndMessaging.SET_WINDOW_POS_FLAGS : Enum {
    public UInt32 value__;
    public static SET_WINDOW_POS_FLAGS SWP_ASYNCWINDOWPOS;
    public static SET_WINDOW_POS_FLAGS SWP_DEFERERASE;
    public static SET_WINDOW_POS_FLAGS SWP_DRAWFRAME;
    public static SET_WINDOW_POS_FLAGS SWP_FRAMECHANGED;
    public static SET_WINDOW_POS_FLAGS SWP_HIDEWINDOW;
    public static SET_WINDOW_POS_FLAGS SWP_NOACTIVATE;
    public static SET_WINDOW_POS_FLAGS SWP_NOCOPYBITS;
    public static SET_WINDOW_POS_FLAGS SWP_NOMOVE;
    public static SET_WINDOW_POS_FLAGS SWP_NOOWNERZORDER;
    public static SET_WINDOW_POS_FLAGS SWP_NOREDRAW;
    public static SET_WINDOW_POS_FLAGS SWP_NOREPOSITION;
    public static SET_WINDOW_POS_FLAGS SWP_NOSENDCHANGING;
    public static SET_WINDOW_POS_FLAGS SWP_NOSIZE;
    public static SET_WINDOW_POS_FLAGS SWP_NOZORDER;
    public static SET_WINDOW_POS_FLAGS SWP_SHOWWINDOW;
}
[FlagsAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.2.63-beta+89e7e0c43f")]
internal enum Windows.Win32.UI.WindowsAndMessaging.SHOW_WINDOW_CMD : Enum {
    public UInt32 value__;
    public static SHOW_WINDOW_CMD SW_FORCEMINIMIZE;
    public static SHOW_WINDOW_CMD SW_HIDE;
    public static SHOW_WINDOW_CMD SW_MAXIMIZE;
    public static SHOW_WINDOW_CMD SW_MINIMIZE;
    public static SHOW_WINDOW_CMD SW_RESTORE;
    public static SHOW_WINDOW_CMD SW_SHOW;
    public static SHOW_WINDOW_CMD SW_SHOWDEFAULT;
    public static SHOW_WINDOW_CMD SW_SHOWMAXIMIZED;
    public static SHOW_WINDOW_CMD SW_SHOWMINIMIZED;
    public static SHOW_WINDOW_CMD SW_SHOWMINNOACTIVE;
    public static SHOW_WINDOW_CMD SW_SHOWNA;
    public static SHOW_WINDOW_CMD SW_SHOWNOACTIVATE;
    public static SHOW_WINDOW_CMD SW_SHOWNORMAL;
    public static SHOW_WINDOW_CMD SW_NORMAL;
    public static SHOW_WINDOW_CMD SW_MAX;
    public static SHOW_WINDOW_CMD SW_PARENTCLOSING;
    public static SHOW_WINDOW_CMD SW_OTHERZOOM;
    public static SHOW_WINDOW_CMD SW_PARENTOPENING;
    public static SHOW_WINDOW_CMD SW_OTHERUNZOOM;
    public static SHOW_WINDOW_CMD SW_SCROLLCHILDREN;
    public static SHOW_WINDOW_CMD SW_INVALIDATE;
    public static SHOW_WINDOW_CMD SW_ERASE;
    public static SHOW_WINDOW_CMD SW_SMOOTHSCROLL;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.2.63-beta+89e7e0c43f")]
internal class Windows.Win32.UI.WindowsAndMessaging.STYLESTRUCT : ValueType {
    internal UInt32 styleOld;
    internal UInt32 styleNew;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.2.63-beta+89e7e0c43f")]
internal enum Windows.Win32.UI.WindowsAndMessaging.SYSTEM_METRICS_INDEX : Enum {
    public UInt32 value__;
    public static SYSTEM_METRICS_INDEX SM_ARRANGE;
    public static SYSTEM_METRICS_INDEX SM_CLEANBOOT;
    public static SYSTEM_METRICS_INDEX SM_CMONITORS;
    public static SYSTEM_METRICS_INDEX SM_CMOUSEBUTTONS;
    public static SYSTEM_METRICS_INDEX SM_CONVERTIBLESLATEMODE;
    public static SYSTEM_METRICS_INDEX SM_CXBORDER;
    public static SYSTEM_METRICS_INDEX SM_CXCURSOR;
    public static SYSTEM_METRICS_INDEX SM_CXDLGFRAME;
    public static SYSTEM_METRICS_INDEX SM_CXDOUBLECLK;
    public static SYSTEM_METRICS_INDEX SM_CXDRAG;
    public static SYSTEM_METRICS_INDEX SM_CXEDGE;
    public static SYSTEM_METRICS_INDEX SM_CXFIXEDFRAME;
    public static SYSTEM_METRICS_INDEX SM_CXFOCUSBORDER;
    public static SYSTEM_METRICS_INDEX SM_CXFRAME;
    public static SYSTEM_METRICS_INDEX SM_CXFULLSCREEN;
    public static SYSTEM_METRICS_INDEX SM_CXHSCROLL;
    public static SYSTEM_METRICS_INDEX SM_CXHTHUMB;
    public static SYSTEM_METRICS_INDEX SM_CXICON;
    public static SYSTEM_METRICS_INDEX SM_CXICONSPACING;
    public static SYSTEM_METRICS_INDEX SM_CXMAXIMIZED;
    public static SYSTEM_METRICS_INDEX SM_CXMAXTRACK;
    public static SYSTEM_METRICS_INDEX SM_CXMENUCHECK;
    public static SYSTEM_METRICS_INDEX SM_CXMENUSIZE;
    public static SYSTEM_METRICS_INDEX SM_CXMIN;
    public static SYSTEM_METRICS_INDEX SM_CXMINIMIZED;
    public static SYSTEM_METRICS_INDEX SM_CXMINSPACING;
    public static SYSTEM_METRICS_INDEX SM_CXMINTRACK;
    public static SYSTEM_METRICS_INDEX SM_CXPADDEDBORDER;
    public static SYSTEM_METRICS_INDEX SM_CXSCREEN;
    public static SYSTEM_METRICS_INDEX SM_CXSIZE;
    public static SYSTEM_METRICS_INDEX SM_CXSIZEFRAME;
    public static SYSTEM_METRICS_INDEX SM_CXSMICON;
    public static SYSTEM_METRICS_INDEX SM_CXSMSIZE;
    public static SYSTEM_METRICS_INDEX SM_CXVIRTUALSCREEN;
    public static SYSTEM_METRICS_INDEX SM_CXVSCROLL;
    public static SYSTEM_METRICS_INDEX SM_CYBORDER;
    public static SYSTEM_METRICS_INDEX SM_CYCAPTION;
    public static SYSTEM_METRICS_INDEX SM_CYCURSOR;
    public static SYSTEM_METRICS_INDEX SM_CYDLGFRAME;
    public static SYSTEM_METRICS_INDEX SM_CYDOUBLECLK;
    public static SYSTEM_METRICS_INDEX SM_CYDRAG;
    public static SYSTEM_METRICS_INDEX SM_CYEDGE;
    public static SYSTEM_METRICS_INDEX SM_CYFIXEDFRAME;
    public static SYSTEM_METRICS_INDEX SM_CYFOCUSBORDER;
    public static SYSTEM_METRICS_INDEX SM_CYFRAME;
    public static SYSTEM_METRICS_INDEX SM_CYFULLSCREEN;
    public static SYSTEM_METRICS_INDEX SM_CYHSCROLL;
    public static SYSTEM_METRICS_INDEX SM_CYICON;
    public static SYSTEM_METRICS_INDEX SM_CYICONSPACING;
    public static SYSTEM_METRICS_INDEX SM_CYKANJIWINDOW;
    public static SYSTEM_METRICS_INDEX SM_CYMAXIMIZED;
    public static SYSTEM_METRICS_INDEX SM_CYMAXTRACK;
    public static SYSTEM_METRICS_INDEX SM_CYMENU;
    public static SYSTEM_METRICS_INDEX SM_CYMENUCHECK;
    public static SYSTEM_METRICS_INDEX SM_CYMENUSIZE;
    public static SYSTEM_METRICS_INDEX SM_CYMIN;
    public static SYSTEM_METRICS_INDEX SM_CYMINIMIZED;
    public static SYSTEM_METRICS_INDEX SM_CYMINSPACING;
    public static SYSTEM_METRICS_INDEX SM_CYMINTRACK;
    public static SYSTEM_METRICS_INDEX SM_CYSCREEN;
    public static SYSTEM_METRICS_INDEX SM_CYSIZE;
    public static SYSTEM_METRICS_INDEX SM_CYSIZEFRAME;
    public static SYSTEM_METRICS_INDEX SM_CYSMCAPTION;
    public static SYSTEM_METRICS_INDEX SM_CYSMICON;
    public static SYSTEM_METRICS_INDEX SM_CYSMSIZE;
    public static SYSTEM_METRICS_INDEX SM_CYVIRTUALSCREEN;
    public static SYSTEM_METRICS_INDEX SM_CYVSCROLL;
    public static SYSTEM_METRICS_INDEX SM_CYVTHUMB;
    public static SYSTEM_METRICS_INDEX SM_DBCSENABLED;
    public static SYSTEM_METRICS_INDEX SM_DEBUG;
    public static SYSTEM_METRICS_INDEX SM_DIGITIZER;
    public static SYSTEM_METRICS_INDEX SM_IMMENABLED;
    public static SYSTEM_METRICS_INDEX SM_MAXIMUMTOUCHES;
    public static SYSTEM_METRICS_INDEX SM_MEDIACENTER;
    public static SYSTEM_METRICS_INDEX SM_MENUDROPALIGNMENT;
    public static SYSTEM_METRICS_INDEX SM_MIDEASTENABLED;
    public static SYSTEM_METRICS_INDEX SM_MOUSEPRESENT;
    public static SYSTEM_METRICS_INDEX SM_MOUSEHORIZONTALWHEELPRESENT;
    public static SYSTEM_METRICS_INDEX SM_MOUSEWHEELPRESENT;
    public static SYSTEM_METRICS_INDEX SM_NETWORK;
    public static SYSTEM_METRICS_INDEX SM_PENWINDOWS;
    public static SYSTEM_METRICS_INDEX SM_REMOTECONTROL;
    public static SYSTEM_METRICS_INDEX SM_REMOTESESSION;
    public static SYSTEM_METRICS_INDEX SM_SAMEDISPLAYFORMAT;
    public static SYSTEM_METRICS_INDEX SM_SECURE;
    public static SYSTEM_METRICS_INDEX SM_SERVERR2;
    public static SYSTEM_METRICS_INDEX SM_SHOWSOUNDS;
    public static SYSTEM_METRICS_INDEX SM_SHUTTINGDOWN;
    public static SYSTEM_METRICS_INDEX SM_SLOWMACHINE;
    public static SYSTEM_METRICS_INDEX SM_STARTER;
    public static SYSTEM_METRICS_INDEX SM_SWAPBUTTON;
    public static SYSTEM_METRICS_INDEX SM_SYSTEMDOCKED;
    public static SYSTEM_METRICS_INDEX SM_TABLETPC;
    public static SYSTEM_METRICS_INDEX SM_XVIRTUALSCREEN;
    public static SYSTEM_METRICS_INDEX SM_YVIRTUALSCREEN;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.2.63-beta+89e7e0c43f")]
internal class Windows.Win32.UI.WindowsAndMessaging.TPMPARAMS : ValueType {
    internal UInt32 cbSize;
    internal RECT rcExclude;
}
[FlagsAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.2.63-beta+89e7e0c43f")]
internal enum Windows.Win32.UI.WindowsAndMessaging.TRACK_POPUP_MENU_FLAGS : Enum {
    public UInt32 value__;
    public static TRACK_POPUP_MENU_FLAGS TPM_LEFTBUTTON;
    public static TRACK_POPUP_MENU_FLAGS TPM_RIGHTBUTTON;
    public static TRACK_POPUP_MENU_FLAGS TPM_LEFTALIGN;
    public static TRACK_POPUP_MENU_FLAGS TPM_CENTERALIGN;
    public static TRACK_POPUP_MENU_FLAGS TPM_RIGHTALIGN;
    public static TRACK_POPUP_MENU_FLAGS TPM_TOPALIGN;
    public static TRACK_POPUP_MENU_FLAGS TPM_VCENTERALIGN;
    public static TRACK_POPUP_MENU_FLAGS TPM_BOTTOMALIGN;
    public static TRACK_POPUP_MENU_FLAGS TPM_HORIZONTAL;
    public static TRACK_POPUP_MENU_FLAGS TPM_VERTICAL;
    public static TRACK_POPUP_MENU_FLAGS TPM_NONOTIFY;
    public static TRACK_POPUP_MENU_FLAGS TPM_RETURNCMD;
    public static TRACK_POPUP_MENU_FLAGS TPM_RECURSE;
    public static TRACK_POPUP_MENU_FLAGS TPM_HORPOSANIMATION;
    public static TRACK_POPUP_MENU_FLAGS TPM_HORNEGANIMATION;
    public static TRACK_POPUP_MENU_FLAGS TPM_VERPOSANIMATION;
    public static TRACK_POPUP_MENU_FLAGS TPM_VERNEGANIMATION;
    public static TRACK_POPUP_MENU_FLAGS TPM_NOANIMATION;
    public static TRACK_POPUP_MENU_FLAGS TPM_LAYOUTRTL;
    public static TRACK_POPUP_MENU_FLAGS TPM_WORKAREA;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.2.63-beta+89e7e0c43f")]
internal enum Windows.Win32.UI.WindowsAndMessaging.UPDATE_LAYERED_WINDOW_FLAGS : Enum {
    public UInt32 value__;
    public static UPDATE_LAYERED_WINDOW_FLAGS ULW_ALPHA;
    public static UPDATE_LAYERED_WINDOW_FLAGS ULW_COLORKEY;
    public static UPDATE_LAYERED_WINDOW_FLAGS ULW_OPAQUE;
    public static UPDATE_LAYERED_WINDOW_FLAGS ULW_EX_NORESIZE;
}
[FlagsAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.2.63-beta+89e7e0c43f")]
internal enum Windows.Win32.UI.WindowsAndMessaging.WINDOW_EX_STYLE : Enum {
    public UInt32 value__;
    public static WINDOW_EX_STYLE WS_EX_DLGMODALFRAME;
    public static WINDOW_EX_STYLE WS_EX_NOPARENTNOTIFY;
    public static WINDOW_EX_STYLE WS_EX_TOPMOST;
    public static WINDOW_EX_STYLE WS_EX_ACCEPTFILES;
    public static WINDOW_EX_STYLE WS_EX_TRANSPARENT;
    public static WINDOW_EX_STYLE WS_EX_MDICHILD;
    public static WINDOW_EX_STYLE WS_EX_TOOLWINDOW;
    public static WINDOW_EX_STYLE WS_EX_WINDOWEDGE;
    public static WINDOW_EX_STYLE WS_EX_CLIENTEDGE;
    public static WINDOW_EX_STYLE WS_EX_CONTEXTHELP;
    public static WINDOW_EX_STYLE WS_EX_RIGHT;
    public static WINDOW_EX_STYLE WS_EX_LEFT;
    public static WINDOW_EX_STYLE WS_EX_RTLREADING;
    public static WINDOW_EX_STYLE WS_EX_LTRREADING;
    public static WINDOW_EX_STYLE WS_EX_LEFTSCROLLBAR;
    public static WINDOW_EX_STYLE WS_EX_RIGHTSCROLLBAR;
    public static WINDOW_EX_STYLE WS_EX_CONTROLPARENT;
    public static WINDOW_EX_STYLE WS_EX_STATICEDGE;
    public static WINDOW_EX_STYLE WS_EX_APPWINDOW;
    public static WINDOW_EX_STYLE WS_EX_OVERLAPPEDWINDOW;
    public static WINDOW_EX_STYLE WS_EX_PALETTEWINDOW;
    public static WINDOW_EX_STYLE WS_EX_LAYERED;
    public static WINDOW_EX_STYLE WS_EX_NOINHERITLAYOUT;
    public static WINDOW_EX_STYLE WS_EX_NOREDIRECTIONBITMAP;
    public static WINDOW_EX_STYLE WS_EX_LAYOUTRTL;
    public static WINDOW_EX_STYLE WS_EX_COMPOSITED;
    public static WINDOW_EX_STYLE WS_EX_NOACTIVATE;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.2.63-beta+89e7e0c43f")]
internal enum Windows.Win32.UI.WindowsAndMessaging.WINDOW_LONG_PTR_INDEX : Enum {
    public int value__;
    public static WINDOW_LONG_PTR_INDEX GWL_EXSTYLE;
    public static WINDOW_LONG_PTR_INDEX GWLP_HINSTANCE;
    public static WINDOW_LONG_PTR_INDEX GWLP_HWNDPARENT;
    public static WINDOW_LONG_PTR_INDEX GWLP_ID;
    public static WINDOW_LONG_PTR_INDEX GWL_STYLE;
    public static WINDOW_LONG_PTR_INDEX GWLP_USERDATA;
    public static WINDOW_LONG_PTR_INDEX GWLP_WNDPROC;
    public static WINDOW_LONG_PTR_INDEX GWL_HINSTANCE;
    public static WINDOW_LONG_PTR_INDEX GWL_ID;
    public static WINDOW_LONG_PTR_INDEX GWL_USERDATA;
    public static WINDOW_LONG_PTR_INDEX GWL_WNDPROC;
    public static WINDOW_LONG_PTR_INDEX GWL_HWNDPARENT;
}
[FlagsAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.2.63-beta+89e7e0c43f")]
internal enum Windows.Win32.UI.WindowsAndMessaging.WINDOW_STYLE : Enum {
    public UInt32 value__;
    public static WINDOW_STYLE WS_OVERLAPPED;
    public static WINDOW_STYLE WS_POPUP;
    public static WINDOW_STYLE WS_CHILD;
    public static WINDOW_STYLE WS_MINIMIZE;
    public static WINDOW_STYLE WS_VISIBLE;
    public static WINDOW_STYLE WS_DISABLED;
    public static WINDOW_STYLE WS_CLIPSIBLINGS;
    public static WINDOW_STYLE WS_CLIPCHILDREN;
    public static WINDOW_STYLE WS_MAXIMIZE;
    public static WINDOW_STYLE WS_CAPTION;
    public static WINDOW_STYLE WS_BORDER;
    public static WINDOW_STYLE WS_DLGFRAME;
    public static WINDOW_STYLE WS_VSCROLL;
    public static WINDOW_STYLE WS_HSCROLL;
    public static WINDOW_STYLE WS_SYSMENU;
    public static WINDOW_STYLE WS_THICKFRAME;
    public static WINDOW_STYLE WS_GROUP;
    public static WINDOW_STYLE WS_TABSTOP;
    public static WINDOW_STYLE WS_MINIMIZEBOX;
    public static WINDOW_STYLE WS_MAXIMIZEBOX;
    public static WINDOW_STYLE WS_TILED;
    public static WINDOW_STYLE WS_ICONIC;
    public static WINDOW_STYLE WS_SIZEBOX;
    public static WINDOW_STYLE WS_TILEDWINDOW;
    public static WINDOW_STYLE WS_OVERLAPPEDWINDOW;
    public static WINDOW_STYLE WS_POPUPWINDOW;
    public static WINDOW_STYLE WS_CHILDWINDOW;
    public static WINDOW_STYLE WS_ACTIVECAPTION;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.2.63-beta+89e7e0c43f")]
internal class Windows.Win32.UI.WindowsAndMessaging.WINDOWPLACEMENT : ValueType {
    internal UInt32 length;
    internal WINDOWPLACEMENT_FLAGS flags;
    internal SHOW_WINDOW_CMD showCmd;
    internal Point ptMinPosition;
    internal Point ptMaxPosition;
    internal RECT rcNormalPosition;
}
[FlagsAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.2.63-beta+89e7e0c43f")]
internal enum Windows.Win32.UI.WindowsAndMessaging.WINDOWPLACEMENT_FLAGS : Enum {
    public UInt32 value__;
    public static WINDOWPLACEMENT_FLAGS WPF_ASYNCWINDOWPLACEMENT;
    public static WINDOWPLACEMENT_FLAGS WPF_RESTORETOMAXIMIZED;
    public static WINDOWPLACEMENT_FLAGS WPF_SETMINPOSITION;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.2.63-beta+89e7e0c43f")]
internal class Windows.Win32.UI.WindowsAndMessaging.WINDOWPOS : ValueType {
    internal HWND hwnd;
    internal HWND hwndInsertAfter;
    internal int x;
    internal int y;
    internal int cx;
    internal int cy;
    internal SET_WINDOW_POS_FLAGS flags;
}
[FlagsAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.2.63-beta+89e7e0c43f")]
internal enum Windows.Win32.UI.WindowsAndMessaging.WNDCLASS_STYLES : Enum {
    public UInt32 value__;
    public static WNDCLASS_STYLES CS_VREDRAW;
    public static WNDCLASS_STYLES CS_HREDRAW;
    public static WNDCLASS_STYLES CS_DBLCLKS;
    public static WNDCLASS_STYLES CS_OWNDC;
    public static WNDCLASS_STYLES CS_CLASSDC;
    public static WNDCLASS_STYLES CS_PARENTDC;
    public static WNDCLASS_STYLES CS_NOCLOSE;
    public static WNDCLASS_STYLES CS_SAVEBITS;
    public static WNDCLASS_STYLES CS_BYTEALIGNCLIENT;
    public static WNDCLASS_STYLES CS_BYTEALIGNWINDOW;
    public static WNDCLASS_STYLES CS_GLOBALCLASS;
    public static WNDCLASS_STYLES CS_IME;
    public static WNDCLASS_STYLES CS_DROPSHADOW;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.2.63-beta+89e7e0c43f")]
internal class Windows.Win32.UI.WindowsAndMessaging.WNDCLASSEXW : ValueType {
    internal UInt32 cbSize;
    internal WNDCLASS_STYLES style;
    internal WNDPROC lpfnWndProc;
    internal int cbClsExtra;
    internal int cbWndExtra;
    internal HINSTANCE hInstance;
    internal HICON hIcon;
    internal HCURSOR hCursor;
    internal HBRUSH hbrBackground;
    internal PCWSTR lpszMenuName;
    internal PCWSTR lpszClassName;
    internal HICON hIconSm;
}
[UnmanagedFunctionPointerAttribute("1")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.2.63-beta+89e7e0c43f")]
internal class Windows.Win32.UI.WindowsAndMessaging.WNDPROC : MulticastDelegate {
    public WNDPROC(object object, IntPtr method);
    public virtual LRESULT Invoke(HWND param0, UInt32 param1, WPARAM param2, LPARAM param3);
    public virtual IAsyncResult BeginInvoke(HWND param0, UInt32 param1, WPARAM param2, LPARAM param3, AsyncCallback callback, object object);
    public virtual LRESULT EndInvoke(IAsyncResult result);
}
internal enum Windows.Win32.WM : Enum {
    public UInt32 value__;
    public static WM NULL;
    public static WM CREATE;
    public static WM DESTROY;
    public static WM MOVE;
    public static WM SIZE;
    public static WM ACTIVATE;
    public static WM SETFOCUS;
    public static WM KILLFOCUS;
    public static WM ENABLE;
    public static WM SETREDRAW;
    public static WM SETTEXT;
    public static WM GETTEXT;
    public static WM GETTEXTLENGTH;
    public static WM PAINT;
    public static WM CLOSE;
    public static WM QUERYENDSESSION;
    public static WM QUIT;
    public static WM QUERYOPEN;
    public static WM ERASEBKGND;
    public static WM SYSCOLORCHANGE;
    public static WM SHOWWINDOW;
    public static WM CTLCOLOR;
    public static WM WININICHANGE;
    public static WM SETTINGCHANGE;
    public static WM ACTIVATEAPP;
    public static WM FONTCHANGE;
    public static WM TIMECHANGE;
    public static WM CANCELMODE;
    public static WM SETCURSOR;
    public static WM MOUSEACTIVATE;
    public static WM CHILDACTIVATE;
    public static WM QUEUESYNC;
    public static WM GETMINMAXINFO;
    public static WM WINDOWPOSCHANGING;
    public static WM WINDOWPOSCHANGED;
    public static WM CONTEXTMENU;
    public static WM STYLECHANGING;
    public static WM STYLECHANGED;
    public static WM DISPLAYCHANGE;
    public static WM GETICON;
    public static WM SETICON;
    public static WM NCCREATE;
    public static WM NCDESTROY;
    public static WM NCCALCSIZE;
    public static WM NCHITTEST;
    public static WM NCPAINT;
    public static WM NCACTIVATE;
    public static WM GETDLGCODE;
    public static WM SYNCPAINT;
    public static WM NCMOUSEMOVE;
    public static WM NCLBUTTONDOWN;
    public static WM NCLBUTTONUP;
    public static WM NCLBUTTONDBLCLK;
    public static WM NCRBUTTONDOWN;
    public static WM NCRBUTTONUP;
    public static WM NCRBUTTONDBLCLK;
    public static WM NCMBUTTONDOWN;
    public static WM NCMBUTTONUP;
    public static WM NCMBUTTONDBLCLK;
    public static WM NCXBUTTONDOWN;
    public static WM NCXBUTTONDBLCLK;
    public static WM SYSKEYDOWN;
    public static WM SYSKEYUP;
    public static WM SYSCHAR;
    public static WM SYSDEADCHAR;
    public static WM COMMAND;
    public static WM SYSCOMMAND;
    public static WM NCUAHDRAWCAPTION;
    public static WM NCUAHDRAWFRAME;
    public static WM MOUSEMOVE;
    public static WM LBUTTONDOWN;
    public static WM LBUTTONUP;
    public static WM LBUTTONDBLCLK;
    public static WM RBUTTONDOWN;
    public static WM RBUTTONUP;
    public static WM RBUTTONDBLCLK;
    public static WM MBUTTONDOWN;
    public static WM MBUTTONUP;
    public static WM MBUTTONDBLCLK;
    public static WM MOUSEWHEEL;
    public static WM XBUTTONDOWN;
    public static WM XBUTTONUP;
    public static WM XBUTTONDBLCLK;
    public static WM MOUSEHWHEEL;
    public static WM PARENTNOTIFY;
    public static WM SIZING;
    public static WM CAPTURECHANGED;
    public static WM POWERBROADCAST;
    public static WM DEVICECHANGE;
    public static WM ENTERSIZEMOVE;
    public static WM EXITSIZEMOVE;
    public static WM IME_SETCONTEXT;
    public static WM IME_NOTIFY;
    public static WM IME_CONTROL;
    public static WM IME_COMPOSITIONFULL;
    public static WM IME_SELECT;
    public static WM IME_CHAR;
    public static WM IME_REQUEST;
    public static WM IME_KEYDOWN;
    public static WM IME_KEYUP;
    public static WM NCMOUSELEAVE;
    public static WM MOUSELEAVE;
    public static WM TABLET_DEFBASE;
    public static WM TABLET_ADDED;
    public static WM TABLET_DELETED;
    public static WM TABLET_FLICK;
    public static WM TABLET_QUERYSYSTEMGESTURESTATUS;
    public static WM DPICHANGED;
    public static WM CUT;
    public static WM COPY;
    public static WM PASTE;
    public static WM CLEAR;
    public static WM UNDO;
    public static WM RENDERFORMAT;
    public static WM RENDERALLFORMATS;
    public static WM DESTROYCLIPBOARD;
    public static WM DRAWCLIPBOARD;
    public static WM PAINTCLIPBOARD;
    public static WM VSCROLLCLIPBOARD;
    public static WM SIZECLIPBOARD;
    public static WM ASKCBFORMATNAME;
    public static WM CHANGECBCHAIN;
    public static WM HSCROLLCLIPBOARD;
    public static WM QUERYNEWPALETTE;
    public static WM PALETTEISCHANGING;
    public static WM PALETTECHANGED;
    public static WM HOTKEY;
    public static WM PRINT;
    public static WM PRINTCLIENT;
    public static WM APPCOMMAND;
    public static WM THEMECHANGED;
    public static WM DWMCOMPOSITIONCHANGED;
    public static WM DWMNCRENDERINGCHANGED;
    public static WM DWMCOLORIZATIONCOLORCHANGED;
    public static WM DWMWINDOWMAXIMIZEDCHANGE;
    public static WM GETTITLEBARINFOEX;
    public static WM DWMSENDICONICTHUMBNAIL;
    public static WM DWMSENDICONICLIVEPREVIEWBITMAP;
    public static WM USER;
    public static WM TRAYMOUSEMESSAGE;
    public static WM APP;
}
[FlagsAttribute]
internal enum Windows.Win32.WVR : Enum {
    public int value__;
    public static WVR ALIGNTOP;
    public static WVR ALIGNLEFT;
    public static WVR ALIGNBOTTOM;
    public static WVR ALIGNRIGHT;
    public static WVR HREDRAW;
    public static WVR VREDRAW;
    public static WVR VALIDRECTS;
    public static WVR REDRAW;
}
