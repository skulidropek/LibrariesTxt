[ExtensionAttribute]
internal static class AssemblyExtensions : object {
    [ExtensionAttribute]
public static string GetVersion(Assembly assembly);
    private static TAttibute GetAssemblyAttribute(Assembly assembly);
}
[ExtensionAttribute]
public static class CecilExtensions : object {
    [ExtensionAttribute]
public static Version GetVersion(AssemblyDefinition assemblyDefinition);
    [ExtensionAttribute]
public static bool IsNetStandardLibrary(AssemblyDefinition assemblyDefinition);
    [ExtensionAttribute]
public static bool IsUsingDotNetCore(AssemblyDefinition assemblyDefinition);
    [ExtensionAttribute]
public static bool IsUsingDotNetCore(ModuleDefinition moduleDefinition);
    [ExtensionAttribute]
public static AssemblyDefinition Resolve(IAssemblyResolver assemblyResolver, string name);
}
public class Configuration : object {
    [CompilerGeneratedAttribute]
private bool <OptOutAssemblies>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OptOutRuntimeAssemblies>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeDebugSymbols>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeRuntimeReferences>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <UseRuntimeReferencePaths>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisableCompression>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisableCleanup>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisableEventSubscription>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <LoadAtModuleInit>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CreateTemporaryAssemblies>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreSatelliteAssemblies>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <IncludeAssemblies>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <ExcludeAssemblies>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <IncludeRuntimeAssemblies>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <ExcludeRuntimeAssemblies>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <UnmanagedWinX86Assemblies>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <UnmanagedWinX64Assemblies>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <UnmanagedWinArm64Assemblies>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <PreloadOrder>k__BackingField;
    public bool OptOutAssemblies { get; }
    public bool OptOutRuntimeAssemblies { get; }
    public bool IncludeDebugSymbols { get; }
    public bool IncludeRuntimeReferences { get; }
    public Nullable`1<bool> UseRuntimeReferencePaths { get; }
    public bool DisableCompression { get; }
    public bool DisableCleanup { get; }
    public bool DisableEventSubscription { get; }
    public bool LoadAtModuleInit { get; }
    public bool CreateTemporaryAssemblies { get; }
    public bool IgnoreSatelliteAssemblies { get; }
    public List`1<string> IncludeAssemblies { get; }
    public List`1<string> ExcludeAssemblies { get; }
    public List`1<string> IncludeRuntimeAssemblies { get; }
    public List`1<string> ExcludeRuntimeAssemblies { get; }
    public List`1<string> UnmanagedWinX86Assemblies { get; }
    public List`1<string> UnmanagedWinX64Assemblies { get; }
    public List`1<string> UnmanagedWinArm64Assemblies { get; }
    public List`1<string> PreloadOrder { get; }
    public Configuration(XElement config);
    [CompilerGeneratedAttribute]
public bool get_OptOutAssemblies();
    [CompilerGeneratedAttribute]
public bool get_OptOutRuntimeAssemblies();
    [CompilerGeneratedAttribute]
public bool get_IncludeDebugSymbols();
    [CompilerGeneratedAttribute]
public bool get_IncludeRuntimeReferences();
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_UseRuntimeReferencePaths();
    [CompilerGeneratedAttribute]
public bool get_DisableCompression();
    [CompilerGeneratedAttribute]
public bool get_DisableCleanup();
    [CompilerGeneratedAttribute]
public bool get_DisableEventSubscription();
    [CompilerGeneratedAttribute]
public bool get_LoadAtModuleInit();
    [CompilerGeneratedAttribute]
public bool get_CreateTemporaryAssemblies();
    [CompilerGeneratedAttribute]
public bool get_IgnoreSatelliteAssemblies();
    [CompilerGeneratedAttribute]
public List`1<string> get_IncludeAssemblies();
    [CompilerGeneratedAttribute]
public List`1<string> get_ExcludeAssemblies();
    [CompilerGeneratedAttribute]
public List`1<string> get_IncludeRuntimeAssemblies();
    [CompilerGeneratedAttribute]
public List`1<string> get_ExcludeRuntimeAssemblies();
    [CompilerGeneratedAttribute]
public List`1<string> get_UnmanagedWinX86Assemblies();
    [CompilerGeneratedAttribute]
public List`1<string> get_UnmanagedWinX64Assemblies();
    [CompilerGeneratedAttribute]
public List`1<string> get_UnmanagedWinArm64Assemblies();
    [CompilerGeneratedAttribute]
public List`1<string> get_PreloadOrder();
    public static bool ReadBool(XElement config, string nodeName, bool default);
    public static Nullable`1<bool> ReadBool(XElement config, string nodeName);
    public static List`1<string> ReadList(XElement config, string nodeName);
}
public class EmbeddedReferenceInfo : object {
    [CompilerGeneratedAttribute]
private string <ResourceName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssemblyName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RelativeFileName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Sha1Checksum>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Size>k__BackingField;
    public string ResourceName { get; public set; }
    public string Version { get; public set; }
    public string AssemblyName { get; public set; }
    public string RelativeFileName { get; public set; }
    public string Sha1Checksum { get; public set; }
    public long Size { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ResourceName();
    [CompilerGeneratedAttribute]
public void set_ResourceName(string value);
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(string value);
    [CompilerGeneratedAttribute]
public string get_AssemblyName();
    [CompilerGeneratedAttribute]
public void set_AssemblyName(string value);
    [CompilerGeneratedAttribute]
public string get_RelativeFileName();
    [CompilerGeneratedAttribute]
public void set_RelativeFileName(string value);
    [CompilerGeneratedAttribute]
public string get_Sha1Checksum();
    [CompilerGeneratedAttribute]
public void set_Sha1Checksum(string value);
    [CompilerGeneratedAttribute]
public long get_Size();
    [CompilerGeneratedAttribute]
public void set_Size(long value);
    public virtual string ToString();
}
[ExtensionAttribute]
internal static class Extensions : object {
    [ExtensionAttribute]
public static Collection`1<TypeReference> GetGenericInstanceArguments(TypeReference type);
    [ExtensionAttribute]
public static MethodReference MakeHostInstanceGeneric(MethodReference self, TypeReference[] args);
    [ExtensionAttribute]
public static void InsertBefore(Collection`1<Instruction> instructions, int index, Instruction[] newInstructions);
    [ExtensionAttribute]
public static Byte[] FixedGetResourceData(EmbeddedResource resource);
}
internal static class MethodTimeLogger : object {
    public static void Log(MethodBase methodBase, long milliseconds, string message);
    public static void Log(Type type, string methodName, long milliseconds, string message);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public class ModuleWeaver : BaseModuleWeaver {
    private ConstructorInfo _instructionConstructorInfo;
    private TypeDefinition _targetType;
    private TypeDefinition _sourceType;
    private TypeDefinition _commonType;
    private MethodDefinition _attachMethod;
    private MethodDefinition _loaderCctor;
    private bool _hasUnmanaged;
    private FieldDefinition _assemblyNamesField;
    private FieldDefinition _symbolNamesField;
    private FieldDefinition _preloadListField;
    private FieldDefinition _preloadWinX86ListField;
    private FieldDefinition _preloadWinX64ListField;
    private FieldDefinition _preloadWinArm64ListField;
    private FieldDefinition _checksumsField;
    private Dictionary`2<string, string> _checksums;
    private string _resourcesHash;
    private MethodReference _compilerGeneratedAttributeCtor;
    private MethodReference _dictionaryOfStringOfStringAdd;
    private MethodReference _listOfStringAdd;
    private List`1<Stream> _streams;
    private string _cachePath;
    private int _fallbackCounter;
    public bool ShouldCleanReference { get; }
    private void ImportAssemblyLoader(bool createTemporaryAssemblies);
    private void DumpSource(string file);
    private void CopyType(TypeDefinition targetType, TypeDefinition sourceType, bool cloneFields, bool cloneMethods);
    private void CopyFields(TypeDefinition targetType, TypeDefinition source);
    private TypeReference Resolve(TypeReference baseType);
    private MethodDefinition CopyMethod(TypeDefinition targetType, MethodDefinition templateMethod, bool makePrivate);
    private void CopyExceptionHandlers(TypeDefinition targetType, MethodDefinition templateMethod, MethodDefinition newMethod);
    private void CopyInstructions(TypeDefinition targetType, MethodDefinition templateMethod, MethodDefinition newMethod);
    private Instruction CloneInstruction(TypeDefinition targetType, Instruction instruction);
    private SequencePoint TranslateSequencePoint(Instruction instruction, SequencePoint sequencePoint);
    private object Import(TypeDefinition targetType, object operand);
    private void CallAttach(Configuration config);
    private bool FindInitializeCalls(Configuration config);
    private void AddModuleInitializerCall(Configuration config);
    private static string CalculateSha1Checksum(string filename);
    private static string CalculateSha1Checksum(Stream stream);
    private void AddChecksumsToTemplate();
    private void CalculateHash();
    public virtual void Execute();
    [IteratorStateMachineAttribute("ModuleWeaver/<GetAssembliesForScanning>d__35")]
public virtual IEnumerable`1<string> GetAssembliesForScanning();
    public virtual bool get_ShouldCleanReference();
    private void FindMsCoreReferences();
    private void ProcessNativeResources(bool compress);
    private void FixResourceCase();
    private void EmbedResources(Configuration config);
    private void EmbedMetadata(List`1<EmbeddedReferenceInfo> references);
    private bool CompareAssemblyName(string matchText, string assemblyName);
    private List`1<Reference> GetReferences(bool useRuntimeReferencePaths);
    [IteratorStateMachineAttribute("ModuleWeaver/<GetFilteredReferences>d__51")]
private IEnumerable`1<Reference> GetFilteredReferences(IEnumerable`1<Reference> references, Configuration config);
    private bool IsUnmanagedAssemblyReference(Reference reference, Configuration config);
    [IteratorStateMachineAttribute("ModuleWeaver/<GetFilteredRuntimeReferences>d__53")]
private IEnumerable`1<Reference> GetFilteredRuntimeReferences(IEnumerable`1<Reference> references, Configuration config);
    private EmbeddedReferenceInfo Embed(string prefix, string relativePath, string fullPath, bool compress, bool addChecksum, bool disableCleanup);
    private EmbeddedReferenceInfo InnerEmbed(string prefix, string relativePath, string fullPath, bool compress, bool addChecksum, bool disableCleanup);
    public string GetCacheFile(string cacheRoot, string resourceName, bool isCompressed, string sha1Checksum, bool allowNumberReplacement);
    private MemoryStream BuildMemoryStream(string fullPath, bool compress, string cacheFile);
    public sealed virtual void Dispose();
    private void BuildUpNameDictionary(bool createTemporaryAssemblies, List`1<string> preloadOrder);
    private static void GetNameAndExt(String[] parts, String& name, String& ext);
    private void AddToDictionary(FieldDefinition field, string key, string name);
    private void AddToList(FieldDefinition field, string name);
    [CompilerGeneratedAttribute]
private TypeReference <Resolve>b__18_0(TypeReference x);
}
public class NetStandardAssemblyResolver : object {
    private ModuleWeaver _weaver;
    private HashSet`1<AssemblyNameReference> _resolvedReferences;
    private Lazy`1<AssemblyDefinition> _netStandardAssemblyDefinition;
    public NetStandardAssemblyResolver(ModuleWeaver weaver);
    public sealed virtual void Dispose();
    public sealed virtual AssemblyDefinition Resolve(AssemblyNameReference name);
    public sealed virtual AssemblyDefinition Resolve(AssemblyNameReference name, ReaderParameters parameters);
    private AssemblyDefinition Resolve(AssemblyNameReference name, AssemblyDefinition assemblyDefinition);
    private AssemblyDefinition ResolvedReference(AssemblyNameReference name, AssemblyDefinition assemblyDefinition);
    [CompilerGeneratedAttribute]
private AssemblyDefinition <.ctor>b__3_0();
}
public class Reference : object {
    [CompilerGeneratedAttribute]
private string <FullPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FileNameWithoutExtension>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Directory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RelativeFileName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RelativePrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsCopyLocal>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsResourcesAssembly>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsRuntimeReference>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PredictedResourceName>k__BackingField;
    public string FullPath { get; private set; }
    public string FileName { get; private set; }
    public string FileNameWithoutExtension { get; private set; }
    public string Directory { get; private set; }
    public string RelativeFileName { get; private set; }
    public string RelativePrefix { get; private set; }
    public bool IsCopyLocal { get; public set; }
    public bool IsResourcesAssembly { get; private set; }
    public bool IsRuntimeReference { get; private set; }
    public string PredictedResourceName { get; private set; }
    public Reference(string fullPath, bool useRuntimeReferencePaths);
    [CompilerGeneratedAttribute]
public string get_FullPath();
    [CompilerGeneratedAttribute]
private void set_FullPath(string value);
    [CompilerGeneratedAttribute]
public string get_FileName();
    [CompilerGeneratedAttribute]
private void set_FileName(string value);
    [CompilerGeneratedAttribute]
public string get_FileNameWithoutExtension();
    [CompilerGeneratedAttribute]
private void set_FileNameWithoutExtension(string value);
    [CompilerGeneratedAttribute]
public string get_Directory();
    [CompilerGeneratedAttribute]
private void set_Directory(string value);
    [CompilerGeneratedAttribute]
public string get_RelativeFileName();
    [CompilerGeneratedAttribute]
private void set_RelativeFileName(string value);
    [CompilerGeneratedAttribute]
public string get_RelativePrefix();
    [CompilerGeneratedAttribute]
private void set_RelativePrefix(string value);
    [CompilerGeneratedAttribute]
public bool get_IsCopyLocal();
    [CompilerGeneratedAttribute]
public void set_IsCopyLocal(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsResourcesAssembly();
    [CompilerGeneratedAttribute]
private void set_IsResourcesAssembly(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsRuntimeReference();
    [CompilerGeneratedAttribute]
private void set_IsRuntimeReference(bool value);
    [CompilerGeneratedAttribute]
public string get_PredictedResourceName();
    [CompilerGeneratedAttribute]
private void set_PredictedResourceName(string value);
    private void CalculateRelativeFileName(bool useRuntimeReferencePaths);
    public string GetResourceNamePrefix(string prefix);
    public virtual string ToString();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
