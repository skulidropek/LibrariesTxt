internal class Coverlet.Collector.DataCollection.AttachmentManager : object {
    private DataCollectionSink _dataSink;
    private TestPlatformEqtTrace _eqtTrace;
    private TestPlatformLogger _logger;
    private DataCollectionContext _dataCollectionContext;
    private IFileHelper _fileHelper;
    private IDirectoryHelper _directoryHelper;
    private ICountDownEvent _countDownEvent;
    private string _reportDirectory;
    public AttachmentManager(DataCollectionSink dataSink, DataCollectionContext dataCollectionContext, TestPlatformLogger logger, TestPlatformEqtTrace eqtTrace, ICountDownEvent countDownEvent);
    public AttachmentManager(DataCollectionSink dataSink, DataCollectionContext dataCollectionContext, TestPlatformLogger logger, TestPlatformEqtTrace eqtTrace, string reportDirectoryName, IFileHelper fileHelper, IDirectoryHelper directoryHelper, ICountDownEvent countDownEvent);
    public void SendCoverageReport(string coverageReport, string coverageReportFileName);
    public sealed virtual void Dispose();
    private string SaveCoverageReport(string report, string reportFileName);
    public void OnSendFileCompleted(object sender, AsyncCompletedEventArgs e);
    private void SendAttachment(string attachmentPath);
    private void CleanupReportDirectory();
}
internal class Coverlet.Collector.DataCollection.CoverageManager : object {
    private Coverage _coverage;
    private ICoverageWrapper _coverageWrapper;
    private ISourceRootTranslator _sourceRootTranslator;
    [CompilerGeneratedAttribute]
private IReporter[] <Reporters>k__BackingField;
    public IReporter[] Reporters { get; }
    public CoverageManager(CoverletSettings settings, TestPlatformEqtTrace eqtTrace, TestPlatformLogger logger, ICoverageWrapper coverageWrapper, IInstrumentationHelper instrumentationHelper, IFileSystem fileSystem, ISourceRootTranslator sourceRootTranslator, ICecilSymbolHelper cecilSymbolHelper);
    public CoverageManager(CoverletSettings settings, IReporter[] reporters, ILogger logger, ICoverageWrapper coverageWrapper, IInstrumentationHelper instrumentationHelper, IFileSystem fileSystem, ISourceRootTranslator sourceRootTranslator, ICecilSymbolHelper cecilSymbolHelper);
    [CompilerGeneratedAttribute]
public IReporter[] get_Reporters();
    public void InstrumentModules();
    public IEnumerable`1<ValueTuple`2<string, string>> GetCoverageReports();
    private CoverageResult GetCoverageResult();
    private IEnumerable`1<ValueTuple`2<string, string>> GetCoverageReports(CoverageResult coverageResult);
}
internal class Coverlet.Collector.DataCollection.CoverageWrapper : object {
    public sealed virtual Coverage CreateCoverage(CoverletSettings settings, ILogger coverletLogger, IInstrumentationHelper instrumentationHelper, IFileSystem fileSystem, ISourceRootTranslator sourceRootTranslator, ICecilSymbolHelper cecilSymbolHelper);
    public sealed virtual CoverageResult GetCoverageResult(Coverage coverage);
    public sealed virtual void PrepareModules(Coverage coverage);
}
[DataCollectorTypeUriAttribute("datacollector://Microsoft/CoverletCodeCoverage/1.0")]
[DataCollectorFriendlyNameAttribute("XPlat code coverage")]
public class Coverlet.Collector.DataCollection.CoverletCoverageCollector : DataCollector {
    private TestPlatformEqtTrace _eqtTrace;
    private ICoverageWrapper _coverageWrapper;
    private ICountDownEventFactory _countDownEventFactory;
    private Func`4<TestPlatformEqtTrace, TestPlatformLogger, string, IServiceCollection> _serviceCollectionFactory;
    private DataCollectionEvents _events;
    private TestPlatformLogger _logger;
    private XmlElement _configurationElement;
    private DataCollectionSink _dataSink;
    private DataCollectionContext _dataCollectionContext;
    private CoverageManager _coverageManager;
    private IServiceProvider _serviceProvider;
    internal CoverletCoverageCollector(TestPlatformEqtTrace eqtTrace, ICoverageWrapper coverageWrapper, ICountDownEventFactory countDownEventFactory, Func`4<TestPlatformEqtTrace, TestPlatformLogger, string, IServiceCollection> serviceCollectionFactory);
    private void AttachDebugger();
    public virtual void Initialize(XmlElement configurationElement, DataCollectionEvents events, DataCollectionSink dataSink, DataCollectionLogger logger, DataCollectionEnvironmentContext environmentContext);
    protected virtual void Dispose(bool disposing);
    private void OnSessionStart(object sender, SessionStartEventArgs sessionStartEventArgs);
    private void OnSessionEnd(object sender, SessionEndEventArgs e);
    private IEnumerable`1<string> GetTestModules(SessionStartEventArgs sessionStartEventArgs);
    private static IEnumerable`1<string> GetPropertyValueWrapper(SessionStartEventArgs sessionStartEventArgs);
    private static IServiceCollection GetDefaultServiceCollection(TestPlatformEqtTrace eqtTrace, TestPlatformLogger logger, string testModule);
}
public class Coverlet.Collector.DataCollection.CoverletInProcDataCollector : object {
    private TestPlatformEqtTrace _eqtTrace;
    private bool _enableExceptionLog;
    private void AttachDebugger();
    private void EnableExceptionLog();
    public sealed virtual void Initialize(IDataCollectionSink dataCollectionSink);
    public sealed virtual void TestCaseEnd(TestCaseEndArgs testCaseEndArgs);
    public sealed virtual void TestCaseStart(TestCaseStartArgs testCaseStartArgs);
    public sealed virtual void TestSessionEnd(TestSessionEndArgs testSessionEndArgs);
    public sealed virtual void TestSessionStart(TestSessionStartArgs testSessionStartArgs);
    private Type GetInstrumentationClass(Assembly assembly);
}
internal class Coverlet.Collector.DataCollection.CoverletLogger : object {
    private TestPlatformEqtTrace _eqtTrace;
    private TestPlatformLogger _logger;
    public CoverletLogger(TestPlatformEqtTrace eqtTrace, TestPlatformLogger logger);
    public sealed virtual void LogError(string message);
    public sealed virtual void LogError(Exception exception);
    public sealed virtual void LogInformation(string message, bool important);
    public sealed virtual void LogVerbose(string message);
    public sealed virtual void LogWarning(string message);
}
internal class Coverlet.Collector.DataCollection.CoverletSettings : object {
    [CompilerGeneratedAttribute]
private string <TestModule>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <ReportFormats>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <IncludeFilters>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <IncludeDirectories>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <ExcludeFilters>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <ExcludeSourceFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <ExcludeAttributes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MergeWith>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseSourceLink>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SingleHit>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeTestAssembly>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SkipAutoProps>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <DoesNotReturnAttributes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DeterministicReport>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExcludeAssembliesWithoutSources>k__BackingField;
    public string TestModule { get; public set; }
    public String[] ReportFormats { get; public set; }
    public String[] IncludeFilters { get; public set; }
    public String[] IncludeDirectories { get; public set; }
    public String[] ExcludeFilters { get; public set; }
    public String[] ExcludeSourceFiles { get; public set; }
    public String[] ExcludeAttributes { get; public set; }
    public string MergeWith { get; public set; }
    public bool UseSourceLink { get; public set; }
    public bool SingleHit { get; public set; }
    public bool IncludeTestAssembly { get; public set; }
    public bool SkipAutoProps { get; public set; }
    public String[] DoesNotReturnAttributes { get; public set; }
    public bool DeterministicReport { get; public set; }
    public string ExcludeAssembliesWithoutSources { get; public set; }
    [CompilerGeneratedAttribute]
public string get_TestModule();
    [CompilerGeneratedAttribute]
public void set_TestModule(string value);
    [CompilerGeneratedAttribute]
public String[] get_ReportFormats();
    [CompilerGeneratedAttribute]
public void set_ReportFormats(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_IncludeFilters();
    [CompilerGeneratedAttribute]
public void set_IncludeFilters(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_IncludeDirectories();
    [CompilerGeneratedAttribute]
public void set_IncludeDirectories(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_ExcludeFilters();
    [CompilerGeneratedAttribute]
public void set_ExcludeFilters(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_ExcludeSourceFiles();
    [CompilerGeneratedAttribute]
public void set_ExcludeSourceFiles(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_ExcludeAttributes();
    [CompilerGeneratedAttribute]
public void set_ExcludeAttributes(String[] value);
    [CompilerGeneratedAttribute]
public string get_MergeWith();
    [CompilerGeneratedAttribute]
public void set_MergeWith(string value);
    [CompilerGeneratedAttribute]
public bool get_UseSourceLink();
    [CompilerGeneratedAttribute]
public void set_UseSourceLink(bool value);
    [CompilerGeneratedAttribute]
public bool get_SingleHit();
    [CompilerGeneratedAttribute]
public void set_SingleHit(bool value);
    [CompilerGeneratedAttribute]
public bool get_IncludeTestAssembly();
    [CompilerGeneratedAttribute]
public void set_IncludeTestAssembly(bool value);
    [CompilerGeneratedAttribute]
public bool get_SkipAutoProps();
    [CompilerGeneratedAttribute]
public void set_SkipAutoProps(bool value);
    [CompilerGeneratedAttribute]
public String[] get_DoesNotReturnAttributes();
    [CompilerGeneratedAttribute]
public void set_DoesNotReturnAttributes(String[] value);
    [CompilerGeneratedAttribute]
public bool get_DeterministicReport();
    [CompilerGeneratedAttribute]
public void set_DeterministicReport(bool value);
    [CompilerGeneratedAttribute]
public string get_ExcludeAssembliesWithoutSources();
    [CompilerGeneratedAttribute]
public void set_ExcludeAssembliesWithoutSources(string value);
    public virtual string ToString();
}
internal class Coverlet.Collector.DataCollection.CoverletSettingsParser : object {
    private TestPlatformEqtTrace _eqtTrace;
    public CoverletSettingsParser(TestPlatformEqtTrace eqtTrace);
    public CoverletSettings Parse(XmlElement configurationElement, IEnumerable`1<string> testModules);
    private static string ParseTestModule(IEnumerable`1<string> testModules);
    private static String[] ParseReportFormats(XmlElement configurationElement);
    private static String[] ParseIncludeFilters(XmlElement configurationElement);
    private static String[] ParseIncludeDirectories(XmlElement configurationElement);
    private static String[] ParseExcludeFilters(XmlElement configurationElement);
    private static String[] ParseExcludeSourceFiles(XmlElement configurationElement);
    private static String[] ParseExcludeAttributes(XmlElement configurationElement);
    private static string ParseMergeWith(XmlElement configurationElement);
    private static bool ParseUseSourceLink(XmlElement configurationElement);
    private static bool ParseSingleHit(XmlElement configurationElement);
    private static bool ParseDeterministicReport(XmlElement configurationElement);
    private static string ParseExcludeAssembliesWithoutSources(XmlElement configurationElement);
    private static bool ParseIncludeTestAssembly(XmlElement configurationElement);
    private static bool ParseSkipAutoProps(XmlElement configurationElement);
    private static String[] ParseDoesNotReturnAttributes(XmlElement configurationElement);
    private static String[] SplitElement(XmlElement element);
}
internal class Coverlet.Collector.Utilities.CollectorCountdownEvent : object {
    private CountdownEvent _countDownEvent;
    private TimeSpan _waitTimeout;
    public CollectorCountdownEvent(int count, TimeSpan waitTimeout);
    public sealed virtual void Signal();
    public sealed virtual void Wait();
}
internal class Coverlet.Collector.Utilities.CollectorCountdownEventFactory : object {
    public sealed virtual ICountDownEvent Create(int count, TimeSpan waitTimeout);
}
internal static class Coverlet.Collector.Utilities.CoverletConstants : object {
    public static string FriendlyName;
    public static string DefaultUri;
    public static string DataCollectorName;
    public static string DefaultReportFormat;
    public static string DefaultFileName;
    public static string IncludeFiltersElementName;
    public static string IncludeDirectoriesElementName;
    public static string ExcludeFiltersElementName;
    public static string ExcludeSourceFilesElementName;
    public static string ExcludeAttributesElementName;
    public static string MergeWithElementName;
    public static string UseSourceLinkElementName;
    public static string SingleHitElementName;
    public static string IncludeTestAssemblyElementName;
    public static string TestSourcesPropertyName;
    public static string ReportFormatElementName;
    public static string DefaultExcludeFilter;
    public static string InProcDataCollectorName;
    public static string SkipAutoProps;
    public static string DoesNotReturnAttributesElementName;
    public static string DeterministicReport;
    public static string ExcludeAssembliesWithoutSources;
}
internal class Coverlet.Collector.Utilities.CoverletDataCollectorException : Exception {
    public CoverletDataCollectorException(string message);
    public CoverletDataCollectorException(string message, Exception innerException);
}
internal class Coverlet.Collector.Utilities.DirectoryHelper : object {
    public sealed virtual bool Exists(string path);
    public sealed virtual void CreateDirectory(string path);
    public sealed virtual void Delete(string path, bool recursive);
}
internal class Coverlet.Collector.Utilities.FileHelper : object {
    public sealed virtual bool Exists(string path);
    public sealed virtual void WriteAllText(string path, string contents);
}
internal interface Coverlet.Collector.Utilities.Interfaces.ICountDownEvent {
    public abstract virtual void Signal();
    public abstract virtual void Wait();
}
internal interface Coverlet.Collector.Utilities.Interfaces.ICountDownEventFactory {
    public abstract virtual ICountDownEvent Create(int count, TimeSpan waitTimeout);
}
internal interface Coverlet.Collector.Utilities.Interfaces.ICoverageWrapper {
    public abstract virtual Coverage CreateCoverage(CoverletSettings settings, ILogger logger, IInstrumentationHelper instrumentationHelper, IFileSystem fileSystem, ISourceRootTranslator sourceRootTranslator, ICecilSymbolHelper cecilSymbolHelper);
    public abstract virtual CoverageResult GetCoverageResult(Coverage coverage);
    public abstract virtual void PrepareModules(Coverage coverage);
}
internal interface Coverlet.Collector.Utilities.Interfaces.IDirectoryHelper {
    public abstract virtual bool Exists(string path);
    public abstract virtual void CreateDirectory(string directory);
    public abstract virtual void Delete(string path, bool recursive);
}
internal interface Coverlet.Collector.Utilities.Interfaces.IFileHelper {
    public abstract virtual bool Exists(string path);
    public abstract virtual void WriteAllText(string path, string contents);
}
internal class Coverlet.Collector.Utilities.TestPlatformEqtTrace : object {
    public bool IsInfoEnabled { get; }
    public bool IsVerboseEnabled { get; }
    public bool get_IsInfoEnabled();
    public bool get_IsVerboseEnabled();
    public void Verbose(string format, Object[] args);
    public void Warning(string format, Object[] args);
    public void Info(string format, Object[] args);
    public void Error(string format, Object[] args);
}
internal class Coverlet.Collector.Utilities.TestPlatformLogger : object {
    private DataCollectionLogger _logger;
    private DataCollectionContext _dataCollectionContext;
    public TestPlatformLogger(DataCollectionLogger logger, DataCollectionContext dataCollectionContext);
    public void LogWarning(string warning);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
[GeneratedCodeAttribute("Nerdbank.GitVersioning.Tasks", "3.6.133.12845")]
[ExcludeFromCodeCoverageAttribute]
internal static class ThisAssembly : object {
    internal static string AssemblyConfiguration;
    internal static string AssemblyFileVersion;
    internal static string AssemblyInformationalVersion;
    internal static string AssemblyName;
    internal static string AssemblyTitle;
    internal static string AssemblyVersion;
    internal static DateTime GitCommitDate;
    internal static string GitCommitId;
    internal static bool IsPrerelease;
    internal static bool IsPublicRelease;
    internal static string RootNamespace;
    private static ThisAssembly();
}
