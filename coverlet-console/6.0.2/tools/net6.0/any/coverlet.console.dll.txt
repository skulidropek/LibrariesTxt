[FlagsAttribute]
internal enum CommandExitCodes : Enum {
    public int value__;
    public static CommandExitCodes Success;
    public static CommandExitCodes TestFailed;
    public static CommandExitCodes CoverageBelowThreshold;
    public static CommandExitCodes Exception;
    public static CommandExitCodes CommandParsingException;
}
internal class ConsoleTables.ConsoleTable : object {
    [CompilerGeneratedAttribute]
private IList`1<object> <Columns>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<Object[]> <Rows>k__BackingField;
    [CompilerGeneratedAttribute]
private ConsoleTableOptions <Options>k__BackingField;
    public IList`1<object> Columns { get; public set; }
    public IList`1<Object[]> Rows { get; protected set; }
    public ConsoleTableOptions Options { get; protected set; }
    public ConsoleTable(String[] columns);
    public ConsoleTable(ConsoleTableOptions options);
    [CompilerGeneratedAttribute]
public IList`1<object> get_Columns();
    [CompilerGeneratedAttribute]
public void set_Columns(IList`1<object> value);
    [CompilerGeneratedAttribute]
public IList`1<Object[]> get_Rows();
    [CompilerGeneratedAttribute]
protected void set_Rows(IList`1<Object[]> value);
    [CompilerGeneratedAttribute]
public ConsoleTableOptions get_Options();
    [CompilerGeneratedAttribute]
protected void set_Options(ConsoleTableOptions value);
    public ConsoleTable AddColumn(IEnumerable`1<string> names);
    public ConsoleTable AddRow(Object[] values);
    public static ConsoleTable From(IEnumerable`1<T> values);
    public virtual string ToString();
    public string ToMarkDownString();
    private string ToMarkDownString(char delimiter);
    public string ToMinimalString();
    public string ToStringAlternative();
    private string Format(List`1<int> columnLengths, char delimiter);
    private List`1<int> ColumnLengths();
    public void Write(Format format);
    private static IEnumerable`1<string> GetColumns();
    private static object GetColumnValue(object target, string column);
    [CompilerGeneratedAttribute]
private int <ColumnLengths>b__23_0(object t, int i);
}
public class ConsoleTables.ConsoleTableOptions : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <Columns>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableCount>k__BackingField;
    public IEnumerable`1<string> Columns { get; public set; }
    public bool EnableCount { get; public set; }
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_Columns();
    [CompilerGeneratedAttribute]
public void set_Columns(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public bool get_EnableCount();
    [CompilerGeneratedAttribute]
public void set_EnableCount(bool value);
}
public enum ConsoleTables.Format : Enum {
    public int value__;
    public static Format Default;
    public static Format MarkDown;
    public static Format Alternative;
    public static Format Minimal;
}
internal class Coverlet.Console.Logging.ConsoleLogger : object {
    private static object s_sync;
    [CompilerGeneratedAttribute]
private LogLevel <Level>k__BackingField;
    public LogLevel Level { get; public set; }
    private static ConsoleLogger();
    [CompilerGeneratedAttribute]
public LogLevel get_Level();
    [CompilerGeneratedAttribute]
public void set_Level(LogLevel value);
    public sealed virtual void LogError(string message);
    public sealed virtual void LogError(Exception exception);
    public sealed virtual void LogInformation(string message, bool important);
    public sealed virtual void LogVerbose(string message);
    public sealed virtual void LogWarning(string message);
    private void Log(LogLevel level, string message, ConsoleColor color);
}
internal enum Coverlet.Console.Logging.LogLevel : Enum {
    public int value__;
    public static LogLevel Detailed;
    public static LogLevel Normal;
    public static LogLevel Minimal;
    public static LogLevel Quiet;
}
public static class Coverlet.Console.Program : object {
    private static int Main(String[] args);
    private static Task`1<int> HandleCommand(string moduleOrAppDirectory, string target, string targs, string output, LogLevel verbosity, String[] formats, string threshold, List`1<string> thresholdTypes, ThresholdStatistic thresholdStat, String[] excludeFilters, String[] includeFilters, String[] excludedSourceFiles, String[] includeDirectories, String[] excludeAttributes, bool includeTestAssembly, bool singleHit, bool skipAutoProp, string mergeWith, bool useSourceLink, String[] doesNotReturnAttributes, string excludeAssembliesWithoutSources, string sourceMappingFile);
    private static string InvariantFormat(double value);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
[GeneratedCodeAttribute("Nerdbank.GitVersioning.Tasks", "3.6.133.12845")]
[ExcludeFromCodeCoverageAttribute]
internal static class ThisAssembly : object {
    internal static string AssemblyConfiguration;
    internal static string AssemblyFileVersion;
    internal static string AssemblyInformationalVersion;
    internal static string AssemblyName;
    internal static string AssemblyTitle;
    internal static string AssemblyVersion;
    internal static DateTime GitCommitDate;
    internal static string GitCommitId;
    internal static bool IsPrerelease;
    internal static bool IsPublicRelease;
    internal static string RootNamespace;
    private static ThisAssembly();
}
