internal class ConsoleTables.ConsoleTable : object {
    [CompilerGeneratedAttribute]
private IList`1<object> <Columns>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<Object[]> <Rows>k__BackingField;
    [CompilerGeneratedAttribute]
private ConsoleTableOptions <Options>k__BackingField;
    public IList`1<object> Columns { get; public set; }
    public IList`1<Object[]> Rows { get; protected set; }
    public ConsoleTableOptions Options { get; protected set; }
    public ConsoleTable(String[] columns);
    public ConsoleTable(ConsoleTableOptions options);
    [CompilerGeneratedAttribute]
public IList`1<object> get_Columns();
    [CompilerGeneratedAttribute]
public void set_Columns(IList`1<object> value);
    [CompilerGeneratedAttribute]
public IList`1<Object[]> get_Rows();
    [CompilerGeneratedAttribute]
protected void set_Rows(IList`1<Object[]> value);
    [CompilerGeneratedAttribute]
public ConsoleTableOptions get_Options();
    [CompilerGeneratedAttribute]
protected void set_Options(ConsoleTableOptions value);
    public ConsoleTable AddColumn(IEnumerable`1<string> names);
    public ConsoleTable AddRow(Object[] values);
    public static ConsoleTable From(IEnumerable`1<T> values);
    public virtual string ToString();
    public string ToMarkDownString();
    private string ToMarkDownString(char delimiter);
    public string ToMinimalString();
    public string ToStringAlternative();
    private string Format(List`1<int> columnLengths, char delimiter);
    private List`1<int> ColumnLengths();
    public void Write(Format format);
    private static IEnumerable`1<string> GetColumns();
    private static object GetColumnValue(object target, string column);
    [CompilerGeneratedAttribute]
private int <ColumnLengths>b__23_0(object t, int i);
}
public class ConsoleTables.ConsoleTableOptions : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <Columns>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableCount>k__BackingField;
    public IEnumerable`1<string> Columns { get; public set; }
    public bool EnableCount { get; public set; }
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_Columns();
    [CompilerGeneratedAttribute]
public void set_Columns(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public bool get_EnableCount();
    [CompilerGeneratedAttribute]
public void set_EnableCount(bool value);
}
public enum ConsoleTables.Format : Enum {
    public int value__;
    public static Format Default;
    public static Format MarkDown;
    public static Format Alternative;
    public static Format Minimal;
}
public abstract class Coverlet.MSbuild.Tasks.BaseTask : Task {
    [CompilerGeneratedAttribute]
private static IServiceProvider <ServiceProvider>k__BackingField;
    public static IServiceProvider ServiceProvider { get; protected internal set; }
    [CompilerGeneratedAttribute]
public static IServiceProvider get_ServiceProvider();
    [CompilerGeneratedAttribute]
protected internal static void set_ServiceProvider(IServiceProvider value);
}
public class Coverlet.MSbuild.Tasks.CoverageResultTask : BaseTask {
    private MSBuildLogger _logger;
    [CompilerGeneratedAttribute]
private string <Output>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Threshold>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ThresholdType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ThresholdStat>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem <InstrumenterState>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CoverletMultiTargetFrameworksCurrentTFM>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <ReportItems>k__BackingField;
    [RequiredAttribute]
public string Output { get; public set; }
    [RequiredAttribute]
public string OutputFormat { get; public set; }
    [RequiredAttribute]
public string Threshold { get; public set; }
    [RequiredAttribute]
public string ThresholdType { get; public set; }
    [RequiredAttribute]
public string ThresholdStat { get; public set; }
    [RequiredAttribute]
public ITaskItem InstrumenterState { get; public set; }
    public string CoverletMultiTargetFrameworksCurrentTFM { get; public set; }
    [OutputAttribute]
public ITaskItem[] ReportItems { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Output();
    [CompilerGeneratedAttribute]
public void set_Output(string value);
    [CompilerGeneratedAttribute]
public string get_OutputFormat();
    [CompilerGeneratedAttribute]
public void set_OutputFormat(string value);
    [CompilerGeneratedAttribute]
public string get_Threshold();
    [CompilerGeneratedAttribute]
public void set_Threshold(string value);
    [CompilerGeneratedAttribute]
public string get_ThresholdType();
    [CompilerGeneratedAttribute]
public void set_ThresholdType(string value);
    [CompilerGeneratedAttribute]
public string get_ThresholdStat();
    [CompilerGeneratedAttribute]
public void set_ThresholdStat(string value);
    [CompilerGeneratedAttribute]
public ITaskItem get_InstrumenterState();
    [CompilerGeneratedAttribute]
public void set_InstrumenterState(ITaskItem value);
    [CompilerGeneratedAttribute]
public string get_CoverletMultiTargetFrameworksCurrentTFM();
    [CompilerGeneratedAttribute]
public void set_CoverletMultiTargetFrameworksCurrentTFM(string value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_ReportItems();
    [CompilerGeneratedAttribute]
public void set_ReportItems(ITaskItem[] value);
    public virtual bool Execute();
    private static string InvariantFormat(double value);
}
public class Coverlet.MSbuild.Tasks.InstrumentationTask : BaseTask {
    private MSBuildLogger _logger;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Include>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IncludeDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Exclude>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExcludeByFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExcludeByAttribute>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeTestAssembly>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SingleHit>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MergeWith>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseSourceLink>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SkipAutoProps>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DoesNotReturnAttribute>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DeterministicReport>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExcludeAssembliesWithoutSources>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem <InstrumenterState>k__BackingField;
    [RequiredAttribute]
public string Path { get; public set; }
    public string Include { get; public set; }
    public string IncludeDirectory { get; public set; }
    public string Exclude { get; public set; }
    public string ExcludeByFile { get; public set; }
    public string ExcludeByAttribute { get; public set; }
    public bool IncludeTestAssembly { get; public set; }
    public bool SingleHit { get; public set; }
    public string MergeWith { get; public set; }
    public bool UseSourceLink { get; public set; }
    public bool SkipAutoProps { get; public set; }
    public string DoesNotReturnAttribute { get; public set; }
    public bool DeterministicReport { get; public set; }
    public string ExcludeAssembliesWithoutSources { get; public set; }
    [OutputAttribute]
public ITaskItem InstrumenterState { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public string get_Include();
    [CompilerGeneratedAttribute]
public void set_Include(string value);
    [CompilerGeneratedAttribute]
public string get_IncludeDirectory();
    [CompilerGeneratedAttribute]
public void set_IncludeDirectory(string value);
    [CompilerGeneratedAttribute]
public string get_Exclude();
    [CompilerGeneratedAttribute]
public void set_Exclude(string value);
    [CompilerGeneratedAttribute]
public string get_ExcludeByFile();
    [CompilerGeneratedAttribute]
public void set_ExcludeByFile(string value);
    [CompilerGeneratedAttribute]
public string get_ExcludeByAttribute();
    [CompilerGeneratedAttribute]
public void set_ExcludeByAttribute(string value);
    [CompilerGeneratedAttribute]
public bool get_IncludeTestAssembly();
    [CompilerGeneratedAttribute]
public void set_IncludeTestAssembly(bool value);
    [CompilerGeneratedAttribute]
public bool get_SingleHit();
    [CompilerGeneratedAttribute]
public void set_SingleHit(bool value);
    [CompilerGeneratedAttribute]
public string get_MergeWith();
    [CompilerGeneratedAttribute]
public void set_MergeWith(string value);
    [CompilerGeneratedAttribute]
public bool get_UseSourceLink();
    [CompilerGeneratedAttribute]
public void set_UseSourceLink(bool value);
    [CompilerGeneratedAttribute]
public bool get_SkipAutoProps();
    [CompilerGeneratedAttribute]
public void set_SkipAutoProps(bool value);
    [CompilerGeneratedAttribute]
public string get_DoesNotReturnAttribute();
    [CompilerGeneratedAttribute]
public void set_DoesNotReturnAttribute(string value);
    [CompilerGeneratedAttribute]
public bool get_DeterministicReport();
    [CompilerGeneratedAttribute]
public void set_DeterministicReport(bool value);
    [CompilerGeneratedAttribute]
public string get_ExcludeAssembliesWithoutSources();
    [CompilerGeneratedAttribute]
public void set_ExcludeAssembliesWithoutSources(string value);
    [CompilerGeneratedAttribute]
public ITaskItem get_InstrumenterState();
    [CompilerGeneratedAttribute]
public void set_InstrumenterState(ITaskItem value);
    private void AttachDebugger();
    public virtual bool Execute();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private MSBuildLogger <Execute>b__63_0(IServiceProvider _);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private SourceRootTranslator <Execute>b__63_1(IServiceProvider serviceProvider);
}
internal class Coverlet.MSbuild.Tasks.MSBuildLogger : object {
    private static string LogPrefix;
    private TaskLoggingHelper _log;
    public MSBuildLogger(TaskLoggingHelper log);
    public sealed virtual void LogVerbose(string message);
    public sealed virtual void LogInformation(string message, bool important);
    public sealed virtual void LogWarning(string message);
    public void LogWarning(Exception exception);
    public sealed virtual void LogError(string message);
    public sealed virtual void LogError(Exception exception);
}
internal class Coverlet.MSbuild.Tasks.ReportWriter : object {
    private string _coverletMultiTargetFrameworksCurrentTFM;
    private string _directory;
    private string _output;
    private IReporter _reporter;
    private IFileSystem _fileSystem;
    private ISourceRootTranslator _sourceRootTranslator;
    private CoverageResult _result;
    public ReportWriter(string coverletMultiTargetFrameworksCurrentTFM, string directory, string output, IReporter reporter, IFileSystem fileSystem, CoverageResult result, ISourceRootTranslator sourceRootTranslator);
    public string WriteReport();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
[GeneratedCodeAttribute("Nerdbank.GitVersioning.Tasks", "3.6.133.12845")]
[ExcludeFromCodeCoverageAttribute]
internal static class ThisAssembly : object {
    internal static string AssemblyConfiguration;
    internal static string AssemblyFileVersion;
    internal static string AssemblyInformationalVersion;
    internal static string AssemblyName;
    internal static string AssemblyTitle;
    internal static string AssemblyVersion;
    internal static DateTime GitCommitDate;
    internal static string GitCommitId;
    internal static bool IsPrerelease;
    internal static bool IsPublicRelease;
    internal static string RootNamespace;
    private static ThisAssembly();
}
