public class Force.Crc32.Crc32Algorithm : HashAlgorithm {
    private UInt32 _currentCrc;
    private bool _isBigEndian;
    private static SafeProxy _proxy;
    public Crc32Algorithm(bool isBigEndian);
    private static Crc32Algorithm();
    public static UInt32 Append(UInt32 initial, Byte[] input, int offset, int length);
    public static UInt32 Append(UInt32 initial, Byte[] input);
    public static UInt32 Compute(Byte[] input, int offset, int length);
    public static UInt32 Compute(Byte[] input);
    public static UInt32 ComputeAndWriteToEnd(Byte[] input, int offset, int length);
    public static UInt32 ComputeAndWriteToEnd(Byte[] input);
    public static bool IsValidWithCrcAtEnd(Byte[] input, int offset, int lengthWithCrc);
    public static bool IsValidWithCrcAtEnd(Byte[] input);
    public virtual void Initialize();
    protected virtual void HashCore(Byte[] input, int offset, int length);
    protected virtual Byte[] HashFinal();
    private static UInt32 AppendInternal(UInt32 initial, Byte[] input, int offset, int length);
}
public class Force.Crc32.Crc32CAlgorithm : HashAlgorithm {
    private UInt32 _currentCrc;
    private bool _isBigEndian;
    private static SafeProxyC _proxy;
    public Crc32CAlgorithm(bool isBigEndian);
    private static Crc32CAlgorithm();
    public static UInt32 Append(UInt32 initial, Byte[] input, int offset, int length);
    public static UInt32 Append(UInt32 initial, Byte[] input);
    public static UInt32 Compute(Byte[] input, int offset, int length);
    public static UInt32 Compute(Byte[] input);
    public static UInt32 ComputeAndWriteToEnd(Byte[] input, int offset, int length);
    public static UInt32 ComputeAndWriteToEnd(Byte[] input);
    public static bool IsValidWithCrcAtEnd(Byte[] input, int offset, int lengthWithCrc);
    public static bool IsValidWithCrcAtEnd(Byte[] input);
    public virtual void Initialize();
    protected virtual void HashCore(Byte[] input, int offset, int length);
    protected virtual Byte[] HashFinal();
    private static UInt32 AppendInternal(UInt32 initial, Byte[] input, int offset, int length);
}
internal class Force.Crc32.SafeProxy : object {
    private static UInt32 Poly;
    private UInt32[] _table;
    protected void Init(UInt32 poly);
    public UInt32 Append(UInt32 crc, Byte[] input, int offset, int length);
}
internal class Force.Crc32.SafeProxyC : SafeProxy {
    private static UInt32 Poly;
}
