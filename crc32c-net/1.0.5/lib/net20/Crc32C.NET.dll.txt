public class Crc32C.Crc32CAlgorithm : HashAlgorithm {
    private UInt32 CurrentCrc;
    public static UInt32 Append(UInt32 initial, Byte[] input, int offset, int length);
    public static UInt32 Append(UInt32 initial, Byte[] input);
    public static UInt32 Compute(Byte[] input, int offset, int length);
    public static UInt32 Compute(Byte[] input);
    public virtual void Initialize();
    protected virtual void HashCore(Byte[] input, int offset, int length);
    protected virtual Byte[] HashFinal();
    private static UInt32 AppendInternal(UInt32 initial, Byte[] input, int offset, int length);
}
internal class Crc32C.Native32 : NativeProxy {
    public virtual UInt32 Append(UInt32 crc, Byte* input, int length);
    private static UInt32 crc32c_append(UInt32 crc, Byte* input, UInt32 length);
}
internal class Crc32C.Native64 : NativeProxy {
    public virtual UInt32 Append(UInt32 crc, Byte* input, int length);
    private static UInt32 crc32c_append(UInt32 crc, Byte* input, ulong length);
}
internal abstract class Crc32C.NativeProxy : object {
    public static NativeProxy Instance;
    protected NativeProxy(string name);
    private static NativeProxy();
    public abstract virtual UInt32 Append(UInt32 crc, Byte* input, int length);
    private static IntPtr LoadLibrary(string lpFileName);
}
internal class Crc32C.Utils : object {
    public static bool BuffersEqual(Byte[] left, Byte[] right);
    public static bool BuffersEqual(Byte[] left, Byte[] right, int count);
}
