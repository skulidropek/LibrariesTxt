[ExtensionAttribute]
public static class CSharpFunctionalExtensions.AsyncResultExtensionsBothOperands : object {
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsBothOperands/<Bind>d__0`3")]
[ExtensionAttribute]
public static Task`1<Result`2<K, E>> Bind(Task`1<Result`2<T, E>> resultTask, Func`2<T, Task`1<Result`2<K, E>>> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsBothOperands/<Bind>d__1`2")]
[ExtensionAttribute]
public static Task`1<Result`1<K>> Bind(Task`1<Result`1<T>> resultTask, Func`2<T, Task`1<Result`1<K>>> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsBothOperands/<Bind>d__2`1")]
[ExtensionAttribute]
public static Task`1<Result`1<K>> Bind(Task`1<Result> resultTask, Func`1<Task`1<Result`1<K>>> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsBothOperands/<Bind>d__3`1")]
[ExtensionAttribute]
public static Task`1<Result> Bind(Task`1<Result`1<T>> resultTask, Func`2<T, Task`1<Result>> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsBothOperands/<Bind>d__4")]
[ExtensionAttribute]
public static Task`1<Result> Bind(Task`1<Result> resultTask, Func`1<Task`1<Result>> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsBothOperands/<Bind>d__5`1")]
[ExtensionAttribute]
public static Task`1<UnitResult`1<E>> Bind(Task`1<UnitResult`1<E>> resultTask, Func`1<Task`1<UnitResult`1<E>>> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsBothOperands/<Bind>d__6`2")]
[ExtensionAttribute]
public static Task`1<Result`2<T, E>> Bind(Task`1<UnitResult`1<E>> resultTask, Func`1<Task`1<Result`2<T, E>>> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsBothOperands/<Bind>d__7`2")]
[ExtensionAttribute]
public static Task`1<UnitResult`1<E>> Bind(Task`1<Result`2<T, E>> resultTask, Func`2<T, Task`1<UnitResult`1<E>>> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsBothOperands/<BindTry>d__8")]
[ExtensionAttribute]
public static Task`1<Result> BindTry(Task`1<Result> resultTask, Func`1<Task`1<Result>> func, Func`2<Exception, string> errorHandler);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsBothOperands/<BindTry>d__9`1")]
[ExtensionAttribute]
public static Task`1<Result`1<K>> BindTry(Task`1<Result> resultTask, Func`1<Task`1<Result`1<K>>> func, Func`2<Exception, string> errorHandler);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsBothOperands/<BindTry>d__10`1")]
[ExtensionAttribute]
public static Task`1<Result> BindTry(Task`1<Result`1<T>> resultTask, Func`2<T, Task`1<Result>> func, Func`2<Exception, string> errorHandler);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsBothOperands/<BindTry>d__11`2")]
[ExtensionAttribute]
public static Task`1<Result`1<K>> BindTry(Task`1<Result`1<T>> resultTask, Func`2<T, Task`1<Result`1<K>>> func, Func`2<Exception, string> errorHandler);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsBothOperands/<BindTry>d__12`2")]
[ExtensionAttribute]
public static Task`1<UnitResult`1<E>> BindTry(Task`1<Result`2<T, E>> resultTask, Func`2<T, Task`1<UnitResult`1<E>>> func, Func`2<Exception, E> errorHandler);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsBothOperands/<BindTry>d__13`3")]
[ExtensionAttribute]
public static Task`1<Result`2<K, E>> BindTry(Task`1<Result`2<T, E>> resultTask, Func`2<T, Task`1<Result`2<K, E>>> func, Func`2<Exception, E> errorHandler);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsBothOperands/<BindTry>d__14`2")]
[ExtensionAttribute]
public static Task`1<Result`2<T, E>> BindTry(Task`1<UnitResult`1<E>> resultTask, Func`1<Task`1<Result`2<T, E>>> func, Func`2<Exception, E> errorHandler);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsBothOperands/<BindTry>d__15`1")]
[ExtensionAttribute]
public static Task`1<UnitResult`1<E>> BindTry(Task`1<UnitResult`1<E>> resultTask, Func`1<Task`1<UnitResult`1<E>>> func, Func`2<Exception, E> errorHandler);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsBothOperands/<Check>d__16`1")]
[ExtensionAttribute]
public static Task`1<Result`1<T>> Check(Task`1<Result`1<T>> resultTask, Func`2<T, Task`1<Result>> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsBothOperands/<Check>d__17`2")]
[ExtensionAttribute]
public static Task`1<Result`1<T>> Check(Task`1<Result`1<T>> resultTask, Func`2<T, Task`1<Result`1<K>>> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsBothOperands/<Check>d__18`3")]
[ExtensionAttribute]
public static Task`1<Result`2<T, E>> Check(Task`1<Result`2<T, E>> resultTask, Func`2<T, Task`1<Result`2<K, E>>> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsBothOperands/<Check>d__19`2")]
[ExtensionAttribute]
public static Task`1<Result`2<T, E>> Check(Task`1<Result`2<T, E>> resultTask, Func`2<T, Task`1<UnitResult`1<E>>> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsBothOperands/<Check>d__20`1")]
[ExtensionAttribute]
public static Task`1<UnitResult`1<E>> Check(Task`1<UnitResult`1<E>> resultTask, Func`1<Task`1<UnitResult`1<E>>> func);
    [ExtensionAttribute]
public static Task`1<Result`1<T>> CheckIf(Task`1<Result`1<T>> resultTask, bool condition, Func`2<T, Task`1<Result>> func);
    [ExtensionAttribute]
public static Task`1<Result`1<T>> CheckIf(Task`1<Result`1<T>> resultTask, bool condition, Func`2<T, Task`1<Result`1<K>>> func);
    [ExtensionAttribute]
public static Task`1<Result`2<T, E>> CheckIf(Task`1<Result`2<T, E>> resultTask, bool condition, Func`2<T, Task`1<Result`2<K, E>>> func);
    [ExtensionAttribute]
public static Task`1<Result`2<T, E>> CheckIf(Task`1<Result`2<T, E>> resultTask, bool condition, Func`2<T, Task`1<UnitResult`1<E>>> func);
    [ExtensionAttribute]
public static Task`1<UnitResult`1<E>> CheckIf(Task`1<UnitResult`1<E>> resultTask, bool condition, Func`1<Task`1<UnitResult`1<E>>> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsBothOperands/<CheckIf>d__26`1")]
[ExtensionAttribute]
public static Task`1<Result`1<T>> CheckIf(Task`1<Result`1<T>> resultTask, Func`2<T, bool> predicate, Func`2<T, Task`1<Result>> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsBothOperands/<CheckIf>d__27`2")]
[ExtensionAttribute]
public static Task`1<Result`1<T>> CheckIf(Task`1<Result`1<T>> resultTask, Func`2<T, bool> predicate, Func`2<T, Task`1<Result`1<K>>> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsBothOperands/<CheckIf>d__28`3")]
[ExtensionAttribute]
public static Task`1<Result`2<T, E>> CheckIf(Task`1<Result`2<T, E>> resultTask, Func`2<T, bool> predicate, Func`2<T, Task`1<Result`2<K, E>>> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsBothOperands/<CheckIf>d__29`2")]
[ExtensionAttribute]
public static Task`1<Result`2<T, E>> CheckIf(Task`1<Result`2<T, E>> resultTask, Func`2<T, bool> predicate, Func`2<T, Task`1<UnitResult`1<E>>> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsBothOperands/<CheckIf>d__30`1")]
[ExtensionAttribute]
public static Task`1<UnitResult`1<E>> CheckIf(Task`1<UnitResult`1<E>> resultTask, Func`1<bool> predicate, Func`1<Task`1<UnitResult`1<E>>> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsBothOperands/<Ensure>d__31`1")]
[ExtensionAttribute]
public static Task`1<Result`1<T>> Ensure(Task`1<Result`1<T>> resultTask, Func`2<T, Task`1<bool>> predicate, string errorMessage);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsBothOperands/<Ensure>d__32`2")]
[ExtensionAttribute]
public static Task`1<Result`2<T, E>> Ensure(Task`1<Result`2<T, E>> resultTask, Func`2<T, Task`1<bool>> predicate, E error);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsBothOperands/<Ensure>d__33`2")]
[ExtensionAttribute]
public static Task`1<Result`2<T, E>> Ensure(Task`1<Result`2<T, E>> resultTask, Func`2<T, Task`1<bool>> predicate, Func`2<T, E> errorPredicate);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsBothOperands/<Ensure>d__34`2")]
[ExtensionAttribute]
public static Task`1<Result`2<T, E>> Ensure(Task`1<Result`2<T, E>> resultTask, Func`2<T, Task`1<bool>> predicate, Func`2<T, Task`1<E>> errorPredicate);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsBothOperands/<Ensure>d__35`1")]
[ExtensionAttribute]
public static Task`1<Result`1<T>> Ensure(Task`1<Result`1<T>> resultTask, Func`2<T, Task`1<bool>> predicate, Func`2<T, string> errorPredicate);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsBothOperands/<Ensure>d__36`1")]
[ExtensionAttribute]
public static Task`1<Result`1<T>> Ensure(Task`1<Result`1<T>> resultTask, Func`2<T, Task`1<bool>> predicate, Func`2<T, Task`1<string>> errorPredicate);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsBothOperands/<Ensure>d__37")]
[ExtensionAttribute]
public static Task`1<Result> Ensure(Task`1<Result> resultTask, Func`1<Task`1<bool>> predicate, string errorMessage);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsBothOperands/<Ensure>d__38")]
[ExtensionAttribute]
public static Task`1<Result> Ensure(Task`1<Result> resultTask, Func`1<Task`1<Result>> predicate);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsBothOperands/<Ensure>d__39`1")]
[ExtensionAttribute]
public static Task`1<Result`1<T>> Ensure(Task`1<Result`1<T>> resultTask, Func`1<Task`1<Result>> predicate);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsBothOperands/<Ensure>d__40`1")]
[ExtensionAttribute]
public static Task`1<Result> Ensure(Task`1<Result> resultTask, Func`1<Task`1<Result`1<T>>> predicate);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsBothOperands/<Ensure>d__41`1")]
[ExtensionAttribute]
public static Task`1<Result`1<T>> Ensure(Task`1<Result`1<T>> resultTask, Func`1<Task`1<Result`1<T>>> predicate);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsBothOperands/<Ensure>d__42`1")]
[ExtensionAttribute]
public static Task`1<Result`1<T>> Ensure(Task`1<Result`1<T>> resultTask, Func`2<T, Task`1<Result>> predicate);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsBothOperands/<Ensure>d__43`1")]
[ExtensionAttribute]
public static Task`1<Result`1<T>> Ensure(Task`1<Result`1<T>> resultTask, Func`2<T, Task`1<Result`1<T>>> predicate);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsBothOperands/<Finally>d__44`1")]
[ExtensionAttribute]
public static Task`1<T> Finally(Task`1<Result> resultTask, Func`2<Result, Task`1<T>> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsBothOperands/<Finally>d__45`2")]
[ExtensionAttribute]
public static Task`1<K> Finally(Task`1<Result`1<T>> resultTask, Func`2<Result`1<T>, Task`1<K>> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsBothOperands/<Finally>d__46`2")]
[ExtensionAttribute]
public static Task`1<K> Finally(Task`1<UnitResult`1<E>> resultTask, Func`2<UnitResult`1<E>, Task`1<K>> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsBothOperands/<Finally>d__47`3")]
[ExtensionAttribute]
public static Task`1<K> Finally(Task`1<Result`2<T, E>> resultTask, Func`2<Result`2<T, E>, Task`1<K>> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsBothOperands/<Map>d__48`3")]
[ExtensionAttribute]
public static Task`1<Result`2<K, E>> Map(Task`1<Result`2<T, E>> resultTask, Func`2<T, Task`1<K>> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsBothOperands/<Map>d__49`2")]
[ExtensionAttribute]
public static Task`1<Result`2<K, E>> Map(Task`1<UnitResult`1<E>> resultTask, Func`1<Task`1<K>> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsBothOperands/<Map>d__50`2")]
[ExtensionAttribute]
public static Task`1<Result`1<K>> Map(Task`1<Result`1<T>> resultTask, Func`2<T, Task`1<K>> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsBothOperands/<Map>d__51`1")]
[ExtensionAttribute]
public static Task`1<Result`1<K>> Map(Task`1<Result> resultTask, Func`1<Task`1<K>> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsBothOperands/<MapTry>d__52`3")]
[ExtensionAttribute]
public static Task`1<Result`2<K, E>> MapTry(Task`1<Result`2<T, E>> resultTask, Func`2<T, Task`1<K>> func, Func`2<Exception, E> errorHandler);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsBothOperands/<MapTry>d__53`2")]
[ExtensionAttribute]
public static Task`1<Result`2<K, E>> MapTry(Task`1<UnitResult`1<E>> resultTask, Func`1<Task`1<K>> func, Func`2<Exception, E> errorHandler);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsBothOperands/<MapTry>d__54`2")]
[ExtensionAttribute]
public static Task`1<Result`1<K>> MapTry(Task`1<Result`1<T>> resultTask, Func`2<T, Task`1<K>> func, Func`2<Exception, string> errorHandler);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsBothOperands/<MapTry>d__55`1")]
[ExtensionAttribute]
public static Task`1<Result`1<K>> MapTry(Task`1<Result> resultTask, Func`1<Task`1<K>> func, Func`2<Exception, string> errorHandler);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsBothOperands/<OnFailureCompensate>d__56`2")]
[ExtensionAttribute]
public static Task`1<Result`2<T, E>> OnFailureCompensate(Task`1<Result`2<T, E>> resultTask, Func`1<Task`1<Result`2<T, E>>> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsBothOperands/<OnFailureCompensate>d__57`1")]
[ExtensionAttribute]
public static Task`1<Result`1<T>> OnFailureCompensate(Task`1<Result`1<T>> resultTask, Func`1<Task`1<Result`1<T>>> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsBothOperands/<OnFailureCompensate>d__58")]
[ExtensionAttribute]
public static Task`1<Result> OnFailureCompensate(Task`1<Result> resultTask, Func`1<Task`1<Result>> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsBothOperands/<OnFailureCompensate>d__59`1")]
[ExtensionAttribute]
public static Task`1<Result`1<T>> OnFailureCompensate(Task`1<Result`1<T>> resultTask, Func`2<string, Task`1<Result`1<T>>> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsBothOperands/<OnFailureCompensate>d__60`2")]
[ExtensionAttribute]
public static Task`1<Result`2<T, E>> OnFailureCompensate(Task`1<Result`2<T, E>> resultTask, Func`2<E, Task`1<Result`2<T, E>>> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsBothOperands/<OnFailureCompensate>d__61")]
[ExtensionAttribute]
public static Task`1<Result> OnFailureCompensate(Task`1<Result> resultTask, Func`2<string, Task`1<Result>> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsBothOperands/<Tap>d__62")]
[ExtensionAttribute]
public static Task`1<Result> Tap(Task`1<Result> resultTask, Func`1<Task> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsBothOperands/<Tap>d__63`1")]
[ExtensionAttribute]
public static Task`1<Result`1<T>> Tap(Task`1<Result`1<T>> resultTask, Func`1<Task> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsBothOperands/<Tap>d__64`1")]
[ExtensionAttribute]
public static Task`1<Result`1<T>> Tap(Task`1<Result`1<T>> resultTask, Func`2<T, Task> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsBothOperands/<Tap>d__65`1")]
[ExtensionAttribute]
public static Task`1<UnitResult`1<E>> Tap(Task`1<UnitResult`1<E>> resultTask, Func`1<Task> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsBothOperands/<Tap>d__66`2")]
[ExtensionAttribute]
public static Task`1<Result`2<T, E>> Tap(Task`1<Result`2<T, E>> resultTask, Func`1<Task> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsBothOperands/<Tap>d__67`2")]
[ExtensionAttribute]
public static Task`1<Result`2<T, E>> Tap(Task`1<Result`2<T, E>> resultTask, Func`2<T, Task> func);
    [ExtensionAttribute]
public static Task`1<Result> TapIf(Task`1<Result> resultTask, bool condition, Func`1<Task> func);
    [ExtensionAttribute]
public static Task`1<Result`1<T>> TapIf(Task`1<Result`1<T>> resultTask, bool condition, Func`1<Task> func);
    [ExtensionAttribute]
public static Task`1<Result`1<T>> TapIf(Task`1<Result`1<T>> resultTask, bool condition, Func`2<T, Task> func);
    [ExtensionAttribute]
public static Task`1<Result`2<T, E>> TapIf(Task`1<Result`2<T, E>> resultTask, bool condition, Func`1<Task> func);
    [ExtensionAttribute]
public static Task`1<Result`2<T, E>> TapIf(Task`1<Result`2<T, E>> resultTask, bool condition, Func`2<T, Task> func);
    [ExtensionAttribute]
public static Task`1<UnitResult`1<E>> TapIf(Task`1<UnitResult`1<E>> resultTask, bool condition, Func`1<Task> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsBothOperands/<TapIf>d__74`1")]
[ExtensionAttribute]
public static Task`1<Result`1<T>> TapIf(Task`1<Result`1<T>> resultTask, Func`2<T, bool> predicate, Func`1<Task> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsBothOperands/<TapIf>d__75`1")]
[ExtensionAttribute]
public static Task`1<Result`1<T>> TapIf(Task`1<Result`1<T>> resultTask, Func`2<T, bool> predicate, Func`2<T, Task> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsBothOperands/<TapIf>d__76`2")]
[ExtensionAttribute]
public static Task`1<Result`2<T, E>> TapIf(Task`1<Result`2<T, E>> resultTask, Func`2<T, bool> predicate, Func`1<Task> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsBothOperands/<TapIf>d__77`2")]
[ExtensionAttribute]
public static Task`1<Result`2<T, E>> TapIf(Task`1<Result`2<T, E>> resultTask, Func`2<T, bool> predicate, Func`2<T, Task> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsBothOperands/<TapIf>d__78`1")]
[ExtensionAttribute]
public static Task`1<UnitResult`1<E>> TapIf(Task`1<UnitResult`1<E>> resultTask, Func`1<bool> predicate, Func`1<Task> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsBothOperands/<TapIf>d__79`2")]
[ExtensionAttribute]
public static Task`1<Result`2<T, E>> TapIf(Task`1<Result`2<T, E>> resultTask, Func`1<Task`1<bool>> predicate, Func`2<T, Task> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsBothOperands/<TapIf>d__80`2")]
[ExtensionAttribute]
public static Task`1<Result`2<T, E>> TapIf(Task`1<Result`2<T, E>> resultTask, Func`2<T, Task`1<bool>> predicate, Func`2<T, Task> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsBothOperands/<TapIfTry>d__81")]
[ExtensionAttribute]
public static Task`1<Result> TapIfTry(Task`1<Result> resultTask, bool condition, Func`1<Task> func, Func`2<Exception, string> errorHandler);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsBothOperands/<TapIfTry>d__82`1")]
[ExtensionAttribute]
public static Task`1<Result`1<T>> TapIfTry(Task`1<Result`1<T>> resultTask, bool condition, Func`1<Task> func, Func`2<Exception, string> errorHandler);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsBothOperands/<TapIfTry>d__83`1")]
[ExtensionAttribute]
public static Task`1<Result`1<T>> TapIfTry(Task`1<Result`1<T>> resultTask, bool condition, Func`2<T, Task> func, Func`2<Exception, string> errorHandler);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsBothOperands/<TapIfTry>d__84`1")]
[ExtensionAttribute]
public static Task`1<UnitResult`1<E>> TapIfTry(Task`1<UnitResult`1<E>> resultTask, bool condition, Func`1<Task> func, Func`2<Exception, E> errorHandler);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsBothOperands/<TapIfTry>d__85`2")]
[ExtensionAttribute]
public static Task`1<Result`2<T, E>> TapIfTry(Task`1<Result`2<T, E>> resultTask, bool condition, Func`1<Task> func, Func`2<Exception, E> errorHandler);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsBothOperands/<TapIfTry>d__86`2")]
[ExtensionAttribute]
public static Task`1<Result`2<T, E>> TapIfTry(Task`1<Result`2<T, E>> resultTask, bool condition, Func`2<T, Task> func, Func`2<Exception, E> errorHandler);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsBothOperands/<TapIfTry>d__87`1")]
[ExtensionAttribute]
public static Task`1<Result`1<T>> TapIfTry(Task`1<Result`1<T>> resultTask, Func`2<T, bool> predicate, Func`1<Task> func, Func`2<Exception, string> errorHandler);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsBothOperands/<TapIfTry>d__88`1")]
[ExtensionAttribute]
public static Task`1<Result`1<T>> TapIfTry(Task`1<Result`1<T>> resultTask, Func`2<T, bool> predicate, Func`2<T, Task> func, Func`2<Exception, string> errorHandler);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsBothOperands/<TapIfTry>d__89`2")]
[ExtensionAttribute]
public static Task`1<Result`2<T, E>> TapIfTry(Task`1<Result`2<T, E>> resultTask, Func`2<T, bool> predicate, Func`1<Task> func, Func`2<Exception, E> errorHandler);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsBothOperands/<TapIfTry>d__90`2")]
[ExtensionAttribute]
public static Task`1<Result`2<T, E>> TapIfTry(Task`1<Result`2<T, E>> resultTask, Func`2<T, bool> predicate, Func`2<T, Task> func, Func`2<Exception, E> errorHandler);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsBothOperands/<TapTry>d__91")]
[ExtensionAttribute]
public static Task`1<Result> TapTry(Task`1<Result> resultTask, Func`1<Task> func, Func`2<Exception, string> errorHandler);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsBothOperands/<TapTry>d__92`1")]
[ExtensionAttribute]
public static Task`1<Result`1<T>> TapTry(Task`1<Result`1<T>> resultTask, Func`1<Task> func, Func`2<Exception, string> errorHandler);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsBothOperands/<TapTry>d__93`1")]
[ExtensionAttribute]
public static Task`1<Result`1<T>> TapTry(Task`1<Result`1<T>> resultTask, Func`2<T, Task> func, Func`2<Exception, string> errorHandler);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsBothOperands/<TapTry>d__94`1")]
[ExtensionAttribute]
public static Task`1<UnitResult`1<E>> TapTry(Task`1<UnitResult`1<E>> resultTask, Func`1<Task> func, Func`2<Exception, E> errorHandler);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsBothOperands/<TapTry>d__95`2")]
[ExtensionAttribute]
public static Task`1<Result`2<T, E>> TapTry(Task`1<Result`2<T, E>> resultTask, Func`1<Task> func, Func`2<Exception, E> errorHandler);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsBothOperands/<TapTry>d__96`2")]
[ExtensionAttribute]
public static Task`1<Result`2<T, E>> TapTry(Task`1<Result`2<T, E>> resultTask, Func`2<T, Task> func, Func`2<Exception, E> errorHandler);
}
[ExtensionAttribute]
public static class CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand : object {
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand/<Bind>d__0`3")]
[ExtensionAttribute]
public static Task`1<Result`2<K, E>> Bind(Task`1<Result`2<T, E>> resultTask, Func`2<T, Result`2<K, E>> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand/<Bind>d__1`2")]
[ExtensionAttribute]
public static Task`1<Result`1<K>> Bind(Task`1<Result`1<T>> resultTask, Func`2<T, Result`1<K>> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand/<Bind>d__2`1")]
[ExtensionAttribute]
public static Task`1<Result`1<K>> Bind(Task`1<Result> resultTask, Func`1<Result`1<K>> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand/<Bind>d__3`1")]
[ExtensionAttribute]
public static Task`1<Result> Bind(Task`1<Result`1<T>> resultTask, Func`2<T, Result> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand/<Bind>d__4")]
[ExtensionAttribute]
public static Task`1<Result> Bind(Task`1<Result> resultTask, Func`1<Result> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand/<Bind>d__5`1")]
[ExtensionAttribute]
public static Task`1<UnitResult`1<E>> Bind(Task`1<UnitResult`1<E>> resultTask, Func`1<UnitResult`1<E>> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand/<Bind>d__6`2")]
[ExtensionAttribute]
public static Task`1<Result`2<T, E>> Bind(Task`1<UnitResult`1<E>> resultTask, Func`1<Result`2<T, E>> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand/<Bind>d__7`2")]
[ExtensionAttribute]
public static Task`1<UnitResult`1<E>> Bind(Task`1<Result`2<T, E>> resultTask, Func`2<T, UnitResult`1<E>> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand/<BindTry>d__8")]
[ExtensionAttribute]
public static Task`1<Result> BindTry(Task`1<Result> resultTask, Func`1<Result> func, Func`2<Exception, string> errorHandler);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand/<BindTry>d__9`1")]
[ExtensionAttribute]
public static Task`1<Result`1<K>> BindTry(Task`1<Result> resultTask, Func`1<Result`1<K>> func, Func`2<Exception, string> errorHandler);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand/<BindTry>d__10`1")]
[ExtensionAttribute]
public static Task`1<Result> BindTry(Task`1<Result`1<T>> resultTask, Func`2<T, Result> func, Func`2<Exception, string> errorHandler);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand/<BindTry>d__11`2")]
[ExtensionAttribute]
public static Task`1<Result`1<K>> BindTry(Task`1<Result`1<T>> resultTask, Func`2<T, Result`1<K>> func, Func`2<Exception, string> errorHandler);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand/<BindTry>d__12`2")]
[ExtensionAttribute]
public static Task`1<UnitResult`1<E>> BindTry(Task`1<Result`2<T, E>> resultTask, Func`2<T, UnitResult`1<E>> func, Func`2<Exception, E> errorHandler);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand/<BindTry>d__13`3")]
[ExtensionAttribute]
public static Task`1<Result`2<K, E>> BindTry(Task`1<Result`2<T, E>> resultTask, Func`2<T, Result`2<K, E>> func, Func`2<Exception, E> errorHandler);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand/<BindTry>d__14`1")]
[ExtensionAttribute]
public static Task`1<UnitResult`1<E>> BindTry(Task`1<UnitResult`1<E>> resultTask, Func`1<UnitResult`1<E>> func, Func`2<Exception, E> errorHandler);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand/<BindTry>d__15`2")]
[ExtensionAttribute]
public static Task`1<Result`2<T, E>> BindTry(Task`1<UnitResult`1<E>> resultTask, Func`1<Result`2<T, E>> func, Func`2<Exception, E> errorHandler);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand/<Check>d__16`1")]
[ExtensionAttribute]
public static Task`1<Result`1<T>> Check(Task`1<Result`1<T>> resultTask, Func`2<T, Result> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand/<Check>d__17`2")]
[ExtensionAttribute]
public static Task`1<Result`1<T>> Check(Task`1<Result`1<T>> resultTask, Func`2<T, Result`1<K>> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand/<Check>d__18`3")]
[ExtensionAttribute]
public static Task`1<Result`2<T, E>> Check(Task`1<Result`2<T, E>> resultTask, Func`2<T, Result`2<K, E>> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand/<Check>d__19`2")]
[ExtensionAttribute]
public static Task`1<Result`2<T, E>> Check(Task`1<Result`2<T, E>> resultTask, Func`2<T, UnitResult`1<E>> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand/<Check>d__20`1")]
[ExtensionAttribute]
public static Task`1<UnitResult`1<E>> Check(Task`1<UnitResult`1<E>> resultTask, Func`1<UnitResult`1<E>> func);
    [ExtensionAttribute]
public static Task`1<Result`1<T>> CheckIf(Task`1<Result`1<T>> resultTask, bool condition, Func`2<T, Result> func);
    [ExtensionAttribute]
public static Task`1<Result`1<T>> CheckIf(Task`1<Result`1<T>> resultTask, bool condition, Func`2<T, Result`1<K>> func);
    [ExtensionAttribute]
public static Task`1<Result`2<T, E>> CheckIf(Task`1<Result`2<T, E>> resultTask, bool condition, Func`2<T, Result`2<K, E>> func);
    [ExtensionAttribute]
public static Task`1<Result`2<T, E>> CheckIf(Task`1<Result`2<T, E>> resultTask, bool condition, Func`2<T, UnitResult`1<E>> func);
    [ExtensionAttribute]
public static Task`1<UnitResult`1<E>> CheckIf(Task`1<UnitResult`1<E>> resultTask, bool condition, Func`1<UnitResult`1<E>> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand/<CheckIf>d__26`1")]
[ExtensionAttribute]
public static Task`1<Result`1<T>> CheckIf(Task`1<Result`1<T>> resultTask, Func`2<T, bool> predicate, Func`2<T, Result> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand/<CheckIf>d__27`2")]
[ExtensionAttribute]
public static Task`1<Result`1<T>> CheckIf(Task`1<Result`1<T>> resultTask, Func`2<T, bool> predicate, Func`2<T, Result`1<K>> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand/<CheckIf>d__28`3")]
[ExtensionAttribute]
public static Task`1<Result`2<T, E>> CheckIf(Task`1<Result`2<T, E>> resultTask, Func`2<T, bool> predicate, Func`2<T, Result`2<K, E>> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand/<CheckIf>d__29`2")]
[ExtensionAttribute]
public static Task`1<Result`2<T, E>> CheckIf(Task`1<Result`2<T, E>> resultTask, Func`2<T, bool> predicate, Func`2<T, UnitResult`1<E>> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand/<CheckIf>d__30`1")]
[ExtensionAttribute]
public static Task`1<UnitResult`1<E>> CheckIf(Task`1<UnitResult`1<E>> resultTask, Func`1<bool> predicate, Func`1<UnitResult`1<E>> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand/<Combine>d__31")]
[ExtensionAttribute]
public static Task`1<Result> Combine(IEnumerable`1<Task`1<Result>> tasks, string errorMessageSeparator);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand/<Combine>d__32`2")]
[ExtensionAttribute]
public static Task`1<Result`2<IEnumerable`1<T>, E>> Combine(IEnumerable`1<Task`1<Result`2<T, E>>> tasks, Func`2<IEnumerable`1<E>, E> composerError);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand/<Combine>d__33`2")]
[ExtensionAttribute]
public static Task`1<Result`2<IEnumerable`1<T>, E>> Combine(IEnumerable`1<Task`1<Result`2<T, E>>> tasks);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand/<Combine>d__34`1")]
[ExtensionAttribute]
public static Task`1<Result`1<IEnumerable`1<T>>> Combine(IEnumerable`1<Task`1<Result`1<T>>> tasks, string errorMessageSeparator);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand/<Combine>d__35")]
[ExtensionAttribute]
public static Task`1<Result> Combine(Task`1<IEnumerable`1<Result>> task, string errorMessageSeparator);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand/<Combine>d__36`2")]
[ExtensionAttribute]
public static Task`1<Result`2<IEnumerable`1<T>, E>> Combine(Task`1<IEnumerable`1<Result`2<T, E>>> task, Func`2<IEnumerable`1<E>, E> composerError);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand/<Combine>d__37`2")]
[ExtensionAttribute]
public static Task`1<Result`2<IEnumerable`1<T>, E>> Combine(Task`1<IEnumerable`1<Result`2<T, E>>> task);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand/<Combine>d__38`1")]
[ExtensionAttribute]
public static Task`1<Result`1<IEnumerable`1<T>>> Combine(Task`1<IEnumerable`1<Result`1<T>>> task, string errorMessageSeparator);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand/<Combine>d__39")]
[ExtensionAttribute]
public static Task`1<Result> Combine(Task`1<IEnumerable`1<Task`1<Result>>> task, string errorMessageSeparator);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand/<Combine>d__40`2")]
[ExtensionAttribute]
public static Task`1<Result`2<IEnumerable`1<T>, E>> Combine(Task`1<IEnumerable`1<Task`1<Result`2<T, E>>>> task, Func`2<IEnumerable`1<E>, E> composerError);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand/<Combine>d__41`2")]
[ExtensionAttribute]
public static Task`1<Result`2<IEnumerable`1<T>, E>> Combine(Task`1<IEnumerable`1<Task`1<Result`2<T, E>>>> task);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand/<Combine>d__42`1")]
[ExtensionAttribute]
public static Task`1<Result`1<IEnumerable`1<T>>> Combine(Task`1<IEnumerable`1<Task`1<Result`1<T>>>> task, string errorMessageSeparator);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand/<Combine>d__43`3")]
[ExtensionAttribute]
public static Task`1<Result`2<K, E>> Combine(IEnumerable`1<Task`1<Result`2<T, E>>> tasks, Func`2<IEnumerable`1<T>, K> composer, Func`2<IEnumerable`1<E>, E> composerError);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand/<Combine>d__44`3")]
[ExtensionAttribute]
public static Task`1<Result`2<K, E>> Combine(IEnumerable`1<Task`1<Result`2<T, E>>> tasks, Func`2<IEnumerable`1<T>, K> composer);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand/<Combine>d__45`2")]
[ExtensionAttribute]
public static Task`1<Result`1<K>> Combine(IEnumerable`1<Task`1<Result`1<T>>> tasks, Func`2<IEnumerable`1<T>, K> composer, string errorMessageSeparator);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand/<Combine>d__46`3")]
[ExtensionAttribute]
public static Task`1<Result`2<K, E>> Combine(Task`1<IEnumerable`1<Task`1<Result`2<T, E>>>> task, Func`2<IEnumerable`1<T>, K> composer, Func`2<IEnumerable`1<E>, E> composerError);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand/<Combine>d__47`3")]
[ExtensionAttribute]
public static Task`1<Result`2<K, E>> Combine(Task`1<IEnumerable`1<Task`1<Result`2<T, E>>>> task, Func`2<IEnumerable`1<T>, K> composer);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand/<Combine>d__48`2")]
[ExtensionAttribute]
public static Task`1<Result`1<K>> Combine(Task`1<IEnumerable`1<Task`1<Result`1<T>>>> task, Func`2<IEnumerable`1<T>, K> composer, string errorMessageSeparator);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand/<CombineInOrder>d__49")]
[ExtensionAttribute]
public static Task`1<Result> CombineInOrder(IEnumerable`1<Task`1<Result>> tasks, string errorMessageSeparator);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand/<CombineInOrder>d__50`2")]
[ExtensionAttribute]
public static Task`1<Result`2<IEnumerable`1<T>, E>> CombineInOrder(IEnumerable`1<Task`1<Result`2<T, E>>> tasks, Func`2<IEnumerable`1<E>, E> composerError);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand/<CombineInOrder>d__51`2")]
[ExtensionAttribute]
public static Task`1<Result`2<IEnumerable`1<T>, E>> CombineInOrder(IEnumerable`1<Task`1<Result`2<T, E>>> tasks);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand/<CombineInOrder>d__52`1")]
[ExtensionAttribute]
public static Task`1<Result`1<IEnumerable`1<T>>> CombineInOrder(IEnumerable`1<Task`1<Result`1<T>>> tasks, string errorMessageSeparator);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand/<CombineInOrder>d__53")]
[ExtensionAttribute]
public static Task`1<Result> CombineInOrder(Task`1<IEnumerable`1<Task`1<Result>>> task, string errorMessageSeparator);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand/<CombineInOrder>d__54`2")]
[ExtensionAttribute]
public static Task`1<Result`2<IEnumerable`1<T>, E>> CombineInOrder(Task`1<IEnumerable`1<Task`1<Result`2<T, E>>>> task, Func`2<IEnumerable`1<E>, E> composerError);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand/<CombineInOrder>d__55`2")]
[ExtensionAttribute]
public static Task`1<Result`2<IEnumerable`1<T>, E>> CombineInOrder(Task`1<IEnumerable`1<Task`1<Result`2<T, E>>>> task);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand/<CombineInOrder>d__56`1")]
[ExtensionAttribute]
public static Task`1<Result`1<IEnumerable`1<T>>> CombineInOrder(Task`1<IEnumerable`1<Task`1<Result`1<T>>>> task, string errorMessageSeparator);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand/<CombineInOrder>d__57`3")]
[ExtensionAttribute]
public static Task`1<Result`2<K, E>> CombineInOrder(IEnumerable`1<Task`1<Result`2<T, E>>> tasks, Func`2<IEnumerable`1<T>, K> composer, Func`2<IEnumerable`1<E>, E> composerError);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand/<CombineInOrder>d__58`3")]
[ExtensionAttribute]
public static Task`1<Result`2<K, E>> CombineInOrder(IEnumerable`1<Task`1<Result`2<T, E>>> tasks, Func`2<IEnumerable`1<T>, K> composer);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand/<CombineInOrder>d__59`2")]
[ExtensionAttribute]
public static Task`1<Result`1<K>> CombineInOrder(IEnumerable`1<Task`1<Result`1<T>>> tasks, Func`2<IEnumerable`1<T>, K> composer, string errorMessageSeparator);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand/<CombineInOrder>d__60`3")]
[ExtensionAttribute]
public static Task`1<Result`2<K, E>> CombineInOrder(Task`1<IEnumerable`1<Task`1<Result`2<T, E>>>> task, Func`2<IEnumerable`1<T>, K> composer, Func`2<IEnumerable`1<E>, E> composerError);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand/<CombineInOrder>d__61`3")]
[ExtensionAttribute]
public static Task`1<Result`2<K, E>> CombineInOrder(Task`1<IEnumerable`1<Task`1<Result`2<T, E>>>> task, Func`2<IEnumerable`1<T>, K> composer);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand/<CombineInOrder>d__62`2")]
[ExtensionAttribute]
public static Task`1<Result`1<K>> CombineInOrder(Task`1<IEnumerable`1<Task`1<Result`1<T>>>> task, Func`2<IEnumerable`1<T>, K> composer, string errorMessageSeparator);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand/<CompleteInOrder>d__63`1")]
public static Task`1<T[]> CompleteInOrder(IEnumerable`1<Task`1<T>> tasks);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand/<Ensure>d__64`1")]
[ExtensionAttribute]
public static Task`1<Result`1<T>> Ensure(Task`1<Result`1<T>> resultTask, Func`2<T, bool> predicate, string errorMessage);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand/<Ensure>d__65`2")]
[ExtensionAttribute]
public static Task`1<Result`2<T, E>> Ensure(Task`1<Result`2<T, E>> resultTask, Func`2<T, bool> predicate, E error);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand/<Ensure>d__66`2")]
[ExtensionAttribute]
public static Task`1<Result`2<T, E>> Ensure(Task`1<Result`2<T, E>> resultTask, Func`2<T, bool> predicate, Func`2<T, E> errorPredicate);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand/<Ensure>d__67`1")]
[ExtensionAttribute]
public static Task`1<Result`1<T>> Ensure(Task`1<Result`1<T>> resultTask, Func`2<T, bool> predicate, Func`2<T, string> errorPredicate);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand/<Ensure>d__68`1")]
[ExtensionAttribute]
public static Task`1<Result`1<T>> Ensure(Task`1<Result`1<T>> resultTask, Func`2<T, bool> predicate, Func`2<T, Task`1<string>> errorPredicate);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand/<Ensure>d__69")]
[ExtensionAttribute]
public static Task`1<Result> Ensure(Task`1<Result> resultTask, Func`1<bool> predicate, string errorMessage);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand/<Ensure>d__70")]
[ExtensionAttribute]
public static Task`1<Result> Ensure(Task`1<Result> resultTask, Func`1<Result> predicate);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand/<Ensure>d__71`1")]
[ExtensionAttribute]
public static Task`1<Result`1<T>> Ensure(Task`1<Result`1<T>> resultTask, Func`1<Result> predicate);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand/<Ensure>d__72`1")]
[ExtensionAttribute]
public static Task`1<Result> Ensure(Task`1<Result> resultTask, Func`1<Result`1<T>> predicate);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand/<Ensure>d__73`1")]
[ExtensionAttribute]
public static Task`1<Result`1<T>> Ensure(Task`1<Result`1<T>> resultTask, Func`1<Result`1<T>> predicate);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand/<Ensure>d__74`1")]
[ExtensionAttribute]
public static Task`1<Result`1<T>> Ensure(Task`1<Result`1<T>> resultTask, Func`2<T, Result> predicate);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand/<Ensure>d__75`1")]
[ExtensionAttribute]
public static Task`1<Result`1<T>> Ensure(Task`1<Result`1<T>> resultTask, Func`2<T, Result`1<T>> predicate);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand/<Finally>d__76`1")]
[ExtensionAttribute]
public static Task`1<T> Finally(Task`1<Result> resultTask, Func`2<Result, T> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand/<Finally>d__77`2")]
[ExtensionAttribute]
public static Task`1<K> Finally(Task`1<Result`1<T>> resultTask, Func`2<Result`1<T>, K> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand/<Finally>d__78`2")]
[ExtensionAttribute]
public static Task`1<K> Finally(Task`1<UnitResult`1<E>> resultTask, Func`2<UnitResult`1<E>, K> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand/<Finally>d__79`3")]
[ExtensionAttribute]
public static Task`1<K> Finally(Task`1<Result`2<T, E>> resultTask, Func`2<Result`2<T, E>, K> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand/<Map>d__80`3")]
[ExtensionAttribute]
public static Task`1<Result`2<K, E>> Map(Task`1<Result`2<T, E>> resultTask, Func`2<T, K> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand/<Map>d__81`2")]
[ExtensionAttribute]
public static Task`1<Result`2<K, E>> Map(Task`1<UnitResult`1<E>> resultTask, Func`1<K> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand/<Map>d__82`2")]
[ExtensionAttribute]
public static Task`1<Result`1<K>> Map(Task`1<Result`1<T>> resultTask, Func`2<T, K> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand/<Map>d__83`1")]
[ExtensionAttribute]
public static Task`1<Result`1<K>> Map(Task`1<Result> resultTask, Func`1<K> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand/<MapTry>d__84`3")]
[ExtensionAttribute]
public static Task`1<Result`2<K, E>> MapTry(Task`1<Result`2<T, E>> resultTask, Func`2<T, K> func, Func`2<Exception, E> errorHandler);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand/<MapTry>d__85`2")]
[ExtensionAttribute]
public static Task`1<Result`2<K, E>> MapTry(Task`1<UnitResult`1<E>> resultTask, Func`1<K> func, Func`2<Exception, E> errorHandler);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand/<MapTry>d__86`2")]
[ExtensionAttribute]
public static Task`1<Result`1<K>> MapTry(Task`1<Result`1<T>> resultTask, Func`2<T, K> func, Func`2<Exception, string> errorHandler);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand/<MapTry>d__87`1")]
[ExtensionAttribute]
public static Task`1<Result`1<K>> MapTry(Task`1<Result> resultTask, Func`1<K> func, Func`2<Exception, string> errorHandler);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand/<Match>d__88`3")]
[ExtensionAttribute]
public static Task`1<K> Match(Task`1<Result`2<T, E>> resultTask, Func`2<T, Task`1<K>> onSuccess, Func`2<E, Task`1<K>> onFailure);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand/<Match>d__89`2")]
[ExtensionAttribute]
public static Task`1<K> Match(Task`1<Result`1<T>> resultTask, Func`2<T, Task`1<K>> onSuccess, Func`2<string, Task`1<K>> onFailure);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand/<Match>d__90`1")]
[ExtensionAttribute]
public static Task`1<T> Match(Task`1<Result> resultTask, Func`1<Task`1<T>> onSuccess, Func`2<string, Task`1<T>> onFailure);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand/<Match>d__91`2")]
[ExtensionAttribute]
public static Task`1<K> Match(Task`1<UnitResult`1<E>> resultTask, Func`1<Task`1<K>> onSuccess, Func`2<E, Task`1<K>> onFailure);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand/<Match>d__92`2")]
[ExtensionAttribute]
public static Task Match(Task`1<Result`2<T, E>> resultTask, Func`2<T, Task> onSuccess, Func`2<E, Task> onFailure);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand/<Match>d__93`1")]
[ExtensionAttribute]
public static Task Match(Task`1<UnitResult`1<E>> resultTask, Func`1<Task> onSuccess, Func`2<E, Task> onFailure);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand/<Match>d__94`1")]
[ExtensionAttribute]
public static Task Match(Task`1<Result`1<T>> resultTask, Func`2<T, Task> onSuccess, Func`2<string, Task> onFailure);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand/<Match>d__95")]
[ExtensionAttribute]
public static Task Match(Task`1<Result> resultTask, Func`1<Task> onSuccess, Func`2<string, Task> onFailure);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand/<Match>d__96`3")]
[ExtensionAttribute]
public static Task`1<K> Match(Task`1<Result`2<T, E>> resultTask, Func`2<T, K> onSuccess, Func`2<E, K> onFailure);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand/<Match>d__97`2")]
[ExtensionAttribute]
public static Task`1<K> Match(Task`1<Result`1<T>> resultTask, Func`2<T, K> onSuccess, Func`2<string, K> onFailure);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand/<Match>d__98`1")]
[ExtensionAttribute]
public static Task`1<T> Match(Task`1<Result> resultTask, Func`1<T> onSuccess, Func`2<string, T> onFailure);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand/<Match>d__99`2")]
[ExtensionAttribute]
public static Task`1<K> Match(Task`1<UnitResult`1<E>> resultTask, Func`1<K> onSuccess, Func`2<E, K> onFailure);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand/<Match>d__100`2")]
[ExtensionAttribute]
public static Task Match(Task`1<Result`2<T, E>> resultTask, Action`1<T> onSuccess, Action`1<E> onFailure);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand/<Match>d__101`1")]
[ExtensionAttribute]
public static Task Match(Task`1<UnitResult`1<E>> resultTask, Action onSuccess, Action`1<E> onFailure);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand/<Match>d__102`1")]
[ExtensionAttribute]
public static Task Match(Task`1<Result`1<T>> resultTask, Action`1<T> onSuccess, Action`1<string> onFailure);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand/<Match>d__103")]
[ExtensionAttribute]
public static Task Match(Task`1<Result> resultTask, Action onSuccess, Action`1<string> onFailure);
    [ExtensionAttribute]
public static Task`1<K> Match(Result`2<T, E> result, Func`2<T, Task`1<K>> onSuccess, Func`2<E, Task`1<K>> onFailure);
    [ExtensionAttribute]
public static Task`1<K> Match(Result`1<T> result, Func`2<T, Task`1<K>> onSuccess, Func`2<string, Task`1<K>> onFailure);
    [ExtensionAttribute]
public static Task`1<T> Match(Result result, Func`1<Task`1<T>> onSuccess, Func`2<string, Task`1<T>> onFailure);
    [ExtensionAttribute]
public static Task`1<K> Match(UnitResult`1<E> result, Func`1<Task`1<K>> onSuccess, Func`2<E, Task`1<K>> onFailure);
    [ExtensionAttribute]
public static Task Match(Result`2<T, E> result, Func`2<T, Task> onSuccess, Func`2<E, Task> onFailure);
    [ExtensionAttribute]
public static Task Match(UnitResult`1<E> result, Func`1<Task> onSuccess, Func`2<E, Task> onFailure);
    [ExtensionAttribute]
public static Task Match(Result`1<T> result, Func`2<T, Task> onSuccess, Func`2<string, Task> onFailure);
    [ExtensionAttribute]
public static Task Match(Result result, Func`1<Task> onSuccess, Func`2<string, Task> onFailure);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand/<OnFailureCompensate>d__112`2")]
[ExtensionAttribute]
public static Task`1<Result`2<T, E>> OnFailureCompensate(Task`1<Result`2<T, E>> resultTask, Func`1<Result`2<T, E>> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand/<OnFailureCompensate>d__113`1")]
[ExtensionAttribute]
public static Task`1<Result`1<T>> OnFailureCompensate(Task`1<Result`1<T>> resultTask, Func`1<Result`1<T>> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand/<OnFailureCompensate>d__114")]
[ExtensionAttribute]
public static Task`1<Result> OnFailureCompensate(Task`1<Result> resultTask, Func`1<Result> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand/<OnFailureCompensate>d__115`1")]
[ExtensionAttribute]
public static Task`1<Result`1<T>> OnFailureCompensate(Task`1<Result`1<T>> resultTask, Func`2<string, Result`1<T>> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand/<OnFailureCompensate>d__116`2")]
[ExtensionAttribute]
public static Task`1<Result`2<T, E>> OnFailureCompensate(Task`1<Result`2<T, E>> resultTask, Func`2<E, Result`2<T, E>> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand/<OnFailureCompensate>d__117")]
[ExtensionAttribute]
public static Task`1<Result> OnFailureCompensate(Task`1<Result> resultTask, Func`2<string, Result> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand/<Tap>d__118")]
[ExtensionAttribute]
public static Task`1<Result> Tap(Task`1<Result> resultTask, Action action);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand/<Tap>d__119`1")]
[ExtensionAttribute]
public static Task`1<Result`1<T>> Tap(Task`1<Result`1<T>> resultTask, Action action);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand/<Tap>d__120`1")]
[ExtensionAttribute]
public static Task`1<Result`1<T>> Tap(Task`1<Result`1<T>> resultTask, Action`1<T> action);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand/<Tap>d__121`1")]
[ExtensionAttribute]
public static Task`1<UnitResult`1<E>> Tap(Task`1<UnitResult`1<E>> resultTask, Action action);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand/<Tap>d__122`2")]
[ExtensionAttribute]
public static Task`1<Result`2<T, E>> Tap(Task`1<Result`2<T, E>> resultTask, Action action);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand/<Tap>d__123`2")]
[ExtensionAttribute]
public static Task`1<Result`2<T, E>> Tap(Task`1<Result`2<T, E>> resultTask, Action`1<T> action);
    [ExtensionAttribute]
public static Task`1<Result> TapIf(Task`1<Result> resultTask, bool condition, Action action);
    [ExtensionAttribute]
public static Task`1<Result`1<T>> TapIf(Task`1<Result`1<T>> resultTask, bool condition, Action action);
    [ExtensionAttribute]
public static Task`1<Result`1<T>> TapIf(Task`1<Result`1<T>> resultTask, bool condition, Action`1<T> action);
    [ExtensionAttribute]
public static Task`1<Result`2<T, E>> TapIf(Task`1<Result`2<T, E>> resultTask, bool condition, Action action);
    [ExtensionAttribute]
public static Task`1<Result`2<T, E>> TapIf(Task`1<Result`2<T, E>> resultTask, bool condition, Action`1<T> action);
    [ExtensionAttribute]
public static Task`1<UnitResult`1<E>> TapIf(Task`1<UnitResult`1<E>> resultTask, bool condition, Action action);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand/<TapIf>d__130")]
[ExtensionAttribute]
public static Task`1<Result> TapIf(Task`1<Result> resultTask, Func`1<bool> predicate, Action action);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand/<TapIf>d__131`1")]
[ExtensionAttribute]
public static Task`1<Result`1<T>> TapIf(Task`1<Result`1<T>> resultTask, Func`2<T, bool> predicate, Action action);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand/<TapIf>d__132`1")]
[ExtensionAttribute]
public static Task`1<Result`1<T>> TapIf(Task`1<Result`1<T>> resultTask, Func`2<T, bool> predicate, Action`1<T> action);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand/<TapIf>d__133`2")]
[ExtensionAttribute]
public static Task`1<Result`2<T, E>> TapIf(Task`1<Result`2<T, E>> resultTask, Func`2<T, bool> predicate, Action action);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand/<TapIf>d__134`2")]
[ExtensionAttribute]
public static Task`1<Result`2<T, E>> TapIf(Task`1<Result`2<T, E>> resultTask, Func`2<T, bool> predicate, Action`1<T> action);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand/<TapIf>d__135`1")]
[ExtensionAttribute]
public static Task`1<UnitResult`1<E>> TapIf(Task`1<UnitResult`1<E>> resultTask, Func`1<bool> predicate, Action action);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand/<TapIfTry>d__136")]
[ExtensionAttribute]
public static Task`1<Result> TapIfTry(Task`1<Result> resultTask, bool condition, Action action);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand/<TapIfTry>d__137`1")]
[ExtensionAttribute]
public static Task`1<Result`1<T>> TapIfTry(Task`1<Result`1<T>> resultTask, bool condition, Action action);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand/<TapIfTry>d__138`1")]
[ExtensionAttribute]
public static Task`1<Result`1<T>> TapIfTry(Task`1<Result`1<T>> resultTask, bool condition, Action`1<T> action);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand/<TapIfTry>d__139`1")]
[ExtensionAttribute]
public static Task`1<UnitResult`1<E>> TapIfTry(Task`1<UnitResult`1<E>> resultTask, bool condition, Action action, Func`2<Exception, E> errorHandler);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand/<TapIfTry>d__140`2")]
[ExtensionAttribute]
public static Task`1<Result`2<T, E>> TapIfTry(Task`1<Result`2<T, E>> resultTask, bool condition, Action action, Func`2<Exception, E> errorHandler);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand/<TapIfTry>d__141`2")]
[ExtensionAttribute]
public static Task`1<Result`2<T, E>> TapIfTry(Task`1<Result`2<T, E>> resultTask, bool condition, Action`1<T> action, Func`2<Exception, E> errorHandler);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand/<TapIfTry>d__142`1")]
[ExtensionAttribute]
public static Task`1<Result`1<T>> TapIfTry(Task`1<Result`1<T>> resultTask, Func`2<T, bool> predicate, Action action);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand/<TapIfTry>d__143`1")]
[ExtensionAttribute]
public static Task`1<Result`1<T>> TapIfTry(Task`1<Result`1<T>> resultTask, Func`2<T, bool> predicate, Action`1<T> action);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand/<TapIfTry>d__144`2")]
[ExtensionAttribute]
public static Task`1<Result`2<T, E>> TapIfTry(Task`1<Result`2<T, E>> resultTask, Func`2<T, bool> predicate, Action action, Func`2<Exception, E> errorHandler);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand/<TapIfTry>d__145`2")]
[ExtensionAttribute]
public static Task`1<Result`2<T, E>> TapIfTry(Task`1<Result`2<T, E>> resultTask, Func`2<T, bool> predicate, Action`1<T> action, Func`2<Exception, E> errorHandler);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand/<TapTry>d__146")]
[ExtensionAttribute]
public static Task`1<Result> TapTry(Task`1<Result> resultTask, Action action);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand/<TapTry>d__147`1")]
[ExtensionAttribute]
public static Task`1<Result`1<T>> TapTry(Task`1<Result`1<T>> resultTask, Action action);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand/<TapTry>d__148`1")]
[ExtensionAttribute]
public static Task`1<Result`1<T>> TapTry(Task`1<Result`1<T>> resultTask, Action`1<T> action);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand/<TapTry>d__149`1")]
[ExtensionAttribute]
public static Task`1<UnitResult`1<E>> TapTry(Task`1<UnitResult`1<E>> resultTask, Action action, Func`2<Exception, E> errorHandler);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand/<TapTry>d__150`2")]
[ExtensionAttribute]
public static Task`1<Result`2<T, E>> TapTry(Task`1<Result`2<T, E>> resultTask, Action action, Func`2<Exception, E> errorHandler);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsLeftOperand/<TapTry>d__151`2")]
[ExtensionAttribute]
public static Task`1<Result`2<T, E>> TapTry(Task`1<Result`2<T, E>> resultTask, Action`1<T> action, Func`2<Exception, E> errorHandler);
}
[ExtensionAttribute]
public static class CSharpFunctionalExtensions.AsyncResultExtensionsRightOperand : object {
    [ExtensionAttribute]
public static Task`1<Result`2<K, E>> Bind(Result`2<T, E> result, Func`2<T, Task`1<Result`2<K, E>>> func);
    [ExtensionAttribute]
public static Task`1<Result`1<K>> Bind(Result`1<T> result, Func`2<T, Task`1<Result`1<K>>> func);
    [ExtensionAttribute]
public static Task`1<Result`1<K>> Bind(Result result, Func`1<Task`1<Result`1<K>>> func);
    [ExtensionAttribute]
public static Task`1<Result> Bind(Result`1<T> result, Func`2<T, Task`1<Result>> func);
    [ExtensionAttribute]
public static Task`1<Result> Bind(Result result, Func`1<Task`1<Result>> func);
    [ExtensionAttribute]
public static Task`1<UnitResult`1<E>> Bind(UnitResult`1<E> result, Func`1<Task`1<UnitResult`1<E>>> func);
    [ExtensionAttribute]
public static Task`1<Result`2<T, E>> Bind(UnitResult`1<E> result, Func`1<Task`1<Result`2<T, E>>> func);
    [ExtensionAttribute]
public static Task`1<UnitResult`1<E>> Bind(Result`2<T, E> result, Func`2<T, Task`1<UnitResult`1<E>>> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsRightOperand/<BindTry>d__8`3")]
[ExtensionAttribute]
public static Task`1<Result`2<K, E>> BindTry(Result`2<T, E> result, Func`2<T, Task`1<Result`2<K, E>>> func, Func`2<Exception, E> errorHandler);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsRightOperand/<BindTry>d__9`2")]
[ExtensionAttribute]
public static Task`1<Result`1<K>> BindTry(Result`1<T> result, Func`2<T, Task`1<Result`1<K>>> func, Func`2<Exception, string> errorHandler);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsRightOperand/<BindTry>d__10`1")]
[ExtensionAttribute]
public static Task`1<Result`1<K>> BindTry(Result result, Func`1<Task`1<Result`1<K>>> func, Func`2<Exception, string> errorHandler);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsRightOperand/<BindTry>d__11`1")]
[ExtensionAttribute]
public static Task`1<Result> BindTry(Result`1<T> result, Func`2<T, Task`1<Result>> func, Func`2<Exception, string> errorHandler);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsRightOperand/<BindTry>d__12")]
[ExtensionAttribute]
public static Task`1<Result> BindTry(Result result, Func`1<Task`1<Result>> func, Func`2<Exception, string> errorHandler);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsRightOperand/<BindTry>d__13`1")]
[ExtensionAttribute]
public static Task`1<UnitResult`1<E>> BindTry(UnitResult`1<E> result, Func`1<Task`1<UnitResult`1<E>>> func, Func`2<Exception, E> errorHandler);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsRightOperand/<BindTry>d__14`2")]
[ExtensionAttribute]
public static Task`1<Result`2<T, E>> BindTry(UnitResult`1<E> result, Func`1<Task`1<Result`2<T, E>>> func, Func`2<Exception, E> errorHandler);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsRightOperand/<BindTry>d__15`2")]
[ExtensionAttribute]
public static Task`1<UnitResult`1<E>> BindTry(Result`2<T, E> result, Func`2<T, Task`1<UnitResult`1<E>>> func, Func`2<Exception, E> errorHandler);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsRightOperand/<Check>d__16`1")]
[ExtensionAttribute]
public static Task`1<Result`1<T>> Check(Result`1<T> result, Func`2<T, Task`1<Result>> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsRightOperand/<Check>d__17`2")]
[ExtensionAttribute]
public static Task`1<Result`1<T>> Check(Result`1<T> result, Func`2<T, Task`1<Result`1<K>>> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsRightOperand/<Check>d__18`3")]
[ExtensionAttribute]
public static Task`1<Result`2<T, E>> Check(Result`2<T, E> result, Func`2<T, Task`1<Result`2<K, E>>> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsRightOperand/<Check>d__19`2")]
[ExtensionAttribute]
public static Task`1<Result`2<T, E>> Check(Result`2<T, E> result, Func`2<T, Task`1<UnitResult`1<E>>> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsRightOperand/<Check>d__20`1")]
[ExtensionAttribute]
public static Task`1<UnitResult`1<E>> Check(UnitResult`1<E> result, Func`1<Task`1<UnitResult`1<E>>> func);
    [ExtensionAttribute]
public static Task`1<Result`1<T>> CheckIf(Result`1<T> result, bool condition, Func`2<T, Task`1<Result>> func);
    [ExtensionAttribute]
public static Task`1<Result`1<T>> CheckIf(Result`1<T> result, bool condition, Func`2<T, Task`1<Result`1<K>>> func);
    [ExtensionAttribute]
public static Task`1<Result`2<T, E>> CheckIf(Result`2<T, E> result, bool condition, Func`2<T, Task`1<Result`2<K, E>>> func);
    [ExtensionAttribute]
public static Task`1<Result`2<T, E>> CheckIf(Result`2<T, E> result, bool condition, Func`2<T, Task`1<UnitResult`1<E>>> func);
    [ExtensionAttribute]
public static Task`1<UnitResult`1<E>> CheckIf(UnitResult`1<E> result, bool condition, Func`1<Task`1<UnitResult`1<E>>> func);
    [ExtensionAttribute]
public static Task`1<Result`1<T>> CheckIf(Result`1<T> result, Func`2<T, bool> predicate, Func`2<T, Task`1<Result>> func);
    [ExtensionAttribute]
public static Task`1<Result`1<T>> CheckIf(Result`1<T> result, Func`2<T, bool> predicate, Func`2<T, Task`1<Result`1<K>>> func);
    [ExtensionAttribute]
public static Task`1<Result`2<T, E>> CheckIf(Result`2<T, E> result, Func`2<T, bool> predicate, Func`2<T, Task`1<Result`2<K, E>>> func);
    [ExtensionAttribute]
public static Task`1<Result`2<T, E>> CheckIf(Result`2<T, E> result, Func`2<T, bool> predicate, Func`2<T, Task`1<UnitResult`1<E>>> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsRightOperand/<CheckIf>d__30`1")]
[ExtensionAttribute]
public static Task`1<UnitResult`1<E>> CheckIf(UnitResult`1<E> result, Func`1<bool> predicate, Func`1<Task`1<UnitResult`1<E>>> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsRightOperand/<Ensure>d__31`1")]
[ExtensionAttribute]
public static Task`1<Result`1<T>> Ensure(Result`1<T> result, Func`2<T, Task`1<bool>> predicate, string errorMessage);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsRightOperand/<Ensure>d__32`2")]
[ExtensionAttribute]
public static Task`1<Result`2<T, E>> Ensure(Result`2<T, E> result, Func`2<T, Task`1<bool>> predicate, E error);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsRightOperand/<Ensure>d__33`2")]
[ExtensionAttribute]
public static Task`1<Result`2<T, E>> Ensure(Result`2<T, E> result, Func`2<T, Task`1<bool>> predicate, Func`2<T, E> errorPredicate);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsRightOperand/<Ensure>d__34`2")]
[ExtensionAttribute]
public static Task`1<Result`2<T, E>> Ensure(Result`2<T, E> result, Func`2<T, Task`1<bool>> predicate, Func`2<T, Task`1<E>> errorPredicate);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsRightOperand/<Ensure>d__35`1")]
[ExtensionAttribute]
public static Task`1<Result`1<T>> Ensure(Result`1<T> result, Func`2<T, Task`1<bool>> predicate, Func`2<T, string> errorPredicate);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsRightOperand/<Ensure>d__36`1")]
[ExtensionAttribute]
public static Task`1<Result`1<T>> Ensure(Result`1<T> result, Func`2<T, Task`1<bool>> predicate, Func`2<T, Task`1<string>> errorPredicate);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsRightOperand/<Ensure>d__37")]
[ExtensionAttribute]
public static Task`1<Result> Ensure(Result result, Func`1<Task`1<bool>> predicate, string errorMessage);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsRightOperand/<Ensure>d__38")]
[ExtensionAttribute]
public static Task`1<Result> Ensure(Result result, Func`1<Task`1<Result>> predicate);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsRightOperand/<Ensure>d__39`1")]
[ExtensionAttribute]
public static Task`1<Result`1<T>> Ensure(Result`1<T> result, Func`1<Task`1<Result>> predicate);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsRightOperand/<Ensure>d__40`1")]
[ExtensionAttribute]
public static Task`1<Result> Ensure(Result result, Func`1<Task`1<Result`1<T>>> predicate);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsRightOperand/<Ensure>d__41`1")]
[ExtensionAttribute]
public static Task`1<Result`1<T>> Ensure(Result`1<T> result, Func`1<Task`1<Result`1<T>>> predicate);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsRightOperand/<Ensure>d__42`1")]
[ExtensionAttribute]
public static Task`1<Result`1<T>> Ensure(Result`1<T> result, Func`2<T, Task`1<Result>> predicate);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsRightOperand/<Ensure>d__43`1")]
[ExtensionAttribute]
public static Task`1<Result`1<T>> Ensure(Result`1<T> result, Func`2<T, Task`1<Result`1<T>>> predicate);
    [ExtensionAttribute]
public static Task`1<T> Finally(Result result, Func`2<Result, Task`1<T>> func);
    [ExtensionAttribute]
public static Task`1<K> Finally(Result`1<T> result, Func`2<Result`1<T>, Task`1<K>> func);
    [ExtensionAttribute]
public static Task`1<K> Finally(UnitResult`1<E> result, Func`2<UnitResult`1<E>, Task`1<K>> func);
    [ExtensionAttribute]
public static Task`1<K> Finally(Result`2<T, E> result, Func`2<Result`2<T, E>, Task`1<K>> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsRightOperand/<Map>d__48`3")]
[ExtensionAttribute]
public static Task`1<Result`2<K, E>> Map(Result`2<T, E> result, Func`2<T, Task`1<K>> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsRightOperand/<Map>d__49`2")]
[ExtensionAttribute]
public static Task`1<Result`2<K, E>> Map(UnitResult`1<E> result, Func`1<Task`1<K>> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsRightOperand/<Map>d__50`2")]
[ExtensionAttribute]
public static Task`1<Result`1<K>> Map(Result`1<T> result, Func`2<T, Task`1<K>> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsRightOperand/<Map>d__51`2")]
[ExtensionAttribute]
public static Task`1<Result`1<K>> Map(Result`1<T> result, Func`2<T, Task`1<Result`1<K>>> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsRightOperand/<Map>d__52`1")]
[ExtensionAttribute]
public static Task`1<Result`1<K>> Map(Result result, Func`1<Task`1<K>> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsRightOperand/<MapTry>d__53`3")]
[ExtensionAttribute]
public static Task`1<Result`2<K, E>> MapTry(Result`2<T, E> result, Func`2<T, Task`1<K>> func, Func`2<Exception, E> errorHandler);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsRightOperand/<MapTry>d__54`2")]
[ExtensionAttribute]
public static Task`1<Result`2<K, E>> MapTry(UnitResult`1<E> result, Func`1<Task`1<K>> func, Func`2<Exception, E> errorHandler);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsRightOperand/<MapTry>d__55`2")]
[ExtensionAttribute]
public static Task`1<Result`1<K>> MapTry(Result`1<T> result, Func`2<T, Task`1<K>> func, Func`2<Exception, string> errorHandler);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsRightOperand/<MapTry>d__56`1")]
[ExtensionAttribute]
public static Task`1<Result`1<K>> MapTry(Result result, Func`1<Task`1<K>> func, Func`2<Exception, string> errorHandler);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsRightOperand/<OnFailureCompensate>d__57`1")]
[ExtensionAttribute]
public static Task`1<Result`1<T>> OnFailureCompensate(Result`1<T> result, Func`1<Task`1<Result`1<T>>> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsRightOperand/<OnFailureCompensate>d__58`2")]
[ExtensionAttribute]
public static Task`1<Result`2<T, E>> OnFailureCompensate(Result`2<T, E> result, Func`1<Task`1<Result`2<T, E>>> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsRightOperand/<OnFailureCompensate>d__59")]
[ExtensionAttribute]
public static Task`1<Result> OnFailureCompensate(Result result, Func`1<Task`1<Result>> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsRightOperand/<OnFailureCompensate>d__60`1")]
[ExtensionAttribute]
public static Task`1<Result`1<T>> OnFailureCompensate(Result`1<T> result, Func`2<string, Task`1<Result`1<T>>> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsRightOperand/<OnFailureCompensate>d__61`2")]
[ExtensionAttribute]
public static Task`1<Result`2<T, E>> OnFailureCompensate(Result`2<T, E> result, Func`2<E, Task`1<Result`2<T, E>>> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsRightOperand/<OnFailureCompensate>d__62")]
[ExtensionAttribute]
public static Task`1<Result> OnFailureCompensate(Result result, Func`2<string, Task`1<Result>> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsRightOperand/<Tap>d__63")]
[ExtensionAttribute]
public static Task`1<Result> Tap(Result result, Func`1<Task> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsRightOperand/<Tap>d__64`1")]
[ExtensionAttribute]
public static Task`1<Result`1<T>> Tap(Result`1<T> result, Func`1<Task> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsRightOperand/<Tap>d__65`1")]
[ExtensionAttribute]
public static Task`1<Result`1<T>> Tap(Result`1<T> result, Func`2<T, Task> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsRightOperand/<Tap>d__66`1")]
[ExtensionAttribute]
public static Task`1<UnitResult`1<E>> Tap(UnitResult`1<E> result, Func`1<Task> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsRightOperand/<Tap>d__67`2")]
[ExtensionAttribute]
public static Task`1<Result`2<T, E>> Tap(Result`2<T, E> result, Func`1<Task> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsRightOperand/<Tap>d__68`2")]
[ExtensionAttribute]
public static Task`1<Result`2<T, E>> Tap(Result`2<T, E> result, Func`2<T, Task> func);
    [ExtensionAttribute]
public static Task`1<Result> TapIf(Result result, bool condition, Func`1<Task> func);
    [ExtensionAttribute]
public static Task`1<Result`1<T>> TapIf(Result`1<T> result, bool condition, Func`1<Task> func);
    [ExtensionAttribute]
public static Task`1<Result`1<T>> TapIf(Result`1<T> result, bool condition, Func`2<T, Task> func);
    [ExtensionAttribute]
public static Task`1<Result`2<T, E>> TapIf(Result`2<T, E> result, bool condition, Func`1<Task> func);
    [ExtensionAttribute]
public static Task`1<Result`2<T, E>> TapIf(Result`2<T, E> result, bool condition, Func`2<T, Task> func);
    [ExtensionAttribute]
public static Task`1<UnitResult`1<E>> TapIf(UnitResult`1<E> result, bool condition, Func`1<Task> func);
    [ExtensionAttribute]
public static Task`1<Result`1<T>> TapIf(Result`1<T> result, Func`2<T, bool> predicate, Func`1<Task> func);
    [ExtensionAttribute]
public static Task`1<Result`1<T>> TapIf(Result`1<T> result, Func`2<T, bool> predicate, Func`2<T, Task> func);
    [ExtensionAttribute]
public static Task`1<Result`2<T, E>> TapIf(Result`2<T, E> result, Func`2<T, bool> predicate, Func`1<Task> func);
    [ExtensionAttribute]
public static Task`1<Result`2<T, E>> TapIf(Result`2<T, E> result, Func`2<T, bool> predicate, Func`2<T, Task> func);
    [ExtensionAttribute]
public static Task`1<UnitResult`1<E>> TapIf(UnitResult`1<E> result, Func`1<bool> predicate, Func`1<Task> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsRightOperand/<TapIfTry>d__80")]
[ExtensionAttribute]
public static Task`1<Result> TapIfTry(Result result, bool condition, Func`1<Task> func, Func`2<Exception, string> errorHandler);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsRightOperand/<TapIfTry>d__81`1")]
[ExtensionAttribute]
public static Task`1<Result`1<T>> TapIfTry(Result`1<T> result, bool condition, Func`1<Task> func, Func`2<Exception, string> errorHandler);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsRightOperand/<TapIfTry>d__82`1")]
[ExtensionAttribute]
public static Task`1<Result`1<T>> TapIfTry(Result`1<T> result, bool condition, Func`2<T, Task> func, Func`2<Exception, string> errorHandler);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsRightOperand/<TapIfTry>d__83`1")]
[ExtensionAttribute]
public static Task`1<UnitResult`1<E>> TapIfTry(UnitResult`1<E> result, bool condition, Func`1<Task> func, Func`2<Exception, E> errorHandler);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsRightOperand/<TapIfTry>d__84`2")]
[ExtensionAttribute]
public static Task`1<Result`2<T, E>> TapIfTry(Result`2<T, E> result, bool condition, Func`1<Task> func, Func`2<Exception, E> errorHandler);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsRightOperand/<TapIfTry>d__85`2")]
[ExtensionAttribute]
public static Task`1<Result`2<T, E>> TapIfTry(Result`2<T, E> result, bool condition, Func`2<T, Task> func, Func`2<Exception, E> errorHandler);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsRightOperand/<TapIfTry>d__86`1")]
[ExtensionAttribute]
public static Task`1<Result`1<T>> TapIfTry(Result`1<T> result, Func`2<T, bool> predicate, Func`1<Task> func, Func`2<Exception, string> errorHandler);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsRightOperand/<TapIfTry>d__87`1")]
[ExtensionAttribute]
public static Task`1<Result`1<T>> TapIfTry(Result`1<T> result, Func`2<T, bool> predicate, Func`2<T, Task> func, Func`2<Exception, string> errorHandler);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsRightOperand/<TapIfTry>d__88`2")]
[ExtensionAttribute]
public static Task`1<Result`2<T, E>> TapIfTry(Result`2<T, E> result, Func`2<T, bool> predicate, Func`1<Task> func, Func`2<Exception, E> errorHandler);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsRightOperand/<TapIfTry>d__89`2")]
[ExtensionAttribute]
public static Task`1<Result`2<T, E>> TapIfTry(Result`2<T, E> result, Func`2<T, bool> predicate, Func`2<T, Task> func, Func`2<Exception, E> errorHandler);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsRightOperand/<TapTry>d__90")]
[ExtensionAttribute]
public static Task`1<Result> TapTry(Result result, Func`1<Task> func, Func`2<Exception, string> errorHandler);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsRightOperand/<TapTry>d__91`1")]
[ExtensionAttribute]
public static Task`1<Result`1<T>> TapTry(Result`1<T> result, Func`1<Task> func, Func`2<Exception, string> errorHandler);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsRightOperand/<TapTry>d__92`1")]
[ExtensionAttribute]
public static Task`1<Result`1<T>> TapTry(Result`1<T> result, Func`2<T, Task> func, Func`2<Exception, string> errorHandler);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsRightOperand/<TapTry>d__93`1")]
[ExtensionAttribute]
public static Task`1<UnitResult`1<E>> TapTry(UnitResult`1<E> result, Func`1<Task> func, Func`2<Exception, E> errorHandler);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsRightOperand/<TapTry>d__94`2")]
[ExtensionAttribute]
public static Task`1<Result`2<T, E>> TapTry(Result`2<T, E> result, Func`1<Task> func, Func`2<Exception, E> errorHandler);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.AsyncResultExtensionsRightOperand/<TapTry>d__95`2")]
[ExtensionAttribute]
public static Task`1<Result`2<T, E>> TapTry(Result`2<T, E> result, Func`2<T, Task> func, Func`2<Exception, E> errorHandler);
}
public abstract class CSharpFunctionalExtensions.ComparableValueObject : ValueObject {
    protected abstract virtual IEnumerable`1<IComparable> GetComparableEqualityComponents();
    protected sealed virtual IEnumerable`1<object> GetEqualityComponents();
    public virtual int CompareTo(ComparableValueObject other);
    public virtual int CompareTo(object other);
}
public abstract class CSharpFunctionalExtensions.Entity : Entity`1<long> {
    protected Entity(long id);
}
public abstract class CSharpFunctionalExtensions.Entity`1 : object {
    [CompilerGeneratedAttribute]
private TId <Id>k__BackingField;
    public TId Id { get; protected set; }
    protected Entity`1(TId id);
    [CompilerGeneratedAttribute]
public virtual TId get_Id();
    [CompilerGeneratedAttribute]
protected virtual void set_Id(TId value);
    public virtual bool Equals(object obj);
    private bool IsTransient();
    public static bool op_Equality(Entity`1<TId> a, Entity`1<TId> b);
    public static bool op_Inequality(Entity`1<TId> a, Entity`1<TId> b);
    public virtual int GetHashCode();
    public virtual int CompareTo(Entity`1<TId> other);
    public virtual int CompareTo(object other);
}
public abstract class CSharpFunctionalExtensions.EnumValueObject`1 : ComparableValueObject {
    private Nullable`1<int> _cachedHashCode;
    private static Dictionary`2<string, TEnumeration> Enumerations;
    public static IReadOnlyCollection`1<TEnumeration> All;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    public string Id { get; protected set; }
    protected EnumValueObject`1(string id);
    private static EnumValueObject`1();
    [CompilerGeneratedAttribute]
public virtual string get_Id();
    [CompilerGeneratedAttribute]
protected virtual void set_Id(string value);
    public static bool op_Equality(EnumValueObject`1<TEnumeration> a, string b);
    public static bool op_Inequality(EnumValueObject`1<TEnumeration> a, string b);
    public static bool op_Equality(string a, EnumValueObject`1<TEnumeration> b);
    public static bool op_Inequality(string a, EnumValueObject`1<TEnumeration> b);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static Maybe`1<TEnumeration> FromId(string id);
    public static bool Is(string possibleId);
    public virtual string ToString();
    [IteratorStateMachineAttribute("CSharpFunctionalExtensions.EnumValueObject`1/<GetComparableEqualityComponents>d__17")]
protected virtual IEnumerable`1<IComparable> GetComparableEqualityComponents();
    private static TEnumeration[] GetEnumerations();
}
public abstract class CSharpFunctionalExtensions.EnumValueObject`2 : ComparableValueObject {
    private Nullable`1<int> _cachedHashCode;
    private static Dictionary`2<TId, TEnumeration> EnumerationsById;
    private static Dictionary`2<string, TEnumeration> EnumerationsByName;
    [CompilerGeneratedAttribute]
private TId <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public static IReadOnlyCollection`1<TEnumeration> All;
    public TId Id { get; protected set; }
    public string Name { get; protected set; }
    protected EnumValueObject`2(TId id, string name);
    private static EnumValueObject`2();
    [CompilerGeneratedAttribute]
public TId get_Id();
    [CompilerGeneratedAttribute]
protected void set_Id(TId value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
protected void set_Name(string value);
    public static bool op_Equality(EnumValueObject`2<TEnumeration, TId> a, TId b);
    public static bool op_Inequality(EnumValueObject`2<TEnumeration, TId> a, TId b);
    public static bool op_Equality(TId a, EnumValueObject`2<TEnumeration, TId> b);
    public static bool op_Inequality(TId a, EnumValueObject`2<TEnumeration, TId> b);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static Maybe`1<TEnumeration> FromId(TId id);
    public static Maybe`1<TEnumeration> FromName(string name);
    public static bool Is(string possibleName);
    public static bool Is(TId possibleId);
    public virtual string ToString();
    [IteratorStateMachineAttribute("CSharpFunctionalExtensions.EnumValueObject`2/<GetComparableEqualityComponents>d__24")]
protected virtual IEnumerable`1<IComparable> GetComparableEqualityComponents();
    private static TEnumeration[] GetEnumerations();
}
public interface CSharpFunctionalExtensions.ICombine {
    public abstract virtual ICombine Combine(ICombine value);
}
public interface CSharpFunctionalExtensions.IError`1 {
    public E Error { get; }
    public abstract virtual E get_Error();
}
[NullableContextAttribute("1")]
public interface CSharpFunctionalExtensions.IMaybe`1 {
    public T Value { get; }
    public bool HasValue { get; }
    public bool HasNoValue { get; }
    public abstract virtual T get_Value();
    public abstract virtual bool get_HasValue();
    public abstract virtual bool get_HasNoValue();
}
internal static class CSharpFunctionalExtensions.Internal.ResultCommonLogic : object {
    internal static void GetObjectDataCommon(IResult result, SerializationInfo info);
    internal static void GetObjectData(Result result, SerializationInfo info);
    internal static void GetObjectData(Result`1<T> result, SerializationInfo info);
    internal static void GetObjectData(Result`2<T, E> result, SerializationInfo info);
    internal static void GetObjectData(UnitResult`1<E> result, SerializationInfo info);
    internal static bool ErrorStateGuard(bool isFailure, E error);
    internal static E GetErrorWithSuccessGuard(bool isFailure, E error);
    internal static SerializationValue`1<string> Deserialize(SerializationInfo info);
    internal static SerializationValue`1<E> Deserialize(SerializationInfo info);
}
public interface CSharpFunctionalExtensions.IResult {
    public bool IsFailure { get; }
    public bool IsSuccess { get; }
    public abstract virtual bool get_IsFailure();
    public abstract virtual bool get_IsSuccess();
}
public interface CSharpFunctionalExtensions.IResult`1 {
}
public interface CSharpFunctionalExtensions.IResult`2 {
}
public interface CSharpFunctionalExtensions.IUnitResult`1 {
}
public interface CSharpFunctionalExtensions.IValue`1 {
    public T Value { get; }
    public abstract virtual T get_Value();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class CSharpFunctionalExtensions.Maybe : ValueType {
    public static Maybe None { get; }
    public static Maybe get_None();
    public static Maybe`1<T> From(T value);
    public static Maybe`1<T> From(Func`1<T> func);
    public static Task`1<Maybe`1<T>> From(Task`1<T> valueTask);
    public static Task`1<Maybe`1<T>> From(Func`1<Task`1<T>> valueTaskFunc);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class CSharpFunctionalExtensions.Maybe`1 : ValueType {
    private bool _isValueSet;
    [NullableAttribute("2")]
private T _value;
    public T Value { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static Maybe`1<T> None { get; }
    public bool HasValue { get; }
    public bool HasNoValue { get; }
    [NullableContextAttribute("2")]
private Maybe`1(T value);
    public T GetValueOrThrow(string errorMessage);
    public T GetValueOrThrow(Exception exception);
    public T GetValueOrDefault(T defaultValue);
    [NullableContextAttribute("2")]
public T GetValueOrDefault();
    [NullableContextAttribute("2")]
public bool TryGetValue(T& value);
    public sealed virtual T get_Value();
    public static Maybe`1<T> get_None();
    public sealed virtual bool get_HasValue();
    public sealed virtual bool get_HasNoValue();
    [NullableContextAttribute("2")]
public static Maybe`1<T> op_Implicit(T value);
    public static Maybe`1<T> op_Implicit(Maybe _);
    [NullableContextAttribute("2")]
public static Maybe`1<T> From(T value);
    public static Maybe`1<T> From(Func`1<T> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.Maybe`1/<From>d__21")]
public static Task`1<Maybe`1<T>> From(Task`1<T> valueTask);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.Maybe`1/<From>d__22")]
public static Task`1<Maybe`1<T>> From(Func`1<Task`1<T>> valueTaskFunc);
    [NullableContextAttribute("2")]
public static bool op_Equality(Maybe`1<T> maybe, T value);
    public static bool op_Inequality(Maybe`1<T> maybe, T value);
    public static bool op_Equality(Maybe`1<T> maybe, object other);
    public static bool op_Inequality(Maybe`1<T> maybe, object other);
    public static bool op_Equality(Maybe`1<T> first, Maybe`1<T> second);
    public static bool op_Inequality(Maybe`1<T> first, Maybe`1<T> second);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(Maybe`1<T> other);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class CSharpFunctionalExtensions.MaybeEqualityComparer`1 : object {
    private IEqualityComparer`1<T> _equalityComparer;
    public MaybeEqualityComparer`1(IEqualityComparer`1<T> equalityComparer);
    public sealed virtual bool Equals(Maybe`1<T> x, Maybe`1<T> y);
    public sealed virtual int GetHashCode(Maybe`1<T> obj);
}
[ExtensionAttribute]
public static class CSharpFunctionalExtensions.MaybeExtensions : object {
    [ExtensionAttribute]
public static Maybe`1<T> AsMaybe(Nullable`1& value);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static Maybe`1<T> AsMaybe(T value);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.MaybeExtensions/<AsMaybe>d__2`1")]
[ExtensionAttribute]
public static Task`1<Maybe`1<T>> AsMaybe(Task`1<Nullable`1<T>> nullableTask);
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("CSharpFunctionalExtensions.MaybeExtensions/<AsMaybe>d__3`1")]
[ExtensionAttribute]
public static Task`1<Maybe`1<T>> AsMaybe(Task`1<T> nullableTask);
    [ExtensionAttribute]
public static Nullable`1<T> AsNullable(Maybe`1& value);
    [ExtensionAttribute]
public static Maybe`1<K> Bind(Maybe`1& maybe, Func`2<T, Maybe`1<K>> selector);
    [ExtensionAttribute]
public static Maybe`1<K> Bind(Maybe`1& maybe, Func`3<T, TContext, Maybe`1<K>> selector, TContext context);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.MaybeExtensions/<Bind>d__7`2")]
[ExtensionAttribute]
public static Task`1<Maybe`1<K>> Bind(Task`1<Maybe`1<T>> maybeTask, Func`2<T, Task`1<Maybe`1<K>>> selector);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.MaybeExtensions/<Bind>d__8`2")]
[ExtensionAttribute]
public static Task`1<Maybe`1<K>> Bind(Task`1<Maybe`1<T>> maybeTask, Func`2<T, Maybe`1<K>> selector);
    [ExtensionAttribute]
public static Task`1<Maybe`1<K>> Bind(Maybe`1<T> maybe, Func`2<T, Task`1<Maybe`1<K>>> selector);
    [IteratorStateMachineAttribute("CSharpFunctionalExtensions.MaybeExtensions/<Choose>d__10`2")]
[ExtensionAttribute]
public static IEnumerable`1<U> Choose(IEnumerable`1<Maybe`1<T>> source, Func`2<T, U> selector);
    [IteratorStateMachineAttribute("CSharpFunctionalExtensions.MaybeExtensions/<Choose>d__11`1")]
[ExtensionAttribute]
public static IEnumerable`1<T> Choose(IEnumerable`1<Maybe`1<T>> source);
    [ExtensionAttribute]
public static void Deconstruct(Maybe`1& result, Boolean& hasValue, T& value);
    [ExtensionAttribute]
public static void Execute(Maybe`1& maybe, Action`1<T> action);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.MaybeExtensions/<Execute>d__14`1")]
[ExtensionAttribute]
public static Task Execute(Task`1<Maybe`1<T>> maybeTask, Func`2<T, Task> asyncAction);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.MaybeExtensions/<Execute>d__15`1")]
[ExtensionAttribute]
public static Task Execute(Task`1<Maybe`1<T>> maybeTask, Action`1<T> action);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.MaybeExtensions/<Execute>d__16`1")]
[ExtensionAttribute]
public static Task Execute(Maybe`1<T> maybe, Func`2<T, Task> action);
    [ExtensionAttribute]
public static void ExecuteNoValue(Maybe`1& maybe, Action action);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.MaybeExtensions/<ExecuteNoValue>d__18`1")]
[ExtensionAttribute]
public static Task ExecuteNoValue(Task`1<Maybe`1<T>> maybeTask, Func`1<Task> asyncAction);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.MaybeExtensions/<ExecuteNoValue>d__19`1")]
[ExtensionAttribute]
public static Task ExecuteNoValue(Task`1<Maybe`1<T>> maybeTask, Action action);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.MaybeExtensions/<ExecuteNoValue>d__20`1")]
[ExtensionAttribute]
public static Task ExecuteNoValue(Maybe`1<T> maybe, Func`1<Task> action);
    [ExtensionAttribute]
public static Maybe`1<T> Flatten(Maybe`1& maybe);
    [ExtensionAttribute]
public static T GetValueOrDefault(Maybe`1& maybe, Func`1<T> defaultValue);
    [ExtensionAttribute]
public static K GetValueOrDefault(Maybe`1& maybe, Func`2<T, K> selector, K defaultValue);
    [ExtensionAttribute]
public static K GetValueOrDefault(Maybe`1& maybe, Func`2<T, K> selector, Func`1<K> defaultValue);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.MaybeExtensions/<GetValueOrDefault>d__25`1")]
[ExtensionAttribute]
public static Task`1<T> GetValueOrDefault(Task`1<Maybe`1<T>> maybeTask, Func`1<Task`1<T>> defaultValue);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.MaybeExtensions/<GetValueOrDefault>d__26`2")]
[ExtensionAttribute]
public static Task`1<K> GetValueOrDefault(Task`1<Maybe`1<T>> maybeTask, Func`2<T, Task`1<K>> selector, K defaultValue);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.MaybeExtensions/<GetValueOrDefault>d__27`2")]
[ExtensionAttribute]
public static Task`1<K> GetValueOrDefault(Task`1<Maybe`1<T>> maybeTask, Func`2<T, Task`1<K>> selector, Func`1<Task`1<K>> defaultValue);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.MaybeExtensions/<GetValueOrDefault>d__28`1")]
[ExtensionAttribute]
public static Task`1<T> GetValueOrDefault(Task`1<Maybe`1<T>> maybeTask, Func`1<T> defaultValue);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.MaybeExtensions/<GetValueOrDefault>d__29`2")]
[ExtensionAttribute]
public static Task`1<K> GetValueOrDefault(Task`1<Maybe`1<T>> maybeTask, Func`2<T, K> selector, K defaultValue);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.MaybeExtensions/<GetValueOrDefault>d__30`2")]
[ExtensionAttribute]
public static Task`1<K> GetValueOrDefault(Task`1<Maybe`1<T>> maybeTask, Func`2<T, K> selector, Func`1<K> defaultValue);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.MaybeExtensions/<GetValueOrDefault>d__31`1")]
[ExtensionAttribute]
public static Task`1<T> GetValueOrDefault(Maybe`1<T> maybe, Func`1<Task`1<T>> defaultValue);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.MaybeExtensions/<GetValueOrDefault>d__32`2")]
[ExtensionAttribute]
public static Task`1<K> GetValueOrDefault(Maybe`1<T> maybe, Func`2<T, K> selector, Func`1<Task`1<K>> defaultValue);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.MaybeExtensions/<GetValueOrDefault>d__33`2")]
[ExtensionAttribute]
public static Task`1<K> GetValueOrDefault(Maybe`1<T> maybe, Func`2<T, Task`1<K>> selector, K defaultValue);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.MaybeExtensions/<GetValueOrDefault>d__34`2")]
[ExtensionAttribute]
public static Task`1<K> GetValueOrDefault(Maybe`1<T> maybe, Func`2<T, Task`1<K>> selector, Func`1<Task`1<K>> defaultValue);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.MaybeExtensions/<GetValueOrThrow>d__35`1")]
[ExtensionAttribute]
public static Task`1<T> GetValueOrThrow(Task`1<Maybe`1<T>> maybeTask);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.MaybeExtensions/<GetValueOrThrow>d__36`1")]
[ExtensionAttribute]
public static Task`1<T> GetValueOrThrow(Task`1<Maybe`1<T>> maybeTask, string errorMessage);
    [ExtensionAttribute]
public static Maybe`1<K> Map(Maybe`1& maybe, Func`2<T, K> selector);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.MaybeExtensions/<Map>d__38`2")]
[ExtensionAttribute]
public static Task`1<Maybe`1<K>> Map(Task`1<Maybe`1<T>> maybeTask, Func`2<T, Task`1<K>> selector);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.MaybeExtensions/<Map>d__39`2")]
[ExtensionAttribute]
public static Task`1<Maybe`1<K>> Map(Task`1<Maybe`1<T>> maybeTask, Func`2<T, K> selector);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.MaybeExtensions/<Map>d__40`2")]
[ExtensionAttribute]
public static Task`1<Maybe`1<K>> Map(Maybe`1<T> maybe, Func`2<T, Task`1<K>> selector);
    [ExtensionAttribute]
public static TE Match(Maybe`1& maybe, Func`2<T, TE> Some, Func`1<TE> None);
    [ExtensionAttribute]
public static void Match(Maybe`1& maybe, Action`1<T> Some, Action None);
    [ExtensionAttribute]
public static TE Match(Maybe`1& maybe, Func`3<TKey, TValue, TE> Some, Func`1<TE> None);
    [ExtensionAttribute]
public static void Match(Maybe`1& maybe, Action`2<TKey, TValue> Some, Action None);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.MaybeExtensions/<Match>d__45`2")]
[ExtensionAttribute]
public static Task`1<TE> Match(Maybe`1<T> maybe, Func`3<T, CancellationToken, Task`1<TE>> Some, Func`2<CancellationToken, Task`1<TE>> None, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.MaybeExtensions/<Match>d__46`1")]
[ExtensionAttribute]
public static Task Match(Maybe`1<T> maybe, Func`3<T, CancellationToken, Task> Some, Func`2<CancellationToken, Task> None, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.MaybeExtensions/<Match>d__47`3")]
[ExtensionAttribute]
public static Task`1<TE> Match(Maybe`1<KeyValuePair`2<TKey, TValue>> maybe, Func`4<TKey, TValue, CancellationToken, Task`1<TE>> Some, Func`2<CancellationToken, Task`1<TE>> None, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.MaybeExtensions/<Match>d__48`2")]
[ExtensionAttribute]
public static Task Match(Maybe`1<KeyValuePair`2<TKey, TValue>> maybe, Func`4<TKey, TValue, CancellationToken, Task> Some, Func`2<CancellationToken, Task> None, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Maybe`1<T> Or(Maybe`1& maybe, Func`1<T> fallbackOperation);
    [ExtensionAttribute]
public static Maybe`1<T> Or(Maybe`1& maybe, Maybe`1<T> fallback);
    [ExtensionAttribute]
public static Maybe`1<T> Or(Maybe`1& maybe, Func`1<Maybe`1<T>> fallbackOperation);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.MaybeExtensions/<Or>d__52`1")]
[ExtensionAttribute]
public static Task`1<Maybe`1<T>> Or(Task`1<Maybe`1<T>> maybeTask, Task`1<T> fallback);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.MaybeExtensions/<Or>d__53`1")]
[ExtensionAttribute]
public static Task`1<Maybe`1<T>> Or(Task`1<Maybe`1<T>> maybeTask, Func`1<Task`1<T>> fallbackOperation);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.MaybeExtensions/<Or>d__54`1")]
[ExtensionAttribute]
public static Task`1<Maybe`1<T>> Or(Task`1<Maybe`1<T>> maybeTask, Func`1<Maybe`1<T>> fallbackOperation);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.MaybeExtensions/<Or>d__55`1")]
[ExtensionAttribute]
public static Task`1<Maybe`1<T>> Or(Task`1<Maybe`1<T>> maybeTask, Func`1<Task`1<Maybe`1<T>>> fallbackOperation);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.MaybeExtensions/<Or>d__56`1")]
[ExtensionAttribute]
public static Task`1<Maybe`1<T>> Or(Task`1<Maybe`1<T>> maybeTask, T fallback);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.MaybeExtensions/<Or>d__57`1")]
[ExtensionAttribute]
public static Task`1<Maybe`1<T>> Or(Task`1<Maybe`1<T>> maybeTask, Func`1<T> fallbackOperation);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.MaybeExtensions/<Or>d__58`1")]
[ExtensionAttribute]
public static Task`1<Maybe`1<T>> Or(Task`1<Maybe`1<T>> maybeTask, Maybe`1<T> fallback);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.MaybeExtensions/<Or>d__59`1")]
[ExtensionAttribute]
public static Task`1<Maybe`1<T>> Or(Maybe`1<T> maybe, Func`1<Task`1<T>> fallbackOperation);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.MaybeExtensions/<Or>d__60`1")]
[ExtensionAttribute]
public static Task`1<Maybe`1<T>> Or(Maybe`1<T> maybe, Task`1<Maybe`1<T>> fallback);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.MaybeExtensions/<Or>d__61`1")]
[ExtensionAttribute]
public static Task`1<Maybe`1<T>> Or(Maybe`1<T> maybe, Func`1<Task`1<Maybe`1<T>>> fallbackOperation);
    [ExtensionAttribute]
public static Maybe`1<K> Select(Maybe`1& maybe, Func`2<T, K> selector);
    [ExtensionAttribute]
public static Maybe`1<K> SelectMany(Maybe`1& maybe, Func`2<T, Maybe`1<K>> selector);
    [ExtensionAttribute]
public static Maybe`1<V> SelectMany(Maybe`1& maybe, Func`2<T, Maybe`1<U>> selector, Func`3<T, U, V> project);
    [ExtensionAttribute]
public static List`1<T> ToList(Maybe`1& maybe);
    [ExtensionAttribute]
public static Result`1<T> ToResult(Maybe`1& maybe, string errorMessage);
    [ExtensionAttribute]
public static Result`2<T, E> ToResult(Maybe`1& maybe, E error);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.MaybeExtensions/<ToResult>d__68`1")]
[ExtensionAttribute]
public static Task`1<Result`1<T>> ToResult(Task`1<Maybe`1<T>> maybeTask, string errorMessage);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.MaybeExtensions/<ToResult>d__69`2")]
[ExtensionAttribute]
public static Task`1<Result`2<T, E>> ToResult(Task`1<Maybe`1<T>> maybeTask, E error);
    [ExtensionAttribute]
public static UnitResult`1<E> ToUnitResult(Maybe`1& maybe);
    [ExtensionAttribute]
public static UnitResult`1<E> ToUnitResult(Maybe`1& maybe, E error);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.MaybeExtensions/<ToUnitResult>d__72`1")]
[ExtensionAttribute]
public static Task`1<UnitResult`1<E>> ToUnitResult(Task`1<Maybe`1<E>> maybeTask);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.MaybeExtensions/<ToUnitResult>d__73`2")]
[ExtensionAttribute]
public static Task`1<UnitResult`1<E>> ToUnitResult(Task`1<Maybe`1<T>> maybeTask, E error);
    [ExtensionAttribute]
public static Maybe`1<V> TryFind(IReadOnlyDictionary`2<K, V> dict, K key);
    [ExtensionAttribute]
public static Maybe`1<T> TryFirst(IEnumerable`1<T> source);
    [ExtensionAttribute]
public static Maybe`1<T> TryFirst(IEnumerable`1<T> source, Func`2<T, bool> predicate);
    [ExtensionAttribute]
public static Maybe`1<T> TryLast(IEnumerable`1<T> source);
    [ExtensionAttribute]
public static Maybe`1<T> TryLast(IEnumerable`1<T> source, Func`2<T, bool> predicate);
    [ExtensionAttribute]
public static Maybe`1<T> Where(Maybe`1& maybe, Func`2<T, bool> predicate);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.MaybeExtensions/<Where>d__80`1")]
[ExtensionAttribute]
public static Task`1<Maybe`1<T>> Where(Task`1<Maybe`1<T>> maybeTask, Func`2<T, Task`1<bool>> predicate);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.MaybeExtensions/<Where>d__81`1")]
[ExtensionAttribute]
public static Task`1<Maybe`1<T>> Where(Task`1<Maybe`1<T>> maybeTask, Func`2<T, bool> predicate);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.MaybeExtensions/<Where>d__82`1")]
[ExtensionAttribute]
public static Task`1<Maybe`1<T>> Where(Maybe`1<T> maybe, Func`2<T, Task`1<bool>> predicate);
}
[IsReadOnlyAttribute]
public class CSharpFunctionalExtensions.Result : ValueType {
    [CompilerGeneratedAttribute]
private bool <IsFailure>k__BackingField;
    private string _error;
    public bool IsFailure { get; }
    public bool IsSuccess { get; }
    public string Error { get; }
    private Result(bool isFailure, string error);
    private Result(SerializationInfo info, StreamingContext context);
    public static Result Combine(IEnumerable`1<Result> results, string errorMessagesSeparator);
    public static Result Combine(IEnumerable`1<Result`1<T>> results, string errorMessagesSeparator);
    public static UnitResult`1<E> Combine(IEnumerable`1<UnitResult`1<E>> results, Func`2<IEnumerable`1<E>, E> composerError);
    public static UnitResult`1<E> Combine(Func`2<IEnumerable`1<E>, E> composerError, UnitResult`1[] results);
    public static UnitResult`1<E> Combine(UnitResult`1[] results);
    public static UnitResult`1<E> Combine(IEnumerable`1<UnitResult`1<E>> results);
    public static Result`2<bool, E> Combine(IEnumerable`1<Result`2<T, E>> results, Func`2<IEnumerable`1<E>, E> composerError);
    public static Result`2<bool, E> Combine(IEnumerable`1<Result`2<T, E>> results);
    public static Result Combine(Result[] results);
    public static Result Combine(Result`1[] results);
    public static Result`2<bool, E> Combine(Result`2[] results);
    public static Result Combine(string errorMessagesSeparator, Result[] results);
    public static Result Combine(string errorMessagesSeparator, Result`1[] results);
    public static Result`2<bool, E> Combine(Func`2<IEnumerable`1<E>, E> composerError, Result`2[] results);
    private static E CombineErrors(IEnumerable`1<E> errors);
    private static IEnumerable`1<string> AggregateMessages(IEnumerable`1<string> messages);
    public Result`1<K> ConvertFailure();
    public static Result Failure(string error);
    public static Result`1<T> Failure(string error);
    public static Result`2<T, E> Failure(E error);
    public static Result FailureIf(bool isFailure, string error);
    public static Result FailureIf(Func`1<bool> failurePredicate, string error);
    public static Result`1<T> FailureIf(bool isFailure, T value, string error);
    public static Result`1<T> FailureIf(Func`1<bool> failurePredicate, T& value, string error);
    public static Result`2<T, E> FailureIf(bool isFailure, T& value, E& error);
    public static Result`2<T, E> FailureIf(Func`1<bool> failurePredicate, T& value, E& error);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.Result/<FailureIf>d__27")]
public static Task`1<Result> FailureIf(Func`1<Task`1<bool>> failurePredicate, string error);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.Result/<FailureIf>d__28`1")]
public static Task`1<Result`1<T>> FailureIf(Func`1<Task`1<bool>> failurePredicate, T value, string error);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.Result/<FailureIf>d__29`2")]
public static Task`1<Result`2<T, E>> FailureIf(Func`1<Task`1<bool>> failurePredicate, T value, E error);
    public static Result FirstFailureOrSuccess(Result[] results);
    public static Result`1<T> Of(T value);
    public static Result`1<T> Of(Func`1<T> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.Result/<Of>d__33`1")]
public static Task`1<Result`1<T>> Of(Task`1<T> valueTask);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.Result/<Of>d__34`1")]
public static Task`1<Result`1<T>> Of(Func`1<Task`1<T>> valueTaskFunc);
    public static Result`2<T, E> Of(T value);
    public static Result`2<T, E> Of(Func`1<T> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.Result/<Of>d__37`2")]
public static Task`1<Result`2<T, E>> Of(Task`1<T> valueTask);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.Result/<Of>d__38`2")]
public static Task`1<Result`2<T, E>> Of(Func`1<Task`1<T>> valueTaskFunc);
    public static Result Success();
    public static Result`1<T> Success(T value);
    public static Result`2<T, E> Success(T value);
    public static UnitResult`1<E> Success();
    public static Result SuccessIf(bool isSuccess, string error);
    public static Result SuccessIf(Func`1<bool> predicate, string error);
    public static Result`1<T> SuccessIf(bool isSuccess, T& value, string error);
    public static Result`1<T> SuccessIf(Func`1<bool> predicate, T& value, string error);
    public static Result`2<T, E> SuccessIf(bool isSuccess, T& value, E& error);
    public static Result`2<T, E> SuccessIf(Func`1<bool> predicate, T& value, E& error);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.Result/<SuccessIf>d__49")]
public static Task`1<Result> SuccessIf(Func`1<Task`1<bool>> predicate, string error);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.Result/<SuccessIf>d__50`1")]
public static Task`1<Result`1<T>> SuccessIf(Func`1<Task`1<bool>> predicate, T value, string error);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.Result/<SuccessIf>d__51`2")]
public static Task`1<Result`2<T, E>> SuccessIf(Func`1<Task`1<bool>> predicate, T value, E error);
    public virtual string ToString();
    public static Result Try(Action action, Func`2<Exception, string> errorHandler);
    public static Result`1<T> Try(Func`1<T> func, Func`2<Exception, string> errorHandler);
    public static Result`2<T, E> Try(Func`1<T> func, Func`2<Exception, E> errorHandler);
    public static UnitResult`1<E> Try(Action action, Func`2<Exception, E> errorHandler);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.Result/<Try>d__57`1")]
public static Task`1<UnitResult`1<E>> Try(Func`1<Task> action, Func`2<Exception, E> errorHandler);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.Result/<Try>d__58")]
public static Task`1<Result> Try(Func`1<Task> action, Func`2<Exception, string> errorHandler);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.Result/<Try>d__59`1")]
public static Task`1<Result`1<T>> Try(Func`1<Task`1<T>> func, Func`2<Exception, string> errorHandler);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.Result/<Try>d__60`2")]
public static Task`1<Result`2<T, E>> Try(Func`1<Task`1<T>> func, Func`2<Exception, E> errorHandler);
    public bool TryGetError(String& error);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsFailure();
    public sealed virtual bool get_IsSuccess();
    public sealed virtual string get_Error();
    private sealed virtual override void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context);
    public static UnitResult`1<string> op_Implicit(Result result);
}
[IsReadOnlyAttribute]
public class CSharpFunctionalExtensions.Result`1 : ValueType {
    [CompilerGeneratedAttribute]
private bool <IsFailure>k__BackingField;
    private string _error;
    private T _value;
    public bool IsFailure { get; }
    public bool IsSuccess { get; }
    public string Error { get; }
    public T Value { get; }
    internal Result`1(bool isFailure, string error, T value);
    private Result`1(SerializationInfo info, StreamingContext context);
    public Result ConvertFailure();
    public Result`1<K> ConvertFailure();
    public virtual string ToString();
    public bool TryGetValue(T& value);
    public bool TryGetError(String& error);
    public bool TryGetValue(T& value, String& error);
    public bool TryGetError(String& error, T& value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsFailure();
    public sealed virtual bool get_IsSuccess();
    public sealed virtual string get_Error();
    public sealed virtual T get_Value();
    private sealed virtual override void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context);
    public T GetValueOrDefault(T defaultValue);
    public static Result`1<T> op_Implicit(T value);
    public static Result op_Implicit(Result`1<T> result);
    public static UnitResult`1<string> op_Implicit(Result`1<T> result);
}
[IsReadOnlyAttribute]
public class CSharpFunctionalExtensions.Result`2 : ValueType {
    [CompilerGeneratedAttribute]
private bool <IsFailure>k__BackingField;
    private E _error;
    private T _value;
    public bool IsFailure { get; }
    public bool IsSuccess { get; }
    public E Error { get; }
    public T Value { get; }
    internal Result`2(bool isFailure, E error, T value);
    private Result`2(SerializationInfo info, StreamingContext context);
    public Result`2<K, E> ConvertFailure();
    public virtual string ToString();
    public bool TryGetValue(T& value);
    public bool TryGetError(E& error);
    public bool TryGetValue(T& value, E& error);
    public bool TryGetError(E& error, T& value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsFailure();
    public sealed virtual bool get_IsSuccess();
    public sealed virtual E get_Error();
    public sealed virtual T get_Value();
    private sealed virtual override void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context);
    public T GetValueOrDefault(T defaultValue);
    public static Result`2<T, E> op_Implicit(T value);
    public static Result`2<T, E> op_Implicit(E error);
    public static UnitResult`1<E> op_Implicit(Result`2<T, E> result);
}
[ExtensionAttribute]
public static class CSharpFunctionalExtensions.ResultExtensions : object {
    private static TransactionOptions _transactionOptions;
    private static ResultExtensions();
    [ExtensionAttribute]
public static Result`2<K, E> Bind(Result`2<T, E> result, Func`2<T, Result`2<K, E>> func);
    [ExtensionAttribute]
public static Result`1<K> Bind(Result`1<T> result, Func`2<T, Result`1<K>> func);
    [ExtensionAttribute]
public static Result`1<K> Bind(Result result, Func`1<Result`1<K>> func);
    [ExtensionAttribute]
public static Result Bind(Result`1<T> result, Func`2<T, Result> func);
    [ExtensionAttribute]
public static Result Bind(Result result, Func`1<Result> func);
    [ExtensionAttribute]
public static UnitResult`1<E> Bind(UnitResult`1<E> result, Func`1<UnitResult`1<E>> func);
    [ExtensionAttribute]
public static Result`2<T, E> Bind(UnitResult`1<E> result, Func`1<Result`2<T, E>> func);
    [ExtensionAttribute]
public static UnitResult`1<E> Bind(Result`2<T, E> result, Func`2<T, UnitResult`1<E>> func);
    [ExtensionAttribute]
public static Result BindIf(Result result, bool condition, Func`1<Result> func);
    [ExtensionAttribute]
public static Result`1<T> BindIf(Result`1<T> result, bool condition, Func`2<T, Result`1<T>> func);
    [ExtensionAttribute]
public static UnitResult`1<E> BindIf(UnitResult`1<E> result, bool condition, Func`1<UnitResult`1<E>> func);
    [ExtensionAttribute]
public static Result`2<T, E> BindIf(Result`2<T, E> result, bool condition, Func`2<T, Result`2<T, E>> func);
    [ExtensionAttribute]
public static Result BindIf(Result result, Func`1<bool> predicate, Func`1<Result> func);
    [ExtensionAttribute]
public static Result`1<T> BindIf(Result`1<T> result, Func`2<T, bool> predicate, Func`2<T, Result`1<T>> func);
    [ExtensionAttribute]
public static UnitResult`1<E> BindIf(UnitResult`1<E> result, Func`1<bool> predicate, Func`1<UnitResult`1<E>> func);
    [ExtensionAttribute]
public static Result`2<T, E> BindIf(Result`2<T, E> result, Func`2<T, bool> predicate, Func`2<T, Result`2<T, E>> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<BindIf>d__16")]
[ExtensionAttribute]
public static Task`1<Result> BindIf(Task`1<Result> resultTask, bool condition, Func`1<Task`1<Result>> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<BindIf>d__17`1")]
[ExtensionAttribute]
public static Task`1<Result`1<T>> BindIf(Task`1<Result`1<T>> resultTask, bool condition, Func`2<T, Task`1<Result`1<T>>> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<BindIf>d__18`1")]
[ExtensionAttribute]
public static Task`1<UnitResult`1<E>> BindIf(Task`1<UnitResult`1<E>> resultTask, bool condition, Func`1<Task`1<UnitResult`1<E>>> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<BindIf>d__19`2")]
[ExtensionAttribute]
public static Task`1<Result`2<T, E>> BindIf(Task`1<Result`2<T, E>> resultTask, bool condition, Func`2<T, Task`1<Result`2<T, E>>> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<BindIf>d__20")]
[ExtensionAttribute]
public static Task`1<Result> BindIf(Task`1<Result> resultTask, Func`1<bool> predicate, Func`1<Task`1<Result>> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<BindIf>d__21`1")]
[ExtensionAttribute]
public static Task`1<Result`1<T>> BindIf(Task`1<Result`1<T>> resultTask, Func`2<T, bool> predicate, Func`2<T, Task`1<Result`1<T>>> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<BindIf>d__22`1")]
[ExtensionAttribute]
public static Task`1<UnitResult`1<E>> BindIf(Task`1<UnitResult`1<E>> resultTask, Func`1<bool> predicate, Func`1<Task`1<UnitResult`1<E>>> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<BindIf>d__23`2")]
[ExtensionAttribute]
public static Task`1<Result`2<T, E>> BindIf(Task`1<Result`2<T, E>> resultTask, Func`2<T, bool> predicate, Func`2<T, Task`1<Result`2<T, E>>> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<BindIf>d__24")]
[ExtensionAttribute]
public static Task`1<Result> BindIf(Task`1<Result> resultTask, bool condition, Func`1<Result> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<BindIf>d__25`1")]
[ExtensionAttribute]
public static Task`1<Result`1<T>> BindIf(Task`1<Result`1<T>> resultTask, bool condition, Func`2<T, Result`1<T>> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<BindIf>d__26`1")]
[ExtensionAttribute]
public static Task`1<UnitResult`1<E>> BindIf(Task`1<UnitResult`1<E>> resultTask, bool condition, Func`1<UnitResult`1<E>> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<BindIf>d__27`2")]
[ExtensionAttribute]
public static Task`1<Result`2<T, E>> BindIf(Task`1<Result`2<T, E>> resultTask, bool condition, Func`2<T, Result`2<T, E>> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<BindIf>d__28")]
[ExtensionAttribute]
public static Task`1<Result> BindIf(Task`1<Result> resultTask, Func`1<bool> predicate, Func`1<Result> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<BindIf>d__29`1")]
[ExtensionAttribute]
public static Task`1<Result`1<T>> BindIf(Task`1<Result`1<T>> resultTask, Func`2<T, bool> predicate, Func`2<T, Result`1<T>> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<BindIf>d__30`1")]
[ExtensionAttribute]
public static Task`1<UnitResult`1<E>> BindIf(Task`1<UnitResult`1<E>> resultTask, Func`1<bool> predicate, Func`1<UnitResult`1<E>> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<BindIf>d__31`2")]
[ExtensionAttribute]
public static Task`1<Result`2<T, E>> BindIf(Task`1<Result`2<T, E>> resultTask, Func`2<T, bool> predicate, Func`2<T, Result`2<T, E>> func);
    [ExtensionAttribute]
public static Task`1<Result> BindIf(Result result, bool condition, Func`1<Task`1<Result>> func);
    [ExtensionAttribute]
public static Task`1<Result`1<T>> BindIf(Result`1<T> result, bool condition, Func`2<T, Task`1<Result`1<T>>> func);
    [ExtensionAttribute]
public static Task`1<UnitResult`1<E>> BindIf(UnitResult`1<E> result, bool condition, Func`1<Task`1<UnitResult`1<E>>> func);
    [ExtensionAttribute]
public static Task`1<Result`2<T, E>> BindIf(Result`2<T, E> result, bool condition, Func`2<T, Task`1<Result`2<T, E>>> func);
    [ExtensionAttribute]
public static Task`1<Result> BindIf(Result result, Func`1<bool> predicate, Func`1<Task`1<Result>> func);
    [ExtensionAttribute]
public static Task`1<Result`1<T>> BindIf(Result`1<T> result, Func`2<T, bool> predicate, Func`2<T, Task`1<Result`1<T>>> func);
    [ExtensionAttribute]
public static Task`1<UnitResult`1<E>> BindIf(UnitResult`1<E> result, Func`1<bool> predicate, Func`1<Task`1<UnitResult`1<E>>> func);
    [ExtensionAttribute]
public static Task`1<Result`2<T, E>> BindIf(Result`2<T, E> result, Func`2<T, bool> predicate, Func`2<T, Task`1<Result`2<T, E>>> func);
    [ExtensionAttribute]
public static Result BindTry(Result result, Func`1<Result> func, Func`2<Exception, string> errorHandler);
    [ExtensionAttribute]
public static Result`1<K> BindTry(Result result, Func`1<Result`1<K>> func, Func`2<Exception, string> errorHandler);
    [ExtensionAttribute]
public static Result BindTry(Result`1<T> result, Func`2<T, Result> func, Func`2<Exception, string> errorHandler);
    [ExtensionAttribute]
public static Result`1<K> BindTry(Result`1<T> result, Func`2<T, Result`1<K>> func, Func`2<Exception, string> errorHandler);
    [ExtensionAttribute]
public static Result`2<K, E> BindTry(Result`2<T, E> result, Func`2<T, Result`2<K, E>> func, Func`2<Exception, E> errorHandler);
    [ExtensionAttribute]
public static UnitResult`1<E> BindTry(UnitResult`1<E> result, Func`1<UnitResult`1<E>> func, Func`2<Exception, E> errorHandler);
    [ExtensionAttribute]
public static Result`2<T, E> BindTry(UnitResult`1<E> result, Func`1<Result`2<T, E>> func, Func`2<Exception, E> errorHandler);
    [ExtensionAttribute]
public static UnitResult`1<E> BindTry(Result`2<T, E> result, Func`2<T, UnitResult`1<E>> func, Func`2<Exception, E> errorHandler);
    [ExtensionAttribute]
public static Result`1<K> BindWithTransactionScope(Result`1<T> self, Func`2<T, Result`1<K>> f);
    [ExtensionAttribute]
public static Result`1<K> BindWithTransactionScope(Result self, Func`1<Result`1<K>> f);
    [ExtensionAttribute]
public static Result BindWithTransactionScope(Result`1<T> self, Func`2<T, Result> f);
    [ExtensionAttribute]
public static Result BindWithTransactionScope(Result self, Func`1<Result> f);
    [ExtensionAttribute]
public static Result`2<K, E> BindWithTransactionScope(Result`2<T, E> self, Func`2<T, Result`2<K, E>> f);
    [ExtensionAttribute]
public static Task`1<Result`2<K, E>> BindWithTransactionScope(Task`1<Result`2<T, E>> self, Func`2<T, Task`1<Result`2<K, E>>> f);
    [ExtensionAttribute]
public static Task`1<Result`1<K>> BindWithTransactionScope(Task`1<Result`1<T>> self, Func`2<T, Task`1<Result`1<K>>> f);
    [ExtensionAttribute]
public static Task`1<Result`1<K>> BindWithTransactionScope(Task`1<Result> self, Func`1<Task`1<Result`1<K>>> f);
    [ExtensionAttribute]
public static Task`1<Result> BindWithTransactionScope(Task`1<Result`1<T>> self, Func`2<T, Task`1<Result>> f);
    [ExtensionAttribute]
public static Task`1<Result> BindWithTransactionScope(Task`1<Result> self, Func`1<Task`1<Result>> f);
    [ExtensionAttribute]
public static Task`1<Result`2<K, E>> BindWithTransactionScope(Task`1<Result`2<T, E>> self, Func`2<T, Result`2<K, E>> f);
    [ExtensionAttribute]
public static Task`1<Result`1<K>> BindWithTransactionScope(Task`1<Result`1<T>> self, Func`2<T, Result`1<K>> f);
    [ExtensionAttribute]
public static Task`1<Result`1<K>> BindWithTransactionScope(Task`1<Result> self, Func`1<Result`1<K>> f);
    [ExtensionAttribute]
public static Task`1<Result> BindWithTransactionScope(Task`1<Result`1<T>> self, Func`2<T, Result> f);
    [ExtensionAttribute]
public static Task`1<Result> BindWithTransactionScope(Task`1<Result> self, Func`1<Result> f);
    [ExtensionAttribute]
public static Task`1<Result`2<K, E>> BindWithTransactionScope(Result`2<T, E> self, Func`2<T, Task`1<Result`2<K, E>>> f);
    [ExtensionAttribute]
public static Task`1<Result`1<K>> BindWithTransactionScope(Result`1<T> self, Func`2<T, Task`1<Result`1<K>>> f);
    [ExtensionAttribute]
public static Task`1<Result`1<K>> BindWithTransactionScope(Result self, Func`1<Task`1<Result`1<K>>> f);
    [ExtensionAttribute]
public static Task`1<Result> BindWithTransactionScope(Result`1<T> self, Func`2<T, Task`1<Result>> f);
    [ExtensionAttribute]
public static Task`1<Result> BindWithTransactionScope(Result self, Func`1<Task`1<Result>> f);
    [ExtensionAttribute]
public static Result`1<ValueTuple`2<T, K>> BindZip(Result`1<T> result, Func`2<T, Result`1<K>> func);
    [ExtensionAttribute]
public static Result`2<ValueTuple`2<T, K>, E> BindZip(Result`2<T, E> result, Func`2<T, Result`2<K, E>> func);
    [ExtensionAttribute]
public static Result`1<ValueTuple`3<T1, T2, K>> BindZip(Result`1<ValueTuple`2<T1, T2>> result, Func`3<T1, T2, Result`1<K>> func);
    [ExtensionAttribute]
public static Result`2<ValueTuple`3<T1, T2, K>, E> BindZip(Result`2<ValueTuple`2<T1, T2>, E> result, Func`3<T1, T2, Result`2<K, E>> func);
    [ExtensionAttribute]
public static Result`1<ValueTuple`4<T1, T2, T3, K>> BindZip(Result`1<ValueTuple`3<T1, T2, T3>> result, Func`4<T1, T2, T3, Result`1<K>> func);
    [ExtensionAttribute]
public static Result`2<ValueTuple`4<T1, T2, T3, K>, E> BindZip(Result`2<ValueTuple`3<T1, T2, T3>, E> result, Func`4<T1, T2, T3, Result`2<K, E>> func);
    [ExtensionAttribute]
public static Result`1<ValueTuple`5<T1, T2, T3, T4, K>> BindZip(Result`1<ValueTuple`4<T1, T2, T3, T4>> result, Func`5<T1, T2, T3, T4, Result`1<K>> func);
    [ExtensionAttribute]
public static Result`2<ValueTuple`5<T1, T2, T3, T4, K>, E> BindZip(Result`2<ValueTuple`4<T1, T2, T3, T4>, E> result, Func`5<T1, T2, T3, T4, Result`2<K, E>> func);
    [ExtensionAttribute]
public static Result`1<ValueTuple`6<T1, T2, T3, T4, T5, K>> BindZip(Result`1<ValueTuple`5<T1, T2, T3, T4, T5>> result, Func`6<T1, T2, T3, T4, T5, Result`1<K>> func);
    [ExtensionAttribute]
public static Result`2<ValueTuple`6<T1, T2, T3, T4, T5, K>, E> BindZip(Result`2<ValueTuple`5<T1, T2, T3, T4, T5>, E> result, Func`6<T1, T2, T3, T4, T5, Result`2<K, E>> func);
    [ExtensionAttribute]
public static Result`1<ValueTuple`7<T1, T2, T3, T4, T5, T6, K>> BindZip(Result`1<ValueTuple`6<T1, T2, T3, T4, T5, T6>> result, Func`7<T1, T2, T3, T4, T5, T6, Result`1<K>> func);
    [ExtensionAttribute]
public static Result`2<ValueTuple`7<T1, T2, T3, T4, T5, T6, K>, E> BindZip(Result`2<ValueTuple`6<T1, T2, T3, T4, T5, T6>, E> result, Func`7<T1, T2, T3, T4, T5, T6, Result`2<K, E>> func);
    [ExtensionAttribute]
public static Result`1<ValueTuple`8<T1, T2, T3, T4, T5, T6, T7, ValueTuple`1<K>>> BindZip(Result`1<ValueTuple`7<T1, T2, T3, T4, T5, T6, T7>> result, Func`8<T1, T2, T3, T4, T5, T6, T7, Result`1<K>> func);
    [ExtensionAttribute]
public static Result`2<ValueTuple`8<T1, T2, T3, T4, T5, T6, T7, ValueTuple`1<K>>, E> BindZip(Result`2<ValueTuple`7<T1, T2, T3, T4, T5, T6, T7>, E> result, Func`8<T1, T2, T3, T4, T5, T6, T7, Result`2<K, E>> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<BindZip>d__82`2")]
[ExtensionAttribute]
public static Task`1<Result`1<ValueTuple`2<T, K>>> BindZip(Task`1<Result`1<T>> resultTask, Func`2<T, Task`1<Result`1<K>>> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<BindZip>d__83`3")]
[ExtensionAttribute]
public static Task`1<Result`2<ValueTuple`2<T, K>, E>> BindZip(Task`1<Result`2<T, E>> resultTask, Func`2<T, Task`1<Result`2<K, E>>> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<BindZip>d__84`3")]
[ExtensionAttribute]
public static Task`1<Result`1<ValueTuple`3<T1, T2, K>>> BindZip(Task`1<Result`1<ValueTuple`2<T1, T2>>> resultTask, Func`3<T1, T2, Task`1<Result`1<K>>> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<BindZip>d__85`4")]
[ExtensionAttribute]
public static Task`1<Result`2<ValueTuple`3<T1, T2, K>, E>> BindZip(Task`1<Result`2<ValueTuple`2<T1, T2>, E>> resultTask, Func`3<T1, T2, Task`1<Result`2<K, E>>> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<BindZip>d__86`4")]
[ExtensionAttribute]
public static Task`1<Result`1<ValueTuple`4<T1, T2, T3, K>>> BindZip(Task`1<Result`1<ValueTuple`3<T1, T2, T3>>> resultTask, Func`4<T1, T2, T3, Task`1<Result`1<K>>> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<BindZip>d__87`5")]
[ExtensionAttribute]
public static Task`1<Result`2<ValueTuple`4<T1, T2, T3, K>, E>> BindZip(Task`1<Result`2<ValueTuple`3<T1, T2, T3>, E>> resultTask, Func`4<T1, T2, T3, Task`1<Result`2<K, E>>> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<BindZip>d__88`5")]
[ExtensionAttribute]
public static Task`1<Result`1<ValueTuple`5<T1, T2, T3, T4, K>>> BindZip(Task`1<Result`1<ValueTuple`4<T1, T2, T3, T4>>> resultTask, Func`5<T1, T2, T3, T4, Task`1<Result`1<K>>> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<BindZip>d__89`6")]
[ExtensionAttribute]
public static Task`1<Result`2<ValueTuple`5<T1, T2, T3, T4, K>, E>> BindZip(Task`1<Result`2<ValueTuple`4<T1, T2, T3, T4>, E>> resultTask, Func`5<T1, T2, T3, T4, Task`1<Result`2<K, E>>> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<BindZip>d__90`6")]
[ExtensionAttribute]
public static Task`1<Result`1<ValueTuple`6<T1, T2, T3, T4, T5, K>>> BindZip(Task`1<Result`1<ValueTuple`5<T1, T2, T3, T4, T5>>> resultTask, Func`6<T1, T2, T3, T4, T5, Task`1<Result`1<K>>> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<BindZip>d__91`7")]
[ExtensionAttribute]
public static Task`1<Result`2<ValueTuple`6<T1, T2, T3, T4, T5, K>, E>> BindZip(Task`1<Result`2<ValueTuple`5<T1, T2, T3, T4, T5>, E>> resultTask, Func`6<T1, T2, T3, T4, T5, Task`1<Result`2<K, E>>> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<BindZip>d__92`7")]
[ExtensionAttribute]
public static Task`1<Result`1<ValueTuple`7<T1, T2, T3, T4, T5, T6, K>>> BindZip(Task`1<Result`1<ValueTuple`6<T1, T2, T3, T4, T5, T6>>> resultTask, Func`7<T1, T2, T3, T4, T5, T6, Task`1<Result`1<K>>> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<BindZip>d__93`8")]
[ExtensionAttribute]
public static Task`1<Result`2<ValueTuple`7<T1, T2, T3, T4, T5, T6, K>, E>> BindZip(Task`1<Result`2<ValueTuple`6<T1, T2, T3, T4, T5, T6>, E>> resultTask, Func`7<T1, T2, T3, T4, T5, T6, Task`1<Result`2<K, E>>> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<BindZip>d__94`8")]
[ExtensionAttribute]
public static Task`1<Result`1<ValueTuple`8<T1, T2, T3, T4, T5, T6, T7, ValueTuple`1<K>>>> BindZip(Task`1<Result`1<ValueTuple`7<T1, T2, T3, T4, T5, T6, T7>>> resultTask, Func`8<T1, T2, T3, T4, T5, T6, T7, Task`1<Result`1<K>>> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<BindZip>d__95`9")]
[ExtensionAttribute]
public static Task`1<Result`2<ValueTuple`8<T1, T2, T3, T4, T5, T6, T7, ValueTuple`1<K>>, E>> BindZip(Task`1<Result`2<ValueTuple`7<T1, T2, T3, T4, T5, T6, T7>, E>> resultTask, Func`8<T1, T2, T3, T4, T5, T6, T7, Task`1<Result`2<K, E>>> func);
    [ExtensionAttribute]
public static Task`1<Result`1<ValueTuple`2<T, K>>> BindZip(Result`1<T> result, Func`2<T, Task`1<Result`1<K>>> func);
    [ExtensionAttribute]
public static Task`1<Result`2<ValueTuple`2<T, K>, E>> BindZip(Result`2<T, E> result, Func`2<T, Task`1<Result`2<K, E>>> func);
    [ExtensionAttribute]
public static Task`1<Result`1<ValueTuple`3<T1, T2, K>>> BindZip(Result`1<ValueTuple`2<T1, T2>> result, Func`3<T1, T2, Task`1<Result`1<K>>> func);
    [ExtensionAttribute]
public static Task`1<Result`2<ValueTuple`3<T1, T2, K>, E>> BindZip(Result`2<ValueTuple`2<T1, T2>, E> result, Func`3<T1, T2, Task`1<Result`2<K, E>>> func);
    [ExtensionAttribute]
public static Task`1<Result`1<ValueTuple`4<T1, T2, T3, K>>> BindZip(Result`1<ValueTuple`3<T1, T2, T3>> result, Func`4<T1, T2, T3, Task`1<Result`1<K>>> func);
    [ExtensionAttribute]
public static Task`1<Result`2<ValueTuple`4<T1, T2, T3, K>, E>> BindZip(Result`2<ValueTuple`3<T1, T2, T3>, E> result, Func`4<T1, T2, T3, Task`1<Result`2<K, E>>> func);
    [ExtensionAttribute]
public static Task`1<Result`1<ValueTuple`5<T1, T2, T3, T4, K>>> BindZip(Result`1<ValueTuple`4<T1, T2, T3, T4>> result, Func`5<T1, T2, T3, T4, Task`1<Result`1<K>>> func);
    [ExtensionAttribute]
public static Task`1<Result`2<ValueTuple`5<T1, T2, T3, T4, K>, E>> BindZip(Result`2<ValueTuple`4<T1, T2, T3, T4>, E> result, Func`5<T1, T2, T3, T4, Task`1<Result`2<K, E>>> func);
    [ExtensionAttribute]
public static Task`1<Result`1<ValueTuple`6<T1, T2, T3, T4, T5, K>>> BindZip(Result`1<ValueTuple`5<T1, T2, T3, T4, T5>> result, Func`6<T1, T2, T3, T4, T5, Task`1<Result`1<K>>> func);
    [ExtensionAttribute]
public static Task`1<Result`2<ValueTuple`6<T1, T2, T3, T4, T5, K>, E>> BindZip(Result`2<ValueTuple`5<T1, T2, T3, T4, T5>, E> result, Func`6<T1, T2, T3, T4, T5, Task`1<Result`2<K, E>>> func);
    [ExtensionAttribute]
public static Task`1<Result`1<ValueTuple`7<T1, T2, T3, T4, T5, T6, K>>> BindZip(Result`1<ValueTuple`6<T1, T2, T3, T4, T5, T6>> result, Func`7<T1, T2, T3, T4, T5, T6, Task`1<Result`1<K>>> func);
    [ExtensionAttribute]
public static Task`1<Result`2<ValueTuple`7<T1, T2, T3, T4, T5, T6, K>, E>> BindZip(Result`2<ValueTuple`6<T1, T2, T3, T4, T5, T6>, E> result, Func`7<T1, T2, T3, T4, T5, T6, Task`1<Result`2<K, E>>> func);
    [ExtensionAttribute]
public static Task`1<Result`1<ValueTuple`8<T1, T2, T3, T4, T5, T6, T7, ValueTuple`1<K>>>> BindZip(Result`1<ValueTuple`7<T1, T2, T3, T4, T5, T6, T7>> result, Func`8<T1, T2, T3, T4, T5, T6, T7, Task`1<Result`1<K>>> func);
    [ExtensionAttribute]
public static Task`1<Result`2<ValueTuple`8<T1, T2, T3, T4, T5, T6, T7, ValueTuple`1<K>>, E>> BindZip(Result`2<ValueTuple`7<T1, T2, T3, T4, T5, T6, T7>, E> result, Func`8<T1, T2, T3, T4, T5, T6, T7, Task`1<Result`2<K, E>>> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<BindZip>d__110`2")]
[ExtensionAttribute]
public static Task`1<Result`1<ValueTuple`2<T, K>>> BindZip(Task`1<Result`1<T>> resultTask, Func`2<T, Result`1<K>> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<BindZip>d__111`3")]
[ExtensionAttribute]
public static Task`1<Result`2<ValueTuple`2<T, K>, E>> BindZip(Task`1<Result`2<T, E>> resultTask, Func`2<T, Result`2<K, E>> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<BindZip>d__112`3")]
[ExtensionAttribute]
public static Task`1<Result`1<ValueTuple`3<T1, T2, K>>> BindZip(Task`1<Result`1<ValueTuple`2<T1, T2>>> resultTask, Func`3<T1, T2, Result`1<K>> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<BindZip>d__113`4")]
[ExtensionAttribute]
public static Task`1<Result`2<ValueTuple`3<T1, T2, K>, E>> BindZip(Task`1<Result`2<ValueTuple`2<T1, T2>, E>> resultTask, Func`3<T1, T2, Result`2<K, E>> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<BindZip>d__114`4")]
[ExtensionAttribute]
public static Task`1<Result`1<ValueTuple`4<T1, T2, T3, K>>> BindZip(Task`1<Result`1<ValueTuple`3<T1, T2, T3>>> resultTask, Func`4<T1, T2, T3, Result`1<K>> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<BindZip>d__115`5")]
[ExtensionAttribute]
public static Task`1<Result`2<ValueTuple`4<T1, T2, T3, K>, E>> BindZip(Task`1<Result`2<ValueTuple`3<T1, T2, T3>, E>> resultTask, Func`4<T1, T2, T3, Result`2<K, E>> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<BindZip>d__116`5")]
[ExtensionAttribute]
public static Task`1<Result`1<ValueTuple`5<T1, T2, T3, T4, K>>> BindZip(Task`1<Result`1<ValueTuple`4<T1, T2, T3, T4>>> resultTask, Func`5<T1, T2, T3, T4, Result`1<K>> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<BindZip>d__117`6")]
[ExtensionAttribute]
public static Task`1<Result`2<ValueTuple`5<T1, T2, T3, T4, K>, E>> BindZip(Task`1<Result`2<ValueTuple`4<T1, T2, T3, T4>, E>> resultTask, Func`5<T1, T2, T3, T4, Result`2<K, E>> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<BindZip>d__118`6")]
[ExtensionAttribute]
public static Task`1<Result`1<ValueTuple`6<T1, T2, T3, T4, T5, K>>> BindZip(Task`1<Result`1<ValueTuple`5<T1, T2, T3, T4, T5>>> resultTask, Func`6<T1, T2, T3, T4, T5, Result`1<K>> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<BindZip>d__119`7")]
[ExtensionAttribute]
public static Task`1<Result`2<ValueTuple`6<T1, T2, T3, T4, T5, K>, E>> BindZip(Task`1<Result`2<ValueTuple`5<T1, T2, T3, T4, T5>, E>> resultTask, Func`6<T1, T2, T3, T4, T5, Result`2<K, E>> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<BindZip>d__120`7")]
[ExtensionAttribute]
public static Task`1<Result`1<ValueTuple`7<T1, T2, T3, T4, T5, T6, K>>> BindZip(Task`1<Result`1<ValueTuple`6<T1, T2, T3, T4, T5, T6>>> resultTask, Func`7<T1, T2, T3, T4, T5, T6, Result`1<K>> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<BindZip>d__121`8")]
[ExtensionAttribute]
public static Task`1<Result`2<ValueTuple`7<T1, T2, T3, T4, T5, T6, K>, E>> BindZip(Task`1<Result`2<ValueTuple`6<T1, T2, T3, T4, T5, T6>, E>> resultTask, Func`7<T1, T2, T3, T4, T5, T6, Result`2<K, E>> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<BindZip>d__122`8")]
[ExtensionAttribute]
public static Task`1<Result`1<ValueTuple`8<T1, T2, T3, T4, T5, T6, T7, ValueTuple`1<K>>>> BindZip(Task`1<Result`1<ValueTuple`7<T1, T2, T3, T4, T5, T6, T7>>> resultTask, Func`8<T1, T2, T3, T4, T5, T6, T7, Result`1<K>> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<BindZip>d__123`9")]
[ExtensionAttribute]
public static Task`1<Result`2<ValueTuple`8<T1, T2, T3, T4, T5, T6, T7, ValueTuple`1<K>>, E>> BindZip(Task`1<Result`2<ValueTuple`7<T1, T2, T3, T4, T5, T6, T7>, E>> resultTask, Func`8<T1, T2, T3, T4, T5, T6, T7, Result`2<K, E>> func);
    [ExtensionAttribute]
public static Result`1<T> Check(Result`1<T> result, Func`2<T, Result> func);
    [ExtensionAttribute]
public static Result`1<T> Check(Result`1<T> result, Func`2<T, Result`1<K>> func);
    [ExtensionAttribute]
public static Result`2<T, E> Check(Result`2<T, E> result, Func`2<T, Result`2<K, E>> func);
    [ExtensionAttribute]
public static Result`2<T, E> Check(Result`2<T, E> result, Func`2<T, UnitResult`1<E>> func);
    [ExtensionAttribute]
public static UnitResult`1<E> Check(UnitResult`1<E> result, Func`1<UnitResult`1<E>> func);
    [ExtensionAttribute]
public static Result`1<T> CheckIf(Result`1<T> result, bool condition, Func`2<T, Result> func);
    [ExtensionAttribute]
public static Result`1<T> CheckIf(Result`1<T> result, bool condition, Func`2<T, Result`1<K>> func);
    [ExtensionAttribute]
public static Result`2<T, E> CheckIf(Result`2<T, E> result, bool condition, Func`2<T, Result`2<K, E>> func);
    [ExtensionAttribute]
public static Result`2<T, E> CheckIf(Result`2<T, E> result, bool condition, Func`2<T, UnitResult`1<E>> func);
    [ExtensionAttribute]
public static UnitResult`1<E> CheckIf(UnitResult`1<E> result, bool condition, Func`1<UnitResult`1<E>> func);
    [ExtensionAttribute]
public static Result`1<T> CheckIf(Result`1<T> result, Func`2<T, bool> predicate, Func`2<T, Result> func);
    [ExtensionAttribute]
public static Result`1<T> CheckIf(Result`1<T> result, Func`2<T, bool> predicate, Func`2<T, Result`1<K>> func);
    [ExtensionAttribute]
public static Result`2<T, E> CheckIf(Result`2<T, E> result, Func`2<T, bool> predicate, Func`2<T, Result`2<K, E>> func);
    [ExtensionAttribute]
public static Result`2<T, E> CheckIf(Result`2<T, E> result, Func`2<T, bool> predicate, Func`2<T, UnitResult`1<E>> func);
    [ExtensionAttribute]
public static UnitResult`1<E> CheckIf(UnitResult`1<E> result, Func`1<bool> predicate, Func`1<UnitResult`1<E>> func);
    [ExtensionAttribute]
public static Result Combine(IEnumerable`1<Result> results, string errorMessageSeparator);
    [ExtensionAttribute]
public static UnitResult`1<E> Combine(IEnumerable`1<UnitResult`1<E>> results);
    [ExtensionAttribute]
public static Result`2<IEnumerable`1<T>, E> Combine(IEnumerable`1<Result`2<T, E>> results);
    [ExtensionAttribute]
public static Result`2<IEnumerable`1<T>, E> Combine(IEnumerable`1<Result`2<T, E>> results, Func`2<IEnumerable`1<E>, E> composerError);
    [ExtensionAttribute]
public static Result`1<IEnumerable`1<T>> Combine(IEnumerable`1<Result`1<T>> results, string errorMessageSeparator);
    [ExtensionAttribute]
public static Result`2<K, E> Combine(IEnumerable`1<Result`2<T, E>> results, Func`2<IEnumerable`1<T>, K> composer, Func`2<IEnumerable`1<E>, E> composerError);
    [ExtensionAttribute]
public static Result`2<K, E> Combine(IEnumerable`1<Result`2<T, E>> results, Func`2<IEnumerable`1<T>, K> composer);
    [ExtensionAttribute]
public static Result`1<K> Combine(IEnumerable`1<Result`1<T>> results, Func`2<IEnumerable`1<T>, K> composer, string errorMessageSeparator);
    [ExtensionAttribute]
public static Result Compensate(Result result, Func`2<string, Result> func);
    [ExtensionAttribute]
public static UnitResult`1<E> Compensate(Result result, Func`2<string, UnitResult`1<E>> func);
    [ExtensionAttribute]
public static Result Compensate(Result`1<T> result, Func`2<string, Result> func);
    [ExtensionAttribute]
public static Result`1<T> Compensate(Result`1<T> result, Func`2<string, Result`1<T>> func);
    [ExtensionAttribute]
public static Result`2<T, E> Compensate(Result`1<T> result, Func`2<string, Result`2<T, E>> func);
    [ExtensionAttribute]
public static Result Compensate(UnitResult`1<E> result, Func`2<E, Result> func);
    [ExtensionAttribute]
public static UnitResult`1<E2> Compensate(UnitResult`1<E> result, Func`2<E, UnitResult`1<E2>> func);
    [ExtensionAttribute]
public static Result Compensate(Result`2<T, E> result, Func`2<E, Result> func);
    [ExtensionAttribute]
public static UnitResult`1<E2> Compensate(Result`2<T, E> result, Func`2<E, UnitResult`1<E2>> func);
    [ExtensionAttribute]
public static Result`2<T, E2> Compensate(Result`2<T, E> result, Func`2<E, Result`2<T, E2>> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<Compensate>d__157")]
[ExtensionAttribute]
public static Task`1<Result> Compensate(Task`1<Result> resultTask, Func`2<string, Task`1<Result>> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<Compensate>d__158`1")]
[ExtensionAttribute]
public static Task`1<UnitResult`1<E>> Compensate(Task`1<Result> resultTask, Func`2<string, Task`1<UnitResult`1<E>>> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<Compensate>d__159`1")]
[ExtensionAttribute]
public static Task`1<Result> Compensate(Task`1<Result`1<T>> resultTask, Func`2<string, Task`1<Result>> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<Compensate>d__160`1")]
[ExtensionAttribute]
public static Task`1<Result`1<T>> Compensate(Task`1<Result`1<T>> resultTask, Func`2<string, Task`1<Result`1<T>>> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<Compensate>d__161`2")]
[ExtensionAttribute]
public static Task`1<Result`2<T, E>> Compensate(Task`1<Result`1<T>> resultTask, Func`2<string, Task`1<Result`2<T, E>>> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<Compensate>d__162`1")]
[ExtensionAttribute]
public static Task`1<Result> Compensate(Task`1<UnitResult`1<E>> resultTask, Func`2<E, Task`1<Result>> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<Compensate>d__163`2")]
[ExtensionAttribute]
public static Task`1<UnitResult`1<E2>> Compensate(Task`1<UnitResult`1<E>> resultTask, Func`2<E, Task`1<UnitResult`1<E2>>> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<Compensate>d__164`2")]
[ExtensionAttribute]
public static Task`1<Result> Compensate(Task`1<Result`2<T, E>> resultTask, Func`2<E, Task`1<Result>> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<Compensate>d__165`3")]
[ExtensionAttribute]
public static Task`1<UnitResult`1<E2>> Compensate(Task`1<Result`2<T, E>> resultTask, Func`2<E, Task`1<UnitResult`1<E2>>> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<Compensate>d__166`3")]
[ExtensionAttribute]
public static Task`1<Result`2<T, E2>> Compensate(Task`1<Result`2<T, E>> resultTask, Func`2<E, Task`1<Result`2<T, E2>>> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<Compensate>d__167")]
[ExtensionAttribute]
public static Task`1<Result> Compensate(Task`1<Result> resultTask, Func`2<string, Result> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<Compensate>d__168`1")]
[ExtensionAttribute]
public static Task`1<UnitResult`1<E>> Compensate(Task`1<Result> resultTask, Func`2<string, UnitResult`1<E>> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<Compensate>d__169`1")]
[ExtensionAttribute]
public static Task`1<Result> Compensate(Task`1<Result`1<T>> resultTask, Func`2<string, Result> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<Compensate>d__170`1")]
[ExtensionAttribute]
public static Task`1<Result`1<T>> Compensate(Task`1<Result`1<T>> resultTask, Func`2<string, Result`1<T>> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<Compensate>d__171`2")]
[ExtensionAttribute]
public static Task`1<Result`2<T, E>> Compensate(Task`1<Result`1<T>> resultTask, Func`2<string, Result`2<T, E>> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<Compensate>d__172`1")]
[ExtensionAttribute]
public static Task`1<Result> Compensate(Task`1<UnitResult`1<E>> resultTask, Func`2<E, Result> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<Compensate>d__173`2")]
[ExtensionAttribute]
public static Task`1<UnitResult`1<E2>> Compensate(Task`1<UnitResult`1<E>> resultTask, Func`2<E, UnitResult`1<E2>> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<Compensate>d__174`2")]
[ExtensionAttribute]
public static Task`1<Result> Compensate(Task`1<Result`2<T, E>> resultTask, Func`2<E, Result> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<Compensate>d__175`3")]
[ExtensionAttribute]
public static Task`1<UnitResult`1<E2>> Compensate(Task`1<Result`2<T, E>> resultTask, Func`2<E, UnitResult`1<E2>> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<Compensate>d__176`3")]
[ExtensionAttribute]
public static Task`1<Result`2<T, E2>> Compensate(Task`1<Result`2<T, E>> resultTask, Func`2<E, Result`2<T, E2>> func);
    [ExtensionAttribute]
public static Task`1<Result> Compensate(Result result, Func`2<string, Task`1<Result>> func);
    [ExtensionAttribute]
public static Task`1<UnitResult`1<E>> Compensate(Result result, Func`2<string, Task`1<UnitResult`1<E>>> func);
    [ExtensionAttribute]
public static Task`1<Result> Compensate(Result`1<T> result, Func`2<string, Task`1<Result>> func);
    [ExtensionAttribute]
public static Task`1<Result`1<T>> Compensate(Result`1<T> result, Func`2<string, Task`1<Result`1<T>>> func);
    [ExtensionAttribute]
public static Task`1<Result`2<T, E>> Compensate(Result`1<T> result, Func`2<string, Task`1<Result`2<T, E>>> func);
    [ExtensionAttribute]
public static Task`1<Result> Compensate(UnitResult`1<E> result, Func`2<E, Task`1<Result>> func);
    [ExtensionAttribute]
public static Task`1<UnitResult`1<E2>> Compensate(UnitResult`1<E> result, Func`2<E, Task`1<UnitResult`1<E2>>> func);
    [ExtensionAttribute]
public static Task`1<Result> Compensate(Result`2<T, E> result, Func`2<E, Task`1<Result>> func);
    [ExtensionAttribute]
public static Task`1<UnitResult`1<E2>> Compensate(Result`2<T, E> result, Func`2<E, Task`1<UnitResult`1<E2>>> func);
    [ExtensionAttribute]
public static Task`1<Result`2<T, E2>> Compensate(Result`2<T, E> result, Func`2<E, Task`1<Result`2<T, E2>>> func);
    [ExtensionAttribute]
public static void Deconstruct(Result result, Boolean& isSuccess, Boolean& isFailure);
    [ExtensionAttribute]
public static void Deconstruct(Result result, Boolean& isSuccess, Boolean& isFailure, String& error);
    [ExtensionAttribute]
public static void Deconstruct(Result`1<T> result, Boolean& isSuccess, Boolean& isFailure);
    [ExtensionAttribute]
public static void Deconstruct(Result`1<T> result, Boolean& isSuccess, Boolean& isFailure, T& value);
    [ExtensionAttribute]
public static void Deconstruct(Result`1<T> result, Boolean& isSuccess, Boolean& isFailure, T& value, String& error);
    [ExtensionAttribute]
public static void Deconstruct(Result`2<T, E> result, Boolean& isSuccess, Boolean& isFailure);
    [ExtensionAttribute]
public static void Deconstruct(Result`2<T, E> result, Boolean& isSuccess, Boolean& isFailure, T& value);
    [ExtensionAttribute]
public static void Deconstruct(Result`2<T, E> result, Boolean& isSuccess, Boolean& isFailure, T& value, E& error);
    [ExtensionAttribute]
public static Result`2<T, E> Ensure(Result`2<T, E> result, Func`2<T, bool> predicate, Func`2<T, E> errorPredicate);
    [ExtensionAttribute]
public static Result`2<T, E> Ensure(Result`2<T, E> result, Func`2<T, bool> predicate, E error);
    [ExtensionAttribute]
public static Result`1<T> Ensure(Result`1<T> result, Func`2<T, bool> predicate, string errorMessage);
    [ExtensionAttribute]
public static Result`1<T> Ensure(Result`1<T> result, Func`2<T, bool> predicate, Func`2<T, string> errorPredicate);
    [ExtensionAttribute]
public static Result Ensure(Result result, Func`1<bool> predicate, string errorMessage);
    [ExtensionAttribute]
public static Result Ensure(Result result, Func`1<Result> predicate);
    [ExtensionAttribute]
public static Result`1<T> Ensure(Result`1<T> result, Func`1<Result> predicate);
    [ExtensionAttribute]
public static Result Ensure(Result result, Func`1<Result`1<T>> predicate);
    [ExtensionAttribute]
public static Result`1<T> Ensure(Result`1<T> result, Func`1<Result`1<T>> predicate);
    [ExtensionAttribute]
public static Result`1<T> Ensure(Result`1<T> result, Func`2<T, Result> predicate);
    [ExtensionAttribute]
public static Result`1<T> Ensure(Result`1<T> result, Func`2<T, Result`1<T>> predicate);
    [ExtensionAttribute]
public static UnitResult`1<E> Ensure(UnitResult`1<E> result, Func`1<bool> predicate, Func`1<E> errorPredicate);
    [ExtensionAttribute]
public static UnitResult`1<E> Ensure(UnitResult`1<E> result, Func`1<bool> predicate, E error);
    [ExtensionAttribute]
public static UnitResult`1<E> Ensure(UnitResult`1<E> result, Func`1<UnitResult`1<E>> predicate);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static Result`1<T> EnsureNotNull(Result`1<T> result, string error);
    [ExtensionAttribute]
public static Result`1<T> EnsureNotNull(Result`1<Nullable`1<T>> result, string error);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static Result`1<T> EnsureNotNull(Result`1<T> result, Func`1<string> errorFactory);
    [ExtensionAttribute]
public static Result`1<T> EnsureNotNull(Result`1<Nullable`1<T>> result, Func`1<string> errorFactory);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static Result`2<T, E> EnsureNotNull(Result`2<T, E> result, E error);
    [ExtensionAttribute]
public static Result`2<T, E> EnsureNotNull(Result`2<Nullable`1<T>, E> result, E error);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static Result`2<T, E> EnsureNotNull(Result`2<T, E> result, Func`1<E> errorFactory);
    [ExtensionAttribute]
public static Result`2<T, E> EnsureNotNull(Result`2<Nullable`1<T>, E> result, Func`1<E> errorFactory);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static Task`1<Result`1<T>> EnsureNotNull(Task`1<Result`1<T>> resultTask, string error);
    [ExtensionAttribute]
public static Task`1<Result`1<T>> EnsureNotNull(Task`1<Result`1<Nullable`1<T>>> resultTask, string error);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static Task`1<Result`1<T>> EnsureNotNull(Task`1<Result`1<T>> resultTask, Func`1<Task`1<string>> errorFactory);
    [ExtensionAttribute]
public static Task`1<Result`1<T>> EnsureNotNull(Task`1<Result`1<Nullable`1<T>>> resultTask, Func`1<Task`1<string>> errorFactory);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static Task`1<Result`2<T, E>> EnsureNotNull(Task`1<Result`2<T, E>> resultTask, E error);
    [ExtensionAttribute]
public static Task`1<Result`2<T, E>> EnsureNotNull(Task`1<Result`2<Nullable`1<T>, E>> resultTask, E error);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static Task`1<Result`2<T, E>> EnsureNotNull(Task`1<Result`2<T, E>> resultTask, Func`1<Task`1<E>> errorFactory);
    [ExtensionAttribute]
public static Task`1<Result`2<T, E>> EnsureNotNull(Task`1<Result`2<Nullable`1<T>, E>> resultTask, Func`1<Task`1<E>> errorFactory);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static Task`1<Result`1<T>> EnsureNotNull(Task`1<Result`1<T>> resultTask, Func`1<string> errorFactory);
    [ExtensionAttribute]
public static Task`1<Result`1<T>> EnsureNotNull(Task`1<Result`1<Nullable`1<T>>> resultTask, Func`1<string> errorFactory);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static Task`1<Result`2<T, E>> EnsureNotNull(Task`1<Result`2<T, E>> resultTask, Func`1<E> errorFactory);
    [ExtensionAttribute]
public static Task`1<Result`2<T, E>> EnsureNotNull(Task`1<Result`2<Nullable`1<T>, E>> resultTask, Func`1<E> errorFactory);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static Task`1<Result`1<T>> EnsureNotNull(Result`1<T> result, Func`1<Task`1<string>> errorFactory);
    [ExtensionAttribute]
public static Task`1<Result`1<T>> EnsureNotNull(Result`1<Nullable`1<T>> result, Func`1<Task`1<string>> errorFactory);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static Task`1<Result`2<T, E>> EnsureNotNull(Result`2<T, E> result, Func`1<Task`1<E>> errorFactory);
    [ExtensionAttribute]
public static Task`1<Result`2<T, E>> EnsureNotNull(Result`2<Nullable`1<T>, E> result, Func`1<Task`1<E>> errorFactory);
    [ExtensionAttribute]
public static T Finally(Result result, Func`2<Result, T> func);
    [ExtensionAttribute]
public static K Finally(Result`1<T> result, Func`2<Result`1<T>, K> func);
    [ExtensionAttribute]
public static K Finally(UnitResult`1<E> result, Func`2<UnitResult`1<E>, K> func);
    [ExtensionAttribute]
public static K Finally(Result`2<T, E> result, Func`2<Result`2<T, E>, K> func);
    [ExtensionAttribute]
public static T GetValueOrDefault(Result`1& result, Func`1<T> defaultValue);
    [ExtensionAttribute]
public static K GetValueOrDefault(Result`1& result, Func`2<T, K> selector, K defaultValue);
    [ExtensionAttribute]
public static K GetValueOrDefault(Result`1& result, Func`2<T, K> selector, Func`1<K> defaultValue);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<GetValueOrDefault>d__240`1")]
[ExtensionAttribute]
public static Task`1<T> GetValueOrDefault(Task`1<Result`1<T>> resultTask, Func`1<Task`1<T>> defaultValue);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<GetValueOrDefault>d__241`2")]
[ExtensionAttribute]
public static Task`1<K> GetValueOrDefault(Task`1<Result`1<T>> resultTask, Func`2<T, Task`1<K>> selector, K defaultValue);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<GetValueOrDefault>d__242`2")]
[ExtensionAttribute]
public static Task`1<K> GetValueOrDefault(Task`1<Result`1<T>> resultTask, Func`2<T, Task`1<K>> selector, Func`1<Task`1<K>> defaultValue);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<GetValueOrDefault>d__243`1")]
[ExtensionAttribute]
public static Task`1<T> GetValueOrDefault(Task`1<Result`1<T>> resultTask, Func`1<T> defaultValue);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<GetValueOrDefault>d__244`2")]
[ExtensionAttribute]
public static Task`1<K> GetValueOrDefault(Task`1<Result`1<T>> resultTask, Func`2<T, K> selector, K defaultValue);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<GetValueOrDefault>d__245`2")]
[ExtensionAttribute]
public static Task`1<K> GetValueOrDefault(Task`1<Result`1<T>> resultTask, Func`2<T, K> selector, Func`1<K> defaultValue);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<GetValueOrDefault>d__246`1")]
[ExtensionAttribute]
public static Task`1<T> GetValueOrDefault(Result`1<T> result, Func`1<Task`1<T>> defaultValue);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<GetValueOrDefault>d__247`2")]
[ExtensionAttribute]
public static Task`1<K> GetValueOrDefault(Result`1<T> result, Func`2<T, K> selector, Func`1<Task`1<K>> defaultValue);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<GetValueOrDefault>d__248`2")]
[ExtensionAttribute]
public static Task`1<K> GetValueOrDefault(Result`1<T> result, Func`2<T, Task`1<K>> selector, K defaultValue);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<GetValueOrDefault>d__249`2")]
[ExtensionAttribute]
public static Task`1<K> GetValueOrDefault(Result`1<T> result, Func`2<T, Task`1<K>> selector, Func`1<Task`1<K>> defaultValue);
    [ExtensionAttribute]
public static Result`2<K, E> Map(Result`2<T, E> result, Func`2<T, K> func);
    [ExtensionAttribute]
public static Result`2<K, E> Map(UnitResult`1<E> result, Func`1<K> func);
    [ExtensionAttribute]
public static Result`1<K> Map(Result`1<T> result, Func`2<T, K> func);
    [ExtensionAttribute]
public static Result`1<K> Map(Result result, Func`1<K> func);
    [ExtensionAttribute]
public static Result MapError(Result result, Func`2<string, string> errorFactory);
    [ExtensionAttribute]
public static UnitResult`1<E> MapError(Result result, Func`2<string, E> errorFactory);
    [ExtensionAttribute]
public static Result`1<T> MapError(Result`1<T> result, Func`2<string, string> errorFactory);
    [ExtensionAttribute]
public static Result`2<T, E> MapError(Result`1<T> result, Func`2<string, E> errorFactory);
    [ExtensionAttribute]
public static Result MapError(UnitResult`1<E> result, Func`2<E, string> errorFactory);
    [ExtensionAttribute]
public static UnitResult`1<E2> MapError(UnitResult`1<E> result, Func`2<E, E2> errorFactory);
    [ExtensionAttribute]
public static Result`1<T> MapError(Result`2<T, E> result, Func`2<E, string> errorFactory);
    [ExtensionAttribute]
public static Result`2<T, E2> MapError(Result`2<T, E> result, Func`2<E, E2> errorFactory);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<MapError>d__262")]
[ExtensionAttribute]
public static Task`1<Result> MapError(Task`1<Result> resultTask, Func`2<string, Task`1<string>> errorFactory);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<MapError>d__263`1")]
[ExtensionAttribute]
public static Task`1<UnitResult`1<E>> MapError(Task`1<Result> resultTask, Func`2<string, Task`1<E>> errorFactory);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<MapError>d__264`1")]
[ExtensionAttribute]
public static Task`1<Result`1<T>> MapError(Task`1<Result`1<T>> resultTask, Func`2<string, Task`1<string>> errorFactory);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<MapError>d__265`2")]
[ExtensionAttribute]
public static Task`1<Result`2<T, E>> MapError(Task`1<Result`1<T>> resultTask, Func`2<string, Task`1<E>> errorFactory);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<MapError>d__266`1")]
[ExtensionAttribute]
public static Task`1<Result> MapError(Task`1<UnitResult`1<E>> resultTask, Func`2<E, Task`1<string>> errorFactory);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<MapError>d__267`2")]
[ExtensionAttribute]
public static Task`1<UnitResult`1<E2>> MapError(Task`1<UnitResult`1<E>> resultTask, Func`2<E, Task`1<E2>> errorFactory);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<MapError>d__268`2")]
[ExtensionAttribute]
public static Task`1<Result`1<T>> MapError(Task`1<Result`2<T, E>> resultTask, Func`2<E, Task`1<string>> errorFactory);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<MapError>d__269`3")]
[ExtensionAttribute]
public static Task`1<Result`2<T, E2>> MapError(Task`1<Result`2<T, E>> resultTask, Func`2<E, Task`1<E2>> errorFactory);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<MapError>d__270")]
[ExtensionAttribute]
public static Task`1<Result> MapError(Task`1<Result> resultTask, Func`2<string, string> errorFactory);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<MapError>d__271`1")]
[ExtensionAttribute]
public static Task`1<UnitResult`1<E>> MapError(Task`1<Result> resultTask, Func`2<string, E> errorFactory);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<MapError>d__272`1")]
[ExtensionAttribute]
public static Task`1<Result`1<T>> MapError(Task`1<Result`1<T>> resultTask, Func`2<string, string> errorFactory);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<MapError>d__273`2")]
[ExtensionAttribute]
public static Task`1<Result`2<T, E>> MapError(Task`1<Result`1<T>> resultTask, Func`2<string, E> errorFactory);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<MapError>d__274`1")]
[ExtensionAttribute]
public static Task`1<Result> MapError(Task`1<UnitResult`1<E>> resultTask, Func`2<E, string> errorFactory);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<MapError>d__275`2")]
[ExtensionAttribute]
public static Task`1<UnitResult`1<E2>> MapError(Task`1<UnitResult`1<E>> resultTask, Func`2<E, E2> errorFactory);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<MapError>d__276`2")]
[ExtensionAttribute]
public static Task`1<Result`1<T>> MapError(Task`1<Result`2<T, E>> resultTask, Func`2<E, string> errorFactory);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<MapError>d__277`3")]
[ExtensionAttribute]
public static Task`1<Result`2<T, E2>> MapError(Task`1<Result`2<T, E>> resultTask, Func`2<E, E2> errorFactory);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<MapError>d__278")]
[ExtensionAttribute]
public static Task`1<Result> MapError(Result result, Func`2<string, Task`1<string>> errorFactory);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<MapError>d__279`1")]
[ExtensionAttribute]
public static Task`1<UnitResult`1<E>> MapError(Result result, Func`2<string, Task`1<E>> errorFactory);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<MapError>d__280`1")]
[ExtensionAttribute]
public static Task`1<Result`1<T>> MapError(Result`1<T> result, Func`2<string, Task`1<string>> errorFactory);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<MapError>d__281`2")]
[ExtensionAttribute]
public static Task`1<Result`2<T, E>> MapError(Result`1<T> result, Func`2<string, Task`1<E>> errorFactory);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<MapError>d__282`1")]
[ExtensionAttribute]
public static Task`1<Result> MapError(UnitResult`1<E> result, Func`2<E, Task`1<string>> errorFactory);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<MapError>d__283`2")]
[ExtensionAttribute]
public static Task`1<UnitResult`1<E2>> MapError(UnitResult`1<E> result, Func`2<E, Task`1<E2>> errorFactory);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<MapError>d__284`2")]
[ExtensionAttribute]
public static Task`1<Result`1<T>> MapError(Result`2<T, E> result, Func`2<E, Task`1<string>> errorFactory);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<MapError>d__285`3")]
[ExtensionAttribute]
public static Task`1<Result`2<T, E2>> MapError(Result`2<T, E> result, Func`2<E, Task`1<E2>> errorFactory);
    [ExtensionAttribute]
public static Result`1<T> MapIf(Result`1<T> result, bool condition, Func`2<T, T> func);
    [ExtensionAttribute]
public static Result`2<T, E> MapIf(Result`2<T, E> result, bool condition, Func`2<T, T> func);
    [ExtensionAttribute]
public static Result`1<T> MapIf(Result`1<T> result, Func`2<T, bool> predicate, Func`2<T, T> func);
    [ExtensionAttribute]
public static Result`2<T, E> MapIf(Result`2<T, E> result, Func`2<T, bool> predicate, Func`2<T, T> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<MapIf>d__290`1")]
[ExtensionAttribute]
public static Task`1<Result`1<T>> MapIf(Task`1<Result`1<T>> resultTask, bool condition, Func`2<T, Task`1<T>> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<MapIf>d__291`2")]
[ExtensionAttribute]
public static Task`1<Result`2<T, E>> MapIf(Task`1<Result`2<T, E>> resultTask, bool condition, Func`2<T, Task`1<T>> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<MapIf>d__292`1")]
[ExtensionAttribute]
public static Task`1<Result`1<T>> MapIf(Task`1<Result`1<T>> resultTask, Func`2<T, bool> predicate, Func`2<T, Task`1<T>> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<MapIf>d__293`2")]
[ExtensionAttribute]
public static Task`1<Result`2<T, E>> MapIf(Task`1<Result`2<T, E>> resultTask, Func`2<T, bool> predicate, Func`2<T, Task`1<T>> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<MapIf>d__294`1")]
[ExtensionAttribute]
public static Task`1<Result`1<T>> MapIf(Task`1<Result`1<T>> resultTask, bool condition, Func`2<T, T> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<MapIf>d__295`2")]
[ExtensionAttribute]
public static Task`1<Result`2<T, E>> MapIf(Task`1<Result`2<T, E>> resultTask, bool condition, Func`2<T, T> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<MapIf>d__296`1")]
[ExtensionAttribute]
public static Task`1<Result`1<T>> MapIf(Task`1<Result`1<T>> resultTask, Func`2<T, bool> predicate, Func`2<T, T> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<MapIf>d__297`2")]
[ExtensionAttribute]
public static Task`1<Result`2<T, E>> MapIf(Task`1<Result`2<T, E>> resultTask, Func`2<T, bool> predicate, Func`2<T, T> func);
    [ExtensionAttribute]
public static Task`1<Result`1<T>> MapIf(Result`1<T> result, bool condition, Func`2<T, Task`1<T>> func);
    [ExtensionAttribute]
public static Task`1<Result`2<T, E>> MapIf(Result`2<T, E> result, bool condition, Func`2<T, Task`1<T>> func);
    [ExtensionAttribute]
public static Task`1<Result`1<T>> MapIf(Result`1<T> result, Func`2<T, bool> predicate, Func`2<T, Task`1<T>> func);
    [ExtensionAttribute]
public static Task`1<Result`2<T, E>> MapIf(Result`2<T, E> result, Func`2<T, bool> predicate, Func`2<T, Task`1<T>> func);
    [ExtensionAttribute]
public static Result`2<K, E> MapTry(Result`2<T, E> result, Func`2<T, K> func, Func`2<Exception, E> errorHandler);
    [ExtensionAttribute]
public static Result`2<K, E> MapTry(UnitResult`1<E> result, Func`1<K> func, Func`2<Exception, E> errorHandler);
    [ExtensionAttribute]
public static Result`1<K> MapTry(Result`1<T> result, Func`2<T, K> func, Func`2<Exception, string> errorHandler);
    [ExtensionAttribute]
public static Result`1<K> MapTry(Result result, Func`1<K> func, Func`2<Exception, string> errorHandler);
    [ExtensionAttribute]
public static Result`1<K> MapWithTransactionScope(Result`1<T> self, Func`2<T, K> f);
    [ExtensionAttribute]
public static Result`1<K> MapWithTransactionScope(Result self, Func`1<K> f);
    [ExtensionAttribute]
public static Task`1<Result`1<K>> MapWithTransactionScope(Task`1<Result`1<T>> self, Func`2<T, Task`1<K>> f);
    [ExtensionAttribute]
public static Task`1<Result`1<K>> MapWithTransactionScope(Task`1<Result> self, Func`1<Task`1<K>> f);
    [ExtensionAttribute]
public static Task`1<Result`1<K>> MapWithTransactionScope(Task`1<Result`1<T>> self, Func`2<T, K> f);
    [ExtensionAttribute]
public static Task`1<Result`1<K>> MapWithTransactionScope(Task`1<Result> self, Func`1<K> f);
    [ExtensionAttribute]
public static Task`1<Result`1<K>> MapWithTransactionScope(Result`1<T> self, Func`2<T, Task`1<K>> f);
    [ExtensionAttribute]
public static Task`1<Result`1<K>> MapWithTransactionScope(Result self, Func`1<Task`1<K>> f);
    [ExtensionAttribute]
public static K Match(Result`2<T, E> result, Func`2<T, K> onSuccess, Func`2<E, K> onFailure);
    [ExtensionAttribute]
public static K Match(Result`1<T> result, Func`2<T, K> onSuccess, Func`2<string, K> onFailure);
    [ExtensionAttribute]
public static T Match(Result result, Func`1<T> onSuccess, Func`2<string, T> onFailure);
    [ExtensionAttribute]
public static K Match(UnitResult`1<E> result, Func`1<K> onSuccess, Func`2<E, K> onFailure);
    [ExtensionAttribute]
public static void Match(Result`2<T, E> result, Action`1<T> onSuccess, Action`1<E> onFailure);
    [ExtensionAttribute]
public static void Match(UnitResult`1<E> result, Action onSuccess, Action`1<E> onFailure);
    [ExtensionAttribute]
public static void Match(Result`1<T> result, Action`1<T> onSuccess, Action`1<string> onFailure);
    [ExtensionAttribute]
public static void Match(Result result, Action onSuccess, Action`1<string> onFailure);
    [ExtensionAttribute]
public static Result`2<T, E> OnFailureCompensate(Result`2<T, E> result, Func`1<Result`2<T, E>> func);
    [ExtensionAttribute]
public static Result`1<T> OnFailureCompensate(Result`1<T> result, Func`1<Result`1<T>> func);
    [ExtensionAttribute]
public static Result OnFailureCompensate(Result result, Func`1<Result> func);
    [ExtensionAttribute]
public static Result`2<T, E> OnFailureCompensate(Result`2<T, E> result, Func`2<E, Result`2<T, E>> func);
    [ExtensionAttribute]
public static Result`1<T> OnFailureCompensate(Result`1<T> result, Func`2<string, Result`1<T>> func);
    [ExtensionAttribute]
public static Result OnFailureCompensate(Result result, Func`2<string, Result> func);
    [ExtensionAttribute]
public static Result OnSuccessTry(Result result, Action action, Func`2<Exception, string> errorHandler);
    [ExtensionAttribute]
public static Result OnSuccessTry(Result`1<T> result, Action`1<T> action, Func`2<Exception, string> errorHandler);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<OnSuccessTry>d__330")]
[ExtensionAttribute]
public static Task`1<Result> OnSuccessTry(Task`1<Result> task, Func`1<Task> func, Func`2<Exception, string> errorHandler);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<OnSuccessTry>d__331`1")]
[ExtensionAttribute]
public static Task`1<Result> OnSuccessTry(Task`1<Result`1<T>> task, Func`2<T, Task> func, Func`2<Exception, string> errorHandler);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<OnSuccessTry>d__332")]
[ExtensionAttribute]
public static Task`1<Result> OnSuccessTry(Task`1<Result> task, Action action, Func`2<Exception, string> errorHandler);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<OnSuccessTry>d__333`1")]
[ExtensionAttribute]
public static Task`1<Result> OnSuccessTry(Task`1<Result`1<T>> task, Action`1<T> action, Func`2<Exception, string> errorHandler);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<OnSuccessTry>d__334")]
[ExtensionAttribute]
public static Task`1<Result> OnSuccessTry(Result result, Func`1<Task> func, Func`2<Exception, string> errorHandler);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<OnSuccessTry>d__335`1")]
[ExtensionAttribute]
public static Task`1<Result> OnSuccessTry(Result`1<T> result, Func`2<T, Task> func, Func`2<Exception, string> errorHandler);
    [ExtensionAttribute]
public static Result`1<TR> SelectMany(Result`1<T> result, Func`2<T, Result`1<TK>> func, Func`3<T, TK, TR> project);
    [ExtensionAttribute]
public static Result`2<TR, TE> SelectMany(Result`2<T, TE> result, Func`2<T, Result`2<TK, TE>> func, Func`3<T, TK, TR> project);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<SelectMany>d__338`3")]
[ExtensionAttribute]
public static Task`1<Result`1<TR>> SelectMany(Task`1<Result`1<T>> resultTask, Func`2<T, Task`1<Result`1<TK>>> func, Func`3<T, TK, TR> project);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<SelectMany>d__339`4")]
[ExtensionAttribute]
public static Task`1<Result`2<TR, TE>> SelectMany(Task`1<Result`2<T, TE>> resultTask, Func`2<T, Task`1<Result`2<TK, TE>>> func, Func`3<T, TK, TR> project);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<SelectMany>d__340`3")]
[ExtensionAttribute]
public static Task`1<Result`1<TR>> SelectMany(Task`1<Result`1<T>> resultTask, Func`2<T, Result`1<TK>> func, Func`3<T, TK, TR> project);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<SelectMany>d__341`4")]
[ExtensionAttribute]
public static Task`1<Result`2<TR, TE>> SelectMany(Task`1<Result`2<T, TE>> resultTask, Func`2<T, Result`2<TK, TE>> func, Func`3<T, TK, TR> project);
    [ExtensionAttribute]
public static Task`1<Result`1<TR>> SelectMany(Result`1<T> result, Func`2<T, Task`1<Result`1<TK>>> func, Func`3<T, TK, TR> project);
    [ExtensionAttribute]
public static Task`1<Result`2<TR, TE>> SelectMany(Result`2<T, TE> result, Func`2<T, Task`1<Result`2<TK, TE>>> func, Func`3<T, TK, TR> project);
    [ExtensionAttribute]
public static Result Tap(Result result, Action action);
    [ExtensionAttribute]
public static Result`1<T> Tap(Result`1<T> result, Action action);
    [ExtensionAttribute]
public static Result`1<T> Tap(Result`1<T> result, Action`1<T> action);
    [ExtensionAttribute]
public static UnitResult`1<E> Tap(UnitResult`1<E> result, Action action);
    [ExtensionAttribute]
public static Result`2<T, E> Tap(Result`2<T, E> result, Action action);
    [ExtensionAttribute]
public static Result`2<T, E> Tap(Result`2<T, E> result, Action`1<T> action);
    [ExtensionAttribute]
public static Result`2<T, E> TapError(Result`2<T, E> result, Action action);
    [ExtensionAttribute]
public static Result`1<T> TapError(Result`1<T> result, Action action);
    [ExtensionAttribute]
public static Result TapError(Result result, Action action);
    [ExtensionAttribute]
public static UnitResult`1<E> TapError(UnitResult`1<E> result, Action`1<E> action);
    [ExtensionAttribute]
public static UnitResult`1<E> TapError(UnitResult`1<E> result, Action action);
    [ExtensionAttribute]
public static Result`2<T, E> TapError(Result`2<T, E> result, Action`1<E> action);
    [ExtensionAttribute]
public static Result`1<T> TapError(Result`1<T> result, Action`1<string> action);
    [ExtensionAttribute]
public static Result TapError(Result result, Action`1<string> action);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<TapError>d__358`2")]
[ExtensionAttribute]
public static Task`1<Result`2<T, E>> TapError(Task`1<Result`2<T, E>> resultTask, Func`1<Task> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<TapError>d__359`1")]
[ExtensionAttribute]
public static Task`1<Result`1<T>> TapError(Task`1<Result`1<T>> resultTask, Func`1<Task> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<TapError>d__360")]
[ExtensionAttribute]
public static Task`1<Result> TapError(Task`1<Result> resultTask, Func`1<Task> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<TapError>d__361")]
[ExtensionAttribute]
public static Task`1<Result> TapError(Task`1<Result> resultTask, Func`2<string, Task> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<TapError>d__362`1")]
[ExtensionAttribute]
public static Task`1<UnitResult`1<E>> TapError(Task`1<UnitResult`1<E>> resultTask, Func`2<E, Task> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<TapError>d__363`1")]
[ExtensionAttribute]
public static Task`1<UnitResult`1<E>> TapError(Task`1<UnitResult`1<E>> resultTask, Func`1<Task> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<TapError>d__364`1")]
[ExtensionAttribute]
public static Task`1<Result`1<T>> TapError(Task`1<Result`1<T>> resultTask, Func`2<string, Task> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<TapError>d__365`2")]
[ExtensionAttribute]
public static Task`1<Result`2<T, E>> TapError(Task`1<Result`2<T, E>> resultTask, Func`2<E, Task> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<TapError>d__366`1")]
[ExtensionAttribute]
public static Task`1<Result`1<T>> TapError(Task`1<Result`1<T>> resultTask, Action action);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<TapError>d__367")]
[ExtensionAttribute]
public static Task`1<Result> TapError(Task`1<Result> resultTask, Action action);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<TapError>d__368`2")]
[ExtensionAttribute]
public static Task`1<Result`2<T, E>> TapError(Task`1<Result`2<T, E>> resultTask, Action action);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<TapError>d__369`1")]
[ExtensionAttribute]
public static Task`1<UnitResult`1<E>> TapError(Task`1<UnitResult`1<E>> resultTask, Action action);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<TapError>d__370`1")]
[ExtensionAttribute]
public static Task`1<UnitResult`1<E>> TapError(Task`1<UnitResult`1<E>> resultTask, Action`1<E> action);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<TapError>d__371`1")]
[ExtensionAttribute]
public static Task`1<Result`1<T>> TapError(Task`1<Result`1<T>> resultTask, Action`1<string> action);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<TapError>d__372`2")]
[ExtensionAttribute]
public static Task`1<Result`2<T, E>> TapError(Task`1<Result`2<T, E>> resultTask, Action`1<E> action);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<TapError>d__373")]
[ExtensionAttribute]
public static Task`1<Result> TapError(Task`1<Result> resultTask, Action`1<string> action);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<TapError>d__374`1")]
[ExtensionAttribute]
public static Task`1<Result`1<T>> TapError(Result`1<T> result, Func`1<Task> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<TapError>d__375`2")]
[ExtensionAttribute]
public static Task`1<Result`2<T, E>> TapError(Result`2<T, E> result, Func`1<Task> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<TapError>d__376")]
[ExtensionAttribute]
public static Task`1<Result> TapError(Result result, Func`1<Task> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<TapError>d__377")]
[ExtensionAttribute]
public static Task`1<Result> TapError(Result result, Func`2<string, Task> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<TapError>d__378`1")]
[ExtensionAttribute]
public static Task`1<UnitResult`1<E>> TapError(UnitResult`1<E> result, Func`1<Task> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<TapError>d__379`1")]
[ExtensionAttribute]
public static Task`1<UnitResult`1<E>> TapError(UnitResult`1<E> result, Func`2<E, Task> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<TapError>d__380`1")]
[ExtensionAttribute]
public static Task`1<Result`1<T>> TapError(Result`1<T> result, Func`2<string, Task> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<TapError>d__381`2")]
[ExtensionAttribute]
public static Task`1<Result`2<T, E>> TapError(Result`2<T, E> result, Func`2<E, Task> func);
    [ExtensionAttribute]
public static Result TapErrorIf(Result result, bool condition, Action action);
    [ExtensionAttribute]
public static Result TapErrorIf(Result result, bool condition, Action`1<string> action);
    [ExtensionAttribute]
public static Result`1<T> TapErrorIf(Result`1<T> result, bool condition, Action action);
    [ExtensionAttribute]
public static Result`1<T> TapErrorIf(Result`1<T> result, bool condition, Action`1<string> action);
    [ExtensionAttribute]
public static UnitResult`1<E> TapErrorIf(UnitResult`1<E> result, bool condition, Action action);
    [ExtensionAttribute]
public static UnitResult`1<E> TapErrorIf(UnitResult`1<E> result, bool condition, Action`1<E> action);
    [ExtensionAttribute]
public static Result`2<T, E> TapErrorIf(Result`2<T, E> result, bool condition, Action action);
    [ExtensionAttribute]
public static Result`2<T, E> TapErrorIf(Result`2<T, E> result, bool condition, Action`1<E> action);
    [ExtensionAttribute]
public static Result TapErrorIf(Result result, Func`2<string, bool> predicate, Action action);
    [ExtensionAttribute]
public static Result TapErrorIf(Result result, Func`2<string, bool> predicate, Action`1<string> action);
    [ExtensionAttribute]
public static Result`1<T> TapErrorIf(Result`1<T> result, Func`2<string, bool> predicate, Action action);
    [ExtensionAttribute]
public static Result`1<T> TapErrorIf(Result`1<T> result, Func`2<string, bool> predicate, Action`1<string> action);
    [ExtensionAttribute]
public static Result`2<T, E> TapErrorIf(Result`2<T, E> result, Func`2<E, bool> predicate, Action action);
    [ExtensionAttribute]
public static Result`2<T, E> TapErrorIf(Result`2<T, E> result, Func`2<E, bool> predicate, Action`1<E> action);
    [ExtensionAttribute]
public static UnitResult`1<E> TapErrorIf(UnitResult`1<E> result, Func`2<E, bool> predicate, Action action);
    [ExtensionAttribute]
public static UnitResult`1<E> TapErrorIf(UnitResult`1<E> result, Func`2<E, bool> predicate, Action`1<E> action);
    [ExtensionAttribute]
public static Task`1<Result> TapErrorIf(Task`1<Result> resultTask, bool condition, Func`1<Task> func);
    [ExtensionAttribute]
public static Task`1<Result> TapErrorIf(Task`1<Result> resultTask, bool condition, Func`2<string, Task> func);
    [ExtensionAttribute]
public static Task`1<Result`1<T>> TapErrorIf(Task`1<Result`1<T>> resultTask, bool condition, Func`1<Task> func);
    [ExtensionAttribute]
public static Task`1<Result`1<T>> TapErrorIf(Task`1<Result`1<T>> resultTask, bool condition, Func`2<string, Task> func);
    [ExtensionAttribute]
public static Task`1<Result`2<T, E>> TapErrorIf(Task`1<Result`2<T, E>> resultTask, bool condition, Func`1<Task> func);
    [ExtensionAttribute]
public static Task`1<Result`2<T, E>> TapErrorIf(Task`1<Result`2<T, E>> resultTask, bool condition, Func`2<E, Task> func);
    [ExtensionAttribute]
public static Task`1<UnitResult`1<E>> TapErrorIf(Task`1<UnitResult`1<E>> resultTask, bool condition, Func`1<Task> func);
    [ExtensionAttribute]
public static Task`1<UnitResult`1<E>> TapErrorIf(Task`1<UnitResult`1<E>> resultTask, bool condition, Func`2<E, Task> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<TapErrorIf>d__406")]
[ExtensionAttribute]
public static Task`1<Result> TapErrorIf(Task`1<Result> resultTask, Func`2<string, bool> predicate, Func`1<Task> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<TapErrorIf>d__407")]
[ExtensionAttribute]
public static Task`1<Result> TapErrorIf(Task`1<Result> resultTask, Func`2<string, bool> predicate, Func`2<string, Task> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<TapErrorIf>d__408`1")]
[ExtensionAttribute]
public static Task`1<Result`1<T>> TapErrorIf(Task`1<Result`1<T>> resultTask, Func`2<string, bool> predicate, Func`1<Task> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<TapErrorIf>d__409`1")]
[ExtensionAttribute]
public static Task`1<Result`1<T>> TapErrorIf(Task`1<Result`1<T>> resultTask, Func`2<string, bool> predicate, Func`2<string, Task> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<TapErrorIf>d__410`2")]
[ExtensionAttribute]
public static Task`1<Result`2<T, E>> TapErrorIf(Task`1<Result`2<T, E>> resultTask, Func`2<E, bool> predicate, Func`1<Task> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<TapErrorIf>d__411`2")]
[ExtensionAttribute]
public static Task`1<Result`2<T, E>> TapErrorIf(Task`1<Result`2<T, E>> resultTask, Func`2<E, bool> predicate, Func`2<E, Task> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<TapErrorIf>d__412`1")]
[ExtensionAttribute]
public static Task`1<UnitResult`1<E>> TapErrorIf(Task`1<UnitResult`1<E>> resultTask, Func`2<E, bool> predicate, Func`1<Task> func);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<TapErrorIf>d__413`1")]
[ExtensionAttribute]
public static Task`1<UnitResult`1<E>> TapErrorIf(Task`1<UnitResult`1<E>> resultTask, Func`2<E, bool> predicate, Func`2<E, Task> func);
    [ExtensionAttribute]
public static Task`1<Result> TapErrorIf(Task`1<Result> resultTask, bool condition, Action action);
    [ExtensionAttribute]
public static Task`1<Result> TapErrorIf(Task`1<Result> resultTask, bool condition, Action`1<string> action);
    [ExtensionAttribute]
public static Task`1<Result`1<T>> TapErrorIf(Task`1<Result`1<T>> resultTask, bool condition, Action action);
    [ExtensionAttribute]
public static Task`1<Result`1<T>> TapErrorIf(Task`1<Result`1<T>> resultTask, bool condition, Action`1<string> action);
    [ExtensionAttribute]
public static Task`1<Result`2<T, E>> TapErrorIf(Task`1<Result`2<T, E>> resultTask, bool condition, Action action);
    [ExtensionAttribute]
public static Task`1<Result`2<T, E>> TapErrorIf(Task`1<Result`2<T, E>> resultTask, bool condition, Action`1<E> action);
    [ExtensionAttribute]
public static Task`1<UnitResult`1<E>> TapErrorIf(Task`1<UnitResult`1<E>> resultTask, bool condition, Action action);
    [ExtensionAttribute]
public static Task`1<UnitResult`1<E>> TapErrorIf(Task`1<UnitResult`1<E>> resultTask, bool condition, Action`1<E> action);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<TapErrorIf>d__422")]
[ExtensionAttribute]
public static Task`1<Result> TapErrorIf(Task`1<Result> resultTask, Func`2<string, bool> predicate, Action action);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<TapErrorIf>d__423")]
[ExtensionAttribute]
public static Task`1<Result> TapErrorIf(Task`1<Result> resultTask, Func`2<string, bool> predicate, Action`1<string> action);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<TapErrorIf>d__424`1")]
[ExtensionAttribute]
public static Task`1<Result`1<T>> TapErrorIf(Task`1<Result`1<T>> resultTask, Func`2<string, bool> predicate, Action action);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<TapErrorIf>d__425`1")]
[ExtensionAttribute]
public static Task`1<Result`1<T>> TapErrorIf(Task`1<Result`1<T>> resultTask, Func`2<string, bool> predicate, Action`1<string> action);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<TapErrorIf>d__426`2")]
[ExtensionAttribute]
public static Task`1<Result`2<T, E>> TapErrorIf(Task`1<Result`2<T, E>> resultTask, Func`2<E, bool> predicate, Action action);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<TapErrorIf>d__427`2")]
[ExtensionAttribute]
public static Task`1<Result`2<T, E>> TapErrorIf(Task`1<Result`2<T, E>> resultTask, Func`2<E, bool> predicate, Action`1<E> action);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<TapErrorIf>d__428`1")]
[ExtensionAttribute]
public static Task`1<UnitResult`1<E>> TapErrorIf(Task`1<UnitResult`1<E>> resultTask, Func`2<E, bool> predicate, Action action);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<TapErrorIf>d__429`1")]
[ExtensionAttribute]
public static Task`1<UnitResult`1<E>> TapErrorIf(Task`1<UnitResult`1<E>> resultTask, Func`2<E, bool> predicate, Action`1<E> action);
    [ExtensionAttribute]
public static Task`1<Result> TapErrorIf(Result result, bool condition, Func`1<Task> func);
    [ExtensionAttribute]
public static Task`1<Result> TapErrorIf(Result result, bool condition, Func`2<string, Task> func);
    [ExtensionAttribute]
public static Task`1<Result`1<T>> TapErrorIf(Result`1<T> result, bool condition, Func`1<Task> func);
    [ExtensionAttribute]
public static Task`1<Result`1<T>> TapErrorIf(Result`1<T> result, bool condition, Func`2<string, Task> func);
    [ExtensionAttribute]
public static Task`1<Result`2<T, E>> TapErrorIf(Result`2<T, E> result, bool condition, Func`1<Task> func);
    [ExtensionAttribute]
public static Task`1<Result`2<T, E>> TapErrorIf(Result`2<T, E> result, bool condition, Func`2<E, Task> func);
    [ExtensionAttribute]
public static Task`1<UnitResult`1<E>> TapErrorIf(UnitResult`1<E> result, bool condition, Func`1<Task> func);
    [ExtensionAttribute]
public static Task`1<UnitResult`1<E>> TapErrorIf(UnitResult`1<E> result, bool condition, Func`2<E, Task> func);
    [ExtensionAttribute]
public static Task`1<Result> TapErrorIf(Result result, Func`2<string, bool> predicate, Func`1<Task> func);
    [ExtensionAttribute]
public static Task`1<Result> TapErrorIf(Result result, Func`2<string, bool> predicate, Func`2<string, Task> func);
    [ExtensionAttribute]
public static Task`1<Result`1<T>> TapErrorIf(Result`1<T> result, Func`2<string, bool> predicate, Func`1<Task> func);
    [ExtensionAttribute]
public static Task`1<Result`1<T>> TapErrorIf(Result`1<T> result, Func`2<string, bool> predicate, Func`2<string, Task> func);
    [ExtensionAttribute]
public static Task`1<Result`2<T, E>> TapErrorIf(Result`2<T, E> result, Func`2<E, bool> predicate, Func`1<Task> func);
    [ExtensionAttribute]
public static Task`1<Result`2<T, E>> TapErrorIf(Result`2<T, E> result, Func`2<E, bool> predicate, Func`2<E, Task> func);
    [ExtensionAttribute]
public static Task`1<UnitResult`1<E>> TapErrorIf(UnitResult`1<E> result, Func`2<E, bool> predicate, Func`1<Task> func);
    [ExtensionAttribute]
public static Task`1<UnitResult`1<E>> TapErrorIf(UnitResult`1<E> result, Func`2<E, bool> predicate, Func`2<E, Task> func);
    [ExtensionAttribute]
public static Result TapIf(Result result, bool condition, Action action);
    [ExtensionAttribute]
public static Result`1<T> TapIf(Result`1<T> result, bool condition, Action action);
    [ExtensionAttribute]
public static Result`1<T> TapIf(Result`1<T> result, bool condition, Action`1<T> action);
    [ExtensionAttribute]
public static UnitResult`1<E> TapIf(UnitResult`1<E> result, bool condition, Action action);
    [ExtensionAttribute]
public static Result`2<T, E> TapIf(Result`2<T, E> result, bool condition, Action action);
    [ExtensionAttribute]
public static Result`2<T, E> TapIf(Result`2<T, E> result, bool condition, Action`1<T> action);
    [ExtensionAttribute]
public static Result`1<T> TapIf(Result`1<T> result, Func`2<T, bool> predicate, Action action);
    [ExtensionAttribute]
public static Result`1<T> TapIf(Result`1<T> result, Func`2<T, bool> predicate, Action`1<T> action);
    [ExtensionAttribute]
public static Result`2<T, E> TapIf(Result`2<T, E> result, Func`2<T, bool> predicate, Action action);
    [ExtensionAttribute]
public static Result`2<T, E> TapIf(Result`2<T, E> result, Func`2<T, bool> predicate, Action`1<T> action);
    [ExtensionAttribute]
public static UnitResult`1<E> TapIf(UnitResult`1<E> result, Func`1<bool> predicate, Action action);
    [ExtensionAttribute]
public static Result TapIfTry(Result result, bool condition, Action action, Func`2<Exception, string> errorHandler);
    [ExtensionAttribute]
public static Result`1<T> TapIfTry(Result`1<T> result, bool condition, Action action, Func`2<Exception, string> errorHandler);
    [ExtensionAttribute]
public static Result`1<T> TapIfTry(Result`1<T> result, bool condition, Action`1<T> action, Func`2<Exception, string> errorHandler);
    [ExtensionAttribute]
public static UnitResult`1<E> TapIfTry(UnitResult`1<E> result, bool condition, Action action, Func`2<Exception, E> errorHandler);
    [ExtensionAttribute]
public static Result`2<T, E> TapIfTry(Result`2<T, E> result, bool condition, Action action, Func`2<Exception, E> errorHandler);
    [ExtensionAttribute]
public static Result`2<T, E> TapIfTry(Result`2<T, E> result, bool condition, Action`1<T> action, Func`2<Exception, E> errorHandler);
    [ExtensionAttribute]
public static Result`1<T> TapIfTry(Result`1<T> result, Func`2<T, bool> predicate, Action action, Func`2<Exception, string> errorHandler);
    [ExtensionAttribute]
public static Result`1<T> TapIfTry(Result`1<T> result, Func`2<T, bool> predicate, Action`1<T> action, Func`2<Exception, string> errorHandler);
    [ExtensionAttribute]
public static Result`2<T, E> TapIfTry(Result`2<T, E> result, Func`2<T, bool> predicate, Action action, Func`2<Exception, E> errorHandler);
    [ExtensionAttribute]
public static Result`2<T, E> TapIfTry(Result`2<T, E> result, Func`2<T, bool> predicate, Action`1<T> action, Func`2<Exception, E> errorHandler);
    [ExtensionAttribute]
public static Result TapTry(Result result, Action action, Func`2<Exception, string> errorHandler);
    [ExtensionAttribute]
public static Result`1<T> TapTry(Result`1<T> result, Action action, Func`2<Exception, string> errorHandler);
    [ExtensionAttribute]
public static Result`1<T> TapTry(Result`1<T> result, Action`1<T> action, Func`2<Exception, string> errorHandler);
    [ExtensionAttribute]
public static UnitResult`1<E> TapTry(UnitResult`1<E> result, Action action, Func`2<Exception, E> errorHandler);
    [ExtensionAttribute]
public static Result`2<T, E> TapTry(Result`2<T, E> result, Action action, Func`2<Exception, E> errorHandler);
    [ExtensionAttribute]
public static Result`2<T, E> TapTry(Result`2<T, E> result, Action`1<T> action, Func`2<Exception, E> errorHandler);
    private static T WithTransactionScope(Func`1<T> f);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.ResultExtensions/<WithTransactionScope>d__475`1")]
private static Task`1<T> WithTransactionScope(Func`1<Task`1<T>> f);
}
public class CSharpFunctionalExtensions.ResultFailureException : Exception {
    [CompilerGeneratedAttribute]
private string <Error>k__BackingField;
    public string Error { get; }
    internal ResultFailureException(string error);
    [CompilerGeneratedAttribute]
public string get_Error();
}
public class CSharpFunctionalExtensions.ResultFailureException`1 : ResultFailureException {
    [CompilerGeneratedAttribute]
private E <Error>k__BackingField;
    public E Error { get; }
    internal ResultFailureException`1(E error);
    [CompilerGeneratedAttribute]
public E get_Error();
}
public class CSharpFunctionalExtensions.ResultSuccessException : Exception {
}
internal class CSharpFunctionalExtensions.SerializationValue`1 : ValueType {
    [CompilerGeneratedAttribute]
private bool <IsFailure>k__BackingField;
    [CompilerGeneratedAttribute]
private E <Error>k__BackingField;
    public bool IsFailure { get; }
    public E Error { get; }
    internal SerializationValue`1(bool isFailure, E error);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_IsFailure();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public E get_Error();
}
public abstract class CSharpFunctionalExtensions.SimpleValueObject`1 : ComparableValueObject {
    [CompilerGeneratedAttribute]
private T <Value>k__BackingField;
    public T Value { get; }
    protected SimpleValueObject`1(T value);
    [CompilerGeneratedAttribute]
public T get_Value();
    [IteratorStateMachineAttribute("CSharpFunctionalExtensions.SimpleValueObject`1/<GetComparableEqualityComponents>d__4")]
protected virtual IEnumerable`1<IComparable> GetComparableEqualityComponents();
    public virtual string ToString();
    public static T op_Implicit(SimpleValueObject`1<T> valueObject);
}
[ExtensionAttribute]
internal static class CSharpFunctionalExtensions.TaskExtensions : object {
    [ExtensionAttribute]
public static Task`1<T> AsCompletedTask(T obj);
    [ExtensionAttribute]
public static ConfiguredTaskAwaitable DefaultAwait(Task task);
    [ExtensionAttribute]
public static ConfiguredTaskAwaitable`1<T> DefaultAwait(Task`1<T> task);
}
public static class CSharpFunctionalExtensions.UnitResult : object {
    public static UnitResult`1<E> FailureIf(bool isFailure, E& error);
    public static UnitResult`1<E> FailureIf(Func`1<bool> failurePredicate, E& error);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.UnitResult/<FailureIf>d__2`1")]
public static Task`1<UnitResult`1<E>> FailureIf(Func`1<Task`1<bool>> failurePredicate, E error);
    public static UnitResult`1<E> SuccessIf(bool isSuccess, E& error);
    public static UnitResult`1<E> SuccessIf(Func`1<bool> predicate, E& error);
    [AsyncStateMachineAttribute("CSharpFunctionalExtensions.UnitResult/<SuccessIf>d__5`1")]
public static Task`1<UnitResult`1<E>> SuccessIf(Func`1<Task`1<bool>> predicate, E error);
    public static UnitResult`1<E> Failure(E& error);
    public static UnitResult`1<E> Success();
}
[IsReadOnlyAttribute]
public class CSharpFunctionalExtensions.UnitResult`1 : ValueType {
    [CompilerGeneratedAttribute]
private bool <IsFailure>k__BackingField;
    private E _error;
    public bool IsFailure { get; }
    public bool IsSuccess { get; }
    public E Error { get; }
    internal UnitResult`1(bool isFailure, E& error);
    private UnitResult`1(SerializationInfo info, StreamingContext context);
    public Result`2<K, E> ConvertFailure();
    public virtual string ToString();
    public bool TryGetError(E& error);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsFailure();
    public sealed virtual bool get_IsSuccess();
    public sealed virtual E get_Error();
    private sealed virtual override void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context);
    public static UnitResult`1<E> op_Implicit(E error);
}
public abstract class CSharpFunctionalExtensions.ValueObject : object {
    private Nullable`1<int> _cachedHashCode;
    protected abstract virtual IEnumerable`1<object> GetEqualityComponents();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(ValueObject a, ValueObject b);
    public static bool op_Inequality(ValueObject a, ValueObject b);
    internal static Type GetUnproxiedType(object obj);
}
public abstract class CSharpFunctionalExtensions.ValueObject`1 : object {
    private Nullable`1<int> _cachedHashCode;
    public virtual bool Equals(object obj);
    protected abstract virtual bool EqualsCore(T other);
    public virtual int GetHashCode();
    protected abstract virtual int GetHashCodeCore();
    public static bool op_Equality(ValueObject`1<T> a, ValueObject`1<T> b);
    public static bool op_Inequality(ValueObject`1<T> a, ValueObject`1<T> b);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
