public static class CsQuery.Config : object {
    private static CsQueryConfig DefaultConfig;
    public static StartupOptions StartupOptions;
    public static PseudoSelectors PseudoClassFilters { get; }
    public static DomRenderingOptions DomRenderingOptions { get; public set; }
    public static HtmlParsingOptions HtmlParsingOptions { get; public set; }
    public static IHtmlEncoder HtmlEncoder { get; public set; }
    public static IOutputFormatter OutputFormatter { get; public set; }
    public static Func`1<IOutputFormatter> GetOutputFormatter { get; public set; }
    public static IHttpWebRequestFactory WebRequestFactory { get; }
    public static DocType DocType { get; public set; }
    public static Type DynamicObjectType { get; public set; }
    public static IDomIndexProvider DomIndexProvider { get; public set; }
    private static Config();
    public static PseudoSelectors get_PseudoClassFilters();
    public static DomRenderingOptions get_DomRenderingOptions();
    public static void set_DomRenderingOptions(DomRenderingOptions value);
    public static HtmlParsingOptions get_HtmlParsingOptions();
    public static void set_HtmlParsingOptions(HtmlParsingOptions value);
    public static IHtmlEncoder get_HtmlEncoder();
    public static void set_HtmlEncoder(IHtmlEncoder value);
    public static IOutputFormatter get_OutputFormatter();
    public static void set_OutputFormatter(IOutputFormatter value);
    public static Func`1<IOutputFormatter> get_GetOutputFormatter();
    public static void set_GetOutputFormatter(Func`1<IOutputFormatter> value);
    public static IHttpWebRequestFactory get_WebRequestFactory();
    public static DocType get_DocType();
    public static void set_DocType(DocType value);
    public static Type get_DynamicObjectType();
    public static void set_DynamicObjectType(Type value);
    public static IDomIndexProvider get_DomIndexProvider();
    public static void set_DomIndexProvider(IDomIndexProvider value);
}
[DefaultMemberAttribute("Item")]
public class CsQuery.CQ : object {
    private Selector _Selector;
    private IDomDocument _Document;
    private CQ _CsQueryParent;
    private SelectionSet`1<IDomObject> _Selection;
    private static Browser _Browser;
    [CompilerGeneratedAttribute]
private static Func`2<IDomElement, bool> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Func`2<IDomObject, bool> CS$<>9__CachedAnonymousMethodDelegate3;
    [CompilerGeneratedAttribute]
private static Func`2<IHTMLOptionElement, bool> CS$<>9__CachedAnonymousMethodDelegate22;
    [CompilerGeneratedAttribute]
private static Func`2<IHTMLOptionElement, string> CS$<>9__CachedAnonymousMethodDelegate23;
    [CompilerGeneratedAttribute]
private static Action`1<IDomElement> CS$<>9__CachedAnonymousMethodDelegate25;
    [CompilerGeneratedAttribute]
private static Func`2<IDomElement, IDomElement> CS$<>9__CachedAnonymousMethodDelegate2b;
    [CompilerGeneratedAttribute]
private static Func`2<IDomElement, bool> CS$<>9__CachedAnonymousMethodDelegate2c;
    [CompilerGeneratedAttribute]
private static Func`2<IDomElement, IDomElement> CS$<>9__CachedAnonymousMethodDelegate2d;
    [CompilerGeneratedAttribute]
private static Func`2<IDomElement, bool> CS$<>9__CachedAnonymousMethodDelegate2e;
    [CompilerGeneratedAttribute]
private static Action`1<IDomObject> CS$<>9__CachedAnonymousMethodDelegate40;
    public IDomObject Item { get; }
    public CQ Item { get; }
    public CQ Item { get; }
    public CQ Item { get; }
    public CQ Item { get; }
    public CQ Item { get; }
    public int Length { get; }
    public IDomDocument Document { get; protected set; }
    public Selector Selector { get; protected set; }
    public IEnumerable`1<IDomObject> Selection { get; }
    public IEnumerable`1<IDomElement> Elements { get; }
    public SelectionSetOrder Order { get; public set; }
    protected CQ CsQueryParent { get; protected set; }
    protected SelectionSet`1<IDomObject> SelectionSet { get; protected set; }
    [ObsoleteAttribute]
public static DomRenderingOptions DefaultDomRenderingOptions { get; public set; }
    [ObsoleteAttribute]
public static DocType DefaultDocType { get; public set; }
    public static Browser Browser { get; }
    public CQ(string html, HtmlParsingMode parsingMode, HtmlParsingOptions parsingOptions, DocType docType);
    public CQ(Stream html, Encoding encoding, HtmlParsingMode parsingMode, HtmlParsingOptions parsingOptions, DocType docType);
    public CQ(TextReader html, HtmlParsingMode parsingMode, HtmlParsingOptions parsingOptions, DocType docType);
    public CQ(IDomObject element);
    public CQ(IEnumerable`1<IDomObject> elements);
    public CQ(IDomObject element, CQ context);
    public CQ(string selector, CQ context);
    public CQ(string selector, string cssJson, CQ context);
    public CQ(string selector, object css, CQ context);
    public CQ(IEnumerable`1<IDomObject> elements, CQ context);
    public bool HasAttr(string name);
    public CQ AttrReplace(string name, string replaceWhat, string replaceWith);
    public static string Version();
    public static CQ CreateFromUrl(string url, ServerConfig options);
    public static IPromise`1<ICsqWebResponse> CreateFromUrlAsync(string url, ServerConfig options);
    public static int CreateFromUrlAsync(string url, Action`1<ICsqWebResponse> callbackSuccess, Action`1<ICsqWebResponse> callbackFail, ServerConfig options);
    public static void CreateFromUrlAsync(string url, int id, Action`1<ICsqWebResponse> callbackSuccess, Action`1<ICsqWebResponse> callbackFail, ServerConfig options);
    public static bool WaitForAsyncEvents(int timeout);
    public static IPromise WhenAll(IPromise[] promises);
    public static CQ Create();
    public static CQ Create(string html);
    public static CQ Create(Char[] html);
    public static CQ Create(IDomObject element);
    public static CQ Create(string html, HtmlParsingMode parsingMode, HtmlParsingOptions parsingOptions, DocType docType);
    public static CQ Create(string html, object quickSet);
    public static CQ Create(IEnumerable`1<IDomObject> elements);
    public static CQ Create(Stream html);
    public static CQ Create(Stream html, Encoding encoding);
    public static CQ Create(TextReader html);
    public static CQ Create(Stream html, Encoding encoding, HtmlParsingMode parsingMode, HtmlParsingOptions parsingOptions, DocType docType);
    public static CQ Create(TextReader html, HtmlParsingMode parsingMode, HtmlParsingOptions parsingOptions, DocType docType);
    public static CQ CreateFragment(string html);
    public static CQ CreateFragment(string html, string context);
    public static CQ CreateFragment(IEnumerable`1<IDomObject> elements);
    public static CQ CreateDocument(string html);
    public static CQ CreateDocument(Stream html);
    public static CQ CreateDocument(Stream html, Encoding encoding);
    public static CQ CreateDocument(TextReader html);
    public static CQ CreateDocumentFromFile(string htmlFile);
    public static CQ CreateFromFile(string htmlFile);
    public void Save(string fileName, DomRenderingOptions renderingOptions);
    public CQ MakeRoot();
    public CQ MakeRoot(string selector);
    public CQ GetTableColumn();
    public CQ GetTableColumn(int column);
    public CQ SetSelected(string groupName, IConvertible value);
    public CQ IncludeWhen(bool include);
    public CQ KeepOne(bool which, string trueSelector, string falseSelector);
    public CQ KeepOne(bool which, CQ trueContent, CQ falseContent);
    public CQ KeepOne(int which, String[] content);
    public CQ KeepOne(int which, CQ[] content);
    public IDomElement FirstElement();
    public CQ EnsureCsQuery(IEnumerable`1<IDomObject> elements);
    public string SelectionHtml();
    public string SelectionHtml(bool includeInner);
    public CQ NewCqInDomain();
    protected virtual CQ NewCqUnbound();
    public string RenderSelection();
    public string RenderSelection(IOutputFormatter outputFormatter);
    public void RenderSelection(IOutputFormatter outputFormatter, StringWriter writer);
    public string Render();
    public string Render(DomRenderingOptions options);
    public string Render(IOutputFormatter formatter);
    public void Render(IOutputFormatter formatter, TextWriter writer);
    [ObsoleteAttribute]
public void Render(StringBuilder sb, DomRenderingOptions options);
    public CQ Append(String[] content);
    public CQ Append(IDomObject element);
    public CQ Append(IEnumerable`1<IDomObject> elements);
    public CQ Append(Func`3<int, string, string> func);
    public CQ Append(Func`3<int, string, IDomElement> func);
    public CQ Append(Func`3<int, string, IEnumerable`1<IDomElement>> func);
    private CQ Append(IEnumerable`1<IDomObject> elements, CQ& insertedElements);
    private IDomElement GetTrueTarget(IDomElement target);
    public CQ Add(string selector);
    public CQ Add(IDomObject element);
    public CQ Add(IEnumerable`1<IDomObject> elements);
    public CQ Add(string selector, IEnumerable`1<IDomObject> context);
    public CQ Add(string selector, IDomObject context);
    public CQ AddClass(string className);
    public CQ ToggleClass(string classes);
    public CQ ToggleClass(string classes, bool addRemoveSwitch);
    public bool HasClass(string className);
    public CQ AppendTo(String[] target);
    public CQ AppendTo(IDomObject target);
    public CQ AppendTo(IEnumerable`1<IDomObject> targets);
    public string Attr(string name);
    public T Attr(string name);
    public CQ Attr(string name, IConvertible value);
    public CQ AttrSet(object map);
    public CQ AttrSet(object map, bool quickSet);
    public CQ RemoveAttr(string name);
    public CQ RemoveProp(string name);
    public CQ Before(string selector);
    public CQ Before(IDomObject element);
    public CQ Before(IEnumerable`1<IDomObject> elements);
    public CQ After(string selector);
    public CQ After(IDomObject element);
    public CQ After(IEnumerable`1<IDomObject> elements);
    protected CQ InsertAtOffset(IEnumerable`1<IDomObject> target, int offset);
    protected CQ InsertAtOffset(CQ target, int offset, CQ& insertedElements);
    public CQ Closest(string selector);
    public CQ Closest(IDomObject element);
    public CQ Closest(IEnumerable`1<IDomObject> elements);
    public CQ AndSelf();
    public CQ Children(string filter);
    protected IEnumerable`1<IDomObject> SelectionChildren();
    public CQ Clone();
    public CQ Contents();
    public CQ Parent(string selector);
    private IEnumerable`1<IDomObject> ParentImpl(IDomObject input);
    public static object Extend(object target, Object[] sources);
    public static object Extend(bool deep, object target, Object[] sources);
    public static IEnumerable`1<T> Map(IEnumerable`1<IDomObject> elements, Func`2<IDomObject, T> function);
    public IEnumerable`1<T> Map(Func`2<IDomObject, T> function);
    public CQ ParentsUntil(string selector, string filter);
    public CQ ParentsUntil(IDomElement element, string filter);
    public CQ ParentsUntil(IEnumerable`1<IDomElement> elements, string filter);
    public CQ First();
    public CQ Last();
    public CQ Eq(int index);
    public CQ End();
    public CQ Siblings(string selector);
    protected IEnumerable`1<IDomObject> GetSiblings(IEnumerable`1<IDomObject> elements);
    public CQ Width(int value);
    public CQ Width(string value);
    public CQ Height(int value);
    public CQ Height(string value);
    public bool Is(string selector);
    public bool Is(IEnumerable`1<IDomObject> elements);
    public bool Is(IDomObject element);
    public T Val();
    public T ValOrDefault();
    public string Val();
    public CQ Val(object value);
    protected string GetValueString(object value);
    public CQ ReplaceAll(string selector);
    public CQ ReplaceAll(IDomObject target);
    public CQ ReplaceAll(IEnumerable`1<IDomObject> targets);
    public CQ ReplaceWith(String[] content);
    public CQ ReplaceWith(IDomObject element);
    public CQ ReplaceWith(IEnumerable`1<IDomObject> elements);
    public CQ RemoveClass();
    public CQ RemoveClass(string className);
    public CQ Remove(string selector);
    public CQ Detach(string selector);
    public IEnumerable`1<IDomObject> Get();
    public IDomObject Get(int index);
    public CQ Prev(string selector);
    public CQ Next(string selector);
    public CQ NextAll(string filter);
    public CQ NextUntil(string selector, string filter);
    public CQ PrevAll(string filter);
    public CQ PrevUntil(string selector, string filter);
    private CQ nextPrevImpl(string selector, bool next);
    private CQ nextPrevAllImpl(string filter, bool next);
    private CQ nextPrevUntilImpl(string selector, string filter, bool next);
    private IEnumerable`1<IDomObject> nextPrevAllImpl(IDomObject input, bool next);
    private IEnumerable`1<IDomObject> nextPrevUntilFilterImpl(IDomObject input, HashSet`1<IDomElement> untilEls, bool next);
    public CQ Empty();
    public CQ Prop(string name, IConvertible value);
    public bool Prop(string name);
    protected void SetProp(string name, object value);
    public CQ Slice(int start);
    public CQ Slice(int start, int end);
    public CQ InsertAfter(IDomObject target);
    public CQ InsertAfter(IEnumerable`1<IDomObject> target);
    public CQ InsertAfter(string selectorTarget);
    public CQ InsertBefore(string selector);
    public CQ InsertBefore(IDomObject target);
    public CQ InsertBefore(IEnumerable`1<IDomObject> target);
    private CQ InsertAtOffset(IDomObject target, int offset);
    public int Index();
    public int Index(string selector);
    public int Index(IDomObject element);
    public int Index(IEnumerable`1<IDomObject> elements);
    protected int GetElementIndex(IDomObject element);
    public CQ Hide();
    public CQ Show();
    public CQ Toggle();
    public CQ Toggle(bool isVisible);
    public IDomObject get_Item(int index);
    public CQ Select(Selector selector);
    public CQ Select(string selector);
    public CQ get_Item(string selector);
    public CQ Select(IDomObject element);
    public CQ get_Item(IDomObject element);
    public CQ Select(IEnumerable`1<IDomObject> elements);
    public CQ get_Item(IEnumerable`1<IDomObject> element);
    public CQ Select(string selector, IDomObject context);
    public CQ get_Item(string selector, IDomObject context);
    public CQ Select(string selector, IEnumerable`1<IDomObject> context);
    public CQ get_Item(string selector, IEnumerable`1<IDomObject> context);
    public CQ Filter(string selector);
    public CQ Filter(IDomObject element);
    public CQ Filter(IEnumerable`1<IDomObject> elements);
    public CQ Filter(Func`2<IDomObject, bool> function);
    public CQ Filter(Func`3<IDomObject, int, bool> function);
    public CQ Find(string selector);
    public CQ Find(IEnumerable`1<IDomObject> elements);
    public CQ Find(IDomObject element);
    private CQ FindImpl(Selector selector);
    public CQ EachUntil(Func`3<int, IDomObject, bool> func);
    public CQ EachUntil(Func`2<IDomObject, bool> func);
    public CQ Each(Action`1<IDomObject> func);
    public CQ Each(Action`2<int, IDomObject> func);
    public static void Each(IEnumerable`1<T> list, Action`1<T> func);
    public IDynamicMetaObjectProvider Data();
    public CQ Data(string key, string data);
    public CQ Data(string key, object data);
    public CQ DataSet(object data);
    public object Data(string key);
    public T Data(string key);
    public CQ RemoveData();
    public CQ RemoveData(string key);
    public CQ RemoveData(IEnumerable`1<string> keys);
    public string DataRaw(string key);
    public bool HasData();
    public CQ CssSet(object map);
    public CQ Css(string name, IConvertible value);
    public T Css(string style);
    public string Css(string style);
    private string StringOrNull(object value);
    public string Html();
    public CQ Html(String[] html);
    public CQ Wrap(string wrappingSelector);
    public CQ Wrap(IDomObject element);
    public CQ Wrap(IEnumerable`1<IDomObject> wrapper);
    public CQ WrapAll(string wrappingSelector);
    public CQ WrapAll(IDomObject element);
    public CQ WrapAll(IEnumerable`1<IDomObject> wrapper);
    public CQ Unwrap();
    public CQ WrapInner(string selector);
    public CQ WrapInner(IDomObject wrapper);
    public CQ WrapInner(IEnumerable`1<IDomObject> wrapper);
    private CQ Wrap(IEnumerable`1<IDomObject> wrapper, bool keepSiblingsTogether);
    protected int GetInnermostContainer(IEnumerable`1<IDomElement> elements, IDomElement& element, IDomElement& rootElement);
    public CQ PrependTo(String[] target);
    public CQ PrependTo(IEnumerable`1<IDomObject> targets);
    public CQ Prepend(IDomObject[] elements);
    public CQ Prepend(String[] selector);
    public CQ Prepend(IEnumerable`1<IDomObject> elements);
    public CQ Prepend(IEnumerable`1<IDomObject> elements, CQ& insertedElements);
    public string Text();
    public CQ Text(string value);
    public CQ Text(Func`3<int, string, object> func);
    private void AddTextToStringBuilder(StringBuilder sb, IEnumerable`1<IDomObject> nodes);
    private void SetChildText(IDomElement el, string text);
    public CQ Has(string selector);
    public CQ Has(IDomObject element);
    public CQ Has(IEnumerable`1<IDomObject> elements);
    public CQ Not(string selector);
    public CQ Not(IDomObject element);
    public CQ Not(IEnumerable`1<IDomObject> elements);
    public CQ Parents(string filter);
    private IEnumerable`1<IDomElement> ParentsImpl(IEnumerable`1<IDomElement> source, HashSet`1<IDomElement> until);
    public int get_Length();
    public IDomDocument get_Document();
    protected void set_Document(IDomDocument value);
    public Selector get_Selector();
    protected void set_Selector(Selector value);
    public IEnumerable`1<IDomObject> get_Selection();
    public IEnumerable`1<IDomElement> get_Elements();
    public SelectionSetOrder get_Order();
    public void set_Order(SelectionSetOrder value);
    public virtual string ToString();
    public sealed virtual IEnumerator`1<IDomObject> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    protected CQ get_CsQueryParent();
    protected void set_CsQueryParent(CQ value);
    protected SelectionSet`1<IDomObject> get_SelectionSet();
    protected void set_SelectionSet(SelectionSet`1<IDomObject> value);
    protected void Clear();
    protected void ClearSelections();
    protected CQ SetSelection(IEnumerable`1<IDomObject> selectionSet, SelectionSetOrder inputOrder, SelectionSetOrder outputOrder);
    protected CQ SetSelection(IDomObject element, SelectionSetOrder outputOrder);
    protected HashSet`1<string> MapMultipleValues(object value);
    protected void SetOptionSelected(IEnumerable`1<IDomElement> elements, object value, bool multiple);
    protected void SetOptionSelected(IEnumerable`1<IDomElement> elements, HashSet`1<string> values, bool multiple);
    protected bool AddSelection(IDomObject element);
    protected bool AddSelection(IEnumerable`1<IDomObject> elements);
    protected CQ MapRangeToNewCQ(IEnumerable`1<IDomObject> source, Func`2<IDomObject, IEnumerable`1<IDomObject>> del);
    protected IEnumerable`1<IDomObject> MergeSelections(IEnumerable`1<string> selectors);
    protected IEnumerable`1<IDomObject> MergeContent(IEnumerable`1<string> content);
    protected IEnumerable`1<IDomElement> OnlyElements(IEnumerable`1<IDomObject> objects);
    protected CQ FilterIfSelector(string selector, IEnumerable`1<IDomObject> list);
    protected CQ FilterIfSelector(string selector, IEnumerable`1<IDomObject> list, SelectionSetOrder order);
    protected IEnumerable`1<IDomObject> FilterElements(IEnumerable`1<IDomObject> elements, string selector);
    protected IEnumerable`1<IDomObject> FilterElementsIgnoreNull(IEnumerable`1<IDomObject> elements, string selector);
    public static CQ op_Implicit(string html);
    protected void CreateNewDocument();
    protected void CreateNewFragment();
    protected void CreateNewFragment(IEnumerable`1<IDomObject> elements);
    protected void CreateNew(CQ target, Stream html, Encoding encoding, HtmlParsingMode parsingMode, HtmlParsingOptions parsingOptions, DocType docType);
    protected void CreateNewFragment(CQ target, string html, string context, DocType docType);
    private CQ NewInstance(string html);
    private CQ NewInstance(IEnumerable`1<IDomObject> elements, CQ context);
    private void ConfigureNewInstance(CQ dom, IEnumerable`1<IDomObject> elements, CQ context);
    private CQ NewInstance(IEnumerable`1<IDomObject> elements);
    private void ConfigureNewInstance(CQ dom, IEnumerable`1<IDomObject> elements);
    private void ConfigureNewInstance(string selector, CQ context);
    private CQ NewInstance(IDomObject element, CQ context);
    private void ConfigureNewInstance(CQ dom, IDomObject element, CQ context);
    public static DomRenderingOptions get_DefaultDomRenderingOptions();
    public static void set_DefaultDomRenderingOptions(DomRenderingOptions value);
    public static DocType get_DefaultDocType();
    public static void set_DefaultDocType(DocType value);
    public static string ToJSON(object json);
    public static T ParseJSON(string json);
    public static object ParseJSON(string json);
    public static object ParseJSON(string json, Type type);
    public static JsObject ToExpando(object obj);
    public static T ToDynamic(object obj);
    public static Browser get_Browser();
    [CompilerGeneratedAttribute]
private static bool <GetTrueTarget>b__0(IDomElement item);
    [CompilerGeneratedAttribute]
private static bool <InsertAtOffset>b__2(IDomObject item);
    [CompilerGeneratedAttribute]
private static bool <Val>b__20(IHTMLOptionElement item);
    [CompilerGeneratedAttribute]
private static string <Val>b__21(IHTMLOptionElement item);
    [CompilerGeneratedAttribute]
private static void <RemoveClass>b__24(IDomElement item);
    [CompilerGeneratedAttribute]
private bool <Remove>b__26(IDomObject item);
    [CompilerGeneratedAttribute]
private static IDomElement <nextPrevImpl>b__27(IDomElement item);
    [CompilerGeneratedAttribute]
private static bool <nextPrevImpl>b__28(IDomElement item);
    [CompilerGeneratedAttribute]
private static IDomElement <nextPrevImpl>b__29(IDomElement item);
    [CompilerGeneratedAttribute]
private static bool <nextPrevImpl>b__2a(IDomElement item);
    [CompilerGeneratedAttribute]
private static void <Empty>b__3f(IDomObject e);
}
public class CsQuery.CsQueryConfig : object {
    private DocType _DocType;
    private DomRenderingOptions _DomRenderingOptions;
    private HtmlParsingOptions _HtmlParsingOptions;
    private IOutputFormatter _OutputFormatter;
    private Func`1<IOutputFormatter> _GetOutputFormatter;
    private Type _DynamicObjectType;
    private IHttpWebRequestFactory _WebRequestFactory;
    [CompilerGeneratedAttribute]
private IDomIndexProvider <DomIndexProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private IHtmlEncoder <HtmlEncoder>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<Type, bool> CS$<>9__CachedAnonymousMethodDelegate1;
    private IDomIndex GetDomIndex { get; }
    public IDomIndexProvider DomIndexProvider { get; public set; }
    public DomRenderingOptions DomRenderingOptions { get; public set; }
    public HtmlParsingOptions HtmlParsingOptions { get; public set; }
    public IHtmlEncoder HtmlEncoder { get; public set; }
    public IOutputFormatter OutputFormatter { get; public set; }
    public Func`1<IOutputFormatter> GetOutputFormatter { get; public set; }
    public IHttpWebRequestFactory WebRequestFactory { get; }
    public DocType DocType { get; public set; }
    public Type DynamicObjectType { get; public set; }
    private IOutputFormatter GetDefaultOutputFormatter();
    private IDomIndex get_GetDomIndex();
    [CompilerGeneratedAttribute]
public IDomIndexProvider get_DomIndexProvider();
    [CompilerGeneratedAttribute]
public void set_DomIndexProvider(IDomIndexProvider value);
    public DomRenderingOptions get_DomRenderingOptions();
    public void set_DomRenderingOptions(DomRenderingOptions value);
    public HtmlParsingOptions get_HtmlParsingOptions();
    public void set_HtmlParsingOptions(HtmlParsingOptions value);
    [CompilerGeneratedAttribute]
public IHtmlEncoder get_HtmlEncoder();
    [CompilerGeneratedAttribute]
public void set_HtmlEncoder(IHtmlEncoder value);
    public IOutputFormatter get_OutputFormatter();
    public void set_OutputFormatter(IOutputFormatter value);
    public Func`1<IOutputFormatter> get_GetOutputFormatter();
    public void set_GetOutputFormatter(Func`1<IOutputFormatter> value);
    public IHttpWebRequestFactory get_WebRequestFactory();
    public DocType get_DocType();
    public void set_DocType(DocType value);
    public Type get_DynamicObjectType();
    public void set_DynamicObjectType(Type value);
    [CompilerGeneratedAttribute]
private static bool <set_DynamicObjectType>b__0(Type item);
}
public enum CsQuery.CSSRuleType : Enum {
    public int value__;
    public static CSSRuleType UNKNOWN_RULE;
    public static CSSRuleType STYLE_RULE;
    public static CSSRuleType CHARSET_RULE;
    public static CSSRuleType IMPORT_RULE;
    public static CSSRuleType MEDIA_RULE;
    public static CSSRuleType FONT_FACE_RULE;
    public static CSSRuleType PAGE_RULE;
}
public enum CsQuery.CSSStyleType : Enum {
    public byte value__;
    public static CSSStyleType Unit;
    public static CSSStyleType Option;
    public static CSSStyleType UnitOption;
    public static CSSStyleType Composite;
    public static CSSStyleType Color;
    public static CSSStyleType Font;
    public static CSSStyleType Url;
    public static CSSStyleType String;
}
public enum CsQuery.DocType : Enum {
    public byte value__;
    public static DocType Default;
    public static DocType HTML5;
    public static DocType HTML4;
    public static DocType XHTML;
    public static DocType Unknown;
    public static DocType HTML4Strict;
    public static DocType XHTMLStrict;
}
public static class CsQuery.DomIndexProviders : object {
    private static IDomIndexProvider _RangedDomIndexProvider;
    private static IDomIndexProvider _SimpleDomIndexProvider;
    private static IDomIndexProvider _NoDomIndexProvider;
    public static IDomIndexProvider Simple { get; }
    public static IDomIndexProvider Ranged { get; }
    public static IDomIndexProvider None { get; }
    private static DomIndexProviders();
    public static IDomIndexProvider get_Simple();
    public static IDomIndexProvider get_Ranged();
    public static IDomIndexProvider get_None();
}
[FlagsAttribute]
public enum CsQuery.DomRenderingOptions : Enum {
    public int value__;
    public static DomRenderingOptions None;
    public static DomRenderingOptions Default;
    [ObsoleteAttribute]
public static DomRenderingOptions RemoveMismatchedCloseTags;
    public static DomRenderingOptions RemoveComments;
    public static DomRenderingOptions QuoteAllAttributes;
}
public static class CsQuery.Engine.AttributeSelectors : object {
    public static bool Matches(IDomElement element, SelectorClause selector);
    private static bool ContainsWord(string sentence, string word, StringComparer comparer);
}
public enum CsQuery.Engine.AttributeSelectorType : Enum {
    public int value__;
    public static AttributeSelectorType Exists;
    public static AttributeSelectorType Equals;
    public static AttributeSelectorType StartsWith;
    public static AttributeSelectorType Contains;
    public static AttributeSelectorType NotExists;
    public static AttributeSelectorType ContainsWord;
    public static AttributeSelectorType EndsWith;
    public static AttributeSelectorType NotEquals;
    public static AttributeSelectorType StartsWithOrHyphen;
}
public class CsQuery.Engine.CaseSensitiveCharacterEqualityComparer : CharacterEqualityComparer {
    public virtual bool Equals(char x, char y);
    public virtual int GetHashCode(char obj);
}
public class CsQuery.Engine.CharacterEqualityComparer : EqualityComparer`1<char> {
    public static CharacterEqualityComparer Create(bool isCaseSensitive);
    public virtual bool Equals(char x, char y);
    public virtual int GetHashCode(char obj);
}
public enum CsQuery.Engine.CombinatorType : Enum {
    public int value__;
    public static CombinatorType Grouped;
    public static CombinatorType Chained;
    public static CombinatorType Root;
    public static CombinatorType Context;
}
[FlagsAttribute]
public enum CsQuery.Engine.DomIndexFeatures : Enum {
    public int value__;
    public static DomIndexFeatures Lookup;
    public static DomIndexFeatures Range;
    public static DomIndexFeatures Queue;
}
public class CsQuery.Engine.DomIndexNone : object {
    public int Count { get; }
    public DomIndexFeatures Features { get; }
    public bool QueueChanges { get; public set; }
    public sealed virtual void AddToIndex(IDomIndexedNode element);
    public sealed virtual void AddToIndex(UInt16[] key, IDomIndexedNode element);
    public sealed virtual void RemoveFromIndex(UInt16[] key, IDomIndexedNode element);
    public sealed virtual void RemoveFromIndex(IDomIndexedNode element);
    public IEnumerable`1<IDomObject> QueryIndex(UInt16[] subKey);
    public IEnumerable`1<IDomObject> QueryIndex(UInt16[] subKey, int depth, bool includeDescendants);
    public sealed virtual void Clear();
    public sealed virtual int get_Count();
    public DomIndexFeatures get_Features();
    public bool get_QueueChanges();
    public void set_QueueChanges(bool value);
}
public class CsQuery.Engine.DomIndexRanged : object {
    private RangeSortedDictionary`2<ushort, IDomObject> _SelectorXref;
    private Queue`1<IndexOperation> __PendingIndexChanges;
    [CompilerGeneratedAttribute]
private bool <QueueChanges>k__BackingField;
    private Queue`1<IndexOperation> _PendingIndexChanges { get; private set; }
    private Queue`1<IndexOperation> PendingIndexChanges { get; }
    private bool IndexNeedsUpdate { get; }
    internal RangeSortedDictionary`2<ushort, IDomObject> SelectorXref { get; }
    public bool QueueChanges { get; public set; }
    public int Count { get; }
    private Queue`1<IndexOperation> get__PendingIndexChanges();
    private void set__PendingIndexChanges(Queue`1<IndexOperation> value);
    private Queue`1<IndexOperation> get_PendingIndexChanges();
    private bool get_IndexNeedsUpdate();
    internal RangeSortedDictionary`2<ushort, IDomObject> get_SelectorXref();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_QueueChanges();
    [CompilerGeneratedAttribute]
public sealed virtual void set_QueueChanges(bool value);
    public sealed virtual void AddToIndex(IDomIndexedNode element);
    public sealed virtual void AddToIndex(UInt16[] key, IDomIndexedNode element);
    public sealed virtual void RemoveFromIndex(UInt16[] key, IDomIndexedNode element);
    public sealed virtual void RemoveFromIndex(IDomIndexedNode element);
    public sealed virtual IEnumerable`1<IDomObject> QueryIndex(UInt16[] subKey, int depth, bool includeDescendants);
    public sealed virtual IEnumerable`1<IDomObject> QueryIndex(UInt16[] key);
    public sealed virtual void Clear();
    public sealed virtual int get_Count();
    private void QueueAddToIndex(UInt16[] key, IDomIndexedNode element);
    private void QueueRemoveFromIndex(UInt16[] key);
    private void ProcessQueue();
    private UInt16[] RangePath(UInt16[] key, UInt16[] path);
    private UInt16[] RangePath(UInt16[] key, IDomIndexedNode element);
    private UInt16[] RangePath(UInt16[] path);
}
public class CsQuery.Engine.DomIndexSimple : object {
    private IDictionary`2<UInt16[], IndexValue> Index;
    public int Count { get; }
    public bool QueueChanges { get; public set; }
    public sealed virtual void AddToIndex(IDomIndexedNode element);
    public sealed virtual void AddToIndex(UInt16[] key, IDomIndexedNode element);
    public sealed virtual void RemoveFromIndex(UInt16[] key, IDomIndexedNode element);
    public sealed virtual void RemoveFromIndex(IDomIndexedNode element);
    public sealed virtual IEnumerable`1<IDomObject> QueryIndex(UInt16[] subKey);
    public sealed virtual void Clear();
    public sealed virtual int get_Count();
    public bool get_QueueChanges();
    public void set_QueueChanges(bool value);
    public IEnumerable`1<IDomObject> QueryIndex(UInt16[] subKey, int depth, bool includeDescendants);
}
public interface CsQuery.Engine.IDomIndex {
    public int Count { get; }
    public abstract virtual void AddToIndex(IDomIndexedNode element);
    public abstract virtual void AddToIndex(UInt16[] key, IDomIndexedNode element);
    public abstract virtual void RemoveFromIndex(IDomIndexedNode element);
    public abstract virtual void RemoveFromIndex(UInt16[] key, IDomIndexedNode element);
    public abstract virtual void Clear();
    public abstract virtual int get_Count();
}
public interface CsQuery.Engine.IDomIndexProvider {
    public abstract virtual IDomIndex GetDomIndex();
}
public interface CsQuery.Engine.IDomIndexQueue {
    public bool QueueChanges { get; public set; }
    public abstract virtual bool get_QueueChanges();
    public abstract virtual void set_QueueChanges(bool value);
}
public interface CsQuery.Engine.IDomIndexRanged {
    public abstract virtual IEnumerable`1<IDomObject> QueryIndex(UInt16[] subKey, int depth, bool includeDescendants);
}
public interface CsQuery.Engine.IDomIndexSimple {
    public abstract virtual IEnumerable`1<IDomObject> QueryIndex(UInt16[] subKey);
}
internal class CsQuery.Engine.IndexOperation : ValueType {
    public IndexOperationType IndexOperationType;
    public UInt16[] Key;
    public IDomObject Value;
}
internal enum CsQuery.Engine.IndexOperationType : Enum {
    public int value__;
    public static IndexOperationType Add;
    public static IndexOperationType Remove;
    public static IndexOperationType Change;
}
public interface CsQuery.Engine.IPseudoSelector {
    public string Arguments { get; public set; }
    public int MinimumParameterCount { get; }
    public int MaximumParameterCount { get; }
    public string Name { get; }
    public abstract virtual string get_Arguments();
    public abstract virtual void set_Arguments(string value);
    public abstract virtual int get_MinimumParameterCount();
    public abstract virtual int get_MaximumParameterCount();
    public abstract virtual string get_Name();
}
public interface CsQuery.Engine.IPseudoSelectorChild {
    public abstract virtual bool Matches(IDomObject element);
    public abstract virtual IEnumerable`1<IDomObject> ChildMatches(IDomContainer element);
}
public interface CsQuery.Engine.IPseudoSelectorFilter {
    public abstract virtual IEnumerable`1<IDomObject> Filter(IEnumerable`1<IDomObject> selection);
}
internal class CsQuery.Engine.MatchElement : object {
    [CompilerGeneratedAttribute]
private int <Depth>k__BackingField;
    [CompilerGeneratedAttribute]
private IDomElement <Element>k__BackingField;
    public int Depth { get; protected set; }
    public IDomElement Element { get; protected set; }
    public MatchElement(IDomElement element);
    public MatchElement(IDomElement element, int depth);
    protected void Initialize(IDomElement element, int depth);
    [CompilerGeneratedAttribute]
public int get_Depth();
    [CompilerGeneratedAttribute]
protected void set_Depth(int value);
    [CompilerGeneratedAttribute]
public IDomElement get_Element();
    [CompilerGeneratedAttribute]
protected void set_Element(IDomElement value);
}
public class CsQuery.Engine.NthChildMatcher : object {
    private static ConcurrentDictionary`2<string, CacheInfo> ParsedEquationCache;
    private CacheInfo cacheInfo;
    private int MatchOnlyIndex;
    private IEquation`1<int> Equation;
    private bool _IsJustNumber;
    private string _Text;
    private string _OnlyNodeName;
    private bool FromLast;
    private Func`2<int, bool> IndexMatchesImpl;
    private Func`2<IDomElement, IEnumerable`1<IDomObject>> GetMatchingChildrenImpl;
    protected bool IsJustNumber { get; protected set; }
    protected string OnlyNodeName { get; protected set; }
    protected string Text { get; protected set; }
    private static NthChildMatcher();
    protected bool get_IsJustNumber();
    protected void set_IsJustNumber(bool value);
    protected string get_OnlyNodeName();
    protected void set_OnlyNodeName(string value);
    protected string get_Text();
    protected void set_Text(string value);
    public bool IsNthChildOfType(IDomElement element, string formula, bool fromLast);
    public bool IsNthChild(IDomElement element, string formula, bool fromLast);
    public IEnumerable`1<IDomObject> NthChildsOfType(IDomContainer element, string formula, bool fromLast);
    public IEnumerable`1<IDomObject> NthChilds(IDomContainer element, string formula, bool fromLast);
    private int IndexOf(IDomElement obj, bool onlyOfSameType, bool fromLast);
    public bool IndexMatches(int index, string formula, bool fromLast);
    public bool IndexMatches(int index, string formula);
    public IEnumerable`1<IDomObject> GetMatchingChildren(IDomContainer obj, string formula, string onlyNodeName, bool fromLast);
    public IEnumerable`1<IDomObject> GetMatchingChildren(IDomContainer obj, string formula);
    public IEnumerable`1<IDomObject> GetMatchingChildren(IDomContainer obj);
    public static IDomObject GetEffectiveChild(INodeList nodeList, int index, bool fromLast);
    public static int GetEffectiveIndex(INodeList nodeList, int index, bool fromLast);
    private IDomElement GetNthChild(IDomContainer parent, int index);
    private IDomElement GetNextChild(IDomContainer parent, int currentIndex, Int32& newIndex);
    private IDomObject GetEffectiveChild(INodeList nodeList, int index);
    protected void ParseEquation(string equationText);
    protected void CheckForSimpleNumber(string equation);
    private IEquation`1<int> GetEquation(string equationText);
    protected string CheckForEvenOdd(string equation);
    protected bool IndexMatchesNumber(int index);
    protected bool IndexMatchesFormula(int index);
    public IEnumerable`1<IDomObject> GetMatchingChildrenNumber(IDomElement element);
    public IEnumerable`1<IDomObject> GetMatchingChildrenFormula(IDomElement element);
    protected void UpdateCacheInfo(int lastIndex);
}
public class CsQuery.Engine.PseudoClassSelectors.Contains : PseudoSelectorFilter {
    public int MaximumParameterCount { get; }
    public int MinimumParameterCount { get; }
    public virtual IEnumerable`1<IDomObject> Filter(IEnumerable`1<IDomObject> selection);
    public virtual bool Matches(IDomObject element);
    private bool ContainsText(IDomObject source, string text);
    public virtual int get_MaximumParameterCount();
    public virtual int get_MinimumParameterCount();
    protected virtual QuotingRule ParameterQuoted(int index);
}
public class CsQuery.Engine.PseudoClassSelectors.Empty : PseudoSelectorFilter {
    [CompilerGeneratedAttribute]
private static Func`2<IDomObject, bool> CS$<>9__CachedAnonymousMethodDelegate1;
    public virtual bool Matches(IDomObject element);
    public static bool IsEmpty(IDomObject element);
    [CompilerGeneratedAttribute]
private static bool <IsEmpty>b__0(IDomObject item);
}
public class CsQuery.Engine.PseudoClassSelectors.Eq : Indexed {
    public virtual IEnumerable`1<IDomObject> Filter(IEnumerable`1<IDomObject> selection);
    private IDomObject ElementAtIndex(IEnumerable`1<IDomObject> list, int index);
}
public class CsQuery.Engine.PseudoClassSelectors.Even : PseudoSelector {
    public sealed virtual IEnumerable`1<IDomObject> Filter(IEnumerable`1<IDomObject> selection);
}
public class CsQuery.Engine.PseudoClassSelectors.First : PseudoSelector {
    public sealed virtual IEnumerable`1<IDomObject> Filter(IEnumerable`1<IDomObject> selection);
}
public class CsQuery.Engine.PseudoClassSelectors.FirstChild : PseudoSelectorChild {
    public virtual bool Matches(IDomObject element);
    public virtual IEnumerable`1<IDomObject> ChildMatches(IDomContainer element);
}
public class CsQuery.Engine.PseudoClassSelectors.FirstOfType : PseudoSelectorChild {
    public virtual bool Matches(IDomObject element);
    public virtual IEnumerable`1<IDomObject> ChildMatches(IDomContainer element);
}
public class CsQuery.Engine.PseudoClassSelectors.Gt : Indexed {
    public virtual IEnumerable`1<IDomObject> Filter(IEnumerable`1<IDomObject> selection);
    private static IEnumerable`1<IDomObject> IndexGreaterThan(IEnumerable`1<IDomObject> list, int position);
}
public class CsQuery.Engine.PseudoClassSelectors.Has : PseudoSelector {
    protected Selector ChildSelector;
    public string Arguments { get; public set; }
    public int MaximumParameterCount { get; }
    public int MinimumParameterCount { get; }
    public virtual string get_Arguments();
    public virtual void set_Arguments(string value);
    public sealed virtual IEnumerable`1<IDomObject> Filter(IEnumerable`1<IDomObject> selection);
    protected IEnumerable`1<IDomObject> Descendants(IDomObject parent);
    public virtual int get_MaximumParameterCount();
    public virtual int get_MinimumParameterCount();
}
public class CsQuery.Engine.PseudoClassSelectors.Header : PseudoSelectorFilter {
    public virtual bool Matches(IDomObject element);
}
public class CsQuery.Engine.PseudoClassSelectors.Hidden : PseudoSelectorFilter {
    public virtual bool Matches(IDomObject element);
}
public abstract class CsQuery.Engine.PseudoClassSelectors.Indexed : PseudoSelector {
    private int _Index;
    private bool IndexParsed;
    protected int Index { get; }
    public int MaximumParameterCount { get; }
    public int MinimumParameterCount { get; }
    protected int get_Index();
    public virtual int get_MaximumParameterCount();
    public virtual int get_MinimumParameterCount();
    public abstract virtual IEnumerable`1<IDomObject> Filter(IEnumerable`1<IDomObject> selection);
}
public class CsQuery.Engine.PseudoClassSelectors.Lang : PseudoSelectorChild {
    public virtual bool Matches(IDomObject element);
}
public class CsQuery.Engine.PseudoClassSelectors.Last : PseudoSelector {
    public sealed virtual IEnumerable`1<IDomObject> Filter(IEnumerable`1<IDomObject> selection);
}
public class CsQuery.Engine.PseudoClassSelectors.LastChild : PseudoSelectorChild {
    public virtual bool Matches(IDomObject element);
    public virtual IEnumerable`1<IDomObject> ChildMatches(IDomContainer element);
}
public class CsQuery.Engine.PseudoClassSelectors.LastOfType : PseudoSelectorChild {
    public virtual bool Matches(IDomObject element);
    public virtual IEnumerable`1<IDomObject> ChildMatches(IDomContainer element);
}
public class CsQuery.Engine.PseudoClassSelectors.Lt : Indexed {
    public virtual IEnumerable`1<IDomObject> Filter(IEnumerable`1<IDomObject> selection);
    private IEnumerable`1<IDomObject> IndexLessThan(IEnumerable`1<IDomObject> list, int position);
}
public class CsQuery.Engine.PseudoClassSelectors.Not : PseudoSelector {
    public int MaximumParameterCount { get; }
    public int MinimumParameterCount { get; }
    public sealed virtual IEnumerable`1<IDomObject> Filter(IEnumerable`1<IDomObject> selection);
    private Selector SubSelector();
    public virtual int get_MaximumParameterCount();
    public virtual int get_MinimumParameterCount();
}
public class CsQuery.Engine.PseudoClassSelectors.NthChild : NthChildSelector {
    public virtual bool Matches(IDomObject element);
    public virtual IEnumerable`1<IDomObject> ChildMatches(IDomContainer element);
}
public abstract class CsQuery.Engine.PseudoClassSelectors.NthChildSelector : PseudoSelector {
    private NthChildMatcher _NthC;
    protected NthChildMatcher NthC { get; }
    public int MinimumParameterCount { get; }
    public int MaximumParameterCount { get; }
    protected NthChildMatcher get_NthC();
    public abstract virtual bool Matches(IDomObject element);
    public abstract virtual IEnumerable`1<IDomObject> ChildMatches(IDomContainer element);
    public virtual int get_MinimumParameterCount();
    public virtual int get_MaximumParameterCount();
}
public class CsQuery.Engine.PseudoClassSelectors.NthLastChild : NthChildSelector {
    public virtual bool Matches(IDomObject element);
    public virtual IEnumerable`1<IDomObject> ChildMatches(IDomContainer element);
}
public class CsQuery.Engine.PseudoClassSelectors.NthLastOfType : NthChildSelector {
    public virtual bool Matches(IDomObject element);
    public virtual IEnumerable`1<IDomObject> ChildMatches(IDomContainer element);
}
public class CsQuery.Engine.PseudoClassSelectors.NthOfType : NthChildSelector {
    public virtual bool Matches(IDomObject element);
    public virtual IEnumerable`1<IDomObject> ChildMatches(IDomContainer element);
}
public class CsQuery.Engine.PseudoClassSelectors.Odd : PseudoSelector {
    public sealed virtual IEnumerable`1<IDomObject> Filter(IEnumerable`1<IDomObject> selection);
}
public class CsQuery.Engine.PseudoClassSelectors.OnlyChild : PseudoSelectorChild {
    public virtual bool Matches(IDomObject element);
    public virtual IEnumerable`1<IDomObject> ChildMatches(IDomContainer element);
    private IDomObject OnlyChildOrNull(IDomObject parent);
}
public class CsQuery.Engine.PseudoClassSelectors.OnlyOfType : PseudoSelectorChild {
    [CompilerGeneratedAttribute]
private static Func`2<IDomElement, bool> CS$<>9__CachedAnonymousMethodDelegate4;
    public virtual bool Matches(IDomObject element);
    public virtual IEnumerable`1<IDomObject> ChildMatches(IDomContainer element);
    private IEnumerable`1<IDomObject> OnlyChildOfAnyType(IDomObject parent);
    [CompilerGeneratedAttribute]
private static bool <OnlyChildOfAnyType>b__3(IDomElement item);
}
public class CsQuery.Engine.PseudoClassSelectors.Parent : PseudoSelectorFilter {
    public virtual bool Matches(IDomObject element);
}
internal class CsQuery.Engine.PseudoClassSelectors.RegexExtension : PseudoSelectorFilter {
    private string Property;
    private Modes Mode;
    private Regex Expression;
    public string Arguments { get; public set; }
    public int MaximumParameterCount { get; }
    public int MinimumParameterCount { get; }
    public string Name { get; }
    public virtual bool Matches(IDomObject element);
    private void Configure();
    public virtual string get_Arguments();
    public virtual void set_Arguments(string value);
    protected virtual QuotingRule ParameterQuoted(int index);
    public virtual int get_MaximumParameterCount();
    public virtual int get_MinimumParameterCount();
    public virtual string get_Name();
}
public class CsQuery.Engine.PseudoClassSelectors.Visible : PseudoSelectorFilter {
    public virtual bool Matches(IDomObject element);
    public static bool IsVisible(IDomObject element);
    private static bool ElementIsItselfHidden(IDomElement el);
}
public enum CsQuery.Engine.PseudoClassType : Enum {
    public int value__;
    public static PseudoClassType All;
    public static PseudoClassType Even;
    public static PseudoClassType Odd;
    public static PseudoClassType First;
    public static PseudoClassType Last;
    public static PseudoClassType IndexEquals;
    public static PseudoClassType IndexLessThan;
    public static PseudoClassType IndexGreaterThan;
    public static PseudoClassType Parent;
    public static PseudoClassType Visible;
    public static PseudoClassType Hidden;
    public static PseudoClassType Header;
    public static PseudoClassType Has;
    public static PseudoClassType Not;
    public static PseudoClassType FirstChild;
    public static PseudoClassType LastChild;
    public static PseudoClassType NthChild;
    public static PseudoClassType FirstOfType;
    public static PseudoClassType LastOfType;
    public static PseudoClassType NthOfType;
    public static PseudoClassType NthLastChild;
    public static PseudoClassType NthLastOfType;
    public static PseudoClassType OnlyChild;
    public static PseudoClassType OnlyOfType;
    public static PseudoClassType Empty;
}
public abstract class CsQuery.Engine.PseudoSelector : object {
    private string _Arguments;
    [CompilerGeneratedAttribute]
private String[] <Parameters>k__BackingField;
    protected String[] Parameters { get; protected set; }
    public string Arguments { get; public set; }
    public int MinimumParameterCount { get; }
    public int MaximumParameterCount { get; }
    public string Name { get; }
    [CompilerGeneratedAttribute]
protected virtual String[] get_Parameters();
    [CompilerGeneratedAttribute]
protected virtual void set_Parameters(String[] value);
    protected virtual QuotingRule ParameterQuoted(int index);
    public virtual string get_Arguments();
    public virtual void set_Arguments(string value);
    public virtual int get_MinimumParameterCount();
    public virtual int get_MaximumParameterCount();
    public virtual string get_Name();
    protected String[] ParseArgs(string value);
    protected string ParseSingleArg(string value);
    protected virtual void ValidateParameters(String[] parameters);
    protected string ParameterCountMismatchError();
    protected string InvalidArgumentsError();
}
public abstract class CsQuery.Engine.PseudoSelectorChild : PseudoSelector {
    public abstract virtual bool Matches(IDomObject element);
    public virtual IEnumerable`1<IDomObject> ChildMatches(IDomContainer element);
    [CompilerGeneratedAttribute]
private bool <ChildMatches>b__0(IDomElement item);
}
public abstract class CsQuery.Engine.PseudoSelectorFilter : PseudoSelector {
    public abstract virtual bool Matches(IDomObject element);
    public virtual IEnumerable`1<IDomObject> Filter(IEnumerable`1<IDomObject> elements);
    [CompilerGeneratedAttribute]
private bool <Filter>b__0(IDomObject item);
}
public class CsQuery.Engine.PseudoSelectors : object {
    private ConcurrentDictionary`2<string, Type> InnerSelectors;
    [CompilerGeneratedAttribute]
private static PseudoSelectors <Items>k__BackingField;
    public static PseudoSelectors Items { get; protected set; }
    private static PseudoSelectors();
    [CompilerGeneratedAttribute]
public static PseudoSelectors get_Items();
    [CompilerGeneratedAttribute]
protected static void set_Items(PseudoSelectors value);
    public IPseudoSelector GetInstance(string name);
    public Type GetRegisteredType(string name);
    public bool TryGetRegisteredType(string name, Type& type);
    public bool TryGetInstance(string name, IPseudoSelector& instance);
    public void Register(string name, Type type);
    public int Register(Assembly assembly);
    public bool Unregister(string name);
    private void ValidateType(Type value);
    private void PopulateInnerSelectors();
    private int PopulateFromAssembly(Assembly assy, String[] nameSpaces);
}
public enum CsQuery.Engine.QuotingRule : Enum {
    public int value__;
    public static QuotingRule NeverQuoted;
    public static QuotingRule AlwaysQuoted;
    public static QuotingRule OptionallyQuoted;
}
[DefaultMemberAttribute("Item")]
public class CsQuery.Engine.Selector : object {
    private List`1<SelectorClause> _Clauses;
    public int Count { get; }
    public SelectorClause Item { get; }
    public bool IsHtml { get; }
    protected List`1<SelectorClause> Clauses { get; }
    protected IEnumerable`1<SelectorClause> ClausesClone { get; }
    public Selector(SelectorClause clause);
    public Selector(IEnumerable`1<SelectorClause> clauses);
    public Selector(string selector);
    public Selector(IEnumerable`1<IDomObject> elements);
    public Selector(IDomObject element);
    public int get_Count();
    public SelectorClause get_Item(int index);
    public bool get_IsHtml();
    public void Add(SelectorClause clause);
    public Selector ToFilterSelector();
    public Selector ToContextSelector();
    private SelectorEngine GetEngine(IDomDocument document);
    protected List`1<SelectorClause> get_Clauses();
    protected IEnumerable`1<SelectorClause> get_ClausesClone();
    public void Insert(int index, SelectorClause clause, CombinatorType combinatorType);
    public IList`1<IDomObject> Select(IDomDocument document);
    public IList`1<IDomObject> Select(IDomDocument document, IDomObject context);
    public IList`1<IDomObject> Select(IDomDocument document, IEnumerable`1<IDomObject> context);
    public IEnumerable`1<IDomObject> Filter(IDomDocument document, IEnumerable`1<IDomObject> sequence);
    public bool Matches(IDomDocument document, IDomObject element);
    public IEnumerable`1<IDomObject> Except(IDomDocument document, IEnumerable`1<IDomObject> sequence);
    public Selector Clone();
    public virtual string ToString();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public sealed virtual IEnumerator`1<SelectorClause> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class CsQuery.Engine.SelectorClause : object {
    private string _Tag;
    private string _AttributeName;
    private string _AttributeValue;
    private StringComparer _AttributeValueStringComparer;
    [CompilerGeneratedAttribute]
private SelectorType <SelectorType>k__BackingField;
    [CompilerGeneratedAttribute]
private CombinatorType <CombinatorType>k__BackingField;
    [CompilerGeneratedAttribute]
private TraversalType <TraversalType>k__BackingField;
    [CompilerGeneratedAttribute]
private AttributeSelectorType <AttributeSelectorType>k__BackingField;
    [CompilerGeneratedAttribute]
private IPseudoSelector <PseudoSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Criteria>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PositionIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ChildDepth>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <AttributeNameTokenID>k__BackingField;
    [CompilerGeneratedAttribute]
private StringComparison <AttributeValueStringComparison>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Class>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ID>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Html>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<IDomObject> <SelectElements>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoIndex>k__BackingField;
    private bool IsCaseInsensitiveAttributeValue { get; }
    public SelectorType SelectorType { get; public set; }
    public CombinatorType CombinatorType { get; public set; }
    public TraversalType TraversalType { get; public set; }
    public AttributeSelectorType AttributeSelectorType { get; public set; }
    public IPseudoSelector PseudoSelector { get; public set; }
    public string Tag { get; public set; }
    public string Criteria { get; public set; }
    public int PositionIndex { get; public set; }
    public int ChildDepth { get; public set; }
    public string AttributeName { get; public set; }
    public string AttributeValue { get; public set; }
    public ushort AttributeNameTokenID { get; private set; }
    public StringComparison AttributeValueStringComparison { get; private set; }
    public StringComparer AttributeValueStringComparer { get; }
    public string Class { get; public set; }
    public string ID { get; public set; }
    public string Html { get; public set; }
    public IEnumerable`1<IDomObject> SelectElements { get; public set; }
    public bool IsDomPositionPseudoSelector { get; }
    public bool IsResultListPosition { get; }
    public bool IsFunction { get; }
    public bool IsNew { get; }
    public bool IsComplete { get; }
    public bool NoIndex { get; public set; }
    protected void Initialize();
    private bool get_IsCaseInsensitiveAttributeValue();
    [CompilerGeneratedAttribute]
public SelectorType get_SelectorType();
    [CompilerGeneratedAttribute]
public void set_SelectorType(SelectorType value);
    [CompilerGeneratedAttribute]
public CombinatorType get_CombinatorType();
    [CompilerGeneratedAttribute]
public void set_CombinatorType(CombinatorType value);
    [CompilerGeneratedAttribute]
public TraversalType get_TraversalType();
    [CompilerGeneratedAttribute]
public void set_TraversalType(TraversalType value);
    [CompilerGeneratedAttribute]
public AttributeSelectorType get_AttributeSelectorType();
    [CompilerGeneratedAttribute]
public void set_AttributeSelectorType(AttributeSelectorType value);
    [CompilerGeneratedAttribute]
public IPseudoSelector get_PseudoSelector();
    [CompilerGeneratedAttribute]
public void set_PseudoSelector(IPseudoSelector value);
    public string get_Tag();
    public void set_Tag(string value);
    [CompilerGeneratedAttribute]
public string get_Criteria();
    [CompilerGeneratedAttribute]
public void set_Criteria(string value);
    [CompilerGeneratedAttribute]
public int get_PositionIndex();
    [CompilerGeneratedAttribute]
public void set_PositionIndex(int value);
    [CompilerGeneratedAttribute]
public int get_ChildDepth();
    [CompilerGeneratedAttribute]
public void set_ChildDepth(int value);
    public string get_AttributeName();
    public void set_AttributeName(string value);
    public string get_AttributeValue();
    public void set_AttributeValue(string value);
    [CompilerGeneratedAttribute]
public ushort get_AttributeNameTokenID();
    [CompilerGeneratedAttribute]
private void set_AttributeNameTokenID(ushort value);
    [CompilerGeneratedAttribute]
public StringComparison get_AttributeValueStringComparison();
    [CompilerGeneratedAttribute]
private void set_AttributeValueStringComparison(StringComparison value);
    public StringComparer get_AttributeValueStringComparer();
    [CompilerGeneratedAttribute]
public string get_Class();
    [CompilerGeneratedAttribute]
public void set_Class(string value);
    [CompilerGeneratedAttribute]
public string get_ID();
    [CompilerGeneratedAttribute]
public void set_ID(string value);
    [CompilerGeneratedAttribute]
public string get_Html();
    [CompilerGeneratedAttribute]
public void set_Html(string value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<IDomObject> get_SelectElements();
    [CompilerGeneratedAttribute]
public void set_SelectElements(IEnumerable`1<IDomObject> value);
    public bool get_IsDomPositionPseudoSelector();
    public bool get_IsResultListPosition();
    public bool get_IsFunction();
    public bool get_IsNew();
    public bool get_IsComplete();
    [CompilerGeneratedAttribute]
public bool get_NoIndex();
    [CompilerGeneratedAttribute]
public void set_NoIndex(bool value);
    public void Clear();
    public SelectorClause Clone();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    private int GetHash(object obj);
    public virtual string ToString();
}
internal class CsQuery.Engine.SelectorEngine : object {
    private List`1<SelectorClause> ActiveSelectors;
    private int activeSelectorId;
    [CompilerGeneratedAttribute]
private Selector <Selector>k__BackingField;
    [CompilerGeneratedAttribute]
private IDomDocument <Document>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<IDomObject, UInt16[]> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Func`2<IDomObject, IDomElement> CS$<>9__CachedAnonymousMethodDelegate37;
    public Selector Selector { get; protected set; }
    public IDomDocument Document { get; protected set; }
    public SelectorEngine(IDomDocument document, Selector selector);
    [CompilerGeneratedAttribute]
public Selector get_Selector();
    [CompilerGeneratedAttribute]
protected void set_Selector(Selector value);
    [CompilerGeneratedAttribute]
public IDomDocument get_Document();
    [CompilerGeneratedAttribute]
protected void set_Document(IDomDocument value);
    public IList`1<IDomObject> Select(IEnumerable`1<IDomObject> context);
    protected IEnumerable`1<IDomObject> GetSelectionSource(SelectorClause clause, IEnumerable`1<IDomObject> context, IEnumerable`1<IDomObject> lastResult);
    protected IEnumerable`1<IDomObject> GetMatches(IEnumerable`1<IDomObject> source, SelectorClause selector);
    protected bool Matches(SelectorClause selector, IDomElement obj, int depth);
    protected IEnumerable`1<IDomObject> GetResultPositionMatches(IEnumerable`1<IDomObject> list, SelectorClause selector);
    protected IEnumerable`1<IDomObject> GetPseudoClassMatches(IDomElement elm, SelectorClause selector);
    protected bool MatchesPseudoClass(IDomElement element, SelectorClause selector);
    private DomIndexFeatures GetFeatures(IDomIndex index);
    private IEnumerable`1<IDomObject> EmptyEnumerable();
    protected IEnumerable`1<IDomObject> GetAdjacentOrSiblings(TraversalType traversalType, IEnumerable`1<IDomObject> list);
    protected IEnumerable`1<IDomObject> GetAllElements(IEnumerable`1<IDomObject> list);
    protected IEnumerable`1<IDomObject> GetAllChildOrDescendants(TraversalType traversalType, IEnumerable`1<IDomObject> list);
    protected IEnumerable`1<IDomObject> GetTraversalTargetElements(TraversalType traversalType, IEnumerable`1<IDomObject> list);
    protected IEnumerable`1<IDomElement> GetChildElements(IEnumerable`1<IDomObject> list);
    public static IEnumerable`1<IDomElement> GetDescendantElements(IEnumerable`1<IDomObject> list);
    public static IEnumerable`1<IDomElement> GetDescendantElements(IDomObject element);
    protected IEnumerable`1<IDomElement> GetAdjacentElements(IEnumerable`1<IDomObject> list);
    protected IEnumerable`1<IDomElement> GetSiblings(IEnumerable`1<IDomObject> list);
    [CompilerGeneratedAttribute]
private static UInt16[] <Select>b__0(IDomObject item);
    [CompilerGeneratedAttribute]
private static IDomElement <GetAdjacentElements>b__36(IDomObject item);
}
public class CsQuery.Engine.SelectorParser : object {
    private IStringScanner scanner;
    private Selector Selectors;
    private SelectorClause _Current;
    private TraversalType NextTraversalType;
    private CombinatorType NextCombinatorType;
    protected SelectorClause Current { get; }
    protected SelectorClause get_Current();
    public Selector Parse(string selector);
    private bool AddPseudoSelector(string key);
    private void AddTagSelector(string tagName, bool combineWithPrevious);
    private void AddInputSelector(string type, string tag, bool combineWithPrevious);
    protected IExpectPattern expectsOptionallyQuotedValue();
    protected void StartNewSelector(SelectorType selectorType);
    protected void StartNewSelector(CombinatorType combinatorType, TraversalType traversalType);
    protected void StartNewSelector(TraversalType traversalType);
    protected void StartNewSelector(SelectorType selectorType, CombinatorType combinatorType, TraversalType traversalType);
    protected void FinishSelector();
    protected void ClearCurrent();
    public bool IsHtml(string text);
}
[FlagsAttribute]
public enum CsQuery.Engine.SelectorType : Enum {
    public int value__;
    public static SelectorType All;
    public static SelectorType Tag;
    public static SelectorType ID;
    public static SelectorType Class;
    public static SelectorType AttributeValue;
    public static SelectorType PseudoClass;
    public static SelectorType Elements;
    public static SelectorType HTML;
    public static SelectorType None;
}
public enum CsQuery.Engine.TraversalType : Enum {
    public int value__;
    public static TraversalType All;
    public static TraversalType Filter;
    public static TraversalType Descendent;
    public static TraversalType Child;
    public static TraversalType Adjacent;
    public static TraversalType Sibling;
}
public enum CsQuery.EquationParser.AssociationType : Enum {
    public int value__;
    public static AssociationType Addition;
    public static AssociationType Multiplicaton;
    public static AssociationType Power;
    public static AssociationType Function;
}
public static class CsQuery.EquationParser.Equations : object {
    public static Equation`1<T> CreateEquation();
    public static Equation`1<T> CreateEquation(IOperand operand);
    public static Equation`1<T> CreateEquation(string text);
    public static Equation CreateEquation(string text);
    public static Equation CreateEquationOperand(string text);
    public static IOperand CreateOperand(IConvertible value);
    public static IOperand CreateOperand(T value);
    public static IVariable CreateVariable(string name);
    public static IVariable CreateVariable(string name);
    public static ILiteral CreateLiteral(IConvertible value);
    public static ILiteral CreateLiteral(IConvertible value);
    public static bool TryCreate(IConvertible value, IOperand& operand);
    public static bool TryCreateEquation(string text, Equation`1& equation);
}
public interface CsQuery.EquationParser.IClause {
    public abstract virtual IClause Clone();
}
public interface CsQuery.EquationParser.IEquation {
    public IOrderedDictionary`2<string, IConvertible> VariableValues { get; }
    public IOperand Operand { get; public set; }
    public abstract virtual IOrderedDictionary`2<string, IConvertible> get_VariableValues();
    public abstract virtual void SetVariable(string name, IConvertible value);
    public abstract virtual void SetVariable(string name, U value);
    public abstract virtual IConvertible GetValue(IConvertible[] values);
    public abstract virtual bool TryGetValue(IConvertible& result, IConvertible[] values);
    public abstract virtual bool TryGetValue(IConvertible& result);
    public abstract virtual IEquation Clone();
    public abstract virtual IOperand get_Operand();
    public abstract virtual void set_Operand(IOperand value);
    public abstract virtual void Compile();
}
public interface CsQuery.EquationParser.IEquation`1 {
    public abstract virtual T GetValue(IConvertible[] values);
    public abstract virtual bool TryGetValue(T& result);
    public abstract virtual bool TryGetValue(T& result, IConvertible[] values);
    public abstract virtual IEquation`1<T> Clone();
    public abstract virtual IEquation`1<U> CloneAs();
}
public interface CsQuery.EquationParser.IEquationParser {
    public string Error { get; }
    public abstract virtual bool TryParse(string text, IOperand& operand);
    public abstract virtual IOperand Parse(string text);
    public abstract virtual IOperand Parse(string text);
    public abstract virtual string get_Error();
}
public interface CsQuery.EquationParser.IEquationParser`1 {
    public abstract virtual bool TryParse(string text, IOperand`1& operand);
    public abstract virtual IOperand`1<T> Parse(string text);
}
public interface CsQuery.EquationParser.IFunction {
    public string Name { get; }
    public AssociationType AssociationType { get; }
    public int RequiredParmCount { get; }
    public int MaxParmCount { get; }
    public IList`1<IOperand> Operands { get; }
    public abstract virtual string get_Name();
    public abstract virtual AssociationType get_AssociationType();
    public abstract virtual int get_RequiredParmCount();
    public abstract virtual int get_MaxParmCount();
    public abstract virtual IList`1<IOperand> get_Operands();
    public abstract virtual void AddOperand(IConvertible operand);
    public abstract virtual void Compile();
}
public interface CsQuery.EquationParser.IFunction`1 {
}
public interface CsQuery.EquationParser.ILiteral {
    public abstract virtual void Set(IConvertible value);
    public abstract virtual ILiteral Clone();
}
public interface CsQuery.EquationParser.ILiteral`1 {
    public abstract virtual void Set(T value);
    public abstract virtual ILiteral`1<T> Clone();
}
public class CsQuery.EquationParser.Implementation.Equation : Operand {
    private IOperand _Operand;
    private OrderedDictionary`2<string, IConvertible> _VariableValues;
    public IOrderedDictionary`2<string, IConvertible> VariableValues { get; }
    public IOperand Operand { get; public set; }
    public IEnumerable`1<IVariable> Variables { get; }
    private IEnumerable`1<IVariable> CsQuery.EquationParser.IVariableContainer.Variables { get; }
    public Equation(IOperand operand);
    protected virtual void Initialize();
    public sealed virtual IOrderedDictionary`2<string, IConvertible> get_VariableValues();
    public sealed virtual IOperand get_Operand();
    public sealed virtual void set_Operand(IOperand value);
    public IEnumerable`1<IVariable> get_Variables();
    public sealed virtual IEquation Clone();
    public sealed virtual void Compile();
    public sealed virtual bool TryGetValue(IConvertible& result);
    public virtual bool TryGetValue(IConvertible& result, IConvertible[] values);
    public virtual void SetVariable(string name, IConvertible value);
    public virtual void SetVariable(int index, IConvertible value);
    public virtual void SetVariable(string name, U value);
    protected virtual IConvertible GetValue();
    public sealed virtual IConvertible GetValue(IConvertible[] values);
    public virtual string ToString();
    protected virtual IOperand GetNewInstance();
    protected virtual IOperand CopyTo(IOperand operand);
    protected void Variable_OnGetValue(object sender, VariableReadEventArgs e);
    protected void AddVariable(IVariable variable);
    private sealed virtual override IEnumerable`1<IVariable> CsQuery.EquationParser.IVariableContainer.get_Variables();
}
public class CsQuery.EquationParser.Implementation.Equation`1 : Equation {
    public T Value { get; }
    public Equation`1(IConvertible operand);
    public sealed virtual IEquation`1<T> Clone();
    public sealed virtual IEquation`1<U> CloneAs();
    public sealed virtual T GetValue(IConvertible[] values);
    public sealed virtual bool TryGetValue(T& result);
    public virtual bool TryGetValue(T& result, IConvertible[] values);
    public sealed virtual T get_Value();
    public virtual string ToString();
    protected IOperand`1<U> CloneAsImpl();
    protected virtual IOperand GetNewInstance();
    protected virtual IOperand CopyTo(IOperand operand);
    private sealed virtual override IConvertible CsQuery.EquationParser.IEquation.GetValue(IConvertible[] values);
    private sealed virtual override bool CsQuery.EquationParser.IEquation.TryGetValue(IConvertible& value);
    private sealed virtual override bool CsQuery.EquationParser.IEquation.TryGetValue(IConvertible& value, IConvertible[] variableValues);
    private sealed virtual override IOperand`1<T> CsQuery.EquationParser.IOperand<T>.Clone();
    private sealed virtual override IEquation CsQuery.EquationParser.IEquation.Clone();
}
public class CsQuery.EquationParser.Implementation.EquationParserEngine : object {
    protected HashSet`1<IVariable> _UniqueVariables;
    protected int CurPos;
    protected bool ParseEnd;
    protected IStringScanner scanner;
    protected IOperation Clause;
    [CompilerGeneratedAttribute]
private bool <IsTyped>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Error>k__BackingField;
    protected bool IsTyped { get; protected set; }
    protected HashSet`1<IVariable> UniqueVariables { get; }
    public string Error { get; public set; }
    [CompilerGeneratedAttribute]
protected bool get_IsTyped();
    [CompilerGeneratedAttribute]
protected void set_IsTyped(bool value);
    protected HashSet`1<IVariable> get_UniqueVariables();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Error();
    [CompilerGeneratedAttribute]
public void set_Error(string value);
    public sealed virtual bool TryParse(string text, IOperand& operand);
    public sealed virtual IOperand Parse(string text);
    public sealed virtual IOperand Parse(string text);
    protected IOperand GetOperand();
    protected IOperator GetOperation();
    protected IVariable GetVariable(string name);
    protected void CacheVariables(IOperand oper);
}
public abstract class CsQuery.EquationParser.Implementation.Function : Operand {
    protected List`1<IOperand> _Operands;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public IList`1<IOperand> Operands { get; }
    public string Name { get; protected set; }
    public IEnumerable`1<IVariable> Variables { get; }
    public int RequiredParmCount { get; }
    public int MaxParmCount { get; }
    public AssociationType AssociationType { get; }
    protected IOperand FirstOperand { get; }
    protected IOperand SecondOperand { get; }
    public Function(string name);
    public sealed virtual IList`1<IOperand> get_Operands();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
protected void set_Name(string value);
    public sealed virtual IEnumerable`1<IVariable> get_Variables();
    public abstract virtual int get_RequiredParmCount();
    public abstract virtual int get_MaxParmCount();
    public abstract virtual AssociationType get_AssociationType();
    public IFunction Clone();
    public sealed virtual void Compile();
    protected virtual IOperand CopyTo(IOperand operand);
    public virtual void AddOperand(IConvertible operand);
    public virtual string ToString();
    protected IOperand get_FirstOperand();
    protected IOperand get_SecondOperand();
}
public abstract class CsQuery.EquationParser.Implementation.Function`1 : Function {
    public T Value { get; }
    public Function`1(string name);
    public sealed virtual T get_Value();
    public IFunction`1<T> Clone();
    private sealed virtual override IOperand`1<T> CsQuery.EquationParser.IOperand<T>.Clone();
}
public class CsQuery.EquationParser.Implementation.Functions.Abs : Function {
    public int RequiredParmCount { get; }
    public int MaxParmCount { get; }
    public AssociationType AssociationType { get; }
    protected virtual IConvertible GetValue();
    public virtual int get_RequiredParmCount();
    public virtual int get_MaxParmCount();
    public virtual AssociationType get_AssociationType();
    protected virtual IOperand GetNewInstance();
}
public class CsQuery.EquationParser.Implementation.Functions.Difference : Sum {
    protected OperationType PrimaryOperator { get; }
    protected OperationType ComplementaryOperator { get; }
    public Difference(IOperand operand1, IOperand operand2);
    protected virtual OperationType get_PrimaryOperator();
    protected virtual OperationType get_ComplementaryOperator();
}
public class CsQuery.EquationParser.Implementation.Functions.Difference`1 : Difference {
    public T Value { get; }
    public Difference`1(IOperand operand1, IOperand operand2);
    public sealed virtual T get_Value();
    public Difference`1<T> Clone();
    private sealed virtual override IOperand`1<T> CsQuery.EquationParser.IOperand<T>.Clone();
}
public abstract class CsQuery.EquationParser.Implementation.Functions.NativeOperation : Function {
    protected List`1<OperationType> _Operators;
    protected OperationType ComplementaryOperator { get; }
    protected OperationType PrimaryOperator { get; }
    public bool IsInteger { get; }
    public IList`1<OperationType> Operators { get; }
    public int RequiredParmCount { get; }
    public int MaxParmCount { get; }
    public NativeOperation(string name);
    public NativeOperation(string name, IConvertible[] operands);
    protected abstract virtual OperationType get_ComplementaryOperator();
    protected abstract virtual OperationType get_PrimaryOperator();
    public virtual bool get_IsInteger();
    public sealed virtual IList`1<OperationType> get_Operators();
    protected virtual IOperand CopyTo(IOperand operand);
    public virtual void AddOperand(IConvertible operand);
    public virtual void AddOperand(IConvertible operand, bool invert);
    public sealed virtual void ReplaceLastOperand(IOperand operand);
    public virtual int get_RequiredParmCount();
    public virtual int get_MaxParmCount();
    public virtual string ToString();
    protected virtual IConvertible GetValue();
    protected double GetValueDouble();
    protected long GetValueLong();
    protected string WrapParenthesis(IOperand operand);
    private string OperationTypeName(OperationType operationType);
}
public abstract class CsQuery.EquationParser.Implementation.Functions.NativeOperation`1 : NativeOperation {
    protected bool _IsInteger;
    public bool IsInteger { get; }
    private T CsQuery.EquationParser.IOperand<T>.Value { get; }
    public NativeOperation`1(string name);
    public NativeOperation`1(string name, IConvertible[] operands);
    protected void Initialize();
    protected virtual IConvertible GetValue();
    public virtual bool get_IsInteger();
    private sealed virtual override IOperand`1<T> CsQuery.EquationParser.IOperand<T>.Clone();
    private sealed virtual override T CsQuery.EquationParser.IOperand<T>.get_Value();
}
public class CsQuery.EquationParser.Implementation.Functions.Power : NativeOperation {
    public int RequiredParmCount { get; }
    public int MaxParmCount { get; }
    public AssociationType AssociationType { get; }
    protected OperationType ComplementaryOperator { get; }
    protected OperationType PrimaryOperator { get; }
    public Power(IOperand operand1, IOperand operand2);
    public virtual int get_RequiredParmCount();
    public virtual int get_MaxParmCount();
    public virtual AssociationType get_AssociationType();
    protected virtual IOperand GetNewInstance();
    protected virtual OperationType get_ComplementaryOperator();
    protected virtual OperationType get_PrimaryOperator();
}
public class CsQuery.EquationParser.Implementation.Functions.Product : NativeOperation {
    public AssociationType AssociationType { get; }
    protected OperationType PrimaryOperator { get; }
    protected OperationType ComplementaryOperator { get; }
    public Product(IConvertible[] operands);
    public virtual AssociationType get_AssociationType();
    protected virtual IOperand GetNewInstance();
    protected virtual OperationType get_PrimaryOperator();
    protected virtual OperationType get_ComplementaryOperator();
}
public class CsQuery.EquationParser.Implementation.Functions.Product`1 : Product {
    public T Value { get; }
    public Product`1(IConvertible[] operands);
    public sealed virtual T get_Value();
    protected virtual IOperand GetNewInstance();
    public Product`1<T> Clone();
    private sealed virtual override IOperand`1<T> CsQuery.EquationParser.IOperand<T>.Clone();
}
public class CsQuery.EquationParser.Implementation.Functions.Quotient : NativeOperation {
    public AssociationType AssociationType { get; }
    protected OperationType PrimaryOperator { get; }
    protected OperationType ComplementaryOperator { get; }
    public Quotient(IConvertible[] operands);
    public virtual AssociationType get_AssociationType();
    protected virtual IOperand GetNewInstance();
    protected virtual OperationType get_PrimaryOperator();
    protected virtual OperationType get_ComplementaryOperator();
}
public class CsQuery.EquationParser.Implementation.Functions.Quotient`1 : Quotient {
    public T Value { get; }
    public Quotient`1(IConvertible[] operands);
    public sealed virtual T get_Value();
    protected virtual IOperand GetNewInstance();
    public Quotient`1<T> Clone();
    private sealed virtual override IOperand`1<T> CsQuery.EquationParser.IOperand<T>.Clone();
}
public class CsQuery.EquationParser.Implementation.Functions.Sum : NativeOperation {
    public AssociationType AssociationType { get; }
    protected OperationType PrimaryOperator { get; }
    protected OperationType ComplementaryOperator { get; }
    public Sum(IConvertible[] operands);
    public virtual AssociationType get_AssociationType();
    protected virtual IOperand GetNewInstance();
    protected virtual OperationType get_PrimaryOperator();
    protected virtual OperationType get_ComplementaryOperator();
}
public class CsQuery.EquationParser.Implementation.Functions.Sum`1 : Sum {
    public T Value { get; }
    public Sum`1(IConvertible[] operands);
    public sealed virtual T get_Value();
    protected virtual IOperand GetNewInstance();
    public Sum`1<T> Clone();
    private sealed virtual override IOperand`1<T> CsQuery.EquationParser.IOperand<T>.Clone();
}
internal interface CsQuery.EquationParser.Implementation.IBooleanValue {
}
internal interface CsQuery.EquationParser.Implementation.IIntegerValue {
}
public class CsQuery.EquationParser.Implementation.IntegerValue : object {
    public sealed virtual int CompareTo(object obj);
    public sealed virtual TypeCode GetTypeCode();
    public sealed virtual bool ToBoolean(IFormatProvider provider);
    public sealed virtual byte ToByte(IFormatProvider provider);
    public sealed virtual char ToChar(IFormatProvider provider);
    public sealed virtual DateTime ToDateTime(IFormatProvider provider);
    public sealed virtual decimal ToDecimal(IFormatProvider provider);
    public sealed virtual double ToDouble(IFormatProvider provider);
    public sealed virtual short ToInt16(IFormatProvider provider);
    public sealed virtual int ToInt32(IFormatProvider provider);
    public sealed virtual long ToInt64(IFormatProvider provider);
    public sealed virtual sbyte ToSByte(IFormatProvider provider);
    public sealed virtual float ToSingle(IFormatProvider provider);
    public sealed virtual string ToString(IFormatProvider provider);
    public sealed virtual object ToType(Type conversionType, IFormatProvider provider);
    public sealed virtual ushort ToUInt16(IFormatProvider provider);
    public sealed virtual UInt32 ToUInt32(IFormatProvider provider);
    public sealed virtual ulong ToUInt64(IFormatProvider provider);
    public sealed virtual bool Equals(byte other);
    public sealed virtual bool Equals(short other);
    public sealed virtual bool Equals(ushort other);
    public sealed virtual bool Equals(int other);
    public sealed virtual bool Equals(UInt32 other);
    public sealed virtual bool Equals(long other);
    public sealed virtual bool Equals(ulong other);
    public sealed virtual bool Equals(double other);
    public sealed virtual bool Equals(float other);
    public sealed virtual int CompareTo(byte other);
    public sealed virtual int CompareTo(short other);
    public sealed virtual int CompareTo(ushort other);
    public sealed virtual int CompareTo(int other);
    public sealed virtual int CompareTo(UInt32 other);
    public sealed virtual int CompareTo(long other);
    public sealed virtual int CompareTo(ulong other);
}
internal interface CsQuery.EquationParser.Implementation.INumericValue {
}
internal interface CsQuery.EquationParser.Implementation.ITextValue {
}
public class CsQuery.EquationParser.Implementation.Literal : Operand {
    protected IConvertible _Value;
    public Literal(IConvertible value);
    public sealed virtual ILiteral Clone();
    protected virtual IOperand GetNewInstance();
    protected virtual IOperand CopyTo(IOperand operand);
    protected virtual IConvertible GetValue();
    public virtual string ToString();
    public virtual void Set(IConvertible value);
}
public class CsQuery.EquationParser.Implementation.Literal`1 : Literal {
    public T Value { get; }
    public Literal`1(IConvertible value);
    public static Literal`1<T> op_Implicit(int value);
    public static Literal`1<T> op_Implicit(double value);
    public static Literal`1<T> op_Implicit(string value);
    public sealed virtual T get_Value();
    public sealed virtual ILiteral`1<T> Clone();
    public sealed virtual void Set(T value);
    protected virtual IOperand GetNewInstance();
    private void SetConvert(IConvertible value);
    private sealed virtual override IOperand`1<T> CsQuery.EquationParser.IOperand<T>.Clone();
    private sealed virtual override void CsQuery.EquationParser.ILiteral.Set(IConvertible value);
}
public abstract class CsQuery.EquationParser.Implementation.Operand : object {
    protected int intValue;
    protected double doubleValue;
    protected Nullable`1<bool> _IsNumber;
    protected Nullable`1<bool> _IsInt;
    protected Nullable`1<bool> _IsText;
    protected Nullable`1<bool> _IsBoolean;
    public IConvertible Value { get; }
    public bool IsInteger { get; }
    public bool IsFloatingPoint { get; }
    public bool IsNumber { get; }
    public bool IsText { get; }
    public bool IsBoolean { get; }
    public sealed virtual IOperand Clone();
    protected abstract virtual IOperand GetNewInstance();
    protected abstract virtual IOperand CopyTo(IOperand operand);
    protected virtual bool IsValidType(Type type);
    protected virtual bool AllowNullValues(Type type);
    private sealed virtual override object System.ICloneable.Clone();
    public sealed virtual IConvertible get_Value();
    protected abstract virtual IConvertible GetValue();
    public virtual bool get_IsInteger();
    public bool get_IsFloatingPoint();
    public bool get_IsNumber();
    public bool get_IsText();
    public bool get_IsBoolean();
    public virtual TypeCode GetTypeCode();
    public virtual bool ToBoolean(IFormatProvider provider);
    public virtual byte ToByte(IFormatProvider provider);
    public virtual char ToChar(IFormatProvider provider);
    public virtual DateTime ToDateTime(IFormatProvider provider);
    public virtual decimal ToDecimal(IFormatProvider provider);
    public virtual double ToDouble(IFormatProvider provider);
    public virtual short ToInt16(IFormatProvider provider);
    public virtual int ToInt32(IFormatProvider provider);
    public virtual long ToInt64(IFormatProvider provider);
    public virtual sbyte ToSByte(IFormatProvider provider);
    public virtual float ToSingle(IFormatProvider provider);
    public virtual string ToString(IFormatProvider provider);
    public virtual object ToType(Type conversionType, IFormatProvider provider);
    public virtual ushort ToUInt16(IFormatProvider provider);
    public virtual UInt32 ToUInt32(IFormatProvider provider);
    public virtual ulong ToUInt64(IFormatProvider provider);
    protected U ConversionException();
}
public abstract class CsQuery.EquationParser.Implementation.Operand`1 : Operand {
    public T Value { get; }
    private IConvertible CsQuery.EquationParser.IOperand.Value { get; }
    public sealed virtual T get_Value();
    public sealed virtual IOperand`1<T> Clone();
    public virtual string ToString();
    private sealed virtual override IConvertible CsQuery.EquationParser.IOperand.get_Value();
}
public class CsQuery.EquationParser.Implementation.Operator : object {
    protected static List`1<string> _Operators;
    protected static HashSet`1<string> ValidOperators;
    protected OperationType _OperationType;
    public static IEnumerable`1<string> Operators { get; }
    public bool IsInverted { get; }
    public AssociationType AssociationType { get; }
    public OperationType OperationType { get; }
    public Operator(string op);
    public Operator(OperationType op);
    private static Operator();
    public static Operator op_Implicit(string op);
    public static IEnumerable`1<string> get_Operators();
    public sealed virtual bool get_IsInverted();
    public sealed virtual AssociationType get_AssociationType();
    public sealed virtual OperationType get_OperationType();
    public sealed virtual IOperation GetFunction();
    public sealed virtual void Set(string op);
    public sealed virtual bool TrySet(string value);
    public sealed virtual IOperator Clone();
    public virtual string ToString();
    private sealed virtual override object System.ICloneable.Clone();
}
public static class CsQuery.EquationParser.Implementation.Utils : object {
    public static bool IsIntegralType();
    public static bool IsIntegralType(IConvertible value);
    public static bool IsIntegralType(Type type);
    public static bool IsIntegralValue(IConvertible value);
    public static bool IsNumericType();
    public static bool IsNumericType(object obj);
    public static bool IsNumericType(Type type);
    public static bool IsNumericConvertible(Type type);
    public static bool IsText(object value);
    public static IFunction GetFunction(string functionName);
    public static IOperand EnsureOperand(IConvertible value);
    public static Type GetUnderlyingType(Type type);
    public static bool IsNullableType(Type type);
    public static IEnumerable`1<T> EmptyEnumerable();
}
public class CsQuery.EquationParser.Implementation.Variable : Operand {
    protected IConvertible _Value;
    private EventHandler`1<VariableReadEventArgs> OnGetValue;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; public set; }
    public Type Type { get; }
    public IConvertible Value { get; public set; }
    public IEnumerable`1<IVariable> Variables { get; }
    private IConvertible CsQuery.EquationParser.IOperand.Value { get; }
    public Variable(string name);
    public sealed virtual void add_OnGetValue(EventHandler`1<VariableReadEventArgs> value);
    public sealed virtual void remove_OnGetValue(EventHandler`1<VariableReadEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    public sealed virtual Type get_Type();
    public IConvertible get_Value();
    public void set_Value(IConvertible value);
    protected virtual IConvertible GetValue();
    public IVariable Clone();
    protected virtual IOperand GetNewInstance();
    protected virtual IOperand CopyTo(IOperand operand);
    public virtual string ToString();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public sealed virtual IEnumerable`1<IVariable> get_Variables();
    private sealed virtual override IConvertible CsQuery.EquationParser.IOperand.get_Value();
    private sealed virtual override IVariable CsQuery.EquationParser.IVariable.Clone();
}
public class CsQuery.EquationParser.Implementation.Variable`1 : Variable {
    public T Value { get; public set; }
    public Variable`1(string name);
    public sealed virtual IVariable`1<T> Clone();
    public IVariable`1<U> CloneAs();
    public sealed virtual T get_Value();
    public sealed virtual void set_Value(T value);
    private sealed virtual override IOperand`1<T> CsQuery.EquationParser.IOperand<T>.Clone();
}
public class CsQuery.EquationParser.Implementation.VariableReadEventArgs : EventArgs {
    protected IConvertible _Value;
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public IConvertible Value { get; public set; }
    public Type Type { get; public set; }
    public string Name { get; protected set; }
    public VariableReadEventArgs(string name);
    public IConvertible get_Value();
    public void set_Value(IConvertible value);
    [CompilerGeneratedAttribute]
public Type get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(Type value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
protected void set_Name(string value);
}
public interface CsQuery.EquationParser.INativeOperation {
}
public interface CsQuery.EquationParser.IOperand {
    public IConvertible Value { get; }
    public bool IsInteger { get; }
    public abstract virtual IConvertible get_Value();
    public abstract virtual bool get_IsInteger();
    public abstract virtual IOperand Clone();
}
public interface CsQuery.EquationParser.IOperand`1 {
    public T Value { get; }
    public abstract virtual T get_Value();
    public abstract virtual IOperand`1<T> Clone();
}
public interface CsQuery.EquationParser.IOperation {
    public IList`1<OperationType> Operators { get; }
    public abstract virtual IList`1<OperationType> get_Operators();
    public abstract virtual void AddOperand(IConvertible operand, bool invert);
    public abstract virtual void ReplaceLastOperand(IOperand operand);
}
public interface CsQuery.EquationParser.IOperator {
    public OperationType OperationType { get; }
    public AssociationType AssociationType { get; }
    public bool IsInverted { get; }
    public abstract virtual void Set(string value);
    public abstract virtual bool TrySet(string value);
    public abstract virtual OperationType get_OperationType();
    public abstract virtual AssociationType get_AssociationType();
    public abstract virtual bool get_IsInverted();
    public abstract virtual IOperator Clone();
    public abstract virtual IOperation GetFunction();
}
public interface CsQuery.EquationParser.IOrderedDictionary`2 {
    public abstract virtual int IndexOf(TKey key);
}
public interface CsQuery.EquationParser.IVariable {
    public string Name { get; }
    public abstract virtual string get_Name();
    public abstract virtual void add_OnGetValue(EventHandler`1<VariableReadEventArgs> value);
    public abstract virtual void remove_OnGetValue(EventHandler`1<VariableReadEventArgs> value);
    public abstract virtual IVariable Clone();
}
public interface CsQuery.EquationParser.IVariable`1 {
    public Type Type { get; }
    public T Value { get; public set; }
    public abstract virtual Type get_Type();
    public abstract virtual IVariable`1<T> Clone();
    public abstract virtual T get_Value();
    public abstract virtual void set_Value(T value);
}
public interface CsQuery.EquationParser.IVariableContainer {
    public IEnumerable`1<IVariable> Variables { get; }
    public abstract virtual IEnumerable`1<IVariable> get_Variables();
}
public enum CsQuery.EquationParser.OperationType : Enum {
    public int value__;
    public static OperationType Addition;
    public static OperationType Subtraction;
    public static OperationType Multiplication;
    public static OperationType Division;
    public static OperationType Modulus;
    public static OperationType Power;
}
public class CsQuery.EquationParser.OrderedDictionary`2 : OrderedDictionary`3<Dictionary`2<TKey, TValue>, TKey, TValue> {
}
[DefaultMemberAttribute("Item")]
public class CsQuery.EquationParser.OrderedDictionary`3 : object {
    private IDictionary`2<TKey, TValue> _InnerDictionary;
    private List`1<KeyValuePair`2<TKey, TValue>> InnerList;
    private int AutoKeys;
    [CompilerGeneratedAttribute]
private static Func`2<KeyValuePair`2<TKey, TValue>, TKey> CS$<>9__CachedAnonymousMethodDelegate1;
    protected IDictionary`2<TKey, TValue> InnerDictionary { get; }
    public IList`1<TKey> Keys { get; }
    public IList`1<TValue> Values { get; }
    public int Count { get; }
    public TValue Item { get; public set; }
    public bool IsReadOnly { get; }
    public TValue Item { get; public set; }
    private ICollection`1<TKey> System.Collections.Generic.IDictionary<TKey,TValue>.Keys { get; }
    private ICollection`1<TValue> System.Collections.Generic.IDictionary<TKey,TValue>.Values { get; }
    private KeyValuePair`2<TKey, TValue> System.Collections.Generic.IList<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Item { get; private set; }
    protected IDictionary`2<TKey, TValue> get_InnerDictionary();
    public IList`1<TKey> get_Keys();
    public IList`1<TValue> get_Values();
    public sealed virtual int get_Count();
    public TValue get_Item(int index);
    public void set_Item(int index, TValue value);
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual void Add(TKey key, TValue value);
    public sealed virtual bool ContainsKey(TKey key);
    public sealed virtual bool Remove(TKey key);
    public sealed virtual bool TryGetValue(TKey key, TValue& value);
    public sealed virtual TValue get_Item(TKey key);
    public sealed virtual void set_Item(TKey key, TValue value);
    public sealed virtual void Add(KeyValuePair`2<TKey, TValue> item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(KeyValuePair`2<TKey, TValue> item);
    public sealed virtual void CopyTo(KeyValuePair`2[] array, int arrayIndex);
    public sealed virtual bool Remove(KeyValuePair`2<TKey, TValue> item);
    public IEnumerator`1<KeyValuePair`2<TKey, TValue>> GetEnumerator();
    public sealed virtual int IndexOf(TKey key);
    public sealed virtual int IndexOf(KeyValuePair`2<TKey, TValue> item);
    protected TKey GetKey(TValue item);
    public void Insert(int index, TValue item);
    public sealed virtual void Insert(int index, KeyValuePair`2<TKey, TValue> item);
    public sealed virtual void RemoveAt(int index);
    public void Add(TValue value);
    public bool Contains(TValue item);
    public void CopyTo(TValue[] array, int arrayIndex);
    public bool Remove(TValue item);
    public virtual string ToString();
    protected IEnumerable`1<TValue> GetValuesOrdered();
    private sealed virtual override IEnumerator`1<KeyValuePair`2<TKey, TValue>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>.GetEnumerator();
    private sealed virtual override ICollection`1<TKey> System.Collections.Generic.IDictionary<TKey,TValue>.get_Keys();
    private sealed virtual override ICollection`1<TValue> System.Collections.Generic.IDictionary<TKey,TValue>.get_Values();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override KeyValuePair`2<TKey, TValue> System.Collections.Generic.IList<System.Collections.Generic.KeyValuePair<TKey,TValue>>.get_Item(int index);
    private sealed virtual override void System.Collections.Generic.IList<System.Collections.Generic.KeyValuePair<TKey,TValue>>.set_Item(int index, KeyValuePair`2<TKey, TValue> value);
    [CompilerGeneratedAttribute]
private static TKey <get_Keys>b__0(KeyValuePair`2<TKey, TValue> item);
}
[ExtensionAttribute]
public static class CsQuery.ExtensionMethods.ExtensionMethods : object {
    [ExtensionAttribute]
public static string RegexReplace(string input, string pattern, string replacement);
    [ExtensionAttribute]
public static string RegexReplace(string input, IEnumerable`1<string> patterns, IEnumerable`1<string> replacements);
    [ExtensionAttribute]
public static string RegexReplace(string input, string pattern, MatchEvaluator evaluator);
    [ExtensionAttribute]
public static bool RegexTest(string input, string pattern);
    [ExtensionAttribute]
public static IEnumerable`1<T> Concat(IEnumerable`1<T> list, T element);
    [ExtensionAttribute]
public static int IndexOf(IEnumerable`1<T> list, Func`2<T, bool> predicate);
    [ExtensionAttribute]
public static int IndexOf(IEnumerable`1<T> list, Func`2<T, bool> predicate, T& item);
    [ExtensionAttribute]
public static int LastIndexOf(IEnumerable`1<T> list, Func`2<T, bool> predicate, T& item);
    [ExtensionAttribute]
public static int IndexOf(IEnumerable`1<T> list, T target);
    [ExtensionAttribute]
public static void ForEach(IEnumerable`1<T> list, Action`1<T> action);
    [ExtensionAttribute]
public static void ForEach(IEnumerable`1<T> list, Action`2<T, int> action);
    [ExtensionAttribute]
public static string ToJSON(object objectToSerialize);
    [ExtensionAttribute]
public static T ParseJSON(string objectToDeserialize);
    [ExtensionAttribute]
public static object ParseJSON(string json);
    [ExtensionAttribute]
public static bool HasProperty(DynamicObject obj, string propertyName);
    [ExtensionAttribute]
public static T Get(DynamicObject obj, string name);
    [ExtensionAttribute]
public static IEnumerable`1<IDomObject> Clone(IEnumerable`1<IDomObject> source);
    [ExtensionAttribute]
public static Array Slice(Array array, int start, int end);
    [ExtensionAttribute]
public static Array Slice(Array array, int start);
}
[ExtensionAttribute]
public static class CsQuery.ExtensionMethods.Forms.ExtensionMethods : object {
    [CompilerGeneratedAttribute]
private static Func`2<IDomElement, bool> CS$<>9__CachedAnonymousMethodDelegate1;
    [ExtensionAttribute]
public static string FormValue(CQ obj, string name);
    [ExtensionAttribute]
public static T FormValue(CQ context, string name);
    [ExtensionAttribute]
public static CQ FormElement(CQ context, string name);
    [ExtensionAttribute]
public static CQ RestorePost(CQ context);
    [ExtensionAttribute]
public static CQ RestorePost(CQ selection, NameValueCollection postData);
    [ExtensionAttribute]
public static CQ RestorePost(CQ selection, HttpContext httpContext);
    private static void RestoreData(IDomElement element, CQ csQueryContext, string value);
    [ExtensionAttribute]
public static CQ CreateDropDown(CQ selection, IEnumerable`1<KeyValuePair`2<string, object>> data, string zeroText);
    [ExtensionAttribute]
public static CQ CreateDropDownFromEnum(CQ selection, string zeroText, bool format);
    [ExtensionAttribute]
public static CQ ToggleDisabled(CQ selection, bool addRemoveSwitch);
    private static IEnumerable`1<KeyValuePair`2<string, object>> EnumKeyValuePairs(Type enumType, string zeroText, bool format);
    private static void CreateDropDown(IDomElement el, IEnumerable`1<KeyValuePair`2<string, object>> data, string zeroText);
    private static string FormatEnumText(string enumText);
    [CompilerGeneratedAttribute]
private static bool <CreateDropDown>b__0(IDomElement item);
}
[ExtensionAttribute]
public static class CsQuery.ExtensionMethods.Internal.ExtensionMethods : object {
    [ExtensionAttribute]
public static bool IsOneOf(Enum theEnum, Enum[] values);
    [ExtensionAttribute]
public static bool IsOneOf(string match, String[] values);
    [ExtensionAttribute]
public static bool IsOneOf(string match, bool matchCase, String[] values);
    [ExtensionAttribute]
public static int GetValue(Enum value);
    [ExtensionAttribute]
public static string GetValueAsString(Enum value);
    [ExtensionAttribute]
public static void AddRange(ICollection`1<T> target, IEnumerable`1<T> elements);
    [ExtensionAttribute]
public static bool IsNullOrEmpty(IEnumerable`1<T> baseList);
    [ExtensionAttribute]
public static bool TryGetFirst(IEnumerable`1<T> baseList, T& firstElement);
    [ExtensionAttribute]
public static T SingleOrDefaultAlways(IEnumerable`1<T> list);
    [ExtensionAttribute]
public static Stream ToStream(string input, Encoding encoding);
    [ExtensionAttribute]
public static string AsString(Char[] text);
    [ExtensionAttribute]
public static int OccurrencesOf(string text, char find);
    [ExtensionAttribute]
public static string ListAdd(string list, string value, string separator);
    [ExtensionAttribute]
public static string ListRemove(string list, string value, string separator);
    [ExtensionAttribute]
public static string SubstringBetween(string text, int startIndex, int endIndex);
    [ExtensionAttribute]
public static string RemoveWhitespace(string text);
    [ExtensionAttribute]
public static string BeforeLast(string text, string find);
    [ExtensionAttribute]
public static string After(string text, string find);
    [ExtensionAttribute]
public static string AfterLast(string text, string find);
    [ExtensionAttribute]
public static string Before(string text, string find);
    [ExtensionAttribute]
public static string CleanUp(string value);
    [ExtensionAttribute]
public static IEnumerable`1<string> SplitClean(string text);
    [ExtensionAttribute]
public static IEnumerable`1<string> SplitClean(string text, char separator);
    [ExtensionAttribute]
public static IEnumerable`1<string> SplitClean(string text, Char[] separator);
    [ExtensionAttribute]
public static StringBuilder Reverse(StringBuilder text);
    [ExtensionAttribute]
public static string Reverse(string text);
    [ExtensionAttribute]
public static string Substring(Char[] text, int startIndex, int length);
    [ExtensionAttribute]
public static string Substring(Char[] text, int startIndex);
    [ExtensionAttribute]
public static int Seek(Char[] text, string seek);
    [ExtensionAttribute]
public static int Seek(Char[] text, string seek, int startIndex);
    [ExtensionAttribute]
public static char ToLower(char character);
    [ExtensionAttribute]
public static char ToUpper(char character);
    [ExtensionAttribute]
public static Byte[] Concatenate(Byte[] source1, Byte[] source2);
    [ExtensionAttribute]
public static Byte[] ToByteArray(UInt16[] source);
    [ExtensionAttribute]
public static Byte[] ToByteArray(ushort source);
    [ExtensionAttribute]
public static byte HighByte(ushort source);
    [ExtensionAttribute]
public static byte HighByte(int source);
    [ExtensionAttribute]
public static byte LowByte(ushort source);
    [ExtensionAttribute]
public static byte LowByte(int source);
    [ExtensionAttribute]
public static int IndexOf(T[] arr, T item, int count);
    [ExtensionAttribute]
public static StringComparer ComparerFor(StringComparison comparison);
    [ExtensionAttribute]
public static IEnumerable CloneList(IEnumerable obj);
    [ExtensionAttribute]
public static IEnumerable CloneList(IEnumerable obj, bool deep);
}
public class CsQuery.ExtensionMethods.Xml.CqXmlDocument : XmlDocument {
    public CqXmlDocument(IDomDocument document);
}
public class CsQuery.ExtensionMethods.Xml.CqXmlNode : XmlElement {
    private IDomObject Element;
    private XmlDocument XmlDocument;
    private XmlNodeList InnerChildNodes;
    private bool IsAttributesCreated;
    private bool IsChildListCreated;
    public string LocalName { get; }
    public string Name { get; }
    public XmlNodeType NodeType { get; }
    public XmlAttributeCollection Attributes { get; }
    public XmlNodeList ChildNodes { get; }
    public CqXmlNode(XmlDocument xmlDocument, IDomObject element);
    public virtual XmlNode CloneNode(bool deep);
    public virtual string get_LocalName();
    public virtual string get_Name();
    public virtual XmlNodeType get_NodeType();
    public virtual XmlAttributeCollection get_Attributes();
    public virtual XmlNodeList get_ChildNodes();
    protected XmlNodeType NodeTypeMap(NodeType type);
    private static string GetNodeName(IDomObject element);
    private static string CleanXmlNodeName(string name);
}
public class CsQuery.ExtensionMethods.Xml.CqXmlNodeList : XmlNodeList {
    private INodeList NodeList;
    private XmlDocument XmlDocument;
    public int Count { get; }
    public CqXmlNodeList(XmlDocument xmlDocument, INodeList nodeList);
    public virtual int get_Count();
    public virtual IEnumerator GetEnumerator();
    private IEnumerable`1<XmlNode> Nodes();
    public virtual XmlNode Item(int index);
}
[ExtensionAttribute]
public static class CsQuery.ExtensionMethods.Xml.ExtensionMethods : object {
    [ExtensionAttribute]
public static XmlNode ToXml(IDomObject element);
    [ExtensionAttribute]
internal static XmlNode ToXml(IDomObject element, XmlDocument xmlDoc);
}
public static class CsQuery.HtmlEncoders : object {
    public static IHtmlEncoder Basic;
    public static IHtmlEncoder Minimum;
    public static IHtmlEncoder MinimumNbsp;
    public static IHtmlEncoder None;
    public static IHtmlEncoder Full;
    public static IHtmlEncoder Default { get; }
    private static HtmlEncoders();
    public static IHtmlEncoder get_Default();
}
public class CsQuery.HtmlParser.BOMReader : object {
    private static int XmlBlockSize;
    private Stream InputStream;
    private Byte[] Header;
    private int BytesRead;
    private int BomLength;
    [CompilerGeneratedAttribute]
private Encoding <Encoding>k__BackingField;
    [CompilerGeneratedAttribute]
private Encoding <DefaultEncoding>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsBOM>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsXML>k__BackingField;
    public Encoding Encoding { get; protected set; }
    public Stream StreamWithoutBOM { get; }
    public Stream StreamWithBOM { get; }
    public Encoding DefaultEncoding { get; protected set; }
    public bool IsBOM { get; protected set; }
    public bool IsXML { get; protected set; }
    public BOMReader(Stream stream);
    [CompilerGeneratedAttribute]
public Encoding get_Encoding();
    [CompilerGeneratedAttribute]
protected void set_Encoding(Encoding value);
    public Encoding GetEncoding(Encoding defaultEncoding);
    public Stream get_StreamWithoutBOM();
    public Stream get_StreamWithBOM();
    [CompilerGeneratedAttribute]
public Encoding get_DefaultEncoding();
    [CompilerGeneratedAttribute]
protected void set_DefaultEncoding(Encoding value);
    [CompilerGeneratedAttribute]
public bool get_IsBOM();
    [CompilerGeneratedAttribute]
protected void set_IsBOM(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsXML();
    [CompilerGeneratedAttribute]
protected void set_IsXML(bool value);
    protected void Parse();
    private Encoding GetFileEncoding();
    private Encoding GetEncodingFromXML();
    private bool Matches(Byte[] buffer);
}
public class CsQuery.HtmlParser.CsQueryTreeBuilder : CoalescingTreeBuilder`1<DomObject> {
    internal DomDocument Document;
    private IDomIndexProvider DomIndexProvider;
    private bool isFragment;
    public CsQueryTreeBuilder(IDomIndexProvider domIndexProvider);
    protected virtual void AddAttributesToElement(DomObject element, HtmlAttributes attributes);
    protected virtual void AppendCharacters(DomObject parent, string text);
    protected virtual void AppendChildrenToNewParent(DomObject oldParent, DomObject newParent);
    protected virtual void AppendDoctypeToDocument(string name, string fpi, string uri);
    protected virtual void AppendComment(DomObject parent, string comment);
    protected virtual void AppendCommentToDocument(string comment);
    protected virtual DomObject CreateElement(string ns, string name, HtmlAttributes attributes);
    protected virtual DomObject CreateHtmlElementSetAsRoot(HtmlAttributes attributes);
    protected virtual void AppendElement(DomObject child, DomObject newParent);
    protected virtual bool HasChildren(DomObject element);
    protected virtual DomObject CreateElement(string ns, string name, HtmlAttributes attributes, DomObject form);
    protected virtual void Start(bool fragment);
    protected virtual void ReceiveDocumentMode(DocumentMode mode, string publicIdentifier, string systemIdentifier, bool html4SpecificAddcionalErrorChecks);
    protected virtual void InsertFosterParentedCharacters(string text, DomObject table, DomObject stackParent);
    protected virtual void InsertFosterParentedChild(DomObject child, DomObject table, DomObject stackParent);
    protected virtual void DetachFromParent(DomObject element);
    private string AttributeName(string localName, string uri);
}
public class CsQuery.HtmlParser.ElementFactory : object {
    private static int tokenizerBlockChars;
    private static int preprocessorBlockBytes;
    private static IDictionary`2<string, string> DefaultContext;
    private Tokenizer tokenizer;
    private IDomIndexProvider DomIndexProvider;
    private CsQueryTreeBuilder treeBuilder;
    private bool AlreadyReEncoded;
    private ReEncodeAction ReEncode;
    private Stream ActiveStream;
    private TextReader ActiveStreamReader;
    private Encoding ActiveEncoding;
    private int ActiveStreamOffset;
    [CompilerGeneratedAttribute]
private HtmlParsingMode <HtmlParsingMode>k__BackingField;
    [CompilerGeneratedAttribute]
private HtmlParsingOptions <HtmlParsingOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private DocType <DocType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FragmentContext>k__BackingField;
    public HtmlParsingMode HtmlParsingMode { get; public set; }
    public HtmlParsingOptions HtmlParsingOptions { get; public set; }
    public DocType DocType { get; public set; }
    public string FragmentContext { get; public set; }
    private static ElementFactory();
    public ElementFactory(IDomIndexProvider domIndexProvider);
    public static IDomDocument Create(Stream html, Encoding streamEncoding, HtmlParsingMode parsingMode, HtmlParsingOptions parsingOptions, DocType docType);
    private static ElementFactory GetNewParser();
    private static ElementFactory GetNewParser(HtmlParsingMode parsingMode, HtmlParsingOptions parsingOptions, DocType docType);
    [CompilerGeneratedAttribute]
public HtmlParsingMode get_HtmlParsingMode();
    [CompilerGeneratedAttribute]
public void set_HtmlParsingMode(HtmlParsingMode value);
    [CompilerGeneratedAttribute]
public HtmlParsingOptions get_HtmlParsingOptions();
    [CompilerGeneratedAttribute]
public void set_HtmlParsingOptions(HtmlParsingOptions value);
    [CompilerGeneratedAttribute]
public DocType get_DocType();
    [CompilerGeneratedAttribute]
public void set_DocType(DocType value);
    [CompilerGeneratedAttribute]
public string get_FragmentContext();
    [CompilerGeneratedAttribute]
public void set_FragmentContext(string value);
    public IDomDocument Parse(Stream inputStream, Encoding encoding);
    private static HtmlParsingOptions MergeOptions(HtmlParsingOptions options);
    private static DocType GetDocType(DocType docType);
    private void ConfigureTreeBuilderForParsingMode();
    private static void SetDefaultContext(string tags, string context);
    private string GetContext(string tag);
    private TextReader GetContextFromStream(TextReader reader, String& context);
    private void InitializeTreeBuilder();
    private void Reset();
    private void tokenizer_EncodingDeclared(object sender, EncodingDetectedEventArgs e);
    private void Tokenize();
    private void CheckForReEncode();
    private static void ConfigureDefaultContextMap();
}
public class CsQuery.HtmlParser.HtmlData : object {
    public static int pathIdLength;
    public static ushort indexSeparator;
    public static ushort tagActionNothing;
    public static ushort tagActionClose;
    public static ushort ClassAttrId;
    public static ushort ValueAttrId;
    public static ushort IDAttrId;
    public static ushort SelectedAttrId;
    public static ushort ReadonlyAttrId;
    public static ushort CheckedAttrId;
    public static ushort tagINPUT;
    public static ushort tagSELECT;
    public static ushort tagOPTION;
    public static ushort tagP;
    public static ushort tagTR;
    public static ushort tagTD;
    public static ushort tagTH;
    public static ushort tagHEAD;
    public static ushort tagBODY;
    public static ushort tagDT;
    public static ushort tagCOLGROUP;
    public static ushort tagDD;
    public static ushort tagLI;
    public static ushort tagDL;
    public static ushort tagTABLE;
    public static ushort tagOPTGROUP;
    public static ushort tagUL;
    public static ushort tagOL;
    public static ushort tagTBODY;
    public static ushort tagTFOOT;
    public static ushort tagTHEAD;
    public static ushort tagRT;
    public static ushort tagRP;
    public static ushort tagSCRIPT;
    public static ushort tagTEXTAREA;
    public static ushort tagSTYLE;
    public static ushort tagCOL;
    public static ushort tagHTML;
    public static ushort tagBUTTON;
    public static ushort attrMULTIPLE;
    public static ushort tagA;
    public static ushort tagSPAN;
    public static ushort tagFORM;
    public static ushort attrREQUIRED;
    public static ushort attrAUTOFOCUS;
    public static ushort attrTYPE;
    public static ushort tagPROGRESS;
    public static ushort tagLABEL;
    public static ushort attrDISABLED;
    public static ushort tagMETER;
    public static ushort tagIMG;
    public static ushort tagLINK;
    private static ushort maxHardcodedTokenId;
    private static ushort NonSpecialTokenMask;
    public static bool Debug;
    private static Char[] MustBeQuoted;
    private static Char[] MustBeQuotedAll;
    public static HashSet`1<char> NumberChars;
    public static HashSet`1<string> Units;
    private static ushort nextID;
    private static List`1<string> Tokens;
    private static Dictionary`2<string, ushort> TokenIDs;
    private static object locker;
    private static string defaultPadding;
    private static UInt16[] TokenMetadata;
    public static IEnumerable`1<string> Keys { get; }
    private static HtmlData();
    private static HashSet`1<ushort> PopulateTokenHashset(IEnumerable`1<string> tokens);
    private static void Touch();
    public static IEnumerable`1<string> get_Keys();
    public static bool HtmlChildrenNotAllowed(ushort nodeId);
    public static bool HtmlChildrenNotAllowed(string nodeName);
    public static bool ChildrenAllowed(ushort tokenId);
    public static bool ChildrenAllowed(string nodeName);
    public static bool IsBlock(ushort tokenId);
    public static bool IsBlock(string nodeName);
    public static bool IsBoolean(ushort tokenId);
    public static bool IsBoolean(string propertyName);
    public static bool IsCaseInsensitiveValues(string attributeName);
    public static bool IsCaseInsensitiveValues(ushort attributeToken);
    public static bool HasValueProperty(string nodeName);
    public static bool HasValueProperty(ushort nodeNameToken);
    public static bool IsFormInputControl(string nodeName);
    public static bool IsFormInputControl(ushort nodeNameToken);
    public static ushort Tokenize(string name);
    public static ushort TokenizeCaseSensitive(string name);
    private static ushort TokenizeImpl(string tokenName);
    public static string TokenName(ushort tokenId);
    public static string AttributeEncode(string text, bool alwaysQuote, String& quoteChar);
    public static string HtmlDecode(string html);
    public static ushort SpecialTagAction(string tag, string newTag, bool isDocument);
    public static ushort SpecialTagActionForDocument(ushort parentTagId, ushort newTagId);
    public static ushort SpecialTagAction(ushort parentTagId, ushort newTagId);
    private static void setBit(IEnumerable`1<string> tokens, TokenProperties bit);
    private static void setBit(IEnumerable`1<ushort> tokens, TokenProperties bit);
    private static void setBit(ushort token, TokenProperties bit);
}
public static class CsQuery.HtmlParser.HtmlEncoding : object {
    private static Dictionary`2<string, EncodingInfo> _Encodings;
    private static Dictionary`2<string, EncodingInfo> Encodings { get; }
    private static Dictionary`2<string, EncodingInfo> get_Encodings();
    public static bool TryGetEncoding(string encodingName, Encoding& encoding);
    public static Encoding GetEncoding(string encodingName);
}
public static class CsQuery.HtmlParser.HtmlStyles : object {
    public static Dictionary`2<string, CssStyle> StyleDefs;
    private static Char[] StringSep;
    private static string CssDefs;
    private static HtmlStyles();
}
[FlagsAttribute]
public enum CsQuery.HtmlParser.TokenProperties : Enum {
    public ushort value__;
    public static TokenProperties BlockElement;
    public static TokenProperties BooleanProperty;
    public static TokenProperties AutoOpenOrClose;
    public static TokenProperties ChildrenNotAllowed;
    public static TokenProperties HtmlChildrenNotAllowed;
    public static TokenProperties ParagraphCloser;
    public static TokenProperties MetaDataTags;
    public static TokenProperties CaseInsensitiveValues;
    public static TokenProperties HasValue;
    public static TokenProperties FormInputControl;
}
public enum CsQuery.HtmlParsingMode : Enum {
    public byte value__;
    public static HtmlParsingMode Auto;
    public static HtmlParsingMode Fragment;
    public static HtmlParsingMode Content;
    public static HtmlParsingMode Document;
}
[FlagsAttribute]
public enum CsQuery.HtmlParsingOptions : Enum {
    public byte value__;
    public static HtmlParsingOptions None;
    public static HtmlParsingOptions Default;
    public static HtmlParsingOptions AllowSelfClosingTags;
    public static HtmlParsingOptions IgnoreComments;
}
[DefaultMemberAttribute("Item")]
public interface CsQuery.IAttributeCollection {
    public string Item { get; public set; }
    public int Length { get; }
    public abstract virtual string GetAttribute(string name);
    public abstract virtual void SetAttribute(string name, string value);
    public abstract virtual string get_Item(string attributeName);
    public abstract virtual void set_Item(string attributeName, string value);
    public abstract virtual int get_Length();
}
public interface CsQuery.ICSSRule {
    public CSSRuleType Type { get; }
    public string CssText { get; public set; }
    public ICSSStyleSheet ParentStyleSheet { get; }
    public ICSSRule ParentRule { get; }
    public abstract virtual CSSRuleType get_Type();
    public abstract virtual string get_CssText();
    public abstract virtual void set_CssText(string value);
    public abstract virtual ICSSStyleSheet get_ParentStyleSheet();
    public abstract virtual ICSSRule get_ParentRule();
}
public interface CsQuery.ICSSStyle {
    public string Name { get; public set; }
    public CSSStyleType Type { get; public set; }
    public string Format { get; public set; }
    public HashSet`1<string> Options { get; public set; }
    public string Description { get; public set; }
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    public abstract virtual CSSStyleType get_Type();
    public abstract virtual void set_Type(CSSStyleType value);
    public abstract virtual string get_Format();
    public abstract virtual void set_Format(string value);
    public abstract virtual HashSet`1<string> get_Options();
    public abstract virtual void set_Options(HashSet`1<string> value);
    public abstract virtual string get_Description();
    public abstract virtual void set_Description(string value);
}
public interface CsQuery.ICSSStyleDeclaration {
    public int Length { get; }
    public string CssText { get; public set; }
    public ICSSRule ParentRule { get; }
    public abstract virtual int get_Length();
    public abstract virtual string get_CssText();
    public abstract virtual void set_CssText(string value);
    public abstract virtual ICSSRule get_ParentRule();
    public abstract virtual void add_OnHasStylesChanged(EventHandler`1<CSSStyleChangedArgs> value);
    public abstract virtual void remove_OnHasStylesChanged(EventHandler`1<CSSStyleChangedArgs> value);
    public abstract virtual bool HasStyle(string styleName);
    public abstract virtual void SetStyles(string styles);
    public abstract virtual void SetStyles(string styles, bool strict);
    public abstract virtual void SetStyle(string name, string value);
    public abstract virtual void SetStyle(string name, string value, bool strict);
    public abstract virtual string GetStyle(string name);
    public abstract virtual bool RemoveStyle(string name);
}
public interface CsQuery.ICSSStyleRule {
    public string SelectorText { get; public set; }
    public ICSSStyleDeclaration Style { get; }
    public abstract virtual string get_SelectorText();
    public abstract virtual void set_SelectorText(string value);
    public abstract virtual ICSSStyleDeclaration get_Style();
}
public interface CsQuery.ICSSStyleSheet {
    public bool Disabled { get; public set; }
    public string Href { get; public set; }
    public IDomElement OwnerNode { get; }
    public string Type { get; }
    public IList`1<ICSSRule> CssRules { get; }
    public abstract virtual bool get_Disabled();
    public abstract virtual void set_Disabled(bool value);
    public abstract virtual string get_Href();
    public abstract virtual void set_Href(string value);
    public abstract virtual IDomElement get_OwnerNode();
    public abstract virtual string get_Type();
    public abstract virtual IList`1<ICSSRule> get_CssRules();
}
public interface CsQuery.IDomCData {
}
public interface CsQuery.IDomComment {
    public bool IsQuoted { get; public set; }
    public abstract virtual bool get_IsQuoted();
    public abstract virtual void set_IsQuoted(bool value);
}
public interface CsQuery.IDomContainer {
    public abstract virtual IEnumerable`1<IDomObject> CloneChildren();
}
public interface CsQuery.IDomDocument {
    public IDomIndex DocumentIndex { get; }
    public IDomDocumentType DocTypeNode { get; public set; }
    public DocType DocType { get; }
    public IList`1<ICSSStyleSheet> StyleSheets { get; }
    public IDomElement Body { get; }
    public IDictionary`2<string, object> Data { get; public set; }
    public abstract virtual IDomIndex get_DocumentIndex();
    public abstract virtual IDomDocumentType get_DocTypeNode();
    public abstract virtual void set_DocTypeNode(IDomDocumentType value);
    public abstract virtual DocType get_DocType();
    public abstract virtual IList`1<ICSSStyleSheet> get_StyleSheets();
    public abstract virtual IDomElement GetElementById(string id);
    public abstract virtual T GetElementById(string id);
    public abstract virtual IDomElement CreateElement(string nodeName);
    public abstract virtual IDomText CreateTextNode(string text);
    public abstract virtual IDomComment CreateComment(string comment);
    public abstract virtual IDomDocumentType CreateDocumentType(string type, string access, string fpi, string uri);
    public abstract virtual IDomDocumentType CreateDocumentType(DocType docType);
    public abstract virtual IDomElement QuerySelector(string selector);
    public abstract virtual IList`1<IDomElement> QuerySelectorAll(string selector);
    public abstract virtual INodeList`1<IDomElement> GetElementsByTagName(string tagName);
    public abstract virtual IDomElement get_Body();
    public abstract virtual IDomDocument CreateNew();
    public abstract virtual IDomDocument CreateNew();
    public abstract virtual IDictionary`2<string, object> get_Data();
    public abstract virtual void set_Data(IDictionary`2<string, object> value);
}
public interface CsQuery.IDomDocumentType {
    public DocType DocType { get; }
    public abstract virtual DocType get_DocType();
}
public interface CsQuery.IDomElement {
    public bool IsBlock { get; }
    public int ElementIndex { get; }
    public abstract virtual bool get_IsBlock();
    public abstract virtual string ElementHtml();
    public abstract virtual int get_ElementIndex();
}
public interface CsQuery.IDomFragment {
}
public interface CsQuery.IDomIndexedNode {
    public IDomObject IndexReference { get; }
    public abstract virtual IEnumerable`1<UInt16[]> IndexKeys();
    public abstract virtual IDomObject get_IndexReference();
}
public interface CsQuery.IDomInnerText {
}
[ObsoleteAttribute]
public interface CsQuery.IDomInvalidElement {
}
public interface CsQuery.IDomNode {
    public NodeType NodeType { get; }
    public string NodeName { get; }
    public string NodeValue { get; public set; }
    public bool HasChildren { get; }
    public int Index { get; }
    public INodeList ChildNodes { get; }
    public IEnumerable`1<IDomElement> ChildElements { get; }
    public bool IsIndexed { get; }
    public bool IsDisconnected { get; }
    public bool IsFragment { get; }
    public abstract virtual NodeType get_NodeType();
    public abstract virtual string get_NodeName();
    public abstract virtual string get_NodeValue();
    public abstract virtual void set_NodeValue(string value);
    public abstract virtual bool get_HasChildren();
    public abstract virtual int get_Index();
    public abstract virtual INodeList get_ChildNodes();
    public abstract virtual IEnumerable`1<IDomElement> get_ChildElements();
    public abstract virtual string Render();
    public abstract virtual string Render(DomRenderingOptions options);
    public abstract virtual string Render(IOutputFormatter formatter);
    public abstract virtual void Render(IOutputFormatter formatter, TextWriter writer);
    [ObsoleteAttribute]
public abstract virtual void Render(StringBuilder sb);
    [ObsoleteAttribute]
public abstract virtual void Render(StringBuilder sb, DomRenderingOptions options);
    public abstract virtual void Remove();
    public abstract virtual bool get_IsIndexed();
    public abstract virtual bool get_IsDisconnected();
    public abstract virtual bool get_IsFragment();
    public abstract virtual IDomNode Clone();
}
[DefaultMemberAttribute("Item")]
public interface CsQuery.IDomObject {
    public IDomDocument Document { get; }
    public IDomContainer ParentNode { get; }
    public IDomObject Item { get; }
    public string Item { get; public set; }
    public string Id { get; public set; }
    public IAttributeCollection Attributes { get; }
    public CSSStyleDeclaration Style { get; public set; }
    public string ClassName { get; public set; }
    public IEnumerable`1<string> Classes { get; }
    public string Value { get; public set; }
    public string DefaultValue { get; public set; }
    public string InnerHTML { get; public set; }
    public string OuterHTML { get; public set; }
    public string InnerText { get; public set; }
    public string TextContent { get; public set; }
    public IDomObject FirstChild { get; }
    public IDomElement FirstElementChild { get; }
    public IDomObject LastChild { get; }
    public IDomElement LastElementChild { get; }
    public IDomObject NextSibling { get; }
    public IDomObject PreviousSibling { get; }
    public IDomElement NextElementSibling { get; }
    public IDomElement PreviousElementSibling { get; }
    public bool HasAttributes { get; }
    public bool HasClasses { get; }
    public bool HasStyles { get; }
    public bool Selected { get; public set; }
    public bool Checked { get; public set; }
    public bool ReadOnly { get; public set; }
    public string Type { get; public set; }
    public string Name { get; public set; }
    public bool InnerHtmlAllowed { get; }
    public bool InnerTextAllowed { get; }
    public bool ChildrenAllowed { get; }
    public int Depth { get; }
    [ObsoleteAttribute]
public char PathID { get; }
    [ObsoleteAttribute]
public string Path { get; }
    public ushort NodePathID { get; }
    public UInt16[] NodePath { get; }
    public ushort NodeNameID { get; }
    public abstract virtual IDomDocument get_Document();
    public abstract virtual IDomContainer get_ParentNode();
    public abstract virtual IDomObject get_Item(int index);
    public abstract virtual string get_Item(string attribute);
    public abstract virtual void set_Item(string attribute, string value);
    public abstract virtual string get_Id();
    public abstract virtual void set_Id(string value);
    public abstract virtual IAttributeCollection get_Attributes();
    public abstract virtual CSSStyleDeclaration get_Style();
    public abstract virtual void set_Style(CSSStyleDeclaration value);
    public abstract virtual string get_ClassName();
    public abstract virtual void set_ClassName(string value);
    public abstract virtual IEnumerable`1<string> get_Classes();
    public abstract virtual string get_Value();
    public abstract virtual void set_Value(string value);
    public abstract virtual string get_DefaultValue();
    public abstract virtual void set_DefaultValue(string value);
    public abstract virtual string get_InnerHTML();
    public abstract virtual void set_InnerHTML(string value);
    public abstract virtual string get_OuterHTML();
    public abstract virtual void set_OuterHTML(string value);
    public abstract virtual string get_InnerText();
    public abstract virtual void set_InnerText(string value);
    public abstract virtual string get_TextContent();
    public abstract virtual void set_TextContent(string value);
    public abstract virtual void AppendChild(IDomObject element);
    public abstract virtual void RemoveChild(IDomObject element);
    public abstract virtual void InsertBefore(IDomObject newNode, IDomObject referenceNode);
    public abstract virtual void InsertAfter(IDomObject newNode, IDomObject referenceNode);
    public abstract virtual IDomObject get_FirstChild();
    public abstract virtual IDomElement get_FirstElementChild();
    public abstract virtual IDomObject get_LastChild();
    public abstract virtual IDomElement get_LastElementChild();
    public abstract virtual IDomObject get_NextSibling();
    public abstract virtual IDomObject get_PreviousSibling();
    public abstract virtual IDomElement get_NextElementSibling();
    public abstract virtual IDomElement get_PreviousElementSibling();
    public abstract virtual void SetAttribute(string name);
    public abstract virtual void SetAttribute(string name, string value);
    public abstract virtual string GetAttribute(string name);
    public abstract virtual string GetAttribute(string name, string defaultValue);
    public abstract virtual bool TryGetAttribute(string name, String& value);
    public abstract virtual bool HasAttribute(string name);
    public abstract virtual bool RemoveAttribute(string name);
    public abstract virtual bool HasClass(string className);
    public abstract virtual bool AddClass(string className);
    public abstract virtual bool RemoveClass(string className);
    public abstract virtual bool HasStyle(string styleName);
    public abstract virtual void AddStyle(string styleString);
    public abstract virtual void AddStyle(string style, bool strict);
    public abstract virtual bool RemoveStyle(string name);
    public abstract virtual bool get_HasAttributes();
    public abstract virtual bool get_HasClasses();
    public abstract virtual bool get_HasStyles();
    public abstract virtual bool get_Selected();
    public abstract virtual void set_Selected(bool value);
    public abstract virtual bool get_Checked();
    public abstract virtual void set_Checked(bool value);
    public abstract virtual bool get_ReadOnly();
    public abstract virtual void set_ReadOnly(bool value);
    public abstract virtual string get_Type();
    public abstract virtual void set_Type(string value);
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    public abstract virtual bool get_InnerHtmlAllowed();
    public abstract virtual bool get_InnerTextAllowed();
    public abstract virtual bool get_ChildrenAllowed();
    public abstract virtual int DescendantCount();
    public abstract virtual int get_Depth();
    public abstract virtual char get_PathID();
    public abstract virtual string get_Path();
    public abstract virtual ushort get_NodePathID();
    public abstract virtual UInt16[] get_NodePath();
    public abstract virtual CQ Cq();
    public abstract virtual IDomObject Clone();
    public abstract virtual ushort get_NodeNameID();
}
public interface CsQuery.IDomObject`1 {
    public abstract virtual T Clone();
}
public interface CsQuery.IDomSpecialElement {
    public string NonAttributeData { get; public set; }
    public abstract virtual string get_NonAttributeData();
    public abstract virtual void set_NonAttributeData(string value);
}
public interface CsQuery.IDomText {
}
public interface CsQuery.IHTMLAnchorElement {
    public string Target { get; public set; }
    public string Href { get; public set; }
    public RelAnchor Rel { get; public set; }
    public string Hreflang { get; public set; }
    public string Media { get; public set; }
    public abstract virtual string get_Target();
    public abstract virtual void set_Target(string value);
    public abstract virtual string get_Href();
    public abstract virtual void set_Href(string value);
    public abstract virtual RelAnchor get_Rel();
    public abstract virtual void set_Rel(RelAnchor value);
    public abstract virtual string get_Hreflang();
    public abstract virtual void set_Hreflang(string value);
    public abstract virtual string get_Media();
    public abstract virtual void set_Media(string value);
}
public interface CsQuery.IHTMLFormElement {
    public string AcceptCharset { get; public set; }
    public string Action { get; public set; }
    public string Autocomplete { get; public set; }
    public string Enctype { get; public set; }
    public string Encoding { get; public set; }
    public string Method { get; public set; }
    public bool NoValidate { get; public set; }
    public string Target { get; public set; }
    public INodeList`1<IDomElement> Elements { get; }
    public abstract virtual string get_AcceptCharset();
    public abstract virtual void set_AcceptCharset(string value);
    public abstract virtual string get_Action();
    public abstract virtual void set_Action(string value);
    public abstract virtual string get_Autocomplete();
    public abstract virtual void set_Autocomplete(string value);
    public abstract virtual string get_Enctype();
    public abstract virtual void set_Enctype(string value);
    public abstract virtual string get_Encoding();
    public abstract virtual void set_Encoding(string value);
    public abstract virtual string get_Method();
    public abstract virtual void set_Method(string value);
    public abstract virtual bool get_NoValidate();
    public abstract virtual void set_NoValidate(bool value);
    public abstract virtual string get_Target();
    public abstract virtual void set_Target(string value);
    public abstract virtual INodeList`1<IDomElement> get_Elements();
}
public interface CsQuery.IHTMLInputElement {
    public IDomElement Form { get; }
    public bool Autofocus { get; public set; }
    public bool Required { get; public set; }
    public abstract virtual IDomElement get_Form();
    public abstract virtual bool get_Autofocus();
    public abstract virtual void set_Autofocus(bool value);
    public abstract virtual bool get_Required();
    public abstract virtual void set_Required(bool value);
}
public interface CsQuery.IHTMLLabelElement {
    public IHTMLFormElement Form { get; }
    public string HtmlFor { get; public set; }
    public IDomElement Control { get; }
    public abstract virtual IHTMLFormElement get_Form();
    public abstract virtual string get_HtmlFor();
    public abstract virtual void set_HtmlFor(string value);
    public abstract virtual IDomElement get_Control();
}
public interface CsQuery.IHTMLLIElement {
    public int Value { get; public set; }
    public abstract virtual int get_Value();
    public abstract virtual void set_Value(int value);
}
public interface CsQuery.IHTMLMeterElement {
    public int Value { get; public set; }
    public double Min { get; public set; }
    public double Max { get; public set; }
    public double Low { get; public set; }
    public double High { get; public set; }
    public double Optimum { get; public set; }
    public INodeList`1<IDomElement> Labels { get; }
    public abstract virtual int get_Value();
    public abstract virtual void set_Value(int value);
    public abstract virtual double get_Min();
    public abstract virtual void set_Min(double value);
    public abstract virtual double get_Max();
    public abstract virtual void set_Max(double value);
    public abstract virtual double get_Low();
    public abstract virtual void set_Low(double value);
    public abstract virtual double get_High();
    public abstract virtual void set_High(double value);
    public abstract virtual double get_Optimum();
    public abstract virtual void set_Optimum(double value);
    public abstract virtual INodeList`1<IDomElement> get_Labels();
}
public interface CsQuery.IHTMLOptionElement {
    public bool Disabled { get; public set; }
    public IDomElement Form { get; }
    public string Label { get; public set; }
    public abstract virtual bool get_Disabled();
    public abstract virtual void set_Disabled(bool value);
    public abstract virtual IDomElement get_Form();
    public abstract virtual string get_Label();
    public abstract virtual void set_Label(string value);
}
[DefaultMemberAttribute("Indexer")]
public interface CsQuery.IHTMLOptionsCollection {
    public IDomElement Indexer { get; }
    public IDomElement Indexer { get; }
    public abstract virtual IDomElement Item(int index);
    public abstract virtual IDomElement get_Indexer(int index);
    public abstract virtual IDomElement NamedItem(string name);
    public abstract virtual IDomElement get_Indexer(string name);
}
public interface CsQuery.IHTMLProgressElement {
    public int Value { get; public set; }
    public double Max { get; public set; }
    public double Position { get; }
    public INodeList`1<IHTMLLabelElement> Labels { get; }
    public abstract virtual int get_Value();
    public abstract virtual void set_Value(int value);
    public abstract virtual double get_Max();
    public abstract virtual void set_Max(double value);
    public abstract virtual double get_Position();
    public abstract virtual INodeList`1<IHTMLLabelElement> get_Labels();
}
public interface CsQuery.IHTMLSelectElement {
    public IHTMLOptionsCollection Options { get; }
    public int SelectedIndex { get; public set; }
    public IDomElement SelectedItem { get; public set; }
    public bool Multiple { get; public set; }
    public int Length { get; }
    public abstract virtual IHTMLOptionsCollection get_Options();
    public abstract virtual int get_SelectedIndex();
    public abstract virtual void set_SelectedIndex(int value);
    public abstract virtual IDomElement get_SelectedItem();
    public abstract virtual void set_SelectedItem(IDomElement value);
    public abstract virtual bool get_Multiple();
    public abstract virtual void set_Multiple(bool value);
    public abstract virtual int get_Length();
}
[DefaultMemberAttribute("Item")]
public class CsQuery.Implementation.AttributeCollection : object {
    private IDictionary`2<ushort, string> Attributes;
    internal string Item { get; internal set; }
    public bool HasAttributes { get; }
    public int Count { get; }
    public string Item { get; public set; }
    public ICollection`1<string> Keys { get; }
    public ICollection`1<string> Values { get; }
    private bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.String>>.IsReadOnly { get; }
    internal string get_Item(ushort nodeId);
    internal void set_Item(ushort nodeId, string value);
    public bool get_HasAttributes();
    public sealed virtual int get_Count();
    public sealed virtual void Clear();
    public AttributeCollection Clone();
    public sealed virtual void Add(string name, string value);
    public sealed virtual bool Remove(string name);
    public bool Remove(ushort tokenId);
    public sealed virtual string get_Item(string name);
    public sealed virtual void set_Item(string name, string value);
    public sealed virtual bool ContainsKey(string key);
    public bool ContainsKey(ushort tokenId);
    public sealed virtual ICollection`1<string> get_Keys();
    public sealed virtual ICollection`1<string> get_Values();
    public sealed virtual bool TryGetValue(string name, String& value);
    public bool TryGetValue(ushort tokenId, String& value);
    public void SetBoolean(string name);
    public void SetBoolean(ushort tokenId);
    public bool Unset(string name);
    public bool Unset(ushort tokenId);
    private string Get(string name);
    private string Get(ushort tokenId);
    private void Set(string name, string value);
    private void Set(ushort tokenId, string value);
    internal void SetRaw(ushort tokenId, string value);
    protected IEnumerable`1<KeyValuePair`2<string, string>> GetAttributes();
    internal IEnumerable`1<ushort> GetAttributeIds();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.String>>.get_IsReadOnly();
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.String>>.Add(KeyValuePair`2<string, string> item);
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.String>>.Contains(KeyValuePair`2<string, string> item);
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.String>>.CopyTo(KeyValuePair`2[] array, int arrayIndex);
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.String>>.Remove(KeyValuePair`2<string, string> item);
    public IEnumerator`1<KeyValuePair`2<string, string>> GetEnumerator();
    private sealed virtual override IEnumerator`1<KeyValuePair`2<string, string>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.String>>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public abstract class CsQuery.Implementation.BaseStream : Stream {
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual void Flush();
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual int ReadByte();
    public virtual void WriteByte(byte value);
}
[DefaultMemberAttribute("Indexer")]
public class CsQuery.Implementation.ChildNodeList : object {
    private List`1<IDomObject> _InnerList;
    private EventHandler`1<NodeEventArgs> OnChanged;
    [CompilerGeneratedAttribute]
private IDomContainer <Owner>k__BackingField;
    protected List`1<IDomObject> InnerList { get; }
    public IDomContainer Owner { get; public set; }
    public IDomObject Indexer { get; public set; }
    public int Count { get; }
    public int Length { get; }
    public bool IsReadOnly { get; }
    public ChildNodeList(IDomContainer owner);
    protected List`1<IDomObject> get_InnerList();
    public sealed virtual void add_OnChanged(EventHandler`1<NodeEventArgs> value);
    public sealed virtual void remove_OnChanged(EventHandler`1<NodeEventArgs> value);
    [CompilerGeneratedAttribute]
public IDomContainer get_Owner();
    [CompilerGeneratedAttribute]
public void set_Owner(IDomContainer value);
    public sealed virtual IDomObject Item(int index);
    public sealed virtual int IndexOf(IDomObject item);
    public sealed virtual void Add(IDomObject item);
    public void AddAlways(IDomObject item);
    public sealed virtual void Insert(int index, IDomObject item);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual bool Remove(IDomObject item);
    public IDomObject get_Indexer(int index);
    public void set_Indexer(int index, IDomObject value);
    private void RaiseChangedEvent(IDomObject node);
    private void RemoveParent(IDomObject element);
    private void AddParent(IDomObject element, int index);
    private void ReindexFromLeft(int index);
    private void ReindexFromRight(int index);
    public void AddRange(IEnumerable`1<IDomObject> elements);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(IDomObject item);
    public sealed virtual void CopyTo(IDomObject[] array, int arrayIndex);
    public sealed virtual int get_Count();
    public sealed virtual int get_Length();
    public sealed virtual bool get_IsReadOnly();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override IEnumerator`1<IDomObject> System.Collections.Generic.IEnumerable<CsQuery.IDomObject>.GetEnumerator();
    public IEnumerator`1<IDomObject> GetEnumerator();
    private sealed virtual override IDomObject System.Collections.Generic.IList<CsQuery.IDomObject>.get_Item(int );
    private sealed virtual override void System.Collections.Generic.IList<CsQuery.IDomObject>.set_Item(int , IDomObject );
}
public class CsQuery.Implementation.CombinedStream : BaseStream {
    private bool _valid;
    private IEnumerator`1<Stream> _streams;
    public bool CanRead { get; }
    public CombinedStream(Stream[] streams);
    public CombinedStream(IEnumerable`1<Stream> streams);
    public virtual bool get_CanRead();
    public virtual int Read(Byte[] buffer, int offset, int count);
    protected virtual void Dispose(bool disposing);
}
public class CsQuery.Implementation.CombinedTextReader : TextReader {
    protected TextReader[] Readers;
    private int CurrentIndex;
    private int Count;
    private TextReader Current { get; }
    public CombinedTextReader(TextReader[] readers);
    public virtual void Close();
    protected virtual void Dispose(bool disposing);
    public virtual int Peek();
    public virtual int Read();
    public virtual int Read(Char[] buffer, int index, int count);
    public virtual int ReadBlock(Char[] buffer, int index, int count);
    public virtual string ReadLine();
    public virtual string ReadToEnd();
    public virtual ObjRef CreateObjRef(Type requestedType);
    public virtual object InitializeLifetimeService();
    private bool NextReader();
    private TextReader get_Current();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
}
public abstract class CsQuery.Implementation.CSSRule : object {
    [CompilerGeneratedAttribute]
private CSSRuleType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private ICSSStyleSheet <ParentStyleSheet>k__BackingField;
    [CompilerGeneratedAttribute]
private ICSSRule <ParentRule>k__BackingField;
    public CSSRuleType Type { get; public set; }
    public string CssText { get; public set; }
    public ICSSStyleSheet ParentStyleSheet { get; protected set; }
    public ICSSRule ParentRule { get; protected set; }
    public CSSRule(ICSSStyleSheet parentStyleSheet, ICSSRule parentRule);
    [CompilerGeneratedAttribute]
public sealed virtual CSSRuleType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(CSSRuleType value);
    public abstract virtual string get_CssText();
    public abstract virtual void set_CssText(string value);
    [CompilerGeneratedAttribute]
public sealed virtual ICSSStyleSheet get_ParentStyleSheet();
    [CompilerGeneratedAttribute]
protected void set_ParentStyleSheet(ICSSStyleSheet value);
    [CompilerGeneratedAttribute]
public sealed virtual ICSSRule get_ParentRule();
    [CompilerGeneratedAttribute]
protected void set_ParentRule(ICSSRule value);
}
public class CsQuery.Implementation.CssStyle : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private CSSStyleType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Format>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<string> <Options>k__BackingField;
    public string Name { get; public set; }
    public CSSStyleType Type { get; public set; }
    public string Format { get; public set; }
    public string Description { get; public set; }
    public HashSet`1<string> Options { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public sealed virtual CSSStyleType get_Type();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Type(CSSStyleType value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Format();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Format(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Description();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Description(string value);
    [CompilerGeneratedAttribute]
public sealed virtual HashSet`1<string> get_Options();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Options(HashSet`1<string> value);
}
public class CsQuery.Implementation.CSSStyleChangedArgs : EventArgs {
    [CompilerGeneratedAttribute]
private bool <HasStyleAttribute>k__BackingField;
    public bool HasStyleAttribute { get; protected set; }
    public CSSStyleChangedArgs(bool hasStyleAttribute);
    [CompilerGeneratedAttribute]
public bool get_HasStyleAttribute();
    [CompilerGeneratedAttribute]
protected void set_HasStyleAttribute(bool value);
}
[DefaultMemberAttribute("Item")]
public class CsQuery.Implementation.CSSStyleDeclaration : object {
    private IDictionary`2<ushort, string> _Styles;
    private string _QuickSetValue;
    private EventHandler`1<CSSStyleChangedArgs> OnHasStylesChanged;
    [CompilerGeneratedAttribute]
private ICSSRule <ParentRule>k__BackingField;
    protected IDictionary`2<ushort, string> Styles { get; protected set; }
    private string QuickSetValue { get; private set; }
    public ICSSRule ParentRule { get; protected set; }
    public int Length { get; }
    public string CssText { get; public set; }
    public bool HasStyles { get; }
    public bool HasStyleAttribute { get; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public ICollection`1<string> Keys { get; }
    public ICollection`1<string> Values { get; }
    public string Item { get; public set; }
    unknown string Item {public set; }
    public string Height { get; public set; }
    public string Width { get; public set; }
    public CSSStyleDeclaration(string cssText);
    public CSSStyleDeclaration(string cssText, bool validate);
    public CSSStyleDeclaration(ICSSRule parentRule);
    protected IDictionary`2<ushort, string> get_Styles();
    protected void set_Styles(IDictionary`2<ushort, string> value);
    private string get_QuickSetValue();
    private void set_QuickSetValue(string value);
    [CompilerGeneratedAttribute]
public sealed virtual ICSSRule get_ParentRule();
    [CompilerGeneratedAttribute]
protected void set_ParentRule(ICSSRule value);
    public sealed virtual void add_OnHasStylesChanged(EventHandler`1<CSSStyleChangedArgs> value);
    public sealed virtual void remove_OnHasStylesChanged(EventHandler`1<CSSStyleChangedArgs> value);
    public sealed virtual int get_Length();
    public sealed virtual string get_CssText();
    public sealed virtual void set_CssText(string value);
    public bool get_HasStyles();
    public bool get_HasStyleAttribute();
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual ICollection`1<string> get_Keys();
    public sealed virtual ICollection`1<string> get_Values();
    public sealed virtual string get_Item(string name);
    public sealed virtual void set_Item(string name, string value);
    public void set_Item(string name, bool strict, string value);
    public string get_Height();
    public void set_Height(string value);
    public string get_Width();
    public void set_Width(string value);
    public CSSStyleDeclaration Clone();
    public sealed virtual void SetStyles(string styles);
    public sealed virtual void SetStyles(string styles, bool strict);
    public void AddStyles(string styles, bool strict);
    public sealed virtual bool Remove(string name);
    public sealed virtual bool RemoveStyle(string name);
    public sealed virtual void Add(string name, string value);
    public sealed virtual void Clear();
    public sealed virtual bool HasStyle(string styleName);
    public void SetRaw(string name, string value);
    public sealed virtual bool TryGetValue(string name, String& value);
    public sealed virtual string GetStyle(string name);
    public sealed virtual void SetStyle(string name, string value);
    public sealed virtual void SetStyle(string name, string value, bool strict);
    public Nullable`1<double> NumberPart(string style);
    public virtual string ToString();
    public IEnumerator`1<KeyValuePair`2<string, string>> GetEnumerator();
    protected string OptionList(CssStyle style);
    protected string ValidateUnitString(string name, string value);
    private IEnumerable`1<KeyValuePair`2<string, string>> stylesEnumerable();
    private void DoOnHasStyleAttributeChanged(bool hadStyleAttribute);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override bool System.Collections.Generic.IDictionary<System.String,System.String>.ContainsKey(string key);
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.String>>.Add(KeyValuePair`2<string, string> item);
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.String>>.Contains(KeyValuePair`2<string, string> item);
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.String>>.CopyTo(KeyValuePair`2[] array, int arrayIndex);
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.String>>.Remove(KeyValuePair`2<string, string> item);
    private sealed virtual override IEnumerator`1<KeyValuePair`2<string, string>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.String>>.GetEnumerator();
}
public class CsQuery.Implementation.CSSStyleRule : CSSRule {
    [CompilerGeneratedAttribute]
private string <SelectorText>k__BackingField;
    [CompilerGeneratedAttribute]
private ICSSStyleDeclaration <Style>k__BackingField;
    public string SelectorText { get; public set; }
    public ICSSStyleDeclaration Style { get; public set; }
    public string CssText { get; public set; }
    public CSSStyleRule(ICSSStyleSheet parentStyleSheet, ICSSRule parentRule);
    [CompilerGeneratedAttribute]
public sealed virtual string get_SelectorText();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SelectorText(string value);
    [CompilerGeneratedAttribute]
public sealed virtual ICSSStyleDeclaration get_Style();
    [CompilerGeneratedAttribute]
public void set_Style(ICSSStyleDeclaration value);
    public virtual string get_CssText();
    public virtual void set_CssText(string value);
}
public class CsQuery.Implementation.CSSStyleSheet : object {
    private IList`1<ICSSRule> _Rules;
    [CompilerGeneratedAttribute]
private bool <Disabled>k__BackingField;
    [CompilerGeneratedAttribute]
private IDomElement <OwnerNode>k__BackingField;
    public bool Disabled { get; public set; }
    public string Href { get; public set; }
    public IDomElement OwnerNode { get; protected set; }
    public string Type { get; }
    public IList`1<ICSSRule> CssRules { get; }
    public CSSStyleSheet(IDomElement ownerNode);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Disabled();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Disabled(bool value);
    public sealed virtual string get_Href();
    public sealed virtual void set_Href(string value);
    [CompilerGeneratedAttribute]
public sealed virtual IDomElement get_OwnerNode();
    [CompilerGeneratedAttribute]
protected void set_OwnerNode(IDomElement value);
    public sealed virtual string get_Type();
    public sealed virtual IList`1<ICSSRule> get_CssRules();
}
public class CsQuery.Implementation.DomCData : DomObject`1<DomCData> {
    private string _NonAttributeData;
    public string NodeValue { get; public set; }
    public NodeType NodeType { get; }
    public string NonAttributeData { get; public set; }
    public bool InnerHtmlAllowed { get; }
    public bool HasChildren { get; }
    public string Text { get; public set; }
    public DomCData(string value);
    public virtual string get_NodeValue();
    public virtual void set_NodeValue(string value);
    public virtual NodeType get_NodeType();
    public sealed virtual string get_NonAttributeData();
    public sealed virtual void set_NonAttributeData(string value);
    public virtual bool get_InnerHtmlAllowed();
    public virtual bool get_HasChildren();
    public string get_Text();
    public void set_Text(string value);
    public virtual DomCData Clone();
    private sealed virtual override IDomNode CsQuery.IDomNode.Clone();
    private sealed virtual override object System.ICloneable.Clone();
}
public class CsQuery.Implementation.DomComment : DomObject`1<DomComment> {
    private string _NonAttributeData;
    [CompilerGeneratedAttribute]
private bool <IsQuoted>k__BackingField;
    public NodeType NodeType { get; }
    public string NodeName { get; }
    public bool IsQuoted { get; public set; }
    public bool InnerHtmlAllowed { get; }
    public bool HasChildren { get; }
    public string NonAttributeData { get; public set; }
    public string NodeValue { get; public set; }
    public DomComment(string text);
    public virtual NodeType get_NodeType();
    public virtual string get_NodeName();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsQuoted();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsQuoted(bool value);
    public virtual bool get_InnerHtmlAllowed();
    public virtual bool get_HasChildren();
    public sealed virtual string get_NonAttributeData();
    public sealed virtual void set_NonAttributeData(string value);
    public virtual string get_NodeValue();
    public virtual void set_NodeValue(string value);
    public virtual DomComment Clone();
    private sealed virtual override IDomNode CsQuery.IDomNode.Clone();
    private sealed virtual override object System.ICloneable.Clone();
}
[DefaultMemberAttribute("Item")]
public abstract class CsQuery.Implementation.DomContainer`1 : DomObject`1<T> {
    private ChildNodeList _ChildNodes;
    public INodeList ChildNodes { get; }
    protected ChildNodeList ChildNodesInternal { get; }
    public bool HasChildren { get; }
    public IDomObject FirstChild { get; }
    public IDomElement FirstElementChild { get; }
    public IDomObject LastChild { get; }
    public IDomElement LastElementChild { get; }
    public IEnumerable`1<IDomElement> ChildElements { get; }
    public IDomObject Item { get; }
    public DomContainer`1(IEnumerable`1<IDomObject> elements);
    public virtual INodeList get_ChildNodes();
    protected ChildNodeList get_ChildNodesInternal();
    public virtual bool get_HasChildren();
    public virtual IDomObject get_FirstChild();
    public virtual IDomElement get_FirstElementChild();
    public virtual IDomObject get_LastChild();
    public virtual IDomElement get_LastElementChild();
    public virtual void AppendChild(IDomObject item);
    internal virtual void AppendChildUnsafe(IDomObject item);
    public virtual void RemoveChild(IDomObject item);
    public virtual void InsertBefore(IDomObject newNode, IDomObject referenceNode);
    public virtual void InsertAfter(IDomObject newNode, IDomObject referenceNode);
    public virtual IEnumerable`1<IDomElement> get_ChildElements();
    public virtual int DescendantCount();
    public virtual IDomObject get_Item(int index);
    private sealed virtual override IDomObject CsQuery.IDomObject.Clone();
    private sealed virtual override IDomNode CsQuery.IDomNode.Clone();
    private sealed virtual override object System.ICloneable.Clone();
}
public class CsQuery.Implementation.DomDocument : DomContainer`1<DomDocument> {
    private IList`1<ICSSStyleSheet> _StyleSheets;
    private IDictionary`2<string, object> _Data;
    [CompilerGeneratedAttribute]
private IDomIndex <DocumentIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private DomRenderingOptions <DomRenderingOptions>k__BackingField;
    public IList`1<ICSSStyleSheet> StyleSheets { get; }
    public IDomIndex DocumentIndex { get; protected set; }
    public IDomContainer ParentNode { get; internal set; }
    public UInt16[] NodePath { get; }
    [ObsoleteAttribute]
public string Path { get; }
    public int Depth { get; }
    [ObsoleteAttribute]
public DomRenderingOptions DomRenderingOptions { get; public set; }
    public IDomDocument Document { get; }
    public NodeType NodeType { get; }
    public IDomDocumentType DocTypeNode { get; public set; }
    public DocType DocType { get; protected set; }
    public bool InnerHtmlAllowed { get; }
    public IDictionary`2<string, object> Data { get; public set; }
    public IDomElement Body { get; }
    public bool IsIndexed { get; }
    public bool IsFragment { get; }
    public bool IsDisconnected { get; }
    public DomDocument(IDomIndex domIndex);
    public static IDomDocument Create();
    public static IDomDocument Create(IEnumerable`1<IDomObject> elements, HtmlParsingMode parsingMode, DocType docType);
    public static IDomDocument Create(string html, HtmlParsingMode parsingMode, HtmlParsingOptions parsingOptions, DocType docType);
    public static IDomDocument Create(Stream html, Encoding encoding, HtmlParsingMode parsingMode, HtmlParsingOptions parsingOptions, DocType docType);
    protected void Populate(IEnumerable`1<IDomObject> elements);
    public sealed virtual IList`1<ICSSStyleSheet> get_StyleSheets();
    [CompilerGeneratedAttribute]
public sealed virtual IDomIndex get_DocumentIndex();
    [CompilerGeneratedAttribute]
protected void set_DocumentIndex(IDomIndex value);
    public virtual IDomContainer get_ParentNode();
    internal virtual void set_ParentNode(IDomContainer value);
    public virtual UInt16[] get_NodePath();
    public virtual string get_Path();
    public virtual int get_Depth();
    [CompilerGeneratedAttribute]
public DomRenderingOptions get_DomRenderingOptions();
    [CompilerGeneratedAttribute]
public void set_DomRenderingOptions(DomRenderingOptions value);
    public virtual IDomDocument get_Document();
    public virtual NodeType get_NodeType();
    public sealed virtual IDomDocumentType get_DocTypeNode();
    public sealed virtual void set_DocTypeNode(IDomDocumentType value);
    public sealed virtual DocType get_DocType();
    protected void set_DocType(DocType value);
    public virtual bool get_InnerHtmlAllowed();
    public sealed virtual IDictionary`2<string, object> get_Data();
    public sealed virtual void set_Data(IDictionary`2<string, object> value);
    public sealed virtual IDomElement get_Body();
    public virtual bool get_IsIndexed();
    public virtual bool get_IsFragment();
    public virtual bool get_IsDisconnected();
    public sealed virtual IDomElement GetElementById(string id);
    public sealed virtual T GetElementById(string id);
    public IDomElement GetElementByTagName(string tagName);
    public sealed virtual INodeList`1<IDomElement> GetElementsByTagName(string tagName);
    public sealed virtual IDomElement QuerySelector(string selector);
    public sealed virtual IList`1<IDomElement> QuerySelectorAll(string selector);
    public sealed virtual IDomElement CreateElement(string nodeName);
    public sealed virtual IDomText CreateTextNode(string text);
    public sealed virtual IDomComment CreateComment(string comment);
    public sealed virtual IDomDocumentType CreateDocumentType(string type, string access, string FPI, string URI);
    public sealed virtual IDomDocumentType CreateDocumentType(DocType docType);
    public virtual DomDocument Clone();
    public virtual IEnumerable`1<IDomObject> CloneChildren();
    public virtual string ToString();
    public sealed virtual IDomDocument CreateNew();
    public virtual IDomDocument CreateNew();
    public IDomDocument CreateNew(IEnumerable`1<IDomObject> elements);
    private IDomDocument CreateNew(Type t);
    protected IEnumerable`1<IDomElement> OnlyElements(IEnumerable`1<IDomObject> objectList);
}
public class CsQuery.Implementation.DomDocumentType : DomObject`1<DomDocumentType> {
    private static Regex DocTypeRegex;
    private DocType _DocType;
    private string _NonAttributeData;
    [CompilerGeneratedAttribute]
private string <DocTypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Access>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FPI>k__BackingField;
    [CompilerGeneratedAttribute]
private string <URI>k__BackingField;
    private string DocTypeName { get; private set; }
    private string Access { get; private set; }
    private string FPI { get; private set; }
    private string URI { get; private set; }
    public NodeType NodeType { get; }
    public string NodeName { get; }
    public DocType DocType { get; protected set; }
    public string NonAttributeData { get; public set; }
    public bool InnerHtmlAllowed { get; }
    public bool HasChildren { get; }
    public DomDocumentType(DocType docType);
    public DomDocumentType(string type, string access, string FPI, string URI);
    private static DomDocumentType();
    [CompilerGeneratedAttribute]
private string get_DocTypeName();
    [CompilerGeneratedAttribute]
private void set_DocTypeName(string value);
    [CompilerGeneratedAttribute]
private string get_Access();
    [CompilerGeneratedAttribute]
private void set_Access(string value);
    [CompilerGeneratedAttribute]
private string get_FPI();
    [CompilerGeneratedAttribute]
private void set_FPI(string value);
    [CompilerGeneratedAttribute]
private string get_URI();
    [CompilerGeneratedAttribute]
private void set_URI(string value);
    public virtual NodeType get_NodeType();
    public virtual string get_NodeName();
    public sealed virtual DocType get_DocType();
    protected void set_DocType(DocType value);
    public sealed virtual string get_NonAttributeData();
    public sealed virtual void set_NonAttributeData(string value);
    private void SetDocType(string type, string access, string fpi, string uri);
    private void SetDocType(DocType type);
    public virtual bool get_InnerHtmlAllowed();
    public virtual bool get_HasChildren();
    public virtual DomDocumentType Clone();
    private sealed virtual override IDomNode CsQuery.IDomNode.Clone();
    private sealed virtual override object System.ICloneable.Clone();
}
[DefaultMemberAttribute("Item")]
public class CsQuery.Implementation.DomElement : DomContainer`1<DomElement> {
    private AttributeCollection _InnerAttributes;
    private CSSStyleDeclaration _Style;
    private List`1<ushort> _Classes;
    private ushort _NodeNameID;
    protected AttributeCollection InnerAttributes { get; protected set; }
    public bool HasInnerAttributes { get; }
    public CSSStyleDeclaration Style { get; public set; }
    public IAttributeCollection Attributes { get; }
    public string ClassName { get; public set; }
    public string Id { get; public set; }
    public string NodeName { get; }
    public ushort NodeNameID { get; }
    public string Type { get; public set; }
    public string Name { get; public set; }
    public string DefaultValue { get; public set; }
    public string Value { get; public set; }
    public NodeType NodeType { get; }
    public IDomContainer ParentNode { get; internal set; }
    public bool HasAttributes { get; }
    public bool HasStyles { get; }
    protected bool HasStyleAttribute { get; }
    public bool HasClasses { get; }
    public bool IsIndexed { get; }
    public string OuterHTML { get; public set; }
    public bool InnerHtmlAllowed { get; }
    public bool InnerTextAllowed { get; }
    public bool ChildrenAllowed { get; }
    public string Item { get; public set; }
    public bool Checked { get; public set; }
    public bool ReadOnly { get; public set; }
    public string InnerHTML { get; public set; }
    public string TextContent { get; public set; }
    public string InnerText { get; public set; }
    public int ElementIndex { get; }
    public IDomObject IndexReference { get; }
    public bool IsBlock { get; }
    public IEnumerable`1<string> Classes { get; }
    private string CsQuery.IAttributeCollection.Item { get; private set; }
    private int CsQuery.IAttributeCollection.Length { get; }
    protected DomElement(ushort tokenId);
    protected AttributeCollection get_InnerAttributes();
    protected void set_InnerAttributes(AttributeCollection value);
    public bool get_HasInnerAttributes();
    public static DomElement Create(string nodeName);
    internal static DomElement Create(ushort nodeNameId);
    public virtual CSSStyleDeclaration get_Style();
    public virtual void set_Style(CSSStyleDeclaration value);
    private void SetStyle(CSSStyleDeclaration style);
    private void _Style_OnHasStylesChanged(object sender, CSSStyleChangedArgs e);
    private void StyleAttributeIndexChanged();
    public virtual IAttributeCollection get_Attributes();
    public virtual string get_ClassName();
    public virtual void set_ClassName(string value);
    public virtual string get_Id();
    public virtual void set_Id(string value);
    public virtual string get_NodeName();
    public virtual ushort get_NodeNameID();
    public virtual string get_Type();
    public virtual void set_Type(string value);
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public virtual string get_DefaultValue();
    public virtual void set_DefaultValue(string value);
    public virtual string get_Value();
    public virtual void set_Value(string value);
    public virtual NodeType get_NodeType();
    public virtual IDomContainer get_ParentNode();
    internal virtual void set_ParentNode(IDomContainer value);
    public virtual bool get_HasAttributes();
    public virtual bool get_HasStyles();
    protected bool get_HasStyleAttribute();
    public virtual bool get_HasClasses();
    public virtual bool get_IsIndexed();
    public virtual string get_OuterHTML();
    public virtual void set_OuterHTML(string value);
    public virtual bool get_InnerHtmlAllowed();
    public virtual bool get_InnerTextAllowed();
    public virtual bool get_ChildrenAllowed();
    public virtual string get_Item(string attribute);
    public virtual void set_Item(string attribute, string value);
    public virtual bool get_Checked();
    public virtual void set_Checked(bool value);
    public virtual bool get_ReadOnly();
    public virtual void set_ReadOnly(bool value);
    public virtual string get_InnerHTML();
    public virtual void set_InnerHTML(string value);
    public virtual string get_TextContent();
    public virtual void set_TextContent(string value);
    public virtual string get_InnerText();
    public virtual void set_InnerText(string value);
    public virtual int get_ElementIndex();
    public virtual IDomObject get_IndexReference();
    public virtual bool get_IsBlock();
    public virtual IEnumerable`1<string> get_Classes();
    public virtual string ElementHtml();
    public virtual IEnumerable`1<UInt16[]> IndexKeys();
    public virtual DomElement Clone();
    public virtual IEnumerable`1<IDomObject> CloneChildren();
    public virtual bool HasStyle(string name);
    public virtual bool HasClass(string name);
    public virtual bool AddClass(string name);
    public virtual bool RemoveClass(string name);
    public virtual bool HasAttribute(string name);
    public virtual void SetAttribute(string name, string value);
    protected void SetAttribute(ushort tokenId, string value);
    public virtual void SetAttribute(string name);
    public void SetAttribute(ushort tokenId);
    protected void SetAttributeRaw(ushort tokenId, string value);
    public virtual bool RemoveAttribute(string name);
    public bool RemoveAttribute(ushort tokenId);
    public virtual string GetAttribute(string name);
    internal string GetAttribute(ushort tokenId);
    public virtual string GetAttribute(string name, string defaultValue);
    internal string GetAttribute(ushort tokenId, string defaultValue);
    public bool TryGetAttribute(ushort tokenId, String& value);
    public virtual bool TryGetAttribute(string name, String& value);
    public virtual string ToString();
    public virtual void AddStyle(string style);
    public virtual void AddStyle(string style, bool strict);
    public virtual bool RemoveStyle(string name);
    public void SetStyles(string styles);
    public void SetStyles(string styles, bool strict);
    private bool isWhitespace(string what);
    private IEnumerable`1<string> GetTextContent(IEnumerable`1<IDomObject> nodes);
    private IEnumerable`1<string> GetInnerText(IEnumerable`1<IDomObject> nodes);
    private void AddOwnText_TextContent(List`1<string> list, IDomObject obj);
    private void AddOwnText_InnerText(List`1<string> list, IDomObject obj);
    private void SetNodeName(string nodeName);
    private UInt16[] ClassIndexKey(ushort classID);
    private UInt16[] IDIndexKey(string id);
    protected UInt16[] AttributeIndexKey(string attrName);
    protected UInt16[] AttributeIndexKey(ushort attrId);
    protected void AttributeRemoveFromIndex(ushort attrId);
    protected void AttributeAddToIndex(ushort attrId);
    protected void SetClassName(string className);
    protected bool hasDefaultValue();
    internal IEnumerable`1<IDomElement> DescendantElements();
    internal bool HasAttribute(ushort tokenId);
    internal virtual bool TryGetAttributeForMatching(ushort attributeId, String& value);
    internal IDomElement Closest(ushort tagID);
    internal void SetProp(ushort tagId, bool value);
    internal void SetProp(string tagName, bool value);
    internal IEnumerable`1<T> ChildElementsOfTag(ushort nodeNameId);
    private IEnumerable`1<T> ChildElementsOfTag(IDomElement parent, ushort nodeNameId);
    private sealed virtual override string CsQuery.IAttributeCollection.get_Item(string attributeName);
    private sealed virtual override void CsQuery.IAttributeCollection.set_Item(string attributeName, string value);
    private sealed virtual override int CsQuery.IAttributeCollection.get_Length();
    private sealed virtual override IEnumerator`1<KeyValuePair`2<string, string>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.String>>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    protected IEnumerable`1<KeyValuePair`2<string, string>> AttributesCollection();
    protected virtual IEnumerable`1<ushort> IndexAttributesTokens();
}
public class CsQuery.Implementation.DomFragment : DomDocument {
    public NodeType NodeType { get; }
    public bool IsIndexed { get; }
    public bool IsFragment { get; }
    public DomFragment(IDomIndex domIndex);
    public static IDomDocument Create(string html, string context, DocType docType);
    public virtual NodeType get_NodeType();
    public virtual bool get_IsIndexed();
    public virtual bool get_IsFragment();
    public virtual IDomDocument CreateNew();
}
[DefaultMemberAttribute("Item")]
public abstract class CsQuery.Implementation.DomObject : object {
    private IDomDocument _Document;
    private DomObject _ParentNode;
    protected DocumentInfo DocInfo;
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    public NodeType NodeType { get; }
    public bool HasChildren { get; }
    public bool InnerHtmlAllowed { get; }
    public ushort NodeNameID { get; }
    public bool InnerTextAllowed { get; }
    public bool ChildrenAllowed { get; }
    public bool IsIndexed { get; }
    public UInt16[] NodePath { get; }
    [ObsoleteAttribute]
public string Path { get; }
    public IDomDocument Document { get; }
    public string InnerText { get; public set; }
    public string TextContent { get; public set; }
    public string InnerHTML { get; public set; }
    public string OuterHTML { get; public set; }
    public INodeList ChildNodes { get; }
    public IDomContainer ParentNode { get; internal set; }
    public bool IsFragment { get; }
    public bool IsDisconnected { get; }
    [ObsoleteAttribute]
public char PathID { get; }
    public int Depth { get; }
    public IEnumerable`1<IDomElement> ChildElements { get; }
    public int Index { get; internal set; }
    public ushort NodePathID { get; }
    public string DefaultValue { get; public set; }
    public string NodeValue { get; public set; }
    public string Type { get; public set; }
    public string Name { get; public set; }
    public string Id { get; public set; }
    public string Value { get; public set; }
    public string ClassName { get; public set; }
    public IEnumerable`1<string> Classes { get; }
    public IAttributeCollection Attributes { get; protected set; }
    public CSSStyleDeclaration Style { get; public set; }
    public string NodeName { get; }
    public IDomObject FirstChild { get; }
    public IDomObject LastChild { get; }
    public IDomElement FirstElementChild { get; }
    public IDomElement LastElementChild { get; }
    public bool HasAttributes { get; }
    public bool HasClasses { get; }
    public bool HasStyles { get; }
    public bool Checked { get; public set; }
    public bool ReadOnly { get; public set; }
    public IDomObject NextSibling { get; }
    public IDomObject PreviousSibling { get; }
    public IDomElement NextElementSibling { get; }
    public IDomElement PreviousElementSibling { get; }
    public IDomObject Item { get; }
    public string Item { get; public set; }
    public int ElementIndex { get; }
    public bool IsBlock { get; }
    public IDomObject IndexReference { get; }
    public bool Selected { get; public set; }
    protected abstract virtual IDomObject CloneImplementation();
    public abstract virtual NodeType get_NodeType();
    public abstract virtual bool get_HasChildren();
    public abstract virtual bool get_InnerHtmlAllowed();
    public virtual ushort get_NodeNameID();
    public virtual bool get_InnerTextAllowed();
    public virtual bool get_ChildrenAllowed();
    public virtual bool get_IsIndexed();
    public virtual UInt16[] get_NodePath();
    public virtual string get_Path();
    protected virtual UInt16[] GetPath_UnOptimized();
    protected virtual UInt16[] GetPath();
    public virtual IDomDocument get_Document();
    public virtual string get_InnerText();
    public virtual void set_InnerText(string value);
    public virtual string get_TextContent();
    public virtual void set_TextContent(string value);
    public virtual string get_InnerHTML();
    public virtual void set_InnerHTML(string value);
    public virtual string get_OuterHTML();
    public virtual void set_OuterHTML(string value);
    public virtual INodeList get_ChildNodes();
    public virtual IDomContainer get_ParentNode();
    internal virtual void set_ParentNode(IDomContainer value);
    public virtual bool get_IsFragment();
    public virtual bool get_IsDisconnected();
    public virtual char get_PathID();
    public virtual int get_Depth();
    protected int GetDepth();
    public virtual IEnumerable`1<IDomElement> get_ChildElements();
    [CompilerGeneratedAttribute]
public sealed virtual int get_Index();
    [CompilerGeneratedAttribute]
internal void set_Index(int value);
    public sealed virtual ushort get_NodePathID();
    public virtual string get_DefaultValue();
    public virtual void set_DefaultValue(string value);
    public virtual string get_NodeValue();
    public virtual void set_NodeValue(string value);
    public virtual string get_Type();
    public virtual void set_Type(string value);
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public virtual string get_Id();
    public virtual void set_Id(string value);
    public virtual string get_Value();
    public virtual void set_Value(string value);
    public virtual string get_ClassName();
    public virtual void set_ClassName(string value);
    public virtual IEnumerable`1<string> get_Classes();
    public virtual IAttributeCollection get_Attributes();
    protected virtual void set_Attributes(IAttributeCollection value);
    public virtual CSSStyleDeclaration get_Style();
    public virtual void set_Style(CSSStyleDeclaration value);
    public virtual string get_NodeName();
    public virtual IDomObject get_FirstChild();
    public virtual IDomObject get_LastChild();
    public virtual IDomElement get_FirstElementChild();
    public virtual IDomElement get_LastElementChild();
    public virtual bool get_HasAttributes();
    public virtual bool get_HasClasses();
    public virtual bool get_HasStyles();
    public virtual bool get_Checked();
    public virtual void set_Checked(bool value);
    public virtual bool get_ReadOnly();
    public virtual void set_ReadOnly(bool value);
    public sealed virtual IDomObject get_NextSibling();
    public sealed virtual IDomObject get_PreviousSibling();
    public sealed virtual IDomElement get_NextElementSibling();
    public sealed virtual IDomElement get_PreviousElementSibling();
    public virtual IDomObject get_Item(int index);
    public virtual string get_Item(string attribute);
    public virtual void set_Item(string attribute, string value);
    public virtual string Render();
    public virtual void Render(IOutputFormatter formatter, TextWriter writer);
    public virtual string Render(IOutputFormatter formatter);
    public virtual string Render(DomRenderingOptions options);
    [ObsoleteAttribute]
public virtual void Render(StringBuilder sb);
    [ObsoleteAttribute]
public virtual void Render(StringBuilder sb, DomRenderingOptions options);
    public sealed virtual CQ Cq();
    public virtual IDomObject Clone();
    public virtual void Remove();
    public virtual int DescendantCount();
    public virtual void AppendChild(IDomObject element);
    internal virtual void AppendChildUnsafe(IDomObject element);
    public virtual void RemoveChild(IDomObject element);
    public virtual void InsertBefore(IDomObject newNode, IDomObject referenceNode);
    public virtual void InsertAfter(IDomObject newNode, IDomObject referenceNode);
    public virtual void SetAttribute(string name);
    public virtual void SetAttribute(string name, string value);
    public virtual string GetAttribute(string name);
    public virtual string GetAttribute(string name, string defaultValue);
    public virtual bool TryGetAttribute(string name, String& value);
    public virtual bool HasAttribute(string name);
    public virtual bool RemoveAttribute(string name);
    public virtual bool HasClass(string className);
    public virtual bool AddClass(string className);
    public virtual bool RemoveClass(string className);
    public virtual bool HasStyle(string styleName);
    public virtual void AddStyle(string styleString);
    public virtual void AddStyle(string styleString, bool strict);
    public virtual bool RemoveStyle(string name);
    public virtual string ToString();
    public virtual int get_ElementIndex();
    public virtual IEnumerable`1<IDomObject> CloneChildren();
    public virtual string ElementHtml();
    public virtual bool get_IsBlock();
    public virtual IEnumerable`1<UInt16[]> IndexKeysRanged();
    public virtual IEnumerable`1<UInt16[]> IndexKeys();
    public virtual IDomObject get_IndexReference();
    public virtual bool get_Selected();
    public virtual void set_Selected(bool value);
    protected void UpdateDocumentFlags();
    protected void UpdateDocumentFlags(IDomDocument document);
    private void SetDocFlags();
    private sealed virtual override IDomNode CsQuery.IDomNode.Clone();
    private sealed virtual override object System.ICloneable.Clone();
    public sealed virtual int CompareTo(IDomObject other);
}
public abstract class CsQuery.Implementation.DomObject`1 : DomObject {
    public abstract virtual T Clone();
    protected virtual IDomObject CloneImplementation();
    private sealed virtual override IDomNode CsQuery.IDomNode.Clone();
    private sealed virtual override object System.ICloneable.Clone();
}
public class CsQuery.Implementation.DomText : DomObject`1<DomText> {
    protected string _NodeValue;
    public string NodeName { get; }
    public NodeType NodeType { get; }
    public string NodeValue { get; public set; }
    public bool InnerHtmlAllowed { get; }
    public bool HasChildren { get; }
    public DomText(string nodeValue);
    public virtual string get_NodeName();
    public virtual NodeType get_NodeType();
    public virtual string get_NodeValue();
    public virtual void set_NodeValue(string value);
    public virtual DomText Clone();
    public virtual bool get_InnerHtmlAllowed();
    public virtual bool get_HasChildren();
    public virtual string ToString();
}
public class CsQuery.Implementation.HtmlAnchorElement : DomElement {
    public string Target { get; public set; }
    public string Href { get; public set; }
    public RelAnchor Rel { get; public set; }
    public string Hreflang { get; public set; }
    public string Media { get; public set; }
    public sealed virtual string get_Target();
    public sealed virtual void set_Target(string value);
    public sealed virtual string get_Href();
    public sealed virtual void set_Href(string value);
    public sealed virtual RelAnchor get_Rel();
    public sealed virtual void set_Rel(RelAnchor value);
    public sealed virtual string get_Hreflang();
    public sealed virtual void set_Hreflang(string value);
    public sealed virtual string get_Media();
    public sealed virtual void set_Media(string value);
}
[DefaultMemberAttribute("Indexer")]
public class CsQuery.Implementation.HtmlFormElement : DomElement {
    public string Target { get; public set; }
    public string AcceptCharset { get; public set; }
    public string Action { get; public set; }
    public string Autocomplete { get; public set; }
    public string Enctype { get; public set; }
    public string Encoding { get; public set; }
    public string Method { get; public set; }
    public bool NoValidate { get; public set; }
    public INodeList`1<IDomElement> Elements { get; }
    public int Length { get; }
    public IDomElement Indexer { get; }
    private int CsQuery.Implementation.IReadOnlyCollection<CsQuery.IDomElement>.Count { get; }
    public sealed virtual string get_Target();
    public sealed virtual void set_Target(string value);
    public sealed virtual string get_AcceptCharset();
    public sealed virtual void set_AcceptCharset(string value);
    public sealed virtual string get_Action();
    public sealed virtual void set_Action(string value);
    public sealed virtual string get_Autocomplete();
    public sealed virtual void set_Autocomplete(string value);
    public sealed virtual string get_Enctype();
    public sealed virtual void set_Enctype(string value);
    public sealed virtual string get_Encoding();
    public sealed virtual void set_Encoding(string value);
    public sealed virtual string get_Method();
    public sealed virtual void set_Method(string value);
    public sealed virtual bool get_NoValidate();
    public sealed virtual void set_NoValidate(bool value);
    public sealed virtual INodeList`1<IDomElement> get_Elements();
    public sealed virtual IList`1<IDomElement> ToList();
    public sealed virtual int get_Length();
    public sealed virtual IDomElement Item(int index);
    public IDomElement get_Indexer(int index);
    public sealed virtual IEnumerator`1<IDomElement> GetEnumerator();
    private sealed virtual override int CsQuery.Implementation.IReadOnlyCollection<CsQuery.IDomElement>.get_Count();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override IDomElement CsQuery.Implementation.IReadOnlyList<CsQuery.IDomElement>.get_Item(int );
}
public class CsQuery.Implementation.HTMLInputElement : DomElement {
    public IDomElement Form { get; }
    public bool Autofocus { get; public set; }
    public bool Required { get; public set; }
    public string Type { get; public set; }
    public bool HasChildren { get; }
    public sealed virtual IDomElement get_Form();
    public sealed virtual bool get_Autofocus();
    public sealed virtual void set_Autofocus(bool value);
    public sealed virtual bool get_Required();
    public sealed virtual void set_Required(bool value);
    public virtual string get_Type();
    public virtual void set_Type(string value);
    public virtual IEnumerable`1<UInt16[]> IndexKeysRanged();
    public virtual bool get_HasChildren();
}
public class CsQuery.Implementation.HTMLLabelElement : DomElement {
    public IHTMLFormElement Form { get; }
    public string HtmlFor { get; public set; }
    public IDomElement Control { get; }
    public sealed virtual IHTMLFormElement get_Form();
    public sealed virtual string get_HtmlFor();
    public sealed virtual void set_HtmlFor(string value);
    public sealed virtual IDomElement get_Control();
}
public class CsQuery.Implementation.HTMLLIElement : DomElement {
    public int Value { get; public set; }
    public sealed virtual int get_Value();
    public sealed virtual void set_Value(int value);
}
public class CsQuery.Implementation.HTMLMeterElement : DomElement {
    public int Value { get; public set; }
    public double Max { get; public set; }
    public double Min { get; public set; }
    public double Low { get; public set; }
    public double High { get; public set; }
    public double Optimum { get; public set; }
    public INodeList`1<IDomElement> Labels { get; }
    public sealed virtual int get_Value();
    public sealed virtual void set_Value(int value);
    public sealed virtual double get_Max();
    public sealed virtual void set_Max(double value);
    public sealed virtual double get_Min();
    public sealed virtual void set_Min(double value);
    public sealed virtual double get_Low();
    public sealed virtual void set_Low(double value);
    public sealed virtual double get_High();
    public sealed virtual void set_High(double value);
    public sealed virtual double get_Optimum();
    public sealed virtual void set_Optimum(double value);
    public sealed virtual INodeList`1<IDomElement> get_Labels();
}
public class CsQuery.Implementation.HTMLOptionElement : DomElement {
    public string Value { get; public set; }
    public bool Disabled { get; public set; }
    public IDomElement Form { get; }
    public string Label { get; public set; }
    public bool Selected { get; public set; }
    public virtual string get_Value();
    public virtual void set_Value(string value);
    public sealed virtual bool get_Disabled();
    public sealed virtual void set_Disabled(bool value);
    public sealed virtual IDomElement get_Form();
    public sealed virtual string get_Label();
    public sealed virtual void set_Label(string value);
    public virtual bool get_Selected();
    public virtual void set_Selected(bool value);
    private IDomElement OptionOwner();
    private HTMLOptionsCollection OwnerSelectOptions();
    private HTMLOptionsCollection OwnerSelectOptions(IDomElement owner);
}
[DefaultMemberAttribute("Indexer")]
public class CsQuery.Implementation.HTMLOptionsCollection : object {
    [CompilerGeneratedAttribute]
private IHTMLSelectElement <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<OptionElement, bool> CS$<>9__CachedAnonymousMethodDelegate8;
    [CompilerGeneratedAttribute]
private static Func`2<OptionElement, bool> CS$<>9__CachedAnonymousMethodDelegate9;
    [CompilerGeneratedAttribute]
private static Func`2<OptionElement, DomElement> CS$<>9__CachedAnonymousMethodDelegatee;
    public IHTMLSelectElement Parent { get; protected set; }
    public IDomElement Indexer { get; }
    public IDomElement Indexer { get; }
    internal int SelectedIndex { get; internal set; }
    internal IDomElement SelectedItem { get; internal set; }
    public HTMLOptionsCollection(IDomElement parent);
    [CompilerGeneratedAttribute]
public IHTMLSelectElement get_Parent();
    [CompilerGeneratedAttribute]
protected void set_Parent(IHTMLSelectElement value);
    public sealed virtual IDomElement Item(int index);
    public sealed virtual IDomElement get_Indexer(int index);
    public sealed virtual IDomElement NamedItem(string name);
    public sealed virtual IDomElement get_Indexer(string name);
    internal int get_SelectedIndex();
    internal void set_SelectedIndex(int value);
    private int GetSelectedItem(OptionElement& el);
    internal IDomElement get_SelectedItem();
    internal void set_SelectedItem(IDomElement value);
    public sealed virtual IEnumerator`1<IDomObject> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    protected IEnumerable`1<DomElement> Children();
    private IEnumerable`1<OptionElement> Children(IDomElement parent);
    private IEnumerable`1<OptionElement> Children(IDomElement parent, bool disabled);
    [CompilerGeneratedAttribute]
private static bool <GetSelectedItem>b__6(OptionElement item);
    [CompilerGeneratedAttribute]
private static bool <GetSelectedItem>b__7(OptionElement item);
    [CompilerGeneratedAttribute]
private static DomElement <Children>b__d(OptionElement item);
}
public class CsQuery.Implementation.HTMLProgressElement : DomElement {
    public int Value { get; public set; }
    public double Max { get; public set; }
    public double Position { get; }
    public INodeList`1<IHTMLLabelElement> Labels { get; }
    public sealed virtual int get_Value();
    public sealed virtual void set_Value(int value);
    public sealed virtual double get_Max();
    public sealed virtual void set_Max(double value);
    public sealed virtual double get_Position();
    public sealed virtual INodeList`1<IHTMLLabelElement> get_Labels();
}
public class CsQuery.Implementation.HTMLScriptElement : DomElement {
}
public class CsQuery.Implementation.HTMLSelectElement : DomElement {
    public IHTMLOptionsCollection Options { get; }
    public int Length { get; }
    public string Type { get; public set; }
    public bool Multiple { get; public set; }
    public int SelectedIndex { get; public set; }
    public IDomElement SelectedItem { get; public set; }
    public string Value { get; public set; }
    public sealed virtual IHTMLOptionsCollection get_Options();
    public sealed virtual int get_Length();
    public virtual string get_Type();
    public virtual void set_Type(string value);
    private HTMLOptionsCollection SelectOptions();
    public sealed virtual bool get_Multiple();
    public sealed virtual void set_Multiple(bool value);
    public sealed virtual int get_SelectedIndex();
    public sealed virtual void set_SelectedIndex(int value);
    public sealed virtual IDomElement get_SelectedItem();
    public sealed virtual void set_SelectedItem(IDomElement value);
    public virtual string get_Value();
    public virtual void set_Value(string value);
}
public class CsQuery.Implementation.HTMLStyleElement : DomElement {
}
public class CsQuery.Implementation.HTMLTextAreaElement : DomElement {
    public string Value { get; public set; }
    public string InnerText { get; public set; }
    public virtual string get_Value();
    public virtual void set_Value(string value);
    public string get_InnerText();
    public void set_InnerText(string value);
}
internal interface CsQuery.Implementation.IRangeSortedDictionary`2 {
    public abstract virtual IEnumerable`1<TKey[]> GetRangeKeys(TKey[] subKey);
    public abstract virtual IEnumerable`1<TValue> GetRange(TKey[] subKey);
}
public interface CsQuery.Implementation.IReadOnlyCollection`1 {
    public int Count { get; }
    public abstract virtual int get_Count();
}
[DefaultMemberAttribute("Item")]
public interface CsQuery.Implementation.IReadOnlyList`1 {
    public T Item { get; }
    public abstract virtual T get_Item(int index);
}
public class CsQuery.Implementation.NodeEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private IDomObject <Node>k__BackingField;
    public IDomObject Node { get; protected set; }
    public NodeEventArgs(IDomObject node);
    [CompilerGeneratedAttribute]
public IDomObject get_Node();
    [CompilerGeneratedAttribute]
protected void set_Node(IDomObject value);
}
[DefaultMemberAttribute("Indexer")]
public class CsQuery.Implementation.NodeList`1 : object {
    protected IList`1<T> InnerList;
    [CompilerGeneratedAttribute]
private bool <IsReadOnly>k__BackingField;
    public int Length { get; }
    public T Indexer { get; public set; }
    public int Count { get; }
    public bool IsReadOnly { get; protected set; }
    public NodeList`1(IList`1<T> list);
    public NodeList`1(IEnumerable`1<T> sequence);
    public sealed virtual int get_Length();
    public sealed virtual T Item(int index);
    public int IndexOf(T item);
    public void Insert(int index, T item);
    public void RemoveAt(int index);
    public T get_Indexer(int index);
    public void set_Indexer(int index, T value);
    public void Add(T item);
    public void Clear();
    public bool Contains(T item);
    public void CopyTo(T[] array, int arrayIndex);
    public sealed virtual int get_Count();
    [CompilerGeneratedAttribute]
public bool get_IsReadOnly();
    [CompilerGeneratedAttribute]
protected void set_IsReadOnly(bool value);
    public bool Remove(T item);
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual IList`1<T> ToList();
    private sealed virtual override T CsQuery.Implementation.IReadOnlyList<T>.get_Item(int );
}
public class CsQuery.Implementation.PathKeyComparer : object {
    private static PathKeyComparer _Comparer;
    public static PathKeyComparer Comparer { get; }
    private static PathKeyComparer();
    public static PathKeyComparer get_Comparer();
    public sealed virtual int Compare(UInt16[] x, UInt16[] y);
    protected bool CompareEqualLength(UInt16[] x, UInt16[] y);
    public sealed virtual bool Equals(UInt16[] x, UInt16[] y);
    public sealed virtual int GetHashCode(UInt16[] obj);
}
[DefaultMemberAttribute("Item")]
public class CsQuery.Implementation.RangeSortedDictionary`2 : object {
    private TKey IndexSeparator;
    protected SortedSet`1<TKey[]> Keys;
    protected IDictionary`2<TKey[], TValue> Index;
    public IEnumerable`1<string> KeysAudit { get; }
    private ICollection`1<TKey[]> System.Collections.Generic.IDictionary<TKey[],TValue>.Keys { get; }
    public ICollection`1<TValue> Values { get; }
    public TValue Item { get; public set; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public RangeSortedDictionary`2(IComparer`1<TKey[]> setComparer, IEqualityComparer`1<TKey[]> equalityComparer, TKey indexSeparator);
    public IEnumerable`1<string> get_KeysAudit();
    public static string HumanReadableKey(object indexKeyArray, object indexSeparator);
    public static string HumanReadableKey(object indexKey);
    public sealed virtual IEnumerable`1<TKey[]> GetRangeKeys(TKey[] subkey);
    public IEnumerable`1<TValue> GetRange(TKey[] subKey, int depth, bool descendants);
    public sealed virtual IEnumerable`1<TValue> GetRange(TKey[] subKey);
    public sealed virtual void Add(TKey[] key, TValue value);
    public sealed virtual bool ContainsKey(TKey[] key);
    private sealed virtual override ICollection`1<TKey[]> System.Collections.Generic.IDictionary<TKey[],TValue>.get_Keys();
    public sealed virtual bool Remove(TKey[] key);
    public sealed virtual bool TryGetValue(TKey[] key, TValue& value);
    public sealed virtual ICollection`1<TValue> get_Values();
    public sealed virtual TValue get_Item(TKey[] key);
    public sealed virtual void set_Item(TKey[] key, TValue value);
    public sealed virtual void Add(KeyValuePair`2<TKey[], TValue> item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(KeyValuePair`2<TKey[], TValue> item);
    public sealed virtual void CopyTo(KeyValuePair`2[] array, int arrayIndex);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool Remove(KeyValuePair`2<TKey[], TValue> item);
    public sealed virtual IEnumerator`1<KeyValuePair`2<TKey[], TValue>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[DefaultMemberAttribute("Item")]
public class CsQuery.Implementation.SelectionSet`1 : object {
    private bool _IsDirty;
    private SelectionSetOrder OriginalOrder;
    private IEnumerable`1<T> OriginalList;
    private IEnumerable`1<T> _OrderedList;
    private HashSet`1<T> _MutableList;
    private List`1<T> _MutableListOrdered;
    [CompilerGeneratedAttribute]
private SelectionSetOrder <OutputOrder>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<T, UInt16[]> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Func`2<T, UInt16[]> CS$<>9__CachedAnonymousMethodDelegate3;
    protected HashSet`1<T> MutableList { get; }
    private List`1<T> MutableListOrdered { get; }
    protected IEnumerable`1<T> OrderedList { get; }
    protected bool IsDirty { get; }
    protected bool IsAltered { get; }
    public SelectionSetOrder OutputOrder { get; public set; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public T Item { get; public set; }
    public SelectionSet`1(SelectionSetOrder outputOrder);
    public SelectionSet`1(IEnumerable`1<T> elements, SelectionSetOrder inputOrder, SelectionSetOrder outputOrder);
    protected HashSet`1<T> get_MutableList();
    private List`1<T> get_MutableListOrdered();
    protected IEnumerable`1<T> get_OrderedList();
    protected bool get_IsDirty();
    protected bool get_IsAltered();
    [CompilerGeneratedAttribute]
public SelectionSetOrder get_OutputOrder();
    [CompilerGeneratedAttribute]
public void set_OutputOrder(SelectionSetOrder value);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool Add(T item);
    public sealed virtual void Clear();
    public SelectionSet`1<T> Clone();
    protected IEnumerable`1<T> CloneImpl();
    public sealed virtual bool Contains(T item);
    public sealed virtual void CopyTo(T[] array, int arrayIndex);
    public sealed virtual bool Remove(T item);
    public sealed virtual void ExceptWith(IEnumerable`1<T> other);
    public sealed virtual void IntersectWith(IEnumerable`1<T> other);
    public sealed virtual bool IsProperSubsetOf(IEnumerable`1<T> other);
    public sealed virtual bool IsProperSupersetOf(IEnumerable`1<T> other);
    public sealed virtual bool IsSubsetOf(IEnumerable`1<T> other);
    public sealed virtual bool IsSupersetOf(IEnumerable`1<T> other);
    public sealed virtual bool Overlaps(IEnumerable`1<T> other);
    public sealed virtual bool SetEquals(IEnumerable`1<T> other);
    public sealed virtual void SymmetricExceptWith(IEnumerable`1<T> other);
    public sealed virtual void UnionWith(IEnumerable`1<T> other);
    public sealed virtual int IndexOf(T item);
    public sealed virtual void Insert(int index, T item);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual T get_Item(int index);
    public sealed virtual void set_Item(int index, T value);
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private void ConvertToMutable();
    private IEnumerable`1<T> EmptyList();
    private void Touch();
    private void Clean();
    private void SynchronizeOrderedList();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override void System.Collections.Generic.ICollection<T>.Add(T item);
    [CompilerGeneratedAttribute]
private static UInt16[] <get_OrderedList>b__0(T item);
    [CompilerGeneratedAttribute]
private static UInt16[] <get_OrderedList>b__1(T item);
}
public class CsQuery.Implementation.SelectionSetComparer : object {
    private SelectionSetOrder Order;
    public SelectionSetComparer(SelectionSetOrder order);
    public sealed virtual int Compare(IDomObject x, IDomObject y);
}
public enum CsQuery.Implementation.SelectionSetOrder : Enum {
    public int value__;
    public static SelectionSetOrder OrderAdded;
    public static SelectionSetOrder Ascending;
    public static SelectionSetOrder Descending;
}
internal class CsQuery.Implementation.StyleSheet : object {
}
public interface CsQuery.INodeList {
    public int Length { get; }
    public abstract virtual int get_Length();
    public abstract virtual IDomObject Item(int index);
    public abstract virtual void add_OnChanged(EventHandler`1<NodeEventArgs> value);
    public abstract virtual void remove_OnChanged(EventHandler`1<NodeEventArgs> value);
}
public interface CsQuery.INodeList`1 {
    public int Length { get; }
    public abstract virtual int get_Length();
    public abstract virtual T Item(int index);
    public abstract virtual IList`1<T> ToList();
}
[DefaultMemberAttribute("Item")]
public class CsQuery.JsObject : DynamicObject {
    [CompilerGeneratedAttribute]
private bool <AllowMissingProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private object <MissingPropertyValue>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreCase>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <InnerProperties>k__BackingField;
    protected bool AllowMissingProperties { get; protected set; }
    protected object MissingPropertyValue { get; protected set; }
    public bool IgnoreCase { get; public set; }
    protected IDictionary`2<string, object> InnerProperties { get; protected set; }
    public object Item { get; public set; }
    private ICollection`1<string> System.Collections.Generic.IDictionary<System.String,System.Object>.Keys { get; }
    private ICollection`1<object> System.Collections.Generic.IDictionary<System.String,System.Object>.Values { get; }
    private int System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Count { get; }
    private bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.IsReadOnly { get; }
    public JsObject(StringComparer comparer, object missingPropertyValue);
    protected void Initialize(StringComparer comparer, object missingPropertyValue);
    public virtual string ToString();
    public IEnumerable`1<T> Enumerate();
    [CompilerGeneratedAttribute]
protected bool get_AllowMissingProperties();
    [CompilerGeneratedAttribute]
protected void set_AllowMissingProperties(bool value);
    [CompilerGeneratedAttribute]
protected object get_MissingPropertyValue();
    [CompilerGeneratedAttribute]
protected void set_MissingPropertyValue(object value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreCase();
    [CompilerGeneratedAttribute]
public void set_IgnoreCase(bool value);
    [CompilerGeneratedAttribute]
protected IDictionary`2<string, object> get_InnerProperties();
    [CompilerGeneratedAttribute]
protected void set_InnerProperties(IDictionary`2<string, object> value);
    public sealed virtual object get_Item(string name);
    public sealed virtual void set_Item(string name, object value);
    public T Get(string name);
    public IEnumerable`1<T> GetList(string name);
    public object Get(string name);
    public virtual bool TryGetMember(GetMemberBinder binder, Object& result);
    protected bool TryGetMember(string name, Type type, Object& result);
    public virtual bool TrySetMember(SetMemberBinder binder, object value);
    protected bool TrySetMember(string name, object value);
    public bool HasProperty(string name);
    public bool Delete(string name);
    protected JsObject ToJsObject(IDictionary`2<string, object> value);
    public virtual IEnumerable`1<string> GetDynamicMemberNames();
    public IEnumerator`1<KeyValuePair`2<string, object>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override void System.Collections.Generic.IDictionary<System.String,System.Object>.Add(string key, object value);
    private sealed virtual override bool System.Collections.Generic.IDictionary<System.String,System.Object>.ContainsKey(string key);
    private sealed virtual override ICollection`1<string> System.Collections.Generic.IDictionary<System.String,System.Object>.get_Keys();
    private sealed virtual override bool System.Collections.Generic.IDictionary<System.String,System.Object>.Remove(string key);
    private sealed virtual override bool System.Collections.Generic.IDictionary<System.String,System.Object>.TryGetValue(string key, Object& value);
    private sealed virtual override ICollection`1<object> System.Collections.Generic.IDictionary<System.String,System.Object>.get_Values();
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Add(KeyValuePair`2<string, object> item);
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Clear();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Contains(KeyValuePair`2<string, object> item);
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.CopyTo(KeyValuePair`2[] array, int arrayIndex);
    private sealed virtual override int System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.get_Count();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.get_IsReadOnly();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Remove(KeyValuePair`2<string, object> item);
    private sealed virtual override IEnumerator`1<KeyValuePair`2<string, object>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.GetEnumerator();
}
public enum CsQuery.NodeType : Enum {
    public byte value__;
    public static NodeType ELEMENT_NODE;
    public static NodeType TEXT_NODE;
    public static NodeType CDATA_SECTION_NODE;
    public static NodeType COMMENT_NODE;
    public static NodeType DOCUMENT_NODE;
    public static NodeType DOCUMENT_TYPE_NODE;
    public static NodeType DOCUMENT_FRAGMENT_NODE;
}
public class CsQuery.NoDomIndexProvider : object {
    public sealed virtual IDomIndex GetDomIndex();
}
public static class CsQuery.Objects : object {
    private static HashSet`1<string> IgnorePropertyNames;
    private static Objects();
    public static bool IsNullableType(Type type);
    public static bool IsJson(object obj);
    public static bool IsImmutable(object obj);
    public static bool IsExtendableType(object obj);
    public static bool IsTruthy(object obj);
    public static bool IsNumericType(Type type);
    public static bool IsNativeType(Type type);
    public static string Join(Array array);
    public static string Join(IEnumerable list);
    public static bool IsExpando(object obj);
    public static bool IsEmptyExpando(object obj);
    public static bool IsKeyValuePair(object obj);
    public static IConvertible Coerce(object value);
    public static T Convert(object value);
    public static object Convert(object value, Type type);
    public static T Convert(object value, T defaultValue);
    public static bool TryConvert(object value, T& typedValue);
    public static bool TryConvert(object value, Object& typedValue, Type type, object defaultValue);
    public static object ChangeType(object value, Type conversionType);
    public static bool TryParseNumber(string value, Object& number, Type T);
    public static IEnumerable`1<T> EnumerateProperties(object obj);
    public static IEnumerable`1<T> EnumerateProperties(object obj, IEnumerable`1<Type> ignoreAttributes);
    public static object DefaultValue(Type type);
    public static object CreateInstance(Type type);
    public static T CreateInstance();
    public static IEnumerable`1<T> Enumerate(T obj);
    public static IEnumerable`1<T> Enumerate(T[] obj);
    public static IEnumerable Enumerate(Object[] obj);
    public static IEnumerable`1<T> EmptyEnumerable();
    public static T Dict2Dynamic(IDictionary`2<string, object> obj);
    public static string Join(IEnumerable`1<string> list, string separator);
    private static IEnumerable`1<string> toStringList(IEnumerable source);
    private static object ParseValue(object value);
    private static object ConvertDeserializedValue(object value, bool convertDates);
    public static Type GetUnderlyingType(Type type);
    public static T Dict2Dynamic(IDictionary`2<string, object> obj, bool convertDates);
    public static object Extend(bool deep, object target, Object[] inputObjects);
    private static object ExtendImpl(HashSet`1<object> parents, bool deep, object target, Object[] inputObjects);
    public static JsObject ToExpando(object source);
    public static T ToExpando(object source);
    public static JsObject ToExpando(object source, bool deep);
    public static T ToExpando(object source, bool deep);
    public static T ToExpando(object source, bool deep, IEnumerable`1<Type> ignoreAttributes);
    public static object CloneObject(object obj);
    public static object CloneObject(object obj, bool deep);
    public static object DeleteProperty(object obj, string property);
    private static void AddExtendKVP(bool deep, HashSet`1<object> parents, object target, string name, object value);
    private static T ToNewExpando(object source, bool deep, IEnumerable`1<Type> ignoreAttributes);
    private static bool TryStringToBool(string value, Boolean& result);
    public static IDomText CreateTextNode(string text);
    public static IDomComment CreateComment(string comment);
    public static IDomDocument CreateDocument();
    public static IDomCData CreateCData(string data);
    public static IDomFragment CreateFragment();
}
public class CsQuery.Output.FormatDefault : object {
    private DomRenderingOptions DomRenderingOptions;
    private IHtmlEncoder HtmlEncoder;
    private Stack`1<NodeStackElement> _OutputStack;
    private bool IsXHTML;
    protected Stack`1<NodeStackElement> OutputStack { get; }
    public FormatDefault(DomRenderingOptions options, IHtmlEncoder encoder);
    protected Stack`1<NodeStackElement> get_OutputStack();
    public sealed virtual void Render(IDomObject node, TextWriter writer);
    public sealed virtual string Render(IDomObject node);
    public virtual void RenderElement(IDomObject element, TextWriter writer, bool includeChildren);
    public void RenderChildren(IDomObject element, TextWriter writer);
    private void RenderInternal(IDomObject node, TextWriter writer);
    private void RenderChildrenInternal(IDomObject element, TextWriter writer);
    protected virtual void RenderElementInternal(IDomObject element, TextWriter writer, bool includeChildren);
    protected virtual void EndElement(IDomObject element);
    protected void RenderStack(TextWriter writer);
    protected void RenderElements(IEnumerable`1<IDomObject> elements, TextWriter writer);
    protected virtual void RenderElementCloseTag(IDomObject element, TextWriter writer);
    protected virtual void ParseChildren(IDomObject element);
    protected virtual void RenderTextNode(IDomObject textNode, TextWriter writer, bool raw);
    protected void RenderCdataNode(IDomObject element, TextWriter writer);
    protected void RenderCommentNode(IDomObject element, TextWriter writer);
    protected void RenderDocTypeNode(IDomObject element, TextWriter writer);
    protected void RenderAttribute(TextWriter writer, string name, string value, bool quoteAll);
    protected void MergeDefaultOptions();
    protected void SetDocType(IDomObject element);
}
public class CsQuery.Output.FormatPlainText : object {
    private IStringInfo stringInfo;
    public sealed virtual void Render(IDomObject node, TextWriter writer);
    public sealed virtual string Render(IDomObject node);
    protected void AddContents(StringBuilder sb, IDomObject node, bool skipWhitespace);
    protected string ToStandardLineEndings(string text);
    protected void RemoveTrailingWhitespace(StringBuilder sb);
    protected string CleanFragment(string text);
}
public abstract class CsQuery.Output.HtmlEncoderBase : object {
    protected abstract virtual bool TryEncode(char c, String& encoded);
    protected abstract virtual bool TryEncodeAstralPlane(int c, String& encoded);
    public virtual void Encode(string html, TextWriter output);
}
public class CsQuery.Output.HtmlEncoderBasic : HtmlEncoderBase {
    protected virtual bool TryEncode(char c, String& encoded);
    protected virtual bool TryEncodeAstralPlane(int c, String& encoded);
    protected string EncodeNumeric(int value);
}
public class CsQuery.Output.HtmlEncoderFull : HtmlEncoderBasic {
    private static IDictionary`2<char, string> HtmlEntityMap;
    private static UInt16[] codedValues;
    private static String[] codedEntities;
    private static HtmlEncoderFull();
    private static void PopulateHtmlEntityMap();
    protected virtual bool TryEncode(char c, String& encoded);
}
public class CsQuery.Output.HtmlEncoderMinimum : HtmlEncoderBase {
    protected virtual bool TryEncode(char c, String& encoded);
    protected virtual bool TryEncodeAstralPlane(int c, String& encoded);
}
public class CsQuery.Output.HtmlEncoderMinimumNbsp : HtmlEncoderMinimum {
    protected virtual bool TryEncode(char c, String& encoded);
}
public class CsQuery.Output.HtmlEncoderNone : object {
    public sealed virtual void Encode(string text, TextWriter output);
}
public interface CsQuery.Output.IHtmlEncoder {
    public abstract virtual void Encode(string text, TextWriter output);
}
public interface CsQuery.Output.IOutputFormatter {
    public abstract virtual void Render(IDomObject node, TextWriter writer);
    public abstract virtual string Render(IDomObject node);
}
public static class CsQuery.OutputFormatters : object {
    public static IOutputFormatter Default { get; }
    public static IOutputFormatter HtmlEncodingNone { get; }
    public static IOutputFormatter HtmlEncodingBasic { get; }
    public static IOutputFormatter HtmlEncodingFull { get; }
    public static IOutputFormatter HtmlEncodingMinimum { get; }
    public static IOutputFormatter HtmlEncodingMinimumNbsp { get; }
    public static IOutputFormatter PlainText { get; }
    public static IOutputFormatter Create(DomRenderingOptions options, IHtmlEncoder encoder);
    public static IOutputFormatter Create(DomRenderingOptions options);
    public static IOutputFormatter Create(IHtmlEncoder encoder);
    public static IOutputFormatter get_Default();
    public static IOutputFormatter get_HtmlEncodingNone();
    public static IOutputFormatter get_HtmlEncodingBasic();
    public static IOutputFormatter get_HtmlEncodingFull();
    public static IOutputFormatter get_HtmlEncodingMinimum();
    public static IOutputFormatter get_HtmlEncodingMinimumNbsp();
    public static IOutputFormatter get_PlainText();
    private static void MergeOptions(DomRenderingOptions& options);
}
public class CsQuery.Promises.Deferred : object {
    internal object Locker;
    private Func`2<object, IPromise> _Success;
    private Func`2<object, IPromise> _Failure;
    protected List`1<Deferred> NextDeferred;
    protected Nullable`1<bool> Resolved;
    protected object Parameter;
    [CompilerGeneratedAttribute]
private bool <FailOnResolutionExceptions>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<ParameterInfo, Type> CS$<>9__CachedAnonymousMethodDelegate4;
    protected Func`2<object, IPromise> Success { get; protected set; }
    protected Func`2<object, IPromise> Failure { get; protected set; }
    public bool FailOnResolutionExceptions { get; public set; }
    protected Func`2<object, IPromise> get_Success();
    protected void set_Success(Func`2<object, IPromise> value);
    protected Func`2<object, IPromise> get_Failure();
    protected void set_Failure(Func`2<object, IPromise> value);
    [CompilerGeneratedAttribute]
public bool get_FailOnResolutionExceptions();
    [CompilerGeneratedAttribute]
public void set_FailOnResolutionExceptions(bool value);
    public void Resolve(object parm);
    public void Reject(object parm);
    public sealed virtual IPromise Then(Delegate success, Delegate failure);
    public sealed virtual IPromise Then(PromiseAction`1<object> success, PromiseAction`1<object> failure);
    public sealed virtual IPromise Then(PromiseFunction`1<object> success, PromiseFunction`1<object> failure);
    public sealed virtual IPromise Then(Action success, Action failure);
    public sealed virtual IPromise Then(Func`1<IPromise> success, Func`1<IPromise> failure);
    protected Object[] GetParameters(bool useParms);
    protected void ResolveImpl();
    protected void RejectImpl();
    private Deferred GetNextDeferred();
    [CompilerGeneratedAttribute]
private static Type <Then>b__1(ParameterInfo item);
    [CompilerGeneratedAttribute]
private void <ResolveImpl>b__26(Deferred item);
    [CompilerGeneratedAttribute]
private void <RejectImpl>b__28(Deferred item);
}
public class CsQuery.Promises.Deferred`1 : Deferred {
    public sealed virtual IPromise Then(PromiseAction`1<T> success, PromiseAction`1<T> failure);
    public sealed virtual IPromise Then(PromiseFunction`1<T> success, PromiseFunction`1<T> failure);
}
public interface CsQuery.Promises.IPromise {
    public abstract virtual IPromise Then(Delegate success, Delegate failure);
    public abstract virtual IPromise Then(Action success, Action failure);
    public abstract virtual IPromise Then(Func`1<IPromise> success, Func`1<IPromise> failure);
    public abstract virtual IPromise Then(PromiseAction`1<object> success, PromiseAction`1<object> failure);
    public abstract virtual IPromise Then(PromiseFunction`1<object> success, PromiseFunction`1<object> failure);
}
public interface CsQuery.Promises.IPromise`1 {
    public abstract virtual IPromise Then(PromiseAction`1<T> success, PromiseAction`1<T> failure);
    public abstract virtual IPromise Then(PromiseFunction`1<T> success, PromiseFunction`1<T> failure);
}
public class CsQuery.Promises.PromiseAction`1 : MulticastDelegate {
    public PromiseAction`1(object object, IntPtr method);
    public virtual void Invoke(T parameter);
    public virtual IAsyncResult BeginInvoke(T parameter, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class CsQuery.Promises.PromiseFunction`1 : MulticastDelegate {
    public PromiseFunction`1(object object, IntPtr method);
    public virtual IPromise Invoke(T parameter);
    public virtual IAsyncResult BeginInvoke(T parameter, AsyncCallback callback, object object);
    public virtual IPromise EndInvoke(IAsyncResult result);
}
public class CsQuery.Promises.Timeout : Timeout`1<object> {
    public Timeout(int timeoutMilliseconds);
    public Timeout(int timeoutMilliseconds, object parameterValue);
    public Timeout(int timeoutMilliseconds, bool succeedOnTimeout);
    public Timeout(int timeoutMilliseconds, object parameterValue, bool succeedOnTimeout);
}
public class CsQuery.Promises.Timeout`1 : object {
    private Timer Timer;
    private int TimeoutMilliseconds;
    private bool ResolveOnTimeout;
    private T ParameterValue;
    private bool useParameter;
    private Deferred`1<T> deferred;
    public Timeout`1(int timeoutMilliseconds);
    public Timeout`1(int timeoutMilliseconds, T parameterValue);
    public Timeout`1(int timeoutMilliseconds, bool resolveOnTimeout);
    public Timeout`1(int timeoutMilliseconds, T parameterValue, bool resolveOnTimeout);
    private void ConfigureTimeout(int timeoutMilliseconds, T parameterValue, bool succeedOnTimeout);
    public void Stop(bool resolve);
    public void Stop();
    protected void Timer_Elapsed(object sender, ElapsedEventArgs e);
    protected void CompletePromise(bool resolve);
    public sealed virtual IPromise Then(PromiseAction`1<T> success, PromiseAction`1<T> failure);
    public sealed virtual IPromise Then(PromiseFunction`1<T> success, PromiseFunction`1<T> failure);
    public sealed virtual IPromise Then(Delegate success, Delegate failure);
    public sealed virtual IPromise Then(Action success, Action failure);
    public sealed virtual IPromise Then(Func`1<IPromise> success, Func`1<IPromise> failure);
    private sealed virtual override IPromise CsQuery.Promises.IPromise.Then(PromiseAction`1<object> success, PromiseAction`1<object> failure);
    private sealed virtual override IPromise CsQuery.Promises.IPromise.Then(PromiseFunction`1<object> success, PromiseFunction`1<object> failure);
}
public class CsQuery.Promises.WhenAll : object {
    private Deferred Deferred;
    private int TotalCount;
    private int _ResolvedCount;
    private Timeout timeout;
    private bool Complete;
    private object _locker;
    private bool Success;
    private int ResolvedCount { get; private set; }
    public WhenAll(IPromise[] promises);
    public WhenAll(int timeoutMilliseconds, IPromise[] promises);
    private int get_ResolvedCount();
    private void set_ResolvedCount(int value);
    public sealed virtual IPromise Then(Delegate success, Delegate failure);
    public sealed virtual IPromise Then(Action success, Action failure);
    public sealed virtual IPromise Then(PromiseAction`1<object> success, PromiseAction`1<object> failure);
    public sealed virtual IPromise Then(Func`1<IPromise> success, Func`1<IPromise> failure);
    public sealed virtual IPromise Then(PromiseFunction`1<object> success, PromiseFunction`1<object> failure);
    private void Configure(IEnumerable`1<IPromise> promises);
    private void PromiseResolve();
    private void PromiseReject();
    private void TimedOut();
    private void CompletePromise();
}
public class CsQuery.RangedDomIndexProvider : object {
    public sealed virtual IDomIndex GetDomIndex();
}
public enum CsQuery.RelAnchor : Enum {
    public int value__;
    public static RelAnchor Alternate;
    public static RelAnchor Author;
    public static RelAnchor Bookmark;
    public static RelAnchor Help;
    public static RelAnchor License;
    public static RelAnchor Next;
    public static RelAnchor Nofollow;
    public static RelAnchor Noreferrer;
    public static RelAnchor Prefetch;
    public static RelAnchor Prev;
    public static RelAnchor Search;
    public static RelAnchor Tag;
}
public enum CsQuery.RelLink : Enum {
    public int value__;
    public static RelLink Alternate;
    public static RelLink Author;
    public static RelLink Help;
    public static RelLink Icon;
    public static RelLink License;
    public static RelLink Next;
    public static RelLink Prefetch;
    public static RelLink Prev;
    public static RelLink Search;
    public static RelLink Stylesheet;
}
public class CsQuery.SimpleDomIndexProvider : object {
    public sealed virtual IDomIndex GetDomIndex();
}
[FlagsAttribute]
public enum CsQuery.StartupOptions : Enum {
    public int value__;
    public static StartupOptions LookForExtensions;
}
public static class CsQuery.StringScanner.CharacterData : object {
    private static string charsHtmlSpace;
    private static string charsWhitespace;
    private static string charsNumeric;
    private static string charsHex;
    private static string charsNumericExtended;
    private static string charsLower;
    private static string charsUpper;
    private static string charsAlpha;
    private static string charsQuote;
    private static string charsOperator;
    private static string charsEnclosing;
    private static string charsEscape;
    private static string charsSeparators;
    private static string charsHtmlTagAny;
    private static string charsHtmlMustBeEncoded;
    private static UInt32[] characterFlags;
    public static Char[] charsHtmlSpaceArray;
    private static CharacterData();
    public static ICharacterInfo CreateCharacterInfo();
    public static ICharacterInfo CreateCharacterInfo(char character);
    public static IStringInfo CreateStringInfo();
    public static IStringInfo CreateStringInfo(string text);
    public static bool IsType(char character, CharacterType type);
    public static CharacterType GetType(char character);
    public static char Closer(char character);
    public static char MatchingBound(char character);
    private static void SetAlphaISO10646(UInt32 hsb);
    private static void SetSelectorTerminator(UInt32 hsb);
    private static void SetHtmlAttributeName(UInt32 hsb);
    private static void SetHtmlTagSelectorStart(UInt32 hsb);
    private static void SetHtmlTagSelectorExceptStart(UInt32 hsb);
    private static void SetHtmlTagNameStart(UInt32 hsb);
    private static void SetHtmlTagNameExceptStart(UInt32 hsb);
    private static void SetRange(UInt32 flag, ushort start, ushort end);
    private static void setBit(string forCharacters, UInt32 bit);
    private static void setBit(char character, UInt32 bit);
    private static char CloserImpl(char character);
}
[FlagsAttribute]
public enum CsQuery.StringScanner.CharacterType : Enum {
    public int value__;
    public static CharacterType Whitespace;
    public static CharacterType Alpha;
    public static CharacterType Number;
    public static CharacterType NumberPart;
    public static CharacterType Lower;
    public static CharacterType Upper;
    public static CharacterType Operator;
    public static CharacterType Enclosing;
    public static CharacterType Quote;
    public static CharacterType Escape;
    public static CharacterType Separator;
    public static CharacterType AlphaISO10646;
    public static CharacterType HtmlTagSelectorStart;
    public static CharacterType HtmlTagSelectorExceptStart;
    public static CharacterType HtmlTagOpenerEnd;
    public static CharacterType HtmlTagAny;
    public static CharacterType HtmlTagNameStart;
    public static CharacterType HtmlTagNameExceptStart;
    public static CharacterType HtmlAttributeName;
    public static CharacterType SelectorTerminator;
    public static CharacterType HtmlSpace;
    public static CharacterType HtmlMustBeEncoded;
    public static CharacterType HtmlAttributeValueTerminator;
    public static CharacterType Hexadecimal;
}
[ExtensionAttribute]
public static class CsQuery.StringScanner.ExtensionMethods.ExtensionMethods : object {
    [ExtensionAttribute]
public static string SubstringBetween(string text, int startIndex, int endIndex);
    [ExtensionAttribute]
public static string SubstringBetween(Char[] text, int startIndex, int endIndex);
}
public interface CsQuery.StringScanner.ICharacterInfo {
    public bool Parenthesis { get; }
    public bool Enclosing { get; }
    public bool Bound { get; }
    public bool Quote { get; }
    public bool Separator { get; }
    public abstract virtual bool get_Parenthesis();
    public abstract virtual bool get_Enclosing();
    public abstract virtual bool get_Bound();
    public abstract virtual bool get_Quote();
    public abstract virtual bool get_Separator();
}
public interface CsQuery.StringScanner.IExpectPattern {
    public string Result { get; }
    public int EndIndex { get; }
    public abstract virtual void Initialize(int startIndex, Char[] source);
    public abstract virtual bool Validate();
    public abstract virtual string get_Result();
    public abstract virtual int get_EndIndex();
}
public class CsQuery.StringScanner.Implementation.CharacterInfo : object {
    [CompilerGeneratedAttribute]
private char <Target>k__BackingField;
    public char Target { get; public set; }
    private IConvertible CsQuery.StringScanner.IValueInfo.Target { get; private set; }
    public CharacterType Type { get; }
    public bool Alpha { get; }
    public bool Numeric { get; }
    public bool NumericExtended { get; }
    public bool Lower { get; }
    public bool Upper { get; }
    public bool Whitespace { get; }
    public bool Alphanumeric { get; }
    public bool Operator { get; }
    public bool Bound { get; }
    public bool Enclosing { get; }
    public bool Quote { get; }
    public bool Parenthesis { get; }
    public bool Separator { get; }
    public bool AlphaISO10646 { get; }
    public CharacterInfo(char character);
    public static CharacterInfo op_Implicit(char character);
    public static ICharacterInfo Create(char character);
    [CompilerGeneratedAttribute]
public sealed virtual char get_Target();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Target(char value);
    private sealed virtual override IConvertible CsQuery.StringScanner.IValueInfo.get_Target();
    private sealed virtual override void CsQuery.StringScanner.IValueInfo.set_Target(IConvertible value);
    public CharacterType get_Type();
    public sealed virtual bool get_Alpha();
    public sealed virtual bool get_Numeric();
    public sealed virtual bool get_NumericExtended();
    public sealed virtual bool get_Lower();
    public sealed virtual bool get_Upper();
    public sealed virtual bool get_Whitespace();
    public sealed virtual bool get_Alphanumeric();
    public sealed virtual bool get_Operator();
    public sealed virtual bool get_Bound();
    public sealed virtual bool get_Enclosing();
    public sealed virtual bool get_Quote();
    public sealed virtual bool get_Parenthesis();
    public sealed virtual bool get_Separator();
    public sealed virtual bool get_AlphaISO10646();
    public virtual string ToString();
}
public abstract class CsQuery.StringScanner.Implementation.ExpectPattern : object {
    protected ICharacterInfo info;
    protected Char[] Source;
    protected int StartIndex;
    protected int Length;
    [CompilerGeneratedAttribute]
private int <EndIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Result>k__BackingField;
    public int EndIndex { get; protected set; }
    public string Result { get; protected set; }
    public virtual void Initialize(int startIndex, Char[] sourceText);
    public virtual bool Validate();
    [CompilerGeneratedAttribute]
public virtual int get_EndIndex();
    [CompilerGeneratedAttribute]
protected virtual void set_EndIndex(int value);
    [CompilerGeneratedAttribute]
public virtual string get_Result();
    [CompilerGeneratedAttribute]
protected virtual void set_Result(string value);
    protected bool MatchSubstring(int startIndex, string substring);
    protected string GetOuput(int startIndex, int endIndex, bool honorQuotes);
    protected string GetOuput(int startIndex, int endIndex, bool honorQuotes, bool stripQuotes);
    protected bool TryParseEscapeChar(char character, Char& newValue);
}
public class CsQuery.StringScanner.Implementation.StringInfo : object {
    protected CharacterInfo charInfo;
    protected Func`2<CharacterInfo, bool> isAlpha;
    private static Func`2<CharacterInfo, bool> isNumeric;
    private static Func`2<CharacterInfo, bool> isNumericExtended;
    private static Func`2<CharacterInfo, bool> isLower;
    private static Func`2<CharacterInfo, bool> isUpper;
    private static Func`2<CharacterInfo, bool> isWhitespace;
    private static Func`2<CharacterInfo, bool> isAlphanumeric;
    protected Func`2<CharacterInfo, bool> isOperator;
    protected Func`2<CharacterInfo, bool> isAlphaISO10646;
    [CompilerGeneratedAttribute]
private string <Target>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<CharacterInfo, bool> CS$<>9__CachedAnonymousMethodDelegate3;
    [CompilerGeneratedAttribute]
private static Func`2<CharacterInfo, bool> CS$<>9__CachedAnonymousMethodDelegate4;
    [CompilerGeneratedAttribute]
private static Func`2<CharacterInfo, bool> CS$<>9__CachedAnonymousMethodDelegate5;
    [CompilerGeneratedAttribute]
private static Func`2<CharacterInfo, bool> CS$<>9__CachedAnonymousMethodDelegate9;
    [CompilerGeneratedAttribute]
private static Func`2<CharacterInfo, bool> CS$<>9__CachedAnonymousMethodDelegatea;
    [CompilerGeneratedAttribute]
private static Func`2<CharacterInfo, bool> CS$<>9__CachedAnonymousMethodDelegateb;
    [CompilerGeneratedAttribute]
private static Func`2<CharacterInfo, bool> CS$<>9__CachedAnonymousMethodDelegate12;
    [CompilerGeneratedAttribute]
private static Func`2<CharacterInfo, bool> CS$<>9__CachedAnonymousMethodDelegate13;
    [CompilerGeneratedAttribute]
private static Func`2<CharacterInfo, bool> CS$<>9__CachedAnonymousMethodDelegate14;
    [CompilerGeneratedAttribute]
private static Func`2<CharacterInfo, bool> CS$<>9__CachedAnonymousMethodDelegate15;
    [CompilerGeneratedAttribute]
private static Func`2<CharacterInfo, bool> CS$<>9__CachedAnonymousMethodDelegate16;
    [CompilerGeneratedAttribute]
private static Func`2<CharacterInfo, bool> CS$<>9__CachedAnonymousMethodDelegate17;
    public string Target { get; public set; }
    private IConvertible CsQuery.StringScanner.IValueInfo.Target { get; private set; }
    public bool Alpha { get; }
    public bool Numeric { get; }
    public bool NumericExtended { get; }
    public bool Lower { get; }
    public bool Upper { get; }
    public bool Whitespace { get; }
    public bool Alphanumeric { get; }
    public bool Operator { get; }
    public bool HasAlpha { get; }
    public bool HtmlAttributeName { get; }
    public bool AlphaISO10646 { get; }
    protected bool Exists { get; }
    public StringInfo(string text);
    private static StringInfo();
    public static StringInfo op_Implicit(string text);
    public static StringInfo Create(string text);
    protected bool CheckFor(Func`2<CharacterInfo, bool> function);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Target();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Target(string value);
    private sealed virtual override IConvertible CsQuery.StringScanner.IValueInfo.get_Target();
    private sealed virtual override void CsQuery.StringScanner.IValueInfo.set_Target(IConvertible value);
    public sealed virtual bool get_Alpha();
    public sealed virtual bool get_Numeric();
    public sealed virtual bool get_NumericExtended();
    public sealed virtual bool get_Lower();
    public sealed virtual bool get_Upper();
    public sealed virtual bool get_Whitespace();
    public sealed virtual bool get_Alphanumeric();
    public sealed virtual bool get_Operator();
    public sealed virtual bool get_HasAlpha();
    public sealed virtual bool get_HtmlAttributeName();
    public sealed virtual bool get_AlphaISO10646();
    public virtual string ToString();
    protected bool get_Exists();
    [CompilerGeneratedAttribute]
private static bool <.ctor>b__0(CharacterInfo item);
    [CompilerGeneratedAttribute]
private static bool <.ctor>b__1(CharacterInfo item);
    [CompilerGeneratedAttribute]
private static bool <.ctor>b__2(CharacterInfo item);
    [CompilerGeneratedAttribute]
private static bool <.ctor>b__6(CharacterInfo item);
    [CompilerGeneratedAttribute]
private static bool <.ctor>b__7(CharacterInfo item);
    [CompilerGeneratedAttribute]
private static bool <.ctor>b__8(CharacterInfo item);
    [CompilerGeneratedAttribute]
private static bool <.cctor>b__c(CharacterInfo item);
    [CompilerGeneratedAttribute]
private static bool <.cctor>b__d(CharacterInfo item);
    [CompilerGeneratedAttribute]
private static bool <.cctor>b__e(CharacterInfo item);
    [CompilerGeneratedAttribute]
private static bool <.cctor>b__f(CharacterInfo item);
    [CompilerGeneratedAttribute]
private static bool <.cctor>b__10(CharacterInfo item);
    [CompilerGeneratedAttribute]
private static bool <.cctor>b__11(CharacterInfo item);
}
public class CsQuery.StringScanner.Implementation.StringScannerEngine : object {
    private string _Text;
    private string _CurrentMatch;
    private string _LastMatch;
    private int cachedPos;
    private string cachedMatch;
    private bool cached;
    private CharacterInfo _characterInfo;
    protected Char[] _Chars;
    [CompilerGeneratedAttribute]
private bool <QuotingActive>k__BackingField;
    [CompilerGeneratedAttribute]
private char <QuoteChar>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SuppressErrors>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreWhitespace>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Length>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LastIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LastError>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Success>k__BackingField;
    protected bool QuotingActive { get; protected set; }
    protected char QuoteChar { get; protected set; }
    protected CharacterInfo characterInfo { get; }
    protected bool SuppressErrors { get; protected set; }
    public string Text { get; public set; }
    public Char[] Chars { get; public set; }
    public bool IgnoreWhitespace { get; public set; }
    public int Length { get; protected set; }
    public int Index { get; protected set; }
    public int LastIndex { get; protected set; }
    public char Current { get; }
    public string CurrentOrEmpty { get; }
    public string Match { get; protected set; }
    public string LastMatch { get; protected set; }
    public bool Finished { get; }
    public bool AtEnd { get; }
    public string LastError { get; protected set; }
    public bool Success { get; protected set; }
    public ICharacterInfo Info { get; }
    public StringScannerEngine(string text);
    public static StringScannerEngine op_Implicit(string text);
    protected void Init();
    [CompilerGeneratedAttribute]
protected bool get_QuotingActive();
    [CompilerGeneratedAttribute]
protected void set_QuotingActive(bool value);
    [CompilerGeneratedAttribute]
protected char get_QuoteChar();
    [CompilerGeneratedAttribute]
protected void set_QuoteChar(char value);
    protected CharacterInfo get_characterInfo();
    [CompilerGeneratedAttribute]
protected bool get_SuppressErrors();
    [CompilerGeneratedAttribute]
protected void set_SuppressErrors(bool value);
    public sealed virtual string get_Text();
    public sealed virtual void set_Text(string value);
    public sealed virtual Char[] get_Chars();
    public sealed virtual void set_Chars(Char[] value);
    public sealed virtual bool AllowQuoting();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IgnoreWhitespace();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IgnoreWhitespace(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Length();
    [CompilerGeneratedAttribute]
protected void set_Length(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Index();
    [CompilerGeneratedAttribute]
protected void set_Index(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_LastIndex();
    [CompilerGeneratedAttribute]
protected void set_LastIndex(int value);
    public sealed virtual char get_Current();
    public sealed virtual string get_CurrentOrEmpty();
    public sealed virtual string get_Match();
    protected void set_Match(string value);
    public sealed virtual string get_LastMatch();
    protected void set_LastMatch(string value);
    public sealed virtual bool get_Finished();
    public sealed virtual bool get_AtEnd();
    [CompilerGeneratedAttribute]
public sealed virtual string get_LastError();
    [CompilerGeneratedAttribute]
protected void set_LastError(string value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Success();
    [CompilerGeneratedAttribute]
protected void set_Success(bool value);
    public sealed virtual ICharacterInfo get_Info();
    public sealed virtual IStringScanner ToNewScanner();
    public sealed virtual IStringScanner ToNewScanner(string template);
    public sealed virtual bool Matches(string text);
    public sealed virtual bool MatchesAny(IEnumerable`1<string> text);
    public sealed virtual IStringScanner Seek(char character, bool orEnd);
    protected void SkipWhitespaceImpl();
    public sealed virtual void SkipWhitespace();
    public sealed virtual void NextNonWhitespace();
    public sealed virtual char Peek();
    public sealed virtual bool Next();
    public sealed virtual bool Previous();
    public sealed virtual bool Move(int offset);
    public sealed virtual void Undo();
    public sealed virtual void AssertFinished(string errorMessage);
    public sealed virtual void AssertNotFinished(string errorMessage);
    public sealed virtual void Reset();
    public sealed virtual void End();
    public sealed virtual IStringScanner Expect(string text);
    public sealed virtual string Get(String[] values);
    public sealed virtual void Expect(String[] values);
    public sealed virtual string Get(IEnumerable`1<string> stringList);
    public sealed virtual bool TryGet(IEnumerable`1<string> stringList, String& result);
    public sealed virtual void Expect(IEnumerable`1<string> stringList);
    public sealed virtual char GetChar(char character);
    public sealed virtual bool TryGetChar(char character, String& result);
    public sealed virtual IStringScanner ExpectChar(char character);
    public sealed virtual char GetChar(string characters);
    public sealed virtual bool TryGetChar(string characters, String& result);
    public IStringScanner ExpectChar(Char[] characters);
    public sealed virtual char GetChar(IEnumerable`1<char> characters);
    public sealed virtual bool TryGetChar(IEnumerable`1<char> characters, String& result);
    public sealed virtual IStringScanner ExpectChar(IEnumerable`1<char> characters);
    protected bool ExpectCharImpl(IEnumerable`1<char> characters);
    public sealed virtual string GetNumber();
    public sealed virtual bool TryGetNumber(String& result);
    public sealed virtual bool TryGetNumber(T& result);
    public sealed virtual bool TryGetNumber(Int32& result);
    public sealed virtual IStringScanner ExpectNumber(bool requireWhitespaceTerminator);
    public sealed virtual bool TryGetAlpha(String& result);
    public sealed virtual string GetAlpha();
    public sealed virtual IStringScanner ExpectAlpha();
    public sealed virtual string Get(IExpectPattern pattern);
    public sealed virtual bool TryGet(IExpectPattern pattern, String& result);
    public sealed virtual IStringScanner Expect(IExpectPattern pattern);
    public sealed virtual string Get(Func`3<int, char, bool> validate);
    public sealed virtual bool TryGet(Func`3<int, char, bool> validate, String& result);
    public sealed virtual IStringScanner Expect(Func`3<int, char, bool> validate);
    public sealed virtual string GetBoundedBy(string start, string end, bool allowQuoting);
    public sealed virtual bool TryGetBoundedBy(string start, string end, bool allowQuoting, String& result);
    public sealed virtual IStringScanner ExpectBoundedBy(string start, string end, bool allowQuoting);
    public sealed virtual string GetBoundedBy(char bound, bool allowQuoting);
    public sealed virtual IStringScanner ExpectBoundedBy(char bound, bool allowQuoting);
    public virtual string ToString();
    private StringScannerEngine ExpectImpl(IExpectPattern pattern);
    protected bool TryWrapper(Action action, String& result);
    [DebuggerStepThroughAttribute]
protected void ThrowUnexpectedCharacterException();
    [DebuggerStepThroughAttribute]
protected void ThrowUnexpectedEndOfStringException();
    [DebuggerStepThroughAttribute]
protected void ThrowException(string message);
    protected void ThrowException(string message, int errPos);
    protected void AutoSkipWhitespace();
    protected void NextNonWhitespaceImpl();
    protected void CachePos();
    protected void NewPos(int pos);
    protected void NewPos();
    protected void RestorePos();
    protected string LookupsToString(HashSet`1<char> list);
    [CompilerGeneratedAttribute]
private void <TryGetNumber>b__c();
    [CompilerGeneratedAttribute]
private void <TryGetNumber>b__d();
    [CompilerGeneratedAttribute]
private void <TryGetAlpha>b__e();
}
public interface CsQuery.StringScanner.IStringInfo {
    public bool HtmlAttributeName { get; }
    public bool HasAlpha { get; }
    public abstract virtual bool get_HtmlAttributeName();
    public abstract virtual bool get_HasAlpha();
}
public interface CsQuery.StringScanner.IStringScanner {
    public string Text { get; public set; }
    public Char[] Chars { get; public set; }
    public bool IgnoreWhitespace { get; public set; }
    public int Length { get; }
    public int Index { get; }
    public int LastIndex { get; }
    public char Current { get; }
    public string CurrentOrEmpty { get; }
    public string Match { get; }
    public string LastMatch { get; }
    public bool Finished { get; }
    public bool AtEnd { get; }
    public bool Success { get; }
    public string LastError { get; }
    public ICharacterInfo Info { get; }
    public abstract virtual string get_Text();
    public abstract virtual void set_Text(string value);
    public abstract virtual Char[] get_Chars();
    public abstract virtual void set_Chars(Char[] value);
    public abstract virtual bool get_IgnoreWhitespace();
    public abstract virtual void set_IgnoreWhitespace(bool value);
    public abstract virtual int get_Length();
    public abstract virtual int get_Index();
    public abstract virtual int get_LastIndex();
    public abstract virtual char get_Current();
    public abstract virtual char Peek();
    public abstract virtual string get_CurrentOrEmpty();
    public abstract virtual string get_Match();
    public abstract virtual string get_LastMatch();
    public abstract virtual bool get_Finished();
    public abstract virtual bool get_AtEnd();
    public abstract virtual bool get_Success();
    public abstract virtual string get_LastError();
    public abstract virtual bool AllowQuoting();
    public abstract virtual ICharacterInfo get_Info();
    public abstract virtual void SkipWhitespace();
    public abstract virtual void NextNonWhitespace();
    public abstract virtual bool Next();
    public abstract virtual bool Previous();
    public abstract virtual bool Move(int count);
    public abstract virtual void Undo();
    public abstract virtual void End();
    public abstract virtual void AssertFinished(string errorMessage);
    public abstract virtual void AssertNotFinished(string errorMessage);
    public abstract virtual void Reset();
    public abstract virtual bool Matches(string text);
    public abstract virtual bool MatchesAny(IEnumerable`1<string> text);
    public abstract virtual IStringScanner Seek(char character, bool orEnd);
    public abstract virtual IStringScanner ToNewScanner();
    public abstract virtual IStringScanner ToNewScanner(string template);
    public abstract virtual IStringScanner Expect(string text);
    public abstract virtual IStringScanner Expect(IExpectPattern pattern);
    public abstract virtual IStringScanner Expect(Func`3<int, char, bool> validate);
    public abstract virtual IStringScanner ExpectChar(char character);
    public abstract virtual IStringScanner ExpectChar(IEnumerable`1<char> characters);
    public abstract virtual IStringScanner ExpectNumber(bool requireWhitespaceTerminator);
    public abstract virtual IStringScanner ExpectAlpha();
    public abstract virtual IStringScanner ExpectBoundedBy(string start, string end, bool allowQuoting);
    public abstract virtual IStringScanner ExpectBoundedBy(char bound, bool allowQuoting);
    public abstract virtual bool TryGet(IEnumerable`1<string> stringList, String& result);
    public abstract virtual bool TryGet(IExpectPattern pattern, String& result);
    public abstract virtual bool TryGet(Func`3<int, char, bool> validate, String& result);
    public abstract virtual bool TryGetChar(char character, String& result);
    public abstract virtual bool TryGetChar(string characters, String& result);
    public abstract virtual bool TryGetChar(IEnumerable`1<char> characters, String& result);
    public abstract virtual bool TryGetNumber(String& result);
    public abstract virtual bool TryGetNumber(T& result);
    public abstract virtual bool TryGetNumber(Int32& result);
    public abstract virtual bool TryGetAlpha(String& result);
    public abstract virtual bool TryGetBoundedBy(string start, string end, bool allowQuoting, String& result);
    public abstract virtual string Get(String[] values);
    public abstract virtual string Get(IEnumerable`1<string> stringList);
    public abstract virtual string Get(IExpectPattern pattern);
    public abstract virtual string Get(Func`3<int, char, bool> validate);
    public abstract virtual string GetNumber();
    public abstract virtual string GetAlpha();
    public abstract virtual string GetBoundedBy(string start, string end, bool allowQuoting);
    public abstract virtual string GetBoundedBy(char bound, bool allowQuoting);
    public abstract virtual char GetChar(char character);
    public abstract virtual char GetChar(string characters);
    public abstract virtual char GetChar(IEnumerable`1<char> characters);
    public abstract virtual void Expect(String[] values);
    public abstract virtual void Expect(IEnumerable`1<string> stringList);
}
public interface CsQuery.StringScanner.IValueInfo {
    public bool Alpha { get; }
    public bool Numeric { get; }
    public bool NumericExtended { get; }
    public bool Lower { get; }
    public bool Upper { get; }
    public bool Whitespace { get; }
    public bool Alphanumeric { get; }
    public bool Operator { get; }
    public bool AlphaISO10646 { get; }
    public IConvertible Target { get; public set; }
    public abstract virtual bool get_Alpha();
    public abstract virtual bool get_Numeric();
    public abstract virtual bool get_NumericExtended();
    public abstract virtual bool get_Lower();
    public abstract virtual bool get_Upper();
    public abstract virtual bool get_Whitespace();
    public abstract virtual bool get_Alphanumeric();
    public abstract virtual bool get_Operator();
    public abstract virtual bool get_AlphaISO10646();
    public abstract virtual IConvertible get_Target();
    public abstract virtual void set_Target(IConvertible value);
}
public interface CsQuery.StringScanner.IValueInfo`1 {
    public T Target { get; public set; }
    public abstract virtual T get_Target();
    public abstract virtual void set_Target(T value);
}
public static class CsQuery.StringScanner.MatchFunctions : object {
    public static IExpectPattern Bounded { get; }
    public static IExpectPattern BoundedWithQuotedContent { get; }
    public static IExpectPattern CssClassName { get; }
    public static bool Alpha(int index, char character);
    public static IExpectPattern Number(bool requireWhitespaceTerminator);
    public static bool Alphanumeric(int index, char character);
    public static IExpectPattern HtmlIDValue();
    public static IExpectPattern HTMLAttribute();
    public static IExpectPattern HTMLTagSelectorName();
    public static IExpectPattern BoundedBy(string boundStart, string boundEnd, bool honorInnerQuotes);
    public static IExpectPattern get_Bounded();
    public static IExpectPattern get_BoundedWithQuotedContent();
    public static bool NonWhitespace(int index, char character);
    public static bool QuoteChar(int index, char character);
    public static bool BoundChar(int index, char character);
    public static IExpectPattern Quoted();
    public static bool PseudoSelector(int index, char character);
    public static IExpectPattern get_CssClassName();
    public static IExpectPattern OptionallyQuoted(string terminators);
    public static bool Operator(int index, char character);
}
public class CsQuery.StringScanner.Patterns.Bounded : ExpectPattern {
    private string _BoundStart;
    private string _BoundEnd;
    private char _BoundStartChar;
    private char _BoundEndChar;
    private bool hasStartBound;
    protected bool boundAny;
    private bool quoting;
    private char quoteChar;
    private bool matched;
    private int nestedCount;
    [CompilerGeneratedAttribute]
private bool <HonorInnerQuotes>k__BackingField;
    public bool HonorInnerQuotes { get; public set; }
    public string BoundStart { get; public set; }
    public string BoundEnd { get; public set; }
    protected char BoundStartChar { get; protected set; }
    protected char BoundEndChar { get; protected set; }
    [CompilerGeneratedAttribute]
public bool get_HonorInnerQuotes();
    [CompilerGeneratedAttribute]
public void set_HonorInnerQuotes(bool value);
    public string get_BoundStart();
    public void set_BoundStart(string value);
    public string get_BoundEnd();
    public void set_BoundEnd(string value);
    protected char get_BoundStartChar();
    protected void set_BoundStartChar(char value);
    protected char get_BoundEndChar();
    protected void set_BoundEndChar(char value);
    public virtual void Initialize(int startIndex, Char[] sourceText);
    public virtual bool Validate();
    protected bool Expect(Int32& index, char current);
}
public class CsQuery.StringScanner.Patterns.CssClassName : EscapedString {
    protected static bool IsValidClassName(int index, char character);
}
public class CsQuery.StringScanner.Patterns.EscapedString : ExpectPattern {
    protected Func`3<int, char, bool> ValidCharacter;
    protected bool Escaped;
    protected bool failed;
    public EscapedString(Func`3<int, char, bool> validCharacter);
    private static bool AlwaysValid(int index, char character);
    public virtual bool Validate();
}
public class CsQuery.StringScanner.Patterns.HTMLAttributeName : EscapedString {
    protected static bool IsValidAttributeName(int index, char character);
}
public class CsQuery.StringScanner.Patterns.HtmlIDSelector : EscapedString {
    private static bool IsValidIDSelector(int index, char character);
}
public class CsQuery.StringScanner.Patterns.HTMLTagSelectorName : EscapedString {
    private static bool IsValidTagName(int index, char character);
}
public class CsQuery.StringScanner.Patterns.Number : ExpectPattern {
    protected bool failed;
    protected bool decimalYet;
    [CompilerGeneratedAttribute]
private bool <RequireWhitespaceTerminator>k__BackingField;
    public bool RequireWhitespaceTerminator { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_RequireWhitespaceTerminator();
    [CompilerGeneratedAttribute]
public void set_RequireWhitespaceTerminator(bool value);
    public virtual void Initialize(int startIndex, Char[] sourceText);
    public virtual bool Validate();
    protected virtual bool Expect(Int32& index, char current);
}
public class CsQuery.StringScanner.Patterns.OptionallyQuoted : Quoted {
    private bool isQuoted;
    [CompilerGeneratedAttribute]
private IEnumerable`1<char> <Terminators>k__BackingField;
    public IEnumerable`1<char> Terminators { get; public set; }
    public OptionallyQuoted(IEnumerable`1<char> terminators);
    private void SetDefaultTerminators();
    public virtual void Initialize(int startIndex, Char[] sourceText);
    [CompilerGeneratedAttribute]
public IEnumerable`1<char> get_Terminators();
    [CompilerGeneratedAttribute]
public void set_Terminators(IEnumerable`1<char> value);
    public virtual bool Validate();
    protected virtual bool FinishValidate();
    protected virtual bool Expect(Int32& index, char current);
}
public class CsQuery.StringScanner.Patterns.Quoted : ExpectPattern {
    private char quoteChar;
    public virtual bool Validate();
    protected virtual bool FinishValidate();
    protected virtual bool Expect(Int32& index, char current);
}
public static class CsQuery.StringScanner.Scanner : object {
    public static IStringScanner Create(string text);
}
public class CsQuery.Utility.Browser : object {
    private HttpContext Context;
    public bool MSIE { get; }
    public bool Chrome { get; }
    public string Version { get; }
    public int VersionMajor { get; }
    public Browser(HttpContext context);
    public bool get_MSIE();
    public bool get_Chrome();
    public string get_Version();
    public int get_VersionMajor();
}
public static class CsQuery.Utility.FastActivator : object {
    private static ConcurrentDictionary`2<Type, CreateObject> creatorCache;
    private static Type coType;
    private static FastActivator();
    public static T CreateInstance();
    public static object CreateInstance(Type type);
}
public interface CsQuery.Utility.IJsonSerializer {
    public abstract virtual string Serialize(object value);
    public abstract virtual object Deserialize(string json, Type type);
    public abstract virtual T Deserialize(string json);
}
public static class CsQuery.Utility.JSON : object {
    private static Char[] escapeLookup;
    private static DateTime unixEpoch;
    private static JSON();
    public static string ToJSON(object obj);
    public static T ParseJSON(string json);
    public static object ParseJSON(string json, Type type);
    public static object ParseJSON(string json);
    public static T ParseJSONValue(string jsonValue);
    public static object ParseJSONValue(string jsonValue);
    public static object ParseJSONValue(string jsonValue, Type type);
    public static bool TryParseJSONValue(string jsonValue, Object& value);
    public static bool TryParseJSONValue(string jsonValue, Type type, Object& value);
    public static bool IsJsonDate(string jsonValue);
    public static bool IsJsonObject(string jsonValue);
    public static bool IsJsonString(string jsonValue);
    public static bool IsJsonArray(string jsonValue);
    private static bool TryParseJsonValueImpl(string jsonValue, Object& value);
    private static DateTime FromJSDateTime(string jsDateTime);
    private static JsObject ParseJSONObject(string objectToDeserialize);
    private static string ParseJsonString(string input);
    private static object ParseJsonArray(string input);
}
public class CsQuery.Utility.JsonSerializer : object {
    private static Lazy`1<JavaScriptSerializer> _Serializer;
    private StringBuilder sb;
    [CompilerGeneratedAttribute]
private static Func`2<Type, bool> CS$<>9__CachedAnonymousMethodDelegatec;
    [CompilerGeneratedAttribute]
private static Func`2<Type, Type> CS$<>9__CachedAnonymousMethodDelegated;
    [CompilerGeneratedAttribute]
private static Func`2<Type, bool> CS$<>9__CachedAnonymousMethodDelegatee;
    private static JavaScriptSerializer Serializer { get; }
    private static JsonSerializer();
    private static JavaScriptSerializer get_Serializer();
    public sealed virtual string Serialize(object value);
    public sealed virtual object Deserialize(string value, Type type);
    public sealed virtual T Deserialize(string value);
    private void SerializeImpl(object value);
    private void valueToJSON(object value);
    private bool IsDictionary(object value);
    [CompilerGeneratedAttribute]
private static bool <IsDictionary>b__9(Type t);
    [CompilerGeneratedAttribute]
private static Type <IsDictionary>b__a(Type t);
    [CompilerGeneratedAttribute]
private static bool <IsDictionary>b__b(Type t);
}
public class CsQuery.Utility.SelectorCache : object {
    private CQ CqSource;
    private IDictionary`2<Selector, IList`1<IDomObject>> _SelectionCache;
    protected IDictionary`2<Selector, IList`1<IDomObject>> SelectionCache { get; }
    public SelectorCache(CQ cqSource);
    protected IDictionary`2<Selector, IList`1<IDomObject>> get_SelectionCache();
    public CQ Select(string selector);
}
public static class CsQuery.Utility.Support : object {
    public static string GetFile(string fileName);
    public static FileStream GetFileStream(string fileName);
    public static bool TryGetFilePath(string partialPath, String& filePath);
    public static string GetFilePath(string partialPath);
    public static string GetFilePath(string partialPath, string basePath);
    public static bool TryGetFilePath(string partialPath, string basePath, String& outputPath);
    public static Assembly GetFirstExternalAssembly();
    public static Stream GetResourceStream(string resourceName);
    public static Stream GetResourceStream(string resourceName, Assembly assembly);
    public static Stream GetResourceStream(string resourceName, string assembly);
    public static string StreamToString(Stream stream);
    public static string CleanFilePath(string path);
    public static string CombinePaths(string path1, string path2);
    private static string RemoveRelativePath(string path);
    public static string MethodPath(MemberInfo mi);
    public static string MethodPath(Type type, string memberName);
    public static string TypePath(Type type);
    public static Char[] StreamToCharArray(Stream stream);
    public static void CopyFiles(DirectoryInfo source, DirectoryInfo destination, bool overwrite, String[] patterns);
    public static void CopyFiles(DirectoryInfo source, DirectoryInfo destination, String[] patterns);
    public static void DeleteFiles(DirectoryInfo directory, String[] patterns);
    public static double DoubleOrZero(string value);
    public static int IntOrZero(string value);
    public static IConvertible NumberToDoubleOrInt(IConvertible value);
    public static string FromCamelCase(string name);
    public static string ToCamelCase(string name, bool capFirst);
    public static TEnum AttributeToEnum(string value);
    public static string EnumToAttribute(Enum value);
    public static Stream GetEncodedStream(string html, Encoding encoding);
}
public static class CsQuery.Utility.Types : object {
    public static bool IsAnonymousType(Type type);
}
public class CsQuery.Web.AsyncPostbackData : object {
    private StringBuilder _UserOutput;
    public string Content;
    private CQ _Dom;
    private string _ID;
    protected int Length;
    private string _DataType;
    private StringBuilder UserOutput { get; }
    public CQ Dom { get; }
    public string ID { get; protected set; }
    public string DataType { get; protected set; }
    private StringBuilder get_UserOutput();
    public void Create(int length, string type, string id, string content);
    public string Render();
    public string Render(DomRenderingOptions options);
    public CQ get_Dom();
    public string get_ID();
    protected void set_ID(string value);
    public string get_DataType();
    protected void set_DataType(string value);
}
public class CsQuery.Web.AsyncWebRequest : object {
    private static int BUFFER_SIZE;
    protected ManualResetEvent allDone;
    private WebException _WebException;
    [CompilerGeneratedAttribute]
private Stream <ResponseStream>k__BackingField;
    [CompilerGeneratedAttribute]
private Encoding <ResponseEncoding>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<ICsqWebResponse> <CallbackSuccess>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<ICsqWebResponse> <CallbackFail>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <Started>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <Finished>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Success>k__BackingField;
    [CompilerGeneratedAttribute]
private IHttpWebRequest <Request>k__BackingField;
    [CompilerGeneratedAttribute]
private IHttpWebResponse <Response>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Timeout>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserAgent>k__BackingField;
    protected Stream ResponseStream { get; protected set; }
    public Encoding ResponseEncoding { get; public set; }
    public Action`1<ICsqWebResponse> CallbackSuccess { get; public set; }
    public Action`1<ICsqWebResponse> CallbackFail { get; public set; }
    public object Id { get; public set; }
    public string Url { get; }
    public Nullable`1<DateTime> Started { get; protected set; }
    public Nullable`1<DateTime> Finished { get; protected set; }
    public bool Complete { get; protected set; }
    public bool Success { get; protected set; }
    public WebException WebException { get; protected set; }
    public IHttpWebRequest Request { get; public set; }
    public string Error { get; }
    public int HttpStatus { get; }
    public string HttpStatusDescription { get; }
    public IHttpWebResponse Response { get; protected set; }
    public CQ Dom { get; }
    public string Html { get; }
    private ServerConfig CsQuery.Web.ICsqWebRequest.Options { get; private set; }
    public int Timeout { get; public set; }
    public string UserAgent { get; public set; }
    public AsyncWebRequest(IHttpWebRequest request);
    [CompilerGeneratedAttribute]
protected Stream get_ResponseStream();
    [CompilerGeneratedAttribute]
protected void set_ResponseStream(Stream value);
    [CompilerGeneratedAttribute]
public sealed virtual Encoding get_ResponseEncoding();
    [CompilerGeneratedAttribute]
public void set_ResponseEncoding(Encoding value);
    [CompilerGeneratedAttribute]
public Action`1<ICsqWebResponse> get_CallbackSuccess();
    [CompilerGeneratedAttribute]
public void set_CallbackSuccess(Action`1<ICsqWebResponse> value);
    [CompilerGeneratedAttribute]
public Action`1<ICsqWebResponse> get_CallbackFail();
    [CompilerGeneratedAttribute]
public void set_CallbackFail(Action`1<ICsqWebResponse> value);
    [CompilerGeneratedAttribute]
public sealed virtual object get_Id();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Id(object value);
    public sealed virtual string get_Url();
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<DateTime> get_Started();
    [CompilerGeneratedAttribute]
protected void set_Started(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<DateTime> get_Finished();
    [CompilerGeneratedAttribute]
protected void set_Finished(Nullable`1<DateTime> value);
    public sealed virtual bool get_Complete();
    protected void set_Complete(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Success();
    [CompilerGeneratedAttribute]
protected void set_Success(bool value);
    public sealed virtual WebException get_WebException();
    protected void set_WebException(WebException value);
    [CompilerGeneratedAttribute]
public IHttpWebRequest get_Request();
    [CompilerGeneratedAttribute]
public void set_Request(IHttpWebRequest value);
    public sealed virtual string get_Error();
    public sealed virtual int get_HttpStatus();
    public sealed virtual string get_HttpStatusDescription();
    [CompilerGeneratedAttribute]
public IHttpWebResponse get_Response();
    [CompilerGeneratedAttribute]
protected void set_Response(IHttpWebResponse value);
    public sealed virtual CQ get_Dom();
    public sealed virtual string get_Html();
    public CQ GetDocument();
    public CQ GetContent();
    public ManualResetEvent GetAsync();
    private void RespCallback(IAsyncResult ar);
    private void ReadCallBack(IAsyncResult asyncResult);
    private sealed virtual override ServerConfig CsQuery.Web.ICsqWebRequest.get_Options();
    private sealed virtual override void CsQuery.Web.ICsqWebRequest.set_Options(ServerConfig value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Timeout();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Timeout(int value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_UserAgent();
    [CompilerGeneratedAttribute]
public sealed virtual void set_UserAgent(string value);
}
public static class CsQuery.Web.AsyncWebRequestManager : object {
    private static int LastAsyncRequestID;
    private static object Locker;
    private static Lazy`1<ConcurrentBag`1<ManualResetEvent>> _AsyncEvents;
    private static ConcurrentBag`1<ManualResetEvent> AsyncEvents { get; }
    private static AsyncWebRequestManager();
    private static ConcurrentBag`1<ManualResetEvent> get_AsyncEvents();
    public static int StartAsyncWebRequest(string url, Action`1<ICsqWebResponse> success, Action`1<ICsqWebResponse> fail, ServerConfig options);
    public static void StartAsyncWebRequest(ICsqWebRequest request, Action`1<ICsqWebResponse> success, Action`1<ICsqWebResponse> fail);
    public static void StartAsyncWebRequest(string url, Action`1<ICsqWebResponse> success, Action`1<ICsqWebResponse> fail, int id, ServerConfig options);
    public static bool WaitForAsyncEvents(int millisecondsTimeout);
    public static void CancelAsyncEvents();
    private static int GetAsyncRequestID();
}
public class CsQuery.Web.CsQueryHttpContext : object {
    private HttpContext _Context;
    private HtmlTextWriter _Writer;
    private StringBuilder _sb;
    private StringWriter _sw;
    private List`1<AsyncPostbackData> _AsyncPostbackData;
    [CompilerGeneratedAttribute]
private Action`1<HtmlTextWriter> <ControlRenderMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private HtmlTextWriter <RealWriter>k__BackingField;
    [CompilerGeneratedAttribute]
private Page <Page>k__BackingField;
    [CompilerGeneratedAttribute]
private CQ <Dom>k__BackingField;
    protected HttpContext Context { get; protected set; }
    private HtmlTextWriter Writer { get; }
    protected Action`1<HtmlTextWriter> ControlRenderMethod { get; protected set; }
    protected HtmlTextWriter RealWriter { get; protected set; }
    protected Page Page { get; protected set; }
    public CQ Dom { get; protected set; }
    public bool IsAsync { get; }
    public IEnumerable`1<AsyncPostbackData> AsyncPostbackData { get; }
    public CsQueryHttpContext(HttpContext context, Page page, HtmlTextWriter writer, Action`1<HtmlTextWriter> renderMethod);
    protected HttpContext get_Context();
    protected void set_Context(HttpContext value);
    private HtmlTextWriter get_Writer();
    [CompilerGeneratedAttribute]
protected Action`1<HtmlTextWriter> get_ControlRenderMethod();
    [CompilerGeneratedAttribute]
protected void set_ControlRenderMethod(Action`1<HtmlTextWriter> value);
    [CompilerGeneratedAttribute]
protected HtmlTextWriter get_RealWriter();
    [CompilerGeneratedAttribute]
protected void set_RealWriter(HtmlTextWriter value);
    [CompilerGeneratedAttribute]
protected Page get_Page();
    [CompilerGeneratedAttribute]
protected void set_Page(Page value);
    [CompilerGeneratedAttribute]
public CQ get_Dom();
    [CompilerGeneratedAttribute]
protected void set_Dom(CQ value);
    public bool get_IsAsync();
    public IEnumerable`1<AsyncPostbackData> get_AsyncPostbackData();
    public void Render();
    public void Render(DomRenderingOptions options);
    public void Create();
}
public class CsQuery.Web.CsqWebRequest : object {
    private IHttpWebRequestFactory WebRequestFactory;
    private Lazy`1<List`1<KeyValuePair`2<string, string>>> _PostData;
    private ServerConfig _Options;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Async>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Complete>k__BackingField;
    [CompilerGeneratedAttribute]
private CQ <Dom>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Html>k__BackingField;
    public ServerConfig Options { get; public set; }
    public string Url { get; protected set; }
    public string UserAgent { get; public set; }
    public bool Async { get; public set; }
    public bool Complete { get; protected set; }
    public CQ Dom { get; protected set; }
    public int Timeout { get; public set; }
    public object Id { get; public set; }
    public string Html { get; public set; }
    public string PostDataString { get; public set; }
    public List`1<KeyValuePair`2<string, string>> PostData { get; }
    public CsqWebRequest(string url);
    public CsqWebRequest(string url, IHttpWebRequestFactory webRequestFactory);
    public sealed virtual ServerConfig get_Options();
    public sealed virtual void set_Options(ServerConfig value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Url();
    [CompilerGeneratedAttribute]
protected void set_Url(string value);
    public sealed virtual string get_UserAgent();
    public sealed virtual void set_UserAgent(string value);
    [CompilerGeneratedAttribute]
public bool get_Async();
    [CompilerGeneratedAttribute]
public void set_Async(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Complete();
    [CompilerGeneratedAttribute]
protected void set_Complete(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual CQ get_Dom();
    [CompilerGeneratedAttribute]
protected void set_Dom(CQ value);
    public sealed virtual int get_Timeout();
    public sealed virtual void set_Timeout(int value);
    [CompilerGeneratedAttribute]
public sealed virtual object get_Id();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Id(object value);
    [CompilerGeneratedAttribute]
public string get_Html();
    [CompilerGeneratedAttribute]
public void set_Html(string value);
    public string get_PostDataString();
    public void set_PostDataString(string value);
    public List`1<KeyValuePair`2<string, string>> get_PostData();
    public ManualResetEvent GetAsync(Action`1<ICsqWebResponse> success, Action`1<ICsqWebResponse> fail);
    public ManualResetEvent GetAsync(IHttpWebRequest request, Action`1<ICsqWebResponse> success, Action`1<ICsqWebResponse> fail);
    public string Get();
    public string Get(IHttpWebRequest request);
    public IHttpWebRequest GetWebRequest();
    public string Post();
    public string Post(string url);
    public string Post(string url, IEnumerable`1<KeyValuePair`2<string, string>> postData);
    private void ApplyOptions(IHttpWebRequest request);
    protected StreamReader GetResponseStreamReader(IHttpWebRequest request);
    public static Encoding GetEncoding(IHttpWebResponse response);
}
public interface CsQuery.Web.IAsyncRequestQueue {
    public RequestState State { get; }
    public abstract virtual void AddRequest(string url);
    public abstract virtual void AddRequest(ICsqWebRequest request);
    public abstract virtual IEnumerable`1<ICsqWebResponse> Results();
    public abstract virtual RequestState get_State();
}
public interface CsQuery.Web.ICsqWebRequest {
    public string Url { get; }
    public CQ Dom { get; }
    public bool Complete { get; }
    public object Id { get; public set; }
    public ServerConfig Options { get; public set; }
    public abstract virtual string get_Url();
    public abstract virtual CQ get_Dom();
    public abstract virtual bool get_Complete();
    public abstract virtual object get_Id();
    public abstract virtual void set_Id(object value);
    public abstract virtual ServerConfig get_Options();
    public abstract virtual void set_Options(ServerConfig value);
}
public interface CsQuery.Web.ICsqWebRequestMetadata {
    public int Timeout { get; public set; }
    public string UserAgent { get; public set; }
    public abstract virtual int get_Timeout();
    public abstract virtual void set_Timeout(int value);
    public abstract virtual string get_UserAgent();
    public abstract virtual void set_UserAgent(string value);
}
public interface CsQuery.Web.ICsqWebResponse {
    public string Html { get; }
    public Nullable`1<DateTime> Started { get; }
    public Nullable`1<DateTime> Finished { get; }
    public bool Success { get; }
    public int HttpStatus { get; }
    public string HttpStatusDescription { get; }
    public string Error { get; }
    public WebException WebException { get; }
    public Encoding ResponseEncoding { get; }
    public abstract virtual string get_Html();
    public abstract virtual Nullable`1<DateTime> get_Started();
    public abstract virtual Nullable`1<DateTime> get_Finished();
    public abstract virtual bool get_Success();
    public abstract virtual int get_HttpStatus();
    public abstract virtual string get_HttpStatusDescription();
    public abstract virtual string get_Error();
    public abstract virtual WebException get_WebException();
    public abstract virtual Encoding get_ResponseEncoding();
}
public interface CsQuery.Web.IWebRequestInfo {
}
public enum CsQuery.Web.RequestState : Enum {
    public int value__;
    public static RequestState Idle;
    public static RequestState Active;
    public static RequestState Fail;
    public static RequestState PartialSuccess;
    public static RequestState Success;
}
public class CsQuery.Web.ServerConfig : object {
    private static ServerConfig _Default;
    [CompilerGeneratedAttribute]
private string <UserAgent>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <Timeout>k__BackingField;
    public static ServerConfig Default { get; }
    public string UserAgent { get; public set; }
    public TimeSpan Timeout { get; public set; }
    public double TimeoutSeconds { get; public set; }
    private static ServerConfig();
    public static ServerConfig get_Default();
    public static ServerConfig Merge(ServerConfig options);
    public static void Apply(ServerConfig options, ICsqWebRequest request);
    [CompilerGeneratedAttribute]
public string get_UserAgent();
    [CompilerGeneratedAttribute]
public void set_UserAgent(string value);
    [CompilerGeneratedAttribute]
public TimeSpan get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(TimeSpan value);
    public double get_TimeoutSeconds();
    public void set_TimeoutSeconds(double value);
}
public static class CsQuery.Web.WebForms : object {
    public static CsQueryHttpContext CreateFromRender(Page page, Action`1<HtmlTextWriter> renderMethod, HtmlTextWriter writer);
    public static CsQueryHttpContext CreateFromRender(Page page, Action`1<HtmlTextWriter> renderMethod, HtmlTextWriter writer, HttpContext context);
}
public class CsQuery.Web.WebRequestState : object {
    private static int BufferSize;
    public Byte[] BufferRead;
    public IHttpWebRequest Request;
    public Stream ResponseStreamAsync;
    public AsyncWebRequest RequestInfo;
    public WebRequestState(AsyncWebRequest requestInfo);
}
public static class CsQuery.When : object {
    [CompilerGeneratedAttribute]
private static bool <Debug>k__BackingField;
    public static bool Debug { get; public set; }
    [CompilerGeneratedAttribute]
public static bool get_Debug();
    [CompilerGeneratedAttribute]
public static void set_Debug(bool value);
    public static Deferred Deferred();
    public static Deferred`1<T> Deferred();
    public static IPromise All(IPromise[] promises);
    public static IPromise All(int timeoutMilliseconds, IPromise[] promises);
    public static IPromise Timeout(int timeoutMilliseconds);
    public static IPromise Timer(int timerMilliseconds);
}
public enum HtmlParserSharp.Common.DoctypeExpectation : Enum {
    public int value__;
    public static DoctypeExpectation Html;
    public static DoctypeExpectation Html401Transitional;
    public static DoctypeExpectation Html401Strict;
    public static DoctypeExpectation Auto;
    public static DoctypeExpectation NoDoctypeErrors;
}
public enum HtmlParserSharp.Common.DocumentMode : Enum {
    public int value__;
    public static DocumentMode StandardsMode;
    public static DocumentMode AlmostStandardsMode;
    public static DocumentMode QuirksMode;
}
public class HtmlParserSharp.Common.DocumentModeEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private DocumentMode <Mode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PublicIdentifier>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SystemIdentifier>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Html4SpecificAdditionalErrorChecks>k__BackingField;
    public DocumentMode Mode { get; private set; }
    public string PublicIdentifier { get; private set; }
    public string SystemIdentifier { get; private set; }
    public bool Html4SpecificAdditionalErrorChecks { get; private set; }
    public DocumentModeEventArgs(DocumentMode mode, string publicIdentifier, string systemIdentifier, bool html4SpecificAdditionalErrorChecks);
    [CompilerGeneratedAttribute]
public DocumentMode get_Mode();
    [CompilerGeneratedAttribute]
private void set_Mode(DocumentMode value);
    [CompilerGeneratedAttribute]
public string get_PublicIdentifier();
    [CompilerGeneratedAttribute]
private void set_PublicIdentifier(string value);
    [CompilerGeneratedAttribute]
public string get_SystemIdentifier();
    [CompilerGeneratedAttribute]
private void set_SystemIdentifier(string value);
    [CompilerGeneratedAttribute]
public bool get_Html4SpecificAdditionalErrorChecks();
    [CompilerGeneratedAttribute]
private void set_Html4SpecificAdditionalErrorChecks(bool value);
}
public class HtmlParserSharp.Common.EncodingDetectedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private string <Encoding>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AcceptEncoding>k__BackingField;
    public string Encoding { get; private set; }
    public bool AcceptEncoding { get; public set; }
    public EncodingDetectedEventArgs(string encoding);
    [CompilerGeneratedAttribute]
public string get_Encoding();
    [CompilerGeneratedAttribute]
private void set_Encoding(string value);
    [CompilerGeneratedAttribute]
public bool get_AcceptEncoding();
    [CompilerGeneratedAttribute]
public void set_AcceptEncoding(bool value);
}
public interface HtmlParserSharp.Common.ITokenHandler {
    public bool WantsComments { get; }
    public bool IsCDataSectionAllowed { get; }
    public bool AllowSelfClosingTags { get; }
    public abstract virtual void StartTokenization(Tokenizer self);
    public abstract virtual bool get_WantsComments();
    public abstract virtual void Doctype(string name, string publicIdentifier, string systemIdentifier, bool forceQuirks);
    public abstract virtual void StartTag(ElementName eltName, HtmlAttributes attributes, bool selfClosing);
    public abstract virtual void EndTag(ElementName eltName);
    public abstract virtual void Comment(Char[] buf, int start, int length);
    public abstract virtual void Characters(Char[] buf, int start, int length);
    public abstract virtual void ZeroOriginatingReplacementCharacter();
    public abstract virtual void Eof();
    public abstract virtual void EndTokenization();
    public abstract virtual bool get_IsCDataSectionAllowed();
    public abstract virtual bool get_AllowSelfClosingTags();
}
[AttributeUsageAttribute("2368")]
public class HtmlParserSharp.Common.LocalAttribute : Attribute {
}
[AttributeUsageAttribute("2368")]
public class HtmlParserSharp.Common.NsUriAttribute : Attribute {
}
public class HtmlParserSharp.Common.ParserErrorEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsWarning>k__BackingField;
    public string Message { get; private set; }
    public bool IsWarning { get; private set; }
    public ParserErrorEventArgs(string message, bool isWarning);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
private void set_Message(string value);
    [CompilerGeneratedAttribute]
public bool get_IsWarning();
    [CompilerGeneratedAttribute]
private void set_IsWarning(bool value);
}
[AttributeUsageAttribute("2368")]
public class HtmlParserSharp.Common.PrefixAttribute : Attribute {
}
public enum HtmlParserSharp.Common.XmlViolationPolicy : Enum {
    public int value__;
    public static XmlViolationPolicy Allow;
    public static XmlViolationPolicy Fatal;
    public static XmlViolationPolicy AlterInfoset;
}
public class HtmlParserSharp.Core.AttributeName : object {
    public static int NCNAME_HTML;
    public static int NCNAME_FOREIGN;
    public static int NCNAME_LANG;
    public static int IS_XMLNS;
    public static int CASE_FOLDED;
    public static int BOOLEAN;
    public static int HTML;
    public static int MATHML;
    public static int SVG;
    public static int HTML_LANG;
    [NsUriAttribute]
private static String[] ALL_NO_NS;
    [NsUriAttribute]
private static String[] XMLNS_NS;
    [NsUriAttribute]
private static String[] XML_NS;
    [NsUriAttribute]
private static String[] XLINK_NS;
    [NsUriAttribute]
private static String[] LANG_NS;
    [PrefixAttribute]
private static String[] ALL_NO_PREFIX;
    [PrefixAttribute]
private static String[] XMLNS_PREFIX;
    [PrefixAttribute]
private static String[] XLINK_PREFIX;
    [PrefixAttribute]
private static String[] XML_PREFIX;
    [PrefixAttribute]
private static String[] LANG_PREFIX;
    [NsUriAttribute]
private String[] uri;
    [LocalAttribute]
private String[] local;
    [PrefixAttribute]
private String[] prefix;
    private int flags;
    private String[] qName;
    public static AttributeName D;
    public static AttributeName K;
    public static AttributeName R;
    public static AttributeName X;
    public static AttributeName Y;
    public static AttributeName Z;
    public static AttributeName BY;
    public static AttributeName CX;
    public static AttributeName CY;
    public static AttributeName DX;
    public static AttributeName DY;
    public static AttributeName G2;
    public static AttributeName G1;
    public static AttributeName FX;
    public static AttributeName FY;
    public static AttributeName K4;
    public static AttributeName K2;
    public static AttributeName K3;
    public static AttributeName K1;
    public static AttributeName ID;
    public static AttributeName IN;
    public static AttributeName U2;
    public static AttributeName U1;
    public static AttributeName RT;
    public static AttributeName RX;
    public static AttributeName RY;
    public static AttributeName TO;
    public static AttributeName Y2;
    public static AttributeName Y1;
    public static AttributeName X1;
    public static AttributeName X2;
    public static AttributeName ALT;
    public static AttributeName DIR;
    public static AttributeName DUR;
    public static AttributeName END;
    public static AttributeName FOR;
    public static AttributeName IN2;
    public static AttributeName MAX;
    public static AttributeName MIN;
    public static AttributeName LOW;
    public static AttributeName REL;
    public static AttributeName REV;
    public static AttributeName SRC;
    public static AttributeName AXIS;
    public static AttributeName ABBR;
    public static AttributeName BBOX;
    public static AttributeName CITE;
    public static AttributeName CODE;
    public static AttributeName BIAS;
    public static AttributeName COLS;
    public static AttributeName CLIP;
    public static AttributeName CHAR;
    public static AttributeName BASE;
    public static AttributeName EDGE;
    public static AttributeName DATA;
    public static AttributeName FILL;
    public static AttributeName FROM;
    public static AttributeName FORM;
    public static AttributeName FACE;
    public static AttributeName HIGH;
    public static AttributeName HREF;
    public static AttributeName OPEN;
    public static AttributeName ICON;
    public static AttributeName NAME;
    public static AttributeName MODE;
    public static AttributeName MASK;
    public static AttributeName LINK;
    public static AttributeName LANG;
    public static AttributeName LOOP;
    public static AttributeName LIST;
    public static AttributeName TYPE;
    public static AttributeName WHEN;
    public static AttributeName WRAP;
    public static AttributeName TEXT;
    public static AttributeName PATH;
    public static AttributeName PING;
    public static AttributeName REFX;
    public static AttributeName REFY;
    public static AttributeName SIZE;
    public static AttributeName SEED;
    public static AttributeName ROWS;
    public static AttributeName SPAN;
    public static AttributeName STEP;
    public static AttributeName ROLE;
    public static AttributeName XREF;
    public static AttributeName ASYNC;
    public static AttributeName ALINK;
    public static AttributeName ALIGN;
    public static AttributeName CLOSE;
    public static AttributeName COLOR;
    public static AttributeName CLASS;
    public static AttributeName CLEAR;
    public static AttributeName BEGIN;
    public static AttributeName DEPTH;
    public static AttributeName DEFER;
    public static AttributeName FENCE;
    public static AttributeName FRAME;
    public static AttributeName ISMAP;
    public static AttributeName ONEND;
    public static AttributeName INDEX;
    public static AttributeName ORDER;
    public static AttributeName OTHER;
    public static AttributeName ONCUT;
    public static AttributeName NARGS;
    public static AttributeName MEDIA;
    public static AttributeName LABEL;
    public static AttributeName LOCAL;
    public static AttributeName WIDTH;
    public static AttributeName TITLE;
    public static AttributeName VLINK;
    public static AttributeName VALUE;
    public static AttributeName SLOPE;
    public static AttributeName SHAPE;
    public static AttributeName SCOPE;
    public static AttributeName SCALE;
    public static AttributeName SPEED;
    public static AttributeName STYLE;
    public static AttributeName RULES;
    public static AttributeName STEMH;
    public static AttributeName STEMV;
    public static AttributeName START;
    public static AttributeName XMLNS;
    public static AttributeName ACCEPT;
    public static AttributeName ACCENT;
    public static AttributeName ASCENT;
    public static AttributeName ACTIVE;
    public static AttributeName ALTIMG;
    public static AttributeName ACTION;
    public static AttributeName BORDER;
    public static AttributeName CURSOR;
    public static AttributeName COORDS;
    public static AttributeName FILTER;
    public static AttributeName FORMAT;
    public static AttributeName HIDDEN;
    public static AttributeName HSPACE;
    public static AttributeName HEIGHT;
    public static AttributeName ONMOVE;
    public static AttributeName ONLOAD;
    public static AttributeName ONDRAG;
    public static AttributeName ORIGIN;
    public static AttributeName ONZOOM;
    public static AttributeName ONHELP;
    public static AttributeName ONSTOP;
    public static AttributeName ONDROP;
    public static AttributeName ONBLUR;
    public static AttributeName OBJECT;
    public static AttributeName OFFSET;
    public static AttributeName ORIENT;
    public static AttributeName ONCOPY;
    public static AttributeName NOWRAP;
    public static AttributeName NOHREF;
    public static AttributeName MACROS;
    public static AttributeName METHOD;
    public static AttributeName LOWSRC;
    public static AttributeName LSPACE;
    public static AttributeName LQUOTE;
    public static AttributeName USEMAP;
    public static AttributeName WIDTHS;
    public static AttributeName TARGET;
    public static AttributeName VALUES;
    public static AttributeName VALIGN;
    public static AttributeName VSPACE;
    public static AttributeName POSTER;
    public static AttributeName POINTS;
    public static AttributeName PROMPT;
    public static AttributeName SCOPED;
    public static AttributeName STRING;
    public static AttributeName SCHEME;
    public static AttributeName STROKE;
    public static AttributeName RADIUS;
    public static AttributeName RESULT;
    public static AttributeName REPEAT;
    public static AttributeName RSPACE;
    public static AttributeName ROTATE;
    public static AttributeName RQUOTE;
    public static AttributeName ALTTEXT;
    public static AttributeName ARCHIVE;
    public static AttributeName AZIMUTH;
    public static AttributeName CLOSURE;
    public static AttributeName CHECKED;
    public static AttributeName CLASSID;
    public static AttributeName CHAROFF;
    public static AttributeName BGCOLOR;
    public static AttributeName COLSPAN;
    public static AttributeName CHARSET;
    public static AttributeName COMPACT;
    public static AttributeName CONTENT;
    public static AttributeName ENCTYPE;
    public static AttributeName DATASRC;
    public static AttributeName DATAFLD;
    public static AttributeName DECLARE;
    public static AttributeName DISPLAY;
    public static AttributeName DIVISOR;
    public static AttributeName DEFAULT;
    public static AttributeName DESCENT;
    public static AttributeName KERNING;
    public static AttributeName HANGING;
    public static AttributeName HEADERS;
    public static AttributeName ONPASTE;
    public static AttributeName ONCLICK;
    public static AttributeName OPTIMUM;
    public static AttributeName ONBEGIN;
    public static AttributeName ONKEYUP;
    public static AttributeName ONFOCUS;
    public static AttributeName ONERROR;
    public static AttributeName ONINPUT;
    public static AttributeName ONABORT;
    public static AttributeName ONSTART;
    public static AttributeName ONRESET;
    public static AttributeName OPACITY;
    public static AttributeName NOSHADE;
    public static AttributeName MINSIZE;
    public static AttributeName MAXSIZE;
    public static AttributeName LARGEOP;
    public static AttributeName UNICODE;
    public static AttributeName TARGETX;
    public static AttributeName TARGETY;
    public static AttributeName VIEWBOX;
    public static AttributeName VERSION;
    public static AttributeName PATTERN;
    public static AttributeName PROFILE;
    public static AttributeName SPACING;
    public static AttributeName RESTART;
    public static AttributeName ROWSPAN;
    public static AttributeName SANDBOX;
    public static AttributeName SUMMARY;
    public static AttributeName STANDBY;
    public static AttributeName REPLACE;
    public static AttributeName AUTOPLAY;
    public static AttributeName ADDITIVE;
    public static AttributeName CALCMODE;
    public static AttributeName CODETYPE;
    public static AttributeName CODEBASE;
    public static AttributeName CONTROLS;
    public static AttributeName BEVELLED;
    public static AttributeName BASELINE;
    public static AttributeName EXPONENT;
    public static AttributeName EDGEMODE;
    public static AttributeName ENCODING;
    public static AttributeName GLYPHREF;
    public static AttributeName DATETIME;
    public static AttributeName DISABLED;
    public static AttributeName FONTSIZE;
    public static AttributeName KEYTIMES;
    public static AttributeName PANOSE_1;
    public static AttributeName HREFLANG;
    public static AttributeName ONRESIZE;
    public static AttributeName ONCHANGE;
    public static AttributeName ONBOUNCE;
    public static AttributeName ONUNLOAD;
    public static AttributeName ONFINISH;
    public static AttributeName ONSCROLL;
    public static AttributeName OPERATOR;
    public static AttributeName OVERFLOW;
    public static AttributeName ONSUBMIT;
    public static AttributeName ONREPEAT;
    public static AttributeName ONSELECT;
    public static AttributeName NOTATION;
    public static AttributeName NORESIZE;
    public static AttributeName MANIFEST;
    public static AttributeName MATHSIZE;
    public static AttributeName MULTIPLE;
    public static AttributeName LONGDESC;
    public static AttributeName LANGUAGE;
    public static AttributeName TEMPLATE;
    public static AttributeName TABINDEX;
    public static AttributeName READONLY;
    public static AttributeName SELECTED;
    public static AttributeName ROWLINES;
    public static AttributeName SEAMLESS;
    public static AttributeName ROWALIGN;
    public static AttributeName STRETCHY;
    public static AttributeName REQUIRED;
    public static AttributeName XML_BASE;
    public static AttributeName XML_LANG;
    public static AttributeName X_HEIGHT;
    public static AttributeName ARIA_OWNS;
    public static AttributeName AUTOFOCUS;
    public static AttributeName ARIA_SORT;
    public static AttributeName ACCESSKEY;
    public static AttributeName ARIA_BUSY;
    public static AttributeName ARIA_GRAB;
    public static AttributeName AMPLITUDE;
    public static AttributeName ARIA_LIVE;
    public static AttributeName CLIP_RULE;
    public static AttributeName CLIP_PATH;
    public static AttributeName EQUALROWS;
    public static AttributeName ELEVATION;
    public static AttributeName DIRECTION;
    public static AttributeName DRAGGABLE;
    public static AttributeName FILTERRES;
    public static AttributeName FILL_RULE;
    public static AttributeName FONTSTYLE;
    public static AttributeName FONT_SIZE;
    public static AttributeName KEYPOINTS;
    public static AttributeName HIDEFOCUS;
    public static AttributeName ONMESSAGE;
    public static AttributeName INTERCEPT;
    public static AttributeName ONDRAGEND;
    public static AttributeName ONMOVEEND;
    public static AttributeName ONINVALID;
    public static AttributeName ONKEYDOWN;
    public static AttributeName ONFOCUSIN;
    public static AttributeName ONMOUSEUP;
    public static AttributeName INPUTMODE;
    public static AttributeName ONROWEXIT;
    public static AttributeName MATHCOLOR;
    public static AttributeName MASKUNITS;
    public static AttributeName MAXLENGTH;
    public static AttributeName LINEBREAK;
    public static AttributeName TRANSFORM;
    public static AttributeName V_HANGING;
    public static AttributeName VALUETYPE;
    public static AttributeName POINTSATZ;
    public static AttributeName POINTSATX;
    public static AttributeName POINTSATY;
    public static AttributeName SYMMETRIC;
    public static AttributeName SCROLLING;
    public static AttributeName REPEATDUR;
    public static AttributeName SELECTION;
    public static AttributeName SEPARATOR;
    public static AttributeName XML_SPACE;
    public static AttributeName AUTOSUBMIT;
    public static AttributeName ALPHABETIC;
    public static AttributeName ACTIONTYPE;
    public static AttributeName ACCUMULATE;
    public static AttributeName ARIA_LEVEL;
    public static AttributeName COLUMNSPAN;
    public static AttributeName CAP_HEIGHT;
    public static AttributeName BACKGROUND;
    public static AttributeName GLYPH_NAME;
    public static AttributeName GROUPALIGN;
    public static AttributeName FONTFAMILY;
    public static AttributeName FONTWEIGHT;
    public static AttributeName FONT_STYLE;
    public static AttributeName KEYSPLINES;
    public static AttributeName HTTP_EQUIV;
    public static AttributeName ONACTIVATE;
    public static AttributeName OCCURRENCE;
    public static AttributeName IRRELEVANT;
    public static AttributeName ONDBLCLICK;
    public static AttributeName ONDRAGDROP;
    public static AttributeName ONKEYPRESS;
    public static AttributeName ONROWENTER;
    public static AttributeName ONDRAGOVER;
    public static AttributeName ONFOCUSOUT;
    public static AttributeName ONMOUSEOUT;
    public static AttributeName NUMOCTAVES;
    public static AttributeName MARKER_MID;
    public static AttributeName MARKER_END;
    public static AttributeName TEXTLENGTH;
    public static AttributeName VISIBILITY;
    public static AttributeName VIEWTARGET;
    public static AttributeName VERT_ADV_Y;
    public static AttributeName PATHLENGTH;
    public static AttributeName REPEAT_MAX;
    public static AttributeName RADIOGROUP;
    public static AttributeName STOP_COLOR;
    public static AttributeName SEPARATORS;
    public static AttributeName REPEAT_MIN;
    public static AttributeName ROWSPACING;
    public static AttributeName ZOOMANDPAN;
    public static AttributeName XLINK_TYPE;
    public static AttributeName XLINK_ROLE;
    public static AttributeName XLINK_HREF;
    public static AttributeName XLINK_SHOW;
    public static AttributeName ACCENTUNDER;
    public static AttributeName ARIA_SECRET;
    public static AttributeName ARIA_ATOMIC;
    public static AttributeName ARIA_HIDDEN;
    public static AttributeName ARIA_FLOWTO;
    public static AttributeName ARABIC_FORM;
    public static AttributeName CELLPADDING;
    public static AttributeName CELLSPACING;
    public static AttributeName COLUMNWIDTH;
    public static AttributeName CROSSORIGIN;
    public static AttributeName COLUMNALIGN;
    public static AttributeName COLUMNLINES;
    public static AttributeName CONTEXTMENU;
    public static AttributeName BASEPROFILE;
    public static AttributeName FONT_FAMILY;
    public static AttributeName FRAMEBORDER;
    public static AttributeName FILTERUNITS;
    public static AttributeName FLOOD_COLOR;
    public static AttributeName FONT_WEIGHT;
    public static AttributeName HORIZ_ADV_X;
    public static AttributeName ONDRAGLEAVE;
    public static AttributeName ONMOUSEMOVE;
    public static AttributeName ORIENTATION;
    public static AttributeName ONMOUSEDOWN;
    public static AttributeName ONMOUSEOVER;
    public static AttributeName ONDRAGENTER;
    public static AttributeName IDEOGRAPHIC;
    public static AttributeName ONBEFORECUT;
    public static AttributeName ONFORMINPUT;
    public static AttributeName ONDRAGSTART;
    public static AttributeName ONMOVESTART;
    public static AttributeName MARKERUNITS;
    public static AttributeName MATHVARIANT;
    public static AttributeName MARGINWIDTH;
    public static AttributeName MARKERWIDTH;
    public static AttributeName TEXT_ANCHOR;
    public static AttributeName TABLEVALUES;
    public static AttributeName SCRIPTLEVEL;
    public static AttributeName REPEATCOUNT;
    public static AttributeName STITCHTILES;
    public static AttributeName STARTOFFSET;
    public static AttributeName SCROLLDELAY;
    public static AttributeName XMLNS_XLINK;
    public static AttributeName XLINK_TITLE;
    public static AttributeName ARIA_INVALID;
    public static AttributeName ARIA_PRESSED;
    public static AttributeName ARIA_CHECKED;
    public static AttributeName AUTOCOMPLETE;
    public static AttributeName ARIA_SETSIZE;
    public static AttributeName ARIA_CHANNEL;
    public static AttributeName EQUALCOLUMNS;
    public static AttributeName DISPLAYSTYLE;
    public static AttributeName DATAFORMATAS;
    public static AttributeName FILL_OPACITY;
    public static AttributeName FONT_VARIANT;
    public static AttributeName FONT_STRETCH;
    public static AttributeName FRAMESPACING;
    public static AttributeName KERNELMATRIX;
    public static AttributeName ONDEACTIVATE;
    public static AttributeName ONROWSDELETE;
    public static AttributeName ONMOUSELEAVE;
    public static AttributeName ONFORMCHANGE;
    public static AttributeName ONCELLCHANGE;
    public static AttributeName ONMOUSEWHEEL;
    public static AttributeName ONMOUSEENTER;
    public static AttributeName ONAFTERPRINT;
    public static AttributeName ONBEFORECOPY;
    public static AttributeName MARGINHEIGHT;
    public static AttributeName MARKERHEIGHT;
    public static AttributeName MARKER_START;
    public static AttributeName MATHEMATICAL;
    public static AttributeName LENGTHADJUST;
    public static AttributeName UNSELECTABLE;
    public static AttributeName UNICODE_BIDI;
    public static AttributeName UNITS_PER_EM;
    public static AttributeName WORD_SPACING;
    public static AttributeName WRITING_MODE;
    public static AttributeName V_ALPHABETIC;
    public static AttributeName PATTERNUNITS;
    public static AttributeName SPREADMETHOD;
    public static AttributeName SURFACESCALE;
    public static AttributeName STROKE_WIDTH;
    public static AttributeName REPEAT_START;
    public static AttributeName STDDEVIATION;
    public static AttributeName STOP_OPACITY;
    public static AttributeName ARIA_CONTROLS;
    public static AttributeName ARIA_HASPOPUP;
    public static AttributeName ACCENT_HEIGHT;
    public static AttributeName ARIA_VALUENOW;
    public static AttributeName ARIA_RELEVANT;
    public static AttributeName ARIA_POSINSET;
    public static AttributeName ARIA_VALUEMAX;
    public static AttributeName ARIA_READONLY;
    public static AttributeName ARIA_SELECTED;
    public static AttributeName ARIA_REQUIRED;
    public static AttributeName ARIA_EXPANDED;
    public static AttributeName ARIA_DISABLED;
    public static AttributeName ATTRIBUTETYPE;
    public static AttributeName ATTRIBUTENAME;
    public static AttributeName ARIA_DATATYPE;
    public static AttributeName ARIA_VALUEMIN;
    public static AttributeName BASEFREQUENCY;
    public static AttributeName COLUMNSPACING;
    public static AttributeName COLOR_PROFILE;
    public static AttributeName CLIPPATHUNITS;
    public static AttributeName DEFINITIONURL;
    public static AttributeName GRADIENTUNITS;
    public static AttributeName FLOOD_OPACITY;
    public static AttributeName ONAFTERUPDATE;
    public static AttributeName ONERRORUPDATE;
    public static AttributeName ONBEFOREPASTE;
    public static AttributeName ONLOSECAPTURE;
    public static AttributeName ONCONTEXTMENU;
    public static AttributeName ONSELECTSTART;
    public static AttributeName ONBEFOREPRINT;
    public static AttributeName MOVABLELIMITS;
    public static AttributeName LINETHICKNESS;
    public static AttributeName UNICODE_RANGE;
    public static AttributeName THINMATHSPACE;
    public static AttributeName VERT_ORIGIN_X;
    public static AttributeName VERT_ORIGIN_Y;
    public static AttributeName V_IDEOGRAPHIC;
    public static AttributeName PRESERVEALPHA;
    public static AttributeName SCRIPTMINSIZE;
    public static AttributeName SPECIFICATION;
    public static AttributeName XLINK_ACTUATE;
    public static AttributeName XLINK_ARCROLE;
    public static AttributeName ACCEPT_CHARSET;
    public static AttributeName ALIGNMENTSCOPE;
    public static AttributeName ARIA_MULTILINE;
    public static AttributeName BASELINE_SHIFT;
    public static AttributeName HORIZ_ORIGIN_X;
    public static AttributeName HORIZ_ORIGIN_Y;
    public static AttributeName ONBEFOREUPDATE;
    public static AttributeName ONFILTERCHANGE;
    public static AttributeName ONROWSINSERTED;
    public static AttributeName ONBEFOREUNLOAD;
    public static AttributeName MATHBACKGROUND;
    public static AttributeName LETTER_SPACING;
    public static AttributeName LIGHTING_COLOR;
    public static AttributeName THICKMATHSPACE;
    public static AttributeName TEXT_RENDERING;
    public static AttributeName V_MATHEMATICAL;
    public static AttributeName POINTER_EVENTS;
    public static AttributeName PRIMITIVEUNITS;
    public static AttributeName SYSTEMLANGUAGE;
    public static AttributeName STROKE_LINECAP;
    public static AttributeName SUBSCRIPTSHIFT;
    public static AttributeName STROKE_OPACITY;
    public static AttributeName ARIA_DROPEFFECT;
    public static AttributeName ARIA_LABELLEDBY;
    public static AttributeName ARIA_TEMPLATEID;
    public static AttributeName COLOR_RENDERING;
    public static AttributeName CONTENTEDITABLE;
    public static AttributeName DIFFUSECONSTANT;
    public static AttributeName ONDATAAVAILABLE;
    public static AttributeName ONCONTROLSELECT;
    public static AttributeName IMAGE_RENDERING;
    public static AttributeName MEDIUMMATHSPACE;
    public static AttributeName TEXT_DECORATION;
    public static AttributeName SHAPE_RENDERING;
    public static AttributeName STROKE_LINEJOIN;
    public static AttributeName REPEAT_TEMPLATE;
    public static AttributeName ARIA_DESCRIBEDBY;
    public static AttributeName CONTENTSTYLETYPE;
    public static AttributeName FONT_SIZE_ADJUST;
    public static AttributeName KERNELUNITLENGTH;
    public static AttributeName ONBEFOREACTIVATE;
    public static AttributeName ONPROPERTYCHANGE;
    public static AttributeName ONDATASETCHANGED;
    public static AttributeName MASKCONTENTUNITS;
    public static AttributeName PATTERNTRANSFORM;
    public static AttributeName REQUIREDFEATURES;
    public static AttributeName RENDERING_INTENT;
    public static AttributeName SPECULAREXPONENT;
    public static AttributeName SPECULARCONSTANT;
    public static AttributeName SUPERSCRIPTSHIFT;
    public static AttributeName STROKE_DASHARRAY;
    public static AttributeName XCHANNELSELECTOR;
    public static AttributeName YCHANNELSELECTOR;
    public static AttributeName ARIA_AUTOCOMPLETE;
    public static AttributeName CONTENTSCRIPTTYPE;
    public static AttributeName ENABLE_BACKGROUND;
    public static AttributeName DOMINANT_BASELINE;
    public static AttributeName GRADIENTTRANSFORM;
    public static AttributeName ONBEFORDEACTIVATE;
    public static AttributeName ONDATASETCOMPLETE;
    public static AttributeName OVERLINE_POSITION;
    public static AttributeName ONBEFOREEDITFOCUS;
    public static AttributeName LIMITINGCONEANGLE;
    public static AttributeName VERYTHINMATHSPACE;
    public static AttributeName STROKE_DASHOFFSET;
    public static AttributeName STROKE_MITERLIMIT;
    public static AttributeName ALIGNMENT_BASELINE;
    public static AttributeName ONREADYSTATECHANGE;
    public static AttributeName OVERLINE_THICKNESS;
    public static AttributeName UNDERLINE_POSITION;
    public static AttributeName VERYTHICKMATHSPACE;
    public static AttributeName REQUIREDEXTENSIONS;
    public static AttributeName COLOR_INTERPOLATION;
    public static AttributeName UNDERLINE_THICKNESS;
    public static AttributeName PRESERVEASPECTRATIO;
    public static AttributeName PATTERNCONTENTUNITS;
    public static AttributeName ARIA_MULTISELECTABLE;
    public static AttributeName SCRIPTSIZEMULTIPLIER;
    public static AttributeName ARIA_ACTIVEDESCENDANT;
    public static AttributeName VERYVERYTHINMATHSPACE;
    public static AttributeName VERYVERYTHICKMATHSPACE;
    public static AttributeName STRIKETHROUGH_POSITION;
    public static AttributeName STRIKETHROUGH_THICKNESS;
    public static AttributeName EXTERNALRESOURCESREQUIRED;
    public static AttributeName GLYPH_ORIENTATION_VERTICAL;
    public static AttributeName COLOR_INTERPOLATION_FILTERS;
    public static AttributeName GLYPH_ORIENTATION_HORIZONTAL;
    private static AttributeName[] ATTRIBUTE_NAMES;
    private static Int32[] ATTRIBUTE_HASHES;
    public bool IsXmlns { get; }
    internal bool IsCaseFolded { get; }
    internal bool IsBoolean { get; }
    private AttributeName(String[] uri, String[] local, String[] prefix, int flags);
    private static AttributeName();
    private static String[] COMPUTE_QNAME(String[] local, String[] prefix);
    [LocalAttribute]
private static String[] SVG_DIFFERENT(string name, string camel);
    [LocalAttribute]
private static String[] MATH_DIFFERENT(string name, string camel);
    [LocalAttribute]
private static String[] COLONIFIED_LOCAL(string name, string suffix);
    [LocalAttribute]
private static String[] SAME_LOCAL(string name);
    internal static AttributeName NameByBuffer(Char[] buf, int offset, int length, bool checkNcName);
    private static int BufToHash(Char[] buf, int len);
    private static AttributeName CreateAttributeName(string name, bool checkNcName);
    public AttributeName CloneAttributeName();
    internal static AttributeName Create(string name);
    public bool IsNcName(int mode);
    public bool get_IsXmlns();
    internal bool get_IsCaseFolded();
    internal bool get_IsBoolean();
    public string GetQName(int mode);
    [NsUriAttribute]
public string GetUri(int mode);
    [LocalAttribute]
public string GetLocal(int mode);
    [PrefixAttribute]
public string GetPrefix(int mode);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public static bool op_Equality(AttributeName a, AttributeName b);
    public static bool op_Inequality(AttributeName a, AttributeName b);
}
public enum HtmlParserSharp.Core.CharsetState : Enum {
    public int value__;
    public static CharsetState CHARSET_INITIAL;
    public static CharsetState CHARSET_C;
    public static CharsetState CHARSET_H;
    public static CharsetState CHARSET_A;
    public static CharsetState CHARSET_R;
    public static CharsetState CHARSET_S;
    public static CharsetState CHARSET_E;
    public static CharsetState CHARSET_T;
    public static CharsetState CHARSET_EQUALS;
    public static CharsetState CHARSET_SINGLE_QUOTED;
    public static CharsetState CHARSET_DOUBLE_QUOTED;
    public static CharsetState CHARSET_UNQUOTED;
}
public abstract class HtmlParserSharp.Core.CoalescingTreeBuilder`1 : TreeBuilder`1<T> {
    protected virtual void AppendCharacters(T parent, Char[] buf, int start, int length);
    protected virtual void AppendCharacters(T parent, StringBuilder sb);
    protected virtual void AppendIsindexPrompt(T parent);
    protected abstract virtual void AppendCharacters(T parent, string text);
    protected virtual void AppendComment(T parent, Char[] buf, int start, int length);
    protected abstract virtual void AppendComment(T parent, string comment);
    protected virtual void AppendCommentToDocument(Char[] buf, int start, int length);
    protected abstract virtual void AppendCommentToDocument(string comment);
    protected virtual void InsertFosterParentedCharacters(StringBuilder sb, T table, T stackParent);
    protected abstract virtual void InsertFosterParentedCharacters(string text, T table, T stackParent);
}
public enum HtmlParserSharp.Core.DispatchGroup : Enum {
    public int value__;
    public static DispatchGroup OTHER;
    public static DispatchGroup A;
    public static DispatchGroup BASE;
    public static DispatchGroup BODY;
    public static DispatchGroup BR;
    public static DispatchGroup BUTTON;
    public static DispatchGroup CAPTION;
    public static DispatchGroup COL;
    public static DispatchGroup COLGROUP;
    public static DispatchGroup FORM;
    public static DispatchGroup FRAME;
    public static DispatchGroup FRAMESET;
    public static DispatchGroup IMAGE;
    public static DispatchGroup INPUT;
    public static DispatchGroup ISINDEX;
    public static DispatchGroup LI;
    public static DispatchGroup LINK_OR_BASEFONT_OR_BGSOUND;
    public static DispatchGroup MATH;
    public static DispatchGroup META;
    public static DispatchGroup SVG;
    public static DispatchGroup HEAD;
    public static DispatchGroup HR;
    public static DispatchGroup HTML;
    public static DispatchGroup NOBR;
    public static DispatchGroup NOFRAMES;
    public static DispatchGroup NOSCRIPT;
    public static DispatchGroup OPTGROUP;
    public static DispatchGroup OPTION;
    public static DispatchGroup P;
    public static DispatchGroup PLAINTEXT;
    public static DispatchGroup SCRIPT;
    public static DispatchGroup SELECT;
    public static DispatchGroup STYLE;
    public static DispatchGroup TABLE;
    public static DispatchGroup TEXTAREA;
    public static DispatchGroup TITLE;
    public static DispatchGroup TR;
    public static DispatchGroup XMP;
    public static DispatchGroup TBODY_OR_THEAD_OR_TFOOT;
    public static DispatchGroup TD_OR_TH;
    public static DispatchGroup DD_OR_DT;
    public static DispatchGroup H1_OR_H2_OR_H3_OR_H4_OR_H5_OR_H6;
    public static DispatchGroup MARQUEE_OR_APPLET;
    public static DispatchGroup PRE_OR_LISTING;
    public static DispatchGroup B_OR_BIG_OR_CODE_OR_EM_OR_I_OR_S_OR_SMALL_OR_STRIKE_OR_STRONG_OR_TT_OR_U;
    public static DispatchGroup UL_OR_OL_OR_DL;
    public static DispatchGroup IFRAME;
    public static DispatchGroup EMBED_OR_IMG;
    public static DispatchGroup AREA_OR_WBR;
    public static DispatchGroup DIV_OR_BLOCKQUOTE_OR_CENTER_OR_MENU;
    public static DispatchGroup ADDRESS_OR_ARTICLE_OR_ASIDE_OR_DETAILS_OR_DIR_OR_FIGCAPTION_OR_FIGURE_OR_FOOTER_OR_HEADER_OR_HGROUP_OR_NAV_OR_SECTION_OR_SUMMARY;
    public static DispatchGroup RUBY_OR_SPAN_OR_SUB_OR_SUP_OR_VAR;
    public static DispatchGroup RT_OR_RP;
    public static DispatchGroup COMMAND;
    public static DispatchGroup PARAM_OR_SOURCE_OR_TRACK;
    public static DispatchGroup MGLYPH_OR_MALIGNMARK;
    public static DispatchGroup MI_MO_MN_MS_MTEXT;
    public static DispatchGroup ANNOTATION_XML;
    public static DispatchGroup FOREIGNOBJECT_OR_DESC;
    public static DispatchGroup NOEMBED;
    public static DispatchGroup FIELDSET;
    public static DispatchGroup OUTPUT_OR_LABEL;
    public static DispatchGroup OBJECT;
    public static DispatchGroup FONT;
    public static DispatchGroup KEYGEN;
    public static DispatchGroup MENUITEM;
}
public class HtmlParserSharp.Core.ElementName : object {
    public static int GROUP_MASK;
    public static int CUSTOM;
    public static int SPECIAL;
    public static int FOSTER_PARENTING;
    public static int SCOPING;
    public static int SCOPING_AS_SVG;
    public static int SCOPING_AS_MATHML;
    public static int HTML_INTEGRATION_POINT;
    public static int OPTIONAL_END_TAG;
    public static ElementName NULL_ELEMENT_NAME;
    [LocalAttribute]
public string name;
    [LocalAttribute]
public string camelCaseName;
    public int flags;
    public static ElementName A;
    public static ElementName B;
    public static ElementName G;
    public static ElementName I;
    public static ElementName P;
    public static ElementName Q;
    public static ElementName S;
    public static ElementName U;
    public static ElementName BR;
    public static ElementName CI;
    public static ElementName CN;
    public static ElementName DD;
    public static ElementName DL;
    public static ElementName DT;
    public static ElementName EM;
    public static ElementName EQ;
    public static ElementName FN;
    public static ElementName H1;
    public static ElementName H2;
    public static ElementName H3;
    public static ElementName H4;
    public static ElementName H5;
    public static ElementName H6;
    public static ElementName GT;
    public static ElementName HR;
    public static ElementName IN;
    public static ElementName LI;
    public static ElementName LN;
    public static ElementName LT;
    public static ElementName MI;
    public static ElementName MN;
    public static ElementName MO;
    public static ElementName MS;
    public static ElementName OL;
    public static ElementName OR;
    public static ElementName PI;
    public static ElementName RP;
    public static ElementName RT;
    public static ElementName TD;
    public static ElementName TH;
    public static ElementName TR;
    public static ElementName TT;
    public static ElementName UL;
    public static ElementName AND;
    public static ElementName ARG;
    public static ElementName ABS;
    public static ElementName BIG;
    public static ElementName BDO;
    public static ElementName CSC;
    public static ElementName COL;
    public static ElementName COS;
    public static ElementName COT;
    public static ElementName DEL;
    public static ElementName DFN;
    public static ElementName DIR;
    public static ElementName DIV;
    public static ElementName EXP;
    public static ElementName GCD;
    public static ElementName GEQ;
    public static ElementName IMG;
    public static ElementName INS;
    public static ElementName INT;
    public static ElementName KBD;
    public static ElementName LOG;
    public static ElementName LCM;
    public static ElementName LEQ;
    public static ElementName MTD;
    public static ElementName MIN;
    public static ElementName MAP;
    public static ElementName MTR;
    public static ElementName MAX;
    public static ElementName NEQ;
    public static ElementName NOT;
    public static ElementName NAV;
    public static ElementName PRE;
    public static ElementName REM;
    public static ElementName SUB;
    public static ElementName SEC;
    public static ElementName SVG;
    public static ElementName SUM;
    public static ElementName SIN;
    public static ElementName SEP;
    public static ElementName SUP;
    public static ElementName SET;
    public static ElementName TAN;
    public static ElementName USE;
    public static ElementName VAR;
    public static ElementName WBR;
    public static ElementName XMP;
    public static ElementName XOR;
    public static ElementName AREA;
    public static ElementName ABBR;
    public static ElementName BASE;
    public static ElementName BVAR;
    public static ElementName BODY;
    public static ElementName CARD;
    public static ElementName CODE;
    public static ElementName CITE;
    public static ElementName CSCH;
    public static ElementName COSH;
    public static ElementName COTH;
    public static ElementName CURL;
    public static ElementName DESC;
    public static ElementName DIFF;
    public static ElementName DEFS;
    public static ElementName FORM;
    public static ElementName FONT;
    public static ElementName GRAD;
    public static ElementName HEAD;
    public static ElementName HTML;
    public static ElementName LINE;
    public static ElementName LINK;
    public static ElementName LIST;
    public static ElementName META;
    public static ElementName MSUB;
    public static ElementName MODE;
    public static ElementName MATH;
    public static ElementName MARK;
    public static ElementName MASK;
    public static ElementName MEAN;
    public static ElementName MSUP;
    public static ElementName MENU;
    public static ElementName MROW;
    public static ElementName NONE;
    public static ElementName NOBR;
    public static ElementName NEST;
    public static ElementName PATH;
    public static ElementName PLUS;
    public static ElementName RULE;
    public static ElementName REAL;
    public static ElementName RELN;
    public static ElementName RECT;
    public static ElementName ROOT;
    public static ElementName RUBY;
    public static ElementName SECH;
    public static ElementName SINH;
    public static ElementName SPAN;
    public static ElementName SAMP;
    public static ElementName STOP;
    public static ElementName SDEV;
    public static ElementName TIME;
    public static ElementName TRUE;
    public static ElementName TREF;
    public static ElementName TANH;
    public static ElementName TEXT;
    public static ElementName VIEW;
    public static ElementName ASIDE;
    public static ElementName AUDIO;
    public static ElementName APPLY;
    public static ElementName EMBED;
    public static ElementName FRAME;
    public static ElementName FALSE;
    public static ElementName FLOOR;
    public static ElementName GLYPH;
    public static ElementName HKERN;
    public static ElementName IMAGE;
    public static ElementName IDENT;
    public static ElementName INPUT;
    public static ElementName LABEL;
    public static ElementName LIMIT;
    public static ElementName MFRAC;
    public static ElementName MPATH;
    public static ElementName METER;
    public static ElementName MOVER;
    public static ElementName MINUS;
    public static ElementName MROOT;
    public static ElementName MSQRT;
    public static ElementName MTEXT;
    public static ElementName NOTIN;
    public static ElementName PIECE;
    public static ElementName PARAM;
    public static ElementName POWER;
    public static ElementName REALS;
    public static ElementName STYLE;
    public static ElementName SMALL;
    public static ElementName THEAD;
    public static ElementName TABLE;
    public static ElementName TITLE;
    public static ElementName TRACK;
    public static ElementName TSPAN;
    public static ElementName TIMES;
    public static ElementName TFOOT;
    public static ElementName TBODY;
    public static ElementName UNION;
    public static ElementName VKERN;
    public static ElementName VIDEO;
    public static ElementName ARCSEC;
    public static ElementName ARCCSC;
    public static ElementName ARCTAN;
    public static ElementName ARCSIN;
    public static ElementName ARCCOS;
    public static ElementName APPLET;
    public static ElementName ARCCOT;
    public static ElementName APPROX;
    public static ElementName BUTTON;
    public static ElementName CIRCLE;
    public static ElementName CENTER;
    public static ElementName CURSOR;
    public static ElementName CANVAS;
    public static ElementName DIVIDE;
    public static ElementName DEGREE;
    public static ElementName DOMAIN;
    public static ElementName EXISTS;
    public static ElementName FETILE;
    public static ElementName FIGURE;
    public static ElementName FORALL;
    public static ElementName FILTER;
    public static ElementName FOOTER;
    public static ElementName HGROUP;
    public static ElementName HEADER;
    public static ElementName IFRAME;
    public static ElementName KEYGEN;
    public static ElementName LAMBDA;
    public static ElementName LEGEND;
    public static ElementName MSPACE;
    public static ElementName MTABLE;
    public static ElementName MSTYLE;
    public static ElementName MGLYPH;
    public static ElementName MEDIAN;
    public static ElementName MUNDER;
    public static ElementName MARKER;
    public static ElementName MERROR;
    public static ElementName MOMENT;
    public static ElementName MATRIX;
    public static ElementName OPTION;
    public static ElementName OBJECT;
    public static ElementName OUTPUT;
    public static ElementName PRIMES;
    public static ElementName SOURCE;
    public static ElementName STRIKE;
    public static ElementName STRONG;
    public static ElementName SWITCH;
    public static ElementName SYMBOL;
    public static ElementName SELECT;
    public static ElementName SUBSET;
    public static ElementName SCRIPT;
    public static ElementName TBREAK;
    public static ElementName VECTOR;
    public static ElementName ARTICLE;
    public static ElementName ANIMATE;
    public static ElementName ARCSECH;
    public static ElementName ARCCSCH;
    public static ElementName ARCTANH;
    public static ElementName ARCSINH;
    public static ElementName ARCCOSH;
    public static ElementName ARCCOTH;
    public static ElementName ACRONYM;
    public static ElementName ADDRESS;
    public static ElementName BGSOUND;
    public static ElementName COMMAND;
    public static ElementName COMPOSE;
    public static ElementName CEILING;
    public static ElementName CSYMBOL;
    public static ElementName CAPTION;
    public static ElementName DISCARD;
    public static ElementName DECLARE;
    public static ElementName DETAILS;
    public static ElementName ELLIPSE;
    public static ElementName FEFUNCA;
    public static ElementName FEFUNCB;
    public static ElementName FEBLEND;
    public static ElementName FEFLOOD;
    public static ElementName FEIMAGE;
    public static ElementName FEMERGE;
    public static ElementName FEFUNCG;
    public static ElementName FEFUNCR;
    public static ElementName HANDLER;
    public static ElementName INVERSE;
    public static ElementName IMPLIES;
    public static ElementName ISINDEX;
    public static ElementName LOGBASE;
    public static ElementName LISTING;
    public static ElementName MFENCED;
    public static ElementName MPADDED;
    public static ElementName MARQUEE;
    public static ElementName MACTION;
    public static ElementName MSUBSUP;
    public static ElementName NOEMBED;
    public static ElementName POLYGON;
    public static ElementName PATTERN;
    public static ElementName PRODUCT;
    public static ElementName SETDIFF;
    public static ElementName SECTION;
    public static ElementName SUMMARY;
    public static ElementName TENDSTO;
    public static ElementName UPLIMIT;
    public static ElementName ALTGLYPH;
    public static ElementName BASEFONT;
    public static ElementName CLIPPATH;
    public static ElementName CODOMAIN;
    public static ElementName COLGROUP;
    public static ElementName EMPTYSET;
    public static ElementName FACTOROF;
    public static ElementName FIELDSET;
    public static ElementName FRAMESET;
    public static ElementName FEOFFSET;
    public static ElementName GLYPHREF;
    public static ElementName INTERVAL;
    public static ElementName INTEGERS;
    public static ElementName INFINITY;
    public static ElementName LISTENER;
    public static ElementName LOWLIMIT;
    public static ElementName METADATA;
    public static ElementName MENCLOSE;
    public static ElementName MENUITEM;
    public static ElementName MPHANTOM;
    public static ElementName NOFRAMES;
    public static ElementName NOSCRIPT;
    public static ElementName OPTGROUP;
    public static ElementName POLYLINE;
    public static ElementName PREFETCH;
    public static ElementName PROGRESS;
    public static ElementName PRSUBSET;
    public static ElementName QUOTIENT;
    public static ElementName SELECTOR;
    public static ElementName TEXTAREA;
    public static ElementName TEXTPATH;
    public static ElementName VARIANCE;
    public static ElementName ANIMATION;
    public static ElementName CONJUGATE;
    public static ElementName CONDITION;
    public static ElementName COMPLEXES;
    public static ElementName FONT_FACE;
    public static ElementName FACTORIAL;
    public static ElementName INTERSECT;
    public static ElementName IMAGINARY;
    public static ElementName LAPLACIAN;
    public static ElementName MATRIXROW;
    public static ElementName NOTSUBSET;
    public static ElementName OTHERWISE;
    public static ElementName PIECEWISE;
    public static ElementName PLAINTEXT;
    public static ElementName RATIONALS;
    public static ElementName SEMANTICS;
    public static ElementName TRANSPOSE;
    public static ElementName ANNOTATION;
    public static ElementName BLOCKQUOTE;
    public static ElementName DIVERGENCE;
    public static ElementName EULERGAMMA;
    public static ElementName EQUIVALENT;
    public static ElementName FIGCAPTION;
    public static ElementName IMAGINARYI;
    public static ElementName MALIGNMARK;
    public static ElementName MUNDEROVER;
    public static ElementName MLABELEDTR;
    public static ElementName NOTANUMBER;
    public static ElementName SOLIDCOLOR;
    public static ElementName ALTGLYPHDEF;
    public static ElementName DETERMINANT;
    public static ElementName FEMERGENODE;
    public static ElementName FECOMPOSITE;
    public static ElementName FESPOTLIGHT;
    public static ElementName MALIGNGROUP;
    public static ElementName MPRESCRIPTS;
    public static ElementName MOMENTABOUT;
    public static ElementName NOTPRSUBSET;
    public static ElementName PARTIALDIFF;
    public static ElementName ALTGLYPHITEM;
    public static ElementName ANIMATECOLOR;
    public static ElementName DATATEMPLATE;
    public static ElementName EXPONENTIALE;
    public static ElementName FETURBULENCE;
    public static ElementName FEPOINTLIGHT;
    public static ElementName FEMORPHOLOGY;
    public static ElementName OUTERPRODUCT;
    public static ElementName ANIMATEMOTION;
    public static ElementName COLOR_PROFILE;
    public static ElementName FONT_FACE_SRC;
    public static ElementName FONT_FACE_URI;
    public static ElementName FOREIGNOBJECT;
    public static ElementName FECOLORMATRIX;
    public static ElementName MISSING_GLYPH;
    public static ElementName MMULTISCRIPTS;
    public static ElementName SCALARPRODUCT;
    public static ElementName VECTORPRODUCT;
    public static ElementName ANNOTATION_XML;
    public static ElementName DEFINITION_SRC;
    public static ElementName FONT_FACE_NAME;
    public static ElementName FEGAUSSIANBLUR;
    public static ElementName FEDISTANTLIGHT;
    public static ElementName LINEARGRADIENT;
    public static ElementName NATURALNUMBERS;
    public static ElementName RADIALGRADIENT;
    public static ElementName ANIMATETRANSFORM;
    public static ElementName CARTESIANPRODUCT;
    public static ElementName FONT_FACE_FORMAT;
    public static ElementName FECONVOLVEMATRIX;
    public static ElementName FEDIFFUSELIGHTING;
    public static ElementName FEDISPLACEMENTMAP;
    public static ElementName FESPECULARLIGHTING;
    public static ElementName DOMAINOFAPPLICATION;
    public static ElementName FECOMPONENTTRANSFER;
    private static ElementName[] ELEMENT_NAMES;
    private static Int32[] ELEMENT_HASHES;
    public int Flags { get; }
    public DispatchGroup Group { get; }
    public bool IsCustom { get; }
    private ElementName(string name, string camelCaseName, int flags);
    internal ElementName(string name);
    private static ElementName();
    public int get_Flags();
    public DispatchGroup get_Group();
    public bool get_IsCustom();
    internal static ElementName ElementNameByBuffer(Char[] buf, int offset, int length);
    private static int BufToHash(Char[] buf, int len);
    public ElementName CloneElementName();
}
public class HtmlParserSharp.Core.HtmlAttributes : object {
    private static AttributeName[] EMPTY_ATTRIBUTENAMES;
    private static String[] EMPTY_stringS;
    public static HtmlAttributes EMPTY_ATTRIBUTES;
    private int mode;
    private int length;
    private AttributeName[] names;
    private String[] values;
    private string idValue;
    private int xmlnsLength;
    private AttributeName[] xmlnsNames;
    private String[] xmlnsValues;
    public int Length { get; }
    public string Id { get; }
    public int XmlnsLength { get; }
    public HtmlAttributes(int mode);
    private static HtmlAttributes();
    public int GetIndex(AttributeName name);
    public int GetIndex(string qName);
    public int GetIndex(string uri, string localName);
    public string GetType(string qName);
    public string GetType(string uri, string localName);
    public string GetValue(string qName);
    public string GetValue(string uri, string localName);
    public int get_Length();
    [LocalAttribute]
public string GetLocalName(int index);
    public string GetQName(int index);
    public string GetType(int index);
    public AttributeName GetAttributeName(int index);
    [NsUriAttribute]
public string GetURI(int index);
    [PrefixAttribute]
public string GetPrefix(int index);
    public string GetValue(int index);
    public string GetValue(AttributeName name);
    public string get_Id();
    public int get_XmlnsLength();
    [LocalAttribute]
public string GetXmlnsLocalName(int index);
    [NsUriAttribute]
public string GetXmlnsURI(int index);
    public string GetXmlnsValue(int index);
    public int GetXmlnsIndex(AttributeName name);
    public string GetXmlnsValue(AttributeName name);
    public AttributeName GetXmlnsAttributeName(int index);
    internal void AddAttribute(AttributeName name, string value, XmlViolationPolicy xmlnsPolicy);
    internal void Clear(int m);
    internal void ClearWithoutReleasingContents();
    public bool Contains(AttributeName name);
    public void AdjustForMath();
    public void AdjustForSvg();
    public HtmlAttributes CloneAttributes();
    public sealed virtual bool Equals(HtmlAttributes other);
    internal void ProcessNonNcNames(TreeBuilder`1<T> treeBuilder, XmlViolationPolicy namePolicy);
    public void Merge(HtmlAttributes attributes);
}
public interface HtmlParserSharp.Core.ILocator {
    public int LineNumber { get; }
    public int ColumnNumber { get; }
    public abstract virtual int get_LineNumber();
    public abstract virtual int get_ColumnNumber();
}
public enum HtmlParserSharp.Core.InsertionMode : Enum {
    public int value__;
    public static InsertionMode INITIAL;
    public static InsertionMode BEFORE_HTML;
    public static InsertionMode BEFORE_HEAD;
    public static InsertionMode IN_HEAD;
    public static InsertionMode IN_HEAD_NOSCRIPT;
    public static InsertionMode AFTER_HEAD;
    public static InsertionMode IN_BODY;
    public static InsertionMode IN_TABLE;
    public static InsertionMode IN_CAPTION;
    public static InsertionMode IN_COLUMN_GROUP;
    public static InsertionMode IN_TABLE_BODY;
    public static InsertionMode IN_ROW;
    public static InsertionMode IN_CELL;
    public static InsertionMode IN_SELECT;
    public static InsertionMode IN_SELECT_IN_TABLE;
    public static InsertionMode AFTER_BODY;
    public static InsertionMode IN_FRAMESET;
    public static InsertionMode AFTER_FRAMESET;
    public static InsertionMode AFTER_AFTER_BODY;
    public static InsertionMode AFTER_AFTER_FRAMESET;
    public static InsertionMode TEXT;
    public static InsertionMode FRAMESET_OK;
}
public interface HtmlParserSharp.Core.ITreeBuilderState`1 {
    public StackNode`1[] Stack { get; }
    public StackNode`1[] ListOfActiveFormattingElements { get; }
    public T FormPointer { get; }
    public T HeadPointer { get; }
    public T DeepTreeSurrogateParent { get; }
    public InsertionMode Mode { get; }
    public InsertionMode OriginalMode { get; }
    public bool IsFramesetOk { get; }
    public bool IsNeedToDropLF { get; }
    public bool IsQuirks { get; }
    public abstract virtual StackNode`1[] get_Stack();
    public abstract virtual StackNode`1[] get_ListOfActiveFormattingElements();
    public abstract virtual T get_FormPointer();
    public abstract virtual T get_HeadPointer();
    public abstract virtual T get_DeepTreeSurrogateParent();
    public abstract virtual InsertionMode get_Mode();
    public abstract virtual InsertionMode get_OriginalMode();
    public abstract virtual bool get_IsFramesetOk();
    public abstract virtual bool get_IsNeedToDropLF();
    public abstract virtual bool get_IsQuirks();
}
public class HtmlParserSharp.Core.Locator : object {
    [CompilerGeneratedAttribute]
private int <ColumnNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LineNumber>k__BackingField;
    public int ColumnNumber { get; private set; }
    public int LineNumber { get; private set; }
    public Locator(ILocator locator);
    [CompilerGeneratedAttribute]
public sealed virtual int get_ColumnNumber();
    [CompilerGeneratedAttribute]
private void set_ColumnNumber(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_LineNumber();
    [CompilerGeneratedAttribute]
private void set_LineNumber(int value);
}
public class HtmlParserSharp.Core.NamedCharacters : object {
    internal static String[] NAMES;
    internal static Char[][] VALUES;
    internal static Char[][] WINDOWS_1252;
    private static NamedCharacters();
}
public class HtmlParserSharp.Core.NamedCharactersAccel : object {
    internal static Int32[][] HILO_ACCEL;
    private static NamedCharactersAccel();
}
public class HtmlParserSharp.Core.NCName : object {
    private static int SURROGATE_OFFSET;
    private static Char[] HEX_TABLE;
    private static NCName();
    public static bool IsNCNameStart(char c);
    public static bool IsNCNameTrail(char c);
    public static bool IsNCName(string str);
    private static void AppendUHexTo(StringBuilder sb, int c);
    public static string EscapeName(string str);
}
public class HtmlParserSharp.Core.Portability : object {
    [LocalAttribute]
public static string NewLocalNameFromBuffer(Char[] buf, int offset, int length);
    public static bool LocalEqualsBuffer(string local, Char[] buf, int offset, int length);
    public static bool LowerCaseLiteralIsPrefixOfIgnoreAsciiCaseString(string lowerCaseLiteral, string str);
    public static bool LowerCaseLiteralEqualsIgnoreAsciiCaseString(string lowerCaseLiteral, string str);
}
public class HtmlParserSharp.Core.StackNode`1 : object {
    private int flags;
    [LocalAttribute]
internal string name;
    [LocalAttribute]
internal string popName;
    [NsUriAttribute]
internal string ns;
    internal T node;
    internal HtmlAttributes attributes;
    private int refcount;
    private TaintableLocator locator;
    public TaintableLocator Locator { get; }
    public int Flags { get; }
    public DispatchGroup Group { get; }
    public bool IsScoping { get; }
    public bool IsSpecial { get; }
    public bool IsFosterParenting { get; }
    public bool IsHtmlIntegrationPoint { get; }
    public bool IsOptionalEndTag { get; }
    internal StackNode`1(int flags, string ns, string name, T node, string popName, HtmlAttributes attributes, TaintableLocator locator);
    internal StackNode`1(ElementName elementName, T node, TaintableLocator locator);
    internal StackNode`1(ElementName elementName, T node, HtmlAttributes attributes, TaintableLocator locator);
    internal StackNode`1(ElementName elementName, T node, string popName, TaintableLocator locator);
    internal StackNode`1(ElementName elementName, string popName, T node, TaintableLocator locator);
    internal StackNode`1(ElementName elementName, T node, string popName, bool markAsIntegrationPoint, TaintableLocator locator);
    public TaintableLocator get_Locator();
    public int get_Flags();
    public DispatchGroup get_Group();
    public bool get_IsScoping();
    public bool get_IsSpecial();
    public bool get_IsFosterParenting();
    public bool get_IsHtmlIntegrationPoint();
    public bool get_IsOptionalEndTag();
    private static int PrepareSvgFlags(int flags);
    private static int PrepareMathFlags(int flags, bool markAsIntegrationPoint);
    public void DropAttributes();
    public virtual string ToString();
    public void Retain();
    public void Release();
}
public class HtmlParserSharp.Core.StateSnapshot`1 : object {
    [CompilerGeneratedAttribute]
private StackNode`1[] <Stack>k__BackingField;
    [CompilerGeneratedAttribute]
private StackNode`1[] <ListOfActiveFormattingElements>k__BackingField;
    [CompilerGeneratedAttribute]
private T <FormPointer>k__BackingField;
    [CompilerGeneratedAttribute]
private T <HeadPointer>k__BackingField;
    [CompilerGeneratedAttribute]
private T <DeepTreeSurrogateParent>k__BackingField;
    [CompilerGeneratedAttribute]
private InsertionMode <Mode>k__BackingField;
    [CompilerGeneratedAttribute]
private InsertionMode <OriginalMode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsFramesetOk>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsNeedToDropLF>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsQuirks>k__BackingField;
    public StackNode`1[] Stack { get; private set; }
    public StackNode`1[] ListOfActiveFormattingElements { get; private set; }
    public T FormPointer { get; private set; }
    public T HeadPointer { get; private set; }
    public T DeepTreeSurrogateParent { get; private set; }
    public InsertionMode Mode { get; private set; }
    public InsertionMode OriginalMode { get; private set; }
    public bool IsFramesetOk { get; private set; }
    public bool IsNeedToDropLF { get; private set; }
    public bool IsQuirks { get; private set; }
    internal StateSnapshot`1(StackNode`1[] stack, StackNode`1[] listOfActiveFormattingElements, T formPointer, T headPointer, T deepTreeSurrogateParent, InsertionMode mode, InsertionMode originalMode, bool framesetOk, bool needToDropLF, bool quirks);
    [CompilerGeneratedAttribute]
public sealed virtual StackNode`1[] get_Stack();
    [CompilerGeneratedAttribute]
private void set_Stack(StackNode`1[] value);
    [CompilerGeneratedAttribute]
public sealed virtual StackNode`1[] get_ListOfActiveFormattingElements();
    [CompilerGeneratedAttribute]
private void set_ListOfActiveFormattingElements(StackNode`1[] value);
    [CompilerGeneratedAttribute]
public sealed virtual T get_FormPointer();
    [CompilerGeneratedAttribute]
private void set_FormPointer(T value);
    [CompilerGeneratedAttribute]
public sealed virtual T get_HeadPointer();
    [CompilerGeneratedAttribute]
private void set_HeadPointer(T value);
    [CompilerGeneratedAttribute]
public sealed virtual T get_DeepTreeSurrogateParent();
    [CompilerGeneratedAttribute]
private void set_DeepTreeSurrogateParent(T value);
    [CompilerGeneratedAttribute]
public sealed virtual InsertionMode get_Mode();
    [CompilerGeneratedAttribute]
private void set_Mode(InsertionMode value);
    [CompilerGeneratedAttribute]
public sealed virtual InsertionMode get_OriginalMode();
    [CompilerGeneratedAttribute]
private void set_OriginalMode(InsertionMode value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsFramesetOk();
    [CompilerGeneratedAttribute]
private void set_IsFramesetOk(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsNeedToDropLF();
    [CompilerGeneratedAttribute]
private void set_IsNeedToDropLF(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsQuirks();
    [CompilerGeneratedAttribute]
private void set_IsQuirks(bool value);
}
public class HtmlParserSharp.Core.TaintableLocator : Locator {
    [CompilerGeneratedAttribute]
private bool <IsTainted>k__BackingField;
    public bool IsTainted { get; private set; }
    public TaintableLocator(ILocator locator);
    public void MarkTainted();
    [CompilerGeneratedAttribute]
public bool get_IsTainted();
    [CompilerGeneratedAttribute]
private void set_IsTainted(bool value);
}
public class HtmlParserSharp.Core.Tokenizer : object {
    private static byte DATA_AND_RCDATA_MASK;
    private static int LEAD_OFFSET;
    private static int BUFFER_GROW_BY;
    private static Char[] LT_GT;
    private static Char[] LT_SOLIDUS;
    private static Char[] RSQB_RSQB;
    private static Char[] REPLACEMENT_CHARACTER;
    private static Char[] SPACE;
    private static Char[] LF;
    private static Char[] CDATA_LSQB;
    private static Char[] OCTYPE;
    private static Char[] UBLIC;
    private static Char[] YSTEM;
    private static Char[] TITLE_ARR;
    private static Char[] SCRIPT_ARR;
    private static Char[] STYLE_ARR;
    private static Char[] PLAINTEXT_ARR;
    private static Char[] XMP_ARR;
    private static Char[] TEXTAREA_ARR;
    private static Char[] IFRAME_ARR;
    private static Char[] NOEMBED_ARR;
    private static Char[] NOSCRIPT_ARR;
    private static Char[] NOFRAMES_ARR;
    private EventHandler`1<EncodingDetectedEventArgs> EncodingDeclared;
    private EventHandler`1<ParserErrorEventArgs> ErrorEvent;
    protected bool lastCR;
    protected TokenizerState stateSave;
    private TokenizerState returnStateSave;
    protected int index;
    private bool forceQuirks;
    private char additional;
    private int entCol;
    private int firstCharKey;
    private int lo;
    private int hi;
    private int candidate;
    private int strBufMark;
    private int prevValue;
    protected int value;
    private bool seenDigits;
    protected int cstart;
    private Char[] strBuf;
    private int strBufLen;
    private Char[] longStrBuf;
    private int longStrBufLen;
    private Char[] bmpChar;
    private Char[] astralChar;
    protected ElementName endTagExpectation;
    private Char[] endTagExpectationAsArray;
    protected bool endTag;
    private ElementName tagName;
    protected AttributeName attributeName;
    private bool wantsComments;
    protected bool html4;
    private bool metaBoundaryPassed;
    [LocalAttribute]
private string doctypeName;
    private string publicIdentifier;
    private string systemIdentifier;
    private HtmlAttributes attributes;
    private XmlViolationPolicy contentSpacePolicy;
    private XmlViolationPolicy commentPolicy;
    private XmlViolationPolicy xmlnsPolicy;
    private XmlViolationPolicy namePolicy;
    private bool html4ModeCompatibleWithXhtml1Schemata;
    private bool newAttributesEachTime;
    private int mappingLangToXmlLang;
    private bool shouldSuspend;
    protected bool confident;
    private int line;
    protected Locator ampersandLocation;
    [CompilerGeneratedAttribute]
private ITokenHandler <TokenHandler>k__BackingField;
    public ITokenHandler TokenHandler { get; private set; }
    public bool IsMappingLangToXmlLang { get; public set; }
    public XmlViolationPolicy CommentPolicy { get; public set; }
    unknown XmlViolationPolicy ContentNonXmlCharPolicy {public set; }
    public XmlViolationPolicy ContentSpacePolicy { get; public set; }
    public XmlViolationPolicy XmlnsPolicy { get; public set; }
    public XmlViolationPolicy NamePolicy { get; public set; }
    public bool Html4ModeCompatibleWithXhtml1Schemata { get; public set; }
    public int LineNumber { get; public set; }
    public int ColumnNumber { get; }
    public bool IsAlreadyComplainedAboutNonAscii { get; }
    public bool IsNextCharOnNewLine { get; }
    public bool IsPrevCR { get; }
    public int Line { get; }
    public int Col { get; }
    public bool IsInDataState { get; }
    public bool IsSuspended { get; }
    public Tokenizer(ITokenHandler tokenHandler, bool newAttributesEachTime);
    public Tokenizer(ITokenHandler tokenHandler);
    private static Tokenizer();
    [CompilerGeneratedAttribute]
public ITokenHandler get_TokenHandler();
    [CompilerGeneratedAttribute]
private void set_TokenHandler(ITokenHandler value);
    public void add_EncodingDeclared(EventHandler`1<EncodingDetectedEventArgs> value);
    public void remove_EncodingDeclared(EventHandler`1<EncodingDetectedEventArgs> value);
    public void add_ErrorEvent(EventHandler`1<ParserErrorEventArgs> value);
    public void remove_ErrorEvent(EventHandler`1<ParserErrorEventArgs> value);
    public bool get_IsMappingLangToXmlLang();
    public void set_IsMappingLangToXmlLang(bool value);
    public XmlViolationPolicy get_CommentPolicy();
    public void set_CommentPolicy(XmlViolationPolicy value);
    public void set_ContentNonXmlCharPolicy(XmlViolationPolicy value);
    public XmlViolationPolicy get_ContentSpacePolicy();
    public void set_ContentSpacePolicy(XmlViolationPolicy value);
    public XmlViolationPolicy get_XmlnsPolicy();
    public void set_XmlnsPolicy(XmlViolationPolicy value);
    public XmlViolationPolicy get_NamePolicy();
    public void set_NamePolicy(XmlViolationPolicy value);
    public bool get_Html4ModeCompatibleWithXhtml1Schemata();
    public void set_Html4ModeCompatibleWithXhtml1Schemata(bool value);
    public void SetStateAndEndTagExpectation(TokenizerState specialTokenizerState, string endTagExpectation);
    public void SetStateAndEndTagExpectation(TokenizerState specialTokenizerState, ElementName endTagExpectation);
    private void EndTagExpectationToArray();
    public sealed virtual int get_LineNumber();
    public void set_LineNumber(int value);
    public sealed virtual int get_ColumnNumber();
    public void NotifyAboutMetaBoundary();
    internal void TurnOnAdditionalHtml4Errors();
    internal HtmlAttributes EmptyAttributes();
    private void ClearStrBufAndAppend(char c);
    private void ClearStrBuf();
    private void AppendStrBuf(char c);
    private void StrBufToDoctypeName();
    private void EmitStrBuf();
    private void ClearLongStrBuf();
    private void ClearLongStrBufAndAppend(char c);
    private void AppendLongStrBuf(char c);
    private void AppendSecondHyphenToBogusComment();
    private void MaybeAppendSpaceToBogusComment();
    private void AdjustDoubleHyphenAndAppendToLongStrBufAndErr(char c);
    private void AppendLongStrBuf(Char[] buffer, int offset, int length);
    private void AppendStrBufToLongStrBuf();
    private string LongStrBufToString();
    private void EmitComment(int provisionalHyphens, int pos);
    protected void FlushChars(Char[] buf, int pos);
    public void Fatal(string message);
    public void Err(string message);
    public void ErrTreeBuilder(string message);
    public void Warn(string message);
    private void ResetAttributes();
    private void StrBufToElementNameString();
    private TokenizerState EmitCurrentTagToken(bool selfClosing, int pos);
    private void AttributeNameComplete();
    private void AddAttributeWithoutValue();
    private void AddAttributeWithValue();
    private static string NewAsciiLowerCaseStringFromString(string str);
    protected void StartErrorReporting();
    public void Start();
    public bool TokenizeBuffer(UTF16Buffer buffer);
    private int StateLoop(TokenizerState state, char c, int pos, Char[] buf, bool reconsume, TokenizerState returnState, int endPos);
    private void InitDoctypeFields();
    private void AdjustDoubleHyphenAndAppendToLongStrBufCarriageReturn();
    private void AdjustDoubleHyphenAndAppendToLongStrBufLineFeed();
    private void AppendLongStrBufLineFeed();
    private void AppendLongStrBufCarriageReturn();
    protected void SilentCarriageReturn();
    protected void SilentLineFeed();
    private void EmitCarriageReturn(Char[] buf, int pos);
    private void EmitReplacementCharacter(Char[] buf, int pos);
    private void EmitPlaintextReplacementCharacter(Char[] buf, int pos);
    private void SetAdditionalAndRememberAmpersandLocation(char add);
    private void BogusDoctype();
    private void BogusDoctypeWithoutQuirks();
    private void EmitOrAppendStrBuf(TokenizerState returnState);
    private void HandleNcrValue(TokenizerState returnState);
    public void Eof();
    private void EmitDoctypeToken(int pos);
    public bool get_IsAlreadyComplainedAboutNonAscii();
    public bool InternalEncodingDeclaration(string internalCharset);
    private void EmitOrAppendTwo(Char[] val, TokenizerState returnState);
    private void EmitOrAppendOne(Char[] val, TokenizerState returnState);
    public void End();
    public void RequestSuspension();
    public void BecomeConfident();
    public bool get_IsNextCharOnNewLine();
    public bool get_IsPrevCR();
    public int get_Line();
    public int get_Col();
    public bool get_IsInDataState();
    public void ResetToDataState();
    public void LoadState(Tokenizer other);
    public void InitializeWithoutStarting();
    protected void ErrGarbageAfterLtSlash();
    protected void ErrLtSlashGt();
    protected void ErrWarnLtSlashInRcdata();
    protected void ErrHtml4LtSlashInRcdata(char folded);
    protected void ErrCharRefLacksSemicolon();
    protected void ErrNoDigitsInNCR();
    protected void ErrGtInSystemId();
    protected void ErrGtInPublicId();
    protected void ErrNamelessDoctype();
    protected void ErrConsecutiveHyphens();
    protected void ErrPrematureEndOfComment();
    protected void ErrBogusComment();
    protected void ErrUnquotedAttributeValOrNull(char c);
    protected void ErrSlashNotFollowedByGt();
    protected void ErrHtml4XmlVoidSyntax();
    protected void ErrNoSpaceBetweenAttributes();
    protected void ErrHtml4NonNameInUnquotedAttribute(char c);
    protected void ErrLtOrEqualsOrGraveInUnquotedAttributeOrNull(char c);
    protected void ErrAttributeValueMissing();
    protected void ErrBadCharBeforeAttributeNameOrNull(char c);
    protected void ErrEqualsSignBeforeAttributeName();
    protected void ErrBadCharAfterLt(char c);
    protected void ErrLtGt();
    protected void ErrProcessingInstruction();
    protected void ErrUnescapedAmpersandInterpretedAsCharacterReference();
    protected void ErrNotSemicolonTerminated();
    protected void ErrNoNamedCharacterMatch();
    protected void ErrQuoteBeforeAttributeName(char c);
    protected void ErrQuoteOrLtInAttributeNameOrNull(char c);
    protected void ErrExpectedPublicId();
    protected void ErrBogusDoctype();
    protected void MaybeWarnPrivateUseAstral();
    protected void MaybeWarnPrivateUse(char ch);
    protected void MaybeErrAttributesOnEndTag(HtmlAttributes attrs);
    protected void MaybeErrSlashInEndTag(bool selfClosing);
    protected char ErrNcrNonCharacter(char ch);
    protected void ErrAstralNonCharacter(int ch);
    protected void ErrNcrSurrogate();
    protected char ErrNcrControlChar(char ch);
    protected void ErrNcrCr();
    protected void ErrNcrInC1Range();
    protected void ErrEofInPublicId();
    protected void ErrEofInComment();
    protected void ErrEofInDoctype();
    protected void ErrEofInAttributeValue();
    protected void ErrEofInAttributeName();
    protected void ErrEofWithoutGt();
    protected void ErrEofInTagName();
    protected void ErrEofInEndTag();
    protected void ErrEofAfterLt();
    protected void ErrNcrOutOfRange();
    protected void ErrNcrUnassigned();
    protected void ErrDuplicateAttribute();
    protected void ErrEofInSystemId();
    protected void ErrExpectedSystemId();
    protected void ErrMissingSpaceBeforeDoctypeName();
    protected void ErrHyphenHyphenBang();
    protected void ErrNcrControlChar();
    protected void ErrNcrZero();
    protected void ErrNoSpaceBetweenDoctypeSystemKeywordAndQuote();
    protected void ErrNoSpaceBetweenPublicAndSystemIds();
    protected void ErrNoSpaceBetweenDoctypePublicKeywordAndQuote();
    protected void NoteAttributeWithoutValue();
    protected void NoteUnquotedAttributeValue();
    public void SetTransitionBaseOffset(int offset);
    public bool get_IsSuspended();
}
public enum HtmlParserSharp.Core.TokenizerState : Enum {
    public byte value__;
    public static TokenizerState DATA;
    public static TokenizerState RCDATA;
    public static TokenizerState SCRIPT_DATA;
    public static TokenizerState RAWTEXT;
    public static TokenizerState SCRIPT_DATA_ESCAPED;
    public static TokenizerState ATTRIBUTE_VALUE_DOUBLE_QUOTED;
    public static TokenizerState ATTRIBUTE_VALUE_SINGLE_QUOTED;
    public static TokenizerState ATTRIBUTE_VALUE_UNQUOTED;
    public static TokenizerState PLAINTEXT;
    public static TokenizerState TAG_OPEN;
    public static TokenizerState CLOSE_TAG_OPEN;
    public static TokenizerState TAG_NAME;
    public static TokenizerState BEFORE_ATTRIBUTE_NAME;
    public static TokenizerState ATTRIBUTE_NAME;
    public static TokenizerState AFTER_ATTRIBUTE_NAME;
    public static TokenizerState BEFORE_ATTRIBUTE_VALUE;
    public static TokenizerState AFTER_ATTRIBUTE_VALUE_QUOTED;
    public static TokenizerState BOGUS_COMMENT;
    public static TokenizerState MARKUP_DECLARATION_OPEN;
    public static TokenizerState DOCTYPE;
    public static TokenizerState BEFORE_DOCTYPE_NAME;
    public static TokenizerState DOCTYPE_NAME;
    public static TokenizerState AFTER_DOCTYPE_NAME;
    public static TokenizerState BEFORE_DOCTYPE_PUBLIC_IDENTIFIER;
    public static TokenizerState DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED;
    public static TokenizerState DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED;
    public static TokenizerState AFTER_DOCTYPE_PUBLIC_IDENTIFIER;
    public static TokenizerState BEFORE_DOCTYPE_SYSTEM_IDENTIFIER;
    public static TokenizerState DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;
    public static TokenizerState DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;
    public static TokenizerState AFTER_DOCTYPE_SYSTEM_IDENTIFIER;
    public static TokenizerState BOGUS_DOCTYPE;
    public static TokenizerState COMMENT_START;
    public static TokenizerState COMMENT_START_DASH;
    public static TokenizerState COMMENT;
    public static TokenizerState COMMENT_END_DASH;
    public static TokenizerState COMMENT_END;
    public static TokenizerState COMMENT_END_BANG;
    public static TokenizerState NON_DATA_END_TAG_NAME;
    public static TokenizerState MARKUP_DECLARATION_HYPHEN;
    public static TokenizerState MARKUP_DECLARATION_OCTYPE;
    public static TokenizerState DOCTYPE_UBLIC;
    public static TokenizerState DOCTYPE_YSTEM;
    public static TokenizerState AFTER_DOCTYPE_PUBLIC_KEYWORD;
    public static TokenizerState BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS;
    public static TokenizerState AFTER_DOCTYPE_SYSTEM_KEYWORD;
    public static TokenizerState CONSUME_CHARACTER_REFERENCE;
    public static TokenizerState CONSUME_NCR;
    public static TokenizerState CHARACTER_REFERENCE_TAIL;
    public static TokenizerState HEX_NCR_LOOP;
    public static TokenizerState DECIMAL_NRC_LOOP;
    public static TokenizerState HANDLE_NCR_VALUE;
    public static TokenizerState HANDLE_NCR_VALUE_RECONSUME;
    public static TokenizerState CHARACTER_REFERENCE_HILO_LOOKUP;
    public static TokenizerState SELF_CLOSING_START_TAG;
    public static TokenizerState CDATA_START;
    public static TokenizerState CDATA_SECTION;
    public static TokenizerState CDATA_RSQB;
    public static TokenizerState CDATA_RSQB_RSQB;
    public static TokenizerState SCRIPT_DATA_LESS_THAN_SIGN;
    public static TokenizerState SCRIPT_DATA_ESCAPE_START;
    public static TokenizerState SCRIPT_DATA_ESCAPE_START_DASH;
    public static TokenizerState SCRIPT_DATA_ESCAPED_DASH;
    public static TokenizerState SCRIPT_DATA_ESCAPED_DASH_DASH;
    public static TokenizerState BOGUS_COMMENT_HYPHEN;
    public static TokenizerState RAWTEXT_RCDATA_LESS_THAN_SIGN;
    public static TokenizerState SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN;
    public static TokenizerState SCRIPT_DATA_DOUBLE_ESCAPE_START;
    public static TokenizerState SCRIPT_DATA_DOUBLE_ESCAPED;
    public static TokenizerState SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN;
    public static TokenizerState SCRIPT_DATA_DOUBLE_ESCAPED_DASH;
    public static TokenizerState SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH;
    public static TokenizerState SCRIPT_DATA_DOUBLE_ESCAPE_END;
    public static TokenizerState PROCESSING_INSTRUCTION;
    public static TokenizerState PROCESSING_INSTRUCTION_QUESTION_MARK;
}
public abstract class HtmlParserSharp.Core.TreeBuilder`1 : object {
    private InsertionMode mode;
    private InsertionMode originalMode;
    private bool framesetOk;
    protected Tokenizer tokenizer;
    private EventHandler`1<DocumentModeEventArgs> DocumentModeDetected;
    private bool needToDropLF;
    private bool fragment;
    [LocalAttribute]
private string contextName;
    [NsUriAttribute]
private string contextNamespace;
    private T contextNode;
    private StackNode`1[] stack;
    private int currentPtr;
    private StackNode`1[] listOfActiveFormattingElements;
    private int listPtr;
    private T formPointer;
    private T headPointer;
    private T deepTreeSurrogateParent;
    protected StringBuilder charBuffer;
    private bool quirks;
    private Dictionary`2<string, Locator> idLocations;
    private bool html4;
    private EventHandler`1<ParserErrorEventArgs> ErrorEvent;
    [CompilerGeneratedAttribute]
private DoctypeExpectation <DoctypeExpectation>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsScriptingEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsReportingDoctype>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlViolationPolicy <NamePolicy>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <WantsComments>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowSelfClosingTags>k__BackingField;
    public DoctypeExpectation DoctypeExpectation { get; public set; }
    public bool IsScriptingEnabled { get; public set; }
    protected int charBufferLen { get; }
    public bool IsReportingDoctype { get; public set; }
    public XmlViolationPolicy NamePolicy { get; public set; }
    public bool WantsComments { get; public set; }
    public bool AllowSelfClosingTags { get; public set; }
    public bool IsCDataSectionAllowed { get; }
    private bool IsInForeign { get; }
    private bool IsInForeignButNotHtmlOrMathTextIntegrationPoint { get; }
    public T FormPointer { get; }
    public T HeadPointer { get; }
    public T DeepTreeSurrogateParent { get; }
    public StackNode`1[] ListOfActiveFormattingElements { get; }
    public StackNode`1[] Stack { get; }
    public InsertionMode Mode { get; }
    public InsertionMode OriginalMode { get; }
    public bool IsFramesetOk { get; }
    public bool IsNeedToDropLF { get; }
    public bool IsQuirks { get; }
    public void add_DocumentModeDetected(EventHandler`1<DocumentModeEventArgs> value);
    public void remove_DocumentModeDetected(EventHandler`1<DocumentModeEventArgs> value);
    [CompilerGeneratedAttribute]
public DoctypeExpectation get_DoctypeExpectation();
    [CompilerGeneratedAttribute]
public void set_DoctypeExpectation(DoctypeExpectation value);
    [CompilerGeneratedAttribute]
public bool get_IsScriptingEnabled();
    [CompilerGeneratedAttribute]
public void set_IsScriptingEnabled(bool value);
    protected int get_charBufferLen();
    [CompilerGeneratedAttribute]
public bool get_IsReportingDoctype();
    [CompilerGeneratedAttribute]
public void set_IsReportingDoctype(bool value);
    [CompilerGeneratedAttribute]
public XmlViolationPolicy get_NamePolicy();
    [CompilerGeneratedAttribute]
public void set_NamePolicy(XmlViolationPolicy value);
    protected void Fatal();
    protected void Fatal(Exception e);
    internal void Fatal(string s);
    public void add_ErrorEvent(EventHandler`1<ParserErrorEventArgs> value);
    public void remove_ErrorEvent(EventHandler`1<ParserErrorEventArgs> value);
    private void Err(string message);
    private void ErrNoCheck(string message);
    private void ErrStrayStartTag(string name);
    private void ErrStrayEndTag(string name);
    private void ErrUnclosedElements(int eltPos, string name);
    private void ErrUnclosedElementsImplied(int eltPos, string name);
    private void ErrUnclosedElementsCell(int eltPos);
    private void ErrListUnclosedStartTags(int eltPos);
    private void ErrEndWithUnclosedElements(string message);
    private void ReportUnclosedElementNameAndLocation(int pos);
    internal void Warn(string message);
    public sealed virtual void StartTokenization(Tokenizer self);
    public sealed virtual void Doctype(string name, string publicIdentifier, string systemIdentifier, bool forceQuirks);
    private bool IsHtml4Doctype(string publicIdentifier);
    public sealed virtual void Comment(Char[] buf, int start, int length);
    public sealed virtual void Characters(Char[] buf, int start, int length);
    public sealed virtual void ZeroOriginatingReplacementCharacter();
    public sealed virtual void Eof();
    public sealed virtual void EndTokenization();
    public sealed virtual void StartTag(ElementName elementName, HtmlAttributes attributes, bool selfClosing);
    private bool IsSpecialParentInForeign(StackNode`1<T> stackNode);
    public static string ExtractCharsetFromContent(string attributeValue);
    private void CheckMetaCharset(HtmlAttributes attributes);
    public sealed virtual void EndTag(ElementName elementName);
    private int FindLastInTableScopeOrRootTbodyTheadTfoot();
    private int FindLast(string name);
    private int FindLastInTableScope(string name);
    private int FindLastInButtonScope(string name);
    private int FindLastInScope(string name);
    private int FindLastInListScope(string name);
    private int FindLastInScopeHn();
    private void GenerateImpliedEndTagsExceptFor(string name);
    private void GenerateImpliedEndTags();
    private bool IsSecondOnStackBody();
    private void DocumentModeInternal(DocumentMode m, string publicIdentifier, string systemIdentifier, bool html4SpecificAdditionalErrorChecks);
    private bool IsAlmostStandards(string publicIdentifier, string systemIdentifier);
    private bool IsQuirky(string name, string publicIdentifier, string systemIdentifier, bool forceQuirks);
    private void CloseTheCell(int eltPos);
    private int FindLastInTableScopeTdTh();
    private void ClearStackBackTo(int eltPos);
    private void ResetTheInsertionMode();
    private void ImplicitlyCloseP();
    private bool ClearLastStackSlot();
    private bool ClearLastListSlot();
    private void Push(StackNode`1<T> node);
    private void SilentPush(StackNode`1<T> node);
    private void Append(StackNode`1<T> node);
    private void InsertMarker();
    private void ClearTheListOfActiveFormattingElementsUpToTheLastMarker();
    private bool IsCurrent(string name);
    private void RemoveFromStack(int pos);
    private void RemoveFromStack(StackNode`1<T> node);
    private void RemoveFromListOfActiveFormattingElements(int pos);
    private bool AdoptionAgencyEndTag(string name);
    private void InsertIntoStack(StackNode`1<T> node, int position);
    private void InsertIntoListOfActiveFormattingElements(StackNode`1<T> formattingClone, int bookmark);
    private int FindInListOfActiveFormattingElements(StackNode`1<T> node);
    private int FindInListOfActiveFormattingElementsContainsBetweenEndAndLastMarker(string name);
    private void MaybeForgetEarlierDuplicateFormattingElement(string name, HtmlAttributes attributes);
    private int FindLastOrRoot(string name);
    private int FindLastOrRoot(DispatchGroup group);
    private bool AddAttributesToBody(HtmlAttributes attributes);
    private void AddAttributesToHtml(HtmlAttributes attributes);
    private void PushHeadPointerOntoStack();
    private void ReconstructTheActiveFormattingElements();
    private void InsertIntoFosterParent(T child);
    private bool IsInStack(StackNode`1<T> node);
    private void Pop();
    private void SilentPop();
    private void PopOnEof();
    private void CheckAttributes(HtmlAttributes attributes, string ns);
    private string CheckPopName(string name);
    private void AppendHtmlElementToDocumentAndPush(HtmlAttributes attributes);
    private void AppendHtmlElementToDocumentAndPush();
    private void AppendToCurrentNodeAndPushHeadElement(HtmlAttributes attributes);
    private void AppendToCurrentNodeAndPushBodyElement(HtmlAttributes attributes);
    private void AppendToCurrentNodeAndPushBodyElement();
    private void AppendToCurrentNodeAndPushFormElementMayFoster(HtmlAttributes attributes);
    private void AppendToCurrentNodeAndPushFormattingElementMayFoster(ElementName elementName, HtmlAttributes attributes);
    private void AppendToCurrentNodeAndPushElement(ElementName elementName, HtmlAttributes attributes);
    private void AppendToCurrentNodeAndPushElementMayFoster(ElementName elementName, HtmlAttributes attributes);
    private void AppendToCurrentNodeAndPushElementMayFosterMathML(ElementName elementName, HtmlAttributes attributes);
    private bool AnnotationXmlEncodingPermitsHtml(HtmlAttributes attributes);
    private void AppendToCurrentNodeAndPushElementMayFosterSVG(ElementName elementName, HtmlAttributes attributes);
    private void AppendToCurrentNodeAndPushElementMayFoster(ElementName elementName, HtmlAttributes attributes, T form);
    private void AppendVoidElementToCurrentMayFoster(string name, HtmlAttributes attributes, T form);
    private void AppendVoidElementToCurrentMayFoster(ElementName elementName, HtmlAttributes attributes);
    private void AppendVoidElementToCurrentMayFosterSVG(ElementName elementName, HtmlAttributes attributes);
    private void AppendVoidElementToCurrentMayFosterMathML(ElementName elementName, HtmlAttributes attributes);
    private void AppendVoidElementToCurrent(string name, HtmlAttributes attributes, T form);
    private void AppendVoidFormToCurrent(HtmlAttributes attributes);
    private void AccumulateCharactersForced(Char[] buf, int start, int length);
    protected virtual void AccumulateCharacters(Char[] buf, int start, int length);
    protected void RequestSuspension();
    protected abstract virtual T CreateElement(string ns, string name, HtmlAttributes attributes);
    protected virtual T CreateElement(string ns, string name, HtmlAttributes attributes, T form);
    protected abstract virtual T CreateHtmlElementSetAsRoot(HtmlAttributes attributes);
    protected abstract virtual void DetachFromParent(T element);
    protected abstract virtual bool HasChildren(T element);
    protected abstract virtual void AppendElement(T child, T newParent);
    protected abstract virtual void AppendChildrenToNewParent(T oldParent, T newParent);
    protected abstract virtual void InsertFosterParentedChild(T child, T table, T stackParent);
    protected abstract virtual void InsertFosterParentedCharacters(StringBuilder sb, T table, T stackParent);
    protected abstract virtual void AppendCharacters(T parent, Char[] buf, int start, int length);
    protected abstract virtual void AppendCharacters(T parent, StringBuilder sb);
    protected abstract virtual void AppendIsindexPrompt(T parent);
    protected abstract virtual void AppendComment(T parent, Char[] buf, int start, int length);
    protected abstract virtual void AppendCommentToDocument(Char[] buf, int start, int length);
    protected abstract virtual void AddAttributesToElement(T element, HtmlAttributes attributes);
    protected void MarkMalformedIfScript(T elt);
    protected virtual void Start(bool fragmentMode);
    protected virtual void End();
    protected virtual void AppendDoctypeToDocument(string name, string publicIdentifier, string systemIdentifier);
    protected virtual void ElementPushed(string ns, string name, T node);
    protected virtual void ElementPopped(string ns, string name, T node);
    protected virtual void ReceiveDocumentMode(DocumentMode m, string publicIdentifier, string systemIdentifier, bool html4SpecificAdditionalErrorChecks);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_WantsComments();
    [CompilerGeneratedAttribute]
public void set_WantsComments(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_AllowSelfClosingTags();
    [CompilerGeneratedAttribute]
public void set_AllowSelfClosingTags(bool value);
    public void SetFragmentContext(string context);
    public sealed virtual bool get_IsCDataSectionAllowed();
    private bool get_IsInForeign();
    private bool get_IsInForeignButNotHtmlOrMathTextIntegrationPoint();
    public void SetFragmentContext(string context, string ns, T node, bool quirks);
    protected T CurrentNode();
    public void FlushCharacters();
    private bool CharBufferContainsNonWhitespace();
    public ITreeBuilderState`1<T> NewSnapshot();
    public bool SnapshotMatches(ITreeBuilderState`1<T> snapshot);
    public void LoadState(ITreeBuilderState`1<T> snapshot);
    private int FindInArray(StackNode`1<T> node, StackNode`1[] arr);
    public sealed virtual T get_FormPointer();
    public sealed virtual T get_HeadPointer();
    public sealed virtual T get_DeepTreeSurrogateParent();
    public sealed virtual StackNode`1[] get_ListOfActiveFormattingElements();
    public sealed virtual StackNode`1[] get_Stack();
    public sealed virtual InsertionMode get_Mode();
    public sealed virtual InsertionMode get_OriginalMode();
    public sealed virtual bool get_IsFramesetOk();
    public sealed virtual bool get_IsNeedToDropLF();
    public sealed virtual bool get_IsQuirks();
}
public class HtmlParserSharp.Core.TreeBuilderConstants : object {
    internal static int NOT_FOUND_ON_STACK;
    [LocalAttribute]
internal static string HTML_LOCAL;
    internal static Char[] REPLACEMENT_CHARACTER;
    internal static String[] HTML4_PUBLIC_IDS;
    internal static String[] QUIRKY_PUBLIC_IDS;
    private static TreeBuilderConstants();
}
public class HtmlParserSharp.Core.UTF16Buffer : object {
    [CompilerGeneratedAttribute]
private Char[] <Buffer>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Start>k__BackingField;
    [CompilerGeneratedAttribute]
private int <End>k__BackingField;
    public Char[] Buffer { get; private set; }
    public int Start { get; public set; }
    public int End { get; public set; }
    public bool HasMore { get; }
    public UTF16Buffer(Char[] buffer, int start, int end);
    [CompilerGeneratedAttribute]
public Char[] get_Buffer();
    [CompilerGeneratedAttribute]
private void set_Buffer(Char[] value);
    [CompilerGeneratedAttribute]
public int get_Start();
    [CompilerGeneratedAttribute]
public void set_Start(int value);
    [CompilerGeneratedAttribute]
public int get_End();
    [CompilerGeneratedAttribute]
public void set_End(int value);
    public bool get_HasMore();
    public void Adjust(bool lastWasCR);
}
public class HtmlParserSharp.XmlTreeBuilder : CoalescingTreeBuilder`1<XmlElement> {
    private XmlDocument document;
    internal XmlDocument Document { get; }
    protected virtual void AddAttributesToElement(XmlElement element, HtmlAttributes attributes);
    protected virtual void AppendCharacters(XmlElement parent, string text);
    protected virtual void AppendChildrenToNewParent(XmlElement oldParent, XmlElement newParent);
    protected virtual void AppendDoctypeToDocument(string name, string publicIdentifier, string systemIdentifier);
    protected virtual void AppendComment(XmlElement parent, string comment);
    protected virtual void AppendCommentToDocument(string comment);
    protected virtual XmlElement CreateElement(string ns, string name, HtmlAttributes attributes);
    protected virtual XmlElement CreateHtmlElementSetAsRoot(HtmlAttributes attributes);
    protected virtual void AppendElement(XmlElement child, XmlElement newParent);
    protected virtual bool HasChildren(XmlElement element);
    protected virtual XmlElement CreateElement(string ns, string name, HtmlAttributes attributes, XmlElement form);
    protected virtual void Start(bool fragment);
    protected virtual void ReceiveDocumentMode(DocumentMode mode, string publicIdentifier, string systemIdentifier, bool html4SpecificAdditionalErrorChecks);
    internal XmlDocument get_Document();
    internal XmlDocumentFragment getDocumentFragment();
    protected virtual void InsertFosterParentedCharacters(string text, XmlElement table, XmlElement stackParent);
    protected virtual void InsertFosterParentedChild(XmlElement child, XmlElement table, XmlElement stackParent);
    protected virtual void DetachFromParent(XmlElement element);
}
public class HttpWebAdapters.Adapters.HttpWebRequestAdapter : object {
    private HttpWebRequest request;
    public HttpWebRequestMethod Method { get; public set; }
    public bool AllowAutoRedirect { get; public set; }
    public bool AllowWriteStreamBuffering { get; public set; }
    public bool HaveResponse { get; }
    public bool KeepAlive { get; public set; }
    public bool Pipelined { get; public set; }
    public bool PreAuthenticate { get; public set; }
    public bool UnsafeAuthenticatedConnectionSharing { get; public set; }
    public bool SendChunked { get; public set; }
    public DecompressionMethods AutomaticDecompression { get; public set; }
    public int MaximumResponseHeadersLength { get; public set; }
    public X509CertificateCollection ClientCertificates { get; public set; }
    public CookieContainer CookieContainer { get; public set; }
    public Uri RequestUri { get; }
    public long ContentLength { get; public set; }
    public int Timeout { get; public set; }
    public int ReadWriteTimeout { get; public set; }
    public Uri Address { get; }
    public ServicePoint ServicePoint { get; }
    public int MaximumAutomaticRedirections { get; public set; }
    public ICredentials Credentials { get; public set; }
    public bool UseDefaultCredentials { get; public set; }
    public string ConnectionGroupName { get; public set; }
    public WebHeaderCollection Headers { get; public set; }
    public IWebProxy Proxy { get; public set; }
    public Version ProtocolVersion { get; public set; }
    public string ContentType { get; public set; }
    public string MediaType { get; public set; }
    public string TransferEncoding { get; public set; }
    public string Connection { get; public set; }
    public string Accept { get; public set; }
    public string Referer { get; public set; }
    public string UserAgent { get; public set; }
    public string Expect { get; public set; }
    public DateTime IfModifiedSince { get; public set; }
    public HttpWebRequestAdapter(HttpWebRequest request);
    public sealed virtual HttpWebRequestMethod get_Method();
    public sealed virtual void set_Method(HttpWebRequestMethod value);
    public sealed virtual IHttpWebResponse GetResponse();
    public sealed virtual IAsyncResult BeginGetResponse(AsyncCallback callback, object state);
    public sealed virtual IHttpWebResponse EndGetResponse(IAsyncResult result);
    public sealed virtual IAsyncResult BeginGetRequestStream(AsyncCallback callback, object state);
    public sealed virtual Stream EndGetRequestStream(IAsyncResult result);
    public sealed virtual Stream GetRequestStream();
    public sealed virtual void Abort();
    public sealed virtual void AddRange(int from, int to);
    public sealed virtual void AddRange(int range);
    public sealed virtual void AddRange(string rangeSpecifier, int from, int to);
    public sealed virtual void AddRange(string rangeSpecifier, int range);
    public sealed virtual bool get_AllowAutoRedirect();
    public sealed virtual void set_AllowAutoRedirect(bool value);
    public sealed virtual bool get_AllowWriteStreamBuffering();
    public sealed virtual void set_AllowWriteStreamBuffering(bool value);
    public sealed virtual bool get_HaveResponse();
    public sealed virtual bool get_KeepAlive();
    public sealed virtual void set_KeepAlive(bool value);
    public sealed virtual bool get_Pipelined();
    public sealed virtual void set_Pipelined(bool value);
    public sealed virtual bool get_PreAuthenticate();
    public sealed virtual void set_PreAuthenticate(bool value);
    public sealed virtual bool get_UnsafeAuthenticatedConnectionSharing();
    public sealed virtual void set_UnsafeAuthenticatedConnectionSharing(bool value);
    public sealed virtual bool get_SendChunked();
    public sealed virtual void set_SendChunked(bool value);
    public sealed virtual DecompressionMethods get_AutomaticDecompression();
    public sealed virtual void set_AutomaticDecompression(DecompressionMethods value);
    public sealed virtual int get_MaximumResponseHeadersLength();
    public sealed virtual void set_MaximumResponseHeadersLength(int value);
    public sealed virtual X509CertificateCollection get_ClientCertificates();
    public sealed virtual void set_ClientCertificates(X509CertificateCollection value);
    public sealed virtual CookieContainer get_CookieContainer();
    public sealed virtual void set_CookieContainer(CookieContainer value);
    public sealed virtual Uri get_RequestUri();
    public sealed virtual long get_ContentLength();
    public sealed virtual void set_ContentLength(long value);
    public sealed virtual int get_Timeout();
    public sealed virtual void set_Timeout(int value);
    public sealed virtual int get_ReadWriteTimeout();
    public sealed virtual void set_ReadWriteTimeout(int value);
    public sealed virtual Uri get_Address();
    public sealed virtual ServicePoint get_ServicePoint();
    public sealed virtual int get_MaximumAutomaticRedirections();
    public sealed virtual void set_MaximumAutomaticRedirections(int value);
    public sealed virtual ICredentials get_Credentials();
    public sealed virtual void set_Credentials(ICredentials value);
    public sealed virtual bool get_UseDefaultCredentials();
    public sealed virtual void set_UseDefaultCredentials(bool value);
    public sealed virtual string get_ConnectionGroupName();
    public sealed virtual void set_ConnectionGroupName(string value);
    public sealed virtual WebHeaderCollection get_Headers();
    public sealed virtual void set_Headers(WebHeaderCollection value);
    public sealed virtual IWebProxy get_Proxy();
    public sealed virtual void set_Proxy(IWebProxy value);
    public sealed virtual Version get_ProtocolVersion();
    public sealed virtual void set_ProtocolVersion(Version value);
    public sealed virtual string get_ContentType();
    public sealed virtual void set_ContentType(string value);
    public sealed virtual string get_MediaType();
    public sealed virtual void set_MediaType(string value);
    public sealed virtual string get_TransferEncoding();
    public sealed virtual void set_TransferEncoding(string value);
    public sealed virtual string get_Connection();
    public sealed virtual void set_Connection(string value);
    public sealed virtual string get_Accept();
    public sealed virtual void set_Accept(string value);
    public sealed virtual string get_Referer();
    public sealed virtual void set_Referer(string value);
    public sealed virtual string get_UserAgent();
    public sealed virtual void set_UserAgent(string value);
    public sealed virtual string get_Expect();
    public sealed virtual void set_Expect(string value);
    public sealed virtual DateTime get_IfModifiedSince();
    public sealed virtual void set_IfModifiedSince(DateTime value);
}
public class HttpWebAdapters.Adapters.HttpWebResponseAdapter : object {
    private WebResponse response;
    public CookieCollection Cookies { get; public set; }
    public string ContentEncoding { get; }
    public string CharacterSet { get; }
    public string Server { get; }
    public DateTime LastModified { get; }
    public HttpStatusCode StatusCode { get; }
    public string StatusDescription { get; }
    public Version ProtocolVersion { get; }
    public string Method { get; }
    public bool IsFromCache { get; }
    public bool IsMutuallyAuthenticated { get; }
    public long ContentLength { get; public set; }
    public string ContentType { get; public set; }
    public Uri ResponseUri { get; }
    public WebHeaderCollection Headers { get; }
    public HttpWebResponseAdapter(WebResponse response);
    public sealed virtual string GetResponseHeader(string headerName);
    public sealed virtual CookieCollection get_Cookies();
    public sealed virtual void set_Cookies(CookieCollection value);
    public sealed virtual string get_ContentEncoding();
    public sealed virtual string get_CharacterSet();
    public sealed virtual string get_Server();
    public sealed virtual DateTime get_LastModified();
    public sealed virtual HttpStatusCode get_StatusCode();
    public sealed virtual string get_StatusDescription();
    public sealed virtual Version get_ProtocolVersion();
    public sealed virtual string get_Method();
    public sealed virtual void Close();
    public sealed virtual Stream GetResponseStream();
    public sealed virtual bool get_IsFromCache();
    public sealed virtual bool get_IsMutuallyAuthenticated();
    public sealed virtual long get_ContentLength();
    public sealed virtual void set_ContentLength(long value);
    public sealed virtual string get_ContentType();
    public sealed virtual void set_ContentType(string value);
    public sealed virtual Uri get_ResponseUri();
    public sealed virtual WebHeaderCollection get_Headers();
    public sealed virtual void Dispose();
}
public class HttpWebAdapters.BasicAuthHttpWebRequestFactory : object {
    private string username;
    private string password;
    public BasicAuthHttpWebRequestFactory(string username, string password);
    public IHttpWebRequest Create(string url);
    public sealed virtual IHttpWebRequest Create(Uri url);
}
public class HttpWebAdapters.HttpWebRequestFactory : object {
    public IHttpWebRequest Create(string url);
    public sealed virtual IHttpWebRequest Create(Uri url);
}
public class HttpWebAdapters.HttpWebRequestMethod : object {
    private string method;
    private static string SGET;
    private static string SPOST;
    public static HttpWebRequestMethod GET;
    public static HttpWebRequestMethod POST;
    private HttpWebRequestMethod(string m);
    private static HttpWebRequestMethod();
    public virtual string ToString();
    public static HttpWebRequestMethod Parse(string s);
}
public interface HttpWebAdapters.IHttpWebRequest {
    public HttpWebRequestMethod Method { get; public set; }
    public bool AllowAutoRedirect { get; public set; }
    public bool AllowWriteStreamBuffering { get; public set; }
    public bool HaveResponse { get; }
    public bool KeepAlive { get; public set; }
    public bool Pipelined { get; public set; }
    public bool PreAuthenticate { get; public set; }
    public bool UnsafeAuthenticatedConnectionSharing { get; public set; }
    public bool SendChunked { get; public set; }
    public DecompressionMethods AutomaticDecompression { get; public set; }
    public int MaximumResponseHeadersLength { get; public set; }
    public X509CertificateCollection ClientCertificates { get; public set; }
    public CookieContainer CookieContainer { get; public set; }
    public Uri RequestUri { get; }
    public long ContentLength { get; public set; }
    public int Timeout { get; public set; }
    public int ReadWriteTimeout { get; public set; }
    public Uri Address { get; }
    public ServicePoint ServicePoint { get; }
    public int MaximumAutomaticRedirections { get; public set; }
    public ICredentials Credentials { get; public set; }
    public bool UseDefaultCredentials { get; public set; }
    public string ConnectionGroupName { get; public set; }
    public WebHeaderCollection Headers { get; public set; }
    public IWebProxy Proxy { get; public set; }
    public Version ProtocolVersion { get; public set; }
    public string ContentType { get; public set; }
    public string MediaType { get; public set; }
    public string TransferEncoding { get; public set; }
    public string Connection { get; public set; }
    public string Accept { get; public set; }
    public string Referer { get; public set; }
    public string UserAgent { get; public set; }
    public string Expect { get; public set; }
    public DateTime IfModifiedSince { get; public set; }
    public abstract virtual HttpWebRequestMethod get_Method();
    public abstract virtual void set_Method(HttpWebRequestMethod value);
    public abstract virtual IHttpWebResponse GetResponse();
    public abstract virtual Stream GetRequestStream();
    public abstract virtual void Abort();
    public abstract virtual void AddRange(int from, int to);
    public abstract virtual void AddRange(int range);
    public abstract virtual void AddRange(string rangeSpecifier, int from, int to);
    public abstract virtual void AddRange(string rangeSpecifier, int range);
    public abstract virtual bool get_AllowAutoRedirect();
    public abstract virtual void set_AllowAutoRedirect(bool value);
    public abstract virtual bool get_AllowWriteStreamBuffering();
    public abstract virtual void set_AllowWriteStreamBuffering(bool value);
    public abstract virtual bool get_HaveResponse();
    public abstract virtual bool get_KeepAlive();
    public abstract virtual void set_KeepAlive(bool value);
    public abstract virtual bool get_Pipelined();
    public abstract virtual void set_Pipelined(bool value);
    public abstract virtual bool get_PreAuthenticate();
    public abstract virtual void set_PreAuthenticate(bool value);
    public abstract virtual bool get_UnsafeAuthenticatedConnectionSharing();
    public abstract virtual void set_UnsafeAuthenticatedConnectionSharing(bool value);
    public abstract virtual bool get_SendChunked();
    public abstract virtual void set_SendChunked(bool value);
    public abstract virtual DecompressionMethods get_AutomaticDecompression();
    public abstract virtual void set_AutomaticDecompression(DecompressionMethods value);
    public abstract virtual int get_MaximumResponseHeadersLength();
    public abstract virtual void set_MaximumResponseHeadersLength(int value);
    public abstract virtual X509CertificateCollection get_ClientCertificates();
    public abstract virtual void set_ClientCertificates(X509CertificateCollection value);
    public abstract virtual CookieContainer get_CookieContainer();
    public abstract virtual void set_CookieContainer(CookieContainer value);
    public abstract virtual Uri get_RequestUri();
    public abstract virtual long get_ContentLength();
    public abstract virtual void set_ContentLength(long value);
    public abstract virtual int get_Timeout();
    public abstract virtual void set_Timeout(int value);
    public abstract virtual int get_ReadWriteTimeout();
    public abstract virtual void set_ReadWriteTimeout(int value);
    public abstract virtual Uri get_Address();
    public abstract virtual ServicePoint get_ServicePoint();
    public abstract virtual int get_MaximumAutomaticRedirections();
    public abstract virtual void set_MaximumAutomaticRedirections(int value);
    public abstract virtual ICredentials get_Credentials();
    public abstract virtual void set_Credentials(ICredentials value);
    public abstract virtual bool get_UseDefaultCredentials();
    public abstract virtual void set_UseDefaultCredentials(bool value);
    public abstract virtual string get_ConnectionGroupName();
    public abstract virtual void set_ConnectionGroupName(string value);
    public abstract virtual WebHeaderCollection get_Headers();
    public abstract virtual void set_Headers(WebHeaderCollection value);
    public abstract virtual IWebProxy get_Proxy();
    public abstract virtual void set_Proxy(IWebProxy value);
    public abstract virtual Version get_ProtocolVersion();
    public abstract virtual void set_ProtocolVersion(Version value);
    public abstract virtual string get_ContentType();
    public abstract virtual void set_ContentType(string value);
    public abstract virtual string get_MediaType();
    public abstract virtual void set_MediaType(string value);
    public abstract virtual string get_TransferEncoding();
    public abstract virtual void set_TransferEncoding(string value);
    public abstract virtual string get_Connection();
    public abstract virtual void set_Connection(string value);
    public abstract virtual string get_Accept();
    public abstract virtual void set_Accept(string value);
    public abstract virtual string get_Referer();
    public abstract virtual void set_Referer(string value);
    public abstract virtual string get_UserAgent();
    public abstract virtual void set_UserAgent(string value);
    public abstract virtual string get_Expect();
    public abstract virtual void set_Expect(string value);
    public abstract virtual DateTime get_IfModifiedSince();
    public abstract virtual void set_IfModifiedSince(DateTime value);
    public abstract virtual IAsyncResult BeginGetResponse(AsyncCallback callback, object state);
    public abstract virtual IHttpWebResponse EndGetResponse(IAsyncResult result);
    public abstract virtual IAsyncResult BeginGetRequestStream(AsyncCallback callback, object state);
    public abstract virtual Stream EndGetRequestStream(IAsyncResult result);
}
public interface HttpWebAdapters.IHttpWebRequestFactory {
    public abstract virtual IHttpWebRequest Create(Uri url);
}
public interface HttpWebAdapters.IHttpWebResponse {
    public CookieCollection Cookies { get; public set; }
    public string ContentEncoding { get; }
    public string CharacterSet { get; }
    public string Server { get; }
    public DateTime LastModified { get; }
    public HttpStatusCode StatusCode { get; }
    public string StatusDescription { get; }
    public Version ProtocolVersion { get; }
    public string Method { get; }
    public bool IsFromCache { get; }
    public bool IsMutuallyAuthenticated { get; }
    public long ContentLength { get; public set; }
    public string ContentType { get; public set; }
    public Uri ResponseUri { get; }
    public WebHeaderCollection Headers { get; }
    public abstract virtual string GetResponseHeader(string headerName);
    public abstract virtual CookieCollection get_Cookies();
    public abstract virtual void set_Cookies(CookieCollection value);
    public abstract virtual string get_ContentEncoding();
    public abstract virtual string get_CharacterSet();
    public abstract virtual string get_Server();
    public abstract virtual DateTime get_LastModified();
    public abstract virtual HttpStatusCode get_StatusCode();
    public abstract virtual string get_StatusDescription();
    public abstract virtual Version get_ProtocolVersion();
    public abstract virtual string get_Method();
    public abstract virtual void Close();
    public abstract virtual Stream GetResponseStream();
    public abstract virtual bool get_IsFromCache();
    public abstract virtual bool get_IsMutuallyAuthenticated();
    public abstract virtual long get_ContentLength();
    public abstract virtual void set_ContentLength(long value);
    public abstract virtual string get_ContentType();
    public abstract virtual void set_ContentType(string value);
    public abstract virtual Uri get_ResponseUri();
    public abstract virtual WebHeaderCollection get_Headers();
}
public class HttpWebAdapters.WebResponseStub : WebResponse {
    private CookieCollection cookies;
    private string contentEncoding;
    private string characterSet;
    private string server;
    private DateTime lastModified;
    private HttpStatusCode statusCode;
    private string statusDescription;
    private Version protocolVersion;
    private string method;
    public CookieCollection Cookies { get; public set; }
    public string ContentEncoding { get; public set; }
    public string CharacterSet { get; public set; }
    public string Server { get; public set; }
    public DateTime LastModified { get; public set; }
    public HttpStatusCode StatusCode { get; public set; }
    public string StatusDescription { get; public set; }
    public Version ProtocolVersion { get; public set; }
    public string Method { get; public set; }
    public sealed virtual string GetResponseHeader(string headerName);
    public sealed virtual CookieCollection get_Cookies();
    public sealed virtual void set_Cookies(CookieCollection value);
    public sealed virtual string get_ContentEncoding();
    public void set_ContentEncoding(string value);
    public sealed virtual string get_CharacterSet();
    public void set_CharacterSet(string value);
    public sealed virtual string get_Server();
    public void set_Server(string value);
    public sealed virtual DateTime get_LastModified();
    public void set_LastModified(DateTime value);
    public sealed virtual HttpStatusCode get_StatusCode();
    public void set_StatusCode(HttpStatusCode value);
    public sealed virtual string get_StatusDescription();
    public void set_StatusDescription(string value);
    public sealed virtual Version get_ProtocolVersion();
    public void set_ProtocolVersion(Version value);
    public sealed virtual string get_Method();
    public void set_Method(string value);
}
